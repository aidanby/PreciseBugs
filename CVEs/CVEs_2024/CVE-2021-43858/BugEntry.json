{"buggy_code": ["// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"sort\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/minio/madmin-go\"\n\t\"github.com/minio/minio/internal/auth\"\n\t\"github.com/minio/minio/internal/config/dns\"\n\t\"github.com/minio/minio/internal/logger\"\n\tiampolicy \"github.com/minio/pkg/iam/policy\"\n)\n\n// RemoveUser - DELETE /minio/admin/v3/remove-user?accessKey=<access_key>\nfunc (a adminAPIHandlers) RemoveUser(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"RemoveUser\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.DeleteUserAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\taccessKey := vars[\"accessKey\"]\n\n\tok, _, err := globalIAMSys.IsTempUser(accessKey)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\tif ok {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, errIAMActionNotAllowed), r.URL)\n\t\treturn\n\t}\n\n\tif err := globalIAMSys.DeleteUser(ctx, accessKey, true); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// ListUsers - GET /minio/admin/v3/list-users?bucket={bucket}\nfunc (a adminAPIHandlers) ListBucketUsers(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListBucketUsers\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, cred := validateAdminReq(ctx, w, r, iampolicy.ListUsersAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tbucket := mux.Vars(r)[\"bucket\"]\n\n\tpassword := cred.SecretKey\n\n\tallCredentials, err := globalIAMSys.ListBucketUsers(bucket)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tdata, err := json.Marshal(allCredentials)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\teconfigData, err := madmin.EncryptData(password, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, econfigData)\n}\n\n// ListUsers - GET /minio/admin/v3/list-users\nfunc (a adminAPIHandlers) ListUsers(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListUsers\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, cred := validateAdminReq(ctx, w, r, iampolicy.ListUsersAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tpassword := cred.SecretKey\n\n\tallCredentials, err := globalIAMSys.ListUsers()\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tdata, err := json.Marshal(allCredentials)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\teconfigData, err := madmin.EncryptData(password, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, econfigData)\n}\n\n// GetUserInfo - GET /minio/admin/v3/user-info\nfunc (a adminAPIHandlers) GetUserInfo(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"GetUserInfo\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tvars := mux.Vars(r)\n\tname := vars[\"accessKey\"]\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\tcheckDenyOnly := false\n\tif name == cred.AccessKey {\n\t\t// Check that there is no explicit deny - otherwise it's allowed\n\t\t// to view one's own info.\n\t\tcheckDenyOnly = true\n\t}\n\n\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tGroups:          cred.Groups,\n\t\tAction:          iampolicy.GetUserAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t\tDenyOnly:        checkDenyOnly,\n\t}) {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\treturn\n\t}\n\n\tuserInfo, err := globalIAMSys.GetUserInfo(ctx, name)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tdata, err := json.Marshal(userInfo)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, data)\n}\n\n// UpdateGroupMembers - PUT /minio/admin/v3/update-group-members\nfunc (a adminAPIHandlers) UpdateGroupMembers(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"UpdateGroupMembers\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.AddUserToGroupAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tdata, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tvar updReq madmin.GroupAddRemove\n\terr = json.Unmarshal(data, &updReq)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tif updReq.IsRemove {\n\t\terr = globalIAMSys.RemoveUsersFromGroup(ctx, updReq.Group, updReq.Members)\n\t} else {\n\t\terr = globalIAMSys.AddUsersToGroup(ctx, updReq.Group, updReq.Members)\n\t}\n\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// GetGroup - /minio/admin/v3/group?group=mygroup1\nfunc (a adminAPIHandlers) GetGroup(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"GetGroup\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.GetGroupAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tgroup := vars[\"group\"]\n\n\tgdesc, err := globalIAMSys.GetGroupDescription(group)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tbody, err := json.Marshal(gdesc)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, body)\n}\n\n// ListGroups - GET /minio/admin/v3/groups\nfunc (a adminAPIHandlers) ListGroups(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListGroups\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.ListGroupsAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tgroups, err := globalIAMSys.ListGroups(ctx)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tbody, err := json.Marshal(groups)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, body)\n}\n\n// SetGroupStatus - PUT /minio/admin/v3/set-group-status?group=mygroup1&status=enabled\nfunc (a adminAPIHandlers) SetGroupStatus(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"SetGroupStatus\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.EnableGroupAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tgroup := vars[\"group\"]\n\tstatus := vars[\"status\"]\n\n\tvar err error\n\tswitch status {\n\tcase statusEnabled:\n\t\terr = globalIAMSys.SetGroupStatus(ctx, group, true)\n\tcase statusDisabled:\n\t\terr = globalIAMSys.SetGroupStatus(ctx, group, false)\n\tdefault:\n\t\terr = errInvalidArgument\n\t}\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// SetUserStatus - PUT /minio/admin/v3/set-user-status?accessKey=<access_key>&status=[enabled|disabled]\nfunc (a adminAPIHandlers) SetUserStatus(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"SetUserStatus\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.EnableUserAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\taccessKey := vars[\"accessKey\"]\n\tstatus := vars[\"status\"]\n\n\t// This API is not allowed to lookup accessKey user status\n\tif accessKey == globalActiveCred.AccessKey {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tif err := globalIAMSys.SetUserStatus(ctx, accessKey, madmin.AccountStatus(status)); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// AddUser - PUT /minio/admin/v3/add-user?accessKey=<access_key>\nfunc (a adminAPIHandlers) AddUser(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"AddUser\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tvars := mux.Vars(r)\n\taccessKey := vars[\"accessKey\"]\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\t// Not allowed to add a user with same access key as root credential\n\tif owner && accessKey == cred.AccessKey {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAddUserInvalidArgument), r.URL)\n\t\treturn\n\t}\n\n\tuserCred, exists := globalIAMSys.GetUser(ctx, accessKey)\n\tif exists && (userCred.IsTemp() || userCred.IsServiceAccount()) {\n\t\t// Updating STS credential is not allowed, and this API does not\n\t\t// support updating service accounts.\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAddUserInvalidArgument), r.URL)\n\t\treturn\n\t}\n\n\tif (cred.IsTemp() || cred.IsServiceAccount()) && cred.ParentUser == accessKey {\n\t\t// Incoming access key matches parent user then we should\n\t\t// reject password change requests.\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAddUserInvalidArgument), r.URL)\n\t\treturn\n\t}\n\n\tcheckDenyOnly := false\n\tif accessKey == cred.AccessKey {\n\t\t// Check that there is no explicit deny - otherwise it's allowed\n\t\t// to change one's own password.\n\t\tcheckDenyOnly = true\n\t}\n\n\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tGroups:          cred.Groups,\n\t\tAction:          iampolicy.CreateUserAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t\tDenyOnly:        checkDenyOnly,\n\t}) {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\treturn\n\t}\n\n\tif r.ContentLength > maxEConfigJSONSize || r.ContentLength == -1 {\n\t\t// More than maxConfigSize bytes were available\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminConfigTooLarge), r.URL)\n\t\treturn\n\t}\n\n\tpassword := cred.SecretKey\n\tconfigBytes, err := madmin.DecryptData(password, io.LimitReader(r.Body, r.ContentLength))\n\tif err != nil {\n\t\tlogger.LogIf(ctx, err)\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminConfigBadJSON), r.URL)\n\t\treturn\n\t}\n\n\tvar uinfo madmin.UserInfo\n\tif err = json.Unmarshal(configBytes, &uinfo); err != nil {\n\t\tlogger.LogIf(ctx, err)\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminConfigBadJSON), r.URL)\n\t\treturn\n\t}\n\n\tif err = globalIAMSys.CreateUser(ctx, accessKey, uinfo); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// AddServiceAccount - PUT /minio/admin/v3/add-service-account\nfunc (a adminAPIHandlers) AddServiceAccount(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"AddServiceAccount\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\tpassword := cred.SecretKey\n\treqBytes, err := madmin.DecryptData(password, io.LimitReader(r.Body, r.ContentLength))\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErrWithErr(ErrAdminConfigBadJSON, err), r.URL)\n\t\treturn\n\t}\n\n\tvar createReq madmin.AddServiceAccountReq\n\tif err = json.Unmarshal(reqBytes, &createReq); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErrWithErr(ErrAdminConfigBadJSON, err), r.URL)\n\t\treturn\n\t}\n\n\tvar (\n\t\ttargetUser   string\n\t\ttargetGroups []string\n\t)\n\n\t// If the request did not set a TargetUser, the service account is\n\t// created for the request sender.\n\ttargetUser = createReq.TargetUser\n\tif targetUser == \"\" {\n\t\ttargetUser = cred.AccessKey\n\t}\n\n\topts := newServiceAccountOpts{\n\t\taccessKey: createReq.AccessKey,\n\t\tsecretKey: createReq.SecretKey,\n\t\tclaims:    make(map[string]interface{}),\n\t}\n\n\t// Find the user for the request sender (as it may be sent via a service\n\t// account or STS account):\n\trequestorUser := cred.AccessKey\n\trequestorParentUser := cred.AccessKey\n\trequestorGroups := cred.Groups\n\trequestorIsDerivedCredential := false\n\tif cred.IsServiceAccount() || cred.IsTemp() {\n\t\trequestorParentUser = cred.ParentUser\n\t\trequestorIsDerivedCredential = true\n\t}\n\n\t// Check if we are creating svc account for request sender.\n\tisSvcAccForRequestor := false\n\tif targetUser == requestorUser || targetUser == requestorParentUser {\n\t\tisSvcAccForRequestor = true\n\t}\n\n\t// If we are creating svc account for request sender, ensure\n\t// that targetUser is a real user (i.e. not derived\n\t// credentials).\n\tif isSvcAccForRequestor {\n\t\t// Check if adding service account is explicitly denied.\n\t\t//\n\t\t// This allows turning off service accounts for request sender,\n\t\t// if there is no deny statement this call is implicitly enabled.\n\t\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     requestorUser,\n\t\t\tGroups:          requestorGroups,\n\t\t\tAction:          iampolicy.CreateServiceAccountAdminAction,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tClaims:          claims,\n\t\t\tDenyOnly:        true,\n\t\t}) {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\n\t\tif requestorIsDerivedCredential {\n\t\t\tif requestorParentUser == \"\" {\n\t\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx,\n\t\t\t\t\terrors.New(\"service accounts cannot be generated for temporary credentials without parent\")), r.URL)\n\t\t\t\treturn\n\t\t\t}\n\t\t\ttargetUser = requestorParentUser\n\t\t}\n\t\ttargetGroups = requestorGroups\n\n\t\t// In case of LDAP/OIDC we need to set `opts.claims` to ensure\n\t\t// it is associated with the LDAP/OIDC user properly.\n\t\tfor k, v := range cred.Claims {\n\t\t\tif k == expClaim {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\topts.claims[k] = v\n\t\t}\n\t} else {\n\t\t// Need permission if we are creating a service acccount for a\n\t\t// user <> to the request sender\n\t\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     requestorUser,\n\t\t\tGroups:          requestorGroups,\n\t\t\tAction:          iampolicy.CreateServiceAccountAdminAction,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tClaims:          claims,\n\t\t\tDenyOnly:        true,\n\t\t}) {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\n\t\t// In case of LDAP we need to resolve the targetUser to a DN and\n\t\t// query their groups:\n\t\tif globalLDAPConfig.Enabled {\n\t\t\topts.claims[ldapUserN] = targetUser // simple username\n\t\t\ttargetUser, targetGroups, err = globalLDAPConfig.LookupUserDN(targetUser)\n\t\t\tif err != nil {\n\t\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\t\treturn\n\t\t\t}\n\t\t\topts.claims[ldapUser] = targetUser // username DN\n\t\t}\n\n\t\t// NOTE: if not using LDAP, then internal IDP or open ID is\n\t\t// being used - in the former, group info is enforced when\n\t\t// generated credentials are used to make requests, and in the\n\t\t// latter, a group notion is not supported.\n\t}\n\n\tvar sp *iampolicy.Policy\n\tif len(createReq.Policy) > 0 {\n\t\tsp, err = iampolicy.ParseConfig(bytes.NewReader(createReq.Policy))\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\topts.sessionPolicy = sp\n\tnewCred, err := globalIAMSys.NewServiceAccount(ctx, targetUser, targetGroups, opts)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call hook for cluster-replication.\n\t//\n\t// FIXME: This wont work in an OpenID situation as the parent credential\n\t// may not be present on peer clusters to provide inherited policies.\n\t// Also, we should not be replicating root user's service account - as\n\t// they are not authenticated by a common external IDP, so we skip when\n\t// opts.ldapUser == \"\".\n\tif _, isLDAPAccount := opts.claims[ldapUserN]; isLDAPAccount {\n\t\terr = globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\t\tType: madmin.SRIAMItemSvcAcc,\n\t\t\tSvcAccChange: &madmin.SRSvcAccChange{\n\t\t\t\tCreate: &madmin.SRSvcAccCreate{\n\t\t\t\t\tParent:        newCred.ParentUser,\n\t\t\t\t\tAccessKey:     newCred.AccessKey,\n\t\t\t\t\tSecretKey:     newCred.SecretKey,\n\t\t\t\t\tGroups:        newCred.Groups,\n\t\t\t\t\tClaims:        opts.claims,\n\t\t\t\t\tSessionPolicy: createReq.Policy,\n\t\t\t\t\tStatus:        auth.AccountOn,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\tvar createResp = madmin.AddServiceAccountResp{\n\t\tCredentials: madmin.Credentials{\n\t\t\tAccessKey: newCred.AccessKey,\n\t\t\tSecretKey: newCred.SecretKey,\n\t\t},\n\t}\n\n\tdata, err := json.Marshal(createResp)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tencryptedData, err := madmin.EncryptData(password, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, encryptedData)\n}\n\n// UpdateServiceAccount - POST /minio/admin/v3/update-service-account\nfunc (a adminAPIHandlers) UpdateServiceAccount(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"UpdateServiceAccount\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\taccessKey := mux.Vars(r)[\"accessKey\"]\n\tif accessKey == \"\" {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tsvcAccount, _, err := globalIAMSys.GetServiceAccount(ctx, accessKey)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tAction:          iampolicy.UpdateServiceAccountAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t}) {\n\t\trequestUser := cred.AccessKey\n\t\tif cred.ParentUser != \"\" {\n\t\t\trequestUser = cred.ParentUser\n\t\t}\n\n\t\tif requestUser != svcAccount.ParentUser {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\tpassword := cred.SecretKey\n\treqBytes, err := madmin.DecryptData(password, io.LimitReader(r.Body, r.ContentLength))\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErrWithErr(ErrAdminConfigBadJSON, err), r.URL)\n\t\treturn\n\t}\n\n\tvar updateReq madmin.UpdateServiceAccountReq\n\tif err = json.Unmarshal(reqBytes, &updateReq); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErrWithErr(ErrAdminConfigBadJSON, err), r.URL)\n\t\treturn\n\t}\n\n\tvar sp *iampolicy.Policy\n\tif len(updateReq.NewPolicy) > 0 {\n\t\tsp, err = iampolicy.ParseConfig(bytes.NewReader(updateReq.NewPolicy))\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\topts := updateServiceAccountOpts{\n\t\tsecretKey:     updateReq.NewSecretKey,\n\t\tstatus:        updateReq.NewStatus,\n\t\tsessionPolicy: sp,\n\t}\n\terr = globalIAMSys.UpdateServiceAccount(ctx, accessKey, opts)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call site replication hook. Only LDAP accounts are supported for\n\t// replication operations.\n\tsvcAccClaims, err := globalIAMSys.GetClaimsForSvcAcc(ctx, accessKey)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\tif _, isLDAPAccount := svcAccClaims[ldapUserN]; isLDAPAccount {\n\t\terr = globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\t\tType: madmin.SRIAMItemSvcAcc,\n\t\t\tSvcAccChange: &madmin.SRSvcAccChange{\n\t\t\t\tUpdate: &madmin.SRSvcAccUpdate{\n\t\t\t\t\tAccessKey:     accessKey,\n\t\t\t\t\tSecretKey:     opts.secretKey,\n\t\t\t\t\tStatus:        opts.status,\n\t\t\t\t\tSessionPolicy: updateReq.NewPolicy,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\twriteSuccessNoContent(w)\n}\n\n// InfoServiceAccount - GET /minio/admin/v3/info-service-account\nfunc (a adminAPIHandlers) InfoServiceAccount(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"InfoServiceAccount\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\taccessKey := mux.Vars(r)[\"accessKey\"]\n\tif accessKey == \"\" {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tsvcAccount, policy, err := globalIAMSys.GetServiceAccount(ctx, accessKey)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tAction:          iampolicy.ListServiceAccountsAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t}) {\n\t\trequestUser := cred.AccessKey\n\t\tif cred.ParentUser != \"\" {\n\t\t\trequestUser = cred.ParentUser\n\t\t}\n\n\t\tif requestUser != svcAccount.ParentUser {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\tvar svcAccountPolicy iampolicy.Policy\n\n\timpliedPolicy := policy == nil\n\n\t// If policy is empty, check for policy of the parent user\n\tif !impliedPolicy {\n\t\tsvcAccountPolicy = svcAccountPolicy.Merge(*policy)\n\t} else {\n\t\tpoliciesNames, err := globalIAMSys.PolicyDBGet(svcAccount.ParentUser, false)\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t\tsvcAccountPolicy = svcAccountPolicy.Merge(globalIAMSys.GetCombinedPolicy(policiesNames...))\n\t}\n\n\tpolicyJSON, err := json.MarshalIndent(svcAccountPolicy, \"\", \" \")\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tvar infoResp = madmin.InfoServiceAccountResp{\n\t\tParentUser:    svcAccount.ParentUser,\n\t\tAccountStatus: svcAccount.Status,\n\t\tImpliedPolicy: impliedPolicy,\n\t\tPolicy:        string(policyJSON),\n\t}\n\n\tdata, err := json.Marshal(infoResp)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tencryptedData, err := madmin.EncryptData(cred.SecretKey, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, encryptedData)\n}\n\n// ListServiceAccounts - GET /minio/admin/v3/list-service-accounts\nfunc (a adminAPIHandlers) ListServiceAccounts(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListServiceAccounts\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\tvar targetAccount string\n\n\t// If listing is requested for a specific user (who is not the request\n\t// sender), check that the user has permissions.\n\tuser := r.Form.Get(\"user\")\n\tif user != \"\" && user != cred.AccessKey {\n\t\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     cred.AccessKey,\n\t\t\tAction:          iampolicy.ListServiceAccountsAdminAction,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tClaims:          claims,\n\t\t}) {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\t\ttargetAccount = user\n\t} else {\n\t\ttargetAccount = cred.AccessKey\n\t\tif cred.ParentUser != \"\" {\n\t\t\ttargetAccount = cred.ParentUser\n\t\t}\n\t}\n\n\tserviceAccounts, err := globalIAMSys.ListServiceAccounts(ctx, targetAccount)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tvar serviceAccountsNames []string\n\n\tfor _, svc := range serviceAccounts {\n\t\tserviceAccountsNames = append(serviceAccountsNames, svc.AccessKey)\n\t}\n\n\tvar listResp = madmin.ListServiceAccountsResp{\n\t\tAccounts: serviceAccountsNames,\n\t}\n\n\tdata, err := json.Marshal(listResp)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tencryptedData, err := madmin.EncryptData(cred.SecretKey, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, encryptedData)\n}\n\n// DeleteServiceAccount - DELETE /minio/admin/v3/delete-service-account\nfunc (a adminAPIHandlers) DeleteServiceAccount(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"DeleteServiceAccount\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\tserviceAccount := mux.Vars(r)[\"accessKey\"]\n\tif serviceAccount == \"\" {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminInvalidArgument), r.URL)\n\t\treturn\n\t}\n\n\tsvcAccount, _, err := globalIAMSys.GetServiceAccount(ctx, serviceAccount)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tadminPrivilege := globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tAction:          iampolicy.RemoveServiceAccountAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t})\n\n\tif !adminPrivilege {\n\t\tparentUser := cred.AccessKey\n\t\tif cred.ParentUser != \"\" {\n\t\t\tparentUser = cred.ParentUser\n\t\t}\n\t\tif parentUser != svcAccount.ParentUser {\n\t\t\t// The service account belongs to another user but return not\n\t\t\t// found error to mitigate brute force attacks. or the\n\t\t\t// serviceAccount doesn't exist.\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminServiceAccountNotFound), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\t// Save svc acc claims before deletion (for site replication hook).\n\tsvcAccClaims, err := globalIAMSys.GetClaimsForSvcAcc(ctx, serviceAccount)\n\tif err != nil && err != errNoSuchServiceAccount {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\terr = globalIAMSys.DeleteServiceAccount(ctx, serviceAccount, true)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call site replication hook. Only LDAP accounts are supported for\n\t// replication operations.\n\tif _, isLDAPAccount := svcAccClaims[ldapUserN]; isLDAPAccount {\n\t\terr = globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\t\tType: madmin.SRIAMItemSvcAcc,\n\t\t\tSvcAccChange: &madmin.SRSvcAccChange{\n\t\t\t\tDelete: &madmin.SRSvcAccDelete{\n\t\t\t\t\tAccessKey: serviceAccount,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\twriteSuccessNoContent(w)\n}\n\n// AccountInfoHandler returns usage\nfunc (a adminAPIHandlers) AccountInfoHandler(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"AccountInfo\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\t// Set prefix value for \"s3:prefix\" policy conditionals.\n\tr.Header.Set(\"prefix\", \"\")\n\n\t// Set delimiter value for \"s3:delimiter\" policy conditionals.\n\tr.Header.Set(\"delimiter\", SlashSeparator)\n\n\t// Check if we are asked to return prefix usage\n\tenablePrefixUsage := r.Form.Get(\"prefix-usage\") == \"true\"\n\n\tisAllowedAccess := func(bucketName string) (rd, wr bool) {\n\t\tif globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     cred.AccessKey,\n\t\t\tGroups:          cred.Groups,\n\t\t\tAction:          iampolicy.ListBucketAction,\n\t\t\tBucketName:      bucketName,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tObjectName:      \"\",\n\t\t\tClaims:          claims,\n\t\t}) {\n\t\t\trd = true\n\t\t}\n\n\t\tif globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     cred.AccessKey,\n\t\t\tGroups:          cred.Groups,\n\t\t\tAction:          iampolicy.PutObjectAction,\n\t\t\tBucketName:      bucketName,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tObjectName:      \"\",\n\t\t\tClaims:          claims,\n\t\t}) {\n\t\t\twr = true\n\t\t}\n\n\t\treturn rd, wr\n\t}\n\n\tvar dataUsageInfo DataUsageInfo\n\tvar err error\n\tif !globalIsGateway {\n\t\t// Load the latest calculated data usage\n\t\tdataUsageInfo, err = loadDataUsageFromBackend(ctx, objectAPI)\n\t\tif err != nil {\n\t\t\t// log the error, continue with the accounting response\n\t\t\tlogger.LogIf(ctx, err)\n\t\t}\n\t}\n\n\t// If etcd, dns federation configured list buckets from etcd.\n\tvar buckets []BucketInfo\n\tif globalDNSConfig != nil && globalBucketFederation {\n\t\tdnsBuckets, err := globalDNSConfig.List()\n\t\tif err != nil && !IsErrIgnored(err,\n\t\t\tdns.ErrNoEntriesFound,\n\t\t\tdns.ErrDomainMissing) {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t\tfor _, dnsRecords := range dnsBuckets {\n\t\t\tbuckets = append(buckets, BucketInfo{\n\t\t\t\tName:    dnsRecords[0].Key,\n\t\t\t\tCreated: dnsRecords[0].CreationDate,\n\t\t\t})\n\t\t}\n\t\tsort.Slice(buckets, func(i, j int) bool {\n\t\t\treturn buckets[i].Name < buckets[j].Name\n\t\t})\n\t} else {\n\t\tbuckets, err = objectAPI.ListBuckets(ctx)\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\taccountName := cred.AccessKey\n\tif cred.IsTemp() || cred.IsServiceAccount() {\n\t\t// For derived credentials, check the parent user's permissions.\n\t\taccountName = cred.ParentUser\n\t}\n\tpolicies, err := globalIAMSys.PolicyDBGet(accountName, false, cred.Groups...)\n\tif err != nil {\n\t\tlogger.LogIf(ctx, err)\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tbuf, err := json.MarshalIndent(globalIAMSys.GetCombinedPolicy(policies...), \"\", \" \")\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tacctInfo := madmin.AccountInfo{\n\t\tAccountName: accountName,\n\t\tServer:      objectAPI.BackendInfo(),\n\t\tPolicy:      buf,\n\t}\n\n\tfor _, bucket := range buckets {\n\t\trd, wr := isAllowedAccess(bucket.Name)\n\t\tif rd || wr {\n\t\t\t// Fetch the data usage of the current bucket\n\t\t\tvar size uint64\n\t\t\tvar objectsCount uint64\n\t\t\tvar objectsHist map[string]uint64\n\t\t\tif !dataUsageInfo.LastUpdate.IsZero() {\n\t\t\t\tsize = dataUsageInfo.BucketsUsage[bucket.Name].Size\n\t\t\t\tobjectsCount = dataUsageInfo.BucketsUsage[bucket.Name].ObjectsCount\n\t\t\t\tobjectsHist = dataUsageInfo.BucketsUsage[bucket.Name].ObjectSizesHistogram\n\t\t\t}\n\t\t\t// Fetch the prefix usage of the current bucket\n\t\t\tvar prefixUsage map[string]uint64\n\t\t\tif enablePrefixUsage {\n\t\t\t\tif pu, err := loadPrefixUsageFromBackend(ctx, objectAPI, bucket.Name); err == nil {\n\t\t\t\t\tprefixUsage = pu\n\t\t\t\t} else {\n\t\t\t\t\tlogger.LogIf(ctx, err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlcfg, _ := globalBucketObjectLockSys.Get(bucket.Name)\n\t\t\tquota, _ := globalBucketQuotaSys.Get(bucket.Name)\n\t\t\trcfg, _ := globalBucketMetadataSys.GetReplicationConfig(ctx, bucket.Name)\n\t\t\ttcfg, _ := globalBucketMetadataSys.GetTaggingConfig(bucket.Name)\n\n\t\t\tacctInfo.Buckets = append(acctInfo.Buckets, madmin.BucketAccessInfo{\n\t\t\t\tName:                 bucket.Name,\n\t\t\t\tCreated:              bucket.Created,\n\t\t\t\tSize:                 size,\n\t\t\t\tObjects:              objectsCount,\n\t\t\t\tObjectSizesHistogram: objectsHist,\n\t\t\t\tPrefixUsage:          prefixUsage,\n\t\t\t\tDetails: &madmin.BucketDetails{\n\t\t\t\t\tVersioning:          globalBucketVersioningSys.Enabled(bucket.Name),\n\t\t\t\t\tVersioningSuspended: globalBucketVersioningSys.Suspended(bucket.Name),\n\t\t\t\t\tReplication:         rcfg != nil,\n\t\t\t\t\tLocking:             lcfg.LockEnabled,\n\t\t\t\t\tQuota:               quota,\n\t\t\t\t\tTagging:             tcfg,\n\t\t\t\t},\n\t\t\t\tAccess: madmin.AccountAccess{\n\t\t\t\t\tRead:  rd,\n\t\t\t\t\tWrite: wr,\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t}\n\n\tusageInfoJSON, err := json.Marshal(acctInfo)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, usageInfoJSON)\n}\n\n// InfoCannedPolicy - GET /minio/admin/v3/info-canned-policy?name={policyName}\n//\n// Newer API response with policy timestamps is returned with query parameter\n// `v=2` like:\n//\n// GET /minio/admin/v3/info-canned-policy?name={policyName}&v=2\n//\n// The newer API will eventually become the default (and only) one. The older\n// response is to return only the policy JSON. The newer response returns\n// timestamps along with the policy JSON. Both versions are supported for now,\n// for smooth transition to new API.\nfunc (a adminAPIHandlers) InfoCannedPolicy(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"InfoCannedPolicy\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.GetPolicyAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tname := mux.Vars(r)[\"name\"]\n\tpolicies := newMappedPolicy(name).toSlice()\n\tif len(policies) != 1 {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, errTooManyPolicies), r.URL)\n\t\treturn\n\t}\n\n\tpolicyDoc, err := globalIAMSys.InfoPolicy(name)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Is the new API version being requested?\n\tinfoPolicyAPIVersion := r.Form.Get(\"v\")\n\tif infoPolicyAPIVersion == \"2\" {\n\t\tbuf, err := json.MarshalIndent(policyDoc, \"\", \" \")\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t\tw.Write(buf)\n\t\treturn\n\t} else if infoPolicyAPIVersion != \"\" {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, errors.New(\"invalid version parameter 'v' supplied\")), r.URL)\n\t\treturn\n\t}\n\n\t// Return the older API response value of just the policy json.\n\tbuf, err := json.MarshalIndent(policyDoc.Policy, \"\", \" \")\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\tw.Write(buf)\n}\n\n// ListBucketPolicies - GET /minio/admin/v3/list-canned-policies?bucket={bucket}\nfunc (a adminAPIHandlers) ListBucketPolicies(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListBucketPolicies\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.ListUserPoliciesAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tbucket := mux.Vars(r)[\"bucket\"]\n\tpolicies, err := globalIAMSys.ListPolicies(ctx, bucket)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tvar newPolicies = make(map[string]iampolicy.Policy)\n\tfor name, p := range policies {\n\t\t_, err = json.Marshal(p)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(ctx, err)\n\t\t\tcontinue\n\t\t}\n\t\tnewPolicies[name] = p\n\t}\n\tif err = json.NewEncoder(w).Encode(newPolicies); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// ListCannedPolicies - GET /minio/admin/v3/list-canned-policies\nfunc (a adminAPIHandlers) ListCannedPolicies(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListCannedPolicies\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.ListUserPoliciesAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tpolicies, err := globalIAMSys.ListPolicies(ctx, \"\")\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tvar newPolicies = make(map[string]iampolicy.Policy)\n\tfor name, p := range policies {\n\t\t_, err = json.Marshal(p)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(ctx, err)\n\t\t\tcontinue\n\t\t}\n\t\tnewPolicies[name] = p\n\t}\n\tif err = json.NewEncoder(w).Encode(newPolicies); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// RemoveCannedPolicy - DELETE /minio/admin/v3/remove-canned-policy?name=<policy_name>\nfunc (a adminAPIHandlers) RemoveCannedPolicy(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"RemoveCannedPolicy\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.DeletePolicyAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tpolicyName := vars[\"name\"]\n\n\tif err := globalIAMSys.DeletePolicy(ctx, policyName, true); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call cluster-replication policy creation hook to replicate policy deletion to\n\t// other minio clusters.\n\tif err := globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\tType: madmin.SRIAMItemPolicy,\n\t\tName: policyName,\n\t}); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// AddCannedPolicy - PUT /minio/admin/v3/add-canned-policy?name=<policy_name>\nfunc (a adminAPIHandlers) AddCannedPolicy(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"AddCannedPolicy\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.CreatePolicyAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tpolicyName := vars[\"name\"]\n\n\t// Error out if Content-Length is missing.\n\tif r.ContentLength <= 0 {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrMissingContentLength), r.URL)\n\t\treturn\n\t}\n\n\t// Error out if Content-Length is beyond allowed size.\n\tif r.ContentLength > maxBucketPolicySize {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrEntityTooLarge), r.URL)\n\t\treturn\n\t}\n\n\tiamPolicyBytes, err := ioutil.ReadAll(io.LimitReader(r.Body, r.ContentLength))\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tiamPolicy, err := iampolicy.ParseConfig(bytes.NewReader(iamPolicyBytes))\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Version in policy must not be empty\n\tif iamPolicy.Version == \"\" {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrMalformedPolicy), r.URL)\n\t\treturn\n\t}\n\n\tif err = globalIAMSys.SetPolicy(ctx, policyName, *iamPolicy); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call cluster-replication policy creation hook to replicate policy to\n\t// other minio clusters.\n\tif err := globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\tType:   madmin.SRIAMItemPolicy,\n\t\tName:   policyName,\n\t\tPolicy: iamPolicyBytes,\n\t}); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// SetPolicyForUserOrGroup - PUT /minio/admin/v3/set-policy?policy=xxx&user-or-group=?[&is-group]\nfunc (a adminAPIHandlers) SetPolicyForUserOrGroup(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"SetPolicyForUserOrGroup\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.AttachPolicyAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tpolicyName := vars[\"policyName\"]\n\tentityName := vars[\"userOrGroup\"]\n\tisGroup := vars[\"isGroup\"] == \"true\"\n\n\tif !isGroup {\n\t\tok, _, err := globalIAMSys.IsTempUser(entityName)\n\t\tif err != nil && err != errNoSuchUser {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t\tif ok {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, errIAMActionNotAllowed), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif err := globalIAMSys.PolicyDBSet(ctx, entityName, policyName, isGroup); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tif err := globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\tType: madmin.SRIAMItemPolicyMapping,\n\t\tPolicyMapping: &madmin.SRPolicyMapping{\n\t\t\tUserOrGroup: entityName,\n\t\t\tIsGroup:     isGroup,\n\t\t\tPolicy:      policyName,\n\t\t},\n\t}); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n", "// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/minio/madmin-go\"\n\tminio \"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n\tcr \"github.com/minio/minio-go/v7/pkg/credentials\"\n\t\"github.com/minio/minio-go/v7/pkg/set\"\n\t\"github.com/minio/minio/internal/auth\"\n)\n\nconst (\n\ttestDefaultTimeout = 30 * time.Second\n)\n\n// API suite container for IAM\ntype TestSuiteIAM struct {\n\tTestSuiteCommon\n\n\t// Flag to turn on tests for etcd backend IAM\n\twithEtcdBackend bool\n\n\tendpoint string\n\tadm      *madmin.AdminClient\n\tclient   *minio.Client\n}\n\nfunc newTestSuiteIAM(c TestSuiteCommon, withEtcdBackend bool) *TestSuiteIAM {\n\treturn &TestSuiteIAM{TestSuiteCommon: c, withEtcdBackend: withEtcdBackend}\n}\n\nfunc (s *TestSuiteIAM) iamSetup(c *check) {\n\tvar err error\n\t// strip url scheme from endpoint\n\ts.endpoint = strings.TrimPrefix(s.endPoint, \"http://\")\n\tif s.secure {\n\t\ts.endpoint = strings.TrimPrefix(s.endPoint, \"https://\")\n\t}\n\n\ts.adm, err = madmin.New(s.endpoint, s.accessKey, s.secretKey, s.secure)\n\tif err != nil {\n\t\tc.Fatalf(\"error creating admin client: %v\", err)\n\t}\n\t// Set transport, so that TLS is handled correctly.\n\ts.adm.SetCustomTransport(s.TestSuiteCommon.client.Transport)\n\n\ts.client, err = minio.New(s.endpoint, &minio.Options{\n\t\tCreds:     credentials.NewStaticV4(s.accessKey, s.secretKey, \"\"),\n\t\tSecure:    s.secure,\n\t\tTransport: s.TestSuiteCommon.client.Transport,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"error creating minio client: %v\", err)\n\t}\n}\n\nconst (\n\tEnvTestEtcdBackend = \"ETCD_SERVER\"\n)\n\nfunc (s *TestSuiteIAM) setUpEtcd(c *check, etcdServer string) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tconfigCmds := []string{\n\t\t\"etcd\",\n\t\t\"endpoints=\" + etcdServer,\n\t\t\"path_prefix=\" + mustGetUUID(),\n\t}\n\t_, err := s.adm.SetConfigKV(ctx, strings.Join(configCmds, \" \"))\n\tif err != nil {\n\t\tc.Fatalf(\"unable to setup Etcd for tests: %v\", err)\n\t}\n\n\ts.RestartIAMSuite(c)\n}\n\nfunc (s *TestSuiteIAM) SetUpSuite(c *check) {\n\t// If etcd backend is specified and etcd server is not present, the test\n\t// is skipped.\n\tetcdServer := os.Getenv(EnvTestEtcdBackend)\n\tif s.withEtcdBackend && etcdServer == \"\" {\n\t\tc.Skip(\"Skipping etcd backend IAM test as no etcd server is configured.\")\n\t}\n\n\ts.TestSuiteCommon.SetUpSuite(c)\n\n\ts.iamSetup(c)\n\n\tif s.withEtcdBackend {\n\t\ts.setUpEtcd(c, etcdServer)\n\t}\n}\n\nfunc (s *TestSuiteIAM) RestartIAMSuite(c *check) {\n\ts.TestSuiteCommon.RestartTestServer(c)\n\n\ts.iamSetup(c)\n}\n\nfunc (s *TestSuiteIAM) getAdminClient(c *check, accessKey, secretKey, sessionToken string) *madmin.AdminClient {\n\tmadmClnt, err := madmin.NewWithOptions(s.endpoint, &madmin.Options{\n\t\tCreds:  credentials.NewStaticV4(accessKey, secretKey, sessionToken),\n\t\tSecure: s.secure,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"error creating user admin client: %s\", err)\n\t}\n\tmadmClnt.SetCustomTransport(s.TestSuiteCommon.client.Transport)\n\treturn madmClnt\n}\n\nfunc (s *TestSuiteIAM) getUserClient(c *check, accessKey, secretKey, sessionToken string) *minio.Client {\n\tclient, err := minio.New(s.endpoint, &minio.Options{\n\t\tCreds:     credentials.NewStaticV4(accessKey, secretKey, sessionToken),\n\t\tSecure:    s.secure,\n\t\tTransport: s.TestSuiteCommon.client.Transport,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"error creating user minio client: %s\", err)\n\t}\n\treturn client\n}\n\nfunc TestIAMInternalIDPServerSuite(t *testing.T) {\n\tbaseTestCases := []TestSuiteCommon{\n\t\t// Init and run test on FS backend with signature v4.\n\t\t{serverType: \"FS\", signer: signerV4},\n\t\t// Init and run test on FS backend, with tls enabled.\n\t\t{serverType: \"FS\", signer: signerV4, secure: true},\n\t\t// Init and run test on Erasure backend.\n\t\t{serverType: \"Erasure\", signer: signerV4},\n\t\t// Init and run test on ErasureSet backend.\n\t\t{serverType: \"ErasureSet\", signer: signerV4},\n\t}\n\ttestCases := []*TestSuiteIAM{}\n\tfor _, bt := range baseTestCases {\n\t\ttestCases = append(testCases,\n\t\t\tnewTestSuiteIAM(bt, false),\n\t\t\tnewTestSuiteIAM(bt, true),\n\t\t)\n\t}\n\tfor i, testCase := range testCases {\n\t\tetcdStr := \"\"\n\t\tif testCase.withEtcdBackend {\n\t\t\tetcdStr = \" (with etcd backend)\"\n\t\t}\n\t\tt.Run(\n\t\t\tfmt.Sprintf(\"Test: %d, ServerType: %s%s\", i+1, testCase.serverType, etcdStr),\n\t\t\tfunc(t *testing.T) {\n\t\t\t\tsuite := testCase\n\t\t\t\tc := &check{t, testCase.serverType}\n\n\t\t\t\tsuite.SetUpSuite(c)\n\t\t\t\tsuite.TestUserCreate(c)\n\t\t\t\tsuite.TestPolicyCreate(c)\n\t\t\t\tsuite.TestCannedPolicies(c)\n\t\t\t\tsuite.TestGroupAddRemove(c)\n\t\t\t\tsuite.TestServiceAccountOpsByAdmin(c)\n\t\t\t\tsuite.TestServiceAccountOpsByUser(c)\n\t\t\t\tsuite.TestAddServiceAccountPerms(c)\n\t\t\t\tsuite.TearDownSuite(c)\n\t\t\t},\n\t\t)\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestUserCreate(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\t// 1. Create a user.\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr := s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\n\t// 2. Check new user appears in listing\n\tusersMap, err := s.adm.ListUsers(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"error listing: %v\", err)\n\t}\n\tv, ok := usersMap[accessKey]\n\tif !ok {\n\t\tc.Fatalf(\"user not listed: %s\", accessKey)\n\t}\n\tc.Assert(v.Status, madmin.AccountEnabled)\n\n\t// 3. Associate policy and check that user can access\n\terr = s.adm.SetPolicy(ctx, \"readwrite\", accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to set policy: %v\", err)\n\t}\n\tclient := s.getUserClient(c, accessKey, secretKey, \"\")\n\terr = client.MakeBucket(ctx, getRandomBucketName(), minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"user could not create bucket: %v\", err)\n\t}\n\n\t// 4. Check that user can be disabled and verify it.\n\terr = s.adm.SetUserStatus(ctx, accessKey, madmin.AccountDisabled)\n\tif err != nil {\n\t\tc.Fatalf(\"could not set user account to disabled\")\n\t}\n\tusersMap, err = s.adm.ListUsers(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"error listing: %v\", err)\n\t}\n\tv, ok = usersMap[accessKey]\n\tif !ok {\n\t\tc.Fatalf(\"user was not listed after disabling: %s\", accessKey)\n\t}\n\tc.Assert(v.Status, madmin.AccountDisabled)\n\terr = client.MakeBucket(ctx, getRandomBucketName(), minio.MakeBucketOptions{})\n\tif err == nil {\n\t\tc.Fatalf(\"user account was not disabled!\")\n\t}\n\n\t// 5. Check that user can be deleted and verify it.\n\terr = s.adm.RemoveUser(ctx, accessKey)\n\tif err != nil {\n\t\tc.Fatalf(\"user could not be deleted: %v\", err)\n\t}\n\tusersMap, err = s.adm.ListUsers(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"error listing: %v\", err)\n\t}\n\t_, ok = usersMap[accessKey]\n\tif ok {\n\t\tc.Fatalf(\"user not deleted: %s\", accessKey)\n\t}\n\terr = client.MakeBucket(ctx, getRandomBucketName(), minio.MakeBucketOptions{})\n\tif err == nil {\n\t\tc.Fatalf(\"user account was not deleted!\")\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestAddServiceAccountPerms(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\t// 1. Create a policy\n\tpolicy1 := \"deny-svc\"\n\tpolicy2 := \"allow-svc\"\n\tpolicyBytes := []byte(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Deny\",\n   \"Action\": [\n    \"admin:CreateServiceAccount\"\n   ]\n  }\n ]\n}`)\n\n\tnewPolicyBytes := []byte(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::testbucket/*\"\n   ]\n  }\n ]\n}`)\n\n\terr := s.adm.AddCannedPolicy(ctx, policy1, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\terr = s.adm.AddCannedPolicy(ctx, policy2, newPolicyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\t// 2. Verify that policy json is validated by server\n\tinvalidPolicyBytes := policyBytes[:len(policyBytes)-1]\n\terr = s.adm.AddCannedPolicy(ctx, policy1+\"invalid\", invalidPolicyBytes)\n\tif err == nil {\n\t\tc.Fatalf(\"invalid policy creation success\")\n\t}\n\n\t// 3. Create a user, associate policy and verify access\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\t// 3.1 check that user does not have any access to the bucket\n\tuClient := s.getUserClient(c, accessKey, secretKey, \"\")\n\tc.mustNotListObjects(ctx, uClient, \"testbucket\")\n\n\t// 3.2 associate policy to user\n\terr = s.adm.SetPolicy(ctx, policy1, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\n\tadmClnt := s.getAdminClient(c, accessKey, secretKey, \"\")\n\n\t// 3.3 check user does not have explicit permissions to create service account.\n\tc.mustNotCreateSvcAccount(ctx, accessKey, admClnt)\n\n\t// 4. Verify the policy appears in listing\n\tps, err := s.adm.ListCannedPolicies(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"policy list err: %v\", err)\n\t}\n\t_, ok := ps[policy1]\n\tif !ok {\n\t\tc.Fatalf(\"policy was missing!\")\n\t}\n\n\t// 3.2 associate policy to user\n\terr = s.adm.SetPolicy(ctx, policy2, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\n\t// 3.3 check user can create service account implicitly.\n\tc.mustCreateSvcAccount(ctx, accessKey, admClnt)\n\n\t_, ok = ps[policy2]\n\tif !ok {\n\t\tc.Fatalf(\"policy was missing!\")\n\t}\n\n\terr = s.adm.RemoveUser(ctx, accessKey)\n\tif err != nil {\n\t\tc.Fatalf(\"user could not be deleted: %v\", err)\n\t}\n\n\terr = s.adm.RemoveCannedPolicy(ctx, policy1)\n\tif err != nil {\n\t\tc.Fatalf(\"policy del err: %v\", err)\n\t}\n\n\terr = s.adm.RemoveCannedPolicy(ctx, policy2)\n\tif err != nil {\n\t\tc.Fatalf(\"policy del err: %v\", err)\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestPolicyCreate(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tbucket := getRandomBucketName()\n\terr := s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\t// 1. Create a policy\n\tpolicy := \"mypolicy\"\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = s.adm.AddCannedPolicy(ctx, policy, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\t// 2. Verify that policy json is validated by server\n\tinvalidPolicyBytes := policyBytes[:len(policyBytes)-1]\n\terr = s.adm.AddCannedPolicy(ctx, policy+\"invalid\", invalidPolicyBytes)\n\tif err == nil {\n\t\tc.Fatalf(\"invalid policy creation success\")\n\t}\n\n\t// 3. Create a user, associate policy and verify access\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\t// 3.1 check that user does not have any access to the bucket\n\tuClient := s.getUserClient(c, accessKey, secretKey, \"\")\n\tc.mustNotListObjects(ctx, uClient, bucket)\n\n\t// 3.2 associate policy to user\n\terr = s.adm.SetPolicy(ctx, policy, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\t// 3.3 check user has access to bucket\n\tc.mustListObjects(ctx, uClient, bucket)\n\t// 3.4 Check that user cannot exceed their permissions\n\terr = uClient.RemoveBucket(ctx, bucket)\n\tif err == nil {\n\t\tc.Fatalf(\"bucket was deleted!\")\n\t}\n\n\t// 4. Verify the policy appears in listing\n\tps, err := s.adm.ListCannedPolicies(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"policy list err: %v\", err)\n\t}\n\t_, ok := ps[policy]\n\tif !ok {\n\t\tc.Fatalf(\"policy was missing!\")\n\t}\n\n\t// 5. Check that policy cannot be deleted when attached to a user.\n\terr = s.adm.RemoveCannedPolicy(ctx, policy)\n\tif err == nil {\n\t\tc.Fatalf(\"policy could be unexpectedly deleted!\")\n\t}\n\n\t// 6. Delete the user and then delete the policy.\n\terr = s.adm.RemoveUser(ctx, accessKey)\n\tif err != nil {\n\t\tc.Fatalf(\"user could not be deleted: %v\", err)\n\t}\n\terr = s.adm.RemoveCannedPolicy(ctx, policy)\n\tif err != nil {\n\t\tc.Fatalf(\"policy del err: %v\", err)\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestCannedPolicies(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tpolicies, err := s.adm.ListCannedPolicies(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to list policies: %v\", err)\n\t}\n\n\tdefaultPolicies := []string{\n\t\t\"readwrite\",\n\t\t\"readonly\",\n\t\t\"writeonly\",\n\t\t\"diagnostics\",\n\t\t\"consoleAdmin\",\n\t}\n\n\tfor _, v := range defaultPolicies {\n\t\tif _, ok := policies[v]; !ok {\n\t\t\tc.Fatalf(\"Failed to find %s in policies list\", v)\n\t\t}\n\t}\n\n\tbucket := getRandomBucketName()\n\terr = s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\n\t// Check that default policies can be overwritten.\n\terr = s.adm.AddCannedPolicy(ctx, \"readwrite\", policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\tinfo, err := s.adm.InfoCannedPolicy(ctx, \"readwrite\")\n\tif err != nil {\n\t\tc.Fatalf(\"policy info err: %v\", err)\n\t}\n\n\tinfoStr := string(info)\n\tif !strings.Contains(infoStr, `\"s3:PutObject\"`) || !strings.Contains(infoStr, \":\"+bucket+\"/\") {\n\t\tc.Fatalf(\"policy contains unexpected content!\")\n\t}\n\n}\n\nfunc (s *TestSuiteIAM) TestGroupAddRemove(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tbucket := getRandomBucketName()\n\terr := s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\tpolicy := \"mypolicy\"\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = s.adm.AddCannedPolicy(ctx, policy, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\n\t// 1. Add user to a new group\n\tgroup := \"mygroup\"\n\terr = s.adm.UpdateGroupMembers(ctx, madmin.GroupAddRemove{\n\t\tGroup:   group,\n\t\tMembers: []string{accessKey},\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to add user to group: %v\", err)\n\t}\n\n\t// 2. Check that user has no access\n\tuClient := s.getUserClient(c, accessKey, secretKey, \"\")\n\tc.mustNotListObjects(ctx, uClient, bucket)\n\n\t// 3. Associate policy to group and check user got access.\n\terr = s.adm.SetPolicy(ctx, policy, group, true)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\t// 3.1 check user has access to bucket\n\tc.mustListObjects(ctx, uClient, bucket)\n\t// 3.2 Check that user cannot exceed their permissions\n\terr = uClient.RemoveBucket(ctx, bucket)\n\tif err == nil {\n\t\tc.Fatalf(\"bucket was deleted!\")\n\t}\n\n\t// 4. List groups and members and verify\n\tgroups, err := s.adm.ListGroups(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"group list err: %v\", err)\n\t}\n\tif !set.CreateStringSet(groups...).Contains(group) {\n\t\tc.Fatalf(\"created group not present!\")\n\t}\n\tgroupInfo, err := s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Name, group)\n\tc.Assert(set.CreateStringSet(groupInfo.Members...), set.CreateStringSet(accessKey))\n\tc.Assert(groupInfo.Policy, policy)\n\tc.Assert(groupInfo.Status, string(madmin.GroupEnabled))\n\n\t// 5. Disable/enable the group and verify that user access is revoked/restored.\n\terr = s.adm.SetGroupStatus(ctx, group, madmin.GroupDisabled)\n\tif err != nil {\n\t\tc.Fatalf(\"group set status err: %v\", err)\n\t}\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Status, string(madmin.GroupDisabled))\n\tc.mustNotListObjects(ctx, uClient, bucket)\n\n\terr = s.adm.SetGroupStatus(ctx, group, madmin.GroupEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"group set status err: %v\", err)\n\t}\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Status, string(madmin.GroupEnabled))\n\tc.mustListObjects(ctx, uClient, bucket)\n\n\t// 6. Verify that group cannot be deleted with users.\n\terr = s.adm.UpdateGroupMembers(ctx, madmin.GroupAddRemove{\n\t\tGroup:    group,\n\t\tIsRemove: true,\n\t})\n\tif err == nil {\n\t\tc.Fatalf(\"group was removed!\")\n\t}\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Name, group)\n\n\t// 7. Remove user from group and verify access is revoked.\n\terr = s.adm.UpdateGroupMembers(ctx, madmin.GroupAddRemove{\n\t\tGroup:    group,\n\t\tMembers:  []string{accessKey},\n\t\tIsRemove: true,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"group update err: %v\", err)\n\t}\n\tc.mustNotListObjects(ctx, uClient, bucket)\n\n\t// 7.1 verify group still exists\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Name, group)\n\tc.Assert(len(groupInfo.Members), 0)\n\n\t// 8. Delete group and verify\n\terr = s.adm.UpdateGroupMembers(ctx, madmin.GroupAddRemove{\n\t\tGroup:    group,\n\t\tIsRemove: true,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"group update err: %v\", err)\n\t}\n\tgroups, err = s.adm.ListGroups(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"group list err: %v\", err)\n\t}\n\tif set.CreateStringSet(groups...).Contains(group) {\n\t\tc.Fatalf(\"created group still present!\")\n\t}\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err == nil {\n\t\tc.Fatalf(\"group appears to exist\")\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestServiceAccountOpsByUser(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tbucket := getRandomBucketName()\n\terr := s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\t// Create policy, user and associate policy\n\tpolicy := \"mypolicy\"\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = s.adm.AddCannedPolicy(ctx, policy, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\n\terr = s.adm.SetPolicy(ctx, policy, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\n\t// Create an madmin client with user creds\n\tuserAdmClient, err := madmin.NewWithOptions(s.endpoint, &madmin.Options{\n\t\tCreds:  cr.NewStaticV4(accessKey, secretKey, \"\"),\n\t\tSecure: s.secure,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Err creating user admin client: %v\", err)\n\t}\n\tuserAdmClient.SetCustomTransport(s.TestSuiteCommon.client.Transport)\n\n\t// Create svc acc\n\tcr := c.mustCreateSvcAccount(ctx, accessKey, userAdmClient)\n\n\t// 1. Check that svc account appears in listing\n\tc.assertSvcAccAppearsInListing(ctx, userAdmClient, accessKey, cr.AccessKey)\n\n\t// 2. Check that svc account info can be queried\n\tc.assertSvcAccInfoQueryable(ctx, userAdmClient, accessKey, cr.AccessKey, false)\n\n\t// 3. Check S3 access\n\tc.assertSvcAccS3Access(ctx, s, cr, bucket)\n\n\t// 4. Check that svc account can restrict the policy, and that the\n\t// session policy can be updated.\n\tc.assertSvcAccSessionPolicyUpdate(ctx, s, userAdmClient, accessKey, bucket)\n\n\t// 4. Check that service account's secret key and account status can be\n\t// updated.\n\tc.assertSvcAccSecretKeyAndStatusUpdate(ctx, s, userAdmClient, accessKey, bucket)\n\n\t// 5. Check that service account can be deleted.\n\tc.assertSvcAccDeletion(ctx, s, userAdmClient, accessKey, bucket)\n}\n\nfunc (s *TestSuiteIAM) TestServiceAccountOpsByAdmin(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tbucket := getRandomBucketName()\n\terr := s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\t// Create policy, user and associate policy\n\tpolicy := \"mypolicy\"\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = s.adm.AddCannedPolicy(ctx, policy, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\n\terr = s.adm.SetPolicy(ctx, policy, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\n\t// 1. Create a service account for the user\n\tcr := c.mustCreateSvcAccount(ctx, accessKey, s.adm)\n\n\t// 1.2 Check that svc account appears in listing\n\tc.assertSvcAccAppearsInListing(ctx, s.adm, accessKey, cr.AccessKey)\n\n\t// 1.3 Check that svc account info can be queried\n\tc.assertSvcAccInfoQueryable(ctx, s.adm, accessKey, cr.AccessKey, false)\n\n\t// 2. Check that svc account can access the bucket\n\tc.assertSvcAccS3Access(ctx, s, cr, bucket)\n\n\t// 3. Check that svc account can restrict the policy, and that the\n\t// session policy can be updated.\n\tc.assertSvcAccSessionPolicyUpdate(ctx, s, s.adm, accessKey, bucket)\n\n\t// 4. Check that service account's secret key and account status can be\n\t// updated.\n\tc.assertSvcAccSecretKeyAndStatusUpdate(ctx, s, s.adm, accessKey, bucket)\n\n\t// 5. Check that service account can be deleted.\n\tc.assertSvcAccDeletion(ctx, s, s.adm, accessKey, bucket)\n}\n\nfunc (c *check) mustCreateIAMUser(ctx context.Context, admClnt *madmin.AdminClient) madmin.Credentials {\n\trandUser := mustGetUUID()\n\trandPass := mustGetUUID()\n\terr := admClnt.AddUser(ctx, randUser, randPass)\n\tif err != nil {\n\t\tc.Fatalf(\"should be able to create a user: %v\", err)\n\t}\n\treturn madmin.Credentials{\n\t\tAccessKey: randUser,\n\t\tSecretKey: randPass,\n\t}\n}\n\nfunc (c *check) mustGetIAMUserInfo(ctx context.Context, admClnt *madmin.AdminClient, accessKey string) madmin.UserInfo {\n\tui, err := admClnt.GetUserInfo(ctx, accessKey)\n\tif err != nil {\n\t\tc.Fatalf(\"should be able to get user info: %v\", err)\n\t}\n\treturn ui\n}\n\nfunc (c *check) mustNotCreateIAMUser(ctx context.Context, admClnt *madmin.AdminClient) {\n\trandUser := mustGetUUID()\n\trandPass := mustGetUUID()\n\terr := admClnt.AddUser(ctx, randUser, randPass)\n\tif err == nil {\n\t\tc.Fatalf(\"should not be able to create a user\")\n\t}\n}\n\nfunc (c *check) mustCreateSvcAccount(ctx context.Context, tgtUser string, admClnt *madmin.AdminClient) madmin.Credentials {\n\tcr, err := admClnt.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tTargetUser: tgtUser,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"user should be able to create service accounts %s\", err)\n\t}\n\treturn cr\n}\n\nfunc (c *check) mustNotCreateSvcAccount(ctx context.Context, tgtUser string, admClnt *madmin.AdminClient) {\n\t_, err := admClnt.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tTargetUser: tgtUser,\n\t})\n\tif err == nil {\n\t\tc.Fatalf(\"user was able to add service accounts unexpectedly!\")\n\t}\n}\n\nfunc (c *check) mustNotListObjects(ctx context.Context, client *minio.Client, bucket string) {\n\tres := client.ListObjects(ctx, bucket, minio.ListObjectsOptions{})\n\tv, ok := <-res\n\tif !ok || v.Err == nil {\n\t\tc.Fatalf(\"user was able to list unexpectedly!\")\n\t}\n}\n\nfunc (c *check) mustListObjects(ctx context.Context, client *minio.Client, bucket string) {\n\tres := client.ListObjects(ctx, bucket, minio.ListObjectsOptions{})\n\tv, ok := <-res\n\tif ok && v.Err != nil {\n\t\tmsg := fmt.Sprintf(\"user was unable to list: %v\", v.Err)\n\t\tc.Fatalf(msg)\n\t}\n}\n\nfunc (c *check) assertSvcAccS3Access(ctx context.Context, s *TestSuiteIAM, cr madmin.Credentials, bucket string) {\n\tsvcClient := s.getUserClient(c, cr.AccessKey, cr.SecretKey, \"\")\n\tc.mustListObjects(ctx, svcClient, bucket)\n}\n\nfunc (c *check) assertSvcAccAppearsInListing(ctx context.Context, madmClient *madmin.AdminClient, parentAK, svcAK string) {\n\tlistResp, err := madmClient.ListServiceAccounts(ctx, parentAK)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to list svc accounts: %v\", err)\n\t}\n\tif !set.CreateStringSet(listResp.Accounts...).Contains(svcAK) {\n\t\tc.Fatalf(\"service account did not appear in listing!\")\n\t}\n}\n\nfunc (c *check) assertSvcAccInfoQueryable(ctx context.Context, madmClient *madmin.AdminClient, parentAK, svcAK string, skipParentUserCheck bool) {\n\tinfoResp, err := madmClient.InfoServiceAccount(ctx, svcAK)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to get svc acc info: %v\", err)\n\t}\n\tif !skipParentUserCheck {\n\t\tc.Assert(infoResp.ParentUser, parentAK)\n\t}\n\tc.Assert(infoResp.AccountStatus, \"on\")\n\tc.Assert(infoResp.ImpliedPolicy, true)\n}\n\n// This test assumes that the policy for `accessKey` allows listing on the given\n// bucket. It creates a session policy that restricts listing on the bucket and\n// then enables it again in a session policy update call.\nfunc (c *check) assertSvcAccSessionPolicyUpdate(ctx context.Context, s *TestSuiteIAM, madmClient *madmin.AdminClient, accessKey, bucket string) {\n\tsvcAK, svcSK := mustGenerateCredentials(c)\n\n\t// This policy does not allow listing objects.\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\tcr, err := madmClient.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tPolicy:     policyBytes,\n\t\tTargetUser: accessKey,\n\t\tAccessKey:  svcAK,\n\t\tSecretKey:  svcSK,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to create svc acc: %v\", err)\n\t}\n\tsvcClient := s.getUserClient(c, cr.AccessKey, cr.SecretKey, \"\")\n\tc.mustNotListObjects(ctx, svcClient, bucket)\n\n\t// This policy allows listing objects.\n\tnewPolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = madmClient.UpdateServiceAccount(ctx, svcAK, madmin.UpdateServiceAccountReq{\n\t\tNewPolicy: newPolicyBytes,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"unable to update session policy for svc acc: %v\", err)\n\t}\n\tc.mustListObjects(ctx, svcClient, bucket)\n}\n\nfunc (c *check) assertSvcAccSecretKeyAndStatusUpdate(ctx context.Context, s *TestSuiteIAM, madmClient *madmin.AdminClient, accessKey, bucket string) {\n\tsvcAK, svcSK := mustGenerateCredentials(c)\n\tcr, err := madmClient.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tTargetUser: accessKey,\n\t\tAccessKey:  svcAK,\n\t\tSecretKey:  svcSK,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to create svc acc: %v\", err)\n\t}\n\tsvcClient := s.getUserClient(c, cr.AccessKey, cr.SecretKey, \"\")\n\tc.mustListObjects(ctx, svcClient, bucket)\n\n\t_, svcSK2 := mustGenerateCredentials(c)\n\terr = madmClient.UpdateServiceAccount(ctx, svcAK, madmin.UpdateServiceAccountReq{\n\t\tNewSecretKey: svcSK2,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"unable to update secret key for svc acc: %v\", err)\n\t}\n\t// old creds should not work:\n\tc.mustNotListObjects(ctx, svcClient, bucket)\n\t// new creds work:\n\tsvcClient2 := s.getUserClient(c, cr.AccessKey, svcSK2, \"\")\n\tc.mustListObjects(ctx, svcClient2, bucket)\n\n\t// update status to disabled\n\terr = madmClient.UpdateServiceAccount(ctx, svcAK, madmin.UpdateServiceAccountReq{\n\t\tNewStatus: \"off\",\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"unable to update secret key for svc acc: %v\", err)\n\t}\n\tc.mustNotListObjects(ctx, svcClient2, bucket)\n}\n\nfunc (c *check) assertSvcAccDeletion(ctx context.Context, s *TestSuiteIAM, madmClient *madmin.AdminClient, accessKey, bucket string) {\n\tsvcAK, svcSK := mustGenerateCredentials(c)\n\tcr, err := madmClient.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tTargetUser: accessKey,\n\t\tAccessKey:  svcAK,\n\t\tSecretKey:  svcSK,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to create svc acc: %v\", err)\n\t}\n\tsvcClient := s.getUserClient(c, cr.AccessKey, cr.SecretKey, \"\")\n\tc.mustListObjects(ctx, svcClient, bucket)\n\n\terr = madmClient.DeleteServiceAccount(ctx, svcAK)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to delete svc acc: %v\", err)\n\t}\n\tc.mustNotListObjects(ctx, svcClient, bucket)\n}\n\nfunc mustGenerateCredentials(c *check) (string, string) {\n\tak, sk, err := auth.GenerateCredentials()\n\tif err != nil {\n\t\tc.Fatalf(\"unable to generate credentials: %v\", err)\n\t}\n\treturn ak, sk\n}\n", "// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/dustin/go-humanize\"\n\tjsoniter \"github.com/json-iterator/go\"\n\t\"github.com/minio/madmin-go\"\n\t\"github.com/minio/minio-go/v7/pkg/set\"\n\t\"github.com/minio/minio/internal/auth\"\n\t\"github.com/minio/minio/internal/logger\"\n\tiampolicy \"github.com/minio/pkg/iam/policy\"\n)\n\nconst (\n\t// IAM configuration directory.\n\tiamConfigPrefix = minioConfigPrefix + \"/iam\"\n\n\t// IAM users directory.\n\tiamConfigUsersPrefix = iamConfigPrefix + \"/users/\"\n\n\t// IAM service accounts directory.\n\tiamConfigServiceAccountsPrefix = iamConfigPrefix + \"/service-accounts/\"\n\n\t// IAM groups directory.\n\tiamConfigGroupsPrefix = iamConfigPrefix + \"/groups/\"\n\n\t// IAM policies directory.\n\tiamConfigPoliciesPrefix = iamConfigPrefix + \"/policies/\"\n\n\t// IAM sts directory.\n\tiamConfigSTSPrefix = iamConfigPrefix + \"/sts/\"\n\n\t// IAM Policy DB prefixes.\n\tiamConfigPolicyDBPrefix                = iamConfigPrefix + \"/policydb/\"\n\tiamConfigPolicyDBUsersPrefix           = iamConfigPolicyDBPrefix + \"users/\"\n\tiamConfigPolicyDBSTSUsersPrefix        = iamConfigPolicyDBPrefix + \"sts-users/\"\n\tiamConfigPolicyDBServiceAccountsPrefix = iamConfigPolicyDBPrefix + \"service-accounts/\"\n\tiamConfigPolicyDBGroupsPrefix          = iamConfigPolicyDBPrefix + \"groups/\"\n\n\t// IAM identity file which captures identity credentials.\n\tiamIdentityFile = \"identity.json\"\n\n\t// IAM policy file which provides policies for each users.\n\tiamPolicyFile = \"policy.json\"\n\n\t// IAM group members file\n\tiamGroupMembersFile = \"members.json\"\n\n\t// IAM format file\n\tiamFormatFile = \"format.json\"\n\n\tiamFormatVersion1 = 1\n)\n\ntype iamFormat struct {\n\tVersion int `json:\"version\"`\n}\n\nfunc newIAMFormatVersion1() iamFormat {\n\treturn iamFormat{Version: iamFormatVersion1}\n}\n\nfunc getIAMFormatFilePath() string {\n\treturn iamConfigPrefix + SlashSeparator + iamFormatFile\n}\n\nfunc getUserIdentityPath(user string, userType IAMUserType) string {\n\tvar basePath string\n\tswitch userType {\n\tcase svcUser:\n\t\tbasePath = iamConfigServiceAccountsPrefix\n\tcase stsUser:\n\t\tbasePath = iamConfigSTSPrefix\n\tdefault:\n\t\tbasePath = iamConfigUsersPrefix\n\t}\n\treturn pathJoin(basePath, user, iamIdentityFile)\n}\n\nfunc getGroupInfoPath(group string) string {\n\treturn pathJoin(iamConfigGroupsPrefix, group, iamGroupMembersFile)\n}\n\nfunc getPolicyDocPath(name string) string {\n\treturn pathJoin(iamConfigPoliciesPrefix, name, iamPolicyFile)\n}\n\nfunc getMappedPolicyPath(name string, userType IAMUserType, isGroup bool) string {\n\tif isGroup {\n\t\treturn pathJoin(iamConfigPolicyDBGroupsPrefix, name+\".json\")\n\t}\n\tswitch userType {\n\tcase svcUser:\n\t\treturn pathJoin(iamConfigPolicyDBServiceAccountsPrefix, name+\".json\")\n\tcase stsUser:\n\t\treturn pathJoin(iamConfigPolicyDBSTSUsersPrefix, name+\".json\")\n\tdefault:\n\t\treturn pathJoin(iamConfigPolicyDBUsersPrefix, name+\".json\")\n\t}\n}\n\n// UserIdentity represents a user's secret key and their status\ntype UserIdentity struct {\n\tVersion     int              `json:\"version\"`\n\tCredentials auth.Credentials `json:\"credentials\"`\n}\n\nfunc newUserIdentity(cred auth.Credentials) UserIdentity {\n\treturn UserIdentity{Version: 1, Credentials: cred}\n}\n\n// GroupInfo contains info about a group\ntype GroupInfo struct {\n\tVersion int      `json:\"version\"`\n\tStatus  string   `json:\"status\"`\n\tMembers []string `json:\"members\"`\n}\n\nfunc newGroupInfo(members []string) GroupInfo {\n\treturn GroupInfo{Version: 1, Status: statusEnabled, Members: members}\n}\n\n// MappedPolicy represents a policy name mapped to a user or group\ntype MappedPolicy struct {\n\tVersion  int    `json:\"version\"`\n\tPolicies string `json:\"policy\"`\n}\n\n// converts a mapped policy into a slice of distinct policies\nfunc (mp MappedPolicy) toSlice() []string {\n\tvar policies []string\n\tfor _, policy := range strings.Split(mp.Policies, \",\") {\n\t\tpolicy = strings.TrimSpace(policy)\n\t\tif policy == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tpolicies = append(policies, policy)\n\t}\n\treturn policies\n}\n\nfunc (mp MappedPolicy) policySet() set.StringSet {\n\treturn set.CreateStringSet(mp.toSlice()...)\n}\n\nfunc newMappedPolicy(policy string) MappedPolicy {\n\treturn MappedPolicy{Version: 1, Policies: policy}\n}\n\n// PolicyDoc represents an IAM policy with some metadata.\ntype PolicyDoc struct {\n\tVersion    int `json:\",omitempty\"`\n\tPolicy     iampolicy.Policy\n\tCreateDate time.Time `json:\",omitempty\"`\n\tUpdateDate time.Time `json:\",omitempty\"`\n}\n\nfunc newPolicyDoc(p iampolicy.Policy) PolicyDoc {\n\tnow := UTCNow().Round(time.Millisecond)\n\treturn PolicyDoc{\n\t\tVersion:    1,\n\t\tPolicy:     p,\n\t\tCreateDate: now,\n\t\tUpdateDate: now,\n\t}\n}\n\n// defaultPolicyDoc - used to wrap a default policy as PolicyDoc.\nfunc defaultPolicyDoc(p iampolicy.Policy) PolicyDoc {\n\treturn PolicyDoc{\n\t\tVersion: 1,\n\t\tPolicy:  p,\n\t}\n}\n\nfunc (d *PolicyDoc) update(p iampolicy.Policy) {\n\tnow := UTCNow().Round(time.Millisecond)\n\td.UpdateDate = now\n\tif d.CreateDate.IsZero() {\n\t\td.CreateDate = now\n\t}\n\td.Policy = p\n}\n\n// parseJSON parses both the old and the new format for storing policy\n// definitions.\n//\n// The on-disk format of policy definitions has changed (around early 12/2021)\n// from iampolicy.Policy to PolicyDoc. To avoid a migration, loading supports\n// both the old and the new formats.\nfunc (d *PolicyDoc) parseJSON(data []byte) error {\n\tvar json = jsoniter.ConfigCompatibleWithStandardLibrary\n\tvar doc PolicyDoc\n\terr := json.Unmarshal(data, &doc)\n\tif err != nil {\n\t\terr2 := json.Unmarshal(data, &doc.Policy)\n\t\tif err2 != nil {\n\t\t\t// Just return the first error.\n\t\t\treturn err\n\t\t}\n\t\td.Policy = doc.Policy\n\t\treturn nil\n\t}\n\t*d = doc\n\treturn nil\n}\n\n// key options\ntype options struct {\n\tttl int64 // expiry in seconds\n}\n\ntype iamWatchEvent struct {\n\tisCreated bool // !isCreated implies a delete event.\n\tkeyPath   string\n}\n\n// iamCache contains in-memory cache of IAM data.\ntype iamCache struct {\n\t// map of policy names to policy definitions\n\tiamPolicyDocsMap map[string]PolicyDoc\n\t// map of usernames to credentials\n\tiamUsersMap map[string]auth.Credentials\n\t// map of group names to group info\n\tiamGroupsMap map[string]GroupInfo\n\t// map of user names to groups they are a member of\n\tiamUserGroupMemberships map[string]set.StringSet\n\t// map of usernames/temporary access keys to policy names\n\tiamUserPolicyMap map[string]MappedPolicy\n\t// map of group names to policy names\n\tiamGroupPolicyMap map[string]MappedPolicy\n}\n\nfunc newIamCache() *iamCache {\n\treturn &iamCache{\n\t\tiamPolicyDocsMap:        map[string]PolicyDoc{},\n\t\tiamUsersMap:             map[string]auth.Credentials{},\n\t\tiamGroupsMap:            map[string]GroupInfo{},\n\t\tiamUserGroupMemberships: map[string]set.StringSet{},\n\t\tiamUserPolicyMap:        map[string]MappedPolicy{},\n\t\tiamGroupPolicyMap:       map[string]MappedPolicy{},\n\t}\n}\n\n// buildUserGroupMemberships - builds the memberships map. IMPORTANT:\n// Assumes that c.Lock is held by caller.\nfunc (c *iamCache) buildUserGroupMemberships() {\n\tfor group, gi := range c.iamGroupsMap {\n\t\tc.updateGroupMembershipsMap(group, &gi)\n\t}\n}\n\n// updateGroupMembershipsMap - updates the memberships map for a\n// group. IMPORTANT: Assumes c.Lock() is held by caller.\nfunc (c *iamCache) updateGroupMembershipsMap(group string, gi *GroupInfo) {\n\tif gi == nil {\n\t\treturn\n\t}\n\tfor _, member := range gi.Members {\n\t\tv := c.iamUserGroupMemberships[member]\n\t\tif v == nil {\n\t\t\tv = set.CreateStringSet(group)\n\t\t} else {\n\t\t\tv.Add(group)\n\t\t}\n\t\tc.iamUserGroupMemberships[member] = v\n\t}\n}\n\n// removeGroupFromMembershipsMap - removes the group from every member\n// in the cache. IMPORTANT: Assumes c.Lock() is held by caller.\nfunc (c *iamCache) removeGroupFromMembershipsMap(group string) {\n\tfor member, groups := range c.iamUserGroupMemberships {\n\t\tif !groups.Contains(group) {\n\t\t\tcontinue\n\t\t}\n\t\tgroups.Remove(group)\n\t\tc.iamUserGroupMemberships[member] = groups\n\t}\n}\n\n// policyDBGet - lower-level helper; does not take locks.\n//\n// If a group is passed, it returns policies associated with the group.\n//\n// If a user is passed, it returns policies of the user along with any groups\n// that the server knows the user is a member of.\n//\n// In LDAP users mode, the server does not store any group membership\n// information in IAM (i.e sys.iam*Map) - this info is stored only in the STS\n// generated credentials. Thus we skip looking up group memberships, user map,\n// and group map and check the appropriate policy maps directly.\nfunc (c *iamCache) policyDBGet(mode UsersSysType, name string, isGroup bool) ([]string, error) {\n\tif isGroup {\n\t\tif mode == MinIOUsersSysType {\n\t\t\tg, ok := c.iamGroupsMap[name]\n\t\t\tif !ok {\n\t\t\t\treturn nil, errNoSuchGroup\n\t\t\t}\n\n\t\t\t// Group is disabled, so we return no policy - this\n\t\t\t// ensures the request is denied.\n\t\t\tif g.Status == statusDisabled {\n\t\t\t\treturn nil, nil\n\t\t\t}\n\t\t}\n\n\t\treturn c.iamGroupPolicyMap[name].toSlice(), nil\n\t}\n\n\tif name == globalActiveCred.AccessKey {\n\t\treturn []string{\"consoleAdmin\"}, nil\n\t}\n\n\t// When looking for a user's policies, we also check if the user\n\t// and the groups they are member of are enabled.\n\tvar parentName string\n\tu, ok := c.iamUsersMap[name]\n\tif ok {\n\t\tif !u.IsValid() {\n\t\t\treturn nil, nil\n\t\t}\n\t\tparentName = u.ParentUser\n\t}\n\n\tmp, ok := c.iamUserPolicyMap[name]\n\tif !ok {\n\t\t// Service accounts with root credentials, inherit parent permissions\n\t\tif parentName == globalActiveCred.AccessKey && u.IsServiceAccount() {\n\t\t\t// even if this is set, the claims present in the service\n\t\t\t// accounts apply the final permissions if any.\n\t\t\treturn []string{\"consoleAdmin\"}, nil\n\t\t}\n\t\tif parentName != \"\" {\n\t\t\tmp = c.iamUserPolicyMap[parentName]\n\t\t}\n\t}\n\n\t// returned policy could be empty\n\tpolicies := mp.toSlice()\n\n\tfor _, group := range c.iamUserGroupMemberships[name].ToSlice() {\n\t\t// Skip missing or disabled groups\n\t\tgi, ok := c.iamGroupsMap[group]\n\t\tif !ok || gi.Status == statusDisabled {\n\t\t\tcontinue\n\t\t}\n\n\t\tpolicies = append(policies, c.iamGroupPolicyMap[group].toSlice()...)\n\t}\n\n\treturn policies, nil\n}\n\n// IAMStorageAPI defines an interface for the IAM persistence layer\ntype IAMStorageAPI interface {\n\n\t// The role of the read-write lock is to prevent go routines from\n\t// concurrently reading and writing the IAM storage. The (r)lock()\n\t// functions return the iamCache. The cache can be safely written to\n\t// only when returned by `lock()`.\n\tlock() *iamCache\n\tunlock()\n\trlock() *iamCache\n\trunlock()\n\n\tmigrateBackendFormat(context.Context) error\n\n\tgetUsersSysType() UsersSysType\n\n\tloadPolicyDoc(ctx context.Context, policy string, m map[string]PolicyDoc) error\n\tloadPolicyDocs(ctx context.Context, m map[string]PolicyDoc) error\n\n\tloadUser(ctx context.Context, user string, userType IAMUserType, m map[string]auth.Credentials) error\n\tloadUsers(ctx context.Context, userType IAMUserType, m map[string]auth.Credentials) error\n\n\tloadGroup(ctx context.Context, group string, m map[string]GroupInfo) error\n\tloadGroups(ctx context.Context, m map[string]GroupInfo) error\n\n\tloadMappedPolicy(ctx context.Context, name string, userType IAMUserType, isGroup bool, m map[string]MappedPolicy) error\n\tloadMappedPolicies(ctx context.Context, userType IAMUserType, isGroup bool, m map[string]MappedPolicy) error\n\n\tsaveIAMConfig(ctx context.Context, item interface{}, path string, opts ...options) error\n\tloadIAMConfig(ctx context.Context, item interface{}, path string) error\n\tdeleteIAMConfig(ctx context.Context, path string) error\n\n\tsavePolicyDoc(ctx context.Context, policyName string, p PolicyDoc) error\n\tsaveMappedPolicy(ctx context.Context, name string, userType IAMUserType, isGroup bool, mp MappedPolicy, opts ...options) error\n\tsaveUserIdentity(ctx context.Context, name string, userType IAMUserType, u UserIdentity, opts ...options) error\n\tsaveGroupInfo(ctx context.Context, group string, gi GroupInfo) error\n\n\tdeletePolicyDoc(ctx context.Context, policyName string) error\n\tdeleteMappedPolicy(ctx context.Context, name string, userType IAMUserType, isGroup bool) error\n\tdeleteUserIdentity(ctx context.Context, name string, userType IAMUserType) error\n\tdeleteGroupInfo(ctx context.Context, name string) error\n}\n\n// iamStorageWatcher is implemented by `IAMStorageAPI` implementers that\n// additionally support watching storage for changes.\ntype iamStorageWatcher interface {\n\twatch(ctx context.Context, keyPath string) <-chan iamWatchEvent\n}\n\n// Set default canned policies only if not already overridden by users.\nfunc setDefaultCannedPolicies(policies map[string]PolicyDoc) {\n\tfor _, v := range iampolicy.DefaultPolicies {\n\t\tif _, ok := policies[v.Name]; !ok {\n\t\t\tpolicies[v.Name] = defaultPolicyDoc(v.Definition)\n\t\t}\n\t}\n}\n\n// LoadIAMCache reads all IAM items and populates a new iamCache object and\n// replaces the in-memory cache object.\nfunc (store *IAMStoreSys) LoadIAMCache(ctx context.Context) error {\n\tnewCache := newIamCache()\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tif err := store.loadPolicyDocs(ctx, newCache.iamPolicyDocsMap); err != nil {\n\t\treturn err\n\t}\n\n\t// Sets default canned policies, if none are set.\n\tsetDefaultCannedPolicies(newCache.iamPolicyDocsMap)\n\n\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\tif err := store.loadUsers(ctx, regUser, newCache.iamUsersMap); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := store.loadGroups(ctx, newCache.iamGroupsMap); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// load polices mapped to users\n\tif err := store.loadMappedPolicies(ctx, regUser, false, newCache.iamUserPolicyMap); err != nil {\n\t\treturn err\n\t}\n\n\t// load policies mapped to groups\n\tif err := store.loadMappedPolicies(ctx, regUser, true, newCache.iamGroupPolicyMap); err != nil {\n\t\treturn err\n\t}\n\n\t// load service accounts\n\tif err := store.loadUsers(ctx, svcUser, newCache.iamUsersMap); err != nil {\n\t\treturn err\n\t}\n\n\t// load STS temp users\n\tif err := store.loadUsers(ctx, stsUser, newCache.iamUsersMap); err != nil {\n\t\treturn err\n\t}\n\n\t// load STS policy mappings\n\tif err := store.loadMappedPolicies(ctx, stsUser, false, newCache.iamUserPolicyMap); err != nil {\n\t\treturn err\n\t}\n\n\tnewCache.buildUserGroupMemberships()\n\n\tcache.iamGroupPolicyMap = newCache.iamGroupPolicyMap\n\tcache.iamGroupsMap = newCache.iamGroupsMap\n\tcache.iamPolicyDocsMap = newCache.iamPolicyDocsMap\n\tcache.iamUserGroupMemberships = newCache.iamUserGroupMemberships\n\tcache.iamUserPolicyMap = newCache.iamUserPolicyMap\n\tcache.iamUsersMap = newCache.iamUsersMap\n\n\treturn nil\n}\n\n// IAMStoreSys contains IAMStorageAPI to add higher-level methods on the storage\n// layer.\ntype IAMStoreSys struct {\n\tIAMStorageAPI\n}\n\n// HasWatcher - returns if the storage system has a watcher.\nfunc (store *IAMStoreSys) HasWatcher() bool {\n\t_, ok := store.IAMStorageAPI.(iamStorageWatcher)\n\treturn ok\n}\n\n// GetUser - fetches credential from memory.\nfunc (store *IAMStoreSys) GetUser(user string) (auth.Credentials, bool) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tc, ok := cache.iamUsersMap[user]\n\treturn c, ok\n}\n\n// GetMappedPolicy - fetches mapped policy from memory.\nfunc (store *IAMStoreSys) GetMappedPolicy(name string, isGroup bool) (MappedPolicy, bool) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tif isGroup {\n\t\tv, ok := cache.iamGroupPolicyMap[name]\n\t\treturn v, ok\n\t}\n\n\tv, ok := cache.iamUserPolicyMap[name]\n\treturn v, ok\n}\n\n// GroupNotificationHandler - updates in-memory cache on notification of\n// change (e.g. peer notification for object storage and etcd watch\n// notification).\nfunc (store *IAMStoreSys) GroupNotificationHandler(ctx context.Context, group string) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\terr := store.loadGroup(ctx, group, cache.iamGroupsMap)\n\tif err != nil && err != errNoSuchGroup {\n\t\treturn err\n\t}\n\n\tif err == errNoSuchGroup {\n\t\t// group does not exist - so remove from memory.\n\t\tcache.removeGroupFromMembershipsMap(group)\n\t\tdelete(cache.iamGroupsMap, group)\n\t\tdelete(cache.iamGroupPolicyMap, group)\n\t\treturn nil\n\t}\n\n\tgi := cache.iamGroupsMap[group]\n\n\t// Updating the group memberships cache happens in two steps:\n\t//\n\t// 1. Remove the group from each user's list of memberships.\n\t// 2. Add the group to each member's list of memberships.\n\t//\n\t// This ensures that regardless of members being added or\n\t// removed, the cache stays current.\n\tcache.removeGroupFromMembershipsMap(group)\n\tcache.updateGroupMembershipsMap(group, &gi)\n\treturn nil\n}\n\n// PolicyDBGet - fetches policies associated with the given user or group, and\n// additional groups if provided.\nfunc (store *IAMStoreSys) PolicyDBGet(name string, isGroup bool, groups ...string) ([]string, error) {\n\tif name == \"\" {\n\t\treturn nil, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tpolicies, err := cache.policyDBGet(store.getUsersSysType(), name, isGroup)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !isGroup {\n\t\tfor _, group := range groups {\n\t\t\tps, err := cache.policyDBGet(store.getUsersSysType(), group, true)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tpolicies = append(policies, ps...)\n\t\t}\n\t}\n\n\treturn policies, nil\n}\n\n// AddUsersToGroup - adds users to group, creating the group if needed.\nfunc (store *IAMStoreSys) AddUsersToGroup(ctx context.Context, group string, members []string) error {\n\tif group == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// Validate that all members exist.\n\tfor _, member := range members {\n\t\tcr, ok := cache.iamUsersMap[member]\n\t\tif !ok {\n\t\t\treturn errNoSuchUser\n\t\t}\n\t\tif cr.IsTemp() || cr.IsServiceAccount() {\n\t\t\treturn errIAMActionNotAllowed\n\t\t}\n\t}\n\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\t// Set group as enabled by default when it doesn't\n\t\t// exist.\n\t\tgi = newGroupInfo(members)\n\t} else {\n\t\tgi.Members = set.CreateStringSet(append(gi.Members, members...)...).ToSlice()\n\t}\n\n\tif err := store.saveGroupInfo(ctx, group, gi); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamGroupsMap[group] = gi\n\n\t// update user-group membership map\n\tfor _, member := range members {\n\t\tgset := cache.iamUserGroupMemberships[member]\n\t\tif gset == nil {\n\t\t\tgset = set.CreateStringSet(group)\n\t\t} else {\n\t\t\tgset.Add(group)\n\t\t}\n\t\tcache.iamUserGroupMemberships[member] = gset\n\t}\n\n\treturn nil\n\n}\n\n// helper function - does not take any locks. Updates only cache if\n// updateCacheOnly is set.\nfunc removeMembersFromGroup(ctx context.Context, store *IAMStoreSys, cache *iamCache, group string, members []string, updateCacheOnly bool) error {\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\treturn errNoSuchGroup\n\t}\n\n\ts := set.CreateStringSet(gi.Members...)\n\td := set.CreateStringSet(members...)\n\tgi.Members = s.Difference(d).ToSlice()\n\n\tif !updateCacheOnly {\n\t\terr := store.saveGroupInfo(ctx, group, gi)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tcache.iamGroupsMap[group] = gi\n\n\t// update user-group membership map\n\tfor _, member := range members {\n\t\tgset := cache.iamUserGroupMemberships[member]\n\t\tif gset == nil {\n\t\t\tcontinue\n\t\t}\n\t\tgset.Remove(group)\n\t\tcache.iamUserGroupMemberships[member] = gset\n\t}\n\n\treturn nil\n}\n\n// RemoveUsersFromGroup - removes users from group, deleting it if it is empty.\nfunc (store *IAMStoreSys) RemoveUsersFromGroup(ctx context.Context, group string, members []string) error {\n\tif group == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// Validate that all members exist.\n\tfor _, member := range members {\n\t\tcr, ok := cache.iamUsersMap[member]\n\t\tif !ok {\n\t\t\treturn errNoSuchUser\n\t\t}\n\t\tif cr.IsTemp() || cr.IsServiceAccount() {\n\t\t\treturn errIAMActionNotAllowed\n\t\t}\n\t}\n\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\treturn errNoSuchGroup\n\t}\n\n\t// Check if attempting to delete a non-empty group.\n\tif len(members) == 0 && len(gi.Members) != 0 {\n\t\treturn errGroupNotEmpty\n\t}\n\n\tif len(members) == 0 {\n\t\t// len(gi.Members) == 0 here.\n\n\t\t// Remove the group from storage. First delete the\n\t\t// mapped policy. No-mapped-policy case is ignored.\n\t\tif err := store.deleteMappedPolicy(ctx, group, regUser, true); err != nil && err != errNoSuchPolicy {\n\t\t\treturn err\n\t\t}\n\t\tif err := store.deleteGroupInfo(ctx, group); err != nil && err != errNoSuchGroup {\n\t\t\treturn err\n\t\t}\n\n\t\t// Delete from server memory\n\t\tdelete(cache.iamGroupsMap, group)\n\t\tdelete(cache.iamGroupPolicyMap, group)\n\t\treturn nil\n\t}\n\n\treturn removeMembersFromGroup(ctx, store, cache, group, members, false)\n}\n\n// SetGroupStatus - updates group status\nfunc (store *IAMStoreSys) SetGroupStatus(ctx context.Context, group string, enabled bool) error {\n\tif group == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\treturn errNoSuchGroup\n\t}\n\n\tif enabled {\n\t\tgi.Status = statusEnabled\n\t} else {\n\t\tgi.Status = statusDisabled\n\t}\n\n\tif err := store.saveGroupInfo(ctx, group, gi); err != nil {\n\t\treturn err\n\t}\n\tcache.iamGroupsMap[group] = gi\n\treturn nil\n}\n\n// GetGroupDescription - builds up group description\nfunc (store *IAMStoreSys) GetGroupDescription(group string) (gd madmin.GroupDesc, err error) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tps, err := cache.policyDBGet(store.getUsersSysType(), group, true)\n\tif err != nil {\n\t\treturn gd, err\n\t}\n\n\tpolicy := strings.Join(ps, \",\")\n\n\tif store.getUsersSysType() != MinIOUsersSysType {\n\t\treturn madmin.GroupDesc{\n\t\t\tName:   group,\n\t\t\tPolicy: policy,\n\t\t}, nil\n\t}\n\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\treturn gd, errNoSuchGroup\n\t}\n\n\treturn madmin.GroupDesc{\n\t\tName:    group,\n\t\tStatus:  gi.Status,\n\t\tMembers: gi.Members,\n\t\tPolicy:  policy,\n\t}, nil\n}\n\n// ListGroups - lists groups. Since this is not going to be a frequent\n// operation, we fetch this info from storage, and refresh the cache as well.\nfunc (store *IAMStoreSys) ListGroups(ctx context.Context) (res []string, err error) {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\tm := map[string]GroupInfo{}\n\t\terr = store.loadGroups(ctx, m)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tcache.iamGroupsMap = m\n\n\t\tfor k := range cache.iamGroupsMap {\n\t\t\tres = append(res, k)\n\t\t}\n\t}\n\n\tif store.getUsersSysType() == LDAPUsersSysType {\n\t\tm := map[string]MappedPolicy{}\n\t\terr = store.loadMappedPolicies(ctx, stsUser, true, m)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tcache.iamGroupPolicyMap = m\n\t\tfor k := range cache.iamGroupPolicyMap {\n\t\t\tres = append(res, k)\n\t\t}\n\t}\n\n\treturn\n}\n\n// PolicyDBSet - update the policy mapping for the given user or group in\n// storage and in cache.\nfunc (store *IAMStoreSys) PolicyDBSet(ctx context.Context, name, policy string, userType IAMUserType, isGroup bool) error {\n\tif name == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// Validate that user and group exist.\n\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\tif !isGroup {\n\t\t\tif _, ok := cache.iamUsersMap[name]; !ok {\n\t\t\t\treturn errNoSuchUser\n\t\t\t}\n\t\t} else {\n\t\t\tif _, ok := cache.iamGroupsMap[name]; !ok {\n\t\t\t\treturn errNoSuchGroup\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handle policy mapping removal.\n\tif policy == \"\" {\n\t\tif store.getUsersSysType() == LDAPUsersSysType {\n\t\t\t// Add a fallback removal towards previous content that may come back\n\t\t\t// as a ghost user due to lack of delete, this change occurred\n\t\t\t// introduced in PR #11840\n\t\t\tstore.deleteMappedPolicy(ctx, name, regUser, false)\n\t\t}\n\t\terr := store.deleteMappedPolicy(ctx, name, userType, isGroup)\n\t\tif err != nil && err != errNoSuchPolicy {\n\t\t\treturn err\n\t\t}\n\t\tif !isGroup {\n\t\t\tdelete(cache.iamUserPolicyMap, name)\n\t\t} else {\n\t\t\tdelete(cache.iamGroupPolicyMap, name)\n\t\t}\n\t\treturn nil\n\t}\n\n\t// Handle policy mapping set/update\n\tmp := newMappedPolicy(policy)\n\tfor _, p := range mp.toSlice() {\n\t\tif _, found := cache.iamPolicyDocsMap[p]; !found {\n\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"%w: (%s)\", errNoSuchPolicy, p))\n\t\t\treturn errNoSuchPolicy\n\t\t}\n\t}\n\n\tif err := store.saveMappedPolicy(ctx, name, userType, isGroup, mp); err != nil {\n\t\treturn err\n\t}\n\tif !isGroup {\n\t\tcache.iamUserPolicyMap[name] = mp\n\t} else {\n\t\tcache.iamGroupPolicyMap[name] = mp\n\t}\n\treturn nil\n\n}\n\n// PolicyNotificationHandler - loads given policy from storage. If not present,\n// deletes from cache. This notification only reads from storage, and updates\n// cache. When the notification is for a policy deletion, it updates the\n// user-policy and group-policy maps as well.\nfunc (store *IAMStoreSys) PolicyNotificationHandler(ctx context.Context, policy string) error {\n\tif policy == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\terr := store.loadPolicyDoc(ctx, policy, cache.iamPolicyDocsMap)\n\tif err == errNoSuchPolicy {\n\t\t// policy was deleted, update cache.\n\t\tdelete(cache.iamPolicyDocsMap, policy)\n\n\t\t// update user policy map\n\t\tfor u, mp := range cache.iamUserPolicyMap {\n\t\t\tpset := mp.policySet()\n\t\t\tif !pset.Contains(policy) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\t\t\t_, ok := cache.iamUsersMap[u]\n\t\t\t\tif !ok {\n\t\t\t\t\t// happens when account is deleted or\n\t\t\t\t\t// expired.\n\t\t\t\t\tdelete(cache.iamUserPolicyMap, u)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t\tpset.Remove(policy)\n\t\t\tcache.iamUserPolicyMap[u] = newMappedPolicy(strings.Join(pset.ToSlice(), \",\"))\n\t\t}\n\n\t\t// update group policy map\n\t\tfor g, mp := range cache.iamGroupPolicyMap {\n\t\t\tpset := mp.policySet()\n\t\t\tif !pset.Contains(policy) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tpset.Remove(policy)\n\t\t\tcache.iamGroupPolicyMap[g] = newMappedPolicy(strings.Join(pset.ToSlice(), \",\"))\n\t\t}\n\n\t\treturn nil\n\t}\n\treturn err\n}\n\n// DeletePolicy - deletes policy from storage and cache.\nfunc (store *IAMStoreSys) DeletePolicy(ctx context.Context, policy string) error {\n\tif policy == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// Check if policy is mapped to any existing user or group.\n\tusers := []string{}\n\tgroups := []string{}\n\tfor u, mp := range cache.iamUserPolicyMap {\n\t\tpset := mp.policySet()\n\t\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\t\tif _, ok := cache.iamUsersMap[u]; !ok {\n\t\t\t\t// This case can happen when a temporary account is\n\t\t\t\t// deleted or expired - remove it from userPolicyMap.\n\t\t\t\tdelete(cache.iamUserPolicyMap, u)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tif pset.Contains(policy) {\n\t\t\tusers = append(users, u)\n\t\t}\n\t}\n\tfor g, mp := range cache.iamGroupPolicyMap {\n\t\tpset := mp.policySet()\n\t\tif pset.Contains(policy) {\n\t\t\tgroups = append(groups, g)\n\t\t}\n\t}\n\tif len(users) != 0 || len(groups) != 0 {\n\t\t// error out when a policy could not be deleted as it was in use.\n\t\tloggedErr := fmt.Errorf(\"policy could not be deleted as it is use (users=%s; groups=%s)\",\n\t\t\tfmt.Sprintf(\"[%s]\", strings.Join(users, \",\")),\n\t\t\tfmt.Sprintf(\"[%s]\", strings.Join(groups, \",\")),\n\t\t)\n\t\tlogger.LogIf(GlobalContext, loggedErr)\n\t\treturn errPolicyInUse\n\t}\n\n\terr := store.deletePolicyDoc(ctx, policy)\n\tif err == errNoSuchPolicy {\n\t\t// Ignore error if policy is already deleted.\n\t\terr = nil\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdelete(cache.iamPolicyDocsMap, policy)\n\treturn nil\n}\n\n// GetPolicy - gets the policy definition. Allows specifying multiple comma\n// separated policies - returns a combined policy.\nfunc (store *IAMStoreSys) GetPolicy(name string) (iampolicy.Policy, error) {\n\tif name == \"\" {\n\t\treturn iampolicy.Policy{}, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tpolicies := newMappedPolicy(name).toSlice()\n\tvar combinedPolicy iampolicy.Policy\n\tfor _, policy := range policies {\n\t\tif policy == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tv, ok := cache.iamPolicyDocsMap[policy]\n\t\tif !ok {\n\t\t\treturn v.Policy, errNoSuchPolicy\n\t\t}\n\t\tcombinedPolicy = combinedPolicy.Merge(v.Policy)\n\t}\n\treturn combinedPolicy, nil\n}\n\n// GetPolicyDoc - gets the policy doc which has the policy and some metadata.\n// Exactly one policy must be specified here.\nfunc (store *IAMStoreSys) GetPolicyDoc(name string) (r PolicyDoc, err error) {\n\tname = strings.TrimSpace(name)\n\tif name == \"\" {\n\t\treturn r, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tv, ok := cache.iamPolicyDocsMap[name]\n\tif !ok {\n\t\treturn r, errNoSuchPolicy\n\t}\n\treturn v, nil\n}\n\n// SetPolicy - creates a policy with name.\nfunc (store *IAMStoreSys) SetPolicy(ctx context.Context, name string, policy iampolicy.Policy) error {\n\n\tif policy.IsEmpty() || name == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tvar (\n\t\td  PolicyDoc\n\t\tok bool\n\t)\n\tif d, ok = cache.iamPolicyDocsMap[name]; ok {\n\t\td.update(policy)\n\t} else {\n\t\td = newPolicyDoc(policy)\n\t}\n\n\tif err := store.savePolicyDoc(ctx, name, d); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamPolicyDocsMap[name] = d\n\treturn nil\n\n}\n\n// ListPolicies - fetches all policies from storage and updates cache as well.\n// If bucketName is non-empty, returns policies matching the bucket.\nfunc (store *IAMStoreSys) ListPolicies(ctx context.Context, bucketName string) (map[string]iampolicy.Policy, error) {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tm := map[string]PolicyDoc{}\n\terr := store.loadPolicyDocs(ctx, m)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Sets default canned policies\n\tsetDefaultCannedPolicies(m)\n\n\tcache.iamPolicyDocsMap = m\n\n\tret := map[string]iampolicy.Policy{}\n\tfor k, v := range m {\n\t\tif bucketName == \"\" || v.Policy.MatchResource(bucketName) {\n\t\t\tret[k] = v.Policy\n\t\t}\n\t}\n\n\treturn ret, nil\n}\n\n// helper function - does not take locks.\nfunc filterPolicies(cache *iamCache, policyName string, bucketName string) (string, iampolicy.Policy) {\n\tvar policies []string\n\tmp := newMappedPolicy(policyName)\n\tcombinedPolicy := iampolicy.Policy{}\n\tfor _, policy := range mp.toSlice() {\n\t\tif policy == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tp, found := cache.iamPolicyDocsMap[policy]\n\t\tif found {\n\t\t\tif bucketName == \"\" || p.Policy.MatchResource(bucketName) {\n\t\t\t\tpolicies = append(policies, policy)\n\t\t\t\tcombinedPolicy = combinedPolicy.Merge(p.Policy)\n\t\t\t}\n\t\t}\n\t}\n\treturn strings.Join(policies, \",\"), combinedPolicy\n}\n\n// FilterPolicies - accepts a comma separated list of policy names as a string\n// and bucket and returns only policies that currently exist in MinIO. If\n// bucketName is non-empty, additionally filters policies matching the bucket.\n// The first returned value is the list of currently existing policies, and the\n// second is their combined policy definition.\nfunc (store *IAMStoreSys) FilterPolicies(policyName string, bucketName string) (string, iampolicy.Policy) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\treturn filterPolicies(cache, policyName, bucketName)\n\n}\n\n// GetBucketUsers - returns users (not STS or service accounts) that have access\n// to the bucket. User is included even if a group policy that grants access to\n// the bucket is disabled.\nfunc (store *IAMStoreSys) GetBucketUsers(bucket string) (map[string]madmin.UserInfo, error) {\n\tif bucket == \"\" {\n\t\treturn nil, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tresult := map[string]madmin.UserInfo{}\n\tfor k, v := range cache.iamUsersMap {\n\t\tif v.IsTemp() || v.IsServiceAccount() {\n\t\t\tcontinue\n\t\t}\n\t\tvar policies []string\n\t\tmp, ok := cache.iamUserPolicyMap[k]\n\t\tif ok {\n\t\t\tpolicies = append(policies, mp.Policies)\n\t\t\tfor _, group := range cache.iamUserGroupMemberships[k].ToSlice() {\n\t\t\t\tif nmp, ok := cache.iamGroupPolicyMap[group]; ok {\n\t\t\t\t\tpolicies = append(policies, nmp.Policies)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmatchedPolicies, _ := filterPolicies(cache, strings.Join(policies, \",\"), bucket)\n\t\tif len(matchedPolicies) > 0 {\n\t\t\tresult[k] = madmin.UserInfo{\n\t\t\t\tPolicyName: matchedPolicies,\n\t\t\t\tStatus: func() madmin.AccountStatus {\n\t\t\t\t\tif v.IsValid() {\n\t\t\t\t\t\treturn madmin.AccountEnabled\n\t\t\t\t\t}\n\t\t\t\t\treturn madmin.AccountDisabled\n\t\t\t\t}(),\n\t\t\t\tMemberOf: cache.iamUserGroupMemberships[k].ToSlice(),\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result, nil\n}\n\n// GetUsers - returns all users (not STS or service accounts).\nfunc (store *IAMStoreSys) GetUsers() map[string]madmin.UserInfo {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tresult := map[string]madmin.UserInfo{}\n\tfor k, v := range cache.iamUsersMap {\n\t\tif v.IsTemp() || v.IsServiceAccount() {\n\t\t\tcontinue\n\t\t}\n\t\tresult[k] = madmin.UserInfo{\n\t\t\tPolicyName: cache.iamUserPolicyMap[k].Policies,\n\t\t\tStatus: func() madmin.AccountStatus {\n\t\t\t\tif v.IsValid() {\n\t\t\t\t\treturn madmin.AccountEnabled\n\t\t\t\t}\n\t\t\t\treturn madmin.AccountDisabled\n\t\t\t}(),\n\t\t\tMemberOf: cache.iamUserGroupMemberships[k].ToSlice(),\n\t\t}\n\t}\n\n\treturn result\n}\n\n// GetUserInfo - get info on a user.\nfunc (store *IAMStoreSys) GetUserInfo(name string) (u madmin.UserInfo, err error) {\n\tif name == \"\" {\n\t\treturn u, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tif store.getUsersSysType() != MinIOUsersSysType {\n\t\t// If the user has a mapped policy or is a member of a group, we\n\t\t// return that info. Otherwise we return error.\n\t\tvar groups []string\n\t\tfor _, v := range cache.iamUsersMap {\n\t\t\tif v.ParentUser == name {\n\t\t\t\tgroups = v.Groups\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tmappedPolicy, ok := cache.iamUserPolicyMap[name]\n\t\tif !ok {\n\t\t\treturn u, errNoSuchUser\n\t\t}\n\t\treturn madmin.UserInfo{\n\t\t\tPolicyName: mappedPolicy.Policies,\n\t\t\tMemberOf:   groups,\n\t\t}, nil\n\t}\n\n\tcred, found := cache.iamUsersMap[name]\n\tif !found {\n\t\treturn u, errNoSuchUser\n\t}\n\n\tif cred.IsTemp() || cred.IsServiceAccount() {\n\t\treturn u, errIAMActionNotAllowed\n\t}\n\n\treturn madmin.UserInfo{\n\t\tPolicyName: cache.iamUserPolicyMap[name].Policies,\n\t\tStatus: func() madmin.AccountStatus {\n\t\t\tif cred.IsValid() {\n\t\t\t\treturn madmin.AccountEnabled\n\t\t\t}\n\t\t\treturn madmin.AccountDisabled\n\t\t}(),\n\t\tMemberOf: cache.iamUserGroupMemberships[name].ToSlice(),\n\t}, nil\n}\n\n// PolicyMappingNotificationHandler - handles updating a policy mapping from storage.\nfunc (store *IAMStoreSys) PolicyMappingNotificationHandler(ctx context.Context, userOrGroup string, isGroup bool, userType IAMUserType) error {\n\tif userOrGroup == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tm := cache.iamGroupPolicyMap\n\tif !isGroup {\n\t\tm = cache.iamUserPolicyMap\n\t}\n\terr := store.loadMappedPolicy(ctx, userOrGroup, userType, isGroup, m)\n\tif err == errNoSuchPolicy {\n\t\t// This means that the policy mapping was deleted, so we update\n\t\t// the cache.\n\t\tdelete(m, userOrGroup)\n\t\terr = nil\n\t}\n\treturn err\n}\n\n// UserNotificationHandler - handles updating a user/STS account/service account\n// from storage.\nfunc (store *IAMStoreSys) UserNotificationHandler(ctx context.Context, accessKey string, userType IAMUserType) error {\n\tif accessKey == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\terr := store.loadUser(ctx, accessKey, userType, cache.iamUsersMap)\n\tif err == errNoSuchUser {\n\t\t// User was deleted - we update the cache.\n\t\tdelete(cache.iamUsersMap, accessKey)\n\n\t\t// 1. Start with updating user-group memberships\n\t\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\t\tmemberOf := cache.iamUserGroupMemberships[accessKey].ToSlice()\n\t\t\tfor _, group := range memberOf {\n\t\t\t\tremoveErr := removeMembersFromGroup(ctx, store, cache, group, []string{accessKey}, true)\n\t\t\t\tif removeErr == errNoSuchGroup {\n\t\t\t\t\tremoveErr = nil\n\t\t\t\t}\n\t\t\t\tif removeErr != nil {\n\t\t\t\t\treturn removeErr\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 2. Remove any derived credentials from memory\n\t\tif userType == regUser {\n\t\t\tfor _, u := range cache.iamUsersMap {\n\t\t\t\tif u.IsServiceAccount() && u.ParentUser == accessKey {\n\t\t\t\t\tdelete(cache.iamUsersMap, u.AccessKey)\n\t\t\t\t}\n\t\t\t\tif u.IsTemp() && u.ParentUser == accessKey {\n\t\t\t\t\tdelete(cache.iamUsersMap, u.AccessKey)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 3. Delete any mapped policy\n\t\tdelete(cache.iamUserPolicyMap, accessKey)\n\t\treturn nil\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\tif userType != svcUser {\n\t\terr = store.loadMappedPolicy(ctx, accessKey, userType, false, cache.iamUserPolicyMap)\n\t\t// Ignore policy not mapped error\n\t\tif err != nil && err != errNoSuchPolicy {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// We are on purpose not persisting the policy map for parent\n\t// user, although this is a hack, it is a good enough hack\n\t// at this point in time - we need to overhaul our OIDC\n\t// usage with service accounts with a more cleaner implementation\n\t//\n\t// This mapping is necessary to ensure that valid credentials\n\t// have necessary ParentUser present - this is mainly for only\n\t// webIdentity based STS tokens.\n\tcred, ok := cache.iamUsersMap[accessKey]\n\tif ok {\n\t\tif cred.IsTemp() && cred.ParentUser != \"\" && cred.ParentUser != globalActiveCred.AccessKey {\n\t\t\tif _, ok := cache.iamUserPolicyMap[cred.ParentUser]; !ok {\n\t\t\t\tcache.iamUserPolicyMap[cred.ParentUser] = cache.iamUserPolicyMap[accessKey]\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// DeleteUser - deletes a user from storage and cache. This only used with\n// long-term users and service accounts, not STS.\nfunc (store *IAMStoreSys) DeleteUser(ctx context.Context, accessKey string, userType IAMUserType) error {\n\tif accessKey == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// first we remove the user from their groups.\n\tif store.getUsersSysType() == MinIOUsersSysType && userType == regUser {\n\t\tmemberOf := cache.iamUserGroupMemberships[accessKey].ToSlice()\n\t\tfor _, group := range memberOf {\n\t\t\tremoveErr := removeMembersFromGroup(ctx, store, cache, group, []string{accessKey}, false)\n\t\t\tif removeErr != nil {\n\t\t\t\treturn removeErr\n\t\t\t}\n\t\t}\n\t}\n\n\t// Now we can remove the user from memory and IAM store\n\n\t// Delete any STS and service account derived from this credential\n\t// first.\n\tif userType == regUser {\n\t\tfor _, u := range cache.iamUsersMap {\n\t\t\tif u.IsServiceAccount() && u.ParentUser == accessKey {\n\t\t\t\t_ = store.deleteUserIdentity(ctx, u.AccessKey, svcUser)\n\t\t\t\tdelete(cache.iamUsersMap, u.AccessKey)\n\t\t\t}\n\t\t\t// Delete any associated STS users.\n\t\t\tif u.IsTemp() && u.ParentUser == accessKey {\n\t\t\t\t_ = store.deleteUserIdentity(ctx, u.AccessKey, stsUser)\n\t\t\t\tdelete(cache.iamUsersMap, u.AccessKey)\n\t\t\t}\n\t\t}\n\t}\n\n\t// It is ok to ignore deletion error on the mapped policy\n\tstore.deleteMappedPolicy(ctx, accessKey, userType, false)\n\tdelete(cache.iamUserPolicyMap, accessKey)\n\n\terr := store.deleteUserIdentity(ctx, accessKey, userType)\n\tif err == errNoSuchUser {\n\t\t// ignore if user is already deleted.\n\t\terr = nil\n\t}\n\tdelete(cache.iamUsersMap, accessKey)\n\n\treturn err\n}\n\n// SetTempUser - saves temporary (STS) credential to storage and cache. If a\n// policy name is given, it is associated with the parent user specified in the\n// credential.\nfunc (store *IAMStoreSys) SetTempUser(ctx context.Context, accessKey string, cred auth.Credentials, policyName string) error {\n\tif accessKey == \"\" || !cred.IsTemp() || cred.IsExpired() || cred.ParentUser == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tttl := int64(cred.Expiration.Sub(UTCNow()).Seconds())\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tif policyName != \"\" {\n\t\tmp := newMappedPolicy(policyName)\n\t\t_, combinedPolicyStmt := filterPolicies(cache, mp.Policies, \"\")\n\n\t\tif combinedPolicyStmt.IsEmpty() {\n\t\t\treturn fmt.Errorf(\"specified policy %s, not found %w\", policyName, errNoSuchPolicy)\n\t\t}\n\n\t\terr := store.saveMappedPolicy(ctx, cred.ParentUser, stsUser, false, mp, options{ttl: ttl})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tcache.iamUserPolicyMap[cred.ParentUser] = mp\n\t}\n\n\tu := newUserIdentity(cred)\n\terr := store.saveUserIdentity(ctx, accessKey, stsUser, u, options{ttl: ttl})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[accessKey] = cred\n\treturn nil\n}\n\n// DeleteUsers - given a set of users or access keys, deletes them along with\n// any derived credentials (STS or service accounts) and any associated policy\n// mappings.\nfunc (store *IAMStoreSys) DeleteUsers(ctx context.Context, users []string) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tusersToDelete := set.CreateStringSet(users...)\n\tfor user, cred := range cache.iamUsersMap {\n\t\tuserType := regUser\n\t\tif cred.IsServiceAccount() {\n\t\t\tuserType = svcUser\n\t\t} else if cred.IsTemp() {\n\t\t\tuserType = stsUser\n\t\t}\n\n\t\tif usersToDelete.Contains(user) || usersToDelete.Contains(cred.ParentUser) {\n\t\t\t// Delete this user account and its policy mapping\n\t\t\tstore.deleteMappedPolicy(ctx, user, userType, false)\n\t\t\tdelete(cache.iamUserPolicyMap, user)\n\n\t\t\t// we are only logging errors, not handling them.\n\t\t\terr := store.deleteUserIdentity(ctx, user, userType)\n\t\t\tlogger.LogIf(GlobalContext, err)\n\t\t\tdelete(cache.iamUsersMap, user)\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// GetAllParentUsers - returns all distinct \"parent-users\" associated with STS or service\n// credentials.\nfunc (store *IAMStoreSys) GetAllParentUsers() []string {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tres := set.NewStringSet()\n\tfor _, cred := range cache.iamUsersMap {\n\t\tif cred.IsServiceAccount() || cred.IsTemp() {\n\t\t\tres.Add(cred.ParentUser)\n\t\t}\n\t}\n\n\treturn res.ToSlice()\n}\n\n// SetUserStatus - sets current user status.\nfunc (store *IAMStoreSys) SetUserStatus(ctx context.Context, accessKey string, status madmin.AccountStatus) error {\n\tif accessKey != \"\" && status != madmin.AccountEnabled && status != madmin.AccountDisabled {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tcred, ok := cache.iamUsersMap[accessKey]\n\tif !ok {\n\t\treturn errNoSuchUser\n\t}\n\n\tif cred.IsTemp() || cred.IsServiceAccount() {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tuinfo := newUserIdentity(auth.Credentials{\n\t\tAccessKey: accessKey,\n\t\tSecretKey: cred.SecretKey,\n\t\tStatus: func() string {\n\t\t\tif status == madmin.AccountEnabled {\n\t\t\t\treturn auth.AccountOn\n\t\t\t}\n\t\t\treturn auth.AccountOff\n\t\t}(),\n\t})\n\n\tif err := store.saveUserIdentity(ctx, accessKey, regUser, uinfo); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[accessKey] = uinfo.Credentials\n\treturn nil\n}\n\n// AddServiceAccount - add a new service account\nfunc (store *IAMStoreSys) AddServiceAccount(ctx context.Context, cred auth.Credentials) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\taccessKey := cred.AccessKey\n\tparentUser := cred.ParentUser\n\n\t// Found newly requested service account, to be an existing account -\n\t// reject such operation (updates to the service account are handled in\n\t// a different API).\n\tif _, found := cache.iamUsersMap[accessKey]; found {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\t// Parent user must not be a service account.\n\tif cr, found := cache.iamUsersMap[parentUser]; found && cr.IsServiceAccount() {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tu := newUserIdentity(cred)\n\terr := store.saveUserIdentity(ctx, u.Credentials.AccessKey, svcUser, u)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[u.Credentials.AccessKey] = u.Credentials\n\n\treturn nil\n}\n\n// UpdateServiceAccount - updates a service account on storage.\nfunc (store *IAMStoreSys) UpdateServiceAccount(ctx context.Context, accessKey string, opts updateServiceAccountOpts) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tcr, ok := cache.iamUsersMap[accessKey]\n\tif !ok || !cr.IsServiceAccount() {\n\t\treturn errNoSuchServiceAccount\n\t}\n\n\tif opts.secretKey != \"\" {\n\t\tif !auth.IsSecretKeyValid(opts.secretKey) {\n\t\t\treturn auth.ErrInvalidSecretKeyLength\n\t\t}\n\t\tcr.SecretKey = opts.secretKey\n\t}\n\n\tswitch opts.status {\n\t// The caller did not ask to update status account, do nothing\n\tcase \"\":\n\t// Update account status\n\tcase auth.AccountOn, auth.AccountOff:\n\t\tcr.Status = opts.status\n\tdefault:\n\t\treturn errors.New(\"unknown account status value\")\n\t}\n\n\tif opts.sessionPolicy != nil {\n\t\tm, err := getClaimsFromToken(cr.SessionToken)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unable to get svc acc claims: %v\", err)\n\t\t}\n\n\t\terr = opts.sessionPolicy.Validate()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpolicyBuf, err := json.Marshal(opts.sessionPolicy)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif len(policyBuf) > 16*humanize.KiByte {\n\t\t\treturn fmt.Errorf(\"Session policy should not exceed 16 KiB characters\")\n\t\t}\n\n\t\t// Overwrite session policy claims.\n\t\tm[iampolicy.SessionPolicyName] = base64.StdEncoding.EncodeToString(policyBuf)\n\t\tm[iamPolicyClaimNameSA()] = \"embedded-policy\"\n\t\tcr.SessionToken, err = auth.JWTSignWithAccessKey(accessKey, m, globalActiveCred.SecretKey)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tu := newUserIdentity(cr)\n\tif err := store.saveUserIdentity(ctx, u.Credentials.AccessKey, svcUser, u); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[u.Credentials.AccessKey] = u.Credentials\n\n\treturn nil\n}\n\n// ListServiceAccounts - lists only service accounts from the cache.\nfunc (store *IAMStoreSys) ListServiceAccounts(ctx context.Context, accessKey string) ([]auth.Credentials, error) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tvar serviceAccounts []auth.Credentials\n\tfor _, v := range cache.iamUsersMap {\n\t\tif v.IsServiceAccount() && v.ParentUser == accessKey {\n\t\t\t// Hide secret key & session key here\n\t\t\tv.SecretKey = \"\"\n\t\t\tv.SessionToken = \"\"\n\t\t\tserviceAccounts = append(serviceAccounts, v)\n\t\t}\n\t}\n\n\treturn serviceAccounts, nil\n}\n\n// AddUser - adds/updates long term user account to storage.\nfunc (store *IAMStoreSys) AddUser(ctx context.Context, accessKey string, uinfo madmin.UserInfo) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tcr, ok := cache.iamUsersMap[accessKey]\n\n\t// It is not possible to update an STS account.\n\tif ok && cr.IsTemp() {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tu := newUserIdentity(auth.Credentials{\n\t\tAccessKey: accessKey,\n\t\tSecretKey: uinfo.SecretKey,\n\t\tStatus: func() string {\n\t\t\tif uinfo.Status == madmin.AccountEnabled {\n\t\t\t\treturn auth.AccountOn\n\t\t\t}\n\t\t\treturn auth.AccountOff\n\t\t}(),\n\t})\n\n\tif err := store.saveUserIdentity(ctx, accessKey, regUser, u); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[accessKey] = u.Credentials\n\n\t// Set policy if specified.\n\tif uinfo.PolicyName != \"\" {\n\t\tpolicy := uinfo.PolicyName\n\t\t// Handle policy mapping set/update\n\t\tmp := newMappedPolicy(policy)\n\t\tfor _, p := range mp.toSlice() {\n\t\t\tif _, found := cache.iamPolicyDocsMap[policy]; !found {\n\t\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"%w: (%s)\", errNoSuchPolicy, p))\n\t\t\t\treturn errNoSuchPolicy\n\t\t\t}\n\t\t}\n\n\t\tif err := store.saveMappedPolicy(ctx, accessKey, regUser, false, mp); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcache.iamUserPolicyMap[accessKey] = mp\n\t}\n\treturn nil\n\n}\n\n// UpdateUserSecretKey - sets user secret key to storage.\nfunc (store *IAMStoreSys) UpdateUserSecretKey(ctx context.Context, accessKey, secretKey string) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tcred, ok := cache.iamUsersMap[accessKey]\n\tif !ok {\n\t\treturn errNoSuchUser\n\t}\n\n\tcred.SecretKey = secretKey\n\tu := newUserIdentity(cred)\n\tif err := store.saveUserIdentity(ctx, accessKey, regUser, u); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[accessKey] = cred\n\treturn nil\n}\n\n// GetSTSAndServiceAccounts - returns all STS and Service account credentials.\nfunc (store *IAMStoreSys) GetSTSAndServiceAccounts() []auth.Credentials {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tvar res []auth.Credentials\n\tfor _, cred := range cache.iamUsersMap {\n\t\tif cred.IsTemp() || cred.IsServiceAccount() {\n\t\t\tres = append(res, cred)\n\t\t}\n\t}\n\treturn res\n}\n\n// UpdateUserIdentity - updates a user credential.\nfunc (store *IAMStoreSys) UpdateUserIdentity(ctx context.Context, cred auth.Credentials) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tuserType := regUser\n\tif cred.IsServiceAccount() {\n\t\tuserType = svcUser\n\t} else if cred.IsTemp() {\n\t\tuserType = stsUser\n\t}\n\n\t// Overwrite the user identity here. As store should be\n\t// atomic, it shouldn't cause any corruption.\n\tif err := store.saveUserIdentity(ctx, cred.AccessKey, userType, newUserIdentity(cred)); err != nil {\n\t\treturn err\n\t}\n\tcache.iamUsersMap[cred.AccessKey] = cred\n\treturn nil\n}\n\n// LoadUser - attempts to load user info from storage and updates cache.\nfunc (store *IAMStoreSys) LoadUser(ctx context.Context, accessKey string) {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t_, found := cache.iamUsersMap[accessKey]\n\tif !found {\n\t\tstore.loadUser(ctx, accessKey, regUser, cache.iamUsersMap)\n\t\tif _, found = cache.iamUsersMap[accessKey]; found {\n\t\t\t// load mapped policies\n\t\t\tstore.loadMappedPolicy(ctx, accessKey, regUser, false, cache.iamUserPolicyMap)\n\t\t} else {\n\t\t\t// check for service account\n\t\t\tstore.loadUser(ctx, accessKey, svcUser, cache.iamUsersMap)\n\t\t\tif svc, found := cache.iamUsersMap[accessKey]; found {\n\t\t\t\t// Load parent user and mapped policies.\n\t\t\t\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\t\t\t\tstore.loadUser(ctx, svc.ParentUser, regUser, cache.iamUsersMap)\n\t\t\t\t}\n\t\t\t\tstore.loadMappedPolicy(ctx, svc.ParentUser, regUser, false, cache.iamUserPolicyMap)\n\t\t\t} else {\n\t\t\t\t// check for STS account\n\t\t\t\tstore.loadUser(ctx, accessKey, stsUser, cache.iamUsersMap)\n\t\t\t\tif _, found = cache.iamUsersMap[accessKey]; found {\n\t\t\t\t\t// Load mapped policy\n\t\t\t\t\tstore.loadMappedPolicy(ctx, accessKey, stsUser, false, cache.iamUserPolicyMap)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Load any associated policy definitions\n\tfor _, policy := range cache.iamUserPolicyMap[accessKey].toSlice() {\n\t\tif _, found = cache.iamPolicyDocsMap[policy]; !found {\n\t\t\tstore.loadPolicyDoc(ctx, policy, cache.iamPolicyDocsMap)\n\t\t}\n\t}\n}\n", "// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"path\"\n\t\"sort\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\thumanize \"github.com/dustin/go-humanize\"\n\t\"github.com/minio/madmin-go\"\n\t\"github.com/minio/minio-go/v7/pkg/set\"\n\t\"github.com/minio/minio/internal/arn\"\n\t\"github.com/minio/minio/internal/auth\"\n\t\"github.com/minio/minio/internal/color\"\n\t\"github.com/minio/minio/internal/logger\"\n\tiampolicy \"github.com/minio/pkg/iam/policy\"\n\tetcd \"go.etcd.io/etcd/client/v3\"\n)\n\n// UsersSysType - defines the type of users and groups system that is\n// active on the server.\ntype UsersSysType string\n\n// Types of users configured in the server.\nconst (\n\t// This mode uses the internal users system in MinIO.\n\tMinIOUsersSysType UsersSysType = \"MinIOUsersSys\"\n\n\t// This mode uses users and groups from a configured LDAP\n\t// server.\n\tLDAPUsersSysType UsersSysType = \"LDAPUsersSys\"\n)\n\nconst (\n\tstatusEnabled  = \"enabled\"\n\tstatusDisabled = \"disabled\"\n)\n\n// IAMSys - config system.\ntype IAMSys struct {\n\tsync.Mutex\n\n\tiamRefreshInterval time.Duration\n\tnotificationSys    *NotificationSys\n\n\tusersSysType UsersSysType\n\n\trolesMap map[arn.ARN]string\n\n\t// Persistence layer for IAM subsystem\n\tstore *IAMStoreSys\n\n\t// configLoaded will be closed and remain so after first load.\n\tconfigLoaded chan struct{}\n}\n\n// IAMUserType represents a user type inside MinIO server\ntype IAMUserType int\n\nconst (\n\tregUser IAMUserType = iota\n\tstsUser\n\tsvcUser\n)\n\n// LoadGroup - loads a specific group from storage, and updates the\n// memberships cache. If the specified group does not exist in\n// storage, it is removed from in-memory maps as well - this\n// simplifies the implementation for group removal. This is called\n// only via IAM notifications.\nfunc (sys *IAMSys) LoadGroup(ctx context.Context, objAPI ObjectLayer, group string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\treturn sys.store.GroupNotificationHandler(ctx, group)\n}\n\n// LoadPolicy - reloads a specific canned policy from backend disks or etcd.\nfunc (sys *IAMSys) LoadPolicy(ctx context.Context, objAPI ObjectLayer, policyName string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\treturn sys.store.PolicyNotificationHandler(ctx, policyName)\n}\n\n// LoadPolicyMapping - loads the mapped policy for a user or group\n// from storage into server memory.\nfunc (sys *IAMSys) LoadPolicyMapping(ctx context.Context, objAPI ObjectLayer, userOrGroup string, isGroup bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\t// In case of LDAP, policy mappings are only applicable to sts users.\n\tuserType := regUser\n\tif sys.usersSysType == LDAPUsersSysType {\n\t\tuserType = stsUser\n\t}\n\n\treturn sys.store.PolicyMappingNotificationHandler(ctx, userOrGroup, isGroup, userType)\n}\n\n// LoadUser - reloads a specific user from backend disks or etcd.\nfunc (sys *IAMSys) LoadUser(ctx context.Context, objAPI ObjectLayer, accessKey string, userType IAMUserType) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\treturn sys.store.UserNotificationHandler(ctx, accessKey, userType)\n}\n\n// LoadServiceAccount - reloads a specific service account from backend disks or etcd.\nfunc (sys *IAMSys) LoadServiceAccount(ctx context.Context, accessKey string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\treturn sys.store.UserNotificationHandler(ctx, accessKey, svcUser)\n}\n\n// Perform IAM configuration migration.\nfunc (sys *IAMSys) doIAMConfigMigration(ctx context.Context) error {\n\treturn sys.store.migrateBackendFormat(ctx)\n}\n\n// initStore initializes IAM stores\nfunc (sys *IAMSys) initStore(objAPI ObjectLayer, etcdClient *etcd.Client) {\n\tif globalLDAPConfig.Enabled {\n\t\tsys.EnableLDAPSys()\n\t}\n\n\tif etcdClient == nil {\n\t\tif globalIsGateway {\n\t\t\tif globalGatewayName == NASBackendGateway {\n\t\t\t\tsys.store = &IAMStoreSys{newIAMObjectStore(objAPI, sys.usersSysType)}\n\t\t\t} else {\n\t\t\t\tsys.store = &IAMStoreSys{newIAMDummyStore(sys.usersSysType)}\n\t\t\t\tlogger.Info(\"WARNING: %s gateway is running in-memory IAM store, for persistence please configure etcd\",\n\t\t\t\t\tglobalGatewayName)\n\t\t\t}\n\t\t} else {\n\t\t\tsys.store = &IAMStoreSys{newIAMObjectStore(objAPI, sys.usersSysType)}\n\t\t}\n\t} else {\n\t\tsys.store = &IAMStoreSys{newIAMEtcdStore(etcdClient, sys.usersSysType)}\n\t}\n\n}\n\n// Initialized checks if IAM is initialized\nfunc (sys *IAMSys) Initialized() bool {\n\tif sys == nil {\n\t\treturn false\n\t}\n\tsys.Lock()\n\tdefer sys.Unlock()\n\treturn sys.store != nil\n}\n\n// Load - loads all credentials, policies and policy mappings.\nfunc (sys *IAMSys) Load(ctx context.Context) error {\n\terr := sys.store.LoadIAMCache(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tselect {\n\tcase <-sys.configLoaded:\n\tdefault:\n\t\tclose(sys.configLoaded)\n\t}\n\treturn nil\n}\n\n// Init - initializes config system by reading entries from config/iam\nfunc (sys *IAMSys) Init(ctx context.Context, objAPI ObjectLayer, etcdClient *etcd.Client, nSys *NotificationSys, iamRefreshInterval time.Duration) {\n\tsys.Lock()\n\tdefer sys.Unlock()\n\n\tsys.iamRefreshInterval = iamRefreshInterval\n\tsys.notificationSys = nSys\n\n\t// Initialize IAM store\n\tsys.initStore(objAPI, etcdClient)\n\n\tretryCtx, cancel := context.WithCancel(ctx)\n\n\t// Indicate to our routine to exit cleanly upon return.\n\tdefer cancel()\n\n\t// Hold the lock for migration only.\n\ttxnLk := objAPI.NewNSLock(minioMetaBucket, minioConfigPrefix+\"/iam.lock\")\n\n\t// allocate dynamic timeout once before the loop\n\tiamLockTimeout := newDynamicTimeout(5*time.Second, 3*time.Second)\n\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\n\t// Migrate storage format if needed.\n\tfor {\n\t\t// let one of the server acquire the lock, if not let them timeout.\n\t\t// which shall be retried again by this loop.\n\t\tlkctx, err := txnLk.GetLock(retryCtx, iamLockTimeout)\n\t\tif err != nil {\n\t\t\tlogger.Info(\"Waiting for all MinIO IAM sub-system to be initialized.. trying to acquire lock\")\n\t\t\ttime.Sleep(time.Duration(r.Float64() * float64(5*time.Second)))\n\t\t\tcontinue\n\t\t}\n\n\t\tif etcdClient != nil {\n\t\t\t// ****  WARNING ****\n\t\t\t// Migrating to encrypted backend on etcd should happen before initialization of\n\t\t\t// IAM sub-system, make sure that we do not move the above codeblock elsewhere.\n\t\t\tif err := migrateIAMConfigsEtcdToEncrypted(retryCtx, etcdClient); err != nil {\n\t\t\t\ttxnLk.Unlock(lkctx.Cancel)\n\t\t\t\tif errors.Is(err, errEtcdUnreachable) {\n\t\t\t\t\tlogger.Info(\"Connection to etcd timed out. Retrying..\")\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tlogger.LogIf(ctx, fmt.Errorf(\"Unable to decrypt an encrypted ETCD backend for IAM users and policies: %w\", err))\n\t\t\t\tlogger.LogIf(ctx, errors.New(\"IAM sub-system is partially initialized, some users may not be available\"))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\t// These messages only meant primarily for distributed setup, so only log during distributed setup.\n\t\tif globalIsDistErasure {\n\t\t\tlogger.Info(\"Waiting for all MinIO IAM sub-system to be initialized.. lock acquired\")\n\t\t}\n\n\t\t// Migrate IAM configuration, if necessary.\n\t\tif err := sys.doIAMConfigMigration(retryCtx); err != nil {\n\t\t\ttxnLk.Unlock(lkctx.Cancel)\n\t\t\tif configRetriableErrors(err) {\n\t\t\t\tlogger.Info(\"Waiting for all MinIO IAM sub-system to be initialized.. possible cause (%v)\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tlogger.LogIf(ctx, fmt.Errorf(\"Unable to migrate IAM users and policies to new format: %w\", err))\n\t\t\tlogger.LogIf(ctx, errors.New(\"IAM sub-system is partially initialized, some users may not be available\"))\n\t\t\treturn\n\t\t}\n\n\t\t// Successfully migrated, proceed to load the users.\n\t\ttxnLk.Unlock(lkctx.Cancel)\n\t\tbreak\n\t}\n\n\t// Load IAM data from storage.\n\tfor {\n\t\tif err := sys.Load(retryCtx); err != nil {\n\t\t\tif configRetriableErrors(err) {\n\t\t\t\tlogger.Info(\"Waiting for all MinIO IAM sub-system to be initialized.. possible cause (%v)\", err)\n\t\t\t\ttime.Sleep(time.Duration(r.Float64() * float64(5*time.Second)))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tlogger.LogIf(ctx, fmt.Errorf(\"Unable to initialize IAM sub-system, some users may not be available %w\", err))\n\t\t\t}\n\t\t}\n\t\tbreak\n\t}\n\n\t// Set up polling for expired accounts and credentials purging.\n\tswitch {\n\tcase globalOpenIDConfig.ProviderEnabled():\n\t\tgo func() {\n\t\t\tticker := time.NewTicker(sys.iamRefreshInterval)\n\t\t\tdefer ticker.Stop()\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-ticker.C:\n\t\t\t\t\tsys.purgeExpiredCredentialsForExternalSSO(ctx)\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\tcase globalLDAPConfig.Enabled:\n\t\tgo func() {\n\t\t\tticker := time.NewTicker(sys.iamRefreshInterval)\n\t\t\tdefer ticker.Stop()\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-ticker.C:\n\t\t\t\t\tsys.purgeExpiredCredentialsForLDAP(ctx)\n\t\t\t\t\tsys.updateGroupMembershipsForLDAP(ctx)\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Start watching changes to storage.\n\tgo sys.watch(ctx)\n\n\t// Load RoleARN\n\tif roleARN, rolePolicy, enabled := globalOpenIDConfig.GetRoleInfo(); enabled {\n\t\tnumPolicies := len(strings.Split(rolePolicy, \",\"))\n\t\tvalidPolicies, _ := sys.store.FilterPolicies(rolePolicy, \"\")\n\t\tnumValidPolicies := len(strings.Split(validPolicies, \",\"))\n\t\tif numPolicies != numValidPolicies {\n\t\t\tlogger.LogIf(ctx, fmt.Errorf(\"Some specified role policies (%s) were not defined - role based policies will not be enabled.\", rolePolicy))\n\t\t\treturn\n\t\t}\n\t\tsys.rolesMap = map[arn.ARN]string{\n\t\t\troleARN: rolePolicy,\n\t\t}\n\t}\n\n\tsys.printIAMRoles()\n}\n\n// Prints IAM role ARNs.\nfunc (sys *IAMSys) printIAMRoles() {\n\tif len(sys.rolesMap) == 0 {\n\t\treturn\n\t}\n\tvar arns []string\n\tfor arn := range sys.rolesMap {\n\t\tarns = append(arns, arn.String())\n\t}\n\tsort.Strings(arns)\n\tmsgs := make([]string, 0, len(arns))\n\tfor _, arn := range arns {\n\t\tmsgs = append(msgs, color.Bold(arn))\n\t}\n\n\tlogStartupMessage(fmt.Sprintf(\"%s %s\", color.Blue(\"IAM Roles:\"), strings.Join(msgs, \" \")))\n}\n\n// HasWatcher - returns if the IAM system has a watcher to be notified of\n// changes.\nfunc (sys *IAMSys) HasWatcher() bool {\n\treturn sys.store.HasWatcher()\n}\n\nfunc (sys *IAMSys) watch(ctx context.Context) {\n\twatcher, ok := sys.store.IAMStorageAPI.(iamStorageWatcher)\n\tif ok {\n\t\tch := watcher.watch(ctx, iamConfigPrefix)\n\t\tfor event := range ch {\n\t\t\t// we simply log errors\n\t\t\terr := sys.loadWatchedEvent(ctx, event)\n\t\t\tlogger.LogIf(ctx, err)\n\t\t}\n\t\treturn\n\t}\n\n\t// Fall back to loading all items periodically\n\tticker := time.NewTicker(sys.iamRefreshInterval)\n\tdefer ticker.Stop()\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tif err := sys.Load(ctx); err != nil {\n\t\t\t\tlogger.LogIf(ctx, err)\n\t\t\t}\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (sys *IAMSys) loadWatchedEvent(ctx context.Context, event iamWatchEvent) (err error) {\n\tusersPrefix := strings.HasPrefix(event.keyPath, iamConfigUsersPrefix)\n\tgroupsPrefix := strings.HasPrefix(event.keyPath, iamConfigGroupsPrefix)\n\tstsPrefix := strings.HasPrefix(event.keyPath, iamConfigSTSPrefix)\n\tsvcPrefix := strings.HasPrefix(event.keyPath, iamConfigServiceAccountsPrefix)\n\tpolicyPrefix := strings.HasPrefix(event.keyPath, iamConfigPoliciesPrefix)\n\tpolicyDBUsersPrefix := strings.HasPrefix(event.keyPath, iamConfigPolicyDBUsersPrefix)\n\tpolicyDBSTSUsersPrefix := strings.HasPrefix(event.keyPath, iamConfigPolicyDBSTSUsersPrefix)\n\tpolicyDBGroupsPrefix := strings.HasPrefix(event.keyPath, iamConfigPolicyDBGroupsPrefix)\n\n\tctx, cancel := context.WithTimeout(ctx, defaultContextTimeout)\n\tdefer cancel()\n\n\tswitch {\n\tcase usersPrefix:\n\t\taccessKey := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigUsersPrefix))\n\t\terr = sys.store.UserNotificationHandler(ctx, accessKey, regUser)\n\tcase stsPrefix:\n\t\taccessKey := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigSTSPrefix))\n\t\terr = sys.store.UserNotificationHandler(ctx, accessKey, stsUser)\n\tcase svcPrefix:\n\t\taccessKey := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigServiceAccountsPrefix))\n\t\terr = sys.store.UserNotificationHandler(ctx, accessKey, svcUser)\n\tcase groupsPrefix:\n\t\tgroup := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigGroupsPrefix))\n\t\terr = sys.store.GroupNotificationHandler(ctx, group)\n\tcase policyPrefix:\n\t\tpolicyName := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigPoliciesPrefix))\n\t\terr = sys.store.PolicyNotificationHandler(ctx, policyName)\n\tcase policyDBUsersPrefix:\n\t\tpolicyMapFile := strings.TrimPrefix(event.keyPath, iamConfigPolicyDBUsersPrefix)\n\t\tuser := strings.TrimSuffix(policyMapFile, \".json\")\n\t\terr = sys.store.PolicyMappingNotificationHandler(ctx, user, false, regUser)\n\tcase policyDBSTSUsersPrefix:\n\t\tpolicyMapFile := strings.TrimPrefix(event.keyPath, iamConfigPolicyDBSTSUsersPrefix)\n\t\tuser := strings.TrimSuffix(policyMapFile, \".json\")\n\t\terr = sys.store.PolicyMappingNotificationHandler(ctx, user, false, stsUser)\n\tcase policyDBGroupsPrefix:\n\t\tpolicyMapFile := strings.TrimPrefix(event.keyPath, iamConfigPolicyDBGroupsPrefix)\n\t\tuser := strings.TrimSuffix(policyMapFile, \".json\")\n\t\terr = sys.store.PolicyMappingNotificationHandler(ctx, user, true, regUser)\n\t}\n\treturn err\n}\n\n// HasRolePolicy - returns if a role policy is configured for IAM.\nfunc (sys *IAMSys) HasRolePolicy() bool {\n\treturn len(sys.rolesMap) > 0\n}\n\n// GetRolePolicy - returns policies associated with a role ARN.\nfunc (sys *IAMSys) GetRolePolicy(arnStr string) (string, error) {\n\tarn, err := arn.Parse(arnStr)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"RoleARN parse err: %v\", err)\n\t}\n\trolePolicy, ok := sys.rolesMap[arn]\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"RoleARN %s is not defined.\", arnStr)\n\t}\n\treturn rolePolicy, nil\n}\n\n// DeletePolicy - deletes a canned policy from backend or etcd.\nfunc (sys *IAMSys) DeletePolicy(ctx context.Context, policyName string, notifyPeers bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\terr := sys.store.DeletePolicy(ctx, policyName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !notifyPeers || sys.HasWatcher() {\n\t\treturn nil\n\t}\n\n\t// Notify all other MinIO peers to delete policy\n\tfor _, nerr := range sys.notificationSys.DeletePolicy(policyName) {\n\t\tif nerr.Err != nil {\n\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// InfoPolicy - returns the policy definition with some metadata.\nfunc (sys *IAMSys) InfoPolicy(policyName string) (*madmin.PolicyInfo, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\td, err := sys.store.GetPolicyDoc(policyName)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tpdata, err := json.Marshal(d.Policy)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &madmin.PolicyInfo{\n\t\tPolicyName: policyName,\n\t\tPolicy:     pdata,\n\t\tCreateDate: d.CreateDate,\n\t\tUpdateDate: d.UpdateDate,\n\t}, nil\n}\n\n// ListPolicies - lists all canned policies.\nfunc (sys *IAMSys) ListPolicies(ctx context.Context, bucketName string) (map[string]iampolicy.Policy, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.ListPolicies(ctx, bucketName)\n}\n\n// SetPolicy - sets a new named policy.\nfunc (sys *IAMSys) SetPolicy(ctx context.Context, policyName string, p iampolicy.Policy) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\terr := sys.store.SetPolicy(ctx, policyName, p)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !sys.HasWatcher() {\n\t\t// Notify all other MinIO peers to reload policy\n\t\tfor _, nerr := range sys.notificationSys.LoadPolicy(policyName) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\n// DeleteUser - delete user (only for long-term users not STS users).\nfunc (sys *IAMSys) DeleteUser(ctx context.Context, accessKey string, notifyPeers bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif err := sys.store.DeleteUser(ctx, accessKey, regUser); err != nil {\n\t\treturn err\n\t}\n\n\t// Notify all other MinIO peers to delete user.\n\tif notifyPeers && !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.DeleteUser(accessKey) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// CurrentPolicies - returns comma separated policy string, from\n// an input policy after validating if there are any current\n// policies which exist on MinIO corresponding to the input.\nfunc (sys *IAMSys) CurrentPolicies(policyName string) string {\n\tif !sys.Initialized() {\n\t\treturn \"\"\n\t}\n\n\tpolicies, _ := sys.store.FilterPolicies(policyName, \"\")\n\treturn policies\n}\n\nfunc (sys *IAMSys) notifyForUser(ctx context.Context, accessKey string, isTemp bool) {\n\t// Notify all other MinIO peers to reload user.\n\tif !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.LoadUser(accessKey, isTemp) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n}\n\n// SetTempUser - set temporary user credentials, these credentials have an\n// expiry. The permissions for these STS credentials is determined in one of the\n// following ways:\n//\n// - RoleARN - if a role-arn is specified in the request, the STS credential's\n// policy is the role's policy.\n//\n// - inherited from parent - this is the case for AssumeRole API, where the\n// parent user is an actual real user with their own (permanent) credentials and\n// policy association.\n//\n// - inherited from \"virtual\" parent - this is the case for AssumeRoleWithLDAP\n// where the parent user is the DN of the actual LDAP user. The parent user\n// itself cannot login, but the policy associated with them determines the base\n// policy for the STS credential. The policy mapping can be updated by the\n// administrator.\n//\n// - from `Subject.CommonName` field from the STS request for\n// AssumeRoleWithCertificate. In this case, the policy for the STS credential\n// has the same name as the value of this field.\n//\n// - from special JWT claim from STS request for AssumeRoleWithOIDC API (when\n// not using RoleARN). The claim value can be a string or a list and refers to\n// the names of access policies.\n//\n// For all except the RoleARN case, the implementation is the same - the policy\n// for the STS credential is associated with a parent user. For the\n// AssumeRoleWithCertificate case, the \"virtual\" parent user is the value of the\n// `Subject.CommonName` field. For the OIDC (without RoleARN) case the \"virtual\"\n// parent is derived as a concatenation of the `sub` and `iss` fields. The\n// policies applicable to the STS credential are associated with this \"virtual\"\n// parent.\n//\n// When a policyName is given to this function, the policy association is\n// created and stored in the IAM store. Thus, it should NOT be given for the\n// role-arn case (because the role-to-policy mapping is separately stored\n// elsewhere), the AssumeRole case (because the parent user is real and their\n// policy is associated via policy-set API) and the AssumeRoleWithLDAP case\n// (because the policy association is made via policy-set API).\nfunc (sys *IAMSys) SetTempUser(ctx context.Context, accessKey string, cred auth.Credentials, policyName string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif globalPolicyOPA != nil {\n\t\t// If OPA is set, we do not need to set a policy mapping.\n\t\tpolicyName = \"\"\n\t}\n\n\terr := sys.store.SetTempUser(ctx, accessKey, cred, policyName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForUser(ctx, cred.AccessKey, true)\n\treturn nil\n}\n\n// ListBucketUsers - list all users who can access this 'bucket'\nfunc (sys *IAMSys) ListBucketUsers(bucket string) (map[string]madmin.UserInfo, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.GetBucketUsers(bucket)\n}\n\n// ListUsers - list all users.\nfunc (sys *IAMSys) ListUsers() (map[string]madmin.UserInfo, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.GetUsers(), nil\n}\n\n// IsTempUser - returns if given key is a temporary user.\nfunc (sys *IAMSys) IsTempUser(name string) (bool, string, error) {\n\tif !sys.Initialized() {\n\t\treturn false, \"\", errServerNotInitialized\n\t}\n\n\tcred, found := sys.store.GetUser(name)\n\tif !found {\n\t\treturn false, \"\", errNoSuchUser\n\t}\n\n\tif cred.IsTemp() {\n\t\treturn true, cred.ParentUser, nil\n\t}\n\n\treturn false, \"\", nil\n}\n\n// IsServiceAccount - returns if given key is a service account\nfunc (sys *IAMSys) IsServiceAccount(name string) (bool, string, error) {\n\tif !sys.Initialized() {\n\t\treturn false, \"\", errServerNotInitialized\n\t}\n\n\tcred, found := sys.store.GetUser(name)\n\tif !found {\n\t\treturn false, \"\", errNoSuchUser\n\t}\n\n\tif cred.IsServiceAccount() {\n\t\treturn true, cred.ParentUser, nil\n\t}\n\n\treturn false, \"\", nil\n}\n\n// GetUserInfo - get info on a user.\nfunc (sys *IAMSys) GetUserInfo(ctx context.Context, name string) (u madmin.UserInfo, err error) {\n\tif !sys.Initialized() {\n\t\treturn u, errServerNotInitialized\n\t}\n\n\tselect {\n\tcase <-sys.configLoaded:\n\tdefault:\n\t\tsys.store.LoadUser(ctx, name)\n\t}\n\n\treturn sys.store.GetUserInfo(name)\n}\n\n// SetUserStatus - sets current user status, supports disabled or enabled.\nfunc (sys *IAMSys) SetUserStatus(ctx context.Context, accessKey string, status madmin.AccountStatus) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\terr := sys.store.SetUserStatus(ctx, accessKey, status)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForUser(ctx, accessKey, false)\n\treturn nil\n}\n\nfunc (sys *IAMSys) notifyForServiceAccount(ctx context.Context, accessKey string) {\n\t// Notify all other Minio peers to reload the service account\n\tif !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.LoadServiceAccount(accessKey) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n}\n\ntype newServiceAccountOpts struct {\n\tsessionPolicy *iampolicy.Policy\n\taccessKey     string\n\tsecretKey     string\n\n\tclaims map[string]interface{}\n}\n\n// NewServiceAccount - create a new service account\nfunc (sys *IAMSys) NewServiceAccount(ctx context.Context, parentUser string, groups []string, opts newServiceAccountOpts) (auth.Credentials, error) {\n\tif !sys.Initialized() {\n\t\treturn auth.Credentials{}, errServerNotInitialized\n\t}\n\n\tif parentUser == \"\" {\n\t\treturn auth.Credentials{}, errInvalidArgument\n\t}\n\n\tvar policyBuf []byte\n\tif opts.sessionPolicy != nil {\n\t\terr := opts.sessionPolicy.Validate()\n\t\tif err != nil {\n\t\t\treturn auth.Credentials{}, err\n\t\t}\n\t\tpolicyBuf, err = json.Marshal(opts.sessionPolicy)\n\t\tif err != nil {\n\t\t\treturn auth.Credentials{}, err\n\t\t}\n\t\tif len(policyBuf) > 16*humanize.KiByte {\n\t\t\treturn auth.Credentials{}, fmt.Errorf(\"Session policy should not exceed 16 KiB characters\")\n\t\t}\n\t}\n\n\t// found newly requested service account, to be same as\n\t// parentUser, reject such operations.\n\tif parentUser == opts.accessKey {\n\t\treturn auth.Credentials{}, errIAMActionNotAllowed\n\t}\n\n\tm := make(map[string]interface{})\n\tm[parentClaim] = parentUser\n\n\tif len(policyBuf) > 0 {\n\t\tm[iampolicy.SessionPolicyName] = base64.StdEncoding.EncodeToString(policyBuf)\n\t\tm[iamPolicyClaimNameSA()] = \"embedded-policy\"\n\t} else {\n\t\tm[iamPolicyClaimNameSA()] = \"inherited-policy\"\n\t}\n\n\t// Add all the necessary claims for the service accounts.\n\tfor k, v := range opts.claims {\n\t\t_, ok := m[k]\n\t\tif !ok {\n\t\t\tm[k] = v\n\t\t}\n\t}\n\n\tvar (\n\t\tcred auth.Credentials\n\t)\n\n\tvar err error\n\tif len(opts.accessKey) > 0 {\n\t\tcred, err = auth.CreateNewCredentialsWithMetadata(opts.accessKey, opts.secretKey, m, globalActiveCred.SecretKey)\n\t} else {\n\t\tcred, err = auth.GetNewCredentialsWithMetadata(m, globalActiveCred.SecretKey)\n\t}\n\tif err != nil {\n\t\treturn auth.Credentials{}, err\n\t}\n\tcred.ParentUser = parentUser\n\tcred.Groups = groups\n\tcred.Status = string(auth.AccountOn)\n\n\terr = sys.store.AddServiceAccount(ctx, cred)\n\tif err != nil {\n\t\treturn auth.Credentials{}, err\n\t}\n\n\tsys.notifyForServiceAccount(ctx, cred.AccessKey)\n\treturn cred, nil\n}\n\ntype updateServiceAccountOpts struct {\n\tsessionPolicy *iampolicy.Policy\n\tsecretKey     string\n\tstatus        string\n}\n\n// UpdateServiceAccount - edit a service account\nfunc (sys *IAMSys) UpdateServiceAccount(ctx context.Context, accessKey string, opts updateServiceAccountOpts) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\terr := sys.store.UpdateServiceAccount(ctx, accessKey, opts)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForServiceAccount(ctx, accessKey)\n\treturn nil\n}\n\n// ListServiceAccounts - lists all services accounts associated to a specific user\nfunc (sys *IAMSys) ListServiceAccounts(ctx context.Context, accessKey string) ([]auth.Credentials, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.ListServiceAccounts(ctx, accessKey)\n}\n\n// GetServiceAccount - wrapper method to get information about a service account\nfunc (sys *IAMSys) GetServiceAccount(ctx context.Context, accessKey string) (auth.Credentials, *iampolicy.Policy, error) {\n\tsa, embeddedPolicy, err := sys.getServiceAccount(ctx, accessKey)\n\tif err != nil {\n\t\treturn sa, embeddedPolicy, err\n\t}\n\t// Hide secret & session keys\n\tsa.SecretKey = \"\"\n\tsa.SessionToken = \"\"\n\treturn sa, embeddedPolicy, nil\n}\n\n// getServiceAccount - gets information about a service account\nfunc (sys *IAMSys) getServiceAccount(ctx context.Context, accessKey string) (auth.Credentials, *iampolicy.Policy, error) {\n\tif !sys.Initialized() {\n\t\treturn auth.Credentials{}, nil, errServerNotInitialized\n\t}\n\n\tsa, ok := sys.store.GetUser(accessKey)\n\tif !ok || !sa.IsServiceAccount() {\n\t\treturn auth.Credentials{}, nil, errNoSuchServiceAccount\n\t}\n\n\tvar embeddedPolicy *iampolicy.Policy\n\n\tjwtClaims, err := auth.ExtractClaims(sa.SessionToken, globalActiveCred.SecretKey)\n\tif err == nil {\n\t\tpt, ptok := jwtClaims.Lookup(iamPolicyClaimNameSA())\n\t\tsp, spok := jwtClaims.Lookup(iampolicy.SessionPolicyName)\n\t\tif ptok && spok && pt == \"embedded-policy\" {\n\t\t\tpolicyBytes, err := base64.StdEncoding.DecodeString(sp)\n\t\t\tif err == nil {\n\t\t\t\tp, err := iampolicy.ParseConfig(bytes.NewReader(policyBytes))\n\t\t\t\tif err == nil {\n\t\t\t\t\tpolicy := iampolicy.Policy{}.Merge(*p)\n\t\t\t\t\tembeddedPolicy = &policy\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn sa, embeddedPolicy, nil\n}\n\n// GetClaimsForSvcAcc - gets the claims associated with the service account.\nfunc (sys *IAMSys) GetClaimsForSvcAcc(ctx context.Context, accessKey string) (map[string]interface{}, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != LDAPUsersSysType {\n\t\treturn nil, nil\n\t}\n\n\tsa, ok := sys.store.GetUser(accessKey)\n\tif !ok || !sa.IsServiceAccount() {\n\t\treturn nil, errNoSuchServiceAccount\n\t}\n\n\tjwtClaims, err := auth.ExtractClaims(sa.SessionToken, globalActiveCred.SecretKey)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn jwtClaims.Map(), nil\n}\n\n// DeleteServiceAccount - delete a service account\nfunc (sys *IAMSys) DeleteServiceAccount(ctx context.Context, accessKey string, notifyPeers bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tsa, ok := sys.store.GetUser(accessKey)\n\tif !ok || !sa.IsServiceAccount() {\n\t\treturn nil\n\t}\n\n\tif err := sys.store.DeleteUser(ctx, accessKey, svcUser); err != nil {\n\t\treturn err\n\t}\n\n\tif notifyPeers && !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.DeleteServiceAccount(accessKey) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// CreateUser - create new user credentials and policy, if user already exists\n// they shall be rewritten with new inputs.\nfunc (sys *IAMSys) CreateUser(ctx context.Context, accessKey string, uinfo madmin.UserInfo) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tif !auth.IsAccessKeyValid(accessKey) {\n\t\treturn auth.ErrInvalidAccessKeyLength\n\t}\n\n\tif !auth.IsSecretKeyValid(uinfo.SecretKey) {\n\t\treturn auth.ErrInvalidSecretKeyLength\n\t}\n\n\terr := sys.store.AddUser(ctx, accessKey, uinfo)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForUser(ctx, accessKey, false)\n\treturn nil\n}\n\n// SetUserSecretKey - sets user secret key\nfunc (sys *IAMSys) SetUserSecretKey(ctx context.Context, accessKey string, secretKey string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tif !auth.IsAccessKeyValid(accessKey) {\n\t\treturn auth.ErrInvalidAccessKeyLength\n\t}\n\n\tif !auth.IsSecretKeyValid(secretKey) {\n\t\treturn auth.ErrInvalidSecretKeyLength\n\t}\n\n\treturn sys.store.UpdateUserSecretKey(ctx, accessKey, secretKey)\n}\n\n// purgeExpiredCredentialsForExternalSSO - validates if local credentials are still valid\n// by checking remote IDP if the relevant users are still active and present.\nfunc (sys *IAMSys) purgeExpiredCredentialsForExternalSSO(ctx context.Context) {\n\tparentUsers := sys.store.GetAllParentUsers()\n\tvar expiredUsers []string\n\tfor _, parentUser := range parentUsers {\n\t\tuserid, err := parseOpenIDParentUser(parentUser)\n\t\tif err == errSkipFile {\n\t\t\tcontinue\n\t\t}\n\t\tu, err := globalOpenIDConfig.LookupUser(userid)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(GlobalContext, err)\n\t\t\tcontinue\n\t\t}\n\t\t// If user is set to \"disabled\", we will remove them\n\t\t// subsequently.\n\t\tif !u.Enabled {\n\t\t\texpiredUsers = append(expiredUsers, parentUser)\n\t\t}\n\t}\n\n\t// We ignore any errors\n\t_ = sys.store.DeleteUsers(ctx, expiredUsers)\n}\n\n// purgeExpiredCredentialsForLDAP - validates if local credentials are still\n// valid by checking LDAP server if the relevant users are still present.\nfunc (sys *IAMSys) purgeExpiredCredentialsForLDAP(ctx context.Context) {\n\tparentUsers := sys.store.GetAllParentUsers()\n\tvar allDistNames []string\n\tfor _, parentUser := range parentUsers {\n\t\tif !globalLDAPConfig.IsLDAPUserDN(parentUser) {\n\t\t\tcontinue\n\t\t}\n\n\t\tallDistNames = append(allDistNames, parentUser)\n\t}\n\n\texpiredUsers, err := globalLDAPConfig.GetNonEligibleUserDistNames(allDistNames)\n\tif err != nil {\n\t\t// Log and return on error - perhaps it'll work the next time.\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn\n\t}\n\n\t// We ignore any errors\n\t_ = sys.store.DeleteUsers(ctx, expiredUsers)\n}\n\n// updateGroupMembershipsForLDAP - updates the list of groups associated with the credential.\nfunc (sys *IAMSys) updateGroupMembershipsForLDAP(ctx context.Context) {\n\t// 1. Collect all LDAP users with active creds.\n\tallCreds := sys.store.GetSTSAndServiceAccounts()\n\t// List of unique LDAP (parent) user DNs that have active creds\n\tvar parentUsers []string\n\t// Map of LDAP user to list of active credential objects\n\tparentUserToCredsMap := make(map[string][]auth.Credentials)\n\t// DN to ldap username mapping for each LDAP user\n\tparentUserToLDAPUsernameMap := make(map[string]string)\n\tfor _, cred := range allCreds {\n\t\tif !globalLDAPConfig.IsLDAPUserDN(cred.ParentUser) {\n\t\t\tcontinue\n\t\t}\n\t\t// Check if this is the first time we are\n\t\t// encountering this LDAP user.\n\t\tif _, ok := parentUserToCredsMap[cred.ParentUser]; !ok {\n\t\t\t// Try to find the ldapUsername for this\n\t\t\t// parentUser by extracting JWT claims\n\t\t\tjwtClaims, err := auth.ExtractClaims(cred.SessionToken, globalActiveCred.SecretKey)\n\t\t\tif err != nil {\n\t\t\t\t// skip this cred - session token seems\n\t\t\t\t// invalid\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tldapUsername, ok := jwtClaims.Lookup(ldapUserN)\n\t\t\tif !ok {\n\t\t\t\t// skip this cred - we dont have the\n\t\t\t\t// username info needed\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Collect each new cred.ParentUser into parentUsers\n\t\t\tparentUsers = append(parentUsers, cred.ParentUser)\n\n\t\t\t// Update the ldapUsernameMap\n\t\t\tparentUserToLDAPUsernameMap[cred.ParentUser] = ldapUsername\n\t\t}\n\t\tparentUserToCredsMap[cred.ParentUser] = append(parentUserToCredsMap[cred.ParentUser], cred)\n\n\t}\n\n\t// 2. Query LDAP server for groups of the LDAP users collected.\n\tupdatedGroups, err := globalLDAPConfig.LookupGroupMemberships(parentUsers, parentUserToLDAPUsernameMap)\n\tif err != nil {\n\t\t// Log and return on error - perhaps it'll work the next time.\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn\n\t}\n\n\t// 3. Update creds for those users whose groups are changed\n\tfor _, parentUser := range parentUsers {\n\t\tcurrGroupsSet := updatedGroups[parentUser]\n\t\tcurrGroups := currGroupsSet.ToSlice()\n\t\tfor _, cred := range parentUserToCredsMap[parentUser] {\n\t\t\tgSet := set.CreateStringSet(cred.Groups...)\n\t\t\tif gSet.Equals(currGroupsSet) {\n\t\t\t\t// No change to groups memberships for this\n\t\t\t\t// credential.\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tcred.Groups = currGroups\n\t\t\tif err := sys.store.UpdateUserIdentity(ctx, cred); err != nil {\n\t\t\t\t// Log and continue error - perhaps it'll work the next time.\n\t\t\t\tlogger.LogIf(GlobalContext, err)\n\t\t\t}\n\t\t}\n\t}\n}\n\n// GetUser - get user credentials\nfunc (sys *IAMSys) GetUser(ctx context.Context, accessKey string) (cred auth.Credentials, ok bool) {\n\tif !sys.Initialized() {\n\t\treturn cred, false\n\t}\n\n\tfallback := false\n\tselect {\n\tcase <-sys.configLoaded:\n\tdefault:\n\t\tsys.store.LoadUser(ctx, accessKey)\n\t\tfallback = true\n\t}\n\n\tcred, ok = sys.store.GetUser(accessKey)\n\tif !ok && !fallback {\n\t\t// accessKey not found, also\n\t\t// IAM store is not in fallback mode\n\t\t// we can try to reload again from\n\t\t// the IAM store and see if credential\n\t\t// exists now. If it doesn't proceed to\n\t\t// fail.\n\t\tsys.store.LoadUser(ctx, accessKey)\n\t\tcred, ok = sys.store.GetUser(accessKey)\n\t}\n\n\treturn cred, ok && cred.IsValid()\n}\n\n// Notify all other MinIO peers to load group.\nfunc (sys *IAMSys) notifyForGroup(ctx context.Context, group string) {\n\tif !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.LoadGroup(group) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n}\n\n// AddUsersToGroup - adds users to a group, creating the group if\n// needed. No error if user(s) already are in the group.\nfunc (sys *IAMSys) AddUsersToGroup(ctx context.Context, group string, members []string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\terr := sys.store.AddUsersToGroup(ctx, group, members)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForGroup(ctx, group)\n\treturn nil\n}\n\n// RemoveUsersFromGroup - remove users from group. If no users are\n// given, and the group is empty, deletes the group as well.\nfunc (sys *IAMSys) RemoveUsersFromGroup(ctx context.Context, group string, members []string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\terr := sys.store.RemoveUsersFromGroup(ctx, group, members)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForGroup(ctx, group)\n\treturn nil\n}\n\n// SetGroupStatus - enable/disabled a group\nfunc (sys *IAMSys) SetGroupStatus(ctx context.Context, group string, enabled bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\terr := sys.store.SetGroupStatus(ctx, group, enabled)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForGroup(ctx, group)\n\treturn nil\n}\n\n// GetGroupDescription - builds up group description\nfunc (sys *IAMSys) GetGroupDescription(group string) (gd madmin.GroupDesc, err error) {\n\tif !sys.Initialized() {\n\t\treturn gd, errServerNotInitialized\n\t}\n\n\treturn sys.store.GetGroupDescription(group)\n}\n\n// ListGroups - lists groups.\nfunc (sys *IAMSys) ListGroups(ctx context.Context) (r []string, err error) {\n\tif !sys.Initialized() {\n\t\treturn r, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.ListGroups(ctx)\n}\n\n// PolicyDBSet - sets a policy for a user or group in the PolicyDB.\nfunc (sys *IAMSys) PolicyDBSet(ctx context.Context, name, policy string, isGroup bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\t// Determine user-type based on IDP mode.\n\tuserType := regUser\n\tif sys.usersSysType == LDAPUsersSysType {\n\t\tuserType = stsUser\n\t}\n\n\terr := sys.store.PolicyDBSet(ctx, name, policy, userType, isGroup)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Notify all other MinIO peers to reload policy\n\tif !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.LoadPolicyMapping(name, isGroup) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// PolicyDBGet - gets policy set on a user or group. If a list of groups is\n// given, policies associated with them are included as well.\nfunc (sys *IAMSys) PolicyDBGet(name string, isGroup bool, groups ...string) ([]string, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\treturn sys.store.PolicyDBGet(name, isGroup, groups...)\n}\n\n// IsAllowedServiceAccount - checks if the given service account is allowed to perform\n// actions. The permission of the parent user is checked first\nfunc (sys *IAMSys) IsAllowedServiceAccount(args iampolicy.Args, parentUser string) bool {\n\t// Now check if we have a subject claim\n\tp, ok := args.Claims[parentClaim]\n\tif ok {\n\t\tparentInClaim, ok := p.(string)\n\t\tif !ok {\n\t\t\t// Reject malformed/malicious requests.\n\t\t\treturn false\n\t\t}\n\t\t// The parent claim in the session token should be equal\n\t\t// to the parent detected in the backend\n\t\tif parentInClaim != parentUser {\n\t\t\treturn false\n\t\t}\n\t} else {\n\t\t// This is needed so a malicious user cannot\n\t\t// use a leaked session key of another user\n\t\t// to widen its privileges.\n\t\treturn false\n\t}\n\n\t// Check policy for parent user of service account.\n\tsvcPolicies, err := sys.PolicyDBGet(parentUser, false, args.Groups...)\n\tif err != nil {\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn false\n\t}\n\n\tif len(svcPolicies) == 0 {\n\t\t// If parent user has no policies, check for OpenID\n\t\t// claims/RoleARN in case it exists.\n\t\troleArn := args.GetRoleArn()\n\t\tif roleArn != \"\" {\n\t\t\tarn, err := arn.Parse(roleArn)\n\t\t\tif err != nil {\n\t\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"error parsing role ARN %s: %v\", roleArn, err))\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tsvcPolicies = newMappedPolicy(sys.rolesMap[arn]).toSlice()\n\t\t} else {\n\t\t\t// If there is no roleArn claim, check the OpenID\n\t\t\t// provider's policy claim.\n\t\t\tpolicySet, _ := iampolicy.GetPoliciesFromClaims(args.Claims, iamPolicyClaimNameOpenID())\n\t\t\tsvcPolicies = policySet.ToSlice()\n\t\t}\n\t\tif len(svcPolicies) == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\n\t// Policies were found, evaluate all of them.\n\tavailablePoliciesStr, combinedPolicy := sys.store.FilterPolicies(strings.Join(svcPolicies, \",\"), \"\")\n\tif availablePoliciesStr == \"\" {\n\t\treturn false\n\t}\n\n\tparentArgs := args\n\tparentArgs.AccountName = parentUser\n\t// These are dynamic values set them appropriately.\n\tparentArgs.ConditionValues[\"username\"] = []string{parentUser}\n\tparentArgs.ConditionValues[\"userid\"] = []string{parentUser}\n\n\tsaPolicyClaim, ok := args.Claims[iamPolicyClaimNameSA()]\n\tif !ok {\n\t\treturn false\n\t}\n\n\tsaPolicyClaimStr, ok := saPolicyClaim.(string)\n\tif !ok {\n\t\t// Sub policy if set, should be a string reject\n\t\t// malformed/malicious requests.\n\t\treturn false\n\t}\n\n\tif saPolicyClaimStr == \"inherited-policy\" {\n\t\treturn combinedPolicy.IsAllowed(parentArgs)\n\t}\n\n\t// Now check if we have a sessionPolicy.\n\tspolicy, ok := args.Claims[iampolicy.SessionPolicyName]\n\tif !ok {\n\t\treturn false\n\t}\n\n\tspolicyStr, ok := spolicy.(string)\n\tif !ok {\n\t\t// Sub policy if set, should be a string reject\n\t\t// malformed/malicious requests.\n\t\treturn false\n\t}\n\n\t// Check if policy is parseable.\n\tsubPolicy, err := iampolicy.ParseConfig(bytes.NewReader([]byte(spolicyStr)))\n\tif err != nil {\n\t\t// Log any error in input session policy config.\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn false\n\t}\n\n\t// This can only happen if policy was set but with an empty JSON.\n\tif subPolicy.Version == \"\" && len(subPolicy.Statements) == 0 {\n\t\treturn combinedPolicy.IsAllowed(parentArgs)\n\t}\n\n\tif subPolicy.Version == \"\" {\n\t\treturn false\n\t}\n\n\treturn combinedPolicy.IsAllowed(parentArgs) && subPolicy.IsAllowed(parentArgs)\n}\n\n// IsAllowedLDAPSTS - checks for LDAP specific claims and values\nfunc (sys *IAMSys) IsAllowedLDAPSTS(args iampolicy.Args, parentUser string) bool {\n\t// parentUser value must match the ldap user in the claim.\n\tif parentInClaimIface, ok := args.Claims[ldapUser]; !ok {\n\t\t// no ldapUser claim present reject it.\n\t\treturn false\n\t} else if parentInClaim, ok := parentInClaimIface.(string); !ok {\n\t\t// not the right type, reject it.\n\t\treturn false\n\t} else if parentInClaim != parentUser {\n\t\t// ldap claim has been modified maliciously reject it.\n\t\treturn false\n\t}\n\n\t// Check policy for this LDAP user.\n\tldapPolicies, err := sys.PolicyDBGet(parentUser, false, args.Groups...)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tif len(ldapPolicies) == 0 {\n\t\treturn false\n\t}\n\n\t// Policies were found, evaluate all of them.\n\tavailablePoliciesStr, combinedPolicy := sys.store.FilterPolicies(strings.Join(ldapPolicies, \",\"), \"\")\n\tif availablePoliciesStr == \"\" {\n\t\treturn false\n\t}\n\n\thasSessionPolicy, isAllowedSP := isAllowedBySessionPolicy(args)\n\tif hasSessionPolicy {\n\t\treturn isAllowedSP && combinedPolicy.IsAllowed(args)\n\t}\n\n\treturn combinedPolicy.IsAllowed(args)\n}\n\n// IsAllowedSTS is meant for STS based temporary credentials,\n// which implements claims validation and verification other than\n// applying policies.\nfunc (sys *IAMSys) IsAllowedSTS(args iampolicy.Args, parentUser string) bool {\n\t// If it is an LDAP request, check that user and group\n\t// policies allow the request.\n\tif sys.usersSysType == LDAPUsersSysType {\n\t\treturn sys.IsAllowedLDAPSTS(args, parentUser)\n\t}\n\n\tvar policies []string\n\troleArn := args.GetRoleArn()\n\tif roleArn != \"\" {\n\t\tarn, err := arn.Parse(roleArn)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"error parsing role ARN %s: %v\", roleArn, err))\n\t\t\treturn false\n\t\t}\n\t\tpolicies = newMappedPolicy(sys.rolesMap[arn]).toSlice()\n\t} else {\n\t\t// Lookup the parent user's mapping if there's no role-ARN.\n\t\tvar err error\n\t\tpolicies, err = sys.store.PolicyDBGet(parentUser, false, args.Groups...)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"error fetching policies on %s: %v\", parentUser, err))\n\t\t\treturn false\n\t\t}\n\t\tif len(policies) == 0 {\n\t\t\t// TODO (deprecated in Dec 2021): Only need to handle\n\t\t\t// behavior for STS credentials created in older\n\t\t\t// releases. Otherwise, reject such cases, once older\n\t\t\t// behavior is deprecated.\n\n\t\t\t// If there is no parent policy mapping, we fall back to\n\t\t\t// using policy claim from JWT.\n\t\t\tpolicySet, ok := args.GetPolicies(iamPolicyClaimNameOpenID())\n\t\t\tif !ok {\n\t\t\t\t// When claims are set, it should have a policy claim field.\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tpolicies = policySet.ToSlice()\n\t\t}\n\t}\n\n\tcombinedPolicy, err := sys.store.GetPolicy(strings.Join(policies, \",\"))\n\tif err == errNoSuchPolicy {\n\t\tfor _, pname := range policies {\n\t\t\t_, err := sys.store.GetPolicy(pname)\n\t\t\tif err == errNoSuchPolicy {\n\t\t\t\t// all policies presented in the claim should exist\n\t\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"expected policy (%s) missing from the JWT claim %s, rejecting the request\", pname, iamPolicyClaimNameOpenID()))\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"all policies were unexpectedly present!\"))\n\t\treturn false\n\t}\n\n\t// These are dynamic values set them appropriately.\n\targs.ConditionValues[\"username\"] = []string{parentUser}\n\targs.ConditionValues[\"userid\"] = []string{parentUser}\n\n\t// Now check if we have a sessionPolicy.\n\thasSessionPolicy, isAllowedSP := isAllowedBySessionPolicy(args)\n\tif hasSessionPolicy {\n\t\treturn isAllowedSP && combinedPolicy.IsAllowed(args)\n\t}\n\n\t// Sub policy not set, this is most common since subPolicy\n\t// is optional, use the inherited policies.\n\treturn combinedPolicy.IsAllowed(args)\n}\n\nfunc isAllowedBySessionPolicy(args iampolicy.Args) (hasSessionPolicy bool, isAllowed bool) {\n\thasSessionPolicy = false\n\tisAllowed = false\n\n\t// Now check if we have a sessionPolicy.\n\tspolicy, ok := args.Claims[iampolicy.SessionPolicyName]\n\tif !ok {\n\t\treturn\n\t}\n\n\thasSessionPolicy = true\n\n\tspolicyStr, ok := spolicy.(string)\n\tif !ok {\n\t\t// Sub policy if set, should be a string reject\n\t\t// malformed/malicious requests.\n\t\treturn\n\t}\n\n\t// Check if policy is parseable.\n\tsubPolicy, err := iampolicy.ParseConfig(bytes.NewReader([]byte(spolicyStr)))\n\tif err != nil {\n\t\t// Log any error in input session policy config.\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn\n\t}\n\n\t// Policy without Version string value reject it.\n\tif subPolicy.Version == \"\" {\n\t\treturn\n\t}\n\n\t// Sub policy is set and valid.\n\treturn hasSessionPolicy, subPolicy.IsAllowed(args)\n}\n\n// GetCombinedPolicy returns a combined policy combining all policies\nfunc (sys *IAMSys) GetCombinedPolicy(policies ...string) iampolicy.Policy {\n\t_, policy := sys.store.FilterPolicies(strings.Join(policies, \",\"), \"\")\n\treturn policy\n}\n\n// IsAllowed - checks given policy args is allowed to continue the Rest API.\nfunc (sys *IAMSys) IsAllowed(args iampolicy.Args) bool {\n\t// If opa is configured, use OPA always.\n\tif globalPolicyOPA != nil {\n\t\tok, err := globalPolicyOPA.IsAllowed(args)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(GlobalContext, err)\n\t\t}\n\t\treturn ok\n\t}\n\n\t// Policies don't apply to the owner.\n\tif args.IsOwner {\n\t\treturn true\n\t}\n\n\t// If the credential is temporary, perform STS related checks.\n\tok, parentUser, err := sys.IsTempUser(args.AccountName)\n\tif err != nil {\n\t\treturn false\n\t}\n\tif ok {\n\t\treturn sys.IsAllowedSTS(args, parentUser)\n\t}\n\n\t// If the credential is for a service account, perform related check\n\tok, parentUser, err = sys.IsServiceAccount(args.AccountName)\n\tif err != nil {\n\t\treturn false\n\t}\n\tif ok {\n\t\treturn sys.IsAllowedServiceAccount(args, parentUser)\n\t}\n\n\t// Continue with the assumption of a regular user\n\tpolicies, err := sys.PolicyDBGet(args.AccountName, false, args.Groups...)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tif len(policies) == 0 {\n\t\t// No policy found.\n\t\treturn false\n\t}\n\n\t// Policies were found, evaluate all of them.\n\treturn sys.GetCombinedPolicy(policies...).IsAllowed(args)\n}\n\n// EnableLDAPSys - enable ldap system users type.\nfunc (sys *IAMSys) EnableLDAPSys() {\n\tsys.usersSysType = LDAPUsersSysType\n}\n\n// NewIAMSys - creates new config system object.\nfunc NewIAMSys() *IAMSys {\n\treturn &IAMSys{\n\t\tusersSysType: MinIOUsersSysType,\n\t\tconfigLoaded: make(chan struct{}),\n\t}\n}\n", "// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"os\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/minio/madmin-go\"\n\t\"github.com/minio/minio/internal/auth\"\n\txhttp \"github.com/minio/minio/internal/http\"\n)\n\nfunc TestCheckValid(t *testing.T) {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tobjLayer, fsDir, err := prepareFS()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer os.RemoveAll(fsDir)\n\tif err = newTestConfig(globalMinioDefaultRegion, objLayer); err != nil {\n\t\tt.Fatalf(\"unable initialize config file, %s\", err)\n\t}\n\n\tnewAllSubsystems()\n\n\tinitConfigSubsystem(ctx, objLayer)\n\n\tglobalIAMSys.Init(ctx, objLayer, globalEtcdClient, globalNotificationSys, 2*time.Second)\n\n\treq, err := newTestRequest(http.MethodGet, \"http://example.com:9000/bucket/object\", 0, nil)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tif err = signRequestV4(req, globalActiveCred.AccessKey, globalActiveCred.SecretKey); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t_, owner, s3Err := checkKeyValid(req, globalActiveCred.AccessKey)\n\tif s3Err != ErrNone {\n\t\tt.Fatalf(\"Unexpected failure with %v\", errorCodes.ToAPIErr(s3Err))\n\t}\n\n\tif !owner {\n\t\tt.Fatalf(\"Expected owner to be 'true', found %t\", owner)\n\t}\n\n\t_, _, s3Err = checkKeyValid(req, \"does-not-exist\")\n\tif s3Err != ErrInvalidAccessKeyID {\n\t\tt.Fatalf(\"Expected error 'ErrInvalidAccessKeyID', found %v\", s3Err)\n\t}\n\n\tucreds, err := auth.CreateCredentials(\"myuser1\", \"mypassword1\")\n\tif err != nil {\n\t\tt.Fatalf(\"unable create credential, %s\", err)\n\t}\n\n\tglobalIAMSys.CreateUser(ctx, ucreds.AccessKey, madmin.UserInfo{\n\t\tSecretKey: ucreds.SecretKey,\n\t\tStatus:    madmin.AccountEnabled,\n\t})\n\n\t_, owner, s3Err = checkKeyValid(req, ucreds.AccessKey)\n\tif s3Err != ErrNone {\n\t\tt.Fatalf(\"Unexpected failure with %v\", errorCodes.ToAPIErr(s3Err))\n\t}\n\n\tif owner {\n\t\tt.Fatalf(\"Expected owner to be 'false', found %t\", owner)\n\t}\n}\n\n// TestSkipContentSha256Cksum - Test validate the logic which decides whether\n// to skip checksum validation based on the request header.\nfunc TestSkipContentSha256Cksum(t *testing.T) {\n\ttestCases := []struct {\n\t\tinputHeaderKey   string\n\t\tinputHeaderValue string\n\n\t\tinputQueryKey   string\n\t\tinputQueryValue string\n\n\t\texpectedResult bool\n\t}{\n\t\t// Test case - 1.\n\t\t// Test case with \"X-Amz-Content-Sha256\" header set, but to empty value but we can't skip.\n\t\t{\"X-Amz-Content-Sha256\", \"\", \"\", \"\", false},\n\n\t\t// Test case - 2.\n\t\t// Test case with \"X-Amz-Content-Sha256\" not set so we can skip.\n\t\t{\"\", \"\", \"\", \"\", true},\n\n\t\t// Test case - 3.\n\t\t// Test case with \"X-Amz-Content-Sha256\" header set to  \"UNSIGNED-PAYLOAD\"\n\t\t// When \"X-Amz-Content-Sha256\" header is set to  \"UNSIGNED-PAYLOAD\", validation of content sha256 has to be skipped.\n\t\t{\"X-Amz-Content-Sha256\", unsignedPayload, \"X-Amz-Credential\", \"\", true},\n\n\t\t// Test case - 4.\n\t\t// Enabling PreSigned Signature v4, but X-Amz-Content-Sha256 not set has to be skipped.\n\t\t{\"\", \"\", \"X-Amz-Credential\", \"\", true},\n\n\t\t// Test case - 5.\n\t\t// Enabling PreSigned Signature v4, but X-Amz-Content-Sha256 set and its not UNSIGNED-PAYLOAD, we shouldn't skip.\n\t\t{\"X-Amz-Content-Sha256\", \"somevalue\", \"X-Amz-Credential\", \"\", false},\n\n\t\t// Test case - 6.\n\t\t// Test case with \"X-Amz-Content-Sha256\" header set to  \"UNSIGNED-PAYLOAD\" and its not presigned, we should skip.\n\t\t{\"X-Amz-Content-Sha256\", unsignedPayload, \"\", \"\", true},\n\n\t\t// Test case - 7.\n\t\t// \"X-Amz-Content-Sha256\" not set and  PreSigned Signature v4 not enabled, sha256 checksum calculation is not skipped.\n\t\t{\"\", \"\", \"X-Amz-Credential\", \"\", true},\n\n\t\t// Test case - 8.\n\t\t// \"X-Amz-Content-Sha256\" has a proper value cannot skip.\n\t\t{\"X-Amz-Content-Sha256\", \"somevalue\", \"\", \"\", false},\n\t}\n\n\tfor i, testCase := range testCases {\n\t\t// creating an input HTTP request.\n\t\t// Only the headers are relevant for this particular test.\n\t\tinputReq, err := http.NewRequest(http.MethodGet, \"http://example.com\", nil)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Error initializing input HTTP request: %v\", err)\n\t\t}\n\t\tif testCase.inputQueryKey != \"\" {\n\t\t\tq := inputReq.URL.Query()\n\t\t\tq.Add(testCase.inputQueryKey, testCase.inputQueryValue)\n\t\t\tif testCase.inputHeaderKey != \"\" {\n\t\t\t\tq.Add(testCase.inputHeaderKey, testCase.inputHeaderValue)\n\t\t\t}\n\t\t\tinputReq.URL.RawQuery = q.Encode()\n\t\t} else {\n\t\t\tif testCase.inputHeaderKey != \"\" {\n\t\t\t\tinputReq.Header.Set(testCase.inputHeaderKey, testCase.inputHeaderValue)\n\t\t\t}\n\t\t}\n\t\tinputReq.ParseForm()\n\n\t\tactualResult := skipContentSha256Cksum(inputReq)\n\t\tif testCase.expectedResult != actualResult {\n\t\t\tt.Errorf(\"Test %d: Expected the result to `%v`, but instead got `%v`\", i+1, testCase.expectedResult, actualResult)\n\t\t}\n\t}\n}\n\n// TestIsValidRegion - Tests validate the comparison logic for asserting whether the region from http request is valid.\nfunc TestIsValidRegion(t *testing.T) {\n\ttestCases := []struct {\n\t\tinputReqRegion  string\n\t\tinputConfRegion string\n\n\t\texpectedResult bool\n\t}{\n\n\t\t{\"\", \"\", true},\n\t\t{globalMinioDefaultRegion, \"\", true},\n\t\t{globalMinioDefaultRegion, \"US\", true},\n\t\t{\"us-west-1\", \"US\", false},\n\t\t{\"us-west-1\", \"us-west-1\", true},\n\t\t// \"US\" was old naming convention for 'us-east-1'.\n\t\t{\"US\", \"US\", true},\n\t}\n\n\tfor i, testCase := range testCases {\n\t\tactualResult := isValidRegion(testCase.inputReqRegion, testCase.inputConfRegion)\n\t\tif testCase.expectedResult != actualResult {\n\t\t\tt.Errorf(\"Test %d: Expected the result to `%v`, but instead got `%v`\", i+1, testCase.expectedResult, actualResult)\n\t\t}\n\t}\n}\n\n// TestExtractSignedHeaders - Tests validate extraction of signed headers using list of signed header keys.\nfunc TestExtractSignedHeaders(t *testing.T) {\n\tsignedHeaders := []string{\"host\", \"x-amz-content-sha256\", \"x-amz-date\", \"transfer-encoding\"}\n\n\t// If the `expect` key exists in the signed headers then golang server would have stripped out the value, expecting the `expect` header set to `100-continue` in the result.\n\tsignedHeaders = append(signedHeaders, \"expect\")\n\t// expected header values.\n\texpectedHost := \"play.min.io:9000\"\n\texpectedContentSha256 := \"1234abcd\"\n\texpectedTime := UTCNow().Format(iso8601Format)\n\texpectedTransferEncoding := \"gzip\"\n\texpectedExpect := \"100-continue\"\n\n\tr, err := http.NewRequest(http.MethodGet, \"http://play.min.io:9000\", nil)\n\tif err != nil {\n\t\tt.Fatal(\"Unable to create http.Request :\", err)\n\t}\n\tr.TransferEncoding = []string{expectedTransferEncoding}\n\n\t// Creating input http header.\n\tinputHeader := r.Header\n\tinputHeader.Set(\"x-amz-content-sha256\", expectedContentSha256)\n\tinputHeader.Set(\"x-amz-date\", expectedTime)\n\t// calling the function being tested.\n\textractedSignedHeaders, errCode := extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrNone {\n\t\tt.Fatalf(\"Expected the APIErrorCode to be %d, but got %d\", ErrNone, errCode)\n\t}\n\n\tinputQuery := r.URL.Query()\n\t// case where some headers need to get from request query\n\tsignedHeaders = append(signedHeaders, \"x-amz-server-side-encryption\")\n\t// expect to fail with `ErrUnsignedHeaders` because couldn't find some header\n\t_, errCode = extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrUnsignedHeaders {\n\t\tt.Fatalf(\"Expected the APIErrorCode to %d, but got %d\", ErrUnsignedHeaders, errCode)\n\t}\n\t// set headers value through Get parameter\n\tinputQuery.Add(\"x-amz-server-side-encryption\", xhttp.AmzEncryptionAES)\n\tr.URL.RawQuery = inputQuery.Encode()\n\tr.ParseForm()\n\t_, errCode = extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrNone {\n\t\tt.Fatalf(\"Expected the APIErrorCode to be %d, but got %d\", ErrNone, errCode)\n\t}\n\n\t// \"x-amz-content-sha256\" header value from the extracted result.\n\textractedContentSha256 := extractedSignedHeaders.Get(\"x-amz-content-sha256\")\n\t// \"host\" header value from the extracted result.\n\textractedHost := extractedSignedHeaders.Get(\"host\")\n\t//  \"x-amz-date\" header from the extracted result.\n\textractedDate := extractedSignedHeaders.Get(\"x-amz-date\")\n\t// extracted `expect` header.\n\textractedExpect := extractedSignedHeaders.Get(\"expect\")\n\n\textractedTransferEncoding := extractedSignedHeaders.Get(\"transfer-encoding\")\n\n\tif expectedHost != extractedHost {\n\t\tt.Errorf(\"host header mismatch: expected `%s`, got `%s`\", expectedHost, extractedHost)\n\t}\n\t// assert the result with the expected value.\n\tif expectedContentSha256 != extractedContentSha256 {\n\t\tt.Errorf(\"x-amz-content-sha256 header mismatch: expected `%s`, got `%s`\", expectedContentSha256, extractedContentSha256)\n\t}\n\tif expectedTime != extractedDate {\n\t\tt.Errorf(\"x-amz-date header mismatch: expected `%s`, got `%s`\", expectedTime, extractedDate)\n\t}\n\tif extractedTransferEncoding != expectedTransferEncoding {\n\t\tt.Errorf(\"transfer-encoding mismatch: expected %s, got %s\", expectedTransferEncoding, extractedTransferEncoding)\n\t}\n\n\t// Since the list of signed headers value contained `expect`, the default value of `100-continue` will be added to extracted signed headers.\n\tif extractedExpect != expectedExpect {\n\t\tt.Errorf(\"expect header incorrect value: expected `%s`, got `%s`\", expectedExpect, extractedExpect)\n\t}\n\n\t// case where the headers don't contain the one of the signed header in the signed headers list.\n\tsignedHeaders = append(signedHeaders, \"X-Amz-Credential\")\n\t// expected to fail with `ErrUnsignedHeaders`.\n\t_, errCode = extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrUnsignedHeaders {\n\t\tt.Fatalf(\"Expected the APIErrorCode to %d, but got %d\", ErrUnsignedHeaders, errCode)\n\t}\n\n\t// case where the list of signed headers doesn't contain the host field.\n\tsignedHeaders = signedHeaders[2:5]\n\t// expected to fail with `ErrUnsignedHeaders`.\n\t_, errCode = extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrUnsignedHeaders {\n\t\tt.Fatalf(\"Expected the APIErrorCode to %d, but got %d\", ErrUnsignedHeaders, errCode)\n\t}\n}\n\n// TestSignV4TrimAll - tests the logic of TrimAll() function\nfunc TestSignV4TrimAll(t *testing.T) {\n\ttestCases := []struct {\n\t\t// Input.\n\t\tinputStr string\n\t\t// Expected result.\n\t\tresult string\n\t}{\n\t\t{\"\u672c\u8a9e\", \"\u672c\u8a9e\"},\n\t\t{\" abc \", \"abc\"},\n\t\t{\" a b \", \"a b\"},\n\t\t{\"a b \", \"a b\"},\n\t\t{\"a  b\", \"a b\"},\n\t\t{\"a   b\", \"a b\"},\n\t\t{\"   a   b  c   \", \"a b c\"},\n\t\t{\"a \\t b  c   \", \"a b c\"},\n\t\t{\"\\\"a \\t b  c   \", \"\\\"a b c\"},\n\t\t{\" \\t\\n\\u000b\\r\\fa \\t\\n\\u000b\\r\\f b \\t\\n\\u000b\\r\\f c \\t\\n\\u000b\\r\\f\", \"a b c\"},\n\t}\n\n\t// Tests generated values from url encoded name.\n\tfor i, testCase := range testCases {\n\t\tresult := signV4TrimAll(testCase.inputStr)\n\t\tif testCase.result != result {\n\t\t\tt.Errorf(\"Test %d: Expected signV4TrimAll result to be \\\"%s\\\", but found it to be \\\"%s\\\" instead\", i+1, testCase.result, result)\n\t\t}\n\t}\n}\n\n// Test getContentSha256Cksum\nfunc TestGetContentSha256Cksum(t *testing.T) {\n\ttestCases := []struct {\n\t\th        string // header SHA256\n\t\tq        string // query SHA256\n\t\texpected string // expected SHA256\n\t}{\n\t\t{\"shastring\", \"\", \"shastring\"},\n\t\t{emptySHA256, \"\", emptySHA256},\n\t\t{\"\", \"\", emptySHA256},\n\t\t{\"\", \"X-Amz-Credential=random\", unsignedPayload},\n\t\t{\"\", \"X-Amz-Credential=random&X-Amz-Content-Sha256=\" + unsignedPayload, unsignedPayload},\n\t\t{\"\", \"X-Amz-Credential=random&X-Amz-Content-Sha256=shastring\", \"shastring\"},\n\t}\n\n\tfor i, testCase := range testCases {\n\t\tr, err := http.NewRequest(http.MethodGet, \"http://localhost/?\"+testCase.q, nil)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tif testCase.h != \"\" {\n\t\t\tr.Header.Set(\"x-amz-content-sha256\", testCase.h)\n\t\t}\n\t\tr.ParseForm()\n\t\tgot := getContentSha256Cksum(r, serviceS3)\n\t\tif got != testCase.expected {\n\t\t\tt.Errorf(\"Test %d: got:%s expected:%s\", i+1, got, testCase.expected)\n\t\t}\n\t}\n}\n", "module github.com/minio/minio\n\ngo 1.17\n\nrequire (\n\tcloud.google.com/go/storage v1.10.0\n\tgithub.com/Azure/azure-pipeline-go v0.2.2\n\tgithub.com/Azure/azure-storage-blob-go v0.10.0\n\tgithub.com/Shopify/sarama v1.27.2\n\tgithub.com/VividCortex/ewma v1.1.1\n\tgithub.com/alecthomas/participle v0.2.1\n\tgithub.com/bcicen/jstream v1.0.1\n\tgithub.com/beevik/ntp v0.3.0\n\tgithub.com/bits-and-blooms/bloom/v3 v3.0.1\n\tgithub.com/buger/jsonparser v1.1.1\n\tgithub.com/cespare/xxhash/v2 v2.1.2\n\tgithub.com/cheggaaa/pb v1.0.29\n\tgithub.com/colinmarc/hdfs/v2 v2.2.0\n\tgithub.com/coredns/coredns v1.4.0\n\tgithub.com/coreos/go-oidc v2.1.0+incompatible\n\tgithub.com/cosnicolaou/pbzip2 v1.0.1\n\tgithub.com/dchest/siphash v1.2.1\n\tgithub.com/djherbis/atime v1.0.0\n\tgithub.com/dswarbrick/smart v0.0.0-20190505152634-909a45200d6d\n\tgithub.com/dustin/go-humanize v1.0.0\n\tgithub.com/eclipse/paho.mqtt.golang v1.3.0\n\tgithub.com/elastic/go-elasticsearch/v7 v7.12.0\n\tgithub.com/fatih/color v1.13.0\n\tgithub.com/go-ldap/ldap/v3 v3.2.4\n\tgithub.com/go-openapi/loads v0.20.2\n\tgithub.com/go-sql-driver/mysql v1.5.0\n\tgithub.com/golang-jwt/jwt/v4 v4.1.0\n\tgithub.com/gomodule/redigo v2.0.0+incompatible\n\tgithub.com/google/uuid v1.3.0\n\tgithub.com/gorilla/mux v1.8.0\n\tgithub.com/hashicorp/golang-lru v0.5.4\n\tgithub.com/inconshreveable/mousetrap v1.0.0\n\tgithub.com/jcmturner/gokrb5/v8 v8.4.2\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/klauspost/compress v1.13.6\n\tgithub.com/klauspost/cpuid/v2 v2.0.9\n\tgithub.com/klauspost/pgzip v1.2.5\n\tgithub.com/klauspost/readahead v1.3.1\n\tgithub.com/klauspost/reedsolomon v1.9.15\n\tgithub.com/lib/pq v1.9.0\n\tgithub.com/miekg/dns v1.1.43\n\tgithub.com/minio/cli v1.22.0\n\tgithub.com/minio/console v0.12.9\n\tgithub.com/minio/csvparser v1.0.0\n\tgithub.com/minio/highwayhash v1.0.2\n\tgithub.com/minio/kes v0.14.0\n\tgithub.com/minio/madmin-go v1.1.18\n\tgithub.com/minio/minio-go/v7 v7.0.17\n\tgithub.com/minio/parquet-go v1.1.0\n\tgithub.com/minio/pkg v1.1.9\n\tgithub.com/minio/selfupdate v0.4.0\n\tgithub.com/minio/sha256-simd v1.0.0\n\tgithub.com/minio/simdjson-go v0.2.1\n\tgithub.com/minio/sio v0.3.0\n\tgithub.com/minio/zipindex v0.2.1\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/montanaflynn/stats v0.6.6\n\tgithub.com/nats-io/nats-server/v2 v2.3.2\n\tgithub.com/nats-io/nats.go v1.11.1-0.20210623165838-4b75fc59ae30\n\tgithub.com/nats-io/stan.go v0.8.3\n\tgithub.com/ncw/directio v1.0.5\n\tgithub.com/nsqio/go-nsq v1.0.8\n\tgithub.com/philhofer/fwd v1.1.2-0.20210722190033-5c56ac6d0bb9\n\tgithub.com/pierrec/lz4 v2.6.0+incompatible\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/prometheus/client_golang v1.11.0\n\tgithub.com/prometheus/client_model v0.2.0\n\tgithub.com/prometheus/procfs v0.7.3\n\tgithub.com/rs/cors v1.7.0\n\tgithub.com/rs/dnscache v0.0.0-20210201191234-295bba877686\n\tgithub.com/secure-io/sio-go v0.3.1\n\tgithub.com/shirou/gopsutil/v3 v3.21.9\n\tgithub.com/streadway/amqp v1.0.0\n\tgithub.com/tinylib/msgp v1.1.7-0.20211026165309-e818a1881b0e\n\tgithub.com/valyala/bytebufferpool v1.0.0\n\tgithub.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c\n\tgithub.com/yargevad/filepathx v1.0.0\n\tgithub.com/zeebo/xxh3 v1.0.0\n\tgo.etcd.io/etcd/api/v3 v3.5.0\n\tgo.etcd.io/etcd/client/v3 v3.5.0\n\tgo.uber.org/atomic v1.9.0\n\tgo.uber.org/zap v1.19.1\n\tgolang.org/x/crypto v0.0.0-20211209193657-4570a0811e8b\n\tgolang.org/x/oauth2 v0.0.0-20210819190943-2bc19b11175f\n\tgolang.org/x/sys v0.0.0-20211020174200-9d6173849985\n\tgolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac\n\tgoogle.golang.org/api v0.58.0\n\tgopkg.in/yaml.v2 v2.4.0\n)\n\nrequire (\n\tcloud.google.com/go v0.94.1 // indirect\n\tgithub.com/Azure/go-ntlmssp v0.0.0-20200615164410-66371956d46c // indirect\n\tgithub.com/PuerkitoBio/purell v1.1.1 // indirect\n\tgithub.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 // indirect\n\tgithub.com/StackExchange/wmi v1.2.1 // indirect\n\tgithub.com/apache/thrift v0.15.0 // indirect\n\tgithub.com/asaskevich/govalidator v0.0.0-20200907205600-7a23bdc65eef // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/bits-and-blooms/bitset v1.2.0 // indirect\n\tgithub.com/briandowns/spinner v1.16.0 // indirect\n\tgithub.com/coreos/go-semver v0.3.0 // indirect\n\tgithub.com/coreos/go-systemd/v22 v22.3.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.0.0 // indirect\n\tgithub.com/docker/go-units v0.4.0 // indirect\n\tgithub.com/eapache/go-resiliency v1.2.0 // indirect\n\tgithub.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21 // indirect\n\tgithub.com/eapache/queue v1.1.0 // indirect\n\tgithub.com/emicklei/go-restful v2.9.5+incompatible // indirect\n\tgithub.com/fatih/structs v1.1.0 // indirect\n\tgithub.com/georgysavva/scany v0.2.7 // indirect\n\tgithub.com/go-asn1-ber/asn1-ber v1.5.1 // indirect\n\tgithub.com/go-logr/logr v0.4.0 // indirect\n\tgithub.com/go-ole/go-ole v1.2.6 // indirect\n\tgithub.com/go-openapi/analysis v0.20.0 // indirect\n\tgithub.com/go-openapi/errors v0.19.9 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.19.5 // indirect\n\tgithub.com/go-openapi/jsonreference v0.19.5 // indirect\n\tgithub.com/go-openapi/runtime v0.19.24 // indirect\n\tgithub.com/go-openapi/spec v0.20.3 // indirect\n\tgithub.com/go-openapi/strfmt v0.20.0 // indirect\n\tgithub.com/go-openapi/swag v0.19.14 // indirect\n\tgithub.com/go-openapi/validate v0.20.2 // indirect\n\tgithub.com/go-stack/stack v1.8.0 // indirect\n\tgithub.com/goccy/go-json v0.7.9 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang-jwt/jwt v3.2.2+incompatible // indirect\n\tgithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b // indirect\n\tgithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e // indirect\n\tgithub.com/golang/protobuf v1.5.2 // indirect\n\tgithub.com/golang/snappy v0.0.3 // indirect\n\tgithub.com/google/go-cmp v0.5.6 // indirect\n\tgithub.com/google/gofuzz v1.1.0 // indirect\n\tgithub.com/googleapis/gax-go/v2 v2.1.1 // indirect\n\tgithub.com/googleapis/gnostic v0.5.1 // indirect\n\tgithub.com/gorilla/websocket v1.4.2 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n\tgithub.com/hashicorp/go-uuid v1.0.2 // indirect\n\tgithub.com/jcmturner/aescts/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/dnsutils/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/gofork v1.0.0 // indirect\n\tgithub.com/jcmturner/goidentity/v6 v6.0.1 // indirect\n\tgithub.com/jcmturner/rpc/v2 v2.0.3 // indirect\n\tgithub.com/jessevdk/go-flags v1.4.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/lestrrat-go/backoff/v2 v2.0.8 // indirect\n\tgithub.com/lestrrat-go/blackmagic v1.0.0 // indirect\n\tgithub.com/lestrrat-go/httpcc v1.0.0 // indirect\n\tgithub.com/lestrrat-go/iter v1.0.1 // indirect\n\tgithub.com/lestrrat-go/jwx v1.2.7 // indirect\n\tgithub.com/lestrrat-go/option v1.0.0 // indirect\n\tgithub.com/mailru/easyjson v0.7.6 // indirect\n\tgithub.com/mattn/go-colorable v0.1.10 // indirect\n\tgithub.com/mattn/go-ieproxy v0.0.1 // indirect\n\tgithub.com/mattn/go-isatty v0.0.14 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.13 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.2-0.20181231171920-c182affec369 // indirect\n\tgithub.com/mb0/glob v0.0.0-20160210091149-1eb79d2de6c4 // indirect\n\tgithub.com/minio/argon2 v1.0.0 // indirect\n\tgithub.com/minio/colorjson v1.0.1 // indirect\n\tgithub.com/minio/direct-csi v1.3.5-0.20210601185811-f7776f7961bf // indirect\n\tgithub.com/minio/filepath v1.0.0 // indirect\n\tgithub.com/minio/mc v0.0.0-20211207230606-23a05f5a17f2 // indirect\n\tgithub.com/minio/md5-simd v1.1.2 // indirect\n\tgithub.com/minio/operator v0.0.0-20211011212245-31460bbbc4b7 // indirect\n\tgithub.com/minio/operator/logsearchapi v0.0.0-20211011212245-31460bbbc4b7 // indirect\n\tgithub.com/mitchellh/mapstructure v1.4.1 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/nats-io/jwt/v2 v2.0.2 // indirect\n\tgithub.com/nats-io/nats-streaming-server v0.21.2 // indirect\n\tgithub.com/nats-io/nkeys v0.3.0 // indirect\n\tgithub.com/nats-io/nuid v1.0.1 // indirect\n\tgithub.com/pkg/profile v1.6.0 // indirect\n\tgithub.com/pkg/xattr v0.4.3 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/posener/complete v1.2.3 // indirect\n\tgithub.com/pquerna/cachecontrol v0.0.0-20171018203845-0dec1b30a021 // indirect\n\tgithub.com/prometheus/common v0.31.1 // indirect\n\tgithub.com/rcrowley/go-metrics v0.0.0-20200313005456-10cdbea86bc0 // indirect\n\tgithub.com/rivo/uniseg v0.2.0 // indirect\n\tgithub.com/rjeczalik/notify v0.9.2 // indirect\n\tgithub.com/rs/xid v1.3.0 // indirect\n\tgithub.com/sirupsen/logrus v1.8.1 // indirect\n\tgithub.com/stretchr/objx v0.2.0 // indirect\n\tgithub.com/stretchr/testify v1.7.0 // indirect\n\tgithub.com/tidwall/gjson v1.11.0 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.0 // indirect\n\tgithub.com/tidwall/sjson v1.2.3 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.9 // indirect\n\tgithub.com/tklauser/numcpus v0.3.0 // indirect\n\tgithub.com/unrolled/secure v1.0.9 // indirect\n\tgithub.com/xdg/stringprep v1.0.0 // indirect\n\tgo.etcd.io/etcd/client/pkg/v3 v3.5.0 // indirect\n\tgo.mongodb.org/mongo-driver v1.4.6 // indirect\n\tgo.opencensus.io v0.23.0 // indirect\n\tgo.uber.org/multierr v1.7.0 // indirect\n\tgolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2 // indirect\n\tgolang.org/x/sync v0.0.0-20210220032951-036812b2e83c // indirect\n\tgolang.org/x/term v0.0.0-20210927222741-03fcf44c2211 // indirect\n\tgolang.org/x/text v0.3.7 // indirect\n\tgoogle.golang.org/appengine v1.6.7 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20210928142010-c7af6a1a74c9 // indirect\n\tgoogle.golang.org/grpc v1.41.0 // indirect\n\tgoogle.golang.org/protobuf v1.27.1 // indirect\n\tgopkg.in/h2non/filetype.v1 v1.0.5 // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/ini.v1 v1.63.2 // indirect\n\tgopkg.in/jcmturner/aescts.v1 v1.0.1 // indirect\n\tgopkg.in/jcmturner/dnsutils.v1 v1.0.1 // indirect\n\tgopkg.in/jcmturner/gokrb5.v7 v7.5.0 // indirect\n\tgopkg.in/jcmturner/rpc.v1 v1.1.0 // indirect\n\tgopkg.in/square/go-jose.v2 v2.3.1 // indirect\n\tgopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b // indirect\n\tk8s.io/api v0.21.1 // indirect\n\tk8s.io/apimachinery v0.21.1 // indirect\n\tk8s.io/client-go v0.21.1 // indirect\n\tk8s.io/klog/v2 v2.8.0 // indirect\n\tk8s.io/kube-openapi v0.0.0-20210305001622-591a79e4bda7 // indirect\n\tk8s.io/utils v0.0.0-20201110183641-67b214c5f920 // indirect\n\tmaze.io/x/duration v0.0.0-20160924141736-faac084b6075 // indirect\n\tsigs.k8s.io/controller-runtime v0.8.0 // indirect\n\tsigs.k8s.io/structured-merge-diff/v4 v4.1.0 // indirect\n\tsigs.k8s.io/yaml v1.2.0 // indirect\n)\n\nreplace github.com/gomodule/redigo v2.0.0+incompatible => github.com/gomodule/redigo v1.8.5\n", "bazil.org/fuse v0.0.0-20180421153158-65cc252bf669/go.mod h1:Xbm+BRKSBEpa4q4hTSxohYNQpsxXPbPry4JJWOB3LB8=\ncloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=\ncloud.google.com/go v0.39.0/go.mod h1:rVLT6fkc8chs9sfPtFc1SBH6em7n+ZoXaG+87tDISts=\ncloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=\ncloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.44.3/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=\ncloud.google.com/go v0.46.3/go.mod h1:a6bKKbmY7er1mI7TEI4lsAkts/mkhTSZK8w33B4RAg0=\ncloud.google.com/go v0.50.0/go.mod h1:r9sluTvynVuxRIOHXQEHMFffphuXHOMZMycpNR5e6To=\ncloud.google.com/go v0.51.0/go.mod h1:hWtGJ6gnXH+KgDv+V0zFGDvpi07n3z8ZNj3T1RW0Gcw=\ncloud.google.com/go v0.52.0/go.mod h1:pXajvRH/6o3+F9jDHZWQ5PbGhn+o8w9qiu/CffaVdO4=\ncloud.google.com/go v0.53.0/go.mod h1:fp/UouUEsRkN6ryDKNW/Upv/JBKnv6WDthjR6+vze6M=\ncloud.google.com/go v0.54.0/go.mod h1:1rq2OEkV3YMf6n/9ZvGWI3GWw0VoqH/1x2nd8Is/bPc=\ncloud.google.com/go v0.56.0/go.mod h1:jr7tqZxxKOVYizybht9+26Z/gUq7tiRzu+ACVAMbKVk=\ncloud.google.com/go v0.57.0/go.mod h1:oXiQ6Rzq3RAkkY7N6t3TcE6jE+CIBBbA36lwQ1JyzZs=\ncloud.google.com/go v0.60.0/go.mod h1:yw2G51M9IfRboUH61Us8GqCeF1PzPblB823Mn2q2eAU=\ncloud.google.com/go v0.62.0/go.mod h1:jmCYTdRCQuc1PHIIJ/maLInMho30T/Y0M4hTdTShOYc=\ncloud.google.com/go v0.65.0/go.mod h1:O5N8zS7uWy9vkA9vayVHs65eM1ubvY4h553ofrNHObY=\ncloud.google.com/go v0.72.0/go.mod h1:M+5Vjvlc2wnp6tjzE102Dw08nGShTscUx2nZMufOKPI=\ncloud.google.com/go v0.74.0/go.mod h1:VV1xSbzvo+9QJOxLDaJfTjx5e+MePCpCWwvftOeQmWk=\ncloud.google.com/go v0.78.0/go.mod h1:QjdrLG0uq+YwhjoVOLsS1t7TW8fs36kLs4XO5R5ECHg=\ncloud.google.com/go v0.79.0/go.mod h1:3bzgcEeQlzbuEAYu4mrWhKqWjmpprinYgKJLgKHnbb8=\ncloud.google.com/go v0.81.0/go.mod h1:mk/AM35KwGk/Nm2YSeZbxXdrNK3KZOYHmLkOqC2V6E0=\ncloud.google.com/go v0.83.0/go.mod h1:Z7MJUsANfY0pYPdw0lbnivPx4/vhy/e2FEkSkF7vAVY=\ncloud.google.com/go v0.84.0/go.mod h1:RazrYuxIK6Kb7YrzzhPoLmCVzl7Sup4NrbKPg8KHSUM=\ncloud.google.com/go v0.87.0/go.mod h1:TpDYlFy7vuLzZMMZ+B6iRiELaY7z/gJPaqbMx6mlWcY=\ncloud.google.com/go v0.90.0/go.mod h1:kRX0mNRHe0e2rC6oNakvwQqzyDmg57xJ+SZU1eT2aDQ=\ncloud.google.com/go v0.93.3/go.mod h1:8utlLll2EF5XMAV15woO4lSbWQlk8rer9aLOfLh7+YI=\ncloud.google.com/go v0.94.1 h1:DwuSvDZ1pTYGbXo8yOJevCTr3BoBlE+OVkHAKiYQUXc=\ncloud.google.com/go v0.94.1/go.mod h1:qAlAugsXlC+JWO+Bke5vCtc9ONxjQT3drlTTnAplMW4=\ncloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=\ncloud.google.com/go/bigquery v1.3.0/go.mod h1:PjpwJnslEMmckchkHFfq+HTD2DmtT67aNFKH1/VBDHE=\ncloud.google.com/go/bigquery v1.4.0/go.mod h1:S8dzgnTigyfTmLBfrtrhyYhwRxG72rYxvftPBK2Dvzc=\ncloud.google.com/go/bigquery v1.5.0/go.mod h1:snEHRnqQbz117VIFhE8bmtwIDY80NLUZUMb4Nv6dBIg=\ncloud.google.com/go/bigquery v1.7.0/go.mod h1://okPTzCYNXSlb24MZs83e2Do+h+VXtc4gLoIoXIAPc=\ncloud.google.com/go/bigquery v1.8.0/go.mod h1:J5hqkt3O0uAFnINi6JXValWIb1v0goeZM77hZzJN/fQ=\ncloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=\ncloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=\ncloud.google.com/go/firestore v1.1.0/go.mod h1:ulACoGHTpvq5r8rxGJ4ddJZBZqakUQqClKRT5SZwBmk=\ncloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=\ncloud.google.com/go/pubsub v1.1.0/go.mod h1:EwwdRX2sKPjnvnqCa270oGRyludottCI76h+R3AArQw=\ncloud.google.com/go/pubsub v1.2.0/go.mod h1:jhfEVHT8odbXTkndysNHCcx0awwzvfOlguIAii9o8iA=\ncloud.google.com/go/pubsub v1.3.1/go.mod h1:i+ucay31+CNRpDW4Lu78I4xXG+O1r/MAHgjpRVR+TSU=\ncloud.google.com/go/storage v1.0.0/go.mod h1:IhtSnM/ZTZV8YYJWCY8RULGVqBDmpoyjwiyrjsg+URw=\ncloud.google.com/go/storage v1.5.0/go.mod h1:tpKbwo567HUNpVclU5sGELwQWBDZ8gh0ZeosJ0Rtdos=\ncloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohlUTyfDhBk=\ncloud.google.com/go/storage v1.8.0/go.mod h1:Wv1Oy7z6Yz3DshWRJFhqM/UCfaWIRTdp0RXyy7KQOVs=\ncloud.google.com/go/storage v1.10.0 h1:STgFzyU5/8miMl0//zKh2aQeTyeaUH3WN9bSUiJ09bA=\ncloud.google.com/go/storage v1.10.0/go.mod h1:FLPqc6j+Ki4BU591ie1oL6qBQGu2Bl/tZ9ullr3+Kg0=\ncode.gitea.io/sdk/gitea v0.12.0/go.mod h1:z3uwDV/b9Ls47NGukYM9XhnHtqPh/J+t40lsUrR6JDY=\ncontrib.go.opencensus.io/exporter/aws v0.0.0-20181029163544-2befc13012d0/go.mod h1:uu1P0UCM/6RbsMrgPa98ll8ZcHM858i/AD06a9aLRCA=\ncontrib.go.opencensus.io/exporter/ocagent v0.5.0/go.mod h1:ImxhfLRpxoYiSq891pBrLVhN+qmP8BTVvdH2YLs7Gl0=\ncontrib.go.opencensus.io/exporter/stackdriver v0.12.1/go.mod h1:iwB6wGarfphGGe/e5CWqyUk/cLzKnWsOKPVW3no6OTw=\ncontrib.go.opencensus.io/integrations/ocsql v0.1.4/go.mod h1:8DsSdjz3F+APR+0z0WkU1aRorQCFfRxvqjUUPMbF3fE=\ncontrib.go.opencensus.io/resource v0.1.1/go.mod h1:F361eGI91LCmW1I/Saf+rX0+OFcigGlFvXwEGEnkRLA=\ndmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=\ngithub.com/Azure/azure-amqp-common-go/v2 v2.1.0/go.mod h1:R8rea+gJRuJR6QxTir/XuEd+YuKoUiazDC/N96FiDEU=\ngithub.com/Azure/azure-pipeline-go v0.2.1/go.mod h1:UGSo8XybXnIGZ3epmeBw7Jdz+HiUVpqIlpz/HKHylF4=\ngithub.com/Azure/azure-pipeline-go v0.2.2 h1:6oiIS9yaG6XCCzhgAgKFfIWyo4LLCiDhZot6ltoThhY=\ngithub.com/Azure/azure-pipeline-go v0.2.2/go.mod h1:4rQ/NZncSvGqNkkOsNpOU1tgoNuIlp9AfUH5G1tvCHc=\ngithub.com/Azure/azure-sdk-for-go v29.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-sdk-for-go v30.1.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-sdk-for-go v35.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-sdk-for-go v38.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-sdk-for-go v42.3.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-service-bus-go v0.9.1/go.mod h1:yzBx6/BUGfjfeqbRZny9AQIbIe3AcV9WZbAdpkoXOa0=\ngithub.com/Azure/azure-storage-blob-go v0.8.0/go.mod h1:lPI3aLPpuLTeUwh1sViKXFxwl2B6teiRqI0deQUvsw0=\ngithub.com/Azure/azure-storage-blob-go v0.10.0 h1:evCwGreYo3XLeBV4vSxLbLiYb6e0SzsJiXQVRGsRXxs=\ngithub.com/Azure/azure-storage-blob-go v0.10.0/go.mod h1:ep1edmW+kNQx4UfWM9heESNmQdijykocJ0YOxmMX8SE=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=\ngithub.com/Azure/go-autorest v12.0.0+incompatible/go.mod h1:r+4oMnoxhatjLLJ6zxSWATqVooLgysK6ZNox3g/xq24=\ngithub.com/Azure/go-autorest v14.1.1+incompatible/go.mod h1:r+4oMnoxhatjLLJ6zxSWATqVooLgysK6ZNox3g/xq24=\ngithub.com/Azure/go-autorest v14.2.0+incompatible h1:V5VMDjClD3GiElqLWO7mz2MxNAK/vTfRHdAubSIPRgs=\ngithub.com/Azure/go-autorest v14.2.0+incompatible/go.mod h1:r+4oMnoxhatjLLJ6zxSWATqVooLgysK6ZNox3g/xq24=\ngithub.com/Azure/go-autorest/autorest v0.9.0/go.mod h1:xyHB1BMZT0cuDHU7I0+g046+BFDTQ8rEZB0s4Yfa6bI=\ngithub.com/Azure/go-autorest/autorest v0.9.3/go.mod h1:GsRuLYvwzLjjjRoWEIyMUaYq8GNUx2nRB378IPt/1p0=\ngithub.com/Azure/go-autorest/autorest v0.9.6/go.mod h1:/FALq9T/kS7b5J5qsQ+RSTUdAmGFqi0vUdVNNx8q630=\ngithub.com/Azure/go-autorest/autorest v0.10.2/go.mod h1:/FALq9T/kS7b5J5qsQ+RSTUdAmGFqi0vUdVNNx8q630=\ngithub.com/Azure/go-autorest/autorest v0.11.1/go.mod h1:JFgpikqFJ/MleTTxwepExTKnFUKKszPS8UavbQYUMuw=\ngithub.com/Azure/go-autorest/autorest v0.11.12 h1:gI8ytXbxMfI+IVbI9mP2JGCTXIuhHLgRlvQ9X4PsnHE=\ngithub.com/Azure/go-autorest/autorest v0.11.12/go.mod h1:eipySxLmqSyC5s5k1CLupqet0PSENBEDP93LQ9a8QYw=\ngithub.com/Azure/go-autorest/autorest/adal v0.5.0/go.mod h1:8Z9fGy2MpX0PvDjB1pEgQTmVqjGhiHBW7RJJEciWzS0=\ngithub.com/Azure/go-autorest/autorest/adal v0.8.0/go.mod h1:Z6vX6WXXuyieHAXwMj0S6HY6e6wcHn37qQMBQlvY3lc=\ngithub.com/Azure/go-autorest/autorest/adal v0.8.1/go.mod h1:ZjhuQClTqx435SRJ2iMlOxPYt3d2C/T/7TiQCVZSn3Q=\ngithub.com/Azure/go-autorest/autorest/adal v0.8.2/go.mod h1:ZjhuQClTqx435SRJ2iMlOxPYt3d2C/T/7TiQCVZSn3Q=\ngithub.com/Azure/go-autorest/autorest/adal v0.8.3/go.mod h1:ZjhuQClTqx435SRJ2iMlOxPYt3d2C/T/7TiQCVZSn3Q=\ngithub.com/Azure/go-autorest/autorest/adal v0.9.0/go.mod h1:/c022QCutn2P7uY+/oQWWNcK9YU+MH96NgK+jErpbcg=\ngithub.com/Azure/go-autorest/autorest/adal v0.9.5 h1:Y3bBUV4rTuxenJJs41HU3qmqsb+auo+a3Lz+PlJPpL0=\ngithub.com/Azure/go-autorest/autorest/adal v0.9.5/go.mod h1:B7KF7jKIeC9Mct5spmyCB/A8CG/sEz1vwIRGv/bbw7A=\ngithub.com/Azure/go-autorest/autorest/azure/auth v0.4.2/go.mod h1:90gmfKdlmKgfjUpnCEpOJzsUEjrWDSLwHIG73tSXddM=\ngithub.com/Azure/go-autorest/autorest/azure/cli v0.3.1/go.mod h1:ZG5p860J94/0kI9mNJVoIoLgXcirM2gF5i2kWloofxw=\ngithub.com/Azure/go-autorest/autorest/date v0.1.0/go.mod h1:plvfp3oPSKwf2DNjlBjWF/7vwR+cUD/ELuzDCXwHUVA=\ngithub.com/Azure/go-autorest/autorest/date v0.2.0/go.mod h1:vcORJHLJEh643/Ioh9+vPmf1Ij9AEBM5FuBIXLmIy0g=\ngithub.com/Azure/go-autorest/autorest/date v0.3.0 h1:7gUk1U5M/CQbp9WoqinNzJar+8KY+LPI6wiWrP/myHw=\ngithub.com/Azure/go-autorest/autorest/date v0.3.0/go.mod h1:BI0uouVdmngYNUzGWeSYnokU+TrmwEsOqdt8Y6sso74=\ngithub.com/Azure/go-autorest/autorest/mocks v0.1.0/go.mod h1:OTyCOPRA2IgIlWxVYxBee2F5Gr4kF2zd2J5cFRaIDN0=\ngithub.com/Azure/go-autorest/autorest/mocks v0.2.0/go.mod h1:OTyCOPRA2IgIlWxVYxBee2F5Gr4kF2zd2J5cFRaIDN0=\ngithub.com/Azure/go-autorest/autorest/mocks v0.3.0/go.mod h1:a8FDP3DYzQ4RYfVAxAN3SVSiiO77gL2j2ronKKP0syM=\ngithub.com/Azure/go-autorest/autorest/mocks v0.4.0/go.mod h1:LTp+uSrOhSkaKrUy935gNZuuIPPVsHlr9DSOxSayd+k=\ngithub.com/Azure/go-autorest/autorest/mocks v0.4.1/go.mod h1:LTp+uSrOhSkaKrUy935gNZuuIPPVsHlr9DSOxSayd+k=\ngithub.com/Azure/go-autorest/autorest/to v0.2.0/go.mod h1:GunWKJp1AEqgMaGLV+iocmRAJWqST1wQYhyyjXJ3SJc=\ngithub.com/Azure/go-autorest/autorest/to v0.3.0/go.mod h1:MgwOyqaIuKdG4TL/2ywSsIWKAfJfgHDo8ObuUk3t5sA=\ngithub.com/Azure/go-autorest/autorest/validation v0.1.0/go.mod h1:Ha3z/SqBeaalWQvokg3NZAlQTalVMtOIAs1aGK7G6u8=\ngithub.com/Azure/go-autorest/autorest/validation v0.2.0/go.mod h1:3EEqHnBxQGHXRYq3HT1WyXAvT7LLY3tl70hw6tQIbjI=\ngithub.com/Azure/go-autorest/logger v0.1.0/go.mod h1:oExouG+K6PryycPJfVSxi/koC6LSNgds39diKLz7Vrc=\ngithub.com/Azure/go-autorest/logger v0.2.0/go.mod h1:T9E3cAhj2VqvPOtCYAvby9aBXkZmbF5NWuPV8+WeEW8=\ngithub.com/Azure/go-autorest/tracing v0.5.0/go.mod h1:r/s2XiOKccPW3HrqB+W0TQzfbtp2fGCgRFtBroKn4Dk=\ngithub.com/Azure/go-autorest/tracing v0.6.0 h1:TYi4+3m5t6K48TGI9AUdb+IzbnSxvnvUMfuitfgcfuo=\ngithub.com/Azure/go-autorest/tracing v0.6.0/go.mod h1:+vhtPC754Xsa23ID7GlGsrdKBpUA79WCAKPPZVC2DeU=\ngithub.com/Azure/go-ntlmssp v0.0.0-20200615164410-66371956d46c h1:/IBSNwUN8+eKzUzbJPqhK839ygXJ82sde8x3ogr6R28=\ngithub.com/Azure/go-ntlmssp v0.0.0-20200615164410-66371956d46c/go.mod h1:chxPXzSsl7ZWRAuOIE23GDNzjWuZquvFlgA8xmpunjU=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/DataDog/datadog-go v2.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=\ngithub.com/Djarvur/go-err113 v0.0.0-20200410182137-af658d038157/go.mod h1:4UJr5HIiMZrwgkSPdsjy2uOQExX/WEILpIrO9UPGuXs=\ngithub.com/Djarvur/go-err113 v0.1.0/go.mod h1:4UJr5HIiMZrwgkSPdsjy2uOQExX/WEILpIrO9UPGuXs=\ngithub.com/GoogleCloudPlatform/cloudsql-proxy v0.0.0-20191009163259-e802c2cb94ae/go.mod h1:mjwGPas4yKduTyubHvD1Atl9r1rUq8DfVy+gkVvZ+oo=\ngithub.com/GoogleCloudPlatform/k8s-cloud-provider v0.0.0-20190822182118-27a4ced34534/go.mod h1:iroGtC8B3tQiqtds1l+mgk/BBOrxbqjH+eUfFQYRc14=\ngithub.com/Knetic/govaluate v3.0.1-0.20171022003610-9aa49832a739+incompatible/go.mod h1:r7JcOSlj0wfOMncg0iLm8Leh48TZaKVeNIfJntJ2wa0=\ngithub.com/Masterminds/semver v1.5.0/go.mod h1:MB6lktGJrhw8PrUyiEoblNEGEQ+RzHPF078ddwwvV3Y=\ngithub.com/Masterminds/semver/v3 v3.0.3/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=\ngithub.com/Masterminds/semver/v3 v3.1.0/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=\ngithub.com/Microsoft/go-winio v0.4.14/go.mod h1:qXqCSQ3Xa7+6tgxaGTIe4Kpcdsi+P8jBhyzoq1bpyYA=\ngithub.com/NYTimes/gziphandler v0.0.0-20170623195520-56545f4a5d46/go.mod h1:3wb06e3pkSAbeQ52E9H9iFoQsEEwGN64994WTCIhntQ=\ngithub.com/NYTimes/gziphandler v1.1.1/go.mod h1:n/CVRwUEOgIxrgPvAQhUUr9oeUtvrhMomdKFjzJNB0c=\ngithub.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=\ngithub.com/OpenPeeDeeP/depguard v1.0.1/go.mod h1:xsIw86fROiiwelg+jB2uM9PiKihMMmUx/1V+TNhjQvM=\ngithub.com/PuerkitoBio/purell v1.0.0/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=\ngithub.com/PuerkitoBio/purell v1.1.0/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=\ngithub.com/PuerkitoBio/purell v1.1.1 h1:WEQqlqaGbrPkxLJWfBwQmfEAE1Z7ONdDLqrN38tNFfI=\ngithub.com/PuerkitoBio/purell v1.1.1/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=\ngithub.com/PuerkitoBio/urlesc v0.0.0-20160726150825-5bd2802263f2/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=\ngithub.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 h1:d+Bc7a5rLufV/sSk/8dngufqelfh6jnri85riMAaF/M=\ngithub.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=\ngithub.com/Shopify/sarama v1.19.0/go.mod h1:FVkBWblsNy7DGZRfXLU0O9RCGt5g3g3yEuWXgklEdEo=\ngithub.com/Shopify/sarama v1.27.2 h1:1EyY1dsxNDUQEv0O/4TsjosHI2CgB1uo9H/v56xzTxc=\ngithub.com/Shopify/sarama v1.27.2/go.mod h1:g5s5osgELxgM+Md9Qni9rzo7Rbt+vvFQI4bt/Mc93II=\ngithub.com/Shopify/toxiproxy v2.1.4+incompatible h1:TKdv8HiTLgE5wdJuEML90aBgNWsokNbMijUGhmcoBJc=\ngithub.com/Shopify/toxiproxy v2.1.4+incompatible/go.mod h1:OXgGpZ6Cli1/URJOF1DMxUHB2q5Ap20/P/eIdh4G0pI=\ngithub.com/StackExchange/wmi v0.0.0-20180116203802-5d049714c4a6/go.mod h1:3eOhrUMpNV+6aFIbp5/iudMxNCF27Vw2OZgy4xEx0Fg=\ngithub.com/StackExchange/wmi v0.0.0-20190523213315-cbe66965904d/go.mod h1:3eOhrUMpNV+6aFIbp5/iudMxNCF27Vw2OZgy4xEx0Fg=\ngithub.com/StackExchange/wmi v1.2.1 h1:VIkavFPXSjcnS+O8yTq7NI32k0R5Aj+v39y29VYDOSA=\ngithub.com/StackExchange/wmi v1.2.1/go.mod h1:rcmrprowKIVzvc+NUiLncP2uuArMWLCbu9SBzvHz7e8=\ngithub.com/VividCortex/ewma v1.1.1 h1:MnEK4VOv6n0RSY4vtRe3h11qjxL3+t0B8yOL8iMXdcM=\ngithub.com/VividCortex/ewma v1.1.1/go.mod h1:2Tkkvm3sRDVXaiyucHiACn4cqf7DpdyLvmxzcbUokwA=\ngithub.com/VividCortex/gohistogram v1.0.0/go.mod h1:Pf5mBqqDxYaXu3hDrrU+w6nw50o/4+TcAqDqk/vUH7g=\ngithub.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5/go.mod h1:SkGFH1ia65gfNATL8TAiHDNxPzPdmEL5uirI2Uyuz6c=\ngithub.com/agnivade/levenshtein v1.0.1/go.mod h1:CURSv5d9Uaml+FovSIICkLbAUZ9S4RqaHDIsdSBg7lM=\ngithub.com/alecthomas/kingpin v2.2.6+incompatible/go.mod h1:59OFYbFVLKQKq+mqrL6Rw5bR0c3ACQaawgXx0QYndlE=\ngithub.com/alecthomas/participle v0.2.1 h1:4AVLj1viSGa4LG5HDXKXrm5xRx19SB/rS/skPQB1Grw=\ngithub.com/alecthomas/participle v0.2.1/go.mod h1:SW6HZGeZgSIpcUWX3fXpfZhuaWHnmoD5KCVaqSaNTkk=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190924025748-f65c72e2690d/go.mod h1:rBZYJk541a8SKzHPHnH3zbiI+7dagKZ0cgpgrD7Fyho=\ngithub.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883/go.mod h1:rCTlJbsFo29Kk6CurOXKm700vrz8f0KW0JNfpkRJY/8=\ngithub.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=\ngithub.com/apache/thrift v0.12.0/go.mod h1:cp2SuWMxlEZw2r+iP2GNCdIi4C1qmUzdZFSVb+bacwQ=\ngithub.com/apache/thrift v0.13.0/go.mod h1:cp2SuWMxlEZw2r+iP2GNCdIi4C1qmUzdZFSVb+bacwQ=\ngithub.com/apache/thrift v0.15.0 h1:aGvdaR0v1t9XLgjtBYwxcBvBOTMqClzwE26CHOgjW1Y=\ngithub.com/apache/thrift v0.15.0/go.mod h1:PHK3hniurgQaNMZYaCLEqXKsYK8upmhPbmdP2FXSqgU=\ngithub.com/apex/log v1.1.4/go.mod h1:AlpoD9aScyQfJDVHmLMEcx4oU6LqzkWp4Mg9GdAcEvQ=\ngithub.com/apex/log v1.3.0/go.mod h1:jd8Vpsr46WAe3EZSQ/IUMs2qQD/GOycT5rPWCO1yGcs=\ngithub.com/apex/logs v0.0.4/go.mod h1:XzxuLZ5myVHDy9SAmYpamKKRNApGj54PfYLcFrXqDwo=\ngithub.com/aphistic/golf v0.0.0-20180712155816-02c07f170c5a/go.mod h1:3NqKYiepwy8kCu4PNA+aP7WUV72eXWJeP9/r3/K9aLE=\ngithub.com/aphistic/sweet v0.2.0/go.mod h1:fWDlIh/isSE9n6EPsRmC0det+whmX6dJid3stzu0Xys=\ngithub.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e/go.mod h1:3U/XgcO3hCbHZ8TKRvWD2dDTCfh9M9ya+I9JpbB7O8o=\ngithub.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=\ngithub.com/armon/go-metrics v0.0.0-20180917152333-f0300d1749da/go.mod h1:Q73ZrmVTwzkszR9V5SSuryQ31EELlFMUz1kKyl939pY=\ngithub.com/armon/go-metrics v0.0.0-20190430140413-ec5e00d3c878 h1:EFSB7Zo9Eg91v7MJPVsifUysc/wPdN+NOnVe6bWbdBM=\ngithub.com/armon/go-metrics v0.0.0-20190430140413-ec5e00d3c878/go.mod h1:3AMJUQhVx52RsWOnlkpikZr01T/yAVN2gn0861vByNg=\ngithub.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=\ngithub.com/aryann/difflib v0.0.0-20170710044230-e206f873d14a/go.mod h1:DAHtR1m6lCRdSC2Tm3DSWRPvIPr6xNKyeHdqDQSQT+A=\ngithub.com/asaskevich/govalidator v0.0.0-20180720115003-f9ffefc3facf/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=\ngithub.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=\ngithub.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496/go.mod h1:oGkLhpf+kjZl6xBf758TQhh5XrAeiJv/7FRz/2spLIg=\ngithub.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535/go.mod h1:oGkLhpf+kjZl6xBf758TQhh5XrAeiJv/7FRz/2spLIg=\ngithub.com/asaskevich/govalidator v0.0.0-20200907205600-7a23bdc65eef h1:46PFijGLmAjMPwCCCo7Jf0W6f9slllCkkv7vyc1yOSg=\ngithub.com/asaskevich/govalidator v0.0.0-20200907205600-7a23bdc65eef/go.mod h1:WaHUgvxTVq04UNunO+XhnAqY/wQc+bxr74GqbsZ/Jqw=\ngithub.com/aws/aws-lambda-go v1.13.3/go.mod h1:4UKl9IzQMoD+QF79YdCuzCwp8VbmG4VAQwij/eHl5CU=\ngithub.com/aws/aws-sdk-go v1.15.27/go.mod h1:mFuSZ37Z9YOHbQEwBWztmVzqXrEkub65tZoCYDt7FT0=\ngithub.com/aws/aws-sdk-go v1.16.26/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.19.18/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.19.45/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.20.6/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.25.11/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.26.3/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.27.0/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.27.1/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.31.6/go.mod h1:5zCpMtNQVjRREroY7sYe8lOMRSxkhG6MZveU8YkpAk0=\ngithub.com/aws/aws-sdk-go v1.34.28/go.mod h1:H7NKnBqNVzoTJpGfLrQkkD+ytBA93eiDYi/+8rV9s48=\ngithub.com/aws/aws-sdk-go-v2 v0.18.0/go.mod h1:JWVYvqSMppoMJC0x5wdwiImzgXTI9FuZwxzkQq9wy+g=\ngithub.com/aybabtme/rgbterm v0.0.0-20170906152045-cc83f3b3ce59/go.mod h1:q/89r3U2H7sSsE2t6Kca0lfwTK8JdoNGS/yzM/4iH5I=\ngithub.com/bcicen/jstream v1.0.1 h1:BXY7Cu4rdmc0rhyTVyT3UkxAiX3bnLpKLas9btbH5ck=\ngithub.com/bcicen/jstream v1.0.1/go.mod h1:9ielPxqFry7Y4Tg3j4BfjPocfJ3TbsRtXOAYXYmRuAQ=\ngithub.com/beevik/ntp v0.3.0 h1:xzVrPrE4ziasFXgBVBZJDP0Wg/KpMwk2KHJ4Ba8GrDw=\ngithub.com/beevik/ntp v0.3.0/go.mod h1:hIHWr+l3+/clUnF44zdK+CWW7fO8dR5cIylAQ76NRpg=\ngithub.com/benbjohnson/clock v1.1.0 h1:Q92kusRqC1XV2MjkWETPvjJVqKetz1OzxZB7mHJLju8=\ngithub.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=\ngithub.com/bits-and-blooms/bitset v1.2.0 h1:Kn4yilvwNtMACtf1eYDlG8H77R07mZSPbMjLyS07ChA=\ngithub.com/bits-and-blooms/bitset v1.2.0/go.mod h1:gIdJ4wp64HaoK2YrL1Q5/N7Y16edYb8uY+O0FJTyyDA=\ngithub.com/bits-and-blooms/bloom/v3 v3.0.1 h1:Inlf0YXbgehxVjMPmCGv86iMCKMGPPrPSHtBF5yRHwA=\ngithub.com/bits-and-blooms/bloom/v3 v3.0.1/go.mod h1:MC8muvBzzPOFsrcdND/A7kU7kMhkqb9KI70JlZCP+C8=\ngithub.com/bketelsen/crypt v0.0.3-0.20200106085610-5cbc8cc4026c/go.mod h1:MKsuJmJgSg28kpZDP6UIiPt0e0Oz0kqKNGyRaWEPv84=\ngithub.com/blakesmith/ar v0.0.0-20190502131153-809d4375e1fb/go.mod h1:PkYb9DJNAwrSvRx5DYA+gUcOIgTGVMNkfSCbZM8cWpI=\ngithub.com/blang/semver v3.5.0+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=\ngithub.com/blang/semver v3.5.1+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=\ngithub.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=\ngithub.com/boltdb/bolt v1.3.1/go.mod h1:clJnj/oiGkjum5o1McbSZDSLxVThjynRyGBgiAx27Ps=\ngithub.com/bombsimon/wsl/v2 v2.0.0/go.mod h1:mf25kr/SqFEPhhcxW1+7pxzGlW+hIl/hYTKY95VwV8U=\ngithub.com/bombsimon/wsl/v2 v2.2.0/go.mod h1:Azh8c3XGEJl9LyX0/sFC+CKMc7Ssgua0g+6abzXN4Pg=\ngithub.com/bombsimon/wsl/v3 v3.0.0/go.mod h1:st10JtZYLE4D5sC7b8xV4zTKZwAQjCH/Hy2Pm1FNZIc=\ngithub.com/bombsimon/wsl/v3 v3.1.0/go.mod h1:st10JtZYLE4D5sC7b8xV4zTKZwAQjCH/Hy2Pm1FNZIc=\ngithub.com/briandowns/spinner v1.16.0 h1:DFmp6hEaIx2QXXuqSJmtfSBSAjRmpGiKG6ip2Wm/yOs=\ngithub.com/briandowns/spinner v1.16.0/go.mod h1:QOuQk7x+EaDASo80FEXwlwiA+j/PPIcX3FScO+3/ZPQ=\ngithub.com/buger/jsonparser v1.1.1 h1:2PnMjfWD7wBILjqQbt530v576A/cAbQvEW9gGIpYMUs=\ngithub.com/buger/jsonparser v1.1.1/go.mod h1:6RYKKt7H4d4+iWqouImQ9R2FZql3VbhNgx27UK13J/0=\ngithub.com/caarlos0/ctrlc v1.0.0/go.mod h1:CdXpj4rmq0q/1Eb44M9zi2nKB0QraNKuRGYGrrHhcQw=\ngithub.com/campoy/unique v0.0.0-20180121183637-88950e537e7e/go.mod h1:9IOqJGCPMSc6E5ydlp5NIonxObaeu/Iub/X03EKPVYo=\ngithub.com/casbin/casbin/v2 v2.1.2/go.mod h1:YcPU1XXisHhLzuxH9coDNf2FbKpjGlbCg3n9yuLkIJQ=\ngithub.com/cavaliercoder/go-cpio v0.0.0-20180626203310-925f9528c45e/go.mod h1:oDpT4efm8tSYHXV5tHSdRvBet/b/QzxZ+XyyPehvm3A=\ngithub.com/cenkalti/backoff v2.2.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=\ngithub.com/census-instrumentation/opencensus-proto v0.2.0/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash v1.1.0 h1:a6HrQnmkObjyL+Gs60czilIUGqrzKutQD6XZog3p+ko=\ngithub.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=\ngithub.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cespare/xxhash/v2 v2.1.2 h1:YRXhKfTDauu4ajMg1TPgFO5jnlC2HCbmLXMcTG5cbYE=\ngithub.com/cespare/xxhash/v2 v2.1.2/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cheggaaa/pb v1.0.29 h1:FckUN5ngEk2LpvuG0fw1GEFx6LtyY2pWI/Z2QgCnEYo=\ngithub.com/cheggaaa/pb v1.0.29/go.mod h1:W40334L7FMC5JKWldsTWbdGjLo0RxUKK73K+TuPxX30=\ngithub.com/cheggaaa/pb/v3 v3.0.5/go.mod h1:X1L61/+36nz9bjIsrDU52qHKOQukUQe2Ge+YvGuquCw=\ngithub.com/cheggaaa/pb/v3 v3.0.6/go.mod h1:X1L61/+36nz9bjIsrDU52qHKOQukUQe2Ge+YvGuquCw=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/circonus-labs/circonus-gometrics v2.3.1+incompatible/go.mod h1:nmEj6Dob7S7YxXgwXpfOuvO54S+tGdZdw9fuRZt25Ag=\ngithub.com/circonus-labs/circonusllhist v0.1.3/go.mod h1:kMXHVDlOchFAehlya5ePtbp5jckzBHf4XRpQvBOLI+I=\ngithub.com/clbanning/x2j v0.0.0-20191024224557-825249438eec/go.mod h1:jMjuTZXRI4dUb/I5gc9Hdhagfvm9+RyrPryS/auMzxE=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/cncf/udpa/go v0.0.0-20200629203442-efcf912fb354/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cncf/xds/go v0.0.0-20210312221358-fbca930ec8ed/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cncf/xds/go v0.0.0-20210805033703-aa0b78936158/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cockroachdb/apd v1.1.0/go.mod h1:8Sl8LxpKi29FqWXR16WEFZRNSz3SoPzUzeMeY4+DwBQ=\ngithub.com/cockroachdb/cockroach-go/v2 v2.0.3 h1:ZA346ACHIZctef6trOTwBAEvPVm1k0uLm/bb2Atc+S8=\ngithub.com/cockroachdb/cockroach-go/v2 v2.0.3/go.mod h1:hAuDgiVgDVkfirP9JnhXEfcXEPRKBpYdGz+l7mvYSzw=\ngithub.com/cockroachdb/datadriven v0.0.0-20190809214429-80d97fb3cbaa/go.mod h1:zn76sxSg3SzpJ0PPJaLDCu+Bu0Lg3sKTORVIj19EIF8=\ngithub.com/codahale/hdrhistogram v0.0.0-20161010025455-3a0bb77429bd/go.mod h1:sE/e/2PUdi/liOCUjSTXgM1o87ZssimdTWN964YiIeI=\ngithub.com/colinmarc/hdfs/v2 v2.2.0 h1:4AaIlTq+/sWmeqYhI0dX8bD4YrMQM990tRjm636FkGM=\ngithub.com/colinmarc/hdfs/v2 v2.2.0/go.mod h1:Wss6n3mtaZyRwWaqtSH+6ge01qT0rw9dJJmvoUnIQ/E=\ngithub.com/container-storage-interface/spec v1.1.0/go.mod h1:6URME8mwIBbpVyZV93Ce5St17xBiQJQY67NDsuohiy4=\ngithub.com/container-storage-interface/spec v1.3.0/go.mod h1:6URME8mwIBbpVyZV93Ce5St17xBiQJQY67NDsuohiy4=\ngithub.com/containerd/containerd v1.3.0/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=\ngithub.com/coredns/coredns v1.4.0 h1:RubBkYmkByUqZWWkjRHvNLnUHgkRVqAWgSMmRFvpE1A=\ngithub.com/coredns/coredns v1.4.0/go.mod h1:zASH/MVDgR6XZTbxvOnsZfffS+31vg6Ackf/wo1+AM0=\ngithub.com/coreos/bbolt v1.3.2/go.mod h1:iRUV2dpdMOn7Bo10OQBFzIJO9kkE559Wcmn+qkEiiKk=\ngithub.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/etcd v3.3.13+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/go-etcd v2.0.0+incompatible/go.mod h1:Jez6KQU2B/sWsbdaef3ED8NzMklzPG4d5KIOhIy30Tk=\ngithub.com/coreos/go-oidc v2.1.0+incompatible h1:sdJrfw8akMnCuUlaZU3tE/uYXFgfqom8DBE9so9EBsM=\ngithub.com/coreos/go-oidc v2.1.0+incompatible/go.mod h1:CgnwVTmzoESiwO9qyAFEMiHoZ1nMCKZlZ9V6mm3/LKc=\ngithub.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-semver v0.3.0 h1:wkHLiw0WNATZnSG7epLsujiMCgPAc9xhjJ4tgnAxmfM=\ngithub.com/coreos/go-semver v0.3.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-systemd v0.0.0-20180511133405-39ca1b05acc7/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd v0.0.0-20190719114852-fd7a80b32e1f h1:JOrtw2xFKzlg+cbHpyrpLDmnN1HqhBfnX7WDiW7eG2c=\ngithub.com/coreos/go-systemd v0.0.0-20190719114852-fd7a80b32e1f/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd/v22 v22.3.1/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/coreos/go-systemd/v22 v22.3.2 h1:D9/bQk5vlXQFZ6Kwuu6zaiXJ9oTPe68++AzAJc1DzSI=\ngithub.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/coreos/pkg v0.0.0-20160727233714-3ac0863d7acf/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=\ngithub.com/coreos/pkg v0.0.0-20180108230652-97fdf19511ea/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=\ngithub.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=\ngithub.com/cosnicolaou/pbzip2 v1.0.1 h1:f5Ix000Rtl9tr0Ne33wNLtljGl2nAyR4ZirJrz9qg+0=\ngithub.com/cosnicolaou/pbzip2 v1.0.1/go.mod h1:cE04zhBMvwMrCLhsx6aLYh9cGsU9GyFB0oo/GmO+SkY=\ngithub.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/creack/pty v1.1.11/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v0.0.0-20151105211317-5215b55f46b2/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dchest/siphash v1.2.1 h1:4cLinnzVJDKxTCl9B01807Yiy+W7ZzVHj/KIroQRvT4=\ngithub.com/dchest/siphash v1.2.1/go.mod h1:q+IRvb2gOSrUnYoPqHiyHXS0FOBBOdl6tONBlVnOnt4=\ngithub.com/decred/dcrd/chaincfg/chainhash v1.0.2/go.mod h1:BpbrGgrPTr3YJYRN3Bm+D9NuaFd+zGyNeIKgrhCXK60=\ngithub.com/decred/dcrd/crypto/blake256 v1.0.0/go.mod h1:sQl2p6Y26YV+ZOcSTP6thNdn47hh8kt6rqSlvmrXFAc=\ngithub.com/decred/dcrd/dcrec/secp256k1/v3 v3.0.0/go.mod h1:J70FGZSbzsjecRTiTzER+3f1KZLNaXkuv+yeFTKoxM8=\ngithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.0.0-20210816181553-5444fa50b93d/go.mod h1:tmAIfUFEirG/Y8jhZ9M+h36obRZAk/1fcSpXwAVlfqE=\ngithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.0.0 h1:Fe5DW39aaoS/fqZiYlylEqQWIKznnbatWSHpWdFA3oQ=\ngithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.0.0/go.mod h1:hyedUtir6IdtD/7lIxGeCxkaw7y45JueMRL4DIyJDKs=\ngithub.com/denisenkom/go-mssqldb v0.0.0-20191124224453-732737034ffd/go.mod h1:xbL0rPBG9cCiLr28tMa8zpbdarY27NDyej4t/EjAShU=\ngithub.com/devigned/tab v0.1.1/go.mod h1:XG9mPq0dFghrYvoBF3xdRrJzSTX1b7IQrvaL9mzjeJY=\ngithub.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=\ngithub.com/dgryski/go-sip13 v0.0.0-20181026042036-e10d5fee7954/go.mod h1:vAd38F8PWV+bWy6jNmig1y/TA+kYO4g3RSRF0IAv0no=\ngithub.com/dimchansky/utfbom v1.1.0/go.mod h1:rO41eb7gLfo8SF1jd9F8HplJm1Fewwi4mQvIirEdv+8=\ngithub.com/djherbis/atime v1.0.0 h1:ySLvBAM0EvOGaX7TI4dAM5lWj+RdJUCKtGSEHN8SGBg=\ngithub.com/djherbis/atime v1.0.0/go.mod h1:5W+KBIuTwVGcqjIfaTwt+KSYX1o6uep8dtevevQP/f8=\ngithub.com/dnaeon/go-vcr v1.0.1/go.mod h1:aBB1+wY4s93YsC3HHjMBMrwTj2R9FHDzUr9KyGc8n1E=\ngithub.com/docker/cli v0.0.0-20191017083524-a8ff7f821017/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\ngithub.com/docker/distribution v2.7.1+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=\ngithub.com/docker/docker v0.7.3-0.20190327010347-be7ac8be2ae0/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/docker v1.4.2-0.20190924003213-a8608b5b67c7/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/docker-credential-helpers v0.6.3/go.mod h1:WRaJzqw3CTB9bk10avuGsjVBZsD05qeibJ1/TYlvc0Y=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-units v0.3.3/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/docker/go-units v0.4.0 h1:3uh0PgVws3nIA0Q+MwDC8yjEPf9zjRfZZWXZYDct3Tw=\ngithub.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/docker/spdystream v0.0.0-20160310174837-449fdfce4d96/go.mod h1:Qh8CwZgvJUkLughtfhJv5dyTYa91l1fOUCrgjqmcifM=\ngithub.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815/go.mod h1:WwZ+bS3ebgob9U8Nd0kOddGdZWjyMGR8Wziv+TBNwSE=\ngithub.com/dswarbrick/smart v0.0.0-20190505152634-909a45200d6d h1:QK8IYltsNy+5QZcDFbVkyInrs98/wHy1tfUTGG91sps=\ngithub.com/dswarbrick/smart v0.0.0-20190505152634-909a45200d6d/go.mod h1:apXo4PA/BgBPrt66j0N45O2stlBTRowdip2igwcUWVc=\ngithub.com/dustin/go-humanize v0.0.0-20171111073723-bb3d318650d4/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/dustin/go-humanize v1.0.0 h1:VSnTsYCnlFHaM2/igO1h6X3HA71jcobQuxemgkq4zYo=\ngithub.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/eapache/go-resiliency v1.1.0/go.mod h1:kFI+JgMyC7bLPUVY133qvEBtVayf5mFgVsvEsIPBvNs=\ngithub.com/eapache/go-resiliency v1.2.0 h1:v7g92e/KSN71Rq7vSThKaWIq68fL4YHvWyiUKorFR1Q=\ngithub.com/eapache/go-resiliency v1.2.0/go.mod h1:kFI+JgMyC7bLPUVY133qvEBtVayf5mFgVsvEsIPBvNs=\ngithub.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21 h1:YEetp8/yCZMuEPMUDHG0CW/brkkEp8mzqk2+ODEitlw=\ngithub.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21/go.mod h1:+020luEh2TKB4/GOp8oxxtq0Daoen/Cii55CzbTV6DU=\ngithub.com/eapache/queue v1.1.0 h1:YOEu7KNc61ntiQlcEeUIoDTJ2o8mQznoNvUhiigpIqc=\ngithub.com/eapache/queue v1.1.0/go.mod h1:6eCeP0CKFpHLu8blIFXhExK/dRa7WDZfr6jVFPTqq+I=\ngithub.com/eclipse/paho.mqtt.golang v1.3.0 h1:MU79lqr3FKNKbSrGN7d7bNYqh8MwWW7Zcx0iG+VIw9I=\ngithub.com/eclipse/paho.mqtt.golang v1.3.0/go.mod h1:eTzb4gxwwyWpqBUHGQZ4ABAV7+Jgm1PklsYT/eo8Hcc=\ngithub.com/edsrzf/mmap-go v1.0.0/go.mod h1:YO35OhQPt3KJa3ryjFM5Bs14WD66h8eGKpfaBNrHW5M=\ngithub.com/elastic/go-elasticsearch/v7 v7.12.0 h1:j4tvcMrZJLp39L2NYvBb7f+lHKPqPHSL3nvB8+/DV+s=\ngithub.com/elastic/go-elasticsearch/v7 v7.12.0/go.mod h1:OJ4wdbtDNk5g503kvlHLyErCgQwwzmDtaFC4XyOxXA4=\ngithub.com/elazarl/goproxy v0.0.0-20170405201442-c4fc26588b6e/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=\ngithub.com/elazarl/goproxy v0.0.0-20180725130230-947c36da3153/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=\ngithub.com/emicklei/go-restful v0.0.0-20170410110728-ff4f55a20633/go.mod h1:otzb+WCGbkyDHkqmQmT5YD2WR4BBwUdeQoFo8l/7tVs=\ngithub.com/emicklei/go-restful v2.9.5+incompatible h1:spTtZBk5DYEvbxMVutUuTyh1Ao2r4iyvLdACqsl/Ljk=\ngithub.com/emicklei/go-restful v2.9.5+incompatible/go.mod h1:otzb+WCGbkyDHkqmQmT5YD2WR4BBwUdeQoFo8l/7tVs=\ngithub.com/envoyproxy/go-control-plane v0.6.9/go.mod h1:SBwIajubJHhxtWwsL9s8ss4safvEdbitLhGGK48rN6g=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/go-control-plane v0.9.7/go.mod h1:cwu0lG7PUMfa9snN8LXBig5ynNVH9qI8YYLbd1fK2po=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20210217033140-668b12f5399d/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20210512163311-63b5d3c536b0/go.mod h1:hliV/p42l8fGbc6Y9bQ70uLwIvmJyVE5k4iMKlh8wCQ=\ngithub.com/envoyproxy/go-control-plane v0.9.10-0.20210907150352-cf90f659a021/go.mod h1:AFq3mo9L8Lqqiid3OhADV3RfLJnjiw63cSpi+fDTRC0=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/erikstmartin/go-testdb v0.0.0-20160219214506-8d10e4a1bae5/go.mod h1:a2zkGnVExMxdzMo3M0Hi/3sEU+cWnZpSni0O6/Yb/P0=\ngithub.com/evanphx/json-patch v4.2.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=\ngithub.com/evanphx/json-patch v4.5.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=\ngithub.com/evanphx/json-patch v4.9.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=\ngithub.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/fatih/color v1.9.0/go.mod h1:eQcE1qtQxscV5RaZvpXrrb8Drkc3/DdQ+uUYCNjL+zU=\ngithub.com/fatih/color v1.12.0/go.mod h1:ELkj/draVOlAH/xkhN6mQ50Qd0MPOk5AAr3maGEBuJM=\ngithub.com/fatih/color v1.13.0 h1:8LOYc1KYPPmyKMuN8QV2DNRWNbLo6LZ0iLs8+mlH53w=\ngithub.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=\ngithub.com/fatih/structs v1.1.0 h1:Q7juDM0QtcnhCpeyLGQKyg4TOIghuNXrkL32pHAUMxo=\ngithub.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=\ngithub.com/form3tech-oss/jwt-go v3.2.2+incompatible h1:TcekIExNqud5crz4xD2pavyTgWiPvpYe4Xau31I0PRk=\ngithub.com/form3tech-oss/jwt-go v3.2.2+incompatible/go.mod h1:pbq4aXjuKjdthFRnoDwaVPLA+WlJuPGy+QneDUgJi2k=\ngithub.com/fortytw2/leaktest v1.2.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=\ngithub.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=\ngithub.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=\ngithub.com/franela/goblin v0.0.0-20200105215937-c9ffbefa60db/go.mod h1:7dvUGVsVBjqR7JHJk0brhHOZYGmfBYOrK0ZhYMEtBr4=\ngithub.com/franela/goreq v0.0.0-20171204163338-bcd34c9993f8/go.mod h1:ZhphrRTfi2rbfLwlschooIH4+wKKDR4Pdxhh+TRoA20=\ngithub.com/frankban/quicktest v1.10.2/go.mod h1:K+q6oSqb0W0Ininfk863uOk1lMy69l/P6txr3mVT54s=\ngithub.com/frankban/quicktest v1.12.1 h1:P6vQcHwZYgVGIpUzKB5DXzkEeYJppJOStPLuh9aB89c=\ngithub.com/frankban/quicktest v1.12.1/go.mod h1:qLE0fzW0VuyUAJgPU19zByoIr0HtCHN/r/VLSOOIySU=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=\ngithub.com/georgysavva/scany v0.2.7 h1:SBEuurTvWOUp7FnGBOjeSF9XWaWmVzc91h9baPo6y2s=\ngithub.com/georgysavva/scany v0.2.7/go.mod h1:bcxPhzeQFQqAUmjlZVwTGlu6AnWFSOiHpalfBe0xQ6U=\ngithub.com/ghodss/yaml v0.0.0-20150909031657-73d445a93680/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/gizak/termui/v3 v3.1.0/go.mod h1:bXQEBkJpzxUAKf0+xq9MSWAvWZlE7c+aidmyFlkYTrY=\ngithub.com/globalsign/mgo v0.0.0-20180905125535-1ca0a4f7cbcb/go.mod h1:xkRDCp4j0OGD1HRkm4kmhM+pmpv3AKq5SU7GMg4oO/Q=\ngithub.com/globalsign/mgo v0.0.0-20181015135952-eeefdecb41b8/go.mod h1:xkRDCp4j0OGD1HRkm4kmhM+pmpv3AKq5SU7GMg4oO/Q=\ngithub.com/go-asn1-ber/asn1-ber v1.5.1 h1:pDbRAunXzIUXfx4CB2QJFv5IuPiuoW+sWvr/Us009o8=\ngithub.com/go-asn1-ber/asn1-ber v1.5.1/go.mod h1:hEBeB/ic+5LoWskz+yKT7vGhhPYkProFKoKdwZRWMe0=\ngithub.com/go-critic/go-critic v0.4.1/go.mod h1:7/14rZGnZbY6E38VEGk2kVhoq6itzc1E68facVDK23g=\ngithub.com/go-critic/go-critic v0.4.3/go.mod h1:j4O3D4RoIwRqlZw5jJpx0BNfXWWbpcJoKu5cYSe4YmQ=\ngithub.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-ini/ini v1.25.4/go.mod h1:ByCAeIL28uOIIG0E3PJtZPDL8WnHpFKFOtgjp+3Ies8=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.10.0/go.mod h1:xUsJbQ/Fp4kEt7AFgCuvyX4a71u8h9jB8tj/ORgOZ7o=\ngithub.com/go-kit/log v0.1.0/go.mod h1:zbhenjAZHb184qTLMA9ZjW7ThYL0H2mk7Q6pNt4vbaY=\ngithub.com/go-ldap/ldap v3.0.2+incompatible h1:kD5HQcAzlQ7yrhfn+h+MSABeAy/jAJhvIJ/QDllP44g=\ngithub.com/go-ldap/ldap v3.0.2+incompatible/go.mod h1:qfd9rJvER9Q0/D/Sqn1DfHRoBp40uXYvFoEVrNEPqRc=\ngithub.com/go-ldap/ldap/v3 v3.2.4 h1:PFavAq2xTgzo/loE8qNXcQaofAaqIpI4WgaLdv+1l3E=\ngithub.com/go-ldap/ldap/v3 v3.2.4/go.mod h1:iYS1MdmrmceOJ1QOTnRXrIs7i3kloqtmGQjRvjKpyMg=\ngithub.com/go-lintpack/lintpack v0.5.2/go.mod h1:NwZuYi2nUHho8XEIZ6SIxihrnPoqBTDqfpXvXAN0sXM=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=\ngithub.com/go-logr/logr v0.1.0/go.mod h1:ixOQHD9gLJUVQQ2ZOR7zLEifBX6tGkNJF4QyIY7sIas=\ngithub.com/go-logr/logr v0.2.0/go.mod h1:z6/tIYblkpsD+a4lm/fGIIU9mZ+XfAiaFtq7xTgseGU=\ngithub.com/go-logr/logr v0.3.0/go.mod h1:z6/tIYblkpsD+a4lm/fGIIU9mZ+XfAiaFtq7xTgseGU=\ngithub.com/go-logr/logr v0.4.0 h1:K7/B1jt6fIBQVd4Owv2MqGQClcgf0R266+7C/QjRcLc=\ngithub.com/go-logr/logr v0.4.0/go.mod h1:z6/tIYblkpsD+a4lm/fGIIU9mZ+XfAiaFtq7xTgseGU=\ngithub.com/go-logr/zapr v0.2.0/go.mod h1:qhKdvif7YF5GI9NWEpyxTSSBdGmzkNguibrdCNVPunU=\ngithub.com/go-ole/go-ole v1.2.1/go.mod h1:7FAglXiTm7HKlQRDeOQ6ZNUHidzCWXuZWq/1dTyBNF8=\ngithub.com/go-ole/go-ole v1.2.4/go.mod h1:XCwSNxSkXRo4vlyPy93sltvi/qJq0jqQhjqQNIwKuxM=\ngithub.com/go-ole/go-ole v1.2.5/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-openapi/analysis v0.0.0-20180825180245-b006789cd277/go.mod h1:k70tL6pCuVxPJOHXQ+wIac1FUrvNkHolPie/cLEU6hI=\ngithub.com/go-openapi/analysis v0.17.0/go.mod h1:IowGgpVeD0vNm45So8nr+IcQ3pxVtpRoBWb8PVZO0ik=\ngithub.com/go-openapi/analysis v0.18.0/go.mod h1:IowGgpVeD0vNm45So8nr+IcQ3pxVtpRoBWb8PVZO0ik=\ngithub.com/go-openapi/analysis v0.19.2/go.mod h1:3P1osvZa9jKjb8ed2TPng3f0i/UY9snX6gxi44djMjk=\ngithub.com/go-openapi/analysis v0.19.4/go.mod h1:3P1osvZa9jKjb8ed2TPng3f0i/UY9snX6gxi44djMjk=\ngithub.com/go-openapi/analysis v0.19.5/go.mod h1:hkEAkxagaIvIP7VTn8ygJNkd4kAYON2rCu0v0ObL0AU=\ngithub.com/go-openapi/analysis v0.19.10/go.mod h1:qmhS3VNFxBlquFJ0RGoDtylO9y4pgTAUNE9AEEMdlJQ=\ngithub.com/go-openapi/analysis v0.19.16/go.mod h1:GLInF007N83Ad3m8a/CbQ5TPzdnGT7workfHwuVjNVk=\ngithub.com/go-openapi/analysis v0.20.0 h1:UN09o0kNhleunxW7LR+KnltD0YrJ8FF03pSqvAN3Vro=\ngithub.com/go-openapi/analysis v0.20.0/go.mod h1:BMchjvaHDykmRMsK40iPtvyOfFdMMxlOmQr9FBZk+Og=\ngithub.com/go-openapi/errors v0.17.0/go.mod h1:LcZQpmvG4wyF5j4IhA73wkLFQg+QJXOQHVjmcZxhka0=\ngithub.com/go-openapi/errors v0.18.0/go.mod h1:LcZQpmvG4wyF5j4IhA73wkLFQg+QJXOQHVjmcZxhka0=\ngithub.com/go-openapi/errors v0.19.2/go.mod h1:qX0BLWsyaKfvhluLejVpVNwNRdXZhEbTA4kxxpKBC94=\ngithub.com/go-openapi/errors v0.19.3/go.mod h1:qX0BLWsyaKfvhluLejVpVNwNRdXZhEbTA4kxxpKBC94=\ngithub.com/go-openapi/errors v0.19.6/go.mod h1:cM//ZKUKyO06HSwqAelJ5NsEMMcpa6VpXe8DOa1Mi1M=\ngithub.com/go-openapi/errors v0.19.7/go.mod h1:cM//ZKUKyO06HSwqAelJ5NsEMMcpa6VpXe8DOa1Mi1M=\ngithub.com/go-openapi/errors v0.19.8/go.mod h1:cM//ZKUKyO06HSwqAelJ5NsEMMcpa6VpXe8DOa1Mi1M=\ngithub.com/go-openapi/errors v0.19.9 h1:9SnKdGhiPZHF3ttwFMiCBEb8jQ4IDdrK+5+a0oTygA4=\ngithub.com/go-openapi/errors v0.19.9/go.mod h1:cM//ZKUKyO06HSwqAelJ5NsEMMcpa6VpXe8DOa1Mi1M=\ngithub.com/go-openapi/jsonpointer v0.0.0-20160704185906-46af16f9f7b1/go.mod h1:+35s3my2LFTysnkMfxsJBAMHj/DoqoB9knIWoYG/Vk0=\ngithub.com/go-openapi/jsonpointer v0.17.0/go.mod h1:cOnomiV+CVVwFLk0A/MExoFMjwdsUdVpsRhURCKh+3M=\ngithub.com/go-openapi/jsonpointer v0.18.0/go.mod h1:cOnomiV+CVVwFLk0A/MExoFMjwdsUdVpsRhURCKh+3M=\ngithub.com/go-openapi/jsonpointer v0.19.2/go.mod h1:3akKfEdA7DF1sugOqz1dVQHBcuDBPKZGEoHC/NkiQRg=\ngithub.com/go-openapi/jsonpointer v0.19.3/go.mod h1:Pl9vOtqEWErmShwVjC8pYs9cog34VGT37dQOVbmoatg=\ngithub.com/go-openapi/jsonpointer v0.19.5 h1:gZr+CIYByUqjcgeLXnQu2gHYQC9o73G2XUeOFYEICuY=\ngithub.com/go-openapi/jsonpointer v0.19.5/go.mod h1:Pl9vOtqEWErmShwVjC8pYs9cog34VGT37dQOVbmoatg=\ngithub.com/go-openapi/jsonreference v0.0.0-20160704190145-13c6e3589ad9/go.mod h1:W3Z9FmVs9qj+KR4zFKmDPGiLdk1D9Rlm7cyMvf57TTg=\ngithub.com/go-openapi/jsonreference v0.17.0/go.mod h1:g4xxGn04lDIRh0GJb5QlpE3HfopLOL6uZrK/VgnsK9I=\ngithub.com/go-openapi/jsonreference v0.18.0/go.mod h1:g4xxGn04lDIRh0GJb5QlpE3HfopLOL6uZrK/VgnsK9I=\ngithub.com/go-openapi/jsonreference v0.19.2/go.mod h1:jMjeRr2HHw6nAVajTXJ4eiUwohSTlpa0o73RUL1owJc=\ngithub.com/go-openapi/jsonreference v0.19.3/go.mod h1:rjx6GuL8TTa9VaixXglHmQmIL98+wF9xc8zWvFonSJ8=\ngithub.com/go-openapi/jsonreference v0.19.5 h1:1WJP/wi4OjB4iV8KVbH73rQaoialJrqv8gitZLxGLtM=\ngithub.com/go-openapi/jsonreference v0.19.5/go.mod h1:RdybgQwPxbL4UEjuAruzK1x3nE69AqPYEJeo/TWfEeg=\ngithub.com/go-openapi/loads v0.17.0/go.mod h1:72tmFy5wsWx89uEVddd0RjRWPZm92WRLhf7AC+0+OOU=\ngithub.com/go-openapi/loads v0.18.0/go.mod h1:72tmFy5wsWx89uEVddd0RjRWPZm92WRLhf7AC+0+OOU=\ngithub.com/go-openapi/loads v0.19.0/go.mod h1:72tmFy5wsWx89uEVddd0RjRWPZm92WRLhf7AC+0+OOU=\ngithub.com/go-openapi/loads v0.19.2/go.mod h1:QAskZPMX5V0C2gvfkGZzJlINuP7Hx/4+ix5jWFxsNPs=\ngithub.com/go-openapi/loads v0.19.3/go.mod h1:YVfqhUCdahYwR3f3iiwQLhicVRvLlU/WO5WPaZvcvSI=\ngithub.com/go-openapi/loads v0.19.4/go.mod h1:zZVHonKd8DXyxyw4yfnVjPzBjIQcLt0CCsn0N0ZrQsk=\ngithub.com/go-openapi/loads v0.19.5/go.mod h1:dswLCAdonkRufe/gSUC3gN8nTSaB9uaS2es0x5/IbjY=\ngithub.com/go-openapi/loads v0.19.6/go.mod h1:brCsvE6j8mnbmGBh103PT/QLHfbyDxA4hsKvYBNEGVc=\ngithub.com/go-openapi/loads v0.19.7/go.mod h1:brCsvE6j8mnbmGBh103PT/QLHfbyDxA4hsKvYBNEGVc=\ngithub.com/go-openapi/loads v0.20.0/go.mod h1:2LhKquiE513rN5xC6Aan6lYOSddlL8Mp20AW9kpviM4=\ngithub.com/go-openapi/loads v0.20.2 h1:z5p5Xf5wujMxS1y8aP+vxwW5qYT2zdJBbXKmQUG3lcc=\ngithub.com/go-openapi/loads v0.20.2/go.mod h1:hTVUotJ+UonAMMZsvakEgmWKgtulweO9vYP2bQYKA/o=\ngithub.com/go-openapi/runtime v0.0.0-20180920151709-4f900dc2ade9/go.mod h1:6v9a6LTXWQCdL8k1AO3cvqx5OtZY/Y9wKTgaoP6YRfA=\ngithub.com/go-openapi/runtime v0.19.0/go.mod h1:OwNfisksmmaZse4+gpV3Ne9AyMOlP1lt4sK4FXt0O64=\ngithub.com/go-openapi/runtime v0.19.4/go.mod h1:X277bwSUBxVlCYR3r7xgZZGKVvBd/29gLDlFGtJ8NL4=\ngithub.com/go-openapi/runtime v0.19.15/go.mod h1:dhGWCTKRXlAfGnQG0ONViOZpjfg0m2gUt9nTQPQZuoo=\ngithub.com/go-openapi/runtime v0.19.16/go.mod h1:5P9104EJgYcizotuXhEuUrzVc+j1RiSjahULvYmlv98=\ngithub.com/go-openapi/runtime v0.19.24 h1:TqagMVlRAOTwllE/7hNKx6rQ10O6T8ZzeJdMjSTKaD4=\ngithub.com/go-openapi/runtime v0.19.24/go.mod h1:Lm9YGCeecBnUUkFTxPC4s1+lwrkJ0pthx8YvyjCfkgk=\ngithub.com/go-openapi/spec v0.0.0-20160808142527-6aced65f8501/go.mod h1:J8+jY1nAiCcj+friV/PDoE1/3eeccG9LYBs0tYvLOWc=\ngithub.com/go-openapi/spec v0.17.0/go.mod h1:XkF/MOi14NmjsfZ8VtAKf8pIlbZzyoTvZsdfssdxcBI=\ngithub.com/go-openapi/spec v0.18.0/go.mod h1:XkF/MOi14NmjsfZ8VtAKf8pIlbZzyoTvZsdfssdxcBI=\ngithub.com/go-openapi/spec v0.19.2/go.mod h1:sCxk3jxKgioEJikev4fgkNmwS+3kuYdJtcsZsD5zxMY=\ngithub.com/go-openapi/spec v0.19.3/go.mod h1:FpwSN1ksY1eteniUU7X0N/BgJ7a4WvBFVA8Lj9mJglo=\ngithub.com/go-openapi/spec v0.19.5/go.mod h1:Hm2Jr4jv8G1ciIAo+frC/Ft+rR2kQDh8JHKHb3gWUSk=\ngithub.com/go-openapi/spec v0.19.6/go.mod h1:Hm2Jr4jv8G1ciIAo+frC/Ft+rR2kQDh8JHKHb3gWUSk=\ngithub.com/go-openapi/spec v0.19.8/go.mod h1:Hm2Jr4jv8G1ciIAo+frC/Ft+rR2kQDh8JHKHb3gWUSk=\ngithub.com/go-openapi/spec v0.19.15/go.mod h1:+81FIL1JwC5P3/Iuuozq3pPE9dXdIEGxFutcFKaVbmU=\ngithub.com/go-openapi/spec v0.20.0/go.mod h1:+81FIL1JwC5P3/Iuuozq3pPE9dXdIEGxFutcFKaVbmU=\ngithub.com/go-openapi/spec v0.20.1/go.mod h1:93x7oh+d+FQsmsieroS4cmR3u0p/ywH649a3qwC9OsQ=\ngithub.com/go-openapi/spec v0.20.3 h1:uH9RQ6vdyPSs2pSy9fL8QPspDF2AMIMPtmK5coSSjtQ=\ngithub.com/go-openapi/spec v0.20.3/go.mod h1:gG4F8wdEDN+YPBMVnzE85Rbhf+Th2DTvA9nFPQ5AYEg=\ngithub.com/go-openapi/strfmt v0.17.0/go.mod h1:P82hnJI0CXkErkXi8IKjPbNBM6lV6+5pLP5l494TcyU=\ngithub.com/go-openapi/strfmt v0.18.0/go.mod h1:P82hnJI0CXkErkXi8IKjPbNBM6lV6+5pLP5l494TcyU=\ngithub.com/go-openapi/strfmt v0.19.0/go.mod h1:+uW+93UVvGGq2qGaZxdDeJqSAqBqBdl+ZPMF/cC8nDY=\ngithub.com/go-openapi/strfmt v0.19.2/go.mod h1:0yX7dbo8mKIvc3XSKp7MNfxw4JytCfCD6+bY1AVL9LU=\ngithub.com/go-openapi/strfmt v0.19.3/go.mod h1:0yX7dbo8mKIvc3XSKp7MNfxw4JytCfCD6+bY1AVL9LU=\ngithub.com/go-openapi/strfmt v0.19.4/go.mod h1:eftuHTlB/dI8Uq8JJOyRlieZf+WkkxUuk0dgdHXr2Qk=\ngithub.com/go-openapi/strfmt v0.19.5/go.mod h1:eftuHTlB/dI8Uq8JJOyRlieZf+WkkxUuk0dgdHXr2Qk=\ngithub.com/go-openapi/strfmt v0.19.11/go.mod h1:UukAYgTaQfqJuAFlNxxMWNvMYiwiXtLsF2VwmoFtbtc=\ngithub.com/go-openapi/strfmt v0.20.0 h1:l2omNtmNbMc39IGptl9BuXBEKcZfS8zjrTsPKTiJiDM=\ngithub.com/go-openapi/strfmt v0.20.0/go.mod h1:UukAYgTaQfqJuAFlNxxMWNvMYiwiXtLsF2VwmoFtbtc=\ngithub.com/go-openapi/swag v0.0.0-20160704191624-1d0bd113de87/go.mod h1:DXUve3Dpr1UfpPtxFw+EFuQ41HhCWZfha5jSVRG7C7I=\ngithub.com/go-openapi/swag v0.17.0/go.mod h1:AByQ+nYG6gQg71GINrmuDXCPWdL640yX49/kXLo40Tg=\ngithub.com/go-openapi/swag v0.18.0/go.mod h1:AByQ+nYG6gQg71GINrmuDXCPWdL640yX49/kXLo40Tg=\ngithub.com/go-openapi/swag v0.19.2/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=\ngithub.com/go-openapi/swag v0.19.5/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=\ngithub.com/go-openapi/swag v0.19.7/go.mod h1:ao+8BpOPyKdpQz3AOJfbeEVpLmWAvlT1IfTe5McPyhY=\ngithub.com/go-openapi/swag v0.19.9/go.mod h1:ao+8BpOPyKdpQz3AOJfbeEVpLmWAvlT1IfTe5McPyhY=\ngithub.com/go-openapi/swag v0.19.12/go.mod h1:eFdyEBkTdoAf/9RXBvj4cr1nH7GD8Kzo5HTt47gr72M=\ngithub.com/go-openapi/swag v0.19.13/go.mod h1:QYRuS/SOXUCsnplDa677K7+DxSOj6IPNl/eQntq43wQ=\ngithub.com/go-openapi/swag v0.19.14 h1:gm3vOOXfiuw5i9p5N9xJvfjvuofpyvLA9Wr6QfK5Fng=\ngithub.com/go-openapi/swag v0.19.14/go.mod h1:QYRuS/SOXUCsnplDa677K7+DxSOj6IPNl/eQntq43wQ=\ngithub.com/go-openapi/validate v0.18.0/go.mod h1:Uh4HdOzKt19xGIGm1qHf/ofbX1YQ4Y+MYsct2VUrAJ4=\ngithub.com/go-openapi/validate v0.19.2/go.mod h1:1tRCw7m3jtI8eNWEEliiAqUIcBztB2KDnRCRMUi7GTA=\ngithub.com/go-openapi/validate v0.19.3/go.mod h1:90Vh6jjkTn+OT1Eefm0ZixWNFjhtOH7vS9k0lo6zwJo=\ngithub.com/go-openapi/validate v0.19.5/go.mod h1:8DJv2CVJQ6kGNpFW6eV9N3JviE1C85nY1c2z52x1Gk4=\ngithub.com/go-openapi/validate v0.19.10/go.mod h1:RKEZTUWDkxKQxN2jDT7ZnZi2bhZlbNMAuKvKB+IaGx8=\ngithub.com/go-openapi/validate v0.19.12/go.mod h1:Rzou8hA/CBw8donlS6WNEUQupNvUZ0waH08tGe6kAQ4=\ngithub.com/go-openapi/validate v0.19.15/go.mod h1:tbn/fdOwYHgrhPBzidZfJC2MIVvs9GA7monOmWBbeCI=\ngithub.com/go-openapi/validate v0.20.1/go.mod h1:b60iJT+xNNLfaQJUqLI7946tYiFEOuE9E4k54HpKcJ0=\ngithub.com/go-openapi/validate v0.20.2 h1:AhqDegYV3J3iQkMPJSXkvzymHKMTw0BST3RK3hTT4ts=\ngithub.com/go-openapi/validate v0.20.2/go.mod h1:e7OJoKNgd0twXZwIn0A43tHbvIcr/rZIVCbJBpTUoY0=\ngithub.com/go-sql-driver/mysql v1.4.0/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/go-sql-driver/mysql v1.4.1/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/go-sql-driver/mysql v1.5.0 h1:ozyZYNQW3x3HtqT1jira07DN2PArx2v7/mN66gGcHOs=\ngithub.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/go-stack/stack v1.8.0 h1:5SgMzNM5HxrEjV0ww2lTmX6E2Izsfxas4+YHWRs3Lsk=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=\ngithub.com/go-test/deep v1.0.2-0.20181118220953-042da051cf31/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=\ngithub.com/go-toolsmith/astcast v1.0.0/go.mod h1:mt2OdQTeAQcY4DQgPSArJjHCcOwlX+Wl/kwN+LbLGQ4=\ngithub.com/go-toolsmith/astcopy v1.0.0/go.mod h1:vrgyG+5Bxrnz4MZWPF+pI4R8h3qKRjjyvV/DSez4WVQ=\ngithub.com/go-toolsmith/astequal v0.0.0-20180903214952-dcb477bfacd6/go.mod h1:H+xSiq0+LtiDC11+h1G32h7Of5O3CYFJ99GVbS5lDKY=\ngithub.com/go-toolsmith/astequal v1.0.0/go.mod h1:H+xSiq0+LtiDC11+h1G32h7Of5O3CYFJ99GVbS5lDKY=\ngithub.com/go-toolsmith/astfmt v0.0.0-20180903215011-8f8ee99c3086/go.mod h1:mP93XdblcopXwlyN4X4uodxXQhldPGZbcEJIimQHrkg=\ngithub.com/go-toolsmith/astfmt v1.0.0/go.mod h1:cnWmsOAuq4jJY6Ct5YWlVLmcmLMn1JUPuQIHCY7CJDw=\ngithub.com/go-toolsmith/astinfo v0.0.0-20180906194353-9809ff7efb21/go.mod h1:dDStQCHtmZpYOmjRP/8gHHnCCch3Zz3oEgCdZVdtweU=\ngithub.com/go-toolsmith/astp v0.0.0-20180903215135-0af7e3c24f30/go.mod h1:SV2ur98SGypH1UjcPpCatrV5hPazG6+IfNHbkDXBRrk=\ngithub.com/go-toolsmith/astp v1.0.0/go.mod h1:RSyrtpVlfTFGDYRbrjyWP1pYu//tSFcvdYrA8meBmLI=\ngithub.com/go-toolsmith/pkgload v0.0.0-20181119091011-e9e65178eee8/go.mod h1:WoMrjiy4zvdS+Bg6z9jZH82QXwkcgCBX6nOfnmdaHks=\ngithub.com/go-toolsmith/pkgload v1.0.0/go.mod h1:5eFArkbO80v7Z0kdngIxsRXRMTaX4Ilcwuh3clNrQJc=\ngithub.com/go-toolsmith/strparse v1.0.0/go.mod h1:YI2nUKP9YGZnL/L1/DLFBfixrcjslWct4wyljWhSRy8=\ngithub.com/go-toolsmith/typep v1.0.0/go.mod h1:JSQCQMUPdRlMZFswiq3TGpNp1GMktqkR2Ns5AIQkATU=\ngithub.com/go-toolsmith/typep v1.0.2/go.mod h1:JSQCQMUPdRlMZFswiq3TGpNp1GMktqkR2Ns5AIQkATU=\ngithub.com/go-xmlfmt/xmlfmt v0.0.0-20191208150333-d5b6f63a941b/go.mod h1:aUCEOzzezBEjDBbFBoSiya/gduyIiWYRP6CnSFIV8AM=\ngithub.com/gobuffalo/attrs v0.0.0-20190224210810-a9411de4debd/go.mod h1:4duuawTqi2wkkpB4ePgWMaai6/Kc6WEz83bhFwpHzj0=\ngithub.com/gobuffalo/depgen v0.0.0-20190329151759-d478694a28d3/go.mod h1:3STtPUQYuzV0gBVOY3vy6CfMm/ljR4pABfrTeHNLHUY=\ngithub.com/gobuffalo/depgen v0.1.0/go.mod h1:+ifsuy7fhi15RWncXQQKjWS9JPkdah5sZvtHc2RXGlg=\ngithub.com/gobuffalo/envy v1.6.15/go.mod h1:n7DRkBerg/aorDM8kbduw5dN3oXGswK5liaSCx4T5NI=\ngithub.com/gobuffalo/envy v1.7.0/go.mod h1:n7DRkBerg/aorDM8kbduw5dN3oXGswK5liaSCx4T5NI=\ngithub.com/gobuffalo/flect v0.1.0/go.mod h1:d2ehjJqGOH/Kjqcoz+F7jHTBbmDb38yXA598Hb50EGs=\ngithub.com/gobuffalo/flect v0.1.1/go.mod h1:8JCgGVbRjJhVgD6399mQr4fx5rRfGKVzFjbj6RE/9UI=\ngithub.com/gobuffalo/flect v0.1.3/go.mod h1:8JCgGVbRjJhVgD6399mQr4fx5rRfGKVzFjbj6RE/9UI=\ngithub.com/gobuffalo/genny v0.0.0-20190329151137-27723ad26ef9/go.mod h1:rWs4Z12d1Zbf19rlsn0nurr75KqhYp52EAGGxTbBhNk=\ngithub.com/gobuffalo/genny v0.0.0-20190403191548-3ca520ef0d9e/go.mod h1:80lIj3kVJWwOrXWWMRzzdhW3DsrdjILVil/SFKBzF28=\ngithub.com/gobuffalo/genny v0.1.0/go.mod h1:XidbUqzak3lHdS//TPu2OgiFB+51Ur5f7CSnXZ/JDvo=\ngithub.com/gobuffalo/genny v0.1.1/go.mod h1:5TExbEyY48pfunL4QSXxlDOmdsD44RRq4mVZ0Ex28Xk=\ngithub.com/gobuffalo/gitgen v0.0.0-20190315122116-cc086187d211/go.mod h1:vEHJk/E9DmhejeLeNt7UVvlSGv3ziL+djtTr3yyzcOw=\ngithub.com/gobuffalo/gogen v0.0.0-20190315121717-8f38393713f5/go.mod h1:V9QVDIxsgKNZs6L2IYiGR8datgMhB577vzTDqypH360=\ngithub.com/gobuffalo/gogen v0.1.0/go.mod h1:8NTelM5qd8RZ15VjQTFkAW6qOMx5wBbW4dSCS3BY8gg=\ngithub.com/gobuffalo/gogen v0.1.1/go.mod h1:y8iBtmHmGc4qa3urIyo1shvOD8JftTtfcKi+71xfDNE=\ngithub.com/gobuffalo/logger v0.0.0-20190315122211-86e12af44bc2/go.mod h1:QdxcLw541hSGtBnhUc4gaNIXRjiDppFGaDqzbrBd3v8=\ngithub.com/gobuffalo/mapi v1.0.1/go.mod h1:4VAGh89y6rVOvm5A8fKFxYG+wIW6LO1FMTG9hnKStFc=\ngithub.com/gobuffalo/mapi v1.0.2/go.mod h1:4VAGh89y6rVOvm5A8fKFxYG+wIW6LO1FMTG9hnKStFc=\ngithub.com/gobuffalo/packd v0.0.0-20190315124812-a385830c7fc0/go.mod h1:M2Juc+hhDXf/PnmBANFCqx4DM3wRbgDvnVWeG2RIxq4=\ngithub.com/gobuffalo/packd v0.1.0/go.mod h1:M2Juc+hhDXf/PnmBANFCqx4DM3wRbgDvnVWeG2RIxq4=\ngithub.com/gobuffalo/packr/v2 v2.0.9/go.mod h1:emmyGweYTm6Kdper+iywB6YK5YzuKchGtJQZ0Odn4pQ=\ngithub.com/gobuffalo/packr/v2 v2.2.0/go.mod h1:CaAwI0GPIAv+5wKLtv8Afwl+Cm78K/I/VCm/3ptBN+0=\ngithub.com/gobuffalo/syncx v0.0.0-20190224160051-33c29581e754/go.mod h1:HhnNqWY95UYwwW3uSASeV7vtgYkT2t16hJgV3AEPUpw=\ngithub.com/gobwas/glob v0.2.3/go.mod h1:d3Ez4x06l9bZtSvzIay5+Yzi0fmZzPgnTbPcKjJAkT8=\ngithub.com/goccy/go-json v0.4.8/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/goccy/go-json v0.7.8/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/goccy/go-json v0.7.9 h1:mSp3uo1tr6MXQTYopSNhHTUnJhd2zQ4Yk+HdJZP+ZRY=\ngithub.com/goccy/go-json v0.7.9/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gofrs/flock v0.0.0-20190320160742-5135e617513b/go.mod h1:F1TvTiK9OcQqauNUHlbJvyl9Qa1QvF/gOUDKA14jxHU=\ngithub.com/gofrs/uuid v3.2.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/gogo/googleapis v1.1.0/go.mod h1:gf4bu3Q80BeJ6H1S1vYPm8/ELATdvryBaNFGgqEef3s=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.2.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=\ngithub.com/gogo/protobuf v1.2.2-0.20190723190241-65acae22fc9d/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang-jwt/jwt v3.2.1+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\ngithub.com/golang-jwt/jwt/v4 v4.1.0 h1:XUgk2Ex5veyVFVeLm0xhusUTQybEbexJXrvPNOKkSY0=\ngithub.com/golang-jwt/jwt/v4 v4.1.0/go.mod h1:/xlHOz8bRuivTWchD4jCa+NbatV+wEUSzwAxVc6locg=\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20160516000752-02826c3e7903/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20190129154638-5b532d6fd5ef/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e h1:1r7pUrabqp18hOBcwBwiTsbnFeTZHV9eER/QT5JVZxY=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=\ngithub.com/golang/mock v1.4.0/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.1/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.3/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.4/go.mod h1:l3mdAwkq5BuhzHwde/uurv3sEJeZMXNpwsxVWU71h+4=\ngithub.com/golang/mock v1.5.0/go.mod h1:CWnOUgYIOo4TcNZ0wHX3YZCqsaM1I1Jvs6v3mP3KVu8=\ngithub.com/golang/mock v1.6.0/go.mod h1:p6yTPP+5HYm5mzsMV8JkE6ZKdX+/wYM6Hr+LicevLPs=\ngithub.com/golang/protobuf v0.0.0-20161109072736-4bd1920723d7/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.1.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.4/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.1/go.mod h1:DopwsBzvsk0Fs44TXzsVbJyPhcCPeIwnvohx4u74HPM=\ngithub.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/snappy v0.0.0-20180518054509-2e65f85255db/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/golang/snappy v0.0.3 h1:fHPg5GQYlCeLIPB9BZqMVR5nR9A+IM5zcgeTdjMYmLA=\ngithub.com/golang/snappy v0.0.3/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/golangci/check v0.0.0-20180506172741-cfe4005ccda2/go.mod h1:k9Qvh+8juN+UKMCS/3jFtGICgW8O96FVaZsaxdzDkR4=\ngithub.com/golangci/dupl v0.0.0-20180902072040-3e9179ac440a/go.mod h1:ryS0uhF+x9jgbj/N71xsEqODy9BN81/GonCZiOzirOk=\ngithub.com/golangci/errcheck v0.0.0-20181223084120-ef45e06d44b6/go.mod h1:DbHgvLiFKX1Sh2T1w8Q/h4NAI8MHIpzCdnBUDTXU3I0=\ngithub.com/golangci/go-misc v0.0.0-20180628070357-927a3d87b613/go.mod h1:SyvUF2NxV+sN8upjjeVYr5W7tyxaT1JVtvhKhOn2ii8=\ngithub.com/golangci/goconst v0.0.0-20180610141641-041c5f2b40f3/go.mod h1:JXrF4TWy4tXYn62/9x8Wm/K/dm06p8tCKwFRDPZG/1o=\ngithub.com/golangci/gocyclo v0.0.0-20180528134321-2becd97e67ee/go.mod h1:ozx7R9SIwqmqf5pRP90DhR2Oay2UIjGuKheCBCNwAYU=\ngithub.com/golangci/gocyclo v0.0.0-20180528144436-0a533e8fa43d/go.mod h1:ozx7R9SIwqmqf5pRP90DhR2Oay2UIjGuKheCBCNwAYU=\ngithub.com/golangci/gofmt v0.0.0-20190930125516-244bba706f1a/go.mod h1:9qCChq59u/eW8im404Q2WWTrnBUQKjpNYKMbU4M7EFU=\ngithub.com/golangci/golangci-lint v1.23.7/go.mod h1:g/38bxfhp4rI7zeWSxcdIeHTQGS58TCak8FYcyCmavQ=\ngithub.com/golangci/golangci-lint v1.27.0/go.mod h1:+eZALfxIuthdrHPtfM7w/R3POJLjHDfJJw8XZl9xOng=\ngithub.com/golangci/ineffassign v0.0.0-20190609212857-42439a7714cc/go.mod h1:e5tpTHCfVze+7EpLEozzMB3eafxo2KT5veNg1k6byQU=\ngithub.com/golangci/lint-1 v0.0.0-20191013205115-297bf364a8e0/go.mod h1:66R6K6P6VWk9I95jvqGxkqJxVWGFy9XlDwLwVz1RCFg=\ngithub.com/golangci/maligned v0.0.0-20180506175553-b1d89398deca/go.mod h1:tvlJhZqDe4LMs4ZHD0oMUlt9G2LWuDGoisJTBzLMV9o=\ngithub.com/golangci/misspell v0.0.0-20180809174111-950f5d19e770/go.mod h1:dEbvlSfYbMQDtrpRMQU675gSDLDNa8sCPPChZ7PhiVA=\ngithub.com/golangci/misspell v0.3.5/go.mod h1:dEbvlSfYbMQDtrpRMQU675gSDLDNa8sCPPChZ7PhiVA=\ngithub.com/golangci/prealloc v0.0.0-20180630174525-215b22d4de21/go.mod h1:tf5+bzsHdTM0bsB7+8mt0GUMvjCgwLpTapNZHU8AajI=\ngithub.com/golangci/revgrep v0.0.0-20180526074752-d9c87f5ffaf0/go.mod h1:qOQCunEYvmd/TLamH+7LlVccLvUH5kZNhbCgTHoBbp4=\ngithub.com/golangci/revgrep v0.0.0-20180812185044-276a5c0a1039/go.mod h1:qOQCunEYvmd/TLamH+7LlVccLvUH5kZNhbCgTHoBbp4=\ngithub.com/golangci/unconvert v0.0.0-20180507085042-28b1c447d1f4/go.mod h1:Izgrg8RkN3rCIMLGE9CyYmU9pY2Jer6DgANEnZ/L/cQ=\ngithub.com/gomodule/redigo v1.8.5 h1:nRAxCa+SVsyjSBrtZmG/cqb6VbTmuRzpg/PoTFlpumc=\ngithub.com/gomodule/redigo v1.8.5/go.mod h1:P9dn9mFrCBvWhGE1wpxx6fgq7BAeLBk+UUUzlpkBYO0=\ngithub.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.4.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6 h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-containerregistry v0.1.2/go.mod h1:GPivBPgdAyd2SU+vf6EpsgOtWDuPqjW0hJZt4rNdTZ4=\ngithub.com/google/go-github/v28 v28.1.1/go.mod h1:bsqJWQX05omyWVmc00nEUql9mhQyv38lDZ8kPZcQVoM=\ngithub.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=\ngithub.com/google/go-replayers/grpcreplay v0.1.0/go.mod h1:8Ig2Idjpr6gifRd6pNVggX6TC1Zw6Jx74AKp7QNH2QE=\ngithub.com/google/go-replayers/httpreplay v0.1.0/go.mod h1:YKZViNhiGgqdBlUbI2MwGpq4pXxNmhJLPHQ7cv2b5no=\ngithub.com/google/gofuzz v0.0.0-20161122191042-44d81051d367/go.mod h1:HP5RmnzzSNb993RKQDq4+1A4ia9nllfqcQFTQJedwGI=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/gofuzz v1.1.0 h1:Hsa8mG0dQ46ij8Sl2AYJDUv1oA9/d6Vk+3LG99Oe02g=\ngithub.com/google/gofuzz v1.1.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/martian v2.1.1-0.20190517191504-25dcb96d9e51+incompatible h1:xmapqc1AyLoB+ddYT6r04bD9lIjlOqGaREovi0SzFaE=\ngithub.com/google/martian v2.1.1-0.20190517191504-25dcb96d9e51+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/martian/v3 v3.0.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=\ngithub.com/google/martian/v3 v3.1.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=\ngithub.com/google/martian/v3 v3.2.1 h1:d8MncMlErDFTwQGBK1xhv026j9kqhvw1Qv9IbWT1VLQ=\ngithub.com/google/martian/v3 v3.2.1/go.mod h1:oBOf6HBosgwRXnUGWUB05QECsc6uvmMiJ3+6W4l/CUk=\ngithub.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20191218002539-d4f498aebedc/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200212024743-f11f1df84d12/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200229191704-1ebb73c60ed3/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200430221834-fc25d7d30c6d/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200507031123-427632fa3b1c/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200708004538-1a94d8640e99/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20201023163331-3e6fc7fc9c4c/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20201203190320-1bf35d6f28c2/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210122040257-d980be63207e/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210226084205-cbba55b83ad5/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210601050228-01bbb1931b22/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210609004039-a478d1d731e9/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210720184732-4bb14d4b1be1/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/rpmpack v0.0.0-20191226140753-aa36bfddb3a0/go.mod h1:RaTPr0KUf2K7fnZYLNDrr8rxAamWs3iNywJLtQ2AzBg=\ngithub.com/google/subcommands v1.0.1/go.mod h1:ZjhPrFU+Olkh9WazFPsl27BQ4UPiG37m3yTrtFlrHVk=\ngithub.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=\ngithub.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/wire v0.3.0/go.mod h1:i1DMg/Lu8Sz5yYl25iOdmc5CT5qusaa+zmRWs16741s=\ngithub.com/google/wire v0.4.0/go.mod h1:ngWDr9Qvq3yZA10YrxfyGELY/AFWGVpy9c1LTRi1EoU=\ngithub.com/googleapis/gax-go v2.0.2+incompatible h1:silFMLAnr330+NRuag/VjIGF7TLp/LBrV2CJKFLWEww=\ngithub.com/googleapis/gax-go v2.0.2+incompatible/go.mod h1:SFVmujtThgffbyetf+mdk2eWhX2bMyUtNHzFKcPA9HY=\ngithub.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=\ngithub.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=\ngithub.com/googleapis/gax-go/v2 v2.1.0/go.mod h1:Q3nei7sK6ybPYH7twZdmQpAd1MKb7pfu6SK+H1/DsU0=\ngithub.com/googleapis/gax-go/v2 v2.1.1 h1:dp3bWCh+PPO1zjRRiCSczJav13sBvG4UhNyVTa1KqdU=\ngithub.com/googleapis/gax-go/v2 v2.1.1/go.mod h1:hddJymUZASv3XPyGkUpKj8pPO47Rmb0eJc8R6ouapiM=\ngithub.com/googleapis/gnostic v0.0.0-20170729233727-0c5108395e2d/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=\ngithub.com/googleapis/gnostic v0.1.0/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=\ngithub.com/googleapis/gnostic v0.2.0/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=\ngithub.com/googleapis/gnostic v0.2.2/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=\ngithub.com/googleapis/gnostic v0.4.1/go.mod h1:LRhVm6pbyptWbWbuZ38d1eyptfvIytN3ir6b65WBswg=\ngithub.com/googleapis/gnostic v0.5.1 h1:A8Yhf6EtqTv9RMsU6MQTyrtV1TjWlR6xU9BsZIwuTCM=\ngithub.com/googleapis/gnostic v0.5.1/go.mod h1:6U4PtQXGIEt/Z3h5MAT7FNofLnw9vXk2cUuW7uA/OeU=\ngithub.com/gookit/color v1.2.4/go.mod h1:AhIE+pS6D4Ql0SQWbBeXPHw7gY0/sjHoA4s/n1KB7xg=\ngithub.com/gophercloud/gophercloud v0.1.0/go.mod h1:vxM41WHh5uqHVBMZHzuwNOHh8XEoIEcSTewFxm1c5g8=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gopherjs/gopherjs v0.0.0-20190328170749-bb2674552d8f/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/goreleaser/goreleaser v0.136.0/go.mod h1:wiKrPUeSNh6Wu8nUHxZydSOVQ/OZvOaO7DTtFqie904=\ngithub.com/goreleaser/nfpm v1.2.1/go.mod h1:TtWrABZozuLOttX2uDlYyECfQX7x5XYkVxhjYcR6G9w=\ngithub.com/goreleaser/nfpm v1.3.0/go.mod h1:w0p7Kc9TAUgWMyrub63ex3M2Mgw88M4GZXoTq5UCb40=\ngithub.com/gorilla/context v1.1.1/go.mod h1:kBGZzfjB9CEq2AlWe17Uuf7NDRt0dE0s8S51q0aT7Yg=\ngithub.com/gorilla/mux v1.6.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gorilla/mux v1.7.3/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/gorilla/securecookie v1.1.1 h1:miw7JPhV+b/lAHSXz4qd/nN9jRiAFV5FwjeKyCS8BvQ=\ngithub.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=\ngithub.com/gorilla/sessions v1.2.0/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\ngithub.com/gorilla/sessions v1.2.1 h1:DHd3rPN5lE3Ts3D8rKkQ8x/0kqfeNmBAaiSi+o7FsgI=\ngithub.com/gorilla/sessions v1.2.1/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\ngithub.com/gorilla/websocket v0.0.0-20170926233335-4201258b820c/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=\ngithub.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=\ngithub.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\ngithub.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/gostaticanalysis/analysisutil v0.0.0-20190318220348-4088753ea4d3/go.mod h1:eEOZF4jCKGi+aprrirO9e7WKB3beBRtWgqGunKl6pKE=\ngithub.com/gostaticanalysis/analysisutil v0.0.3/go.mod h1:eEOZF4jCKGi+aprrirO9e7WKB3beBRtWgqGunKl6pKE=\ngithub.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=\ngithub.com/grpc-ecosystem/go-grpc-middleware v1.0.0/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=\ngithub.com/grpc-ecosystem/go-grpc-middleware v1.0.1-0.20190118093823-f849b5445de4/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=\ngithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=\ngithub.com/grpc-ecosystem/grpc-gateway v1.8.5/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/grpc-ecosystem/grpc-gateway v1.9.0/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/grpc-ecosystem/grpc-gateway v1.9.2/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/grpc-ecosystem/grpc-gateway v1.9.5/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=\ngithub.com/hashicorp/consul/api v1.1.0/go.mod h1:VmuI/Lkw1nC05EYQWNKwWGbkg+FbDBtguAZLlVdkD9Q=\ngithub.com/hashicorp/consul/api v1.3.0/go.mod h1:MmDNSzIMUjNpY/mQ398R4bk2FnqQLoPndWW5VkKPlCE=\ngithub.com/hashicorp/consul/sdk v0.1.1/go.mod h1:VKf9jXwCTEY1QZP2MOLRhb5i/I/ssyNV1vwHyQBF0x8=\ngithub.com/hashicorp/consul/sdk v0.3.0/go.mod h1:VKf9jXwCTEY1QZP2MOLRhb5i/I/ssyNV1vwHyQBF0x8=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-cleanhttp v0.5.1/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-hclog v0.0.0-20180709165350-ff2cf002a8dd/go.mod h1:9bjs9uLqI8l75knNv3lV1kA55veR+WUPSiKIWcQHudI=\ngithub.com/hashicorp/go-hclog v0.8.0/go.mod h1:5CU+agLiy3J7N7QjHK5d05KxGsuXiQLrjA0H7acj2lQ=\ngithub.com/hashicorp/go-hclog v0.9.1/go.mod h1:5CU+agLiy3J7N7QjHK5d05KxGsuXiQLrjA0H7acj2lQ=\ngithub.com/hashicorp/go-hclog v0.9.2/go.mod h1:5CU+agLiy3J7N7QjHK5d05KxGsuXiQLrjA0H7acj2lQ=\ngithub.com/hashicorp/go-hclog v0.14.1 h1:nQcJDQwIAGnmoUWp8ubocEX40cCml/17YkF6csQLReU=\ngithub.com/hashicorp/go-hclog v0.14.1/go.mod h1:whpDNt7SSdeAju8AWKIWsul05p54N/39EeqMAyrmvFQ=\ngithub.com/hashicorp/go-immutable-radix v1.0.0 h1:AKDB1HM5PWEA7i4nhcpwOrO2byshxBjXVn/J/3+z5/0=\ngithub.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-msgpack v0.5.3/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=\ngithub.com/hashicorp/go-msgpack v0.5.5/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=\ngithub.com/hashicorp/go-msgpack v1.1.5 h1:9byZdVjKTe5mce63pRVNP1L7UAmdHOTEMGehn6KvJWs=\ngithub.com/hashicorp/go-msgpack v1.1.5/go.mod h1:gWVc3sv/wbDmR3rQsj1CAktEZzoz1YNK9NfGLXJ69/4=\ngithub.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/hashicorp/go-plugin v1.0.1/go.mod h1:++UyYGoz3o5w9ZzAdZxtQKrWWP+iqPBn3cQptSMzBuY=\ngithub.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=\ngithub.com/hashicorp/go-retryablehttp v0.5.4/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=\ngithub.com/hashicorp/go-retryablehttp v0.6.4/go.mod h1:vAew36LZh98gCBJNLH42IQ1ER/9wtLZZ8meHqQvEYWY=\ngithub.com/hashicorp/go-retryablehttp v0.6.6/go.mod h1:vAew36LZh98gCBJNLH42IQ1ER/9wtLZZ8meHqQvEYWY=\ngithub.com/hashicorp/go-rootcerts v1.0.0/go.mod h1:K6zTfqpRlCUIjkwsN4Z+hiSfzSTQa6eBIzfwKfwNnHU=\ngithub.com/hashicorp/go-rootcerts v1.0.1/go.mod h1:pqUvnprVnM5bf7AOirdbb01K4ccR319Vf4pU3K5EGc8=\ngithub.com/hashicorp/go-sockaddr v1.0.0/go.mod h1:7Xibr9yA9JjQq1JpNB2Vw7kxv8xerXegt+ozgdvDeDU=\ngithub.com/hashicorp/go-sockaddr v1.0.2/go.mod h1:rB4wwRAUzs07qva3c5SdrY/NEtAUjGlgmH/UkBUC97A=\ngithub.com/hashicorp/go-syslog v1.0.0/go.mod h1:qPfqrKkXGihmCqbJM2mZgkZGvKG1dFdvsLplgctolz4=\ngithub.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.1/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.2 h1:cfejS+Tpcp13yd5nYHWDI6qVCny6wyX2Mt5SGur2IGE=\ngithub.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-version v1.1.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/go-version v1.2.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/go-version v1.3.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/go.net v0.0.1/go.mod h1:hjKkEWcCURg++eb33jQU7oqQcI9XDCnUzHA0oac0k90=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.3/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=\ngithub.com/hashicorp/mdns v1.0.0/go.mod h1:tL+uN++7HEJ6SQLQ2/p+z2pH24WQKWjBPkE0mNTz8vQ=\ngithub.com/hashicorp/memberlist v0.1.3/go.mod h1:ajVTdAv/9Im8oMAAj5G31PhhMCZJV2pPBoIllUwCN7I=\ngithub.com/hashicorp/raft v1.2.0 h1:mHzHIrF0S91d3A7RPBvuqkgB4d/7oFJZyvf1Q4m7GA0=\ngithub.com/hashicorp/raft v1.2.0/go.mod h1:vPAJM8Asw6u8LxC3eJCUZmRP/E4QmUGE1R7g7k8sG/8=\ngithub.com/hashicorp/raft-boltdb v0.0.0-20171010151810-6e5ba93211ea/go.mod h1:pNv7Wc3ycL6F5oOWn+tPGo2gWD4a5X+yp/ntwdKLjRk=\ngithub.com/hashicorp/serf v0.8.2/go.mod h1:6hOLApaqBFA1NXqRQAsxw9QxuDEvNxSQRwA/JwenrHc=\ngithub.com/hashicorp/vault/api v1.0.4/go.mod h1:gDcqh3WGcR1cpF5AJz/B1UFheUEneMoIospckxBxk6Q=\ngithub.com/hashicorp/vault/sdk v0.1.13/go.mod h1:B+hVj7TpuQY1Y/GPbCpffmgd+tSEwvhkWnjtSYCaS2M=\ngithub.com/hashicorp/yamux v0.0.0-20180604194846-3520598351bb/go.mod h1:+NfK9FKeTrX5uv1uIXGdwYDTeHna2qgaIlx54MXqjAM=\ngithub.com/hashicorp/yamux v0.0.0-20181012175058-2f1d1f20f75d/go.mod h1:+NfK9FKeTrX5uv1uIXGdwYDTeHna2qgaIlx54MXqjAM=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/hudl/fargo v1.3.0/go.mod h1:y3CKSmjA+wD2gak7sUSXTAoopbhU08POFhmITJgmKTg=\ngithub.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/imdario/mergo v0.3.5/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/imdario/mergo v0.3.7/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/imdario/mergo v0.3.8/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/imdario/mergo v0.3.9/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/imdario/mergo v0.3.10/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=\ngithub.com/inconshreveable/mousetrap v1.0.0 h1:Z8tu5sraLXCXIcARxBp/8cbvlwVa7Z1NHg9XEKhtSvM=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/influxdata/influxdb1-client v0.0.0-20191209144304-8bf82d3c094d/go.mod h1:qj24IKcXYK6Iy9ceXlo3Tc+vtHo9lIhSX5JddghvEPo=\ngithub.com/jackc/chunkreader v1.0.0 h1:4s39bBR8ByfqH+DKm8rQA3E1LHZWB9XWcrz8fqaZbe0=\ngithub.com/jackc/chunkreader v1.0.0/go.mod h1:RT6O25fNZIuasFJRyZ4R/Y2BbhasbmZXF9QQ7T3kePo=\ngithub.com/jackc/chunkreader/v2 v2.0.0/go.mod h1:odVSm741yZoC3dpHEUXIqA9tQRhFrgOHwnPIn9lDKlk=\ngithub.com/jackc/chunkreader/v2 v2.0.1 h1:i+RDz65UE+mmpjTfyz0MoVTnzeYxroil2G82ki7MGG8=\ngithub.com/jackc/chunkreader/v2 v2.0.1/go.mod h1:odVSm741yZoC3dpHEUXIqA9tQRhFrgOHwnPIn9lDKlk=\ngithub.com/jackc/pgconn v0.0.0-20190420214824-7e0022ef6ba3/go.mod h1:jkELnwuX+w9qN5YIfX0fl88Ehu4XC3keFuOJJk9pcnA=\ngithub.com/jackc/pgconn v0.0.0-20190824142844-760dd75542eb/go.mod h1:lLjNuW/+OfW9/pnVKPazfWOgNfH2aPem8YQ7ilXGvJE=\ngithub.com/jackc/pgconn v0.0.0-20190831204454-2fabfa3c18b7/go.mod h1:ZJKsE/KZfsUgOEh9hBm+xYTstcNHg7UPMVJqRfQxq4s=\ngithub.com/jackc/pgconn v1.4.0/go.mod h1:Y2O3ZDF0q4mMacyWV3AstPJpeHXWGEetiFttmq5lahk=\ngithub.com/jackc/pgconn v1.5.0/go.mod h1:QeD3lBfpTFe8WUnPZWN5KY/mB8FGMIYRdd8P8Jr0fAI=\ngithub.com/jackc/pgconn v1.5.1-0.20200601181101-fa742c524853/go.mod h1:QeD3lBfpTFe8WUnPZWN5KY/mB8FGMIYRdd8P8Jr0fAI=\ngithub.com/jackc/pgconn v1.7.0 h1:pwjzcYyfmz/HQOQlENvG1OcDqauTGaqlVahq934F0/U=\ngithub.com/jackc/pgconn v1.7.0/go.mod h1:sF/lPpNEMEOp+IYhyQGdAvrG20gWf6A1tKlr0v7JMeA=\ngithub.com/jackc/pgio v1.0.0 h1:g12B9UwVnzGhueNavwioyEEpAmqMe1E/BN9ES+8ovkE=\ngithub.com/jackc/pgio v1.0.0/go.mod h1:oP+2QK2wFfUWgr+gxjoBH9KGBb31Eio69xUb0w5bYf8=\ngithub.com/jackc/pgmock v0.0.0-20190831213851-13a1b77aafa2/go.mod h1:fGZlG77KXmcq05nJLRkk0+p82V8B8Dw8KN2/V9c/OAE=\ngithub.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=\ngithub.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=\ngithub.com/jackc/pgproto3 v1.1.0 h1:FYYE4yRw+AgI8wXIinMlNjBbp/UitDJwfj5LqqewP1A=\ngithub.com/jackc/pgproto3 v1.1.0/go.mod h1:eR5FA3leWg7p9aeAqi37XOTgTIbkABlvcPB3E5rlc78=\ngithub.com/jackc/pgproto3/v2 v2.0.0-alpha1.0.20190420180111-c116219b62db/go.mod h1:bhq50y+xrl9n5mRYyCBFKkpRVTLYJVWeCc+mEAI3yXA=\ngithub.com/jackc/pgproto3/v2 v2.0.0-alpha1.0.20190609003834-432c2951c711/go.mod h1:uH0AWtUmuShn0bcesswc4aBTWGvw0cAxIJp+6OB//Wg=\ngithub.com/jackc/pgproto3/v2 v2.0.0-rc3/go.mod h1:ryONWYqW6dqSg1Lw6vXNMXoBJhpzvWKnT95C46ckYeM=\ngithub.com/jackc/pgproto3/v2 v2.0.0-rc3.0.20190831210041-4c03ce451f29/go.mod h1:ryONWYqW6dqSg1Lw6vXNMXoBJhpzvWKnT95C46ckYeM=\ngithub.com/jackc/pgproto3/v2 v2.0.1/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgproto3/v2 v2.0.5 h1:NUbEWPmCQZbMmYlTjVoNPhc0CfnYyz2bfUAh6A5ZVJM=\ngithub.com/jackc/pgproto3/v2 v2.0.5/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgservicefile v0.0.0-20200307190119-3430c5407db8/go.mod h1:vsD4gTJCa9TptPL8sPkXrLZ+hDuNrZCnj29CQpr4X1E=\ngithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b h1:C8S2+VttkHFdOOCXJe+YGfa4vHYwlt4Zx+IVXQ97jYg=\ngithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b/go.mod h1:vsD4gTJCa9TptPL8sPkXrLZ+hDuNrZCnj29CQpr4X1E=\ngithub.com/jackc/pgtype v0.0.0-20190421001408-4ed0de4755e0/go.mod h1:hdSHsc1V01CGwFsrv11mJRHWJ6aifDLfdV3aVjFF0zg=\ngithub.com/jackc/pgtype v0.0.0-20190824184912-ab885b375b90/go.mod h1:KcahbBH1nCMSo2DXpzsoWOAfFkdEtEJpPbVLq8eE+mc=\ngithub.com/jackc/pgtype v0.0.0-20190828014616-a8802b16cc59/go.mod h1:MWlu30kVJrUS8lot6TQqcg7mtthZ9T0EoIBFiJcmcyw=\ngithub.com/jackc/pgtype v1.2.0/go.mod h1:5m2OfMh1wTK7x+Fk952IDmI4nw3nPrvtQdM0ZT4WpC0=\ngithub.com/jackc/pgtype v1.3.0/go.mod h1:b0JqxHvPmljG+HQ5IsvQ0yqeSi4nGcDTVjFoiLDb0Ik=\ngithub.com/jackc/pgtype v1.3.1-0.20200510190516-8cd94a14c75a/go.mod h1:vaogEUkALtxZMCH411K+tKzNpwzCKU+AnPzBKZ+I+Po=\ngithub.com/jackc/pgtype v1.3.1-0.20200606141011-f6355165a91c/go.mod h1:cvk9Bgu/VzJ9/lxTO5R5sf80p0DiucVtN7ZxvaC4GmQ=\ngithub.com/jackc/pgtype v1.3.1-0.20200612023650-09efc3839047/go.mod h1:JCULISAZBFGrHaOXIIFiyfzW5VY0GRitRr8NeJsrdig=\ngithub.com/jackc/pgtype v1.5.0 h1:jzBqRk2HFG2CV4AIwgCI2PwTgm6UUoCAK2ofHHRirtc=\ngithub.com/jackc/pgtype v1.5.0/go.mod h1:JCULISAZBFGrHaOXIIFiyfzW5VY0GRitRr8NeJsrdig=\ngithub.com/jackc/pgx v3.6.2+incompatible h1:2zP5OD7kiyR3xzRYMhOcXVvkDZsImVXfj+yIyTQf3/o=\ngithub.com/jackc/pgx v3.6.2+incompatible/go.mod h1:0ZGrqGqkRlliWnWB4zKnWtjbSWbGkVEFm4TeybAXq+I=\ngithub.com/jackc/pgx/v4 v4.0.0-20190420224344-cc3461e65d96/go.mod h1:mdxmSJJuR08CZQyj1PVQBHy9XOp5p8/SHH6a0psbY9Y=\ngithub.com/jackc/pgx/v4 v4.0.0-20190421002000-1b8f0016e912/go.mod h1:no/Y67Jkk/9WuGR0JG/JseM9irFbnEPbuWV2EELPNuM=\ngithub.com/jackc/pgx/v4 v4.0.0-pre1.0.20190824185557-6972a5742186/go.mod h1:X+GQnOEnf1dqHGpw7JmHqHc1NxDoalibchSk9/RWuDc=\ngithub.com/jackc/pgx/v4 v4.5.0/go.mod h1:EpAKPLdnTorwmPUUsqrPxy5fphV18j9q3wrfRXgo+kA=\ngithub.com/jackc/pgx/v4 v4.6.0/go.mod h1:vPh43ZzxijXUVJ+t/EmXBtFmbFVO72cuneCT9oAlxAg=\ngithub.com/jackc/pgx/v4 v4.6.1-0.20200510190926-94ba730bb1e9/go.mod h1:t3/cdRQl6fOLDxqtlyhe9UWgfIi9R8+8v8GKV5TRA/o=\ngithub.com/jackc/pgx/v4 v4.6.1-0.20200606145419-4e5062306904/go.mod h1:ZDaNWkt9sW1JMiNn0kdYBaLelIhw7Pg4qd+Vk6tw7Hg=\ngithub.com/jackc/pgx/v4 v4.9.0 h1:6STjDqppM2ROy5p1wNDcsC7zJTjSHeuCsguZmXyzx7c=\ngithub.com/jackc/pgx/v4 v4.9.0/go.mod h1:MNGWmViCgqbZck9ujOOBN63gK9XVGILXWCvKLGKmnms=\ngithub.com/jackc/puddle v0.0.0-20190413234325-e4ced69a3a2b/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v0.0.0-20190608224051-11cab39313c9/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.1.0/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.1.1/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.1.2 h1:mpQEXihFnWGDy6X98EOTh81JYuxn7txby8ilJ3iIPGM=\ngithub.com/jackc/puddle v1.1.2/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jarcoal/httpmock v1.0.5/go.mod h1:ATjnClrvW/3tijVmpL/va5Z3aAyGvqU3gCT8nX0Txik=\ngithub.com/jcmturner/aescts/v2 v2.0.0 h1:9YKLH6ey7H4eDBXW8khjYslgyqG2xZikXP0EQFKrle8=\ngithub.com/jcmturner/aescts/v2 v2.0.0/go.mod h1:AiaICIRyfYg35RUkr8yESTqvSy7csK90qZ5xfvvsoNs=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0 h1:lltnkeZGL0wILNvrNiVCR6Ro5PGU/SeBvVO/8c/iPbo=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0/go.mod h1:b0TnjGOvI/n42bZa+hmXL+kFJZsFT7G4t3HTlQ184QM=\ngithub.com/jcmturner/gofork v1.0.0 h1:J7uCkflzTEhUZ64xqKnkDxq3kzc96ajM1Gli5ktUem8=\ngithub.com/jcmturner/gofork v1.0.0/go.mod h1:MK8+TM0La+2rjBD4jE12Kj1pCCxK7d2LK/UM3ncEo0o=\ngithub.com/jcmturner/goidentity/v6 v6.0.1 h1:VKnZd2oEIMorCTsFBnJWbExfNN7yZr3EhJAxwOkZg6o=\ngithub.com/jcmturner/goidentity/v6 v6.0.1/go.mod h1:X1YW3bgtvwAXju7V3LCIMpY0Gbxyjn/mY9zx4tFonSg=\ngithub.com/jcmturner/gokrb5/v8 v8.4.1/go.mod h1:T1hnNppQsBtxW0tCHMHTkAt8n/sABdzZgZdoFrZaZNM=\ngithub.com/jcmturner/gokrb5/v8 v8.4.2 h1:6ZIM6b/JJN0X8UM43ZOM6Z4SJzla+a/u7scXFJzodkA=\ngithub.com/jcmturner/gokrb5/v8 v8.4.2/go.mod h1:sb+Xq/fTY5yktf/VxLsE3wlfPqQjp0aWNYyvBVK62bc=\ngithub.com/jcmturner/rpc/v2 v2.0.2/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=\ngithub.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=\ngithub.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=\ngithub.com/jedib0t/go-pretty v4.3.0+incompatible/go.mod h1:XemHduiw8R651AF9Pt4FwCTKeG3oo7hrHJAoznj9nag=\ngithub.com/jedib0t/go-pretty/v6 v6.0.5/go.mod h1:MTr6FgcfNdnN5wPVBzJ6mhJeDyiF0yBvS2TMXEV/XSU=\ngithub.com/jessevdk/go-flags v1.4.0 h1:4IU2WS7AumrZ/40jfhf4QVDMsQwqA7VEHozFRrGARJA=\ngithub.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=\ngithub.com/jingyugao/rowserrcheck v0.0.0-20191204022205-72ab7603b68a/go.mod h1:xRskid8CManxVta/ALEhJha/pweKBaVG6fWgc0yH25s=\ngithub.com/jinzhu/gorm v1.9.12/go.mod h1:vhTjlKSJUTWNtcbQtrMBFCxy7eXTzeCAzfL5fBZT/Qs=\ngithub.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=\ngithub.com/jinzhu/now v1.0.1/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\ngithub.com/jirfag/go-printf-func-name v0.0.0-20191110105641-45db9963cdd3/go.mod h1:HEWGJkRDzjJY2sqdDwxccsGicWEf9BQOZsq2tV+xzM0=\ngithub.com/jirfag/go-printf-func-name v0.0.0-20200119135958-7558a9eaa5af/go.mod h1:HEWGJkRDzjJY2sqdDwxccsGicWEf9BQOZsq2tV+xzM0=\ngithub.com/jmespath/go-jmespath v0.0.0-20160202185014-0b12d6b521d8/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=\ngithub.com/jmespath/go-jmespath v0.0.0-20180206201540-c2b33e8439af/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=\ngithub.com/jmespath/go-jmespath v0.3.0/go.mod h1:9QtRXoHjLGCJ5IBSaohpXITPlowMeeYCZ7fLUTSywik=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/jmoiron/sqlx v1.2.0/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=\ngithub.com/jmoiron/sqlx v1.2.1-0.20190826204134-d7d95172beb5/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=\ngithub.com/joefitzgerald/rainbow-reporter v0.1.0/go.mod h1:481CNgqmVHQZzdIbN52CupLJyoVwB10FQ/IQlF1pdL8=\ngithub.com/joho/godotenv v1.3.0/go.mod h1:7hK45KPybAkOC6peb+G5yklZfMxEjkZhHbwpqxOKXbg=\ngithub.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/jpillora/backoff v0.0.0-20180909062703-3050d21c67d7/go.mod h1:2iMrUgbbvHEiQClaW2NsSzMyGHqN+rDFqY705q49KG0=\ngithub.com/jpillora/backoff v1.0.0/go.mod h1:J/6gKK9jxlEcS3zixgDgUAsiuZ7yrSoa/FX5e0EB2j4=\ngithub.com/json-iterator/go v0.0.0-20180612202835-f2b4162afba3/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.8/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.11/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=\ngithub.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/julienschmidt/httprouter v1.3.0/go.mod h1:JR6WtHb+2LUe8TCKY3cZOxFyyO8IZAc4RVcycCCAKdM=\ngithub.com/karrick/godirwalk v1.8.0/go.mod h1:H5KPZjojv4lE+QYImBI8xVtrBRgYrIVsaRPx4tDPEn4=\ngithub.com/karrick/godirwalk v1.10.3/go.mod h1:RoGL9dQei4vP9ilrpETWE8CLOZ1kiN0LhBygSwrAsHA=\ngithub.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=\ngithub.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/compress v1.4.0/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=\ngithub.com/klauspost/compress v1.4.1/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=\ngithub.com/klauspost/compress v1.9.5/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=\ngithub.com/klauspost/compress v1.11.0/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\ngithub.com/klauspost/compress v1.11.7/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\ngithub.com/klauspost/compress v1.11.12/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\ngithub.com/klauspost/compress v1.12.2/go.mod h1:8dP1Hq4DHOhN9w426knH3Rhby4rFm6D8eO+e+Dq5Gzg=\ngithub.com/klauspost/compress v1.13.5/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=\ngithub.com/klauspost/compress v1.13.6 h1:P76CopJELS0TiO2mebmnzgWaajssP/EszplttgQxcgc=\ngithub.com/klauspost/compress v1.13.6/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=\ngithub.com/klauspost/cpuid v0.0.0-20180405133222-e7e905edc00e/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=\ngithub.com/klauspost/cpuid v1.2.0/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=\ngithub.com/klauspost/cpuid v1.2.3/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=\ngithub.com/klauspost/cpuid v1.3.1 h1:5JNjFYYQrZeKRJ0734q51WCEEn2huer72Dc7K+R/b6s=\ngithub.com/klauspost/cpuid v1.3.1/go.mod h1:bYW4mA6ZgKPob1/Dlai2LviZJO7KGI3uoWLd42rAQw4=\ngithub.com/klauspost/cpuid/v2 v2.0.1/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.0.3/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.0.4/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.0.6/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.0.9 h1:lgaqFMSdTdQYdZ04uHyN2d/eKdOMyi2YLSvlQIBFYa4=\ngithub.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/pgzip v1.2.5 h1:qnWYvvKqedOF2ulHpMG72XQol4ILEJ8k2wwRl/Km8oE=\ngithub.com/klauspost/pgzip v1.2.5/go.mod h1:Ch1tH69qFZu15pkjo5kYi6mth2Zzwzt50oCQKQE9RUs=\ngithub.com/klauspost/readahead v1.3.1 h1:QqXNYvm+VvqYcbrRT4LojUciM0XrznFRIDrbHiJtu/0=\ngithub.com/klauspost/readahead v1.3.1/go.mod h1:AH9juHzNH7xqdqFHrMRSHeH2Ps+vFf+kblDqzPFiLJg=\ngithub.com/klauspost/reedsolomon v1.9.15 h1:g2erWKD2M6rgnPf89fCji6jNlhMKMdXcuNHMW1SYCIo=\ngithub.com/klauspost/reedsolomon v1.9.15/go.mod h1:eqPAcE7xar5CIzcdfwydOEdcmchAKAP/qs14y4GCBOk=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.0/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.2.1 h1:Fmg33tUaq4/8ym9TJN1x7sLJnHVwhP33CNkpYV/7rwI=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/pty v1.1.5/go.mod h1:9r2w37qlBe7rQ6e1fg1S/9xpWHSnaqNdHD3WcMdbPDA=\ngithub.com/kr/pty v1.1.8/go.mod h1:O1sed60cT9XZ5uDucP5qwvh+TE3NnUj51EiZO/lmSfw=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kubernetes-csi/csi-lib-utils v0.7.0/go.mod h1:bze+2G9+cmoHxN6+WyG1qT4MDxgZJMLGwc7V4acPNm0=\ngithub.com/lestrrat-go/backoff/v2 v2.0.7/go.mod h1:rHP/q/r9aT27n24JQLa7JhSQZCKBBOiM/uP402WwN8Y=\ngithub.com/lestrrat-go/backoff/v2 v2.0.8 h1:oNb5E5isby2kiro9AgdHLv5N5tint1AnDVVf2E2un5A=\ngithub.com/lestrrat-go/backoff/v2 v2.0.8/go.mod h1:rHP/q/r9aT27n24JQLa7JhSQZCKBBOiM/uP402WwN8Y=\ngithub.com/lestrrat-go/blackmagic v1.0.0 h1:XzdxDbuQTz0RZZEmdU7cnQxUtFUzgCSPq8RCz4BxIi4=\ngithub.com/lestrrat-go/blackmagic v1.0.0/go.mod h1:TNgH//0vYSs8VXDCfkZLgIrVTTXQELZffUV0tz3MtdQ=\ngithub.com/lestrrat-go/codegen v1.0.0/go.mod h1:JhJw6OQAuPEfVKUCLItpaVLumDGWQznd1VaXrBk9TdM=\ngithub.com/lestrrat-go/codegen v1.0.2/go.mod h1:JhJw6OQAuPEfVKUCLItpaVLumDGWQznd1VaXrBk9TdM=\ngithub.com/lestrrat-go/httpcc v1.0.0 h1:FszVC6cKfDvBKcJv646+lkh4GydQg2Z29scgUfkOpYc=\ngithub.com/lestrrat-go/httpcc v1.0.0/go.mod h1:tGS/u00Vh5N6FHNkExqGGNId8e0Big+++0Gf8MBnAvE=\ngithub.com/lestrrat-go/iter v1.0.1 h1:q8faalr2dY6o8bV45uwrxq12bRa1ezKrB6oM9FUgN4A=\ngithub.com/lestrrat-go/iter v1.0.1/go.mod h1:zIdgO1mRKhn8l9vrZJZz9TUMMFbQbLeTsbqPDrJ/OJc=\ngithub.com/lestrrat-go/jwx v1.2.0/go.mod h1:Tg2uP7bpxEHUDtuWjap/PxroJ4okxGzkQznXiG+a5Dc=\ngithub.com/lestrrat-go/jwx v1.2.7 h1:wO7fEc3PW56wpQBMU5CyRkrk4DVsXxCoJg7oIm5HHE4=\ngithub.com/lestrrat-go/jwx v1.2.7/go.mod h1:bw24IXWbavc0R2RsOtpXL7RtMyP589yZ1+L7kd09ZGA=\ngithub.com/lestrrat-go/option v0.0.0-20210103042652-6f1ecfceda35/go.mod h1:5ZHFbivi4xwXxhxY9XHDe2FHo6/Z7WWmtT7T5nBBp3I=\ngithub.com/lestrrat-go/option v1.0.0 h1:WqAWL8kh8VcSoD6xjSH34/1m8yxluXQbDeKNfvFeEO4=\ngithub.com/lestrrat-go/option v1.0.0/go.mod h1:5ZHFbivi4xwXxhxY9XHDe2FHo6/Z7WWmtT7T5nBBp3I=\ngithub.com/lestrrat-go/pdebug/v3 v3.0.1/go.mod h1:za+m+Ve24yCxTEhR59N7UlnJomWwCiIqbJRmKeiADU4=\ngithub.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.1.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.1.1/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.3.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.4.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.8.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/lib/pq v1.9.0 h1:L8nSXQQzAYByakOFMTwpjRoHsMJklur4Gi59b6VivR8=\ngithub.com/lib/pq v1.9.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/lightstep/lightstep-tracer-common/golang/gogo v0.0.0-20190605223551-bc2310a04743/go.mod h1:qklhhLq1aX+mtWk9cPHPzaBjWImj5ULL6C7HFJtXQMM=\ngithub.com/lightstep/lightstep-tracer-go v0.18.1/go.mod h1:jlF1pusYV4pidLvZ+XD0UBX0ZE6WURAspgAczcDHrL4=\ngithub.com/logrusorgru/aurora v0.0.0-20181002194514-a7b3b318ed4e/go.mod h1:7rIyQOR62GCctdiQpZ/zOJlFyk6y+94wXzv6RNZgaR4=\ngithub.com/lyft/protoc-gen-validate v0.0.13/go.mod h1:XbGvPuh87YZc5TdIa2/I4pLk0QoUACkjt2znoq26NVQ=\ngithub.com/magefile/mage v1.10.0/go.mod h1:z5UZb/iS3GoOSn0JgWuiw7dxlurVYTu+/jHXqQg881A=\ngithub.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/magiconair/properties v1.8.1/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/mailru/easyjson v0.0.0-20160728113105-d5b7844b561a/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.0.0-20180823135443-60711f1a8329/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.0.0-20190312143242-1de009706dbe/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.0.0-20190614124828-94de47d64c63/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.0.0-20190626092158-b2ccc519800e/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.7.0/go.mod h1:KAzv3t3aY1NaHWoQz1+4F1ccyAH66Jk7yos7ldAVICs=\ngithub.com/mailru/easyjson v0.7.1/go.mod h1:KAzv3t3aY1NaHWoQz1+4F1ccyAH66Jk7yos7ldAVICs=\ngithub.com/mailru/easyjson v0.7.6 h1:8yTIVnZgCoiM1TgqoeTl+LfU5Jg6/xL3QhGQnimLYnA=\ngithub.com/mailru/easyjson v0.7.6/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/maratori/testpackage v1.0.1/go.mod h1:ddKdw+XG0Phzhx8BFDTKgpWP4i7MpApTE5fXSKAqwDU=\ngithub.com/markbates/oncer v0.0.0-20181203154359-bf2de49a0be2/go.mod h1:Ld9puTsIW75CHf65OeIOkyKbteujpZVXDpWK6YGZbxE=\ngithub.com/markbates/safe v1.0.1/go.mod h1:nAqgmRi7cY2nqMc92/bSEeQA+R4OheNU2T1kNSCBdG0=\ngithub.com/matoous/godox v0.0.0-20190911065817-5d6d842e92eb/go.mod h1:1BELzlh859Sh1c6+90blK8lbYy0kwQf1bYlBhBysy1s=\ngithub.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=\ngithub.com/mattn/go-colorable v0.1.1/go.mod h1:FuOcm+DKB9mbwrcAfNl7/TZVBZ6rcnceauSikq3lYCQ=\ngithub.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-colorable v0.1.6/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.8/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.10 h1:KWqbp83oZ6YOEgIbNW3BM1Jbe2tz4jgmWA9FOuAF8bw=\ngithub.com/mattn/go-colorable v0.1.10/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-ieproxy v0.0.0-20190610004146-91bb50d98149/go.mod h1:31jz6HNzdxOmlERGGEc4v/dMssOfmp2p5bT/okiKFFc=\ngithub.com/mattn/go-ieproxy v0.0.0-20190702010315-6dee0af9227d/go.mod h1:31jz6HNzdxOmlERGGEc4v/dMssOfmp2p5bT/okiKFFc=\ngithub.com/mattn/go-ieproxy v0.0.1 h1:qiyop7gCflfhwCzGyeT0gro3sF9AIg9HU98JORTkqfI=\ngithub.com/mattn/go-ieproxy v0.0.1/go.mod h1:pYabZ6IHcRpFh7vIaLfK7rdcWgFEb3SFJ6/gNWuh88E=\ngithub.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-isatty v0.0.4/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-isatty v0.0.5/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.7/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.9/go.mod h1:YNRxwqDuOph6SZLI9vUUz6OYw3QyUt7WiY2yME+cCiQ=\ngithub.com/mattn/go-isatty v0.0.10/go.mod h1:qgIWMr58cqv1PHHyhnkY9lrL7etaEgOFcMEpPG5Rm84=\ngithub.com/mattn/go-isatty v0.0.11/go.mod h1:PhnuNfih5lzO57/f3n+odYbM4JtupLOxQOAqxQCu2WE=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-isatty v0.0.13/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw+3Zlu5yQgKGP2/hcQbHb7S9Y=\ngithub.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=\ngithub.com/mattn/go-runewidth v0.0.2/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mattn/go-runewidth v0.0.4/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mattn/go-runewidth v0.0.7/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.13 h1:lTGmDsbAYt5DmK6OnoV7EuIF1wEIFAcxld6ypU4OSgU=\ngithub.com/mattn/go-runewidth v0.0.13/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mattn/go-shellwords v1.0.10/go.mod h1:EZzvwXDESEeg03EKmM+RmDnNOPKG4lLtQsUlTZDWQ8Y=\ngithub.com/mattn/go-sqlite3 v1.9.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/mattn/go-sqlite3 v2.0.1+incompatible/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/mattn/go-zglob v0.0.1/go.mod h1:9fxibJccNxU2cnpIKLRRFA7zX7qhkJIQWBb449FYHOo=\ngithub.com/mattn/goveralls v0.0.2/go.mod h1:8d1ZMHsd7fW6IRPKQh46F2WRpyib5/X4FOpevwGNQEw=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.2-0.20181231171920-c182affec369 h1:I0XW9+e1XWDxdcEniV4rQAIOPUGDq67JSCiRCgGCZLI=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.2-0.20181231171920-c182affec369/go.mod h1:BSXmuO+STAnVfrANrmjBb36TMTDstsz7MSK+HVaYKv4=\ngithub.com/maxbrunsfeld/counterfeiter/v6 v6.2.2/go.mod h1:eD9eIE7cdwcMi9rYluz88Jz2VyhSmden33/aXg4oVIY=\ngithub.com/mb0/glob v0.0.0-20160210091149-1eb79d2de6c4 h1:NK3O7S5FRD/wj7ORQ5C3Mx1STpyEMuFe+/F0Lakd1Nk=\ngithub.com/mb0/glob v0.0.0-20160210091149-1eb79d2de6c4/go.mod h1:FqD3ES5hx6zpzDainDaHgkTIqrPaI9uX4CVWqYZoQjY=\ngithub.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b/go.mod h1:01TrycV0kFyexm33Z7vhZRXopbI8J3TDReVlkTgMUxE=\ngithub.com/miekg/dns v1.0.14/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=\ngithub.com/miekg/dns v1.1.43 h1:JKfpVSCB84vrAmHzyrsxB5NAr5kLoMXZArPSw7Qlgyg=\ngithub.com/miekg/dns v1.1.43/go.mod h1:+evo5L0630/F6ca/Z9+GAqzhjGyn8/c+TBaOyfEl0V4=\ngithub.com/minio/argon2 v1.0.0 h1:cLB/fl0EeBqiDYhsIzIPTdLZhCykRrvdx3Eu3E5oqsE=\ngithub.com/minio/argon2 v1.0.0/go.mod h1:XtOGJ7MjwUJDPtCqqrisx5QwVB/jDx+adQHigJVsQHQ=\ngithub.com/minio/cli v1.22.0 h1:VTQm7lmXm3quxO917X3p+el1l0Ca5X3S4PM2ruUYO68=\ngithub.com/minio/cli v1.22.0/go.mod h1:bYxnK0uS629N3Bq+AOZZ+6lwF77Sodk4+UL9vNuXhOY=\ngithub.com/minio/colorjson v1.0.1 h1:+hvfP8C1iMB95AT+ZFDRE+Knn9QPd9lg0CRJY9DRpos=\ngithub.com/minio/colorjson v1.0.1/go.mod h1:oPM3zQQY8Gz9NGtgvuBEjQ+gPZLKAGc7T+kjMlwtOgs=\ngithub.com/minio/console v0.12.9 h1:7ERcZWRu2sfZ8wR0DAdr0CoBSaRIMnOADlv882MYizc=\ngithub.com/minio/console v0.12.9/go.mod h1:SaJoJB4QCU5+jjSaizwQOXHzN78mrqidyBMa3ULm+wg=\ngithub.com/minio/csvparser v1.0.0 h1:xJEHcYK8ZAjeW4hNV9Zu30u+/2o4UyPnYgyjWp8b7ZU=\ngithub.com/minio/csvparser v1.0.0/go.mod h1:lKXskSLzPgC5WQyzP7maKH7Sl1cqvANXo9YCto8zbtM=\ngithub.com/minio/direct-csi v1.3.5-0.20210601185811-f7776f7961bf h1:wylCc/PdvdTIqYqVNEU9LJAZBanvfGY1TwTnjM3zQaA=\ngithub.com/minio/direct-csi v1.3.5-0.20210601185811-f7776f7961bf/go.mod h1:ryRFbKRDMZ1+kGF5EZwuyfF1a/eAu4c9uxZdF0fnmuY=\ngithub.com/minio/filepath v1.0.0 h1:fvkJu1+6X+ECRA6G3+JJETj4QeAYO9sV43I79H8ubDY=\ngithub.com/minio/filepath v1.0.0/go.mod h1:/nRZA2ldl5z6jT9/KQuvZcQlxZIMQoFFQPvEXx9T/Bw=\ngithub.com/minio/highwayhash v1.0.1/go.mod h1:BQskDq+xkJ12lmlUUi7U0M5Swg3EWR+dLTk+kldvVxY=\ngithub.com/minio/highwayhash v1.0.2 h1:Aak5U0nElisjDCfPSG79Tgzkn2gl66NxOMspRrKnA/g=\ngithub.com/minio/highwayhash v1.0.2/go.mod h1:BQskDq+xkJ12lmlUUi7U0M5Swg3EWR+dLTk+kldvVxY=\ngithub.com/minio/kes v0.11.0/go.mod h1:mTF1Bv8YVEtQqF/B7Felp4tLee44Pp+dgI0rhCvgNg8=\ngithub.com/minio/kes v0.14.0 h1:plCGm4LwR++T1P1sXsJbyFRX54CE1WRuo9PAPj6MC3Q=\ngithub.com/minio/kes v0.14.0/go.mod h1:OUensXz2BpgMfiogslKxv7Anyx/wj+6bFC6qA7BQcfA=\ngithub.com/minio/madmin-go v1.0.12/go.mod h1:BK+z4XRx7Y1v8SFWXsuLNqQqnq5BO/axJ8IDJfgyvfs=\ngithub.com/minio/madmin-go v1.1.15/go.mod h1:Iu0OnrMWNBYx1lqJTW+BFjBMx0Hi0wjw8VmqhiOs2Jo=\ngithub.com/minio/madmin-go v1.1.17/go.mod h1:Iu0OnrMWNBYx1lqJTW+BFjBMx0Hi0wjw8VmqhiOs2Jo=\ngithub.com/minio/madmin-go v1.1.18 h1:1jXRb9LTiXqbZWBjXYmlqI5eCWsyZlprrI5CEVQjjqY=\ngithub.com/minio/madmin-go v1.1.18/go.mod h1:Iu0OnrMWNBYx1lqJTW+BFjBMx0Hi0wjw8VmqhiOs2Jo=\ngithub.com/minio/mc v0.0.0-20211207230606-23a05f5a17f2 h1:xocb1RGyrDJ8PxkNn0NSbaBlfdU6J/Ag9QK62pb7nR8=\ngithub.com/minio/mc v0.0.0-20211207230606-23a05f5a17f2/go.mod h1:siI9jWTzj1KsNXgz6NOL/S7OTaAUM0OMi+zEkF08gnA=\ngithub.com/minio/md5-simd v1.1.0/go.mod h1:XpBqgZULrMYD3R+M28PcmP0CkI7PEMzB3U77ZrKZ0Gw=\ngithub.com/minio/md5-simd v1.1.2 h1:Gdi1DZK69+ZVMoNHRXJyNcxrMA4dSxoYHZSQbirFg34=\ngithub.com/minio/md5-simd v1.1.2/go.mod h1:MzdKDxYpY2BT9XQFocsiZf/NKVtR7nkE4RoEpN+20RM=\ngithub.com/minio/minio-go/v7 v7.0.10/go.mod h1:td4gW1ldOsj1PbSNS+WYK43j+P1XVhX/8W8awaYlBFo=\ngithub.com/minio/minio-go/v7 v7.0.11-0.20210302210017-6ae69c73ce78/go.mod h1:mTh2uJuAbEqdhMVl6CMIIZLUeiMiWtJR4JB8/5g2skw=\ngithub.com/minio/minio-go/v7 v7.0.16-0.20211108161804-a7a36ee131df/go.mod h1:pUV0Pc+hPd1nccgmzQF/EXh48l/Z/yps6QPF1aaie4g=\ngithub.com/minio/minio-go/v7 v7.0.17 h1:5SiS3pqiQDbNhmXMxtqn2HzAInbN5cbHT7ip9F0F07E=\ngithub.com/minio/minio-go/v7 v7.0.17/go.mod h1:SyQ1IFeJuaa+eV5yEDxW7hYE1s5VVq5sgImDe27R+zg=\ngithub.com/minio/operator v0.0.0-20211011212245-31460bbbc4b7 h1:dkfuMNslMjGoJ4ArAMSoQhidYNdm3SgzLBP+f96O3/E=\ngithub.com/minio/operator v0.0.0-20211011212245-31460bbbc4b7/go.mod h1:lDpuz8nwsfhKlfiBaA3Z8AW019fWEAjO2gltfLbdorE=\ngithub.com/minio/operator/logsearchapi v0.0.0-20211011212245-31460bbbc4b7 h1:vFtQqCt67ETp0JAkOKRWTKkgwFv14Vc1jJSxmQ8wJE0=\ngithub.com/minio/operator/logsearchapi v0.0.0-20211011212245-31460bbbc4b7/go.mod h1:R+38Pf3wfm+JMiyLPb/r8OMrBm0vK2hZgUT4y4aYoSY=\ngithub.com/minio/parquet-go v1.1.0 h1:j2Fn1/h7Ts/0qzdMZU9oCUKr0IJwRTD9Hg9QJyVaN6A=\ngithub.com/minio/parquet-go v1.1.0/go.mod h1:nnAkbt2CG/DCQ3trcV3uyvwns4VjyoINF5vMqF5efOE=\ngithub.com/minio/pkg v1.0.3/go.mod h1:obU54TZ9QlMv0TRaDgQ/JTzf11ZSXxnSfLrm4tMtBP8=\ngithub.com/minio/pkg v1.0.4/go.mod h1:obU54TZ9QlMv0TRaDgQ/JTzf11ZSXxnSfLrm4tMtBP8=\ngithub.com/minio/pkg v1.0.11/go.mod h1:32x/3OmGB0EOi1N+3ggnp+B5VFkSBBB9svPMVfpnf14=\ngithub.com/minio/pkg v1.1.3/go.mod h1:32x/3OmGB0EOi1N+3ggnp+B5VFkSBBB9svPMVfpnf14=\ngithub.com/minio/pkg v1.1.9 h1:NJrcrQyFCSgyF+u6v7FbPXjjNV0oSnBuBevhsTKmA2U=\ngithub.com/minio/pkg v1.1.9/go.mod h1:32x/3OmGB0EOi1N+3ggnp+B5VFkSBBB9svPMVfpnf14=\ngithub.com/minio/selfupdate v0.3.1/go.mod h1:b8ThJzzH7u2MkF6PcIra7KaXO9Khf6alWPvMSyTDCFM=\ngithub.com/minio/selfupdate v0.4.0 h1:A7t07pN4Ch1tBTIRStW0KhUVyykz+2muCqFsITQeEW8=\ngithub.com/minio/selfupdate v0.4.0/go.mod h1:mcDkzMgq8PRcpCRJo/NlPY7U45O5dfYl2Y0Rg7IustY=\ngithub.com/minio/sha256-simd v0.1.1/go.mod h1:B5e1o+1/KgNmWrSQK08Y6Z1Vb5pwIktudl0J58iy0KM=\ngithub.com/minio/sha256-simd v1.0.0 h1:v1ta+49hkWZyvaKwrQB8elexRqm6Y0aMLjCNsrYxo6g=\ngithub.com/minio/sha256-simd v1.0.0/go.mod h1:OuYzVNI5vcoYIAmbIvHPl3N3jUzVedXbKy5RFepssQM=\ngithub.com/minio/simdjson-go v0.2.1 h1:nxYlp4Qd0w2pwLlif00l5vTFL6PcNAKpyHq27/pageg=\ngithub.com/minio/simdjson-go v0.2.1/go.mod h1:JPUSkRykfSPS+AhO0YPA1h0l5vY7NqrF4zel2b12wxc=\ngithub.com/minio/sio v0.2.1/go.mod h1:8b0yPp2avGThviy/+OCJBI6OMpvxoUuiLvE6F1lebhw=\ngithub.com/minio/sio v0.3.0 h1:syEFBewzOMOYVzSTFpp1MqpSZk8rUNbz8VIIc+PNzus=\ngithub.com/minio/sio v0.3.0/go.mod h1:8b0yPp2avGThviy/+OCJBI6OMpvxoUuiLvE6F1lebhw=\ngithub.com/minio/zipindex v0.2.1 h1:A37vDQJ7Uyp4RHpQEEpintgiIxg0t3npH2CWjLT//u4=\ngithub.com/minio/zipindex v0.2.1/go.mod h1:s+b/Qyw9JtSEnYfaM4ASOWNO2xGnXCfzQ+SWAzVkVZc=\ngithub.com/mitchellh/cli v1.0.0/go.mod h1:hNIlj7HEI86fIcpObd7a0FcrxTWetlwJDGcceTlRvqc=\ngithub.com/mitchellh/copystructure v1.0.0/go.mod h1:SNtv71yrdKgLRyLFxmLdkAbkKEFWgYaq1OVrnRcwhnw=\ngithub.com/mitchellh/go-homedir v1.0.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-ps v0.0.0-20190716172923-621e5597135b/go.mod h1:r1VsdOzOPt1ZSrGZWFoNhsAedKnEd6r9Np1+5blZCWk=\ngithub.com/mitchellh/go-testing-interface v0.0.0-20171004221916-a61a99592b77/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=\ngithub.com/mitchellh/go-testing-interface v1.0.0/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=\ngithub.com/mitchellh/go-wordwrap v0.0.0-20150314170334-ad45545899c7/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/mitchellh/go-wordwrap v1.0.0/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/mitchellh/gox v0.4.0/go.mod h1:Sd9lOJ0+aimLBi73mGofS1ycjY8lL3uZM3JPS42BGNg=\ngithub.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=\ngithub.com/mitchellh/mapstructure v0.0.0-20160808181253-ca63d7c062ee/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/mitchellh/mapstructure v1.3.1/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.3.2/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.3.3/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.4.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.4.1 h1:CpVNEelQCZBooIPDn+AR3NpivK/TIKU8bDxdASFVQag=\ngithub.com/mitchellh/mapstructure v1.4.1/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/mmcloughlin/avo v0.0.0-20201105074841-5d2f697d268f/go.mod h1:6aKT4zZIrpGqB3RpFU14ByCSSyKY6LfJz4J/JJChHfI=\ngithub.com/moby/spdystream v0.2.0/go.mod h1:f7i0iNDQJ059oMTcWxx8MA/zKFIuD/lY+0GqbN2Wy8c=\ngithub.com/moby/term v0.0.0-20200312100748-672ec06f55cd/go.mod h1:DdlQx2hp0Ss5/fLikoLlEeIYiATotOjgB//nb973jeo=\ngithub.com/moby/term v0.0.0-20201216013528-df9cb8a40635/go.mod h1:FBS0z0QWA44HXygs7VXDUOGoN/1TV3RuWkLO04am3wc=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v0.0.0-20180320133207-05fbef0ca5da/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/montanaflynn/stats v0.0.0-20171201202039-1bf9dbcd8cbe/go.mod h1:wL8QJuTMNUDYhXwkmfOly8iTdp5TEcJFWZD2D7SIkUc=\ngithub.com/montanaflynn/stats v0.6.6 h1:Duep6KMIDpY4Yo11iFsvyqJDyfzLF9+sndUKT+v64GQ=\ngithub.com/montanaflynn/stats v0.6.6/go.mod h1:etXPPgVO6n31NxCd9KQUMvCM+ve0ruNzt6R8Bnaayow=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/mozilla/tls-observatory v0.0.0-20190404164649-a3c1b6cfecfd/go.mod h1:SrKMQvPiws7F7iqYp8/TX+IhxCYhzr6N/1yb8cwHsGk=\ngithub.com/mozilla/tls-observatory v0.0.0-20200317151703-4fa42e1c2dee/go.mod h1:SrKMQvPiws7F7iqYp8/TX+IhxCYhzr6N/1yb8cwHsGk=\ngithub.com/munnerz/goautoneg v0.0.0-20120707110453-a547fc61f48d/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f/go.mod h1:ZdcZmHo+o7JKHSa8/e818NopupXU1YMK5fe1lsApnBw=\ngithub.com/nakabonne/nestif v0.3.0/go.mod h1:dI314BppzXjJ4HsCnbo7XzrJHPszZsjnk5wEBSYHI2c=\ngithub.com/nats-io/jwt v0.3.0/go.mod h1:fRYCDE99xlTsqUzISS1Bi75UBJ6ljOJQOAAu5VglpSg=\ngithub.com/nats-io/jwt v0.3.2/go.mod h1:/euKqTS1ZD+zzjYrY7pseZrTtWQSjujC7xjPc8wL6eU=\ngithub.com/nats-io/jwt v1.1.0/go.mod h1:n3cvmLfBfnpV4JJRN7lRYCyZnw48ksGsbThGXEk4w9M=\ngithub.com/nats-io/jwt v1.2.2 h1:w3GMTO969dFg+UOKTmmyuu7IGdusK+7Ytlt//OYH/uU=\ngithub.com/nats-io/jwt v1.2.2/go.mod h1:/xX356yQA6LuXI9xWW7mZNpxgF2mBmGecH+Fj34sP5Q=\ngithub.com/nats-io/jwt/v2 v2.0.2 h1:ejVCLO8gu6/4bOKIHQpmB5UhhUJfAQw55yvLWpfmKjI=\ngithub.com/nats-io/jwt/v2 v2.0.2/go.mod h1:VRP+deawSXyhNjXmxPCHskrR6Mq50BqpEI5SEcNiGlY=\ngithub.com/nats-io/nats-server/v2 v2.1.2/go.mod h1:Afk+wRZqkMQs/p45uXdrVLuab3gwv3Z8C4HTBu8GD/k=\ngithub.com/nats-io/nats-server/v2 v2.1.9/go.mod h1:9qVyoewoYXzG1ME9ox0HwkkzyYvnlBDugfR4Gg/8uHU=\ngithub.com/nats-io/nats-server/v2 v2.3.2 h1:SGJLWrjBHsl0DsdY8PeTR3YKEfiUEYVVq2STw9d8MSY=\ngithub.com/nats-io/nats-server/v2 v2.3.2/go.mod h1:dUf7Cm5z5LbciFVwWx54owyCKm8x4/hL6p7rrljhLFY=\ngithub.com/nats-io/nats-streaming-server v0.21.2 h1:chyaVdWlPdBcSbLq3cpyCYcuXA+7bVXJmM4yWrdqL/8=\ngithub.com/nats-io/nats-streaming-server v0.21.2/go.mod h1:2W8QfNVOtcFpmf0bRiwuLtRb0/hkX4NuOxPOFNOThVQ=\ngithub.com/nats-io/nats.go v1.9.1/go.mod h1:ZjDU1L/7fJ09jvUSRVBR2e7+RnLiiIQyqyzEE/Zbp4w=\ngithub.com/nats-io/nats.go v1.10.0/go.mod h1:AjGArbfyR50+afOUotNX2Xs5SYHf+CoOa5HH1eEl2HE=\ngithub.com/nats-io/nats.go v1.11.1-0.20210623165838-4b75fc59ae30 h1:9GqilBhZaR3xYis0JgMlJjNw933WIobdjKhilXm+Vls=\ngithub.com/nats-io/nats.go v1.11.1-0.20210623165838-4b75fc59ae30/go.mod h1:BPko4oXsySz4aSWeFgOHLZs3G4Jq4ZAyE6/zMCxRT6w=\ngithub.com/nats-io/nkeys v0.1.0/go.mod h1:xpnFELMwJABBLVhffcfd1MZx6VsNRFpEugbxziKVo7w=\ngithub.com/nats-io/nkeys v0.1.3/go.mod h1:xpnFELMwJABBLVhffcfd1MZx6VsNRFpEugbxziKVo7w=\ngithub.com/nats-io/nkeys v0.1.4/go.mod h1:XdZpAbhgyyODYqjTawOnIOI7VlbKSarI9Gfy1tqEu/s=\ngithub.com/nats-io/nkeys v0.2.0/go.mod h1:XdZpAbhgyyODYqjTawOnIOI7VlbKSarI9Gfy1tqEu/s=\ngithub.com/nats-io/nkeys v0.3.0 h1:cgM5tL53EvYRU+2YLXIK0G2mJtK12Ft9oeooSZMA2G8=\ngithub.com/nats-io/nkeys v0.3.0/go.mod h1:gvUNGjVcM2IPr5rCsRsC6Wb3Hr2CQAm08dsxtV6A5y4=\ngithub.com/nats-io/nuid v1.0.1 h1:5iA8DT8V7q8WK2EScv2padNa/rTESc1KdnPw4TC2paw=\ngithub.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=\ngithub.com/nats-io/stan.go v0.8.3 h1:XyemjL9vAeGHooHn5RQy+ngljd8AVSM2l65Jdnpv4rI=\ngithub.com/nats-io/stan.go v0.8.3/go.mod h1:Ejm8bbHnMTSptU6uNMAVuxeapMJYBB/Ml3ej6z4GoSY=\ngithub.com/nbutton23/zxcvbn-go v0.0.0-20180912185939-ae427f1e4c1d/go.mod h1:o96djdrsSGy3AWPyBgZMAGfxZNfgntdJG+11KU4QvbU=\ngithub.com/ncw/directio v1.0.5 h1:JSUBhdjEvVaJvOoyPAbcW0fnd0tvRXD76wEfZ1KcQz4=\ngithub.com/ncw/directio v1.0.5/go.mod h1:rX/pKEYkOXBGOggmcyJeJGloCkleSvphPx2eV3t6ROk=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e h1:fD57ERR4JtEqsWbfPhv4DMiApHyliiK5xCTNVSPiaAs=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/nsf/termbox-go v0.0.0-20190121233118-02980233997d/go.mod h1:IuKpRQcYE1Tfu+oAQqaLisqDeXgjyyltCfsaoYN18NQ=\ngithub.com/nsqio/go-nsq v1.0.8 h1:3L2F8tNLlwXXlp2slDUrUWSBn2O3nMh8R1/KEDFTHPk=\ngithub.com/nsqio/go-nsq v1.0.8/go.mod h1:vKq36oyeVXgsS5Q8YEO7WghqidAVXQlcFxzQbQTuDEY=\ngithub.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=\ngithub.com/nxadm/tail v1.4.8/go.mod h1:+ncqLTQzXmGhMZNUePPaPqPvBxHAIsmXswZKocGu+AU=\ngithub.com/oklog/oklog v0.3.2/go.mod h1:FCV+B7mhrz4o+ueLpx+KqkyXRGMWOYEvfiXtdGtbWGs=\ngithub.com/oklog/run v1.0.0/go.mod h1:dlhp/R75TPv97u0XWUtDeV/lRKWPKSdTuV0TZvrmrQA=\ngithub.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=\ngithub.com/olekukonko/tablewriter v0.0.0-20170122224234-a0225b3f23b5/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=\ngithub.com/onsi/ginkgo v0.0.0-20170829012221-11459a886d9c/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.7.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.8.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.10.2/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.11.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.12.0/go.mod h1:oUhWkIvk5aDxtKvDDuw8gItl8pKl42LzjC9KZE0HfGg=\ngithub.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=\ngithub.com/onsi/ginkgo v1.14.1/go.mod h1:iSB4RoI2tjJc9BBv4NKIKWKya62Rps+oPG/Lv9klQyY=\ngithub.com/onsi/ginkgo v1.16.1/go.mod h1:CObGmKUOKaSC0RjmoAK7tKyn4Azo5P2IWuoMnvwxz1E=\ngithub.com/onsi/gomega v0.0.0-20170829124025-dcabb60a477c/go.mod h1:C1qb7wdrVGGVU+Z6iS04AVkA3Q65CEZX59MT0QO5uiA=\ngithub.com/onsi/gomega v1.4.3/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.5.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/onsi/gomega v1.8.1/go.mod h1:Ho0h+IUsWyvy1OpqCwxlQ/21gkhVunqlU8fDGcoTdcA=\ngithub.com/onsi/gomega v1.9.0/go.mod h1:Ho0h+IUsWyvy1OpqCwxlQ/21gkhVunqlU8fDGcoTdcA=\ngithub.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=\ngithub.com/onsi/gomega v1.10.2/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=\ngithub.com/onsi/gomega v1.11.0/go.mod h1:azGKhqFUon9Vuj0YmTfLSmx0FUwqXYSTl5re8lQLTUg=\ngithub.com/op/go-logging v0.0.0-20160315200505-970db520ece7/go.mod h1:HzydrMdWErDVzsI23lYNej1Htcns9BCg93Dk0bBINWk=\ngithub.com/opencontainers/go-digest v1.0.0-rc1/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=\ngithub.com/opentracing-contrib/go-observer v0.0.0-20170622124052-a52f23424492/go.mod h1:Ngi6UdF0k5OKD5t5wlmGhe/EDKPoUM3BXZSSfIuJbis=\ngithub.com/opentracing/basictracer-go v1.0.0/go.mod h1:QfBfYuafItcjQuMwinw9GhYKwFXS9KnPs5lxoYwgW74=\ngithub.com/opentracing/opentracing-go v1.0.2/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/opentracing/opentracing-go v1.1.0/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/openzipkin-contrib/zipkin-go-opentracing v0.4.5/go.mod h1:/wsWhb9smxSfWAKL3wpBW7V8scJMt8N8gnaMCS9E/cA=\ngithub.com/openzipkin/zipkin-go v0.1.6/go.mod h1:QgAqvLzwWbR/WpD4A3cGpPtJrZXNIiJc5AZX7/PBEpw=\ngithub.com/openzipkin/zipkin-go v0.2.1/go.mod h1:NaW6tEwdmWMaCDZzg8sh+IBNOxHMPnhQw8ySjnjRyN4=\ngithub.com/openzipkin/zipkin-go v0.2.2/go.mod h1:NaW6tEwdmWMaCDZzg8sh+IBNOxHMPnhQw8ySjnjRyN4=\ngithub.com/pact-foundation/pact-go v1.0.4/go.mod h1:uExwJY4kCzNPcHRj+hCR/HBbOOIwwtUjcrb0b5/5kLM=\ngithub.com/pascaldekloe/goe v0.0.0-20180627143212-57f6aae5913c/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=\ngithub.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=\ngithub.com/pborman/getopt v0.0.0-20180729010549-6fdd0a2c7117/go.mod h1:85jBQOZwpVEaDAr341tbn15RS4fCAsIst0qp7i8ex1o=\ngithub.com/pborman/uuid v1.2.0/go.mod h1:X/NO0urCmaxf9VXbdlT7C2Yzkj2IKimNn4k+gtPdI/k=\ngithub.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/pelletier/go-toml v1.4.0/go.mod h1:PN7xzY2wHTK0K9p34ErDQMlFxa51Fk0OUruD3k1mMwo=\ngithub.com/pelletier/go-toml v1.7.0/go.mod h1:vwGMzjaWMwyfHwgIBhI2YUM4fB6nL6lVAvS1LBMMhTE=\ngithub.com/pelletier/go-toml v1.8.0/go.mod h1:D6yutnOGMveHEPV7VQOuvI/gXY61bv+9bAOTRnLElKs=\ngithub.com/performancecopilot/speed v3.0.0+incompatible/go.mod h1:/CLtqpZ5gBg1M9iaPbIdPPGyKcA8hKdoy6hAWba7Yac=\ngithub.com/peterbourgon/diskv v2.0.1+incompatible/go.mod h1:uqqh8zWWbv1HBMNONnaR/tNboyR3/BZd58JJSHlUSCU=\ngithub.com/phayes/checkstyle v0.0.0-20170904204023-bfd46e6a821d/go.mod h1:3OzsM7FXDQlpCiw2j81fOmAwQLnZnLGXVKUzeKQXIAw=\ngithub.com/philhofer/fwd v1.1.1/go.mod h1:gk3iGcWd9+svBvR0sR+KPcfE+RNWozjowpeBVG3ZVNU=\ngithub.com/philhofer/fwd v1.1.2-0.20210722190033-5c56ac6d0bb9 h1:6ob53CVz+ja2i7easAStApZJlh7sxyq3Cm7g1Di6iqA=\ngithub.com/philhofer/fwd v1.1.2-0.20210722190033-5c56ac6d0bb9/go.mod h1:gk3iGcWd9+svBvR0sR+KPcfE+RNWozjowpeBVG3ZVNU=\ngithub.com/pierrec/lz4 v1.0.2-0.20190131084431-473cd7ce01a1/go.mod h1:3/3N9NVKO0jef7pBehbT1qWhCMrIgbYNnFAZCqQ5LRc=\ngithub.com/pierrec/lz4 v2.0.5+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=\ngithub.com/pierrec/lz4 v2.5.2+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=\ngithub.com/pierrec/lz4 v2.6.0+incompatible h1:Ix9yFKn1nSPBLFl/yZknTp8TU5G4Ps0JDmguYK6iH1A=\ngithub.com/pierrec/lz4 v2.6.0+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/profile v1.2.1/go.mod h1:hJw3o1OdXxsrSjjVksARp5W95eeEaEfptyVZyv6JUPA=\ngithub.com/pkg/profile v1.6.0 h1:hUDfIISABYI59DyeB3OTay/HxSRwTQ8rB/H83k6r5dM=\ngithub.com/pkg/profile v1.6.0/go.mod h1:qBsxPvzyUincmltOk6iyRVxHYg4adc0OFOv72ZdLa18=\ngithub.com/pkg/xattr v0.4.3 h1:5Jx4GCg5ABtqWZH8WLzeI4fOtM1HyX4RBawuCoua1es=\ngithub.com/pkg/xattr v0.4.3/go.mod h1:sBD3RAqlr8Q+RC3FutZcikpT8nyDrIEEBw2J744gVWs=\ngithub.com/pmezard/go-difflib v0.0.0-20151028094244-d8ed2627bdf0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=\ngithub.com/posener/complete v1.2.3 h1:NP0eAhjcjImqslEwo/1hq7gpajME0fTLTezBKDqfXqo=\ngithub.com/posener/complete v1.2.3/go.mod h1:WZIdtGGp+qx0sLrYKtIRAruyNpv6hFCicSgv7Sy7s/s=\ngithub.com/pquerna/cachecontrol v0.0.0-20171018203845-0dec1b30a021 h1:0XM1XL/OFFJjXsYXlG30spTkV/E9+gmd5GD1w2HE8xM=\ngithub.com/pquerna/cachecontrol v0.0.0-20171018203845-0dec1b30a021/go.mod h1:prYjPmNq4d1NPVmpShWobRqXY3q7Vp+80DqgxxUrUIA=\ngithub.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring v0.44.1/go.mod h1:3WYi4xqXxGGXWDdQIITnLNmuDzO5n6wYva9spVhR4fg=\ngithub.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring v0.46.0/go.mod h1:3WYi4xqXxGGXWDdQIITnLNmuDzO5n6wYva9spVhR4fg=\ngithub.com/prometheus-operator/prometheus-operator/pkg/client v0.46.0/go.mod h1:k4BrWlVQQsvBiTcDnKEMgyh/euRxyxgrHdur/ZX/sdA=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v0.9.2/go.mod h1:OsXs2jCmiKlQ1lTBmv21f2mNfw4xf/QclQDMrYNZzcM=\ngithub.com/prometheus/client_golang v0.9.3-0.20190127221311-3c4408c8b829/go.mod h1:p2iRAGwDERtqlqzRXnrOVns+ignqQo//hLXqYxZYVNs=\ngithub.com/prometheus/client_golang v0.9.3/go.mod h1:/TN21ttK/J9q6uSwhBd54HahCDft0ttaMvbicHlPoso=\ngithub.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=\ngithub.com/prometheus/client_golang v1.3.0/go.mod h1:hJaj2vgQTGQmVCsAACORcieXFeDPbaTKGT+JTgUa3og=\ngithub.com/prometheus/client_golang v1.5.1/go.mod h1:e9GMxYsXl05ICDXkRhurwBS4Q3OK1iX/F2sw+iXX5zU=\ngithub.com/prometheus/client_golang v1.7.1/go.mod h1:PY5Wy2awLA44sXw4AOSfFBetzPP4j5+D6mVACh+pe2M=\ngithub.com/prometheus/client_golang v1.8.0/go.mod h1:O9VU6huf47PktckDQfMTX0Y8tY0/7TSWwj+ITvv0TnM=\ngithub.com/prometheus/client_golang v1.11.0 h1:HNkLOAEQMIDv/K+04rukrLx6ch7msSRwf3/SASFAGtQ=\ngithub.com/prometheus/client_golang v1.11.0/go.mod h1:Z6t4BnS23TR94PD6BsDNk8yVqroYurpAkEiz0P2BEV0=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190115171406-56726106282f/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.1.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.2.0 h1:uq5h0d+GuxiXLJLNABMgp2qUWDPiLvgCzz2dUR+/W/M=\ngithub.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/common v0.0.0-20181113130724-41aa239b4cce/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/common v0.0.0-20181126121408-4724e9255275/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/common v0.2.0/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.4.0/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.7.0/go.mod h1:DjGbpBbp5NYNiECxcL/VnbXCCaQpKd3tt26CguLLsqA=\ngithub.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=\ngithub.com/prometheus/common v0.10.0/go.mod h1:Tlit/dnDKsSWFlCLTWaA1cyBgKHSMdTB80sz/V91rCo=\ngithub.com/prometheus/common v0.13.0/go.mod h1:U+gB1OBLb1lF3O42bTCL+FK18tX9Oar16Clt/msog/s=\ngithub.com/prometheus/common v0.14.0/go.mod h1:U+gB1OBLb1lF3O42bTCL+FK18tX9Oar16Clt/msog/s=\ngithub.com/prometheus/common v0.26.0/go.mod h1:M7rCNAaPfAosfx8veZJCuw84e35h3Cfd9VFqTh1DIvc=\ngithub.com/prometheus/common v0.31.1 h1:d18hG4PkHnNAKNMOmFuXFaiY8Us0nird/2m60uS1AMs=\ngithub.com/prometheus/common v0.31.1/go.mod h1:vu+V0TpY+O6vW9J44gczi3Ap/oXXR10b+M/gUGO4Hls=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20181204211112-1dc9a6cbc91a/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20190117184657-bf6a532e95b1/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20190507164030-5867b95ac084/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=\ngithub.com/prometheus/procfs v0.1.3/go.mod h1:lV6e/gmhEcM9IjHGsFOCxxuZ+z1YqCvr4OA4YeYWdaU=\ngithub.com/prometheus/procfs v0.2.0/go.mod h1:lV6e/gmhEcM9IjHGsFOCxxuZ+z1YqCvr4OA4YeYWdaU=\ngithub.com/prometheus/procfs v0.6.0/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=\ngithub.com/prometheus/procfs v0.7.3 h1:4jVXhlkAyzOScmCkXBTOLRLTz8EeU+eyjrwB/EPq0VU=\ngithub.com/prometheus/procfs v0.7.3/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=\ngithub.com/prometheus/tsdb v0.7.1/go.mod h1:qhTCs0VvXwvX/y3TZrWD7rabWM+ijKTux40TwIPHuXU=\ngithub.com/quasilyte/go-consistent v0.0.0-20190521200055-c6f3937de18c/go.mod h1:5STLWrekHfjyYwxBRVRXNOSewLJ3PWfDJd1VyTS21fI=\ngithub.com/quasilyte/go-ruleguard v0.1.2-0.20200318202121-b00d7a75d3d8/go.mod h1:CGFX09Ci3pq9QZdj86B+VGIdNj4VyCo2iPOGS9esB/k=\ngithub.com/rcrowley/go-metrics v0.0.0-20181016184325-3113b8401b8a/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=\ngithub.com/rcrowley/go-metrics v0.0.0-20200313005456-10cdbea86bc0 h1:MkV+77GLUNo5oJ0jf870itWm3D0Sjh7+Za9gazKc5LQ=\ngithub.com/rcrowley/go-metrics v0.0.0-20200313005456-10cdbea86bc0/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=\ngithub.com/remyoudompheng/bigfft v0.0.0-20170806203942-52369c62f446/go.mod h1:uYEyJGbgTkfkS4+E/PavXkNJcbFIpEtjt2B0KDQ5+9M=\ngithub.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rjeczalik/notify v0.9.2 h1:MiTWrPj55mNDHEiIX5YUSKefw/+lCQVoAFmD6oQm5w8=\ngithub.com/rjeczalik/notify v0.9.2/go.mod h1:aErll2f0sUX9PXZnVNyeiObbmTlk5jnMoCa4QEjJeqM=\ngithub.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=\ngithub.com/rogpeppe/fastuuid v1.1.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\ngithub.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\ngithub.com/rogpeppe/go-internal v1.1.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.2.2/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.5.2/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=\ngithub.com/rs/cors v1.7.0 h1:+88SsELBHx5r+hZ8TCkggzSstaWNbDvThkVK8H6f9ik=\ngithub.com/rs/cors v1.7.0/go.mod h1:gFx+x8UowdsKA9AchylcLynDq+nNFfI8FkUZdN/jGCU=\ngithub.com/rs/dnscache v0.0.0-20210201191234-295bba877686 h1:IJ6Df0uxPDtNoByV0KkzVKNseWvZFCNM/S9UoyOMCSI=\ngithub.com/rs/dnscache v0.0.0-20210201191234-295bba877686/go.mod h1:qe5TWALJ8/a1Lqznoc5BDHpYX/8HU60Hm2AwRmqzxqA=\ngithub.com/rs/xid v1.2.1/go.mod h1:+uKXf+4Djp6Md1KODXJxgGQPKngRmWyn10oCKFzNHOQ=\ngithub.com/rs/xid v1.3.0 h1:6NjYksEUlhurdVehpc7S7dk6DAmcKv8V9gG0FsVN2U4=\ngithub.com/rs/xid v1.3.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=\ngithub.com/rs/zerolog v1.13.0/go.mod h1:YbFCdg8HfsridGWAh22vktObvhZbQsZXe4/zB0OKkWU=\ngithub.com/rs/zerolog v1.15.0/go.mod h1:xYTKnLHcpfU2225ny5qZjxnj9NvkumZYjJHlAThCjNc=\ngithub.com/rubiojr/go-vhd v0.0.0-20160810183302-0bfd3b39853c/go.mod h1:DM5xW0nvfNNm2uytzsvhI3OnX8uzaRAg8UX/CnDqbto=\ngithub.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/ryancurrah/gomodguard v1.0.4/go.mod h1:9T/Cfuxs5StfsocWr4WzDL36HqnX0fVb9d5fSEaLhoE=\ngithub.com/ryancurrah/gomodguard v1.1.0/go.mod h1:4O8tr7hBODaGE6VIhfJDHcwzh5GUccKSJBU0UMXJFVM=\ngithub.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=\ngithub.com/ryanuber/columnize v2.1.0+incompatible/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=\ngithub.com/ryanuber/go-glob v1.0.0/go.mod h1:807d1WSdnB0XRJzKNil9Om6lcp/3a0v4qIHxIXzX/Yc=\ngithub.com/samuel/go-zookeeper v0.0.0-20190923202752-2cc03de413da/go.mod h1:gi+0XIa01GRL2eRQVjQkKGqKF3SF9vZR/HnPullcV2E=\ngithub.com/sassoftware/go-rpmutils v0.0.0-20190420191620-a8f1baeba37b/go.mod h1:am+Fp8Bt506lA3Rk3QCmSqmYmLMnPDhdDUcosQCAx+I=\ngithub.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=\ngithub.com/sclevine/spec v1.2.0/go.mod h1:W4J29eT/Kzv7/b9IWLB055Z+qvVC9vt0Arko24q7p+U=\ngithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=\ngithub.com/secure-io/sio-go v0.3.0/go.mod h1:D3KmXgKETffyYxBdFRN+Hpd2WzhzqS0EQwT3XWsAcBU=\ngithub.com/secure-io/sio-go v0.3.1 h1:dNvY9awjabXTYGsTF1PiCySl9Ltofk9GA3VdWlo7rRc=\ngithub.com/secure-io/sio-go v0.3.1/go.mod h1:+xbkjDzPjwh4Axd07pRKSNriS9SCiYksWnZqdnfpQxs=\ngithub.com/securego/gosec v0.0.0-20200103095621-79fbf3af8d83/go.mod h1:vvbZ2Ae7AzSq3/kywjUDxSNq2SJ27RxCz2un0H3ePqE=\ngithub.com/securego/gosec v0.0.0-20200401082031-e946c8c39989/go.mod h1:i9l/TNj+yDFh9SZXUTvspXTjbFXgZGP/UvhU1S65A4A=\ngithub.com/securego/gosec/v2 v2.3.0/go.mod h1:UzeVyUXbxukhLeHKV3VVqo7HdoQR9MrRfFmZYotn8ME=\ngithub.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=\ngithub.com/shirou/gopsutil v0.0.0-20190901111213-e4ec7b275ada h1:WokF3GuxBeL+n4Lk4Fa8v9mbdjlrl7bHuneF4N1bk2I=\ngithub.com/shirou/gopsutil v0.0.0-20190901111213-e4ec7b275ada/go.mod h1:WWnYX4lzhCH5h/3YBfyVA3VbLYjlMZZAQcW9ojMexNc=\ngithub.com/shirou/gopsutil/v3 v3.21.4/go.mod h1:ghfMypLDrFSWN2c9cDYFLHyynQ+QUht0cv/18ZqVczw=\ngithub.com/shirou/gopsutil/v3 v3.21.5/go.mod h1:ghfMypLDrFSWN2c9cDYFLHyynQ+QUht0cv/18ZqVczw=\ngithub.com/shirou/gopsutil/v3 v3.21.6/go.mod h1:JfVbDpIBLVzT8oKbvMg9P3wEIMDDpVn+LwHTKj0ST88=\ngithub.com/shirou/gopsutil/v3 v3.21.8/go.mod h1:YWp/H8Qs5fVmf17v7JNZzA0mPJ+mS2e9JdiUF9LlKzQ=\ngithub.com/shirou/gopsutil/v3 v3.21.9 h1:Vn4MUz2uXhqLSiCbGFRc0DILbMVLAY92DSkT8bsYrHg=\ngithub.com/shirou/gopsutil/v3 v3.21.9/go.mod h1:YWp/H8Qs5fVmf17v7JNZzA0mPJ+mS2e9JdiUF9LlKzQ=\ngithub.com/shirou/w32 v0.0.0-20160930032740-bb4de0191aa4/go.mod h1:qsXQc7+bwAM3Q1u/4XEfrquwF8Lw7D7y5cD8CuHnfIc=\ngithub.com/shopspring/decimal v0.0.0-20180709203117-cd690d0c9e24/go.mod h1:M+9NzErvs504Cn4c5DxATwIqPbtswREoFCre64PpcG4=\ngithub.com/shopspring/decimal v0.0.0-20200227202807-02e2044944cc/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/shopspring/decimal v0.0.0-20200419222939-1884f454f8ea/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/shurcooL/go v0.0.0-20180423040247-9e1955d9fb6e/go.mod h1:TDJrrUr11Vxrven61rcy3hJMUqaf/CLWYhHNPmT14Lk=\ngithub.com/shurcooL/go-goon v0.0.0-20170922171312-37c2f522c041/go.mod h1:N5mDOmsrJOB+vfqUK+7DmDyjhSLIIBnXo9lvZJj3MWQ=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.4.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.6.0/go.mod h1:7uNnSEd1DgxDLC74fIahvMZmmYsHGZGEOFrfsX/uA88=\ngithub.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/sirupsen/logrus v1.8.0/go.mod h1:4GuYW9TZmE769R5STWrRakJc4UqQ3+QQ95fyz7ENv1A=\ngithub.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9+AZZE=\ngithub.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/assertions v1.0.0/go.mod h1:kHHU4qYBaI3q23Pp3VPrmWhuIUrLW/7eUrw0BU5VaoM=\ngithub.com/smartystreets/assertions v1.1.1/go.mod h1:tcbTF8ujkAEcZ8TElKY+i30BzYlVhC/LOxJk7iOWnoo=\ngithub.com/smartystreets/go-aws-auth v0.0.0-20180515143844-0c1422d1fdb9/go.mod h1:SnhjPscd9TpLiy1LpzGSKh3bXCfxxXuqd9xmQJy3slM=\ngithub.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/smartystreets/gunit v1.0.0/go.mod h1:qwPWnhz6pn0NnRBP++URONOVyNkPyr4SauJk4cUOwJs=\ngithub.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=\ngithub.com/sony/gobreaker v0.4.1/go.mod h1:ZKptC7FHNvhBz7dN2LGjPVBz2sZJmc0/PkyDJOjmxWY=\ngithub.com/sourcegraph/go-diff v0.5.1/go.mod h1:j2dHj3m8aZgQO8lMTcTnBcXkRRRqi34cd2MNlA9u1mE=\ngithub.com/sourcegraph/go-diff v0.5.3/go.mod h1:v9JDtjCE4HHHCZGId75rg8gkKKa98RVjBcBGsVmMmak=\ngithub.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spaolacci/murmur3 v1.1.0 h1:7c1g84S4BPRrfL5Xrdp6fOJ206sU9y293DDHaoy0bLI=\ngithub.com/spaolacci/murmur3 v1.1.0/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=\ngithub.com/spf13/afero v1.2.2/go.mod h1:9ZxEEn6pIJ8Rxe320qSDBk6AsU0r9pR7Q4OcevTdifk=\ngithub.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cast v1.3.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cobra v0.0.3/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=\ngithub.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=\ngithub.com/spf13/cobra v1.0.0/go.mod h1:/6GTrnGXV9HjY+aR4k0oJ5tcvakLuG6EuKReYlHNrgE=\ngithub.com/spf13/cobra v1.1.1/go.mod h1:WnodtKOvamDL/PwE2M4iKs8aMDBZ5Q5klgD3qfVJQMI=\ngithub.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=\ngithub.com/spf13/jwalterweatherman v1.1.0/go.mod h1:aNWZUN0dPAAO/Ljvb5BEdw96iTZ0EXowPYD95IqWIGo=\ngithub.com/spf13/pflag v0.0.0-20170130214245-9ff6c6923cff/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.1/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=\ngithub.com/spf13/viper v1.4.0/go.mod h1:PTJ7Z/lr49W6bUbkmS1V3by4uWynFiR9p7+dSq/yZzE=\ngithub.com/spf13/viper v1.6.1/go.mod h1:t3iDnF5Jlj76alVNuyFBk5oUMCvsrkbvZK0WQdfDi5k=\ngithub.com/spf13/viper v1.7.0/go.mod h1:8WkrPz2fc9jxqZNCJI/76HCieCp4Q8HaLFoCha5qpdg=\ngithub.com/stoewer/go-strcase v1.2.0/go.mod h1:IBiWB2sKIp3wVVQ3Y035++gc+knqhUQag1KpM8ahLw8=\ngithub.com/streadway/amqp v0.0.0-20190404075320-75d898a42a94/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=\ngithub.com/streadway/amqp v0.0.0-20190827072141-edfb9018d271/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=\ngithub.com/streadway/amqp v1.0.0 h1:kuuDrUJFZL1QYL9hUNuCxNObNzB0bV/ZG5jV3RWAQgo=\ngithub.com/streadway/amqp v1.0.0/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=\ngithub.com/streadway/handy v0.0.0-20190108123426-d5acb3125c2a/go.mod h1:qNTQ5P5JnDBl6z3cMAg/SywNDC5ABu5ApDIw6lUbRmI=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.2.0 h1:Hbg2NidpLE8veEBkEZTL3CvlkUIVzuU9jDplZO54c48=\ngithub.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=\ngithub.com/stretchr/testify v0.0.0-20151208002404-e3a8ff8ce365/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/subosito/gotenv v1.2.0/go.mod h1:N0PQaV/YGNqwC0u51sEeR/aUtSLEXKX9iv69rRypqCw=\ngithub.com/tdakkota/asciicheck v0.0.0-20200416190851-d7f85be797a2/go.mod h1:yHp0ai0Z9gUljN3o0xMhYJnH/IcvkdTBOX2fmJ93JEM=\ngithub.com/tdakkota/asciicheck v0.0.0-20200416200610-e657995f937b/go.mod h1:yHp0ai0Z9gUljN3o0xMhYJnH/IcvkdTBOX2fmJ93JEM=\ngithub.com/tetafro/godot v0.3.7/go.mod h1:/7NLHhv08H1+8DNj0MElpAACw1ajsCuf3TKNQxA5S+0=\ngithub.com/tetafro/godot v0.4.2/go.mod h1:/7NLHhv08H1+8DNj0MElpAACw1ajsCuf3TKNQxA5S+0=\ngithub.com/tidwall/gjson v1.10.2/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/gjson v1.11.0 h1:C16pk7tQNiH6VlCrtIXL1w8GaOsi1X3W8KDkE1BuYd4=\ngithub.com/tidwall/gjson v1.11.0/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.0.0/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=\ngithub.com/tidwall/pretty v1.2.0 h1:RWIZEg2iJ8/g6fDDYzMpobmaoGh5OLl4AXtGUGPcqCs=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/sjson v1.2.3 h1:5+deguEhHSEjmuICXZ21uSSsXotWMA0orU783+Z7Cp8=\ngithub.com/tidwall/sjson v1.2.3/go.mod h1:5WdjKx3AQMvCJ4RG6/2UYT7dLrGvJUV1x4jdTAyGvZs=\ngithub.com/timakin/bodyclose v0.0.0-20190930140734-f7f2e9bca95e/go.mod h1:Qimiffbc6q9tBWlVV6x0P9sat/ao1xEkREYPPj9hphk=\ngithub.com/timakin/bodyclose v0.0.0-20200424151742-cb6215831a94/go.mod h1:Qimiffbc6q9tBWlVV6x0P9sat/ao1xEkREYPPj9hphk=\ngithub.com/tinylib/msgp v1.1.3/go.mod h1:+d+yLhGm8mzTaHzB+wgMYrodPfmZrzkirds8fDWklFE=\ngithub.com/tinylib/msgp v1.1.5/go.mod h1:eQsjooMTnV42mHu917E26IogZ2930nFyBQdofk10Udg=\ngithub.com/tinylib/msgp v1.1.6/go.mod h1:75BAfg2hauQhs3qedfdDZmWAPcFMAvJE5b9rGOMufyw=\ngithub.com/tinylib/msgp v1.1.7-0.20211026165309-e818a1881b0e h1:P5tyWbssToKowBPTA1/EzqPXwrZNc8ZeNPdjgpcDEoI=\ngithub.com/tinylib/msgp v1.1.7-0.20211026165309-e818a1881b0e/go.mod h1:g7jEyb18KPe65d9RRhGw+ThaJr5duyBH8eaFgBUor7Y=\ngithub.com/tj/assert v0.0.0-20171129193455-018094318fb0/go.mod h1:mZ9/Rh9oLWpLLDRpvE+3b7gP/C2YyLFYxNmcLnPTMe0=\ngithub.com/tj/go-elastic v0.0.0-20171221160941-36157cbbebc2/go.mod h1:WjeM0Oo1eNAjXGDx2yma7uG2XoyRZTq1uv3M/o7imD0=\ngithub.com/tj/go-kinesis v0.0.0-20171128231115-08b17f58cb1b/go.mod h1:/yhzCV0xPfx6jb1bBgRFjl5lytqVqZXEaeqWP8lTEao=\ngithub.com/tj/go-spin v1.1.0/go.mod h1:Mg1mzmePZm4dva8Qz60H2lHwmJ2loum4VIrLgVnKwh4=\ngithub.com/tklauser/go-sysconf v0.3.4/go.mod h1:Cl2c8ZRWfHD5IrfHo9VN+FX9kCFjIOyVklgXycLB6ek=\ngithub.com/tklauser/go-sysconf v0.3.5/go.mod h1:MkWzOF4RMCshBAMXuhXJs64Rte09mITnppBXY/rYEFI=\ngithub.com/tklauser/go-sysconf v0.3.6/go.mod h1:MkWzOF4RMCshBAMXuhXJs64Rte09mITnppBXY/rYEFI=\ngithub.com/tklauser/go-sysconf v0.3.9 h1:JeUVdAOWhhxVcU6Eqr/ATFHgXk/mmiItdKeJPev3vTo=\ngithub.com/tklauser/go-sysconf v0.3.9/go.mod h1:11DU/5sG7UexIrp/O6g35hrWzu0JxlwQ3LSFUzyeuhs=\ngithub.com/tklauser/numcpus v0.2.1/go.mod h1:9aU+wOc6WjUIZEwWMP62PL/41d65P+iks1gBkr4QyP8=\ngithub.com/tklauser/numcpus v0.2.2/go.mod h1:x3qojaO3uyYt0i56EW/VUYs7uBvdl2fkfZFu0T9wgjM=\ngithub.com/tklauser/numcpus v0.3.0 h1:ILuRUQBtssgnxw0XXIjKUC56fgnOrFoQQ/4+DeU2biQ=\ngithub.com/tklauser/numcpus v0.3.0/go.mod h1:yFGUr7TUHQRAhyqBcEg0Ge34zDBAsIvJJcyE6boqnA8=\ngithub.com/tmc/grpc-websocket-proxy v0.0.0-20170815181823-89b8d40f7ca8/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=\ngithub.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=\ngithub.com/tommy-muehle/go-mnd v1.1.1/go.mod h1:dSUh0FtTP8VhvkL1S+gUR1OKd9ZnSaozuI6r3m6wOig=\ngithub.com/tommy-muehle/go-mnd v1.3.1-0.20200224220436-e6f9a994e8fa/go.mod h1:dSUh0FtTP8VhvkL1S+gUR1OKd9ZnSaozuI6r3m6wOig=\ngithub.com/ttacon/chalk v0.0.0-20160626202418-22c06c80ed31/go.mod h1:onvgF043R+lC5RZ8IT9rBXDaEDnpnw/Cl+HFiw+v/7Q=\ngithub.com/tv42/httpunix v0.0.0-20150427012821-b75d8614f926/go.mod h1:9ESjWnEqriFuLhtthL60Sar/7RFoluCcXsuvEwTV5KM=\ngithub.com/ugorji/go v1.1.4/go.mod h1:uQMGLiO92mf5W77hV/PUCpI3pbzQx3CRekS0kk+RGrc=\ngithub.com/ugorji/go/codec v0.0.0-20181204163529-d75b2dcb6bc8/go.mod h1:VFNgLljTbGfSG7qAOspJ7OScBnGdDN/yBr0sguwnwf0=\ngithub.com/ulikunitz/xz v0.5.6/go.mod h1:2bypXElzHzzJZwzH67Y6wb67pO62Rzfn7BSiF4ABRW8=\ngithub.com/ulikunitz/xz v0.5.7/go.mod h1:nbz6k7qbPmH4IRqmfOplQw/tblSgqTqBwxkY0oWt/14=\ngithub.com/ultraware/funlen v0.0.2/go.mod h1:Dp4UiAus7Wdb9KUZsYWZEWiRzGuM2kXM1lPbfaF6xhA=\ngithub.com/ultraware/whitespace v0.0.4/go.mod h1:aVMh/gQve5Maj9hQ/hg+F75lr/X5A89uZnzAmWSineA=\ngithub.com/unrolled/secure v1.0.9 h1:BWRuEb1vDrBFFDdbCnKkof3gZ35I/bnHGyt0LB0TNyQ=\ngithub.com/unrolled/secure v1.0.9/go.mod h1:fO+mEan+FLB0CdEnHf6Q4ZZVNqG+5fuLFnP8p0BXDPI=\ngithub.com/urfave/cli v1.20.0/go.mod h1:70zkFmudgCuE/ngEzBv17Jvp/497gISqfk5gWijbERA=\ngithub.com/urfave/cli v1.22.1/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/urfave/negroni v1.0.0 h1:kIimOitoypq34K7TG7DUaJ9kq/N4Ofuwi1sjz0KipXc=\ngithub.com/urfave/negroni v1.0.0/go.mod h1:Meg73S6kFm/4PpbYdq35yYWoCZ9mS/YSx+lKnmiohz4=\ngithub.com/uudashr/gocognit v1.0.1/go.mod h1:j44Ayx2KW4+oB6SWMv8KsmHzZrOInQav7D3cQMJ5JUM=\ngithub.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=\ngithub.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\ngithub.com/valyala/fasthttp v1.2.0/go.mod h1:4vX61m6KN+xDduDNwXrhIAVZaZaZiQ1luJk8LWSxF3s=\ngithub.com/valyala/quicktemplate v1.2.0/go.mod h1:EH+4AkTd43SvgIbQHYu59/cJyxDoOVRUAfrukLPuGJ4=\ngithub.com/valyala/tcplisten v0.0.0-20161114210144-ceec8f93295a/go.mod h1:v3UYOV9WzVtRmSR+PDvWpU/qWl4Wa5LApYYX4ZtKbio=\ngithub.com/vdemeester/k8s-pkg-credentialprovider v1.17.4/go.mod h1:inCTmtUdr5KJbreVojo06krnTgaeAz/Z7lynpPk/Q2c=\ngithub.com/vektah/gqlparser v1.1.2/go.mod h1:1ycwN7Ij5njmMkPPAOaRFY4rET2Enx7IkVv3vaXspKw=\ngithub.com/vmware/govmomi v0.20.3/go.mod h1:URlwyTFZX72RmxtxuaFL2Uj3fD1JTvZdx59bHWk6aFU=\ngithub.com/xanzy/go-gitlab v0.31.0/go.mod h1:sPLojNBn68fMUWSxIJtdVVIP8uSBYqesTfDUseX11Ug=\ngithub.com/xanzy/go-gitlab v0.32.0/go.mod h1:sPLojNBn68fMUWSxIJtdVVIP8uSBYqesTfDUseX11Ug=\ngithub.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c h1:u40Z8hqBAAQyv+vATcGgV0YCnDjqSL7/q/JyPhhJSPk=\ngithub.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c/go.mod h1:lB8K/P019DLNhemzwFU4jHLhdvlE6uDZjXFejJXr49I=\ngithub.com/xdg/stringprep v0.0.0-20180714160509-73f8eece6fdc/go.mod h1:Jhud4/sHMO4oL310DaZAKk9ZaJ08SJfe+sJh0HrGL1Y=\ngithub.com/xdg/stringprep v1.0.0 h1:d9X0esnoa3dFsV0FG35rAT0RIhYFlPq7MiP+DW89La0=\ngithub.com/xdg/stringprep v1.0.0/go.mod h1:Jhud4/sHMO4oL310DaZAKk9ZaJ08SJfe+sJh0HrGL1Y=\ngithub.com/xi2/xz v0.0.0-20171230120015-48954b6210f8/go.mod h1:HUYIGzjTL3rfEspMxjDjgmT5uz5wzYJKVo23qUhYTos=\ngithub.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=\ngithub.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=\ngithub.com/yargevad/filepathx v1.0.0 h1:SYcT+N3tYGi+NvazubCNlvgIPbzAk7i7y2dwg3I5FYc=\ngithub.com/yargevad/filepathx v1.0.0/go.mod h1:BprfX/gpYNJHJfc35GjRRpVcwWXS89gGulUIU5tK3tA=\ngithub.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngithub.com/zeebo/xxh3 v1.0.0 h1:6eLPZCVXpsGnhv8RiWBEJs5kenm2W1CMwon19/l8ODc=\ngithub.com/zeebo/xxh3 v1.0.0/go.mod h1:8VHV24/3AZLn3b6Mlp/KuC33LWH687Wq6EnziEB+rsA=\ngithub.com/zenazn/goji v0.9.0/go.mod h1:7S9M489iMyHBNxwZnk9/EHS098H4/F6TATF2mIxtB1Q=\ngo.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=\ngo.etcd.io/bbolt v1.3.3/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=\ngo.etcd.io/bbolt v1.3.5 h1:XAzx9gjCb0Rxj7EoqcClPD1d5ZBxZJk0jbuoPHenBt0=\ngo.etcd.io/bbolt v1.3.5/go.mod h1:G5EMThwa9y8QZGBClrRx5EY+Yw9kAhnjy3bSjsnlVTQ=\ngo.etcd.io/etcd v0.0.0-20191023171146-3cf2f69b5738/go.mod h1:dnLIgRNXwCJa5e+c6mIZCrds/GIG4ncV9HhK5PX7jPg=\ngo.etcd.io/etcd v0.5.0-alpha.5.0.20200910180754-dd1b699fc489 h1:1JFLBqwIgdyHN1ZtgjTBwO+blA6gVOmZurpiMEsETKo=\ngo.etcd.io/etcd v0.5.0-alpha.5.0.20200910180754-dd1b699fc489/go.mod h1:yVHk9ub3CSBatqGNg7GRmsnfLWtoW60w4eDYfh7vHDg=\ngo.etcd.io/etcd/api/v3 v3.5.0-beta.4/go.mod h1:yF0YUmBghT48aC0/eTFrhULo+uKQAr5spQQ6sRhPauE=\ngo.etcd.io/etcd/api/v3 v3.5.0 h1:GsV3S+OfZEOCNXdtNkBSR7kgLobAa/SO6tCxRa0GAYw=\ngo.etcd.io/etcd/api/v3 v3.5.0/go.mod h1:cbVKeC6lCfl7j/8jBhAK6aIYO9XOjdptoxU/nLQcPvs=\ngo.etcd.io/etcd/client/pkg/v3 v3.5.0-beta.4/go.mod h1:a+pbz+UrcOpvve1Qxf6tGovi15PjgtRhi0QTO2Nlc4U=\ngo.etcd.io/etcd/client/pkg/v3 v3.5.0 h1:2aQv6F436YnN7I4VbI8PPYrBhu+SmrTaADcf8Mi/6PU=\ngo.etcd.io/etcd/client/pkg/v3 v3.5.0/go.mod h1:IJHfcCEKxYu1Os13ZdwCwIUTUVGYTSAM3YSwc9/Ac1g=\ngo.etcd.io/etcd/client/v3 v3.5.0-beta.4/go.mod h1:0L1RulN1QSXq6uKPMUSX+OTAYyFkapMK7iUHXXIH/1E=\ngo.etcd.io/etcd/client/v3 v3.5.0 h1:62Eh0XOro+rDwkrypAGDfgmNh5Joq+z+W9HZdlXMzek=\ngo.etcd.io/etcd/client/v3 v3.5.0/go.mod h1:AIKXXVX/DQXtfTEqBryiLTUXwON+GuvO6Z7lLS/oTh0=\ngo.mongodb.org/mongo-driver v1.0.3/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=\ngo.mongodb.org/mongo-driver v1.1.1/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=\ngo.mongodb.org/mongo-driver v1.1.2/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=\ngo.mongodb.org/mongo-driver v1.3.0/go.mod h1:MSWZXKOynuguX+JSvwP8i+58jYCXxbia8HS3gZBapIE=\ngo.mongodb.org/mongo-driver v1.3.4/go.mod h1:MSWZXKOynuguX+JSvwP8i+58jYCXxbia8HS3gZBapIE=\ngo.mongodb.org/mongo-driver v1.4.3/go.mod h1:WcMNYLx/IlOxLe6JRJiv2uXuCz6zBLndR4SoGjYphSc=\ngo.mongodb.org/mongo-driver v1.4.4/go.mod h1:WcMNYLx/IlOxLe6JRJiv2uXuCz6zBLndR4SoGjYphSc=\ngo.mongodb.org/mongo-driver v1.4.6 h1:rh7GdYmDrb8AQSkF8yteAus8qYOgOASWDOv1BWqBXkU=\ngo.mongodb.org/mongo-driver v1.4.6/go.mod h1:WcMNYLx/IlOxLe6JRJiv2uXuCz6zBLndR4SoGjYphSc=\ngo.opencensus.io v0.15.0/go.mod h1:UffZAU+4sDEINUGP/B7UfBBkq4fqLu9zXAX7ke6CHW0=\ngo.opencensus.io v0.20.1/go.mod h1:6WKK9ahsWS3RSO+PY9ZHZUfv2irvY6gN279GOPZjmmk=\ngo.opencensus.io v0.20.2/go.mod h1:6WKK9ahsWS3RSO+PY9ZHZUfv2irvY6gN279GOPZjmmk=\ngo.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngo.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.5/go.mod h1:5pWMHQbX5EPX2/62yrJeAkowc+lfs/XD7Uxpq3pI6kk=\ngo.opencensus.io v0.23.0 h1:gqCw0LfLxScz8irSi8exQc7fyQ0fKQU/qnC/X8+V/1M=\ngo.opencensus.io v0.23.0/go.mod h1:XItmlyltB5F7CS4xOC1DcqMoFqwtC6OG2xF7mCv7P7E=\ngo.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=\ngo.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/atomic v1.6.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=\ngo.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/goleak v1.1.10/go.mod h1:8a7PlsEVH3e/a/GLqe5IIrQx6GzcnRmZEufDUTk4A7A=\ngo.uber.org/goleak v1.1.11-0.20210813005559-691160354723 h1:sHOAIxRGBp443oHZIPB+HsUGaksVCXVQENPxwTfQdH4=\ngo.uber.org/goleak v1.1.11-0.20210813005559-691160354723/go.mod h1:cwTWslyiVhfpKIDGSZEM2HlOvcqm+tG4zioyIeLoqMQ=\ngo.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=\ngo.uber.org/multierr v1.3.0/go.mod h1:VgVr7evmIr6uPjLBxg28wmKNXyqE9akIJ5XnfpiKl+4=\ngo.uber.org/multierr v1.5.0/go.mod h1:FeouvMocqHpRaaGuG9EjoKcStLC43Zu/fmqdUMPcKYU=\ngo.uber.org/multierr v1.6.0/go.mod h1:cdWPpRnG4AhwMwsgIHip0KRBQjJy5kYEpYjJxpXp9iU=\ngo.uber.org/multierr v1.7.0 h1:zaiO/rmgFjbmCXdSYJWQcdvOCsthmdaHfr3Gm2Kx4Ec=\ngo.uber.org/multierr v1.7.0/go.mod h1:7EAYxJLBy9rStEaz58O2t4Uvip6FSURkq8/ppBp95ak=\ngo.uber.org/tools v0.0.0-20190618225709-2cfd321de3ee/go.mod h1:vJERXedbb3MVM5f9Ejo0C68/HhF8uaILCdgjnY+goOA=\ngo.uber.org/zap v1.8.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.9.1/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.13.0/go.mod h1:zwrFLgMcdUuIBviXEYEH1YKNaOBnKXsx2IPda5bBwHM=\ngo.uber.org/zap v1.15.0/go.mod h1:Mb2vm2krFEG5DV0W9qcHBYFtp/Wku1cvYaqPsS/WYfc=\ngo.uber.org/zap v1.16.1-0.20210329175301-c23abee72d19/go.mod h1:aMfIlz3TDBfB0BwTCKFU1XbEmj9zevr5S5LcBr85MXw=\ngo.uber.org/zap v1.17.0/go.mod h1:MXVU+bhUf/A7Xi2HNOnopQOrmycQ5Ih87HtOu4q5SSo=\ngo.uber.org/zap v1.19.1 h1:ue41HOKd1vGURxrmeKIgELGb3jPW9DMUDGtsinblHwI=\ngo.uber.org/zap v1.19.1/go.mod h1:j3DNczoxDZroyBnOT1L/Q79cfUMGZxlv/9dzN7SM1rI=\ngocloud.dev v0.19.0/go.mod h1:SmKwiR8YwIMMJvQBKLsC3fHNyMwXLw3PMDO+VVteJMI=\ngolang.org/x/arch v0.0.0-20201008161808-52c3e6f60cff/go.mod h1:flIaEI6LNU6xOCD5PaJvn9wGP0agmIOqjrtsKGRguv4=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20181029021203-45a5f77698d3/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190211182817-74369b46fc67/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190320223903-b7391e95e576/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190411191339-88737f569e3a/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=\ngolang.org/x/crypto v0.0.0-20190422162423-af44ce270edf/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=\ngolang.org/x/crypto v0.0.0-20190426145343-a29dc8fdc734/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190513172903-22d7a77e9e5f/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190611184440-5c40567a22f8/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190617133340-57b3e21c3d56/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190820162420-60c769a6c586/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190911031432-227b76d455e7/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191002192127-34f69633bfdc/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191117063200-497ca9f6d64f/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20191205180655-e7c4368fe9dd/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20191206172530-e9b2fee46413/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200117160349-530e935923ad/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200220183623-bac4c82f6975/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200302210943-78000ba7a073/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200323165209-0ec3e9974c59/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200604202706-70a84ac30bf9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200709230013-948cd5f35899/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200820211705-5c72a883971a/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201112155050-0c6587e931a9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201124201722-c8d3bf9c5392/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20201216223049-8b5274cf687f/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20201217014255-9d1352758620/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20210220033148-5ea612d1eb83/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20210314154223-e6e6c4f2bb5b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/crypto v0.0.0-20210616213533-5ff15b29337e/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20211209193657-4570a0811e8b h1:QAqMVf3pSa6eeTsuklijukjXBlj7Es2QQplab+/RbQ4=\ngolang.org/x/crypto v0.0.0-20211209193657-4570a0811e8b/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190125153040-c74c464bbbf2/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190312203227-4b39c73a6495/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/exp v0.0.0-20190829153037-c13cbed26979/go.mod h1:86+5VVa7VpoJ4kLfm080zCjGlMRFzhUhsZKEZO7MGek=\ngolang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=\ngolang.org/x/exp v0.0.0-20191129062945-2f5052295587/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20191227195350-da58074b4299/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=\ngolang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190909230951-414d861bb4ac/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=\ngolang.org/x/lint v0.0.0-20200130185559-910be7a94367/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20201208152925-83fdc39ff7b5/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20210508222113-6edffad5e616/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=\ngolang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.1.1-0.20191107180719-034126e5016b/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.1-0.20200828183125-ce943fd02449/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.1/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20170114055629-f2499483f923/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180911220305-26e67e76b6c3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181005035420-146acd28ed58/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181023162649-9b4f9f5ad519/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181108082009-03003ca0c849/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181201002055-351d144fa1fc/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190125091013-d26f9f9a57f3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190320064053-1272bf9dcd53/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190619014844-b5b0513f8c1b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190628185345-da137c7871d7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190827160401-ba9fcec4b297/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191004110552-13f9640d40b9/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191112182307-2180aed22343/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200222125558-5a598a2470a0/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200301022130-244492dfa37a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200425230154-ff2c4b7c35a0/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200501053045-e0ff5e5a1de5/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200506145744-7e3656a0809f/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200513185701-a91f0712d120/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200602114024-627f9648deb9/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200904194848-62affa334b73/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201031054903-ff519b6c9102/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201202161906-c7110b5ffcbb/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201209123823-ac852fbbde11/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20201224014010-6772e930b67b/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210119194325-5f4716e94777/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210224082022-3d97a244fca7/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210316092652-d523dce5a7f4/go.mod h1:RBQZq4jEuRlivfhVLdyRGr576XBO4/greRjx4P4O3yc=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20210421230115-4e50805a0758/go.mod h1:72T/g9IO56b78aLF+1Kcs5dz7/ng1VjMUvfKvpfy+jM=\ngolang.org/x/net v0.0.0-20210503060351-7fd8e65b6420/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20210525063256-abc453219eb5/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20211015210444-4f30a5c0130f/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2 h1:CIJ76btIcR3eFI5EgSo6k1qKw9KJexJuRLI9G7Hp5wE=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20181106182150-f42d05182288/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20190402181905-9f3314589c9a/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200902213428-5d25da1a8d43/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20201109201403-9fd604954f58/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20201208152858-08078c50e5b5/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210218202405-ba52d332ba99/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210220000619-9bb904979d93/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210313182246-cd4f82c27b84/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210514164344-f6687ab2804c/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210628180205-a41e5a781914/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210805134026-6f1e6394065a/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210819190943-2bc19b11175f h1:Qmd2pbz05z7z6lm0DrgQVVPuBm92jqujBKMHMOlOQEw=\ngolang.org/x/oauth2 v0.0.0-20210819190943-2bc19b11175f/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190412183630-56d357773e84/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201207232520-09787c993a3a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20170830134202-bb24a47a89ea/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180816055513-1c9583448a9c/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180926160741-c2ed4eda69e7/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181026203630-95b1ffbd15a5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181122145206-62eef0e2fa9b/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190129075346-302c3dd5f1cc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190130150945-aca44879d564/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190209173611-3b5209105503/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190321052220-f7bb7a8bee54/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190403152447-81d4e9dc473e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190419153524-e8e3143a4f4a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190523142557-0e01d883c5c5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190531175056-4c3a928424d2/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190616124812-15dcb6c0061f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190620070143-6f217b454f45/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190626221950-04f50cda93cb/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190922100055-0a153f010e69/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191008105621-543471e840be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191022100944-742c48ecaeb7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191112214154-59a1497f0cea/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191220142924-d4481acd189f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191220220014-0732a990476f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200106162015-b016eb3dc98e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200212091648-12a6c2dcc1e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200302150141-5c8b2ff67527/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200331124033-c3d80250170d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200501052902-10377860bb8e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200511232937-7e40ca221e25/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200515095857-1151b9dac4a9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200519105757-fe76b779f299/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200615200032-f1bc736245b1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200622214017-ed371f2e16b4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200625212154-ddb9806d33ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200803210538-64077c9b5642/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200828194041-157a740278f4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200831180312-196b9ba8737a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200905004654-be1d3432aa8f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201015000850-e3ed0017c211/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201101102859-da207088b7d1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201112073958-5cba982894dd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201201145000-ef89a241ccb3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210104204734-6f8348627aad/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210112080510-489259a85091/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210217105451-b926d437f341/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210220050731-9a76102bfb43/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210225134936-a50acf3fe073/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210305230114-8fe3ee5dd75b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210315160823-c6e025ad8005/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210316164454-77fc1eacc6aa/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210320140829-1e4c9ba3b0c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210403161142-5e06dd20ab57/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210420072515-93ed5bcd2bfe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210514084401-e8d321eab015/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210603081109-ebe580a85c40/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210603125802-9665404d3644/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210806184541-e5e7981a1069/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210816074244-15123e1e1f71/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210823070655-63515b42dcdf/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210917161153-d61c044b1678/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211015200801-69063c4bb744/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211020174200-9d6173849985 h1:LOlKVhfDyahgmqa97awczplwkjzNaELFg3zRIJ13RYo=\ngolang.org/x/sys v0.0.0-20211020174200-9d6173849985/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210220032956-6a3ed077a48d/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210406210042-72f3dc4e9b72/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211 h1:JGgROgKl9N8DuW20oFS5gxc+lE67/N3FcwmBPMe7ArY=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.0.0-20160726164857-2910a502d2bf/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20181227161524-e6919f6577db/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/time v0.0.0-20180412165947-fbb02b2291d2/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20200416051211-89c76fbcd5d1/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20200630173020-3af7569d3a1e/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20210220033141-f8bda1e9f3ba/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac h1:7zkz7BUtwNFFqcowJ+RIgu2MaV/MapERkDIy+mwPyjs=\ngolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180525024113-a5b4c53f6e8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180828015842-6cd1fcedba52/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181011042414-1f849cf54d09/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181117154741-2ddaf7f79a09/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190110163146-51295c7ec13a/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190125232054-d66bd3c5d5a6/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190206041539-40960b6deb8e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190221204921-83362c3779f5/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190311215038-5c2858a9cfe5/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190322203728-c1a832b0ad89/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190329151228-23e29df326fe/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190416151739-9c9e1878f421/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190420181800-aa740d480789/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190422233926-fe54fb35175b/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190424220101-1e8e1cfdf96b/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190425163242-31fd60d6bfdc/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190521203540-521d6ed310dd/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190531172133-b3315ee88b7d/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190614205625-5aca471b1d59/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190617190820-da514acc4774/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190706070813-72ffa07ba3db/go.mod h1:jcCCGcm9btYwXyDqrUWc6MKQKKGJCWEQ3AfLSRIbEuI=\ngolang.org/x/tools v0.0.0-20190719005602-e377ae9d6386/go.mod h1:jcCCGcm9btYwXyDqrUWc6MKQKKGJCWEQ3AfLSRIbEuI=\ngolang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190823170909-c4a336ef6a2f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190910044552-dd2b5c81c578/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190920225731-5eefd052ad72/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191108193012-7d206e10da11/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191112195655-aa38f8e97acc/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191113191852-77e3bb0ad9e7/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191113232020-e2727e816f5a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191115202509-3a792d9c32b2/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191130070609-6e064ea0cf2d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191216173652-a0e659d51361/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20191227053925-7b8e75db28f4/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200102140908-9497f49d5709/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200103221440-774c71fcf114/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200117161641-43d50277825c/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200122220014-bf1340f18c4a/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200204074204-1cc6d1ef6c74/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200204192400-7124308813f3/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200207183749-b753a1ba74fa/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200212150539-ea181f53ac56/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200224181240-023911ca70b2/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200227222343-706bc42d1f0d/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200304193943-95d2e580d8eb/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200312045724-11d5b4c81c7d/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200324003944-a576cf524670/go.mod h1:Sl4aGygMT6LrqrWclx+PTx3U+LnKx/seiNR+3G19Ar8=\ngolang.org/x/tools v0.0.0-20200331025713-a30bf2db82d4/go.mod h1:Sl4aGygMT6LrqrWclx+PTx3U+LnKx/seiNR+3G19Ar8=\ngolang.org/x/tools v0.0.0-20200331202046-9d5940d49312/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200414032229-332987a829c3/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200422022333-3d57cf2e726e/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200426102838-f3a5411a4c3b/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200502202811-ed308ab3e770/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200505023115-26f46d2f7ef8/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200512131952-2bc93b1c0c88/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200515010526-7d3b6ebf133d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200616133436-c1934b75d054/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200618134242-20370b0cb4b2/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200626171337-aa94e735be7f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200729194436-6467de6f59a7/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200804011535-6c149bb5ef0d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200825202427-b303f430e36d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200828161849-5deb26317202/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200904185747-39188db58858/go.mod h1:Cj7w3i3Rnn0Xh82ur9kSqwfTHTeVxaDqrfMjpcNT6bE=\ngolang.org/x/tools v0.0.0-20200918232735-d647fc253266/go.mod h1:z6u4i615ZeAfBE4XtMziQW1fSVJXACjjbWkB/mvPzlU=\ngolang.org/x/tools v0.0.0-20201022035929-9cf592e881e9/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201105001634-bc3cf281b174/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201110124207-079ba7bd75cd/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201201161351-ac6f37ff4c2a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201208233053-a543418bbed2/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201224043029-2b0845dc783e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210105154028-b0ab187a4818/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210114065538-d78b04bdf963/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=\ngolang.org/x/tools v0.1.1/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.2/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.3/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.4/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/xerrors v0.0.0-20190410155217-1f06c39b4373/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20190513163551-3ee3066db522/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngomodules.xyz/jsonpatch/v2 v2.1.0/go.mod h1:IhYNNY4jnS53ZnfE4PAmpKtDpTCj1JFXc+3mwe7XcUU=\ngonum.org/v1/gonum v0.0.0-20190331200053-3d26580ed485/go.mod h1:2ltnJ7xHfj0zHS40VVPYEAAMTa3ZGguvHGBSJeRWqE0=\ngonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=\ngonum.org/v1/netlib v0.0.0-20190331212654-76723241ea4e/go.mod h1:kS+toOQn6AQKjmKJ7gzohV1XkqsFehRA2FbsbkopSuQ=\ngoogle.golang.org/api v0.3.1/go.mod h1:6wY9I6uQWHQ8EM57III9mq/AjF+i8G65rmVagqKMtkk=\ngoogle.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=\ngoogle.golang.org/api v0.5.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=\ngoogle.golang.org/api v0.6.0/go.mod h1:btoxGiFvQNVUZQ8W08zLtrVS08CNpINPEfxXxgJL1Q4=\ngoogle.golang.org/api v0.6.1-0.20190607001116-5213b8090861/go.mod h1:btoxGiFvQNVUZQ8W08zLtrVS08CNpINPEfxXxgJL1Q4=\ngoogle.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=\ngoogle.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.13.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.14.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.15.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.17.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.18.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.19.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.20.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.22.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.24.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.25.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.28.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.29.0/go.mod h1:Lcubydp8VUV7KeIHD9z2Bys/sm/vGKnG1UHuDBSrHWM=\ngoogle.golang.org/api v0.30.0/go.mod h1:QGmEvQ87FHZNiUVJkT14jQNYJ4ZJjdRF23ZXz5138Fc=\ngoogle.golang.org/api v0.31.0/go.mod h1:CL+9IBCa2WWU6gRuBWaKqGWLFFwbEUXkfeMkHLQWYWo=\ngoogle.golang.org/api v0.35.0/go.mod h1:/XrVsuzM0rZmrsbjJutiuftIzeuTQcEeaYcSk/mQ1dg=\ngoogle.golang.org/api v0.36.0/go.mod h1:+z5ficQTmoYpPn8LCUNVpK5I7hwkpjbcgqA7I34qYtE=\ngoogle.golang.org/api v0.40.0/go.mod h1:fYKFpnQN0DsDSKRVRcQSDQNtqWPfM9i+zNPxepjRCQ8=\ngoogle.golang.org/api v0.41.0/go.mod h1:RkxM5lITDfTzmyKFPt+wGrCJbVfniCr2ool8kTBzRTU=\ngoogle.golang.org/api v0.43.0/go.mod h1:nQsDGjRXMo4lvh5hP0TKqF244gqhGcr/YSIykhUk/94=\ngoogle.golang.org/api v0.47.0/go.mod h1:Wbvgpq1HddcWVtzsVLyfLp8lDg6AA241LmgIL59tHXo=\ngoogle.golang.org/api v0.48.0/go.mod h1:71Pr1vy+TAZRPkPs/xlCf5SsU8WjuAWv1Pfjbtukyy4=\ngoogle.golang.org/api v0.50.0/go.mod h1:4bNT5pAuq5ji4SRZm+5QIkjny9JAyVD/3gaSihNefaw=\ngoogle.golang.org/api v0.51.0/go.mod h1:t4HdrdoNgyN5cbEfm7Lum0lcLDLiise1F8qDKX00sOU=\ngoogle.golang.org/api v0.54.0/go.mod h1:7C4bFFOvVDGXjfDTAsgGwDgAxRDeQ4X8NvUedIt6z3k=\ngoogle.golang.org/api v0.55.0/go.mod h1:38yMfeP1kfjsl8isn0tliTjIb1rJXcQi4UXlbqivdVE=\ngoogle.golang.org/api v0.56.0/go.mod h1:38yMfeP1kfjsl8isn0tliTjIb1rJXcQi4UXlbqivdVE=\ngoogle.golang.org/api v0.58.0 h1:MDkAbYIB1JpSgCTOCYYoIec/coMlKK4oVbpnBLLcyT0=\ngoogle.golang.org/api v0.58.0/go.mod h1:cAbP2FsxoGVNwtgNAmmn3y5G1TWAiVYRmg4yku3lv+E=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.2.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.3.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=\ngoogle.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.7 h1:FZR1q0exgwxzPzp/aF+VccGrSfxfPpkBqjIIEq3ru6c=\ngoogle.golang.org/appengine v1.6.7/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190404172233-64821d5d2107/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190508193815-b515fa19cec8/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190530194941-fb225487d101/go.mod h1:z3L6/3dTEVtUr6QSP8miRzeRqwQOioJ9I66odjN4I7s=\ngoogle.golang.org/genproto v0.0.0-20190620144150-6af8c5fc6601/go.mod h1:z3L6/3dTEVtUr6QSP8miRzeRqwQOioJ9I66odjN4I7s=\ngoogle.golang.org/genproto v0.0.0-20190801165951-fa694d86fc64/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190911173649-1774047e7e51/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=\ngoogle.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1a/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191115194625-c23dd37a84c9/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191216164720-4f79533eabd1/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191220175831-5c49e3ecc1c1/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191230161307-f3c370f40bfb/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200115191322-ca5a22157cba/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200122232147-0452cf42e150/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200204135345-fa8e72b47b90/go.mod h1:GmwEX6Z4W5gMy59cAlVYjN9JhxgbQH6Gn+gFDQe2lzA=\ngoogle.golang.org/genproto v0.0.0-20200212174721-66ed5ce911ce/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200228133532-8c2c7df3a383/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200305110556-506484158171/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200312145019-da6875a35672/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200331122359-1ee6d9798940/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200430143042-b979b6f78d84/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200511104702-f5ebc3bea380/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200515170657-fc4c6c6a6587/go.mod h1:YsZOwe1myG/8QRHRsmBRE1LrgQY60beZKjly0O1fX9U=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto v0.0.0-20200527145253-8367513e4ece/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=\ngoogle.golang.org/genproto v0.0.0-20200618031413-b414f8b61790/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=\ngoogle.golang.org/genproto v0.0.0-20200626011028-ee7919e894b5/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200729003335-053ba62fc06f/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200831141814-d751682dd103/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200901141002-b3bf27a9dbd1/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200904004341-0bd0a958aa1d/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201109203340-2640f1f9cdfb/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201110150050-8816d57aaa9a/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201201144952-b05cb90ed32e/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201210142538-e3217bee35cc/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201214200347-8c77b98c765d/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210222152913-aa3ee6e6a81c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210303154014-9728d6b83eeb/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210310155132-4ce2db91004e/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210319143718-93e7006c17a6/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210402141018-6c239bbf2bb1/go.mod h1:9lPAdzaEmUacj36I+k7YKbEc5CXzPIeORRgDAUOu28A=\ngoogle.golang.org/genproto v0.0.0-20210513213006-bf773b8c8384/go.mod h1:P3QM42oQyzQSnHPnZ/vqoCdDmzH28fzWByN9asMeM8A=\ngoogle.golang.org/genproto v0.0.0-20210602131652-f16073e35f0c/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=\ngoogle.golang.org/genproto v0.0.0-20210604141403-392c879c8b08/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=\ngoogle.golang.org/genproto v0.0.0-20210608205507-b6d2f5bf0d7d/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=\ngoogle.golang.org/genproto v0.0.0-20210624195500-8bfb893ecb84/go.mod h1:SzzZ/N+nwJDaO1kznhnlzqS8ocJICar6hYhVyhi++24=\ngoogle.golang.org/genproto v0.0.0-20210713002101-d411969a0d9a/go.mod h1:AxrInvYm1dci+enl5hChSFPOmmUF1+uAa/UsgNRWd7k=\ngoogle.golang.org/genproto v0.0.0-20210716133855-ce7ef5c701ea/go.mod h1:AxrInvYm1dci+enl5hChSFPOmmUF1+uAa/UsgNRWd7k=\ngoogle.golang.org/genproto v0.0.0-20210728212813-7823e685a01f/go.mod h1:ob2IJxKrgPT52GcgX759i1sleT07tiKowYBGbczaW48=\ngoogle.golang.org/genproto v0.0.0-20210805201207-89edb61ffb67/go.mod h1:ob2IJxKrgPT52GcgX759i1sleT07tiKowYBGbczaW48=\ngoogle.golang.org/genproto v0.0.0-20210813162853-db860fec028c/go.mod h1:cFeNkxwySK631ADgubI+/XFU/xp8FD5KIVV4rj8UC5w=\ngoogle.golang.org/genproto v0.0.0-20210821163610-241b8fcbd6c8/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210828152312-66f60bf46e71/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210831024726-fe130286e0e2/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210909211513-a8c4777a87af/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210917145530-b395a37504d4/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210928142010-c7af6a1a74c9 h1:XTH066D35LyHehRwlYhoK3qA+Hcgvg5xREG4kFQEW1Y=\ngoogle.golang.org/genproto v0.0.0-20210928142010-c7af6a1a74c9/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/grpc v1.14.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=\ngoogle.golang.org/grpc v1.17.0/go.mod h1:6QZJwpn2B+Zp71q/5VxRsJ6NXXVCE5NRUHRo+f3cWCs=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.0/go.mod h1:chYK+tFQF0nDUGJgXMSgLCQk3phJEuONr2DCgLDdAQM=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.22.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.22.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.23.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.28.0/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKal+60=\ngoogle.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=\ngoogle.golang.org/grpc v1.30.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.31.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.31.1/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/grpc v1.34.0/go.mod h1:WotjhfgOW/POjDeRt8vscBtXq+2VjORFy659qA51WJ8=\ngoogle.golang.org/grpc v1.35.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.36.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.36.1/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.37.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.37.1/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.38.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.39.0/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=\ngoogle.golang.org/grpc v1.39.1/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=\ngoogle.golang.org/grpc v1.40.0/go.mod h1:ogyxbiOoUXAkP+4+xa6PZSE9DZgIHtSpzjDTB9KAK34=\ngoogle.golang.org/grpc v1.41.0 h1:f+PlOh7QV4iIJkPrx5NQ7qaNGFQ3OTse67yaDHfju4E=\ngoogle.golang.org/grpc v1.41.0/go.mod h1:U3l9uK9J0sini8mHphKoXyaqDA/8VyGnDee1zzIUK6k=\ngoogle.golang.org/grpc/cmd/protoc-gen-go-grpc v1.1.0/go.mod h1:6Kw0yEErY5E/yWrBtf03jp27GLLJujG4z/JK95pnjjw=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.27.1 h1:SnqbnDw1V7RiZcXPx5MEeqPv2s79L9i7BJUlG/+RurQ=\ngoogle.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/asn1-ber.v1 v1.0.0-20181015200546-f715ec2f112d/go.mod h1:cuepJuh7vyXfUyUwEgHQXw849cJrilpS5NeIjOWESAw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b h1:QRR6H1YWRnHb4Y/HeNFCTJLFVxaq6wH4YuVdsUOr75U=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/cheggaaa/pb.v1 v1.0.25/go.mod h1:V/YB90LKu/1FcN3WVnfiiE5oMCibMjukxqG/qStrOgw=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/gcfg.v1 v1.2.0/go.mod h1:yesOnuUOFQAhST5vPY4nbZsb/huCgGGXlipJsBn0b3o=\ngopkg.in/gcfg.v1 v1.2.3/go.mod h1:yesOnuUOFQAhST5vPY4nbZsb/huCgGGXlipJsBn0b3o=\ngopkg.in/h2non/filetype.v1 v1.0.5 h1:CC1jjJjoEhNVbMhXYalmGBhOBK2V70Q1N850wt/98/Y=\ngopkg.in/h2non/filetype.v1 v1.0.5/go.mod h1:M0yem4rwSX5lLVrkEuRRp2/NinFMD5vgJ4DlAhZcfNo=\ngopkg.in/inconshreveable/log15.v2 v2.0.0-20180818164646-67afb5ed74ec/go.mod h1:aPpfJ7XW+gOuirDoZ8gHhLh3kZ1B08FtV2bbmy7Jv3s=\ngopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=\ngopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=\ngopkg.in/ini.v1 v1.51.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/ini.v1 v1.56.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/ini.v1 v1.57.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/ini.v1 v1.63.2 h1:tGK/CyBg7SMzb60vP1M03vNZ3VDu3wGQJwn7Sxi9r3c=\ngopkg.in/ini.v1 v1.63.2/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/jcmturner/aescts.v1 v1.0.1 h1:cVVZBK2b1zY26haWB4vbBiZrfFQnfbTVrE3xZq6hrEw=\ngopkg.in/jcmturner/aescts.v1 v1.0.1/go.mod h1:nsR8qBOg+OucoIW+WMhB3GspUQXq9XorLnQb9XtvcOo=\ngopkg.in/jcmturner/dnsutils.v1 v1.0.1 h1:cIuC1OLRGZrld+16ZJvvZxVJeKPsvd5eUIvxfoN5hSM=\ngopkg.in/jcmturner/dnsutils.v1 v1.0.1/go.mod h1:m3v+5svpVOhtFAP/wSz+yzh4Mc0Fg7eRhxkJMWSIz9Q=\ngopkg.in/jcmturner/goidentity.v3 v3.0.0 h1:1duIyWiTaYvVx3YX2CYtpJbUFd7/UuPYCfgXtQ3VTbI=\ngopkg.in/jcmturner/goidentity.v3 v3.0.0/go.mod h1:oG2kH0IvSYNIu80dVAyu/yoefjq1mNfM5bm88whjWx4=\ngopkg.in/jcmturner/gokrb5.v7 v7.5.0 h1:a9tsXlIDD9SKxotJMK3niV7rPZAJeX2aD/0yg3qlIrg=\ngopkg.in/jcmturner/gokrb5.v7 v7.5.0/go.mod h1:l8VISx+WGYp+Fp7KRbsiUuXTTOnxIc3Tuvyavf11/WM=\ngopkg.in/jcmturner/rpc.v1 v1.1.0 h1:QHIUxTX1ISuAv9dD2wJ9HWQVuWDX/Zc0PfeC2tjc4rU=\ngopkg.in/jcmturner/rpc.v1 v1.1.0/go.mod h1:YIdkC4XfD6GXbzje11McwsDuOlZQSb9W4vfLvuNnlv8=\ngopkg.in/natefinch/lumberjack.v2 v2.0.0/go.mod h1:l0ndWWf7gzL7RNwBG7wST/UCcT4T24xpD6X8LsfU/+k=\ngopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=\ngopkg.in/square/go-jose.v2 v2.2.2/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=\ngopkg.in/square/go-jose.v2 v2.3.1 h1:SK5KegNXmKmqE342YYN2qPHEnUYeoMiXXl1poUlI+o4=\ngopkg.in/square/go-jose.v2 v2.3.1/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/urfave/cli.v1 v1.20.0/go.mod h1:vuBzUtMdQeixQj8LVd+/98pzhxNGQoyuPBlsXHOQNO0=\ngopkg.in/warnings.v0 v0.1.1/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.7/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20200605160147-a5ece683394c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b h1:h8qDotaEPuJATrMmW04NCwg7v22aHH28wwpauUhK9Oo=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=\ngotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=\ngotest.tools/v3 v3.0.3/go.mod h1:Z7Lb0S5l+klDB31fvDQX8ss/FlKDxtlFlw3Oa8Ymbl8=\nhonnef.co/go/tools v0.0.0-20180728063816-88497007e858/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nhonnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nhonnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nhonnef.co/go/tools v0.0.1-2020.1.5/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nk8s.io/api v0.17.0/go.mod h1:npsyOePkeP0CPwyGfXDHxvypiYMJxBWAMpQxCaJ4ZxI=\nk8s.io/api v0.17.4/go.mod h1:5qxx6vjmwUVG2nHQTKGlLts8Tbok8PzHl4vHtVFuZCA=\nk8s.io/api v0.18.3/go.mod h1:UOaMwERbqJMfeeeHc8XJKawj4P9TgDRnViIqqBeH2QA=\nk8s.io/api v0.19.2/go.mod h1:IQpK0zFQ1xc5iNIQPqzgoOwuFugaYHK4iCknlAQP9nI=\nk8s.io/api v0.20.1/go.mod h1:KqwcCVogGxQY3nBlRpwt+wpAMF/KjaCc7RpywacvqUo=\nk8s.io/api v0.20.2/go.mod h1:d7n6Ehyzx+S+cE3VhTGfVNNqtGc/oL9DCdYYahlurV8=\nk8s.io/api v0.21.1 h1:94bbZ5NTjdINJEdzOkpS4vdPhkb1VFpTYC9zh43f75c=\nk8s.io/api v0.21.1/go.mod h1:FstGROTmsSHBarKc8bylzXih8BLNYTiS3TZcsoEDg2s=\nk8s.io/apiextensions-apiserver v0.18.3/go.mod h1:TMsNGs7DYpMXd+8MOCX8KzPOCx8fnZMoIGB24m03+JE=\nk8s.io/apiextensions-apiserver v0.20.1/go.mod h1:ntnrZV+6a3dB504qwC5PN/Yg9PBiDNt1EVqbW2kORVk=\nk8s.io/apiextensions-apiserver v0.20.2/go.mod h1:F6TXp389Xntt+LUq3vw6HFOLttPa0V8821ogLGwb6Zs=\nk8s.io/apiextensions-apiserver v0.21.1/go.mod h1:KESQFCGjqVcVsZ9g0xX5bacMjyX5emuWcS2arzdEouA=\nk8s.io/apimachinery v0.17.0/go.mod h1:b9qmWdKlLuU9EBh+06BtLcSf/Mu89rWL33naRxs1uZg=\nk8s.io/apimachinery v0.17.1-beta.0/go.mod h1:b9qmWdKlLuU9EBh+06BtLcSf/Mu89rWL33naRxs1uZg=\nk8s.io/apimachinery v0.17.4/go.mod h1:gxLnyZcGNdZTCLnq3fgzyg2A5BVCHTNDFrw8AmuJ+0g=\nk8s.io/apimachinery v0.18.3/go.mod h1:OaXp26zu/5J7p0f92ASynJa1pZo06YlV9fG7BoWbCko=\nk8s.io/apimachinery v0.19.2/go.mod h1:DnPGDnARWFvYa3pMHgSxtbZb7gpzzAZ1pTfaUNDVlmA=\nk8s.io/apimachinery v0.20.1/go.mod h1:WlLqWAHZGg07AeltaI0MV5uk1Omp8xaN0JGLY6gkRpU=\nk8s.io/apimachinery v0.20.2/go.mod h1:WlLqWAHZGg07AeltaI0MV5uk1Omp8xaN0JGLY6gkRpU=\nk8s.io/apimachinery v0.21.1 h1:Q6XuHGlj2xc+hlMCvqyYfbv3H7SRGn2c8NycxJquDVs=\nk8s.io/apimachinery v0.21.1/go.mod h1:jbreFvJo3ov9rj7eWT7+sYiRx+qZuCYXwWT1bcDswPY=\nk8s.io/apiserver v0.17.4/go.mod h1:5ZDQ6Xr5MNBxyi3iUZXS84QOhZl+W7Oq2us/29c0j9I=\nk8s.io/apiserver v0.18.3/go.mod h1:tHQRmthRPLUtwqsOnJJMoI8SW3lnoReZeE861lH8vUw=\nk8s.io/apiserver v0.20.1/go.mod h1:ro5QHeQkgMS7ZGpvf4tSMx6bBOgPfE+f52KwvXfScaU=\nk8s.io/apiserver v0.20.2/go.mod h1:2nKd93WyMhZx4Hp3RfgH2K5PhwyTrprrkWYnI7id7jA=\nk8s.io/apiserver v0.21.1/go.mod h1:nLLYZvMWn35glJ4/FZRhzLG/3MPxAaZTgV4FJZdr+tY=\nk8s.io/client-go v0.17.0/go.mod h1:TYgR6EUHs6k45hb6KWjVD6jFZvJV4gHDikv/It0xz+k=\nk8s.io/client-go v0.17.4/go.mod h1:ouF6o5pz3is8qU0/qYL2RnoxOPqgfuidYLowytyLJmc=\nk8s.io/client-go v0.18.3/go.mod h1:4a/dpQEvzAhT1BbuWW09qvIaGw6Gbu1gZYiQZIi1DMw=\nk8s.io/client-go v0.19.2/go.mod h1:S5wPhCqyDNAlzM9CnEdgTGV4OqhsW3jGO1UM1epwfJA=\nk8s.io/client-go v0.20.1/go.mod h1:/zcHdt1TeWSd5HoUe6elJmHSQ6uLLgp4bIJHVEuy+/Y=\nk8s.io/client-go v0.20.2/go.mod h1:kH5brqWqp7HDxUFKoEgiI4v8G1xzbe9giaCenUWJzgE=\nk8s.io/client-go v0.21.1 h1:bhblWYLZKUu+pm50plvQF8WpY6TXdRRtcS/K9WauOj4=\nk8s.io/client-go v0.21.1/go.mod h1:/kEw4RgW+3xnBGzvp9IWxKSNA+lXn3A7AuH3gdOAzLs=\nk8s.io/cloud-provider v0.17.4/go.mod h1:XEjKDzfD+b9MTLXQFlDGkk6Ho8SGMpaU8Uugx/KNK9U=\nk8s.io/code-generator v0.17.2/go.mod h1:DVmfPQgxQENqDIzVR2ddLXMH34qeszkKSdH/N+s+38s=\nk8s.io/code-generator v0.18.3/go.mod h1:TgNEVx9hCyPGpdtCWA34olQYLkh3ok9ar7XfSsr8b6c=\nk8s.io/code-generator v0.20.1/go.mod h1:UsqdF+VX4PU2g46NC2JRs4gc+IfrctnwHb76RNbWHJg=\nk8s.io/code-generator v0.20.2/go.mod h1:UsqdF+VX4PU2g46NC2JRs4gc+IfrctnwHb76RNbWHJg=\nk8s.io/code-generator v0.21.1/go.mod h1:hUlps5+9QaTrKx+jiM4rmq7YmH8wPOIko64uZCHDh6Q=\nk8s.io/component-base v0.17.0/go.mod h1:rKuRAokNMY2nn2A6LP/MiwpoaMRHpfRnrPaUJJj1Yoc=\nk8s.io/component-base v0.17.4/go.mod h1:5BRqHMbbQPm2kKu35v3G+CpVq4K0RJKC7TRioF0I9lE=\nk8s.io/component-base v0.18.3/go.mod h1:bp5GzGR0aGkYEfTj+eTY0AN/vXTgkJdQXjNTTVUaa3k=\nk8s.io/component-base v0.20.1/go.mod h1:guxkoJnNoh8LNrbtiQOlyp2Y2XFCZQmrcg2n/DeYNLk=\nk8s.io/component-base v0.20.2/go.mod h1:pzFtCiwe/ASD0iV7ySMu8SYVJjCapNM9bjvk7ptpKh0=\nk8s.io/component-base v0.21.1/go.mod h1:NgzFZ2qu4m1juby4TnrmpR8adRk6ka62YdH5DkIIyKA=\nk8s.io/csi-translation-lib v0.17.4/go.mod h1:CsxmjwxEI0tTNMzffIAcgR9lX4wOh6AKHdxQrT7L0oo=\nk8s.io/gengo v0.0.0-20190128074634-0689ccc1d7d6/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=\nk8s.io/gengo v0.0.0-20190822140433-26a664648505/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=\nk8s.io/gengo v0.0.0-20200114144118-36b2048a9120/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=\nk8s.io/gengo v0.0.0-20200413195148-3a45101e95ac/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=\nk8s.io/gengo v0.0.0-20201113003025-83324d819ded/go.mod h1:FiNAH4ZV3gBg2Kwh89tzAEV2be7d5xI0vBa/VySYy3E=\nk8s.io/gengo v0.0.0-20201214224949-b6c5ce23f027/go.mod h1:FiNAH4ZV3gBg2Kwh89tzAEV2be7d5xI0vBa/VySYy3E=\nk8s.io/klog v0.0.0-20181102134211-b9b56d5dfc92/go.mod h1:Gq+BEi5rUBO/HRz0bTSXDUcqjScdoY3a9IHpCEIOOfk=\nk8s.io/klog v0.3.0/go.mod h1:Gq+BEi5rUBO/HRz0bTSXDUcqjScdoY3a9IHpCEIOOfk=\nk8s.io/klog v1.0.0 h1:Pt+yjF5aB1xDSVbau4VsWe+dQNzA0qv1LlXdC2dF6Q8=\nk8s.io/klog v1.0.0/go.mod h1:4Bi6QPql/J/LkTDqv7R/cd3hPo4k2DG6Ptcz060Ez5I=\nk8s.io/klog/v2 v2.0.0/go.mod h1:PBfzABfn139FHAV07az/IF9Wp1bkk3vpT2XSJ76fSDE=\nk8s.io/klog/v2 v2.2.0/go.mod h1:Od+F08eJP+W3HUb4pSrPpgp9DGU4GzlpG/TmITuYh/Y=\nk8s.io/klog/v2 v2.4.0/go.mod h1:Od+F08eJP+W3HUb4pSrPpgp9DGU4GzlpG/TmITuYh/Y=\nk8s.io/klog/v2 v2.8.0 h1:Q3gmuM9hKEjefWFFYF0Mat+YyFJvsUyYuwyNNJ5C9Ts=\nk8s.io/klog/v2 v2.8.0/go.mod h1:hy9LJ/NvuK+iVyP4Ehqva4HxZG/oXyIS3n3Jmire4Ec=\nk8s.io/kube-openapi v0.0.0-20191107075043-30be4d16710a/go.mod h1:1TqjTSzOxsLGIKfj0lK8EeCP7K1iUG65v09OM0/WG5E=\nk8s.io/kube-openapi v0.0.0-20200410145947-61e04a5be9a6/go.mod h1:GRQhZsXIAJ1xR0C9bd8UpWHZ5plfAS9fzPjJuQ6JL3E=\nk8s.io/kube-openapi v0.0.0-20200805222855-6aeccd4b50c6/go.mod h1:UuqjUnNftUyPE5H64/qeyjQoUZhGpeFDVdxjTeEVN2o=\nk8s.io/kube-openapi v0.0.0-20201113171705-d219536bb9fd/go.mod h1:WOJ3KddDSol4tAGcJo0Tvi+dK12EcqSLqcWsryKMpfM=\nk8s.io/kube-openapi v0.0.0-20210305001622-591a79e4bda7 h1:vEx13qjvaZ4yfObSSXW7BrMc/KQBBT/Jyee8XtLf4x0=\nk8s.io/kube-openapi v0.0.0-20210305001622-591a79e4bda7/go.mod h1:wXW5VT87nVfh/iLV8FpR2uDvrFyomxbtb1KivDbvPTE=\nk8s.io/legacy-cloud-providers v0.17.4/go.mod h1:FikRNoD64ECjkxO36gkDgJeiQWwyZTuBkhu+yxOc1Js=\nk8s.io/utils v0.0.0-20191114184206-e782cd3c129f/go.mod h1:sZAwmy6armz5eXlNoLmJcl4F1QuKu7sr+mFQ0byX7Ew=\nk8s.io/utils v0.0.0-20200324210504-a9aa75ae1b89/go.mod h1:sZAwmy6armz5eXlNoLmJcl4F1QuKu7sr+mFQ0byX7Ew=\nk8s.io/utils v0.0.0-20200729134348-d5654de09c73/go.mod h1:jPW/WVKK9YHAvNhRxK0md/EJ228hCsBRufyofKtW8HA=\nk8s.io/utils v0.0.0-20201110183641-67b214c5f920 h1:CbnUZsM497iRC5QMVkHwyl8s2tB3g7yaSHkYPkpgelw=\nk8s.io/utils v0.0.0-20201110183641-67b214c5f920/go.mod h1:jPW/WVKK9YHAvNhRxK0md/EJ228hCsBRufyofKtW8HA=\nmaze.io/x/duration v0.0.0-20160924141736-faac084b6075 h1:4zVed9rL46683x3koxOYLzh8FlLFjnRrzTo2uvgA5D4=\nmaze.io/x/duration v0.0.0-20160924141736-faac084b6075/go.mod h1:1kfR2ph3CIvtfIQ8D8JhmAgePmnAUnR+AWYWUBo+l08=\nmodernc.org/cc v1.0.0/go.mod h1:1Sk4//wdnYJiUIxnW8ddKpaOJCF37yAdqYnkxUpaYxw=\nmodernc.org/golex v1.0.0/go.mod h1:b/QX9oBD/LhixY6NDh+IdGv17hgB+51fET1i2kPSmvk=\nmodernc.org/mathutil v1.0.0/go.mod h1:wU0vUrJsVWBZ4P6e7xtFJEhFSNsfRLJ8H458uRjg03k=\nmodernc.org/strutil v1.0.0/go.mod h1:lstksw84oURvj9y3tn8lGvRxyRC1S2+g5uuIzNfIOBs=\nmodernc.org/xc v1.0.0/go.mod h1:mRNCo0bvLjGhHO9WsyuKVU4q0ceiDDDoEeWDJHrNx8I=\nmvdan.cc/interfacer v0.0.0-20180901003855-c20040233aed/go.mod h1:Xkxe497xwlCKkIaQYRfC7CSLworTXY9RMqwhhCm+8Nc=\nmvdan.cc/lint v0.0.0-20170908181259-adc824a0674b/go.mod h1:2odslEg/xrtNQqCYg2/jCoyKnw3vv5biOc3JnIcYfL4=\nmvdan.cc/unparam v0.0.0-20190720180237-d51796306d8f/go.mod h1:4G1h5nDURzA3bwVMZIVpwbkw+04kSxk3rAtzlimaUJw=\nmvdan.cc/unparam v0.0.0-20200501210554-b37ab49443f7/go.mod h1:HGC5lll35J70Y5v7vCGb9oLhHoScFwkHDJm/05RdSTc=\npack.ag/amqp v0.11.2/go.mod h1:4/cbmt4EJXSKlG6LCfWHoqmN0uFdy5i/+YFz+fTfhV4=\nrsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=\nrsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=\nrsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nsigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.7/go.mod h1:PHgbrJT7lCHcxMU+mDHEm+nx46H4zuuHZkDP6icnhu0=\nsigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.14/go.mod h1:LEScyzhFmoF5pso/YSeBstl57mOzx9xlU9n85RGrDQg=\nsigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.15/go.mod h1:LEScyzhFmoF5pso/YSeBstl57mOzx9xlU9n85RGrDQg=\nsigs.k8s.io/controller-runtime v0.8.0 h1:s0dYdo7lQgJiAf+alP82PRwbz+oAqL3oSyMQ18XRDOc=\nsigs.k8s.io/controller-runtime v0.8.0/go.mod h1:v9Lbj5oX443uR7GXYY46E0EE2o7k2YxQ58GxVNeXSW4=\nsigs.k8s.io/structured-merge-diff v0.0.0-20190525122527-15d366b2352e/go.mod h1:wWxsB5ozmmv/SG7nM11ayaAW51xMvak/t1r0CSlcokI=\nsigs.k8s.io/structured-merge-diff v1.0.1-0.20191108220359-b1b620dd3f06 h1:zD2IemQ4LmOcAumeiyDWXKUI2SO0NYDe3H6QGvPOVgU=\nsigs.k8s.io/structured-merge-diff v1.0.1-0.20191108220359-b1b620dd3f06/go.mod h1:/ULNhyfzRopfcjskuui0cTITekDduZ7ycKN3oUT9R18=\nsigs.k8s.io/structured-merge-diff/v3 v3.0.0-20200116222232-67a7b8c61874/go.mod h1:PlARxl6Hbt/+BC80dRLi1qAmnMqwqDg62YvvVkZjemw=\nsigs.k8s.io/structured-merge-diff/v3 v3.0.0/go.mod h1:PlARxl6Hbt/+BC80dRLi1qAmnMqwqDg62YvvVkZjemw=\nsigs.k8s.io/structured-merge-diff/v4 v4.0.1/go.mod h1:bJZC9H9iH24zzfZ/41RGcq60oK1F7G282QMXDPYydCw=\nsigs.k8s.io/structured-merge-diff/v4 v4.0.2/go.mod h1:bJZC9H9iH24zzfZ/41RGcq60oK1F7G282QMXDPYydCw=\nsigs.k8s.io/structured-merge-diff/v4 v4.1.0 h1:C4r9BgJ98vrKnnVCjwCSXcWjWe0NKcUQkmzDXZXGwH8=\nsigs.k8s.io/structured-merge-diff/v4 v4.1.0/go.mod h1:bJZC9H9iH24zzfZ/41RGcq60oK1F7G282QMXDPYydCw=\nsigs.k8s.io/yaml v1.1.0/go.mod h1:UJmg0vDUVViEyp3mgSv9WPwZCDxu4rQW1olrI1uml+o=\nsigs.k8s.io/yaml v1.2.0 h1:kr/MCeFWJWTwyaHoR9c8EjH9OumOmoF9YGiZd7lFm/Q=\nsigs.k8s.io/yaml v1.2.0/go.mod h1:yfXDCHCao9+ENCvLSE62v9VSji2MKu5jeNfTrofGhJc=\nsourcegraph.com/sourcegraph/appdash v0.0.0-20190731080439-ebfcffb1b5c0/go.mod h1:hI742Nqp5OhwiqlzhgfbWU4mW4yO10fP+LoT9WOswdU=\nsourcegraph.com/sqs/pbtypes v0.0.0-20180604144634-d3ebe8f20ae4/go.mod h1:ketZ/q3QxT9HOBeFhu6RdvsftgpsbFHBF5Cas6cDKZ0=\nsourcegraph.com/sqs/pbtypes v1.0.0/go.mod h1:3AciMUv4qUuRHRHhOG4TZOB+72GdPVz5k+c648qsFS4=\n"], "fixing_code": ["// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"sort\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/minio/madmin-go\"\n\t\"github.com/minio/minio/internal/auth\"\n\t\"github.com/minio/minio/internal/config/dns\"\n\t\"github.com/minio/minio/internal/logger\"\n\tiampolicy \"github.com/minio/pkg/iam/policy\"\n)\n\n// RemoveUser - DELETE /minio/admin/v3/remove-user?accessKey=<access_key>\nfunc (a adminAPIHandlers) RemoveUser(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"RemoveUser\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.DeleteUserAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\taccessKey := vars[\"accessKey\"]\n\n\tok, _, err := globalIAMSys.IsTempUser(accessKey)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\tif ok {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, errIAMActionNotAllowed), r.URL)\n\t\treturn\n\t}\n\n\tif err := globalIAMSys.DeleteUser(ctx, accessKey, true); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// ListUsers - GET /minio/admin/v3/list-users?bucket={bucket}\nfunc (a adminAPIHandlers) ListBucketUsers(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListBucketUsers\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, cred := validateAdminReq(ctx, w, r, iampolicy.ListUsersAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tbucket := mux.Vars(r)[\"bucket\"]\n\n\tpassword := cred.SecretKey\n\n\tallCredentials, err := globalIAMSys.ListBucketUsers(bucket)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tdata, err := json.Marshal(allCredentials)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\teconfigData, err := madmin.EncryptData(password, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, econfigData)\n}\n\n// ListUsers - GET /minio/admin/v3/list-users\nfunc (a adminAPIHandlers) ListUsers(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListUsers\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, cred := validateAdminReq(ctx, w, r, iampolicy.ListUsersAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tpassword := cred.SecretKey\n\n\tallCredentials, err := globalIAMSys.ListUsers()\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tdata, err := json.Marshal(allCredentials)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\teconfigData, err := madmin.EncryptData(password, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, econfigData)\n}\n\n// GetUserInfo - GET /minio/admin/v3/user-info\nfunc (a adminAPIHandlers) GetUserInfo(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"GetUserInfo\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tvars := mux.Vars(r)\n\tname := vars[\"accessKey\"]\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\tcheckDenyOnly := false\n\tif name == cred.AccessKey {\n\t\t// Check that there is no explicit deny - otherwise it's allowed\n\t\t// to view one's own info.\n\t\tcheckDenyOnly = true\n\t}\n\n\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tGroups:          cred.Groups,\n\t\tAction:          iampolicy.GetUserAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t\tDenyOnly:        checkDenyOnly,\n\t}) {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\treturn\n\t}\n\n\tuserInfo, err := globalIAMSys.GetUserInfo(ctx, name)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tdata, err := json.Marshal(userInfo)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, data)\n}\n\n// UpdateGroupMembers - PUT /minio/admin/v3/update-group-members\nfunc (a adminAPIHandlers) UpdateGroupMembers(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"UpdateGroupMembers\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.AddUserToGroupAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tdata, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tvar updReq madmin.GroupAddRemove\n\terr = json.Unmarshal(data, &updReq)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tif updReq.IsRemove {\n\t\terr = globalIAMSys.RemoveUsersFromGroup(ctx, updReq.Group, updReq.Members)\n\t} else {\n\t\terr = globalIAMSys.AddUsersToGroup(ctx, updReq.Group, updReq.Members)\n\t}\n\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// GetGroup - /minio/admin/v3/group?group=mygroup1\nfunc (a adminAPIHandlers) GetGroup(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"GetGroup\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.GetGroupAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tgroup := vars[\"group\"]\n\n\tgdesc, err := globalIAMSys.GetGroupDescription(group)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tbody, err := json.Marshal(gdesc)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, body)\n}\n\n// ListGroups - GET /minio/admin/v3/groups\nfunc (a adminAPIHandlers) ListGroups(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListGroups\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.ListGroupsAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tgroups, err := globalIAMSys.ListGroups(ctx)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tbody, err := json.Marshal(groups)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, body)\n}\n\n// SetGroupStatus - PUT /minio/admin/v3/set-group-status?group=mygroup1&status=enabled\nfunc (a adminAPIHandlers) SetGroupStatus(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"SetGroupStatus\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.EnableGroupAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tgroup := vars[\"group\"]\n\tstatus := vars[\"status\"]\n\n\tvar err error\n\tswitch status {\n\tcase statusEnabled:\n\t\terr = globalIAMSys.SetGroupStatus(ctx, group, true)\n\tcase statusDisabled:\n\t\terr = globalIAMSys.SetGroupStatus(ctx, group, false)\n\tdefault:\n\t\terr = errInvalidArgument\n\t}\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// SetUserStatus - PUT /minio/admin/v3/set-user-status?accessKey=<access_key>&status=[enabled|disabled]\nfunc (a adminAPIHandlers) SetUserStatus(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"SetUserStatus\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.EnableUserAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\taccessKey := vars[\"accessKey\"]\n\tstatus := vars[\"status\"]\n\n\t// This API is not allowed to lookup accessKey user status\n\tif accessKey == globalActiveCred.AccessKey {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tif err := globalIAMSys.SetUserStatus(ctx, accessKey, madmin.AccountStatus(status)); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// AddUser - PUT /minio/admin/v3/add-user?accessKey=<access_key>\nfunc (a adminAPIHandlers) AddUser(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"AddUser\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tvars := mux.Vars(r)\n\taccessKey := vars[\"accessKey\"]\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\t// Not allowed to add a user with same access key as root credential\n\tif owner && accessKey == cred.AccessKey {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAddUserInvalidArgument), r.URL)\n\t\treturn\n\t}\n\n\tuserCred, exists := globalIAMSys.GetUser(ctx, accessKey)\n\tif exists && (userCred.IsTemp() || userCred.IsServiceAccount()) {\n\t\t// Updating STS credential is not allowed, and this API does not\n\t\t// support updating service accounts.\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAddUserInvalidArgument), r.URL)\n\t\treturn\n\t}\n\n\tif (cred.IsTemp() || cred.IsServiceAccount()) && cred.ParentUser == accessKey {\n\t\t// Incoming access key matches parent user then we should\n\t\t// reject password change requests.\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAddUserInvalidArgument), r.URL)\n\t\treturn\n\t}\n\n\tcheckDenyOnly := false\n\tif accessKey == cred.AccessKey {\n\t\t// Check that there is no explicit deny - otherwise it's allowed\n\t\t// to change one's own password.\n\t\tcheckDenyOnly = true\n\t}\n\n\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tGroups:          cred.Groups,\n\t\tAction:          iampolicy.CreateUserAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t\tDenyOnly:        checkDenyOnly,\n\t}) {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\treturn\n\t}\n\n\tif r.ContentLength > maxEConfigJSONSize || r.ContentLength == -1 {\n\t\t// More than maxConfigSize bytes were available\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminConfigTooLarge), r.URL)\n\t\treturn\n\t}\n\n\tpassword := cred.SecretKey\n\tconfigBytes, err := madmin.DecryptData(password, io.LimitReader(r.Body, r.ContentLength))\n\tif err != nil {\n\t\tlogger.LogIf(ctx, err)\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminConfigBadJSON), r.URL)\n\t\treturn\n\t}\n\n\tvar ureq madmin.AddOrUpdateUserReq\n\tif err = json.Unmarshal(configBytes, &ureq); err != nil {\n\t\tlogger.LogIf(ctx, err)\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminConfigBadJSON), r.URL)\n\t\treturn\n\t}\n\n\tif err = globalIAMSys.CreateUser(ctx, accessKey, ureq); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// AddServiceAccount - PUT /minio/admin/v3/add-service-account\nfunc (a adminAPIHandlers) AddServiceAccount(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"AddServiceAccount\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\tpassword := cred.SecretKey\n\treqBytes, err := madmin.DecryptData(password, io.LimitReader(r.Body, r.ContentLength))\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErrWithErr(ErrAdminConfigBadJSON, err), r.URL)\n\t\treturn\n\t}\n\n\tvar createReq madmin.AddServiceAccountReq\n\tif err = json.Unmarshal(reqBytes, &createReq); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErrWithErr(ErrAdminConfigBadJSON, err), r.URL)\n\t\treturn\n\t}\n\n\tvar (\n\t\ttargetUser   string\n\t\ttargetGroups []string\n\t)\n\n\t// If the request did not set a TargetUser, the service account is\n\t// created for the request sender.\n\ttargetUser = createReq.TargetUser\n\tif targetUser == \"\" {\n\t\ttargetUser = cred.AccessKey\n\t}\n\n\topts := newServiceAccountOpts{\n\t\taccessKey: createReq.AccessKey,\n\t\tsecretKey: createReq.SecretKey,\n\t\tclaims:    make(map[string]interface{}),\n\t}\n\n\t// Find the user for the request sender (as it may be sent via a service\n\t// account or STS account):\n\trequestorUser := cred.AccessKey\n\trequestorParentUser := cred.AccessKey\n\trequestorGroups := cred.Groups\n\trequestorIsDerivedCredential := false\n\tif cred.IsServiceAccount() || cred.IsTemp() {\n\t\trequestorParentUser = cred.ParentUser\n\t\trequestorIsDerivedCredential = true\n\t}\n\n\t// Check if we are creating svc account for request sender.\n\tisSvcAccForRequestor := false\n\tif targetUser == requestorUser || targetUser == requestorParentUser {\n\t\tisSvcAccForRequestor = true\n\t}\n\n\t// If we are creating svc account for request sender, ensure\n\t// that targetUser is a real user (i.e. not derived\n\t// credentials).\n\tif isSvcAccForRequestor {\n\t\t// Check if adding service account is explicitly denied.\n\t\t//\n\t\t// This allows turning off service accounts for request sender,\n\t\t// if there is no deny statement this call is implicitly enabled.\n\t\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     requestorUser,\n\t\t\tGroups:          requestorGroups,\n\t\t\tAction:          iampolicy.CreateServiceAccountAdminAction,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tClaims:          claims,\n\t\t\tDenyOnly:        true,\n\t\t}) {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\n\t\tif requestorIsDerivedCredential {\n\t\t\tif requestorParentUser == \"\" {\n\t\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx,\n\t\t\t\t\terrors.New(\"service accounts cannot be generated for temporary credentials without parent\")), r.URL)\n\t\t\t\treturn\n\t\t\t}\n\t\t\ttargetUser = requestorParentUser\n\t\t}\n\t\ttargetGroups = requestorGroups\n\n\t\t// In case of LDAP/OIDC we need to set `opts.claims` to ensure\n\t\t// it is associated with the LDAP/OIDC user properly.\n\t\tfor k, v := range cred.Claims {\n\t\t\tif k == expClaim {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\topts.claims[k] = v\n\t\t}\n\t} else {\n\t\t// Need permission if we are creating a service acccount for a\n\t\t// user <> to the request sender\n\t\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     requestorUser,\n\t\t\tGroups:          requestorGroups,\n\t\t\tAction:          iampolicy.CreateServiceAccountAdminAction,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tClaims:          claims,\n\t\t\tDenyOnly:        true,\n\t\t}) {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\n\t\t// In case of LDAP we need to resolve the targetUser to a DN and\n\t\t// query their groups:\n\t\tif globalLDAPConfig.Enabled {\n\t\t\topts.claims[ldapUserN] = targetUser // simple username\n\t\t\ttargetUser, targetGroups, err = globalLDAPConfig.LookupUserDN(targetUser)\n\t\t\tif err != nil {\n\t\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\t\treturn\n\t\t\t}\n\t\t\topts.claims[ldapUser] = targetUser // username DN\n\t\t}\n\n\t\t// NOTE: if not using LDAP, then internal IDP or open ID is\n\t\t// being used - in the former, group info is enforced when\n\t\t// generated credentials are used to make requests, and in the\n\t\t// latter, a group notion is not supported.\n\t}\n\n\tvar sp *iampolicy.Policy\n\tif len(createReq.Policy) > 0 {\n\t\tsp, err = iampolicy.ParseConfig(bytes.NewReader(createReq.Policy))\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\topts.sessionPolicy = sp\n\tnewCred, err := globalIAMSys.NewServiceAccount(ctx, targetUser, targetGroups, opts)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call hook for cluster-replication.\n\t//\n\t// FIXME: This wont work in an OpenID situation as the parent credential\n\t// may not be present on peer clusters to provide inherited policies.\n\t// Also, we should not be replicating root user's service account - as\n\t// they are not authenticated by a common external IDP, so we skip when\n\t// opts.ldapUser == \"\".\n\tif _, isLDAPAccount := opts.claims[ldapUserN]; isLDAPAccount {\n\t\terr = globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\t\tType: madmin.SRIAMItemSvcAcc,\n\t\t\tSvcAccChange: &madmin.SRSvcAccChange{\n\t\t\t\tCreate: &madmin.SRSvcAccCreate{\n\t\t\t\t\tParent:        newCred.ParentUser,\n\t\t\t\t\tAccessKey:     newCred.AccessKey,\n\t\t\t\t\tSecretKey:     newCred.SecretKey,\n\t\t\t\t\tGroups:        newCred.Groups,\n\t\t\t\t\tClaims:        opts.claims,\n\t\t\t\t\tSessionPolicy: createReq.Policy,\n\t\t\t\t\tStatus:        auth.AccountOn,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\tvar createResp = madmin.AddServiceAccountResp{\n\t\tCredentials: madmin.Credentials{\n\t\t\tAccessKey: newCred.AccessKey,\n\t\t\tSecretKey: newCred.SecretKey,\n\t\t},\n\t}\n\n\tdata, err := json.Marshal(createResp)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tencryptedData, err := madmin.EncryptData(password, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, encryptedData)\n}\n\n// UpdateServiceAccount - POST /minio/admin/v3/update-service-account\nfunc (a adminAPIHandlers) UpdateServiceAccount(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"UpdateServiceAccount\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\taccessKey := mux.Vars(r)[\"accessKey\"]\n\tif accessKey == \"\" {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tsvcAccount, _, err := globalIAMSys.GetServiceAccount(ctx, accessKey)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tAction:          iampolicy.UpdateServiceAccountAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t}) {\n\t\trequestUser := cred.AccessKey\n\t\tif cred.ParentUser != \"\" {\n\t\t\trequestUser = cred.ParentUser\n\t\t}\n\n\t\tif requestUser != svcAccount.ParentUser {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\tpassword := cred.SecretKey\n\treqBytes, err := madmin.DecryptData(password, io.LimitReader(r.Body, r.ContentLength))\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErrWithErr(ErrAdminConfigBadJSON, err), r.URL)\n\t\treturn\n\t}\n\n\tvar updateReq madmin.UpdateServiceAccountReq\n\tif err = json.Unmarshal(reqBytes, &updateReq); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErrWithErr(ErrAdminConfigBadJSON, err), r.URL)\n\t\treturn\n\t}\n\n\tvar sp *iampolicy.Policy\n\tif len(updateReq.NewPolicy) > 0 {\n\t\tsp, err = iampolicy.ParseConfig(bytes.NewReader(updateReq.NewPolicy))\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\topts := updateServiceAccountOpts{\n\t\tsecretKey:     updateReq.NewSecretKey,\n\t\tstatus:        updateReq.NewStatus,\n\t\tsessionPolicy: sp,\n\t}\n\terr = globalIAMSys.UpdateServiceAccount(ctx, accessKey, opts)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call site replication hook. Only LDAP accounts are supported for\n\t// replication operations.\n\tsvcAccClaims, err := globalIAMSys.GetClaimsForSvcAcc(ctx, accessKey)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\tif _, isLDAPAccount := svcAccClaims[ldapUserN]; isLDAPAccount {\n\t\terr = globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\t\tType: madmin.SRIAMItemSvcAcc,\n\t\t\tSvcAccChange: &madmin.SRSvcAccChange{\n\t\t\t\tUpdate: &madmin.SRSvcAccUpdate{\n\t\t\t\t\tAccessKey:     accessKey,\n\t\t\t\t\tSecretKey:     opts.secretKey,\n\t\t\t\t\tStatus:        opts.status,\n\t\t\t\t\tSessionPolicy: updateReq.NewPolicy,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\twriteSuccessNoContent(w)\n}\n\n// InfoServiceAccount - GET /minio/admin/v3/info-service-account\nfunc (a adminAPIHandlers) InfoServiceAccount(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"InfoServiceAccount\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\taccessKey := mux.Vars(r)[\"accessKey\"]\n\tif accessKey == \"\" {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrInvalidRequest), r.URL)\n\t\treturn\n\t}\n\n\tsvcAccount, policy, err := globalIAMSys.GetServiceAccount(ctx, accessKey)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tAction:          iampolicy.ListServiceAccountsAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t}) {\n\t\trequestUser := cred.AccessKey\n\t\tif cred.ParentUser != \"\" {\n\t\t\trequestUser = cred.ParentUser\n\t\t}\n\n\t\tif requestUser != svcAccount.ParentUser {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\tvar svcAccountPolicy iampolicy.Policy\n\n\timpliedPolicy := policy == nil\n\n\t// If policy is empty, check for policy of the parent user\n\tif !impliedPolicy {\n\t\tsvcAccountPolicy = svcAccountPolicy.Merge(*policy)\n\t} else {\n\t\tpoliciesNames, err := globalIAMSys.PolicyDBGet(svcAccount.ParentUser, false)\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t\tsvcAccountPolicy = svcAccountPolicy.Merge(globalIAMSys.GetCombinedPolicy(policiesNames...))\n\t}\n\n\tpolicyJSON, err := json.MarshalIndent(svcAccountPolicy, \"\", \" \")\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tvar infoResp = madmin.InfoServiceAccountResp{\n\t\tParentUser:    svcAccount.ParentUser,\n\t\tAccountStatus: svcAccount.Status,\n\t\tImpliedPolicy: impliedPolicy,\n\t\tPolicy:        string(policyJSON),\n\t}\n\n\tdata, err := json.Marshal(infoResp)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tencryptedData, err := madmin.EncryptData(cred.SecretKey, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, encryptedData)\n}\n\n// ListServiceAccounts - GET /minio/admin/v3/list-service-accounts\nfunc (a adminAPIHandlers) ListServiceAccounts(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListServiceAccounts\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\tvar targetAccount string\n\n\t// If listing is requested for a specific user (who is not the request\n\t// sender), check that the user has permissions.\n\tuser := r.Form.Get(\"user\")\n\tif user != \"\" && user != cred.AccessKey {\n\t\tif !globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     cred.AccessKey,\n\t\t\tAction:          iampolicy.ListServiceAccountsAdminAction,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tClaims:          claims,\n\t\t}) {\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAccessDenied), r.URL)\n\t\t\treturn\n\t\t}\n\t\ttargetAccount = user\n\t} else {\n\t\ttargetAccount = cred.AccessKey\n\t\tif cred.ParentUser != \"\" {\n\t\t\ttargetAccount = cred.ParentUser\n\t\t}\n\t}\n\n\tserviceAccounts, err := globalIAMSys.ListServiceAccounts(ctx, targetAccount)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tvar serviceAccountsNames []string\n\n\tfor _, svc := range serviceAccounts {\n\t\tserviceAccountsNames = append(serviceAccountsNames, svc.AccessKey)\n\t}\n\n\tvar listResp = madmin.ListServiceAccountsResp{\n\t\tAccounts: serviceAccountsNames,\n\t}\n\n\tdata, err := json.Marshal(listResp)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tencryptedData, err := madmin.EncryptData(cred.SecretKey, data)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, encryptedData)\n}\n\n// DeleteServiceAccount - DELETE /minio/admin/v3/delete-service-account\nfunc (a adminAPIHandlers) DeleteServiceAccount(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"DeleteServiceAccount\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\tserviceAccount := mux.Vars(r)[\"accessKey\"]\n\tif serviceAccount == \"\" {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminInvalidArgument), r.URL)\n\t\treturn\n\t}\n\n\tsvcAccount, _, err := globalIAMSys.GetServiceAccount(ctx, serviceAccount)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tadminPrivilege := globalIAMSys.IsAllowed(iampolicy.Args{\n\t\tAccountName:     cred.AccessKey,\n\t\tAction:          iampolicy.RemoveServiceAccountAdminAction,\n\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\tIsOwner:         owner,\n\t\tClaims:          claims,\n\t})\n\n\tif !adminPrivilege {\n\t\tparentUser := cred.AccessKey\n\t\tif cred.ParentUser != \"\" {\n\t\t\tparentUser = cred.ParentUser\n\t\t}\n\t\tif parentUser != svcAccount.ParentUser {\n\t\t\t// The service account belongs to another user but return not\n\t\t\t// found error to mitigate brute force attacks. or the\n\t\t\t// serviceAccount doesn't exist.\n\t\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrAdminServiceAccountNotFound), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\t// Save svc acc claims before deletion (for site replication hook).\n\tsvcAccClaims, err := globalIAMSys.GetClaimsForSvcAcc(ctx, serviceAccount)\n\tif err != nil && err != errNoSuchServiceAccount {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\terr = globalIAMSys.DeleteServiceAccount(ctx, serviceAccount, true)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call site replication hook. Only LDAP accounts are supported for\n\t// replication operations.\n\tif _, isLDAPAccount := svcAccClaims[ldapUserN]; isLDAPAccount {\n\t\terr = globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\t\tType: madmin.SRIAMItemSvcAcc,\n\t\t\tSvcAccChange: &madmin.SRSvcAccChange{\n\t\t\t\tDelete: &madmin.SRSvcAccDelete{\n\t\t\t\t\tAccessKey: serviceAccount,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\twriteSuccessNoContent(w)\n}\n\n// AccountInfoHandler returns usage\nfunc (a adminAPIHandlers) AccountInfoHandler(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"AccountInfo\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\t// Get current object layer instance.\n\tobjectAPI := newObjectLayerFn()\n\tif objectAPI == nil || globalNotificationSys == nil {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrServerNotInitialized), r.URL)\n\t\treturn\n\t}\n\n\tcred, claims, owner, s3Err := validateAdminSignature(ctx, r, \"\")\n\tif s3Err != ErrNone {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(s3Err), r.URL)\n\t\treturn\n\t}\n\n\t// Set prefix value for \"s3:prefix\" policy conditionals.\n\tr.Header.Set(\"prefix\", \"\")\n\n\t// Set delimiter value for \"s3:delimiter\" policy conditionals.\n\tr.Header.Set(\"delimiter\", SlashSeparator)\n\n\t// Check if we are asked to return prefix usage\n\tenablePrefixUsage := r.Form.Get(\"prefix-usage\") == \"true\"\n\n\tisAllowedAccess := func(bucketName string) (rd, wr bool) {\n\t\tif globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     cred.AccessKey,\n\t\t\tGroups:          cred.Groups,\n\t\t\tAction:          iampolicy.ListBucketAction,\n\t\t\tBucketName:      bucketName,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tObjectName:      \"\",\n\t\t\tClaims:          claims,\n\t\t}) {\n\t\t\trd = true\n\t\t}\n\n\t\tif globalIAMSys.IsAllowed(iampolicy.Args{\n\t\t\tAccountName:     cred.AccessKey,\n\t\t\tGroups:          cred.Groups,\n\t\t\tAction:          iampolicy.PutObjectAction,\n\t\t\tBucketName:      bucketName,\n\t\t\tConditionValues: getConditionValues(r, \"\", cred.AccessKey, claims),\n\t\t\tIsOwner:         owner,\n\t\t\tObjectName:      \"\",\n\t\t\tClaims:          claims,\n\t\t}) {\n\t\t\twr = true\n\t\t}\n\n\t\treturn rd, wr\n\t}\n\n\tvar dataUsageInfo DataUsageInfo\n\tvar err error\n\tif !globalIsGateway {\n\t\t// Load the latest calculated data usage\n\t\tdataUsageInfo, err = loadDataUsageFromBackend(ctx, objectAPI)\n\t\tif err != nil {\n\t\t\t// log the error, continue with the accounting response\n\t\t\tlogger.LogIf(ctx, err)\n\t\t}\n\t}\n\n\t// If etcd, dns federation configured list buckets from etcd.\n\tvar buckets []BucketInfo\n\tif globalDNSConfig != nil && globalBucketFederation {\n\t\tdnsBuckets, err := globalDNSConfig.List()\n\t\tif err != nil && !IsErrIgnored(err,\n\t\t\tdns.ErrNoEntriesFound,\n\t\t\tdns.ErrDomainMissing) {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t\tfor _, dnsRecords := range dnsBuckets {\n\t\t\tbuckets = append(buckets, BucketInfo{\n\t\t\t\tName:    dnsRecords[0].Key,\n\t\t\t\tCreated: dnsRecords[0].CreationDate,\n\t\t\t})\n\t\t}\n\t\tsort.Slice(buckets, func(i, j int) bool {\n\t\t\treturn buckets[i].Name < buckets[j].Name\n\t\t})\n\t} else {\n\t\tbuckets, err = objectAPI.ListBuckets(ctx)\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\taccountName := cred.AccessKey\n\tif cred.IsTemp() || cred.IsServiceAccount() {\n\t\t// For derived credentials, check the parent user's permissions.\n\t\taccountName = cred.ParentUser\n\t}\n\tpolicies, err := globalIAMSys.PolicyDBGet(accountName, false, cred.Groups...)\n\tif err != nil {\n\t\tlogger.LogIf(ctx, err)\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tbuf, err := json.MarshalIndent(globalIAMSys.GetCombinedPolicy(policies...), \"\", \" \")\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tacctInfo := madmin.AccountInfo{\n\t\tAccountName: accountName,\n\t\tServer:      objectAPI.BackendInfo(),\n\t\tPolicy:      buf,\n\t}\n\n\tfor _, bucket := range buckets {\n\t\trd, wr := isAllowedAccess(bucket.Name)\n\t\tif rd || wr {\n\t\t\t// Fetch the data usage of the current bucket\n\t\t\tvar size uint64\n\t\t\tvar objectsCount uint64\n\t\t\tvar objectsHist map[string]uint64\n\t\t\tif !dataUsageInfo.LastUpdate.IsZero() {\n\t\t\t\tsize = dataUsageInfo.BucketsUsage[bucket.Name].Size\n\t\t\t\tobjectsCount = dataUsageInfo.BucketsUsage[bucket.Name].ObjectsCount\n\t\t\t\tobjectsHist = dataUsageInfo.BucketsUsage[bucket.Name].ObjectSizesHistogram\n\t\t\t}\n\t\t\t// Fetch the prefix usage of the current bucket\n\t\t\tvar prefixUsage map[string]uint64\n\t\t\tif enablePrefixUsage {\n\t\t\t\tif pu, err := loadPrefixUsageFromBackend(ctx, objectAPI, bucket.Name); err == nil {\n\t\t\t\t\tprefixUsage = pu\n\t\t\t\t} else {\n\t\t\t\t\tlogger.LogIf(ctx, err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlcfg, _ := globalBucketObjectLockSys.Get(bucket.Name)\n\t\t\tquota, _ := globalBucketQuotaSys.Get(bucket.Name)\n\t\t\trcfg, _ := globalBucketMetadataSys.GetReplicationConfig(ctx, bucket.Name)\n\t\t\ttcfg, _ := globalBucketMetadataSys.GetTaggingConfig(bucket.Name)\n\n\t\t\tacctInfo.Buckets = append(acctInfo.Buckets, madmin.BucketAccessInfo{\n\t\t\t\tName:                 bucket.Name,\n\t\t\t\tCreated:              bucket.Created,\n\t\t\t\tSize:                 size,\n\t\t\t\tObjects:              objectsCount,\n\t\t\t\tObjectSizesHistogram: objectsHist,\n\t\t\t\tPrefixUsage:          prefixUsage,\n\t\t\t\tDetails: &madmin.BucketDetails{\n\t\t\t\t\tVersioning:          globalBucketVersioningSys.Enabled(bucket.Name),\n\t\t\t\t\tVersioningSuspended: globalBucketVersioningSys.Suspended(bucket.Name),\n\t\t\t\t\tReplication:         rcfg != nil,\n\t\t\t\t\tLocking:             lcfg.LockEnabled,\n\t\t\t\t\tQuota:               quota,\n\t\t\t\t\tTagging:             tcfg,\n\t\t\t\t},\n\t\t\t\tAccess: madmin.AccountAccess{\n\t\t\t\t\tRead:  rd,\n\t\t\t\t\tWrite: wr,\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t}\n\n\tusageInfoJSON, err := json.Marshal(acctInfo)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\twriteSuccessResponseJSON(w, usageInfoJSON)\n}\n\n// InfoCannedPolicy - GET /minio/admin/v3/info-canned-policy?name={policyName}\n//\n// Newer API response with policy timestamps is returned with query parameter\n// `v=2` like:\n//\n// GET /minio/admin/v3/info-canned-policy?name={policyName}&v=2\n//\n// The newer API will eventually become the default (and only) one. The older\n// response is to return only the policy JSON. The newer response returns\n// timestamps along with the policy JSON. Both versions are supported for now,\n// for smooth transition to new API.\nfunc (a adminAPIHandlers) InfoCannedPolicy(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"InfoCannedPolicy\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.GetPolicyAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tname := mux.Vars(r)[\"name\"]\n\tpolicies := newMappedPolicy(name).toSlice()\n\tif len(policies) != 1 {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, errTooManyPolicies), r.URL)\n\t\treturn\n\t}\n\n\tpolicyDoc, err := globalIAMSys.InfoPolicy(name)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Is the new API version being requested?\n\tinfoPolicyAPIVersion := r.Form.Get(\"v\")\n\tif infoPolicyAPIVersion == \"2\" {\n\t\tbuf, err := json.MarshalIndent(policyDoc, \"\", \" \")\n\t\tif err != nil {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t\tw.Write(buf)\n\t\treturn\n\t} else if infoPolicyAPIVersion != \"\" {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, errors.New(\"invalid version parameter 'v' supplied\")), r.URL)\n\t\treturn\n\t}\n\n\t// Return the older API response value of just the policy json.\n\tbuf, err := json.MarshalIndent(policyDoc.Policy, \"\", \" \")\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\tw.Write(buf)\n}\n\n// ListBucketPolicies - GET /minio/admin/v3/list-canned-policies?bucket={bucket}\nfunc (a adminAPIHandlers) ListBucketPolicies(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListBucketPolicies\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.ListUserPoliciesAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tbucket := mux.Vars(r)[\"bucket\"]\n\tpolicies, err := globalIAMSys.ListPolicies(ctx, bucket)\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tvar newPolicies = make(map[string]iampolicy.Policy)\n\tfor name, p := range policies {\n\t\t_, err = json.Marshal(p)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(ctx, err)\n\t\t\tcontinue\n\t\t}\n\t\tnewPolicies[name] = p\n\t}\n\tif err = json.NewEncoder(w).Encode(newPolicies); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// ListCannedPolicies - GET /minio/admin/v3/list-canned-policies\nfunc (a adminAPIHandlers) ListCannedPolicies(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"ListCannedPolicies\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.ListUserPoliciesAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tpolicies, err := globalIAMSys.ListPolicies(ctx, \"\")\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tvar newPolicies = make(map[string]iampolicy.Policy)\n\tfor name, p := range policies {\n\t\t_, err = json.Marshal(p)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(ctx, err)\n\t\t\tcontinue\n\t\t}\n\t\tnewPolicies[name] = p\n\t}\n\tif err = json.NewEncoder(w).Encode(newPolicies); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// RemoveCannedPolicy - DELETE /minio/admin/v3/remove-canned-policy?name=<policy_name>\nfunc (a adminAPIHandlers) RemoveCannedPolicy(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"RemoveCannedPolicy\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.DeletePolicyAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tpolicyName := vars[\"name\"]\n\n\tif err := globalIAMSys.DeletePolicy(ctx, policyName, true); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call cluster-replication policy creation hook to replicate policy deletion to\n\t// other minio clusters.\n\tif err := globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\tType: madmin.SRIAMItemPolicy,\n\t\tName: policyName,\n\t}); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// AddCannedPolicy - PUT /minio/admin/v3/add-canned-policy?name=<policy_name>\nfunc (a adminAPIHandlers) AddCannedPolicy(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"AddCannedPolicy\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.CreatePolicyAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tpolicyName := vars[\"name\"]\n\n\t// Error out if Content-Length is missing.\n\tif r.ContentLength <= 0 {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrMissingContentLength), r.URL)\n\t\treturn\n\t}\n\n\t// Error out if Content-Length is beyond allowed size.\n\tif r.ContentLength > maxBucketPolicySize {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrEntityTooLarge), r.URL)\n\t\treturn\n\t}\n\n\tiamPolicyBytes, err := ioutil.ReadAll(io.LimitReader(r.Body, r.ContentLength))\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tiamPolicy, err := iampolicy.ParseConfig(bytes.NewReader(iamPolicyBytes))\n\tif err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Version in policy must not be empty\n\tif iamPolicy.Version == \"\" {\n\t\twriteErrorResponseJSON(ctx, w, errorCodes.ToAPIErr(ErrMalformedPolicy), r.URL)\n\t\treturn\n\t}\n\n\tif err = globalIAMSys.SetPolicy(ctx, policyName, *iamPolicy); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\t// Call cluster-replication policy creation hook to replicate policy to\n\t// other minio clusters.\n\tif err := globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\tType:   madmin.SRIAMItemPolicy,\n\t\tName:   policyName,\n\t\tPolicy: iamPolicyBytes,\n\t}); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n\n// SetPolicyForUserOrGroup - PUT /minio/admin/v3/set-policy?policy=xxx&user-or-group=?[&is-group]\nfunc (a adminAPIHandlers) SetPolicyForUserOrGroup(w http.ResponseWriter, r *http.Request) {\n\tctx := newContext(r, w, \"SetPolicyForUserOrGroup\")\n\n\tdefer logger.AuditLog(ctx, w, r, mustGetClaimsFromToken(r))\n\n\tobjectAPI, _ := validateAdminReq(ctx, w, r, iampolicy.AttachPolicyAdminAction)\n\tif objectAPI == nil {\n\t\treturn\n\t}\n\n\tvars := mux.Vars(r)\n\tpolicyName := vars[\"policyName\"]\n\tentityName := vars[\"userOrGroup\"]\n\tisGroup := vars[\"isGroup\"] == \"true\"\n\n\tif !isGroup {\n\t\tok, _, err := globalIAMSys.IsTempUser(entityName)\n\t\tif err != nil && err != errNoSuchUser {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\t\treturn\n\t\t}\n\t\tif ok {\n\t\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, errIAMActionNotAllowed), r.URL)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif err := globalIAMSys.PolicyDBSet(ctx, entityName, policyName, isGroup); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n\n\tif err := globalSiteReplicationSys.IAMChangeHook(ctx, madmin.SRIAMItem{\n\t\tType: madmin.SRIAMItemPolicyMapping,\n\t\tPolicyMapping: &madmin.SRPolicyMapping{\n\t\t\tUserOrGroup: entityName,\n\t\t\tIsGroup:     isGroup,\n\t\t\tPolicy:      policyName,\n\t\t},\n\t}); err != nil {\n\t\twriteErrorResponseJSON(ctx, w, toAdminAPIErr(ctx, err), r.URL)\n\t\treturn\n\t}\n}\n", "// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/minio/madmin-go\"\n\tminio \"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n\tcr \"github.com/minio/minio-go/v7/pkg/credentials\"\n\t\"github.com/minio/minio-go/v7/pkg/s3utils\"\n\t\"github.com/minio/minio-go/v7/pkg/set\"\n\t\"github.com/minio/minio-go/v7/pkg/signer\"\n\t\"github.com/minio/minio/internal/auth\"\n)\n\nconst (\n\ttestDefaultTimeout = 30 * time.Second\n)\n\n// API suite container for IAM\ntype TestSuiteIAM struct {\n\tTestSuiteCommon\n\n\t// Flag to turn on tests for etcd backend IAM\n\twithEtcdBackend bool\n\n\tendpoint string\n\tadm      *madmin.AdminClient\n\tclient   *minio.Client\n}\n\nfunc newTestSuiteIAM(c TestSuiteCommon, withEtcdBackend bool) *TestSuiteIAM {\n\treturn &TestSuiteIAM{TestSuiteCommon: c, withEtcdBackend: withEtcdBackend}\n}\n\nfunc (s *TestSuiteIAM) iamSetup(c *check) {\n\tvar err error\n\t// strip url scheme from endpoint\n\ts.endpoint = strings.TrimPrefix(s.endPoint, \"http://\")\n\tif s.secure {\n\t\ts.endpoint = strings.TrimPrefix(s.endPoint, \"https://\")\n\t}\n\n\ts.adm, err = madmin.New(s.endpoint, s.accessKey, s.secretKey, s.secure)\n\tif err != nil {\n\t\tc.Fatalf(\"error creating admin client: %v\", err)\n\t}\n\t// Set transport, so that TLS is handled correctly.\n\ts.adm.SetCustomTransport(s.TestSuiteCommon.client.Transport)\n\n\ts.client, err = minio.New(s.endpoint, &minio.Options{\n\t\tCreds:     credentials.NewStaticV4(s.accessKey, s.secretKey, \"\"),\n\t\tSecure:    s.secure,\n\t\tTransport: s.TestSuiteCommon.client.Transport,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"error creating minio client: %v\", err)\n\t}\n}\n\nconst (\n\tEnvTestEtcdBackend = \"ETCD_SERVER\"\n)\n\nfunc (s *TestSuiteIAM) setUpEtcd(c *check, etcdServer string) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tconfigCmds := []string{\n\t\t\"etcd\",\n\t\t\"endpoints=\" + etcdServer,\n\t\t\"path_prefix=\" + mustGetUUID(),\n\t}\n\t_, err := s.adm.SetConfigKV(ctx, strings.Join(configCmds, \" \"))\n\tif err != nil {\n\t\tc.Fatalf(\"unable to setup Etcd for tests: %v\", err)\n\t}\n\n\ts.RestartIAMSuite(c)\n}\n\nfunc (s *TestSuiteIAM) SetUpSuite(c *check) {\n\t// If etcd backend is specified and etcd server is not present, the test\n\t// is skipped.\n\tetcdServer := os.Getenv(EnvTestEtcdBackend)\n\tif s.withEtcdBackend && etcdServer == \"\" {\n\t\tc.Skip(\"Skipping etcd backend IAM test as no etcd server is configured.\")\n\t}\n\n\ts.TestSuiteCommon.SetUpSuite(c)\n\n\ts.iamSetup(c)\n\n\tif s.withEtcdBackend {\n\t\ts.setUpEtcd(c, etcdServer)\n\t}\n}\n\nfunc (s *TestSuiteIAM) RestartIAMSuite(c *check) {\n\ts.TestSuiteCommon.RestartTestServer(c)\n\n\ts.iamSetup(c)\n}\n\nfunc (s *TestSuiteIAM) getAdminClient(c *check, accessKey, secretKey, sessionToken string) *madmin.AdminClient {\n\tmadmClnt, err := madmin.NewWithOptions(s.endpoint, &madmin.Options{\n\t\tCreds:  credentials.NewStaticV4(accessKey, secretKey, sessionToken),\n\t\tSecure: s.secure,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"error creating user admin client: %s\", err)\n\t}\n\tmadmClnt.SetCustomTransport(s.TestSuiteCommon.client.Transport)\n\treturn madmClnt\n}\n\nfunc (s *TestSuiteIAM) getUserClient(c *check, accessKey, secretKey, sessionToken string) *minio.Client {\n\tclient, err := minio.New(s.endpoint, &minio.Options{\n\t\tCreds:     credentials.NewStaticV4(accessKey, secretKey, sessionToken),\n\t\tSecure:    s.secure,\n\t\tTransport: s.TestSuiteCommon.client.Transport,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"error creating user minio client: %s\", err)\n\t}\n\treturn client\n}\n\nfunc TestIAMInternalIDPServerSuite(t *testing.T) {\n\tbaseTestCases := []TestSuiteCommon{\n\t\t// Init and run test on FS backend with signature v4.\n\t\t{serverType: \"FS\", signer: signerV4},\n\t\t// Init and run test on FS backend, with tls enabled.\n\t\t{serverType: \"FS\", signer: signerV4, secure: true},\n\t\t// Init and run test on Erasure backend.\n\t\t{serverType: \"Erasure\", signer: signerV4},\n\t\t// Init and run test on ErasureSet backend.\n\t\t{serverType: \"ErasureSet\", signer: signerV4},\n\t}\n\ttestCases := []*TestSuiteIAM{}\n\tfor _, bt := range baseTestCases {\n\t\ttestCases = append(testCases,\n\t\t\tnewTestSuiteIAM(bt, false),\n\t\t\tnewTestSuiteIAM(bt, true),\n\t\t)\n\t}\n\tfor i, testCase := range testCases {\n\t\tetcdStr := \"\"\n\t\tif testCase.withEtcdBackend {\n\t\t\tetcdStr = \" (with etcd backend)\"\n\t\t}\n\t\tt.Run(\n\t\t\tfmt.Sprintf(\"Test: %d, ServerType: %s%s\", i+1, testCase.serverType, etcdStr),\n\t\t\tfunc(t *testing.T) {\n\t\t\t\tsuite := testCase\n\t\t\t\tc := &check{t, testCase.serverType}\n\n\t\t\t\tsuite.SetUpSuite(c)\n\t\t\t\tsuite.TestUserCreate(c)\n\t\t\t\tsuite.TestUserPolicyEscalationBug(c)\n\t\t\t\tsuite.TestPolicyCreate(c)\n\t\t\t\tsuite.TestCannedPolicies(c)\n\t\t\t\tsuite.TestGroupAddRemove(c)\n\t\t\t\tsuite.TestServiceAccountOpsByAdmin(c)\n\t\t\t\tsuite.TestServiceAccountOpsByUser(c)\n\t\t\t\tsuite.TestAddServiceAccountPerms(c)\n\t\t\t\tsuite.TearDownSuite(c)\n\t\t\t},\n\t\t)\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestUserCreate(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\t// 1. Create a user.\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr := s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\n\t// 2. Check new user appears in listing\n\tusersMap, err := s.adm.ListUsers(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"error listing: %v\", err)\n\t}\n\tv, ok := usersMap[accessKey]\n\tif !ok {\n\t\tc.Fatalf(\"user not listed: %s\", accessKey)\n\t}\n\tc.Assert(v.Status, madmin.AccountEnabled)\n\n\t// 3. Associate policy and check that user can access\n\terr = s.adm.SetPolicy(ctx, \"readwrite\", accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to set policy: %v\", err)\n\t}\n\tclient := s.getUserClient(c, accessKey, secretKey, \"\")\n\terr = client.MakeBucket(ctx, getRandomBucketName(), minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"user could not create bucket: %v\", err)\n\t}\n\n\t// 3.10. Check that user's password can be updated.\n\t_, newSecretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, newSecretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to update user's secret key: %v\", err)\n\t}\n\t// 3.10.1 Check that old password no longer works.\n\terr = client.MakeBucket(ctx, getRandomBucketName(), minio.MakeBucketOptions{})\n\tif err == nil {\n\t\tc.Fatalf(\"user was unexpectedly able to create bucket with bad password!\")\n\t}\n\t// 3.10.2 Check that new password works.\n\tclient = s.getUserClient(c, accessKey, newSecretKey, \"\")\n\terr = client.MakeBucket(ctx, getRandomBucketName(), minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"user could not create bucket: %v\", err)\n\t}\n\n\t// 4. Check that user can be disabled and verify it.\n\terr = s.adm.SetUserStatus(ctx, accessKey, madmin.AccountDisabled)\n\tif err != nil {\n\t\tc.Fatalf(\"could not set user account to disabled\")\n\t}\n\tusersMap, err = s.adm.ListUsers(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"error listing: %v\", err)\n\t}\n\tv, ok = usersMap[accessKey]\n\tif !ok {\n\t\tc.Fatalf(\"user was not listed after disabling: %s\", accessKey)\n\t}\n\tc.Assert(v.Status, madmin.AccountDisabled)\n\terr = client.MakeBucket(ctx, getRandomBucketName(), minio.MakeBucketOptions{})\n\tif err == nil {\n\t\tc.Fatalf(\"user account was not disabled!\")\n\t}\n\n\t// 5. Check that user can be deleted and verify it.\n\terr = s.adm.RemoveUser(ctx, accessKey)\n\tif err != nil {\n\t\tc.Fatalf(\"user could not be deleted: %v\", err)\n\t}\n\tusersMap, err = s.adm.ListUsers(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"error listing: %v\", err)\n\t}\n\t_, ok = usersMap[accessKey]\n\tif ok {\n\t\tc.Fatalf(\"user not deleted: %s\", accessKey)\n\t}\n\terr = client.MakeBucket(ctx, getRandomBucketName(), minio.MakeBucketOptions{})\n\tif err == nil {\n\t\tc.Fatalf(\"user account was not deleted!\")\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestUserPolicyEscalationBug(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tbucket := getRandomBucketName()\n\terr := s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\t// 2. Create a user, associate policy and verify access\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\t// 2.1 check that user does not have any access to the bucket\n\tuClient := s.getUserClient(c, accessKey, secretKey, \"\")\n\tc.mustNotListObjects(ctx, uClient, bucket)\n\n\t// 2.2 create and associate policy to user\n\tpolicy := \"mypolicy-test-user-update\"\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = s.adm.AddCannedPolicy(ctx, policy, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\terr = s.adm.SetPolicy(ctx, policy, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\t// 2.3 check user has access to bucket\n\tc.mustListObjects(ctx, uClient, bucket)\n\t// 2.3 check that user cannot delete the bucket\n\terr = uClient.RemoveBucket(ctx, bucket)\n\tif err == nil || err.Error() != \"Access Denied.\" {\n\t\tc.Fatalf(\"bucket was deleted unexpectedly or got unexpected err: %v\", err)\n\t}\n\n\t// 3. Craft a request to update the user's permissions\n\tep := s.adm.GetEndpointURL()\n\turlValue := url.Values{}\n\turlValue.Add(\"accessKey\", accessKey)\n\tu, err := url.Parse(fmt.Sprintf(\"%s://%s/minio/admin/v3/add-user?%s\", ep.Scheme, ep.Host, s3utils.QueryEncode(urlValue)))\n\tif err != nil {\n\t\tc.Fatalf(\"unexpected url parse err: %v\", err)\n\t}\n\treq, err := http.NewRequestWithContext(ctx, http.MethodPut, u.String(), nil)\n\tif err != nil {\n\t\tc.Fatalf(\"unexpected new request err: %v\", err)\n\t}\n\treqBodyArg := madmin.UserInfo{\n\t\tSecretKey:  secretKey,\n\t\tPolicyName: \"consoleAdmin\",\n\t\tStatus:     madmin.AccountEnabled,\n\t}\n\tbuf, err := json.Marshal(reqBodyArg)\n\tif err != nil {\n\t\tc.Fatalf(\"unexpected json encode err: %v\", err)\n\t}\n\tbuf, err = madmin.EncryptData(secretKey, buf)\n\tif err != nil {\n\t\tc.Fatalf(\"unexpected encryption err: %v\", err)\n\t}\n\n\treq.ContentLength = int64(len(buf))\n\tsum := sha256.Sum256(buf)\n\treq.Header.Set(\"X-Amz-Content-Sha256\", hex.EncodeToString(sum[:]))\n\treq.Body = ioutil.NopCloser(bytes.NewReader(buf))\n\treq = signer.SignV4(*req, accessKey, secretKey, \"\", \"\")\n\n\t// 3.1 Execute the request.\n\tresp, err := s.TestSuiteCommon.client.Do(req)\n\tif err != nil {\n\t\tc.Fatalf(\"unexpected request err: %v\", err)\n\t}\n\tif resp.StatusCode != 200 {\n\t\tc.Fatalf(\"got unexpected response: %#v\\n\", resp)\n\t}\n\n\t// 3.2 check that user cannot delete the bucket\n\terr = uClient.RemoveBucket(ctx, bucket)\n\tif err == nil || err.Error() != \"Access Denied.\" {\n\t\tc.Fatalf(\"User was able to escalate privileges (Err=%v)!\", err)\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestAddServiceAccountPerms(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\t// 1. Create a policy\n\tpolicy1 := \"deny-svc\"\n\tpolicy2 := \"allow-svc\"\n\tpolicyBytes := []byte(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Deny\",\n   \"Action\": [\n    \"admin:CreateServiceAccount\"\n   ]\n  }\n ]\n}`)\n\n\tnewPolicyBytes := []byte(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::testbucket/*\"\n   ]\n  }\n ]\n}`)\n\n\terr := s.adm.AddCannedPolicy(ctx, policy1, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\terr = s.adm.AddCannedPolicy(ctx, policy2, newPolicyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\t// 2. Verify that policy json is validated by server\n\tinvalidPolicyBytes := policyBytes[:len(policyBytes)-1]\n\terr = s.adm.AddCannedPolicy(ctx, policy1+\"invalid\", invalidPolicyBytes)\n\tif err == nil {\n\t\tc.Fatalf(\"invalid policy creation success\")\n\t}\n\n\t// 3. Create a user, associate policy and verify access\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\t// 3.1 check that user does not have any access to the bucket\n\tuClient := s.getUserClient(c, accessKey, secretKey, \"\")\n\tc.mustNotListObjects(ctx, uClient, \"testbucket\")\n\n\t// 3.2 associate policy to user\n\terr = s.adm.SetPolicy(ctx, policy1, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\n\tadmClnt := s.getAdminClient(c, accessKey, secretKey, \"\")\n\n\t// 3.3 check user does not have explicit permissions to create service account.\n\tc.mustNotCreateSvcAccount(ctx, accessKey, admClnt)\n\n\t// 4. Verify the policy appears in listing\n\tps, err := s.adm.ListCannedPolicies(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"policy list err: %v\", err)\n\t}\n\t_, ok := ps[policy1]\n\tif !ok {\n\t\tc.Fatalf(\"policy was missing!\")\n\t}\n\n\t// 3.2 associate policy to user\n\terr = s.adm.SetPolicy(ctx, policy2, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\n\t// 3.3 check user can create service account implicitly.\n\tc.mustCreateSvcAccount(ctx, accessKey, admClnt)\n\n\t_, ok = ps[policy2]\n\tif !ok {\n\t\tc.Fatalf(\"policy was missing!\")\n\t}\n\n\terr = s.adm.RemoveUser(ctx, accessKey)\n\tif err != nil {\n\t\tc.Fatalf(\"user could not be deleted: %v\", err)\n\t}\n\n\terr = s.adm.RemoveCannedPolicy(ctx, policy1)\n\tif err != nil {\n\t\tc.Fatalf(\"policy del err: %v\", err)\n\t}\n\n\terr = s.adm.RemoveCannedPolicy(ctx, policy2)\n\tif err != nil {\n\t\tc.Fatalf(\"policy del err: %v\", err)\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestPolicyCreate(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tbucket := getRandomBucketName()\n\terr := s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\t// 1. Create a policy\n\tpolicy := \"mypolicy\"\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = s.adm.AddCannedPolicy(ctx, policy, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\t// 2. Verify that policy json is validated by server\n\tinvalidPolicyBytes := policyBytes[:len(policyBytes)-1]\n\terr = s.adm.AddCannedPolicy(ctx, policy+\"invalid\", invalidPolicyBytes)\n\tif err == nil {\n\t\tc.Fatalf(\"invalid policy creation success\")\n\t}\n\n\t// 3. Create a user, associate policy and verify access\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\t// 3.1 check that user does not have any access to the bucket\n\tuClient := s.getUserClient(c, accessKey, secretKey, \"\")\n\tc.mustNotListObjects(ctx, uClient, bucket)\n\n\t// 3.2 associate policy to user\n\terr = s.adm.SetPolicy(ctx, policy, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\t// 3.3 check user has access to bucket\n\tc.mustListObjects(ctx, uClient, bucket)\n\t// 3.4 Check that user cannot exceed their permissions\n\terr = uClient.RemoveBucket(ctx, bucket)\n\tif err == nil {\n\t\tc.Fatalf(\"bucket was deleted!\")\n\t}\n\n\t// 4. Verify the policy appears in listing\n\tps, err := s.adm.ListCannedPolicies(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"policy list err: %v\", err)\n\t}\n\t_, ok := ps[policy]\n\tif !ok {\n\t\tc.Fatalf(\"policy was missing!\")\n\t}\n\n\t// 5. Check that policy cannot be deleted when attached to a user.\n\terr = s.adm.RemoveCannedPolicy(ctx, policy)\n\tif err == nil {\n\t\tc.Fatalf(\"policy could be unexpectedly deleted!\")\n\t}\n\n\t// 6. Delete the user and then delete the policy.\n\terr = s.adm.RemoveUser(ctx, accessKey)\n\tif err != nil {\n\t\tc.Fatalf(\"user could not be deleted: %v\", err)\n\t}\n\terr = s.adm.RemoveCannedPolicy(ctx, policy)\n\tif err != nil {\n\t\tc.Fatalf(\"policy del err: %v\", err)\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestCannedPolicies(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tpolicies, err := s.adm.ListCannedPolicies(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to list policies: %v\", err)\n\t}\n\n\tdefaultPolicies := []string{\n\t\t\"readwrite\",\n\t\t\"readonly\",\n\t\t\"writeonly\",\n\t\t\"diagnostics\",\n\t\t\"consoleAdmin\",\n\t}\n\n\tfor _, v := range defaultPolicies {\n\t\tif _, ok := policies[v]; !ok {\n\t\t\tc.Fatalf(\"Failed to find %s in policies list\", v)\n\t\t}\n\t}\n\n\tbucket := getRandomBucketName()\n\terr = s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\n\t// Check that default policies can be overwritten.\n\terr = s.adm.AddCannedPolicy(ctx, \"readwrite\", policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\tinfo, err := s.adm.InfoCannedPolicy(ctx, \"readwrite\")\n\tif err != nil {\n\t\tc.Fatalf(\"policy info err: %v\", err)\n\t}\n\n\tinfoStr := string(info)\n\tif !strings.Contains(infoStr, `\"s3:PutObject\"`) || !strings.Contains(infoStr, \":\"+bucket+\"/\") {\n\t\tc.Fatalf(\"policy contains unexpected content!\")\n\t}\n\n}\n\nfunc (s *TestSuiteIAM) TestGroupAddRemove(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tbucket := getRandomBucketName()\n\terr := s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\tpolicy := \"mypolicy\"\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = s.adm.AddCannedPolicy(ctx, policy, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\n\t// 1. Add user to a new group\n\tgroup := \"mygroup\"\n\terr = s.adm.UpdateGroupMembers(ctx, madmin.GroupAddRemove{\n\t\tGroup:   group,\n\t\tMembers: []string{accessKey},\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to add user to group: %v\", err)\n\t}\n\n\t// 2. Check that user has no access\n\tuClient := s.getUserClient(c, accessKey, secretKey, \"\")\n\tc.mustNotListObjects(ctx, uClient, bucket)\n\n\t// 3. Associate policy to group and check user got access.\n\terr = s.adm.SetPolicy(ctx, policy, group, true)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\t// 3.1 check user has access to bucket\n\tc.mustListObjects(ctx, uClient, bucket)\n\t// 3.2 Check that user cannot exceed their permissions\n\terr = uClient.RemoveBucket(ctx, bucket)\n\tif err == nil {\n\t\tc.Fatalf(\"bucket was deleted!\")\n\t}\n\n\t// 4. List groups and members and verify\n\tgroups, err := s.adm.ListGroups(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"group list err: %v\", err)\n\t}\n\tif !set.CreateStringSet(groups...).Contains(group) {\n\t\tc.Fatalf(\"created group not present!\")\n\t}\n\tgroupInfo, err := s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Name, group)\n\tc.Assert(set.CreateStringSet(groupInfo.Members...), set.CreateStringSet(accessKey))\n\tc.Assert(groupInfo.Policy, policy)\n\tc.Assert(groupInfo.Status, string(madmin.GroupEnabled))\n\n\t// 5. Disable/enable the group and verify that user access is revoked/restored.\n\terr = s.adm.SetGroupStatus(ctx, group, madmin.GroupDisabled)\n\tif err != nil {\n\t\tc.Fatalf(\"group set status err: %v\", err)\n\t}\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Status, string(madmin.GroupDisabled))\n\tc.mustNotListObjects(ctx, uClient, bucket)\n\n\terr = s.adm.SetGroupStatus(ctx, group, madmin.GroupEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"group set status err: %v\", err)\n\t}\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Status, string(madmin.GroupEnabled))\n\tc.mustListObjects(ctx, uClient, bucket)\n\n\t// 6. Verify that group cannot be deleted with users.\n\terr = s.adm.UpdateGroupMembers(ctx, madmin.GroupAddRemove{\n\t\tGroup:    group,\n\t\tIsRemove: true,\n\t})\n\tif err == nil {\n\t\tc.Fatalf(\"group was removed!\")\n\t}\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Name, group)\n\n\t// 7. Remove user from group and verify access is revoked.\n\terr = s.adm.UpdateGroupMembers(ctx, madmin.GroupAddRemove{\n\t\tGroup:    group,\n\t\tMembers:  []string{accessKey},\n\t\tIsRemove: true,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"group update err: %v\", err)\n\t}\n\tc.mustNotListObjects(ctx, uClient, bucket)\n\n\t// 7.1 verify group still exists\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err != nil {\n\t\tc.Fatalf(\"group desc err: %v\", err)\n\t}\n\tc.Assert(groupInfo.Name, group)\n\tc.Assert(len(groupInfo.Members), 0)\n\n\t// 8. Delete group and verify\n\terr = s.adm.UpdateGroupMembers(ctx, madmin.GroupAddRemove{\n\t\tGroup:    group,\n\t\tIsRemove: true,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"group update err: %v\", err)\n\t}\n\tgroups, err = s.adm.ListGroups(ctx)\n\tif err != nil {\n\t\tc.Fatalf(\"group list err: %v\", err)\n\t}\n\tif set.CreateStringSet(groups...).Contains(group) {\n\t\tc.Fatalf(\"created group still present!\")\n\t}\n\tgroupInfo, err = s.adm.GetGroupDescription(ctx, group)\n\tif err == nil {\n\t\tc.Fatalf(\"group appears to exist\")\n\t}\n}\n\nfunc (s *TestSuiteIAM) TestServiceAccountOpsByUser(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tbucket := getRandomBucketName()\n\terr := s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\t// Create policy, user and associate policy\n\tpolicy := \"mypolicy\"\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = s.adm.AddCannedPolicy(ctx, policy, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\n\terr = s.adm.SetPolicy(ctx, policy, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\n\t// Create an madmin client with user creds\n\tuserAdmClient, err := madmin.NewWithOptions(s.endpoint, &madmin.Options{\n\t\tCreds:  cr.NewStaticV4(accessKey, secretKey, \"\"),\n\t\tSecure: s.secure,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Err creating user admin client: %v\", err)\n\t}\n\tuserAdmClient.SetCustomTransport(s.TestSuiteCommon.client.Transport)\n\n\t// Create svc acc\n\tcr := c.mustCreateSvcAccount(ctx, accessKey, userAdmClient)\n\n\t// 1. Check that svc account appears in listing\n\tc.assertSvcAccAppearsInListing(ctx, userAdmClient, accessKey, cr.AccessKey)\n\n\t// 2. Check that svc account info can be queried\n\tc.assertSvcAccInfoQueryable(ctx, userAdmClient, accessKey, cr.AccessKey, false)\n\n\t// 3. Check S3 access\n\tc.assertSvcAccS3Access(ctx, s, cr, bucket)\n\n\t// 4. Check that svc account can restrict the policy, and that the\n\t// session policy can be updated.\n\tc.assertSvcAccSessionPolicyUpdate(ctx, s, userAdmClient, accessKey, bucket)\n\n\t// 4. Check that service account's secret key and account status can be\n\t// updated.\n\tc.assertSvcAccSecretKeyAndStatusUpdate(ctx, s, userAdmClient, accessKey, bucket)\n\n\t// 5. Check that service account can be deleted.\n\tc.assertSvcAccDeletion(ctx, s, userAdmClient, accessKey, bucket)\n}\n\nfunc (s *TestSuiteIAM) TestServiceAccountOpsByAdmin(c *check) {\n\tctx, cancel := context.WithTimeout(context.Background(), testDefaultTimeout)\n\tdefer cancel()\n\n\tbucket := getRandomBucketName()\n\terr := s.client.MakeBucket(ctx, bucket, minio.MakeBucketOptions{})\n\tif err != nil {\n\t\tc.Fatalf(\"bucket creat error: %v\", err)\n\t}\n\n\t// Create policy, user and associate policy\n\tpolicy := \"mypolicy\"\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\",\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = s.adm.AddCannedPolicy(ctx, policy, policyBytes)\n\tif err != nil {\n\t\tc.Fatalf(\"policy add error: %v\", err)\n\t}\n\n\taccessKey, secretKey := mustGenerateCredentials(c)\n\terr = s.adm.SetUser(ctx, accessKey, secretKey, madmin.AccountEnabled)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set user: %v\", err)\n\t}\n\n\terr = s.adm.SetPolicy(ctx, policy, accessKey, false)\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to set policy: %v\", err)\n\t}\n\n\t// 1. Create a service account for the user\n\tcr := c.mustCreateSvcAccount(ctx, accessKey, s.adm)\n\n\t// 1.2 Check that svc account appears in listing\n\tc.assertSvcAccAppearsInListing(ctx, s.adm, accessKey, cr.AccessKey)\n\n\t// 1.3 Check that svc account info can be queried\n\tc.assertSvcAccInfoQueryable(ctx, s.adm, accessKey, cr.AccessKey, false)\n\n\t// 2. Check that svc account can access the bucket\n\tc.assertSvcAccS3Access(ctx, s, cr, bucket)\n\n\t// 3. Check that svc account can restrict the policy, and that the\n\t// session policy can be updated.\n\tc.assertSvcAccSessionPolicyUpdate(ctx, s, s.adm, accessKey, bucket)\n\n\t// 4. Check that service account's secret key and account status can be\n\t// updated.\n\tc.assertSvcAccSecretKeyAndStatusUpdate(ctx, s, s.adm, accessKey, bucket)\n\n\t// 5. Check that service account can be deleted.\n\tc.assertSvcAccDeletion(ctx, s, s.adm, accessKey, bucket)\n}\n\nfunc (c *check) mustCreateIAMUser(ctx context.Context, admClnt *madmin.AdminClient) madmin.Credentials {\n\trandUser := mustGetUUID()\n\trandPass := mustGetUUID()\n\terr := admClnt.AddUser(ctx, randUser, randPass)\n\tif err != nil {\n\t\tc.Fatalf(\"should be able to create a user: %v\", err)\n\t}\n\treturn madmin.Credentials{\n\t\tAccessKey: randUser,\n\t\tSecretKey: randPass,\n\t}\n}\n\nfunc (c *check) mustGetIAMUserInfo(ctx context.Context, admClnt *madmin.AdminClient, accessKey string) madmin.UserInfo {\n\tui, err := admClnt.GetUserInfo(ctx, accessKey)\n\tif err != nil {\n\t\tc.Fatalf(\"should be able to get user info: %v\", err)\n\t}\n\treturn ui\n}\n\nfunc (c *check) mustNotCreateIAMUser(ctx context.Context, admClnt *madmin.AdminClient) {\n\trandUser := mustGetUUID()\n\trandPass := mustGetUUID()\n\terr := admClnt.AddUser(ctx, randUser, randPass)\n\tif err == nil {\n\t\tc.Fatalf(\"should not be able to create a user\")\n\t}\n}\n\nfunc (c *check) mustCreateSvcAccount(ctx context.Context, tgtUser string, admClnt *madmin.AdminClient) madmin.Credentials {\n\tcr, err := admClnt.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tTargetUser: tgtUser,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"user should be able to create service accounts %s\", err)\n\t}\n\treturn cr\n}\n\nfunc (c *check) mustNotCreateSvcAccount(ctx context.Context, tgtUser string, admClnt *madmin.AdminClient) {\n\t_, err := admClnt.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tTargetUser: tgtUser,\n\t})\n\tif err == nil {\n\t\tc.Fatalf(\"user was able to add service accounts unexpectedly!\")\n\t}\n}\n\nfunc (c *check) mustNotListObjects(ctx context.Context, client *minio.Client, bucket string) {\n\tres := client.ListObjects(ctx, bucket, minio.ListObjectsOptions{})\n\tv, ok := <-res\n\tif !ok || v.Err == nil {\n\t\tc.Fatalf(\"user was able to list unexpectedly!\")\n\t}\n}\n\nfunc (c *check) mustListObjects(ctx context.Context, client *minio.Client, bucket string) {\n\tres := client.ListObjects(ctx, bucket, minio.ListObjectsOptions{})\n\tv, ok := <-res\n\tif ok && v.Err != nil {\n\t\tmsg := fmt.Sprintf(\"user was unable to list: %v\", v.Err)\n\t\tc.Fatalf(msg)\n\t}\n}\n\nfunc (c *check) assertSvcAccS3Access(ctx context.Context, s *TestSuiteIAM, cr madmin.Credentials, bucket string) {\n\tsvcClient := s.getUserClient(c, cr.AccessKey, cr.SecretKey, \"\")\n\tc.mustListObjects(ctx, svcClient, bucket)\n}\n\nfunc (c *check) assertSvcAccAppearsInListing(ctx context.Context, madmClient *madmin.AdminClient, parentAK, svcAK string) {\n\tlistResp, err := madmClient.ListServiceAccounts(ctx, parentAK)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to list svc accounts: %v\", err)\n\t}\n\tif !set.CreateStringSet(listResp.Accounts...).Contains(svcAK) {\n\t\tc.Fatalf(\"service account did not appear in listing!\")\n\t}\n}\n\nfunc (c *check) assertSvcAccInfoQueryable(ctx context.Context, madmClient *madmin.AdminClient, parentAK, svcAK string, skipParentUserCheck bool) {\n\tinfoResp, err := madmClient.InfoServiceAccount(ctx, svcAK)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to get svc acc info: %v\", err)\n\t}\n\tif !skipParentUserCheck {\n\t\tc.Assert(infoResp.ParentUser, parentAK)\n\t}\n\tc.Assert(infoResp.AccountStatus, \"on\")\n\tc.Assert(infoResp.ImpliedPolicy, true)\n}\n\n// This test assumes that the policy for `accessKey` allows listing on the given\n// bucket. It creates a session policy that restricts listing on the bucket and\n// then enables it again in a session policy update call.\nfunc (c *check) assertSvcAccSessionPolicyUpdate(ctx context.Context, s *TestSuiteIAM, madmClient *madmin.AdminClient, accessKey, bucket string) {\n\tsvcAK, svcSK := mustGenerateCredentials(c)\n\n\t// This policy does not allow listing objects.\n\tpolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\tcr, err := madmClient.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tPolicy:     policyBytes,\n\t\tTargetUser: accessKey,\n\t\tAccessKey:  svcAK,\n\t\tSecretKey:  svcSK,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to create svc acc: %v\", err)\n\t}\n\tsvcClient := s.getUserClient(c, cr.AccessKey, cr.SecretKey, \"\")\n\tc.mustNotListObjects(ctx, svcClient, bucket)\n\n\t// This policy allows listing objects.\n\tnewPolicyBytes := []byte(fmt.Sprintf(`{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:ListBucket\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::%s/*\"\n   ]\n  }\n ]\n}`, bucket))\n\terr = madmClient.UpdateServiceAccount(ctx, svcAK, madmin.UpdateServiceAccountReq{\n\t\tNewPolicy: newPolicyBytes,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"unable to update session policy for svc acc: %v\", err)\n\t}\n\tc.mustListObjects(ctx, svcClient, bucket)\n}\n\nfunc (c *check) assertSvcAccSecretKeyAndStatusUpdate(ctx context.Context, s *TestSuiteIAM, madmClient *madmin.AdminClient, accessKey, bucket string) {\n\tsvcAK, svcSK := mustGenerateCredentials(c)\n\tcr, err := madmClient.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tTargetUser: accessKey,\n\t\tAccessKey:  svcAK,\n\t\tSecretKey:  svcSK,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to create svc acc: %v\", err)\n\t}\n\tsvcClient := s.getUserClient(c, cr.AccessKey, cr.SecretKey, \"\")\n\tc.mustListObjects(ctx, svcClient, bucket)\n\n\t_, svcSK2 := mustGenerateCredentials(c)\n\terr = madmClient.UpdateServiceAccount(ctx, svcAK, madmin.UpdateServiceAccountReq{\n\t\tNewSecretKey: svcSK2,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"unable to update secret key for svc acc: %v\", err)\n\t}\n\t// old creds should not work:\n\tc.mustNotListObjects(ctx, svcClient, bucket)\n\t// new creds work:\n\tsvcClient2 := s.getUserClient(c, cr.AccessKey, svcSK2, \"\")\n\tc.mustListObjects(ctx, svcClient2, bucket)\n\n\t// update status to disabled\n\terr = madmClient.UpdateServiceAccount(ctx, svcAK, madmin.UpdateServiceAccountReq{\n\t\tNewStatus: \"off\",\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"unable to update secret key for svc acc: %v\", err)\n\t}\n\tc.mustNotListObjects(ctx, svcClient2, bucket)\n}\n\nfunc (c *check) assertSvcAccDeletion(ctx context.Context, s *TestSuiteIAM, madmClient *madmin.AdminClient, accessKey, bucket string) {\n\tsvcAK, svcSK := mustGenerateCredentials(c)\n\tcr, err := madmClient.AddServiceAccount(ctx, madmin.AddServiceAccountReq{\n\t\tTargetUser: accessKey,\n\t\tAccessKey:  svcAK,\n\t\tSecretKey:  svcSK,\n\t})\n\tif err != nil {\n\t\tc.Fatalf(\"Unable to create svc acc: %v\", err)\n\t}\n\tsvcClient := s.getUserClient(c, cr.AccessKey, cr.SecretKey, \"\")\n\tc.mustListObjects(ctx, svcClient, bucket)\n\n\terr = madmClient.DeleteServiceAccount(ctx, svcAK)\n\tif err != nil {\n\t\tc.Fatalf(\"unable to delete svc acc: %v\", err)\n\t}\n\tc.mustNotListObjects(ctx, svcClient, bucket)\n}\n\nfunc mustGenerateCredentials(c *check) (string, string) {\n\tak, sk, err := auth.GenerateCredentials()\n\tif err != nil {\n\t\tc.Fatalf(\"unable to generate credentials: %v\", err)\n\t}\n\treturn ak, sk\n}\n", "// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/dustin/go-humanize\"\n\tjsoniter \"github.com/json-iterator/go\"\n\t\"github.com/minio/madmin-go\"\n\t\"github.com/minio/minio-go/v7/pkg/set\"\n\t\"github.com/minio/minio/internal/auth\"\n\t\"github.com/minio/minio/internal/logger\"\n\tiampolicy \"github.com/minio/pkg/iam/policy\"\n)\n\nconst (\n\t// IAM configuration directory.\n\tiamConfigPrefix = minioConfigPrefix + \"/iam\"\n\n\t// IAM users directory.\n\tiamConfigUsersPrefix = iamConfigPrefix + \"/users/\"\n\n\t// IAM service accounts directory.\n\tiamConfigServiceAccountsPrefix = iamConfigPrefix + \"/service-accounts/\"\n\n\t// IAM groups directory.\n\tiamConfigGroupsPrefix = iamConfigPrefix + \"/groups/\"\n\n\t// IAM policies directory.\n\tiamConfigPoliciesPrefix = iamConfigPrefix + \"/policies/\"\n\n\t// IAM sts directory.\n\tiamConfigSTSPrefix = iamConfigPrefix + \"/sts/\"\n\n\t// IAM Policy DB prefixes.\n\tiamConfigPolicyDBPrefix                = iamConfigPrefix + \"/policydb/\"\n\tiamConfigPolicyDBUsersPrefix           = iamConfigPolicyDBPrefix + \"users/\"\n\tiamConfigPolicyDBSTSUsersPrefix        = iamConfigPolicyDBPrefix + \"sts-users/\"\n\tiamConfigPolicyDBServiceAccountsPrefix = iamConfigPolicyDBPrefix + \"service-accounts/\"\n\tiamConfigPolicyDBGroupsPrefix          = iamConfigPolicyDBPrefix + \"groups/\"\n\n\t// IAM identity file which captures identity credentials.\n\tiamIdentityFile = \"identity.json\"\n\n\t// IAM policy file which provides policies for each users.\n\tiamPolicyFile = \"policy.json\"\n\n\t// IAM group members file\n\tiamGroupMembersFile = \"members.json\"\n\n\t// IAM format file\n\tiamFormatFile = \"format.json\"\n\n\tiamFormatVersion1 = 1\n)\n\ntype iamFormat struct {\n\tVersion int `json:\"version\"`\n}\n\nfunc newIAMFormatVersion1() iamFormat {\n\treturn iamFormat{Version: iamFormatVersion1}\n}\n\nfunc getIAMFormatFilePath() string {\n\treturn iamConfigPrefix + SlashSeparator + iamFormatFile\n}\n\nfunc getUserIdentityPath(user string, userType IAMUserType) string {\n\tvar basePath string\n\tswitch userType {\n\tcase svcUser:\n\t\tbasePath = iamConfigServiceAccountsPrefix\n\tcase stsUser:\n\t\tbasePath = iamConfigSTSPrefix\n\tdefault:\n\t\tbasePath = iamConfigUsersPrefix\n\t}\n\treturn pathJoin(basePath, user, iamIdentityFile)\n}\n\nfunc getGroupInfoPath(group string) string {\n\treturn pathJoin(iamConfigGroupsPrefix, group, iamGroupMembersFile)\n}\n\nfunc getPolicyDocPath(name string) string {\n\treturn pathJoin(iamConfigPoliciesPrefix, name, iamPolicyFile)\n}\n\nfunc getMappedPolicyPath(name string, userType IAMUserType, isGroup bool) string {\n\tif isGroup {\n\t\treturn pathJoin(iamConfigPolicyDBGroupsPrefix, name+\".json\")\n\t}\n\tswitch userType {\n\tcase svcUser:\n\t\treturn pathJoin(iamConfigPolicyDBServiceAccountsPrefix, name+\".json\")\n\tcase stsUser:\n\t\treturn pathJoin(iamConfigPolicyDBSTSUsersPrefix, name+\".json\")\n\tdefault:\n\t\treturn pathJoin(iamConfigPolicyDBUsersPrefix, name+\".json\")\n\t}\n}\n\n// UserIdentity represents a user's secret key and their status\ntype UserIdentity struct {\n\tVersion     int              `json:\"version\"`\n\tCredentials auth.Credentials `json:\"credentials\"`\n}\n\nfunc newUserIdentity(cred auth.Credentials) UserIdentity {\n\treturn UserIdentity{Version: 1, Credentials: cred}\n}\n\n// GroupInfo contains info about a group\ntype GroupInfo struct {\n\tVersion int      `json:\"version\"`\n\tStatus  string   `json:\"status\"`\n\tMembers []string `json:\"members\"`\n}\n\nfunc newGroupInfo(members []string) GroupInfo {\n\treturn GroupInfo{Version: 1, Status: statusEnabled, Members: members}\n}\n\n// MappedPolicy represents a policy name mapped to a user or group\ntype MappedPolicy struct {\n\tVersion  int    `json:\"version\"`\n\tPolicies string `json:\"policy\"`\n}\n\n// converts a mapped policy into a slice of distinct policies\nfunc (mp MappedPolicy) toSlice() []string {\n\tvar policies []string\n\tfor _, policy := range strings.Split(mp.Policies, \",\") {\n\t\tpolicy = strings.TrimSpace(policy)\n\t\tif policy == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tpolicies = append(policies, policy)\n\t}\n\treturn policies\n}\n\nfunc (mp MappedPolicy) policySet() set.StringSet {\n\treturn set.CreateStringSet(mp.toSlice()...)\n}\n\nfunc newMappedPolicy(policy string) MappedPolicy {\n\treturn MappedPolicy{Version: 1, Policies: policy}\n}\n\n// PolicyDoc represents an IAM policy with some metadata.\ntype PolicyDoc struct {\n\tVersion    int `json:\",omitempty\"`\n\tPolicy     iampolicy.Policy\n\tCreateDate time.Time `json:\",omitempty\"`\n\tUpdateDate time.Time `json:\",omitempty\"`\n}\n\nfunc newPolicyDoc(p iampolicy.Policy) PolicyDoc {\n\tnow := UTCNow().Round(time.Millisecond)\n\treturn PolicyDoc{\n\t\tVersion:    1,\n\t\tPolicy:     p,\n\t\tCreateDate: now,\n\t\tUpdateDate: now,\n\t}\n}\n\n// defaultPolicyDoc - used to wrap a default policy as PolicyDoc.\nfunc defaultPolicyDoc(p iampolicy.Policy) PolicyDoc {\n\treturn PolicyDoc{\n\t\tVersion: 1,\n\t\tPolicy:  p,\n\t}\n}\n\nfunc (d *PolicyDoc) update(p iampolicy.Policy) {\n\tnow := UTCNow().Round(time.Millisecond)\n\td.UpdateDate = now\n\tif d.CreateDate.IsZero() {\n\t\td.CreateDate = now\n\t}\n\td.Policy = p\n}\n\n// parseJSON parses both the old and the new format for storing policy\n// definitions.\n//\n// The on-disk format of policy definitions has changed (around early 12/2021)\n// from iampolicy.Policy to PolicyDoc. To avoid a migration, loading supports\n// both the old and the new formats.\nfunc (d *PolicyDoc) parseJSON(data []byte) error {\n\tvar json = jsoniter.ConfigCompatibleWithStandardLibrary\n\tvar doc PolicyDoc\n\terr := json.Unmarshal(data, &doc)\n\tif err != nil {\n\t\terr2 := json.Unmarshal(data, &doc.Policy)\n\t\tif err2 != nil {\n\t\t\t// Just return the first error.\n\t\t\treturn err\n\t\t}\n\t\td.Policy = doc.Policy\n\t\treturn nil\n\t}\n\t*d = doc\n\treturn nil\n}\n\n// key options\ntype options struct {\n\tttl int64 // expiry in seconds\n}\n\ntype iamWatchEvent struct {\n\tisCreated bool // !isCreated implies a delete event.\n\tkeyPath   string\n}\n\n// iamCache contains in-memory cache of IAM data.\ntype iamCache struct {\n\t// map of policy names to policy definitions\n\tiamPolicyDocsMap map[string]PolicyDoc\n\t// map of usernames to credentials\n\tiamUsersMap map[string]auth.Credentials\n\t// map of group names to group info\n\tiamGroupsMap map[string]GroupInfo\n\t// map of user names to groups they are a member of\n\tiamUserGroupMemberships map[string]set.StringSet\n\t// map of usernames/temporary access keys to policy names\n\tiamUserPolicyMap map[string]MappedPolicy\n\t// map of group names to policy names\n\tiamGroupPolicyMap map[string]MappedPolicy\n}\n\nfunc newIamCache() *iamCache {\n\treturn &iamCache{\n\t\tiamPolicyDocsMap:        map[string]PolicyDoc{},\n\t\tiamUsersMap:             map[string]auth.Credentials{},\n\t\tiamGroupsMap:            map[string]GroupInfo{},\n\t\tiamUserGroupMemberships: map[string]set.StringSet{},\n\t\tiamUserPolicyMap:        map[string]MappedPolicy{},\n\t\tiamGroupPolicyMap:       map[string]MappedPolicy{},\n\t}\n}\n\n// buildUserGroupMemberships - builds the memberships map. IMPORTANT:\n// Assumes that c.Lock is held by caller.\nfunc (c *iamCache) buildUserGroupMemberships() {\n\tfor group, gi := range c.iamGroupsMap {\n\t\tc.updateGroupMembershipsMap(group, &gi)\n\t}\n}\n\n// updateGroupMembershipsMap - updates the memberships map for a\n// group. IMPORTANT: Assumes c.Lock() is held by caller.\nfunc (c *iamCache) updateGroupMembershipsMap(group string, gi *GroupInfo) {\n\tif gi == nil {\n\t\treturn\n\t}\n\tfor _, member := range gi.Members {\n\t\tv := c.iamUserGroupMemberships[member]\n\t\tif v == nil {\n\t\t\tv = set.CreateStringSet(group)\n\t\t} else {\n\t\t\tv.Add(group)\n\t\t}\n\t\tc.iamUserGroupMemberships[member] = v\n\t}\n}\n\n// removeGroupFromMembershipsMap - removes the group from every member\n// in the cache. IMPORTANT: Assumes c.Lock() is held by caller.\nfunc (c *iamCache) removeGroupFromMembershipsMap(group string) {\n\tfor member, groups := range c.iamUserGroupMemberships {\n\t\tif !groups.Contains(group) {\n\t\t\tcontinue\n\t\t}\n\t\tgroups.Remove(group)\n\t\tc.iamUserGroupMemberships[member] = groups\n\t}\n}\n\n// policyDBGet - lower-level helper; does not take locks.\n//\n// If a group is passed, it returns policies associated with the group.\n//\n// If a user is passed, it returns policies of the user along with any groups\n// that the server knows the user is a member of.\n//\n// In LDAP users mode, the server does not store any group membership\n// information in IAM (i.e sys.iam*Map) - this info is stored only in the STS\n// generated credentials. Thus we skip looking up group memberships, user map,\n// and group map and check the appropriate policy maps directly.\nfunc (c *iamCache) policyDBGet(mode UsersSysType, name string, isGroup bool) ([]string, error) {\n\tif isGroup {\n\t\tif mode == MinIOUsersSysType {\n\t\t\tg, ok := c.iamGroupsMap[name]\n\t\t\tif !ok {\n\t\t\t\treturn nil, errNoSuchGroup\n\t\t\t}\n\n\t\t\t// Group is disabled, so we return no policy - this\n\t\t\t// ensures the request is denied.\n\t\t\tif g.Status == statusDisabled {\n\t\t\t\treturn nil, nil\n\t\t\t}\n\t\t}\n\n\t\treturn c.iamGroupPolicyMap[name].toSlice(), nil\n\t}\n\n\tif name == globalActiveCred.AccessKey {\n\t\treturn []string{\"consoleAdmin\"}, nil\n\t}\n\n\t// When looking for a user's policies, we also check if the user\n\t// and the groups they are member of are enabled.\n\tvar parentName string\n\tu, ok := c.iamUsersMap[name]\n\tif ok {\n\t\tif !u.IsValid() {\n\t\t\treturn nil, nil\n\t\t}\n\t\tparentName = u.ParentUser\n\t}\n\n\tmp, ok := c.iamUserPolicyMap[name]\n\tif !ok {\n\t\t// Service accounts with root credentials, inherit parent permissions\n\t\tif parentName == globalActiveCred.AccessKey && u.IsServiceAccount() {\n\t\t\t// even if this is set, the claims present in the service\n\t\t\t// accounts apply the final permissions if any.\n\t\t\treturn []string{\"consoleAdmin\"}, nil\n\t\t}\n\t\tif parentName != \"\" {\n\t\t\tmp = c.iamUserPolicyMap[parentName]\n\t\t}\n\t}\n\n\t// returned policy could be empty\n\tpolicies := mp.toSlice()\n\n\tfor _, group := range c.iamUserGroupMemberships[name].ToSlice() {\n\t\t// Skip missing or disabled groups\n\t\tgi, ok := c.iamGroupsMap[group]\n\t\tif !ok || gi.Status == statusDisabled {\n\t\t\tcontinue\n\t\t}\n\n\t\tpolicies = append(policies, c.iamGroupPolicyMap[group].toSlice()...)\n\t}\n\n\treturn policies, nil\n}\n\n// IAMStorageAPI defines an interface for the IAM persistence layer\ntype IAMStorageAPI interface {\n\n\t// The role of the read-write lock is to prevent go routines from\n\t// concurrently reading and writing the IAM storage. The (r)lock()\n\t// functions return the iamCache. The cache can be safely written to\n\t// only when returned by `lock()`.\n\tlock() *iamCache\n\tunlock()\n\trlock() *iamCache\n\trunlock()\n\n\tmigrateBackendFormat(context.Context) error\n\n\tgetUsersSysType() UsersSysType\n\n\tloadPolicyDoc(ctx context.Context, policy string, m map[string]PolicyDoc) error\n\tloadPolicyDocs(ctx context.Context, m map[string]PolicyDoc) error\n\n\tloadUser(ctx context.Context, user string, userType IAMUserType, m map[string]auth.Credentials) error\n\tloadUsers(ctx context.Context, userType IAMUserType, m map[string]auth.Credentials) error\n\n\tloadGroup(ctx context.Context, group string, m map[string]GroupInfo) error\n\tloadGroups(ctx context.Context, m map[string]GroupInfo) error\n\n\tloadMappedPolicy(ctx context.Context, name string, userType IAMUserType, isGroup bool, m map[string]MappedPolicy) error\n\tloadMappedPolicies(ctx context.Context, userType IAMUserType, isGroup bool, m map[string]MappedPolicy) error\n\n\tsaveIAMConfig(ctx context.Context, item interface{}, path string, opts ...options) error\n\tloadIAMConfig(ctx context.Context, item interface{}, path string) error\n\tdeleteIAMConfig(ctx context.Context, path string) error\n\n\tsavePolicyDoc(ctx context.Context, policyName string, p PolicyDoc) error\n\tsaveMappedPolicy(ctx context.Context, name string, userType IAMUserType, isGroup bool, mp MappedPolicy, opts ...options) error\n\tsaveUserIdentity(ctx context.Context, name string, userType IAMUserType, u UserIdentity, opts ...options) error\n\tsaveGroupInfo(ctx context.Context, group string, gi GroupInfo) error\n\n\tdeletePolicyDoc(ctx context.Context, policyName string) error\n\tdeleteMappedPolicy(ctx context.Context, name string, userType IAMUserType, isGroup bool) error\n\tdeleteUserIdentity(ctx context.Context, name string, userType IAMUserType) error\n\tdeleteGroupInfo(ctx context.Context, name string) error\n}\n\n// iamStorageWatcher is implemented by `IAMStorageAPI` implementers that\n// additionally support watching storage for changes.\ntype iamStorageWatcher interface {\n\twatch(ctx context.Context, keyPath string) <-chan iamWatchEvent\n}\n\n// Set default canned policies only if not already overridden by users.\nfunc setDefaultCannedPolicies(policies map[string]PolicyDoc) {\n\tfor _, v := range iampolicy.DefaultPolicies {\n\t\tif _, ok := policies[v.Name]; !ok {\n\t\t\tpolicies[v.Name] = defaultPolicyDoc(v.Definition)\n\t\t}\n\t}\n}\n\n// LoadIAMCache reads all IAM items and populates a new iamCache object and\n// replaces the in-memory cache object.\nfunc (store *IAMStoreSys) LoadIAMCache(ctx context.Context) error {\n\tnewCache := newIamCache()\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tif err := store.loadPolicyDocs(ctx, newCache.iamPolicyDocsMap); err != nil {\n\t\treturn err\n\t}\n\n\t// Sets default canned policies, if none are set.\n\tsetDefaultCannedPolicies(newCache.iamPolicyDocsMap)\n\n\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\tif err := store.loadUsers(ctx, regUser, newCache.iamUsersMap); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := store.loadGroups(ctx, newCache.iamGroupsMap); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// load polices mapped to users\n\tif err := store.loadMappedPolicies(ctx, regUser, false, newCache.iamUserPolicyMap); err != nil {\n\t\treturn err\n\t}\n\n\t// load policies mapped to groups\n\tif err := store.loadMappedPolicies(ctx, regUser, true, newCache.iamGroupPolicyMap); err != nil {\n\t\treturn err\n\t}\n\n\t// load service accounts\n\tif err := store.loadUsers(ctx, svcUser, newCache.iamUsersMap); err != nil {\n\t\treturn err\n\t}\n\n\t// load STS temp users\n\tif err := store.loadUsers(ctx, stsUser, newCache.iamUsersMap); err != nil {\n\t\treturn err\n\t}\n\n\t// load STS policy mappings\n\tif err := store.loadMappedPolicies(ctx, stsUser, false, newCache.iamUserPolicyMap); err != nil {\n\t\treturn err\n\t}\n\n\tnewCache.buildUserGroupMemberships()\n\n\tcache.iamGroupPolicyMap = newCache.iamGroupPolicyMap\n\tcache.iamGroupsMap = newCache.iamGroupsMap\n\tcache.iamPolicyDocsMap = newCache.iamPolicyDocsMap\n\tcache.iamUserGroupMemberships = newCache.iamUserGroupMemberships\n\tcache.iamUserPolicyMap = newCache.iamUserPolicyMap\n\tcache.iamUsersMap = newCache.iamUsersMap\n\n\treturn nil\n}\n\n// IAMStoreSys contains IAMStorageAPI to add higher-level methods on the storage\n// layer.\ntype IAMStoreSys struct {\n\tIAMStorageAPI\n}\n\n// HasWatcher - returns if the storage system has a watcher.\nfunc (store *IAMStoreSys) HasWatcher() bool {\n\t_, ok := store.IAMStorageAPI.(iamStorageWatcher)\n\treturn ok\n}\n\n// GetUser - fetches credential from memory.\nfunc (store *IAMStoreSys) GetUser(user string) (auth.Credentials, bool) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tc, ok := cache.iamUsersMap[user]\n\treturn c, ok\n}\n\n// GetMappedPolicy - fetches mapped policy from memory.\nfunc (store *IAMStoreSys) GetMappedPolicy(name string, isGroup bool) (MappedPolicy, bool) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tif isGroup {\n\t\tv, ok := cache.iamGroupPolicyMap[name]\n\t\treturn v, ok\n\t}\n\n\tv, ok := cache.iamUserPolicyMap[name]\n\treturn v, ok\n}\n\n// GroupNotificationHandler - updates in-memory cache on notification of\n// change (e.g. peer notification for object storage and etcd watch\n// notification).\nfunc (store *IAMStoreSys) GroupNotificationHandler(ctx context.Context, group string) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\terr := store.loadGroup(ctx, group, cache.iamGroupsMap)\n\tif err != nil && err != errNoSuchGroup {\n\t\treturn err\n\t}\n\n\tif err == errNoSuchGroup {\n\t\t// group does not exist - so remove from memory.\n\t\tcache.removeGroupFromMembershipsMap(group)\n\t\tdelete(cache.iamGroupsMap, group)\n\t\tdelete(cache.iamGroupPolicyMap, group)\n\t\treturn nil\n\t}\n\n\tgi := cache.iamGroupsMap[group]\n\n\t// Updating the group memberships cache happens in two steps:\n\t//\n\t// 1. Remove the group from each user's list of memberships.\n\t// 2. Add the group to each member's list of memberships.\n\t//\n\t// This ensures that regardless of members being added or\n\t// removed, the cache stays current.\n\tcache.removeGroupFromMembershipsMap(group)\n\tcache.updateGroupMembershipsMap(group, &gi)\n\treturn nil\n}\n\n// PolicyDBGet - fetches policies associated with the given user or group, and\n// additional groups if provided.\nfunc (store *IAMStoreSys) PolicyDBGet(name string, isGroup bool, groups ...string) ([]string, error) {\n\tif name == \"\" {\n\t\treturn nil, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tpolicies, err := cache.policyDBGet(store.getUsersSysType(), name, isGroup)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !isGroup {\n\t\tfor _, group := range groups {\n\t\t\tps, err := cache.policyDBGet(store.getUsersSysType(), group, true)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tpolicies = append(policies, ps...)\n\t\t}\n\t}\n\n\treturn policies, nil\n}\n\n// AddUsersToGroup - adds users to group, creating the group if needed.\nfunc (store *IAMStoreSys) AddUsersToGroup(ctx context.Context, group string, members []string) error {\n\tif group == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// Validate that all members exist.\n\tfor _, member := range members {\n\t\tcr, ok := cache.iamUsersMap[member]\n\t\tif !ok {\n\t\t\treturn errNoSuchUser\n\t\t}\n\t\tif cr.IsTemp() || cr.IsServiceAccount() {\n\t\t\treturn errIAMActionNotAllowed\n\t\t}\n\t}\n\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\t// Set group as enabled by default when it doesn't\n\t\t// exist.\n\t\tgi = newGroupInfo(members)\n\t} else {\n\t\tgi.Members = set.CreateStringSet(append(gi.Members, members...)...).ToSlice()\n\t}\n\n\tif err := store.saveGroupInfo(ctx, group, gi); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamGroupsMap[group] = gi\n\n\t// update user-group membership map\n\tfor _, member := range members {\n\t\tgset := cache.iamUserGroupMemberships[member]\n\t\tif gset == nil {\n\t\t\tgset = set.CreateStringSet(group)\n\t\t} else {\n\t\t\tgset.Add(group)\n\t\t}\n\t\tcache.iamUserGroupMemberships[member] = gset\n\t}\n\n\treturn nil\n\n}\n\n// helper function - does not take any locks. Updates only cache if\n// updateCacheOnly is set.\nfunc removeMembersFromGroup(ctx context.Context, store *IAMStoreSys, cache *iamCache, group string, members []string, updateCacheOnly bool) error {\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\treturn errNoSuchGroup\n\t}\n\n\ts := set.CreateStringSet(gi.Members...)\n\td := set.CreateStringSet(members...)\n\tgi.Members = s.Difference(d).ToSlice()\n\n\tif !updateCacheOnly {\n\t\terr := store.saveGroupInfo(ctx, group, gi)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tcache.iamGroupsMap[group] = gi\n\n\t// update user-group membership map\n\tfor _, member := range members {\n\t\tgset := cache.iamUserGroupMemberships[member]\n\t\tif gset == nil {\n\t\t\tcontinue\n\t\t}\n\t\tgset.Remove(group)\n\t\tcache.iamUserGroupMemberships[member] = gset\n\t}\n\n\treturn nil\n}\n\n// RemoveUsersFromGroup - removes users from group, deleting it if it is empty.\nfunc (store *IAMStoreSys) RemoveUsersFromGroup(ctx context.Context, group string, members []string) error {\n\tif group == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// Validate that all members exist.\n\tfor _, member := range members {\n\t\tcr, ok := cache.iamUsersMap[member]\n\t\tif !ok {\n\t\t\treturn errNoSuchUser\n\t\t}\n\t\tif cr.IsTemp() || cr.IsServiceAccount() {\n\t\t\treturn errIAMActionNotAllowed\n\t\t}\n\t}\n\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\treturn errNoSuchGroup\n\t}\n\n\t// Check if attempting to delete a non-empty group.\n\tif len(members) == 0 && len(gi.Members) != 0 {\n\t\treturn errGroupNotEmpty\n\t}\n\n\tif len(members) == 0 {\n\t\t// len(gi.Members) == 0 here.\n\n\t\t// Remove the group from storage. First delete the\n\t\t// mapped policy. No-mapped-policy case is ignored.\n\t\tif err := store.deleteMappedPolicy(ctx, group, regUser, true); err != nil && err != errNoSuchPolicy {\n\t\t\treturn err\n\t\t}\n\t\tif err := store.deleteGroupInfo(ctx, group); err != nil && err != errNoSuchGroup {\n\t\t\treturn err\n\t\t}\n\n\t\t// Delete from server memory\n\t\tdelete(cache.iamGroupsMap, group)\n\t\tdelete(cache.iamGroupPolicyMap, group)\n\t\treturn nil\n\t}\n\n\treturn removeMembersFromGroup(ctx, store, cache, group, members, false)\n}\n\n// SetGroupStatus - updates group status\nfunc (store *IAMStoreSys) SetGroupStatus(ctx context.Context, group string, enabled bool) error {\n\tif group == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\treturn errNoSuchGroup\n\t}\n\n\tif enabled {\n\t\tgi.Status = statusEnabled\n\t} else {\n\t\tgi.Status = statusDisabled\n\t}\n\n\tif err := store.saveGroupInfo(ctx, group, gi); err != nil {\n\t\treturn err\n\t}\n\tcache.iamGroupsMap[group] = gi\n\treturn nil\n}\n\n// GetGroupDescription - builds up group description\nfunc (store *IAMStoreSys) GetGroupDescription(group string) (gd madmin.GroupDesc, err error) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tps, err := cache.policyDBGet(store.getUsersSysType(), group, true)\n\tif err != nil {\n\t\treturn gd, err\n\t}\n\n\tpolicy := strings.Join(ps, \",\")\n\n\tif store.getUsersSysType() != MinIOUsersSysType {\n\t\treturn madmin.GroupDesc{\n\t\t\tName:   group,\n\t\t\tPolicy: policy,\n\t\t}, nil\n\t}\n\n\tgi, ok := cache.iamGroupsMap[group]\n\tif !ok {\n\t\treturn gd, errNoSuchGroup\n\t}\n\n\treturn madmin.GroupDesc{\n\t\tName:    group,\n\t\tStatus:  gi.Status,\n\t\tMembers: gi.Members,\n\t\tPolicy:  policy,\n\t}, nil\n}\n\n// ListGroups - lists groups. Since this is not going to be a frequent\n// operation, we fetch this info from storage, and refresh the cache as well.\nfunc (store *IAMStoreSys) ListGroups(ctx context.Context) (res []string, err error) {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\tm := map[string]GroupInfo{}\n\t\terr = store.loadGroups(ctx, m)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tcache.iamGroupsMap = m\n\n\t\tfor k := range cache.iamGroupsMap {\n\t\t\tres = append(res, k)\n\t\t}\n\t}\n\n\tif store.getUsersSysType() == LDAPUsersSysType {\n\t\tm := map[string]MappedPolicy{}\n\t\terr = store.loadMappedPolicies(ctx, stsUser, true, m)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tcache.iamGroupPolicyMap = m\n\t\tfor k := range cache.iamGroupPolicyMap {\n\t\t\tres = append(res, k)\n\t\t}\n\t}\n\n\treturn\n}\n\n// PolicyDBSet - update the policy mapping for the given user or group in\n// storage and in cache.\nfunc (store *IAMStoreSys) PolicyDBSet(ctx context.Context, name, policy string, userType IAMUserType, isGroup bool) error {\n\tif name == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// Validate that user and group exist.\n\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\tif !isGroup {\n\t\t\tif _, ok := cache.iamUsersMap[name]; !ok {\n\t\t\t\treturn errNoSuchUser\n\t\t\t}\n\t\t} else {\n\t\t\tif _, ok := cache.iamGroupsMap[name]; !ok {\n\t\t\t\treturn errNoSuchGroup\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handle policy mapping removal.\n\tif policy == \"\" {\n\t\tif store.getUsersSysType() == LDAPUsersSysType {\n\t\t\t// Add a fallback removal towards previous content that may come back\n\t\t\t// as a ghost user due to lack of delete, this change occurred\n\t\t\t// introduced in PR #11840\n\t\t\tstore.deleteMappedPolicy(ctx, name, regUser, false)\n\t\t}\n\t\terr := store.deleteMappedPolicy(ctx, name, userType, isGroup)\n\t\tif err != nil && err != errNoSuchPolicy {\n\t\t\treturn err\n\t\t}\n\t\tif !isGroup {\n\t\t\tdelete(cache.iamUserPolicyMap, name)\n\t\t} else {\n\t\t\tdelete(cache.iamGroupPolicyMap, name)\n\t\t}\n\t\treturn nil\n\t}\n\n\t// Handle policy mapping set/update\n\tmp := newMappedPolicy(policy)\n\tfor _, p := range mp.toSlice() {\n\t\tif _, found := cache.iamPolicyDocsMap[p]; !found {\n\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"%w: (%s)\", errNoSuchPolicy, p))\n\t\t\treturn errNoSuchPolicy\n\t\t}\n\t}\n\n\tif err := store.saveMappedPolicy(ctx, name, userType, isGroup, mp); err != nil {\n\t\treturn err\n\t}\n\tif !isGroup {\n\t\tcache.iamUserPolicyMap[name] = mp\n\t} else {\n\t\tcache.iamGroupPolicyMap[name] = mp\n\t}\n\treturn nil\n\n}\n\n// PolicyNotificationHandler - loads given policy from storage. If not present,\n// deletes from cache. This notification only reads from storage, and updates\n// cache. When the notification is for a policy deletion, it updates the\n// user-policy and group-policy maps as well.\nfunc (store *IAMStoreSys) PolicyNotificationHandler(ctx context.Context, policy string) error {\n\tif policy == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\terr := store.loadPolicyDoc(ctx, policy, cache.iamPolicyDocsMap)\n\tif err == errNoSuchPolicy {\n\t\t// policy was deleted, update cache.\n\t\tdelete(cache.iamPolicyDocsMap, policy)\n\n\t\t// update user policy map\n\t\tfor u, mp := range cache.iamUserPolicyMap {\n\t\t\tpset := mp.policySet()\n\t\t\tif !pset.Contains(policy) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\t\t\t_, ok := cache.iamUsersMap[u]\n\t\t\t\tif !ok {\n\t\t\t\t\t// happens when account is deleted or\n\t\t\t\t\t// expired.\n\t\t\t\t\tdelete(cache.iamUserPolicyMap, u)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t\tpset.Remove(policy)\n\t\t\tcache.iamUserPolicyMap[u] = newMappedPolicy(strings.Join(pset.ToSlice(), \",\"))\n\t\t}\n\n\t\t// update group policy map\n\t\tfor g, mp := range cache.iamGroupPolicyMap {\n\t\t\tpset := mp.policySet()\n\t\t\tif !pset.Contains(policy) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tpset.Remove(policy)\n\t\t\tcache.iamGroupPolicyMap[g] = newMappedPolicy(strings.Join(pset.ToSlice(), \",\"))\n\t\t}\n\n\t\treturn nil\n\t}\n\treturn err\n}\n\n// DeletePolicy - deletes policy from storage and cache.\nfunc (store *IAMStoreSys) DeletePolicy(ctx context.Context, policy string) error {\n\tif policy == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// Check if policy is mapped to any existing user or group.\n\tusers := []string{}\n\tgroups := []string{}\n\tfor u, mp := range cache.iamUserPolicyMap {\n\t\tpset := mp.policySet()\n\t\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\t\tif _, ok := cache.iamUsersMap[u]; !ok {\n\t\t\t\t// This case can happen when a temporary account is\n\t\t\t\t// deleted or expired - remove it from userPolicyMap.\n\t\t\t\tdelete(cache.iamUserPolicyMap, u)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tif pset.Contains(policy) {\n\t\t\tusers = append(users, u)\n\t\t}\n\t}\n\tfor g, mp := range cache.iamGroupPolicyMap {\n\t\tpset := mp.policySet()\n\t\tif pset.Contains(policy) {\n\t\t\tgroups = append(groups, g)\n\t\t}\n\t}\n\tif len(users) != 0 || len(groups) != 0 {\n\t\t// error out when a policy could not be deleted as it was in use.\n\t\tloggedErr := fmt.Errorf(\"policy could not be deleted as it is use (users=%s; groups=%s)\",\n\t\t\tfmt.Sprintf(\"[%s]\", strings.Join(users, \",\")),\n\t\t\tfmt.Sprintf(\"[%s]\", strings.Join(groups, \",\")),\n\t\t)\n\t\tlogger.LogIf(GlobalContext, loggedErr)\n\t\treturn errPolicyInUse\n\t}\n\n\terr := store.deletePolicyDoc(ctx, policy)\n\tif err == errNoSuchPolicy {\n\t\t// Ignore error if policy is already deleted.\n\t\terr = nil\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdelete(cache.iamPolicyDocsMap, policy)\n\treturn nil\n}\n\n// GetPolicy - gets the policy definition. Allows specifying multiple comma\n// separated policies - returns a combined policy.\nfunc (store *IAMStoreSys) GetPolicy(name string) (iampolicy.Policy, error) {\n\tif name == \"\" {\n\t\treturn iampolicy.Policy{}, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tpolicies := newMappedPolicy(name).toSlice()\n\tvar combinedPolicy iampolicy.Policy\n\tfor _, policy := range policies {\n\t\tif policy == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tv, ok := cache.iamPolicyDocsMap[policy]\n\t\tif !ok {\n\t\t\treturn v.Policy, errNoSuchPolicy\n\t\t}\n\t\tcombinedPolicy = combinedPolicy.Merge(v.Policy)\n\t}\n\treturn combinedPolicy, nil\n}\n\n// GetPolicyDoc - gets the policy doc which has the policy and some metadata.\n// Exactly one policy must be specified here.\nfunc (store *IAMStoreSys) GetPolicyDoc(name string) (r PolicyDoc, err error) {\n\tname = strings.TrimSpace(name)\n\tif name == \"\" {\n\t\treturn r, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tv, ok := cache.iamPolicyDocsMap[name]\n\tif !ok {\n\t\treturn r, errNoSuchPolicy\n\t}\n\treturn v, nil\n}\n\n// SetPolicy - creates a policy with name.\nfunc (store *IAMStoreSys) SetPolicy(ctx context.Context, name string, policy iampolicy.Policy) error {\n\n\tif policy.IsEmpty() || name == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tvar (\n\t\td  PolicyDoc\n\t\tok bool\n\t)\n\tif d, ok = cache.iamPolicyDocsMap[name]; ok {\n\t\td.update(policy)\n\t} else {\n\t\td = newPolicyDoc(policy)\n\t}\n\n\tif err := store.savePolicyDoc(ctx, name, d); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamPolicyDocsMap[name] = d\n\treturn nil\n\n}\n\n// ListPolicies - fetches all policies from storage and updates cache as well.\n// If bucketName is non-empty, returns policies matching the bucket.\nfunc (store *IAMStoreSys) ListPolicies(ctx context.Context, bucketName string) (map[string]iampolicy.Policy, error) {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tm := map[string]PolicyDoc{}\n\terr := store.loadPolicyDocs(ctx, m)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Sets default canned policies\n\tsetDefaultCannedPolicies(m)\n\n\tcache.iamPolicyDocsMap = m\n\n\tret := map[string]iampolicy.Policy{}\n\tfor k, v := range m {\n\t\tif bucketName == \"\" || v.Policy.MatchResource(bucketName) {\n\t\t\tret[k] = v.Policy\n\t\t}\n\t}\n\n\treturn ret, nil\n}\n\n// helper function - does not take locks.\nfunc filterPolicies(cache *iamCache, policyName string, bucketName string) (string, iampolicy.Policy) {\n\tvar policies []string\n\tmp := newMappedPolicy(policyName)\n\tcombinedPolicy := iampolicy.Policy{}\n\tfor _, policy := range mp.toSlice() {\n\t\tif policy == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tp, found := cache.iamPolicyDocsMap[policy]\n\t\tif found {\n\t\t\tif bucketName == \"\" || p.Policy.MatchResource(bucketName) {\n\t\t\t\tpolicies = append(policies, policy)\n\t\t\t\tcombinedPolicy = combinedPolicy.Merge(p.Policy)\n\t\t\t}\n\t\t}\n\t}\n\treturn strings.Join(policies, \",\"), combinedPolicy\n}\n\n// FilterPolicies - accepts a comma separated list of policy names as a string\n// and bucket and returns only policies that currently exist in MinIO. If\n// bucketName is non-empty, additionally filters policies matching the bucket.\n// The first returned value is the list of currently existing policies, and the\n// second is their combined policy definition.\nfunc (store *IAMStoreSys) FilterPolicies(policyName string, bucketName string) (string, iampolicy.Policy) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\treturn filterPolicies(cache, policyName, bucketName)\n\n}\n\n// GetBucketUsers - returns users (not STS or service accounts) that have access\n// to the bucket. User is included even if a group policy that grants access to\n// the bucket is disabled.\nfunc (store *IAMStoreSys) GetBucketUsers(bucket string) (map[string]madmin.UserInfo, error) {\n\tif bucket == \"\" {\n\t\treturn nil, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tresult := map[string]madmin.UserInfo{}\n\tfor k, v := range cache.iamUsersMap {\n\t\tif v.IsTemp() || v.IsServiceAccount() {\n\t\t\tcontinue\n\t\t}\n\t\tvar policies []string\n\t\tmp, ok := cache.iamUserPolicyMap[k]\n\t\tif ok {\n\t\t\tpolicies = append(policies, mp.Policies)\n\t\t\tfor _, group := range cache.iamUserGroupMemberships[k].ToSlice() {\n\t\t\t\tif nmp, ok := cache.iamGroupPolicyMap[group]; ok {\n\t\t\t\t\tpolicies = append(policies, nmp.Policies)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmatchedPolicies, _ := filterPolicies(cache, strings.Join(policies, \",\"), bucket)\n\t\tif len(matchedPolicies) > 0 {\n\t\t\tresult[k] = madmin.UserInfo{\n\t\t\t\tPolicyName: matchedPolicies,\n\t\t\t\tStatus: func() madmin.AccountStatus {\n\t\t\t\t\tif v.IsValid() {\n\t\t\t\t\t\treturn madmin.AccountEnabled\n\t\t\t\t\t}\n\t\t\t\t\treturn madmin.AccountDisabled\n\t\t\t\t}(),\n\t\t\t\tMemberOf: cache.iamUserGroupMemberships[k].ToSlice(),\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result, nil\n}\n\n// GetUsers - returns all users (not STS or service accounts).\nfunc (store *IAMStoreSys) GetUsers() map[string]madmin.UserInfo {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tresult := map[string]madmin.UserInfo{}\n\tfor k, v := range cache.iamUsersMap {\n\t\tif v.IsTemp() || v.IsServiceAccount() {\n\t\t\tcontinue\n\t\t}\n\t\tresult[k] = madmin.UserInfo{\n\t\t\tPolicyName: cache.iamUserPolicyMap[k].Policies,\n\t\t\tStatus: func() madmin.AccountStatus {\n\t\t\t\tif v.IsValid() {\n\t\t\t\t\treturn madmin.AccountEnabled\n\t\t\t\t}\n\t\t\t\treturn madmin.AccountDisabled\n\t\t\t}(),\n\t\t\tMemberOf: cache.iamUserGroupMemberships[k].ToSlice(),\n\t\t}\n\t}\n\n\treturn result\n}\n\n// GetUserInfo - get info on a user.\nfunc (store *IAMStoreSys) GetUserInfo(name string) (u madmin.UserInfo, err error) {\n\tif name == \"\" {\n\t\treturn u, errInvalidArgument\n\t}\n\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tif store.getUsersSysType() != MinIOUsersSysType {\n\t\t// If the user has a mapped policy or is a member of a group, we\n\t\t// return that info. Otherwise we return error.\n\t\tvar groups []string\n\t\tfor _, v := range cache.iamUsersMap {\n\t\t\tif v.ParentUser == name {\n\t\t\t\tgroups = v.Groups\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tmappedPolicy, ok := cache.iamUserPolicyMap[name]\n\t\tif !ok {\n\t\t\treturn u, errNoSuchUser\n\t\t}\n\t\treturn madmin.UserInfo{\n\t\t\tPolicyName: mappedPolicy.Policies,\n\t\t\tMemberOf:   groups,\n\t\t}, nil\n\t}\n\n\tcred, found := cache.iamUsersMap[name]\n\tif !found {\n\t\treturn u, errNoSuchUser\n\t}\n\n\tif cred.IsTemp() || cred.IsServiceAccount() {\n\t\treturn u, errIAMActionNotAllowed\n\t}\n\n\treturn madmin.UserInfo{\n\t\tPolicyName: cache.iamUserPolicyMap[name].Policies,\n\t\tStatus: func() madmin.AccountStatus {\n\t\t\tif cred.IsValid() {\n\t\t\t\treturn madmin.AccountEnabled\n\t\t\t}\n\t\t\treturn madmin.AccountDisabled\n\t\t}(),\n\t\tMemberOf: cache.iamUserGroupMemberships[name].ToSlice(),\n\t}, nil\n}\n\n// PolicyMappingNotificationHandler - handles updating a policy mapping from storage.\nfunc (store *IAMStoreSys) PolicyMappingNotificationHandler(ctx context.Context, userOrGroup string, isGroup bool, userType IAMUserType) error {\n\tif userOrGroup == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tm := cache.iamGroupPolicyMap\n\tif !isGroup {\n\t\tm = cache.iamUserPolicyMap\n\t}\n\terr := store.loadMappedPolicy(ctx, userOrGroup, userType, isGroup, m)\n\tif err == errNoSuchPolicy {\n\t\t// This means that the policy mapping was deleted, so we update\n\t\t// the cache.\n\t\tdelete(m, userOrGroup)\n\t\terr = nil\n\t}\n\treturn err\n}\n\n// UserNotificationHandler - handles updating a user/STS account/service account\n// from storage.\nfunc (store *IAMStoreSys) UserNotificationHandler(ctx context.Context, accessKey string, userType IAMUserType) error {\n\tif accessKey == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\terr := store.loadUser(ctx, accessKey, userType, cache.iamUsersMap)\n\tif err == errNoSuchUser {\n\t\t// User was deleted - we update the cache.\n\t\tdelete(cache.iamUsersMap, accessKey)\n\n\t\t// 1. Start with updating user-group memberships\n\t\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\t\tmemberOf := cache.iamUserGroupMemberships[accessKey].ToSlice()\n\t\t\tfor _, group := range memberOf {\n\t\t\t\tremoveErr := removeMembersFromGroup(ctx, store, cache, group, []string{accessKey}, true)\n\t\t\t\tif removeErr == errNoSuchGroup {\n\t\t\t\t\tremoveErr = nil\n\t\t\t\t}\n\t\t\t\tif removeErr != nil {\n\t\t\t\t\treturn removeErr\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 2. Remove any derived credentials from memory\n\t\tif userType == regUser {\n\t\t\tfor _, u := range cache.iamUsersMap {\n\t\t\t\tif u.IsServiceAccount() && u.ParentUser == accessKey {\n\t\t\t\t\tdelete(cache.iamUsersMap, u.AccessKey)\n\t\t\t\t}\n\t\t\t\tif u.IsTemp() && u.ParentUser == accessKey {\n\t\t\t\t\tdelete(cache.iamUsersMap, u.AccessKey)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 3. Delete any mapped policy\n\t\tdelete(cache.iamUserPolicyMap, accessKey)\n\t\treturn nil\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\tif userType != svcUser {\n\t\terr = store.loadMappedPolicy(ctx, accessKey, userType, false, cache.iamUserPolicyMap)\n\t\t// Ignore policy not mapped error\n\t\tif err != nil && err != errNoSuchPolicy {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// We are on purpose not persisting the policy map for parent\n\t// user, although this is a hack, it is a good enough hack\n\t// at this point in time - we need to overhaul our OIDC\n\t// usage with service accounts with a more cleaner implementation\n\t//\n\t// This mapping is necessary to ensure that valid credentials\n\t// have necessary ParentUser present - this is mainly for only\n\t// webIdentity based STS tokens.\n\tcred, ok := cache.iamUsersMap[accessKey]\n\tif ok {\n\t\tif cred.IsTemp() && cred.ParentUser != \"\" && cred.ParentUser != globalActiveCred.AccessKey {\n\t\t\tif _, ok := cache.iamUserPolicyMap[cred.ParentUser]; !ok {\n\t\t\t\tcache.iamUserPolicyMap[cred.ParentUser] = cache.iamUserPolicyMap[accessKey]\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// DeleteUser - deletes a user from storage and cache. This only used with\n// long-term users and service accounts, not STS.\nfunc (store *IAMStoreSys) DeleteUser(ctx context.Context, accessKey string, userType IAMUserType) error {\n\tif accessKey == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t// first we remove the user from their groups.\n\tif store.getUsersSysType() == MinIOUsersSysType && userType == regUser {\n\t\tmemberOf := cache.iamUserGroupMemberships[accessKey].ToSlice()\n\t\tfor _, group := range memberOf {\n\t\t\tremoveErr := removeMembersFromGroup(ctx, store, cache, group, []string{accessKey}, false)\n\t\t\tif removeErr != nil {\n\t\t\t\treturn removeErr\n\t\t\t}\n\t\t}\n\t}\n\n\t// Now we can remove the user from memory and IAM store\n\n\t// Delete any STS and service account derived from this credential\n\t// first.\n\tif userType == regUser {\n\t\tfor _, u := range cache.iamUsersMap {\n\t\t\tif u.IsServiceAccount() && u.ParentUser == accessKey {\n\t\t\t\t_ = store.deleteUserIdentity(ctx, u.AccessKey, svcUser)\n\t\t\t\tdelete(cache.iamUsersMap, u.AccessKey)\n\t\t\t}\n\t\t\t// Delete any associated STS users.\n\t\t\tif u.IsTemp() && u.ParentUser == accessKey {\n\t\t\t\t_ = store.deleteUserIdentity(ctx, u.AccessKey, stsUser)\n\t\t\t\tdelete(cache.iamUsersMap, u.AccessKey)\n\t\t\t}\n\t\t}\n\t}\n\n\t// It is ok to ignore deletion error on the mapped policy\n\tstore.deleteMappedPolicy(ctx, accessKey, userType, false)\n\tdelete(cache.iamUserPolicyMap, accessKey)\n\n\terr := store.deleteUserIdentity(ctx, accessKey, userType)\n\tif err == errNoSuchUser {\n\t\t// ignore if user is already deleted.\n\t\terr = nil\n\t}\n\tdelete(cache.iamUsersMap, accessKey)\n\n\treturn err\n}\n\n// SetTempUser - saves temporary (STS) credential to storage and cache. If a\n// policy name is given, it is associated with the parent user specified in the\n// credential.\nfunc (store *IAMStoreSys) SetTempUser(ctx context.Context, accessKey string, cred auth.Credentials, policyName string) error {\n\tif accessKey == \"\" || !cred.IsTemp() || cred.IsExpired() || cred.ParentUser == \"\" {\n\t\treturn errInvalidArgument\n\t}\n\n\tttl := int64(cred.Expiration.Sub(UTCNow()).Seconds())\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tif policyName != \"\" {\n\t\tmp := newMappedPolicy(policyName)\n\t\t_, combinedPolicyStmt := filterPolicies(cache, mp.Policies, \"\")\n\n\t\tif combinedPolicyStmt.IsEmpty() {\n\t\t\treturn fmt.Errorf(\"specified policy %s, not found %w\", policyName, errNoSuchPolicy)\n\t\t}\n\n\t\terr := store.saveMappedPolicy(ctx, cred.ParentUser, stsUser, false, mp, options{ttl: ttl})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tcache.iamUserPolicyMap[cred.ParentUser] = mp\n\t}\n\n\tu := newUserIdentity(cred)\n\terr := store.saveUserIdentity(ctx, accessKey, stsUser, u, options{ttl: ttl})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[accessKey] = cred\n\treturn nil\n}\n\n// DeleteUsers - given a set of users or access keys, deletes them along with\n// any derived credentials (STS or service accounts) and any associated policy\n// mappings.\nfunc (store *IAMStoreSys) DeleteUsers(ctx context.Context, users []string) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tusersToDelete := set.CreateStringSet(users...)\n\tfor user, cred := range cache.iamUsersMap {\n\t\tuserType := regUser\n\t\tif cred.IsServiceAccount() {\n\t\t\tuserType = svcUser\n\t\t} else if cred.IsTemp() {\n\t\t\tuserType = stsUser\n\t\t}\n\n\t\tif usersToDelete.Contains(user) || usersToDelete.Contains(cred.ParentUser) {\n\t\t\t// Delete this user account and its policy mapping\n\t\t\tstore.deleteMappedPolicy(ctx, user, userType, false)\n\t\t\tdelete(cache.iamUserPolicyMap, user)\n\n\t\t\t// we are only logging errors, not handling them.\n\t\t\terr := store.deleteUserIdentity(ctx, user, userType)\n\t\t\tlogger.LogIf(GlobalContext, err)\n\t\t\tdelete(cache.iamUsersMap, user)\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// GetAllParentUsers - returns all distinct \"parent-users\" associated with STS or service\n// credentials.\nfunc (store *IAMStoreSys) GetAllParentUsers() []string {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tres := set.NewStringSet()\n\tfor _, cred := range cache.iamUsersMap {\n\t\tif cred.IsServiceAccount() || cred.IsTemp() {\n\t\t\tres.Add(cred.ParentUser)\n\t\t}\n\t}\n\n\treturn res.ToSlice()\n}\n\n// SetUserStatus - sets current user status.\nfunc (store *IAMStoreSys) SetUserStatus(ctx context.Context, accessKey string, status madmin.AccountStatus) error {\n\tif accessKey != \"\" && status != madmin.AccountEnabled && status != madmin.AccountDisabled {\n\t\treturn errInvalidArgument\n\t}\n\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tcred, ok := cache.iamUsersMap[accessKey]\n\tif !ok {\n\t\treturn errNoSuchUser\n\t}\n\n\tif cred.IsTemp() || cred.IsServiceAccount() {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tuinfo := newUserIdentity(auth.Credentials{\n\t\tAccessKey: accessKey,\n\t\tSecretKey: cred.SecretKey,\n\t\tStatus: func() string {\n\t\t\tif status == madmin.AccountEnabled {\n\t\t\t\treturn auth.AccountOn\n\t\t\t}\n\t\t\treturn auth.AccountOff\n\t\t}(),\n\t})\n\n\tif err := store.saveUserIdentity(ctx, accessKey, regUser, uinfo); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[accessKey] = uinfo.Credentials\n\treturn nil\n}\n\n// AddServiceAccount - add a new service account\nfunc (store *IAMStoreSys) AddServiceAccount(ctx context.Context, cred auth.Credentials) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\taccessKey := cred.AccessKey\n\tparentUser := cred.ParentUser\n\n\t// Found newly requested service account, to be an existing account -\n\t// reject such operation (updates to the service account are handled in\n\t// a different API).\n\tif _, found := cache.iamUsersMap[accessKey]; found {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\t// Parent user must not be a service account.\n\tif cr, found := cache.iamUsersMap[parentUser]; found && cr.IsServiceAccount() {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tu := newUserIdentity(cred)\n\terr := store.saveUserIdentity(ctx, u.Credentials.AccessKey, svcUser, u)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[u.Credentials.AccessKey] = u.Credentials\n\n\treturn nil\n}\n\n// UpdateServiceAccount - updates a service account on storage.\nfunc (store *IAMStoreSys) UpdateServiceAccount(ctx context.Context, accessKey string, opts updateServiceAccountOpts) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tcr, ok := cache.iamUsersMap[accessKey]\n\tif !ok || !cr.IsServiceAccount() {\n\t\treturn errNoSuchServiceAccount\n\t}\n\n\tif opts.secretKey != \"\" {\n\t\tif !auth.IsSecretKeyValid(opts.secretKey) {\n\t\t\treturn auth.ErrInvalidSecretKeyLength\n\t\t}\n\t\tcr.SecretKey = opts.secretKey\n\t}\n\n\tswitch opts.status {\n\t// The caller did not ask to update status account, do nothing\n\tcase \"\":\n\t// Update account status\n\tcase auth.AccountOn, auth.AccountOff:\n\t\tcr.Status = opts.status\n\tdefault:\n\t\treturn errors.New(\"unknown account status value\")\n\t}\n\n\tif opts.sessionPolicy != nil {\n\t\tm, err := getClaimsFromToken(cr.SessionToken)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"unable to get svc acc claims: %v\", err)\n\t\t}\n\n\t\terr = opts.sessionPolicy.Validate()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpolicyBuf, err := json.Marshal(opts.sessionPolicy)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif len(policyBuf) > 16*humanize.KiByte {\n\t\t\treturn fmt.Errorf(\"Session policy should not exceed 16 KiB characters\")\n\t\t}\n\n\t\t// Overwrite session policy claims.\n\t\tm[iampolicy.SessionPolicyName] = base64.StdEncoding.EncodeToString(policyBuf)\n\t\tm[iamPolicyClaimNameSA()] = \"embedded-policy\"\n\t\tcr.SessionToken, err = auth.JWTSignWithAccessKey(accessKey, m, globalActiveCred.SecretKey)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tu := newUserIdentity(cr)\n\tif err := store.saveUserIdentity(ctx, u.Credentials.AccessKey, svcUser, u); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[u.Credentials.AccessKey] = u.Credentials\n\n\treturn nil\n}\n\n// ListServiceAccounts - lists only service accounts from the cache.\nfunc (store *IAMStoreSys) ListServiceAccounts(ctx context.Context, accessKey string) ([]auth.Credentials, error) {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tvar serviceAccounts []auth.Credentials\n\tfor _, v := range cache.iamUsersMap {\n\t\tif v.IsServiceAccount() && v.ParentUser == accessKey {\n\t\t\t// Hide secret key & session key here\n\t\t\tv.SecretKey = \"\"\n\t\t\tv.SessionToken = \"\"\n\t\t\tserviceAccounts = append(serviceAccounts, v)\n\t\t}\n\t}\n\n\treturn serviceAccounts, nil\n}\n\n// AddUser - adds/updates long term user account to storage.\nfunc (store *IAMStoreSys) AddUser(ctx context.Context, accessKey string, ureq madmin.AddOrUpdateUserReq) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tcr, ok := cache.iamUsersMap[accessKey]\n\n\t// It is not possible to update an STS account.\n\tif ok && cr.IsTemp() {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tu := newUserIdentity(auth.Credentials{\n\t\tAccessKey: accessKey,\n\t\tSecretKey: ureq.SecretKey,\n\t\tStatus: func() string {\n\t\t\tif ureq.Status == madmin.AccountEnabled {\n\t\t\t\treturn auth.AccountOn\n\t\t\t}\n\t\t\treturn auth.AccountOff\n\t\t}(),\n\t})\n\n\tif err := store.saveUserIdentity(ctx, accessKey, regUser, u); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[accessKey] = u.Credentials\n\n\treturn nil\n}\n\n// UpdateUserSecretKey - sets user secret key to storage.\nfunc (store *IAMStoreSys) UpdateUserSecretKey(ctx context.Context, accessKey, secretKey string) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tcred, ok := cache.iamUsersMap[accessKey]\n\tif !ok {\n\t\treturn errNoSuchUser\n\t}\n\n\tcred.SecretKey = secretKey\n\tu := newUserIdentity(cred)\n\tif err := store.saveUserIdentity(ctx, accessKey, regUser, u); err != nil {\n\t\treturn err\n\t}\n\n\tcache.iamUsersMap[accessKey] = cred\n\treturn nil\n}\n\n// GetSTSAndServiceAccounts - returns all STS and Service account credentials.\nfunc (store *IAMStoreSys) GetSTSAndServiceAccounts() []auth.Credentials {\n\tcache := store.rlock()\n\tdefer store.runlock()\n\n\tvar res []auth.Credentials\n\tfor _, cred := range cache.iamUsersMap {\n\t\tif cred.IsTemp() || cred.IsServiceAccount() {\n\t\t\tres = append(res, cred)\n\t\t}\n\t}\n\treturn res\n}\n\n// UpdateUserIdentity - updates a user credential.\nfunc (store *IAMStoreSys) UpdateUserIdentity(ctx context.Context, cred auth.Credentials) error {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\tuserType := regUser\n\tif cred.IsServiceAccount() {\n\t\tuserType = svcUser\n\t} else if cred.IsTemp() {\n\t\tuserType = stsUser\n\t}\n\n\t// Overwrite the user identity here. As store should be\n\t// atomic, it shouldn't cause any corruption.\n\tif err := store.saveUserIdentity(ctx, cred.AccessKey, userType, newUserIdentity(cred)); err != nil {\n\t\treturn err\n\t}\n\tcache.iamUsersMap[cred.AccessKey] = cred\n\treturn nil\n}\n\n// LoadUser - attempts to load user info from storage and updates cache.\nfunc (store *IAMStoreSys) LoadUser(ctx context.Context, accessKey string) {\n\tcache := store.lock()\n\tdefer store.unlock()\n\n\t_, found := cache.iamUsersMap[accessKey]\n\tif !found {\n\t\tstore.loadUser(ctx, accessKey, regUser, cache.iamUsersMap)\n\t\tif _, found = cache.iamUsersMap[accessKey]; found {\n\t\t\t// load mapped policies\n\t\t\tstore.loadMappedPolicy(ctx, accessKey, regUser, false, cache.iamUserPolicyMap)\n\t\t} else {\n\t\t\t// check for service account\n\t\t\tstore.loadUser(ctx, accessKey, svcUser, cache.iamUsersMap)\n\t\t\tif svc, found := cache.iamUsersMap[accessKey]; found {\n\t\t\t\t// Load parent user and mapped policies.\n\t\t\t\tif store.getUsersSysType() == MinIOUsersSysType {\n\t\t\t\t\tstore.loadUser(ctx, svc.ParentUser, regUser, cache.iamUsersMap)\n\t\t\t\t}\n\t\t\t\tstore.loadMappedPolicy(ctx, svc.ParentUser, regUser, false, cache.iamUserPolicyMap)\n\t\t\t} else {\n\t\t\t\t// check for STS account\n\t\t\t\tstore.loadUser(ctx, accessKey, stsUser, cache.iamUsersMap)\n\t\t\t\tif _, found = cache.iamUsersMap[accessKey]; found {\n\t\t\t\t\t// Load mapped policy\n\t\t\t\t\tstore.loadMappedPolicy(ctx, accessKey, stsUser, false, cache.iamUserPolicyMap)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Load any associated policy definitions\n\tfor _, policy := range cache.iamUserPolicyMap[accessKey].toSlice() {\n\t\tif _, found = cache.iamPolicyDocsMap[policy]; !found {\n\t\t\tstore.loadPolicyDoc(ctx, policy, cache.iamPolicyDocsMap)\n\t\t}\n\t}\n}\n", "// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"path\"\n\t\"sort\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\thumanize \"github.com/dustin/go-humanize\"\n\t\"github.com/minio/madmin-go\"\n\t\"github.com/minio/minio-go/v7/pkg/set\"\n\t\"github.com/minio/minio/internal/arn\"\n\t\"github.com/minio/minio/internal/auth\"\n\t\"github.com/minio/minio/internal/color\"\n\t\"github.com/minio/minio/internal/logger\"\n\tiampolicy \"github.com/minio/pkg/iam/policy\"\n\tetcd \"go.etcd.io/etcd/client/v3\"\n)\n\n// UsersSysType - defines the type of users and groups system that is\n// active on the server.\ntype UsersSysType string\n\n// Types of users configured in the server.\nconst (\n\t// This mode uses the internal users system in MinIO.\n\tMinIOUsersSysType UsersSysType = \"MinIOUsersSys\"\n\n\t// This mode uses users and groups from a configured LDAP\n\t// server.\n\tLDAPUsersSysType UsersSysType = \"LDAPUsersSys\"\n)\n\nconst (\n\tstatusEnabled  = \"enabled\"\n\tstatusDisabled = \"disabled\"\n)\n\n// IAMSys - config system.\ntype IAMSys struct {\n\tsync.Mutex\n\n\tiamRefreshInterval time.Duration\n\tnotificationSys    *NotificationSys\n\n\tusersSysType UsersSysType\n\n\trolesMap map[arn.ARN]string\n\n\t// Persistence layer for IAM subsystem\n\tstore *IAMStoreSys\n\n\t// configLoaded will be closed and remain so after first load.\n\tconfigLoaded chan struct{}\n}\n\n// IAMUserType represents a user type inside MinIO server\ntype IAMUserType int\n\nconst (\n\tregUser IAMUserType = iota\n\tstsUser\n\tsvcUser\n)\n\n// LoadGroup - loads a specific group from storage, and updates the\n// memberships cache. If the specified group does not exist in\n// storage, it is removed from in-memory maps as well - this\n// simplifies the implementation for group removal. This is called\n// only via IAM notifications.\nfunc (sys *IAMSys) LoadGroup(ctx context.Context, objAPI ObjectLayer, group string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\treturn sys.store.GroupNotificationHandler(ctx, group)\n}\n\n// LoadPolicy - reloads a specific canned policy from backend disks or etcd.\nfunc (sys *IAMSys) LoadPolicy(ctx context.Context, objAPI ObjectLayer, policyName string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\treturn sys.store.PolicyNotificationHandler(ctx, policyName)\n}\n\n// LoadPolicyMapping - loads the mapped policy for a user or group\n// from storage into server memory.\nfunc (sys *IAMSys) LoadPolicyMapping(ctx context.Context, objAPI ObjectLayer, userOrGroup string, isGroup bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\t// In case of LDAP, policy mappings are only applicable to sts users.\n\tuserType := regUser\n\tif sys.usersSysType == LDAPUsersSysType {\n\t\tuserType = stsUser\n\t}\n\n\treturn sys.store.PolicyMappingNotificationHandler(ctx, userOrGroup, isGroup, userType)\n}\n\n// LoadUser - reloads a specific user from backend disks or etcd.\nfunc (sys *IAMSys) LoadUser(ctx context.Context, objAPI ObjectLayer, accessKey string, userType IAMUserType) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\treturn sys.store.UserNotificationHandler(ctx, accessKey, userType)\n}\n\n// LoadServiceAccount - reloads a specific service account from backend disks or etcd.\nfunc (sys *IAMSys) LoadServiceAccount(ctx context.Context, accessKey string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\treturn sys.store.UserNotificationHandler(ctx, accessKey, svcUser)\n}\n\n// Perform IAM configuration migration.\nfunc (sys *IAMSys) doIAMConfigMigration(ctx context.Context) error {\n\treturn sys.store.migrateBackendFormat(ctx)\n}\n\n// initStore initializes IAM stores\nfunc (sys *IAMSys) initStore(objAPI ObjectLayer, etcdClient *etcd.Client) {\n\tif globalLDAPConfig.Enabled {\n\t\tsys.EnableLDAPSys()\n\t}\n\n\tif etcdClient == nil {\n\t\tif globalIsGateway {\n\t\t\tif globalGatewayName == NASBackendGateway {\n\t\t\t\tsys.store = &IAMStoreSys{newIAMObjectStore(objAPI, sys.usersSysType)}\n\t\t\t} else {\n\t\t\t\tsys.store = &IAMStoreSys{newIAMDummyStore(sys.usersSysType)}\n\t\t\t\tlogger.Info(\"WARNING: %s gateway is running in-memory IAM store, for persistence please configure etcd\",\n\t\t\t\t\tglobalGatewayName)\n\t\t\t}\n\t\t} else {\n\t\t\tsys.store = &IAMStoreSys{newIAMObjectStore(objAPI, sys.usersSysType)}\n\t\t}\n\t} else {\n\t\tsys.store = &IAMStoreSys{newIAMEtcdStore(etcdClient, sys.usersSysType)}\n\t}\n\n}\n\n// Initialized checks if IAM is initialized\nfunc (sys *IAMSys) Initialized() bool {\n\tif sys == nil {\n\t\treturn false\n\t}\n\tsys.Lock()\n\tdefer sys.Unlock()\n\treturn sys.store != nil\n}\n\n// Load - loads all credentials, policies and policy mappings.\nfunc (sys *IAMSys) Load(ctx context.Context) error {\n\terr := sys.store.LoadIAMCache(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tselect {\n\tcase <-sys.configLoaded:\n\tdefault:\n\t\tclose(sys.configLoaded)\n\t}\n\treturn nil\n}\n\n// Init - initializes config system by reading entries from config/iam\nfunc (sys *IAMSys) Init(ctx context.Context, objAPI ObjectLayer, etcdClient *etcd.Client, nSys *NotificationSys, iamRefreshInterval time.Duration) {\n\tsys.Lock()\n\tdefer sys.Unlock()\n\n\tsys.iamRefreshInterval = iamRefreshInterval\n\tsys.notificationSys = nSys\n\n\t// Initialize IAM store\n\tsys.initStore(objAPI, etcdClient)\n\n\tretryCtx, cancel := context.WithCancel(ctx)\n\n\t// Indicate to our routine to exit cleanly upon return.\n\tdefer cancel()\n\n\t// Hold the lock for migration only.\n\ttxnLk := objAPI.NewNSLock(minioMetaBucket, minioConfigPrefix+\"/iam.lock\")\n\n\t// allocate dynamic timeout once before the loop\n\tiamLockTimeout := newDynamicTimeout(5*time.Second, 3*time.Second)\n\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\n\t// Migrate storage format if needed.\n\tfor {\n\t\t// let one of the server acquire the lock, if not let them timeout.\n\t\t// which shall be retried again by this loop.\n\t\tlkctx, err := txnLk.GetLock(retryCtx, iamLockTimeout)\n\t\tif err != nil {\n\t\t\tlogger.Info(\"Waiting for all MinIO IAM sub-system to be initialized.. trying to acquire lock\")\n\t\t\ttime.Sleep(time.Duration(r.Float64() * float64(5*time.Second)))\n\t\t\tcontinue\n\t\t}\n\n\t\tif etcdClient != nil {\n\t\t\t// ****  WARNING ****\n\t\t\t// Migrating to encrypted backend on etcd should happen before initialization of\n\t\t\t// IAM sub-system, make sure that we do not move the above codeblock elsewhere.\n\t\t\tif err := migrateIAMConfigsEtcdToEncrypted(retryCtx, etcdClient); err != nil {\n\t\t\t\ttxnLk.Unlock(lkctx.Cancel)\n\t\t\t\tif errors.Is(err, errEtcdUnreachable) {\n\t\t\t\t\tlogger.Info(\"Connection to etcd timed out. Retrying..\")\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tlogger.LogIf(ctx, fmt.Errorf(\"Unable to decrypt an encrypted ETCD backend for IAM users and policies: %w\", err))\n\t\t\t\tlogger.LogIf(ctx, errors.New(\"IAM sub-system is partially initialized, some users may not be available\"))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\t// These messages only meant primarily for distributed setup, so only log during distributed setup.\n\t\tif globalIsDistErasure {\n\t\t\tlogger.Info(\"Waiting for all MinIO IAM sub-system to be initialized.. lock acquired\")\n\t\t}\n\n\t\t// Migrate IAM configuration, if necessary.\n\t\tif err := sys.doIAMConfigMigration(retryCtx); err != nil {\n\t\t\ttxnLk.Unlock(lkctx.Cancel)\n\t\t\tif configRetriableErrors(err) {\n\t\t\t\tlogger.Info(\"Waiting for all MinIO IAM sub-system to be initialized.. possible cause (%v)\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tlogger.LogIf(ctx, fmt.Errorf(\"Unable to migrate IAM users and policies to new format: %w\", err))\n\t\t\tlogger.LogIf(ctx, errors.New(\"IAM sub-system is partially initialized, some users may not be available\"))\n\t\t\treturn\n\t\t}\n\n\t\t// Successfully migrated, proceed to load the users.\n\t\ttxnLk.Unlock(lkctx.Cancel)\n\t\tbreak\n\t}\n\n\t// Load IAM data from storage.\n\tfor {\n\t\tif err := sys.Load(retryCtx); err != nil {\n\t\t\tif configRetriableErrors(err) {\n\t\t\t\tlogger.Info(\"Waiting for all MinIO IAM sub-system to be initialized.. possible cause (%v)\", err)\n\t\t\t\ttime.Sleep(time.Duration(r.Float64() * float64(5*time.Second)))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tlogger.LogIf(ctx, fmt.Errorf(\"Unable to initialize IAM sub-system, some users may not be available %w\", err))\n\t\t\t}\n\t\t}\n\t\tbreak\n\t}\n\n\t// Set up polling for expired accounts and credentials purging.\n\tswitch {\n\tcase globalOpenIDConfig.ProviderEnabled():\n\t\tgo func() {\n\t\t\tticker := time.NewTicker(sys.iamRefreshInterval)\n\t\t\tdefer ticker.Stop()\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-ticker.C:\n\t\t\t\t\tsys.purgeExpiredCredentialsForExternalSSO(ctx)\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\tcase globalLDAPConfig.Enabled:\n\t\tgo func() {\n\t\t\tticker := time.NewTicker(sys.iamRefreshInterval)\n\t\t\tdefer ticker.Stop()\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-ticker.C:\n\t\t\t\t\tsys.purgeExpiredCredentialsForLDAP(ctx)\n\t\t\t\t\tsys.updateGroupMembershipsForLDAP(ctx)\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Start watching changes to storage.\n\tgo sys.watch(ctx)\n\n\t// Load RoleARN\n\tif roleARN, rolePolicy, enabled := globalOpenIDConfig.GetRoleInfo(); enabled {\n\t\tnumPolicies := len(strings.Split(rolePolicy, \",\"))\n\t\tvalidPolicies, _ := sys.store.FilterPolicies(rolePolicy, \"\")\n\t\tnumValidPolicies := len(strings.Split(validPolicies, \",\"))\n\t\tif numPolicies != numValidPolicies {\n\t\t\tlogger.LogIf(ctx, fmt.Errorf(\"Some specified role policies (%s) were not defined - role based policies will not be enabled.\", rolePolicy))\n\t\t\treturn\n\t\t}\n\t\tsys.rolesMap = map[arn.ARN]string{\n\t\t\troleARN: rolePolicy,\n\t\t}\n\t}\n\n\tsys.printIAMRoles()\n}\n\n// Prints IAM role ARNs.\nfunc (sys *IAMSys) printIAMRoles() {\n\tif len(sys.rolesMap) == 0 {\n\t\treturn\n\t}\n\tvar arns []string\n\tfor arn := range sys.rolesMap {\n\t\tarns = append(arns, arn.String())\n\t}\n\tsort.Strings(arns)\n\tmsgs := make([]string, 0, len(arns))\n\tfor _, arn := range arns {\n\t\tmsgs = append(msgs, color.Bold(arn))\n\t}\n\n\tlogStartupMessage(fmt.Sprintf(\"%s %s\", color.Blue(\"IAM Roles:\"), strings.Join(msgs, \" \")))\n}\n\n// HasWatcher - returns if the IAM system has a watcher to be notified of\n// changes.\nfunc (sys *IAMSys) HasWatcher() bool {\n\treturn sys.store.HasWatcher()\n}\n\nfunc (sys *IAMSys) watch(ctx context.Context) {\n\twatcher, ok := sys.store.IAMStorageAPI.(iamStorageWatcher)\n\tif ok {\n\t\tch := watcher.watch(ctx, iamConfigPrefix)\n\t\tfor event := range ch {\n\t\t\t// we simply log errors\n\t\t\terr := sys.loadWatchedEvent(ctx, event)\n\t\t\tlogger.LogIf(ctx, err)\n\t\t}\n\t\treturn\n\t}\n\n\t// Fall back to loading all items periodically\n\tticker := time.NewTicker(sys.iamRefreshInterval)\n\tdefer ticker.Stop()\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tif err := sys.Load(ctx); err != nil {\n\t\t\t\tlogger.LogIf(ctx, err)\n\t\t\t}\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (sys *IAMSys) loadWatchedEvent(ctx context.Context, event iamWatchEvent) (err error) {\n\tusersPrefix := strings.HasPrefix(event.keyPath, iamConfigUsersPrefix)\n\tgroupsPrefix := strings.HasPrefix(event.keyPath, iamConfigGroupsPrefix)\n\tstsPrefix := strings.HasPrefix(event.keyPath, iamConfigSTSPrefix)\n\tsvcPrefix := strings.HasPrefix(event.keyPath, iamConfigServiceAccountsPrefix)\n\tpolicyPrefix := strings.HasPrefix(event.keyPath, iamConfigPoliciesPrefix)\n\tpolicyDBUsersPrefix := strings.HasPrefix(event.keyPath, iamConfigPolicyDBUsersPrefix)\n\tpolicyDBSTSUsersPrefix := strings.HasPrefix(event.keyPath, iamConfigPolicyDBSTSUsersPrefix)\n\tpolicyDBGroupsPrefix := strings.HasPrefix(event.keyPath, iamConfigPolicyDBGroupsPrefix)\n\n\tctx, cancel := context.WithTimeout(ctx, defaultContextTimeout)\n\tdefer cancel()\n\n\tswitch {\n\tcase usersPrefix:\n\t\taccessKey := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigUsersPrefix))\n\t\terr = sys.store.UserNotificationHandler(ctx, accessKey, regUser)\n\tcase stsPrefix:\n\t\taccessKey := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigSTSPrefix))\n\t\terr = sys.store.UserNotificationHandler(ctx, accessKey, stsUser)\n\tcase svcPrefix:\n\t\taccessKey := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigServiceAccountsPrefix))\n\t\terr = sys.store.UserNotificationHandler(ctx, accessKey, svcUser)\n\tcase groupsPrefix:\n\t\tgroup := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigGroupsPrefix))\n\t\terr = sys.store.GroupNotificationHandler(ctx, group)\n\tcase policyPrefix:\n\t\tpolicyName := path.Dir(strings.TrimPrefix(event.keyPath, iamConfigPoliciesPrefix))\n\t\terr = sys.store.PolicyNotificationHandler(ctx, policyName)\n\tcase policyDBUsersPrefix:\n\t\tpolicyMapFile := strings.TrimPrefix(event.keyPath, iamConfigPolicyDBUsersPrefix)\n\t\tuser := strings.TrimSuffix(policyMapFile, \".json\")\n\t\terr = sys.store.PolicyMappingNotificationHandler(ctx, user, false, regUser)\n\tcase policyDBSTSUsersPrefix:\n\t\tpolicyMapFile := strings.TrimPrefix(event.keyPath, iamConfigPolicyDBSTSUsersPrefix)\n\t\tuser := strings.TrimSuffix(policyMapFile, \".json\")\n\t\terr = sys.store.PolicyMappingNotificationHandler(ctx, user, false, stsUser)\n\tcase policyDBGroupsPrefix:\n\t\tpolicyMapFile := strings.TrimPrefix(event.keyPath, iamConfigPolicyDBGroupsPrefix)\n\t\tuser := strings.TrimSuffix(policyMapFile, \".json\")\n\t\terr = sys.store.PolicyMappingNotificationHandler(ctx, user, true, regUser)\n\t}\n\treturn err\n}\n\n// HasRolePolicy - returns if a role policy is configured for IAM.\nfunc (sys *IAMSys) HasRolePolicy() bool {\n\treturn len(sys.rolesMap) > 0\n}\n\n// GetRolePolicy - returns policies associated with a role ARN.\nfunc (sys *IAMSys) GetRolePolicy(arnStr string) (string, error) {\n\tarn, err := arn.Parse(arnStr)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"RoleARN parse err: %v\", err)\n\t}\n\trolePolicy, ok := sys.rolesMap[arn]\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"RoleARN %s is not defined.\", arnStr)\n\t}\n\treturn rolePolicy, nil\n}\n\n// DeletePolicy - deletes a canned policy from backend or etcd.\nfunc (sys *IAMSys) DeletePolicy(ctx context.Context, policyName string, notifyPeers bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\terr := sys.store.DeletePolicy(ctx, policyName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !notifyPeers || sys.HasWatcher() {\n\t\treturn nil\n\t}\n\n\t// Notify all other MinIO peers to delete policy\n\tfor _, nerr := range sys.notificationSys.DeletePolicy(policyName) {\n\t\tif nerr.Err != nil {\n\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// InfoPolicy - returns the policy definition with some metadata.\nfunc (sys *IAMSys) InfoPolicy(policyName string) (*madmin.PolicyInfo, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\td, err := sys.store.GetPolicyDoc(policyName)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tpdata, err := json.Marshal(d.Policy)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &madmin.PolicyInfo{\n\t\tPolicyName: policyName,\n\t\tPolicy:     pdata,\n\t\tCreateDate: d.CreateDate,\n\t\tUpdateDate: d.UpdateDate,\n\t}, nil\n}\n\n// ListPolicies - lists all canned policies.\nfunc (sys *IAMSys) ListPolicies(ctx context.Context, bucketName string) (map[string]iampolicy.Policy, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.ListPolicies(ctx, bucketName)\n}\n\n// SetPolicy - sets a new named policy.\nfunc (sys *IAMSys) SetPolicy(ctx context.Context, policyName string, p iampolicy.Policy) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\terr := sys.store.SetPolicy(ctx, policyName, p)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !sys.HasWatcher() {\n\t\t// Notify all other MinIO peers to reload policy\n\t\tfor _, nerr := range sys.notificationSys.LoadPolicy(policyName) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\n// DeleteUser - delete user (only for long-term users not STS users).\nfunc (sys *IAMSys) DeleteUser(ctx context.Context, accessKey string, notifyPeers bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif err := sys.store.DeleteUser(ctx, accessKey, regUser); err != nil {\n\t\treturn err\n\t}\n\n\t// Notify all other MinIO peers to delete user.\n\tif notifyPeers && !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.DeleteUser(accessKey) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// CurrentPolicies - returns comma separated policy string, from\n// an input policy after validating if there are any current\n// policies which exist on MinIO corresponding to the input.\nfunc (sys *IAMSys) CurrentPolicies(policyName string) string {\n\tif !sys.Initialized() {\n\t\treturn \"\"\n\t}\n\n\tpolicies, _ := sys.store.FilterPolicies(policyName, \"\")\n\treturn policies\n}\n\nfunc (sys *IAMSys) notifyForUser(ctx context.Context, accessKey string, isTemp bool) {\n\t// Notify all other MinIO peers to reload user.\n\tif !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.LoadUser(accessKey, isTemp) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n}\n\n// SetTempUser - set temporary user credentials, these credentials have an\n// expiry. The permissions for these STS credentials is determined in one of the\n// following ways:\n//\n// - RoleARN - if a role-arn is specified in the request, the STS credential's\n// policy is the role's policy.\n//\n// - inherited from parent - this is the case for AssumeRole API, where the\n// parent user is an actual real user with their own (permanent) credentials and\n// policy association.\n//\n// - inherited from \"virtual\" parent - this is the case for AssumeRoleWithLDAP\n// where the parent user is the DN of the actual LDAP user. The parent user\n// itself cannot login, but the policy associated with them determines the base\n// policy for the STS credential. The policy mapping can be updated by the\n// administrator.\n//\n// - from `Subject.CommonName` field from the STS request for\n// AssumeRoleWithCertificate. In this case, the policy for the STS credential\n// has the same name as the value of this field.\n//\n// - from special JWT claim from STS request for AssumeRoleWithOIDC API (when\n// not using RoleARN). The claim value can be a string or a list and refers to\n// the names of access policies.\n//\n// For all except the RoleARN case, the implementation is the same - the policy\n// for the STS credential is associated with a parent user. For the\n// AssumeRoleWithCertificate case, the \"virtual\" parent user is the value of the\n// `Subject.CommonName` field. For the OIDC (without RoleARN) case the \"virtual\"\n// parent is derived as a concatenation of the `sub` and `iss` fields. The\n// policies applicable to the STS credential are associated with this \"virtual\"\n// parent.\n//\n// When a policyName is given to this function, the policy association is\n// created and stored in the IAM store. Thus, it should NOT be given for the\n// role-arn case (because the role-to-policy mapping is separately stored\n// elsewhere), the AssumeRole case (because the parent user is real and their\n// policy is associated via policy-set API) and the AssumeRoleWithLDAP case\n// (because the policy association is made via policy-set API).\nfunc (sys *IAMSys) SetTempUser(ctx context.Context, accessKey string, cred auth.Credentials, policyName string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif globalPolicyOPA != nil {\n\t\t// If OPA is set, we do not need to set a policy mapping.\n\t\tpolicyName = \"\"\n\t}\n\n\terr := sys.store.SetTempUser(ctx, accessKey, cred, policyName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForUser(ctx, cred.AccessKey, true)\n\treturn nil\n}\n\n// ListBucketUsers - list all users who can access this 'bucket'\nfunc (sys *IAMSys) ListBucketUsers(bucket string) (map[string]madmin.UserInfo, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.GetBucketUsers(bucket)\n}\n\n// ListUsers - list all users.\nfunc (sys *IAMSys) ListUsers() (map[string]madmin.UserInfo, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.GetUsers(), nil\n}\n\n// IsTempUser - returns if given key is a temporary user.\nfunc (sys *IAMSys) IsTempUser(name string) (bool, string, error) {\n\tif !sys.Initialized() {\n\t\treturn false, \"\", errServerNotInitialized\n\t}\n\n\tcred, found := sys.store.GetUser(name)\n\tif !found {\n\t\treturn false, \"\", errNoSuchUser\n\t}\n\n\tif cred.IsTemp() {\n\t\treturn true, cred.ParentUser, nil\n\t}\n\n\treturn false, \"\", nil\n}\n\n// IsServiceAccount - returns if given key is a service account\nfunc (sys *IAMSys) IsServiceAccount(name string) (bool, string, error) {\n\tif !sys.Initialized() {\n\t\treturn false, \"\", errServerNotInitialized\n\t}\n\n\tcred, found := sys.store.GetUser(name)\n\tif !found {\n\t\treturn false, \"\", errNoSuchUser\n\t}\n\n\tif cred.IsServiceAccount() {\n\t\treturn true, cred.ParentUser, nil\n\t}\n\n\treturn false, \"\", nil\n}\n\n// GetUserInfo - get info on a user.\nfunc (sys *IAMSys) GetUserInfo(ctx context.Context, name string) (u madmin.UserInfo, err error) {\n\tif !sys.Initialized() {\n\t\treturn u, errServerNotInitialized\n\t}\n\n\tselect {\n\tcase <-sys.configLoaded:\n\tdefault:\n\t\tsys.store.LoadUser(ctx, name)\n\t}\n\n\treturn sys.store.GetUserInfo(name)\n}\n\n// SetUserStatus - sets current user status, supports disabled or enabled.\nfunc (sys *IAMSys) SetUserStatus(ctx context.Context, accessKey string, status madmin.AccountStatus) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\terr := sys.store.SetUserStatus(ctx, accessKey, status)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForUser(ctx, accessKey, false)\n\treturn nil\n}\n\nfunc (sys *IAMSys) notifyForServiceAccount(ctx context.Context, accessKey string) {\n\t// Notify all other Minio peers to reload the service account\n\tif !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.LoadServiceAccount(accessKey) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n}\n\ntype newServiceAccountOpts struct {\n\tsessionPolicy *iampolicy.Policy\n\taccessKey     string\n\tsecretKey     string\n\n\tclaims map[string]interface{}\n}\n\n// NewServiceAccount - create a new service account\nfunc (sys *IAMSys) NewServiceAccount(ctx context.Context, parentUser string, groups []string, opts newServiceAccountOpts) (auth.Credentials, error) {\n\tif !sys.Initialized() {\n\t\treturn auth.Credentials{}, errServerNotInitialized\n\t}\n\n\tif parentUser == \"\" {\n\t\treturn auth.Credentials{}, errInvalidArgument\n\t}\n\n\tvar policyBuf []byte\n\tif opts.sessionPolicy != nil {\n\t\terr := opts.sessionPolicy.Validate()\n\t\tif err != nil {\n\t\t\treturn auth.Credentials{}, err\n\t\t}\n\t\tpolicyBuf, err = json.Marshal(opts.sessionPolicy)\n\t\tif err != nil {\n\t\t\treturn auth.Credentials{}, err\n\t\t}\n\t\tif len(policyBuf) > 16*humanize.KiByte {\n\t\t\treturn auth.Credentials{}, fmt.Errorf(\"Session policy should not exceed 16 KiB characters\")\n\t\t}\n\t}\n\n\t// found newly requested service account, to be same as\n\t// parentUser, reject such operations.\n\tif parentUser == opts.accessKey {\n\t\treturn auth.Credentials{}, errIAMActionNotAllowed\n\t}\n\n\tm := make(map[string]interface{})\n\tm[parentClaim] = parentUser\n\n\tif len(policyBuf) > 0 {\n\t\tm[iampolicy.SessionPolicyName] = base64.StdEncoding.EncodeToString(policyBuf)\n\t\tm[iamPolicyClaimNameSA()] = \"embedded-policy\"\n\t} else {\n\t\tm[iamPolicyClaimNameSA()] = \"inherited-policy\"\n\t}\n\n\t// Add all the necessary claims for the service accounts.\n\tfor k, v := range opts.claims {\n\t\t_, ok := m[k]\n\t\tif !ok {\n\t\t\tm[k] = v\n\t\t}\n\t}\n\n\tvar (\n\t\tcred auth.Credentials\n\t)\n\n\tvar err error\n\tif len(opts.accessKey) > 0 {\n\t\tcred, err = auth.CreateNewCredentialsWithMetadata(opts.accessKey, opts.secretKey, m, globalActiveCred.SecretKey)\n\t} else {\n\t\tcred, err = auth.GetNewCredentialsWithMetadata(m, globalActiveCred.SecretKey)\n\t}\n\tif err != nil {\n\t\treturn auth.Credentials{}, err\n\t}\n\tcred.ParentUser = parentUser\n\tcred.Groups = groups\n\tcred.Status = string(auth.AccountOn)\n\n\terr = sys.store.AddServiceAccount(ctx, cred)\n\tif err != nil {\n\t\treturn auth.Credentials{}, err\n\t}\n\n\tsys.notifyForServiceAccount(ctx, cred.AccessKey)\n\treturn cred, nil\n}\n\ntype updateServiceAccountOpts struct {\n\tsessionPolicy *iampolicy.Policy\n\tsecretKey     string\n\tstatus        string\n}\n\n// UpdateServiceAccount - edit a service account\nfunc (sys *IAMSys) UpdateServiceAccount(ctx context.Context, accessKey string, opts updateServiceAccountOpts) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\terr := sys.store.UpdateServiceAccount(ctx, accessKey, opts)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForServiceAccount(ctx, accessKey)\n\treturn nil\n}\n\n// ListServiceAccounts - lists all services accounts associated to a specific user\nfunc (sys *IAMSys) ListServiceAccounts(ctx context.Context, accessKey string) ([]auth.Credentials, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.ListServiceAccounts(ctx, accessKey)\n}\n\n// GetServiceAccount - wrapper method to get information about a service account\nfunc (sys *IAMSys) GetServiceAccount(ctx context.Context, accessKey string) (auth.Credentials, *iampolicy.Policy, error) {\n\tsa, embeddedPolicy, err := sys.getServiceAccount(ctx, accessKey)\n\tif err != nil {\n\t\treturn sa, embeddedPolicy, err\n\t}\n\t// Hide secret & session keys\n\tsa.SecretKey = \"\"\n\tsa.SessionToken = \"\"\n\treturn sa, embeddedPolicy, nil\n}\n\n// getServiceAccount - gets information about a service account\nfunc (sys *IAMSys) getServiceAccount(ctx context.Context, accessKey string) (auth.Credentials, *iampolicy.Policy, error) {\n\tif !sys.Initialized() {\n\t\treturn auth.Credentials{}, nil, errServerNotInitialized\n\t}\n\n\tsa, ok := sys.store.GetUser(accessKey)\n\tif !ok || !sa.IsServiceAccount() {\n\t\treturn auth.Credentials{}, nil, errNoSuchServiceAccount\n\t}\n\n\tvar embeddedPolicy *iampolicy.Policy\n\n\tjwtClaims, err := auth.ExtractClaims(sa.SessionToken, globalActiveCred.SecretKey)\n\tif err == nil {\n\t\tpt, ptok := jwtClaims.Lookup(iamPolicyClaimNameSA())\n\t\tsp, spok := jwtClaims.Lookup(iampolicy.SessionPolicyName)\n\t\tif ptok && spok && pt == \"embedded-policy\" {\n\t\t\tpolicyBytes, err := base64.StdEncoding.DecodeString(sp)\n\t\t\tif err == nil {\n\t\t\t\tp, err := iampolicy.ParseConfig(bytes.NewReader(policyBytes))\n\t\t\t\tif err == nil {\n\t\t\t\t\tpolicy := iampolicy.Policy{}.Merge(*p)\n\t\t\t\t\tembeddedPolicy = &policy\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn sa, embeddedPolicy, nil\n}\n\n// GetClaimsForSvcAcc - gets the claims associated with the service account.\nfunc (sys *IAMSys) GetClaimsForSvcAcc(ctx context.Context, accessKey string) (map[string]interface{}, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != LDAPUsersSysType {\n\t\treturn nil, nil\n\t}\n\n\tsa, ok := sys.store.GetUser(accessKey)\n\tif !ok || !sa.IsServiceAccount() {\n\t\treturn nil, errNoSuchServiceAccount\n\t}\n\n\tjwtClaims, err := auth.ExtractClaims(sa.SessionToken, globalActiveCred.SecretKey)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn jwtClaims.Map(), nil\n}\n\n// DeleteServiceAccount - delete a service account\nfunc (sys *IAMSys) DeleteServiceAccount(ctx context.Context, accessKey string, notifyPeers bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tsa, ok := sys.store.GetUser(accessKey)\n\tif !ok || !sa.IsServiceAccount() {\n\t\treturn nil\n\t}\n\n\tif err := sys.store.DeleteUser(ctx, accessKey, svcUser); err != nil {\n\t\treturn err\n\t}\n\n\tif notifyPeers && !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.DeleteServiceAccount(accessKey) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// CreateUser - create new user credentials and policy, if user already exists\n// they shall be rewritten with new inputs.\nfunc (sys *IAMSys) CreateUser(ctx context.Context, accessKey string, ureq madmin.AddOrUpdateUserReq) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tif !auth.IsAccessKeyValid(accessKey) {\n\t\treturn auth.ErrInvalidAccessKeyLength\n\t}\n\n\tif !auth.IsSecretKeyValid(ureq.SecretKey) {\n\t\treturn auth.ErrInvalidSecretKeyLength\n\t}\n\n\terr := sys.store.AddUser(ctx, accessKey, ureq)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForUser(ctx, accessKey, false)\n\treturn nil\n}\n\n// SetUserSecretKey - sets user secret key\nfunc (sys *IAMSys) SetUserSecretKey(ctx context.Context, accessKey string, secretKey string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\tif !auth.IsAccessKeyValid(accessKey) {\n\t\treturn auth.ErrInvalidAccessKeyLength\n\t}\n\n\tif !auth.IsSecretKeyValid(secretKey) {\n\t\treturn auth.ErrInvalidSecretKeyLength\n\t}\n\n\treturn sys.store.UpdateUserSecretKey(ctx, accessKey, secretKey)\n}\n\n// purgeExpiredCredentialsForExternalSSO - validates if local credentials are still valid\n// by checking remote IDP if the relevant users are still active and present.\nfunc (sys *IAMSys) purgeExpiredCredentialsForExternalSSO(ctx context.Context) {\n\tparentUsers := sys.store.GetAllParentUsers()\n\tvar expiredUsers []string\n\tfor _, parentUser := range parentUsers {\n\t\tuserid, err := parseOpenIDParentUser(parentUser)\n\t\tif err == errSkipFile {\n\t\t\tcontinue\n\t\t}\n\t\tu, err := globalOpenIDConfig.LookupUser(userid)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(GlobalContext, err)\n\t\t\tcontinue\n\t\t}\n\t\t// If user is set to \"disabled\", we will remove them\n\t\t// subsequently.\n\t\tif !u.Enabled {\n\t\t\texpiredUsers = append(expiredUsers, parentUser)\n\t\t}\n\t}\n\n\t// We ignore any errors\n\t_ = sys.store.DeleteUsers(ctx, expiredUsers)\n}\n\n// purgeExpiredCredentialsForLDAP - validates if local credentials are still\n// valid by checking LDAP server if the relevant users are still present.\nfunc (sys *IAMSys) purgeExpiredCredentialsForLDAP(ctx context.Context) {\n\tparentUsers := sys.store.GetAllParentUsers()\n\tvar allDistNames []string\n\tfor _, parentUser := range parentUsers {\n\t\tif !globalLDAPConfig.IsLDAPUserDN(parentUser) {\n\t\t\tcontinue\n\t\t}\n\n\t\tallDistNames = append(allDistNames, parentUser)\n\t}\n\n\texpiredUsers, err := globalLDAPConfig.GetNonEligibleUserDistNames(allDistNames)\n\tif err != nil {\n\t\t// Log and return on error - perhaps it'll work the next time.\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn\n\t}\n\n\t// We ignore any errors\n\t_ = sys.store.DeleteUsers(ctx, expiredUsers)\n}\n\n// updateGroupMembershipsForLDAP - updates the list of groups associated with the credential.\nfunc (sys *IAMSys) updateGroupMembershipsForLDAP(ctx context.Context) {\n\t// 1. Collect all LDAP users with active creds.\n\tallCreds := sys.store.GetSTSAndServiceAccounts()\n\t// List of unique LDAP (parent) user DNs that have active creds\n\tvar parentUsers []string\n\t// Map of LDAP user to list of active credential objects\n\tparentUserToCredsMap := make(map[string][]auth.Credentials)\n\t// DN to ldap username mapping for each LDAP user\n\tparentUserToLDAPUsernameMap := make(map[string]string)\n\tfor _, cred := range allCreds {\n\t\tif !globalLDAPConfig.IsLDAPUserDN(cred.ParentUser) {\n\t\t\tcontinue\n\t\t}\n\t\t// Check if this is the first time we are\n\t\t// encountering this LDAP user.\n\t\tif _, ok := parentUserToCredsMap[cred.ParentUser]; !ok {\n\t\t\t// Try to find the ldapUsername for this\n\t\t\t// parentUser by extracting JWT claims\n\t\t\tjwtClaims, err := auth.ExtractClaims(cred.SessionToken, globalActiveCred.SecretKey)\n\t\t\tif err != nil {\n\t\t\t\t// skip this cred - session token seems\n\t\t\t\t// invalid\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tldapUsername, ok := jwtClaims.Lookup(ldapUserN)\n\t\t\tif !ok {\n\t\t\t\t// skip this cred - we dont have the\n\t\t\t\t// username info needed\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Collect each new cred.ParentUser into parentUsers\n\t\t\tparentUsers = append(parentUsers, cred.ParentUser)\n\n\t\t\t// Update the ldapUsernameMap\n\t\t\tparentUserToLDAPUsernameMap[cred.ParentUser] = ldapUsername\n\t\t}\n\t\tparentUserToCredsMap[cred.ParentUser] = append(parentUserToCredsMap[cred.ParentUser], cred)\n\n\t}\n\n\t// 2. Query LDAP server for groups of the LDAP users collected.\n\tupdatedGroups, err := globalLDAPConfig.LookupGroupMemberships(parentUsers, parentUserToLDAPUsernameMap)\n\tif err != nil {\n\t\t// Log and return on error - perhaps it'll work the next time.\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn\n\t}\n\n\t// 3. Update creds for those users whose groups are changed\n\tfor _, parentUser := range parentUsers {\n\t\tcurrGroupsSet := updatedGroups[parentUser]\n\t\tcurrGroups := currGroupsSet.ToSlice()\n\t\tfor _, cred := range parentUserToCredsMap[parentUser] {\n\t\t\tgSet := set.CreateStringSet(cred.Groups...)\n\t\t\tif gSet.Equals(currGroupsSet) {\n\t\t\t\t// No change to groups memberships for this\n\t\t\t\t// credential.\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tcred.Groups = currGroups\n\t\t\tif err := sys.store.UpdateUserIdentity(ctx, cred); err != nil {\n\t\t\t\t// Log and continue error - perhaps it'll work the next time.\n\t\t\t\tlogger.LogIf(GlobalContext, err)\n\t\t\t}\n\t\t}\n\t}\n}\n\n// GetUser - get user credentials\nfunc (sys *IAMSys) GetUser(ctx context.Context, accessKey string) (cred auth.Credentials, ok bool) {\n\tif !sys.Initialized() {\n\t\treturn cred, false\n\t}\n\n\tfallback := false\n\tselect {\n\tcase <-sys.configLoaded:\n\tdefault:\n\t\tsys.store.LoadUser(ctx, accessKey)\n\t\tfallback = true\n\t}\n\n\tcred, ok = sys.store.GetUser(accessKey)\n\tif !ok && !fallback {\n\t\t// accessKey not found, also\n\t\t// IAM store is not in fallback mode\n\t\t// we can try to reload again from\n\t\t// the IAM store and see if credential\n\t\t// exists now. If it doesn't proceed to\n\t\t// fail.\n\t\tsys.store.LoadUser(ctx, accessKey)\n\t\tcred, ok = sys.store.GetUser(accessKey)\n\t}\n\n\treturn cred, ok && cred.IsValid()\n}\n\n// Notify all other MinIO peers to load group.\nfunc (sys *IAMSys) notifyForGroup(ctx context.Context, group string) {\n\tif !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.LoadGroup(group) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n}\n\n// AddUsersToGroup - adds users to a group, creating the group if\n// needed. No error if user(s) already are in the group.\nfunc (sys *IAMSys) AddUsersToGroup(ctx context.Context, group string, members []string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\terr := sys.store.AddUsersToGroup(ctx, group, members)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForGroup(ctx, group)\n\treturn nil\n}\n\n// RemoveUsersFromGroup - remove users from group. If no users are\n// given, and the group is empty, deletes the group as well.\nfunc (sys *IAMSys) RemoveUsersFromGroup(ctx context.Context, group string, members []string) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\terr := sys.store.RemoveUsersFromGroup(ctx, group, members)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForGroup(ctx, group)\n\treturn nil\n}\n\n// SetGroupStatus - enable/disabled a group\nfunc (sys *IAMSys) SetGroupStatus(ctx context.Context, group string, enabled bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\tif sys.usersSysType != MinIOUsersSysType {\n\t\treturn errIAMActionNotAllowed\n\t}\n\n\terr := sys.store.SetGroupStatus(ctx, group, enabled)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsys.notifyForGroup(ctx, group)\n\treturn nil\n}\n\n// GetGroupDescription - builds up group description\nfunc (sys *IAMSys) GetGroupDescription(group string) (gd madmin.GroupDesc, err error) {\n\tif !sys.Initialized() {\n\t\treturn gd, errServerNotInitialized\n\t}\n\n\treturn sys.store.GetGroupDescription(group)\n}\n\n// ListGroups - lists groups.\nfunc (sys *IAMSys) ListGroups(ctx context.Context) (r []string, err error) {\n\tif !sys.Initialized() {\n\t\treturn r, errServerNotInitialized\n\t}\n\n\t<-sys.configLoaded\n\n\treturn sys.store.ListGroups(ctx)\n}\n\n// PolicyDBSet - sets a policy for a user or group in the PolicyDB.\nfunc (sys *IAMSys) PolicyDBSet(ctx context.Context, name, policy string, isGroup bool) error {\n\tif !sys.Initialized() {\n\t\treturn errServerNotInitialized\n\t}\n\n\t// Determine user-type based on IDP mode.\n\tuserType := regUser\n\tif sys.usersSysType == LDAPUsersSysType {\n\t\tuserType = stsUser\n\t}\n\n\terr := sys.store.PolicyDBSet(ctx, name, policy, userType, isGroup)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Notify all other MinIO peers to reload policy\n\tif !sys.HasWatcher() {\n\t\tfor _, nerr := range sys.notificationSys.LoadPolicyMapping(name, isGroup) {\n\t\t\tif nerr.Err != nil {\n\t\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n\t\t\t\tlogger.LogIf(ctx, nerr.Err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// PolicyDBGet - gets policy set on a user or group. If a list of groups is\n// given, policies associated with them are included as well.\nfunc (sys *IAMSys) PolicyDBGet(name string, isGroup bool, groups ...string) ([]string, error) {\n\tif !sys.Initialized() {\n\t\treturn nil, errServerNotInitialized\n\t}\n\n\treturn sys.store.PolicyDBGet(name, isGroup, groups...)\n}\n\n// IsAllowedServiceAccount - checks if the given service account is allowed to perform\n// actions. The permission of the parent user is checked first\nfunc (sys *IAMSys) IsAllowedServiceAccount(args iampolicy.Args, parentUser string) bool {\n\t// Now check if we have a subject claim\n\tp, ok := args.Claims[parentClaim]\n\tif ok {\n\t\tparentInClaim, ok := p.(string)\n\t\tif !ok {\n\t\t\t// Reject malformed/malicious requests.\n\t\t\treturn false\n\t\t}\n\t\t// The parent claim in the session token should be equal\n\t\t// to the parent detected in the backend\n\t\tif parentInClaim != parentUser {\n\t\t\treturn false\n\t\t}\n\t} else {\n\t\t// This is needed so a malicious user cannot\n\t\t// use a leaked session key of another user\n\t\t// to widen its privileges.\n\t\treturn false\n\t}\n\n\t// Check policy for parent user of service account.\n\tsvcPolicies, err := sys.PolicyDBGet(parentUser, false, args.Groups...)\n\tif err != nil {\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn false\n\t}\n\n\tif len(svcPolicies) == 0 {\n\t\t// If parent user has no policies, check for OpenID\n\t\t// claims/RoleARN in case it exists.\n\t\troleArn := args.GetRoleArn()\n\t\tif roleArn != \"\" {\n\t\t\tarn, err := arn.Parse(roleArn)\n\t\t\tif err != nil {\n\t\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"error parsing role ARN %s: %v\", roleArn, err))\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tsvcPolicies = newMappedPolicy(sys.rolesMap[arn]).toSlice()\n\t\t} else {\n\t\t\t// If there is no roleArn claim, check the OpenID\n\t\t\t// provider's policy claim.\n\t\t\tpolicySet, _ := iampolicy.GetPoliciesFromClaims(args.Claims, iamPolicyClaimNameOpenID())\n\t\t\tsvcPolicies = policySet.ToSlice()\n\t\t}\n\t\tif len(svcPolicies) == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\n\t// Policies were found, evaluate all of them.\n\tavailablePoliciesStr, combinedPolicy := sys.store.FilterPolicies(strings.Join(svcPolicies, \",\"), \"\")\n\tif availablePoliciesStr == \"\" {\n\t\treturn false\n\t}\n\n\tparentArgs := args\n\tparentArgs.AccountName = parentUser\n\t// These are dynamic values set them appropriately.\n\tparentArgs.ConditionValues[\"username\"] = []string{parentUser}\n\tparentArgs.ConditionValues[\"userid\"] = []string{parentUser}\n\n\tsaPolicyClaim, ok := args.Claims[iamPolicyClaimNameSA()]\n\tif !ok {\n\t\treturn false\n\t}\n\n\tsaPolicyClaimStr, ok := saPolicyClaim.(string)\n\tif !ok {\n\t\t// Sub policy if set, should be a string reject\n\t\t// malformed/malicious requests.\n\t\treturn false\n\t}\n\n\tif saPolicyClaimStr == \"inherited-policy\" {\n\t\treturn combinedPolicy.IsAllowed(parentArgs)\n\t}\n\n\t// Now check if we have a sessionPolicy.\n\tspolicy, ok := args.Claims[iampolicy.SessionPolicyName]\n\tif !ok {\n\t\treturn false\n\t}\n\n\tspolicyStr, ok := spolicy.(string)\n\tif !ok {\n\t\t// Sub policy if set, should be a string reject\n\t\t// malformed/malicious requests.\n\t\treturn false\n\t}\n\n\t// Check if policy is parseable.\n\tsubPolicy, err := iampolicy.ParseConfig(bytes.NewReader([]byte(spolicyStr)))\n\tif err != nil {\n\t\t// Log any error in input session policy config.\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn false\n\t}\n\n\t// This can only happen if policy was set but with an empty JSON.\n\tif subPolicy.Version == \"\" && len(subPolicy.Statements) == 0 {\n\t\treturn combinedPolicy.IsAllowed(parentArgs)\n\t}\n\n\tif subPolicy.Version == \"\" {\n\t\treturn false\n\t}\n\n\treturn combinedPolicy.IsAllowed(parentArgs) && subPolicy.IsAllowed(parentArgs)\n}\n\n// IsAllowedLDAPSTS - checks for LDAP specific claims and values\nfunc (sys *IAMSys) IsAllowedLDAPSTS(args iampolicy.Args, parentUser string) bool {\n\t// parentUser value must match the ldap user in the claim.\n\tif parentInClaimIface, ok := args.Claims[ldapUser]; !ok {\n\t\t// no ldapUser claim present reject it.\n\t\treturn false\n\t} else if parentInClaim, ok := parentInClaimIface.(string); !ok {\n\t\t// not the right type, reject it.\n\t\treturn false\n\t} else if parentInClaim != parentUser {\n\t\t// ldap claim has been modified maliciously reject it.\n\t\treturn false\n\t}\n\n\t// Check policy for this LDAP user.\n\tldapPolicies, err := sys.PolicyDBGet(parentUser, false, args.Groups...)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tif len(ldapPolicies) == 0 {\n\t\treturn false\n\t}\n\n\t// Policies were found, evaluate all of them.\n\tavailablePoliciesStr, combinedPolicy := sys.store.FilterPolicies(strings.Join(ldapPolicies, \",\"), \"\")\n\tif availablePoliciesStr == \"\" {\n\t\treturn false\n\t}\n\n\thasSessionPolicy, isAllowedSP := isAllowedBySessionPolicy(args)\n\tif hasSessionPolicy {\n\t\treturn isAllowedSP && combinedPolicy.IsAllowed(args)\n\t}\n\n\treturn combinedPolicy.IsAllowed(args)\n}\n\n// IsAllowedSTS is meant for STS based temporary credentials,\n// which implements claims validation and verification other than\n// applying policies.\nfunc (sys *IAMSys) IsAllowedSTS(args iampolicy.Args, parentUser string) bool {\n\t// If it is an LDAP request, check that user and group\n\t// policies allow the request.\n\tif sys.usersSysType == LDAPUsersSysType {\n\t\treturn sys.IsAllowedLDAPSTS(args, parentUser)\n\t}\n\n\tvar policies []string\n\troleArn := args.GetRoleArn()\n\tif roleArn != \"\" {\n\t\tarn, err := arn.Parse(roleArn)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"error parsing role ARN %s: %v\", roleArn, err))\n\t\t\treturn false\n\t\t}\n\t\tpolicies = newMappedPolicy(sys.rolesMap[arn]).toSlice()\n\t} else {\n\t\t// Lookup the parent user's mapping if there's no role-ARN.\n\t\tvar err error\n\t\tpolicies, err = sys.store.PolicyDBGet(parentUser, false, args.Groups...)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"error fetching policies on %s: %v\", parentUser, err))\n\t\t\treturn false\n\t\t}\n\t\tif len(policies) == 0 {\n\t\t\t// TODO (deprecated in Dec 2021): Only need to handle\n\t\t\t// behavior for STS credentials created in older\n\t\t\t// releases. Otherwise, reject such cases, once older\n\t\t\t// behavior is deprecated.\n\n\t\t\t// If there is no parent policy mapping, we fall back to\n\t\t\t// using policy claim from JWT.\n\t\t\tpolicySet, ok := args.GetPolicies(iamPolicyClaimNameOpenID())\n\t\t\tif !ok {\n\t\t\t\t// When claims are set, it should have a policy claim field.\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tpolicies = policySet.ToSlice()\n\t\t}\n\t}\n\n\tcombinedPolicy, err := sys.store.GetPolicy(strings.Join(policies, \",\"))\n\tif err == errNoSuchPolicy {\n\t\tfor _, pname := range policies {\n\t\t\t_, err := sys.store.GetPolicy(pname)\n\t\t\tif err == errNoSuchPolicy {\n\t\t\t\t// all policies presented in the claim should exist\n\t\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"expected policy (%s) missing from the JWT claim %s, rejecting the request\", pname, iamPolicyClaimNameOpenID()))\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"all policies were unexpectedly present!\"))\n\t\treturn false\n\t}\n\n\t// These are dynamic values set them appropriately.\n\targs.ConditionValues[\"username\"] = []string{parentUser}\n\targs.ConditionValues[\"userid\"] = []string{parentUser}\n\n\t// Now check if we have a sessionPolicy.\n\thasSessionPolicy, isAllowedSP := isAllowedBySessionPolicy(args)\n\tif hasSessionPolicy {\n\t\treturn isAllowedSP && combinedPolicy.IsAllowed(args)\n\t}\n\n\t// Sub policy not set, this is most common since subPolicy\n\t// is optional, use the inherited policies.\n\treturn combinedPolicy.IsAllowed(args)\n}\n\nfunc isAllowedBySessionPolicy(args iampolicy.Args) (hasSessionPolicy bool, isAllowed bool) {\n\thasSessionPolicy = false\n\tisAllowed = false\n\n\t// Now check if we have a sessionPolicy.\n\tspolicy, ok := args.Claims[iampolicy.SessionPolicyName]\n\tif !ok {\n\t\treturn\n\t}\n\n\thasSessionPolicy = true\n\n\tspolicyStr, ok := spolicy.(string)\n\tif !ok {\n\t\t// Sub policy if set, should be a string reject\n\t\t// malformed/malicious requests.\n\t\treturn\n\t}\n\n\t// Check if policy is parseable.\n\tsubPolicy, err := iampolicy.ParseConfig(bytes.NewReader([]byte(spolicyStr)))\n\tif err != nil {\n\t\t// Log any error in input session policy config.\n\t\tlogger.LogIf(GlobalContext, err)\n\t\treturn\n\t}\n\n\t// Policy without Version string value reject it.\n\tif subPolicy.Version == \"\" {\n\t\treturn\n\t}\n\n\t// Sub policy is set and valid.\n\treturn hasSessionPolicy, subPolicy.IsAllowed(args)\n}\n\n// GetCombinedPolicy returns a combined policy combining all policies\nfunc (sys *IAMSys) GetCombinedPolicy(policies ...string) iampolicy.Policy {\n\t_, policy := sys.store.FilterPolicies(strings.Join(policies, \",\"), \"\")\n\treturn policy\n}\n\n// IsAllowed - checks given policy args is allowed to continue the Rest API.\nfunc (sys *IAMSys) IsAllowed(args iampolicy.Args) bool {\n\t// If opa is configured, use OPA always.\n\tif globalPolicyOPA != nil {\n\t\tok, err := globalPolicyOPA.IsAllowed(args)\n\t\tif err != nil {\n\t\t\tlogger.LogIf(GlobalContext, err)\n\t\t}\n\t\treturn ok\n\t}\n\n\t// Policies don't apply to the owner.\n\tif args.IsOwner {\n\t\treturn true\n\t}\n\n\t// If the credential is temporary, perform STS related checks.\n\tok, parentUser, err := sys.IsTempUser(args.AccountName)\n\tif err != nil {\n\t\treturn false\n\t}\n\tif ok {\n\t\treturn sys.IsAllowedSTS(args, parentUser)\n\t}\n\n\t// If the credential is for a service account, perform related check\n\tok, parentUser, err = sys.IsServiceAccount(args.AccountName)\n\tif err != nil {\n\t\treturn false\n\t}\n\tif ok {\n\t\treturn sys.IsAllowedServiceAccount(args, parentUser)\n\t}\n\n\t// Continue with the assumption of a regular user\n\tpolicies, err := sys.PolicyDBGet(args.AccountName, false, args.Groups...)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tif len(policies) == 0 {\n\t\t// No policy found.\n\t\treturn false\n\t}\n\n\t// Policies were found, evaluate all of them.\n\treturn sys.GetCombinedPolicy(policies...).IsAllowed(args)\n}\n\n// EnableLDAPSys - enable ldap system users type.\nfunc (sys *IAMSys) EnableLDAPSys() {\n\tsys.usersSysType = LDAPUsersSysType\n}\n\n// NewIAMSys - creates new config system object.\nfunc NewIAMSys() *IAMSys {\n\treturn &IAMSys{\n\t\tusersSysType: MinIOUsersSysType,\n\t\tconfigLoaded: make(chan struct{}),\n\t}\n}\n", "// Copyright (c) 2015-2021 MinIO, Inc.\n//\n// This file is part of MinIO Object Storage stack\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage cmd\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"os\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/minio/madmin-go\"\n\t\"github.com/minio/minio/internal/auth\"\n\txhttp \"github.com/minio/minio/internal/http\"\n)\n\nfunc TestCheckValid(t *testing.T) {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tobjLayer, fsDir, err := prepareFS()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer os.RemoveAll(fsDir)\n\tif err = newTestConfig(globalMinioDefaultRegion, objLayer); err != nil {\n\t\tt.Fatalf(\"unable initialize config file, %s\", err)\n\t}\n\n\tnewAllSubsystems()\n\n\tinitConfigSubsystem(ctx, objLayer)\n\n\tglobalIAMSys.Init(ctx, objLayer, globalEtcdClient, globalNotificationSys, 2*time.Second)\n\n\treq, err := newTestRequest(http.MethodGet, \"http://example.com:9000/bucket/object\", 0, nil)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tif err = signRequestV4(req, globalActiveCred.AccessKey, globalActiveCred.SecretKey); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t_, owner, s3Err := checkKeyValid(req, globalActiveCred.AccessKey)\n\tif s3Err != ErrNone {\n\t\tt.Fatalf(\"Unexpected failure with %v\", errorCodes.ToAPIErr(s3Err))\n\t}\n\n\tif !owner {\n\t\tt.Fatalf(\"Expected owner to be 'true', found %t\", owner)\n\t}\n\n\t_, _, s3Err = checkKeyValid(req, \"does-not-exist\")\n\tif s3Err != ErrInvalidAccessKeyID {\n\t\tt.Fatalf(\"Expected error 'ErrInvalidAccessKeyID', found %v\", s3Err)\n\t}\n\n\tucreds, err := auth.CreateCredentials(\"myuser1\", \"mypassword1\")\n\tif err != nil {\n\t\tt.Fatalf(\"unable create credential, %s\", err)\n\t}\n\n\tglobalIAMSys.CreateUser(ctx, ucreds.AccessKey, madmin.AddOrUpdateUserReq{\n\t\tSecretKey: ucreds.SecretKey,\n\t\tStatus:    madmin.AccountEnabled,\n\t})\n\n\t_, owner, s3Err = checkKeyValid(req, ucreds.AccessKey)\n\tif s3Err != ErrNone {\n\t\tt.Fatalf(\"Unexpected failure with %v\", errorCodes.ToAPIErr(s3Err))\n\t}\n\n\tif owner {\n\t\tt.Fatalf(\"Expected owner to be 'false', found %t\", owner)\n\t}\n}\n\n// TestSkipContentSha256Cksum - Test validate the logic which decides whether\n// to skip checksum validation based on the request header.\nfunc TestSkipContentSha256Cksum(t *testing.T) {\n\ttestCases := []struct {\n\t\tinputHeaderKey   string\n\t\tinputHeaderValue string\n\n\t\tinputQueryKey   string\n\t\tinputQueryValue string\n\n\t\texpectedResult bool\n\t}{\n\t\t// Test case - 1.\n\t\t// Test case with \"X-Amz-Content-Sha256\" header set, but to empty value but we can't skip.\n\t\t{\"X-Amz-Content-Sha256\", \"\", \"\", \"\", false},\n\n\t\t// Test case - 2.\n\t\t// Test case with \"X-Amz-Content-Sha256\" not set so we can skip.\n\t\t{\"\", \"\", \"\", \"\", true},\n\n\t\t// Test case - 3.\n\t\t// Test case with \"X-Amz-Content-Sha256\" header set to  \"UNSIGNED-PAYLOAD\"\n\t\t// When \"X-Amz-Content-Sha256\" header is set to  \"UNSIGNED-PAYLOAD\", validation of content sha256 has to be skipped.\n\t\t{\"X-Amz-Content-Sha256\", unsignedPayload, \"X-Amz-Credential\", \"\", true},\n\n\t\t// Test case - 4.\n\t\t// Enabling PreSigned Signature v4, but X-Amz-Content-Sha256 not set has to be skipped.\n\t\t{\"\", \"\", \"X-Amz-Credential\", \"\", true},\n\n\t\t// Test case - 5.\n\t\t// Enabling PreSigned Signature v4, but X-Amz-Content-Sha256 set and its not UNSIGNED-PAYLOAD, we shouldn't skip.\n\t\t{\"X-Amz-Content-Sha256\", \"somevalue\", \"X-Amz-Credential\", \"\", false},\n\n\t\t// Test case - 6.\n\t\t// Test case with \"X-Amz-Content-Sha256\" header set to  \"UNSIGNED-PAYLOAD\" and its not presigned, we should skip.\n\t\t{\"X-Amz-Content-Sha256\", unsignedPayload, \"\", \"\", true},\n\n\t\t// Test case - 7.\n\t\t// \"X-Amz-Content-Sha256\" not set and  PreSigned Signature v4 not enabled, sha256 checksum calculation is not skipped.\n\t\t{\"\", \"\", \"X-Amz-Credential\", \"\", true},\n\n\t\t// Test case - 8.\n\t\t// \"X-Amz-Content-Sha256\" has a proper value cannot skip.\n\t\t{\"X-Amz-Content-Sha256\", \"somevalue\", \"\", \"\", false},\n\t}\n\n\tfor i, testCase := range testCases {\n\t\t// creating an input HTTP request.\n\t\t// Only the headers are relevant for this particular test.\n\t\tinputReq, err := http.NewRequest(http.MethodGet, \"http://example.com\", nil)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Error initializing input HTTP request: %v\", err)\n\t\t}\n\t\tif testCase.inputQueryKey != \"\" {\n\t\t\tq := inputReq.URL.Query()\n\t\t\tq.Add(testCase.inputQueryKey, testCase.inputQueryValue)\n\t\t\tif testCase.inputHeaderKey != \"\" {\n\t\t\t\tq.Add(testCase.inputHeaderKey, testCase.inputHeaderValue)\n\t\t\t}\n\t\t\tinputReq.URL.RawQuery = q.Encode()\n\t\t} else {\n\t\t\tif testCase.inputHeaderKey != \"\" {\n\t\t\t\tinputReq.Header.Set(testCase.inputHeaderKey, testCase.inputHeaderValue)\n\t\t\t}\n\t\t}\n\t\tinputReq.ParseForm()\n\n\t\tactualResult := skipContentSha256Cksum(inputReq)\n\t\tif testCase.expectedResult != actualResult {\n\t\t\tt.Errorf(\"Test %d: Expected the result to `%v`, but instead got `%v`\", i+1, testCase.expectedResult, actualResult)\n\t\t}\n\t}\n}\n\n// TestIsValidRegion - Tests validate the comparison logic for asserting whether the region from http request is valid.\nfunc TestIsValidRegion(t *testing.T) {\n\ttestCases := []struct {\n\t\tinputReqRegion  string\n\t\tinputConfRegion string\n\n\t\texpectedResult bool\n\t}{\n\n\t\t{\"\", \"\", true},\n\t\t{globalMinioDefaultRegion, \"\", true},\n\t\t{globalMinioDefaultRegion, \"US\", true},\n\t\t{\"us-west-1\", \"US\", false},\n\t\t{\"us-west-1\", \"us-west-1\", true},\n\t\t// \"US\" was old naming convention for 'us-east-1'.\n\t\t{\"US\", \"US\", true},\n\t}\n\n\tfor i, testCase := range testCases {\n\t\tactualResult := isValidRegion(testCase.inputReqRegion, testCase.inputConfRegion)\n\t\tif testCase.expectedResult != actualResult {\n\t\t\tt.Errorf(\"Test %d: Expected the result to `%v`, but instead got `%v`\", i+1, testCase.expectedResult, actualResult)\n\t\t}\n\t}\n}\n\n// TestExtractSignedHeaders - Tests validate extraction of signed headers using list of signed header keys.\nfunc TestExtractSignedHeaders(t *testing.T) {\n\tsignedHeaders := []string{\"host\", \"x-amz-content-sha256\", \"x-amz-date\", \"transfer-encoding\"}\n\n\t// If the `expect` key exists in the signed headers then golang server would have stripped out the value, expecting the `expect` header set to `100-continue` in the result.\n\tsignedHeaders = append(signedHeaders, \"expect\")\n\t// expected header values.\n\texpectedHost := \"play.min.io:9000\"\n\texpectedContentSha256 := \"1234abcd\"\n\texpectedTime := UTCNow().Format(iso8601Format)\n\texpectedTransferEncoding := \"gzip\"\n\texpectedExpect := \"100-continue\"\n\n\tr, err := http.NewRequest(http.MethodGet, \"http://play.min.io:9000\", nil)\n\tif err != nil {\n\t\tt.Fatal(\"Unable to create http.Request :\", err)\n\t}\n\tr.TransferEncoding = []string{expectedTransferEncoding}\n\n\t// Creating input http header.\n\tinputHeader := r.Header\n\tinputHeader.Set(\"x-amz-content-sha256\", expectedContentSha256)\n\tinputHeader.Set(\"x-amz-date\", expectedTime)\n\t// calling the function being tested.\n\textractedSignedHeaders, errCode := extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrNone {\n\t\tt.Fatalf(\"Expected the APIErrorCode to be %d, but got %d\", ErrNone, errCode)\n\t}\n\n\tinputQuery := r.URL.Query()\n\t// case where some headers need to get from request query\n\tsignedHeaders = append(signedHeaders, \"x-amz-server-side-encryption\")\n\t// expect to fail with `ErrUnsignedHeaders` because couldn't find some header\n\t_, errCode = extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrUnsignedHeaders {\n\t\tt.Fatalf(\"Expected the APIErrorCode to %d, but got %d\", ErrUnsignedHeaders, errCode)\n\t}\n\t// set headers value through Get parameter\n\tinputQuery.Add(\"x-amz-server-side-encryption\", xhttp.AmzEncryptionAES)\n\tr.URL.RawQuery = inputQuery.Encode()\n\tr.ParseForm()\n\t_, errCode = extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrNone {\n\t\tt.Fatalf(\"Expected the APIErrorCode to be %d, but got %d\", ErrNone, errCode)\n\t}\n\n\t// \"x-amz-content-sha256\" header value from the extracted result.\n\textractedContentSha256 := extractedSignedHeaders.Get(\"x-amz-content-sha256\")\n\t// \"host\" header value from the extracted result.\n\textractedHost := extractedSignedHeaders.Get(\"host\")\n\t//  \"x-amz-date\" header from the extracted result.\n\textractedDate := extractedSignedHeaders.Get(\"x-amz-date\")\n\t// extracted `expect` header.\n\textractedExpect := extractedSignedHeaders.Get(\"expect\")\n\n\textractedTransferEncoding := extractedSignedHeaders.Get(\"transfer-encoding\")\n\n\tif expectedHost != extractedHost {\n\t\tt.Errorf(\"host header mismatch: expected `%s`, got `%s`\", expectedHost, extractedHost)\n\t}\n\t// assert the result with the expected value.\n\tif expectedContentSha256 != extractedContentSha256 {\n\t\tt.Errorf(\"x-amz-content-sha256 header mismatch: expected `%s`, got `%s`\", expectedContentSha256, extractedContentSha256)\n\t}\n\tif expectedTime != extractedDate {\n\t\tt.Errorf(\"x-amz-date header mismatch: expected `%s`, got `%s`\", expectedTime, extractedDate)\n\t}\n\tif extractedTransferEncoding != expectedTransferEncoding {\n\t\tt.Errorf(\"transfer-encoding mismatch: expected %s, got %s\", expectedTransferEncoding, extractedTransferEncoding)\n\t}\n\n\t// Since the list of signed headers value contained `expect`, the default value of `100-continue` will be added to extracted signed headers.\n\tif extractedExpect != expectedExpect {\n\t\tt.Errorf(\"expect header incorrect value: expected `%s`, got `%s`\", expectedExpect, extractedExpect)\n\t}\n\n\t// case where the headers don't contain the one of the signed header in the signed headers list.\n\tsignedHeaders = append(signedHeaders, \"X-Amz-Credential\")\n\t// expected to fail with `ErrUnsignedHeaders`.\n\t_, errCode = extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrUnsignedHeaders {\n\t\tt.Fatalf(\"Expected the APIErrorCode to %d, but got %d\", ErrUnsignedHeaders, errCode)\n\t}\n\n\t// case where the list of signed headers doesn't contain the host field.\n\tsignedHeaders = signedHeaders[2:5]\n\t// expected to fail with `ErrUnsignedHeaders`.\n\t_, errCode = extractSignedHeaders(signedHeaders, r)\n\tif errCode != ErrUnsignedHeaders {\n\t\tt.Fatalf(\"Expected the APIErrorCode to %d, but got %d\", ErrUnsignedHeaders, errCode)\n\t}\n}\n\n// TestSignV4TrimAll - tests the logic of TrimAll() function\nfunc TestSignV4TrimAll(t *testing.T) {\n\ttestCases := []struct {\n\t\t// Input.\n\t\tinputStr string\n\t\t// Expected result.\n\t\tresult string\n\t}{\n\t\t{\"\u672c\u8a9e\", \"\u672c\u8a9e\"},\n\t\t{\" abc \", \"abc\"},\n\t\t{\" a b \", \"a b\"},\n\t\t{\"a b \", \"a b\"},\n\t\t{\"a  b\", \"a b\"},\n\t\t{\"a   b\", \"a b\"},\n\t\t{\"   a   b  c   \", \"a b c\"},\n\t\t{\"a \\t b  c   \", \"a b c\"},\n\t\t{\"\\\"a \\t b  c   \", \"\\\"a b c\"},\n\t\t{\" \\t\\n\\u000b\\r\\fa \\t\\n\\u000b\\r\\f b \\t\\n\\u000b\\r\\f c \\t\\n\\u000b\\r\\f\", \"a b c\"},\n\t}\n\n\t// Tests generated values from url encoded name.\n\tfor i, testCase := range testCases {\n\t\tresult := signV4TrimAll(testCase.inputStr)\n\t\tif testCase.result != result {\n\t\t\tt.Errorf(\"Test %d: Expected signV4TrimAll result to be \\\"%s\\\", but found it to be \\\"%s\\\" instead\", i+1, testCase.result, result)\n\t\t}\n\t}\n}\n\n// Test getContentSha256Cksum\nfunc TestGetContentSha256Cksum(t *testing.T) {\n\ttestCases := []struct {\n\t\th        string // header SHA256\n\t\tq        string // query SHA256\n\t\texpected string // expected SHA256\n\t}{\n\t\t{\"shastring\", \"\", \"shastring\"},\n\t\t{emptySHA256, \"\", emptySHA256},\n\t\t{\"\", \"\", emptySHA256},\n\t\t{\"\", \"X-Amz-Credential=random\", unsignedPayload},\n\t\t{\"\", \"X-Amz-Credential=random&X-Amz-Content-Sha256=\" + unsignedPayload, unsignedPayload},\n\t\t{\"\", \"X-Amz-Credential=random&X-Amz-Content-Sha256=shastring\", \"shastring\"},\n\t}\n\n\tfor i, testCase := range testCases {\n\t\tr, err := http.NewRequest(http.MethodGet, \"http://localhost/?\"+testCase.q, nil)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tif testCase.h != \"\" {\n\t\t\tr.Header.Set(\"x-amz-content-sha256\", testCase.h)\n\t\t}\n\t\tr.ParseForm()\n\t\tgot := getContentSha256Cksum(r, serviceS3)\n\t\tif got != testCase.expected {\n\t\t\tt.Errorf(\"Test %d: got:%s expected:%s\", i+1, got, testCase.expected)\n\t\t}\n\t}\n}\n", "module github.com/minio/minio\n\ngo 1.17\n\nrequire (\n\tcloud.google.com/go/storage v1.10.0\n\tgithub.com/Azure/azure-pipeline-go v0.2.2\n\tgithub.com/Azure/azure-storage-blob-go v0.10.0\n\tgithub.com/Shopify/sarama v1.27.2\n\tgithub.com/VividCortex/ewma v1.1.1\n\tgithub.com/alecthomas/participle v0.2.1\n\tgithub.com/bcicen/jstream v1.0.1\n\tgithub.com/beevik/ntp v0.3.0\n\tgithub.com/bits-and-blooms/bloom/v3 v3.0.1\n\tgithub.com/buger/jsonparser v1.1.1\n\tgithub.com/cespare/xxhash/v2 v2.1.2\n\tgithub.com/cheggaaa/pb v1.0.29\n\tgithub.com/colinmarc/hdfs/v2 v2.2.0\n\tgithub.com/coredns/coredns v1.4.0\n\tgithub.com/coreos/go-oidc v2.1.0+incompatible\n\tgithub.com/cosnicolaou/pbzip2 v1.0.1\n\tgithub.com/dchest/siphash v1.2.1\n\tgithub.com/djherbis/atime v1.0.0\n\tgithub.com/dswarbrick/smart v0.0.0-20190505152634-909a45200d6d\n\tgithub.com/dustin/go-humanize v1.0.0\n\tgithub.com/eclipse/paho.mqtt.golang v1.3.0\n\tgithub.com/elastic/go-elasticsearch/v7 v7.12.0\n\tgithub.com/fatih/color v1.13.0\n\tgithub.com/go-ldap/ldap/v3 v3.2.4\n\tgithub.com/go-openapi/loads v0.20.2\n\tgithub.com/go-sql-driver/mysql v1.5.0\n\tgithub.com/golang-jwt/jwt/v4 v4.1.0\n\tgithub.com/gomodule/redigo v2.0.0+incompatible\n\tgithub.com/google/uuid v1.3.0\n\tgithub.com/gorilla/mux v1.8.0\n\tgithub.com/hashicorp/golang-lru v0.5.4\n\tgithub.com/inconshreveable/mousetrap v1.0.0\n\tgithub.com/jcmturner/gokrb5/v8 v8.4.2\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/klauspost/compress v1.13.6\n\tgithub.com/klauspost/cpuid/v2 v2.0.9\n\tgithub.com/klauspost/pgzip v1.2.5\n\tgithub.com/klauspost/readahead v1.3.1\n\tgithub.com/klauspost/reedsolomon v1.9.15\n\tgithub.com/lib/pq v1.9.0\n\tgithub.com/miekg/dns v1.1.43\n\tgithub.com/minio/cli v1.22.0\n\tgithub.com/minio/console v0.12.9\n\tgithub.com/minio/csvparser v1.0.0\n\tgithub.com/minio/highwayhash v1.0.2\n\tgithub.com/minio/kes v0.14.0\n\tgithub.com/minio/madmin-go v1.1.20\n\tgithub.com/minio/minio-go/v7 v7.0.17\n\tgithub.com/minio/parquet-go v1.1.0\n\tgithub.com/minio/pkg v1.1.9\n\tgithub.com/minio/selfupdate v0.4.0\n\tgithub.com/minio/sha256-simd v1.0.0\n\tgithub.com/minio/simdjson-go v0.2.1\n\tgithub.com/minio/sio v0.3.0\n\tgithub.com/minio/zipindex v0.2.1\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/montanaflynn/stats v0.6.6\n\tgithub.com/nats-io/nats-server/v2 v2.3.2\n\tgithub.com/nats-io/nats.go v1.11.1-0.20210623165838-4b75fc59ae30\n\tgithub.com/nats-io/stan.go v0.8.3\n\tgithub.com/ncw/directio v1.0.5\n\tgithub.com/nsqio/go-nsq v1.0.8\n\tgithub.com/philhofer/fwd v1.1.2-0.20210722190033-5c56ac6d0bb9\n\tgithub.com/pierrec/lz4 v2.6.0+incompatible\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/prometheus/client_golang v1.11.0\n\tgithub.com/prometheus/client_model v0.2.0\n\tgithub.com/prometheus/procfs v0.7.3\n\tgithub.com/rs/cors v1.7.0\n\tgithub.com/rs/dnscache v0.0.0-20210201191234-295bba877686\n\tgithub.com/secure-io/sio-go v0.3.1\n\tgithub.com/shirou/gopsutil/v3 v3.21.9\n\tgithub.com/streadway/amqp v1.0.0\n\tgithub.com/tinylib/msgp v1.1.7-0.20211026165309-e818a1881b0e\n\tgithub.com/valyala/bytebufferpool v1.0.0\n\tgithub.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c\n\tgithub.com/yargevad/filepathx v1.0.0\n\tgithub.com/zeebo/xxh3 v1.0.0\n\tgo.etcd.io/etcd/api/v3 v3.5.0\n\tgo.etcd.io/etcd/client/v3 v3.5.0\n\tgo.uber.org/atomic v1.9.0\n\tgo.uber.org/zap v1.19.1\n\tgolang.org/x/crypto v0.0.0-20211209193657-4570a0811e8b\n\tgolang.org/x/oauth2 v0.0.0-20210819190943-2bc19b11175f\n\tgolang.org/x/sys v0.0.0-20211020174200-9d6173849985\n\tgolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac\n\tgoogle.golang.org/api v0.58.0\n\tgopkg.in/yaml.v2 v2.4.0\n)\n\nrequire (\n\tcloud.google.com/go v0.94.1 // indirect\n\tgithub.com/Azure/go-ntlmssp v0.0.0-20200615164410-66371956d46c // indirect\n\tgithub.com/PuerkitoBio/purell v1.1.1 // indirect\n\tgithub.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 // indirect\n\tgithub.com/StackExchange/wmi v1.2.1 // indirect\n\tgithub.com/apache/thrift v0.15.0 // indirect\n\tgithub.com/asaskevich/govalidator v0.0.0-20200907205600-7a23bdc65eef // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/bits-and-blooms/bitset v1.2.0 // indirect\n\tgithub.com/briandowns/spinner v1.16.0 // indirect\n\tgithub.com/coreos/go-semver v0.3.0 // indirect\n\tgithub.com/coreos/go-systemd/v22 v22.3.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.0.0 // indirect\n\tgithub.com/docker/go-units v0.4.0 // indirect\n\tgithub.com/eapache/go-resiliency v1.2.0 // indirect\n\tgithub.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21 // indirect\n\tgithub.com/eapache/queue v1.1.0 // indirect\n\tgithub.com/emicklei/go-restful v2.9.5+incompatible // indirect\n\tgithub.com/fatih/structs v1.1.0 // indirect\n\tgithub.com/georgysavva/scany v0.2.7 // indirect\n\tgithub.com/go-asn1-ber/asn1-ber v1.5.1 // indirect\n\tgithub.com/go-logr/logr v0.4.0 // indirect\n\tgithub.com/go-ole/go-ole v1.2.6 // indirect\n\tgithub.com/go-openapi/analysis v0.20.0 // indirect\n\tgithub.com/go-openapi/errors v0.19.9 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.19.5 // indirect\n\tgithub.com/go-openapi/jsonreference v0.19.5 // indirect\n\tgithub.com/go-openapi/runtime v0.19.24 // indirect\n\tgithub.com/go-openapi/spec v0.20.3 // indirect\n\tgithub.com/go-openapi/strfmt v0.20.0 // indirect\n\tgithub.com/go-openapi/swag v0.19.14 // indirect\n\tgithub.com/go-openapi/validate v0.20.2 // indirect\n\tgithub.com/go-stack/stack v1.8.0 // indirect\n\tgithub.com/goccy/go-json v0.7.9 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang-jwt/jwt v3.2.2+incompatible // indirect\n\tgithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b // indirect\n\tgithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e // indirect\n\tgithub.com/golang/protobuf v1.5.2 // indirect\n\tgithub.com/golang/snappy v0.0.3 // indirect\n\tgithub.com/google/go-cmp v0.5.6 // indirect\n\tgithub.com/google/gofuzz v1.1.0 // indirect\n\tgithub.com/googleapis/gax-go/v2 v2.1.1 // indirect\n\tgithub.com/googleapis/gnostic v0.5.1 // indirect\n\tgithub.com/gorilla/websocket v1.4.2 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n\tgithub.com/hashicorp/go-uuid v1.0.2 // indirect\n\tgithub.com/jcmturner/aescts/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/dnsutils/v2 v2.0.0 // indirect\n\tgithub.com/jcmturner/gofork v1.0.0 // indirect\n\tgithub.com/jcmturner/goidentity/v6 v6.0.1 // indirect\n\tgithub.com/jcmturner/rpc/v2 v2.0.3 // indirect\n\tgithub.com/jessevdk/go-flags v1.4.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/lestrrat-go/backoff/v2 v2.0.8 // indirect\n\tgithub.com/lestrrat-go/blackmagic v1.0.0 // indirect\n\tgithub.com/lestrrat-go/httpcc v1.0.0 // indirect\n\tgithub.com/lestrrat-go/iter v1.0.1 // indirect\n\tgithub.com/lestrrat-go/jwx v1.2.7 // indirect\n\tgithub.com/lestrrat-go/option v1.0.0 // indirect\n\tgithub.com/mailru/easyjson v0.7.6 // indirect\n\tgithub.com/mattn/go-colorable v0.1.10 // indirect\n\tgithub.com/mattn/go-ieproxy v0.0.1 // indirect\n\tgithub.com/mattn/go-isatty v0.0.14 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.13 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.2-0.20181231171920-c182affec369 // indirect\n\tgithub.com/mb0/glob v0.0.0-20160210091149-1eb79d2de6c4 // indirect\n\tgithub.com/minio/argon2 v1.0.0 // indirect\n\tgithub.com/minio/colorjson v1.0.1 // indirect\n\tgithub.com/minio/direct-csi v1.3.5-0.20210601185811-f7776f7961bf // indirect\n\tgithub.com/minio/filepath v1.0.0 // indirect\n\tgithub.com/minio/mc v0.0.0-20211207230606-23a05f5a17f2 // indirect\n\tgithub.com/minio/md5-simd v1.1.2 // indirect\n\tgithub.com/minio/operator v0.0.0-20211011212245-31460bbbc4b7 // indirect\n\tgithub.com/minio/operator/logsearchapi v0.0.0-20211011212245-31460bbbc4b7 // indirect\n\tgithub.com/mitchellh/mapstructure v1.4.1 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/nats-io/jwt/v2 v2.0.2 // indirect\n\tgithub.com/nats-io/nats-streaming-server v0.21.2 // indirect\n\tgithub.com/nats-io/nkeys v0.3.0 // indirect\n\tgithub.com/nats-io/nuid v1.0.1 // indirect\n\tgithub.com/pkg/profile v1.6.0 // indirect\n\tgithub.com/pkg/xattr v0.4.3 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/posener/complete v1.2.3 // indirect\n\tgithub.com/pquerna/cachecontrol v0.0.0-20171018203845-0dec1b30a021 // indirect\n\tgithub.com/prometheus/common v0.31.1 // indirect\n\tgithub.com/rcrowley/go-metrics v0.0.0-20200313005456-10cdbea86bc0 // indirect\n\tgithub.com/rivo/uniseg v0.2.0 // indirect\n\tgithub.com/rjeczalik/notify v0.9.2 // indirect\n\tgithub.com/rs/xid v1.3.0 // indirect\n\tgithub.com/sirupsen/logrus v1.8.1 // indirect\n\tgithub.com/stretchr/objx v0.2.0 // indirect\n\tgithub.com/stretchr/testify v1.7.0 // indirect\n\tgithub.com/tidwall/gjson v1.11.0 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.0 // indirect\n\tgithub.com/tidwall/sjson v1.2.3 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.9 // indirect\n\tgithub.com/tklauser/numcpus v0.3.0 // indirect\n\tgithub.com/unrolled/secure v1.0.9 // indirect\n\tgithub.com/xdg/stringprep v1.0.0 // indirect\n\tgo.etcd.io/etcd/client/pkg/v3 v3.5.0 // indirect\n\tgo.mongodb.org/mongo-driver v1.4.6 // indirect\n\tgo.opencensus.io v0.23.0 // indirect\n\tgo.uber.org/multierr v1.7.0 // indirect\n\tgolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2 // indirect\n\tgolang.org/x/sync v0.0.0-20210220032951-036812b2e83c // indirect\n\tgolang.org/x/term v0.0.0-20210927222741-03fcf44c2211 // indirect\n\tgolang.org/x/text v0.3.7 // indirect\n\tgoogle.golang.org/appengine v1.6.7 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20210928142010-c7af6a1a74c9 // indirect\n\tgoogle.golang.org/grpc v1.41.0 // indirect\n\tgoogle.golang.org/protobuf v1.27.1 // indirect\n\tgopkg.in/h2non/filetype.v1 v1.0.5 // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/ini.v1 v1.63.2 // indirect\n\tgopkg.in/jcmturner/aescts.v1 v1.0.1 // indirect\n\tgopkg.in/jcmturner/dnsutils.v1 v1.0.1 // indirect\n\tgopkg.in/jcmturner/gokrb5.v7 v7.5.0 // indirect\n\tgopkg.in/jcmturner/rpc.v1 v1.1.0 // indirect\n\tgopkg.in/square/go-jose.v2 v2.3.1 // indirect\n\tgopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b // indirect\n\tk8s.io/api v0.21.1 // indirect\n\tk8s.io/apimachinery v0.21.1 // indirect\n\tk8s.io/client-go v0.21.1 // indirect\n\tk8s.io/klog/v2 v2.8.0 // indirect\n\tk8s.io/kube-openapi v0.0.0-20210305001622-591a79e4bda7 // indirect\n\tk8s.io/utils v0.0.0-20201110183641-67b214c5f920 // indirect\n\tmaze.io/x/duration v0.0.0-20160924141736-faac084b6075 // indirect\n\tsigs.k8s.io/controller-runtime v0.8.0 // indirect\n\tsigs.k8s.io/structured-merge-diff/v4 v4.1.0 // indirect\n\tsigs.k8s.io/yaml v1.2.0 // indirect\n)\n\nreplace github.com/gomodule/redigo v2.0.0+incompatible => github.com/gomodule/redigo v1.8.5\n", "bazil.org/fuse v0.0.0-20180421153158-65cc252bf669/go.mod h1:Xbm+BRKSBEpa4q4hTSxohYNQpsxXPbPry4JJWOB3LB8=\ncloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=\ncloud.google.com/go v0.39.0/go.mod h1:rVLT6fkc8chs9sfPtFc1SBH6em7n+ZoXaG+87tDISts=\ncloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=\ncloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.44.3/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=\ncloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=\ncloud.google.com/go v0.46.3/go.mod h1:a6bKKbmY7er1mI7TEI4lsAkts/mkhTSZK8w33B4RAg0=\ncloud.google.com/go v0.50.0/go.mod h1:r9sluTvynVuxRIOHXQEHMFffphuXHOMZMycpNR5e6To=\ncloud.google.com/go v0.51.0/go.mod h1:hWtGJ6gnXH+KgDv+V0zFGDvpi07n3z8ZNj3T1RW0Gcw=\ncloud.google.com/go v0.52.0/go.mod h1:pXajvRH/6o3+F9jDHZWQ5PbGhn+o8w9qiu/CffaVdO4=\ncloud.google.com/go v0.53.0/go.mod h1:fp/UouUEsRkN6ryDKNW/Upv/JBKnv6WDthjR6+vze6M=\ncloud.google.com/go v0.54.0/go.mod h1:1rq2OEkV3YMf6n/9ZvGWI3GWw0VoqH/1x2nd8Is/bPc=\ncloud.google.com/go v0.56.0/go.mod h1:jr7tqZxxKOVYizybht9+26Z/gUq7tiRzu+ACVAMbKVk=\ncloud.google.com/go v0.57.0/go.mod h1:oXiQ6Rzq3RAkkY7N6t3TcE6jE+CIBBbA36lwQ1JyzZs=\ncloud.google.com/go v0.60.0/go.mod h1:yw2G51M9IfRboUH61Us8GqCeF1PzPblB823Mn2q2eAU=\ncloud.google.com/go v0.62.0/go.mod h1:jmCYTdRCQuc1PHIIJ/maLInMho30T/Y0M4hTdTShOYc=\ncloud.google.com/go v0.65.0/go.mod h1:O5N8zS7uWy9vkA9vayVHs65eM1ubvY4h553ofrNHObY=\ncloud.google.com/go v0.72.0/go.mod h1:M+5Vjvlc2wnp6tjzE102Dw08nGShTscUx2nZMufOKPI=\ncloud.google.com/go v0.74.0/go.mod h1:VV1xSbzvo+9QJOxLDaJfTjx5e+MePCpCWwvftOeQmWk=\ncloud.google.com/go v0.78.0/go.mod h1:QjdrLG0uq+YwhjoVOLsS1t7TW8fs36kLs4XO5R5ECHg=\ncloud.google.com/go v0.79.0/go.mod h1:3bzgcEeQlzbuEAYu4mrWhKqWjmpprinYgKJLgKHnbb8=\ncloud.google.com/go v0.81.0/go.mod h1:mk/AM35KwGk/Nm2YSeZbxXdrNK3KZOYHmLkOqC2V6E0=\ncloud.google.com/go v0.83.0/go.mod h1:Z7MJUsANfY0pYPdw0lbnivPx4/vhy/e2FEkSkF7vAVY=\ncloud.google.com/go v0.84.0/go.mod h1:RazrYuxIK6Kb7YrzzhPoLmCVzl7Sup4NrbKPg8KHSUM=\ncloud.google.com/go v0.87.0/go.mod h1:TpDYlFy7vuLzZMMZ+B6iRiELaY7z/gJPaqbMx6mlWcY=\ncloud.google.com/go v0.90.0/go.mod h1:kRX0mNRHe0e2rC6oNakvwQqzyDmg57xJ+SZU1eT2aDQ=\ncloud.google.com/go v0.93.3/go.mod h1:8utlLll2EF5XMAV15woO4lSbWQlk8rer9aLOfLh7+YI=\ncloud.google.com/go v0.94.1 h1:DwuSvDZ1pTYGbXo8yOJevCTr3BoBlE+OVkHAKiYQUXc=\ncloud.google.com/go v0.94.1/go.mod h1:qAlAugsXlC+JWO+Bke5vCtc9ONxjQT3drlTTnAplMW4=\ncloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=\ncloud.google.com/go/bigquery v1.3.0/go.mod h1:PjpwJnslEMmckchkHFfq+HTD2DmtT67aNFKH1/VBDHE=\ncloud.google.com/go/bigquery v1.4.0/go.mod h1:S8dzgnTigyfTmLBfrtrhyYhwRxG72rYxvftPBK2Dvzc=\ncloud.google.com/go/bigquery v1.5.0/go.mod h1:snEHRnqQbz117VIFhE8bmtwIDY80NLUZUMb4Nv6dBIg=\ncloud.google.com/go/bigquery v1.7.0/go.mod h1://okPTzCYNXSlb24MZs83e2Do+h+VXtc4gLoIoXIAPc=\ncloud.google.com/go/bigquery v1.8.0/go.mod h1:J5hqkt3O0uAFnINi6JXValWIb1v0goeZM77hZzJN/fQ=\ncloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=\ncloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=\ncloud.google.com/go/firestore v1.1.0/go.mod h1:ulACoGHTpvq5r8rxGJ4ddJZBZqakUQqClKRT5SZwBmk=\ncloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=\ncloud.google.com/go/pubsub v1.1.0/go.mod h1:EwwdRX2sKPjnvnqCa270oGRyludottCI76h+R3AArQw=\ncloud.google.com/go/pubsub v1.2.0/go.mod h1:jhfEVHT8odbXTkndysNHCcx0awwzvfOlguIAii9o8iA=\ncloud.google.com/go/pubsub v1.3.1/go.mod h1:i+ucay31+CNRpDW4Lu78I4xXG+O1r/MAHgjpRVR+TSU=\ncloud.google.com/go/storage v1.0.0/go.mod h1:IhtSnM/ZTZV8YYJWCY8RULGVqBDmpoyjwiyrjsg+URw=\ncloud.google.com/go/storage v1.5.0/go.mod h1:tpKbwo567HUNpVclU5sGELwQWBDZ8gh0ZeosJ0Rtdos=\ncloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohlUTyfDhBk=\ncloud.google.com/go/storage v1.8.0/go.mod h1:Wv1Oy7z6Yz3DshWRJFhqM/UCfaWIRTdp0RXyy7KQOVs=\ncloud.google.com/go/storage v1.10.0 h1:STgFzyU5/8miMl0//zKh2aQeTyeaUH3WN9bSUiJ09bA=\ncloud.google.com/go/storage v1.10.0/go.mod h1:FLPqc6j+Ki4BU591ie1oL6qBQGu2Bl/tZ9ullr3+Kg0=\ncode.gitea.io/sdk/gitea v0.12.0/go.mod h1:z3uwDV/b9Ls47NGukYM9XhnHtqPh/J+t40lsUrR6JDY=\ncontrib.go.opencensus.io/exporter/aws v0.0.0-20181029163544-2befc13012d0/go.mod h1:uu1P0UCM/6RbsMrgPa98ll8ZcHM858i/AD06a9aLRCA=\ncontrib.go.opencensus.io/exporter/ocagent v0.5.0/go.mod h1:ImxhfLRpxoYiSq891pBrLVhN+qmP8BTVvdH2YLs7Gl0=\ncontrib.go.opencensus.io/exporter/stackdriver v0.12.1/go.mod h1:iwB6wGarfphGGe/e5CWqyUk/cLzKnWsOKPVW3no6OTw=\ncontrib.go.opencensus.io/integrations/ocsql v0.1.4/go.mod h1:8DsSdjz3F+APR+0z0WkU1aRorQCFfRxvqjUUPMbF3fE=\ncontrib.go.opencensus.io/resource v0.1.1/go.mod h1:F361eGI91LCmW1I/Saf+rX0+OFcigGlFvXwEGEnkRLA=\ndmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=\ngithub.com/Azure/azure-amqp-common-go/v2 v2.1.0/go.mod h1:R8rea+gJRuJR6QxTir/XuEd+YuKoUiazDC/N96FiDEU=\ngithub.com/Azure/azure-pipeline-go v0.2.1/go.mod h1:UGSo8XybXnIGZ3epmeBw7Jdz+HiUVpqIlpz/HKHylF4=\ngithub.com/Azure/azure-pipeline-go v0.2.2 h1:6oiIS9yaG6XCCzhgAgKFfIWyo4LLCiDhZot6ltoThhY=\ngithub.com/Azure/azure-pipeline-go v0.2.2/go.mod h1:4rQ/NZncSvGqNkkOsNpOU1tgoNuIlp9AfUH5G1tvCHc=\ngithub.com/Azure/azure-sdk-for-go v29.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-sdk-for-go v30.1.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-sdk-for-go v35.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-sdk-for-go v38.0.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-sdk-for-go v42.3.0+incompatible/go.mod h1:9XXNKU+eRnpl9moKnB4QOLf1HestfXbmab5FXxiDBjc=\ngithub.com/Azure/azure-service-bus-go v0.9.1/go.mod h1:yzBx6/BUGfjfeqbRZny9AQIbIe3AcV9WZbAdpkoXOa0=\ngithub.com/Azure/azure-storage-blob-go v0.8.0/go.mod h1:lPI3aLPpuLTeUwh1sViKXFxwl2B6teiRqI0deQUvsw0=\ngithub.com/Azure/azure-storage-blob-go v0.10.0 h1:evCwGreYo3XLeBV4vSxLbLiYb6e0SzsJiXQVRGsRXxs=\ngithub.com/Azure/azure-storage-blob-go v0.10.0/go.mod h1:ep1edmW+kNQx4UfWM9heESNmQdijykocJ0YOxmMX8SE=\ngithub.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=\ngithub.com/Azure/go-autorest v12.0.0+incompatible/go.mod h1:r+4oMnoxhatjLLJ6zxSWATqVooLgysK6ZNox3g/xq24=\ngithub.com/Azure/go-autorest v14.1.1+incompatible/go.mod h1:r+4oMnoxhatjLLJ6zxSWATqVooLgysK6ZNox3g/xq24=\ngithub.com/Azure/go-autorest v14.2.0+incompatible h1:V5VMDjClD3GiElqLWO7mz2MxNAK/vTfRHdAubSIPRgs=\ngithub.com/Azure/go-autorest v14.2.0+incompatible/go.mod h1:r+4oMnoxhatjLLJ6zxSWATqVooLgysK6ZNox3g/xq24=\ngithub.com/Azure/go-autorest/autorest v0.9.0/go.mod h1:xyHB1BMZT0cuDHU7I0+g046+BFDTQ8rEZB0s4Yfa6bI=\ngithub.com/Azure/go-autorest/autorest v0.9.3/go.mod h1:GsRuLYvwzLjjjRoWEIyMUaYq8GNUx2nRB378IPt/1p0=\ngithub.com/Azure/go-autorest/autorest v0.9.6/go.mod h1:/FALq9T/kS7b5J5qsQ+RSTUdAmGFqi0vUdVNNx8q630=\ngithub.com/Azure/go-autorest/autorest v0.10.2/go.mod h1:/FALq9T/kS7b5J5qsQ+RSTUdAmGFqi0vUdVNNx8q630=\ngithub.com/Azure/go-autorest/autorest v0.11.1/go.mod h1:JFgpikqFJ/MleTTxwepExTKnFUKKszPS8UavbQYUMuw=\ngithub.com/Azure/go-autorest/autorest v0.11.12 h1:gI8ytXbxMfI+IVbI9mP2JGCTXIuhHLgRlvQ9X4PsnHE=\ngithub.com/Azure/go-autorest/autorest v0.11.12/go.mod h1:eipySxLmqSyC5s5k1CLupqet0PSENBEDP93LQ9a8QYw=\ngithub.com/Azure/go-autorest/autorest/adal v0.5.0/go.mod h1:8Z9fGy2MpX0PvDjB1pEgQTmVqjGhiHBW7RJJEciWzS0=\ngithub.com/Azure/go-autorest/autorest/adal v0.8.0/go.mod h1:Z6vX6WXXuyieHAXwMj0S6HY6e6wcHn37qQMBQlvY3lc=\ngithub.com/Azure/go-autorest/autorest/adal v0.8.1/go.mod h1:ZjhuQClTqx435SRJ2iMlOxPYt3d2C/T/7TiQCVZSn3Q=\ngithub.com/Azure/go-autorest/autorest/adal v0.8.2/go.mod h1:ZjhuQClTqx435SRJ2iMlOxPYt3d2C/T/7TiQCVZSn3Q=\ngithub.com/Azure/go-autorest/autorest/adal v0.8.3/go.mod h1:ZjhuQClTqx435SRJ2iMlOxPYt3d2C/T/7TiQCVZSn3Q=\ngithub.com/Azure/go-autorest/autorest/adal v0.9.0/go.mod h1:/c022QCutn2P7uY+/oQWWNcK9YU+MH96NgK+jErpbcg=\ngithub.com/Azure/go-autorest/autorest/adal v0.9.5 h1:Y3bBUV4rTuxenJJs41HU3qmqsb+auo+a3Lz+PlJPpL0=\ngithub.com/Azure/go-autorest/autorest/adal v0.9.5/go.mod h1:B7KF7jKIeC9Mct5spmyCB/A8CG/sEz1vwIRGv/bbw7A=\ngithub.com/Azure/go-autorest/autorest/azure/auth v0.4.2/go.mod h1:90gmfKdlmKgfjUpnCEpOJzsUEjrWDSLwHIG73tSXddM=\ngithub.com/Azure/go-autorest/autorest/azure/cli v0.3.1/go.mod h1:ZG5p860J94/0kI9mNJVoIoLgXcirM2gF5i2kWloofxw=\ngithub.com/Azure/go-autorest/autorest/date v0.1.0/go.mod h1:plvfp3oPSKwf2DNjlBjWF/7vwR+cUD/ELuzDCXwHUVA=\ngithub.com/Azure/go-autorest/autorest/date v0.2.0/go.mod h1:vcORJHLJEh643/Ioh9+vPmf1Ij9AEBM5FuBIXLmIy0g=\ngithub.com/Azure/go-autorest/autorest/date v0.3.0 h1:7gUk1U5M/CQbp9WoqinNzJar+8KY+LPI6wiWrP/myHw=\ngithub.com/Azure/go-autorest/autorest/date v0.3.0/go.mod h1:BI0uouVdmngYNUzGWeSYnokU+TrmwEsOqdt8Y6sso74=\ngithub.com/Azure/go-autorest/autorest/mocks v0.1.0/go.mod h1:OTyCOPRA2IgIlWxVYxBee2F5Gr4kF2zd2J5cFRaIDN0=\ngithub.com/Azure/go-autorest/autorest/mocks v0.2.0/go.mod h1:OTyCOPRA2IgIlWxVYxBee2F5Gr4kF2zd2J5cFRaIDN0=\ngithub.com/Azure/go-autorest/autorest/mocks v0.3.0/go.mod h1:a8FDP3DYzQ4RYfVAxAN3SVSiiO77gL2j2ronKKP0syM=\ngithub.com/Azure/go-autorest/autorest/mocks v0.4.0/go.mod h1:LTp+uSrOhSkaKrUy935gNZuuIPPVsHlr9DSOxSayd+k=\ngithub.com/Azure/go-autorest/autorest/mocks v0.4.1/go.mod h1:LTp+uSrOhSkaKrUy935gNZuuIPPVsHlr9DSOxSayd+k=\ngithub.com/Azure/go-autorest/autorest/to v0.2.0/go.mod h1:GunWKJp1AEqgMaGLV+iocmRAJWqST1wQYhyyjXJ3SJc=\ngithub.com/Azure/go-autorest/autorest/to v0.3.0/go.mod h1:MgwOyqaIuKdG4TL/2ywSsIWKAfJfgHDo8ObuUk3t5sA=\ngithub.com/Azure/go-autorest/autorest/validation v0.1.0/go.mod h1:Ha3z/SqBeaalWQvokg3NZAlQTalVMtOIAs1aGK7G6u8=\ngithub.com/Azure/go-autorest/autorest/validation v0.2.0/go.mod h1:3EEqHnBxQGHXRYq3HT1WyXAvT7LLY3tl70hw6tQIbjI=\ngithub.com/Azure/go-autorest/logger v0.1.0/go.mod h1:oExouG+K6PryycPJfVSxi/koC6LSNgds39diKLz7Vrc=\ngithub.com/Azure/go-autorest/logger v0.2.0/go.mod h1:T9E3cAhj2VqvPOtCYAvby9aBXkZmbF5NWuPV8+WeEW8=\ngithub.com/Azure/go-autorest/tracing v0.5.0/go.mod h1:r/s2XiOKccPW3HrqB+W0TQzfbtp2fGCgRFtBroKn4Dk=\ngithub.com/Azure/go-autorest/tracing v0.6.0 h1:TYi4+3m5t6K48TGI9AUdb+IzbnSxvnvUMfuitfgcfuo=\ngithub.com/Azure/go-autorest/tracing v0.6.0/go.mod h1:+vhtPC754Xsa23ID7GlGsrdKBpUA79WCAKPPZVC2DeU=\ngithub.com/Azure/go-ntlmssp v0.0.0-20200615164410-66371956d46c h1:/IBSNwUN8+eKzUzbJPqhK839ygXJ82sde8x3ogr6R28=\ngithub.com/Azure/go-ntlmssp v0.0.0-20200615164410-66371956d46c/go.mod h1:chxPXzSsl7ZWRAuOIE23GDNzjWuZquvFlgA8xmpunjU=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=\ngithub.com/DataDog/datadog-go v2.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=\ngithub.com/Djarvur/go-err113 v0.0.0-20200410182137-af658d038157/go.mod h1:4UJr5HIiMZrwgkSPdsjy2uOQExX/WEILpIrO9UPGuXs=\ngithub.com/Djarvur/go-err113 v0.1.0/go.mod h1:4UJr5HIiMZrwgkSPdsjy2uOQExX/WEILpIrO9UPGuXs=\ngithub.com/GoogleCloudPlatform/cloudsql-proxy v0.0.0-20191009163259-e802c2cb94ae/go.mod h1:mjwGPas4yKduTyubHvD1Atl9r1rUq8DfVy+gkVvZ+oo=\ngithub.com/GoogleCloudPlatform/k8s-cloud-provider v0.0.0-20190822182118-27a4ced34534/go.mod h1:iroGtC8B3tQiqtds1l+mgk/BBOrxbqjH+eUfFQYRc14=\ngithub.com/Knetic/govaluate v3.0.1-0.20171022003610-9aa49832a739+incompatible/go.mod h1:r7JcOSlj0wfOMncg0iLm8Leh48TZaKVeNIfJntJ2wa0=\ngithub.com/Masterminds/semver v1.5.0/go.mod h1:MB6lktGJrhw8PrUyiEoblNEGEQ+RzHPF078ddwwvV3Y=\ngithub.com/Masterminds/semver/v3 v3.0.3/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=\ngithub.com/Masterminds/semver/v3 v3.1.0/go.mod h1:VPu/7SZ7ePZ3QOrcuXROw5FAcLl4a0cBrbBpGY/8hQs=\ngithub.com/Microsoft/go-winio v0.4.14/go.mod h1:qXqCSQ3Xa7+6tgxaGTIe4Kpcdsi+P8jBhyzoq1bpyYA=\ngithub.com/NYTimes/gziphandler v0.0.0-20170623195520-56545f4a5d46/go.mod h1:3wb06e3pkSAbeQ52E9H9iFoQsEEwGN64994WTCIhntQ=\ngithub.com/NYTimes/gziphandler v1.1.1/go.mod h1:n/CVRwUEOgIxrgPvAQhUUr9oeUtvrhMomdKFjzJNB0c=\ngithub.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=\ngithub.com/OpenPeeDeeP/depguard v1.0.1/go.mod h1:xsIw86fROiiwelg+jB2uM9PiKihMMmUx/1V+TNhjQvM=\ngithub.com/PuerkitoBio/purell v1.0.0/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=\ngithub.com/PuerkitoBio/purell v1.1.0/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=\ngithub.com/PuerkitoBio/purell v1.1.1 h1:WEQqlqaGbrPkxLJWfBwQmfEAE1Z7ONdDLqrN38tNFfI=\ngithub.com/PuerkitoBio/purell v1.1.1/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=\ngithub.com/PuerkitoBio/urlesc v0.0.0-20160726150825-5bd2802263f2/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=\ngithub.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 h1:d+Bc7a5rLufV/sSk/8dngufqelfh6jnri85riMAaF/M=\ngithub.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=\ngithub.com/Shopify/sarama v1.19.0/go.mod h1:FVkBWblsNy7DGZRfXLU0O9RCGt5g3g3yEuWXgklEdEo=\ngithub.com/Shopify/sarama v1.27.2 h1:1EyY1dsxNDUQEv0O/4TsjosHI2CgB1uo9H/v56xzTxc=\ngithub.com/Shopify/sarama v1.27.2/go.mod h1:g5s5osgELxgM+Md9Qni9rzo7Rbt+vvFQI4bt/Mc93II=\ngithub.com/Shopify/toxiproxy v2.1.4+incompatible h1:TKdv8HiTLgE5wdJuEML90aBgNWsokNbMijUGhmcoBJc=\ngithub.com/Shopify/toxiproxy v2.1.4+incompatible/go.mod h1:OXgGpZ6Cli1/URJOF1DMxUHB2q5Ap20/P/eIdh4G0pI=\ngithub.com/StackExchange/wmi v0.0.0-20180116203802-5d049714c4a6/go.mod h1:3eOhrUMpNV+6aFIbp5/iudMxNCF27Vw2OZgy4xEx0Fg=\ngithub.com/StackExchange/wmi v0.0.0-20190523213315-cbe66965904d/go.mod h1:3eOhrUMpNV+6aFIbp5/iudMxNCF27Vw2OZgy4xEx0Fg=\ngithub.com/StackExchange/wmi v1.2.1 h1:VIkavFPXSjcnS+O8yTq7NI32k0R5Aj+v39y29VYDOSA=\ngithub.com/StackExchange/wmi v1.2.1/go.mod h1:rcmrprowKIVzvc+NUiLncP2uuArMWLCbu9SBzvHz7e8=\ngithub.com/VividCortex/ewma v1.1.1 h1:MnEK4VOv6n0RSY4vtRe3h11qjxL3+t0B8yOL8iMXdcM=\ngithub.com/VividCortex/ewma v1.1.1/go.mod h1:2Tkkvm3sRDVXaiyucHiACn4cqf7DpdyLvmxzcbUokwA=\ngithub.com/VividCortex/gohistogram v1.0.0/go.mod h1:Pf5mBqqDxYaXu3hDrrU+w6nw50o/4+TcAqDqk/vUH7g=\ngithub.com/afex/hystrix-go v0.0.0-20180502004556-fa1af6a1f4f5/go.mod h1:SkGFH1ia65gfNATL8TAiHDNxPzPdmEL5uirI2Uyuz6c=\ngithub.com/agnivade/levenshtein v1.0.1/go.mod h1:CURSv5d9Uaml+FovSIICkLbAUZ9S4RqaHDIsdSBg7lM=\ngithub.com/alecthomas/kingpin v2.2.6+incompatible/go.mod h1:59OFYbFVLKQKq+mqrL6Rw5bR0c3ACQaawgXx0QYndlE=\ngithub.com/alecthomas/participle v0.2.1 h1:4AVLj1viSGa4LG5HDXKXrm5xRx19SB/rS/skPQB1Grw=\ngithub.com/alecthomas/participle v0.2.1/go.mod h1:SW6HZGeZgSIpcUWX3fXpfZhuaWHnmoD5KCVaqSaNTkk=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190924025748-f65c72e2690d/go.mod h1:rBZYJk541a8SKzHPHnH3zbiI+7dagKZ0cgpgrD7Fyho=\ngithub.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883/go.mod h1:rCTlJbsFo29Kk6CurOXKm700vrz8f0KW0JNfpkRJY/8=\ngithub.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=\ngithub.com/apache/thrift v0.12.0/go.mod h1:cp2SuWMxlEZw2r+iP2GNCdIi4C1qmUzdZFSVb+bacwQ=\ngithub.com/apache/thrift v0.13.0/go.mod h1:cp2SuWMxlEZw2r+iP2GNCdIi4C1qmUzdZFSVb+bacwQ=\ngithub.com/apache/thrift v0.15.0 h1:aGvdaR0v1t9XLgjtBYwxcBvBOTMqClzwE26CHOgjW1Y=\ngithub.com/apache/thrift v0.15.0/go.mod h1:PHK3hniurgQaNMZYaCLEqXKsYK8upmhPbmdP2FXSqgU=\ngithub.com/apex/log v1.1.4/go.mod h1:AlpoD9aScyQfJDVHmLMEcx4oU6LqzkWp4Mg9GdAcEvQ=\ngithub.com/apex/log v1.3.0/go.mod h1:jd8Vpsr46WAe3EZSQ/IUMs2qQD/GOycT5rPWCO1yGcs=\ngithub.com/apex/logs v0.0.4/go.mod h1:XzxuLZ5myVHDy9SAmYpamKKRNApGj54PfYLcFrXqDwo=\ngithub.com/aphistic/golf v0.0.0-20180712155816-02c07f170c5a/go.mod h1:3NqKYiepwy8kCu4PNA+aP7WUV72eXWJeP9/r3/K9aLE=\ngithub.com/aphistic/sweet v0.2.0/go.mod h1:fWDlIh/isSE9n6EPsRmC0det+whmX6dJid3stzu0Xys=\ngithub.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e/go.mod h1:3U/XgcO3hCbHZ8TKRvWD2dDTCfh9M9ya+I9JpbB7O8o=\ngithub.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=\ngithub.com/armon/go-metrics v0.0.0-20180917152333-f0300d1749da/go.mod h1:Q73ZrmVTwzkszR9V5SSuryQ31EELlFMUz1kKyl939pY=\ngithub.com/armon/go-metrics v0.0.0-20190430140413-ec5e00d3c878 h1:EFSB7Zo9Eg91v7MJPVsifUysc/wPdN+NOnVe6bWbdBM=\ngithub.com/armon/go-metrics v0.0.0-20190430140413-ec5e00d3c878/go.mod h1:3AMJUQhVx52RsWOnlkpikZr01T/yAVN2gn0861vByNg=\ngithub.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=\ngithub.com/aryann/difflib v0.0.0-20170710044230-e206f873d14a/go.mod h1:DAHtR1m6lCRdSC2Tm3DSWRPvIPr6xNKyeHdqDQSQT+A=\ngithub.com/asaskevich/govalidator v0.0.0-20180720115003-f9ffefc3facf/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=\ngithub.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=\ngithub.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496/go.mod h1:oGkLhpf+kjZl6xBf758TQhh5XrAeiJv/7FRz/2spLIg=\ngithub.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535/go.mod h1:oGkLhpf+kjZl6xBf758TQhh5XrAeiJv/7FRz/2spLIg=\ngithub.com/asaskevich/govalidator v0.0.0-20200907205600-7a23bdc65eef h1:46PFijGLmAjMPwCCCo7Jf0W6f9slllCkkv7vyc1yOSg=\ngithub.com/asaskevich/govalidator v0.0.0-20200907205600-7a23bdc65eef/go.mod h1:WaHUgvxTVq04UNunO+XhnAqY/wQc+bxr74GqbsZ/Jqw=\ngithub.com/aws/aws-lambda-go v1.13.3/go.mod h1:4UKl9IzQMoD+QF79YdCuzCwp8VbmG4VAQwij/eHl5CU=\ngithub.com/aws/aws-sdk-go v1.15.27/go.mod h1:mFuSZ37Z9YOHbQEwBWztmVzqXrEkub65tZoCYDt7FT0=\ngithub.com/aws/aws-sdk-go v1.16.26/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.19.18/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.19.45/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.20.6/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.25.11/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.26.3/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.27.0/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.27.1/go.mod h1:KmX6BPdI08NWTb3/sm4ZGu5ShLoqVDhKgpiN924inxo=\ngithub.com/aws/aws-sdk-go v1.31.6/go.mod h1:5zCpMtNQVjRREroY7sYe8lOMRSxkhG6MZveU8YkpAk0=\ngithub.com/aws/aws-sdk-go v1.34.28/go.mod h1:H7NKnBqNVzoTJpGfLrQkkD+ytBA93eiDYi/+8rV9s48=\ngithub.com/aws/aws-sdk-go-v2 v0.18.0/go.mod h1:JWVYvqSMppoMJC0x5wdwiImzgXTI9FuZwxzkQq9wy+g=\ngithub.com/aybabtme/rgbterm v0.0.0-20170906152045-cc83f3b3ce59/go.mod h1:q/89r3U2H7sSsE2t6Kca0lfwTK8JdoNGS/yzM/4iH5I=\ngithub.com/bcicen/jstream v1.0.1 h1:BXY7Cu4rdmc0rhyTVyT3UkxAiX3bnLpKLas9btbH5ck=\ngithub.com/bcicen/jstream v1.0.1/go.mod h1:9ielPxqFry7Y4Tg3j4BfjPocfJ3TbsRtXOAYXYmRuAQ=\ngithub.com/beevik/ntp v0.3.0 h1:xzVrPrE4ziasFXgBVBZJDP0Wg/KpMwk2KHJ4Ba8GrDw=\ngithub.com/beevik/ntp v0.3.0/go.mod h1:hIHWr+l3+/clUnF44zdK+CWW7fO8dR5cIylAQ76NRpg=\ngithub.com/benbjohnson/clock v1.1.0 h1:Q92kusRqC1XV2MjkWETPvjJVqKetz1OzxZB7mHJLju8=\ngithub.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=\ngithub.com/bits-and-blooms/bitset v1.2.0 h1:Kn4yilvwNtMACtf1eYDlG8H77R07mZSPbMjLyS07ChA=\ngithub.com/bits-and-blooms/bitset v1.2.0/go.mod h1:gIdJ4wp64HaoK2YrL1Q5/N7Y16edYb8uY+O0FJTyyDA=\ngithub.com/bits-and-blooms/bloom/v3 v3.0.1 h1:Inlf0YXbgehxVjMPmCGv86iMCKMGPPrPSHtBF5yRHwA=\ngithub.com/bits-and-blooms/bloom/v3 v3.0.1/go.mod h1:MC8muvBzzPOFsrcdND/A7kU7kMhkqb9KI70JlZCP+C8=\ngithub.com/bketelsen/crypt v0.0.3-0.20200106085610-5cbc8cc4026c/go.mod h1:MKsuJmJgSg28kpZDP6UIiPt0e0Oz0kqKNGyRaWEPv84=\ngithub.com/blakesmith/ar v0.0.0-20190502131153-809d4375e1fb/go.mod h1:PkYb9DJNAwrSvRx5DYA+gUcOIgTGVMNkfSCbZM8cWpI=\ngithub.com/blang/semver v3.5.0+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=\ngithub.com/blang/semver v3.5.1+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=\ngithub.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=\ngithub.com/boltdb/bolt v1.3.1/go.mod h1:clJnj/oiGkjum5o1McbSZDSLxVThjynRyGBgiAx27Ps=\ngithub.com/bombsimon/wsl/v2 v2.0.0/go.mod h1:mf25kr/SqFEPhhcxW1+7pxzGlW+hIl/hYTKY95VwV8U=\ngithub.com/bombsimon/wsl/v2 v2.2.0/go.mod h1:Azh8c3XGEJl9LyX0/sFC+CKMc7Ssgua0g+6abzXN4Pg=\ngithub.com/bombsimon/wsl/v3 v3.0.0/go.mod h1:st10JtZYLE4D5sC7b8xV4zTKZwAQjCH/Hy2Pm1FNZIc=\ngithub.com/bombsimon/wsl/v3 v3.1.0/go.mod h1:st10JtZYLE4D5sC7b8xV4zTKZwAQjCH/Hy2Pm1FNZIc=\ngithub.com/briandowns/spinner v1.16.0 h1:DFmp6hEaIx2QXXuqSJmtfSBSAjRmpGiKG6ip2Wm/yOs=\ngithub.com/briandowns/spinner v1.16.0/go.mod h1:QOuQk7x+EaDASo80FEXwlwiA+j/PPIcX3FScO+3/ZPQ=\ngithub.com/buger/jsonparser v1.1.1 h1:2PnMjfWD7wBILjqQbt530v576A/cAbQvEW9gGIpYMUs=\ngithub.com/buger/jsonparser v1.1.1/go.mod h1:6RYKKt7H4d4+iWqouImQ9R2FZql3VbhNgx27UK13J/0=\ngithub.com/caarlos0/ctrlc v1.0.0/go.mod h1:CdXpj4rmq0q/1Eb44M9zi2nKB0QraNKuRGYGrrHhcQw=\ngithub.com/campoy/unique v0.0.0-20180121183637-88950e537e7e/go.mod h1:9IOqJGCPMSc6E5ydlp5NIonxObaeu/Iub/X03EKPVYo=\ngithub.com/casbin/casbin/v2 v2.1.2/go.mod h1:YcPU1XXisHhLzuxH9coDNf2FbKpjGlbCg3n9yuLkIJQ=\ngithub.com/cavaliercoder/go-cpio v0.0.0-20180626203310-925f9528c45e/go.mod h1:oDpT4efm8tSYHXV5tHSdRvBet/b/QzxZ+XyyPehvm3A=\ngithub.com/cenkalti/backoff v2.2.1+incompatible/go.mod h1:90ReRw6GdpyfrHakVjL/QHaoyV4aDUVVkXQJJJ3NXXM=\ngithub.com/census-instrumentation/opencensus-proto v0.2.0/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/cespare/xxhash v1.1.0 h1:a6HrQnmkObjyL+Gs60czilIUGqrzKutQD6XZog3p+ko=\ngithub.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=\ngithub.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cespare/xxhash/v2 v2.1.2 h1:YRXhKfTDauu4ajMg1TPgFO5jnlC2HCbmLXMcTG5cbYE=\ngithub.com/cespare/xxhash/v2 v2.1.2/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cheggaaa/pb v1.0.29 h1:FckUN5ngEk2LpvuG0fw1GEFx6LtyY2pWI/Z2QgCnEYo=\ngithub.com/cheggaaa/pb v1.0.29/go.mod h1:W40334L7FMC5JKWldsTWbdGjLo0RxUKK73K+TuPxX30=\ngithub.com/cheggaaa/pb/v3 v3.0.5/go.mod h1:X1L61/+36nz9bjIsrDU52qHKOQukUQe2Ge+YvGuquCw=\ngithub.com/cheggaaa/pb/v3 v3.0.6/go.mod h1:X1L61/+36nz9bjIsrDU52qHKOQukUQe2Ge+YvGuquCw=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/circonus-labs/circonus-gometrics v2.3.1+incompatible/go.mod h1:nmEj6Dob7S7YxXgwXpfOuvO54S+tGdZdw9fuRZt25Ag=\ngithub.com/circonus-labs/circonusllhist v0.1.3/go.mod h1:kMXHVDlOchFAehlya5ePtbp5jckzBHf4XRpQvBOLI+I=\ngithub.com/clbanning/x2j v0.0.0-20191024224557-825249438eec/go.mod h1:jMjuTZXRI4dUb/I5gc9Hdhagfvm9+RyrPryS/auMzxE=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/cncf/udpa/go v0.0.0-20200629203442-efcf912fb354/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=\ngithub.com/cncf/xds/go v0.0.0-20210312221358-fbca930ec8ed/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cncf/xds/go v0.0.0-20210805033703-aa0b78936158/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=\ngithub.com/cockroachdb/apd v1.1.0/go.mod h1:8Sl8LxpKi29FqWXR16WEFZRNSz3SoPzUzeMeY4+DwBQ=\ngithub.com/cockroachdb/cockroach-go/v2 v2.0.3 h1:ZA346ACHIZctef6trOTwBAEvPVm1k0uLm/bb2Atc+S8=\ngithub.com/cockroachdb/cockroach-go/v2 v2.0.3/go.mod h1:hAuDgiVgDVkfirP9JnhXEfcXEPRKBpYdGz+l7mvYSzw=\ngithub.com/cockroachdb/datadriven v0.0.0-20190809214429-80d97fb3cbaa/go.mod h1:zn76sxSg3SzpJ0PPJaLDCu+Bu0Lg3sKTORVIj19EIF8=\ngithub.com/codahale/hdrhistogram v0.0.0-20161010025455-3a0bb77429bd/go.mod h1:sE/e/2PUdi/liOCUjSTXgM1o87ZssimdTWN964YiIeI=\ngithub.com/colinmarc/hdfs/v2 v2.2.0 h1:4AaIlTq+/sWmeqYhI0dX8bD4YrMQM990tRjm636FkGM=\ngithub.com/colinmarc/hdfs/v2 v2.2.0/go.mod h1:Wss6n3mtaZyRwWaqtSH+6ge01qT0rw9dJJmvoUnIQ/E=\ngithub.com/container-storage-interface/spec v1.1.0/go.mod h1:6URME8mwIBbpVyZV93Ce5St17xBiQJQY67NDsuohiy4=\ngithub.com/container-storage-interface/spec v1.3.0/go.mod h1:6URME8mwIBbpVyZV93Ce5St17xBiQJQY67NDsuohiy4=\ngithub.com/containerd/containerd v1.3.0/go.mod h1:bC6axHOhabU15QhwfG7w5PipXdVtMXFTttgp+kVtyUA=\ngithub.com/coredns/coredns v1.4.0 h1:RubBkYmkByUqZWWkjRHvNLnUHgkRVqAWgSMmRFvpE1A=\ngithub.com/coredns/coredns v1.4.0/go.mod h1:zASH/MVDgR6XZTbxvOnsZfffS+31vg6Ackf/wo1+AM0=\ngithub.com/coreos/bbolt v1.3.2/go.mod h1:iRUV2dpdMOn7Bo10OQBFzIJO9kkE559Wcmn+qkEiiKk=\ngithub.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/etcd v3.3.13+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/go-etcd v2.0.0+incompatible/go.mod h1:Jez6KQU2B/sWsbdaef3ED8NzMklzPG4d5KIOhIy30Tk=\ngithub.com/coreos/go-oidc v2.1.0+incompatible h1:sdJrfw8akMnCuUlaZU3tE/uYXFgfqom8DBE9so9EBsM=\ngithub.com/coreos/go-oidc v2.1.0+incompatible/go.mod h1:CgnwVTmzoESiwO9qyAFEMiHoZ1nMCKZlZ9V6mm3/LKc=\ngithub.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-semver v0.3.0 h1:wkHLiw0WNATZnSG7epLsujiMCgPAc9xhjJ4tgnAxmfM=\ngithub.com/coreos/go-semver v0.3.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-systemd v0.0.0-20180511133405-39ca1b05acc7/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd v0.0.0-20190719114852-fd7a80b32e1f h1:JOrtw2xFKzlg+cbHpyrpLDmnN1HqhBfnX7WDiW7eG2c=\ngithub.com/coreos/go-systemd v0.0.0-20190719114852-fd7a80b32e1f/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd/v22 v22.3.1/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/coreos/go-systemd/v22 v22.3.2 h1:D9/bQk5vlXQFZ6Kwuu6zaiXJ9oTPe68++AzAJc1DzSI=\ngithub.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/coreos/pkg v0.0.0-20160727233714-3ac0863d7acf/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=\ngithub.com/coreos/pkg v0.0.0-20180108230652-97fdf19511ea/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=\ngithub.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=\ngithub.com/cosnicolaou/pbzip2 v1.0.1 h1:f5Ix000Rtl9tr0Ne33wNLtljGl2nAyR4ZirJrz9qg+0=\ngithub.com/cosnicolaou/pbzip2 v1.0.1/go.mod h1:cE04zhBMvwMrCLhsx6aLYh9cGsU9GyFB0oo/GmO+SkY=\ngithub.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/creack/pty v1.1.11/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v0.0.0-20151105211317-5215b55f46b2/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dchest/siphash v1.2.1 h1:4cLinnzVJDKxTCl9B01807Yiy+W7ZzVHj/KIroQRvT4=\ngithub.com/dchest/siphash v1.2.1/go.mod h1:q+IRvb2gOSrUnYoPqHiyHXS0FOBBOdl6tONBlVnOnt4=\ngithub.com/decred/dcrd/chaincfg/chainhash v1.0.2/go.mod h1:BpbrGgrPTr3YJYRN3Bm+D9NuaFd+zGyNeIKgrhCXK60=\ngithub.com/decred/dcrd/crypto/blake256 v1.0.0/go.mod h1:sQl2p6Y26YV+ZOcSTP6thNdn47hh8kt6rqSlvmrXFAc=\ngithub.com/decred/dcrd/dcrec/secp256k1/v3 v3.0.0/go.mod h1:J70FGZSbzsjecRTiTzER+3f1KZLNaXkuv+yeFTKoxM8=\ngithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.0.0-20210816181553-5444fa50b93d/go.mod h1:tmAIfUFEirG/Y8jhZ9M+h36obRZAk/1fcSpXwAVlfqE=\ngithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.0.0 h1:Fe5DW39aaoS/fqZiYlylEqQWIKznnbatWSHpWdFA3oQ=\ngithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.0.0/go.mod h1:hyedUtir6IdtD/7lIxGeCxkaw7y45JueMRL4DIyJDKs=\ngithub.com/denisenkom/go-mssqldb v0.0.0-20191124224453-732737034ffd/go.mod h1:xbL0rPBG9cCiLr28tMa8zpbdarY27NDyej4t/EjAShU=\ngithub.com/devigned/tab v0.1.1/go.mod h1:XG9mPq0dFghrYvoBF3xdRrJzSTX1b7IQrvaL9mzjeJY=\ngithub.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=\ngithub.com/dgryski/go-sip13 v0.0.0-20181026042036-e10d5fee7954/go.mod h1:vAd38F8PWV+bWy6jNmig1y/TA+kYO4g3RSRF0IAv0no=\ngithub.com/dimchansky/utfbom v1.1.0/go.mod h1:rO41eb7gLfo8SF1jd9F8HplJm1Fewwi4mQvIirEdv+8=\ngithub.com/djherbis/atime v1.0.0 h1:ySLvBAM0EvOGaX7TI4dAM5lWj+RdJUCKtGSEHN8SGBg=\ngithub.com/djherbis/atime v1.0.0/go.mod h1:5W+KBIuTwVGcqjIfaTwt+KSYX1o6uep8dtevevQP/f8=\ngithub.com/dnaeon/go-vcr v1.0.1/go.mod h1:aBB1+wY4s93YsC3HHjMBMrwTj2R9FHDzUr9KyGc8n1E=\ngithub.com/docker/cli v0.0.0-20191017083524-a8ff7f821017/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\ngithub.com/docker/distribution v2.7.1+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=\ngithub.com/docker/docker v0.7.3-0.20190327010347-be7ac8be2ae0/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/docker v1.4.2-0.20190924003213-a8608b5b67c7/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/docker-credential-helpers v0.6.3/go.mod h1:WRaJzqw3CTB9bk10avuGsjVBZsD05qeibJ1/TYlvc0Y=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-units v0.3.3/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/docker/go-units v0.4.0 h1:3uh0PgVws3nIA0Q+MwDC8yjEPf9zjRfZZWXZYDct3Tw=\ngithub.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/docker/spdystream v0.0.0-20160310174837-449fdfce4d96/go.mod h1:Qh8CwZgvJUkLughtfhJv5dyTYa91l1fOUCrgjqmcifM=\ngithub.com/docopt/docopt-go v0.0.0-20180111231733-ee0de3bc6815/go.mod h1:WwZ+bS3ebgob9U8Nd0kOddGdZWjyMGR8Wziv+TBNwSE=\ngithub.com/dswarbrick/smart v0.0.0-20190505152634-909a45200d6d h1:QK8IYltsNy+5QZcDFbVkyInrs98/wHy1tfUTGG91sps=\ngithub.com/dswarbrick/smart v0.0.0-20190505152634-909a45200d6d/go.mod h1:apXo4PA/BgBPrt66j0N45O2stlBTRowdip2igwcUWVc=\ngithub.com/dustin/go-humanize v0.0.0-20171111073723-bb3d318650d4/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/dustin/go-humanize v1.0.0 h1:VSnTsYCnlFHaM2/igO1h6X3HA71jcobQuxemgkq4zYo=\ngithub.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/eapache/go-resiliency v1.1.0/go.mod h1:kFI+JgMyC7bLPUVY133qvEBtVayf5mFgVsvEsIPBvNs=\ngithub.com/eapache/go-resiliency v1.2.0 h1:v7g92e/KSN71Rq7vSThKaWIq68fL4YHvWyiUKorFR1Q=\ngithub.com/eapache/go-resiliency v1.2.0/go.mod h1:kFI+JgMyC7bLPUVY133qvEBtVayf5mFgVsvEsIPBvNs=\ngithub.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21 h1:YEetp8/yCZMuEPMUDHG0CW/brkkEp8mzqk2+ODEitlw=\ngithub.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21/go.mod h1:+020luEh2TKB4/GOp8oxxtq0Daoen/Cii55CzbTV6DU=\ngithub.com/eapache/queue v1.1.0 h1:YOEu7KNc61ntiQlcEeUIoDTJ2o8mQznoNvUhiigpIqc=\ngithub.com/eapache/queue v1.1.0/go.mod h1:6eCeP0CKFpHLu8blIFXhExK/dRa7WDZfr6jVFPTqq+I=\ngithub.com/eclipse/paho.mqtt.golang v1.3.0 h1:MU79lqr3FKNKbSrGN7d7bNYqh8MwWW7Zcx0iG+VIw9I=\ngithub.com/eclipse/paho.mqtt.golang v1.3.0/go.mod h1:eTzb4gxwwyWpqBUHGQZ4ABAV7+Jgm1PklsYT/eo8Hcc=\ngithub.com/edsrzf/mmap-go v1.0.0/go.mod h1:YO35OhQPt3KJa3ryjFM5Bs14WD66h8eGKpfaBNrHW5M=\ngithub.com/elastic/go-elasticsearch/v7 v7.12.0 h1:j4tvcMrZJLp39L2NYvBb7f+lHKPqPHSL3nvB8+/DV+s=\ngithub.com/elastic/go-elasticsearch/v7 v7.12.0/go.mod h1:OJ4wdbtDNk5g503kvlHLyErCgQwwzmDtaFC4XyOxXA4=\ngithub.com/elazarl/goproxy v0.0.0-20170405201442-c4fc26588b6e/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=\ngithub.com/elazarl/goproxy v0.0.0-20180725130230-947c36da3153/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=\ngithub.com/emicklei/go-restful v0.0.0-20170410110728-ff4f55a20633/go.mod h1:otzb+WCGbkyDHkqmQmT5YD2WR4BBwUdeQoFo8l/7tVs=\ngithub.com/emicklei/go-restful v2.9.5+incompatible h1:spTtZBk5DYEvbxMVutUuTyh1Ao2r4iyvLdACqsl/Ljk=\ngithub.com/emicklei/go-restful v2.9.5+incompatible/go.mod h1:otzb+WCGbkyDHkqmQmT5YD2WR4BBwUdeQoFo8l/7tVs=\ngithub.com/envoyproxy/go-control-plane v0.6.9/go.mod h1:SBwIajubJHhxtWwsL9s8ss4safvEdbitLhGGK48rN6g=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/go-control-plane v0.9.7/go.mod h1:cwu0lG7PUMfa9snN8LXBig5ynNVH9qI8YYLbd1fK2po=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20210217033140-668b12f5399d/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=\ngithub.com/envoyproxy/go-control-plane v0.9.9-0.20210512163311-63b5d3c536b0/go.mod h1:hliV/p42l8fGbc6Y9bQ70uLwIvmJyVE5k4iMKlh8wCQ=\ngithub.com/envoyproxy/go-control-plane v0.9.10-0.20210907150352-cf90f659a021/go.mod h1:AFq3mo9L8Lqqiid3OhADV3RfLJnjiw63cSpi+fDTRC0=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/erikstmartin/go-testdb v0.0.0-20160219214506-8d10e4a1bae5/go.mod h1:a2zkGnVExMxdzMo3M0Hi/3sEU+cWnZpSni0O6/Yb/P0=\ngithub.com/evanphx/json-patch v4.2.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=\ngithub.com/evanphx/json-patch v4.5.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=\ngithub.com/evanphx/json-patch v4.9.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=\ngithub.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/fatih/color v1.9.0/go.mod h1:eQcE1qtQxscV5RaZvpXrrb8Drkc3/DdQ+uUYCNjL+zU=\ngithub.com/fatih/color v1.12.0/go.mod h1:ELkj/draVOlAH/xkhN6mQ50Qd0MPOk5AAr3maGEBuJM=\ngithub.com/fatih/color v1.13.0 h1:8LOYc1KYPPmyKMuN8QV2DNRWNbLo6LZ0iLs8+mlH53w=\ngithub.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=\ngithub.com/fatih/structs v1.1.0 h1:Q7juDM0QtcnhCpeyLGQKyg4TOIghuNXrkL32pHAUMxo=\ngithub.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=\ngithub.com/form3tech-oss/jwt-go v3.2.2+incompatible h1:TcekIExNqud5crz4xD2pavyTgWiPvpYe4Xau31I0PRk=\ngithub.com/form3tech-oss/jwt-go v3.2.2+incompatible/go.mod h1:pbq4aXjuKjdthFRnoDwaVPLA+WlJuPGy+QneDUgJi2k=\ngithub.com/fortytw2/leaktest v1.2.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=\ngithub.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=\ngithub.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=\ngithub.com/franela/goblin v0.0.0-20200105215937-c9ffbefa60db/go.mod h1:7dvUGVsVBjqR7JHJk0brhHOZYGmfBYOrK0ZhYMEtBr4=\ngithub.com/franela/goreq v0.0.0-20171204163338-bcd34c9993f8/go.mod h1:ZhphrRTfi2rbfLwlschooIH4+wKKDR4Pdxhh+TRoA20=\ngithub.com/frankban/quicktest v1.10.2/go.mod h1:K+q6oSqb0W0Ininfk863uOk1lMy69l/P6txr3mVT54s=\ngithub.com/frankban/quicktest v1.12.1 h1:P6vQcHwZYgVGIpUzKB5DXzkEeYJppJOStPLuh9aB89c=\ngithub.com/frankban/quicktest v1.12.1/go.mod h1:qLE0fzW0VuyUAJgPU19zByoIr0HtCHN/r/VLSOOIySU=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=\ngithub.com/georgysavva/scany v0.2.7 h1:SBEuurTvWOUp7FnGBOjeSF9XWaWmVzc91h9baPo6y2s=\ngithub.com/georgysavva/scany v0.2.7/go.mod h1:bcxPhzeQFQqAUmjlZVwTGlu6AnWFSOiHpalfBe0xQ6U=\ngithub.com/ghodss/yaml v0.0.0-20150909031657-73d445a93680/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/gizak/termui/v3 v3.1.0/go.mod h1:bXQEBkJpzxUAKf0+xq9MSWAvWZlE7c+aidmyFlkYTrY=\ngithub.com/globalsign/mgo v0.0.0-20180905125535-1ca0a4f7cbcb/go.mod h1:xkRDCp4j0OGD1HRkm4kmhM+pmpv3AKq5SU7GMg4oO/Q=\ngithub.com/globalsign/mgo v0.0.0-20181015135952-eeefdecb41b8/go.mod h1:xkRDCp4j0OGD1HRkm4kmhM+pmpv3AKq5SU7GMg4oO/Q=\ngithub.com/go-asn1-ber/asn1-ber v1.5.1 h1:pDbRAunXzIUXfx4CB2QJFv5IuPiuoW+sWvr/Us009o8=\ngithub.com/go-asn1-ber/asn1-ber v1.5.1/go.mod h1:hEBeB/ic+5LoWskz+yKT7vGhhPYkProFKoKdwZRWMe0=\ngithub.com/go-critic/go-critic v0.4.1/go.mod h1:7/14rZGnZbY6E38VEGk2kVhoq6itzc1E68facVDK23g=\ngithub.com/go-critic/go-critic v0.4.3/go.mod h1:j4O3D4RoIwRqlZw5jJpx0BNfXWWbpcJoKu5cYSe4YmQ=\ngithub.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/go-ini/ini v1.25.4/go.mod h1:ByCAeIL28uOIIG0E3PJtZPDL8WnHpFKFOtgjp+3Ies8=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.10.0/go.mod h1:xUsJbQ/Fp4kEt7AFgCuvyX4a71u8h9jB8tj/ORgOZ7o=\ngithub.com/go-kit/log v0.1.0/go.mod h1:zbhenjAZHb184qTLMA9ZjW7ThYL0H2mk7Q6pNt4vbaY=\ngithub.com/go-ldap/ldap v3.0.2+incompatible h1:kD5HQcAzlQ7yrhfn+h+MSABeAy/jAJhvIJ/QDllP44g=\ngithub.com/go-ldap/ldap v3.0.2+incompatible/go.mod h1:qfd9rJvER9Q0/D/Sqn1DfHRoBp40uXYvFoEVrNEPqRc=\ngithub.com/go-ldap/ldap/v3 v3.2.4 h1:PFavAq2xTgzo/loE8qNXcQaofAaqIpI4WgaLdv+1l3E=\ngithub.com/go-ldap/ldap/v3 v3.2.4/go.mod h1:iYS1MdmrmceOJ1QOTnRXrIs7i3kloqtmGQjRvjKpyMg=\ngithub.com/go-lintpack/lintpack v0.5.2/go.mod h1:NwZuYi2nUHho8XEIZ6SIxihrnPoqBTDqfpXvXAN0sXM=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=\ngithub.com/go-logr/logr v0.1.0/go.mod h1:ixOQHD9gLJUVQQ2ZOR7zLEifBX6tGkNJF4QyIY7sIas=\ngithub.com/go-logr/logr v0.2.0/go.mod h1:z6/tIYblkpsD+a4lm/fGIIU9mZ+XfAiaFtq7xTgseGU=\ngithub.com/go-logr/logr v0.3.0/go.mod h1:z6/tIYblkpsD+a4lm/fGIIU9mZ+XfAiaFtq7xTgseGU=\ngithub.com/go-logr/logr v0.4.0 h1:K7/B1jt6fIBQVd4Owv2MqGQClcgf0R266+7C/QjRcLc=\ngithub.com/go-logr/logr v0.4.0/go.mod h1:z6/tIYblkpsD+a4lm/fGIIU9mZ+XfAiaFtq7xTgseGU=\ngithub.com/go-logr/zapr v0.2.0/go.mod h1:qhKdvif7YF5GI9NWEpyxTSSBdGmzkNguibrdCNVPunU=\ngithub.com/go-ole/go-ole v1.2.1/go.mod h1:7FAglXiTm7HKlQRDeOQ6ZNUHidzCWXuZWq/1dTyBNF8=\ngithub.com/go-ole/go-ole v1.2.4/go.mod h1:XCwSNxSkXRo4vlyPy93sltvi/qJq0jqQhjqQNIwKuxM=\ngithub.com/go-ole/go-ole v1.2.5/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-openapi/analysis v0.0.0-20180825180245-b006789cd277/go.mod h1:k70tL6pCuVxPJOHXQ+wIac1FUrvNkHolPie/cLEU6hI=\ngithub.com/go-openapi/analysis v0.17.0/go.mod h1:IowGgpVeD0vNm45So8nr+IcQ3pxVtpRoBWb8PVZO0ik=\ngithub.com/go-openapi/analysis v0.18.0/go.mod h1:IowGgpVeD0vNm45So8nr+IcQ3pxVtpRoBWb8PVZO0ik=\ngithub.com/go-openapi/analysis v0.19.2/go.mod h1:3P1osvZa9jKjb8ed2TPng3f0i/UY9snX6gxi44djMjk=\ngithub.com/go-openapi/analysis v0.19.4/go.mod h1:3P1osvZa9jKjb8ed2TPng3f0i/UY9snX6gxi44djMjk=\ngithub.com/go-openapi/analysis v0.19.5/go.mod h1:hkEAkxagaIvIP7VTn8ygJNkd4kAYON2rCu0v0ObL0AU=\ngithub.com/go-openapi/analysis v0.19.10/go.mod h1:qmhS3VNFxBlquFJ0RGoDtylO9y4pgTAUNE9AEEMdlJQ=\ngithub.com/go-openapi/analysis v0.19.16/go.mod h1:GLInF007N83Ad3m8a/CbQ5TPzdnGT7workfHwuVjNVk=\ngithub.com/go-openapi/analysis v0.20.0 h1:UN09o0kNhleunxW7LR+KnltD0YrJ8FF03pSqvAN3Vro=\ngithub.com/go-openapi/analysis v0.20.0/go.mod h1:BMchjvaHDykmRMsK40iPtvyOfFdMMxlOmQr9FBZk+Og=\ngithub.com/go-openapi/errors v0.17.0/go.mod h1:LcZQpmvG4wyF5j4IhA73wkLFQg+QJXOQHVjmcZxhka0=\ngithub.com/go-openapi/errors v0.18.0/go.mod h1:LcZQpmvG4wyF5j4IhA73wkLFQg+QJXOQHVjmcZxhka0=\ngithub.com/go-openapi/errors v0.19.2/go.mod h1:qX0BLWsyaKfvhluLejVpVNwNRdXZhEbTA4kxxpKBC94=\ngithub.com/go-openapi/errors v0.19.3/go.mod h1:qX0BLWsyaKfvhluLejVpVNwNRdXZhEbTA4kxxpKBC94=\ngithub.com/go-openapi/errors v0.19.6/go.mod h1:cM//ZKUKyO06HSwqAelJ5NsEMMcpa6VpXe8DOa1Mi1M=\ngithub.com/go-openapi/errors v0.19.7/go.mod h1:cM//ZKUKyO06HSwqAelJ5NsEMMcpa6VpXe8DOa1Mi1M=\ngithub.com/go-openapi/errors v0.19.8/go.mod h1:cM//ZKUKyO06HSwqAelJ5NsEMMcpa6VpXe8DOa1Mi1M=\ngithub.com/go-openapi/errors v0.19.9 h1:9SnKdGhiPZHF3ttwFMiCBEb8jQ4IDdrK+5+a0oTygA4=\ngithub.com/go-openapi/errors v0.19.9/go.mod h1:cM//ZKUKyO06HSwqAelJ5NsEMMcpa6VpXe8DOa1Mi1M=\ngithub.com/go-openapi/jsonpointer v0.0.0-20160704185906-46af16f9f7b1/go.mod h1:+35s3my2LFTysnkMfxsJBAMHj/DoqoB9knIWoYG/Vk0=\ngithub.com/go-openapi/jsonpointer v0.17.0/go.mod h1:cOnomiV+CVVwFLk0A/MExoFMjwdsUdVpsRhURCKh+3M=\ngithub.com/go-openapi/jsonpointer v0.18.0/go.mod h1:cOnomiV+CVVwFLk0A/MExoFMjwdsUdVpsRhURCKh+3M=\ngithub.com/go-openapi/jsonpointer v0.19.2/go.mod h1:3akKfEdA7DF1sugOqz1dVQHBcuDBPKZGEoHC/NkiQRg=\ngithub.com/go-openapi/jsonpointer v0.19.3/go.mod h1:Pl9vOtqEWErmShwVjC8pYs9cog34VGT37dQOVbmoatg=\ngithub.com/go-openapi/jsonpointer v0.19.5 h1:gZr+CIYByUqjcgeLXnQu2gHYQC9o73G2XUeOFYEICuY=\ngithub.com/go-openapi/jsonpointer v0.19.5/go.mod h1:Pl9vOtqEWErmShwVjC8pYs9cog34VGT37dQOVbmoatg=\ngithub.com/go-openapi/jsonreference v0.0.0-20160704190145-13c6e3589ad9/go.mod h1:W3Z9FmVs9qj+KR4zFKmDPGiLdk1D9Rlm7cyMvf57TTg=\ngithub.com/go-openapi/jsonreference v0.17.0/go.mod h1:g4xxGn04lDIRh0GJb5QlpE3HfopLOL6uZrK/VgnsK9I=\ngithub.com/go-openapi/jsonreference v0.18.0/go.mod h1:g4xxGn04lDIRh0GJb5QlpE3HfopLOL6uZrK/VgnsK9I=\ngithub.com/go-openapi/jsonreference v0.19.2/go.mod h1:jMjeRr2HHw6nAVajTXJ4eiUwohSTlpa0o73RUL1owJc=\ngithub.com/go-openapi/jsonreference v0.19.3/go.mod h1:rjx6GuL8TTa9VaixXglHmQmIL98+wF9xc8zWvFonSJ8=\ngithub.com/go-openapi/jsonreference v0.19.5 h1:1WJP/wi4OjB4iV8KVbH73rQaoialJrqv8gitZLxGLtM=\ngithub.com/go-openapi/jsonreference v0.19.5/go.mod h1:RdybgQwPxbL4UEjuAruzK1x3nE69AqPYEJeo/TWfEeg=\ngithub.com/go-openapi/loads v0.17.0/go.mod h1:72tmFy5wsWx89uEVddd0RjRWPZm92WRLhf7AC+0+OOU=\ngithub.com/go-openapi/loads v0.18.0/go.mod h1:72tmFy5wsWx89uEVddd0RjRWPZm92WRLhf7AC+0+OOU=\ngithub.com/go-openapi/loads v0.19.0/go.mod h1:72tmFy5wsWx89uEVddd0RjRWPZm92WRLhf7AC+0+OOU=\ngithub.com/go-openapi/loads v0.19.2/go.mod h1:QAskZPMX5V0C2gvfkGZzJlINuP7Hx/4+ix5jWFxsNPs=\ngithub.com/go-openapi/loads v0.19.3/go.mod h1:YVfqhUCdahYwR3f3iiwQLhicVRvLlU/WO5WPaZvcvSI=\ngithub.com/go-openapi/loads v0.19.4/go.mod h1:zZVHonKd8DXyxyw4yfnVjPzBjIQcLt0CCsn0N0ZrQsk=\ngithub.com/go-openapi/loads v0.19.5/go.mod h1:dswLCAdonkRufe/gSUC3gN8nTSaB9uaS2es0x5/IbjY=\ngithub.com/go-openapi/loads v0.19.6/go.mod h1:brCsvE6j8mnbmGBh103PT/QLHfbyDxA4hsKvYBNEGVc=\ngithub.com/go-openapi/loads v0.19.7/go.mod h1:brCsvE6j8mnbmGBh103PT/QLHfbyDxA4hsKvYBNEGVc=\ngithub.com/go-openapi/loads v0.20.0/go.mod h1:2LhKquiE513rN5xC6Aan6lYOSddlL8Mp20AW9kpviM4=\ngithub.com/go-openapi/loads v0.20.2 h1:z5p5Xf5wujMxS1y8aP+vxwW5qYT2zdJBbXKmQUG3lcc=\ngithub.com/go-openapi/loads v0.20.2/go.mod h1:hTVUotJ+UonAMMZsvakEgmWKgtulweO9vYP2bQYKA/o=\ngithub.com/go-openapi/runtime v0.0.0-20180920151709-4f900dc2ade9/go.mod h1:6v9a6LTXWQCdL8k1AO3cvqx5OtZY/Y9wKTgaoP6YRfA=\ngithub.com/go-openapi/runtime v0.19.0/go.mod h1:OwNfisksmmaZse4+gpV3Ne9AyMOlP1lt4sK4FXt0O64=\ngithub.com/go-openapi/runtime v0.19.4/go.mod h1:X277bwSUBxVlCYR3r7xgZZGKVvBd/29gLDlFGtJ8NL4=\ngithub.com/go-openapi/runtime v0.19.15/go.mod h1:dhGWCTKRXlAfGnQG0ONViOZpjfg0m2gUt9nTQPQZuoo=\ngithub.com/go-openapi/runtime v0.19.16/go.mod h1:5P9104EJgYcizotuXhEuUrzVc+j1RiSjahULvYmlv98=\ngithub.com/go-openapi/runtime v0.19.24 h1:TqagMVlRAOTwllE/7hNKx6rQ10O6T8ZzeJdMjSTKaD4=\ngithub.com/go-openapi/runtime v0.19.24/go.mod h1:Lm9YGCeecBnUUkFTxPC4s1+lwrkJ0pthx8YvyjCfkgk=\ngithub.com/go-openapi/spec v0.0.0-20160808142527-6aced65f8501/go.mod h1:J8+jY1nAiCcj+friV/PDoE1/3eeccG9LYBs0tYvLOWc=\ngithub.com/go-openapi/spec v0.17.0/go.mod h1:XkF/MOi14NmjsfZ8VtAKf8pIlbZzyoTvZsdfssdxcBI=\ngithub.com/go-openapi/spec v0.18.0/go.mod h1:XkF/MOi14NmjsfZ8VtAKf8pIlbZzyoTvZsdfssdxcBI=\ngithub.com/go-openapi/spec v0.19.2/go.mod h1:sCxk3jxKgioEJikev4fgkNmwS+3kuYdJtcsZsD5zxMY=\ngithub.com/go-openapi/spec v0.19.3/go.mod h1:FpwSN1ksY1eteniUU7X0N/BgJ7a4WvBFVA8Lj9mJglo=\ngithub.com/go-openapi/spec v0.19.5/go.mod h1:Hm2Jr4jv8G1ciIAo+frC/Ft+rR2kQDh8JHKHb3gWUSk=\ngithub.com/go-openapi/spec v0.19.6/go.mod h1:Hm2Jr4jv8G1ciIAo+frC/Ft+rR2kQDh8JHKHb3gWUSk=\ngithub.com/go-openapi/spec v0.19.8/go.mod h1:Hm2Jr4jv8G1ciIAo+frC/Ft+rR2kQDh8JHKHb3gWUSk=\ngithub.com/go-openapi/spec v0.19.15/go.mod h1:+81FIL1JwC5P3/Iuuozq3pPE9dXdIEGxFutcFKaVbmU=\ngithub.com/go-openapi/spec v0.20.0/go.mod h1:+81FIL1JwC5P3/Iuuozq3pPE9dXdIEGxFutcFKaVbmU=\ngithub.com/go-openapi/spec v0.20.1/go.mod h1:93x7oh+d+FQsmsieroS4cmR3u0p/ywH649a3qwC9OsQ=\ngithub.com/go-openapi/spec v0.20.3 h1:uH9RQ6vdyPSs2pSy9fL8QPspDF2AMIMPtmK5coSSjtQ=\ngithub.com/go-openapi/spec v0.20.3/go.mod h1:gG4F8wdEDN+YPBMVnzE85Rbhf+Th2DTvA9nFPQ5AYEg=\ngithub.com/go-openapi/strfmt v0.17.0/go.mod h1:P82hnJI0CXkErkXi8IKjPbNBM6lV6+5pLP5l494TcyU=\ngithub.com/go-openapi/strfmt v0.18.0/go.mod h1:P82hnJI0CXkErkXi8IKjPbNBM6lV6+5pLP5l494TcyU=\ngithub.com/go-openapi/strfmt v0.19.0/go.mod h1:+uW+93UVvGGq2qGaZxdDeJqSAqBqBdl+ZPMF/cC8nDY=\ngithub.com/go-openapi/strfmt v0.19.2/go.mod h1:0yX7dbo8mKIvc3XSKp7MNfxw4JytCfCD6+bY1AVL9LU=\ngithub.com/go-openapi/strfmt v0.19.3/go.mod h1:0yX7dbo8mKIvc3XSKp7MNfxw4JytCfCD6+bY1AVL9LU=\ngithub.com/go-openapi/strfmt v0.19.4/go.mod h1:eftuHTlB/dI8Uq8JJOyRlieZf+WkkxUuk0dgdHXr2Qk=\ngithub.com/go-openapi/strfmt v0.19.5/go.mod h1:eftuHTlB/dI8Uq8JJOyRlieZf+WkkxUuk0dgdHXr2Qk=\ngithub.com/go-openapi/strfmt v0.19.11/go.mod h1:UukAYgTaQfqJuAFlNxxMWNvMYiwiXtLsF2VwmoFtbtc=\ngithub.com/go-openapi/strfmt v0.20.0 h1:l2omNtmNbMc39IGptl9BuXBEKcZfS8zjrTsPKTiJiDM=\ngithub.com/go-openapi/strfmt v0.20.0/go.mod h1:UukAYgTaQfqJuAFlNxxMWNvMYiwiXtLsF2VwmoFtbtc=\ngithub.com/go-openapi/swag v0.0.0-20160704191624-1d0bd113de87/go.mod h1:DXUve3Dpr1UfpPtxFw+EFuQ41HhCWZfha5jSVRG7C7I=\ngithub.com/go-openapi/swag v0.17.0/go.mod h1:AByQ+nYG6gQg71GINrmuDXCPWdL640yX49/kXLo40Tg=\ngithub.com/go-openapi/swag v0.18.0/go.mod h1:AByQ+nYG6gQg71GINrmuDXCPWdL640yX49/kXLo40Tg=\ngithub.com/go-openapi/swag v0.19.2/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=\ngithub.com/go-openapi/swag v0.19.5/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=\ngithub.com/go-openapi/swag v0.19.7/go.mod h1:ao+8BpOPyKdpQz3AOJfbeEVpLmWAvlT1IfTe5McPyhY=\ngithub.com/go-openapi/swag v0.19.9/go.mod h1:ao+8BpOPyKdpQz3AOJfbeEVpLmWAvlT1IfTe5McPyhY=\ngithub.com/go-openapi/swag v0.19.12/go.mod h1:eFdyEBkTdoAf/9RXBvj4cr1nH7GD8Kzo5HTt47gr72M=\ngithub.com/go-openapi/swag v0.19.13/go.mod h1:QYRuS/SOXUCsnplDa677K7+DxSOj6IPNl/eQntq43wQ=\ngithub.com/go-openapi/swag v0.19.14 h1:gm3vOOXfiuw5i9p5N9xJvfjvuofpyvLA9Wr6QfK5Fng=\ngithub.com/go-openapi/swag v0.19.14/go.mod h1:QYRuS/SOXUCsnplDa677K7+DxSOj6IPNl/eQntq43wQ=\ngithub.com/go-openapi/validate v0.18.0/go.mod h1:Uh4HdOzKt19xGIGm1qHf/ofbX1YQ4Y+MYsct2VUrAJ4=\ngithub.com/go-openapi/validate v0.19.2/go.mod h1:1tRCw7m3jtI8eNWEEliiAqUIcBztB2KDnRCRMUi7GTA=\ngithub.com/go-openapi/validate v0.19.3/go.mod h1:90Vh6jjkTn+OT1Eefm0ZixWNFjhtOH7vS9k0lo6zwJo=\ngithub.com/go-openapi/validate v0.19.5/go.mod h1:8DJv2CVJQ6kGNpFW6eV9N3JviE1C85nY1c2z52x1Gk4=\ngithub.com/go-openapi/validate v0.19.10/go.mod h1:RKEZTUWDkxKQxN2jDT7ZnZi2bhZlbNMAuKvKB+IaGx8=\ngithub.com/go-openapi/validate v0.19.12/go.mod h1:Rzou8hA/CBw8donlS6WNEUQupNvUZ0waH08tGe6kAQ4=\ngithub.com/go-openapi/validate v0.19.15/go.mod h1:tbn/fdOwYHgrhPBzidZfJC2MIVvs9GA7monOmWBbeCI=\ngithub.com/go-openapi/validate v0.20.1/go.mod h1:b60iJT+xNNLfaQJUqLI7946tYiFEOuE9E4k54HpKcJ0=\ngithub.com/go-openapi/validate v0.20.2 h1:AhqDegYV3J3iQkMPJSXkvzymHKMTw0BST3RK3hTT4ts=\ngithub.com/go-openapi/validate v0.20.2/go.mod h1:e7OJoKNgd0twXZwIn0A43tHbvIcr/rZIVCbJBpTUoY0=\ngithub.com/go-sql-driver/mysql v1.4.0/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/go-sql-driver/mysql v1.4.1/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=\ngithub.com/go-sql-driver/mysql v1.5.0 h1:ozyZYNQW3x3HtqT1jira07DN2PArx2v7/mN66gGcHOs=\ngithub.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/go-stack/stack v1.8.0 h1:5SgMzNM5HxrEjV0ww2lTmX6E2Izsfxas4+YHWRs3Lsk=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=\ngithub.com/go-test/deep v1.0.2-0.20181118220953-042da051cf31/go.mod h1:wGDj63lr65AM2AQyKZd/NYHGb0R+1RLqB8NKt3aSFNA=\ngithub.com/go-toolsmith/astcast v1.0.0/go.mod h1:mt2OdQTeAQcY4DQgPSArJjHCcOwlX+Wl/kwN+LbLGQ4=\ngithub.com/go-toolsmith/astcopy v1.0.0/go.mod h1:vrgyG+5Bxrnz4MZWPF+pI4R8h3qKRjjyvV/DSez4WVQ=\ngithub.com/go-toolsmith/astequal v0.0.0-20180903214952-dcb477bfacd6/go.mod h1:H+xSiq0+LtiDC11+h1G32h7Of5O3CYFJ99GVbS5lDKY=\ngithub.com/go-toolsmith/astequal v1.0.0/go.mod h1:H+xSiq0+LtiDC11+h1G32h7Of5O3CYFJ99GVbS5lDKY=\ngithub.com/go-toolsmith/astfmt v0.0.0-20180903215011-8f8ee99c3086/go.mod h1:mP93XdblcopXwlyN4X4uodxXQhldPGZbcEJIimQHrkg=\ngithub.com/go-toolsmith/astfmt v1.0.0/go.mod h1:cnWmsOAuq4jJY6Ct5YWlVLmcmLMn1JUPuQIHCY7CJDw=\ngithub.com/go-toolsmith/astinfo v0.0.0-20180906194353-9809ff7efb21/go.mod h1:dDStQCHtmZpYOmjRP/8gHHnCCch3Zz3oEgCdZVdtweU=\ngithub.com/go-toolsmith/astp v0.0.0-20180903215135-0af7e3c24f30/go.mod h1:SV2ur98SGypH1UjcPpCatrV5hPazG6+IfNHbkDXBRrk=\ngithub.com/go-toolsmith/astp v1.0.0/go.mod h1:RSyrtpVlfTFGDYRbrjyWP1pYu//tSFcvdYrA8meBmLI=\ngithub.com/go-toolsmith/pkgload v0.0.0-20181119091011-e9e65178eee8/go.mod h1:WoMrjiy4zvdS+Bg6z9jZH82QXwkcgCBX6nOfnmdaHks=\ngithub.com/go-toolsmith/pkgload v1.0.0/go.mod h1:5eFArkbO80v7Z0kdngIxsRXRMTaX4Ilcwuh3clNrQJc=\ngithub.com/go-toolsmith/strparse v1.0.0/go.mod h1:YI2nUKP9YGZnL/L1/DLFBfixrcjslWct4wyljWhSRy8=\ngithub.com/go-toolsmith/typep v1.0.0/go.mod h1:JSQCQMUPdRlMZFswiq3TGpNp1GMktqkR2Ns5AIQkATU=\ngithub.com/go-toolsmith/typep v1.0.2/go.mod h1:JSQCQMUPdRlMZFswiq3TGpNp1GMktqkR2Ns5AIQkATU=\ngithub.com/go-xmlfmt/xmlfmt v0.0.0-20191208150333-d5b6f63a941b/go.mod h1:aUCEOzzezBEjDBbFBoSiya/gduyIiWYRP6CnSFIV8AM=\ngithub.com/gobuffalo/attrs v0.0.0-20190224210810-a9411de4debd/go.mod h1:4duuawTqi2wkkpB4ePgWMaai6/Kc6WEz83bhFwpHzj0=\ngithub.com/gobuffalo/depgen v0.0.0-20190329151759-d478694a28d3/go.mod h1:3STtPUQYuzV0gBVOY3vy6CfMm/ljR4pABfrTeHNLHUY=\ngithub.com/gobuffalo/depgen v0.1.0/go.mod h1:+ifsuy7fhi15RWncXQQKjWS9JPkdah5sZvtHc2RXGlg=\ngithub.com/gobuffalo/envy v1.6.15/go.mod h1:n7DRkBerg/aorDM8kbduw5dN3oXGswK5liaSCx4T5NI=\ngithub.com/gobuffalo/envy v1.7.0/go.mod h1:n7DRkBerg/aorDM8kbduw5dN3oXGswK5liaSCx4T5NI=\ngithub.com/gobuffalo/flect v0.1.0/go.mod h1:d2ehjJqGOH/Kjqcoz+F7jHTBbmDb38yXA598Hb50EGs=\ngithub.com/gobuffalo/flect v0.1.1/go.mod h1:8JCgGVbRjJhVgD6399mQr4fx5rRfGKVzFjbj6RE/9UI=\ngithub.com/gobuffalo/flect v0.1.3/go.mod h1:8JCgGVbRjJhVgD6399mQr4fx5rRfGKVzFjbj6RE/9UI=\ngithub.com/gobuffalo/genny v0.0.0-20190329151137-27723ad26ef9/go.mod h1:rWs4Z12d1Zbf19rlsn0nurr75KqhYp52EAGGxTbBhNk=\ngithub.com/gobuffalo/genny v0.0.0-20190403191548-3ca520ef0d9e/go.mod h1:80lIj3kVJWwOrXWWMRzzdhW3DsrdjILVil/SFKBzF28=\ngithub.com/gobuffalo/genny v0.1.0/go.mod h1:XidbUqzak3lHdS//TPu2OgiFB+51Ur5f7CSnXZ/JDvo=\ngithub.com/gobuffalo/genny v0.1.1/go.mod h1:5TExbEyY48pfunL4QSXxlDOmdsD44RRq4mVZ0Ex28Xk=\ngithub.com/gobuffalo/gitgen v0.0.0-20190315122116-cc086187d211/go.mod h1:vEHJk/E9DmhejeLeNt7UVvlSGv3ziL+djtTr3yyzcOw=\ngithub.com/gobuffalo/gogen v0.0.0-20190315121717-8f38393713f5/go.mod h1:V9QVDIxsgKNZs6L2IYiGR8datgMhB577vzTDqypH360=\ngithub.com/gobuffalo/gogen v0.1.0/go.mod h1:8NTelM5qd8RZ15VjQTFkAW6qOMx5wBbW4dSCS3BY8gg=\ngithub.com/gobuffalo/gogen v0.1.1/go.mod h1:y8iBtmHmGc4qa3urIyo1shvOD8JftTtfcKi+71xfDNE=\ngithub.com/gobuffalo/logger v0.0.0-20190315122211-86e12af44bc2/go.mod h1:QdxcLw541hSGtBnhUc4gaNIXRjiDppFGaDqzbrBd3v8=\ngithub.com/gobuffalo/mapi v1.0.1/go.mod h1:4VAGh89y6rVOvm5A8fKFxYG+wIW6LO1FMTG9hnKStFc=\ngithub.com/gobuffalo/mapi v1.0.2/go.mod h1:4VAGh89y6rVOvm5A8fKFxYG+wIW6LO1FMTG9hnKStFc=\ngithub.com/gobuffalo/packd v0.0.0-20190315124812-a385830c7fc0/go.mod h1:M2Juc+hhDXf/PnmBANFCqx4DM3wRbgDvnVWeG2RIxq4=\ngithub.com/gobuffalo/packd v0.1.0/go.mod h1:M2Juc+hhDXf/PnmBANFCqx4DM3wRbgDvnVWeG2RIxq4=\ngithub.com/gobuffalo/packr/v2 v2.0.9/go.mod h1:emmyGweYTm6Kdper+iywB6YK5YzuKchGtJQZ0Odn4pQ=\ngithub.com/gobuffalo/packr/v2 v2.2.0/go.mod h1:CaAwI0GPIAv+5wKLtv8Afwl+Cm78K/I/VCm/3ptBN+0=\ngithub.com/gobuffalo/syncx v0.0.0-20190224160051-33c29581e754/go.mod h1:HhnNqWY95UYwwW3uSASeV7vtgYkT2t16hJgV3AEPUpw=\ngithub.com/gobwas/glob v0.2.3/go.mod h1:d3Ez4x06l9bZtSvzIay5+Yzi0fmZzPgnTbPcKjJAkT8=\ngithub.com/goccy/go-json v0.4.8/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/goccy/go-json v0.7.8/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/goccy/go-json v0.7.9 h1:mSp3uo1tr6MXQTYopSNhHTUnJhd2zQ4Yk+HdJZP+ZRY=\ngithub.com/goccy/go-json v0.7.9/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gofrs/flock v0.0.0-20190320160742-5135e617513b/go.mod h1:F1TvTiK9OcQqauNUHlbJvyl9Qa1QvF/gOUDKA14jxHU=\ngithub.com/gofrs/uuid v3.2.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/gogo/googleapis v1.1.0/go.mod h1:gf4bu3Q80BeJ6H1S1vYPm8/ELATdvryBaNFGgqEef3s=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.2.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=\ngithub.com/gogo/protobuf v1.2.2-0.20190723190241-65acae22fc9d/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang-jwt/jwt v3.2.1+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=\ngithub.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\ngithub.com/golang-jwt/jwt/v4 v4.1.0 h1:XUgk2Ex5veyVFVeLm0xhusUTQybEbexJXrvPNOKkSY0=\ngithub.com/golang-jwt/jwt/v4 v4.1.0/go.mod h1:/xlHOz8bRuivTWchD4jCa+NbatV+wEUSzwAxVc6locg=\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20160516000752-02826c3e7903/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20190129154638-5b532d6fd5ef/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e h1:1r7pUrabqp18hOBcwBwiTsbnFeTZHV9eER/QT5JVZxY=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=\ngithub.com/golang/mock v1.4.0/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.1/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.3/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=\ngithub.com/golang/mock v1.4.4/go.mod h1:l3mdAwkq5BuhzHwde/uurv3sEJeZMXNpwsxVWU71h+4=\ngithub.com/golang/mock v1.5.0/go.mod h1:CWnOUgYIOo4TcNZ0wHX3YZCqsaM1I1Jvs6v3mP3KVu8=\ngithub.com/golang/mock v1.6.0/go.mod h1:p6yTPP+5HYm5mzsMV8JkE6ZKdX+/wYM6Hr+LicevLPs=\ngithub.com/golang/protobuf v0.0.0-20161109072736-4bd1920723d7/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.1.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.4/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.1/go.mod h1:DopwsBzvsk0Fs44TXzsVbJyPhcCPeIwnvohx4u74HPM=\ngithub.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/snappy v0.0.0-20180518054509-2e65f85255db/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/golang/snappy v0.0.3 h1:fHPg5GQYlCeLIPB9BZqMVR5nR9A+IM5zcgeTdjMYmLA=\ngithub.com/golang/snappy v0.0.3/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/golangci/check v0.0.0-20180506172741-cfe4005ccda2/go.mod h1:k9Qvh+8juN+UKMCS/3jFtGICgW8O96FVaZsaxdzDkR4=\ngithub.com/golangci/dupl v0.0.0-20180902072040-3e9179ac440a/go.mod h1:ryS0uhF+x9jgbj/N71xsEqODy9BN81/GonCZiOzirOk=\ngithub.com/golangci/errcheck v0.0.0-20181223084120-ef45e06d44b6/go.mod h1:DbHgvLiFKX1Sh2T1w8Q/h4NAI8MHIpzCdnBUDTXU3I0=\ngithub.com/golangci/go-misc v0.0.0-20180628070357-927a3d87b613/go.mod h1:SyvUF2NxV+sN8upjjeVYr5W7tyxaT1JVtvhKhOn2ii8=\ngithub.com/golangci/goconst v0.0.0-20180610141641-041c5f2b40f3/go.mod h1:JXrF4TWy4tXYn62/9x8Wm/K/dm06p8tCKwFRDPZG/1o=\ngithub.com/golangci/gocyclo v0.0.0-20180528134321-2becd97e67ee/go.mod h1:ozx7R9SIwqmqf5pRP90DhR2Oay2UIjGuKheCBCNwAYU=\ngithub.com/golangci/gocyclo v0.0.0-20180528144436-0a533e8fa43d/go.mod h1:ozx7R9SIwqmqf5pRP90DhR2Oay2UIjGuKheCBCNwAYU=\ngithub.com/golangci/gofmt v0.0.0-20190930125516-244bba706f1a/go.mod h1:9qCChq59u/eW8im404Q2WWTrnBUQKjpNYKMbU4M7EFU=\ngithub.com/golangci/golangci-lint v1.23.7/go.mod h1:g/38bxfhp4rI7zeWSxcdIeHTQGS58TCak8FYcyCmavQ=\ngithub.com/golangci/golangci-lint v1.27.0/go.mod h1:+eZALfxIuthdrHPtfM7w/R3POJLjHDfJJw8XZl9xOng=\ngithub.com/golangci/ineffassign v0.0.0-20190609212857-42439a7714cc/go.mod h1:e5tpTHCfVze+7EpLEozzMB3eafxo2KT5veNg1k6byQU=\ngithub.com/golangci/lint-1 v0.0.0-20191013205115-297bf364a8e0/go.mod h1:66R6K6P6VWk9I95jvqGxkqJxVWGFy9XlDwLwVz1RCFg=\ngithub.com/golangci/maligned v0.0.0-20180506175553-b1d89398deca/go.mod h1:tvlJhZqDe4LMs4ZHD0oMUlt9G2LWuDGoisJTBzLMV9o=\ngithub.com/golangci/misspell v0.0.0-20180809174111-950f5d19e770/go.mod h1:dEbvlSfYbMQDtrpRMQU675gSDLDNa8sCPPChZ7PhiVA=\ngithub.com/golangci/misspell v0.3.5/go.mod h1:dEbvlSfYbMQDtrpRMQU675gSDLDNa8sCPPChZ7PhiVA=\ngithub.com/golangci/prealloc v0.0.0-20180630174525-215b22d4de21/go.mod h1:tf5+bzsHdTM0bsB7+8mt0GUMvjCgwLpTapNZHU8AajI=\ngithub.com/golangci/revgrep v0.0.0-20180526074752-d9c87f5ffaf0/go.mod h1:qOQCunEYvmd/TLamH+7LlVccLvUH5kZNhbCgTHoBbp4=\ngithub.com/golangci/revgrep v0.0.0-20180812185044-276a5c0a1039/go.mod h1:qOQCunEYvmd/TLamH+7LlVccLvUH5kZNhbCgTHoBbp4=\ngithub.com/golangci/unconvert v0.0.0-20180507085042-28b1c447d1f4/go.mod h1:Izgrg8RkN3rCIMLGE9CyYmU9pY2Jer6DgANEnZ/L/cQ=\ngithub.com/gomodule/redigo v1.8.5 h1:nRAxCa+SVsyjSBrtZmG/cqb6VbTmuRzpg/PoTFlpumc=\ngithub.com/gomodule/redigo v1.8.5/go.mod h1:P9dn9mFrCBvWhGE1wpxx6fgq7BAeLBk+UUUzlpkBYO0=\ngithub.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.4.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6 h1:BKbKCqvP6I+rmFHt06ZmyQtvB8xAkWdhFyr0ZUNZcxQ=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-containerregistry v0.1.2/go.mod h1:GPivBPgdAyd2SU+vf6EpsgOtWDuPqjW0hJZt4rNdTZ4=\ngithub.com/google/go-github/v28 v28.1.1/go.mod h1:bsqJWQX05omyWVmc00nEUql9mhQyv38lDZ8kPZcQVoM=\ngithub.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=\ngithub.com/google/go-replayers/grpcreplay v0.1.0/go.mod h1:8Ig2Idjpr6gifRd6pNVggX6TC1Zw6Jx74AKp7QNH2QE=\ngithub.com/google/go-replayers/httpreplay v0.1.0/go.mod h1:YKZViNhiGgqdBlUbI2MwGpq4pXxNmhJLPHQ7cv2b5no=\ngithub.com/google/gofuzz v0.0.0-20161122191042-44d81051d367/go.mod h1:HP5RmnzzSNb993RKQDq4+1A4ia9nllfqcQFTQJedwGI=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/gofuzz v1.1.0 h1:Hsa8mG0dQ46ij8Sl2AYJDUv1oA9/d6Vk+3LG99Oe02g=\ngithub.com/google/gofuzz v1.1.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/martian v2.1.1-0.20190517191504-25dcb96d9e51+incompatible h1:xmapqc1AyLoB+ddYT6r04bD9lIjlOqGaREovi0SzFaE=\ngithub.com/google/martian v2.1.1-0.20190517191504-25dcb96d9e51+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/martian/v3 v3.0.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=\ngithub.com/google/martian/v3 v3.1.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=\ngithub.com/google/martian/v3 v3.2.1 h1:d8MncMlErDFTwQGBK1xhv026j9kqhvw1Qv9IbWT1VLQ=\ngithub.com/google/martian/v3 v3.2.1/go.mod h1:oBOf6HBosgwRXnUGWUB05QECsc6uvmMiJ3+6W4l/CUk=\ngithub.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20191218002539-d4f498aebedc/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200212024743-f11f1df84d12/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200229191704-1ebb73c60ed3/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200430221834-fc25d7d30c6d/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200507031123-427632fa3b1c/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20200708004538-1a94d8640e99/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=\ngithub.com/google/pprof v0.0.0-20201023163331-3e6fc7fc9c4c/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20201203190320-1bf35d6f28c2/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210122040257-d980be63207e/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210226084205-cbba55b83ad5/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210601050228-01bbb1931b22/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210609004039-a478d1d731e9/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/pprof v0.0.0-20210720184732-4bb14d4b1be1/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/rpmpack v0.0.0-20191226140753-aa36bfddb3a0/go.mod h1:RaTPr0KUf2K7fnZYLNDrr8rxAamWs3iNywJLtQ2AzBg=\ngithub.com/google/subcommands v1.0.1/go.mod h1:ZjhPrFU+Olkh9WazFPsl27BQ4UPiG37m3yTrtFlrHVk=\ngithub.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=\ngithub.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/wire v0.3.0/go.mod h1:i1DMg/Lu8Sz5yYl25iOdmc5CT5qusaa+zmRWs16741s=\ngithub.com/google/wire v0.4.0/go.mod h1:ngWDr9Qvq3yZA10YrxfyGELY/AFWGVpy9c1LTRi1EoU=\ngithub.com/googleapis/gax-go v2.0.2+incompatible h1:silFMLAnr330+NRuag/VjIGF7TLp/LBrV2CJKFLWEww=\ngithub.com/googleapis/gax-go v2.0.2+incompatible/go.mod h1:SFVmujtThgffbyetf+mdk2eWhX2bMyUtNHzFKcPA9HY=\ngithub.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=\ngithub.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=\ngithub.com/googleapis/gax-go/v2 v2.1.0/go.mod h1:Q3nei7sK6ybPYH7twZdmQpAd1MKb7pfu6SK+H1/DsU0=\ngithub.com/googleapis/gax-go/v2 v2.1.1 h1:dp3bWCh+PPO1zjRRiCSczJav13sBvG4UhNyVTa1KqdU=\ngithub.com/googleapis/gax-go/v2 v2.1.1/go.mod h1:hddJymUZASv3XPyGkUpKj8pPO47Rmb0eJc8R6ouapiM=\ngithub.com/googleapis/gnostic v0.0.0-20170729233727-0c5108395e2d/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=\ngithub.com/googleapis/gnostic v0.1.0/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=\ngithub.com/googleapis/gnostic v0.2.0/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=\ngithub.com/googleapis/gnostic v0.2.2/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=\ngithub.com/googleapis/gnostic v0.4.1/go.mod h1:LRhVm6pbyptWbWbuZ38d1eyptfvIytN3ir6b65WBswg=\ngithub.com/googleapis/gnostic v0.5.1 h1:A8Yhf6EtqTv9RMsU6MQTyrtV1TjWlR6xU9BsZIwuTCM=\ngithub.com/googleapis/gnostic v0.5.1/go.mod h1:6U4PtQXGIEt/Z3h5MAT7FNofLnw9vXk2cUuW7uA/OeU=\ngithub.com/gookit/color v1.2.4/go.mod h1:AhIE+pS6D4Ql0SQWbBeXPHw7gY0/sjHoA4s/n1KB7xg=\ngithub.com/gophercloud/gophercloud v0.1.0/go.mod h1:vxM41WHh5uqHVBMZHzuwNOHh8XEoIEcSTewFxm1c5g8=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gopherjs/gopherjs v0.0.0-20190328170749-bb2674552d8f/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/goreleaser/goreleaser v0.136.0/go.mod h1:wiKrPUeSNh6Wu8nUHxZydSOVQ/OZvOaO7DTtFqie904=\ngithub.com/goreleaser/nfpm v1.2.1/go.mod h1:TtWrABZozuLOttX2uDlYyECfQX7x5XYkVxhjYcR6G9w=\ngithub.com/goreleaser/nfpm v1.3.0/go.mod h1:w0p7Kc9TAUgWMyrub63ex3M2Mgw88M4GZXoTq5UCb40=\ngithub.com/gorilla/context v1.1.1/go.mod h1:kBGZzfjB9CEq2AlWe17Uuf7NDRt0dE0s8S51q0aT7Yg=\ngithub.com/gorilla/mux v1.6.2/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gorilla/mux v1.7.3/go.mod h1:1lud6UwP+6orDFRuTfBEV8e9/aOM/c4fVVCaMa2zaAs=\ngithub.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/gorilla/securecookie v1.1.1 h1:miw7JPhV+b/lAHSXz4qd/nN9jRiAFV5FwjeKyCS8BvQ=\ngithub.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=\ngithub.com/gorilla/sessions v1.2.0/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\ngithub.com/gorilla/sessions v1.2.1 h1:DHd3rPN5lE3Ts3D8rKkQ8x/0kqfeNmBAaiSi+o7FsgI=\ngithub.com/gorilla/sessions v1.2.1/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\ngithub.com/gorilla/websocket v0.0.0-20170926233335-4201258b820c/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=\ngithub.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=\ngithub.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\ngithub.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/gostaticanalysis/analysisutil v0.0.0-20190318220348-4088753ea4d3/go.mod h1:eEOZF4jCKGi+aprrirO9e7WKB3beBRtWgqGunKl6pKE=\ngithub.com/gostaticanalysis/analysisutil v0.0.3/go.mod h1:eEOZF4jCKGi+aprrirO9e7WKB3beBRtWgqGunKl6pKE=\ngithub.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=\ngithub.com/grpc-ecosystem/go-grpc-middleware v1.0.0/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=\ngithub.com/grpc-ecosystem/go-grpc-middleware v1.0.1-0.20190118093823-f849b5445de4/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=\ngithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=\ngithub.com/grpc-ecosystem/grpc-gateway v1.8.5/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/grpc-ecosystem/grpc-gateway v1.9.0/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/grpc-ecosystem/grpc-gateway v1.9.2/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/grpc-ecosystem/grpc-gateway v1.9.5/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=\ngithub.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=\ngithub.com/hashicorp/consul/api v1.1.0/go.mod h1:VmuI/Lkw1nC05EYQWNKwWGbkg+FbDBtguAZLlVdkD9Q=\ngithub.com/hashicorp/consul/api v1.3.0/go.mod h1:MmDNSzIMUjNpY/mQ398R4bk2FnqQLoPndWW5VkKPlCE=\ngithub.com/hashicorp/consul/sdk v0.1.1/go.mod h1:VKf9jXwCTEY1QZP2MOLRhb5i/I/ssyNV1vwHyQBF0x8=\ngithub.com/hashicorp/consul/sdk v0.3.0/go.mod h1:VKf9jXwCTEY1QZP2MOLRhb5i/I/ssyNV1vwHyQBF0x8=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-cleanhttp v0.5.1/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-hclog v0.0.0-20180709165350-ff2cf002a8dd/go.mod h1:9bjs9uLqI8l75knNv3lV1kA55veR+WUPSiKIWcQHudI=\ngithub.com/hashicorp/go-hclog v0.8.0/go.mod h1:5CU+agLiy3J7N7QjHK5d05KxGsuXiQLrjA0H7acj2lQ=\ngithub.com/hashicorp/go-hclog v0.9.1/go.mod h1:5CU+agLiy3J7N7QjHK5d05KxGsuXiQLrjA0H7acj2lQ=\ngithub.com/hashicorp/go-hclog v0.9.2/go.mod h1:5CU+agLiy3J7N7QjHK5d05KxGsuXiQLrjA0H7acj2lQ=\ngithub.com/hashicorp/go-hclog v0.14.1 h1:nQcJDQwIAGnmoUWp8ubocEX40cCml/17YkF6csQLReU=\ngithub.com/hashicorp/go-hclog v0.14.1/go.mod h1:whpDNt7SSdeAju8AWKIWsul05p54N/39EeqMAyrmvFQ=\ngithub.com/hashicorp/go-immutable-radix v1.0.0 h1:AKDB1HM5PWEA7i4nhcpwOrO2byshxBjXVn/J/3+z5/0=\ngithub.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-msgpack v0.5.3/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=\ngithub.com/hashicorp/go-msgpack v0.5.5/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=\ngithub.com/hashicorp/go-msgpack v1.1.5 h1:9byZdVjKTe5mce63pRVNP1L7UAmdHOTEMGehn6KvJWs=\ngithub.com/hashicorp/go-msgpack v1.1.5/go.mod h1:gWVc3sv/wbDmR3rQsj1CAktEZzoz1YNK9NfGLXJ69/4=\ngithub.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/hashicorp/go-plugin v1.0.1/go.mod h1:++UyYGoz3o5w9ZzAdZxtQKrWWP+iqPBn3cQptSMzBuY=\ngithub.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=\ngithub.com/hashicorp/go-retryablehttp v0.5.4/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=\ngithub.com/hashicorp/go-retryablehttp v0.6.4/go.mod h1:vAew36LZh98gCBJNLH42IQ1ER/9wtLZZ8meHqQvEYWY=\ngithub.com/hashicorp/go-retryablehttp v0.6.6/go.mod h1:vAew36LZh98gCBJNLH42IQ1ER/9wtLZZ8meHqQvEYWY=\ngithub.com/hashicorp/go-rootcerts v1.0.0/go.mod h1:K6zTfqpRlCUIjkwsN4Z+hiSfzSTQa6eBIzfwKfwNnHU=\ngithub.com/hashicorp/go-rootcerts v1.0.1/go.mod h1:pqUvnprVnM5bf7AOirdbb01K4ccR319Vf4pU3K5EGc8=\ngithub.com/hashicorp/go-sockaddr v1.0.0/go.mod h1:7Xibr9yA9JjQq1JpNB2Vw7kxv8xerXegt+ozgdvDeDU=\ngithub.com/hashicorp/go-sockaddr v1.0.2/go.mod h1:rB4wwRAUzs07qva3c5SdrY/NEtAUjGlgmH/UkBUC97A=\ngithub.com/hashicorp/go-syslog v1.0.0/go.mod h1:qPfqrKkXGihmCqbJM2mZgkZGvKG1dFdvsLplgctolz4=\ngithub.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.1/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-uuid v1.0.2 h1:cfejS+Tpcp13yd5nYHWDI6qVCny6wyX2Mt5SGur2IGE=\ngithub.com/hashicorp/go-uuid v1.0.2/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/go-version v1.1.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/go-version v1.2.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/go-version v1.3.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/go.net v0.0.1/go.mod h1:hjKkEWcCURg++eb33jQU7oqQcI9XDCnUzHA0oac0k90=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.3/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=\ngithub.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=\ngithub.com/hashicorp/mdns v1.0.0/go.mod h1:tL+uN++7HEJ6SQLQ2/p+z2pH24WQKWjBPkE0mNTz8vQ=\ngithub.com/hashicorp/memberlist v0.1.3/go.mod h1:ajVTdAv/9Im8oMAAj5G31PhhMCZJV2pPBoIllUwCN7I=\ngithub.com/hashicorp/raft v1.2.0 h1:mHzHIrF0S91d3A7RPBvuqkgB4d/7oFJZyvf1Q4m7GA0=\ngithub.com/hashicorp/raft v1.2.0/go.mod h1:vPAJM8Asw6u8LxC3eJCUZmRP/E4QmUGE1R7g7k8sG/8=\ngithub.com/hashicorp/raft-boltdb v0.0.0-20171010151810-6e5ba93211ea/go.mod h1:pNv7Wc3ycL6F5oOWn+tPGo2gWD4a5X+yp/ntwdKLjRk=\ngithub.com/hashicorp/serf v0.8.2/go.mod h1:6hOLApaqBFA1NXqRQAsxw9QxuDEvNxSQRwA/JwenrHc=\ngithub.com/hashicorp/vault/api v1.0.4/go.mod h1:gDcqh3WGcR1cpF5AJz/B1UFheUEneMoIospckxBxk6Q=\ngithub.com/hashicorp/vault/sdk v0.1.13/go.mod h1:B+hVj7TpuQY1Y/GPbCpffmgd+tSEwvhkWnjtSYCaS2M=\ngithub.com/hashicorp/yamux v0.0.0-20180604194846-3520598351bb/go.mod h1:+NfK9FKeTrX5uv1uIXGdwYDTeHna2qgaIlx54MXqjAM=\ngithub.com/hashicorp/yamux v0.0.0-20181012175058-2f1d1f20f75d/go.mod h1:+NfK9FKeTrX5uv1uIXGdwYDTeHna2qgaIlx54MXqjAM=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/hudl/fargo v1.3.0/go.mod h1:y3CKSmjA+wD2gak7sUSXTAoopbhU08POFhmITJgmKTg=\ngithub.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/imdario/mergo v0.3.5/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/imdario/mergo v0.3.7/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/imdario/mergo v0.3.8/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/imdario/mergo v0.3.9/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=\ngithub.com/imdario/mergo v0.3.10/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=\ngithub.com/inconshreveable/mousetrap v1.0.0 h1:Z8tu5sraLXCXIcARxBp/8cbvlwVa7Z1NHg9XEKhtSvM=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/influxdata/influxdb1-client v0.0.0-20191209144304-8bf82d3c094d/go.mod h1:qj24IKcXYK6Iy9ceXlo3Tc+vtHo9lIhSX5JddghvEPo=\ngithub.com/jackc/chunkreader v1.0.0 h1:4s39bBR8ByfqH+DKm8rQA3E1LHZWB9XWcrz8fqaZbe0=\ngithub.com/jackc/chunkreader v1.0.0/go.mod h1:RT6O25fNZIuasFJRyZ4R/Y2BbhasbmZXF9QQ7T3kePo=\ngithub.com/jackc/chunkreader/v2 v2.0.0/go.mod h1:odVSm741yZoC3dpHEUXIqA9tQRhFrgOHwnPIn9lDKlk=\ngithub.com/jackc/chunkreader/v2 v2.0.1 h1:i+RDz65UE+mmpjTfyz0MoVTnzeYxroil2G82ki7MGG8=\ngithub.com/jackc/chunkreader/v2 v2.0.1/go.mod h1:odVSm741yZoC3dpHEUXIqA9tQRhFrgOHwnPIn9lDKlk=\ngithub.com/jackc/pgconn v0.0.0-20190420214824-7e0022ef6ba3/go.mod h1:jkELnwuX+w9qN5YIfX0fl88Ehu4XC3keFuOJJk9pcnA=\ngithub.com/jackc/pgconn v0.0.0-20190824142844-760dd75542eb/go.mod h1:lLjNuW/+OfW9/pnVKPazfWOgNfH2aPem8YQ7ilXGvJE=\ngithub.com/jackc/pgconn v0.0.0-20190831204454-2fabfa3c18b7/go.mod h1:ZJKsE/KZfsUgOEh9hBm+xYTstcNHg7UPMVJqRfQxq4s=\ngithub.com/jackc/pgconn v1.4.0/go.mod h1:Y2O3ZDF0q4mMacyWV3AstPJpeHXWGEetiFttmq5lahk=\ngithub.com/jackc/pgconn v1.5.0/go.mod h1:QeD3lBfpTFe8WUnPZWN5KY/mB8FGMIYRdd8P8Jr0fAI=\ngithub.com/jackc/pgconn v1.5.1-0.20200601181101-fa742c524853/go.mod h1:QeD3lBfpTFe8WUnPZWN5KY/mB8FGMIYRdd8P8Jr0fAI=\ngithub.com/jackc/pgconn v1.7.0 h1:pwjzcYyfmz/HQOQlENvG1OcDqauTGaqlVahq934F0/U=\ngithub.com/jackc/pgconn v1.7.0/go.mod h1:sF/lPpNEMEOp+IYhyQGdAvrG20gWf6A1tKlr0v7JMeA=\ngithub.com/jackc/pgio v1.0.0 h1:g12B9UwVnzGhueNavwioyEEpAmqMe1E/BN9ES+8ovkE=\ngithub.com/jackc/pgio v1.0.0/go.mod h1:oP+2QK2wFfUWgr+gxjoBH9KGBb31Eio69xUb0w5bYf8=\ngithub.com/jackc/pgmock v0.0.0-20190831213851-13a1b77aafa2/go.mod h1:fGZlG77KXmcq05nJLRkk0+p82V8B8Dw8KN2/V9c/OAE=\ngithub.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=\ngithub.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=\ngithub.com/jackc/pgproto3 v1.1.0 h1:FYYE4yRw+AgI8wXIinMlNjBbp/UitDJwfj5LqqewP1A=\ngithub.com/jackc/pgproto3 v1.1.0/go.mod h1:eR5FA3leWg7p9aeAqi37XOTgTIbkABlvcPB3E5rlc78=\ngithub.com/jackc/pgproto3/v2 v2.0.0-alpha1.0.20190420180111-c116219b62db/go.mod h1:bhq50y+xrl9n5mRYyCBFKkpRVTLYJVWeCc+mEAI3yXA=\ngithub.com/jackc/pgproto3/v2 v2.0.0-alpha1.0.20190609003834-432c2951c711/go.mod h1:uH0AWtUmuShn0bcesswc4aBTWGvw0cAxIJp+6OB//Wg=\ngithub.com/jackc/pgproto3/v2 v2.0.0-rc3/go.mod h1:ryONWYqW6dqSg1Lw6vXNMXoBJhpzvWKnT95C46ckYeM=\ngithub.com/jackc/pgproto3/v2 v2.0.0-rc3.0.20190831210041-4c03ce451f29/go.mod h1:ryONWYqW6dqSg1Lw6vXNMXoBJhpzvWKnT95C46ckYeM=\ngithub.com/jackc/pgproto3/v2 v2.0.1/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgproto3/v2 v2.0.5 h1:NUbEWPmCQZbMmYlTjVoNPhc0CfnYyz2bfUAh6A5ZVJM=\ngithub.com/jackc/pgproto3/v2 v2.0.5/go.mod h1:WfJCnwN3HIg9Ish/j3sgWXnAfK8A9Y0bwXYU5xKaEdA=\ngithub.com/jackc/pgservicefile v0.0.0-20200307190119-3430c5407db8/go.mod h1:vsD4gTJCa9TptPL8sPkXrLZ+hDuNrZCnj29CQpr4X1E=\ngithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b h1:C8S2+VttkHFdOOCXJe+YGfa4vHYwlt4Zx+IVXQ97jYg=\ngithub.com/jackc/pgservicefile v0.0.0-20200714003250-2b9c44734f2b/go.mod h1:vsD4gTJCa9TptPL8sPkXrLZ+hDuNrZCnj29CQpr4X1E=\ngithub.com/jackc/pgtype v0.0.0-20190421001408-4ed0de4755e0/go.mod h1:hdSHsc1V01CGwFsrv11mJRHWJ6aifDLfdV3aVjFF0zg=\ngithub.com/jackc/pgtype v0.0.0-20190824184912-ab885b375b90/go.mod h1:KcahbBH1nCMSo2DXpzsoWOAfFkdEtEJpPbVLq8eE+mc=\ngithub.com/jackc/pgtype v0.0.0-20190828014616-a8802b16cc59/go.mod h1:MWlu30kVJrUS8lot6TQqcg7mtthZ9T0EoIBFiJcmcyw=\ngithub.com/jackc/pgtype v1.2.0/go.mod h1:5m2OfMh1wTK7x+Fk952IDmI4nw3nPrvtQdM0ZT4WpC0=\ngithub.com/jackc/pgtype v1.3.0/go.mod h1:b0JqxHvPmljG+HQ5IsvQ0yqeSi4nGcDTVjFoiLDb0Ik=\ngithub.com/jackc/pgtype v1.3.1-0.20200510190516-8cd94a14c75a/go.mod h1:vaogEUkALtxZMCH411K+tKzNpwzCKU+AnPzBKZ+I+Po=\ngithub.com/jackc/pgtype v1.3.1-0.20200606141011-f6355165a91c/go.mod h1:cvk9Bgu/VzJ9/lxTO5R5sf80p0DiucVtN7ZxvaC4GmQ=\ngithub.com/jackc/pgtype v1.3.1-0.20200612023650-09efc3839047/go.mod h1:JCULISAZBFGrHaOXIIFiyfzW5VY0GRitRr8NeJsrdig=\ngithub.com/jackc/pgtype v1.5.0 h1:jzBqRk2HFG2CV4AIwgCI2PwTgm6UUoCAK2ofHHRirtc=\ngithub.com/jackc/pgtype v1.5.0/go.mod h1:JCULISAZBFGrHaOXIIFiyfzW5VY0GRitRr8NeJsrdig=\ngithub.com/jackc/pgx v3.6.2+incompatible h1:2zP5OD7kiyR3xzRYMhOcXVvkDZsImVXfj+yIyTQf3/o=\ngithub.com/jackc/pgx v3.6.2+incompatible/go.mod h1:0ZGrqGqkRlliWnWB4zKnWtjbSWbGkVEFm4TeybAXq+I=\ngithub.com/jackc/pgx/v4 v4.0.0-20190420224344-cc3461e65d96/go.mod h1:mdxmSJJuR08CZQyj1PVQBHy9XOp5p8/SHH6a0psbY9Y=\ngithub.com/jackc/pgx/v4 v4.0.0-20190421002000-1b8f0016e912/go.mod h1:no/Y67Jkk/9WuGR0JG/JseM9irFbnEPbuWV2EELPNuM=\ngithub.com/jackc/pgx/v4 v4.0.0-pre1.0.20190824185557-6972a5742186/go.mod h1:X+GQnOEnf1dqHGpw7JmHqHc1NxDoalibchSk9/RWuDc=\ngithub.com/jackc/pgx/v4 v4.5.0/go.mod h1:EpAKPLdnTorwmPUUsqrPxy5fphV18j9q3wrfRXgo+kA=\ngithub.com/jackc/pgx/v4 v4.6.0/go.mod h1:vPh43ZzxijXUVJ+t/EmXBtFmbFVO72cuneCT9oAlxAg=\ngithub.com/jackc/pgx/v4 v4.6.1-0.20200510190926-94ba730bb1e9/go.mod h1:t3/cdRQl6fOLDxqtlyhe9UWgfIi9R8+8v8GKV5TRA/o=\ngithub.com/jackc/pgx/v4 v4.6.1-0.20200606145419-4e5062306904/go.mod h1:ZDaNWkt9sW1JMiNn0kdYBaLelIhw7Pg4qd+Vk6tw7Hg=\ngithub.com/jackc/pgx/v4 v4.9.0 h1:6STjDqppM2ROy5p1wNDcsC7zJTjSHeuCsguZmXyzx7c=\ngithub.com/jackc/pgx/v4 v4.9.0/go.mod h1:MNGWmViCgqbZck9ujOOBN63gK9XVGILXWCvKLGKmnms=\ngithub.com/jackc/puddle v0.0.0-20190413234325-e4ced69a3a2b/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v0.0.0-20190608224051-11cab39313c9/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.1.0/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.1.1/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jackc/puddle v1.1.2 h1:mpQEXihFnWGDy6X98EOTh81JYuxn7txby8ilJ3iIPGM=\ngithub.com/jackc/puddle v1.1.2/go.mod h1:m4B5Dj62Y0fbyuIc15OsIqK0+JU8nkqQjsgx7dvjSWk=\ngithub.com/jarcoal/httpmock v1.0.5/go.mod h1:ATjnClrvW/3tijVmpL/va5Z3aAyGvqU3gCT8nX0Txik=\ngithub.com/jcmturner/aescts/v2 v2.0.0 h1:9YKLH6ey7H4eDBXW8khjYslgyqG2xZikXP0EQFKrle8=\ngithub.com/jcmturner/aescts/v2 v2.0.0/go.mod h1:AiaICIRyfYg35RUkr8yESTqvSy7csK90qZ5xfvvsoNs=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0 h1:lltnkeZGL0wILNvrNiVCR6Ro5PGU/SeBvVO/8c/iPbo=\ngithub.com/jcmturner/dnsutils/v2 v2.0.0/go.mod h1:b0TnjGOvI/n42bZa+hmXL+kFJZsFT7G4t3HTlQ184QM=\ngithub.com/jcmturner/gofork v1.0.0 h1:J7uCkflzTEhUZ64xqKnkDxq3kzc96ajM1Gli5ktUem8=\ngithub.com/jcmturner/gofork v1.0.0/go.mod h1:MK8+TM0La+2rjBD4jE12Kj1pCCxK7d2LK/UM3ncEo0o=\ngithub.com/jcmturner/goidentity/v6 v6.0.1 h1:VKnZd2oEIMorCTsFBnJWbExfNN7yZr3EhJAxwOkZg6o=\ngithub.com/jcmturner/goidentity/v6 v6.0.1/go.mod h1:X1YW3bgtvwAXju7V3LCIMpY0Gbxyjn/mY9zx4tFonSg=\ngithub.com/jcmturner/gokrb5/v8 v8.4.1/go.mod h1:T1hnNppQsBtxW0tCHMHTkAt8n/sABdzZgZdoFrZaZNM=\ngithub.com/jcmturner/gokrb5/v8 v8.4.2 h1:6ZIM6b/JJN0X8UM43ZOM6Z4SJzla+a/u7scXFJzodkA=\ngithub.com/jcmturner/gokrb5/v8 v8.4.2/go.mod h1:sb+Xq/fTY5yktf/VxLsE3wlfPqQjp0aWNYyvBVK62bc=\ngithub.com/jcmturner/rpc/v2 v2.0.2/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=\ngithub.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=\ngithub.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=\ngithub.com/jedib0t/go-pretty v4.3.0+incompatible/go.mod h1:XemHduiw8R651AF9Pt4FwCTKeG3oo7hrHJAoznj9nag=\ngithub.com/jedib0t/go-pretty/v6 v6.0.5/go.mod h1:MTr6FgcfNdnN5wPVBzJ6mhJeDyiF0yBvS2TMXEV/XSU=\ngithub.com/jessevdk/go-flags v1.4.0 h1:4IU2WS7AumrZ/40jfhf4QVDMsQwqA7VEHozFRrGARJA=\ngithub.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=\ngithub.com/jingyugao/rowserrcheck v0.0.0-20191204022205-72ab7603b68a/go.mod h1:xRskid8CManxVta/ALEhJha/pweKBaVG6fWgc0yH25s=\ngithub.com/jinzhu/gorm v1.9.12/go.mod h1:vhTjlKSJUTWNtcbQtrMBFCxy7eXTzeCAzfL5fBZT/Qs=\ngithub.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=\ngithub.com/jinzhu/now v1.0.1/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\ngithub.com/jirfag/go-printf-func-name v0.0.0-20191110105641-45db9963cdd3/go.mod h1:HEWGJkRDzjJY2sqdDwxccsGicWEf9BQOZsq2tV+xzM0=\ngithub.com/jirfag/go-printf-func-name v0.0.0-20200119135958-7558a9eaa5af/go.mod h1:HEWGJkRDzjJY2sqdDwxccsGicWEf9BQOZsq2tV+xzM0=\ngithub.com/jmespath/go-jmespath v0.0.0-20160202185014-0b12d6b521d8/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=\ngithub.com/jmespath/go-jmespath v0.0.0-20180206201540-c2b33e8439af/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=\ngithub.com/jmespath/go-jmespath v0.3.0/go.mod h1:9QtRXoHjLGCJ5IBSaohpXITPlowMeeYCZ7fLUTSywik=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/jmoiron/sqlx v1.2.0/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=\ngithub.com/jmoiron/sqlx v1.2.1-0.20190826204134-d7d95172beb5/go.mod h1:1FEQNm3xlJgrMD+FBdI9+xvCksHtbpVBBw5dYhBSsks=\ngithub.com/joefitzgerald/rainbow-reporter v0.1.0/go.mod h1:481CNgqmVHQZzdIbN52CupLJyoVwB10FQ/IQlF1pdL8=\ngithub.com/joho/godotenv v1.3.0/go.mod h1:7hK45KPybAkOC6peb+G5yklZfMxEjkZhHbwpqxOKXbg=\ngithub.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/jpillora/backoff v0.0.0-20180909062703-3050d21c67d7/go.mod h1:2iMrUgbbvHEiQClaW2NsSzMyGHqN+rDFqY705q49KG0=\ngithub.com/jpillora/backoff v1.0.0/go.mod h1:J/6gKK9jxlEcS3zixgDgUAsiuZ7yrSoa/FX5e0EB2j4=\ngithub.com/json-iterator/go v0.0.0-20180612202835-f2b4162afba3/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.8/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.11/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=\ngithub.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/julienschmidt/httprouter v1.3.0/go.mod h1:JR6WtHb+2LUe8TCKY3cZOxFyyO8IZAc4RVcycCCAKdM=\ngithub.com/karrick/godirwalk v1.8.0/go.mod h1:H5KPZjojv4lE+QYImBI8xVtrBRgYrIVsaRPx4tDPEn4=\ngithub.com/karrick/godirwalk v1.10.3/go.mod h1:RoGL9dQei4vP9ilrpETWE8CLOZ1kiN0LhBygSwrAsHA=\ngithub.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=\ngithub.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/compress v1.4.0/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=\ngithub.com/klauspost/compress v1.4.1/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=\ngithub.com/klauspost/compress v1.9.5/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=\ngithub.com/klauspost/compress v1.11.0/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\ngithub.com/klauspost/compress v1.11.7/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\ngithub.com/klauspost/compress v1.11.12/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\ngithub.com/klauspost/compress v1.12.2/go.mod h1:8dP1Hq4DHOhN9w426knH3Rhby4rFm6D8eO+e+Dq5Gzg=\ngithub.com/klauspost/compress v1.13.5/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=\ngithub.com/klauspost/compress v1.13.6 h1:P76CopJELS0TiO2mebmnzgWaajssP/EszplttgQxcgc=\ngithub.com/klauspost/compress v1.13.6/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=\ngithub.com/klauspost/cpuid v0.0.0-20180405133222-e7e905edc00e/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=\ngithub.com/klauspost/cpuid v1.2.0/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=\ngithub.com/klauspost/cpuid v1.2.3/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=\ngithub.com/klauspost/cpuid v1.3.1 h1:5JNjFYYQrZeKRJ0734q51WCEEn2huer72Dc7K+R/b6s=\ngithub.com/klauspost/cpuid v1.3.1/go.mod h1:bYW4mA6ZgKPob1/Dlai2LviZJO7KGI3uoWLd42rAQw4=\ngithub.com/klauspost/cpuid/v2 v2.0.1/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.0.3/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.0.4/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.0.6/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.0.9 h1:lgaqFMSdTdQYdZ04uHyN2d/eKdOMyi2YLSvlQIBFYa4=\ngithub.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/pgzip v1.2.5 h1:qnWYvvKqedOF2ulHpMG72XQol4ILEJ8k2wwRl/Km8oE=\ngithub.com/klauspost/pgzip v1.2.5/go.mod h1:Ch1tH69qFZu15pkjo5kYi6mth2Zzwzt50oCQKQE9RUs=\ngithub.com/klauspost/readahead v1.3.1 h1:QqXNYvm+VvqYcbrRT4LojUciM0XrznFRIDrbHiJtu/0=\ngithub.com/klauspost/readahead v1.3.1/go.mod h1:AH9juHzNH7xqdqFHrMRSHeH2Ps+vFf+kblDqzPFiLJg=\ngithub.com/klauspost/reedsolomon v1.9.15 h1:g2erWKD2M6rgnPf89fCji6jNlhMKMdXcuNHMW1SYCIo=\ngithub.com/klauspost/reedsolomon v1.9.15/go.mod h1:eqPAcE7xar5CIzcdfwydOEdcmchAKAP/qs14y4GCBOk=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.0/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.2.1 h1:Fmg33tUaq4/8ym9TJN1x7sLJnHVwhP33CNkpYV/7rwI=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/pty v1.1.5/go.mod h1:9r2w37qlBe7rQ6e1fg1S/9xpWHSnaqNdHD3WcMdbPDA=\ngithub.com/kr/pty v1.1.8/go.mod h1:O1sed60cT9XZ5uDucP5qwvh+TE3NnUj51EiZO/lmSfw=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kubernetes-csi/csi-lib-utils v0.7.0/go.mod h1:bze+2G9+cmoHxN6+WyG1qT4MDxgZJMLGwc7V4acPNm0=\ngithub.com/lestrrat-go/backoff/v2 v2.0.7/go.mod h1:rHP/q/r9aT27n24JQLa7JhSQZCKBBOiM/uP402WwN8Y=\ngithub.com/lestrrat-go/backoff/v2 v2.0.8 h1:oNb5E5isby2kiro9AgdHLv5N5tint1AnDVVf2E2un5A=\ngithub.com/lestrrat-go/backoff/v2 v2.0.8/go.mod h1:rHP/q/r9aT27n24JQLa7JhSQZCKBBOiM/uP402WwN8Y=\ngithub.com/lestrrat-go/blackmagic v1.0.0 h1:XzdxDbuQTz0RZZEmdU7cnQxUtFUzgCSPq8RCz4BxIi4=\ngithub.com/lestrrat-go/blackmagic v1.0.0/go.mod h1:TNgH//0vYSs8VXDCfkZLgIrVTTXQELZffUV0tz3MtdQ=\ngithub.com/lestrrat-go/codegen v1.0.0/go.mod h1:JhJw6OQAuPEfVKUCLItpaVLumDGWQznd1VaXrBk9TdM=\ngithub.com/lestrrat-go/codegen v1.0.2/go.mod h1:JhJw6OQAuPEfVKUCLItpaVLumDGWQznd1VaXrBk9TdM=\ngithub.com/lestrrat-go/httpcc v1.0.0 h1:FszVC6cKfDvBKcJv646+lkh4GydQg2Z29scgUfkOpYc=\ngithub.com/lestrrat-go/httpcc v1.0.0/go.mod h1:tGS/u00Vh5N6FHNkExqGGNId8e0Big+++0Gf8MBnAvE=\ngithub.com/lestrrat-go/iter v1.0.1 h1:q8faalr2dY6o8bV45uwrxq12bRa1ezKrB6oM9FUgN4A=\ngithub.com/lestrrat-go/iter v1.0.1/go.mod h1:zIdgO1mRKhn8l9vrZJZz9TUMMFbQbLeTsbqPDrJ/OJc=\ngithub.com/lestrrat-go/jwx v1.2.0/go.mod h1:Tg2uP7bpxEHUDtuWjap/PxroJ4okxGzkQznXiG+a5Dc=\ngithub.com/lestrrat-go/jwx v1.2.7 h1:wO7fEc3PW56wpQBMU5CyRkrk4DVsXxCoJg7oIm5HHE4=\ngithub.com/lestrrat-go/jwx v1.2.7/go.mod h1:bw24IXWbavc0R2RsOtpXL7RtMyP589yZ1+L7kd09ZGA=\ngithub.com/lestrrat-go/option v0.0.0-20210103042652-6f1ecfceda35/go.mod h1:5ZHFbivi4xwXxhxY9XHDe2FHo6/Z7WWmtT7T5nBBp3I=\ngithub.com/lestrrat-go/option v1.0.0 h1:WqAWL8kh8VcSoD6xjSH34/1m8yxluXQbDeKNfvFeEO4=\ngithub.com/lestrrat-go/option v1.0.0/go.mod h1:5ZHFbivi4xwXxhxY9XHDe2FHo6/Z7WWmtT7T5nBBp3I=\ngithub.com/lestrrat-go/pdebug/v3 v3.0.1/go.mod h1:za+m+Ve24yCxTEhR59N7UlnJomWwCiIqbJRmKeiADU4=\ngithub.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.1.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.1.1/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.3.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.4.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/lib/pq v1.8.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/lib/pq v1.9.0 h1:L8nSXQQzAYByakOFMTwpjRoHsMJklur4Gi59b6VivR8=\ngithub.com/lib/pq v1.9.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/lightstep/lightstep-tracer-common/golang/gogo v0.0.0-20190605223551-bc2310a04743/go.mod h1:qklhhLq1aX+mtWk9cPHPzaBjWImj5ULL6C7HFJtXQMM=\ngithub.com/lightstep/lightstep-tracer-go v0.18.1/go.mod h1:jlF1pusYV4pidLvZ+XD0UBX0ZE6WURAspgAczcDHrL4=\ngithub.com/logrusorgru/aurora v0.0.0-20181002194514-a7b3b318ed4e/go.mod h1:7rIyQOR62GCctdiQpZ/zOJlFyk6y+94wXzv6RNZgaR4=\ngithub.com/lyft/protoc-gen-validate v0.0.13/go.mod h1:XbGvPuh87YZc5TdIa2/I4pLk0QoUACkjt2znoq26NVQ=\ngithub.com/magefile/mage v1.10.0/go.mod h1:z5UZb/iS3GoOSn0JgWuiw7dxlurVYTu+/jHXqQg881A=\ngithub.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/magiconair/properties v1.8.1/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/mailru/easyjson v0.0.0-20160728113105-d5b7844b561a/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.0.0-20180823135443-60711f1a8329/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.0.0-20190312143242-1de009706dbe/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.0.0-20190614124828-94de47d64c63/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.0.0-20190626092158-b2ccc519800e/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/mailru/easyjson v0.7.0/go.mod h1:KAzv3t3aY1NaHWoQz1+4F1ccyAH66Jk7yos7ldAVICs=\ngithub.com/mailru/easyjson v0.7.1/go.mod h1:KAzv3t3aY1NaHWoQz1+4F1ccyAH66Jk7yos7ldAVICs=\ngithub.com/mailru/easyjson v0.7.6 h1:8yTIVnZgCoiM1TgqoeTl+LfU5Jg6/xL3QhGQnimLYnA=\ngithub.com/mailru/easyjson v0.7.6/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/maratori/testpackage v1.0.1/go.mod h1:ddKdw+XG0Phzhx8BFDTKgpWP4i7MpApTE5fXSKAqwDU=\ngithub.com/markbates/oncer v0.0.0-20181203154359-bf2de49a0be2/go.mod h1:Ld9puTsIW75CHf65OeIOkyKbteujpZVXDpWK6YGZbxE=\ngithub.com/markbates/safe v1.0.1/go.mod h1:nAqgmRi7cY2nqMc92/bSEeQA+R4OheNU2T1kNSCBdG0=\ngithub.com/matoous/godox v0.0.0-20190911065817-5d6d842e92eb/go.mod h1:1BELzlh859Sh1c6+90blK8lbYy0kwQf1bYlBhBysy1s=\ngithub.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=\ngithub.com/mattn/go-colorable v0.1.1/go.mod h1:FuOcm+DKB9mbwrcAfNl7/TZVBZ6rcnceauSikq3lYCQ=\ngithub.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-colorable v0.1.6/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.8/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-colorable v0.1.10 h1:KWqbp83oZ6YOEgIbNW3BM1Jbe2tz4jgmWA9FOuAF8bw=\ngithub.com/mattn/go-colorable v0.1.10/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-ieproxy v0.0.0-20190610004146-91bb50d98149/go.mod h1:31jz6HNzdxOmlERGGEc4v/dMssOfmp2p5bT/okiKFFc=\ngithub.com/mattn/go-ieproxy v0.0.0-20190702010315-6dee0af9227d/go.mod h1:31jz6HNzdxOmlERGGEc4v/dMssOfmp2p5bT/okiKFFc=\ngithub.com/mattn/go-ieproxy v0.0.1 h1:qiyop7gCflfhwCzGyeT0gro3sF9AIg9HU98JORTkqfI=\ngithub.com/mattn/go-ieproxy v0.0.1/go.mod h1:pYabZ6IHcRpFh7vIaLfK7rdcWgFEb3SFJ6/gNWuh88E=\ngithub.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-isatty v0.0.4/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=\ngithub.com/mattn/go-isatty v0.0.5/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.7/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.9/go.mod h1:YNRxwqDuOph6SZLI9vUUz6OYw3QyUt7WiY2yME+cCiQ=\ngithub.com/mattn/go-isatty v0.0.10/go.mod h1:qgIWMr58cqv1PHHyhnkY9lrL7etaEgOFcMEpPG5Rm84=\ngithub.com/mattn/go-isatty v0.0.11/go.mod h1:PhnuNfih5lzO57/f3n+odYbM4JtupLOxQOAqxQCu2WE=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-isatty v0.0.13/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw+3Zlu5yQgKGP2/hcQbHb7S9Y=\ngithub.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=\ngithub.com/mattn/go-runewidth v0.0.2/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mattn/go-runewidth v0.0.4/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=\ngithub.com/mattn/go-runewidth v0.0.7/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.13 h1:lTGmDsbAYt5DmK6OnoV7EuIF1wEIFAcxld6ypU4OSgU=\ngithub.com/mattn/go-runewidth v0.0.13/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mattn/go-shellwords v1.0.10/go.mod h1:EZzvwXDESEeg03EKmM+RmDnNOPKG4lLtQsUlTZDWQ8Y=\ngithub.com/mattn/go-sqlite3 v1.9.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/mattn/go-sqlite3 v2.0.1+incompatible/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/mattn/go-zglob v0.0.1/go.mod h1:9fxibJccNxU2cnpIKLRRFA7zX7qhkJIQWBb449FYHOo=\ngithub.com/mattn/goveralls v0.0.2/go.mod h1:8d1ZMHsd7fW6IRPKQh46F2WRpyib5/X4FOpevwGNQEw=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.2-0.20181231171920-c182affec369 h1:I0XW9+e1XWDxdcEniV4rQAIOPUGDq67JSCiRCgGCZLI=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.2-0.20181231171920-c182affec369/go.mod h1:BSXmuO+STAnVfrANrmjBb36TMTDstsz7MSK+HVaYKv4=\ngithub.com/maxbrunsfeld/counterfeiter/v6 v6.2.2/go.mod h1:eD9eIE7cdwcMi9rYluz88Jz2VyhSmden33/aXg4oVIY=\ngithub.com/mb0/glob v0.0.0-20160210091149-1eb79d2de6c4 h1:NK3O7S5FRD/wj7ORQ5C3Mx1STpyEMuFe+/F0Lakd1Nk=\ngithub.com/mb0/glob v0.0.0-20160210091149-1eb79d2de6c4/go.mod h1:FqD3ES5hx6zpzDainDaHgkTIqrPaI9uX4CVWqYZoQjY=\ngithub.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b/go.mod h1:01TrycV0kFyexm33Z7vhZRXopbI8J3TDReVlkTgMUxE=\ngithub.com/miekg/dns v1.0.14/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=\ngithub.com/miekg/dns v1.1.43 h1:JKfpVSCB84vrAmHzyrsxB5NAr5kLoMXZArPSw7Qlgyg=\ngithub.com/miekg/dns v1.1.43/go.mod h1:+evo5L0630/F6ca/Z9+GAqzhjGyn8/c+TBaOyfEl0V4=\ngithub.com/minio/argon2 v1.0.0 h1:cLB/fl0EeBqiDYhsIzIPTdLZhCykRrvdx3Eu3E5oqsE=\ngithub.com/minio/argon2 v1.0.0/go.mod h1:XtOGJ7MjwUJDPtCqqrisx5QwVB/jDx+adQHigJVsQHQ=\ngithub.com/minio/cli v1.22.0 h1:VTQm7lmXm3quxO917X3p+el1l0Ca5X3S4PM2ruUYO68=\ngithub.com/minio/cli v1.22.0/go.mod h1:bYxnK0uS629N3Bq+AOZZ+6lwF77Sodk4+UL9vNuXhOY=\ngithub.com/minio/colorjson v1.0.1 h1:+hvfP8C1iMB95AT+ZFDRE+Knn9QPd9lg0CRJY9DRpos=\ngithub.com/minio/colorjson v1.0.1/go.mod h1:oPM3zQQY8Gz9NGtgvuBEjQ+gPZLKAGc7T+kjMlwtOgs=\ngithub.com/minio/console v0.12.9 h1:7ERcZWRu2sfZ8wR0DAdr0CoBSaRIMnOADlv882MYizc=\ngithub.com/minio/console v0.12.9/go.mod h1:SaJoJB4QCU5+jjSaizwQOXHzN78mrqidyBMa3ULm+wg=\ngithub.com/minio/csvparser v1.0.0 h1:xJEHcYK8ZAjeW4hNV9Zu30u+/2o4UyPnYgyjWp8b7ZU=\ngithub.com/minio/csvparser v1.0.0/go.mod h1:lKXskSLzPgC5WQyzP7maKH7Sl1cqvANXo9YCto8zbtM=\ngithub.com/minio/direct-csi v1.3.5-0.20210601185811-f7776f7961bf h1:wylCc/PdvdTIqYqVNEU9LJAZBanvfGY1TwTnjM3zQaA=\ngithub.com/minio/direct-csi v1.3.5-0.20210601185811-f7776f7961bf/go.mod h1:ryRFbKRDMZ1+kGF5EZwuyfF1a/eAu4c9uxZdF0fnmuY=\ngithub.com/minio/filepath v1.0.0 h1:fvkJu1+6X+ECRA6G3+JJETj4QeAYO9sV43I79H8ubDY=\ngithub.com/minio/filepath v1.0.0/go.mod h1:/nRZA2ldl5z6jT9/KQuvZcQlxZIMQoFFQPvEXx9T/Bw=\ngithub.com/minio/highwayhash v1.0.1/go.mod h1:BQskDq+xkJ12lmlUUi7U0M5Swg3EWR+dLTk+kldvVxY=\ngithub.com/minio/highwayhash v1.0.2 h1:Aak5U0nElisjDCfPSG79Tgzkn2gl66NxOMspRrKnA/g=\ngithub.com/minio/highwayhash v1.0.2/go.mod h1:BQskDq+xkJ12lmlUUi7U0M5Swg3EWR+dLTk+kldvVxY=\ngithub.com/minio/kes v0.11.0/go.mod h1:mTF1Bv8YVEtQqF/B7Felp4tLee44Pp+dgI0rhCvgNg8=\ngithub.com/minio/kes v0.14.0 h1:plCGm4LwR++T1P1sXsJbyFRX54CE1WRuo9PAPj6MC3Q=\ngithub.com/minio/kes v0.14.0/go.mod h1:OUensXz2BpgMfiogslKxv7Anyx/wj+6bFC6qA7BQcfA=\ngithub.com/minio/madmin-go v1.0.12/go.mod h1:BK+z4XRx7Y1v8SFWXsuLNqQqnq5BO/axJ8IDJfgyvfs=\ngithub.com/minio/madmin-go v1.1.15/go.mod h1:Iu0OnrMWNBYx1lqJTW+BFjBMx0Hi0wjw8VmqhiOs2Jo=\ngithub.com/minio/madmin-go v1.1.17/go.mod h1:Iu0OnrMWNBYx1lqJTW+BFjBMx0Hi0wjw8VmqhiOs2Jo=\ngithub.com/minio/madmin-go v1.1.20 h1:jig4gJi0CD+FYz+Cnd+TNo0oqhNaZcLmfUqNl5b46Eo=\ngithub.com/minio/madmin-go v1.1.20/go.mod h1:Iu0OnrMWNBYx1lqJTW+BFjBMx0Hi0wjw8VmqhiOs2Jo=\ngithub.com/minio/mc v0.0.0-20211207230606-23a05f5a17f2 h1:xocb1RGyrDJ8PxkNn0NSbaBlfdU6J/Ag9QK62pb7nR8=\ngithub.com/minio/mc v0.0.0-20211207230606-23a05f5a17f2/go.mod h1:siI9jWTzj1KsNXgz6NOL/S7OTaAUM0OMi+zEkF08gnA=\ngithub.com/minio/md5-simd v1.1.0/go.mod h1:XpBqgZULrMYD3R+M28PcmP0CkI7PEMzB3U77ZrKZ0Gw=\ngithub.com/minio/md5-simd v1.1.2 h1:Gdi1DZK69+ZVMoNHRXJyNcxrMA4dSxoYHZSQbirFg34=\ngithub.com/minio/md5-simd v1.1.2/go.mod h1:MzdKDxYpY2BT9XQFocsiZf/NKVtR7nkE4RoEpN+20RM=\ngithub.com/minio/minio-go/v7 v7.0.10/go.mod h1:td4gW1ldOsj1PbSNS+WYK43j+P1XVhX/8W8awaYlBFo=\ngithub.com/minio/minio-go/v7 v7.0.11-0.20210302210017-6ae69c73ce78/go.mod h1:mTh2uJuAbEqdhMVl6CMIIZLUeiMiWtJR4JB8/5g2skw=\ngithub.com/minio/minio-go/v7 v7.0.16-0.20211108161804-a7a36ee131df/go.mod h1:pUV0Pc+hPd1nccgmzQF/EXh48l/Z/yps6QPF1aaie4g=\ngithub.com/minio/minio-go/v7 v7.0.17 h1:5SiS3pqiQDbNhmXMxtqn2HzAInbN5cbHT7ip9F0F07E=\ngithub.com/minio/minio-go/v7 v7.0.17/go.mod h1:SyQ1IFeJuaa+eV5yEDxW7hYE1s5VVq5sgImDe27R+zg=\ngithub.com/minio/operator v0.0.0-20211011212245-31460bbbc4b7 h1:dkfuMNslMjGoJ4ArAMSoQhidYNdm3SgzLBP+f96O3/E=\ngithub.com/minio/operator v0.0.0-20211011212245-31460bbbc4b7/go.mod h1:lDpuz8nwsfhKlfiBaA3Z8AW019fWEAjO2gltfLbdorE=\ngithub.com/minio/operator/logsearchapi v0.0.0-20211011212245-31460bbbc4b7 h1:vFtQqCt67ETp0JAkOKRWTKkgwFv14Vc1jJSxmQ8wJE0=\ngithub.com/minio/operator/logsearchapi v0.0.0-20211011212245-31460bbbc4b7/go.mod h1:R+38Pf3wfm+JMiyLPb/r8OMrBm0vK2hZgUT4y4aYoSY=\ngithub.com/minio/parquet-go v1.1.0 h1:j2Fn1/h7Ts/0qzdMZU9oCUKr0IJwRTD9Hg9QJyVaN6A=\ngithub.com/minio/parquet-go v1.1.0/go.mod h1:nnAkbt2CG/DCQ3trcV3uyvwns4VjyoINF5vMqF5efOE=\ngithub.com/minio/pkg v1.0.3/go.mod h1:obU54TZ9QlMv0TRaDgQ/JTzf11ZSXxnSfLrm4tMtBP8=\ngithub.com/minio/pkg v1.0.4/go.mod h1:obU54TZ9QlMv0TRaDgQ/JTzf11ZSXxnSfLrm4tMtBP8=\ngithub.com/minio/pkg v1.0.11/go.mod h1:32x/3OmGB0EOi1N+3ggnp+B5VFkSBBB9svPMVfpnf14=\ngithub.com/minio/pkg v1.1.3/go.mod h1:32x/3OmGB0EOi1N+3ggnp+B5VFkSBBB9svPMVfpnf14=\ngithub.com/minio/pkg v1.1.9 h1:NJrcrQyFCSgyF+u6v7FbPXjjNV0oSnBuBevhsTKmA2U=\ngithub.com/minio/pkg v1.1.9/go.mod h1:32x/3OmGB0EOi1N+3ggnp+B5VFkSBBB9svPMVfpnf14=\ngithub.com/minio/selfupdate v0.3.1/go.mod h1:b8ThJzzH7u2MkF6PcIra7KaXO9Khf6alWPvMSyTDCFM=\ngithub.com/minio/selfupdate v0.4.0 h1:A7t07pN4Ch1tBTIRStW0KhUVyykz+2muCqFsITQeEW8=\ngithub.com/minio/selfupdate v0.4.0/go.mod h1:mcDkzMgq8PRcpCRJo/NlPY7U45O5dfYl2Y0Rg7IustY=\ngithub.com/minio/sha256-simd v0.1.1/go.mod h1:B5e1o+1/KgNmWrSQK08Y6Z1Vb5pwIktudl0J58iy0KM=\ngithub.com/minio/sha256-simd v1.0.0 h1:v1ta+49hkWZyvaKwrQB8elexRqm6Y0aMLjCNsrYxo6g=\ngithub.com/minio/sha256-simd v1.0.0/go.mod h1:OuYzVNI5vcoYIAmbIvHPl3N3jUzVedXbKy5RFepssQM=\ngithub.com/minio/simdjson-go v0.2.1 h1:nxYlp4Qd0w2pwLlif00l5vTFL6PcNAKpyHq27/pageg=\ngithub.com/minio/simdjson-go v0.2.1/go.mod h1:JPUSkRykfSPS+AhO0YPA1h0l5vY7NqrF4zel2b12wxc=\ngithub.com/minio/sio v0.2.1/go.mod h1:8b0yPp2avGThviy/+OCJBI6OMpvxoUuiLvE6F1lebhw=\ngithub.com/minio/sio v0.3.0 h1:syEFBewzOMOYVzSTFpp1MqpSZk8rUNbz8VIIc+PNzus=\ngithub.com/minio/sio v0.3.0/go.mod h1:8b0yPp2avGThviy/+OCJBI6OMpvxoUuiLvE6F1lebhw=\ngithub.com/minio/zipindex v0.2.1 h1:A37vDQJ7Uyp4RHpQEEpintgiIxg0t3npH2CWjLT//u4=\ngithub.com/minio/zipindex v0.2.1/go.mod h1:s+b/Qyw9JtSEnYfaM4ASOWNO2xGnXCfzQ+SWAzVkVZc=\ngithub.com/mitchellh/cli v1.0.0/go.mod h1:hNIlj7HEI86fIcpObd7a0FcrxTWetlwJDGcceTlRvqc=\ngithub.com/mitchellh/copystructure v1.0.0/go.mod h1:SNtv71yrdKgLRyLFxmLdkAbkKEFWgYaq1OVrnRcwhnw=\ngithub.com/mitchellh/go-homedir v1.0.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/go-ps v0.0.0-20190716172923-621e5597135b/go.mod h1:r1VsdOzOPt1ZSrGZWFoNhsAedKnEd6r9Np1+5blZCWk=\ngithub.com/mitchellh/go-testing-interface v0.0.0-20171004221916-a61a99592b77/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=\ngithub.com/mitchellh/go-testing-interface v1.0.0/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=\ngithub.com/mitchellh/go-wordwrap v0.0.0-20150314170334-ad45545899c7/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/mitchellh/go-wordwrap v1.0.0/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\ngithub.com/mitchellh/gox v0.4.0/go.mod h1:Sd9lOJ0+aimLBi73mGofS1ycjY8lL3uZM3JPS42BGNg=\ngithub.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=\ngithub.com/mitchellh/mapstructure v0.0.0-20160808181253-ca63d7c062ee/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/mitchellh/mapstructure v1.3.1/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.3.2/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.3.3/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.4.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/mapstructure v1.4.1 h1:CpVNEelQCZBooIPDn+AR3NpivK/TIKU8bDxdASFVQag=\ngithub.com/mitchellh/mapstructure v1.4.1/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/mmcloughlin/avo v0.0.0-20201105074841-5d2f697d268f/go.mod h1:6aKT4zZIrpGqB3RpFU14ByCSSyKY6LfJz4J/JJChHfI=\ngithub.com/moby/spdystream v0.2.0/go.mod h1:f7i0iNDQJ059oMTcWxx8MA/zKFIuD/lY+0GqbN2Wy8c=\ngithub.com/moby/term v0.0.0-20200312100748-672ec06f55cd/go.mod h1:DdlQx2hp0Ss5/fLikoLlEeIYiATotOjgB//nb973jeo=\ngithub.com/moby/term v0.0.0-20201216013528-df9cb8a40635/go.mod h1:FBS0z0QWA44HXygs7VXDUOGoN/1TV3RuWkLO04am3wc=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v0.0.0-20180320133207-05fbef0ca5da/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/montanaflynn/stats v0.0.0-20171201202039-1bf9dbcd8cbe/go.mod h1:wL8QJuTMNUDYhXwkmfOly8iTdp5TEcJFWZD2D7SIkUc=\ngithub.com/montanaflynn/stats v0.6.6 h1:Duep6KMIDpY4Yo11iFsvyqJDyfzLF9+sndUKT+v64GQ=\ngithub.com/montanaflynn/stats v0.6.6/go.mod h1:etXPPgVO6n31NxCd9KQUMvCM+ve0ruNzt6R8Bnaayow=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/mozilla/tls-observatory v0.0.0-20190404164649-a3c1b6cfecfd/go.mod h1:SrKMQvPiws7F7iqYp8/TX+IhxCYhzr6N/1yb8cwHsGk=\ngithub.com/mozilla/tls-observatory v0.0.0-20200317151703-4fa42e1c2dee/go.mod h1:SrKMQvPiws7F7iqYp8/TX+IhxCYhzr6N/1yb8cwHsGk=\ngithub.com/munnerz/goautoneg v0.0.0-20120707110453-a547fc61f48d/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f/go.mod h1:ZdcZmHo+o7JKHSa8/e818NopupXU1YMK5fe1lsApnBw=\ngithub.com/nakabonne/nestif v0.3.0/go.mod h1:dI314BppzXjJ4HsCnbo7XzrJHPszZsjnk5wEBSYHI2c=\ngithub.com/nats-io/jwt v0.3.0/go.mod h1:fRYCDE99xlTsqUzISS1Bi75UBJ6ljOJQOAAu5VglpSg=\ngithub.com/nats-io/jwt v0.3.2/go.mod h1:/euKqTS1ZD+zzjYrY7pseZrTtWQSjujC7xjPc8wL6eU=\ngithub.com/nats-io/jwt v1.1.0/go.mod h1:n3cvmLfBfnpV4JJRN7lRYCyZnw48ksGsbThGXEk4w9M=\ngithub.com/nats-io/jwt v1.2.2 h1:w3GMTO969dFg+UOKTmmyuu7IGdusK+7Ytlt//OYH/uU=\ngithub.com/nats-io/jwt v1.2.2/go.mod h1:/xX356yQA6LuXI9xWW7mZNpxgF2mBmGecH+Fj34sP5Q=\ngithub.com/nats-io/jwt/v2 v2.0.2 h1:ejVCLO8gu6/4bOKIHQpmB5UhhUJfAQw55yvLWpfmKjI=\ngithub.com/nats-io/jwt/v2 v2.0.2/go.mod h1:VRP+deawSXyhNjXmxPCHskrR6Mq50BqpEI5SEcNiGlY=\ngithub.com/nats-io/nats-server/v2 v2.1.2/go.mod h1:Afk+wRZqkMQs/p45uXdrVLuab3gwv3Z8C4HTBu8GD/k=\ngithub.com/nats-io/nats-server/v2 v2.1.9/go.mod h1:9qVyoewoYXzG1ME9ox0HwkkzyYvnlBDugfR4Gg/8uHU=\ngithub.com/nats-io/nats-server/v2 v2.3.2 h1:SGJLWrjBHsl0DsdY8PeTR3YKEfiUEYVVq2STw9d8MSY=\ngithub.com/nats-io/nats-server/v2 v2.3.2/go.mod h1:dUf7Cm5z5LbciFVwWx54owyCKm8x4/hL6p7rrljhLFY=\ngithub.com/nats-io/nats-streaming-server v0.21.2 h1:chyaVdWlPdBcSbLq3cpyCYcuXA+7bVXJmM4yWrdqL/8=\ngithub.com/nats-io/nats-streaming-server v0.21.2/go.mod h1:2W8QfNVOtcFpmf0bRiwuLtRb0/hkX4NuOxPOFNOThVQ=\ngithub.com/nats-io/nats.go v1.9.1/go.mod h1:ZjDU1L/7fJ09jvUSRVBR2e7+RnLiiIQyqyzEE/Zbp4w=\ngithub.com/nats-io/nats.go v1.10.0/go.mod h1:AjGArbfyR50+afOUotNX2Xs5SYHf+CoOa5HH1eEl2HE=\ngithub.com/nats-io/nats.go v1.11.1-0.20210623165838-4b75fc59ae30 h1:9GqilBhZaR3xYis0JgMlJjNw933WIobdjKhilXm+Vls=\ngithub.com/nats-io/nats.go v1.11.1-0.20210623165838-4b75fc59ae30/go.mod h1:BPko4oXsySz4aSWeFgOHLZs3G4Jq4ZAyE6/zMCxRT6w=\ngithub.com/nats-io/nkeys v0.1.0/go.mod h1:xpnFELMwJABBLVhffcfd1MZx6VsNRFpEugbxziKVo7w=\ngithub.com/nats-io/nkeys v0.1.3/go.mod h1:xpnFELMwJABBLVhffcfd1MZx6VsNRFpEugbxziKVo7w=\ngithub.com/nats-io/nkeys v0.1.4/go.mod h1:XdZpAbhgyyODYqjTawOnIOI7VlbKSarI9Gfy1tqEu/s=\ngithub.com/nats-io/nkeys v0.2.0/go.mod h1:XdZpAbhgyyODYqjTawOnIOI7VlbKSarI9Gfy1tqEu/s=\ngithub.com/nats-io/nkeys v0.3.0 h1:cgM5tL53EvYRU+2YLXIK0G2mJtK12Ft9oeooSZMA2G8=\ngithub.com/nats-io/nkeys v0.3.0/go.mod h1:gvUNGjVcM2IPr5rCsRsC6Wb3Hr2CQAm08dsxtV6A5y4=\ngithub.com/nats-io/nuid v1.0.1 h1:5iA8DT8V7q8WK2EScv2padNa/rTESc1KdnPw4TC2paw=\ngithub.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=\ngithub.com/nats-io/stan.go v0.8.3 h1:XyemjL9vAeGHooHn5RQy+ngljd8AVSM2l65Jdnpv4rI=\ngithub.com/nats-io/stan.go v0.8.3/go.mod h1:Ejm8bbHnMTSptU6uNMAVuxeapMJYBB/Ml3ej6z4GoSY=\ngithub.com/nbutton23/zxcvbn-go v0.0.0-20180912185939-ae427f1e4c1d/go.mod h1:o96djdrsSGy3AWPyBgZMAGfxZNfgntdJG+11KU4QvbU=\ngithub.com/ncw/directio v1.0.5 h1:JSUBhdjEvVaJvOoyPAbcW0fnd0tvRXD76wEfZ1KcQz4=\ngithub.com/ncw/directio v1.0.5/go.mod h1:rX/pKEYkOXBGOggmcyJeJGloCkleSvphPx2eV3t6ROk=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e h1:fD57ERR4JtEqsWbfPhv4DMiApHyliiK5xCTNVSPiaAs=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/nsf/termbox-go v0.0.0-20190121233118-02980233997d/go.mod h1:IuKpRQcYE1Tfu+oAQqaLisqDeXgjyyltCfsaoYN18NQ=\ngithub.com/nsqio/go-nsq v1.0.8 h1:3L2F8tNLlwXXlp2slDUrUWSBn2O3nMh8R1/KEDFTHPk=\ngithub.com/nsqio/go-nsq v1.0.8/go.mod h1:vKq36oyeVXgsS5Q8YEO7WghqidAVXQlcFxzQbQTuDEY=\ngithub.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=\ngithub.com/nxadm/tail v1.4.8/go.mod h1:+ncqLTQzXmGhMZNUePPaPqPvBxHAIsmXswZKocGu+AU=\ngithub.com/oklog/oklog v0.3.2/go.mod h1:FCV+B7mhrz4o+ueLpx+KqkyXRGMWOYEvfiXtdGtbWGs=\ngithub.com/oklog/run v1.0.0/go.mod h1:dlhp/R75TPv97u0XWUtDeV/lRKWPKSdTuV0TZvrmrQA=\ngithub.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=\ngithub.com/olekukonko/tablewriter v0.0.0-20170122224234-a0225b3f23b5/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=\ngithub.com/onsi/ginkgo v0.0.0-20170829012221-11459a886d9c/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.7.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.8.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.10.2/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.11.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.12.0/go.mod h1:oUhWkIvk5aDxtKvDDuw8gItl8pKl42LzjC9KZE0HfGg=\ngithub.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=\ngithub.com/onsi/ginkgo v1.14.1/go.mod h1:iSB4RoI2tjJc9BBv4NKIKWKya62Rps+oPG/Lv9klQyY=\ngithub.com/onsi/ginkgo v1.16.1/go.mod h1:CObGmKUOKaSC0RjmoAK7tKyn4Azo5P2IWuoMnvwxz1E=\ngithub.com/onsi/gomega v0.0.0-20170829124025-dcabb60a477c/go.mod h1:C1qb7wdrVGGVU+Z6iS04AVkA3Q65CEZX59MT0QO5uiA=\ngithub.com/onsi/gomega v1.4.3/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.5.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/onsi/gomega v1.8.1/go.mod h1:Ho0h+IUsWyvy1OpqCwxlQ/21gkhVunqlU8fDGcoTdcA=\ngithub.com/onsi/gomega v1.9.0/go.mod h1:Ho0h+IUsWyvy1OpqCwxlQ/21gkhVunqlU8fDGcoTdcA=\ngithub.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=\ngithub.com/onsi/gomega v1.10.2/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=\ngithub.com/onsi/gomega v1.11.0/go.mod h1:azGKhqFUon9Vuj0YmTfLSmx0FUwqXYSTl5re8lQLTUg=\ngithub.com/op/go-logging v0.0.0-20160315200505-970db520ece7/go.mod h1:HzydrMdWErDVzsI23lYNej1Htcns9BCg93Dk0bBINWk=\ngithub.com/opencontainers/go-digest v1.0.0-rc1/go.mod h1:cMLVZDEM3+U2I4VmLI6N8jQYUd2OVphdqWwCJHrFt2s=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=\ngithub.com/opentracing-contrib/go-observer v0.0.0-20170622124052-a52f23424492/go.mod h1:Ngi6UdF0k5OKD5t5wlmGhe/EDKPoUM3BXZSSfIuJbis=\ngithub.com/opentracing/basictracer-go v1.0.0/go.mod h1:QfBfYuafItcjQuMwinw9GhYKwFXS9KnPs5lxoYwgW74=\ngithub.com/opentracing/opentracing-go v1.0.2/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/opentracing/opentracing-go v1.1.0/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=\ngithub.com/openzipkin-contrib/zipkin-go-opentracing v0.4.5/go.mod h1:/wsWhb9smxSfWAKL3wpBW7V8scJMt8N8gnaMCS9E/cA=\ngithub.com/openzipkin/zipkin-go v0.1.6/go.mod h1:QgAqvLzwWbR/WpD4A3cGpPtJrZXNIiJc5AZX7/PBEpw=\ngithub.com/openzipkin/zipkin-go v0.2.1/go.mod h1:NaW6tEwdmWMaCDZzg8sh+IBNOxHMPnhQw8ySjnjRyN4=\ngithub.com/openzipkin/zipkin-go v0.2.2/go.mod h1:NaW6tEwdmWMaCDZzg8sh+IBNOxHMPnhQw8ySjnjRyN4=\ngithub.com/pact-foundation/pact-go v1.0.4/go.mod h1:uExwJY4kCzNPcHRj+hCR/HBbOOIwwtUjcrb0b5/5kLM=\ngithub.com/pascaldekloe/goe v0.0.0-20180627143212-57f6aae5913c/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=\ngithub.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=\ngithub.com/pborman/getopt v0.0.0-20180729010549-6fdd0a2c7117/go.mod h1:85jBQOZwpVEaDAr341tbn15RS4fCAsIst0qp7i8ex1o=\ngithub.com/pborman/uuid v1.2.0/go.mod h1:X/NO0urCmaxf9VXbdlT7C2Yzkj2IKimNn4k+gtPdI/k=\ngithub.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/pelletier/go-toml v1.4.0/go.mod h1:PN7xzY2wHTK0K9p34ErDQMlFxa51Fk0OUruD3k1mMwo=\ngithub.com/pelletier/go-toml v1.7.0/go.mod h1:vwGMzjaWMwyfHwgIBhI2YUM4fB6nL6lVAvS1LBMMhTE=\ngithub.com/pelletier/go-toml v1.8.0/go.mod h1:D6yutnOGMveHEPV7VQOuvI/gXY61bv+9bAOTRnLElKs=\ngithub.com/performancecopilot/speed v3.0.0+incompatible/go.mod h1:/CLtqpZ5gBg1M9iaPbIdPPGyKcA8hKdoy6hAWba7Yac=\ngithub.com/peterbourgon/diskv v2.0.1+incompatible/go.mod h1:uqqh8zWWbv1HBMNONnaR/tNboyR3/BZd58JJSHlUSCU=\ngithub.com/phayes/checkstyle v0.0.0-20170904204023-bfd46e6a821d/go.mod h1:3OzsM7FXDQlpCiw2j81fOmAwQLnZnLGXVKUzeKQXIAw=\ngithub.com/philhofer/fwd v1.1.1/go.mod h1:gk3iGcWd9+svBvR0sR+KPcfE+RNWozjowpeBVG3ZVNU=\ngithub.com/philhofer/fwd v1.1.2-0.20210722190033-5c56ac6d0bb9 h1:6ob53CVz+ja2i7easAStApZJlh7sxyq3Cm7g1Di6iqA=\ngithub.com/philhofer/fwd v1.1.2-0.20210722190033-5c56ac6d0bb9/go.mod h1:gk3iGcWd9+svBvR0sR+KPcfE+RNWozjowpeBVG3ZVNU=\ngithub.com/pierrec/lz4 v1.0.2-0.20190131084431-473cd7ce01a1/go.mod h1:3/3N9NVKO0jef7pBehbT1qWhCMrIgbYNnFAZCqQ5LRc=\ngithub.com/pierrec/lz4 v2.0.5+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=\ngithub.com/pierrec/lz4 v2.5.2+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=\ngithub.com/pierrec/lz4 v2.6.0+incompatible h1:Ix9yFKn1nSPBLFl/yZknTp8TU5G4Ps0JDmguYK6iH1A=\ngithub.com/pierrec/lz4 v2.6.0+incompatible/go.mod h1:pdkljMzZIN41W+lC3N2tnIh5sFi+IEE17M5jbnwPHcY=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/profile v1.2.1/go.mod h1:hJw3o1OdXxsrSjjVksARp5W95eeEaEfptyVZyv6JUPA=\ngithub.com/pkg/profile v1.6.0 h1:hUDfIISABYI59DyeB3OTay/HxSRwTQ8rB/H83k6r5dM=\ngithub.com/pkg/profile v1.6.0/go.mod h1:qBsxPvzyUincmltOk6iyRVxHYg4adc0OFOv72ZdLa18=\ngithub.com/pkg/xattr v0.4.3 h1:5Jx4GCg5ABtqWZH8WLzeI4fOtM1HyX4RBawuCoua1es=\ngithub.com/pkg/xattr v0.4.3/go.mod h1:sBD3RAqlr8Q+RC3FutZcikpT8nyDrIEEBw2J744gVWs=\ngithub.com/pmezard/go-difflib v0.0.0-20151028094244-d8ed2627bdf0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=\ngithub.com/posener/complete v1.2.3 h1:NP0eAhjcjImqslEwo/1hq7gpajME0fTLTezBKDqfXqo=\ngithub.com/posener/complete v1.2.3/go.mod h1:WZIdtGGp+qx0sLrYKtIRAruyNpv6hFCicSgv7Sy7s/s=\ngithub.com/pquerna/cachecontrol v0.0.0-20171018203845-0dec1b30a021 h1:0XM1XL/OFFJjXsYXlG30spTkV/E9+gmd5GD1w2HE8xM=\ngithub.com/pquerna/cachecontrol v0.0.0-20171018203845-0dec1b30a021/go.mod h1:prYjPmNq4d1NPVmpShWobRqXY3q7Vp+80DqgxxUrUIA=\ngithub.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring v0.44.1/go.mod h1:3WYi4xqXxGGXWDdQIITnLNmuDzO5n6wYva9spVhR4fg=\ngithub.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring v0.46.0/go.mod h1:3WYi4xqXxGGXWDdQIITnLNmuDzO5n6wYva9spVhR4fg=\ngithub.com/prometheus-operator/prometheus-operator/pkg/client v0.46.0/go.mod h1:k4BrWlVQQsvBiTcDnKEMgyh/euRxyxgrHdur/ZX/sdA=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v0.9.2/go.mod h1:OsXs2jCmiKlQ1lTBmv21f2mNfw4xf/QclQDMrYNZzcM=\ngithub.com/prometheus/client_golang v0.9.3-0.20190127221311-3c4408c8b829/go.mod h1:p2iRAGwDERtqlqzRXnrOVns+ignqQo//hLXqYxZYVNs=\ngithub.com/prometheus/client_golang v0.9.3/go.mod h1:/TN21ttK/J9q6uSwhBd54HahCDft0ttaMvbicHlPoso=\ngithub.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=\ngithub.com/prometheus/client_golang v1.3.0/go.mod h1:hJaj2vgQTGQmVCsAACORcieXFeDPbaTKGT+JTgUa3og=\ngithub.com/prometheus/client_golang v1.5.1/go.mod h1:e9GMxYsXl05ICDXkRhurwBS4Q3OK1iX/F2sw+iXX5zU=\ngithub.com/prometheus/client_golang v1.7.1/go.mod h1:PY5Wy2awLA44sXw4AOSfFBetzPP4j5+D6mVACh+pe2M=\ngithub.com/prometheus/client_golang v1.8.0/go.mod h1:O9VU6huf47PktckDQfMTX0Y8tY0/7TSWwj+ITvv0TnM=\ngithub.com/prometheus/client_golang v1.11.0 h1:HNkLOAEQMIDv/K+04rukrLx6ch7msSRwf3/SASFAGtQ=\ngithub.com/prometheus/client_golang v1.11.0/go.mod h1:Z6t4BnS23TR94PD6BsDNk8yVqroYurpAkEiz0P2BEV0=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190115171406-56726106282f/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.1.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.2.0 h1:uq5h0d+GuxiXLJLNABMgp2qUWDPiLvgCzz2dUR+/W/M=\ngithub.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/common v0.0.0-20181113130724-41aa239b4cce/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/common v0.0.0-20181126121408-4724e9255275/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/common v0.2.0/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.4.0/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.7.0/go.mod h1:DjGbpBbp5NYNiECxcL/VnbXCCaQpKd3tt26CguLLsqA=\ngithub.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=\ngithub.com/prometheus/common v0.10.0/go.mod h1:Tlit/dnDKsSWFlCLTWaA1cyBgKHSMdTB80sz/V91rCo=\ngithub.com/prometheus/common v0.13.0/go.mod h1:U+gB1OBLb1lF3O42bTCL+FK18tX9Oar16Clt/msog/s=\ngithub.com/prometheus/common v0.14.0/go.mod h1:U+gB1OBLb1lF3O42bTCL+FK18tX9Oar16Clt/msog/s=\ngithub.com/prometheus/common v0.26.0/go.mod h1:M7rCNAaPfAosfx8veZJCuw84e35h3Cfd9VFqTh1DIvc=\ngithub.com/prometheus/common v0.31.1 h1:d18hG4PkHnNAKNMOmFuXFaiY8Us0nird/2m60uS1AMs=\ngithub.com/prometheus/common v0.31.1/go.mod h1:vu+V0TpY+O6vW9J44gczi3Ap/oXXR10b+M/gUGO4Hls=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20181204211112-1dc9a6cbc91a/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20190117184657-bf6a532e95b1/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.0-20190507164030-5867b95ac084/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=\ngithub.com/prometheus/procfs v0.1.3/go.mod h1:lV6e/gmhEcM9IjHGsFOCxxuZ+z1YqCvr4OA4YeYWdaU=\ngithub.com/prometheus/procfs v0.2.0/go.mod h1:lV6e/gmhEcM9IjHGsFOCxxuZ+z1YqCvr4OA4YeYWdaU=\ngithub.com/prometheus/procfs v0.6.0/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=\ngithub.com/prometheus/procfs v0.7.3 h1:4jVXhlkAyzOScmCkXBTOLRLTz8EeU+eyjrwB/EPq0VU=\ngithub.com/prometheus/procfs v0.7.3/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=\ngithub.com/prometheus/tsdb v0.7.1/go.mod h1:qhTCs0VvXwvX/y3TZrWD7rabWM+ijKTux40TwIPHuXU=\ngithub.com/quasilyte/go-consistent v0.0.0-20190521200055-c6f3937de18c/go.mod h1:5STLWrekHfjyYwxBRVRXNOSewLJ3PWfDJd1VyTS21fI=\ngithub.com/quasilyte/go-ruleguard v0.1.2-0.20200318202121-b00d7a75d3d8/go.mod h1:CGFX09Ci3pq9QZdj86B+VGIdNj4VyCo2iPOGS9esB/k=\ngithub.com/rcrowley/go-metrics v0.0.0-20181016184325-3113b8401b8a/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=\ngithub.com/rcrowley/go-metrics v0.0.0-20200313005456-10cdbea86bc0 h1:MkV+77GLUNo5oJ0jf870itWm3D0Sjh7+Za9gazKc5LQ=\ngithub.com/rcrowley/go-metrics v0.0.0-20200313005456-10cdbea86bc0/go.mod h1:bCqnVzQkZxMG4s8nGwiZ5l3QUCyqpo9Y+/ZMZ9VjZe4=\ngithub.com/remyoudompheng/bigfft v0.0.0-20170806203942-52369c62f446/go.mod h1:uYEyJGbgTkfkS4+E/PavXkNJcbFIpEtjt2B0KDQ5+9M=\ngithub.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rjeczalik/notify v0.9.2 h1:MiTWrPj55mNDHEiIX5YUSKefw/+lCQVoAFmD6oQm5w8=\ngithub.com/rjeczalik/notify v0.9.2/go.mod h1:aErll2f0sUX9PXZnVNyeiObbmTlk5jnMoCa4QEjJeqM=\ngithub.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=\ngithub.com/rogpeppe/fastuuid v1.1.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\ngithub.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=\ngithub.com/rogpeppe/go-internal v1.1.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.2.2/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.5.2/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=\ngithub.com/rs/cors v1.7.0 h1:+88SsELBHx5r+hZ8TCkggzSstaWNbDvThkVK8H6f9ik=\ngithub.com/rs/cors v1.7.0/go.mod h1:gFx+x8UowdsKA9AchylcLynDq+nNFfI8FkUZdN/jGCU=\ngithub.com/rs/dnscache v0.0.0-20210201191234-295bba877686 h1:IJ6Df0uxPDtNoByV0KkzVKNseWvZFCNM/S9UoyOMCSI=\ngithub.com/rs/dnscache v0.0.0-20210201191234-295bba877686/go.mod h1:qe5TWALJ8/a1Lqznoc5BDHpYX/8HU60Hm2AwRmqzxqA=\ngithub.com/rs/xid v1.2.1/go.mod h1:+uKXf+4Djp6Md1KODXJxgGQPKngRmWyn10oCKFzNHOQ=\ngithub.com/rs/xid v1.3.0 h1:6NjYksEUlhurdVehpc7S7dk6DAmcKv8V9gG0FsVN2U4=\ngithub.com/rs/xid v1.3.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=\ngithub.com/rs/zerolog v1.13.0/go.mod h1:YbFCdg8HfsridGWAh22vktObvhZbQsZXe4/zB0OKkWU=\ngithub.com/rs/zerolog v1.15.0/go.mod h1:xYTKnLHcpfU2225ny5qZjxnj9NvkumZYjJHlAThCjNc=\ngithub.com/rubiojr/go-vhd v0.0.0-20160810183302-0bfd3b39853c/go.mod h1:DM5xW0nvfNNm2uytzsvhI3OnX8uzaRAg8UX/CnDqbto=\ngithub.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/ryancurrah/gomodguard v1.0.4/go.mod h1:9T/Cfuxs5StfsocWr4WzDL36HqnX0fVb9d5fSEaLhoE=\ngithub.com/ryancurrah/gomodguard v1.1.0/go.mod h1:4O8tr7hBODaGE6VIhfJDHcwzh5GUccKSJBU0UMXJFVM=\ngithub.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=\ngithub.com/ryanuber/columnize v2.1.0+incompatible/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=\ngithub.com/ryanuber/go-glob v1.0.0/go.mod h1:807d1WSdnB0XRJzKNil9Om6lcp/3a0v4qIHxIXzX/Yc=\ngithub.com/samuel/go-zookeeper v0.0.0-20190923202752-2cc03de413da/go.mod h1:gi+0XIa01GRL2eRQVjQkKGqKF3SF9vZR/HnPullcV2E=\ngithub.com/sassoftware/go-rpmutils v0.0.0-20190420191620-a8f1baeba37b/go.mod h1:am+Fp8Bt506lA3Rk3QCmSqmYmLMnPDhdDUcosQCAx+I=\ngithub.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=\ngithub.com/sclevine/spec v1.2.0/go.mod h1:W4J29eT/Kzv7/b9IWLB055Z+qvVC9vt0Arko24q7p+U=\ngithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=\ngithub.com/secure-io/sio-go v0.3.0/go.mod h1:D3KmXgKETffyYxBdFRN+Hpd2WzhzqS0EQwT3XWsAcBU=\ngithub.com/secure-io/sio-go v0.3.1 h1:dNvY9awjabXTYGsTF1PiCySl9Ltofk9GA3VdWlo7rRc=\ngithub.com/secure-io/sio-go v0.3.1/go.mod h1:+xbkjDzPjwh4Axd07pRKSNriS9SCiYksWnZqdnfpQxs=\ngithub.com/securego/gosec v0.0.0-20200103095621-79fbf3af8d83/go.mod h1:vvbZ2Ae7AzSq3/kywjUDxSNq2SJ27RxCz2un0H3ePqE=\ngithub.com/securego/gosec v0.0.0-20200401082031-e946c8c39989/go.mod h1:i9l/TNj+yDFh9SZXUTvspXTjbFXgZGP/UvhU1S65A4A=\ngithub.com/securego/gosec/v2 v2.3.0/go.mod h1:UzeVyUXbxukhLeHKV3VVqo7HdoQR9MrRfFmZYotn8ME=\ngithub.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=\ngithub.com/shirou/gopsutil v0.0.0-20190901111213-e4ec7b275ada h1:WokF3GuxBeL+n4Lk4Fa8v9mbdjlrl7bHuneF4N1bk2I=\ngithub.com/shirou/gopsutil v0.0.0-20190901111213-e4ec7b275ada/go.mod h1:WWnYX4lzhCH5h/3YBfyVA3VbLYjlMZZAQcW9ojMexNc=\ngithub.com/shirou/gopsutil/v3 v3.21.4/go.mod h1:ghfMypLDrFSWN2c9cDYFLHyynQ+QUht0cv/18ZqVczw=\ngithub.com/shirou/gopsutil/v3 v3.21.5/go.mod h1:ghfMypLDrFSWN2c9cDYFLHyynQ+QUht0cv/18ZqVczw=\ngithub.com/shirou/gopsutil/v3 v3.21.6/go.mod h1:JfVbDpIBLVzT8oKbvMg9P3wEIMDDpVn+LwHTKj0ST88=\ngithub.com/shirou/gopsutil/v3 v3.21.8/go.mod h1:YWp/H8Qs5fVmf17v7JNZzA0mPJ+mS2e9JdiUF9LlKzQ=\ngithub.com/shirou/gopsutil/v3 v3.21.9 h1:Vn4MUz2uXhqLSiCbGFRc0DILbMVLAY92DSkT8bsYrHg=\ngithub.com/shirou/gopsutil/v3 v3.21.9/go.mod h1:YWp/H8Qs5fVmf17v7JNZzA0mPJ+mS2e9JdiUF9LlKzQ=\ngithub.com/shirou/w32 v0.0.0-20160930032740-bb4de0191aa4/go.mod h1:qsXQc7+bwAM3Q1u/4XEfrquwF8Lw7D7y5cD8CuHnfIc=\ngithub.com/shopspring/decimal v0.0.0-20180709203117-cd690d0c9e24/go.mod h1:M+9NzErvs504Cn4c5DxATwIqPbtswREoFCre64PpcG4=\ngithub.com/shopspring/decimal v0.0.0-20200227202807-02e2044944cc/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/shopspring/decimal v0.0.0-20200419222939-1884f454f8ea/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\ngithub.com/shurcooL/go v0.0.0-20180423040247-9e1955d9fb6e/go.mod h1:TDJrrUr11Vxrven61rcy3hJMUqaf/CLWYhHNPmT14Lk=\ngithub.com/shurcooL/go-goon v0.0.0-20170922171312-37c2f522c041/go.mod h1:N5mDOmsrJOB+vfqUK+7DmDyjhSLIIBnXo9lvZJj3MWQ=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.4.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.6.0/go.mod h1:7uNnSEd1DgxDLC74fIahvMZmmYsHGZGEOFrfsX/uA88=\ngithub.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/sirupsen/logrus v1.8.0/go.mod h1:4GuYW9TZmE769R5STWrRakJc4UqQ3+QQ95fyz7ENv1A=\ngithub.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9+AZZE=\ngithub.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/assertions v1.0.0/go.mod h1:kHHU4qYBaI3q23Pp3VPrmWhuIUrLW/7eUrw0BU5VaoM=\ngithub.com/smartystreets/assertions v1.1.1/go.mod h1:tcbTF8ujkAEcZ8TElKY+i30BzYlVhC/LOxJk7iOWnoo=\ngithub.com/smartystreets/go-aws-auth v0.0.0-20180515143844-0c1422d1fdb9/go.mod h1:SnhjPscd9TpLiy1LpzGSKh3bXCfxxXuqd9xmQJy3slM=\ngithub.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/smartystreets/gunit v1.0.0/go.mod h1:qwPWnhz6pn0NnRBP++URONOVyNkPyr4SauJk4cUOwJs=\ngithub.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=\ngithub.com/sony/gobreaker v0.4.1/go.mod h1:ZKptC7FHNvhBz7dN2LGjPVBz2sZJmc0/PkyDJOjmxWY=\ngithub.com/sourcegraph/go-diff v0.5.1/go.mod h1:j2dHj3m8aZgQO8lMTcTnBcXkRRRqi34cd2MNlA9u1mE=\ngithub.com/sourcegraph/go-diff v0.5.3/go.mod h1:v9JDtjCE4HHHCZGId75rg8gkKKa98RVjBcBGsVmMmak=\ngithub.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spaolacci/murmur3 v1.1.0 h1:7c1g84S4BPRrfL5Xrdp6fOJ206sU9y293DDHaoy0bLI=\ngithub.com/spaolacci/murmur3 v1.1.0/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=\ngithub.com/spf13/afero v1.2.2/go.mod h1:9ZxEEn6pIJ8Rxe320qSDBk6AsU0r9pR7Q4OcevTdifk=\ngithub.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cast v1.3.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cobra v0.0.3/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=\ngithub.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=\ngithub.com/spf13/cobra v1.0.0/go.mod h1:/6GTrnGXV9HjY+aR4k0oJ5tcvakLuG6EuKReYlHNrgE=\ngithub.com/spf13/cobra v1.1.1/go.mod h1:WnodtKOvamDL/PwE2M4iKs8aMDBZ5Q5klgD3qfVJQMI=\ngithub.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=\ngithub.com/spf13/jwalterweatherman v1.1.0/go.mod h1:aNWZUN0dPAAO/Ljvb5BEdw96iTZ0EXowPYD95IqWIGo=\ngithub.com/spf13/pflag v0.0.0-20170130214245-9ff6c6923cff/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.1/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=\ngithub.com/spf13/viper v1.4.0/go.mod h1:PTJ7Z/lr49W6bUbkmS1V3by4uWynFiR9p7+dSq/yZzE=\ngithub.com/spf13/viper v1.6.1/go.mod h1:t3iDnF5Jlj76alVNuyFBk5oUMCvsrkbvZK0WQdfDi5k=\ngithub.com/spf13/viper v1.7.0/go.mod h1:8WkrPz2fc9jxqZNCJI/76HCieCp4Q8HaLFoCha5qpdg=\ngithub.com/stoewer/go-strcase v1.2.0/go.mod h1:IBiWB2sKIp3wVVQ3Y035++gc+knqhUQag1KpM8ahLw8=\ngithub.com/streadway/amqp v0.0.0-20190404075320-75d898a42a94/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=\ngithub.com/streadway/amqp v0.0.0-20190827072141-edfb9018d271/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=\ngithub.com/streadway/amqp v1.0.0 h1:kuuDrUJFZL1QYL9hUNuCxNObNzB0bV/ZG5jV3RWAQgo=\ngithub.com/streadway/amqp v1.0.0/go.mod h1:AZpEONHx3DKn8O/DFsRAY58/XVQiIPMTMB1SddzLXVw=\ngithub.com/streadway/handy v0.0.0-20190108123426-d5acb3125c2a/go.mod h1:qNTQ5P5JnDBl6z3cMAg/SywNDC5ABu5ApDIw6lUbRmI=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.2.0 h1:Hbg2NidpLE8veEBkEZTL3CvlkUIVzuU9jDplZO54c48=\ngithub.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=\ngithub.com/stretchr/testify v0.0.0-20151208002404-e3a8ff8ce365/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/subosito/gotenv v1.2.0/go.mod h1:N0PQaV/YGNqwC0u51sEeR/aUtSLEXKX9iv69rRypqCw=\ngithub.com/tdakkota/asciicheck v0.0.0-20200416190851-d7f85be797a2/go.mod h1:yHp0ai0Z9gUljN3o0xMhYJnH/IcvkdTBOX2fmJ93JEM=\ngithub.com/tdakkota/asciicheck v0.0.0-20200416200610-e657995f937b/go.mod h1:yHp0ai0Z9gUljN3o0xMhYJnH/IcvkdTBOX2fmJ93JEM=\ngithub.com/tetafro/godot v0.3.7/go.mod h1:/7NLHhv08H1+8DNj0MElpAACw1ajsCuf3TKNQxA5S+0=\ngithub.com/tetafro/godot v0.4.2/go.mod h1:/7NLHhv08H1+8DNj0MElpAACw1ajsCuf3TKNQxA5S+0=\ngithub.com/tidwall/gjson v1.10.2/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/gjson v1.11.0 h1:C16pk7tQNiH6VlCrtIXL1w8GaOsi1X3W8KDkE1BuYd4=\ngithub.com/tidwall/gjson v1.11.0/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.0.0/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=\ngithub.com/tidwall/pretty v1.2.0 h1:RWIZEg2iJ8/g6fDDYzMpobmaoGh5OLl4AXtGUGPcqCs=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/sjson v1.2.3 h1:5+deguEhHSEjmuICXZ21uSSsXotWMA0orU783+Z7Cp8=\ngithub.com/tidwall/sjson v1.2.3/go.mod h1:5WdjKx3AQMvCJ4RG6/2UYT7dLrGvJUV1x4jdTAyGvZs=\ngithub.com/timakin/bodyclose v0.0.0-20190930140734-f7f2e9bca95e/go.mod h1:Qimiffbc6q9tBWlVV6x0P9sat/ao1xEkREYPPj9hphk=\ngithub.com/timakin/bodyclose v0.0.0-20200424151742-cb6215831a94/go.mod h1:Qimiffbc6q9tBWlVV6x0P9sat/ao1xEkREYPPj9hphk=\ngithub.com/tinylib/msgp v1.1.3/go.mod h1:+d+yLhGm8mzTaHzB+wgMYrodPfmZrzkirds8fDWklFE=\ngithub.com/tinylib/msgp v1.1.5/go.mod h1:eQsjooMTnV42mHu917E26IogZ2930nFyBQdofk10Udg=\ngithub.com/tinylib/msgp v1.1.6/go.mod h1:75BAfg2hauQhs3qedfdDZmWAPcFMAvJE5b9rGOMufyw=\ngithub.com/tinylib/msgp v1.1.7-0.20211026165309-e818a1881b0e h1:P5tyWbssToKowBPTA1/EzqPXwrZNc8ZeNPdjgpcDEoI=\ngithub.com/tinylib/msgp v1.1.7-0.20211026165309-e818a1881b0e/go.mod h1:g7jEyb18KPe65d9RRhGw+ThaJr5duyBH8eaFgBUor7Y=\ngithub.com/tj/assert v0.0.0-20171129193455-018094318fb0/go.mod h1:mZ9/Rh9oLWpLLDRpvE+3b7gP/C2YyLFYxNmcLnPTMe0=\ngithub.com/tj/go-elastic v0.0.0-20171221160941-36157cbbebc2/go.mod h1:WjeM0Oo1eNAjXGDx2yma7uG2XoyRZTq1uv3M/o7imD0=\ngithub.com/tj/go-kinesis v0.0.0-20171128231115-08b17f58cb1b/go.mod h1:/yhzCV0xPfx6jb1bBgRFjl5lytqVqZXEaeqWP8lTEao=\ngithub.com/tj/go-spin v1.1.0/go.mod h1:Mg1mzmePZm4dva8Qz60H2lHwmJ2loum4VIrLgVnKwh4=\ngithub.com/tklauser/go-sysconf v0.3.4/go.mod h1:Cl2c8ZRWfHD5IrfHo9VN+FX9kCFjIOyVklgXycLB6ek=\ngithub.com/tklauser/go-sysconf v0.3.5/go.mod h1:MkWzOF4RMCshBAMXuhXJs64Rte09mITnppBXY/rYEFI=\ngithub.com/tklauser/go-sysconf v0.3.6/go.mod h1:MkWzOF4RMCshBAMXuhXJs64Rte09mITnppBXY/rYEFI=\ngithub.com/tklauser/go-sysconf v0.3.9 h1:JeUVdAOWhhxVcU6Eqr/ATFHgXk/mmiItdKeJPev3vTo=\ngithub.com/tklauser/go-sysconf v0.3.9/go.mod h1:11DU/5sG7UexIrp/O6g35hrWzu0JxlwQ3LSFUzyeuhs=\ngithub.com/tklauser/numcpus v0.2.1/go.mod h1:9aU+wOc6WjUIZEwWMP62PL/41d65P+iks1gBkr4QyP8=\ngithub.com/tklauser/numcpus v0.2.2/go.mod h1:x3qojaO3uyYt0i56EW/VUYs7uBvdl2fkfZFu0T9wgjM=\ngithub.com/tklauser/numcpus v0.3.0 h1:ILuRUQBtssgnxw0XXIjKUC56fgnOrFoQQ/4+DeU2biQ=\ngithub.com/tklauser/numcpus v0.3.0/go.mod h1:yFGUr7TUHQRAhyqBcEg0Ge34zDBAsIvJJcyE6boqnA8=\ngithub.com/tmc/grpc-websocket-proxy v0.0.0-20170815181823-89b8d40f7ca8/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=\ngithub.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=\ngithub.com/tommy-muehle/go-mnd v1.1.1/go.mod h1:dSUh0FtTP8VhvkL1S+gUR1OKd9ZnSaozuI6r3m6wOig=\ngithub.com/tommy-muehle/go-mnd v1.3.1-0.20200224220436-e6f9a994e8fa/go.mod h1:dSUh0FtTP8VhvkL1S+gUR1OKd9ZnSaozuI6r3m6wOig=\ngithub.com/ttacon/chalk v0.0.0-20160626202418-22c06c80ed31/go.mod h1:onvgF043R+lC5RZ8IT9rBXDaEDnpnw/Cl+HFiw+v/7Q=\ngithub.com/tv42/httpunix v0.0.0-20150427012821-b75d8614f926/go.mod h1:9ESjWnEqriFuLhtthL60Sar/7RFoluCcXsuvEwTV5KM=\ngithub.com/ugorji/go v1.1.4/go.mod h1:uQMGLiO92mf5W77hV/PUCpI3pbzQx3CRekS0kk+RGrc=\ngithub.com/ugorji/go/codec v0.0.0-20181204163529-d75b2dcb6bc8/go.mod h1:VFNgLljTbGfSG7qAOspJ7OScBnGdDN/yBr0sguwnwf0=\ngithub.com/ulikunitz/xz v0.5.6/go.mod h1:2bypXElzHzzJZwzH67Y6wb67pO62Rzfn7BSiF4ABRW8=\ngithub.com/ulikunitz/xz v0.5.7/go.mod h1:nbz6k7qbPmH4IRqmfOplQw/tblSgqTqBwxkY0oWt/14=\ngithub.com/ultraware/funlen v0.0.2/go.mod h1:Dp4UiAus7Wdb9KUZsYWZEWiRzGuM2kXM1lPbfaF6xhA=\ngithub.com/ultraware/whitespace v0.0.4/go.mod h1:aVMh/gQve5Maj9hQ/hg+F75lr/X5A89uZnzAmWSineA=\ngithub.com/unrolled/secure v1.0.9 h1:BWRuEb1vDrBFFDdbCnKkof3gZ35I/bnHGyt0LB0TNyQ=\ngithub.com/unrolled/secure v1.0.9/go.mod h1:fO+mEan+FLB0CdEnHf6Q4ZZVNqG+5fuLFnP8p0BXDPI=\ngithub.com/urfave/cli v1.20.0/go.mod h1:70zkFmudgCuE/ngEzBv17Jvp/497gISqfk5gWijbERA=\ngithub.com/urfave/cli v1.22.1/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/urfave/negroni v1.0.0 h1:kIimOitoypq34K7TG7DUaJ9kq/N4Ofuwi1sjz0KipXc=\ngithub.com/urfave/negroni v1.0.0/go.mod h1:Meg73S6kFm/4PpbYdq35yYWoCZ9mS/YSx+lKnmiohz4=\ngithub.com/uudashr/gocognit v1.0.1/go.mod h1:j44Ayx2KW4+oB6SWMv8KsmHzZrOInQav7D3cQMJ5JUM=\ngithub.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=\ngithub.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\ngithub.com/valyala/fasthttp v1.2.0/go.mod h1:4vX61m6KN+xDduDNwXrhIAVZaZaZiQ1luJk8LWSxF3s=\ngithub.com/valyala/quicktemplate v1.2.0/go.mod h1:EH+4AkTd43SvgIbQHYu59/cJyxDoOVRUAfrukLPuGJ4=\ngithub.com/valyala/tcplisten v0.0.0-20161114210144-ceec8f93295a/go.mod h1:v3UYOV9WzVtRmSR+PDvWpU/qWl4Wa5LApYYX4ZtKbio=\ngithub.com/vdemeester/k8s-pkg-credentialprovider v1.17.4/go.mod h1:inCTmtUdr5KJbreVojo06krnTgaeAz/Z7lynpPk/Q2c=\ngithub.com/vektah/gqlparser v1.1.2/go.mod h1:1ycwN7Ij5njmMkPPAOaRFY4rET2Enx7IkVv3vaXspKw=\ngithub.com/vmware/govmomi v0.20.3/go.mod h1:URlwyTFZX72RmxtxuaFL2Uj3fD1JTvZdx59bHWk6aFU=\ngithub.com/xanzy/go-gitlab v0.31.0/go.mod h1:sPLojNBn68fMUWSxIJtdVVIP8uSBYqesTfDUseX11Ug=\ngithub.com/xanzy/go-gitlab v0.32.0/go.mod h1:sPLojNBn68fMUWSxIJtdVVIP8uSBYqesTfDUseX11Ug=\ngithub.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c h1:u40Z8hqBAAQyv+vATcGgV0YCnDjqSL7/q/JyPhhJSPk=\ngithub.com/xdg/scram v0.0.0-20180814205039-7eeb5667e42c/go.mod h1:lB8K/P019DLNhemzwFU4jHLhdvlE6uDZjXFejJXr49I=\ngithub.com/xdg/stringprep v0.0.0-20180714160509-73f8eece6fdc/go.mod h1:Jhud4/sHMO4oL310DaZAKk9ZaJ08SJfe+sJh0HrGL1Y=\ngithub.com/xdg/stringprep v1.0.0 h1:d9X0esnoa3dFsV0FG35rAT0RIhYFlPq7MiP+DW89La0=\ngithub.com/xdg/stringprep v1.0.0/go.mod h1:Jhud4/sHMO4oL310DaZAKk9ZaJ08SJfe+sJh0HrGL1Y=\ngithub.com/xi2/xz v0.0.0-20171230120015-48954b6210f8/go.mod h1:HUYIGzjTL3rfEspMxjDjgmT5uz5wzYJKVo23qUhYTos=\ngithub.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=\ngithub.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=\ngithub.com/yargevad/filepathx v1.0.0 h1:SYcT+N3tYGi+NvazubCNlvgIPbzAk7i7y2dwg3I5FYc=\ngithub.com/yargevad/filepathx v1.0.0/go.mod h1:BprfX/gpYNJHJfc35GjRRpVcwWXS89gGulUIU5tK3tA=\ngithub.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngithub.com/zeebo/xxh3 v1.0.0 h1:6eLPZCVXpsGnhv8RiWBEJs5kenm2W1CMwon19/l8ODc=\ngithub.com/zeebo/xxh3 v1.0.0/go.mod h1:8VHV24/3AZLn3b6Mlp/KuC33LWH687Wq6EnziEB+rsA=\ngithub.com/zenazn/goji v0.9.0/go.mod h1:7S9M489iMyHBNxwZnk9/EHS098H4/F6TATF2mIxtB1Q=\ngo.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=\ngo.etcd.io/bbolt v1.3.3/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=\ngo.etcd.io/bbolt v1.3.5 h1:XAzx9gjCb0Rxj7EoqcClPD1d5ZBxZJk0jbuoPHenBt0=\ngo.etcd.io/bbolt v1.3.5/go.mod h1:G5EMThwa9y8QZGBClrRx5EY+Yw9kAhnjy3bSjsnlVTQ=\ngo.etcd.io/etcd v0.0.0-20191023171146-3cf2f69b5738/go.mod h1:dnLIgRNXwCJa5e+c6mIZCrds/GIG4ncV9HhK5PX7jPg=\ngo.etcd.io/etcd v0.5.0-alpha.5.0.20200910180754-dd1b699fc489 h1:1JFLBqwIgdyHN1ZtgjTBwO+blA6gVOmZurpiMEsETKo=\ngo.etcd.io/etcd v0.5.0-alpha.5.0.20200910180754-dd1b699fc489/go.mod h1:yVHk9ub3CSBatqGNg7GRmsnfLWtoW60w4eDYfh7vHDg=\ngo.etcd.io/etcd/api/v3 v3.5.0-beta.4/go.mod h1:yF0YUmBghT48aC0/eTFrhULo+uKQAr5spQQ6sRhPauE=\ngo.etcd.io/etcd/api/v3 v3.5.0 h1:GsV3S+OfZEOCNXdtNkBSR7kgLobAa/SO6tCxRa0GAYw=\ngo.etcd.io/etcd/api/v3 v3.5.0/go.mod h1:cbVKeC6lCfl7j/8jBhAK6aIYO9XOjdptoxU/nLQcPvs=\ngo.etcd.io/etcd/client/pkg/v3 v3.5.0-beta.4/go.mod h1:a+pbz+UrcOpvve1Qxf6tGovi15PjgtRhi0QTO2Nlc4U=\ngo.etcd.io/etcd/client/pkg/v3 v3.5.0 h1:2aQv6F436YnN7I4VbI8PPYrBhu+SmrTaADcf8Mi/6PU=\ngo.etcd.io/etcd/client/pkg/v3 v3.5.0/go.mod h1:IJHfcCEKxYu1Os13ZdwCwIUTUVGYTSAM3YSwc9/Ac1g=\ngo.etcd.io/etcd/client/v3 v3.5.0-beta.4/go.mod h1:0L1RulN1QSXq6uKPMUSX+OTAYyFkapMK7iUHXXIH/1E=\ngo.etcd.io/etcd/client/v3 v3.5.0 h1:62Eh0XOro+rDwkrypAGDfgmNh5Joq+z+W9HZdlXMzek=\ngo.etcd.io/etcd/client/v3 v3.5.0/go.mod h1:AIKXXVX/DQXtfTEqBryiLTUXwON+GuvO6Z7lLS/oTh0=\ngo.mongodb.org/mongo-driver v1.0.3/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=\ngo.mongodb.org/mongo-driver v1.1.1/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=\ngo.mongodb.org/mongo-driver v1.1.2/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=\ngo.mongodb.org/mongo-driver v1.3.0/go.mod h1:MSWZXKOynuguX+JSvwP8i+58jYCXxbia8HS3gZBapIE=\ngo.mongodb.org/mongo-driver v1.3.4/go.mod h1:MSWZXKOynuguX+JSvwP8i+58jYCXxbia8HS3gZBapIE=\ngo.mongodb.org/mongo-driver v1.4.3/go.mod h1:WcMNYLx/IlOxLe6JRJiv2uXuCz6zBLndR4SoGjYphSc=\ngo.mongodb.org/mongo-driver v1.4.4/go.mod h1:WcMNYLx/IlOxLe6JRJiv2uXuCz6zBLndR4SoGjYphSc=\ngo.mongodb.org/mongo-driver v1.4.6 h1:rh7GdYmDrb8AQSkF8yteAus8qYOgOASWDOv1BWqBXkU=\ngo.mongodb.org/mongo-driver v1.4.6/go.mod h1:WcMNYLx/IlOxLe6JRJiv2uXuCz6zBLndR4SoGjYphSc=\ngo.opencensus.io v0.15.0/go.mod h1:UffZAU+4sDEINUGP/B7UfBBkq4fqLu9zXAX7ke6CHW0=\ngo.opencensus.io v0.20.1/go.mod h1:6WKK9ahsWS3RSO+PY9ZHZUfv2irvY6gN279GOPZjmmk=\ngo.opencensus.io v0.20.2/go.mod h1:6WKK9ahsWS3RSO+PY9ZHZUfv2irvY6gN279GOPZjmmk=\ngo.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=\ngo.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=\ngo.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=\ngo.opencensus.io v0.22.5/go.mod h1:5pWMHQbX5EPX2/62yrJeAkowc+lfs/XD7Uxpq3pI6kk=\ngo.opencensus.io v0.23.0 h1:gqCw0LfLxScz8irSi8exQc7fyQ0fKQU/qnC/X8+V/1M=\ngo.opencensus.io v0.23.0/go.mod h1:XItmlyltB5F7CS4xOC1DcqMoFqwtC6OG2xF7mCv7P7E=\ngo.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=\ngo.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=\ngo.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/atomic v1.6.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=\ngo.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/goleak v1.1.10/go.mod h1:8a7PlsEVH3e/a/GLqe5IIrQx6GzcnRmZEufDUTk4A7A=\ngo.uber.org/goleak v1.1.11-0.20210813005559-691160354723 h1:sHOAIxRGBp443oHZIPB+HsUGaksVCXVQENPxwTfQdH4=\ngo.uber.org/goleak v1.1.11-0.20210813005559-691160354723/go.mod h1:cwTWslyiVhfpKIDGSZEM2HlOvcqm+tG4zioyIeLoqMQ=\ngo.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=\ngo.uber.org/multierr v1.3.0/go.mod h1:VgVr7evmIr6uPjLBxg28wmKNXyqE9akIJ5XnfpiKl+4=\ngo.uber.org/multierr v1.5.0/go.mod h1:FeouvMocqHpRaaGuG9EjoKcStLC43Zu/fmqdUMPcKYU=\ngo.uber.org/multierr v1.6.0/go.mod h1:cdWPpRnG4AhwMwsgIHip0KRBQjJy5kYEpYjJxpXp9iU=\ngo.uber.org/multierr v1.7.0 h1:zaiO/rmgFjbmCXdSYJWQcdvOCsthmdaHfr3Gm2Kx4Ec=\ngo.uber.org/multierr v1.7.0/go.mod h1:7EAYxJLBy9rStEaz58O2t4Uvip6FSURkq8/ppBp95ak=\ngo.uber.org/tools v0.0.0-20190618225709-2cfd321de3ee/go.mod h1:vJERXedbb3MVM5f9Ejo0C68/HhF8uaILCdgjnY+goOA=\ngo.uber.org/zap v1.8.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.9.1/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=\ngo.uber.org/zap v1.13.0/go.mod h1:zwrFLgMcdUuIBviXEYEH1YKNaOBnKXsx2IPda5bBwHM=\ngo.uber.org/zap v1.15.0/go.mod h1:Mb2vm2krFEG5DV0W9qcHBYFtp/Wku1cvYaqPsS/WYfc=\ngo.uber.org/zap v1.16.1-0.20210329175301-c23abee72d19/go.mod h1:aMfIlz3TDBfB0BwTCKFU1XbEmj9zevr5S5LcBr85MXw=\ngo.uber.org/zap v1.17.0/go.mod h1:MXVU+bhUf/A7Xi2HNOnopQOrmycQ5Ih87HtOu4q5SSo=\ngo.uber.org/zap v1.19.1 h1:ue41HOKd1vGURxrmeKIgELGb3jPW9DMUDGtsinblHwI=\ngo.uber.org/zap v1.19.1/go.mod h1:j3DNczoxDZroyBnOT1L/Q79cfUMGZxlv/9dzN7SM1rI=\ngocloud.dev v0.19.0/go.mod h1:SmKwiR8YwIMMJvQBKLsC3fHNyMwXLw3PMDO+VVteJMI=\ngolang.org/x/arch v0.0.0-20201008161808-52c3e6f60cff/go.mod h1:flIaEI6LNU6xOCD5PaJvn9wGP0agmIOqjrtsKGRguv4=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20181029021203-45a5f77698d3/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190211182817-74369b46fc67/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190320223903-b7391e95e576/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190411191339-88737f569e3a/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=\ngolang.org/x/crypto v0.0.0-20190422162423-af44ce270edf/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=\ngolang.org/x/crypto v0.0.0-20190426145343-a29dc8fdc734/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190513172903-22d7a77e9e5f/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190611184440-5c40567a22f8/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190617133340-57b3e21c3d56/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190820162420-60c769a6c586/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190911031432-227b76d455e7/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191002192127-34f69633bfdc/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191117063200-497ca9f6d64f/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20191205180655-e7c4368fe9dd/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20191206172530-e9b2fee46413/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200117160349-530e935923ad/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200220183623-bac4c82f6975/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200302210943-78000ba7a073/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200323165209-0ec3e9974c59/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200604202706-70a84ac30bf9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200709230013-948cd5f35899/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200820211705-5c72a883971a/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201112155050-0c6587e931a9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20201124201722-c8d3bf9c5392/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20201216223049-8b5274cf687f/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20201217014255-9d1352758620/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20210220033148-5ea612d1eb83/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=\ngolang.org/x/crypto v0.0.0-20210314154223-e6e6c4f2bb5b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/crypto v0.0.0-20210421170649-83a5a9bb288b/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/crypto v0.0.0-20210616213533-5ff15b29337e/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20211209193657-4570a0811e8b h1:QAqMVf3pSa6eeTsuklijukjXBlj7Es2QQplab+/RbQ4=\ngolang.org/x/crypto v0.0.0-20211209193657-4570a0811e8b/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190125153040-c74c464bbbf2/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20190312203227-4b39c73a6495/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=\ngolang.org/x/exp v0.0.0-20190829153037-c13cbed26979/go.mod h1:86+5VVa7VpoJ4kLfm080zCjGlMRFzhUhsZKEZO7MGek=\ngolang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=\ngolang.org/x/exp v0.0.0-20191129062945-2f5052295587/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20191227195350-da58074b4299/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=\ngolang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=\ngolang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=\ngolang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=\ngolang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190909230951-414d861bb4ac/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=\ngolang.org/x/lint v0.0.0-20200130185559-910be7a94367/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20201208152925-83fdc39ff7b5/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/lint v0.0.0-20210508222113-6edffad5e616/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=\ngolang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.1.1-0.20191107180719-034126e5016b/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.1-0.20200828183125-ce943fd02449/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.1/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20170114055629-f2499483f923/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180911220305-26e67e76b6c3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181005035420-146acd28ed58/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181023162649-9b4f9f5ad519/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181108082009-03003ca0c849/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181201002055-351d144fa1fc/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190125091013-d26f9f9a57f3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190320064053-1272bf9dcd53/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190619014844-b5b0513f8c1b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190628185345-da137c7871d7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190827160401-ba9fcec4b297/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191004110552-13f9640d40b9/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191112182307-2180aed22343/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200222125558-5a598a2470a0/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200301022130-244492dfa37a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200425230154-ff2c4b7c35a0/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200501053045-e0ff5e5a1de5/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200506145744-7e3656a0809f/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200513185701-a91f0712d120/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200602114024-627f9648deb9/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20200904194848-62affa334b73/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201031054903-ff519b6c9102/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201202161906-c7110b5ffcbb/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20201209123823-ac852fbbde11/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20201224014010-6772e930b67b/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210119194325-5f4716e94777/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210224082022-3d97a244fca7/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210316092652-d523dce5a7f4/go.mod h1:RBQZq4jEuRlivfhVLdyRGr576XBO4/greRjx4P4O3yc=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20210421230115-4e50805a0758/go.mod h1:72T/g9IO56b78aLF+1Kcs5dz7/ng1VjMUvfKvpfy+jM=\ngolang.org/x/net v0.0.0-20210503060351-7fd8e65b6420/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20210525063256-abc453219eb5/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20211015210444-4f30a5c0130f/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2 h1:CIJ76btIcR3eFI5EgSo6k1qKw9KJexJuRLI9G7Hp5wE=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20181106182150-f42d05182288/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20190402181905-9f3314589c9a/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/oauth2 v0.0.0-20200902213428-5d25da1a8d43/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20201109201403-9fd604954f58/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20201208152858-08078c50e5b5/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210218202405-ba52d332ba99/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210220000619-9bb904979d93/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210313182246-cd4f82c27b84/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210514164344-f6687ab2804c/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210628180205-a41e5a781914/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210805134026-6f1e6394065a/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/oauth2 v0.0.0-20210819190943-2bc19b11175f h1:Qmd2pbz05z7z6lm0DrgQVVPuBm92jqujBKMHMOlOQEw=\ngolang.org/x/oauth2 v0.0.0-20210819190943-2bc19b11175f/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190412183630-56d357773e84/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201207232520-09787c993a3a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c h1:5KslGYwFpkhGh+Q16bwMP3cOontH8FOep7tGV86Y7SQ=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20170830134202-bb24a47a89ea/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180816055513-1c9583448a9c/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180926160741-c2ed4eda69e7/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181026203630-95b1ffbd15a5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181122145206-62eef0e2fa9b/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190129075346-302c3dd5f1cc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190130150945-aca44879d564/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190209173611-3b5209105503/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190321052220-f7bb7a8bee54/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190403152447-81d4e9dc473e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190419153524-e8e3143a4f4a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190523142557-0e01d883c5c5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190531175056-4c3a928424d2/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190616124812-15dcb6c0061f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190620070143-6f217b454f45/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190626221950-04f50cda93cb/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190922100055-0a153f010e69/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191008105621-543471e840be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191022100944-742c48ecaeb7/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191112214154-59a1497f0cea/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191220142924-d4481acd189f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191220220014-0732a990476f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200106162015-b016eb3dc98e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200212091648-12a6c2dcc1e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200302150141-5c8b2ff67527/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200331124033-c3d80250170d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200501052902-10377860bb8e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200511232937-7e40ca221e25/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200515095857-1151b9dac4a9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200519105757-fe76b779f299/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200615200032-f1bc736245b1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200622214017-ed371f2e16b4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200625212154-ddb9806d33ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200803210538-64077c9b5642/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200828194041-157a740278f4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200831180312-196b9ba8737a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200905004654-be1d3432aa8f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201015000850-e3ed0017c211/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201101102859-da207088b7d1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201112073958-5cba982894dd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201201145000-ef89a241ccb3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210104204734-6f8348627aad/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210112080510-489259a85091/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210217105451-b926d437f341/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210220050731-9a76102bfb43/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210225134936-a50acf3fe073/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210305230114-8fe3ee5dd75b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210315160823-c6e025ad8005/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210316164454-77fc1eacc6aa/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210320140829-1e4c9ba3b0c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210403161142-5e06dd20ab57/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210420072515-93ed5bcd2bfe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210514084401-e8d321eab015/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210603081109-ebe580a85c40/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210603125802-9665404d3644/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210806184541-e5e7981a1069/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210816074244-15123e1e1f71/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210823070655-63515b42dcdf/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210917161153-d61c044b1678/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211015200801-69063c4bb744/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211020174200-9d6173849985 h1:LOlKVhfDyahgmqa97awczplwkjzNaELFg3zRIJ13RYo=\ngolang.org/x/sys v0.0.0-20211020174200-9d6173849985/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210220032956-6a3ed077a48d/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210406210042-72f3dc4e9b72/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211 h1:JGgROgKl9N8DuW20oFS5gxc+lE67/N3FcwmBPMe7ArY=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.0.0-20160726164857-2910a502d2bf/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20181227161524-e6919f6577db/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/time v0.0.0-20180412165947-fbb02b2291d2/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20200416051211-89c76fbcd5d1/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20200630173020-3af7569d3a1e/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20210220033141-f8bda1e9f3ba/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac h1:7zkz7BUtwNFFqcowJ+RIgu2MaV/MapERkDIy+mwPyjs=\ngolang.org/x/time v0.0.0-20210723032227-1f47c861a9ac/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180525024113-a5b4c53f6e8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180828015842-6cd1fcedba52/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181011042414-1f849cf54d09/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181117154741-2ddaf7f79a09/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190110163146-51295c7ec13a/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190125232054-d66bd3c5d5a6/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190206041539-40960b6deb8e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190221204921-83362c3779f5/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190311215038-5c2858a9cfe5/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190322203728-c1a832b0ad89/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190329151228-23e29df326fe/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190416151739-9c9e1878f421/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190420181800-aa740d480789/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190422233926-fe54fb35175b/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190424220101-1e8e1cfdf96b/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190425163242-31fd60d6bfdc/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190521203540-521d6ed310dd/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20190531172133-b3315ee88b7d/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190614205625-5aca471b1d59/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190617190820-da514acc4774/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20190706070813-72ffa07ba3db/go.mod h1:jcCCGcm9btYwXyDqrUWc6MKQKKGJCWEQ3AfLSRIbEuI=\ngolang.org/x/tools v0.0.0-20190719005602-e377ae9d6386/go.mod h1:jcCCGcm9btYwXyDqrUWc6MKQKKGJCWEQ3AfLSRIbEuI=\ngolang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190823170909-c4a336ef6a2f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190910044552-dd2b5c81c578/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20190920225731-5eefd052ad72/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191108193012-7d206e10da11/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191112195655-aa38f8e97acc/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191113191852-77e3bb0ad9e7/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191113232020-e2727e816f5a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191115202509-3a792d9c32b2/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191130070609-6e064ea0cf2d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191216173652-a0e659d51361/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20191227053925-7b8e75db28f4/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200102140908-9497f49d5709/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200103221440-774c71fcf114/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200117161641-43d50277825c/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200122220014-bf1340f18c4a/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200204074204-1cc6d1ef6c74/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200204192400-7124308813f3/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200207183749-b753a1ba74fa/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200212150539-ea181f53ac56/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200224181240-023911ca70b2/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200227222343-706bc42d1f0d/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200304193943-95d2e580d8eb/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200312045724-11d5b4c81c7d/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=\ngolang.org/x/tools v0.0.0-20200324003944-a576cf524670/go.mod h1:Sl4aGygMT6LrqrWclx+PTx3U+LnKx/seiNR+3G19Ar8=\ngolang.org/x/tools v0.0.0-20200331025713-a30bf2db82d4/go.mod h1:Sl4aGygMT6LrqrWclx+PTx3U+LnKx/seiNR+3G19Ar8=\ngolang.org/x/tools v0.0.0-20200331202046-9d5940d49312/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200414032229-332987a829c3/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200422022333-3d57cf2e726e/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200426102838-f3a5411a4c3b/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200502202811-ed308ab3e770/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200505023115-26f46d2f7ef8/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200512131952-2bc93b1c0c88/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200515010526-7d3b6ebf133d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200616133436-c1934b75d054/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200618134242-20370b0cb4b2/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200626171337-aa94e735be7f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20200729194436-6467de6f59a7/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200804011535-6c149bb5ef0d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200825202427-b303f430e36d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200828161849-5deb26317202/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=\ngolang.org/x/tools v0.0.0-20200904185747-39188db58858/go.mod h1:Cj7w3i3Rnn0Xh82ur9kSqwfTHTeVxaDqrfMjpcNT6bE=\ngolang.org/x/tools v0.0.0-20200918232735-d647fc253266/go.mod h1:z6u4i615ZeAfBE4XtMziQW1fSVJXACjjbWkB/mvPzlU=\ngolang.org/x/tools v0.0.0-20201022035929-9cf592e881e9/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201105001634-bc3cf281b174/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201110124207-079ba7bd75cd/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201201161351-ac6f37ff4c2a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201208233053-a543418bbed2/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20201224043029-2b0845dc783e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210105154028-b0ab187a4818/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.0.0-20210114065538-d78b04bdf963/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=\ngolang.org/x/tools v0.1.1/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.2/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.3/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.4/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/xerrors v0.0.0-20190410155217-1f06c39b4373/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20190513163551-3ee3066db522/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngomodules.xyz/jsonpatch/v2 v2.1.0/go.mod h1:IhYNNY4jnS53ZnfE4PAmpKtDpTCj1JFXc+3mwe7XcUU=\ngonum.org/v1/gonum v0.0.0-20190331200053-3d26580ed485/go.mod h1:2ltnJ7xHfj0zHS40VVPYEAAMTa3ZGguvHGBSJeRWqE0=\ngonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=\ngonum.org/v1/netlib v0.0.0-20190331212654-76723241ea4e/go.mod h1:kS+toOQn6AQKjmKJ7gzohV1XkqsFehRA2FbsbkopSuQ=\ngoogle.golang.org/api v0.3.1/go.mod h1:6wY9I6uQWHQ8EM57III9mq/AjF+i8G65rmVagqKMtkk=\ngoogle.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=\ngoogle.golang.org/api v0.5.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=\ngoogle.golang.org/api v0.6.0/go.mod h1:btoxGiFvQNVUZQ8W08zLtrVS08CNpINPEfxXxgJL1Q4=\ngoogle.golang.org/api v0.6.1-0.20190607001116-5213b8090861/go.mod h1:btoxGiFvQNVUZQ8W08zLtrVS08CNpINPEfxXxgJL1Q4=\ngoogle.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=\ngoogle.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=\ngoogle.golang.org/api v0.13.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.14.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.15.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=\ngoogle.golang.org/api v0.17.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.18.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.19.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.20.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.22.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=\ngoogle.golang.org/api v0.24.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.25.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.28.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=\ngoogle.golang.org/api v0.29.0/go.mod h1:Lcubydp8VUV7KeIHD9z2Bys/sm/vGKnG1UHuDBSrHWM=\ngoogle.golang.org/api v0.30.0/go.mod h1:QGmEvQ87FHZNiUVJkT14jQNYJ4ZJjdRF23ZXz5138Fc=\ngoogle.golang.org/api v0.31.0/go.mod h1:CL+9IBCa2WWU6gRuBWaKqGWLFFwbEUXkfeMkHLQWYWo=\ngoogle.golang.org/api v0.35.0/go.mod h1:/XrVsuzM0rZmrsbjJutiuftIzeuTQcEeaYcSk/mQ1dg=\ngoogle.golang.org/api v0.36.0/go.mod h1:+z5ficQTmoYpPn8LCUNVpK5I7hwkpjbcgqA7I34qYtE=\ngoogle.golang.org/api v0.40.0/go.mod h1:fYKFpnQN0DsDSKRVRcQSDQNtqWPfM9i+zNPxepjRCQ8=\ngoogle.golang.org/api v0.41.0/go.mod h1:RkxM5lITDfTzmyKFPt+wGrCJbVfniCr2ool8kTBzRTU=\ngoogle.golang.org/api v0.43.0/go.mod h1:nQsDGjRXMo4lvh5hP0TKqF244gqhGcr/YSIykhUk/94=\ngoogle.golang.org/api v0.47.0/go.mod h1:Wbvgpq1HddcWVtzsVLyfLp8lDg6AA241LmgIL59tHXo=\ngoogle.golang.org/api v0.48.0/go.mod h1:71Pr1vy+TAZRPkPs/xlCf5SsU8WjuAWv1Pfjbtukyy4=\ngoogle.golang.org/api v0.50.0/go.mod h1:4bNT5pAuq5ji4SRZm+5QIkjny9JAyVD/3gaSihNefaw=\ngoogle.golang.org/api v0.51.0/go.mod h1:t4HdrdoNgyN5cbEfm7Lum0lcLDLiise1F8qDKX00sOU=\ngoogle.golang.org/api v0.54.0/go.mod h1:7C4bFFOvVDGXjfDTAsgGwDgAxRDeQ4X8NvUedIt6z3k=\ngoogle.golang.org/api v0.55.0/go.mod h1:38yMfeP1kfjsl8isn0tliTjIb1rJXcQi4UXlbqivdVE=\ngoogle.golang.org/api v0.56.0/go.mod h1:38yMfeP1kfjsl8isn0tliTjIb1rJXcQi4UXlbqivdVE=\ngoogle.golang.org/api v0.58.0 h1:MDkAbYIB1JpSgCTOCYYoIec/coMlKK4oVbpnBLLcyT0=\ngoogle.golang.org/api v0.58.0/go.mod h1:cAbP2FsxoGVNwtgNAmmn3y5G1TWAiVYRmg4yku3lv+E=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.2.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.3.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=\ngoogle.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/appengine v1.6.7 h1:FZR1q0exgwxzPzp/aF+VccGrSfxfPpkBqjIIEq3ru6c=\ngoogle.golang.org/appengine v1.6.7/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190404172233-64821d5d2107/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190508193815-b515fa19cec8/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/genproto v0.0.0-20190530194941-fb225487d101/go.mod h1:z3L6/3dTEVtUr6QSP8miRzeRqwQOioJ9I66odjN4I7s=\ngoogle.golang.org/genproto v0.0.0-20190620144150-6af8c5fc6601/go.mod h1:z3L6/3dTEVtUr6QSP8miRzeRqwQOioJ9I66odjN4I7s=\ngoogle.golang.org/genproto v0.0.0-20190801165951-fa694d86fc64/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20190911173649-1774047e7e51/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=\ngoogle.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1a/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191115194625-c23dd37a84c9/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191216164720-4f79533eabd1/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191220175831-5c49e3ecc1c1/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20191230161307-f3c370f40bfb/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200115191322-ca5a22157cba/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200122232147-0452cf42e150/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=\ngoogle.golang.org/genproto v0.0.0-20200204135345-fa8e72b47b90/go.mod h1:GmwEX6Z4W5gMy59cAlVYjN9JhxgbQH6Gn+gFDQe2lzA=\ngoogle.golang.org/genproto v0.0.0-20200212174721-66ed5ce911ce/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200228133532-8c2c7df3a383/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200305110556-506484158171/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200312145019-da6875a35672/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200331122359-1ee6d9798940/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200430143042-b979b6f78d84/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200511104702-f5ebc3bea380/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=\ngoogle.golang.org/genproto v0.0.0-20200515170657-fc4c6c6a6587/go.mod h1:YsZOwe1myG/8QRHRsmBRE1LrgQY60beZKjly0O1fX9U=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto v0.0.0-20200527145253-8367513e4ece/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=\ngoogle.golang.org/genproto v0.0.0-20200618031413-b414f8b61790/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=\ngoogle.golang.org/genproto v0.0.0-20200626011028-ee7919e894b5/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200729003335-053ba62fc06f/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200831141814-d751682dd103/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200901141002-b3bf27a9dbd1/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20200904004341-0bd0a958aa1d/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201109203340-2640f1f9cdfb/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201110150050-8816d57aaa9a/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201201144952-b05cb90ed32e/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201210142538-e3217bee35cc/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20201214200347-8c77b98c765d/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210222152913-aa3ee6e6a81c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210303154014-9728d6b83eeb/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210310155132-4ce2db91004e/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210319143718-93e7006c17a6/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=\ngoogle.golang.org/genproto v0.0.0-20210402141018-6c239bbf2bb1/go.mod h1:9lPAdzaEmUacj36I+k7YKbEc5CXzPIeORRgDAUOu28A=\ngoogle.golang.org/genproto v0.0.0-20210513213006-bf773b8c8384/go.mod h1:P3QM42oQyzQSnHPnZ/vqoCdDmzH28fzWByN9asMeM8A=\ngoogle.golang.org/genproto v0.0.0-20210602131652-f16073e35f0c/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=\ngoogle.golang.org/genproto v0.0.0-20210604141403-392c879c8b08/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=\ngoogle.golang.org/genproto v0.0.0-20210608205507-b6d2f5bf0d7d/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=\ngoogle.golang.org/genproto v0.0.0-20210624195500-8bfb893ecb84/go.mod h1:SzzZ/N+nwJDaO1kznhnlzqS8ocJICar6hYhVyhi++24=\ngoogle.golang.org/genproto v0.0.0-20210713002101-d411969a0d9a/go.mod h1:AxrInvYm1dci+enl5hChSFPOmmUF1+uAa/UsgNRWd7k=\ngoogle.golang.org/genproto v0.0.0-20210716133855-ce7ef5c701ea/go.mod h1:AxrInvYm1dci+enl5hChSFPOmmUF1+uAa/UsgNRWd7k=\ngoogle.golang.org/genproto v0.0.0-20210728212813-7823e685a01f/go.mod h1:ob2IJxKrgPT52GcgX759i1sleT07tiKowYBGbczaW48=\ngoogle.golang.org/genproto v0.0.0-20210805201207-89edb61ffb67/go.mod h1:ob2IJxKrgPT52GcgX759i1sleT07tiKowYBGbczaW48=\ngoogle.golang.org/genproto v0.0.0-20210813162853-db860fec028c/go.mod h1:cFeNkxwySK631ADgubI+/XFU/xp8FD5KIVV4rj8UC5w=\ngoogle.golang.org/genproto v0.0.0-20210821163610-241b8fcbd6c8/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210828152312-66f60bf46e71/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210831024726-fe130286e0e2/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210909211513-a8c4777a87af/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210917145530-b395a37504d4/go.mod h1:eFjDcFEctNawg4eG61bRv87N7iHBWyVhJu7u1kqDUXY=\ngoogle.golang.org/genproto v0.0.0-20210928142010-c7af6a1a74c9 h1:XTH066D35LyHehRwlYhoK3qA+Hcgvg5xREG4kFQEW1Y=\ngoogle.golang.org/genproto v0.0.0-20210928142010-c7af6a1a74c9/go.mod h1:5CzLGKJ67TSI2B9POpiiyGha0AjJvZIUgRMt1dSmuhc=\ngoogle.golang.org/grpc v1.14.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=\ngoogle.golang.org/grpc v1.17.0/go.mod h1:6QZJwpn2B+Zp71q/5VxRsJ6NXXVCE5NRUHRo+f3cWCs=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.20.0/go.mod h1:chYK+tFQF0nDUGJgXMSgLCQk3phJEuONr2DCgLDdAQM=\ngoogle.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=\ngoogle.golang.org/grpc v1.21.0/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=\ngoogle.golang.org/grpc v1.22.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.22.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.23.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.28.0/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKal+60=\ngoogle.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=\ngoogle.golang.org/grpc v1.30.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.31.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.31.1/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=\ngoogle.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/grpc v1.34.0/go.mod h1:WotjhfgOW/POjDeRt8vscBtXq+2VjORFy659qA51WJ8=\ngoogle.golang.org/grpc v1.35.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.36.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.36.1/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=\ngoogle.golang.org/grpc v1.37.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.37.1/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.38.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=\ngoogle.golang.org/grpc v1.39.0/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=\ngoogle.golang.org/grpc v1.39.1/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=\ngoogle.golang.org/grpc v1.40.0/go.mod h1:ogyxbiOoUXAkP+4+xa6PZSE9DZgIHtSpzjDTB9KAK34=\ngoogle.golang.org/grpc v1.41.0 h1:f+PlOh7QV4iIJkPrx5NQ7qaNGFQ3OTse67yaDHfju4E=\ngoogle.golang.org/grpc v1.41.0/go.mod h1:U3l9uK9J0sini8mHphKoXyaqDA/8VyGnDee1zzIUK6k=\ngoogle.golang.org/grpc/cmd/protoc-gen-go-grpc v1.1.0/go.mod h1:6Kw0yEErY5E/yWrBtf03jp27GLLJujG4z/JK95pnjjw=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.27.1 h1:SnqbnDw1V7RiZcXPx5MEeqPv2s79L9i7BJUlG/+RurQ=\ngoogle.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/asn1-ber.v1 v1.0.0-20181015200546-f715ec2f112d/go.mod h1:cuepJuh7vyXfUyUwEgHQXw849cJrilpS5NeIjOWESAw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b h1:QRR6H1YWRnHb4Y/HeNFCTJLFVxaq6wH4YuVdsUOr75U=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/cheggaaa/pb.v1 v1.0.25/go.mod h1:V/YB90LKu/1FcN3WVnfiiE5oMCibMjukxqG/qStrOgw=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/gcfg.v1 v1.2.0/go.mod h1:yesOnuUOFQAhST5vPY4nbZsb/huCgGGXlipJsBn0b3o=\ngopkg.in/gcfg.v1 v1.2.3/go.mod h1:yesOnuUOFQAhST5vPY4nbZsb/huCgGGXlipJsBn0b3o=\ngopkg.in/h2non/filetype.v1 v1.0.5 h1:CC1jjJjoEhNVbMhXYalmGBhOBK2V70Q1N850wt/98/Y=\ngopkg.in/h2non/filetype.v1 v1.0.5/go.mod h1:M0yem4rwSX5lLVrkEuRRp2/NinFMD5vgJ4DlAhZcfNo=\ngopkg.in/inconshreveable/log15.v2 v2.0.0-20180818164646-67afb5ed74ec/go.mod h1:aPpfJ7XW+gOuirDoZ8gHhLh3kZ1B08FtV2bbmy7Jv3s=\ngopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=\ngopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=\ngopkg.in/ini.v1 v1.51.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/ini.v1 v1.56.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/ini.v1 v1.57.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/ini.v1 v1.63.2 h1:tGK/CyBg7SMzb60vP1M03vNZ3VDu3wGQJwn7Sxi9r3c=\ngopkg.in/ini.v1 v1.63.2/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/jcmturner/aescts.v1 v1.0.1 h1:cVVZBK2b1zY26haWB4vbBiZrfFQnfbTVrE3xZq6hrEw=\ngopkg.in/jcmturner/aescts.v1 v1.0.1/go.mod h1:nsR8qBOg+OucoIW+WMhB3GspUQXq9XorLnQb9XtvcOo=\ngopkg.in/jcmturner/dnsutils.v1 v1.0.1 h1:cIuC1OLRGZrld+16ZJvvZxVJeKPsvd5eUIvxfoN5hSM=\ngopkg.in/jcmturner/dnsutils.v1 v1.0.1/go.mod h1:m3v+5svpVOhtFAP/wSz+yzh4Mc0Fg7eRhxkJMWSIz9Q=\ngopkg.in/jcmturner/goidentity.v3 v3.0.0 h1:1duIyWiTaYvVx3YX2CYtpJbUFd7/UuPYCfgXtQ3VTbI=\ngopkg.in/jcmturner/goidentity.v3 v3.0.0/go.mod h1:oG2kH0IvSYNIu80dVAyu/yoefjq1mNfM5bm88whjWx4=\ngopkg.in/jcmturner/gokrb5.v7 v7.5.0 h1:a9tsXlIDD9SKxotJMK3niV7rPZAJeX2aD/0yg3qlIrg=\ngopkg.in/jcmturner/gokrb5.v7 v7.5.0/go.mod h1:l8VISx+WGYp+Fp7KRbsiUuXTTOnxIc3Tuvyavf11/WM=\ngopkg.in/jcmturner/rpc.v1 v1.1.0 h1:QHIUxTX1ISuAv9dD2wJ9HWQVuWDX/Zc0PfeC2tjc4rU=\ngopkg.in/jcmturner/rpc.v1 v1.1.0/go.mod h1:YIdkC4XfD6GXbzje11McwsDuOlZQSb9W4vfLvuNnlv8=\ngopkg.in/natefinch/lumberjack.v2 v2.0.0/go.mod h1:l0ndWWf7gzL7RNwBG7wST/UCcT4T24xpD6X8LsfU/+k=\ngopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=\ngopkg.in/square/go-jose.v2 v2.2.2/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=\ngopkg.in/square/go-jose.v2 v2.3.1 h1:SK5KegNXmKmqE342YYN2qPHEnUYeoMiXXl1poUlI+o4=\ngopkg.in/square/go-jose.v2 v2.3.1/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/urfave/cli.v1 v1.20.0/go.mod h1:vuBzUtMdQeixQj8LVd+/98pzhxNGQoyuPBlsXHOQNO0=\ngopkg.in/warnings.v0 v0.1.1/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.7/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20200605160147-a5ece683394c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b h1:h8qDotaEPuJATrMmW04NCwg7v22aHH28wwpauUhK9Oo=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=\ngotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=\ngotest.tools/v3 v3.0.3/go.mod h1:Z7Lb0S5l+klDB31fvDQX8ss/FlKDxtlFlw3Oa8Ymbl8=\nhonnef.co/go/tools v0.0.0-20180728063816-88497007e858/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nhonnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nhonnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nhonnef.co/go/tools v0.0.1-2020.1.5/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=\nk8s.io/api v0.17.0/go.mod h1:npsyOePkeP0CPwyGfXDHxvypiYMJxBWAMpQxCaJ4ZxI=\nk8s.io/api v0.17.4/go.mod h1:5qxx6vjmwUVG2nHQTKGlLts8Tbok8PzHl4vHtVFuZCA=\nk8s.io/api v0.18.3/go.mod h1:UOaMwERbqJMfeeeHc8XJKawj4P9TgDRnViIqqBeH2QA=\nk8s.io/api v0.19.2/go.mod h1:IQpK0zFQ1xc5iNIQPqzgoOwuFugaYHK4iCknlAQP9nI=\nk8s.io/api v0.20.1/go.mod h1:KqwcCVogGxQY3nBlRpwt+wpAMF/KjaCc7RpywacvqUo=\nk8s.io/api v0.20.2/go.mod h1:d7n6Ehyzx+S+cE3VhTGfVNNqtGc/oL9DCdYYahlurV8=\nk8s.io/api v0.21.1 h1:94bbZ5NTjdINJEdzOkpS4vdPhkb1VFpTYC9zh43f75c=\nk8s.io/api v0.21.1/go.mod h1:FstGROTmsSHBarKc8bylzXih8BLNYTiS3TZcsoEDg2s=\nk8s.io/apiextensions-apiserver v0.18.3/go.mod h1:TMsNGs7DYpMXd+8MOCX8KzPOCx8fnZMoIGB24m03+JE=\nk8s.io/apiextensions-apiserver v0.20.1/go.mod h1:ntnrZV+6a3dB504qwC5PN/Yg9PBiDNt1EVqbW2kORVk=\nk8s.io/apiextensions-apiserver v0.20.2/go.mod h1:F6TXp389Xntt+LUq3vw6HFOLttPa0V8821ogLGwb6Zs=\nk8s.io/apiextensions-apiserver v0.21.1/go.mod h1:KESQFCGjqVcVsZ9g0xX5bacMjyX5emuWcS2arzdEouA=\nk8s.io/apimachinery v0.17.0/go.mod h1:b9qmWdKlLuU9EBh+06BtLcSf/Mu89rWL33naRxs1uZg=\nk8s.io/apimachinery v0.17.1-beta.0/go.mod h1:b9qmWdKlLuU9EBh+06BtLcSf/Mu89rWL33naRxs1uZg=\nk8s.io/apimachinery v0.17.4/go.mod h1:gxLnyZcGNdZTCLnq3fgzyg2A5BVCHTNDFrw8AmuJ+0g=\nk8s.io/apimachinery v0.18.3/go.mod h1:OaXp26zu/5J7p0f92ASynJa1pZo06YlV9fG7BoWbCko=\nk8s.io/apimachinery v0.19.2/go.mod h1:DnPGDnARWFvYa3pMHgSxtbZb7gpzzAZ1pTfaUNDVlmA=\nk8s.io/apimachinery v0.20.1/go.mod h1:WlLqWAHZGg07AeltaI0MV5uk1Omp8xaN0JGLY6gkRpU=\nk8s.io/apimachinery v0.20.2/go.mod h1:WlLqWAHZGg07AeltaI0MV5uk1Omp8xaN0JGLY6gkRpU=\nk8s.io/apimachinery v0.21.1 h1:Q6XuHGlj2xc+hlMCvqyYfbv3H7SRGn2c8NycxJquDVs=\nk8s.io/apimachinery v0.21.1/go.mod h1:jbreFvJo3ov9rj7eWT7+sYiRx+qZuCYXwWT1bcDswPY=\nk8s.io/apiserver v0.17.4/go.mod h1:5ZDQ6Xr5MNBxyi3iUZXS84QOhZl+W7Oq2us/29c0j9I=\nk8s.io/apiserver v0.18.3/go.mod h1:tHQRmthRPLUtwqsOnJJMoI8SW3lnoReZeE861lH8vUw=\nk8s.io/apiserver v0.20.1/go.mod h1:ro5QHeQkgMS7ZGpvf4tSMx6bBOgPfE+f52KwvXfScaU=\nk8s.io/apiserver v0.20.2/go.mod h1:2nKd93WyMhZx4Hp3RfgH2K5PhwyTrprrkWYnI7id7jA=\nk8s.io/apiserver v0.21.1/go.mod h1:nLLYZvMWn35glJ4/FZRhzLG/3MPxAaZTgV4FJZdr+tY=\nk8s.io/client-go v0.17.0/go.mod h1:TYgR6EUHs6k45hb6KWjVD6jFZvJV4gHDikv/It0xz+k=\nk8s.io/client-go v0.17.4/go.mod h1:ouF6o5pz3is8qU0/qYL2RnoxOPqgfuidYLowytyLJmc=\nk8s.io/client-go v0.18.3/go.mod h1:4a/dpQEvzAhT1BbuWW09qvIaGw6Gbu1gZYiQZIi1DMw=\nk8s.io/client-go v0.19.2/go.mod h1:S5wPhCqyDNAlzM9CnEdgTGV4OqhsW3jGO1UM1epwfJA=\nk8s.io/client-go v0.20.1/go.mod h1:/zcHdt1TeWSd5HoUe6elJmHSQ6uLLgp4bIJHVEuy+/Y=\nk8s.io/client-go v0.20.2/go.mod h1:kH5brqWqp7HDxUFKoEgiI4v8G1xzbe9giaCenUWJzgE=\nk8s.io/client-go v0.21.1 h1:bhblWYLZKUu+pm50plvQF8WpY6TXdRRtcS/K9WauOj4=\nk8s.io/client-go v0.21.1/go.mod h1:/kEw4RgW+3xnBGzvp9IWxKSNA+lXn3A7AuH3gdOAzLs=\nk8s.io/cloud-provider v0.17.4/go.mod h1:XEjKDzfD+b9MTLXQFlDGkk6Ho8SGMpaU8Uugx/KNK9U=\nk8s.io/code-generator v0.17.2/go.mod h1:DVmfPQgxQENqDIzVR2ddLXMH34qeszkKSdH/N+s+38s=\nk8s.io/code-generator v0.18.3/go.mod h1:TgNEVx9hCyPGpdtCWA34olQYLkh3ok9ar7XfSsr8b6c=\nk8s.io/code-generator v0.20.1/go.mod h1:UsqdF+VX4PU2g46NC2JRs4gc+IfrctnwHb76RNbWHJg=\nk8s.io/code-generator v0.20.2/go.mod h1:UsqdF+VX4PU2g46NC2JRs4gc+IfrctnwHb76RNbWHJg=\nk8s.io/code-generator v0.21.1/go.mod h1:hUlps5+9QaTrKx+jiM4rmq7YmH8wPOIko64uZCHDh6Q=\nk8s.io/component-base v0.17.0/go.mod h1:rKuRAokNMY2nn2A6LP/MiwpoaMRHpfRnrPaUJJj1Yoc=\nk8s.io/component-base v0.17.4/go.mod h1:5BRqHMbbQPm2kKu35v3G+CpVq4K0RJKC7TRioF0I9lE=\nk8s.io/component-base v0.18.3/go.mod h1:bp5GzGR0aGkYEfTj+eTY0AN/vXTgkJdQXjNTTVUaa3k=\nk8s.io/component-base v0.20.1/go.mod h1:guxkoJnNoh8LNrbtiQOlyp2Y2XFCZQmrcg2n/DeYNLk=\nk8s.io/component-base v0.20.2/go.mod h1:pzFtCiwe/ASD0iV7ySMu8SYVJjCapNM9bjvk7ptpKh0=\nk8s.io/component-base v0.21.1/go.mod h1:NgzFZ2qu4m1juby4TnrmpR8adRk6ka62YdH5DkIIyKA=\nk8s.io/csi-translation-lib v0.17.4/go.mod h1:CsxmjwxEI0tTNMzffIAcgR9lX4wOh6AKHdxQrT7L0oo=\nk8s.io/gengo v0.0.0-20190128074634-0689ccc1d7d6/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=\nk8s.io/gengo v0.0.0-20190822140433-26a664648505/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=\nk8s.io/gengo v0.0.0-20200114144118-36b2048a9120/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=\nk8s.io/gengo v0.0.0-20200413195148-3a45101e95ac/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=\nk8s.io/gengo v0.0.0-20201113003025-83324d819ded/go.mod h1:FiNAH4ZV3gBg2Kwh89tzAEV2be7d5xI0vBa/VySYy3E=\nk8s.io/gengo v0.0.0-20201214224949-b6c5ce23f027/go.mod h1:FiNAH4ZV3gBg2Kwh89tzAEV2be7d5xI0vBa/VySYy3E=\nk8s.io/klog v0.0.0-20181102134211-b9b56d5dfc92/go.mod h1:Gq+BEi5rUBO/HRz0bTSXDUcqjScdoY3a9IHpCEIOOfk=\nk8s.io/klog v0.3.0/go.mod h1:Gq+BEi5rUBO/HRz0bTSXDUcqjScdoY3a9IHpCEIOOfk=\nk8s.io/klog v1.0.0 h1:Pt+yjF5aB1xDSVbau4VsWe+dQNzA0qv1LlXdC2dF6Q8=\nk8s.io/klog v1.0.0/go.mod h1:4Bi6QPql/J/LkTDqv7R/cd3hPo4k2DG6Ptcz060Ez5I=\nk8s.io/klog/v2 v2.0.0/go.mod h1:PBfzABfn139FHAV07az/IF9Wp1bkk3vpT2XSJ76fSDE=\nk8s.io/klog/v2 v2.2.0/go.mod h1:Od+F08eJP+W3HUb4pSrPpgp9DGU4GzlpG/TmITuYh/Y=\nk8s.io/klog/v2 v2.4.0/go.mod h1:Od+F08eJP+W3HUb4pSrPpgp9DGU4GzlpG/TmITuYh/Y=\nk8s.io/klog/v2 v2.8.0 h1:Q3gmuM9hKEjefWFFYF0Mat+YyFJvsUyYuwyNNJ5C9Ts=\nk8s.io/klog/v2 v2.8.0/go.mod h1:hy9LJ/NvuK+iVyP4Ehqva4HxZG/oXyIS3n3Jmire4Ec=\nk8s.io/kube-openapi v0.0.0-20191107075043-30be4d16710a/go.mod h1:1TqjTSzOxsLGIKfj0lK8EeCP7K1iUG65v09OM0/WG5E=\nk8s.io/kube-openapi v0.0.0-20200410145947-61e04a5be9a6/go.mod h1:GRQhZsXIAJ1xR0C9bd8UpWHZ5plfAS9fzPjJuQ6JL3E=\nk8s.io/kube-openapi v0.0.0-20200805222855-6aeccd4b50c6/go.mod h1:UuqjUnNftUyPE5H64/qeyjQoUZhGpeFDVdxjTeEVN2o=\nk8s.io/kube-openapi v0.0.0-20201113171705-d219536bb9fd/go.mod h1:WOJ3KddDSol4tAGcJo0Tvi+dK12EcqSLqcWsryKMpfM=\nk8s.io/kube-openapi v0.0.0-20210305001622-591a79e4bda7 h1:vEx13qjvaZ4yfObSSXW7BrMc/KQBBT/Jyee8XtLf4x0=\nk8s.io/kube-openapi v0.0.0-20210305001622-591a79e4bda7/go.mod h1:wXW5VT87nVfh/iLV8FpR2uDvrFyomxbtb1KivDbvPTE=\nk8s.io/legacy-cloud-providers v0.17.4/go.mod h1:FikRNoD64ECjkxO36gkDgJeiQWwyZTuBkhu+yxOc1Js=\nk8s.io/utils v0.0.0-20191114184206-e782cd3c129f/go.mod h1:sZAwmy6armz5eXlNoLmJcl4F1QuKu7sr+mFQ0byX7Ew=\nk8s.io/utils v0.0.0-20200324210504-a9aa75ae1b89/go.mod h1:sZAwmy6armz5eXlNoLmJcl4F1QuKu7sr+mFQ0byX7Ew=\nk8s.io/utils v0.0.0-20200729134348-d5654de09c73/go.mod h1:jPW/WVKK9YHAvNhRxK0md/EJ228hCsBRufyofKtW8HA=\nk8s.io/utils v0.0.0-20201110183641-67b214c5f920 h1:CbnUZsM497iRC5QMVkHwyl8s2tB3g7yaSHkYPkpgelw=\nk8s.io/utils v0.0.0-20201110183641-67b214c5f920/go.mod h1:jPW/WVKK9YHAvNhRxK0md/EJ228hCsBRufyofKtW8HA=\nmaze.io/x/duration v0.0.0-20160924141736-faac084b6075 h1:4zVed9rL46683x3koxOYLzh8FlLFjnRrzTo2uvgA5D4=\nmaze.io/x/duration v0.0.0-20160924141736-faac084b6075/go.mod h1:1kfR2ph3CIvtfIQ8D8JhmAgePmnAUnR+AWYWUBo+l08=\nmodernc.org/cc v1.0.0/go.mod h1:1Sk4//wdnYJiUIxnW8ddKpaOJCF37yAdqYnkxUpaYxw=\nmodernc.org/golex v1.0.0/go.mod h1:b/QX9oBD/LhixY6NDh+IdGv17hgB+51fET1i2kPSmvk=\nmodernc.org/mathutil v1.0.0/go.mod h1:wU0vUrJsVWBZ4P6e7xtFJEhFSNsfRLJ8H458uRjg03k=\nmodernc.org/strutil v1.0.0/go.mod h1:lstksw84oURvj9y3tn8lGvRxyRC1S2+g5uuIzNfIOBs=\nmodernc.org/xc v1.0.0/go.mod h1:mRNCo0bvLjGhHO9WsyuKVU4q0ceiDDDoEeWDJHrNx8I=\nmvdan.cc/interfacer v0.0.0-20180901003855-c20040233aed/go.mod h1:Xkxe497xwlCKkIaQYRfC7CSLworTXY9RMqwhhCm+8Nc=\nmvdan.cc/lint v0.0.0-20170908181259-adc824a0674b/go.mod h1:2odslEg/xrtNQqCYg2/jCoyKnw3vv5biOc3JnIcYfL4=\nmvdan.cc/unparam v0.0.0-20190720180237-d51796306d8f/go.mod h1:4G1h5nDURzA3bwVMZIVpwbkw+04kSxk3rAtzlimaUJw=\nmvdan.cc/unparam v0.0.0-20200501210554-b37ab49443f7/go.mod h1:HGC5lll35J70Y5v7vCGb9oLhHoScFwkHDJm/05RdSTc=\npack.ag/amqp v0.11.2/go.mod h1:4/cbmt4EJXSKlG6LCfWHoqmN0uFdy5i/+YFz+fTfhV4=\nrsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=\nrsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=\nrsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nsigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.7/go.mod h1:PHgbrJT7lCHcxMU+mDHEm+nx46H4zuuHZkDP6icnhu0=\nsigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.14/go.mod h1:LEScyzhFmoF5pso/YSeBstl57mOzx9xlU9n85RGrDQg=\nsigs.k8s.io/apiserver-network-proxy/konnectivity-client v0.0.15/go.mod h1:LEScyzhFmoF5pso/YSeBstl57mOzx9xlU9n85RGrDQg=\nsigs.k8s.io/controller-runtime v0.8.0 h1:s0dYdo7lQgJiAf+alP82PRwbz+oAqL3oSyMQ18XRDOc=\nsigs.k8s.io/controller-runtime v0.8.0/go.mod h1:v9Lbj5oX443uR7GXYY46E0EE2o7k2YxQ58GxVNeXSW4=\nsigs.k8s.io/structured-merge-diff v0.0.0-20190525122527-15d366b2352e/go.mod h1:wWxsB5ozmmv/SG7nM11ayaAW51xMvak/t1r0CSlcokI=\nsigs.k8s.io/structured-merge-diff v1.0.1-0.20191108220359-b1b620dd3f06 h1:zD2IemQ4LmOcAumeiyDWXKUI2SO0NYDe3H6QGvPOVgU=\nsigs.k8s.io/structured-merge-diff v1.0.1-0.20191108220359-b1b620dd3f06/go.mod h1:/ULNhyfzRopfcjskuui0cTITekDduZ7ycKN3oUT9R18=\nsigs.k8s.io/structured-merge-diff/v3 v3.0.0-20200116222232-67a7b8c61874/go.mod h1:PlARxl6Hbt/+BC80dRLi1qAmnMqwqDg62YvvVkZjemw=\nsigs.k8s.io/structured-merge-diff/v3 v3.0.0/go.mod h1:PlARxl6Hbt/+BC80dRLi1qAmnMqwqDg62YvvVkZjemw=\nsigs.k8s.io/structured-merge-diff/v4 v4.0.1/go.mod h1:bJZC9H9iH24zzfZ/41RGcq60oK1F7G282QMXDPYydCw=\nsigs.k8s.io/structured-merge-diff/v4 v4.0.2/go.mod h1:bJZC9H9iH24zzfZ/41RGcq60oK1F7G282QMXDPYydCw=\nsigs.k8s.io/structured-merge-diff/v4 v4.1.0 h1:C4r9BgJ98vrKnnVCjwCSXcWjWe0NKcUQkmzDXZXGwH8=\nsigs.k8s.io/structured-merge-diff/v4 v4.1.0/go.mod h1:bJZC9H9iH24zzfZ/41RGcq60oK1F7G282QMXDPYydCw=\nsigs.k8s.io/yaml v1.1.0/go.mod h1:UJmg0vDUVViEyp3mgSv9WPwZCDxu4rQW1olrI1uml+o=\nsigs.k8s.io/yaml v1.2.0 h1:kr/MCeFWJWTwyaHoR9c8EjH9OumOmoF9YGiZd7lFm/Q=\nsigs.k8s.io/yaml v1.2.0/go.mod h1:yfXDCHCao9+ENCvLSE62v9VSji2MKu5jeNfTrofGhJc=\nsourcegraph.com/sourcegraph/appdash v0.0.0-20190731080439-ebfcffb1b5c0/go.mod h1:hI742Nqp5OhwiqlzhgfbWU4mW4yO10fP+LoT9WOswdU=\nsourcegraph.com/sqs/pbtypes v0.0.0-20180604144634-d3ebe8f20ae4/go.mod h1:ketZ/q3QxT9HOBeFhu6RdvsftgpsbFHBF5Cas6cDKZ0=\nsourcegraph.com/sqs/pbtypes v1.0.0/go.mod h1:3AciMUv4qUuRHRHhOG4TZOB+72GdPVz5k+c648qsFS4=\n"], "filenames": ["cmd/admin-handlers-users.go", "cmd/admin-handlers-users_test.go", "cmd/iam-store.go", "cmd/iam.go", "cmd/signature-v4-utils_test.go", "go.mod", "go.sum"], "buggy_code_start_loc": [419, 20, 1632, 957, 79, 52, 1091], "buggy_code_end_loc": [427, 259, 1679, 975, 80, 53, 1093], "fixing_code_start_loc": [419, 21, 1632, 957, 79, 52, 1091], "fixing_code_end_loc": [427, 390, 1660, 975, 80, 53, 1093], "type": "CWE-863", "message": "MinIO is a Kubernetes native application for cloud storage. Prior to version `RELEASE.2021-12-27T07-23-18Z`, a malicious client can hand-craft an HTTP API call that allows for updating policy for a user and gaining higher privileges. The patch in version `RELEASE.2021-12-27T07-23-18Z` changes the accepted request body type and removes the ability to apply policy changes through this API. There is a workaround for this vulnerability: Changing passwords can be disabled by adding an explicit `Deny` rule to disable the API for users.", "other": {"cve": {"id": "CVE-2021-43858", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-27T22:15:07.703", "lastModified": "2022-08-09T01:24:28.060", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MinIO is a Kubernetes native application for cloud storage. Prior to version `RELEASE.2021-12-27T07-23-18Z`, a malicious client can hand-craft an HTTP API call that allows for updating policy for a user and gaining higher privileges. The patch in version `RELEASE.2021-12-27T07-23-18Z` changes the accepted request body type and removes the ability to apply policy changes through this API. There is a workaround for this vulnerability: Changing passwords can be disabled by adding an explicit `Deny` rule to disable the API for users."}, {"lang": "es", "value": "MinIO es una aplicaci\u00f3n nativa de Kubernetes para el almacenamiento en la nube. En versiones anteriores a \"RELEASE.2021-12-27T07-23-18Z\", un cliente malicioso puede elaborar manualmente una llamada a la API HTTP que permite actualizar la pol\u00edtica de un usuario y alcanzar mayores privilegios. El parche de la versi\u00f3n \"RELEASE.2021-12-27T07-23-18Z\" cambia el tipo de cuerpo de petici\u00f3n aceptado y elimina la posibilidad de aplicar cambios de pol\u00edtica mediante esta API. Se presenta una soluci\u00f3n para esta vulnerabilidad: El cambio de contrase\u00f1as puede deshabilitarse al a\u00f1adir una regla expl\u00edcita \"Deny\" para deshabilitar la API para los usuarios"}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:minio:minio:*:*:*:*:*:*:*:*", "versionEndExcluding": "2021-12-27t07-23-18z", "matchCriteriaId": "FEAC2280-F0A0-409B-A579-73896CA26334"}]}]}], "references": [{"url": "https://github.com/minio/minio/commit/5a96cbbeaabd0a82b0fe881378e7c21c85091abf", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/minio/minio/pull/13976", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/minio/minio/pull/7949", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/minio/minio/releases/tag/RELEASE.2021-12-27T07-23-18Z", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/minio/minio/security/advisories/GHSA-j6jc-jqqc-p6cx", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/minio/minio/commit/5a96cbbeaabd0a82b0fe881378e7c21c85091abf"}}