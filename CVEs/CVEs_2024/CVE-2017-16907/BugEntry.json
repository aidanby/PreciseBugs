{"buggy_code": ["<?php\n/**\n * This is a view of the application-specific sidebar.\n *\n * Useful properties:\n * - newLink: (string, optional) Link of the \"New\" button\n *   - newText: (string) Text of the \"New\" button\n * - newExtra: (string, optional) HTML content of the extra link\n * - containers: (array, optional) HTML content of any sidebar sections. A list\n *               of hashes with the following properties:\n *               - id: (string, optional) The container's DOM ID.\n *               - header: (array, optional) Container header, also used to\n *                         toggle the section:\n *                 - id: (string) The header's DOM ID.\n *                 - label: (string) Header label.\n *                 - collapsed: (boolean, optional) Start section collapsed?\n *                   Overriden by cookies.\n *                 - add: (string|array, optional) Link to add something:\n *                   - url: (string) Link URL.\n *                   - label: (string) Link text.\n *               - content: (string, optional) The container's HTML content.\n *               - rows: (array, optional) A list of row hashes, if 'content'\n *                       is not specified. @see addRow().\n *               - resources: (boolean, optional) Does the container contain\n *                            switchable resource lists? Automatically set\n *                            through addRow().\n *               - type: (string, optional) @see addRow().\n * - content: (string, optional) HTML content of the sidebar, if 'containers'\n *            is not specified.\n *\n * Copyright 2012-2017 Horde LLC (http://www.horde.org/)\n *\n * See the enclosed file COPYING for license information (LGPL-2). If you\n * did not receive this file, see http://www.horde.org/licenses/lgpl.\n *\n * @author   Jan Schneider <jan@horde.org>\n * @category Horde\n * @license  http://www.horde.org/licenses/lgpl LGPL-2\n * @package  Horde\n */\nclass Horde_View_Sidebar extends Horde_View\n{\n    /**\n     * Constructor.\n     *\n     * @param array $config  Configuration key-value pairs.\n     */\n    public function __construct($config = array())\n    {\n        if (empty($config['templatePath'])) {\n            $config['templatePath'] = $GLOBALS['registry']->get('templates', 'horde') . '/sidebar';\n        }\n        parent::__construct($config);\n        $this->addHelper('Text');\n\n        $this->containers = array();\n        $this->width = $GLOBALS['prefs']->getValue('sidebar_width');\n        $this->left = ($GLOBALS['registry']->nlsconfig->curr_rtl ? 'right:' : 'left:')\n            . $this->width;\n\n        $pageOutput = $GLOBALS['injector']->getInstance('Horde_PageOutput');\n        $pageOutput->addScriptFile('sidebar.js', 'horde');\n        $pageOutput->addInlineJsVars(array(\n            'HordeSidebar.text' => array(\n                'collapse' => _(\"Collapse\"),\n                'expand' => _(\"Expand\"),\n             ),\n            'HordeSidebar.opts' => array(\n                'cookieDomain' => $GLOBALS['conf']['cookie']['domain'],\n                'cookiePath' => $GLOBALS['conf']['cookie']['path'],\n            ),\n        ));\n    }\n\n    /**\n     * Returns the HTML code for the sidebar.\n     *\n     * @param string $name  The template to process.\n     *\n     * @return string  The sidebar's HTML code.\n     */\n    public function render($name = 'sidebar', $locals = array())\n    {\n        $effects = false;\n        foreach ($this->containers as $id => &$container) {\n            if (!isset($container['header'])) {\n                continue;\n            }\n            if (isset($container['header']['id'])) {\n                $id = $container['header']['id'];\n            }\n            if (isset($_COOKIE['horde_sidebar_c_' . $id])) {\n                $container['header']['collapsed'] = !empty($_COOKIE['horde_sidebar_c_' . $id]);\n            }\n            $effects = true;\n        }\n        if ($effects) {\n            $GLOBALS['injector']\n                ->getInstance('Horde_PageOutput')\n                ->addScriptFile('scriptaculous/effects.js', 'horde');\n        }\n        $this->containers = array_values($this->containers);\n        return parent::render($name, $locals);\n    }\n\n    /**\n     * Handler for string casting.\n     *\n     * @return string  The sidebar's HTML code.\n     */\n    public function __toString()\n    {\n        return $this->render();\n    }\n\n    /**\n     * Adds a \"New ...\" button to the sidebar.\n     *\n     * @param string $label  The button text, including access key.\n     * @param string $url    The button URL.\n     * @param array $extra   Extra attributes for the link tag.\n     */\n    public function addNewButton($label, $url, $extra = array())\n    {\n        $ak = Horde::getAccessKey($label);\n        $attributes = $ak\n            ? Horde::getAccessKeyAndTitle($label, true, true)\n            : array();\n        $this->newLink = $url->link($attributes + $extra);\n        $this->newText = Horde::highlightAccessKey($label, $ak);\n    }\n\n    /**\n     * Adds a row to the sidebar.\n     *\n     * If containers/sections are not added explicitly to the view\n     * through the \"containers\" property, these rows will be used\n     * instead.\n     *\n     * @param array $row         A hash with the row information. Possible\n     *                           values:\n     *   - label: (string) The row text.\n     *   - selected: (boolean) Whether to mark the row as active.\n     *   - style: (string) Additional CSS styles to apply to the row.\n     *   - url (string) URL to link the row to.\n     *   - type (string, optional) The row type, defaults to \"tree\". Further\n     *     $row properties depending on the type:\n     *     - tree:\n     *       - cssClass: (string) CSS class for the icon.\n     *       - id: (string) DOM ID for the row link.\n     *     - checkbox:\n     *     - radiobox:\n     *       - color: (string, optional) Background color.\n     *       - edit: (string, optional) URL for extra edit icon.\n     * @param string $container  If using multiple sidebar sections, the ID of\n     *                           the section to add the row to. Sections will\n     *                           be rendered in the order of their first usage.\n     */\n    public function addRow(array $row, $container = '')\n    {\n        if (!isset($this->containers[$container])) {\n            $this->containers[$container] = array('rows' => array());\n            if ($container) {\n                $this->containers[$container]['id'] = $container;\n            }\n        }\n\n        $boxrow = isset($row['type']) &&\n            ($row['type'] == 'checkbox' || $row['type'] == 'radiobox');\n        $label = htmlspecialchars($row['label']);\n\n        if (isset($row['url'])) {\n            $url = empty($row['url']) ? new Horde_Url() : $row['url'];\n            if ($boxrow) {\n                $attributes = array();\n            } else {\n                $ak = Horde::getAccessKey($label);\n                $attributes = $ak\n                    ? array('accesskey' => $ak)\n                    : array();\n            }\n            foreach (array('onclick', 'target', 'class') as $attribute) {\n                if (!empty($row[$attribute])) {\n                   $attributes[$attribute] = $row[$attribute];\n                }\n            }\n            if ($boxrow) {\n                $class = 'horde-resource-'\n                    . (empty($row['selected']) ? 'off' : 'on');\n                if ($row['type'] == 'radiobox') {\n                    $class .= ' horde-radiobox';\n                }\n                if (empty($attributes['class'])) {\n                    $attributes['class'] = $class;\n                } else {\n                    $attributes['class'] .= ' ' . $class;\n                }\n                $row['link'] = $url->link($attributes) . $label . '</a>';\n            } else {\n                $row['link'] = $url->link($attributes)\n                    . Horde::highlightAccessKey($label, $ak)\n                    . '</a>';\n            }\n        } else {\n            $row['link'] = '<span class=\"horde-resource-none\">'\n                . $label . '</span>';\n        }\n\n        if ($boxrow) {\n            $this->containers[$container]['type'] = $row['type'];\n            if (!isset($row['style'])) {\n                $row['style'] = '';\n            }\n            if (!isset($row['color'])) {\n                $row['color'] = '#dddddd';\n            }\n            $foreground = '000';\n            if (Horde_Image::brightness($row['color']) < 128) {\n                $foreground = 'fff';\n            }\n            if (strlen($row['style'])) {\n                $row['style'] .= ';';\n            }\n            $row['style'] .= 'background-color:' . $row['color']\n                . ';color:#' . $foreground;\n            if (isset($row['edit'])) {\n                $row['editLink'] = $row['edit']\n                    ->link(array(\n                        'title' =>  _(\"Edit\"),\n                        'class' => 'horde-resource-edit-' . $foreground))\n                    . '&#9658;' . '</a>';\n            }\n        }\n\n        $this->containers[$container]['rows'][] = $row;\n    }\n\n}\n"], "fixing_code": ["<?php\n/**\n * This is a view of the application-specific sidebar.\n *\n * Useful properties:\n * - newLink: (string, optional) Link of the \"New\" button\n *   - newText: (string) Text of the \"New\" button\n * - newExtra: (string, optional) HTML content of the extra link\n * - containers: (array, optional) HTML content of any sidebar sections. A list\n *               of hashes with the following properties:\n *               - id: (string, optional) The container's DOM ID.\n *               - header: (array, optional) Container header, also used to\n *                         toggle the section:\n *                 - id: (string) The header's DOM ID.\n *                 - label: (string) Header label.\n *                 - collapsed: (boolean, optional) Start section collapsed?\n *                   Overriden by cookies.\n *                 - add: (string|array, optional) Link to add something:\n *                   - url: (string) Link URL.\n *                   - label: (string) Link text.\n *               - content: (string, optional) The container's HTML content.\n *               - rows: (array, optional) A list of row hashes, if 'content'\n *                       is not specified. @see addRow().\n *               - resources: (boolean, optional) Does the container contain\n *                            switchable resource lists? Automatically set\n *                            through addRow().\n *               - type: (string, optional) @see addRow().\n * - content: (string, optional) HTML content of the sidebar, if 'containers'\n *            is not specified.\n *\n * Copyright 2012-2017 Horde LLC (http://www.horde.org/)\n *\n * See the enclosed file COPYING for license information (LGPL-2). If you\n * did not receive this file, see http://www.horde.org/licenses/lgpl.\n *\n * @author   Jan Schneider <jan@horde.org>\n * @category Horde\n * @license  http://www.horde.org/licenses/lgpl LGPL-2\n * @package  Horde\n */\nclass Horde_View_Sidebar extends Horde_View\n{\n    /**\n     * Constructor.\n     *\n     * @param array $config  Configuration key-value pairs.\n     */\n    public function __construct($config = array())\n    {\n        if (empty($config['templatePath'])) {\n            $config['templatePath'] = $GLOBALS['registry']->get('templates', 'horde') . '/sidebar';\n        }\n        parent::__construct($config);\n        $this->addHelper('Text');\n\n        $this->containers = array();\n        $this->width = $GLOBALS['prefs']->getValue('sidebar_width');\n        $this->left = ($GLOBALS['registry']->nlsconfig->curr_rtl ? 'right:' : 'left:')\n            . $this->width;\n\n        $pageOutput = $GLOBALS['injector']->getInstance('Horde_PageOutput');\n        $pageOutput->addScriptFile('sidebar.js', 'horde');\n        $pageOutput->addInlineJsVars(array(\n            'HordeSidebar.text' => array(\n                'collapse' => _(\"Collapse\"),\n                'expand' => _(\"Expand\"),\n             ),\n            'HordeSidebar.opts' => array(\n                'cookieDomain' => $GLOBALS['conf']['cookie']['domain'],\n                'cookiePath' => $GLOBALS['conf']['cookie']['path'],\n            ),\n        ));\n    }\n\n    /**\n     * Returns the HTML code for the sidebar.\n     *\n     * @param string $name  The template to process.\n     *\n     * @return string  The sidebar's HTML code.\n     */\n    public function render($name = 'sidebar', $locals = array())\n    {\n        $effects = false;\n        foreach ($this->containers as $id => &$container) {\n            if (!isset($container['header'])) {\n                continue;\n            }\n            if (isset($container['header']['id'])) {\n                $id = $container['header']['id'];\n            }\n            if (isset($_COOKIE['horde_sidebar_c_' . $id])) {\n                $container['header']['collapsed'] = !empty($_COOKIE['horde_sidebar_c_' . $id]);\n            }\n            $effects = true;\n        }\n        if ($effects) {\n            $GLOBALS['injector']\n                ->getInstance('Horde_PageOutput')\n                ->addScriptFile('scriptaculous/effects.js', 'horde');\n        }\n        $this->containers = array_values($this->containers);\n        return parent::render($name, $locals);\n    }\n\n    /**\n     * Handler for string casting.\n     *\n     * @return string  The sidebar's HTML code.\n     */\n    public function __toString()\n    {\n        return $this->render();\n    }\n\n    /**\n     * Adds a \"New ...\" button to the sidebar.\n     *\n     * @param string $label  The button text, including access key.\n     * @param string $url    The button URL.\n     * @param array $extra   Extra attributes for the link tag.\n     */\n    public function addNewButton($label, $url, $extra = array())\n    {\n        $ak = Horde::getAccessKey($label);\n        $attributes = $ak\n            ? Horde::getAccessKeyAndTitle($label, true, true)\n            : array();\n        $this->newLink = $url->link($attributes + $extra);\n        $this->newText = Horde::highlightAccessKey($label, $ak);\n    }\n\n    /**\n     * Adds a row to the sidebar.\n     *\n     * If containers/sections are not added explicitly to the view\n     * through the \"containers\" property, these rows will be used\n     * instead.\n     *\n     * @param array $row         A hash with the row information. Possible\n     *                           values:\n     *   - label: (string) The row text.\n     *   - selected: (boolean) Whether to mark the row as active.\n     *   - style: (string) Additional CSS styles to apply to the row.\n     *   - url (string) URL to link the row to.\n     *   - type (string, optional) The row type, defaults to \"tree\". Further\n     *     $row properties depending on the type:\n     *     - tree:\n     *       - cssClass: (string) CSS class for the icon.\n     *       - id: (string) DOM ID for the row link.\n     *     - checkbox:\n     *     - radiobox:\n     *       - color: (string, optional) Background color.\n     *       - edit: (string, optional) URL for extra edit icon.\n     * @param string $container  If using multiple sidebar sections, the ID of\n     *                           the section to add the row to. Sections will\n     *                           be rendered in the order of their first usage.\n     */\n    public function addRow(array $row, $container = '')\n    {\n        if (!isset($this->containers[$container])) {\n            $this->containers[$container] = array('rows' => array());\n            if ($container) {\n                $this->containers[$container]['id'] = $container;\n            }\n        }\n\n        $boxrow = isset($row['type']) &&\n            ($row['type'] == 'checkbox' || $row['type'] == 'radiobox');\n        $label = htmlspecialchars($row['label']);\n\n        if (isset($row['url'])) {\n            $url = empty($row['url']) ? new Horde_Url() : $row['url'];\n            if ($boxrow) {\n                $attributes = array();\n            } else {\n                $ak = Horde::getAccessKey($label);\n                $attributes = $ak\n                    ? array('accesskey' => $ak)\n                    : array();\n            }\n            foreach (array('onclick', 'target', 'class') as $attribute) {\n                if (!empty($row[$attribute])) {\n                   $attributes[$attribute] = $row[$attribute];\n                }\n            }\n            if ($boxrow) {\n                $class = 'horde-resource-'\n                    . (empty($row['selected']) ? 'off' : 'on');\n                if ($row['type'] == 'radiobox') {\n                    $class .= ' horde-radiobox';\n                }\n                if (empty($attributes['class'])) {\n                    $attributes['class'] = $class;\n                } else {\n                    $attributes['class'] .= ' ' . $class;\n                }\n                $row['link'] = $url->link($attributes) . $label . '</a>';\n            } else {\n                $row['link'] = $url->link($attributes)\n                    . Horde::highlightAccessKey($label, $ak)\n                    . '</a>';\n            }\n        } else {\n            $row['link'] = '<span class=\"horde-resource-none\">'\n                . $label . '</span>';\n        }\n\n        if ($boxrow) {\n            $this->containers[$container]['type'] = $row['type'];\n            if (!isset($row['style'])) {\n                $row['style'] = '';\n            }\n            if (!isset($row['color'])) {\n                $row['color'] = '#dddddd';\n            }\n            $foreground = '000';\n            if (Horde_Image::brightness($row['color']) < 128) {\n                $foreground = 'fff';\n            }\n            if (strlen($row['style'])) {\n                $row['style'] .= ';';\n            }\n            $row['style'] .= 'background-color:' . htmlspecialchars($row['color'])\n                . ';color:#' . $foreground;\n            if (isset($row['edit'])) {\n                $row['editLink'] = $row['edit']\n                    ->link(array(\n                        'title' =>  _(\"Edit\"),\n                        'class' => 'horde-resource-edit-' . $foreground))\n                    . '&#9658;' . '</a>';\n            }\n        }\n\n        $this->containers[$container]['rows'][] = $row;\n    }\n\n}\n"], "filenames": ["lib/View/Sidebar.php"], "buggy_code_start_loc": [224], "buggy_code_end_loc": [225], "fixing_code_start_loc": [224], "fixing_code_end_loc": [225], "type": "CWE-79", "message": "In Horde Groupware 5.2.19 and 5.2.21, there is XSS via the Color field in a Create Task List action.", "other": {"cve": {"id": "CVE-2017-16907", "sourceIdentifier": "cve@mitre.org", "published": "2017-11-20T20:29:00.387", "lastModified": "2020-08-29T21:15:11.017", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "In Horde Groupware 5.2.19 and 5.2.21, there is XSS via the Color field in a Create Task List action."}, {"lang": "es", "value": "En Horde Groupware 5.2.19 y 5.2.21, existe XSS mediante el campo Color en una acci\u00f3n Create Task List."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:horde:groupware:5.2.19:*:*:*:*:*:*:*", "matchCriteriaId": "E509D906-4D06-4404-B420-523CE6313855"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horde:groupware:5.2.21:*:*:*:*:*:*:*", "matchCriteriaId": "A7054862-3FC5-4F4D-8596-3E9CF7E9D793"}]}]}], "references": [{"url": "http://code610.blogspot.com/2017/11/rce-via-xss-horde-5219.html", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/horde/base/commit/fb2113bbcd04bd4a28c46aad0889fb0a3979a230", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/08/msg00046.html", "source": "cve@mitre.org"}, {"url": "https://lists.debian.org/debian-lts-announce/2020/08/msg00047.html", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/horde/base/commit/fb2113bbcd04bd4a28c46aad0889fb0a3979a230"}}