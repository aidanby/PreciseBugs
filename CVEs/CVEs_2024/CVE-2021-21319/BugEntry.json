{"buggy_code": ["<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette authentication controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2019-2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Entity\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\Login;\nuse Galette\\Core\\Password;\nuse Galette\\Core\\GaletteMail;\nuse Galette\\Entity\\Adherent;\nuse Galette\\Entity\\Texts;\n\n/**\n * Galette authentication controller\n *\n * @category  Controllers\n * @name      AuthController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nclass AuthController extends AbstractController\n{\n    /**\n     * Log in\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $r        Redirect after login\n     *\n     * @return void\n     */\n    public function login(Request $request, Response $response, string $r = null)\n    {\n        //store redirect path if any\n        if (\n            $r !== null\n            && $r != '/logout'\n            && $r != '/login'\n        ) {\n            $this->session->urlRedirect = $r;\n        }\n\n        if (!$this->login->isLogged()) {\n            // display page\n            $this->view->render(\n                $response,\n                'index.tpl',\n                array(\n                    'page_title'    => _T(\"Login\"),\n                )\n            );\n            return $response;\n        } else {\n            return $this->galetteRedirect($request, $response);\n        }\n    }\n\n    /**\n     * Do login\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return void\n     */\n    public function doLogin(Request $request, Response $response)\n    {\n        $nick = $request->getParsedBody()['login'];\n        $password = $request->getParsedBody()['password'];\n        $checkpass = new \\Galette\\Util\\Password($this->preferences);\n\n        if (trim($nick) == '' || trim($password) == '') {\n            $this->flash->addMessage(\n                'loginfault',\n                _T(\"You must provide both login and password.\")\n            );\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('login'));\n        }\n\n        if ($nick === $this->preferences->pref_admin_login) {\n            $pw_superadmin = password_verify(\n                $password,\n                $this->preferences->pref_admin_pass\n            );\n            if (!$pw_superadmin) {\n                $pw_superadmin = (\n                    md5($password) === $this->preferences->pref_admin_pass\n                );\n            }\n            if ($pw_superadmin) {\n                $this->login->logAdmin($nick, $this->preferences);\n            }\n        } else {\n            $this->login->logIn($nick, $password);\n        }\n\n        if ($this->login->isLogged()) {\n            if (!$checkpass->isValid($password)) {\n                //password is no longer valid with current rules, must be changed\n                $this->flash->addMessage(\n                    'warning_detected',\n                    _T(\"Your password is too weak! Please consider updating it.\") .\n                    '<br/> -' . implode('<br/>', $checkpass->getErrors())\n                );\n            }\n            $this->session->login = $this->login;\n            $this->history->add(_T(\"Login\"));\n            return $this->galetteRedirect($request, $response);\n        } else {\n            $this->flash->addMessage('error_detected', _T(\"Login failed.\"));\n            $this->history->add(_T(\"Authentication failed\"), $nick);\n            return $response->withStatus(301)->withHeader('Location', $this->router->pathFor('login'));\n        }\n    }\n\n    /**\n     * Log out\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return void\n     */\n    public function logout(Request $request, Response $response)\n    {\n        $this->login->logOut();\n        $this->history->add(_T(\"Log off\"));\n        \\RKA\\Session::destroy();\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('slash'));\n    }\n\n    /**\n     * Impersonate\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Member to impersonate\n     *\n     * @return void\n     */\n    public function impersonate(Request $request, Response $response, int $id)\n    {\n        $success = $this->login->impersonate($id);\n\n        if ($success === true) {\n            $this->session->login = $this->login;\n            $msg = str_replace(\n                '%login',\n                $this->login->login,\n                _T(\"Impersonating as %login\")\n            );\n\n            $this->history->add($msg);\n            $this->flash->addMessage(\n                'success_detected',\n                $msg\n            );\n        } else {\n            $msg = str_replace(\n                '%id',\n                $id,\n                _T(\"Unable to impersonate as %id\")\n            );\n            $this->flash->addMessage(\n                'error_detected',\n                $msg\n            );\n            $this->history->add($msg);\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('slash'));\n    }\n\n    /**\n     * End impersonate\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return void\n     */\n    public function unimpersonate(Request $request, Response $response)\n    {\n        $login = new Login($this->zdb, $this->i18n);\n        $login->logAdmin($this->preferences->pref_admin_login, $this->preferences);\n        $this->history->add(_T(\"Impersonating ended\"));\n        $this->session->login = $login;\n        $this->login = $login;\n        $this->flash->addMessage(\n            'success_detected',\n            _T(\"Impersonating ended\")\n        );\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('slash'));\n    }\n\n    /**\n     * Lost password page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function lostPassword(Request $request, Response $response): Response\n    {\n        if ($this->preferences->pref_mail_method === GaletteMail::METHOD_DISABLED) {\n            throw new \\RuntimeException('Mailing disabled.');\n        }\n        // display page\n        $this->view->render(\n            $response,\n            'lostpasswd.tpl',\n            array(\n                'page_title'    => _T(\"Password recovery\")\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Retrieve password procedure\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id_adh   Member id\n     *\n     * @return Response\n     */\n    public function retrievePassword(Request $request, Response $response, int $id_adh = null): Response\n    {\n        $from_admin = false;\n        $redirect_url = $this->router->pathFor('slash');\n        if ((($this->login->isAdmin() || $this->login->isStaff()) && $id_adh !== null)) {\n            $from_admin = true;\n            $redirect_url = $this->router->pathFor('member', ['id' => $id_adh]);\n        }\n\n        if (\n            ($this->login->isLogged()\n            || $this->preferences->pref_mail_method == GaletteMail::METHOD_DISABLED)\n            && !$from_admin\n        ) {\n            if ($this->preferences->pref_mail_method == GaletteMail::METHOD_DISABLED) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"Email sent is disabled in the preferences. Ask galette admin\")\n                );\n            }\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $redirect_url);\n        }\n\n        $adh = null;\n        $login_adh = null;\n        if (($this->login->isAdmin() || $this->login->isStaff()) && $id_adh !== null) {\n            $adh = new Adherent($this->zdb, $id_adh);\n            $login_adh = $adh->login;\n        } else {\n            $post = $request->getParsedBody();\n            $login_adh = $post['login'];\n            $adh = new Adherent($this->zdb, $login_adh);\n        }\n\n        if ($adh->id != '') {\n            //account has been found, proceed\n            if (GaletteMail::isValidEmail($adh->email)) {\n                $texts = new Texts($this->preferences, $this->router);\n                $texts\n                    ->setMember($adh)\n                    ->setNoContribution();\n\n                //check if account is active\n                if (!$adh->isActive()) { //https://bugs.galette.eu/issues/1529\n                    $res = true;\n                    $text_id = 'pwddisabled';\n                } else {\n                    $password = new Password($this->zdb);\n                    $res = $password->generateNewPassword($adh->id);\n                    $text_id = 'pwd';\n                    $texts\n                        ->setLinkValidity()\n                        ->setChangePasswordURI($password);\n                }\n\n                if ($res === true) {\n                    $texts->getTexts($text_id, $adh->language);\n\n                    $mail = new GaletteMail($this->preferences);\n                    $mail->setSubject($texts->getSubject());\n                    $mail->setRecipients(\n                        array(\n                            $adh->email => $adh->sname\n                        )\n                    );\n\n                    $mail->setMessage($texts->getBody());\n                    $sent = $mail->send();\n\n                    if ($sent == GaletteMail::MAIL_SENT) {\n                        $this->history->add(\n                            str_replace(\n                                '%s',\n                                $login_adh,\n                                _T(\"Email sent to '%s' for password recovery.\")\n                            )\n                        );\n                        if ($from_admin === false) {\n                            $message = _T(\"An email has been sent to your address.<br/>Please check your inbox and follow the instructions.\");\n                        } else {\n                            $message = _T(\"An email has been sent to the member.\");\n                        }\n\n                        $this->flash->addMessage(\n                            'success_detected',\n                            $message\n                        );\n                    } else {\n                        $str = str_replace(\n                            '%s',\n                            $login_adh,\n                            _T(\"A problem happened while sending password for account '%s'\")\n                        );\n                        $this->history->add($str);\n                        $this->flash->addMessage(\n                            'error_detected',\n                            $str\n                        );\n\n                        $error_detected[] = $str;\n                    }\n                } else {\n                    $str = str_replace(\n                        '%s',\n                        $login_adh,\n                        _T(\"An error occurred storing temporary password for %s. Please inform an admin.\")\n                    );\n                    $this->history->add($str);\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $str\n                    );\n                }\n            } else {\n                $str = str_replace(\n                    '%s',\n                    $login_adh,\n                    _T(\"Your account (%s) do not contain any valid email address\")\n                );\n                $this->history->add($str);\n                $this->flash->addMessage(\n                    'error_detected',\n                    $str\n                );\n            }\n        } else {\n            //account has not been found\n            if (GaletteMail::isValidEmail($login_adh)) {\n                $str = str_replace(\n                    '%s',\n                    $login_adh,\n                    _T(\"Mails address %s does not exist\")\n                );\n            } else {\n                $str = str_replace(\n                    '%s',\n                    $login_adh,\n                    _T(\"Login %s does not exist\")\n                );\n            }\n\n            $this->history->add($str);\n            $this->flash->addMessage(\n                'error_detected',\n                $str\n            );\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $redirect_url);\n    }\n\n    /**\n     * Password recovery page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $hash     Hash\n     *\n     * @return Response\n     */\n    public function recoverPassword(Request $request, Response $response, string $hash): Response\n    {\n        $password = new Password($this->zdb);\n        if (!$password->isHashValid(base64_decode($hash))) {\n            $this->flash->addMessage(\n                'warning_detected',\n                _T(\"This link is no longer valid. You should ask to retrieve your password again.\")\n            );\n            return $response\n                ->withStatus(301)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('password-lost')\n                );\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            'change_passwd.tpl',\n            array(\n                'hash'          => $hash,\n                'page_title'    => _T(\"Password recovery\")\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Password recovery\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doRecoverPassword(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $password = new Password($this->zdb);\n\n        if (!$id_adh = $password->isHashValid(base64_decode($post['hash']))) {\n            return $response\n                ->withStatus(301)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('password-recovery', ['hash' => $post['hash']])\n                );\n        }\n\n        $error = null;\n        if ($post['mdp_adh'] == '') {\n            $error = _T(\"No password\");\n        } elseif (isset($post['mdp_adh2'])) {\n            if (strcmp($post['mdp_adh'], $post['mdp_adh2'])) {\n                $error = _T(\"- The passwords don't match!\");\n            } else {\n                $checkpass = new \\Galette\\Util\\Password($this->preferences);\n\n                if (!$checkpass->isValid($post['mdp_adh'])) {\n                    //password is not valid with current rules\n                    $error = _T(\"Your password is too weak!\") .\n                        '<br/> -' . implode('<br/>', $checkpass->getErrors());\n                } else {\n                    $res = Adherent::updatePassword(\n                        $this->zdb,\n                        $id_adh,\n                        $post['mdp_adh']\n                    );\n                    if ($res !== true) {\n                        $error = _T(\"An error occurred while updating your password.\");\n                    } else {\n                        $this->history->add(\n                            str_replace(\n                                '%s',\n                                $id_adh,\n                                _T(\"Password changed for member '%s'.\")\n                            )\n                        );\n                        //once password has been changed, we can remove the\n                        //temporary password entry\n                        $password->removeHash(base64_decode($post['hash']));\n                        $this->flash->addMessage(\n                            'success_detected',\n                            _T(\"Your password has been changed!\")\n                        );\n                        return $response\n                            ->withStatus(301)\n                            ->withHeader(\n                                'Location',\n                                $this->router->pathFor('slash')\n                            );\n                    }\n                }\n            }\n        }\n\n        if ($error !== null) {\n            $this->flash->addMessage(\n                'error_detected',\n                $error\n            );\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader(\n                'Location',\n                $this->router->pathFor('password-recovery', ['hash' => $post['hash']])\n            );\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette members controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2019-2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Controllers\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nnamespace Galette\\Controllers\\Crud;\n\nuse Galette\\Controllers\\CrudController;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\Authentication;\nuse Galette\\Core\\GaletteMail;\nuse Galette\\Core\\Gaptcha;\nuse Galette\\Core\\Password;\nuse Galette\\Core\\Picture;\nuse Galette\\Entity\\Adherent;\nuse Galette\\Entity\\Contribution;\nuse Galette\\Entity\\ContributionsTypes;\nuse Galette\\Entity\\DynamicFieldsHandle;\nuse Galette\\Entity\\Group;\nuse Galette\\Entity\\Status;\nuse Galette\\Entity\\FieldsConfig;\nuse Galette\\Filters\\AdvancedMembersList;\nuse Galette\\Filters\\MembersList;\nuse Galette\\IO\\File;\nuse Galette\\IO\\MembersCsv;\nuse Galette\\Repository\\Groups;\nuse Galette\\Repository\\Members;\nuse Galette\\Repository\\PaymentTypes;\nuse Galette\\Repository\\Titles;\nuse Analog\\Analog;\n\n/**\n * Galette members controller\n *\n * @category  Controllers\n * @name      GaletteController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nclass MembersController extends CrudController\n{\n    /** @var boolean */\n    private $is_self_membership = false;\n\n    // CRUD - Create\n\n    /**\n     * Add page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function add(Request $request, Response $response): Response\n    {\n        return $this->edit($request, $response, null, 'add');\n    }\n\n    /**\n     * Self subscription page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function selfSubscribe(Request $request, Response $response): Response\n    {\n        if (!$this->preferences->pref_bool_selfsubscribe || $this->login->isLogged()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('slash'));\n        }\n\n        if ($this->session->member !== null) {\n            $member = $this->session->member;\n            $this->session->member = null;\n        } else {\n            $deps = [\n                'dynamics'  => true\n            ];\n            $member = new Adherent($this->zdb, null, $deps);\n        }\n\n        //mark as self membership\n        $member->setSelfMembership();\n\n        // flagging required fields\n        $fc = $this->fields_config;\n        $form_elements = $fc->getFormElements($this->login, true, true);\n\n        // members\n        $m = new Members();\n        $members = $m->getSelectizedMembers(\n            $this->zdb,\n            $member->hasParent() ? $member->parent->id : null\n        );\n\n        $params = [\n            'members' => [\n                'filters'   => $m->getFilters(),\n                'count'     => $m->getCount()\n            ]\n        ];\n\n        if (count($members)) {\n            $params['members']['list'] = $members;\n        }\n\n        $gaptcha = new Gaptcha($this->i18n);\n        $this->session->gaptcha = $gaptcha;\n        // display page\n        $this->view->render(\n            $response,\n            'member.tpl',\n            array(\n                'page_title'        => _T(\"Subscription\"),\n                'parent_tpl'        => 'public_page.tpl',\n                'member'            => $member,\n                'self_adh'          => true,\n                'autocomplete'      => true,\n                // pseudo random int\n                'time'              => time(),\n                'titles_list'       => Titles::getList($this->zdb),\n                'fieldsets'         => $form_elements['fieldsets'],\n                'hidden_elements'   => $form_elements['hiddens'],\n                //self_adh specific\n                'gaptcha'           => $gaptcha\n            ) + $params\n        );\n        return $response;\n    }\n\n    /**\n     * Add action\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doAdd(Request $request, Response $response): Response\n    {\n        return $this->store($request, $response);\n    }\n\n    /**\n     * Self subscription add action\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doSelfSubscribe(Request $request, Response $response): Response\n    {\n        $this->setSelfMembership();\n        return $this->doAdd($request, $response);\n    }\n\n\n    /**\n     * Duplicate action\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id_adh   Member ID to duplicate\n     *\n     * @return Response\n     */\n    public function duplicate(Request $request, Response $response, int $id_adh): Response\n    {\n        $adh = new Adherent($this->zdb, $id_adh, ['dynamics' => true, 'parent' => true]);\n        $adh->setDuplicate();\n\n        //store entity in session\n        $this->session->member = $adh;\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('addMember'));\n    }\n\n    // /CRUD - Create\n    // CRUD - Read\n\n    /**\n     * Display member card\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Member ID\n     *\n     * @return Response\n     */\n    public function show(Request $request, Response $response, int $id): Response\n    {\n        $deps = array(\n            'picture'   => true,\n            'groups'    => true,\n            'dues'      => true,\n            'parent'    => true,\n            'children'  => true,\n            'dynamics'  => true\n        );\n        $member = new Adherent($this->zdb, $id, $deps);\n\n        if (!$member->canEdit($this->login)) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"You do not have permission for requested URL.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('me')\n                );\n        }\n\n        if ($member->id == null) {\n            //member does not exists!\n            $this->flash->addMessage(\n                'error_detected',\n                str_replace('%id', $id, _T(\"No member #%id.\"))\n            );\n\n            return $response\n                ->withStatus(404)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('slash')\n                );\n        }\n\n        // flagging fields visibility\n        $fc = $this->fields_config;\n        $display_elements = $fc->getDisplayElements($this->login);\n\n        // display page\n        $this->view->render(\n            $response,\n            'voir_adherent.tpl',\n            array(\n                'page_title'        => _T(\"Member Profile\"),\n                'member'            => $member,\n                'pref_lang'         => $this->i18n->getNameFromId($member->language),\n                'pref_card_self'    => $this->preferences->pref_card_self,\n                'groups'            => Groups::getSimpleList(),\n                'time'              => time(),\n                'display_elements'  => $display_elements\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Own card show\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function showMe(Request $request, Response $response): Response\n    {\n        if ($this->login->isSuperAdmin()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('slash'));\n        }\n        return $this->show($request, $response, $this->login->id);\n    }\n\n    /**\n     * Public pages (trombinoscope, public list)\n     *\n     * @param Request        $request  PSR Request\n     * @param Response       $response PSR Response\n     * @param string         $option   One of 'page' or 'order'\n     * @param string|integer $value    Value of the option\n     * @param string         $type     List type (either list or trombi)\n     *\n     * @return Response\n     */\n    public function publicList(\n        Request $request,\n        Response $response,\n        $option = null,\n        $value = null,\n        $type = null\n    ): Response {\n        $varname = 'public_filter_' . $type;\n        if (isset($this->session->$varname)) {\n            $filters = $this->session->$varname;\n        } else {\n            $filters = new MembersList();\n        }\n\n        if ($option !== null) {\n            switch ($option) {\n                case 'page':\n                    $filters->current_page = (int)$value;\n                    break;\n                case 'order':\n                    $filters->orderby = $value;\n                    break;\n            }\n        }\n\n        $m = new Members($filters);\n        $members = $m->getPublicList($type === 'trombi');\n\n        $this->session->$varname = $filters;\n\n        //assign pagination variables to the template and add pagination links\n        $filters->setSmartyPagination($this->router, $this->view->getSmarty(), false);\n\n        // display page\n        $this->view->render(\n            $response,\n            ($type === 'list' ? 'liste_membres' : 'trombinoscope') . '.tpl',\n            array(\n                'page_title'    => ($type === 'list' ? _T(\"Members list\") : _T('Trombinoscope')),\n                'additionnal_html_class'    => ($type === 'list' ? '' : 'trombinoscope'),\n                'type'          => $type,\n                'members'       => $members,\n                'nb_members'    => $m->getCount(),\n                'filters'       => $filters\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Public pages (trombinoscope, public list)\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $type     Type\n     *\n     * @return Response\n     */\n    public function filterPublicList(Request $request, Response $response, string $type): Response\n    {\n        $post = $request->getParsedBody();\n\n        $varname = 'public_filter_' . $type;\n        if (isset($this->session->$varname)) {\n            $filters = $this->session->$varname;\n        } else {\n            $filters = new MembersList();\n        }\n\n        //reintialize filters\n        if (isset($post['clear_filter'])) {\n            $filters->reinit();\n        } else {\n            //number of rows to show\n            if (isset($post['nbshow'])) {\n                $filters->show = $post['nbshow'];\n            }\n        }\n\n        $this->session->$varname = $filters;\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('publicList', ['type' => $type]));\n    }\n\n    /**\n     * Get a dynamic file\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Member ID\n     * @param integer  $fid      Dynamic fields ID\n     * @param integer  $pos      Dynamic field position\n     * @param string   $name     File name\n     *\n     * @return Response\n     */\n    public function getDynamicFile(\n        Request $request,\n        Response $response,\n        int $id,\n        int $fid,\n        int $pos,\n        string $name\n    ): Response {\n        $deps = array(\n            'picture'   => false,\n            'groups'    => false,\n            'dues'      => false,\n            'parent'    => false,\n            'children'  => false,\n            'dynamics'  => true\n        );\n        $member = new Adherent($this->zdb, $id, $deps);\n\n        $denied = null;\n        if (!$member->canEdit($this->login)) {\n            $fields = $member->getDynamicFields()->getFields();\n            if (!isset($fields[$fid])) {\n                //field does not exists or access is forbidden\n                $denied = true;\n            } else {\n                $denied = false;\n            }\n        }\n\n        if ($denied === true) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"You do not have permission for requested URL.\")\n            );\n\n            return $response\n                ->withStatus(403)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor(\n                        'member',\n                        ['id' => $id]\n                    )\n                );\n        }\n\n        $filename = str_replace(\n            [\n                '%mid',\n                '%fid',\n                '%pos'\n            ],\n            [\n                $id,\n                $fid,\n                $pos\n            ],\n            'member_%mid_field_%fid_value_%pos'\n        );\n\n        if (file_exists(GALETTE_FILES_PATH . $filename)) {\n            $type = File::getMimeType(GALETTE_FILES_PATH . $filename);\n\n            $response = $response->withHeader('Content-Description', 'File Transfer')\n                ->withHeader('Content-Type', $type)\n                ->withHeader('Content-Disposition', 'attachment;filename=\"' . $name . '\"')\n                ->withHeader('Pragma', 'no-cache')\n                ->withHeader('Content-Transfer-Encoding', 'binary')\n                ->withHeader('Expires', '0')\n                ->withHeader('Cache-Control', 'must-revalidate')\n                ->withHeader('Pragma', 'public');\n\n            $stream = fopen('php://memory', 'r+');\n            fwrite($stream, file_get_contents(GALETTE_FILES_PATH . $filename));\n            rewind($stream);\n\n            return $response->withBody(new \\Slim\\Http\\Stream($stream));\n        } else {\n            Analog::log(\n                'A request has been made to get a dynamic file named `' .\n                $filename . '` that does not exists.',\n                Analog::WARNING\n            );\n\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"The file does not exists or cannot be read :(\")\n            );\n\n            return $response\n                ->withStatus(404)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('member', ['id' => $id])\n                );\n        }\n    }\n\n    /**\n     * Members list\n     *\n     * @param Request        $request  PSR Request\n     * @param Response       $response PSR Response\n     * @param string         $option   One of 'page' or 'order'\n     * @param string|integer $value    Value of the option\n     *\n     * @return Response\n     */\n    public function list(Request $request, Response $response, $option = null, $value = null): Response\n    {\n        if (isset($this->session->filter_members)) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        if ($option !== null) {\n            switch ($option) {\n                case 'page':\n                    $filters->current_page = (int)$value;\n                    break;\n                case 'order':\n                    $filters->orderby = $value;\n                    break;\n            }\n        }\n\n        $members = new Members($filters);\n\n        $members_list = array();\n        if ($this->login->isAdmin() || $this->login->isStaff()) {\n            $members_list = $members->getMembersList(true);\n        } else {\n            $members_list = $members->getManagedMembersList(true);\n        }\n\n        $groups = new Groups($this->zdb, $this->login);\n        $groups_list = $groups->getList();\n\n        //assign pagination variables to the template and add pagination links\n        $filters->setSmartyPagination($this->router, $this->view->getSmarty(), false);\n        $filters->setViewCommonsFilters($this->preferences, $this->view->getSmarty());\n\n        $this->session->filter_members = $filters;\n\n        // display page\n        $this->view->render(\n            $response,\n            'gestion_adherents.tpl',\n            array(\n                'page_title'            => _T(\"Members management\"),\n                'require_mass'          => true,\n                'members'               => $members_list,\n                'filter_groups_options' => $groups_list,\n                'nb_members'            => $members->getCount(),\n                'filters'               => $filters,\n                'adv_filters'           => $filters instanceof AdvancedMembersList,\n                'galette_list'          => $this->lists_config->getDisplayElements($this->login)\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Members filtering\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function filter(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        if (isset($this->session->filter_members)) {\n            //CAUTION: this one may be simple or advanced, display must change\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        //reintialize filters\n        if (isset($post['clear_filter'])) {\n            $filters = new MembersList();\n        } elseif (isset($post['clear_adv_filter'])) {\n            $this->session->filter_members = null;\n            unset($this->session->filter_members);\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('advanced-search'));\n        } elseif (isset($post['adv_criteria'])) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('advanced-search'));\n        } else {\n            //string to filter\n            if (isset($post['filter_str'])) { //filter search string\n                $filters->filter_str = stripslashes(\n                    htmlspecialchars($post['filter_str'], ENT_QUOTES)\n                );\n            }\n            //field to filter\n            if (isset($post['field_filter'])) {\n                if (is_numeric($post['field_filter'])) {\n                    $filters->field_filter = $post['field_filter'];\n                }\n            }\n            //membership to filter\n            if (isset($post['membership_filter'])) {\n                if (is_numeric($post['membership_filter'])) {\n                    $filters->membership_filter\n                        = $post['membership_filter'];\n                }\n            }\n            //account status to filter\n            if (isset($post['filter_account'])) {\n                if (is_numeric($post['filter_account'])) {\n                    $filters->filter_account = $post['filter_account'];\n                }\n            }\n            //email filter\n            if (isset($post['email_filter'])) {\n                $filters->email_filter = (int)$post['email_filter'];\n            }\n            //group filter\n            if (\n                isset($post['group_filter'])\n                && $post['group_filter'] > 0\n            ) {\n                $filters->group_filter = (int)$post['group_filter'];\n            }\n            //number of rows to show\n            if (isset($post['nbshow'])) {\n                $filters->show = $post['nbshow'];\n            }\n\n            if (isset($post['advanced_filtering'])) {\n                if (!$filters instanceof AdvancedMembersList) {\n                    $filters = new AdvancedMembersList($filters);\n                }\n                //Advanced filters\n                $filters->reinit();\n                unset($post['advanced_filtering']);\n                $freed = false;\n                foreach ($post as $k => $v) {\n                    if (strpos($k, 'free_', 0) === 0) {\n                        if (!$freed) {\n                            $i = 0;\n                            foreach ($post['free_field'] as $f) {\n                                if (\n                                    trim($f) !== ''\n                                    && trim($post['free_text'][$i]) !== ''\n                                ) {\n                                    $fs_search = $post['free_text'][$i];\n                                    $log_op\n                                        = (int)$post['free_logical_operator'][$i];\n                                    $qry_op\n                                        = (int)$post['free_query_operator'][$i];\n                                    $type = (int)$post['free_type'][$i];\n                                    $fs = array(\n                                        'idx'       => $i,\n                                        'field'     => $f,\n                                        'type'      => $type,\n                                        'search'    => $fs_search,\n                                        'log_op'    => $log_op,\n                                        'qry_op'    => $qry_op\n                                    );\n                                    $filters->free_search = $fs;\n                                }\n                                $i++;\n                            }\n                            $freed = true;\n                        }\n                    } elseif ($k == 'groups_search') {\n                        $i = 0;\n                        $filters->groups_search_log_op = (int)$post['groups_logical_operator'];\n                        foreach ($post['groups_search'] as $g) {\n                            if (trim($g) !== '') {\n                                $gs = array(\n                                    'idx'       => $i,\n                                    'group'     => $g\n                                );\n                                $filters->groups_search = $gs;\n                            }\n                            $i++;\n                        }\n                    } else {\n                        switch ($k) {\n                            case 'contrib_min_amount':\n                            case 'contrib_max_amount':\n                                if (trim($v) !== '') {\n                                    $v = (float)$v;\n                                } else {\n                                    $v = null;\n                                }\n                                break;\n                        }\n                        $filters->$k = $v;\n                    }\n                }\n            }\n        }\n\n        if (isset($post['savesearch'])) {\n            return $response\n                ->withStatus(301)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor(\n                        'saveSearch',\n                        $post\n                    )\n                );\n        }\n\n        $this->session->filter_members = $filters;\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('members'));\n    }\n\n    /**\n     * Advanced search page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function advancedSearch(Request $request, Response $response): Response\n    {\n        if (isset($this->session->filter_members)) {\n            $filters = $this->session->filter_members;\n            if (!$filters instanceof AdvancedMembersList) {\n                $filters = new AdvancedMembersList($filters);\n            }\n        } else {\n            $filters = new AdvancedMembersList();\n        }\n\n        $groups = new Groups($this->zdb, $this->login);\n        $groups_list = $groups->getList();\n\n        //we want only visibles fields\n        $fields = $this->members_fields;\n        $fc = $this->fields_config;\n        $visibles = $fc->getVisibilities();\n        $access_level = $this->login->getAccessLevel();\n\n        //remove not searchable fields\n        unset($fields['mdp_adh']);\n\n        foreach ($fields as $k => $f) {\n            if (\n                $visibles[$k] == FieldsConfig::NOBODY ||\n                ($visibles[$k] == FieldsConfig::ADMIN &&\n                    $access_level < Authentication::ACCESS_ADMIN) ||\n                ($visibles[$k] == FieldsConfig::STAFF &&\n                    $access_level < Authentication::ACCESS_STAFF) ||\n                ($visibles[$k] == FieldsConfig::MANAGER &&\n                    $access_level < Authentication::ACCESS_MANAGER)\n            ) {\n                unset($fields[$k]);\n            }\n        }\n\n        //add status label search\n        if ($pos = array_search(Status::PK, array_keys($fields))) {\n            $fields = array_slice($fields, 0, $pos, true) +\n                ['status_label'  => ['label' => _T('Status label')]] +\n                array_slice($fields, $pos, count($fields) - 1, true);\n        }\n\n        //dynamic fields\n        $deps = array(\n            'picture'   => false,\n            'groups'    => false,\n            'dues'      => false,\n            'parent'    => false,\n            'children'  => false,\n            'dynamics'  => false\n        );\n        $member = new Adherent($this->zdb, $this->login->login, $deps);\n        $adh_dynamics = new DynamicFieldsHandle($this->zdb, $this->login, $member);\n\n        $contrib = new Contribution($this->zdb, $this->login);\n        $contrib_dynamics = new DynamicFieldsHandle($this->zdb, $this->login, $contrib);\n\n        //Status\n        $statuts = new Status($this->zdb);\n\n        //Contributions types\n        $ct = new ContributionsTypes($this->zdb);\n\n        //Payments types\n        $ptypes = new PaymentTypes(\n            $this->zdb,\n            $this->preferences,\n            $this->login\n        );\n        $ptlist = $ptypes->getList();\n\n        $filters->setViewCommonsFilters($this->preferences, $this->view->getSmarty());\n\n        // display page\n        $this->view->render(\n            $response,\n            'advanced_search.tpl',\n            array(\n                'page_title'            => _T(\"Advanced search\"),\n                'filter_groups_options' => $groups_list,\n                'search_fields'         => $fields,\n                'adh_dynamics'          => $adh_dynamics->getFields(),\n                'contrib_dynamics'      => $contrib_dynamics->getFields(),\n                'statuts'               => $statuts->getList(),\n                'contributions_types'   => $ct->getList(),\n                'filters'               => $filters,\n                'payments_types'        => $ptlist\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Members list for ajax\n     *\n     * @param Request        $request  PSR Request\n     * @param Response       $response PSR Response\n     * @param string         $option   One of 'page' or 'order'\n     * @param string|integer $value    Value of the option\n     *\n     * @return Response\n     */\n    public function ajaxList(Request $request, Response $response, string $option = null, $value = null): Response\n    {\n        $post = $request->getParsedBody();\n\n        if (isset($this->session->ajax_members_filters)) {\n            $filters = $this->session->ajax_members_filters;\n        } else {\n            $filters = new MembersList();\n        }\n\n        if ($option == 'page') {\n            $filters->current_page = (int)$value;\n        }\n\n        //numbers of rows to display\n        if (isset($post['nbshow']) && is_numeric($post['nbshow'])) {\n            $filters->show = $post['nbshow'];\n        }\n\n        $members = new Members($filters);\n        if (!$this->login->isAdmin() && !$this->login->isStaff()) {\n            if ($this->login->isGroupManager()) {\n                $members_list = $members->getManagedMembersList(true);\n            } else {\n                Analog::log(\n                    str_replace(\n                        ['%id', '%login'],\n                        [$this->login->id, $this->login->login],\n                        'Trying to list group members without access from #%id (%login)'\n                    ),\n                    Analog::ERROR\n                );\n                throw new \\Exception('Access denied.');\n            }\n        } else {\n            $members_list = $members->getMembersList(true);\n        }\n\n        //assign pagination variables to the template and add pagination links\n        $filters->setSmartyPagination($this->router, $this->view->getSmarty(), false);\n\n        $this->session->ajax_members_filters = $filters;\n\n        $selected_members = null;\n        $unreachables_members = null;\n        if (!isset($post['from'])) {\n            $mailing = $this->session->mailing;\n            if (!isset($post['members'])) {\n                $selected_members = $mailing->recipients;\n                $unreachables_members = $mailing->unreachables;\n            } else {\n                $m = new Members();\n                $selected_members = $m->getArrayList($post['members']);\n                if (isset($post['unreachables']) && is_array($post['unreachables'])) {\n                    $unreachables_members = $m->getArrayList($post['unreachables']);\n                }\n            }\n        } else {\n            switch ($post['from']) {\n                case 'groups':\n                    if (!isset($post['gid'])) {\n                        Analog::log(\n                            'Trying to list group members with no group id provided',\n                            Analog::ERROR\n                        );\n                        throw new \\Exception('A group id is required.');\n                    }\n                    if (!isset($post['members'])) {\n                        $group = new Group((int)$post['gid']);\n                        $selected_members = array();\n                        if (!isset($post['mode']) || $post['mode'] == 'members') {\n                            $selected_members = $group->getMembers();\n                        } elseif ($post['mode'] == 'managers') {\n                            $selected_members = $group->getManagers();\n                        } else {\n                            Analog::log(\n                                'Trying to list group members with unknown mode',\n                                Analog::ERROR\n                            );\n                            throw new \\Exception('Unknown mode.');\n                        }\n                    } else {\n                        $m = new Members();\n                        $selected_members = $m->getArrayList($post['members']);\n                        if (isset($post['unreachables']) && is_array($post['unreachables'])) {\n                            $unreachables_members = $m->getArrayList($post['unreachables']);\n                        }\n                    }\n                    break;\n                case 'attach':\n                    if (!isset($post['id_adh'])) {\n                        throw new \\RuntimeException(\n                            'Current selected member must be excluded while attaching!'\n                        );\n                    }\n                    break;\n            }\n        }\n\n        $params = [\n            'filters'               => $filters,\n            'members_list'          => $members_list,\n            'selected_members'      => $selected_members,\n            'unreachables_members'  => $unreachables_members\n        ];\n\n        if (isset($post['multiple'])) {\n            $params['multiple'] = true;\n        }\n\n        if (isset($post['gid'])) {\n            $params['the_id'] = $post['gid'];\n        }\n\n        if (isset($post['id_adh'])) {\n            $params['excluded'] = $post['id_adh'];\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            'ajax_members.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Batch actions handler\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function handleBatch(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        if (isset($post['member_sel'])) {\n            if (isset($this->session->filter_members)) {\n                $filters = $this->session->filter_members;\n            } else {\n                $filters = new MembersList();\n            }\n\n            $filters->selected = $post['member_sel'];\n            $this->session->filter_members = $filters;\n\n            if (isset($post['cards'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('pdf-members-cards'));\n            }\n\n            if (isset($post['labels'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('pdf-members-labels'));\n            }\n\n            if (isset($post['mailing'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('mailing') . '?mailing_new=new');\n            }\n\n            if (isset($post['attendance_sheet'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('attendance_sheet_details'));\n            }\n\n            if (isset($post['csv'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('csv-memberslist'));\n            }\n\n            if (isset($post['delete'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('removeMembers'));\n            }\n\n            if (isset($post['masschange'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('masschangeMembers'));\n            }\n\n            throw new \\RuntimeException('Does not know what to batch :(');\n        } else {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"No member was selected, please check at least one name.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n    }\n\n    // /CRUD - Read\n    // CRUD - Update\n\n    /**\n     * Edit page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param mixed    $id       Member id/array of members id\n     * @param string   $action   null or 'add'\n     *\n     * @return Response\n     */\n    public function edit(\n        Request $request,\n        Response $response,\n        $id = null,\n        $action = 'edit'\n    ): Response {\n        $deps = array(\n            'picture'   => true,\n            'groups'    => true,\n            'dues'      => true,\n            'parent'    => true,\n            'children'  => true,\n            'dynamics'  => true\n        );\n\n        if ($this->session->member !== null) {\n            $member = $this->session->member;\n            $this->session->member = null;\n        } else {\n            $member = new Adherent($this->zdb, $id, $deps);\n        }\n\n        if ($id !== null) {\n            $member->load($id);\n            if (!$member->canEdit($this->login)) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"You do not have permission for requested URL.\")\n                );\n\n                return $response\n                    ->withStatus(403)\n                    ->withHeader(\n                        'Location',\n                        $this->router->pathFor('me')\n                    );\n            }\n        } else {\n            if ($member->id != $id) {\n                $member->load($this->login->id);\n            }\n        }\n\n        // flagging required fields\n        $fc = $this->fields_config;\n\n        // password required if we create a new member\n        if ($member->id != '') {\n            $fc->setNotRequired('mdp_adh');\n        }\n\n        //handle requirements for parent fields\n        $parent_fields = $member->getParentFields();\n        $tpl_parent_fields = []; //for JS when detaching\n        foreach ($parent_fields as $field) {\n            if ($fc->isRequired($field)) {\n                $tpl_parent_fields[] = $field;\n                if ($member->hasParent()) {\n                    $fc->setNotRequired($field);\n                }\n            }\n        }\n\n        // flagging required fields invisible to members\n        if ($this->login->isAdmin() || $this->login->isStaff()) {\n            $fc->setNotRequired('activite_adh');\n            $fc->setNotRequired('id_statut');\n        }\n\n        // template variable declaration\n        $title = _T(\"Member Profile\");\n        if ($member->id != '') {\n            $title .= ' (' . _T(\"modification\") . ')';\n        } else {\n            $title .= ' (' . _T(\"creation\") . ')';\n        }\n\n        //Status\n        $statuts = new Status($this->zdb);\n\n        //Groups\n        $groups = new Groups($this->zdb, $this->login);\n        $groups_list = $groups->getSimpleList(true);\n\n        $form_elements = $fc->getFormElements(\n            $this->login,\n            $member->id == ''\n        );\n\n        // members\n        $m = new Members();\n        $id = null;\n        if ($member->hasParent()) {\n            $id = ($member->parent instanceof Adherent ? $member->parent->id : $member->parent);\n        }\n        $members = $m->getSelectizedMembers(\n            $this->zdb,\n            $id\n        );\n\n        $route_params['members'] = [\n            'filters'   => $m->getFilters(),\n            'count'     => $m->getCount()\n        ];\n\n        if (count($members)) {\n            $route_params['members']['list'] = $members;\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            'member.tpl',\n            array(\n                'parent_tpl'        => 'page.tpl',\n                'autocomplete'      => true,\n                'page_title'        => $title,\n                'member'            => $member,\n                'self_adh'          => false,\n                // pseudo random int\n                'time'              => time(),\n                'titles_list'       => Titles::getList($this->zdb),\n                'statuts'           => $statuts->getList(),\n                'groups'            => $groups_list,\n                'fieldsets'         => $form_elements['fieldsets'],\n                'hidden_elements'   => $form_elements['hiddens'],\n                'parent_fields'     => $tpl_parent_fields\n            ) + $route_params\n        );\n        return $response;\n    }\n\n    /**\n     * Edit action\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Member id\n     *\n     * @return Response\n     */\n    public function doEdit(Request $request, Response $response, int $id): Response\n    {\n        return $this->store($request, $response);\n    }\n\n    /**\n     * Massive change page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function massChange(Request $request, Response $response): Response\n    {\n        $filters = $this->session->filter_members;\n\n        $data = [\n            'id'            => $filters->selected,\n            'redirect_uri'  => $this->router->pathFor('members')\n        ];\n\n        $fc = $this->fields_config;\n        $form_elements = $fc->getMassiveFormElements($this->members_fields, $this->login);\n\n        //dynamic fields\n        $deps = array(\n            'picture'   => false,\n            'groups'    => false,\n            'dues'      => false,\n            'parent'    => false,\n            'children'  => false,\n            'dynamics'  => false\n        );\n        $member = new Adherent($this->zdb, null, $deps);\n\n        //Status\n        $statuts = new Status($this->zdb);\n\n        // display page\n        $this->view->render(\n            $response,\n            'mass_change_members.tpl',\n            array(\n                'mode'          => $request->isXhr() ? 'ajax' : '',\n                'page_title'    => str_replace(\n                    '%count',\n                    count($data['id']),\n                    _T('Mass change %count members')\n                ),\n                'form_url'      => $this->router->pathFor('masschangeMembersReview'),\n                'cancel_uri'    => $this->router->pathFor('members'),\n                'data'          => $data,\n                'member'        => $member,\n                'fieldsets'     => $form_elements['fieldsets'],\n                'titles_list'   => Titles::getList($this->zdb),\n                'statuts'       => $statuts->getList(),\n                'require_mass'  => true\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Massive changes validation page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function validateMassChange(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        if (!isset($post['confirm'])) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Mass changes has not been confirmed!\")\n            );\n        } else {\n            //we want only visibles fields\n            $fc = $this->fields_config;\n            $form_elements = $fc->getMassiveFormElements($this->members_fields, $this->login);\n\n            $changes = [];\n            foreach ($form_elements['fieldsets'] as $form_element) {\n                foreach ($form_element->elements as $field) {\n                    if (\n                        isset($post['mass_' . $field->field_id])\n                        && (isset($post[$field->field_id]) || $field->type === FieldsConfig::TYPE_BOOL)\n                    ) {\n                        $changes[$field->field_id] = [\n                            'label' => $field->label,\n                            'value' => $post[$field->field_id] ?? 0\n                        ];\n                    }\n                }\n            }\n        }\n\n        $filters = $this->session->filter_members;\n        $data = [\n            'id'            => $filters->selected,\n            'redirect_uri'  => $this->router->pathFor('members')\n        ];\n\n        //Status\n        $statuts = new Status($this->zdb);\n\n        // display page\n        $this->view->render(\n            $response,\n            'mass_change_members.tpl',\n            array(\n                'mode'          => $request->isXhr() ? 'ajax' : '',\n                'page_title'    => str_replace(\n                    '%count',\n                    count($data['id']),\n                    _T('Review mass change %count members')\n                ),\n                'form_url'      => $this->router->pathFor('massstoremembers'),\n                'cancel_uri'    => $this->router->pathFor('members'),\n                'data'          => $data,\n                'titles_list'   => Titles::getList($this->zdb),\n                'statuts'       => $statuts->getList(),\n                'changes'       => $changes\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Do massive changes\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doMassChange(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $redirect_url = $post['redirect_uri'];\n        $error_detected = [];\n        $mass = 0;\n\n        unset($post['redirect_uri']);\n        if (!isset($post['confirm'])) {\n            $error_detected[] = _T(\"Mass changes has not been confirmed!\");\n        } else {\n            unset($post['confirm']);\n            $ids = $post['id'];\n            unset($post['id']);\n\n            $fc = $this->fields_config;\n            $form_elements = $fc->getMassiveFormElements($this->members_fields, $this->login);\n            $disabled = $this->members_fields;\n            foreach (array_keys($post) as $key) {\n                $found = false;\n                foreach ($form_elements['fieldsets'] as $fieldset) {\n                    if (isset($fieldset->elements[$key])) {\n                        $found = true;\n                        continue;\n                    }\n                }\n                if (!$found) {\n                    Analog::log(\n                        'Permission issue mass editing field ' . $key,\n                        Analog::WARNING\n                    );\n                    unset($post[$key]);\n                } else {\n                    unset($disabled[$key]);\n                }\n            }\n\n            if (!count($post)) {\n                $error_detected[] = _T(\"Nothing to do!\");\n            } else {\n                foreach ($ids as $id) {\n                    $is_manager = !$this->login->isAdmin()\n                        && !$this->login->isStaff()\n                        && $this->login->isGroupManager();\n                    $deps = array(\n                        'picture'   => false,\n                        'groups'    => $is_manager,\n                        'dues'      => false,\n                        'parent'    => false,\n                        'children'  => false,\n                        'dynamics'  => false\n                    );\n                    $member = new Adherent($this->zdb, (int)$id, $deps);\n                    $member->setDependencies(\n                        $this->preferences,\n                        $this->members_fields,\n                        $this->history\n                    );\n                    if (!$member->canEdit($this->login)) {\n                        continue;\n                    }\n\n                    $valid = $member->check($post, [], $disabled);\n                    if ($valid === true) {\n                        $done = $member->store();\n                        if (!$done) {\n                            $error_detected[] = _T(\"An error occurred while storing the member.\");\n                        } else {\n                            ++$mass;\n                        }\n                    } else {\n                        $error_detected = array_merge($error_detected, $valid);\n                    }\n                }\n            }\n        }\n\n        if ($mass == 0 && !count($error_detected)) {\n            $error_detected[] = _T('Something went wront during mass edition!');\n        } else {\n            $this->flash->addMessage(\n                'success_detected',\n                str_replace(\n                    '%count',\n                    $mass,\n                    _T('%count members has been changed successfully!')\n                )\n            );\n        }\n\n        if (count($error_detected) > 0) {\n            foreach ($error_detected as $error) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    $error\n                );\n            }\n        }\n\n        if (!$request->isXhr()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $redirect_url);\n        } else {\n            return $response->withJson(\n                [\n                    'success'   => count($error_detected) === 0\n                ]\n            );\n        }\n    }\n\n    /**\n     * Store\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function store(Request $request, Response $response): Response\n    {\n        if (!$this->preferences->pref_bool_selfsubscribe && !$this->login->isLogged()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('slash'));\n        }\n\n        $post = $request->getParsedBody();\n        $deps = array(\n            'picture'   => true,\n            'groups'    => true,\n            'dues'      => true,\n            'parent'    => true,\n            'children'  => true,\n            'dynamics'  => true\n        );\n        $member = new Adherent($this->zdb, null, $deps);\n        $member->setDependencies(\n            $this->preferences,\n            $this->members_fields,\n            $this->history\n        );\n\n        $success_detected = [];\n        $warning_detected = [];\n        $error_detected = [];\n\n        if ($this->isSelfMembership() && !isset($post[Adherent::PK])) {\n            //mark as self membership\n            $member->setSelfMembership();\n\n            //check captcha\n            $gaptcha = $this->session->gaptcha;\n            if (!$gaptcha->check($post['gaptcha'])) {\n                $error_detected[] = _T('Invalid captcha');\n            }\n        }\n\n        // new or edit\n        if ($this->login->isAdmin() || $this->login->isStaff() || $this->login->isGroupManager()) {\n            if (isset($post['id_adh'])) {\n                $member->load((int)$post['id_adh']);\n                if (!$member->canEdit($this->login)) {\n                    //redirection should have been done before. Just throw an Exception.\n                    throw new \\RuntimeException(\n                        str_replace(\n                            '%id',\n                            $member->id,\n                            'No right to store member #%id'\n                        )\n                    );\n                }\n            }\n        } else {\n            $member->load($this->login->id);\n        }\n\n        // flagging required fields\n        $fc = $this->fields_config;\n\n        // password required if we create a new member but not from self subscription\n        if ($member->id != '' || $this->isSelfMembership()) {\n            $fc->setNotRequired('mdp_adh');\n        }\n\n        if (\n            $member->hasParent() && !isset($post['detach_parent'])\n            || isset($post['parent_id']) && !empty($post['parent_id'])\n        ) {\n            $parent_fields = $member->getParentFields();\n            foreach ($parent_fields as $field) {\n                if ($fc->isRequired($field)) {\n                    $fc->setNotRequired($field);\n                }\n            }\n        }\n\n        // flagging required fields invisible to members\n        if ($this->login->isAdmin() || $this->login->isStaff()) {\n            $fc->setNotRequired('activite_adh');\n            $fc->setNotRequired('id_statut');\n        }\n\n        $form_elements = $fc->getFormElements(\n            $this->login,\n            $member->id == '',\n            $this->isSelfMembership()\n        );\n        $fieldsets     = $form_elements['fieldsets'];\n        $required      = array();\n        $disabled      = array();\n\n        foreach ($fieldsets as $category) {\n            foreach ($category->elements as $field) {\n                if ($field->required == true) {\n                    $required[$field->field_id] = true;\n                }\n                if ($field->disabled == true) {\n                    $disabled[$field->field_id] = true;\n                } elseif (!isset($post[$field->field_id])) {\n                    switch ($field->field_id) {\n                        //unchecked booleans are not sent from form\n                        case 'bool_admin_adh':\n                        case 'bool_exempt_adh':\n                        case 'bool_display_info':\n                            $post[$field->field_id] = 0;\n                            break;\n                    }\n                }\n            }\n        }\n\n        $real_requireds = array_diff(array_keys($required), array_keys($disabled));\n\n        // Validation\n        $redirect_url = $this->router->pathFor('member', ['id' => $member->id]);\n        if (!count($real_requireds) || isset($post[array_shift($real_requireds)])) {\n            // regular fields\n            $valid = $member->check($post, $required, $disabled);\n            if ($valid !== true) {\n                $error_detected = array_merge($error_detected, $valid);\n            }\n\n            if (count($error_detected) == 0) {\n                //all goes well, we can proceed\n\n                $new = false;\n                if ($member->id == '') {\n                    $new = true;\n                }\n\n                // send email to member\n                if ($this->isSelfMembership() || isset($post['mail_confirm']) && $post['mail_confirm'] == '1') {\n                    $member->setSendmail(); //flag to send creation email\n                }\n\n                $store = $member->store();\n                if ($store === true) {\n                    //member has been stored :)\n                    if ($new) {\n                        if ($this->isSelfMembership()) {\n                            $success_detected[] = _T(\"Your account has been created!\");\n                            if (\n                                $this->preferences->pref_mail_method > GaletteMail::METHOD_DISABLED\n                                && $member->getEmail() != ''\n                            ) {\n                                $success_detected[] = _T(\"An email has been sent to you, check your inbox.\");\n                            }\n                        } else {\n                            $success_detected[] = _T(\"New member has been successfully added.\");\n                        }\n                    } else {\n                        $success_detected[] = _T(\"Member account has been modified.\");\n                    }\n\n                    //store requested groups\n                    $groups_adh = $post['groups_adh'] ?? null;\n                    $managed_groups_adh = $post['groups_managed_adh'] ?? null;\n\n                    //add/remove user from groups\n                    $add_groups = Groups::addMemberToGroups(\n                        $member,\n                        $groups_adh\n                    );\n\n                    if ($add_groups === false) {\n                        $error_detected[] = _T(\"An error occurred adding member to its groups.\");\n                    }\n\n                    //add/remove manager from groups\n                    $add_groups = Groups::addMemberToGroups(\n                        $member,\n                        $managed_groups_adh,\n                        true\n                    );\n                    $member->loadGroups();\n\n                    if ($add_groups === false) {\n                        $error_detected[] = _T(\"An error occurred adding member to its groups as manager.\");\n                    }\n                } else {\n                    //something went wrong :'(\n                    $error_detected[] = _T(\"An error occurred while storing the member.\");\n                }\n            }\n\n            if (count($error_detected) === 0) {\n                $files_res = $member->handleFiles($_FILES);\n                if (is_array($files_res)) {\n                    $error_detected = array_merge($error_detected, $files_res);\n                }\n\n                if (isset($post['del_photo'])) {\n                    if (!$member->picture->delete($member->id)) {\n                        $error_detected[] = _T(\"Delete failed\");\n                        $str_adh = $member->id . ' (' . $member->sname . ' ' . ')';\n                        Analog::log(\n                            'Unable to delete picture for member ' . $str_adh,\n                            Analog::ERROR\n                        );\n                    }\n                }\n            }\n\n            if (count($error_detected) > 0) {\n                foreach ($error_detected as $error) {\n                    if (strpos($error, '%member_url_') !== false) {\n                        preg_match('/%member_url_(\\d+)/', $error, $matches);\n                        $url = $this->router->pathFor('member', ['id' => $matches[1]]);\n                        $error = str_replace(\n                            '%member_url_' . $matches[1],\n                            $url,\n                            $error\n                        );\n                    }\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $error\n                    );\n                }\n            }\n\n            if (count($warning_detected) > 0) {\n                foreach ($warning_detected as $warning) {\n                    $this->flash->addMessage(\n                        'warning_detected',\n                        $warning\n                    );\n                }\n            }\n            if (count($success_detected) > 0) {\n                foreach ($success_detected as $success) {\n                    $this->flash->addMessage(\n                        'success_detected',\n                        $success\n                    );\n                }\n            }\n\n            if (count($error_detected) === 0) {\n                if ($this->isSelfMembership()) {\n                    $redirect_url = $this->router->pathFor('login');\n                } elseif (\n                    isset($post['redirect_on_create'])\n                    && $post['redirect_on_create'] > Adherent::AFTER_ADD_DEFAULT\n                ) {\n                    switch ($post['redirect_on_create']) {\n                        case Adherent::AFTER_ADD_TRANS:\n                            $redirect_url = $this->router->pathFor('addTransaction');\n                            break;\n                        case Adherent::AFTER_ADD_NEW:\n                            $redirect_url = $this->router->pathFor('addMember');\n                            break;\n                        case Adherent::AFTER_ADD_SHOW:\n                            $redirect_url = $this->router->pathFor('member', ['id' => $member->id]);\n                            break;\n                        case Adherent::AFTER_ADD_LIST:\n                            $redirect_url = $this->router->pathFor('members');\n                            break;\n                        case Adherent::AFTER_ADD_HOME:\n                            $redirect_url = $this->router->pathFor('slash');\n                            break;\n                    }\n                } elseif (!isset($post['id_adh']) && !$member->isDueFree()) {\n                    $redirect_url = $this->router->pathFor(\n                        'addContribution',\n                        ['type' => 'fee']\n                    ) . '?id_adh=' . $member->id;\n                } else {\n                    $redirect_url = $this->router->pathFor('member', ['id' => $member->id]);\n                }\n            } else {\n                //store entity in session\n                $this->session->member = $member;\n\n                if ($this->isSelfMembership()) {\n                    $redirect_url = $this->router->pathFor('subscribe');\n                } else {\n                    if ($member->id) {\n                        $redirect_url = $this->router->pathFor(\n                            'editMember',\n                            ['id'    => $member->id]\n                        );\n                    } else {\n                        $redirect_url = $this->router->pathFor('addMember');\n                    }\n                }\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $redirect_url);\n    }\n\n\n    // /CRUD - Update\n    // CRUD - Delete\n\n    /**\n     * Get redirection URI\n     *\n     * @param array $args Route arguments\n     *\n     * @return string\n     */\n    public function redirectUri(array $args)\n    {\n        return $this->router->pathFor('members');\n    }\n\n    /**\n     * Get form URI\n     *\n     * @param array $args Route arguments\n     *\n     * @return string\n     */\n    public function formUri(array $args)\n    {\n        return $this->router->pathFor(\n            'doRemoveMember',\n            $args\n        );\n    }\n\n\n    /**\n     * Get ID to remove\n     *\n     * In simple cases, we get the ID in the route arguments; but for\n     * batchs, it should be found elsewhere.\n     * In post values, we look for id key, as well as all {sthing}_sel keys (like members_sel or contrib_sel)\n     *\n     * @param array $args Request arguments\n     * @param array $post POST values\n     *\n     * @return null|integer|integer[]\n     */\n    protected function getIdsToRemove(&$args, $post)\n    {\n        if (isset($args['id'])) {\n            return $args['id'];\n        } else {\n            $filters = $this->session->filter_members;\n            return $filters->selected;\n        }\n    }\n\n    /**\n     * Get confirmation removal page title\n     *\n     * @param array $args Route arguments\n     *\n     * @return string\n     */\n    public function confirmRemoveTitle(array $args)\n    {\n        if (isset($args['id_adh']) || isset($args['id'])) {\n            //one member removal\n            $id_adh = $args['id_adh'] ?? $args['id'];\n            $adh = new Adherent($this->zdb, (int)$id_adh);\n            return sprintf(\n                _T('Remove member %1$s'),\n                $adh->sfullname\n            );\n        } else {\n            //batch members removal\n            $filters = $this->session->filter_members;\n            return str_replace(\n                '%count',\n                count($filters->selected),\n                _T('You are about to remove %count members.')\n            );\n        }\n    }\n\n    /**\n     * Remove object\n     *\n     * @param array $args Route arguments\n     * @param array $post POST values\n     *\n     * @return boolean\n     */\n    protected function doDelete(array $args, array $post)\n    {\n        if (isset($this->session->filter_members)) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n        $members = new Members($filters);\n\n        if (!is_array($post['id'])) {\n            $ids = (array)$post['id'];\n        } else {\n            $ids = $post['id'];\n        }\n\n        return $members->removeMembers($ids);\n    }\n\n    // CRUD - Delete\n\n    /**\n     * Set self memebrship flag\n     *\n     * @return MembersController\n     */\n    private function setSelfMembership(): MembersController\n    {\n        $this->is_self_membership = true;\n        return $this;\n    }\n\n    /**\n     * Is self membership?\n     *\n     * @return boolean\n     */\n    private function isSelfMembership(): bool\n    {\n        return $this->is_self_membership;\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette dynamic translations controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Controllers\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Throwable;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\L10n;\nuse Analog\\Analog;\n\n/**\n * Galette dynamic translations controller\n *\n * @category  Controllers\n * @name      DynamicTranslationsController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nclass DynamicTranslationsController extends AbstractController\n{\n    /**\n     * Dynamic fields translations\n     *\n     * @param Request  $request   PSR Request\n     * @param Response $response  PSR Response\n     * @param string   $text_orig Original translatext\n     *\n     * @return Response\n     */\n    public function dynamicTranslations(Request $request, Response $response, string $text_orig = null): Response\n    {\n        if ($text_orig == null && isset($_GET['text_orig'])) {\n            $text_orig = $_GET['text_orig'];\n        }\n\n        $params = [\n            'page_title'    => _T(\"Translate labels\")\n        ];\n\n        $nb_fields = 0;\n        try {\n            $select = $this->zdb->select(L10n::TABLE);\n            $select->columns(\n                array('nb' => new \\Laminas\\Db\\Sql\\Expression('COUNT(text_orig)'))\n            );\n            $results = $this->zdb->execute($select);\n            $result = $results->current();\n            $nb_fields = $result->nb;\n        } catch (Throwable $e) {\n            Analog::log(\n                'An error occurred counting l10n entries | ' .\n                $e->getMessage(),\n                Analog::WARNING\n            );\n        }\n\n        if (is_numeric($nb_fields) && $nb_fields > 0) {\n            try {\n                $select = $this->zdb->select(L10n::TABLE);\n                $select->quantifier('DISTINCT')->columns(\n                    array('text_orig')\n                )->order('text_orig');\n\n                $all_texts = $this->zdb->execute($select);\n\n                $orig = array();\n                foreach ($all_texts as $idx => $row) {\n                    $orig[] = $row->text_orig;\n                }\n                $exists = true;\n                if ($text_orig == '') {\n                    $text_orig = $orig[0];\n                } elseif (!in_array($text_orig, $orig)) {\n                    $exists = false;\n                    $this->flash->addMessage(\n                        'error_detected',\n                        str_replace(\n                            '%s',\n                            $text_orig,\n                            _T(\"No translation for '%s'!<br/>Please fill and submit above form to create it.\")\n                        )\n                    );\n                }\n\n                $trans = array();\n                /**\n                 * FIXME : it would be faster to get all translations at once\n                 * for a specific string\n                 */\n                foreach ($this->i18n->getList() as $l) {\n                    $text_trans = $this->l10n->getDynamicTranslation($text_orig, $l->getLongID());\n                    $lang_name = $l->getName();\n                    $trans[] = array(\n                        'key'  => $l->getLongID(),\n                        'name' => ucwords($lang_name),\n                        'text' => $text_trans\n                    );\n                }\n\n                $params['exists'] = $exists;\n                $params['orig'] = $orig;\n                $params['trans'] = $trans;\n            } catch (Throwable $e) {\n                Analog::log(\n                    'An error occurred retrieving l10n entries | ' .\n                    $e->getMessage(),\n                    Analog::WARNING\n                );\n            }\n        }\n\n        $params['text_orig'] = $text_orig;\n\n        // display page\n        $this->view->render(\n            $response,\n            'traduire_libelles.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Do dynamic fields translations\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doDynamicTranslations(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $error_detected = [];\n\n        if (isset($post['trans']) && isset($post['text_orig'])) {\n            if (isset($post['new']) && $post['new'] == 'true') {\n                //create translation if it does not exists yet\n                $res = $this->l10n->addDynamicTranslation(\n                    $post['text_orig']\n                );\n                if (!$res) {\n                    $error_detected[] = preg_replace(\n                        array(\n                            '/%label/',\n                            '/%lang/'\n                        ),\n                        array(\n                            $post['text_orig'],\n                            $this->i18n->getLongID()\n                        ),\n                        _T(\"An error occurred saving label `%label` for language `%lang`\")\n                    );\n                }\n            }\n\n            // Validate form\n            foreach ($post as $key => $value) {\n                if (substr($key, 0, 11) == 'text_trans_') {\n                    $trans_lang = substr($key, 11);\n                    $trans_lang = str_replace('_utf8', '.utf8', $trans_lang);\n                    $res = $this->l10n->updateDynamicTranslation(\n                        $post['text_orig'],\n                        $trans_lang,\n                        $value\n                    );\n                    if (!$res) {\n                        $error_detected[] = preg_replace(\n                            array(\n                                '/%label/',\n                                '/%lang/'\n                            ),\n                            array(\n                                $post['text_orig'],\n                                $trans_lang\n                            ),\n                            _T(\"An error occurred saving label `%label` for language `%lang`\")\n                        );\n                    }\n                }\n            }\n\n            if (count($error_detected)) {\n                foreach ($error_detected as $err) {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $err\n                    );\n                }\n            } else {\n                $this->flash->addMessage(\n                    'success_detected',\n                    _T(\"Labels has been sucessfully translated!\")\n                );\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor(\n                'dynamicTranslations',\n                ['text_orig' => $post['text_orig']]\n            ));\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette main controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2019-2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Entity\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\Logo;\nuse Galette\\Core\\PrintLogo;\nuse Galette\\Core\\GaletteMail;\nuse Galette\\Core\\SysInfos;\nuse Galette\\Entity\\Contribution;\nuse Galette\\Entity\\FieldsCategories;\nuse Galette\\Entity\\Status;\nuse Galette\\Entity\\Texts;\nuse Galette\\Filters\\MembersList;\nuse Galette\\IO\\News;\nuse Galette\\IO\\Charts;\nuse Galette\\IO\\PdfMembersCards;\nuse Galette\\IO\\PdfContribution;\nuse Galette\\Repository\\Members;\nuse Galette\\Repository\\Reminders;\nuse Analog\\Analog;\n\n/**\n * Galette main controller\n *\n * @category  Controllers\n * @name      GaletteController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nclass GaletteController extends AbstractController\n{\n    /**\n     * Main route\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function slash(Request $request, Response $response): Response\n    {\n        return $this->galetteRedirect($request, $response);\n    }\n\n    /**\n     * System information\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function systemInformation(Request $request, Response $response): Response\n    {\n        $sysinfos = new SysInfos();\n        $raw_infos = $sysinfos->getRawData(\n            $this->zdb,\n            $this->preferences,\n            $this->plugins\n        );\n\n        // display page\n        $this->view->render(\n            $response,\n            'sysinfos.tpl',\n            array(\n                'page_title'    => _T(\"System information\"),\n                'rawinfos'      => $raw_infos\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Dashboard page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function dashboard(Request $request, Response $response): Response\n    {\n        $news = new News($this->preferences->pref_rss_url);\n\n        $params = [\n            'page_title'        => _T(\"Dashboard\"),\n            'contentcls'        => 'desktop',\n            'news'              => $news->getPosts(),\n            'show_dashboard'    => $_COOKIE['show_galette_dashboard']\n        ];\n\n        $hide_telemetry = true;\n        if ($this->login->isAdmin()) {\n            $telemetry = new \\Galette\\Util\\Telemetry(\n                $this->zdb,\n                $this->preferences,\n                $this->plugins\n            );\n            $params['reguuid'] = $telemetry->getRegistrationUuid();\n            $params['telemetry_sent'] = $telemetry->isSent();\n            $params['registered'] = $telemetry->isRegistered();\n\n            $hide_telemetry = $telemetry->isSent() && $telemetry->isRegistered()\n                || isset($_COOKIE['hide_galette_telemetry']) && $_COOKIE['hide_galette_telemetry'];\n        }\n        $params['hide_telemetry'] = $hide_telemetry;\n\n        // display page\n        $this->view->render(\n            $response,\n            'desktop.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Preferences page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function preferences(Request $request, Response $response): Response\n    {\n        // flagging required fields\n        $required = array(\n            'pref_nom'              => 1,\n            'pref_lang'             => 1,\n            'pref_numrows'          => 1,\n            'pref_log'              => 1,\n            'pref_statut'           => 1,\n            'pref_etiq_marges_v'    => 1,\n            'pref_etiq_marges_h'    => 1,\n            'pref_etiq_hspace'      => 1,\n            'pref_etiq_vspace'      => 1,\n            'pref_etiq_hsize'       => 1,\n            'pref_etiq_vsize'       => 1,\n            'pref_etiq_cols'        => 1,\n            'pref_etiq_rows'        => 1,\n            'pref_etiq_corps'       => 1,\n            'pref_card_abrev'       => 1,\n            'pref_card_strip'       => 1,\n            'pref_card_marges_v'    => 1,\n            'pref_card_marges_h'    => 1,\n            'pref_card_hspace'      => 1,\n            'pref_card_vspace'      => 1\n        );\n\n        if ($this->login->isSuperAdmin() && GALETTE_MODE !== 'DEMO') {\n            $required['pref_admin_login'] = 1;\n        }\n\n        $prefs_fields = $this->preferences->getFieldsNames();\n        // collect data\n        foreach ($prefs_fields as $fieldname) {\n            $pref[$fieldname] = $this->preferences->$fieldname;\n        }\n\n        //on error, user values are stored into session\n        if ($this->session->entered_preferences) {\n            $pref = array_merge($pref, $this->session->entered_preferences);\n            $this->session->entered_preferences = null;\n        }\n\n        //List available themes\n        $themes = array();\n        $d = dir(GALETTE_THEMES_PATH);\n        while (($entry = $d->read()) !== false) {\n            $full_entry = GALETTE_THEMES_PATH . $entry;\n            if (\n                $entry != '.'\n                && $entry != '..'\n                && is_dir($full_entry)\n                && file_exists($full_entry . '/page.tpl')\n            ) {\n                $themes[] = $entry;\n            }\n        }\n        $d->close();\n\n        $m = new Members();\n        $s = new Status($this->zdb);\n\n        // display page\n        $this->view->render(\n            $response,\n            'preferences.tpl',\n            array(\n                'page_title'            => _T(\"Settings\"),\n                'staff_members'         => $m->getStaffMembersList(true),\n                'time'                  => time(),\n                'pref'                  => $pref,\n                'pref_numrows_options'  => array(\n                    10 => '10',\n                    20 => '20',\n                    50 => '50',\n                    100 => '100'\n                ),\n                'print_logo'            => $this->print_logo,\n                'required'              => $required,\n                'themes'                => $themes,\n                'statuts'               => $s->getList(),\n                'accounts_options'      => array(\n                    Members::ALL_ACCOUNTS       => _T(\"All accounts\"),\n                    Members::ACTIVE_ACCOUNT     => _T(\"Active accounts\"),\n                    Members::INACTIVE_ACCOUNT   => _T(\"Inactive accounts\")\n                )\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Store preferences\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function storePreferences(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $error_detected = [];\n        $warning_detected = [];\n\n        // Validation\n        if (isset($post['valid']) && $post['valid'] == '1') {\n            if ($this->preferences->check($post, $this->login)) {\n                if (!$this->preferences->store()) {\n                    $error_detected[] = _T(\"An SQL error has occurred while storing preferences. Please try again, and contact the administrator if the problem persists.\");\n                } else {\n                    $this->flash->addMessage(\n                        'success_detected',\n                        _T(\"Preferences has been saved.\")\n                    );\n                }\n                $warning_detected = array_merge($warning_detected, $this->preferences->checkCardsSizes());\n\n                // picture upload\n                if (GALETTE_MODE !== 'DEMO' && isset($_FILES['logo'])) {\n                    if ($_FILES['logo']['error'] === UPLOAD_ERR_OK) {\n                        if ($_FILES['logo']['tmp_name'] != '') {\n                            if (is_uploaded_file($_FILES['logo']['tmp_name'])) {\n                                $res = $this->logo->store($_FILES['logo']);\n                                if ($res < 0) {\n                                    $error_detected[] = $this->logo->getErrorMessage($res);\n                                } else {\n                                    $this->logo = new Logo();\n                                }\n                            }\n                        }\n                    } elseif ($_FILES['logo']['error'] !== UPLOAD_ERR_NO_FILE) {\n                        Analog::log(\n                            $this->logo->getPhpErrorMessage($_FILES['logo']['error']),\n                            Analog::WARNING\n                        );\n                        $error_detected[] = $this->logo->getPhpErrorMessage(\n                            $_FILES['logo']['error']\n                        );\n                    }\n                }\n\n                if (GALETTE_MODE !== 'DEMO' && isset($post['del_logo'])) {\n                    if (!$this->logo->delete()) {\n                        $error_detected[] = _T(\"Delete failed\");\n                    } else {\n                        $this->logo = new Logo(); //get default Logo\n                    }\n                }\n\n                // Card logo upload\n                if (GALETTE_MODE !== 'DEMO' && isset($_FILES['card_logo'])) {\n                    if ($_FILES['card_logo']['error'] === UPLOAD_ERR_OK) {\n                        if ($_FILES['card_logo']['tmp_name'] != '') {\n                            if (is_uploaded_file($_FILES['card_logo']['tmp_name'])) {\n                                $res = $this->print_logo->store($_FILES['card_logo']);\n                                if ($res < 0) {\n                                    $error_detected[] = $this->print_logo->getErrorMessage($res);\n                                } else {\n                                    $this->print_logo = new PrintLogo();\n                                }\n                            }\n                        }\n                    } elseif ($_FILES['card_logo']['error'] !== UPLOAD_ERR_NO_FILE) {\n                        Analog::log(\n                            $this->print_logo->getPhpErrorMessage($_FILES['card_logo']['error']),\n                            Analog::WARNING\n                        );\n                        $error_detected[] = $this->print_logo->getPhpErrorMessage(\n                            $_FILES['card_logo']['error']\n                        );\n                    }\n                }\n\n                if (GALETTE_MODE !== 'DEMO' && isset($post['del_card_logo'])) {\n                    if (!$this->print_logo->delete()) {\n                        $error_detected[] = _T(\"Delete failed\");\n                    } else {\n                        $this->print_logo = new PrintLogo();\n                    }\n                }\n            } else {\n                $error_detected = $this->preferences->getErrors();\n            }\n\n            if (count($error_detected) > 0) {\n                $this->session->entered_preferences = $post;\n                //report errors\n                foreach ($error_detected as $error) {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $error\n                    );\n                }\n            }\n\n            if (count($warning_detected) > 0) {\n                //report warnings\n                foreach ($warning_detected as $warning) {\n                    $this->flash->addMessage(\n                        'warning_detected',\n                        $warning\n                    );\n                }\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('preferences'));\n    }\n\n    /**\n     * Test mail parameters\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function testEmail(Request $request, Response $response): Response\n    {\n        $sent = false;\n        if (!$this->preferences->pref_mail_method > GaletteMail::METHOD_DISABLED) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"You asked Galette to send a test email, but email has been disabled in the preferences.\")\n            );\n        } else {\n            $get = $request->getQueryParams();\n            $dest = (isset($get['adress']) ? $get['adress'] : $this->preferences->pref_email_newadh);\n            if (GaletteMail::isValidEmail($dest)) {\n                $mail = new GaletteMail($this->preferences);\n                $mail->setSubject(_T('Test message'));\n                $mail->setRecipients(\n                    array(\n                        $dest => _T(\"Galette admin\")\n                    )\n                );\n                $mail->setMessage(_T('Test message.'));\n                $sent = $mail->send();\n\n                if ($sent) {\n                    $this->flash->addMessage(\n                        'success_detected',\n                        str_replace(\n                            '%email',\n                            $dest,\n                            _T(\"An email has been sent to %email\")\n                        )\n                    );\n                } else {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        str_replace(\n                            '%email',\n                            $dest,\n                            _T(\"No email sent to %email\")\n                        )\n                    );\n                }\n            } else {\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"Invalid email adress!\")\n                );\n            }\n        }\n\n        if (!$request->isXhr()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('preferences'));\n        } else {\n            return $response->withJson(\n                [\n                    'sent'  => $sent\n                ]\n            );\n        }\n    }\n\n    /**\n     * Charts page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function charts(Request $request, Response $response): Response\n    {\n        $charts = new Charts(\n            array(\n                Charts::MEMBERS_STATUS_PIE,\n                Charts::MEMBERS_STATEDUE_PIE,\n                Charts::CONTRIBS_TYPES_PIE,\n                Charts::COMPANIES_OR_NOT,\n                Charts::CONTRIBS_ALLTIME\n            )\n        );\n\n        // display page\n        $this->view->render(\n            $response,\n            'charts.tpl',\n            array(\n                'page_title'        => _T(\"Charts\"),\n                'charts'            => $charts->getCharts(),\n                'require_charts'    => true\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Core fields configuration page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function configureCoreFields(Request $request, Response $response): Response\n    {\n        $fc = $this->fields_config;\n\n        $params = [\n            'page_title'            => _T(\"Fields configuration\"),\n            'time'                  => time(),\n            'categories'            => FieldsCategories::getList($this->zdb),\n            'categorized_fields'    => $fc->getCategorizedFields(),\n            'non_required'          => $fc->getNonRequired()\n        ];\n\n        // display page\n        $this->view->render(\n            $response,\n            'config_fields.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Process core fields configuration\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function storeCoreFieldsConfig(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $fc = $this->fields_config;\n\n        $pos = 0;\n        $current_cat = 0;\n        $res = array();\n        foreach ($post['fields'] as $abs_pos => $field) {\n            if ($current_cat != $post[$field . '_category']) {\n                //reset position when category has changed\n                $pos = 0;\n                //set new current category\n                $current_cat = $post[$field . '_category'];\n            }\n\n            $required = null;\n            if (isset($post[$field . '_required'])) {\n                $required = $post[$field . '_required'];\n            } else {\n                $required = false;\n            }\n\n            $res[$current_cat][] = array(\n                'field_id'  =>  $field,\n                'label'     =>  $post[$field . '_label'],\n                'category'  =>  $post[$field . '_category'],\n                'visible'   =>  $post[$field . '_visible'],\n                'required'  =>  $required\n            );\n            $pos++;\n        }\n        //okay, we've got the new array, we send it to the\n        //Object that will store it in the database\n        $success = $fc->setFields($res);\n        FieldsCategories::setCategories($this->zdb, $post['categories']);\n        if ($success === true) {\n            $this->flash->addMessage(\n                'success_detected',\n                _T(\"Fields configuration has been successfully stored\")\n            );\n        } else {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"An error occurred while storing fields configuration :(\")\n            );\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('configureCoreFields'));\n    }\n\n    /**\n     * Core lists configuration page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $table    Tbale name\n     *\n     * @return Response\n     */\n    public function configureListFields(Request $request, Response $response, string $table): Response\n    {\n        //TODO: check if type table exists\n\n        $lc = $this->lists_config;\n\n        $params = [\n            'page_title'    => _T(\"Lists configuration\"),\n            'table'         => $table,\n            'time'          => time(),\n            'listed_fields' => $lc->getListedFields(),\n            'remaining_fields'  => $lc->getRemainingFields()\n        ];\n\n        // display page\n        $this->view->render(\n            $response,\n            'config_lists.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Process list fields configuration\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function storeListFields(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        $lc = $this->lists_config;\n        $fields = [];\n        foreach ($post['fields'] as $field) {\n            $fields[] = $lc->getField($field);\n        }\n        $success = $lc->setListFields($fields);\n\n        if ($success === true) {\n            $this->flash->addMessage(\n                'success_detected',\n                _T(\"List configuration has been successfully stored\")\n            );\n        } else {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"An error occurred while storing list configuration :(\")\n            );\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('configureListFields', $this->getArgs($request)));\n    }\n\n    /**\n     * Reminders page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function reminders(Request $request, Response $response): Response\n    {\n        $texts = new Texts($this->preferences, $this->router);\n\n        $previews = array(\n            'impending' => $texts->getTexts('impendingduedate', $this->preferences->pref_lang),\n            'late'      => $texts->getTexts('lateduedate', $this->preferences->pref_lang)\n        );\n\n        $members = new Members();\n        $reminders = $members->getRemindersCount();\n\n        // display page\n        $this->view->render(\n            $response,\n            'reminder.tpl',\n            [\n                'page_title'                => _T(\"Reminders\"),\n                'previews'                  => $previews,\n                'count_impending'           => $reminders['impending'],\n                'count_impending_nomail'    => $reminders['nomail']['impending'],\n                'count_late'                => $reminders['late'],\n                'count_late_nomail'         => $reminders['nomail']['late']\n            ]\n        );\n        return $response;\n    }\n\n    /**\n     * Main route\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doReminders(Request $request, Response $response): Response\n    {\n        $error_detected = [];\n        $warning_detected = [];\n        $success_detected = [];\n\n        $post = $request->getParsedBody();\n        $texts = new Texts($this->preferences, $this->router);\n        $selected = null;\n        if (isset($post['reminders'])) {\n            $selected = $post['reminders'];\n        }\n        $reminders = new Reminders($selected);\n\n        $labels = false;\n        $labels_members = array();\n        if (isset($post['reminder_wo_mail'])) {\n            $labels = true;\n        }\n\n        $list_reminders = $reminders->getList($this->zdb, $labels);\n        if (count($list_reminders) == 0) {\n            $warning_detected[] = _T(\"No reminder to send for now.\");\n        } else {\n            foreach ($list_reminders as $reminder) {\n                if ($labels === false) {\n                    $reminder\n                        ->setDb($this->zdb)\n                        ->setLogin($this->login)\n                        ->setPreferences($this->preferences)\n                        ->setRouter($this->router)\n                    ;\n                    //send reminders by email\n                    $sent = $reminder->send($texts, $this->history, $this->zdb);\n\n                    if ($sent === true) {\n                        $success_detected[] = $reminder->getMessage();\n                    } else {\n                        $error_detected[] = $reminder->getMessage();\n                    }\n                } else {\n                    //generate labels for members without email address\n                    $labels_members[] = $reminder->member_id;\n                }\n            }\n\n            if ($labels === true) {\n                if (count($labels_members) > 0) {\n                    $session_var = 'filters_reminders_labels';\n                    $labels_filters = new MembersList();\n                    $labels_filters->selected = $labels_members;\n                    $this->session->$session_var = $labels_filters;\n                    return $response\n                        ->withStatus(307)\n                        ->withHeader(\n                            'Location',\n                            $this->router->pathFor('pdf-members-labels') . '?session_var=' . $session_var\n                        );\n                } else {\n                    $error_detected[] = _T(\"There are no member to proceed.\");\n                }\n            }\n\n            if (count($error_detected) > 0) {\n                array_unshift(\n                    $error_detected,\n                    _T(\"Reminder has not been sent:\")\n                );\n            }\n\n            if (count($success_detected) > 0) {\n                array_unshift(\n                    $success_detected,\n                    _T(\"Sent reminders:\")\n                );\n            }\n        }\n\n        //flash messages if any\n        if (count($error_detected) > 0) {\n            foreach ($error_detected as $error) {\n                $this->flash->addMessage('error_detected', $error);\n            }\n        }\n        if (count($warning_detected) > 0) {\n            foreach ($warning_detected as $warning) {\n                $this->flash->addMessage('warning_detected', $warning);\n            }\n        }\n        if (count($success_detected) > 0) {\n            foreach ($success_detected as $success) {\n                $this->flash->addMessage('success_detected', $success);\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('reminders'));\n    }\n\n    /**\n     * Main route\n     *\n     * @param Request  $request    PSR Request\n     * @param Response $response   PSR Response\n     * @param string   $membership Either 'late' or 'nearly'\n     * @param string   $mail       Either 'withmail' or 'withoutmail'\n     *\n     * @return Response\n     */\n    public function filterReminders(Request $request, Response $response, string $membership, string $mail): Response\n    {\n        //always reset filters\n        $filters = new MembersList();\n        $filters->filter_account = Members::ACTIVE_ACCOUNT;\n\n        $membership = ($membership === 'nearly' ?\n            Members::MEMBERSHIP_NEARLY : Members::MEMBERSHIP_LATE);\n        $filters->membership_filter = $membership;\n\n        //TODO: filter on reminder may take care of parent email as well\n        $mail = ($mail === 'withmail' ?\n            Members::FILTER_W_EMAIL : Members::FILTER_WO_EMAIL);\n        $filters->email_filter = $mail;\n\n        $this->session->filter_members = $filters;\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('members'));\n    }\n\n    /**\n     * Direct document page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $hash     Hash\n     *\n     * @return Response\n     */\n    public function documentLink(Request $request, Response $response, string $hash): Response\n    {\n        // display page\n        $this->view->render(\n            $response,\n            'directlink.tpl',\n            array(\n                'hash'          => $hash,\n                'page_title'    => _T('Download document')\n            )\n        );\n        return $response;\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette history controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Controllers\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Throwable;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\History;\nuse Galette\\Filters\\HistoryList;\nuse Analog\\Analog;\n\n/**\n * Galette history controller\n *\n * @category  Controllers\n * @name      HistoryController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nclass HistoryController extends AbstractController\n{\n    /**\n     * History page\n     *\n     * @param Request        $request  PSR Request\n     * @param Response       $response PSR Response\n     * @param string         $option   One of 'page' or 'order'\n     * @param string|integer $value    Value of the option\n     *\n     * @return Response\n     */\n    public function list(\n        Request $request,\n        Response $response,\n        $option = null,\n        $value = null\n    ): Response {\n        if (isset($this->session->filter_history)) {\n            $filters = $this->session->filter_history;\n        } else {\n            $filters = new HistoryList();\n        }\n\n        if (isset($request->getQueryParams()['nbshow'])) {\n            $filters->show = $request->getQueryParams()['nbshow'];\n        }\n\n        if ($option !== null) {\n            switch ($option) {\n                case 'page':\n                    $filters->current_page = (int)$value;\n                    break;\n                case 'order':\n                    $filters->orderby = $value;\n                    break;\n            }\n        }\n\n        $this->session->filter_history = $filters;\n\n        $this->history->setFilters($filters);\n        $logs = $this->history->getHistory();\n\n        //assign pagination variables to the template and add pagination links\n        $this->history->filters->setSmartyPagination($this->router, $this->view->getSmarty());\n\n        // display page\n        $this->view->render(\n            $response,\n            'history.tpl',\n            array(\n                'page_title'        => _T(\"Logs\"),\n                'logs'              => $logs,\n                'history'           => $this->history\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * History filtering\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function historyFilter(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $error_detected = [];\n\n        if ($this->session->filter_history !== null) {\n            $filters = $this->session->filter_history;\n        } else {\n            $filters = new HistoryList();\n        }\n\n        if (isset($post['clear_filter'])) {\n            $filters->reinit();\n        } else {\n            if (\n                (isset($post['nbshow']) && is_numeric($post['nbshow']))\n            ) {\n                $filters->show = $post['nbshow'];\n            }\n\n            if (isset($post['end_date_filter']) || isset($post['start_date_filter'])) {\n                try {\n                    if (isset($post['start_date_filter'])) {\n                        $field = _T(\"start date filter\");\n                        $filters->start_date_filter = $post['start_date_filter'];\n                    }\n                    if (isset($post['end_date_filter'])) {\n                        $field = _T(\"end date filter\");\n                        $filters->end_date_filter = $post['end_date_filter'];\n                    }\n                } catch (Throwable $e) {\n                    $error_detected[] = $e->getMessage();\n                }\n            }\n\n            if (isset($post['user_filter'])) {\n                $filters->user_filter = $post['user_filter'];\n            }\n\n            if (isset($post['action_filter'])) {\n                $filters->action_filter = $post['action_filter'];\n            }\n        }\n\n        $this->session->filter_history = $filters;\n\n        if (count($error_detected) > 0) {\n            //report errors\n            foreach ($error_detected as $error) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    $error\n                );\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('history'));\n    }\n\n    /**\n     * History flush\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function flushHistory(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $ajax = isset($post['ajax']) && $post['ajax'] === 'true';\n        $success = false;\n\n        $uri = isset($post['redirect_uri']) ?\n            $post['redirect_uri'] : $this->router->pathFor('slash');\n\n        if (!isset($post['confirm'])) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Removal has not been confirmed!\")\n            );\n        } else {\n            try {\n                $this->history->clean();\n                //reinitialize object after flush\n                $this->history = new History($this->zdb, $this->login, $this->preferences);\n                $filters = new HistoryList();\n                $this->session->filter_history = $filters;\n\n                $this->flash->addMessage(\n                    'success_detected',\n                    _T('Logs have been flushed!')\n                );\n                $success = true;\n            } catch (Throwable $e) {\n                $this->zdb->connection->rollBack();\n                Analog::log(\n                    'An error occurred flushing logs | ' . $e->getMessage(),\n                    Analog::ERROR\n                );\n\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T('An error occurred trying to flush logs :(')\n                );\n            }\n        }\n\n        if (!$ajax) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $uri);\n        } else {\n            return $response->withJson(\n                [\n                    'success'   => $success\n                ]\n            );\n        }\n    }\n\n    /**\n     * History flush confirmation\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function confirmHistoryFlush(Request $request, Response $response): Response\n    {\n        $data = [\n            'redirect_uri'  => $this->router->pathFor('history')\n        ];\n\n        // display page\n        $this->view->render(\n            $response,\n            'confirm_removal.tpl',\n            array(\n                'mode'          => $request->isXhr() ? 'ajax' : '',\n                'page_title'    => _T('Flush the logs'),\n                'form_url'      => $this->router->pathFor('doFlushHistory'),\n                'cancel_uri'    => $data['redirect_uri'],\n                'data'          => $data\n            )\n        );\n        return $response;\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette PDF controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2019 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Entity\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-05\n */\n\nnamespace Galette\\Controllers;\n\nuse Throwable;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Analog\\Analog;\nuse Galette\\Core\\Links;\nuse Galette\\Core\\Login;\nuse Galette\\Entity\\Adherent;\nuse Galette\\Entity\\Contribution;\nuse Galette\\Entity\\PdfModel;\nuse Galette\\Filters\\MembersList;\nuse Galette\\IO\\Pdf;\nuse Galette\\IO\\PdfAttendanceSheet;\nuse Galette\\IO\\PdfContribution;\nuse Galette\\IO\\PdfGroups;\nuse Galette\\IO\\PdfMembersCards;\nuse Galette\\IO\\PdfMembersLabels;\nuse Galette\\Repository\\Members;\nuse Galette\\Repository\\Groups;\nuse Galette\\Repository\\PdfModels;\n\n/**\n * Galette PDF controller\n *\n * @category  Controllers\n * @name      GaletteController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-05\n */\n\nclass PdfController extends AbstractController\n{\n    /**\n     * Send response\n     *\n     * @param Response $response PSR Response\n     * @param Pdf      $pdf      PDF to output\n     *\n     * @return Response\n     */\n    protected function sendResponse(Response $response, Pdf $pdf): Response\n    {\n        return $response\n            ->withHeader('Content-type', 'application/pdf')\n            ->withHeader('Content-Disposition', 'attachment;filename=\"' . $pdf->getFileName() . '\"')\n            ->write($pdf->download());\n    }\n\n    /**\n     * Members PDF card\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id_adh   Member id\n     *\n     * @return Response\n     */\n    public function membersCards(Request $request, Response $response, int $id_adh = null): Response\n    {\n        if ($this->session->filter_members) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        if ($id_adh !== null && $id_adh > 0) {\n            $deps = ['dynamics' => true];\n            if ($this->login->id === $id_adh) {\n                $deps['dues'] = true;\n            }\n            $adh = new Adherent(\n                $this->zdb,\n                $id_adh,\n                $deps\n            );\n            if (!$adh->canEdit($this->login)) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"You do not have permission for requested URL.\")\n                );\n\n                return $response\n                    ->withStatus(403)\n                    ->withHeader(\n                        'Location',\n                        $this->router->pathFor('me')\n                    );\n            }\n\n            //check if member is up to date\n            if ($this->login->id == $id_adh) {\n                if (!$adh->isUp2Date()) {\n                    Analog::log(\n                        'Member ' . $id_adh . ' is not up to date; cannot get his PDF member card',\n                        Analog::WARNING\n                    );\n                    return $response\n                        ->withStatus(301)\n                        ->withHeader('Location', $this->router->pathFor('slash'));\n                }\n            }\n\n            // If we are called from a member's card, get unique id value\n            $unique = $id_adh;\n        } else {\n            if (count($filters->selected) == 0) {\n                Analog::log(\n                    'No member selected to generate members cards',\n                    Analog::INFO\n                );\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"No member was selected, please check at least one name.\")\n                );\n\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('members'));\n            }\n        }\n\n        // Fill array $selected with selected ids\n        $selected = array();\n        if (isset($unique) && $unique) {\n            $selected[] = $unique;\n        } else {\n            $selected = $filters->selected;\n        }\n\n        $m = new Members();\n        $members = $m->getArrayList(\n            $selected,\n            array('nom_adh', 'prenom_adh'),\n            true\n        );\n\n        if (!is_array($members) || count($members) < 1) {\n            Analog::log(\n                'An error has occurred, unable to get members list.',\n                Analog::ERROR\n            );\n\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Unable to get members list.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n\n        $pdf = new PdfMembersCards($this->preferences);\n        $pdf->drawCards($members);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * Members PDF label\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function membersLabels(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $get = $request->getQueryParams();\n\n        $session_var = $post['session_var'] ?? $get['session_var'] ?? 'filter_members';\n\n        if (isset($this->session->$session_var)) {\n            $filters = $this->session->$session_var;\n        } else {\n            $filters = new MembersList();\n        }\n\n        $members = null;\n        if (\n            isset($get['from'])\n            && $get['from'] === 'mailing'\n        ) {\n            //if we're from mailing, we have to retrieve\n            //its unreachables members for labels\n            $mailing = $this->session->mailing;\n            $members = $mailing->unreachables;\n        } else {\n            if (count($filters->selected) == 0) {\n                Analog::log('No member selected to generate labels', Analog::INFO);\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"No member was selected, please check at least one name.\")\n                );\n\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('members'));\n            }\n\n            $m = new Members();\n            $members = $m->getArrayList(\n                $filters->selected,\n                array('nom_adh', 'prenom_adh')\n            );\n        }\n\n        if (!is_array($members) || count($members) < 1) {\n            Analog::log(\n                'An error has occurred, unable to get members list.',\n                Analog::ERROR\n            );\n\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Unable to get members list.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n\n        $pdf = new PdfMembersLabels($this->preferences);\n        $pdf->drawLabels($members);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * PDF adhesion form\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id_adh   Member id\n     *\n     * @return Response\n     */\n    public function adhesionForm(Request $request, Response $response, int $id_adh = null): Response\n    {\n        $adh = new Adherent($this->zdb, $id_adh, ['dynamics' => true]);\n\n        if ($id_adh !== null && !$adh->canEdit($this->login)) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"You do not have permission for requested URL.\")\n            );\n\n            return $response\n                ->withStatus(403)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('me')\n                );\n        }\n\n        $form = $this->preferences->pref_adhesion_form;\n        $pdf = new $form($adh, $this->zdb, $this->preferences);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * PDF attendance sheet configuration page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function attendanceSheetConfig(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        if ($this->session->filter_members !== null) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        // check for ajax mode\n        $ajax = false;\n        if (\n            $request->isXhr()\n            || (isset($post['ajax'])\n            && $post['ajax'] == 'true')\n        ) {\n            $ajax = true;\n\n            //retrieve selected members\n            $selection = $post['selection'] ?? array();\n\n            $filters->selected = $selection;\n            $this->session->filter_members = $filters;\n        } else {\n            $selection = $filters->selected;\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            'attendance_sheet_details.tpl',\n            [\n                'page_title'    => _T(\"Attendance sheet configuration\"),\n                'ajax'          => $ajax,\n                'selection'     => $selection\n            ]\n        );\n        return $response;\n    }\n\n    /**\n     * PDF attendance sheet\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function attendanceSheet(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        if ($this->session->filter_members !== null) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        //retrieve selected members\n        $selection = (isset($post['selection'])) ? $post['selection'] : array();\n\n        $filters->selected = $selection;\n        $this->session->filter_members = $filters;\n\n        if (count($filters->selected) == 0) {\n            Analog::log('No member selected to generate attendance sheet', Analog::INFO);\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"No member selected to generate attendance sheet\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n\n        $m = new Members();\n        $members = $m->getArrayList(\n            $filters->selected,\n            array('nom_adh', 'prenom_adh'),\n            true\n        );\n\n        if (!is_array($members) || count($members) < 1) {\n            Analog::log('No member selected to generate attendance sheet', Analog::INFO);\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"No member selected to generate attendance sheet\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n\n        $doc_title = _T(\"Attendance sheet\");\n        if (isset($post['sheet_type']) && trim($post['sheet_type']) != '') {\n            $doc_title = $post['sheet_type'];\n        }\n\n        $data = [\n            'doc_title' => $doc_title,\n            'title'     => $post['sheet_title'] ?? null,\n            'subtitle'  => $post['sheet_sub_title'] ?? null,\n            'sheet_date' => $post['sheet_date'] ?? null\n        ];\n        $pdf = new PdfAttendanceSheet($this->zdb, $this->preferences, $data);\n        //with or without images?\n        if (isset($post['sheet_photos']) && $post['sheet_photos'] === '1') {\n            $pdf->withImages();\n        }\n        $pdf->drawSheet($members);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * Contribution PDF\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Contribution id\n     *\n     * @return Response\n     */\n    public function contribution(Request $request, Response $response, int $id): Response\n    {\n        $contribution = new Contribution($this->zdb, $this->login, $id);\n        if ($contribution->id == '') {\n            //not possible to load contribution, exit\n            $this->flash->addMessage(\n                'error_detected',\n                str_replace(\n                    '%id',\n                    $id,\n                    _T(\"Unable to load contribution #%id!\")\n                )\n            );\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor(\n                    'contributions',\n                    ['type' => 'contributions']\n                ));\n        }\n\n        $pdf = new PdfContribution($contribution, $this->zdb, $this->preferences);\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * Groups PDF\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Group id\n     *\n     * @return Response\n     */\n    public function group(Request $request, Response $response, int $id = null): Response\n    {\n        $groups = new Groups($this->zdb, $this->login);\n\n        $groups_list = null;\n        if ($id !== null) {\n            $groups_list = $groups->getList(true, $id);\n        } else {\n            $groups_list = $groups->getList();\n        }\n\n        if (!is_array($groups_list) || count($groups_list) < 1) {\n            Analog::log(\n                'An error has occurred, unable to get groups list.',\n                Analog::ERROR\n            );\n\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Unable to get groups list.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('groups'));\n        }\n\n        $pdf = new PdfGroups($this->preferences);\n        $pdf->draw($groups_list, $this->login);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * PDF models list\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Model id\n     *\n     * @return Response\n     */\n    public function models(Request $request, Response $response, int $id = null): Response\n    {\n        $mid = 1;\n        if (isset($_POST[PdfModel::PK])) {\n            $mid = (int)$_POST[PdfModel::PK];\n        } elseif ($id !== null) {\n            $mid = $id;\n        }\n\n\n        $ms = new PdfModels($this->zdb, $this->preferences, $this->login);\n        $models = $ms->getList();\n\n        $model = null;\n        foreach ($models as $m) {\n            if ($m->id === $mid) {\n                $model = $m;\n                break;\n            }\n        }\n\n        $tpl = null;\n        $params = ['model' => $model];\n\n        //Render directly template if we called from ajax,\n        //render in a full page otherwise\n        if (\n            $request->isXhr()\n            || (isset($request->getQueryParams()['ajax'])\n            && $request->getQueryParams()['ajax'] == 'true')\n        ) {\n            $tpl = 'gestion_pdf_content.tpl';\n        } else {\n            $tpl = 'gestion_pdf.tpl';\n            $params += [\n                'page_title'        => _T(\"PDF models\"),\n                'models'            => $models\n            ];\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            $tpl,\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Store PDF models\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function storeModels(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $error_detected = [];\n\n        if (!isset($post['model_type'])) {\n            $error_detected[] = _T(\"Missing PDF model type!\");\n        } else {\n            $type = (int)$post['model_type'];\n            $class = PdfModel::getTypeClass($type);\n            if (isset($post[PdfModel::PK])) {\n                $model = new $class($this->zdb, $this->preferences, (int)$_POST[PdfModel::PK]);\n            } else {\n                $model = new $class($this->zdb, $this->preferences);\n            }\n\n            try {\n                $fields = [\n                    'model_header'      => 'header',\n                    'model_footer'      => 'footer',\n                    'model_body'        => 'body',\n                    'model_title'       => 'title',\n                    'model_subtitle'    => 'subtitle',\n                    'model_styles'      => 'styles'\n                ];\n\n                $model->type = $type;\n                foreach ($fields as $pvar => $prop) {\n                    if (isset($post[$pvar])) {\n                        $model->$prop = $post[$pvar];\n                    }\n                }\n\n                $res = $model->store();\n                if ($res === true) {\n                    $this->flash->addMessage(\n                        'success_detected',\n                        _T(\"Model has been successfully stored!\")\n                    );\n                } else {\n                    $error_detected[] = _T(\"Model has not been stored :(\");\n                }\n            } catch (Throwable $e) {\n                $error_detected[] = $e->getMessage();\n            }\n        }\n\n        if (count($error_detected) > 0) {\n            foreach ($error_detected as $error) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    $error\n                );\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('pdfModels', ['id' => $model->id ?? null]));\n    }\n\n\n    /**\n     * Get direct document\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $hash     Hash\n     *\n     * @return Response\n     */\n    public function directlinkDocument(Request $request, Response $response, string $hash): Response\n    {\n        $post = $request->getParsedBody();\n        $email = $post['email'];\n\n        $links = new Links($this->zdb);\n        $valid = $links->isHashValid($hash, $email);\n\n        if ($valid === false) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Invalid link!\")\n            );\n\n            return $response->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('directlink', ['hash' => $hash]));\n        }\n\n        $target = $valid[0];\n        $id = (int)$valid[1];\n\n        //get user information (like id...) from DB since its missing\n        $select = $this->zdb->select(Adherent::TABLE, 'a');\n        $select->where(['email_adh' => $post['email']]);\n        $results = $this->zdb->execute($select);\n        $row = $results->current();\n\n        //create a new login instance, to not break current session if any\n        //this will be passed directly to Contribution constructor\n        $login = new Login(\n            $this->zdb,\n            $this->i18n\n        );\n        $login->id = (int)$row['id_adh'];\n\n        if ($target === Links::TARGET_MEMBERCARD) {\n            $m = new Members();\n            $members = $m->getArrayList(\n                [$id],\n                array('nom_adh', 'prenom_adh'),\n                true\n            );\n\n            if (!is_array($members) || count($members) < 1) {\n                Analog::log(\n                    'An error has occurred, unable to get members list.',\n                    Analog::ERROR\n                );\n\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"Unable to get members list.\")\n                );\n\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('directlink', ['hash' => $hash]));\n            }\n\n            $pdf = new PdfMembersCards($this->preferences);\n            $pdf->drawCards($members);\n        } else {\n            $contribution = new Contribution($this->zdb, $login, $id);\n            if ($contribution->id == '') {\n                //not possible to load contribution, exit\n                $this->flash->addMessage(\n                    'error_detected',\n                    str_replace(\n                        '%id',\n                        $id,\n                        _T(\"Unable to load contribution #%id!\")\n                    )\n                );\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor(\n                        'directlink',\n                        ['hash' => $hash]\n                    ));\n            }\n            $pdf = new PdfContribution($contribution, $this->zdb, $this->preferences);\n        }\n\n        return $this->sendResponse($response, $pdf);\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette plugins controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Controllers\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Throwable;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\Install;\nuse Galette\\Core\\PluginInstall;\nuse Laminas\\Db\\Adapter\\Adapter;\nuse Analog\\Analog;\n\n/**\n * Galette plugins controller\n *\n * @category  Controllers\n * @name      PluginsController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nclass PluginsController extends AbstractController\n{\n    /**\n     * Plugins page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function showPlugins(Request $request, Response $response): Response\n    {\n        $plugins = $this->plugins;\n\n        $plugins_list = $plugins->getModules();\n        $disabled_plugins = $plugins->getDisabledModules();\n\n        // display page\n        $this->view->render(\n            $response,\n            'plugins.tpl',\n            array(\n                'page_title'            => _T(\"Plugins\"),\n                'plugins_list'          => $plugins_list,\n                'plugins_disabled_list' => $disabled_plugins\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Plugins activation/desactivaion\n     *\n     * @param Request  $request   PSR Request\n     * @param Response $response  PSR Response\n     * @param string   $action    Action\n     * @param string   $module_id Module id\n     *\n     * @return Response\n     */\n    public function togglePlugin(Request $request, Response $response, string $action, string $module_id): Response\n    {\n        if (GALETTE_MODE !== 'DEMO') {\n            $plugins = $this->plugins;\n            $reload_plugins = false;\n            if ($action == 'activate') {\n                try {\n                    $plugins->activateModule($module_id);\n                    $this->flash->addMessage(\n                        'success_detected',\n                        str_replace(\n                            '%name',\n                            $module_id,\n                            _T(\"Plugin %name has been enabled\")\n                        )\n                    );\n                    $reload_plugins = true;\n                } catch (Throwable $e) {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $e->getMessage()\n                    );\n                }\n            } elseif ($action == 'deactivate') {\n                try {\n                    $plugins->deactivateModule($module_id);\n                    $this->flash->addMessage(\n                        'success_detected',\n                        str_replace(\n                            '%name',\n                            $module_id,\n                            _T(\"Plugin %name has been disabled\")\n                        )\n                    );\n                    $reload_plugins = true;\n                } catch (Throwable $e) {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $e->getMessage()\n                    );\n                }\n            }\n\n            //If some plugins have been (de)activated, we have to reload\n            if ($reload_plugins === true) {\n                $plugins->loadModules($this->preferences, GALETTE_PLUGINS_PATH, $this->i18n->getLongID());\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('plugins'));\n    }\n\n    /**\n     * Plugins database activation\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $id       Plugin id\n     *\n     * @return Response\n     */\n    public function initPluginDb(Request $request, Response $response, string $id): Response\n    {\n        if (GALETTE_MODE === 'DEMO') {\n            Analog::log(\n                'Trying to access plugin database initialization in DEMO mode.',\n                Analog::WARNING\n            );\n            return $response->withStatus(403);\n        }\n\n        $params = [];\n        $warning_detected = [];\n        $error_detected = [];\n\n        $plugid = $id;\n        $plugin = $this->plugins->getModules($plugid);\n\n        if ($plugin === null) {\n            Analog::log(\n                'Unable to load plugin `' . $plugid . '`!',\n                Analog::URGENT\n            );\n            $notFound = $this->notFoundHandler;\n            return $notFound($request, $response);\n        }\n\n        $install = null;\n        $mdplugin = md5($plugin['root']);\n        if (\n            isset($this->session->$mdplugin)\n            && !isset($_GET['raz'])\n        ) {\n            $install = $this->session->$mdplugin;\n        } else {\n            $install = new PluginInstall();\n        }\n\n        $post = $request->getParsedBody();\n\n        if (isset($post['stepback_btn'])) {\n            $install->atPreviousStep();\n        } elseif (isset($post['install_prefs_ok'])) {\n            $install->atEndStep();\n        } elseif (isset($_POST['previous_version'])) {\n            $install->setInstalledVersion($_POST['previous_version']);\n            $install->atDbUpgradeStep();\n        } elseif (isset($post['install_dbperms_ok'])) {\n            if ($install->isInstall()) {\n                $install->atDbInstallStep();\n            } elseif ($install->isUpgrade()) {\n                $install->atVersionSelection();\n            }\n        } elseif (isset($post['install_type'])) {\n            $install->setMode($post['install_type']);\n            $install->atDbStep();\n        }\n\n        $step = 1;\n        $istep = 1;\n\n        if (isset($post['install_type'])) {\n            $params['install_type'] = $post['install_type'];\n            $istep = 2;\n        }\n\n        if (isset($post['install_dbperms_ok'])) {\n            if ($post['install_type'] === PluginInstall::INSTALL) {\n                $istep = 4;\n            } else {\n                $istep = 3;\n            }\n        }\n\n        if (isset($post['previous_version'])) {\n            $istep = 4;\n        }\n\n        if (isset($post['install_dbwrite_ok'])) {\n            $istep = 5;\n        }\n\n        if (isset($post['install_type'])) {\n            if ($post['install_type'] == PluginInstall::INSTALL) {\n                $step = 'i' . $istep;\n            } elseif ($istep > 1 && $post['install_type'] == PluginInstall::UPDATE) {\n                $step = 'u' . $istep;\n            }\n        }\n\n        switch ($step) {\n            case '1':\n                //let's look for updates scripts\n                $update_scripts = $install::getUpdateScripts($plugin['root'], TYPE_DB);\n                if (count($update_scripts) > 0) {\n                    $params['update_scripts'] = $update_scripts;\n                }\n                break;\n            case 'i2':\n            case 'u2':\n                if (!defined('GALETTE_THEME_DIR')) {\n                    define('GALETTE_THEME_DIR', './themes/default/');\n                }\n\n                $install_plugin = true;\n                //not used here, but from include\n                $zdb = $this->zdb;\n                ob_start();\n                include_once GALETTE_ROOT . '/install/steps/db_checks.php';\n                $params['results'] = ob_get_contents();\n                ob_end_clean();\n                break;\n            case 'u3':\n                $update_scripts = Install::getUpdateScripts($plugin['root'], TYPE_DB);\n                $params['update_scripts'] = $update_scripts;\n                break;\n            case 'i4':\n            case 'u4':\n                $messages = [];\n\n                // begin : copyright (2002) the phpbb group (support@phpbb.com)\n                // load in the sql parser\n                include GALETTE_ROOT . 'includes/sql_parse.php';\n                if ($step == 'u4') {\n                    $update_scripts = Install::getUpdateScripts(\n                        $plugin['root'],\n                        TYPE_DB,\n                        $_POST['previous_version']\n                    );\n                } else {\n                    $update_scripts['current'] = TYPE_DB . '.sql';\n                }\n\n                $sql_query = '';\n                foreach ($update_scripts as $key => $val) {\n                    $sql_query .= @fread(\n                        @fopen($plugin['root'] . '/scripts/' . $val, 'r'),\n                        @filesize($plugin['root'] . '/scripts/' . $val)\n                    );\n                    $sql_query .= \"\\n\";\n                }\n\n                $sql_query = preg_replace('/galette_/', PREFIX_DB, $sql_query);\n                $sql_query = remove_remarks($sql_query);\n\n                $sql_query = split_sql_file($sql_query, ';');\n\n                $sql_size = sizeof($sql_query);\n                for ($i = 0; $i < $sql_size; $i++) {\n                    $query = trim($sql_query[$i]);\n                    if ($query != '' && $query[0] != '-') {\n                        //some output infos\n                        @list($w1, $w2, $w3, $extra) = array_pad(explode(' ', $query, 4), 4, '');\n                        if ($extra != '') {\n                            $extra = '...';\n                        }\n                        try {\n                            $this->zdb->db->query(\n                                $query,\n                                Adapter::QUERY_MODE_EXECUTE\n                            );\n                            $messages['success'][] = $w1 . ' ' . $w2 . ' ' . $w3 .\n                                ' ' . $extra;\n                        } catch (Throwable $e) {\n                            Analog::log(\n                                'Error executing query | ' . $e->getMessage() .\n                                ' | Query was: ' . $query,\n                                Analog::WARNING\n                            );\n                            if (\n                                (strcasecmp(trim($w1), 'drop') != 0)\n                                && (strcasecmp(trim($w1), 'rename') != 0)\n                            ) {\n                                $error_detected[] = $w1 . ' ' . $w2 . ' ' . $w3 . ' ' . $extra;\n                                $error_detected[] = $e->getMessage() . '<br/>(' . $query . ')';\n                            } else {\n                                //if error are on drop, DROP, rename or RENAME we can continue\n                                $warning_detected[] = $w1 . ' ' . $w2 . ' ' . $w3 . ' ' . $extra;\n                                $warning_detected[] = $e->getMessage() . '<br/>(' . $query . ')';\n                            }\n                        }\n                    }\n                }\n                break;\n        }\n\n        $this->session->$mdplugin = $install;\n\n        $params += [\n            'page_title'    => $install->getStepTitle(),\n            'step'          => $step,\n            'istep'         => $istep,\n            'plugid'        => $plugid,\n            'plugin'        => $plugin,\n            'mode'          => ($request->isXhr() ? 'ajax' : ''),\n            'error_detected' => $error_detected\n        ];\n\n        // display page\n        $this->view->render(\n            $response,\n            'plugin_initdb.tpl',\n            $params\n        );\n        return $response;\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Member class for galette\n *\n * PHP version 5\n *\n * Copyright \u00a9 2009-2014 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Entity\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2009-2014 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.7dev - 2009-06-02\n */\n\nnamespace Galette\\Entity;\n\nuse Throwable;\nuse Analog\\Analog;\nuse Laminas\\Db\\Sql\\Expression;\nuse Galette\\Core\\Db;\nuse Galette\\Core\\Picture;\nuse Galette\\Core\\GaletteMail;\nuse Galette\\Core\\Password;\nuse Galette\\Core\\Preferences;\nuse Galette\\Core\\History;\nuse Galette\\Repository\\Groups;\nuse Galette\\Repository\\Members;\n\n/**\n * Member class for galette\n *\n * @category  Entity\n * @name      Adherent\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2009-2014 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.7dev - 02-06-2009\n *\n * @property integer $id\n * @property integer|Title $title Either a title id or an instance of Title\n * @property string $stitle Title label\n * @property string company_name\n * @property string $name\n * @property string $surname\n * @property string $nickname\n * @property string $birthdate Localized birth date\n * @property string $rbirthdate Raw birth date\n * @property string $birth_place\n * @property integer $gender\n * @property string $sgender Gender label\n * @property string $job\n * @property string $language\n * @property integer $status\n * @property string $sstatus Status label\n * @property string $address\n * @property string $address_continuation\n * @property string $zipcode\n * @property string $town\n * @property string $country\n * @property string $phone\n * @property string $gsm\n * @property string $email\n * @property string $website\n * @property string $msn\n * @property string $icq\n * @property string $jabber\n * @property string $gnupgid\n * @property string $fingerprint\n * @property string $login\n * @property string $creation_date Localized creation date\n * @property string $modification_date Localized modification date\n * @property string $due_date Localized due date\n * @property string $others_infos\n * @property string $others_infos_admin\n * @property Picture $picture\n * @property array $groups\n * @property array $managed_groups\n * @property integer|Adherent $parent Parent id if parent dep is not loaded, Adherent instance otherwise\n * @property array $children\n * @property boolean $admin better to rely on isAdmin()\n * @property boolean $staff better to rely on isStaff()\n * @property boolean $due_free better to rely on isDueFree()\n * @property boolean $appears_in_list better to rely on appearsInMembersList()\n * @property boolean $active better to rely on isActive()\n * @property boolean $duplicate better to rely on isDuplicate()\n * @property string $sadmin yes/no\n * @property string $sstaff yes/no\n * @property string $sdue_free yes/no\n * @property string $sappears_in_list yes/no\n * @property string $sactive yes/no\n * @property string $sfullname\n * @property string $sname\n * @property string $saddress Concatened address and continuation\n * @property string $contribstatus State of member contributions\n * @property string $days_remaining\n */\nclass Adherent\n{\n    use DynamicsTrait;\n\n    public const TABLE = 'adherents';\n    public const PK = 'id_adh';\n\n    public const NC = 0;\n    public const MAN = 1;\n    public const WOMAN = 2;\n\n    public const AFTER_ADD_DEFAULT = 0;\n    public const AFTER_ADD_TRANS = 1;\n    public const AFTER_ADD_NEW = 2;\n    public const AFTER_ADD_SHOW = 3;\n    public const AFTER_ADD_LIST = 4;\n    public const AFTER_ADD_HOME = 5;\n\n    private $_id;\n    //Identity\n    private $_title;\n    private $_company_name;\n    private $_name;\n    private $_surname;\n    private $_nickname;\n    private $_birthdate;\n    private $_birth_place;\n    private $_gender;\n    private $_job;\n    private $_language;\n    private $_active;\n    private $_status;\n    //Contact information\n    private $_address;\n    private $_address_continuation; /** TODO: remove */\n    private $_zipcode;\n    private $_town;\n    private $_country;\n    private $_phone;\n    private $_gsm;\n    private $_email;\n    private $_website;\n    private $_msn; /** TODO: remove */\n    private $_icq; /** TODO: remove */\n    private $_jabber; /** TODO: remove */\n    private $_gnupgid; /** TODO: remove */\n    private $_fingerprint; /** TODO: remove */\n    //Galette relative information\n    private $_appears_in_list;\n    private $_admin;\n    private $_staff;\n    private $_due_free;\n    private $_login;\n    private $_password;\n    private $_creation_date;\n    private $_modification_date;\n    private $_due_date;\n    private $_others_infos;\n    private $_others_infos_admin;\n    private $_picture;\n    private $_oldness;\n    private $_days_remaining;\n    private $_groups;\n    private $_managed_groups;\n    private $_parent;\n    private $_children;\n    private $_duplicate = false;\n\n    private $_row_classes;\n\n    private $_self_adh = false;\n    private $_deps = array(\n        'picture'   => true,\n        'groups'    => true,\n        'dues'      => true,\n        'parent'    => false,\n        'children'  => false,\n        'dynamics'  => false\n    );\n\n    private $zdb;\n    private $preferences;\n    private $fields;\n    private $history;\n\n    private $parent_fields = [\n        'adresse_adh',\n        'adresse2_adh',\n        'cp_adh',\n        'ville_adh',\n        'email_adh'\n    ];\n\n    private $errors = [];\n\n    private $sendmail = false;\n\n    /**\n     * Default constructor\n     *\n     * @param Db          $zdb  Database instance\n     * @param mixed       $args Either a ResultSet row, its id or its\n     *                          login or its email for to load s specific\n     *                          member, or null to just instanciate object\n     * @param false|array $deps Dependencies configuration, see Adherent::$_deps\n     */\n    public function __construct(Db $zdb, $args = null, $deps = null)\n    {\n        global $i18n;\n\n        $this->zdb = $zdb;\n\n        if ($deps !== null) {\n            if (is_array($deps)) {\n                $this->_deps = array_merge(\n                    $this->_deps,\n                    $deps\n                );\n            } elseif ($deps === false) {\n                //no dependencies\n                $this->_deps = array_fill_keys(\n                    array_keys($this->_deps),\n                    false\n                );\n            } else {\n                Analog::log(\n                    '$deps shoud be an array, ' . gettype($deps) . ' given!',\n                    Analog::WARNING\n                );\n            }\n        }\n\n        if ($args == null || is_int($args)) {\n            if (is_int($args) && $args > 0) {\n                $this->load($args);\n            } else {\n                $this->_active = true;\n                $this->_language = $i18n->getID();\n                $this->_creation_date = date(\"Y-m-d\");\n                $this->_status = $this->getDefaultStatus();\n                $this->_title = null;\n                $this->_gender = self::NC;\n                $gp = new Password($this->zdb);\n                $this->_password = $gp->makeRandomPassword();\n                $this->_picture = new Picture();\n                $this->_admin = false;\n                $this->_staff = false;\n                $this->_due_free = false;\n                $this->_appears_in_list = false;\n                $this->_parent = null;\n\n                if ($this->_deps['dynamics'] === true) {\n                    $this->loadDynamicFields();\n                }\n            }\n        } elseif (is_object($args)) {\n            $this->loadFromRS($args);\n        } elseif (is_string($args)) {\n            $this->loadFromLoginOrMail($args);\n        }\n    }\n\n    /**\n     * Loads a member from its id\n     *\n     * @param int $id the identifiant for the member to load\n     *\n     * @return bool true if query succeed, false otherwise\n     */\n    public function load($id)\n    {\n        try {\n            $select = $this->zdb->select(self::TABLE, 'a');\n\n            $select->join(\n                array('b' => PREFIX_DB . Status::TABLE),\n                'a.' . Status::PK . '=b.' . Status::PK,\n                array('priorite_statut')\n            )->where(array(self::PK => $id));\n\n            $results = $this->zdb->execute($select);\n\n            if ($results->count() === 0) {\n                return false;\n            }\n\n            $this->loadFromRS($results->current());\n            return true;\n        } catch (Throwable $e) {\n            Analog::log(\n                'Cannot load member form id `' . $id . '` | ' . $e->getMessage(),\n                Analog::WARNING\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Loads a member from its login\n     *\n     * @param string $login login for the member to load\n     *\n     * @return bool true if query succeed, false otherwise\n     */\n    public function loadFromLoginOrMail($login)\n    {\n        try {\n            $select = $this->zdb->select(self::TABLE);\n            if (GaletteMail::isValidEmail($login)) {\n                //we got a valid email address, use it\n                $select->where(array('email_adh' => $login));\n            } else {\n                ///we did not get an email address, consider using login\n                $select->where(array('login_adh' => $login));\n            }\n\n            $results = $this->zdb->execute($select);\n            $result = $results->current();\n            if ($result) {\n                $this->loadFromRS($result);\n            }\n        } catch (Throwable $e) {\n            Analog::log(\n                'Cannot load member form login `' . $login . '` | ' .\n                $e->getMessage(),\n                Analog::WARNING\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Populate object from a resultset row\n     *\n     * @param ResultSet $r the resultset row\n     *\n     * @return void\n     */\n    private function loadFromRS($r)\n    {\n        $this->_self_adh = false;\n        $this->_id = $r->id_adh;\n        //Identity\n        if ($r->titre_adh !== null) {\n            $this->_title = new Title((int)$r->titre_adh);\n        }\n        $this->_company_name = $r->societe_adh;\n        $this->_name = $r->nom_adh;\n        $this->_surname = $r->prenom_adh;\n        $this->_nickname = $r->pseudo_adh;\n        if ($r->ddn_adh != '1901-01-01') {\n            $this->_birthdate = $r->ddn_adh;\n        }\n        $this->_birth_place = $r->lieu_naissance;\n        $this->_gender = (int)$r->sexe_adh;\n        $this->_job = $r->prof_adh;\n        $this->_language = $r->pref_lang;\n        $this->_active = ($r->activite_adh == 1) ? true : false;\n        $this->_status = (int)$r->id_statut;\n        //Contact information\n        $this->_address = $r->adresse_adh;\n        /** TODO: remove and merge with address */\n        $this->_address_continuation = $r->adresse2_adh;\n        $this->_zipcode = $r->cp_adh;\n        $this->_town = $r->ville_adh;\n        $this->_country = $r->pays_adh;\n        $this->_phone = $r->tel_adh;\n        $this->_gsm = $r->gsm_adh;\n        $this->_email = $r->email_adh;\n        $this->_website = $r->url_adh;\n        /** TODO: remove */\n        $this->_msn = $r->msn_adh;\n        /** TODO: remove */\n        $this->_icq = $r->icq_adh;\n        /** TODO: remove */\n        $this->_jabber = $r->jabber_adh;\n        /** TODO: remove */\n        $this->_gnupgid = $r->gpgid;\n        /** TODO: remove */\n        $this->_fingerprint = $r->fingerprint;\n        //Galette relative information\n        $this->_appears_in_list = ($r->bool_display_info == 1) ? true : false;\n        $this->_admin = ($r->bool_admin_adh == 1) ? true : false;\n        if (\n            isset($r->priorite_statut)\n            && $r->priorite_statut < Members::NON_STAFF_MEMBERS\n        ) {\n            $this->_staff = true;\n        }\n        $this->_due_free = ($r->bool_exempt_adh == 1) ? true : false;\n        $this->_login = $r->login_adh;\n        $this->_password = $r->mdp_adh;\n        $this->_creation_date = $r->date_crea_adh;\n        if ($r->date_modif_adh != '1901-01-01') {\n            $this->_modification_date = $r->date_modif_adh;\n        } else {\n            $this->_modification_date = $this->_creation_date;\n        }\n        $this->_due_date = $r->date_echeance;\n        $this->_others_infos = $r->info_public_adh;\n        $this->_others_infos_admin = $r->info_adh;\n\n        if ($r->parent_id !== null) {\n            $this->_parent = (int)$r->parent_id;\n            if ($this->_deps['parent'] === true) {\n                $this->loadParent($r->parent_id);\n            }\n        }\n\n        if ($this->_deps['children'] === true) {\n            $this->loadChildren();\n        }\n\n        if ($this->_deps['picture'] === true) {\n            $this->_picture = new Picture($this->_id);\n        }\n\n        if ($this->_deps['groups'] === true) {\n            $this->loadGroups();\n        }\n\n        if ($this->_deps['dues'] === true) {\n            $this->checkDues();\n        }\n\n        if ($this->_deps['dynamics'] === true) {\n            $this->loadDynamicFields();\n        }\n    }\n\n    /**\n     * Load member parent\n     *\n     * @return void\n     */\n    private function loadParent()\n    {\n        if (!$this->_parent instanceof Adherent) {\n            $deps = array_fill_keys(array_keys($this->_deps), false);\n            $this->_parent = new Adherent($this->zdb, (int)$this->_parent, $deps);\n        }\n    }\n\n    /**\n     * Load member children\n     *\n     * @return void\n     */\n    private function loadChildren()\n    {\n        $this->_children = array();\n        try {\n            $id = self::PK;\n            $select = $this->zdb->select(self::TABLE);\n            $select->columns(\n                array($id)\n            )->where(\n                'parent_id = ' . $this->_id\n            );\n\n            $results = $this->zdb->execute($select);\n\n            if ($results->count() > 0) {\n                foreach ($results as $row) {\n                    $deps = $this->_deps;\n                    $deps['children'] = false;\n                    $deps['parent'] = false;\n                    $this->_children[] = new Adherent($this->zdb, (int)$row->$id, $deps);\n                }\n            }\n        } catch (Throwable $e) {\n            Analog::log(\n                'Cannot load children for member #' . $this->_id . ' | ' .\n                $e->getMessage(),\n                Analog::WARNING\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Load member groups\n     *\n     * @return void\n     */\n    public function loadGroups()\n    {\n        $this->_groups = Groups::loadGroups($this->_id);\n        $this->_managed_groups = Groups::loadManagedGroups($this->_id);\n    }\n\n    /**\n     * Retrieve status from preferences\n     *\n     * @return pref_statut\n     *\n     */\n    private function getDefaultStatus()\n    {\n        global $preferences;\n        if ($preferences->pref_statut != '') {\n            return $preferences->pref_statut;\n        } else {\n            Analog::log(\n                'Unable to get pref_statut; is it defined in preferences?',\n                Analog::ERROR\n            );\n            return Status::DEFAULT_STATUS;\n        }\n    }\n\n    /**\n     * Check for dues status\n     *\n     * @return void\n     */\n    private function checkDues()\n    {\n        //how many days since our beloved member has been created\n        $date_now = new \\DateTime();\n        $this->_oldness = $date_now->diff(\n            new \\DateTime($this->_creation_date)\n        )->days;\n\n        if ($this->isDueFree()) {\n            //no fee required, we don't care about dates\n            $this->_row_classes .= ' cotis-exempt';\n        } else {\n            //ok, fee is required. Let's check the dates\n            if ($this->_due_date == '') {\n                $this->_row_classes .= ' cotis-never';\n            } else {\n                $date_end = new \\DateTime($this->_due_date);\n                $date_diff = $date_now->diff($date_end);\n                $this->_days_remaining = ($date_diff->invert == 1)\n                    ? $date_diff->days * -1\n                    : $date_diff->days;\n\n                if ($this->_days_remaining == 0) {\n                    $this->_row_classes .= ' cotis-lastday';\n                } elseif ($this->_days_remaining < 0) {\n                    //check if member is still active\n                    $this->_row_classes .= $this->isActive() ? ' cotis-late' : ' cotis-old';\n                } elseif ($this->_days_remaining < 30) {\n                    $this->_row_classes .= ' cotis-soon';\n                } else {\n                    $this->_row_classes .= ' cotis-ok';\n                }\n            }\n        }\n    }\n\n    /**\n     * Is member admin?\n     *\n     * @return bool\n     */\n    public function isAdmin()\n    {\n        return $this->_admin;\n    }\n\n    /**\n     * Is user member of staff?\n     *\n     * @return bool\n     */\n    public function isStaff()\n    {\n        return $this->_staff;\n    }\n\n    /**\n     * Is member freed of dues?\n     *\n     * @return bool\n     */\n    public function isDueFree()\n    {\n        return $this->_due_free;\n    }\n\n    /**\n     * Is member in specified group?\n     *\n     * @param string $group_name Group name\n     *\n     * @return boolean\n     */\n    public function isGroupMember($group_name)\n    {\n        if (is_array($this->_groups)) {\n            foreach ($this->_groups as $g) {\n                if ($g->getName() == $group_name) {\n                    return true;\n                    break;\n                }\n            }\n        } else {\n            Analog::log(\n                'Calling ' . __METHOD__ . ' without groups loaded!',\n                Analog::ERROR\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Is member manager of specified group?\n     *\n     * @param string $group_name Group name\n     *\n     * @return boolean\n     */\n    public function isGroupManager($group_name)\n    {\n        if (is_array($this->_managed_groups)) {\n            foreach ($this->_managed_groups as $mg) {\n                if ($mg->getName() == $group_name) {\n                    return true;\n                    break;\n                }\n            }\n        } else {\n            Analog::log(\n                'Calling ' . __METHOD__ . ' without groups loaded!',\n                Analog::ERROR\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Does current member represents a company?\n     *\n     * @return boolean\n     */\n    public function isCompany()\n    {\n        return trim($this->_company_name) != '';\n    }\n\n    /**\n     * Is current member a man?\n     *\n     * @return boolean\n     */\n    public function isMan()\n    {\n        return (int)$this->_gender === self::MAN;\n    }\n\n    /**\n     * Is current member a woman?\n     *\n     * @return boolean\n     */\n    public function isWoman()\n    {\n        return (int)$this->_gender === self::WOMAN;\n    }\n\n\n    /**\n     * Can member appears in public members list?\n     *\n     * @return bool\n     */\n    public function appearsInMembersList()\n    {\n        return $this->_appears_in_list;\n    }\n\n    /**\n     * Is member active?\n     *\n     * @return bool\n     */\n    public function isActive()\n    {\n        return $this->_active;\n    }\n\n    /**\n     * Does member have uploaded a picture?\n     *\n     * @return bool\n     */\n    public function hasPicture()\n    {\n        return $this->_picture->hasPicture();\n    }\n\n    /**\n     * Does member have a parent?\n     *\n     * @return bool\n     */\n    public function hasParent()\n    {\n        return !empty($this->_parent);\n    }\n\n    /**\n     * Does member have children?\n     *\n     * @return bool\n     */\n    public function hasChildren()\n    {\n        if ($this->_children === null) {\n            if ($this->id) {\n                Analog::log(\n                    'Children has not been loaded!',\n                    Analog::WARNING\n                );\n            }\n            return false;\n        } else {\n            return count($this->_children) > 0;\n        }\n    }\n\n    /**\n     * Get row class related to current fee status\n     *\n     * @param boolean $public we want the class for public pages\n     *\n     * @return string the class to apply\n     */\n    public function getRowClass($public = false)\n    {\n        $strclass = ($this->isActive()) ? 'active' : 'inactive';\n        if ($public === false) {\n            $strclass .= $this->_row_classes;\n        }\n        return $strclass;\n    }\n\n    /**\n     * Get current member due status\n     *\n     * @return string i18n string representing state of due\n     */\n    public function getDues()\n    {\n        $ret = '';\n        if ($this->isDueFree()) {\n            $ret = _T(\"Freed of dues\");\n        } elseif ($this->_due_date == '') {\n            $patterns = array('/%days/', '/%date/');\n            $cdate = new \\DateTime($this->_creation_date);\n            $replace = array(\n                $this->_oldness,\n                $cdate->format(__(\"Y-m-d\"))\n            );\n            if ($this->_active) {\n                $ret = preg_replace(\n                    $patterns,\n                    $replace,\n                    _T(\"Never contributed: Registered %days days ago (since %date)\")\n                );\n            } else {\n                $ret = _T(\"Never contributed\");\n            }\n        } elseif ($this->_days_remaining == 0) {\n            $ret = _T(\"Last day!\");\n        } elseif ($this->_days_remaining < 0) {\n            $patterns = array('/%days/', '/%date/');\n            $ddate = new \\DateTime($this->_due_date);\n            $replace = array(\n                $this->_days_remaining * -1,\n                $ddate->format(__(\"Y-m-d\"))\n            );\n            if ($this->_active) {\n                $ret = preg_replace(\n                    $patterns,\n                    $replace,\n                    _T(\"Late of %days days (since %date)\")\n                );\n            } else {\n                $ret = _T(\"No longer member\");\n            }\n        } else {\n            $patterns = array('/%days/', '/%date/');\n            $ddate = new \\DateTime($this->_due_date);\n            $replace = array(\n                $this->_days_remaining,\n                $ddate->format(__(\"Y-m-d\"))\n            );\n            $ret = preg_replace(\n                $patterns,\n                $replace,\n                _T(\"%days days remaining (ending on %date)\")\n            );\n        }\n        return $ret;\n    }\n\n    /**\n     * Retrieve Full name and surname for the specified member id\n     *\n     * @param Db      $zdb   Database instance\n     * @param integer $id    Member id\n     * @param boolean $wid   Add member id\n     * @param boolean $wnick Add member nickname\n     *\n     * @return string formatted Name and Surname\n     */\n    public static function getSName($zdb, $id, $wid = false, $wnick = false)\n    {\n        try {\n            $select = $zdb->select(self::TABLE);\n            $select->where(self::PK . ' = ' . $id);\n\n            $results = $zdb->execute($select);\n            $row = $results->current();\n            return self::getNameWithCase(\n                $row->nom_adh,\n                $row->prenom_adh,\n                false,\n                ($wid === true ? $row->id_adh : false),\n                ($wnick === true ? $row->pseudo_adh : false)\n            );\n        } catch (Throwable $e) {\n            Analog::log(\n                'Cannot get formatted name for member form id `' . $id . '` | ' .\n                $e->getMessage(),\n                Analog::WARNING\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Get member name with correct case\n     *\n     * @param string        $name    Member name\n     * @param string        $surname Mmeber surname\n     * @param false|Title   $title   Member title to show or false\n     * @param false|integer $id      Member id to display or false\n     * @param false|string  $nick    Member nickname to display or false\n     *\n     * @return string\n     */\n    public static function getNameWithCase($name, $surname, $title = false, $id = false, $nick = false)\n    {\n        $str = '';\n\n        if ($title !== false && $title instanceof Title) {\n            $str .= $title->tshort . ' ';\n        }\n\n        $str .= mb_strtoupper($name, 'UTF-8') . ' ' .\n            ucwords(mb_strtolower($surname, 'UTF-8'), \" \\t\\r\\n\\f\\v-_|\");\n\n        if ($id !== false || $nick !== false) {\n            $str .= ' (';\n        }\n        if ($nick !== false) {\n            $str .= $nick;\n        }\n        if ($id !== false) {\n            if ($nick !== false && !empty($nick)) {\n                $str .= ', ';\n            }\n            $str .= $id;\n        }\n        if ($id !== false || $nick !== false) {\n            $str .= ')';\n        }\n        return $str;\n    }\n\n    /**\n     * Change password for a given user\n     *\n     * @param Db     $zdb    Database instance\n     * @param string $id_adh Member identifier\n     * @param string $pass   New password\n     *\n     * @return boolean\n     */\n    public static function updatePassword(Db $zdb, $id_adh, $pass)\n    {\n        try {\n            $cpass = password_hash($pass, PASSWORD_BCRYPT);\n\n            $update = $zdb->update(self::TABLE);\n            $update->set(\n                array('mdp_adh' => $cpass)\n            )->where(self::PK . ' = ' . $id_adh);\n            $zdb->execute($update);\n            Analog::log(\n                'Password for `' . $id_adh . '` has been updated.',\n                Analog::DEBUG\n            );\n            return true;\n        } catch (Throwable $e) {\n            Analog::log(\n                'An error occurred while updating password for `' . $id_adh .\n                '` | ' . $e->getMessage(),\n                Analog::ERROR\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Get field label\n     *\n     * @param string $field Field name\n     *\n     * @return string\n     */\n    private function getFieldLabel($field)\n    {\n        $label = $this->fields[$field]['label'];\n        //remove trailing ':' and then nbsp (for french at least)\n        $label = trim(trim($label, ':'), '&nbsp;');\n        return $label;\n    }\n\n    /**\n     * Retrieve fields from database\n     *\n     * @param Db $zdb Database instance\n     *\n     * @return array\n     */\n    public static function getDbFields(Db $zdb)\n    {\n        $columns = $zdb->getColumns(self::TABLE);\n        $fields = array();\n        foreach ($columns as $col) {\n            $fields[] = $col->getName();\n        }\n        return $fields;\n    }\n\n    /**\n     * Mark as self membership\n     *\n     * @return void\n     */\n    public function setSelfMembership()\n    {\n        $this->_self_adh = true;\n    }\n\n    /**\n     * Is member up to date?\n     *\n     * @return boolean\n     */\n    public function isUp2Date()\n    {\n        if ($this->_deps['dues']) {\n            if ($this->isDueFree()) {\n                //member is due free, he's up to date.\n                return true;\n            } else {\n                //let's check from end date, if present\n                if ($this->_due_date == null) {\n                    return false;\n                } else {\n                    $ech = new \\DateTime($this->_due_date);\n                    $now = new \\DateTime();\n                    $now->setTime(0, 0, 0);\n                    return $ech >= $now;\n                }\n            }\n        } else {\n            throw new \\RuntimeException(\n                'Cannot check if member is up to date, dues deps is disabled!'\n            );\n        }\n    }\n\n    /**\n     * Set dependencies\n     *\n     * @param Preferences $preferences Preferences instance\n     * @param array       $fields      Members fields configuration\n     * @param History     $history     History instance\n     *\n     * @return void\n     */\n    public function setDependencies(\n        Preferences $preferences,\n        array $fields,\n        History $history\n    ) {\n        $this->preferences = $preferences;\n        $this->fields = $fields;\n        $this->history = $history;\n    }\n\n    /**\n     * Check posted values validity\n     *\n     * @param array $values   All values to check, basically the $_POST array\n     *                        after sending the form\n     * @param array $required Array of required fields\n     * @param array $disabled Array of disabled fields\n     *\n     * @return true|array\n     */\n    public function check($values, $required, $disabled)\n    {\n        $this->errors = array();\n\n        $fields = self::getDbFields($this->zdb);\n\n        //reset company name if needeed\n        if (!isset($values['is_company'])) {\n            unset($values['is_company']);\n            $values['societe_adh'] = '';\n        }\n\n        //no parent if checkbox was unchecked\n        if (\n            !isset($values['attach'])\n            && empty($this->_id)\n            && isset($values['parent_id'])\n        ) {\n            unset($values['parent_id']);\n        }\n\n        if (isset($values['duplicate'])) {\n            //if we're duplicating, keep a trace (if an error occurs)\n            $this->_duplicate = true;\n        }\n\n        foreach ($fields as $key) {\n            //first of all, let's sanitize values\n            $key = strtolower($key);\n            $prop = '_' . $this->fields[$key]['propname'];\n\n            if (isset($values[$key])) {\n                $value = $values[$key];\n                if ($value !== true && $value !== false) {\n                    $value = trim($value);\n                }\n            } elseif ($this->_id == '' || $this->_id == null) {\n                switch ($key) {\n                    case 'bool_admin_adh':\n                    case 'bool_exempt_adh':\n                    case 'bool_display_info':\n                        $value = 0;\n                        break;\n                    case 'activite_adh':\n                        //values that are setted at object instanciation\n                        $value = true;\n                        break;\n                    case 'date_crea_adh':\n                    case 'sexe_adh':\n                    case 'titre_adh':\n                    case 'id_statut':\n                    case 'pref_lang':\n                    case 'parent_id':\n                        //values that are setted at object instanciation\n                        $value = $this->$prop;\n                        break;\n                    default:\n                        $value = '';\n                }\n            } else {\n                //keep stored value on update\n                if ($prop != '_password' || isset($values['mdp_adh']) && isset($values['mdp_adh2'])) {\n                    $value = $this->$prop;\n                } else {\n                    $value = null;\n                }\n            }\n\n            // if the field is enabled, check it\n            if (!isset($disabled[$key])) {\n                // fill up the adherent structure\n                if ($value !== null && $value !== true && $value !== false && !is_object($value)) {\n                    $value = stripslashes($value);\n                }\n                $this->$prop = $value;\n\n                // now, check validity\n                if ($value !== null && $value != '') {\n                    $this->validate($key, $value, $values);\n                } elseif (\n                    ($key == 'login_adh' && !isset($required['login_adh']))\n                    || ($key == 'mdp_adh' && !isset($required['mdp_adh']))\n                    && !isset($this->_id)\n                ) {\n                    $p = new Password($this->zdb);\n                    $this->$prop = $p->makeRandomPassword(15);\n                }\n            }\n        }\n\n        // missing required fields?\n        foreach ($required as $key => $val) {\n            $prop = '_' . $this->fields[$key]['propname'];\n\n            if (!isset($disabled[$key])) {\n                $mandatory_missing = false;\n                if (!isset($this->$prop) || $this->$prop == '') {\n                    $mandatory_missing = true;\n                } elseif ($key === 'titre_adh' && $this->$prop == '-1') {\n                    $mandatory_missing = true;\n                }\n\n                if ($mandatory_missing === true) {\n                    $this->errors[] = str_replace(\n                        '%field',\n                        '<a href=\"#' . $key . '\">' . $this->getFieldLabel($key) . '</a>',\n                        _T(\"- Mandatory field %field empty.\")\n                    );\n                }\n            }\n        }\n\n        //attach to/detach from parent\n        if (isset($values['detach_parent'])) {\n            $this->_parent = null;\n        }\n\n        $this->dynamicsCheck($values, $required, $disabled);\n\n        if (count($this->errors) > 0) {\n            Analog::log(\n                'Some errors has been throwed attempting to edit/store a member' . \"\\n\" .\n                print_r($this->errors, true),\n                Analog::ERROR\n            );\n            return $this->errors;\n        } else {\n            $this->checkDues();\n\n            Analog::log(\n                'Member checked successfully.',\n                Analog::DEBUG\n            );\n            return true;\n        }\n    }\n\n    /**\n     * Validate data for given key\n     * Set valid data in current object, also resets errors list\n     *\n     * @param string $field  Field name\n     * @param mixed  $value  Value we want to set\n     * @param array  $values All values, for some references\n     *\n     * @return void\n     */\n    public function validate($field, $value, $values)\n    {\n        global $preferences;\n\n        $prop = '_' . $this->fields[$field]['propname'];\n\n        if ($value === null || (is_string($value) && trim($value) == '')) {\n            //empty values are OK\n            $this->$prop = $value;\n            return;\n        }\n\n        switch ($field) {\n            // dates\n            case 'date_crea_adh':\n            case 'date_modif_adh_':\n            case 'ddn_adh':\n            case 'date_echeance':\n                try {\n                    $d = \\DateTime::createFromFormat(__(\"Y-m-d\"), $value);\n                    if ($d === false) {\n                        //try with non localized date\n                        $d = \\DateTime::createFromFormat(\"Y-m-d\", $value);\n                        if ($d === false) {\n                            throw new \\Exception('Incorrect format');\n                        }\n                    }\n\n                    if ($field === 'ddn_adh') {\n                        $now = new \\DateTime();\n                        $now->setTime(0, 0, 0);\n                        $d->setTime(0, 0, 0);\n\n                        $diff = $now->diff($d);\n                        $days = (int)$diff->format('%R%a');\n                        if ($days >= 0) {\n                            $this->errors[] = _T('- Birthdate must be set in the past!');\n                        }\n\n                        $years = (int)$diff->format('%R%Y');\n                        if ($years <= -200) {\n                            $this->errors[] = str_replace(\n                                '%years',\n                                $years * -1,\n                                _T('- Members must be less than 200 years old (currently %years)!')\n                            );\n                        }\n                    }\n                    $this->$prop = $d->format('Y-m-d');\n                } catch (Throwable $e) {\n                    Analog::log(\n                        'Wrong date format. field: ' . $field .\n                        ', value: ' . $value . ', expected fmt: ' .\n                        __(\"Y-m-d\") . ' | ' . $e->getMessage(),\n                        Analog::INFO\n                    );\n                    $this->errors[] = str_replace(\n                        array(\n                            '%date_format',\n                            '%field'\n                        ),\n                        array(\n                            __(\"Y-m-d\"),\n                            $this->getFieldLabel($field)\n                        ),\n                        _T(\"- Wrong date format (%date_format) for %field!\")\n                    );\n                }\n                break;\n            case 'titre_adh':\n                if ($value !== null && $value !== '') {\n                    if ($value == '-1') {\n                        $this->$prop = null;\n                    } elseif (!$value instanceof Title) {\n                        $this->$prop = new Title((int)$value);\n                    }\n                } else {\n                    $this->$prop = null;\n                }\n                break;\n            case 'email_adh':\n            case 'msn_adh':\n                if (!GaletteMail::isValidEmail($value)) {\n                    $this->errors[] = _T(\"- Non-valid E-Mail address!\") .\n                        ' (' . $this->getFieldLabel($field) . ')';\n                }\n                if ($field == 'email_adh') {\n                    try {\n                        $select = $this->zdb->select(self::TABLE);\n                        $select->columns(\n                            array(self::PK)\n                        )->where(array('email_adh' => $value));\n                        if ($this->_id != '' && $this->_id != null) {\n                            $select->where(\n                                self::PK . ' != ' . $this->_id\n                            );\n                        }\n\n                        $results = $this->zdb->execute($select);\n                        if ($results->count() !== 0) {\n                            $this->errors[] = _T(\"- This E-Mail address is already used by another member!\");\n                        }\n                    } catch (Throwable $e) {\n                        Analog::log(\n                            'An error occurred checking member email unicity.',\n                            Analog::ERROR\n                        );\n                        $this->errors[] = _T(\"An error has occurred while looking if login already exists.\");\n                    }\n                }\n                break;\n            case 'url_adh':\n                if ($value == 'http://') {\n                    $this->$prop = '';\n                } elseif (!isValidWebUrl($value)) {\n                    $this->errors[] = _T(\"- Non-valid Website address! Maybe you've skipped the http://?\");\n                }\n                break;\n            case 'login_adh':\n                /** FIXME: add a preference for login lenght */\n                if (strlen($value) < 2) {\n                    $this->errors[] = str_replace(\n                        '%i',\n                        2,\n                        _T(\"- The username must be composed of at least %i characters!\")\n                    );\n                } else {\n                    //check if login does not contain the @ character\n                    if (strpos($value, '@') != false) {\n                        $this->errors[] = _T(\"- The username cannot contain the @ character\");\n                    } else {\n                        //check if login is already taken\n                        try {\n                            $select = $this->zdb->select(self::TABLE);\n                            $select->columns(\n                                array(self::PK)\n                            )->where(array('login_adh' => $value));\n                            if ($this->_id != '' && $this->_id != null) {\n                                $select->where(\n                                    self::PK . ' != ' . $this->_id\n                                );\n                            }\n\n                            $results = $this->zdb->execute($select);\n                            if (\n                                $results->count() !== 0\n                                || $value == $preferences->pref_admin_login\n                            ) {\n                                $this->errors[] = _T(\"- This username is already in use, please choose another one!\");\n                            }\n                        } catch (Throwable $e) {\n                            Analog::log(\n                                'An error occurred checking member login unicity.',\n                                Analog::ERROR\n                            );\n                            $this->errors[] = _T(\"An error has occurred while looking if login already exists.\");\n                        }\n                    }\n                }\n                break;\n            case 'mdp_adh':\n                if (\n                    $this->_self_adh !== true\n                    && (!isset($values['mdp_adh2'])\n                    || $values['mdp_adh2'] != $value)\n                ) {\n                    $this->errors[] = _T(\"- The passwords don't match!\");\n                } elseif (\n                    $this->_self_adh === true\n                    && !crypt($value, $values['mdp_crypt']) == $values['mdp_crypt']\n                ) {\n                    $this->errors[] = _T(\"Password misrepeated: \");\n                } else {\n                    $pinfos = password_get_info($value);\n                    //check if value is already a hash\n                    if ($pinfos['algo'] == 0) {\n                        $this->$prop = password_hash(\n                            $value,\n                            PASSWORD_BCRYPT\n                        );\n\n                        $pwcheck = new \\Galette\\Util\\Password($preferences);\n                        $pwcheck->setAdherent($this);\n                        if (!$pwcheck->isValid($value)) {\n                            $this->errors = array_merge(\n                                $this->errors,\n                                $pwcheck->getErrors()\n                            );\n                        }\n                    }\n                }\n                break;\n            case 'id_statut':\n                try {\n                    $this->$prop = (int)$value;\n                    //check if status exists\n                    $select = $this->zdb->select(Status::TABLE);\n                    $select->where(Status::PK . '= ' . $value);\n\n                    $results = $this->zdb->execute($select);\n                    $result = $results->current();\n                    if (!$result) {\n                        $this->errors[] = str_replace(\n                            '%id',\n                            $value,\n                            _T(\"Status #%id does not exists in database.\")\n                        );\n                        break;\n                    }\n                } catch (Throwable $e) {\n                    Analog::log(\n                        'An error occurred checking status existance: ' . $e->getMessage(),\n                        Analog::ERROR\n                    );\n                    $this->errors[] = _T(\"An error has occurred while looking if status does exists.\");\n                }\n                break;\n            case 'sexe_adh':\n                if (in_array($value, [self::NC, self::MAN, self::WOMAN])) {\n                    $this->$prop = (int)$value;\n                } else {\n                    $this->errors[] = _T(\"Gender %gender does not exists!\");\n                }\n                break;\n            case 'parent_id':\n                $this->$prop = ($value instanceof Adherent) ? (int)$value->id : (int)$value;\n                $this->loadParent();\n                break;\n        }\n    }\n\n    /**\n     * Store the member\n     *\n     * @return boolean\n     */\n    public function store()\n    {\n        global $hist, $emitter;\n        $event = null;\n\n        try {\n            $values = array();\n            $fields = self::getDbFields($this->zdb);\n\n            foreach ($fields as $field) {\n                if (\n                    $field !== 'date_modif_adh'\n                    || !isset($this->_id)\n                    || $this->_id == ''\n                ) {\n                    $prop = '_' . $this->fields[$field]['propname'];\n                    if (\n                        ($field === 'bool_admin_adh'\n                        || $field === 'bool_exempt_adh'\n                        || $field === 'bool_display_info'\n                        || $field === 'activite_adh')\n                        && $this->$prop === false\n                    ) {\n                        //Handle booleans for postgres ; bugs #18899 and #19354\n                        $values[$field] = $this->zdb->isPostgres() ? 'false' : 0;\n                    } elseif ($field === 'parent_id') {\n                        //handle parents\n                        if ($this->_parent === null) {\n                            $values['parent_id'] = new Expression('NULL');\n                        } elseif ($this->parent instanceof Adherent) {\n                            $values['parent_id'] = $this->_parent->id;\n                        } else {\n                            $values['parent_id'] = $this->_parent;\n                        }\n                    } else {\n                        $values[$field] = $this->$prop;\n                    }\n                }\n            }\n\n            //an empty value will cause date to be set to 1901-01-01, a null\n            //will result in 0000-00-00. We want a database NULL value here.\n            if (!$this->_birthdate) {\n                $values['ddn_adh'] = new Expression('NULL');\n            }\n            if (!$this->_due_date) {\n                $values['date_echeance'] = new Expression('NULL');\n            }\n\n            if ($this->_title instanceof Title) {\n                $values['titre_adh'] = $this->_title->id;\n            } else {\n                $values['titre_adh'] = new Expression('NULL');\n            }\n\n            if (!$this->_parent) {\n                $values['parent_id'] = new Expression('NULL');\n            }\n\n            //fields that cannot be null\n            $notnull = [\n                '_surname'  => 'prenom_adh',\n                '_nickname' => 'pseudo_adh',\n                '_address'  => 'adresse_adh',\n                '_zipcode'  => 'cp_adh',\n                '_town'     => 'ville_adh'\n            ];\n            foreach ($notnull as $prop => $field) {\n                if ($this->$prop === null) {\n                    $values[$field] = '';\n                }\n            }\n\n            $success = false;\n            if (!isset($this->_id) || $this->_id == '') {\n                //we're inserting a new member\n                unset($values[self::PK]);\n                //set modification date\n                $this->_modification_date = date('Y-m-d');\n                $values['date_modif_adh'] = $this->_modification_date;\n\n                $insert = $this->zdb->insert(self::TABLE);\n                $insert->values($values);\n                $add = $this->zdb->execute($insert);\n                if ($add->count() > 0) {\n                    $this->_id = $this->zdb->getLastGeneratedValue($this);\n                    $this->_picture = new Picture($this->_id);\n                    // logging\n                    if ($this->_self_adh) {\n                        $hist->add(\n                            _T(\"Self_subscription as a member: \") .\n                            $this->getNameWithCase($this->_name, $this->_surname),\n                            $this->sname\n                        );\n                    } else {\n                        $hist->add(\n                            _T(\"Member card added\"),\n                            $this->sname\n                        );\n                    }\n                    $success = true;\n\n                    $event = 'member.add';\n                } else {\n                    $hist->add(_T(\"Fail to add new member.\"));\n                    throw new \\Exception(\n                        'An error occurred inserting new member!'\n                    );\n                }\n            } else {\n                //we're editing an existing member\n                if (!$this->isDueFree()) {\n                    // deadline\n                    $due_date = Contribution::getDueDate($this->zdb, $this->_id);\n                    if ($due_date) {\n                        $values['date_echeance'] = $due_date;\n                    }\n                }\n\n                if (!$this->_password) {\n                    unset($values['mdp_adh']);\n                }\n\n                $update = $this->zdb->update(self::TABLE);\n                $update->set($values);\n                $update->where(\n                    self::PK . '=' . $this->_id\n                );\n\n                $edit = $this->zdb->execute($update);\n\n                //edit == 0 does not mean there were an error, but that there\n                //were nothing to change\n                if ($edit->count() > 0) {\n                    $this->updateModificationDate();\n                    $hist->add(\n                        _T(\"Member card updated\"),\n                        $this->sname\n                    );\n                }\n                $success = true;\n\n                $event = 'member.edit';\n            }\n\n            //dynamic fields\n            if ($success) {\n                $success = $this->dynamicsStore();\n            }\n\n            //send event at the end of process, once all has been stored\n            if ($event !== null) {\n                $emitter->emit($event, $this);\n            }\n            return $success;\n        } catch (Throwable $e) {\n            Analog::log(\n                'Something went wrong :\\'( | ' . $e->getMessage() . \"\\n\" .\n                $e->getTraceAsString(),\n                Analog::ERROR\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Update member modification date\n     *\n     * @return void\n     */\n    private function updateModificationDate()\n    {\n        try {\n            $modif_date = date('Y-m-d');\n            $update = $this->zdb->update(self::TABLE);\n            $update->set(\n                array('date_modif_adh' => $modif_date)\n            )->where(self::PK . '=' . $this->_id);\n\n            $edit = $this->zdb->execute($update);\n            $this->_modification_date = $modif_date;\n        } catch (Throwable $e) {\n            Analog::log(\n                'Something went wrong updating modif date :\\'( | ' .\n                $e->getMessage() . \"\\n\" . $e->getTraceAsString(),\n                Analog::ERROR\n            );\n        }\n    }\n\n    /**\n     * Global getter method\n     *\n     * @param string $name name of the property we want to retrive\n     *\n     * @return false|object the called property\n     */\n    public function __get($name)\n    {\n        $forbidden = array(\n            'admin', 'staff', 'due_free', 'appears_in_list', 'active',\n            'row_classes', 'oldness', 'duplicate'\n        );\n        if (!defined('GALETTE_TESTS')) {\n            $forbidden[] = 'password'; //keep that for tests only\n        }\n\n        $virtuals = array(\n            'sadmin', 'sstaff', 'sdue_free', 'sappears_in_list', 'sactive',\n            'stitle', 'sstatus', 'sfullname', 'sname', 'saddress',\n            'rbirthdate', 'sgender', 'contribstatus'\n        );\n\n        if (in_array($name, $forbidden)) {\n            switch ($name) {\n                case 'admin':\n                    return $this->isAdmin();\n                case 'staff':\n                    return $this->isStaff();\n                case 'due_free':\n                    return $this->isDueFree();\n                case 'appears_in_list':\n                    return $this->appearsInMembersList();\n                case 'active':\n                    return $this->isActive();\n                case 'duplicate':\n                    return $this->isDuplicate();\n                default:\n                    throw new \\RuntimeException(\"Call to __get for '$name' is forbidden!\");\n            }\n        } else {\n            if (in_array($name, $virtuals)) {\n                if (substr($name, 0, 1) !== '_') {\n                    $real = '_' . substr($name, 1);\n                } else {\n                    $real = $name;\n                }\n                switch ($name) {\n                    case 'sadmin':\n                    case 'sdue_free':\n                    case 'sappears_in_list':\n                    case 'sstaff':\n                        return (($this->$real) ? _T(\"Yes\") : _T(\"No\"));\n                        break;\n                    case 'sactive':\n                        return (($this->$real) ? _T(\"Active\") : _T(\"Inactive\"));\n                        break;\n                    case 'stitle':\n                        if (isset($this->_title) && $this->_title instanceof Title) {\n                            return $this->_title->tshort;\n                        } else {\n                            return null;\n                        }\n                        break;\n                    case 'sstatus':\n                        $status = new Status($this->zdb);\n                        return $status->getLabel($this->_status);\n                        break;\n                    case 'sfullname':\n                        return $this->getNameWithCase(\n                            $this->_name,\n                            $this->_surname,\n                            (isset($this->_title) ? $this->title : false)\n                        );\n                        break;\n                    case 'saddress':\n                        $address = $this->_address;\n                        if ($this->_address_continuation !== '' && $this->_address_continuation !== null) {\n                            $address .= \"\\n\" . $this->_address_continuation;\n                        }\n                        return $address;\n                        break;\n                    case 'sname':\n                        return $this->getNameWithCase($this->_name, $this->_surname);\n                        break;\n                    case 'rbirthdate':\n                        return $this->_birthdate;\n                        break;\n                    case 'sgender':\n                        switch ($this->gender) {\n                            case self::MAN:\n                                return _T('Man');\n                            case self::WOMAN:\n                                return _T('Woman');\n                            default:\n                                return _T('Unspecified');\n                        }\n                        break;\n                    case 'contribstatus':\n                        return $this->getDues();\n                        break;\n                }\n            } else {\n                if (substr($name, 0, 1) !== '_') {\n                    $rname = '_' . $name;\n                } else {\n                    $rname = $name;\n                }\n\n                switch ($name) {\n                    case 'id':\n                    case 'id_statut':\n                        if ($this->$rname !== null) {\n                            return (int)$this->$rname;\n                        } else {\n                            return null;\n                        }\n                        break;\n                    case 'birthdate':\n                    case 'creation_date':\n                    case 'modification_date':\n                    case 'due_date':\n                        if ($this->$rname != '') {\n                            try {\n                                $d = new \\DateTime($this->$rname);\n                                return $d->format(__(\"Y-m-d\"));\n                            } catch (Throwable $e) {\n                                //oops, we've got a bad date :/\n                                Analog::log(\n                                    'Bad date (' . $this->$rname . ') | ' .\n                                    $e->getMessage(),\n                                    Analog::INFO\n                                );\n                                return $this->$rname;\n                            }\n                        }\n                        break;\n                    default:\n                        if (!property_exists($this, $rname)) {\n                            Analog::log(\n                                \"Unknown property '$rname'\",\n                                Analog::WARNING\n                            );\n                            return null;\n                        } else {\n                            return $this->$rname;\n                        }\n                        break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get member email\n     * If member does not have an email address, but is attached to\n     * another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getEmail()\n    {\n        $email = $this->_email;\n        if (empty($email)) {\n            $this->loadParent();\n            $email = $this->parent->email;\n        }\n\n        return $email;\n    }\n\n    /**\n     * Get member address.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getAddress()\n    {\n        $address = $this->_address;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $address = $this->parent->address;\n        }\n\n        return $address;\n    }\n\n    /**\n     * Get member address continuation.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getAddressContinuation()\n    {\n        $address = $this->_address;\n        $address_continuation = $this->_address_continuation;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $address_continuation = $this->parent->address_continuation;\n        }\n\n        return $address_continuation;\n    }\n\n    /**\n     * Get member zipcode.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getZipcode()\n    {\n        $address = $this->_address;\n        $zip = $this->_zipcode;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $zip = $this->parent->zipcode;\n        }\n\n        return $zip;\n    }\n\n    /**\n     * Get member town.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getTown()\n    {\n        $address = $this->_address;\n        $town = $this->_town;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $town = $this->parent->town;\n        }\n\n        return $town;\n    }\n\n    /**\n     * Get member country.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getCountry()\n    {\n        $address = $this->_address;\n        $country = $this->_country;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $country = $this->parent->country;\n        }\n\n        return $country;\n    }\n\n    /**\n     * Get member age\n     *\n     * @return string\n     */\n    public function getAge()\n    {\n        if ($this->_birthdate == null) {\n            return '';\n        }\n\n        $d = \\DateTime::createFromFormat('Y-m-d', $this->_birthdate);\n        if ($d === false) {\n            Analog::log(\n                'Invalid birthdate: ' . $this->_birthdate,\n                Analog::ERROR\n            );\n            return;\n        }\n\n        return str_replace(\n            '%age',\n            $d->diff(new \\DateTime())->y,\n            _T(' (%age years old)')\n        );\n    }\n\n    /**\n     * Get parent inherited fields\n     *\n     * @return array\n     */\n    public function getParentFields()\n    {\n        return $this->parent_fields;\n    }\n\n    /**\n     * Handle files (photo and dynamics files\n     *\n     * @param array $files Files sent\n     *\n     * @return array|true\n     */\n    public function handleFiles($files)\n    {\n        $this->errors = [];\n        // picture upload\n        if (isset($files['photo'])) {\n            if ($files['photo']['error'] === UPLOAD_ERR_OK) {\n                if ($files['photo']['tmp_name'] != '') {\n                    if (is_uploaded_file($files['photo']['tmp_name'])) {\n                        $res = $this->picture->store($files['photo']);\n                        if ($res < 0) {\n                            $this->errors[]\n                                = $this->picture->getErrorMessage($res);\n                        }\n                    }\n                }\n            } elseif ($files['photo']['error'] !== UPLOAD_ERR_NO_FILE) {\n                Analog::log(\n                    $this->picture->getPhpErrorMessage($files['photo']['error']),\n                    Analog::WARNING\n                );\n                $this->errors[] = $this->picture->getPhpErrorMessage(\n                    $files['photo']['error']\n                );\n            }\n        }\n        $this->dynamicsFiles($_FILES);\n\n        if (count($this->errors) > 0) {\n            Analog::log(\n                'Some errors has been throwed attempting to edit/store a member files' . \"\\n\" .\n                print_r($this->errors, true),\n                Analog::ERROR\n            );\n            return $this->errors;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Set member as duplicate\n     *\n     * @return void\n     */\n    public function setDuplicate()\n    {\n        //mark as duplicated\n        $this->_duplicate = true;\n        $infos = $this->_others_infos_admin;\n        $this->_others_infos_admin = str_replace(\n            ['%name', '%id'],\n            [$this->sname, $this->_id],\n            _T('Duplicated from %name (%id)')\n        );\n        if (!empty($infos)) {\n            $this->_others_infos_admin .= \"\\n\" . $infos;\n        }\n        //drop id_adh\n        $this->_id = null;\n        //drop email, must be unique\n        $this->_email = null;\n        //drop creation date\n        $this->_creation_date = date(\"Y-m-d\");\n        //drop login\n        $this->_login = null;\n        //reset picture\n        $this->_picture = new Picture();\n        //remove birthdate\n        $this->_birthdate = null;\n        //remove surname\n        $this->_surname = null;\n        //not admin\n        $this->_admin = false;\n        //not due free\n        $this->_due_free = false;\n    }\n\n    /**\n     * Get current errors\n     *\n     * @return array\n     */\n    public function getErrors()\n    {\n        return $this->errors;\n    }\n\n    /**\n     * Get user groups\n     *\n     * @return array\n     */\n    public function getGroups()\n    {\n        return $this->_groups;\n    }\n\n    /**\n     * Get user managed groups\n     *\n     * @return array\n     */\n    public function getManagedGroups()\n    {\n        return $this->_managed_groups;\n    }\n\n    /**\n     * Can current logged in user edit member\n     *\n     * @param Login $login Login instance\n     *\n     * @return boolean\n     */\n    public function canEdit($login)\n    {\n        if ($this->id && $login->id == $this->id || $login->isAdmin() || $login->isStaff()) {\n            return true;\n        }\n\n        //check if requested member is part of managed groups\n        if ($login->isGroupManager()) {\n            foreach ($this->getGroups() as $g) {\n                if ($login->isGroupManager($g->getId())) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Are we currently duplicated a member?\n     *\n     * @return boolean\n     */\n    public function isDuplicate()\n    {\n        return $this->_duplicate;\n    }\n\n    /**\n     * Flag creation mail sending\n     *\n     * @param boolean $send True (default) to send creation email\n     *\n     * @return Adherent\n     */\n    public function setSendmail($send = true)\n    {\n        $this->sendmail = $send;\n        return $this;\n    }\n\n    /**\n     * Should we send administrative emails to member?\n     *\n     * @return boolean\n     */\n    public function sendEMail()\n    {\n        return $this->sendmail;\n    }\n}\n", "{extends file=\"page.tpl\"}\n\n\n{function name=draw_actions}\n                    <td class=\"{$rclass} center nowrap actions_row\">\n                        <a\n                            href=\"{path_for name=\"editMember\" data=[\"id\" => $member->id]}\"\n                            class=\"tooltip action\"\n                        >\n                            <i class=\"fas fa-user-edit fa-fw\" aria-hidden=\"true\"></i>\n                            <span class=\"sr-only\">{_T string=\"%membername: edit information\" pattern=\"/%membername/\" replace=$member->sname}</span>\n                        </a>\n{if $login->isAdmin() or $login->isStaff()}\n                        <a\n                            href=\"{path_for name=\"contributions\" data=[\"type\" => \"contributions\", \"option\" => \"member\", \"value\" => $member->id]}\"\n                            class=\"tooltip\"\n                        >\n                            <i class=\"fas fa-cookie fa-fw\" aria-hidden=\"true\"></i>\n                            <span class=\"sr-only\">{_T string=\"%membername: contributions\" pattern=\"/%membername/\" replace=$member->sname}</span>\n                        </a>\n                        <a\n                            href=\"{path_for name=\"removeMember\" data=[\"id\" => $member->id]}\"\n                            class=\"delete tooltip\"\n                        >\n                            <i class=\"fas fa-user-times fa-fw\" aria-hidden=\"true\"></i>\n                            <span class=\"sr-only\">{_T string=\"%membername: remove from database\" pattern=\"/%membername/\" replace=$member->sname}</span>\n                        </a>\n{/if}\n{if $login->isSuperAdmin()}\n                        <a\n                            href=\"{path_for name=\"impersonate\" data=[\"id\" => $member->id]}\"\n                            class=\"tooltip\"\n                        >\n                            <i class=\"fas fa-user-secret fa-fw\" aria-hidden=\"true\"></i>\n                            <span class=\"sr-only\">{_T string=\"Log in in as %membername\" pattern=\"/%membername/\" replace=$member->sname}</span>\n                        </a>\n{/if}\n{* If some additionnals actions should be added from plugins, we load the relevant template file\nWe have to use a template file, so Smarty will do its work (like replacing variables). *}\n{if $plugin_actions|@count != 0}\n    {foreach from=$plugin_actions key=plugin_name item=action}\n        {include file=$action module_id=$plugin_name|replace:'actions_':''}\n    {/foreach}\n{/if}\n                    </td>\n{/function}\n\n{block name=\"content\"}\n        <form action=\"{path_for name=\"filter-memberslist\"}\" method=\"post\" id=\"filtre\">\n        <div id=\"listfilter\">\n{if !isset($adv_filters) || !$adv_filters}\n            <label for=\"filter_str\">{_T string=\"Search:\"}&nbsp;</label>\n            <input type=\"text\" name=\"filter_str\" id=\"filter_str\" value=\"{$filters->filter_str}\" type=\"search\" placeholder=\"{_T string=\"Enter a value\"}\"/>&nbsp;\n             {_T string=\"in:\"}&nbsp;\n            <select name=\"field_filter\">\n                {html_options options=$field_filter_options selected=$filters->field_filter}\n            </select>\n             {_T string=\"among:\"}&nbsp;\n            <select name=\"membership_filter\" onchange=\"form.submit()\">\n                {html_options options=$membership_filter_options selected=$filters->membership_filter}\n            </select>\n            <select name=\"filter_account\" onchange=\"form.submit()\">\n                {html_options options=$filter_accounts_options selected=$filters->filter_account}\n            </select>\n            <select name=\"group_filter\" onchange=\"form.submit()\">\n                <option value=\"0\">{_T string=\"Select a group\"}</option>\n    {foreach from=$filter_groups_options item=group}\n                <option value=\"{$group->getId()}\"{if $filters->group_filter eq $group->getId()} selected=\"selected\"{/if}>{$group->getIndentName()}</option>\n    {/foreach}\n            </select>\n            <button type=\"submit\"  class=\"tooltip action\" title=\"{_T string=\"Apply filters\"}\" name=\"filter\">\n                <i class=\"fa fa-search\"></i>\n                {_T string=\"Filter\"}\n            </button>\n            <button type=\"submit\"  class=\"tooltip action\" title=\"{_T string=\"Save selected criteria\"}\" name=\"savesearch\" id=\"savesearch\">\n                <i class=\"fa fa-fw fa-save\"></i>\n                {_T string=\"Save\"}\n            </button>\n            <input type=\"submit\" name=\"clear_filter\" class=\"inline tooltip\" value=\"{_T string=\"Clear filter\"}\" title=\"{_T string=\"Reset all filters to defaults\"}\"/>\n            <div>\n                {_T string=\"Members that have an email address:\"}\n                <input type=\"radio\" name=\"email_filter\" id=\"filter_dc_email\" value=\"{Galette\\Repository\\Members::FILTER_DC_EMAIL}\"{if $filters->email_filter eq constant('Galette\\Repository\\Members::FILTER_DC_EMAIL')} checked=\"checked\"{/if}>\n                <label for=\"filter_dc_email\" >{_T string=\"Don't care\"}</label>\n                <input type=\"radio\" name=\"email_filter\" id=\"filter_with_email\" value=\"{Galette\\Repository\\Members::FILTER_W_EMAIL}\"{if $filters->email_filter eq constant('Galette\\Repository\\Members::FILTER_W_EMAIL')} checked=\"checked\"{/if}>\n                <label for=\"filter_with_email\" >{_T string=\"With\"}</label>\n                <input type=\"radio\" name=\"email_filter\" id=\"filter_without_email\" value=\"{Galette\\Repository\\Members::FILTER_WO_EMAIL}\"{if $filters->email_filter eq constant('Galette\\Repository\\Members::FILTER_WO_EMAIL')} checked=\"checked\"{/if}>\n                <label for=\"filter_without_email\" >{_T string=\"Without\"}</label>\n            </div>\n{else}\n            <p>\n                <strong>{_T string=\"Advanced search mode\"}</strong>\n                <button type=\"submit\" class=\"tooltip action\" title=\"{_T string=\"Change search criteria\"}\" name=\"adv_criteria\">\n                    <i class=\"fa fa-edit\"></i>\n                    {_T string=\"Change criteria\"}\n                </button>\n                <button type=\"submit\"  class=\"tooltip action\" title=\"{_T string=\"Save current advanced search criteria\"}\" name=\"savesearch\" id=\"savesearch\">\n                    <i class=\"fa fa-fw fa-save\"></i>\n                    {_T string=\"Save\"}\n                </button>\n                <input type=\"hidden\" name=\"advanced_search\" value=\"1\"/>\n                <input type=\"submit\" name=\"clear_filter\" class=\"inline tooltip\" value=\"{_T string=\"Clear filter\"}\" title=\"{_T string=\"Reset all filters to defaults\"}\"/>\n                <br/>\n                <a href=\"#\" id=\"showhideqry\">{_T string=\"Show/hide query\"}</a>\n            </p>\n            <pre id=\"sql_qry\" class=\"hidden\">{$filters->query}</pre>\n{/if}\n        </div>\n        <div class=\"infoline\">\n            {_T string=\"%count member\" plural=\"%count members\" count=$nb_members pattern=\"/%count/\" replace=$nb_members}\n            <div class=\"fright\">\n                <label for=\"nbshow\">{_T string=\"Records per page:\"}</label>\n                <select name=\"nbshow\" id=\"nbshow\">\n                    {html_options options=$nbshow_options selected=$numrows}\n                </select>\n                <noscript> <span><input type=\"submit\" value=\"{_T string=\"Change\"}\" /></span></noscript>\n            </div>\n        </div>\n        </form>\n        <form action=\"{path_for name=\"batch-memberslist\"}\" method=\"post\" id=\"listform\">\n\n        <table class=\"listing\">\n            <thead>\n                <tr>\n{foreach item=column from=$galette_list}\n    {if $column->field_id eq 'id_adh'}\n        {if $preferences->pref_show_id}\n                    <th class=\"id_row\">\n                        <a href=\"{path_for name=\"members\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Repository\\Members::ORDERBY_ID\"|constant]}\">\n                            {_T string=\"Mbr num\"}\n                            {if $filters->orderby eq constant('galette\\Repository\\Members::ORDERBY_ID')}\n                                {if $filters->ordered eq constant('Galette\\Filters\\MembersList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n        {else}\n                    <th class=\"id_row\">#</th>\n        {/if}\n    {else}\n                    <th class=\"left\">\n                        <a href=\"{path_for name=\"members\" data=[\"option\" => \"order\", \"value\" => $column->field_id]}\">\n                            {$column->label}\n                            {if $filters->orderby eq $column->field_id}\n                                {if $filters->ordered eq constant('Galette\\Filters\\MembersList::ORDER_ASC')}\n                                    <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"\"/>\n                                {else}\n                                    <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n    {/if}\n{/foreach}\n                    <th class=\"actions_row\">{_T string=\"Actions\"}</th>\n                </tr>\n            </thead>\n            <tbody>\n{foreach from=$members item=member key=ordre}\n    {assign var=rclass value=$member->getRowClass() }\n                <tr>\n    {foreach item=column from=$galette_list}\n        {if $column->field_id eq 'id_adh'}\n                    <td class=\"{$rclass} right\" data-scope=\"id\">\n            {if $preferences->pref_show_id}\n                        {$member->id}\n            {else}\n                        {$ordre+1+($filters->current_page - 1)*$numrows}\n            {/if}\n                    </td>\n        {elseif $column->field_id eq 'list_adh_name'}\n                    <td class=\"{$rclass} nowrap username_row\" data-scope=\"row\">\n                        <input type=\"checkbox\" name=\"member_sel[]\" value=\"{$member->id}\"/>\n            {if $member->isCompany()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-company.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Is a company\"}</span>\n                        </span>\n            {elseif $member->isMan()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-male.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Is a man\"}</span>\n                        </span>\n            {elseif $member->isWoman()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-female.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Is a woman\"}</span>\n                        </span>\n            {else}\n                        <img src=\"{base_url}/{$template_subdir}images/icon-empty.png\" alt=\"\" width=\"16\" height=\"16\"/>\n            {/if}\n            {if $member->email != ''}\n                        <a href=\"mailto:{$member->email}\" class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-mail.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Mail\"}</span>\n                        </a>\n            {else}\n                        <img src=\"{base_url}/{$template_subdir}images/icon-empty.png\" alt=\"\" width=\"16\" height=\"16\"/>\n            {/if}\n            {if $member->website != ''}\n                        <a href=\"{$member->website}\" class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-website.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Website\"}<span>\n                        </a>\n            {else}\n                        <img src=\"{base_url}/{$template_subdir}images/icon-empty.png\" alt=\"\" width=\"16\" height=\"16\"/>\n            {/if}\n            {if $member->isAdmin()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-star.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Admin\"}</span>\n                        </span>\n            {elseif $member->isStaff()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-staff.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Staff member\"}</span>\n                        </span>\n            {else}\n                        <img src=\"{base_url}/{$template_subdir}images/icon-empty.png\" alt=\"\" width=\"16\" height=\"16\"/>\n            {/if}\n                        {assign var=\"mid\" value=$member->id}\n                        <a href=\"{path_for name=\"member\" data=[\"id\" => $member->id]}\">{$member->sname}{if $member->company_name} ({$member->company_name}){/if}</a>\n                    </td>\n        {else}\n            {assign var=\"lrclass\" value=$rclass}\n            {assign var=\"propname\" value=$column->propname}\n            {assign var=value value=$member->$propname}\n\n            {if $column->field_id eq 'pseudo_adh'}\n                {assign var=\"lrclass\" value=\"$rclass nowrap\"}\n                {assign var=value value=$member->$propname|htmlspecialchars}\n            {elseif $column->field_id eq 'tel_adh' or $column->field_id eq 'gsm_adh'}\n                {assign var=\"lrclass\" value=\"$rclass nowrap\"}\n            {elseif $column->field_id eq 'id_statut'}\n                {assign var=\"lrclass\" value=\"$rclass nowrap\"}\n                {assign var=value value={statusLabel id=$member->$propname}}\n            {elseif $column->field_id eq 'titre_adh'}\n                {if is_object($member->title)}\n                    {assign var=value value=$member->title->long}\n                {/if}\n            {elseif $column->field_id eq 'pref_lang'}\n                {assign var=\"value\" value=$i18n->getNameFromId($member->language)}\n            {elseif $column->field_id eq 'adresse_adh'}\n                {assign var=\"value\" value=$member->saddress|escape|nl2br}\n            {elseif $column->field_id eq 'bool_display_info'}\n                {assign var=\"value\" value=$member->sappears_in_list}\n            {elseif $column->field_id eq 'activite_adh'}\n                {assign var=\"value\" value=$member->sactive}\n            {elseif $column->field_id eq 'id_statut'}\n                {assign var=\"value\" value=$member->sstatus}\n            {elseif $column->field_id eq 'bool_admin_adh'}\n                {assign var=\"value\" value=$member->sadmin}\n            {elseif $column->field_id eq 'bool_exempt_adh'}\n                {assign var=\"value\" value=$member->sdue_free}\n            {elseif $column->field_id eq 'sexe_adh'}\n                {assign var=\"value\" value=$member->sgender}\n            {/if}\n                    <td class=\"{$lrclass}\" data-title=\"{$column->label}\">\n            {* Display column.\n                A check is done here to adapt display, this is may not the best way to go\n                but for notw, that works as excpected.\n            *}\n            {if not empty($value)}\n                {if $column->field_id eq 'email_adh' or $column->field_id eq 'msn_adh'}\n                                <a href=\"mailto:{$value}\">{$value}</a>\n                {elseif $column->field_id eq 'tel_adh' or $column->field_id eq 'gsm_adh'}\n                                <a href=\"tel:{$value}\">{$value}</a>\n                {elseif $column->field_id eq 'url_adh'}\n                                <a href=\"{$value}\">{$value}</a>\n                {elseif $column->field_id eq 'parent_id'}\n                                <a href=\"{path_for name=\"member\" data=[\"id\" => $member->parent]}\">{memberName id=$member->parent}</a>\n                {elseif $column->field_id eq 'ddn_adh'}\n                                {$value} {$member->getAge()}\n                {else}\n                                {$value}\n                {/if}\n            {/if}\n                    </td>\n        {/if}\n    {/foreach}\n                    {draw_actions class=$rclass member=$member login=$login plugin_actions=$plugin_actions}\n                </tr>\n{foreachelse}\n                {* colspan +1 for actions column *}\n                <tr><td colspan=\"{$galette_list|count + 1}\" class=\"emptylist\">{_T string=\"No member has been found\"}</td></tr>\n{/foreach}\n            </tbody>\n        </table>\n{if $nb_members != 0}\n        <div class=\"center cright\">\n            {_T string=\"Pages:\"}<br/>\n            <ul class=\"pages\">{$pagination}</ul>\n        </div>\n        <ul class=\"selection_menu\">\n            <li>{_T string=\"For the selection:\"}</li>\n    {if $login->isAdmin() or $login->isStaff()}\n            <li>\n                <button type=\"submit\" id=\"delete\" name=\"delete\">\n                    <i class=\"fas fa-user-times fa-fw\"></i> {_T string=\"Delete\"}\n                </button>\n            </li>\n            <li>\n                <button type=\"submit\" id=\"masschange\" name=\"masschange\" class=\"action\">\n                    <i class=\"fas fa-user-edit fa-fw\"></i> {_T string=\"Mass change\"}\n                </button>\n            </li>\n        {if $pref_mail_method neq constant('Galette\\Core\\GaletteMail::METHOD_DISABLED')}\n            <li>\n                <button type=\"submit\" id=\"sendmail\" name=\"mailing\">\n                    <i class=\"fas fa-mail-bulk fa-fw\"></i> {_T string=\"Mail\"}\n                </button>\n            </li>\n        {/if}\n    {/if}\n            <li>\n                <button type=\"submit\" id=\"attendance_sheet\" name=\"attendance_sheet\">\n                    <i class=\"fas fa-file-alt fa-fw\"></i> {_T string=\"Attendance sheet\"}\n                </button>\n            </li>\n            <li>\n                <button type=\"submit\" id=\"labels\" name=\"labels\">\n                    <i class=\"far fa-address-card fa-fw\"></i> {_T string=\"Generate labels\"}\n                </button>\n            </li>\n            <li>\n                <button type=\"submit\" id=\"cards\" name=\"cards\">\n                    <i class=\"fas fa-id-badge fa-fw\"></i> {_T string=\"Generate Member Cards\"}\n                </button>\n            </li>\n    {if $login->isAdmin() or $login->isStaff()}\n            <li>\n                <button type=\"submit\" id=\"csv\" name=\"csv\">\n                    <i class=\"fas fa-file-csv fa-fw\"></i> {_T string=\"Export as CSV\"}\n                </button>\n            </li>\n    {/if}\n    {if $plugin_batch_actions|@count != 0}\n        {foreach from=$plugin_batch_actions key=plugin_name item=action}\n            {include file=$action module_id=$plugin_name|replace:'batch_action_':''}\n        {/foreach}\n    {/if}\n        </ul>\n{/if}\n\n        </form>\n{if $nb_members != 0}\n        <div id=\"legende\" title=\"{_T string=\"Legend\"}\">\n            <h1>{_T string=\"Legend\"}</h1>\n            <table>\n                <tbody>\n                    <tr>\n                        <th class=\"\" colspan=\"4\">{_T string=\"Reading the list\"}</th>\n                    </tr>\n                    <tr>\n                        <th class=\"back\">{_T string=\"Name\"}</th>\n                        <td class=\"back\">{_T string=\"Active account\"}</td>\n                        <th class=\"inactif back\">{_T string=\"Name\"}</th>\n                        <td class=\"back\">{_T string=\"Inactive account\"}</td>\n                    </tr>\n                    <tr>\n                        <th class=\"cotis-ok color-sample\">&nbsp;</th>\n                        <td class=\"back\">{_T string=\"Membership in order\"}</td>\n                        <th class=\"cotis-soon color-sample\">&nbsp;</th>\n                        <td class=\"back\">{_T string=\"Membership will expire soon (&lt;30d)\"}</td>\n                    </tr>\n                    <tr>\n                        <th class=\"cotis-never color-sample\">&nbsp;</th>\n                        <td class=\"back\">{_T string=\"Never contributed\"}</td>\n                        <th class=\"cotis-late color-sample\">&nbsp;</th>\n                        <td class=\"back\">{_T string=\"Lateness in fee\"}</td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr>\n                        <th class=\"\" colspan=\"4\">{_T string=\"Actions\"}</th>\n                    </tr>\n                    <tr>\n                        <th class=\"action\">\n                            <i class=\"fas fa-user-edit fa-fw\"></i>\n                        </th>\n                        <td class=\"back\">{_T string=\"Modification\"}</td>\n                        <th>\n                            <i class=\"fas fa-cookie fa-fw\"></i>\n                        </th>\n                        <td class=\"back\">{_T string=\"Contributions\"}</td>\n                    </tr>\n                    <tr>\n                        <th class=\"delete\">\n                            <i class=\"fas fa-user-times fa-fw\"></i>\n                        </th>\n                        <td class=\"back\">{_T string=\"Deletion\"}</td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr>\n                        <th colspan=\"4\">{_T string=\"User status/interactions\"}</th>\n                    </tr>\n                    <tr>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-mail.png\" alt=\"{_T string=\"Mail\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Send an email\"}</td>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-website.png\" alt=\"{_T string=\"Website\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Visit website\"}</td>\n                    </tr>\n\n                    <tr>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-male.png\" alt=\"{_T string=\"Is a man\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Is a man\"}</td>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-female.png\" alt=\"{_T string=\"Is a woman\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Is a woman\"}</td>\n                    </tr>\n                    <tr>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-company.png\" alt=\"{_T string=\"Is a company\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Is a company\"}</td>\n                    </tr>\n                    <tr>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-star.png\" alt=\"{_T string=\"Admin\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Admin\"}</td>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-staff.png\" alt=\"{_T string=\"Staff member\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Staff member\"}</td>\n\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n{/if}\n{/block}\n\n{block name=\"javascripts\"}\n        <script type=\"text/javascript\">\n{if $nb_members != 0}\n        var _checkselection = function() {\n            var _checkeds = $('table.listing').find('input[type=checkbox]:checked').length;\n            if ( _checkeds == 0 ) {\n                var _el = $('<div id=\"pleaseselect\" title=\"{_T string=\"No member selected\" escape=\"js\"}\">{_T string=\"Please make sure to select at least one member from the list to perform this action.\" escape=\"js\"}</div>');\n                _el.appendTo('body').dialog({\n                    modal: true,\n                    buttons: {\n                        Ok: function() {\n                            $(this).dialog( \"close\" );\n                        }\n                    },\n                    close: function(event, ui){\n                        _el.remove();\n                    }\n                });\n                return false;\n            }\n            return true;\n        }\n{/if}\n        {* Use of Javascript to draw specific elements that are not relevant is JS is inactive *}\n        $(function(){\n{if $nb_members != 0}\n            var _checklinks = '<div class=\"checkboxes\"><span class=\"fleft\"><a href=\"#\" class=\"checkall tooltip\"><i class=\"fas fa-check-square\"></i> {_T string=\"(Un)Check all\" escape=\"js\"}</a> | <a href=\"#\" class=\"checkinvert tooltip\"><i class=\"fas fa-exchange-alt\"></i> {_T string=\"Invert selection\" escape=\"js\"}</a></span><a href=\"#\" class=\"show_legend fright\">{_T string=\"Show legend\" escape=\"js\"}</a></div>';\n            $('.listing').before(_checklinks);\n            $('.listing').after(_checklinks);\n            _bind_check();\n            _bind_legend();\n\n            $('.selection_menu *[type=\"submit\"], .selection_menu *[type=\"button\"]').click(function(){\n                if ( this.id == 'delete' ) {\n                    //mass removal is handled from 2 steps removal\n                    return;\n                }\n\n                if (!_checkselection()) {\n                    return false;\n                } else {\n    {if $existing_mailing eq true}\n                    if (this.id == 'sendmail') {\n                        var _el = $('<div id=\"existing_mailing\" title=\"{_T string=\"Existing mailing\" escape=\"js\"}\">{_T string=\"A mailing already exists. Do you want to create a new one or resume the existing?\" escape=\"js\"}</div>');\n                        _el.appendTo('body').dialog({\n                            modal: true,\n                            hide: 'fold',\n                            width: '25em',\n                            height: 150,\n                            close: function(event, ui){\n                                _el.remove();\n                            },\n                            buttons: {\n                                '{_T string=\"Resume\"}': function() {\n                                    $(this).dialog( \"close\" );\n                                    location.href = '{path_for name=\"mailing\"}';\n                                },\n                                '{_T string=\"New\"}': function() {\n                                    $(this).dialog( \"close\" );\n                                    //add required controls to the form, change its action URI, and send it.\n                                    var _form = $('#listform');\n                                    _form.append($('<input type=\"hidden\" name=\"mailing_new\" value=\"true\"/>'));\n                                    _form.append($('<input type=\"hidden\" name=\"mailing\" value=\"true\"/>'));\n                                    _form.submit();\n                                }\n                            }\n                        });\n                        return false;\n                    }\n    {/if}\n                    if (this.id == 'attendance_sheet') {\n                        _attendance_sheet_details();\n                        return false;\n                    }\n                    return true;\n                }\n            });\n{/if}\n            if ( _shq = $('#showhideqry') ) {\n                _shq.click(function(){\n                    $('#sql_qry').toggleClass('hidden');\n                    return false;\n                });\n            }\n\n            $('#savesearch').on('click', function(e) {\n                e.preventDefault();\n\n                var _el = $('<div id=\"savedsearch_details\" title=\"{_T string=\"Search title\" escape=\"js\"}\"><input type=\"text\" name=\"search_title\" id=\"search_title\"/></div>');\n                _el.appendTo('body').dialog({\n                    modal: true,\n                    hide: 'fold',\n                    width: '40%',\n                    height: 200,\n                    close: function(event, ui){\n                        _el.remove();\n                    },\n                    buttons: {\n                        '{_T string=\"Ok\" escape=\"js\"}': function() {\n                            var _form = $('#filtre');\n                            var _data = _form.serialize();\n                            _data = _data + \"&search_title=\" + $('#search_title').val();\n                            $.ajax({\n                                url: '{path_for name=\"saveSearch\"}',\n                                type: \"POST\",\n                                data: _data,\n                                datatype: 'json',\n                                {include file=\"js_loader.tpl\"},\n                                success: function(res) {\n                                    $.ajax({\n                                        url: '{path_for name=\"ajaxMessages\"}',\n                                        method: \"GET\",\n                                        success: function (message) {\n                                            $('#asso_name').after(message);\n                                        }\n                                    });\n                                }\n                            });\n\n                            $(this).dialog( \"close\" );\n                        },\n                        '{_T string=\"Cancel\" escape=\"js\"}': function() {\n                            $(this).dialog( \"close\" );\n                        }\n                    }\n                });\n            });\n\n        });\n{if $nb_members != 0}\n        {include file=\"js_removal.tpl\"}\n        {include file=\"js_removal.tpl\" selector=\"#delete\" deleteurl=\"'{path_for name=\"batch-memberslist\"}'\" extra_check=\"if (!_checkselection()) {ldelim}return false;{rdelim}\" extra_data=\"delete: true, member_sel: $('#listform input[type=\\\"checkbox\\\"]:checked').map(function(){ return $(this).val(); }).get()\" method=\"POST\"}\n\n        var _bindmassres = function(res) {\n            res.find('#btncancel')\n                .button()\n                .on('click', function(e) {\n                    e.preventDefault();\n                    res.dialog('close');\n                });\n\n            res.find('input[type=submit]')\n                .button();\n        }\n\n        $('#masschange').off('click').on('click', function(event) {\n            event.preventDefault();\n            var _this = $(this);\n\n            if (!_checkselection()) {\n                return false;\n            }\n            $.ajax({\n                url: '{path_for name=\"batch-memberslist\"}',\n                type: \"POST\",\n                data: {\n                    ajax: true,\n                    masschange: true,\n                    member_sel: $('#listform input[type=\\\"checkbox\\\"]:checked').map(function(){\n                        return $(this).val();\n                    }).get()\n                },\n                datatype: 'json',\n                {include file=\"js_loader.tpl\"},\n                success: function(res){\n                    var _res = $(res);\n                    _bindmassres(_res);\n\n                    _res.find('form').on('submit', function(e) {\n                        e.preventDefault();\n                        var _form = $(this);\n                        var _data = _form.serialize();\n                        $.ajax({\n                            url: _form.attr('action'),\n                            type: \"POST\",\n                            data: _data,\n                            datatype: 'json',\n                            {include file=\"js_loader.tpl\"},\n                            success: function(html) {\n                                var _html = $(html);\n                                _bindmassres(_html);\n\n                                $('#mass_change').remove();\n                                $('body').append(_html);\n\n                                _initTooltips('#mass_change');\n                                //_massCheckboxes('#mass_change');\n\n                                _html.dialog({\n                                    width: 'auto',\n                                    modal: true,\n                                    close: function(event, ui){\n                                        $(this).dialog('destroy').remove()\n                                    }\n                                });\n\n                                _html.find('form').on('submit', function(e) {\n                                    e.preventDefault();\n                                    var _form = $(this);\n                                    var _data = _form.serialize();\n                                    $.ajax({\n                                        url: _form.attr('action'),\n                                        type: \"POST\",\n                                        data: _data,\n                                        datatype: 'json',\n                                        {include file=\"js_loader.tpl\"},\n                                        success: function(res) {\n                                            if (res.success) {\n                                                window.location.href = _form.find('input[name=redirect_uri]').val();\n                                            } else {\n                                                $.ajax({\n                                                    url: '{path_for name=\"ajaxMessages\"}',\n                                                    method: \"GET\",\n                                                    success: function (message) {\n                                                        $('#asso_name').after(message);\n                                                    }\n                                                });\n                                            }\n                                        }\n                                    });\n                                });\n                            },\n                            error: function() {\n                                alert(\"{_T string=\"An error occurred :(\" escape=\"js\"}\");\n                            }\n                        });\n                    });\n\n                    $('body').append(_res);\n\n                    _initTooltips('#mass_change');\n                    _massCheckboxes('#mass_change');\n\n                    _res.dialog({\n                        width: 'auto',\n                        modal: true,\n                        close: function(event, ui){\n                            $(this).dialog('destroy').remove()\n                        }\n                    });\n                },\n                error: function() {\n                    alert(\"{_T string=\"An error occurred :(\" escape=\"js\"}\");\n                }\n            });\n        });\n\n        var _attendance_sheet_details = function(){\n            var _selecteds = [];\n            $('table.listing').find('input[type=checkbox]:checked').each(function(){\n                _selecteds.push($(this).val());\n            });\n            $.ajax({\n                url: '{path_for name=\"attendance_sheet_details\"}',\n                type: \"POST\",\n                data: {\n                    ajax: true,\n                    selection: _selecteds\n                },\n                dataType: 'html',\n                success: function(res){\n                    var _el = $('<div id=\"attendance_sheet_details\" title=\"{_T string=\"Attendance sheet details\" escape=\"js\"}\"> </div>');\n                    _el.appendTo('body').dialog({\n                        modal: true,\n                        hide: 'fold',\n                        width: '60%',\n                        height: 400,\n                        close: function(event, ui){\n                            _el.remove();\n                        },\n                        buttons: {\n                            Ok: function() {\n                                $('#sheet_details_form').submit();\n                                $(this).dialog( \"close\" );\n                            },\n                            Cancel: function() {\n                                $(this).dialog( \"close\" );\n                            }\n                        }\n                    }).append(res);\n                    $('#sheet_date').datepicker({\n                        changeMonth: true,\n                        changeYear: true,\n                        showOn: 'button',\n                        yearRange: 'c:c+5',\n                        buttonText: '<i class=\"far fa-calendar-alt\"></i> <span class=\"sr-only\">{_T string=\"Select a date\" escape=\"js\"}</span>'\n                    });\n                },\n                error: function() {\n                    alert(\"{_T string=\"An error occurred displaying attendance sheet details interface :(\" escape=\"js\"}\");\n                }\n            });\n        }\n{/if}\n    </script>\n{/block}\n", "{extends file=\"page.tpl\"}\n\n{block name=\"content\"}\n    <form action=\"{path_for name=\"history_filter\"}\" method=\"post\" id=\"filtre\">\n        <div id=\"listfilter\">\n            <label for=\"start_date_filter\">{_T string=\"since\"}</label>&nbsp;\n            <input type=\"text\" name=\"start_date_filter\" id=\"start_date_filter\" maxlength=\"10\" size=\"10\" value=\"{$history->filters->start_date_filter}\"/>\n            <label for=\"end_date_filter\">{_T string=\"until\"}</label>&nbsp;\n            <input type=\"text\" name=\"end_date_filter\" id=\"end_date_filter\" maxlength=\"10\" size=\"10\" value=\"{$history->filters->end_date_filter}\"/>\n\n\n    {assign var=\"users\" value=$history->getUsersList()}\n    {if $users|@count gt 0}\n            <label for=\"user_filter\">{_T string=\"Member\"}</label>&nbsp;\n            <select name=\"user_filter\" id=\"user_filter\">\n                <option value=\"0\"{if $history->filters->user_filter eq 0} selected=\"selected\"{/if}>{_T string=\"Select an user\"}</option>\n        {foreach from=$users item=$user}\n                <option value=\"{$user}\"{if $history->filters->user_filter === $user} selected=\"selected\"{/if}>{$user}</option>\n        {/foreach}\n            </select>\n    {/if}\n\n    {assign var=\"actions\" value=$history->getActionsList()}\n    {if $actions|@count gt 0}\n            <label for=\"action_filter\">{_T string=\"Action\"}</label>&nbsp;\n            <select name=\"action_filter\" id=\"action_filter\">\n                <option value=\"0\">{_T string=\"Select an action\"}</option>\n        {foreach from=$actions item=$action}\n                <option value=\"{$action}\"{if $history->filters->action_filter eq $action} selected=\"selected\"{/if}>{$action}</option>\n        {/foreach}\n            </select>\n    {/if}\n\n\n            <input type=\"submit\" class=\"inline\" value=\"{_T string=\"Filter\"}\"/>\n            <input type=\"submit\" name=\"clear_filter\" class=\"inline\" value=\"{_T string=\"Clear filter\"}\"/>\n        </div>\n        <div class=\"infoline\">\n            <a\n                class=\"button delete\"\n                href=\"{path_for name=\"flushHistory\"}\"\n            >\n                <i class=\"fas fa-trash\"></i>\n                {_T string=\"Flush the logs\"}\n            </a>\n            {_T string=\"%count entry\" plural=\"%count entries\" count=$history->getCount() pattern=\"/%count/\" replace=$history->getCount()}\n            <div class=\"fright\">\n                <label for=\"nbshow\">{_T string=\"Records per page:\"}</label>\n                <select name=\"nbshow\" id=\"nbshow\">\n                    {html_options options=$nbshow_options selected=$numrows}\n                </select>\n                <noscript> <span><input type=\"submit\" value=\"{_T string=\"Change\"}\" /></span></noscript>\n            </div>\n        </div>\n    </form>\n\n        <table class=\"listing\">\n            <thead>\n                <tr>\n                    <th class=\"small_head\">#</th>\n                    <th class=\"left date_row\">\n                        <a href=\"{path_for name=\"history\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Filters\\HistoryList::ORDERBY_DATE\"|constant]}\">\n                            {_T string=\"Date\"}\n                            {if $history->filters->orderby eq constant('Galette\\Filters\\HistoryList::ORDERBY_DATE')}\n                                {if $history->filters->ordered eq constant('Galette\\Filters\\HistoryList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Ascendent\"}\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Descendant\"}\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n                    <th class=\"left date_row\">\n                        <a href=\"{path_for name=\"history\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Filters\\HistoryList::ORDERBY_IP\"|constant]}\">\n                            {_T string=\"IP\"}\n                            {if $history->filters->orderby eq constant('Galette\\Filters\\HistoryList::ORDERBY_IP')}\n                                {if $history->filters->ordered eq constant('Galette\\Filters\\HistoryList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Ascendent\"}\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Descendant\"}\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n                    <th class=\"left date_row\">\n                        <a href=\"{path_for name=\"history\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Filters\\HistoryList::ORDERBY_USER\"|constant]}\">\n                            {_T string=\"User\"}\n                            {if $history->filters->orderby eq constant('Galette\\Filters\\HistoryList::ORDERBY_USER')}\n                                {if $history->filters->ordered eq constant('Galette\\Filters\\HistoryList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Ascendent\"}\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Descendant\"}\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n                    <th class=\"left username_row\">\n                        <a href=\"{path_for name=\"history\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Filters\\HistoryList::ORDERBY_ACTION\"|constant]}\">\n                            {_T string=\"Action\"}\n                            {if $history->filters->orderby eq constant('Galette\\Filters\\HistoryList::ORDERBY_ACTION')}\n                                {if $history->filters->ordered eq constant('Galette\\Filters\\HistoryList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Ascendent\"}\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Descendant\"}\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n                    <th class=\"left\">\n                        {_T string=\"Description\"}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n{if $logs|@count == 0}\n                <tr><td colspan=\"6\" class=\"emptylist\">{_T string=\"No log found\"}</td></tr>\n{else}\n    {foreach from=$logs item=log name=eachlog}\n                <tr class=\"{if $smarty.foreach.eachlog.iteration % 2 eq 0}even{else}odd{/if}\">\n                    <td data-scope=\"row\">\n                        {$smarty.foreach.eachlog.iteration}\n                        <span class=\"row-title\">\n                            {_T string=\"History entry %id\" pattern=\"/%id/\" replace=$smarty.foreach.eachlog.iteration}\n                        </span>\n                    </td>\n                    <td class=\"nowrap\" data-title=\"{_T string=\"Date\"}\">{$log.date_log|date_format:\"%a %d/%m/%Y - %R\"}</td>\n                    <td class=\"nowrap\" data-title=\"{_T string=\"IP\"}\">{$log.ip_log}</td>\n                    <td data-title=\"{_T string=\"User\"}\">{$log.adh_log}</td>\n                    <td data-title=\"{_T string=\"Action\"}\">{$log.action_log}</td>\n                    <td data-title=\"{_T string=\"Description\"}\">\n                        {$log.text_log}\n        {if $log.sql_log}\n                        <span class=\"sql_log\">{$log.sql_log|escape:\"htmlall\"}</span>\n        {/if}\n                    </td>\n                </tr>\n    {foreachelse}\n                <tr><td colspan=\"6\" class=\"emptylist\">{_T string=\"logs are empty\"}</td></tr>\n    {/foreach}\n{/if}\n            </tbody>\n        </table>\n{if $logs|@count != 0}\n        <div class=\"center cright\">\n            {_T string=\"Pages:\"}<br/>\n            <ul class=\"pages\">{$pagination}</ul>\n        </div>\n{/if}\n{/block}\n\n{block name=\"javascripts\"}\n        <script type=\"text/javascript\">\n            $(function() {\n                {include file=\"js_removal.tpl\"}\n                var _elt = $('<img src=\"{base_url}/{$template_subdir}images/info.png\" class=\"qryhide\" alt=\"\" title=\"{_T string=\"Show associated query\"}\"/>');\n                $('.sql_log').hide().parent().prepend(_elt);\n                $('.qryhide').click(function() {\n                    $(this).next('.sql_log').show();\n                });\n            });\n\n            $('#start_date_filter, #end_date_filter').datepicker({\n                changeMonth: true,\n                changeYear: true,\n                showOn: 'button',\n                buttonText: '<i class=\"far fa-calendar-alt\"></i> <span class=\"sr-only\">{_T string=\"Select a date\" escape=\"js\"}</span>'\n            });\n        </script>\n{/block}\n", "{extends file=\"page.tpl\"}\n\n{block name=\"content\"}\n{if isset($navigate) and $navigate|@count != 0}\n    <nav>\n        <a href=\"{if isset($navigate.prev)}{path_for name=\"member\" data=[\"id\" => $navigate.prev]}{else}#{/if}\" class=\"button{if !isset($navigate.prev)} disabled{/if}\">\n            <i class=\"fas fa-step-backward\"></i>\n            {_T string=\"Previous\"}\n        </a>\n        {$navigate.pos}/{$navigate.count}\n        <a href=\"{if isset($navigate.next)}{path_for name=\"member\" data=[\"id\" => $navigate.next]}{else}#{/if}\" class=\"button{if !isset($navigate.next)} disabled{/if}\">\n            {_T string=\"Next\"}\n            <i class=\"fas fa-step-forward\"></i>\n        </a>\n    </nav>\n{/if}\n    <div class=\"bigtable\">\n        <div id=\"member_stateofdue\" class=\"{$member->getRowClass()}\">{$member->getDues()}</div>\n        <ul id=\"details_menu\">\n{if ($pref_card_self eq 1) or ($login->isAdmin() or $login->isStaff())}\n            <li>\n                <a\n                    href=\"{if $member->isUp2Date()}{path_for name=\"pdf-members-cards\" data=['id_adh' => $member->id]}{else}#{/if}\"\n                    title=\"{_T string=\"Generate members's card\"}\"\n                    class=\"button bigbutton{if !$member->isUp2Date()} disabled{/if} tooltip\"\n                >\n                    <i class=\"fas fa-id-badge fa-fw fa-2x\"></i>\n                    {_T string=\"Generate Member Card\"}\n                </a>\n            </li>\n            <li>\n                <a\n                    href=\"{path_for name=\"adhesionForm\" data=[\"id_adh\" => $member->id]}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-id-card fa-fw fa-2x\"></i>\n                    {_T string=\"Adhesion form\"}\n                </a>\n            </li>\n    {if $pref_mail_method neq constant('Galette\\Core\\GaletteMail::METHOD_DISABLED') && ($login->isAdmin() || $login->isStaff())}\n            <li>\n                <a\n                    href=\"{path_for name=\"retrieve-pass\" data=[\"id_adh\" => $member->id]}\"\n                    id=\"btn_lostpassword\"\n                    title=\"{_T string=\"Send member a link to generate a new passord, as if had used the 'lost password' functionnality.\"}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-unlock fa-fw fa-2x\"></i>\n                    {_T string=\"New password\"}\n                </a>\n            </li>\n    {/if}\n{/if}\n            <li>\n                <a\n                    href=\"{path_for name=\"editMember\" data=[\"id\" => $member->id]}\"\n                    class=\"button bigbutton tooltip\"\n                    title=\"{_T string=\"Edit member\"}\"\n                >\n                    <i class=\"fas fa-user-edit fa-fw fa-2x\"></i>\n                    {_T string=\"Modification\"}\n                </a>\n            </li>\n{if $login->isAdmin() or $login->isStaff()}\n            <li>\n                <a\n                    href=\"{path_for name=\"contributions\" data=[\"type\" => \"contributions\", \"option\" => \"member\", \"value\" => $member->id]}\"\n                    title=\"{_T string=\"View member's contributions\"}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-cookie fa-fw fa-2x\"></i>\n                    {_T string=\"View contributions\"}\n                </a>\n            </li>\n            <li>\n                <a\n                    href=\"{path_for name=\"addContribution\" data=[\"type\" => \"fee\"]}?id_adh={$member->id}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-user-check fa-fw fa-2x\"></i>\n                    {_T string=\"Add a membership fee\"}\n                </a>\n            </li>\n            <li>\n                <a\n                    href=\"{path_for name=\"addContribution\" data=[\"type\" => \"donation\"]}?id_adh={$member->id}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-gift fa-fw fa-2x\"></i>\n                    {_T string=\"Add a donation\"}\n                </a>\n            </li>\n            <li>\n                <a\n                    href=\"{path_for name=\"duplicateMember\" data=[\"id_adh\" => $member->id]}\"\n                    title=\"{_T string=\"Create a new member with %name information.\" pattern=\"/%name/\" replace=$member->sname}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-clone fa-fw fa-2x\" aria-hidden=\"true\"></i>\n                    {_T string=\"Duplicate\"}\n                </a>\n            </li>\n{/if}\n{* If some additionnals actions should be added from plugins, we load the relevant template file\nWe have to use a template file, so Smarty will do its work (like replacing variables). *}\n{if $plugin_detailled_actions|@count != 0}\n  {foreach from=$plugin_detailled_actions key=plugin_name item=action}\n    {include file=$action module_id=$plugin_name|replace:'det_actions_':''}\n  {/foreach}\n{/if}\n\n        </ul>\n{if $member->hasParent() or $member->hasChildren()}\n        <table class=\"details\">\n            <caption class=\"ui-state-active ui-corner-top\">{_T string=\"Family\"}</caption>\n    {if $member->hasParent()}\n            <tr>\n                <th>{_T string=\"Attached to:\"}</th>\n                <td><a href=\"{path_for name=\"member\" data=[\"id\" => $member->parent->id]}\">{$member->parent->sfullname}</a></td>\n            </tr>\n    {/if}\n    {if $member->hasChildren()}\n            <tr>\n                <th>{_T string=\"Parent of:\"}</th>\n                <td>\n        {foreach from=$member->children item=child}\n                    <a href=\"{path_for name=\"member\" data=[\"id\" => $child->id]}\">{$child->sfullname}</a>{if not $child@last}, {/if}\n        {/foreach}\n                </td>\n            </tr>\n    {/if}\n\n{/if}\n{foreach from=$display_elements item=display_element}\n    {assign var=\"elements\" value=$display_element->elements}\n        <table class=\"details\">\n            <caption class=\"ui-state-active ui-corner-top\">{_T string=$display_element->label}</caption>\n    {foreach from=$elements item=element}\n        {if $element->field_id eq 'parent_id'}\n            {continue}\n        {/if}\n        {assign var=\"propname\" value=$element->propname}\n        {assign var=\"value\" value=$member->$propname|escape}\n\n        {if $element->field_id eq 'nom_adh'}\n            {assign var=\"value\" value=$member->sfullname|escape}\n        {elseif $element->field_id eq 'pref_lang'}\n            {assign var=\"value\" value=$pref_lang}\n        {elseif $element->field_id eq 'adresse_adh'}\n            {assign var=\"value\" value=$member->saddress|escape|nl2br}\n        {elseif $element->field_id eq 'bool_display_info'}\n            {assign var=\"value\" value=$member->sappears_in_list}\n        {elseif $element->field_id eq 'activite_adh'}\n            {assign var=\"value\" value=$member->sactive}\n        {elseif $element->field_id eq 'id_statut'}\n            {assign var=\"value\" value=$member->sstatus}\n        {elseif $element->field_id eq 'bool_admin_adh'}\n            {assign var=\"value\" value=$member->sadmin}\n        {elseif $element->field_id eq 'bool_exempt_adh'}\n            {assign var=\"value\" value=$member->sdue_free}\n        {elseif $element->field_id eq 'info_adh'}\n            {assign var=\"value\" value=$member->others_infos_admin|escape|nl2br}\n        {elseif $element->field_id eq 'info_public_adh'}\n            {assign var=\"value\" value=$member->others_infos|escape|nl2br}\n        {/if}\n            <tr>\n                <th>{$element->label}</th>\n                <td>\n        {if $element->field_id eq 'nom_adh'}\n            {if $member->isCompany()}\n                    <i class=\"fas fa-industry fa-fw\"></i>\n            {elseif $member->isMan()}\n                    <i class=\"fas fa-mars fa-fw\"></i>\n            {elseif $member->isWoman()}\n                    <i class=\"fas fa-venus fa-fw\"></i>\n            {/if}\n        {/if}\n        {if $element->field_id eq 'email_adh' or $element->field_id eq 'msn_adh'}\n                        <a href=\"mailto:{$value}\">{$value}</a>\n        {elseif $element->field_id eq 'tel_adh' or $element->field_id eq 'gsm_adh'}\n                        <a href=\"tel:{$value}\">{$value}</a>\n        {elseif $element->field_id eq 'url_adh'}\n                        <a href=\"{$value}\">{$value}</a>\n        {elseif $element->field_id eq 'ddn_adh'}\n                        {$value} {$member->getAge()}\n        {else}\n                        {$value}\n        {/if}\n                </td>\n        {if $display_element@first and $element@first}\n            {assign var=\"mid\" value=$member->id}\n                <td rowspan=\"{$elements|count}\" style=\"width:{$member->picture->getOptimalWidth()}px;\">\n                    <img\n                        src=\"{path_for name=\"photo\" data=[\"id\" => $mid, \"rand\" => $time]}\"\n                        width=\"{$member->picture->getOptimalWidth()}\"\n                        height=\"{$member->picture->getOptimalHeight()}\"\n                        alt=\"{_T string=\"Picture\"}\"\n                        {if $login->isAdmin() or $login->isStaff() or $login->login eq $member->login} title=\"{_T string=\"You can drop new image here to get photo changed\"}\" class=\"tooltip\"{/if}\n                        id=\"photo_adh\"/>\n                </td>\n        {/if}\n            </tr>\n        {if $display_element@last and $element@last and ($member->groups != false && $member->groups|@count != 0 || $member->managed_groups != false && $member->managed_groups|@count != 0)}\n            <tr>\n                <th>{_T string=\"Groups:\"}</th>\n                <td>\n    {foreach from=$groups item=group key=kgroup}\n        {if $member->isGroupMember($group) or $member->isGroupManager($group)}\n                    <a href=\"{if $login->isGroupManager($kgroup)}{path_for name=\"groups\" data=[\"id\" => $kgroup]}{else}#{/if}\" class=\"button {if not $login->isGroupManager($kgroup)} notmanaged{/if}\">\n                        {$group}\n            {if $member->isGroupMember($group)}\n                        <i class=\"fas fa-user fa-w\" title=\"{_T string=\"Member of group\"}\"></i>\n            {/if}\n            {if $member->isGroupManager($group)}\n                        <i class=\"fas fa-user-tie fa-w\" title=\"{_T string=\"Group manager\"}\"></i>\n            {/if}\n                    </a>\n        {/if}\n    {/foreach}\n                </td>\n            </tr>\n        {/if}\n    {/foreach}\n        </table>\n{/foreach}\n\n{include file=\"display_dynamic_fields.tpl\" object=$member}\n        <a href=\"#\" id=\"back2top\">{_T string=\"Back to top\"}</a>\n    </div>\n{/block}\n{block name=\"javascripts\"}\n    {if $login->isAdmin() or $login->isStaff() or $login->login eq $member->login}\n    <script type=\"text/javascript\">\n        $(function() {\n            {include file=\"photo_dnd.tpl\"}\n\n            $('.notmanaged').click(function(){\n                var _el = $('<div id=\"not_managed_group\" title=\"{_T string=\"Not managed group\" escape=\"js\"}\">{_T string=\"You are not part of managers for the requested group.\" escape=\"js\"}</div>');\n                _el.appendTo('body').dialog({\n                    modal: true,\n                    buttons: {\n                        \"{_T string=\"Ok\" escape=\"js\"}\": function() {\n                            $( this ).dialog( \"close\" );\n                        }\n                    },\n                    close: function(event, ui){\n                        _el.remove();\n                    }\n                });\n                return false;\n            });\n        });\n    </script>\n    {/if}\n{/block}\n"], "fixing_code": ["<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette authentication controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2019-2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Entity\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\Login;\nuse Galette\\Core\\Password;\nuse Galette\\Core\\GaletteMail;\nuse Galette\\Entity\\Adherent;\nuse Galette\\Entity\\Texts;\n\n/**\n * Galette authentication controller\n *\n * @category  Controllers\n * @name      AuthController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nclass AuthController extends AbstractController\n{\n    /**\n     * Log in\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $r        Redirect after login\n     *\n     * @return void\n     */\n    public function login(Request $request, Response $response, string $r = null)\n    {\n        //store redirect path if any\n        if (\n            $r !== null\n            && $r != '/logout'\n            && $r != '/login'\n        ) {\n            $this->session->urlRedirect = $r;\n        }\n\n        if (!$this->login->isLogged()) {\n            // display page\n            $this->view->render(\n                $response,\n                'index.tpl',\n                array(\n                    'page_title'    => _T(\"Login\"),\n                )\n            );\n            return $response;\n        } else {\n            return $this->galetteRedirect($request, $response);\n        }\n    }\n\n    /**\n     * Do login\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return void\n     */\n    public function doLogin(Request $request, Response $response)\n    {\n        $nick = $request->getParsedBody()['login'];\n        $password = $request->getParsedBody()['password'];\n        $checkpass = new \\Galette\\Util\\Password($this->preferences);\n\n        if (trim($nick) == '' || trim($password) == '') {\n            $this->flash->addMessage(\n                'loginfault',\n                _T(\"You must provide both login and password.\")\n            );\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('login'));\n        }\n\n        if ($nick === $this->preferences->pref_admin_login) {\n            $pw_superadmin = password_verify(\n                $password,\n                $this->preferences->pref_admin_pass\n            );\n            if (!$pw_superadmin) {\n                $pw_superadmin = (\n                    md5($password) === $this->preferences->pref_admin_pass\n                );\n            }\n            if ($pw_superadmin) {\n                $this->login->logAdmin($nick, $this->preferences);\n            }\n        } else {\n            $this->login->logIn($nick, $password);\n        }\n\n        if ($this->login->isLogged()) {\n            if (!$checkpass->isValid($password)) {\n                //password is no longer valid with current rules, must be changed\n                $this->flash->addMessage(\n                    'warning_detected',\n                    _T(\"Your password is too weak! Please consider updating it.\") .\n                    '<br/> -' . implode('<br/>', $checkpass->getErrors())\n                );\n            }\n            $this->session->login = $this->login;\n            $this->history->add(_T(\"Login\"));\n            return $this->galetteRedirect($request, $response);\n        } else {\n            $this->flash->addMessage('error_detected', _T(\"Login failed.\"));\n            $this->history->add(_T(\"Authentication failed\"), $nick);\n            return $response->withStatus(301)->withHeader('Location', $this->router->pathFor('login'));\n        }\n    }\n\n    /**\n     * Log out\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return void\n     */\n    public function logout(Request $request, Response $response)\n    {\n        $this->login->logOut();\n        $this->history->add(_T(\"Log off\"));\n        \\RKA\\Session::destroy();\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('slash'));\n    }\n\n    /**\n     * Impersonate\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Member to impersonate\n     *\n     * @return void\n     */\n    public function impersonate(Request $request, Response $response, int $id)\n    {\n        $success = $this->login->impersonate($id);\n\n        if ($success === true) {\n            $this->session->login = $this->login;\n            $msg = str_replace(\n                '%login',\n                $this->login->login,\n                _T(\"Impersonating as %login\")\n            );\n\n            $this->history->add($msg);\n            $this->flash->addMessage(\n                'success_detected',\n                $msg\n            );\n        } else {\n            $msg = str_replace(\n                '%id',\n                $id,\n                _T(\"Unable to impersonate as %id\")\n            );\n            $this->flash->addMessage(\n                'error_detected',\n                $msg\n            );\n            $this->history->add($msg);\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('slash'));\n    }\n\n    /**\n     * End impersonate\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return void\n     */\n    public function unimpersonate(Request $request, Response $response)\n    {\n        $login = new Login($this->zdb, $this->i18n);\n        $login->logAdmin($this->preferences->pref_admin_login, $this->preferences);\n        $this->history->add(_T(\"Impersonating ended\"));\n        $this->session->login = $login;\n        $this->login = $login;\n        $this->flash->addMessage(\n            'success_detected',\n            _T(\"Impersonating ended\")\n        );\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('slash'));\n    }\n\n    /**\n     * Lost password page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function lostPassword(Request $request, Response $response): Response\n    {\n        if ($this->preferences->pref_mail_method === GaletteMail::METHOD_DISABLED) {\n            throw new \\RuntimeException('Mailing disabled.');\n        }\n        // display page\n        $this->view->render(\n            $response,\n            'lostpasswd.tpl',\n            array(\n                'page_title'    => _T(\"Password recovery\")\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Retrieve password procedure\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id_adh   Member id\n     *\n     * @return Response\n     */\n    public function retrievePassword(Request $request, Response $response, int $id_adh = null): Response\n    {\n        $from_admin = false;\n        $redirect_url = $this->router->pathFor('slash');\n        if ((($this->login->isAdmin() || $this->login->isStaff()) && $id_adh !== null)) {\n            $from_admin = true;\n            $redirect_url = $this->router->pathFor('member', ['id' => $id_adh]);\n        }\n\n        if (\n            ($this->login->isLogged()\n            || $this->preferences->pref_mail_method == GaletteMail::METHOD_DISABLED)\n            && !$from_admin\n        ) {\n            if ($this->preferences->pref_mail_method == GaletteMail::METHOD_DISABLED) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"Email sent is disabled in the preferences. Ask galette admin\")\n                );\n            }\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $redirect_url);\n        }\n\n        $adh = null;\n        $login_adh = null;\n        if (($this->login->isAdmin() || $this->login->isStaff()) && $id_adh !== null) {\n            $adh = new Adherent($this->zdb, $id_adh);\n            $login_adh = $adh->login;\n        } else {\n            $post = $request->getParsedBody();\n            $login_adh = htmlspecialchars($post['login'], ENT_QUOTES);\n            $adh = new Adherent($this->zdb, $login_adh);\n        }\n\n        if ($adh->id != '') {\n            //account has been found, proceed\n            if (GaletteMail::isValidEmail($adh->email)) {\n                $texts = new Texts($this->preferences, $this->router);\n                $texts\n                    ->setMember($adh)\n                    ->setNoContribution();\n\n                //check if account is active\n                if (!$adh->isActive()) { //https://bugs.galette.eu/issues/1529\n                    $res = true;\n                    $text_id = 'pwddisabled';\n                } else {\n                    $password = new Password($this->zdb);\n                    $res = $password->generateNewPassword($adh->id);\n                    $text_id = 'pwd';\n                    $texts\n                        ->setLinkValidity()\n                        ->setChangePasswordURI($password);\n                }\n\n                if ($res === true) {\n                    $texts->getTexts($text_id, $adh->language);\n\n                    $mail = new GaletteMail($this->preferences);\n                    $mail->setSubject($texts->getSubject());\n                    $mail->setRecipients(\n                        array(\n                            $adh->email => $adh->sname\n                        )\n                    );\n\n                    $mail->setMessage($texts->getBody());\n                    $sent = $mail->send();\n\n                    if ($sent == GaletteMail::MAIL_SENT) {\n                        $this->history->add(\n                            str_replace(\n                                '%s',\n                                $login_adh,\n                                _T(\"Email sent to '%s' for password recovery.\")\n                            )\n                        );\n                        if ($from_admin === false) {\n                            $message = _T(\"An email has been sent to your address.<br/>Please check your inbox and follow the instructions.\");\n                        } else {\n                            $message = _T(\"An email has been sent to the member.\");\n                        }\n\n                        $this->flash->addMessage(\n                            'success_detected',\n                            $message\n                        );\n                    } else {\n                        $str = str_replace(\n                            '%s',\n                            $login_adh,\n                            _T(\"A problem happened while sending password for account '%s'\")\n                        );\n                        $this->history->add($str);\n                        $this->flash->addMessage(\n                            'error_detected',\n                            $str\n                        );\n\n                        $error_detected[] = $str;\n                    }\n                } else {\n                    $str = str_replace(\n                        '%s',\n                        $login_adh,\n                        _T(\"An error occurred storing temporary password for %s. Please inform an admin.\")\n                    );\n                    $this->history->add($str);\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $str\n                    );\n                }\n            } else {\n                $str = str_replace(\n                    '%s',\n                    $login_adh,\n                    _T(\"Your account (%s) do not contain any valid email address\")\n                );\n                $this->history->add($str);\n                $this->flash->addMessage(\n                    'error_detected',\n                    $str\n                );\n            }\n        } else {\n            //account has not been found\n            if (GaletteMail::isValidEmail($login_adh)) {\n                $str = str_replace(\n                    '%s',\n                    $login_adh,\n                    _T(\"Mails address %s does not exist\")\n                );\n            } else {\n                $str = str_replace(\n                    '%s',\n                    $login_adh,\n                    _T(\"Login %s does not exist\")\n                );\n            }\n\n            $this->history->add($str);\n            $this->flash->addMessage(\n                'error_detected',\n                $str\n            );\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $redirect_url);\n    }\n\n    /**\n     * Password recovery page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $hash     Hash\n     *\n     * @return Response\n     */\n    public function recoverPassword(Request $request, Response $response, string $hash): Response\n    {\n        $password = new Password($this->zdb);\n        if (!$password->isHashValid(base64_decode($hash))) {\n            $this->flash->addMessage(\n                'warning_detected',\n                _T(\"This link is no longer valid. You should ask to retrieve your password again.\")\n            );\n            return $response\n                ->withStatus(301)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('password-lost')\n                );\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            'change_passwd.tpl',\n            array(\n                'hash'          => $hash,\n                'page_title'    => _T(\"Password recovery\")\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Password recovery\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doRecoverPassword(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $password = new Password($this->zdb);\n\n        if (!$id_adh = $password->isHashValid(base64_decode($post['hash']))) {\n            return $response\n                ->withStatus(301)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('password-recovery', ['hash' => $post['hash']])\n                );\n        }\n\n        $error = null;\n        if ($post['mdp_adh'] == '') {\n            $error = _T(\"No password\");\n        } elseif (isset($post['mdp_adh2'])) {\n            if (strcmp($post['mdp_adh'], $post['mdp_adh2'])) {\n                $error = _T(\"- The passwords don't match!\");\n            } else {\n                $checkpass = new \\Galette\\Util\\Password($this->preferences);\n\n                if (!$checkpass->isValid($post['mdp_adh'])) {\n                    //password is not valid with current rules\n                    $error = _T(\"Your password is too weak!\") .\n                        '<br/> -' . implode('<br/>', $checkpass->getErrors());\n                } else {\n                    $res = Adherent::updatePassword(\n                        $this->zdb,\n                        $id_adh,\n                        $post['mdp_adh']\n                    );\n                    if ($res !== true) {\n                        $error = _T(\"An error occurred while updating your password.\");\n                    } else {\n                        $this->history->add(\n                            str_replace(\n                                '%s',\n                                $id_adh,\n                                _T(\"Password changed for member '%s'.\")\n                            )\n                        );\n                        //once password has been changed, we can remove the\n                        //temporary password entry\n                        $password->removeHash(base64_decode($post['hash']));\n                        $this->flash->addMessage(\n                            'success_detected',\n                            _T(\"Your password has been changed!\")\n                        );\n                        return $response\n                            ->withStatus(301)\n                            ->withHeader(\n                                'Location',\n                                $this->router->pathFor('slash')\n                            );\n                    }\n                }\n            }\n        }\n\n        if ($error !== null) {\n            $this->flash->addMessage(\n                'error_detected',\n                $error\n            );\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader(\n                'Location',\n                $this->router->pathFor('password-recovery', ['hash' => $post['hash']])\n            );\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette members controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2019-2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Controllers\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nnamespace Galette\\Controllers\\Crud;\n\nuse Galette\\Controllers\\CrudController;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\Authentication;\nuse Galette\\Core\\GaletteMail;\nuse Galette\\Core\\Gaptcha;\nuse Galette\\Core\\Password;\nuse Galette\\Core\\Picture;\nuse Galette\\Entity\\Adherent;\nuse Galette\\Entity\\Contribution;\nuse Galette\\Entity\\ContributionsTypes;\nuse Galette\\Entity\\DynamicFieldsHandle;\nuse Galette\\Entity\\Group;\nuse Galette\\Entity\\Status;\nuse Galette\\Entity\\FieldsConfig;\nuse Galette\\Filters\\AdvancedMembersList;\nuse Galette\\Filters\\MembersList;\nuse Galette\\IO\\File;\nuse Galette\\IO\\MembersCsv;\nuse Galette\\Repository\\Groups;\nuse Galette\\Repository\\Members;\nuse Galette\\Repository\\PaymentTypes;\nuse Galette\\Repository\\Titles;\nuse Analog\\Analog;\n\n/**\n * Galette members controller\n *\n * @category  Controllers\n * @name      GaletteController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nclass MembersController extends CrudController\n{\n    /** @var boolean */\n    private $is_self_membership = false;\n\n    // CRUD - Create\n\n    /**\n     * Add page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function add(Request $request, Response $response): Response\n    {\n        return $this->edit($request, $response, null, 'add');\n    }\n\n    /**\n     * Self subscription page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function selfSubscribe(Request $request, Response $response): Response\n    {\n        if (!$this->preferences->pref_bool_selfsubscribe || $this->login->isLogged()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('slash'));\n        }\n\n        if ($this->session->member !== null) {\n            $member = $this->session->member;\n            $this->session->member = null;\n        } else {\n            $deps = [\n                'dynamics'  => true\n            ];\n            $member = new Adherent($this->zdb, null, $deps);\n        }\n\n        //mark as self membership\n        $member->setSelfMembership();\n\n        // flagging required fields\n        $fc = $this->fields_config;\n        $form_elements = $fc->getFormElements($this->login, true, true);\n\n        // members\n        $m = new Members();\n        $members = $m->getSelectizedMembers(\n            $this->zdb,\n            $member->hasParent() ? $member->parent->id : null\n        );\n\n        $params = [\n            'members' => [\n                'filters'   => $m->getFilters(),\n                'count'     => $m->getCount()\n            ]\n        ];\n\n        if (count($members)) {\n            $params['members']['list'] = $members;\n        }\n\n        $gaptcha = new Gaptcha($this->i18n);\n        $this->session->gaptcha = $gaptcha;\n        // display page\n        $this->view->render(\n            $response,\n            'member.tpl',\n            array(\n                'page_title'        => _T(\"Subscription\"),\n                'parent_tpl'        => 'public_page.tpl',\n                'member'            => $member,\n                'self_adh'          => true,\n                'autocomplete'      => true,\n                // pseudo random int\n                'time'              => time(),\n                'titles_list'       => Titles::getList($this->zdb),\n                'fieldsets'         => $form_elements['fieldsets'],\n                'hidden_elements'   => $form_elements['hiddens'],\n                //self_adh specific\n                'gaptcha'           => $gaptcha\n            ) + $params\n        );\n        return $response;\n    }\n\n    /**\n     * Add action\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doAdd(Request $request, Response $response): Response\n    {\n        return $this->store($request, $response);\n    }\n\n    /**\n     * Self subscription add action\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doSelfSubscribe(Request $request, Response $response): Response\n    {\n        $this->setSelfMembership();\n        return $this->doAdd($request, $response);\n    }\n\n\n    /**\n     * Duplicate action\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id_adh   Member ID to duplicate\n     *\n     * @return Response\n     */\n    public function duplicate(Request $request, Response $response, int $id_adh): Response\n    {\n        $adh = new Adherent($this->zdb, $id_adh, ['dynamics' => true, 'parent' => true]);\n        $adh->setDuplicate();\n\n        //store entity in session\n        $this->session->member = $adh;\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('addMember'));\n    }\n\n    // /CRUD - Create\n    // CRUD - Read\n\n    /**\n     * Display member card\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Member ID\n     *\n     * @return Response\n     */\n    public function show(Request $request, Response $response, int $id): Response\n    {\n        $deps = array(\n            'picture'   => true,\n            'groups'    => true,\n            'dues'      => true,\n            'parent'    => true,\n            'children'  => true,\n            'dynamics'  => true\n        );\n        $member = new Adherent($this->zdb, $id, $deps);\n\n        if (!$member->canEdit($this->login)) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"You do not have permission for requested URL.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('me')\n                );\n        }\n\n        if ($member->id == null) {\n            //member does not exists!\n            $this->flash->addMessage(\n                'error_detected',\n                str_replace('%id', $id, _T(\"No member #%id.\"))\n            );\n\n            return $response\n                ->withStatus(404)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('slash')\n                );\n        }\n\n        // flagging fields visibility\n        $fc = $this->fields_config;\n        $display_elements = $fc->getDisplayElements($this->login);\n\n        // display page\n        $this->view->render(\n            $response,\n            'voir_adherent.tpl',\n            array(\n                'page_title'        => _T(\"Member Profile\"),\n                'member'            => $member,\n                'pref_lang'         => $this->i18n->getNameFromId($member->language),\n                'pref_card_self'    => $this->preferences->pref_card_self,\n                'groups'            => Groups::getSimpleList(),\n                'time'              => time(),\n                'display_elements'  => $display_elements\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Own card show\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function showMe(Request $request, Response $response): Response\n    {\n        if ($this->login->isSuperAdmin()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('slash'));\n        }\n        return $this->show($request, $response, $this->login->id);\n    }\n\n    /**\n     * Public pages (trombinoscope, public list)\n     *\n     * @param Request        $request  PSR Request\n     * @param Response       $response PSR Response\n     * @param string         $option   One of 'page' or 'order'\n     * @param string|integer $value    Value of the option\n     * @param string         $type     List type (either list or trombi)\n     *\n     * @return Response\n     */\n    public function publicList(\n        Request $request,\n        Response $response,\n        $option = null,\n        $value = null,\n        $type = null\n    ): Response {\n        $varname = 'public_filter_' . $type;\n        if (isset($this->session->$varname)) {\n            $filters = $this->session->$varname;\n        } else {\n            $filters = new MembersList();\n        }\n\n        if ($option !== null) {\n            switch ($option) {\n                case 'page':\n                    $filters->current_page = (int)$value;\n                    break;\n                case 'order':\n                    $filters->orderby = $value;\n                    break;\n            }\n        }\n\n        $m = new Members($filters);\n        $members = $m->getPublicList($type === 'trombi');\n\n        $this->session->$varname = $filters;\n\n        //assign pagination variables to the template and add pagination links\n        $filters->setSmartyPagination($this->router, $this->view->getSmarty(), false);\n\n        // display page\n        $this->view->render(\n            $response,\n            ($type === 'list' ? 'liste_membres' : 'trombinoscope') . '.tpl',\n            array(\n                'page_title'    => ($type === 'list' ? _T(\"Members list\") : _T('Trombinoscope')),\n                'additionnal_html_class'    => ($type === 'list' ? '' : 'trombinoscope'),\n                'type'          => $type,\n                'members'       => $members,\n                'nb_members'    => $m->getCount(),\n                'filters'       => $filters\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Public pages (trombinoscope, public list)\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $type     Type\n     *\n     * @return Response\n     */\n    public function filterPublicList(Request $request, Response $response, string $type): Response\n    {\n        $post = $request->getParsedBody();\n\n        $varname = 'public_filter_' . $type;\n        if (isset($this->session->$varname)) {\n            $filters = $this->session->$varname;\n        } else {\n            $filters = new MembersList();\n        }\n\n        //reintialize filters\n        if (isset($post['clear_filter'])) {\n            $filters->reinit();\n        } else {\n            //number of rows to show\n            if (isset($post['nbshow'])) {\n                $filters->show = (int)$post['nbshow'];\n            }\n        }\n\n        $this->session->$varname = $filters;\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('publicList', ['type' => $type]));\n    }\n\n    /**\n     * Get a dynamic file\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Member ID\n     * @param integer  $fid      Dynamic fields ID\n     * @param integer  $pos      Dynamic field position\n     * @param string   $name     File name\n     *\n     * @return Response\n     */\n    public function getDynamicFile(\n        Request $request,\n        Response $response,\n        int $id,\n        int $fid,\n        int $pos,\n        string $name\n    ): Response {\n        $deps = array(\n            'picture'   => false,\n            'groups'    => false,\n            'dues'      => false,\n            'parent'    => false,\n            'children'  => false,\n            'dynamics'  => true\n        );\n        $member = new Adherent($this->zdb, $id, $deps);\n\n        $denied = null;\n        if (!$member->canEdit($this->login)) {\n            $fields = $member->getDynamicFields()->getFields();\n            if (!isset($fields[$fid])) {\n                //field does not exists or access is forbidden\n                $denied = true;\n            } else {\n                $denied = false;\n            }\n        }\n\n        if ($denied === true) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"You do not have permission for requested URL.\")\n            );\n\n            return $response\n                ->withStatus(403)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor(\n                        'member',\n                        ['id' => $id]\n                    )\n                );\n        }\n\n        $filename = str_replace(\n            [\n                '%mid',\n                '%fid',\n                '%pos'\n            ],\n            [\n                $id,\n                $fid,\n                $pos\n            ],\n            'member_%mid_field_%fid_value_%pos'\n        );\n\n        if (file_exists(GALETTE_FILES_PATH . $filename)) {\n            $type = File::getMimeType(GALETTE_FILES_PATH . $filename);\n\n            $response = $response->withHeader('Content-Description', 'File Transfer')\n                ->withHeader('Content-Type', $type)\n                ->withHeader('Content-Disposition', 'attachment;filename=\"' . $name . '\"')\n                ->withHeader('Pragma', 'no-cache')\n                ->withHeader('Content-Transfer-Encoding', 'binary')\n                ->withHeader('Expires', '0')\n                ->withHeader('Cache-Control', 'must-revalidate')\n                ->withHeader('Pragma', 'public');\n\n            $stream = fopen('php://memory', 'r+');\n            fwrite($stream, file_get_contents(GALETTE_FILES_PATH . $filename));\n            rewind($stream);\n\n            return $response->withBody(new \\Slim\\Http\\Stream($stream));\n        } else {\n            Analog::log(\n                'A request has been made to get a dynamic file named `' .\n                $filename . '` that does not exists.',\n                Analog::WARNING\n            );\n\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"The file does not exists or cannot be read :(\")\n            );\n\n            return $response\n                ->withStatus(404)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('member', ['id' => $id])\n                );\n        }\n    }\n\n    /**\n     * Members list\n     *\n     * @param Request        $request  PSR Request\n     * @param Response       $response PSR Response\n     * @param string         $option   One of 'page' or 'order'\n     * @param string|integer $value    Value of the option\n     *\n     * @return Response\n     */\n    public function list(Request $request, Response $response, $option = null, $value = null): Response\n    {\n        if (isset($this->session->filter_members)) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        if ($option !== null) {\n            switch ($option) {\n                case 'page':\n                    $filters->current_page = (int)$value;\n                    break;\n                case 'order':\n                    $filters->orderby = $value;\n                    break;\n            }\n        }\n\n        $members = new Members($filters);\n\n        $members_list = array();\n        if ($this->login->isAdmin() || $this->login->isStaff()) {\n            $members_list = $members->getMembersList(true);\n        } else {\n            $members_list = $members->getManagedMembersList(true);\n        }\n\n        $groups = new Groups($this->zdb, $this->login);\n        $groups_list = $groups->getList();\n\n        //assign pagination variables to the template and add pagination links\n        $filters->setSmartyPagination($this->router, $this->view->getSmarty(), false);\n        $filters->setViewCommonsFilters($this->preferences, $this->view->getSmarty());\n\n        $this->session->filter_members = $filters;\n\n        // display page\n        $this->view->render(\n            $response,\n            'gestion_adherents.tpl',\n            array(\n                'page_title'            => _T(\"Members management\"),\n                'require_mass'          => true,\n                'members'               => $members_list,\n                'filter_groups_options' => $groups_list,\n                'nb_members'            => $members->getCount(),\n                'filters'               => $filters,\n                'adv_filters'           => $filters instanceof AdvancedMembersList,\n                'galette_list'          => $this->lists_config->getDisplayElements($this->login)\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Members filtering\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function filter(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        if (isset($this->session->filter_members)) {\n            //CAUTION: this one may be simple or advanced, display must change\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        //reintialize filters\n        if (isset($post['clear_filter'])) {\n            $filters = new MembersList();\n        } elseif (isset($post['clear_adv_filter'])) {\n            $this->session->filter_members = null;\n            unset($this->session->filter_members);\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('advanced-search'));\n        } elseif (isset($post['adv_criteria'])) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('advanced-search'));\n        } else {\n            //string to filter\n            if (isset($post['filter_str'])) { //filter search string\n                $filters->filter_str = stripslashes(\n                    htmlspecialchars($post['filter_str'], ENT_QUOTES)\n                );\n            }\n            //field to filter\n            if (isset($post['field_filter'])) {\n                if (is_numeric($post['field_filter'])) {\n                    $filters->field_filter = $post['field_filter'];\n                }\n            }\n            //membership to filter\n            if (isset($post['membership_filter'])) {\n                if (is_numeric($post['membership_filter'])) {\n                    $filters->membership_filter\n                        = $post['membership_filter'];\n                }\n            }\n            //account status to filter\n            if (isset($post['filter_account'])) {\n                if (is_numeric($post['filter_account'])) {\n                    $filters->filter_account = $post['filter_account'];\n                }\n            }\n            //email filter\n            if (isset($post['email_filter'])) {\n                $filters->email_filter = (int)$post['email_filter'];\n            }\n            //group filter\n            if (\n                isset($post['group_filter'])\n                && $post['group_filter'] > 0\n            ) {\n                $filters->group_filter = (int)$post['group_filter'];\n            }\n            //number of rows to show\n            if (isset($post['nbshow'])) {\n                $filters->show = (int)$post['nbshow'];\n            }\n\n            if (isset($post['advanced_filtering'])) {\n                if (!$filters instanceof AdvancedMembersList) {\n                    $filters = new AdvancedMembersList($filters);\n                }\n                //Advanced filters\n                $filters->reinit();\n                unset($post['advanced_filtering']);\n                $freed = false;\n                foreach ($post as $k => $v) {\n                    if (strpos($k, 'free_', 0) === 0) {\n                        if (!$freed) {\n                            $i = 0;\n                            foreach ($post['free_field'] as $f) {\n                                if (\n                                    trim($f) !== ''\n                                    && trim($post['free_text'][$i]) !== ''\n                                ) {\n                                    $fs_search = htmlspecialchars($post['free_text'][$i], ENT_QUOTES);\n                                    $log_op\n                                        = (int)$post['free_logical_operator'][$i];\n                                    $qry_op\n                                        = (int)$post['free_query_operator'][$i];\n                                    $type = (int)$post['free_type'][$i];\n                                    $fs = array(\n                                        'idx'       => $i,\n                                        'field'     => $f,\n                                        'type'      => $type,\n                                        'search'    => $fs_search,\n                                        'log_op'    => $log_op,\n                                        'qry_op'    => $qry_op\n                                    );\n                                    $filters->free_search = $fs;\n                                }\n                                $i++;\n                            }\n                            $freed = true;\n                        }\n                    } elseif ($k == 'groups_search') {\n                        $i = 0;\n                        $filters->groups_search_log_op = (int)$post['groups_logical_operator'];\n                        foreach ($post['groups_search'] as $g) {\n                            if (trim($g) !== '') {\n                                $gs = array(\n                                    'idx'       => $i,\n                                    'group'     => $g\n                                );\n                                $filters->groups_search = $gs;\n                            }\n                            $i++;\n                        }\n                    } else {\n                        switch ($k) {\n                            case 'contrib_min_amount':\n                            case 'contrib_max_amount':\n                                if (trim($v) !== '') {\n                                    $v = (float)$v;\n                                } else {\n                                    $v = null;\n                                }\n                                break;\n                        }\n                        $filters->$k = $v;\n                    }\n                }\n            }\n        }\n\n        if (isset($post['savesearch'])) {\n            return $response\n                ->withStatus(301)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor(\n                        'saveSearch',\n                        $post\n                    )\n                );\n        }\n\n        $this->session->filter_members = $filters;\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('members'));\n    }\n\n    /**\n     * Advanced search page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function advancedSearch(Request $request, Response $response): Response\n    {\n        if (isset($this->session->filter_members)) {\n            $filters = $this->session->filter_members;\n            if (!$filters instanceof AdvancedMembersList) {\n                $filters = new AdvancedMembersList($filters);\n            }\n        } else {\n            $filters = new AdvancedMembersList();\n        }\n\n        $groups = new Groups($this->zdb, $this->login);\n        $groups_list = $groups->getList();\n\n        //we want only visibles fields\n        $fields = $this->members_fields;\n        $fc = $this->fields_config;\n        $visibles = $fc->getVisibilities();\n        $access_level = $this->login->getAccessLevel();\n\n        //remove not searchable fields\n        unset($fields['mdp_adh']);\n\n        foreach ($fields as $k => $f) {\n            if (\n                $visibles[$k] == FieldsConfig::NOBODY ||\n                ($visibles[$k] == FieldsConfig::ADMIN &&\n                    $access_level < Authentication::ACCESS_ADMIN) ||\n                ($visibles[$k] == FieldsConfig::STAFF &&\n                    $access_level < Authentication::ACCESS_STAFF) ||\n                ($visibles[$k] == FieldsConfig::MANAGER &&\n                    $access_level < Authentication::ACCESS_MANAGER)\n            ) {\n                unset($fields[$k]);\n            }\n        }\n\n        //add status label search\n        if ($pos = array_search(Status::PK, array_keys($fields))) {\n            $fields = array_slice($fields, 0, $pos, true) +\n                ['status_label'  => ['label' => _T('Status label')]] +\n                array_slice($fields, $pos, count($fields) - 1, true);\n        }\n\n        //dynamic fields\n        $deps = array(\n            'picture'   => false,\n            'groups'    => false,\n            'dues'      => false,\n            'parent'    => false,\n            'children'  => false,\n            'dynamics'  => false\n        );\n        $member = new Adherent($this->zdb, $this->login->login, $deps);\n        $adh_dynamics = new DynamicFieldsHandle($this->zdb, $this->login, $member);\n\n        $contrib = new Contribution($this->zdb, $this->login);\n        $contrib_dynamics = new DynamicFieldsHandle($this->zdb, $this->login, $contrib);\n\n        //Status\n        $statuts = new Status($this->zdb);\n\n        //Contributions types\n        $ct = new ContributionsTypes($this->zdb);\n\n        //Payments types\n        $ptypes = new PaymentTypes(\n            $this->zdb,\n            $this->preferences,\n            $this->login\n        );\n        $ptlist = $ptypes->getList();\n\n        $filters->setViewCommonsFilters($this->preferences, $this->view->getSmarty());\n\n        // display page\n        $this->view->render(\n            $response,\n            'advanced_search.tpl',\n            array(\n                'page_title'            => _T(\"Advanced search\"),\n                'filter_groups_options' => $groups_list,\n                'search_fields'         => $fields,\n                'adh_dynamics'          => $adh_dynamics->getFields(),\n                'contrib_dynamics'      => $contrib_dynamics->getFields(),\n                'statuts'               => $statuts->getList(),\n                'contributions_types'   => $ct->getList(),\n                'filters'               => $filters,\n                'payments_types'        => $ptlist\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Members list for ajax\n     *\n     * @param Request        $request  PSR Request\n     * @param Response       $response PSR Response\n     * @param string         $option   One of 'page' or 'order'\n     * @param string|integer $value    Value of the option\n     *\n     * @return Response\n     */\n    public function ajaxList(Request $request, Response $response, string $option = null, $value = null): Response\n    {\n        $post = $request->getParsedBody();\n\n        if (isset($this->session->ajax_members_filters)) {\n            $filters = $this->session->ajax_members_filters;\n        } else {\n            $filters = new MembersList();\n        }\n\n        if ($option == 'page') {\n            $filters->current_page = (int)$value;\n        }\n\n        //numbers of rows to display\n        if (isset($post['nbshow']) && is_numeric($post['nbshow'])) {\n            $filters->show = (int)$post['nbshow'];\n        }\n\n        $members = new Members($filters);\n        if (!$this->login->isAdmin() && !$this->login->isStaff()) {\n            if ($this->login->isGroupManager()) {\n                $members_list = $members->getManagedMembersList(true);\n            } else {\n                Analog::log(\n                    str_replace(\n                        ['%id', '%login'],\n                        [$this->login->id, $this->login->login],\n                        'Trying to list group members without access from #%id (%login)'\n                    ),\n                    Analog::ERROR\n                );\n                throw new \\Exception('Access denied.');\n            }\n        } else {\n            $members_list = $members->getMembersList(true);\n        }\n\n        //assign pagination variables to the template and add pagination links\n        $filters->setSmartyPagination($this->router, $this->view->getSmarty(), false);\n\n        $this->session->ajax_members_filters = $filters;\n\n        $selected_members = null;\n        $unreachables_members = null;\n        if (!isset($post['from'])) {\n            $mailing = $this->session->mailing;\n            if (!isset($post['members'])) {\n                $selected_members = $mailing->recipients;\n                $unreachables_members = $mailing->unreachables;\n            } else {\n                $m = new Members();\n                $selected_members = $m->getArrayList($post['members']);\n                if (isset($post['unreachables']) && is_array($post['unreachables'])) {\n                    $unreachables_members = $m->getArrayList($post['unreachables']);\n                }\n            }\n        } else {\n            switch ($post['from']) {\n                case 'groups':\n                    if (!isset($post['gid'])) {\n                        Analog::log(\n                            'Trying to list group members with no group id provided',\n                            Analog::ERROR\n                        );\n                        throw new \\Exception('A group id is required.');\n                    }\n                    if (!isset($post['members'])) {\n                        $group = new Group((int)$post['gid']);\n                        $selected_members = array();\n                        if (!isset($post['mode']) || $post['mode'] == 'members') {\n                            $selected_members = $group->getMembers();\n                        } elseif ($post['mode'] == 'managers') {\n                            $selected_members = $group->getManagers();\n                        } else {\n                            Analog::log(\n                                'Trying to list group members with unknown mode',\n                                Analog::ERROR\n                            );\n                            throw new \\Exception('Unknown mode.');\n                        }\n                    } else {\n                        $m = new Members();\n                        $selected_members = $m->getArrayList($post['members']);\n                        if (isset($post['unreachables']) && is_array($post['unreachables'])) {\n                            $unreachables_members = $m->getArrayList($post['unreachables']);\n                        }\n                    }\n                    break;\n                case 'attach':\n                    if (!isset($post['id_adh'])) {\n                        throw new \\RuntimeException(\n                            'Current selected member must be excluded while attaching!'\n                        );\n                    }\n                    break;\n            }\n        }\n\n        $params = [\n            'filters'               => $filters,\n            'members_list'          => $members_list,\n            'selected_members'      => $selected_members,\n            'unreachables_members'  => $unreachables_members\n        ];\n\n        if (isset($post['multiple'])) {\n            $params['multiple'] = true;\n        }\n\n        if (isset($post['gid'])) {\n            $params['the_id'] = (int)$post['gid'];\n        }\n\n        if (isset($post['id_adh'])) {\n            $params['excluded'] = (int)$post['id_adh'];\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            'ajax_members.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Batch actions handler\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function handleBatch(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        if (isset($post['member_sel'])) {\n            if (isset($this->session->filter_members)) {\n                $filters = $this->session->filter_members;\n            } else {\n                $filters = new MembersList();\n            }\n\n            $filters->selected = $post['member_sel'];\n            $this->session->filter_members = $filters;\n\n            if (isset($post['cards'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('pdf-members-cards'));\n            }\n\n            if (isset($post['labels'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('pdf-members-labels'));\n            }\n\n            if (isset($post['mailing'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('mailing') . '?mailing_new=new');\n            }\n\n            if (isset($post['attendance_sheet'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('attendance_sheet_details'));\n            }\n\n            if (isset($post['csv'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('csv-memberslist'));\n            }\n\n            if (isset($post['delete'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('removeMembers'));\n            }\n\n            if (isset($post['masschange'])) {\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('masschangeMembers'));\n            }\n\n            throw new \\RuntimeException('Does not know what to batch :(');\n        } else {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"No member was selected, please check at least one name.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n    }\n\n    // /CRUD - Read\n    // CRUD - Update\n\n    /**\n     * Edit page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param mixed    $id       Member id/array of members id\n     * @param string   $action   null or 'add'\n     *\n     * @return Response\n     */\n    public function edit(\n        Request $request,\n        Response $response,\n        $id = null,\n        $action = 'edit'\n    ): Response {\n        $deps = array(\n            'picture'   => true,\n            'groups'    => true,\n            'dues'      => true,\n            'parent'    => true,\n            'children'  => true,\n            'dynamics'  => true\n        );\n\n        if ($this->session->member !== null) {\n            $member = $this->session->member;\n            $this->session->member = null;\n        } else {\n            $member = new Adherent($this->zdb, $id, $deps);\n        }\n\n        if ($id !== null) {\n            $member->load($id);\n            if (!$member->canEdit($this->login)) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"You do not have permission for requested URL.\")\n                );\n\n                return $response\n                    ->withStatus(403)\n                    ->withHeader(\n                        'Location',\n                        $this->router->pathFor('me')\n                    );\n            }\n        } else {\n            if ($member->id != $id) {\n                $member->load($this->login->id);\n            }\n        }\n\n        // flagging required fields\n        $fc = $this->fields_config;\n\n        // password required if we create a new member\n        if ($member->id != '') {\n            $fc->setNotRequired('mdp_adh');\n        }\n\n        //handle requirements for parent fields\n        $parent_fields = $member->getParentFields();\n        $tpl_parent_fields = []; //for JS when detaching\n        foreach ($parent_fields as $field) {\n            if ($fc->isRequired($field)) {\n                $tpl_parent_fields[] = $field;\n                if ($member->hasParent()) {\n                    $fc->setNotRequired($field);\n                }\n            }\n        }\n\n        // flagging required fields invisible to members\n        if ($this->login->isAdmin() || $this->login->isStaff()) {\n            $fc->setNotRequired('activite_adh');\n            $fc->setNotRequired('id_statut');\n        }\n\n        // template variable declaration\n        $title = _T(\"Member Profile\");\n        if ($member->id != '') {\n            $title .= ' (' . _T(\"modification\") . ')';\n        } else {\n            $title .= ' (' . _T(\"creation\") . ')';\n        }\n\n        //Status\n        $statuts = new Status($this->zdb);\n\n        //Groups\n        $groups = new Groups($this->zdb, $this->login);\n        $groups_list = $groups->getSimpleList(true);\n\n        $form_elements = $fc->getFormElements(\n            $this->login,\n            $member->id == ''\n        );\n\n        // members\n        $m = new Members();\n        $id = null;\n        if ($member->hasParent()) {\n            $id = ($member->parent instanceof Adherent ? $member->parent->id : $member->parent);\n        }\n        $members = $m->getSelectizedMembers(\n            $this->zdb,\n            $id\n        );\n\n        $route_params['members'] = [\n            'filters'   => $m->getFilters(),\n            'count'     => $m->getCount()\n        ];\n\n        if (count($members)) {\n            $route_params['members']['list'] = $members;\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            'member.tpl',\n            array(\n                'parent_tpl'        => 'page.tpl',\n                'autocomplete'      => true,\n                'page_title'        => $title,\n                'member'            => $member,\n                'self_adh'          => false,\n                // pseudo random int\n                'time'              => time(),\n                'titles_list'       => Titles::getList($this->zdb),\n                'statuts'           => $statuts->getList(),\n                'groups'            => $groups_list,\n                'fieldsets'         => $form_elements['fieldsets'],\n                'hidden_elements'   => $form_elements['hiddens'],\n                'parent_fields'     => $tpl_parent_fields\n            ) + $route_params\n        );\n        return $response;\n    }\n\n    /**\n     * Edit action\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Member id\n     *\n     * @return Response\n     */\n    public function doEdit(Request $request, Response $response, int $id): Response\n    {\n        return $this->store($request, $response);\n    }\n\n    /**\n     * Massive change page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function massChange(Request $request, Response $response): Response\n    {\n        $filters = $this->session->filter_members;\n\n        $data = [\n            'id'            => $filters->selected,\n            'redirect_uri'  => $this->router->pathFor('members')\n        ];\n\n        $fc = $this->fields_config;\n        $form_elements = $fc->getMassiveFormElements($this->members_fields, $this->login);\n\n        //dynamic fields\n        $deps = array(\n            'picture'   => false,\n            'groups'    => false,\n            'dues'      => false,\n            'parent'    => false,\n            'children'  => false,\n            'dynamics'  => false\n        );\n        $member = new Adherent($this->zdb, null, $deps);\n\n        //Status\n        $statuts = new Status($this->zdb);\n\n        // display page\n        $this->view->render(\n            $response,\n            'mass_change_members.tpl',\n            array(\n                'mode'          => $request->isXhr() ? 'ajax' : '',\n                'page_title'    => str_replace(\n                    '%count',\n                    count($data['id']),\n                    _T('Mass change %count members')\n                ),\n                'form_url'      => $this->router->pathFor('masschangeMembersReview'),\n                'cancel_uri'    => $this->router->pathFor('members'),\n                'data'          => $data,\n                'member'        => $member,\n                'fieldsets'     => $form_elements['fieldsets'],\n                'titles_list'   => Titles::getList($this->zdb),\n                'statuts'       => $statuts->getList(),\n                'require_mass'  => true\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Massive changes validation page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function validateMassChange(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        if (!isset($post['confirm'])) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Mass changes has not been confirmed!\")\n            );\n        } else {\n            //we want only visibles fields\n            $fc = $this->fields_config;\n            $form_elements = $fc->getMassiveFormElements($this->members_fields, $this->login);\n\n            $changes = [];\n            foreach ($form_elements['fieldsets'] as $form_element) {\n                foreach ($form_element->elements as $field) {\n                    if (\n                        isset($post['mass_' . $field->field_id])\n                        && (isset($post[$field->field_id]) || $field->type === FieldsConfig::TYPE_BOOL)\n                    ) {\n                        $changes[$field->field_id] = [\n                            'label' => $field->label,\n                            'value' => $post[$field->field_id] ?? 0\n                        ];\n                    }\n                }\n            }\n        }\n\n        $filters = $this->session->filter_members;\n        $data = [\n            'id'            => $filters->selected,\n            'redirect_uri'  => $this->router->pathFor('members')\n        ];\n\n        //Status\n        $statuts = new Status($this->zdb);\n\n        // display page\n        $this->view->render(\n            $response,\n            'mass_change_members.tpl',\n            array(\n                'mode'          => $request->isXhr() ? 'ajax' : '',\n                'page_title'    => str_replace(\n                    '%count',\n                    count($data['id']),\n                    _T('Review mass change %count members')\n                ),\n                'form_url'      => $this->router->pathFor('massstoremembers'),\n                'cancel_uri'    => $this->router->pathFor('members'),\n                'data'          => $data,\n                'titles_list'   => Titles::getList($this->zdb),\n                'statuts'       => $statuts->getList(),\n                'changes'       => $changes\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Do massive changes\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doMassChange(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $redirect_url = $post['redirect_uri'];\n        $error_detected = [];\n        $mass = 0;\n\n        unset($post['redirect_uri']);\n        if (!isset($post['confirm'])) {\n            $error_detected[] = _T(\"Mass changes has not been confirmed!\");\n        } else {\n            unset($post['confirm']);\n            $ids = $post['id'];\n            unset($post['id']);\n\n            $fc = $this->fields_config;\n            $form_elements = $fc->getMassiveFormElements($this->members_fields, $this->login);\n            $disabled = $this->members_fields;\n            foreach (array_keys($post) as $key) {\n                $found = false;\n                foreach ($form_elements['fieldsets'] as $fieldset) {\n                    if (isset($fieldset->elements[$key])) {\n                        $found = true;\n                        continue;\n                    }\n                }\n                if (!$found) {\n                    Analog::log(\n                        'Permission issue mass editing field ' . $key,\n                        Analog::WARNING\n                    );\n                    unset($post[$key]);\n                } else {\n                    unset($disabled[$key]);\n                }\n            }\n\n            if (!count($post)) {\n                $error_detected[] = _T(\"Nothing to do!\");\n            } else {\n                foreach ($ids as $id) {\n                    $is_manager = !$this->login->isAdmin()\n                        && !$this->login->isStaff()\n                        && $this->login->isGroupManager();\n                    $deps = array(\n                        'picture'   => false,\n                        'groups'    => $is_manager,\n                        'dues'      => false,\n                        'parent'    => false,\n                        'children'  => false,\n                        'dynamics'  => false\n                    );\n                    $member = new Adherent($this->zdb, (int)$id, $deps);\n                    $member->setDependencies(\n                        $this->preferences,\n                        $this->members_fields,\n                        $this->history\n                    );\n                    if (!$member->canEdit($this->login)) {\n                        continue;\n                    }\n\n                    $valid = $member->check($post, [], $disabled);\n                    if ($valid === true) {\n                        $done = $member->store();\n                        if (!$done) {\n                            $error_detected[] = _T(\"An error occurred while storing the member.\");\n                        } else {\n                            ++$mass;\n                        }\n                    } else {\n                        $error_detected = array_merge($error_detected, $valid);\n                    }\n                }\n            }\n        }\n\n        if ($mass == 0 && !count($error_detected)) {\n            $error_detected[] = _T('Something went wront during mass edition!');\n        } else {\n            $this->flash->addMessage(\n                'success_detected',\n                str_replace(\n                    '%count',\n                    $mass,\n                    _T('%count members has been changed successfully!')\n                )\n            );\n        }\n\n        if (count($error_detected) > 0) {\n            foreach ($error_detected as $error) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    $error\n                );\n            }\n        }\n\n        if (!$request->isXhr()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $redirect_url);\n        } else {\n            return $response->withJson(\n                [\n                    'success'   => count($error_detected) === 0\n                ]\n            );\n        }\n    }\n\n    /**\n     * Store\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function store(Request $request, Response $response): Response\n    {\n        if (!$this->preferences->pref_bool_selfsubscribe && !$this->login->isLogged()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('slash'));\n        }\n\n        $post = $request->getParsedBody();\n        $deps = array(\n            'picture'   => true,\n            'groups'    => true,\n            'dues'      => true,\n            'parent'    => true,\n            'children'  => true,\n            'dynamics'  => true\n        );\n        $member = new Adherent($this->zdb, null, $deps);\n        $member->setDependencies(\n            $this->preferences,\n            $this->members_fields,\n            $this->history\n        );\n\n        $success_detected = [];\n        $warning_detected = [];\n        $error_detected = [];\n\n        if ($this->isSelfMembership() && !isset($post[Adherent::PK])) {\n            //mark as self membership\n            $member->setSelfMembership();\n\n            //check captcha\n            $gaptcha = $this->session->gaptcha;\n            if (!$gaptcha->check($post['gaptcha'])) {\n                $error_detected[] = _T('Invalid captcha');\n            }\n        }\n\n        // new or edit\n        if ($this->login->isAdmin() || $this->login->isStaff() || $this->login->isGroupManager()) {\n            if (isset($post['id_adh'])) {\n                $member->load((int)$post['id_adh']);\n                if (!$member->canEdit($this->login)) {\n                    //redirection should have been done before. Just throw an Exception.\n                    throw new \\RuntimeException(\n                        str_replace(\n                            '%id',\n                            $member->id,\n                            'No right to store member #%id'\n                        )\n                    );\n                }\n            }\n        } else {\n            $member->load($this->login->id);\n        }\n\n        // flagging required fields\n        $fc = $this->fields_config;\n\n        // password required if we create a new member but not from self subscription\n        if ($member->id != '' || $this->isSelfMembership()) {\n            $fc->setNotRequired('mdp_adh');\n        }\n\n        if (\n            $member->hasParent() && !isset($post['detach_parent'])\n            || isset($post['parent_id']) && !empty($post['parent_id'])\n        ) {\n            $parent_fields = $member->getParentFields();\n            foreach ($parent_fields as $field) {\n                if ($fc->isRequired($field)) {\n                    $fc->setNotRequired($field);\n                }\n            }\n        }\n\n        // flagging required fields invisible to members\n        if ($this->login->isAdmin() || $this->login->isStaff()) {\n            $fc->setNotRequired('activite_adh');\n            $fc->setNotRequired('id_statut');\n        }\n\n        $form_elements = $fc->getFormElements(\n            $this->login,\n            $member->id == '',\n            $this->isSelfMembership()\n        );\n        $fieldsets     = $form_elements['fieldsets'];\n        $required      = array();\n        $disabled      = array();\n\n        foreach ($fieldsets as $category) {\n            foreach ($category->elements as $field) {\n                if ($field->required == true) {\n                    $required[$field->field_id] = true;\n                }\n                if ($field->disabled == true) {\n                    $disabled[$field->field_id] = true;\n                } elseif (!isset($post[$field->field_id])) {\n                    switch ($field->field_id) {\n                        //unchecked booleans are not sent from form\n                        case 'bool_admin_adh':\n                        case 'bool_exempt_adh':\n                        case 'bool_display_info':\n                            $post[$field->field_id] = 0;\n                            break;\n                    }\n                }\n            }\n        }\n\n        $real_requireds = array_diff(array_keys($required), array_keys($disabled));\n\n        // Validation\n        $redirect_url = $this->router->pathFor('member', ['id' => $member->id]);\n        if (!count($real_requireds) || isset($post[array_shift($real_requireds)])) {\n            // regular fields\n            $valid = $member->check($post, $required, $disabled);\n            if ($valid !== true) {\n                $error_detected = array_merge($error_detected, $valid);\n            }\n\n            if (count($error_detected) == 0) {\n                //all goes well, we can proceed\n\n                $new = false;\n                if ($member->id == '') {\n                    $new = true;\n                }\n\n                // send email to member\n                if ($this->isSelfMembership() || isset($post['mail_confirm']) && $post['mail_confirm'] == '1') {\n                    $member->setSendmail(); //flag to send creation email\n                }\n\n                $store = $member->store();\n                if ($store === true) {\n                    //member has been stored :)\n                    if ($new) {\n                        if ($this->isSelfMembership()) {\n                            $success_detected[] = _T(\"Your account has been created!\");\n                            if (\n                                $this->preferences->pref_mail_method > GaletteMail::METHOD_DISABLED\n                                && $member->getEmail() != ''\n                            ) {\n                                $success_detected[] = _T(\"An email has been sent to you, check your inbox.\");\n                            }\n                        } else {\n                            $success_detected[] = _T(\"New member has been successfully added.\");\n                        }\n                    } else {\n                        $success_detected[] = _T(\"Member account has been modified.\");\n                    }\n\n                    //store requested groups\n                    $groups_adh = $post['groups_adh'] ?? null;\n                    $managed_groups_adh = $post['groups_managed_adh'] ?? null;\n\n                    //add/remove user from groups\n                    $add_groups = Groups::addMemberToGroups(\n                        $member,\n                        $groups_adh\n                    );\n\n                    if ($add_groups === false) {\n                        $error_detected[] = _T(\"An error occurred adding member to its groups.\");\n                    }\n\n                    //add/remove manager from groups\n                    $add_groups = Groups::addMemberToGroups(\n                        $member,\n                        $managed_groups_adh,\n                        true\n                    );\n                    $member->loadGroups();\n\n                    if ($add_groups === false) {\n                        $error_detected[] = _T(\"An error occurred adding member to its groups as manager.\");\n                    }\n                } else {\n                    //something went wrong :'(\n                    $error_detected[] = _T(\"An error occurred while storing the member.\");\n                }\n            }\n\n            if (count($error_detected) === 0) {\n                $files_res = $member->handleFiles($_FILES);\n                if (is_array($files_res)) {\n                    $error_detected = array_merge($error_detected, $files_res);\n                }\n\n                if (isset($post['del_photo'])) {\n                    if (!$member->picture->delete($member->id)) {\n                        $error_detected[] = _T(\"Delete failed\");\n                        $str_adh = $member->id . ' (' . $member->sname . ' ' . ')';\n                        Analog::log(\n                            'Unable to delete picture for member ' . $str_adh,\n                            Analog::ERROR\n                        );\n                    }\n                }\n            }\n\n            if (count($error_detected) > 0) {\n                foreach ($error_detected as $error) {\n                    if (strpos($error, '%member_url_') !== false) {\n                        preg_match('/%member_url_(\\d+)/', $error, $matches);\n                        $url = $this->router->pathFor('member', ['id' => $matches[1]]);\n                        $error = str_replace(\n                            '%member_url_' . $matches[1],\n                            $url,\n                            $error\n                        );\n                    }\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $error\n                    );\n                }\n            }\n\n            if (count($warning_detected) > 0) {\n                foreach ($warning_detected as $warning) {\n                    $this->flash->addMessage(\n                        'warning_detected',\n                        $warning\n                    );\n                }\n            }\n            if (count($success_detected) > 0) {\n                foreach ($success_detected as $success) {\n                    $this->flash->addMessage(\n                        'success_detected',\n                        $success\n                    );\n                }\n            }\n\n            if (count($error_detected) === 0) {\n                if ($this->isSelfMembership()) {\n                    $redirect_url = $this->router->pathFor('login');\n                } elseif (\n                    isset($post['redirect_on_create'])\n                    && $post['redirect_on_create'] > Adherent::AFTER_ADD_DEFAULT\n                ) {\n                    switch ($post['redirect_on_create']) {\n                        case Adherent::AFTER_ADD_TRANS:\n                            $redirect_url = $this->router->pathFor('addTransaction');\n                            break;\n                        case Adherent::AFTER_ADD_NEW:\n                            $redirect_url = $this->router->pathFor('addMember');\n                            break;\n                        case Adherent::AFTER_ADD_SHOW:\n                            $redirect_url = $this->router->pathFor('member', ['id' => $member->id]);\n                            break;\n                        case Adherent::AFTER_ADD_LIST:\n                            $redirect_url = $this->router->pathFor('members');\n                            break;\n                        case Adherent::AFTER_ADD_HOME:\n                            $redirect_url = $this->router->pathFor('slash');\n                            break;\n                    }\n                } elseif (!isset($post['id_adh']) && !$member->isDueFree()) {\n                    $redirect_url = $this->router->pathFor(\n                        'addContribution',\n                        ['type' => 'fee']\n                    ) . '?id_adh=' . $member->id;\n                } else {\n                    $redirect_url = $this->router->pathFor('member', ['id' => $member->id]);\n                }\n            } else {\n                //store entity in session\n                $this->session->member = $member;\n\n                if ($this->isSelfMembership()) {\n                    $redirect_url = $this->router->pathFor('subscribe');\n                } else {\n                    if ($member->id) {\n                        $redirect_url = $this->router->pathFor(\n                            'editMember',\n                            ['id'    => $member->id]\n                        );\n                    } else {\n                        $redirect_url = $this->router->pathFor('addMember');\n                    }\n                }\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $redirect_url);\n    }\n\n\n    // /CRUD - Update\n    // CRUD - Delete\n\n    /**\n     * Get redirection URI\n     *\n     * @param array $args Route arguments\n     *\n     * @return string\n     */\n    public function redirectUri(array $args)\n    {\n        return $this->router->pathFor('members');\n    }\n\n    /**\n     * Get form URI\n     *\n     * @param array $args Route arguments\n     *\n     * @return string\n     */\n    public function formUri(array $args)\n    {\n        return $this->router->pathFor(\n            'doRemoveMember',\n            $args\n        );\n    }\n\n\n    /**\n     * Get ID to remove\n     *\n     * In simple cases, we get the ID in the route arguments; but for\n     * batchs, it should be found elsewhere.\n     * In post values, we look for id key, as well as all {sthing}_sel keys (like members_sel or contrib_sel)\n     *\n     * @param array $args Request arguments\n     * @param array $post POST values\n     *\n     * @return null|integer|integer[]\n     */\n    protected function getIdsToRemove(&$args, $post)\n    {\n        if (isset($args['id'])) {\n            return $args['id'];\n        } else {\n            $filters = $this->session->filter_members;\n            return $filters->selected;\n        }\n    }\n\n    /**\n     * Get confirmation removal page title\n     *\n     * @param array $args Route arguments\n     *\n     * @return string\n     */\n    public function confirmRemoveTitle(array $args)\n    {\n        if (isset($args['id_adh']) || isset($args['id'])) {\n            //one member removal\n            $id_adh = $args['id_adh'] ?? $args['id'];\n            $adh = new Adherent($this->zdb, (int)$id_adh);\n            return sprintf(\n                _T('Remove member %1$s'),\n                $adh->sfullname\n            );\n        } else {\n            //batch members removal\n            $filters = $this->session->filter_members;\n            return str_replace(\n                '%count',\n                count($filters->selected),\n                _T('You are about to remove %count members.')\n            );\n        }\n    }\n\n    /**\n     * Remove object\n     *\n     * @param array $args Route arguments\n     * @param array $post POST values\n     *\n     * @return boolean\n     */\n    protected function doDelete(array $args, array $post)\n    {\n        if (isset($this->session->filter_members)) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n        $members = new Members($filters);\n\n        if (!is_array($post['id'])) {\n            $ids = (array)$post['id'];\n        } else {\n            $ids = $post['id'];\n        }\n\n        return $members->removeMembers($ids);\n    }\n\n    // CRUD - Delete\n\n    /**\n     * Set self memebrship flag\n     *\n     * @return MembersController\n     */\n    private function setSelfMembership(): MembersController\n    {\n        $this->is_self_membership = true;\n        return $this;\n    }\n\n    /**\n     * Is self membership?\n     *\n     * @return boolean\n     */\n    private function isSelfMembership(): bool\n    {\n        return $this->is_self_membership;\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette dynamic translations controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Controllers\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Throwable;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\L10n;\nuse Analog\\Analog;\n\n/**\n * Galette dynamic translations controller\n *\n * @category  Controllers\n * @name      DynamicTranslationsController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nclass DynamicTranslationsController extends AbstractController\n{\n    /**\n     * Dynamic fields translations\n     *\n     * @param Request  $request   PSR Request\n     * @param Response $response  PSR Response\n     * @param string   $text_orig Original translatext\n     *\n     * @return Response\n     */\n    public function dynamicTranslations(Request $request, Response $response, string $text_orig = null): Response\n    {\n        if ($text_orig == null && isset($_GET['text_orig'])) {\n            $text_orig = $_GET['text_orig'];\n        }\n\n        $params = [\n            'page_title'    => _T(\"Translate labels\")\n        ];\n\n        $nb_fields = 0;\n        try {\n            $select = $this->zdb->select(L10n::TABLE);\n            $select->columns(\n                array('nb' => new \\Laminas\\Db\\Sql\\Expression('COUNT(text_orig)'))\n            );\n            $results = $this->zdb->execute($select);\n            $result = $results->current();\n            $nb_fields = $result->nb;\n        } catch (Throwable $e) {\n            Analog::log(\n                'An error occurred counting l10n entries | ' .\n                $e->getMessage(),\n                Analog::WARNING\n            );\n        }\n\n        if (is_numeric($nb_fields) && $nb_fields > 0) {\n            try {\n                $select = $this->zdb->select(L10n::TABLE);\n                $select->quantifier('DISTINCT')->columns(\n                    array('text_orig')\n                )->order('text_orig');\n\n                $all_texts = $this->zdb->execute($select);\n\n                $orig = array();\n                foreach ($all_texts as $idx => $row) {\n                    $orig[] = $row->text_orig;\n                }\n                $exists = true;\n                if ($text_orig == '') {\n                    $text_orig = $orig[0];\n                } elseif (!in_array($text_orig, $orig)) {\n                    $exists = false;\n                    $this->flash->addMessage(\n                        'error_detected',\n                        str_replace(\n                            '%s',\n                            $text_orig,\n                            _T(\"No translation for '%s'!<br/>Please fill and submit above form to create it.\")\n                        )\n                    );\n                }\n\n                $trans = array();\n                /**\n                 * FIXME : it would be faster to get all translations at once\n                 * for a specific string\n                 */\n                foreach ($this->i18n->getList() as $l) {\n                    $text_trans = $this->l10n->getDynamicTranslation($text_orig, $l->getLongID());\n                    $lang_name = $l->getName();\n                    $trans[] = array(\n                        'key'  => $l->getLongID(),\n                        'name' => ucwords($lang_name),\n                        'text' => $text_trans\n                    );\n                }\n\n                $params['exists'] = $exists;\n                $params['orig'] = $orig;\n                $params['trans'] = $trans;\n            } catch (Throwable $e) {\n                Analog::log(\n                    'An error occurred retrieving l10n entries | ' .\n                    $e->getMessage(),\n                    Analog::WARNING\n                );\n            }\n        }\n\n        $params['text_orig'] = $text_orig;\n\n        // display page\n        $this->view->render(\n            $response,\n            'traduire_libelles.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Do dynamic fields translations\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doDynamicTranslations(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $post['text_orig'] = htmlspecialchars($post['text_orig'], ENT_QUOTES);\n        $error_detected = [];\n\n        if (isset($post['trans']) && isset($post['text_orig'])) {\n            if (isset($post['new']) && $post['new'] == 'true') {\n                //create translation if it does not exists yet\n                $res = $this->l10n->addDynamicTranslation(\n                    $post['text_orig']\n                );\n                if (!$res) {\n                    $error_detected[] = preg_replace(\n                        array(\n                            '/%label/',\n                            '/%lang/'\n                        ),\n                        array(\n                            $post['text_orig'],\n                            $this->i18n->getLongID()\n                        ),\n                        _T(\"An error occurred saving label `%label` for language `%lang`\")\n                    );\n                }\n            }\n\n            // Validate form\n            foreach ($post as $key => $value) {\n                if (substr($key, 0, 11) == 'text_trans_') {\n                    $trans_lang = substr($key, 11);\n                    $trans_lang = str_replace('_utf8', '.utf8', $trans_lang);\n                    $res = $this->l10n->updateDynamicTranslation(\n                        $post['text_orig'],\n                        $trans_lang,\n                        $value\n                    );\n                    if (!$res) {\n                        $error_detected[] = preg_replace(\n                            array(\n                                '/%label/',\n                                '/%lang/'\n                            ),\n                            array(\n                                $post['text_orig'],\n                                $trans_lang\n                            ),\n                            _T(\"An error occurred saving label `%label` for language `%lang`\")\n                        );\n                    }\n                }\n            }\n\n            if (count($error_detected)) {\n                foreach ($error_detected as $err) {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $err\n                    );\n                }\n            } else {\n                $this->flash->addMessage(\n                    'success_detected',\n                    _T(\"Labels has been sucessfully translated!\")\n                );\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor(\n                'dynamicTranslations',\n                ['text_orig' => $post['text_orig']]\n            ));\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette main controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2019-2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Entity\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\Logo;\nuse Galette\\Core\\PrintLogo;\nuse Galette\\Core\\GaletteMail;\nuse Galette\\Core\\SysInfos;\nuse Galette\\Entity\\Contribution;\nuse Galette\\Entity\\FieldsCategories;\nuse Galette\\Entity\\Status;\nuse Galette\\Entity\\Texts;\nuse Galette\\Filters\\MembersList;\nuse Galette\\IO\\News;\nuse Galette\\IO\\Charts;\nuse Galette\\IO\\PdfMembersCards;\nuse Galette\\IO\\PdfContribution;\nuse Galette\\Repository\\Members;\nuse Galette\\Repository\\Reminders;\nuse Analog\\Analog;\n\n/**\n * Galette main controller\n *\n * @category  Controllers\n * @name      GaletteController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019-2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-02\n */\n\nclass GaletteController extends AbstractController\n{\n    /**\n     * Main route\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function slash(Request $request, Response $response): Response\n    {\n        return $this->galetteRedirect($request, $response);\n    }\n\n    /**\n     * System information\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function systemInformation(Request $request, Response $response): Response\n    {\n        $sysinfos = new SysInfos();\n        $raw_infos = $sysinfos->getRawData(\n            $this->zdb,\n            $this->preferences,\n            $this->plugins\n        );\n\n        // display page\n        $this->view->render(\n            $response,\n            'sysinfos.tpl',\n            array(\n                'page_title'    => _T(\"System information\"),\n                'rawinfos'      => $raw_infos\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Dashboard page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function dashboard(Request $request, Response $response): Response\n    {\n        $news = new News($this->preferences->pref_rss_url);\n\n        $params = [\n            'page_title'        => _T(\"Dashboard\"),\n            'contentcls'        => 'desktop',\n            'news'              => $news->getPosts(),\n            'show_dashboard'    => $_COOKIE['show_galette_dashboard']\n        ];\n\n        $hide_telemetry = true;\n        if ($this->login->isAdmin()) {\n            $telemetry = new \\Galette\\Util\\Telemetry(\n                $this->zdb,\n                $this->preferences,\n                $this->plugins\n            );\n            $params['reguuid'] = $telemetry->getRegistrationUuid();\n            $params['telemetry_sent'] = $telemetry->isSent();\n            $params['registered'] = $telemetry->isRegistered();\n\n            $hide_telemetry = $telemetry->isSent() && $telemetry->isRegistered()\n                || isset($_COOKIE['hide_galette_telemetry']) && $_COOKIE['hide_galette_telemetry'];\n        }\n        $params['hide_telemetry'] = $hide_telemetry;\n\n        // display page\n        $this->view->render(\n            $response,\n            'desktop.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Preferences page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function preferences(Request $request, Response $response): Response\n    {\n        // flagging required fields\n        $required = array(\n            'pref_nom'              => 1,\n            'pref_lang'             => 1,\n            'pref_numrows'          => 1,\n            'pref_log'              => 1,\n            'pref_statut'           => 1,\n            'pref_etiq_marges_v'    => 1,\n            'pref_etiq_marges_h'    => 1,\n            'pref_etiq_hspace'      => 1,\n            'pref_etiq_vspace'      => 1,\n            'pref_etiq_hsize'       => 1,\n            'pref_etiq_vsize'       => 1,\n            'pref_etiq_cols'        => 1,\n            'pref_etiq_rows'        => 1,\n            'pref_etiq_corps'       => 1,\n            'pref_card_abrev'       => 1,\n            'pref_card_strip'       => 1,\n            'pref_card_marges_v'    => 1,\n            'pref_card_marges_h'    => 1,\n            'pref_card_hspace'      => 1,\n            'pref_card_vspace'      => 1\n        );\n\n        if ($this->login->isSuperAdmin() && GALETTE_MODE !== 'DEMO') {\n            $required['pref_admin_login'] = 1;\n        }\n\n        $prefs_fields = $this->preferences->getFieldsNames();\n        // collect data\n        foreach ($prefs_fields as $fieldname) {\n            $pref[$fieldname] = $this->preferences->$fieldname;\n        }\n\n        //on error, user values are stored into session\n        if ($this->session->entered_preferences) {\n            $pref = array_merge($pref, $this->session->entered_preferences);\n            $this->session->entered_preferences = null;\n        }\n\n        //List available themes\n        $themes = array();\n        $d = dir(GALETTE_THEMES_PATH);\n        while (($entry = $d->read()) !== false) {\n            $full_entry = GALETTE_THEMES_PATH . $entry;\n            if (\n                $entry != '.'\n                && $entry != '..'\n                && is_dir($full_entry)\n                && file_exists($full_entry . '/page.tpl')\n            ) {\n                $themes[] = $entry;\n            }\n        }\n        $d->close();\n\n        $m = new Members();\n        $s = new Status($this->zdb);\n\n        // display page\n        $this->view->render(\n            $response,\n            'preferences.tpl',\n            array(\n                'page_title'            => _T(\"Settings\"),\n                'staff_members'         => $m->getStaffMembersList(true),\n                'time'                  => time(),\n                'pref'                  => $pref,\n                'pref_numrows_options'  => array(\n                    10 => '10',\n                    20 => '20',\n                    50 => '50',\n                    100 => '100'\n                ),\n                'print_logo'            => $this->print_logo,\n                'required'              => $required,\n                'themes'                => $themes,\n                'statuts'               => $s->getList(),\n                'accounts_options'      => array(\n                    Members::ALL_ACCOUNTS       => _T(\"All accounts\"),\n                    Members::ACTIVE_ACCOUNT     => _T(\"Active accounts\"),\n                    Members::INACTIVE_ACCOUNT   => _T(\"Inactive accounts\")\n                )\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Store preferences\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function storePreferences(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $error_detected = [];\n        $warning_detected = [];\n\n        // Validation\n        if (isset($post['valid']) && $post['valid'] == '1') {\n            if ($this->preferences->check($post, $this->login)) {\n                if (!$this->preferences->store()) {\n                    $error_detected[] = _T(\"An SQL error has occurred while storing preferences. Please try again, and contact the administrator if the problem persists.\");\n                } else {\n                    $this->flash->addMessage(\n                        'success_detected',\n                        _T(\"Preferences has been saved.\")\n                    );\n                }\n                $warning_detected = array_merge($warning_detected, $this->preferences->checkCardsSizes());\n\n                // picture upload\n                if (GALETTE_MODE !== 'DEMO' && isset($_FILES['logo'])) {\n                    if ($_FILES['logo']['error'] === UPLOAD_ERR_OK) {\n                        if ($_FILES['logo']['tmp_name'] != '') {\n                            if (is_uploaded_file($_FILES['logo']['tmp_name'])) {\n                                $res = $this->logo->store($_FILES['logo']);\n                                if ($res < 0) {\n                                    $error_detected[] = $this->logo->getErrorMessage($res);\n                                } else {\n                                    $this->logo = new Logo();\n                                }\n                            }\n                        }\n                    } elseif ($_FILES['logo']['error'] !== UPLOAD_ERR_NO_FILE) {\n                        Analog::log(\n                            $this->logo->getPhpErrorMessage($_FILES['logo']['error']),\n                            Analog::WARNING\n                        );\n                        $error_detected[] = $this->logo->getPhpErrorMessage(\n                            $_FILES['logo']['error']\n                        );\n                    }\n                }\n\n                if (GALETTE_MODE !== 'DEMO' && isset($post['del_logo'])) {\n                    if (!$this->logo->delete()) {\n                        $error_detected[] = _T(\"Delete failed\");\n                    } else {\n                        $this->logo = new Logo(); //get default Logo\n                    }\n                }\n\n                // Card logo upload\n                if (GALETTE_MODE !== 'DEMO' && isset($_FILES['card_logo'])) {\n                    if ($_FILES['card_logo']['error'] === UPLOAD_ERR_OK) {\n                        if ($_FILES['card_logo']['tmp_name'] != '') {\n                            if (is_uploaded_file($_FILES['card_logo']['tmp_name'])) {\n                                $res = $this->print_logo->store($_FILES['card_logo']);\n                                if ($res < 0) {\n                                    $error_detected[] = $this->print_logo->getErrorMessage($res);\n                                } else {\n                                    $this->print_logo = new PrintLogo();\n                                }\n                            }\n                        }\n                    } elseif ($_FILES['card_logo']['error'] !== UPLOAD_ERR_NO_FILE) {\n                        Analog::log(\n                            $this->print_logo->getPhpErrorMessage($_FILES['card_logo']['error']),\n                            Analog::WARNING\n                        );\n                        $error_detected[] = $this->print_logo->getPhpErrorMessage(\n                            $_FILES['card_logo']['error']\n                        );\n                    }\n                }\n\n                if (GALETTE_MODE !== 'DEMO' && isset($post['del_card_logo'])) {\n                    if (!$this->print_logo->delete()) {\n                        $error_detected[] = _T(\"Delete failed\");\n                    } else {\n                        $this->print_logo = new PrintLogo();\n                    }\n                }\n            } else {\n                $error_detected = $this->preferences->getErrors();\n            }\n\n            if (count($error_detected) > 0) {\n                $this->session->entered_preferences = $post;\n                //report errors\n                foreach ($error_detected as $error) {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $error\n                    );\n                }\n            }\n\n            if (count($warning_detected) > 0) {\n                //report warnings\n                foreach ($warning_detected as $warning) {\n                    $this->flash->addMessage(\n                        'warning_detected',\n                        $warning\n                    );\n                }\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('preferences'));\n    }\n\n    /**\n     * Test mail parameters\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function testEmail(Request $request, Response $response): Response\n    {\n        $sent = false;\n        if (!$this->preferences->pref_mail_method > GaletteMail::METHOD_DISABLED) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"You asked Galette to send a test email, but email has been disabled in the preferences.\")\n            );\n        } else {\n            $get = $request->getQueryParams();\n            $dest = (isset($get['adress']) ? $get['adress'] : $this->preferences->pref_email_newadh);\n            if (GaletteMail::isValidEmail($dest)) {\n                $mail = new GaletteMail($this->preferences);\n                $mail->setSubject(_T('Test message'));\n                $mail->setRecipients(\n                    array(\n                        $dest => _T(\"Galette admin\")\n                    )\n                );\n                $mail->setMessage(_T('Test message.'));\n                $sent = $mail->send();\n\n                if ($sent) {\n                    $this->flash->addMessage(\n                        'success_detected',\n                        str_replace(\n                            '%email',\n                            $dest,\n                            _T(\"An email has been sent to %email\")\n                        )\n                    );\n                } else {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        str_replace(\n                            '%email',\n                            $dest,\n                            _T(\"No email sent to %email\")\n                        )\n                    );\n                }\n            } else {\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"Invalid email adress!\")\n                );\n            }\n        }\n\n        if (!$request->isXhr()) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('preferences'));\n        } else {\n            return $response->withJson(\n                [\n                    'sent'  => $sent\n                ]\n            );\n        }\n    }\n\n    /**\n     * Charts page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function charts(Request $request, Response $response): Response\n    {\n        $charts = new Charts(\n            array(\n                Charts::MEMBERS_STATUS_PIE,\n                Charts::MEMBERS_STATEDUE_PIE,\n                Charts::CONTRIBS_TYPES_PIE,\n                Charts::COMPANIES_OR_NOT,\n                Charts::CONTRIBS_ALLTIME\n            )\n        );\n\n        // display page\n        $this->view->render(\n            $response,\n            'charts.tpl',\n            array(\n                'page_title'        => _T(\"Charts\"),\n                'charts'            => $charts->getCharts(),\n                'require_charts'    => true\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Core fields configuration page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function configureCoreFields(Request $request, Response $response): Response\n    {\n        $fc = $this->fields_config;\n\n        $params = [\n            'page_title'            => _T(\"Fields configuration\"),\n            'time'                  => time(),\n            'categories'            => FieldsCategories::getList($this->zdb),\n            'categorized_fields'    => $fc->getCategorizedFields(),\n            'non_required'          => $fc->getNonRequired()\n        ];\n\n        // display page\n        $this->view->render(\n            $response,\n            'config_fields.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Process core fields configuration\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function storeCoreFieldsConfig(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $fc = $this->fields_config;\n\n        $pos = 0;\n        $current_cat = 0;\n        $res = array();\n        foreach ($post['fields'] as $abs_pos => $field) {\n            if ($current_cat != $post[$field . '_category']) {\n                //reset position when category has changed\n                $pos = 0;\n                //set new current category\n                $current_cat = $post[$field . '_category'];\n            }\n\n            $required = null;\n            if (isset($post[$field . '_required'])) {\n                $required = $post[$field . '_required'];\n            } else {\n                $required = false;\n            }\n\n            $res[$current_cat][] = array(\n                'field_id'  =>  $field,\n                'label'     =>  htmlspecialchars($post[$field . '_label'], ENT_QUOTES),\n                'category'  =>  $post[$field . '_category'],\n                'visible'   =>  $post[$field . '_visible'],\n                'required'  =>  $required\n            );\n            $pos++;\n        }\n        //okay, we've got the new array, we send it to the\n        //Object that will store it in the database\n        $success = $fc->setFields($res);\n        FieldsCategories::setCategories($this->zdb, $post['categories']);\n        if ($success === true) {\n            $this->flash->addMessage(\n                'success_detected',\n                _T(\"Fields configuration has been successfully stored\")\n            );\n        } else {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"An error occurred while storing fields configuration :(\")\n            );\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('configureCoreFields'));\n    }\n\n    /**\n     * Core lists configuration page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $table    Tbale name\n     *\n     * @return Response\n     */\n    public function configureListFields(Request $request, Response $response, string $table): Response\n    {\n        //TODO: check if type table exists\n\n        $lc = $this->lists_config;\n\n        $params = [\n            'page_title'    => _T(\"Lists configuration\"),\n            'table'         => $table,\n            'time'          => time(),\n            'listed_fields' => $lc->getListedFields(),\n            'remaining_fields'  => $lc->getRemainingFields()\n        ];\n\n        // display page\n        $this->view->render(\n            $response,\n            'config_lists.tpl',\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Process list fields configuration\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function storeListFields(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        $lc = $this->lists_config;\n        $fields = [];\n        foreach ($post['fields'] as $field) {\n            $fields[] = $lc->getField($field);\n        }\n        $success = $lc->setListFields($fields);\n\n        if ($success === true) {\n            $this->flash->addMessage(\n                'success_detected',\n                _T(\"List configuration has been successfully stored\")\n            );\n        } else {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"An error occurred while storing list configuration :(\")\n            );\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('configureListFields', $this->getArgs($request)));\n    }\n\n    /**\n     * Reminders page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function reminders(Request $request, Response $response): Response\n    {\n        $texts = new Texts($this->preferences, $this->router);\n\n        $previews = array(\n            'impending' => $texts->getTexts('impendingduedate', $this->preferences->pref_lang),\n            'late'      => $texts->getTexts('lateduedate', $this->preferences->pref_lang)\n        );\n\n        $members = new Members();\n        $reminders = $members->getRemindersCount();\n\n        // display page\n        $this->view->render(\n            $response,\n            'reminder.tpl',\n            [\n                'page_title'                => _T(\"Reminders\"),\n                'previews'                  => $previews,\n                'count_impending'           => $reminders['impending'],\n                'count_impending_nomail'    => $reminders['nomail']['impending'],\n                'count_late'                => $reminders['late'],\n                'count_late_nomail'         => $reminders['nomail']['late']\n            ]\n        );\n        return $response;\n    }\n\n    /**\n     * Main route\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function doReminders(Request $request, Response $response): Response\n    {\n        $error_detected = [];\n        $warning_detected = [];\n        $success_detected = [];\n\n        $post = $request->getParsedBody();\n        $texts = new Texts($this->preferences, $this->router);\n        $selected = null;\n        if (isset($post['reminders'])) {\n            $selected = $post['reminders'];\n        }\n        $reminders = new Reminders($selected);\n\n        $labels = false;\n        $labels_members = array();\n        if (isset($post['reminder_wo_mail'])) {\n            $labels = true;\n        }\n\n        $list_reminders = $reminders->getList($this->zdb, $labels);\n        if (count($list_reminders) == 0) {\n            $warning_detected[] = _T(\"No reminder to send for now.\");\n        } else {\n            foreach ($list_reminders as $reminder) {\n                if ($labels === false) {\n                    $reminder\n                        ->setDb($this->zdb)\n                        ->setLogin($this->login)\n                        ->setPreferences($this->preferences)\n                        ->setRouter($this->router)\n                    ;\n                    //send reminders by email\n                    $sent = $reminder->send($texts, $this->history, $this->zdb);\n\n                    if ($sent === true) {\n                        $success_detected[] = $reminder->getMessage();\n                    } else {\n                        $error_detected[] = $reminder->getMessage();\n                    }\n                } else {\n                    //generate labels for members without email address\n                    $labels_members[] = $reminder->member_id;\n                }\n            }\n\n            if ($labels === true) {\n                if (count($labels_members) > 0) {\n                    $session_var = 'filters_reminders_labels';\n                    $labels_filters = new MembersList();\n                    $labels_filters->selected = $labels_members;\n                    $this->session->$session_var = $labels_filters;\n                    return $response\n                        ->withStatus(307)\n                        ->withHeader(\n                            'Location',\n                            $this->router->pathFor('pdf-members-labels') . '?session_var=' . $session_var\n                        );\n                } else {\n                    $error_detected[] = _T(\"There are no member to proceed.\");\n                }\n            }\n\n            if (count($error_detected) > 0) {\n                array_unshift(\n                    $error_detected,\n                    _T(\"Reminder has not been sent:\")\n                );\n            }\n\n            if (count($success_detected) > 0) {\n                array_unshift(\n                    $success_detected,\n                    _T(\"Sent reminders:\")\n                );\n            }\n        }\n\n        //flash messages if any\n        if (count($error_detected) > 0) {\n            foreach ($error_detected as $error) {\n                $this->flash->addMessage('error_detected', $error);\n            }\n        }\n        if (count($warning_detected) > 0) {\n            foreach ($warning_detected as $warning) {\n                $this->flash->addMessage('warning_detected', $warning);\n            }\n        }\n        if (count($success_detected) > 0) {\n            foreach ($success_detected as $success) {\n                $this->flash->addMessage('success_detected', $success);\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('reminders'));\n    }\n\n    /**\n     * Main route\n     *\n     * @param Request  $request    PSR Request\n     * @param Response $response   PSR Response\n     * @param string   $membership Either 'late' or 'nearly'\n     * @param string   $mail       Either 'withmail' or 'withoutmail'\n     *\n     * @return Response\n     */\n    public function filterReminders(Request $request, Response $response, string $membership, string $mail): Response\n    {\n        //always reset filters\n        $filters = new MembersList();\n        $filters->filter_account = Members::ACTIVE_ACCOUNT;\n\n        $membership = ($membership === 'nearly' ?\n            Members::MEMBERSHIP_NEARLY : Members::MEMBERSHIP_LATE);\n        $filters->membership_filter = $membership;\n\n        //TODO: filter on reminder may take care of parent email as well\n        $mail = ($mail === 'withmail' ?\n            Members::FILTER_W_EMAIL : Members::FILTER_WO_EMAIL);\n        $filters->email_filter = $mail;\n\n        $this->session->filter_members = $filters;\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('members'));\n    }\n\n    /**\n     * Direct document page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $hash     Hash\n     *\n     * @return Response\n     */\n    public function documentLink(Request $request, Response $response, string $hash): Response\n    {\n        // display page\n        $this->view->render(\n            $response,\n            'directlink.tpl',\n            array(\n                'hash'          => $hash,\n                'page_title'    => _T('Download document')\n            )\n        );\n        return $response;\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette history controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Controllers\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Throwable;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\History;\nuse Galette\\Filters\\HistoryList;\nuse Analog\\Analog;\n\n/**\n * Galette history controller\n *\n * @category  Controllers\n * @name      HistoryController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nclass HistoryController extends AbstractController\n{\n    /**\n     * History page\n     *\n     * @param Request        $request  PSR Request\n     * @param Response       $response PSR Response\n     * @param string         $option   One of 'page' or 'order'\n     * @param string|integer $value    Value of the option\n     *\n     * @return Response\n     */\n    public function list(\n        Request $request,\n        Response $response,\n        $option = null,\n        $value = null\n    ): Response {\n        if (isset($this->session->filter_history)) {\n            $filters = $this->session->filter_history;\n        } else {\n            $filters = new HistoryList();\n        }\n\n        if (isset($request->getQueryParams()['nbshow'])) {\n            $filters->show = $request->getQueryParams()['nbshow'];\n        }\n\n        if ($option !== null) {\n            switch ($option) {\n                case 'page':\n                    $filters->current_page = (int)$value;\n                    break;\n                case 'order':\n                    $filters->orderby = $value;\n                    break;\n            }\n        }\n\n        $this->session->filter_history = $filters;\n\n        $this->history->setFilters($filters);\n        $logs = $this->history->getHistory();\n\n        //assign pagination variables to the template and add pagination links\n        $this->history->filters->setSmartyPagination($this->router, $this->view->getSmarty());\n\n        // display page\n        $this->view->render(\n            $response,\n            'history.tpl',\n            array(\n                'page_title'        => _T(\"Logs\"),\n                'logs'              => $logs,\n                'history'           => $this->history\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * History filtering\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function historyFilter(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $error_detected = [];\n\n        if ($this->session->filter_history !== null) {\n            $filters = $this->session->filter_history;\n        } else {\n            $filters = new HistoryList();\n        }\n\n        if (isset($post['clear_filter'])) {\n            $filters->reinit();\n        } else {\n            if (\n                (isset($post['nbshow']) && is_numeric($post['nbshow']))\n            ) {\n                $filters->show = (int)$post['nbshow'];\n            }\n\n            if (isset($post['end_date_filter']) || isset($post['start_date_filter'])) {\n                try {\n                    if (isset($post['start_date_filter'])) {\n                        $field = _T(\"start date filter\");\n                        $filters->start_date_filter = $post['start_date_filter'];\n                    }\n                    if (isset($post['end_date_filter'])) {\n                        $field = _T(\"end date filter\");\n                        $filters->end_date_filter = $post['end_date_filter'];\n                    }\n                } catch (Throwable $e) {\n                    $error_detected[] = $e->getMessage();\n                }\n            }\n\n            if (isset($post['user_filter'])) {\n                $filters->user_filter = $post['user_filter'];\n            }\n\n            if (isset($post['action_filter'])) {\n                $filters->action_filter = $post['action_filter'];\n            }\n        }\n\n        $this->session->filter_history = $filters;\n\n        if (count($error_detected) > 0) {\n            //report errors\n            foreach ($error_detected as $error) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    $error\n                );\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('history'));\n    }\n\n    /**\n     * History flush\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function flushHistory(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $ajax = isset($post['ajax']) && $post['ajax'] === 'true';\n        $success = false;\n\n        $uri = isset($post['redirect_uri']) ?\n            $post['redirect_uri'] : $this->router->pathFor('slash');\n\n        if (!isset($post['confirm'])) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Removal has not been confirmed!\")\n            );\n        } else {\n            try {\n                $this->history->clean();\n                //reinitialize object after flush\n                $this->history = new History($this->zdb, $this->login, $this->preferences);\n                $filters = new HistoryList();\n                $this->session->filter_history = $filters;\n\n                $this->flash->addMessage(\n                    'success_detected',\n                    _T('Logs have been flushed!')\n                );\n                $success = true;\n            } catch (Throwable $e) {\n                $this->zdb->connection->rollBack();\n                Analog::log(\n                    'An error occurred flushing logs | ' . $e->getMessage(),\n                    Analog::ERROR\n                );\n\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T('An error occurred trying to flush logs :(')\n                );\n            }\n        }\n\n        if (!$ajax) {\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $uri);\n        } else {\n            return $response->withJson(\n                [\n                    'success'   => $success\n                ]\n            );\n        }\n    }\n\n    /**\n     * History flush confirmation\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function confirmHistoryFlush(Request $request, Response $response): Response\n    {\n        $data = [\n            'redirect_uri'  => $this->router->pathFor('history')\n        ];\n\n        // display page\n        $this->view->render(\n            $response,\n            'confirm_removal.tpl',\n            array(\n                'mode'          => $request->isXhr() ? 'ajax' : '',\n                'page_title'    => _T('Flush the logs'),\n                'form_url'      => $this->router->pathFor('doFlushHistory'),\n                'cancel_uri'    => $data['redirect_uri'],\n                'data'          => $data\n            )\n        );\n        return $response;\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette PDF controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2019 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Entity\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-05\n */\n\nnamespace Galette\\Controllers;\n\nuse Throwable;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Analog\\Analog;\nuse Galette\\Core\\Links;\nuse Galette\\Core\\Login;\nuse Galette\\Entity\\Adherent;\nuse Galette\\Entity\\Contribution;\nuse Galette\\Entity\\PdfModel;\nuse Galette\\Filters\\MembersList;\nuse Galette\\IO\\Pdf;\nuse Galette\\IO\\PdfAttendanceSheet;\nuse Galette\\IO\\PdfContribution;\nuse Galette\\IO\\PdfGroups;\nuse Galette\\IO\\PdfMembersCards;\nuse Galette\\IO\\PdfMembersLabels;\nuse Galette\\Repository\\Members;\nuse Galette\\Repository\\Groups;\nuse Galette\\Repository\\PdfModels;\n\n/**\n * Galette PDF controller\n *\n * @category  Controllers\n * @name      GaletteController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2019 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2019-12-05\n */\n\nclass PdfController extends AbstractController\n{\n    /**\n     * Send response\n     *\n     * @param Response $response PSR Response\n     * @param Pdf      $pdf      PDF to output\n     *\n     * @return Response\n     */\n    protected function sendResponse(Response $response, Pdf $pdf): Response\n    {\n        return $response\n            ->withHeader('Content-type', 'application/pdf')\n            ->withHeader('Content-Disposition', 'attachment;filename=\"' . $pdf->getFileName() . '\"')\n            ->write($pdf->download());\n    }\n\n    /**\n     * Members PDF card\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id_adh   Member id\n     *\n     * @return Response\n     */\n    public function membersCards(Request $request, Response $response, int $id_adh = null): Response\n    {\n        if ($this->session->filter_members) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        if ($id_adh !== null && $id_adh > 0) {\n            $deps = ['dynamics' => true];\n            if ($this->login->id === $id_adh) {\n                $deps['dues'] = true;\n            }\n            $adh = new Adherent(\n                $this->zdb,\n                $id_adh,\n                $deps\n            );\n            if (!$adh->canEdit($this->login)) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"You do not have permission for requested URL.\")\n                );\n\n                return $response\n                    ->withStatus(403)\n                    ->withHeader(\n                        'Location',\n                        $this->router->pathFor('me')\n                    );\n            }\n\n            //check if member is up to date\n            if ($this->login->id == $id_adh) {\n                if (!$adh->isUp2Date()) {\n                    Analog::log(\n                        'Member ' . $id_adh . ' is not up to date; cannot get his PDF member card',\n                        Analog::WARNING\n                    );\n                    return $response\n                        ->withStatus(301)\n                        ->withHeader('Location', $this->router->pathFor('slash'));\n                }\n            }\n\n            // If we are called from a member's card, get unique id value\n            $unique = $id_adh;\n        } else {\n            if (count($filters->selected) == 0) {\n                Analog::log(\n                    'No member selected to generate members cards',\n                    Analog::INFO\n                );\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"No member was selected, please check at least one name.\")\n                );\n\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('members'));\n            }\n        }\n\n        // Fill array $selected with selected ids\n        $selected = array();\n        if (isset($unique) && $unique) {\n            $selected[] = $unique;\n        } else {\n            $selected = $filters->selected;\n        }\n\n        $m = new Members();\n        $members = $m->getArrayList(\n            $selected,\n            array('nom_adh', 'prenom_adh'),\n            true\n        );\n\n        if (!is_array($members) || count($members) < 1) {\n            Analog::log(\n                'An error has occurred, unable to get members list.',\n                Analog::ERROR\n            );\n\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Unable to get members list.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n\n        $pdf = new PdfMembersCards($this->preferences);\n        $pdf->drawCards($members);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * Members PDF label\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function membersLabels(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $get = $request->getQueryParams();\n\n        $session_var = $post['session_var'] ?? $get['session_var'] ?? 'filter_members';\n\n        if (isset($this->session->$session_var)) {\n            $filters = $this->session->$session_var;\n        } else {\n            $filters = new MembersList();\n        }\n\n        $members = null;\n        if (\n            isset($get['from'])\n            && $get['from'] === 'mailing'\n        ) {\n            //if we're from mailing, we have to retrieve\n            //its unreachables members for labels\n            $mailing = $this->session->mailing;\n            $members = $mailing->unreachables;\n        } else {\n            if (count($filters->selected) == 0) {\n                Analog::log('No member selected to generate labels', Analog::INFO);\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"No member was selected, please check at least one name.\")\n                );\n\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('members'));\n            }\n\n            $m = new Members();\n            $members = $m->getArrayList(\n                $filters->selected,\n                array('nom_adh', 'prenom_adh')\n            );\n        }\n\n        if (!is_array($members) || count($members) < 1) {\n            Analog::log(\n                'An error has occurred, unable to get members list.',\n                Analog::ERROR\n            );\n\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Unable to get members list.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n\n        $pdf = new PdfMembersLabels($this->preferences);\n        $pdf->drawLabels($members);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * PDF adhesion form\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id_adh   Member id\n     *\n     * @return Response\n     */\n    public function adhesionForm(Request $request, Response $response, int $id_adh = null): Response\n    {\n        $adh = new Adherent($this->zdb, $id_adh, ['dynamics' => true]);\n\n        if ($id_adh !== null && !$adh->canEdit($this->login)) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"You do not have permission for requested URL.\")\n            );\n\n            return $response\n                ->withStatus(403)\n                ->withHeader(\n                    'Location',\n                    $this->router->pathFor('me')\n                );\n        }\n\n        $form = $this->preferences->pref_adhesion_form;\n        $pdf = new $form($adh, $this->zdb, $this->preferences);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * PDF attendance sheet configuration page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function attendanceSheetConfig(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        if ($this->session->filter_members !== null) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        // check for ajax mode\n        $ajax = false;\n        if (\n            $request->isXhr()\n            || (isset($post['ajax'])\n            && $post['ajax'] == 'true')\n        ) {\n            $ajax = true;\n\n            //retrieve selected members\n            $selection = $post['selection'] ?? array();\n\n            $filters->selected = $selection;\n            $this->session->filter_members = $filters;\n        } else {\n            $selection = $filters->selected;\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            'attendance_sheet_details.tpl',\n            [\n                'page_title'    => _T(\"Attendance sheet configuration\"),\n                'ajax'          => $ajax,\n                'selection'     => $selection\n            ]\n        );\n        return $response;\n    }\n\n    /**\n     * PDF attendance sheet\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function attendanceSheet(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n\n        if ($this->session->filter_members !== null) {\n            $filters = $this->session->filter_members;\n        } else {\n            $filters = new MembersList();\n        }\n\n        //retrieve selected members\n        $selection = (isset($post['selection'])) ? $post['selection'] : array();\n\n        $filters->selected = $selection;\n        $this->session->filter_members = $filters;\n\n        if (count($filters->selected) == 0) {\n            Analog::log('No member selected to generate attendance sheet', Analog::INFO);\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"No member selected to generate attendance sheet\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n\n        $m = new Members();\n        $members = $m->getArrayList(\n            $filters->selected,\n            array('nom_adh', 'prenom_adh'),\n            true\n        );\n\n        if (!is_array($members) || count($members) < 1) {\n            Analog::log('No member selected to generate attendance sheet', Analog::INFO);\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"No member selected to generate attendance sheet\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('members'));\n        }\n\n        $doc_title = _T(\"Attendance sheet\");\n        if (isset($post['sheet_type']) && trim($post['sheet_type']) != '') {\n            $doc_title = $post['sheet_type'];\n        }\n\n        $data = [\n            'doc_title' => $doc_title,\n            'title'     => $post['sheet_title'] ?? null,\n            'subtitle'  => $post['sheet_sub_title'] ?? null,\n            'sheet_date' => $post['sheet_date'] ?? null\n        ];\n        $pdf = new PdfAttendanceSheet($this->zdb, $this->preferences, $data);\n        //with or without images?\n        if (isset($post['sheet_photos']) && $post['sheet_photos'] === '1') {\n            $pdf->withImages();\n        }\n        $pdf->drawSheet($members);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * Contribution PDF\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Contribution id\n     *\n     * @return Response\n     */\n    public function contribution(Request $request, Response $response, int $id): Response\n    {\n        $contribution = new Contribution($this->zdb, $this->login, $id);\n        if ($contribution->id == '') {\n            //not possible to load contribution, exit\n            $this->flash->addMessage(\n                'error_detected',\n                str_replace(\n                    '%id',\n                    $id,\n                    _T(\"Unable to load contribution #%id!\")\n                )\n            );\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor(\n                    'contributions',\n                    ['type' => 'contributions']\n                ));\n        }\n\n        $pdf = new PdfContribution($contribution, $this->zdb, $this->preferences);\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * Groups PDF\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Group id\n     *\n     * @return Response\n     */\n    public function group(Request $request, Response $response, int $id = null): Response\n    {\n        $groups = new Groups($this->zdb, $this->login);\n\n        $groups_list = null;\n        if ($id !== null) {\n            $groups_list = $groups->getList(true, $id);\n        } else {\n            $groups_list = $groups->getList();\n        }\n\n        if (!is_array($groups_list) || count($groups_list) < 1) {\n            Analog::log(\n                'An error has occurred, unable to get groups list.',\n                Analog::ERROR\n            );\n\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Unable to get groups list.\")\n            );\n\n            return $response\n                ->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('groups'));\n        }\n\n        $pdf = new PdfGroups($this->preferences);\n        $pdf->draw($groups_list, $this->login);\n\n        return $this->sendResponse($response, $pdf);\n    }\n\n    /**\n     * PDF models list\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param integer  $id       Model id\n     *\n     * @return Response\n     */\n    public function models(Request $request, Response $response, int $id = null): Response\n    {\n        $mid = 1;\n        if (isset($_POST[PdfModel::PK])) {\n            $mid = (int)$_POST[PdfModel::PK];\n        } elseif ($id !== null) {\n            $mid = $id;\n        }\n\n\n        $ms = new PdfModels($this->zdb, $this->preferences, $this->login);\n        $models = $ms->getList();\n\n        $model = null;\n        foreach ($models as $m) {\n            if ($m->id === $mid) {\n                $model = $m;\n                break;\n            }\n        }\n\n        $tpl = null;\n        $params = ['model' => $model];\n\n        //Render directly template if we called from ajax,\n        //render in a full page otherwise\n        if (\n            $request->isXhr()\n            || (isset($request->getQueryParams()['ajax'])\n            && $request->getQueryParams()['ajax'] == 'true')\n        ) {\n            $tpl = 'gestion_pdf_content.tpl';\n        } else {\n            $tpl = 'gestion_pdf.tpl';\n            $params += [\n                'page_title'        => _T(\"PDF models\"),\n                'models'            => $models\n            ];\n        }\n\n        // display page\n        $this->view->render(\n            $response,\n            $tpl,\n            $params\n        );\n        return $response;\n    }\n\n    /**\n     * Store PDF models\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function storeModels(Request $request, Response $response): Response\n    {\n        $post = $request->getParsedBody();\n        $error_detected = [];\n\n        if (!isset($post['model_type'])) {\n            $error_detected[] = _T(\"Missing PDF model type!\");\n        } else {\n            $type = (int)$post['model_type'];\n            $class = PdfModel::getTypeClass($type);\n            if (isset($post[PdfModel::PK])) {\n                $model = new $class($this->zdb, $this->preferences, (int)$post[PdfModel::PK]);\n            } else {\n                $model = new $class($this->zdb, $this->preferences);\n            }\n\n            try {\n                $fields = [\n                    'model_header'      => 'header',\n                    'model_footer'      => 'footer',\n                    'model_body'        => 'body',\n                    'model_title'       => 'title',\n                    'model_subtitle'    => 'subtitle',\n                    'model_styles'      => 'styles'\n                ];\n\n                $model->type = $type;\n                foreach ($fields as $pvar => $prop) {\n                    if (isset($post[$pvar])) {\n                        $model->$prop = $post[$pvar];\n                    }\n                }\n\n                $res = $model->store();\n                if ($res === true) {\n                    $this->flash->addMessage(\n                        'success_detected',\n                        _T(\"Model has been successfully stored!\")\n                    );\n                } else {\n                    $error_detected[] = _T(\"Model has not been stored :(\");\n                }\n            } catch (Throwable $e) {\n                $error_detected[] = $e->getMessage();\n            }\n        }\n\n        if (count($error_detected) > 0) {\n            foreach ($error_detected as $error) {\n                $this->flash->addMessage(\n                    'error_detected',\n                    $error\n                );\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('pdfModels', ['id' => $model->id ?? null]));\n    }\n\n\n    /**\n     * Get direct document\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $hash     Hash\n     *\n     * @return Response\n     */\n    public function directlinkDocument(Request $request, Response $response, string $hash): Response\n    {\n        $post = $request->getParsedBody();\n        $email = $post['email'];\n\n        $links = new Links($this->zdb);\n        $valid = $links->isHashValid($hash, $email);\n\n        if ($valid === false) {\n            $this->flash->addMessage(\n                'error_detected',\n                _T(\"Invalid link!\")\n            );\n\n            return $response->withStatus(301)\n                ->withHeader('Location', $this->router->pathFor('directlink', ['hash' => $hash]));\n        }\n\n        $target = $valid[0];\n        $id = (int)$valid[1];\n\n        //get user information (like id...) from DB since its missing\n        $select = $this->zdb->select(Adherent::TABLE, 'a');\n        $select->where(['email_adh' => $post['email']]);\n        $results = $this->zdb->execute($select);\n        $row = $results->current();\n\n        //create a new login instance, to not break current session if any\n        //this will be passed directly to Contribution constructor\n        $login = new Login(\n            $this->zdb,\n            $this->i18n\n        );\n        $login->id = (int)$row['id_adh'];\n\n        if ($target === Links::TARGET_MEMBERCARD) {\n            $m = new Members();\n            $members = $m->getArrayList(\n                [$id],\n                array('nom_adh', 'prenom_adh'),\n                true\n            );\n\n            if (!is_array($members) || count($members) < 1) {\n                Analog::log(\n                    'An error has occurred, unable to get members list.',\n                    Analog::ERROR\n                );\n\n                $this->flash->addMessage(\n                    'error_detected',\n                    _T(\"Unable to get members list.\")\n                );\n\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor('directlink', ['hash' => $hash]));\n            }\n\n            $pdf = new PdfMembersCards($this->preferences);\n            $pdf->drawCards($members);\n        } else {\n            $contribution = new Contribution($this->zdb, $login, $id);\n            if ($contribution->id == '') {\n                //not possible to load contribution, exit\n                $this->flash->addMessage(\n                    'error_detected',\n                    str_replace(\n                        '%id',\n                        $id,\n                        _T(\"Unable to load contribution #%id!\")\n                    )\n                );\n                return $response\n                    ->withStatus(301)\n                    ->withHeader('Location', $this->router->pathFor(\n                        'directlink',\n                        ['hash' => $hash]\n                    ));\n            }\n            $pdf = new PdfContribution($contribution, $this->zdb, $this->preferences);\n        }\n\n        return $this->sendResponse($response, $pdf);\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Galette plugins controller\n *\n * PHP version 5\n *\n * Copyright \u00a9 2020 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Controllers\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nnamespace Galette\\Controllers;\n\nuse Throwable;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Response;\nuse Galette\\Core\\Install;\nuse Galette\\Core\\PluginInstall;\nuse Laminas\\Db\\Adapter\\Adapter;\nuse Analog\\Analog;\n\n/**\n * Galette plugins controller\n *\n * @category  Controllers\n * @name      PluginsController\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2020 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.9.4dev - 2020-05-02\n */\n\nclass PluginsController extends AbstractController\n{\n    /**\n     * Plugins page\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     *\n     * @return Response\n     */\n    public function showPlugins(Request $request, Response $response): Response\n    {\n        $plugins = $this->plugins;\n\n        $plugins_list = $plugins->getModules();\n        $disabled_plugins = $plugins->getDisabledModules();\n\n        // display page\n        $this->view->render(\n            $response,\n            'plugins.tpl',\n            array(\n                'page_title'            => _T(\"Plugins\"),\n                'plugins_list'          => $plugins_list,\n                'plugins_disabled_list' => $disabled_plugins\n            )\n        );\n        return $response;\n    }\n\n    /**\n     * Plugins activation/desactivaion\n     *\n     * @param Request  $request   PSR Request\n     * @param Response $response  PSR Response\n     * @param string   $action    Action\n     * @param string   $module_id Module id\n     *\n     * @return Response\n     */\n    public function togglePlugin(Request $request, Response $response, string $action, string $module_id): Response\n    {\n        if (GALETTE_MODE !== 'DEMO') {\n            $plugins = $this->plugins;\n            $reload_plugins = false;\n            if ($action == 'activate') {\n                try {\n                    $plugins->activateModule($module_id);\n                    $this->flash->addMessage(\n                        'success_detected',\n                        str_replace(\n                            '%name',\n                            $module_id,\n                            _T(\"Plugin %name has been enabled\")\n                        )\n                    );\n                    $reload_plugins = true;\n                } catch (Throwable $e) {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $e->getMessage()\n                    );\n                }\n            } elseif ($action == 'deactivate') {\n                try {\n                    $plugins->deactivateModule($module_id);\n                    $this->flash->addMessage(\n                        'success_detected',\n                        str_replace(\n                            '%name',\n                            $module_id,\n                            _T(\"Plugin %name has been disabled\")\n                        )\n                    );\n                    $reload_plugins = true;\n                } catch (Throwable $e) {\n                    $this->flash->addMessage(\n                        'error_detected',\n                        $e->getMessage()\n                    );\n                }\n            }\n\n            //If some plugins have been (de)activated, we have to reload\n            if ($reload_plugins === true) {\n                $plugins->loadModules($this->preferences, GALETTE_PLUGINS_PATH, $this->i18n->getLongID());\n            }\n        }\n\n        return $response\n            ->withStatus(301)\n            ->withHeader('Location', $this->router->pathFor('plugins'));\n    }\n\n    /**\n     * Plugins database activation\n     *\n     * @param Request  $request  PSR Request\n     * @param Response $response PSR Response\n     * @param string   $id       Plugin id\n     *\n     * @return Response\n     */\n    public function initPluginDb(Request $request, Response $response, string $id): Response\n    {\n        if (GALETTE_MODE === 'DEMO') {\n            Analog::log(\n                'Trying to access plugin database initialization in DEMO mode.',\n                Analog::WARNING\n            );\n            return $response->withStatus(403);\n        }\n\n        $params = [];\n        $warning_detected = [];\n        $error_detected = [];\n\n        $plugid = $id;\n        $plugin = $this->plugins->getModules($plugid);\n\n        if ($plugin === null) {\n            Analog::log(\n                'Unable to load plugin `' . $plugid . '`!',\n                Analog::URGENT\n            );\n            $notFound = $this->notFoundHandler;\n            return $notFound($request, $response);\n        }\n\n        $install = null;\n        $mdplugin = md5($plugin['root']);\n        if (\n            isset($this->session->$mdplugin)\n            && !isset($_GET['raz'])\n        ) {\n            $install = $this->session->$mdplugin;\n        } else {\n            $install = new PluginInstall();\n        }\n\n        $post = $request->getParsedBody();\n\n        if (isset($post['stepback_btn'])) {\n            $install->atPreviousStep();\n        } elseif (isset($post['install_prefs_ok'])) {\n            $install->atEndStep();\n        } elseif (isset($post['previous_version'])) {\n            $install->setInstalledVersion($post['previous_version']);\n            $install->atDbUpgradeStep();\n        } elseif (isset($post['install_dbperms_ok'])) {\n            if ($install->isInstall()) {\n                $install->atDbInstallStep();\n            } elseif ($install->isUpgrade()) {\n                $install->atVersionSelection();\n            }\n        } elseif (isset($post['install_type'])) {\n            $install->setMode($post['install_type']);\n            $install->atDbStep();\n        }\n\n        $step = 1;\n        $istep = 1;\n\n        if (isset($post['install_type'])) {\n            $params['install_type'] = $post['install_type'];\n            $istep = 2;\n        }\n\n        if (isset($post['install_dbperms_ok'])) {\n            if ($post['install_type'] === PluginInstall::INSTALL) {\n                $istep = 4;\n            } else {\n                $istep = 3;\n            }\n        }\n\n        if (isset($post['previous_version'])) {\n            $istep = 4;\n        }\n\n        if (isset($post['install_dbwrite_ok'])) {\n            $istep = 5;\n        }\n\n        if (isset($post['install_type'])) {\n            if ($post['install_type'] == PluginInstall::INSTALL) {\n                $step = 'i' . $istep;\n            } elseif ($istep > 1 && $post['install_type'] == PluginInstall::UPDATE) {\n                $step = 'u' . $istep;\n            }\n        }\n\n        switch ($step) {\n            case '1':\n                //let's look for updates scripts\n                $update_scripts = $install::getUpdateScripts($plugin['root'], TYPE_DB);\n                if (count($update_scripts) > 0) {\n                    $params['update_scripts'] = $update_scripts;\n                }\n                break;\n            case 'i2':\n            case 'u2':\n                if (!defined('GALETTE_THEME_DIR')) {\n                    define('GALETTE_THEME_DIR', './themes/default/');\n                }\n\n                $install_plugin = true;\n                //not used here, but from include\n                $zdb = $this->zdb;\n                ob_start();\n                include_once GALETTE_ROOT . '/install/steps/db_checks.php';\n                $params['results'] = ob_get_contents();\n                ob_end_clean();\n                break;\n            case 'u3':\n                $update_scripts = Install::getUpdateScripts($plugin['root'], TYPE_DB);\n                $params['update_scripts'] = $update_scripts;\n                break;\n            case 'i4':\n            case 'u4':\n                $messages = [];\n\n                // begin : copyright (2002) the phpbb group (support@phpbb.com)\n                // load in the sql parser\n                include GALETTE_ROOT . 'includes/sql_parse.php';\n                if ($step == 'u4') {\n                    $update_scripts = Install::getUpdateScripts(\n                        $plugin['root'],\n                        TYPE_DB,\n                        $post['previous_version']\n                    );\n                } else {\n                    $update_scripts['current'] = TYPE_DB . '.sql';\n                }\n\n                $sql_query = '';\n                foreach ($update_scripts as $key => $val) {\n                    $sql_query .= @fread(\n                        @fopen($plugin['root'] . '/scripts/' . $val, 'r'),\n                        @filesize($plugin['root'] . '/scripts/' . $val)\n                    );\n                    $sql_query .= \"\\n\";\n                }\n\n                $sql_query = preg_replace('/galette_/', PREFIX_DB, $sql_query);\n                $sql_query = remove_remarks($sql_query);\n\n                $sql_query = split_sql_file($sql_query, ';');\n\n                $sql_size = sizeof($sql_query);\n                for ($i = 0; $i < $sql_size; $i++) {\n                    $query = trim($sql_query[$i]);\n                    if ($query != '' && $query[0] != '-') {\n                        //some output infos\n                        @list($w1, $w2, $w3, $extra) = array_pad(explode(' ', $query, 4), 4, '');\n                        if ($extra != '') {\n                            $extra = '...';\n                        }\n                        try {\n                            $this->zdb->db->query(\n                                $query,\n                                Adapter::QUERY_MODE_EXECUTE\n                            );\n                            $messages['success'][] = $w1 . ' ' . $w2 . ' ' . $w3 .\n                                ' ' . $extra;\n                        } catch (Throwable $e) {\n                            Analog::log(\n                                'Error executing query | ' . $e->getMessage() .\n                                ' | Query was: ' . $query,\n                                Analog::WARNING\n                            );\n                            if (\n                                (strcasecmp(trim($w1), 'drop') != 0)\n                                && (strcasecmp(trim($w1), 'rename') != 0)\n                            ) {\n                                $error_detected[] = $w1 . ' ' . $w2 . ' ' . $w3 . ' ' . $extra;\n                                $error_detected[] = $e->getMessage() . '<br/>(' . $query . ')';\n                            } else {\n                                //if error are on drop, DROP, rename or RENAME we can continue\n                                $warning_detected[] = $w1 . ' ' . $w2 . ' ' . $w3 . ' ' . $extra;\n                                $warning_detected[] = $e->getMessage() . '<br/>(' . $query . ')';\n                            }\n                        }\n                    }\n                }\n                break;\n        }\n\n        $this->session->$mdplugin = $install;\n\n        $params += [\n            'page_title'    => $install->getStepTitle(),\n            'step'          => $step,\n            'istep'         => $istep,\n            'plugid'        => $plugid,\n            'plugin'        => $plugin,\n            'mode'          => ($request->isXhr() ? 'ajax' : ''),\n            'error_detected' => $error_detected\n        ];\n\n        // display page\n        $this->view->render(\n            $response,\n            'plugin_initdb.tpl',\n            $params\n        );\n        return $response;\n    }\n}\n", "<?php\n\n/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */\n\n/**\n * Member class for galette\n *\n * PHP version 5\n *\n * Copyright \u00a9 2009-2014 The Galette Team\n *\n * This file is part of Galette (http://galette.tuxfamily.org).\n *\n * Galette is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Galette is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Galette. If not, see <http://www.gnu.org/licenses/>.\n *\n * @category  Entity\n * @package   Galette\n *\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2009-2014 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.7dev - 2009-06-02\n */\n\nnamespace Galette\\Entity;\n\nuse Throwable;\nuse Analog\\Analog;\nuse Laminas\\Db\\Sql\\Expression;\nuse Galette\\Core\\Db;\nuse Galette\\Core\\Picture;\nuse Galette\\Core\\GaletteMail;\nuse Galette\\Core\\Password;\nuse Galette\\Core\\Preferences;\nuse Galette\\Core\\History;\nuse Galette\\Repository\\Groups;\nuse Galette\\Repository\\Members;\n\n/**\n * Member class for galette\n *\n * @category  Entity\n * @name      Adherent\n * @package   Galette\n * @author    Johan Cwiklinski <johan@x-tnd.be>\n * @copyright 2009-2014 The Galette Team\n * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version\n * @link      http://galette.tuxfamily.org\n * @since     Available since 0.7dev - 02-06-2009\n *\n * @property integer $id\n * @property integer|Title $title Either a title id or an instance of Title\n * @property string $stitle Title label\n * @property string company_name\n * @property string $name\n * @property string $surname\n * @property string $nickname\n * @property string $birthdate Localized birth date\n * @property string $rbirthdate Raw birth date\n * @property string $birth_place\n * @property integer $gender\n * @property string $sgender Gender label\n * @property string $job\n * @property string $language\n * @property integer $status\n * @property string $sstatus Status label\n * @property string $address\n * @property string $address_continuation\n * @property string $zipcode\n * @property string $town\n * @property string $country\n * @property string $phone\n * @property string $gsm\n * @property string $email\n * @property string $website\n * @property string $msn\n * @property string $icq\n * @property string $jabber\n * @property string $gnupgid\n * @property string $fingerprint\n * @property string $login\n * @property string $creation_date Localized creation date\n * @property string $modification_date Localized modification date\n * @property string $due_date Localized due date\n * @property string $others_infos\n * @property string $others_infos_admin\n * @property Picture $picture\n * @property array $groups\n * @property array $managed_groups\n * @property integer|Adherent $parent Parent id if parent dep is not loaded, Adherent instance otherwise\n * @property array $children\n * @property boolean $admin better to rely on isAdmin()\n * @property boolean $staff better to rely on isStaff()\n * @property boolean $due_free better to rely on isDueFree()\n * @property boolean $appears_in_list better to rely on appearsInMembersList()\n * @property boolean $active better to rely on isActive()\n * @property boolean $duplicate better to rely on isDuplicate()\n * @property string $sadmin yes/no\n * @property string $sstaff yes/no\n * @property string $sdue_free yes/no\n * @property string $sappears_in_list yes/no\n * @property string $sactive yes/no\n * @property string $sfullname\n * @property string $sname\n * @property string $saddress Concatened address and continuation\n * @property string $contribstatus State of member contributions\n * @property string $days_remaining\n */\nclass Adherent\n{\n    use DynamicsTrait;\n\n    public const TABLE = 'adherents';\n    public const PK = 'id_adh';\n\n    public const NC = 0;\n    public const MAN = 1;\n    public const WOMAN = 2;\n\n    public const AFTER_ADD_DEFAULT = 0;\n    public const AFTER_ADD_TRANS = 1;\n    public const AFTER_ADD_NEW = 2;\n    public const AFTER_ADD_SHOW = 3;\n    public const AFTER_ADD_LIST = 4;\n    public const AFTER_ADD_HOME = 5;\n\n    private $_id;\n    //Identity\n    private $_title;\n    private $_company_name;\n    private $_name;\n    private $_surname;\n    private $_nickname;\n    private $_birthdate;\n    private $_birth_place;\n    private $_gender;\n    private $_job;\n    private $_language;\n    private $_active;\n    private $_status;\n    //Contact information\n    private $_address;\n    private $_address_continuation; /** TODO: remove */\n    private $_zipcode;\n    private $_town;\n    private $_country;\n    private $_phone;\n    private $_gsm;\n    private $_email;\n    private $_website;\n    private $_msn; /** TODO: remove */\n    private $_icq; /** TODO: remove */\n    private $_jabber; /** TODO: remove */\n    private $_gnupgid; /** TODO: remove */\n    private $_fingerprint; /** TODO: remove */\n    //Galette relative information\n    private $_appears_in_list;\n    private $_admin;\n    private $_staff;\n    private $_due_free;\n    private $_login;\n    private $_password;\n    private $_creation_date;\n    private $_modification_date;\n    private $_due_date;\n    private $_others_infos;\n    private $_others_infos_admin;\n    private $_picture;\n    private $_oldness;\n    private $_days_remaining;\n    private $_groups;\n    private $_managed_groups;\n    private $_parent;\n    private $_children;\n    private $_duplicate = false;\n\n    private $_row_classes;\n\n    private $_self_adh = false;\n    private $_deps = array(\n        'picture'   => true,\n        'groups'    => true,\n        'dues'      => true,\n        'parent'    => false,\n        'children'  => false,\n        'dynamics'  => false\n    );\n\n    private $zdb;\n    private $preferences;\n    private $fields;\n    private $history;\n\n    private $parent_fields = [\n        'adresse_adh',\n        'adresse2_adh',\n        'cp_adh',\n        'ville_adh',\n        'email_adh'\n    ];\n\n    private $errors = [];\n\n    private $sendmail = false;\n\n    /**\n     * Default constructor\n     *\n     * @param Db          $zdb  Database instance\n     * @param mixed       $args Either a ResultSet row, its id or its\n     *                          login or its email for to load s specific\n     *                          member, or null to just instanciate object\n     * @param false|array $deps Dependencies configuration, see Adherent::$_deps\n     */\n    public function __construct(Db $zdb, $args = null, $deps = null)\n    {\n        global $i18n;\n\n        $this->zdb = $zdb;\n\n        if ($deps !== null) {\n            if (is_array($deps)) {\n                $this->_deps = array_merge(\n                    $this->_deps,\n                    $deps\n                );\n            } elseif ($deps === false) {\n                //no dependencies\n                $this->_deps = array_fill_keys(\n                    array_keys($this->_deps),\n                    false\n                );\n            } else {\n                Analog::log(\n                    '$deps shoud be an array, ' . gettype($deps) . ' given!',\n                    Analog::WARNING\n                );\n            }\n        }\n\n        if ($args == null || is_int($args)) {\n            if (is_int($args) && $args > 0) {\n                $this->load($args);\n            } else {\n                $this->_active = true;\n                $this->_language = $i18n->getID();\n                $this->_creation_date = date(\"Y-m-d\");\n                $this->_status = $this->getDefaultStatus();\n                $this->_title = null;\n                $this->_gender = self::NC;\n                $gp = new Password($this->zdb);\n                $this->_password = $gp->makeRandomPassword();\n                $this->_picture = new Picture();\n                $this->_admin = false;\n                $this->_staff = false;\n                $this->_due_free = false;\n                $this->_appears_in_list = false;\n                $this->_parent = null;\n\n                if ($this->_deps['dynamics'] === true) {\n                    $this->loadDynamicFields();\n                }\n            }\n        } elseif (is_object($args)) {\n            $this->loadFromRS($args);\n        } elseif (is_string($args)) {\n            $this->loadFromLoginOrMail($args);\n        }\n    }\n\n    /**\n     * Loads a member from its id\n     *\n     * @param int $id the identifiant for the member to load\n     *\n     * @return bool true if query succeed, false otherwise\n     */\n    public function load($id)\n    {\n        try {\n            $select = $this->zdb->select(self::TABLE, 'a');\n\n            $select->join(\n                array('b' => PREFIX_DB . Status::TABLE),\n                'a.' . Status::PK . '=b.' . Status::PK,\n                array('priorite_statut')\n            )->where(array(self::PK => $id));\n\n            $results = $this->zdb->execute($select);\n\n            if ($results->count() === 0) {\n                return false;\n            }\n\n            $this->loadFromRS($results->current());\n            return true;\n        } catch (Throwable $e) {\n            Analog::log(\n                'Cannot load member form id `' . $id . '` | ' . $e->getMessage(),\n                Analog::WARNING\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Loads a member from its login\n     *\n     * @param string $login login for the member to load\n     *\n     * @return bool true if query succeed, false otherwise\n     */\n    public function loadFromLoginOrMail($login)\n    {\n        try {\n            $select = $this->zdb->select(self::TABLE);\n            if (GaletteMail::isValidEmail($login)) {\n                //we got a valid email address, use it\n                $select->where(array('email_adh' => $login));\n            } else {\n                ///we did not get an email address, consider using login\n                $select->where(array('login_adh' => $login));\n            }\n\n            $results = $this->zdb->execute($select);\n            $result = $results->current();\n            if ($result) {\n                $this->loadFromRS($result);\n            }\n        } catch (Throwable $e) {\n            Analog::log(\n                'Cannot load member form login `' . $login . '` | ' .\n                $e->getMessage(),\n                Analog::WARNING\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Populate object from a resultset row\n     *\n     * @param ResultSet $r the resultset row\n     *\n     * @return void\n     */\n    private function loadFromRS($r)\n    {\n        $this->_self_adh = false;\n        $this->_id = $r->id_adh;\n        //Identity\n        if ($r->titre_adh !== null) {\n            $this->_title = new Title((int)$r->titre_adh);\n        }\n        $this->_company_name = $r->societe_adh;\n        $this->_name = $r->nom_adh;\n        $this->_surname = $r->prenom_adh;\n        $this->_nickname = $r->pseudo_adh;\n        if ($r->ddn_adh != '1901-01-01') {\n            $this->_birthdate = $r->ddn_adh;\n        }\n        $this->_birth_place = $r->lieu_naissance;\n        $this->_gender = (int)$r->sexe_adh;\n        $this->_job = $r->prof_adh;\n        $this->_language = $r->pref_lang;\n        $this->_active = ($r->activite_adh == 1) ? true : false;\n        $this->_status = (int)$r->id_statut;\n        //Contact information\n        $this->_address = $r->adresse_adh;\n        /** TODO: remove and merge with address */\n        $this->_address_continuation = $r->adresse2_adh;\n        $this->_zipcode = $r->cp_adh;\n        $this->_town = $r->ville_adh;\n        $this->_country = $r->pays_adh;\n        $this->_phone = $r->tel_adh;\n        $this->_gsm = $r->gsm_adh;\n        $this->_email = $r->email_adh;\n        $this->_website = $r->url_adh;\n        /** TODO: remove */\n        $this->_msn = $r->msn_adh;\n        /** TODO: remove */\n        $this->_icq = $r->icq_adh;\n        /** TODO: remove */\n        $this->_jabber = $r->jabber_adh;\n        /** TODO: remove */\n        $this->_gnupgid = $r->gpgid;\n        /** TODO: remove */\n        $this->_fingerprint = $r->fingerprint;\n        //Galette relative information\n        $this->_appears_in_list = ($r->bool_display_info == 1) ? true : false;\n        $this->_admin = ($r->bool_admin_adh == 1) ? true : false;\n        if (\n            isset($r->priorite_statut)\n            && $r->priorite_statut < Members::NON_STAFF_MEMBERS\n        ) {\n            $this->_staff = true;\n        }\n        $this->_due_free = ($r->bool_exempt_adh == 1) ? true : false;\n        $this->_login = $r->login_adh;\n        $this->_password = $r->mdp_adh;\n        $this->_creation_date = $r->date_crea_adh;\n        if ($r->date_modif_adh != '1901-01-01') {\n            $this->_modification_date = $r->date_modif_adh;\n        } else {\n            $this->_modification_date = $this->_creation_date;\n        }\n        $this->_due_date = $r->date_echeance;\n        $this->_others_infos = $r->info_public_adh;\n        $this->_others_infos_admin = $r->info_adh;\n\n        if ($r->parent_id !== null) {\n            $this->_parent = (int)$r->parent_id;\n            if ($this->_deps['parent'] === true) {\n                $this->loadParent($r->parent_id);\n            }\n        }\n\n        if ($this->_deps['children'] === true) {\n            $this->loadChildren();\n        }\n\n        if ($this->_deps['picture'] === true) {\n            $this->_picture = new Picture($this->_id);\n        }\n\n        if ($this->_deps['groups'] === true) {\n            $this->loadGroups();\n        }\n\n        if ($this->_deps['dues'] === true) {\n            $this->checkDues();\n        }\n\n        if ($this->_deps['dynamics'] === true) {\n            $this->loadDynamicFields();\n        }\n    }\n\n    /**\n     * Load member parent\n     *\n     * @return void\n     */\n    private function loadParent()\n    {\n        if (!$this->_parent instanceof Adherent) {\n            $deps = array_fill_keys(array_keys($this->_deps), false);\n            $this->_parent = new Adherent($this->zdb, (int)$this->_parent, $deps);\n        }\n    }\n\n    /**\n     * Load member children\n     *\n     * @return void\n     */\n    private function loadChildren()\n    {\n        $this->_children = array();\n        try {\n            $id = self::PK;\n            $select = $this->zdb->select(self::TABLE);\n            $select->columns(\n                array($id)\n            )->where(\n                'parent_id = ' . $this->_id\n            );\n\n            $results = $this->zdb->execute($select);\n\n            if ($results->count() > 0) {\n                foreach ($results as $row) {\n                    $deps = $this->_deps;\n                    $deps['children'] = false;\n                    $deps['parent'] = false;\n                    $this->_children[] = new Adherent($this->zdb, (int)$row->$id, $deps);\n                }\n            }\n        } catch (Throwable $e) {\n            Analog::log(\n                'Cannot load children for member #' . $this->_id . ' | ' .\n                $e->getMessage(),\n                Analog::WARNING\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Load member groups\n     *\n     * @return void\n     */\n    public function loadGroups()\n    {\n        $this->_groups = Groups::loadGroups($this->_id);\n        $this->_managed_groups = Groups::loadManagedGroups($this->_id);\n    }\n\n    /**\n     * Retrieve status from preferences\n     *\n     * @return pref_statut\n     *\n     */\n    private function getDefaultStatus()\n    {\n        global $preferences;\n        if ($preferences->pref_statut != '') {\n            return $preferences->pref_statut;\n        } else {\n            Analog::log(\n                'Unable to get pref_statut; is it defined in preferences?',\n                Analog::ERROR\n            );\n            return Status::DEFAULT_STATUS;\n        }\n    }\n\n    /**\n     * Check for dues status\n     *\n     * @return void\n     */\n    private function checkDues()\n    {\n        //how many days since our beloved member has been created\n        $date_now = new \\DateTime();\n        $this->_oldness = $date_now->diff(\n            new \\DateTime($this->_creation_date)\n        )->days;\n\n        if ($this->isDueFree()) {\n            //no fee required, we don't care about dates\n            $this->_row_classes .= ' cotis-exempt';\n        } else {\n            //ok, fee is required. Let's check the dates\n            if ($this->_due_date == '') {\n                $this->_row_classes .= ' cotis-never';\n            } else {\n                $date_end = new \\DateTime($this->_due_date);\n                $date_diff = $date_now->diff($date_end);\n                $this->_days_remaining = ($date_diff->invert == 1)\n                    ? $date_diff->days * -1\n                    : $date_diff->days;\n\n                if ($this->_days_remaining == 0) {\n                    $this->_row_classes .= ' cotis-lastday';\n                } elseif ($this->_days_remaining < 0) {\n                    //check if member is still active\n                    $this->_row_classes .= $this->isActive() ? ' cotis-late' : ' cotis-old';\n                } elseif ($this->_days_remaining < 30) {\n                    $this->_row_classes .= ' cotis-soon';\n                } else {\n                    $this->_row_classes .= ' cotis-ok';\n                }\n            }\n        }\n    }\n\n    /**\n     * Is member admin?\n     *\n     * @return bool\n     */\n    public function isAdmin()\n    {\n        return $this->_admin;\n    }\n\n    /**\n     * Is user member of staff?\n     *\n     * @return bool\n     */\n    public function isStaff()\n    {\n        return $this->_staff;\n    }\n\n    /**\n     * Is member freed of dues?\n     *\n     * @return bool\n     */\n    public function isDueFree()\n    {\n        return $this->_due_free;\n    }\n\n    /**\n     * Is member in specified group?\n     *\n     * @param string $group_name Group name\n     *\n     * @return boolean\n     */\n    public function isGroupMember($group_name)\n    {\n        if (is_array($this->_groups)) {\n            foreach ($this->_groups as $g) {\n                if ($g->getName() == $group_name) {\n                    return true;\n                    break;\n                }\n            }\n        } else {\n            Analog::log(\n                'Calling ' . __METHOD__ . ' without groups loaded!',\n                Analog::ERROR\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Is member manager of specified group?\n     *\n     * @param string $group_name Group name\n     *\n     * @return boolean\n     */\n    public function isGroupManager($group_name)\n    {\n        if (is_array($this->_managed_groups)) {\n            foreach ($this->_managed_groups as $mg) {\n                if ($mg->getName() == $group_name) {\n                    return true;\n                    break;\n                }\n            }\n        } else {\n            Analog::log(\n                'Calling ' . __METHOD__ . ' without groups loaded!',\n                Analog::ERROR\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Does current member represents a company?\n     *\n     * @return boolean\n     */\n    public function isCompany()\n    {\n        return trim($this->_company_name) != '';\n    }\n\n    /**\n     * Is current member a man?\n     *\n     * @return boolean\n     */\n    public function isMan()\n    {\n        return (int)$this->_gender === self::MAN;\n    }\n\n    /**\n     * Is current member a woman?\n     *\n     * @return boolean\n     */\n    public function isWoman()\n    {\n        return (int)$this->_gender === self::WOMAN;\n    }\n\n\n    /**\n     * Can member appears in public members list?\n     *\n     * @return bool\n     */\n    public function appearsInMembersList()\n    {\n        return $this->_appears_in_list;\n    }\n\n    /**\n     * Is member active?\n     *\n     * @return bool\n     */\n    public function isActive()\n    {\n        return $this->_active;\n    }\n\n    /**\n     * Does member have uploaded a picture?\n     *\n     * @return bool\n     */\n    public function hasPicture()\n    {\n        return $this->_picture->hasPicture();\n    }\n\n    /**\n     * Does member have a parent?\n     *\n     * @return bool\n     */\n    public function hasParent()\n    {\n        return !empty($this->_parent);\n    }\n\n    /**\n     * Does member have children?\n     *\n     * @return bool\n     */\n    public function hasChildren()\n    {\n        if ($this->_children === null) {\n            if ($this->id) {\n                Analog::log(\n                    'Children has not been loaded!',\n                    Analog::WARNING\n                );\n            }\n            return false;\n        } else {\n            return count($this->_children) > 0;\n        }\n    }\n\n    /**\n     * Get row class related to current fee status\n     *\n     * @param boolean $public we want the class for public pages\n     *\n     * @return string the class to apply\n     */\n    public function getRowClass($public = false)\n    {\n        $strclass = ($this->isActive()) ? 'active' : 'inactive';\n        if ($public === false) {\n            $strclass .= $this->_row_classes;\n        }\n        return $strclass;\n    }\n\n    /**\n     * Get current member due status\n     *\n     * @return string i18n string representing state of due\n     */\n    public function getDues()\n    {\n        $ret = '';\n        if ($this->isDueFree()) {\n            $ret = _T(\"Freed of dues\");\n        } elseif ($this->_due_date == '') {\n            $patterns = array('/%days/', '/%date/');\n            $cdate = new \\DateTime($this->_creation_date);\n            $replace = array(\n                $this->_oldness,\n                $cdate->format(__(\"Y-m-d\"))\n            );\n            if ($this->_active) {\n                $ret = preg_replace(\n                    $patterns,\n                    $replace,\n                    _T(\"Never contributed: Registered %days days ago (since %date)\")\n                );\n            } else {\n                $ret = _T(\"Never contributed\");\n            }\n        } elseif ($this->_days_remaining == 0) {\n            $ret = _T(\"Last day!\");\n        } elseif ($this->_days_remaining < 0) {\n            $patterns = array('/%days/', '/%date/');\n            $ddate = new \\DateTime($this->_due_date);\n            $replace = array(\n                $this->_days_remaining * -1,\n                $ddate->format(__(\"Y-m-d\"))\n            );\n            if ($this->_active) {\n                $ret = preg_replace(\n                    $patterns,\n                    $replace,\n                    _T(\"Late of %days days (since %date)\")\n                );\n            } else {\n                $ret = _T(\"No longer member\");\n            }\n        } else {\n            $patterns = array('/%days/', '/%date/');\n            $ddate = new \\DateTime($this->_due_date);\n            $replace = array(\n                $this->_days_remaining,\n                $ddate->format(__(\"Y-m-d\"))\n            );\n            $ret = preg_replace(\n                $patterns,\n                $replace,\n                _T(\"%days days remaining (ending on %date)\")\n            );\n        }\n        return $ret;\n    }\n\n    /**\n     * Retrieve Full name and surname for the specified member id\n     *\n     * @param Db      $zdb   Database instance\n     * @param integer $id    Member id\n     * @param boolean $wid   Add member id\n     * @param boolean $wnick Add member nickname\n     *\n     * @return string formatted Name and Surname\n     */\n    public static function getSName($zdb, $id, $wid = false, $wnick = false)\n    {\n        try {\n            $select = $zdb->select(self::TABLE);\n            $select->where(self::PK . ' = ' . $id);\n\n            $results = $zdb->execute($select);\n            $row = $results->current();\n            return self::getNameWithCase(\n                $row->nom_adh,\n                $row->prenom_adh,\n                false,\n                ($wid === true ? $row->id_adh : false),\n                ($wnick === true ? $row->pseudo_adh : false)\n            );\n        } catch (Throwable $e) {\n            Analog::log(\n                'Cannot get formatted name for member form id `' . $id . '` | ' .\n                $e->getMessage(),\n                Analog::WARNING\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Get member name with correct case\n     *\n     * @param string        $name    Member name\n     * @param string        $surname Mmeber surname\n     * @param false|Title   $title   Member title to show or false\n     * @param false|integer $id      Member id to display or false\n     * @param false|string  $nick    Member nickname to display or false\n     *\n     * @return string\n     */\n    public static function getNameWithCase($name, $surname, $title = false, $id = false, $nick = false)\n    {\n        $str = '';\n\n        if ($title !== false && $title instanceof Title) {\n            $str .= $title->tshort . ' ';\n        }\n\n        $str .= mb_strtoupper($name, 'UTF-8') . ' ' .\n            ucwords(mb_strtolower($surname, 'UTF-8'), \" \\t\\r\\n\\f\\v-_|\");\n\n        if ($id !== false || $nick !== false) {\n            $str .= ' (';\n        }\n        if ($nick !== false) {\n            $str .= $nick;\n        }\n        if ($id !== false) {\n            if ($nick !== false && !empty($nick)) {\n                $str .= ', ';\n            }\n            $str .= $id;\n        }\n        if ($id !== false || $nick !== false) {\n            $str .= ')';\n        }\n        return strip_tags($str);\n    }\n\n    /**\n     * Change password for a given user\n     *\n     * @param Db     $zdb    Database instance\n     * @param string $id_adh Member identifier\n     * @param string $pass   New password\n     *\n     * @return boolean\n     */\n    public static function updatePassword(Db $zdb, $id_adh, $pass)\n    {\n        try {\n            $cpass = password_hash($pass, PASSWORD_BCRYPT);\n\n            $update = $zdb->update(self::TABLE);\n            $update->set(\n                array('mdp_adh' => $cpass)\n            )->where(self::PK . ' = ' . $id_adh);\n            $zdb->execute($update);\n            Analog::log(\n                'Password for `' . $id_adh . '` has been updated.',\n                Analog::DEBUG\n            );\n            return true;\n        } catch (Throwable $e) {\n            Analog::log(\n                'An error occurred while updating password for `' . $id_adh .\n                '` | ' . $e->getMessage(),\n                Analog::ERROR\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Get field label\n     *\n     * @param string $field Field name\n     *\n     * @return string\n     */\n    private function getFieldLabel($field)\n    {\n        $label = $this->fields[$field]['label'];\n        //remove trailing ':' and then nbsp (for french at least)\n        $label = trim(trim($label, ':'), '&nbsp;');\n        return $label;\n    }\n\n    /**\n     * Retrieve fields from database\n     *\n     * @param Db $zdb Database instance\n     *\n     * @return array\n     */\n    public static function getDbFields(Db $zdb)\n    {\n        $columns = $zdb->getColumns(self::TABLE);\n        $fields = array();\n        foreach ($columns as $col) {\n            $fields[] = $col->getName();\n        }\n        return $fields;\n    }\n\n    /**\n     * Mark as self membership\n     *\n     * @return void\n     */\n    public function setSelfMembership()\n    {\n        $this->_self_adh = true;\n    }\n\n    /**\n     * Is member up to date?\n     *\n     * @return boolean\n     */\n    public function isUp2Date()\n    {\n        if ($this->_deps['dues']) {\n            if ($this->isDueFree()) {\n                //member is due free, he's up to date.\n                return true;\n            } else {\n                //let's check from end date, if present\n                if ($this->_due_date == null) {\n                    return false;\n                } else {\n                    $ech = new \\DateTime($this->_due_date);\n                    $now = new \\DateTime();\n                    $now->setTime(0, 0, 0);\n                    return $ech >= $now;\n                }\n            }\n        } else {\n            throw new \\RuntimeException(\n                'Cannot check if member is up to date, dues deps is disabled!'\n            );\n        }\n    }\n\n    /**\n     * Set dependencies\n     *\n     * @param Preferences $preferences Preferences instance\n     * @param array       $fields      Members fields configuration\n     * @param History     $history     History instance\n     *\n     * @return void\n     */\n    public function setDependencies(\n        Preferences $preferences,\n        array $fields,\n        History $history\n    ) {\n        $this->preferences = $preferences;\n        $this->fields = $fields;\n        $this->history = $history;\n    }\n\n    /**\n     * Check posted values validity\n     *\n     * @param array $values   All values to check, basically the $_POST array\n     *                        after sending the form\n     * @param array $required Array of required fields\n     * @param array $disabled Array of disabled fields\n     *\n     * @return true|array\n     */\n    public function check($values, $required, $disabled)\n    {\n        $this->errors = array();\n\n        $fields = self::getDbFields($this->zdb);\n\n        //reset company name if needeed\n        if (!isset($values['is_company'])) {\n            unset($values['is_company']);\n            $values['societe_adh'] = '';\n        }\n\n        //no parent if checkbox was unchecked\n        if (\n            !isset($values['attach'])\n            && empty($this->_id)\n            && isset($values['parent_id'])\n        ) {\n            unset($values['parent_id']);\n        }\n\n        if (isset($values['duplicate'])) {\n            //if we're duplicating, keep a trace (if an error occurs)\n            $this->_duplicate = true;\n        }\n\n        foreach ($fields as $key) {\n            //first of all, let's sanitize values\n            $key = strtolower($key);\n            $prop = '_' . $this->fields[$key]['propname'];\n\n            if (isset($values[$key])) {\n                $value = $values[$key];\n                if ($value !== true && $value !== false) {\n                    $value = trim($value);\n                }\n            } elseif ($this->_id == '' || $this->_id == null) {\n                switch ($key) {\n                    case 'bool_admin_adh':\n                    case 'bool_exempt_adh':\n                    case 'bool_display_info':\n                        $value = 0;\n                        break;\n                    case 'activite_adh':\n                        //values that are setted at object instanciation\n                        $value = true;\n                        break;\n                    case 'date_crea_adh':\n                    case 'sexe_adh':\n                    case 'titre_adh':\n                    case 'id_statut':\n                    case 'pref_lang':\n                    case 'parent_id':\n                        //values that are setted at object instanciation\n                        $value = $this->$prop;\n                        break;\n                    default:\n                        $value = '';\n                }\n            } else {\n                //keep stored value on update\n                if ($prop != '_password' || isset($values['mdp_adh']) && isset($values['mdp_adh2'])) {\n                    $value = $this->$prop;\n                } else {\n                    $value = null;\n                }\n            }\n\n            // if the field is enabled, check it\n            if (!isset($disabled[$key])) {\n                // fill up the adherent structure\n                if ($value !== null && $value !== true && $value !== false && !is_object($value)) {\n                    $value = stripslashes($value);\n                }\n                $this->$prop = $value;\n\n                // now, check validity\n                if ($value !== null && $value != '') {\n                    $this->validate($key, $value, $values);\n                } elseif (\n                    ($key == 'login_adh' && !isset($required['login_adh']))\n                    || ($key == 'mdp_adh' && !isset($required['mdp_adh']))\n                    && !isset($this->_id)\n                ) {\n                    $p = new Password($this->zdb);\n                    $this->$prop = $p->makeRandomPassword(15);\n                }\n            }\n        }\n\n        // missing required fields?\n        foreach ($required as $key => $val) {\n            $prop = '_' . $this->fields[$key]['propname'];\n\n            if (!isset($disabled[$key])) {\n                $mandatory_missing = false;\n                if (!isset($this->$prop) || $this->$prop == '') {\n                    $mandatory_missing = true;\n                } elseif ($key === 'titre_adh' && $this->$prop == '-1') {\n                    $mandatory_missing = true;\n                }\n\n                if ($mandatory_missing === true) {\n                    $this->errors[] = str_replace(\n                        '%field',\n                        '<a href=\"#' . $key . '\">' . $this->getFieldLabel($key) . '</a>',\n                        _T(\"- Mandatory field %field empty.\")\n                    );\n                }\n            }\n        }\n\n        //attach to/detach from parent\n        if (isset($values['detach_parent'])) {\n            $this->_parent = null;\n        }\n\n        $this->dynamicsCheck($values, $required, $disabled);\n\n        if (count($this->errors) > 0) {\n            Analog::log(\n                'Some errors has been throwed attempting to edit/store a member' . \"\\n\" .\n                print_r($this->errors, true),\n                Analog::ERROR\n            );\n            return $this->errors;\n        } else {\n            $this->checkDues();\n\n            Analog::log(\n                'Member checked successfully.',\n                Analog::DEBUG\n            );\n            return true;\n        }\n    }\n\n    /**\n     * Validate data for given key\n     * Set valid data in current object, also resets errors list\n     *\n     * @param string $field  Field name\n     * @param mixed  $value  Value we want to set\n     * @param array  $values All values, for some references\n     *\n     * @return void\n     */\n    public function validate($field, $value, $values)\n    {\n        global $preferences;\n\n        $prop = '_' . $this->fields[$field]['propname'];\n\n        if ($value === null || (is_string($value) && trim($value) == '')) {\n            //empty values are OK\n            $this->$prop = $value;\n            return;\n        }\n\n        switch ($field) {\n            // dates\n            case 'date_crea_adh':\n            case 'date_modif_adh_':\n            case 'ddn_adh':\n            case 'date_echeance':\n                try {\n                    $d = \\DateTime::createFromFormat(__(\"Y-m-d\"), $value);\n                    if ($d === false) {\n                        //try with non localized date\n                        $d = \\DateTime::createFromFormat(\"Y-m-d\", $value);\n                        if ($d === false) {\n                            throw new \\Exception('Incorrect format');\n                        }\n                    }\n\n                    if ($field === 'ddn_adh') {\n                        $now = new \\DateTime();\n                        $now->setTime(0, 0, 0);\n                        $d->setTime(0, 0, 0);\n\n                        $diff = $now->diff($d);\n                        $days = (int)$diff->format('%R%a');\n                        if ($days >= 0) {\n                            $this->errors[] = _T('- Birthdate must be set in the past!');\n                        }\n\n                        $years = (int)$diff->format('%R%Y');\n                        if ($years <= -200) {\n                            $this->errors[] = str_replace(\n                                '%years',\n                                $years * -1,\n                                _T('- Members must be less than 200 years old (currently %years)!')\n                            );\n                        }\n                    }\n                    $this->$prop = $d->format('Y-m-d');\n                } catch (Throwable $e) {\n                    Analog::log(\n                        'Wrong date format. field: ' . $field .\n                        ', value: ' . $value . ', expected fmt: ' .\n                        __(\"Y-m-d\") . ' | ' . $e->getMessage(),\n                        Analog::INFO\n                    );\n                    $this->errors[] = str_replace(\n                        array(\n                            '%date_format',\n                            '%field'\n                        ),\n                        array(\n                            __(\"Y-m-d\"),\n                            $this->getFieldLabel($field)\n                        ),\n                        _T(\"- Wrong date format (%date_format) for %field!\")\n                    );\n                }\n                break;\n            case 'titre_adh':\n                if ($value !== null && $value !== '') {\n                    if ($value == '-1') {\n                        $this->$prop = null;\n                    } elseif (!$value instanceof Title) {\n                        $this->$prop = new Title((int)$value);\n                    }\n                } else {\n                    $this->$prop = null;\n                }\n                break;\n            case 'email_adh':\n            case 'msn_adh':\n                if (!GaletteMail::isValidEmail($value)) {\n                    $this->errors[] = _T(\"- Non-valid E-Mail address!\") .\n                        ' (' . $this->getFieldLabel($field) . ')';\n                }\n                if ($field == 'email_adh') {\n                    try {\n                        $select = $this->zdb->select(self::TABLE);\n                        $select->columns(\n                            array(self::PK)\n                        )->where(array('email_adh' => $value));\n                        if ($this->_id != '' && $this->_id != null) {\n                            $select->where(\n                                self::PK . ' != ' . $this->_id\n                            );\n                        }\n\n                        $results = $this->zdb->execute($select);\n                        if ($results->count() !== 0) {\n                            $this->errors[] = _T(\"- This E-Mail address is already used by another member!\");\n                        }\n                    } catch (Throwable $e) {\n                        Analog::log(\n                            'An error occurred checking member email unicity.',\n                            Analog::ERROR\n                        );\n                        $this->errors[] = _T(\"An error has occurred while looking if login already exists.\");\n                    }\n                }\n                break;\n            case 'url_adh':\n                if ($value == 'http://') {\n                    $this->$prop = '';\n                } elseif (!isValidWebUrl($value)) {\n                    $this->errors[] = _T(\"- Non-valid Website address! Maybe you've skipped the http://?\");\n                }\n                break;\n            case 'login_adh':\n                /** FIXME: add a preference for login lenght */\n                if (strlen($value) < 2) {\n                    $this->errors[] = str_replace(\n                        '%i',\n                        2,\n                        _T(\"- The username must be composed of at least %i characters!\")\n                    );\n                } else {\n                    //check if login does not contain the @ character\n                    if (strpos($value, '@') != false) {\n                        $this->errors[] = _T(\"- The username cannot contain the @ character\");\n                    } else {\n                        //check if login is already taken\n                        try {\n                            $select = $this->zdb->select(self::TABLE);\n                            $select->columns(\n                                array(self::PK)\n                            )->where(array('login_adh' => $value));\n                            if ($this->_id != '' && $this->_id != null) {\n                                $select->where(\n                                    self::PK . ' != ' . $this->_id\n                                );\n                            }\n\n                            $results = $this->zdb->execute($select);\n                            if (\n                                $results->count() !== 0\n                                || $value == $preferences->pref_admin_login\n                            ) {\n                                $this->errors[] = _T(\"- This username is already in use, please choose another one!\");\n                            }\n                        } catch (Throwable $e) {\n                            Analog::log(\n                                'An error occurred checking member login unicity.',\n                                Analog::ERROR\n                            );\n                            $this->errors[] = _T(\"An error has occurred while looking if login already exists.\");\n                        }\n                    }\n                }\n                break;\n            case 'mdp_adh':\n                if (\n                    $this->_self_adh !== true\n                    && (!isset($values['mdp_adh2'])\n                    || $values['mdp_adh2'] != $value)\n                ) {\n                    $this->errors[] = _T(\"- The passwords don't match!\");\n                } elseif (\n                    $this->_self_adh === true\n                    && !crypt($value, $values['mdp_crypt']) == $values['mdp_crypt']\n                ) {\n                    $this->errors[] = _T(\"Password misrepeated: \");\n                } else {\n                    $pinfos = password_get_info($value);\n                    //check if value is already a hash\n                    if ($pinfos['algo'] == 0) {\n                        $this->$prop = password_hash(\n                            $value,\n                            PASSWORD_BCRYPT\n                        );\n\n                        $pwcheck = new \\Galette\\Util\\Password($preferences);\n                        $pwcheck->setAdherent($this);\n                        if (!$pwcheck->isValid($value)) {\n                            $this->errors = array_merge(\n                                $this->errors,\n                                $pwcheck->getErrors()\n                            );\n                        }\n                    }\n                }\n                break;\n            case 'id_statut':\n                try {\n                    $this->$prop = (int)$value;\n                    //check if status exists\n                    $select = $this->zdb->select(Status::TABLE);\n                    $select->where(Status::PK . '= ' . $value);\n\n                    $results = $this->zdb->execute($select);\n                    $result = $results->current();\n                    if (!$result) {\n                        $this->errors[] = str_replace(\n                            '%id',\n                            $value,\n                            _T(\"Status #%id does not exists in database.\")\n                        );\n                        break;\n                    }\n                } catch (Throwable $e) {\n                    Analog::log(\n                        'An error occurred checking status existance: ' . $e->getMessage(),\n                        Analog::ERROR\n                    );\n                    $this->errors[] = _T(\"An error has occurred while looking if status does exists.\");\n                }\n                break;\n            case 'sexe_adh':\n                if (in_array($value, [self::NC, self::MAN, self::WOMAN])) {\n                    $this->$prop = (int)$value;\n                } else {\n                    $this->errors[] = _T(\"Gender %gender does not exists!\");\n                }\n                break;\n            case 'parent_id':\n                $this->$prop = ($value instanceof Adherent) ? (int)$value->id : (int)$value;\n                $this->loadParent();\n                break;\n        }\n    }\n\n    /**\n     * Store the member\n     *\n     * @return boolean\n     */\n    public function store()\n    {\n        global $hist, $emitter;\n        $event = null;\n\n        try {\n            $values = array();\n            $fields = self::getDbFields($this->zdb);\n\n            foreach ($fields as $field) {\n                if (\n                    $field !== 'date_modif_adh'\n                    || !isset($this->_id)\n                    || $this->_id == ''\n                ) {\n                    $prop = '_' . $this->fields[$field]['propname'];\n                    if (\n                        ($field === 'bool_admin_adh'\n                        || $field === 'bool_exempt_adh'\n                        || $field === 'bool_display_info'\n                        || $field === 'activite_adh')\n                        && $this->$prop === false\n                    ) {\n                        //Handle booleans for postgres ; bugs #18899 and #19354\n                        $values[$field] = $this->zdb->isPostgres() ? 'false' : 0;\n                    } elseif ($field === 'parent_id') {\n                        //handle parents\n                        if ($this->_parent === null) {\n                            $values['parent_id'] = new Expression('NULL');\n                        } elseif ($this->parent instanceof Adherent) {\n                            $values['parent_id'] = $this->_parent->id;\n                        } else {\n                            $values['parent_id'] = $this->_parent;\n                        }\n                    } else {\n                        $values[$field] = $this->$prop;\n                    }\n                }\n            }\n\n            //an empty value will cause date to be set to 1901-01-01, a null\n            //will result in 0000-00-00. We want a database NULL value here.\n            if (!$this->_birthdate) {\n                $values['ddn_adh'] = new Expression('NULL');\n            }\n            if (!$this->_due_date) {\n                $values['date_echeance'] = new Expression('NULL');\n            }\n\n            if ($this->_title instanceof Title) {\n                $values['titre_adh'] = $this->_title->id;\n            } else {\n                $values['titre_adh'] = new Expression('NULL');\n            }\n\n            if (!$this->_parent) {\n                $values['parent_id'] = new Expression('NULL');\n            }\n\n            //fields that cannot be null\n            $notnull = [\n                '_surname'  => 'prenom_adh',\n                '_nickname' => 'pseudo_adh',\n                '_address'  => 'adresse_adh',\n                '_zipcode'  => 'cp_adh',\n                '_town'     => 'ville_adh'\n            ];\n            foreach ($notnull as $prop => $field) {\n                if ($this->$prop === null) {\n                    $values[$field] = '';\n                }\n            }\n\n            $success = false;\n            if (!isset($this->_id) || $this->_id == '') {\n                //we're inserting a new member\n                unset($values[self::PK]);\n                //set modification date\n                $this->_modification_date = date('Y-m-d');\n                $values['date_modif_adh'] = $this->_modification_date;\n\n                $insert = $this->zdb->insert(self::TABLE);\n                $insert->values($values);\n                $add = $this->zdb->execute($insert);\n                if ($add->count() > 0) {\n                    $this->_id = $this->zdb->getLastGeneratedValue($this);\n                    $this->_picture = new Picture($this->_id);\n                    // logging\n                    if ($this->_self_adh) {\n                        $hist->add(\n                            _T(\"Self_subscription as a member: \") .\n                            $this->getNameWithCase($this->_name, $this->_surname),\n                            $this->sname\n                        );\n                    } else {\n                        $hist->add(\n                            _T(\"Member card added\"),\n                            $this->sname\n                        );\n                    }\n                    $success = true;\n\n                    $event = 'member.add';\n                } else {\n                    $hist->add(_T(\"Fail to add new member.\"));\n                    throw new \\Exception(\n                        'An error occurred inserting new member!'\n                    );\n                }\n            } else {\n                //we're editing an existing member\n                if (!$this->isDueFree()) {\n                    // deadline\n                    $due_date = Contribution::getDueDate($this->zdb, $this->_id);\n                    if ($due_date) {\n                        $values['date_echeance'] = $due_date;\n                    }\n                }\n\n                if (!$this->_password) {\n                    unset($values['mdp_adh']);\n                }\n\n                $update = $this->zdb->update(self::TABLE);\n                $update->set($values);\n                $update->where(\n                    self::PK . '=' . $this->_id\n                );\n\n                $edit = $this->zdb->execute($update);\n\n                //edit == 0 does not mean there were an error, but that there\n                //were nothing to change\n                if ($edit->count() > 0) {\n                    $this->updateModificationDate();\n                    $hist->add(\n                        _T(\"Member card updated\"),\n                        $this->sname\n                    );\n                }\n                $success = true;\n\n                $event = 'member.edit';\n            }\n\n            //dynamic fields\n            if ($success) {\n                $success = $this->dynamicsStore();\n            }\n\n            //send event at the end of process, once all has been stored\n            if ($event !== null) {\n                $emitter->emit($event, $this);\n            }\n            return $success;\n        } catch (Throwable $e) {\n            Analog::log(\n                'Something went wrong :\\'( | ' . $e->getMessage() . \"\\n\" .\n                $e->getTraceAsString(),\n                Analog::ERROR\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Update member modification date\n     *\n     * @return void\n     */\n    private function updateModificationDate()\n    {\n        try {\n            $modif_date = date('Y-m-d');\n            $update = $this->zdb->update(self::TABLE);\n            $update->set(\n                array('date_modif_adh' => $modif_date)\n            )->where(self::PK . '=' . $this->_id);\n\n            $edit = $this->zdb->execute($update);\n            $this->_modification_date = $modif_date;\n        } catch (Throwable $e) {\n            Analog::log(\n                'Something went wrong updating modif date :\\'( | ' .\n                $e->getMessage() . \"\\n\" . $e->getTraceAsString(),\n                Analog::ERROR\n            );\n        }\n    }\n\n    /**\n     * Global getter method\n     *\n     * @param string $name name of the property we want to retrive\n     *\n     * @return false|object the called property\n     */\n    public function __get($name)\n    {\n        $forbidden = array(\n            'admin', 'staff', 'due_free', 'appears_in_list', 'active',\n            'row_classes', 'oldness', 'duplicate'\n        );\n        if (!defined('GALETTE_TESTS')) {\n            $forbidden[] = 'password'; //keep that for tests only\n        }\n\n        $virtuals = array(\n            'sadmin', 'sstaff', 'sdue_free', 'sappears_in_list', 'sactive',\n            'stitle', 'sstatus', 'sfullname', 'sname', 'saddress',\n            'rbirthdate', 'sgender', 'contribstatus'\n        );\n\n        if (in_array($name, $forbidden)) {\n            switch ($name) {\n                case 'admin':\n                    return $this->isAdmin();\n                case 'staff':\n                    return $this->isStaff();\n                case 'due_free':\n                    return $this->isDueFree();\n                case 'appears_in_list':\n                    return $this->appearsInMembersList();\n                case 'active':\n                    return $this->isActive();\n                case 'duplicate':\n                    return $this->isDuplicate();\n                default:\n                    throw new \\RuntimeException(\"Call to __get for '$name' is forbidden!\");\n            }\n        } else {\n            if (in_array($name, $virtuals)) {\n                if (substr($name, 0, 1) !== '_') {\n                    $real = '_' . substr($name, 1);\n                } else {\n                    $real = $name;\n                }\n                switch ($name) {\n                    case 'sadmin':\n                    case 'sdue_free':\n                    case 'sappears_in_list':\n                    case 'sstaff':\n                        return (($this->$real) ? _T(\"Yes\") : _T(\"No\"));\n                        break;\n                    case 'sactive':\n                        return (($this->$real) ? _T(\"Active\") : _T(\"Inactive\"));\n                        break;\n                    case 'stitle':\n                        if (isset($this->_title) && $this->_title instanceof Title) {\n                            return $this->_title->tshort;\n                        } else {\n                            return null;\n                        }\n                        break;\n                    case 'sstatus':\n                        $status = new Status($this->zdb);\n                        return $status->getLabel($this->_status);\n                        break;\n                    case 'sfullname':\n                        return $this->getNameWithCase(\n                            $this->_name,\n                            $this->_surname,\n                            (isset($this->_title) ? $this->title : false)\n                        );\n                        break;\n                    case 'saddress':\n                        $address = $this->_address;\n                        if ($this->_address_continuation !== '' && $this->_address_continuation !== null) {\n                            $address .= \"\\n\" . $this->_address_continuation;\n                        }\n                        return htmlspecialchars($address, ENT_QUOTES);\n                        break;\n                    case 'sname':\n                        return $this->getNameWithCase($this->_name, $this->_surname);\n                        break;\n                    case 'rbirthdate':\n                        return $this->_birthdate;\n                        break;\n                    case 'sgender':\n                        switch ($this->gender) {\n                            case self::MAN:\n                                return _T('Man');\n                            case self::WOMAN:\n                                return _T('Woman');\n                            default:\n                                return _T('Unspecified');\n                        }\n                        break;\n                    case 'contribstatus':\n                        return $this->getDues();\n                        break;\n                }\n            } else {\n                if (substr($name, 0, 1) !== '_') {\n                    $rname = '_' . $name;\n                } else {\n                    $rname = $name;\n                }\n\n                switch ($name) {\n                    case 'id':\n                    case 'id_statut':\n                        if ($this->$rname !== null) {\n                            return (int)$this->$rname;\n                        } else {\n                            return null;\n                        }\n                        break;\n                    case 'birthdate':\n                    case 'creation_date':\n                    case 'modification_date':\n                    case 'due_date':\n                        if ($this->$rname != '') {\n                            try {\n                                $d = new \\DateTime($this->$rname);\n                                return $d->format(__(\"Y-m-d\"));\n                            } catch (Throwable $e) {\n                                //oops, we've got a bad date :/\n                                Analog::log(\n                                    'Bad date (' . $this->$rname . ') | ' .\n                                    $e->getMessage(),\n                                    Analog::INFO\n                                );\n                                return $this->$rname;\n                            }\n                        }\n                        break;\n                    default:\n                        if (!property_exists($this, $rname)) {\n                            Analog::log(\n                                \"Unknown property '$rname'\",\n                                Analog::WARNING\n                            );\n                            return null;\n                        } else {\n                            return $this->$rname;\n                        }\n                        break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get member email\n     * If member does not have an email address, but is attached to\n     * another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getEmail()\n    {\n        $email = $this->_email;\n        if (empty($email)) {\n            $this->loadParent();\n            $email = $this->parent->email;\n        }\n\n        return $email;\n    }\n\n    /**\n     * Get member address.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getAddress()\n    {\n        $address = $this->_address;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $address = $this->parent->address;\n        }\n\n        return $address;\n    }\n\n    /**\n     * Get member address continuation.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getAddressContinuation()\n    {\n        $address = $this->_address;\n        $address_continuation = $this->_address_continuation;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $address_continuation = $this->parent->address_continuation;\n        }\n\n        return $address_continuation;\n    }\n\n    /**\n     * Get member zipcode.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getZipcode()\n    {\n        $address = $this->_address;\n        $zip = $this->_zipcode;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $zip = $this->parent->zipcode;\n        }\n\n        return $zip;\n    }\n\n    /**\n     * Get member town.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getTown()\n    {\n        $address = $this->_address;\n        $town = $this->_town;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $town = $this->parent->town;\n        }\n\n        return $town;\n    }\n\n    /**\n     * Get member country.\n     * If member does not have an address, but is attached to another member, we'll take information from its parent.\n     *\n     * @return string\n     */\n    public function getCountry()\n    {\n        $address = $this->_address;\n        $country = $this->_country;\n        if (empty($address) && $this->hasParent()) {\n            $this->loadParent();\n            $country = $this->parent->country;\n        }\n\n        return $country;\n    }\n\n    /**\n     * Get member age\n     *\n     * @return string\n     */\n    public function getAge()\n    {\n        if ($this->_birthdate == null) {\n            return '';\n        }\n\n        $d = \\DateTime::createFromFormat('Y-m-d', $this->_birthdate);\n        if ($d === false) {\n            Analog::log(\n                'Invalid birthdate: ' . $this->_birthdate,\n                Analog::ERROR\n            );\n            return;\n        }\n\n        return str_replace(\n            '%age',\n            $d->diff(new \\DateTime())->y,\n            _T(' (%age years old)')\n        );\n    }\n\n    /**\n     * Get parent inherited fields\n     *\n     * @return array\n     */\n    public function getParentFields()\n    {\n        return $this->parent_fields;\n    }\n\n    /**\n     * Handle files (photo and dynamics files\n     *\n     * @param array $files Files sent\n     *\n     * @return array|true\n     */\n    public function handleFiles($files)\n    {\n        $this->errors = [];\n        // picture upload\n        if (isset($files['photo'])) {\n            if ($files['photo']['error'] === UPLOAD_ERR_OK) {\n                if ($files['photo']['tmp_name'] != '') {\n                    if (is_uploaded_file($files['photo']['tmp_name'])) {\n                        $res = $this->picture->store($files['photo']);\n                        if ($res < 0) {\n                            $this->errors[]\n                                = $this->picture->getErrorMessage($res);\n                        }\n                    }\n                }\n            } elseif ($files['photo']['error'] !== UPLOAD_ERR_NO_FILE) {\n                Analog::log(\n                    $this->picture->getPhpErrorMessage($files['photo']['error']),\n                    Analog::WARNING\n                );\n                $this->errors[] = $this->picture->getPhpErrorMessage(\n                    $files['photo']['error']\n                );\n            }\n        }\n        $this->dynamicsFiles($_FILES);\n\n        if (count($this->errors) > 0) {\n            Analog::log(\n                'Some errors has been throwed attempting to edit/store a member files' . \"\\n\" .\n                print_r($this->errors, true),\n                Analog::ERROR\n            );\n            return $this->errors;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Set member as duplicate\n     *\n     * @return void\n     */\n    public function setDuplicate()\n    {\n        //mark as duplicated\n        $this->_duplicate = true;\n        $infos = $this->_others_infos_admin;\n        $this->_others_infos_admin = str_replace(\n            ['%name', '%id'],\n            [$this->sname, $this->_id],\n            _T('Duplicated from %name (%id)')\n        );\n        if (!empty($infos)) {\n            $this->_others_infos_admin .= \"\\n\" . $infos;\n        }\n        //drop id_adh\n        $this->_id = null;\n        //drop email, must be unique\n        $this->_email = null;\n        //drop creation date\n        $this->_creation_date = date(\"Y-m-d\");\n        //drop login\n        $this->_login = null;\n        //reset picture\n        $this->_picture = new Picture();\n        //remove birthdate\n        $this->_birthdate = null;\n        //remove surname\n        $this->_surname = null;\n        //not admin\n        $this->_admin = false;\n        //not due free\n        $this->_due_free = false;\n    }\n\n    /**\n     * Get current errors\n     *\n     * @return array\n     */\n    public function getErrors()\n    {\n        return $this->errors;\n    }\n\n    /**\n     * Get user groups\n     *\n     * @return array\n     */\n    public function getGroups()\n    {\n        return $this->_groups;\n    }\n\n    /**\n     * Get user managed groups\n     *\n     * @return array\n     */\n    public function getManagedGroups()\n    {\n        return $this->_managed_groups;\n    }\n\n    /**\n     * Can current logged in user edit member\n     *\n     * @param Login $login Login instance\n     *\n     * @return boolean\n     */\n    public function canEdit($login)\n    {\n        if ($this->id && $login->id == $this->id || $login->isAdmin() || $login->isStaff()) {\n            return true;\n        }\n\n        //check if requested member is part of managed groups\n        if ($login->isGroupManager()) {\n            foreach ($this->getGroups() as $g) {\n                if ($login->isGroupManager($g->getId())) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Are we currently duplicated a member?\n     *\n     * @return boolean\n     */\n    public function isDuplicate()\n    {\n        return $this->_duplicate;\n    }\n\n    /**\n     * Flag creation mail sending\n     *\n     * @param boolean $send True (default) to send creation email\n     *\n     * @return Adherent\n     */\n    public function setSendmail($send = true)\n    {\n        $this->sendmail = $send;\n        return $this;\n    }\n\n    /**\n     * Should we send administrative emails to member?\n     *\n     * @return boolean\n     */\n    public function sendEMail()\n    {\n        return $this->sendmail;\n    }\n}\n", "{extends file=\"page.tpl\"}\n\n\n{function name=draw_actions}\n                    <td class=\"{$rclass} center nowrap actions_row\">\n                        <a\n                            href=\"{path_for name=\"editMember\" data=[\"id\" => $member->id]}\"\n                            class=\"tooltip action\"\n                        >\n                            <i class=\"fas fa-user-edit fa-fw\" aria-hidden=\"true\"></i>\n                            <span class=\"sr-only\">{_T string=\"%membername: edit information\" pattern=\"/%membername/\" replace=$member->sname}</span>\n                        </a>\n{if $login->isAdmin() or $login->isStaff()}\n                        <a\n                            href=\"{path_for name=\"contributions\" data=[\"type\" => \"contributions\", \"option\" => \"member\", \"value\" => $member->id]}\"\n                            class=\"tooltip\"\n                        >\n                            <i class=\"fas fa-cookie fa-fw\" aria-hidden=\"true\"></i>\n                            <span class=\"sr-only\">{_T string=\"%membername: contributions\" pattern=\"/%membername/\" replace=$member->sname}</span>\n                        </a>\n                        <a\n                            href=\"{path_for name=\"removeMember\" data=[\"id\" => $member->id]}\"\n                            class=\"delete tooltip\"\n                        >\n                            <i class=\"fas fa-user-times fa-fw\" aria-hidden=\"true\"></i>\n                            <span class=\"sr-only\">{_T string=\"%membername: remove from database\" pattern=\"/%membername/\" replace=$member->sname}</span>\n                        </a>\n{/if}\n{if $login->isSuperAdmin()}\n                        <a\n                            href=\"{path_for name=\"impersonate\" data=[\"id\" => $member->id]}\"\n                            class=\"tooltip\"\n                        >\n                            <i class=\"fas fa-user-secret fa-fw\" aria-hidden=\"true\"></i>\n                            <span class=\"sr-only\">{_T string=\"Log in in as %membername\" pattern=\"/%membername/\" replace=$member->sname}</span>\n                        </a>\n{/if}\n{* If some additionnals actions should be added from plugins, we load the relevant template file\nWe have to use a template file, so Smarty will do its work (like replacing variables). *}\n{if $plugin_actions|@count != 0}\n    {foreach from=$plugin_actions key=plugin_name item=action}\n        {include file=$action module_id=$plugin_name|replace:'actions_':''}\n    {/foreach}\n{/if}\n                    </td>\n{/function}\n\n{block name=\"content\"}\n        <form action=\"{path_for name=\"filter-memberslist\"}\" method=\"post\" id=\"filtre\">\n        <div id=\"listfilter\">\n{if !isset($adv_filters) || !$adv_filters}\n            <label for=\"filter_str\">{_T string=\"Search:\"}&nbsp;</label>\n            <input type=\"text\" name=\"filter_str\" id=\"filter_str\" value=\"{$filters->filter_str}\" type=\"search\" placeholder=\"{_T string=\"Enter a value\"}\"/>&nbsp;\n             {_T string=\"in:\"}&nbsp;\n            <select name=\"field_filter\">\n                {html_options options=$field_filter_options selected=$filters->field_filter}\n            </select>\n             {_T string=\"among:\"}&nbsp;\n            <select name=\"membership_filter\" onchange=\"form.submit()\">\n                {html_options options=$membership_filter_options selected=$filters->membership_filter}\n            </select>\n            <select name=\"filter_account\" onchange=\"form.submit()\">\n                {html_options options=$filter_accounts_options selected=$filters->filter_account}\n            </select>\n            <select name=\"group_filter\" onchange=\"form.submit()\">\n                <option value=\"0\">{_T string=\"Select a group\"}</option>\n    {foreach from=$filter_groups_options item=group}\n                <option value=\"{$group->getId()}\"{if $filters->group_filter eq $group->getId()} selected=\"selected\"{/if}>{$group->getIndentName()}</option>\n    {/foreach}\n            </select>\n            <button type=\"submit\"  class=\"tooltip action\" title=\"{_T string=\"Apply filters\"}\" name=\"filter\">\n                <i class=\"fa fa-search\"></i>\n                {_T string=\"Filter\"}\n            </button>\n            <button type=\"submit\"  class=\"tooltip action\" title=\"{_T string=\"Save selected criteria\"}\" name=\"savesearch\" id=\"savesearch\">\n                <i class=\"fa fa-fw fa-save\"></i>\n                {_T string=\"Save\"}\n            </button>\n            <input type=\"submit\" name=\"clear_filter\" class=\"inline tooltip\" value=\"{_T string=\"Clear filter\"}\" title=\"{_T string=\"Reset all filters to defaults\"}\"/>\n            <div>\n                {_T string=\"Members that have an email address:\"}\n                <input type=\"radio\" name=\"email_filter\" id=\"filter_dc_email\" value=\"{Galette\\Repository\\Members::FILTER_DC_EMAIL}\"{if $filters->email_filter eq constant('Galette\\Repository\\Members::FILTER_DC_EMAIL')} checked=\"checked\"{/if}>\n                <label for=\"filter_dc_email\" >{_T string=\"Don't care\"}</label>\n                <input type=\"radio\" name=\"email_filter\" id=\"filter_with_email\" value=\"{Galette\\Repository\\Members::FILTER_W_EMAIL}\"{if $filters->email_filter eq constant('Galette\\Repository\\Members::FILTER_W_EMAIL')} checked=\"checked\"{/if}>\n                <label for=\"filter_with_email\" >{_T string=\"With\"}</label>\n                <input type=\"radio\" name=\"email_filter\" id=\"filter_without_email\" value=\"{Galette\\Repository\\Members::FILTER_WO_EMAIL}\"{if $filters->email_filter eq constant('Galette\\Repository\\Members::FILTER_WO_EMAIL')} checked=\"checked\"{/if}>\n                <label for=\"filter_without_email\" >{_T string=\"Without\"}</label>\n            </div>\n{else}\n            <p>\n                <strong>{_T string=\"Advanced search mode\"}</strong>\n                <button type=\"submit\" class=\"tooltip action\" title=\"{_T string=\"Change search criteria\"}\" name=\"adv_criteria\">\n                    <i class=\"fa fa-edit\"></i>\n                    {_T string=\"Change criteria\"}\n                </button>\n                <button type=\"submit\"  class=\"tooltip action\" title=\"{_T string=\"Save current advanced search criteria\"}\" name=\"savesearch\" id=\"savesearch\">\n                    <i class=\"fa fa-fw fa-save\"></i>\n                    {_T string=\"Save\"}\n                </button>\n                <input type=\"hidden\" name=\"advanced_search\" value=\"1\"/>\n                <input type=\"submit\" name=\"clear_filter\" class=\"inline tooltip\" value=\"{_T string=\"Clear filter\"}\" title=\"{_T string=\"Reset all filters to defaults\"}\"/>\n                <br/>\n                <a href=\"#\" id=\"showhideqry\">{_T string=\"Show/hide query\"}</a>\n            </p>\n            <pre id=\"sql_qry\" class=\"hidden\">{$filters->query}</pre>\n{/if}\n        </div>\n        <div class=\"infoline\">\n            {_T string=\"%count member\" plural=\"%count members\" count=$nb_members pattern=\"/%count/\" replace=$nb_members}\n            <div class=\"fright\">\n                <label for=\"nbshow\">{_T string=\"Records per page:\"}</label>\n                <select name=\"nbshow\" id=\"nbshow\">\n                    {html_options options=$nbshow_options selected=$numrows}\n                </select>\n                <noscript> <span><input type=\"submit\" value=\"{_T string=\"Change\"}\" /></span></noscript>\n            </div>\n        </div>\n        </form>\n        <form action=\"{path_for name=\"batch-memberslist\"}\" method=\"post\" id=\"listform\">\n\n        <table class=\"listing\">\n            <thead>\n                <tr>\n{foreach item=column from=$galette_list}\n    {if $column->field_id eq 'id_adh'}\n        {if $preferences->pref_show_id}\n                    <th class=\"id_row\">\n                        <a href=\"{path_for name=\"members\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Repository\\Members::ORDERBY_ID\"|constant]}\">\n                            {_T string=\"Mbr num\"}\n                            {if $filters->orderby eq constant('galette\\Repository\\Members::ORDERBY_ID')}\n                                {if $filters->ordered eq constant('Galette\\Filters\\MembersList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n        {else}\n                    <th class=\"id_row\">#</th>\n        {/if}\n    {else}\n                    <th class=\"left\">\n                        <a href=\"{path_for name=\"members\" data=[\"option\" => \"order\", \"value\" => $column->field_id]}\">\n                            {$column->label}\n                            {if $filters->orderby eq $column->field_id}\n                                {if $filters->ordered eq constant('Galette\\Filters\\MembersList::ORDER_ASC')}\n                                    <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"\"/>\n                                {else}\n                                    <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n    {/if}\n{/foreach}\n                    <th class=\"actions_row\">{_T string=\"Actions\"}</th>\n                </tr>\n            </thead>\n            <tbody>\n{foreach from=$members item=member key=ordre}\n    {assign var=rclass value=$member->getRowClass() }\n                <tr>\n    {foreach item=column from=$galette_list}\n        {if $column->field_id eq 'id_adh'}\n                    <td class=\"{$rclass} right\" data-scope=\"id\">\n            {if $preferences->pref_show_id}\n                        {$member->id}\n            {else}\n                        {$ordre+1+($filters->current_page - 1)*$numrows}\n            {/if}\n                    </td>\n        {elseif $column->field_id eq 'list_adh_name'}\n                    <td class=\"{$rclass} nowrap username_row\" data-scope=\"row\">\n                        <input type=\"checkbox\" name=\"member_sel[]\" value=\"{$member->id}\"/>\n            {if $member->isCompany()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-company.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Is a company\"}</span>\n                        </span>\n            {elseif $member->isMan()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-male.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Is a man\"}</span>\n                        </span>\n            {elseif $member->isWoman()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-female.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Is a woman\"}</span>\n                        </span>\n            {else}\n                        <img src=\"{base_url}/{$template_subdir}images/icon-empty.png\" alt=\"\" width=\"16\" height=\"16\"/>\n            {/if}\n            {if $member->email != ''}\n                        <a href=\"mailto:{$member->email}\" class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-mail.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Mail\"}</span>\n                        </a>\n            {else}\n                        <img src=\"{base_url}/{$template_subdir}images/icon-empty.png\" alt=\"\" width=\"16\" height=\"16\"/>\n            {/if}\n            {if $member->website != ''}\n                        <a href=\"{$member->website}\" class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-website.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Website\"}<span>\n                        </a>\n            {else}\n                        <img src=\"{base_url}/{$template_subdir}images/icon-empty.png\" alt=\"\" width=\"16\" height=\"16\"/>\n            {/if}\n            {if $member->isAdmin()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-star.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Admin\"}</span>\n                        </span>\n            {elseif $member->isStaff()}\n                        <span class=\"tooltip\">\n                            <img src=\"{base_url}/{$template_subdir}images/icon-staff.png\" alt=\"\" width=\"16\" height=\"16\"/>\n                            <span class=\"sr-only\">{_T string=\"Staff member\"}</span>\n                        </span>\n            {else}\n                        <img src=\"{base_url}/{$template_subdir}images/icon-empty.png\" alt=\"\" width=\"16\" height=\"16\"/>\n            {/if}\n                        {assign var=\"mid\" value=$member->id}\n                        <a href=\"{path_for name=\"member\" data=[\"id\" => $member->id]}\">{$member->sname}{if $member->company_name} ({$member->company_name|escape}){/if}</a>\n                    </td>\n        {else}\n            {assign var=\"lrclass\" value=$rclass}\n            {assign var=\"propname\" value=$column->propname}\n            {assign var=value value=$member->$propname|escape}\n\n            {if $column->field_id eq 'nom_adh'}\n                {assign var=\"value\" value=$member->sfullname}\n            {elseif $column->field_id eq 'pseudo_adh'}\n                {assign var=\"lrclass\" value=\"$rclass nowrap\"}\n                {assign var=value value=$member->$propname|escape}\n            {elseif $column->field_id eq 'tel_adh' or $column->field_id eq 'gsm_adh'}\n                {assign var=\"lrclass\" value=\"$rclass nowrap\"}\n            {elseif $column->field_id eq 'id_statut'}\n                {assign var=\"lrclass\" value=\"$rclass nowrap\"}\n                {assign var=value value={statusLabel id=$member->$propname}}\n            {elseif $column->field_id eq 'titre_adh'}\n                {if is_object($member->title)}\n                    {assign var=value value=$member->title->long}\n                {/if}\n            {elseif $column->field_id eq 'pref_lang'}\n                {assign var=\"value\" value=$i18n->getNameFromId($member->language)}\n            {elseif $column->field_id eq 'adresse_adh'}\n                {assign var=\"value\" value=$member->saddress|escape|nl2br}\n            {elseif $column->field_id eq 'bool_display_info'}\n                {assign var=\"value\" value=$member->sappears_in_list}\n            {elseif $column->field_id eq 'activite_adh'}\n                {assign var=\"value\" value=$member->sactive}\n            {elseif $column->field_id eq 'id_statut'}\n                {assign var=\"value\" value=$member->sstatus}\n            {elseif $column->field_id eq 'bool_admin_adh'}\n                {assign var=\"value\" value=$member->sadmin}\n            {elseif $column->field_id eq 'bool_exempt_adh'}\n                {assign var=\"value\" value=$member->sdue_free}\n            {elseif $column->field_id eq 'sexe_adh'}\n                {assign var=\"value\" value=$member->sgender}\n            {/if}\n                    <td class=\"{$lrclass}\" data-title=\"{$column->label}\">\n            {* Display column.\n                A check is done here to adapt display, this is may not the best way to go\n                but for notw, that works as excpected.\n            *}\n            {if not empty($value)}\n                {if $column->field_id eq 'email_adh' or $column->field_id eq 'msn_adh'}\n                                <a href=\"mailto:{$value}\">{$value}</a>\n                {elseif $column->field_id eq 'tel_adh' or $column->field_id eq 'gsm_adh'}\n                                <a href=\"tel:{$value}\">{$value}</a>\n                {elseif $column->field_id eq 'url_adh'}\n                                <a href=\"{$value}\">{$value}</a>\n                {elseif $column->field_id eq 'parent_id'}\n                                <a href=\"{path_for name=\"member\" data=[\"id\" => $member->parent]}\">{memberName id=$member->parent}</a>\n                {elseif $column->field_id eq 'ddn_adh'}\n                                {$value} {$member->getAge()}\n                {else}\n                                {$value}\n                {/if}\n            {/if}\n                    </td>\n        {/if}\n    {/foreach}\n                    {draw_actions class=$rclass member=$member login=$login plugin_actions=$plugin_actions}\n                </tr>\n{foreachelse}\n                {* colspan +1 for actions column *}\n                <tr><td colspan=\"{$galette_list|count + 1}\" class=\"emptylist\">{_T string=\"No member has been found\"}</td></tr>\n{/foreach}\n            </tbody>\n        </table>\n{if $nb_members != 0}\n        <div class=\"center cright\">\n            {_T string=\"Pages:\"}<br/>\n            <ul class=\"pages\">{$pagination}</ul>\n        </div>\n        <ul class=\"selection_menu\">\n            <li>{_T string=\"For the selection:\"}</li>\n    {if $login->isAdmin() or $login->isStaff()}\n            <li>\n                <button type=\"submit\" id=\"delete\" name=\"delete\">\n                    <i class=\"fas fa-user-times fa-fw\"></i> {_T string=\"Delete\"}\n                </button>\n            </li>\n            <li>\n                <button type=\"submit\" id=\"masschange\" name=\"masschange\" class=\"action\">\n                    <i class=\"fas fa-user-edit fa-fw\"></i> {_T string=\"Mass change\"}\n                </button>\n            </li>\n        {if $pref_mail_method neq constant('Galette\\Core\\GaletteMail::METHOD_DISABLED')}\n            <li>\n                <button type=\"submit\" id=\"sendmail\" name=\"mailing\">\n                    <i class=\"fas fa-mail-bulk fa-fw\"></i> {_T string=\"Mail\"}\n                </button>\n            </li>\n        {/if}\n    {/if}\n            <li>\n                <button type=\"submit\" id=\"attendance_sheet\" name=\"attendance_sheet\">\n                    <i class=\"fas fa-file-alt fa-fw\"></i> {_T string=\"Attendance sheet\"}\n                </button>\n            </li>\n            <li>\n                <button type=\"submit\" id=\"labels\" name=\"labels\">\n                    <i class=\"far fa-address-card fa-fw\"></i> {_T string=\"Generate labels\"}\n                </button>\n            </li>\n            <li>\n                <button type=\"submit\" id=\"cards\" name=\"cards\">\n                    <i class=\"fas fa-id-badge fa-fw\"></i> {_T string=\"Generate Member Cards\"}\n                </button>\n            </li>\n    {if $login->isAdmin() or $login->isStaff()}\n            <li>\n                <button type=\"submit\" id=\"csv\" name=\"csv\">\n                    <i class=\"fas fa-file-csv fa-fw\"></i> {_T string=\"Export as CSV\"}\n                </button>\n            </li>\n    {/if}\n    {if $plugin_batch_actions|@count != 0}\n        {foreach from=$plugin_batch_actions key=plugin_name item=action}\n            {include file=$action module_id=$plugin_name|replace:'batch_action_':''}\n        {/foreach}\n    {/if}\n        </ul>\n{/if}\n\n        </form>\n{if $nb_members != 0}\n        <div id=\"legende\" title=\"{_T string=\"Legend\"}\">\n            <h1>{_T string=\"Legend\"}</h1>\n            <table>\n                <tbody>\n                    <tr>\n                        <th class=\"\" colspan=\"4\">{_T string=\"Reading the list\"}</th>\n                    </tr>\n                    <tr>\n                        <th class=\"back\">{_T string=\"Name\"}</th>\n                        <td class=\"back\">{_T string=\"Active account\"}</td>\n                        <th class=\"inactif back\">{_T string=\"Name\"}</th>\n                        <td class=\"back\">{_T string=\"Inactive account\"}</td>\n                    </tr>\n                    <tr>\n                        <th class=\"cotis-ok color-sample\">&nbsp;</th>\n                        <td class=\"back\">{_T string=\"Membership in order\"}</td>\n                        <th class=\"cotis-soon color-sample\">&nbsp;</th>\n                        <td class=\"back\">{_T string=\"Membership will expire soon (&lt;30d)\"}</td>\n                    </tr>\n                    <tr>\n                        <th class=\"cotis-never color-sample\">&nbsp;</th>\n                        <td class=\"back\">{_T string=\"Never contributed\"}</td>\n                        <th class=\"cotis-late color-sample\">&nbsp;</th>\n                        <td class=\"back\">{_T string=\"Lateness in fee\"}</td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr>\n                        <th class=\"\" colspan=\"4\">{_T string=\"Actions\"}</th>\n                    </tr>\n                    <tr>\n                        <th class=\"action\">\n                            <i class=\"fas fa-user-edit fa-fw\"></i>\n                        </th>\n                        <td class=\"back\">{_T string=\"Modification\"}</td>\n                        <th>\n                            <i class=\"fas fa-cookie fa-fw\"></i>\n                        </th>\n                        <td class=\"back\">{_T string=\"Contributions\"}</td>\n                    </tr>\n                    <tr>\n                        <th class=\"delete\">\n                            <i class=\"fas fa-user-times fa-fw\"></i>\n                        </th>\n                        <td class=\"back\">{_T string=\"Deletion\"}</td>\n                    </tr>\n                </tbody>\n                <tbody>\n                    <tr>\n                        <th colspan=\"4\">{_T string=\"User status/interactions\"}</th>\n                    </tr>\n                    <tr>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-mail.png\" alt=\"{_T string=\"Mail\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Send an email\"}</td>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-website.png\" alt=\"{_T string=\"Website\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Visit website\"}</td>\n                    </tr>\n\n                    <tr>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-male.png\" alt=\"{_T string=\"Is a man\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Is a man\"}</td>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-female.png\" alt=\"{_T string=\"Is a woman\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Is a woman\"}</td>\n                    </tr>\n                    <tr>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-company.png\" alt=\"{_T string=\"Is a company\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Is a company\"}</td>\n                    </tr>\n                    <tr>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-star.png\" alt=\"{_T string=\"Admin\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Admin\"}</td>\n                        <th><img src=\"{base_url}/{$template_subdir}images/icon-staff.png\" alt=\"{_T string=\"Staff member\"}\" width=\"16\" height=\"16\"/></th>\n                        <td class=\"back\">{_T string=\"Staff member\"}</td>\n\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n{/if}\n{/block}\n\n{block name=\"javascripts\"}\n        <script type=\"text/javascript\">\n{if $nb_members != 0}\n        var _checkselection = function() {\n            var _checkeds = $('table.listing').find('input[type=checkbox]:checked').length;\n            if ( _checkeds == 0 ) {\n                var _el = $('<div id=\"pleaseselect\" title=\"{_T string=\"No member selected\" escape=\"js\"}\">{_T string=\"Please make sure to select at least one member from the list to perform this action.\" escape=\"js\"}</div>');\n                _el.appendTo('body').dialog({\n                    modal: true,\n                    buttons: {\n                        Ok: function() {\n                            $(this).dialog( \"close\" );\n                        }\n                    },\n                    close: function(event, ui){\n                        _el.remove();\n                    }\n                });\n                return false;\n            }\n            return true;\n        }\n{/if}\n        {* Use of Javascript to draw specific elements that are not relevant is JS is inactive *}\n        $(function(){\n{if $nb_members != 0}\n            var _checklinks = '<div class=\"checkboxes\"><span class=\"fleft\"><a href=\"#\" class=\"checkall tooltip\"><i class=\"fas fa-check-square\"></i> {_T string=\"(Un)Check all\" escape=\"js\"}</a> | <a href=\"#\" class=\"checkinvert tooltip\"><i class=\"fas fa-exchange-alt\"></i> {_T string=\"Invert selection\" escape=\"js\"}</a></span><a href=\"#\" class=\"show_legend fright\">{_T string=\"Show legend\" escape=\"js\"}</a></div>';\n            $('.listing').before(_checklinks);\n            $('.listing').after(_checklinks);\n            _bind_check();\n            _bind_legend();\n\n            $('.selection_menu *[type=\"submit\"], .selection_menu *[type=\"button\"]').click(function(){\n                if ( this.id == 'delete' ) {\n                    //mass removal is handled from 2 steps removal\n                    return;\n                }\n\n                if (!_checkselection()) {\n                    return false;\n                } else {\n    {if $existing_mailing eq true}\n                    if (this.id == 'sendmail') {\n                        var _el = $('<div id=\"existing_mailing\" title=\"{_T string=\"Existing mailing\" escape=\"js\"}\">{_T string=\"A mailing already exists. Do you want to create a new one or resume the existing?\" escape=\"js\"}</div>');\n                        _el.appendTo('body').dialog({\n                            modal: true,\n                            hide: 'fold',\n                            width: '25em',\n                            height: 150,\n                            close: function(event, ui){\n                                _el.remove();\n                            },\n                            buttons: {\n                                '{_T string=\"Resume\"}': function() {\n                                    $(this).dialog( \"close\" );\n                                    location.href = '{path_for name=\"mailing\"}';\n                                },\n                                '{_T string=\"New\"}': function() {\n                                    $(this).dialog( \"close\" );\n                                    //add required controls to the form, change its action URI, and send it.\n                                    var _form = $('#listform');\n                                    _form.append($('<input type=\"hidden\" name=\"mailing_new\" value=\"true\"/>'));\n                                    _form.append($('<input type=\"hidden\" name=\"mailing\" value=\"true\"/>'));\n                                    _form.submit();\n                                }\n                            }\n                        });\n                        return false;\n                    }\n    {/if}\n                    if (this.id == 'attendance_sheet') {\n                        _attendance_sheet_details();\n                        return false;\n                    }\n                    return true;\n                }\n            });\n{/if}\n            if ( _shq = $('#showhideqry') ) {\n                _shq.click(function(){\n                    $('#sql_qry').toggleClass('hidden');\n                    return false;\n                });\n            }\n\n            $('#savesearch').on('click', function(e) {\n                e.preventDefault();\n\n                var _el = $('<div id=\"savedsearch_details\" title=\"{_T string=\"Search title\" escape=\"js\"}\"><input type=\"text\" name=\"search_title\" id=\"search_title\"/></div>');\n                _el.appendTo('body').dialog({\n                    modal: true,\n                    hide: 'fold',\n                    width: '40%',\n                    height: 200,\n                    close: function(event, ui){\n                        _el.remove();\n                    },\n                    buttons: {\n                        '{_T string=\"Ok\" escape=\"js\"}': function() {\n                            var _form = $('#filtre');\n                            var _data = _form.serialize();\n                            _data = _data + \"&search_title=\" + $('#search_title').val();\n                            $.ajax({\n                                url: '{path_for name=\"saveSearch\"}',\n                                type: \"POST\",\n                                data: _data,\n                                datatype: 'json',\n                                {include file=\"js_loader.tpl\"},\n                                success: function(res) {\n                                    $.ajax({\n                                        url: '{path_for name=\"ajaxMessages\"}',\n                                        method: \"GET\",\n                                        success: function (message) {\n                                            $('#asso_name').after(message);\n                                        }\n                                    });\n                                }\n                            });\n\n                            $(this).dialog( \"close\" );\n                        },\n                        '{_T string=\"Cancel\" escape=\"js\"}': function() {\n                            $(this).dialog( \"close\" );\n                        }\n                    }\n                });\n            });\n\n        });\n{if $nb_members != 0}\n        {include file=\"js_removal.tpl\"}\n        {include file=\"js_removal.tpl\" selector=\"#delete\" deleteurl=\"'{path_for name=\"batch-memberslist\"}'\" extra_check=\"if (!_checkselection()) {ldelim}return false;{rdelim}\" extra_data=\"delete: true, member_sel: $('#listform input[type=\\\"checkbox\\\"]:checked').map(function(){ return $(this).val(); }).get()\" method=\"POST\"}\n\n        var _bindmassres = function(res) {\n            res.find('#btncancel')\n                .button()\n                .on('click', function(e) {\n                    e.preventDefault();\n                    res.dialog('close');\n                });\n\n            res.find('input[type=submit]')\n                .button();\n        }\n\n        $('#masschange').off('click').on('click', function(event) {\n            event.preventDefault();\n            var _this = $(this);\n\n            if (!_checkselection()) {\n                return false;\n            }\n            $.ajax({\n                url: '{path_for name=\"batch-memberslist\"}',\n                type: \"POST\",\n                data: {\n                    ajax: true,\n                    masschange: true,\n                    member_sel: $('#listform input[type=\\\"checkbox\\\"]:checked').map(function(){\n                        return $(this).val();\n                    }).get()\n                },\n                datatype: 'json',\n                {include file=\"js_loader.tpl\"},\n                success: function(res){\n                    var _res = $(res);\n                    _bindmassres(_res);\n\n                    _res.find('form').on('submit', function(e) {\n                        e.preventDefault();\n                        var _form = $(this);\n                        var _data = _form.serialize();\n                        $.ajax({\n                            url: _form.attr('action'),\n                            type: \"POST\",\n                            data: _data,\n                            datatype: 'json',\n                            {include file=\"js_loader.tpl\"},\n                            success: function(html) {\n                                var _html = $(html);\n                                _bindmassres(_html);\n\n                                $('#mass_change').remove();\n                                $('body').append(_html);\n\n                                _initTooltips('#mass_change');\n                                //_massCheckboxes('#mass_change');\n\n                                _html.dialog({\n                                    width: 'auto',\n                                    modal: true,\n                                    close: function(event, ui){\n                                        $(this).dialog('destroy').remove()\n                                    }\n                                });\n\n                                _html.find('form').on('submit', function(e) {\n                                    e.preventDefault();\n                                    var _form = $(this);\n                                    var _data = _form.serialize();\n                                    $.ajax({\n                                        url: _form.attr('action'),\n                                        type: \"POST\",\n                                        data: _data,\n                                        datatype: 'json',\n                                        {include file=\"js_loader.tpl\"},\n                                        success: function(res) {\n                                            if (res.success) {\n                                                window.location.href = _form.find('input[name=redirect_uri]').val();\n                                            } else {\n                                                $.ajax({\n                                                    url: '{path_for name=\"ajaxMessages\"}',\n                                                    method: \"GET\",\n                                                    success: function (message) {\n                                                        $('#asso_name').after(message);\n                                                    }\n                                                });\n                                            }\n                                        }\n                                    });\n                                });\n                            },\n                            error: function() {\n                                alert(\"{_T string=\"An error occurred :(\" escape=\"js\"}\");\n                            }\n                        });\n                    });\n\n                    $('body').append(_res);\n\n                    _initTooltips('#mass_change');\n                    _massCheckboxes('#mass_change');\n\n                    _res.dialog({\n                        width: 'auto',\n                        modal: true,\n                        close: function(event, ui){\n                            $(this).dialog('destroy').remove()\n                        }\n                    });\n                },\n                error: function() {\n                    alert(\"{_T string=\"An error occurred :(\" escape=\"js\"}\");\n                }\n            });\n        });\n\n        var _attendance_sheet_details = function(){\n            var _selecteds = [];\n            $('table.listing').find('input[type=checkbox]:checked').each(function(){\n                _selecteds.push($(this).val());\n            });\n            $.ajax({\n                url: '{path_for name=\"attendance_sheet_details\"}',\n                type: \"POST\",\n                data: {\n                    ajax: true,\n                    selection: _selecteds\n                },\n                dataType: 'html',\n                success: function(res){\n                    var _el = $('<div id=\"attendance_sheet_details\" title=\"{_T string=\"Attendance sheet details\" escape=\"js\"}\"> </div>');\n                    _el.appendTo('body').dialog({\n                        modal: true,\n                        hide: 'fold',\n                        width: '60%',\n                        height: 400,\n                        close: function(event, ui){\n                            _el.remove();\n                        },\n                        buttons: {\n                            Ok: function() {\n                                $('#sheet_details_form').submit();\n                                $(this).dialog( \"close\" );\n                            },\n                            Cancel: function() {\n                                $(this).dialog( \"close\" );\n                            }\n                        }\n                    }).append(res);\n                    $('#sheet_date').datepicker({\n                        changeMonth: true,\n                        changeYear: true,\n                        showOn: 'button',\n                        yearRange: 'c:c+5',\n                        buttonText: '<i class=\"far fa-calendar-alt\"></i> <span class=\"sr-only\">{_T string=\"Select a date\" escape=\"js\"}</span>'\n                    });\n                },\n                error: function() {\n                    alert(\"{_T string=\"An error occurred displaying attendance sheet details interface :(\" escape=\"js\"}\");\n                }\n            });\n        }\n{/if}\n    </script>\n{/block}\n", "{extends file=\"page.tpl\"}\n\n{block name=\"content\"}\n    <form action=\"{path_for name=\"history_filter\"}\" method=\"post\" id=\"filtre\">\n        <div id=\"listfilter\">\n            <label for=\"start_date_filter\">{_T string=\"since\"}</label>&nbsp;\n            <input type=\"text\" name=\"start_date_filter\" id=\"start_date_filter\" maxlength=\"10\" size=\"10\" value=\"{$history->filters->start_date_filter}\"/>\n            <label for=\"end_date_filter\">{_T string=\"until\"}</label>&nbsp;\n            <input type=\"text\" name=\"end_date_filter\" id=\"end_date_filter\" maxlength=\"10\" size=\"10\" value=\"{$history->filters->end_date_filter}\"/>\n\n\n    {assign var=\"users\" value=$history->getUsersList()}\n    {if $users|@count gt 0}\n            <label for=\"user_filter\">{_T string=\"Member\"}</label>&nbsp;\n            <select name=\"user_filter\" id=\"user_filter\">\n                <option value=\"0\"{if $history->filters->user_filter eq 0} selected=\"selected\"{/if}>{_T string=\"Select an user\"}</option>\n        {foreach from=$users item=$user}\n                <option value=\"{$user}\"{if $history->filters->user_filter === $user} selected=\"selected\"{/if}>{$user}</option>\n        {/foreach}\n            </select>\n    {/if}\n\n    {assign var=\"actions\" value=$history->getActionsList()}\n    {if $actions|@count gt 0}\n            <label for=\"action_filter\">{_T string=\"Action\"}</label>&nbsp;\n            <select name=\"action_filter\" id=\"action_filter\">\n                <option value=\"0\">{_T string=\"Select an action\"}</option>\n        {foreach from=$actions item=$action}\n                <option value=\"{$action|escape}\"{if $history->filters->action_filter eq $action} selected=\"selected\"{/if}>{$action|escape}</option>\n        {/foreach}\n            </select>\n    {/if}\n\n\n            <input type=\"submit\" class=\"inline\" value=\"{_T string=\"Filter\"}\"/>\n            <input type=\"submit\" name=\"clear_filter\" class=\"inline\" value=\"{_T string=\"Clear filter\"}\"/>\n        </div>\n        <div class=\"infoline\">\n            <a\n                class=\"button delete\"\n                href=\"{path_for name=\"flushHistory\"}\"\n            >\n                <i class=\"fas fa-trash\"></i>\n                {_T string=\"Flush the logs\"}\n            </a>\n            {_T string=\"%count entry\" plural=\"%count entries\" count=$history->getCount() pattern=\"/%count/\" replace=$history->getCount()}\n            <div class=\"fright\">\n                <label for=\"nbshow\">{_T string=\"Records per page:\"}</label>\n                <select name=\"nbshow\" id=\"nbshow\">\n                    {html_options options=$nbshow_options selected=$numrows}\n                </select>\n                <noscript> <span><input type=\"submit\" value=\"{_T string=\"Change\"}\" /></span></noscript>\n            </div>\n        </div>\n    </form>\n\n        <table class=\"listing\">\n            <thead>\n                <tr>\n                    <th class=\"small_head\">#</th>\n                    <th class=\"left date_row\">\n                        <a href=\"{path_for name=\"history\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Filters\\HistoryList::ORDERBY_DATE\"|constant]}\">\n                            {_T string=\"Date\"}\n                            {if $history->filters->orderby eq constant('Galette\\Filters\\HistoryList::ORDERBY_DATE')}\n                                {if $history->filters->ordered eq constant('Galette\\Filters\\HistoryList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Ascendent\"}\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Descendant\"}\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n                    <th class=\"left date_row\">\n                        <a href=\"{path_for name=\"history\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Filters\\HistoryList::ORDERBY_IP\"|constant]}\">\n                            {_T string=\"IP\"}\n                            {if $history->filters->orderby eq constant('Galette\\Filters\\HistoryList::ORDERBY_IP')}\n                                {if $history->filters->ordered eq constant('Galette\\Filters\\HistoryList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Ascendent\"}\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Descendant\"}\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n                    <th class=\"left date_row\">\n                        <a href=\"{path_for name=\"history\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Filters\\HistoryList::ORDERBY_USER\"|constant]}\">\n                            {_T string=\"User\"}\n                            {if $history->filters->orderby eq constant('Galette\\Filters\\HistoryList::ORDERBY_USER')}\n                                {if $history->filters->ordered eq constant('Galette\\Filters\\HistoryList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Ascendent\"}\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Descendant\"}\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n                    <th class=\"left username_row\">\n                        <a href=\"{path_for name=\"history\" data=[\"option\" => \"order\", \"value\" => \"Galette\\Filters\\HistoryList::ORDERBY_ACTION\"|constant]}\">\n                            {_T string=\"Action\"}\n                            {if $history->filters->orderby eq constant('Galette\\Filters\\HistoryList::ORDERBY_ACTION')}\n                                {if $history->filters->ordered eq constant('Galette\\Filters\\HistoryList::ORDER_ASC')}\n                            <img src=\"{base_url}/{$template_subdir}images/down.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Ascendent\"}\"/>\n                                {else}\n                            <img src=\"{base_url}/{$template_subdir}images/up.png\" width=\"10\" height=\"6\" alt=\"{_T string=\"Descendant\"}\"/>\n                                {/if}\n                            {/if}\n                        </a>\n                    </th>\n                    <th class=\"left\">\n                        {_T string=\"Description\"}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n{if $logs|@count == 0}\n                <tr><td colspan=\"6\" class=\"emptylist\">{_T string=\"No log found\"}</td></tr>\n{else}\n    {foreach from=$logs item=log name=eachlog}\n                <tr class=\"{if $smarty.foreach.eachlog.iteration % 2 eq 0}even{else}odd{/if}\">\n                    <td data-scope=\"row\">\n                        {$smarty.foreach.eachlog.iteration}\n                        <span class=\"row-title\">\n                            {_T string=\"History entry %id\" pattern=\"/%id/\" replace=$smarty.foreach.eachlog.iteration}\n                        </span>\n                    </td>\n                    <td class=\"nowrap\" data-title=\"{_T string=\"Date\"}\">{$log.date_log|date_format:\"%a %d/%m/%Y - %R\"}</td>\n                    <td class=\"nowrap\" data-title=\"{_T string=\"IP\"}\">{$log.ip_log}</td>\n                    <td data-title=\"{_T string=\"User\"}\">{$log.adh_log}</td>\n                    <td data-title=\"{_T string=\"Action\"}\">{$log.action_log|escape}</td>\n                    <td data-title=\"{_T string=\"Description\"}\">\n                        {$log.text_log|escape}\n        {if $log.sql_log}\n                        <span class=\"sql_log\">{$log.sql_log|escape:\"htmlall\"}</span>\n        {/if}\n                    </td>\n                </tr>\n    {foreachelse}\n                <tr><td colspan=\"6\" class=\"emptylist\">{_T string=\"logs are empty\"}</td></tr>\n    {/foreach}\n{/if}\n            </tbody>\n        </table>\n{if $logs|@count != 0}\n        <div class=\"center cright\">\n            {_T string=\"Pages:\"}<br/>\n            <ul class=\"pages\">{$pagination}</ul>\n        </div>\n{/if}\n{/block}\n\n{block name=\"javascripts\"}\n        <script type=\"text/javascript\">\n            $(function() {\n                {include file=\"js_removal.tpl\"}\n                var _elt = $('<img src=\"{base_url}/{$template_subdir}images/info.png\" class=\"qryhide\" alt=\"\" title=\"{_T string=\"Show associated query\"}\"/>');\n                $('.sql_log').hide().parent().prepend(_elt);\n                $('.qryhide').click(function() {\n                    $(this).next('.sql_log').show();\n                });\n            });\n\n            $('#start_date_filter, #end_date_filter').datepicker({\n                changeMonth: true,\n                changeYear: true,\n                showOn: 'button',\n                buttonText: '<i class=\"far fa-calendar-alt\"></i> <span class=\"sr-only\">{_T string=\"Select a date\" escape=\"js\"}</span>'\n            });\n        </script>\n{/block}\n", "{extends file=\"page.tpl\"}\n\n{block name=\"content\"}\n{if isset($navigate) and $navigate|@count != 0}\n    <nav>\n        <a href=\"{if isset($navigate.prev)}{path_for name=\"member\" data=[\"id\" => $navigate.prev]}{else}#{/if}\" class=\"button{if !isset($navigate.prev)} disabled{/if}\">\n            <i class=\"fas fa-step-backward\"></i>\n            {_T string=\"Previous\"}\n        </a>\n        {$navigate.pos}/{$navigate.count}\n        <a href=\"{if isset($navigate.next)}{path_for name=\"member\" data=[\"id\" => $navigate.next]}{else}#{/if}\" class=\"button{if !isset($navigate.next)} disabled{/if}\">\n            {_T string=\"Next\"}\n            <i class=\"fas fa-step-forward\"></i>\n        </a>\n    </nav>\n{/if}\n    <div class=\"bigtable\">\n        <div id=\"member_stateofdue\" class=\"{$member->getRowClass()}\">{$member->getDues()}</div>\n        <ul id=\"details_menu\">\n{if ($pref_card_self eq 1) or ($login->isAdmin() or $login->isStaff())}\n            <li>\n                <a\n                    href=\"{if $member->isUp2Date()}{path_for name=\"pdf-members-cards\" data=['id_adh' => $member->id]}{else}#{/if}\"\n                    title=\"{_T string=\"Generate members's card\"}\"\n                    class=\"button bigbutton{if !$member->isUp2Date()} disabled{/if} tooltip\"\n                >\n                    <i class=\"fas fa-id-badge fa-fw fa-2x\"></i>\n                    {_T string=\"Generate Member Card\"}\n                </a>\n            </li>\n            <li>\n                <a\n                    href=\"{path_for name=\"adhesionForm\" data=[\"id_adh\" => $member->id]}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-id-card fa-fw fa-2x\"></i>\n                    {_T string=\"Adhesion form\"}\n                </a>\n            </li>\n    {if $pref_mail_method neq constant('Galette\\Core\\GaletteMail::METHOD_DISABLED') && ($login->isAdmin() || $login->isStaff())}\n            <li>\n                <a\n                    href=\"{path_for name=\"retrieve-pass\" data=[\"id_adh\" => $member->id]}\"\n                    id=\"btn_lostpassword\"\n                    title=\"{_T string=\"Send member a link to generate a new passord, as if had used the 'lost password' functionnality.\"}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-unlock fa-fw fa-2x\"></i>\n                    {_T string=\"New password\"}\n                </a>\n            </li>\n    {/if}\n{/if}\n            <li>\n                <a\n                    href=\"{path_for name=\"editMember\" data=[\"id\" => $member->id]}\"\n                    class=\"button bigbutton tooltip\"\n                    title=\"{_T string=\"Edit member\"}\"\n                >\n                    <i class=\"fas fa-user-edit fa-fw fa-2x\"></i>\n                    {_T string=\"Modification\"}\n                </a>\n            </li>\n{if $login->isAdmin() or $login->isStaff()}\n            <li>\n                <a\n                    href=\"{path_for name=\"contributions\" data=[\"type\" => \"contributions\", \"option\" => \"member\", \"value\" => $member->id]}\"\n                    title=\"{_T string=\"View member's contributions\"}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-cookie fa-fw fa-2x\"></i>\n                    {_T string=\"View contributions\"}\n                </a>\n            </li>\n            <li>\n                <a\n                    href=\"{path_for name=\"addContribution\" data=[\"type\" => \"fee\"]}?id_adh={$member->id}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-user-check fa-fw fa-2x\"></i>\n                    {_T string=\"Add a membership fee\"}\n                </a>\n            </li>\n            <li>\n                <a\n                    href=\"{path_for name=\"addContribution\" data=[\"type\" => \"donation\"]}?id_adh={$member->id}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-gift fa-fw fa-2x\"></i>\n                    {_T string=\"Add a donation\"}\n                </a>\n            </li>\n            <li>\n                <a\n                    href=\"{path_for name=\"duplicateMember\" data=[\"id_adh\" => $member->id]}\"\n                    title=\"{_T string=\"Create a new member with %name information.\" pattern=\"/%name/\" replace=$member->sfullname}\"\n                    class=\"button bigbutton tooltip\"\n                >\n                    <i class=\"fas fa-clone fa-fw fa-2x\" aria-hidden=\"true\"></i>\n                    {_T string=\"Duplicate\"}\n                </a>\n            </li>\n{/if}\n{* If some additionnals actions should be added from plugins, we load the relevant template file\nWe have to use a template file, so Smarty will do its work (like replacing variables). *}\n{if $plugin_detailled_actions|@count != 0}\n  {foreach from=$plugin_detailled_actions key=plugin_name item=action}\n    {include file=$action module_id=$plugin_name|replace:'det_actions_':''}\n  {/foreach}\n{/if}\n\n        </ul>\n{if $member->hasParent() or $member->hasChildren()}\n        <table class=\"details\">\n            <caption class=\"ui-state-active ui-corner-top\">{_T string=\"Family\"}</caption>\n    {if $member->hasParent()}\n            <tr>\n                <th>{_T string=\"Attached to:\"}</th>\n                <td><a href=\"{path_for name=\"member\" data=[\"id\" => $member->parent->id]}\">{$member->parent->sfullname}</a></td>\n            </tr>\n    {/if}\n    {if $member->hasChildren()}\n            <tr>\n                <th>{_T string=\"Parent of:\"}</th>\n                <td>\n        {foreach from=$member->children item=child}\n                    <a href=\"{path_for name=\"member\" data=[\"id\" => $child->id]}\">{$child->sfullname}</a>{if not $child@last}, {/if}\n        {/foreach}\n                </td>\n            </tr>\n    {/if}\n\n{/if}\n{foreach from=$display_elements item=display_element}\n    {assign var=\"elements\" value=$display_element->elements}\n        <table class=\"details\">\n            <caption class=\"ui-state-active ui-corner-top\">{_T string=$display_element->label}</caption>\n    {foreach from=$elements item=element}\n        {if $element->field_id eq 'parent_id'}\n            {continue}\n        {/if}\n        {assign var=\"propname\" value=$element->propname}\n        {assign var=\"value\" value=$member->$propname|escape}\n\n        {if $element->field_id eq 'nom_adh'}\n            {assign var=\"value\" value=$member->sfullname}\n        {elseif $element->field_id eq 'pref_lang'}\n            {assign var=\"value\" value=$pref_lang}\n        {elseif $element->field_id eq 'adresse_adh'}\n            {assign var=\"value\" value=$member->saddress|escape|nl2br}\n        {elseif $element->field_id eq 'bool_display_info'}\n            {assign var=\"value\" value=$member->sappears_in_list}\n        {elseif $element->field_id eq 'activite_adh'}\n            {assign var=\"value\" value=$member->sactive}\n        {elseif $element->field_id eq 'id_statut'}\n            {assign var=\"value\" value=$member->sstatus}\n        {elseif $element->field_id eq 'bool_admin_adh'}\n            {assign var=\"value\" value=$member->sadmin}\n        {elseif $element->field_id eq 'bool_exempt_adh'}\n            {assign var=\"value\" value=$member->sdue_free}\n        {elseif $element->field_id eq 'info_adh'}\n            {assign var=\"value\" value=$member->others_infos_admin|escape|nl2br}\n        {elseif $element->field_id eq 'info_public_adh'}\n            {assign var=\"value\" value=$member->others_infos|escape|nl2br}\n        {/if}\n            <tr>\n                <th>{$element->label}</th>\n                <td>\n        {if $element->field_id eq 'nom_adh'}\n            {if $member->isCompany()}\n                    <i class=\"fas fa-industry fa-fw\"></i>\n            {elseif $member->isMan()}\n                    <i class=\"fas fa-mars fa-fw\"></i>\n            {elseif $member->isWoman()}\n                    <i class=\"fas fa-venus fa-fw\"></i>\n            {/if}\n        {/if}\n        {if $element->field_id eq 'email_adh' or $element->field_id eq 'msn_adh'}\n                        <a href=\"mailto:{$value}\">{$value}</a>\n        {elseif $element->field_id eq 'tel_adh' or $element->field_id eq 'gsm_adh'}\n                        <a href=\"tel:{$value}\">{$value}</a>\n        {elseif $element->field_id eq 'url_adh'}\n                        <a href=\"{$value}\">{$value}</a>\n        {elseif $element->field_id eq 'ddn_adh'}\n                        {$value} {$member->getAge()}\n        {else}\n                        {$value}\n        {/if}\n                </td>\n        {if $display_element@first and $element@first}\n            {assign var=\"mid\" value=$member->id}\n                <td rowspan=\"{$elements|count}\" style=\"width:{$member->picture->getOptimalWidth()}px;\">\n                    <img\n                        src=\"{path_for name=\"photo\" data=[\"id\" => $mid, \"rand\" => $time]}\"\n                        width=\"{$member->picture->getOptimalWidth()}\"\n                        height=\"{$member->picture->getOptimalHeight()}\"\n                        alt=\"{_T string=\"Picture\"}\"\n                        {if $login->isAdmin() or $login->isStaff() or $login->login eq $member->login} title=\"{_T string=\"You can drop new image here to get photo changed\"}\" class=\"tooltip\"{/if}\n                        id=\"photo_adh\"/>\n                </td>\n        {/if}\n            </tr>\n        {if $display_element@last and $element@last and ($member->groups != false && $member->groups|@count != 0 || $member->managed_groups != false && $member->managed_groups|@count != 0)}\n            <tr>\n                <th>{_T string=\"Groups:\"}</th>\n                <td>\n    {foreach from=$groups item=group key=kgroup}\n        {if $member->isGroupMember($group) or $member->isGroupManager($group)}\n                    <a href=\"{if $login->isGroupManager($kgroup)}{path_for name=\"groups\" data=[\"id\" => $kgroup]}{else}#{/if}\" class=\"button {if not $login->isGroupManager($kgroup)} notmanaged{/if}\">\n                        {$group}\n            {if $member->isGroupMember($group)}\n                        <i class=\"fas fa-user fa-w\" title=\"{_T string=\"Member of group\"}\"></i>\n            {/if}\n            {if $member->isGroupManager($group)}\n                        <i class=\"fas fa-user-tie fa-w\" title=\"{_T string=\"Group manager\"}\"></i>\n            {/if}\n                    </a>\n        {/if}\n    {/foreach}\n                </td>\n            </tr>\n        {/if}\n    {/foreach}\n        </table>\n{/foreach}\n\n{include file=\"display_dynamic_fields.tpl\" object=$member}\n        <a href=\"#\" id=\"back2top\">{_T string=\"Back to top\"}</a>\n    </div>\n{/block}\n{block name=\"javascripts\"}\n    {if $login->isAdmin() or $login->isStaff() or $login->login eq $member->login}\n    <script type=\"text/javascript\">\n        $(function() {\n            {include file=\"photo_dnd.tpl\"}\n\n            $('.notmanaged').click(function(){\n                var _el = $('<div id=\"not_managed_group\" title=\"{_T string=\"Not managed group\" escape=\"js\"}\">{_T string=\"You are not part of managers for the requested group.\" escape=\"js\"}</div>');\n                _el.appendTo('body').dialog({\n                    modal: true,\n                    buttons: {\n                        \"{_T string=\"Ok\" escape=\"js\"}\": function() {\n                            $( this ).dialog( \"close\" );\n                        }\n                    },\n                    close: function(event, ui){\n                        _el.remove();\n                    }\n                });\n                return false;\n            });\n        });\n    </script>\n    {/if}\n{/block}\n"], "filenames": ["galette/lib/Galette/Controllers/AuthController.php", "galette/lib/Galette/Controllers/Crud/MembersController.php", "galette/lib/Galette/Controllers/DynamicTranslationsController.php", "galette/lib/Galette/Controllers/GaletteController.php", "galette/lib/Galette/Controllers/HistoryController.php", "galette/lib/Galette/Controllers/PdfController.php", "galette/lib/Galette/Controllers/PluginsController.php", "galette/lib/Galette/Entity/Adherent.php", "galette/templates/default/gestion_adherents.tpl", "galette/templates/default/history.tpl", "galette/templates/default/voir_adherent.tpl"], "buggy_code_start_loc": [308, 400, 172, 543, 144, 583, 206, 892, 224, 29, 96], "buggy_code_end_loc": [309, 974, 172, 544, 145, 584, 290, 1683, 234, 132, 147], "fixing_code_start_loc": [308, 400, 173, 543, 144, 583, 206, 892, 224, 29, 96], "fixing_code_end_loc": [309, 974, 174, 544, 145, 584, 290, 1683, 236, 132, 147], "type": "CWE-79", "message": "Galette is a membership management web application geared towards non profit organizations. In versions prior to 0.9.5, malicious javascript code can be stored to be displayed later on self subscription page. The self subscription feature can be disabled as a workaround (this is the default state). Malicious javascript code can be executed (not stored) on login and retrieve password pages. This issue is patched in version 0.9.5.", "other": {"cve": {"id": "CVE-2021-21319", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-25T16:15:08.020", "lastModified": "2021-10-28T01:12:19.197", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Galette is a membership management web application geared towards non profit organizations. In versions prior to 0.9.5, malicious javascript code can be stored to be displayed later on self subscription page. The self subscription feature can be disabled as a workaround (this is the default state). Malicious javascript code can be executed (not stored) on login and retrieve password pages. This issue is patched in version 0.9.5."}, {"lang": "es", "value": "Galette es una aplicaci\u00f3n web de administraci\u00f3n de socios orientada a organizaciones sin \u00e1nimo de lucro. En versiones anteriores a 0.9.5, es posible puede almacenar c\u00f3digo javascript malicioso para mostrarlo posteriormente en la p\u00e1gina de auto-suscripci\u00f3n. La funci\u00f3n de auto-suscripci\u00f3n puede ser deshabilitada como una soluci\u00f3n (este es el estado predeterminado). El c\u00f3digo javascript malicioso puede ser ejecutado (no almacenado) en las p\u00e1ginas de inicio de sesi\u00f3n y recuperaci\u00f3n de contrase\u00f1a. Este problema es corregido en la versi\u00f3n 0.9.5"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:galette:galette:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.5", "matchCriteriaId": "4C2781EA-63BF-43EA-B2CD-E1A66E81D86E"}]}]}], "references": [{"url": "https://bugs.galette.eu/issues/1535", "source": "security-advisories@github.com", "tags": ["Permissions Required", "Vendor Advisory"]}, {"url": "https://github.com/galette/galette/commit/514418da973ae5b84bf97f94bd288a41e8e3f0a6", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/galette/galette/commit/8f3bdd9f7d0708466e011253064a867ca2b271a5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/galette/galette/commit/f54b2570615d38d0302e937079233e52c2d80995", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/galette/galette/security/advisories/GHSA-vjc9-mj44-x59q", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/galette/galette/commit/514418da973ae5b84bf97f94bd288a41e8e3f0a6"}}