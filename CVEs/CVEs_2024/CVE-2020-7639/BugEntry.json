{"buggy_code": ["/**\n * Set given `path`\n *\n * @param {Object} obj\n * @param {String} path\n * @param {Mixed} val\n * @return {Object}\n * @api public\n */\n\nexports.set = function (obj, path, val) {\n  var segs = path.split('.');\n  var attr = segs.pop();\n  var src = obj;\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n    obj[seg] = obj[seg] || {};\n    obj = obj[seg];\n  }\n\n  obj[attr] = val;\n\n  return src;\n};\n\n/**\n * Get given `path`\n *\n * @param {Object} obj\n * @param {String} path\n * @return {Mixed}\n * @api public\n */\n\nexports.get = function (obj, path) {\n  var segs = path.split('.');\n  var attr = segs.pop();\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n    if (!obj[seg]) return;\n    obj = obj[seg];\n  }\n\n  return obj[attr];\n};\n\n/**\n * Delete given `path`\n *\n * @param {Object} obj\n * @param {String} path\n * @return {Mixed}\n * @api public\n */\n\nexports.delete = function (obj, path) {\n  var segs = path.split('.');\n  var attr = segs.pop();\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n    if (!obj[seg]) return;\n    obj = obj[seg];\n  }\n\n  if (Array.isArray(obj)) {\n    obj.splice(path, 1);\n  } else {\n    delete obj[attr];\n  }\n};\n", "{\n  \"name\": \"@eivifj/dot\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"version\": \"1.0.2\",\n  \"description\": \"Get and set object properties with dot notation\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node test\"\n  },\n  \"repository\": \"eivindfjeldstad/dot\",\n  \"keywords\": [\n    \"dot\",\n    \"notation\",\n    \"properties\",\n    \"object\",\n    \"path\"\n  ],\n  \"license\": \"MIT\"\n}\n", "var assert = require('assert');\nvar dot = require('..');\n\nvar tests = module.exports = {\n  'test set': function () {\n    var obj = {};\n    var ret = dot.set(obj, 'cool.aid', 'rocks');\n    assert(obj.cool.aid === 'rocks');\n    assert(obj === ret);\n  },\n\n  'test get': function () {\n    var obj = {};\n    obj.cool = {};\n    obj.cool.aid = 'rocks';\n    var value = dot.get(obj, 'cool.aid');\n    assert(value === 'rocks');\n  },\n\n  'test delete': function () {\n    var obj = {};\n    obj.cool = {};\n    obj.cool.aid = 'rocks';\n    obj.cool.hello = ['world'];\n    dot.delete(obj, 'cool.aid');\n    dot.delete(obj, 'cool.hello.0');\n    assert(!obj.cool.hasOwnProperty('aid'))\n    assert(obj.cool.hello.length == 0);\n  }\n}\n\nfor (var t in tests) {\n  tests[t]();\n}\n\nconsole.log('All tests passed!');\n"], "fixing_code": ["/**\n * Set given `path`\n *\n * @param {Object} obj\n * @param {String} path\n * @param {Mixed} val\n * @return {Object}\n * @api public\n */\n\nexports.set = function(obj, path, val) {\n  var segs = path.split('.');\n  var attr = segs.pop();\n  var src = obj;\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n    if (!isSafe(obj, seg)) return src;\n    obj[seg] = obj[seg] || {};\n    obj = obj[seg];\n  }\n\n  if (isSafe(obj, attr)) {\n    obj[attr] = val;\n  }\n\n  return src;\n};\n\n/**\n * Get given `path`\n *\n * @param {Object} obj\n * @param {String} path\n * @return {Mixed}\n * @api public\n */\n\nexports.get = function(obj, path) {\n  var segs = path.split('.');\n  var attr = segs.pop();\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n    if (!obj[seg]) return;\n    obj = obj[seg];\n  }\n\n  return obj[attr];\n};\n\n/**\n * Delete given `path`\n *\n * @param {Object} obj\n * @param {String} path\n * @return {Mixed}\n * @api public\n */\n\nexports.delete = function(obj, path) {\n  var segs = path.split('.');\n  var attr = segs.pop();\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n    if (!obj[seg]) return;\n    if (!isSafe(obj, seg)) return;\n    obj = obj[seg];\n  }\n\n  if (!isSafe(obj, attr)) return;\n\n  if (Array.isArray(obj)) {\n    obj.splice(attr, 1);\n  } else {\n    delete obj[attr];\n  }\n};\n\nfunction isSafe(obj, prop) {\n  if (isObject(obj)) {\n    return obj[prop] === undefined || hasOwnProperty(obj, prop);\n  }\n\n  if (Array.isArray(obj)) {\n    return !isNaN(parseInt(prop, 10));\n  }\n\n  return false;\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n", "{\n  \"name\": \"@eivifj/dot\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"version\": \"1.0.3\",\n  \"description\": \"Get and set object properties with dot notation\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node test\"\n  },\n  \"repository\": \"eivindfjeldstad/dot\",\n  \"keywords\": [\n    \"dot\",\n    \"notation\",\n    \"properties\",\n    \"object\",\n    \"path\"\n  ],\n  \"license\": \"MIT\"\n}\n", "var assert = require('assert');\nvar dot = require('..');\n\nvar tests = (module.exports = {\n  'test set': function() {\n    var obj = {};\n    var ret = dot.set(obj, 'cool.aid', 'rocks');\n    assert(obj.cool.aid === 'rocks');\n    assert(obj === ret);\n  },\n\n  'test get': function() {\n    var obj = {};\n    obj.cool = {};\n    obj.cool.aid = 'rocks';\n    var value = dot.get(obj, 'cool.aid');\n    assert(value === 'rocks');\n  },\n\n  'test delete': function() {\n    var obj = {};\n    obj.cool = {};\n    obj.cool.aid = 'rocks';\n    obj.cool.hello = ['world'];\n    dot.delete(obj, 'cool.aid');\n    dot.delete(obj, 'cool.hello.0');\n    assert(!obj.cool.hasOwnProperty('aid'));\n    assert(obj.cool.hello.length == 0);\n  },\n\n  'test prototype pollution': function() {\n    var obj = {};\n    obj.cool = {};\n    obj.cool.aid = 'rocks';\n    obj.cool.hello = ['world'];\n    dot.set(obj, '__proto__', 'test');\n    dot.set(obj, '__proto__.toString', 'test');\n    dot.set(obj, 'toString', 'test');\n    dot.set(obj, 'cool.hello.__proto__', 'test');\n    dot.set(obj, 'cool.hello.__proto__.toString', 'test');\n    dot.set(obj, 'cool.hello.toString', 'test');\n    assert(obj.__proto__ === {}.__proto__);\n    assert(obj.toString === Object.prototype.toString);\n    assert(obj.cool.hello.__proto__ === [].__proto__);\n    assert(obj.cool.hello.toString === Array.prototype.toString);\n    dot.delete(obj, '__proto__.toString', 'test');\n    dot.delete(obj, '__proto__', 'test');\n    dot.delete(obj, 'toString', 'test');\n    dot.delete(obj, 'cool.hello.__proto__.toString', 'test');\n    dot.delete(obj, 'cool.hello.__proto__', 'test');\n    dot.delete(obj, 'cool.hello.toString', 'test');\n    assert(obj.__proto__ === {}.__proto__);\n    assert(obj.toString === Object.prototype.toString);\n    assert(obj.cool.hello.__proto__ === [].__proto__);\n    assert(obj.cool.hello.toString === Array.prototype.toString);\n  }\n});\n\nfor (var t in tests) {\n  tests[t]();\n}\n\nconsole.log('All tests passed!');\n"], "filenames": ["index.js", "package.json", "test/index.js"], "buggy_code_start_loc": [11, 6, 4], "buggy_code_end_loc": [73, 7, 31], "fixing_code_start_loc": [11, 6, 4], "fixing_code_end_loc": [100, 7, 58], "type": "CWE-1321", "message": "eivindfjeldstad-dot below 1.0.3 is vulnerable to Prototype Pollution.The function 'set' could be tricked into adding or modifying properties of 'Object.prototype' using a '__proto__' payload.", "other": {"cve": {"id": "CVE-2020-7639", "sourceIdentifier": "report@snyk.io", "published": "2020-04-06T13:15:12.987", "lastModified": "2022-12-02T19:57:58.243", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "eivindfjeldstad-dot below 1.0.3 is vulnerable to Prototype Pollution.The function 'set' could be tricked into adding or modifying properties of 'Object.prototype' using a '__proto__' payload."}, {"lang": "es", "value": "eivindfjeldstad-dot versiones por debajo de 1.0.3,  es vulnerable a una Contaminaci\u00f3n de Prototipos. La funci\u00f3n \"set\" podr\u00eda ser enga\u00f1ada para agregar o modificar propiedades de \"Object.prototype\" usando una carga \u00fatil \"__proto__\"."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dot_project:dot:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.0.3", "matchCriteriaId": "707517E5-0AE2-49DA-92EA-129956233B76"}]}]}], "references": [{"url": "https://github.com/eivindfjeldstad/dot/commit/774e4b0c97ca35d2ae40df2cd14428d37dd07a0b", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-EIVIFJDOT-564435", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/eivindfjeldstad/dot/commit/774e4b0c97ca35d2ae40df2cd14428d37dd07a0b"}}