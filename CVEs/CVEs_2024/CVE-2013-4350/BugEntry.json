{"buggy_code": ["/* SCTP kernel implementation\n * (C) Copyright IBM Corp. 2002, 2004\n * Copyright (c) 2001 Nokia, Inc.\n * Copyright (c) 2001 La Monte H.P. Yarroll\n * Copyright (c) 2002-2003 Intel Corp.\n *\n * This file is part of the SCTP kernel implementation\n *\n * SCTP over IPv6.\n *\n * This SCTP implementation is free software;\n * you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This SCTP implementation is distributed in the hope that it\n * will be useful, but WITHOUT ANY WARRANTY; without even the implied\n *\t\t   ************************\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GNU CC; see the file COPYING.  If not, write to\n * the Free Software Foundation, 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n *\n * Please send any bug reports or fixes you make to the\n * email address(es):\n *    lksctp developers <linux-sctp@vger.kernel.org>\n *\n * Written or modified by:\n *    Le Yanqun\t\t    <yanqun.le@nokia.com>\n *    Hui Huang\t\t    <hui.huang@nokia.com>\n *    La Monte H.P. Yarroll <piggy@acm.org>\n *    Sridhar Samudrala\t    <sri@us.ibm.com>\n *    Jon Grimm\t\t    <jgrimm@us.ibm.com>\n *    Ardelle Fan\t    <ardelle.fan@intel.com>\n *\n * Based on:\n *\tlinux/net/ipv6/tcp_ipv6.c\n */\n\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n\n#include <linux/module.h>\n#include <linux/errno.h>\n#include <linux/types.h>\n#include <linux/socket.h>\n#include <linux/sockios.h>\n#include <linux/net.h>\n#include <linux/in.h>\n#include <linux/in6.h>\n#include <linux/netdevice.h>\n#include <linux/init.h>\n#include <linux/ipsec.h>\n#include <linux/slab.h>\n\n#include <linux/ipv6.h>\n#include <linux/icmpv6.h>\n#include <linux/random.h>\n#include <linux/seq_file.h>\n\n#include <net/protocol.h>\n#include <net/ndisc.h>\n#include <net/ip.h>\n#include <net/ipv6.h>\n#include <net/transp_v6.h>\n#include <net/addrconf.h>\n#include <net/ip6_route.h>\n#include <net/inet_common.h>\n#include <net/inet_ecn.h>\n#include <net/sctp/sctp.h>\n\n#include <asm/uaccess.h>\n\nstatic inline int sctp_v6_addr_match_len(union sctp_addr *s1,\n\t\t\t\t\t union sctp_addr *s2);\nstatic void sctp_v6_to_addr(union sctp_addr *addr, struct in6_addr *saddr,\n\t\t\t      __be16 port);\nstatic int sctp_v6_cmp_addr(const union sctp_addr *addr1,\n\t\t\t    const union sctp_addr *addr2);\n\n/* Event handler for inet6 address addition/deletion events.\n * The sctp_local_addr_list needs to be protocted by a spin lock since\n * multiple notifiers (say IPv4 and IPv6) may be running at the same\n * time and thus corrupt the list.\n * The reader side is protected with RCU.\n */\nstatic int sctp_inet6addr_event(struct notifier_block *this, unsigned long ev,\n\t\t\t\tvoid *ptr)\n{\n\tstruct inet6_ifaddr *ifa = (struct inet6_ifaddr *)ptr;\n\tstruct sctp_sockaddr_entry *addr = NULL;\n\tstruct sctp_sockaddr_entry *temp;\n\tstruct net *net = dev_net(ifa->idev->dev);\n\tint found = 0;\n\n\tswitch (ev) {\n\tcase NETDEV_UP:\n\t\taddr = kmalloc(sizeof(struct sctp_sockaddr_entry), GFP_ATOMIC);\n\t\tif (addr) {\n\t\t\taddr->a.v6.sin6_family = AF_INET6;\n\t\t\taddr->a.v6.sin6_port = 0;\n\t\t\taddr->a.v6.sin6_addr = ifa->addr;\n\t\t\taddr->a.v6.sin6_scope_id = ifa->idev->dev->ifindex;\n\t\t\taddr->valid = 1;\n\t\t\tspin_lock_bh(&net->sctp.local_addr_lock);\n\t\t\tlist_add_tail_rcu(&addr->list, &net->sctp.local_addr_list);\n\t\t\tsctp_addr_wq_mgmt(net, addr, SCTP_ADDR_NEW);\n\t\t\tspin_unlock_bh(&net->sctp.local_addr_lock);\n\t\t}\n\t\tbreak;\n\tcase NETDEV_DOWN:\n\t\tspin_lock_bh(&net->sctp.local_addr_lock);\n\t\tlist_for_each_entry_safe(addr, temp,\n\t\t\t\t\t&net->sctp.local_addr_list, list) {\n\t\t\tif (addr->a.sa.sa_family == AF_INET6 &&\n\t\t\t\t\tipv6_addr_equal(&addr->a.v6.sin6_addr,\n\t\t\t\t\t\t&ifa->addr)) {\n\t\t\t\tsctp_addr_wq_mgmt(net, addr, SCTP_ADDR_DEL);\n\t\t\t\tfound = 1;\n\t\t\t\taddr->valid = 0;\n\t\t\t\tlist_del_rcu(&addr->list);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tspin_unlock_bh(&net->sctp.local_addr_lock);\n\t\tif (found)\n\t\t\tkfree_rcu(addr, rcu);\n\t\tbreak;\n\t}\n\n\treturn NOTIFY_DONE;\n}\n\nstatic struct notifier_block sctp_inet6addr_notifier = {\n\t.notifier_call = sctp_inet6addr_event,\n};\n\n/* ICMP error handler. */\nstatic void sctp_v6_err(struct sk_buff *skb, struct inet6_skb_parm *opt,\n\t\t\tu8 type, u8 code, int offset, __be32 info)\n{\n\tstruct inet6_dev *idev;\n\tstruct sock *sk;\n\tstruct sctp_association *asoc;\n\tstruct sctp_transport *transport;\n\tstruct ipv6_pinfo *np;\n\t__u16 saveip, savesctp;\n\tint err;\n\tstruct net *net = dev_net(skb->dev);\n\n\tidev = in6_dev_get(skb->dev);\n\n\t/* Fix up skb to look at the embedded net header. */\n\tsaveip\t = skb->network_header;\n\tsavesctp = skb->transport_header;\n\tskb_reset_network_header(skb);\n\tskb_set_transport_header(skb, offset);\n\tsk = sctp_err_lookup(net, AF_INET6, skb, sctp_hdr(skb), &asoc, &transport);\n\t/* Put back, the original pointers. */\n\tskb->network_header   = saveip;\n\tskb->transport_header = savesctp;\n\tif (!sk) {\n\t\tICMP6_INC_STATS_BH(net, idev, ICMP6_MIB_INERRORS);\n\t\tgoto out;\n\t}\n\n\t/* Warning:  The sock lock is held.  Remember to call\n\t * sctp_err_finish!\n\t */\n\n\tswitch (type) {\n\tcase ICMPV6_PKT_TOOBIG:\n\t\tsctp_icmp_frag_needed(sk, asoc, transport, ntohl(info));\n\t\tgoto out_unlock;\n\tcase ICMPV6_PARAMPROB:\n\t\tif (ICMPV6_UNK_NEXTHDR == code) {\n\t\t\tsctp_icmp_proto_unreachable(sk, asoc, transport);\n\t\t\tgoto out_unlock;\n\t\t}\n\t\tbreak;\n\tcase NDISC_REDIRECT:\n\t\tsctp_icmp_redirect(sk, transport, skb);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\n\tnp = inet6_sk(sk);\n\ticmpv6_err_convert(type, code, &err);\n\tif (!sock_owned_by_user(sk) && np->recverr) {\n\t\tsk->sk_err = err;\n\t\tsk->sk_error_report(sk);\n\t} else {  /* Only an error on timeout */\n\t\tsk->sk_err_soft = err;\n\t}\n\nout_unlock:\n\tsctp_err_finish(sk, asoc);\nout:\n\tif (likely(idev != NULL))\n\t\tin6_dev_put(idev);\n}\n\n/* Based on tcp_v6_xmit() in tcp_ipv6.c. */\nstatic int sctp_v6_xmit(struct sk_buff *skb, struct sctp_transport *transport)\n{\n\tstruct sock *sk = skb->sk;\n\tstruct ipv6_pinfo *np = inet6_sk(sk);\n\tstruct flowi6 fl6;\n\n\tmemset(&fl6, 0, sizeof(fl6));\n\n\tfl6.flowi6_proto = sk->sk_protocol;\n\n\t/* Fill in the dest address from the route entry passed with the skb\n\t * and the source address from the transport.\n\t */\n\tfl6.daddr = transport->ipaddr.v6.sin6_addr;\n\tfl6.saddr = transport->saddr.v6.sin6_addr;\n\n\tfl6.flowlabel = np->flow_label;\n\tIP6_ECN_flow_xmit(sk, fl6.flowlabel);\n\tif (ipv6_addr_type(&fl6.saddr) & IPV6_ADDR_LINKLOCAL)\n\t\tfl6.flowi6_oif = transport->saddr.v6.sin6_scope_id;\n\telse\n\t\tfl6.flowi6_oif = sk->sk_bound_dev_if;\n\n\tif (np->opt && np->opt->srcrt) {\n\t\tstruct rt0_hdr *rt0 = (struct rt0_hdr *) np->opt->srcrt;\n\t\tfl6.daddr = *rt0->addr;\n\t}\n\n\tpr_debug(\"%s: skb:%p, len:%d, src:%pI6 dst:%pI6\\n\", __func__, skb,\n\t\t skb->len, &fl6.saddr, &fl6.daddr);\n\n\tSCTP_INC_STATS(sock_net(sk), SCTP_MIB_OUTSCTPPACKS);\n\n\tif (!(transport->param_flags & SPP_PMTUD_ENABLE))\n\t\tskb->local_df = 1;\n\n\treturn ip6_xmit(sk, skb, &fl6, np->opt, np->tclass);\n}\n\n/* Returns the dst cache entry for the given source and destination ip\n * addresses.\n */\nstatic void sctp_v6_get_dst(struct sctp_transport *t, union sctp_addr *saddr,\n\t\t\t    struct flowi *fl, struct sock *sk)\n{\n\tstruct sctp_association *asoc = t->asoc;\n\tstruct dst_entry *dst = NULL;\n\tstruct flowi6 *fl6 = &fl->u.ip6;\n\tstruct sctp_bind_addr *bp;\n\tstruct sctp_sockaddr_entry *laddr;\n\tunion sctp_addr *baddr = NULL;\n\tunion sctp_addr *daddr = &t->ipaddr;\n\tunion sctp_addr dst_saddr;\n\t__u8 matchlen = 0;\n\t__u8 bmatchlen;\n\tsctp_scope_t scope;\n\n\tmemset(fl6, 0, sizeof(struct flowi6));\n\tfl6->daddr = daddr->v6.sin6_addr;\n\tfl6->fl6_dport = daddr->v6.sin6_port;\n\tfl6->flowi6_proto = IPPROTO_SCTP;\n\tif (ipv6_addr_type(&daddr->v6.sin6_addr) & IPV6_ADDR_LINKLOCAL)\n\t\tfl6->flowi6_oif = daddr->v6.sin6_scope_id;\n\n\tpr_debug(\"%s: dst=%pI6 \", __func__, &fl6->daddr);\n\n\tif (asoc)\n\t\tfl6->fl6_sport = htons(asoc->base.bind_addr.port);\n\n\tif (saddr) {\n\t\tfl6->saddr = saddr->v6.sin6_addr;\n\t\tfl6->fl6_sport = saddr->v6.sin6_port;\n\n\t\tpr_debug(\"src=%pI6 - \", &fl6->saddr);\n\t}\n\n\tdst = ip6_dst_lookup_flow(sk, fl6, NULL, false);\n\tif (!asoc || saddr)\n\t\tgoto out;\n\n\tbp = &asoc->base.bind_addr;\n\tscope = sctp_scope(daddr);\n\t/* ip6_dst_lookup has filled in the fl6->saddr for us.  Check\n\t * to see if we can use it.\n\t */\n\tif (!IS_ERR(dst)) {\n\t\t/* Walk through the bind address list and look for a bind\n\t\t * address that matches the source address of the returned dst.\n\t\t */\n\t\tsctp_v6_to_addr(&dst_saddr, &fl6->saddr, htons(bp->port));\n\t\trcu_read_lock();\n\t\tlist_for_each_entry_rcu(laddr, &bp->address_list, list) {\n\t\t\tif (!laddr->valid || (laddr->state != SCTP_ADDR_SRC))\n\t\t\t\tcontinue;\n\n\t\t\t/* Do not compare against v4 addrs */\n\t\t\tif ((laddr->a.sa.sa_family == AF_INET6) &&\n\t\t\t    (sctp_v6_cmp_addr(&dst_saddr, &laddr->a))) {\n\t\t\t\trcu_read_unlock();\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t}\n\t\trcu_read_unlock();\n\t\t/* None of the bound addresses match the source address of the\n\t\t * dst. So release it.\n\t\t */\n\t\tdst_release(dst);\n\t\tdst = NULL;\n\t}\n\n\t/* Walk through the bind address list and try to get the\n\t * best source address for a given destination.\n\t */\n\trcu_read_lock();\n\tlist_for_each_entry_rcu(laddr, &bp->address_list, list) {\n\t\tif (!laddr->valid)\n\t\t\tcontinue;\n\t\tif ((laddr->state == SCTP_ADDR_SRC) &&\n\t\t    (laddr->a.sa.sa_family == AF_INET6) &&\n\t\t    (scope <= sctp_scope(&laddr->a))) {\n\t\t\tbmatchlen = sctp_v6_addr_match_len(daddr, &laddr->a);\n\t\t\tif (!baddr || (matchlen < bmatchlen)) {\n\t\t\t\tbaddr = &laddr->a;\n\t\t\t\tmatchlen = bmatchlen;\n\t\t\t}\n\t\t}\n\t}\n\trcu_read_unlock();\n\tif (baddr) {\n\t\tfl6->saddr = baddr->v6.sin6_addr;\n\t\tfl6->fl6_sport = baddr->v6.sin6_port;\n\t\tdst = ip6_dst_lookup_flow(sk, fl6, NULL, false);\n\t}\n\nout:\n\tif (!IS_ERR_OR_NULL(dst)) {\n\t\tstruct rt6_info *rt;\n\n\t\trt = (struct rt6_info *)dst;\n\t\tt->dst = dst;\n\t\tt->dst_cookie = rt->rt6i_node ? rt->rt6i_node->fn_sernum : 0;\n\t\tpr_debug(\"rt6_dst:%pI6 rt6_src:%pI6\\n\", &rt->rt6i_dst.addr,\n\t\t\t &fl6->saddr);\n\t} else {\n\t\tt->dst = NULL;\n\n\t\tpr_debug(\"no route\\n\");\n\t}\n}\n\n/* Returns the number of consecutive initial bits that match in the 2 ipv6\n * addresses.\n */\nstatic inline int sctp_v6_addr_match_len(union sctp_addr *s1,\n\t\t\t\t\t union sctp_addr *s2)\n{\n\treturn ipv6_addr_diff(&s1->v6.sin6_addr, &s2->v6.sin6_addr);\n}\n\n/* Fills in the source address(saddr) based on the destination address(daddr)\n * and asoc's bind address list.\n */\nstatic void sctp_v6_get_saddr(struct sctp_sock *sk,\n\t\t\t      struct sctp_transport *t,\n\t\t\t      struct flowi *fl)\n{\n\tstruct flowi6 *fl6 = &fl->u.ip6;\n\tunion sctp_addr *saddr = &t->saddr;\n\n\tpr_debug(\"%s: asoc:%p dst:%p\\n\", __func__, t->asoc, t->dst);\n\n\tif (t->dst) {\n\t\tsaddr->v6.sin6_family = AF_INET6;\n\t\tsaddr->v6.sin6_addr = fl6->saddr;\n\t}\n}\n\n/* Make a copy of all potential local addresses. */\nstatic void sctp_v6_copy_addrlist(struct list_head *addrlist,\n\t\t\t\t  struct net_device *dev)\n{\n\tstruct inet6_dev *in6_dev;\n\tstruct inet6_ifaddr *ifp;\n\tstruct sctp_sockaddr_entry *addr;\n\n\trcu_read_lock();\n\tif ((in6_dev = __in6_dev_get(dev)) == NULL) {\n\t\trcu_read_unlock();\n\t\treturn;\n\t}\n\n\tread_lock_bh(&in6_dev->lock);\n\tlist_for_each_entry(ifp, &in6_dev->addr_list, if_list) {\n\t\t/* Add the address to the local list.  */\n\t\taddr = kzalloc(sizeof(*addr), GFP_ATOMIC);\n\t\tif (addr) {\n\t\t\taddr->a.v6.sin6_family = AF_INET6;\n\t\t\taddr->a.v6.sin6_port = 0;\n\t\t\taddr->a.v6.sin6_addr = ifp->addr;\n\t\t\taddr->a.v6.sin6_scope_id = dev->ifindex;\n\t\t\taddr->valid = 1;\n\t\t\tINIT_LIST_HEAD(&addr->list);\n\t\t\tlist_add_tail(&addr->list, addrlist);\n\t\t}\n\t}\n\n\tread_unlock_bh(&in6_dev->lock);\n\trcu_read_unlock();\n}\n\n/* Initialize a sockaddr_storage from in incoming skb. */\nstatic void sctp_v6_from_skb(union sctp_addr *addr,struct sk_buff *skb,\n\t\t\t     int is_saddr)\n{\n\t__be16 *port;\n\tstruct sctphdr *sh;\n\n\tport = &addr->v6.sin6_port;\n\taddr->v6.sin6_family = AF_INET6;\n\taddr->v6.sin6_flowinfo = 0; /* FIXME */\n\taddr->v6.sin6_scope_id = ((struct inet6_skb_parm *)skb->cb)->iif;\n\n\tsh = sctp_hdr(skb);\n\tif (is_saddr) {\n\t\t*port  = sh->source;\n\t\taddr->v6.sin6_addr = ipv6_hdr(skb)->saddr;\n\t} else {\n\t\t*port = sh->dest;\n\t\taddr->v6.sin6_addr = ipv6_hdr(skb)->daddr;\n\t}\n}\n\n/* Initialize an sctp_addr from a socket. */\nstatic void sctp_v6_from_sk(union sctp_addr *addr, struct sock *sk)\n{\n\taddr->v6.sin6_family = AF_INET6;\n\taddr->v6.sin6_port = 0;\n\taddr->v6.sin6_addr = inet6_sk(sk)->rcv_saddr;\n}\n\n/* Initialize sk->sk_rcv_saddr from sctp_addr. */\nstatic void sctp_v6_to_sk_saddr(union sctp_addr *addr, struct sock *sk)\n{\n\tif (addr->sa.sa_family == AF_INET && sctp_sk(sk)->v4mapped) {\n\t\tinet6_sk(sk)->rcv_saddr.s6_addr32[0] = 0;\n\t\tinet6_sk(sk)->rcv_saddr.s6_addr32[1] = 0;\n\t\tinet6_sk(sk)->rcv_saddr.s6_addr32[2] = htonl(0x0000ffff);\n\t\tinet6_sk(sk)->rcv_saddr.s6_addr32[3] =\n\t\t\taddr->v4.sin_addr.s_addr;\n\t} else {\n\t\tinet6_sk(sk)->rcv_saddr = addr->v6.sin6_addr;\n\t}\n}\n\n/* Initialize sk->sk_daddr from sctp_addr. */\nstatic void sctp_v6_to_sk_daddr(union sctp_addr *addr, struct sock *sk)\n{\n\tif (addr->sa.sa_family == AF_INET && sctp_sk(sk)->v4mapped) {\n\t\tinet6_sk(sk)->daddr.s6_addr32[0] = 0;\n\t\tinet6_sk(sk)->daddr.s6_addr32[1] = 0;\n\t\tinet6_sk(sk)->daddr.s6_addr32[2] = htonl(0x0000ffff);\n\t\tinet6_sk(sk)->daddr.s6_addr32[3] = addr->v4.sin_addr.s_addr;\n\t} else {\n\t\tinet6_sk(sk)->daddr = addr->v6.sin6_addr;\n\t}\n}\n\n/* Initialize a sctp_addr from an address parameter. */\nstatic void sctp_v6_from_addr_param(union sctp_addr *addr,\n\t\t\t\t    union sctp_addr_param *param,\n\t\t\t\t    __be16 port, int iif)\n{\n\taddr->v6.sin6_family = AF_INET6;\n\taddr->v6.sin6_port = port;\n\taddr->v6.sin6_flowinfo = 0; /* BUG */\n\taddr->v6.sin6_addr = param->v6.addr;\n\taddr->v6.sin6_scope_id = iif;\n}\n\n/* Initialize an address parameter from a sctp_addr and return the length\n * of the address parameter.\n */\nstatic int sctp_v6_to_addr_param(const union sctp_addr *addr,\n\t\t\t\t union sctp_addr_param *param)\n{\n\tint length = sizeof(sctp_ipv6addr_param_t);\n\n\tparam->v6.param_hdr.type = SCTP_PARAM_IPV6_ADDRESS;\n\tparam->v6.param_hdr.length = htons(length);\n\tparam->v6.addr = addr->v6.sin6_addr;\n\n\treturn length;\n}\n\n/* Initialize a sctp_addr from struct in6_addr. */\nstatic void sctp_v6_to_addr(union sctp_addr *addr, struct in6_addr *saddr,\n\t\t\t      __be16 port)\n{\n\taddr->sa.sa_family = AF_INET6;\n\taddr->v6.sin6_port = port;\n\taddr->v6.sin6_addr = *saddr;\n}\n\n/* Compare addresses exactly.\n * v4-mapped-v6 is also in consideration.\n */\nstatic int sctp_v6_cmp_addr(const union sctp_addr *addr1,\n\t\t\t    const union sctp_addr *addr2)\n{\n\tif (addr1->sa.sa_family != addr2->sa.sa_family) {\n\t\tif (addr1->sa.sa_family == AF_INET &&\n\t\t    addr2->sa.sa_family == AF_INET6 &&\n\t\t    ipv6_addr_v4mapped(&addr2->v6.sin6_addr)) {\n\t\t\tif (addr2->v6.sin6_port == addr1->v4.sin_port &&\n\t\t\t    addr2->v6.sin6_addr.s6_addr32[3] ==\n\t\t\t    addr1->v4.sin_addr.s_addr)\n\t\t\t\treturn 1;\n\t\t}\n\t\tif (addr2->sa.sa_family == AF_INET &&\n\t\t    addr1->sa.sa_family == AF_INET6 &&\n\t\t    ipv6_addr_v4mapped(&addr1->v6.sin6_addr)) {\n\t\t\tif (addr1->v6.sin6_port == addr2->v4.sin_port &&\n\t\t\t    addr1->v6.sin6_addr.s6_addr32[3] ==\n\t\t\t    addr2->v4.sin_addr.s_addr)\n\t\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n\tif (!ipv6_addr_equal(&addr1->v6.sin6_addr, &addr2->v6.sin6_addr))\n\t\treturn 0;\n\t/* If this is a linklocal address, compare the scope_id. */\n\tif (ipv6_addr_type(&addr1->v6.sin6_addr) & IPV6_ADDR_LINKLOCAL) {\n\t\tif (addr1->v6.sin6_scope_id && addr2->v6.sin6_scope_id &&\n\t\t    (addr1->v6.sin6_scope_id != addr2->v6.sin6_scope_id)) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn 1;\n}\n\n/* Initialize addr struct to INADDR_ANY. */\nstatic void sctp_v6_inaddr_any(union sctp_addr *addr, __be16 port)\n{\n\tmemset(addr, 0x00, sizeof(union sctp_addr));\n\taddr->v6.sin6_family = AF_INET6;\n\taddr->v6.sin6_port = port;\n}\n\n/* Is this a wildcard address? */\nstatic int sctp_v6_is_any(const union sctp_addr *addr)\n{\n\treturn ipv6_addr_any(&addr->v6.sin6_addr);\n}\n\n/* Should this be available for binding?   */\nstatic int sctp_v6_available(union sctp_addr *addr, struct sctp_sock *sp)\n{\n\tint type;\n\tconst struct in6_addr *in6 = (const struct in6_addr *)&addr->v6.sin6_addr;\n\n\ttype = ipv6_addr_type(in6);\n\tif (IPV6_ADDR_ANY == type)\n\t\treturn 1;\n\tif (type == IPV6_ADDR_MAPPED) {\n\t\tif (sp && !sp->v4mapped)\n\t\t\treturn 0;\n\t\tif (sp && ipv6_only_sock(sctp_opt2sk(sp)))\n\t\t\treturn 0;\n\t\tsctp_v6_map_v4(addr);\n\t\treturn sctp_get_af_specific(AF_INET)->available(addr, sp);\n\t}\n\tif (!(type & IPV6_ADDR_UNICAST))\n\t\treturn 0;\n\n\treturn ipv6_chk_addr(sock_net(&sp->inet.sk), in6, NULL, 0);\n}\n\n/* This function checks if the address is a valid address to be used for\n * SCTP.\n *\n * Output:\n * Return 0 - If the address is a non-unicast or an illegal address.\n * Return 1 - If the address is a unicast.\n */\nstatic int sctp_v6_addr_valid(union sctp_addr *addr,\n\t\t\t      struct sctp_sock *sp,\n\t\t\t      const struct sk_buff *skb)\n{\n\tint ret = ipv6_addr_type(&addr->v6.sin6_addr);\n\n\t/* Support v4-mapped-v6 address. */\n\tif (ret == IPV6_ADDR_MAPPED) {\n\t\t/* Note: This routine is used in input, so v4-mapped-v6\n\t\t * are disallowed here when there is no sctp_sock.\n\t\t */\n\t\tif (!sp || !sp->v4mapped)\n\t\t\treturn 0;\n\t\tif (sp && ipv6_only_sock(sctp_opt2sk(sp)))\n\t\t\treturn 0;\n\t\tsctp_v6_map_v4(addr);\n\t\treturn sctp_get_af_specific(AF_INET)->addr_valid(addr, sp, skb);\n\t}\n\n\t/* Is this a non-unicast address */\n\tif (!(ret & IPV6_ADDR_UNICAST))\n\t\treturn 0;\n\n\treturn 1;\n}\n\n/* What is the scope of 'addr'?  */\nstatic sctp_scope_t sctp_v6_scope(union sctp_addr *addr)\n{\n\tint v6scope;\n\tsctp_scope_t retval;\n\n\t/* The IPv6 scope is really a set of bit fields.\n\t * See IFA_* in <net/if_inet6.h>.  Map to a generic SCTP scope.\n\t */\n\n\tv6scope = ipv6_addr_scope(&addr->v6.sin6_addr);\n\tswitch (v6scope) {\n\tcase IFA_HOST:\n\t\tretval = SCTP_SCOPE_LOOPBACK;\n\t\tbreak;\n\tcase IFA_LINK:\n\t\tretval = SCTP_SCOPE_LINK;\n\t\tbreak;\n\tcase IFA_SITE:\n\t\tretval = SCTP_SCOPE_PRIVATE;\n\t\tbreak;\n\tdefault:\n\t\tretval = SCTP_SCOPE_GLOBAL;\n\t\tbreak;\n\t}\n\n\treturn retval;\n}\n\n/* Create and initialize a new sk for the socket to be returned by accept(). */\nstatic struct sock *sctp_v6_create_accept_sk(struct sock *sk,\n\t\t\t\t\t     struct sctp_association *asoc)\n{\n\tstruct sock *newsk;\n\tstruct ipv6_pinfo *newnp, *np = inet6_sk(sk);\n\tstruct sctp6_sock *newsctp6sk;\n\n\tnewsk = sk_alloc(sock_net(sk), PF_INET6, GFP_KERNEL, sk->sk_prot);\n\tif (!newsk)\n\t\tgoto out;\n\n\tsock_init_data(NULL, newsk);\n\n\tsctp_copy_sock(newsk, sk, asoc);\n\tsock_reset_flag(sk, SOCK_ZAPPED);\n\n\tnewsctp6sk = (struct sctp6_sock *)newsk;\n\tinet_sk(newsk)->pinet6 = &newsctp6sk->inet6;\n\n\tsctp_sk(newsk)->v4mapped = sctp_sk(sk)->v4mapped;\n\n\tnewnp = inet6_sk(newsk);\n\n\tmemcpy(newnp, np, sizeof(struct ipv6_pinfo));\n\n\t/* Initialize sk's sport, dport, rcv_saddr and daddr for getsockname()\n\t * and getpeername().\n\t */\n\tsctp_v6_to_sk_daddr(&asoc->peer.primary_addr, newsk);\n\n\tsk_refcnt_debug_inc(newsk);\n\n\tif (newsk->sk_prot->init(newsk)) {\n\t\tsk_common_release(newsk);\n\t\tnewsk = NULL;\n\t}\n\nout:\n\treturn newsk;\n}\n\n/* Map v4 address to mapped v6 address */\nstatic void sctp_v6_addr_v4map(struct sctp_sock *sp, union sctp_addr *addr)\n{\n\tif (sp->v4mapped && AF_INET == addr->sa.sa_family)\n\t\tsctp_v4_map_v6(addr);\n}\n\n/* Where did this skb come from?  */\nstatic int sctp_v6_skb_iif(const struct sk_buff *skb)\n{\n\tstruct inet6_skb_parm *opt = (struct inet6_skb_parm *) skb->cb;\n\treturn opt->iif;\n}\n\n/* Was this packet marked by Explicit Congestion Notification? */\nstatic int sctp_v6_is_ce(const struct sk_buff *skb)\n{\n\treturn *((__u32 *)(ipv6_hdr(skb))) & htonl(1 << 20);\n}\n\n/* Dump the v6 addr to the seq file. */\nstatic void sctp_v6_seq_dump_addr(struct seq_file *seq, union sctp_addr *addr)\n{\n\tseq_printf(seq, \"%pI6 \", &addr->v6.sin6_addr);\n}\n\nstatic void sctp_v6_ecn_capable(struct sock *sk)\n{\n\tinet6_sk(sk)->tclass |= INET_ECN_ECT_0;\n}\n\n/* Initialize a PF_INET6 socket msg_name. */\nstatic void sctp_inet6_msgname(char *msgname, int *addr_len)\n{\n\tstruct sockaddr_in6 *sin6;\n\n\tsin6 = (struct sockaddr_in6 *)msgname;\n\tsin6->sin6_family = AF_INET6;\n\tsin6->sin6_flowinfo = 0;\n\tsin6->sin6_scope_id = 0; /*FIXME */\n\t*addr_len = sizeof(struct sockaddr_in6);\n}\n\n/* Initialize a PF_INET msgname from a ulpevent. */\nstatic void sctp_inet6_event_msgname(struct sctp_ulpevent *event,\n\t\t\t\t     char *msgname, int *addrlen)\n{\n\tstruct sockaddr_in6 *sin6, *sin6from;\n\n\tif (msgname) {\n\t\tunion sctp_addr *addr;\n\t\tstruct sctp_association *asoc;\n\n\t\tasoc = event->asoc;\n\t\tsctp_inet6_msgname(msgname, addrlen);\n\t\tsin6 = (struct sockaddr_in6 *)msgname;\n\t\tsin6->sin6_port = htons(asoc->peer.port);\n\t\taddr = &asoc->peer.primary_addr;\n\n\t\t/* Note: If we go to a common v6 format, this code\n\t\t * will change.\n\t\t */\n\n\t\t/* Map ipv4 address into v4-mapped-on-v6 address.  */\n\t\tif (sctp_sk(asoc->base.sk)->v4mapped &&\n\t\t    AF_INET == addr->sa.sa_family) {\n\t\t\tsctp_v4_map_v6((union sctp_addr *)sin6);\n\t\t\tsin6->sin6_addr.s6_addr32[3] =\n\t\t\t\taddr->v4.sin_addr.s_addr;\n\t\t\treturn;\n\t\t}\n\n\t\tsin6from = &asoc->peer.primary_addr.v6;\n\t\tsin6->sin6_addr = sin6from->sin6_addr;\n\t\tif (ipv6_addr_type(&sin6->sin6_addr) & IPV6_ADDR_LINKLOCAL)\n\t\t\tsin6->sin6_scope_id = sin6from->sin6_scope_id;\n\t}\n}\n\n/* Initialize a msg_name from an inbound skb. */\nstatic void sctp_inet6_skb_msgname(struct sk_buff *skb, char *msgname,\n\t\t\t\t   int *addr_len)\n{\n\tstruct sctphdr *sh;\n\tstruct sockaddr_in6 *sin6;\n\n\tif (msgname) {\n\t\tsctp_inet6_msgname(msgname, addr_len);\n\t\tsin6 = (struct sockaddr_in6 *)msgname;\n\t\tsh = sctp_hdr(skb);\n\t\tsin6->sin6_port = sh->source;\n\n\t\t/* Map ipv4 address into v4-mapped-on-v6 address. */\n\t\tif (sctp_sk(skb->sk)->v4mapped &&\n\t\t    ip_hdr(skb)->version == 4) {\n\t\t\tsctp_v4_map_v6((union sctp_addr *)sin6);\n\t\t\tsin6->sin6_addr.s6_addr32[3] = ip_hdr(skb)->saddr;\n\t\t\treturn;\n\t\t}\n\n\t\t/* Otherwise, just copy the v6 address. */\n\t\tsin6->sin6_addr = ipv6_hdr(skb)->saddr;\n\t\tif (ipv6_addr_type(&sin6->sin6_addr) & IPV6_ADDR_LINKLOCAL) {\n\t\t\tstruct sctp_ulpevent *ev = sctp_skb2event(skb);\n\t\t\tsin6->sin6_scope_id = ev->iif;\n\t\t}\n\t}\n}\n\n/* Do we support this AF? */\nstatic int sctp_inet6_af_supported(sa_family_t family, struct sctp_sock *sp)\n{\n\tswitch (family) {\n\tcase AF_INET6:\n\t\treturn 1;\n\t/* v4-mapped-v6 addresses */\n\tcase AF_INET:\n\t\tif (!__ipv6_only_sock(sctp_opt2sk(sp)))\n\t\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}\n\n/* Address matching with wildcards allowed.  This extra level\n * of indirection lets us choose whether a PF_INET6 should\n * disallow any v4 addresses if we so choose.\n */\nstatic int sctp_inet6_cmp_addr(const union sctp_addr *addr1,\n\t\t\t       const union sctp_addr *addr2,\n\t\t\t       struct sctp_sock *opt)\n{\n\tstruct sctp_af *af1, *af2;\n\tstruct sock *sk = sctp_opt2sk(opt);\n\n\taf1 = sctp_get_af_specific(addr1->sa.sa_family);\n\taf2 = sctp_get_af_specific(addr2->sa.sa_family);\n\n\tif (!af1 || !af2)\n\t\treturn 0;\n\n\t/* If the socket is IPv6 only, v4 addrs will not match */\n\tif (__ipv6_only_sock(sk) && af1 != af2)\n\t\treturn 0;\n\n\t/* Today, wildcard AF_INET/AF_INET6. */\n\tif (sctp_is_any(sk, addr1) || sctp_is_any(sk, addr2))\n\t\treturn 1;\n\n\tif (addr1->sa.sa_family != addr2->sa.sa_family)\n\t\treturn 0;\n\n\treturn af1->cmp_addr(addr1, addr2);\n}\n\n/* Verify that the provided sockaddr looks bindable.   Common verification,\n * has already been taken care of.\n */\nstatic int sctp_inet6_bind_verify(struct sctp_sock *opt, union sctp_addr *addr)\n{\n\tstruct sctp_af *af;\n\n\t/* ASSERT: address family has already been verified. */\n\tif (addr->sa.sa_family != AF_INET6)\n\t\taf = sctp_get_af_specific(addr->sa.sa_family);\n\telse {\n\t\tint type = ipv6_addr_type(&addr->v6.sin6_addr);\n\t\tstruct net_device *dev;\n\n\t\tif (type & IPV6_ADDR_LINKLOCAL) {\n\t\t\tstruct net *net;\n\t\t\tif (!addr->v6.sin6_scope_id)\n\t\t\t\treturn 0;\n\t\t\tnet = sock_net(&opt->inet.sk);\n\t\t\trcu_read_lock();\n\t\t\tdev = dev_get_by_index_rcu(net, addr->v6.sin6_scope_id);\n\t\t\tif (!dev ||\n\t\t\t    !ipv6_chk_addr(net, &addr->v6.sin6_addr, dev, 0)) {\n\t\t\t\trcu_read_unlock();\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\trcu_read_unlock();\n\t\t} else if (type == IPV6_ADDR_MAPPED) {\n\t\t\tif (!opt->v4mapped)\n\t\t\t\treturn 0;\n\t\t}\n\n\t\taf = opt->pf->af;\n\t}\n\treturn af->available(addr, opt);\n}\n\n/* Verify that the provided sockaddr looks sendable.   Common verification,\n * has already been taken care of.\n */\nstatic int sctp_inet6_send_verify(struct sctp_sock *opt, union sctp_addr *addr)\n{\n\tstruct sctp_af *af = NULL;\n\n\t/* ASSERT: address family has already been verified. */\n\tif (addr->sa.sa_family != AF_INET6)\n\t\taf = sctp_get_af_specific(addr->sa.sa_family);\n\telse {\n\t\tint type = ipv6_addr_type(&addr->v6.sin6_addr);\n\t\tstruct net_device *dev;\n\n\t\tif (type & IPV6_ADDR_LINKLOCAL) {\n\t\t\tif (!addr->v6.sin6_scope_id)\n\t\t\t\treturn 0;\n\t\t\trcu_read_lock();\n\t\t\tdev = dev_get_by_index_rcu(sock_net(&opt->inet.sk),\n\t\t\t\t\t\t   addr->v6.sin6_scope_id);\n\t\t\trcu_read_unlock();\n\t\t\tif (!dev)\n\t\t\t\treturn 0;\n\t\t}\n\t\taf = opt->pf->af;\n\t}\n\n\treturn af != NULL;\n}\n\n/* Fill in Supported Address Type information for INIT and INIT-ACK\n * chunks.   Note: In the future, we may want to look at sock options\n * to determine whether a PF_INET6 socket really wants to have IPV4\n * addresses.\n * Returns number of addresses supported.\n */\nstatic int sctp_inet6_supported_addrs(const struct sctp_sock *opt,\n\t\t\t\t      __be16 *types)\n{\n\ttypes[0] = SCTP_PARAM_IPV6_ADDRESS;\n\tif (!opt || !ipv6_only_sock(sctp_opt2sk(opt))) {\n\t\ttypes[1] = SCTP_PARAM_IPV4_ADDRESS;\n\t\treturn 2;\n\t}\n\treturn 1;\n}\n\nstatic const struct proto_ops inet6_seqpacket_ops = {\n\t.family\t\t   = PF_INET6,\n\t.owner\t\t   = THIS_MODULE,\n\t.release\t   = inet6_release,\n\t.bind\t\t   = inet6_bind,\n\t.connect\t   = inet_dgram_connect,\n\t.socketpair\t   = sock_no_socketpair,\n\t.accept\t\t   = inet_accept,\n\t.getname\t   = inet6_getname,\n\t.poll\t\t   = sctp_poll,\n\t.ioctl\t\t   = inet6_ioctl,\n\t.listen\t\t   = sctp_inet_listen,\n\t.shutdown\t   = inet_shutdown,\n\t.setsockopt\t   = sock_common_setsockopt,\n\t.getsockopt\t   = sock_common_getsockopt,\n\t.sendmsg\t   = inet_sendmsg,\n\t.recvmsg\t   = sock_common_recvmsg,\n\t.mmap\t\t   = sock_no_mmap,\n#ifdef CONFIG_COMPAT\n\t.compat_setsockopt = compat_sock_common_setsockopt,\n\t.compat_getsockopt = compat_sock_common_getsockopt,\n#endif\n};\n\nstatic struct inet_protosw sctpv6_seqpacket_protosw = {\n\t.type          = SOCK_SEQPACKET,\n\t.protocol      = IPPROTO_SCTP,\n\t.prot \t       = &sctpv6_prot,\n\t.ops           = &inet6_seqpacket_ops,\n\t.no_check      = 0,\n\t.flags         = SCTP_PROTOSW_FLAG\n};\nstatic struct inet_protosw sctpv6_stream_protosw = {\n\t.type          = SOCK_STREAM,\n\t.protocol      = IPPROTO_SCTP,\n\t.prot \t       = &sctpv6_prot,\n\t.ops           = &inet6_seqpacket_ops,\n\t.no_check      = 0,\n\t.flags         = SCTP_PROTOSW_FLAG,\n};\n\nstatic int sctp6_rcv(struct sk_buff *skb)\n{\n\treturn sctp_rcv(skb) ? -1 : 0;\n}\n\nstatic const struct inet6_protocol sctpv6_protocol = {\n\t.handler      = sctp6_rcv,\n\t.err_handler  = sctp_v6_err,\n\t.flags        = INET6_PROTO_NOPOLICY | INET6_PROTO_FINAL,\n};\n\nstatic struct sctp_af sctp_af_inet6 = {\n\t.sa_family\t   = AF_INET6,\n\t.sctp_xmit\t   = sctp_v6_xmit,\n\t.setsockopt\t   = ipv6_setsockopt,\n\t.getsockopt\t   = ipv6_getsockopt,\n\t.get_dst\t   = sctp_v6_get_dst,\n\t.get_saddr\t   = sctp_v6_get_saddr,\n\t.copy_addrlist\t   = sctp_v6_copy_addrlist,\n\t.from_skb\t   = sctp_v6_from_skb,\n\t.from_sk\t   = sctp_v6_from_sk,\n\t.to_sk_saddr\t   = sctp_v6_to_sk_saddr,\n\t.to_sk_daddr\t   = sctp_v6_to_sk_daddr,\n\t.from_addr_param   = sctp_v6_from_addr_param,\n\t.to_addr_param\t   = sctp_v6_to_addr_param,\n\t.cmp_addr\t   = sctp_v6_cmp_addr,\n\t.scope\t\t   = sctp_v6_scope,\n\t.addr_valid\t   = sctp_v6_addr_valid,\n\t.inaddr_any\t   = sctp_v6_inaddr_any,\n\t.is_any\t\t   = sctp_v6_is_any,\n\t.available\t   = sctp_v6_available,\n\t.skb_iif\t   = sctp_v6_skb_iif,\n\t.is_ce\t\t   = sctp_v6_is_ce,\n\t.seq_dump_addr\t   = sctp_v6_seq_dump_addr,\n\t.ecn_capable\t   = sctp_v6_ecn_capable,\n\t.net_header_len\t   = sizeof(struct ipv6hdr),\n\t.sockaddr_len\t   = sizeof(struct sockaddr_in6),\n#ifdef CONFIG_COMPAT\n\t.compat_setsockopt = compat_ipv6_setsockopt,\n\t.compat_getsockopt = compat_ipv6_getsockopt,\n#endif\n};\n\nstatic struct sctp_pf sctp_pf_inet6 = {\n\t.event_msgname = sctp_inet6_event_msgname,\n\t.skb_msgname   = sctp_inet6_skb_msgname,\n\t.af_supported  = sctp_inet6_af_supported,\n\t.cmp_addr      = sctp_inet6_cmp_addr,\n\t.bind_verify   = sctp_inet6_bind_verify,\n\t.send_verify   = sctp_inet6_send_verify,\n\t.supported_addrs = sctp_inet6_supported_addrs,\n\t.create_accept_sk = sctp_v6_create_accept_sk,\n\t.addr_v4map    = sctp_v6_addr_v4map,\n\t.af            = &sctp_af_inet6,\n};\n\n/* Initialize IPv6 support and register with socket layer.  */\nvoid sctp_v6_pf_init(void)\n{\n\t/* Register the SCTP specific PF_INET6 functions. */\n\tsctp_register_pf(&sctp_pf_inet6, PF_INET6);\n\n\t/* Register the SCTP specific AF_INET6 functions. */\n\tsctp_register_af(&sctp_af_inet6);\n}\n\nvoid sctp_v6_pf_exit(void)\n{\n\tlist_del(&sctp_af_inet6.list);\n}\n\n/* Initialize IPv6 support and register with socket layer.  */\nint sctp_v6_protosw_init(void)\n{\n\tint rc;\n\n\trc = proto_register(&sctpv6_prot, 1);\n\tif (rc)\n\t\treturn rc;\n\n\t/* Add SCTPv6(UDP and TCP style) to inetsw6 linked list. */\n\tinet6_register_protosw(&sctpv6_seqpacket_protosw);\n\tinet6_register_protosw(&sctpv6_stream_protosw);\n\n\treturn 0;\n}\n\nvoid sctp_v6_protosw_exit(void)\n{\n\tinet6_unregister_protosw(&sctpv6_seqpacket_protosw);\n\tinet6_unregister_protosw(&sctpv6_stream_protosw);\n\tproto_unregister(&sctpv6_prot);\n}\n\n\n/* Register with inet6 layer. */\nint sctp_v6_add_protocol(void)\n{\n\t/* Register notifier for inet6 address additions/deletions. */\n\tregister_inet6addr_notifier(&sctp_inet6addr_notifier);\n\n\tif (inet6_add_protocol(&sctpv6_protocol, IPPROTO_SCTP) < 0)\n\t\treturn -EAGAIN;\n\n\treturn 0;\n}\n\n/* Unregister with inet6 layer. */\nvoid sctp_v6_del_protocol(void)\n{\n\tinet6_del_protocol(&sctpv6_protocol, IPPROTO_SCTP);\n\tunregister_inet6addr_notifier(&sctp_inet6addr_notifier);\n}\n"], "fixing_code": ["/* SCTP kernel implementation\n * (C) Copyright IBM Corp. 2002, 2004\n * Copyright (c) 2001 Nokia, Inc.\n * Copyright (c) 2001 La Monte H.P. Yarroll\n * Copyright (c) 2002-2003 Intel Corp.\n *\n * This file is part of the SCTP kernel implementation\n *\n * SCTP over IPv6.\n *\n * This SCTP implementation is free software;\n * you can redistribute it and/or modify it under the terms of\n * the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This SCTP implementation is distributed in the hope that it\n * will be useful, but WITHOUT ANY WARRANTY; without even the implied\n *\t\t   ************************\n * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GNU CC; see the file COPYING.  If not, write to\n * the Free Software Foundation, 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n *\n * Please send any bug reports or fixes you make to the\n * email address(es):\n *    lksctp developers <linux-sctp@vger.kernel.org>\n *\n * Written or modified by:\n *    Le Yanqun\t\t    <yanqun.le@nokia.com>\n *    Hui Huang\t\t    <hui.huang@nokia.com>\n *    La Monte H.P. Yarroll <piggy@acm.org>\n *    Sridhar Samudrala\t    <sri@us.ibm.com>\n *    Jon Grimm\t\t    <jgrimm@us.ibm.com>\n *    Ardelle Fan\t    <ardelle.fan@intel.com>\n *\n * Based on:\n *\tlinux/net/ipv6/tcp_ipv6.c\n */\n\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n\n#include <linux/module.h>\n#include <linux/errno.h>\n#include <linux/types.h>\n#include <linux/socket.h>\n#include <linux/sockios.h>\n#include <linux/net.h>\n#include <linux/in.h>\n#include <linux/in6.h>\n#include <linux/netdevice.h>\n#include <linux/init.h>\n#include <linux/ipsec.h>\n#include <linux/slab.h>\n\n#include <linux/ipv6.h>\n#include <linux/icmpv6.h>\n#include <linux/random.h>\n#include <linux/seq_file.h>\n\n#include <net/protocol.h>\n#include <net/ndisc.h>\n#include <net/ip.h>\n#include <net/ipv6.h>\n#include <net/transp_v6.h>\n#include <net/addrconf.h>\n#include <net/ip6_route.h>\n#include <net/inet_common.h>\n#include <net/inet_ecn.h>\n#include <net/sctp/sctp.h>\n\n#include <asm/uaccess.h>\n\nstatic inline int sctp_v6_addr_match_len(union sctp_addr *s1,\n\t\t\t\t\t union sctp_addr *s2);\nstatic void sctp_v6_to_addr(union sctp_addr *addr, struct in6_addr *saddr,\n\t\t\t      __be16 port);\nstatic int sctp_v6_cmp_addr(const union sctp_addr *addr1,\n\t\t\t    const union sctp_addr *addr2);\n\n/* Event handler for inet6 address addition/deletion events.\n * The sctp_local_addr_list needs to be protocted by a spin lock since\n * multiple notifiers (say IPv4 and IPv6) may be running at the same\n * time and thus corrupt the list.\n * The reader side is protected with RCU.\n */\nstatic int sctp_inet6addr_event(struct notifier_block *this, unsigned long ev,\n\t\t\t\tvoid *ptr)\n{\n\tstruct inet6_ifaddr *ifa = (struct inet6_ifaddr *)ptr;\n\tstruct sctp_sockaddr_entry *addr = NULL;\n\tstruct sctp_sockaddr_entry *temp;\n\tstruct net *net = dev_net(ifa->idev->dev);\n\tint found = 0;\n\n\tswitch (ev) {\n\tcase NETDEV_UP:\n\t\taddr = kmalloc(sizeof(struct sctp_sockaddr_entry), GFP_ATOMIC);\n\t\tif (addr) {\n\t\t\taddr->a.v6.sin6_family = AF_INET6;\n\t\t\taddr->a.v6.sin6_port = 0;\n\t\t\taddr->a.v6.sin6_addr = ifa->addr;\n\t\t\taddr->a.v6.sin6_scope_id = ifa->idev->dev->ifindex;\n\t\t\taddr->valid = 1;\n\t\t\tspin_lock_bh(&net->sctp.local_addr_lock);\n\t\t\tlist_add_tail_rcu(&addr->list, &net->sctp.local_addr_list);\n\t\t\tsctp_addr_wq_mgmt(net, addr, SCTP_ADDR_NEW);\n\t\t\tspin_unlock_bh(&net->sctp.local_addr_lock);\n\t\t}\n\t\tbreak;\n\tcase NETDEV_DOWN:\n\t\tspin_lock_bh(&net->sctp.local_addr_lock);\n\t\tlist_for_each_entry_safe(addr, temp,\n\t\t\t\t\t&net->sctp.local_addr_list, list) {\n\t\t\tif (addr->a.sa.sa_family == AF_INET6 &&\n\t\t\t\t\tipv6_addr_equal(&addr->a.v6.sin6_addr,\n\t\t\t\t\t\t&ifa->addr)) {\n\t\t\t\tsctp_addr_wq_mgmt(net, addr, SCTP_ADDR_DEL);\n\t\t\t\tfound = 1;\n\t\t\t\taddr->valid = 0;\n\t\t\t\tlist_del_rcu(&addr->list);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tspin_unlock_bh(&net->sctp.local_addr_lock);\n\t\tif (found)\n\t\t\tkfree_rcu(addr, rcu);\n\t\tbreak;\n\t}\n\n\treturn NOTIFY_DONE;\n}\n\nstatic struct notifier_block sctp_inet6addr_notifier = {\n\t.notifier_call = sctp_inet6addr_event,\n};\n\n/* ICMP error handler. */\nstatic void sctp_v6_err(struct sk_buff *skb, struct inet6_skb_parm *opt,\n\t\t\tu8 type, u8 code, int offset, __be32 info)\n{\n\tstruct inet6_dev *idev;\n\tstruct sock *sk;\n\tstruct sctp_association *asoc;\n\tstruct sctp_transport *transport;\n\tstruct ipv6_pinfo *np;\n\t__u16 saveip, savesctp;\n\tint err;\n\tstruct net *net = dev_net(skb->dev);\n\n\tidev = in6_dev_get(skb->dev);\n\n\t/* Fix up skb to look at the embedded net header. */\n\tsaveip\t = skb->network_header;\n\tsavesctp = skb->transport_header;\n\tskb_reset_network_header(skb);\n\tskb_set_transport_header(skb, offset);\n\tsk = sctp_err_lookup(net, AF_INET6, skb, sctp_hdr(skb), &asoc, &transport);\n\t/* Put back, the original pointers. */\n\tskb->network_header   = saveip;\n\tskb->transport_header = savesctp;\n\tif (!sk) {\n\t\tICMP6_INC_STATS_BH(net, idev, ICMP6_MIB_INERRORS);\n\t\tgoto out;\n\t}\n\n\t/* Warning:  The sock lock is held.  Remember to call\n\t * sctp_err_finish!\n\t */\n\n\tswitch (type) {\n\tcase ICMPV6_PKT_TOOBIG:\n\t\tsctp_icmp_frag_needed(sk, asoc, transport, ntohl(info));\n\t\tgoto out_unlock;\n\tcase ICMPV6_PARAMPROB:\n\t\tif (ICMPV6_UNK_NEXTHDR == code) {\n\t\t\tsctp_icmp_proto_unreachable(sk, asoc, transport);\n\t\t\tgoto out_unlock;\n\t\t}\n\t\tbreak;\n\tcase NDISC_REDIRECT:\n\t\tsctp_icmp_redirect(sk, transport, skb);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\n\tnp = inet6_sk(sk);\n\ticmpv6_err_convert(type, code, &err);\n\tif (!sock_owned_by_user(sk) && np->recverr) {\n\t\tsk->sk_err = err;\n\t\tsk->sk_error_report(sk);\n\t} else {  /* Only an error on timeout */\n\t\tsk->sk_err_soft = err;\n\t}\n\nout_unlock:\n\tsctp_err_finish(sk, asoc);\nout:\n\tif (likely(idev != NULL))\n\t\tin6_dev_put(idev);\n}\n\nstatic int sctp_v6_xmit(struct sk_buff *skb, struct sctp_transport *transport)\n{\n\tstruct sock *sk = skb->sk;\n\tstruct ipv6_pinfo *np = inet6_sk(sk);\n\tstruct flowi6 *fl6 = &transport->fl.u.ip6;\n\n\tpr_debug(\"%s: skb:%p, len:%d, src:%pI6 dst:%pI6\\n\", __func__, skb,\n\t\t skb->len, &fl6->saddr, &fl6->daddr);\n\n\tIP6_ECN_flow_xmit(sk, fl6->flowlabel);\n\n\tif (!(transport->param_flags & SPP_PMTUD_ENABLE))\n\t\tskb->local_df = 1;\n\n\tSCTP_INC_STATS(sock_net(sk), SCTP_MIB_OUTSCTPPACKS);\n\n\treturn ip6_xmit(sk, skb, fl6, np->opt, np->tclass);\n}\n\n/* Returns the dst cache entry for the given source and destination ip\n * addresses.\n */\nstatic void sctp_v6_get_dst(struct sctp_transport *t, union sctp_addr *saddr,\n\t\t\t    struct flowi *fl, struct sock *sk)\n{\n\tstruct sctp_association *asoc = t->asoc;\n\tstruct dst_entry *dst = NULL;\n\tstruct flowi6 *fl6 = &fl->u.ip6;\n\tstruct sctp_bind_addr *bp;\n\tstruct ipv6_pinfo *np = inet6_sk(sk);\n\tstruct sctp_sockaddr_entry *laddr;\n\tunion sctp_addr *baddr = NULL;\n\tunion sctp_addr *daddr = &t->ipaddr;\n\tunion sctp_addr dst_saddr;\n\tstruct in6_addr *final_p, final;\n\t__u8 matchlen = 0;\n\t__u8 bmatchlen;\n\tsctp_scope_t scope;\n\n\tmemset(fl6, 0, sizeof(struct flowi6));\n\tfl6->daddr = daddr->v6.sin6_addr;\n\tfl6->fl6_dport = daddr->v6.sin6_port;\n\tfl6->flowi6_proto = IPPROTO_SCTP;\n\tif (ipv6_addr_type(&daddr->v6.sin6_addr) & IPV6_ADDR_LINKLOCAL)\n\t\tfl6->flowi6_oif = daddr->v6.sin6_scope_id;\n\n\tpr_debug(\"%s: dst=%pI6 \", __func__, &fl6->daddr);\n\n\tif (asoc)\n\t\tfl6->fl6_sport = htons(asoc->base.bind_addr.port);\n\n\tif (saddr) {\n\t\tfl6->saddr = saddr->v6.sin6_addr;\n\t\tfl6->fl6_sport = saddr->v6.sin6_port;\n\n\t\tpr_debug(\"src=%pI6 - \", &fl6->saddr);\n\t}\n\n\tfinal_p = fl6_update_dst(fl6, np->opt, &final);\n\tdst = ip6_dst_lookup_flow(sk, fl6, final_p, false);\n\tif (!asoc || saddr)\n\t\tgoto out;\n\n\tbp = &asoc->base.bind_addr;\n\tscope = sctp_scope(daddr);\n\t/* ip6_dst_lookup has filled in the fl6->saddr for us.  Check\n\t * to see if we can use it.\n\t */\n\tif (!IS_ERR(dst)) {\n\t\t/* Walk through the bind address list and look for a bind\n\t\t * address that matches the source address of the returned dst.\n\t\t */\n\t\tsctp_v6_to_addr(&dst_saddr, &fl6->saddr, htons(bp->port));\n\t\trcu_read_lock();\n\t\tlist_for_each_entry_rcu(laddr, &bp->address_list, list) {\n\t\t\tif (!laddr->valid || (laddr->state != SCTP_ADDR_SRC))\n\t\t\t\tcontinue;\n\n\t\t\t/* Do not compare against v4 addrs */\n\t\t\tif ((laddr->a.sa.sa_family == AF_INET6) &&\n\t\t\t    (sctp_v6_cmp_addr(&dst_saddr, &laddr->a))) {\n\t\t\t\trcu_read_unlock();\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t}\n\t\trcu_read_unlock();\n\t\t/* None of the bound addresses match the source address of the\n\t\t * dst. So release it.\n\t\t */\n\t\tdst_release(dst);\n\t\tdst = NULL;\n\t}\n\n\t/* Walk through the bind address list and try to get the\n\t * best source address for a given destination.\n\t */\n\trcu_read_lock();\n\tlist_for_each_entry_rcu(laddr, &bp->address_list, list) {\n\t\tif (!laddr->valid)\n\t\t\tcontinue;\n\t\tif ((laddr->state == SCTP_ADDR_SRC) &&\n\t\t    (laddr->a.sa.sa_family == AF_INET6) &&\n\t\t    (scope <= sctp_scope(&laddr->a))) {\n\t\t\tbmatchlen = sctp_v6_addr_match_len(daddr, &laddr->a);\n\t\t\tif (!baddr || (matchlen < bmatchlen)) {\n\t\t\t\tbaddr = &laddr->a;\n\t\t\t\tmatchlen = bmatchlen;\n\t\t\t}\n\t\t}\n\t}\n\trcu_read_unlock();\n\n\tif (baddr) {\n\t\tfl6->saddr = baddr->v6.sin6_addr;\n\t\tfl6->fl6_sport = baddr->v6.sin6_port;\n\t\tfinal_p = fl6_update_dst(fl6, np->opt, &final);\n\t\tdst = ip6_dst_lookup_flow(sk, fl6, final_p, false);\n\t}\n\nout:\n\tif (!IS_ERR_OR_NULL(dst)) {\n\t\tstruct rt6_info *rt;\n\n\t\trt = (struct rt6_info *)dst;\n\t\tt->dst = dst;\n\t\tt->dst_cookie = rt->rt6i_node ? rt->rt6i_node->fn_sernum : 0;\n\t\tpr_debug(\"rt6_dst:%pI6 rt6_src:%pI6\\n\", &rt->rt6i_dst.addr,\n\t\t\t &fl6->saddr);\n\t} else {\n\t\tt->dst = NULL;\n\n\t\tpr_debug(\"no route\\n\");\n\t}\n}\n\n/* Returns the number of consecutive initial bits that match in the 2 ipv6\n * addresses.\n */\nstatic inline int sctp_v6_addr_match_len(union sctp_addr *s1,\n\t\t\t\t\t union sctp_addr *s2)\n{\n\treturn ipv6_addr_diff(&s1->v6.sin6_addr, &s2->v6.sin6_addr);\n}\n\n/* Fills in the source address(saddr) based on the destination address(daddr)\n * and asoc's bind address list.\n */\nstatic void sctp_v6_get_saddr(struct sctp_sock *sk,\n\t\t\t      struct sctp_transport *t,\n\t\t\t      struct flowi *fl)\n{\n\tstruct flowi6 *fl6 = &fl->u.ip6;\n\tunion sctp_addr *saddr = &t->saddr;\n\n\tpr_debug(\"%s: asoc:%p dst:%p\\n\", __func__, t->asoc, t->dst);\n\n\tif (t->dst) {\n\t\tsaddr->v6.sin6_family = AF_INET6;\n\t\tsaddr->v6.sin6_addr = fl6->saddr;\n\t}\n}\n\n/* Make a copy of all potential local addresses. */\nstatic void sctp_v6_copy_addrlist(struct list_head *addrlist,\n\t\t\t\t  struct net_device *dev)\n{\n\tstruct inet6_dev *in6_dev;\n\tstruct inet6_ifaddr *ifp;\n\tstruct sctp_sockaddr_entry *addr;\n\n\trcu_read_lock();\n\tif ((in6_dev = __in6_dev_get(dev)) == NULL) {\n\t\trcu_read_unlock();\n\t\treturn;\n\t}\n\n\tread_lock_bh(&in6_dev->lock);\n\tlist_for_each_entry(ifp, &in6_dev->addr_list, if_list) {\n\t\t/* Add the address to the local list.  */\n\t\taddr = kzalloc(sizeof(*addr), GFP_ATOMIC);\n\t\tif (addr) {\n\t\t\taddr->a.v6.sin6_family = AF_INET6;\n\t\t\taddr->a.v6.sin6_port = 0;\n\t\t\taddr->a.v6.sin6_addr = ifp->addr;\n\t\t\taddr->a.v6.sin6_scope_id = dev->ifindex;\n\t\t\taddr->valid = 1;\n\t\t\tINIT_LIST_HEAD(&addr->list);\n\t\t\tlist_add_tail(&addr->list, addrlist);\n\t\t}\n\t}\n\n\tread_unlock_bh(&in6_dev->lock);\n\trcu_read_unlock();\n}\n\n/* Initialize a sockaddr_storage from in incoming skb. */\nstatic void sctp_v6_from_skb(union sctp_addr *addr,struct sk_buff *skb,\n\t\t\t     int is_saddr)\n{\n\t__be16 *port;\n\tstruct sctphdr *sh;\n\n\tport = &addr->v6.sin6_port;\n\taddr->v6.sin6_family = AF_INET6;\n\taddr->v6.sin6_flowinfo = 0; /* FIXME */\n\taddr->v6.sin6_scope_id = ((struct inet6_skb_parm *)skb->cb)->iif;\n\n\tsh = sctp_hdr(skb);\n\tif (is_saddr) {\n\t\t*port  = sh->source;\n\t\taddr->v6.sin6_addr = ipv6_hdr(skb)->saddr;\n\t} else {\n\t\t*port = sh->dest;\n\t\taddr->v6.sin6_addr = ipv6_hdr(skb)->daddr;\n\t}\n}\n\n/* Initialize an sctp_addr from a socket. */\nstatic void sctp_v6_from_sk(union sctp_addr *addr, struct sock *sk)\n{\n\taddr->v6.sin6_family = AF_INET6;\n\taddr->v6.sin6_port = 0;\n\taddr->v6.sin6_addr = inet6_sk(sk)->rcv_saddr;\n}\n\n/* Initialize sk->sk_rcv_saddr from sctp_addr. */\nstatic void sctp_v6_to_sk_saddr(union sctp_addr *addr, struct sock *sk)\n{\n\tif (addr->sa.sa_family == AF_INET && sctp_sk(sk)->v4mapped) {\n\t\tinet6_sk(sk)->rcv_saddr.s6_addr32[0] = 0;\n\t\tinet6_sk(sk)->rcv_saddr.s6_addr32[1] = 0;\n\t\tinet6_sk(sk)->rcv_saddr.s6_addr32[2] = htonl(0x0000ffff);\n\t\tinet6_sk(sk)->rcv_saddr.s6_addr32[3] =\n\t\t\taddr->v4.sin_addr.s_addr;\n\t} else {\n\t\tinet6_sk(sk)->rcv_saddr = addr->v6.sin6_addr;\n\t}\n}\n\n/* Initialize sk->sk_daddr from sctp_addr. */\nstatic void sctp_v6_to_sk_daddr(union sctp_addr *addr, struct sock *sk)\n{\n\tif (addr->sa.sa_family == AF_INET && sctp_sk(sk)->v4mapped) {\n\t\tinet6_sk(sk)->daddr.s6_addr32[0] = 0;\n\t\tinet6_sk(sk)->daddr.s6_addr32[1] = 0;\n\t\tinet6_sk(sk)->daddr.s6_addr32[2] = htonl(0x0000ffff);\n\t\tinet6_sk(sk)->daddr.s6_addr32[3] = addr->v4.sin_addr.s_addr;\n\t} else {\n\t\tinet6_sk(sk)->daddr = addr->v6.sin6_addr;\n\t}\n}\n\n/* Initialize a sctp_addr from an address parameter. */\nstatic void sctp_v6_from_addr_param(union sctp_addr *addr,\n\t\t\t\t    union sctp_addr_param *param,\n\t\t\t\t    __be16 port, int iif)\n{\n\taddr->v6.sin6_family = AF_INET6;\n\taddr->v6.sin6_port = port;\n\taddr->v6.sin6_flowinfo = 0; /* BUG */\n\taddr->v6.sin6_addr = param->v6.addr;\n\taddr->v6.sin6_scope_id = iif;\n}\n\n/* Initialize an address parameter from a sctp_addr and return the length\n * of the address parameter.\n */\nstatic int sctp_v6_to_addr_param(const union sctp_addr *addr,\n\t\t\t\t union sctp_addr_param *param)\n{\n\tint length = sizeof(sctp_ipv6addr_param_t);\n\n\tparam->v6.param_hdr.type = SCTP_PARAM_IPV6_ADDRESS;\n\tparam->v6.param_hdr.length = htons(length);\n\tparam->v6.addr = addr->v6.sin6_addr;\n\n\treturn length;\n}\n\n/* Initialize a sctp_addr from struct in6_addr. */\nstatic void sctp_v6_to_addr(union sctp_addr *addr, struct in6_addr *saddr,\n\t\t\t      __be16 port)\n{\n\taddr->sa.sa_family = AF_INET6;\n\taddr->v6.sin6_port = port;\n\taddr->v6.sin6_addr = *saddr;\n}\n\n/* Compare addresses exactly.\n * v4-mapped-v6 is also in consideration.\n */\nstatic int sctp_v6_cmp_addr(const union sctp_addr *addr1,\n\t\t\t    const union sctp_addr *addr2)\n{\n\tif (addr1->sa.sa_family != addr2->sa.sa_family) {\n\t\tif (addr1->sa.sa_family == AF_INET &&\n\t\t    addr2->sa.sa_family == AF_INET6 &&\n\t\t    ipv6_addr_v4mapped(&addr2->v6.sin6_addr)) {\n\t\t\tif (addr2->v6.sin6_port == addr1->v4.sin_port &&\n\t\t\t    addr2->v6.sin6_addr.s6_addr32[3] ==\n\t\t\t    addr1->v4.sin_addr.s_addr)\n\t\t\t\treturn 1;\n\t\t}\n\t\tif (addr2->sa.sa_family == AF_INET &&\n\t\t    addr1->sa.sa_family == AF_INET6 &&\n\t\t    ipv6_addr_v4mapped(&addr1->v6.sin6_addr)) {\n\t\t\tif (addr1->v6.sin6_port == addr2->v4.sin_port &&\n\t\t\t    addr1->v6.sin6_addr.s6_addr32[3] ==\n\t\t\t    addr2->v4.sin_addr.s_addr)\n\t\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n\tif (!ipv6_addr_equal(&addr1->v6.sin6_addr, &addr2->v6.sin6_addr))\n\t\treturn 0;\n\t/* If this is a linklocal address, compare the scope_id. */\n\tif (ipv6_addr_type(&addr1->v6.sin6_addr) & IPV6_ADDR_LINKLOCAL) {\n\t\tif (addr1->v6.sin6_scope_id && addr2->v6.sin6_scope_id &&\n\t\t    (addr1->v6.sin6_scope_id != addr2->v6.sin6_scope_id)) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn 1;\n}\n\n/* Initialize addr struct to INADDR_ANY. */\nstatic void sctp_v6_inaddr_any(union sctp_addr *addr, __be16 port)\n{\n\tmemset(addr, 0x00, sizeof(union sctp_addr));\n\taddr->v6.sin6_family = AF_INET6;\n\taddr->v6.sin6_port = port;\n}\n\n/* Is this a wildcard address? */\nstatic int sctp_v6_is_any(const union sctp_addr *addr)\n{\n\treturn ipv6_addr_any(&addr->v6.sin6_addr);\n}\n\n/* Should this be available for binding?   */\nstatic int sctp_v6_available(union sctp_addr *addr, struct sctp_sock *sp)\n{\n\tint type;\n\tconst struct in6_addr *in6 = (const struct in6_addr *)&addr->v6.sin6_addr;\n\n\ttype = ipv6_addr_type(in6);\n\tif (IPV6_ADDR_ANY == type)\n\t\treturn 1;\n\tif (type == IPV6_ADDR_MAPPED) {\n\t\tif (sp && !sp->v4mapped)\n\t\t\treturn 0;\n\t\tif (sp && ipv6_only_sock(sctp_opt2sk(sp)))\n\t\t\treturn 0;\n\t\tsctp_v6_map_v4(addr);\n\t\treturn sctp_get_af_specific(AF_INET)->available(addr, sp);\n\t}\n\tif (!(type & IPV6_ADDR_UNICAST))\n\t\treturn 0;\n\n\treturn ipv6_chk_addr(sock_net(&sp->inet.sk), in6, NULL, 0);\n}\n\n/* This function checks if the address is a valid address to be used for\n * SCTP.\n *\n * Output:\n * Return 0 - If the address is a non-unicast or an illegal address.\n * Return 1 - If the address is a unicast.\n */\nstatic int sctp_v6_addr_valid(union sctp_addr *addr,\n\t\t\t      struct sctp_sock *sp,\n\t\t\t      const struct sk_buff *skb)\n{\n\tint ret = ipv6_addr_type(&addr->v6.sin6_addr);\n\n\t/* Support v4-mapped-v6 address. */\n\tif (ret == IPV6_ADDR_MAPPED) {\n\t\t/* Note: This routine is used in input, so v4-mapped-v6\n\t\t * are disallowed here when there is no sctp_sock.\n\t\t */\n\t\tif (!sp || !sp->v4mapped)\n\t\t\treturn 0;\n\t\tif (sp && ipv6_only_sock(sctp_opt2sk(sp)))\n\t\t\treturn 0;\n\t\tsctp_v6_map_v4(addr);\n\t\treturn sctp_get_af_specific(AF_INET)->addr_valid(addr, sp, skb);\n\t}\n\n\t/* Is this a non-unicast address */\n\tif (!(ret & IPV6_ADDR_UNICAST))\n\t\treturn 0;\n\n\treturn 1;\n}\n\n/* What is the scope of 'addr'?  */\nstatic sctp_scope_t sctp_v6_scope(union sctp_addr *addr)\n{\n\tint v6scope;\n\tsctp_scope_t retval;\n\n\t/* The IPv6 scope is really a set of bit fields.\n\t * See IFA_* in <net/if_inet6.h>.  Map to a generic SCTP scope.\n\t */\n\n\tv6scope = ipv6_addr_scope(&addr->v6.sin6_addr);\n\tswitch (v6scope) {\n\tcase IFA_HOST:\n\t\tretval = SCTP_SCOPE_LOOPBACK;\n\t\tbreak;\n\tcase IFA_LINK:\n\t\tretval = SCTP_SCOPE_LINK;\n\t\tbreak;\n\tcase IFA_SITE:\n\t\tretval = SCTP_SCOPE_PRIVATE;\n\t\tbreak;\n\tdefault:\n\t\tretval = SCTP_SCOPE_GLOBAL;\n\t\tbreak;\n\t}\n\n\treturn retval;\n}\n\n/* Create and initialize a new sk for the socket to be returned by accept(). */\nstatic struct sock *sctp_v6_create_accept_sk(struct sock *sk,\n\t\t\t\t\t     struct sctp_association *asoc)\n{\n\tstruct sock *newsk;\n\tstruct ipv6_pinfo *newnp, *np = inet6_sk(sk);\n\tstruct sctp6_sock *newsctp6sk;\n\n\tnewsk = sk_alloc(sock_net(sk), PF_INET6, GFP_KERNEL, sk->sk_prot);\n\tif (!newsk)\n\t\tgoto out;\n\n\tsock_init_data(NULL, newsk);\n\n\tsctp_copy_sock(newsk, sk, asoc);\n\tsock_reset_flag(sk, SOCK_ZAPPED);\n\n\tnewsctp6sk = (struct sctp6_sock *)newsk;\n\tinet_sk(newsk)->pinet6 = &newsctp6sk->inet6;\n\n\tsctp_sk(newsk)->v4mapped = sctp_sk(sk)->v4mapped;\n\n\tnewnp = inet6_sk(newsk);\n\n\tmemcpy(newnp, np, sizeof(struct ipv6_pinfo));\n\n\t/* Initialize sk's sport, dport, rcv_saddr and daddr for getsockname()\n\t * and getpeername().\n\t */\n\tsctp_v6_to_sk_daddr(&asoc->peer.primary_addr, newsk);\n\n\tsk_refcnt_debug_inc(newsk);\n\n\tif (newsk->sk_prot->init(newsk)) {\n\t\tsk_common_release(newsk);\n\t\tnewsk = NULL;\n\t}\n\nout:\n\treturn newsk;\n}\n\n/* Map v4 address to mapped v6 address */\nstatic void sctp_v6_addr_v4map(struct sctp_sock *sp, union sctp_addr *addr)\n{\n\tif (sp->v4mapped && AF_INET == addr->sa.sa_family)\n\t\tsctp_v4_map_v6(addr);\n}\n\n/* Where did this skb come from?  */\nstatic int sctp_v6_skb_iif(const struct sk_buff *skb)\n{\n\tstruct inet6_skb_parm *opt = (struct inet6_skb_parm *) skb->cb;\n\treturn opt->iif;\n}\n\n/* Was this packet marked by Explicit Congestion Notification? */\nstatic int sctp_v6_is_ce(const struct sk_buff *skb)\n{\n\treturn *((__u32 *)(ipv6_hdr(skb))) & htonl(1 << 20);\n}\n\n/* Dump the v6 addr to the seq file. */\nstatic void sctp_v6_seq_dump_addr(struct seq_file *seq, union sctp_addr *addr)\n{\n\tseq_printf(seq, \"%pI6 \", &addr->v6.sin6_addr);\n}\n\nstatic void sctp_v6_ecn_capable(struct sock *sk)\n{\n\tinet6_sk(sk)->tclass |= INET_ECN_ECT_0;\n}\n\n/* Initialize a PF_INET6 socket msg_name. */\nstatic void sctp_inet6_msgname(char *msgname, int *addr_len)\n{\n\tstruct sockaddr_in6 *sin6;\n\n\tsin6 = (struct sockaddr_in6 *)msgname;\n\tsin6->sin6_family = AF_INET6;\n\tsin6->sin6_flowinfo = 0;\n\tsin6->sin6_scope_id = 0; /*FIXME */\n\t*addr_len = sizeof(struct sockaddr_in6);\n}\n\n/* Initialize a PF_INET msgname from a ulpevent. */\nstatic void sctp_inet6_event_msgname(struct sctp_ulpevent *event,\n\t\t\t\t     char *msgname, int *addrlen)\n{\n\tstruct sockaddr_in6 *sin6, *sin6from;\n\n\tif (msgname) {\n\t\tunion sctp_addr *addr;\n\t\tstruct sctp_association *asoc;\n\n\t\tasoc = event->asoc;\n\t\tsctp_inet6_msgname(msgname, addrlen);\n\t\tsin6 = (struct sockaddr_in6 *)msgname;\n\t\tsin6->sin6_port = htons(asoc->peer.port);\n\t\taddr = &asoc->peer.primary_addr;\n\n\t\t/* Note: If we go to a common v6 format, this code\n\t\t * will change.\n\t\t */\n\n\t\t/* Map ipv4 address into v4-mapped-on-v6 address.  */\n\t\tif (sctp_sk(asoc->base.sk)->v4mapped &&\n\t\t    AF_INET == addr->sa.sa_family) {\n\t\t\tsctp_v4_map_v6((union sctp_addr *)sin6);\n\t\t\tsin6->sin6_addr.s6_addr32[3] =\n\t\t\t\taddr->v4.sin_addr.s_addr;\n\t\t\treturn;\n\t\t}\n\n\t\tsin6from = &asoc->peer.primary_addr.v6;\n\t\tsin6->sin6_addr = sin6from->sin6_addr;\n\t\tif (ipv6_addr_type(&sin6->sin6_addr) & IPV6_ADDR_LINKLOCAL)\n\t\t\tsin6->sin6_scope_id = sin6from->sin6_scope_id;\n\t}\n}\n\n/* Initialize a msg_name from an inbound skb. */\nstatic void sctp_inet6_skb_msgname(struct sk_buff *skb, char *msgname,\n\t\t\t\t   int *addr_len)\n{\n\tstruct sctphdr *sh;\n\tstruct sockaddr_in6 *sin6;\n\n\tif (msgname) {\n\t\tsctp_inet6_msgname(msgname, addr_len);\n\t\tsin6 = (struct sockaddr_in6 *)msgname;\n\t\tsh = sctp_hdr(skb);\n\t\tsin6->sin6_port = sh->source;\n\n\t\t/* Map ipv4 address into v4-mapped-on-v6 address. */\n\t\tif (sctp_sk(skb->sk)->v4mapped &&\n\t\t    ip_hdr(skb)->version == 4) {\n\t\t\tsctp_v4_map_v6((union sctp_addr *)sin6);\n\t\t\tsin6->sin6_addr.s6_addr32[3] = ip_hdr(skb)->saddr;\n\t\t\treturn;\n\t\t}\n\n\t\t/* Otherwise, just copy the v6 address. */\n\t\tsin6->sin6_addr = ipv6_hdr(skb)->saddr;\n\t\tif (ipv6_addr_type(&sin6->sin6_addr) & IPV6_ADDR_LINKLOCAL) {\n\t\t\tstruct sctp_ulpevent *ev = sctp_skb2event(skb);\n\t\t\tsin6->sin6_scope_id = ev->iif;\n\t\t}\n\t}\n}\n\n/* Do we support this AF? */\nstatic int sctp_inet6_af_supported(sa_family_t family, struct sctp_sock *sp)\n{\n\tswitch (family) {\n\tcase AF_INET6:\n\t\treturn 1;\n\t/* v4-mapped-v6 addresses */\n\tcase AF_INET:\n\t\tif (!__ipv6_only_sock(sctp_opt2sk(sp)))\n\t\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}\n\n/* Address matching with wildcards allowed.  This extra level\n * of indirection lets us choose whether a PF_INET6 should\n * disallow any v4 addresses if we so choose.\n */\nstatic int sctp_inet6_cmp_addr(const union sctp_addr *addr1,\n\t\t\t       const union sctp_addr *addr2,\n\t\t\t       struct sctp_sock *opt)\n{\n\tstruct sctp_af *af1, *af2;\n\tstruct sock *sk = sctp_opt2sk(opt);\n\n\taf1 = sctp_get_af_specific(addr1->sa.sa_family);\n\taf2 = sctp_get_af_specific(addr2->sa.sa_family);\n\n\tif (!af1 || !af2)\n\t\treturn 0;\n\n\t/* If the socket is IPv6 only, v4 addrs will not match */\n\tif (__ipv6_only_sock(sk) && af1 != af2)\n\t\treturn 0;\n\n\t/* Today, wildcard AF_INET/AF_INET6. */\n\tif (sctp_is_any(sk, addr1) || sctp_is_any(sk, addr2))\n\t\treturn 1;\n\n\tif (addr1->sa.sa_family != addr2->sa.sa_family)\n\t\treturn 0;\n\n\treturn af1->cmp_addr(addr1, addr2);\n}\n\n/* Verify that the provided sockaddr looks bindable.   Common verification,\n * has already been taken care of.\n */\nstatic int sctp_inet6_bind_verify(struct sctp_sock *opt, union sctp_addr *addr)\n{\n\tstruct sctp_af *af;\n\n\t/* ASSERT: address family has already been verified. */\n\tif (addr->sa.sa_family != AF_INET6)\n\t\taf = sctp_get_af_specific(addr->sa.sa_family);\n\telse {\n\t\tint type = ipv6_addr_type(&addr->v6.sin6_addr);\n\t\tstruct net_device *dev;\n\n\t\tif (type & IPV6_ADDR_LINKLOCAL) {\n\t\t\tstruct net *net;\n\t\t\tif (!addr->v6.sin6_scope_id)\n\t\t\t\treturn 0;\n\t\t\tnet = sock_net(&opt->inet.sk);\n\t\t\trcu_read_lock();\n\t\t\tdev = dev_get_by_index_rcu(net, addr->v6.sin6_scope_id);\n\t\t\tif (!dev ||\n\t\t\t    !ipv6_chk_addr(net, &addr->v6.sin6_addr, dev, 0)) {\n\t\t\t\trcu_read_unlock();\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\trcu_read_unlock();\n\t\t} else if (type == IPV6_ADDR_MAPPED) {\n\t\t\tif (!opt->v4mapped)\n\t\t\t\treturn 0;\n\t\t}\n\n\t\taf = opt->pf->af;\n\t}\n\treturn af->available(addr, opt);\n}\n\n/* Verify that the provided sockaddr looks sendable.   Common verification,\n * has already been taken care of.\n */\nstatic int sctp_inet6_send_verify(struct sctp_sock *opt, union sctp_addr *addr)\n{\n\tstruct sctp_af *af = NULL;\n\n\t/* ASSERT: address family has already been verified. */\n\tif (addr->sa.sa_family != AF_INET6)\n\t\taf = sctp_get_af_specific(addr->sa.sa_family);\n\telse {\n\t\tint type = ipv6_addr_type(&addr->v6.sin6_addr);\n\t\tstruct net_device *dev;\n\n\t\tif (type & IPV6_ADDR_LINKLOCAL) {\n\t\t\tif (!addr->v6.sin6_scope_id)\n\t\t\t\treturn 0;\n\t\t\trcu_read_lock();\n\t\t\tdev = dev_get_by_index_rcu(sock_net(&opt->inet.sk),\n\t\t\t\t\t\t   addr->v6.sin6_scope_id);\n\t\t\trcu_read_unlock();\n\t\t\tif (!dev)\n\t\t\t\treturn 0;\n\t\t}\n\t\taf = opt->pf->af;\n\t}\n\n\treturn af != NULL;\n}\n\n/* Fill in Supported Address Type information for INIT and INIT-ACK\n * chunks.   Note: In the future, we may want to look at sock options\n * to determine whether a PF_INET6 socket really wants to have IPV4\n * addresses.\n * Returns number of addresses supported.\n */\nstatic int sctp_inet6_supported_addrs(const struct sctp_sock *opt,\n\t\t\t\t      __be16 *types)\n{\n\ttypes[0] = SCTP_PARAM_IPV6_ADDRESS;\n\tif (!opt || !ipv6_only_sock(sctp_opt2sk(opt))) {\n\t\ttypes[1] = SCTP_PARAM_IPV4_ADDRESS;\n\t\treturn 2;\n\t}\n\treturn 1;\n}\n\nstatic const struct proto_ops inet6_seqpacket_ops = {\n\t.family\t\t   = PF_INET6,\n\t.owner\t\t   = THIS_MODULE,\n\t.release\t   = inet6_release,\n\t.bind\t\t   = inet6_bind,\n\t.connect\t   = inet_dgram_connect,\n\t.socketpair\t   = sock_no_socketpair,\n\t.accept\t\t   = inet_accept,\n\t.getname\t   = inet6_getname,\n\t.poll\t\t   = sctp_poll,\n\t.ioctl\t\t   = inet6_ioctl,\n\t.listen\t\t   = sctp_inet_listen,\n\t.shutdown\t   = inet_shutdown,\n\t.setsockopt\t   = sock_common_setsockopt,\n\t.getsockopt\t   = sock_common_getsockopt,\n\t.sendmsg\t   = inet_sendmsg,\n\t.recvmsg\t   = sock_common_recvmsg,\n\t.mmap\t\t   = sock_no_mmap,\n#ifdef CONFIG_COMPAT\n\t.compat_setsockopt = compat_sock_common_setsockopt,\n\t.compat_getsockopt = compat_sock_common_getsockopt,\n#endif\n};\n\nstatic struct inet_protosw sctpv6_seqpacket_protosw = {\n\t.type          = SOCK_SEQPACKET,\n\t.protocol      = IPPROTO_SCTP,\n\t.prot \t       = &sctpv6_prot,\n\t.ops           = &inet6_seqpacket_ops,\n\t.no_check      = 0,\n\t.flags         = SCTP_PROTOSW_FLAG\n};\nstatic struct inet_protosw sctpv6_stream_protosw = {\n\t.type          = SOCK_STREAM,\n\t.protocol      = IPPROTO_SCTP,\n\t.prot \t       = &sctpv6_prot,\n\t.ops           = &inet6_seqpacket_ops,\n\t.no_check      = 0,\n\t.flags         = SCTP_PROTOSW_FLAG,\n};\n\nstatic int sctp6_rcv(struct sk_buff *skb)\n{\n\treturn sctp_rcv(skb) ? -1 : 0;\n}\n\nstatic const struct inet6_protocol sctpv6_protocol = {\n\t.handler      = sctp6_rcv,\n\t.err_handler  = sctp_v6_err,\n\t.flags        = INET6_PROTO_NOPOLICY | INET6_PROTO_FINAL,\n};\n\nstatic struct sctp_af sctp_af_inet6 = {\n\t.sa_family\t   = AF_INET6,\n\t.sctp_xmit\t   = sctp_v6_xmit,\n\t.setsockopt\t   = ipv6_setsockopt,\n\t.getsockopt\t   = ipv6_getsockopt,\n\t.get_dst\t   = sctp_v6_get_dst,\n\t.get_saddr\t   = sctp_v6_get_saddr,\n\t.copy_addrlist\t   = sctp_v6_copy_addrlist,\n\t.from_skb\t   = sctp_v6_from_skb,\n\t.from_sk\t   = sctp_v6_from_sk,\n\t.to_sk_saddr\t   = sctp_v6_to_sk_saddr,\n\t.to_sk_daddr\t   = sctp_v6_to_sk_daddr,\n\t.from_addr_param   = sctp_v6_from_addr_param,\n\t.to_addr_param\t   = sctp_v6_to_addr_param,\n\t.cmp_addr\t   = sctp_v6_cmp_addr,\n\t.scope\t\t   = sctp_v6_scope,\n\t.addr_valid\t   = sctp_v6_addr_valid,\n\t.inaddr_any\t   = sctp_v6_inaddr_any,\n\t.is_any\t\t   = sctp_v6_is_any,\n\t.available\t   = sctp_v6_available,\n\t.skb_iif\t   = sctp_v6_skb_iif,\n\t.is_ce\t\t   = sctp_v6_is_ce,\n\t.seq_dump_addr\t   = sctp_v6_seq_dump_addr,\n\t.ecn_capable\t   = sctp_v6_ecn_capable,\n\t.net_header_len\t   = sizeof(struct ipv6hdr),\n\t.sockaddr_len\t   = sizeof(struct sockaddr_in6),\n#ifdef CONFIG_COMPAT\n\t.compat_setsockopt = compat_ipv6_setsockopt,\n\t.compat_getsockopt = compat_ipv6_getsockopt,\n#endif\n};\n\nstatic struct sctp_pf sctp_pf_inet6 = {\n\t.event_msgname = sctp_inet6_event_msgname,\n\t.skb_msgname   = sctp_inet6_skb_msgname,\n\t.af_supported  = sctp_inet6_af_supported,\n\t.cmp_addr      = sctp_inet6_cmp_addr,\n\t.bind_verify   = sctp_inet6_bind_verify,\n\t.send_verify   = sctp_inet6_send_verify,\n\t.supported_addrs = sctp_inet6_supported_addrs,\n\t.create_accept_sk = sctp_v6_create_accept_sk,\n\t.addr_v4map    = sctp_v6_addr_v4map,\n\t.af            = &sctp_af_inet6,\n};\n\n/* Initialize IPv6 support and register with socket layer.  */\nvoid sctp_v6_pf_init(void)\n{\n\t/* Register the SCTP specific PF_INET6 functions. */\n\tsctp_register_pf(&sctp_pf_inet6, PF_INET6);\n\n\t/* Register the SCTP specific AF_INET6 functions. */\n\tsctp_register_af(&sctp_af_inet6);\n}\n\nvoid sctp_v6_pf_exit(void)\n{\n\tlist_del(&sctp_af_inet6.list);\n}\n\n/* Initialize IPv6 support and register with socket layer.  */\nint sctp_v6_protosw_init(void)\n{\n\tint rc;\n\n\trc = proto_register(&sctpv6_prot, 1);\n\tif (rc)\n\t\treturn rc;\n\n\t/* Add SCTPv6(UDP and TCP style) to inetsw6 linked list. */\n\tinet6_register_protosw(&sctpv6_seqpacket_protosw);\n\tinet6_register_protosw(&sctpv6_stream_protosw);\n\n\treturn 0;\n}\n\nvoid sctp_v6_protosw_exit(void)\n{\n\tinet6_unregister_protosw(&sctpv6_seqpacket_protosw);\n\tinet6_unregister_protosw(&sctpv6_stream_protosw);\n\tproto_unregister(&sctpv6_prot);\n}\n\n\n/* Register with inet6 layer. */\nint sctp_v6_add_protocol(void)\n{\n\t/* Register notifier for inet6 address additions/deletions. */\n\tregister_inet6addr_notifier(&sctp_inet6addr_notifier);\n\n\tif (inet6_add_protocol(&sctpv6_protocol, IPPROTO_SCTP) < 0)\n\t\treturn -EAGAIN;\n\n\treturn 0;\n}\n\n/* Unregister with inet6 layer. */\nvoid sctp_v6_del_protocol(void)\n{\n\tinet6_del_protocol(&sctpv6_protocol, IPPROTO_SCTP);\n\tunregister_inet6addr_notifier(&sctp_inet6addr_notifier);\n}\n"], "filenames": ["net/sctp/ipv6.c"], "buggy_code_start_loc": [207], "buggy_code_end_loc": [340], "fixing_code_start_loc": [206], "fixing_code_end_loc": [324], "type": "CWE-310", "message": "The IPv6 SCTP implementation in net/sctp/ipv6.c in the Linux kernel through 3.11.1 uses data structures and function calls that do not trigger an intended configuration of IPsec encryption, which allows remote attackers to obtain sensitive information by sniffing the network.", "other": {"cve": {"id": "CVE-2013-4350", "sourceIdentifier": "secalert@redhat.com", "published": "2013-09-25T10:31:29.220", "lastModified": "2023-02-13T04:46:48.050", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The IPv6 SCTP implementation in net/sctp/ipv6.c in the Linux kernel through 3.11.1 uses data structures and function calls that do not trigger an intended configuration of IPsec encryption, which allows remote attackers to obtain sensitive information by sniffing the network."}, {"lang": "es", "value": "La implementaci\u00f3n IPv6 SCTP en net/sctp/ipv6.c en el kernel de Linux hasta v3.11.1 utiliza estructuras de datos y llamadas a funciones que no provocan una configuraci\u00f3n pretendida de encriptaci\u00f3n IPsec, lo que permite a atacantes remotos conseguir informaci\u00f3n sensible mediante la captura de tr\u00e1fico de red."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-310"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "D30AEC07-3CBD-4F4F-9646-BEAA1D98750B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "C2AA8E68-691B-499C-AEDD-3C0BFFE70044"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "9440475B-5960-4066-A204-F30AAFC87846"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc4:*:*:*:*:*:*", "matchCriteriaId": "53BCFBFB-6AF0-4525-8623-7633CC5E17DB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc5:*:*:*:*:*:*", "matchCriteriaId": "6ED4E86A-74F0-436A-BEB4-3F4EE93A5421"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc6:*:*:*:*:*:*", "matchCriteriaId": "BF0365B0-8E16-4F30-BD92-5DD538CC8135"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc7:*:*:*:*:*:*", "matchCriteriaId": "079505E8-2942-4C33-93D1-35ADA4C39E72"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "38989541-2360-4E0A-AE5A-3D6144AA6114"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "4E51646B-7A0E-40F3-B8C9-239C1DA81DD1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "42A8A507-F8E2-491C-A144-B2448A1DB26E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "901FC6F3-2C2A-4112-AE27-AB102BBE8DEE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "203AD334-DB9F-41B0-A4D1-A6C158EF8C40"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "B3611753-E440-410F-8250-600C996A4B8E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "9739BB47-EEAF-42F1-A557-2AE2EA9526A3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "5A95E3BB-0AFC-4C2E-B9BE-C975E902A266"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "482A6C9A-9B8E-4D1C-917A-F16370745E7C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "C6D87357-63E0-41D0-9F02-1BCBF9A77E63"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.11:*:*:*:*:*:*:*", "matchCriteriaId": "3765A2D6-2D78-4FB1-989E-D5106BFA3F5E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.12:*:*:*:*:*:*:*", "matchCriteriaId": "F54257DB-7023-43C4-AC4D-9590B815CD92"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.13:*:*:*:*:*:*:*", "matchCriteriaId": "61FF5FCD-A4A1-4803-AC53-320A4C838AF6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.14:*:*:*:*:*:*:*", "matchCriteriaId": "9F096553-064F-46A2-877B-F32F163A0F49"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.15:*:*:*:*:*:*:*", "matchCriteriaId": "C0D762D1-E3AD-40EA-8D39-83EEB51B5E85"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.16:*:*:*:*:*:*:*", "matchCriteriaId": "A6187D19-7148-4B87-AD7E-244FF9EE0FA6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.17:*:*:*:*:*:*:*", "matchCriteriaId": "99AC64C2-E391-485C-9CD7-BA09C8FA5E63"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.18:*:*:*:*:*:*:*", "matchCriteriaId": "8CDA5E95-7805-441B-BEF7-4448EA45E964"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.19:*:*:*:*:*:*:*", "matchCriteriaId": "51561053-6C28-4F38-BC9B-3F7A7508EB72"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.20:*:*:*:*:*:*:*", "matchCriteriaId": "118F4A5B-C498-4FC3-BE28-50D18EBE4F22"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.21:*:*:*:*:*:*:*", "matchCriteriaId": "BD38EBE6-FE1A-4B55-9FB5-07952253B7A5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.22:*:*:*:*:*:*:*", "matchCriteriaId": "3A491E47-82AD-4055-9444-2EC0D6715326"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.23:*:*:*:*:*:*:*", "matchCriteriaId": "13C5FD16-23B6-467F-9438-5B554922F974"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.24:*:*:*:*:*:*:*", "matchCriteriaId": "9C67235F-5B51-4BF7-89EC-4810F720246F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.25:*:*:*:*:*:*:*", "matchCriteriaId": "08405DEF-05F4-45F0-AC95-DBF914A36D93"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.26:*:*:*:*:*:*:*", "matchCriteriaId": "1A7B9C4B-4A41-4175-9F07-191C1EE98C1F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.27:*:*:*:*:*:*:*", "matchCriteriaId": "B306E0A8-4D4A-4895-8128-A500D30A7E0C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.28:*:*:*:*:*:*:*", "matchCriteriaId": "295C839A-F34E-4853-A926-55EABC639412"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.29:*:*:*:*:*:*:*", "matchCriteriaId": "2AFD5F49-7EF9-4CFE-95BD-8FD19B500B0A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.30:*:*:*:*:*:*:*", "matchCriteriaId": "00B3DDDD-B2F6-4753-BA38-65A24017857D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.31:*:*:*:*:*:*:*", "matchCriteriaId": "33FCD39E-F4BF-432D-9CF9-F195CF5844F3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.32:*:*:*:*:*:*:*", "matchCriteriaId": "C7308690-CB0D-4758-B80F-D2ADCD2A9D66"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.33:*:*:*:*:*:*:*", "matchCriteriaId": "313A470B-8A2B-478A-82B5-B27D2718331C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.34:*:*:*:*:*:*:*", "matchCriteriaId": "83FF021E-07E3-41CC-AAE8-D99D7FF24B9D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.35:*:*:*:*:*:*:*", "matchCriteriaId": "F72412E3-8DA9-4CC9-A426-B534202ADBA4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.36:*:*:*:*:*:*:*", "matchCriteriaId": "FCAA9D7A-3C3E-4C0B-9D38-EA80E68C2E46"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.37:*:*:*:*:*:*:*", "matchCriteriaId": "4A9E3AE5-3FCF-4CBB-A30B-082BCFBFB0CB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.38:*:*:*:*:*:*:*", "matchCriteriaId": "CF715657-4C3A-4392-B85D-1BBF4DE45D89"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.39:*:*:*:*:*:*:*", "matchCriteriaId": "4B63C618-AC3D-4EF7-AFDF-27B9BF482B78"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.40:*:*:*:*:*:*:*", "matchCriteriaId": "C33DA5A9-5E40-4365-9602-82FB4DCD15B2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.41:*:*:*:*:*:*:*", "matchCriteriaId": "EFAFDB74-40BD-46FA-89AC-617EB2C7160B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.42:*:*:*:*:*:*:*", "matchCriteriaId": "CF5F17DA-30A7-40CF-BD7C-CEDF06D64617"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.43:*:*:*:*:*:*:*", "matchCriteriaId": "71A276F5-BD9D-4C1B-90DF-9B0C15B6F7DF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.44:*:*:*:*:*:*:*", "matchCriteriaId": "F8F6EBEC-3C29-444B-BB85-6EF239B59EC1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.45:*:*:*:*:*:*:*", "matchCriteriaId": "FDB91302-FD18-44CF-A8A8-B31483328539"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.46:*:*:*:*:*:*:*", "matchCriteriaId": "9B81DC2B-46FA-4640-AD6C-2A404D94BA0B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.47:*:*:*:*:*:*:*", "matchCriteriaId": "BA6A1663-BC4C-4FC9-B5EB-A52EDED17B26"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.48:*:*:*:*:*:*:*", "matchCriteriaId": "69C33D6C-6B9F-49F4-B505-E7B589CDEC50"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.49:*:*:*:*:*:*:*", "matchCriteriaId": "C464796B-2F31-4159-A132-82A0C74137B7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.50:*:*:*:*:*:*:*", "matchCriteriaId": "1D6C6E46-FE29-4D2D-A0EC-43DA5112BCC3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.51:*:*:*:*:*:*:*", "matchCriteriaId": "1A370E91-73A1-4D62-8E7B-696B920203F8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.52:*:*:*:*:*:*:*", "matchCriteriaId": "340197CD-9645-4B7E-B976-F3F5A7D4C5BE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.53:*:*:*:*:*:*:*", "matchCriteriaId": "96030636-0C4A-4A10-B768-525D6A0E18CB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.54:*:*:*:*:*:*:*", "matchCriteriaId": "A42D8419-914F-4AD6-B0E9-C1290D514FF1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.55:*:*:*:*:*:*:*", "matchCriteriaId": "F4E2C88B-42EA-4F4F-B1F6-A9332EC6888B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.56:*:*:*:*:*:*:*", "matchCriteriaId": "2449D13B-3314-4182-832F-03F6B11AA31F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.57:*:*:*:*:*:*:*", "matchCriteriaId": "9A35B66C-F050-4462-A58E-FEE061B5582E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.58:*:*:*:*:*:*:*", "matchCriteriaId": "1B551164-0167-49BB-A3AE-4034BDA3DCB4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.59:*:*:*:*:*:*:*", "matchCriteriaId": "7244278E-49B6-4405-A14C-F3540C8F5AF8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.60:*:*:*:*:*:*:*", "matchCriteriaId": "B4C3E4B8-7274-4ABB-B7CE-6A39C183CE18"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.61:*:*:*:*:*:*:*", "matchCriteriaId": "6501EDB9-4847-47F8-90EE-B295626E4CDC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.62:*:*:*:*:*:*:*", "matchCriteriaId": "2D676D48-7521-45E2-8563-6B966FF86A35"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.63:*:*:*:*:*:*:*", "matchCriteriaId": "3B69FA17-0AB9-4986-A5A7-2A4C1DD24222"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.64:*:*:*:*:*:*:*", "matchCriteriaId": "7BC35593-96C7-41F0-B738-1568F8129121"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.65:*:*:*:*:*:*:*", "matchCriteriaId": "38D23794-0E7C-4FA5-A7A8-CF940E3FA962"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.66:*:*:*:*:*:*:*", "matchCriteriaId": "008E1E7D-4C20-4560-9288-EF532ADB0029"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.67:*:*:*:*:*:*:*", "matchCriteriaId": "3B3A7044-A92E-47A9-A7BD-35E5B575F5FD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.68:*:*:*:*:*:*:*", "matchCriteriaId": "783E2980-B6AB-489E-B157-B6A2E10A32CA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:*:*:*:*:*:*:*", "matchCriteriaId": "3DFFE5A6-6A67-4992-84A3-C0F05FACDEAD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:rc1:*:*:*:*:*:*", "matchCriteriaId": "13BBD2A3-AE10-48B9-8776-4FB1CAC37D44"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:rc2:*:*:*:*:*:*", "matchCriteriaId": "B25680CC-8918-4F27-8D7E-A6579215450B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:rc3:*:*:*:*:*:*", "matchCriteriaId": "92C48B4C-410C-4BA8-A28A-B2E928320FCC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:rc4:*:*:*:*:*:*", "matchCriteriaId": "CB447523-855B-461E-8197-95169BE86EB0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "B155BBDF-6DF6-4FF5-9C41-D8A5266DCC67"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "28476DEC-9630-4B40-9D4D-9BC151DC4CA4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "5646880A-2355-4BDD-89E7-825863A0311F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "7FF99148-267A-46F8-9927-A9082269BAF6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "A783C083-5D9C-48F9-B5A6-A97A9604FB19"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.6:*:*:*:*:*:*:*", "matchCriteriaId": "2B817A24-03AC-46CD-BEFA-505457FD2A5D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.7:*:*:*:*:*:*:*", "matchCriteriaId": "51CF1BCE-090E-4B70-BA16-ACB74411293B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.8:*:*:*:*:*:*:*", "matchCriteriaId": "187AAD67-10D7-4B57-B4C6-00443E246AF3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.9:*:*:*:*:*:*:*", "matchCriteriaId": "F341CE88-C5BC-4CDD-9CB5-B6BAD7152E63"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.10:*:*:*:*:*:*:*", "matchCriteriaId": "37ACE2A6-C229-4236-8E9F-235F008F3AA0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:*:*:*:*:*:*:*", "matchCriteriaId": "D3220B70-917F-4F9F-8A3B-2BF581281E8D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc2:*:*:*:*:*:*", "matchCriteriaId": "99372D07-C06A-41FA-9843-6D57F99AB5AF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc3:*:*:*:*:*:*", "matchCriteriaId": "2B9DC110-D260-4DB4-B8B0-EF1D160ADA07"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc4:*:*:*:*:*:*", "matchCriteriaId": "6192FE84-4D53-40D4-AF61-78CE7136141A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc5:*:*:*:*:*:*", "matchCriteriaId": "42FEF3CF-1302-45EB-89CC-3786FE4BAC1F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc6:*:*:*:*:*:*", "matchCriteriaId": "AE6A6B58-2C89-4DE4-BA57-78100818095C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc7:*:*:*:*:*:*", "matchCriteriaId": "1D467F87-2F13-4D26-9A93-E0BA526FEA24"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "FE348F7B-02DE-47D5-8011-F83DA9426021"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "E91594EA-F0A3-41B3-A9C6-F7864FC2F229"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "9E1ECCDB-0208-48F6-B44F-16CC0ECE3503"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "FBA8B5DE-372E-47E0-A0F6-BE286D509CC3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.5:*:*:*:*:*:*:*", "matchCriteriaId": "9A1CA083-2CF8-45AE-9E15-1AA3A8352E3B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.6:*:*:*:*:*:*:*", "matchCriteriaId": "19D69A49-5290-4C5F-8157-719AD58D253D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.7:*:*:*:*:*:*:*", "matchCriteriaId": "290BD969-42E7-47B0-B21B-06DE4865432C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.8:*:*:*:*:*:*:*", "matchCriteriaId": "23A9E29E-DE78-4C73-9FBD-C2410F5FC8B8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.9:*:*:*:*:*:*:*", "matchCriteriaId": "018434C9-E75F-45CB-A169-DAB4B1D864D7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.10:*:*:*:*:*:*:*", "matchCriteriaId": "DC0AC68F-EC58-4C4F-8CBC-A59ECC00CCDE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.11:*:*:*:*:*:*:*", "matchCriteriaId": "C123C844-F6D7-471E-A62E-F756042FB1CD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.12:*:*:*:*:*:*:*", "matchCriteriaId": "A11C38BB-7FA2-49B0-AAC9-83DB387A06DB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.13:*:*:*:*:*:*:*", "matchCriteriaId": "61F3733C-E5F6-4855-B471-DF3FB823613B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.14:*:*:*:*:*:*:*", "matchCriteriaId": "1DDCA75F-9A06-4457-9A45-38A38E7F7086"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.15:*:*:*:*:*:*:*", "matchCriteriaId": "7AEA837E-7864-4003-8DB7-111ED710A7E1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.16:*:*:*:*:*:*:*", "matchCriteriaId": "B6FE471F-2D1F-4A1D-A197-7E46B75787E1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.17:*:*:*:*:*:*:*", "matchCriteriaId": "FDA9E6AB-58DC-4EC5-A25C-11F9D0B38BF7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.18:*:*:*:*:*:*:*", "matchCriteriaId": "DC6B8DB3-B05B-41A2-B091-342D66AAE8F5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.19:*:*:*:*:*:*:*", "matchCriteriaId": "958F0FF8-33EF-4A71-A0BD-572C85211DBA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.20:*:*:*:*:*:*:*", "matchCriteriaId": "FBA39F48-B02F-4C48-B304-DA9CCA055244"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.21:*:*:*:*:*:*:*", "matchCriteriaId": "1FF841F3-48A7-41D7-9C45-A8170435A5EB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.22:*:*:*:*:*:*:*", "matchCriteriaId": "EF506916-A6DC-4B1E-90E5-959492AF55F4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.23:*:*:*:*:*:*:*", "matchCriteriaId": "B3CDAD1F-2C6A-48C0-8FAB-C2659373FA25"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.24:*:*:*:*:*:*:*", "matchCriteriaId": "4FFE4B22-C96A-43D0-B993-F51EDD9C5E0E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.25:*:*:*:*:*:*:*", "matchCriteriaId": "F571CC8B-B212-4553-B463-1DB01D616E8A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.26:*:*:*:*:*:*:*", "matchCriteriaId": "84E3E151-D437-48ED-A529-731EEFF88567"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.27:*:*:*:*:*:*:*", "matchCriteriaId": "E9E3EA3C-CCA5-4433-86E0-3D02C4757A0A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.28:*:*:*:*:*:*:*", "matchCriteriaId": "F7AC4F7D-9FA6-4CF1-B2E9-70BF7D4D177C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.29:*:*:*:*:*:*:*", "matchCriteriaId": "3CE3A80D-9648-43CC-8F99-D741ED6552BF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.30:*:*:*:*:*:*:*", "matchCriteriaId": "C8A98C03-A465-41B4-A551-A26FEC7FFD94"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:*:*:*:*:*:*:*", "matchCriteriaId": "AFB76697-1C2F-48C0-9B14-517EC053D4B3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc1:*:*:*:*:*:*", "matchCriteriaId": "BED88DFD-1DC5-4505-A441-44ECDEF0252D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc2:*:*:*:*:*:*", "matchCriteriaId": "DBFD2ACD-728A-4082-BB6A-A1EF6E58E47D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc3:*:*:*:*:*:*", "matchCriteriaId": "C31B0E51-F62D-4053-B04F-FC4D5BC373D2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc4:*:*:*:*:*:*", "matchCriteriaId": "A914303E-1CB6-4AAD-9F5F-DE5433C4E814"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc5:*:*:*:*:*:*", "matchCriteriaId": "203BBA69-90B2-4C5E-8023-C14180742421"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc6:*:*:*:*:*:*", "matchCriteriaId": "0DBFAB53-B889-4028-AC0E-7E165B152A18"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc7:*:*:*:*:*:*", "matchCriteriaId": "FE409AEC-F677-4DEF-8EB7-2C35809043CE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "578EC12B-402F-4AD4-B8F8-C9B2CAB06891"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.2:*:*:*:*:*:*:*", "matchCriteriaId": "877002ED-8097-4BB4-BB88-6FC6306C38B2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.3:*:*:*:*:*:*:*", "matchCriteriaId": "76294CE3-D72C-41D5-9E0F-B693D0042699"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.4:*:*:*:*:*:*:*", "matchCriteriaId": "916E97D4-1FAB-42F5-826B-653B1C0909A8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.5:*:*:*:*:*:*:*", "matchCriteriaId": "33FD2217-C5D0-48C1-AD74-3527127FEF9C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.6:*:*:*:*:*:*:*", "matchCriteriaId": "2E92971F-B629-4E0A-9A50-8B235F9704B8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.7:*:*:*:*:*:*:*", "matchCriteriaId": "EDD3A069-3829-4EE2-9D5A-29459F29D4C1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.8:*:*:*:*:*:*:*", "matchCriteriaId": "A4A0964C-CEB2-41D7-A69C-1599B05B6171"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:*:*:*:*:*:*:*", "matchCriteriaId": "0F960FA6-F904-4A4E-B483-44C70090E9A1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc1:*:*:*:*:*:*", "matchCriteriaId": "261C1B41-C9E0-414F-8368-51C0C0B8AD38"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc2:*:*:*:*:*:*", "matchCriteriaId": "5CCA261D-2B97-492F-89A0-5F209A804350"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc3:*:*:*:*:*:*", "matchCriteriaId": "1B1C0C68-9194-473F-BE5E-EC7F184899FA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc4:*:*:*:*:*:*", "matchCriteriaId": "D7A6AC9E-BEA6-44B0-B3B3-F0F94E32424A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc5:*:*:*:*:*:*", "matchCriteriaId": "16038328-9399-4B85-B777-BA4757D02C9B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc6:*:*:*:*:*:*", "matchCriteriaId": "16CA2757-FA8D-43D9-96E8-D3C0EB6E1DEF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc7:*:*:*:*:*:*", "matchCriteriaId": "E8CB5481-5EAE-401E-BD7E-D3095CCA9E94"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "A0F36FAC-141D-476D-84C5-A558C199F904"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "51D64824-25F6-4761-BD6A-29038A143744"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "E284C8A1-740F-454D-A774-99CD3A21B594"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "C70D72AE-0CBF-4324-9935-57E28EC6279C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "F674B06B-7E86-4E41-9126-8152D0DDABAE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "7039B3EC-8B22-413E-B582-B4BEC6181241"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "35CF1DD2-80B9-4476-8963-5C3EF52B33F4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "BFB0B05B-A5CE-4B9C-AE7F-83062868D35B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "7DA94F50-2A62-4300-BF4D-A342AAE35629"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "252D937B-50DC-444F-AE73-5FCF6203DF27"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "F6D8EE51-02C1-47BC-A92C-0A8ABEFD28FF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "7F20A5D7-3B38-4911-861A-04C8310D5916"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.14:*:*:*:*:*:*:*", "matchCriteriaId": "D472DE3A-71D8-4F40-9DDE-85929A2B047D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "B2AED943-65A8-4FDB-BBD0-CCEF8682A48C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.16:*:*:*:*:*:*:*", "matchCriteriaId": "D4640185-F3D8-4575-A71D-4C889A93DE2C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.17:*:*:*:*:*:*:*", "matchCriteriaId": "144CCF7C-025E-4879-B2E7-ABB8E4390BE5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.18:*:*:*:*:*:*:*", "matchCriteriaId": "B6FAA052-0B2B-40CE-8C98-919B8D08A5ED"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.19:*:*:*:*:*:*:*", "matchCriteriaId": "4B5A53DE-9C83-4A6B-96F3-23C03BF445D9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.20:*:*:*:*:*:*:*", "matchCriteriaId": "063EB879-CB05-4E33-AA90-9E43516839B5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.21:*:*:*:*:*:*:*", "matchCriteriaId": "2D25764F-4B02-4C65-954E-8C7D6632DE00"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.22:*:*:*:*:*:*:*", "matchCriteriaId": "F31F5BF3-CD0A-465C-857F-273841BCD28A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.23:*:*:*:*:*:*:*", "matchCriteriaId": "FF302C8A-079B-42B9-B455-CD9083BFA067"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.24:*:*:*:*:*:*:*", "matchCriteriaId": "744999C0-33D3-4363-B3DB-E0D02CDD3918"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.25:*:*:*:*:*:*:*", "matchCriteriaId": "C2E77A76-2A60-45D8-9337-867BC22C5110"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.26:*:*:*:*:*:*:*", "matchCriteriaId": "C9F4AAE7-C870-46B7-B559-2949737BE777"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.27:*:*:*:*:*:*:*", "matchCriteriaId": "20FA2824-20B0-48B8-BB0A-4904C1D3E8AA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.28:*:*:*:*:*:*:*", "matchCriteriaId": "9F9B347E-61AC-419F-9701-B862BBFA46F2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.29:*:*:*:*:*:*:*", "matchCriteriaId": "989F351C-8B7C-4C1B-AFA2-AE9431576368"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.30:*:*:*:*:*:*:*", "matchCriteriaId": "8D22172A-9FA7-42E0-8451-165D8E47A573"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.31:*:*:*:*:*:*:*", "matchCriteriaId": "CE31624C-94F9-45D8-9B4A-D0028F10602F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.32:*:*:*:*:*:*:*", "matchCriteriaId": "70967A83-28F6-4568-9ADA-6EF232E5BBC2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "962B0C45-AB29-4383-AC16-C6E8245D0FF7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "A0EE126B-74B2-4F79-BFE1-3DC169F3F9B2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "392075E0-A9C7-4B4A-90F9-7F1ADFF5EFA7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.4:*:*:*:*:*:*:*", "matchCriteriaId": "ECC66968-06F0-4874-A95A-A292C36E45C1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.5:*:*:*:*:*:*:*", "matchCriteriaId": "5FE986E6-1068-4E1B-8EAB-DF1EAF32B4E3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.6:*:*:*:*:*:*:*", "matchCriteriaId": "543E8536-1A8E-4E76-B89F-1B1F9F26FAB8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.7:*:*:*:*:*:*:*", "matchCriteriaId": "EC2B45E3-31E1-4B46-85FA-3A84E75B8F84"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6:*:*:*:*:*:*:*", "matchCriteriaId": "DDB8CC75-D3EE-417C-A83D-CB6D666FE595"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "09A072F1-7BEE-4236-ACBB-55DB8FEF4A03"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "E19D5A58-17D6-4502-A57A-70B2F84817A4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.3:*:*:*:*:*:*:*", "matchCriteriaId": "D58BA035-1204-4DFA-98A1-12111FB6222E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.4:*:*:*:*:*:*:*", "matchCriteriaId": "A17F2E87-8EB8-476A-B5B5-9AE5CF53D9FE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.5:*:*:*:*:*:*:*", "matchCriteriaId": "A8CCC101-5852-4299-9B67-EA1B149D58C0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.6:*:*:*:*:*:*:*", "matchCriteriaId": "B8074D32-C252-4AD3-A579-1C5EDDD7014B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.7:*:*:*:*:*:*:*", "matchCriteriaId": "962AA802-8179-4606-AAC0-9363BAEABC9F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.8:*:*:*:*:*:*:*", "matchCriteriaId": "1286C858-D5A2-45F3-86D1-E50FE53FB23C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.9:*:*:*:*:*:*:*", "matchCriteriaId": "5AC4A13E-F560-4D01-98A3-E2A2B82EB25B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.10:*:*:*:*:*:*:*", "matchCriteriaId": "942C462A-5398-4BB9-A792-598682E1FEF2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.11:*:*:*:*:*:*:*", "matchCriteriaId": "B852F7E0-0282-483D-BB4D-18CB7A4F1392"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7:*:*:*:*:*:*:*", "matchCriteriaId": "53ED9A31-99CC-41C8-8B72-5B2A9B49AA6C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "EFD646BC-62F7-47CF-B0BE-768F701F7D9A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.2:*:*:*:*:*:*:*", "matchCriteriaId": "F43D418E-87C1-4C83-9FF1-4F45B4F452DD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.3:*:*:*:*:*:*:*", "matchCriteriaId": "680D0E00-F29A-487C-8770-8E7EAC672B7C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.4:*:*:*:*:*:*:*", "matchCriteriaId": "2DCA96A4-A836-4E94-A39C-3AD3EA1D9611"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.5:*:*:*:*:*:*:*", "matchCriteriaId": "753C05E3-B603-4E36-B9BA-FAEDCBF62A7D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.6:*:*:*:*:*:*:*", "matchCriteriaId": "E385C2E0-B9F1-4564-8E6D-56FD9E762405"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.7:*:*:*:*:*:*:*", "matchCriteriaId": "041335D4-05E1-4004-9381-28AAD5994B47"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.8:*:*:*:*:*:*:*", "matchCriteriaId": "370F2AE5-3DBC-46B9-AC70-F052C9229C00"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.9:*:*:*:*:*:*:*", "matchCriteriaId": "7A971BE3-259D-4494-BBC5-12793D92DB57"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.10:*:*:*:*:*:*:*", "matchCriteriaId": "8E4719A6-FDEA-4714-A830-E23A52AE90BC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.0:*:*:*:*:*:*:*", "matchCriteriaId": "1A6E41FB-38CE-49F2-B796-9A5AA648E73F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.1:*:*:*:*:*:*:*", "matchCriteriaId": "93523FE1-5993-46CB-9299-7C8C1A04E873"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.2:*:*:*:*:*:*:*", "matchCriteriaId": "27ADC356-6BE9-43A3-9E0B-393DC4B1559A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.3:*:*:*:*:*:*:*", "matchCriteriaId": "4F543D23-1774-4D14-A7D1-AD49EDEA94DD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.4:*:*:*:*:*:*:*", "matchCriteriaId": "FC323F58-CA00-4C3C-BA4D-CC2C0A6E5F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.5:*:*:*:*:*:*:*", "matchCriteriaId": "FEA0B2E3-668D-40ED-9D3D-709EB6449F8D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.6:*:*:*:*:*:*:*", "matchCriteriaId": "3431B258-4EC8-4E7F-87BB-4D934880601E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.7:*:*:*:*:*:*:*", "matchCriteriaId": "1B09FA1E-8B28-4F2A-BA7E-8E1C40365970"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.8:*:*:*:*:*:*:*", "matchCriteriaId": "91917120-9D68-41C0-8B5D-85C256BC6200"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.9:*:*:*:*:*:*:*", "matchCriteriaId": "AAD268A0-096C-4C31-BEC5-D47F5149D462"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.10:*:*:*:*:*:*:*", "matchCriteriaId": "32BD2427-C47F-4660-A1D9-448E500EF5B9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.11:*:*:*:*:*:*:*", "matchCriteriaId": "02048CE5-81C7-4DFB-BC40-CE4C86B7E022"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.12:*:*:*:*:*:*:*", "matchCriteriaId": "934D2B37-0575-4A75-B00B-0028316D6DF0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.13:*:*:*:*:*:*:*", "matchCriteriaId": "06754C21-995C-4850-A4DC-F21826C0F8C5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc1:*:*:*:*:*:*", "matchCriteriaId": "42633FF9-FB0C-4095-B4A1-8D623A98683B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc2:*:*:*:*:*:*", "matchCriteriaId": "08C04619-89A2-4B15-82A2-48BCC662C1F1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc3:*:*:*:*:*:*", "matchCriteriaId": "5B039196-7159-476C-876A-C61242CC41DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc4:*:*:*:*:*:*", "matchCriteriaId": "3A9E0457-53C9-44DD-ACFB-31EE1D1E060E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc5:*:*:*:*:*:*", "matchCriteriaId": "BEE406E7-87BA-44BA-BF61-673E6CC44A2F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc6:*:*:*:*:*:*", "matchCriteriaId": "29FBA173-658F-45DC-8205-934CACD67166"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc7:*:*:*:*:*:*", "matchCriteriaId": "139700F0-BA32-40CF-B9DF-C9C450384FDE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "E578085C-3968-4543-BEBA-EE3C3CB4FA02"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.1:*:*:*:*:*:*:*", "matchCriteriaId": "4DCFA441-68FB-4559-A245-FF0B79DE43CA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.2:*:*:*:*:*:*:*", "matchCriteriaId": "8C2508D8-6571-4B81-A0D7-E494CCD039CE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.3:*:*:*:*:*:*:*", "matchCriteriaId": "8B516926-5E86-4C0A-85F3-F64E1FCDA249"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.4:*:*:*:*:*:*:*", "matchCriteriaId": "069D774D-79BE-479F-BF4E-F021AD808114"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.10:*:*:*:*:*:*:*", "matchCriteriaId": "C72FA8A6-60A6-4486-A245-7BEF8B2A2711"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.11:*:*:*:*:*:*:*", "matchCriteriaId": "0A498D90-BB99-405E-9FA6-1FBFE179787E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.0:*:*:*:*:*:*:*", "matchCriteriaId": "A91DB1A2-8160-46FE-AB5F-ECABD9A384F4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.1:*:*:*:*:*:*:*", "matchCriteriaId": "D0D32776-8ADB-4E79-846A-C0C99FED19E0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.2:*:*:*:*:*:*:*", "matchCriteriaId": "B7D01673-D13F-487F-81B6-1279C187277E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.3:*:*:*:*:*:*:*", "matchCriteriaId": "ADB27A3E-78E4-40F7-9716-A1099B0D85FB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.4:*:*:*:*:*:*:*", "matchCriteriaId": "16E7136A-A8A6-4BF5-AF5D-AFB5C7A10712"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.5:*:*:*:*:*:*:*", "matchCriteriaId": "6FE127AC-E61D-427A-B998-D60DF5AABA21"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.6:*:*:*:*:*:*:*", "matchCriteriaId": "3819FF99-AEC5-4466-8542-D395419E4308"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.7:*:*:*:*:*:*:*", "matchCriteriaId": "E621FA1A-464B-4D2A-A0D6-EDA475A3709B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.8:*:*:*:*:*:*:*", "matchCriteriaId": "B760B422-EA11-43AB-B6D2-CA54E7229663"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.9:*:*:*:*:*:*:*", "matchCriteriaId": "D2CA7BBC-917C-4F31-A442-465C30444836"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.10:*:*:*:*:*:*:*", "matchCriteriaId": "AE778000-4FD5-4032-86CE-5930EF4CB7C1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.11:*:*:*:*:*:*:*", "matchCriteriaId": "B3344EEB-F037-48FE-81DC-67F6384F7D9A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.12:*:*:*:*:*:*:*", "matchCriteriaId": "0244B0CA-9C67-4F06-BFBA-1F257112AC08"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11:*:*:*:*:*:*:*", "matchCriteriaId": "639E3A57-A9E7-40E6-8929-81CCC0060EFB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.1:*:*:*:*:*:*:*", "matchCriteriaId": "07012ADD-F521-40A8-B067-E87C2238A3D2"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.11.1", "matchCriteriaId": "A51D71EF-AF89-4119-9F5F-C5FD22164AD9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.5:*:*:*:*:*:*:*", "matchCriteriaId": "6FE127AC-E61D-427A-B998-D60DF5AABA21"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.6:*:*:*:*:*:*:*", "matchCriteriaId": "3819FF99-AEC5-4466-8542-D395419E4308"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.7:*:*:*:*:*:*:*", "matchCriteriaId": "E621FA1A-464B-4D2A-A0D6-EDA475A3709B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.8:*:*:*:*:*:*:*", "matchCriteriaId": "B760B422-EA11-43AB-B6D2-CA54E7229663"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.9:*:*:*:*:*:*:*", "matchCriteriaId": "D2CA7BBC-917C-4F31-A442-465C30444836"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.10:*:*:*:*:*:*:*", "matchCriteriaId": "AE778000-4FD5-4032-86CE-5930EF4CB7C1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.11:*:*:*:*:*:*:*", "matchCriteriaId": "B3344EEB-F037-48FE-81DC-67F6384F7D9A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.12:*:*:*:*:*:*:*", "matchCriteriaId": "0244B0CA-9C67-4F06-BFBA-1F257112AC08"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11:*:*:*:*:*:*:*", "matchCriteriaId": "639E3A57-A9E7-40E6-8929-81CCC0060EFB"}]}]}], "references": [{"url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=95ee62083cb6453e056562d91f597552021e6ae7", "source": "secalert@redhat.com"}, {"url": "http://rhn.redhat.com/errata/RHSA-2013-1490.html", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2013/09/13/3", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "http://www.ubuntu.com/usn/USN-2019-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2021-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2022-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2024-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2038-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2039-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2041-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2045-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2049-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2050-1", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1007872", "source": "secalert@redhat.com"}, {"url": "https://github.com/torvalds/linux/commit/95ee62083cb6453e056562d91f597552021e6ae7", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/95ee62083cb6453e056562d91f597552021e6ae7"}}