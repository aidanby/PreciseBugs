{"buggy_code": ["<?php namespace BookStack\\Entities\\Managers;\n\nuse BookStack\\Entities\\Page;\nuse DOMDocument;\nuse DOMNodeList;\nuse DOMXPath;\n\nclass PageContent\n{\n\n    protected $page;\n\n    /**\n     * PageContent constructor.\n     */\n    public function __construct(Page $page)\n    {\n        $this->page = $page;\n    }\n\n    /**\n     * Update the content of the page with new provided HTML.\n     */\n    public function setNewHTML(string $html)\n    {\n        $this->page->html = $this->formatHtml($html);\n        $this->page->text = $this->toPlainText();\n    }\n\n    /**\n     * Formats a page's html to be tagged correctly within the system.\n     */\n    protected function formatHtml(string $htmlText): string\n    {\n        if ($htmlText == '') {\n            return $htmlText;\n        }\n\n        libxml_use_internal_errors(true);\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($htmlText, 'HTML-ENTITIES', 'UTF-8'));\n\n        $container = $doc->documentElement;\n        $body = $container->childNodes->item(0);\n        $childNodes = $body->childNodes;\n        $xPath = new DOMXPath($doc);\n\n        // Set ids on top-level nodes\n        $idMap = [];\n        foreach ($childNodes as $index => $childNode) {\n            [$oldId, $newId] = $this->setUniqueId($childNode, $idMap);\n            if ($newId && $newId !== $oldId) {\n                $this->updateLinks($xPath, '#' . $oldId, '#' . $newId);\n            }\n        }\n\n        // Ensure no duplicate ids within child items\n        $idElems = $xPath->query('//body//*//*[@id]');\n        foreach ($idElems as $domElem) {\n            [$oldId, $newId] = $this->setUniqueId($domElem, $idMap);\n            if ($newId && $newId !== $oldId) {\n                $this->updateLinks($xPath, '#' . $oldId, '#' . $newId);\n            }\n        }\n\n        // Generate inner html as a string\n        $html = '';\n        foreach ($childNodes as $childNode) {\n            $html .= $doc->saveHTML($childNode);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Update the all links to the $old location to instead point to $new.\n     */\n    protected function updateLinks(DOMXPath $xpath, string $old, string $new)\n    {\n        $old = str_replace('\"', '', $old);\n        $matchingLinks = $xpath->query('//body//*//*[@href=\"'.$old.'\"]');\n        foreach ($matchingLinks as $domElem) {\n            $domElem->setAttribute('href', $new);\n        }\n    }\n\n    /**\n     * Set a unique id on the given DOMElement.\n     * A map for existing ID's should be passed in to check for current existence.\n     * Returns a pair of strings in the format [old_id, new_id]\n     */\n    protected function setUniqueId(\\DOMNode $element, array &$idMap): array\n    {\n        if (get_class($element) !== 'DOMElement') {\n            return ['', ''];\n        }\n\n        // Stop if there's an existing valid id that has not already been used.\n        $existingId = $element->getAttribute('id');\n        if (strpos($existingId, 'bkmrk') === 0 && !isset($idMap[$existingId])) {\n            $idMap[$existingId] = true;\n            return [$existingId, $existingId];\n        }\n\n        // Create an unique id for the element\n        // Uses the content as a basis to ensure output is the same every time\n        // the same content is passed through.\n        $contentId = 'bkmrk-' . mb_substr(strtolower(preg_replace('/\\s+/', '-', trim($element->nodeValue))), 0, 20);\n        $newId = urlencode($contentId);\n        $loopIndex = 0;\n\n        while (isset($idMap[$newId])) {\n            $newId = urlencode($contentId . '-' . $loopIndex);\n            $loopIndex++;\n        }\n\n        $element->setAttribute('id', $newId);\n        $idMap[$newId] = true;\n        return [$existingId, $newId];\n    }\n\n    /**\n     * Get a plain-text visualisation of this page.\n     */\n    protected function toPlainText(): string\n    {\n        $html = $this->render(true);\n        return html_entity_decode(strip_tags($html));\n    }\n\n    /**\n     * Render the page for viewing\n     */\n    public function render(bool $blankIncludes = false) : string\n    {\n        $content = $this->page->html;\n\n        if (!config('app.allow_content_scripts')) {\n            $content = $this->escapeScripts($content);\n        }\n\n        if ($blankIncludes) {\n            $content = $this->blankPageIncludes($content);\n        } else {\n            $content = $this->parsePageIncludes($content);\n        }\n\n        return $content;\n    }\n\n    /**\n     * Parse the headers on the page to get a navigation menu\n     */\n    public function getNavigation(string $htmlContent): array\n    {\n        if (empty($htmlContent)) {\n            return [];\n        }\n\n        libxml_use_internal_errors(true);\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($htmlContent, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n        $headers = $xPath->query(\"//h1|//h2|//h3|//h4|//h5|//h6\");\n\n        return $headers ? $this->headerNodesToLevelList($headers) : [];\n    }\n\n    /**\n     * Convert a DOMNodeList into an array of readable header attributes\n     * with levels normalised to the lower header level.\n     */\n    protected function headerNodesToLevelList(DOMNodeList $nodeList): array\n    {\n        $tree = collect($nodeList)->map(function ($header) {\n            $text = trim(str_replace(\"\\xc2\\xa0\", '', $header->nodeValue));\n            $text = mb_substr($text, 0, 100);\n\n            return [\n                'nodeName' => strtolower($header->nodeName),\n                'level' => intval(str_replace('h', '', $header->nodeName)),\n                'link' => '#' . $header->getAttribute('id'),\n                'text' => $text,\n            ];\n        })->filter(function ($header) {\n            return mb_strlen($header['text']) > 0;\n        });\n\n        // Shift headers if only smaller headers have been used\n        $levelChange = ($tree->pluck('level')->min() - 1);\n        $tree = $tree->map(function ($header) use ($levelChange) {\n            $header['level'] -= ($levelChange);\n            return $header;\n        });\n\n        return $tree->toArray();\n    }\n\n    /**\n     * Remove any page include tags within the given HTML.\n     */\n    protected function blankPageIncludes(string $html) : string\n    {\n        return preg_replace(\"/{{@\\s?([0-9].*?)}}/\", '', $html);\n    }\n\n    /**\n     * Parse any include tags \"{{@<page_id>#section}}\" to be part of the page.\n     */\n    protected function parsePageIncludes(string $html) : string\n    {\n        $matches = [];\n        preg_match_all(\"/{{@\\s?([0-9].*?)}}/\", $html, $matches);\n\n        foreach ($matches[1] as $index => $includeId) {\n            $fullMatch = $matches[0][$index];\n            $splitInclude = explode('#', $includeId, 2);\n\n            // Get page id from reference\n            $pageId = intval($splitInclude[0]);\n            if (is_nan($pageId)) {\n                continue;\n            }\n\n            // Find page and skip this if page not found\n            $matchedPage = Page::visible()->find($pageId);\n            if ($matchedPage === null) {\n                $html = str_replace($fullMatch, '', $html);\n                continue;\n            }\n\n            // If we only have page id, just insert all page html and continue.\n            if (count($splitInclude) === 1) {\n                $html = str_replace($fullMatch, $matchedPage->html, $html);\n                continue;\n            }\n\n            // Create and load HTML into a document\n            $innerContent = $this->fetchSectionOfPage($matchedPage, $splitInclude[1]);\n            $html = str_replace($fullMatch, trim($innerContent), $html);\n        }\n\n        return $html;\n    }\n\n\n    /**\n     * Fetch the content from a specific section of the given page.\n     */\n    protected function fetchSectionOfPage(Page $page, string $sectionId): string\n    {\n        $topLevelTags = ['table', 'ul', 'ol'];\n        $doc = new DOMDocument();\n        libxml_use_internal_errors(true);\n        $doc->loadHTML(mb_convert_encoding('<body>'.$page->html.'</body>', 'HTML-ENTITIES', 'UTF-8'));\n\n        // Search included content for the id given and blank out if not exists.\n        $matchingElem = $doc->getElementById($sectionId);\n        if ($matchingElem === null) {\n            return '';\n        }\n\n        // Otherwise replace the content with the found content\n        // Checks if the top-level wrapper should be included by matching on tag types\n        $innerContent = '';\n        $isTopLevel = in_array(strtolower($matchingElem->nodeName), $topLevelTags);\n        if ($isTopLevel) {\n            $innerContent .= $doc->saveHTML($matchingElem);\n        } else {\n            foreach ($matchingElem->childNodes as $childNode) {\n                $innerContent .= $doc->saveHTML($childNode);\n            }\n        }\n        libxml_clear_errors();\n\n        return $innerContent;\n    }\n\n    /**\n     * Escape script tags within HTML content.\n     */\n    protected function escapeScripts(string $html) : string\n    {\n        if (empty($html)) {\n            return $html;\n        }\n\n        libxml_use_internal_errors(true);\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n\n        // Remove standard script tags\n        $scriptElems = $xPath->query('//script');\n        foreach ($scriptElems as $scriptElem) {\n            $scriptElem->parentNode->removeChild($scriptElem);\n        }\n\n        // Remove data or JavaScript iFrames\n        $badIframes = $xPath->query('//*[contains(@src, \\'data:\\')] | //*[contains(@src, \\'javascript:\\')] | //*[@srcdoc]');\n        foreach ($badIframes as $badIframe) {\n            $badIframe->parentNode->removeChild($badIframe);\n        }\n\n        // Remove 'on*' attributes\n        $onAttributes = $xPath->query('//@*[starts-with(name(), \\'on\\')]');\n        foreach ($onAttributes as $attr) {\n            /** @var \\DOMAttr $attr*/\n            $attrName = $attr->nodeName;\n            $attr->parentNode->removeAttribute($attrName);\n        }\n\n        $html = '';\n        $topElems = $doc->documentElement->childNodes->item(0)->childNodes;\n        foreach ($topElems as $child) {\n            $html .= $doc->saveHTML($child);\n        }\n\n        return $html;\n    }\n}\n", "<?php namespace Tests\\Entity;\n\nuse BookStack\\Entities\\Managers\\PageContent;\nuse BookStack\\Entities\\Page;\nuse Tests\\TestCase;\n\nclass PageContentTest extends TestCase\n{\n\n    public function test_page_includes()\n    {\n        $page = Page::first();\n        $secondPage = Page::where('id', '!=', $page->id)->first();\n\n        $secondPage->html = \"<p id='section1'>Hello, This is a test</p><p id='section2'>This is a second block of content</p>\";\n        $secondPage->save();\n\n        $this->asEditor();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertDontSee('Hello, This is a test');\n\n        $originalHtml = $page->html;\n        $page->html .= \"{{@{$secondPage->id}}}\";\n        $page->save();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertSee('Hello, This is a test');\n        $pageContent->assertSee('This is a second block of content');\n\n        $page->html = $originalHtml . \" Well {{@{$secondPage->id}#section2}}\";\n        $page->save();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertDontSee('Hello, This is a test');\n        $pageContent->assertSee('Well This is a second block of content');\n    }\n\n    public function test_saving_page_with_includes()\n    {\n        $page = Page::first();\n        $secondPage = Page::where('id', '!=', $page->id)->first();\n\n        $this->asEditor();\n        $includeTag = '{{@' . $secondPage->id . '}}';\n        $page->html = '<p>' . $includeTag . '</p>';\n\n        $resp = $this->put($page->getUrl(), ['name' => $page->name, 'html' => $page->html, 'summary' => '']);\n\n        $resp->assertStatus(302);\n\n        $page = Page::find($page->id);\n        $this->assertStringContainsString($includeTag, $page->html);\n        $this->assertEquals('', $page->text);\n    }\n\n    public function test_page_includes_do_not_break_tables()\n    {\n        $page = Page::first();\n        $secondPage = Page::where('id', '!=', $page->id)->first();\n\n        $content = '<table id=\"table\"><tbody><tr><td>test</td></tr></tbody></table>';\n        $secondPage->html = $content;\n        $secondPage->save();\n\n        $page->html = \"{{@{$secondPage->id}#table}}\";\n        $page->save();\n\n        $this->asEditor();\n        $pageResp = $this->get($page->getUrl());\n        $pageResp->assertSee($content);\n    }\n\n    public function test_page_includes_rendered_on_book_export()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()\n            ->where('book_id', '!=', $page->book_id)\n            ->first();\n\n        $content = '<p id=\"bkmrk-meow\">my cat is awesome and scratchy</p>';\n        $secondPage->html = $content;\n        $secondPage->save();\n\n        $page->html = \"{{@{$secondPage->id}#bkmrk-meow}}\";\n        $page->save();\n\n        $this->asEditor();\n        $htmlContent = $this->get($page->book->getUrl('/export/html'));\n        $htmlContent->assertSee('my cat is awesome and scratchy');\n    }\n\n    public function test_page_content_scripts_removed_by_default()\n    {\n        $this->asEditor();\n        $page = Page::first();\n        $script = 'abc123<script>console.log(\"hello-test\")</script>abc123';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertDontSee($script);\n        $pageView->assertSee('abc123abc123');\n    }\n\n    public function test_more_complex_content_script_escaping_scenarios()\n    {\n        $checks = [\n            \"<p>Some script</p><script>alert('cat')</script>\",\n            \"<div><div><div><div><p>Some script</p><script>alert('cat')</script></div></div></div></div>\",\n            \"<p>Some script<script>alert('cat')</script></p>\",\n            \"<p>Some script <div><script>alert('cat')</script></div></p>\",\n            \"<p>Some script <script><div>alert('cat')</script></div></p>\",\n            \"<p>Some script <script><div>alert('cat')</script><script><div>alert('cat')</script></p><script><div>alert('cat')</script>\",\n        ];\n\n        $this->asEditor();\n        $page = Page::first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<script>');\n            $pageView->assertElementNotContains('.page-content', '</script>');\n        }\n\n    }\n\n    public function test_iframe_js_and_base64_urls_are_removed()\n    {\n        $checks = [\n            '<iframe src=\"javascript:alert(document.cookie)\"></iframe>',\n            '<iframe SRC=\" javascript: alert(document.cookie)\"></iframe>',\n            '<iframe src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<iframe src=\" data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<iframe srcdoc=\"<script>window.alert(document.cookie)</script>\"></iframe>'\n        ];\n\n        $this->asEditor();\n        $page = Page::first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<iframe>');\n            $pageView->assertElementNotContains('.page-content', '</iframe>');\n            $pageView->assertElementNotContains('.page-content', 'src=');\n            $pageView->assertElementNotContains('.page-content', 'javascript:');\n            $pageView->assertElementNotContains('.page-content', 'data:');\n            $pageView->assertElementNotContains('.page-content', 'base64');\n        }\n\n    }\n\n    public function test_page_inline_on_attributes_removed_by_default()\n    {\n        $this->asEditor();\n        $page = Page::first();\n        $script = '<p onmouseenter=\"console.log(\\'test\\')\">Hello</p>';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertDontSee($script);\n        $pageView->assertSee('<p>Hello</p>');\n    }\n\n    public function test_more_complex_inline_on_attributes_escaping_scenarios()\n    {\n        $checks = [\n            '<p onclick=\"console.log(\\'test\\')\">Hello</p>',\n            '<div>Lorem ipsum dolor sit amet.</div><p onclick=\"console.log(\\'test\\')\">Hello</p>',\n            '<div>Lorem ipsum dolor sit amet.<p onclick=\"console.log(\\'test\\')\">Hello</p></div>',\n            '<div><div><div><div>Lorem ipsum dolor sit amet.<p onclick=\"console.log(\\'test\\')\">Hello</p></div></div></div></div>',\n            '<div onclick=\"console.log(\\'test\\')\">Lorem ipsum dolor sit amet.</div><p onclick=\"console.log(\\'test\\')\">Hello</p><div></div>',\n            '<a a=\"<img src=1 onerror=\\'alert(1)\\'> ',\n        ];\n\n        $this->asEditor();\n        $page = Page::first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', 'onclick');\n        }\n\n    }\n\n    public function test_page_content_scripts_show_when_configured()\n    {\n        $this->asEditor();\n        $page = Page::first();\n        config()->push('app.allow_content_scripts', 'true');\n\n        $script = 'abc123<script>console.log(\"hello-test\")</script>abc123';\n        $page->html = \"no escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertSee($script);\n        $pageView->assertDontSee('abc123abc123');\n    }\n\n    public function test_page_inline_on_attributes_show_if_configured()\n    {\n        $this->asEditor();\n        $page = Page::first();\n        config()->push('app.allow_content_scripts', 'true');\n\n        $script = '<p onmouseenter=\"console.log(\\'test\\')\">Hello</p>';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertSee($script);\n        $pageView->assertDontSee('<p>Hello</p>');\n    }\n\n    public function test_duplicate_ids_does_not_break_page_render()\n    {\n        $this->asEditor();\n        $pageA = Page::first();\n        $pageB = Page::query()->where('id', '!=', $pageA->id)->first();\n\n        $content = '<ul id=\"bkmrk-xxx-%28\"></ul> <ul id=\"bkmrk-xxx-%28\"></ul>';\n        $pageA->html = $content;\n        $pageA->save();\n\n        $pageB->html = '<ul id=\"bkmrk-xxx-%28\"></ul> <p>{{@'. $pageA->id .'#test}}</p>';\n        $pageB->save();\n\n        $pageView = $this->get($pageB->getUrl());\n        $pageView->assertSuccessful();\n    }\n\n    public function test_duplicate_ids_fixed_on_page_save()\n    {\n        $this->asEditor();\n        $page = Page::first();\n\n        $content = '<ul id=\"bkmrk-test\"><li>test a</li><li><ul id=\"bkmrk-test\"><li>test b</li></ul></li></ul>';\n        $pageSave = $this->put($page->getUrl(), [\n            'name' => $page->name,\n            'html' => $content,\n            'summary' => ''\n        ]);\n        $pageSave->assertRedirect();\n\n        $updatedPage = Page::where('id', '=', $page->id)->first();\n        $this->assertEquals(substr_count($updatedPage->html, \"bkmrk-test\\\"\"), 1);\n    }\n\n    public function test_anchors_referencing_non_bkmrk_ids_rewritten_after_save()\n    {\n        $this->asEditor();\n        $page = Page::first();\n\n        $content = '<h1 id=\"non-standard-id\">test</h1><p><a href=\"#non-standard-id\">link</a></p>';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,\n            'html' => $content,\n            'summary' => ''\n        ]);\n\n        $updatedPage = Page::where('id', '=', $page->id)->first();\n        $this->assertStringContainsString('id=\"bkmrk-test\"', $updatedPage->html);\n        $this->assertStringContainsString('href=\"#bkmrk-test\"', $updatedPage->html);\n    }\n\n    public function test_get_page_nav_sets_correct_properties()\n    {\n        $content = '<h1 id=\"testa\">Hello</h1><h2 id=\"testb\">There</h2><h3 id=\"testc\">Donkey</h3>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(3, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h1',\n            'link' => '#testa',\n            'text' => 'Hello',\n            'level' => 1,\n        ], $navMap[0]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h2',\n            'link' => '#testb',\n            'text' => 'There',\n            'level' => 2,\n        ], $navMap[1]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h3',\n            'link' => '#testc',\n            'text' => 'Donkey',\n            'level' => 3,\n        ], $navMap[2]);\n    }\n\n    public function test_get_page_nav_does_not_show_empty_titles()\n    {\n        $content = '<h1 id=\"testa\">Hello</h1><h2 id=\"testb\">&nbsp;</h2><h3 id=\"testc\"></h3>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(1, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h1',\n            'link' => '#testa',\n            'text' => 'Hello'\n        ], $navMap[0]);\n    }\n\n    public function test_get_page_nav_shifts_headers_if_only_smaller_ones_are_used()\n    {\n        $content = '<h4 id=\"testa\">Hello</h4><h5 id=\"testb\">There</h5><h6 id=\"testc\">Donkey</h6>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(3, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h4',\n            'level' => 1,\n        ], $navMap[0]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h5',\n            'level' => 2,\n        ], $navMap[1]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h6',\n            'level' => 3,\n        ], $navMap[2]);\n    }\n\n    public function test_page_text_decodes_html_entities()\n    {\n        $page = Page::query()->first();\n\n        $this->actingAs($this->getAdmin())\n            ->put($page->getUrl(''), [\n                'name' => 'Testing',\n                'html' => '<p>&quot;Hello &amp; welcome&quot;</p>',\n            ]);\n\n        $page->refresh();\n        $this->assertEquals('\"Hello & welcome\"', $page->text);\n    }\n}\n"], "fixing_code": ["<?php namespace BookStack\\Entities\\Managers;\n\nuse BookStack\\Entities\\Page;\nuse DOMDocument;\nuse DOMNodeList;\nuse DOMXPath;\n\nclass PageContent\n{\n\n    protected $page;\n\n    /**\n     * PageContent constructor.\n     */\n    public function __construct(Page $page)\n    {\n        $this->page = $page;\n    }\n\n    /**\n     * Update the content of the page with new provided HTML.\n     */\n    public function setNewHTML(string $html)\n    {\n        $this->page->html = $this->formatHtml($html);\n        $this->page->text = $this->toPlainText();\n    }\n\n    /**\n     * Formats a page's html to be tagged correctly within the system.\n     */\n    protected function formatHtml(string $htmlText): string\n    {\n        if ($htmlText == '') {\n            return $htmlText;\n        }\n\n        libxml_use_internal_errors(true);\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($htmlText, 'HTML-ENTITIES', 'UTF-8'));\n\n        $container = $doc->documentElement;\n        $body = $container->childNodes->item(0);\n        $childNodes = $body->childNodes;\n        $xPath = new DOMXPath($doc);\n\n        // Set ids on top-level nodes\n        $idMap = [];\n        foreach ($childNodes as $index => $childNode) {\n            [$oldId, $newId] = $this->setUniqueId($childNode, $idMap);\n            if ($newId && $newId !== $oldId) {\n                $this->updateLinks($xPath, '#' . $oldId, '#' . $newId);\n            }\n        }\n\n        // Ensure no duplicate ids within child items\n        $idElems = $xPath->query('//body//*//*[@id]');\n        foreach ($idElems as $domElem) {\n            [$oldId, $newId] = $this->setUniqueId($domElem, $idMap);\n            if ($newId && $newId !== $oldId) {\n                $this->updateLinks($xPath, '#' . $oldId, '#' . $newId);\n            }\n        }\n\n        // Generate inner html as a string\n        $html = '';\n        foreach ($childNodes as $childNode) {\n            $html .= $doc->saveHTML($childNode);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Update the all links to the $old location to instead point to $new.\n     */\n    protected function updateLinks(DOMXPath $xpath, string $old, string $new)\n    {\n        $old = str_replace('\"', '', $old);\n        $matchingLinks = $xpath->query('//body//*//*[@href=\"'.$old.'\"]');\n        foreach ($matchingLinks as $domElem) {\n            $domElem->setAttribute('href', $new);\n        }\n    }\n\n    /**\n     * Set a unique id on the given DOMElement.\n     * A map for existing ID's should be passed in to check for current existence.\n     * Returns a pair of strings in the format [old_id, new_id]\n     */\n    protected function setUniqueId(\\DOMNode $element, array &$idMap): array\n    {\n        if (get_class($element) !== 'DOMElement') {\n            return ['', ''];\n        }\n\n        // Stop if there's an existing valid id that has not already been used.\n        $existingId = $element->getAttribute('id');\n        if (strpos($existingId, 'bkmrk') === 0 && !isset($idMap[$existingId])) {\n            $idMap[$existingId] = true;\n            return [$existingId, $existingId];\n        }\n\n        // Create an unique id for the element\n        // Uses the content as a basis to ensure output is the same every time\n        // the same content is passed through.\n        $contentId = 'bkmrk-' . mb_substr(strtolower(preg_replace('/\\s+/', '-', trim($element->nodeValue))), 0, 20);\n        $newId = urlencode($contentId);\n        $loopIndex = 0;\n\n        while (isset($idMap[$newId])) {\n            $newId = urlencode($contentId . '-' . $loopIndex);\n            $loopIndex++;\n        }\n\n        $element->setAttribute('id', $newId);\n        $idMap[$newId] = true;\n        return [$existingId, $newId];\n    }\n\n    /**\n     * Get a plain-text visualisation of this page.\n     */\n    protected function toPlainText(): string\n    {\n        $html = $this->render(true);\n        return html_entity_decode(strip_tags($html));\n    }\n\n    /**\n     * Render the page for viewing\n     */\n    public function render(bool $blankIncludes = false) : string\n    {\n        $content = $this->page->html;\n\n        if (!config('app.allow_content_scripts')) {\n            $content = $this->escapeScripts($content);\n        }\n\n        if ($blankIncludes) {\n            $content = $this->blankPageIncludes($content);\n        } else {\n            $content = $this->parsePageIncludes($content);\n        }\n\n        return $content;\n    }\n\n    /**\n     * Parse the headers on the page to get a navigation menu\n     */\n    public function getNavigation(string $htmlContent): array\n    {\n        if (empty($htmlContent)) {\n            return [];\n        }\n\n        libxml_use_internal_errors(true);\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($htmlContent, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n        $headers = $xPath->query(\"//h1|//h2|//h3|//h4|//h5|//h6\");\n\n        return $headers ? $this->headerNodesToLevelList($headers) : [];\n    }\n\n    /**\n     * Convert a DOMNodeList into an array of readable header attributes\n     * with levels normalised to the lower header level.\n     */\n    protected function headerNodesToLevelList(DOMNodeList $nodeList): array\n    {\n        $tree = collect($nodeList)->map(function ($header) {\n            $text = trim(str_replace(\"\\xc2\\xa0\", '', $header->nodeValue));\n            $text = mb_substr($text, 0, 100);\n\n            return [\n                'nodeName' => strtolower($header->nodeName),\n                'level' => intval(str_replace('h', '', $header->nodeName)),\n                'link' => '#' . $header->getAttribute('id'),\n                'text' => $text,\n            ];\n        })->filter(function ($header) {\n            return mb_strlen($header['text']) > 0;\n        });\n\n        // Shift headers if only smaller headers have been used\n        $levelChange = ($tree->pluck('level')->min() - 1);\n        $tree = $tree->map(function ($header) use ($levelChange) {\n            $header['level'] -= ($levelChange);\n            return $header;\n        });\n\n        return $tree->toArray();\n    }\n\n    /**\n     * Remove any page include tags within the given HTML.\n     */\n    protected function blankPageIncludes(string $html) : string\n    {\n        return preg_replace(\"/{{@\\s?([0-9].*?)}}/\", '', $html);\n    }\n\n    /**\n     * Parse any include tags \"{{@<page_id>#section}}\" to be part of the page.\n     */\n    protected function parsePageIncludes(string $html) : string\n    {\n        $matches = [];\n        preg_match_all(\"/{{@\\s?([0-9].*?)}}/\", $html, $matches);\n\n        foreach ($matches[1] as $index => $includeId) {\n            $fullMatch = $matches[0][$index];\n            $splitInclude = explode('#', $includeId, 2);\n\n            // Get page id from reference\n            $pageId = intval($splitInclude[0]);\n            if (is_nan($pageId)) {\n                continue;\n            }\n\n            // Find page and skip this if page not found\n            $matchedPage = Page::visible()->find($pageId);\n            if ($matchedPage === null) {\n                $html = str_replace($fullMatch, '', $html);\n                continue;\n            }\n\n            // If we only have page id, just insert all page html and continue.\n            if (count($splitInclude) === 1) {\n                $html = str_replace($fullMatch, $matchedPage->html, $html);\n                continue;\n            }\n\n            // Create and load HTML into a document\n            $innerContent = $this->fetchSectionOfPage($matchedPage, $splitInclude[1]);\n            $html = str_replace($fullMatch, trim($innerContent), $html);\n        }\n\n        return $html;\n    }\n\n\n    /**\n     * Fetch the content from a specific section of the given page.\n     */\n    protected function fetchSectionOfPage(Page $page, string $sectionId): string\n    {\n        $topLevelTags = ['table', 'ul', 'ol'];\n        $doc = new DOMDocument();\n        libxml_use_internal_errors(true);\n        $doc->loadHTML(mb_convert_encoding('<body>'.$page->html.'</body>', 'HTML-ENTITIES', 'UTF-8'));\n\n        // Search included content for the id given and blank out if not exists.\n        $matchingElem = $doc->getElementById($sectionId);\n        if ($matchingElem === null) {\n            return '';\n        }\n\n        // Otherwise replace the content with the found content\n        // Checks if the top-level wrapper should be included by matching on tag types\n        $innerContent = '';\n        $isTopLevel = in_array(strtolower($matchingElem->nodeName), $topLevelTags);\n        if ($isTopLevel) {\n            $innerContent .= $doc->saveHTML($matchingElem);\n        } else {\n            foreach ($matchingElem->childNodes as $childNode) {\n                $innerContent .= $doc->saveHTML($childNode);\n            }\n        }\n        libxml_clear_errors();\n\n        return $innerContent;\n    }\n\n    /**\n     * Escape script tags within HTML content.\n     */\n    protected function escapeScripts(string $html) : string\n    {\n        if (empty($html)) {\n            return $html;\n        }\n\n        libxml_use_internal_errors(true);\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n\n        // Remove standard script tags\n        $scriptElems = $xPath->query('//script');\n        foreach ($scriptElems as $scriptElem) {\n            $scriptElem->parentNode->removeChild($scriptElem);\n        }\n\n        // Remove clickable links to JavaScript URI\n        $badLinks = $xPath->query('//*[contains(@href, \\'javascript:\\')]');\n        foreach ($badLinks as $badLink) {\n            $badLink->parentNode->removeChild($badLink);\n        }\n\n        // Remove forms with calls to JavaScript URI\n        $badForms = $xPath->query('//*[contains(@action, \\'javascript:\\')] | //*[contains(@formaction, \\'javascript:\\')]');\n        foreach ($badForms as $badForm) {\n            $badForm->parentNode->removeChild($badForm);\n        }\n\n        // Remove meta tag to prevent external redirects\n        $metaTags = $xPath->query('//meta[contains(@content, \\'url\\')]');\n        foreach ($metaTags as $metaTag) {\n            $metaTag->parentNode->removeChild($metaTag);\n        }\n\n        // Remove data or JavaScript iFrames\n        $badIframes = $xPath->query('//*[contains(@src, \\'data:\\')] | //*[contains(@src, \\'javascript:\\')] | //*[@srcdoc]');\n        foreach ($badIframes as $badIframe) {\n            $badIframe->parentNode->removeChild($badIframe);\n        }\n\n        // Remove 'on*' attributes\n        $onAttributes = $xPath->query('//@*[starts-with(name(), \\'on\\')]');\n        foreach ($onAttributes as $attr) {\n            /** @var \\DOMAttr $attr*/\n            $attrName = $attr->nodeName;\n            $attr->parentNode->removeAttribute($attrName);\n        }\n\n        $html = '';\n        $topElems = $doc->documentElement->childNodes->item(0)->childNodes;\n        foreach ($topElems as $child) {\n            $html .= $doc->saveHTML($child);\n        }\n\n        return $html;\n    }\n}\n", "<?php namespace Tests\\Entity;\n\nuse BookStack\\Entities\\Managers\\PageContent;\nuse BookStack\\Entities\\Page;\nuse Tests\\TestCase;\n\nclass PageContentTest extends TestCase\n{\n\n    public function test_page_includes()\n    {\n        $page = Page::first();\n        $secondPage = Page::where('id', '!=', $page->id)->first();\n\n        $secondPage->html = \"<p id='section1'>Hello, This is a test</p><p id='section2'>This is a second block of content</p>\";\n        $secondPage->save();\n\n        $this->asEditor();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertDontSee('Hello, This is a test');\n\n        $originalHtml = $page->html;\n        $page->html .= \"{{@{$secondPage->id}}}\";\n        $page->save();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertSee('Hello, This is a test');\n        $pageContent->assertSee('This is a second block of content');\n\n        $page->html = $originalHtml . \" Well {{@{$secondPage->id}#section2}}\";\n        $page->save();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertDontSee('Hello, This is a test');\n        $pageContent->assertSee('Well This is a second block of content');\n    }\n\n    public function test_saving_page_with_includes()\n    {\n        $page = Page::first();\n        $secondPage = Page::where('id', '!=', $page->id)->first();\n\n        $this->asEditor();\n        $includeTag = '{{@' . $secondPage->id . '}}';\n        $page->html = '<p>' . $includeTag . '</p>';\n\n        $resp = $this->put($page->getUrl(), ['name' => $page->name, 'html' => $page->html, 'summary' => '']);\n\n        $resp->assertStatus(302);\n\n        $page = Page::find($page->id);\n        $this->assertStringContainsString($includeTag, $page->html);\n        $this->assertEquals('', $page->text);\n    }\n\n    public function test_page_includes_do_not_break_tables()\n    {\n        $page = Page::first();\n        $secondPage = Page::where('id', '!=', $page->id)->first();\n\n        $content = '<table id=\"table\"><tbody><tr><td>test</td></tr></tbody></table>';\n        $secondPage->html = $content;\n        $secondPage->save();\n\n        $page->html = \"{{@{$secondPage->id}#table}}\";\n        $page->save();\n\n        $this->asEditor();\n        $pageResp = $this->get($page->getUrl());\n        $pageResp->assertSee($content);\n    }\n\n    public function test_page_includes_rendered_on_book_export()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()\n            ->where('book_id', '!=', $page->book_id)\n            ->first();\n\n        $content = '<p id=\"bkmrk-meow\">my cat is awesome and scratchy</p>';\n        $secondPage->html = $content;\n        $secondPage->save();\n\n        $page->html = \"{{@{$secondPage->id}#bkmrk-meow}}\";\n        $page->save();\n\n        $this->asEditor();\n        $htmlContent = $this->get($page->book->getUrl('/export/html'));\n        $htmlContent->assertSee('my cat is awesome and scratchy');\n    }\n\n    public function test_page_content_scripts_removed_by_default()\n    {\n        $this->asEditor();\n        $page = Page::first();\n        $script = 'abc123<script>console.log(\"hello-test\")</script>abc123';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertDontSee($script);\n        $pageView->assertSee('abc123abc123');\n    }\n\n    public function test_more_complex_content_script_escaping_scenarios()\n    {\n        $checks = [\n            \"<p>Some script</p><script>alert('cat')</script>\",\n            \"<div><div><div><div><p>Some script</p><script>alert('cat')</script></div></div></div></div>\",\n            \"<p>Some script<script>alert('cat')</script></p>\",\n            \"<p>Some script <div><script>alert('cat')</script></div></p>\",\n            \"<p>Some script <script><div>alert('cat')</script></div></p>\",\n            \"<p>Some script <script><div>alert('cat')</script><script><div>alert('cat')</script></p><script><div>alert('cat')</script>\",\n        ];\n\n        $this->asEditor();\n        $page = Page::first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<script>');\n            $pageView->assertElementNotContains('.page-content', '</script>');\n        }\n\n    }\n\n    public function test_iframe_js_and_base64_urls_are_removed()\n    {\n        $checks = [\n            '<iframe src=\"javascript:alert(document.cookie)\"></iframe>',\n            '<iframe SRC=\" javascript: alert(document.cookie)\"></iframe>',\n            '<iframe src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<iframe src=\" data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<iframe srcdoc=\"<script>window.alert(document.cookie)</script>\"></iframe>'\n        ];\n\n        $this->asEditor();\n        $page = Page::first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<iframe>');\n            $pageView->assertElementNotContains('.page-content', '</iframe>');\n            $pageView->assertElementNotContains('.page-content', 'src=');\n            $pageView->assertElementNotContains('.page-content', 'javascript:');\n            $pageView->assertElementNotContains('.page-content', 'data:');\n            $pageView->assertElementNotContains('.page-content', 'base64');\n        }\n\n    }\n\n    public function test_javascript_uri_links_are_removed()\n    {\n        $checks = [\n            '<a id=\"xss\" href=\"javascript:alert(document.cookie)>Click me</a>',\n            '<a id=\"xss\" href=\"javascript: alert(document.cookie)>Click me</a>'\n        ];\n\n        $this->asEditor();\n        $page = Page::first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<a id=\"xss\">');\n            $pageView->assertElementNotContains('.page-content', 'href=javascript:');\n        }\n    }\n    public function test_form_actions_with_javascript_are_removed()\n    {\n        $checks = [\n            '<form><input id=\"xss\" type=submit formaction=javascript:alert(document.domain) value=Submit><input></form>',\n            '<form ><button id=\"xss\" formaction=javascript:alert(document.domain)>Click me</button></form>',\n            '<form id=\"xss\" action=javascript:alert(document.domain)><input type=submit value=Submit></form>'\n        ];\n\n        $this->asEditor();\n        $page = Page::first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<button id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', '<input id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', '<form id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', 'action=javascript:');\n            $pageView->assertElementNotContains('.page-content', 'formaction=javascript:');\n        }\n    }\n    \n    public function test_metadata_redirects_are_removed()\n    {\n        $checks = [\n            '<meta http-equiv=\"refresh\" content=\"0; url=//external_url\">',\n        ];\n\n        $this->asEditor();\n        $page = Page::first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<meta>');\n            $pageView->assertElementNotContains('.page-content', '</meta>');\n            $pageView->assertElementNotContains('.page-content', 'content=');\n            $pageView->assertElementNotContains('.page-content', 'external_url');\n        }\n    }\n    public function test_page_inline_on_attributes_removed_by_default()\n    {\n        $this->asEditor();\n        $page = Page::first();\n        $script = '<p onmouseenter=\"console.log(\\'test\\')\">Hello</p>';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertDontSee($script);\n        $pageView->assertSee('<p>Hello</p>');\n    }\n\n    public function test_more_complex_inline_on_attributes_escaping_scenarios()\n    {\n        $checks = [\n            '<p onclick=\"console.log(\\'test\\')\">Hello</p>',\n            '<div>Lorem ipsum dolor sit amet.</div><p onclick=\"console.log(\\'test\\')\">Hello</p>',\n            '<div>Lorem ipsum dolor sit amet.<p onclick=\"console.log(\\'test\\')\">Hello</p></div>',\n            '<div><div><div><div>Lorem ipsum dolor sit amet.<p onclick=\"console.log(\\'test\\')\">Hello</p></div></div></div></div>',\n            '<div onclick=\"console.log(\\'test\\')\">Lorem ipsum dolor sit amet.</div><p onclick=\"console.log(\\'test\\')\">Hello</p><div></div>',\n            '<a a=\"<img src=1 onerror=\\'alert(1)\\'> ',\n        ];\n\n        $this->asEditor();\n        $page = Page::first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', 'onclick');\n        }\n\n    }\n\n    public function test_page_content_scripts_show_when_configured()\n    {\n        $this->asEditor();\n        $page = Page::first();\n        config()->push('app.allow_content_scripts', 'true');\n\n        $script = 'abc123<script>console.log(\"hello-test\")</script>abc123';\n        $page->html = \"no escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertSee($script);\n        $pageView->assertDontSee('abc123abc123');\n    }\n\n    public function test_page_inline_on_attributes_show_if_configured()\n    {\n        $this->asEditor();\n        $page = Page::first();\n        config()->push('app.allow_content_scripts', 'true');\n\n        $script = '<p onmouseenter=\"console.log(\\'test\\')\">Hello</p>';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertSee($script);\n        $pageView->assertDontSee('<p>Hello</p>');\n    }\n\n    public function test_duplicate_ids_does_not_break_page_render()\n    {\n        $this->asEditor();\n        $pageA = Page::first();\n        $pageB = Page::query()->where('id', '!=', $pageA->id)->first();\n\n        $content = '<ul id=\"bkmrk-xxx-%28\"></ul> <ul id=\"bkmrk-xxx-%28\"></ul>';\n        $pageA->html = $content;\n        $pageA->save();\n\n        $pageB->html = '<ul id=\"bkmrk-xxx-%28\"></ul> <p>{{@'. $pageA->id .'#test}}</p>';\n        $pageB->save();\n\n        $pageView = $this->get($pageB->getUrl());\n        $pageView->assertSuccessful();\n    }\n\n    public function test_duplicate_ids_fixed_on_page_save()\n    {\n        $this->asEditor();\n        $page = Page::first();\n\n        $content = '<ul id=\"bkmrk-test\"><li>test a</li><li><ul id=\"bkmrk-test\"><li>test b</li></ul></li></ul>';\n        $pageSave = $this->put($page->getUrl(), [\n            'name' => $page->name,\n            'html' => $content,\n            'summary' => ''\n        ]);\n        $pageSave->assertRedirect();\n\n        $updatedPage = Page::where('id', '=', $page->id)->first();\n        $this->assertEquals(substr_count($updatedPage->html, \"bkmrk-test\\\"\"), 1);\n    }\n\n    public function test_anchors_referencing_non_bkmrk_ids_rewritten_after_save()\n    {\n        $this->asEditor();\n        $page = Page::first();\n\n        $content = '<h1 id=\"non-standard-id\">test</h1><p><a href=\"#non-standard-id\">link</a></p>';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,\n            'html' => $content,\n            'summary' => ''\n        ]);\n\n        $updatedPage = Page::where('id', '=', $page->id)->first();\n        $this->assertStringContainsString('id=\"bkmrk-test\"', $updatedPage->html);\n        $this->assertStringContainsString('href=\"#bkmrk-test\"', $updatedPage->html);\n    }\n\n    public function test_get_page_nav_sets_correct_properties()\n    {\n        $content = '<h1 id=\"testa\">Hello</h1><h2 id=\"testb\">There</h2><h3 id=\"testc\">Donkey</h3>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(3, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h1',\n            'link' => '#testa',\n            'text' => 'Hello',\n            'level' => 1,\n        ], $navMap[0]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h2',\n            'link' => '#testb',\n            'text' => 'There',\n            'level' => 2,\n        ], $navMap[1]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h3',\n            'link' => '#testc',\n            'text' => 'Donkey',\n            'level' => 3,\n        ], $navMap[2]);\n    }\n\n    public function test_get_page_nav_does_not_show_empty_titles()\n    {\n        $content = '<h1 id=\"testa\">Hello</h1><h2 id=\"testb\">&nbsp;</h2><h3 id=\"testc\"></h3>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(1, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h1',\n            'link' => '#testa',\n            'text' => 'Hello'\n        ], $navMap[0]);\n    }\n\n    public function test_get_page_nav_shifts_headers_if_only_smaller_ones_are_used()\n    {\n        $content = '<h4 id=\"testa\">Hello</h4><h5 id=\"testb\">There</h5><h6 id=\"testc\">Donkey</h6>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(3, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h4',\n            'level' => 1,\n        ], $navMap[0]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h5',\n            'level' => 2,\n        ], $navMap[1]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h6',\n            'level' => 3,\n        ], $navMap[2]);\n    }\n\n    public function test_page_text_decodes_html_entities()\n    {\n        $page = Page::query()->first();\n\n        $this->actingAs($this->getAdmin())\n            ->put($page->getUrl(''), [\n                'name' => 'Testing',\n                'html' => '<p>&quot;Hello &amp; welcome&quot;</p>',\n            ]);\n\n        $page->refresh();\n        $this->assertEquals('\"Hello & welcome\"', $page->text);\n    }\n}\n"], "filenames": ["app/Entities/Managers/PageContent.php", "tests/Entity/PageContentTest.php"], "buggy_code_start_loc": [298, 161], "buggy_code_end_loc": [298, 161], "fixing_code_start_loc": [299, 162], "fixing_code_end_loc": [317, 228], "type": "CWE-79", "message": "In BookStack before version 0.30.4, a user with permissions to edit a page could insert JavaScript code through the use of `javascript:` URIs within a link or form which would run, within the context of the current page, when clicked or submitted. Additionally, a user with permissions to edit a page could insert a particular meta tag which could be used to silently redirect users to a alternative location upon visit of a page. Dangerous content may remain in the database but will be removed before being displayed on a page. If you think this could have been exploited the linked advisory provides a SQL query to test. As a workaround without upgrading, page edit permissions could be limited to only those that are trusted until you can upgrade although this will not address existing exploitation of this vulnerability. The issue is fixed in BookStack version 0.30.4.", "other": {"cve": {"id": "CVE-2020-26211", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-03T21:15:12.547", "lastModified": "2020-11-16T16:07:57.467", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In BookStack before version 0.30.4, a user with permissions to edit a page could insert JavaScript code through the use of `javascript:` URIs within a link or form which would run, within the context of the current page, when clicked or submitted. Additionally, a user with permissions to edit a page could insert a particular meta tag which could be used to silently redirect users to a alternative location upon visit of a page. Dangerous content may remain in the database but will be removed before being displayed on a page. If you think this could have been exploited the linked advisory provides a SQL query to test. As a workaround without upgrading, page edit permissions could be limited to only those that are trusted until you can upgrade although this will not address existing exploitation of this vulnerability. The issue is fixed in BookStack version 0.30.4."}, {"lang": "es", "value": "En BookStack anterior de la versi\u00f3n 0.30.4, un usuario con permisos para editar una p\u00e1gina pod\u00eda insertar c\u00f3digo JavaScript mediante el uso de los URI \"javascript:\" dentro de un enlace o formulario que se ejecutar\u00eda, dentro del contexto de la p\u00e1gina actual, al cliquearse o enviarse .&#xa0;Adem\u00e1s, un usuario con permisos para editar una p\u00e1gina podr\u00eda insertar una etiqueta meta particular que podr\u00eda ser usada para redireccionar silenciosamente a los usuarios hacia una ubicaci\u00f3n alternativa tras visitar una p\u00e1gina.&#xa0;El contenido peligroso puede permanecer en la base de datos, pero ser\u00e1 removido antes de ser mostrado en una p\u00e1gina.&#xa0;Si cree que esto podr\u00eda haber sido explotado, el aviso vinculado proporciona una consulta SQL para probar.&#xa0;Como soluci\u00f3n alternativa sin actualizar, los permisos de edici\u00f3n de p\u00e1gina podr\u00edan ser limitados solo a aquellos en los que se conf\u00eda hasta que pueda actualizar, aunque esto no solucionar\u00e1 la explotaci\u00f3n existente de esta vulnerabilidad"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bookstackapp:bookstack:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.30.4", "matchCriteriaId": "D6DF38A5-A44D-4308-933A-A1288591B880"}]}]}], "references": [{"url": "https://github.com/BookStackApp/BookStack/commit/bbd1384acbe7e52c21f89af69f2dc391c95dbf54", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/BookStackApp/BookStack/releases/tag/v0.30.4", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/BookStackApp/BookStack/security/advisories/GHSA-r2cf-8778-3jgp", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.bookstackapp.com/blog/beta-release-v0-30-4/", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/BookStackApp/BookStack/commit/bbd1384acbe7e52c21f89af69f2dc391c95dbf54"}}