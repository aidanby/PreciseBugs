{"buggy_code": ["<?php\n\nclass SpotPage_login extends SpotPage_Abs\n{\n    private $_loginForm;\n    private $_params;\n\n    public function __construct(Dao_Factory $daoFactory, Services_Settings_Container $settings, array $currentSession, array $params)\n    {\n        parent::__construct($daoFactory, $settings, $currentSession);\n\n        $this->_loginForm = $params['loginform'];\n        $this->_params = $params;\n    }\n\n    // ctor\n\n    public function render()\n    {\n        $result = new Dto_FormResult('notsubmitted');\n\n        // Check permissions\n        $this->_spotSec->fatalPermCheck(SpotSecurity::spotsec_perform_login, '');\n\n        /*\n         * Create a default SpotUser so the form is always able to render\n         * the values of the form\n         */\n        $credentials = ['username' => '',\n            'password'             => '', ];\n\n        // Instantiate the Spot user system\n        $svcUserAuth = new ServiceS_User_Authentication($this->_daoFactory, $this->_settings);\n\n        // set the page title\n        $this->_pageTitle = 'spot: login';\n\n        // bring the form action into the local scope\n        $formAction = $this->_loginForm['action'];\n\n        // Are we already submitting the form login?\n        if (!empty($formAction)) {\n            // make sure we can simply assume all fields are there\n            $credentials = array_merge($credentials, $this->_loginForm);\n\n            $tryLogin = $svcUserAuth->authenticate($credentials['username'], $credentials['password']);\n            if (!$tryLogin) {\n                /* Create an audit event */\n                if ($this->_settings->get('auditlevel') != SpotSecurity::spot_secaudit_none) {\n                    $spotAudit = new SpotAudit($this->_daoFactory, $this->_settings, $this->_currentSession['user'], $this->_currentSession['session']['ipaddr']);\n                    $spotAudit->audit(SpotSecurity::spotsec_perform_login, 'incorrect user or pass', false);\n                } // if\n\n                $result->addError(_('Login Failed'));\n            } else {\n                $result->setResult('success');\n                $this->_currentSession = $tryLogin;\n            } // else\n        } else {\n            // When the user is already logged in, show this as a warning\n            if ($this->_currentSession['user']['userid'] != $this->_settings->get('nonauthenticated_userid')) {\n                $result->addError(_('You are already logged in'));\n            } // if\n        } // else\n\n        //- display stuff -#\n        $this->template('login', ['loginform' => $credentials,\n            'result'                          => $result,\n            'http_referer'                    => $this->_loginForm['http_referer'],\n            'data'                            => $this->_params['data'], ]);\n    }\n\n    // render\n} // class SpotPage_login\n"], "fixing_code": ["<?php\n\nclass SpotPage_login extends SpotPage_Abs\n{\n    private $_loginForm;\n    private $_params;\n\n    public function __construct(Dao_Factory $daoFactory, Services_Settings_Container $settings, array $currentSession, array $params)\n    {\n        parent::__construct($daoFactory, $settings, $currentSession);\n\n        $this->_loginForm = $params['loginform'];\n        $this->_params = $params;\n    }\n\n    // ctor\n\n    public function render()\n    {\n        $result = new Dto_FormResult('notsubmitted');\n\n        // Check permissions\n        $this->_spotSec->fatalPermCheck(SpotSecurity::spotsec_perform_login, '');\n\n        /*\n         * Create a default SpotUser so the form is always able to render\n         * the values of the form\n         */\n        $credentials = ['username' => '',\n            'password'             => '', ];\n\n        // Instantiate the Spot user system\n        $svcUserAuth = new ServiceS_User_Authentication($this->_daoFactory, $this->_settings);\n\n        // set the page title\n        $this->_pageTitle = 'spot: login';\n\n        // bring the form action into the local scope\n        $formAction = $this->_loginForm['action'];\n        \n        // Check redirect for chevrons, deny if found.\n        if (preg_match('/[<>]/i', $this->_params['data']['performredirect'])) {\t\t\t\n\t\t$result->addError(_('Script is not allowed'));\n\t\t}\n        \n        // Are we already submitting the form login?\n        if (!empty($formAction)) {\n            // make sure we can simply assume all fields are there\n            $credentials = array_merge($credentials, $this->_loginForm);\n\n            $tryLogin = $svcUserAuth->authenticate($credentials['username'], $credentials['password']);\n            if (!$tryLogin) {\n                /* Create an audit event */\n                if ($this->_settings->get('auditlevel') != SpotSecurity::spot_secaudit_none) {\n                    $spotAudit = new SpotAudit($this->_daoFactory, $this->_settings, $this->_currentSession['user'], $this->_currentSession['session']['ipaddr']);\n                    $spotAudit->audit(SpotSecurity::spotsec_perform_login, 'incorrect user or pass', false);\n                } // if\n\n                $result->addError(_('Login Failed'));\n            } else {\n                $result->setResult('success');\n                $this->_currentSession = $tryLogin;\n            } // else\n        } else {\n            // When the user is already logged in, show this as a warning\n            if ($this->_currentSession['user']['userid'] != $this->_settings->get('nonauthenticated_userid')) {\n                $result->addError(_('You are already logged in'));\n            } // if\n        } // else\n\n        //- display stuff -#\n        $this->template('login', ['loginform' => $credentials,\n            'result'                          => $result,\n            'http_referer'                    => $this->_loginForm['http_referer'],\n            'data'                            => $this->_params['data'], ]);\n    }\n\n    // render\n} // class SpotPage_login\n"], "filenames": ["lib/page/SpotPage_login.php"], "buggy_code_start_loc": [40], "buggy_code_end_loc": [41], "fixing_code_start_loc": [40], "fixing_code_end_loc": [46], "type": "CWE-79", "message": "There is a Cross Site Scripting (XSS) vulnerability in SpotPage_login.php of Spotweb 1.5.1 and below, which allows remote attackers to inject arbitrary web script or HTML via the data[performredirect] parameter.", "other": {"cve": {"id": "CVE-2021-43725", "sourceIdentifier": "cve@mitre.org", "published": "2022-03-28T13:15:07.693", "lastModified": "2022-03-31T16:36:55.537", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "There is a Cross Site Scripting (XSS) vulnerability in SpotPage_login.php of Spotweb 1.5.1 and below, which allows remote attackers to inject arbitrary web script or HTML via the data[performredirect] parameter."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de tipo Cross Site Scripting (XSS) en el archivo SpotPage_login.php de Spotweb versiones 1.5.1 y posteriores, que permite a atacantes remotos inyectar script web o HTML arbitrario por medio del par\u00e1metro data[performredirect]"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:spotweb_project:spotweb:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.5.1", "matchCriteriaId": "ADCE8DCB-8A23-4529-9FC9-79194FF7A21A"}]}]}], "references": [{"url": "https://github.com/spotweb/spotweb/commit/2bfa001689aae96009688a193c64478647ba45a1", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/spotweb/spotweb/issues/718", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/spotweb/spotweb/commit/2bfa001689aae96009688a193c64478647ba45a1"}}