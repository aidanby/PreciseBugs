{"buggy_code": ["<?php\n\nuse MicroweberPackages\\Backup\\Exporters\\JsonExport;\n\napi_expose('user_social_login');\n\napi_expose('logout');\n\napi_expose('user_register');\n\napi_expose('social_login_process');\n\napi_expose('user_reset_password_from_link');\n\n\napi_expose_admin('user_make_logged');\n\napi_expose('user_login');\n\napi_expose('is_logged');\n\napi_expose('user_send_forgot_password');\n\n\napi_expose_admin('users/register_email_send_test', function () {\n\n    try {\n        mw()->option_manager->override('users', 'register_email_enabled', true);\n        $send =  mw()->user_manager->register_email_send();\n        if ($send) {\n            $user = Auth::user();\n\n            return 'Email is send successfully to <b>'.$user->email.'</b>.';\n        }\n    } catch (Exception $e) {\n        echo \"Error Message: <br />\" . $e->getMessage();\n    }\n\n});\n\napi_expose('users/register_email_send', function ($params = false) {\n    $uid = null;\n    if (isset($params['user_id']) and is_admin()) {\n        $uid = intval($params['user_id']);\n    }\n    return mw()->user_manager->register_email_send($uid);\n});\n\napi_expose_admin('users/forgot_password_email_send_test', function () {\n\n     try {\n         $user = Auth::user();\n         mw()->option_manager->override('users', 'forgot_pass_email_enabled', true);\n         $send = mw()->user_manager->send_forgot_password([\n             'email'=>$user->email\n         ]);\n         if ($send) {\n             return 'Email is send successfully to <b>'.$user->email.'</b>.';\n         }\n    } catch (Exception $e) {\n        echo \"Error Message: <br />\" . $e->getMessage();\n    }\n\n});\n\napi_expose('users/search_authors', function ($params = false) {\n\n    $return = array();\n\n    $kw = false;\n    if (isset($params['kw'])) {\n        $kw = $params['kw'];\n    }\n\n\n    $all_users_search = array();\n    $all_users_search['limit'] = 100;\n    $all_users_search['fields'] = 'id,username,first_name,last_name,email,is_admin';\n    if ($kw) {\n        $all_users_search['keyword'] = $kw;\n        $all_users_search['search_in_fields'] = 'id,username,first_name,last_name,email';\n    }\n\n    $all_users = get_users($all_users_search);\n    if ($all_users) {\n        foreach ($all_users as $user) {\n            if (isset($user['id'])) {\n                $user['display_name'] = user_name($user['id']);\n                $user['picture'] = user_picture($user['id']);\n                $return[] = $user;\n            }\n        }\n    }\n    return $return;\n});\n\n\napi_expose('users/verify_email_link', function ($params) {\n    if (isset($params['key'])) {\n\n        try {\n            $decoded = mw()->format->decrypt($params['key']);\n            if ($decoded) {\n                $decoded = intval($decoded);\n                $adminUser = \\User::findOrFail($decoded);\n                $adminUser->is_verified = 1;\n                $adminUser->save();\n                mw()->cache_manager->delete('users');\n                mw()->cache_manager->delete('users/' . $decoded);\n                $params['user_id'] = $decoded;\n                mw()->event_manager->trigger('mw.user.verify_email_link', $params);\n\n                return mw()->url_manager->redirect(site_url());\n            }\n\n        } catch (Exception $e) {\n            echo 'Exception: ', $e->getMessage(), \"\\n\";\n        }\n    }\n\n});\n\n"], "fixing_code": ["<?php\n\nuse MicroweberPackages\\Backup\\Exporters\\JsonExport;\n\napi_expose('user_social_login');\n\napi_expose('logout');\n\napi_expose('user_register');\n\napi_expose('social_login_process');\n\napi_expose('user_reset_password_from_link');\n\n\napi_expose_admin('user_make_logged');\n\napi_expose('user_login');\n\napi_expose('is_logged');\n\napi_expose('user_send_forgot_password');\n\n\napi_expose_admin('users/register_email_send_test', function () {\n\n    try {\n        mw()->option_manager->override('users', 'register_email_enabled', true);\n        $send =  mw()->user_manager->register_email_send();\n        if ($send) {\n            $user = Auth::user();\n\n            return 'Email is send successfully to <b>'.$user->email.'</b>.';\n        }\n    } catch (Exception $e) {\n        echo \"Error Message: <br />\" . $e->getMessage();\n    }\n\n});\n\napi_expose('users/register_email_send', function ($params = false) {\n    $uid = null;\n    if (isset($params['user_id']) and is_admin()) {\n        $uid = intval($params['user_id']);\n    }\n    return mw()->user_manager->register_email_send($uid);\n});\n\napi_expose_admin('users/forgot_password_email_send_test', function () {\n\n     try {\n         $user = Auth::user();\n         mw()->option_manager->override('users', 'forgot_pass_email_enabled', true);\n         $send = mw()->user_manager->send_forgot_password([\n             'email'=>$user->email\n         ]);\n         if ($send) {\n             return 'Email is send successfully to <b>'.$user->email.'</b>.';\n         }\n    } catch (Exception $e) {\n        echo \"Error Message: <br />\" . $e->getMessage();\n    }\n\n});\n\napi_expose_admin('users/search_authors', function ($params = false) {\n\n    $return = array(); \n\n    $kw = false;\n    if (isset($params['kw'])) {\n        $kw = $params['kw'];\n    }\n\n\n    $all_users_search = array();\n    $all_users_search['limit'] = 100;\n    $all_users_search['fields'] = 'id,username,first_name,last_name,email,is_admin';\n    if ($kw) {\n        $all_users_search['keyword'] = $kw;\n        $all_users_search['search_in_fields'] = 'id,username,first_name,last_name,email';\n    }\n\n    $all_users = get_users($all_users_search);\n    if ($all_users) {\n        foreach ($all_users as $user) {\n            if (isset($user['id'])) {\n                $user['display_name'] = user_name($user['id']);\n                $user['picture'] = user_picture($user['id']);\n                $return[] = $user;\n            }\n        }\n    }\n    return $return;\n});\n\n\napi_expose('users/verify_email_link', function ($params) {\n    if (isset($params['key'])) {\n\n        try {\n            $decoded = mw()->format->decrypt($params['key']);\n            if ($decoded) {\n                $decoded = intval($decoded);\n                $adminUser = \\User::findOrFail($decoded);\n                $adminUser->is_verified = 1;\n                $adminUser->save();\n                mw()->cache_manager->delete('users');\n                mw()->cache_manager->delete('users/' . $decoded);\n                $params['user_id'] = $decoded;\n                mw()->event_manager->trigger('mw.user.verify_email_link', $params);\n\n                return mw()->url_manager->redirect(site_url());\n            }\n\n        } catch (Exception $e) {\n            echo 'Exception: ', $e->getMessage(), \"\\n\";\n        }\n    }\n\n});\n\n"], "filenames": ["src/MicroweberPackages/User/helpers/api_user.php"], "buggy_code_start_loc": [66], "buggy_code_end_loc": [69], "fixing_code_start_loc": [66], "fixing_code_end_loc": [69], "type": "CWE-269", "message": "Improper Access Control in Packagist microweber/microweber prior to 1.2.11.", "other": {"cve": {"id": "CVE-2022-0277", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-20T10:15:09.923", "lastModified": "2022-01-26T16:53:05.743", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Access Control in Packagist microweber/microweber prior to 1.2.11."}, {"lang": "es", "value": "Un Control de Acceso Inapropiado en Packagist microweber/microweber versiones anteriores a 1.2.11"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.10", "matchCriteriaId": "3CB1BA10-C609-4709-A91C-72D12499CF96"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/e680e134a4215c979bfd2eaf58336be34c8fc6e6", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0e776f3d-35b1-4a9e-8fe8-91e46c0d6316", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/e680e134a4215c979bfd2eaf58336be34c8fc6e6"}}