{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\DataObject;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Db;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data\\LayoutDefinitionEnrichmentInterface;\nuse Pimcore\\Model\\DataObject\\Classificationstore;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/classificationstore\")\n *\n * @internal\n */\nclass ClassificationstoreController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * Delete collection with the group-relations\n     *\n     * @Route(\"/delete-collection\", name=\"pimcore_admin_dataobject_classificationstore_deletecollection\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCollectionAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $configRelations = new Classificationstore\\CollectionGroupRelation\\Listing();\n        $configRelations->setCondition('colId = ?', $id);\n        $list = $configRelations->load();\n        foreach ($list as $item) {\n            $item->delete();\n        }\n\n        $config = Classificationstore\\CollectionConfig::getById($id);\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-collection-relation\", name=\"pimcore_admin_dataobject_classificationstore_deletecollectionrelation\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCollectionRelationAction(Request $request)\n    {\n        $colId = $request->get('colId');\n        $groupId = $request->get('groupId');\n\n        $config = new Classificationstore\\CollectionGroupRelation();\n        $config->setColId($colId);\n        $config->setGroupId($groupId);\n\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-relation\", name=\"pimcore_admin_dataobject_classificationstore_deleterelation\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteRelationAction(Request $request)\n    {\n        $keyId = $request->get('keyId');\n        $groupId = $request->get('groupId');\n\n        $config = new Classificationstore\\KeyGroupRelation();\n        $config->setKeyId($keyId);\n        $config->setGroupId($groupId);\n\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-group\", name=\"pimcore_admin_dataobject_classificationstore_deletegroup\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteGroupAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $config = Classificationstore\\GroupConfig::getById($id);\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/create-group\", name=\"pimcore_admin_dataobject_classificationstore_creategroup\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createGroupAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n        $config = Classificationstore\\GroupConfig::getByName($name, $storeId);\n\n        if (!$config) {\n            $config = new Classificationstore\\GroupConfig();\n            $config->setStoreId($storeId);\n            $config->setName($name);\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n        } else {\n            return $this->adminJson(['success' => false, 'id' => $config->getName(), 'message' => 'classificationstore_error_group_exists_msg']);\n        }\n    }\n\n    /**\n     * @Route(\"/create-store\", name=\"pimcore_admin_dataobject_classificationstore_createstore\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function createStoreAction(Request $request)\n    {\n        $name = $request->get('name');\n\n        $config = Classificationstore\\StoreConfig::getByName($name);\n\n        if (!$config) {\n            $config = new Classificationstore\\StoreConfig();\n            $config->setName($name);\n            $config->save();\n        } else {\n            throw new \\Exception('Store with the given name exists');\n        }\n\n        return $this->adminJson(['success' => true, 'storeId' => $config->getId()]);\n    }\n\n    /**\n     * @Route(\"/create-collection\", name=\"pimcore_admin_dataobject_classificationstore_createcollection\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCollectionAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n        $config = Classificationstore\\CollectionConfig::getByName($name, $storeId);\n\n        if (!$config) {\n            $config = new Classificationstore\\CollectionConfig();\n            $config->setName($name);\n            $config->setStoreId($storeId);\n            $config->save();\n        }\n\n        return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n    }\n\n    /**\n     * @Route(\"/collections\", name=\"pimcore_admin_dataobject_classificationstore_collectionsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionsActionGet(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $start = 0;\n        $limit = $request->get('limit') ? $request->get('limit') : 15;\n\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        $storeIdFromDefinition = 0;\n        $allowedCollectionIds = [];\n        if ($request->get('oid')) {\n            $object = DataObject\\Concrete::getById($request->get('oid'));\n            $class = $object->getClass();\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n            $fd = $class->getFieldDefinition($request->get('fieldname'));\n            $allowedGroupIds = $fd->getAllowedGroupIds();\n\n            if ($allowedGroupIds) {\n                $db = \\Pimcore\\Db::get();\n                $query = 'select * from classificationstore_collectionrelations where groupId in (' . implode(',', $allowedGroupIds) .')';\n                $relationList = $db->fetchAll($query);\n\n                if (is_array($relationList)) {\n                    foreach ($relationList as $item) {\n                        $allowedCollectionIds[] = $item['colId'];\n                    }\n                }\n            }\n\n            $storeIdFromDefinition = $fd->getStoreId();\n        }\n\n        $list = new Classificationstore\\CollectionConfig\\Listing();\n\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n        $db = Db::get();\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        $storeId = $request->get('storeId');\n        $storeId = $storeId ? $storeId : $storeIdFromDefinition;\n\n        $conditionParts[] = ' (storeId = ' . $db->quote($storeId) . ')';\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if ($allowedCollectionIds) {\n            $conditionParts[] = ' id in (' . implode(',', $allowedCollectionIds) . ')';\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n\n        $list->setCondition($condition);\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $name = $config->getName();\n            if (!$name) {\n                $name = 'EMPTY';\n            }\n            $item = [\n                'storeId' => $config->getStoreId(),\n                'id' => $config->getId(),\n                'name' => $name,\n                'description' => $config->getDescription(),\n            ];\n            if ($config->getCreationDate()) {\n                $item['creationDate'] = $config->getCreationDate();\n            }\n\n            if ($config->getModificationDate()) {\n                $item['modificationDate'] = $config->getModificationDate();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/collections\", name=\"pimcore_admin_dataobject_classificationstore_collections\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\CollectionConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    $config->$setter($value);\n                }\n            }\n\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'data' => $config]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/groups\", name=\"pimcore_admin_dataobject_classificationstore_groupsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function groupsActionGet(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        if ($request->get('sort')) {\n            $orderKey = $request->get('sort');\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        $list = new Classificationstore\\GroupConfig\\Listing();\n\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n        $db = Db::get();\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        if ($request->get('storeId')) {\n            $conditionParts[] = '(storeId = ' . $db->quote($request->get('storeId')) . ')';\n        }\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if ($request->get('oid')) {\n            $object = DataObject\\Concrete::getById($request->get('oid'));\n            $class = $object->getClass();\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n            $fd = $class->getFieldDefinition($request->get('fieldname'));\n            $allowedGroupIds = $fd->getAllowedGroupIds();\n\n            if ($allowedGroupIds) {\n                $conditionParts[] = 'ID in (' . implode(',', $allowedGroupIds) . ')';\n            }\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $name = $config->getName();\n            if (!$name) {\n                $name = 'EMPTY';\n            }\n            $item = [\n                'storeId' => $config->getStoreId(),\n                'id' => $config->getId(),\n                'name' => $name,\n                'description' => $config->getDescription(),\n            ];\n            if ($config->getCreationDate()) {\n                $item['creationDate'] = $config->getCreationDate();\n            }\n\n            if ($config->getModificationDate()) {\n                $item['modificationDate'] = $config->getModificationDate();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/groups\", name=\"pimcore_admin_dataobject_classificationstore_groupsaction\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function groupsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\GroupConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    $config->$setter($value);\n                }\n            }\n\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'data' => $config]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/collection-relations\", name=\"pimcore_admin_dataobject_classificationstore_collectionrelationsget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionRelationsGetAction(Request $request)\n    {\n        $mapping = ['groupName' => 'name', 'groupDescription' => 'description'];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'sorter';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\CollectionGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n        $condition = '';\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n\n            $count = 0;\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                if ($count > 0) {\n                    $condition .= ' AND ';\n                }\n                $count++;\n                $fieldname = $mapping[$f->field];\n                $condition .= $db->quoteIdentifier($fieldname) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        $colId = $request->get('colId');\n        if ($condition) {\n            $condition = '( ' . $condition . ' ) AND';\n        }\n        $condition .= ' colId = ' . $list->quote($colId);\n\n        $list->setCondition($condition);\n\n        $listItems = $list->load();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($listItems as $config) {\n            $item = [\n                'colId' => $config->getColId(),\n                'groupId' => $config->getGroupId(),\n                'groupName' => $config->getName(),\n                'groupDescription' => $config->getDescription(),\n                'id' => $config->getColId() . '-' . $config->getGroupId(),\n                'sorter' => (int) $config->getSorter(),\n            ];\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/collection-relations\", name=\"pimcore_admin_dataobject_classificationstore_collectionrelations\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionRelationsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            if (count($data) == count($data, 1)) {\n                $data = [$data];\n            }\n\n            foreach ($data as &$row) {\n                $colId = $row['colId'];\n                $groupId = $row['groupId'];\n                $sorter = $row['sorter'];\n\n                $config = new Classificationstore\\CollectionGroupRelation();\n                $config->setGroupId($groupId);\n                $config->setColId($colId);\n                $config->setSorter((int) $sorter);\n\n                $config->save();\n\n                $row['id'] = $config->getColId() . '-' . $config->getGroupId();\n            }\n\n            return $this->adminJson(['success' => true, 'data' => $data]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/list-stores\", name=\"pimcore_admin_dataobject_classificationstore_liststores\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function listStoresAction()\n    {\n        $storeConfigs = [];\n        $storeConfigListing = new Classificationstore\\StoreConfig\\Listing();\n        $storeConfigListing->load();\n\n        foreach ($storeConfigListing as $storeConfig) {\n            $storeConfigs[] = $storeConfig->getObjectVars();\n        }\n\n        return $this->adminJson($storeConfigs);\n    }\n\n    /**\n     * @Route(\"/search-relations\", name=\"pimcore_admin_dataobject_classificationstore_searchrelations\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchRelationsAction(Request $request)\n    {\n        $db = Db::get();\n\n        $storeId = $request->get('storeId');\n\n        $mapping = [\n            'groupName' => DataObject\\Classificationstore\\GroupConfig\\Dao::TABLE_NAME_GROUPS .'.name',\n            'keyName' => DataObject\\Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS .'.name',\n            'keyDescription' => DataObject\\Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS. '.description',\n        ];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            if ($orderKey == 'keyName') {\n                $orderKey = 'name';\n            }\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $fieldname = $mapping[$f->property];\n                $conditionParts[] = $fieldname . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        $conditionParts[] = '  groupId IN (select id from classificationstore_groups where storeId = ' . $db->quote($storeId) . ')';\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '('\n                . Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS . '.name LIKE ' . $db->quote('%' . $searchfilter . '%')\n                . ' OR ' . Classificationstore\\GroupConfig\\Dao::TABLE_NAME_GROUPS . '.name LIKE ' . $db->quote('%' . $searchfilter . '%')\n                . ' OR ' . Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS . '.description LIKE ' . $db->quote('%' . $searchfilter . '%') . ')';\n        }\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n        $list->setResolveGroupName(1);\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($list->getList() as $config) {\n            $item = [\n                'keyId' => $config->getKeyId(),\n                'groupId' => $config->getGroupId(),\n                'keyName' => $config->getName(),\n                'keyDescription' => $config->getDescription(),\n                'id' => $config->getGroupId() . '-' . $config->getKeyId(),\n                'sorter' => $config->getSorter(),\n            ];\n\n            $groupConfig = Classificationstore\\GroupConfig::getById($config->getGroupId());\n            if ($groupConfig) {\n                $item['groupName'] = $groupConfig->getName();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/relations\", name=\"pimcore_admin_dataobject_classificationstore_relationsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function relationsActionGet(Request $request)\n    {\n        $mapping = ['keyName' => 'name', 'keyDescription' => 'description'];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n        $relationIds = $request->get('relationIds');\n\n        if ($relationIds) {\n            $relationIds = json_decode($relationIds, true);\n        }\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        } elseif (is_array($relationIds)) {\n            $limit = count($relationIds);\n        }\n\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n        $conditionParts = [];\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $fieldname = $mapping[$f->field];\n                $conditionParts[] = $db->quoteIdentifier($fieldname) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if (!$request->get('relationIds')) {\n            $groupId = $request->get('groupId');\n            $conditionParts[] = ' groupId = ' . $list->quote($groupId);\n        }\n\n        if ($relationIds) {\n            $relationParts = [];\n\n            foreach ($relationIds as $relationId) {\n                $keyId = $relationId['keyId'];\n                $groupId = $relationId['groupId'];\n                $relationParts[] = '(keyId = ' . $list->quote($keyId) . ' AND groupId = ' . $list->quote($groupId) . ')';\n            }\n\n            $conditionParts[] = '(' . implode(' OR ', $relationParts) . ')';\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n\n        $list->setCondition($condition);\n\n        $listItems = $list->load();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($listItems as $config) {\n            $type = $config->getType();\n            $definition = json_decode($config->getDefinition());\n            $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n            DataObject\\Service::enrichLayoutDefinition($definition);\n\n            $item = [\n                'keyId' => $config->getKeyId(),\n                'groupId' => $config->getGroupId(),\n                'keyName' => $config->getName(),\n                'keyDescription' => $config->getDescription(),\n                'id' => $config->getGroupId() . '-' . $config->getKeyId(),\n                'sorter' => (int) $config->getSorter(),\n                'layout' => $definition,\n                'mandatory' => $config->isMandatory(),\n            ];\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/relations\", name=\"pimcore_admin_dataobject_classificationstore_relations\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function relationsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $keyId = $data['keyId'];\n            $groupId = $data['groupId'];\n            $sorter = $data['sorter'];\n            $mandatory = $data['mandatory'];\n\n            $config = new Classificationstore\\KeyGroupRelation();\n            $config->setGroupId($groupId);\n            $config->setKeyId($keyId);\n            $config->setSorter($sorter);\n            $config->setMandatory($mandatory);\n\n            $config->save();\n            $data['id'] = $config->getGroupId() . '-' . $config->getKeyId();\n\n            return $this->adminJson(['success' => true, 'data' => $data]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/add-collections\", name=\"pimcore_admin_dataobject_classificationstore_addcollections\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addCollectionsAction(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $ids = $this->decodeJson($request->get('collectionIds'));\n        $oid = $request->get('oid');\n        $object = DataObject\\Concrete::getById($oid);\n        $fieldname = $request->get('fieldname');\n        $data = [];\n\n        if ($ids) {\n            $db = \\Pimcore\\Db::get();\n            $mappedData = [];\n            $groupsData = $db->fetchAll('select * from classificationstore_groups g, classificationstore_collectionrelations c where colId IN (:ids) and g.id = c.groupId', [\n                'ids' => implode(',', array_filter($ids, 'intval')),\n            ]);\n\n            foreach ($groupsData as $groupData) {\n                $mappedData[$groupData['id']] = $groupData;\n            }\n\n            $groupIdList = [];\n            $groupId = null;\n\n            $allowedGroupIds = null;\n\n            if ($request->get('oid')) {\n                $object = DataObject\\Concrete::getById($request->get('oid'));\n                $class = $object->getClass();\n                /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n                $fd = $class->getFieldDefinition($request->get('fieldname'));\n                $allowedGroupIds = $fd->getAllowedGroupIds();\n            }\n\n            foreach ($groupsData as $groupItem) {\n                $groupId = $groupItem['groupId'];\n                if (!$allowedGroupIds || in_array($groupId, $allowedGroupIds)) {\n                    $groupIdList[] = $groupId;\n                }\n            }\n\n            if ($groupIdList) {\n                $groupList = new Classificationstore\\GroupConfig\\Listing();\n                $groupCondition = 'id in (' . implode(',', $groupIdList) . ')';\n                $groupList->setCondition($groupCondition);\n\n                $groupList = $groupList->load();\n\n                $keyCondition = 'groupId in (' . implode(',', $groupIdList) . ')';\n\n                $keyList = new Classificationstore\\KeyGroupRelation\\Listing();\n                $keyList->setCondition($keyCondition);\n                $keyList->setOrderKey(['sorter', 'id']);\n                $keyList->setOrder(['ASC', 'ASC']);\n                $keyList = $keyList->load();\n\n                foreach ($groupList as $groupData) {\n                    $data[$groupData->getId()] = [\n                        'name' => $groupData->getName(),\n                        'id' => $groupData->getId(),\n                        'description' => $groupData->getDescription(),\n                        'keys' => [],\n                        'sorter' => intval($mappedData[$groupData->getId()]['sorter']),\n                        'collectionId' => $mappedData[$groupId]['colId'],\n                    ];\n                }\n\n                foreach ($keyList as $keyData) {\n                    $groupId = $keyData->getGroupId();\n\n                    $keyList = $data[$groupId]['keys'];\n                    $type = $keyData->getType();\n                    $definition = json_decode($keyData->getDefinition());\n                    $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n                    if (method_exists($definition, '__wakeup')) {\n                        $definition->__wakeup();\n                    }\n\n                    $context['object'] = $object;\n                    $context['class'] = $object ? $object->getClass() : null;\n                    $context['ownerType'] = 'classificationstore';\n                    $context['ownerName'] = $fieldname;\n                    $context['keyId'] = $keyData->getKeyId();\n                    $context['groupId'] = $groupId;\n                    $context['keyDefinition'] = $definition;\n\n                    //TODO Pimcore 11: remove method_exists BC layer\n                    if ($definition instanceof LayoutDefinitionEnrichmentInterface || method_exists($definition, 'enrichLayoutDefinition')) {\n                        if (!$definition instanceof LayoutDefinitionEnrichmentInterface) {\n                            trigger_deprecation('pimcore/pimcore', '10.1',\n                                'Usage of method_exists is deprecated since version 10.1 and will be removed in Pimcore 11.' .\n                                'Implement the %s interface instead.', LayoutDefinitionEnrichmentInterface::class);\n                        }\n                        $definition = $definition->enrichLayoutDefinition($object, $context);\n                    }\n\n                    $keyList[] = [\n                        'name' => $keyData->getName(),\n                        'id' => $keyData->getKeyId(),\n                        'description' => $keyData->getDescription(),\n                        'definition' => $definition,\n                    ];\n                    $data[$groupId]['keys'] = $keyList;\n                }\n            }\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/add-groups\", name=\"pimcore_admin_dataobject_classificationstore_addgroups\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addGroupsAction(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $ids = $this->decodeJson($request->get('groupIds'));\n        $oid = $request->get('oid');\n        $object = DataObject\\Concrete::getById($oid);\n        $fieldname = $request->get('fieldname');\n\n        $keyCondition = 'groupId in (' . implode(',', array_fill(0, count($ids), '?')) . ')';\n\n        $keyList = new Classificationstore\\KeyGroupRelation\\Listing();\n        $keyList->setCondition($keyCondition, $ids);\n        $keyList->setOrderKey(['sorter', 'id']);\n        $keyList->setOrder(['ASC', 'ASC']);\n        $keyList = $keyList->load();\n\n        $groupCondition = 'id in (' . implode(',', array_fill(0, count($ids), '?')) . ')';\n\n        $groupList = new Classificationstore\\GroupConfig\\Listing();\n        $groupList->setCondition($groupCondition, $ids);\n        $groupList->setOrder('ASC');\n        $groupList->setOrderKey('id');\n        $groupList = $groupList->load();\n\n        $data = [];\n\n        foreach ($groupList as $groupData) {\n            $data[$groupData->getId()] = [\n                'name' => $groupData->getName(),\n                'id' => $groupData->getId(),\n                'description' => $groupData->getDescription(),\n                'keys' => [],\n            ];\n        }\n\n        foreach ($keyList as $keyData) {\n            $groupId = $keyData->getGroupId();\n\n            $keyList = $data[$groupId]['keys'];\n            $type = $keyData->getType();\n            $definition = json_decode($keyData->getDefinition());\n            $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n            if (method_exists($definition, '__wakeup')) {\n                $definition->__wakeup();\n            }\n\n            $context['object'] = $object;\n            $context['class'] = $object ? $object->getClass() : null;\n            $context['ownerType'] = 'classificationstore';\n            $context['ownerName'] = $fieldname;\n            $context['keyId'] = $keyData->getKeyId();\n            $context['groupId'] = $groupId;\n            $context['keyDefinition'] = $definition;\n\n            //TODO Pimcore 11: remove method_exists BC layer\n            if ($definition instanceof LayoutDefinitionEnrichmentInterface || method_exists($definition, 'enrichLayoutDefinition')) {\n                if (!$definition instanceof LayoutDefinitionEnrichmentInterface) {\n                    trigger_deprecation('pimcore/pimcore', '10.1',\n                        sprintf('Usage of method_exists is deprecated since version 10.1 and will be removed in Pimcore 11.' .\n                        'Implement the %s interface instead.', LayoutDefinitionEnrichmentInterface::class));\n                }\n                $definition = $definition->enrichLayoutDefinition($object, $context);\n            }\n\n            $keyList[] = [\n                'name' => $keyData->getName(),\n                'id' => $keyData->getKeyId(),\n                'description' => $keyData->getDescription(),\n                'definition' => $definition,\n            ];\n            $data[$groupId]['keys'] = $keyList;\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_dataobject_classificationstore_propertiesget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesGetAction(Request $request)\n    {\n        $storeId = $request->get('storeId');\n        $frameName = $request->get('frameName');\n        $db = \\Pimcore\\Db::get();\n\n        $conditionParts = [];\n\n        if ($frameName) {\n            $keyCriteria = ' FALSE ';\n            $frameConfig = Classificationstore\\CollectionConfig::getByName($frameName, $storeId);\n            if ($frameConfig) {\n                // get all keys within that collection / frame\n                $frameId = $frameConfig->getId();\n                $groupList = new Classificationstore\\CollectionGroupRelation\\Listing();\n                $groupList->setCondition('colId = ' . $db->quote($frameId));\n                $groupList = $groupList->load();\n                $groupIdList = [];\n                foreach ($groupList as $groupEntry) {\n                    $groupIdList[] = $groupEntry->getGroupId();\n                }\n\n                if ($groupIdList) {\n                    $keyIdList = new Classificationstore\\KeyGroupRelation\\Listing();\n                    $keyIdList->setCondition('groupId in (' . implode(',', $groupIdList) . ')');\n                    $keyIdList = $keyIdList->load();\n                    if ($keyIdList) {\n                        $keyIds = [];\n                        foreach ($keyIdList as $keyEntry) {\n                            $keyIds[] = $keyEntry->getKeyId();\n                        }\n\n                        $keyCriteria = ' id in (' . implode(',', $keyIds) . ')';\n                    }\n                }\n            }\n\n            $conditionParts[] = $keyCriteria;\n        }\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyConfig\\Listing();\n\n        if ($limit > 0 && !$request->get('groupIds') && !$request->get('keyIds')) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        if ($storeId) {\n            $conditionParts[] = '(storeId = ' . $storeId . ')';\n        }\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n\n        if ($request->get('groupIds') || $request->get('keyIds')) {\n            $db = Db::get();\n\n            if ($request->get('groupIds')) {\n                $ids = $this->decodeJson($request->get('groupIds'));\n                $col = 'group';\n            } else {\n                $ids = $this->decodeJson($request->get('keyIds'));\n                $col = 'id';\n            }\n\n            $condition = $db->quoteIdentifier($col) . ' IN (';\n            $count = 0;\n            foreach ($ids as $theId) {\n                if ($count > 0) {\n                    $condition .= ',';\n                }\n                $condition .= $theId;\n                $count++;\n            }\n\n            $condition .= ')';\n            $list->setCondition($condition);\n        }\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $item = $this->getConfigItem($config);\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_dataobject_classificationstore_properties\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\KeyConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    if (method_exists($config, $setter)) {\n                        $config->$setter($value);\n                    }\n                }\n            }\n\n            $config->save();\n            $item = $this->getConfigItem($config);\n\n            return $this->adminJson(['success' => true, 'data' => $item]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param Classificationstore\\KeyConfig $config\n     *\n     * @return array\n     */\n    protected function getConfigItem($config)\n    {\n        $name = $config->getName();\n\n        $groupDescription = null;\n        $item = [\n            'storeId' => $config->getStoreId(),\n            'id' => $config->getId(),\n            'name' => $name,\n            'description' => $config->getDescription(),\n            'type' => $config->getType() ? $config->getType() : 'input',\n            'definition' => $config->getDefinition(),\n        ];\n\n        if ($config->getDefinition()) {\n            $definition = json_decode($config->getDefinition(), true);\n            if ($definition) {\n                $item['title'] = $definition['title'];\n            }\n        }\n\n        if ($config->getCreationDate()) {\n            $item['creationDate'] = $config->getCreationDate();\n        }\n\n        if ($config->getModificationDate()) {\n            $item['modificationDate'] = $config->getModificationDate();\n        }\n\n        return $item;\n    }\n\n    /**\n     * @Route(\"/add-property\", name=\"pimcore_admin_dataobject_classificationstore_addproperty\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addPropertyAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n\n        $definition = [\n            'fieldtype' => 'input',\n            'name' => $name,\n            'title' => $name,\n            'datatype' => 'data',\n        ];\n        $config = new Classificationstore\\KeyConfig();\n        $config->setName($name);\n        $config->setTitle($name);\n        $config->setType('input');\n        $config->setStoreId($storeId);\n        $config->setEnabled(1);\n        $config->setDefinition(json_encode($definition));\n        $config->save();\n\n        return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete-property\", name=\"pimcore_admin_dataobject_classificationstore_deleteproperty\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deletePropertyAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $config = Classificationstore\\KeyConfig::getById($id);\n        //        $config->delete();\n        $config->setEnabled(false);\n        $config->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/edit-store\", name=\"pimcore_admin_dataobject_classificationstore_editstore\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function editStoreAction(Request $request)\n    {\n        $id = $request->get('id');\n        $data = json_decode($request->get('data'), true);\n\n        $name = $data['name'];\n        if (!$name) {\n            throw new \\Exception('Name must not be empty');\n        }\n\n        $description = $data['description'];\n\n        $config = Classificationstore\\StoreConfig::getByName($name);\n        if ($config && $config->getId() != $id) {\n            throw new \\Exception('There is already a config with the same name');\n        }\n\n        $config = Classificationstore\\StoreConfig::getById($id);\n\n        if (!$config) {\n            throw new \\Exception('Configuration does not exist');\n        }\n\n        $config->setName($name);\n        $config->setDescription($description);\n        $config->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/storetree\", name=\"pimcore_admin_dataobject_classificationstore_storetree\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function storetreeAction(Request $request)\n    {\n        $result = [];\n        $list = new Classificationstore\\StoreConfig\\Listing();\n        $list = $list->load();\n        foreach ($list as $item) {\n            $resultItem = [\n                'id' => $item->getId(),\n                'text' => $item->getName(),\n                'expandable' => false,\n                'leaf' => true,\n                'expanded' => true,\n                'description' => $item->getDescription(),\n                'iconCls' => 'pimcore_icon_classificationstore',\n            ];\n\n            $resultItem['qtitle'] = 'ID: ' . $item->getId();\n\n            if ($item->getDescription()) {\n            }\n            $resultItem['qtip'] = $item->getDescription() ? $item->getDescription() : ' ';\n            $result[] = $resultItem;\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-page\", name=\"pimcore_admin_dataobject_classificationstore_getpage\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPageAction(Request $request)\n    {\n        $tableSuffix = $request->get('table');\n        if (!in_arrayi($tableSuffix, ['keys', 'groups'])) {\n            $tableSuffix = 'keys';\n        }\n\n        $table = 'classificationstore_' . $tableSuffix;\n        $db = \\Pimcore\\Db::get();\n        $id = (int) $request->get('id');\n        $storeId = (int) $request->get('storeId');\n        $pageSize = (int) $request->get('pageSize');\n\n        if ($request->get('sortKey')) {\n            $sortKey = $request->get('sortKey');\n            $sortDir = $request->get('sortDir');\n        } else {\n            $sortKey = 'name';\n            $sortDir = 'ASC';\n        }\n\n        if (!in_arrayi($sortDir, ['DESC', 'ASC'])) {\n            $sortDir = 'DESC';\n        }\n\n        if (!in_arrayi($sortKey, ['name', 'title', 'description', 'id', 'type', 'creationDate', 'modificationDate', 'enabled', 'parentId', 'storeId'])) {\n            $sortKey = 'name';\n        }\n\n        $sorter = ' order by `' . $sortKey .  '` ' . $sortDir;\n\n        if ($table == 'keys') {\n            $query = '\n                select *, (item.pos - 1)/ ' . $pageSize . ' + 1  as page from (\n                    select * from (\n                        select @rownum := @rownum + 1 as pos,  id, name, `type`\n                        from `' . $table . '`\n                        where enabled = 1 and storeId = ' . $storeId . $sorter . '\n                      ) all_rows) item where id = ' . $id . ';';\n        } else {\n            $query = '\n            select *, (item.pos - 1)/ ' . $pageSize . ' + 1  as page from (\n                select * from (\n                    select @rownum := @rownum + 1 as pos,  id, name\n                    from `' . $table . '`\n                    where storeId = ' . $storeId . $sorter . '\n                  ) all_rows) item where id = ' .  $id . ';';\n        }\n\n        $db->query('select @rownum := 0;');\n        $result = $db->fetchAll($query);\n\n        $page = (int) $result[0]['page'] ;\n\n        return $this->adminJson(['success' => true, 'page' => $page]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        $unrestrictedActions = ['collectionsActionGet', 'groupsActionGet', 'relationsActionGet', 'addGroupsAction', 'addCollectionsAction', 'searchRelationsAction'];\n        $this->checkActionPermission($event, 'classes', $unrestrictedActions);\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.helpers.grid = {};\n\npimcore.helpers.grid.buildDefaultStore = function (url, fields, itemsPerPage, customConfig) {\n\n    if (url.indexOf('?') === -1) {\n        url = url + \"?\";\n    } else {\n        url = url + \"&\";\n    }\n\n    var proxy = new Ext.data.proxy.Ajax({\n        timeout: 120000,\n        batchActions: false,\n        type: 'ajax',\n        reader: {\n            type: 'json',\n            rootProperty: 'data'\n        },\n        writer: {\n            type: 'json',\n            writeAllFields: true,\n            rootProperty: 'data',\n            encode: 'true'\n        },\n        api: {\n            create: url + \"xaction=create\",\n            read: url + \"xaction=read\",\n            update: url + \"xaction=update\",\n            destroy: url + \"xaction=destroy\"\n        },\n        actionMethods: {\n            create: 'POST',\n            read: 'POST',\n            update: 'POST',\n            destroy: 'POST'\n        }/*,\n        listeners: {\n            exception: function(proxy, response, operation){\n                Ext.MessageBox.show({\n                    title: 'REMOTE EXCEPTION',\n                    msg: operation.getError(),\n                    icon: Ext.MessageBox.ERROR,\n                    buttons: Ext.Msg.OK\n                });\n            }\n        }*/\n    });\n\n    var config = {\n        proxy: proxy,\n        autoLoad: true,\n        autoSync: true,\n        pageSize: itemsPerPage,\n        fields: fields,\n        remoteSort: true,\n        remoteFilter: true\n    };\n\n    if (customConfig) {\n        Ext.apply(config, customConfig);\n    }\n\n    var store = Ext.create('Ext.data.Store', config);\n\n    return store;\n};\n\n\npimcore.helpers.grid.getDefaultPageSize = function (scale) {\n    if (scale < 0) {\n        return 25;\n    }\n    return 50;\n};\n\npimcore.helpers.grid.buildDefaultPagingToolbar = function (store, options) {\n    var config = {\n        pageSize: pimcore.helpers.grid.getDefaultPageSize(),\n        store: store,\n        displayInfo: true,\n        displayMsg: '{0} - {1} / {2}',\n        emptyMsg: t(\"no_items_found\")\n    };\n    if (typeof options !== \"undefined\") {\n        config = Ext.applyIf(options, config);\n    }\n    var pagingtoolbar = Ext.create('Ext.PagingToolbar', config);\n\n    if (!config.hideSelection) {\n        // add per-page selection\n        pagingtoolbar.add(\"-\");\n\n        pagingtoolbar.add(Ext.create('Ext.Toolbar.TextItem', {\n            text: t(\"items_per_page\")\n        }));\n        pagingtoolbar.add(Ext.create('Ext.form.ComboBox', {\n            store: [\n                [25, \"25\"],\n                [50, \"50\"],\n                [100, \"100\"],\n                [200, \"200\"],\n                [999999, t(\"all\")]\n            ],\n            mode: \"local\",\n            width: 80,\n            value: config.pageSize,\n            triggerAction: \"all\",\n            editable: true,\n            listeners: {\n                change: function (box, newValue, oldValue) {\n                    var store = this.getStore();\n                    newValue = intval(newValue);\n                    if (!newValue) {\n                        newValue = options.pageSize;\n                    }\n                    store.setPageSize(newValue);\n                    this.pageSize = newValue;\n                    this.moveFirst();\n                }.bind(pagingtoolbar)\n            }\n        }));\n    }\n\n    return pagingtoolbar;\n};\n\npimcore.helpers.grid.getTranslationColumnRenderer = function (value, metaData, record, rowIndex, colIndex, store) {\n    return t(value);\n};\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classificationstore.collectionsPanel\");\npimcore.object.classificationstore.collectionsPanel = Class.create({\n\n    initialize: function (storeConfig, groupsPanel) {\n        this.groupsPanel = groupsPanel;\n        this.storeConfig = storeConfig;\n    },\n\n    getPanel: function () {\n        if (this.layout == null) {\n            this.layout = new Ext.Panel({\n                title: t(\"classificationstore_collection_definition\"),\n                iconCls: \"pimcore_icon_classificationstore_icon_cs_collections\",\n                border: false,\n                layout: \"border\",\n                items: [\n                    this.createCollectionsGrid(),\n                    this.createRelationsGrid()\n                ],\n                viewConfig: {\n                    forceFit: true\n                }\n\n            });\n        }\n\n        return this.layout;\n    },\n\n\n    createRelationsGrid: function() {\n        this.relationsFields = ['id', 'colId', 'groupId', 'groupName', 'groupDescription', 'sorter'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.relationsFields.length; i++) {\n            var columnConfig = {name: this.relationsFields[i]};\n            if (this.relationsFields[i] == \"sorter\" || this.relationsFields[i] == \"groupId\") {\n                columnConfig[\"type\"] = \"int\";\n            }\n            readerFields.push(columnConfig);\n        }\n\n        var route = 'pimcore_admin_dataobject_classificationstore_collectionrelations';\n        var proxy = {\n            batchActions: false,\n            type: 'ajax',\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            },\n            api: {\n                create  : Routing.generate(route, {'xaction': 'create'}),\n                read    : Routing.generate(route, {'xaction': 'read'}),\n                update  : Routing.generate(route, {'xaction': 'update'}),\n                destroy : Routing.generate(route, {'xaction': 'destroy'})\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n        };\n\n        var listeners = {};\n\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), response);\n                this.collectionsStore.rejectChanges();\n            }\n        }.bind(this);\n\n        this.relationsStore = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners\n        });\n\n        var gridColumns = [];\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            text: t(\"open\"),\n            menuText: t(\"open\"),\n            width: 40,\n            items: [\n                {\n                    tooltip: t(\"open\"),\n                    iconCls: \"pimcore_icon_open\",\n                    handler: function (grid, rowIndex) {\n                        var store = grid.getStore();\n                        var data = store.getAt(rowIndex).getData();\n                        var groupId = data.groupId;\n                        this.groupsPanel.openConfig(groupId);\n                    }.bind(this)\n                }\n            ]\n        });\n\n        gridColumns.push({text: t(\"group_id\"), flex: 60, sortable: true, dataIndex: 'groupId', filter: 'string'});\n        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'groupName', filter: 'string'});\n        gridColumns.push({text: t(\"description\"), flex: 200, sortable: true, dataIndex: 'groupDescription', filter: 'string'});\n\n        gridColumns.push({text: t('sorter'), width: 150, sortable: true, dataIndex: 'sorter',\n            tooltip: t(\"classificationstore_tooltip_sorter\"),\n            editor: new Ext.form.NumberField()\n        });\n\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            hideable: false,\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var colId = data.data.colId;\n                        var groupId = data.data.groupId;\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deletecollectionrelation'),\n                            method: 'DELETE',\n                            params: {\n                                colId: colId,\n                                groupId: groupId\n                            },\n                            success: function (response) {\n                                this.relationsStore.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.relationsPagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.relationsStore, {pageSize: pageSize});\n\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 2\n        });\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.relationsStore,\n            //border: true,\n            columns: gridColumns,\n            bodyCls: \"pimcore_editable_grid\",\n            loadMask: true,\n            columnLines: true,\n            plugins: plugins,\n            stripeRows: true,\n            trackMouseOver: true,\n            region: \"west\",\n            split: true,\n            hidden: true,\n            viewConfig: {\n                forceFit: true\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.relationsPagingtoolbar,\n            tbar: [\n\n                {\n                    text: t('add'),\n                    handler: this.onAddGroup.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ]\n        } ;\n\n        this.relationsGrid = Ext.create('Ext.grid.Panel', gridConfig);\n\n        this.relationsPanel = new Ext.Panel({\n            title: t(\"relations\"),\n            border: false,\n            layout: \"fit\",\n            region: \"center\",\n            split: true,\n            disabled: true,\n            items: [\n                this.relationsGrid\n            ]\n\n        });\n\n        return this.relationsPanel;\n    },\n\n\n    createCollectionsGrid: function(response) {\n        this.groupsFields = ['storeId','id', 'name', 'description', 'creationDate', 'modificationDate'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.groupsFields.length; i++) {\n            readerFields.push({name: this.groupsFields[i]});\n        }\n\n        var proxy = {\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_collectionsactionget'),\n            batchActions: false,\n            type: 'ajax',\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n        };\n\n        var listeners = {};\n\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), t('cannot_save_object_please_try_to_edit_the_object_in_detail_view'));\n                this.collectionsStore.rejectChanges();\n            }\n        }.bind(this);\n\n\n        this.collectionsStore = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners,\n            remoteFilter: true,\n            remoteSort: true\n        });\n\n\n        var gridColumns = [];\n\n        //gridColumns.push({text: t(\"store\"), flex: 60, sortable: true, dataIndex: 'storeId', filter: 'string'});\n        gridColumns.push({text: \"ID\", flex: 60, sortable: true, dataIndex: 'id', filter: 'string'});\n        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({}), filter: 'string'});\n        gridColumns.push({text: t(\"description\"), flex: 300, sortable: true, dataIndex: 'description', editor: new Ext.form.TextField({}), filter: 'string'});\n\n        var dateRenderer =  function(d) {\n            if (d !== undefined) {\n                var date = new Date(d * 1000);\n                return Ext.Date.format(date, \"Y-m-d H:i:s\");\n            } else {\n                return \"\";\n            }\n        };\n\n\n        gridColumns.push(\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer            }\n        );\n\n        gridColumns.push(\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer\n            }\n        );\n\n        gridColumns.push({\n            hideable: false,\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var id = data.data.id;\n\n                        this.relationsStore.removeAll(true);\n                        this.relationsGrid.hide();\n                        this.relationsPanel.disable();\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deletecollection'),\n                            method: 'DELETE',\n                            params: {\n                                id: id\n                            },\n                            success: function (response) {\n                                this.collectionsStore.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.collectionsPagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.collectionsStore, {pageSize: pageSize});\n\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {});\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.collectionsStore,\n            columns: gridColumns,\n            loadMask: true,\n            columnLines: true,\n            bodyCls: \"pimcore_editable_grid\",\n            stripeRows: true,\n            trackMouseOver: true,\n            plugins: plugins,\n            region: \"west\",\n            split: true,\n            width: 600,\n            viewConfig: {\n                forceFit: true\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.collectionsPagingtoolbar,\n            tbar: [\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ],\n            listeners: {\n                selectionchange: function(rowModel, selected, eOpts ) {\n                    if (selected.length > 0) {\n                        var record = selected[0];\n                        var collectionId = record.data.id;\n                        var collectionName = record.data.name;\n\n                        this.collectionId = collectionId;\n\n                        this.relationsPanel.setTitle(t(\"relations\") + \" - \" + t(\"collection\") + \" \" + record.data.id + \" - \" + collectionName);\n                        this.relationsPanel.enable();\n                        var proxy = this.relationsStore.getProxy();\n                        proxy.setExtraParam(\"colId\", collectionId);\n                        this.relationsStore.reload();\n                        this.relationsGrid.show();\n                    }\n\n                }.bind(this)\n            }\n        } ;\n\n        this.grid = Ext.create('Ext.grid.Panel', gridConfig);\n\n        return this.grid\n    },\n\n\n    onAddGroup: function() {\n        var keySelectionWindow = new pimcore.object.classificationstore.keySelectionWindow(\n            {\n                parent: this,\n                enableGroups: true,\n                storeId: this.storeConfig.id\n            });\n\n        keySelectionWindow.show();\n    },\n\n    onAdd: function () {\n        Ext.MessageBox.prompt(t('classificationstore_mbx_entercollection_title'), t('classificationstore_mbx_entergroup_prompt'),\n            this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        value = value.trim();\n        if (button == \"ok\" && value.length > 1) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_createcollection'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    storeId: this.storeConfig.id\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t(\"error\"), t(\"classificationstore_error_addcollection_msg\"));\n                    } else {\n                        this.collectionsStore.reload({\n                                callback: function() {\n                                    var rowIndex = this.collectionsStore.find('name', value);\n                                    if (rowIndex != -1) {\n                                        var sm = this.grid.getSelectionModel();\n                                        sm.select(rowIndex);\n                                    }\n\n                                    var lastOptions = this.collectionsStore.lastOptions;\n                                    Ext.apply(lastOptions.params, {\n                                        overrideSort: \"false\"\n                                    });\n                                }.bind(this),\n                                params: {\n                                    \"overrideSort\": \"true\"\n                                }\n                            }\n                        );\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t(\"classificationstore_configuration\"), t(\"classificationstore_invalidname\"));\n        }\n    },\n\n\n    handleSelectionWindowClosed: function() {\n\n    },\n\n    handleAddGroups: function (response) {\n        var data = Ext.decode(response.responseText);\n\n        if(data) {\n            for (groupId in data) {\n                if (data.hasOwnProperty(groupId)) {\n                    var groupDef = data[groupId];\n\n                    var colData = {};\n                    colData.groupId = groupDef.id;\n                    colData.groupName = groupDef.name;\n                    colData.gropDescription = groupDef.description;\n                    colData.storeId = this.storeConfig.id;\n                    colData.colId = this.collectionId;\n                    var tmpId = this.collectionId + \"-\" + colData.groupId;\n\n                    var match = this.relationsStore.findExact(\"id\", tmpId);\n                    if (match == -1) {\n                        this.relationsStore.add(colData);\n                    }\n                }\n            }\n        }\n    },\n\n    requestPending: function() {\n        // nothing to do\n    }\n\n});\n\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classificationstore.groupsPanel\");\npimcore.object.classificationstore.groupsPanel = Class.create({\n\n    initialize: function (storeConfig, container, propertiesPanel) {\n        this.storeConfig = storeConfig;\n        this.propertiesPanel = propertiesPanel;\n        this.container = container;\n    },\n\n    getPanel: function () {\n        if (this.layout == null) {\n            this.layout = new Ext.Panel({\n                title: t(\"classificationstore_group_definition\"),\n                iconCls: \"pimcore_icon_keys\",\n                border: false,\n                layout: \"border\",\n                items: [\n                    this.createGroupsGrid(),\n                    this.createRelationsGrid()\n                ]\n\n            });\n        }\n\n        return this.layout;\n    },\n\n\n    createRelationsGrid: function() {\n        this.relationsFields = ['id', 'keyId', 'groupId', 'keyName', 'keyDescription', 'sorter'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.relationsFields.length; i++) {\n            var columnConfig = {name: this.relationsFields[i], type: 'string'};\n            if (this.relationsFields[i] == \"sorter\" || this.relationsFields[i] == \"keyId\") {\n                columnConfig[\"type\"] = \"int\";\n            }\n            readerFields.push(columnConfig);\n        }\n\n        readerFields.push({name: 'mandatory', type: 'bool'});\n\n        var proxy = {\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_relationsactionget'),\n            type: 'ajax',\n            batchActions: false,\n            reader: {\n                type: 'json',\n                rootProperty: 'data',\n                idProperty: 'id'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n        };\n\n        var listeners = {};\n\n        listeners.write = function(store, action, result, response, rs) {};\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), response);\n                this.relationsStore.rejectChanges();\n            }\n        }.bind(this);\n\n        this.relationsStore = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners\n        });\n\n        var gridColumns = [];\n\n        var mandatoryCheck = new Ext.grid.column.Check({\n            text: t(\"mandatory\"),\n            dataIndex: \"mandatory\",\n            width: 50\n        });\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            text: t(\"open\"),\n            menuText: t(\"open\"),\n            width: 40,\n            items: [\n                {\n                    tooltip: t(\"open\"),\n                    iconCls: \"pimcore_icon_open\",\n                    handler: function (grid, rowIndex) {\n                        var store = grid.getStore();\n                        var data = store.getAt(rowIndex).getData();\n                        var keyId = data.keyId;\n                        this.propertiesPanel.openConfig(keyId);\n                    }.bind(this)\n                }\n            ]\n        });\n\n\n        gridColumns.push({text: t(\"key_id\"), flex: 60, sortable: true, dataIndex: 'keyId', filter: 'string'});\n        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'keyName', filter: 'string'});\n        gridColumns.push({text: t(\"description\"), flex: 200, sortable: true, dataIndex: 'keyDescription', filter: 'string'});\n\n        gridColumns.push(mandatoryCheck);\n        gridColumns.push({text: t('sorter'), width: 150, sortable: true, dataIndex: 'sorter',\n            tooltip: t(\"classificationstore_tooltip_sorter\"),\n            editor: new Ext.form.NumberField()\n        });\n\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            hideable: false,\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var keyId = data.data.keyId;\n                        var groupId = data.data.groupId;\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deleterelation'),\n                            method: 'DELETE',\n                            params: {\n                                keyId: keyId,\n                                groupId: groupId\n                            },\n                            success: function (response) {\n                                this.relationsStore.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.relationsPagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.relationsStore, {pageSize: pageSize});\n\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 2\n        });\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.relationsStore,\n            border: false,\n            columns: gridColumns,\n            loadMask: true,\n            bodyCls: \"pimcore_editable_grid\",\n            columnLines: true,\n            plugins: plugins,\n            stripeRows: true,\n            trackMouseOver: true,\n            region: \"west\",\n            split: true,\n            hidden: true,\n            viewConfig: {\n                forceFit: true\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.relationsPagingtoolbar,\n            tbar: [\n                {\n                    text: t('add'),\n                    handler: this.onAddKey.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ]\n        } ;\n\n        this.relationsGrid = Ext.create('Ext.grid.Panel', gridConfig);\n\n\n        this.relationsPanel = new Ext.Panel({\n            title: t(\"relations\"),\n            border: false,\n            layout: \"fit\",\n            region: \"center\",\n            split: true,\n            disabled: true,\n            items: [\n                this.relationsGrid\n            ]\n\n        });\n\n        return this.relationsPanel;\n\n    },\n\n\n    createGroupsGrid: function(response) {\n        this.groupsFields = ['storeId','id', 'parentId', 'name', 'description', 'creationDate', 'modificationDate'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.groupsFields.length; i++) {\n            readerFields.push({name: this.groupsFields[i]});\n        }\n\n        var proxy = {\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_groupsactionget'),\n            type: 'ajax',\n            batchActions: false,\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n        };\n\n        var listeners = {};\n\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), t('cannot_save_object_please_try_to_edit_the_object_in_detail_view'));\n                this.groupsStore.rejectChanges();\n            }\n        }.bind(this);\n\n\n        this.groupsStore = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners,\n            remoteFilter: true,\n            remoteSort: true\n        });\n\n        var gridColumns = [];\n\n        //gridColumns.push({text: t(\"store\"), width: 60, sortable: true, dataIndex: 'storeId', filter: 'string'});\n        gridColumns.push({text: \"ID\", width: 60, sortable: true, dataIndex: 'id', filter: 'string'});\n        gridColumns.push({text: t(\"parent_id\"), width: 160, sortable: true, dataIndex: 'parentId', hidden: true, editor: new Ext.form.TextField({})});\n        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({}), filter: 'string'});\n        gridColumns.push({text: t(\"description\"), flex: 300, sortable: true, dataIndex: 'description', editor: new Ext.form.TextField({}), filter: 'string'});\n\n        var dateRenderer =  function(d) {\n            if (d !== undefined) {\n                var date = new Date(d * 1000);\n                return Ext.Date.format(date, \"Y-m-d H:i:s\");\n            } else {\n                return \"\";\n            }\n        };\n\n        gridColumns.push(\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer\n            }\n        );\n\n        gridColumns.push(\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer\n            }\n        );\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            hideable: false,\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var id = data.data.id;\n\n                        this.relationsStore.removeAll(true);\n                        this.relationsGrid.hide();\n                        this.relationsPanel.disable();\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deletegroup'),\n                            method: 'DELETE',\n                            params: {\n                                id: id\n                            },\n                            success: function (response) {\n                                this.groupsStore.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.groupsPagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.groupsStore, {pageSize: pageSize});\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {});\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.groupsStore,\n            border: false,\n            bodyCls: \"pimcore_editable_grid\",\n            columns: gridColumns,\n            loadMask: true,\n            columnLines: true,\n            plugins: plugins,\n            stripeRows: true,\n            trackMouseOver: true,\n            region: \"west\",\n            split: true,\n            width: 600,\n            viewConfig: {\n                forceFit: true\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.groupsPagingtoolbar,\n            tbar: [\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ],\n            listeners: {\n\n                selectionchange: function(rowModel, selected, eOpts ) {\n                    if (selected.length > 0) {\n                        var record = selected[0];\n                        var groupId = record.data.id;\n                        var groupName = record.data.name;\n\n                        this.groupId = groupId;\n\n                        this.relationsPanel.setTitle(t(\"relations\") + \" - \" + t(\"group\") + \" \" + record.data.id + \" - \" + groupName);\n                        this.relationsPanel.enable();\n                        this.relationsStore.getProxy().setExtraParam(\"groupId\", groupId);\n                        this.relationsStore.reload();\n                        this.relationsGrid.show();\n                    }\n                }.bind(this)\n            }\n        } ;\n\n        this.grid =  Ext.create('Ext.grid.Panel', gridConfig);\n\n        return this.grid\n    },\n\n    onAddKey: function() {\n        var keySelectionWindow = new pimcore.object.classificationstore.keySelectionWindow({\n            parent: this,\n            enableKeys: true,\n            storeId: this.storeConfig.id\n        });\n        keySelectionWindow.show();\n    },\n\n    onAdd: function () {\n        Ext.MessageBox.prompt(t('classificationstore_mbx_entergroup_title'), t('classificationstore_mbx_entergroup_prompt'),\n            this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        value = value.trim();\n        if (button == \"ok\" && value.length > 1) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_creategroup'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    storeId: this.storeConfig.id\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t(\"classificationstore_error_addgroup_title\"), t(data.message ? data.message : \"classificationstore_error_addgroup_msg\"));\n                    } else {\n                        this.groupsStore.reload({\n                                callback: function() {\n                                    var rowIndex = this.groupsStore.find('name', value);\n                                    if (rowIndex != -1) {\n                                        var sm = this.grid.getSelectionModel();\n                                        sm.select(rowIndex);\n                                    }\n\n                                    var lastOptions = this.groupsStore.lastOptions;\n                                    Ext.apply(lastOptions.params, {\n                                        overrideSort: \"false\"\n                                    });\n                                }.bind(this),\n                                params: {\n                                    \"overrideSort\": \"true\"\n                                }\n                            }\n                        );\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t(\"classificationstore_configuration\"), t(\"classificationstore_invalidname\"));\n        }\n    },\n\n\n    handleSelectionWindowClosed: function() {\n\n    },\n\n    handleAddKeys: function (response) {\n        var data = Ext.decode(response.responseText);\n\n        if(data && data.success) {\n            for (var i=0; i < data.data.length; i++) {\n                var keyDef = data.data[i];\n\n                var colData = {};\n                colData.keyId = keyDef.id;\n                colData.keyName = keyDef.name;\n                colData.keyDescription = keyDef.description;\n                colData.storeId = this.storeConfig.id;\n                colData.groupId = this.groupId;\n\n                var tempId = this.groupId + \"-\" + colData.keyId;\n\n                var match = this.relationsStore.findExact(\"id\" , tempId);\n                if (match == -1) {\n                    this.relationsStore.add(colData);\n                }\n            }\n        }\n    },\n\n    requestPending: function() {\n        // nothing to do\n    },\n\n    openConfig: function(id) {\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n        var params = {\n            storeId: this.storeConfig.id,\n            id: id,\n            pageSize: pageSize,\n            table: \"groups\"\n        };\n\n        var sorters = this.groupsStore.getSorters();\n        if (sorters.length > 0) {\n            var sorter = sorters.getAt(0);\n            params.sortKey = sorter.getProperty();\n            params.sortDir = sorter.getDirection();\n        }\n\n        var noreload = function() {\n            return false;\n        }\n        this.groupsStore.addListener(\"beforeload\", noreload);\n\n        this.container.setActiveTab(this.layout);\n        this.groupsStore.clearFilter(true);\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_getpage'),\n            params: params,\n            success: function(response) {\n                try {\n                    this.groupsStore.removeListener(\"beforeload\", noreload);\n\n                    var data = Ext.decode(response.responseText);\n                    if (data.success) {\n                        this.groupsStore.removeListener(\"beforeload\", noreload);\n                        this.groupsStore.loadPage(data.page, {\n                            callback: function() {\n                                var selModel = this.grid.getSelectionModel();\n                                var record = this.groupsStore.getById(id);\n                                if (record) {\n                                    selModel.select(record);\n                                }\n                            }.bind(this)\n                        });\n                    } else {\n                        this.groupsStore.reload();\n                    }\n                } catch (e) {\n                    console.log(e);\n                }\n            }.bind(this),\n            failure: function(response) {\n                this.groupsStore.removeListener(\"beforeload\", noreload);\n                this.groupsStore.reload();\n            }.bind(this)\n        });\n\n\n    }\n\n});\n\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classificationstore.propertiespanel\");\npimcore.object.classificationstore.propertiespanel = Class.create({\n\n    initialize: function (storeConfig, container) {\n        this.container = container;\n        this.storeConfig = storeConfig;\n    },\n\n    getPanel: function () {\n        if (this.layout == null) {\n            this.layout = new Ext.Panel({\n                title: t(\"classificationstore_properties\"),\n                iconCls: \"pimcore_icon_key\",\n                border: false,\n                layout: \"fit\",\n                region: \"center\"\n            });\n\n            this.createGrid();\n        }\n\n        this.layout.on(\"activate\", this.panelActivated.bind(this));\n\n        return this.layout;\n    },\n\n    panelActivated: function() {\n        if (this.store) {\n            this.store.reload();\n        }\n    },\n\n    createGrid: function(response) {\n        this.fields = ['storeId','id', 'name', 'description', 'type',\n            'creationDate', 'modificationDate', 'definition', 'title', 'sorter'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.fields.length; i++) {\n            readerFields.push({name: this.fields[i]});\n        }\n\n        var dataComps = Object.keys(pimcore.object.classes.data);\n        var allowedDataTypes = [];\n\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataComp = pimcore.object.classes.data[dataComps[i]];\n\n            var allowed = false;\n\n            if('object' !== typeof dataComp) {\n                if (dataComp.prototype.allowIn['classificationstore']) {\n                    allowed = true;\n                }\n            }\n\n            if (allowed) {\n                allowedDataTypes.push([dataComps[i], t(dataComps[i])]);\n            }\n        }\n\n        this.allowedTypesStore = new Ext.data.SimpleStore({\n            fields: ['key', 'name'],\n            data: allowedDataTypes\n        });\n\n        var proxy = {\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_propertiesget'),\n            batchActions: false,\n            type: 'ajax',\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n\n        };\n\n        var listeners = {};\n\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), t('cannot_save_object_please_try_to_edit_the_object_in_detail_view'));\n                this.store.rejectChanges();\n            }\n        }.bind(this);\n\n\n        this.store = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners,\n            remoteFilter: true,\n            remoteSort: true\n        });\n\n        var gridColumns = [];\n\n        //gridColumns.push({text: t(\"store\"), width: 40, sortable: true, dataIndex: 'storeId'});\n        gridColumns.push({text: \"ID\", width: 100, sortable: true, dataIndex: 'id'});\n        gridColumns.push({\n                text: t(\"name\"),\n                width: 200,\n                sortable: true,\n                dataIndex: 'name',\n                filter: 'string',\n                editor: new Ext.form.TextField({})\n            }\n\n        );\n\n        gridColumns.push({text: t(\"title\"), width: 200, sortable: false, dataIndex: 'title',editor: new Ext.form.TextField({}), filter: 'string'});\n        gridColumns.push({text: t(\"description\"), width: 300, sortable: true, dataIndex: 'description',editor: new Ext.form.TextField({}), filter: 'string'});\n        gridColumns.push({text: t(\"definition\"), width: 300, sortable: true, hidden: true, dataIndex: 'definition',editor: new Ext.form.TextField({})});\n        gridColumns.push({text: t(\"type\"), width: 150, sortable: true, dataIndex: 'type', filter: 'string',\n            editor: new Ext.form.ComboBox({\n                triggerAction: 'all',\n                editable: false,\n                store: this.allowedTypesStore,\n                displayField:'name',\n                valueField: \"key\"\n            }),\n            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {\n                return t(value);\n            }});\n\n        gridColumns.push({\n            hideable: false,\n            xtype: 'actioncolumn',\n            menuText: t(\"classificationstore_detailed_configuration\"),\n            width: 30,\n            items: [\n                {\n                    tooltip: t(\"classificationstore_detailed_configuration\"),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/department.svg\",\n                    handler: this.showDetailedConfig.bind(this)\n                }\n            ]\n        });\n\n        var dateRenderer =  function(d) {\n            if (d !== undefined) {\n                var date = new Date(d * 1000);\n                return Ext.Date.format(date, \"Y-m-d H:i:s\");\n            } else {\n                return \"\";\n            }\n        };\n\n\n        gridColumns.push(\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer\n            }\n        );\n\n        gridColumns.push(\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer            }\n        );\n\n        gridColumns.push({\n            hideable: false,\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var id = data.data.id;\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deleteproperty'),\n                            method: 'DELETE',\n                            params: {\n                                id: id\n                            },\n                            success: function (response) {\n                                this.store.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store, {pageSize: pageSize});\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            listeners: {\n                edit: function (editor, e) {\n                    var field = e.field;\n                    var rec = e.record;\n                    var val = e.value;\n                    var originalValue = e.originalValue;\n\n                    var definition = rec.get(\"definition\");\n                    definition = Ext.util.JSON.decode(definition);\n                    if (field == \"name\") {\n                        definition.name = val;\n                        definition = Ext.util.JSON.encode(definition);\n                        rec.set(\"definition\", definition);\n                    } else if (field == \"type\") {\n                        definition.fieldtype = val;\n                        definition = Ext.util.JSON.encode(definition);\n                        rec.set(\"definition\", definition);\n                    } else if (field == \"title\") {\n                        definition.title = val;\n                        definition = Ext.util.JSON.encode(definition);\n                        rec.set(\"definition\", definition);\n                    }\n\n                    if (val != originalValue) {\n                        this.showDetailedConfig(e.grid, e.rowIdx);\n                    }\n                }.bind(this)\n            }\n        });\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.store,\n            border: false,\n            columns: gridColumns,\n            loadMask: false,\n            columnLines: true,\n            plugins: plugins,\n            bodyCls: \"pimcore_editable_grid\",\n            stripeRows: true,\n            trackMouseOver: true,\n            viewConfig: {\n                forceFit: false\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.pagingtoolbar,\n            tbar: [\n\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ]\n        } ;\n\n        this.grid = Ext.create('Ext.grid.Panel', gridConfig);\n\n        this.layout.removeAll();\n        this.layout.add(this.grid);\n        this.layout.updateLayout();\n    },\n\n    showDetailedConfig: function (grid, rowIndex) {\n        var data = grid.getStore().getAt(rowIndex);\n        var type = data.data.type;\n        var definition = data.data.definition;\n        if (definition) {\n            definition = Ext.util.JSON.decode(definition);\n            definition.name = data.data.name;\n        } else {\n            definition = {\n                name: data.data.name\n            };\n        }\n\n        definition.fieldtype = type;\n\n        var keyDefinitionWindow = new pimcore.object.classificationstore.keyDefinitionWindow(\n            definition, data.id, this);\n        keyDefinitionWindow.show();\n    },\n\n    applyTranslatorConfig: function(keyid, value) {\n        var data = this.store.getById(keyid);\n        data.set(\"translator\", value);\n    },\n\n    applyDetailedConfig: function(keyid, definition) {\n\n        var name = definition.name;\n        definition = Ext.util.JSON.encode(definition);\n\n        var record = this.store.getById(keyid);\n        record.set(\"name\",  name);\n        record.set(\"definition\",  definition);\n    },\n\n    onAdd: function () {\n        Ext.MessageBox.prompt(t('classificationstore_mbx_enterkey_title'), t('classificationstore_mbx_enterkey_prompt'),\n            this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        value = value.trim();\n        if (button == \"ok\" && value.length > 1) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_addproperty'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    storeId: this.storeConfig.id\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t(\"classificationstore_error_addkey_title\"), t(\"classificationstore_error_addkey_msg\"));\n                    } else {\n\n                        this.store.reload({\n                                callback: function() {\n                                    var rowIndex = this.store.find('name', value);\n                                    if (rowIndex != -1) {\n                                        var sm = this.grid.getSelectionModel();\n                                        sm.select(rowIndex);\n                                    }\n\n                                    var lastOptions = this.store.lastOptions;\n                                    Ext.apply(lastOptions.params, {\n                                        overrideSort: \"false\"\n                                    });\n\n                                }.bind(this),\n                                params: {\n                                    \"overrideSort\": \"true\"\n                                }\n                            }\n\n                        );\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t(\"classificationstore_configuration\"), t(\"classificationstore_invalidname\"));\n        }\n    },\n\n\n    getData: function () {\n        var selected = this.groupGridPanel.getSelectionModel().getSelected();\n        if(selected) {\n            return selected.data;\n        }\n        return null;\n    },\n\n   openConfig: function(id) {\n\n       var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n       var params = {\n           storeId: this.storeConfig.id,\n           id: id,\n           pageSize: pageSize,\n           table: \"keys\"\n       };\n\n       var sorters = this.store.getSorters();\n       if (sorters.length > 0) {\n           var sorter = sorters.getAt(0);\n           params.sortKey = sorter.getProperty();\n           params.sortDir = sorter.getDirection();\n       }\n\n       var noreload = function() {\n           return false;\n       }\n       this.store.addListener(\"beforeload\", noreload);\n\n       this.container.setActiveTab(this.layout);\n       this.store.clearFilter(true);\n\n       Ext.Ajax.request({\n           url: Routing.generate('pimcore_admin_dataobject_classificationstore_getpage'),\n           params: params,\n           success: function(response) {\n               try {\n                   this.store.removeListener(\"beforeload\", noreload);\n\n                   var data = Ext.decode(response.responseText);\n                   if (data.success) {\n                       this.store.removeListener(\"beforeload\", noreload);\n                       this.store.loadPage(data.page, {\n                           callback: function() {\n                               var selModel = this.grid.getSelectionModel();\n                               var record = this.store.getById(id);\n                               if (record) {\n                                   selModel.select(record);\n                                   this.showDetailedConfig(this.grid, this.store.indexOf(record));\n                               }\n                           }.bind(this)\n                       });\n                   } else {\n                       this.store.reload();\n                   }\n               } catch (e) {\n                   console.log(e);\n               }\n           }.bind(this),\n           failure: function(response) {\n               this.store.removeListener(\"beforeload\", noreload);\n               this.store.reload();\n           }.bind(this)\n       });\n\n\n    }\n\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.object.classificationstore.storeTree\");\npimcore.object.classificationstore.storeTree = Class.create({\n\n    activeStoreId: 0,\n\n    initialize: function () {\n        this.getTabPanel();\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                iconCls: \"pimcore_icon_classificationstore\",\n                id: \"pimcore_object_classificationstore_configpanel\",\n                title: t(\"classification_store\"),\n                border: false,\n                layout: \"border\",\n                closable:true,\n                items: [this.getStoreTree(), this.getEditContainer()],\n                tbar: {\n                    cls: 'pimcore_toolbar_border_bottom',\n                    items: [\n                        {\n                            text: t('add'),\n                            handler: this.onAdd.bind(this),\n                            iconCls: \"pimcore_icon_add\"\n                        }\n                    ]\n                }\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_object_classificationstore_configpanel\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"classificationstore_config\");\n            }.bind(this));\n\n            this.panel.updateLayout();\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getEditContainer: function() {\n        this.editContainer = new Ext.TabPanel({\n            region: 'center',\n            layout: 'fit',\n            cls: \"pimcore-panel-header-no-border\",\n        });\n\n\n        return this.editContainer;\n    },\n\n    getTreeNodeListeners: function () {\n        var treeNodeListeners = {\n            'itemclick' : this.onTreeNodeClick.bind(this),\n            'itemcontextmenu': this.onTreeNodeContextmenu.bind(this)\n        };\n\n        return treeNodeListeners;\n    },\n\n    getStoreTree: function () {\n        if (!this.tree) {\n            this.treeStore = Ext.create('Ext.data.TreeStore', {\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_dataobject_classificationstore_storetree'),\n                    reader: {\n                        type: 'json'\n                    }\n                }\n            });\n\n            this.tree = Ext.create('Ext.tree.Panel', {\n                store: this.treeStore,\n                region: \"west\",\n                autoScroll:true,\n                animate:false,\n                containerScroll: true,\n                split:true,\n                width: 180,\n                rootVisible: false,\n                viewConfig: {\n                    listeners: {\n                        drop: function(node, data, overModel) {\n                            this.update(data.records[0].id, {parentId: overModel.id})\n                        }.bind(this)\n                    }\n                },\n                listeners: this.getTreeNodeListeners()\n            });\n        }\n        this.tree.getRootNode().expand();\n\n        return this.tree;\n    },\n\n\n    openStore: function(storeConfig) {\n        try {\n            if (storeConfig.id != this.activeStoreId) {\n                this.editContainer.removeAll();\n\n                this.editContainer.setTitle(storeConfig.text + \" (ID: \" + storeConfig.id + \")\");\n                var propertiesPanel = new pimcore.object.classificationstore.propertiespanel(storeConfig, this.editContainer);\n                var groupsPanel = new pimcore.object.classificationstore.groupsPanel(storeConfig, this.editContainer, propertiesPanel);\n                var collectionsPanel = new pimcore.object.classificationstore.collectionsPanel(storeConfig, groupsPanel).getPanel();\n\n\n                this.editContainer.add(collectionsPanel);\n                this.editContainer.add(groupsPanel.getPanel());\n                this.editContainer.add(propertiesPanel.getPanel());\n\n                this.editContainer.setActiveTab(collectionsPanel);\n\n                this.editContainer.updateLayout();\n                this.activeStoreId = storeConfig.id;\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    onTreeNodeClick: function (tree, record, item, index, e, eOpts ) {\n        if(!record.data.allowChildren && record.data.id > 0) {\n            this.openStore(record.data);\n        }\n    },\n\n    onTreeNodeContextmenu: function (tree, record, item, index, e, eOpts ) {\n        tree.select();\n\n        var user = pimcore.globalmanager.get(\"user\");\n\n        if(record.data.admin && !user.admin) {\n            // only admin users are allowed to manage admin users\n            return;\n        }\n\n        var menu = new Ext.menu.Menu();\n\n        menu.add(new Ext.menu.Item({\n            text: t('edit_configuration'),\n            iconCls: \"pimcore_icon_custom_views\",\n            listeners: {\n                \"click\": function() {\n                    var data = {\n                        id: record.data.id,\n                        name: record.data.text,\n                        description: record.data.description\n                    }\n                    var panel = new pimcore.object.classificationstore.storeConfiguration(data, this.applyConfig.bind(this));\n                    panel.show();\n                }.bind(this)\n            }\n        }));\n\n        menu.showAt(e.pageX, e.pageY);\n        e.stopEvent();\n\n    },\n\n    applyConfig: function(storeId, newData) {\n        Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_editstore'),\n                method: 'PUT',\n                params: {\n                    id: storeId,\n                    data: Ext.encode(newData)\n                },\n                success: function (response) {\n                    this.treeStore.reload();\n                }.bind(this)\n            }\n        );\n    },\n\n    addComplete: function (parentNode, transport) {\n        try{\n            var data = Ext.decode(transport.responseText);\n            if(data && data.success){\n                var tree = parentNode.getOwnerTree();\n                tree.getStore().reload({\n                    node: parentNode\n                });\n            } else {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"user_creation_error\"), \"error\",t(data.message));\n            }\n\n        } catch(e){\n            console.log(e);\n            pimcore.helpers.showNotification(t(\"error\"), t(\"user_creation_error\"), \"error\");\n        }\n    },\n\n    update: function (userId, values) {\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_user_update'),\n            method: \"PUT\",\n            params: {\n                id: userId,\n                data: Ext.encode(values)\n            },\n            success: function (transport) {\n                try{\n                    var res = Ext.decode(transport.responseText);\n                    if (res.success) {\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n                    } else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\",t(res.message));\n                    }\n                } catch(e){\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n                }\n            }.bind(this)\n        });\n    },\n\n    activate: function () {\n        Ext.getCmp(\"pimcore_panel_tabs\").setActiveItem(\"pimcore_object_classificationstore_configpanel\");\n    },\n\n    onAdd: function () {\n        Ext.MessageBox.prompt(t('classificationstore_mbx_enterstore_title'), t('classificationstore_mbx_enterstore_prompt'),\n            this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        value = value.trim();\n        if (button == \"ok\" && value.length > 1) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_createstore'),\n                method: 'POST',\n                params: {\n                    name: value\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    if (!data || !data.success) {\n                        Ext.Msg.alert(t(\"error\"), t(\"classificationstore_error_addstore_msg\"));\n                    } else {\n                        var storeId = data.storeId;\n\n                        this.treeStore.reload({\n                                callback: function () {\n                                    var record = this.treeStore.getById(storeId);\n                                    this.tree.getSelectionModel().select(record);\n                                    this.openStore(record.data);\n                                }.bind(this)\n                            }\n                        );\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t(\"classificationstore_configuration\"), t(\"classificationstore_invalidname\"));\n        }\n    }\n\n\n\n});\n\n\n\n\n\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\DataObject;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Db;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data\\LayoutDefinitionEnrichmentInterface;\nuse Pimcore\\Model\\DataObject\\Classificationstore;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/classificationstore\")\n *\n * @internal\n */\nclass ClassificationstoreController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * Delete collection with the group-relations\n     *\n     * @Route(\"/delete-collection\", name=\"pimcore_admin_dataobject_classificationstore_deletecollection\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCollectionAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $configRelations = new Classificationstore\\CollectionGroupRelation\\Listing();\n        $configRelations->setCondition('colId = ?', $id);\n        $list = $configRelations->load();\n        foreach ($list as $item) {\n            $item->delete();\n        }\n\n        $config = Classificationstore\\CollectionConfig::getById($id);\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-collection-relation\", name=\"pimcore_admin_dataobject_classificationstore_deletecollectionrelation\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCollectionRelationAction(Request $request)\n    {\n        $colId = $request->get('colId');\n        $groupId = $request->get('groupId');\n\n        $config = new Classificationstore\\CollectionGroupRelation();\n        $config->setColId($colId);\n        $config->setGroupId($groupId);\n\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-relation\", name=\"pimcore_admin_dataobject_classificationstore_deleterelation\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteRelationAction(Request $request)\n    {\n        $keyId = $request->get('keyId');\n        $groupId = $request->get('groupId');\n\n        $config = new Classificationstore\\KeyGroupRelation();\n        $config->setKeyId($keyId);\n        $config->setGroupId($groupId);\n\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-group\", name=\"pimcore_admin_dataobject_classificationstore_deletegroup\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteGroupAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $config = Classificationstore\\GroupConfig::getById($id);\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/create-group\", name=\"pimcore_admin_dataobject_classificationstore_creategroup\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createGroupAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n        $config = Classificationstore\\GroupConfig::getByName($name, $storeId);\n\n        if (!$config) {\n            $config = new Classificationstore\\GroupConfig();\n            $config->setStoreId($storeId);\n            $config->setName($name);\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n        } else {\n            return $this->adminJson(['success' => false, 'id' => $config->getName(), 'message' => 'classificationstore_error_group_exists_msg']);\n        }\n    }\n\n    /**\n     * @Route(\"/create-store\", name=\"pimcore_admin_dataobject_classificationstore_createstore\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function createStoreAction(Request $request)\n    {\n        $name = $request->get('name');\n\n        $config = Classificationstore\\StoreConfig::getByName($name);\n\n        if (!$config) {\n            $config = new Classificationstore\\StoreConfig();\n            $config->setName($name);\n            $config->save();\n        } else {\n            throw new \\Exception('Store with the given name exists');\n        }\n\n        return $this->adminJson(['success' => true, 'storeId' => $config->getId()]);\n    }\n\n    /**\n     * @Route(\"/create-collection\", name=\"pimcore_admin_dataobject_classificationstore_createcollection\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCollectionAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n        $config = Classificationstore\\CollectionConfig::getByName($name, $storeId);\n\n        if (!$config) {\n            $config = new Classificationstore\\CollectionConfig();\n            $config->setName($name);\n            $config->setStoreId($storeId);\n            $config->save();\n        }\n\n        return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n    }\n\n    /**\n     * @Route(\"/collections\", name=\"pimcore_admin_dataobject_classificationstore_collectionsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionsActionGet(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $start = 0;\n        $limit = $request->get('limit') ? $request->get('limit') : 15;\n\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        $storeIdFromDefinition = 0;\n        $allowedCollectionIds = [];\n        if ($request->get('oid')) {\n            $object = DataObject\\Concrete::getById($request->get('oid'));\n            $class = $object->getClass();\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n            $fd = $class->getFieldDefinition($request->get('fieldname'));\n            $allowedGroupIds = $fd->getAllowedGroupIds();\n\n            if ($allowedGroupIds) {\n                $db = \\Pimcore\\Db::get();\n                $query = 'select * from classificationstore_collectionrelations where groupId in (' . implode(',', $allowedGroupIds) .')';\n                $relationList = $db->fetchAll($query);\n\n                if (is_array($relationList)) {\n                    foreach ($relationList as $item) {\n                        $allowedCollectionIds[] = $item['colId'];\n                    }\n                }\n            }\n\n            $storeIdFromDefinition = $fd->getStoreId();\n        }\n\n        $list = new Classificationstore\\CollectionConfig\\Listing();\n\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n        $db = Db::get();\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        $storeId = $request->get('storeId');\n        $storeId = $storeId ? $storeId : $storeIdFromDefinition;\n\n        $conditionParts[] = ' (storeId = ' . $db->quote($storeId) . ')';\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if ($allowedCollectionIds) {\n            $conditionParts[] = ' id in (' . implode(',', $allowedCollectionIds) . ')';\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n\n        $list->setCondition($condition);\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $name = $config->getName();\n            if (!$name) {\n                $name = 'EMPTY';\n            }\n            $item = [\n                'storeId' => $config->getStoreId(),\n                'id' => $config->getId(),\n                'name' => $name,\n                'description' => $config->getDescription(),\n            ];\n            if ($config->getCreationDate()) {\n                $item['creationDate'] = $config->getCreationDate();\n            }\n\n            if ($config->getModificationDate()) {\n                $item['modificationDate'] = $config->getModificationDate();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/collections\", name=\"pimcore_admin_dataobject_classificationstore_collections\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\CollectionConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    $config->$setter($value);\n                }\n            }\n\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'data' => $config]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/groups\", name=\"pimcore_admin_dataobject_classificationstore_groupsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function groupsActionGet(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        if ($request->get('sort')) {\n            $orderKey = $request->get('sort');\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        $list = new Classificationstore\\GroupConfig\\Listing();\n\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n        $db = Db::get();\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        if ($request->get('storeId')) {\n            $conditionParts[] = '(storeId = ' . $db->quote($request->get('storeId')) . ')';\n        }\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if ($request->get('oid')) {\n            $object = DataObject\\Concrete::getById($request->get('oid'));\n            $class = $object->getClass();\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n            $fd = $class->getFieldDefinition($request->get('fieldname'));\n            $allowedGroupIds = $fd->getAllowedGroupIds();\n\n            if ($allowedGroupIds) {\n                $conditionParts[] = 'ID in (' . implode(',', $allowedGroupIds) . ')';\n            }\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $name = $config->getName();\n            if (!$name) {\n                $name = 'EMPTY';\n            }\n            $item = [\n                'storeId' => $config->getStoreId(),\n                'id' => $config->getId(),\n                'name' => $name,\n                'description' => $config->getDescription(),\n            ];\n            if ($config->getCreationDate()) {\n                $item['creationDate'] = $config->getCreationDate();\n            }\n\n            if ($config->getModificationDate()) {\n                $item['modificationDate'] = $config->getModificationDate();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/groups\", name=\"pimcore_admin_dataobject_classificationstore_groupsaction\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function groupsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\GroupConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    $config->$setter($value);\n                }\n            }\n\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'data' => $config]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/collection-relations\", name=\"pimcore_admin_dataobject_classificationstore_collectionrelationsget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionRelationsGetAction(Request $request)\n    {\n        $mapping = ['groupName' => 'name', 'groupDescription' => 'description'];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'sorter';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\CollectionGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n        $condition = '';\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n\n            $count = 0;\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                if ($count > 0) {\n                    $condition .= ' AND ';\n                }\n                $count++;\n                $fieldname = $mapping[$f->field];\n                $condition .= $db->quoteIdentifier($fieldname) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        $colId = $request->get('colId');\n        if ($condition) {\n            $condition = '( ' . $condition . ' ) AND';\n        }\n        $condition .= ' colId = ' . $list->quote($colId);\n\n        $list->setCondition($condition);\n\n        $listItems = $list->load();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($listItems as $config) {\n            $item = [\n                'colId' => $config->getColId(),\n                'groupId' => $config->getGroupId(),\n                'groupName' => $config->getName(),\n                'groupDescription' => $config->getDescription(),\n                'id' => $config->getColId() . '-' . $config->getGroupId(),\n                'sorter' => (int) $config->getSorter(),\n            ];\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/collection-relations\", name=\"pimcore_admin_dataobject_classificationstore_collectionrelations\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionRelationsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            if (count($data) == count($data, 1)) {\n                $data = [$data];\n            }\n\n            foreach ($data as &$row) {\n                $colId = $row['colId'];\n                $groupId = $row['groupId'];\n                $sorter = $row['sorter'];\n\n                $config = new Classificationstore\\CollectionGroupRelation();\n                $config->setGroupId($groupId);\n                $config->setColId($colId);\n                $config->setSorter((int) $sorter);\n\n                $config->save();\n\n                $row['id'] = $config->getColId() . '-' . $config->getGroupId();\n            }\n\n            return $this->adminJson(['success' => true, 'data' => $data]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/list-stores\", name=\"pimcore_admin_dataobject_classificationstore_liststores\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function listStoresAction()\n    {\n        $storeConfigs = [];\n        $storeConfigListing = new Classificationstore\\StoreConfig\\Listing();\n        $storeConfigListing->load();\n\n        foreach ($storeConfigListing as $storeConfig) {\n            $storeConfigs[] = $storeConfig->getObjectVars();\n        }\n\n        return $this->adminJson($storeConfigs);\n    }\n\n    /**\n     * @Route(\"/search-relations\", name=\"pimcore_admin_dataobject_classificationstore_searchrelations\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchRelationsAction(Request $request)\n    {\n        $db = Db::get();\n\n        $storeId = $request->get('storeId');\n\n        $mapping = [\n            'groupName' => DataObject\\Classificationstore\\GroupConfig\\Dao::TABLE_NAME_GROUPS .'.name',\n            'keyName' => DataObject\\Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS .'.name',\n            'keyDescription' => DataObject\\Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS. '.description',\n        ];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            if ($orderKey == 'keyName') {\n                $orderKey = 'name';\n            }\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $fieldname = $mapping[$f->property];\n                $conditionParts[] = $fieldname . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        $conditionParts[] = '  groupId IN (select id from classificationstore_groups where storeId = ' . $db->quote($storeId) . ')';\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '('\n                . Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS . '.name LIKE ' . $db->quote('%' . $searchfilter . '%')\n                . ' OR ' . Classificationstore\\GroupConfig\\Dao::TABLE_NAME_GROUPS . '.name LIKE ' . $db->quote('%' . $searchfilter . '%')\n                . ' OR ' . Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS . '.description LIKE ' . $db->quote('%' . $searchfilter . '%') . ')';\n        }\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n        $list->setResolveGroupName(1);\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($list->getList() as $config) {\n            $item = [\n                'keyId' => $config->getKeyId(),\n                'groupId' => $config->getGroupId(),\n                'keyName' => $config->getName(),\n                'keyDescription' => $config->getDescription(),\n                'id' => $config->getGroupId() . '-' . $config->getKeyId(),\n                'sorter' => $config->getSorter(),\n            ];\n\n            $groupConfig = Classificationstore\\GroupConfig::getById($config->getGroupId());\n            if ($groupConfig) {\n                $item['groupName'] = $groupConfig->getName();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/relations\", name=\"pimcore_admin_dataobject_classificationstore_relationsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function relationsActionGet(Request $request)\n    {\n        $mapping = ['keyName' => 'name', 'keyDescription' => 'description'];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n        $relationIds = $request->get('relationIds');\n\n        if ($relationIds) {\n            $relationIds = json_decode($relationIds, true);\n        }\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        } elseif (is_array($relationIds)) {\n            $limit = count($relationIds);\n        }\n\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n        $conditionParts = [];\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $fieldname = $mapping[$f->field];\n                $conditionParts[] = $db->quoteIdentifier($fieldname) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if (!$request->get('relationIds')) {\n            $groupId = $request->get('groupId');\n            $conditionParts[] = ' groupId = ' . $list->quote($groupId);\n        }\n\n        if ($relationIds) {\n            $relationParts = [];\n\n            foreach ($relationIds as $relationId) {\n                $keyId = $relationId['keyId'];\n                $groupId = $relationId['groupId'];\n                $relationParts[] = '(keyId = ' . $list->quote($keyId) . ' AND groupId = ' . $list->quote($groupId) . ')';\n            }\n\n            $conditionParts[] = '(' . implode(' OR ', $relationParts) . ')';\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n\n        $list->setCondition($condition);\n\n        $listItems = $list->load();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($listItems as $config) {\n            $type = $config->getType();\n            $definition = json_decode($config->getDefinition());\n            $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n            DataObject\\Service::enrichLayoutDefinition($definition);\n\n            $item = [\n                'keyId' => $config->getKeyId(),\n                'groupId' => $config->getGroupId(),\n                'keyName' => $config->getName(),\n                'keyDescription' => $config->getDescription(),\n                'id' => $config->getGroupId() . '-' . $config->getKeyId(),\n                'sorter' => (int) $config->getSorter(),\n                'layout' => $definition,\n                'mandatory' => $config->isMandatory(),\n            ];\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/relations\", name=\"pimcore_admin_dataobject_classificationstore_relations\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function relationsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $keyId = $data['keyId'];\n            $groupId = $data['groupId'];\n            $sorter = $data['sorter'];\n            $mandatory = $data['mandatory'];\n\n            $config = new Classificationstore\\KeyGroupRelation();\n            $config->setGroupId($groupId);\n            $config->setKeyId($keyId);\n            $config->setSorter($sorter);\n            $config->setMandatory($mandatory);\n\n            $config->save();\n            $data['id'] = $config->getGroupId() . '-' . $config->getKeyId();\n\n            return $this->adminJson(['success' => true, 'data' => $data]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/add-collections\", name=\"pimcore_admin_dataobject_classificationstore_addcollections\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addCollectionsAction(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $ids = $this->decodeJson($request->get('collectionIds'));\n        $oid = $request->get('oid');\n        $object = DataObject\\Concrete::getById($oid);\n        $fieldname = $request->get('fieldname');\n        $data = [];\n\n        if ($ids) {\n            $db = \\Pimcore\\Db::get();\n            $mappedData = [];\n            $groupsData = $db->fetchAll('select * from classificationstore_groups g, classificationstore_collectionrelations c where colId IN (:ids) and g.id = c.groupId', [\n                'ids' => implode(',', array_filter($ids, 'intval')),\n            ]);\n\n            foreach ($groupsData as $groupData) {\n                $mappedData[$groupData['id']] = $groupData;\n            }\n\n            $groupIdList = [];\n            $groupId = null;\n\n            $allowedGroupIds = null;\n\n            if ($request->get('oid')) {\n                $object = DataObject\\Concrete::getById($request->get('oid'));\n                $class = $object->getClass();\n                /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n                $fd = $class->getFieldDefinition($request->get('fieldname'));\n                $allowedGroupIds = $fd->getAllowedGroupIds();\n            }\n\n            foreach ($groupsData as $groupItem) {\n                $groupId = $groupItem['groupId'];\n                if (!$allowedGroupIds || in_array($groupId, $allowedGroupIds)) {\n                    $groupIdList[] = $groupId;\n                }\n            }\n\n            if ($groupIdList) {\n                $groupList = new Classificationstore\\GroupConfig\\Listing();\n                $groupCondition = 'id in (' . implode(',', $groupIdList) . ')';\n                $groupList->setCondition($groupCondition);\n\n                $groupList = $groupList->load();\n\n                $keyCondition = 'groupId in (' . implode(',', $groupIdList) . ')';\n\n                $keyList = new Classificationstore\\KeyGroupRelation\\Listing();\n                $keyList->setCondition($keyCondition);\n                $keyList->setOrderKey(['sorter', 'id']);\n                $keyList->setOrder(['ASC', 'ASC']);\n                $keyList = $keyList->load();\n\n                foreach ($groupList as $groupData) {\n                    $data[$groupData->getId()] = [\n                        'name' => $groupData->getName(),\n                        'id' => $groupData->getId(),\n                        'description' => $groupData->getDescription(),\n                        'keys' => [],\n                        'sorter' => intval($mappedData[$groupData->getId()]['sorter']),\n                        'collectionId' => $mappedData[$groupId]['colId'],\n                    ];\n                }\n\n                foreach ($keyList as $keyData) {\n                    $groupId = $keyData->getGroupId();\n\n                    $keyList = $data[$groupId]['keys'];\n                    $type = $keyData->getType();\n                    $definition = json_decode($keyData->getDefinition());\n                    $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n                    if (method_exists($definition, '__wakeup')) {\n                        $definition->__wakeup();\n                    }\n\n                    $context['object'] = $object;\n                    $context['class'] = $object ? $object->getClass() : null;\n                    $context['ownerType'] = 'classificationstore';\n                    $context['ownerName'] = $fieldname;\n                    $context['keyId'] = $keyData->getKeyId();\n                    $context['groupId'] = $groupId;\n                    $context['keyDefinition'] = $definition;\n\n                    //TODO Pimcore 11: remove method_exists BC layer\n                    if ($definition instanceof LayoutDefinitionEnrichmentInterface || method_exists($definition, 'enrichLayoutDefinition')) {\n                        if (!$definition instanceof LayoutDefinitionEnrichmentInterface) {\n                            trigger_deprecation('pimcore/pimcore', '10.1',\n                                'Usage of method_exists is deprecated since version 10.1 and will be removed in Pimcore 11.' .\n                                'Implement the %s interface instead.', LayoutDefinitionEnrichmentInterface::class);\n                        }\n                        $definition = $definition->enrichLayoutDefinition($object, $context);\n                    }\n\n                    $keyList[] = [\n                        'name' => $keyData->getName(),\n                        'id' => $keyData->getKeyId(),\n                        'description' => $keyData->getDescription(),\n                        'definition' => $definition,\n                    ];\n                    $data[$groupId]['keys'] = $keyList;\n                }\n            }\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/add-groups\", name=\"pimcore_admin_dataobject_classificationstore_addgroups\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addGroupsAction(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $ids = $this->decodeJson($request->get('groupIds'));\n        $oid = $request->get('oid');\n        $object = DataObject\\Concrete::getById($oid);\n        $fieldname = $request->get('fieldname');\n\n        $keyCondition = 'groupId in (' . implode(',', array_fill(0, count($ids), '?')) . ')';\n\n        $keyList = new Classificationstore\\KeyGroupRelation\\Listing();\n        $keyList->setCondition($keyCondition, $ids);\n        $keyList->setOrderKey(['sorter', 'id']);\n        $keyList->setOrder(['ASC', 'ASC']);\n        $keyList = $keyList->load();\n\n        $groupCondition = 'id in (' . implode(',', array_fill(0, count($ids), '?')) . ')';\n\n        $groupList = new Classificationstore\\GroupConfig\\Listing();\n        $groupList->setCondition($groupCondition, $ids);\n        $groupList->setOrder('ASC');\n        $groupList->setOrderKey('id');\n        $groupList = $groupList->load();\n\n        $data = [];\n\n        foreach ($groupList as $groupData) {\n            $data[$groupData->getId()] = [\n                'name' => $groupData->getName(),\n                'id' => $groupData->getId(),\n                'description' => $groupData->getDescription(),\n                'keys' => [],\n            ];\n        }\n\n        foreach ($keyList as $keyData) {\n            $groupId = $keyData->getGroupId();\n\n            $keyList = $data[$groupId]['keys'];\n            $type = $keyData->getType();\n            $definition = json_decode($keyData->getDefinition());\n            $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n            if (method_exists($definition, '__wakeup')) {\n                $definition->__wakeup();\n            }\n\n            $context['object'] = $object;\n            $context['class'] = $object ? $object->getClass() : null;\n            $context['ownerType'] = 'classificationstore';\n            $context['ownerName'] = $fieldname;\n            $context['keyId'] = $keyData->getKeyId();\n            $context['groupId'] = $groupId;\n            $context['keyDefinition'] = $definition;\n\n            //TODO Pimcore 11: remove method_exists BC layer\n            if ($definition instanceof LayoutDefinitionEnrichmentInterface || method_exists($definition, 'enrichLayoutDefinition')) {\n                if (!$definition instanceof LayoutDefinitionEnrichmentInterface) {\n                    trigger_deprecation('pimcore/pimcore', '10.1',\n                        sprintf('Usage of method_exists is deprecated since version 10.1 and will be removed in Pimcore 11.' .\n                        'Implement the %s interface instead.', LayoutDefinitionEnrichmentInterface::class));\n                }\n                $definition = $definition->enrichLayoutDefinition($object, $context);\n            }\n\n            $keyList[] = [\n                'name' => $keyData->getName(),\n                'id' => $keyData->getKeyId(),\n                'description' => $keyData->getDescription(),\n                'definition' => $definition,\n            ];\n            $data[$groupId]['keys'] = $keyList;\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_dataobject_classificationstore_propertiesget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesGetAction(Request $request)\n    {\n        $storeId = $request->get('storeId');\n        $frameName = $request->get('frameName');\n        $db = \\Pimcore\\Db::get();\n\n        $conditionParts = [];\n\n        if ($frameName) {\n            $keyCriteria = ' FALSE ';\n            $frameConfig = Classificationstore\\CollectionConfig::getByName($frameName, $storeId);\n            if ($frameConfig) {\n                // get all keys within that collection / frame\n                $frameId = $frameConfig->getId();\n                $groupList = new Classificationstore\\CollectionGroupRelation\\Listing();\n                $groupList->setCondition('colId = ' . $db->quote($frameId));\n                $groupList = $groupList->load();\n                $groupIdList = [];\n                foreach ($groupList as $groupEntry) {\n                    $groupIdList[] = $groupEntry->getGroupId();\n                }\n\n                if ($groupIdList) {\n                    $keyIdList = new Classificationstore\\KeyGroupRelation\\Listing();\n                    $keyIdList->setCondition('groupId in (' . implode(',', $groupIdList) . ')');\n                    $keyIdList = $keyIdList->load();\n                    if ($keyIdList) {\n                        $keyIds = [];\n                        foreach ($keyIdList as $keyEntry) {\n                            $keyIds[] = $keyEntry->getKeyId();\n                        }\n\n                        $keyCriteria = ' id in (' . implode(',', $keyIds) . ')';\n                    }\n                }\n            }\n\n            $conditionParts[] = $keyCriteria;\n        }\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyConfig\\Listing();\n\n        if ($limit > 0 && !$request->get('groupIds') && !$request->get('keyIds')) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        if ($storeId) {\n            $conditionParts[] = '(storeId = ' . $storeId . ')';\n        }\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n\n        if ($request->get('groupIds') || $request->get('keyIds')) {\n            $db = Db::get();\n\n            if ($request->get('groupIds')) {\n                $ids = $this->decodeJson($request->get('groupIds'));\n                $col = 'group';\n            } else {\n                $ids = $this->decodeJson($request->get('keyIds'));\n                $col = 'id';\n            }\n\n            $condition = $db->quoteIdentifier($col) . ' IN (';\n            $count = 0;\n            foreach ($ids as $theId) {\n                if ($count > 0) {\n                    $condition .= ',';\n                }\n                $condition .= $theId;\n                $count++;\n            }\n\n            $condition .= ')';\n            $list->setCondition($condition);\n        }\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $item = $this->getConfigItem($config);\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_dataobject_classificationstore_properties\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\KeyConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    if (method_exists($config, $setter)) {\n                        $config->$setter($value);\n                    }\n                }\n            }\n\n            $config->save();\n            $item = $this->getConfigItem($config);\n\n            return $this->adminJson(['success' => true, 'data' => $item]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param Classificationstore\\KeyConfig $config\n     *\n     * @return array\n     */\n    protected function getConfigItem($config)\n    {\n        $name = $config->getName();\n\n        $groupDescription = null;\n        $item = [\n            'storeId' => $config->getStoreId(),\n            'id' => $config->getId(),\n            'name' => $name,\n            'description' => $config->getDescription(),\n            'type' => $config->getType() ? $config->getType() : 'input',\n            'definition' => $config->getDefinition(),\n        ];\n\n        if ($config->getDefinition()) {\n            $definition = json_decode($config->getDefinition(), true);\n            if ($definition) {\n                $item['title'] = $definition['title'];\n            }\n        }\n\n        if ($config->getCreationDate()) {\n            $item['creationDate'] = $config->getCreationDate();\n        }\n\n        if ($config->getModificationDate()) {\n            $item['modificationDate'] = $config->getModificationDate();\n        }\n\n        return $item;\n    }\n\n    /**\n     * @Route(\"/add-property\", name=\"pimcore_admin_dataobject_classificationstore_addproperty\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addPropertyAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n\n        $definition = [\n            'fieldtype' => 'input',\n            'name' => $name,\n            'title' => $name,\n            'datatype' => 'data',\n        ];\n        $config = new Classificationstore\\KeyConfig();\n        $config->setName($name);\n        $config->setTitle($name);\n        $config->setType('input');\n        $config->setStoreId($storeId);\n        $config->setEnabled(1);\n        $config->setDefinition(json_encode($definition));\n        $config->save();\n\n        return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete-property\", name=\"pimcore_admin_dataobject_classificationstore_deleteproperty\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deletePropertyAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $config = Classificationstore\\KeyConfig::getById($id);\n        //        $config->delete();\n        $config->setEnabled(false);\n        $config->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/edit-store\", name=\"pimcore_admin_dataobject_classificationstore_editstore\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function editStoreAction(Request $request)\n    {\n        $id = $request->get('id');\n        $data = json_decode($request->get('data'), true);\n\n        $name = $data['name'];\n        if (!$name) {\n            throw new \\Exception('Name must not be empty');\n        }\n\n        $description = $data['description'];\n\n        $config = Classificationstore\\StoreConfig::getByName($name);\n        if ($config && $config->getId() != $id) {\n            throw new \\Exception('There is already a config with the same name');\n        }\n\n        $config = Classificationstore\\StoreConfig::getById($id);\n\n        if (!$config) {\n            throw new \\Exception('Configuration does not exist');\n        }\n\n        $config->setName($name);\n        $config->setDescription($description);\n        $config->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/storetree\", name=\"pimcore_admin_dataobject_classificationstore_storetree\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function storetreeAction(Request $request)\n    {\n        $result = [];\n        $list = new Classificationstore\\StoreConfig\\Listing();\n        $list = $list->load();\n        foreach ($list as $item) {\n            $resultItem = [\n                'id' => $item->getId(),\n                'text' => htmlspecialchars($item->getName(), ENT_QUOTES),\n                'expandable' => false,\n                'leaf' => true,\n                'expanded' => true,\n                'description' => htmlspecialchars($item->getDescription(), ENT_QUOTES),\n                'iconCls' => 'pimcore_icon_classificationstore',\n            ];\n\n            $resultItem['qtitle'] = 'ID: ' . $item->getId();\n\n            if ($item->getDescription()) {\n            }\n            $resultItem['qtip'] = $item->getDescription() ? htmlspecialchars($item->getDescription(), ENT_QUOTES) : ' ';\n            $result[] = $resultItem;\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-page\", name=\"pimcore_admin_dataobject_classificationstore_getpage\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPageAction(Request $request)\n    {\n        $tableSuffix = $request->get('table');\n        if (!in_arrayi($tableSuffix, ['keys', 'groups'])) {\n            $tableSuffix = 'keys';\n        }\n\n        $table = 'classificationstore_' . $tableSuffix;\n        $db = \\Pimcore\\Db::get();\n        $id = (int) $request->get('id');\n        $storeId = (int) $request->get('storeId');\n        $pageSize = (int) $request->get('pageSize');\n\n        if ($request->get('sortKey')) {\n            $sortKey = $request->get('sortKey');\n            $sortDir = $request->get('sortDir');\n        } else {\n            $sortKey = 'name';\n            $sortDir = 'ASC';\n        }\n\n        if (!in_arrayi($sortDir, ['DESC', 'ASC'])) {\n            $sortDir = 'DESC';\n        }\n\n        if (!in_arrayi($sortKey, ['name', 'title', 'description', 'id', 'type', 'creationDate', 'modificationDate', 'enabled', 'parentId', 'storeId'])) {\n            $sortKey = 'name';\n        }\n\n        $sorter = ' order by `' . $sortKey .  '` ' . $sortDir;\n\n        if ($table == 'keys') {\n            $query = '\n                select *, (item.pos - 1)/ ' . $pageSize . ' + 1  as page from (\n                    select * from (\n                        select @rownum := @rownum + 1 as pos,  id, name, `type`\n                        from `' . $table . '`\n                        where enabled = 1 and storeId = ' . $storeId . $sorter . '\n                      ) all_rows) item where id = ' . $id . ';';\n        } else {\n            $query = '\n            select *, (item.pos - 1)/ ' . $pageSize . ' + 1  as page from (\n                select * from (\n                    select @rownum := @rownum + 1 as pos,  id, name\n                    from `' . $table . '`\n                    where storeId = ' . $storeId . $sorter . '\n                  ) all_rows) item where id = ' .  $id . ';';\n        }\n\n        $db->query('select @rownum := 0;');\n        $result = $db->fetchAll($query);\n\n        $page = (int) $result[0]['page'] ;\n\n        return $this->adminJson(['success' => true, 'page' => $page]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        $unrestrictedActions = ['collectionsActionGet', 'groupsActionGet', 'relationsActionGet', 'addGroupsAction', 'addCollectionsAction', 'searchRelationsAction'];\n        $this->checkActionPermission($event, 'classes', $unrestrictedActions);\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.helpers.grid = {};\n\npimcore.helpers.grid.buildDefaultStore = function (url, fields, itemsPerPage, customConfig) {\n\n    if (url.indexOf('?') === -1) {\n        url = url + \"?\";\n    } else {\n        url = url + \"&\";\n    }\n\n    var proxy = new Ext.data.proxy.Ajax({\n        timeout: 120000,\n        batchActions: false,\n        type: 'ajax',\n        reader: {\n            type: 'json',\n            rootProperty: 'data'\n        },\n        writer: {\n            type: 'json',\n            writeAllFields: true,\n            rootProperty: 'data',\n            encode: 'true'\n        },\n        api: {\n            create: url + \"xaction=create\",\n            read: url + \"xaction=read\",\n            update: url + \"xaction=update\",\n            destroy: url + \"xaction=destroy\"\n        },\n        actionMethods: {\n            create: 'POST',\n            read: 'POST',\n            update: 'POST',\n            destroy: 'POST'\n        }/*,\n        listeners: {\n            exception: function(proxy, response, operation){\n                Ext.MessageBox.show({\n                    title: 'REMOTE EXCEPTION',\n                    msg: operation.getError(),\n                    icon: Ext.MessageBox.ERROR,\n                    buttons: Ext.Msg.OK\n                });\n            }\n        }*/\n    });\n\n    var config = {\n        proxy: proxy,\n        autoLoad: true,\n        autoSync: true,\n        pageSize: itemsPerPage,\n        fields: fields,\n        remoteSort: true,\n        remoteFilter: true\n    };\n\n    if (customConfig) {\n        Ext.apply(config, customConfig);\n    }\n\n    var store = Ext.create('Ext.data.Store', config);\n\n    return store;\n};\n\n\npimcore.helpers.grid.getDefaultPageSize = function (scale) {\n    if (scale < 0) {\n        return 25;\n    }\n    return 50;\n};\n\npimcore.helpers.grid.buildDefaultPagingToolbar = function (store, options) {\n    var config = {\n        pageSize: pimcore.helpers.grid.getDefaultPageSize(),\n        store: store,\n        displayInfo: true,\n        displayMsg: '{0} - {1} / {2}',\n        emptyMsg: t(\"no_items_found\")\n    };\n    if (typeof options !== \"undefined\") {\n        config = Ext.applyIf(options, config);\n    }\n    var pagingtoolbar = Ext.create('Ext.PagingToolbar', config);\n\n    if (!config.hideSelection) {\n        // add per-page selection\n        pagingtoolbar.add(\"-\");\n\n        pagingtoolbar.add(Ext.create('Ext.Toolbar.TextItem', {\n            text: t(\"items_per_page\")\n        }));\n        pagingtoolbar.add(Ext.create('Ext.form.ComboBox', {\n            store: [\n                [25, \"25\"],\n                [50, \"50\"],\n                [100, \"100\"],\n                [200, \"200\"],\n                [999999, t(\"all\")]\n            ],\n            mode: \"local\",\n            width: 80,\n            value: config.pageSize,\n            triggerAction: \"all\",\n            editable: true,\n            listeners: {\n                change: function (box, newValue, oldValue) {\n                    var store = this.getStore();\n                    newValue = intval(newValue);\n                    if (!newValue) {\n                        newValue = options.pageSize;\n                    }\n                    store.setPageSize(newValue);\n                    this.pageSize = newValue;\n                    this.moveFirst();\n                }.bind(pagingtoolbar)\n            }\n        }));\n    }\n\n    return pagingtoolbar;\n};\n\npimcore.helpers.grid.getTranslationColumnRenderer = function (value, metaData, record, rowIndex, colIndex, store) {\n    return Ext.util.Format.htmlEncode(t(value));\n};\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classificationstore.collectionsPanel\");\npimcore.object.classificationstore.collectionsPanel = Class.create({\n\n    initialize: function (storeConfig, groupsPanel) {\n        this.groupsPanel = groupsPanel;\n        this.storeConfig = storeConfig;\n    },\n\n    getPanel: function () {\n        if (this.layout == null) {\n            this.layout = new Ext.Panel({\n                title: t(\"classificationstore_collection_definition\"),\n                iconCls: \"pimcore_icon_classificationstore_icon_cs_collections\",\n                border: false,\n                layout: \"border\",\n                items: [\n                    this.createCollectionsGrid(),\n                    this.createRelationsGrid()\n                ],\n                viewConfig: {\n                    forceFit: true\n                }\n\n            });\n        }\n\n        return this.layout;\n    },\n\n\n    createRelationsGrid: function() {\n        this.relationsFields = ['id', 'colId', 'groupId', 'groupName', 'groupDescription', 'sorter'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.relationsFields.length; i++) {\n            var columnConfig = {name: this.relationsFields[i]};\n            if (this.relationsFields[i] == \"sorter\" || this.relationsFields[i] == \"groupId\") {\n                columnConfig[\"type\"] = \"int\";\n            }\n            readerFields.push(columnConfig);\n        }\n\n        var route = 'pimcore_admin_dataobject_classificationstore_collectionrelations';\n        var proxy = {\n            batchActions: false,\n            type: 'ajax',\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            },\n            api: {\n                create  : Routing.generate(route, {'xaction': 'create'}),\n                read    : Routing.generate(route, {'xaction': 'read'}),\n                update  : Routing.generate(route, {'xaction': 'update'}),\n                destroy : Routing.generate(route, {'xaction': 'destroy'})\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n        };\n\n        var listeners = {};\n\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), response);\n                this.collectionsStore.rejectChanges();\n            }\n        }.bind(this);\n\n        this.relationsStore = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners\n        });\n\n        var gridColumns = [];\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            text: t(\"open\"),\n            menuText: t(\"open\"),\n            width: 40,\n            items: [\n                {\n                    tooltip: t(\"open\"),\n                    iconCls: \"pimcore_icon_open\",\n                    handler: function (grid, rowIndex) {\n                        var store = grid.getStore();\n                        var data = store.getAt(rowIndex).getData();\n                        var groupId = data.groupId;\n                        this.groupsPanel.openConfig(groupId);\n                    }.bind(this)\n                }\n            ]\n        });\n\n        gridColumns.push({text: t(\"group_id\"), flex: 60, sortable: true, dataIndex: 'groupId', filter: 'string'});\n        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'groupName', filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n        gridColumns.push({text: t(\"description\"), flex: 200, sortable: true, dataIndex: 'groupDescription', filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n\n        gridColumns.push({text: t('sorter'), width: 150, sortable: true, dataIndex: 'sorter',\n            tooltip: t(\"classificationstore_tooltip_sorter\"),\n            editor: new Ext.form.NumberField()\n        });\n\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            hideable: false,\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var colId = data.data.colId;\n                        var groupId = data.data.groupId;\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deletecollectionrelation'),\n                            method: 'DELETE',\n                            params: {\n                                colId: colId,\n                                groupId: groupId\n                            },\n                            success: function (response) {\n                                this.relationsStore.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.relationsPagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.relationsStore, {pageSize: pageSize});\n\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 2\n        });\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.relationsStore,\n            //border: true,\n            columns: gridColumns,\n            bodyCls: \"pimcore_editable_grid\",\n            loadMask: true,\n            columnLines: true,\n            plugins: plugins,\n            stripeRows: true,\n            trackMouseOver: true,\n            region: \"west\",\n            split: true,\n            hidden: true,\n            viewConfig: {\n                forceFit: true\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.relationsPagingtoolbar,\n            tbar: [\n\n                {\n                    text: t('add'),\n                    handler: this.onAddGroup.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ]\n        } ;\n\n        this.relationsGrid = Ext.create('Ext.grid.Panel', gridConfig);\n\n        this.relationsPanel = new Ext.Panel({\n            title: t(\"relations\"),\n            border: false,\n            layout: \"fit\",\n            region: \"center\",\n            split: true,\n            disabled: true,\n            items: [\n                this.relationsGrid\n            ]\n\n        });\n\n        return this.relationsPanel;\n    },\n\n\n    createCollectionsGrid: function(response) {\n        this.groupsFields = ['storeId','id', 'name', 'description', 'creationDate', 'modificationDate'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.groupsFields.length; i++) {\n            readerFields.push({name: this.groupsFields[i]});\n        }\n\n        var proxy = {\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_collectionsactionget'),\n            batchActions: false,\n            type: 'ajax',\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n        };\n\n        var listeners = {};\n\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), t('cannot_save_object_please_try_to_edit_the_object_in_detail_view'));\n                this.collectionsStore.rejectChanges();\n            }\n        }.bind(this);\n\n\n        this.collectionsStore = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners,\n            remoteFilter: true,\n            remoteSort: true\n        });\n\n\n        var gridColumns = [];\n\n        //gridColumns.push({text: t(\"store\"), flex: 60, sortable: true, dataIndex: 'storeId', filter: 'string'});\n        gridColumns.push({text: \"ID\", flex: 60, sortable: true, dataIndex: 'id', filter: 'string'});\n        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({}), filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n        gridColumns.push({text: t(\"description\"), flex: 300, sortable: true, dataIndex: 'description', editor: new Ext.form.TextField({}), filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n\n        var dateRenderer =  function(d) {\n            if (d !== undefined) {\n                var date = new Date(d * 1000);\n                return Ext.Date.format(date, \"Y-m-d H:i:s\");\n            } else {\n                return \"\";\n            }\n        };\n\n\n        gridColumns.push(\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer            }\n        );\n\n        gridColumns.push(\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer\n            }\n        );\n\n        gridColumns.push({\n            hideable: false,\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var id = data.data.id;\n\n                        this.relationsStore.removeAll(true);\n                        this.relationsGrid.hide();\n                        this.relationsPanel.disable();\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deletecollection'),\n                            method: 'DELETE',\n                            params: {\n                                id: id\n                            },\n                            success: function (response) {\n                                this.collectionsStore.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.collectionsPagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.collectionsStore, {pageSize: pageSize});\n\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {});\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.collectionsStore,\n            columns: gridColumns,\n            loadMask: true,\n            columnLines: true,\n            bodyCls: \"pimcore_editable_grid\",\n            stripeRows: true,\n            trackMouseOver: true,\n            plugins: plugins,\n            region: \"west\",\n            split: true,\n            width: 600,\n            viewConfig: {\n                forceFit: true\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.collectionsPagingtoolbar,\n            tbar: [\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ],\n            listeners: {\n                selectionchange: function(rowModel, selected, eOpts ) {\n                    if (selected.length > 0) {\n                        var record = selected[0];\n                        var collectionId = record.data.id;\n                        var collectionName = Ext.util.Format.htmlEncode(record.data.name);\n\n                        this.collectionId = collectionId;\n\n                        this.relationsPanel.setTitle(t(\"relations\") + \" - \" + t(\"collection\") + \" \" + record.data.id + \" - \" + collectionName);\n                        this.relationsPanel.enable();\n                        var proxy = this.relationsStore.getProxy();\n                        proxy.setExtraParam(\"colId\", collectionId);\n                        this.relationsStore.reload();\n                        this.relationsGrid.show();\n                    }\n\n                }.bind(this)\n            }\n        } ;\n\n        this.grid = Ext.create('Ext.grid.Panel', gridConfig);\n\n        return this.grid\n    },\n\n\n    onAddGroup: function() {\n        var keySelectionWindow = new pimcore.object.classificationstore.keySelectionWindow(\n            {\n                parent: this,\n                enableGroups: true,\n                storeId: this.storeConfig.id\n            });\n\n        keySelectionWindow.show();\n    },\n\n    onAdd: function () {\n        Ext.MessageBox.prompt(t('classificationstore_mbx_entercollection_title'), t('classificationstore_mbx_entergroup_prompt'),\n            this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        value = value.trim();\n        if (button == \"ok\" && value.length > 1) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_createcollection'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    storeId: this.storeConfig.id\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t(\"error\"), t(\"classificationstore_error_addcollection_msg\"));\n                    } else {\n                        this.collectionsStore.reload({\n                                callback: function() {\n                                    var rowIndex = this.collectionsStore.find('name', value);\n                                    if (rowIndex != -1) {\n                                        var sm = this.grid.getSelectionModel();\n                                        sm.select(rowIndex);\n                                    }\n\n                                    var lastOptions = this.collectionsStore.lastOptions;\n                                    Ext.apply(lastOptions.params, {\n                                        overrideSort: \"false\"\n                                    });\n                                }.bind(this),\n                                params: {\n                                    \"overrideSort\": \"true\"\n                                }\n                            }\n                        );\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t(\"classificationstore_configuration\"), t(\"classificationstore_invalidname\"));\n        }\n    },\n\n\n    handleSelectionWindowClosed: function() {\n\n    },\n\n    handleAddGroups: function (response) {\n        var data = Ext.decode(response.responseText);\n\n        if(data) {\n            for (groupId in data) {\n                if (data.hasOwnProperty(groupId)) {\n                    var groupDef = data[groupId];\n\n                    var colData = {};\n                    colData.groupId = groupDef.id;\n                    colData.groupName = groupDef.name;\n                    colData.gropDescription = groupDef.description;\n                    colData.storeId = this.storeConfig.id;\n                    colData.colId = this.collectionId;\n                    var tmpId = this.collectionId + \"-\" + colData.groupId;\n\n                    var match = this.relationsStore.findExact(\"id\", tmpId);\n                    if (match == -1) {\n                        this.relationsStore.add(colData);\n                    }\n                }\n            }\n        }\n    },\n\n    requestPending: function() {\n        // nothing to do\n    }\n\n});\n\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classificationstore.groupsPanel\");\npimcore.object.classificationstore.groupsPanel = Class.create({\n\n    initialize: function (storeConfig, container, propertiesPanel) {\n        this.storeConfig = storeConfig;\n        this.propertiesPanel = propertiesPanel;\n        this.container = container;\n    },\n\n    getPanel: function () {\n        if (this.layout == null) {\n            this.layout = new Ext.Panel({\n                title: t(\"classificationstore_group_definition\"),\n                iconCls: \"pimcore_icon_keys\",\n                border: false,\n                layout: \"border\",\n                items: [\n                    this.createGroupsGrid(),\n                    this.createRelationsGrid()\n                ]\n\n            });\n        }\n\n        return this.layout;\n    },\n\n\n    createRelationsGrid: function() {\n        this.relationsFields = ['id', 'keyId', 'groupId', 'keyName', 'keyDescription', 'sorter'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.relationsFields.length; i++) {\n            var columnConfig = {name: this.relationsFields[i], type: 'string'};\n            if (this.relationsFields[i] == \"sorter\" || this.relationsFields[i] == \"keyId\") {\n                columnConfig[\"type\"] = \"int\";\n            }\n            readerFields.push(columnConfig);\n        }\n\n        readerFields.push({name: 'mandatory', type: 'bool'});\n\n        var proxy = {\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_relationsactionget'),\n            type: 'ajax',\n            batchActions: false,\n            reader: {\n                type: 'json',\n                rootProperty: 'data',\n                idProperty: 'id'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n        };\n\n        var listeners = {};\n\n        listeners.write = function(store, action, result, response, rs) {};\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), response);\n                this.relationsStore.rejectChanges();\n            }\n        }.bind(this);\n\n        this.relationsStore = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners\n        });\n\n        var gridColumns = [];\n\n        var mandatoryCheck = new Ext.grid.column.Check({\n            text: t(\"mandatory\"),\n            dataIndex: \"mandatory\",\n            width: 50\n        });\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            text: t(\"open\"),\n            menuText: t(\"open\"),\n            width: 40,\n            items: [\n                {\n                    tooltip: t(\"open\"),\n                    iconCls: \"pimcore_icon_open\",\n                    handler: function (grid, rowIndex) {\n                        var store = grid.getStore();\n                        var data = store.getAt(rowIndex).getData();\n                        var keyId = data.keyId;\n                        this.propertiesPanel.openConfig(keyId);\n                    }.bind(this)\n                }\n            ]\n        });\n\n\n        gridColumns.push({text: t(\"key_id\"), flex: 60, sortable: true, dataIndex: 'keyId', filter: 'string'});\n        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'keyName', filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n        gridColumns.push({text: t(\"description\"), flex: 200, sortable: true, dataIndex: 'keyDescription', filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n\n        gridColumns.push(mandatoryCheck);\n        gridColumns.push({text: t('sorter'), width: 150, sortable: true, dataIndex: 'sorter',\n            tooltip: t(\"classificationstore_tooltip_sorter\"),\n            editor: new Ext.form.NumberField()\n        });\n\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            hideable: false,\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var keyId = data.data.keyId;\n                        var groupId = data.data.groupId;\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deleterelation'),\n                            method: 'DELETE',\n                            params: {\n                                keyId: keyId,\n                                groupId: groupId\n                            },\n                            success: function (response) {\n                                this.relationsStore.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.relationsPagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.relationsStore, {pageSize: pageSize});\n\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 2\n        });\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.relationsStore,\n            border: false,\n            columns: gridColumns,\n            loadMask: true,\n            bodyCls: \"pimcore_editable_grid\",\n            columnLines: true,\n            plugins: plugins,\n            stripeRows: true,\n            trackMouseOver: true,\n            region: \"west\",\n            split: true,\n            hidden: true,\n            viewConfig: {\n                forceFit: true\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.relationsPagingtoolbar,\n            tbar: [\n                {\n                    text: t('add'),\n                    handler: this.onAddKey.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ]\n        } ;\n\n        this.relationsGrid = Ext.create('Ext.grid.Panel', gridConfig);\n\n\n        this.relationsPanel = new Ext.Panel({\n            title: t(\"relations\"),\n            border: false,\n            layout: \"fit\",\n            region: \"center\",\n            split: true,\n            disabled: true,\n            items: [\n                this.relationsGrid\n            ]\n\n        });\n\n        return this.relationsPanel;\n\n    },\n\n\n    createGroupsGrid: function(response) {\n        this.groupsFields = ['storeId','id', 'parentId', 'name', 'description', 'creationDate', 'modificationDate'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.groupsFields.length; i++) {\n            readerFields.push({name: this.groupsFields[i]});\n        }\n\n        var proxy = {\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_groupsactionget'),\n            type: 'ajax',\n            batchActions: false,\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n        };\n\n        var listeners = {};\n\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), t('cannot_save_object_please_try_to_edit_the_object_in_detail_view'));\n                this.groupsStore.rejectChanges();\n            }\n        }.bind(this);\n\n\n        this.groupsStore = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners,\n            remoteFilter: true,\n            remoteSort: true\n        });\n\n        var gridColumns = [];\n\n        //gridColumns.push({text: t(\"store\"), width: 60, sortable: true, dataIndex: 'storeId', filter: 'string'});\n        gridColumns.push({text: \"ID\", width: 60, sortable: true, dataIndex: 'id', filter: 'string'});\n        gridColumns.push({text: t(\"parent_id\"), width: 160, sortable: true, dataIndex: 'parentId', hidden: true, editor: new Ext.form.TextField({})});\n        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({}), filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n        gridColumns.push({text: t(\"description\"), flex: 300, sortable: true, dataIndex: 'description', editor: new Ext.form.TextField({}), filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n\n        var dateRenderer =  function(d) {\n            if (d !== undefined) {\n                var date = new Date(d * 1000);\n                return Ext.Date.format(date, \"Y-m-d H:i:s\");\n            } else {\n                return \"\";\n            }\n        };\n\n        gridColumns.push(\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer\n            }\n        );\n\n        gridColumns.push(\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer\n            }\n        );\n\n        gridColumns.push({\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            hideable: false,\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var id = data.data.id;\n\n                        this.relationsStore.removeAll(true);\n                        this.relationsGrid.hide();\n                        this.relationsPanel.disable();\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deletegroup'),\n                            method: 'DELETE',\n                            params: {\n                                id: id\n                            },\n                            success: function (response) {\n                                this.groupsStore.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.groupsPagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.groupsStore, {pageSize: pageSize});\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {});\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.groupsStore,\n            border: false,\n            bodyCls: \"pimcore_editable_grid\",\n            columns: gridColumns,\n            loadMask: true,\n            columnLines: true,\n            plugins: plugins,\n            stripeRows: true,\n            trackMouseOver: true,\n            region: \"west\",\n            split: true,\n            width: 600,\n            viewConfig: {\n                forceFit: true\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.groupsPagingtoolbar,\n            tbar: [\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ],\n            listeners: {\n\n                selectionchange: function(rowModel, selected, eOpts ) {\n                    if (selected.length > 0) {\n                        var record = selected[0];\n                        var groupId = record.data.id;\n                        var groupName = Ext.util.Format.htmlEncode(record.data.name);\n\n                        this.groupId = groupId;\n\n                        this.relationsPanel.setTitle(t(\"relations\") + \" - \" + t(\"group\") + \" \" + record.data.id + \" - \" + groupName);\n                        this.relationsPanel.enable();\n                        this.relationsStore.getProxy().setExtraParam(\"groupId\", groupId);\n                        this.relationsStore.reload();\n                        this.relationsGrid.show();\n                    }\n                }.bind(this)\n            }\n        } ;\n\n        this.grid =  Ext.create('Ext.grid.Panel', gridConfig);\n\n        return this.grid\n    },\n\n    onAddKey: function() {\n        var keySelectionWindow = new pimcore.object.classificationstore.keySelectionWindow({\n            parent: this,\n            enableKeys: true,\n            storeId: this.storeConfig.id\n        });\n        keySelectionWindow.show();\n    },\n\n    onAdd: function () {\n        Ext.MessageBox.prompt(t('classificationstore_mbx_entergroup_title'), t('classificationstore_mbx_entergroup_prompt'),\n            this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        value = value.trim();\n        if (button == \"ok\" && value.length > 1) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_creategroup'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    storeId: this.storeConfig.id\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t(\"classificationstore_error_addgroup_title\"), t(data.message ? data.message : \"classificationstore_error_addgroup_msg\"));\n                    } else {\n                        this.groupsStore.reload({\n                                callback: function() {\n                                    var rowIndex = this.groupsStore.find('name', value);\n                                    if (rowIndex != -1) {\n                                        var sm = this.grid.getSelectionModel();\n                                        sm.select(rowIndex);\n                                    }\n\n                                    var lastOptions = this.groupsStore.lastOptions;\n                                    Ext.apply(lastOptions.params, {\n                                        overrideSort: \"false\"\n                                    });\n                                }.bind(this),\n                                params: {\n                                    \"overrideSort\": \"true\"\n                                }\n                            }\n                        );\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t(\"classificationstore_configuration\"), t(\"classificationstore_invalidname\"));\n        }\n    },\n\n\n    handleSelectionWindowClosed: function() {\n\n    },\n\n    handleAddKeys: function (response) {\n        var data = Ext.decode(response.responseText);\n\n        if(data && data.success) {\n            for (var i=0; i < data.data.length; i++) {\n                var keyDef = data.data[i];\n\n                var colData = {};\n                colData.keyId = keyDef.id;\n                colData.keyName = keyDef.name;\n                colData.keyDescription = keyDef.description;\n                colData.storeId = this.storeConfig.id;\n                colData.groupId = this.groupId;\n\n                var tempId = this.groupId + \"-\" + colData.keyId;\n\n                var match = this.relationsStore.findExact(\"id\" , tempId);\n                if (match == -1) {\n                    this.relationsStore.add(colData);\n                }\n            }\n        }\n    },\n\n    requestPending: function() {\n        // nothing to do\n    },\n\n    openConfig: function(id) {\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n        var params = {\n            storeId: this.storeConfig.id,\n            id: id,\n            pageSize: pageSize,\n            table: \"groups\"\n        };\n\n        var sorters = this.groupsStore.getSorters();\n        if (sorters.length > 0) {\n            var sorter = sorters.getAt(0);\n            params.sortKey = sorter.getProperty();\n            params.sortDir = sorter.getDirection();\n        }\n\n        var noreload = function() {\n            return false;\n        }\n        this.groupsStore.addListener(\"beforeload\", noreload);\n\n        this.container.setActiveTab(this.layout);\n        this.groupsStore.clearFilter(true);\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_getpage'),\n            params: params,\n            success: function(response) {\n                try {\n                    this.groupsStore.removeListener(\"beforeload\", noreload);\n\n                    var data = Ext.decode(response.responseText);\n                    if (data.success) {\n                        this.groupsStore.removeListener(\"beforeload\", noreload);\n                        this.groupsStore.loadPage(data.page, {\n                            callback: function() {\n                                var selModel = this.grid.getSelectionModel();\n                                var record = this.groupsStore.getById(id);\n                                if (record) {\n                                    selModel.select(record);\n                                }\n                            }.bind(this)\n                        });\n                    } else {\n                        this.groupsStore.reload();\n                    }\n                } catch (e) {\n                    console.log(e);\n                }\n            }.bind(this),\n            failure: function(response) {\n                this.groupsStore.removeListener(\"beforeload\", noreload);\n                this.groupsStore.reload();\n            }.bind(this)\n        });\n\n\n    }\n\n});\n\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classificationstore.propertiespanel\");\npimcore.object.classificationstore.propertiespanel = Class.create({\n\n    initialize: function (storeConfig, container) {\n        this.container = container;\n        this.storeConfig = storeConfig;\n    },\n\n    getPanel: function () {\n        if (this.layout == null) {\n            this.layout = new Ext.Panel({\n                title: t(\"classificationstore_properties\"),\n                iconCls: \"pimcore_icon_key\",\n                border: false,\n                layout: \"fit\",\n                region: \"center\"\n            });\n\n            this.createGrid();\n        }\n\n        this.layout.on(\"activate\", this.panelActivated.bind(this));\n\n        return this.layout;\n    },\n\n    panelActivated: function() {\n        if (this.store) {\n            this.store.reload();\n        }\n    },\n\n    createGrid: function(response) {\n        this.fields = ['storeId','id', 'name', 'description', 'type',\n            'creationDate', 'modificationDate', 'definition', 'title', 'sorter'];\n\n        var readerFields = [];\n        for (var i = 0; i < this.fields.length; i++) {\n            readerFields.push({name: this.fields[i]});\n        }\n\n        var dataComps = Object.keys(pimcore.object.classes.data);\n        var allowedDataTypes = [];\n\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataComp = pimcore.object.classes.data[dataComps[i]];\n\n            var allowed = false;\n\n            if('object' !== typeof dataComp) {\n                if (dataComp.prototype.allowIn['classificationstore']) {\n                    allowed = true;\n                }\n            }\n\n            if (allowed) {\n                allowedDataTypes.push([dataComps[i], t(dataComps[i])]);\n            }\n        }\n\n        this.allowedTypesStore = new Ext.data.SimpleStore({\n            fields: ['key', 'name'],\n            data: allowedDataTypes\n        });\n\n        var proxy = {\n            url: Routing.generate('pimcore_admin_dataobject_classificationstore_propertiesget'),\n            batchActions: false,\n            type: 'ajax',\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true'\n            },\n            extraParams: {\n                storeId: this.storeConfig.id\n            }\n\n        };\n\n        var listeners = {};\n\n        listeners.exception = function (conn, mode, action, request, response, store) {\n            if(action == \"update\") {\n                Ext.MessageBox.alert(t('error'), t('cannot_save_object_please_try_to_edit_the_object_in_detail_view'));\n                this.store.rejectChanges();\n            }\n        }.bind(this);\n\n\n        this.store = new Ext.data.Store({\n            autoSync: true,\n            proxy: proxy,\n            fields: readerFields,\n            listeners: listeners,\n            remoteFilter: true,\n            remoteSort: true\n        });\n\n        var gridColumns = [];\n\n        //gridColumns.push({text: t(\"store\"), width: 40, sortable: true, dataIndex: 'storeId'});\n        gridColumns.push({text: \"ID\", width: 100, sortable: true, dataIndex: 'id'});\n        gridColumns.push({\n                text: t(\"name\"),\n                width: 200,\n                sortable: true,\n                dataIndex: 'name',\n                filter: 'string',\n                editor: new Ext.form.TextField({}),\n                renderer: Ext.util.Format.htmlEncode\n            }\n\n        );\n\n        gridColumns.push({text: t(\"title\"), width: 200, sortable: false, dataIndex: 'title',editor: new Ext.form.TextField({}), filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n        gridColumns.push({text: t(\"description\"), width: 300, sortable: true, dataIndex: 'description',editor: new Ext.form.TextField({}), filter: 'string',\n            renderer: Ext.util.Format.htmlEncode});\n        gridColumns.push({text: t(\"definition\"), width: 300, sortable: true, hidden: true, dataIndex: 'definition',editor: new Ext.form.TextField({})});\n        gridColumns.push({text: t(\"type\"), width: 150, sortable: true, dataIndex: 'type', filter: 'string',\n            editor: new Ext.form.ComboBox({\n                triggerAction: 'all',\n                editable: false,\n                store: this.allowedTypesStore,\n                displayField:'name',\n                valueField: \"key\"\n            }),\n            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {\n                return t(value);\n            }});\n\n        gridColumns.push({\n            hideable: false,\n            xtype: 'actioncolumn',\n            menuText: t(\"classificationstore_detailed_configuration\"),\n            width: 30,\n            items: [\n                {\n                    tooltip: t(\"classificationstore_detailed_configuration\"),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/department.svg\",\n                    handler: this.showDetailedConfig.bind(this)\n                }\n            ]\n        });\n\n        var dateRenderer =  function(d) {\n            if (d !== undefined) {\n                var date = new Date(d * 1000);\n                return Ext.Date.format(date, \"Y-m-d H:i:s\");\n            } else {\n                return \"\";\n            }\n        };\n\n\n        gridColumns.push(\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer\n            }\n        );\n\n        gridColumns.push(\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false, width: 130,\n                hidden: true,\n                renderer: dateRenderer            }\n        );\n\n        gridColumns.push({\n            hideable: false,\n            xtype: 'actioncolumn',\n            menuText: t('remove'),\n            width: 30,\n            items: [\n                {\n                    tooltip: t('remove'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        var data = grid.getStore().getAt(rowIndex);\n                        var id = data.data.id;\n\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_classificationstore_deleteproperty'),\n                            method: 'DELETE',\n                            params: {\n                                id: id\n                            },\n                            success: function (response) {\n                                this.store.reload();\n                            }.bind(this)});\n                    }.bind(this)\n                }\n            ]\n        });\n\n\n        var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store, {pageSize: pageSize});\n\n        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {\n            listeners: {\n                edit: function (editor, e) {\n                    var field = e.field;\n                    var rec = e.record;\n                    var val = e.value;\n                    var originalValue = e.originalValue;\n\n                    var definition = rec.get(\"definition\");\n                    definition = Ext.util.JSON.decode(definition);\n                    if (field == \"name\") {\n                        definition.name = val;\n                        definition = Ext.util.JSON.encode(definition);\n                        rec.set(\"definition\", definition);\n                    } else if (field == \"type\") {\n                        definition.fieldtype = val;\n                        definition = Ext.util.JSON.encode(definition);\n                        rec.set(\"definition\", definition);\n                    } else if (field == \"title\") {\n                        definition.title = val;\n                        definition = Ext.util.JSON.encode(definition);\n                        rec.set(\"definition\", definition);\n                    }\n\n                    if (val != originalValue) {\n                        this.showDetailedConfig(e.grid, e.rowIdx);\n                    }\n                }.bind(this)\n            }\n        });\n\n        var plugins = ['gridfilters', cellEditing];\n\n        var gridConfig = {\n            frame: false,\n            store: this.store,\n            border: false,\n            columns: gridColumns,\n            loadMask: false,\n            columnLines: true,\n            plugins: plugins,\n            bodyCls: \"pimcore_editable_grid\",\n            stripeRows: true,\n            trackMouseOver: true,\n            viewConfig: {\n                forceFit: false\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            bbar: this.pagingtoolbar,\n            tbar: [\n\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                }\n            ]\n        } ;\n\n        this.grid = Ext.create('Ext.grid.Panel', gridConfig);\n\n        this.layout.removeAll();\n        this.layout.add(this.grid);\n        this.layout.updateLayout();\n    },\n\n    showDetailedConfig: function (grid, rowIndex) {\n        var data = grid.getStore().getAt(rowIndex);\n        var type = data.data.type;\n        var definition = data.data.definition;\n        if (definition) {\n            definition = Ext.util.JSON.decode(definition);\n            definition.name = Ext.util.Format.htmlEncode(data.data.name);\n        } else {\n            definition = {\n                name: data.data.name\n            };\n        }\n\n        definition.fieldtype = type;\n\n        var keyDefinitionWindow = new pimcore.object.classificationstore.keyDefinitionWindow(\n            definition, data.id, this);\n        keyDefinitionWindow.show();\n    },\n\n    applyTranslatorConfig: function(keyid, value) {\n        var data = this.store.getById(keyid);\n        data.set(\"translator\", value);\n    },\n\n    applyDetailedConfig: function(keyid, definition) {\n\n        var name = definition.name;\n        definition = Ext.util.JSON.encode(definition);\n\n        var record = this.store.getById(keyid);\n        record.set(\"name\",  name);\n        record.set(\"definition\",  definition);\n    },\n\n    onAdd: function () {\n        Ext.MessageBox.prompt(t('classificationstore_mbx_enterkey_title'), t('classificationstore_mbx_enterkey_prompt'),\n            this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        value = value.trim();\n        if (button == \"ok\" && value.length > 1) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_addproperty'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    storeId: this.storeConfig.id\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t(\"classificationstore_error_addkey_title\"), t(\"classificationstore_error_addkey_msg\"));\n                    } else {\n\n                        this.store.reload({\n                                callback: function() {\n                                    var rowIndex = this.store.find('name', value);\n                                    if (rowIndex != -1) {\n                                        var sm = this.grid.getSelectionModel();\n                                        sm.select(rowIndex);\n                                    }\n\n                                    var lastOptions = this.store.lastOptions;\n                                    Ext.apply(lastOptions.params, {\n                                        overrideSort: \"false\"\n                                    });\n\n                                }.bind(this),\n                                params: {\n                                    \"overrideSort\": \"true\"\n                                }\n                            }\n\n                        );\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t(\"classificationstore_configuration\"), t(\"classificationstore_invalidname\"));\n        }\n    },\n\n\n    getData: function () {\n        var selected = this.groupGridPanel.getSelectionModel().getSelected();\n        if(selected) {\n            return selected.data;\n        }\n        return null;\n    },\n\n   openConfig: function(id) {\n\n       var pageSize = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n       var params = {\n           storeId: this.storeConfig.id,\n           id: id,\n           pageSize: pageSize,\n           table: \"keys\"\n       };\n\n       var sorters = this.store.getSorters();\n       if (sorters.length > 0) {\n           var sorter = sorters.getAt(0);\n           params.sortKey = sorter.getProperty();\n           params.sortDir = sorter.getDirection();\n       }\n\n       var noreload = function() {\n           return false;\n       }\n       this.store.addListener(\"beforeload\", noreload);\n\n       this.container.setActiveTab(this.layout);\n       this.store.clearFilter(true);\n\n       Ext.Ajax.request({\n           url: Routing.generate('pimcore_admin_dataobject_classificationstore_getpage'),\n           params: params,\n           success: function(response) {\n               try {\n                   this.store.removeListener(\"beforeload\", noreload);\n\n                   var data = Ext.decode(response.responseText);\n                   if (data.success) {\n                       this.store.removeListener(\"beforeload\", noreload);\n                       this.store.loadPage(data.page, {\n                           callback: function() {\n                               var selModel = this.grid.getSelectionModel();\n                               var record = this.store.getById(id);\n                               if (record) {\n                                   selModel.select(record);\n                                   this.showDetailedConfig(this.grid, this.store.indexOf(record));\n                               }\n                           }.bind(this)\n                       });\n                   } else {\n                       this.store.reload();\n                   }\n               } catch (e) {\n                   console.log(e);\n               }\n           }.bind(this),\n           failure: function(response) {\n               this.store.removeListener(\"beforeload\", noreload);\n               this.store.reload();\n           }.bind(this)\n       });\n\n\n    }\n\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.object.classificationstore.storeTree\");\npimcore.object.classificationstore.storeTree = Class.create({\n\n    activeStoreId: 0,\n\n    initialize: function () {\n        this.getTabPanel();\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                iconCls: \"pimcore_icon_classificationstore\",\n                id: \"pimcore_object_classificationstore_configpanel\",\n                title: t(\"classification_store\"),\n                border: false,\n                layout: \"border\",\n                closable:true,\n                items: [this.getStoreTree(), this.getEditContainer()],\n                tbar: {\n                    cls: 'pimcore_toolbar_border_bottom',\n                    items: [\n                        {\n                            text: t('add'),\n                            handler: this.onAdd.bind(this),\n                            iconCls: \"pimcore_icon_add\"\n                        }\n                    ]\n                }\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_object_classificationstore_configpanel\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"classificationstore_config\");\n            }.bind(this));\n\n            this.panel.updateLayout();\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getEditContainer: function() {\n        this.editContainer = new Ext.TabPanel({\n            region: 'center',\n            layout: 'fit',\n            cls: \"pimcore-panel-header-no-border\",\n        });\n\n\n        return this.editContainer;\n    },\n\n    getTreeNodeListeners: function () {\n        var treeNodeListeners = {\n            'itemclick' : this.onTreeNodeClick.bind(this),\n            'itemcontextmenu': this.onTreeNodeContextmenu.bind(this)\n        };\n\n        return treeNodeListeners;\n    },\n\n    getStoreTree: function () {\n        if (!this.tree) {\n            this.treeStore = Ext.create('Ext.data.TreeStore', {\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_dataobject_classificationstore_storetree'),\n                    reader: {\n                        type: 'json'\n                    }\n                }\n            });\n\n            this.tree = Ext.create('Ext.tree.Panel', {\n                store: this.treeStore,\n                region: \"west\",\n                autoScroll:true,\n                animate:false,\n                containerScroll: true,\n                split:true,\n                width: 180,\n                rootVisible: false,\n                viewConfig: {\n                    listeners: {\n                        drop: function(node, data, overModel) {\n                            this.update(data.records[0].id, {parentId: overModel.id})\n                        }.bind(this)\n                    }\n                },\n                listeners: this.getTreeNodeListeners()\n            });\n        }\n        this.tree.getRootNode().expand();\n\n        return this.tree;\n    },\n\n\n    openStore: function(storeConfig) {\n        try {\n            if (storeConfig.id != this.activeStoreId) {\n                this.editContainer.removeAll();\n\n                this.editContainer.setTitle(storeConfig.text + \" (ID: \" + storeConfig.id + \")\");\n                var propertiesPanel = new pimcore.object.classificationstore.propertiespanel(storeConfig, this.editContainer);\n                var groupsPanel = new pimcore.object.classificationstore.groupsPanel(storeConfig, this.editContainer, propertiesPanel);\n                var collectionsPanel = new pimcore.object.classificationstore.collectionsPanel(storeConfig, groupsPanel).getPanel();\n\n\n                this.editContainer.add(collectionsPanel);\n                this.editContainer.add(groupsPanel.getPanel());\n                this.editContainer.add(propertiesPanel.getPanel());\n\n                this.editContainer.setActiveTab(collectionsPanel);\n\n                this.editContainer.updateLayout();\n                this.activeStoreId = storeConfig.id;\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    onTreeNodeClick: function (tree, record, item, index, e, eOpts ) {\n        if(!record.data.allowChildren && record.data.id > 0) {\n            this.openStore(record.data);\n        }\n    },\n\n    onTreeNodeContextmenu: function (tree, record, item, index, e, eOpts ) {\n        tree.select();\n\n        var user = pimcore.globalmanager.get(\"user\");\n\n        if(record.data.admin && !user.admin) {\n            // only admin users are allowed to manage admin users\n            return;\n        }\n\n        var menu = new Ext.menu.Menu();\n\n        menu.add(new Ext.menu.Item({\n            text: t('edit_configuration'),\n            iconCls: \"pimcore_icon_custom_views\",\n            listeners: {\n                \"click\": function() {\n                    var data = {\n                        id: record.data.id,\n                        name: Ext.util.Format.htmlDecode(record.data.text),\n                        description: Ext.util.Format.htmlDecode(record.data.description)\n                    }\n                    var panel = new pimcore.object.classificationstore.storeConfiguration(data, this.applyConfig.bind(this));\n                    panel.show();\n                }.bind(this)\n            }\n        }));\n\n        menu.showAt(e.pageX, e.pageY);\n        e.stopEvent();\n\n    },\n\n    applyConfig: function(storeId, newData) {\n        Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_editstore'),\n                method: 'PUT',\n                params: {\n                    id: storeId,\n                    data: Ext.encode(newData)\n                },\n                success: function (response) {\n                    this.treeStore.reload();\n                }.bind(this)\n            }\n        );\n    },\n\n    addComplete: function (parentNode, transport) {\n        try{\n            var data = Ext.decode(transport.responseText);\n            if(data && data.success){\n                var tree = parentNode.getOwnerTree();\n                tree.getStore().reload({\n                    node: parentNode\n                });\n            } else {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"user_creation_error\"), \"error\",t(data.message));\n            }\n\n        } catch(e){\n            console.log(e);\n            pimcore.helpers.showNotification(t(\"error\"), t(\"user_creation_error\"), \"error\");\n        }\n    },\n\n    update: function (userId, values) {\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_user_update'),\n            method: \"PUT\",\n            params: {\n                id: userId,\n                data: Ext.encode(values)\n            },\n            success: function (transport) {\n                try{\n                    var res = Ext.decode(transport.responseText);\n                    if (res.success) {\n                        pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n                    } else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\",t(res.message));\n                    }\n                } catch(e){\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n                }\n            }.bind(this)\n        });\n    },\n\n    activate: function () {\n        Ext.getCmp(\"pimcore_panel_tabs\").setActiveItem(\"pimcore_object_classificationstore_configpanel\");\n    },\n\n    onAdd: function () {\n        Ext.MessageBox.prompt(t('classificationstore_mbx_enterstore_title'), t('classificationstore_mbx_enterstore_prompt'),\n            this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        value = value.trim();\n        if (button == \"ok\" && value.length > 1) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_classificationstore_createstore'),\n                method: 'POST',\n                params: {\n                    name: value\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    if (!data || !data.success) {\n                        Ext.Msg.alert(t(\"error\"), t(\"classificationstore_error_addstore_msg\"));\n                    } else {\n                        var storeId = data.storeId;\n\n                        this.treeStore.reload({\n                                callback: function () {\n                                    var record = this.treeStore.getById(storeId);\n                                    this.tree.getSelectionModel().select(record);\n                                    this.openStore(record.data);\n                                }.bind(this)\n                            }\n                        );\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t(\"classificationstore_configuration\"), t(\"classificationstore_invalidname\"));\n        }\n    }\n\n\n\n});\n\n\n\n\n\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php", "bundles/AdminBundle/Resources/public/js/pimcore/helpers/generic-grid.js", "bundles/AdminBundle/Resources/public/js/pimcore/object/classificationstore/collectionsPanel.js", "bundles/AdminBundle/Resources/public/js/pimcore/object/classificationstore/groupsPanel.js", "bundles/AdminBundle/Resources/public/js/pimcore/object/classificationstore/propertiesPanel.js", "bundles/AdminBundle/Resources/public/js/pimcore/object/classificationstore/storeTree.js"], "buggy_code_start_loc": [1479, 141, 119, 122, 128, 169], "buggy_code_end_loc": [1492, 142, 363, 369, 289, 171], "fixing_code_start_loc": [1479, 141, 119, 122, 128, 169], "fixing_code_end_loc": [1492, 142, 367, 373, 292, 171], "type": "CWE-79", "message": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-4139", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-21T13:15:07.340", "lastModified": "2022-01-07T15:14:10.840", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "pimcore es vulnerable a una Neutralizaci\u00f3n Inapropiada de Entradas Durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 3.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.2.7", "matchCriteriaId": "E3B95F1E-AC67-4B0F-9732-CD60CCD98B49"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/d5c3e876d910784000335061c3bd24d301351245", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/6ec59e43-095f-4ba3-8b75-e92250da8e3a", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/d5c3e876d910784000335061c3bd24d301351245"}}