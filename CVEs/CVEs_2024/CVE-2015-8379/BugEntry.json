{"buggy_code": ["<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\n */\nnamespace Cake\\Controller\\Component;\n\nuse Cake\\Controller\\Component;\nuse Cake\\Event\\Event;\nuse Cake\\I18n\\Time;\nuse Cake\\Network\\Exception\\InvalidCsrfTokenException;\nuse Cake\\Network\\Request;\nuse Cake\\Network\\Response;\nuse Cake\\Utility\\Security;\nuse Cake\\Utility\\Text;\n\n/**\n * Provides CSRF protection & validation.\n *\n * This component adds a CSRF token to a cookie. The cookie value is compared to\n * request data, or the X-CSRF-Token header on each PATCH, POST,\n * PUT, or DELETE request.\n *\n * If the request data is missing or does not match the cookie data,\n * an InvalidCsrfTokenException will be raised.\n *\n * This component integrates with the FormHelper automatically and when\n * used together your forms will have CSRF tokens automatically added\n * when `$this->Form->create(...)` is used in a view.\n */\nclass CsrfComponent extends Component\n{\n\n    /**\n     * Default config for the CSRF handling.\n     *\n     *  - cookieName = The name of the cookie to send.\n     *  - expiry = How long the CSRF token should last. Defaults to browser session.\n     *  - secure = Whether or not the cookie will be set with the Secure flag. Defaults to false.\n     *  - httpOnly = Whether or not the cookie will be set with the HttpOnly flag. Defaults to false.\n     *  - field = The form field to check. Changing this will also require configuring\n     *    FormHelper.\n     *\n     * @var array\n     */\n    protected $_defaultConfig = [\n        'cookieName' => 'csrfToken',\n        'expiry' => 0,\n        'secure' => false,\n        'httpOnly' => false,\n        'field' => '_csrfToken',\n    ];\n\n    /**\n     * Startup callback.\n     *\n     * Validates the CSRF token for POST data. If\n     * the request is a GET request, and the cookie value is absent a cookie will be set.\n     *\n     * Once a cookie is set it will be copied into request->params['_csrfToken']\n     * so that application and framework code can easily access the csrf token.\n     *\n     * RequestAction requests do not get checked, nor will\n     * they set a cookie should it be missing.\n     *\n     * @param \\Cake\\Event\\Event $event Event instance.\n     * @return void\n     */\n    public function startup(Event $event)\n    {\n        $controller = $event->subject();\n        $request = $controller->request;\n        $response = $controller->response;\n        $cookieName = $this->_config['cookieName'];\n\n        $cookieData = $request->cookie($cookieName);\n        if ($cookieData) {\n            $request->params['_csrfToken'] = $cookieData;\n        }\n\n        if ($request->is('requested')) {\n            return;\n        }\n\n        if ($request->is('get') && $cookieData === null) {\n            $this->_setCookie($request, $response);\n        }\n        if ($request->is(['patch', 'put', 'post', 'delete'])) {\n            $this->_validateToken($request);\n            unset($request->data[$this->_config['field']]);\n        }\n    }\n\n    /**\n     * Events supported by this component.\n     *\n     * @return array\n     */\n    public function implementedEvents()\n    {\n        return [\n            'Controller.startup' => 'startup',\n        ];\n    }\n\n    /**\n     * Set the cookie in the response.\n     *\n     * Also sets the request->params['_csrfToken'] so the newly minted\n     * token is available in the request data.\n     *\n     * @param \\Cake\\Network\\Request $request The request object.\n     * @param \\Cake\\Network\\Response $response The response object.\n     * @return void\n     */\n    protected function _setCookie(Request $request, Response $response)\n    {\n        $expiry = new Time($this->_config['expiry']);\n        $value = Security::hash(Text::uuid(), 'sha1', true);\n\n        $request->params['_csrfToken'] = $value;\n        $response->cookie([\n            'name' => $this->_config['cookieName'],\n            'value' => $value,\n            'expire' => $expiry->format('U'),\n            'path' => $request->webroot,\n            'secure' => $this->_config['secure'],\n            'httpOnly' => $this->_config['httpOnly'],\n        ]);\n    }\n\n    /**\n     * Validate the request data against the cookie token.\n     *\n     * @param \\Cake\\Network\\Request $request The request to validate against.\n     * @throws \\Cake\\Network\\Exception\\InvalidCsrfTokenException when the CSRF token is invalid or missing.\n     * @return void\n     */\n    protected function _validateToken(Request $request)\n    {\n        $cookie = $request->cookie($this->_config['cookieName']);\n        $post = $request->data($this->_config['field']);\n        $header = $request->header('X-CSRF-Token');\n\n        if (empty($cookie)) {\n            throw new InvalidCsrfTokenException(__d('cake', 'Missing CSRF token cookie'));\n        }\n\n        if ($post !== $cookie && $header !== $cookie) {\n            throw new InvalidCsrfTokenException(__d('cake', 'CSRF token mismatch.'));\n        }\n    }\n}\n", "<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\n */\nnamespace Cake\\Test\\TestCase\\Controller\\Component;\n\nuse Cake\\Controller\\ComponentRegistry;\nuse Cake\\Controller\\Component\\CsrfComponent;\nuse Cake\\Event\\Event;\nuse Cake\\I18n\\Time;\nuse Cake\\Network\\Request;\nuse Cake\\Network\\Response;\nuse Cake\\TestSuite\\TestCase;\n\n/**\n * CsrfComponent test.\n */\nclass CsrfComponentTest extends TestCase\n{\n\n    /**\n     * setup\n     *\n     * @return void\n     */\n    public function setUp()\n    {\n        parent::setUp();\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $this->registry = new ComponentRegistry($controller);\n        $this->component = new CsrfComponent($this->registry);\n    }\n\n    /**\n     * teardown\n     *\n     * @return void\n     */\n    public function tearDown()\n    {\n        parent::tearDown();\n        unset($this->component);\n    }\n\n    /**\n     * Test setting the cookie value\n     *\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testSettingCookie()\n    {\n        $_SERVER['REQUEST_METHOD'] = 'GET';\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request(['webroot' => '/dir/']);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n\n        $cookie = $controller->response->cookie('csrfToken');\n        $this->assertNotEmpty($cookie, 'Should set a token.');\n        $this->assertRegExp('/^[a-f0-9]+$/', $cookie['value'], 'Should look like a hash.');\n        $this->assertEquals(0, $cookie['expire'], 'session duration.');\n        $this->assertEquals('/dir/', $cookie['path'], 'session path.');\n\n        $this->assertEquals($cookie['value'], $controller->request->params['_csrfToken']);\n    }\n\n    /**\n     * Data provider for HTTP method tests.\n     *\n     * @return void\n     */\n    public static function httpMethodProvider()\n    {\n        return [\n            ['PATCH'], ['PUT'], ['POST'], ['DELETE']\n        ];\n    }\n\n    /**\n     * Test that the X-CSRF-Token works with the various http methods.\n     *\n     * @dataProvider httpMethodProvider\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testValidTokenInHeader($method)\n    {\n        $_SERVER['REQUEST_METHOD'] = $method;\n        $_SERVER['HTTP_X_CSRF_TOKEN'] = 'testing123';\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request(['cookies' => ['csrfToken' => 'testing123']]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $result = $this->component->startup($event);\n        $this->assertNull($result, 'No exception means valid.');\n    }\n\n    /**\n     * Test that the X-CSRF-Token works with the various http methods.\n     *\n     * @dataProvider httpMethodProvider\n     * @expectedException \\Cake\\Network\\Exception\\InvalidCsrfTokenException\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testInvalidTokenInHeader($method)\n    {\n        $_SERVER['REQUEST_METHOD'] = $method;\n        $_SERVER['HTTP_X_CSRF_TOKEN'] = 'nope';\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n    }\n\n    /**\n     * Test that request data works with the various http methods.\n     *\n     * @dataProvider httpMethodProvider\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testValidTokenRequestData($method)\n    {\n        $_SERVER['REQUEST_METHOD'] = $method;\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'post' => ['_csrfToken' => 'testing123'],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $result = $this->component->startup($event);\n        $this->assertNull($result, 'No exception means valid.');\n        $this->assertFalse(isset($controller->request->data['_csrfToken']));\n    }\n\n    /**\n     * Test that request data works with the various http methods.\n     *\n     * @dataProvider httpMethodProvider\n     * @expectedException \\Cake\\Network\\Exception\\InvalidCsrfTokenException\n     * @return void\n     */\n    public function testInvalidTokenRequestData($method)\n    {\n        $_SERVER['REQUEST_METHOD'] = $method;\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'post' => ['_csrfToken' => 'nope'],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n    }\n\n    /**\n     * Test that missing post field fails\n     *\n     * @expectedException \\Cake\\Network\\Exception\\InvalidCsrfTokenException\n     * @return void\n     */\n    public function testInvalidTokenRequestDataMissing()\n    {\n        $_SERVER['REQUEST_METHOD'] = 'POST';\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'post' => [],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n    }\n\n    /**\n     * Test that missing header and cookie fails\n     *\n     * @dataProvider httpMethodProvider\n     * @expectedException \\Cake\\Network\\Exception\\InvalidCsrfTokenException\n     * @return void\n     */\n    public function testInvalidTokenMissingCookie($method)\n    {\n        $_SERVER['REQUEST_METHOD'] = $method;\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'post' => ['_csrfToken' => 'could-be-valid'],\n            'cookies' => []\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n    }\n\n    /**\n     * Test that CSRF checks are not applied to request action requests.\n     *\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testCsrfValidationSkipsRequestAction()\n    {\n        $_SERVER['REQUEST_METHOD'] = 'POST';\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'params' => ['requested' => 1],\n            'post' => ['_csrfToken' => 'nope'],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $result = $this->component->startup($event);\n        $this->assertNull($result, 'No error.');\n        $this->assertEquals('testing123', $controller->request->params['_csrfToken']);\n    }\n\n    /**\n     * Test that the configuration options work.\n     *\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testConfigurationCookieCreate()\n    {\n        $_SERVER['REQUEST_METHOD'] = 'GET';\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request(['webroot' => '/dir/']);\n        $controller->response = new Response();\n\n        $component = new CsrfComponent($this->registry, [\n            'cookieName' => 'token',\n            'expiry' => '+1 hour',\n            'secure' => true,\n            'httpOnly' => true\n        ]);\n\n        $event = new Event('Controller.startup', $controller);\n        $component->startup($event);\n\n        $this->assertEmpty($controller->response->cookie('csrfToken'));\n        $cookie = $controller->response->cookie('token');\n        $this->assertNotEmpty($cookie, 'Should set a token.');\n        $this->assertRegExp('/^[a-f0-9]+$/', $cookie['value'], 'Should look like a hash.');\n        $this->assertWithinRange((new Time('+1 hour'))->format('U'), $cookie['expire'], 1, 'session duration.');\n        $this->assertEquals('/dir/', $cookie['path'], 'session path.');\n        $this->assertTrue($cookie['secure'], 'cookie security flag missing');\n        $this->assertTrue($cookie['httpOnly'], 'cookie httpOnly flag missing');\n    }\n\n    /**\n     * Test that the configuration options work.\n     *\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testConfigurationValidate()\n    {\n        $_SERVER['REQUEST_METHOD'] = 'POST';\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'cookies' => ['csrfToken' => 'nope', 'token' => 'yes'],\n            'post' => ['_csrfToken' => 'no match', 'token' => 'yes'],\n        ]);\n        $controller->response = new Response();\n\n        $component = new CsrfComponent($this->registry, [\n            'cookieName' => 'token',\n            'field' => 'token',\n            'expiry' => 90,\n        ]);\n\n        $event = new Event('Controller.startup', $controller);\n        $result = $component->startup($event);\n        $this->assertNull($result, 'Config settings should work.');\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\n */\nnamespace Cake\\Controller\\Component;\n\nuse Cake\\Controller\\Component;\nuse Cake\\Event\\Event;\nuse Cake\\I18n\\Time;\nuse Cake\\Network\\Exception\\InvalidCsrfTokenException;\nuse Cake\\Network\\Request;\nuse Cake\\Network\\Response;\nuse Cake\\Utility\\Security;\nuse Cake\\Utility\\Text;\n\n/**\n * Provides CSRF protection & validation.\n *\n * This component adds a CSRF token to a cookie. The cookie value is compared to\n * request data, or the X-CSRF-Token header on each PATCH, POST,\n * PUT, or DELETE request.\n *\n * If the request data is missing or does not match the cookie data,\n * an InvalidCsrfTokenException will be raised.\n *\n * This component integrates with the FormHelper automatically and when\n * used together your forms will have CSRF tokens automatically added\n * when `$this->Form->create(...)` is used in a view.\n */\nclass CsrfComponent extends Component\n{\n\n    /**\n     * Default config for the CSRF handling.\n     *\n     *  - cookieName = The name of the cookie to send.\n     *  - expiry = How long the CSRF token should last. Defaults to browser session.\n     *  - secure = Whether or not the cookie will be set with the Secure flag. Defaults to false.\n     *  - httpOnly = Whether or not the cookie will be set with the HttpOnly flag. Defaults to false.\n     *  - field = The form field to check. Changing this will also require configuring\n     *    FormHelper.\n     *\n     * @var array\n     */\n    protected $_defaultConfig = [\n        'cookieName' => 'csrfToken',\n        'expiry' => 0,\n        'secure' => false,\n        'httpOnly' => false,\n        'field' => '_csrfToken',\n    ];\n\n    /**\n     * Startup callback.\n     *\n     * Validates the CSRF token for POST data. If\n     * the request is a GET request, and the cookie value is absent a cookie will be set.\n     *\n     * Once a cookie is set it will be copied into request->params['_csrfToken']\n     * so that application and framework code can easily access the csrf token.\n     *\n     * RequestAction requests do not get checked, nor will\n     * they set a cookie should it be missing.\n     *\n     * @param \\Cake\\Event\\Event $event Event instance.\n     * @return void\n     */\n    public function startup(Event $event)\n    {\n        $controller = $event->subject();\n        $request = $controller->request;\n        $response = $controller->response;\n        $cookieName = $this->_config['cookieName'];\n\n        $cookieData = $request->cookie($cookieName);\n        if ($cookieData) {\n            $request->params['_csrfToken'] = $cookieData;\n        }\n\n        if ($request->is('requested')) {\n            return;\n        }\n\n        if ($request->is('get') && $cookieData === null) {\n            $this->_setCookie($request, $response);\n        }\n        if (!$request->is(['head', 'get', 'options'])) {\n            $this->_validateToken($request);\n            unset($request->data[$this->_config['field']]);\n        }\n    }\n\n    /**\n     * Events supported by this component.\n     *\n     * @return array\n     */\n    public function implementedEvents()\n    {\n        return [\n            'Controller.startup' => 'startup',\n        ];\n    }\n\n    /**\n     * Set the cookie in the response.\n     *\n     * Also sets the request->params['_csrfToken'] so the newly minted\n     * token is available in the request data.\n     *\n     * @param \\Cake\\Network\\Request $request The request object.\n     * @param \\Cake\\Network\\Response $response The response object.\n     * @return void\n     */\n    protected function _setCookie(Request $request, Response $response)\n    {\n        $expiry = new Time($this->_config['expiry']);\n        $value = Security::hash(Text::uuid(), 'sha1', true);\n\n        $request->params['_csrfToken'] = $value;\n        $response->cookie([\n            'name' => $this->_config['cookieName'],\n            'value' => $value,\n            'expire' => $expiry->format('U'),\n            'path' => $request->webroot,\n            'secure' => $this->_config['secure'],\n            'httpOnly' => $this->_config['httpOnly'],\n        ]);\n    }\n\n    /**\n     * Validate the request data against the cookie token.\n     *\n     * @param \\Cake\\Network\\Request $request The request to validate against.\n     * @throws \\Cake\\Network\\Exception\\InvalidCsrfTokenException when the CSRF token is invalid or missing.\n     * @return void\n     */\n    protected function _validateToken(Request $request)\n    {\n        $cookie = $request->cookie($this->_config['cookieName']);\n        $post = $request->data($this->_config['field']);\n        $header = $request->header('X-CSRF-Token');\n\n        if (empty($cookie)) {\n            throw new InvalidCsrfTokenException(__d('cake', 'Missing CSRF token cookie'));\n        }\n\n        if ($post !== $cookie && $header !== $cookie) {\n            throw new InvalidCsrfTokenException(__d('cake', 'CSRF token mismatch.'));\n        }\n    }\n}\n", "<?php\n/**\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * For full copyright and license information, please see the LICENSE.txt\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @since         3.0.0\n * @license       http://www.opensource.org/licenses/mit-license.php MIT License\n */\nnamespace Cake\\Test\\TestCase\\Controller\\Component;\n\nuse Cake\\Controller\\ComponentRegistry;\nuse Cake\\Controller\\Component\\CsrfComponent;\nuse Cake\\Event\\Event;\nuse Cake\\I18n\\Time;\nuse Cake\\Network\\Request;\nuse Cake\\Network\\Response;\nuse Cake\\TestSuite\\TestCase;\n\n/**\n * CsrfComponent test.\n */\nclass CsrfComponentTest extends TestCase\n{\n\n    /**\n     * setup\n     *\n     * @return void\n     */\n    public function setUp()\n    {\n        parent::setUp();\n\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $this->registry = new ComponentRegistry($controller);\n        $this->component = new CsrfComponent($this->registry);\n    }\n\n    /**\n     * teardown\n     *\n     * @return void\n     */\n    public function tearDown()\n    {\n        parent::tearDown();\n        unset($this->component);\n    }\n\n    /**\n     * Test setting the cookie value\n     *\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testSettingCookie()\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => ['REQUEST_METHOD' => 'GET'],\n            'webroot' => '/dir/',\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n\n        $cookie = $controller->response->cookie('csrfToken');\n        $this->assertNotEmpty($cookie, 'Should set a token.');\n        $this->assertRegExp('/^[a-f0-9]+$/', $cookie['value'], 'Should look like a hash.');\n        $this->assertEquals(0, $cookie['expire'], 'session duration.');\n        $this->assertEquals('/dir/', $cookie['path'], 'session path.');\n\n        $this->assertEquals($cookie['value'], $controller->request->params['_csrfToken']);\n    }\n\n    /**\n     * Data provider for HTTP method tests.\n     *\n     * @return void\n     */\n    public static function httpMethodProvider()\n    {\n        return [\n            ['PATCH'], ['PUT'], ['POST'], ['DELETE'], ['PURGE'], ['INVALIDMETHOD']\n        ];\n    }\n\n    /**\n     * Test that the X-CSRF-Token works with the various http methods.\n     *\n     * @dataProvider httpMethodProvider\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testValidTokenInHeader($method)\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => [\n                'REQUEST_METHOD' => $method,\n                'HTTP_X_CSRF_TOKEN' => 'testing123',\n            ],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $result = $this->component->startup($event);\n        $this->assertNull($result, 'No exception means valid.');\n    }\n\n    /**\n     * Test that the X-CSRF-Token works with the various http methods.\n     *\n     * @dataProvider httpMethodProvider\n     * @expectedException \\Cake\\Network\\Exception\\InvalidCsrfTokenException\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testInvalidTokenInHeader($method)\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => [\n                'REQUEST_METHOD' => $method,\n                'HTTP_X_CSRF_TOKEN' => 'nope',\n            ],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n    }\n\n    /**\n     * Test that request data works with the various http methods.\n     *\n     * @dataProvider httpMethodProvider\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testValidTokenRequestData($method)\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => [\n                'REQUEST_METHOD' => $method,\n            ],\n            'post' => ['_csrfToken' => 'testing123'],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $result = $this->component->startup($event);\n        $this->assertNull($result, 'No exception means valid.');\n        $this->assertFalse(isset($controller->request->data['_csrfToken']));\n    }\n\n    /**\n     * Test that request data works with the various http methods.\n     *\n     * @dataProvider httpMethodProvider\n     * @expectedException \\Cake\\Network\\Exception\\InvalidCsrfTokenException\n     * @return void\n     */\n    public function testInvalidTokenRequestData($method)\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => [\n                'REQUEST_METHOD' => $method,\n            ],\n            'post' => ['_csrfToken' => 'nope'],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n    }\n\n    /**\n     * Test that missing post field fails\n     *\n     * @expectedException \\Cake\\Network\\Exception\\InvalidCsrfTokenException\n     * @return void\n     */\n    public function testInvalidTokenRequestDataMissing()\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => [\n                'REQUEST_METHOD' => 'POST',\n            ],\n            'post' => [],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n    }\n\n    /**\n     * Test that missing header and cookie fails\n     *\n     * @dataProvider httpMethodProvider\n     * @expectedException \\Cake\\Network\\Exception\\InvalidCsrfTokenException\n     * @return void\n     */\n    public function testInvalidTokenMissingCookie($method)\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => [\n                'REQUEST_METHOD' => $method\n            ],\n            'post' => ['_csrfToken' => 'could-be-valid'],\n            'cookies' => []\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $this->component->startup($event);\n    }\n\n    /**\n     * Test that CSRF checks are not applied to request action requests.\n     *\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testCsrfValidationSkipsRequestAction()\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => ['REQUEST_METHOD' => 'POST'],\n            'params' => ['requested' => 1],\n            'post' => ['_csrfToken' => 'nope'],\n            'cookies' => ['csrfToken' => 'testing123']\n        ]);\n        $controller->response = new Response();\n\n        $event = new Event('Controller.startup', $controller);\n        $result = $this->component->startup($event);\n        $this->assertNull($result, 'No error.');\n        $this->assertEquals('testing123', $controller->request->params['_csrfToken']);\n    }\n\n    /**\n     * Test that the configuration options work.\n     *\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testConfigurationCookieCreate()\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => ['REQUEST_METHOD' => 'GET'],\n            'webroot' => '/dir/'\n        ]);\n        $controller->response = new Response();\n\n        $component = new CsrfComponent($this->registry, [\n            'cookieName' => 'token',\n            'expiry' => '+1 hour',\n            'secure' => true,\n            'httpOnly' => true\n        ]);\n\n        $event = new Event('Controller.startup', $controller);\n        $component->startup($event);\n\n        $this->assertEmpty($controller->response->cookie('csrfToken'));\n        $cookie = $controller->response->cookie('token');\n        $this->assertNotEmpty($cookie, 'Should set a token.');\n        $this->assertRegExp('/^[a-f0-9]+$/', $cookie['value'], 'Should look like a hash.');\n        $this->assertWithinRange((new Time('+1 hour'))->format('U'), $cookie['expire'], 1, 'session duration.');\n        $this->assertEquals('/dir/', $cookie['path'], 'session path.');\n        $this->assertTrue($cookie['secure'], 'cookie security flag missing');\n        $this->assertTrue($cookie['httpOnly'], 'cookie httpOnly flag missing');\n    }\n\n    /**\n     * Test that the configuration options work.\n     *\n     * @return void\n     * @triggers Controller.startup $controller\n     */\n    public function testConfigurationValidate()\n    {\n        $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n        $controller->request = new Request([\n            'environment' => ['REQUEST_METHOD' => 'POST'],\n            'cookies' => ['csrfToken' => 'nope', 'token' => 'yes'],\n            'post' => ['_csrfToken' => 'no match', 'token' => 'yes'],\n        ]);\n        $controller->response = new Response();\n\n        $component = new CsrfComponent($this->registry, [\n            'cookieName' => 'token',\n            'field' => 'token',\n            'expiry' => 90,\n        ]);\n\n        $event = new Event('Controller.startup', $controller);\n        $result = $component->startup($event);\n        $this->assertNull($result, 'Config settings should work.');\n    }\n}\n"], "filenames": ["src/Controller/Component/CsrfComponent.php", "tests/TestCase/Controller/Component/CsrfComponentTest.php"], "buggy_code_start_loc": [97, 64], "buggy_code_end_loc": [98, 297], "fixing_code_start_loc": [97, 64], "fixing_code_end_loc": [98, 305], "type": "CWE-352", "message": "CakePHP 2.x and 3.x before 3.1.5 might allow remote attackers to bypass the CSRF protection mechanism via the _method parameter.", "other": {"cve": {"id": "CVE-2015-8379", "sourceIdentifier": "cve@mitre.org", "published": "2016-01-26T19:59:01.140", "lastModified": "2018-10-09T19:58:32.533", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "CakePHP 2.x and 3.x before 3.1.5 might allow remote attackers to bypass the CSRF protection mechanism via the _method parameter."}, {"lang": "es", "value": "CakePHP 2.x y 3.x en versiones anteriores a 3.1.5 podr\u00eda permitir a atacantes remotos eludir los mecanismos de protecci\u00f3n CSRF a trav\u00e9s del par\u00e1metro _method."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "F638D606-0F5E-40A0-BD06-96DC7C1D4DFD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.0:alpha:*:*:*:*:*:*", "matchCriteriaId": "16B03062-512E-4159-A5ED-C7B1C21467E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.0:beta:*:*:*:*:*:*", "matchCriteriaId": "75E8CA54-F6BD-40CC-8F01-3F43BB80A4D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.0:dev:*:*:*:*:*:*", "matchCriteriaId": "D565A178-E6E9-47EF-B775-6BE04360DD81"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "19C16212-1893-4F12-A65F-81D261A02F46"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "D52088FC-FE25-4AF4-A1F7-4B2BA35FD7EF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "1DAA7679-E6E7-4DC5-B54D-7A35E3AB7B30"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "1888183D-0E4B-4749-8D4D-9F3AEDEED2E9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "81EEF2F4-CED0-42E0-9736-9836024550E8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "F04278B3-68E2-4C2B-B4F2-77F9DFBD5C3C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "184E2232-EE6B-4E31-8D40-22ACE9A93748"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "C5FCCAE9-C943-4B94-B77E-217E7D841829"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "CD1EE771-655A-478C-BE02-C2C47B5740B5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "A4476046-B076-4269-94FC-F5E2BAD83694"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.1.0:alpha:*:*:*:*:*:*", "matchCriteriaId": "354EA8E8-AE17-4ED5-9EA0-E47800D99AB4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.1.0:beta:*:*:*:*:*:*", "matchCriteriaId": "468CAAA0-52B7-4B91-B68D-C9BEF44C28EB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.1.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "B0E45789-4F00-4220-BB94-A2A99EF84D83"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "AF2DC4ED-2100-41E1-9B55-732B892ECFB0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "61F737FE-F0D9-44F3-BB85-6CBC55B8E3C8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "094B2678-A851-4654-BC21-4555DB7BC8D6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "D9EAB542-8174-422D-896E-6BA66A66757A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "7A20F1C5-D73B-4A42-B8E9-B371BB0C62EA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "28051A8A-6CE2-410A-8145-671FB5735D0A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.0:beta:*:*:*:*:*:*", "matchCriteriaId": "494FB851-78F0-4DC3-B599-843A4070B562"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "FCD6F669-68D6-4D7F-AD11-E7B092F4F5A4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "3F340CD7-04DF-4AA0-B6C0-8145D0DAFF94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "DE834442-33B8-4D88-8872-A969D04EA14D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "9B34CD8D-B3F8-4173-A79D-2D41D1A9B70C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "C9B776D3-416B-4AE0-AA90-5EE3C63281D7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "F9946147-C15D-4F2A-AC68-C75E5F628D1C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.5:*:*:*:*:*:*:*", "matchCriteriaId": "9022EAD3-44F1-4F8B-A00F-960BE851C17A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.6:*:*:*:*:*:*:*", "matchCriteriaId": "4063A934-EA27-4697-A6A0-1E538C9F427F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.7:*:*:*:*:*:*:*", "matchCriteriaId": "EE2DFAB3-130F-4FA3-823F-A4BBCA076AB3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.8:*:*:*:*:*:*:*", "matchCriteriaId": "0DDC5195-3A19-4772-9782-94F1F041403C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.2.9:*:*:*:*:*:*:*", "matchCriteriaId": "7E9763F3-7981-47AD-946C-4FEAB32CC866"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "6B1B1708-501A-4389-A5C4-9A4CB20A52F7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.0:beta:*:*:*:*:*:*", "matchCriteriaId": "1E81260A-9814-4C6F-B6D3-CBDF22A616A0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "02A0145B-BECD-4FBB-AC02-BF15A2A602FA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "07AA82B9-87DF-4120-8398-BEF248342E04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "0457A403-56C4-42ED-8020-FB7A4EC5D31A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.2:*:*:*:*:*:*:*", "matchCriteriaId": "FC45DCB1-6A3D-460D-96AB-DE8E1CF6DA6A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.3:*:*:*:*:*:*:*", "matchCriteriaId": "659BF0E6-279A-4412-9E8E-9732D21E4272"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.4:*:*:*:*:*:*:*", "matchCriteriaId": "3A64D83E-78EF-4E76-B451-1C2F8FDDC595"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.5:*:*:*:*:*:*:*", "matchCriteriaId": "AB0A5FF3-578B-458B-B1A3-3BB5D560E1AE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.6:*:*:*:*:*:*:*", "matchCriteriaId": "169A5E41-16BA-4AB3-A924-17002EB5F2DB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.7:*:*:*:*:*:*:*", "matchCriteriaId": "519D4568-3E01-4367-82A2-7D3A2F6B7120"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.8:*:*:*:*:*:*:*", "matchCriteriaId": "5999E469-8353-45EC-83BB-9856EB1CD854"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.9:*:*:*:*:*:*:*", "matchCriteriaId": "53638C66-9ADC-493B-8A84-98E6494CBCBC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.3.10:*:*:*:*:*:*:*", "matchCriteriaId": "C654EFB9-73BB-4599-8198-AC89D7F384B4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "CCEAAD5C-B7BB-4826-8218-FBC085F95AD5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.0:beta:*:*:*:*:*:*", "matchCriteriaId": "B9828C30-DF41-4122-B254-2CF77C73FB0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "BA078C0B-205E-4158-B5D5-DB958E66A313"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "52F66C4B-68CC-440C-ADF0-9F5103331189"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "1E1334BA-B2B3-4009-96D8-58CBE728EADD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "66C0875D-27E8-40A6-8CD2-319D8FE315F9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "74C49797-706A-41E9-ACAE-FA2898C38D3E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "65E9CA42-32A4-41D7-9721-5EB28BDB6C4E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "A695A4AE-9654-44B9-B5CD-3CC76C94D0B9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "2AF53CA3-14F9-4DF9-AB9B-83E43CC37FDA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "4DF91446-2A40-4F18-A91D-A0704BBCEF01"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "B0D50F88-29D6-4F7A-8D4F-90945D9C44FF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "ABADCE68-3FB2-4101-96BF-219FD08A4C95"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "9AAF7339-D727-40D0-AA42-3F45DB24E8DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "D768B67D-95E6-4EE8-B153-CD0C1DAD1B83"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.0:beta:*:*:*:*:*:*", "matchCriteriaId": "528DF04B-F200-4FA8-800E-56CB9F4A9E14"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "80AAF2B6-7D36-4FFE-8E76-8E438134D386"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "C2AFEB08-D13C-432F-B076-4845C7660CF9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "3D32365A-D3B6-43A7-82AE-083770F8C55A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "23B090B7-F36F-4DE1-A8F5-F96F4FAEDC0C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "7F685889-E68D-4914-9081-634C1444EF06"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.4:*:*:*:*:*:*:*", "matchCriteriaId": "73C40C45-7B46-4823-8EC2-BA20D69BFC9F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.5:*:*:*:*:*:*:*", "matchCriteriaId": "2ECF4DB4-41B4-4B2C-A908-2E4DF2BC0AA1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.6:*:*:*:*:*:*:*", "matchCriteriaId": "CC30D573-A40D-4547-A859-835EF786CF3B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.7:*:*:*:*:*:*:*", "matchCriteriaId": "3D92BA30-6D87-498E-A5CA-A61B793185B4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.8:*:*:*:*:*:*:*", "matchCriteriaId": "6A4BF3D9-51B5-4490-A914-D386A3061C78"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.5.9:*:*:*:*:*:*:*", "matchCriteriaId": "65F218EC-15FB-4CDC-8087-773B739EA2D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "39B06F7D-9272-4E53-9029-C9C8EE133D02"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.0:beta:*:*:*:*:*:*", "matchCriteriaId": "59F06C87-1201-4224-8384-09804633D8D8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "D8A99084-E883-4F4B-B1AD-2571B368BADB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "64BB6194-501E-4F15-8729-8C47BC4A965B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "E27044FD-3D2B-481E-B63A-6400ACC116EB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.3:*:*:*:*:*:*:*", "matchCriteriaId": "63637E39-5200-49BB-8748-E3DA361D0FE8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.4:*:*:*:*:*:*:*", "matchCriteriaId": "733683C8-4B3D-4F14-8AD0-06428361B023"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.5:*:*:*:*:*:*:*", "matchCriteriaId": "0C6A6C1E-5C7C-4114-85DA-2BF8842E9F0E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.6:*:*:*:*:*:*:*", "matchCriteriaId": "375C38AC-18BA-44B9-BDA7-9E6A2B5CBFEC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.7:*:*:*:*:*:*:*", "matchCriteriaId": "8D400763-B615-44CC-8D16-877D7A944BBC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.8:*:*:*:*:*:*:*", "matchCriteriaId": "1ADAD764-E93B-40CB-85DB-6E869E01FF28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.9:*:*:*:*:*:*:*", "matchCriteriaId": "61DD9349-3928-4FC8-8DC1-00775188DDC9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.10:*:*:*:*:*:*:*", "matchCriteriaId": "F3DA7D91-6ADE-4A4E-BA6C-F3EE64DADEC1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.11:*:*:*:*:*:*:*", "matchCriteriaId": "DDD48718-9816-4B86-981E-A3EC4BD8377B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.6.12:*:*:*:*:*:*:*", "matchCriteriaId": "F2E76CB1-8F33-46A0-8A53-417287D0E676"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "65FC9F46-A23B-4766-A338-110B655011BF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "0377D2CA-DD5F-4DF2-B19A-E014CB66DF3A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "FDD65C18-6FAF-4801-BA9B-CCD2EF80D55E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.2:*:*:*:*:*:*:*", "matchCriteriaId": "BAE7433E-0976-4CFF-A047-DF0BEC907BBA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.3:*:*:*:*:*:*:*", "matchCriteriaId": "A819659C-DB2A-484C-BE19-8137A76AAD3A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.4:*:*:*:*:*:*:*", "matchCriteriaId": "4E049C6C-A06F-4C66-B676-B55FE14818C6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.5:*:*:*:*:*:*:*", "matchCriteriaId": "498D512A-F571-4BAE-9725-A2DCB05010B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.6:*:*:*:*:*:*:*", "matchCriteriaId": "A9E32507-BF0F-464D-B73C-942F7B016D8C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.7:*:*:*:*:*:*:*", "matchCriteriaId": "3AD6EA6F-1310-4E20-91AF-CBF8C198398B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.8:*:*:*:*:*:*:*", "matchCriteriaId": "7AE29B56-C7C8-4175-B056-BE379D7DE507"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.7.9:*:*:*:*:*:*:*", "matchCriteriaId": "70A20E6C-2524-41B5-8D2F-A28DB2616A15"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:2.8.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "B4B5A134-B9B6-4CD5-B283-11EF89A0FE94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "9CA441DC-E34C-4BE7-830C-03B081201884"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "AE18AC01-998B-4221-8BD2-4D9F3316088E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "73EEB2A2-D106-44A3-A4EB-E1C6B4E9964F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "88A76BF8-C95A-4AA9-8553-3660A778C509"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "52BC63B9-C4EC-4F76-9C1C-EB05E7B08D4A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "824613CB-7CD7-4D62-9168-D8FD1B14D1C9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:dev1:*:*:*:*:*:*", "matchCriteriaId": "45341B4D-E8D1-4174-B8FD-62084A6A617A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:dev2:*:*:*:*:*:*", "matchCriteriaId": "4E5F6E95-08B5-4DDD-8B03-1C493AC50140"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:dev3:*:*:*:*:*:*", "matchCriteriaId": "9B120889-BD3B-49D4-B521-1FEAB53901C1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "F0224F74-C696-4C33-AA19-52B6D2ACB4BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "E45A1BA5-79A1-4F54-A955-7FA952721EAD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "54D04CE6-306D-4407-B9B9-1DBB802FA433"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "2AEC6ADE-F8D2-40CB-94BB-1C6A91F56D75"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "D9CD5352-8CAF-48F8-AE5C-69EC9A08E278"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "7C99BED2-436C-433D-B307-008F81C9FFA3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "4456F843-0D8A-416F-B4A1-AA562F41F70E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "B36AB35D-4472-4B3E-95D2-EC1CD6FDA4D9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "8E5888B3-89B6-41A5-AD2D-07F5CD88F2B2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "17BFA0AE-E0F4-4E88-95CF-D9091E729939"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "2DFFD30A-193F-4157-BE5B-9FBBABB4B1EC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "5E47041A-5493-4C3B-BFD4-C005F66D9CDF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.11:*:*:*:*:*:*:*", "matchCriteriaId": "37053366-ECB2-4600-B2E1-ACB7C0DB759A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.12:*:*:*:*:*:*:*", "matchCriteriaId": "29794FAB-131A-4B88-9DB2-42EE3DDDC550"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.13:*:*:*:*:*:*:*", "matchCriteriaId": "7370EA37-B29E-4BC1-B06B-B1F439DD4D63"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.14:*:*:*:*:*:*:*", "matchCriteriaId": "4E389743-168C-4777-A26D-3466441944D7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.0.15:*:*:*:*:*:*:*", "matchCriteriaId": "57766F28-DB73-4FF4-9D8D-8BA4DC6D8E1F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "0896BD8D-41F9-4494-90AD-B58015AE819F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.1.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "B740A99F-426D-4F0A-A6DF-3E6BEFAA430F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.1.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "37A53DE4-DCF1-4067-B345-DC3FB79E6BDA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.1.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "15616929-C9D4-41B9-9552-F943011A7CF8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "4DE7FF5F-EB72-40CA-8F45-CE2280F0D4C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "EA27742D-19AB-4984-9FBE-58B6B5DB5139"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "27CB3837-7516-4801-AA7F-131743CCE8C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cakephp:cakephp:3.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "EFA6BD63-790C-477A-A37D-17746E21C9CF"}]}]}], "references": [{"url": "http://bakery.cakephp.org/2015/11/29/cakephp_315_released.html", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://blog.mindedsecurity.com/2016/01/request-parameter-method-may-lead-to.html", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "http://karmainsecurity.com/KIS-2016-01", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "http://packetstormsecurity.com/files/135301/CakePHP-3.2.0-CSRF-Bypass.html", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "http://seclists.org/fulldisclosure/2016/Jan/42", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "http://www.securityfocus.com/archive/1/537317/100/0/threaded", "source": "cve@mitre.org"}, {"url": "https://github.com/cakephp/cakephp/commit/0f818a23a876c01429196bf7623e1e94a50230f0", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/cakephp/cakephp/commit/0f818a23a876c01429196bf7623e1e94a50230f0"}}