{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\nfunction t(key, defaultValue, placeholders) {\n    if (!key) {\n        return \"\";\n    }\n\n    var alreadyTranslated = pimcore.globalmanager.get(\"translations_admin_translated_values\");\n    if(!alreadyTranslated) {\n        alreadyTranslated = [];\n        pimcore.globalmanager.add(\"translations_admin_translated_values\", []);\n    }\n\n    // make sure 'key' is a string\n    key = String(key);\n\n    // remove plus at the start and the end to avoid double translations\n    key = key.replace(/^[\\+]+(.*)[\\+]+$/, function(match, $1, offset, original) {\n        return $1;\n    });\n\n    var originalKey = key;\n    // the maximum length of a translation key are 190 characters\n    if (key.length > 190) {\n        if (!defaultValue) {\n            return key;\n        }\n\n        return defaultValue;\n    }\n\n    if (pimcore && pimcore.system_i18n && (pimcore.system_i18n[key] || pimcore.system_i18n[originalKey])) {\n        var trans = pimcore.system_i18n[originalKey] ? pimcore.system_i18n[originalKey] : pimcore.system_i18n[key];\n\n        // find and replace placeholders, if provided\n        if (placeholders) {\n            let pKeys = Object.keys(placeholders);\n\n            for (let i = 0; i < pKeys.length; i++) {\n                let regExp = new RegExp('\\{(' + pKeys[i] + ')\\}', 'gi');\n                let replace = placeholders[pKeys[i]];\n\n                if (trans.match(regExp)) {\n                    trans = trans.replace(regExp, replace);\n                }\n            }\n        }\n\n        pimcore.globalmanager.get(\"translations_admin_translated_values\").push(trans);\n        return trans;\n    }\n\n    var transKeys = pimcore && pimcore.system_i18n ? Object.keys(pimcore.system_i18n) : {};\n    if(pimcore && pimcore.system_i18n && transKeys.indexOf(key) === -1 && transKeys.indexOf(originalKey) === -1){\n        if(!defaultValue && !in_array(key, alreadyTranslated)) {\n            if(pimcore.globalmanager.exists(\"translations_admin_missing\")) {\n                if (!in_array(key, pimcore.globalmanager.get(\"translations_admin_added\")) &&\n                    !in_array(key, pimcore.globalmanager.get(\"translations_admin_missing\"))) {\n                    pimcore.globalmanager.get(\"translations_admin_missing\").push(key);\n                }\n            }\n        }\n    }\n\n    if(parent.pimcore && parent.pimcore.settings.debug_admin_translations){ // use parent here, because it's also used in the editmode iframe\n        return \"+\" + key + \"+\";\n    }  else if (defaultValue) {\n        return defaultValue;\n    } else {\n        return originalKey;\n    }\n}\n\nMath.sec = function(x) {\n    return 1 / Math.cos(x);\n};\n\n\n\nfunction RealTypeOf(v) {\n  if (typeof(v) == \"object\") {\n    if (v === null) {\n        return \"null\";\n    }\n    if (v.constructor == (new Array).constructor) {\n        return \"array\";\n    }\n    if (v.constructor == (new Date).constructor) {\n        return \"date\";\n    }\n    if (v.constructor == (new RegExp).constructor) {\n        return \"regex\";\n    }\n    return \"object\";\n  }\n  return typeof(v);\n}\n\n\n\nfunction FormatJSON(oData, sIndent) {\n    if (arguments.length < 2) {\n        var sIndent = \"\";\n    }\n    var sIndentStyle = \"    \";\n    var sDataType = RealTypeOf(oData);\n\n    // open object\n    if (sDataType == \"array\") {\n        if (oData.length == 0) {\n            return \"[]\";\n        }\n        var sHTML = \"[\";\n    } else {\n        var iCount = 0;\n        for (let key in oData) {\n            if (oData.hasOwnProperty(key)) {\n                iCount++;\n            }\n        }\n        if (iCount == 0) { // object is empty\n            return \"{}\";\n        }\n        var sHTML = \"{\";\n    }\n\n    // loop through items\n    var iCount = 0;\n    var vValue = null;\n    for (let sKey in oData) {\n        vValue = oData[sKey];\n        if (iCount > 0) {\n            sHTML += \",\";\n        }\n        if (sDataType == \"array\") {\n            sHTML += (\"\\n\" + sIndent + sIndentStyle);\n        } else {\n            sHTML += (\"\\n\" + sIndent + sIndentStyle + \"\\\"\" + sKey + \"\\\"\" + \": \");\n        }\n\n        // display relevant data type\n        switch (RealTypeOf(vValue)) {\n            case \"array\":\n            case \"object\":\n                sHTML += FormatJSON(vValue, (sIndent + sIndentStyle));\n                break;\n            case \"boolean\":\n            case \"number\":\n                sHTML += vValue.toString();\n                break;\n            case \"null\":\n                sHTML += \"null\";\n                break;\n            case \"string\":\n                sHTML += (\"\\\"\" + vValue + \"\\\"\");\n                break;\n            default:\n                sHTML += (\"TYPEOF: \" + typeof(vValue));\n        }\n\n        // loop\n        iCount++;\n    }\n\n    // close object\n    if (sDataType == \"array\") {\n        sHTML += (\"\\n\" + sIndent + \"]\");\n    } else {\n        sHTML += (\"\\n\" + sIndent + \"}\");\n    }\n\n    // return\n    return sHTML;\n}\n\n\nfunction in_arrayi(needle, haystack) {\n    return in_array(needle.toLocaleLowerCase(), array_map(strtolower, haystack));\n}\n\n\nfunction strtolower (str) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Onno Marsman\n    // *     example 1: strtolower('Kevin van Zonneveld');\n    // *     returns 1: 'kevin van zonneveld'\n    return (str + '').toLowerCase();\n}\n\n\nfunction array_map (callback) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Andrea Giammarchi (http://webreflection.blogspot.com)\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // %        note 1: Takes a function as an argument, not a function's name\n    // %        note 2: If the callback is a string, it can only work if the function name is in the global context\n    // *     example 1: array_map( function (a){return (a * a * a)}, [1, 2, 3, 4, 5] );\n    // *     returns 1: [ 1, 8, 27, 64, 125 ]\n    var argc = arguments.length,\n        argv = arguments;\n    var j = argv[1].length,\n        i = 0,\n        k = 1,\n        m = 0;\n    var tmp = [],\n        tmp_ar = [];\n\n    while (i < j) {\n        while (k < argc) {\n            tmp[m++] = argv[k++][i];\n        }\n\n        m = 0;\n        k = 1;\n\n        if (callback) {\n            if (typeof callback === 'string') {\n                callback = this.window[callback];\n            }\n            tmp_ar[i++] = callback.apply(null, tmp);\n        } else {\n            tmp_ar[i++] = tmp;\n        }\n\n        tmp = [];\n    }\n\n    return tmp_ar;\n}\n\n\n\nfunction is_numeric(mixed_var) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: David\n    // +   improved by: taith\n    // +   bugfixed by: Tim de Koning\n    // +   bugfixed by: WebDevHobo (http://webdevhobo.blogspot.com/)\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: is_numeric(186.31);\n    // *     returns 1: true\n    // *     example 2: is_numeric('Kevin van Zonneveld');\n    // *     returns 2: false\n    // *     example 3: is_numeric('+186.31e2');\n    // *     returns 3: true\n    // *     example 4: is_numeric('');\n    // *     returns 4: false\n    // *     example 4: is_numeric([]);\n    // *     returns 4: false\n\n    return (typeof(mixed_var) === 'number' || typeof(mixed_var) === 'string') && mixed_var !== '' && !isNaN(mixed_var);\n}\n\n\n\nfunction in_array(needle, haystack, argStrict) {\n    // Checks if the given value exists in the array\n    //\n    // version: 905.3120\n    // discuss at: http://phpjs.org/functions/in_array\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: vlado houba\n    // *     example 1: in_array('van', ['Kevin', 'van', 'Zonneveld']);\n    // *     returns 1: true\n    // *     example 2: in_array('vlado', {0: 'Kevin', vlado: 'van', 1: 'Zonneveld'});\n    // *     returns 2: false\n    // *     example 3: in_array(1, ['1', '2', '3']);\n    // *     returns 3: true\n    // *     example 3: in_array(1, ['1', '2', '3'], false);\n    // *     returns 3: true\n    // *     example 4: in_array(1, ['1', '2', '3'], true);\n    // *     returns 4: false\n    var key = '', strict = !!argStrict;\n\n    if (strict) {\n        for (key in haystack) {\n            if (haystack[key] === needle) {\n                return true;\n            }\n        }\n    } else {\n        for (key in haystack) {\n            if (haystack[key] == needle) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n\nfunction uniqid(prefix, more_entropy) {\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +    revised by: Kankrelune (http://www.webfaktory.info/)\n    // %        note 1: Uses an internal counter (in php_js global) to avoid collision\n    // *     example 1: uniqid();\n    // *     returns 1: 'a30285b160c14'\n    // *     example 2: uniqid('foo');\n    // *     returns 2: 'fooa30285b1cd361'\n    // *     example 3: uniqid('bar', true);\n    // *     returns 3: 'bara20285b23dfd1.31879087'\n    if (typeof prefix == 'undefined') {\n        prefix = \"\";\n    }\n\n    var retId;\n    var formatSeed = function(seed, reqWidth) {\n        seed = parseInt(seed, 10).toString(16); // to hex str\n        if (reqWidth < seed.length) { // so long we split\n            return seed.slice(seed.length - reqWidth);\n        }\n        if (reqWidth > seed.length) { // so short we pad\n            return Array(1 + (reqWidth - seed.length)).join('0') + seed;\n        }\n        return seed;\n    };\n\n    // BEGIN REDUNDANT\n    if (!this.php_js) {\n        this.php_js = {};\n    }\n    // END REDUNDANT\n    if (!this.php_js.uniqidSeed) { // init seed with big random int\n        this.php_js.uniqidSeed = Math.floor(Math.random() * 0x75bcd15);\n    }\n    this.php_js.uniqidSeed++;\n\n    retId = prefix; // start with prefix, add current milliseconds hex string\n    retId += formatSeed(parseInt(new Date().getTime() / 1000, 10), 8);\n    retId += formatSeed(this.php_js.uniqidSeed, 5); // add seed hex string\n\n    if (more_entropy) {\n        // for more entropy we add a float lower to 10\n        retId += (Math.random() * 10).toFixed(8).toString();\n    }\n\n    return retId;\n}\n\n\nfunction empty (mixed_var) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Philippe Baumann\n    // +      input by: Onno Marsman\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: LH\n    // +   improved by: Onno Marsman\n    // +   improved by: Francesco\n    // +   improved by: Marc Jansen\n    // +   input by: Stoyan Kyosev (http://www.svest.org/)\n    // *     example 1: empty(null);\n    // *     returns 1: true\n    // *     example 2: empty(undefined);\n    // *     returns 2: true\n    // *     example 3: empty([]);\n    // *     returns 3: true\n    // *     example 4: empty({});\n    // *     returns 4: true\n    // *     example 5: empty({'aFunc' : function () { alert('humpty'); } });\n    // *     returns 5: false\n    var key;\n\n    if (mixed_var === \"\" || mixed_var === 0 || mixed_var === \"0\" || mixed_var === null || mixed_var === false\n                                                            || typeof mixed_var === 'undefined') {\n        return true;\n    }\n\n    if (typeof mixed_var == 'object') {\n        for (key in mixed_var) {\n            return false;\n        }\n        return true;\n    }\n\n    return false;\n}\n\nfunction str_replace(search, replace, subject, count) {\n    // Replaces all occurrences of search in haystack with replace\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/str_replace\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Gabriel Paderni\n    // +   improved by: Philip Peterson\n    // +   improved by: Simon Willison (http://simonwillison.net)\n    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n    // +   bugfixed by: Anton Ongson\n    // +      input by: Onno Marsman\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +    tweaked by: Onno Marsman\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   input by: Oleg Eremeev\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Oleg Eremeev\n    // %          note 1: The count parameter must be passed as a string in order\n    // %          note 1:  to find a global variable in which the result will be given\n    // *     example 1: str_replace(' ', '.', 'Kevin van Zonneveld');\n    // *     returns 1: 'Kevin.van.Zonneveld'\n    // *     example 2: str_replace(['{name}', 'l'], ['hello', 'm'], '{name}, lars');\n    // *     returns 2: 'hemmo, mars'\n    var i = 0, j = 0, temp = '', repl = '', sl = 0, fl = 0,\n            f = [].concat(search),\n            r = [].concat(replace),\n            s = subject,\n            ra = r instanceof Array, sa = s instanceof Array;\n    s = [].concat(s);\n    if (count) {\n        this.window[count] = 0;\n    }\n\n    for (i = 0,sl = s.length; i < sl; i++) {\n        if (s[i] === '') {\n            continue;\n        }\n        for (j = 0,fl = f.length; j < fl; j++) {\n            temp = s[i] + '';\n            repl = ra ? (r[j] !== undefined ? r[j] : '') : r[0];\n            s[i] = (temp).split(f[j]).join(repl);\n            if (count && s[i] !== temp) {\n                this.window[count] += (temp.length - s[i].length) / f[j].length;\n            }\n        }\n    }\n    return sa ? s : s[0];\n}\n\n\nfunction trim(str, charlist) {\n    // Strips whitespace from the beginning and end of a string\n    //\n    // version: 905.1001\n    // discuss at: http://phpjs.org/functions/trim\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: mdsjack (http://www.mdsjack.bo.it)\n    // +   improved by: Alexander Ermolaev (http://snippets.dzone.com/user/AlexanderErmolaev)\n    // +      input by: Erkekjetter\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: DxGx\n    // +   improved by: Steven Levithan (http://blog.stevenlevithan.com)\n    // +    tweaked by: Jack\n    // +   bugfixed by: Onno Marsman\n    // *     example 1: trim('    Kevin van Zonneveld    ');\n    // *     returns 1: 'Kevin van Zonneveld'\n    // *     example 2: trim('Hello World', 'Hdle');\n    // *     returns 2: 'o Wor'\n    // *     example 3: trim(16, 1);\n    // *     returns 3: 6\n    var whitespace, l = 0, i = 0;\n    str += '';\n\n    if (!charlist) {\n        // default list\n        whitespace = \" \\n\\r\\t\\f\\x0b\\xa0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000\";\n    } else {\n        // preg_quote custom list\n        charlist += '';\n        whitespace = charlist.replace(/([\\[\\]\\(\\)\\.\\?\\/\\*\\{\\}\\+\\$\\^\\:])/g, '$1');\n    }\n\n    l = str.length;\n    for (i = 0; i < l; i++) {\n        if (whitespace.indexOf(str.charAt(i)) === -1) {\n            str = str.substring(i);\n            break;\n        }\n    }\n\n    l = str.length;\n    for (i = l - 1; i >= 0; i--) {\n        if (whitespace.indexOf(str.charAt(i)) === -1) {\n            str = str.substring(0, i + 1);\n            break;\n        }\n    }\n\n    return whitespace.indexOf(str.charAt(0)) === -1 ? str : '';\n}\n\n\nfunction base64_encode(data) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Bayron Guevara\n    // +   improved by: Thunder.m\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // -    depends on: utf8_encode\n    // *     example 1: base64_encode('Kevin van Zonneveld');\n    // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='\n\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['atob'] == 'function') {\n    //    return atob(data);\n    //}\n\n    var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = \"\", tmp_arr = [];\n\n    if (!data) {\n        return data;\n    }\n\n    data = this.utf8_encode(data + '');\n\n    do { // pack three octets into four hexets\n        o1 = data.charCodeAt(i++);\n        o2 = data.charCodeAt(i++);\n        o3 = data.charCodeAt(i++);\n\n        bits = o1 << 16 | o2 << 8 | o3;\n\n        h1 = bits >> 18 & 0x3f;\n        h2 = bits >> 12 & 0x3f;\n        h3 = bits >> 6 & 0x3f;\n        h4 = bits & 0x3f;\n\n        // use hexets to index into b64, and append result to encoded string\n        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n    } while (i < data.length);\n\n    enc = tmp_arr.join('');\n\n    switch (data.length % 3) {\n        case 1:\n            enc = enc.slice(0, -2) + '==';\n            break;\n        case 2:\n            enc = enc.slice(0, -1) + '=';\n            break;\n    }\n\n    return enc;\n}\n\nfunction base64_decode(data) {\n    // Decodes string using MIME base64 algorithm\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/base64_decode\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Thunder.m\n    // +      input by: Aman Gupta\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // -    depends on: utf8_decode\n    // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');\n    // *     returns 1: 'Kevin van Zonneveld'\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['btoa'] == 'function') {\n    //    return btoa(data);\n    //}\n\n    var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, dec = \"\", tmp_arr = [];\n\n    if (!data) {\n        return data;\n    }\n\n    data += '';\n\n    do {  // unpack four hexets into three octets using index points in b64\n        h1 = b64.indexOf(data.charAt(i++));\n        h2 = b64.indexOf(data.charAt(i++));\n        h3 = b64.indexOf(data.charAt(i++));\n        h4 = b64.indexOf(data.charAt(i++));\n\n        bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n\n        o1 = bits >> 16 & 0xff;\n        o2 = bits >> 8 & 0xff;\n        o3 = bits & 0xff;\n\n        if (h3 == 64) {\n            tmp_arr[ac++] = String.fromCharCode(o1);\n        } else if (h4 == 64) {\n            tmp_arr[ac++] = String.fromCharCode(o1, o2);\n        } else {\n            tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);\n        }\n    } while (i < data.length);\n\n    dec = tmp_arr.join('');\n    dec = this.utf8_decode(dec);\n\n    return dec;\n}\n\n\nfunction utf8_decode(str_data) {\n    // Converts a UTF-8 encoded string to ISO-8859-1\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/utf8_decode\n    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\n    // +      input by: Aman Gupta\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Norman \"zEh\" Fuchs\n    // +   bugfixed by: hitwork\n    // +   bugfixed by: Onno Marsman\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // *     example 1: utf8_decode('Kevin van Zonneveld');\n    // *     returns 1: 'Kevin van Zonneveld'\n    var tmp_arr = [], i = 0, ac = 0, c1 = 0, c2 = 0, c3 = 0;\n\n    str_data += '';\n\n    while (i < str_data.length) {\n        c1 = str_data.charCodeAt(i);\n        if (c1 < 128) {\n            tmp_arr[ac++] = String.fromCharCode(c1);\n            i++;\n        } else if ((c1 > 191) && (c1 < 224)) {\n            c2 = str_data.charCodeAt(i + 1);\n            tmp_arr[ac++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n            i += 2;\n        } else {\n            c2 = str_data.charCodeAt(i + 1);\n            c3 = str_data.charCodeAt(i + 2);\n            tmp_arr[ac++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n            i += 3;\n        }\n    }\n\n    return tmp_arr.join('');\n}\n\n\nfunction ucfirst(str) {\n    // Makes a string's first character uppercase\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/ucfirst\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: ucfirst('kevin van zonneveld');\n    // *     returns 1: 'Kevin van zonneveld'\n    str += '';\n    var f = str.charAt(0).toUpperCase();\n    return f + str.substr(1);\n}\n\n\nfunction array_search(needle, haystack, argStrict) {\n    // Searches the array for a given value and returns the corresponding key if successful\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/array_search\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // *     example 1: array_search('zonneveld', {firstname: 'kevin', middle: 'van', surname: 'zonneveld'});\n    // *     returns 1: 'surname'\n\n    var strict = !!argStrict;\n    var key = '';\n\n    for (key in haystack) {\n        if ((strict && haystack[key] === needle) || (!strict && haystack[key] == needle)) {\n            return key;\n        }\n    }\n\n    return false;\n}\n\n\nfunction mergeObject(p, c) {\n\n    var keys = Object.keys(p);\n\n    for (var i = 0; i < keys.length; i++) {\n        if (!c[keys[i]]) {\n            c[keys[i]] = p[keys[i]];\n        }\n    }\n\n    return c;\n}\n\n\nfunction replace_html_event_attributes(value) {\n    return value.replace(/ on[^=]+=/, function (attributeName) {\n        return ' data-' + trim(attributeName);\n    });\n}\n\nfunction strip_tags(str, allowed_tags) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Luke Godfrey\n    // +      input by: Pul\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +      input by: Alex\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Marc Palau\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Eric Nagel\n    // +      input by: Bobby Drake\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Tomasz Wesolowski\n    // *     example 1: strip_tags('<p>Kevin</p> <br /><b>van</b> <i>Zonneveld</i>', '<i><b>');\n    // *     returns 1: 'Kevin <b>van</b> <i>Zonneveld</i>'\n    // *     example 2: strip_tags('<p>Kevin <img src=\"someimage.png\" onmouseover=\"someFunction()\">van <i>Zonneveld</i></p>', '<p>');\n    // *     returns 2: '<p>Kevin van Zonneveld</p>'\n    // *     example 3: strip_tags(\"<a href='http://kevin.vanzonneveld.net'>Kevin van Zonneveld</a>\", \"<a>\");\n    // *     returns 3: '<a href='http://kevin.vanzonneveld.net'>Kevin van Zonneveld</a>'\n    // *     example 4: strip_tags('1 < 5 5 > 1');\n    // *     returns 4: '1 < 5 5 > 1'\n\n    var key = '', allowed = false;\n    var matches = [];\n    var allowed_array = [];\n    var allowed_tag = '';\n    var i = 0;\n    var k = '';\n    var html = '';\n\n    var replacer = function (search, replace, str) {\n        return str.split(search).join(replace);\n    };\n\n    // Build allowes tags associative array\n    if (allowed_tags) {\n        allowed_array = allowed_tags.match(/([a-zA-Z0-9]+)/gi);\n    }\n\n    str += '';\n\n    // Match tags\n    matches = str.match(/(<\\/?[\\S][^>]*>)/gi);\n\n    // Go through all HTML tags\n    for (key in matches) {\n        if (isNaN(key)) {\n            // IE7 Hack\n            continue;\n        }\n\n        // Save HTML tag\n        html = matches[key].toString();\n\n        // Is tag not in allowed list? Remove from str!\n        allowed = false;\n\n        // Go through all allowed tags\n        for (k in allowed_array) {\n            // Init\n            allowed_tag = allowed_array[k];\n            i = -1;\n\n            if (i != 0) {\n                i = html.toLowerCase().indexOf('<' + allowed_tag + '>');\n            }\n            if (i != 0) {\n                i = html.toLowerCase().indexOf('<' + allowed_tag + ' ');\n            }\n            if (i != 0) {\n                i = html.toLowerCase().indexOf('</' + allowed_tag);\n            }\n\n            // Determine\n            if (i == 0) {\n                allowed = true;\n                break;\n            }\n        }\n\n        if (!allowed) {\n            str = replacer(html, \"\", str); // Custom replace. No regexing\n        }\n    }\n\n    return str;\n}\n\n\nfunction md5(str) {\n    // Calculate the md5 hash of a string\n    //\n    // version: 909.322\n    // discuss at: http://phpjs.org/functions/md5    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\n    // + namespaced by: Michael White (http://getsprink.com)\n    // +    tweaked by: Jack\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // -    depends on: utf8_encode\n    // *     example 1: md5('Kevin van Zonneveld');\n    // *     returns 1: '6e658d4bfcb59cc13f96c14450ac40b9'\n    var xl;\n    var rotateLeft = function (lValue, iShiftBits) {\n        return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));\n    };\n    var addUnsigned = function (lX, lY) {\n        var lX4,lY4,lX8,lY8,lResult;\n        lX8 = (lX & 0x80000000);\n        lY8 = (lY & 0x80000000);\n        lX4 = (lX & 0x40000000);\n        lY4 = (lY & 0x40000000);\n        lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);\n        if (lX4 & lY4) {\n            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n        }\n        if (lX4 | lY4) {\n            if (lResult & 0x40000000) {\n                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n            } else {\n                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n            }\n        } else {\n            return (lResult ^ lX8 ^ lY8);\n        }\n    };\n    var _F = function (x, y, z) {\n        return (x & y) | ((~x) & z);\n    };\n    var _G = function (x, y, z) {\n        return (x & z) | (y & (~z));\n    };\n    var _H = function (x, y, z) {\n        return (x ^ y ^ z);\n    };\n    var _I = function (x, y, z) {\n        return (y ^ (x | (~z)));\n    };\n    var _FF = function (a, b, c, d, x, s, ac) {\n        a = addUnsigned(a, addUnsigned(addUnsigned(_F(b, c, d), x), ac));\n        return addUnsigned(rotateLeft(a, s), b);\n    };\n    var _GG = function (a, b, c, d, x, s, ac) {\n        a = addUnsigned(a, addUnsigned(addUnsigned(_G(b, c, d), x), ac));\n        return addUnsigned(rotateLeft(a, s), b);\n    };\n    var _HH = function (a, b, c, d, x, s, ac) {\n        a = addUnsigned(a, addUnsigned(addUnsigned(_H(b, c, d), x), ac));\n        return addUnsigned(rotateLeft(a, s), b);\n    };\n    var _II = function (a, b, c, d, x, s, ac) {\n        a = addUnsigned(a, addUnsigned(addUnsigned(_I(b, c, d), x), ac));\n        return addUnsigned(rotateLeft(a, s), b);\n    };\n    var convertToWordArray = function (str) {\n        var lWordCount;\n        var lMessageLength = str.length;\n        var lNumberOfWords_temp1 = lMessageLength + 8;\n        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;\n        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;\n        var lWordArray = new Array(lNumberOfWords - 1);\n        var lBytePosition = 0;\n        var lByteCount = 0;\n        while (lByteCount < lMessageLength) {\n            lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n            lBytePosition = (lByteCount % 4) * 8;\n            lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition));\n            lByteCount++;\n        }\n        lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n        lBytePosition = (lByteCount % 4) * 8;\n        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);\n        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;\n        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;\n        return lWordArray;\n    };\n\n    var wordToHex = function (lValue) {\n        var wordToHexValue = \"\",wordToHexValue_temp = \"\",lByte,lCount;\n        for (lCount = 0; lCount <= 3; lCount++) {\n            lByte = (lValue >>> (lCount * 8)) & 255;\n            wordToHexValue_temp = \"0\" + lByte.toString(16);\n            wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);\n        }\n        return wordToHexValue;\n    };\n\n    var x = [],        k,AA,BB,CC,DD,a,b,c,d,\n            S11 = 7, S12 = 12, S13 = 17, S14 = 22,\n            S21 = 5, S22 = 9 , S23 = 14, S24 = 20,\n            S31 = 4, S32 = 11, S33 = 16, S34 = 23,\n            S41 = 6, S42 = 10, S43 = 15, S44 = 21;\n    str = this.utf8_encode(str);\n    x = convertToWordArray(str);\n    a = 0x67452301;\n    b = 0xEFCDAB89;\n    c = 0x98BADCFE;\n    d = 0x10325476;\n    xl = x.length;\n    for (k = 0; k < xl; k += 16) {\n        AA = a;\n        BB = b;\n        CC = c;\n        DD = d;\n        a = _FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);\n        d = _FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);\n        c = _FF(c, d, a, b, x[k + 2], S13, 0x242070DB);\n        b = _FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);\n        a = _FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);\n        d = _FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);\n        c = _FF(c, d, a, b, x[k + 6], S13, 0xA8304613);\n        b = _FF(b, c, d, a, x[k + 7], S14, 0xFD469501);\n        a = _FF(a, b, c, d, x[k + 8], S11, 0x698098D8);\n        d = _FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);\n        c = _FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);\n        b = _FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);\n        a = _FF(a, b, c, d, x[k + 12], S11, 0x6B901122);\n        d = _FF(d, a, b, c, x[k + 13], S12, 0xFD987193);\n        c = _FF(c, d, a, b, x[k + 14], S13, 0xA679438E);\n        b = _FF(b, c, d, a, x[k + 15], S14, 0x49B40821);\n        a = _GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);\n        d = _GG(d, a, b, c, x[k + 6], S22, 0xC040B340);\n        c = _GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);\n        b = _GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);\n        a = _GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);\n        d = _GG(d, a, b, c, x[k + 10], S22, 0x2441453);\n        c = _GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);\n        b = _GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);\n        a = _GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);\n        d = _GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);\n        c = _GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);\n        b = _GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);\n        a = _GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);\n        d = _GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);\n        c = _GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);\n        b = _GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);\n        a = _HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);\n        d = _HH(d, a, b, c, x[k + 8], S32, 0x8771F681);\n        c = _HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);\n        b = _HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);\n        a = _HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);\n        d = _HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);\n        c = _HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);\n        b = _HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);\n        a = _HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);\n        d = _HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);\n        c = _HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);\n        b = _HH(b, c, d, a, x[k + 6], S34, 0x4881D05);\n        a = _HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);\n        d = _HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);\n        c = _HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);\n        b = _HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);\n        a = _II(a, b, c, d, x[k + 0], S41, 0xF4292244);\n        d = _II(d, a, b, c, x[k + 7], S42, 0x432AFF97);\n        c = _II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);\n        b = _II(b, c, d, a, x[k + 5], S44, 0xFC93A039);\n        a = _II(a, b, c, d, x[k + 12], S41, 0x655B59C3);\n        d = _II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);\n        c = _II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);\n        b = _II(b, c, d, a, x[k + 1], S44, 0x85845DD1);\n        a = _II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);\n        d = _II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);\n        c = _II(c, d, a, b, x[k + 6], S43, 0xA3014314);\n        b = _II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);\n        a = _II(a, b, c, d, x[k + 4], S41, 0xF7537E82);\n        d = _II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);\n        c = _II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);\n        b = _II(b, c, d, a, x[k + 9], S44, 0xEB86D391);\n        a = addUnsigned(a, AA);\n        b = addUnsigned(b, BB);\n        c = addUnsigned(c, CC);\n        d = addUnsigned(d, DD);\n    }\n\n    var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);\n    return temp.toLowerCase();\n}\n\nfunction utf8_encode(string) {\n    // Encodes an ISO-8859-1 string to UTF-8\n    //\n    // version: 909.322\n    // discuss at: http://phpjs.org/functions/utf8_encode    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: sowberry\n    // +    tweaked by: Jack\n    // +   bugfixed by: Onno Marsman    // +   improved by: Yves Sucaet\n    // +   bugfixed by: Onno Marsman\n    // +   bugfixed by: Ulrich\n    // *     example 1: utf8_encode('Kevin van Zonneveld');\n    // *     returns 1: 'Kevin van Zonneveld'    var string = (argString+''); // .replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n\n    var utftext = \"\";\n    var start, end;\n    var stringl = 0;\n    start = end = 0;\n    stringl = string.length;\n    for (var n = 0; n < stringl; n++) {\n        var c1 = string.charCodeAt(n);\n        var enc = null;\n\n        if (c1 < 128) {\n            end++;\n        } else if (c1 > 127 && c1 < 2048) {\n            enc = String.fromCharCode((c1 >> 6) | 192) + String.fromCharCode((c1 & 63) | 128);\n        } else {\n            enc = String.fromCharCode((c1 >> 12) | 224) + String.fromCharCode(((c1 >> 6) & 63) | 128) + String.fromCharCode((c1 & 63) | 128);\n        }\n        if (enc !== null) {\n            if (end > start) {\n                utftext += string.substring(start, end);\n            }\n            utftext += enc;\n            start = end = n + 1;\n        }\n    }\n\n    if (end > start) {\n        utftext += string.substring(start, string.length);\n    }\n\n    return utftext;\n}\n\n\nfunction intval(mixed_var, base) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: stensi\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   input by: Matteo\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: intval('Kevin van Zonneveld');\n    // *     returns 1: 0\n    // *     example 2: intval(4.2);\n    // *     returns 2: 4\n    // *     example 3: intval(42, 8);\n    // *     returns 3: 42\n    // *     example 4: intval('09');\n    // *     returns 4: 9\n    // *     example 5: intval('1e', 16);\n    // *     returns 5: 30\n\n    var tmp;\n\n    var type = typeof( mixed_var );\n\n    if (type === 'boolean') {\n        return (mixed_var) ? 1 : 0;\n    } else if (type === 'string') {\n        tmp = parseInt(mixed_var, base || 10);\n        return (isNaN(tmp) || !isFinite(tmp)) ? 0 : tmp;\n    } else if (type === 'number' && isFinite(mixed_var)) {\n        return Math.floor(mixed_var);\n    } else {\n        return 0;\n    }\n}\n\n\nfunction nl2br (str, is_xhtml) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Philip Peterson\n    // +   improved by: Onno Marsman\n    // +   improved by: Atli \u00de\u00f3r\n    // +   bugfixed by: Onno Marsman\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +   improved by: Maximusya\n    // *     example 1: nl2br('Kevin\\nvan\\nZonneveld');\n    // *     returns 1: 'Kevin<br />\\nvan<br />\\nZonneveld'\n    // *     example 2: nl2br(\"\\nOne\\nTwo\\n\\nThree\\n\", false);\n    // *     returns 2: '<br>\\nOne<br>\\nTwo<br>\\n<br>\\nThree<br>\\n'\n    // *     example 3: nl2br(\"\\nOne\\nTwo\\n\\nThree\\n\", true);\n    // *     returns 3: '<br />\\nOne<br />\\nTwo<br />\\n<br />\\nThree<br />\\n'\n\n    var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br />' : '<br>';\n\n    return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1'+ breakTag +'$2');\n}\n\n\nfunction preg_quote (str, delimiter) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: booeyOH\n    // +   improved by: Ates Goral (http://magnetiq.com)\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: preg_quote(\"$40\");\n    // *     returns 1: '\\$40'\n    // *     example 2: preg_quote(\"*RRRING* Hello?\");\n    // *     returns 2: '\\*RRRING\\* Hello\\?'\n    // *     example 3: preg_quote(\"\\\\.+*?[^]$(){}=!<>|:\");\n    // *     returns 3: '\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\<\\>\\|\\:'\n    return (str + '').replace(new RegExp('[.\\\\\\\\+*?\\\\[\\\\^\\\\]$(){}=!<>|:\\\\' + (delimiter || '') + '-]', 'g'), '\\\\$&');\n}\n\n\nfunction urlencode (str) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Philip Peterson\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: AJ\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: travc\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Lars Fischer\n    // +      input by: Ratheous\n    // +      reimplemented by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Joris\n    // +      reimplemented by: Brett Zamir (http://brett-zamir.me)\n    // %          note 1: This reflects PHP 5.3/6.0+ behavior\n    // %        note 2: Please be aware that this function expects to encode into UTF-8 encoded strings, as found on\n    // %        note 2: pages served as UTF-8\n    // *     example 1: urlencode('Kevin van Zonneveld!');\n    // *     returns 1: 'Kevin+van+Zonneveld%21'\n    // *     example 2: urlencode('http://kevin.vanzonneveld.net/');\n    // *     returns 2: 'http%3A%2F%2Fkevin.vanzonneveld.net%2F'\n    // *     example 3: urlencode('http://www.google.nl/search?q=php.js&ie=utf-8&oe=utf-8&aq=t&rls=com.ubuntu:en-US:unofficial&client=firefox-a');\n    // *     returns 3: 'http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3Dphp.js%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a'\n    str = (str + '').toString();\n\n    // Tilde should be allowed unescaped in future versions of PHP (as reflected below), but if you want to reflect current\n    // PHP behavior, you would need to add \".replace(/~/g, '%7E');\" to the following.\n    return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').\n    replace(/\\)/g, '%29').replace(/\\*/g, '%2A').replace(/%20/g, '+');\n}\n\n\nfunction htmlentities (string, quote_style, charset, double_encode) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: nobbler\n    // +    tweaked by: Jack\n    // +   bugfixed by: Onno Marsman\n    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +    bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // +      input by: Ratheous\n    // +   improved by: Rafa\u0142 Kukawski (http://blog.kukawski.pl)\n    // +   improved by: Dj (http://phpjs.org/functions/htmlentities:425#comment_134018)\n    // -    depends on: get_html_translation_table\n    // *     example 1: htmlentities('Kevin & van Zonneveld');\n    // *     returns 1: 'Kevin &amp; van Zonneveld'\n    // *     example 2: htmlentities(\"foo'bar\",\"ENT_QUOTES\");\n    // *     returns 2: 'foo&#039;bar'\n    var hash_map = get_html_translation_table('HTML_ENTITIES', quote_style),\n        symbol = '';\n    string = string == null ? '' : string + '';\n\n    if (!hash_map) {\n        return false;\n    }\n\n    if (quote_style && quote_style === 'ENT_QUOTES') {\n        hash_map[\"'\"] = '&#039;';\n    }\n\n    if (!!double_encode || double_encode == null) {\n        for (symbol in hash_map) {\n            string = string.split(symbol).join(hash_map[symbol]);\n        }\n    } else {\n        string = string.replace(/([\\s\\S]*?)(&(?:#\\d+|#x[\\da-f]+|[a-zA-Z][\\da-z]*);|$)/g, function (ignore, text, entity) {\n            for (symbol in hash_map) {\n                text = text.split(symbol).join(hash_map[symbol]);\n            }\n\n            return text + entity;\n        });\n    }\n\n    return string;\n}\n\n\nfunction get_html_translation_table (table, quote_style) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Philip Peterson\n    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: noname\n    // +   bugfixed by: Alex\n    // +   bugfixed by: Marco\n    // +   bugfixed by: madipta\n    // +   improved by: KELAN\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // +      input by: Frank Forte\n    // +   bugfixed by: T.Wild\n    // +      input by: Ratheous\n    // %          note: It has been decided that we're not going to add global\n    // %          note: dependencies to php.js, meaning the constants are not\n    // %          note: real constants, but strings instead. Integers are also supported if someone\n    // %          note: chooses to create the constants themselves.\n    // *     example 1: get_html_translation_table('HTML_SPECIALCHARS');\n    // *     returns 1: {'\"': '&quot;', '&': '&amp;', '<': '&lt;', '>': '&gt;'}\n    var entities = {},\n        hash_map = {},\n        decimal = 0,\n        symbol = '';\n    var constMappingTable = {},\n        constMappingQuoteStyle = {};\n    var useTable = {},\n        useQuoteStyle = {};\n\n    // Translate arguments\n    constMappingTable[0] = 'HTML_SPECIALCHARS';\n    constMappingTable[1] = 'HTML_ENTITIES';\n    constMappingQuoteStyle[0] = 'ENT_NOQUOTES';\n    constMappingQuoteStyle[2] = 'ENT_COMPAT';\n    constMappingQuoteStyle[3] = 'ENT_QUOTES';\n\n    useTable = !isNaN(table) ? constMappingTable[table] : table ? table.toUpperCase() : 'HTML_SPECIALCHARS';\n    useQuoteStyle = !isNaN(quote_style) ? constMappingQuoteStyle[quote_style] : quote_style ? quote_style.toUpperCase() : 'ENT_COMPAT';\n\n    if (useTable !== 'HTML_SPECIALCHARS' && useTable !== 'HTML_ENTITIES') {\n        throw new Error(\"Table: \" + useTable + ' not supported');\n        // return false;\n    }\n\n    entities['38'] = '&amp;';\n    if (useTable === 'HTML_ENTITIES') {\n        entities['160'] = '&nbsp;';\n        entities['161'] = '&iexcl;';\n        entities['162'] = '&cent;';\n        entities['163'] = '&pound;';\n        entities['164'] = '&curren;';\n        entities['165'] = '&yen;';\n        entities['166'] = '&brvbar;';\n        entities['167'] = '&sect;';\n        entities['168'] = '&uml;';\n        entities['169'] = '&copy;';\n        entities['170'] = '&ordf;';\n        entities['171'] = '&laquo;';\n        entities['172'] = '&not;';\n        entities['173'] = '&shy;';\n        entities['174'] = '&reg;';\n        entities['175'] = '&macr;';\n        entities['176'] = '&deg;';\n        entities['177'] = '&plusmn;';\n        entities['178'] = '&sup2;';\n        entities['179'] = '&sup3;';\n        entities['180'] = '&acute;';\n        entities['181'] = '&micro;';\n        entities['182'] = '&para;';\n        entities['183'] = '&middot;';\n        entities['184'] = '&cedil;';\n        entities['185'] = '&sup1;';\n        entities['186'] = '&ordm;';\n        entities['187'] = '&raquo;';\n        entities['188'] = '&frac14;';\n        entities['189'] = '&frac12;';\n        entities['190'] = '&frac34;';\n        entities['191'] = '&iquest;';\n        entities['192'] = '&Agrave;';\n        entities['193'] = '&Aacute;';\n        entities['194'] = '&Acirc;';\n        entities['195'] = '&Atilde;';\n        entities['196'] = '&Auml;';\n        entities['197'] = '&Aring;';\n        entities['198'] = '&AElig;';\n        entities['199'] = '&Ccedil;';\n        entities['200'] = '&Egrave;';\n        entities['201'] = '&Eacute;';\n        entities['202'] = '&Ecirc;';\n        entities['203'] = '&Euml;';\n        entities['204'] = '&Igrave;';\n        entities['205'] = '&Iacute;';\n        entities['206'] = '&Icirc;';\n        entities['207'] = '&Iuml;';\n        entities['208'] = '&ETH;';\n        entities['209'] = '&Ntilde;';\n        entities['210'] = '&Ograve;';\n        entities['211'] = '&Oacute;';\n        entities['212'] = '&Ocirc;';\n        entities['213'] = '&Otilde;';\n        entities['214'] = '&Ouml;';\n        entities['215'] = '&times;';\n        entities['216'] = '&Oslash;';\n        entities['217'] = '&Ugrave;';\n        entities['218'] = '&Uacute;';\n        entities['219'] = '&Ucirc;';\n        entities['220'] = '&Uuml;';\n        entities['221'] = '&Yacute;';\n        entities['222'] = '&THORN;';\n        entities['223'] = '&szlig;';\n        entities['224'] = '&agrave;';\n        entities['225'] = '&aacute;';\n        entities['226'] = '&acirc;';\n        entities['227'] = '&atilde;';\n        entities['228'] = '&auml;';\n        entities['229'] = '&aring;';\n        entities['230'] = '&aelig;';\n        entities['231'] = '&ccedil;';\n        entities['232'] = '&egrave;';\n        entities['233'] = '&eacute;';\n        entities['234'] = '&ecirc;';\n        entities['235'] = '&euml;';\n        entities['236'] = '&igrave;';\n        entities['237'] = '&iacute;';\n        entities['238'] = '&icirc;';\n        entities['239'] = '&iuml;';\n        entities['240'] = '&eth;';\n        entities['241'] = '&ntilde;';\n        entities['242'] = '&ograve;';\n        entities['243'] = '&oacute;';\n        entities['244'] = '&ocirc;';\n        entities['245'] = '&otilde;';\n        entities['246'] = '&ouml;';\n        entities['247'] = '&divide;';\n        entities['248'] = '&oslash;';\n        entities['249'] = '&ugrave;';\n        entities['250'] = '&uacute;';\n        entities['251'] = '&ucirc;';\n        entities['252'] = '&uuml;';\n        entities['253'] = '&yacute;';\n        entities['254'] = '&thorn;';\n        entities['255'] = '&yuml;';\n    }\n\n    if (useQuoteStyle !== 'ENT_NOQUOTES') {\n        entities['34'] = '&quot;';\n    }\n    if (useQuoteStyle === 'ENT_QUOTES') {\n        entities['39'] = '&#39;';\n    }\n    entities['60'] = '&lt;';\n    entities['62'] = '&gt;';\n\n\n    // ascii decimals to real symbols\n    for (decimal in entities) {\n        symbol = String.fromCharCode(decimal);\n        hash_map[symbol] = entities[decimal];\n    }\n\n    return hash_map;\n}\n\n\nfunction parse_url (str, component) {\n    // http://kevin.vanzonneveld.net\n    // +      original by: Steven Levithan (http://blog.stevenlevithan.com)\n    // + reimplemented by: Brett Zamir (http://brett-zamir.me)\n    // + input by: Lorenzo Pisani\n    // + input by: Tony\n    // + improved by: Brett Zamir (http://brett-zamir.me)\n    // %          note: Based on http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js\n    // %          note: blog post at http://blog.stevenlevithan.com/archives/parseuri\n    // %          note: demo at http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js\n    // %          note: Does not replace invalid characters with '_' as in PHP, nor does it return false with\n    // %          note: a seriously malformed URL.\n    // %          note: Besides function name, is essentially the same as parseUri as well as our allowing\n    // %          note: an extra slash after the scheme/protocol (to allow file:/// as in PHP)\n    // *     example 1: parse_url('http://username:password@hostname/path?arg=value#anchor');\n    // *     returns 1: {scheme: 'http', host: 'hostname', user: 'username', pass: 'password', path: '/path', query: 'arg=value', fragment: 'anchor'}\n    var key = ['source', 'scheme', 'authority', 'userInfo', 'user', 'pass', 'host', 'port',\n                        'relative', 'path', 'directory', 'file', 'query', 'fragment'],\n        ini = (this.php_js && this.php_js.ini) || {},\n        mode = (ini['phpjs.parse_url.mode'] &&\n            ini['phpjs.parse_url.mode'].local_value) || 'php',\n        parser = {\n            php: /^(?:([^:\\/?#]+):)?(?:\\/\\/()(?:(?:()(?:([^:@]*):?([^:@]*))?@)?([^:\\/?#]*)(?::(\\d*))?))?()(?:(()(?:(?:[^?#\\/]*\\/)*)()(?:[^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n            strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*):?([^:@]*))?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n            loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/\\/?)?((?:(([^:@]*):?([^:@]*))?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/ // Added one optional slash to post-scheme to catch file:/// (should restrict this)\n        };\n\n    var m = parser[mode].exec(str),\n        uri = {},\n        i = 14;\n    while (i--) {\n        if (m[i]) {\n          uri[key[i]] = m[i];\n        }\n    }\n\n    if (component) {\n        return uri[component.replace('PHP_URL_', '').toLowerCase()];\n    }\n    if (mode !== 'php') {\n        var name = (ini['phpjs.parse_url.queryKey'] &&\n                ini['phpjs.parse_url.queryKey'].local_value) || 'queryKey';\n        parser = /(?:^|&)([^&=]*)=?([^&]*)/g;\n        uri[name] = {};\n        uri[key[12]].replace(parser, function ($0, $1, $2) {\n            if ($1) {uri[name][$1] = $2;}\n        });\n    }\n    delete uri.source;\n    return uri;\n}\n\nfunction round (value, precision, mode) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Philip Peterson\n    // +    revised by: Onno Marsman\n    // +      input by: Greenseed\n    // +    revised by: T.Wild\n    // +      input by: meo\n    // +      input by: William\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // +      input by: Josep Sanz (http://www.ws3.es/)\n    // +    revised by: Rafa\u0142 Kukawski (http://blog.kukawski.pl/)\n    // %        note 1: Great work. Ideas for improvement:\n    // %        note 1:  - code more compliant with developer guidelines\n    // %        note 1:  - for implementing PHP constant arguments look at\n    // %        note 1:  the pathinfo() function, it offers the greatest\n    // %        note 1:  flexibility & compatibility possible\n    // *     example 1: round(1241757, -3);\n    // *     returns 1: 1242000\n    // *     example 2: round(3.6);\n    // *     returns 2: 4\n    // *     example 3: round(2.835, 2);\n    // *     returns 3: 2.84\n    // *     example 4: round(1.1749999999999, 2);\n    // *     returns 4: 1.17\n    // *     example 5: round(58551.799999999996, 2);\n    // *     returns 5: 58551.8\n    var m, f, isHalf, sgn; // helper variables\n    precision |= 0; // making sure precision is integer\n    m = Math.pow(10, precision);\n    value *= m;\n    sgn = (value > 0) | -(value < 0); // sign of the number\n    isHalf = value % 1 === 0.5 * sgn;\n    f = Math.floor(value);\n\n    if (isHalf) {\n        switch (mode) {\n        case 'PHP_ROUND_HALF_DOWN':\n            value = f + (sgn < 0); // rounds .5 toward zero\n            break;\n        case 'PHP_ROUND_HALF_EVEN':\n            value = f + (f % 2 * sgn); // rouds .5 towards the next even integer\n            break;\n        case 'PHP_ROUND_HALF_ODD':\n            value = f + !(f % 2); // rounds .5 towards the next odd integer\n            break;\n        default:\n            value = f + (sgn > 0); // rounds .5 away from zero\n        }\n    }\n\n    return (isHalf ? value : Math.round(value)) / m;\n}\n\n\nfunction implode (glue, pieces) {\n    // Joins array elements placing glue string between items and return one string\n    //\n    // version: 1109.2015\n    // discuss at: http://phpjs.org/functions/implode    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Waldo Malqui Silva\n    // +   improved by: Itsacon (http://www.itsacon.net/)\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: implode(' ', ['Kevin', 'van', 'Zonneveld']);    // *     returns 1: 'Kevin van Zonneveld'\n    // *     example 2: implode(' ', {first:'Kevin', last: 'van Zonneveld'});\n    // *     returns 2: 'Kevin van Zonneveld'\n    var i = '',\n        retVal = '',        tGlue = '';\n    if (arguments.length === 1) {\n        pieces = glue;\n        glue = '';\n    }    if (typeof(pieces) === 'object') {\n        if (Object.prototype.toString.call(pieces) === '[object Array]') {\n            return pieces.join(glue);\n        }\n        for (i in pieces) {            retVal += tGlue + pieces[i];\n            tGlue = glue;\n        }\n        return retVal;\n    }    return pieces;\n}\n\n/**\n * inserts a text into an input/textarea where the cursor is set\n * @param txtarea\n * @param text\n */\nfunction insertTextToFormElementAtCursor(txtarea, text) {\n    var scrollPos = txtarea.scrollTop;\n    var strPos = 0;\n    var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\n        \"ff\" : (document.selection ? \"ie\" : false ) );\n    if (br == \"ie\") {\n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart('character', -txtarea.value.length);\n        strPos = range.text.length;\n    }\n    else if (br == \"ff\") strPos = txtarea.selectionStart;\n\n    var front = (txtarea.value).substring(0, strPos);\n    var back = (txtarea.value).substring(strPos, txtarea.value.length);\n    txtarea.value = front + text + back;\n    strPos = strPos + text.length;\n    if (br == \"ie\") {\n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart('character', -txtarea.value.length);\n        range.moveStart('character', strPos);\n        range.moveEnd('character', 0);\n        range.select();\n    }\n    else if (br == \"ff\") {\n        txtarea.selectionStart = strPos;\n        txtarea.selectionEnd = strPos;\n        txtarea.focus();\n    }\n    txtarea.scrollTop = scrollPos;\n}\n\n/**\n * inserts a text into an html element with contenteditable where the cursor is set\n * @param text\n * @param win\n * @param doc\n */\nfunction insertTextToContenteditableAtCursor (text, win, doc) {\n\n    if(!win) {\n        var win = window;\n    }\n    if(!doc) {\n        var doc = document;\n    }\n\n    var sel, range;\n    if (win.getSelection) {\n        sel = win.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n            range = sel.getRangeAt(0);\n            range.deleteContents();\n            range.insertNode( doc.createTextNode(text) );\n        }\n    } else if (doc.selection && doc.selection.createRange) {\n        doc.selection.createRange().text = text;\n    }\n}\n\nstringToFunction = function(str) {\n    if (typeof str !== \"string\") {\n        return str;\n    }\n\n    var arr = str.split(\".\");\n\n    var fn = (window || this);\n    for (var i = 0, len = arr.length; i < len; i++) {\n        fn = fn[arr[i]];\n    }\n\n    if (typeof fn !== \"function\") {\n        throw new Error(\"function not found\");\n    }\n\n    return  fn;\n};\n\nsprintf = function ()\n{\n    if (!arguments || arguments.length < 1 || !RegExp)\n    {\n        return;\n    }\n    var str = arguments[0];\n    var re = /([^%]*)%('.|0|\\x20)?(-)?(\\d+)?(\\.\\d+)?(%|b|c|d|u|f|o|s|x|X)(.*)/;\n    var a = b = [], numSubstitutions = 0, numMatches = 0;\n    while (a = re.exec(str))\n    {\n        var leftpart = a[1], pPad = a[2], pJustify = a[3], pMinLength = a[4];\n        var pPrecision = a[5], pType = a[6], rightPart = a[7];\n\n        numMatches++;\n        if (pType == '%')\n        {\n            subst = '%';\n        }\n        else\n        {\n            numSubstitutions++;\n            if (numSubstitutions >= arguments.length)\n            {\n                alert('Error! Not enough function arguments (' + (arguments.length - 1) + ', excluding the string)\\nfor the number of substitution parameters in string (' + numSubstitutions + ' so far).');\n            }\n            var param = arguments[numSubstitutions];\n            var pad = '';\n            if (pPad && pPad.substr(0,1) == \"'\") pad = leftpart.substr(1,1);\n            else if (pPad) pad = pPad;\n            var justifyRight = true;\n            if (pJustify && pJustify === \"-\") justifyRight = false;\n            var minLength = -1;\n            if (pMinLength) minLength = parseInt(pMinLength);\n            var precision = -1;\n            if (pPrecision && pType == 'f') precision = parseInt(pPrecision.substring(1));\n            var subst = param;\n            if (pType == 'b') subst = parseInt(param).toString(2);\n            else if (pType == 'c') subst = String.fromCharCode(parseInt(param));\n            else if (pType == 'd') subst = parseInt(param) ? parseInt(param) : 0;\n            else if (pType == 'u') subst = Math.abs(param);\n            else if (pType == 'f') subst = (precision > -1) ? Math.round(parseFloat(param) * Math.pow(10, precision)) / Math.pow(10, precision): parseFloat(param);\n            else if (pType == 'o') subst = parseInt(param).toString(8);\n            else if (pType == 's') subst = param;\n            else if (pType == 'x') subst = ('' + parseInt(param).toString(16)).toLowerCase();\n            else if (pType == 'X') subst = ('' + parseInt(param).toString(16)).toUpperCase();\n        }\n        str = leftpart + subst + rightPart;\n    }\n    return str;\n}\n\nfunction array_merge () {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Nate\n    // +   input by: josh\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: arr1 = {\"color\": \"red\", 0: 2, 1: 4}\n    // *     example 1: arr2 = {0: \"a\", 1: \"b\", \"color\": \"green\", \"shape\": \"trapezoid\", 2: 4}\n    // *     example 1: array_merge(arr1, arr2)\n    // *     returns 1: {\"color\": \"green\", 0: 2, 1: 4, 2: \"a\", 3: \"b\", \"shape\": \"trapezoid\", 4: 4}\n    // *     example 2: arr1 = []\n    // *     example 2: arr2 = {1: \"data\"}\n    // *     example 2: array_merge(arr1, arr2)\n    // *     returns 2: {0: \"data\"}\n\n    var args = Array.prototype.slice.call(arguments),\n        retObj = {}, k, j = 0, i = 0, retArr = true;\n\n    for (i=0; i < args.length; i++) {\n        if (!(args[i] instanceof Array)) {\n            retArr=false;\n            break;\n        }\n    }\n\n    if (retArr) {\n        retArr = [];\n        for (i=0; i < args.length; i++) {\n            retArr = retArr.concat(args[i]);\n        }\n        return retArr;\n    }\n    var ct = 0;\n\n    for (i=0, ct=0; i < args.length; i++) {\n        if (args[i] instanceof Array) {\n            for (j=0; j < args[i].length; j++) {\n                retObj[ct++] = args[i][j];\n            }\n        } else {\n            for (k in args[i]) {\n                if (args[i].hasOwnProperty(k)) {\n                    if (parseInt(k, 10)+'' === k) {\n                        retObj[ct++] = args[i][k];\n                    } else {\n                        retObj[k] = args[i][k];\n                    }\n                }\n            }\n        }\n    }\n    return retObj;\n}\n\nfunction array_merge_recursive (arr1, arr2){\n    // http://kevin.vanzonneveld.net\n    // +   original by: Subhasis Deb\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // -    depends on: array_merge\n    // *     example 1: arr1 = {'color': {'favourite': 'read'}, 0: 5}\n    // *     example 1: arr2 = {0: 10, 'color': {'favorite': 'green', 0: 'blue'}}\n    // *     example 1: array_merge_recursive(arr1, arr2)\n    // *     returns 1: {'color': {'favorite': {0: 'red', 1: 'green'}, 0: 'blue'}, 1: 5, 1: 10}\n\n    var idx = '';\n\n    if ((arr1 && (arr1 instanceof Array)) && (arr2 && (arr2 instanceof Array))) {\n        for (idx in arr2) {\n            arr1.push(arr2[idx]);\n        }\n    } else if ((arr1 && (arr1 instanceof Object)) && (arr2 && (arr2 instanceof Object))) {\n        for (idx in arr2) {\n            if (idx in arr1) {\n                if (typeof arr1[idx] == 'object' && typeof arr2 == 'object') {\n                    arr1[idx] = this.array_merge(arr1[idx], arr2[idx]);\n                } else {\n                    arr1[idx] = arr2[idx];\n                }\n            } else {\n                arr1[idx] = arr2[idx];\n            }\n        }\n    }\n\n    return arr1;\n}\n\n\nfunction htmlspecialchars (string, quoteStyle, charset, doubleEncode) {\n    //       discuss at: http://locutus.io/php/htmlspecialchars/\n    //      original by: Mirek Slugen\n    //      improved by: Kevin van Zonneveld (http://kvz.io)\n    //      bugfixed by: Nathan\n    //      bugfixed by: Arno\n    //      bugfixed by: Brett Zamir (http://brett-zamir.me)\n    //      bugfixed by: Brett Zamir (http://brett-zamir.me)\n    //       revised by: Kevin van Zonneveld (http://kvz.io)\n    //         input by: Ratheous\n    //         input by: Mailfaker (http://www.weedem.fr/)\n    //         input by: felix\n    // reimplemented by: Brett Zamir (http://brett-zamir.me)\n    //           note 1: charset argument not supported\n    //        example 1: htmlspecialchars(\"<a href='test'>Test</a>\", 'ENT_QUOTES')\n    //        returns 1: '&lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;'\n    //        example 2: htmlspecialchars(\"ab\\\"c'd\", ['ENT_NOQUOTES', 'ENT_QUOTES'])\n    //        returns 2: 'ab\"c&#039;d'\n    //        example 3: htmlspecialchars('my \"&entity;\" is still here', null, null, false)\n    //        returns 3: 'my &quot;&entity;&quot; is still here'\n\n    var optTemp = 0\n    var i = 0\n    var noquotes = false\n    if (typeof quoteStyle === 'undefined' || quoteStyle === null) {\n        quoteStyle = 2\n    }\n    string = string || ''\n    string = string.toString()\n\n    if (doubleEncode !== false) {\n        // Put this first to avoid double-encoding\n        string = string.replace(/&/g, '&amp;')\n    }\n\n    string = string\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n\n    var OPTS = {\n        'ENT_NOQUOTES': 0,\n        'ENT_HTML_QUOTE_SINGLE': 1,\n        'ENT_HTML_QUOTE_DOUBLE': 2,\n        'ENT_COMPAT': 2,\n        'ENT_QUOTES': 3,\n        'ENT_IGNORE': 4\n    }\n    if (quoteStyle === 0) {\n        noquotes = true\n    }\n    if (typeof quoteStyle !== 'number') {\n        // Allow for a single string or an array of string flags\n        quoteStyle = [].concat(quoteStyle)\n        for (i = 0; i < quoteStyle.length; i++) {\n            // Resolve string input to bitwise e.g. 'ENT_IGNORE' becomes 4\n            if (OPTS[quoteStyle[i]] === 0) {\n                noquotes = true\n            } else if (OPTS[quoteStyle[i]]) {\n                optTemp = optTemp | OPTS[quoteStyle[i]]\n            }\n        }\n        quoteStyle = optTemp\n    }\n    if (quoteStyle & OPTS.ENT_HTML_QUOTE_SINGLE) {\n        string = string.replace(/'/g, '&#039;')\n    }\n    if (!noquotes) {\n        string = string.replace(/\"/g, '&quot;')\n    }\n\n    return string\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.translation.domain\");\n/**\n * @private\n */\npimcore.settings.translation.domain = Class.create({\n    filterField: null,\n    preconfiguredFilter: \"\",\n\n    initialize: function (domain, filter) {\n        this.domain = domain ?? 'messages';\n        this.dataUrl = Routing.generate('pimcore_admin_translation_translations');\n        this.exportUrl = Routing.generate('pimcore_admin_translation_export');\n        this.uploadImportUrl = Routing.generate('pimcore_admin_translation_uploadimportfile');\n        this.importUrl = Routing.generate('pimcore_admin_translation_import');\n        this.mergeUrl = Routing.generate('pimcore_admin_translation_import', {merge: 1});\n        this.cleanupUrl = Routing.generate('pimcore_admin_translation_cleanup');\n        this.preconfiguredFilter = filter;\n        this.config = {};\n\n        this.initializeFilters();\n        this.getAvailableLanguages();\n    },\n\n    initializeFilters: function () {\n        this.filterField = new Ext.form.TextField({\n            xtype: \"textfield\",\n            width: 200,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents: true,\n            value: this.preconfiguredFilter,\n            listeners: {\n                \"keydown\": function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.searchString = input.getValue();\n                        this.store.load({\n                            page: 1\n                        });\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.filterDomainField = new Ext.form.ComboBox({\n            emptyText: t('translations'),\n            name: \"domain\",\n            valueField: \"name\",\n            displayField: 'name',\n            value: this.domain,\n            store: new Ext.data.ArrayStore({\n                autoDestroy: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_translation_gettranslationdomains'),\n                    reader: {\n                        type: 'json',\n                        rootProperty: 'domains'\n                    }\n                },\n                fields: ['name'],\n            }),\n            listeners: {\n                change: function (combo, newValue, oldValue) {\n                    this.domain = newValue;\n                    this.getAvailableLanguages();\n                }.bind(this),\n                render: function (c) {\n                    new Ext.ToolTip({\n                        target: c.getEl(),\n                        html: t('translations')\n                    });\n                }\n            },\n            editable: false,\n            triggerAction: 'all',\n            mode: \"local\",\n            width: 150\n        });\n\n        this.filterLocaleField = new Ext.form.ComboBox({\n            emptyText: t('locale'),\n            name: \"locale\",\n            valueField: \"key\",\n            displayField: 'name',\n            tooltip: t('locale'),\n            store: new Ext.data.SimpleStore({\n                fields: ['key', 'name'],\n                data: []\n            }),\n            multiSelect: true,\n            listeners: {\n                render: function (c) {\n                    new Ext.ToolTip({\n                        target: c.getEl(),\n                        html: t('locale')\n                    });\n                },\n                change: function (combo, records) {\n                    let languages = [];\n                    Ext.each(records, function (rec) {\n                        languages.push('translation_column_' + this.domain + '_' + rec.toLowerCase());\n                    }.bind(this));\n\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i = 0; i < cm.length; i++) {\n                        let columnId = cm[i].id;\n                        if (columnId.startsWith('translation_column_')) {\n                            cm[i].hide();\n                            if (languages.length <= 0 || in_array(columnId, languages)) {\n                                cm[i].show();\n                            }\n                        }\n                    }\n                }.bind(this),\n            },\n            triggerAction: 'all',\n            mode: \"local\",\n            queryMode: 'local',\n            width: 150\n        });\n    },\n\n    getAvailableLanguages: function () {\n        this.editableLanguages = [];\n        let route = 'pimcore_admin_translation_getwebsitetranslationlanguages';\n        if (this.domain === 'admin') {\n            route = 'pimcore_admin_settings_getavailableadminlanguages';\n        }\n\n        Ext.Ajax.request({\n            url: Routing.generate(route),\n            success: function (response) {\n                try {\n                    if (this.domain === 'admin') {\n                        let languages = Ext.decode(response.responseText);\n                        this.languages = [];\n                        for (let i = 0; i < languages.length; i++) {\n                            this.languages.push(languages[i][\"language\"]);\n                        }\n                    } else {\n                        let container = Ext.decode(response.responseText);\n                        this.languages = container.view;\n                        this.editableLanguages = container.edit;\n                    }\n\n                    let languageStore = [];\n                    for (var i = 0; i < this.languages.length; i++) {\n                        languageStore.push([this.languages[i], this.languages[i]]);\n                    }\n\n                    this.filterLocaleField.getStore().loadData(languageStore);\n                    this.filterLocaleField.reset();\n                    this.getTabPanel();\n\n                    pimcore.layout.refresh();\n\n                } catch (e) {\n                    console.error(e);\n                    Ext.MessageBox.alert(t('error'), t('translations_are_not_configured')\n                        + '<br /><br /><a href=\"http://www.pimcore.org/docs/\" target=\"_blank\">'\n                        + t(\"read_more_here\") + '</a>');\n                }\n            }.bind(this)\n        });\n    },\n\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"pimcore_translations_domain\",\n                iconCls: \"pimcore_icon_translations\",\n                title: t(\"translations\"),\n                border: false,\n                layout: \"fit\",\n                closable: true,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                }\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_translations_domain\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"translationdomainmanager\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        this.createGrid();\n\n        return this.panel;\n    },\n\n    createGrid: function () {\n\n        var stateId = \"tr_\" + this.domain;\n        var applyInitialSettings = false;\n        var showInfo = false;\n        var state = Ext.state.Manager.getProvider().get(stateId, null);\n        var languages = this.languages;\n\n        var maxCols = 7;   // including action column)\n        var maxLanguages = maxCols - 1;\n\n        if (state == null) {\n            applyInitialSettings = true;\n            if (languages.length > maxLanguages) {\n                showInfo = true;\n            }\n        } else {\n            if (state.columns) {\n                for (var i = 0; i < state.columns.length; i++) {\n                    var colState = state.columns[i];\n                    if (colState.hidden) {\n                        showInfo = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        var dateConverter = function (v, r) {\n            var d = new Date(intval(v));\n            return d;\n        };\n\n        var readerFields = [\n            {name: 'id', persist: false},\n            {name: 'editor', persist: false},\n            {name: 'key', allowBlank: false},\n            {name: 'type', allowBlank: false},\n            {name: 'creationDate', type: 'date', convert: dateConverter, persist: false},\n            {name: 'modificationDate', type: 'date', convert: dateConverter, persist: false}\n        ];\n\n        var typesColumns = [\n            {text: t(\"key\"), sortable: true, dataIndex: 'key', flex: 1, editable: false, filter: 'string',\n                editor: new Ext.form.DisplayField({\n                    htmlEncode: true\n                })},\n            {text: t(\"type\"), sortable: true, dataIndex: 'type', width: 100, editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: [[\"simple\", t('translation_simple')],[\"custom\", t('translation_custom')]]\n                }),\n                renderer: function (value) {\n                    return t('translation_' + value);\n                }\n            },\n        ];\n\n        for (var i = 0; i < languages.length; i++) {\n            readerFields.push({name: \"_\" + languages[i], defaultValue: ''});\n\n            let editable = empty(this.editableLanguages) || in_array(languages[i], this.editableLanguages);\n            let columnConfig = {\n                cls: \"x-column-header_\" + languages[i].toLowerCase(),\n                text: pimcore.available_languages[languages[i]],\n                sortable: true,\n                flex: 1,\n                dataIndex: \"_\" + languages[i],\n                filter: 'string',\n                editor: this.getCellEditor(editable),\n                renderer: function (text) {\n                    if (text) {\n                        return replace_html_event_attributes(strip_tags(text, 'div,span,b,strong,em,i,small,sup,sub,p'));\n                    }\n                },\n                id: \"translation_column_\" + this.domain + \"_\" + languages[i].toLowerCase()\n            };\n            if (applyInitialSettings) {\n                var hidden = i >= maxLanguages;\n                columnConfig.hidden = hidden;\n            }\n\n            typesColumns.push(columnConfig);\n        }\n\n        if (showInfo) {\n            pimcore.helpers.showNotification(t(\"info\"), t(\"there_are_more_columns\"), null, null, 2000);\n        }\n\n        var dateRenderer = function (d) {\n            var date = new Date(d * 1000);\n            return Ext.Date.format(date, \"Y-m-d H:i:s\");\n        };\n\n        typesColumns.push({\n            text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false\n            , renderer: dateRenderer, filter: 'date', hidden: true\n        });\n\n        typesColumns.push({\n            text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false\n            , renderer: dateRenderer, filter: 'date', hidden: true\n        });\n\n        if (pimcore.globalmanager.get(\"user\").admin || this.domain === 'admin' || pimcore.settings.websiteLanguages.length == this.editableLanguages.length) {\n            typesColumns.push({\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        pimcore.helpers.deleteConfirm(t('translation'), Ext.util.Format.htmlEncode(data.data.key), function () {\n                            grid.getStore().removeAt(rowIndex);\n                        }.bind(this));\n                    }.bind(this)\n                }]\n            });\n        }\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            this.dataUrl,\n            readerFields,\n            itemsPerPage, {\n                idProperty: 'key'\n            }\n        );\n\n        var store = this.store;\n\n        this.store.getProxy().getReader().setMessageProperty('message');\n        this.store.getProxy().on('exception', function (proxy, request, operation) {\n            pimcore.helpers.showNotification(t(\"error\"), t(operation.getError()), \"error\");\n            this.store.load();\n        }.bind(this));\n\n        let proxy = store.getProxy();\n        proxy.extraParams[\"domain\"] = this.domain;\n\n        if (this.preconfiguredFilter) {\n            proxy.extraParams[\"searchString\"] = this.preconfiguredFilter;\n        }\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store, {pageSize: itemsPerPage});\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function(editor, context) {\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i=0; i < cm.length; i++) {\n                        let columnId = cm[i].id;\n                        if (columnId.startsWith('translation_column_')) {\n                            let column = context.grid.getColumnManager().columns[i];\n                            let editor = column.getEditor();\n                            let value = context.record.get(column.dataIndex);\n                            editor.recordReference = context.record;\n\n                            value = Ext.util.Format.htmlDecode(value);\n                            context.record.set(column.dataIndex, value);\n                            \n                            this.setValueStatus(editor, value);\n                        }\n                    }\n                }.bind(this)\n            }\n        });\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                },\n                this.filterDomainField,\n                this.filterLocaleField,\n                '-', {\n                    text: this.getHint(),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                },\n                \"->\",\n                {\n                    text: t('cleanup'),\n                    handler: this.cleanup.bind(this),\n                    iconCls: \"pimcore_icon_cleanup\"\n                },\n                \"-\",\n                {\n                    text: t('merge_csv'),\n                    handler: this.doMerge.bind(this),\n                    iconCls: \"pimcore_icon_merge\"\n                },\n                '-',\n                {\n                    text: t('export_csv'),\n                    handler: this.doExport.bind(this),\n                    iconCls: \"pimcore_icon_export\"\n                }, '-', {\n                    text: t(\"filter\") + \"/\" + t(\"search\"),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                }, this.filterField\n            ]\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            bodyCls: \"pimcore_editable_grid\",\n            autoScroll: true,\n            store: this.store,\n            columnLines: true,\n            stripeRows: true,\n            columns: {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                }\n            },\n            trackMouseOver: true,\n            bbar: this.pagingtoolbar,\n            stateful: true,\n            stateId: stateId,\n            stateEvents: ['columnmove', 'columnresize', 'sortchange', 'groupchange'],\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                \"pimcore.gridfilters\",\n                this.rowEditing\n            ],\n            tbar: toolbar,\n            viewConfig: {\n                forceFit: true,\n                loadingText: t('please_wait'),\n                enableTextSelection: true\n            }\n        });\n\n        this.store.load();\n\n        this.panel.removeAll();\n        this.panel.add(this.grid);\n        this.panel.updateLayout();\n    },\n\n    doMerge: function () {\n        pimcore.helpers.uploadDialog(this.uploadImportUrl, \"Filedata\", function (result) {\n            var data = result.response.responseText;\n            data = Ext.decode(data);\n\n            if(data && data.success == true) {\n                this.config = data.config;\n                this.showImportForm();\n            } else {\n                Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n            }\n        }.bind(this), function () {\n            Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n        });\n    },\n\n    refresh: function () {\n        this.store.reload();\n    },\n\n    showImportForm: function () {\n        this.csvSettingsPanel = new pimcore.settings.translation.translationSettingsTab(this.config, false, this);\n\n        var ImportForm = new Ext.form.FormPanel({\n            width: 500,\n            bodyStyle: 'padding: 10px;',\n            items: [{\n                    xtype: \"form\",\n                    bodyStyle: \"padding: 10px;\",\n                    defaults: {\n                        labelWidth: 250,\n                        width: 550\n                    },\n                    itemId: \"form\",\n                    items: [this.csvSettingsPanel.getPanel()],\n                    buttons: [{\n                        text: t(\"cancel\"),\n                        iconCls: \"pimcore_icon_cancel\",\n                        handler: function () {\n                            win.close();\n                        }\n                    },\n                    {\n                    text: t(\"import\"),\n                    iconCls: \"pimcore_icon_import\",\n                    handler: function () {\n                        if(ImportForm.isValid()) {\n                            this.csvSettingsPanel.commitData();\n                            var csvSettings = Ext.encode(this.config.csvSettings);\n                            ImportForm.getForm().submit({\n                                url: this.mergeUrl,\n                                params: {csvSettings: csvSettings, domain: this.domain},\n                                waitMsg: t(\"please_wait\"),\n                                success: function (el, response) {\n                                    try {\n                                        var data = response.response.responseText;\n                                        data = Ext.decode(data);\n                                        var merger = new pimcore.settings.translation.translationmerger(this.domain, data, this);\n                                        this.refresh();\n                                        win.close();\n                                    } catch (e) {\n                                        Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n                                        win.close();\n                                    }\n                                }.bind(this),\n                                failure: function (message) {\n                                    Ext.MessageBox.alert(t(\"error\"), t(\"error\"), t(message));\n                                    win.close();\n                                }\n                            });\n                        }\n                    }.bind(this)\n                    }]\n                }]\n        });\n\n        var windowCfg = {\n            title: t(\"merge_csv\") + \" (Domain: \" + this.domain + \")\",\n            width: 600,\n            layout: \"fit\",\n            closeAction: \"close\",\n            items: [ImportForm]\n        };\n\n        var win = new Ext.Window(windowCfg);\n\n        win.show();\n    },\n\n    doExport: function () {\n        let store = this.grid.store;\n        let storeFilters = store.getFilters().items;\n        let proxy = store.getProxy();\n        let queryString = \"domain=\" + this.domain;\n\n        let filtersActive = this.filterField.getValue() || storeFilters.length > 0;\n        if (filtersActive) {\n            Ext.MessageBox.confirm(\"\", t(\"filter_active_message\"), function (buttonValue) {\n                if (buttonValue == \"yes\") {\n                    queryString += \"&searchString=\" + this.filterField.getValue() + \"&domain=\" + this.domain;\n                    queryString += \"&filter=\" + proxy.encodeFilters(storeFilters);\n                }\n                pimcore.helpers.download(Ext.urlAppend(this.exportUrl, queryString));\n            }.bind(this));\n        } else {\n            pimcore.helpers.download(Ext.urlAppend(this.exportUrl, queryString));\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n\n        Ext.MessageBox.prompt(\"\", t(\"please_enter_the_new_name\"), function (button, value) {\n            if (button == \"ok\") {\n                this.rowEditing.cancelEdit();\n\n                this.grid.store.insert(0, {\n                    key: value\n                });\n\n                this.rowEditing.startEdit(0, 2);\n            }\n        }.bind(this));\n    },\n\n    activate: function (filter) {\n        if (filter) {\n            this.store.getProxy().setExtraParam(\"searchString\", filter);\n            this.store.load();\n            this.filterField.setValue(filter);\n        }\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_translations_domain\");\n    },\n\n    getHint: function () {\n        return this.domain === 'admin' ? t('translations_admin_hint') : \"\";\n    },\n\n    cleanup: function () {\n        Ext.Ajax.request({\n            url: this.cleanupUrl,\n            method: 'DELETE',\n            params: {\n                domain: this.domain\n            },\n            success: function (response) {\n                this.store.reload();\n            }.bind(this)\n        });\n    },\n\n    setValueStatus: function (field, value) {\n\n        field.setEditable(true);\n        field.removeCls('pimcore_translation_cell_disabled');\n        field.getTrigger('plain').show();\n        field.getTrigger('html').show();\n\n        if(!value || !Ext.isString(value)) {\n            return;\n        }\n\n        if(value) {\n            let html = /<\\/?[a-z][\\s\\S]*>/i.test(value);\n            let plain = value.match(/\\n/gm)\n\n            if (html || plain) {\n                field.setEditable(false);\n                field.addCls('pimcore_translation_cell_disabled');\n\n                if(html) {\n                    field.getTrigger('plain').hide();\n                } else {\n                    field.getTrigger('html').hide();\n                }\n            }\n        }\n    },\n\n    openEditorWindow: function (field, editorType) {\n        if(this.currentEditorWindow) {\n            //this.currentEditorWindow.destroy();\n            this.currentEditorWindow = null;\n        }\n\n        this.currentEditorWindow = new pimcore.settings.translation.editor(this, field, field.recordReference.get('type'), editorType)\n    },\n\n    getCellEditor: function(editable) {\n        return new Ext.form.field.TextArea({\n            enableKeyEvents: true,\n            fieldStyle: 'min-height:30px',\n            disabled: !editable,\n            listeners: {\n                keyup: function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        return false;\n                    }\n                }\n            },\n            triggers: {\n                html: {\n                    cls: 'pimcore_translation_trigger pimcore_icon_html',\n                    tooltip: t('edit_as_html'),\n                    handler: function (field, trigger) {\n                        this.openEditorWindow(field, 'wysiwyg');\n                    }.bind(this)\n                },\n                plain: {\n                    cls: 'pimcore_translation_trigger pimcore_icon_text',\n                    tooltip: t('edit_as_plain_text'),\n                    handler: function (field, trigger) {\n                        this.openEditorWindow(field, 'plainText');\n                    }.bind(this)\n                }\n            }\n        });\n    }\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\nfunction t(key, defaultValue, placeholders) {\n    if (!key) {\n        return \"\";\n    }\n\n    var alreadyTranslated = pimcore.globalmanager.get(\"translations_admin_translated_values\");\n    if(!alreadyTranslated) {\n        alreadyTranslated = [];\n        pimcore.globalmanager.add(\"translations_admin_translated_values\", []);\n    }\n\n    // make sure 'key' is a string\n    key = String(key);\n\n    // remove plus at the start and the end to avoid double translations\n    key = key.replace(/^[\\+]+(.*)[\\+]+$/, function(match, $1, offset, original) {\n        return $1;\n    });\n\n    var originalKey = key;\n    // the maximum length of a translation key are 190 characters\n    if (key.length > 190) {\n        if (!defaultValue) {\n            return key;\n        }\n\n        return defaultValue;\n    }\n\n    if (pimcore && pimcore.system_i18n && (pimcore.system_i18n[key] || pimcore.system_i18n[originalKey])) {\n        var trans = pimcore.system_i18n[originalKey] ? pimcore.system_i18n[originalKey] : pimcore.system_i18n[key];\n\n        // find and replace placeholders, if provided\n        if (placeholders) {\n            let pKeys = Object.keys(placeholders);\n\n            for (let i = 0; i < pKeys.length; i++) {\n                let regExp = new RegExp('\\{(' + pKeys[i] + ')\\}', 'gi');\n                let replace = placeholders[pKeys[i]];\n\n                if (trans.match(regExp)) {\n                    trans = trans.replace(regExp, replace);\n                }\n            }\n        }\n\n        pimcore.globalmanager.get(\"translations_admin_translated_values\").push(trans);\n        return trans;\n    }\n\n    var transKeys = pimcore && pimcore.system_i18n ? Object.keys(pimcore.system_i18n) : {};\n    if(pimcore && pimcore.system_i18n && transKeys.indexOf(key) === -1 && transKeys.indexOf(originalKey) === -1){\n        if(!defaultValue && !in_array(key, alreadyTranslated)) {\n            if(pimcore.globalmanager.exists(\"translations_admin_missing\")) {\n                if (!in_array(key, pimcore.globalmanager.get(\"translations_admin_added\")) &&\n                    !in_array(key, pimcore.globalmanager.get(\"translations_admin_missing\"))) {\n                    pimcore.globalmanager.get(\"translations_admin_missing\").push(key);\n                }\n            }\n        }\n    }\n\n    if(parent.pimcore && parent.pimcore.settings.debug_admin_translations){ // use parent here, because it's also used in the editmode iframe\n        return \"+\" + key + \"+\";\n    }  else if (defaultValue) {\n        return defaultValue;\n    } else {\n        return originalKey;\n    }\n}\n\nMath.sec = function(x) {\n    return 1 / Math.cos(x);\n};\n\n\n\nfunction RealTypeOf(v) {\n  if (typeof(v) == \"object\") {\n    if (v === null) {\n        return \"null\";\n    }\n    if (v.constructor == (new Array).constructor) {\n        return \"array\";\n    }\n    if (v.constructor == (new Date).constructor) {\n        return \"date\";\n    }\n    if (v.constructor == (new RegExp).constructor) {\n        return \"regex\";\n    }\n    return \"object\";\n  }\n  return typeof(v);\n}\n\n\n\nfunction FormatJSON(oData, sIndent) {\n    if (arguments.length < 2) {\n        var sIndent = \"\";\n    }\n    var sIndentStyle = \"    \";\n    var sDataType = RealTypeOf(oData);\n\n    // open object\n    if (sDataType == \"array\") {\n        if (oData.length == 0) {\n            return \"[]\";\n        }\n        var sHTML = \"[\";\n    } else {\n        var iCount = 0;\n        for (let key in oData) {\n            if (oData.hasOwnProperty(key)) {\n                iCount++;\n            }\n        }\n        if (iCount == 0) { // object is empty\n            return \"{}\";\n        }\n        var sHTML = \"{\";\n    }\n\n    // loop through items\n    var iCount = 0;\n    var vValue = null;\n    for (let sKey in oData) {\n        vValue = oData[sKey];\n        if (iCount > 0) {\n            sHTML += \",\";\n        }\n        if (sDataType == \"array\") {\n            sHTML += (\"\\n\" + sIndent + sIndentStyle);\n        } else {\n            sHTML += (\"\\n\" + sIndent + sIndentStyle + \"\\\"\" + sKey + \"\\\"\" + \": \");\n        }\n\n        // display relevant data type\n        switch (RealTypeOf(vValue)) {\n            case \"array\":\n            case \"object\":\n                sHTML += FormatJSON(vValue, (sIndent + sIndentStyle));\n                break;\n            case \"boolean\":\n            case \"number\":\n                sHTML += vValue.toString();\n                break;\n            case \"null\":\n                sHTML += \"null\";\n                break;\n            case \"string\":\n                sHTML += (\"\\\"\" + vValue + \"\\\"\");\n                break;\n            default:\n                sHTML += (\"TYPEOF: \" + typeof(vValue));\n        }\n\n        // loop\n        iCount++;\n    }\n\n    // close object\n    if (sDataType == \"array\") {\n        sHTML += (\"\\n\" + sIndent + \"]\");\n    } else {\n        sHTML += (\"\\n\" + sIndent + \"}\");\n    }\n\n    // return\n    return sHTML;\n}\n\n\nfunction in_arrayi(needle, haystack) {\n    return in_array(needle.toLocaleLowerCase(), array_map(strtolower, haystack));\n}\n\n\nfunction strtolower (str) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Onno Marsman\n    // *     example 1: strtolower('Kevin van Zonneveld');\n    // *     returns 1: 'kevin van zonneveld'\n    return (str + '').toLowerCase();\n}\n\n\nfunction array_map (callback) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Andrea Giammarchi (http://webreflection.blogspot.com)\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // %        note 1: Takes a function as an argument, not a function's name\n    // %        note 2: If the callback is a string, it can only work if the function name is in the global context\n    // *     example 1: array_map( function (a){return (a * a * a)}, [1, 2, 3, 4, 5] );\n    // *     returns 1: [ 1, 8, 27, 64, 125 ]\n    var argc = arguments.length,\n        argv = arguments;\n    var j = argv[1].length,\n        i = 0,\n        k = 1,\n        m = 0;\n    var tmp = [],\n        tmp_ar = [];\n\n    while (i < j) {\n        while (k < argc) {\n            tmp[m++] = argv[k++][i];\n        }\n\n        m = 0;\n        k = 1;\n\n        if (callback) {\n            if (typeof callback === 'string') {\n                callback = this.window[callback];\n            }\n            tmp_ar[i++] = callback.apply(null, tmp);\n        } else {\n            tmp_ar[i++] = tmp;\n        }\n\n        tmp = [];\n    }\n\n    return tmp_ar;\n}\n\n\n\nfunction is_numeric(mixed_var) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: David\n    // +   improved by: taith\n    // +   bugfixed by: Tim de Koning\n    // +   bugfixed by: WebDevHobo (http://webdevhobo.blogspot.com/)\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: is_numeric(186.31);\n    // *     returns 1: true\n    // *     example 2: is_numeric('Kevin van Zonneveld');\n    // *     returns 2: false\n    // *     example 3: is_numeric('+186.31e2');\n    // *     returns 3: true\n    // *     example 4: is_numeric('');\n    // *     returns 4: false\n    // *     example 4: is_numeric([]);\n    // *     returns 4: false\n\n    return (typeof(mixed_var) === 'number' || typeof(mixed_var) === 'string') && mixed_var !== '' && !isNaN(mixed_var);\n}\n\n\n\nfunction in_array(needle, haystack, argStrict) {\n    // Checks if the given value exists in the array\n    //\n    // version: 905.3120\n    // discuss at: http://phpjs.org/functions/in_array\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: vlado houba\n    // *     example 1: in_array('van', ['Kevin', 'van', 'Zonneveld']);\n    // *     returns 1: true\n    // *     example 2: in_array('vlado', {0: 'Kevin', vlado: 'van', 1: 'Zonneveld'});\n    // *     returns 2: false\n    // *     example 3: in_array(1, ['1', '2', '3']);\n    // *     returns 3: true\n    // *     example 3: in_array(1, ['1', '2', '3'], false);\n    // *     returns 3: true\n    // *     example 4: in_array(1, ['1', '2', '3'], true);\n    // *     returns 4: false\n    var key = '', strict = !!argStrict;\n\n    if (strict) {\n        for (key in haystack) {\n            if (haystack[key] === needle) {\n                return true;\n            }\n        }\n    } else {\n        for (key in haystack) {\n            if (haystack[key] == needle) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n\nfunction uniqid(prefix, more_entropy) {\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +    revised by: Kankrelune (http://www.webfaktory.info/)\n    // %        note 1: Uses an internal counter (in php_js global) to avoid collision\n    // *     example 1: uniqid();\n    // *     returns 1: 'a30285b160c14'\n    // *     example 2: uniqid('foo');\n    // *     returns 2: 'fooa30285b1cd361'\n    // *     example 3: uniqid('bar', true);\n    // *     returns 3: 'bara20285b23dfd1.31879087'\n    if (typeof prefix == 'undefined') {\n        prefix = \"\";\n    }\n\n    var retId;\n    var formatSeed = function(seed, reqWidth) {\n        seed = parseInt(seed, 10).toString(16); // to hex str\n        if (reqWidth < seed.length) { // so long we split\n            return seed.slice(seed.length - reqWidth);\n        }\n        if (reqWidth > seed.length) { // so short we pad\n            return Array(1 + (reqWidth - seed.length)).join('0') + seed;\n        }\n        return seed;\n    };\n\n    // BEGIN REDUNDANT\n    if (!this.php_js) {\n        this.php_js = {};\n    }\n    // END REDUNDANT\n    if (!this.php_js.uniqidSeed) { // init seed with big random int\n        this.php_js.uniqidSeed = Math.floor(Math.random() * 0x75bcd15);\n    }\n    this.php_js.uniqidSeed++;\n\n    retId = prefix; // start with prefix, add current milliseconds hex string\n    retId += formatSeed(parseInt(new Date().getTime() / 1000, 10), 8);\n    retId += formatSeed(this.php_js.uniqidSeed, 5); // add seed hex string\n\n    if (more_entropy) {\n        // for more entropy we add a float lower to 10\n        retId += (Math.random() * 10).toFixed(8).toString();\n    }\n\n    return retId;\n}\n\n\nfunction empty (mixed_var) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Philippe Baumann\n    // +      input by: Onno Marsman\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: LH\n    // +   improved by: Onno Marsman\n    // +   improved by: Francesco\n    // +   improved by: Marc Jansen\n    // +   input by: Stoyan Kyosev (http://www.svest.org/)\n    // *     example 1: empty(null);\n    // *     returns 1: true\n    // *     example 2: empty(undefined);\n    // *     returns 2: true\n    // *     example 3: empty([]);\n    // *     returns 3: true\n    // *     example 4: empty({});\n    // *     returns 4: true\n    // *     example 5: empty({'aFunc' : function () { alert('humpty'); } });\n    // *     returns 5: false\n    var key;\n\n    if (mixed_var === \"\" || mixed_var === 0 || mixed_var === \"0\" || mixed_var === null || mixed_var === false\n                                                            || typeof mixed_var === 'undefined') {\n        return true;\n    }\n\n    if (typeof mixed_var == 'object') {\n        for (key in mixed_var) {\n            return false;\n        }\n        return true;\n    }\n\n    return false;\n}\n\nfunction str_replace(search, replace, subject, count) {\n    // Replaces all occurrences of search in haystack with replace\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/str_replace\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Gabriel Paderni\n    // +   improved by: Philip Peterson\n    // +   improved by: Simon Willison (http://simonwillison.net)\n    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n    // +   bugfixed by: Anton Ongson\n    // +      input by: Onno Marsman\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +    tweaked by: Onno Marsman\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   input by: Oleg Eremeev\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Oleg Eremeev\n    // %          note 1: The count parameter must be passed as a string in order\n    // %          note 1:  to find a global variable in which the result will be given\n    // *     example 1: str_replace(' ', '.', 'Kevin van Zonneveld');\n    // *     returns 1: 'Kevin.van.Zonneveld'\n    // *     example 2: str_replace(['{name}', 'l'], ['hello', 'm'], '{name}, lars');\n    // *     returns 2: 'hemmo, mars'\n    var i = 0, j = 0, temp = '', repl = '', sl = 0, fl = 0,\n            f = [].concat(search),\n            r = [].concat(replace),\n            s = subject,\n            ra = r instanceof Array, sa = s instanceof Array;\n    s = [].concat(s);\n    if (count) {\n        this.window[count] = 0;\n    }\n\n    for (i = 0,sl = s.length; i < sl; i++) {\n        if (s[i] === '') {\n            continue;\n        }\n        for (j = 0,fl = f.length; j < fl; j++) {\n            temp = s[i] + '';\n            repl = ra ? (r[j] !== undefined ? r[j] : '') : r[0];\n            s[i] = (temp).split(f[j]).join(repl);\n            if (count && s[i] !== temp) {\n                this.window[count] += (temp.length - s[i].length) / f[j].length;\n            }\n        }\n    }\n    return sa ? s : s[0];\n}\n\n\nfunction trim(str, charlist) {\n    // Strips whitespace from the beginning and end of a string\n    //\n    // version: 905.1001\n    // discuss at: http://phpjs.org/functions/trim\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: mdsjack (http://www.mdsjack.bo.it)\n    // +   improved by: Alexander Ermolaev (http://snippets.dzone.com/user/AlexanderErmolaev)\n    // +      input by: Erkekjetter\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: DxGx\n    // +   improved by: Steven Levithan (http://blog.stevenlevithan.com)\n    // +    tweaked by: Jack\n    // +   bugfixed by: Onno Marsman\n    // *     example 1: trim('    Kevin van Zonneveld    ');\n    // *     returns 1: 'Kevin van Zonneveld'\n    // *     example 2: trim('Hello World', 'Hdle');\n    // *     returns 2: 'o Wor'\n    // *     example 3: trim(16, 1);\n    // *     returns 3: 6\n    var whitespace, l = 0, i = 0;\n    str += '';\n\n    if (!charlist) {\n        // default list\n        whitespace = \" \\n\\r\\t\\f\\x0b\\xa0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000\";\n    } else {\n        // preg_quote custom list\n        charlist += '';\n        whitespace = charlist.replace(/([\\[\\]\\(\\)\\.\\?\\/\\*\\{\\}\\+\\$\\^\\:])/g, '$1');\n    }\n\n    l = str.length;\n    for (i = 0; i < l; i++) {\n        if (whitespace.indexOf(str.charAt(i)) === -1) {\n            str = str.substring(i);\n            break;\n        }\n    }\n\n    l = str.length;\n    for (i = l - 1; i >= 0; i--) {\n        if (whitespace.indexOf(str.charAt(i)) === -1) {\n            str = str.substring(0, i + 1);\n            break;\n        }\n    }\n\n    return whitespace.indexOf(str.charAt(0)) === -1 ? str : '';\n}\n\n\nfunction base64_encode(data) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Bayron Guevara\n    // +   improved by: Thunder.m\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // -    depends on: utf8_encode\n    // *     example 1: base64_encode('Kevin van Zonneveld');\n    // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='\n\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['atob'] == 'function') {\n    //    return atob(data);\n    //}\n\n    var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = \"\", tmp_arr = [];\n\n    if (!data) {\n        return data;\n    }\n\n    data = this.utf8_encode(data + '');\n\n    do { // pack three octets into four hexets\n        o1 = data.charCodeAt(i++);\n        o2 = data.charCodeAt(i++);\n        o3 = data.charCodeAt(i++);\n\n        bits = o1 << 16 | o2 << 8 | o3;\n\n        h1 = bits >> 18 & 0x3f;\n        h2 = bits >> 12 & 0x3f;\n        h3 = bits >> 6 & 0x3f;\n        h4 = bits & 0x3f;\n\n        // use hexets to index into b64, and append result to encoded string\n        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n    } while (i < data.length);\n\n    enc = tmp_arr.join('');\n\n    switch (data.length % 3) {\n        case 1:\n            enc = enc.slice(0, -2) + '==';\n            break;\n        case 2:\n            enc = enc.slice(0, -1) + '=';\n            break;\n    }\n\n    return enc;\n}\n\nfunction base64_decode(data) {\n    // Decodes string using MIME base64 algorithm\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/base64_decode\n    // +   original by: Tyler Akins (http://rumkin.com)\n    // +   improved by: Thunder.m\n    // +      input by: Aman Gupta\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +   bugfixed by: Pellentesque Malesuada\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // -    depends on: utf8_decode\n    // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');\n    // *     returns 1: 'Kevin van Zonneveld'\n    // mozilla has this native\n    // - but breaks in 2.0.0.12!\n    //if (typeof this.window['btoa'] == 'function') {\n    //    return btoa(data);\n    //}\n\n    var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, dec = \"\", tmp_arr = [];\n\n    if (!data) {\n        return data;\n    }\n\n    data += '';\n\n    do {  // unpack four hexets into three octets using index points in b64\n        h1 = b64.indexOf(data.charAt(i++));\n        h2 = b64.indexOf(data.charAt(i++));\n        h3 = b64.indexOf(data.charAt(i++));\n        h4 = b64.indexOf(data.charAt(i++));\n\n        bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n\n        o1 = bits >> 16 & 0xff;\n        o2 = bits >> 8 & 0xff;\n        o3 = bits & 0xff;\n\n        if (h3 == 64) {\n            tmp_arr[ac++] = String.fromCharCode(o1);\n        } else if (h4 == 64) {\n            tmp_arr[ac++] = String.fromCharCode(o1, o2);\n        } else {\n            tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);\n        }\n    } while (i < data.length);\n\n    dec = tmp_arr.join('');\n    dec = this.utf8_decode(dec);\n\n    return dec;\n}\n\n\nfunction utf8_decode(str_data) {\n    // Converts a UTF-8 encoded string to ISO-8859-1\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/utf8_decode\n    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\n    // +      input by: Aman Gupta\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Norman \"zEh\" Fuchs\n    // +   bugfixed by: hitwork\n    // +   bugfixed by: Onno Marsman\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // *     example 1: utf8_decode('Kevin van Zonneveld');\n    // *     returns 1: 'Kevin van Zonneveld'\n    var tmp_arr = [], i = 0, ac = 0, c1 = 0, c2 = 0, c3 = 0;\n\n    str_data += '';\n\n    while (i < str_data.length) {\n        c1 = str_data.charCodeAt(i);\n        if (c1 < 128) {\n            tmp_arr[ac++] = String.fromCharCode(c1);\n            i++;\n        } else if ((c1 > 191) && (c1 < 224)) {\n            c2 = str_data.charCodeAt(i + 1);\n            tmp_arr[ac++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n            i += 2;\n        } else {\n            c2 = str_data.charCodeAt(i + 1);\n            c3 = str_data.charCodeAt(i + 2);\n            tmp_arr[ac++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n            i += 3;\n        }\n    }\n\n    return tmp_arr.join('');\n}\n\n\nfunction ucfirst(str) {\n    // Makes a string's first character uppercase\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/ucfirst\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: ucfirst('kevin van zonneveld');\n    // *     returns 1: 'Kevin van zonneveld'\n    str += '';\n    var f = str.charAt(0).toUpperCase();\n    return f + str.substr(1);\n}\n\n\nfunction array_search(needle, haystack, argStrict) {\n    // Searches the array for a given value and returns the corresponding key if successful\n    //\n    // version: 905.3122\n    // discuss at: http://phpjs.org/functions/array_search\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // *     example 1: array_search('zonneveld', {firstname: 'kevin', middle: 'van', surname: 'zonneveld'});\n    // *     returns 1: 'surname'\n\n    var strict = !!argStrict;\n    var key = '';\n\n    for (key in haystack) {\n        if ((strict && haystack[key] === needle) || (!strict && haystack[key] == needle)) {\n            return key;\n        }\n    }\n\n    return false;\n}\n\n\nfunction mergeObject(p, c) {\n\n    var keys = Object.keys(p);\n\n    for (var i = 0; i < keys.length; i++) {\n        if (!c[keys[i]]) {\n            c[keys[i]] = p[keys[i]];\n        }\n    }\n\n    return c;\n}\n\n\nfunction replace_html_event_attributes(value) {\n    return value.replace(/ on[^=]+=/, function (attributeName) {\n        return ' data-' + trim(attributeName);\n    });\n}\n\nfunction strip_tags(str, allowed_tags) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Luke Godfrey\n    // +      input by: Pul\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +      input by: Alex\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Marc Palau\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Eric Nagel\n    // +      input by: Bobby Drake\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Tomasz Wesolowski\n    // *     example 1: strip_tags('<p>Kevin</p> <br /><b>van</b> <i>Zonneveld</i>', '<i><b>');\n    // *     returns 1: 'Kevin <b>van</b> <i>Zonneveld</i>'\n    // *     example 2: strip_tags('<p>Kevin <img src=\"someimage.png\" onmouseover=\"someFunction()\">van <i>Zonneveld</i></p>', '<p>');\n    // *     returns 2: '<p>Kevin van Zonneveld</p>'\n    // *     example 3: strip_tags(\"<a href='http://kevin.vanzonneveld.net'>Kevin van Zonneveld</a>\", \"<a>\");\n    // *     returns 3: '<a href='http://kevin.vanzonneveld.net'>Kevin van Zonneveld</a>'\n    // *     example 4: strip_tags('1 < 5 5 > 1');\n    // *     returns 4: '1 < 5 5 > 1'\n\n    var key = '', allowed = false;\n    var matches = [];\n    var allowed_array = [];\n    var allowed_tag = '';\n    var i = 0;\n    var k = '';\n    var html = '';\n\n    var replacer = function (search, replace, str) {\n        return str.split(search).join(replace);\n    };\n\n    // Build allowes tags associative array\n    if (allowed_tags) {\n        allowed_array = allowed_tags.match(/([a-zA-Z0-9]+)/gi);\n    }\n\n    str += '';\n\n    // Match tags\n    matches = str.match(/(<\\/?[\\S][^>]*>)/gi);\n\n    // Go through all HTML tags\n    for (key in matches) {\n        if (isNaN(key)) {\n            // IE7 Hack\n            continue;\n        }\n\n        // Save HTML tag\n        html = matches[key].toString();\n\n        // Is tag not in allowed list? Remove from str!\n        allowed = false;\n\n        // Go through all allowed tags\n        for (k in allowed_array) {\n            // Init\n            allowed_tag = allowed_array[k];\n            i = -1;\n\n            if (i != 0) {\n                i = html.toLowerCase().indexOf('<' + allowed_tag + '>');\n            }\n            if (i != 0) {\n                i = html.toLowerCase().indexOf('<' + allowed_tag + ' ');\n            }\n            if (i != 0) {\n                i = html.toLowerCase().indexOf('</' + allowed_tag);\n            }\n\n            // Determine\n            if (i == 0) {\n                allowed = true;\n                break;\n            }\n        }\n\n        if (!allowed) {\n            str = replacer(html, \"\", str); // Custom replace. No regexing\n        }\n    }\n\n    return str;\n}\n\n\nfunction md5(str) {\n    // Calculate the md5 hash of a string\n    //\n    // version: 909.322\n    // discuss at: http://phpjs.org/functions/md5    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\n    // + namespaced by: Michael White (http://getsprink.com)\n    // +    tweaked by: Jack\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: Brett Zamir (http://brett-zamir.me)    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // -    depends on: utf8_encode\n    // *     example 1: md5('Kevin van Zonneveld');\n    // *     returns 1: '6e658d4bfcb59cc13f96c14450ac40b9'\n    var xl;\n    var rotateLeft = function (lValue, iShiftBits) {\n        return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));\n    };\n    var addUnsigned = function (lX, lY) {\n        var lX4,lY4,lX8,lY8,lResult;\n        lX8 = (lX & 0x80000000);\n        lY8 = (lY & 0x80000000);\n        lX4 = (lX & 0x40000000);\n        lY4 = (lY & 0x40000000);\n        lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);\n        if (lX4 & lY4) {\n            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n        }\n        if (lX4 | lY4) {\n            if (lResult & 0x40000000) {\n                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n            } else {\n                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n            }\n        } else {\n            return (lResult ^ lX8 ^ lY8);\n        }\n    };\n    var _F = function (x, y, z) {\n        return (x & y) | ((~x) & z);\n    };\n    var _G = function (x, y, z) {\n        return (x & z) | (y & (~z));\n    };\n    var _H = function (x, y, z) {\n        return (x ^ y ^ z);\n    };\n    var _I = function (x, y, z) {\n        return (y ^ (x | (~z)));\n    };\n    var _FF = function (a, b, c, d, x, s, ac) {\n        a = addUnsigned(a, addUnsigned(addUnsigned(_F(b, c, d), x), ac));\n        return addUnsigned(rotateLeft(a, s), b);\n    };\n    var _GG = function (a, b, c, d, x, s, ac) {\n        a = addUnsigned(a, addUnsigned(addUnsigned(_G(b, c, d), x), ac));\n        return addUnsigned(rotateLeft(a, s), b);\n    };\n    var _HH = function (a, b, c, d, x, s, ac) {\n        a = addUnsigned(a, addUnsigned(addUnsigned(_H(b, c, d), x), ac));\n        return addUnsigned(rotateLeft(a, s), b);\n    };\n    var _II = function (a, b, c, d, x, s, ac) {\n        a = addUnsigned(a, addUnsigned(addUnsigned(_I(b, c, d), x), ac));\n        return addUnsigned(rotateLeft(a, s), b);\n    };\n    var convertToWordArray = function (str) {\n        var lWordCount;\n        var lMessageLength = str.length;\n        var lNumberOfWords_temp1 = lMessageLength + 8;\n        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;\n        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;\n        var lWordArray = new Array(lNumberOfWords - 1);\n        var lBytePosition = 0;\n        var lByteCount = 0;\n        while (lByteCount < lMessageLength) {\n            lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n            lBytePosition = (lByteCount % 4) * 8;\n            lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount) << lBytePosition));\n            lByteCount++;\n        }\n        lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n        lBytePosition = (lByteCount % 4) * 8;\n        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);\n        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;\n        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;\n        return lWordArray;\n    };\n\n    var wordToHex = function (lValue) {\n        var wordToHexValue = \"\",wordToHexValue_temp = \"\",lByte,lCount;\n        for (lCount = 0; lCount <= 3; lCount++) {\n            lByte = (lValue >>> (lCount * 8)) & 255;\n            wordToHexValue_temp = \"0\" + lByte.toString(16);\n            wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);\n        }\n        return wordToHexValue;\n    };\n\n    var x = [],        k,AA,BB,CC,DD,a,b,c,d,\n            S11 = 7, S12 = 12, S13 = 17, S14 = 22,\n            S21 = 5, S22 = 9 , S23 = 14, S24 = 20,\n            S31 = 4, S32 = 11, S33 = 16, S34 = 23,\n            S41 = 6, S42 = 10, S43 = 15, S44 = 21;\n    str = this.utf8_encode(str);\n    x = convertToWordArray(str);\n    a = 0x67452301;\n    b = 0xEFCDAB89;\n    c = 0x98BADCFE;\n    d = 0x10325476;\n    xl = x.length;\n    for (k = 0; k < xl; k += 16) {\n        AA = a;\n        BB = b;\n        CC = c;\n        DD = d;\n        a = _FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);\n        d = _FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);\n        c = _FF(c, d, a, b, x[k + 2], S13, 0x242070DB);\n        b = _FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);\n        a = _FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);\n        d = _FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);\n        c = _FF(c, d, a, b, x[k + 6], S13, 0xA8304613);\n        b = _FF(b, c, d, a, x[k + 7], S14, 0xFD469501);\n        a = _FF(a, b, c, d, x[k + 8], S11, 0x698098D8);\n        d = _FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);\n        c = _FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);\n        b = _FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);\n        a = _FF(a, b, c, d, x[k + 12], S11, 0x6B901122);\n        d = _FF(d, a, b, c, x[k + 13], S12, 0xFD987193);\n        c = _FF(c, d, a, b, x[k + 14], S13, 0xA679438E);\n        b = _FF(b, c, d, a, x[k + 15], S14, 0x49B40821);\n        a = _GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);\n        d = _GG(d, a, b, c, x[k + 6], S22, 0xC040B340);\n        c = _GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);\n        b = _GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);\n        a = _GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);\n        d = _GG(d, a, b, c, x[k + 10], S22, 0x2441453);\n        c = _GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);\n        b = _GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);\n        a = _GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);\n        d = _GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);\n        c = _GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);\n        b = _GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);\n        a = _GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);\n        d = _GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);\n        c = _GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);\n        b = _GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);\n        a = _HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);\n        d = _HH(d, a, b, c, x[k + 8], S32, 0x8771F681);\n        c = _HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);\n        b = _HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);\n        a = _HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);\n        d = _HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);\n        c = _HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);\n        b = _HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);\n        a = _HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);\n        d = _HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);\n        c = _HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);\n        b = _HH(b, c, d, a, x[k + 6], S34, 0x4881D05);\n        a = _HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);\n        d = _HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);\n        c = _HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);\n        b = _HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);\n        a = _II(a, b, c, d, x[k + 0], S41, 0xF4292244);\n        d = _II(d, a, b, c, x[k + 7], S42, 0x432AFF97);\n        c = _II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);\n        b = _II(b, c, d, a, x[k + 5], S44, 0xFC93A039);\n        a = _II(a, b, c, d, x[k + 12], S41, 0x655B59C3);\n        d = _II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);\n        c = _II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);\n        b = _II(b, c, d, a, x[k + 1], S44, 0x85845DD1);\n        a = _II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);\n        d = _II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);\n        c = _II(c, d, a, b, x[k + 6], S43, 0xA3014314);\n        b = _II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);\n        a = _II(a, b, c, d, x[k + 4], S41, 0xF7537E82);\n        d = _II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);\n        c = _II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);\n        b = _II(b, c, d, a, x[k + 9], S44, 0xEB86D391);\n        a = addUnsigned(a, AA);\n        b = addUnsigned(b, BB);\n        c = addUnsigned(c, CC);\n        d = addUnsigned(d, DD);\n    }\n\n    var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);\n    return temp.toLowerCase();\n}\n\nfunction utf8_encode(string) {\n    // Encodes an ISO-8859-1 string to UTF-8\n    //\n    // version: 909.322\n    // discuss at: http://phpjs.org/functions/utf8_encode    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: sowberry\n    // +    tweaked by: Jack\n    // +   bugfixed by: Onno Marsman    // +   improved by: Yves Sucaet\n    // +   bugfixed by: Onno Marsman\n    // +   bugfixed by: Ulrich\n    // *     example 1: utf8_encode('Kevin van Zonneveld');\n    // *     returns 1: 'Kevin van Zonneveld'    var string = (argString+''); // .replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n\n    var utftext = \"\";\n    var start, end;\n    var stringl = 0;\n    start = end = 0;\n    stringl = string.length;\n    for (var n = 0; n < stringl; n++) {\n        var c1 = string.charCodeAt(n);\n        var enc = null;\n\n        if (c1 < 128) {\n            end++;\n        } else if (c1 > 127 && c1 < 2048) {\n            enc = String.fromCharCode((c1 >> 6) | 192) + String.fromCharCode((c1 & 63) | 128);\n        } else {\n            enc = String.fromCharCode((c1 >> 12) | 224) + String.fromCharCode(((c1 >> 6) & 63) | 128) + String.fromCharCode((c1 & 63) | 128);\n        }\n        if (enc !== null) {\n            if (end > start) {\n                utftext += string.substring(start, end);\n            }\n            utftext += enc;\n            start = end = n + 1;\n        }\n    }\n\n    if (end > start) {\n        utftext += string.substring(start, string.length);\n    }\n\n    return utftext;\n}\n\n\nfunction intval(mixed_var, base) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: stensi\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   input by: Matteo\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: intval('Kevin van Zonneveld');\n    // *     returns 1: 0\n    // *     example 2: intval(4.2);\n    // *     returns 2: 4\n    // *     example 3: intval(42, 8);\n    // *     returns 3: 42\n    // *     example 4: intval('09');\n    // *     returns 4: 9\n    // *     example 5: intval('1e', 16);\n    // *     returns 5: 30\n\n    var tmp;\n\n    var type = typeof( mixed_var );\n\n    if (type === 'boolean') {\n        return (mixed_var) ? 1 : 0;\n    } else if (type === 'string') {\n        tmp = parseInt(mixed_var, base || 10);\n        return (isNaN(tmp) || !isFinite(tmp)) ? 0 : tmp;\n    } else if (type === 'number' && isFinite(mixed_var)) {\n        return Math.floor(mixed_var);\n    } else {\n        return 0;\n    }\n}\n\n\nfunction nl2br (str, is_xhtml) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Philip Peterson\n    // +   improved by: Onno Marsman\n    // +   improved by: Atli \u00de\u00f3r\n    // +   bugfixed by: Onno Marsman\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +   improved by: Maximusya\n    // *     example 1: nl2br('Kevin\\nvan\\nZonneveld');\n    // *     returns 1: 'Kevin<br />\\nvan<br />\\nZonneveld'\n    // *     example 2: nl2br(\"\\nOne\\nTwo\\n\\nThree\\n\", false);\n    // *     returns 2: '<br>\\nOne<br>\\nTwo<br>\\n<br>\\nThree<br>\\n'\n    // *     example 3: nl2br(\"\\nOne\\nTwo\\n\\nThree\\n\", true);\n    // *     returns 3: '<br />\\nOne<br />\\nTwo<br />\\n<br />\\nThree<br />\\n'\n\n    var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br />' : '<br>';\n\n    return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1'+ breakTag +'$2');\n}\n\n\nfunction preg_quote (str, delimiter) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: booeyOH\n    // +   improved by: Ates Goral (http://magnetiq.com)\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: Onno Marsman\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: preg_quote(\"$40\");\n    // *     returns 1: '\\$40'\n    // *     example 2: preg_quote(\"*RRRING* Hello?\");\n    // *     returns 2: '\\*RRRING\\* Hello\\?'\n    // *     example 3: preg_quote(\"\\\\.+*?[^]$(){}=!<>|:\");\n    // *     returns 3: '\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\<\\>\\|\\:'\n    return (str + '').replace(new RegExp('[.\\\\\\\\+*?\\\\[\\\\^\\\\]$(){}=!<>|:\\\\' + (delimiter || '') + '-]', 'g'), '\\\\$&');\n}\n\n\nfunction urlencode (str) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Philip Peterson\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: AJ\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +      input by: travc\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Lars Fischer\n    // +      input by: Ratheous\n    // +      reimplemented by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Joris\n    // +      reimplemented by: Brett Zamir (http://brett-zamir.me)\n    // %          note 1: This reflects PHP 5.3/6.0+ behavior\n    // %        note 2: Please be aware that this function expects to encode into UTF-8 encoded strings, as found on\n    // %        note 2: pages served as UTF-8\n    // *     example 1: urlencode('Kevin van Zonneveld!');\n    // *     returns 1: 'Kevin+van+Zonneveld%21'\n    // *     example 2: urlencode('http://kevin.vanzonneveld.net/');\n    // *     returns 2: 'http%3A%2F%2Fkevin.vanzonneveld.net%2F'\n    // *     example 3: urlencode('http://www.google.nl/search?q=php.js&ie=utf-8&oe=utf-8&aq=t&rls=com.ubuntu:en-US:unofficial&client=firefox-a');\n    // *     returns 3: 'http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3Dphp.js%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a'\n    str = (str + '').toString();\n\n    // Tilde should be allowed unescaped in future versions of PHP (as reflected below), but if you want to reflect current\n    // PHP behavior, you would need to add \".replace(/~/g, '%7E');\" to the following.\n    return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').\n    replace(/\\)/g, '%29').replace(/\\*/g, '%2A').replace(/%20/g, '+');\n}\n\n\nfunction htmlentities (string, quote_style, charset, double_encode) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: nobbler\n    // +    tweaked by: Jack\n    // +   bugfixed by: Onno Marsman\n    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +    bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // +      input by: Ratheous\n    // +   improved by: Rafa\u0142 Kukawski (http://blog.kukawski.pl)\n    // +   improved by: Dj (http://phpjs.org/functions/htmlentities:425#comment_134018)\n    // -    depends on: get_html_translation_table\n    // *     example 1: htmlentities('Kevin & van Zonneveld');\n    // *     returns 1: 'Kevin &amp; van Zonneveld'\n    // *     example 2: htmlentities(\"foo'bar\",\"ENT_QUOTES\");\n    // *     returns 2: 'foo&#039;bar'\n    var hash_map = get_html_translation_table('HTML_ENTITIES', quote_style),\n        symbol = '';\n    string = string == null ? '' : string + '';\n\n    if (!hash_map) {\n        return false;\n    }\n\n    if (quote_style && quote_style === 'ENT_QUOTES') {\n        hash_map[\"'\"] = '&#039;';\n    }\n\n    if (!!double_encode || double_encode == null) {\n        for (symbol in hash_map) {\n            string = string.split(symbol).join(hash_map[symbol]);\n        }\n    } else {\n        string = string.replace(/([\\s\\S]*?)(&(?:#\\d+|#x[\\da-f]+|[a-zA-Z][\\da-z]*);|$)/g, function (ignore, text, entity) {\n            for (symbol in hash_map) {\n                text = text.split(symbol).join(hash_map[symbol]);\n            }\n\n            return text + entity;\n        });\n    }\n\n    return string;\n}\n\n\nfunction get_html_translation_table (table, quote_style) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Philip Peterson\n    // +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   bugfixed by: noname\n    // +   bugfixed by: Alex\n    // +   bugfixed by: Marco\n    // +   bugfixed by: madipta\n    // +   improved by: KELAN\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // +      input by: Frank Forte\n    // +   bugfixed by: T.Wild\n    // +      input by: Ratheous\n    // %          note: It has been decided that we're not going to add global\n    // %          note: dependencies to php.js, meaning the constants are not\n    // %          note: real constants, but strings instead. Integers are also supported if someone\n    // %          note: chooses to create the constants themselves.\n    // *     example 1: get_html_translation_table('HTML_SPECIALCHARS');\n    // *     returns 1: {'\"': '&quot;', '&': '&amp;', '<': '&lt;', '>': '&gt;'}\n    var entities = {},\n        hash_map = {},\n        decimal = 0,\n        symbol = '';\n    var constMappingTable = {},\n        constMappingQuoteStyle = {};\n    var useTable = {},\n        useQuoteStyle = {};\n\n    // Translate arguments\n    constMappingTable[0] = 'HTML_SPECIALCHARS';\n    constMappingTable[1] = 'HTML_ENTITIES';\n    constMappingQuoteStyle[0] = 'ENT_NOQUOTES';\n    constMappingQuoteStyle[2] = 'ENT_COMPAT';\n    constMappingQuoteStyle[3] = 'ENT_QUOTES';\n\n    useTable = !isNaN(table) ? constMappingTable[table] : table ? table.toUpperCase() : 'HTML_SPECIALCHARS';\n    useQuoteStyle = !isNaN(quote_style) ? constMappingQuoteStyle[quote_style] : quote_style ? quote_style.toUpperCase() : 'ENT_COMPAT';\n\n    if (useTable !== 'HTML_SPECIALCHARS' && useTable !== 'HTML_ENTITIES') {\n        throw new Error(\"Table: \" + useTable + ' not supported');\n        // return false;\n    }\n\n    entities['38'] = '&amp;';\n    if (useTable === 'HTML_ENTITIES') {\n        entities['160'] = '&nbsp;';\n        entities['161'] = '&iexcl;';\n        entities['162'] = '&cent;';\n        entities['163'] = '&pound;';\n        entities['164'] = '&curren;';\n        entities['165'] = '&yen;';\n        entities['166'] = '&brvbar;';\n        entities['167'] = '&sect;';\n        entities['168'] = '&uml;';\n        entities['169'] = '&copy;';\n        entities['170'] = '&ordf;';\n        entities['171'] = '&laquo;';\n        entities['172'] = '&not;';\n        entities['173'] = '&shy;';\n        entities['174'] = '&reg;';\n        entities['175'] = '&macr;';\n        entities['176'] = '&deg;';\n        entities['177'] = '&plusmn;';\n        entities['178'] = '&sup2;';\n        entities['179'] = '&sup3;';\n        entities['180'] = '&acute;';\n        entities['181'] = '&micro;';\n        entities['182'] = '&para;';\n        entities['183'] = '&middot;';\n        entities['184'] = '&cedil;';\n        entities['185'] = '&sup1;';\n        entities['186'] = '&ordm;';\n        entities['187'] = '&raquo;';\n        entities['188'] = '&frac14;';\n        entities['189'] = '&frac12;';\n        entities['190'] = '&frac34;';\n        entities['191'] = '&iquest;';\n        entities['192'] = '&Agrave;';\n        entities['193'] = '&Aacute;';\n        entities['194'] = '&Acirc;';\n        entities['195'] = '&Atilde;';\n        entities['196'] = '&Auml;';\n        entities['197'] = '&Aring;';\n        entities['198'] = '&AElig;';\n        entities['199'] = '&Ccedil;';\n        entities['200'] = '&Egrave;';\n        entities['201'] = '&Eacute;';\n        entities['202'] = '&Ecirc;';\n        entities['203'] = '&Euml;';\n        entities['204'] = '&Igrave;';\n        entities['205'] = '&Iacute;';\n        entities['206'] = '&Icirc;';\n        entities['207'] = '&Iuml;';\n        entities['208'] = '&ETH;';\n        entities['209'] = '&Ntilde;';\n        entities['210'] = '&Ograve;';\n        entities['211'] = '&Oacute;';\n        entities['212'] = '&Ocirc;';\n        entities['213'] = '&Otilde;';\n        entities['214'] = '&Ouml;';\n        entities['215'] = '&times;';\n        entities['216'] = '&Oslash;';\n        entities['217'] = '&Ugrave;';\n        entities['218'] = '&Uacute;';\n        entities['219'] = '&Ucirc;';\n        entities['220'] = '&Uuml;';\n        entities['221'] = '&Yacute;';\n        entities['222'] = '&THORN;';\n        entities['223'] = '&szlig;';\n        entities['224'] = '&agrave;';\n        entities['225'] = '&aacute;';\n        entities['226'] = '&acirc;';\n        entities['227'] = '&atilde;';\n        entities['228'] = '&auml;';\n        entities['229'] = '&aring;';\n        entities['230'] = '&aelig;';\n        entities['231'] = '&ccedil;';\n        entities['232'] = '&egrave;';\n        entities['233'] = '&eacute;';\n        entities['234'] = '&ecirc;';\n        entities['235'] = '&euml;';\n        entities['236'] = '&igrave;';\n        entities['237'] = '&iacute;';\n        entities['238'] = '&icirc;';\n        entities['239'] = '&iuml;';\n        entities['240'] = '&eth;';\n        entities['241'] = '&ntilde;';\n        entities['242'] = '&ograve;';\n        entities['243'] = '&oacute;';\n        entities['244'] = '&ocirc;';\n        entities['245'] = '&otilde;';\n        entities['246'] = '&ouml;';\n        entities['247'] = '&divide;';\n        entities['248'] = '&oslash;';\n        entities['249'] = '&ugrave;';\n        entities['250'] = '&uacute;';\n        entities['251'] = '&ucirc;';\n        entities['252'] = '&uuml;';\n        entities['253'] = '&yacute;';\n        entities['254'] = '&thorn;';\n        entities['255'] = '&yuml;';\n    }\n\n    if (useQuoteStyle !== 'ENT_NOQUOTES') {\n        entities['34'] = '&quot;';\n    }\n    if (useQuoteStyle === 'ENT_QUOTES') {\n        entities['39'] = '&#39;';\n    }\n    entities['60'] = '&lt;';\n    entities['62'] = '&gt;';\n\n\n    // ascii decimals to real symbols\n    for (decimal in entities) {\n        symbol = String.fromCharCode(decimal);\n        hash_map[symbol] = entities[decimal];\n    }\n\n    return hash_map;\n}\n\n\nfunction parse_url (str, component) {\n    // http://kevin.vanzonneveld.net\n    // +      original by: Steven Levithan (http://blog.stevenlevithan.com)\n    // + reimplemented by: Brett Zamir (http://brett-zamir.me)\n    // + input by: Lorenzo Pisani\n    // + input by: Tony\n    // + improved by: Brett Zamir (http://brett-zamir.me)\n    // %          note: Based on http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js\n    // %          note: blog post at http://blog.stevenlevithan.com/archives/parseuri\n    // %          note: demo at http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js\n    // %          note: Does not replace invalid characters with '_' as in PHP, nor does it return false with\n    // %          note: a seriously malformed URL.\n    // %          note: Besides function name, is essentially the same as parseUri as well as our allowing\n    // %          note: an extra slash after the scheme/protocol (to allow file:/// as in PHP)\n    // *     example 1: parse_url('http://username:password@hostname/path?arg=value#anchor');\n    // *     returns 1: {scheme: 'http', host: 'hostname', user: 'username', pass: 'password', path: '/path', query: 'arg=value', fragment: 'anchor'}\n    var key = ['source', 'scheme', 'authority', 'userInfo', 'user', 'pass', 'host', 'port',\n                        'relative', 'path', 'directory', 'file', 'query', 'fragment'],\n        ini = (this.php_js && this.php_js.ini) || {},\n        mode = (ini['phpjs.parse_url.mode'] &&\n            ini['phpjs.parse_url.mode'].local_value) || 'php',\n        parser = {\n            php: /^(?:([^:\\/?#]+):)?(?:\\/\\/()(?:(?:()(?:([^:@]*):?([^:@]*))?@)?([^:\\/?#]*)(?::(\\d*))?))?()(?:(()(?:(?:[^?#\\/]*\\/)*)()(?:[^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n            strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*):?([^:@]*))?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n            loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/\\/?)?((?:(([^:@]*):?([^:@]*))?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/ // Added one optional slash to post-scheme to catch file:/// (should restrict this)\n        };\n\n    var m = parser[mode].exec(str),\n        uri = {},\n        i = 14;\n    while (i--) {\n        if (m[i]) {\n          uri[key[i]] = m[i];\n        }\n    }\n\n    if (component) {\n        return uri[component.replace('PHP_URL_', '').toLowerCase()];\n    }\n    if (mode !== 'php') {\n        var name = (ini['phpjs.parse_url.queryKey'] &&\n                ini['phpjs.parse_url.queryKey'].local_value) || 'queryKey';\n        parser = /(?:^|&)([^&=]*)=?([^&]*)/g;\n        uri[name] = {};\n        uri[key[12]].replace(parser, function ($0, $1, $2) {\n            if ($1) {uri[name][$1] = $2;}\n        });\n    }\n    delete uri.source;\n    return uri;\n}\n\nfunction round (value, precision, mode) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Philip Peterson\n    // +    revised by: Onno Marsman\n    // +      input by: Greenseed\n    // +    revised by: T.Wild\n    // +      input by: meo\n    // +      input by: William\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // +      input by: Josep Sanz (http://www.ws3.es/)\n    // +    revised by: Rafa\u0142 Kukawski (http://blog.kukawski.pl/)\n    // %        note 1: Great work. Ideas for improvement:\n    // %        note 1:  - code more compliant with developer guidelines\n    // %        note 1:  - for implementing PHP constant arguments look at\n    // %        note 1:  the pathinfo() function, it offers the greatest\n    // %        note 1:  flexibility & compatibility possible\n    // *     example 1: round(1241757, -3);\n    // *     returns 1: 1242000\n    // *     example 2: round(3.6);\n    // *     returns 2: 4\n    // *     example 3: round(2.835, 2);\n    // *     returns 3: 2.84\n    // *     example 4: round(1.1749999999999, 2);\n    // *     returns 4: 1.17\n    // *     example 5: round(58551.799999999996, 2);\n    // *     returns 5: 58551.8\n    var m, f, isHalf, sgn; // helper variables\n    precision |= 0; // making sure precision is integer\n    m = Math.pow(10, precision);\n    value *= m;\n    sgn = (value > 0) | -(value < 0); // sign of the number\n    isHalf = value % 1 === 0.5 * sgn;\n    f = Math.floor(value);\n\n    if (isHalf) {\n        switch (mode) {\n        case 'PHP_ROUND_HALF_DOWN':\n            value = f + (sgn < 0); // rounds .5 toward zero\n            break;\n        case 'PHP_ROUND_HALF_EVEN':\n            value = f + (f % 2 * sgn); // rouds .5 towards the next even integer\n            break;\n        case 'PHP_ROUND_HALF_ODD':\n            value = f + !(f % 2); // rounds .5 towards the next odd integer\n            break;\n        default:\n            value = f + (sgn > 0); // rounds .5 away from zero\n        }\n    }\n\n    return (isHalf ? value : Math.round(value)) / m;\n}\n\n\nfunction implode (glue, pieces) {\n    // Joins array elements placing glue string between items and return one string\n    //\n    // version: 1109.2015\n    // discuss at: http://phpjs.org/functions/implode    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +   improved by: Waldo Malqui Silva\n    // +   improved by: Itsacon (http://www.itsacon.net/)\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: implode(' ', ['Kevin', 'van', 'Zonneveld']);    // *     returns 1: 'Kevin van Zonneveld'\n    // *     example 2: implode(' ', {first:'Kevin', last: 'van Zonneveld'});\n    // *     returns 2: 'Kevin van Zonneveld'\n    var i = '',\n        retVal = '',        tGlue = '';\n    if (arguments.length === 1) {\n        pieces = glue;\n        glue = '';\n    }    if (typeof(pieces) === 'object') {\n        if (Object.prototype.toString.call(pieces) === '[object Array]') {\n            return pieces.join(glue);\n        }\n        for (i in pieces) {            retVal += tGlue + pieces[i];\n            tGlue = glue;\n        }\n        return retVal;\n    }    return pieces;\n}\n\n/**\n * inserts a text into an input/textarea where the cursor is set\n * @param txtarea\n * @param text\n */\nfunction insertTextToFormElementAtCursor(txtarea, text) {\n    var scrollPos = txtarea.scrollTop;\n    var strPos = 0;\n    var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?\n        \"ff\" : (document.selection ? \"ie\" : false ) );\n    if (br == \"ie\") {\n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart('character', -txtarea.value.length);\n        strPos = range.text.length;\n    }\n    else if (br == \"ff\") strPos = txtarea.selectionStart;\n\n    var front = (txtarea.value).substring(0, strPos);\n    var back = (txtarea.value).substring(strPos, txtarea.value.length);\n    txtarea.value = front + text + back;\n    strPos = strPos + text.length;\n    if (br == \"ie\") {\n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart('character', -txtarea.value.length);\n        range.moveStart('character', strPos);\n        range.moveEnd('character', 0);\n        range.select();\n    }\n    else if (br == \"ff\") {\n        txtarea.selectionStart = strPos;\n        txtarea.selectionEnd = strPos;\n        txtarea.focus();\n    }\n    txtarea.scrollTop = scrollPos;\n}\n\n/**\n * inserts a text into an html element with contenteditable where the cursor is set\n * @param text\n * @param win\n * @param doc\n */\nfunction insertTextToContenteditableAtCursor (text, win, doc) {\n\n    if(!win) {\n        var win = window;\n    }\n    if(!doc) {\n        var doc = document;\n    }\n\n    var sel, range;\n    if (win.getSelection) {\n        sel = win.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n            range = sel.getRangeAt(0);\n            range.deleteContents();\n            range.insertNode( doc.createTextNode(text) );\n        }\n    } else if (doc.selection && doc.selection.createRange) {\n        doc.selection.createRange().text = text;\n    }\n}\n\nstringToFunction = function(str) {\n    if (typeof str !== \"string\") {\n        return str;\n    }\n\n    var arr = str.split(\".\");\n\n    var fn = (window || this);\n    for (var i = 0, len = arr.length; i < len; i++) {\n        fn = fn[arr[i]];\n    }\n\n    if (typeof fn !== \"function\") {\n        throw new Error(\"function not found\");\n    }\n\n    return  fn;\n};\n\nsprintf = function ()\n{\n    if (!arguments || arguments.length < 1 || !RegExp)\n    {\n        return;\n    }\n    var str = arguments[0];\n    var re = /([^%]*)%('.|0|\\x20)?(-)?(\\d+)?(\\.\\d+)?(%|b|c|d|u|f|o|s|x|X)(.*)/;\n    var a = b = [], numSubstitutions = 0, numMatches = 0;\n    while (a = re.exec(str))\n    {\n        var leftpart = a[1], pPad = a[2], pJustify = a[3], pMinLength = a[4];\n        var pPrecision = a[5], pType = a[6], rightPart = a[7];\n\n        numMatches++;\n        if (pType == '%')\n        {\n            subst = '%';\n        }\n        else\n        {\n            numSubstitutions++;\n            if (numSubstitutions >= arguments.length)\n            {\n                alert('Error! Not enough function arguments (' + (arguments.length - 1) + ', excluding the string)\\nfor the number of substitution parameters in string (' + numSubstitutions + ' so far).');\n            }\n            var param = arguments[numSubstitutions];\n            var pad = '';\n            if (pPad && pPad.substr(0,1) == \"'\") pad = leftpart.substr(1,1);\n            else if (pPad) pad = pPad;\n            var justifyRight = true;\n            if (pJustify && pJustify === \"-\") justifyRight = false;\n            var minLength = -1;\n            if (pMinLength) minLength = parseInt(pMinLength);\n            var precision = -1;\n            if (pPrecision && pType == 'f') precision = parseInt(pPrecision.substring(1));\n            var subst = param;\n            if (pType == 'b') subst = parseInt(param).toString(2);\n            else if (pType == 'c') subst = String.fromCharCode(parseInt(param));\n            else if (pType == 'd') subst = parseInt(param) ? parseInt(param) : 0;\n            else if (pType == 'u') subst = Math.abs(param);\n            else if (pType == 'f') subst = (precision > -1) ? Math.round(parseFloat(param) * Math.pow(10, precision)) / Math.pow(10, precision): parseFloat(param);\n            else if (pType == 'o') subst = parseInt(param).toString(8);\n            else if (pType == 's') subst = param;\n            else if (pType == 'x') subst = ('' + parseInt(param).toString(16)).toLowerCase();\n            else if (pType == 'X') subst = ('' + parseInt(param).toString(16)).toUpperCase();\n        }\n        arguments[numSubstitutions] = subst;\n        str = leftpart + '${'+numSubstitutions+'}' + rightPart;\n    }\n    str = str.replace(/\\${(\\d+)}/g, (match, num) => arguments[num]);\n\n    return str;\n}\n\nfunction array_merge () {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Nate\n    // +   input by: josh\n    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n    // *     example 1: arr1 = {\"color\": \"red\", 0: 2, 1: 4}\n    // *     example 1: arr2 = {0: \"a\", 1: \"b\", \"color\": \"green\", \"shape\": \"trapezoid\", 2: 4}\n    // *     example 1: array_merge(arr1, arr2)\n    // *     returns 1: {\"color\": \"green\", 0: 2, 1: 4, 2: \"a\", 3: \"b\", \"shape\": \"trapezoid\", 4: 4}\n    // *     example 2: arr1 = []\n    // *     example 2: arr2 = {1: \"data\"}\n    // *     example 2: array_merge(arr1, arr2)\n    // *     returns 2: {0: \"data\"}\n\n    var args = Array.prototype.slice.call(arguments),\n        retObj = {}, k, j = 0, i = 0, retArr = true;\n\n    for (i=0; i < args.length; i++) {\n        if (!(args[i] instanceof Array)) {\n            retArr=false;\n            break;\n        }\n    }\n\n    if (retArr) {\n        retArr = [];\n        for (i=0; i < args.length; i++) {\n            retArr = retArr.concat(args[i]);\n        }\n        return retArr;\n    }\n    var ct = 0;\n\n    for (i=0, ct=0; i < args.length; i++) {\n        if (args[i] instanceof Array) {\n            for (j=0; j < args[i].length; j++) {\n                retObj[ct++] = args[i][j];\n            }\n        } else {\n            for (k in args[i]) {\n                if (args[i].hasOwnProperty(k)) {\n                    if (parseInt(k, 10)+'' === k) {\n                        retObj[ct++] = args[i][k];\n                    } else {\n                        retObj[k] = args[i][k];\n                    }\n                }\n            }\n        }\n    }\n    return retObj;\n}\n\nfunction array_merge_recursive (arr1, arr2){\n    // http://kevin.vanzonneveld.net\n    // +   original by: Subhasis Deb\n    // +      input by: Brett Zamir (http://brett-zamir.me)\n    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // -    depends on: array_merge\n    // *     example 1: arr1 = {'color': {'favourite': 'read'}, 0: 5}\n    // *     example 1: arr2 = {0: 10, 'color': {'favorite': 'green', 0: 'blue'}}\n    // *     example 1: array_merge_recursive(arr1, arr2)\n    // *     returns 1: {'color': {'favorite': {0: 'red', 1: 'green'}, 0: 'blue'}, 1: 5, 1: 10}\n\n    var idx = '';\n\n    if ((arr1 && (arr1 instanceof Array)) && (arr2 && (arr2 instanceof Array))) {\n        for (idx in arr2) {\n            arr1.push(arr2[idx]);\n        }\n    } else if ((arr1 && (arr1 instanceof Object)) && (arr2 && (arr2 instanceof Object))) {\n        for (idx in arr2) {\n            if (idx in arr1) {\n                if (typeof arr1[idx] == 'object' && typeof arr2 == 'object') {\n                    arr1[idx] = this.array_merge(arr1[idx], arr2[idx]);\n                } else {\n                    arr1[idx] = arr2[idx];\n                }\n            } else {\n                arr1[idx] = arr2[idx];\n            }\n        }\n    }\n\n    return arr1;\n}\n\n\nfunction htmlspecialchars (string, quoteStyle, charset, doubleEncode) {\n    //       discuss at: http://locutus.io/php/htmlspecialchars/\n    //      original by: Mirek Slugen\n    //      improved by: Kevin van Zonneveld (http://kvz.io)\n    //      bugfixed by: Nathan\n    //      bugfixed by: Arno\n    //      bugfixed by: Brett Zamir (http://brett-zamir.me)\n    //      bugfixed by: Brett Zamir (http://brett-zamir.me)\n    //       revised by: Kevin van Zonneveld (http://kvz.io)\n    //         input by: Ratheous\n    //         input by: Mailfaker (http://www.weedem.fr/)\n    //         input by: felix\n    // reimplemented by: Brett Zamir (http://brett-zamir.me)\n    //           note 1: charset argument not supported\n    //        example 1: htmlspecialchars(\"<a href='test'>Test</a>\", 'ENT_QUOTES')\n    //        returns 1: '&lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;'\n    //        example 2: htmlspecialchars(\"ab\\\"c'd\", ['ENT_NOQUOTES', 'ENT_QUOTES'])\n    //        returns 2: 'ab\"c&#039;d'\n    //        example 3: htmlspecialchars('my \"&entity;\" is still here', null, null, false)\n    //        returns 3: 'my &quot;&entity;&quot; is still here'\n\n    var optTemp = 0\n    var i = 0\n    var noquotes = false\n    if (typeof quoteStyle === 'undefined' || quoteStyle === null) {\n        quoteStyle = 2\n    }\n    string = string || ''\n    string = string.toString()\n\n    if (doubleEncode !== false) {\n        // Put this first to avoid double-encoding\n        string = string.replace(/&/g, '&amp;')\n    }\n\n    string = string\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n\n    var OPTS = {\n        'ENT_NOQUOTES': 0,\n        'ENT_HTML_QUOTE_SINGLE': 1,\n        'ENT_HTML_QUOTE_DOUBLE': 2,\n        'ENT_COMPAT': 2,\n        'ENT_QUOTES': 3,\n        'ENT_IGNORE': 4\n    }\n    if (quoteStyle === 0) {\n        noquotes = true\n    }\n    if (typeof quoteStyle !== 'number') {\n        // Allow for a single string or an array of string flags\n        quoteStyle = [].concat(quoteStyle)\n        for (i = 0; i < quoteStyle.length; i++) {\n            // Resolve string input to bitwise e.g. 'ENT_IGNORE' becomes 4\n            if (OPTS[quoteStyle[i]] === 0) {\n                noquotes = true\n            } else if (OPTS[quoteStyle[i]]) {\n                optTemp = optTemp | OPTS[quoteStyle[i]]\n            }\n        }\n        quoteStyle = optTemp\n    }\n    if (quoteStyle & OPTS.ENT_HTML_QUOTE_SINGLE) {\n        string = string.replace(/'/g, '&#039;')\n    }\n    if (!noquotes) {\n        string = string.replace(/\"/g, '&quot;')\n    }\n\n    return string\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.translation.domain\");\n/**\n * @private\n */\npimcore.settings.translation.domain = Class.create({\n    filterField: null,\n    preconfiguredFilter: \"\",\n\n    initialize: function (domain, filter) {\n        this.domain = domain ?? 'messages';\n        this.dataUrl = Routing.generate('pimcore_admin_translation_translations');\n        this.exportUrl = Routing.generate('pimcore_admin_translation_export');\n        this.uploadImportUrl = Routing.generate('pimcore_admin_translation_uploadimportfile');\n        this.importUrl = Routing.generate('pimcore_admin_translation_import');\n        this.mergeUrl = Routing.generate('pimcore_admin_translation_import', {merge: 1});\n        this.cleanupUrl = Routing.generate('pimcore_admin_translation_cleanup');\n        this.preconfiguredFilter = filter;\n        this.config = {};\n\n        this.initializeFilters();\n        this.getAvailableLanguages();\n    },\n\n    initializeFilters: function () {\n        this.filterField = new Ext.form.TextField({\n            xtype: \"textfield\",\n            width: 200,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents: true,\n            value: this.preconfiguredFilter,\n            listeners: {\n                \"keydown\": function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.searchString = input.getValue();\n                        this.store.load({\n                            page: 1\n                        });\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.filterDomainField = new Ext.form.ComboBox({\n            emptyText: t('translations'),\n            name: \"domain\",\n            valueField: \"name\",\n            displayField: 'name',\n            value: this.domain,\n            store: new Ext.data.ArrayStore({\n                autoDestroy: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_translation_gettranslationdomains'),\n                    reader: {\n                        type: 'json',\n                        rootProperty: 'domains'\n                    }\n                },\n                fields: ['name'],\n            }),\n            listeners: {\n                change: function (combo, newValue, oldValue) {\n                    this.domain = newValue;\n                    this.getAvailableLanguages();\n                }.bind(this),\n                render: function (c) {\n                    new Ext.ToolTip({\n                        target: c.getEl(),\n                        html: t('translations')\n                    });\n                }\n            },\n            editable: false,\n            triggerAction: 'all',\n            mode: \"local\",\n            width: 150\n        });\n\n        this.filterLocaleField = new Ext.form.ComboBox({\n            emptyText: t('locale'),\n            name: \"locale\",\n            valueField: \"key\",\n            displayField: 'name',\n            tooltip: t('locale'),\n            store: new Ext.data.SimpleStore({\n                fields: ['key', 'name'],\n                data: []\n            }),\n            multiSelect: true,\n            listeners: {\n                render: function (c) {\n                    new Ext.ToolTip({\n                        target: c.getEl(),\n                        html: t('locale')\n                    });\n                },\n                change: function (combo, records) {\n                    let languages = [];\n                    Ext.each(records, function (rec) {\n                        languages.push('translation_column_' + this.domain + '_' + rec.toLowerCase());\n                    }.bind(this));\n\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i = 0; i < cm.length; i++) {\n                        let columnId = cm[i].id;\n                        if (columnId.startsWith('translation_column_')) {\n                            cm[i].hide();\n                            if (languages.length <= 0 || in_array(columnId, languages)) {\n                                cm[i].show();\n                            }\n                        }\n                    }\n                }.bind(this),\n            },\n            triggerAction: 'all',\n            mode: \"local\",\n            queryMode: 'local',\n            width: 150\n        });\n    },\n\n    getAvailableLanguages: function () {\n        this.editableLanguages = [];\n        let route = 'pimcore_admin_translation_getwebsitetranslationlanguages';\n        if (this.domain === 'admin') {\n            route = 'pimcore_admin_settings_getavailableadminlanguages';\n        }\n\n        Ext.Ajax.request({\n            url: Routing.generate(route),\n            success: function (response) {\n                try {\n                    if (this.domain === 'admin') {\n                        let languages = Ext.decode(response.responseText);\n                        this.languages = [];\n                        for (let i = 0; i < languages.length; i++) {\n                            this.languages.push(languages[i][\"language\"]);\n                        }\n                    } else {\n                        let container = Ext.decode(response.responseText);\n                        this.languages = container.view;\n                        this.editableLanguages = container.edit;\n                    }\n\n                    let languageStore = [];\n                    for (var i = 0; i < this.languages.length; i++) {\n                        languageStore.push([this.languages[i], this.languages[i]]);\n                    }\n\n                    this.filterLocaleField.getStore().loadData(languageStore);\n                    this.filterLocaleField.reset();\n                    this.getTabPanel();\n\n                    pimcore.layout.refresh();\n\n                } catch (e) {\n                    console.error(e);\n                    Ext.MessageBox.alert(t('error'), t('translations_are_not_configured')\n                        + '<br /><br /><a href=\"http://www.pimcore.org/docs/\" target=\"_blank\">'\n                        + t(\"read_more_here\") + '</a>');\n                }\n            }.bind(this)\n        });\n    },\n\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"pimcore_translations_domain\",\n                iconCls: \"pimcore_icon_translations\",\n                title: t(\"translations\"),\n                border: false,\n                layout: \"fit\",\n                closable: true,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                }\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_translations_domain\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"translationdomainmanager\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        this.createGrid();\n\n        return this.panel;\n    },\n\n    createGrid: function () {\n\n        var stateId = \"tr_\" + this.domain;\n        var applyInitialSettings = false;\n        var showInfo = false;\n        var state = Ext.state.Manager.getProvider().get(stateId, null);\n        var languages = this.languages;\n\n        var maxCols = 7;   // including action column)\n        var maxLanguages = maxCols - 1;\n\n        if (state == null) {\n            applyInitialSettings = true;\n            if (languages.length > maxLanguages) {\n                showInfo = true;\n            }\n        } else {\n            if (state.columns) {\n                for (var i = 0; i < state.columns.length; i++) {\n                    var colState = state.columns[i];\n                    if (colState.hidden) {\n                        showInfo = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        var dateConverter = function (v, r) {\n            var d = new Date(intval(v));\n            return d;\n        };\n\n        var readerFields = [\n            {name: 'id', persist: false},\n            {name: 'editor', persist: false},\n            {name: 'key', allowBlank: false},\n            {name: 'type', allowBlank: false},\n            {name: 'creationDate', type: 'date', convert: dateConverter, persist: false},\n            {name: 'modificationDate', type: 'date', convert: dateConverter, persist: false}\n        ];\n\n        var typesColumns = [\n            {text: t(\"key\"), sortable: true, dataIndex: 'key', flex: 1, editable: false, filter: 'string',\n                editor: new Ext.form.DisplayField({\n                    htmlEncode: true\n                })},\n            {text: t(\"type\"), sortable: true, dataIndex: 'type', width: 100, editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: [[\"simple\", t('translation_simple')],[\"custom\", t('translation_custom')]]\n                }),\n                renderer: function (value) {\n                    return t('translation_' + value);\n                }\n            },\n        ];\n\n        for (var i = 0; i < languages.length; i++) {\n            readerFields.push({name: \"_\" + languages[i], defaultValue: ''});\n\n            let editable = empty(this.editableLanguages) || in_array(languages[i], this.editableLanguages);\n            let columnConfig = {\n                cls: \"x-column-header_\" + languages[i].toLowerCase(),\n                text: pimcore.available_languages[languages[i]],\n                sortable: true,\n                flex: 1,\n                dataIndex: \"_\" + languages[i],\n                filter: 'string',\n                editor: this.getCellEditor(editable),\n                renderer: function (text) {\n                    if (text) {\n                        return replace_html_event_attributes(strip_tags(text, 'div,span,b,strong,em,i,small,sup,sub,p'));\n                    }\n                },\n                id: \"translation_column_\" + this.domain + \"_\" + languages[i].toLowerCase()\n            };\n            if (applyInitialSettings) {\n                var hidden = i >= maxLanguages;\n                columnConfig.hidden = hidden;\n            }\n\n            typesColumns.push(columnConfig);\n        }\n\n        if (showInfo) {\n            pimcore.helpers.showNotification(t(\"info\"), t(\"there_are_more_columns\"), null, null, 2000);\n        }\n\n        var dateRenderer = function (d) {\n            var date = new Date(d * 1000);\n            return Ext.Date.format(date, \"Y-m-d H:i:s\");\n        };\n\n        typesColumns.push({\n            text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false\n            , renderer: dateRenderer, filter: 'date', hidden: true\n        });\n\n        typesColumns.push({\n            text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false\n            , renderer: dateRenderer, filter: 'date', hidden: true\n        });\n\n        if (pimcore.globalmanager.get(\"user\").admin || this.domain === 'admin' || pimcore.settings.websiteLanguages.length == this.editableLanguages.length) {\n            typesColumns.push({\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        pimcore.helpers.deleteConfirm(t('translation').toLowerCase(), Ext.util.Format.htmlEncode(data.data.key), function () {\n                            grid.getStore().removeAt(rowIndex);\n                        }.bind(this));\n                    }.bind(this)\n                }]\n            });\n        }\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            this.dataUrl,\n            readerFields,\n            itemsPerPage, {\n                idProperty: 'key'\n            }\n        );\n\n        var store = this.store;\n\n        this.store.getProxy().getReader().setMessageProperty('message');\n        this.store.getProxy().on('exception', function (proxy, request, operation) {\n            pimcore.helpers.showNotification(t(\"error\"), t(operation.getError()), \"error\");\n            this.store.load();\n        }.bind(this));\n\n        let proxy = store.getProxy();\n        proxy.extraParams[\"domain\"] = this.domain;\n\n        if (this.preconfiguredFilter) {\n            proxy.extraParams[\"searchString\"] = this.preconfiguredFilter;\n        }\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store, {pageSize: itemsPerPage});\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function(editor, context) {\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i=0; i < cm.length; i++) {\n                        let columnId = cm[i].id;\n                        if (columnId.startsWith('translation_column_')) {\n                            let column = context.grid.getColumnManager().columns[i];\n                            let editor = column.getEditor();\n                            let value = context.record.get(column.dataIndex);\n                            editor.recordReference = context.record;\n\n                            value = Ext.util.Format.htmlDecode(value);\n                            context.record.set(column.dataIndex, value);\n                            \n                            this.setValueStatus(editor, value);\n                        }\n                    }\n                }.bind(this)\n            }\n        });\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                },\n                this.filterDomainField,\n                this.filterLocaleField,\n                '-', {\n                    text: this.getHint(),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                },\n                \"->\",\n                {\n                    text: t('cleanup'),\n                    handler: this.cleanup.bind(this),\n                    iconCls: \"pimcore_icon_cleanup\"\n                },\n                \"-\",\n                {\n                    text: t('merge_csv'),\n                    handler: this.doMerge.bind(this),\n                    iconCls: \"pimcore_icon_merge\"\n                },\n                '-',\n                {\n                    text: t('export_csv'),\n                    handler: this.doExport.bind(this),\n                    iconCls: \"pimcore_icon_export\"\n                }, '-', {\n                    text: t(\"filter\") + \"/\" + t(\"search\"),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                }, this.filterField\n            ]\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            bodyCls: \"pimcore_editable_grid\",\n            autoScroll: true,\n            store: this.store,\n            columnLines: true,\n            stripeRows: true,\n            columns: {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                }\n            },\n            trackMouseOver: true,\n            bbar: this.pagingtoolbar,\n            stateful: true,\n            stateId: stateId,\n            stateEvents: ['columnmove', 'columnresize', 'sortchange', 'groupchange'],\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                \"pimcore.gridfilters\",\n                this.rowEditing\n            ],\n            tbar: toolbar,\n            viewConfig: {\n                forceFit: true,\n                loadingText: t('please_wait'),\n                enableTextSelection: true\n            }\n        });\n\n        this.store.load();\n\n        this.panel.removeAll();\n        this.panel.add(this.grid);\n        this.panel.updateLayout();\n    },\n\n    doMerge: function () {\n        pimcore.helpers.uploadDialog(this.uploadImportUrl, \"Filedata\", function (result) {\n            var data = result.response.responseText;\n            data = Ext.decode(data);\n\n            if(data && data.success == true) {\n                this.config = data.config;\n                this.showImportForm();\n            } else {\n                Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n            }\n        }.bind(this), function () {\n            Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n        });\n    },\n\n    refresh: function () {\n        this.store.reload();\n    },\n\n    showImportForm: function () {\n        this.csvSettingsPanel = new pimcore.settings.translation.translationSettingsTab(this.config, false, this);\n\n        var ImportForm = new Ext.form.FormPanel({\n            width: 500,\n            bodyStyle: 'padding: 10px;',\n            items: [{\n                    xtype: \"form\",\n                    bodyStyle: \"padding: 10px;\",\n                    defaults: {\n                        labelWidth: 250,\n                        width: 550\n                    },\n                    itemId: \"form\",\n                    items: [this.csvSettingsPanel.getPanel()],\n                    buttons: [{\n                        text: t(\"cancel\"),\n                        iconCls: \"pimcore_icon_cancel\",\n                        handler: function () {\n                            win.close();\n                        }\n                    },\n                    {\n                    text: t(\"import\"),\n                    iconCls: \"pimcore_icon_import\",\n                    handler: function () {\n                        if(ImportForm.isValid()) {\n                            this.csvSettingsPanel.commitData();\n                            var csvSettings = Ext.encode(this.config.csvSettings);\n                            ImportForm.getForm().submit({\n                                url: this.mergeUrl,\n                                params: {csvSettings: csvSettings, domain: this.domain},\n                                waitMsg: t(\"please_wait\"),\n                                success: function (el, response) {\n                                    try {\n                                        var data = response.response.responseText;\n                                        data = Ext.decode(data);\n                                        var merger = new pimcore.settings.translation.translationmerger(this.domain, data, this);\n                                        this.refresh();\n                                        win.close();\n                                    } catch (e) {\n                                        Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n                                        win.close();\n                                    }\n                                }.bind(this),\n                                failure: function (message) {\n                                    Ext.MessageBox.alert(t(\"error\"), t(\"error\"), t(message));\n                                    win.close();\n                                }\n                            });\n                        }\n                    }.bind(this)\n                    }]\n                }]\n        });\n\n        var windowCfg = {\n            title: t(\"merge_csv\") + \" (Domain: \" + this.domain + \")\",\n            width: 600,\n            layout: \"fit\",\n            closeAction: \"close\",\n            items: [ImportForm]\n        };\n\n        var win = new Ext.Window(windowCfg);\n\n        win.show();\n    },\n\n    doExport: function () {\n        let store = this.grid.store;\n        let storeFilters = store.getFilters().items;\n        let proxy = store.getProxy();\n        let queryString = \"domain=\" + this.domain;\n\n        let filtersActive = this.filterField.getValue() || storeFilters.length > 0;\n        if (filtersActive) {\n            Ext.MessageBox.confirm(\"\", t(\"filter_active_message\"), function (buttonValue) {\n                if (buttonValue == \"yes\") {\n                    queryString += \"&searchString=\" + this.filterField.getValue() + \"&domain=\" + this.domain;\n                    queryString += \"&filter=\" + proxy.encodeFilters(storeFilters);\n                }\n                pimcore.helpers.download(Ext.urlAppend(this.exportUrl, queryString));\n            }.bind(this));\n        } else {\n            pimcore.helpers.download(Ext.urlAppend(this.exportUrl, queryString));\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n\n        Ext.MessageBox.prompt(\"\", t(\"please_enter_the_new_name\"), function (button, value) {\n            if (button == \"ok\") {\n                this.rowEditing.cancelEdit();\n\n                this.grid.store.insert(0, {\n                    key: value\n                });\n\n                this.rowEditing.startEdit(0, 2);\n            }\n        }.bind(this));\n    },\n\n    activate: function (filter) {\n        if (filter) {\n            this.store.getProxy().setExtraParam(\"searchString\", filter);\n            this.store.load();\n            this.filterField.setValue(filter);\n        }\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_translations_domain\");\n    },\n\n    getHint: function () {\n        return this.domain === 'admin' ? t('translations_admin_hint') : \"\";\n    },\n\n    cleanup: function () {\n        Ext.Ajax.request({\n            url: this.cleanupUrl,\n            method: 'DELETE',\n            params: {\n                domain: this.domain\n            },\n            success: function (response) {\n                this.store.reload();\n            }.bind(this)\n        });\n    },\n\n    setValueStatus: function (field, value) {\n\n        field.setEditable(true);\n        field.removeCls('pimcore_translation_cell_disabled');\n        field.getTrigger('plain').show();\n        field.getTrigger('html').show();\n\n        if(!value || !Ext.isString(value)) {\n            return;\n        }\n\n        if(value) {\n            let html = /<\\/?[a-z][\\s\\S]*>/i.test(value);\n            let plain = value.match(/\\n/gm)\n\n            if (html || plain) {\n                field.setEditable(false);\n                field.addCls('pimcore_translation_cell_disabled');\n\n                if(html) {\n                    field.getTrigger('plain').hide();\n                } else {\n                    field.getTrigger('html').hide();\n                }\n            }\n        }\n    },\n\n    openEditorWindow: function (field, editorType) {\n        if(this.currentEditorWindow) {\n            //this.currentEditorWindow.destroy();\n            this.currentEditorWindow = null;\n        }\n\n        this.currentEditorWindow = new pimcore.settings.translation.editor(this, field, field.recordReference.get('type'), editorType)\n    },\n\n    getCellEditor: function(editable) {\n        return new Ext.form.field.TextArea({\n            enableKeyEvents: true,\n            fieldStyle: 'min-height:30px',\n            disabled: !editable,\n            listeners: {\n                keyup: function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        return false;\n                    }\n                }\n            },\n            triggers: {\n                html: {\n                    cls: 'pimcore_translation_trigger pimcore_icon_html',\n                    tooltip: t('edit_as_html'),\n                    handler: function (field, trigger) {\n                        this.openEditorWindow(field, 'wysiwyg');\n                    }.bind(this)\n                },\n                plain: {\n                    cls: 'pimcore_translation_trigger pimcore_icon_text',\n                    tooltip: t('edit_as_plain_text'),\n                    handler: function (field, trigger) {\n                        this.openEditorWindow(field, 'plainText');\n                    }.bind(this)\n                }\n            }\n        });\n    }\n});\n"], "filenames": ["public/js/pimcore/functions.js", "public/js/pimcore/settings/translation.js"], "buggy_code_start_loc": [1627, 325], "buggy_code_end_loc": [1629, 326], "fixing_code_start_loc": [1627, 325], "fixing_code_end_loc": [1632, 326], "type": "CWE-79", "message": "Pimcore admin-ui-classic-bundle provides a Backend UI for Pimcore. The translation value with text including \u201c%s\u201d (from \u201c%suggest%) is parsed by sprintf() even though it\u2019s supposed to be output literally to the user. The translations may be accessible by a user with comparatively lower overall access (as the translation permission cannot be scoped to certain \u201cmodules\u201d) and a skilled attacker might be able to exploit the parsing of the translation string in the dialog box. This issue has been patched in commit `abd77392` which is included in release 1.1.2. Users are advised to update to version 1.1.2 or apply the patch manually.\n", "other": {"cve": {"id": "CVE-2023-42817", "sourceIdentifier": "security-advisories@github.com", "published": "2023-09-25T19:15:10.493", "lastModified": "2023-09-26T15:57:45.363", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pimcore admin-ui-classic-bundle provides a Backend UI for Pimcore. The translation value with text including \u201c%s\u201d (from \u201c%suggest%) is parsed by sprintf() even though it\u2019s supposed to be output literally to the user. The translations may be accessible by a user with comparatively lower overall access (as the translation permission cannot be scoped to certain \u201cmodules\u201d) and a skilled attacker might be able to exploit the parsing of the translation string in the dialog box. This issue has been patched in commit `abd77392` which is included in release 1.1.2. Users are advised to update to version 1.1.2 or apply the patch manually.\n"}, {"lang": "es", "value": "Pimcore admin-ui-classic-bundle proporciona una interfaz de usuario de backend para Pimcore. El valor de traducci\u00f3n con texto que incluye \u201c%s\u201d (de \u201c%suggest%) es analizado por sprintf() aunque se supone que debe enviarse literalmente al usuario. Las traducciones pueden ser accesibles para un usuario con un acceso general comparativamente menor (ya que el permiso de traducci\u00f3n no puede limitarse a ciertos \"m\u00f3dulos\") y un atacante experto podr\u00eda explotar el an\u00e1lisis de la cadena de traducci\u00f3n en el cuadro de di\u00e1logo. Este problema se solucion\u00f3 en el commit \"abd77392\" que se incluye en la versi\u00f3n 1.1.2. Se recomienda a los usuarios que actualicen a la versi\u00f3n 1.1.2 o apliquen el parche manualmente."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:admin_classic_bundle:*:*:*:*:*:pimcore:*:*", "versionEndExcluding": "1.1.2", "matchCriteriaId": "60E1D658-E228-45EC-9B34-0DA4F469A1AC"}]}]}], "references": [{"url": "https://github.com/pimcore/admin-ui-classic-bundle/commit/abd7739298f974319e3cac3fd4fcd7f995b63e4c", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/pimcore/admin-ui-classic-bundle/security/advisories/GHSA-m988-7375-7g2c", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/admin-ui-classic-bundle/commit/abd7739298f974319e3cac3fd4fcd7f995b63e4c"}}