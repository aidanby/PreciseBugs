{"buggy_code": ["name: Check \"WIP\" in PR Title\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened, edited]\n\njobs:\n  wip:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check WIP in PR Title\n        uses: embano1/wip@v1", "# About\n\nGithub Action to check the specified string, e.g. Github PR title, for\nwork-in-progress (\"WIP\") patterns using regular expressions in `BASH`.\n\n# Usage\n\n## Simple with Defaults\n\n```yaml\nname: Check \"WIP\" in PR Title\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened, edited]\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check WIP in PR Title\n        uses: embano1/wip@v1\n```\n\n## Custom Options\n\n```yaml\nname: Check \"WIP\" in PR Title\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened, edited]\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check WIP in PR Title\n        uses: embano1/wip@v1\n        with:\n          # this is also the default value\n          title: \"${{ github.event.pull_request.title }}\"\n\n          # only matches PRs where title is \"WIP\" only\n          regex: \"^WIP$\" \n\n```\n\n## Configuration Options\n\n| Input   | Type     | Required | Default                                  | Description                                                                                                                                                                   |\n|---------|----------|----------|------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `title` | `string` | yes      | `${{ github.event.pull_request.title }}` | The title to perform regular expression pattern matching against. Typically a field from the Github [`context`](https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context) is used.                                                                                                              |\n| `regex` | `string` | yes      | `^[[:space:]]*(WIP)+(:)*`                | The regular expression to perform. The default value matches the word `WIP` (optionally followed by `:`) and ignores any whitespace character(s) at the beginning of the text |\n\n\u26a0\ufe0f Currently regular expression pattern matching is **case-insensitive**, i.e.\n`wip` would also match.", "name: \"Check WIP\"\ndescription: \"Checks for WIP patterns in Titles\"\nbranding:\n  icon: box\n  color: blue\ninputs:\n  title:\n    description: \"Text to perform pattern match against\"\n    required: true\n    default: \"${{ github.event.pull_request.title }}\"\n  regex:\n    description: \"Regex pattern to match in title\"\n    required: true\n    # starts with zero or more leading whitespace chars, WIP and zero or more colons\n    default: \"^[[:space:]]*(WIP)+(:)*\"\nruns:\n  using: \"composite\"\n  steps:\n    - shell: bash\n      run: |\n        set -ex\n\n        # TODO (@mgasch): make configurable\n        # case-insensitive\n        shopt -s nocasematch\n\n        if [[ '${{ inputs.title }}' =~ ${{ inputs.regex }} ]]; then\n          echo \"::error::Title marked as work in progress\"\n          exit 1\n        else\n          echo \"::debug::Title not marked as work in progress\"\n        fi\n\n        # unset nocasematch option\n        shopt -u nocasematch\n"], "fixing_code": ["name: Check \"WIP\" in PR Title\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened, edited]\n\njobs:\n  wip:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check WIP in PR Title\n        uses: embano1/wip@v2\n        env:\n          TITLE: ${{ github.event.pull_request.title }}", "# About\n\nGithub Action to check the specified string, e.g. Github PR title, for\nwork-in-progress (\"WIP\") patterns using regular expressions in `BASH`.\n\n# Usage\n\n## Simple with Defaults\n\nUses `^[[:space:]]*(WIP)+(:)*` regex pattern to match against the PR title.\n\n```yaml\nname: Check \"WIP\" in PR Title\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened, edited]\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check WIP in PR Title\n        uses: embano1/wip@v2\n```\n\n## Custom Options\n\n```yaml\nname: Check \"WIP\" in PR Title\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened, edited]\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check WIP in PR Title\n        uses: embano1/wip@v2\n        with:\n          # this is also the default value\n          title: \"${{ github.event.pull_request.title }}\"\n\n          # only matches PRs where title is exactly \"WIP\"\n          regex: \"^WIP$\" \n\n```\n\n## Configuration Options\n\n| Input   | Type     | Required | Default                                  | Description                                                                                                                                                                                                                            |\n|---------|----------|----------|------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `title` | `string` | yes      | `${{ github.event.pull_request.title }}` | The title to perform regular expression pattern matching against. Typically a field from the Github [`context`](https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context) is used. |\n| `regex` | `string` | yes      | `^[[:space:]]*(WIP)+(:)*`                | The regular expression to perform. The default value matches the word `WIP` (optionally followed by `:`) and ignores any whitespace character(s) at the beginning of the text.                                                          |\n\n> **Note**  \n> Currently regular expression pattern matching is **case-insensitive**, i.e., `wip` would also match.", "name: \"Check WIP\"\ndescription: \"Checks for WIP patterns in Titles\"\nbranding:\n  icon: box\n  color: blue\ninputs:\n  title:\n    description: \"Text to perform pattern match against\"\n    required: true\n    default: \"${{ github.event.pull_request.title }}\"\n  regex:\n    description: \"Regex pattern to match in title\"\n    required: true\n    # starts with zero or more leading whitespace chars, WIP and zero or more colons\n    default: \"^[[:space:]]*(WIP)+(:)*\"\n  debug:\n    description: \"Enable verbose logging\"\n    required: false\n    default: \"false\"\nruns:\n  using: \"composite\"\n  steps:\n    - shell: bash\n      env:\n        TITLE: ${{ inputs.title }}\n        REGEX: ${{ inputs.regex }}\n        DEBUG: ${{ inputs.debug }}\n      run: |\n        set -e\n\n        if [[ ${DEBUG} == \"true\" ]]; then \n          echo \"Enabling debug output\"\n          set -x\n        fi\n        \n        # TODO (@mgasch): make configurable\n        # case-insensitive\n        shopt -s nocasematch\n        \n        if [[ -z ${TITLE} ]]; then \n          echo \"::error::title input must be set\";\n          exit 1\n        fi\n        \n        if [[ -z ${REGEX} ]]; then \n          echo \"::error::regex input must be set\";\n          exit 1\n        fi\n        \n        if [[ ${TITLE} =~ ${REGEX} ]]; then\n          echo \"::error::Title marked as work in progress\"\n          exit 1\n        else\n          echo \"Title not marked as work in progress\"\n        fi\n        \n        # unset nocasematch option\n        shopt -u nocasematch\n\n        if [[ ${DEBUG} == \"true\" ]]; then \n          echo \"Disabling debug output\"\n          set +x\n        fi\n"], "filenames": [".github/workflows/check-wip.yaml", "README.md", "action.yml"], "buggy_code_start_loc": [12, 8, 15], "buggy_code_end_loc": [13, 58, 35], "fixing_code_start_loc": [12, 9, 16], "fixing_code_end_loc": [15, 60, 64], "type": "CWE-77", "message": "`embano1/wip` is a GitHub Action written in Bash. Prior to version 2, the  `embano1/wip` action uses the `github.event.pull_request.title` parameter in an insecure way. The title parameter is used in a run statement - resulting in a command injection vulnerability due to string interpolation. This vulnerability can be triggered by any user on GitHub. They just need to create a pull request with a commit message containing an exploit. (Note that first-time PR requests will not be run - but the attacker can submit a valid PR before submitting an invalid PR). The commit can be genuine, but the commit message can be malicious. This can be used to execute code on the GitHub runners and can be used to exfiltrate any secrets used in the CI pipeline, including repository tokens. Version 2 has a fix for this issue.", "other": {"cve": {"id": "CVE-2023-30623", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-24T22:15:09.870", "lastModified": "2023-05-04T15:54:43.193", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "`embano1/wip` is a GitHub Action written in Bash. Prior to version 2, the  `embano1/wip` action uses the `github.event.pull_request.title` parameter in an insecure way. The title parameter is used in a run statement - resulting in a command injection vulnerability due to string interpolation. This vulnerability can be triggered by any user on GitHub. They just need to create a pull request with a commit message containing an exploit. (Note that first-time PR requests will not be run - but the attacker can submit a valid PR before submitting an invalid PR). The commit can be genuine, but the commit message can be malicious. This can be used to execute code on the GitHub runners and can be used to exfiltrate any secrets used in the CI pipeline, including repository tokens. Version 2 has a fix for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wip_project:wip:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "D020BBA6-CF6E-436E-8D8E-CF85E0F7F490"}]}]}], "references": [{"url": "https://github.com/embano1/wip/commit/c25450f77ed02c20d00b76ee3b33ff43838739a2", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/embano1/wip/security/advisories/GHSA-rg3q-prf8-qxmp", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://securitylab.github.com/research/github-actions-untrusted-input/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/embano1/wip/commit/c25450f77ed02c20d00b76ee3b33ff43838739a2"}}