{"buggy_code": ["<?php\nnamespace App\\Http\\Transformers;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Asset;\nuse Gate;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nclass AssetsTransformer\n{\n    public function transformAssets(Collection $assets, $total)\n    {\n        $array = array();\n        foreach ($assets as $asset) {\n            $array[] = self::transformAsset($asset);\n        }\n        return (new DatatablesTransformer)->transformDatatables($array, $total);\n    }\n\n\n    public function transformAsset(Asset $asset)\n    {\n        $array = [\n            'id' => (int) $asset->id,\n            'name' => e($asset->name),\n            'asset_tag' => e($asset->asset_tag),\n            'serial' => e($asset->serial),\n            'model' => ($asset->model) ? [\n                'id' => (int) $asset->model->id,\n                'name'=> e($asset->model->name)\n            ] : null,\n            'model_number' => (($asset->model) && ($asset->model->model_number)) ? e($asset->model->model_number) : null,\n            'eol' => ($asset->purchase_date!='') ? Helper::getFormattedDateObject($asset->present()->eol_date(), 'date') : null ,\n            'status_label' => ($asset->assetstatus) ? [\n                'id' => (int) $asset->assetstatus->id,\n                'name'=> e($asset->assetstatus->name),\n                'status_type'=> e($asset->assetstatus->getStatuslabelType()),\n                'status_meta' => e($asset->present()->statusMeta),\n            ] : null,\n            'category' => (($asset->model) && ($asset->model->category)) ? [\n                'id' => (int) $asset->model->category->id,\n                'name'=> e($asset->model->category->name)\n            ]  : null,\n            'manufacturer' => (($asset->model) && ($asset->model->manufacturer)) ? [\n                'id' => (int) $asset->model->manufacturer->id,\n                'name'=> e($asset->model->manufacturer->name)\n            ] : null,\n            'supplier' => ($asset->supplier) ? [\n                'id' => (int) $asset->supplier->id,\n                'name'=> e($asset->supplier->name)\n            ]  : null,\n            'notes' => ($asset->notes) ? e($asset->notes) : null,\n            'order_number' => ($asset->order_number) ? e($asset->order_number) : null,\n            'company' => ($asset->company) ? [\n                'id' => (int) $asset->company->id,\n                'name'=> e($asset->company->name)\n            ] : null,\n            'location' => ($asset->location) ? [\n                'id' => (int) $asset->location->id,\n                'name'=> e($asset->location->name)\n            ]  : null,\n            'rtd_location' => ($asset->defaultLoc) ? [\n                'id' => (int) $asset->defaultLoc->id,\n                'name'=> e($asset->defaultLoc->name)\n            ]  : null,\n            'image' => ($asset->getImageUrl()) ? $asset->getImageUrl() : null,\n            'assigned_to' => $this->transformAssignedTo($asset),\n            'warranty_months' =>  ($asset->warranty_months > 0) ? e($asset->warranty_months . ' ' . trans('admin/hardware/form.months')) : null,\n            'warranty_expires' => ($asset->warranty_months > 0) ?  Helper::getFormattedDateObject($asset->warranty_expires, 'date') : null,\n            'created_at' => Helper::getFormattedDateObject($asset->created_at, 'datetime'),\n            'updated_at' => Helper::getFormattedDateObject($asset->updated_at, 'datetime'),\n            'last_audit_date' => Helper::getFormattedDateObject($asset->last_audit_date, 'datetime'),\n            'next_audit_date' => Helper::getFormattedDateObject($asset->next_audit_date, 'date'),\n            'deleted_at' => Helper::getFormattedDateObject($asset->deleted_at, 'datetime'),\n            'purchase_date' => Helper::getFormattedDateObject($asset->purchase_date, 'date'),\n            'last_checkout' => Helper::getFormattedDateObject($asset->last_checkout, 'datetime'),\n            'expected_checkin' => Helper::getFormattedDateObject($asset->expected_checkin, 'date'),\n            'purchase_cost' => Helper::formatCurrencyOutput($asset->purchase_cost),\n            'checkin_counter' => (int) $asset->checkin_counter,\n            'checkout_counter' => (int) $asset->checkout_counter,\n            'requests_counter' => (int) $asset->requests_counter,\n            'user_can_checkout' => (bool) $asset->availableForCheckout(),\n        ];\n\n\n        if (($asset->model) && ($asset->model->fieldset) && ($asset->model->fieldset->fields->count() > 0)) {\n            $fields_array = array();\n\n            foreach ($asset->model->fieldset->fields as $field) {\n\n                if ($field->isFieldDecryptable($asset->{$field->convertUnicodeDbSlug()})) {\n                    $decrypted = \\App\\Helpers\\Helper::gracefulDecrypt($field,$asset->{$field->convertUnicodeDbSlug()});\n                    $value = (Gate::allows('superadmin')) ? $decrypted : strtoupper(trans('admin/custom_fields/general.encrypted'));\n\n                    $fields_array[$field->name] = [\n                            'field' => e($field->convertUnicodeDbSlug()),\n                            'value' => e($value),\n                            'field_format' => $field->format,\n                        ];\n\n                } else {\n                    $fields_array[$field->name] = [\n                        'field' => e($field->convertUnicodeDbSlug()),\n                        'value' => e($asset->{$field->convertUnicodeDbSlug()}),\n                        'field_format' => $field->format,\n                    ];\n\n\n                }\n                $array['custom_fields'] = $fields_array;\n            }\n        } else {\n            $array['custom_fields'] = array();\n        }\n\n        $permissions_array['available_actions'] = [\n            'checkout'      => ($asset->deleted_at=='' && Gate::allows('checkout', Asset::class)) ? true : false,\n            'checkin'       => ($asset->deleted_at=='' && Gate::allows('checkin', Asset::class)) ? true : false,\n            'clone'         => Gate::allows('create', Asset::class) ? true : false,\n            'restore'       => ($asset->deleted_at!='' && Gate::allows('create', Asset::class)) ? true : false,\n            'update'        => ($asset->deleted_at=='' && Gate::allows('update', Asset::class)) ? true : false,\n            'delete'        => ($asset->deleted_at=='' && $asset->assigned_to =='' && Gate::allows('delete', Asset::class)) ? true : false,\n        ];\n\n\n\n        if (request('components')=='true') {\n        \n            if ($asset->components) {\n                $array['components'] = [];\n    \n                foreach ($asset->components as $component) {\n                    $array['components'][] = [\n                        \n                            'id' => $component->id,\n                            'pivot_id' => $component->pivot->id,\n                            'name' => e($component->name),\n                            'qty' => $component->pivot->assigned_qty,\n                            'price_cost' => $component->purchase_cost,\n                            'purchase_total' => $component->purchase_cost * $component->pivot->assigned_qty,\n                            'checkout_date' => Helper::getFormattedDateObject($component->pivot->created_at, 'datetime') ,\n                        \n                    ];\n                }\n            }\n\n        }\n        \n        $array += $permissions_array;\n        return $array;\n    }\n\n    public function transformAssetsDatatable($assets)\n    {\n        return (new DatatablesTransformer)->transformDatatables($assets);\n    }\n\n    public function transformAssignedTo($asset)\n    {\n        if ($asset->checkedOutToUser()) {\n            return $asset->assigned ? [\n                    'id' => (int) $asset->assigned->id,\n                    'username' => e($asset->assigned->username),\n                    'name' => e($asset->assigned->getFullNameAttribute()),\n                    'first_name'=> e($asset->assigned->first_name),\n                    'last_name'=> ($asset->assigned->last_name) ? e($asset->assigned->last_name) : null,\n                    'employee_number' =>  ($asset->assigned->employee_num) ? e($asset->assigned->employee_num) : null,\n                    'type' => 'user'\n                ] : null;\n        }\n        return $asset->assigned ? [\n            'id' => $asset->assigned->id,\n            'name' => $asset->assigned->display_name,\n            'type' => $asset->assignedType()\n        ] : null;\n    }\n\n\n    public function transformRequestedAssets(Collection $assets, $total)\n    {\n        $array = array();\n        foreach ($assets as $asset) {\n            $array[] = self::transformRequestedAsset($asset);\n        }\n        return (new DatatablesTransformer)->transformDatatables($array, $total);\n    }\n\n    public function transformRequestedAsset(Asset $asset) {\n        $array = [\n            'id' => (int) $asset->id,\n            'name' => e($asset->name),\n            'asset_tag' => e($asset->asset_tag),\n            'serial' => e($asset->serial),\n            'image' => ($asset->getImageUrl()) ? $asset->getImageUrl() : null,\n            'model' => ($asset->model) ? e($asset->model->name) : null,\n            'model_number' => (($asset->model) && ($asset->model->model_number)) ? e($asset->model->model_number) : null,\n            'expected_checkin' => Helper::getFormattedDateObject($asset->expected_checkin, 'date'),\n            'location' => ($asset->location) ? e($asset->location->name) : null,\n            'status'=> ($asset->assetstatus) ? $asset->present()->statusMeta : null,\n        ];\n\n        $permissions_array['available_actions'] = [\n            'cancel' => ($asset->isRequestedBy(\\Auth::user())) ? true : false,\n            'request' => ($asset->isRequestedBy(\\Auth::user())) ? false : true,\n\n        ];\n\n         $array += $permissions_array;\n        return $array;\n\n    }\n}"], "fixing_code": ["<?php\nnamespace App\\Http\\Transformers;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Asset;\nuse Gate;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nclass AssetsTransformer\n{\n    public function transformAssets(Collection $assets, $total)\n    {\n        $array = array();\n        foreach ($assets as $asset) {\n            $array[] = self::transformAsset($asset);\n        }\n        return (new DatatablesTransformer)->transformDatatables($array, $total);\n    }\n\n\n    public function transformAsset(Asset $asset)\n    {\n        $array = [\n            'id' => (int) $asset->id,\n            'name' => e($asset->name),\n            'asset_tag' => e($asset->asset_tag),\n            'serial' => e($asset->serial),\n            'model' => ($asset->model) ? [\n                'id' => (int) $asset->model->id,\n                'name'=> e($asset->model->name)\n            ] : null,\n            'model_number' => (($asset->model) && ($asset->model->model_number)) ? e($asset->model->model_number) : null,\n            'eol' => ($asset->purchase_date!='') ? Helper::getFormattedDateObject($asset->present()->eol_date(), 'date') : null ,\n            'status_label' => ($asset->assetstatus) ? [\n                'id' => (int) $asset->assetstatus->id,\n                'name'=> e($asset->assetstatus->name),\n                'status_type'=> e($asset->assetstatus->getStatuslabelType()),\n                'status_meta' => e($asset->present()->statusMeta),\n            ] : null,\n            'category' => (($asset->model) && ($asset->model->category)) ? [\n                'id' => (int) $asset->model->category->id,\n                'name'=> e($asset->model->category->name)\n            ]  : null,\n            'manufacturer' => (($asset->model) && ($asset->model->manufacturer)) ? [\n                'id' => (int) $asset->model->manufacturer->id,\n                'name'=> e($asset->model->manufacturer->name)\n            ] : null,\n            'supplier' => ($asset->supplier) ? [\n                'id' => (int) $asset->supplier->id,\n                'name'=> e($asset->supplier->name)\n            ]  : null,\n            'notes' => ($asset->notes) ? e($asset->notes) : null,\n            'order_number' => ($asset->order_number) ? e($asset->order_number) : null,\n            'company' => ($asset->company) ? [\n                'id' => (int) $asset->company->id,\n                'name'=> e($asset->company->name)\n            ] : null,\n            'location' => ($asset->location) ? [\n                'id' => (int) $asset->location->id,\n                'name'=> e($asset->location->name)\n            ]  : null,\n            'rtd_location' => ($asset->defaultLoc) ? [\n                'id' => (int) $asset->defaultLoc->id,\n                'name'=> e($asset->defaultLoc->name)\n            ]  : null,\n            'image' => ($asset->getImageUrl()) ? $asset->getImageUrl() : null,\n            'assigned_to' => $this->transformAssignedTo($asset),\n            'warranty_months' =>  ($asset->warranty_months > 0) ? e($asset->warranty_months . ' ' . trans('admin/hardware/form.months')) : null,\n            'warranty_expires' => ($asset->warranty_months > 0) ?  Helper::getFormattedDateObject($asset->warranty_expires, 'date') : null,\n            'created_at' => Helper::getFormattedDateObject($asset->created_at, 'datetime'),\n            'updated_at' => Helper::getFormattedDateObject($asset->updated_at, 'datetime'),\n            'last_audit_date' => Helper::getFormattedDateObject($asset->last_audit_date, 'datetime'),\n            'next_audit_date' => Helper::getFormattedDateObject($asset->next_audit_date, 'date'),\n            'deleted_at' => Helper::getFormattedDateObject($asset->deleted_at, 'datetime'),\n            'purchase_date' => Helper::getFormattedDateObject($asset->purchase_date, 'date'),\n            'last_checkout' => Helper::getFormattedDateObject($asset->last_checkout, 'datetime'),\n            'expected_checkin' => Helper::getFormattedDateObject($asset->expected_checkin, 'date'),\n            'purchase_cost' => Helper::formatCurrencyOutput($asset->purchase_cost),\n            'checkin_counter' => (int) $asset->checkin_counter,\n            'checkout_counter' => (int) $asset->checkout_counter,\n            'requests_counter' => (int) $asset->requests_counter,\n            'user_can_checkout' => (bool) $asset->availableForCheckout(),\n        ];\n\n\n        if (($asset->model) && ($asset->model->fieldset) && ($asset->model->fieldset->fields->count() > 0)) {\n            $fields_array = array();\n\n            foreach ($asset->model->fieldset->fields as $field) {\n\n                if ($field->isFieldDecryptable($asset->{$field->convertUnicodeDbSlug()})) {\n                    $decrypted = \\App\\Helpers\\Helper::gracefulDecrypt($field,$asset->{$field->convertUnicodeDbSlug()});\n                    $value = (Gate::allows('superadmin')) ? $decrypted : strtoupper(trans('admin/custom_fields/general.encrypted'));\n\n                    $fields_array[$field->name] = [\n                            'field' => e($field->convertUnicodeDbSlug()),\n                            'value' => e($value),\n                            'field_format' => $field->format,\n                        ];\n\n                } else {\n                    $fields_array[$field->name] = [\n                        'field' => e($field->convertUnicodeDbSlug()),\n                        'value' => e($asset->{$field->convertUnicodeDbSlug()}),\n                        'field_format' => $field->format,\n                    ];\n\n\n                }\n                $array['custom_fields'] = $fields_array;\n            }\n        } else {\n            $array['custom_fields'] = array();\n        }\n\n        $permissions_array['available_actions'] = [\n            'checkout'      => ($asset->deleted_at=='' && Gate::allows('checkout', Asset::class)) ? true : false,\n            'checkin'       => ($asset->deleted_at=='' && Gate::allows('checkin', Asset::class)) ? true : false,\n            'clone'         => Gate::allows('create', Asset::class) ? true : false,\n            'restore'       => ($asset->deleted_at!='' && Gate::allows('create', Asset::class)) ? true : false,\n            'update'        => ($asset->deleted_at=='' && Gate::allows('update', Asset::class)) ? true : false,\n            'delete'        => ($asset->deleted_at=='' && $asset->assigned_to =='' && Gate::allows('delete', Asset::class)) ? true : false,\n        ];\n\n\n\n        if (request('components')=='true') {\n        \n            if ($asset->components) {\n                $array['components'] = [];\n    \n                foreach ($asset->components as $component) {\n                    $array['components'][] = [\n                        \n                            'id' => $component->id,\n                            'pivot_id' => $component->pivot->id,\n                            'name' => e($component->name),\n                            'qty' => $component->pivot->assigned_qty,\n                            'price_cost' => $component->purchase_cost,\n                            'purchase_total' => $component->purchase_cost * $component->pivot->assigned_qty,\n                            'checkout_date' => Helper::getFormattedDateObject($component->pivot->created_at, 'datetime') ,\n                        \n                    ];\n                }\n            }\n\n        }\n        \n        $array += $permissions_array;\n        return $array;\n    }\n\n    public function transformAssetsDatatable($assets)\n    {\n        return (new DatatablesTransformer)->transformDatatables($assets);\n    }\n\n    public function transformAssignedTo($asset)\n    {\n        if ($asset->checkedOutToUser()) {\n            return $asset->assigned ? [\n                    'id' => (int) $asset->assigned->id,\n                    'username' => e($asset->assigned->username),\n                    'name' => e($asset->assigned->getFullNameAttribute()),\n                    'first_name'=> e($asset->assigned->first_name),\n                    'last_name'=> ($asset->assigned->last_name) ? e($asset->assigned->last_name) : null,\n                    'employee_number' =>  ($asset->assigned->employee_num) ? e($asset->assigned->employee_num) : null,\n                    'type' => 'user'\n                ] : null;\n        }\n        return $asset->assigned ? [\n            'id' => $asset->assigned->id,\n            'name' => e($asset->assigned->display_name),\n            'type' => $asset->assignedType()\n        ] : null;\n    }\n\n\n    public function transformRequestedAssets(Collection $assets, $total)\n    {\n        $array = array();\n        foreach ($assets as $asset) {\n            $array[] = self::transformRequestedAsset($asset);\n        }\n        return (new DatatablesTransformer)->transformDatatables($array, $total);\n    }\n\n    public function transformRequestedAsset(Asset $asset) {\n        $array = [\n            'id' => (int) $asset->id,\n            'name' => e($asset->name),\n            'asset_tag' => e($asset->asset_tag),\n            'serial' => e($asset->serial),\n            'image' => ($asset->getImageUrl()) ? $asset->getImageUrl() : null,\n            'model' => ($asset->model) ? e($asset->model->name) : null,\n            'model_number' => (($asset->model) && ($asset->model->model_number)) ? e($asset->model->model_number) : null,\n            'expected_checkin' => Helper::getFormattedDateObject($asset->expected_checkin, 'date'),\n            'location' => ($asset->location) ? e($asset->location->name) : null,\n            'status'=> ($asset->assetstatus) ? $asset->present()->statusMeta : null,\n        ];\n\n        $permissions_array['available_actions'] = [\n            'cancel' => ($asset->isRequestedBy(\\Auth::user())) ? true : false,\n            'request' => ($asset->isRequestedBy(\\Auth::user())) ? false : true,\n\n        ];\n\n         $array += $permissions_array;\n        return $array;\n\n    }\n}"], "filenames": ["app/Http/Transformers/AssetsTransformer.php"], "buggy_code_start_loc": [173], "buggy_code_end_loc": [174], "fixing_code_start_loc": [173], "fixing_code_end_loc": [174], "type": "CWE-79", "message": "snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-4108", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-14T20:15:07.937", "lastModified": "2021-12-21T14:50:11.677", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "snipe-it is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "snipe-it es vulnerable a una Neutralizaci\u00f3n Inapropiada de la Entrada Durante la Generaci\u00f3n de la P\u00e1gina Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.1, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.3.5", "matchCriteriaId": "9D52C0CB-479D-4356-8206-CD41CBFC4BDA"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/9d5d1a9f9aae2c8baee48551185da5de0cdb62c2", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/5069a037-040e-4d77-8526-846e65edfaf4", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/9d5d1a9f9aae2c8baee48551185da5de0cdb62c2"}}