{"buggy_code": ["package com.manydesigns.portofino.microservices.launcher;\n\nimport org.apache.commons.io.IOUtils;\n\nimport java.io.*;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n\npublic class WarFileLauncher {\n\n    public static void main (String[] args) throws URISyntaxException, IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        URI uri = WarFileLauncher.class.getProtectionDomain().getCodeSource().getLocation().toURI();\n        String pathFromUri;\n        if(uri.getScheme().equals(\"jar\")) {\n            pathFromUri = new URI(uri.getSchemeSpecificPart()).getSchemeSpecificPart();\n            int index = pathFromUri.indexOf(\"!\");\n            if(index >= 0) {\n                pathFromUri = pathFromUri.substring(0, index);\n            }\n        } else {\n            pathFromUri = uri.toString();\n        }\n        File warFile = new File(pathFromUri);\n        String warPath = warFile.getAbsolutePath();\n        if(!warFile.exists()) {\n            System.err.println(\"Could not determine the path of the running war file: \" + warPath);\n            System.exit(1);\n        }\n        int port = 8080;\n        File tempDir = createTempDir(port);\n        try(JarFile jarFile = new JarFile(warFile)) {\n            Enumeration<JarEntry> entries = jarFile.entries();\n            List<URL> tomcatLibs = new ArrayList<>();\n            File tomcatLibDir = new File(tempDir, \"tomcat-libs\");\n            tomcatLibDir.mkdir();\n            while(entries.hasMoreElements()) {\n                JarEntry entry = entries.nextElement();\n                if(entry.getName().startsWith(\"WEB-INF/lib-provided\") && entry.getName().endsWith(\".jar\")) {\n                    File outFile = new File(tomcatLibDir, entry.getName().substring(\"WEB-INF/lib-provided/\".length()));\n                    if (!outFile.toPath().normalize().startsWith(tomcatLibDir.toPath())) {\n                        throw new IOException(\"Bad zip entry: \" + entry.getName());\n                    }\n                    try(InputStream in = jarFile.getInputStream(entry);\n                        OutputStream out = new FileOutputStream(outFile)) {\n                        IOUtils.copy(in, out);\n                    }\n                    tomcatLibs.add(outFile.toURI().toURL());\n                }\n            }\n            File pkgFile = tomcatLibDir;\n            String packageName = TomcatLauncher.class.getPackage().getName();\n            for(String pkg : packageName.split(\"\\\\.\")) {\n                pkgFile = new File(pkgFile, pkg);\n            }\n            pkgFile.mkdirs();\n            File outFile = new File(pkgFile, \"TomcatLauncher.class\");\n            try(InputStream in = TomcatLauncher.class.getResourceAsStream(\"TomcatLauncher.class\");\n                OutputStream out = new FileOutputStream(outFile)) {\n                IOUtils.copy(in, out);\n            }\n            tomcatLibs.add(tomcatLibDir.toURI().toURL());\n            URLClassLoader tomcatClassLoader = new URLClassLoader(tomcatLibs.toArray(new URL[0]));\n\n            Class<?> launcherClass = tomcatClassLoader.loadClass(TomcatLauncher.class.getName());\n            Method launcherMethod = launcherClass.getMethod(\"launch\", File.class, String.class, Integer.TYPE);\n            launcherMethod.invoke(null, tempDir, warPath, port);\n        }\n    }\n\n    /**\n     * Returns the absolute path to the temp directory.\n     */\n    public static File createTempDir(int port) throws IOException {\n        File tempDir = File.createTempFile(\"portofino.tomcat.\", \".\" + port);\n        tempDir.delete();\n        tempDir.mkdir();\n        tempDir.deleteOnExit();\n        return tempDir;\n    }\n\n}\n"], "fixing_code": ["package com.manydesigns.portofino.microservices.launcher;\n\nimport org.apache.commons.io.IOUtils;\n\nimport java.io.*;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.nio.file.Files;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n\npublic class WarFileLauncher {\n\n    public static void main (String[] args) throws URISyntaxException, IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        URI uri = WarFileLauncher.class.getProtectionDomain().getCodeSource().getLocation().toURI();\n        String pathFromUri;\n        if(uri.getScheme().equals(\"jar\")) {\n            pathFromUri = new URI(uri.getSchemeSpecificPart()).getSchemeSpecificPart();\n            int index = pathFromUri.indexOf(\"!\");\n            if(index >= 0) {\n                pathFromUri = pathFromUri.substring(0, index);\n            }\n        } else {\n            pathFromUri = uri.toString();\n        }\n        File warFile = new File(pathFromUri);\n        String warPath = warFile.getAbsolutePath();\n        if(!warFile.exists()) {\n            System.err.println(\"Could not determine the path of the running war file: \" + warPath);\n            System.exit(1);\n        }\n        int port = 8080;\n        File tempDir = createTempDir(port);\n        try(JarFile jarFile = new JarFile(warFile)) {\n            Enumeration<JarEntry> entries = jarFile.entries();\n            List<URL> tomcatLibs = new ArrayList<>();\n            File tomcatLibDir = new File(tempDir, \"tomcat-libs\");\n            tomcatLibDir.mkdir();\n            while(entries.hasMoreElements()) {\n                JarEntry entry = entries.nextElement();\n                if(entry.getName().startsWith(\"WEB-INF/lib-provided\") && entry.getName().endsWith(\".jar\")) {\n                    File outFile = new File(tomcatLibDir, entry.getName().substring(\"WEB-INF/lib-provided/\".length()));\n                    if (!outFile.toPath().normalize().startsWith(tomcatLibDir.toPath())) {\n                        throw new IOException(\"Bad zip entry: \" + entry.getName());\n                    }\n                    try(InputStream in = jarFile.getInputStream(entry);\n                        OutputStream out = new FileOutputStream(outFile)) {\n                        IOUtils.copy(in, out);\n                    }\n                    tomcatLibs.add(outFile.toURI().toURL());\n                }\n            }\n            File pkgFile = tomcatLibDir;\n            String packageName = TomcatLauncher.class.getPackage().getName();\n            for(String pkg : packageName.split(\"\\\\.\")) {\n                pkgFile = new File(pkgFile, pkg);\n            }\n            pkgFile.mkdirs();\n            File outFile = new File(pkgFile, \"TomcatLauncher.class\");\n            try(InputStream in = TomcatLauncher.class.getResourceAsStream(\"TomcatLauncher.class\");\n                OutputStream out = new FileOutputStream(outFile)) {\n                IOUtils.copy(in, out);\n            }\n            tomcatLibs.add(tomcatLibDir.toURI().toURL());\n            URLClassLoader tomcatClassLoader = new URLClassLoader(tomcatLibs.toArray(new URL[0]));\n\n            Class<?> launcherClass = tomcatClassLoader.loadClass(TomcatLauncher.class.getName());\n            Method launcherMethod = launcherClass.getMethod(\"launch\", File.class, String.class, Integer.TYPE);\n            launcherMethod.invoke(null, tempDir, warPath, port);\n        }\n    }\n\n    /**\n     * Returns the absolute path to the temp directory.\n     */\n    public static File createTempDir(int port) throws IOException {\n        File tempDir = Files.createTempDirectory(\"portofino.tomcat.\" + \".\" + port).toFile();\n        tempDir.deleteOnExit();\n        return tempDir;\n    }\n\n}\n"], "filenames": ["microservices/launcher/src/main/java/com/manydesigns/portofino/microservices/launcher/WarFileLauncher.java"], "buggy_code_start_loc": [11], "buggy_code_end_loc": [86], "fixing_code_start_loc": [12], "fixing_code_end_loc": [85], "type": "CWE-668", "message": "A vulnerability has been found in ManyDesigns Portofino 5.3.2 and classified as problematic. Affected by this vulnerability is the function createTempDir of the file WarFileLauncher.java. The manipulation leads to creation of temporary file in directory with insecure permissions. Upgrading to version 5.3.3 is able to address this issue. The name of the patch is 94653cb357806c9cf24d8d294e6afea33f8f0775. It is recommended to upgrade the affected component. The identifier VDB-213457 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-3952", "sourceIdentifier": "cna@vuldb.com", "published": "2022-11-11T14:15:11.367", "lastModified": "2022-11-15T20:47:23.083", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in ManyDesigns Portofino 5.3.2 and classified as problematic. Affected by this vulnerability is the function createTempDir of the file WarFileLauncher.java. The manipulation leads to creation of temporary file in directory with insecure permissions. Upgrading to version 5.3.3 is able to address this issue. The name of the patch is 94653cb357806c9cf24d8d294e6afea33f8f0775. It is recommended to upgrade the affected component. The identifier VDB-213457 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.6, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-668"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-377"}, {"lang": "en", "value": "CWE-379"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:manydesigns:portofino:5.3.2:*:*:*:*:*:*:*", "matchCriteriaId": "0082AAE9-A01F-41B3-818B-8EFB224F4B0C"}]}]}], "references": [{"url": "https://github.com/ManyDesigns/Portofino/commit/94653cb357806c9cf24d8d294e6afea33f8f0775", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ManyDesigns/Portofino/pull/580", "source": "cna@vuldb.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/ManyDesigns/Portofino/releases/tag/v5.3.3", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.213457", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ManyDesigns/Portofino/commit/94653cb357806c9cf24d8d294e6afea33f8f0775"}}