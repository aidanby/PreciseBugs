{"buggy_code": ["import sshpubkeys\nfrom sqlalchemy.exc import IntegrityError\n\nfrom grouper.models.counter import Counter\nfrom grouper.models.public_key import PublicKey\nfrom grouper.plugin import get_plugin_proxy\nfrom grouper.plugin.exceptions import PluginRejectedPublicKey\n\n\nclass DuplicateKey(Exception):\n    pass\n\n\nclass PublicKeyParseError(Exception):\n    pass\n\n\nclass BadPublicKey(Exception):\n    pass\n\n\nclass KeyNotFound(Exception):\n    \"\"\"Particular user's specific key was not found.\"\"\"\n\n    def __init__(self, key_id, user_id):\n        # type: (int, int) -> None\n        self.key_id = key_id\n        self.user_id = user_id\n\n\ndef get_public_key(session, user_id, key_id):\n    \"\"\"Retrieve specific public key for user.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n        key_id(int): id of the user's key we want to delete\n\n    Throws:\n        KeyNotFound if specified key wasn't found\n\n    Returns:\n        PublicKey model object representing the key\n    \"\"\"\n    pkey = session.query(PublicKey).filter_by(id=key_id, user_id=user_id).scalar()\n    if not pkey:\n        raise KeyNotFound(key_id=key_id, user_id=user_id)\n\n    return pkey\n\n\ndef add_public_key(session, user, public_key_str):\n    \"\"\"Add a public key for a particular user.\n\n    Args:\n        session: db session\n        user: User model of user in question\n        public_key_str: public key to add\n\n    Throws:\n        DuplicateKey if key is already in use\n        PublicKeyParseError if key can't be parsed\n        BadPublicKey if a plugin rejects the key\n\n    Returns:\n        PublicKey model object representing the key\n    \"\"\"\n    pubkey = sshpubkeys.SSHKey(public_key_str, strict=True)\n\n    try:\n        pubkey.parse()\n    except sshpubkeys.InvalidKeyException as e:\n        raise PublicKeyParseError(str(e))\n\n    try:\n        get_plugin_proxy().will_add_public_key(pubkey)\n    except PluginRejectedPublicKey as e:\n        raise BadPublicKey(str(e))\n\n    db_pubkey = PublicKey(\n        user=user,\n        public_key=pubkey.keydata.strip(),\n        fingerprint=pubkey.hash_md5().replace(\"MD5:\", \"\"),\n        fingerprint_sha256=pubkey.hash_sha256().replace(\"SHA256:\", \"\"),\n        key_size=pubkey.bits,\n        key_type=pubkey.key_type,\n        comment=pubkey.comment,\n    )\n\n    try:\n        db_pubkey.add(session)\n        Counter.incr(session, \"updates\")\n    except IntegrityError:\n        session.rollback()\n        raise DuplicateKey()\n\n    session.commit()\n\n    return db_pubkey\n\n\ndef delete_public_key(session, user_id, key_id):\n    \"\"\"Delete a particular user's public key.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n        key_id(int): id of the user's key we want to delete\n\n    Throws:\n        KeyNotFound if specified key wasn't found\n    \"\"\"\n    pkey = get_public_key(session, user_id, key_id)\n    pkey.delete(session)\n    Counter.incr(session, \"updates\")\n    session.commit()\n\n\ndef get_public_keys_of_user(session, user_id):\n    \"\"\"Retrieve all public keys for user.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n\n    Returns:\n        List of PublicKey model object representing the keys\n    \"\"\"\n    pkey = session.query(PublicKey).filter_by(user_id=user_id).all()\n    return pkey\n", "SSH_KEY_1 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCUQeasspT/etEJR2WUoR+h2sMOQYbJgr0QE+J8p97gEhmz107KWZ+3\"\n    \"mbOwyIFzfWBcJZCEg9wy5Paj+YxbGONqbpXAhPdVQ2TLgxr41bNXvbcRAxZC+Q12UZywR4Klb2kungKz4qkcmSZzouaKK\"\n    \"12UxzGB3xQ0N+3osKFj3xA1+B6HqrVreU19XdVoAJh0xLZwhw17/NDM+dAcEdMZ9V89KyjwjraXtOVfFhQF0EDF0ame8d\"\n    \"6UkayGrAiXC2He0P2Cja+J371P27AlNLHFJij8WGxvcGGSeAxMLoVSDOOllLCYH5UieV8mNpX1kNe2LeA58ciZb0AXHai\"\n    \"pSmCHgh/ some-comment\"\n)\n\nSSH_KEY_2 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF1DyXlqc40AVUgt/IO0GFcTniaoFt5qCUAeNVlvalMnsrRULIXkb0g\"\n    \"1ds9P9/UI2jWr70ZYG7XieQX1F7NpzaDeUyPGCrLV1/ev1ZtUImCrDFfMznEjkcqB33mRe1rCFGKNVOYUviPE1yBdbfZB\"\n    \"GUuJBX2GOXQQj9fU4Hiq3rAgOhz89717mt+qZxZllZ4mdyVEaMBWCwqAvl7Z5ecDjB+llFpBORTmsT8OZoGbZnJTIB1d9\"\n    \"j0tSbegP17emE+g9fTrk4/ePmSIAKcSV3xj6h98AGesNibyu9eKVrroEptxX4crl0o95Me6B1/DCL632xrTO0a5mSmlF4\"\n    \"cxCgjLj9 to/ key2\"\n)\n\nSSH_KEY_BAD = \"ssh-rsa AAAblahblahkey some-comment\"\n\nSSH_KEY_RSA_1024 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDhKgSsCJR9UyQa/Gsheb5F56hg23CVnCLpmpyC2JMqVEptG9CL83Oft\"\n    \"pOPvEb/785Act4En1VFvwMwTj25VurbG3XI984csiNdWPlM1ke4lHK2PQepSYyZVYn+hhXhzSILNDixhBYeDVv4GOfJM1\"\n    \"HBO2AEtupOMHOqtnQLjV1UnQ== rsa-1024\"\n)\n\nSSH_KEY_DSA = (\n    \"ssh-dss AAAAB3NzaC1kc3MAAACBAKdCbYh9GgDPFppJmyRcpWhFn3Xc5vcljGE20df84KYQeBVCQg3zTLkwynHyrpEwT\"\n    \"HmIc0bgH14muGwPOdt8CEtj9EvcPHHCEaZ/4IdT02awY+Opszq7LI/YXzfu3cbgOoB22zj+chhryCiMIisEBHQv00F54z\"\n    \"01yOi3mOX7BIZBAAAAFQDgX/4IaAAtnbQ3DeDbWSJVxdKtIQAAAIEAoUsqfKyrzmDLgLhLpJpVs5BPdziHxlJM1+cQuIa\"\n    \"VsTHe7tyu61hpColor2ybyhafKhJ3ZH9bsl8DASwkGQXyjOTL/T6IzVhlcCfeDtirwAwQNINz8xwplLIbCOLAAOdVrKE9\"\n    \"xHMO5RPXO8i58CFF7c5fm3vg87nLH+uh1AwFyysAAACABCca7QX1ZJIoIt37HxCwV3+ktcoVhoZhuzHNRe9l4CSKSeSdn\"\n    \"WrdaC8G7tvKPTrImYIPqSZz3ohLDioflMUN3yIHnO1VsDn0hwTa7x9c/RiGAkiwKagF1icGfzgEiMt7PTfJT/nMeFoahu\"\n    \"JEk8kasRtdm0VcM4JyOLiqej/8VRo= dsa-1024\"\n)\n\nSSH_KEY_ECDSA_P256 = (\n    \"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBD7FwYV01qXgP2TManNEq\"\n    \"nOD/JXCp7WChDk7c3GiwHSlZVn3xvmtphQjzE6Ag4GDh/bFOaKIcGc66691GsOE6Vo= ecdsa-p256\"\n)\n\nSSH_KEY_ED25519 = (\n    \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJXKRoCgQqJ0iyC51HOIJzPqjwZcvf3DF9IAwFQWwqop comment\"\n)\n", "import pytest\nfrom mock import patch\n\nfrom grouper.plugin.base import BasePlugin\nfrom grouper.plugin.exceptions import PluginRejectedPublicKey\nfrom grouper.plugin.proxy import PluginProxy\nfrom grouper.public_key import (\n    add_public_key,\n    BadPublicKey,\n    DuplicateKey,\n    get_public_keys_of_user,\n    PublicKeyParseError,\n)\nfrom tests.constants import SSH_KEY_1, SSH_KEY_BAD\nfrom tests.fixtures import session, users  # noqa: F401\n\n\nclass PublicKeyPlugin(BasePlugin):\n    def will_add_public_key(self, key):\n        raise PluginRejectedPublicKey()\n\n\ndef test_duplicate_key(session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    add_public_key(session, user, SSH_KEY_1)\n    assert len(get_public_keys_of_user(session, user.id)) == 1\n\n    with pytest.raises(DuplicateKey):\n        add_public_key(session, user, SSH_KEY_1)\n\n    assert len(get_public_keys_of_user(session, user.id)) == 1\n\n\ndef test_bad_key(session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(PublicKeyParseError):\n        add_public_key(session, user, SSH_KEY_BAD)\n\n    assert get_public_keys_of_user(session, user.id) == []\n\n\n@patch(\"grouper.public_key.get_plugin_proxy\")\ndef test_rejected_key(get_plugin_proxy, session, users):  # noqa: F811\n    get_plugin_proxy.return_value = PluginProxy([PublicKeyPlugin()])\n\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(BadPublicKey):\n        add_public_key(session, user, SSH_KEY_1)\n\n    assert get_public_keys_of_user(session, user.id) == []\n"], "fixing_code": ["import sshpubkeys\nfrom sqlalchemy.exc import IntegrityError\n\nfrom grouper.models.counter import Counter\nfrom grouper.models.public_key import PublicKey\nfrom grouper.plugin import get_plugin_proxy\nfrom grouper.plugin.exceptions import PluginRejectedPublicKey\n\n\nclass DuplicateKey(Exception):\n    pass\n\n\nclass PublicKeyParseError(Exception):\n    pass\n\n\nclass BadPublicKey(Exception):\n    pass\n\n\nclass KeyNotFound(Exception):\n    \"\"\"Particular user's specific key was not found.\"\"\"\n\n    def __init__(self, key_id, user_id):\n        # type: (int, int) -> None\n        self.key_id = key_id\n        self.user_id = user_id\n\n\ndef get_public_key(session, user_id, key_id):\n    \"\"\"Retrieve specific public key for user.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n        key_id(int): id of the user's key we want to delete\n\n    Throws:\n        KeyNotFound if specified key wasn't found\n\n    Returns:\n        PublicKey model object representing the key\n    \"\"\"\n    pkey = session.query(PublicKey).filter_by(id=key_id, user_id=user_id).scalar()\n    if not pkey:\n        raise KeyNotFound(key_id=key_id, user_id=user_id)\n\n    return pkey\n\n\ndef add_public_key(session, user, public_key_str):\n    \"\"\"Add a public key for a particular user.\n\n    Args:\n        session: db session\n        user: User model of user in question\n        public_key_str: public key to add\n\n    Throws:\n        DuplicateKey if key is already in use\n        PublicKeyParseError if key can't be parsed\n        BadPublicKey if a plugin rejects the key\n\n    Returns:\n        PublicKey model object representing the key\n    \"\"\"\n    pubkey = sshpubkeys.SSHKey(public_key_str, strict=True)\n\n    try:\n        pubkey.parse()\n    except sshpubkeys.InvalidKeyException as e:\n        raise PublicKeyParseError(str(e))\n\n    # Allowing newlines can lead to injection attacks depending on how the key is\n    # consumed, such as if it's dumped in an authorized_keys file with a `command`\n    # restriction.\n    # Note parsing the key is insufficient to block this.\n    if \"\\r\" in public_key_str or \"\\n\" in public_key_str:\n        raise PublicKeyParseError(\"Public key cannot have newlines\")\n\n    try:\n        get_plugin_proxy().will_add_public_key(pubkey)\n    except PluginRejectedPublicKey as e:\n        raise BadPublicKey(str(e))\n\n    db_pubkey = PublicKey(\n        user=user,\n        public_key=pubkey.keydata.strip(),\n        fingerprint=pubkey.hash_md5().replace(\"MD5:\", \"\"),\n        fingerprint_sha256=pubkey.hash_sha256().replace(\"SHA256:\", \"\"),\n        key_size=pubkey.bits,\n        key_type=pubkey.key_type,\n        comment=pubkey.comment,\n    )\n\n    try:\n        db_pubkey.add(session)\n        Counter.incr(session, \"updates\")\n    except IntegrityError:\n        session.rollback()\n        raise DuplicateKey()\n\n    session.commit()\n\n    return db_pubkey\n\n\ndef delete_public_key(session, user_id, key_id):\n    \"\"\"Delete a particular user's public key.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n        key_id(int): id of the user's key we want to delete\n\n    Throws:\n        KeyNotFound if specified key wasn't found\n    \"\"\"\n    pkey = get_public_key(session, user_id, key_id)\n    pkey.delete(session)\n    Counter.incr(session, \"updates\")\n    session.commit()\n\n\ndef get_public_keys_of_user(session, user_id):\n    \"\"\"Retrieve all public keys for user.\n\n    Args:\n        session(models.base.session.Session): database session\n        user_id(int): id of user in question\n\n    Returns:\n        List of PublicKey model object representing the keys\n    \"\"\"\n    pkey = session.query(PublicKey).filter_by(user_id=user_id).all()\n    return pkey\n", "SSH_KEY_1 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCUQeasspT/etEJR2WUoR+h2sMOQYbJgr0QE+J8p97gEhmz107KWZ+3\"\n    \"mbOwyIFzfWBcJZCEg9wy5Paj+YxbGONqbpXAhPdVQ2TLgxr41bNXvbcRAxZC+Q12UZywR4Klb2kungKz4qkcmSZzouaKK\"\n    \"12UxzGB3xQ0N+3osKFj3xA1+B6HqrVreU19XdVoAJh0xLZwhw17/NDM+dAcEdMZ9V89KyjwjraXtOVfFhQF0EDF0ame8d\"\n    \"6UkayGrAiXC2He0P2Cja+J371P27AlNLHFJij8WGxvcGGSeAxMLoVSDOOllLCYH5UieV8mNpX1kNe2LeA58ciZb0AXHai\"\n    \"pSmCHgh/ some-comment\"\n)\n\nSSH_KEY_2 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF1DyXlqc40AVUgt/IO0GFcTniaoFt5qCUAeNVlvalMnsrRULIXkb0g\"\n    \"1ds9P9/UI2jWr70ZYG7XieQX1F7NpzaDeUyPGCrLV1/ev1ZtUImCrDFfMznEjkcqB33mRe1rCFGKNVOYUviPE1yBdbfZB\"\n    \"GUuJBX2GOXQQj9fU4Hiq3rAgOhz89717mt+qZxZllZ4mdyVEaMBWCwqAvl7Z5ecDjB+llFpBORTmsT8OZoGbZnJTIB1d9\"\n    \"j0tSbegP17emE+g9fTrk4/ePmSIAKcSV3xj6h98AGesNibyu9eKVrroEptxX4crl0o95Me6B1/DCL632xrTO0a5mSmlF4\"\n    \"cxCgjLj9 to/ key2\"\n)\n\nSSH_KEY_BAD = \"ssh-rsa AAAblahblahkey some-comment\"\n\nSSH_KEY_BAD_MULTILINE = SSH_KEY_1 + \"\\r\" + SSH_KEY_2\n\nSSH2_KEY_BAD = \"\"\"\\\n---- BEGIN SSH2 PUBLIC KEY ----\nfoobar: this is a chance to hide bad things\nAAAAC3NzaC1lZDI1NTE5AAAAIJ5O/AXibtVhySDYn60ATXftAU1oCe4BQubFYoV2juEb\n---- END SSH2 PUBLIC KEY ----\n\"\"\"\n\nSSH_KEY_RSA_1024 = (\n    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDhKgSsCJR9UyQa/Gsheb5F56hg23CVnCLpmpyC2JMqVEptG9CL83Oft\"\n    \"pOPvEb/785Act4En1VFvwMwTj25VurbG3XI984csiNdWPlM1ke4lHK2PQepSYyZVYn+hhXhzSILNDixhBYeDVv4GOfJM1\"\n    \"HBO2AEtupOMHOqtnQLjV1UnQ== rsa-1024\"\n)\n\nSSH_KEY_DSA = (\n    \"ssh-dss AAAAB3NzaC1kc3MAAACBAKdCbYh9GgDPFppJmyRcpWhFn3Xc5vcljGE20df84KYQeBVCQg3zTLkwynHyrpEwT\"\n    \"HmIc0bgH14muGwPOdt8CEtj9EvcPHHCEaZ/4IdT02awY+Opszq7LI/YXzfu3cbgOoB22zj+chhryCiMIisEBHQv00F54z\"\n    \"01yOi3mOX7BIZBAAAAFQDgX/4IaAAtnbQ3DeDbWSJVxdKtIQAAAIEAoUsqfKyrzmDLgLhLpJpVs5BPdziHxlJM1+cQuIa\"\n    \"VsTHe7tyu61hpColor2ybyhafKhJ3ZH9bsl8DASwkGQXyjOTL/T6IzVhlcCfeDtirwAwQNINz8xwplLIbCOLAAOdVrKE9\"\n    \"xHMO5RPXO8i58CFF7c5fm3vg87nLH+uh1AwFyysAAACABCca7QX1ZJIoIt37HxCwV3+ktcoVhoZhuzHNRe9l4CSKSeSdn\"\n    \"WrdaC8G7tvKPTrImYIPqSZz3ohLDioflMUN3yIHnO1VsDn0hwTa7x9c/RiGAkiwKagF1icGfzgEiMt7PTfJT/nMeFoahu\"\n    \"JEk8kasRtdm0VcM4JyOLiqej/8VRo= dsa-1024\"\n)\n\nSSH_KEY_ECDSA_P256 = (\n    \"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBD7FwYV01qXgP2TManNEq\"\n    \"nOD/JXCp7WChDk7c3GiwHSlZVn3xvmtphQjzE6Ag4GDh/bFOaKIcGc66691GsOE6Vo= ecdsa-p256\"\n)\n\nSSH_KEY_ED25519 = (\n    \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJXKRoCgQqJ0iyC51HOIJzPqjwZcvf3DF9IAwFQWwqop comment\"\n)\n", "import pytest\nfrom mock import patch\n\nfrom grouper.plugin.base import BasePlugin\nfrom grouper.plugin.exceptions import PluginRejectedPublicKey\nfrom grouper.plugin.proxy import PluginProxy\nfrom grouper.public_key import (\n    add_public_key,\n    BadPublicKey,\n    DuplicateKey,\n    get_public_keys_of_user,\n    PublicKeyParseError,\n)\nfrom tests.constants import SSH2_KEY_BAD, SSH_KEY_1, SSH_KEY_BAD, SSH_KEY_BAD_MULTILINE\nfrom tests.fixtures import session, users  # noqa: F401\n\n\nclass PublicKeyPlugin(BasePlugin):\n    def will_add_public_key(self, key):\n        raise PluginRejectedPublicKey()\n\n\ndef test_duplicate_key(session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    add_public_key(session, user, SSH_KEY_1)\n    assert len(get_public_keys_of_user(session, user.id)) == 1\n\n    with pytest.raises(DuplicateKey):\n        add_public_key(session, user, SSH_KEY_1)\n\n    assert len(get_public_keys_of_user(session, user.id)) == 1\n\n\ndef test_bad_key(session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(PublicKeyParseError):\n        add_public_key(session, user, SSH_KEY_BAD)\n\n    assert get_public_keys_of_user(session, user.id) == []\n\n\n@pytest.mark.parametrize(\"key\", [SSH_KEY_BAD_MULTILINE, SSH2_KEY_BAD])\ndef test_multiline_key(key, session, users):  # noqa: F811\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(PublicKeyParseError, match=\"Public key cannot have newlines\"):\n        add_public_key(session, user, key)\n\n    assert get_public_keys_of_user(session, user.id) == []\n\n\n@patch(\"grouper.public_key.get_plugin_proxy\")\ndef test_rejected_key(get_plugin_proxy, session, users):  # noqa: F811\n    get_plugin_proxy.return_value = PluginProxy([PublicKeyPlugin()])\n\n    user = users[\"cbguder@a.co\"]\n\n    with pytest.raises(BadPublicKey):\n        add_public_key(session, user, SSH_KEY_1)\n\n    assert get_public_keys_of_user(session, user.id) == []\n"], "filenames": ["grouper/public_key.py", "tests/constants.py", "tests/public_key_test.py"], "buggy_code_start_loc": [74, 17, 14], "buggy_code_end_loc": [74, 17, 43], "fixing_code_start_loc": [75, 18, 14], "fixing_code_end_loc": [82, 27, 54], "type": "CWE-74", "message": "A vulnerability was found in Dropbox merou. It has been classified as critical. Affected is the function add_public_key of the file grouper/public_key.py of the component SSH Public Key Handler. The manipulation of the argument public_key_str leads to injection. It is possible to launch the attack remotely. The name of the patch is d93087973afa26bc0a2d0a5eb5c0fde748bdd107. It is recommended to apply a patch to fix this issue. VDB-216906 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4768", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-27T23:15:10.830", "lastModified": "2023-01-05T20:16:52.710", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Dropbox merou. It has been classified as critical. Affected is the function add_public_key of the file grouper/public_key.py of the component SSH Public Key Handler. The manipulation of the argument public_key_str leads to injection. It is possible to launch the attack remotely. The name of the patch is d93087973afa26bc0a2d0a5eb5c0fde748bdd107. It is recommended to apply a patch to fix this issue. VDB-216906 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dropbox:merou:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-03-28", "matchCriteriaId": "8A84A14E-6A19-456E-9EF5-706C0E25252D"}]}]}], "references": [{"url": "https://github.com/dropbox/merou/commit/d93087973afa26bc0a2d0a5eb5c0fde748bdd107", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/dropbox/merou/pull/673", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.216906", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216906", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dropbox/merou/commit/d93087973afa26bc0a2d0a5eb5c0fde748bdd107"}}