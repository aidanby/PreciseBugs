{"buggy_code": ["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\n\nexport default function A(\n  props: any & {\n    to?: string;\n    href?: string;\n    children: React.ReactNode;\n    noColor?: boolean;\n  },\n) {\n  const colors = props.noColor ? '' : 'hover:text-blue-700 active:text-blue-800 text-blue-500';\n\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        className={colors + ' ' + (props.className || '')}\n        {..._.omit(props, 'children', 'className', 'noColor')}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n\n  return (\n    <a\n      href={props.href || '#'}\n      className={colors + ' ' + (props.className || '')}\n      {..._.omit(props, 'children', 'className', 'noColor')}\n    >\n      {props.children}\n    </a>\n  );\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { ReactNode } from 'react';\n\nimport Emojione from 'components/emojione/emojione';\nimport HighlightedCode from 'components/highlighted-code/highlighted-code';\nimport User from './blocks/user';\nimport Chan from './blocks/chan';\nimport File from 'components/drive/file';\nimport InputWithClipBoard from 'components/input-with-clip-board/input-with-clip-board.jsx';\nimport UserService from 'app/features/users/services/current-user-service';\nimport Button from 'components/buttons/button.jsx';\nimport Input from 'components/inputs/input.jsx';\n\nexport const DynamicComponent = ({\n  type,\n  child,\n  data,\n  eventContainer,\n  textTransform,\n}: {\n  type?: string;\n  child?: ReactNode;\n  data?: any;\n  eventContainer?: any;\n  textTransform?: any;\n}) => {\n  if (type === 'text_block_parent') {\n    return <span style={textTransform || {}}>{child}</span>;\n  }\n  if (type === 'text') {\n    return <span style={textTransform || {}}>{child}</span>;\n  }\n  if (type === 'br') {\n    return (\n      <>\n        <br />\n        <span>{child}</span>\n      </>\n    );\n  }\n  if (type === 'emoji') {\n    return <Emojione type={':' + (data.content || '') + ':'} />;\n  }\n  if (type === 'user') {\n    const split = (data.content || '').split(':');\n    const id = data.id || split[1];\n    const username = split[0];\n    return (\n      <>\n        <User hideUserImage={false} id={id} username={username} />\n        <span> </span>\n      </>\n    );\n  }\n  if (type === 'channel') {\n    const split = (data.content || '').split(':');\n    const id = data.id || split[1];\n    const name = split[0];\n    return (\n      <>\n        <Chan id={id} name={name} />\n        <span> </span>\n      </>\n    );\n  }\n  if (type === 'underline') return <div className=\"underline\">{child}</div>;\n  if (type === 'strikethrough') return <div className=\"strikethrough\">{child}</div>;\n  if (type === 'bold') return <div className=\"bold\">{child}</div>;\n  if (type === 'italic') return <div className=\"italic\">{child}</div>;\n  if (type === 'mquote') return <div className=\"multiline-quote\">{child}</div>;\n  if (type === 'quote') return <div className=\"one-line-quote\">{child}</div>;\n  if (type === 'nop') {\n    return <>{child}</>;\n  }\n\n  if (type === 'mcode') {\n    return <HighlightedCode className=\"multiline-code\" code={(data.content || '').trim()} />;\n  }\n  if (type === 'icode') {\n    return <div className=\"inline-code\">{(data.content || '').trim()}</div>;\n  }\n  if (type === 'url') {\n    if (!data.url && data.url !== undefined) {\n      return <span className=\"link\">{child}</span>;\n    }\n    let url = setUrlProtocol(data.url || data.content);\n    if (data.user_identifier && UserService.getCurrentUser()) {\n      let separator = '?';\n      if (url.indexOf('?') > 0) {\n        separator = '&';\n      }\n      url += separator + 'twake_user=' + UserService.getCurrentUser().id;\n    }\n    return (\n      // eslint-disable-next-line react/jsx-no-target-blank\n      <a target=\"_blank\" rel=\"noreferrer\" href={url}>\n        {child}\n      </a>\n    );\n  }\n  if (type === 'markdown_link') {\n    const linkData = data.content.split('](');\n    const url = linkData[1] || '';\n\n    return (\n      <a href={setUrlProtocol(url)} target=\"_BLANK\" rel=\"noreferrer\">\n        {linkData[0]}\n      </a>\n    );\n  }\n  if (type === 'email') {\n    return (\n      <a target=\"_blank\" rel=\"noreferrer\" href={'mailto:' + (data.content || '')}>\n        {child}\n      </a>\n    );\n  }\n  if (type === 'system') {\n    return <span style={{ color: '#888', fontSize: 13 }}>{child}</span>;\n  }\n\n  if (type === 'file') {\n    return (\n      <div className=\"drive_view grid inline-files\">\n        <File\n          data={{ id: data.content || '' }}\n          notInDrive={true}\n          mini={data.mode === 'mini' ? true : false}\n        />\n      </div>\n    );\n  }\n  if (type === 'iframe') {\n    return (\n      <iframe\n        src={data.src || ''}\n        title={'twacode-iframe-' + data.src}\n        style={{ height: data.height }}\n      />\n    );\n  }\n  if (type === 'image') {\n    return <img src={data.src} alt={data.alt || ''} className={'image twacode'} />;\n  }\n  if (type === 'icon') {\n    return <Emojione type={data.src} />;\n  }\n  if (type === 'progress_bar') {\n    return (\n      <div className=\"progress_bar\">\n        <div style={{ width: (data.progress || 0) + '%' }} />\n      </div>\n    );\n  }\n  if (type === 'attachment') {\n    return <div className=\"attachment\">{child}</div>;\n  }\n  if (type === 'button') {\n    if (data.inline) {\n      return (\n        <div\n          className={\n            'interactive_element underline interactive_message_btn ' +\n            (data.style === 'danger' ? 'danger ' : '') +\n            (data.style === 'primary' ? 'primary ' : '')\n          }\n          onClick={evt => {\n            if (data.action_id) {\n              eventContainer.onAction(\n                'interactive_action',\n                data.action_id,\n                data.interactive_context || {},\n                '',\n                evt,\n              );\n            }\n          }}\n        >\n          {child}\n        </div>\n      );\n    }\n    return (\n      <Button\n        type=\"button\"\n        className={\n          'button interactive_element interactive_message_btn small ' +\n          (data.style === 'danger' ? 'danger ' : '') +\n          (data.style === 'default' ? 'default ' : '')\n        }\n        onClick={(evt: any) => {\n          if (data.action_id) {\n            eventContainer.onAction(\n              'interactive_action',\n              data.action_id,\n              data.interactive_context || {},\n              '',\n              evt,\n            );\n          }\n        }}\n      >\n        {child}\n      </Button>\n    );\n  }\n  if (type === 'copiable') {\n    return <InputWithClipBoard value={data.content || ''} disabled={false} />;\n  }\n  if (type === 'input') {\n    return (\n      <Input\n        type=\"text\"\n        className={\n          'interactive_element interactive_message_input medium ' +\n          (data.full_width ? 'full_width ' : '')\n        }\n        defaultValue={data.content || ''}\n        placeholder={data.placeholder || 'Write something...'}\n        onChange={(evt: any) => {\n          eventContainer.onAction(\n            'interactive_change',\n            data.passive_id,\n            data.interactive_context || {},\n            evt.target.value,\n            evt,\n          );\n        }}\n      />\n    );\n  }\n  if (type === 'select') {\n    return (\n      <select\n        className={\n          'select interactive_element interactive_message_input medium ' +\n          (data.full_width ? 'full_width ' : '')\n        }\n        onChange={evt => {\n          const value = evt.target.value;\n          eventContainer.onAction(\n            'interactive_change',\n            data.passive_id || data.action_id,\n            data.interactive_context || {},\n            value,\n            evt,\n          );\n          if (data.action_id) {\n            eventContainer.onAction(\n              'interactive_action',\n              data.action_id,\n              data.interactive_context || {},\n              value,\n              evt.target.value,\n            );\n          }\n        }}\n      >\n        <option disabled selected={data.values.filter((e: any) => e.selected).length === 0}>\n          {data.title}\n        </option>\n        {data.values.map((item: any) => {\n          return (\n            <option key={item.value} value={item.value} selected={item.selected}>\n              {item.name}\n            </option>\n          );\n        })}\n      </select>\n    );\n  }\n\n  return <></>;\n};\n\nclass PseudoMarkdownDictionary {\n  render_block: { [key: string]: any } = {\n    text_block_parent: {\n      object: (child: any, _object: any, _eventContainer: any, textTransform: any) => (\n        <DynamicComponent type=\"text_block_parent\" child={child} textTransform={textTransform} />\n      ),\n    },\n    text: {\n      object: (child: any, _object: any, _eventContainer: any, textTransform: any) => (\n        <DynamicComponent type=\"text\" child={child} textTransform={textTransform} />\n      ),\n    },\n    br: {\n      object: (child: any) => <DynamicComponent type=\"br\" child={child} />,\n    },\n    emoji: {\n      object: (_child: any, data: any) => <DynamicComponent type=\"emoji\" data={data} />,\n    },\n    user: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"user\" data={object} />,\n    },\n    channel: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"channel\" data={object} />,\n    },\n    underline: { object: (child: any) => <DynamicComponent type=\"underline\" child={child} /> },\n    strikethrough: {\n      object: (child: any) => <DynamicComponent type=\"strikethrough\" child={child} />,\n    },\n    bold: { object: (child: any) => <DynamicComponent type=\"bold\" child={child} /> },\n    italic: { object: (child: any) => <DynamicComponent type=\"italic\" child={child} /> },\n    mquote: { object: (child: any) => <DynamicComponent type=\"mquote\" child={child} /> },\n    quote: { object: (child: any) => <DynamicComponent type=\"quote\" child={child} /> },\n    nop: { object: (child: any) => <DynamicComponent type=\"nop\" child={child} /> },\n    mcode: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"mcode\" data={object} />,\n    },\n    icode: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"icode\" data={object} />,\n    },\n    url: {\n      object: (child: any, object: any) => (\n        <DynamicComponent type=\"url\" child={child} data={object} />\n      ),\n    },\n    markdown_link: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"markdown_link\" data={object} />,\n    },\n    email: {\n      object: (child: any, object: any) => (\n        <DynamicComponent type=\"email\" child={child} data={object} />\n      ),\n    },\n    system: {\n      object: (child: any) => <DynamicComponent type=\"system\" child={child} />,\n    },\n    file: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"file\" data={object} />,\n    },\n    iframe: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"iframe\" data={object} />,\n    },\n    image: {\n      object: (_child: any, object: any) => (\n        <DynamicComponent type=\"image\" data={object} />\n      ),\n    },\n    icon: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"icon\" data={object} />,\n    },\n    progress_bar: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"progress_bar\" data={object} />,\n    },\n    attachment: { object: (child: any) => <DynamicComponent type=\"attachment\" child={child} /> },\n    button: {\n      object: (child: any, object: any, eventContainer: any) => (\n        <DynamicComponent\n          type=\"attachment\"\n          child={child}\n          data={object}\n          eventContainer={eventContainer}\n        />\n      ),\n    },\n    copiable: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"copiable\" data={object} />,\n    },\n    input: {\n      object: (_child: any, object: any, eventContainer: any) => (\n        <DynamicComponent type=\"input\" data={object} eventContainer={eventContainer} />\n      ),\n    },\n    select: {\n      object: (_child: any, object: any, eventContainer: any) => (\n        <DynamicComponent type=\"select\" data={object} eventContainer={eventContainer} />\n      ),\n    },\n  };\n}\n\nfunction setUrlProtocol(url: string) {\n  let protocol = 'https';\n\n  if ((url || '').indexOf('http://') >= 0) {\n    protocol = 'http';\n  }\n  return protocol + '://' + (url || '').replace(/^(https?:\\/\\/)/, '');\n}\n\nconst service = new PseudoMarkdownDictionary();\nexport default service;\n", "import Twacode from 'app/components/twacode/twacode';\nimport React, { ReactNode, Suspense } from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport HighlightedCode from 'app/components/highlighted-code/highlighted-code';\nimport { preparse, preunparse } from './Blocks.utils';\nimport User from 'components/twacode/blocks/user';\nimport Chan from 'components/twacode/blocks/chan';\nimport { blocksToTwacode, formatData } from 'app/components/twacode/blocksCompiler';\nimport environment from 'app/environment/environment';\nimport { Block } from 'app/components/twacode/types';\n\ntype Props = {\n  blocks: unknown[];\n  fallback: string | ReactNode;\n  onAction: (type: string, id: string, context: unknown, passives: unknown, evt: unknown) => void;\n  allowAdvancedBlocks?: boolean;\n};\n\nconst Code = ({ className, children }: { className: string; children: string }) => {\n  children = preunparse(children);\n  if (children.split('\\n').length === 1) {\n    return <code>{children}</code>;\n  }\n  return <HighlightedCode className={className + ' multiline-code'} code={children} />;\n};\n\nconst Link = ({ href, children }: { href: string; children: string }) => {\n  let target = '_blank';\n  if (!href) {\n    return <a href=\"#\">{children}</a>;\n  }\n  //If same domain, stay on the same tab\n  if (\n    href\n      ?.replace(/https?:\\/\\//g, '')\n      ?.split('/')[0]\n      ?.toLocaleLowerCase() ===\n    environment.front_root_url\n      .replace(/https?:\\/\\//g, '')\n      .split('/')[0]\n      ?.toLocaleLowerCase()\n  ) {\n    target = '_self';\n  }\n\n  return (\n    <a target={target} rel=\"noreferrer\" href={href}>\n      {children}\n    </a>\n  );\n};\n\nexport default React.memo((props: Props) => {\n  const flattedBlocks: Block[] = [];\n  formatData(props.blocks || [], 'content', flattedBlocks);\n  const blocks = blocksToTwacode(flattedBlocks);\n\n  if (!props.blocks?.length || !props.allowAdvancedBlocks) {\n    return typeof props.fallback === 'string' ? (\n      <div className=\"markdown\">\n        <Markdown\n          options={{\n            forceBlock: true,\n            overrides: {\n              code: {\n                component: Code,\n              },\n              a: {\n                component: Link,\n              },\n              user: {\n                component: ({ id }) => (\n                  <>\n                    <User hideUserImage={false} username={id} />{' '}\n                  </>\n                ),\n              },\n              channel: {\n                component: ({ id }) => (\n                  <>\n                    <Chan id={id} name={id} />{' '}\n                  </>\n                ),\n              },\n              h1: ({ children }) => children,\n              h2: ({ children }) => children,\n              h3: ({ children }) => children,\n              h4: ({ children }) => children,\n              h5: ({ children }) => children,\n              h6: ({ children }) => children,\n            },\n          }}\n        >\n          {preparse(props.fallback || '')}\n        </Markdown>\n      </div>\n    ) : (\n      <>{props.fallback}</>\n    );\n  }\n\n  return (\n    <Suspense fallback={<></>}>\n      <Twacode\n        content={blocks}\n        isApp={props.allowAdvancedBlocks}\n        onAction={(type: string, id: string, context: unknown, passives: unknown, evt: unknown) =>\n          props.onAction(type, id, context, passives, evt)\n        }\n      />\n    </Suspense>\n  );\n});\n", "import React, { useContext } from 'react';\nimport { MessageLinkType } from 'app/features/messages/types/message';\nimport './LinkPreview.scss';\nimport { useMessage } from 'app/features/messages/hooks/use-message';\nimport User from 'app/features/users/services/current-user-service';\nimport { MessageContext } from '../message-with-replies';\nimport { X } from 'react-feather';\n\ntype PropsType = {\n  preview: MessageLinkType;\n};\n\nexport default ({ preview }: PropsType): React.ReactElement => {\n  const context = useContext(MessageContext);\n  const { deleteLinkPreview, message } = useMessage(context);\n\n  return (\n    <div className=\"xs:max-w-xs max-w-md ant-card ant-card-bordered ant-card-small ant-card-type-inner link-preview\">\n      {message.user_id === User.getCurrentUserId() ? (\n        <div className=\"delete-link-preview\">\n          <X size={16} onClick={() => deleteLinkPreview(preview.url)} />\n        </div>\n      ) : null}\n      <div className=\"ant-card-body\">\n        <div className=\"ant-card-meta\">\n          <div className=\"ant-card-meta-detail\">\n            <div className=\"ant-card-meta-avatar\">\n              {preview.favicon && (\n                <span className=\"ant-avatar ant-avatar-circle ant-avatar-image\">\n                  <img alt={preview.domain} src={preview.favicon} />\n                </span>\n              )}\n              <span className=\"link-preview-domain\">{preview.domain}</span>\n            </div>\n            <div className=\"preview-title\">\n              <a\n                href={preview.url}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                className=\"truncate text-ellipsis\tw-full\"\n              >\n                {preview.title}\n              </a>\n            </div>\n            <div className=\"ant-card-meta-description\">{preview.description}</div>\n          </div>\n        </div>\n        {preview.img && (\n          <div className=\"ant-card-cover\">\n            <img\n              alt={preview.title}\n              src={preview.img}\n              onClick={() => window.open(preview.url, '_blank')}\n              style={{\n                maxWidth: preview.img_width ?? '100%',\n                maxHeight: preview.img_height ?? '100%',\n              }}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n", "import React, { ReactNode, useContext, useState } from 'react';\n\nimport 'moment-timezone';\nimport Moment from 'react-moment';\nimport { Typography } from 'antd';\nimport classNames from 'classnames';\nimport { AlertTriangle } from 'react-feather';\nimport { useRecoilState } from 'recoil';\n\nimport User from 'app/features/users/services/current-user-service';\nimport MenusManager from 'app/components/menus/menus-manager.jsx';\nimport UserCard from 'app/components/user-card/user-card';\nimport Emojione from 'components/emojione/emojione';\nimport RouterServices from 'app/features/router/services/router-service';\nimport { NodeMessage } from 'app/features/messages/types/message';\nimport Languages from 'app/features/global/services/languages-service';\nimport Loader from 'components/loader/loader.jsx';\nimport { useMessage } from 'app/features/messages/hooks/use-message';\nimport { MessageContext } from '../message-with-replies';\nimport useRouterWorkspace from 'app/features/router/hooks/use-router-workspace';\nimport useRouterChannel from 'app/features/router/hooks/use-router-channel';\nimport { useUser } from 'app/features/users/hooks/use-user';\nimport { UserType } from 'app/features/users/types/user';\nimport { CompanyApplicationsStateFamily } from 'app/features/applications/state/company-applications';\nimport { useDirectChannels } from 'app/features/channels/hooks/use-direct-channels';\nimport { addUrlTryDesktop } from 'app/views/desktop-redirect';\n\ntype Props = {\n  linkToThread?: boolean;\n};\n\nconst { Link } = Typography;\n\nexport default (props: Props) => {\n  const channelId = useRouterChannel();\n  const workspaceId = useRouterWorkspace();\n  const [messageLink, setMessageLink] = useState('');\n  const { openDiscussion } = useDirectChannels();\n\n  const context = useContext(MessageContext);\n  const { message } = useMessage(context);\n  const parentMessage: NodeMessage | null = useMessage({\n    ...context,\n    id: message.thread_id,\n  }).message;\n\n  const user = useUser(message.user_id);\n\n  const companyApplications =\n    useRecoilState(CompanyApplicationsStateFamily(context.companyId))[0] || [];\n  const application = companyApplications.find(a => a.id === message.application_id);\n\n  const scrollToMessage = () => {\n    if (message.thread_id !== message.id) {\n      //TODO messageService.scrollTo({ id: message.thread_id });\n    }\n  };\n\n  const updateMessageLink = () => {\n    const url = RouterServices.generateRouteFromState({\n      workspaceId: workspaceId,\n      channelId: channelId,\n      messageId: message.thread_id || message.id,\n    });\n    setMessageLink(url);\n  };\n\n  let userNameRef: ReactNode = null;\n  const displayUserCard = () => {\n    if (user) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const box = (window as any).getBoundingClientRect(userNameRef);\n      MenusManager.openMenu(\n        [\n          {\n            type: 'react-element',\n            reactElement: () => (\n              <UserCard\n                user={user as UserType}\n                onClick={() => openDiscussion([(user as UserType).id || ''])}\n              />\n            ),\n          },\n        ],\n        box,\n        null,\n        { margin: 8 },\n      );\n    }\n  };\n\n  const icon = user?.status ? user.status.split(' ')[0] : undefined;\n  const status = user?.status ? user.status.split(' ').splice(1).join(' ') : undefined;\n  return (\n    <div\n      className={classNames('message-content-header-container', {\n        'message-not-sent': message._status === 'failed',\n      })}\n    >\n      <div className={'message-content-header '}>\n        <span\n          className=\"sender-name\"\n          ref={node => (userNameRef = node as ReactNode)}\n          onClick={() => displayUserCard()}\n        >\n          {message.override?.title ||\n            (!!user && User.getFullName(user)) ||\n            (message.application_id && application?.identity?.name)}\n        </span>\n        {!!user && (\n          <div className=\"sender-status\">\n            {!!icon && <Emojione size={12} type={icon} />} {!!status && status}\n          </div>\n        )}\n        {props.linkToThread && (\n          <span className=\"reply-text\">\n            {Languages.t('scenes.apps.messages.input.replied_to')}\n            <Link onClick={() => scrollToMessage()}>{parentMessage?.text}</Link>\n          </span>\n        )}\n        {message.created_at && (\n          <a\n            className=\"date\"\n            // eslint-disable-next-line react/jsx-no-target-blank\n            target=\"_BLANK\"\n            href={messageLink ? addUrlTryDesktop(messageLink) : '#'}\n            onMouseEnter={() => updateMessageLink()}\n            rel=\"noreferrer\"\n          >\n            <Moment\n              format={\n                new Date().getTime() - message.created_at > 12 * 60 * 60 * 1000 ? 'lll' : 'LT'\n              }\n            >\n              {message.created_at}\n            </Moment>\n\n            {message.edited?.edited_at && (\n              <span style={{ textTransform: 'lowercase' }}>\n                {' '}\n                - {Languages.t('scenes.apps.messages.input.edited', [], 'Edited')}\n              </span>\n            )}\n          </a>\n        )}\n      </div>\n      {message._status === 'sending' && (\n        <div className=\"loading\">\n          <Loader color=\"#999\" className=\"message_header_loader\" />\n        </div>\n      )}\n      {message._status === 'failed' && (\n        <div className=\"alert_failed_icon\">\n          <AlertTriangle size={16} />\n        </div>\n      )}\n    </div>\n  );\n};\n", "/* eslint-disable react/prop-types */\nimport React from 'react';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport Popover from '@material-ui/core/Popover';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport default function Apps(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <div>\n      <IconButton aria-describedby={id} variant=\"contained\" color=\"primary\" onClick={handleClick}>\n        <AppsIcon />\n      </IconButton>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <div className=\"integration-apps\">\n          {props.apps.map(item => (\n            <a className=\"app\" target=\"_BLANK\" rel=\"noreferrer\" href={item.url} key={item.url}>\n              <div className=\"image\" style={{ backgroundImage: 'url(' + item.icon + ')' }} />\n              <div className=\"app-title\">{item.name}</div>\n            </a>\n          ))}\n        </div>\n      </Popover>\n    </div>\n  );\n}\n"], "fixing_code": ["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\n\nexport default function A(\n  props: any & {\n    to?: string;\n    href?: string;\n    children: React.ReactNode;\n    noColor?: boolean;\n  },\n) {\n  const colors = props.noColor ? '' : 'hover:text-blue-700 active:text-blue-800 text-blue-500';\n\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        className={colors + ' ' + (props.className || '')}\n        {..._.omit(props, 'children', 'className', 'noColor')}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n\n  return (\n    <a\n      href={(props.href || '#').replace(/^javascript:/, '')}\n      className={colors + ' ' + (props.className || '')}\n      {..._.omit(props, 'children', 'className', 'noColor')}\n    >\n      {props.children}\n    </a>\n  );\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { ReactNode } from 'react';\n\nimport Emojione from 'components/emojione/emojione';\nimport HighlightedCode from 'components/highlighted-code/highlighted-code';\nimport User from './blocks/user';\nimport Chan from './blocks/chan';\nimport File from 'components/drive/file';\nimport InputWithClipBoard from 'components/input-with-clip-board/input-with-clip-board.jsx';\nimport UserService from 'app/features/users/services/current-user-service';\nimport Button from 'components/buttons/button.jsx';\nimport Input from 'components/inputs/input.jsx';\n\nexport const DynamicComponent = ({\n  type,\n  child,\n  data,\n  eventContainer,\n  textTransform,\n}: {\n  type?: string;\n  child?: ReactNode;\n  data?: any;\n  eventContainer?: any;\n  textTransform?: any;\n}) => {\n  if (type === 'text_block_parent') {\n    return <span style={textTransform || {}}>{child}</span>;\n  }\n  if (type === 'text') {\n    return <span style={textTransform || {}}>{child}</span>;\n  }\n  if (type === 'br') {\n    return (\n      <>\n        <br />\n        <span>{child}</span>\n      </>\n    );\n  }\n  if (type === 'emoji') {\n    return <Emojione type={':' + (data.content || '') + ':'} />;\n  }\n  if (type === 'user') {\n    const split = (data.content || '').split(':');\n    const id = data.id || split[1];\n    const username = split[0];\n    return (\n      <>\n        <User hideUserImage={false} id={id} username={username} />\n        <span> </span>\n      </>\n    );\n  }\n  if (type === 'channel') {\n    const split = (data.content || '').split(':');\n    const id = data.id || split[1];\n    const name = split[0];\n    return (\n      <>\n        <Chan id={id} name={name} />\n        <span> </span>\n      </>\n    );\n  }\n  if (type === 'underline') return <div className=\"underline\">{child}</div>;\n  if (type === 'strikethrough') return <div className=\"strikethrough\">{child}</div>;\n  if (type === 'bold') return <div className=\"bold\">{child}</div>;\n  if (type === 'italic') return <div className=\"italic\">{child}</div>;\n  if (type === 'mquote') return <div className=\"multiline-quote\">{child}</div>;\n  if (type === 'quote') return <div className=\"one-line-quote\">{child}</div>;\n  if (type === 'nop') {\n    return <>{child}</>;\n  }\n\n  if (type === 'mcode') {\n    return <HighlightedCode className=\"multiline-code\" code={(data.content || '').trim()} />;\n  }\n  if (type === 'icode') {\n    return <div className=\"inline-code\">{(data.content || '').trim()}</div>;\n  }\n  if (type === 'url') {\n    if (!data.url && data.url !== undefined) {\n      return <span className=\"link\">{child}</span>;\n    }\n    let url = setUrlProtocol(data.url || data.content);\n    if (data.user_identifier && UserService.getCurrentUser()) {\n      let separator = '?';\n      if (url.indexOf('?') > 0) {\n        separator = '&';\n      }\n      url += separator + 'twake_user=' + UserService.getCurrentUser().id;\n    }\n    return (\n      // eslint-disable-next-line react/jsx-no-target-blank\n      <a target=\"_blank\" rel=\"noreferrer\" href={url?.replace(/^javascript:/, '')}>\n        {child}\n      </a>\n    );\n  }\n  if (type === 'markdown_link') {\n    const linkData = data.content.split('](');\n    const url = linkData[1] || '';\n\n    return (\n      <a href={setUrlProtocol(url)} target=\"_BLANK\" rel=\"noreferrer\">\n        {linkData[0]}\n      </a>\n    );\n  }\n  if (type === 'email') {\n    return (\n      <a target=\"_blank\" rel=\"noreferrer\" href={'mailto:' + (data.content || '')}>\n        {child}\n      </a>\n    );\n  }\n  if (type === 'system') {\n    return <span style={{ color: '#888', fontSize: 13 }}>{child}</span>;\n  }\n\n  if (type === 'file') {\n    return (\n      <div className=\"drive_view grid inline-files\">\n        <File\n          data={{ id: data.content || '' }}\n          notInDrive={true}\n          mini={data.mode === 'mini' ? true : false}\n        />\n      </div>\n    );\n  }\n  if (type === 'iframe') {\n    return (\n      <iframe\n        src={data.src || ''}\n        title={'twacode-iframe-' + data.src}\n        style={{ height: data.height }}\n      />\n    );\n  }\n  if (type === 'image') {\n    return <img src={data.src} alt={data.alt || ''} className={'image twacode'} />;\n  }\n  if (type === 'icon') {\n    return <Emojione type={data.src} />;\n  }\n  if (type === 'progress_bar') {\n    return (\n      <div className=\"progress_bar\">\n        <div style={{ width: (data.progress || 0) + '%' }} />\n      </div>\n    );\n  }\n  if (type === 'attachment') {\n    return <div className=\"attachment\">{child}</div>;\n  }\n  if (type === 'button') {\n    if (data.inline) {\n      return (\n        <div\n          className={\n            'interactive_element underline interactive_message_btn ' +\n            (data.style === 'danger' ? 'danger ' : '') +\n            (data.style === 'primary' ? 'primary ' : '')\n          }\n          onClick={evt => {\n            if (data.action_id) {\n              eventContainer.onAction(\n                'interactive_action',\n                data.action_id,\n                data.interactive_context || {},\n                '',\n                evt,\n              );\n            }\n          }}\n        >\n          {child}\n        </div>\n      );\n    }\n    return (\n      <Button\n        type=\"button\"\n        className={\n          'button interactive_element interactive_message_btn small ' +\n          (data.style === 'danger' ? 'danger ' : '') +\n          (data.style === 'default' ? 'default ' : '')\n        }\n        onClick={(evt: any) => {\n          if (data.action_id) {\n            eventContainer.onAction(\n              'interactive_action',\n              data.action_id,\n              data.interactive_context || {},\n              '',\n              evt,\n            );\n          }\n        }}\n      >\n        {child}\n      </Button>\n    );\n  }\n  if (type === 'copiable') {\n    return <InputWithClipBoard value={data.content || ''} disabled={false} />;\n  }\n  if (type === 'input') {\n    return (\n      <Input\n        type=\"text\"\n        className={\n          'interactive_element interactive_message_input medium ' +\n          (data.full_width ? 'full_width ' : '')\n        }\n        defaultValue={data.content || ''}\n        placeholder={data.placeholder || 'Write something...'}\n        onChange={(evt: any) => {\n          eventContainer.onAction(\n            'interactive_change',\n            data.passive_id,\n            data.interactive_context || {},\n            evt.target.value,\n            evt,\n          );\n        }}\n      />\n    );\n  }\n  if (type === 'select') {\n    return (\n      <select\n        className={\n          'select interactive_element interactive_message_input medium ' +\n          (data.full_width ? 'full_width ' : '')\n        }\n        onChange={evt => {\n          const value = evt.target.value;\n          eventContainer.onAction(\n            'interactive_change',\n            data.passive_id || data.action_id,\n            data.interactive_context || {},\n            value,\n            evt,\n          );\n          if (data.action_id) {\n            eventContainer.onAction(\n              'interactive_action',\n              data.action_id,\n              data.interactive_context || {},\n              value,\n              evt.target.value,\n            );\n          }\n        }}\n      >\n        <option disabled selected={data.values.filter((e: any) => e.selected).length === 0}>\n          {data.title}\n        </option>\n        {data.values.map((item: any) => {\n          return (\n            <option key={item.value} value={item.value} selected={item.selected}>\n              {item.name}\n            </option>\n          );\n        })}\n      </select>\n    );\n  }\n\n  return <></>;\n};\n\nclass PseudoMarkdownDictionary {\n  render_block: { [key: string]: any } = {\n    text_block_parent: {\n      object: (child: any, _object: any, _eventContainer: any, textTransform: any) => (\n        <DynamicComponent type=\"text_block_parent\" child={child} textTransform={textTransform} />\n      ),\n    },\n    text: {\n      object: (child: any, _object: any, _eventContainer: any, textTransform: any) => (\n        <DynamicComponent type=\"text\" child={child} textTransform={textTransform} />\n      ),\n    },\n    br: {\n      object: (child: any) => <DynamicComponent type=\"br\" child={child} />,\n    },\n    emoji: {\n      object: (_child: any, data: any) => <DynamicComponent type=\"emoji\" data={data} />,\n    },\n    user: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"user\" data={object} />,\n    },\n    channel: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"channel\" data={object} />,\n    },\n    underline: { object: (child: any) => <DynamicComponent type=\"underline\" child={child} /> },\n    strikethrough: {\n      object: (child: any) => <DynamicComponent type=\"strikethrough\" child={child} />,\n    },\n    bold: { object: (child: any) => <DynamicComponent type=\"bold\" child={child} /> },\n    italic: { object: (child: any) => <DynamicComponent type=\"italic\" child={child} /> },\n    mquote: { object: (child: any) => <DynamicComponent type=\"mquote\" child={child} /> },\n    quote: { object: (child: any) => <DynamicComponent type=\"quote\" child={child} /> },\n    nop: { object: (child: any) => <DynamicComponent type=\"nop\" child={child} /> },\n    mcode: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"mcode\" data={object} />,\n    },\n    icode: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"icode\" data={object} />,\n    },\n    url: {\n      object: (child: any, object: any) => (\n        <DynamicComponent type=\"url\" child={child} data={object} />\n      ),\n    },\n    markdown_link: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"markdown_link\" data={object} />,\n    },\n    email: {\n      object: (child: any, object: any) => (\n        <DynamicComponent type=\"email\" child={child} data={object} />\n      ),\n    },\n    system: {\n      object: (child: any) => <DynamicComponent type=\"system\" child={child} />,\n    },\n    file: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"file\" data={object} />,\n    },\n    iframe: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"iframe\" data={object} />,\n    },\n    image: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"image\" data={object} />,\n    },\n    icon: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"icon\" data={object} />,\n    },\n    progress_bar: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"progress_bar\" data={object} />,\n    },\n    attachment: { object: (child: any) => <DynamicComponent type=\"attachment\" child={child} /> },\n    button: {\n      object: (child: any, object: any, eventContainer: any) => (\n        <DynamicComponent\n          type=\"attachment\"\n          child={child}\n          data={object}\n          eventContainer={eventContainer}\n        />\n      ),\n    },\n    copiable: {\n      object: (_child: any, object: any) => <DynamicComponent type=\"copiable\" data={object} />,\n    },\n    input: {\n      object: (_child: any, object: any, eventContainer: any) => (\n        <DynamicComponent type=\"input\" data={object} eventContainer={eventContainer} />\n      ),\n    },\n    select: {\n      object: (_child: any, object: any, eventContainer: any) => (\n        <DynamicComponent type=\"select\" data={object} eventContainer={eventContainer} />\n      ),\n    },\n  };\n}\n\nfunction setUrlProtocol(url: string) {\n  let protocol = 'https';\n\n  if ((url || '').indexOf('http://') >= 0) {\n    protocol = 'http';\n  }\n  return protocol + '://' + (url || '').replace(/^(https?:\\/\\/)/, '');\n}\n\nconst service = new PseudoMarkdownDictionary();\nexport default service;\n", "import Twacode from 'app/components/twacode/twacode';\nimport React, { ReactNode, Suspense } from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport HighlightedCode from 'app/components/highlighted-code/highlighted-code';\nimport { preparse, preunparse } from './Blocks.utils';\nimport User from 'components/twacode/blocks/user';\nimport Chan from 'components/twacode/blocks/chan';\nimport { blocksToTwacode, formatData } from 'app/components/twacode/blocksCompiler';\nimport environment from 'app/environment/environment';\nimport { Block } from 'app/components/twacode/types';\n\ntype Props = {\n  blocks: unknown[];\n  fallback: string | ReactNode;\n  onAction: (type: string, id: string, context: unknown, passives: unknown, evt: unknown) => void;\n  allowAdvancedBlocks?: boolean;\n};\n\nconst Code = ({ className, children }: { className: string; children: string }) => {\n  children = preunparse(children);\n  if (children.split('\\n').length === 1) {\n    return <code>{children}</code>;\n  }\n  return <HighlightedCode className={className + ' multiline-code'} code={children} />;\n};\n\nconst Link = ({ href, children }: { href: string; children: string }) => {\n  let target = '_blank';\n  if (!href) {\n    return <a href=\"#\">{children}</a>;\n  }\n  //If same domain, stay on the same tab\n  if (\n    href\n      ?.replace(/https?:\\/\\//g, '')\n      ?.split('/')[0]\n      ?.toLocaleLowerCase() ===\n    environment.front_root_url\n      .replace(/https?:\\/\\//g, '')\n      .split('/')[0]\n      ?.toLocaleLowerCase()\n  ) {\n    target = '_self';\n  }\n\n  return (\n    <a target={target} rel=\"noreferrer\" href={href?.replace(/^javascript:/, '')}>\n      {children}\n    </a>\n  );\n};\n\nexport default React.memo((props: Props) => {\n  const flattedBlocks: Block[] = [];\n  formatData(props.blocks || [], 'content', flattedBlocks);\n  const blocks = blocksToTwacode(flattedBlocks);\n\n  if (!props.blocks?.length || !props.allowAdvancedBlocks) {\n    return typeof props.fallback === 'string' ? (\n      <div className=\"markdown\">\n        <Markdown\n          options={{\n            forceBlock: true,\n            overrides: {\n              code: {\n                component: Code,\n              },\n              a: {\n                component: Link,\n              },\n              user: {\n                component: ({ id }) => (\n                  <>\n                    <User hideUserImage={false} username={id} />{' '}\n                  </>\n                ),\n              },\n              channel: {\n                component: ({ id }) => (\n                  <>\n                    <Chan id={id} name={id} />{' '}\n                  </>\n                ),\n              },\n              h1: ({ children }) => children,\n              h2: ({ children }) => children,\n              h3: ({ children }) => children,\n              h4: ({ children }) => children,\n              h5: ({ children }) => children,\n              h6: ({ children }) => children,\n            },\n          }}\n        >\n          {preparse(props.fallback || '')}\n        </Markdown>\n      </div>\n    ) : (\n      <>{props.fallback}</>\n    );\n  }\n\n  return (\n    <Suspense fallback={<></>}>\n      <Twacode\n        content={blocks}\n        isApp={props.allowAdvancedBlocks}\n        onAction={(type: string, id: string, context: unknown, passives: unknown, evt: unknown) =>\n          props.onAction(type, id, context, passives, evt)\n        }\n      />\n    </Suspense>\n  );\n});\n", "import React, { useContext } from 'react';\nimport { MessageLinkType } from 'app/features/messages/types/message';\nimport './LinkPreview.scss';\nimport { useMessage } from 'app/features/messages/hooks/use-message';\nimport User from 'app/features/users/services/current-user-service';\nimport { MessageContext } from '../message-with-replies';\nimport { X } from 'react-feather';\n\ntype PropsType = {\n  preview: MessageLinkType;\n};\n\nexport default ({ preview }: PropsType): React.ReactElement => {\n  const context = useContext(MessageContext);\n  const { deleteLinkPreview, message } = useMessage(context);\n\n  return (\n    <div className=\"xs:max-w-xs max-w-md ant-card ant-card-bordered ant-card-small ant-card-type-inner link-preview\">\n      {message.user_id === User.getCurrentUserId() ? (\n        <div className=\"delete-link-preview\">\n          <X size={16} onClick={() => deleteLinkPreview(preview.url)} />\n        </div>\n      ) : null}\n      <div className=\"ant-card-body\">\n        <div className=\"ant-card-meta\">\n          <div className=\"ant-card-meta-detail\">\n            <div className=\"ant-card-meta-avatar\">\n              {preview.favicon && (\n                <span className=\"ant-avatar ant-avatar-circle ant-avatar-image\">\n                  <img alt={preview.domain} src={preview.favicon} />\n                </span>\n              )}\n              <span className=\"link-preview-domain\">{preview.domain}</span>\n            </div>\n            <div className=\"preview-title\">\n              <a\n                href={preview.url?.replace(/^javascript:/, '')}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                className=\"truncate text-ellipsis\tw-full\"\n              >\n                {preview.title}\n              </a>\n            </div>\n            <div className=\"ant-card-meta-description\">{preview.description}</div>\n          </div>\n        </div>\n        {preview.img && (\n          <div className=\"ant-card-cover\">\n            <img\n              alt={preview.title}\n              src={preview.img}\n              onClick={() => window.open(preview.url, '_blank')}\n              style={{\n                maxWidth: preview.img_width ?? '100%',\n                maxHeight: preview.img_height ?? '100%',\n              }}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n", "import React, { ReactNode, useContext, useState } from 'react';\n\nimport 'moment-timezone';\nimport Moment from 'react-moment';\nimport { Typography } from 'antd';\nimport classNames from 'classnames';\nimport { AlertTriangle } from 'react-feather';\nimport { useRecoilState } from 'recoil';\n\nimport User from 'app/features/users/services/current-user-service';\nimport MenusManager from 'app/components/menus/menus-manager.jsx';\nimport UserCard from 'app/components/user-card/user-card';\nimport Emojione from 'components/emojione/emojione';\nimport RouterServices from 'app/features/router/services/router-service';\nimport { NodeMessage } from 'app/features/messages/types/message';\nimport Languages from 'app/features/global/services/languages-service';\nimport Loader from 'components/loader/loader.jsx';\nimport { useMessage } from 'app/features/messages/hooks/use-message';\nimport { MessageContext } from '../message-with-replies';\nimport useRouterWorkspace from 'app/features/router/hooks/use-router-workspace';\nimport useRouterChannel from 'app/features/router/hooks/use-router-channel';\nimport { useUser } from 'app/features/users/hooks/use-user';\nimport { UserType } from 'app/features/users/types/user';\nimport { CompanyApplicationsStateFamily } from 'app/features/applications/state/company-applications';\nimport { useDirectChannels } from 'app/features/channels/hooks/use-direct-channels';\nimport { addUrlTryDesktop } from 'app/views/desktop-redirect';\n\ntype Props = {\n  linkToThread?: boolean;\n};\n\nconst { Link } = Typography;\n\nexport default (props: Props) => {\n  const channelId = useRouterChannel();\n  const workspaceId = useRouterWorkspace();\n  const [messageLink, setMessageLink] = useState('');\n  const { openDiscussion } = useDirectChannels();\n\n  const context = useContext(MessageContext);\n  const { message } = useMessage(context);\n  const parentMessage: NodeMessage | null = useMessage({\n    ...context,\n    id: message.thread_id,\n  }).message;\n\n  const user = useUser(message.user_id);\n\n  const companyApplications =\n    useRecoilState(CompanyApplicationsStateFamily(context.companyId))[0] || [];\n  const application = companyApplications.find(a => a.id === message.application_id);\n\n  const scrollToMessage = () => {\n    if (message.thread_id !== message.id) {\n      //TODO messageService.scrollTo({ id: message.thread_id });\n    }\n  };\n\n  const updateMessageLink = () => {\n    const url = RouterServices.generateRouteFromState({\n      workspaceId: workspaceId,\n      channelId: channelId,\n      messageId: message.thread_id || message.id,\n    });\n    setMessageLink(url);\n  };\n\n  let userNameRef: ReactNode = null;\n  const displayUserCard = () => {\n    if (user) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const box = (window as any).getBoundingClientRect(userNameRef);\n      MenusManager.openMenu(\n        [\n          {\n            type: 'react-element',\n            reactElement: () => (\n              <UserCard\n                user={user as UserType}\n                onClick={() => openDiscussion([(user as UserType).id || ''])}\n              />\n            ),\n          },\n        ],\n        box,\n        null,\n        { margin: 8 },\n      );\n    }\n  };\n\n  const icon = user?.status ? user.status.split(' ')[0] : undefined;\n  const status = user?.status ? user.status.split(' ').splice(1).join(' ') : undefined;\n  return (\n    <div\n      className={classNames('message-content-header-container', {\n        'message-not-sent': message._status === 'failed',\n      })}\n    >\n      <div className={'message-content-header '}>\n        <span\n          className=\"sender-name\"\n          ref={node => (userNameRef = node as ReactNode)}\n          onClick={() => displayUserCard()}\n        >\n          {message.override?.title ||\n            (!!user && User.getFullName(user)) ||\n            (message.application_id && application?.identity?.name)}\n        </span>\n        {!!user && (\n          <div className=\"sender-status\">\n            {!!icon && <Emojione size={12} type={icon} />} {!!status && status}\n          </div>\n        )}\n        {props.linkToThread && (\n          <span className=\"reply-text\">\n            {Languages.t('scenes.apps.messages.input.replied_to')}\n            <Link onClick={() => scrollToMessage()}>{parentMessage?.text}</Link>\n          </span>\n        )}\n        {message.created_at && (\n          <a\n            className=\"date\"\n            // eslint-disable-next-line react/jsx-no-target-blank\n            target=\"_BLANK\"\n            href={(messageLink ? addUrlTryDesktop(messageLink) : '#')?.replace(/^javascript:/, '')}\n            onMouseEnter={() => updateMessageLink()}\n            rel=\"noreferrer\"\n          >\n            <Moment\n              format={\n                new Date().getTime() - message.created_at > 12 * 60 * 60 * 1000 ? 'lll' : 'LT'\n              }\n            >\n              {message.created_at}\n            </Moment>\n\n            {message.edited?.edited_at && (\n              <span style={{ textTransform: 'lowercase' }}>\n                {' '}\n                - {Languages.t('scenes.apps.messages.input.edited', [], 'Edited')}\n              </span>\n            )}\n          </a>\n        )}\n      </div>\n      {message._status === 'sending' && (\n        <div className=\"loading\">\n          <Loader color=\"#999\" className=\"message_header_loader\" />\n        </div>\n      )}\n      {message._status === 'failed' && (\n        <div className=\"alert_failed_icon\">\n          <AlertTriangle size={16} />\n        </div>\n      )}\n    </div>\n  );\n};\n", "/* eslint-disable react/prop-types */\nimport React from 'react';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport Popover from '@material-ui/core/Popover';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport default function Apps(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <div>\n      <IconButton aria-describedby={id} variant=\"contained\" color=\"primary\" onClick={handleClick}>\n        <AppsIcon />\n      </IconButton>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <div className=\"integration-apps\">\n          {props.apps.map(item => (\n            <a className=\"app\" target=\"_BLANK\" rel=\"noreferrer\" href={item.url?.replace(/^javascript:/, '')} key={item.url}>\n              <div className=\"image\" style={{ backgroundImage: 'url(' + item.icon + ')' }} />\n              <div className=\"app-title\">{item.name}</div>\n            </a>\n          ))}\n        </div>\n      </Popover>\n    </div>\n  );\n}\n"], "filenames": ["twake/frontend/src/app/atoms/link/index.tsx", "twake/frontend/src/app/components/twacode/pseudo-markdown-dictionary.tsx", "twake/frontend/src/app/views/applications/messages/message/parts/Blocks.tsx", "twake/frontend/src/app/views/applications/messages/message/parts/LinkPreview.tsx", "twake/frontend/src/app/views/applications/messages/message/parts/MessageHeader.tsx", "twake/frontend/src/app/views/integration/components/apps.jsx"], "buggy_code_start_loc": [29, 96, 47, 37, 126, 42], "buggy_code_end_loc": [30, 341, 48, 38, 127, 43], "fixing_code_start_loc": [29, 96, 47, 37, 126, 42], "fixing_code_end_loc": [30, 339, 48, 38, 127, 43], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository linagora/twake prior to 2023.Q1.1200+.", "other": {"cve": {"id": "CVE-2023-0028", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-01T01:15:12.627", "lastModified": "2023-01-06T21:36:28.273", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository linagora/twake prior to 2023.Q1.1200+."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:linagora:twake:*:*:*:*:*:*:*:*", "versionEndIncluding": "2022.q4.1120", "matchCriteriaId": "B6CE098A-AAD8-4CDE-AF83-CD9BA8728F50"}]}]}], "references": [{"url": "https://github.com/linagora/twake/commit/61f4c0caf4ce61c839fb304a707972974daacae9", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/bfd935f4-2d1d-4d3f-8b59-522abe7dd065", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/linagora/twake/commit/61f4c0caf4ce61c839fb304a707972974daacae9"}}