{"buggy_code": [".. _sec-api-access:\n\n**************\nAccess control\n**************\n\n.. contents::\n\n.. _sec-api-access-permissions:\n\nPermissions\n===========\n\n.. _sec-api-access-permissions-list:\n\nList all permissions\n--------------------\n\n.. http:get:: /api/access/permissions\n\n   Retrieves all permissions available in the system.\n\n   Will return a :http:statuscode:`200` with a :ref:`permission list <sec-api-access-datamodel-permissions-list>`\n   as body.\n\n   :status 200: No error\n\n.. _sec-api-access-groups:\n\nGroups\n======\n\n.. _sec-api-access-groups-list:\n\nGet group list\n--------------\n\n.. http:get:: /api/access/groups\n\n   Retrieves all groups registered in the system.\n\n   Will return a :http:statuscode:`200` with a :ref:`group list <sec-api-access-datamodel-groups-list>`\n   as body.\n\n   Requires the ``SETTINGS`` permission.\n\n   :status 200: No error\n\n.. _sec-api-access-groups-add:\n\nAdd a new group\n---------------\n\n.. http:post:: /api/access/groups\n\n   Adds a new group to the system.\n\n   Expects a :ref:`group registration request <sec-api-access-datamodel-groups-addgrouprequest>` as request body.\n\n   Will return a :ref:`group list response <sec-api-access-datamodel-groups-list>` on success.\n\n   Requires the ``SETTINGS`` permission.\n\n   :json key:         The group's identifier\n   :json name:        The user's name\n   :json description: A human readable description of the group\n   :json permissions: The permissions to assign to the group\n   :json subgroups:   Subgroups assigned to the group\n   :json default:     Whether the group should be assigned to new users by default or not\n   :status 200:       No error\n   :status 400:       If any of the mandatory fields is missing or the request is otherwise\n                      invalid\n   :status 409:       A group with the provided key does already exist\n\n.. _sec-api-access-groups-retrieve:\n\nRetrieve a group\n----------------\n\n.. http:get:: /api/access/groups/(string:key)\n\n   Retrieves an individual group record.\n\n   Will return a :http:statuscode:`200` with a :ref:`group record <sec-api-access-datamodel-groups-list>`\n   as body.\n\n   Requires the ``SETTINGS`` permission.\n\n   :status 200: No error\n\n.. _sec-api-access-groups-modify:\n\nUpdate a group\n--------------\n\n.. http:put:: /api/access/groups/(string:key)\n\n   Updates an existing group.\n\n   Expects a :ref:`group update request <sec-api-access-datamodel-groups-updategrouprequest>` as request body.\n\n   Will return a :ref:`group list response <sec-api-access-datamodel-groups-list>` on success.\n\n   Requires the ``SETTINGS`` permission.\n\n   :json description: A human readable description of the group\n   :json permissions: The permissions to assign to the group\n   :json subgroups:   Subgroups assigned to the group\n   :json default:     Whether the group should be assigned to new users by default or not\n   :status 200:       No error\n   :status 400:       If any of the mandatory fields is missing or the request is otherwise\n                      invalid\n\n.. _sec-api-access-groups-delete:\n\nDelete a group\n--------------\n\n.. http:delete:: /api/access/groups/(string:key)\n\n   Deletes a group.\n\n   Will return a :ref:`group list response <sec-api-access-datamodel-groups-list>` on success.\n\n   Requires the ``SETTINGS`` permission.\n\n   :status 200:       No error\n\n.. _sec-api-access-users:\n\nUsers\n=====\n\n.. _sec-api-access-users-list:\n\nRetrieve a list of users\n========================\n\n.. http:get:: /api/access/users\n\n   Retrieves a list of all registered users in OctoPrint.\n\n   Will return a :http:statuscode:`200` with a :ref:`user list response <sec-api-access-datamodel-users-userlistresponse>`\n   as body.\n\n   Requires the ``SETTINGS`` permission.\n\n   :status 200: No error\n\n.. _sec-api-access-users-retrieve:\n\nRetrieve a user\n---------------\n\n.. http:get:: /api/access/users/(string:username)\n\n   Retrieves information about a user.\n\n   Will return a :http:statuscode:`200` with a :ref:`user record <sec-api-datamodel-access>`\n   as body.\n\n   Requires either the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user which to retrieve\n   :status 200:     No error\n   :status 404:     Unknown user\n\n.. _sec-api-access-users-add:\n\nAdd a new user\n--------------\n\n.. http:post:: /api/access/users\n\n   Adds a user to OctoPrint.\n\n   Expects a :ref:`user registration request <sec-api-access-datamodel-users-adduserrequest>`\n   as request body.\n\n   Returns a list of registered users on success, see :ref:`Retrieve a list of users <sec-api-access-users-list>`.\n\n   Requires the ``SETTINGS`` permission.\n\n   :json name:     The user's name\n   :json password: The user's password\n   :json active:   Whether to activate the account (true) or not (false)\n   :json admin:    Whether to give the account admin rights (true) or not (false)\n   :status 200:    No error\n   :status 400:    If any of the mandatory fields is missing or the request is otherwise\n                   invalid\n   :status 409:    A user with the provided name does already exist\n\n.. _sec-api-access-users-modify:\n\nUpdate a user\n-------------\n\n.. http:put:: /api/access/users/(string:username)\n\n   Updates a user record.\n\n   Expects a :ref:`user update request <sec-api-access-datamodel-users-updateuserrequest>`\n   as request body.\n\n   Returns a list of registered users on success, see :ref:`Retrieve a list of users <sec-api-access-users-list>`.\n\n   Requires the ``SETTINGS`` permission.\n\n   :param username: Name of the user to update\n   :json admin:     Whether to mark the user as admin (true) or not (false), can be left out (no change)\n   :json active:    Whether to mark the account as activated (true) or deactivated (false), can be left out (no change)\n   :status 200:     No error\n   :status 404:     Unknown user\n\n.. _sec-api-access-users-delete:\n\nDelete a user\n-------------\n\n.. http:delete:: /api/access/users/(string:username)\n\n   Delete a user record.\n\n   Returns a list of registered users on success, see :ref:`Retrieve a list of users <sec-api-access-users-list>`.\n\n   Requires the ``SETTINGS`` permission.\n\n   :param username: Name of the user to delete\n   :status 200:     No error\n   :status 404:     Unknown user\n\n.. _sec-api-access-users-password:\n\nChange a user's password\n------------------------\n\n.. http:put:: /api/access/users/(string:username)/password\n\n   Changes the password of a user.\n\n   Expects a JSON object with a single property ``password`` as request body.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user to change the password for\n   :json password:  The new password to set\n   :status 200:     No error\n   :status 400:     If the request doesn't contain a ``password`` property or the request\n                    is otherwise invalid\n   :status 403:     No admin rights and not logged in as the user\n   :status 404:     The user is unknown\n\n.. _sec-api-access-users-settings-get:\n\nGet a user's settings\n---------------------\n\n.. http:get:: /api/access/users/(string:username)/settings\n\n   Retrieves a user's settings.\n\n   Will return a :http:statuscode:`200` with a JSON object representing the user's\n   personal settings (if any) as body.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user to retrieve the settings for\n   :status 200:     No error\n   :status 403:     No admin rights and not logged in as the user\n   :status 404:     The user is unknown\n\n.. _sec-api-access-users-settings-set:\n\nUpdate a user's settings\n------------------------\n\n.. http:patch:: /api/access/users/(string:username)/settings\n\n   Updates a user's settings.\n\n   Expects a new settings JSON object to merge with the current settings as\n   request body.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user to retrieve the settings for\n   :status 204:     No error\n   :status 403:     No admin rights and not logged in as the user\n   :status 404:     The user is unknown\n\n.. _sec-api-access-users-apikey-generate:\n\nRegenerate a user's api key\n---------------------------\n\n.. http:post:: /api/access/users/(string:username)/apikey\n\n   Generates a new API key for the user.\n\n   Does not expect a body. Will return the generated API key as ``apikey``\n   property in the JSON object contained in the response body.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user to retrieve the settings for\n   :status 200:     No error\n   :status 403:     No admin rights and not logged in as the user\n   :status 404:     The user is unknown\n\n.. _sec-api-access-users-apikey-delete:\n\nDelete a user's api key\n-----------------------\n\n.. http:delete:: /api/access/users/(string:username)/apikey\n\n   Deletes a user's personal API key.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user to retrieve the settings for\n   :status 204:     No error\n   :status 403:     No admin rights and not logged in as the user\n   :status 404:     The user is unknown\n\n.. _sec-api-access-datamodel:\n\nData model\n==========\n\n.. _sec-api-access-datamodel-permissions:\n\nPermissions\n-----------\n\n.. _sec-api-access-datamodel-permissions-list:\n\nPermission list response\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``permissions``\n     - 0..n\n     - List of :ref:`permission records <sec-api-datamodel-access-permissions>`\n     - The list of permissions\n\n\n.. _sec-api-access-datamodel-groups:\n\nGroups\n------\n\n.. _sec-api-access-datamodel-groups-list:\n\nGroup list response\n~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``groups``\n     - 0..n\n     - List of :ref:`group records <sec-api-datamodel-access-groups>`\n     - The list of groups\n\n.. _sec-api-access-datamodel-groups-addgrouprequest:\n\nGroup registration request\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``key``\n     - 1\n     - string\n     - The group's identifier\n   * - ``name``\n     - 1\n     - string\n     - The group's name\n   * - ``description``\n     - 0..1\n     - string\n     - The group's description. Set to empty if not provided.\n   * - ``permissions``\n     - 1..n\n     - List of string\n     - A list of identifier's of permissions to assign to the group\n   * - ``subgroups``\n     - 0..n\n     - List of string\n     - A list of identifier's of groups to assign to the group as subgroups\n   * - ``default``\n     - 0..1\n     - boolean\n     - Whether to assign the group to new users by default (true) or not (false, default value)\n\n.. _sec-api-access-datamodel-groups-updategrouprequest:\n\nGroup update request\n~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``description``\n     - 0..1\n     - string\n     - The group's description. Set to empty if not provided.\n   * - ``permissions``\n     - 1..n\n     - List of string\n     - A list of identifier's of permissions to assign to the group\n   * - ``subgroups``\n     - 0..n\n     - List of string\n     - A list of identifier's of groups to assign to the group as subgroups\n   * - ``default``\n     - 0..1\n     - boolean\n     - Whether to assign the group to new users by default (true) or not (false, default value)\n\n\n.. _sec-api-access-datamodel-users:\n\nUsers\n-----\n\n.. _sec-api-access-datamodel-users-userlistresponse:\n\nUser list response\n~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``users``\n     - 0..n\n     - List of :ref:`user records <sec-api-datamodel-access-users>`\n     - The list of users\n\n.. _sec-api-access-datamodel-users-adduserrequest:\n\nUser registration request\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``name``\n     - 1\n     - string\n     - The user's name\n   * - ``password``\n     - 1\n     - string\n     - The user's password\n   * - ``active``\n     - 1\n     - bool\n     - Whether to activate the account (true) or not (false)\n   * - ``groups``\n     - 0..n\n     - List of string\n     - A list of identifiers of groups to assign to the user\n   * - ``permissions``\n     - 0..n\n     - List of string\n     - A list of identifiers of permissions to assign to the user\n\n.. _sec-api-access-datamodel-users-updateuserrequest:\n\nUser update request\n~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``active``\n     - 0..1\n     - bool\n     - If present will set the user's active flag to the provided value. True for\n       activating the account, false for deactivating it.\n   * - ``groups``\n     - 0..n\n     - List of string\n     - A list of identifiers of groups to assign to the user\n   * - ``permissions``\n     - 0..n\n     - List of string\n     - A list of identifiers of permissions to assign to the user\n", "__author__ = \"Marc Hannappel <salandora@gmail.com>\"\n__license__ = \"GNU Affero General Public License http://www.gnu.org/licenses/agpl.html\"\n__copyright__ = \"Copyright (C) 2017 The OctoPrint Project - Released under terms of the AGPLv3 License\"\n\nfrom flask import abort, jsonify, request\nfrom flask_login import current_user\n\nimport octoprint.access.groups as groups\nimport octoprint.access.users as users\nfrom octoprint.access.permissions import Permissions\nfrom octoprint.server import SUCCESS, groupManager, userManager\nfrom octoprint.server.api import api, valid_boolean_trues\nfrom octoprint.server.util.flask import no_firstrun_access\n\n# ~~ permission api\n\n\n@api.route(\"/access/permissions\", methods=[\"GET\"])\ndef get_permissions():\n    return jsonify(permissions=[permission.as_dict() for permission in Permissions.all()])\n\n\n# ~~ group api\n\n\n@api.route(\"/access/groups\", methods=[\"GET\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef get_groups():\n    return jsonify(groups=list(map(lambda g: g.as_dict(), groupManager.groups)))\n\n\n@api.route(\"/access/groups\", methods=[\"POST\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef add_group():\n    if \"application/json\" not in request.headers[\"Content-Type\"]:\n        abort(400, description=\"Expected content-type JSON\")\n\n    data = request.get_json()\n\n    if \"key\" not in data:\n        abort(400, description=\"key is missing\")\n    if \"name\" not in data:\n        abort(400, description=\"name is missing\")\n    if \"permissions\" not in data:\n        abort(400, description=\"permissions are missing\")\n\n    key = data[\"key\"]\n    name = data[\"name\"]\n    description = data.get(\"description\", \"\")\n    permissions = data[\"permissions\"]\n    subgroups = data[\"subgroups\"]\n    default = data.get(\"default\", False)\n\n    try:\n        groupManager.add_group(\n            key,\n            name,\n            description=description,\n            permissions=permissions,\n            subgroups=subgroups,\n            default=default,\n        )\n    except groups.GroupAlreadyExists:\n        abort(409)\n    return get_groups()\n\n\n@api.route(\"/access/groups/<key>\", methods=[\"GET\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef get_group(key):\n    group = groupManager.find_group(key)\n    if group is not None:\n        return jsonify(group)\n    else:\n        abort(404)\n\n\n@api.route(\"/access/groups/<key>\", methods=[\"PUT\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef update_group(key):\n    if \"application/json\" not in request.headers[\"Content-Type\"]:\n        abort(400, description=\"Expected content-type JSON\")\n\n    data = request.get_json()\n\n    try:\n        kwargs = {}\n\n        if \"permissions\" in data:\n            kwargs[\"permissions\"] = data[\"permissions\"]\n\n        if \"subgroups\" in data:\n            kwargs[\"subgroups\"] = data[\"subgroups\"]\n\n        if \"default\" in data:\n            kwargs[\"default\"] = data[\"default\"] in valid_boolean_trues\n\n        if \"description\" in data:\n            kwargs[\"description\"] = data[\"description\"]\n\n        groupManager.update_group(key, **kwargs)\n\n        return get_groups()\n    except groups.GroupCantBeChanged:\n        abort(403)\n    except groups.UnknownGroup:\n        abort(404)\n\n\n@api.route(\"/access/groups/<key>\", methods=[\"DELETE\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef remove_group(key):\n    try:\n        groupManager.remove_group(key)\n        return get_groups()\n    except groups.UnknownGroup:\n        abort(404)\n    except groups.GroupUnremovable:\n        abort(403)\n\n\n# ~~ user api\n\n\n@api.route(\"/access/users\", methods=[\"GET\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef get_users():\n    return jsonify(users=list(map(lambda u: u.as_dict(), userManager.get_all_users())))\n\n\n@api.route(\"/access/users\", methods=[\"POST\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef add_user():\n    if \"application/json\" not in request.headers[\"Content-Type\"]:\n        abort(400, description=\"Expected content-type JSON\")\n\n    data = request.get_json()\n    if data is None:\n        abort(400, description=\"Malformed JSON body in request\")\n\n    if \"name\" not in data:\n        abort(400, description=\"name is missing\")\n    if \"password\" not in data:\n        abort(400, description=\"password is missing\")\n    if \"active\" not in data:\n        abort(400, description=\"active is missing\")\n\n    name = data[\"name\"]\n    password = data[\"password\"]\n    active = data[\"active\"] in valid_boolean_trues\n\n    groups = data.get(\"groups\", None)\n    permissions = data.get(\"permissions\", None)\n\n    try:\n        userManager.add_user(name, password, active, permissions, groups)\n    except users.UserAlreadyExists:\n        abort(409)\n    return get_users()\n\n\n@api.route(\"/access/users/<username>\", methods=[\"GET\"])\n@no_firstrun_access\ndef get_user(username):\n    if (\n        current_user is not None\n        and not current_user.is_anonymous\n        and (\n            current_user.get_name() == username\n            or current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        user = userManager.find_user(username)\n        if user is not None:\n            return jsonify(user)\n        else:\n            abort(404)\n    else:\n        abort(403)\n\n\n@api.route(\"/access/users/<username>\", methods=[\"PUT\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef update_user(username):\n    user = userManager.find_user(username)\n    if user is not None:\n        if \"application/json\" not in request.headers[\"Content-Type\"]:\n            abort(400, description=\"Expected content-type JSON\")\n\n        data = request.get_json()\n\n        if data is None:\n            abort(400, description=\"Malformed JSON body in request\")\n\n        # change groups\n        if \"groups\" in data:\n            groups = data[\"groups\"]\n            userManager.change_user_groups(username, groups)\n\n        # change permissions\n        if \"permissions\" in data:\n            permissions = data[\"permissions\"]\n            userManager.change_user_permissions(username, permissions)\n\n        # change activation\n        if \"active\" in data:\n            userManager.change_user_activation(\n                username, data[\"active\"] in valid_boolean_trues\n            )\n\n        return get_users()\n    else:\n        abort(404)\n\n\n@api.route(\"/access/users/<username>\", methods=[\"DELETE\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef remove_user(username):\n    try:\n        userManager.remove_user(username)\n        return get_users()\n    except users.UnknownUser:\n        abort(404)\n\n\n@api.route(\"/access/users/<username>/password\", methods=[\"PUT\"])\n@no_firstrun_access\ndef change_password_for_user(username):\n    if not userManager.enabled:\n        return jsonify(SUCCESS)\n\n    if (\n        current_user is not None\n        and not current_user.is_anonymous\n        and (current_user.get_name() == username or current_user.is_admin)\n    ):\n        if \"application/json\" not in request.headers[\"Content-Type\"]:\n            abort(400, description=\"Expected content-type JSON\")\n\n        data = request.get_json()\n\n        if data is None:\n            abort(400, description=\"Malformed JSON body in request\")\n\n        if \"password\" not in data or not data[\"password\"]:\n            abort(400, description=\"password is missing\")\n\n        try:\n            userManager.change_user_password(username, data[\"password\"])\n        except users.UnknownUser:\n            abort(404)\n\n        return jsonify(SUCCESS)\n    else:\n        abort(403)\n\n\n@api.route(\"/access/users/<username>/settings\", methods=[\"GET\"])\n@no_firstrun_access\ndef get_settings_for_user(username):\n    if (\n        current_user is None\n        or current_user.is_anonymous\n        or (\n            current_user.get_name() != username\n            and not current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        abort(403)\n\n    try:\n        return jsonify(userManager.get_all_user_settings(username))\n    except users.UnknownUser:\n        abort(404)\n\n\n@api.route(\"/access/users/<username>/settings\", methods=[\"PATCH\"])\n@no_firstrun_access\ndef change_settings_for_user(username):\n    if (\n        current_user is None\n        or current_user.is_anonymous\n        or (\n            current_user.get_name() != username\n            and not current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        abort(403)\n\n    data = request.get_json()\n\n    if data is None:\n        abort(400, description=\"Malformed JSON body in request\")\n\n    try:\n        userManager.change_user_settings(username, data)\n        return jsonify(SUCCESS)\n    except users.UnknownUser:\n        abort(404)\n\n\n@api.route(\"/access/users/<username>/apikey\", methods=[\"DELETE\"])\n@no_firstrun_access\ndef delete_apikey_for_user(username):\n    if (\n        current_user is not None\n        and not current_user.is_anonymous\n        and (\n            current_user.get_name() == username\n            or current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        try:\n            userManager.delete_api_key(username)\n        except users.UnknownUser:\n            abort(404)\n        return jsonify(SUCCESS)\n    else:\n        abort(403)\n\n\n@api.route(\"/access/users/<username>/apikey\", methods=[\"POST\"])\n@no_firstrun_access\ndef generate_apikey_for_user(username):\n    if not userManager.enabled:\n        return jsonify(SUCCESS)\n\n    if (\n        current_user is not None\n        and not current_user.is_anonymous\n        and (\n            current_user.get_name() == username\n            or current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        try:\n            apikey = userManager.generate_api_key(username)\n        except users.UnknownUser:\n            abort(404)\n        return jsonify({\"apikey\": apikey})\n    else:\n        abort(403)\n\n\ndef _to_external_permissions(*permissions):\n    return list(map(lambda p: p.get_name(), permissions))\n\n\ndef _to_external_groups(*groups):\n    return list(map(lambda g: g.get_name(), groups))\n", "(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(\"OctoPrintAccessClient\", [\"OctoPrintClient\"], factory);\n    } else {\n        global.OctoPrintAccessClient = factory(global.OctoPrintClient);\n    }\n})(this, function (OctoPrintClient) {\n    var baseAccessUrl = \"api/access\";\n\n    //~~ permissions client api\n\n    var OctoPrintAccessPermissionsClient = function (access) {\n        this.access = access;\n        this.base = this.access.base;\n\n        var baseUrl = baseAccessUrl + \"/permissions\";\n        this.url = function () {\n            if (arguments.length) {\n                return baseUrl + \"/\" + Array.prototype.join.call(arguments, \"/\");\n            } else {\n                return baseUrl;\n            }\n        };\n    };\n\n    OctoPrintAccessPermissionsClient.prototype.list = function (opts) {\n        return this.base.get(this.url(), opts);\n    };\n\n    //~~ groups client api\n\n    var OctoPrintAccessGroupsClient = function (access) {\n        this.access = access;\n        this.base = this.access.base;\n\n        var baseUrl = baseAccessUrl + \"/groups\";\n        this.url = function () {\n            if (arguments.length) {\n                return baseUrl + \"/\" + Array.prototype.join.call(arguments, \"/\");\n            } else {\n                return baseUrl;\n            }\n        };\n    };\n\n    OctoPrintAccessGroupsClient.prototype.list = function (opts) {\n        return this.base.get(this.url(), opts);\n    };\n\n    OctoPrintAccessGroupsClient.prototype.add = function (group, opts) {\n        if (!group.key) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group key must be set\");\n        }\n        if (!group.name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group name must be set\");\n        }\n\n        var data = {\n            key: group.key,\n            name: group.name,\n            description: group.description,\n            permissions: group.permissions,\n            subgroups: group.subgroups,\n            default: group.default\n        };\n\n        return this.base.postJson(this.url(), data, opts);\n    };\n\n    OctoPrintAccessGroupsClient.prototype.get = function (key, opts) {\n        if (!key) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group key must be set\");\n        }\n\n        return this.base.get(this.url(key), opts);\n    };\n\n    OctoPrintAccessGroupsClient.prototype.update = function (group, opts) {\n        if (!group.key) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group key must be set\");\n        }\n\n        var data = {\n            description: group.hasOwnProperty(\"description\") ? group.description : \"\",\n            permissions: group.permissions,\n            subgroups: group.subgroups,\n            default: group.default\n        };\n        return this.base.putJson(this.url(group.key), data, opts);\n    };\n\n    OctoPrintAccessGroupsClient.prototype.delete = function (key, opts) {\n        if (!key) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group key must be set\");\n        }\n\n        return this.base.delete(this.url(key), opts);\n    };\n\n    //~~ users client api\n\n    var OctoPrintAccessUsersClient = function (access) {\n        this.access = access;\n        this.base = this.access.base;\n\n        var baseUrl = baseAccessUrl + \"/users\";\n        this.url = function () {\n            if (arguments.length) {\n                return baseUrl + \"/\" + Array.prototype.join.call(arguments, \"/\");\n            } else {\n                return baseUrl;\n            }\n        };\n    };\n\n    OctoPrintAccessUsersClient.prototype.list = function (opts) {\n        return this.base.get(this.url(), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.add = function (user, opts) {\n        if (!user.name || !user.password) {\n            throw new OctoPrintClient.InvalidArgumentError(\n                \"Both user's name and password need to be set\"\n            );\n        }\n\n        var data = {\n            name: user.name,\n            password: user.password,\n            groups: user.hasOwnProperty(\"groups\") ? user.groups : [],\n            permissions: user.hasOwnProperty(\"permissions\") ? user.permissions : [],\n            active: user.hasOwnProperty(\"active\") ? !!user.active : true,\n            admin: user.hasOwnProperty(\"admin\") ? !!user.admin : false\n        };\n\n        return this.base.postJson(this.url(), data, opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.get = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.get(this.url(name), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.update = function (\n        name,\n        active,\n        admin,\n        permissions,\n        groups,\n        opts\n    ) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        var data = {\n            active: !!active,\n            groups: groups,\n            permissions: permissions,\n            admin: !!admin\n        };\n        return this.base.putJson(this.url(name), data, opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.delete = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.delete(this.url(name), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.changePassword = function (\n        name,\n        password,\n        opts\n    ) {\n        if (!name || !password) {\n            throw new OctoPrintClient.InvalidArgumentError(\n                \"user name and password must be set\"\n            );\n        }\n\n        var data = {\n            password: password\n        };\n        return this.base.putJson(this.url(name, \"password\"), data, opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.generateApiKey = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.postJson(this.url(name, \"apikey\"), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.resetApiKey = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.delete(this.url(name, \"apikey\"), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.getSettings = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.get(this.url(name, \"settings\"), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.saveSettings = function (name, settings, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        settings = settings || {};\n        return this.base.patchJson(this.url(name, \"settings\"), settings, opts);\n    };\n\n    var OctoPrintAccessClient = function (base) {\n        this.base = base;\n\n        this.permissions = new OctoPrintAccessPermissionsClient(this);\n        this.groups = new OctoPrintAccessGroupsClient(this);\n        this.users = new OctoPrintAccessUsersClient(this);\n    };\n    OctoPrintClient.registerComponent(\"access\", OctoPrintAccessClient);\n    return OctoPrintAccessClient;\n});\n", "$(function () {\n    function AccessViewModel(parameters) {\n        var access = this;\n\n        access.loginState = parameters[0];\n\n        var GROUP_ADMINS = \"admins\";\n        var GROUP_GUESTS = \"guests\";\n\n        //~~ Users ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        access.users = (function () {\n            var self = {};\n            // initialize list helper\n            self.listHelper = new ItemListHelper(\n                \"users\",\n                {\n                    name: function (a, b) {\n                        // sorts ascending\n                        if (a[\"name\"].toLocaleLowerCase() < b[\"name\"].toLocaleLowerCase())\n                            return -1;\n                        if (a[\"name\"].toLocaleLowerCase() > b[\"name\"].toLocaleLowerCase())\n                            return 1;\n                        return 0;\n                    }\n                },\n                {},\n                \"name\",\n                [],\n                [],\n                CONFIG_USERSPERPAGE\n            );\n\n            self.emptyUser = {name: \"\", active: false};\n\n            self.currentUser = ko.observable(self.emptyUser).extend({notify: \"always\"});\n\n            self.editor = {\n                name: ko.observable(undefined),\n                groups: ko.observableArray([]),\n                permissions: ko.observableArray([]),\n                password: ko.observable(undefined),\n                repeatedPassword: ko.observable(undefined),\n                passwordMismatch: ko.pureComputed(function () {\n                    return self.editor.password() !== self.editor.repeatedPassword();\n                }),\n                apikey: ko.observable(undefined),\n                active: ko.observable(undefined),\n                permissionSelectable: function (permission) {\n                    return true;\n                },\n                permissionSelected: function (permission) {\n                    var index = self.editor.permissions().indexOf(permission);\n                    return index >= 0;\n                },\n                togglePermission: function (permission) {\n                    var permissions = self.editor.permissions();\n                    var index = permissions.indexOf(permission);\n                    if (index < 0) {\n                        permissions.push(permission);\n                    } else {\n                        permissions.splice(index, 1);\n                    }\n                    self.editor.permissions(permissions);\n                },\n                groupSelected: function (group) {\n                    var index = self.editor.groups().indexOf(group);\n                    return index >= 0;\n                },\n                toggleGroup: function (group) {\n                    var groups = self.editor.groups();\n                    var index = groups.indexOf(group);\n                    if (index < 0) {\n                        groups.push(group);\n                    } else {\n                        groups.splice(index, 1);\n                    }\n                    self.editor.groups(groups);\n                },\n                joinedGroupPermissions: function (group) {\n                    return access.permissionList(group);\n                },\n                header: ko.observable(undefined),\n                new: ko.observable(true),\n                confirm: undefined,\n                valid: ko.pureComputed(function () {\n                    return (\n                        self.editor.name() &&\n                        self.editor.name().trim() &&\n                        (!self.editor.new() ||\n                            (self.editor.password() &&\n                                self.editor.password().trim() &&\n                                !self.editor.passwordMismatch()))\n                    );\n                }),\n                dangerRestricted: function () {\n                    return false;\n                },\n                dangerRestrictedText: gettext(\n                    \"This user may not have dangerous permissions.\"\n                )\n            };\n\n            self.userEditorDialog = undefined;\n            self.changePasswordDialog = undefined;\n\n            self.currentUser.subscribe(function (newValue) {\n                if (newValue === undefined) {\n                    self.editor.name(undefined);\n                    self.editor.groups(access.groups.defaults.slice(0));\n                    self.editor.permissions([]);\n                    self.editor.active(true);\n                    self.editor.apikey(undefined);\n                    self.editor.header(gettext(\"Add user\"));\n                    self.editor.new(true);\n                    self.editor.confirm = self.confirmAddUser;\n                } else {\n                    self.editor.name(newValue.name);\n                    self.editor.groups(newValue.groups.slice(0));\n                    self.editor.permissions(newValue.permissions.slice(0));\n                    self.editor.active(newValue.active);\n                    self.editor.apikey(newValue.apikey);\n                    self.editor.header(\n                        _.sprintf(gettext('Edit user \"%(name)s\"'), {name: newValue.name})\n                    );\n                    self.editor.new(false);\n                    self.editor.confirm = self.confirmEditUser;\n                }\n                self.editor.password(undefined);\n                self.editor.repeatedPassword(undefined);\n            });\n\n            self.requestData = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN)) return;\n\n                return OctoPrint.access.users.list().done(self.fromResponse);\n            };\n\n            self.fromResponse = function (response) {\n                self.listHelper.updateItems(response.users);\n            };\n\n            self.showAddUserDialog = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.currentUser(undefined);\n\n                $('ul.nav-pills a[data-toggle=\"tab\"]:first', self.userEditorDialog).tab(\n                    \"show\"\n                );\n                self.userEditorDialog\n                    .modal({\n                        minHeight: function () {\n                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\n                        }\n                    })\n                    .css({\n                        \"margin-left\": function () {\n                            return -($(this).width() / 2);\n                        }\n                    });\n            };\n\n            self.confirmAddUser = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                var user = {\n                    name: self.editor.name(),\n                    password: self.editor.password(),\n                    groups: self.editor.groups(),\n                    permissions: self.editor.permissions(),\n                    active: self.editor.active()\n                };\n\n                self.addUser(user).done(function () {\n                    // close dialog\n                    self.currentUser(undefined);\n                    self.userEditorDialog.modal(\"hide\");\n                });\n            };\n\n            self.showEditUserDialog = function (user) {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                var process = function (user) {\n                    self.currentUser(user);\n\n                    $(\n                        'ul.nav-pills a[data-toggle=\"tab\"]:first',\n                        self.userEditorDialog\n                    ).tab(\"show\");\n                    self.userEditorDialog\n                        .modal({\n                            minHeight: function () {\n                                return Math.max(\n                                    $.fn.modal.defaults.maxHeight() - 80,\n                                    250\n                                );\n                            }\n                        })\n                        .css({\n                            \"margin-left\": function () {\n                                return -($(this).width() / 2);\n                            }\n                        });\n                };\n\n                OctoPrint.users\n                    .get(user.name)\n                    .done(function (data) {\n                        process(data);\n                    })\n                    .fail(function () {\n                        log.warn(\n                            \"Could not fetch current user data, proceeding with client side data copy\"\n                        );\n                        process(user);\n                    });\n            };\n\n            self.confirmEditUser = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                var user = self.currentUser();\n                user.active = self.editor.active();\n                user.groups = self.editor.groups();\n                user.permissions = self.editor.permissions();\n\n                self.updateUser(user).done(function () {\n                    // close dialog\n                    self.currentUser(undefined);\n                    self.userEditorDialog.modal(\"hide\");\n                });\n            };\n\n            self.showChangePasswordDialog = function (user) {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.currentUser(user);\n                self.changePasswordDialog.modal(\"show\");\n            };\n\n            self.confirmChangePassword = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.updatePassword(self.currentUser().name, self.editor.password()).done(\n                    function () {\n                        // close dialog\n                        self.currentUser(undefined);\n                        self.changePasswordDialog.modal(\"hide\");\n                    }\n                );\n            };\n\n            self.confirmGenerateApikey = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.generateApikey(self.currentUser().name).done(function (response) {\n                    self._updateApikey(response.apikey);\n                });\n            };\n\n            self.copyApikey = function () {\n                copyToClipboard(self.editor.apikey());\n            };\n\n            self._updateApikey = function (apikey) {\n                self.editor.apikey(apikey);\n                self.requestData();\n            };\n\n            self.confirmDeleteApikey = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.deleteApikey(self.currentUser().name).done(function () {\n                    self._updateApikey(undefined);\n                });\n            };\n\n            //~~ Framework\n\n            self.onStartup = function () {\n                self.userEditorDialog = $(\"#settings-usersEditorDialog\");\n                self.changePasswordDialog = $(\"#settings-usersDialogChangePassword\");\n            };\n\n            //~~ API calls\n\n            self.addUser = function (user) {\n                if (!user) {\n                    throw OctoPrint.InvalidArgumentError(\"user must be set\");\n                }\n                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN))\n                    return $.Deferred()\n                        .reject(\"You are not authorized to perform this action\")\n                        .promise();\n\n                return OctoPrint.access.users.add(user).done(self.fromResponse);\n            };\n\n            self.removeUser = function (user) {\n                if (!user) {\n                    throw OctoPrint.InvalidArgumentError(\"user must be set\");\n                }\n                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN))\n                    return $.Deferred()\n                        .reject(\"You are not authorized to perform this action\")\n                        .promise();\n\n                if (user.name === access.loginState.username()) {\n                    // we do not allow to delete ourselves\n                    new PNotify({\n                        title: gettext(\"Not possible\"),\n                        text: gettext(\"You may not delete your own account.\"),\n                        type: \"error\"\n                    });\n                    return $.Deferred()\n                        .reject(\"You may not delete your own account\")\n                        .promise();\n                }\n\n                showConfirmationDialog({\n                    title: gettext(\"Are you sure?\"),\n                    message: _.sprintf(\n                        gettext('You are about to delete the user \"%(name)s\".'),\n                        {name: _.escape(user.name)}\n                    ),\n                    proceed: gettext(\"Delete\"),\n                    onproceed: function () {\n                        OctoPrint.access.users.delete(user.name).done(self.fromResponse);\n                    }\n                });\n            };\n\n            self.updateUser = function (user) {\n                if (!user) {\n                    throw OctoPrint.InvalidArgumentError(\"user must be set\");\n                }\n\n                return OctoPrint.access.users\n                    .update(\n                        user.name,\n                        user.active,\n                        user.admin,\n                        user.permissions,\n                        user.groups\n                    )\n                    .done(self.fromResponse);\n            };\n\n            self.updatePassword = function (username, password) {\n                return OctoPrint.access.users.changePassword(username, password);\n            };\n\n            self.generateApikey = function (username) {\n                return OctoPrint.access.users.generateApiKey(username).done(function () {\n                    self.requestData();\n                });\n            };\n\n            self.deleteApikey = function (username) {\n                return OctoPrint.access.users.resetApiKey(username);\n            };\n\n            return self;\n        })();\n\n        //~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        access.groups = (function () {\n            var self = {};\n            // initialize list helper\n            self.listHelper = new ItemListHelper(\n                \"groups\",\n                {\n                    name: function (a, b) {\n                        // sorts ascending\n                        if (a[\"name\"].toLocaleLowerCase() < b[\"name\"].toLocaleLowerCase())\n                            return -1;\n                        if (a[\"name\"].toLocaleLowerCase() > b[\"name\"].toLocaleLowerCase())\n                            return 1;\n                        return 0;\n                    }\n                },\n                {},\n                \"name\",\n                [],\n                [],\n                CONFIG_GROUPSPERPAGE\n            );\n\n            self.groupsList = self.listHelper.items; // Alias for easier reference\n            self.lookup = {};\n            self.defaults = [];\n\n            self.emptyGroup = {name: \"\"};\n\n            self.currentGroup = ko.observable(self.emptyGroup);\n\n            self.editor = {\n                key: ko.observable(undefined),\n                name: ko.observable(undefined),\n                description: ko.observable(undefined),\n                permissions: ko.observableArray([]),\n                subgroups: ko.observableArray([]),\n                default: ko.observable(false),\n                permissionSelectable: function (permission) {\n                    // guests may not get dangerous permissions\n                    return self.editor.key() !== GROUP_GUESTS || !permission.dangerous;\n                },\n                permissionSelected: function (permission) {\n                    var index = self.editor.permissions().indexOf(permission);\n                    return index >= 0;\n                },\n                togglePermission: function (permission) {\n                    var permissions = self.editor.permissions();\n                    var index = permissions.indexOf(permission);\n                    if (index < 0) {\n                        permissions.push(permission);\n                    } else {\n                        permissions.splice(index, 1);\n                    }\n                    self.editor.permissions(permissions);\n                },\n                subgroupSelectable: function (subgroup) {\n                    // guests may not get dangerous subgroups\n                    return (\n                        self.editor.key() !== subgroup.key &&\n                        (self.editor.key() !== GROUP_GUESTS || !subgroup.dangerous)\n                    );\n                },\n                subgroupSelected: function (subgroup) {\n                    var index = self.editor.subgroups().indexOf(subgroup);\n                    return index >= 0;\n                },\n                toggleSubgroup: function (subgroup) {\n                    var subgroups = self.editor.subgroups();\n                    var index = subgroups.indexOf(subgroup);\n                    if (index < 0) {\n                        subgroups.push(subgroup);\n                    } else {\n                        subgroups.splice(index, 1);\n                    }\n                    self.editor.subgroups(subgroups);\n                },\n                joinedGroupPermissions: function (group) {\n                    return access.permissionList(group);\n                },\n                header: ko.observable(undefined),\n                new: ko.observable(true),\n                confirm: undefined,\n                valid: ko.pureComputed(function () {\n                    return self.editor.name() && self.editor.name().trim();\n                }),\n                dangerRestricted: function () {\n                    return self.editor.key() === GROUP_GUESTS;\n                },\n                dangerRestrictedText: gettext(\n                    \"This group may not have dangerous permissions or subgroups.\"\n                )\n            };\n\n            self.groupEditorDialog = undefined;\n\n            // used to delete all the groups before registering new ones\n            self.groupsList.subscribe(\n                function (oldValue) {\n                    if (oldValue === undefined || oldValue.length === 0) return;\n\n                    oldValue.forEach(function (p) {\n                        delete self[p.key.toUpperCase()];\n                    });\n                },\n                null,\n                \"beforeChange\"\n            );\n\n            // used to register new groups\n            self.groupsList.subscribe(function (newValue) {\n                if (newValue === undefined) return;\n\n                newValue.forEach(function (g) {\n                    var needs = [];\n                    g.permissions.forEach(function (p) {\n                        for (var key in p.needs) {\n                            p.needs[key].forEach(function (value) {\n                                needs.push(access.permissions.need(key, value));\n                            });\n                        }\n                    });\n\n                    // if the permission has no need sets do not register it.\n                    if (needs.length > 0) {\n                        self.registerGroup(g.key.toUpperCase(), needs);\n                    }\n                });\n            });\n\n            self.registerGroup = function (name, group) {\n                Object.defineProperty(self, name, {\n                    value: group,\n                    enumerable: true,\n                    configurable: true\n                });\n            };\n\n            self.currentGroup.subscribe(function (newValue) {\n                if (newValue === undefined) {\n                    // group add\n                    self.editor.key(undefined);\n                    self.editor.name(undefined);\n                    self.editor.description(undefined);\n                    self.editor.permissions([]);\n                    self.editor.subgroups([]);\n                    self.editor.default(false);\n                    self.editor.header(gettext(\"Add group\"));\n                    self.editor.new(true);\n                    self.editor.confirm = self.confirmAddGroup;\n                } else {\n                    // group update\n                    self.editor.key(newValue.key);\n                    self.editor.name(newValue.name);\n                    self.editor.description(newValue.description);\n                    self.editor.permissions(newValue.permissions.slice(0));\n                    self.editor.subgroups(newValue.subgroups.slice(0));\n                    self.editor.default(newValue.default);\n                    self.editor.header(\n                        _.sprintf(gettext('Edit group \"%(name)s\"'), {name: newValue.name})\n                    );\n                    self.editor.new(false);\n                    self.editor.confirm = self.confirmEditGroup;\n                }\n            });\n\n            self.requestData = function () {\n                return OctoPrint.access.groups.list().done(self.fromResponse);\n            };\n\n            self.fromResponse = function (response) {\n                var lookup = {};\n                var defaults = [];\n                _.each(response.groups, function (group) {\n                    lookup[group.key] = group;\n                    if (group.default) {\n                        defaults.push(group.key);\n                    }\n                });\n                self.lookup = lookup;\n                self.defaults = defaults;\n                self.listHelper.updateItems(response.groups);\n            };\n\n            self.showAddGroupDialog = function () {\n                self.currentGroup(undefined);\n                $('ul.nav-pills a[data-toggle=\"tab\"]:first', self.groupEditorDialog).tab(\n                    \"show\"\n                );\n                self.groupEditorDialog\n                    .modal({\n                        minHeight: function () {\n                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\n                        }\n                    })\n                    .css({\n                        \"margin-left\": function () {\n                            return -($(this).width() / 2);\n                        }\n                    });\n            };\n\n            self.confirmAddGroup = function () {\n                var group = {\n                    key: self.editor\n                        .name()\n                        .toLowerCase()\n                        .replace(/[^a-z0-9_ ]/g, \"\")\n                        .replace(/ /g, \"_\"),\n                    name: self.editor.name(),\n                    description: self.editor.description(),\n                    permissions: self.editor.permissions(),\n                    subgroups: self.editor.subgroups(),\n                    default: self.editor.default()\n                };\n\n                self.addGroup(group).done(function () {\n                    // close dialog\n                    self.currentGroup(undefined);\n                    self.groupEditorDialog.modal(\"hide\");\n                });\n            };\n\n            self.showEditGroupDialog = function (group) {\n                if (!group.changeable) return;\n\n                self.currentGroup(group);\n                $('ul.nav-pills a[data-toggle=\"tab\"]:first', self.groupEditorDialog).tab(\n                    \"show\"\n                );\n                self.groupEditorDialog\n                    .modal({\n                        minHeight: function () {\n                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\n                        }\n                    })\n                    .css({\n                        \"margin-left\": function () {\n                            return -($(this).width() / 2);\n                        }\n                    });\n            };\n\n            self.confirmEditGroup = function () {\n                var group = self.currentGroup();\n\n                var data = {\n                    key: group.key,\n                    name: group.name,\n                    description: self.editor.description(),\n                    permissions: self.editor.permissions(),\n                    subgroups: self.editor.subgroups(),\n                    default: self.editor.default()\n                };\n\n                self.updateGroup(data).done(function () {\n                    // close dialog\n                    self.currentGroup(undefined);\n                    self.groupEditorDialog.modal(\"hide\");\n                });\n            };\n\n            //~~ Framework\n\n            self.onStartup = function () {\n                self.groupEditorDialog = $(\"#settings-groupsEditorDialog\");\n            };\n\n            //~~ API calls\n\n            self.addGroup = function (group) {\n                if (!group) {\n                    throw OctoPrint.InvalidArgumentError(\"group must be set\");\n                }\n\n                return OctoPrint.access.groups.add(group).done(self.fromResponse);\n            };\n\n            self.removeGroup = function (group) {\n                if (!group) {\n                    throw OctoPrint.InvalidArgumentError(\"group must be set\");\n                }\n\n                if (!group.removable) return;\n\n                showConfirmationDialog({\n                    title: gettext(\"Are you sure?\"),\n                    message: _.sprintf(\n                        gettext('You are about to delete the group \"%(name)s\".'),\n                        {name: _.escape(group.name)}\n                    ),\n                    proceed: gettext(\"Delete\"),\n                    onproceed: function () {\n                        OctoPrint.access.groups\n                            .delete(group.key)\n                            .done(function (response) {\n                                self.fromResponse(response);\n                                access.users.requestData();\n                            });\n                    }\n                });\n            };\n\n            self.updateGroup = function (group) {\n                if (!group) {\n                    throw OctoPrint.InvalidArgumentError(\"group must be set\");\n                }\n\n                return OctoPrint.access.groups.update(group).done(self.fromResponse);\n            };\n\n            return self;\n        })();\n\n        //~~ Permissions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        access.permissions = (function () {\n            var self = {};\n\n            self.need = function (method, value) {\n                return {method: method, value: value};\n            };\n            self.roleNeed = function (value) {\n                return self.need(\"role\", value);\n            };\n\n            self.permissionList = ko.observableArray([]);\n            self.lookup = {};\n\n            var registeredPermissions = [];\n            var registerPermission = function (key, permission) {\n                Object.defineProperty(self, key, {\n                    value: permission,\n                    enumerable: true,\n                    configurable: true\n                });\n                registeredPermissions.push(key);\n            };\n            var clearAllRegisteredPermissions = function () {\n                _.each(registeredPermissions, function (key) {\n                    delete self[key];\n                });\n                registeredPermissions = [];\n            };\n\n            self.initialize = function () {\n                clearAllRegisteredPermissions();\n\n                var permissionList = [];\n                var lookup = {};\n                _.each(PERMISSIONS, function (permission) {\n                    var needs = [];\n                    _.each(permission.needs, function (value, key) {\n                        needs.push(self.need(key, value));\n                    });\n\n                    if (needs.length > 0) {\n                        registerPermission(permission.key, needs);\n                    }\n\n                    if (!permission.combined) {\n                        permissionList.push(permission);\n                    }\n                    lookup[permission.key] = permission;\n                });\n\n                permissionList.sort(access.permissionComparator);\n                self.permissionList(permissionList);\n                self.lookup = lookup;\n            };\n\n            return self;\n        })();\n\n        //~~ helpers ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        access.groupComparator = function (a, b) {\n            var nameA = a.name ? a.name.toUpperCase() : \"\";\n            var nameB = b.name ? b.name.toUpperCase() : \"\";\n\n            if (nameA < nameB) {\n                return -1;\n            } else if (nameA > nameB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        };\n\n        access.permissionComparator = function (a, b) {\n            var nameA = a.name ? a.name.toUpperCase() : \"\";\n            var nameB = b.name ? b.name.toUpperCase() : \"\";\n\n            var pluginA = a.plugin || \"\";\n            var pluginB = b.plugin || \"\";\n\n            var compA = pluginA + \":\" + nameA;\n            var compB = pluginB + \":\" + nameB;\n\n            if (compA < compB) {\n                return -1;\n            } else if (compA > compB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        };\n\n        // Maps the group names into a comma separated list\n        access.groupList = function (data) {\n            if (data.groups === undefined) return \"\";\n\n            var mappedGroups = _.filter(\n                _.map(data.groups, function (g) {\n                    return access.groups.lookup[g];\n                }),\n                function (g) {\n                    return g !== undefined;\n                }\n            );\n            mappedGroups.sort(access.groupComparator);\n            return _.map(mappedGroups, function (g) {\n                return g.name;\n            }).join(\", \");\n        };\n\n        // Maps the sub group names into a comma separated list\n        access.subgroupList = function (data) {\n            if (data.subgroups === undefined) return \"\";\n\n            var mappedGroups = _.filter(\n                _.map(data.subgroups, function (g) {\n                    return access.groups.lookup[g];\n                }),\n                function (g) {\n                    return g !== undefined;\n                }\n            );\n            mappedGroups.sort(access.groupComparator);\n            return _.map(mappedGroups, function (g) {\n                return g.name;\n            }).join(\", \");\n        };\n\n        // Maps the permission names into a comma separated list\n        access.permissionList = function (data) {\n            if (!data || data.permissions === undefined) return \"\";\n\n            var mappedPermissions = _.filter(\n                _.map(data.permissions, function (p) {\n                    return access.permissions.lookup[p];\n                }),\n                function (p) {\n                    return p !== undefined;\n                }\n            );\n            mappedPermissions.sort(access.permissionComparator);\n            return _.map(mappedPermissions, function (p) {\n                return p.name;\n            }).join(\", \");\n        };\n\n        //~~ API Calls\n        access.onStartup = function () {\n            access.groups.onStartup();\n            access.users.onStartup();\n        };\n\n        access.onServerConnect = function () {\n            access.permissions.initialize();\n        };\n\n        access.onServerReconnect = function () {\n            access.permissions.initialize();\n        };\n\n        access.onUserPermissionsChanged =\n            access.onUserLoggedIn =\n            access.onUserLoggedOut =\n                function (user) {\n                    if (access.loginState.hasPermission(access.permissions.SETTINGS)) {\n                        access.groups.requestData().done(function () {\n                            access.users.requestData();\n                        });\n                    }\n                };\n    }\n\n    OCTOPRINT_VIEWMODELS.push([AccessViewModel, [\"loginStateViewModel\"], []]);\n});\n", "$(function () {\n    function UserSettingsViewModel(parameters) {\n        var self = this;\n\n        self.loginState = parameters[0];\n        self.access = parameters[1];\n\n        self.users = self.access.users;\n\n        self.userSettingsDialog = undefined;\n\n        var auto_locale = {\n            language: \"_default\",\n            display: gettext(\"Site default\"),\n            english: undefined\n        };\n        self.locales = ko.observableArray(\n            [auto_locale].concat(\n                _.sortBy(_.values(AVAILABLE_LOCALES), function (n) {\n                    return n.display;\n                })\n            )\n        );\n        self.locale_languages = _.keys(AVAILABLE_LOCALES);\n\n        self.access_password = ko.observable(undefined);\n        self.access_repeatedPassword = ko.observable(undefined);\n        self.access_apikey = ko.observable(undefined);\n        self.interface_language = ko.observable(undefined);\n\n        self.currentUser = ko.observable(undefined);\n        self.currentUser.subscribe(function (newUser) {\n            self.access_password(undefined);\n            self.access_repeatedPassword(undefined);\n            self.access_apikey(undefined);\n            self.interface_language(\"_default\");\n\n            if (newUser !== undefined) {\n                self.access_apikey(newUser.apikey);\n                if (\n                    newUser.settings.hasOwnProperty(\"interface\") &&\n                    newUser.settings.interface.hasOwnProperty(\"language\")\n                ) {\n                    self.interface_language(newUser.settings.interface.language);\n                }\n            }\n        });\n\n        self.passwordMismatch = ko.pureComputed(function () {\n            return self.access_password() !== self.access_repeatedPassword();\n        });\n\n        self.show = function (user) {\n            if (!CONFIG_ACCESS_CONTROL) return;\n\n            if (user === undefined) {\n                user = self.loginState.currentUser();\n            }\n\n            var process = function (user) {\n                self.currentUser(user);\n                self.userSettingsDialog.modal(\"show\");\n            };\n\n            // make sure we have the current user data, see #2534\n            OctoPrint.access.users\n                .get(user.name)\n                .done(function (data) {\n                    process(data);\n                })\n                .fail(function () {\n                    log.warn(\n                        \"Could not fetch current user data, proceeding with client side data copy\"\n                    );\n                    process(user);\n                });\n        };\n\n        self.save = function () {\n            if (!CONFIG_ACCESS_CONTROL) return;\n\n            self.userSettingsDialog.trigger(\"beforeSave\");\n\n            if (self.access_password() && !self.passwordMismatch()) {\n                self.users.updatePassword(\n                    self.currentUser().name,\n                    self.access_password(),\n                    function () {}\n                );\n            }\n\n            var settings = {\n                interface: {\n                    language: self.interface_language()\n                }\n            };\n            self.updateSettings(self.currentUser().name, settings).done(function () {\n                // close dialog\n                self.currentUser(undefined);\n                self.userSettingsDialog.modal(\"hide\");\n                self.loginState.reloadUser();\n            });\n        };\n\n        self.copyApikey = function () {\n            copyToClipboard(self.access_apikey());\n        };\n\n        self.generateApikey = function () {\n            if (!CONFIG_ACCESS_CONTROL) return;\n\n            var generate = function () {\n                self.users\n                    .generateApikey(self.currentUser().name)\n                    .done(function (response) {\n                        self.access_apikey(response.apikey);\n                    });\n            };\n\n            if (self.access_apikey()) {\n                showConfirmationDialog(\n                    gettext(\n                        \"This will generate a new API Key. The old API Key will cease to function immediately.\"\n                    ),\n                    generate\n                );\n            } else {\n                generate();\n            }\n        };\n\n        self.deleteApikey = function () {\n            if (!CONFIG_ACCESS_CONTROL) return;\n            if (!self.access_apikey()) return;\n\n            showConfirmationDialog(\n                gettext(\n                    \"This will delete the API Key. It will cease to to function immediately.\"\n                ),\n                function () {\n                    self.users.deleteApikey(self.currentUser().name).done(function () {\n                        self.access_apikey(undefined);\n                    });\n                }\n            );\n        };\n\n        self.updateSettings = function (username, settings) {\n            return OctoPrint.access.users.saveSettings(username, settings);\n        };\n\n        self.saveEnabled = function () {\n            return !self.passwordMismatch();\n        };\n\n        self.onStartup = function () {\n            self.userSettingsDialog = $(\"#usersettings_dialog\");\n        };\n\n        self.onAllBound = function (allViewModels) {\n            self.userSettingsDialog.on(\"show\", function () {\n                callViewModels(allViewModels, \"onUserSettingsShown\");\n            });\n            self.userSettingsDialog.on(\"hidden\", function () {\n                callViewModels(allViewModels, \"onUserSettingsHidden\");\n            });\n            self.userSettingsDialog.on(\"beforeSave\", function () {\n                callViewModels(allViewModels, \"onUserSettingsBeforeSave\");\n            });\n        };\n    }\n\n    OCTOPRINT_VIEWMODELS.push({\n        construct: UserSettingsViewModel,\n        dependencies: [\"loginStateViewModel\", \"accessViewModel\"],\n        elements: [\"#usersettings_dialog\"]\n    });\n});\n", "<form class=\"form-horizontal\" onsubmit=\"return false;\">\n    <fieldset>\n        <legend>{{ _('Password') }}</legend>\n        <p>\n            {{ _('If you do not wish to change your password, just leave the following fields empty.') }}\n        </p>\n        <div class=\"control-group\">\n            <label class=\"control-label\" for=\"userSettings-access_password\">{{ _('New Password') }}</label>\n            <div class=\"controls\">\n                <input type=\"password\" class=\"input-block-level\" id=\"userSettings-access_password\" data-bind=\"value: access_password\" required>\n            </div>\n        </div>\n        <div class=\"control-group\" data-bind=\"css: {error: passwordMismatch()}\">\n            <label class=\"control-label\" for=\"userSettings-access_repeatedPassword\">{{ _('Repeat Password') }}</label>\n            <div class=\"controls\">\n                <input type=\"password\" class=\"input-block-level\" id=\"userSettings-access_repeatedPassword\" data-bind=\"value: access_repeatedPassword, valueUpdate: 'afterkeydown'\" required>\n                <span class=\"help-inline\" data-bind=\"visible: passwordMismatch()\">{{ _('Passwords do not match') }}</span>\n            </div>\n        </div>\n    </fieldset>\n    <fieldset>\n        <legend>{{ _('API Key') }}</legend>\n        <div class=\"control-group\">\n            <label class=\"control-label\" for=\"userSettings-access_apikey\">{{ _('Current API Key') }}</label>\n            <div class=\"controls\">\n                <div class=\"input-append input-block-level\">\n                    <input type=\"text\" readonly=\"readonly\" id=\"userSettings-access_apikey\" data-bind=\"value: access_apikey, attr: {placeholder: '{{ _('N/A')|esq }}'}\">\n                    <a class=\"btn add-on\" title=\"Copy API Key to clipboard\" data-bind=\"click: copyApikey, css: {'disabled': !access_apikey()}\"><i class=\"fas fa-copy\"></i></a>\n                    <a class=\"btn add-on\" title=\"Generate new API Key\" data-bind=\"click: generateApikey\"><i class=\"fas fa-sync\"></i></a>\n                    <a class=\"btn btn-danger add-on\" title=\"Delete API Key\" data-bind=\"click: deleteApikey, css: {'disabled': !access_apikey()}\"><i class=\"far fa-trash-alt\"></i></a>\n                </div>\n                <span class=\"help-block\">{{ _('Please note that changes to the API key are applied immediately, without having to \"Confirm\" first.') }}</span>\n            </div>\n        </div>\n        <div class=\"control-group\" data-bind=\"visible: access_apikey\">\n            <label class=\"control-label\">{{ _('QR Code') }}</label>\n            <div class=\"controls\">\n                <div data-bind=\"qrcode: {text: access_apikey, size: 150}\"></div>\n            </div>\n        </div>\n    </fieldset>\n</form>\n"], "fixing_code": [".. _sec-api-access:\n\n**************\nAccess control\n**************\n\n.. contents::\n\n.. _sec-api-access-permissions:\n\nPermissions\n===========\n\n.. _sec-api-access-permissions-list:\n\nList all permissions\n--------------------\n\n.. http:get:: /api/access/permissions\n\n   Retrieves all permissions available in the system.\n\n   Will return a :http:statuscode:`200` with a :ref:`permission list <sec-api-access-datamodel-permissions-list>`\n   as body.\n\n   :status 200: No error\n\n.. _sec-api-access-groups:\n\nGroups\n======\n\n.. _sec-api-access-groups-list:\n\nGet group list\n--------------\n\n.. http:get:: /api/access/groups\n\n   Retrieves all groups registered in the system.\n\n   Will return a :http:statuscode:`200` with a :ref:`group list <sec-api-access-datamodel-groups-list>`\n   as body.\n\n   Requires the ``SETTINGS`` permission.\n\n   :status 200: No error\n\n.. _sec-api-access-groups-add:\n\nAdd a new group\n---------------\n\n.. http:post:: /api/access/groups\n\n   Adds a new group to the system.\n\n   Expects a :ref:`group registration request <sec-api-access-datamodel-groups-addgrouprequest>` as request body.\n\n   Will return a :ref:`group list response <sec-api-access-datamodel-groups-list>` on success.\n\n   Requires the ``SETTINGS`` permission.\n\n   :json key:         The group's identifier\n   :json name:        The user's name\n   :json description: A human readable description of the group\n   :json permissions: The permissions to assign to the group\n   :json subgroups:   Subgroups assigned to the group\n   :json default:     Whether the group should be assigned to new users by default or not\n   :status 200:       No error\n   :status 400:       If any of the mandatory fields is missing or the request is otherwise\n                      invalid\n   :status 409:       A group with the provided key does already exist\n\n.. _sec-api-access-groups-retrieve:\n\nRetrieve a group\n----------------\n\n.. http:get:: /api/access/groups/(string:key)\n\n   Retrieves an individual group record.\n\n   Will return a :http:statuscode:`200` with a :ref:`group record <sec-api-access-datamodel-groups-list>`\n   as body.\n\n   Requires the ``SETTINGS`` permission.\n\n   :status 200: No error\n\n.. _sec-api-access-groups-modify:\n\nUpdate a group\n--------------\n\n.. http:put:: /api/access/groups/(string:key)\n\n   Updates an existing group.\n\n   Expects a :ref:`group update request <sec-api-access-datamodel-groups-updategrouprequest>` as request body.\n\n   Will return a :ref:`group list response <sec-api-access-datamodel-groups-list>` on success.\n\n   Requires the ``SETTINGS`` permission.\n\n   :json description: A human readable description of the group\n   :json permissions: The permissions to assign to the group\n   :json subgroups:   Subgroups assigned to the group\n   :json default:     Whether the group should be assigned to new users by default or not\n   :status 200:       No error\n   :status 400:       If any of the mandatory fields is missing or the request is otherwise\n                      invalid\n\n.. _sec-api-access-groups-delete:\n\nDelete a group\n--------------\n\n.. http:delete:: /api/access/groups/(string:key)\n\n   Deletes a group.\n\n   Will return a :ref:`group list response <sec-api-access-datamodel-groups-list>` on success.\n\n   Requires the ``SETTINGS`` permission.\n\n   :status 200:       No error\n\n.. _sec-api-access-users:\n\nUsers\n=====\n\n.. _sec-api-access-users-list:\n\nRetrieve a list of users\n========================\n\n.. http:get:: /api/access/users\n\n   Retrieves a list of all registered users in OctoPrint.\n\n   Will return a :http:statuscode:`200` with a :ref:`user list response <sec-api-access-datamodel-users-userlistresponse>`\n   as body.\n\n   Requires the ``SETTINGS`` permission.\n\n   :status 200: No error\n\n.. _sec-api-access-users-retrieve:\n\nRetrieve a user\n---------------\n\n.. http:get:: /api/access/users/(string:username)\n\n   Retrieves information about a user.\n\n   Will return a :http:statuscode:`200` with a :ref:`user record <sec-api-datamodel-access>`\n   as body.\n\n   Requires either the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user which to retrieve\n   :status 200:     No error\n   :status 404:     Unknown user\n\n.. _sec-api-access-users-add:\n\nAdd a new user\n--------------\n\n.. http:post:: /api/access/users\n\n   Adds a user to OctoPrint.\n\n   Expects a :ref:`user registration request <sec-api-access-datamodel-users-adduserrequest>`\n   as request body.\n\n   Returns a list of registered users on success, see :ref:`Retrieve a list of users <sec-api-access-users-list>`.\n\n   Requires the ``SETTINGS`` permission.\n\n   :json name:     The user's name\n   :json password: The user's password\n   :json active:   Whether to activate the account (true) or not (false)\n   :json admin:    Whether to give the account admin rights (true) or not (false)\n   :status 200:    No error\n   :status 400:    If any of the mandatory fields is missing or the request is otherwise\n                   invalid\n   :status 409:    A user with the provided name does already exist\n\n.. _sec-api-access-users-modify:\n\nUpdate a user\n-------------\n\n.. http:put:: /api/access/users/(string:username)\n\n   Updates a user record.\n\n   Expects a :ref:`user update request <sec-api-access-datamodel-users-updateuserrequest>`\n   as request body.\n\n   Returns a list of registered users on success, see :ref:`Retrieve a list of users <sec-api-access-users-list>`.\n\n   Requires the ``SETTINGS`` permission.\n\n   :param username: Name of the user to update\n   :json admin:     Whether to mark the user as admin (true) or not (false), can be left out (no change)\n   :json active:    Whether to mark the account as activated (true) or deactivated (false), can be left out (no change)\n   :status 200:     No error\n   :status 404:     Unknown user\n\n.. _sec-api-access-users-delete:\n\nDelete a user\n-------------\n\n.. http:delete:: /api/access/users/(string:username)\n\n   Delete a user record.\n\n   Returns a list of registered users on success, see :ref:`Retrieve a list of users <sec-api-access-users-list>`.\n\n   Requires the ``SETTINGS`` permission.\n\n   :param username: Name of the user to delete\n   :status 200:     No error\n   :status 404:     Unknown user\n\n.. _sec-api-access-users-password:\n\nChange a user's password\n------------------------\n\n.. http:put:: /api/access/users/(string:username)/password\n\n   Changes the password of a user.\n\n   Expects a JSON object with a property ``password`` containing the new password as\n   request body. Without the ``SETTINGS`` permission, an additional property ``current``\n   is also required to be set on the request body, containing the user's current password.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user. Note that ``current``\n   will be evaluated even in presence of the ``SETTINGS`` permission, if set.\n\n   :param username: Name of the user to change the password for\n   :json password:  The new password to set\n   :json current:   The current password\n   :status 200:     No error\n   :status 400:     If the request doesn't contain a ``password`` property, doesn't\n                    contain a ``current`` property even though required, or the request\n                    is otherwise invalid\n   :status 403:     No admin rights, not logged in as the user or a current password\n                    mismatch\n   :status 404:     The user is unknown\n\n.. _sec-api-access-users-settings-get:\n\nGet a user's settings\n---------------------\n\n.. http:get:: /api/access/users/(string:username)/settings\n\n   Retrieves a user's settings.\n\n   Will return a :http:statuscode:`200` with a JSON object representing the user's\n   personal settings (if any) as body.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user to retrieve the settings for\n   :status 200:     No error\n   :status 403:     No admin rights and not logged in as the user\n   :status 404:     The user is unknown\n\n.. _sec-api-access-users-settings-set:\n\nUpdate a user's settings\n------------------------\n\n.. http:patch:: /api/access/users/(string:username)/settings\n\n   Updates a user's settings.\n\n   Expects a new settings JSON object to merge with the current settings as\n   request body.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user to retrieve the settings for\n   :status 204:     No error\n   :status 403:     No admin rights and not logged in as the user\n   :status 404:     The user is unknown\n\n.. _sec-api-access-users-apikey-generate:\n\nRegenerate a user's api key\n---------------------------\n\n.. http:post:: /api/access/users/(string:username)/apikey\n\n   Generates a new API key for the user.\n\n   Does not expect a body. Will return the generated API key as ``apikey``\n   property in the JSON object contained in the response body.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user to retrieve the settings for\n   :status 200:     No error\n   :status 403:     No admin rights and not logged in as the user\n   :status 404:     The user is unknown\n\n.. _sec-api-access-users-apikey-delete:\n\nDelete a user's api key\n-----------------------\n\n.. http:delete:: /api/access/users/(string:username)/apikey\n\n   Deletes a user's personal API key.\n\n   Requires the ``SETTINGS`` permission or to be logged in as the user.\n\n   :param username: Name of the user to retrieve the settings for\n   :status 204:     No error\n   :status 403:     No admin rights and not logged in as the user\n   :status 404:     The user is unknown\n\n.. _sec-api-access-datamodel:\n\nData model\n==========\n\n.. _sec-api-access-datamodel-permissions:\n\nPermissions\n-----------\n\n.. _sec-api-access-datamodel-permissions-list:\n\nPermission list response\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``permissions``\n     - 0..n\n     - List of :ref:`permission records <sec-api-datamodel-access-permissions>`\n     - The list of permissions\n\n\n.. _sec-api-access-datamodel-groups:\n\nGroups\n------\n\n.. _sec-api-access-datamodel-groups-list:\n\nGroup list response\n~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``groups``\n     - 0..n\n     - List of :ref:`group records <sec-api-datamodel-access-groups>`\n     - The list of groups\n\n.. _sec-api-access-datamodel-groups-addgrouprequest:\n\nGroup registration request\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``key``\n     - 1\n     - string\n     - The group's identifier\n   * - ``name``\n     - 1\n     - string\n     - The group's name\n   * - ``description``\n     - 0..1\n     - string\n     - The group's description. Set to empty if not provided.\n   * - ``permissions``\n     - 1..n\n     - List of string\n     - A list of identifier's of permissions to assign to the group\n   * - ``subgroups``\n     - 0..n\n     - List of string\n     - A list of identifier's of groups to assign to the group as subgroups\n   * - ``default``\n     - 0..1\n     - boolean\n     - Whether to assign the group to new users by default (true) or not (false, default value)\n\n.. _sec-api-access-datamodel-groups-updategrouprequest:\n\nGroup update request\n~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``description``\n     - 0..1\n     - string\n     - The group's description. Set to empty if not provided.\n   * - ``permissions``\n     - 1..n\n     - List of string\n     - A list of identifier's of permissions to assign to the group\n   * - ``subgroups``\n     - 0..n\n     - List of string\n     - A list of identifier's of groups to assign to the group as subgroups\n   * - ``default``\n     - 0..1\n     - boolean\n     - Whether to assign the group to new users by default (true) or not (false, default value)\n\n\n.. _sec-api-access-datamodel-users:\n\nUsers\n-----\n\n.. _sec-api-access-datamodel-users-userlistresponse:\n\nUser list response\n~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``users``\n     - 0..n\n     - List of :ref:`user records <sec-api-datamodel-access-users>`\n     - The list of users\n\n.. _sec-api-access-datamodel-users-adduserrequest:\n\nUser registration request\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``name``\n     - 1\n     - string\n     - The user's name\n   * - ``password``\n     - 1\n     - string\n     - The user's password\n   * - ``active``\n     - 1\n     - bool\n     - Whether to activate the account (true) or not (false)\n   * - ``groups``\n     - 0..n\n     - List of string\n     - A list of identifiers of groups to assign to the user\n   * - ``permissions``\n     - 0..n\n     - List of string\n     - A list of identifiers of permissions to assign to the user\n\n.. _sec-api-access-datamodel-users-updateuserrequest:\n\nUser update request\n~~~~~~~~~~~~~~~~~~~\n\n.. list-table::\n   :widths: 15 5 10 30\n   :header-rows: 1\n\n   * - Name\n     - Multiplicity\n     - Type\n     - Description\n   * - ``active``\n     - 0..1\n     - bool\n     - If present will set the user's active flag to the provided value. True for\n       activating the account, false for deactivating it.\n   * - ``groups``\n     - 0..n\n     - List of string\n     - A list of identifiers of groups to assign to the user\n   * - ``permissions``\n     - 0..n\n     - List of string\n     - A list of identifiers of permissions to assign to the user\n", "__author__ = \"Marc Hannappel <salandora@gmail.com>\"\n__license__ = \"GNU Affero General Public License http://www.gnu.org/licenses/agpl.html\"\n__copyright__ = \"Copyright (C) 2017 The OctoPrint Project - Released under terms of the AGPLv3 License\"\n\nfrom flask import abort, jsonify, request\nfrom flask_login import current_user\n\nimport octoprint.access.groups as groups\nimport octoprint.access.users as users\nfrom octoprint.access.permissions import Permissions\nfrom octoprint.server import SUCCESS, groupManager, userManager\nfrom octoprint.server.api import api, valid_boolean_trues\nfrom octoprint.server.util.flask import no_firstrun_access\n\n# ~~ permission api\n\n\n@api.route(\"/access/permissions\", methods=[\"GET\"])\ndef get_permissions():\n    return jsonify(permissions=[permission.as_dict() for permission in Permissions.all()])\n\n\n# ~~ group api\n\n\n@api.route(\"/access/groups\", methods=[\"GET\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef get_groups():\n    return jsonify(groups=list(map(lambda g: g.as_dict(), groupManager.groups)))\n\n\n@api.route(\"/access/groups\", methods=[\"POST\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef add_group():\n    if \"application/json\" not in request.headers[\"Content-Type\"]:\n        abort(400, description=\"Expected content-type JSON\")\n\n    data = request.get_json()\n\n    if \"key\" not in data:\n        abort(400, description=\"key is missing\")\n    if \"name\" not in data:\n        abort(400, description=\"name is missing\")\n    if \"permissions\" not in data:\n        abort(400, description=\"permissions are missing\")\n\n    key = data[\"key\"]\n    name = data[\"name\"]\n    description = data.get(\"description\", \"\")\n    permissions = data[\"permissions\"]\n    subgroups = data[\"subgroups\"]\n    default = data.get(\"default\", False)\n\n    try:\n        groupManager.add_group(\n            key,\n            name,\n            description=description,\n            permissions=permissions,\n            subgroups=subgroups,\n            default=default,\n        )\n    except groups.GroupAlreadyExists:\n        abort(409)\n    return get_groups()\n\n\n@api.route(\"/access/groups/<key>\", methods=[\"GET\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef get_group(key):\n    group = groupManager.find_group(key)\n    if group is not None:\n        return jsonify(group)\n    else:\n        abort(404)\n\n\n@api.route(\"/access/groups/<key>\", methods=[\"PUT\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef update_group(key):\n    if \"application/json\" not in request.headers[\"Content-Type\"]:\n        abort(400, description=\"Expected content-type JSON\")\n\n    data = request.get_json()\n\n    try:\n        kwargs = {}\n\n        if \"permissions\" in data:\n            kwargs[\"permissions\"] = data[\"permissions\"]\n\n        if \"subgroups\" in data:\n            kwargs[\"subgroups\"] = data[\"subgroups\"]\n\n        if \"default\" in data:\n            kwargs[\"default\"] = data[\"default\"] in valid_boolean_trues\n\n        if \"description\" in data:\n            kwargs[\"description\"] = data[\"description\"]\n\n        groupManager.update_group(key, **kwargs)\n\n        return get_groups()\n    except groups.GroupCantBeChanged:\n        abort(403)\n    except groups.UnknownGroup:\n        abort(404)\n\n\n@api.route(\"/access/groups/<key>\", methods=[\"DELETE\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef remove_group(key):\n    try:\n        groupManager.remove_group(key)\n        return get_groups()\n    except groups.UnknownGroup:\n        abort(404)\n    except groups.GroupUnremovable:\n        abort(403)\n\n\n# ~~ user api\n\n\n@api.route(\"/access/users\", methods=[\"GET\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef get_users():\n    return jsonify(users=list(map(lambda u: u.as_dict(), userManager.get_all_users())))\n\n\n@api.route(\"/access/users\", methods=[\"POST\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef add_user():\n    if \"application/json\" not in request.headers[\"Content-Type\"]:\n        abort(400, description=\"Expected content-type JSON\")\n\n    data = request.get_json()\n    if data is None:\n        abort(400, description=\"Malformed JSON body in request\")\n\n    if \"name\" not in data:\n        abort(400, description=\"name is missing\")\n    if \"password\" not in data:\n        abort(400, description=\"password is missing\")\n    if \"active\" not in data:\n        abort(400, description=\"active is missing\")\n\n    name = data[\"name\"]\n    password = data[\"password\"]\n    active = data[\"active\"] in valid_boolean_trues\n\n    groups = data.get(\"groups\", None)\n    permissions = data.get(\"permissions\", None)\n\n    try:\n        userManager.add_user(name, password, active, permissions, groups)\n    except users.UserAlreadyExists:\n        abort(409)\n    return get_users()\n\n\n@api.route(\"/access/users/<username>\", methods=[\"GET\"])\n@no_firstrun_access\ndef get_user(username):\n    if (\n        current_user is not None\n        and not current_user.is_anonymous\n        and (\n            current_user.get_name() == username\n            or current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        user = userManager.find_user(username)\n        if user is not None:\n            return jsonify(user)\n        else:\n            abort(404)\n    else:\n        abort(403)\n\n\n@api.route(\"/access/users/<username>\", methods=[\"PUT\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef update_user(username):\n    user = userManager.find_user(username)\n    if user is not None:\n        if \"application/json\" not in request.headers[\"Content-Type\"]:\n            abort(400, description=\"Expected content-type JSON\")\n\n        data = request.get_json()\n\n        if data is None:\n            abort(400, description=\"Malformed JSON body in request\")\n\n        # change groups\n        if \"groups\" in data:\n            groups = data[\"groups\"]\n            userManager.change_user_groups(username, groups)\n\n        # change permissions\n        if \"permissions\" in data:\n            permissions = data[\"permissions\"]\n            userManager.change_user_permissions(username, permissions)\n\n        # change activation\n        if \"active\" in data:\n            userManager.change_user_activation(\n                username, data[\"active\"] in valid_boolean_trues\n            )\n\n        return get_users()\n    else:\n        abort(404)\n\n\n@api.route(\"/access/users/<username>\", methods=[\"DELETE\"])\n@no_firstrun_access\n@Permissions.SETTINGS.require(403)\ndef remove_user(username):\n    try:\n        userManager.remove_user(username)\n        return get_users()\n    except users.UnknownUser:\n        abort(404)\n\n\n@api.route(\"/access/users/<username>/password\", methods=[\"PUT\"])\n@no_firstrun_access\ndef change_password_for_user(username):\n    if not userManager.enabled:\n        return jsonify(SUCCESS)\n\n    if (\n        current_user is not None\n        and not current_user.is_anonymous\n        and (\n            current_user.get_name() == username\n            or current_user.has_permission(Permissions.SETTINGS)\n        )\n    ):\n        if \"application/json\" not in request.headers[\"Content-Type\"]:\n            abort(400, description=\"Expected content-type JSON\")\n\n        data = request.get_json()\n\n        if data is None:\n            abort(400, description=\"Malformed JSON body in request\")\n\n        if \"password\" not in data or not data[\"password\"]:\n            abort(400, description=\"new password is missing\")\n\n        if not current_user.has_permission(Permissions.SETTINGS) or \"current\" in data:\n            if \"current\" not in data or not data[\"current\"]:\n                abort(400, description=\"current password is missing\")\n\n            if not userManager.check_password(username, data[\"current\"]):\n                abort(403, description=\"Invalid current password\")\n\n        try:\n            userManager.change_user_password(username, data[\"password\"])\n        except users.UnknownUser:\n            abort(404)\n\n        return jsonify(SUCCESS)\n    else:\n        abort(403)\n\n\n@api.route(\"/access/users/<username>/settings\", methods=[\"GET\"])\n@no_firstrun_access\ndef get_settings_for_user(username):\n    if (\n        current_user is None\n        or current_user.is_anonymous\n        or (\n            current_user.get_name() != username\n            and not current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        abort(403)\n\n    try:\n        return jsonify(userManager.get_all_user_settings(username))\n    except users.UnknownUser:\n        abort(404)\n\n\n@api.route(\"/access/users/<username>/settings\", methods=[\"PATCH\"])\n@no_firstrun_access\ndef change_settings_for_user(username):\n    if (\n        current_user is None\n        or current_user.is_anonymous\n        or (\n            current_user.get_name() != username\n            and not current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        abort(403)\n\n    data = request.get_json()\n\n    if data is None:\n        abort(400, description=\"Malformed JSON body in request\")\n\n    try:\n        userManager.change_user_settings(username, data)\n        return jsonify(SUCCESS)\n    except users.UnknownUser:\n        abort(404)\n\n\n@api.route(\"/access/users/<username>/apikey\", methods=[\"DELETE\"])\n@no_firstrun_access\ndef delete_apikey_for_user(username):\n    if (\n        current_user is not None\n        and not current_user.is_anonymous\n        and (\n            current_user.get_name() == username\n            or current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        try:\n            userManager.delete_api_key(username)\n        except users.UnknownUser:\n            abort(404)\n        return jsonify(SUCCESS)\n    else:\n        abort(403)\n\n\n@api.route(\"/access/users/<username>/apikey\", methods=[\"POST\"])\n@no_firstrun_access\ndef generate_apikey_for_user(username):\n    if not userManager.enabled:\n        return jsonify(SUCCESS)\n\n    if (\n        current_user is not None\n        and not current_user.is_anonymous\n        and (\n            current_user.get_name() == username\n            or current_user.has_permission(Permissions.ADMIN)\n        )\n    ):\n        try:\n            apikey = userManager.generate_api_key(username)\n        except users.UnknownUser:\n            abort(404)\n        return jsonify({\"apikey\": apikey})\n    else:\n        abort(403)\n\n\ndef _to_external_permissions(*permissions):\n    return list(map(lambda p: p.get_name(), permissions))\n\n\ndef _to_external_groups(*groups):\n    return list(map(lambda g: g.get_name(), groups))\n", "(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(\"OctoPrintAccessClient\", [\"OctoPrintClient\"], factory);\n    } else {\n        global.OctoPrintAccessClient = factory(global.OctoPrintClient);\n    }\n})(this, function (OctoPrintClient) {\n    var baseAccessUrl = \"api/access\";\n\n    //~~ permissions client api\n\n    var OctoPrintAccessPermissionsClient = function (access) {\n        this.access = access;\n        this.base = this.access.base;\n\n        var baseUrl = baseAccessUrl + \"/permissions\";\n        this.url = function () {\n            if (arguments.length) {\n                return baseUrl + \"/\" + Array.prototype.join.call(arguments, \"/\");\n            } else {\n                return baseUrl;\n            }\n        };\n    };\n\n    OctoPrintAccessPermissionsClient.prototype.list = function (opts) {\n        return this.base.get(this.url(), opts);\n    };\n\n    //~~ groups client api\n\n    var OctoPrintAccessGroupsClient = function (access) {\n        this.access = access;\n        this.base = this.access.base;\n\n        var baseUrl = baseAccessUrl + \"/groups\";\n        this.url = function () {\n            if (arguments.length) {\n                return baseUrl + \"/\" + Array.prototype.join.call(arguments, \"/\");\n            } else {\n                return baseUrl;\n            }\n        };\n    };\n\n    OctoPrintAccessGroupsClient.prototype.list = function (opts) {\n        return this.base.get(this.url(), opts);\n    };\n\n    OctoPrintAccessGroupsClient.prototype.add = function (group, opts) {\n        if (!group.key) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group key must be set\");\n        }\n        if (!group.name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group name must be set\");\n        }\n\n        var data = {\n            key: group.key,\n            name: group.name,\n            description: group.description,\n            permissions: group.permissions,\n            subgroups: group.subgroups,\n            default: group.default\n        };\n\n        return this.base.postJson(this.url(), data, opts);\n    };\n\n    OctoPrintAccessGroupsClient.prototype.get = function (key, opts) {\n        if (!key) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group key must be set\");\n        }\n\n        return this.base.get(this.url(key), opts);\n    };\n\n    OctoPrintAccessGroupsClient.prototype.update = function (group, opts) {\n        if (!group.key) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group key must be set\");\n        }\n\n        var data = {\n            description: group.hasOwnProperty(\"description\") ? group.description : \"\",\n            permissions: group.permissions,\n            subgroups: group.subgroups,\n            default: group.default\n        };\n        return this.base.putJson(this.url(group.key), data, opts);\n    };\n\n    OctoPrintAccessGroupsClient.prototype.delete = function (key, opts) {\n        if (!key) {\n            throw new OctoPrintClient.InvalidArgumentError(\"group key must be set\");\n        }\n\n        return this.base.delete(this.url(key), opts);\n    };\n\n    //~~ users client api\n\n    var OctoPrintAccessUsersClient = function (access) {\n        this.access = access;\n        this.base = this.access.base;\n\n        var baseUrl = baseAccessUrl + \"/users\";\n        this.url = function () {\n            if (arguments.length) {\n                return baseUrl + \"/\" + Array.prototype.join.call(arguments, \"/\");\n            } else {\n                return baseUrl;\n            }\n        };\n    };\n\n    OctoPrintAccessUsersClient.prototype.list = function (opts) {\n        return this.base.get(this.url(), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.add = function (user, opts) {\n        if (!user.name || !user.password) {\n            throw new OctoPrintClient.InvalidArgumentError(\n                \"Both user's name and password need to be set\"\n            );\n        }\n\n        var data = {\n            name: user.name,\n            password: user.password,\n            groups: user.hasOwnProperty(\"groups\") ? user.groups : [],\n            permissions: user.hasOwnProperty(\"permissions\") ? user.permissions : [],\n            active: user.hasOwnProperty(\"active\") ? !!user.active : true,\n            admin: user.hasOwnProperty(\"admin\") ? !!user.admin : false\n        };\n\n        return this.base.postJson(this.url(), data, opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.get = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.get(this.url(name), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.update = function (\n        name,\n        active,\n        admin,\n        permissions,\n        groups,\n        opts\n    ) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        var data = {\n            active: !!active,\n            groups: groups,\n            permissions: permissions,\n            admin: !!admin\n        };\n        return this.base.putJson(this.url(name), data, opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.delete = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.delete(this.url(name), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.changePassword = function (\n        name,\n        password,\n        oldpw,\n        opts\n    ) {\n        if (_.isObject(oldpw)) {\n            opts = oldpw;\n            oldpw = undefined;\n        }\n\n        if (!name || !password) {\n            throw new OctoPrintClient.InvalidArgumentError(\n                \"user name and new password must be set\"\n            );\n        }\n\n        var data = {\n            password: password\n        };\n        if (oldpw) {\n            data[\"current\"] = oldpw;\n        }\n        return this.base.putJson(this.url(name, \"password\"), data, opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.generateApiKey = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.postJson(this.url(name, \"apikey\"), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.resetApiKey = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.delete(this.url(name, \"apikey\"), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.getSettings = function (name, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        return this.base.get(this.url(name, \"settings\"), opts);\n    };\n\n    OctoPrintAccessUsersClient.prototype.saveSettings = function (name, settings, opts) {\n        if (!name) {\n            throw new OctoPrintClient.InvalidArgumentError(\"user name must be set\");\n        }\n\n        settings = settings || {};\n        return this.base.patchJson(this.url(name, \"settings\"), settings, opts);\n    };\n\n    var OctoPrintAccessClient = function (base) {\n        this.base = base;\n\n        this.permissions = new OctoPrintAccessPermissionsClient(this);\n        this.groups = new OctoPrintAccessGroupsClient(this);\n        this.users = new OctoPrintAccessUsersClient(this);\n    };\n    OctoPrintClient.registerComponent(\"access\", OctoPrintAccessClient);\n    return OctoPrintAccessClient;\n});\n", "$(function () {\n    function AccessViewModel(parameters) {\n        var access = this;\n\n        access.loginState = parameters[0];\n\n        var GROUP_ADMINS = \"admins\";\n        var GROUP_GUESTS = \"guests\";\n\n        //~~ Users ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        access.users = (function () {\n            var self = {};\n            // initialize list helper\n            self.listHelper = new ItemListHelper(\n                \"users\",\n                {\n                    name: function (a, b) {\n                        // sorts ascending\n                        if (a[\"name\"].toLocaleLowerCase() < b[\"name\"].toLocaleLowerCase())\n                            return -1;\n                        if (a[\"name\"].toLocaleLowerCase() > b[\"name\"].toLocaleLowerCase())\n                            return 1;\n                        return 0;\n                    }\n                },\n                {},\n                \"name\",\n                [],\n                [],\n                CONFIG_USERSPERPAGE\n            );\n\n            self.emptyUser = {name: \"\", active: false};\n\n            self.currentUser = ko.observable(self.emptyUser).extend({notify: \"always\"});\n\n            self.editor = {\n                name: ko.observable(undefined),\n                groups: ko.observableArray([]),\n                permissions: ko.observableArray([]),\n                password: ko.observable(undefined),\n                currentPassword: ko.observable(undefined),\n                repeatedPassword: ko.observable(undefined),\n                passwordMismatch: ko.pureComputed(function () {\n                    return self.editor.password() !== self.editor.repeatedPassword();\n                }),\n                currentPasswordMismatch: ko.observable(false),\n                apikey: ko.observable(undefined),\n                active: ko.observable(undefined),\n                permissionSelectable: function (permission) {\n                    return true;\n                },\n                permissionSelected: function (permission) {\n                    var index = self.editor.permissions().indexOf(permission);\n                    return index >= 0;\n                },\n                togglePermission: function (permission) {\n                    var permissions = self.editor.permissions();\n                    var index = permissions.indexOf(permission);\n                    if (index < 0) {\n                        permissions.push(permission);\n                    } else {\n                        permissions.splice(index, 1);\n                    }\n                    self.editor.permissions(permissions);\n                },\n                groupSelected: function (group) {\n                    var index = self.editor.groups().indexOf(group);\n                    return index >= 0;\n                },\n                toggleGroup: function (group) {\n                    var groups = self.editor.groups();\n                    var index = groups.indexOf(group);\n                    if (index < 0) {\n                        groups.push(group);\n                    } else {\n                        groups.splice(index, 1);\n                    }\n                    self.editor.groups(groups);\n                },\n                joinedGroupPermissions: function (group) {\n                    return access.permissionList(group);\n                },\n                header: ko.observable(undefined),\n                new: ko.observable(true),\n                confirm: undefined,\n                valid: ko.pureComputed(function () {\n                    return (\n                        self.editor.name() &&\n                        self.editor.name().trim() &&\n                        (!self.editor.new() ||\n                            (self.editor.password() &&\n                                self.editor.password().trim() &&\n                                !self.editor.passwordMismatch()))\n                    );\n                }),\n                dangerRestricted: function () {\n                    return false;\n                },\n                dangerRestrictedText: gettext(\n                    \"This user may not have dangerous permissions.\"\n                )\n            };\n\n            self.userEditorDialog = undefined;\n            self.changePasswordDialog = undefined;\n\n            self.currentUser.subscribe(function (newValue) {\n                if (newValue === undefined) {\n                    self.editor.name(undefined);\n                    self.editor.groups(access.groups.defaults.slice(0));\n                    self.editor.permissions([]);\n                    self.editor.active(true);\n                    self.editor.apikey(undefined);\n                    self.editor.header(gettext(\"Add user\"));\n                    self.editor.new(true);\n                    self.editor.confirm = self.confirmAddUser;\n                } else {\n                    self.editor.name(newValue.name);\n                    self.editor.groups(newValue.groups.slice(0));\n                    self.editor.permissions(newValue.permissions.slice(0));\n                    self.editor.active(newValue.active);\n                    self.editor.apikey(newValue.apikey);\n                    self.editor.header(\n                        _.sprintf(gettext('Edit user \"%(name)s\"'), {name: newValue.name})\n                    );\n                    self.editor.new(false);\n                    self.editor.confirm = self.confirmEditUser;\n                }\n                self.editor.password(undefined);\n                self.editor.repeatedPassword(undefined);\n                self.editor.currentPassword(undefined);\n                self.editor.currentPasswordMismatch(false);\n            });\n            self.editor.currentPassword.subscribe(function () {\n                self.editor.currentPasswordMismatch(false);\n            });\n\n            self.requestData = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN)) return;\n\n                return OctoPrint.access.users.list().done(self.fromResponse);\n            };\n\n            self.fromResponse = function (response) {\n                self.listHelper.updateItems(response.users);\n            };\n\n            self.showAddUserDialog = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.currentUser(undefined);\n\n                $('ul.nav-pills a[data-toggle=\"tab\"]:first', self.userEditorDialog).tab(\n                    \"show\"\n                );\n                self.userEditorDialog\n                    .modal({\n                        minHeight: function () {\n                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\n                        }\n                    })\n                    .css({\n                        \"margin-left\": function () {\n                            return -($(this).width() / 2);\n                        }\n                    });\n            };\n\n            self.confirmAddUser = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                var user = {\n                    name: self.editor.name(),\n                    password: self.editor.password(),\n                    groups: self.editor.groups(),\n                    permissions: self.editor.permissions(),\n                    active: self.editor.active()\n                };\n\n                self.addUser(user).done(function () {\n                    // close dialog\n                    self.currentUser(undefined);\n                    self.userEditorDialog.modal(\"hide\");\n                });\n            };\n\n            self.showEditUserDialog = function (user) {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                var process = function (user) {\n                    self.currentUser(user);\n\n                    $(\n                        'ul.nav-pills a[data-toggle=\"tab\"]:first',\n                        self.userEditorDialog\n                    ).tab(\"show\");\n                    self.userEditorDialog\n                        .modal({\n                            minHeight: function () {\n                                return Math.max(\n                                    $.fn.modal.defaults.maxHeight() - 80,\n                                    250\n                                );\n                            }\n                        })\n                        .css({\n                            \"margin-left\": function () {\n                                return -($(this).width() / 2);\n                            }\n                        });\n                };\n\n                OctoPrint.users\n                    .get(user.name)\n                    .done(function (data) {\n                        process(data);\n                    })\n                    .fail(function () {\n                        log.warn(\n                            \"Could not fetch current user data, proceeding with client side data copy\"\n                        );\n                        process(user);\n                    });\n            };\n\n            self.confirmEditUser = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                var user = self.currentUser();\n                user.active = self.editor.active();\n                user.groups = self.editor.groups();\n                user.permissions = self.editor.permissions();\n\n                self.updateUser(user).done(function () {\n                    // close dialog\n                    self.currentUser(undefined);\n                    self.userEditorDialog.modal(\"hide\");\n                });\n            };\n\n            self.showChangePasswordDialog = function (user) {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.currentUser(user);\n                self.changePasswordDialog.modal(\"show\");\n            };\n\n            self.confirmChangePassword = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.updatePassword(\n                    self.currentUser().name,\n                    self.editor.password(),\n                    self.editor.currentPassword()\n                )\n                    .done(function () {\n                        // close dialog\n                        self.currentUser(undefined);\n                        self.changePasswordDialog.modal(\"hide\");\n                    })\n                    .fail(function (xhr) {\n                        if (xhr.status === 403) {\n                            self.currentPasswordMismatch(true);\n                        }\n                    });\n            };\n\n            self.confirmGenerateApikey = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.generateApikey(self.currentUser().name).done(function (response) {\n                    self._updateApikey(response.apikey);\n                });\n            };\n\n            self.copyApikey = function () {\n                copyToClipboard(self.editor.apikey());\n            };\n\n            self._updateApikey = function (apikey) {\n                self.editor.apikey(apikey);\n                self.requestData();\n            };\n\n            self.confirmDeleteApikey = function () {\n                if (!CONFIG_ACCESS_CONTROL) return;\n\n                self.deleteApikey(self.currentUser().name).done(function () {\n                    self._updateApikey(undefined);\n                });\n            };\n\n            //~~ Framework\n\n            self.onStartup = function () {\n                self.userEditorDialog = $(\"#settings-usersEditorDialog\");\n                self.changePasswordDialog = $(\"#settings-usersDialogChangePassword\");\n            };\n\n            //~~ API calls\n\n            self.addUser = function (user) {\n                if (!user) {\n                    throw OctoPrint.InvalidArgumentError(\"user must be set\");\n                }\n                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN))\n                    return $.Deferred()\n                        .reject(\"You are not authorized to perform this action\")\n                        .promise();\n\n                return OctoPrint.access.users.add(user).done(self.fromResponse);\n            };\n\n            self.removeUser = function (user) {\n                if (!user) {\n                    throw OctoPrint.InvalidArgumentError(\"user must be set\");\n                }\n                if (!access.loginState.hasPermissionKo(access.permissions.ADMIN))\n                    return $.Deferred()\n                        .reject(\"You are not authorized to perform this action\")\n                        .promise();\n\n                if (user.name === access.loginState.username()) {\n                    // we do not allow to delete ourselves\n                    new PNotify({\n                        title: gettext(\"Not possible\"),\n                        text: gettext(\"You may not delete your own account.\"),\n                        type: \"error\"\n                    });\n                    return $.Deferred()\n                        .reject(\"You may not delete your own account\")\n                        .promise();\n                }\n\n                showConfirmationDialog({\n                    title: gettext(\"Are you sure?\"),\n                    message: _.sprintf(\n                        gettext('You are about to delete the user \"%(name)s\".'),\n                        {name: _.escape(user.name)}\n                    ),\n                    proceed: gettext(\"Delete\"),\n                    onproceed: function () {\n                        OctoPrint.access.users.delete(user.name).done(self.fromResponse);\n                    }\n                });\n            };\n\n            self.updateUser = function (user) {\n                if (!user) {\n                    throw OctoPrint.InvalidArgumentError(\"user must be set\");\n                }\n\n                return OctoPrint.access.users\n                    .update(\n                        user.name,\n                        user.active,\n                        user.admin,\n                        user.permissions,\n                        user.groups\n                    )\n                    .done(self.fromResponse);\n            };\n\n            self.updatePassword = function (username, password, current) {\n                return OctoPrint.access.users.changePassword(username, password, current);\n            };\n\n            self.generateApikey = function (username) {\n                return OctoPrint.access.users.generateApiKey(username).done(function () {\n                    self.requestData();\n                });\n            };\n\n            self.deleteApikey = function (username) {\n                return OctoPrint.access.users.resetApiKey(username);\n            };\n\n            return self;\n        })();\n\n        //~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        access.groups = (function () {\n            var self = {};\n            // initialize list helper\n            self.listHelper = new ItemListHelper(\n                \"groups\",\n                {\n                    name: function (a, b) {\n                        // sorts ascending\n                        if (a[\"name\"].toLocaleLowerCase() < b[\"name\"].toLocaleLowerCase())\n                            return -1;\n                        if (a[\"name\"].toLocaleLowerCase() > b[\"name\"].toLocaleLowerCase())\n                            return 1;\n                        return 0;\n                    }\n                },\n                {},\n                \"name\",\n                [],\n                [],\n                CONFIG_GROUPSPERPAGE\n            );\n\n            self.groupsList = self.listHelper.items; // Alias for easier reference\n            self.lookup = {};\n            self.defaults = [];\n\n            self.emptyGroup = {name: \"\"};\n\n            self.currentGroup = ko.observable(self.emptyGroup);\n\n            self.editor = {\n                key: ko.observable(undefined),\n                name: ko.observable(undefined),\n                description: ko.observable(undefined),\n                permissions: ko.observableArray([]),\n                subgroups: ko.observableArray([]),\n                default: ko.observable(false),\n                permissionSelectable: function (permission) {\n                    // guests may not get dangerous permissions\n                    return self.editor.key() !== GROUP_GUESTS || !permission.dangerous;\n                },\n                permissionSelected: function (permission) {\n                    var index = self.editor.permissions().indexOf(permission);\n                    return index >= 0;\n                },\n                togglePermission: function (permission) {\n                    var permissions = self.editor.permissions();\n                    var index = permissions.indexOf(permission);\n                    if (index < 0) {\n                        permissions.push(permission);\n                    } else {\n                        permissions.splice(index, 1);\n                    }\n                    self.editor.permissions(permissions);\n                },\n                subgroupSelectable: function (subgroup) {\n                    // guests may not get dangerous subgroups\n                    return (\n                        self.editor.key() !== subgroup.key &&\n                        (self.editor.key() !== GROUP_GUESTS || !subgroup.dangerous)\n                    );\n                },\n                subgroupSelected: function (subgroup) {\n                    var index = self.editor.subgroups().indexOf(subgroup);\n                    return index >= 0;\n                },\n                toggleSubgroup: function (subgroup) {\n                    var subgroups = self.editor.subgroups();\n                    var index = subgroups.indexOf(subgroup);\n                    if (index < 0) {\n                        subgroups.push(subgroup);\n                    } else {\n                        subgroups.splice(index, 1);\n                    }\n                    self.editor.subgroups(subgroups);\n                },\n                joinedGroupPermissions: function (group) {\n                    return access.permissionList(group);\n                },\n                header: ko.observable(undefined),\n                new: ko.observable(true),\n                confirm: undefined,\n                valid: ko.pureComputed(function () {\n                    return self.editor.name() && self.editor.name().trim();\n                }),\n                dangerRestricted: function () {\n                    return self.editor.key() === GROUP_GUESTS;\n                },\n                dangerRestrictedText: gettext(\n                    \"This group may not have dangerous permissions or subgroups.\"\n                )\n            };\n\n            self.groupEditorDialog = undefined;\n\n            // used to delete all the groups before registering new ones\n            self.groupsList.subscribe(\n                function (oldValue) {\n                    if (oldValue === undefined || oldValue.length === 0) return;\n\n                    oldValue.forEach(function (p) {\n                        delete self[p.key.toUpperCase()];\n                    });\n                },\n                null,\n                \"beforeChange\"\n            );\n\n            // used to register new groups\n            self.groupsList.subscribe(function (newValue) {\n                if (newValue === undefined) return;\n\n                newValue.forEach(function (g) {\n                    var needs = [];\n                    g.permissions.forEach(function (p) {\n                        for (var key in p.needs) {\n                            p.needs[key].forEach(function (value) {\n                                needs.push(access.permissions.need(key, value));\n                            });\n                        }\n                    });\n\n                    // if the permission has no need sets do not register it.\n                    if (needs.length > 0) {\n                        self.registerGroup(g.key.toUpperCase(), needs);\n                    }\n                });\n            });\n\n            self.registerGroup = function (name, group) {\n                Object.defineProperty(self, name, {\n                    value: group,\n                    enumerable: true,\n                    configurable: true\n                });\n            };\n\n            self.currentGroup.subscribe(function (newValue) {\n                if (newValue === undefined) {\n                    // group add\n                    self.editor.key(undefined);\n                    self.editor.name(undefined);\n                    self.editor.description(undefined);\n                    self.editor.permissions([]);\n                    self.editor.subgroups([]);\n                    self.editor.default(false);\n                    self.editor.header(gettext(\"Add group\"));\n                    self.editor.new(true);\n                    self.editor.confirm = self.confirmAddGroup;\n                } else {\n                    // group update\n                    self.editor.key(newValue.key);\n                    self.editor.name(newValue.name);\n                    self.editor.description(newValue.description);\n                    self.editor.permissions(newValue.permissions.slice(0));\n                    self.editor.subgroups(newValue.subgroups.slice(0));\n                    self.editor.default(newValue.default);\n                    self.editor.header(\n                        _.sprintf(gettext('Edit group \"%(name)s\"'), {name: newValue.name})\n                    );\n                    self.editor.new(false);\n                    self.editor.confirm = self.confirmEditGroup;\n                }\n            });\n\n            self.requestData = function () {\n                return OctoPrint.access.groups.list().done(self.fromResponse);\n            };\n\n            self.fromResponse = function (response) {\n                var lookup = {};\n                var defaults = [];\n                _.each(response.groups, function (group) {\n                    lookup[group.key] = group;\n                    if (group.default) {\n                        defaults.push(group.key);\n                    }\n                });\n                self.lookup = lookup;\n                self.defaults = defaults;\n                self.listHelper.updateItems(response.groups);\n            };\n\n            self.showAddGroupDialog = function () {\n                self.currentGroup(undefined);\n                $('ul.nav-pills a[data-toggle=\"tab\"]:first', self.groupEditorDialog).tab(\n                    \"show\"\n                );\n                self.groupEditorDialog\n                    .modal({\n                        minHeight: function () {\n                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\n                        }\n                    })\n                    .css({\n                        \"margin-left\": function () {\n                            return -($(this).width() / 2);\n                        }\n                    });\n            };\n\n            self.confirmAddGroup = function () {\n                var group = {\n                    key: self.editor\n                        .name()\n                        .toLowerCase()\n                        .replace(/[^a-z0-9_ ]/g, \"\")\n                        .replace(/ /g, \"_\"),\n                    name: self.editor.name(),\n                    description: self.editor.description(),\n                    permissions: self.editor.permissions(),\n                    subgroups: self.editor.subgroups(),\n                    default: self.editor.default()\n                };\n\n                self.addGroup(group).done(function () {\n                    // close dialog\n                    self.currentGroup(undefined);\n                    self.groupEditorDialog.modal(\"hide\");\n                });\n            };\n\n            self.showEditGroupDialog = function (group) {\n                if (!group.changeable) return;\n\n                self.currentGroup(group);\n                $('ul.nav-pills a[data-toggle=\"tab\"]:first', self.groupEditorDialog).tab(\n                    \"show\"\n                );\n                self.groupEditorDialog\n                    .modal({\n                        minHeight: function () {\n                            return Math.max($.fn.modal.defaults.maxHeight() - 80, 250);\n                        }\n                    })\n                    .css({\n                        \"margin-left\": function () {\n                            return -($(this).width() / 2);\n                        }\n                    });\n            };\n\n            self.confirmEditGroup = function () {\n                var group = self.currentGroup();\n\n                var data = {\n                    key: group.key,\n                    name: group.name,\n                    description: self.editor.description(),\n                    permissions: self.editor.permissions(),\n                    subgroups: self.editor.subgroups(),\n                    default: self.editor.default()\n                };\n\n                self.updateGroup(data).done(function () {\n                    // close dialog\n                    self.currentGroup(undefined);\n                    self.groupEditorDialog.modal(\"hide\");\n                });\n            };\n\n            //~~ Framework\n\n            self.onStartup = function () {\n                self.groupEditorDialog = $(\"#settings-groupsEditorDialog\");\n            };\n\n            //~~ API calls\n\n            self.addGroup = function (group) {\n                if (!group) {\n                    throw OctoPrint.InvalidArgumentError(\"group must be set\");\n                }\n\n                return OctoPrint.access.groups.add(group).done(self.fromResponse);\n            };\n\n            self.removeGroup = function (group) {\n                if (!group) {\n                    throw OctoPrint.InvalidArgumentError(\"group must be set\");\n                }\n\n                if (!group.removable) return;\n\n                showConfirmationDialog({\n                    title: gettext(\"Are you sure?\"),\n                    message: _.sprintf(\n                        gettext('You are about to delete the group \"%(name)s\".'),\n                        {name: _.escape(group.name)}\n                    ),\n                    proceed: gettext(\"Delete\"),\n                    onproceed: function () {\n                        OctoPrint.access.groups\n                            .delete(group.key)\n                            .done(function (response) {\n                                self.fromResponse(response);\n                                access.users.requestData();\n                            });\n                    }\n                });\n            };\n\n            self.updateGroup = function (group) {\n                if (!group) {\n                    throw OctoPrint.InvalidArgumentError(\"group must be set\");\n                }\n\n                return OctoPrint.access.groups.update(group).done(self.fromResponse);\n            };\n\n            return self;\n        })();\n\n        //~~ Permissions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        access.permissions = (function () {\n            var self = {};\n\n            self.need = function (method, value) {\n                return {method: method, value: value};\n            };\n            self.roleNeed = function (value) {\n                return self.need(\"role\", value);\n            };\n\n            self.permissionList = ko.observableArray([]);\n            self.lookup = {};\n\n            var registeredPermissions = [];\n            var registerPermission = function (key, permission) {\n                Object.defineProperty(self, key, {\n                    value: permission,\n                    enumerable: true,\n                    configurable: true\n                });\n                registeredPermissions.push(key);\n            };\n            var clearAllRegisteredPermissions = function () {\n                _.each(registeredPermissions, function (key) {\n                    delete self[key];\n                });\n                registeredPermissions = [];\n            };\n\n            self.initialize = function () {\n                clearAllRegisteredPermissions();\n\n                var permissionList = [];\n                var lookup = {};\n                _.each(PERMISSIONS, function (permission) {\n                    var needs = [];\n                    _.each(permission.needs, function (value, key) {\n                        needs.push(self.need(key, value));\n                    });\n\n                    if (needs.length > 0) {\n                        registerPermission(permission.key, needs);\n                    }\n\n                    if (!permission.combined) {\n                        permissionList.push(permission);\n                    }\n                    lookup[permission.key] = permission;\n                });\n\n                permissionList.sort(access.permissionComparator);\n                self.permissionList(permissionList);\n                self.lookup = lookup;\n            };\n\n            return self;\n        })();\n\n        //~~ helpers ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n        access.groupComparator = function (a, b) {\n            var nameA = a.name ? a.name.toUpperCase() : \"\";\n            var nameB = b.name ? b.name.toUpperCase() : \"\";\n\n            if (nameA < nameB) {\n                return -1;\n            } else if (nameA > nameB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        };\n\n        access.permissionComparator = function (a, b) {\n            var nameA = a.name ? a.name.toUpperCase() : \"\";\n            var nameB = b.name ? b.name.toUpperCase() : \"\";\n\n            var pluginA = a.plugin || \"\";\n            var pluginB = b.plugin || \"\";\n\n            var compA = pluginA + \":\" + nameA;\n            var compB = pluginB + \":\" + nameB;\n\n            if (compA < compB) {\n                return -1;\n            } else if (compA > compB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        };\n\n        // Maps the group names into a comma separated list\n        access.groupList = function (data) {\n            if (data.groups === undefined) return \"\";\n\n            var mappedGroups = _.filter(\n                _.map(data.groups, function (g) {\n                    return access.groups.lookup[g];\n                }),\n                function (g) {\n                    return g !== undefined;\n                }\n            );\n            mappedGroups.sort(access.groupComparator);\n            return _.map(mappedGroups, function (g) {\n                return g.name;\n            }).join(\", \");\n        };\n\n        // Maps the sub group names into a comma separated list\n        access.subgroupList = function (data) {\n            if (data.subgroups === undefined) return \"\";\n\n            var mappedGroups = _.filter(\n                _.map(data.subgroups, function (g) {\n                    return access.groups.lookup[g];\n                }),\n                function (g) {\n                    return g !== undefined;\n                }\n            );\n            mappedGroups.sort(access.groupComparator);\n            return _.map(mappedGroups, function (g) {\n                return g.name;\n            }).join(\", \");\n        };\n\n        // Maps the permission names into a comma separated list\n        access.permissionList = function (data) {\n            if (!data || data.permissions === undefined) return \"\";\n\n            var mappedPermissions = _.filter(\n                _.map(data.permissions, function (p) {\n                    return access.permissions.lookup[p];\n                }),\n                function (p) {\n                    return p !== undefined;\n                }\n            );\n            mappedPermissions.sort(access.permissionComparator);\n            return _.map(mappedPermissions, function (p) {\n                return p.name;\n            }).join(\", \");\n        };\n\n        //~~ API Calls\n        access.onStartup = function () {\n            access.groups.onStartup();\n            access.users.onStartup();\n        };\n\n        access.onServerConnect = function () {\n            access.permissions.initialize();\n        };\n\n        access.onServerReconnect = function () {\n            access.permissions.initialize();\n        };\n\n        access.onUserPermissionsChanged =\n            access.onUserLoggedIn =\n            access.onUserLoggedOut =\n                function (user) {\n                    if (access.loginState.hasPermission(access.permissions.SETTINGS)) {\n                        access.groups.requestData().done(function () {\n                            access.users.requestData();\n                        });\n                    }\n                };\n    }\n\n    OCTOPRINT_VIEWMODELS.push([AccessViewModel, [\"loginStateViewModel\"], []]);\n});\n", "$(function () {\n    function UserSettingsViewModel(parameters) {\n        var self = this;\n\n        self.loginState = parameters[0];\n        self.access = parameters[1];\n\n        self.users = self.access.users;\n\n        self.userSettingsDialog = undefined;\n\n        var auto_locale = {\n            language: \"_default\",\n            display: gettext(\"Site default\"),\n            english: undefined\n        };\n        self.locales = ko.observableArray(\n            [auto_locale].concat(\n                _.sortBy(_.values(AVAILABLE_LOCALES), function (n) {\n                    return n.display;\n                })\n            )\n        );\n        self.locale_languages = _.keys(AVAILABLE_LOCALES);\n\n        self.access_password = ko.observable(undefined);\n        self.access_repeatedPassword = ko.observable(undefined);\n        self.access_currentPassword = ko.observable(undefined);\n        self.access_currentPasswordMismatch = ko.observable(false);\n        self.access_apikey = ko.observable(undefined);\n        self.interface_language = ko.observable(undefined);\n\n        self.currentUser = ko.observable(undefined);\n        self.currentUser.subscribe(function (newUser) {\n            self.access_password(undefined);\n            self.access_repeatedPassword(undefined);\n            self.access_currentPassword(undefined);\n            self.access_currentPasswordMismatch(false);\n            self.access_apikey(undefined);\n            self.interface_language(\"_default\");\n\n            if (newUser !== undefined) {\n                self.access_apikey(newUser.apikey);\n                if (\n                    newUser.settings.hasOwnProperty(\"interface\") &&\n                    newUser.settings.interface.hasOwnProperty(\"language\")\n                ) {\n                    self.interface_language(newUser.settings.interface.language);\n                }\n            }\n        });\n        self.access_currentPassword.subscribe(function () {\n            self.access_currentPasswordMismatch(false);\n        });\n\n        self.passwordMismatch = ko.pureComputed(function () {\n            return self.access_password() !== self.access_repeatedPassword();\n        });\n\n        self.show = function (user) {\n            if (!CONFIG_ACCESS_CONTROL) return;\n\n            if (user === undefined) {\n                user = self.loginState.currentUser();\n            }\n\n            var process = function (user) {\n                self.currentUser(user);\n                self.userSettingsDialog.modal(\"show\");\n            };\n\n            // make sure we have the current user data, see #2534\n            OctoPrint.access.users\n                .get(user.name)\n                .done(function (data) {\n                    process(data);\n                })\n                .fail(function () {\n                    log.warn(\n                        \"Could not fetch current user data, proceeding with client side data copy\"\n                    );\n                    process(user);\n                });\n        };\n\n        self.save = function () {\n            if (!CONFIG_ACCESS_CONTROL) return;\n\n            self.userSettingsDialog.trigger(\"beforeSave\");\n\n            function process() {\n                var settings = {\n                    interface: {\n                        language: self.interface_language()\n                    }\n                };\n                self.updateSettings(self.currentUser().name, settings).done(function () {\n                    // close dialog\n                    self.currentUser(undefined);\n                    self.userSettingsDialog.modal(\"hide\");\n                    self.loginState.reloadUser();\n                });\n            }\n\n            if (self.access_password() && !self.passwordMismatch()) {\n                self.users\n                    .updatePassword(\n                        self.currentUser().name,\n                        self.access_password(),\n                        self.access_currentPassword()\n                    )\n                    .done(function () {\n                        process();\n                    })\n                    .fail(function (xhr) {\n                        if (xhr.status === 403) {\n                            self.access_currentPasswordMismatch(true);\n                        }\n                    });\n            } else {\n                process();\n            }\n        };\n\n        self.copyApikey = function () {\n            copyToClipboard(self.access_apikey());\n        };\n\n        self.generateApikey = function () {\n            if (!CONFIG_ACCESS_CONTROL) return;\n\n            var generate = function () {\n                self.users\n                    .generateApikey(self.currentUser().name)\n                    .done(function (response) {\n                        self.access_apikey(response.apikey);\n                    });\n            };\n\n            if (self.access_apikey()) {\n                showConfirmationDialog(\n                    gettext(\n                        \"This will generate a new API Key. The old API Key will cease to function immediately.\"\n                    ),\n                    generate\n                );\n            } else {\n                generate();\n            }\n        };\n\n        self.deleteApikey = function () {\n            if (!CONFIG_ACCESS_CONTROL) return;\n            if (!self.access_apikey()) return;\n\n            showConfirmationDialog(\n                gettext(\n                    \"This will delete the API Key. It will cease to to function immediately.\"\n                ),\n                function () {\n                    self.users.deleteApikey(self.currentUser().name).done(function () {\n                        self.access_apikey(undefined);\n                    });\n                }\n            );\n        };\n\n        self.updateSettings = function (username, settings) {\n            return OctoPrint.access.users.saveSettings(username, settings);\n        };\n\n        self.saveEnabled = function () {\n            return !self.passwordMismatch();\n        };\n\n        self.onStartup = function () {\n            self.userSettingsDialog = $(\"#usersettings_dialog\");\n        };\n\n        self.onAllBound = function (allViewModels) {\n            self.userSettingsDialog.on(\"show\", function () {\n                callViewModels(allViewModels, \"onUserSettingsShown\");\n            });\n            self.userSettingsDialog.on(\"hidden\", function () {\n                callViewModels(allViewModels, \"onUserSettingsHidden\");\n            });\n            self.userSettingsDialog.on(\"beforeSave\", function () {\n                callViewModels(allViewModels, \"onUserSettingsBeforeSave\");\n            });\n        };\n    }\n\n    OCTOPRINT_VIEWMODELS.push({\n        construct: UserSettingsViewModel,\n        dependencies: [\"loginStateViewModel\", \"accessViewModel\"],\n        elements: [\"#usersettings_dialog\"]\n    });\n});\n", "<form class=\"form-horizontal\" onsubmit=\"return false;\">\n    <fieldset>\n        <legend>{{ _('Password') }}</legend>\n        <p>\n            {{ _('If you do not wish to change your password, just leave the following fields empty.') }}\n        </p>\n        <div class=\"control-group\" data-bind=\"css: {error: access_currentPasswordMismatch()}\">\n            <label class=\"control-label\" for=\"userSettings-access_currentPassword\">{{ _('Current Password') }}</label>\n            <div class=\"controls\">\n                <input type=\"password\" class=\"input-block-level\" id=\"userSettings-access_currentPassword\" data-bind=\"value: access_currentPassword, valueUpdate: 'afterkeydown'\" required>\n                <span class=\"help-inline\" data-bind=\"visible: access_currentPasswordMismatch()\">{{ _('Passwords do not match') }}</span>\n            </div>\n        </div>\n        <div class=\"control-group\">\n            <label class=\"control-label\" for=\"userSettings-access_password\">{{ _('New Password') }}</label>\n            <div class=\"controls\">\n                <input type=\"password\" class=\"input-block-level\" id=\"userSettings-access_password\" data-bind=\"value: access_password\" required>\n            </div>\n        </div>\n        <div class=\"control-group\" data-bind=\"css: {error: passwordMismatch()}\">\n            <label class=\"control-label\" for=\"userSettings-access_repeatedPassword\">{{ _('Repeat Password') }}</label>\n            <div class=\"controls\">\n                <input type=\"password\" class=\"input-block-level\" id=\"userSettings-access_repeatedPassword\" data-bind=\"value: access_repeatedPassword, valueUpdate: 'afterkeydown'\" required>\n                <span class=\"help-inline\" data-bind=\"visible: passwordMismatch()\">{{ _('Passwords do not match') }}</span>\n            </div>\n        </div>\n    </fieldset>\n    <fieldset>\n        <legend>{{ _('API Key') }}</legend>\n        <div class=\"control-group\">\n            <label class=\"control-label\" for=\"userSettings-access_apikey\">{{ _('Current API Key') }}</label>\n            <div class=\"controls\">\n                <div class=\"input-append input-block-level\">\n                    <input type=\"text\" readonly=\"readonly\" id=\"userSettings-access_apikey\" data-bind=\"value: access_apikey, attr: {placeholder: '{{ _('N/A')|esq }}'}\">\n                    <a class=\"btn add-on\" title=\"Copy API Key to clipboard\" data-bind=\"click: copyApikey, css: {'disabled': !access_apikey()}\"><i class=\"fas fa-copy\"></i></a>\n                    <a class=\"btn add-on\" title=\"Generate new API Key\" data-bind=\"click: generateApikey\"><i class=\"fas fa-sync\"></i></a>\n                    <a class=\"btn btn-danger add-on\" title=\"Delete API Key\" data-bind=\"click: deleteApikey, css: {'disabled': !access_apikey()}\"><i class=\"far fa-trash-alt\"></i></a>\n                </div>\n                <span class=\"help-block\">{{ _('Please note that changes to the API key are applied immediately, without having to \"Confirm\" first.') }}</span>\n            </div>\n        </div>\n        <div class=\"control-group\" data-bind=\"visible: access_apikey\">\n            <label class=\"control-label\">{{ _('QR Code') }}</label>\n            <div class=\"controls\">\n                <div data-bind=\"qrcode: {text: access_apikey, size: 150}\"></div>\n            </div>\n        </div>\n    </fieldset>\n</form>\n"], "filenames": ["docs/api/access.rst", "src/octoprint/server/api/access.py", "src/octoprint/static/js/app/client/access.js", "src/octoprint/static/js/app/viewmodels/access.js", "src/octoprint/static/js/app/viewmodels/usersettings.js", "src/octoprint/templates/dialogs/usersettings/access.jinja2"], "buggy_code_start_loc": [241, 244, 178, 42, 27, 6], "buggy_code_end_loc": [251, 256, 189, 354, 103, 6], "fixing_code_start_loc": [241, 244, 179, 43, 28, 7], "fixing_code_end_loc": [257, 266, 199, 369, 123, 14], "type": "CWE-620", "message": "Unverified Password Change in GitHub repository octoprint/octoprint prior to 1.8.3.", "other": {"cve": {"id": "CVE-2022-2930", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-22T12:15:09.537", "lastModified": "2022-08-23T17:56:40.360", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unverified Password Change in GitHub repository octoprint/octoprint prior to 1.8.3."}, {"lang": "es", "value": "Un Cambio de Contrase\u00f1a no Verificado en el repositorio de GitHub octoprint/octoprint versiones anteriores a 1.8.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-620"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:octoprint:octoprint:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.8.3", "matchCriteriaId": "900F81F7-9FC4-44CE-ABD6-1E82DC120B4B"}]}]}], "references": [{"url": "https://github.com/octoprint/octoprint/commit/1453076ee3e47fcab2dc73664ec2d61d3ef7fc4f", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/da6745e4-7bcc-4e9a-9e96-0709ec9f2477", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/octoprint/octoprint/commit/1453076ee3e47fcab2dc73664ec2d61d3ef7fc4f"}}