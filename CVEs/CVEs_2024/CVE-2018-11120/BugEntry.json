{"buggy_code": ["<?php\n/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once(\"./Services/COPage/classes/class.ilPCParagraph.php\");\n\n/**\n * Class ilPCSourceCode\n *\n * Paragraph of ilPageObject\n *\n * @author Roland K\u00fcstermann\n * @author Alex Killing <alex.killing@gmx.de>\n * @version $Id$\n *\n * @ingroup ServicesCOPage\n */\nclass ilPCSourceCode extends ilPCParagraph\n{\n\t/**\n\t* Init page content component.\n\t*/\n\tfunction init()\n\t{\n\t\t$this->setType(\"src\");\n\t}\n\t\n\t/**\n\t * Get lang vars needed for editing\n\t * @return array array of lang var keys\n\t */\n\tstatic function getLangVars()\n\t{\n\t\treturn array(\"ed_insert_code\", \"pc_code\");\n\t}\n\n\t/**\n\t * Modify page content after xsl\n\t *\n\t * @param string $a_output\n\t * @return string\n\t */\n\tfunction modifyPageContentPostXsl($a_output, $outputmode = \"presentation\")\n\t{\n\t\t$dom = $this->getPage()->getDom();\n\n\t\t$xpc = xpath_new_context($dom);\n\t\t$path = \"//Paragraph\"; //\"[@Characteristic = 'Code']\";\n\t\t$res = & xpath_eval($xpc, $path);\n\t\tfor($i = 0; $i < count($res->nodeset); $i++)\n\t\t{\n\t\t\t$context_node = $res->nodeset[$i];\n\t\t\t$char = $context_node->get_attribute('Characteristic');\n\n\t\t\tif ($char != \"Code\")\n\t\t\t\tcontinue;\n\n\t\t\t$n = $context_node->parent_node();\n\t\t\t$char = $context_node->get_attribute('Characteristic');\n\t\t\t$subchar = $context_node->get_attribute('SubCharacteristic');\n\t\t\t$showlinenumbers = $context_node->get_attribute('ShowLineNumbers');\n\t\t\t$downloadtitle = $context_node->get_attribute('DownloadTitle');\n\t\t\t$autoindent = $context_node->get_attribute('AutoIndent');\n\n\t\t\t$content = \"\";\n\n\t\t\t// get XML Content\n\t\t\t$childs = $context_node->child_nodes();\n\n\t\t\tfor($j=0; $j<count($childs); $j++)\n\t\t\t{\n\t\t\t\t$content .= $dom->dump_node($childs[$j]);\n\t\t\t}\n\n\t\t\twhile ($context_node->has_child_nodes ())\n\t\t\t{\n\t\t\t\t$node_del = $context_node->first_child ();\n\t\t\t\t$context_node->remove_child ($node_del);\n\t\t\t}\n\n\t\t\t$content = str_replace(\"<br />\", \"<br/>\", utf8_decode($content) );\n\t\t\t$content = str_replace(\"<br/>\", \"\\n\", $content);\n\t\t\t$rownums = count(explode(\"\\n\",$content));\n\n\t\t\t$plain_content = html_entity_decode($content);\n\t\t\t$plain_content = preg_replace_callback(\n                \"/\\&#x([1-9a-f]{2});?/is\",\n                function($hit) {\n                    return chr(base_convert($hit[1], 16, 10));\n                },\n                $plain_content\n            );\n\t\t\t$plain_content = preg_replace_callback(\n                \"/\\&#(\\d+);?/is\",\n                function($hit) {\n                    return chr($hit[1]);\n                },\n                $plain_content\n            );\n\t\t\t$content = utf8_encode($this->highlightText($plain_content, $subchar, $autoindent));\n\n\t\t\t$content = str_replace(\"&amp;lt;\", \"&lt;\", $content);\n\t\t\t$content = str_replace(\"&amp;gt;\", \"&gt;\", $content);\n//\t\t\t$content = str_replace(\"&\", \"&amp;\", $content);\n//var_dump($content);\n\t\t\t$rows  \t = \"<tr valign=\\\"top\\\">\";\n\t\t\t$rownumbers = \"\";\n\t\t\t$linenumbers= \"\";\n\n\t\t\t//if we have to show line numbers\n\t\t\tif (strcmp($showlinenumbers,\"y\")==0)\n\t\t\t{\n\t\t\t\t$linenumbers = \"<td nowrap=\\\"nowrap\\\" class=\\\"ilc_LineNumbers\\\" >\";\n\t\t\t\t$linenumbers .= \"<pre class=\\\"ilc_Code\\\">\";\n\n\t\t\t\tfor ($j=0; $j < $rownums; $j++)\n\t\t\t\t{\n\t\t\t\t\t$indentno      = strlen($rownums) - strlen($j+1) + 2;\n\t\t\t\t\t$rownumeration = ($j+1);\n\t\t\t\t\t$linenumbers   .= \"<span class=\\\"ilc_LineNumber\\\">$rownumeration</span>\";\n\t\t\t\t\tif ($j < $rownums-1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$linenumbers .= \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$linenumbers .= \"</pre>\";\n\t\t\t\t$linenumbers .= \"</td>\";\n\t\t\t}\n\n\t\t\t$rows .= $linenumbers.\"<td class=\\\"ilc_Sourcecode\\\"><pre class=\\\"ilc_Code\\\">\".$content.\"</pre></td>\";\n\t\t\t$rows .= \"</tr>\";\n\n\t\t\t// fix for ie explorer which is not able to produce empty line feeds with <br /><br />;\n\t\t\t// workaround: add a space after each br.\n\t\t\t$newcontent = str_replace(\"\\n\", \"<br/>\",$rows);\n\t\t\t// fix for IE\n\t\t\t$newcontent = str_replace(\"<br/><br/>\", \"<br/> <br/>\",$newcontent);\n\t\t\t// falls drei hintereinander...\n\t\t\t$newcontent = str_replace(\"<br/><br/>\", \"<br/> <br/>\",$newcontent);\n\n\t\t\t// workaround for preventing template engine\n\t\t\t// from hiding paragraph text that is enclosed\n\t\t\t// in curly brackets (e.g. \"{a}\", see ilLMEditorGUI::executeCommand())\n\t\t\t$newcontent = str_replace(\"{\", \"&#123;\", $newcontent);\n\t\t\t$newcontent = str_replace(\"}\", \"&#125;\", $newcontent);\n\n//echo htmlentities($newcontent);\n\t\t\t$a_output = str_replace(\"[[[[[Code;\".($i + 1).\"]]]]]\", $newcontent, $a_output);\n\n\t\t\tif ($outputmode != \"presentation\" && is_object($this->getPage()->getOfflineHandler())\n\t\t\t\t&& trim($downloadtitle) != \"\")\n\t\t\t{\n\t\t\t\t// call code handler for offline versions\n\t\t\t\t$this->getPage()->getOfflineHandler()->handleCodeParagraph($this->getPage()->getId(), $i + 1, $downloadtitle, $plain_content);\n\t\t\t}\n\t\t}\n\n\t\treturn $a_output;\n\t}\n\n\t/**\n\t * Highligths Text with given ProgLang\n\t */\n\tfunction highlightText($a_text, $proglang, $autoindent = \"\")\n\t{\n\n\t\tinclude_once(\"./Services/UIComponent/SyntaxHighlighter/classes/class.ilSyntaxHighlighter.php\");\n\t\t$proglang = ilSyntaxHighlighter::getNewLanguageId($proglang);\n\t\tif (ilSyntaxHighlighter::isSupported($proglang))\n\t\t{\n\t\t\t$highl = ilSyntaxHighlighter::getInstance($proglang);\n\t\t\t$a_text = $highl->highlight($a_text);\n\t\t}\n\t\treturn $a_text;\n\t}\n\n\tfunction hasHighlighter ($hfile_ext)\n\t{\n\t\treturn file_exists (\"Services/COPage/syntax_highlight/php/HFile/HFile_\".$hfile_ext.\".php\");\n\t}\n\n}\n?>\n"], "fixing_code": ["<?php\n/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once(\"./Services/COPage/classes/class.ilPCParagraph.php\");\n\n/**\n * Class ilPCSourceCode\n *\n * Paragraph of ilPageObject\n *\n * @author Roland K\u00fcstermann\n * @author Alex Killing <alex.killing@gmx.de>\n * @version $Id$\n *\n * @ingroup ServicesCOPage\n */\nclass ilPCSourceCode extends ilPCParagraph\n{\n\t/**\n\t* Init page content component.\n\t*/\n\tfunction init()\n\t{\n\t\t$this->setType(\"src\");\n\t}\n\t\n\t/**\n\t * Get lang vars needed for editing\n\t * @return array array of lang var keys\n\t */\n\tstatic function getLangVars()\n\t{\n\t\treturn array(\"ed_insert_code\", \"pc_code\");\n\t}\n\n\t/**\n\t * Modify page content after xsl\n\t *\n\t * @param string $a_output\n\t * @return string\n\t */\n\tfunction modifyPageContentPostXsl($a_output, $outputmode = \"presentation\")\n\t{\n\t\t$dom = $this->getPage()->getDom();\n\n\t\t$xpc = xpath_new_context($dom);\n\t\t$path = \"//Paragraph\"; //\"[@Characteristic = 'Code']\";\n\t\t$res = & xpath_eval($xpc, $path);\n\t\tfor($i = 0; $i < count($res->nodeset); $i++)\n\t\t{\n\t\t\t$context_node = $res->nodeset[$i];\n\t\t\t$char = $context_node->get_attribute('Characteristic');\n\n\t\t\tif ($char != \"Code\")\n\t\t\t\tcontinue;\n\n\t\t\t$n = $context_node->parent_node();\n\t\t\t$char = $context_node->get_attribute('Characteristic');\n\t\t\t$subchar = $context_node->get_attribute('SubCharacteristic');\n\t\t\t$showlinenumbers = $context_node->get_attribute('ShowLineNumbers');\n\t\t\t$downloadtitle = $context_node->get_attribute('DownloadTitle');\n\t\t\t$autoindent = $context_node->get_attribute('AutoIndent');\n\n\t\t\t$content = \"\";\n\n\t\t\t// get XML Content\n\t\t\t$childs = $context_node->child_nodes();\n\n\t\t\tfor($j=0; $j<count($childs); $j++)\n\t\t\t{\n\t\t\t\t$content .= $dom->dump_node($childs[$j]);\n\t\t\t}\n\n\t\t\twhile ($context_node->has_child_nodes ())\n\t\t\t{\n\t\t\t\t$node_del = $context_node->first_child ();\n\t\t\t\t$context_node->remove_child ($node_del);\n\t\t\t}\n\n\t\t\t$content = str_replace(\"<br />\", \"<br/>\", utf8_decode($content) );\n\t\t\t$content = str_replace(\"<br/>\", \"\\n\", $content);\n\t\t\t$rownums = count(explode(\"\\n\",$content));\n\n\t\t\t// see #23028\n\t\t\t//$plain_content = html_entity_decode($content);\n\t\t\t$plain_content = $content;\n\n\t\t\t$plain_content = preg_replace_callback(\n                \"/\\&#x([1-9a-f]{2});?/is\",\n                function($hit) {\n                    return chr(base_convert($hit[1], 16, 10));\n                },\n                $plain_content\n            );\n\t\t\t$plain_content = preg_replace_callback(\n                \"/\\&#(\\d+);?/is\",\n                function($hit) {\n                    return chr($hit[1]);\n                },\n                $plain_content\n            );\n\t\t\t$content = utf8_encode($this->highlightText($plain_content, $subchar, $autoindent));\n\n\t\t\t$content = str_replace(\"&amp;lt;\", \"&lt;\", $content);\n\t\t\t$content = str_replace(\"&amp;gt;\", \"&gt;\", $content);\n//\t\t\t$content = str_replace(\"&\", \"&amp;\", $content);\n//var_dump($content);\n\t\t\t$rows  \t = \"<tr valign=\\\"top\\\">\";\n\t\t\t$rownumbers = \"\";\n\t\t\t$linenumbers= \"\";\n\n\t\t\t//if we have to show line numbers\n\t\t\tif (strcmp($showlinenumbers,\"y\")==0)\n\t\t\t{\n\t\t\t\t$linenumbers = \"<td nowrap=\\\"nowrap\\\" class=\\\"ilc_LineNumbers\\\" >\";\n\t\t\t\t$linenumbers .= \"<pre class=\\\"ilc_Code\\\">\";\n\n\t\t\t\tfor ($j=0; $j < $rownums; $j++)\n\t\t\t\t{\n\t\t\t\t\t$indentno      = strlen($rownums) - strlen($j+1) + 2;\n\t\t\t\t\t$rownumeration = ($j+1);\n\t\t\t\t\t$linenumbers   .= \"<span class=\\\"ilc_LineNumber\\\">$rownumeration</span>\";\n\t\t\t\t\tif ($j < $rownums-1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$linenumbers .= \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$linenumbers .= \"</pre>\";\n\t\t\t\t$linenumbers .= \"</td>\";\n\t\t\t}\n\n\t\t\t$rows .= $linenumbers.\"<td class=\\\"ilc_Sourcecode\\\"><pre class=\\\"ilc_Code\\\">\".$content.\"</pre></td>\";\n\t\t\t$rows .= \"</tr>\";\n\n\t\t\t// fix for ie explorer which is not able to produce empty line feeds with <br /><br />;\n\t\t\t// workaround: add a space after each br.\n\t\t\t$newcontent = str_replace(\"\\n\", \"<br/>\",$rows);\n\t\t\t// fix for IE\n\t\t\t$newcontent = str_replace(\"<br/><br/>\", \"<br/> <br/>\",$newcontent);\n\t\t\t// falls drei hintereinander...\n\t\t\t$newcontent = str_replace(\"<br/><br/>\", \"<br/> <br/>\",$newcontent);\n\n\t\t\t// workaround for preventing template engine\n\t\t\t// from hiding paragraph text that is enclosed\n\t\t\t// in curly brackets (e.g. \"{a}\", see ilLMEditorGUI::executeCommand())\n\t\t\t$newcontent = str_replace(\"{\", \"&#123;\", $newcontent);\n\t\t\t$newcontent = str_replace(\"}\", \"&#125;\", $newcontent);\n\n//echo htmlentities($newcontent);\n\t\t\t$a_output = str_replace(\"[[[[[Code;\".($i + 1).\"]]]]]\", $newcontent, $a_output);\n\n\t\t\tif ($outputmode != \"presentation\" && is_object($this->getPage()->getOfflineHandler())\n\t\t\t\t&& trim($downloadtitle) != \"\")\n\t\t\t{\n\t\t\t\t// call code handler for offline versions\n\t\t\t\t$this->getPage()->getOfflineHandler()->handleCodeParagraph($this->getPage()->getId(), $i + 1, $downloadtitle, $plain_content);\n\t\t\t}\n\t\t}\n\n\t\treturn $a_output;\n\t}\n\n\t/**\n\t * Highligths Text with given ProgLang\n\t */\n\tfunction highlightText($a_text, $proglang, $autoindent = \"\")\n\t{\n\n\t\tinclude_once(\"./Services/UIComponent/SyntaxHighlighter/classes/class.ilSyntaxHighlighter.php\");\n\t\t$proglang = ilSyntaxHighlighter::getNewLanguageId($proglang);\n\t\tif (ilSyntaxHighlighter::isSupported($proglang))\n\t\t{\n\t\t\t$highl = ilSyntaxHighlighter::getInstance($proglang);\n\t\t\t$a_text = $highl->highlight($a_text);\n\t\t}\n\t\treturn $a_text;\n\t}\n\n\tfunction hasHighlighter ($hfile_ext)\n\t{\n\t\treturn file_exists (\"Services/COPage/syntax_highlight/php/HFile/HFile_\".$hfile_ext.\".php\");\n\t}\n\n}\n?>\n"], "filenames": ["Services/COPage/classes/class.ilPCSourceCode.php"], "buggy_code_start_loc": [84], "buggy_code_end_loc": [85], "fixing_code_start_loc": [84], "fixing_code_end_loc": [88], "type": "CWE-79", "message": "Services/COPage/classes/class.ilPCSourceCode.php in ILIAS 5.1.x, 5.2.x, and 5.3.x before 5.3.5 has XSS.", "other": {"cve": {"id": "CVE-2018-11120", "sourceIdentifier": "cve@mitre.org", "published": "2018-05-17T13:29:00.460", "lastModified": "2018-06-15T19:39:17.823", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Services/COPage/classes/class.ilPCSourceCode.php in ILIAS 5.1.x, 5.2.x, and 5.3.x before 5.3.5 has XSS."}, {"lang": "es", "value": "Services/COPage/classes/class.ilPCSourceCode.php en ILIAS 5.1.x, 5.2.x y 5.3.x en versiones anteriores a la 5.3.5 tiene Cross-Site Scripting (XSS)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.1.0", "versionEndIncluding": "5.1.26", "matchCriteriaId": "0F3792D7-FE39-4C56-B7D9-B67B0B0C94E8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.2.0", "versionEndIncluding": "5.2.15", "matchCriteriaId": "5D26A1D2-92C7-4540-BE93-2FCFE7EAC5D3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.3.0", "versionEndIncluding": "5.3.4", "matchCriteriaId": "AE2188AF-D708-4548-80E4-72AB685C4DAF"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:5.1.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "98C8D659-2BE5-484E-B97E-BF821B106D47"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:5.2.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "A89A7A96-92A8-4222-8959-FA9A27601FE1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:5.2.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "F373F01C-F090-44A9-ACB6-030F8CB85402"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:5.2.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "992F70E2-77FA-4E92-A373-592960C9DF57"}]}]}], "references": [{"url": "https://github.com/ILIAS-eLearning/ILIAS/commit/7959485406eb981976b64fee363cf950603924ed", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.ilias.de/docu/goto.php?target=st_229", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ILIAS-eLearning/ILIAS/commit/7959485406eb981976b64fee363cf950603924ed"}}