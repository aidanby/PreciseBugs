{"buggy_code": ["from typing import Any, List\n\nimport bleach\n\nfrom .rest_api import ValidationError\n\n\nallowed_tags_strict = [\n    \"a\",\n    \"img\",  # links and images\n    \"br\",\n    \"p\",\n    \"span\",\n    \"blockquote\",  # text layout\n    \"strike\",\n    \"del\",\n    \"ins\",\n    \"strong\",\n    \"u\",\n    \"em\",\n    \"sup\",\n    \"sub\",\n    \"pre\",  # text formatting\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",  # headings\n    \"ol\",\n    \"ul\",\n    \"li\",  # lists\n    \"table\",\n    \"caption\",\n    \"thead\",\n    \"tbody\",\n    \"th\",\n    \"tr\",\n    \"td\",  # tables\n    \"div\",\n]\nallowed_tags_permissive = allowed_tags_strict + [\n    \"video\",\n]\n\n\ndef allow_all(tag: str, name: str, value: str) -> bool:\n    return True\n\n\nallowed_attributes = allow_all\nallowed_styles = [\n    \"color\",\n    \"background-color\",\n    \"height\",\n    \"width\",\n    \"text-align\",\n    \"vertical-align\",\n    \"float\",\n    \"text-decoration\",\n    \"margin\",\n    \"padding\",\n    \"line-height\",\n    \"max-width\",\n    \"min-width\",\n    \"max-height\",\n    \"min-height\",\n    \"overflow\",\n    \"word-break\",\n    \"word-wrap\",\n]\n\n\ndef validate_html_strict(html: str) -> str:\n    \"\"\"\n    This method takes a string and escapes all non-whitelisted html entries.\n    Every field of a model that is loaded trusted in the DOM should be validated.\n    During copy and paste from Word maybe some tabs are spread over the html. Remove them.\n    \"\"\"\n    return base_validate_html(html, allowed_tags_strict)\n\n\ndef validate_html_permissive(html: str) -> str:\n    \"\"\"\n    See validate_html_strict, but allows some more tags, like iframes and videos.\n    Do not use on validation for normal users, only for admins!\n    \"\"\"\n    return base_validate_html(html, allowed_tags_permissive)\n\n\ndef base_validate_html(html: str, allowed_tags: List[str]) -> str:\n    \"\"\"\n    For internal use only.\n    \"\"\"\n    html = html.replace(\"\\t\", \"\")\n    return bleach.clean(\n        html, tags=allowed_tags, attributes=allowed_attributes, styles=allowed_styles\n    )\n\n\ndef validate_json(json: Any, max_depth: int) -> Any:\n    \"\"\"\n    Traverses through the JSON structure (dicts and lists) and runs\n    validate_html_strict on every found string.\n\n    Give max-depth to protect against stack-overflows. This should be the\n    maximum nested depth of the object expected.\n    \"\"\"\n\n    if max_depth == 0:\n        raise ValidationError({\"detail\": \"The JSON is too nested.\"})\n\n    if isinstance(json, dict):\n        return {key: validate_json(value, max_depth - 1) for key, value in json.items()}\n    if isinstance(json, list):\n        return [validate_json(item, max_depth - 1) for item in json]\n    if isinstance(json, str):\n        return validate_html_strict(json)\n\n    return json\n"], "fixing_code": ["from typing import Any, List\n\nimport bleach\n\nfrom .rest_api import ValidationError\n\n\nallowed_tags_strict = [\n    \"a\",\n    \"img\",  # links and images\n    \"br\",\n    \"p\",\n    \"span\",\n    \"blockquote\",  # text layout\n    \"strike\",\n    \"del\",\n    \"ins\",\n    \"strong\",\n    \"u\",\n    \"em\",\n    \"sup\",\n    \"sub\",\n    \"pre\",  # text formatting\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",  # headings\n    \"ol\",\n    \"ul\",\n    \"li\",  # lists\n    \"table\",\n    \"caption\",\n    \"thead\",\n    \"tbody\",\n    \"th\",\n    \"tr\",\n    \"td\",  # tables\n    \"div\",\n]\nallowed_tags_permissive = allowed_tags_strict + [\n    \"video\",\n]\n\nallowed_attributes = [\n    \"align\",\n    \"alt\",\n    \"autoplay\",\n    \"background\",\n    \"bgcolor\",\n    \"border\",\n    \"class\",\n    \"colspan\",\n    \"controls\",\n    \"dir\",\n    \"height\",\n    \"hidden\",\n    \"href\",\n    \"hreflang\",\n    \"id\",\n    \"lang\",\n    \"loop\",\n    \"muted\",\n    \"poster\",\n    \"preload\",\n    \"rel\",\n    \"rowspan\",\n    \"scope\",\n    \"sizes\",\n    \"src\",\n    \"srcset\",\n    \"start\",\n    \"style\",\n    \"target\",\n    \"title\",\n    \"width\",\n]\n\nallowed_styles = [\n    \"color\",\n    \"background-color\",\n    \"height\",\n    \"width\",\n    \"text-align\",\n    \"vertical-align\",\n    \"float\",\n    \"text-decoration\",\n    \"margin\",\n    \"padding\",\n    \"line-height\",\n    \"max-width\",\n    \"min-width\",\n    \"max-height\",\n    \"min-height\",\n    \"overflow\",\n    \"word-break\",\n    \"word-wrap\",\n]\n\n\ndef validate_html_strict(html: str) -> str:\n    \"\"\"\n    This method takes a string and escapes all non-whitelisted html entries.\n    Every field of a model that is loaded trusted in the DOM should be validated.\n    During copy and paste from Word maybe some tabs are spread over the html. Remove them.\n    \"\"\"\n    return base_validate_html(html, allowed_tags_strict)\n\n\ndef validate_html_permissive(html: str) -> str:\n    \"\"\"\n    See validate_html_strict, but allows some more tags, like iframes and videos.\n    Do not use on validation for normal users, only for admins!\n    \"\"\"\n    return base_validate_html(html, allowed_tags_permissive)\n\n\ndef base_validate_html(html: str, allowed_tags: List[str]) -> str:\n    \"\"\"\n    For internal use only.\n    \"\"\"\n    html = html.replace(\"\\t\", \"\")\n    return bleach.clean(\n        html, tags=allowed_tags, attributes=allowed_attributes, styles=allowed_styles\n    )\n\n\ndef validate_json(json: Any, max_depth: int) -> Any:\n    \"\"\"\n    Traverses through the JSON structure (dicts and lists) and runs\n    validate_html_strict on every found string.\n\n    Give max-depth to protect against stack-overflows. This should be the\n    maximum nested depth of the object expected.\n    \"\"\"\n\n    if max_depth == 0:\n        raise ValidationError({\"detail\": \"The JSON is too nested.\"})\n\n    if isinstance(json, dict):\n        return {key: validate_json(value, max_depth - 1) for key, value in json.items()}\n    if isinstance(json, list):\n        return [validate_json(item, max_depth - 1) for item in json]\n    if isinstance(json, str):\n        return validate_html_strict(json)\n\n    return json\n"], "filenames": ["server/openslides/utils/validate.py"], "buggy_code_start_loc": [45], "buggy_code_end_loc": [52], "fixing_code_start_loc": [46], "fixing_code_end_loc": [79], "type": "CWE-79", "message": "OpenSlides is a free, Web-based presentation and assembly system for managing and projecting agenda, motions, and elections of assemblies. OpenSlides version 3.2, due to unsufficient user input validation and escaping, it is vulnerable to persistant cross-site scripting (XSS). In the web applications users can enter rich text in various places, e.g. for personal notes or in motions. These fields can be used to store arbitrary JavaScript Code that will be executed when other users read the respective text. An attacker could utilize this vulnerability be used to manipulate votes of other users, hijack the moderators session or simply disturb the meeting. The vulnerability was introduced with 6eae497abeab234418dfbd9d299e831eff86ed45 on 16.04.2020, which is first included in the 3.2 release. It has been patched in version 3.3 ( in commit f3809fc8a97ee305d721662a75f788f9e9d21938, merged in master on 20.11.2020).", "other": {"cve": {"id": "CVE-2020-26280", "sourceIdentifier": "security-advisories@github.com", "published": "2020-12-18T19:15:14.343", "lastModified": "2020-12-22T20:11:58.927", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenSlides is a free, Web-based presentation and assembly system for managing and projecting agenda, motions, and elections of assemblies. OpenSlides version 3.2, due to unsufficient user input validation and escaping, it is vulnerable to persistant cross-site scripting (XSS). In the web applications users can enter rich text in various places, e.g. for personal notes or in motions. These fields can be used to store arbitrary JavaScript Code that will be executed when other users read the respective text. An attacker could utilize this vulnerability be used to manipulate votes of other users, hijack the moderators session or simply disturb the meeting. The vulnerability was introduced with 6eae497abeab234418dfbd9d299e831eff86ed45 on 16.04.2020, which is first included in the 3.2 release. It has been patched in version 3.3 ( in commit f3809fc8a97ee305d721662a75f788f9e9d21938, merged in master on 20.11.2020)."}, {"lang": "es", "value": "OpenSlides es un sistema de presentaci\u00f3n y ensamblaje gratuito basado en la web para administrar y proyectar agenda, movimientos y elecciones de las reuniones.&#xa0;OpenSlides versi\u00f3n 3.2, debido a una comprobaci\u00f3n insuficiente de la entrada de usuario y al escape, es vulnerable a un ataque de tipo cross-site scripting (XSS) persistente.&#xa0;En las aplicaciones web, los usuarios pueden ingresar texto enriquecido en varios lugares, por ejemplo, para notas personales o en movimientos.&#xa0;Estos campos pueden ser utilizados para almacenar c\u00f3digo JavaScript arbitrario que ser\u00e1 ejecutado cuando otros usuarios lean el texto respectivo.&#xa0;Un atacante podr\u00eda usar esta vulnerabilidad para manipular los votos de otros usuarios, secuestrar la sesi\u00f3n de los moderadores o simplemente perturbar la reuni\u00f3n.&#xa0;La vulnerabilidad fue introducida con 6eae497abeab234418dfbd9d299e831eff86ed45 en 16.04.2020, el cual es incluida por primera vez en la versi\u00f3n 3.2.&#xa0;Ha sido parcheado en la versi\u00f3n 3.3 (en el commit f3809fc8a97ee305d721662a75f788f9e9d21938, fusionada en master en 20.11.2020)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 8.9, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 8.9, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openslides:openslides:3.2:*:*:*:*:*:*:*", "matchCriteriaId": "ADA066D9-25CC-46AA-AADC-C717C76CE5EA"}]}]}], "references": [{"url": "https://github.com/OpenSlides/OpenSlides/blob/master/CHANGELOG.rst#version-33-2020-12-18", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/OpenSlides/OpenSlides/commit/f3809fc8a97ee305d721662a75f788f9e9d21938", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenSlides/OpenSlides/pull/5714", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenSlides/OpenSlides/security/advisories/GHSA-w5wr-98qm-jx92", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.syss.de/fileadmin/dokumente/Publikationen/Advisories/SYSS-2020-043.txt", "source": "security-advisories@github.com", "tags": ["Broken Link"]}]}, "github_commit_url": "https://github.com/OpenSlides/OpenSlides/commit/f3809fc8a97ee305d721662a75f788f9e9d21938"}}