{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass Contactform extends Module implements WidgetInterface\n{\n    /** @var string */\n    const SEND_CONFIRMATION_EMAIL = 'CONTACTFORM_SEND_CONFIRMATION_EMAIL';\n\n    /** @var string */\n    const SEND_NOTIFICATION_EMAIL = 'CONTACTFORM_SEND_NOTIFICATION_EMAIL';\n\n    /** @var string */\n    const MESSAGE_PLACEHOLDER_FOR_OLDER_VERSION = '(hidden)';\n\n    /** @var string */\n    const SUBMIT_NAME = 'update-configuration';\n\n    /** @var Contact */\n    protected $contact;\n\n    /** @var CustomerThread */\n    protected $customer_thread;\n\n    public function __construct()\n    {\n        $this->name = 'contactform';\n        $this->author = 'PrestaShop';\n        $this->tab = 'front_office_features';\n        $this->version = '4.2.0';\n        $this->bootstrap = true;\n\n        parent::__construct();\n\n        $this->displayName = $this->trans('Contact form', [], 'Modules.Contactform.Admin');\n        $this->description = $this->trans(\n            'Adds a contact form to the \"Contact us\" page.',\n            [],\n            'Modules.Contactform.Admin'\n        );\n        $this->ps_versions_compliancy = [\n            'min' => '1.7.2.0',\n            'max' => _PS_VERSION_\n        ];\n    }\n\n    /**\n     * @return bool\n     */\n    public function install()\n    {\n        return parent::install() && $this->registerHook('registerGDPRConsent');\n    }\n\n    /**\n     * @return string\n     */\n    public function getContent()\n    {\n        $message = $this->trans(\n            'For even more security on your website forms, consult our Security & Access modules category on the %link%',\n            ['%link%' => $this->getSecurityMarketPlaceLink()],\n            'Modules.Contactform.Admin'\n        );\n        $html = \"<div class='alert alert-info'>$message</div>\";\n        $html .= $this->renderForm();\n\n        if (Tools::getValue(self::SUBMIT_NAME)) {\n            Configuration::updateValue(\n                self::SEND_CONFIRMATION_EMAIL,\n                Tools::getValue(self::SEND_CONFIRMATION_EMAIL)\n            );\n            Configuration::updateValue(\n                self::SEND_NOTIFICATION_EMAIL,\n                Tools::getValue(self::SEND_NOTIFICATION_EMAIL)\n            );\n        }\n\n        return $html;\n    }\n\n    /**\n     * @return string\n     */\n    public function getSecurityMarketPlaceLink()\n    {\n        $codes = [\n            'FR' => 'securite-access',\n            'EN' => 'website-security-access',\n            'ES' => 'seguridad-y-accesos',\n            'DE' => 'sicherheit-brechtigungen',\n            'IT' => 'security-access',\n            'NL' => 'veiligheid-toegang',\n            'PL' => 'bezpieczestwa-dostepu',\n            'PT' => 'seguranca-acesso',\n            'RU' => 'website-security-access',\n        ];\n\n        $languageCode = Tools::strtoupper($this->context->language->language_code);\n        if (empty($codes[$languageCode])) {\n            $languageCode = 'EN';\n        }\n\n        return sprintf(\n            '<a href=\"%1$s\">%2$s</a>',\n            sprintf(\n                'https://addons.prestashop.com/%s/429-%s?utm_source=back-office&' .\n                'utm_medium=native-contactform&utm_campaign=back-office-%s&utm_content=security',\n                Tools::strtolower($languageCode),\n                $codes[$languageCode],\n                $languageCode\n            ),\n            $this->trans('PrestaShop Addons Marketplace', [], 'Admin.Modules.Feature')\n        );\n    }\n\n    /**\n     * @return string\n     */\n    protected function renderForm()\n    {\n        $fieldsValue = [\n            self::SEND_CONFIRMATION_EMAIL => Tools::getValue(\n                self::SEND_CONFIRMATION_EMAIL,\n                Configuration::get(self::SEND_CONFIRMATION_EMAIL)\n            ),\n            self::SEND_NOTIFICATION_EMAIL => Tools::getValue(\n                self::SEND_NOTIFICATION_EMAIL,\n                Configuration::get(self::SEND_NOTIFICATION_EMAIL)\n            )\n        ];\n        $form = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Parameters', [], 'Modules.Contactform.Admin'),\n                    'icon' => 'icon-envelope'\n                ],\n                'input' => [\n                    [\n                        'type' => 'switch',\n                        'label' => $this->trans(\n                            'Send confirmation email to your customers',\n                            [],\n                            'Modules.Contactform.Admin'\n                        ),\n                        'desc' => $this->trans(\n                            \"Choose Yes and your customers will receive a generic confirmation email including a tracking number after their message is sent. Note: to discourage spam, the content of their message won't be included in the email.\",\n                            [],\n                            'Modules.Contactform.Admin'\n                        ),\n                        'name' => self::SEND_CONFIRMATION_EMAIL,\n                        'is_bool' => true,\n                        'required' => true,\n                        'values' => [\n                            [\n                                'id' => self::SEND_CONFIRMATION_EMAIL . '_on',\n                                'value' => 1,\n                                'label' => $this->trans('Enabled', [], 'Admin.Global')\n                            ],\n                            [\n                                'id' => self::SEND_CONFIRMATION_EMAIL . '_off',\n                                'value' => 0,\n                                'label' => $this->trans('Disabled', [], 'Admin.Global')\n                            ]\n                        ]\n                    ],\n                    [\n                        'type' => 'switch',\n                        'label' => $this->trans(\n                            \"Receive customers' messages by email\",\n                            [],\n                            'Modules.Contactform.Admin'\n                        ),\n                        'desc' => $this->trans(\n                            'By default, you will only receive contact messages through your Customer service tab.',\n                            [],\n                            'Modules.Contactform.Admin'\n                        ),\n                        'name' => self::SEND_NOTIFICATION_EMAIL,\n                        'is_bool' => true,\n                        'required' => true,\n                        'values' => [\n                            [\n                                'id' => self::SEND_NOTIFICATION_EMAIL . '_on',\n                                'value' => 1,\n                                'label' => $this->trans('Enabled', [], 'Admin.Global')\n                            ],\n                            [\n                                'id' => self::SEND_NOTIFICATION_EMAIL . '_off',\n                                'value' => 0,\n                                'label' => $this->trans('Disabled', [], 'Admin.Global')\n                            ]\n                        ]\n                    ]\n                ],\n                'submit' => [\n                    'name' => self::SUBMIT_NAME,\n                    'title' => $this->trans('Save', [], 'Admin.Actions'),\n                ]\n            ],\n        ];\n        $helper = new HelperForm();\n        $helper->table = $this->table;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->submit_action = 'update-configuration';\n        $helper->currentIndex = $this->getModuleConfigurationPageLink();\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $fieldsValue,\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id\n        ];\n\n        return $helper->generateForm([$form]);\n    }\n\n    /**\n     * @return string\n     */\n    protected function getModuleConfigurationPageLink()\n    {\n        $parsedUrl = parse_url($this->context->link->getAdminLink('AdminModules', false));\n\n        $urlParams = http_build_query(\n            [\n                'configure' => $this->name,\n                'tab_module' => $this->tab,\n                'module_name' => $this->name,\n            ]\n        );\n\n        if (!empty($parsedUrl['query'])) {\n            $parsedUrl['query'] .= \"&$urlParams\";\n        } else {\n            $parsedUrl['query'] = $urlParams;\n        }\n\n        /**\n         * http_build_query function is available through composer package jakeasmith/http_build_url\n         */\n        return http_build_url($parsedUrl);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function renderWidget($hookName = null, array $configuration = [])\n    {\n        if (!$this->active) {\n            return;\n        }\n        $this->smarty->assign($this->getWidgetVariables($hookName, $configuration));\n\n        return $this->display(__FILE__, 'views/templates/widget/contactform.tpl');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getWidgetVariables($hookName = null, array $configuration = [])\n    {\n        $notifications = false;\n\n        if (Tools::isSubmit('submitMessage')) {\n            $this->sendMessage();\n\n            if (!empty($this->context->controller->errors)) {\n                $notifications['messages'] = $this->context->controller->errors;\n                $notifications['nw_error'] = true;\n            } elseif (!empty($this->context->controller->success)) {\n                $notifications['messages'] = $this->context->controller->success;\n                $notifications['nw_error'] = false;\n            }\n        } elseif (empty($this->context->cookie->contactFormToken)\n            || empty($this->context->cookie->contactFormTokenTTL)\n            || $this->context->cookie->contactFormTokenTTL < time()\n        ) {\n            $this->createNewToken();\n        }\n\n        if (($id_customer_thread = (int)Tools::getValue('id_customer_thread'))\n            && $token = Tools::getValue('token')\n        ) {\n            $cm = new CustomerThread($id_customer_thread);\n\n            if ($cm->token == $token) {\n                $this->customer_thread = $this->context->controller->objectPresenter->present($cm);\n            }\n        }\n        $this->contact['contacts'] = $this->getTemplateVarContact();\n        $this->contact['message'] = html_entity_decode(Tools::getValue('message'));\n        $this->contact['allow_file_upload'] = (bool) Configuration::get('PS_CUSTOMER_SERVICE_FILE_UPLOAD');\n\n        if (!(bool)Configuration::isCatalogMode()) {\n            $this->contact['orders'] = $this->getTemplateVarOrders();\n        } else {\n            $this->contact['orders'] = [];\n        }\n\n        if (isset($this->customer_thread['email'])) {\n            $this->contact['email'] = $this->customer_thread['email'];\n        } else {\n            $this->contact['email'] = Tools::safeOutput(\n                Tools::getValue(\n                    'from',\n                    !empty($this->context->cookie->email) && Validate::isEmail($this->context->cookie->email) ?\n                    $this->context->cookie->email :\n                    ''\n                )\n            );\n        }\n\n        return [\n            'contact' => $this->contact,\n            'notifications' => $notifications,\n            'token' => $this->context->cookie->contactFormToken,\n            'id_module' => $this->id\n        ];\n    }\n\n    /**\n     * @return $this\n     */\n    protected function createNewToken()\n    {\n        $this->context->cookie->contactFormToken = md5(uniqid());\n        $this->context->cookie->contactFormTokenTTL = time()+600;\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getTemplateVarContact()\n    {\n        $contacts = [];\n        $all_contacts = Contact::getContacts($this->context->language->id);\n\n        foreach ($all_contacts as $one_contact) {\n            $contacts[$one_contact['id_contact']] = $one_contact;\n        }\n\n        if (isset($this->customer_thread['id_contact'])) {\n            return [\n                $contacts[$this->customer_thread['id_contact']]\n            ];\n        }\n\n        return $contacts;\n    }\n\n    /**\n     * @return array\n     *\n     * @throws Exception\n     */\n    public function getTemplateVarOrders()\n    {\n        $orders = [];\n\n        if (!isset($this->customer_thread['id_order'])\n            && isset($this->context->customer)\n            && $this->context->customer->isLogged()) {\n            $customer_orders = Order::getCustomerOrders($this->context->customer->id);\n\n            foreach ($customer_orders as $customer_order) {\n                $myOrder = new Order((int)$customer_order['id_order']);\n\n                if (Validate::isLoadedObject($myOrder)) {\n                    $orders[$customer_order['id_order']] = $customer_order;\n                    $orders[$customer_order['id_order']]['products'] = $myOrder->getProducts();\n                }\n            }\n        } elseif (isset($this->customer_thread['id_order']) && (int)$this->customer_thread['id_order'] > 0) {\n            $myOrder = new Order($this->customer_thread['id_order']);\n\n            if (Validate::isLoadedObject($myOrder)) {\n                $orders[$myOrder->id] = $this->context->controller->objectPresenter->present($myOrder);\n                $orders[$myOrder->id]['id_order'] = $myOrder->id;\n                $orders[$myOrder->id]['products'] = $myOrder->getProducts();\n            }\n        }\n\n        if (isset($this->customer_thread['id_product'])) {\n            $id_order = isset($this->customer_thread['id_order']) ?\n                      (int)$this->customer_thread['id_order'] :\n                      0;\n\n            $orders[$id_order]['products'][(int)$this->customer_thread['id_product']] = $this->context->controller->objectPresenter->present(\n                new Product((int)$this->customer_thread['id_product'])\n            );\n        }\n\n        return $orders;\n    }\n\n    /**\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function sendMessage()\n    {\n        $extension = ['.txt', '.rtf', '.doc', '.docx', '.pdf', '.zip', '.png', '.jpeg', '.gif', '.jpg'];\n        $file_attachment = Tools::fileAttachment('fileUpload');\n        $message = trim(Tools::getValue('message'));\n        $url = Tools::getValue('url');\n        $clientToken = Tools::getValue('token');\n        $serverToken = $this->context->cookie->contactFormToken;\n        $clientTokenTTL = $this->context->cookie->contactFormTokenTTL;\n\n        if (!($from = trim(Tools::getValue('from'))) || !Validate::isEmail($from)) {\n            $this->context->controller->errors[] = $this->trans(\n                'Invalid email address.',\n                [],\n                'Shop.Notifications.Error'\n            );\n        } elseif (empty($message)) {\n            $this->context->controller->errors[] = $this->trans(\n                'The message cannot be blank.',\n                [],\n                'Shop.Notifications.Error'\n            );\n        } elseif (!Validate::isCleanHtml($message)) {\n            $this->context->controller->errors[] = $this->trans(\n                'Invalid message',\n                [],\n                'Shop.Notifications.Error'\n            );\n        } elseif (!($id_contact = (int)Tools::getValue('id_contact')) ||\n                  !(Validate::isLoadedObject($contact = new Contact($id_contact, $this->context->language->id)))\n        ) {\n            $this->context->controller->errors[] = $this->trans(\n                'Please select a subject from the list provided. ',\n                [],\n                'Modules.Contactform.Shop'\n            );\n        } elseif (!empty($file_attachment['name']) && $file_attachment['error'] != 0) {\n            $this->context->controller->errors[] = $this->trans(\n                'An error occurred during the file-upload process.',\n                [],\n                'Modules.Contactform.Shop'\n            );\n        } elseif (!empty($file_attachment['name']) &&\n                  !in_array(Tools::strtolower(Tools::substr($file_attachment['name'], -4)), $extension) &&\n                  !in_array(Tools::strtolower(Tools::substr($file_attachment['name'], -5)), $extension)\n        ) {\n            $this->context->controller->errors[] = $this->trans(\n                'Bad file extension',\n                [],\n                'Modules.Contactform.Shop'\n            );\n        } elseif ($url !== ''\n            || empty($serverToken)\n            || $clientToken !== $serverToken\n            || $clientTokenTTL < time()\n        ) {\n            $this->context->controller->errors[] = $this->trans(\n                'An error occurred while sending the message, please try again.',\n                [],\n                'Modules.Contactform.Shop'\n            );\n            $this->createNewToken();\n        } else {\n            $customer = $this->context->customer;\n\n            if (!$customer->id) {\n                $customer->getByEmail($from);\n            }\n\n            /**\n             * Check that the order belongs to the customer.\n             */\n            $id_order = (int) Tools::getValue('id_order');\n            if (!empty($id_order)) {\n                $order = new Order($id_order);\n                $id_order = (int) $order->id_customer === (int) $customer->id ? $id_order : 0;\n            }\n\n            $id_customer_thread = CustomerThread::getIdCustomerThreadByEmailAndIdOrder($from, $id_order);\n\n            if ($contact->customer_service) {\n                if ((int)$id_customer_thread) {\n                    $ct = new CustomerThread($id_customer_thread);\n                    $ct->status = 'open';\n                    $ct->id_lang = (int)$this->context->language->id;\n                    $ct->id_contact = (int)$id_contact;\n                    $ct->id_order = $id_order;\n\n                    if ($id_product = (int)Tools::getValue('id_product')) {\n                        $ct->id_product = $id_product;\n                    }\n                    $ct->update();\n                } else {\n                    $ct = new CustomerThread();\n                    if (isset($customer->id)) {\n                        $ct->id_customer = (int)$customer->id;\n                    }\n                    $ct->id_shop = (int)$this->context->shop->id;\n                    $ct->id_order = $id_order;\n\n                    if ($id_product = (int)Tools::getValue('id_product')) {\n                        $ct->id_product = $id_product;\n                    }\n                    $ct->id_contact = (int)$id_contact;\n                    $ct->id_lang = (int)$this->context->language->id;\n                    $ct->email = $from;\n                    $ct->status = 'open';\n                    $ct->token = Tools::passwdGen(12);\n                    $ct->add();\n                }\n\n                if ($ct->id) {\n                    $lastMessage = CustomerMessage::getLastMessageForCustomerThread($ct->id);\n                    $testFileUpload = (isset($file_attachment['rename']) && !empty($file_attachment['rename']));\n\n                    // if last message is the same as new message (and no file upload), do not consider this contact\n                    if ($lastMessage != $message || $testFileUpload) {\n                        $cm = new CustomerMessage();\n                        $cm->id_customer_thread = $ct->id;\n                        $cm->message = $message;\n\n                        if ($testFileUpload && rename($file_attachment['tmp_name'], _PS_UPLOAD_DIR_ . basename($file_attachment['rename']))) {\n                            $cm->file_name = $file_attachment['rename'];\n                            @chmod(_PS_UPLOAD_DIR_ . basename($file_attachment['rename']), 0664);\n                        }\n                        $cm->ip_address = (int)ip2long(Tools::getRemoteAddr());\n                        $cm->user_agent = $_SERVER['HTTP_USER_AGENT'];\n\n                        if (!$cm->add()) {\n                            $this->context->controller->errors[] = $this->trans(\n                                'An error occurred while sending the message.',\n                                [],\n                                'Modules.Contactform.Shop'\n                            );\n                        }\n                    } else {\n                        $mailAlreadySend = true;\n                    }\n                } else {\n                    $this->context->controller->errors[] = $this->trans(\n                        'An error occurred while sending the message.',\n                        [],\n                        'Modules.Contactform.Shop'\n                    );\n                }\n            }\n            $sendConfirmationEmail = Configuration::get(self::SEND_CONFIRMATION_EMAIL);\n            $sendNotificationEmail = Configuration::get(self::SEND_NOTIFICATION_EMAIL);\n\n            if (!count($this->context->controller->errors)\n                && empty($mailAlreadySend)\n                && ($sendConfirmationEmail || $sendNotificationEmail)\n            ) {\n                $var_list = [\n                    '{firstname}' => '',\n                    '{lastname}' => '',\n                    '{order_name}' => '-',\n                    '{attached_file}' => '-',\n                    '{message}' => Tools::nl2br(Tools::stripslashes($message)),\n                    '{email}' =>  $from,\n                    '{product_name}' => '',\n                ];\n\n                if (isset($customer->id)) {\n                    $var_list['{firstname}'] = $customer->firstname;\n                    $var_list['{lastname}'] = $customer->lastname;\n                }\n\n                if (isset($file_attachment['name'])) {\n                    $var_list['{attached_file}'] = $file_attachment['name'];\n                }\n                $id_product = (int)Tools::getValue('id_product');\n\n                if (isset($ct) && Validate::isLoadedObject($ct) && $ct->id_order) {\n                    $order = new Order((int)$ct->id_order);\n                    $var_list['{order_name}'] = $order->getUniqReference();\n                    $var_list['{id_order}'] = (int)$order->id;\n                }\n\n                if ($id_product) {\n                    $product = new Product((int)$id_product);\n\n                    if (Validate::isLoadedObject($product) &&\n                        isset($product->name[Context::getContext()->language->id])\n                    ) {\n                        $var_list['{product_name}'] = $product->name[Context::getContext()->language->id];\n                    }\n                }\n\n                if ($sendNotificationEmail) {\n                    if (empty($contact->email) || !Mail::Send(\n                        $this->context->language->id,\n                        'contact',\n                        $this->trans('Message from contact form', [], 'Emails.Subject').' [no_sync]',\n                        $var_list,\n                        $contact->email,\n                        $contact->name,\n                        null,\n                        null,\n                        $file_attachment,\n                        null,\n                        _PS_MAIL_DIR_,\n                        false,\n                        null,\n                        null,\n                        $from\n                    )) {\n                        $this->context->controller->errors[] = $this->trans(\n                            'An error occurred while sending the message.',\n                            [],\n                            'Modules.Contactform.Shop'\n                        );\n                    }\n                }\n\n                if ($sendConfirmationEmail) {\n                    $var_list['{message}'] = self::MESSAGE_PLACEHOLDER_FOR_OLDER_VERSION;\n\n                    if (!Mail::Send(\n                        $this->context->language->id,\n                        'contact_form',\n                        ((isset($ct) && Validate::isLoadedObject($ct)) ? $this->trans(\n                            'Your message has been correctly sent #ct%thread_id% #tc%thread_token%',\n                            [\n                                '%thread_id%' => $ct->id,\n                                '%thread_token%' => $ct->token\n                            ],\n                            'Emails.Subject'\n                        ) : $this->trans('Your message has been correctly sent', [], 'Emails.Subject')),\n                        $var_list,\n                        $from,\n                        null,\n                        null,\n                        null,\n                        $file_attachment,\n                        null,\n                        _PS_MAIL_DIR_,\n                        false,\n                        null,\n                        null,\n                        $contact->email\n                    )) {\n                        $this->context->controller->errors[] = $this->trans(\n                            'An error occurred while sending the message.',\n                            [],\n                            'Modules.Contactform.Shop'\n                        );\n                    }\n                }\n            }\n\n            if (!count($this->context->controller->errors)) {\n                $this->context->controller->success[] = $this->trans(\n                    'Your message has been successfully sent to our team.',\n                    [],\n                    'Modules.Contactform.Shop'\n                );\n            }\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Academic Free License 3.0 (AFL-3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/AFL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/AFL-3.0 Academic Free License 3.0 (AFL-3.0)\n */\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\nuse PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface;\n\nclass Contactform extends Module implements WidgetInterface\n{\n    /** @var string */\n    const SEND_CONFIRMATION_EMAIL = 'CONTACTFORM_SEND_CONFIRMATION_EMAIL';\n\n    /** @var string */\n    const SEND_NOTIFICATION_EMAIL = 'CONTACTFORM_SEND_NOTIFICATION_EMAIL';\n\n    /** @var string */\n    const MESSAGE_PLACEHOLDER_FOR_OLDER_VERSION = '(hidden)';\n\n    /** @var string */\n    const SUBMIT_NAME = 'update-configuration';\n\n    /** @var Contact */\n    protected $contact;\n\n    /** @var CustomerThread */\n    protected $customer_thread;\n\n    public function __construct()\n    {\n        $this->name = 'contactform';\n        $this->author = 'PrestaShop';\n        $this->tab = 'front_office_features';\n        $this->version = '4.2.0';\n        $this->bootstrap = true;\n\n        parent::__construct();\n\n        $this->displayName = $this->trans('Contact form', [], 'Modules.Contactform.Admin');\n        $this->description = $this->trans(\n            'Adds a contact form to the \"Contact us\" page.',\n            [],\n            'Modules.Contactform.Admin'\n        );\n        $this->ps_versions_compliancy = [\n            'min' => '1.7.2.0',\n            'max' => _PS_VERSION_\n        ];\n    }\n\n    /**\n     * @return bool\n     */\n    public function install()\n    {\n        return parent::install() && $this->registerHook('registerGDPRConsent');\n    }\n\n    /**\n     * @return string\n     */\n    public function getContent()\n    {\n        $message = $this->trans(\n            'For even more security on your website forms, consult our Security & Access modules category on the %link%',\n            ['%link%' => $this->getSecurityMarketPlaceLink()],\n            'Modules.Contactform.Admin'\n        );\n        $html = \"<div class='alert alert-info'>$message</div>\";\n        $html .= $this->renderForm();\n\n        if (Tools::getValue(self::SUBMIT_NAME)) {\n            Configuration::updateValue(\n                self::SEND_CONFIRMATION_EMAIL,\n                Tools::getValue(self::SEND_CONFIRMATION_EMAIL)\n            );\n            Configuration::updateValue(\n                self::SEND_NOTIFICATION_EMAIL,\n                Tools::getValue(self::SEND_NOTIFICATION_EMAIL)\n            );\n        }\n\n        return $html;\n    }\n\n    /**\n     * @return string\n     */\n    public function getSecurityMarketPlaceLink()\n    {\n        $codes = [\n            'FR' => 'securite-access',\n            'EN' => 'website-security-access',\n            'ES' => 'seguridad-y-accesos',\n            'DE' => 'sicherheit-brechtigungen',\n            'IT' => 'security-access',\n            'NL' => 'veiligheid-toegang',\n            'PL' => 'bezpieczestwa-dostepu',\n            'PT' => 'seguranca-acesso',\n            'RU' => 'website-security-access',\n        ];\n\n        $languageCode = Tools::strtoupper($this->context->language->language_code);\n        if (empty($codes[$languageCode])) {\n            $languageCode = 'EN';\n        }\n\n        return sprintf(\n            '<a href=\"%1$s\">%2$s</a>',\n            sprintf(\n                'https://addons.prestashop.com/%s/429-%s?utm_source=back-office&' .\n                'utm_medium=native-contactform&utm_campaign=back-office-%s&utm_content=security',\n                Tools::strtolower($languageCode),\n                $codes[$languageCode],\n                $languageCode\n            ),\n            $this->trans('PrestaShop Addons Marketplace', [], 'Admin.Modules.Feature')\n        );\n    }\n\n    /**\n     * @return string\n     */\n    protected function renderForm()\n    {\n        $fieldsValue = [\n            self::SEND_CONFIRMATION_EMAIL => Tools::getValue(\n                self::SEND_CONFIRMATION_EMAIL,\n                Configuration::get(self::SEND_CONFIRMATION_EMAIL)\n            ),\n            self::SEND_NOTIFICATION_EMAIL => Tools::getValue(\n                self::SEND_NOTIFICATION_EMAIL,\n                Configuration::get(self::SEND_NOTIFICATION_EMAIL)\n            )\n        ];\n        $form = [\n            'form' => [\n                'legend' => [\n                    'title' => $this->trans('Parameters', [], 'Modules.Contactform.Admin'),\n                    'icon' => 'icon-envelope'\n                ],\n                'input' => [\n                    [\n                        'type' => 'switch',\n                        'label' => $this->trans(\n                            'Send confirmation email to your customers',\n                            [],\n                            'Modules.Contactform.Admin'\n                        ),\n                        'desc' => $this->trans(\n                            \"Choose Yes and your customers will receive a generic confirmation email including a tracking number after their message is sent. Note: to discourage spam, the content of their message won't be included in the email.\",\n                            [],\n                            'Modules.Contactform.Admin'\n                        ),\n                        'name' => self::SEND_CONFIRMATION_EMAIL,\n                        'is_bool' => true,\n                        'required' => true,\n                        'values' => [\n                            [\n                                'id' => self::SEND_CONFIRMATION_EMAIL . '_on',\n                                'value' => 1,\n                                'label' => $this->trans('Enabled', [], 'Admin.Global')\n                            ],\n                            [\n                                'id' => self::SEND_CONFIRMATION_EMAIL . '_off',\n                                'value' => 0,\n                                'label' => $this->trans('Disabled', [], 'Admin.Global')\n                            ]\n                        ]\n                    ],\n                    [\n                        'type' => 'switch',\n                        'label' => $this->trans(\n                            \"Receive customers' messages by email\",\n                            [],\n                            'Modules.Contactform.Admin'\n                        ),\n                        'desc' => $this->trans(\n                            'By default, you will only receive contact messages through your Customer service tab.',\n                            [],\n                            'Modules.Contactform.Admin'\n                        ),\n                        'name' => self::SEND_NOTIFICATION_EMAIL,\n                        'is_bool' => true,\n                        'required' => true,\n                        'values' => [\n                            [\n                                'id' => self::SEND_NOTIFICATION_EMAIL . '_on',\n                                'value' => 1,\n                                'label' => $this->trans('Enabled', [], 'Admin.Global')\n                            ],\n                            [\n                                'id' => self::SEND_NOTIFICATION_EMAIL . '_off',\n                                'value' => 0,\n                                'label' => $this->trans('Disabled', [], 'Admin.Global')\n                            ]\n                        ]\n                    ]\n                ],\n                'submit' => [\n                    'name' => self::SUBMIT_NAME,\n                    'title' => $this->trans('Save', [], 'Admin.Actions'),\n                ]\n            ],\n        ];\n        $helper = new HelperForm();\n        $helper->table = $this->table;\n        $lang = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $helper->default_form_language = $lang->id;\n        $helper->submit_action = 'update-configuration';\n        $helper->currentIndex = $this->getModuleConfigurationPageLink();\n        $helper->token = Tools::getAdminTokenLite('AdminModules');\n        $helper->tpl_vars = [\n            'fields_value' => $fieldsValue,\n            'languages' => $this->context->controller->getLanguages(),\n            'id_language' => $this->context->language->id\n        ];\n\n        return $helper->generateForm([$form]);\n    }\n\n    /**\n     * @return string\n     */\n    protected function getModuleConfigurationPageLink()\n    {\n        $parsedUrl = parse_url($this->context->link->getAdminLink('AdminModules', false));\n\n        $urlParams = http_build_query(\n            [\n                'configure' => $this->name,\n                'tab_module' => $this->tab,\n                'module_name' => $this->name,\n            ]\n        );\n\n        if (!empty($parsedUrl['query'])) {\n            $parsedUrl['query'] .= \"&$urlParams\";\n        } else {\n            $parsedUrl['query'] = $urlParams;\n        }\n\n        /**\n         * http_build_query function is available through composer package jakeasmith/http_build_url\n         */\n        return http_build_url($parsedUrl);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function renderWidget($hookName = null, array $configuration = [])\n    {\n        if (!$this->active) {\n            return;\n        }\n        $this->smarty->assign($this->getWidgetVariables($hookName, $configuration));\n\n        return $this->display(__FILE__, 'views/templates/widget/contactform.tpl');\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getWidgetVariables($hookName = null, array $configuration = [])\n    {\n        $notifications = false;\n\n        if (Tools::isSubmit('submitMessage')) {\n            $this->sendMessage();\n\n            if (!empty($this->context->controller->errors)) {\n                $notifications['messages'] = $this->context->controller->errors;\n                $notifications['nw_error'] = true;\n            } elseif (!empty($this->context->controller->success)) {\n                $notifications['messages'] = $this->context->controller->success;\n                $notifications['nw_error'] = false;\n            }\n        } elseif (empty($this->context->cookie->contactFormToken)\n            || empty($this->context->cookie->contactFormTokenTTL)\n            || $this->context->cookie->contactFormTokenTTL < time()\n        ) {\n            $this->createNewToken();\n        }\n\n        if (($id_customer_thread = (int)Tools::getValue('id_customer_thread'))\n            && $token = Tools::getValue('token')\n        ) {\n            $cm = new CustomerThread($id_customer_thread);\n\n            if ($cm->token == $token) {\n                $this->customer_thread = $this->context->controller->objectPresenter->present($cm);\n            }\n        }\n        $this->contact['contacts'] = $this->getTemplateVarContact();\n        $this->contact['message'] = Tools::getValue('message');\n        $this->contact['allow_file_upload'] = (bool) Configuration::get('PS_CUSTOMER_SERVICE_FILE_UPLOAD');\n\n        if (!(bool)Configuration::isCatalogMode()) {\n            $this->contact['orders'] = $this->getTemplateVarOrders();\n        } else {\n            $this->contact['orders'] = [];\n        }\n\n        if (isset($this->customer_thread['email'])) {\n            $this->contact['email'] = $this->customer_thread['email'];\n        } else {\n            $this->contact['email'] = Tools::safeOutput(\n                Tools::getValue(\n                    'from',\n                    !empty($this->context->cookie->email) && Validate::isEmail($this->context->cookie->email) ?\n                    $this->context->cookie->email :\n                    ''\n                )\n            );\n        }\n\n        return [\n            'contact' => $this->contact,\n            'notifications' => $notifications,\n            'token' => $this->context->cookie->contactFormToken,\n            'id_module' => $this->id\n        ];\n    }\n\n    /**\n     * @return $this\n     */\n    protected function createNewToken()\n    {\n        $this->context->cookie->contactFormToken = md5(uniqid());\n        $this->context->cookie->contactFormTokenTTL = time()+600;\n\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function getTemplateVarContact()\n    {\n        $contacts = [];\n        $all_contacts = Contact::getContacts($this->context->language->id);\n\n        foreach ($all_contacts as $one_contact) {\n            $contacts[$one_contact['id_contact']] = $one_contact;\n        }\n\n        if (isset($this->customer_thread['id_contact'])) {\n            return [\n                $contacts[$this->customer_thread['id_contact']]\n            ];\n        }\n\n        return $contacts;\n    }\n\n    /**\n     * @return array\n     *\n     * @throws Exception\n     */\n    public function getTemplateVarOrders()\n    {\n        $orders = [];\n\n        if (empty($this->customer_thread['id_order'])\n            && isset($this->context->customer)\n            && $this->context->customer->isLogged()\n        ) {\n            $customer_orders = Order::getCustomerOrders($this->context->customer->id);\n\n            foreach ($customer_orders as $customer_order) {\n                $myOrder = new Order((int)$customer_order['id_order']);\n\n                if (Validate::isLoadedObject($myOrder)) {\n                    $orders[$customer_order['id_order']] = $customer_order;\n                    $orders[$customer_order['id_order']]['products'] = $myOrder->getProducts();\n                }\n            }\n        } elseif (isset($this->customer_thread['id_order']) && (int) $this->customer_thread['id_order'] > 0) {\n            $myOrder = new Order($this->customer_thread['id_order']);\n\n            if (Validate::isLoadedObject($myOrder)) {\n                $orders[$myOrder->id] = $this->context->controller->objectPresenter->present($myOrder);\n                $orders[$myOrder->id]['id_order'] = $myOrder->id;\n                $orders[$myOrder->id]['products'] = $myOrder->getProducts();\n            }\n        }\n\n        if (!empty($this->customer_thread['id_product'])) {\n            $id_order = isset($this->customer_thread['id_order']) ?\n                      (int) $this->customer_thread['id_order'] :\n                      0;\n\n            $orders[$id_order]['products'][(int)$this->customer_thread['id_product']] = $this->context->controller->objectPresenter->present(\n                new Product((int) $this->customer_thread['id_product'])\n            );\n        }\n\n        return $orders;\n    }\n\n    /**\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function sendMessage()\n    {\n        $extension = ['.txt', '.rtf', '.doc', '.docx', '.pdf', '.zip', '.png', '.jpeg', '.gif', '.jpg'];\n        $file_attachment = Tools::fileAttachment('fileUpload');\n        $message = trim(Tools::getValue('message'));\n        $url = Tools::getValue('url');\n        $clientToken = Tools::getValue('token');\n        $serverToken = $this->context->cookie->contactFormToken;\n        $clientTokenTTL = $this->context->cookie->contactFormTokenTTL;\n\n        if (!($from = trim(Tools::getValue('from'))) || !Validate::isEmail($from)) {\n            $this->context->controller->errors[] = $this->trans(\n                'Invalid email address.',\n                [],\n                'Shop.Notifications.Error'\n            );\n        } elseif (empty($message)) {\n            $this->context->controller->errors[] = $this->trans(\n                'The message cannot be blank.',\n                [],\n                'Shop.Notifications.Error'\n            );\n        } elseif (!Validate::isCleanHtml($message)) {\n            $this->context->controller->errors[] = $this->trans(\n                'Invalid message',\n                [],\n                'Shop.Notifications.Error'\n            );\n        } elseif (!($id_contact = (int)Tools::getValue('id_contact')) ||\n                  !(Validate::isLoadedObject($contact = new Contact($id_contact, $this->context->language->id)))\n        ) {\n            $this->context->controller->errors[] = $this->trans(\n                'Please select a subject from the list provided. ',\n                [],\n                'Modules.Contactform.Shop'\n            );\n        } elseif (!empty($file_attachment['name']) && $file_attachment['error'] != 0) {\n            $this->context->controller->errors[] = $this->trans(\n                'An error occurred during the file-upload process.',\n                [],\n                'Modules.Contactform.Shop'\n            );\n        } elseif (!empty($file_attachment['name']) &&\n                  !in_array(Tools::strtolower(Tools::substr($file_attachment['name'], -4)), $extension) &&\n                  !in_array(Tools::strtolower(Tools::substr($file_attachment['name'], -5)), $extension)\n        ) {\n            $this->context->controller->errors[] = $this->trans(\n                'Bad file extension',\n                [],\n                'Modules.Contactform.Shop'\n            );\n        } elseif ($url !== ''\n            || empty($serverToken)\n            || $clientToken !== $serverToken\n            || $clientTokenTTL < time()\n        ) {\n            $this->context->controller->errors[] = $this->trans(\n                'An error occurred while sending the message, please try again.',\n                [],\n                'Modules.Contactform.Shop'\n            );\n            $this->createNewToken();\n        } else {\n            $customer = $this->context->customer;\n\n            if (!$customer->id) {\n                $customer->getByEmail($from);\n            }\n\n            /**\n             * Check that the order belongs to the customer.\n             */\n            $id_order = (int) Tools::getValue('id_order');\n            if (!empty($id_order)) {\n                $order = new Order($id_order);\n                $id_order = (int) $order->id_customer === (int) $customer->id ? $id_order : 0;\n            }\n\n            $id_customer_thread = CustomerThread::getIdCustomerThreadByEmailAndIdOrder($from, $id_order);\n\n            if ($contact->customer_service) {\n                if ((int)$id_customer_thread) {\n                    $ct = new CustomerThread($id_customer_thread);\n                    $ct->status = 'open';\n                    $ct->id_lang = (int)$this->context->language->id;\n                    $ct->id_contact = (int)$id_contact;\n                    $ct->id_order = $id_order;\n\n                    if ($id_product = (int)Tools::getValue('id_product')) {\n                        $ct->id_product = $id_product;\n                    }\n                    $ct->update();\n                } else {\n                    $ct = new CustomerThread();\n                    if (isset($customer->id)) {\n                        $ct->id_customer = (int)$customer->id;\n                    }\n                    $ct->id_shop = (int)$this->context->shop->id;\n                    $ct->id_order = $id_order;\n\n                    if ($id_product = (int)Tools::getValue('id_product')) {\n                        $ct->id_product = $id_product;\n                    }\n                    $ct->id_contact = (int)$id_contact;\n                    $ct->id_lang = (int)$this->context->language->id;\n                    $ct->email = $from;\n                    $ct->status = 'open';\n                    $ct->token = Tools::passwdGen(12);\n                    $ct->add();\n                }\n\n                if ($ct->id) {\n                    $lastMessage = CustomerMessage::getLastMessageForCustomerThread($ct->id);\n                    $testFileUpload = (isset($file_attachment['rename']) && !empty($file_attachment['rename']));\n\n                    // if last message is the same as new message (and no file upload), do not consider this contact\n                    if ($lastMessage != $message || $testFileUpload) {\n                        $cm = new CustomerMessage();\n                        $cm->id_customer_thread = $ct->id;\n                        $cm->message = $message;\n\n                        if ($testFileUpload && rename($file_attachment['tmp_name'], _PS_UPLOAD_DIR_ . basename($file_attachment['rename']))) {\n                            $cm->file_name = $file_attachment['rename'];\n                            @chmod(_PS_UPLOAD_DIR_ . basename($file_attachment['rename']), 0664);\n                        }\n                        $cm->ip_address = (int)ip2long(Tools::getRemoteAddr());\n                        $cm->user_agent = $_SERVER['HTTP_USER_AGENT'];\n\n                        if (!$cm->add()) {\n                            $this->context->controller->errors[] = $this->trans(\n                                'An error occurred while sending the message.',\n                                [],\n                                'Modules.Contactform.Shop'\n                            );\n                        }\n                    } else {\n                        $mailAlreadySend = true;\n                    }\n                } else {\n                    $this->context->controller->errors[] = $this->trans(\n                        'An error occurred while sending the message.',\n                        [],\n                        'Modules.Contactform.Shop'\n                    );\n                }\n            }\n            $sendConfirmationEmail = Configuration::get(self::SEND_CONFIRMATION_EMAIL);\n            $sendNotificationEmail = Configuration::get(self::SEND_NOTIFICATION_EMAIL);\n\n            if (!count($this->context->controller->errors)\n                && empty($mailAlreadySend)\n                && ($sendConfirmationEmail || $sendNotificationEmail)\n            ) {\n                $var_list = [\n                    '{firstname}' => '',\n                    '{lastname}' => '',\n                    '{order_name}' => '-',\n                    '{attached_file}' => '-',\n                    '{message}' => Tools::nl2br(Tools::htmlentitiesUTF8(Tools::stripslashes($message))),\n                    '{email}' =>  $from,\n                    '{product_name}' => '',\n                ];\n\n                if (isset($customer->id)) {\n                    $var_list['{firstname}'] = $customer->firstname;\n                    $var_list['{lastname}'] = $customer->lastname;\n                }\n\n                if (isset($file_attachment['name'])) {\n                    $var_list['{attached_file}'] = $file_attachment['name'];\n                }\n                $id_product = (int)Tools::getValue('id_product');\n\n                if (isset($ct) && Validate::isLoadedObject($ct) && $ct->id_order) {\n                    $order = new Order((int)$ct->id_order);\n                    $var_list['{order_name}'] = $order->getUniqReference();\n                    $var_list['{id_order}'] = (int)$order->id;\n                }\n\n                if ($id_product) {\n                    $product = new Product((int)$id_product);\n\n                    if (Validate::isLoadedObject($product) &&\n                        isset($product->name[Context::getContext()->language->id])\n                    ) {\n                        $var_list['{product_name}'] = $product->name[Context::getContext()->language->id];\n                    }\n                }\n\n                if ($sendNotificationEmail) {\n                    if (empty($contact->email) || !Mail::Send(\n                        $this->context->language->id,\n                        'contact',\n                        $this->trans('Message from contact form', [], 'Emails.Subject').' [no_sync]',\n                        $var_list,\n                        $contact->email,\n                        $contact->name,\n                        null,\n                        null,\n                        $file_attachment,\n                        null,\n                        _PS_MAIL_DIR_,\n                        false,\n                        null,\n                        null,\n                        $from\n                    )) {\n                        $this->context->controller->errors[] = $this->trans(\n                            'An error occurred while sending the message.',\n                            [],\n                            'Modules.Contactform.Shop'\n                        );\n                    }\n                }\n\n                if ($sendConfirmationEmail) {\n                    $var_list['{message}'] = self::MESSAGE_PLACEHOLDER_FOR_OLDER_VERSION;\n\n                    if (!Mail::Send(\n                        $this->context->language->id,\n                        'contact_form',\n                        ((isset($ct) && Validate::isLoadedObject($ct)) ? $this->trans(\n                            'Your message has been correctly sent #ct%thread_id% #tc%thread_token%',\n                            [\n                                '%thread_id%' => $ct->id,\n                                '%thread_token%' => $ct->token\n                            ],\n                            'Emails.Subject'\n                        ) : $this->trans('Your message has been correctly sent', [], 'Emails.Subject')),\n                        $var_list,\n                        $from,\n                        null,\n                        null,\n                        null,\n                        $file_attachment,\n                        null,\n                        _PS_MAIL_DIR_,\n                        false,\n                        null,\n                        null,\n                        $contact->email\n                    )) {\n                        $this->context->controller->errors[] = $this->trans(\n                            'An error occurred while sending the message.',\n                            [],\n                            'Modules.Contactform.Shop'\n                        );\n                    }\n                }\n            }\n\n            if (!count($this->context->controller->errors)) {\n                $this->context->controller->success[] = $this->trans(\n                    'Your message has been successfully sent to our team.',\n                    [],\n                    'Modules.Contactform.Shop'\n                );\n            }\n        }\n    }\n}\n"], "filenames": ["contactform.php"], "buggy_code_start_loc": [320], "buggy_code_end_loc": [590], "fixing_code_start_loc": [320], "fixing_code_end_loc": [591], "type": "CWE-79", "message": "In PrestaShop contactform module (prestashop/contactform) before version 4.3.0, an attacker is able to inject JavaScript while using the contact form. The `message` field was incorrectly unescaped, possibly allowing attackers to execute arbitrary JavaScript in a victim's browser.", "other": {"cve": {"id": "CVE-2020-15178", "sourceIdentifier": "security-advisories@github.com", "published": "2020-09-15T18:15:13.877", "lastModified": "2020-09-21T17:07:36.477", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop contactform module (prestashop/contactform) before version 4.3.0, an attacker is able to inject JavaScript while using the contact form. The `message` field was incorrectly unescaped, possibly allowing attackers to execute arbitrary JavaScript in a victim's browser."}, {"lang": "es", "value": "En el m\u00f3dulo contactform de PrestaShop (prestashop/contactform) versiones anteriores a 4.3.0, un atacante puede inyectar JavaScript mientras usa el formulario de contacto.&#xa0;El campo \"message\" estaba sin escapar incorrectamente, lo que posiblemente permiti\u00f3 a atacantes ejecutar JavaScript arbitrario en el navegador de la v\u00edctima"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 5.8}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:contactform:*:*:*:*:*:prestashop:*:*", "versionEndExcluding": "4.3.0", "matchCriteriaId": "2D315B2A-C7B6-4B31-AAE5-22DD265EA2A4"}]}]}], "references": [{"url": "https://github.com/PrestaShop/contactform/commit/ecd9f5d14920ec00885766a7cb41bcc5ed8bfa09", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/contactform/security/advisories/GHSA-95hx-62rh-gg96", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://packagist.org/packages/prestashop/contactform", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/contactform/commit/ecd9f5d14920ec00885766a7cb41bcc5ed8bfa09"}}