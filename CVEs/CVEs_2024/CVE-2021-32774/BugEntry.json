{"buggy_code": ["<?php\n\nuse MediaWiki\\MediaWikiServices;\n\nclass DataDumpPager extends TablePager {\n\n\tprivate $config = null;\n\tprivate $pageTitle;\n\tprivate $permissionManager = null;\n\n\tpublic function __construct( IContextSource $context, $pageTitle ) {\n\t\t$this->setContext( $context );\n\n\t\t$this->mDb = wfGetDB( DB_PRIMARY );\n\n\t\tif ( $this->getRequest()->getText( 'sort', 'dumps_date' ) == 'dumps_date' ) {\n\t\t\t$this->mDefaultDirection = IndexPager::DIR_DESCENDING;\n\t\t} else {\n\t\t\t$this->mDefaultDirection = IndexPager::DIR_ASCENDING;\n\t\t}\n\n\t\tparent::__construct( $context );\n\n\t\t$this->config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'datadump' );\n\t\t$this->pageTitle = $pageTitle;\n\t\t$this->permissionManager = MediaWikiServices::getInstance()->getPermissionManager();\n\t}\n\n\tpublic function getFieldNames() {\n\t\tstatic $headers = null;\n\n\t\t$headers = [\n\t\t\t'dumps_timestamp' => 'listfiles_date',\n\t\t\t'dumps_filename'  => 'datadump-table-header-name',\n\t\t\t'dumps_type'      => 'datadump-table-header-type',\n\t\t\t'dumps_size'      => 'datadump-table-header-size',\n\t\t\t'dumps_status'    => 'datadump-table-header-status',\n\t\t\t'dumps_delete'    => 'datadump-table-header-delete',\n\t\t];\n\n\t\tforeach ( $headers as &$msg ) {\n\t\t\t$msg = $this->msg( $msg )->text();\n\t\t}\n\n\t\treturn $headers;\n\t}\n\n\tpublic function formatValue( $name, $value ) {\n\t\t$row = $this->mCurrentRow;\n\n\t\tswitch ( $name ) {\n\t\t\tcase 'dumps_timestamp':\n\t\t\t\t$time = isset( $row->dumps_timestamp ) ? $row->dumps_timestamp : '';\n\t\t\t\t$formatted = htmlspecialchars(\n\t\t\t\t\t$this->getLanguage()->userTimeAndDate( $time, $this->getUser() )\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_type':\n\t\t\t\t$formatted = htmlspecialchars( $row->dumps_type );\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_filename';\n\t\t\t\t$formatted = $this->getDownloadUrl( $row );\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_status':\n\t\t\t\tif ( (int)$row->dumps_completed === 1 ) {\n\t\t\t\t\t$formatted = wfMessage( 'datadump-table-column-ready' )->text();\n\t\t\t\t} elseif ( (int)$row->dumps_failed === 1 ) {\n\t\t\t\t\t$formatted = wfMessage( 'datadump-table-column-failed' )->text();\n\t\t\t\t} else {\n\t\t\t\t\t$formatted = wfMessage( 'datadump-table-column-queued' )->text();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_size':\n\t\t\t\t$formatted = htmlspecialchars(\n\t\t\t\t\t$this->getLanguage()->formatSize( isset( $row->dumps_size ) ? $row->dumps_size : 0 ) );\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_delete':\n\t\t\t\t$linkRenderer = MediaWikiServices::getInstance()->getLinkRenderer();\n\n\t\t\t\t$query = [\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'type' => $row->dumps_type,\n\t\t\t\t\t'dump' => $row->dumps_filename\n\t\t\t\t];\n\n\t\t\t\t$formatted = $linkRenderer->makeLink( $this->pageTitle, wfMessage( 'datadump-delete-button' )->text(), [], $query );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$formatted = \"Unable to format $name\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $formatted;\n\t}\n\n\tpublic function getQueryInfo() {\n\t\treturn [\n\t\t\t'tables' => [ 'data_dump' ],\n\t\t\t'fields' => [ 'dumps_completed', 'dumps_failed', 'dumps_filename', 'dumps_size', 'dumps_timestamp', 'dumps_type' ],\n\t\t\t'conds' => [],\n\t\t\t'joins_conds' => [],\n\t\t];\n\t}\n\n\tpublic function getDefaultSort() {\n\t\treturn 'dumps_timestamp';\n\t}\n\n\tpublic function isFieldSortable( $name ) {\n\t\treturn true;\n\t}\n\n\tpublic function getForm() {\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\n\t\t$opts = [];\n\n\t\t$user = $this->getContext()->getUser();\n\t\tforeach ( $dataDumpConfig as $name => $value ) {\n\t\t\t$perm = $config[$name]['permissions']['generate'] ?? 'generate-dump';\n\t\t\tif ( $this->permissionManager->userHasRight( $user, $perm ) ) {\n\t\t\t\t$opts[$name] = $name;\n\t\t\t}\n\t\t}\n\n\t\tif ( !$opts ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$formDescriptor = [\n\t\t\t'generatedump' => [\n\t\t\t\t'type' => 'select',\n\t\t\t\t'label-message' => 'datadump-label-generate',\n\t\t\t\t'options' => $opts,\n\t\t\t\t'name' => 'generatedumptype',\n\t\t\t\t'required' => true,\n\t\t\t],\n\t\t];\n\n\t\tforeach ( $dataDumpConfig as $name => $value ) {\n\t\t\t$type = $dataDumpConfig[$name];\n\n\t\t\tif ( !( $type['htmlform'] ?? false ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$htmlform = $type['htmlform'];\n\n\t\t\t$formDescriptor[ $htmlform['name'] ] = $htmlform;\n\t\t}\n\n\t\t$htmlFormGenerate = HTMLForm::factory( 'ooui', $formDescriptor, $this->getContext(), 'searchForms' );\n\t\t$htmlFormGenerate->setMethod( 'post' )\n\t\t\t->setFormIdentifier( 'generateDumpForm' )\n\t\t\t->setSubmitCallback( [ $this, 'onGenerate' ] )\n\t\t\t->prepareForm()\n\t\t\t->show();\n\t}\n\n\tpublic function onGenerate( array $params ) {\n\t\t$out = $this->getOutput();\n\n\t\t$dataDumpDisableGenerate = $this->config->get( 'DataDumpDisableGenerate' );\n\t\tif ( $dataDumpDisableGenerate ) {\n\t\t\t$out->addHTML(\n\t\t\t\tHtml::errorBox( wfMessage( 'datadump-generated-disabled' )->escaped() )\n\t\t\t);\n\n\t\t\t$out->addHTML( \n\t\t\t\t'<br />' . Linker::specialLink( 'DataDump', 'datadump-refresh' ) \n\t\t\t);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\t\t$dbName = $this->config->get( 'DBname' );\n\n\t\tforeach ( $dataDumpConfig as $name => $value ) {\n\t\t\t$type = $dataDumpConfig[$name];\n\n\t\t\tif ( !( $type['htmlform'] ?? false ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$htmlform = $type['htmlform'];\n\t\t\t\n\t\t\tif ( ( $htmlform['noArgsValue'] ?? '' ) == $params[ $htmlform['name'] ] ) {\n\t\t\t\tcontinue;\t\n\t\t\t}\n\n\t\t\t$arguments = $type['generate']['arguments'] ?? [];\n\n\t\t\tforeach ( $arguments as $arg => $value ) {\n\t\t\t\t$args[$name]['generate']['arguments'][$arg] = $value . '=' . ( $htmlform['value'] ?? '' ) . $params[ $htmlform['name'] ];\n\t\t\t}\n\t\t}\n\n\t\t$type = $params['generatedump'];\n\t\tif ( !is_null( $type ) && $type !== '' ) {\n\n\t\t\t$user = $this->getContext()->getUser();\n\n\t\t\t$perm = $dataDumpConfig[$type]['permissions']['generate'];\n\t\t\tif ( !$this->permissionManager->userHasRight( $user, $perm) ) {\n\t\t\t\tthrow new PermissionsError( $perm );\n\t\t\t}\n\n\t\t\tif ( $this->getGenerateLimit( $type ) ) {\n\t\t\t\t$fileName = $dbName . '_' . $type . '_' .\n\t\t\t\t\tbin2hex( random_bytes( 10 ) ) .\n\t\t\t\t\t\t$dataDumpConfig[$type]['file_ending'];\n\t\t\t\t$this->mDb->insert(\n\t\t\t\t\t'data_dump',\n\t\t\t\t\t[\n\t\t\t\t\t\t'dumps_completed' => 0,\n\t\t\t\t\t\t'dumps_failed' => 0,\n\t\t\t\t\t\t'dumps_filename' => $fileName,\n\t\t\t\t\t\t'dumps_timestamp' => $this->mDb->timestamp(),\n\t\t\t\t\t\t'dumps_type' => $type\n\t\t\t\t\t],\n\t\t\t\t\t__METHOD__\n\t\t\t\t);\n\n\t\t\t\t$logEntry = new ManualLogEntry( 'datadump', 'generate' );\n\t\t\t\t$logEntry->setPerformer( $user );\n\t\t\t\t$logEntry->setTarget( $this->pageTitle );\n\t\t\t\t$logEntry->setComment( 'Generated dump' );\n\t\t\t\t$logEntry->setParameters( [ '4::filename' => $fileName ] );\n\t\t\t\t$logEntry->publish( $logEntry->insert() );\n\n\t\t\t\t$jobParams = [\n\t\t\t\t\t'fileName' => $fileName,\n\t\t\t\t\t'type' => $type,\n\t\t\t\t\t'arguments' => $args[$type]['generate']['arguments'] ?? []\n\t\t\t\t];\n\n\t\t\t\t$job = new DataDumpGenerateJob(\n\t\t\t\t\tTitle::newFromText( 'Special:DataDump' ), $jobParams );\n\t\t\t\tJobQueueGroup::singleton()->push( $job );\n\n\t\t\t\t$out->addHTML(\n\t\t\t\t\tHtml::successBox( wfMessage( 'datadump-generated-success' )->escaped() )\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\treturn 'Invalid type.';\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate function getGenerateLimit( string $type ) {\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\n\t\tif ( isset( $dataDumpConfig[$type]['limit'] ) && $dataDumpConfig[$type]['limit'] ) {\n\t\t\t$db = wfGetDB( DB_PRIMARY );\n\t\t\t$row = $db->selectRow(\n\t\t\t\t'data_dump',\n\t\t\t\t'*',\n\t\t\t\t[\n\t\t\t\t\t'dumps_type' => $type\n\t\t\t\t]\n\t\t\t);\n\n\t\t\t$limit = $dataDumpConfig[$type]['limit'];\n\n\t\t\tif ( (int)$row < $limit ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->getOutput()->addHTML(\n\t\t\t\t\tHtml::errorBox( wfMessage( 'datadump-generated-error', $limit )->escaped() )\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\t\n\tprivate function getDownloadUrl( object $row ) {\n\t\t// Do not create a link if the file has not been created.\n\t\tif ( (int)$row->dumps_completed !== 1 ) {\n\t\t\treturn $row->dumps_filename;\n\t\t}\n\n\t\t// If wgDataDumpDownloadUrl is configured, use that\n\t\t// rather than using the internal streamer.\n\t\tif ( $this->config->get( 'DataDumpDownloadUrl' ) ) {\n\t\t\t$url = preg_replace(\n\t\t\t\t'/\\$\\{filename\\}/im',\n\t\t\t\t$row->dumps_filename,\n\t\t\t\t$this->config->get( 'DataDumpDownloadUrl' )\n\t\t\t);\n\t\t\treturn Linker::makeExternalLink( $url, $row->dumps_filename );\n\t\t}\n\n\t\t$linkRenderer = MediaWikiServices::getInstance()->getLinkRenderer();\n\n\t\t$query = [\n\t\t\t'action' => 'download',\n\t\t\t'dump' => $row->dumps_filename\n\t\t];\n\n\t\treturn $linkRenderer->makeLink( $this->pageTitle, $row->dumps_filename, [], $query );\n\t}\n}\n", "<?php\n\nuse MediaWiki\\MediaWikiServices;\n\n/**\n * Special Page for users to generate there own wiki dump e.g xml dump, image dump.\n *\n * Primarily made for wiki farms.\n *\n * @author Paladox\n */\nclass SpecialDataDump extends SpecialPage {\n\n\tprivate $config = null;\n\tprivate $permissionManager = null;\n\n\tpublic function __construct() {\n\t\tparent::__construct( 'DataDump', 'view-dump' );\n\n\t\t$this->config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'datadump' );\n\t\t$this->permissionManager = MediaWikiServices::getInstance()->getPermissionManager();\n\t}\n\n\tpublic function execute( $par ) {\n\t\t$this->setHeaders();\n\t\t$this->outputHeader();\n\n\t\t$this->checkPermissions();\n\n\t\t$out = $this->getOutput();\n\t\n\t\t$request = $this->getRequest();\n\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\t\tif ( !$dataDumpConfig ) {\n\t\t\t$out->addWikiMsg( 'datadump-not-configured' );\n\t\t\treturn;\n\t\t}\n\n\t\t$out->addWikiMsg( 'datadump-desc' );\n\n\t\t$dataDumpInfo = $this->config->get( 'DataDumpInfo' );\n\t\tif ( $dataDumpInfo != '' ) {\n\t\t\t$out->addWikiMsg( $dataDumpInfo );\n\t\t}\n\n\t\t$action = $request->getVal( 'action' );\n\t\tif ( $action ) {\n\t\t\t$dump = $request->getVal( 'dump' );\n\t\t\t$type = $request->getVal( 'type' );\n\n\t\t\tif ( $action === 'download' && $dump ) {\n\t\t\t\t$this->doDownload( $dump );\n\t\t\t} elseif ( $action === 'delete' && $type && $dump ) {\n\t\t\t\t$this->doDelete( $type, $dump );\n\t\t\t}\n\t\t}\n\n\t\t$pager = new DataDumpPager( $this->getContext(), $this->getPageTitle() );\n\n\t\t$out->addModuleStyles( 'mediawiki.special' );\n\n\t\t$pager->getForm();\n\t\t$out->addParserOutputContent( $pager->getFullOutput() );\n\t}\n\n\tprivate function doDownload( string $fileName ) {\n\t\t$out = $this->getOutput();\n\t\t$out->disable();\n\n\t\t$backend = DataDump::getBackend();\n\t\t$backend->streamFile( [\n\t\t\t'src'     =>\n\t\t\t\t$backend->getRootStoragePath() . '/dumps-backup/' . $fileName,\n\t\t\t'headers' => [\n\t\t\t\t'Expires: ' . gmdate( 'D, d M Y H:i:s', 0 ) . ' GMT',\n\t\t\t\t'Cache-Control: no-cache, no-store, max-age=0, must-revalidate',\n\t\t\t\t'Pragma: no-cache',\n\t\t\t\t'Content-Disposition: attachment; filename=\"' . $fileName . '\"',\n\t\t\t]\n\t\t] )->isOK();\n\n\t\treturn true;\n\t}\n\n\tprivate function doDelete( string $type, string $fileName ) {\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\n\t\tif ( !isset( $dataDumpConfig[$type] ) ) {\n\t\t\treturn 'Invalid dump type, or the config is configured wrong';\n\t\t}\n\n\t\t$perm = $dataDumpConfig[$type]['permissions']['delete'] ?? 'delete-dump';\n\t\tif ( !$this->permissionManager->userHasRight( $this->getUser(), $perm ) ) {\n\t\t\tthrow new PermissionsError( $perm );\n\t\t}\n\n\t\t$dbw = wfGetDB( DB_PRIMARY );\n\n\t\tif ( !$dbw->selectRow(  'data_dump', 'dumps_filename', [ 'dumps_filename' => $fileName ] ) ) {\n\t\t\t$this->getOutput()->addHTML(\n\t\t\t\tHtml::errorBox( wfMessage( 'datadump-dump-does-not-exist', $fileName )->escaped() )\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t$backend = DataDump::getBackend();\n\t\t$fileBackend = $backend->getRootStoragePath() . \"/dumps-backup/{$fileName}\";\n\n\t\tif ( $backend->fileExists( [ 'src' => $fileBackend ] ) ) {\n\t\t\t$delete = $backend->quickDelete( [ 'src' => $fileBackend ] );\n\t\t\tif ( $delete->isOK() ) {\n\t\t\t\t$this->onDeleteDump( $dbw, $fileName );\n\t\t\t} else {\n\t\t\t\t$this->onDeleteFailureDump( $dbw, $fileName );\n\t\t\t}\n\t\t} else {\n\t\t\t$this->onDeleteDump( $dbw, $fileName );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate function onDeleteDump( $dbw, $fileName ) {\n\t\t$logEntry = new ManualLogEntry( 'datadump', 'delete' );\n\t\t$logEntry->setPerformer( $this->getUser() );\n\t\t$logEntry->setTarget( $this->getPageTitle() );\n\t\t$logEntry->setComment( 'Deleted dumps' );\n\t\t$logEntry->setParameters( [ '4::filename' => $fileName ] );\n\t\t$logEntry->publish( $logEntry->insert() );\n\t\t\n\t\t$dbw->delete(\n\t\t\t'data_dump',\n\t\t\t[\n\t\t\t\t'dumps_filename' => $fileName\n\t\t\t],\n\t\t\t__METHOD__\n\t\t);\n\n\t\t$this->getOutput()->addHTML(\n\t\t\tHtml::successBox( wfMessage( 'datadump-delete-success' )->escaped() ) \n\t\t);\n\t}\n\n\tprivate function onDeleteFailureDump( $dbw, $fileName ) {\n\t\t$dbw->update(\n\t\t\t'data_dump',\n\t\t\t[\n\t\t\t\t'dumps_failed' => 1\n\t\t\t],\n\t\t\t[\n\t\t\t\t'dumps_filename' => $fileName\n\t\t\t],\n\t\t\t__METHOD__\n\t\t);\n\n\t\t$this->getOutput()->addHTML(\n\t\t\tHtml::errorBox( wfMessage( 'datadump-delete-failed' )->escaped() ) \n\t\t);\n\t}\n\n\tprotected function getGroupName() {\n\t\treturn 'wiki';\n\t}\n}\n"], "fixing_code": ["<?php\n\nuse MediaWiki\\MediaWikiServices;\n\nclass DataDumpPager extends TablePager {\n\n\tprivate $config = null;\n\tprivate $pageTitle;\n\tprivate $permissionManager = null;\n\n\tpublic function __construct( IContextSource $context, $pageTitle ) {\n\t\t$this->setContext( $context );\n\n\t\t$this->mDb = wfGetDB( DB_PRIMARY );\n\n\t\tif ( $this->getRequest()->getText( 'sort', 'dumps_date' ) == 'dumps_date' ) {\n\t\t\t$this->mDefaultDirection = IndexPager::DIR_DESCENDING;\n\t\t} else {\n\t\t\t$this->mDefaultDirection = IndexPager::DIR_ASCENDING;\n\t\t}\n\n\t\tparent::__construct( $context );\n\n\t\t$this->config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'datadump' );\n\t\t$this->pageTitle = $pageTitle;\n\t\t$this->permissionManager = MediaWikiServices::getInstance()->getPermissionManager();\n\t}\n\n\tpublic function getFieldNames() {\n\t\tstatic $headers = null;\n\n\t\t$headers = [\n\t\t\t'dumps_timestamp' => 'listfiles_date',\n\t\t\t'dumps_filename'  => 'datadump-table-header-name',\n\t\t\t'dumps_type'      => 'datadump-table-header-type',\n\t\t\t'dumps_size'      => 'datadump-table-header-size',\n\t\t\t'dumps_status'    => 'datadump-table-header-status',\n\t\t\t'dumps_delete'    => 'datadump-table-header-delete',\n\t\t];\n\n\t\tforeach ( $headers as &$msg ) {\n\t\t\t$msg = $this->msg( $msg )->text();\n\t\t}\n\n\t\treturn $headers;\n\t}\n\n\tpublic function formatValue( $name, $value ) {\n\t\t$row = $this->mCurrentRow;\n\n\t\tswitch ( $name ) {\n\t\t\tcase 'dumps_timestamp':\n\t\t\t\t$time = isset( $row->dumps_timestamp ) ? $row->dumps_timestamp : '';\n\t\t\t\t$formatted = htmlspecialchars(\n\t\t\t\t\t$this->getLanguage()->userTimeAndDate( $time, $this->getUser() )\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_type':\n\t\t\t\t$formatted = htmlspecialchars( $row->dumps_type );\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_filename';\n\t\t\t\t$formatted = $this->getDownloadUrl( $row );\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_status':\n\t\t\t\tif ( (int)$row->dumps_completed === 1 ) {\n\t\t\t\t\t$formatted = wfMessage( 'datadump-table-column-ready' )->text();\n\t\t\t\t} elseif ( (int)$row->dumps_failed === 1 ) {\n\t\t\t\t\t$formatted = wfMessage( 'datadump-table-column-failed' )->text();\n\t\t\t\t} else {\n\t\t\t\t\t$formatted = wfMessage( 'datadump-table-column-queued' )->text();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_size':\n\t\t\t\t$formatted = htmlspecialchars(\n\t\t\t\t\t$this->getLanguage()->formatSize( isset( $row->dumps_size ) ? $row->dumps_size : 0 ) );\n\t\t\t\tbreak;\n\t\t\tcase 'dumps_delete':\n\t\t\t\t$query = [\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'type' => $row->dumps_type,\n\t\t\t\t\t'dump' => $row->dumps_filename\n\t\t\t\t];\n\t\t\t\t$link = $this->pageTitle->getLinkURL( $query );\n\t\t\t\t$element = Html::element(\n\t\t\t\t\t'input', \n\t\t\t\t\t[\n\t\t\t\t\t\t'type' => 'submit',\n\t\t\t\t\t\t'title' => $this->pageTitle,\n\t\t\t\t\t\t'value' => wfMessage('datadump-delete-button')->text()\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t\t$token = Html::element(\n\t\t\t\t\t'input',\n\t\t\t\t\t[\n\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t'name' => 'token',\n\t\t\t\t\t\t'value' => $this->getUser()->getEditToken()\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t\t$formatted = Html::openElement(\n\t\t\t\t\t'form',\n\t\t\t\t\t[\n\t\t\t\t\t\t'action' => $link,\n\t\t\t\t\t\t'method' => 'POST'\n\t\t\t\t\t]\n\t\t\t\t) . $element . $token . Html::closeElement('form');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$formatted = \"Unable to format $name\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $formatted;\n\t}\n\n\tpublic function getQueryInfo() {\n\t\treturn [\n\t\t\t'tables' => [ 'data_dump' ],\n\t\t\t'fields' => [ 'dumps_completed', 'dumps_failed', 'dumps_filename', 'dumps_size', 'dumps_timestamp', 'dumps_type' ],\n\t\t\t'conds' => [],\n\t\t\t'joins_conds' => [],\n\t\t];\n\t}\n\n\tpublic function getDefaultSort() {\n\t\treturn 'dumps_timestamp';\n\t}\n\n\tpublic function isFieldSortable( $name ) {\n\t\treturn true;\n\t}\n\n\tpublic function getForm() {\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\n\t\t$opts = [];\n\n\t\t$user = $this->getContext()->getUser();\n\t\tforeach ( $dataDumpConfig as $name => $value ) {\n\t\t\t$perm = $config[$name]['permissions']['generate'] ?? 'generate-dump';\n\t\t\tif ( $this->permissionManager->userHasRight( $user, $perm ) ) {\n\t\t\t\t$opts[$name] = $name;\n\t\t\t}\n\t\t}\n\n\t\tif ( !$opts ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$formDescriptor = [\n\t\t\t'generatedump' => [\n\t\t\t\t'type' => 'select',\n\t\t\t\t'label-message' => 'datadump-label-generate',\n\t\t\t\t'options' => $opts,\n\t\t\t\t'name' => 'generatedumptype',\n\t\t\t\t'required' => true,\n\t\t\t],\n\t\t];\n\n\t\tforeach ( $dataDumpConfig as $name => $value ) {\n\t\t\t$type = $dataDumpConfig[$name];\n\n\t\t\tif ( !( $type['htmlform'] ?? false ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$htmlform = $type['htmlform'];\n\n\t\t\t$formDescriptor[ $htmlform['name'] ] = $htmlform;\n\t\t}\n\n\t\t$htmlFormGenerate = HTMLForm::factory( 'ooui', $formDescriptor, $this->getContext(), 'searchForms' );\n\t\t$htmlFormGenerate->setMethod( 'post' )\n\t\t\t->setFormIdentifier( 'generateDumpForm' )\n\t\t\t->setSubmitCallback( [ $this, 'onGenerate' ] )\n\t\t\t->prepareForm()\n\t\t\t->show();\n\t}\n\n\tpublic function onGenerate( array $params ) {\n\t\t$out = $this->getOutput();\n\n\t\t$dataDumpDisableGenerate = $this->config->get( 'DataDumpDisableGenerate' );\n\t\tif ( $dataDumpDisableGenerate ) {\n\t\t\t$out->addHTML(\n\t\t\t\tHtml::errorBox( wfMessage( 'datadump-generated-disabled' )->escaped() )\n\t\t\t);\n\n\t\t\t$out->addHTML( \n\t\t\t\t'<br />' . Linker::specialLink( 'DataDump', 'datadump-refresh' ) \n\t\t\t);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\t\t$dbName = $this->config->get( 'DBname' );\n\n\t\tforeach ( $dataDumpConfig as $name => $value ) {\n\t\t\t$type = $dataDumpConfig[$name];\n\n\t\t\tif ( !( $type['htmlform'] ?? false ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$htmlform = $type['htmlform'];\n\t\t\t\n\t\t\tif ( ( $htmlform['noArgsValue'] ?? '' ) == $params[ $htmlform['name'] ] ) {\n\t\t\t\tcontinue;\t\n\t\t\t}\n\n\t\t\t$arguments = $type['generate']['arguments'] ?? [];\n\n\t\t\tforeach ( $arguments as $arg => $value ) {\n\t\t\t\t$args[$name]['generate']['arguments'][$arg] = $value . '=' . ( $htmlform['value'] ?? '' ) . $params[ $htmlform['name'] ];\n\t\t\t}\n\t\t}\n\n\t\t$type = $params['generatedump'];\n\t\tif ( !is_null( $type ) && $type !== '' ) {\n\n\t\t\t$user = $this->getContext()->getUser();\n\n\t\t\t$perm = $dataDumpConfig[$type]['permissions']['generate'];\n\t\t\tif ( !$this->permissionManager->userHasRight( $user, $perm) ) {\n\t\t\t\tthrow new PermissionsError( $perm );\n\t\t\t} elseif ( !$user->matchEditToken( $this->getContext()->getRequest()->getText( 'wpEditToken' ) ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( $this->getGenerateLimit( $type ) ) {\n\t\t\t\t$fileName = $dbName . '_' . $type . '_' .\n\t\t\t\t\tbin2hex( random_bytes( 10 ) ) .\n\t\t\t\t\t\t$dataDumpConfig[$type]['file_ending'];\n\t\t\t\t$this->mDb->insert(\n\t\t\t\t\t'data_dump',\n\t\t\t\t\t[\n\t\t\t\t\t\t'dumps_completed' => 0,\n\t\t\t\t\t\t'dumps_failed' => 0,\n\t\t\t\t\t\t'dumps_filename' => $fileName,\n\t\t\t\t\t\t'dumps_timestamp' => $this->mDb->timestamp(),\n\t\t\t\t\t\t'dumps_type' => $type\n\t\t\t\t\t],\n\t\t\t\t\t__METHOD__\n\t\t\t\t);\n\n\t\t\t\t$logEntry = new ManualLogEntry( 'datadump', 'generate' );\n\t\t\t\t$logEntry->setPerformer( $user );\n\t\t\t\t$logEntry->setTarget( $this->pageTitle );\n\t\t\t\t$logEntry->setComment( 'Generated dump' );\n\t\t\t\t$logEntry->setParameters( [ '4::filename' => $fileName ] );\n\t\t\t\t$logEntry->publish( $logEntry->insert() );\n\n\t\t\t\t$jobParams = [\n\t\t\t\t\t'fileName' => $fileName,\n\t\t\t\t\t'type' => $type,\n\t\t\t\t\t'arguments' => $args[$type]['generate']['arguments'] ?? []\n\t\t\t\t];\n\n\t\t\t\t$job = new DataDumpGenerateJob(\n\t\t\t\t\tTitle::newFromText( 'Special:DataDump' ), $jobParams );\n\t\t\t\tJobQueueGroup::singleton()->push( $job );\n\n\t\t\t\t$out->addHTML(\n\t\t\t\t\tHtml::successBox( wfMessage( 'datadump-generated-success' )->escaped() )\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\treturn 'Invalid type.';\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate function getGenerateLimit( string $type ) {\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\n\t\tif ( isset( $dataDumpConfig[$type]['limit'] ) && $dataDumpConfig[$type]['limit'] ) {\n\t\t\t$db = wfGetDB( DB_PRIMARY );\n\t\t\t$row = $db->selectRow(\n\t\t\t\t'data_dump',\n\t\t\t\t'*',\n\t\t\t\t[\n\t\t\t\t\t'dumps_type' => $type\n\t\t\t\t]\n\t\t\t);\n\n\t\t\t$limit = $dataDumpConfig[$type]['limit'];\n\n\t\t\tif ( (int)$row < $limit ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->getOutput()->addHTML(\n\t\t\t\t\tHtml::errorBox( wfMessage( 'datadump-generated-error', $limit )->escaped() )\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\t\n\tprivate function getDownloadUrl( object $row ) {\n\t\t// Do not create a link if the file has not been created.\n\t\tif ( (int)$row->dumps_completed !== 1 ) {\n\t\t\treturn $row->dumps_filename;\n\t\t}\n\n\t\t// If wgDataDumpDownloadUrl is configured, use that\n\t\t// rather than using the internal streamer.\n\t\tif ( $this->config->get( 'DataDumpDownloadUrl' ) ) {\n\t\t\t$url = preg_replace(\n\t\t\t\t'/\\$\\{filename\\}/im',\n\t\t\t\t$row->dumps_filename,\n\t\t\t\t$this->config->get( 'DataDumpDownloadUrl' )\n\t\t\t);\n\t\t\treturn Linker::makeExternalLink( $url, $row->dumps_filename );\n\t\t}\n\n\t\t$linkRenderer = MediaWikiServices::getInstance()->getLinkRenderer();\n\n\t\t$query = [\n\t\t\t'action' => 'download',\n\t\t\t'dump' => $row->dumps_filename\n\t\t];\n\n\t\treturn $linkRenderer->makeLink( $this->pageTitle, $row->dumps_filename, [], $query );\n\t}\n}\n", "<?php\n\nuse MediaWiki\\MediaWikiServices;\n\n/**\n * Special Page for users to generate there own wiki dump e.g xml dump, image dump.\n *\n * Primarily made for wiki farms.\n *\n * @author Paladox\n */\nclass SpecialDataDump extends SpecialPage {\n\n\tprivate $config = null;\n\tprivate $permissionManager = null;\n\n\tpublic function __construct() {\n\t\tparent::__construct( 'DataDump', 'view-dump' );\n\n\t\t$this->config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'datadump' );\n\t\t$this->permissionManager = MediaWikiServices::getInstance()->getPermissionManager();\n\t}\n\n\tpublic function execute( $par ) {\n\t\t$this->setHeaders();\n\t\t$this->outputHeader();\n\n\t\t$this->checkPermissions();\n\n\t\t$out = $this->getOutput();\n\t\n\t\t$request = $this->getRequest();\n\t\t\n\t\t$user = $this->getUser();\n\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\t\tif ( !$dataDumpConfig ) {\n\t\t\t$out->addWikiMsg( 'datadump-not-configured' );\n\t\t\treturn;\n\t\t}\n\n\t\t$out->addWikiMsg( 'datadump-desc' );\n\n\t\t$dataDumpInfo = $this->config->get( 'DataDumpInfo' );\n\t\tif ( $dataDumpInfo != '' ) {\n\t\t\t$out->addWikiMsg( $dataDumpInfo );\n\t\t}\n\n\t\t$action = $request->getVal( 'action' );\n\t\tif ( $action ) {\n\t\t\t$dump = $request->getVal( 'dump' );\n\t\t\t$type = $request->getVal( 'type' );\n\n\t\t\tif ( $action === 'download' && $dump ) {\n\t\t\t\t$this->doDownload( $dump );\n\t\t\t} elseif ( $action === 'delete' && $type && $dump ) {\n\t\t\t\tif ( $user->matchEditToken($request->getVal('token'))) {\n\t\t\t\t\t$this->doDelete( $type, $dump );\n\t\t\t\t} else { \n\t\t\t\t\t$out->addWikiMsg( 'sessionfailure' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$pager = new DataDumpPager( $this->getContext(), $this->getPageTitle() );\n\n\t\t$out->addModuleStyles( 'mediawiki.special' );\n\n\t\t$pager->getForm();\n\t\t$out->addParserOutputContent( $pager->getFullOutput() );\n\t}\n\n\tprivate function doDownload( string $fileName ) {\n\t\t$out = $this->getOutput();\n\t\t$out->disable();\n\n\t\t$backend = DataDump::getBackend();\n\t\t$backend->streamFile( [\n\t\t\t'src'     =>\n\t\t\t\t$backend->getRootStoragePath() . '/dumps-backup/' . $fileName,\n\t\t\t'headers' => [\n\t\t\t\t'Expires: ' . gmdate( 'D, d M Y H:i:s', 0 ) . ' GMT',\n\t\t\t\t'Cache-Control: no-cache, no-store, max-age=0, must-revalidate',\n\t\t\t\t'Pragma: no-cache',\n\t\t\t\t'Content-Disposition: attachment; filename=\"' . $fileName . '\"',\n\t\t\t]\n\t\t] )->isOK();\n\n\t\treturn true;\n\t}\n\n\tprivate function doDelete( string $type, string $fileName ) {\n\t\t$dataDumpConfig = $this->config->get( 'DataDump' );\n\n\t\tif ( !isset( $dataDumpConfig[$type] ) ) {\n\t\t\treturn 'Invalid dump type, or the config is configured wrong';\n\t\t}\n\n\t\t$perm = $dataDumpConfig[$type]['permissions']['delete'] ?? 'delete-dump';\n\t\tif ( !$this->permissionManager->userHasRight( $this->getUser(), $perm ) ) {\n\t\t\tthrow new PermissionsError( $perm );\n\t\t}\n\n\t\t$dbw = wfGetDB( DB_PRIMARY );\n\n\t\tif ( !$dbw->selectRow(  'data_dump', 'dumps_filename', [ 'dumps_filename' => $fileName ] ) ) {\n\t\t\t$this->getOutput()->addHTML(\n\t\t\t\tHtml::errorBox( wfMessage( 'datadump-dump-does-not-exist', $fileName )->escaped() )\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t$backend = DataDump::getBackend();\n\t\t$fileBackend = $backend->getRootStoragePath() . \"/dumps-backup/{$fileName}\";\n\n\t\tif ( $backend->fileExists( [ 'src' => $fileBackend ] ) ) {\n\t\t\t$delete = $backend->quickDelete( [ 'src' => $fileBackend ] );\n\t\t\tif ( $delete->isOK() ) {\n\t\t\t\t$this->onDeleteDump( $dbw, $fileName );\n\t\t\t} else {\n\t\t\t\t$this->onDeleteFailureDump( $dbw, $fileName );\n\t\t\t}\n\t\t} else {\n\t\t\t$this->onDeleteDump( $dbw, $fileName );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate function onDeleteDump( $dbw, $fileName ) {\n\t\t$logEntry = new ManualLogEntry( 'datadump', 'delete' );\n\t\t$logEntry->setPerformer( $this->getUser() );\n\t\t$logEntry->setTarget( $this->getPageTitle() );\n\t\t$logEntry->setComment( 'Deleted dumps' );\n\t\t$logEntry->setParameters( [ '4::filename' => $fileName ] );\n\t\t$logEntry->publish( $logEntry->insert() );\n\t\t\n\t\t$dbw->delete(\n\t\t\t'data_dump',\n\t\t\t[\n\t\t\t\t'dumps_filename' => $fileName\n\t\t\t],\n\t\t\t__METHOD__\n\t\t);\n\n\t\t$this->getOutput()->addHTML(\n\t\t\tHtml::successBox( wfMessage( 'datadump-delete-success' )->escaped() ) \n\t\t);\n\t}\n\n\tprivate function onDeleteFailureDump( $dbw, $fileName ) {\n\t\t$dbw->update(\n\t\t\t'data_dump',\n\t\t\t[\n\t\t\t\t'dumps_failed' => 1\n\t\t\t],\n\t\t\t[\n\t\t\t\t'dumps_filename' => $fileName\n\t\t\t],\n\t\t\t__METHOD__\n\t\t);\n\n\t\t$this->getOutput()->addHTML(\n\t\t\tHtml::errorBox( wfMessage( 'datadump-delete-failed' )->escaped() ) \n\t\t);\n\t}\n\n\tprotected function getGroupName() {\n\t\treturn 'wiki';\n\t}\n}\n"], "filenames": ["includes/DataDumpPager.php", "includes/specials/SpecialDataDump.php"], "buggy_code_start_loc": [78, 32], "buggy_code_end_loc": [206, 56], "fixing_code_start_loc": [77, 33], "fixing_code_end_loc": [229, 62], "type": "CWE-352", "message": "DataDump is a MediaWiki extension that provides dumps of wikis. Prior to commit 67a82b76e186925330b89ace9c5fd893a300830b, DataDump had no protection against CSRF attacks so requests to generate or delete dumps could be forged. The vulnerability was patched in commit 67a82b76e186925330b89ace9c5fd893a300830b. There are no known workarounds. You must completely disable DataDump.", "other": {"cve": {"id": "CVE-2021-32774", "sourceIdentifier": "security-advisories@github.com", "published": "2021-07-20T01:15:40.597", "lastModified": "2021-07-28T19:00:20.840", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "DataDump is a MediaWiki extension that provides dumps of wikis. Prior to commit 67a82b76e186925330b89ace9c5fd893a300830b, DataDump had no protection against CSRF attacks so requests to generate or delete dumps could be forged. The vulnerability was patched in commit 67a82b76e186925330b89ace9c5fd893a300830b. There are no known workarounds. You must completely disable DataDump."}, {"lang": "es", "value": "DataDump es una extensi\u00f3n de MediaWiki que proporciona volcados de wikis. Anterior al commit 67a82b76e186925330b89ace9c5fd893a300830b, DataDump no ten\u00eda protecci\u00f3n contra ataques de tipo CSRF, por lo que las peticiones para generar o eliminar volcados pod\u00edan ser falsificadas. La vulnerabilidad fue parcheada en el commit 67a82b76e186925330b89ace9c5fd893a300830b. No hay soluciones conocidas. Debes desactivar completamente DataDump"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:miraheze:datadump:*:*:*:*:*:*:*:*", "versionEndExcluding": "2021-07-07", "matchCriteriaId": "106D06B4-4C0F-4168-BBD1-A08DFBB79752"}]}]}], "references": [{"url": "https://github.com/miraheze/DataDump/commit/67a82b76e186925330b89ace9c5fd893a300830b", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/miraheze/DataDump/security/advisories/GHSA-29mh-4vhv-x8mr", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://phabricator.miraheze.org/T7593", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/miraheze/DataDump/commit/67a82b76e186925330b89ace9c5fd893a300830b"}}