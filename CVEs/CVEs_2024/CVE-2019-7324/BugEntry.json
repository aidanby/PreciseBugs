{"buggy_code": ["<?php\n\nnamespace Kanboard\\Core;\n\nuse Kanboard\\Core\\Filter\\FormatterInterface;\nuse Pimple\\Container;\nuse PicoDb\\Table;\n\n/**\n * Paginator Helper\n *\n * @package  Kanboard\\Core\n * @author   Frederic Guillot\n */\nclass Paginator\n{\n    /**\n     * Container instance\n     *\n     * @access private\n     * @var \\Pimple\\Container\n     */\n    private $container;\n\n    /**\n     * Total number of items\n     *\n     * @access private\n     * @var integer\n     */\n    private $total = 0;\n\n    /**\n     * Page number\n     *\n     * @access private\n     * @var integer\n     */\n    private $page = 1;\n\n    /**\n     * Offset\n     *\n     * @access private\n     * @var integer\n     */\n    private $offset = 0;\n\n    /**\n     * Limit\n     *\n     * @access private\n     * @var integer\n     */\n    private $limit = 0;\n\n    /**\n     * Sort by this column\n     *\n     * @access private\n     * @var string\n     */\n    private $order = '';\n\n    /**\n     * Sorting direction\n     *\n     * @access private\n     * @var string\n     */\n    private $direction = 'ASC';\n\n    /**\n     * Slice of items\n     *\n     * @access private\n     * @var array\n     */\n    private $items = array();\n\n    /**\n     * PicoDb Table instance\n     *\n     * @access private\n     * @var \\Picodb\\Table\n     */\n    private $query = null;\n\n    /**\n     * Controller name\n     *\n     * @access private\n     * @var string\n     */\n    private $controller = '';\n\n    /**\n     * Action name\n     *\n     * @access private\n     * @var string\n     */\n    private $action = '';\n\n    /**\n     * URL anchor\n     *\n     * @access private\n     * @var string\n     */\n    private $anchor = '';\n\n    /**\n     * Url params\n     *\n     * @access private\n     * @var array\n     */\n    private $params = array();\n\n    /**\n     * @var FormatterInterface\n     */\n    protected $formatter = null;\n\n    /**\n     * Constructor\n     *\n     * @access public\n     * @param  \\Pimple\\Container   $container\n     */\n    public function __construct(Container $container)\n    {\n        $this->container = $container;\n    }\n\n    /**\n     * Set a PicoDb query\n     *\n     * @access public\n     * @param  \\PicoDb\\Table\n     * @return $this\n     */\n    public function setQuery(Table $query)\n    {\n        $this->query = $query;\n        $this->total = $this->query->count();\n        return $this;\n    }\n\n    /**\n     * Set Formatter\n     *\n     * @param  FormatterInterface $formatter\n     * @return $this\n     */\n    public function setFormatter(FormatterInterface $formatter)\n    {\n        $this->formatter = $formatter;\n        return $this;\n    }\n\n    /**\n     * Execute a PicoDb query\n     *\n     * @access public\n     * @return array\n     */\n    public function executeQuery()\n    {\n        if ($this->query !== null) {\n            $this->query\n                ->offset($this->offset)\n                ->limit($this->limit)\n                ->orderBy($this->order, $this->direction);\n\n            if ($this->formatter !== null) {\n                return $this->formatter->withQuery($this->query)->format();\n            } else {\n                return $this->query->findAll();\n            }\n        }\n\n        return array();\n    }\n\n    /**\n     * Set url parameters\n     *\n     * @access public\n     * @param  string      $controller\n     * @param  string      $action\n     * @param  array       $params\n     * @param  string      $anchor\n     * @return $this\n     */\n    public function setUrl($controller, $action, array $params = array(), $anchor = '')\n    {\n        $this->controller = $controller;\n        $this->action = $action;\n        $this->params = $params;\n        $this->anchor = $anchor;\n        return $this;\n    }\n\n    /**\n     * Add manually items\n     *\n     * @access public\n     * @param  array       $items\n     * @return $this\n     */\n    public function setCollection(array $items)\n    {\n        $this->items = $items;\n        return $this;\n    }\n\n    /**\n     * Return the items\n     *\n     * @access public\n     * @return array\n     */\n    public function getCollection()\n    {\n        return $this->items ?: $this->executeQuery();\n    }\n\n    /**\n     * Set the total number of items\n     *\n     * @access public\n     * @param  integer    $total\n     * @return $this\n     */\n    public function setTotal($total)\n    {\n        $this->total = $total;\n        return $this;\n    }\n\n    /**\n     * Get the total number of items\n     *\n     * @access public\n     * @return integer\n     */\n    public function getTotal()\n    {\n        return $this->total;\n    }\n\n    /**\n     * Set the default page number\n     *\n     * @access public\n     * @param  integer     $page\n     * @return $this\n     */\n    public function setPage($page)\n    {\n        $this->page = $page;\n        return $this;\n    }\n\n    /**\n     * Get the number of current page\n     *\n     * @access public\n     * @return integer\n     */\n    public function getPage()\n    {\n        return $this->page;\n    }\n\n    /**\n     * Set the default column order\n     *\n     * @access public\n     * @param  string     $order\n     * @return $this\n     */\n    public function setOrder($order)\n    {\n        $this->order = $order;\n        return $this;\n    }\n\n    /**\n     * Set the default sorting direction\n     *\n     * @access public\n     * @param  string    $direction\n     * @return $this\n     */\n    public function setDirection($direction)\n    {\n        $this->direction = $direction;\n        return $this;\n    }\n\n    /**\n     * Set the maximum number of items per page\n     *\n     * @access public\n     * @param  integer     $limit\n     * @return $this\n     */\n    public function setMax($limit)\n    {\n        $this->limit = $limit;\n        return $this;\n    }\n\n    /**\n     * Get the maximum number of items per page.\n     *\n     * @return int\n     */\n    public function getMax()\n    {\n        return $this->limit;\n    }\n\n    /**\n     * Return true if the collection is empty\n     *\n     * @access public\n     * @return boolean\n     */\n    public function isEmpty()\n    {\n        return $this->total === 0;\n    }\n\n    /**\n     * Execute the offset calculation only if the $condition is true\n     *\n     * @access public\n     * @param  boolean    $condition\n     * @return $this\n     */\n    public function calculateOnlyIf($condition)\n    {\n        if ($condition) {\n            $this->calculate();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Calculate the offset value according to url params and the page number\n     *\n     * @access public\n     * @return $this\n     */\n    public function calculate()\n    {\n        $this->page = $this->container['request']->getIntegerParam('page', 1);\n        $this->direction = $this->container['request']->getStringParam('direction', $this->direction);\n        $this->order = $this->container['request']->getStringParam('order', $this->order);\n\n        if ($this->page < 1) {\n            $this->page = 1;\n        }\n\n        $this->offset = (int) (($this->page - 1) * $this->limit);\n\n        return $this;\n    }\n\n    /**\n     * Get url params for link generation\n     *\n     * @access public\n     * @param  integer  $page\n     * @param  string   $order\n     * @param  string   $direction\n     * @return string\n     */\n    public function getUrlParams($page, $order, $direction)\n    {\n        $params = array(\n            'page' => $page,\n            'order' => $order,\n            'direction' => $direction,\n        );\n\n        return array_merge($this->params, $params);\n    }\n\n    /**\n     * Generate the previous link\n     *\n     * @access public\n     * @return string\n     */\n    public function generatePreviousLink()\n    {\n        $html = '<span class=\"pagination-previous\">';\n\n        if ($this->offset > 0) {\n            $html .= $this->container['helper']->url->link(\n                '&larr; '.t('Previous'),\n                $this->controller,\n                $this->action,\n                $this->getUrlParams($this->page - 1, $this->order, $this->direction),\n                false,\n                'js-modal-replace',\n                t('Previous'),\n                false,\n                $this->anchor\n            );\n        } else {\n            $html .= '&larr; '.t('Previous');\n        }\n\n        $html .= '</span>';\n\n        return $html;\n    }\n\n    /**\n     * Generate the next link\n     *\n     * @access public\n     * @return string\n     */\n    public function generateNextLink()\n    {\n        $html = '<span class=\"pagination-next\">';\n\n        if (($this->total - $this->offset) > $this->limit) {\n            $html .= $this->container['helper']->url->link(\n                t('Next').' &rarr;',\n                $this->controller,\n                $this->action,\n                $this->getUrlParams($this->page + 1, $this->order, $this->direction),\n                false,\n                'js-modal-replace',\n                t('Next'),\n                false,\n                $this->anchor\n            );\n        } else {\n            $html .= t('Next').' &rarr;';\n        }\n\n        $html .= '</span>';\n\n        return $html;\n    }\n\n    /**\n     * Generate the page showing.\n     *\n     * @access public\n     * @return string\n     */\n    public function generatePageShowing()\n    {\n        return '<span class=\"pagination-showing\">'.t('Showing %d-%d of %d', (($this->getPage() - 1) * $this->getMax() + 1), min($this->getTotal(), $this->getPage() * $this->getMax()), $this->getTotal()).'</span>';\n    }\n\n    /**\n     * Return true if there is no pagination to show\n     *\n     * @access public\n     * @return boolean\n     */\n    public function hasNothingToShow()\n    {\n        return $this->offset === 0 && ($this->total - $this->offset) <= $this->limit;\n    }\n\n    /**\n     * Generation pagination links\n     *\n     * @access public\n     * @return string\n     */\n    public function toHtml()\n    {\n        $html = '';\n\n        if (! $this->hasNothingToShow()) {\n            $html .= '<div class=\"pagination\">';\n            $html .= $this->generatePageShowing();\n            $html .= $this->generatePreviousLink();\n            $html .= $this->generateNextLink();\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Magic method to output pagination links\n     *\n     * @access public\n     * @return string\n     */\n    public function __toString()\n    {\n        return $this->toHtml();\n    }\n\n    /**\n     * Column sorting\n     *\n     * @param  string   $label         Column title\n     * @param  string   $column        SQL column name\n     * @return string\n     */\n    public function order($label, $column)\n    {\n        $prefix = '';\n        $direction = 'ASC';\n\n        if ($this->order === $column) {\n            $prefix = $this->direction === 'DESC' ? '&#9660; ' : '&#9650; ';\n            $direction = $this->direction === 'DESC' ? 'ASC' : 'DESC';\n        }\n\n        return $prefix.$this->container['helper']->url->link(\n            $label,\n            $this->controller,\n            $this->action,\n            $this->getUrlParams($this->page, $column, $direction),\n            false,\n            'js-modal-replace'\n        );\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Kanboard\\Core;\n\nuse Kanboard\\Core\\Filter\\FormatterInterface;\nuse Pimple\\Container;\nuse PicoDb\\Table;\n\n/**\n * Paginator Helper\n *\n * @package  Kanboard\\Core\n * @author   Frederic Guillot\n */\nclass Paginator\n{\n    /**\n     * Container instance\n     *\n     * @access private\n     * @var \\Pimple\\Container\n     */\n    private $container;\n\n    /**\n     * Total number of items\n     *\n     * @access private\n     * @var integer\n     */\n    private $total = 0;\n\n    /**\n     * Page number\n     *\n     * @access private\n     * @var integer\n     */\n    private $page = 1;\n\n    /**\n     * Offset\n     *\n     * @access private\n     * @var integer\n     */\n    private $offset = 0;\n\n    /**\n     * Limit\n     *\n     * @access private\n     * @var integer\n     */\n    private $limit = 0;\n\n    /**\n     * Sort by this column\n     *\n     * @access private\n     * @var string\n     */\n    private $order = '';\n\n    /**\n     * Sorting direction\n     *\n     * @access private\n     * @var string\n     */\n    private $direction = 'ASC';\n\n    /**\n     * Slice of items\n     *\n     * @access private\n     * @var array\n     */\n    private $items = array();\n\n    /**\n     * PicoDb Table instance\n     *\n     * @access private\n     * @var \\Picodb\\Table\n     */\n    private $query = null;\n\n    /**\n     * Controller name\n     *\n     * @access private\n     * @var string\n     */\n    private $controller = '';\n\n    /**\n     * Action name\n     *\n     * @access private\n     * @var string\n     */\n    private $action = '';\n\n    /**\n     * URL anchor\n     *\n     * @access private\n     * @var string\n     */\n    private $anchor = '';\n\n    /**\n     * Url params\n     *\n     * @access private\n     * @var array\n     */\n    private $params = array();\n\n    /**\n     * @var FormatterInterface\n     */\n    protected $formatter = null;\n\n    /**\n     * Constructor\n     *\n     * @access public\n     * @param  \\Pimple\\Container   $container\n     */\n    public function __construct(Container $container)\n    {\n        $this->container = $container;\n    }\n\n    /**\n     * Set a PicoDb query\n     *\n     * @access public\n     * @param  \\PicoDb\\Table\n     * @return $this\n     */\n    public function setQuery(Table $query)\n    {\n        $this->query = $query;\n        $this->total = $this->query->count();\n        return $this;\n    }\n\n    /**\n     * Set Formatter\n     *\n     * @param  FormatterInterface $formatter\n     * @return $this\n     */\n    public function setFormatter(FormatterInterface $formatter)\n    {\n        $this->formatter = $formatter;\n        return $this;\n    }\n\n    /**\n     * Execute a PicoDb query\n     *\n     * @access public\n     * @return array\n     */\n    public function executeQuery()\n    {\n        if ($this->query !== null) {\n\n            $this->query\n                ->offset($this->offset)\n                ->limit($this->limit);\n\n            if (preg_match('/^[a-zA-Z0-9._]+$/', $this->order)) {\n                $this->query->orderBy($this->order, $this->direction);\n            } else {\n                $this->order = '';\n            }\n\n            if ($this->formatter !== null) {\n                return $this->formatter->withQuery($this->query)->format();\n            } else {\n                return $this->query->findAll();\n            }\n        }\n\n        return array();\n    }\n\n    /**\n     * Set url parameters\n     *\n     * @access public\n     * @param  string      $controller\n     * @param  string      $action\n     * @param  array       $params\n     * @param  string      $anchor\n     * @return $this\n     */\n    public function setUrl($controller, $action, array $params = array(), $anchor = '')\n    {\n        $this->controller = $controller;\n        $this->action = $action;\n        $this->params = $params;\n        $this->anchor = $anchor;\n        return $this;\n    }\n\n    /**\n     * Add manually items\n     *\n     * @access public\n     * @param  array       $items\n     * @return $this\n     */\n    public function setCollection(array $items)\n    {\n        $this->items = $items;\n        return $this;\n    }\n\n    /**\n     * Return the items\n     *\n     * @access public\n     * @return array\n     */\n    public function getCollection()\n    {\n        return $this->items ?: $this->executeQuery();\n    }\n\n    /**\n     * Set the total number of items\n     *\n     * @access public\n     * @param  integer    $total\n     * @return $this\n     */\n    public function setTotal($total)\n    {\n        $this->total = $total;\n        return $this;\n    }\n\n    /**\n     * Get the total number of items\n     *\n     * @access public\n     * @return integer\n     */\n    public function getTotal()\n    {\n        return $this->total;\n    }\n\n    /**\n     * Set the default page number\n     *\n     * @access public\n     * @param  integer     $page\n     * @return $this\n     */\n    public function setPage($page)\n    {\n        $this->page = $page;\n        return $this;\n    }\n\n    /**\n     * Get the number of current page\n     *\n     * @access public\n     * @return integer\n     */\n    public function getPage()\n    {\n        return $this->page;\n    }\n\n    /**\n     * Set the default column order\n     *\n     * @access public\n     * @param  string     $order\n     * @return $this\n     */\n    public function setOrder($order)\n    {\n        $this->order = $order;\n        return $this;\n    }\n\n    /**\n     * Set the default sorting direction\n     *\n     * @access public\n     * @param  string    $direction\n     * @return $this\n     */\n    public function setDirection($direction)\n    {\n        $this->direction = $direction;\n        return $this;\n    }\n\n    /**\n     * Set the maximum number of items per page\n     *\n     * @access public\n     * @param  integer     $limit\n     * @return $this\n     */\n    public function setMax($limit)\n    {\n        $this->limit = $limit;\n        return $this;\n    }\n\n    /**\n     * Get the maximum number of items per page.\n     *\n     * @return int\n     */\n    public function getMax()\n    {\n        return $this->limit;\n    }\n\n    /**\n     * Return true if the collection is empty\n     *\n     * @access public\n     * @return boolean\n     */\n    public function isEmpty()\n    {\n        return $this->total === 0;\n    }\n\n    /**\n     * Execute the offset calculation only if the $condition is true\n     *\n     * @access public\n     * @param  boolean    $condition\n     * @return $this\n     */\n    public function calculateOnlyIf($condition)\n    {\n        if ($condition) {\n            $this->calculate();\n        }\n\n        return $this;\n    }\n\n    /**\n     * Calculate the offset value according to url params and the page number\n     *\n     * @access public\n     * @return $this\n     */\n    public function calculate()\n    {\n        $this->page = $this->container['request']->getIntegerParam('page', 1);\n        $this->direction = $this->container['request']->getStringParam('direction', $this->direction);\n        $this->order = $this->container['request']->getStringParam('order', $this->order);\n\n        if ($this->page < 1) {\n            $this->page = 1;\n        }\n\n        $this->offset = (int) (($this->page - 1) * $this->limit);\n\n        return $this;\n    }\n\n    /**\n     * Get url params for link generation\n     *\n     * @access public\n     * @param  integer  $page\n     * @param  string   $order\n     * @param  string   $direction\n     * @return string\n     */\n    public function getUrlParams($page, $order, $direction)\n    {\n        $params = array(\n            'page' => $page,\n            'order' => $order,\n            'direction' => $direction,\n        );\n\n        return array_merge($this->params, $params);\n    }\n\n    /**\n     * Generate the previous link\n     *\n     * @access public\n     * @return string\n     */\n    public function generatePreviousLink()\n    {\n        $html = '<span class=\"pagination-previous\">';\n\n        if ($this->offset > 0) {\n            $html .= $this->container['helper']->url->link(\n                '&larr; '.t('Previous'),\n                $this->controller,\n                $this->action,\n                $this->getUrlParams($this->page - 1, $this->order, $this->direction),\n                false,\n                'js-modal-replace',\n                t('Previous'),\n                false,\n                $this->anchor\n            );\n        } else {\n            $html .= '&larr; '.t('Previous');\n        }\n\n        $html .= '</span>';\n\n        return $html;\n    }\n\n    /**\n     * Generate the next link\n     *\n     * @access public\n     * @return string\n     */\n    public function generateNextLink()\n    {\n        $html = '<span class=\"pagination-next\">';\n\n        if (($this->total - $this->offset) > $this->limit) {\n            $html .= $this->container['helper']->url->link(\n                t('Next').' &rarr;',\n                $this->controller,\n                $this->action,\n                $this->getUrlParams($this->page + 1, $this->order, $this->direction),\n                false,\n                'js-modal-replace',\n                t('Next'),\n                false,\n                $this->anchor\n            );\n        } else {\n            $html .= t('Next').' &rarr;';\n        }\n\n        $html .= '</span>';\n\n        return $html;\n    }\n\n    /**\n     * Generate the page showing.\n     *\n     * @access public\n     * @return string\n     */\n    public function generatePageShowing()\n    {\n        return '<span class=\"pagination-showing\">'.t('Showing %d-%d of %d', (($this->getPage() - 1) * $this->getMax() + 1), min($this->getTotal(), $this->getPage() * $this->getMax()), $this->getTotal()).'</span>';\n    }\n\n    /**\n     * Return true if there is no pagination to show\n     *\n     * @access public\n     * @return boolean\n     */\n    public function hasNothingToShow()\n    {\n        return $this->offset === 0 && ($this->total - $this->offset) <= $this->limit;\n    }\n\n    /**\n     * Generation pagination links\n     *\n     * @access public\n     * @return string\n     */\n    public function toHtml()\n    {\n        $html = '';\n\n        if (! $this->hasNothingToShow()) {\n            $html .= '<div class=\"pagination\">';\n            $html .= $this->generatePageShowing();\n            $html .= $this->generatePreviousLink();\n            $html .= $this->generateNextLink();\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Magic method to output pagination links\n     *\n     * @access public\n     * @return string\n     */\n    public function __toString()\n    {\n        return $this->toHtml();\n    }\n\n    /**\n     * Column sorting\n     *\n     * @param  string   $label         Column title\n     * @param  string   $column        SQL column name\n     * @return string\n     */\n    public function order($label, $column)\n    {\n        $prefix = '';\n        $direction = 'ASC';\n\n        if ($this->order === $column) {\n            $prefix = $this->direction === 'DESC' ? '&#9660; ' : '&#9650; ';\n            $direction = $this->direction === 'DESC' ? 'ASC' : 'DESC';\n        }\n\n        return $prefix.$this->container['helper']->url->link(\n            $label,\n            $this->controller,\n            $this->action,\n            $this->getUrlParams($this->page, $column, $direction),\n            false,\n            'js-modal-replace'\n        );\n    }\n}\n"], "filenames": ["app/Core/Paginator.php"], "buggy_code_start_loc": [171], "buggy_code_end_loc": [176], "fixing_code_start_loc": [172], "fixing_code_end_loc": [182], "type": "CWE-79", "message": "app/Core/Paginator.php in Kanboard before 1.2.8 has XSS in pagination sorting.", "other": {"cve": {"id": "CVE-2019-7324", "sourceIdentifier": "cve@mitre.org", "published": "2019-02-04T19:29:00.320", "lastModified": "2019-05-30T04:29:02.260", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "app/Core/Paginator.php in Kanboard before 1.2.8 has XSS in pagination sorting."}, {"lang": "es", "value": "app/Core/Paginator.php en Kanboard, en versiones anteriores a la 1.2.8, tiene Cross-Site Scripting (XSS) en la ordenaci\u00f3n de paginaci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.8", "matchCriteriaId": "55959606-33E3-49AF-8D2C-57B8F0FD1F3A"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/153093/Kanboard-1.2.7-Cross-Site-Scripting.html", "source": "cve@mitre.org"}, {"url": "http://seclists.org/fulldisclosure/2019/May/41", "source": "cve@mitre.org"}, {"url": "https://github.com/kanboard/kanboard/commit/83deec2e3621c40d15a06e2491f27571d32fe10f", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/kanboard/kanboard/releases/tag/v1.2.8", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/kanboard/kanboard/commit/83deec2e3621c40d15a06e2491f27571d32fe10f"}}