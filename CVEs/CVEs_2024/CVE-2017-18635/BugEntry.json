{"buggy_code": ["/*\n * noVNC: HTML5 VNC client\n * Copyright (C) 2012 Joel Martin\n * Copyright (C) 2016 Samuel Mannehed for Cendio AB\n * Copyright (C) 2016 Pierre Ossman for Cendio AB\n * Licensed under MPL 2.0 (see LICENSE.txt)\n *\n * See README.md for usage and integration instructions.\n */\n\n/* jslint white: false, browser: true */\n/* global window, document.getElementById, Util, WebUtil, RFB, Display */\n\n/* [module]\n * import Util from \"../core/util\";\n * import KeyTable from \"../core/input/keysym\";\n * import keysyms from \"./keysymdef\";\n * import RFB from \"../core/rfb\";\n * import Display from \"../core/display\";\n * import WebUtil from \"./webutil\";\n */\n\nvar UI;\n\n(function () {\n    \"use strict\";\n\n    // Fallback for all uncought errors\n    window.addEventListener('error', function(event) {\n        try {\n            var msg = \"\";\n\n            msg += \"<div>\";\n            msg += event.message;\n            msg += \"</div>\";\n\n            msg += \" <div class=\\\"noVNC_location\\\">\";\n            msg += event.filename;\n            msg += \":\" + event.lineno + \":\" + event.colno;\n            msg += \"</div>\";\n\n            if ((event.error !== undefined) &&\n                (event.error.stack !== undefined)) {\n                msg += \"<div class=\\\"noVNC_stack\\\">\";\n                msg += event.error.stack;\n                msg += \"</div>\";\n            }\n\n            document.getElementById('noVNC_fallback_error')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_fallback_errormsg').innerHTML = msg;\n        } catch (exc) {\n            document.write(\"noVNC encountered an error.\");\n        }\n        // Don't return true since this would prevent the error\n        // from being printed to the browser console.\n        return false;\n    });\n\n    // Set up translations\n    var LINGUAS = [\"de\", \"el\", \"nl\", \"sv\"];\n    Util.Localisation.setup(LINGUAS);\n    if (Util.Localisation.language !== \"en\") {\n        WebUtil.load_scripts(\n            {'app': [\"locale/\" + Util.Localisation.language + \".js\"]});\n    }\n\n    /* [begin skip-as-module] */\n    // Load supporting scripts\n    WebUtil.load_scripts(\n        {'core': [\"base64.js\", \"websock.js\", \"des.js\", \"input/keysymdef.js\",\n                  \"input/xtscancodes.js\", \"input/util.js\", \"input/devices.js\",\n                  \"display.js\", \"inflator.js\", \"rfb.js\", \"input/keysym.js\"]});\n\n    window.onscriptsload = function () { UI.load(); };\n    /* [end skip-as-module] */\n\n    var _ = Util.Localisation.get;\n\n    UI = {\n\n        connected: false,\n        desktopName: \"\",\n\n        resizeTimeout: null,\n        statusTimeout: null,\n        hideKeyboardTimeout: null,\n        idleControlbarTimeout: null,\n        closeControlbarTimeout: null,\n\n        controlbarGrabbed: false,\n        controlbarDrag: false,\n        controlbarMouseDownClientY: 0,\n        controlbarMouseDownOffsetY: 0,\n\n        isSafari: false,\n        rememberedClipSetting: null,\n        lastKeyboardinput: null,\n        defaultKeyboardinputLen: 100,\n\n        // Setup rfb object, load settings from browser storage, then call\n        // UI.init to setup the UI/menus\n        load: function(callback) {\n            WebUtil.initSettings(UI.start, callback);\n        },\n\n        // Render default UI and initialize settings menu\n        start: function(callback) {\n\n            // Setup global variables first\n            UI.isSafari = (navigator.userAgent.indexOf('Safari') !== -1 &&\n                           navigator.userAgent.indexOf('Chrome') === -1);\n\n            UI.initSettings();\n\n            // Translate the DOM\n            Util.Localisation.translateDOM();\n\n            // Adapt the interface for touch screen devices\n            if (Util.isTouchDevice) {\n                document.documentElement.classList.add(\"noVNC_touch\");\n                // Remove the address bar\n                setTimeout(function() { window.scrollTo(0, 1); }, 100);\n                UI.forceSetting('clip', true);\n            } else {\n                UI.initSetting('clip', false);\n            }\n\n            // Restore control bar position\n            if (WebUtil.readSetting('controlbar_pos') === 'right') {\n                UI.toggleControlbarSide();\n            }\n\n            // Setup and initialize event handlers\n            UI.setupWindowEvents();\n            UI.setupFullscreen();\n            UI.addControlbarHandlers();\n            UI.addTouchSpecificHandlers();\n            UI.addExtraKeysHandlers();\n            UI.addXvpHandlers();\n            UI.addConnectionControlHandlers();\n            UI.addClipboardHandlers();\n            UI.addSettingsHandlers();\n\n            UI.openControlbar();\n\n            // Show the connect panel on first load unless autoconnecting\n            if (!autoconnect) {\n                UI.openConnectPanel();\n            }\n\n            UI.updateViewClip();\n\n            UI.updateVisualState();\n\n            document.getElementById('noVNC_setting_host').focus();\n\n            var autoconnect = WebUtil.getConfigVar('autoconnect', false);\n            if (autoconnect === 'true' || autoconnect == '1') {\n                autoconnect = true;\n                UI.connect();\n            } else {\n                autoconnect = false;\n            }\n\n            if (typeof callback === \"function\") {\n                callback(UI.rfb);\n            }\n        },\n\n        initSettings: function() {\n            var i;\n\n            // Logging selection dropdown\n            var llevels = ['error', 'warn', 'info', 'debug'];\n            for (i = 0; i < llevels.length; i += 1) {\n                UI.addOption(document.getElementById('noVNC_setting_logging'),llevels[i], llevels[i]);\n            }\n\n            // Settings with immediate effects\n            UI.initSetting('logging', 'warn');\n            WebUtil.init_logging(UI.getSetting('logging'));\n\n            // if port == 80 (or 443) then it won't be present and should be\n            // set manually\n            var port = window.location.port;\n            if (!port) {\n                if (window.location.protocol.substring(0,5) == 'https') {\n                    port = 443;\n                }\n                else if (window.location.protocol.substring(0,4) == 'http') {\n                    port = 80;\n                }\n            }\n\n            /* Populate the controls if defaults are provided in the URL */\n            UI.initSetting('host', window.location.hostname);\n            UI.initSetting('port', port);\n            UI.initSetting('encrypt', (window.location.protocol === \"https:\"));\n            UI.initSetting('true_color', true);\n            UI.initSetting('cursor', !Util.isTouchDevice);\n            UI.initSetting('resize', 'off');\n            UI.initSetting('shared', true);\n            UI.initSetting('view_only', false);\n            UI.initSetting('path', 'websockify');\n            UI.initSetting('repeaterID', '');\n        },\n\n        setupWindowEvents: function() {\n            window.addEventListener('resize', UI.applyResizeMode);\n            window.addEventListener('resize', UI.updateViewClip);\n            window.addEventListener('resize', UI.updateViewDrag);\n\n            document.getElementById(\"noVNC_status\")\n                .addEventListener('click', UI.hideStatus);\n        },\n\n        setupFullscreen: function() {\n            // Only show the button if fullscreen is properly supported\n            // * Safari doesn't support alphanumerical input while in fullscreen\n            if (!UI.isSafari &&\n                (document.documentElement.requestFullscreen ||\n                 document.documentElement.mozRequestFullScreen ||\n                 document.documentElement.webkitRequestFullscreen ||\n                 document.body.msRequestFullscreen)) {\n                document.getElementById('noVNC_fullscreen_button')\n                    .classList.remove(\"noVNC_hidden\");\n                UI.addFullscreenHandlers();\n            }\n        },\n\n        addControlbarHandlers: function() {\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('mousemove', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('mouseup', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('mousedown', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('keypress', UI.activateControlbar);\n\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('mousedown', UI.keepControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('keypress', UI.keepControlbar);\n\n            document.getElementById(\"noVNC_view_drag_button\")\n                .addEventListener('click', UI.toggleViewDrag);\n\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('mousedown', UI.controlbarHandleMouseDown);\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('mouseup', UI.controlbarHandleMouseUp);\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('mousemove', UI.dragControlbarHandle);\n            // resize events aren't available for elements\n            window.addEventListener('resize', UI.updateControlbarHandle);\n\n            var exps = document.getElementsByClassName(\"noVNC_expander\");\n            for (var i = 0;i < exps.length;i++) {\n                exps[i].addEventListener('click', UI.toggleExpander);\n            }\n        },\n\n        addTouchSpecificHandlers: function() {\n            document.getElementById(\"noVNC_mouse_button0\")\n                .addEventListener('click', function () { UI.setMouseButton(1); });\n            document.getElementById(\"noVNC_mouse_button1\")\n                .addEventListener('click', function () { UI.setMouseButton(2); });\n            document.getElementById(\"noVNC_mouse_button2\")\n                .addEventListener('click', function () { UI.setMouseButton(4); });\n            document.getElementById(\"noVNC_mouse_button4\")\n                .addEventListener('click', function () { UI.setMouseButton(0); });\n            document.getElementById(\"noVNC_keyboard_button\")\n                .addEventListener('click', UI.toggleVirtualKeyboard);\n\n            document.getElementById(\"noVNC_keyboardinput\")\n                .addEventListener('input', UI.keyInput);\n            document.getElementById(\"noVNC_keyboardinput\")\n                .addEventListener('focus', UI.onfocusVirtualKeyboard);\n            document.getElementById(\"noVNC_keyboardinput\")\n                .addEventListener('blur', UI.onblurVirtualKeyboard);\n            document.getElementById(\"noVNC_keyboardinput\")\n                .addEventListener('submit', function () { return false; });\n\n            document.documentElement\n                .addEventListener('mousedown', UI.keepVirtualKeyboard, true);\n\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('touchstart', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('touchmove', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('touchend', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('input', UI.activateControlbar);\n\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('touchstart', UI.keepControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('input', UI.keepControlbar);\n\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('touchstart', UI.controlbarHandleMouseDown);\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('touchend', UI.controlbarHandleMouseUp);\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('touchmove', UI.dragControlbarHandle);\n\n            window.addEventListener('load', UI.keyboardinputReset);\n        },\n\n        addExtraKeysHandlers: function() {\n            document.getElementById(\"noVNC_toggle_extra_keys_button\")\n                .addEventListener('click', UI.toggleExtraKeys);\n            document.getElementById(\"noVNC_toggle_ctrl_button\")\n                .addEventListener('click', UI.toggleCtrl);\n            document.getElementById(\"noVNC_toggle_alt_button\")\n                .addEventListener('click', UI.toggleAlt);\n            document.getElementById(\"noVNC_send_tab_button\")\n                .addEventListener('click', UI.sendTab);\n            document.getElementById(\"noVNC_send_esc_button\")\n                .addEventListener('click', UI.sendEsc);\n            document.getElementById(\"noVNC_send_ctrl_alt_del_button\")\n                .addEventListener('click', UI.sendCtrlAltDel);\n        },\n\n        addXvpHandlers: function() {\n            document.getElementById(\"noVNC_xvp_shutdown_button\")\n                .addEventListener('click', function() { UI.rfb.xvpShutdown(); });\n            document.getElementById(\"noVNC_xvp_reboot_button\")\n                .addEventListener('click', function() { UI.rfb.xvpReboot(); });\n            document.getElementById(\"noVNC_xvp_reset_button\")\n                .addEventListener('click', function() { UI.rfb.xvpReset(); });\n            document.getElementById(\"noVNC_xvp_button\")\n                .addEventListener('click', UI.toggleXvpPanel);\n        },\n\n        addConnectionControlHandlers: function() {\n            document.getElementById(\"noVNC_disconnect_button\")\n                .addEventListener('click', UI.disconnect);\n            document.getElementById(\"noVNC_connect_button\")\n                .addEventListener('click', UI.connect);\n\n            document.getElementById(\"noVNC_password_button\")\n                .addEventListener('click', UI.setPassword);\n        },\n\n        addClipboardHandlers: function() {\n            document.getElementById(\"noVNC_clipboard_button\")\n                .addEventListener('click', UI.toggleClipboardPanel);\n            document.getElementById(\"noVNC_clipboard_text\")\n                .addEventListener('focus', UI.displayBlur);\n            document.getElementById(\"noVNC_clipboard_text\")\n                .addEventListener('blur', UI.displayFocus);\n            document.getElementById(\"noVNC_clipboard_text\")\n                .addEventListener('change', UI.clipboardSend);\n            document.getElementById(\"noVNC_clipboard_clear_button\")\n                .addEventListener('click', UI.clipboardClear);\n        },\n\n        addSettingsHandlers: function() {\n            document.getElementById(\"noVNC_settings_button\")\n                .addEventListener('click', UI.toggleSettingsPanel);\n            document.getElementById(\"noVNC_settings_apply\")\n                .addEventListener('click', UI.settingsApply);\n\n            document.getElementById(\"noVNC_setting_resize\")\n                .addEventListener('change', UI.enableDisableViewClip);\n        },\n\n        addFullscreenHandlers: function() {\n            document.getElementById(\"noVNC_fullscreen_button\")\n                .addEventListener('click', UI.toggleFullscreen);\n\n            window.addEventListener('fullscreenchange', UI.updateFullscreenButton);\n            window.addEventListener('mozfullscreenchange', UI.updateFullscreenButton);\n            window.addEventListener('webkitfullscreenchange', UI.updateFullscreenButton);\n            window.addEventListener('msfullscreenchange', UI.updateFullscreenButton);\n        },\n\n        initRFB: function() {\n            try {\n                UI.rfb = new RFB({'target': document.getElementById('noVNC_canvas'),\n                                  'onNotification': UI.notification,\n                                  'onUpdateState': UI.updateState,\n                                  'onDisconnected': UI.disconnectFinished,\n                                  'onPasswordRequired': UI.passwordRequired,\n                                  'onXvpInit': UI.updateXvpButton,\n                                  'onClipboard': UI.clipboardReceive,\n                                  'onBell': UI.bell,\n                                  'onFBUComplete': UI.initialResize,\n                                  'onFBResize': UI.updateSessionSize,\n                                  'onDesktopName': UI.updateDesktopName});\n                return true;\n            } catch (exc) {\n                var msg = \"Unable to create RFB client -- \" + exc;\n                Util.Error(msg);\n                UI.showStatus(msg, 'error');\n                return false;\n            }\n        },\n\n/* ------^-------\n *     /INIT\n * ==============\n *     VISUAL\n * ------v------*/\n\n        updateState: function(rfb, state, oldstate) {\n            var msg;\n\n            document.documentElement.classList.remove(\"noVNC_connecting\");\n            document.documentElement.classList.remove(\"noVNC_connected\");\n            document.documentElement.classList.remove(\"noVNC_disconnecting\");\n\n            switch (state) {\n                case 'connecting':\n                    document.getElementById(\"noVNC_transition_text\").innerHTML = _(\"Connecting...\");\n                    document.documentElement.classList.add(\"noVNC_connecting\");\n                    break;\n                case 'connected':\n                    UI.connected = true;\n                    document.documentElement.classList.add(\"noVNC_connected\");\n                    if (rfb && rfb.get_encrypt()) {\n                        msg = _(\"Connected (encrypted) to \") + UI.desktopName;\n                    } else {\n                        msg = _(\"Connected (unencrypted) to \") + UI.desktopName;\n                    }\n                    UI.showStatus(msg);\n                    break;\n                case 'disconnecting':\n                    UI.connected = false;\n                    document.getElementById(\"noVNC_transition_text\").innerHTML = _(\"Disconnecting...\");\n                    document.documentElement.classList.add(\"noVNC_disconnecting\");\n                    break;\n                case 'disconnected':\n                    UI.showStatus(_(\"Disconnected\"));\n                    break;\n                default:\n                    msg = \"Invalid UI state\";\n                    Util.Error(msg);\n                    UI.showStatus(msg, 'error');\n                    break;\n            }\n\n            UI.updateVisualState();\n        },\n\n        // Disable/enable controls depending on connection state\n        updateVisualState: function() {\n            //Util.Debug(\">> updateVisualState\");\n            document.getElementById('noVNC_setting_encrypt').disabled = UI.connected;\n            document.getElementById('noVNC_setting_true_color').disabled = UI.connected;\n            if (Util.browserSupportsCursorURIs()) {\n                document.getElementById('noVNC_setting_cursor').disabled = UI.connected;\n            } else {\n                UI.updateSetting('cursor', !Util.isTouchDevice);\n                document.getElementById('noVNC_setting_cursor').disabled = true;\n            }\n\n            UI.enableDisableViewClip();\n            document.getElementById('noVNC_setting_resize').disabled = UI.connected;\n            document.getElementById('noVNC_setting_shared').disabled = UI.connected;\n            document.getElementById('noVNC_setting_view_only').disabled = UI.connected;\n            document.getElementById('noVNC_setting_host').disabled = UI.connected;\n            document.getElementById('noVNC_setting_port').disabled = UI.connected;\n            document.getElementById('noVNC_setting_path').disabled = UI.connected;\n            document.getElementById('noVNC_setting_repeaterID').disabled = UI.connected;\n\n            if (UI.connected) {\n                UI.updateViewClip();\n                UI.setMouseButton(1);\n\n                // Hide the controlbar after 2 seconds\n                UI.closeControlbarTimeout = setTimeout(UI.closeControlbar, 2000);\n            } else {\n                UI.updateXvpButton(0);\n                UI.keepControlbar();\n            }\n\n            // Hide input related buttons in view only mode\n            if (UI.rfb && UI.rfb.get_view_only()) {\n                document.getElementById('noVNC_keyboard_button')\n                    .classList.add('noVNC_hidden');\n                document.getElementById('noVNC_toggle_extra_keys_button')\n                    .classList.add('noVNC_hidden');\n            } else {\n                document.getElementById('noVNC_keyboard_button')\n                    .classList.remove('noVNC_hidden');\n                document.getElementById('noVNC_toggle_extra_keys_button')\n                    .classList.remove('noVNC_hidden');\n            }\n\n            // State change disables viewport dragging.\n            // It is enabled (toggled) by direct click on the button\n            UI.setViewDrag(false);\n\n            // State change also closes the password dialog\n            document.getElementById('noVNC_password_dlg')\n                .classList.remove('noVNC_open');\n\n            //Util.Debug(\"<< updateVisualState\");\n        },\n\n        showStatus: function(text, status_type, time) {\n            var statusElem = document.getElementById('noVNC_status');\n\n            clearTimeout(UI.statusTimeout);\n\n            if (typeof status_type === 'undefined') {\n                status_type = 'normal';\n            }\n\n            statusElem.classList.remove(\"noVNC_status_normal\",\n                                        \"noVNC_status_warn\",\n                                        \"noVNC_status_error\");\n\n            switch (status_type) {\n                case 'warning':\n                case 'warn':\n                    statusElem.classList.add(\"noVNC_status_warn\");\n                    break;\n                case 'error':\n                    statusElem.classList.add(\"noVNC_status_error\");\n                    break;\n                case 'normal':\n                case 'info':\n                default:\n                    statusElem.classList.add(\"noVNC_status_normal\");\n                    break;\n            }\n\n            statusElem.innerHTML = text;\n            statusElem.classList.add(\"noVNC_open\");\n\n            // If no time was specified, show the status for 1.5 seconds\n            if (typeof time === 'undefined') {\n                time = 1500;\n            }\n\n            // Error messages do not timeout\n            if (status_type !== 'error') {\n                UI.statusTimeout = window.setTimeout(UI.hideStatus, time);\n            }\n        },\n\n        hideStatus: function() {\n            clearTimeout(UI.statusTimeout);\n            document.getElementById('noVNC_status').classList.remove(\"noVNC_open\");\n        },\n\n        notification: function (rfb, msg, level, options) {\n            UI.showStatus(msg, level);\n        },\n\n        activateControlbar: function(event) {\n            clearTimeout(UI.idleControlbarTimeout);\n            // We manipulate the anchor instead of the actual control\n            // bar in order to avoid creating new a stacking group\n            document.getElementById('noVNC_control_bar_anchor')\n                .classList.remove(\"noVNC_idle\");\n            UI.idleControlbarTimeout = window.setTimeout(UI.idleControlbar, 2000);\n        },\n\n        idleControlbar: function() {\n            document.getElementById('noVNC_control_bar_anchor')\n                .classList.add(\"noVNC_idle\");\n        },\n\n        keepControlbar: function() {\n            clearTimeout(UI.closeControlbarTimeout);\n        },\n\n        openControlbar: function() {\n            document.getElementById('noVNC_control_bar')\n                .classList.add(\"noVNC_open\");\n        },\n\n        closeControlbar: function() {\n            UI.closeAllPanels();\n            document.getElementById('noVNC_control_bar')\n                .classList.remove(\"noVNC_open\");\n        },\n\n        toggleControlbar: function() {\n            if (document.getElementById('noVNC_control_bar')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeControlbar();\n            } else {\n                UI.openControlbar();\n            }\n        },\n\n        toggleControlbarSide: function () {\n            // Temporarily disable animation to avoid weird movement\n            var bar = document.getElementById('noVNC_control_bar');\n            bar.style.transitionDuration = '0s';\n            bar.addEventListener('transitionend', function () { this.style.transitionDuration = \"\"; });\n\n            var anchor = document.getElementById('noVNC_control_bar_anchor');\n            if (anchor.classList.contains(\"noVNC_right\")) {\n                WebUtil.writeSetting('controlbar_pos', 'left');\n                anchor.classList.remove(\"noVNC_right\");\n            } else {\n                WebUtil.writeSetting('controlbar_pos', 'right');\n                anchor.classList.add(\"noVNC_right\");\n            }\n\n            // Consider this a movement of the handle\n            UI.controlbarDrag = true;\n        },\n\n        dragControlbarHandle: function (e) {\n            if (!UI.controlbarGrabbed) return;\n\n            var ptr = Util.getPointerEvent(e);\n\n            var anchor = document.getElementById('noVNC_control_bar_anchor');\n            if (ptr.clientX < (window.innerWidth * 0.1)) {\n                if (anchor.classList.contains(\"noVNC_right\")) {\n                    UI.toggleControlbarSide();\n                }\n            } else if (ptr.clientX > (window.innerWidth * 0.9)) {\n                if (!anchor.classList.contains(\"noVNC_right\")) {\n                    UI.toggleControlbarSide();\n                }\n            }\n\n            if (!UI.controlbarDrag) {\n                // The goal is to trigger on a certain physical width, the\n                // devicePixelRatio brings us a bit closer but is not optimal.\n                var dragThreshold = 10 * (window.devicePixelRatio || 1);\n                var dragDistance = Math.abs(ptr.clientY - UI.controlbarMouseDownClientY);\n\n                if (dragDistance < dragThreshold) return;\n\n                UI.controlbarDrag = true;\n            }\n\n            var eventY = ptr.clientY - UI.controlbarMouseDownOffsetY;\n\n            UI.moveControlbarHandle(eventY);\n\n            e.preventDefault();\n            e.stopPropagation();\n            UI.keepControlbar();\n            UI.activateControlbar();\n        },\n\n        // Move the handle but don't allow any position outside the bounds\n        moveControlbarHandle: function (viewportRelativeY) {\n            var handle = document.getElementById(\"noVNC_control_bar_handle\");\n            var handleHeight = handle.getBoundingClientRect().height;\n            var controlbarBounds = document.getElementById(\"noVNC_control_bar\")\n                .getBoundingClientRect();\n            var margin = 10;\n\n            // These heights need to be non-zero for the below logic to work\n            if (handleHeight === 0 || controlbarBounds.height === 0) {\n                return;\n            }\n\n            var newY = viewportRelativeY;\n\n            // Check if the coordinates are outside the control bar\n            if (newY < controlbarBounds.top + margin) {\n                // Force coordinates to be below the top of the control bar\n                newY = controlbarBounds.top + margin;\n\n            } else if (newY > controlbarBounds.top +\n                       controlbarBounds.height - handleHeight - margin) {\n                // Force coordinates to be above the bottom of the control bar\n                newY = controlbarBounds.top +\n                    controlbarBounds.height - handleHeight - margin;\n            }\n\n            // Corner case: control bar too small for stable position\n            if (controlbarBounds.height < (handleHeight + margin * 2)) {\n                newY = controlbarBounds.top +\n                    (controlbarBounds.height - handleHeight) / 2;\n            }\n\n            // The transform needs coordinates that are relative to the parent\n            var parentRelativeY = newY - controlbarBounds.top;\n            handle.style.transform = \"translateY(\" + parentRelativeY + \"px)\";\n        },\n\n        updateControlbarHandle: function () {\n            // Since the control bar is fixed on the viewport and not the page,\n            // the move function expects coordinates relative the the viewport.\n            var handle = document.getElementById(\"noVNC_control_bar_handle\");\n            var handleBounds = handle.getBoundingClientRect();\n            UI.moveControlbarHandle(handleBounds.top);\n        },\n\n        controlbarHandleMouseUp: function(e) {\n            if ((e.type == \"mouseup\") && (e.button != 0)) return;\n\n            // mouseup and mousedown on the same place toggles the controlbar\n            if (UI.controlbarGrabbed && !UI.controlbarDrag) {\n                UI.toggleControlbar();\n                e.preventDefault();\n                e.stopPropagation();\n                UI.keepControlbar();\n                UI.activateControlbar();\n            }\n            UI.controlbarGrabbed = false;\n        },\n\n        controlbarHandleMouseDown: function(e) {\n            if ((e.type == \"mousedown\") && (e.button != 0)) return;\n\n            var ptr = Util.getPointerEvent(e);\n\n            var handle = document.getElementById(\"noVNC_control_bar_handle\");\n            var bounds = handle.getBoundingClientRect();\n\n            WebUtil.setCapture(handle);\n            UI.controlbarGrabbed = true;\n            UI.controlbarDrag = false;\n\n            UI.controlbarMouseDownClientY = ptr.clientY;\n            UI.controlbarMouseDownOffsetY = ptr.clientY - bounds.top;\n            e.preventDefault();\n            e.stopPropagation();\n            UI.keepControlbar();\n            UI.activateControlbar();\n        },\n\n        toggleExpander: function(e) {\n            if (this.classList.contains(\"noVNC_open\")) {\n                this.classList.remove(\"noVNC_open\");\n            } else {\n                this.classList.add(\"noVNC_open\");\n            }\n        },\n\n/* ------^-------\n *    /VISUAL\n * ==============\n *    SETTINGS\n * ------v------*/\n\n        // Initial page load read/initialization of settings\n        initSetting: function(name, defVal) {\n            // Check Query string followed by cookie\n            var val = WebUtil.getConfigVar(name);\n            if (val === null) {\n                val = WebUtil.readSetting(name, defVal);\n            }\n            UI.updateSetting(name, val);\n            return val;\n        },\n\n        // Update cookie and form control setting. If value is not set, then\n        // updates from control to current cookie setting.\n        updateSetting: function(name, value) {\n\n            // Save the cookie for this session\n            if (typeof value !== 'undefined') {\n                WebUtil.writeSetting(name, value);\n            }\n\n            // Update the settings control\n            value = UI.getSetting(name);\n\n            var ctrl = document.getElementById('noVNC_setting_' + name);\n            if (ctrl.type === 'checkbox') {\n                ctrl.checked = value;\n\n            } else if (typeof ctrl.options !== 'undefined') {\n                for (var i = 0; i < ctrl.options.length; i += 1) {\n                    if (ctrl.options[i].value === value) {\n                        ctrl.selectedIndex = i;\n                        break;\n                    }\n                }\n            } else {\n                /*Weird IE9 error leads to 'null' appearring\n                in textboxes instead of ''.*/\n                if (value === null) {\n                    value = \"\";\n                }\n                ctrl.value = value;\n            }\n        },\n\n        // Save control setting to cookie\n        saveSetting: function(name) {\n            var val, ctrl = document.getElementById('noVNC_setting_' + name);\n            if (ctrl.type === 'checkbox') {\n                val = ctrl.checked;\n            } else if (typeof ctrl.options !== 'undefined') {\n                val = ctrl.options[ctrl.selectedIndex].value;\n            } else {\n                val = ctrl.value;\n            }\n            WebUtil.writeSetting(name, val);\n            //Util.Debug(\"Setting saved '\" + name + \"=\" + val + \"'\");\n            return val;\n        },\n\n        // Force a setting to be a certain value\n        forceSetting: function(name, val) {\n            UI.updateSetting(name, val);\n            return val;\n        },\n\n        // Read form control compatible setting from cookie\n        getSetting: function(name) {\n            var ctrl = document.getElementById('noVNC_setting_' + name);\n            var val = WebUtil.readSetting(name);\n            if (typeof val !== 'undefined' && val !== null && ctrl.type === 'checkbox') {\n                if (val.toString().toLowerCase() in {'0':1, 'no':1, 'false':1}) {\n                    val = false;\n                } else {\n                    val = true;\n                }\n            }\n            return val;\n        },\n\n        // Save/apply settings when 'Apply' button is pressed\n        settingsApply: function() {\n            //Util.Debug(\">> settingsApply\");\n            UI.saveSetting('encrypt');\n            UI.saveSetting('true_color');\n            if (Util.browserSupportsCursorURIs()) {\n                UI.saveSetting('cursor');\n            }\n\n            UI.saveSetting('resize');\n\n            if (UI.getSetting('resize') === 'downscale' || UI.getSetting('resize') === 'scale') {\n                UI.forceSetting('clip', false);\n            }\n\n            UI.saveSetting('clip');\n            UI.saveSetting('shared');\n            UI.saveSetting('view_only');\n            UI.saveSetting('host');\n            UI.saveSetting('port');\n            UI.saveSetting('path');\n            UI.saveSetting('repeaterID');\n            UI.saveSetting('logging');\n\n            // Settings with immediate (non-connected related) effect\n            WebUtil.init_logging(UI.getSetting('logging'));\n            UI.updateViewClip();\n            UI.updateViewDrag();\n            //Util.Debug(\"<< settingsApply\");\n        },\n\n/* ------^-------\n *   /SETTINGS\n * ==============\n *    PANELS\n * ------v------*/\n\n        closeAllPanels: function() {\n            UI.closeSettingsPanel();\n            UI.closeXvpPanel();\n            UI.closeClipboardPanel();\n            UI.closeExtraKeys();\n        },\n\n/* ------^-------\n *   /PANELS\n * ==============\n * SETTINGS (panel)\n * ------v------*/\n\n        openSettingsPanel: function() {\n            UI.closeAllPanels();\n            UI.openControlbar();\n\n            UI.updateSetting('encrypt');\n            UI.updateSetting('true_color');\n            if (Util.browserSupportsCursorURIs()) {\n                UI.updateSetting('cursor');\n            } else {\n                UI.updateSetting('cursor', !Util.isTouchDevice);\n                document.getElementById('noVNC_setting_cursor').disabled = true;\n            }\n            UI.updateSetting('clip');\n            UI.updateSetting('resize');\n            UI.updateSetting('shared');\n            UI.updateSetting('view_only');\n            UI.updateSetting('path');\n            UI.updateSetting('repeaterID');\n            UI.updateSetting('logging');\n\n            document.getElementById('noVNC_settings')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_settings_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        closeSettingsPanel: function() {\n            document.getElementById('noVNC_settings')\n                .classList.remove(\"noVNC_open\");\n            document.getElementById('noVNC_settings_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        // Toggle the settings menu:\n        //   On open, settings are refreshed from saved cookies.\n        //   On close, settings are applied\n        toggleSettingsPanel: function() {\n            if (document.getElementById('noVNC_settings')\n                .classList.contains(\"noVNC_open\")) {\n                UI.settingsApply();\n                UI.closeSettingsPanel();\n            } else {\n                UI.openSettingsPanel();\n            }\n        },\n\n/* ------^-------\n *   /SETTINGS\n * ==============\n *      XVP\n * ------v------*/\n\n        openXvpPanel: function() {\n            UI.closeAllPanels();\n            UI.openControlbar();\n\n            document.getElementById('noVNC_xvp')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_xvp_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        closeXvpPanel: function() {\n            document.getElementById('noVNC_xvp')\n                .classList.remove(\"noVNC_open\");\n            document.getElementById('noVNC_xvp_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        toggleXvpPanel: function() {\n            if (document.getElementById('noVNC_xvp')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeXvpPanel();\n            } else {\n                UI.openXvpPanel();\n            }\n        },\n\n        // Disable/enable XVP button\n        updateXvpButton: function(ver) {\n            if (ver >= 1 && !UI.rfb.get_view_only()) {\n                document.getElementById('noVNC_xvp_button')\n                    .classList.remove(\"noVNC_hidden\");\n            } else {\n                document.getElementById('noVNC_xvp_button')\n                    .classList.add(\"noVNC_hidden\");\n                // Close XVP panel if open\n                UI.closeXvpPanel();\n            }\n        },\n\n/* ------^-------\n *     /XVP\n * ==============\n *   CLIPBOARD\n * ------v------*/\n\n        openClipboardPanel: function() {\n            UI.closeAllPanels();\n            UI.openControlbar();\n\n            document.getElementById('noVNC_clipboard')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_clipboard_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        closeClipboardPanel: function() {\n            document.getElementById('noVNC_clipboard')\n                .classList.remove(\"noVNC_open\");\n            document.getElementById('noVNC_clipboard_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        toggleClipboardPanel: function() {\n            if (document.getElementById('noVNC_clipboard')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeClipboardPanel();\n            } else {\n                UI.openClipboardPanel();\n            }\n        },\n\n        clipboardReceive: function(rfb, text) {\n            Util.Debug(\">> UI.clipboardReceive: \" + text.substr(0,40) + \"...\");\n            document.getElementById('noVNC_clipboard_text').value = text;\n            Util.Debug(\"<< UI.clipboardReceive\");\n        },\n\n        clipboardClear: function() {\n            document.getElementById('noVNC_clipboard_text').value = \"\";\n            UI.rfb.clipboardPasteFrom(\"\");\n        },\n\n        clipboardSend: function() {\n            var text = document.getElementById('noVNC_clipboard_text').value;\n            Util.Debug(\">> UI.clipboardSend: \" + text.substr(0,40) + \"...\");\n            UI.rfb.clipboardPasteFrom(text);\n            Util.Debug(\"<< UI.clipboardSend\");\n        },\n\n/* ------^-------\n *  /CLIPBOARD\n * ==============\n *  CONNECTION\n * ------v------*/\n\n        openConnectPanel: function() {\n            document.getElementById('noVNC_connect_dlg')\n                .classList.add(\"noVNC_open\");\n        },\n\n        closeConnectPanel: function() {\n            document.getElementById('noVNC_connect_dlg')\n                .classList.remove(\"noVNC_open\");\n        },\n\n        toggleConnectPanel: function() {\n            if (document.getElementById('noVNC_connect_dlg')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeConnectPanel();\n            } else {\n                UI.openConnectPanel();\n            }\n        },\n\n        connect: function() {\n            var host = document.getElementById('noVNC_setting_host').value;\n            var port = document.getElementById('noVNC_setting_port').value;\n            var path = document.getElementById('noVNC_setting_path').value;\n\n            var password = WebUtil.getConfigVar('password');\n            if (password === null) {\n                password = undefined;\n            }\n\n            if ((!host) || (!port)) {\n                var msg = _(\"Must set host and port\");\n                Util.Error(msg);\n                UI.showStatus(msg, 'error');\n                return;\n            }\n\n            if (!UI.initRFB()) return;\n\n            UI.closeAllPanels();\n            UI.closeConnectPanel();\n\n            UI.rfb.set_encrypt(UI.getSetting('encrypt'));\n            UI.rfb.set_true_color(UI.getSetting('true_color'));\n            UI.rfb.set_local_cursor(UI.getSetting('cursor'));\n            UI.rfb.set_shared(UI.getSetting('shared'));\n            UI.rfb.set_view_only(UI.getSetting('view_only'));\n            UI.rfb.set_repeaterID(UI.getSetting('repeaterID'));\n\n            UI.rfb.connect(host, port, password, path);\n        },\n\n        disconnect: function() {\n            UI.closeAllPanels();\n            UI.rfb.disconnect();\n\n            // Restore the callback used for initial resize\n            UI.rfb.set_onFBUComplete(UI.initialResize);\n\n            // Don't display the connection settings until we're actually disconnected\n        },\n\n        disconnectFinished: function (rfb, reason) {\n            if (typeof reason !== 'undefined') {\n                UI.showStatus(reason, 'error');\n            }\n            UI.openControlbar();\n            UI.openConnectPanel();\n        },\n\n/* ------^-------\n *  /CONNECTION\n * ==============\n *   PASSWORD\n * ------v------*/\n\n        passwordRequired: function(rfb, msg) {\n\n            document.getElementById('noVNC_password_dlg')\n                .classList.add('noVNC_open');\n\n            setTimeout(function () {\n                    document.getElementById('noVNC_password_input').focus();\n                }, 100);\n\n            if (typeof msg === 'undefined') {\n                msg = _(\"Password is required\");\n            }\n            Util.Warn(msg);\n            UI.showStatus(msg, \"warning\");\n        },\n\n        setPassword: function() {\n            UI.rfb.sendPassword(document.getElementById('noVNC_password_input').value);\n            document.getElementById('noVNC_password_dlg')\n                .classList.remove('noVNC_open');\n            return false;\n        },\n\n/* ------^-------\n *  /PASSWORD\n * ==============\n *   FULLSCREEN\n * ------v------*/\n\n        toggleFullscreen: function() {\n            if (document.fullscreenElement || // alternative standard method\n                document.mozFullScreenElement || // currently working methods\n                document.webkitFullscreenElement ||\n                document.msFullscreenElement) {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen();\n                } else if (document.mozCancelFullScreen) {\n                    document.mozCancelFullScreen();\n                } else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen();\n                } else if (document.msExitFullscreen) {\n                    document.msExitFullscreen();\n                }\n            } else {\n                if (document.documentElement.requestFullscreen) {\n                    document.documentElement.requestFullscreen();\n                } else if (document.documentElement.mozRequestFullScreen) {\n                    document.documentElement.mozRequestFullScreen();\n                } else if (document.documentElement.webkitRequestFullscreen) {\n                    document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n                } else if (document.body.msRequestFullscreen) {\n                    document.body.msRequestFullscreen();\n                }\n            }\n            UI.enableDisableViewClip();\n            UI.updateFullscreenButton();\n        },\n\n        updateFullscreenButton: function() {\n            if (document.fullscreenElement || // alternative standard method\n                document.mozFullScreenElement || // currently working methods\n                document.webkitFullscreenElement ||\n                document.msFullscreenElement ) {\n                document.getElementById('noVNC_fullscreen_button')\n                    .classList.add(\"noVNC_selected\");\n            } else {\n                document.getElementById('noVNC_fullscreen_button')\n                    .classList.remove(\"noVNC_selected\");\n            }\n        },\n\n/* ------^-------\n *  /FULLSCREEN\n * ==============\n *     RESIZE\n * ------v------*/\n\n        // Apply remote resizing or local scaling\n        applyResizeMode: function() {\n            if (!UI.rfb) return;\n\n            var screen = UI.screenSize();\n\n            if (screen && UI.connected && UI.rfb.get_display()) {\n\n                var display = UI.rfb.get_display();\n                var resizeMode = UI.getSetting('resize');\n\n                if (resizeMode === 'remote') {\n\n                    // Request changing the resolution of the remote display to\n                    // the size of the local browser viewport.\n\n                    // In order to not send multiple requests before the browser-resize\n                    // is finished we wait 0.5 seconds before sending the request.\n                    clearTimeout(UI.resizeTimeout);\n                    UI.resizeTimeout = setTimeout(function(){\n                        // Request a remote size covering the viewport\n                        if (UI.rfb.requestDesktopSize(screen.w, screen.h)) {\n                            Util.Debug('Requested new desktop size: ' +\n                                       screen.w + 'x' + screen.h);\n                        }\n                    }, 500);\n\n                } else if (resizeMode === 'scale' || resizeMode === 'downscale') {\n                    var downscaleOnly = resizeMode === 'downscale';\n                    var scaleRatio = display.autoscale(screen.w, screen.h, downscaleOnly);\n\n                    if (!UI.rfb.get_view_only()) {\n                        UI.rfb.get_mouse().set_scale(scaleRatio);\n                        Util.Debug('Scaling by ' + UI.rfb.get_mouse().get_scale());\n                    }\n                }\n            }\n        },\n\n        // Gets the the size of the available viewport in the browser window\n        screenSize: function() {\n            var screen = document.getElementById('noVNC_screen');\n\n            // Hide the scrollbars until the size is calculated\n            screen.style.overflow = \"hidden\";\n\n            var pos = Util.getPosition(screen);\n            var w = pos.width;\n            var h = pos.height;\n\n            screen.style.overflow = \"visible\";\n\n            if (isNaN(w) || isNaN(h)) {\n                return false;\n            } else {\n                return {w: w, h: h};\n            }\n        },\n\n        // Normally we only apply the current resize mode after a window resize\n        // event. This means that when a new connection is opened, there is no\n        // resize mode active.\n        // We have to wait until the first FBU because this is where the client\n        // will find the supported encodings of the server. Some calls later in\n        // the chain is dependant on knowing the server-capabilities.\n        initialResize: function(rfb, fbu) {\n            UI.applyResizeMode();\n            // After doing this once, we remove the callback.\n            UI.rfb.set_onFBUComplete(function() { });\n        },\n\n/* ------^-------\n *    /RESIZE\n * ==============\n *    CLIPPING\n * ------v------*/\n\n        // Set and configure viewport clipping\n        setViewClip: function(clip) {\n            UI.updateSetting('clip', clip);\n            UI.updateViewClip();\n        },\n\n        // Update parameters that depend on the clip setting\n        updateViewClip: function() {\n            if (!UI.rfb) return;\n\n            var display = UI.rfb.get_display();\n            var cur_clip = display.get_viewport();\n            var new_clip = UI.getSetting('clip');\n\n            if (cur_clip !== new_clip) {\n                display.set_viewport(new_clip);\n            }\n\n            var size = UI.screenSize();\n\n            if (new_clip && size) {\n                // When clipping is enabled, the screen is limited to\n                // the size of the browser window.\n                display.viewportChangeSize(size.w, size.h);\n            }\n        },\n\n        // Handle special cases where clipping is forced on/off or locked\n        enableDisableViewClip: function() {\n            var resizeSetting = document.getElementById('noVNC_setting_resize');\n\n            if (UI.isSafari) {\n                // Safari auto-hides the scrollbars which makes them\n                // impossible to use in most cases\n                UI.setViewClip(true);\n                document.getElementById('noVNC_setting_clip').disabled = true;\n            } else if (resizeSetting.value === 'downscale' || resizeSetting.value === 'scale') {\n                // Disable clipping if we are scaling\n                UI.setViewClip(false);\n                document.getElementById('noVNC_setting_clip').disabled = true;\n            } else if (document.msFullscreenElement) {\n                // The browser is IE and we are in fullscreen mode.\n                // - We need to force clipping while in fullscreen since\n                //   scrollbars doesn't work.\n                var msg = _(\"Forcing clipping mode since \" +\n                            \"scrollbars aren't supported \" +\n                            \"by IE in fullscreen\");\n                Util.Debug(msg);\n                UI.showStatus(msg);\n                UI.rememberedClipSetting = UI.getSetting('clip');\n                UI.setViewClip(true);\n                document.getElementById('noVNC_setting_clip').disabled = true;\n            } else if (document.body.msRequestFullscreen &&\n                       UI.rememberedClipSetting !== null) {\n                // Restore view clip to what it was before fullscreen on IE\n                UI.setViewClip(UI.rememberedClipSetting);\n                document.getElementById('noVNC_setting_clip').disabled =\n                    UI.connected || Util.isTouchDevice;\n            } else {\n                document.getElementById('noVNC_setting_clip').disabled =\n                    UI.connected || Util.isTouchDevice;\n                if (Util.isTouchDevice) {\n                    UI.setViewClip(true);\n                }\n            }\n        },\n\n/* ------^-------\n *   /CLIPPING\n * ==============\n *    VIEWDRAG\n * ------v------*/\n\n        toggleViewDrag: function() {\n            if (!UI.rfb) return;\n\n            var drag = UI.rfb.get_viewportDrag();\n            UI.setViewDrag(!drag);\n         },\n\n        // Set the view drag mode which moves the viewport on mouse drags\n        setViewDrag: function(drag) {\n            if (!UI.rfb) return;\n\n            UI.rfb.set_viewportDrag(drag);\n\n            UI.updateViewDrag();\n        },\n\n        updateViewDrag: function() {\n            var clipping = false;\n\n            if (!UI.connected) return;\n\n            // Check if viewport drag is possible. It is only possible\n            // if the remote display is clipping the client display.\n            if (UI.rfb.get_display().get_viewport() &&\n                UI.rfb.get_display().clippingDisplay()) {\n                clipping = true;\n            }\n\n            var viewDragButton = document.getElementById('noVNC_view_drag_button');\n\n            if (!clipping &&\n                UI.rfb.get_viewportDrag()) {\n                // The size of the remote display is the same or smaller\n                // than the client display. Make sure viewport drag isn't\n                // active when it can't be used.\n                UI.rfb.set_viewportDrag(false);\n            }\n\n            if (UI.rfb.get_viewportDrag()) {\n                viewDragButton.classList.add(\"noVNC_selected\");\n            } else {\n                viewDragButton.classList.remove(\"noVNC_selected\");\n            }\n\n            // Different behaviour for touch vs non-touch\n            // The button is disabled instead of hidden on touch devices\n            if (Util.isTouchDevice) {\n                viewDragButton.classList.remove(\"noVNC_hidden\");\n\n                if (clipping) {\n                    viewDragButton.disabled = false;\n                } else {\n                    viewDragButton.disabled = true;\n                }\n            } else {\n                viewDragButton.disabled = false;\n\n                if (clipping) {\n                    viewDragButton.classList.remove(\"noVNC_hidden\");\n                } else {\n                    viewDragButton.classList.add(\"noVNC_hidden\");\n                }\n            }\n        },\n\n/* ------^-------\n *   /VIEWDRAG\n * ==============\n *    KEYBOARD\n * ------v------*/\n\n        showVirtualKeyboard: function() {\n            if (!Util.isTouchDevice) return;\n\n            var input = document.getElementById('noVNC_keyboardinput');\n\n            if (document.activeElement == input) return;\n\n            input.focus();\n\n            try {\n                var l = input.value.length;\n                // Move the caret to the end\n                input.setSelectionRange(l, l);\n            } catch (err) {} // setSelectionRange is undefined in Google Chrome\n        },\n\n        hideVirtualKeyboard: function() {\n            if (!Util.isTouchDevice) return;\n\n            var input = document.getElementById('noVNC_keyboardinput');\n\n            if (document.activeElement != input) return;\n\n            input.blur();\n        },\n\n        toggleVirtualKeyboard: function () {\n            if (document.getElementById('noVNC_keyboard_button')\n                .classList.contains(\"noVNC_selected\")) {\n                UI.hideVirtualKeyboard();\n            } else {\n                UI.showVirtualKeyboard();\n            }\n        },\n\n        onfocusVirtualKeyboard: function(event) {\n            document.getElementById('noVNC_keyboard_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        onblurVirtualKeyboard: function(event) {\n            document.getElementById('noVNC_keyboard_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        keepVirtualKeyboard: function(event) {\n            var input = document.getElementById('noVNC_keyboardinput');\n\n            // Only prevent focus change if the virtual keyboard is active\n            if (document.activeElement != input) {\n                return;\n            }\n\n            // Allow clicking on links\n            if (event.target.tagName === \"A\") {\n                return;\n            }\n\n            // And form elements, except standard noVNC buttons\n            if ((event.target.form !== undefined) &&\n                !event.target.classList.contains(\"noVNC_button\")) {\n                return;\n            }\n\n            event.preventDefault();\n        },\n\n        keyboardinputReset: function() {\n            var kbi = document.getElementById('noVNC_keyboardinput');\n            kbi.value = new Array(UI.defaultKeyboardinputLen).join(\"_\");\n            UI.lastKeyboardinput = kbi.value;\n        },\n\n        // When normal keyboard events are left uncought, use the input events from\n        // the keyboardinput element instead and generate the corresponding key events.\n        // This code is required since some browsers on Android are inconsistent in\n        // sending keyCodes in the normal keyboard events when using on screen keyboards.\n        keyInput: function(event) {\n\n            if (!UI.rfb) return;\n\n            var newValue = event.target.value;\n\n            if (!UI.lastKeyboardinput) {\n                UI.keyboardinputReset();\n            }\n            var oldValue = UI.lastKeyboardinput;\n\n            var newLen;\n            try {\n                // Try to check caret position since whitespace at the end\n                // will not be considered by value.length in some browsers\n                newLen = Math.max(event.target.selectionStart, newValue.length);\n            } catch (err) {\n                // selectionStart is undefined in Google Chrome\n                newLen = newValue.length;\n            }\n            var oldLen = oldValue.length;\n\n            var backspaces;\n            var inputs = newLen - oldLen;\n            if (inputs < 0) {\n                backspaces = -inputs;\n            } else {\n                backspaces = 0;\n            }\n\n            // Compare the old string with the new to account for\n            // text-corrections or other input that modify existing text\n            var i;\n            for (i = 0; i < Math.min(oldLen, newLen); i++) {\n                if (newValue.charAt(i) != oldValue.charAt(i)) {\n                    inputs = newLen - i;\n                    backspaces = oldLen - i;\n                    break;\n                }\n            }\n\n            // Send the key events\n            for (i = 0; i < backspaces; i++) {\n                UI.rfb.sendKey(KeyTable.XK_BackSpace);\n            }\n            for (i = newLen - inputs; i < newLen; i++) {\n                UI.rfb.sendKey(keysyms.fromUnicode(newValue.charCodeAt(i)).keysym);\n            }\n\n            // Control the text content length in the keyboardinput element\n            if (newLen > 2 * UI.defaultKeyboardinputLen) {\n                UI.keyboardinputReset();\n            } else if (newLen < 1) {\n                // There always have to be some text in the keyboardinput\n                // element with which backspace can interact.\n                UI.keyboardinputReset();\n                // This sometimes causes the keyboard to disappear for a second\n                // but it is required for the android keyboard to recognize that\n                // text has been added to the field\n                event.target.blur();\n                // This has to be ran outside of the input handler in order to work\n                setTimeout(event.target.focus.bind(event.target), 0);\n            } else {\n                UI.lastKeyboardinput = newValue;\n            }\n        },\n\n/* ------^-------\n *   /KEYBOARD\n * ==============\n *   EXTRA KEYS\n * ------v------*/\n\n        openExtraKeys: function() {\n            UI.closeAllPanels();\n            UI.openControlbar();\n\n            document.getElementById('noVNC_modifiers')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_toggle_extra_keys_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        closeExtraKeys: function() {\n            document.getElementById('noVNC_modifiers')\n                .classList.remove(\"noVNC_open\");\n            document.getElementById('noVNC_toggle_extra_keys_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        toggleExtraKeys: function() {\n            if(document.getElementById('noVNC_modifiers')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeExtraKeys();\n            } else  {\n                UI.openExtraKeys();\n            }\n        },\n\n        sendEsc: function() {\n            UI.rfb.sendKey(KeyTable.XK_Escape);\n        },\n\n        sendTab: function() {\n            UI.rfb.sendKey(KeyTable.XK_Tab);\n        },\n\n        toggleCtrl: function() {\n            var btn = document.getElementById('noVNC_toggle_ctrl_button');\n            if (btn.classList.contains(\"noVNC_selected\")) {\n                UI.rfb.sendKey(KeyTable.XK_Control_L, false);\n                btn.classList.remove(\"noVNC_selected\");\n            } else {\n                UI.rfb.sendKey(KeyTable.XK_Control_L, true);\n                btn.classList.add(\"noVNC_selected\");\n            }\n        },\n\n        toggleAlt: function() {\n            var btn = document.getElementById('noVNC_toggle_alt_button');\n            if (btn.classList.contains(\"noVNC_selected\")) {\n                UI.rfb.sendKey(KeyTable.XK_Alt_L, false);\n                btn.classList.remove(\"noVNC_selected\");\n            } else {\n                UI.rfb.sendKey(KeyTable.XK_Alt_L, true);\n                btn.classList.add(\"noVNC_selected\");\n            }\n        },\n\n        sendCtrlAltDel: function() {\n            UI.rfb.sendCtrlAltDel();\n        },\n\n/* ------^-------\n *   /EXTRA KEYS\n * ==============\n *     MISC\n * ------v------*/\n\n        setMouseButton: function(num) {\n            var view_only = UI.rfb.get_view_only();\n            if (UI.rfb && !view_only) {\n                UI.rfb.get_mouse().set_touchButton(num);\n            }\n\n            var blist = [0, 1,2,4];\n            for (var b = 0; b < blist.length; b++) {\n                var button = document.getElementById('noVNC_mouse_button' +\n                                                     blist[b]);\n                if (blist[b] === num && !view_only) {\n                    button.classList.remove(\"noVNC_hidden\");\n                } else {\n                    button.classList.add(\"noVNC_hidden\");\n                }\n            }\n        },\n\n        displayBlur: function() {\n            if (UI.rfb && !UI.rfb.get_view_only()) {\n                UI.rfb.get_keyboard().set_focused(false);\n                UI.rfb.get_mouse().set_focused(false);\n            }\n        },\n\n        displayFocus: function() {\n            if (UI.rfb && !UI.rfb.get_view_only()) {\n                UI.rfb.get_keyboard().set_focused(true);\n                UI.rfb.get_mouse().set_focused(true);\n            }\n        },\n\n        updateSessionSize: function(rfb, width, height) {\n            UI.updateViewClip();\n            UI.updateViewDrag();\n        },\n\n        updateDesktopName: function(rfb, name) {\n            UI.desktopName = name;\n            // Display the desktop name in the document title\n            document.title = name + \" - noVNC\";\n        },\n\n        bell: function(rfb) {\n            if (WebUtil.getConfigVar('bell', 'on') === 'on') {\n                document.getElementById('noVNC_bell').play();\n            }\n        },\n\n        //Helper to add options to dropdown.\n        addOption: function(selectbox, text, value) {\n            var optn = document.createElement(\"OPTION\");\n            optn.text = text;\n            optn.value = value;\n            selectbox.options.add(optn);\n        },\n\n/* ------^-------\n *    /MISC\n * ==============\n */\n    };\n\n    /* [module] UI.load(); */\n})();\n\n/* [module] export default UI; */\n", "<!DOCTYPE html>\n<html>\n    <head><title>Input Test</title></head>\n    <body>\n        <br><br>\n\n        Canvas:\n        <span id=\"button-selection\" style=\"display: none;\">\n            <input id=\"button1\" type=\"button\" value=\"L\"><input id=\"button2\" type=\"button\" value=\"M\"><input id=\"button4\" type=\"button\" value=\"R\">\n        </span>\n        <br>\n        <canvas id=\"canvas\" width=\"640\" height=\"20\"\n                style=\"border-style: dotted; border-width: 1px;\">\n            Canvas not supported.\n        </canvas>\n\n        <br>\n        Results:<br>\n        <textarea id=\"messages\" style=\"font-size: 9;\" cols=80 rows=25></textarea>\n    </body>\n\n    <!--\n    <script type='text/javascript'\n        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>\n    -->\n    <script src=\"../core/util.js\"></script>\n    <script src=\"../app/webutil.js\"></script>\n    <script src=\"../core/base64.js\"></script>\n    <script src=\"../core/input/keysym.js\"></script>\n    <script src=\"../core/input/keysymdef.js\"></script> \n    <script src=\"../core/input/xtscancodes.js\"></script>\n    <script src=\"../core/input/util.js\"></script>\n    <script src=\"../core/input/devices.js\"></script>\n    <script src=\"../core/display.js\"></script>\n    <script>\n        var msg_cnt = 0, iterations,\n            width = 400, height = 200,\n            canvas, keyboard, mouse;\n\n        var newline = \"\\n\";\n        if (Util.Engine.trident) {\n            var newline = \"<br>\\n\";\n        }\n\n        function message(str) {\n            console.log(str);\n            cell = document.getElementById('messages');\n            cell.innerHTML += msg_cnt + \": \" + str + newline;\n            cell.scrollTop = cell.scrollHeight;\n            msg_cnt++;\n        }\n\n        function mouseButton(x, y, down, bmask) {\n            msg = 'mouse x,y: ' + x + ',' + y + '  down: ' + down;\n            msg += ' bmask: ' + bmask;\n            message(msg);\n        }\n\n        function mouseMove(x, y) {\n            msg = 'mouse x,y: ' + x + ',' + y;\n            //console.log(msg);\n        }\n\n        function rfbKeyPress(keysym, down) {\n            var d = down ? \"down\" : \" up \";\n            var key = keysyms.lookup(keysym);\n            var msg = \"RFB keypress \" + d + \" keysym: \" + keysym;\n            if (key && key.keyname) {\n                msg += \" key name: \" + key.keyname;\n            }\n            message(msg);\n        }\n        function rawKey(e) {\n            msg = \"raw key event \" + e.type +\n                  \" (key: \" + e.keyCode + \", char: \" + e.charCode +\n                  \", which: \" + e.which +\")\";\n            message(msg);\n        }\n\n        function selectButton(num) {\n            var b, blist = [1,2,4];\n\n            if (typeof num === 'undefined') {\n                // Show the default\n                num = mouse.get_touchButton();\n            } else if (num === mouse.get_touchButton()) {\n                // Set all buttons off (no clicks)\n                mouse.set_touchButton(0);\n                num = 0;\n            } else {\n                // Turn on one button\n                mouse.set_touchButton(num);\n            }\n\n            for (b = 0; b < blist.length; b++) {\n                if (blist[b] === num) {\n                    document.getElementById('button' + blist[b]).style.backgroundColor = \"black\";\n                    document.getElementById('button' + blist[b]).style.color = \"lightgray\";\n                } else {\n                    document.getElementById('button' + blist[b]).style.backgroundColor = \"\";\n                    document.getElementById('button' + blist[b]).style.color = \"\";\n                }\n            }\n        }\n\n        window.onload = function() {\n            canvas = new Display({'target' : document.getElementById('canvas')});\n            keyboard = new Keyboard({'target': document,\n                                    'onKeyPress': rfbKeyPress});\n            document.addEventListener('keypress', rawKey);\n            document.addEventListener('keydown', rawKey);\n            document.addEventListener('keyup', rawKey);\n            mouse    = new Mouse({'target': document.getElementById('canvas'),\n                                'onMouseButton': mouseButton,\n                                'onMouseMove': mouseMove});\n\n            canvas.resize(width, height, true);\n            keyboard.grab();\n            mouse.grab();\n            message(\"Display initialized\");\n\n            if (Util.isTouchDevice) {\n                message(\"Touch device detected\");\n                document.getElementById('button-selection').style.display = \"inline\";\n                document.getElementById('button1').onclick = function(){ selectButton(1) };\n                document.getElementById('button2').onclick = function(){ selectButton(2) };\n                document.getElementById('button4').onclick = function(){ selectButton(4) };\n                selectButton();\n            }\n\n        }\n    </script>\n</html>\n", "<!DOCTYPE html>\n<html>\n    <head>\n        <title>VNC Performance Benchmark</title>\n    </head>\n    <body>\n\n        Passes: <input id='passes' style='width:50' value=3>&nbsp;\n\n        <input id='startButton' type='button' value='Start' style='width:100px'\n            onclick=\"do_test();\" disabled>&nbsp;\n\n        <br><br>\n\n        Results:<br>\n        <textarea id=\"messages\" style=\"font-size: 9;\" cols=80 rows=15></textarea>\n\n        <br><br>\n\n        <div id=\"VNC_screen\">\n            <div id=\"VNC_status_bar\" class=\"VNC_status_bar\" style=\"margin-top: 0px;\">\n                <table border=0 width=100%><tr>\n                    <td><div id=\"VNC_status\">Loading</div></td>\n                </tr></table>\n            </div>\n            <canvas id=\"VNC_canvas\" width=\"640px\" height=\"20px\">\n                Canvas not supported.\n            </canvas>\n        </div>\n\n    </body>\n\n    <!--\n    <script type='text/javascript'\n        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>\n    -->\n\n    <script type=\"text/javascript\">\n        var INCLUDE_URI= \"../\";\n    </script>\n    <script src=\"../core/util.js\"></script>\n    <script src=\"../app/webutil.js\"></script>\n\n    <script>\n        var fname = WebUtil.getQueryVar('data', null);\n        if (fname) {\n            msg(\"Loading \" + fname);\n\n            // Load supporting scripts\n            WebUtil.load_scripts({\n                'core': [\"base64.js\", \"websock.js\", \"des.js\", \"input/keysym.js\",\n                         \"input/keysymdef.js\", \"input/xtscancodes.js\", \"input/util.js\",\n                         \"input/devices.js\", \"display.js\", \"rfb.js\", \"inflator.js\"],\n                'tests': [\"playback.js\"],\n                'recordings': [fname]});\n        } else {\n            msg(\"Must specifiy data=FOO.js in query string.\");\n        }\n\n        var start_time, VNC_frame_data, pass, passes, encIdx,\n            encOrder = ['raw', 'rre', 'hextile', 'tightpng', 'copyrect'],\n            encTot = {}, encMin = {}, encMax = {},\n            passCur, passTot, passMin, passMax;\n\n        function msg(str) {\n            console.log(str);\n            var cell = document.getElementById('messages');\n            cell.innerHTML += str + \"\\n\";\n            cell.scrollTop = cell.scrollHeight;\n        }\n        function dbgmsg(str) {\n            if (Util.get_logging() === 'debug') {\n                msg(str);\n            }\n        }\n\n        disconnected = function (rfb, reason) {\n            if (reason) {\n                msg(\"noVNC sent '\" + state +\n                    \"' state during pass \" + pass +\n                    \", iteration \" + iteration +\n                    \" frame \" + frame_idx);\n                test_state = 'failed';\n            }\n        }\n\n        notification = function (rfb, mesg, level, options) {\n            document.getElementById('VNC_status').innerHTML = mesg;\n        }\n\n        function do_test() {\n            document.getElementById('startButton').value = \"Running\";\n            document.getElementById('startButton').disabled = true;\n\n            mode = 'perftest'; // full-speed\n            passes = document.getElementById('passes').value;\n            pass = 1;\n            encIdx = 0;\n\n            // Render each encoding once for each pass\n            iterations = 1;\n\n            // Initialize stats counters\n            for (i = 0; i < encOrder.length; i++) {\n                enc = encOrder[i];\n                encTot[i] = 0;\n                encMin[i] = 2<<23; // Something sufficiently large\n                encMax[i] = 0;\n            }\n            passCur = 0;\n            passTot = 0;\n            passMin = 2<<23;\n            passMax = 0;\n\n            // Fire away\n            next_encoding();\n        }\n\n        function next_encoding() {\n            var encName;\n\n            if (encIdx >= encOrder.length) {\n                // Accumulate pass stats\n                if (passCur < passMin) {\n                    passMin = passCur;\n                }\n                if (passCur > passMax) {\n                    passMax = passCur;\n                }\n                msg(\"Pass \" + pass + \" took \" + passCur + \" ms\");\n\n                passCur = 0;\n                encIdx = 0;\n                pass += 1;\n                if (pass > passes) {\n                    // We are finished\n                    // Shut-off event interception\n                    rfb.get_mouse().ungrab();\n                    rfb.get_keyboard().ungrab();\n                    document.getElementById('startButton').disabled = false;\n                    document.getElementById('startButton').value = \"Start\";\n                    finish_passes();\n                    return; // We are finished, terminate\n                }\n            }\n\n            encName = encOrder[encIdx];\n            dbgmsg(\"Rendering pass \" + pass + \" encoding '\" + encName + \"'\");\n\n            VNC_frame_data = VNC_frame_data_multi[encName];\n            iteration = 0;\n            start_time = (new Date()).getTime();\n\n            next_iteration();\n        }\n\n        // Finished rendering current encoding\n        function finish() {\n            var total_time, end_time = (new Date()).getTime();\n            total_time = end_time - start_time;\n\n            dbgmsg(\"Encoding \" + encOrder[encIdx] + \" took \" + total_time + \"ms\");\n\n            passCur += total_time;\n            passTot += total_time;\n\n            // Accumulate stats\n            encTot[encIdx] += total_time;\n            if (total_time < encMin[encIdx]) {\n                encMin[encIdx] = total_time;\n            }\n            if (total_time > encMax[encIdx]) {\n                encMax[encIdx] = total_time;\n            }\n\n            encIdx += 1;\n            next_encoding();\n        }\n\n        function finish_passes() {\n            var i, enc, avg, passAvg;\n            msg(\"STATS (for \" + passes + \" passes)\");\n            // Encoding stats\n            for (i = 0; i < encOrder.length; i++) {\n                enc = encOrder[i];\n                avg = (encTot[i] / passes).toFixed(1);\n                msg(\"  \" + enc + \": \" + encTot[i] + \" ms, \" +\n                    encMin[i] + \"/\" + avg + \"/\" + encMax[i] +\n                    \" (min/avg/max)\");\n\n            }\n            // Print pass stats\n            passAvg = (passTot / passes).toFixed(1);\n            msg(\"\\n  All passes: \" + passTot + \" ms, \" +\n                passMin + \"/\" + passAvg + \"/\" + passMax +\n                \" (min/avg/max)\");\n        }\n\n        window.onscriptsload = function() {\n            var i, enc;\n            dbgmsg(\"Frame lengths:\");\n            for (i = 0; i < encOrder.length; i++) {\n                enc = encOrder[i];\n                dbgmsg(\"  \" + enc + \": \" + VNC_frame_data_multi[enc].length);\n            }\n            document.getElementById('startButton').disabled = false;\n        }\n    </script>\n</html>\n", "<!DOCTYPE html>\n<html>\n    <head>\n        <title>VNC Playback</title>\n    </head>\n    <body>\n\n        Iterations: <input id='iterations' style='width:50'>&nbsp;\n        Perftest:<input type='radio' id='mode1' name='mode' checked>&nbsp;\n        Realtime:<input type='radio' id='mode2' name='mode'>&nbsp;&nbsp;\n\n        <input id='startButton' type='button' value='Start' style='width:100px'\n            onclick=\"start();\" disabled>&nbsp;\n\n        <br><br>\n\n        Results:<br>\n        <textarea id=\"messages\" style=\"font-size: 9;\" cols=80 rows=25></textarea>\n\n        <br><br>\n\n        <div id=\"VNC_screen\">\n            <div id=\"VNC_status_bar\" class=\"VNC_status_bar\" style=\"margin-top: 0px;\">\n                <table border=0 width=100%><tr>\n                    <td><div id=\"VNC_status\">Loading</div></td>\n                </tr></table>\n            </div>\n            <canvas id=\"VNC_canvas\" width=\"640px\" height=\"20px\">\n                Canvas not supported.\n            </canvas>\n        </div>\n\n    </body>\n\n    <!--\n    <script type='text/javascript'\n        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>\n    -->\n\n    <script type=\"text/javascript\">\n        var INCLUDE_URI= \"../\";\n    </script>\n    <script src=\"../core/util.js\"></script>\n    <script src=\"../app/webutil.js\"></script>\n\n    <script>\n        var fname, start_time;\n\n        function message(str) {\n            console.log(str);\n            var cell = document.getElementById('messages');\n            cell.innerHTML += str + \"\\n\";\n            cell.scrollTop = cell.scrollHeight;\n        }\n\n        fname = WebUtil.getQueryVar('data', null);\n        if (fname) {\n            message(\"Loading \" + fname);\n            // Load supporting scripts\n            WebUtil.load_scripts({\n                'core': [\"base64.js\", \"websock.js\", \"des.js\", \"input/keysym.js\",\n                         \"input/keysymdef.js\", \"input/xtscancodes.js\", \"input/util.js\",\n                         \"input/devices.js\", \"display.js\", \"rfb.js\", \"inflator.js\"],\n                'tests': [\"playback.js\"],\n                'recordings': [fname]});\n\n        } else {\n            message(\"Must specify data=FOO in query string.\");\n        }\n\n        disconnected = function (rfb, reason) {\n            if (reason) {\n                message(\"noVNC sent '\" + state + \"' state during iteration \" + iteration + \" frame \" + frame_idx);\n                test_state = 'failed';\n            }\n        }\n\n        notification = function (rfb, mesg, level, options) {\n            document.getElementById('VNC_status').innerHTML = mesg;\n        }\n\n        function start() {\n            document.getElementById('startButton').value = \"Running\";\n            document.getElementById('startButton').disabled = true;\n\n            iterations = document.getElementById('iterations').value;\n            iteration = 0;\n            start_time = (new Date()).getTime();\n\n            if (document.getElementById('mode1').checked) {\n                message(\"Starting performance playback (fullspeed) [\" + iterations + \" iteration(s)]\");\n                mode = 'perftest';\n            } else {\n                message(\"Starting realtime playback [\" + iterations + \" iteration(s)]\");\n                mode = 'realtime';\n            }\n\n            //recv_message = rfb.testMode(send_array, VNC_frame_encoding);\n\n            next_iteration();\n        }\n\n        function finish() {\n            // Finished with all iterations\n            var total_time, end_time = (new Date()).getTime();\n            total_time = end_time - start_time;\n\n            iter_time = parseInt(total_time / iterations, 10);\n            message(iterations + \" iterations took \" + total_time + \"ms, \" +\n                    iter_time + \"ms per iteration\");\n            // Shut-off event interception\n            rfb.get_mouse().ungrab();\n            rfb.get_keyboard().ungrab();\n            document.getElementById('startButton').disabled = false;\n            document.getElementById('startButton').value = \"Start\";\n\n        }\n\n        window.onscriptsload = function () {\n            iterations = WebUtil.getQueryVar('iterations', 3);\n            document.getElementById('iterations').value = iterations;\n            mode = WebUtil.getQueryVar('mode', 3);\n            if (mode === 'realtime') {\n                document.getElementById('mode2').checked = true;\n            } else {\n                document.getElementById('mode1').checked = true;\n            }\n            if (fname) {\n                message(\"VNC_frame_data.length: \" + VNC_frame_data.length);\n            }\n            document.getElementById('startButton').disabled = false;\n        }\n    </script>\n</html>\n", "<!DOCTYPE html>\n<html>\n<head>\n\n    <!--\n    noVNC example: simple example using default UI\n    Copyright (C) 2012 Joel Martin\n    Copyright (C) 2013 Samuel Mannehed for Cendio AB\n    noVNC is licensed under the MPL 2.0 (see LICENSE.txt)\n    This file is licensed under the 2-Clause BSD license (see LICENSE.txt).\n\n    Connect parameters are provided in query string:\n        http://example.com/?host=HOST&port=PORT&encrypt=1&true_color=1\n    or the fragment:\n        http://example.com/#host=HOST&port=PORT&encrypt=1&true_color=1\n    -->\n    <title>noVNC</title>\n\n    <meta charset=\"utf-8\">\n\n    <!-- Always force latest IE rendering engine (even in intranet) & Chrome Frame\n                Remove this if you use the .htaccess -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\n    <!-- Apple iOS Safari settings -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />\n    <!-- App Start Icon  -->\n    <link rel=\"apple-touch-startup-image\" href=\"app/images/screen_320x460.png\" />\n    <!-- For iOS devices set the icon to use if user bookmarks app on their homescreen -->\n    <link rel=\"apple-touch-icon\" href=\"app/images/screen_57x57.png\">\n    <!--\n    <link rel=\"apple-touch-icon-precomposed\" href=\"app/images/screen_57x57.png\" />\n    -->\n\n\n    <!-- Stylesheets -->\n    <link rel=\"stylesheet\" href=\"app/styles/auto.css\">\n\n     <!--\n    <script type='text/javascript'\n        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>\n    -->\n        <script src=\"core/util.js\"></script>\n        <script src=\"app/webutil.js\"></script>\n</head>\n\n<body style=\"margin: 0px;\">\n    <div id=\"noVNC_container\">\n            <div id=\"noVNC_status_bar\" class=\"noVNC_status_bar\" style=\"margin-top: 0px;\">\n                <table border=0 width=\"100%\"><tr>\n                    <td><div id=\"noVNC_status\" style=\"position: relative; height: auto;\">\n                        Loading\n                    </div></td>\n                    <td width=\"1%\"><div id=\"noVNC_buttons\">\n                        <input type=button value=\"Send CtrlAltDel\"\n                            id=\"sendCtrlAltDelButton\">\n                        <span id=\"noVNC_xvp_buttons\">\n                        <input type=button value=\"Shutdown\"\n                            id=\"xvpShutdownButton\">\n                        <input type=button value=\"Reboot\"\n                            id=\"xvpRebootButton\">\n                        <input type=button value=\"Reset\"\n                            id=\"xvpResetButton\">\n                        </span>\n                            </div></td>\n                </tr></table>\n            </div>\n            <canvas id=\"noVNC_canvas\" width=\"640px\" height=\"20px\">\n                Canvas not supported.\n            </canvas>\n        </div>\n\n        <script>\n        /*jslint white: false */\n        /*global window, $, Util, RFB, */\n        \"use strict\";\n\n        // Load supporting scripts\n        WebUtil.load_scripts({\n            'core': [\"base64.js\", \"websock.js\", \"des.js\", \"input/keysymdef.js\",\n                     \"input/xtscancodes.js\", \"input/util.js\", \"input/devices.js\",\n                     \"display.js\", \"inflator.js\", \"rfb.js\", \"input/keysym.js\"]});\n\n        var rfb;\n        var resizeTimeout;\n        var desktopName;\n\n\n        function UIresize() {\n            if (WebUtil.getConfigVar('resize', false)) {\n                var innerW = window.innerWidth;\n                var innerH = window.innerHeight;\n                var controlbarH = document.getElementById('noVNC_status_bar').offsetHeight;\n                if (innerW !== undefined && innerH !== undefined)\n                    rfb.requestDesktopSize(innerW, innerH - controlbarH);\n            }\n        }\n        function FBUComplete(rfb, fbu) {\n            UIresize();\n            rfb.set_onFBUComplete(function() { });\n        }\n        function updateDesktopName(rfb, name) {\n            desktopName = name;\n        }\n        function passwordRequired(rfb, msg) {\n            if (typeof msg === 'undefined') {\n                msg = 'Password Required: ';\n            }\n            var html;\n            html = '<form onsubmit=\"return setPassword();\"';\n            html += '  style=\"margin-bottom: 0px\">';\n            html += msg;\n            html += '<input type=password size=10 id=\"password_input\" class=\"noVNC_status\">';\n            html += '<\\/form>';\n            status(html, \"warn\");\n        }\n        function setPassword() {\n            rfb.sendPassword(document.getElementById('password_input').value);\n            return false;\n        }\n        function sendCtrlAltDel() {\n            rfb.sendCtrlAltDel();\n            return false;\n        }\n        function xvpShutdown() {\n            rfb.xvpShutdown();\n            return false;\n        }\n        function xvpReboot() {\n            rfb.xvpReboot();\n            return false;\n        }\n        function xvpReset() {\n            rfb.xvpReset();\n            return false;\n        }\n        function status(text, level) {\n            switch (level) {\n                case 'normal':\n                case 'warn':\n                case 'error':\n                    break;\n                default:\n                    level = \"warn\";\n            }\n            document.getElementById('noVNC_status_bar').setAttribute(\"class\", \"noVNC_status_\" + level);\n            document.getElementById('noVNC_status').innerHTML = text;\n        }\n        function updateState(rfb, state, oldstate) {\n            var cad = document.getElementById('sendCtrlAltDelButton');\n            switch (state) {\n                case 'connecting':\n                    status(\"Connecting\", \"normal\");\n                    break;\n                case 'connected':\n                    if (rfb && rfb.get_encrypt()) {\n                        status(\"Connected (encrypted) to \" +\n                               desktopName, \"normal\");\n                    } else {\n                        status(\"Connected (unencrypted) to \" +\n                               desktopName, \"normal\");\n                    }\n                    break;\n                case 'disconnecting':\n                    status(\"Disconnecting\", \"normal\");\n                    break;\n                case 'disconnected':\n                    status(\"Disconnected\", \"normal\");\n                    break;\n                default:\n                    status(state, \"warn\");\n                    break;\n            }\n\n            if (state === 'connected') {\n                cad.disabled = false;\n            } else {\n                cad.disabled = true;\n                xvpInit(0);\n            }\n\n        }\n        function disconnected(rfb, reason) {\n            if (typeof(reason) !== 'undefined') {\n                status(reason, \"error\");\n            }\n        }\n        function notification(rfb, msg, level, options) {\n            status(msg, level);\n        }\n\n        window.onresize = function () {\n            // When the window has been resized, wait until the size remains\n            // the same for 0.5 seconds before sending the request for changing\n            // the resolution of the session\n            clearTimeout(resizeTimeout);\n            resizeTimeout = setTimeout(function(){\n                UIresize();\n            }, 500);\n        };\n\n        function xvpInit(ver) {\n            var xvpbuttons;\n            xvpbuttons = document.getElementById('noVNC_xvp_buttons');\n            if (ver >= 1) {\n                xvpbuttons.style.display = 'inline';\n            } else {\n                xvpbuttons.style.display = 'none';\n            }\n        }\n\n        window.onscriptsload = function () {\n            var host, port, password, path, token;\n\n            document.getElementById('sendCtrlAltDelButton').style.display = \"inline\";\n            document.getElementById('sendCtrlAltDelButton').onclick = sendCtrlAltDel;\n            document.getElementById('xvpShutdownButton').onclick = xvpShutdown;\n            document.getElementById('xvpRebootButton').onclick = xvpReboot;\n            document.getElementById('xvpResetButton').onclick = xvpReset;\n\n            WebUtil.init_logging(WebUtil.getConfigVar('logging', 'warn'));\n            document.title = unescape(WebUtil.getConfigVar('title', 'noVNC'));\n            // By default, use the host and port of server that served this file\n            host = WebUtil.getConfigVar('host', window.location.hostname);\n            port = WebUtil.getConfigVar('port', window.location.port);\n\n            // if port == 80 (or 443) then it won't be present and should be\n            // set manually\n            if (!port) {\n                if (window.location.protocol.substring(0,5) == 'https') {\n                    port = 443;\n                }\n                else if (window.location.protocol.substring(0,4) == 'http') {\n                    port = 80;\n                }\n            }\n\n            password = WebUtil.getConfigVar('password', '');\n            path = WebUtil.getConfigVar('path', 'websockify');\n\n            // If a token variable is passed in, set the parameter in a cookie.\n            // This is used by nova-novncproxy.\n            token = WebUtil.getConfigVar('token', null);\n            if (token) {\n\n                // if token is already present in the path we should use it\n                path = WebUtil.injectParamIfMissing(path, \"token\", token);\n\n                WebUtil.createCookie('token', token, 1)\n            }\n\n            if ((!host) || (!port)) {\n                status('Must specify host and port in URL', 'error');\n                return;\n            }\n\n            try {\n                rfb = new RFB({'target':       document.getElementById('noVNC_canvas'),\n                               'encrypt':      WebUtil.getConfigVar('encrypt',\n                                        (window.location.protocol === \"https:\")),\n                               'repeaterID':   WebUtil.getConfigVar('repeaterID', ''),\n                               'true_color':   WebUtil.getConfigVar('true_color', true),\n                               'local_cursor': WebUtil.getConfigVar('cursor', true),\n                               'shared':       WebUtil.getConfigVar('shared', true),\n                               'view_only':    WebUtil.getConfigVar('view_only', false),\n                               'onNotification':  notification,\n                               'onUpdateState':  updateState,\n                               'onDisconnected': disconnected,\n                               'onXvpInit':    xvpInit,\n                               'onPasswordRequired':  passwordRequired,\n                               'onFBUComplete': FBUComplete,\n                               'onDesktopName': updateDesktopName});\n            } catch (exc) {\n                status('Unable to create RFB client -- ' + exc, 'error');\n                return; // don't continue trying to connect\n            }\n\n            rfb.connect(host, port, password, path);\n        };\n        </script>\n\n    </body>\n</html>\n"], "fixing_code": ["/*\n * noVNC: HTML5 VNC client\n * Copyright (C) 2012 Joel Martin\n * Copyright (C) 2016 Samuel Mannehed for Cendio AB\n * Copyright (C) 2016 Pierre Ossman for Cendio AB\n * Licensed under MPL 2.0 (see LICENSE.txt)\n *\n * See README.md for usage and integration instructions.\n */\n\n/* jslint white: false, browser: true */\n/* global window, document.getElementById, Util, WebUtil, RFB, Display */\n\n/* [module]\n * import Util from \"../core/util\";\n * import KeyTable from \"../core/input/keysym\";\n * import keysyms from \"./keysymdef\";\n * import RFB from \"../core/rfb\";\n * import Display from \"../core/display\";\n * import WebUtil from \"./webutil\";\n */\n\nvar UI;\n\n(function () {\n    \"use strict\";\n\n    // Fallback for all uncought errors\n    window.addEventListener('error', function(event) {\n        try {\n            var msg = \"\";\n\n            msg += \"<div>\";\n            msg += event.message;\n            msg += \"</div>\";\n\n            msg += \" <div class=\\\"noVNC_location\\\">\";\n            msg += event.filename;\n            msg += \":\" + event.lineno + \":\" + event.colno;\n            msg += \"</div>\";\n\n            if ((event.error !== undefined) &&\n                (event.error.stack !== undefined)) {\n                msg += \"<div class=\\\"noVNC_stack\\\">\";\n                msg += event.error.stack;\n                msg += \"</div>\";\n            }\n\n            document.getElementById('noVNC_fallback_error')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_fallback_errormsg').textContent = msg;\n        } catch (exc) {\n            document.write(\"noVNC encountered an error.\");\n        }\n        // Don't return true since this would prevent the error\n        // from being printed to the browser console.\n        return false;\n    });\n\n    // Set up translations\n    var LINGUAS = [\"de\", \"el\", \"nl\", \"sv\"];\n    Util.Localisation.setup(LINGUAS);\n    if (Util.Localisation.language !== \"en\") {\n        WebUtil.load_scripts(\n            {'app': [\"locale/\" + Util.Localisation.language + \".js\"]});\n    }\n\n    /* [begin skip-as-module] */\n    // Load supporting scripts\n    WebUtil.load_scripts(\n        {'core': [\"base64.js\", \"websock.js\", \"des.js\", \"input/keysymdef.js\",\n                  \"input/xtscancodes.js\", \"input/util.js\", \"input/devices.js\",\n                  \"display.js\", \"inflator.js\", \"rfb.js\", \"input/keysym.js\"]});\n\n    window.onscriptsload = function () { UI.load(); };\n    /* [end skip-as-module] */\n\n    var _ = Util.Localisation.get;\n\n    UI = {\n\n        connected: false,\n        desktopName: \"\",\n\n        resizeTimeout: null,\n        statusTimeout: null,\n        hideKeyboardTimeout: null,\n        idleControlbarTimeout: null,\n        closeControlbarTimeout: null,\n\n        controlbarGrabbed: false,\n        controlbarDrag: false,\n        controlbarMouseDownClientY: 0,\n        controlbarMouseDownOffsetY: 0,\n\n        isSafari: false,\n        rememberedClipSetting: null,\n        lastKeyboardinput: null,\n        defaultKeyboardinputLen: 100,\n\n        // Setup rfb object, load settings from browser storage, then call\n        // UI.init to setup the UI/menus\n        load: function(callback) {\n            WebUtil.initSettings(UI.start, callback);\n        },\n\n        // Render default UI and initialize settings menu\n        start: function(callback) {\n\n            // Setup global variables first\n            UI.isSafari = (navigator.userAgent.indexOf('Safari') !== -1 &&\n                           navigator.userAgent.indexOf('Chrome') === -1);\n\n            UI.initSettings();\n\n            // Translate the DOM\n            Util.Localisation.translateDOM();\n\n            // Adapt the interface for touch screen devices\n            if (Util.isTouchDevice) {\n                document.documentElement.classList.add(\"noVNC_touch\");\n                // Remove the address bar\n                setTimeout(function() { window.scrollTo(0, 1); }, 100);\n                UI.forceSetting('clip', true);\n            } else {\n                UI.initSetting('clip', false);\n            }\n\n            // Restore control bar position\n            if (WebUtil.readSetting('controlbar_pos') === 'right') {\n                UI.toggleControlbarSide();\n            }\n\n            // Setup and initialize event handlers\n            UI.setupWindowEvents();\n            UI.setupFullscreen();\n            UI.addControlbarHandlers();\n            UI.addTouchSpecificHandlers();\n            UI.addExtraKeysHandlers();\n            UI.addXvpHandlers();\n            UI.addConnectionControlHandlers();\n            UI.addClipboardHandlers();\n            UI.addSettingsHandlers();\n\n            UI.openControlbar();\n\n            // Show the connect panel on first load unless autoconnecting\n            if (!autoconnect) {\n                UI.openConnectPanel();\n            }\n\n            UI.updateViewClip();\n\n            UI.updateVisualState();\n\n            document.getElementById('noVNC_setting_host').focus();\n\n            var autoconnect = WebUtil.getConfigVar('autoconnect', false);\n            if (autoconnect === 'true' || autoconnect == '1') {\n                autoconnect = true;\n                UI.connect();\n            } else {\n                autoconnect = false;\n            }\n\n            if (typeof callback === \"function\") {\n                callback(UI.rfb);\n            }\n        },\n\n        initSettings: function() {\n            var i;\n\n            // Logging selection dropdown\n            var llevels = ['error', 'warn', 'info', 'debug'];\n            for (i = 0; i < llevels.length; i += 1) {\n                UI.addOption(document.getElementById('noVNC_setting_logging'),llevels[i], llevels[i]);\n            }\n\n            // Settings with immediate effects\n            UI.initSetting('logging', 'warn');\n            WebUtil.init_logging(UI.getSetting('logging'));\n\n            // if port == 80 (or 443) then it won't be present and should be\n            // set manually\n            var port = window.location.port;\n            if (!port) {\n                if (window.location.protocol.substring(0,5) == 'https') {\n                    port = 443;\n                }\n                else if (window.location.protocol.substring(0,4) == 'http') {\n                    port = 80;\n                }\n            }\n\n            /* Populate the controls if defaults are provided in the URL */\n            UI.initSetting('host', window.location.hostname);\n            UI.initSetting('port', port);\n            UI.initSetting('encrypt', (window.location.protocol === \"https:\"));\n            UI.initSetting('true_color', true);\n            UI.initSetting('cursor', !Util.isTouchDevice);\n            UI.initSetting('resize', 'off');\n            UI.initSetting('shared', true);\n            UI.initSetting('view_only', false);\n            UI.initSetting('path', 'websockify');\n            UI.initSetting('repeaterID', '');\n        },\n\n        setupWindowEvents: function() {\n            window.addEventListener('resize', UI.applyResizeMode);\n            window.addEventListener('resize', UI.updateViewClip);\n            window.addEventListener('resize', UI.updateViewDrag);\n\n            document.getElementById(\"noVNC_status\")\n                .addEventListener('click', UI.hideStatus);\n        },\n\n        setupFullscreen: function() {\n            // Only show the button if fullscreen is properly supported\n            // * Safari doesn't support alphanumerical input while in fullscreen\n            if (!UI.isSafari &&\n                (document.documentElement.requestFullscreen ||\n                 document.documentElement.mozRequestFullScreen ||\n                 document.documentElement.webkitRequestFullscreen ||\n                 document.body.msRequestFullscreen)) {\n                document.getElementById('noVNC_fullscreen_button')\n                    .classList.remove(\"noVNC_hidden\");\n                UI.addFullscreenHandlers();\n            }\n        },\n\n        addControlbarHandlers: function() {\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('mousemove', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('mouseup', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('mousedown', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('keypress', UI.activateControlbar);\n\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('mousedown', UI.keepControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('keypress', UI.keepControlbar);\n\n            document.getElementById(\"noVNC_view_drag_button\")\n                .addEventListener('click', UI.toggleViewDrag);\n\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('mousedown', UI.controlbarHandleMouseDown);\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('mouseup', UI.controlbarHandleMouseUp);\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('mousemove', UI.dragControlbarHandle);\n            // resize events aren't available for elements\n            window.addEventListener('resize', UI.updateControlbarHandle);\n\n            var exps = document.getElementsByClassName(\"noVNC_expander\");\n            for (var i = 0;i < exps.length;i++) {\n                exps[i].addEventListener('click', UI.toggleExpander);\n            }\n        },\n\n        addTouchSpecificHandlers: function() {\n            document.getElementById(\"noVNC_mouse_button0\")\n                .addEventListener('click', function () { UI.setMouseButton(1); });\n            document.getElementById(\"noVNC_mouse_button1\")\n                .addEventListener('click', function () { UI.setMouseButton(2); });\n            document.getElementById(\"noVNC_mouse_button2\")\n                .addEventListener('click', function () { UI.setMouseButton(4); });\n            document.getElementById(\"noVNC_mouse_button4\")\n                .addEventListener('click', function () { UI.setMouseButton(0); });\n            document.getElementById(\"noVNC_keyboard_button\")\n                .addEventListener('click', UI.toggleVirtualKeyboard);\n\n            document.getElementById(\"noVNC_keyboardinput\")\n                .addEventListener('input', UI.keyInput);\n            document.getElementById(\"noVNC_keyboardinput\")\n                .addEventListener('focus', UI.onfocusVirtualKeyboard);\n            document.getElementById(\"noVNC_keyboardinput\")\n                .addEventListener('blur', UI.onblurVirtualKeyboard);\n            document.getElementById(\"noVNC_keyboardinput\")\n                .addEventListener('submit', function () { return false; });\n\n            document.documentElement\n                .addEventListener('mousedown', UI.keepVirtualKeyboard, true);\n\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('touchstart', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('touchmove', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('touchend', UI.activateControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('input', UI.activateControlbar);\n\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('touchstart', UI.keepControlbar);\n            document.getElementById(\"noVNC_control_bar\")\n                .addEventListener('input', UI.keepControlbar);\n\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('touchstart', UI.controlbarHandleMouseDown);\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('touchend', UI.controlbarHandleMouseUp);\n            document.getElementById(\"noVNC_control_bar_handle\")\n                .addEventListener('touchmove', UI.dragControlbarHandle);\n\n            window.addEventListener('load', UI.keyboardinputReset);\n        },\n\n        addExtraKeysHandlers: function() {\n            document.getElementById(\"noVNC_toggle_extra_keys_button\")\n                .addEventListener('click', UI.toggleExtraKeys);\n            document.getElementById(\"noVNC_toggle_ctrl_button\")\n                .addEventListener('click', UI.toggleCtrl);\n            document.getElementById(\"noVNC_toggle_alt_button\")\n                .addEventListener('click', UI.toggleAlt);\n            document.getElementById(\"noVNC_send_tab_button\")\n                .addEventListener('click', UI.sendTab);\n            document.getElementById(\"noVNC_send_esc_button\")\n                .addEventListener('click', UI.sendEsc);\n            document.getElementById(\"noVNC_send_ctrl_alt_del_button\")\n                .addEventListener('click', UI.sendCtrlAltDel);\n        },\n\n        addXvpHandlers: function() {\n            document.getElementById(\"noVNC_xvp_shutdown_button\")\n                .addEventListener('click', function() { UI.rfb.xvpShutdown(); });\n            document.getElementById(\"noVNC_xvp_reboot_button\")\n                .addEventListener('click', function() { UI.rfb.xvpReboot(); });\n            document.getElementById(\"noVNC_xvp_reset_button\")\n                .addEventListener('click', function() { UI.rfb.xvpReset(); });\n            document.getElementById(\"noVNC_xvp_button\")\n                .addEventListener('click', UI.toggleXvpPanel);\n        },\n\n        addConnectionControlHandlers: function() {\n            document.getElementById(\"noVNC_disconnect_button\")\n                .addEventListener('click', UI.disconnect);\n            document.getElementById(\"noVNC_connect_button\")\n                .addEventListener('click', UI.connect);\n\n            document.getElementById(\"noVNC_password_button\")\n                .addEventListener('click', UI.setPassword);\n        },\n\n        addClipboardHandlers: function() {\n            document.getElementById(\"noVNC_clipboard_button\")\n                .addEventListener('click', UI.toggleClipboardPanel);\n            document.getElementById(\"noVNC_clipboard_text\")\n                .addEventListener('focus', UI.displayBlur);\n            document.getElementById(\"noVNC_clipboard_text\")\n                .addEventListener('blur', UI.displayFocus);\n            document.getElementById(\"noVNC_clipboard_text\")\n                .addEventListener('change', UI.clipboardSend);\n            document.getElementById(\"noVNC_clipboard_clear_button\")\n                .addEventListener('click', UI.clipboardClear);\n        },\n\n        addSettingsHandlers: function() {\n            document.getElementById(\"noVNC_settings_button\")\n                .addEventListener('click', UI.toggleSettingsPanel);\n            document.getElementById(\"noVNC_settings_apply\")\n                .addEventListener('click', UI.settingsApply);\n\n            document.getElementById(\"noVNC_setting_resize\")\n                .addEventListener('change', UI.enableDisableViewClip);\n        },\n\n        addFullscreenHandlers: function() {\n            document.getElementById(\"noVNC_fullscreen_button\")\n                .addEventListener('click', UI.toggleFullscreen);\n\n            window.addEventListener('fullscreenchange', UI.updateFullscreenButton);\n            window.addEventListener('mozfullscreenchange', UI.updateFullscreenButton);\n            window.addEventListener('webkitfullscreenchange', UI.updateFullscreenButton);\n            window.addEventListener('msfullscreenchange', UI.updateFullscreenButton);\n        },\n\n        initRFB: function() {\n            try {\n                UI.rfb = new RFB({'target': document.getElementById('noVNC_canvas'),\n                                  'onNotification': UI.notification,\n                                  'onUpdateState': UI.updateState,\n                                  'onDisconnected': UI.disconnectFinished,\n                                  'onPasswordRequired': UI.passwordRequired,\n                                  'onXvpInit': UI.updateXvpButton,\n                                  'onClipboard': UI.clipboardReceive,\n                                  'onBell': UI.bell,\n                                  'onFBUComplete': UI.initialResize,\n                                  'onFBResize': UI.updateSessionSize,\n                                  'onDesktopName': UI.updateDesktopName});\n                return true;\n            } catch (exc) {\n                var msg = \"Unable to create RFB client -- \" + exc;\n                Util.Error(msg);\n                UI.showStatus(msg, 'error');\n                return false;\n            }\n        },\n\n/* ------^-------\n *     /INIT\n * ==============\n *     VISUAL\n * ------v------*/\n\n        updateState: function(rfb, state, oldstate) {\n            var msg;\n\n            document.documentElement.classList.remove(\"noVNC_connecting\");\n            document.documentElement.classList.remove(\"noVNC_connected\");\n            document.documentElement.classList.remove(\"noVNC_disconnecting\");\n\n            switch (state) {\n                case 'connecting':\n                    document.getElementById(\"noVNC_transition_text\").textContent = _(\"Connecting...\");\n                    document.documentElement.classList.add(\"noVNC_connecting\");\n                    break;\n                case 'connected':\n                    UI.connected = true;\n                    document.documentElement.classList.add(\"noVNC_connected\");\n                    if (rfb && rfb.get_encrypt()) {\n                        msg = _(\"Connected (encrypted) to \") + UI.desktopName;\n                    } else {\n                        msg = _(\"Connected (unencrypted) to \") + UI.desktopName;\n                    }\n                    UI.showStatus(msg);\n                    break;\n                case 'disconnecting':\n                    UI.connected = false;\n                    document.getElementById(\"noVNC_transition_text\").textContent = _(\"Disconnecting...\");\n                    document.documentElement.classList.add(\"noVNC_disconnecting\");\n                    break;\n                case 'disconnected':\n                    UI.showStatus(_(\"Disconnected\"));\n                    break;\n                default:\n                    msg = \"Invalid UI state\";\n                    Util.Error(msg);\n                    UI.showStatus(msg, 'error');\n                    break;\n            }\n\n            UI.updateVisualState();\n        },\n\n        // Disable/enable controls depending on connection state\n        updateVisualState: function() {\n            //Util.Debug(\">> updateVisualState\");\n            document.getElementById('noVNC_setting_encrypt').disabled = UI.connected;\n            document.getElementById('noVNC_setting_true_color').disabled = UI.connected;\n            if (Util.browserSupportsCursorURIs()) {\n                document.getElementById('noVNC_setting_cursor').disabled = UI.connected;\n            } else {\n                UI.updateSetting('cursor', !Util.isTouchDevice);\n                document.getElementById('noVNC_setting_cursor').disabled = true;\n            }\n\n            UI.enableDisableViewClip();\n            document.getElementById('noVNC_setting_resize').disabled = UI.connected;\n            document.getElementById('noVNC_setting_shared').disabled = UI.connected;\n            document.getElementById('noVNC_setting_view_only').disabled = UI.connected;\n            document.getElementById('noVNC_setting_host').disabled = UI.connected;\n            document.getElementById('noVNC_setting_port').disabled = UI.connected;\n            document.getElementById('noVNC_setting_path').disabled = UI.connected;\n            document.getElementById('noVNC_setting_repeaterID').disabled = UI.connected;\n\n            if (UI.connected) {\n                UI.updateViewClip();\n                UI.setMouseButton(1);\n\n                // Hide the controlbar after 2 seconds\n                UI.closeControlbarTimeout = setTimeout(UI.closeControlbar, 2000);\n            } else {\n                UI.updateXvpButton(0);\n                UI.keepControlbar();\n            }\n\n            // Hide input related buttons in view only mode\n            if (UI.rfb && UI.rfb.get_view_only()) {\n                document.getElementById('noVNC_keyboard_button')\n                    .classList.add('noVNC_hidden');\n                document.getElementById('noVNC_toggle_extra_keys_button')\n                    .classList.add('noVNC_hidden');\n            } else {\n                document.getElementById('noVNC_keyboard_button')\n                    .classList.remove('noVNC_hidden');\n                document.getElementById('noVNC_toggle_extra_keys_button')\n                    .classList.remove('noVNC_hidden');\n            }\n\n            // State change disables viewport dragging.\n            // It is enabled (toggled) by direct click on the button\n            UI.setViewDrag(false);\n\n            // State change also closes the password dialog\n            document.getElementById('noVNC_password_dlg')\n                .classList.remove('noVNC_open');\n\n            //Util.Debug(\"<< updateVisualState\");\n        },\n\n        showStatus: function(text, status_type, time) {\n            var statusElem = document.getElementById('noVNC_status');\n\n            clearTimeout(UI.statusTimeout);\n\n            if (typeof status_type === 'undefined') {\n                status_type = 'normal';\n            }\n\n            statusElem.classList.remove(\"noVNC_status_normal\",\n                                        \"noVNC_status_warn\",\n                                        \"noVNC_status_error\");\n\n            switch (status_type) {\n                case 'warning':\n                case 'warn':\n                    statusElem.classList.add(\"noVNC_status_warn\");\n                    break;\n                case 'error':\n                    statusElem.classList.add(\"noVNC_status_error\");\n                    break;\n                case 'normal':\n                case 'info':\n                default:\n                    statusElem.classList.add(\"noVNC_status_normal\");\n                    break;\n            }\n\n            statusElem.textContent = text;\n            statusElem.classList.add(\"noVNC_open\");\n\n            // If no time was specified, show the status for 1.5 seconds\n            if (typeof time === 'undefined') {\n                time = 1500;\n            }\n\n            // Error messages do not timeout\n            if (status_type !== 'error') {\n                UI.statusTimeout = window.setTimeout(UI.hideStatus, time);\n            }\n        },\n\n        hideStatus: function() {\n            clearTimeout(UI.statusTimeout);\n            document.getElementById('noVNC_status').classList.remove(\"noVNC_open\");\n        },\n\n        notification: function (rfb, msg, level, options) {\n            UI.showStatus(msg, level);\n        },\n\n        activateControlbar: function(event) {\n            clearTimeout(UI.idleControlbarTimeout);\n            // We manipulate the anchor instead of the actual control\n            // bar in order to avoid creating new a stacking group\n            document.getElementById('noVNC_control_bar_anchor')\n                .classList.remove(\"noVNC_idle\");\n            UI.idleControlbarTimeout = window.setTimeout(UI.idleControlbar, 2000);\n        },\n\n        idleControlbar: function() {\n            document.getElementById('noVNC_control_bar_anchor')\n                .classList.add(\"noVNC_idle\");\n        },\n\n        keepControlbar: function() {\n            clearTimeout(UI.closeControlbarTimeout);\n        },\n\n        openControlbar: function() {\n            document.getElementById('noVNC_control_bar')\n                .classList.add(\"noVNC_open\");\n        },\n\n        closeControlbar: function() {\n            UI.closeAllPanels();\n            document.getElementById('noVNC_control_bar')\n                .classList.remove(\"noVNC_open\");\n        },\n\n        toggleControlbar: function() {\n            if (document.getElementById('noVNC_control_bar')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeControlbar();\n            } else {\n                UI.openControlbar();\n            }\n        },\n\n        toggleControlbarSide: function () {\n            // Temporarily disable animation to avoid weird movement\n            var bar = document.getElementById('noVNC_control_bar');\n            bar.style.transitionDuration = '0s';\n            bar.addEventListener('transitionend', function () { this.style.transitionDuration = \"\"; });\n\n            var anchor = document.getElementById('noVNC_control_bar_anchor');\n            if (anchor.classList.contains(\"noVNC_right\")) {\n                WebUtil.writeSetting('controlbar_pos', 'left');\n                anchor.classList.remove(\"noVNC_right\");\n            } else {\n                WebUtil.writeSetting('controlbar_pos', 'right');\n                anchor.classList.add(\"noVNC_right\");\n            }\n\n            // Consider this a movement of the handle\n            UI.controlbarDrag = true;\n        },\n\n        dragControlbarHandle: function (e) {\n            if (!UI.controlbarGrabbed) return;\n\n            var ptr = Util.getPointerEvent(e);\n\n            var anchor = document.getElementById('noVNC_control_bar_anchor');\n            if (ptr.clientX < (window.innerWidth * 0.1)) {\n                if (anchor.classList.contains(\"noVNC_right\")) {\n                    UI.toggleControlbarSide();\n                }\n            } else if (ptr.clientX > (window.innerWidth * 0.9)) {\n                if (!anchor.classList.contains(\"noVNC_right\")) {\n                    UI.toggleControlbarSide();\n                }\n            }\n\n            if (!UI.controlbarDrag) {\n                // The goal is to trigger on a certain physical width, the\n                // devicePixelRatio brings us a bit closer but is not optimal.\n                var dragThreshold = 10 * (window.devicePixelRatio || 1);\n                var dragDistance = Math.abs(ptr.clientY - UI.controlbarMouseDownClientY);\n\n                if (dragDistance < dragThreshold) return;\n\n                UI.controlbarDrag = true;\n            }\n\n            var eventY = ptr.clientY - UI.controlbarMouseDownOffsetY;\n\n            UI.moveControlbarHandle(eventY);\n\n            e.preventDefault();\n            e.stopPropagation();\n            UI.keepControlbar();\n            UI.activateControlbar();\n        },\n\n        // Move the handle but don't allow any position outside the bounds\n        moveControlbarHandle: function (viewportRelativeY) {\n            var handle = document.getElementById(\"noVNC_control_bar_handle\");\n            var handleHeight = handle.getBoundingClientRect().height;\n            var controlbarBounds = document.getElementById(\"noVNC_control_bar\")\n                .getBoundingClientRect();\n            var margin = 10;\n\n            // These heights need to be non-zero for the below logic to work\n            if (handleHeight === 0 || controlbarBounds.height === 0) {\n                return;\n            }\n\n            var newY = viewportRelativeY;\n\n            // Check if the coordinates are outside the control bar\n            if (newY < controlbarBounds.top + margin) {\n                // Force coordinates to be below the top of the control bar\n                newY = controlbarBounds.top + margin;\n\n            } else if (newY > controlbarBounds.top +\n                       controlbarBounds.height - handleHeight - margin) {\n                // Force coordinates to be above the bottom of the control bar\n                newY = controlbarBounds.top +\n                    controlbarBounds.height - handleHeight - margin;\n            }\n\n            // Corner case: control bar too small for stable position\n            if (controlbarBounds.height < (handleHeight + margin * 2)) {\n                newY = controlbarBounds.top +\n                    (controlbarBounds.height - handleHeight) / 2;\n            }\n\n            // The transform needs coordinates that are relative to the parent\n            var parentRelativeY = newY - controlbarBounds.top;\n            handle.style.transform = \"translateY(\" + parentRelativeY + \"px)\";\n        },\n\n        updateControlbarHandle: function () {\n            // Since the control bar is fixed on the viewport and not the page,\n            // the move function expects coordinates relative the the viewport.\n            var handle = document.getElementById(\"noVNC_control_bar_handle\");\n            var handleBounds = handle.getBoundingClientRect();\n            UI.moveControlbarHandle(handleBounds.top);\n        },\n\n        controlbarHandleMouseUp: function(e) {\n            if ((e.type == \"mouseup\") && (e.button != 0)) return;\n\n            // mouseup and mousedown on the same place toggles the controlbar\n            if (UI.controlbarGrabbed && !UI.controlbarDrag) {\n                UI.toggleControlbar();\n                e.preventDefault();\n                e.stopPropagation();\n                UI.keepControlbar();\n                UI.activateControlbar();\n            }\n            UI.controlbarGrabbed = false;\n        },\n\n        controlbarHandleMouseDown: function(e) {\n            if ((e.type == \"mousedown\") && (e.button != 0)) return;\n\n            var ptr = Util.getPointerEvent(e);\n\n            var handle = document.getElementById(\"noVNC_control_bar_handle\");\n            var bounds = handle.getBoundingClientRect();\n\n            WebUtil.setCapture(handle);\n            UI.controlbarGrabbed = true;\n            UI.controlbarDrag = false;\n\n            UI.controlbarMouseDownClientY = ptr.clientY;\n            UI.controlbarMouseDownOffsetY = ptr.clientY - bounds.top;\n            e.preventDefault();\n            e.stopPropagation();\n            UI.keepControlbar();\n            UI.activateControlbar();\n        },\n\n        toggleExpander: function(e) {\n            if (this.classList.contains(\"noVNC_open\")) {\n                this.classList.remove(\"noVNC_open\");\n            } else {\n                this.classList.add(\"noVNC_open\");\n            }\n        },\n\n/* ------^-------\n *    /VISUAL\n * ==============\n *    SETTINGS\n * ------v------*/\n\n        // Initial page load read/initialization of settings\n        initSetting: function(name, defVal) {\n            // Check Query string followed by cookie\n            var val = WebUtil.getConfigVar(name);\n            if (val === null) {\n                val = WebUtil.readSetting(name, defVal);\n            }\n            UI.updateSetting(name, val);\n            return val;\n        },\n\n        // Update cookie and form control setting. If value is not set, then\n        // updates from control to current cookie setting.\n        updateSetting: function(name, value) {\n\n            // Save the cookie for this session\n            if (typeof value !== 'undefined') {\n                WebUtil.writeSetting(name, value);\n            }\n\n            // Update the settings control\n            value = UI.getSetting(name);\n\n            var ctrl = document.getElementById('noVNC_setting_' + name);\n            if (ctrl.type === 'checkbox') {\n                ctrl.checked = value;\n\n            } else if (typeof ctrl.options !== 'undefined') {\n                for (var i = 0; i < ctrl.options.length; i += 1) {\n                    if (ctrl.options[i].value === value) {\n                        ctrl.selectedIndex = i;\n                        break;\n                    }\n                }\n            } else {\n                /*Weird IE9 error leads to 'null' appearring\n                in textboxes instead of ''.*/\n                if (value === null) {\n                    value = \"\";\n                }\n                ctrl.value = value;\n            }\n        },\n\n        // Save control setting to cookie\n        saveSetting: function(name) {\n            var val, ctrl = document.getElementById('noVNC_setting_' + name);\n            if (ctrl.type === 'checkbox') {\n                val = ctrl.checked;\n            } else if (typeof ctrl.options !== 'undefined') {\n                val = ctrl.options[ctrl.selectedIndex].value;\n            } else {\n                val = ctrl.value;\n            }\n            WebUtil.writeSetting(name, val);\n            //Util.Debug(\"Setting saved '\" + name + \"=\" + val + \"'\");\n            return val;\n        },\n\n        // Force a setting to be a certain value\n        forceSetting: function(name, val) {\n            UI.updateSetting(name, val);\n            return val;\n        },\n\n        // Read form control compatible setting from cookie\n        getSetting: function(name) {\n            var ctrl = document.getElementById('noVNC_setting_' + name);\n            var val = WebUtil.readSetting(name);\n            if (typeof val !== 'undefined' && val !== null && ctrl.type === 'checkbox') {\n                if (val.toString().toLowerCase() in {'0':1, 'no':1, 'false':1}) {\n                    val = false;\n                } else {\n                    val = true;\n                }\n            }\n            return val;\n        },\n\n        // Save/apply settings when 'Apply' button is pressed\n        settingsApply: function() {\n            //Util.Debug(\">> settingsApply\");\n            UI.saveSetting('encrypt');\n            UI.saveSetting('true_color');\n            if (Util.browserSupportsCursorURIs()) {\n                UI.saveSetting('cursor');\n            }\n\n            UI.saveSetting('resize');\n\n            if (UI.getSetting('resize') === 'downscale' || UI.getSetting('resize') === 'scale') {\n                UI.forceSetting('clip', false);\n            }\n\n            UI.saveSetting('clip');\n            UI.saveSetting('shared');\n            UI.saveSetting('view_only');\n            UI.saveSetting('host');\n            UI.saveSetting('port');\n            UI.saveSetting('path');\n            UI.saveSetting('repeaterID');\n            UI.saveSetting('logging');\n\n            // Settings with immediate (non-connected related) effect\n            WebUtil.init_logging(UI.getSetting('logging'));\n            UI.updateViewClip();\n            UI.updateViewDrag();\n            //Util.Debug(\"<< settingsApply\");\n        },\n\n/* ------^-------\n *   /SETTINGS\n * ==============\n *    PANELS\n * ------v------*/\n\n        closeAllPanels: function() {\n            UI.closeSettingsPanel();\n            UI.closeXvpPanel();\n            UI.closeClipboardPanel();\n            UI.closeExtraKeys();\n        },\n\n/* ------^-------\n *   /PANELS\n * ==============\n * SETTINGS (panel)\n * ------v------*/\n\n        openSettingsPanel: function() {\n            UI.closeAllPanels();\n            UI.openControlbar();\n\n            UI.updateSetting('encrypt');\n            UI.updateSetting('true_color');\n            if (Util.browserSupportsCursorURIs()) {\n                UI.updateSetting('cursor');\n            } else {\n                UI.updateSetting('cursor', !Util.isTouchDevice);\n                document.getElementById('noVNC_setting_cursor').disabled = true;\n            }\n            UI.updateSetting('clip');\n            UI.updateSetting('resize');\n            UI.updateSetting('shared');\n            UI.updateSetting('view_only');\n            UI.updateSetting('path');\n            UI.updateSetting('repeaterID');\n            UI.updateSetting('logging');\n\n            document.getElementById('noVNC_settings')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_settings_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        closeSettingsPanel: function() {\n            document.getElementById('noVNC_settings')\n                .classList.remove(\"noVNC_open\");\n            document.getElementById('noVNC_settings_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        // Toggle the settings menu:\n        //   On open, settings are refreshed from saved cookies.\n        //   On close, settings are applied\n        toggleSettingsPanel: function() {\n            if (document.getElementById('noVNC_settings')\n                .classList.contains(\"noVNC_open\")) {\n                UI.settingsApply();\n                UI.closeSettingsPanel();\n            } else {\n                UI.openSettingsPanel();\n            }\n        },\n\n/* ------^-------\n *   /SETTINGS\n * ==============\n *      XVP\n * ------v------*/\n\n        openXvpPanel: function() {\n            UI.closeAllPanels();\n            UI.openControlbar();\n\n            document.getElementById('noVNC_xvp')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_xvp_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        closeXvpPanel: function() {\n            document.getElementById('noVNC_xvp')\n                .classList.remove(\"noVNC_open\");\n            document.getElementById('noVNC_xvp_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        toggleXvpPanel: function() {\n            if (document.getElementById('noVNC_xvp')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeXvpPanel();\n            } else {\n                UI.openXvpPanel();\n            }\n        },\n\n        // Disable/enable XVP button\n        updateXvpButton: function(ver) {\n            if (ver >= 1 && !UI.rfb.get_view_only()) {\n                document.getElementById('noVNC_xvp_button')\n                    .classList.remove(\"noVNC_hidden\");\n            } else {\n                document.getElementById('noVNC_xvp_button')\n                    .classList.add(\"noVNC_hidden\");\n                // Close XVP panel if open\n                UI.closeXvpPanel();\n            }\n        },\n\n/* ------^-------\n *     /XVP\n * ==============\n *   CLIPBOARD\n * ------v------*/\n\n        openClipboardPanel: function() {\n            UI.closeAllPanels();\n            UI.openControlbar();\n\n            document.getElementById('noVNC_clipboard')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_clipboard_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        closeClipboardPanel: function() {\n            document.getElementById('noVNC_clipboard')\n                .classList.remove(\"noVNC_open\");\n            document.getElementById('noVNC_clipboard_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        toggleClipboardPanel: function() {\n            if (document.getElementById('noVNC_clipboard')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeClipboardPanel();\n            } else {\n                UI.openClipboardPanel();\n            }\n        },\n\n        clipboardReceive: function(rfb, text) {\n            Util.Debug(\">> UI.clipboardReceive: \" + text.substr(0,40) + \"...\");\n            document.getElementById('noVNC_clipboard_text').value = text;\n            Util.Debug(\"<< UI.clipboardReceive\");\n        },\n\n        clipboardClear: function() {\n            document.getElementById('noVNC_clipboard_text').value = \"\";\n            UI.rfb.clipboardPasteFrom(\"\");\n        },\n\n        clipboardSend: function() {\n            var text = document.getElementById('noVNC_clipboard_text').value;\n            Util.Debug(\">> UI.clipboardSend: \" + text.substr(0,40) + \"...\");\n            UI.rfb.clipboardPasteFrom(text);\n            Util.Debug(\"<< UI.clipboardSend\");\n        },\n\n/* ------^-------\n *  /CLIPBOARD\n * ==============\n *  CONNECTION\n * ------v------*/\n\n        openConnectPanel: function() {\n            document.getElementById('noVNC_connect_dlg')\n                .classList.add(\"noVNC_open\");\n        },\n\n        closeConnectPanel: function() {\n            document.getElementById('noVNC_connect_dlg')\n                .classList.remove(\"noVNC_open\");\n        },\n\n        toggleConnectPanel: function() {\n            if (document.getElementById('noVNC_connect_dlg')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeConnectPanel();\n            } else {\n                UI.openConnectPanel();\n            }\n        },\n\n        connect: function() {\n            var host = document.getElementById('noVNC_setting_host').value;\n            var port = document.getElementById('noVNC_setting_port').value;\n            var path = document.getElementById('noVNC_setting_path').value;\n\n            var password = WebUtil.getConfigVar('password');\n            if (password === null) {\n                password = undefined;\n            }\n\n            if ((!host) || (!port)) {\n                var msg = _(\"Must set host and port\");\n                Util.Error(msg);\n                UI.showStatus(msg, 'error');\n                return;\n            }\n\n            if (!UI.initRFB()) return;\n\n            UI.closeAllPanels();\n            UI.closeConnectPanel();\n\n            UI.rfb.set_encrypt(UI.getSetting('encrypt'));\n            UI.rfb.set_true_color(UI.getSetting('true_color'));\n            UI.rfb.set_local_cursor(UI.getSetting('cursor'));\n            UI.rfb.set_shared(UI.getSetting('shared'));\n            UI.rfb.set_view_only(UI.getSetting('view_only'));\n            UI.rfb.set_repeaterID(UI.getSetting('repeaterID'));\n\n            UI.rfb.connect(host, port, password, path);\n        },\n\n        disconnect: function() {\n            UI.closeAllPanels();\n            UI.rfb.disconnect();\n\n            // Restore the callback used for initial resize\n            UI.rfb.set_onFBUComplete(UI.initialResize);\n\n            // Don't display the connection settings until we're actually disconnected\n        },\n\n        disconnectFinished: function (rfb, reason) {\n            if (typeof reason !== 'undefined') {\n                UI.showStatus(reason, 'error');\n            }\n            UI.openControlbar();\n            UI.openConnectPanel();\n        },\n\n/* ------^-------\n *  /CONNECTION\n * ==============\n *   PASSWORD\n * ------v------*/\n\n        passwordRequired: function(rfb, msg) {\n\n            document.getElementById('noVNC_password_dlg')\n                .classList.add('noVNC_open');\n\n            setTimeout(function () {\n                    document.getElementById('noVNC_password_input').focus();\n                }, 100);\n\n            if (typeof msg === 'undefined') {\n                msg = _(\"Password is required\");\n            }\n            Util.Warn(msg);\n            UI.showStatus(msg, \"warning\");\n        },\n\n        setPassword: function() {\n            UI.rfb.sendPassword(document.getElementById('noVNC_password_input').value);\n            document.getElementById('noVNC_password_dlg')\n                .classList.remove('noVNC_open');\n            return false;\n        },\n\n/* ------^-------\n *  /PASSWORD\n * ==============\n *   FULLSCREEN\n * ------v------*/\n\n        toggleFullscreen: function() {\n            if (document.fullscreenElement || // alternative standard method\n                document.mozFullScreenElement || // currently working methods\n                document.webkitFullscreenElement ||\n                document.msFullscreenElement) {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen();\n                } else if (document.mozCancelFullScreen) {\n                    document.mozCancelFullScreen();\n                } else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen();\n                } else if (document.msExitFullscreen) {\n                    document.msExitFullscreen();\n                }\n            } else {\n                if (document.documentElement.requestFullscreen) {\n                    document.documentElement.requestFullscreen();\n                } else if (document.documentElement.mozRequestFullScreen) {\n                    document.documentElement.mozRequestFullScreen();\n                } else if (document.documentElement.webkitRequestFullscreen) {\n                    document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n                } else if (document.body.msRequestFullscreen) {\n                    document.body.msRequestFullscreen();\n                }\n            }\n            UI.enableDisableViewClip();\n            UI.updateFullscreenButton();\n        },\n\n        updateFullscreenButton: function() {\n            if (document.fullscreenElement || // alternative standard method\n                document.mozFullScreenElement || // currently working methods\n                document.webkitFullscreenElement ||\n                document.msFullscreenElement ) {\n                document.getElementById('noVNC_fullscreen_button')\n                    .classList.add(\"noVNC_selected\");\n            } else {\n                document.getElementById('noVNC_fullscreen_button')\n                    .classList.remove(\"noVNC_selected\");\n            }\n        },\n\n/* ------^-------\n *  /FULLSCREEN\n * ==============\n *     RESIZE\n * ------v------*/\n\n        // Apply remote resizing or local scaling\n        applyResizeMode: function() {\n            if (!UI.rfb) return;\n\n            var screen = UI.screenSize();\n\n            if (screen && UI.connected && UI.rfb.get_display()) {\n\n                var display = UI.rfb.get_display();\n                var resizeMode = UI.getSetting('resize');\n\n                if (resizeMode === 'remote') {\n\n                    // Request changing the resolution of the remote display to\n                    // the size of the local browser viewport.\n\n                    // In order to not send multiple requests before the browser-resize\n                    // is finished we wait 0.5 seconds before sending the request.\n                    clearTimeout(UI.resizeTimeout);\n                    UI.resizeTimeout = setTimeout(function(){\n                        // Request a remote size covering the viewport\n                        if (UI.rfb.requestDesktopSize(screen.w, screen.h)) {\n                            Util.Debug('Requested new desktop size: ' +\n                                       screen.w + 'x' + screen.h);\n                        }\n                    }, 500);\n\n                } else if (resizeMode === 'scale' || resizeMode === 'downscale') {\n                    var downscaleOnly = resizeMode === 'downscale';\n                    var scaleRatio = display.autoscale(screen.w, screen.h, downscaleOnly);\n\n                    if (!UI.rfb.get_view_only()) {\n                        UI.rfb.get_mouse().set_scale(scaleRatio);\n                        Util.Debug('Scaling by ' + UI.rfb.get_mouse().get_scale());\n                    }\n                }\n            }\n        },\n\n        // Gets the the size of the available viewport in the browser window\n        screenSize: function() {\n            var screen = document.getElementById('noVNC_screen');\n\n            // Hide the scrollbars until the size is calculated\n            screen.style.overflow = \"hidden\";\n\n            var pos = Util.getPosition(screen);\n            var w = pos.width;\n            var h = pos.height;\n\n            screen.style.overflow = \"visible\";\n\n            if (isNaN(w) || isNaN(h)) {\n                return false;\n            } else {\n                return {w: w, h: h};\n            }\n        },\n\n        // Normally we only apply the current resize mode after a window resize\n        // event. This means that when a new connection is opened, there is no\n        // resize mode active.\n        // We have to wait until the first FBU because this is where the client\n        // will find the supported encodings of the server. Some calls later in\n        // the chain is dependant on knowing the server-capabilities.\n        initialResize: function(rfb, fbu) {\n            UI.applyResizeMode();\n            // After doing this once, we remove the callback.\n            UI.rfb.set_onFBUComplete(function() { });\n        },\n\n/* ------^-------\n *    /RESIZE\n * ==============\n *    CLIPPING\n * ------v------*/\n\n        // Set and configure viewport clipping\n        setViewClip: function(clip) {\n            UI.updateSetting('clip', clip);\n            UI.updateViewClip();\n        },\n\n        // Update parameters that depend on the clip setting\n        updateViewClip: function() {\n            if (!UI.rfb) return;\n\n            var display = UI.rfb.get_display();\n            var cur_clip = display.get_viewport();\n            var new_clip = UI.getSetting('clip');\n\n            if (cur_clip !== new_clip) {\n                display.set_viewport(new_clip);\n            }\n\n            var size = UI.screenSize();\n\n            if (new_clip && size) {\n                // When clipping is enabled, the screen is limited to\n                // the size of the browser window.\n                display.viewportChangeSize(size.w, size.h);\n            }\n        },\n\n        // Handle special cases where clipping is forced on/off or locked\n        enableDisableViewClip: function() {\n            var resizeSetting = document.getElementById('noVNC_setting_resize');\n\n            if (UI.isSafari) {\n                // Safari auto-hides the scrollbars which makes them\n                // impossible to use in most cases\n                UI.setViewClip(true);\n                document.getElementById('noVNC_setting_clip').disabled = true;\n            } else if (resizeSetting.value === 'downscale' || resizeSetting.value === 'scale') {\n                // Disable clipping if we are scaling\n                UI.setViewClip(false);\n                document.getElementById('noVNC_setting_clip').disabled = true;\n            } else if (document.msFullscreenElement) {\n                // The browser is IE and we are in fullscreen mode.\n                // - We need to force clipping while in fullscreen since\n                //   scrollbars doesn't work.\n                var msg = _(\"Forcing clipping mode since \" +\n                            \"scrollbars aren't supported \" +\n                            \"by IE in fullscreen\");\n                Util.Debug(msg);\n                UI.showStatus(msg);\n                UI.rememberedClipSetting = UI.getSetting('clip');\n                UI.setViewClip(true);\n                document.getElementById('noVNC_setting_clip').disabled = true;\n            } else if (document.body.msRequestFullscreen &&\n                       UI.rememberedClipSetting !== null) {\n                // Restore view clip to what it was before fullscreen on IE\n                UI.setViewClip(UI.rememberedClipSetting);\n                document.getElementById('noVNC_setting_clip').disabled =\n                    UI.connected || Util.isTouchDevice;\n            } else {\n                document.getElementById('noVNC_setting_clip').disabled =\n                    UI.connected || Util.isTouchDevice;\n                if (Util.isTouchDevice) {\n                    UI.setViewClip(true);\n                }\n            }\n        },\n\n/* ------^-------\n *   /CLIPPING\n * ==============\n *    VIEWDRAG\n * ------v------*/\n\n        toggleViewDrag: function() {\n            if (!UI.rfb) return;\n\n            var drag = UI.rfb.get_viewportDrag();\n            UI.setViewDrag(!drag);\n         },\n\n        // Set the view drag mode which moves the viewport on mouse drags\n        setViewDrag: function(drag) {\n            if (!UI.rfb) return;\n\n            UI.rfb.set_viewportDrag(drag);\n\n            UI.updateViewDrag();\n        },\n\n        updateViewDrag: function() {\n            var clipping = false;\n\n            if (!UI.connected) return;\n\n            // Check if viewport drag is possible. It is only possible\n            // if the remote display is clipping the client display.\n            if (UI.rfb.get_display().get_viewport() &&\n                UI.rfb.get_display().clippingDisplay()) {\n                clipping = true;\n            }\n\n            var viewDragButton = document.getElementById('noVNC_view_drag_button');\n\n            if (!clipping &&\n                UI.rfb.get_viewportDrag()) {\n                // The size of the remote display is the same or smaller\n                // than the client display. Make sure viewport drag isn't\n                // active when it can't be used.\n                UI.rfb.set_viewportDrag(false);\n            }\n\n            if (UI.rfb.get_viewportDrag()) {\n                viewDragButton.classList.add(\"noVNC_selected\");\n            } else {\n                viewDragButton.classList.remove(\"noVNC_selected\");\n            }\n\n            // Different behaviour for touch vs non-touch\n            // The button is disabled instead of hidden on touch devices\n            if (Util.isTouchDevice) {\n                viewDragButton.classList.remove(\"noVNC_hidden\");\n\n                if (clipping) {\n                    viewDragButton.disabled = false;\n                } else {\n                    viewDragButton.disabled = true;\n                }\n            } else {\n                viewDragButton.disabled = false;\n\n                if (clipping) {\n                    viewDragButton.classList.remove(\"noVNC_hidden\");\n                } else {\n                    viewDragButton.classList.add(\"noVNC_hidden\");\n                }\n            }\n        },\n\n/* ------^-------\n *   /VIEWDRAG\n * ==============\n *    KEYBOARD\n * ------v------*/\n\n        showVirtualKeyboard: function() {\n            if (!Util.isTouchDevice) return;\n\n            var input = document.getElementById('noVNC_keyboardinput');\n\n            if (document.activeElement == input) return;\n\n            input.focus();\n\n            try {\n                var l = input.value.length;\n                // Move the caret to the end\n                input.setSelectionRange(l, l);\n            } catch (err) {} // setSelectionRange is undefined in Google Chrome\n        },\n\n        hideVirtualKeyboard: function() {\n            if (!Util.isTouchDevice) return;\n\n            var input = document.getElementById('noVNC_keyboardinput');\n\n            if (document.activeElement != input) return;\n\n            input.blur();\n        },\n\n        toggleVirtualKeyboard: function () {\n            if (document.getElementById('noVNC_keyboard_button')\n                .classList.contains(\"noVNC_selected\")) {\n                UI.hideVirtualKeyboard();\n            } else {\n                UI.showVirtualKeyboard();\n            }\n        },\n\n        onfocusVirtualKeyboard: function(event) {\n            document.getElementById('noVNC_keyboard_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        onblurVirtualKeyboard: function(event) {\n            document.getElementById('noVNC_keyboard_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        keepVirtualKeyboard: function(event) {\n            var input = document.getElementById('noVNC_keyboardinput');\n\n            // Only prevent focus change if the virtual keyboard is active\n            if (document.activeElement != input) {\n                return;\n            }\n\n            // Allow clicking on links\n            if (event.target.tagName === \"A\") {\n                return;\n            }\n\n            // And form elements, except standard noVNC buttons\n            if ((event.target.form !== undefined) &&\n                !event.target.classList.contains(\"noVNC_button\")) {\n                return;\n            }\n\n            event.preventDefault();\n        },\n\n        keyboardinputReset: function() {\n            var kbi = document.getElementById('noVNC_keyboardinput');\n            kbi.value = new Array(UI.defaultKeyboardinputLen).join(\"_\");\n            UI.lastKeyboardinput = kbi.value;\n        },\n\n        // When normal keyboard events are left uncought, use the input events from\n        // the keyboardinput element instead and generate the corresponding key events.\n        // This code is required since some browsers on Android are inconsistent in\n        // sending keyCodes in the normal keyboard events when using on screen keyboards.\n        keyInput: function(event) {\n\n            if (!UI.rfb) return;\n\n            var newValue = event.target.value;\n\n            if (!UI.lastKeyboardinput) {\n                UI.keyboardinputReset();\n            }\n            var oldValue = UI.lastKeyboardinput;\n\n            var newLen;\n            try {\n                // Try to check caret position since whitespace at the end\n                // will not be considered by value.length in some browsers\n                newLen = Math.max(event.target.selectionStart, newValue.length);\n            } catch (err) {\n                // selectionStart is undefined in Google Chrome\n                newLen = newValue.length;\n            }\n            var oldLen = oldValue.length;\n\n            var backspaces;\n            var inputs = newLen - oldLen;\n            if (inputs < 0) {\n                backspaces = -inputs;\n            } else {\n                backspaces = 0;\n            }\n\n            // Compare the old string with the new to account for\n            // text-corrections or other input that modify existing text\n            var i;\n            for (i = 0; i < Math.min(oldLen, newLen); i++) {\n                if (newValue.charAt(i) != oldValue.charAt(i)) {\n                    inputs = newLen - i;\n                    backspaces = oldLen - i;\n                    break;\n                }\n            }\n\n            // Send the key events\n            for (i = 0; i < backspaces; i++) {\n                UI.rfb.sendKey(KeyTable.XK_BackSpace);\n            }\n            for (i = newLen - inputs; i < newLen; i++) {\n                UI.rfb.sendKey(keysyms.fromUnicode(newValue.charCodeAt(i)).keysym);\n            }\n\n            // Control the text content length in the keyboardinput element\n            if (newLen > 2 * UI.defaultKeyboardinputLen) {\n                UI.keyboardinputReset();\n            } else if (newLen < 1) {\n                // There always have to be some text in the keyboardinput\n                // element with which backspace can interact.\n                UI.keyboardinputReset();\n                // This sometimes causes the keyboard to disappear for a second\n                // but it is required for the android keyboard to recognize that\n                // text has been added to the field\n                event.target.blur();\n                // This has to be ran outside of the input handler in order to work\n                setTimeout(event.target.focus.bind(event.target), 0);\n            } else {\n                UI.lastKeyboardinput = newValue;\n            }\n        },\n\n/* ------^-------\n *   /KEYBOARD\n * ==============\n *   EXTRA KEYS\n * ------v------*/\n\n        openExtraKeys: function() {\n            UI.closeAllPanels();\n            UI.openControlbar();\n\n            document.getElementById('noVNC_modifiers')\n                .classList.add(\"noVNC_open\");\n            document.getElementById('noVNC_toggle_extra_keys_button')\n                .classList.add(\"noVNC_selected\");\n        },\n\n        closeExtraKeys: function() {\n            document.getElementById('noVNC_modifiers')\n                .classList.remove(\"noVNC_open\");\n            document.getElementById('noVNC_toggle_extra_keys_button')\n                .classList.remove(\"noVNC_selected\");\n        },\n\n        toggleExtraKeys: function() {\n            if(document.getElementById('noVNC_modifiers')\n                .classList.contains(\"noVNC_open\")) {\n                UI.closeExtraKeys();\n            } else  {\n                UI.openExtraKeys();\n            }\n        },\n\n        sendEsc: function() {\n            UI.rfb.sendKey(KeyTable.XK_Escape);\n        },\n\n        sendTab: function() {\n            UI.rfb.sendKey(KeyTable.XK_Tab);\n        },\n\n        toggleCtrl: function() {\n            var btn = document.getElementById('noVNC_toggle_ctrl_button');\n            if (btn.classList.contains(\"noVNC_selected\")) {\n                UI.rfb.sendKey(KeyTable.XK_Control_L, false);\n                btn.classList.remove(\"noVNC_selected\");\n            } else {\n                UI.rfb.sendKey(KeyTable.XK_Control_L, true);\n                btn.classList.add(\"noVNC_selected\");\n            }\n        },\n\n        toggleAlt: function() {\n            var btn = document.getElementById('noVNC_toggle_alt_button');\n            if (btn.classList.contains(\"noVNC_selected\")) {\n                UI.rfb.sendKey(KeyTable.XK_Alt_L, false);\n                btn.classList.remove(\"noVNC_selected\");\n            } else {\n                UI.rfb.sendKey(KeyTable.XK_Alt_L, true);\n                btn.classList.add(\"noVNC_selected\");\n            }\n        },\n\n        sendCtrlAltDel: function() {\n            UI.rfb.sendCtrlAltDel();\n        },\n\n/* ------^-------\n *   /EXTRA KEYS\n * ==============\n *     MISC\n * ------v------*/\n\n        setMouseButton: function(num) {\n            var view_only = UI.rfb.get_view_only();\n            if (UI.rfb && !view_only) {\n                UI.rfb.get_mouse().set_touchButton(num);\n            }\n\n            var blist = [0, 1,2,4];\n            for (var b = 0; b < blist.length; b++) {\n                var button = document.getElementById('noVNC_mouse_button' +\n                                                     blist[b]);\n                if (blist[b] === num && !view_only) {\n                    button.classList.remove(\"noVNC_hidden\");\n                } else {\n                    button.classList.add(\"noVNC_hidden\");\n                }\n            }\n        },\n\n        displayBlur: function() {\n            if (UI.rfb && !UI.rfb.get_view_only()) {\n                UI.rfb.get_keyboard().set_focused(false);\n                UI.rfb.get_mouse().set_focused(false);\n            }\n        },\n\n        displayFocus: function() {\n            if (UI.rfb && !UI.rfb.get_view_only()) {\n                UI.rfb.get_keyboard().set_focused(true);\n                UI.rfb.get_mouse().set_focused(true);\n            }\n        },\n\n        updateSessionSize: function(rfb, width, height) {\n            UI.updateViewClip();\n            UI.updateViewDrag();\n        },\n\n        updateDesktopName: function(rfb, name) {\n            UI.desktopName = name;\n            // Display the desktop name in the document title\n            document.title = name + \" - noVNC\";\n        },\n\n        bell: function(rfb) {\n            if (WebUtil.getConfigVar('bell', 'on') === 'on') {\n                document.getElementById('noVNC_bell').play();\n            }\n        },\n\n        //Helper to add options to dropdown.\n        addOption: function(selectbox, text, value) {\n            var optn = document.createElement(\"OPTION\");\n            optn.text = text;\n            optn.value = value;\n            selectbox.options.add(optn);\n        },\n\n/* ------^-------\n *    /MISC\n * ==============\n */\n    };\n\n    /* [module] UI.load(); */\n})();\n\n/* [module] export default UI; */\n", "<!DOCTYPE html>\n<html>\n    <head><title>Input Test</title></head>\n    <body>\n        <br><br>\n\n        Canvas:\n        <span id=\"button-selection\" style=\"display: none;\">\n            <input id=\"button1\" type=\"button\" value=\"L\"><input id=\"button2\" type=\"button\" value=\"M\"><input id=\"button4\" type=\"button\" value=\"R\">\n        </span>\n        <br>\n        <canvas id=\"canvas\" width=\"640\" height=\"20\"\n                style=\"border-style: dotted; border-width: 1px;\">\n            Canvas not supported.\n        </canvas>\n\n        <br>\n        Results:<br>\n        <textarea id=\"messages\" style=\"font-size: 9;\" cols=80 rows=25></textarea>\n    </body>\n\n    <!--\n    <script type='text/javascript'\n        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>\n    -->\n    <script src=\"../core/util.js\"></script>\n    <script src=\"../app/webutil.js\"></script>\n    <script src=\"../core/base64.js\"></script>\n    <script src=\"../core/input/keysym.js\"></script>\n    <script src=\"../core/input/keysymdef.js\"></script> \n    <script src=\"../core/input/xtscancodes.js\"></script>\n    <script src=\"../core/input/util.js\"></script>\n    <script src=\"../core/input/devices.js\"></script>\n    <script src=\"../core/display.js\"></script>\n    <script>\n        var msg_cnt = 0, iterations,\n            width = 400, height = 200,\n            canvas, keyboard, mouse;\n\n        var newline = \"\\n\";\n        if (Util.Engine.trident) {\n            var newline = \"<br>\\n\";\n        }\n\n        function message(str) {\n            console.log(str);\n            cell = document.getElementById('messages');\n            cell.textContent += msg_cnt + \": \" + str + newline;\n            cell.scrollTop = cell.scrollHeight;\n            msg_cnt++;\n        }\n\n        function mouseButton(x, y, down, bmask) {\n            msg = 'mouse x,y: ' + x + ',' + y + '  down: ' + down;\n            msg += ' bmask: ' + bmask;\n            message(msg);\n        }\n\n        function mouseMove(x, y) {\n            msg = 'mouse x,y: ' + x + ',' + y;\n            //console.log(msg);\n        }\n\n        function rfbKeyPress(keysym, down) {\n            var d = down ? \"down\" : \" up \";\n            var key = keysyms.lookup(keysym);\n            var msg = \"RFB keypress \" + d + \" keysym: \" + keysym;\n            if (key && key.keyname) {\n                msg += \" key name: \" + key.keyname;\n            }\n            message(msg);\n        }\n        function rawKey(e) {\n            msg = \"raw key event \" + e.type +\n                  \" (key: \" + e.keyCode + \", char: \" + e.charCode +\n                  \", which: \" + e.which +\")\";\n            message(msg);\n        }\n\n        function selectButton(num) {\n            var b, blist = [1,2,4];\n\n            if (typeof num === 'undefined') {\n                // Show the default\n                num = mouse.get_touchButton();\n            } else if (num === mouse.get_touchButton()) {\n                // Set all buttons off (no clicks)\n                mouse.set_touchButton(0);\n                num = 0;\n            } else {\n                // Turn on one button\n                mouse.set_touchButton(num);\n            }\n\n            for (b = 0; b < blist.length; b++) {\n                if (blist[b] === num) {\n                    document.getElementById('button' + blist[b]).style.backgroundColor = \"black\";\n                    document.getElementById('button' + blist[b]).style.color = \"lightgray\";\n                } else {\n                    document.getElementById('button' + blist[b]).style.backgroundColor = \"\";\n                    document.getElementById('button' + blist[b]).style.color = \"\";\n                }\n            }\n        }\n\n        window.onload = function() {\n            canvas = new Display({'target' : document.getElementById('canvas')});\n            keyboard = new Keyboard({'target': document,\n                                    'onKeyPress': rfbKeyPress});\n            document.addEventListener('keypress', rawKey);\n            document.addEventListener('keydown', rawKey);\n            document.addEventListener('keyup', rawKey);\n            mouse    = new Mouse({'target': document.getElementById('canvas'),\n                                'onMouseButton': mouseButton,\n                                'onMouseMove': mouseMove});\n\n            canvas.resize(width, height, true);\n            keyboard.grab();\n            mouse.grab();\n            message(\"Display initialized\");\n\n            if (Util.isTouchDevice) {\n                message(\"Touch device detected\");\n                document.getElementById('button-selection').style.display = \"inline\";\n                document.getElementById('button1').onclick = function(){ selectButton(1) };\n                document.getElementById('button2').onclick = function(){ selectButton(2) };\n                document.getElementById('button4').onclick = function(){ selectButton(4) };\n                selectButton();\n            }\n\n        }\n    </script>\n</html>\n", "<!DOCTYPE html>\n<html>\n    <head>\n        <title>VNC Performance Benchmark</title>\n    </head>\n    <body>\n\n        Passes: <input id='passes' style='width:50' value=3>&nbsp;\n\n        <input id='startButton' type='button' value='Start' style='width:100px'\n            onclick=\"do_test();\" disabled>&nbsp;\n\n        <br><br>\n\n        Results:<br>\n        <textarea id=\"messages\" style=\"font-size: 9;\" cols=80 rows=15></textarea>\n\n        <br><br>\n\n        <div id=\"VNC_screen\">\n            <div id=\"VNC_status_bar\" class=\"VNC_status_bar\" style=\"margin-top: 0px;\">\n                <table border=0 width=100%><tr>\n                    <td><div id=\"VNC_status\">Loading</div></td>\n                </tr></table>\n            </div>\n            <canvas id=\"VNC_canvas\" width=\"640px\" height=\"20px\">\n                Canvas not supported.\n            </canvas>\n        </div>\n\n    </body>\n\n    <!--\n    <script type='text/javascript'\n        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>\n    -->\n\n    <script type=\"text/javascript\">\n        var INCLUDE_URI= \"../\";\n    </script>\n    <script src=\"../core/util.js\"></script>\n    <script src=\"../app/webutil.js\"></script>\n\n    <script>\n        var fname = WebUtil.getQueryVar('data', null);\n        if (fname) {\n            msg(\"Loading \" + fname);\n\n            // Load supporting scripts\n            WebUtil.load_scripts({\n                'core': [\"base64.js\", \"websock.js\", \"des.js\", \"input/keysym.js\",\n                         \"input/keysymdef.js\", \"input/xtscancodes.js\", \"input/util.js\",\n                         \"input/devices.js\", \"display.js\", \"rfb.js\", \"inflator.js\"],\n                'tests': [\"playback.js\"],\n                'recordings': [fname]});\n        } else {\n            msg(\"Must specifiy data=FOO.js in query string.\");\n        }\n\n        var start_time, VNC_frame_data, pass, passes, encIdx,\n            encOrder = ['raw', 'rre', 'hextile', 'tightpng', 'copyrect'],\n            encTot = {}, encMin = {}, encMax = {},\n            passCur, passTot, passMin, passMax;\n\n        function msg(str) {\n            console.log(str);\n            var cell = document.getElementById('messages');\n            cell.textContent += str + \"\\n\";\n            cell.scrollTop = cell.scrollHeight;\n        }\n        function dbgmsg(str) {\n            if (Util.get_logging() === 'debug') {\n                msg(str);\n            }\n        }\n\n        disconnected = function (rfb, reason) {\n            if (reason) {\n                msg(\"noVNC sent '\" + state +\n                    \"' state during pass \" + pass +\n                    \", iteration \" + iteration +\n                    \" frame \" + frame_idx);\n                test_state = 'failed';\n            }\n        }\n\n        notification = function (rfb, mesg, level, options) {\n            document.getElementById('VNC_status').textContent = mesg;\n        }\n\n        function do_test() {\n            document.getElementById('startButton').value = \"Running\";\n            document.getElementById('startButton').disabled = true;\n\n            mode = 'perftest'; // full-speed\n            passes = document.getElementById('passes').value;\n            pass = 1;\n            encIdx = 0;\n\n            // Render each encoding once for each pass\n            iterations = 1;\n\n            // Initialize stats counters\n            for (i = 0; i < encOrder.length; i++) {\n                enc = encOrder[i];\n                encTot[i] = 0;\n                encMin[i] = 2<<23; // Something sufficiently large\n                encMax[i] = 0;\n            }\n            passCur = 0;\n            passTot = 0;\n            passMin = 2<<23;\n            passMax = 0;\n\n            // Fire away\n            next_encoding();\n        }\n\n        function next_encoding() {\n            var encName;\n\n            if (encIdx >= encOrder.length) {\n                // Accumulate pass stats\n                if (passCur < passMin) {\n                    passMin = passCur;\n                }\n                if (passCur > passMax) {\n                    passMax = passCur;\n                }\n                msg(\"Pass \" + pass + \" took \" + passCur + \" ms\");\n\n                passCur = 0;\n                encIdx = 0;\n                pass += 1;\n                if (pass > passes) {\n                    // We are finished\n                    // Shut-off event interception\n                    rfb.get_mouse().ungrab();\n                    rfb.get_keyboard().ungrab();\n                    document.getElementById('startButton').disabled = false;\n                    document.getElementById('startButton').value = \"Start\";\n                    finish_passes();\n                    return; // We are finished, terminate\n                }\n            }\n\n            encName = encOrder[encIdx];\n            dbgmsg(\"Rendering pass \" + pass + \" encoding '\" + encName + \"'\");\n\n            VNC_frame_data = VNC_frame_data_multi[encName];\n            iteration = 0;\n            start_time = (new Date()).getTime();\n\n            next_iteration();\n        }\n\n        // Finished rendering current encoding\n        function finish() {\n            var total_time, end_time = (new Date()).getTime();\n            total_time = end_time - start_time;\n\n            dbgmsg(\"Encoding \" + encOrder[encIdx] + \" took \" + total_time + \"ms\");\n\n            passCur += total_time;\n            passTot += total_time;\n\n            // Accumulate stats\n            encTot[encIdx] += total_time;\n            if (total_time < encMin[encIdx]) {\n                encMin[encIdx] = total_time;\n            }\n            if (total_time > encMax[encIdx]) {\n                encMax[encIdx] = total_time;\n            }\n\n            encIdx += 1;\n            next_encoding();\n        }\n\n        function finish_passes() {\n            var i, enc, avg, passAvg;\n            msg(\"STATS (for \" + passes + \" passes)\");\n            // Encoding stats\n            for (i = 0; i < encOrder.length; i++) {\n                enc = encOrder[i];\n                avg = (encTot[i] / passes).toFixed(1);\n                msg(\"  \" + enc + \": \" + encTot[i] + \" ms, \" +\n                    encMin[i] + \"/\" + avg + \"/\" + encMax[i] +\n                    \" (min/avg/max)\");\n\n            }\n            // Print pass stats\n            passAvg = (passTot / passes).toFixed(1);\n            msg(\"\\n  All passes: \" + passTot + \" ms, \" +\n                passMin + \"/\" + passAvg + \"/\" + passMax +\n                \" (min/avg/max)\");\n        }\n\n        window.onscriptsload = function() {\n            var i, enc;\n            dbgmsg(\"Frame lengths:\");\n            for (i = 0; i < encOrder.length; i++) {\n                enc = encOrder[i];\n                dbgmsg(\"  \" + enc + \": \" + VNC_frame_data_multi[enc].length);\n            }\n            document.getElementById('startButton').disabled = false;\n        }\n    </script>\n</html>\n", "<!DOCTYPE html>\n<html>\n    <head>\n        <title>VNC Playback</title>\n    </head>\n    <body>\n\n        Iterations: <input id='iterations' style='width:50'>&nbsp;\n        Perftest:<input type='radio' id='mode1' name='mode' checked>&nbsp;\n        Realtime:<input type='radio' id='mode2' name='mode'>&nbsp;&nbsp;\n\n        <input id='startButton' type='button' value='Start' style='width:100px'\n            onclick=\"start();\" disabled>&nbsp;\n\n        <br><br>\n\n        Results:<br>\n        <textarea id=\"messages\" style=\"font-size: 9;\" cols=80 rows=25></textarea>\n\n        <br><br>\n\n        <div id=\"VNC_screen\">\n            <div id=\"VNC_status_bar\" class=\"VNC_status_bar\" style=\"margin-top: 0px;\">\n                <table border=0 width=100%><tr>\n                    <td><div id=\"VNC_status\">Loading</div></td>\n                </tr></table>\n            </div>\n            <canvas id=\"VNC_canvas\" width=\"640px\" height=\"20px\">\n                Canvas not supported.\n            </canvas>\n        </div>\n\n    </body>\n\n    <!--\n    <script type='text/javascript'\n        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>\n    -->\n\n    <script type=\"text/javascript\">\n        var INCLUDE_URI= \"../\";\n    </script>\n    <script src=\"../core/util.js\"></script>\n    <script src=\"../app/webutil.js\"></script>\n\n    <script>\n        var fname, start_time;\n\n        function message(str) {\n            console.log(str);\n            var cell = document.getElementById('messages');\n            cell.textContent += str + \"\\n\";\n            cell.scrollTop = cell.scrollHeight;\n        }\n\n        fname = WebUtil.getQueryVar('data', null);\n        if (fname) {\n            message(\"Loading \" + fname);\n            // Load supporting scripts\n            WebUtil.load_scripts({\n                'core': [\"base64.js\", \"websock.js\", \"des.js\", \"input/keysym.js\",\n                         \"input/keysymdef.js\", \"input/xtscancodes.js\", \"input/util.js\",\n                         \"input/devices.js\", \"display.js\", \"rfb.js\", \"inflator.js\"],\n                'tests': [\"playback.js\"],\n                'recordings': [fname]});\n\n        } else {\n            message(\"Must specify data=FOO in query string.\");\n        }\n\n        disconnected = function (rfb, reason) {\n            if (reason) {\n                message(\"noVNC sent '\" + state + \"' state during iteration \" + iteration + \" frame \" + frame_idx);\n                test_state = 'failed';\n            }\n        }\n\n        notification = function (rfb, mesg, level, options) {\n            document.getElementById('VNC_status').textContent = mesg;\n        }\n\n        function start() {\n            document.getElementById('startButton').value = \"Running\";\n            document.getElementById('startButton').disabled = true;\n\n            iterations = document.getElementById('iterations').value;\n            iteration = 0;\n            start_time = (new Date()).getTime();\n\n            if (document.getElementById('mode1').checked) {\n                message(\"Starting performance playback (fullspeed) [\" + iterations + \" iteration(s)]\");\n                mode = 'perftest';\n            } else {\n                message(\"Starting realtime playback [\" + iterations + \" iteration(s)]\");\n                mode = 'realtime';\n            }\n\n            //recv_message = rfb.testMode(send_array, VNC_frame_encoding);\n\n            next_iteration();\n        }\n\n        function finish() {\n            // Finished with all iterations\n            var total_time, end_time = (new Date()).getTime();\n            total_time = end_time - start_time;\n\n            iter_time = parseInt(total_time / iterations, 10);\n            message(iterations + \" iterations took \" + total_time + \"ms, \" +\n                    iter_time + \"ms per iteration\");\n            // Shut-off event interception\n            rfb.get_mouse().ungrab();\n            rfb.get_keyboard().ungrab();\n            document.getElementById('startButton').disabled = false;\n            document.getElementById('startButton').value = \"Start\";\n\n        }\n\n        window.onscriptsload = function () {\n            iterations = WebUtil.getQueryVar('iterations', 3);\n            document.getElementById('iterations').value = iterations;\n            mode = WebUtil.getQueryVar('mode', 3);\n            if (mode === 'realtime') {\n                document.getElementById('mode2').checked = true;\n            } else {\n                document.getElementById('mode1').checked = true;\n            }\n            if (fname) {\n                message(\"VNC_frame_data.length: \" + VNC_frame_data.length);\n            }\n            document.getElementById('startButton').disabled = false;\n        }\n    </script>\n</html>\n", "<!DOCTYPE html>\n<html>\n<head>\n\n    <!--\n    noVNC example: simple example using default UI\n    Copyright (C) 2012 Joel Martin\n    Copyright (C) 2013 Samuel Mannehed for Cendio AB\n    noVNC is licensed under the MPL 2.0 (see LICENSE.txt)\n    This file is licensed under the 2-Clause BSD license (see LICENSE.txt).\n\n    Connect parameters are provided in query string:\n        http://example.com/?host=HOST&port=PORT&encrypt=1&true_color=1\n    or the fragment:\n        http://example.com/#host=HOST&port=PORT&encrypt=1&true_color=1\n    -->\n    <title>noVNC</title>\n\n    <meta charset=\"utf-8\">\n\n    <!-- Always force latest IE rendering engine (even in intranet) & Chrome Frame\n                Remove this if you use the .htaccess -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\n    <!-- Apple iOS Safari settings -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />\n    <!-- App Start Icon  -->\n    <link rel=\"apple-touch-startup-image\" href=\"app/images/screen_320x460.png\" />\n    <!-- For iOS devices set the icon to use if user bookmarks app on their homescreen -->\n    <link rel=\"apple-touch-icon\" href=\"app/images/screen_57x57.png\">\n    <!--\n    <link rel=\"apple-touch-icon-precomposed\" href=\"app/images/screen_57x57.png\" />\n    -->\n\n\n    <!-- Stylesheets -->\n    <link rel=\"stylesheet\" href=\"app/styles/auto.css\">\n\n     <!--\n    <script type='text/javascript'\n        src='http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js'></script>\n    -->\n        <script src=\"core/util.js\"></script>\n        <script src=\"app/webutil.js\"></script>\n</head>\n\n<body style=\"margin: 0px;\">\n    <div id=\"noVNC_container\">\n            <div id=\"noVNC_status_bar\" class=\"noVNC_status_bar\" style=\"margin-top: 0px;\">\n                <table border=0 width=\"100%\"><tr>\n                    <td><div id=\"noVNC_status\" style=\"position: relative; height: auto;\">\n                        Loading\n                    </div></td>\n                    <td width=\"1%\"><div id=\"noVNC_buttons\">\n                        <input type=button value=\"Send CtrlAltDel\"\n                            id=\"sendCtrlAltDelButton\">\n                        <span id=\"noVNC_xvp_buttons\">\n                        <input type=button value=\"Shutdown\"\n                            id=\"xvpShutdownButton\">\n                        <input type=button value=\"Reboot\"\n                            id=\"xvpRebootButton\">\n                        <input type=button value=\"Reset\"\n                            id=\"xvpResetButton\">\n                        </span>\n                            </div></td>\n                </tr></table>\n            </div>\n            <canvas id=\"noVNC_canvas\" width=\"640px\" height=\"20px\">\n                Canvas not supported.\n            </canvas>\n        </div>\n\n        <script>\n        /*jslint white: false */\n        /*global window, $, Util, RFB, */\n        \"use strict\";\n\n        // Load supporting scripts\n        WebUtil.load_scripts({\n            'core': [\"base64.js\", \"websock.js\", \"des.js\", \"input/keysymdef.js\",\n                     \"input/xtscancodes.js\", \"input/util.js\", \"input/devices.js\",\n                     \"display.js\", \"inflator.js\", \"rfb.js\", \"input/keysym.js\"]});\n\n        var rfb;\n        var resizeTimeout;\n        var desktopName;\n\n\n        function UIresize() {\n            if (WebUtil.getConfigVar('resize', false)) {\n                var innerW = window.innerWidth;\n                var innerH = window.innerHeight;\n                var controlbarH = document.getElementById('noVNC_status_bar').offsetHeight;\n                if (innerW !== undefined && innerH !== undefined)\n                    rfb.requestDesktopSize(innerW, innerH - controlbarH);\n            }\n        }\n        function FBUComplete(rfb, fbu) {\n            UIresize();\n            rfb.set_onFBUComplete(function() { });\n        }\n        function updateDesktopName(rfb, name) {\n            desktopName = name;\n        }\n        function passwordRequired(rfb, msg) {\n            if (typeof msg === 'undefined') {\n                msg = 'Password Required: ';\n            }\n            var html;\n            html = '<form onsubmit=\"return setPassword();\"';\n            html += '  style=\"margin-bottom: 0px\">';\n            html += '<label></label>'\n            html += '<input type=password size=10 id=\"password_input\" class=\"noVNC_status\">';\n            html += '<\\/form>';\n\n            // bypass status() because it sets text content\n            document.getElementById('noVNC_status_bar').setAttribute(\"class\", \"noVNC_status_warn\");\n            document.getElementById('noVNC_status').innerHTML = html;\n            document.getElementById('noVNC_status').querySelector('label').textContent = msg;\n        }\n        function setPassword() {\n            rfb.sendPassword(document.getElementById('password_input').value);\n            return false;\n        }\n        function sendCtrlAltDel() {\n            rfb.sendCtrlAltDel();\n            return false;\n        }\n        function xvpShutdown() {\n            rfb.xvpShutdown();\n            return false;\n        }\n        function xvpReboot() {\n            rfb.xvpReboot();\n            return false;\n        }\n        function xvpReset() {\n            rfb.xvpReset();\n            return false;\n        }\n        function status(text, level) {\n            switch (level) {\n                case 'normal':\n                case 'warn':\n                case 'error':\n                    break;\n                default:\n                    level = \"warn\";\n            }\n            document.getElementById('noVNC_status_bar').setAttribute(\"class\", \"noVNC_status_\" + level);\n            document.getElementById('noVNC_status').textContent = text;\n        }\n        function updateState(rfb, state, oldstate) {\n            var cad = document.getElementById('sendCtrlAltDelButton');\n            switch (state) {\n                case 'connecting':\n                    status(\"Connecting\", \"normal\");\n                    break;\n                case 'connected':\n                    if (rfb && rfb.get_encrypt()) {\n                        status(\"Connected (encrypted) to \" +\n                               desktopName, \"normal\");\n                    } else {\n                        status(\"Connected (unencrypted) to \" +\n                               desktopName, \"normal\");\n                    }\n                    break;\n                case 'disconnecting':\n                    status(\"Disconnecting\", \"normal\");\n                    break;\n                case 'disconnected':\n                    status(\"Disconnected\", \"normal\");\n                    break;\n                default:\n                    status(state, \"warn\");\n                    break;\n            }\n\n            if (state === 'connected') {\n                cad.disabled = false;\n            } else {\n                cad.disabled = true;\n                xvpInit(0);\n            }\n\n        }\n        function disconnected(rfb, reason) {\n            if (typeof(reason) !== 'undefined') {\n                status(reason, \"error\");\n            }\n        }\n        function notification(rfb, msg, level, options) {\n            status(msg, level);\n        }\n\n        window.onresize = function () {\n            // When the window has been resized, wait until the size remains\n            // the same for 0.5 seconds before sending the request for changing\n            // the resolution of the session\n            clearTimeout(resizeTimeout);\n            resizeTimeout = setTimeout(function(){\n                UIresize();\n            }, 500);\n        };\n\n        function xvpInit(ver) {\n            var xvpbuttons;\n            xvpbuttons = document.getElementById('noVNC_xvp_buttons');\n            if (ver >= 1) {\n                xvpbuttons.style.display = 'inline';\n            } else {\n                xvpbuttons.style.display = 'none';\n            }\n        }\n\n        window.onscriptsload = function () {\n            var host, port, password, path, token;\n\n            document.getElementById('sendCtrlAltDelButton').style.display = \"inline\";\n            document.getElementById('sendCtrlAltDelButton').onclick = sendCtrlAltDel;\n            document.getElementById('xvpShutdownButton').onclick = xvpShutdown;\n            document.getElementById('xvpRebootButton').onclick = xvpReboot;\n            document.getElementById('xvpResetButton').onclick = xvpReset;\n\n            WebUtil.init_logging(WebUtil.getConfigVar('logging', 'warn'));\n            document.title = unescape(WebUtil.getConfigVar('title', 'noVNC'));\n            // By default, use the host and port of server that served this file\n            host = WebUtil.getConfigVar('host', window.location.hostname);\n            port = WebUtil.getConfigVar('port', window.location.port);\n\n            // if port == 80 (or 443) then it won't be present and should be\n            // set manually\n            if (!port) {\n                if (window.location.protocol.substring(0,5) == 'https') {\n                    port = 443;\n                }\n                else if (window.location.protocol.substring(0,4) == 'http') {\n                    port = 80;\n                }\n            }\n\n            password = WebUtil.getConfigVar('password', '');\n            path = WebUtil.getConfigVar('path', 'websockify');\n\n            // If a token variable is passed in, set the parameter in a cookie.\n            // This is used by nova-novncproxy.\n            token = WebUtil.getConfigVar('token', null);\n            if (token) {\n\n                // if token is already present in the path we should use it\n                path = WebUtil.injectParamIfMissing(path, \"token\", token);\n\n                WebUtil.createCookie('token', token, 1)\n            }\n\n            if ((!host) || (!port)) {\n                status('Must specify host and port in URL', 'error');\n                return;\n            }\n\n            try {\n                rfb = new RFB({'target':       document.getElementById('noVNC_canvas'),\n                               'encrypt':      WebUtil.getConfigVar('encrypt',\n                                        (window.location.protocol === \"https:\")),\n                               'repeaterID':   WebUtil.getConfigVar('repeaterID', ''),\n                               'true_color':   WebUtil.getConfigVar('true_color', true),\n                               'local_cursor': WebUtil.getConfigVar('cursor', true),\n                               'shared':       WebUtil.getConfigVar('shared', true),\n                               'view_only':    WebUtil.getConfigVar('view_only', false),\n                               'onNotification':  notification,\n                               'onUpdateState':  updateState,\n                               'onDisconnected': disconnected,\n                               'onXvpInit':    xvpInit,\n                               'onPasswordRequired':  passwordRequired,\n                               'onFBUComplete': FBUComplete,\n                               'onDesktopName': updateDesktopName});\n            } catch (exc) {\n                status('Unable to create RFB client -- ' + exc, 'error');\n                return; // don't continue trying to connect\n            }\n\n            rfb.connect(host, port, password, path);\n        };\n        </script>\n\n    </body>\n</html>\n"], "filenames": ["app/ui.js", "tests/input.html", "tests/vnc_perf.html", "tests/vnc_playback.html", "vnc_auto.html"], "buggy_code_start_loc": [51, 48, 68, 52, 114], "buggy_code_end_loc": [535, 49, 89, 80, 150], "fixing_code_start_loc": [51, 48, 68, 52, 114], "fixing_code_end_loc": [535, 49, 89, 80, 154], "type": "CWE-79", "message": "An XSS vulnerability was discovered in noVNC before 0.6.2 in which the remote VNC server could inject arbitrary HTML into the noVNC web page via the messages propagated to the status field, such as the VNC server name.", "other": {"cve": {"id": "CVE-2017-18635", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-25T23:15:09.937", "lastModified": "2022-04-06T17:54:34.933", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An XSS vulnerability was discovered in noVNC before 0.6.2 in which the remote VNC server could inject arbitrary HTML into the noVNC web page via the messages propagated to the status field, such as the VNC server name."}, {"lang": "es", "value": "Se detect\u00f3 una vulnerabilidad de tipo XSS en noVNC versiones anteriores a 0.6.2, en la que el servidor remoto VNC pod\u00eda inyectar HTML arbitrario en la p\u00e1gina web de noVNC por medio de los mensajes propagados hacia el campo status, tales como el nombre del servidor VNC."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:novnc:novnc:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.6.2", "matchCriteriaId": "D7BC0A89-1E36-4C6F-882D-A92A03C5F9D3"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:16.04:*:*:*:esm:*:*:*", "matchCriteriaId": "7A5301BF-1402-4BE0-A0F8-69FBE79BC6D6"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:openstack:13:*:*:*:*:*:*:*", "matchCriteriaId": "704CFA1A-953E-4105-BFBE-406034B83DED"}]}]}], "references": [{"url": "https://access.redhat.com/errata/RHSA-2020:0754", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://bugs.launchpad.net/horizon/+bug/1656435", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/ShielderSec/cve-2017-18635", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/novnc/noVNC/commit/6048299a138e078aed210f163111698c8c526a13#diff-286f7dc7b881e942e97cd50c10898f03L534", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/novnc/noVNC/issues/748", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/novnc/noVNC/releases/tag/v0.6.2", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/10/msg00004.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/12/msg00024.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4522-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.shielder.it/blog/exploiting-an-old-novnc-xss-cve-2017-18635-in-openstack/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/novnc/noVNC/commit/6048299a138e078aed210f163111698c8c526a13#diff-286f7dc7b881e942e97cd50c10898f03L534"}}