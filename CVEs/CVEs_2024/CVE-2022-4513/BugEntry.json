{"buggy_code": ["<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>eionet.cr</groupId>\n    <artifactId>cr3</artifactId>\n    <packaging>war</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <env>default</env>\n        <javaVersion>1.8</javaVersion>\n        <!-- TODO Replace with RDF4j and modernize -->\n        <sesame.openrdf.version>2.6.10</sesame.openrdf.version>\n        <checkstyle.config.location>${basedir}/docs/checkstyle.xml</checkstyle.config.location>\n        <spring.version>4.3.24.RELEASE</spring.version>\n    </properties>\n\n    <version>1.0-SNAPSHOT</version>\n    <name>cr3</name>\n    <url>http://maven.apache.org</url>\n         \n    <!-- configuration of Maven repositories to be used -->\n    <repositories>\n        <repository>\n            <id>archiva.internal</id>\n            <name>Internal Release Repository</name>\n            <url>http://archiva.eionet.europa.eu/repository/internal/</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>archiva.snapshots</id>\n            <name>Internal Snapshot Repository</name>\n            <url>http://archiva.eionet.europa.eu/repository/snapshots/</url>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n        <!--For unpublished Virtuoso 4.2.fix -->\n        <repository>\n            <id>project-local</id>\n            <name>project-local repository</name>\n            <layout>default</layout>\n            <url>file:///${basedir}/lib</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n\n    <distributionManagement>\n        <repository>\n            <id>archiva.internal</id>\n            <name>Internal Release Repository</name>\n            <url>http://archiva.eionet.europa.eu/repository/internal/</url>\n        </repository>\n        <snapshotRepository>\n            <id>archiva.snapshots</id>\n            <name>Internal Snapshot Repository</name>\n            <url>http://archiva.eionet.europa.eu/repository/snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n\n    <profiles>\n      <profile>\n        <id>docker</id>\n        <activation>\n          <activeByDefault>true</activeByDefault>\n        </activation>\n        <properties>\n          <valid.images>virtuoso, httpd</valid.images>\n        </properties>\n      </profile>\n      <profile>\n        <id>local</id>\n        <properties>\n          <tests.virtuoso.host>localhost</tests.virtuoso.host>\n          <valid.images>none</valid.images>\n        </properties>\n      </profile>\n    </profiles>\n\n    <!-- the build configuration -->\n    <build>\n        <plugins>\n\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>properties-maven-plugin</artifactId>\n                <version>1.0.0</version>\n                <executions>\n                    <execution>\n                        <phase>initialize</phase>\n                        <goals>\n                            <goal>read-project-properties</goal>\n                        </goals>\n                        <configuration>\n                            <files>\n                                <file>tests.properties</file>\n                            </files>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!-- maven-compiler-plugin -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.6.1</version>\n                <inherited>true</inherited>\n                <configuration>\n                    <verbose>false</verbose>\n                    <fork>false</fork>\n                    <compilerVersion>${javaVersion}</compilerVersion>\n                    <source>${javaVersion}</source>\n                    <target>${javaVersion}</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n\n            <!-- maven-surefire-plugin -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.20</version>\n                <configuration>\n                    <excludes>\n                        <exclude>**/*.java</exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-failsafe-plugin</artifactId>\n                <version>2.20</version>\n                <configuration>\n                    <reportFormat>xml</reportFormat>\n                    <systemPropertyVariables>\n                        <tests.virtuoso.host>${tests.virtuoso.host}</tests.virtuoso.host>\n                        <tests.virtuoso.port>${tests.virtuoso.port}</tests.virtuoso.port>\n                        <tests.httpd.host>${tests.httpd.host}</tests.httpd.host>\n                        <tests.httpd.port>${tests.httpd.port}</tests.httpd.port>\n                    </systemPropertyVariables>\n                    <includes>\n                        <include>**/*.java</include>\n                    </includes>\n                    <argLine>${itCoverAgent}</argLine>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>integration-test</goal>\n                            <goal>verify</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!-- maven-war-plugin -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>3.1.0</version>\n                <configuration>\n                    <filters>\n                        <filter>${basedir}/${env}.properties</filter>\n                    </filters>\n                    <webResources>\n                        <resource>\n                            <directory>${basedir}/src/main/webapp/WEB-INF</directory>\n                            <filtering>true</filtering>\n                            <targetPath>WEB-INF</targetPath>\n                            <includes>\n                                <include>web.xml</include>\n                            </includes>\n                        </resource>\n                        <resource>\n                            <directory>${basedir}/src/main/webapp/pages/common</directory>\n                            <filtering>true</filtering>\n                            <targetPath>pages/common</targetPath>\n                        </resource>\n                    </webResources>\n                </configuration>\n            </plugin>\n\n            <!-- Run Ant for various preparation tasks, declared in build.xml -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-antrun-plugin</artifactId>\n                <version>1.8</version>\n                <executions>\n                    <execution>\n                        <id>copy-local-properties</id>\n                        <phase>prepare-package</phase>\n                        <goals>\n                            <goal>run</goal>\n                        </goals>\n                        <configuration>\n                            <tasks>\n                                <copy todir=\"${project.build.directory}/classes/acl\">\n                                    <fileset dir=\"${basedir}/acl\" />\n                                </copy>\n                                <copy file=\"${basedir}/${env}.properties\"\n                                      toFile=\"${project.build.directory}/classes/env.properties\" />\n                                <copy todir=\"${project.build.directory}/classes/sql\">\n                                    <fileset dir=\"sql\" />\n                                </copy>\n                                <mkdir dir=\"${config.app.home}/tmp\"/>\n                                <pathconvert property=\"apphome.unix\" targetos=\"unix\">\n                                    <path location=\"${config.app.home}\"/>\n                                    <map from=\"C:\" to=\"\"/>\n                                    <map from=\"D:\" to=\"\"/>\n                                    <map from=\"E:\" to=\"\"/>\n                                    <map from=\"F:\" to=\"\"/>\n                                </pathconvert>\n                                <pathconvert property=\"apphome.windows\" targetos=\"unix\">\n                                    <path location=\"${config.app.home}\"/>\n                                </pathconvert>\n                                <echo>apphome.unix = ${apphome.unix}</echo>\n                                <echo>apphome.windows = ${apphome.windows}</echo>\n                            </tasks>\n                            <exportAntProperties>true</exportAntProperties>\n                        </configuration>\n                    </execution>\n                    <execution>\n                        <id>pre-test</id>\n                        <phase>process-test-resources</phase>\n                        <goals>\n                            <goal>run</goal>\n                        </goals>\n                        <configuration>\n                            <tasks>\n                                <copy file=\"${basedir}/tests.properties\"\n                                      toFile=\"${project.build.directory}/test-classes/env.properties\" />\n                                <copy todir=\"${project.build.directory}/test-classes/sql\">\n                                    <fileset dir=\"sql\" />\n                                </copy>\n                                <copy todir=\"${project.build.directory}/test-classes/acl\">\n                                    <fileset dir=\"acl\" />\n                                </copy>\n                            </tasks>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>io.fabric8</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>0.26.1</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <filter>${valid.images}</filter>\n                    <images>\n\n                        <image>\n                            <alias>virtuoso-cr-jenkins</alias>\n                            <name>virtuoso</name>\n\n                            <build>\n                                <from>openlink/virtuoso-opensource-7:7.2.6-r1-g0a3336c</from>\n                                <assembly>\n                                    <descriptor>assembly-virtuoso-unittest.xml</descriptor>\n                                </assembly>\n                            </build>\n\n                            <run>\n                                <env>\n                                    <DBA_PASSWORD>dba</DBA_PASSWORD>\n                                    <VIRT_Parameters_TimezonelessDatetimes>0</VIRT_Parameters_TimezonelessDatetimes>\n                                    <VIRT_Parameters_DirsAllowed>., ../vad, /usr/share/proj, /var/tmp, /tmp, ${config.app.home}/tmp</VIRT_Parameters_DirsAllowed>\n                                </env>\n                                <ports>\n                                    <port>8891:8890</port>\n                                    <port>${tests.virtuoso.port}:1111</port>\n                                </ports>\n                                <wait>\n                                    <log>Server online at</log>\n                                    <time>60000</time>\n                                    <exec>\n                                        <postStart>isql localhost:1111 dba dba /maven/1_create_testuser.sql</postStart>\n                                    </exec>\n                                </wait>\n                                <volumes>\n                                    <bind>\n                                        <volume>${config.docker.sharedVolume}/tmp:${config.app.home}/tmp</volume>\n                                    </bind>\n                                </volumes>\n                            </run>\n                        </image>\n\n                        <image>\n                            <alias>httpd-cr-jenkins</alias>\n                            <name>httpd</name>\n\n                            <build>\n                                <from>httpd:2.4</from>\n                                <assembly>\n                                    <descriptor>assembly-httpd-unittest.xml</descriptor>\n                                </assembly>\n                            </build>\n\n                            <run>\n                                <links>\n                                    <link>virtuoso</link>\n                                </links>\n                                <ports>\n                                    <port>${tests.httpd.port}:80</port>\n                                </ports>\n                                <wait>\n                                    <!-- Check for this URL to return a 200 return code .... -->\n                                    <url>http://${tests.httpd.host}:${tests.httpd.port}/</url>\n                                    <!-- ... but at max 2 minutes -->\n                                    <time>120000</time>\n                                    <exec>\n                                        <postStart>/maven/move-test-files.sh</postStart>\n                                    </exec>\n                                </wait>\n                            </run>\n                        </image>\n\n                    </images>\n\n                </configuration>\n                <executions>\n                    <execution>\n                        <configuration>\n                            <skip>${maven.test.skip}</skip>\n                        </configuration>\n                        <id>start</id>\n                        <phase>pre-integration-test</phase>\n                        <goals>\n                            <goal>stop</goal>\n                            <goal>build</goal>\n                            <goal>start</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <configuration>\n                            <skip>${maven.test.skip}</skip>\n                        </configuration>\n                        <id>stop</id>\n                        <phase>post-integration-test</phase>\n                        <goals>\n                            <goal>stop</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.7</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                        <configuration>\n                            <propertyName>itCoverAgent</propertyName>\n                        </configuration>\n                    </execution>\n                    <!-- attached to Maven verify phase -->\n                    <execution>\n                        <id>report</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                        <configuration>\n                            <includes>\n                                <include>eionet/cr/**/*.class</include>\n                            </includes>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>com.github.spotbugs</groupId>\n                <artifactId>spotbugs-maven-plugin</artifactId>\n                <version>4.2.3</version>\n            </plugin>\n        </plugins>\n        <!-- name of the bundled project when it is finally built -->\n        <finalName>cr</finalName>\n\n    </build>\n\n    <!-- dependencies -->\n\n    <dependencies>\n        <dependency>\n            <groupId>net.sf.ehcache</groupId>\n            <artifactId>ehcache-core</artifactId>\n            <version>2.5.2</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.activation</groupId>\n            <artifactId>activation</artifactId>\n            <version>1.1</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.mail</groupId>\n            <artifactId>mail</artifactId>\n            <version>1.4.1</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.6</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-fileupload</groupId>\n            <artifactId>commons-fileupload</artifactId>\n            <version>1.4</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-collections</groupId>\n            <artifactId>commons-collections</artifactId>\n            <version>3.2</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-validator</groupId>\n            <artifactId>commons-validator</artifactId>\n            <version>1.4.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-pool2</artifactId>\n            <version>2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-dbcp2</artifactId>\n            <version>2.5.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-compress</artifactId>\n            <version>1.19</version>\n        </dependency>\n        <dependency>\n            <groupId>net.sourceforge.stripes</groupId>\n            <artifactId>stripes</artifactId>\n            <version>1.5.8</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>3.1.0</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n            <version>1.1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>2.0</version>\n            <scope>provided</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>javax.servlet</groupId>\n                    <artifactId>servlet-api</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>cas</groupId>\n            <artifactId>casclient</artifactId>\n            <version>2.1.1</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>javax.servlet</groupId>\n                    <artifactId>servlet-api</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>taglibs</groupId>\n            <artifactId>standard</artifactId>\n            <version>1.1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.hp.hpl.jena</groupId>\n            <artifactId>jena</artifactId>\n            <version>2.6.4</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>xerces</groupId>\n            <artifactId>xercesImpl</artifactId>\n            <version>2.11.0</version>\n        </dependency>\n        <dependency>\n            <groupId>displaytag</groupId>\n            <artifactId>displaytag</artifactId>\n            <version>1.2</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>jcl104-over-slf4j</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <!-- Eionet dependencies -->\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>documentation.core</artifactId>\n            <version>2.0-SNAPSHOT</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>documentation.extensions.stripes</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>acl</artifactId>\n            <version>4.0-SNAPSHOT</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>rpcserver</artifactId>\n            <version>2.0</version>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>eionet-dir</artifactId>\n            <version>2.5</version>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.commons.util</groupId>\n            <artifactId>ws-commons-util</artifactId>\n            <version>1.0.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.quartz-scheduler</groupId>\n            <artifactId>quartz</artifactId>\n            <version>1.7.3</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.transaction</groupId>\n            <artifactId>jta</artifactId>\n            <version>1.0.1B</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-lang</groupId>\n            <artifactId>commons-lang</artifactId>\n            <version>2.4</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-beanutils</groupId>\n            <artifactId>commons-beanutils</artifactId>\n            <version>1.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi</artifactId>\n            <version>3.5-FINAL</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.simpleframework</groupId>\n            <artifactId>simple-xml</artifactId>\n            <version>2.1.3</version>\n        </dependency>\n        <dependency>\n            <groupId>net.sf.json-lib</groupId>\n            <artifactId>json-lib</artifactId>\n            <version>2.3</version>\n            <type>jar</type>\n            <classifier>jdk15</classifier>\n        </dependency>\n\n\n        <!-- Logging dependencies -->\n        <dependency>\n            <groupId>io.sentry</groupId>\n            <artifactId>sentry-log4j2</artifactId>\n            <version>1.7.23</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.17.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n            <version>2.17.1</version>\n        </dependency>\n        <!--The Log4j 2 SLF4J Binding allows applications coded to the SLF4J API to use Log4j 2 as the implementation.-->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n            <version>2.17.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n        <!-- Intercepts logging from log4j and redirects it to slf4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n        <!-- Intercepts logging from apache commons logging and redirects it to slf4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n        <!--GELF-->\n        <dependency>\n            <groupId>biz.paluch.logging</groupId>\n            <artifactId>logstash-gelf</artifactId>\n            <version>1.11.2</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n            <version>4.5.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpmime</artifactId>\n            <version>4.5.3</version>\n        </dependency>\n        <dependency>\n            <groupId>xalan</groupId>\n            <artifactId>xalan</artifactId>\n            <version>2.7.0</version>\n            <scope>runtime</scope>\n        </dependency>\n\n        <!-- start org.openrdf.sesame dependencies -->\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-util</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-api</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-binary</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-n3</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-ntriples</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-rdfxml</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-trix</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-turtle</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-trig</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-repository-api</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryresultio-api</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryresultio-text</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryparser-api</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryparser-sparql</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryalgebra-evaluation</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryalgebra-model</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n\n        <!-- end org.openrdf.sesame dependencies -->\n        <dependency>\n            <groupId>virtuoso</groupId>\n            <artifactId>virt-sesame</artifactId>\n            <version>2.7.3</version>\n        </dependency>\n        <dependency>\n            <groupId>virtuoso</groupId>\n            <artifactId>virtjdbc</artifactId>\n            <version>4.2.fix</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-httpclient</groupId>\n            <artifactId>commons-httpclient</artifactId>\n            <version>3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>nl.bitwalker</groupId>\n            <artifactId>UserAgentUtils</artifactId>\n            <version>1.2.4</version>\n        </dependency>\n        <dependency>\n            <groupId>net.sf.opencsv</groupId>\n            <artifactId>opencsv</artifactId>\n            <version>2.0</version>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>eea-template</artifactId>\n            <version>3.0</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>javax.servlet</groupId>\n                    <artifactId>servlet-api</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>rome</groupId>\n            <artifactId>rome</artifactId>\n            <version>1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>net.htmlparser.jericho</groupId>\n            <artifactId>jericho-html</artifactId>\n            <version>3.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.healthmarketscience.jackcess</groupId>\n            <artifactId>jackcess</artifactId>\n            <version>1.2.9</version>\n        </dependency>\n        <!-- JWT Lib -->\n        <dependency>\n            <groupId>com.auth0</groupId>\n            <artifactId>java-jwt</artifactId>\n            <version>2.1.0</version>\n        </dependency>\n\n        <!-- Ant -->\n\n        <dependency>\n            <groupId>org.apache.ant</groupId>\n            <artifactId>ant</artifactId>\n            <version>1.9.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ant</groupId>\n            <artifactId>ant-apache-log4j</artifactId>\n            <version>1.9.3</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <!-- Liquibase -->\n        <!-- TODO Upgrade to 3.5.3+ asap -->\n        <dependency>\n            <groupId>org.liquibase</groupId>\n            <artifactId>liquibase-core</artifactId>\n            <version>3.0.6</version>\n        </dependency>\n\n        <!-- TEST dependencies -->\n\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.sonarsource.scanner.maven</groupId>\n            <artifactId>sonar-maven-plugin</artifactId>\n            <version>3.9.1.2184</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.dbunit</groupId>\n            <artifactId>dbunit</artifactId>\n            <version>2.5.3</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-server</artifactId>\n            <version>9.4.19.v20190610</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-util</artifactId>\n            <version>9.4.19.v20190610</version>\n            <scope>test</scope>\n        </dependency>\n\n        <!-- Spring framework dependencies -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-web</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-jdbc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>${spring.version}</version>\n            <scope>test</scope>\n        </dependency>\n\n        <!-- PropertyPlaceholderConfigurer -->\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>property-placeholder-resolver</artifactId>\n            <version>1.0</version>\n            <type>jar</type>\n        </dependency>\n\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>3.11.2</version>\n            <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n    <reporting>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-pmd-plugin</artifactId>\n                <version>3.14.0</version>\n                <configuration>\n                    <linkXRef>false</linkXRef>\n                    <sourceEncoding>utf-8</sourceEncoding>\n                    <minimumTokens>300</minimumTokens>\n                    <targetJdk>${javaVersion}</targetJdk>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n                <version>3.1.2</version>\n                <configuration>\n                    <configLocation>${checkstyle.config.location}</configLocation>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jxr-plugin</artifactId>\n                <version>2.5</version>\n            </plugin>\n        </plugins>\n    </reporting>\n\n</project>\n", "/*\n * The contents of this file are subject to the Mozilla Public\n * License Version 1.1 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS\n * IS\" basis, WITHOUT WARRANTY OF ANY KIND, either express or\n * implied. See the License for the specific language governing\n * rights and limitations under the License.\n *\n * The Original Code is Content Registry 2.0.\n *\n * The Initial Owner of the Original Code is European Environment\n * Agency.  Portions created by Tieto Estonia are Copyright\n * (C) European Environment Agency.  All Rights Reserved.\n *\n * Contributor(s):\n * Enriko K\u00e4sper, Tieto Estonia\n */\npackage eionet.cr.web.action;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport net.sourceforge.stripes.action.DefaultHandler;\nimport net.sourceforge.stripes.action.ForwardResolution;\nimport net.sourceforge.stripes.action.Resolution;\nimport net.sourceforge.stripes.action.UrlBinding;\nimport eionet.cr.common.Predicates;\nimport eionet.cr.config.GeneralConfig;\nimport eionet.cr.dao.DAOException;\nimport eionet.cr.dao.DAOFactory;\nimport eionet.cr.dao.SearchDAO;\nimport eionet.cr.dto.SearchResultDTO;\nimport eionet.cr.dto.SubjectDTO;\nimport eionet.cr.dto.TagDTO;\nimport eionet.cr.util.SortOrder;\nimport eionet.cr.util.SortingRequest;\nimport eionet.cr.util.pagination.PagingRequest;\nimport eionet.cr.web.util.ApplicationCache;\nimport eionet.cr.web.util.columns.SearchResultColumn;\nimport eionet.cr.web.util.columns.SubjectPredicateColumn;\n\n/**\n *\n * @author <a href=\"mailto:enriko.kasper@tieto.com\">Enriko K\u00e4sper</a>\n *\n */\n\n@UrlBinding(\"/tagSearch.action\")\npublic class TagSearchActionBean extends AbstractSearchActionBean<SubjectDTO> {\n\n    /** */\n    private static final String TAG_SEARCH_PATH = \"/pages/tagSearch.jsp\";\n    private static final String SELECTED_TAGS_CACHE = TypeSearchActionBean.class.getName() + \".selectedTagsCache\";\n\n    /** */\n    private List<TagDTO> tagCloud;\n    private String cloudSorted = \"name\";\n    private String searchTag;\n    private String queryString;\n\n    // selected tags\n    private List<String> selectedTags;\n    // columns\n    private static final ArrayList<SearchResultColumn> columns;\n\n    private int tagCloudSize = Integer.parseInt(GeneralConfig.getProperty(GeneralConfig.TAGCOLUD_TAGSEARCH_SIZE));\n\n    static {\n        columns = new ArrayList<SearchResultColumn>();\n\n        SubjectPredicateColumn col = new SubjectPredicateColumn();\n        col.setPredicateUri(Predicates.RDF_TYPE);\n        col.setTitle(\"Type\");\n        col.setSortable(true);\n        columns.add(col);\n\n        col = new SubjectPredicateColumn();\n        col.setPredicateUri(Predicates.RDFS_LABEL);\n        col.setTitle(\"Label\");\n        col.setSortable(true);\n        columns.add(col);\n\n        col = new SubjectPredicateColumn();\n        col.setPredicateUri(Predicates.CR_TAG);\n        col.setTitle(\"Tags\");\n        col.setSortable(false);\n        columns.add(col);\n    }\n\n    /**\n     * @return\n     * @throws Exception\n     */\n    @DefaultHandler\n    public Resolution preparePage() throws Exception {\n        tagCloud = ApplicationCache.getTagCloudSortedByName(tagCloudSize);\n        return new ForwardResolution(TAG_SEARCH_PATH);\n    }\n\n    public Resolution sortByName() throws Exception {\n        tagCloud = ApplicationCache.getTagCloudSortedByName(tagCloudSize);\n        cloudSorted = \"name\";\n        return new ForwardResolution(TAG_SEARCH_PATH);\n    }\n\n    public Resolution sortByCount() throws Exception {\n        tagCloud = ApplicationCache.getTagCloudSortedByCount(tagCloudSize);\n        cloudSorted = \"count\";\n        return new ForwardResolution(TAG_SEARCH_PATH);\n    }\n\n    @Override\n    public Resolution search() throws DAOException {\n\n        if ((searchTag == null || searchTag.isEmpty()) && (selectedTags == null || selectedTags.isEmpty())) {\n            return new ForwardResolution(TAG_SEARCH_PATH);\n        }\n        if (selectedTags == null) {\n            selectedTags = new LinkedList<String>();\n        }\n\n        if (!selectedTags.contains(searchTag) && searchTag != null && !searchTag.isEmpty()) {\n            selectedTags.add(getSearchTag().trim());\n        }\n\n        SearchResultDTO<SubjectDTO> searchResult =\n                DAOFactory\n                        .get()\n                        .getDao(SearchDAO.class)\n                        .searchByTags(selectedTags, PagingRequest.create(getPageN()),\n                                new SortingRequest(getSortP(), SortOrder.parse(getSortO())));\n        resultList = searchResult.getItems();\n        matchCount = searchResult.getMatchCount();\n        queryString = searchResult.getQuery();\n        this.getContext().getRequest().setAttribute(\"searchTag\", \"\");\n\n        getSession().setAttribute(SELECTED_TAGS_CACHE, selectedTags);\n\n        return new ForwardResolution(TAG_SEARCH_PATH).addParameter(\"searchTag\", \"\");\n    }\n\n    /*\n     * reads the selected tag list from session\n     */\n    @SuppressWarnings(\"unchecked\")\n    public Resolution addTag() throws DAOException {\n        selectedTags = (List<String>) getSession().getAttribute(SELECTED_TAGS_CACHE);\n\n        return search();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Resolution removeTag() throws Exception {\n        selectedTags = (List<String>) getSession().getAttribute(SELECTED_TAGS_CACHE);\n        if (selectedTags != null && !selectedTags.isEmpty()) {\n            selectedTags.remove(searchTag);\n        }\n        searchTag = \"\";\n\n        Resolution result = null;\n        if (selectedTags.size() == 0) {\n            result = preparePage();\n        } else {\n            result = search();\n        }\n        if (result instanceof ForwardResolution) {\n            ((ForwardResolution) result).addParameter(\"searchTag\", \"\");\n        }\n        return result;\n    }\n\n    public List<TagDTO> getTagCloud() {\n        return tagCloud;\n    }\n\n    public void setTagCloud(List<TagDTO> tagCloud) {\n        this.tagCloud = tagCloud;\n    }\n\n    public String getCloudSorted() {\n        return cloudSorted;\n    }\n\n    public String getSearchTag() {\n        return searchTag;\n    }\n\n    public void setSearchTag(String searchTag) {\n        this.searchTag = searchTag;\n    }\n\n    public List<String> getSelectedTags() {\n        return selectedTags;\n    }\n\n    public void setSelectedTags(List<String> selectedTags) {\n        this.selectedTags = selectedTags;\n    }\n\n    @Override\n    public List<SearchResultColumn> getColumns() throws DAOException {\n        return columns;\n    }\n\n    /**\n     * @return the queryString\n     */\n    public String getQueryString() {\n        return queryString;\n    }\n\n}\n", "/*\n * The contents of this file are subject to the Mozilla Public\n * License Version 1.1 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS\n * IS\" basis, WITHOUT WARRANTY OF ANY KIND, either express or\n * implied. See the License for the specific language governing\n * rights and limitations under the License.\n *\n * The Original Code is Content Registry 2.0.\n *\n * The Initial Owner of the Original Code is European Environment\n * Agency.  Portions created by Tieto Eesti are Copyright\n * (C) European Environment Agency.  All Rights Reserved.\n *\n * Contributor(s):\n * Jaanus Heinlaid, Tieto Eesti\n */\npackage eionet.cr.web.action.factsheet;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\n\nimport net.sourceforge.stripes.action.DefaultHandler;\nimport net.sourceforge.stripes.action.ForwardResolution;\nimport net.sourceforge.stripes.action.HandlesEvent;\nimport net.sourceforge.stripes.action.RedirectResolution;\nimport net.sourceforge.stripes.action.Resolution;\nimport net.sourceforge.stripes.action.StreamingResolution;\nimport net.sourceforge.stripes.action.UrlBinding;\nimport net.sourceforge.stripes.validation.SimpleError;\nimport net.sourceforge.stripes.validation.ValidationMethod;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang.math.NumberUtils;\n\nimport eionet.cr.common.Predicates;\nimport eionet.cr.common.Subjects;\nimport eionet.cr.config.GeneralConfig;\nimport eionet.cr.dao.CompiledDatasetDAO;\nimport eionet.cr.dao.DAOException;\nimport eionet.cr.dao.DAOFactory;\nimport eionet.cr.dao.HarvestSourceDAO;\nimport eionet.cr.dao.HelperDAO;\nimport eionet.cr.dao.SpoBinaryDAO;\nimport eionet.cr.dao.util.UriLabelPair;\nimport eionet.cr.dao.virtuoso.PredicateObjectsReader;\nimport eionet.cr.dataset.CurrentLoadedDatasets;\nimport eionet.cr.dto.DatasetDTO;\nimport eionet.cr.dto.FactsheetDTO;\nimport eionet.cr.dto.HarvestSourceDTO;\nimport eionet.cr.dto.ObjectDTO;\nimport eionet.cr.dto.SubjectDTO;\nimport eionet.cr.dto.TripleDTO;\nimport eionet.cr.harvest.CurrentHarvests;\nimport eionet.cr.harvest.HarvestException;\nimport eionet.cr.harvest.OnDemandHarvester;\nimport eionet.cr.harvest.scheduled.UrgentHarvestQueue;\nimport eionet.cr.harvest.util.CsvImportUtil;\nimport eionet.cr.util.Pair;\nimport eionet.cr.util.URLUtil;\nimport eionet.cr.util.Util;\nimport eionet.cr.web.action.AbstractActionBean;\nimport eionet.cr.web.action.source.ViewSourceActionBean;\nimport eionet.cr.web.util.ApplicationCache;\nimport eionet.cr.web.util.tabs.FactsheetTabMenuHelper;\nimport eionet.cr.web.util.tabs.TabElement;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Factsheet.\n *\n * @author <a href=\"mailto:jaanus.heinlaid@tietoenator.com\">Jaanus Heinlaid</a>\n *\n */\n@UrlBinding(\"/factsheet.action\")\npublic class FactsheetActionBean extends AbstractActionBean {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(FactsheetActionBean.class);\n\n    /** Prefix for the name of the \"which page of predicate values to display\" request parameter. */\n    public static final String PAGE_PARAM_PREFIX = \"page\";\n\n    /** Name for session attributes for addible properties. */\n    private static final String ADDIBLE_PROPERTIES_SESSION_ATTR = FactsheetActionBean.class.getName() + \".addibleProperties\";\n\n    /** URI by which the factsheet has been requested. */\n    private String uri;\n\n    /** URI hash by which the factsheet has been requested. Ignored when factsheet requested by URI. */\n    private long uriHash;\n\n    /** The subject data object found by the requestd URI or URI hash. */\n    private FactsheetDTO subject;\n\n    /** Used in factsheet edit mode only, where it indicates if the subject is anonymous. */\n    private boolean anonymous;\n\n    /** */\n    private String propertyUri;\n    /** */\n    private String propertyValue;\n\n    /** List of identifiers of property-value rows submitted from factsheet edit form. */\n    private List<String> rowId;\n\n    /** True if the session bears a user and it happens to be an administrator. Otherwise false. */\n    private boolean adminLoggedIn;\n\n    /** True if the found subject is a bookmark of the logged-in user. In all other cases false. */\n    private Boolean subjectIsUserBookmark;\n\n    /** True if the found subject has downloadable content in filestore. */\n    private Boolean subjectDownloadable;\n\n    /** True, if URI is harvest source. */\n    private boolean uriIsHarvestSource;\n\n    /** True, if URI is local folder. */\n    private boolean uriIsFolder;\n\n    /** */\n    private String bookmarkLabel;\n\n    /** */\n    private Map<String, Integer> predicatePageNumbers;\n    private Map<String, Integer> predicatePageCounts;\n\n    /** */\n    private List<TabElement> tabs;\n\n    /** */\n    private Boolean subjectIsType = null;\n\n    /** */\n    private String predicateUri;\n    private String objectMD5;\n    private String graphUri;\n\n    /** */\n    private List<DatasetDTO> userCompiledDatasets;\n\n    /** */\n    private HarvestSourceDTO harvestSourceDTO;\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails\n     */\n    @DefaultHandler\n    public Resolution view() throws DAOException {\n\n        if (isNoCriteria()) {\n            addCautionMessage(\"No request criteria specified!\");\n        } else {\n            HelperDAO helperDAO = DAOFactory.get().getDao(HelperDAO.class);\n\n            adminLoggedIn = getUser() != null && getUser().isAdministrator();\n\n            subject = helperDAO.getFactsheet(uri, null, getPredicatePageNumbers());\n\n            FactsheetTabMenuHelper tabsHelper = new FactsheetTabMenuHelper(uri, subject, factory.getDao(HarvestSourceDAO.class));\n\n            tabs = tabsHelper.getTabs(FactsheetTabMenuHelper.TabTitle.RESOURCE_PROPERTIES);\n            uriIsHarvestSource = tabsHelper.isUriIsHarvestSource();\n            uriIsFolder = tabsHelper.isUriFolder();\n            harvestSourceDTO = tabsHelper.getHarvestSourceDTO();\n        }\n\n        return new ForwardResolution(\"/pages/factsheet/factsheet.jsp\");\n    }\n\n    /**\n     * Schedules a harvest for resource.\n     *\n     * @return view resolution\n     * @throws HarvestException\n     *             if harvesting fails\n     * @throws DAOException\n     *             if query fails\n     */\n    public Resolution harvest() throws HarvestException, DAOException {\n\n        HelperDAO helperDAO = DAOFactory.get().getDao(HelperDAO.class);\n        SubjectDTO subjectDTO = helperDAO.getSubject(uri);\n\n        if (subjectDTO != null && CsvImportUtil.isSourceTableFile(subjectDTO)) {\n\n            // Special block for harvesting table files.\n            try {\n                List<String> warnings = CsvImportUtil.harvestTableFile(subjectDTO, getUserName());\n                for (String msg : warnings) {\n                    addWarningMessage(msg);\n                }\n                addSystemMessage(\"Source successfully harvested!\");\n            } catch (Exception e) {\n                LOGGER.error(\"Failed to harvest table file\", e);\n                addWarningMessage(\"Failed to harvest table file: \" + e.getMessage());\n            }\n        } else {\n\n            // Block for harvesting other, i.e. non-table-file sources.\n            Pair<Boolean, String> message = harvestNow();\n            if (message.getLeft()) {\n                addWarningMessage(message.getRight());\n            } else {\n                addSystemMessage(message.getRight());\n            }\n        }\n\n        return new RedirectResolution(this.getClass(), \"view\").addParameter(\"uri\", uri);\n    }\n\n    /**\n     * helper method to eliminate code duplication.\n     *\n     * @return Pair<Boolean, String> feedback messages\n     * @throws HarvestException\n     *             if harvesting fails\n     * @throws DAOException\n     *             if query fails\n     */\n    private Pair<Boolean, String> harvestNow() throws HarvestException, DAOException {\n\n        String message = null;\n        if (isUserLoggedIn()) {\n            if (!StringUtils.isBlank(uri) && URLUtil.isURL(uri)) {\n\n                // Add this URL into HARVEST_SOURCE table.\n\n                HarvestSourceDAO dao = factory.getDao(HarvestSourceDAO.class);\n                HarvestSourceDTO dto = new HarvestSourceDTO();\n                dto.setUrl(StringUtils.substringBefore(uri, \"#\"));\n                dto.setEmails(\"\");\n                dto.setIntervalMinutes(GeneralConfig.getDefaultHarvestIntervalMinutes());\n                dto.setPrioritySource(false);\n                dto.setOwner(null);\n                dao.addSourceIgnoreDuplicate(dto);\n\n                // Issue an instant harvest of this URL.\n\n                OnDemandHarvester.Resolution resolution = OnDemandHarvester.harvest(dto.getUrl(), getUserName());\n\n                // Give feedback to the user.\n\n                if (resolution.equals(OnDemandHarvester.Resolution.ALREADY_HARVESTING)) {\n                    message = \"The resource is currently being harvested by another user or background harvester!\";\n                } else if (resolution.equals(OnDemandHarvester.Resolution.UNCOMPLETE)) {\n                    message = \"The harvest hasn't finished yet, but continues in the background!\";\n                } else if (resolution.equals(OnDemandHarvester.Resolution.COMPLETE)) {\n                    message = \"The harvest has been completed!\";\n                } else if (resolution.equals(OnDemandHarvester.Resolution.SOURCE_UNAVAILABLE)) {\n                    message = \"The resource was not available!\";\n                } else if (resolution.equals(OnDemandHarvester.Resolution.NO_STRUCTURED_DATA)) {\n                    message = \"The resource contained no RDF data!\";\n                } else {\n                    message = \"No feedback given from harvest!\";\n                }\n            }\n            return new Pair<Boolean, String>(false, message);\n        } else {\n            return new Pair<Boolean, String>(true, getBundle().getString(\"not.logged.in\"));\n        }\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails if query fails\n     */\n    public Resolution edit() throws DAOException {\n\n        return view();\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails if query fails\n     */\n    public Resolution addbookmark() throws DAOException {\n        if (isUserLoggedIn()) {\n            DAOFactory.get().getDao(HelperDAO.class).addUserBookmark(getUser(), getUrl(), bookmarkLabel);\n            addSystemMessage(\"Succesfully bookmarked this source.\");\n        } else {\n            addSystemMessage(\"Only logged in users can bookmark sources.\");\n        }\n        return view();\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails\n     */\n    public Resolution removebookmark() throws DAOException {\n        if (isUserLoggedIn()) {\n            DAOFactory.get().getDao(HelperDAO.class).deleteUserBookmark(getUser(), getUrl());\n            addSystemMessage(\"Succesfully removed this source from bookmarks.\");\n        } else {\n            addSystemMessage(\"Only logged in users can remove bookmarks.\");\n        }\n        return view();\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails if query fails\n     */\n    public Resolution save() throws DAOException {\n\n        SubjectDTO subjectDTO = new SubjectDTO(uri, anonymous);\n\n        if (propertyUri.equals(Predicates.CR_TAG)) {\n            List<String> tags = Util.splitStringBySpacesExpectBetweenQuotes(propertyValue);\n\n            for (String tag : tags) {\n                ObjectDTO objectDTO = new ObjectDTO(tag, true);\n                objectDTO.setSourceUri(getUser().getRegistrationsUri());\n                subjectDTO.addObject(propertyUri, objectDTO);\n            }\n        } else {\n            // other properties\n            ObjectDTO objectDTO = new ObjectDTO(propertyValue, true);\n            objectDTO.setSourceUri(getUser().getRegistrationsUri());\n            subjectDTO.addObject(propertyUri, objectDTO);\n        }\n\n        HelperDAO helperDao = factory.getDao(HelperDAO.class);\n        helperDao.addTriples(subjectDTO);\n        helperDao.updateUserHistory(getUser(), uri);\n\n        // since user registrations URI was used as triple source, add it to HARVEST_SOURCE too\n        // (but set interval minutes to 0, to avoid it being background-harvested)\n        DAOFactory\n                .get()\n                .getDao(HarvestSourceDAO.class)\n                .addSourceIgnoreDuplicate(\n                        HarvestSourceDTO.create(getUser().getRegistrationsUri(), true, 0, getUser().getUserName()));\n\n        return new RedirectResolution(this.getClass(), \"edit\").addParameter(\"uri\", uri);\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails\n     */\n    public Resolution delete() throws DAOException {\n\n        if (rowId != null && !rowId.isEmpty()) {\n\n            ArrayList<TripleDTO> triples = new ArrayList<TripleDTO>();\n\n            for (String row : rowId) {\n                int i = row.indexOf(\"_\");\n                if (i <= 0 || i == (row.length() - 1)) {\n                    throw new IllegalArgumentException(\"Illegal rowId: \" + row);\n                }\n\n                String predicateHash = row.substring(0, i);\n                String predicate = getContext().getRequestParameter(\"pred_\".concat(predicateHash));\n\n                String objectHash = row.substring(i + 1);\n                String objectValue = getContext().getRequest().getParameter(\"obj_\".concat(objectHash));\n                String sourceUri = getContext().getRequest().getParameter(\"source_\".concat(objectHash));\n\n                TripleDTO triple = new TripleDTO(uri, predicate, objectValue);\n                // FIXME - find a better way to determine if the object is literal or not, URIs may be literals also\n                triple.setLiteralObject(!URLUtil.isURL(objectValue));\n                triple.setSourceUri(sourceUri);\n\n                triples.add(triple);\n            }\n\n            HelperDAO helperDao = factory.getDao(HelperDAO.class);\n            helperDao.deleteTriples(triples);\n            helperDao.updateUserHistory(getUser(), uri);\n        }\n\n        return new RedirectResolution(this.getClass(), \"edit\").addParameter(\"uri\", uri);\n    }\n\n    /**\n     * Validates if user is logged on and if event property is not empty.\n     */\n    @ValidationMethod(on = {\"save\", \"delete\", \"edit\", \"harvest\"})\n    public void validateUserKnown() {\n\n        if (getUser() == null) {\n            addWarningMessage(\"Operation not allowed for anonymous users\");\n        } else if (getContext().getEventName().equals(\"save\") && StringUtils.isBlank(propertyValue)) {\n            addGlobalValidationError(new SimpleError(\"Property value must not be blank\"));\n        }\n    }\n\n    /**\n     * @return the resourceUri\n     */\n    public String getUri() {\n        return uri;\n    }\n\n    /**\n     * @param resourceUri\n     *            the resourceUri to set\n     */\n    public void setUri(final String resourceUri) {\n        this.uri = resourceUri;\n    }\n\n    /**\n     * @return the resource\n     */\n    public FactsheetDTO getSubject() {\n        return subject;\n    }\n\n    /**\n     * @return the addibleProperties\n     * @throws DAOException\n     *             if query fails\n     */\n    @SuppressWarnings(\"unchecked\")\n    public Collection<UriLabelPair> getAddibleProperties() throws DAOException {\n\n        // get the addible properties from session\n\n        HttpSession session = getContext().getRequest().getSession();\n        ArrayList<UriLabelPair> result = (ArrayList<UriLabelPair>) session.getAttribute(ADDIBLE_PROPERTIES_SESSION_ATTR);\n\n        // if not in session, create them and add to session\n        if (result == null || result.isEmpty()) {\n\n            // get addible properties from database\n\n            HelperDAO helperDAO = factory.getDao(HelperDAO.class);\n            HashMap<String, String> props = helperDAO.getAddibleProperties(uri);\n\n            // add some hard-coded properties, HashMap assures there won't be duplicates\n            props.put(Predicates.RDFS_LABEL, \"Title\");\n            props.put(Predicates.CR_TAG, \"Tag\");\n            props.put(Predicates.RDFS_COMMENT, \"Other comments\"); // Don't use\n            props.put(Predicates.DC_DESCRIPTION, \"Description\");\n            props.put(Predicates.CR_HAS_SOURCE, \"hasSource\");\n            props.put(Predicates.ROD_PRODUCT_OF, \"productOf\");\n\n            // create the result object from the found and hard-coded properties, sort it\n\n            result = new ArrayList<UriLabelPair>();\n            if (props != null && !props.isEmpty()) {\n\n                for (String propUri : props.keySet()) {\n                    result.add(UriLabelPair.create(propUri, props.get(propUri)));\n                }\n                Collections.sort(result);\n            }\n\n            // put into session\n            session.setAttribute(ADDIBLE_PROPERTIES_SESSION_ATTR, result);\n        }\n\n        return result;\n    }\n\n    /**\n     * @param anonymous\n     *            the anonymous to set\n     */\n    public void setAnonymous(final boolean anonymous) {\n        this.anonymous = anonymous;\n    }\n\n    /**\n     * @param propertyUri\n     *            the propertyUri to set\n     */\n    public void setPropertyUri(final String propertyUri) {\n        this.propertyUri = propertyUri;\n    }\n\n    /**\n     * @param propertyValue\n     *            the propertyValue to set\n     */\n    public void setPropertyValue(final String propertyValue) {\n        this.propertyValue = propertyValue;\n    }\n\n    /**\n     * @param rowId\n     *            the rowId to set\n     */\n    public void setRowId(final List<String> rowId) {\n        this.rowId = rowId;\n    }\n\n    /**\n     * @return the noCriteria\n     */\n    public boolean isNoCriteria() {\n        return StringUtils.isBlank(uri);\n    }\n\n    /**\n     * @return the uriHash\n     */\n    public long getUriHash() {\n        return uriHash;\n    }\n\n    /**\n     * @param uriHash\n     *            the uriHash to set\n     */\n    public void setUriHash(final long uriHash) {\n        this.uriHash = uriHash;\n    }\n\n    /**\n     *\n     * @return String\n     */\n    public String getUrl() {\n        return uri != null && URLUtil.isURL(uri) ? uri : null;\n    }\n\n    /**\n     * True if admin is logged in.\n     *\n     * @return boolean\n     */\n    public boolean isAdminLoggedIn() {\n        return adminLoggedIn;\n    }\n\n    /**\n     *\n     * @return boolean\n     * @throws DAOException\n     *             if query fails if query fails\n     */\n    public boolean getSubjectIsUserBookmark() throws DAOException {\n\n        if (!isUserLoggedIn()) {\n            return false;\n        }\n\n        if (subjectIsUserBookmark == null) {\n            subjectIsUserBookmark = Boolean.valueOf(factory.getDao(HelperDAO.class).isSubjectUserBookmark(getUser(), uri));\n        }\n\n        return subjectIsUserBookmark.booleanValue();\n    }\n\n    /**\n     * @return the subjectDownloadable\n     * @throws DAOException\n     */\n    public boolean isSubjectDownloadable() throws DAOException {\n\n        if (subjectDownloadable == null) {\n            subjectDownloadable = Boolean.valueOf(DAOFactory.get().getDao(SpoBinaryDAO.class).exists(uri));\n        }\n        return subjectDownloadable.booleanValue();\n    }\n\n    /**\n     *\n     * @return boolean\n     * @throws DAOException\n     */\n    public boolean isCurrentlyHarvested() throws DAOException {\n\n        return uri == null ? false : (CurrentHarvests.contains(uri) || UrgentHarvestQueue.isInQueue(uri) || CurrentLoadedDatasets\n                .contains(uri));\n    }\n\n    /**\n     *\n     * @return boolean\n     */\n    public boolean isCompiledDataset() {\n\n        boolean ret = false;\n\n        if (subject.getObject(Predicates.RDF_TYPE) != null) {\n            ret = Subjects.CR_COMPILED_DATASET.equals(subject.getObject(Predicates.RDF_TYPE).getValue());\n        }\n\n        return ret;\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     */\n    public Resolution showOnMap() throws DAOException {\n        HelperDAO helperDAO = DAOFactory.get().getDao(HelperDAO.class);\n        subject = helperDAO.getFactsheet(uri, null, null);\n\n        FactsheetTabMenuHelper helper = new FactsheetTabMenuHelper(uri, subject, factory.getDao(HarvestSourceDAO.class));\n        tabs = helper.getTabs(FactsheetTabMenuHelper.TabTitle.SHOW_ON_MAP);\n        return new ForwardResolution(\"/pages/factsheet/map.jsp\");\n    }\n\n    public boolean isUriIsHarvestSource() {\n        return uriIsHarvestSource;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public String getBookmarkLabel() {\n        return bookmarkLabel;\n    }\n\n    /**\n     *\n     * @param bookmarkLabel\n     */\n    public void setBookmarkLabel(String bookmarkLabel) {\n        this.bookmarkLabel = bookmarkLabel;\n    }\n\n    /**\n     * @return the predicatePages\n     */\n    @SuppressWarnings(\"unchecked\")\n    public Map<String, Integer> getPredicatePageNumbers() {\n\n        if (predicatePageNumbers == null) {\n\n            predicatePageNumbers = new HashMap<String, Integer>();\n            HttpServletRequest request = getContext().getRequest();\n            Map<String, String[]> paramsMap = request.getParameterMap();\n\n            if (paramsMap != null && !paramsMap.isEmpty()) {\n\n                for (Map.Entry<String, String[]> entry : paramsMap.entrySet()) {\n\n                    String paramName = entry.getKey();\n                    if (isPredicatePageParam(paramName)) {\n\n                        int pageNumber = NumberUtils.toInt(paramName.substring(PAGE_PARAM_PREFIX.length()));\n                        if (pageNumber > 0) {\n\n                            String[] predicateUris = entry.getValue();\n                            if (predicateUris != null) {\n                                for (String predUri : predicateUris) {\n                                    predicatePageNumbers.put(predUri, pageNumber);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return predicatePageNumbers;\n    }\n\n    /**\n     *\n     * @param paramName\n     * @return\n     */\n    public boolean isPredicatePageParam(String paramName) {\n\n        if (paramName.startsWith(PAGE_PARAM_PREFIX) && paramName.length() > PAGE_PARAM_PREFIX.length()) {\n            return StringUtils.isNumeric(paramName.substring(PAGE_PARAM_PREFIX.length()));\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * @return\n     */\n    public int getPredicatePageSize() {\n\n        return PredicateObjectsReader.PREDICATE_PAGE_SIZE;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public List<TabElement> getTabs() {\n        return tabs;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public boolean getSubjectIsType() {\n\n        if (subjectIsType == null) {\n\n            List<String> typeUris = ApplicationCache.getTypeUris();\n            subjectIsType = Boolean.valueOf(typeUris.contains(this.uri));\n        }\n\n        return subjectIsType;\n    }\n\n    /**\n     *\n     * @return\n     */\n    @HandlesEvent(\"openPredObjValue\")\n    public Resolution openPredObjValue() {\n\n        LOGGER.trace(\"Retrieving object value for MD5 \" + objectMD5 + \" of predicate \" + predicateUri);\n        String value = DAOFactory.get().getDao(HelperDAO.class).getLiteralObjectValue(uri, predicateUri, objectMD5, graphUri);\n        if (StringUtils.isBlank(value)) {\n            value = \"Found no value!\";\n        } else {\n            value = StringEscapeUtils.escapeXml(value);\n        }\n        return new StreamingResolution(\"text/html\", value);\n    }\n\n    /**\n     * @param predicateUri\n     *            the predicateUri to set\n     */\n    public void setPredicateUri(String predicateUri) {\n        this.predicateUri = predicateUri;\n    }\n\n    /**\n     * @param objectMD5\n     *            the objectMD5 to set\n     */\n    public void setObjectMD5(String objectMD5) {\n        this.objectMD5 = objectMD5;\n    }\n\n    /**\n     * @param graphUri\n     *            the graphUri to set\n     */\n    public void setGraphUri(String graphUri) {\n        this.graphUri = graphUri;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public List<DatasetDTO> getUserCompiledDatasets() {\n        if (userCompiledDatasets == null && !StringUtils.isBlank(uri)) {\n            try {\n                CompiledDatasetDAO dao = DAOFactory.get().getDao(CompiledDatasetDAO.class);\n                userCompiledDatasets = dao.getCompiledDatasets(getUser().getHomeUri(), uri);\n            } catch (DAOException e) {\n                e.printStackTrace();\n            }\n        }\n        return userCompiledDatasets;\n    }\n\n    /**\n     *\n     * @param userCompiledDatasets\n     */\n    public void setUserCompiledDatasets(List<DatasetDTO> userCompiledDatasets) {\n        this.userCompiledDatasets = userCompiledDatasets;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public Class<ViewSourceActionBean> getViewSourceActionBeanClass() {\n        return ViewSourceActionBean.class;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public boolean isUriIsFolder() {\n        return uriIsFolder;\n    }\n\n    /**\n     *\n     * @param uriIsFolder\n     */\n    public void setUriIsFolder(boolean uriIsFolder) {\n        this.uriIsFolder = uriIsFolder;\n\n    }\n\n    /**\n     * @return the harvestSourceDTO\n     */\n    public HarvestSourceDTO getHarvestSourceDTO() {\n        return harvestSourceDTO;\n    }\n\n}\n"], "fixing_code": ["<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>eionet.cr</groupId>\n    <artifactId>cr3</artifactId>\n    <packaging>war</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <env>default</env>\n        <javaVersion>1.8</javaVersion>\n        <!-- TODO Replace with RDF4j and modernize -->\n        <sesame.openrdf.version>2.6.10</sesame.openrdf.version>\n        <checkstyle.config.location>${basedir}/docs/checkstyle.xml</checkstyle.config.location>\n        <spring.version>4.3.24.RELEASE</spring.version>\n    </properties>\n\n    <version>1.0-SNAPSHOT</version>\n    <name>cr3</name>\n    <url>http://maven.apache.org</url>\n         \n    <!-- configuration of Maven repositories to be used -->\n    <repositories>\n        <repository>\n            <id>archiva.internal</id>\n            <name>Internal Release Repository</name>\n            <url>http://archiva.eionet.europa.eu/repository/internal/</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>archiva.snapshots</id>\n            <name>Internal Snapshot Repository</name>\n            <url>http://archiva.eionet.europa.eu/repository/snapshots/</url>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n        <!--For unpublished Virtuoso 4.2.fix -->\n        <repository>\n            <id>project-local</id>\n            <name>project-local repository</name>\n            <layout>default</layout>\n            <url>file:///${basedir}/lib</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n\n    <distributionManagement>\n        <repository>\n            <id>archiva.internal</id>\n            <name>Internal Release Repository</name>\n            <url>http://archiva.eionet.europa.eu/repository/internal/</url>\n        </repository>\n        <snapshotRepository>\n            <id>archiva.snapshots</id>\n            <name>Internal Snapshot Repository</name>\n            <url>http://archiva.eionet.europa.eu/repository/snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n\n    <profiles>\n      <profile>\n        <id>docker</id>\n        <activation>\n          <activeByDefault>true</activeByDefault>\n        </activation>\n        <properties>\n          <valid.images>virtuoso, httpd</valid.images>\n        </properties>\n      </profile>\n      <profile>\n        <id>local</id>\n        <properties>\n          <tests.virtuoso.host>localhost</tests.virtuoso.host>\n          <valid.images>none</valid.images>\n        </properties>\n      </profile>\n    </profiles>\n\n    <!-- the build configuration -->\n    <build>\n        <plugins>\n\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>properties-maven-plugin</artifactId>\n                <version>1.0.0</version>\n                <executions>\n                    <execution>\n                        <phase>initialize</phase>\n                        <goals>\n                            <goal>read-project-properties</goal>\n                        </goals>\n                        <configuration>\n                            <files>\n                                <file>tests.properties</file>\n                            </files>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!-- maven-compiler-plugin -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.6.1</version>\n                <inherited>true</inherited>\n                <configuration>\n                    <verbose>false</verbose>\n                    <fork>false</fork>\n                    <compilerVersion>${javaVersion}</compilerVersion>\n                    <source>${javaVersion}</source>\n                    <target>${javaVersion}</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n\n            <!-- maven-surefire-plugin -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.20</version>\n                <configuration>\n                    <excludes>\n                        <exclude>**/*.java</exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-failsafe-plugin</artifactId>\n                <version>2.20</version>\n                <configuration>\n                    <reportFormat>xml</reportFormat>\n                    <systemPropertyVariables>\n                        <tests.virtuoso.host>${tests.virtuoso.host}</tests.virtuoso.host>\n                        <tests.virtuoso.port>${tests.virtuoso.port}</tests.virtuoso.port>\n                        <tests.httpd.host>${tests.httpd.host}</tests.httpd.host>\n                        <tests.httpd.port>${tests.httpd.port}</tests.httpd.port>\n                    </systemPropertyVariables>\n                    <includes>\n                        <include>**/*.java</include>\n                    </includes>\n                    <argLine>${itCoverAgent}</argLine>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>integration-test</goal>\n                            <goal>verify</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!-- maven-war-plugin -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-war-plugin</artifactId>\n                <version>3.1.0</version>\n                <configuration>\n                    <filters>\n                        <filter>${basedir}/${env}.properties</filter>\n                    </filters>\n                    <webResources>\n                        <resource>\n                            <directory>${basedir}/src/main/webapp/WEB-INF</directory>\n                            <filtering>true</filtering>\n                            <targetPath>WEB-INF</targetPath>\n                            <includes>\n                                <include>web.xml</include>\n                            </includes>\n                        </resource>\n                        <resource>\n                            <directory>${basedir}/src/main/webapp/pages/common</directory>\n                            <filtering>true</filtering>\n                            <targetPath>pages/common</targetPath>\n                        </resource>\n                    </webResources>\n                </configuration>\n            </plugin>\n\n            <!-- Run Ant for various preparation tasks, declared in build.xml -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-antrun-plugin</artifactId>\n                <version>1.8</version>\n                <executions>\n                    <execution>\n                        <id>copy-local-properties</id>\n                        <phase>prepare-package</phase>\n                        <goals>\n                            <goal>run</goal>\n                        </goals>\n                        <configuration>\n                            <tasks>\n                                <copy todir=\"${project.build.directory}/classes/acl\">\n                                    <fileset dir=\"${basedir}/acl\" />\n                                </copy>\n                                <copy file=\"${basedir}/${env}.properties\"\n                                      toFile=\"${project.build.directory}/classes/env.properties\" />\n                                <copy todir=\"${project.build.directory}/classes/sql\">\n                                    <fileset dir=\"sql\" />\n                                </copy>\n                                <mkdir dir=\"${config.app.home}/tmp\"/>\n                                <pathconvert property=\"apphome.unix\" targetos=\"unix\">\n                                    <path location=\"${config.app.home}\"/>\n                                    <map from=\"C:\" to=\"\"/>\n                                    <map from=\"D:\" to=\"\"/>\n                                    <map from=\"E:\" to=\"\"/>\n                                    <map from=\"F:\" to=\"\"/>\n                                </pathconvert>\n                                <pathconvert property=\"apphome.windows\" targetos=\"unix\">\n                                    <path location=\"${config.app.home}\"/>\n                                </pathconvert>\n                                <echo>apphome.unix = ${apphome.unix}</echo>\n                                <echo>apphome.windows = ${apphome.windows}</echo>\n                            </tasks>\n                            <exportAntProperties>true</exportAntProperties>\n                        </configuration>\n                    </execution>\n                    <execution>\n                        <id>pre-test</id>\n                        <phase>process-test-resources</phase>\n                        <goals>\n                            <goal>run</goal>\n                        </goals>\n                        <configuration>\n                            <tasks>\n                                <copy file=\"${basedir}/tests.properties\"\n                                      toFile=\"${project.build.directory}/test-classes/env.properties\" />\n                                <copy todir=\"${project.build.directory}/test-classes/sql\">\n                                    <fileset dir=\"sql\" />\n                                </copy>\n                                <copy todir=\"${project.build.directory}/test-classes/acl\">\n                                    <fileset dir=\"acl\" />\n                                </copy>\n                            </tasks>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>io.fabric8</groupId>\n                <artifactId>docker-maven-plugin</artifactId>\n                <version>0.26.1</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <filter>${valid.images}</filter>\n                    <images>\n\n                        <image>\n                            <alias>virtuoso-cr-jenkins</alias>\n                            <name>virtuoso</name>\n\n                            <build>\n                                <from>openlink/virtuoso-opensource-7:7.2.6-r1-g0a3336c</from>\n                                <assembly>\n                                    <descriptor>assembly-virtuoso-unittest.xml</descriptor>\n                                </assembly>\n                            </build>\n\n                            <run>\n                                <env>\n                                    <DBA_PASSWORD>dba</DBA_PASSWORD>\n                                    <VIRT_Parameters_TimezonelessDatetimes>0</VIRT_Parameters_TimezonelessDatetimes>\n                                    <VIRT_Parameters_DirsAllowed>., ../vad, /usr/share/proj, /var/tmp, /tmp, ${config.app.home}/tmp</VIRT_Parameters_DirsAllowed>\n                                </env>\n                                <ports>\n                                    <port>8891:8890</port>\n                                    <port>${tests.virtuoso.port}:1111</port>\n                                </ports>\n                                <wait>\n                                    <log>Server online at</log>\n                                    <time>60000</time>\n                                    <exec>\n                                        <postStart>isql localhost:1111 dba dba /maven/1_create_testuser.sql</postStart>\n                                    </exec>\n                                </wait>\n                                <volumes>\n                                    <bind>\n                                        <volume>${config.docker.sharedVolume}/tmp:${config.app.home}/tmp</volume>\n                                    </bind>\n                                </volumes>\n                            </run>\n                        </image>\n\n                        <image>\n                            <alias>httpd-cr-jenkins</alias>\n                            <name>httpd</name>\n\n                            <build>\n                                <from>httpd:2.4</from>\n                                <assembly>\n                                    <descriptor>assembly-httpd-unittest.xml</descriptor>\n                                </assembly>\n                            </build>\n\n                            <run>\n                                <links>\n                                    <link>virtuoso</link>\n                                </links>\n                                <ports>\n                                    <port>${tests.httpd.port}:80</port>\n                                </ports>\n                                <wait>\n                                    <!-- Check for this URL to return a 200 return code .... -->\n                                    <url>http://${tests.httpd.host}:${tests.httpd.port}/</url>\n                                    <!-- ... but at max 2 minutes -->\n                                    <time>120000</time>\n                                    <exec>\n                                        <postStart>/maven/move-test-files.sh</postStart>\n                                    </exec>\n                                </wait>\n                            </run>\n                        </image>\n\n                    </images>\n\n                </configuration>\n                <executions>\n                    <execution>\n                        <configuration>\n                            <skip>${maven.test.skip}</skip>\n                        </configuration>\n                        <id>start</id>\n                        <phase>pre-integration-test</phase>\n                        <goals>\n                            <goal>stop</goal>\n                            <goal>build</goal>\n                            <goal>start</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <configuration>\n                            <skip>${maven.test.skip}</skip>\n                        </configuration>\n                        <id>stop</id>\n                        <phase>post-integration-test</phase>\n                        <goals>\n                            <goal>stop</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>0.8.7</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                        <configuration>\n                            <propertyName>itCoverAgent</propertyName>\n                        </configuration>\n                    </execution>\n                    <!-- attached to Maven verify phase -->\n                    <execution>\n                        <id>report</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                        <configuration>\n                            <includes>\n                                <include>eionet/cr/**/*.class</include>\n                            </includes>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>com.github.spotbugs</groupId>\n                <artifactId>spotbugs-maven-plugin</artifactId>\n                <version>4.2.3</version>\n            </plugin>\n        </plugins>\n        <!-- name of the bundled project when it is finally built -->\n        <finalName>cr</finalName>\n\n    </build>\n\n    <!-- dependencies -->\n\n    <dependencies>\n        <dependency>\n            <groupId>net.sf.ehcache</groupId>\n            <artifactId>ehcache-core</artifactId>\n            <version>2.5.2</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.activation</groupId>\n            <artifactId>activation</artifactId>\n            <version>1.1</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.mail</groupId>\n            <artifactId>mail</artifactId>\n            <version>1.4.1</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.6</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-fileupload</groupId>\n            <artifactId>commons-fileupload</artifactId>\n            <version>1.4</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-collections</groupId>\n            <artifactId>commons-collections</artifactId>\n            <version>3.2</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-io</groupId>\n            <artifactId>commons-io</artifactId>\n            <version>2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-validator</groupId>\n            <artifactId>commons-validator</artifactId>\n            <version>1.4.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-pool2</artifactId>\n            <version>2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-dbcp2</artifactId>\n            <version>2.5.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-compress</artifactId>\n            <version>1.19</version>\n        </dependency>\n        <dependency>\n            <groupId>net.sourceforge.stripes</groupId>\n            <artifactId>stripes</artifactId>\n            <version>1.5.8</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>3.1.0</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n            <version>1.1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jsp-api</artifactId>\n            <version>2.0</version>\n            <scope>provided</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>javax.servlet</groupId>\n                    <artifactId>servlet-api</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>cas</groupId>\n            <artifactId>casclient</artifactId>\n            <version>2.1.1</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>javax.servlet</groupId>\n                    <artifactId>servlet-api</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>taglibs</groupId>\n            <artifactId>standard</artifactId>\n            <version>1.1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.hp.hpl.jena</groupId>\n            <artifactId>jena</artifactId>\n            <version>2.6.4</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>xerces</groupId>\n            <artifactId>xercesImpl</artifactId>\n            <version>2.11.0</version>\n        </dependency>\n        <dependency>\n            <groupId>displaytag</groupId>\n            <artifactId>displaytag</artifactId>\n            <version>1.2</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>jcl104-over-slf4j</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <!-- Eionet dependencies -->\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>documentation.core</artifactId>\n            <version>2.0-SNAPSHOT</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>documentation.extensions.stripes</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>acl</artifactId>\n            <version>4.0-SNAPSHOT</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>rpcserver</artifactId>\n            <version>2.0</version>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>eionet-dir</artifactId>\n            <version>2.5</version>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ws.commons.util</groupId>\n            <artifactId>ws-commons-util</artifactId>\n            <version>1.0.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.quartz-scheduler</groupId>\n            <artifactId>quartz</artifactId>\n            <version>1.7.3</version>\n        </dependency>\n        <dependency>\n            <groupId>javax.transaction</groupId>\n            <artifactId>jta</artifactId>\n            <version>1.0.1B</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-lang</groupId>\n            <artifactId>commons-lang</artifactId>\n            <version>2.4</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-beanutils</groupId>\n            <artifactId>commons-beanutils</artifactId>\n            <version>1.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi</artifactId>\n            <version>3.5-FINAL</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.simpleframework</groupId>\n            <artifactId>simple-xml</artifactId>\n            <version>2.1.3</version>\n        </dependency>\n        <dependency>\n            <groupId>net.sf.json-lib</groupId>\n            <artifactId>json-lib</artifactId>\n            <version>2.3</version>\n            <type>jar</type>\n            <classifier>jdk15</classifier>\n        </dependency>\n\n\n        <!-- Logging dependencies -->\n        <dependency>\n            <groupId>io.sentry</groupId>\n            <artifactId>sentry-log4j2</artifactId>\n            <version>1.7.23</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.17.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n            <version>2.17.1</version>\n        </dependency>\n        <!--The Log4j 2 SLF4J Binding allows applications coded to the SLF4J API to use Log4j 2 as the implementation.-->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n            <version>2.17.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n        <!-- Intercepts logging from log4j and redirects it to slf4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n        <!-- Intercepts logging from apache commons logging and redirects it to slf4j -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n        <!--GELF-->\n        <dependency>\n            <groupId>biz.paluch.logging</groupId>\n            <artifactId>logstash-gelf</artifactId>\n            <version>1.11.2</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n            <version>4.5.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpmime</artifactId>\n            <version>4.5.3</version>\n        </dependency>\n        <dependency>\n            <groupId>xalan</groupId>\n            <artifactId>xalan</artifactId>\n            <version>2.7.0</version>\n            <scope>runtime</scope>\n        </dependency>\n\n        <!-- start org.openrdf.sesame dependencies -->\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-util</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-api</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-binary</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-n3</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-ntriples</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-rdfxml</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-trix</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-turtle</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-rio-trig</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-repository-api</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryresultio-api</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryresultio-text</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryparser-api</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryparser-sparql</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryalgebra-evaluation</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrdf.sesame</groupId>\n            <artifactId>sesame-queryalgebra-model</artifactId>\n            <version>${sesame.openrdf.version}</version>\n        </dependency>\n\n        <!-- end org.openrdf.sesame dependencies -->\n        <dependency>\n            <groupId>virtuoso</groupId>\n            <artifactId>virt-sesame</artifactId>\n            <version>2.7.3</version>\n        </dependency>\n        <dependency>\n            <groupId>virtuoso</groupId>\n            <artifactId>virtjdbc</artifactId>\n            <version>4.2.fix</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-httpclient</groupId>\n            <artifactId>commons-httpclient</artifactId>\n            <version>3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>nl.bitwalker</groupId>\n            <artifactId>UserAgentUtils</artifactId>\n            <version>1.2.4</version>\n        </dependency>\n        <dependency>\n            <groupId>net.sf.opencsv</groupId>\n            <artifactId>opencsv</artifactId>\n            <version>2.0</version>\n        </dependency>\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>eea-template</artifactId>\n            <version>3.0</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>javax.servlet</groupId>\n                    <artifactId>servlet-api</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>rome</groupId>\n            <artifactId>rome</artifactId>\n            <version>1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>net.htmlparser.jericho</groupId>\n            <artifactId>jericho-html</artifactId>\n            <version>3.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.healthmarketscience.jackcess</groupId>\n            <artifactId>jackcess</artifactId>\n            <version>1.2.9</version>\n        </dependency>\n        <!-- JWT Lib -->\n        <dependency>\n            <groupId>com.auth0</groupId>\n            <artifactId>java-jwt</artifactId>\n            <version>2.1.0</version>\n        </dependency>\n\n        <!-- Ant -->\n\n        <dependency>\n            <groupId>org.apache.ant</groupId>\n            <artifactId>ant</artifactId>\n            <version>1.9.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.ant</groupId>\n            <artifactId>ant-apache-log4j</artifactId>\n            <version>1.9.3</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.slf4j</groupId>\n                    <artifactId>slf4j-log4j12</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>log4j</groupId>\n                    <artifactId>log4j</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <!-- Liquibase -->\n        <!-- TODO Upgrade to 3.5.3+ asap -->\n        <dependency>\n            <groupId>org.liquibase</groupId>\n            <artifactId>liquibase-core</artifactId>\n            <version>3.0.6</version>\n        </dependency>\n\n        <!-- TEST dependencies -->\n\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.sonarsource.scanner.maven</groupId>\n            <artifactId>sonar-maven-plugin</artifactId>\n            <version>3.9.1.2184</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.dbunit</groupId>\n            <artifactId>dbunit</artifactId>\n            <version>2.5.3</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-server</artifactId>\n            <version>9.4.19.v20190610</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-util</artifactId>\n            <version>9.4.19.v20190610</version>\n            <scope>test</scope>\n        </dependency>\n\n        <!-- Spring framework dependencies -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-web</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-jdbc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>${spring.version}</version>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.samaxes.stripes</groupId>\n            <artifactId>stripesafe</artifactId>\n            <version>1.0.1</version>\n        </dependency>\n\n        <!-- PropertyPlaceholderConfigurer -->\n        <dependency>\n            <groupId>eionet</groupId>\n            <artifactId>property-placeholder-resolver</artifactId>\n            <version>1.0</version>\n            <type>jar</type>\n        </dependency>\n\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>3.11.2</version>\n            <scope>test</scope>\n        </dependency>\n\n    </dependencies>\n    <reporting>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-pmd-plugin</artifactId>\n                <version>3.14.0</version>\n                <configuration>\n                    <linkXRef>false</linkXRef>\n                    <sourceEncoding>utf-8</sourceEncoding>\n                    <minimumTokens>300</minimumTokens>\n                    <targetJdk>${javaVersion}</targetJdk>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n                <version>3.1.2</version>\n                <configuration>\n                    <configLocation>${checkstyle.config.location}</configLocation>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jxr-plugin</artifactId>\n                <version>2.5</version>\n            </plugin>\n        </plugins>\n    </reporting>\n\n</project>\n", "/*\n * The contents of this file are subject to the Mozilla Public\n * License Version 1.1 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS\n * IS\" basis, WITHOUT WARRANTY OF ANY KIND, either express or\n * implied. See the License for the specific language governing\n * rights and limitations under the License.\n *\n * The Original Code is Content Registry 2.0.\n *\n * The Initial Owner of the Original Code is European Environment\n * Agency.  Portions created by Tieto Estonia are Copyright\n * (C) European Environment Agency.  All Rights Reserved.\n *\n * Contributor(s):\n * Enriko K\u00e4sper, Tieto Estonia\n */\npackage eionet.cr.web.action;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport net.sourceforge.stripes.action.DefaultHandler;\nimport net.sourceforge.stripes.action.ForwardResolution;\nimport net.sourceforge.stripes.action.Resolution;\nimport net.sourceforge.stripes.action.UrlBinding;\nimport eionet.cr.common.Predicates;\nimport eionet.cr.config.GeneralConfig;\nimport eionet.cr.dao.DAOException;\nimport eionet.cr.dao.DAOFactory;\nimport eionet.cr.dao.SearchDAO;\nimport eionet.cr.dto.SearchResultDTO;\nimport eionet.cr.dto.SubjectDTO;\nimport eionet.cr.dto.TagDTO;\nimport eionet.cr.util.SortOrder;\nimport eionet.cr.util.SortingRequest;\nimport eionet.cr.util.pagination.PagingRequest;\nimport eionet.cr.web.util.ApplicationCache;\nimport eionet.cr.web.util.columns.SearchResultColumn;\nimport eionet.cr.web.util.columns.SubjectPredicateColumn;\nimport org.apache.commons.lang.StringEscapeUtils;\n\n/**\n *\n * @author <a href=\"mailto:enriko.kasper@tieto.com\">Enriko K\u00e4sper</a>\n *\n */\n\n@UrlBinding(\"/tagSearch.action\")\npublic class TagSearchActionBean extends AbstractSearchActionBean<SubjectDTO> {\n\n    /** */\n    private static final String TAG_SEARCH_PATH = \"/pages/tagSearch.jsp\";\n    private static final String SELECTED_TAGS_CACHE = TypeSearchActionBean.class.getName() + \".selectedTagsCache\";\n\n    /** */\n    private List<TagDTO> tagCloud;\n    private String cloudSorted = \"name\";\n    private String searchTag;\n    private String queryString;\n\n    // selected tags\n    private List<String> selectedTags;\n    // columns\n    private static final ArrayList<SearchResultColumn> columns;\n\n    private int tagCloudSize = Integer.parseInt(GeneralConfig.getProperty(GeneralConfig.TAGCOLUD_TAGSEARCH_SIZE));\n\n    static {\n        columns = new ArrayList<SearchResultColumn>();\n\n        SubjectPredicateColumn col = new SubjectPredicateColumn();\n        col.setPredicateUri(Predicates.RDF_TYPE);\n        col.setTitle(\"Type\");\n        col.setSortable(true);\n        columns.add(col);\n\n        col = new SubjectPredicateColumn();\n        col.setPredicateUri(Predicates.RDFS_LABEL);\n        col.setTitle(\"Label\");\n        col.setSortable(true);\n        columns.add(col);\n\n        col = new SubjectPredicateColumn();\n        col.setPredicateUri(Predicates.CR_TAG);\n        col.setTitle(\"Tags\");\n        col.setSortable(false);\n        columns.add(col);\n    }\n\n    /**\n     * @return\n     * @throws Exception\n     */\n    @DefaultHandler\n    public Resolution preparePage() throws Exception {\n        tagCloud = ApplicationCache.getTagCloudSortedByName(tagCloudSize);\n        return new ForwardResolution(TAG_SEARCH_PATH);\n    }\n\n    public Resolution sortByName() throws Exception {\n        tagCloud = ApplicationCache.getTagCloudSortedByName(tagCloudSize);\n        cloudSorted = \"name\";\n        return new ForwardResolution(TAG_SEARCH_PATH);\n    }\n\n    public Resolution sortByCount() throws Exception {\n        tagCloud = ApplicationCache.getTagCloudSortedByCount(tagCloudSize);\n        cloudSorted = \"count\";\n        return new ForwardResolution(TAG_SEARCH_PATH);\n    }\n\n    @Override\n    public Resolution search() throws DAOException {\n\n        if ((searchTag == null || searchTag.isEmpty()) && (selectedTags == null || selectedTags.isEmpty())) {\n            return new ForwardResolution(TAG_SEARCH_PATH);\n        }\n        if (selectedTags == null) {\n            selectedTags = new LinkedList<String>();\n        }\n\n        if (!selectedTags.contains(searchTag) && searchTag != null && !searchTag.isEmpty()) {\n            selectedTags.add(getSearchTag().trim());\n        }\n\n        SearchResultDTO<SubjectDTO> searchResult =\n                DAOFactory\n                        .get()\n                        .getDao(SearchDAO.class)\n                        .searchByTags(selectedTags, PagingRequest.create(getPageN()),\n                                new SortingRequest(getSortP(), SortOrder.parse(getSortO())));\n        resultList = searchResult.getItems();\n        matchCount = searchResult.getMatchCount();\n        queryString = searchResult.getQuery();\n        this.getContext().getRequest().setAttribute(\"searchTag\", \"\");\n\n        getSession().setAttribute(SELECTED_TAGS_CACHE, selectedTags);\n\n        return new ForwardResolution(TAG_SEARCH_PATH).addParameter(\"searchTag\", \"\");\n    }\n\n    /*\n     * reads the selected tag list from session\n     */\n    @SuppressWarnings(\"unchecked\")\n    public Resolution addTag() throws DAOException {\n        selectedTags = (List<String>) getSession().getAttribute(SELECTED_TAGS_CACHE);\n\n        return search();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Resolution removeTag() throws Exception {\n        selectedTags = (List<String>) getSession().getAttribute(SELECTED_TAGS_CACHE);\n        if (selectedTags != null && !selectedTags.isEmpty()) {\n            selectedTags.remove(searchTag);\n        }\n        searchTag = \"\";\n\n        Resolution result = null;\n        if (selectedTags.size() == 0) {\n            result = preparePage();\n        } else {\n            result = search();\n        }\n        if (result instanceof ForwardResolution) {\n            ((ForwardResolution) result).addParameter(\"searchTag\", \"\");\n        }\n        return result;\n    }\n\n    public List<TagDTO> getTagCloud() {\n        return tagCloud;\n    }\n\n    public void setTagCloud(List<TagDTO> tagCloud) {\n        this.tagCloud = tagCloud;\n    }\n\n    public String getCloudSorted() {\n        return cloudSorted;\n    }\n\n    public String getSearchTag() {\n        return searchTag;\n    }\n\n    public void setSearchTag(String searchTag) {\n\n        this.searchTag = StringEscapeUtils.escapeHtml(searchTag);\n    }\n\n    public List<String> getSelectedTags() {\n        return selectedTags;\n    }\n\n    public void setSelectedTags(List<String> selectedTags) {\n        this.selectedTags = selectedTags;\n    }\n\n    @Override\n    public List<SearchResultColumn> getColumns() throws DAOException {\n        return columns;\n    }\n\n    /**\n     * @return the queryString\n     */\n    public String getQueryString() {\n        return queryString;\n    }\n\n}\n", "/*\n * The contents of this file are subject to the Mozilla Public\n * License Version 1.1 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of\n * the License at http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS\n * IS\" basis, WITHOUT WARRANTY OF ANY KIND, either express or\n * implied. See the License for the specific language governing\n * rights and limitations under the License.\n *\n * The Original Code is Content Registry 2.0.\n *\n * The Initial Owner of the Original Code is European Environment\n * Agency.  Portions created by Tieto Eesti are Copyright\n * (C) European Environment Agency.  All Rights Reserved.\n *\n * Contributor(s):\n * Jaanus Heinlaid, Tieto Eesti\n */\npackage eionet.cr.web.action.factsheet;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\n\nimport net.sourceforge.stripes.action.DefaultHandler;\nimport net.sourceforge.stripes.action.ForwardResolution;\nimport net.sourceforge.stripes.action.HandlesEvent;\nimport net.sourceforge.stripes.action.RedirectResolution;\nimport net.sourceforge.stripes.action.Resolution;\nimport net.sourceforge.stripes.action.StreamingResolution;\nimport net.sourceforge.stripes.action.UrlBinding;\nimport net.sourceforge.stripes.validation.SimpleError;\nimport net.sourceforge.stripes.validation.ValidationMethod;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang.math.NumberUtils;\n\nimport eionet.cr.common.Predicates;\nimport eionet.cr.common.Subjects;\nimport eionet.cr.config.GeneralConfig;\nimport eionet.cr.dao.CompiledDatasetDAO;\nimport eionet.cr.dao.DAOException;\nimport eionet.cr.dao.DAOFactory;\nimport eionet.cr.dao.HarvestSourceDAO;\nimport eionet.cr.dao.HelperDAO;\nimport eionet.cr.dao.SpoBinaryDAO;\nimport eionet.cr.dao.util.UriLabelPair;\nimport eionet.cr.dao.virtuoso.PredicateObjectsReader;\nimport eionet.cr.dataset.CurrentLoadedDatasets;\nimport eionet.cr.dto.DatasetDTO;\nimport eionet.cr.dto.FactsheetDTO;\nimport eionet.cr.dto.HarvestSourceDTO;\nimport eionet.cr.dto.ObjectDTO;\nimport eionet.cr.dto.SubjectDTO;\nimport eionet.cr.dto.TripleDTO;\nimport eionet.cr.harvest.CurrentHarvests;\nimport eionet.cr.harvest.HarvestException;\nimport eionet.cr.harvest.OnDemandHarvester;\nimport eionet.cr.harvest.scheduled.UrgentHarvestQueue;\nimport eionet.cr.harvest.util.CsvImportUtil;\nimport eionet.cr.util.Pair;\nimport eionet.cr.util.URLUtil;\nimport eionet.cr.util.Util;\nimport eionet.cr.web.action.AbstractActionBean;\nimport eionet.cr.web.action.source.ViewSourceActionBean;\nimport eionet.cr.web.util.ApplicationCache;\nimport eionet.cr.web.util.tabs.FactsheetTabMenuHelper;\nimport eionet.cr.web.util.tabs.TabElement;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Factsheet.\n *\n * @author <a href=\"mailto:jaanus.heinlaid@tietoenator.com\">Jaanus Heinlaid</a>\n *\n */\n@UrlBinding(\"/factsheet.action\")\npublic class FactsheetActionBean extends AbstractActionBean {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(FactsheetActionBean.class);\n\n    /** Prefix for the name of the \"which page of predicate values to display\" request parameter. */\n    public static final String PAGE_PARAM_PREFIX = \"page\";\n\n    /** Name for session attributes for addible properties. */\n    private static final String ADDIBLE_PROPERTIES_SESSION_ATTR = FactsheetActionBean.class.getName() + \".addibleProperties\";\n\n    /** URI by which the factsheet has been requested. */\n    private String uri;\n\n    /** URI hash by which the factsheet has been requested. Ignored when factsheet requested by URI. */\n    private long uriHash;\n\n    /** The subject data object found by the requestd URI or URI hash. */\n    private FactsheetDTO subject;\n\n    /** Used in factsheet edit mode only, where it indicates if the subject is anonymous. */\n    private boolean anonymous;\n\n    /** */\n    private String propertyUri;\n    /** */\n    private String propertyValue;\n\n    /** List of identifiers of property-value rows submitted from factsheet edit form. */\n    private List<String> rowId;\n\n    /** True if the session bears a user and it happens to be an administrator. Otherwise false. */\n    private boolean adminLoggedIn;\n\n    /** True if the found subject is a bookmark of the logged-in user. In all other cases false. */\n    private Boolean subjectIsUserBookmark;\n\n    /** True if the found subject has downloadable content in filestore. */\n    private Boolean subjectDownloadable;\n\n    /** True, if URI is harvest source. */\n    private boolean uriIsHarvestSource;\n\n    /** True, if URI is local folder. */\n    private boolean uriIsFolder;\n\n    /** */\n    private String bookmarkLabel;\n\n    /** */\n    private Map<String, Integer> predicatePageNumbers;\n    private Map<String, Integer> predicatePageCounts;\n\n    /** */\n    private List<TabElement> tabs;\n\n    /** */\n    private Boolean subjectIsType = null;\n\n    /** */\n    private String predicateUri;\n    private String objectMD5;\n    private String graphUri;\n\n    /** */\n    private List<DatasetDTO> userCompiledDatasets;\n\n    /** */\n    private HarvestSourceDTO harvestSourceDTO;\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails\n     */\n    @DefaultHandler\n    public Resolution view() throws DAOException {\n\n        if (isNoCriteria()) {\n            addCautionMessage(\"No request criteria specified!\");\n        } else {\n            HelperDAO helperDAO = DAOFactory.get().getDao(HelperDAO.class);\n\n            adminLoggedIn = getUser() != null && getUser().isAdministrator();\n\n            subject = helperDAO.getFactsheet(uri, null, getPredicatePageNumbers());\n\n            FactsheetTabMenuHelper tabsHelper = new FactsheetTabMenuHelper(uri, subject, factory.getDao(HarvestSourceDAO.class));\n\n            tabs = tabsHelper.getTabs(FactsheetTabMenuHelper.TabTitle.RESOURCE_PROPERTIES);\n            uriIsHarvestSource = tabsHelper.isUriIsHarvestSource();\n            uriIsFolder = tabsHelper.isUriFolder();\n            harvestSourceDTO = tabsHelper.getHarvestSourceDTO();\n        }\n\n        return new ForwardResolution(\"/pages/factsheet/factsheet.jsp\");\n    }\n\n    /**\n     * Schedules a harvest for resource.\n     *\n     * @return view resolution\n     * @throws HarvestException\n     *             if harvesting fails\n     * @throws DAOException\n     *             if query fails\n     */\n    public Resolution harvest() throws HarvestException, DAOException {\n\n        HelperDAO helperDAO = DAOFactory.get().getDao(HelperDAO.class);\n        SubjectDTO subjectDTO = helperDAO.getSubject(uri);\n\n        if (subjectDTO != null && CsvImportUtil.isSourceTableFile(subjectDTO)) {\n\n            // Special block for harvesting table files.\n            try {\n                List<String> warnings = CsvImportUtil.harvestTableFile(subjectDTO, getUserName());\n                for (String msg : warnings) {\n                    addWarningMessage(msg);\n                }\n                addSystemMessage(\"Source successfully harvested!\");\n            } catch (Exception e) {\n                LOGGER.error(\"Failed to harvest table file\", e);\n                addWarningMessage(\"Failed to harvest table file: \" + e.getMessage());\n            }\n        } else {\n\n            // Block for harvesting other, i.e. non-table-file sources.\n            Pair<Boolean, String> message = harvestNow();\n            if (message.getLeft()) {\n                addWarningMessage(message.getRight());\n            } else {\n                addSystemMessage(message.getRight());\n            }\n        }\n\n        return new RedirectResolution(this.getClass(), \"view\").addParameter(\"uri\", uri);\n    }\n\n    /**\n     * helper method to eliminate code duplication.\n     *\n     * @return Pair<Boolean, String> feedback messages\n     * @throws HarvestException\n     *             if harvesting fails\n     * @throws DAOException\n     *             if query fails\n     */\n    private Pair<Boolean, String> harvestNow() throws HarvestException, DAOException {\n\n        String message = null;\n        if (isUserLoggedIn()) {\n            if (!StringUtils.isBlank(uri) && URLUtil.isURL(uri)) {\n\n                // Add this URL into HARVEST_SOURCE table.\n\n                HarvestSourceDAO dao = factory.getDao(HarvestSourceDAO.class);\n                HarvestSourceDTO dto = new HarvestSourceDTO();\n                dto.setUrl(StringUtils.substringBefore(uri, \"#\"));\n                dto.setEmails(\"\");\n                dto.setIntervalMinutes(GeneralConfig.getDefaultHarvestIntervalMinutes());\n                dto.setPrioritySource(false);\n                dto.setOwner(null);\n                dao.addSourceIgnoreDuplicate(dto);\n\n                // Issue an instant harvest of this URL.\n\n                OnDemandHarvester.Resolution resolution = OnDemandHarvester.harvest(dto.getUrl(), getUserName());\n\n                // Give feedback to the user.\n\n                if (resolution.equals(OnDemandHarvester.Resolution.ALREADY_HARVESTING)) {\n                    message = \"The resource is currently being harvested by another user or background harvester!\";\n                } else if (resolution.equals(OnDemandHarvester.Resolution.UNCOMPLETE)) {\n                    message = \"The harvest hasn't finished yet, but continues in the background!\";\n                } else if (resolution.equals(OnDemandHarvester.Resolution.COMPLETE)) {\n                    message = \"The harvest has been completed!\";\n                } else if (resolution.equals(OnDemandHarvester.Resolution.SOURCE_UNAVAILABLE)) {\n                    message = \"The resource was not available!\";\n                } else if (resolution.equals(OnDemandHarvester.Resolution.NO_STRUCTURED_DATA)) {\n                    message = \"The resource contained no RDF data!\";\n                } else {\n                    message = \"No feedback given from harvest!\";\n                }\n            }\n            return new Pair<Boolean, String>(false, message);\n        } else {\n            return new Pair<Boolean, String>(true, getBundle().getString(\"not.logged.in\"));\n        }\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails if query fails\n     */\n    public Resolution edit() throws DAOException {\n\n        return view();\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails if query fails\n     */\n    public Resolution addbookmark() throws DAOException {\n        if (isUserLoggedIn()) {\n            DAOFactory.get().getDao(HelperDAO.class).addUserBookmark(getUser(), getUrl(), bookmarkLabel);\n            addSystemMessage(\"Succesfully bookmarked this source.\");\n        } else {\n            addSystemMessage(\"Only logged in users can bookmark sources.\");\n        }\n        return view();\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails\n     */\n    public Resolution removebookmark() throws DAOException {\n        if (isUserLoggedIn()) {\n            DAOFactory.get().getDao(HelperDAO.class).deleteUserBookmark(getUser(), getUrl());\n            addSystemMessage(\"Succesfully removed this source from bookmarks.\");\n        } else {\n            addSystemMessage(\"Only logged in users can remove bookmarks.\");\n        }\n        return view();\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails if query fails\n     */\n    public Resolution save() throws DAOException {\n\n        SubjectDTO subjectDTO = new SubjectDTO(uri, anonymous);\n\n        if (propertyUri.equals(Predicates.CR_TAG)) {\n            List<String> tags = Util.splitStringBySpacesExpectBetweenQuotes(propertyValue);\n\n            for (String tag : tags) {\n                ObjectDTO objectDTO = new ObjectDTO(tag, true);\n                objectDTO.setSourceUri(getUser().getRegistrationsUri());\n                subjectDTO.addObject(propertyUri, objectDTO);\n            }\n        } else {\n            // other properties\n            ObjectDTO objectDTO = new ObjectDTO(propertyValue, true);\n            objectDTO.setSourceUri(getUser().getRegistrationsUri());\n            subjectDTO.addObject(propertyUri, objectDTO);\n        }\n\n        HelperDAO helperDao = factory.getDao(HelperDAO.class);\n        helperDao.addTriples(subjectDTO);\n        helperDao.updateUserHistory(getUser(), uri);\n\n        // since user registrations URI was used as triple source, add it to HARVEST_SOURCE too\n        // (but set interval minutes to 0, to avoid it being background-harvested)\n        DAOFactory\n                .get()\n                .getDao(HarvestSourceDAO.class)\n                .addSourceIgnoreDuplicate(\n                        HarvestSourceDTO.create(getUser().getRegistrationsUri(), true, 0, getUser().getUserName()));\n\n        return new RedirectResolution(this.getClass(), \"edit\").addParameter(\"uri\", uri);\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     *             if query fails\n     */\n    public Resolution delete() throws DAOException {\n\n        if (rowId != null && !rowId.isEmpty()) {\n\n            ArrayList<TripleDTO> triples = new ArrayList<TripleDTO>();\n\n            for (String row : rowId) {\n                int i = row.indexOf(\"_\");\n                if (i <= 0 || i == (row.length() - 1)) {\n                    throw new IllegalArgumentException(\"Illegal rowId: \" + row);\n                }\n\n                String predicateHash = row.substring(0, i);\n                String predicate = getContext().getRequestParameter(\"pred_\".concat(predicateHash));\n\n                String objectHash = row.substring(i + 1);\n                String objectValue = getContext().getRequest().getParameter(\"obj_\".concat(objectHash));\n                String sourceUri = getContext().getRequest().getParameter(\"source_\".concat(objectHash));\n\n                TripleDTO triple = new TripleDTO(uri, predicate, objectValue);\n                // FIXME - find a better way to determine if the object is literal or not, URIs may be literals also\n                triple.setLiteralObject(!URLUtil.isURL(objectValue));\n                triple.setSourceUri(sourceUri);\n\n                triples.add(triple);\n            }\n\n            HelperDAO helperDao = factory.getDao(HelperDAO.class);\n            helperDao.deleteTriples(triples);\n            helperDao.updateUserHistory(getUser(), uri);\n        }\n\n        return new RedirectResolution(this.getClass(), \"edit\").addParameter(\"uri\", uri);\n    }\n\n    /**\n     * Validates if user is logged on and if event property is not empty.\n     */\n    @ValidationMethod(on = {\"save\", \"delete\", \"edit\", \"harvest\"})\n    public void validateUserKnown() {\n\n        if (getUser() == null) {\n            addWarningMessage(\"Operation not allowed for anonymous users\");\n        } else if (getContext().getEventName().equals(\"save\") && StringUtils.isBlank(propertyValue)) {\n            addGlobalValidationError(new SimpleError(\"Property value must not be blank\"));\n        }\n    }\n\n    /**\n     * @return the resourceUri\n     */\n    public String getUri() {\n        return uri;\n    }\n\n    /**\n     * @param resourceUri\n     *            the resourceUri to set\n     */\n    public void setUri(final String resourceUri) {\n\n        this.uri = StringEscapeUtils.escapeHtml(resourceUri);;\n    }\n\n    /**\n     * @return the resource\n     */\n    public FactsheetDTO getSubject() {\n        return subject;\n    }\n\n    /**\n     * @return the addibleProperties\n     * @throws DAOException\n     *             if query fails\n     */\n    @SuppressWarnings(\"unchecked\")\n    public Collection<UriLabelPair> getAddibleProperties() throws DAOException {\n\n        // get the addible properties from session\n\n        HttpSession session = getContext().getRequest().getSession();\n        ArrayList<UriLabelPair> result = (ArrayList<UriLabelPair>) session.getAttribute(ADDIBLE_PROPERTIES_SESSION_ATTR);\n\n        // if not in session, create them and add to session\n        if (result == null || result.isEmpty()) {\n\n            // get addible properties from database\n\n            HelperDAO helperDAO = factory.getDao(HelperDAO.class);\n            HashMap<String, String> props = helperDAO.getAddibleProperties(uri);\n\n            // add some hard-coded properties, HashMap assures there won't be duplicates\n            props.put(Predicates.RDFS_LABEL, \"Title\");\n            props.put(Predicates.CR_TAG, \"Tag\");\n            props.put(Predicates.RDFS_COMMENT, \"Other comments\"); // Don't use\n            props.put(Predicates.DC_DESCRIPTION, \"Description\");\n            props.put(Predicates.CR_HAS_SOURCE, \"hasSource\");\n            props.put(Predicates.ROD_PRODUCT_OF, \"productOf\");\n\n            // create the result object from the found and hard-coded properties, sort it\n\n            result = new ArrayList<UriLabelPair>();\n            if (props != null && !props.isEmpty()) {\n\n                for (String propUri : props.keySet()) {\n                    result.add(UriLabelPair.create(propUri, props.get(propUri)));\n                }\n                Collections.sort(result);\n            }\n\n            // put into session\n            session.setAttribute(ADDIBLE_PROPERTIES_SESSION_ATTR, result);\n        }\n\n        return result;\n    }\n\n    /**\n     * @param anonymous\n     *            the anonymous to set\n     */\n    public void setAnonymous(final boolean anonymous) {\n        this.anonymous = anonymous;\n    }\n\n    /**\n     * @param propertyUri\n     *            the propertyUri to set\n     */\n    public void setPropertyUri(final String propertyUri) {\n        this.propertyUri = propertyUri;\n    }\n\n    /**\n     * @param propertyValue\n     *            the propertyValue to set\n     */\n    public void setPropertyValue(final String propertyValue) {\n        this.propertyValue = propertyValue;\n    }\n\n    /**\n     * @param rowId\n     *            the rowId to set\n     */\n    public void setRowId(final List<String> rowId) {\n        this.rowId = rowId;\n    }\n\n    /**\n     * @return the noCriteria\n     */\n    public boolean isNoCriteria() {\n        return StringUtils.isBlank(uri);\n    }\n\n    /**\n     * @return the uriHash\n     */\n    public long getUriHash() {\n        return uriHash;\n    }\n\n    /**\n     * @param uriHash\n     *            the uriHash to set\n     */\n    public void setUriHash(final long uriHash) {\n        this.uriHash = uriHash;\n    }\n\n    /**\n     *\n     * @return String\n     */\n    public String getUrl() {\n        return uri != null && URLUtil.isURL(uri) ? uri : null;\n    }\n\n    /**\n     * True if admin is logged in.\n     *\n     * @return boolean\n     */\n    public boolean isAdminLoggedIn() {\n        return adminLoggedIn;\n    }\n\n    /**\n     *\n     * @return boolean\n     * @throws DAOException\n     *             if query fails if query fails\n     */\n    public boolean getSubjectIsUserBookmark() throws DAOException {\n\n        if (!isUserLoggedIn()) {\n            return false;\n        }\n\n        if (subjectIsUserBookmark == null) {\n            subjectIsUserBookmark = Boolean.valueOf(factory.getDao(HelperDAO.class).isSubjectUserBookmark(getUser(), uri));\n        }\n\n        return subjectIsUserBookmark.booleanValue();\n    }\n\n    /**\n     * @return the subjectDownloadable\n     * @throws DAOException\n     */\n    public boolean isSubjectDownloadable() throws DAOException {\n\n        if (subjectDownloadable == null) {\n            subjectDownloadable = Boolean.valueOf(DAOFactory.get().getDao(SpoBinaryDAO.class).exists(uri));\n        }\n        return subjectDownloadable.booleanValue();\n    }\n\n    /**\n     *\n     * @return boolean\n     * @throws DAOException\n     */\n    public boolean isCurrentlyHarvested() throws DAOException {\n\n        return uri == null ? false : (CurrentHarvests.contains(uri) || UrgentHarvestQueue.isInQueue(uri) || CurrentLoadedDatasets\n                .contains(uri));\n    }\n\n    /**\n     *\n     * @return boolean\n     */\n    public boolean isCompiledDataset() {\n\n        boolean ret = false;\n\n        if (subject.getObject(Predicates.RDF_TYPE) != null) {\n            ret = Subjects.CR_COMPILED_DATASET.equals(subject.getObject(Predicates.RDF_TYPE).getValue());\n        }\n\n        return ret;\n    }\n\n    /**\n     *\n     * @return Resolution\n     * @throws DAOException\n     */\n    public Resolution showOnMap() throws DAOException {\n        HelperDAO helperDAO = DAOFactory.get().getDao(HelperDAO.class);\n        subject = helperDAO.getFactsheet(uri, null, null);\n\n        FactsheetTabMenuHelper helper = new FactsheetTabMenuHelper(uri, subject, factory.getDao(HarvestSourceDAO.class));\n        tabs = helper.getTabs(FactsheetTabMenuHelper.TabTitle.SHOW_ON_MAP);\n        return new ForwardResolution(\"/pages/factsheet/map.jsp\");\n    }\n\n    public boolean isUriIsHarvestSource() {\n        return uriIsHarvestSource;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public String getBookmarkLabel() {\n        return bookmarkLabel;\n    }\n\n    /**\n     *\n     * @param bookmarkLabel\n     */\n    public void setBookmarkLabel(String bookmarkLabel) {\n        this.bookmarkLabel = bookmarkLabel;\n    }\n\n    /**\n     * @return the predicatePages\n     */\n    @SuppressWarnings(\"unchecked\")\n    public Map<String, Integer> getPredicatePageNumbers() {\n\n        if (predicatePageNumbers == null) {\n\n            predicatePageNumbers = new HashMap<String, Integer>();\n            HttpServletRequest request = getContext().getRequest();\n            Map<String, String[]> paramsMap = request.getParameterMap();\n\n            if (paramsMap != null && !paramsMap.isEmpty()) {\n\n                for (Map.Entry<String, String[]> entry : paramsMap.entrySet()) {\n\n                    String paramName = entry.getKey();\n                    if (isPredicatePageParam(paramName)) {\n\n                        int pageNumber = NumberUtils.toInt(paramName.substring(PAGE_PARAM_PREFIX.length()));\n                        if (pageNumber > 0) {\n\n                            String[] predicateUris = entry.getValue();\n                            if (predicateUris != null) {\n                                for (String predUri : predicateUris) {\n                                    predicatePageNumbers.put(predUri, pageNumber);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return predicatePageNumbers;\n    }\n\n    /**\n     *\n     * @param paramName\n     * @return\n     */\n    public boolean isPredicatePageParam(String paramName) {\n\n        if (paramName.startsWith(PAGE_PARAM_PREFIX) && paramName.length() > PAGE_PARAM_PREFIX.length()) {\n            return StringUtils.isNumeric(paramName.substring(PAGE_PARAM_PREFIX.length()));\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * @return\n     */\n    public int getPredicatePageSize() {\n\n        return PredicateObjectsReader.PREDICATE_PAGE_SIZE;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public List<TabElement> getTabs() {\n        return tabs;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public boolean getSubjectIsType() {\n\n        if (subjectIsType == null) {\n\n            List<String> typeUris = ApplicationCache.getTypeUris();\n            subjectIsType = Boolean.valueOf(typeUris.contains(this.uri));\n        }\n\n        return subjectIsType;\n    }\n\n    /**\n     *\n     * @return\n     */\n    @HandlesEvent(\"openPredObjValue\")\n    public Resolution openPredObjValue() {\n\n        LOGGER.trace(\"Retrieving object value for MD5 \" + objectMD5 + \" of predicate \" + predicateUri);\n        String value = DAOFactory.get().getDao(HelperDAO.class).getLiteralObjectValue(uri, predicateUri, objectMD5, graphUri);\n        if (StringUtils.isBlank(value)) {\n            value = \"Found no value!\";\n        } else {\n            value = StringEscapeUtils.escapeXml(value);\n        }\n        return new StreamingResolution(\"text/html\", value);\n    }\n\n    /**\n     * @param predicateUri\n     *            the predicateUri to set\n     */\n    public void setPredicateUri(String predicateUri) {\n        this.predicateUri = predicateUri;\n    }\n\n    /**\n     * @param objectMD5\n     *            the objectMD5 to set\n     */\n    public void setObjectMD5(String objectMD5) {\n        this.objectMD5 = objectMD5;\n    }\n\n    /**\n     * @param graphUri\n     *            the graphUri to set\n     */\n    public void setGraphUri(String graphUri) {\n        this.graphUri = graphUri;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public List<DatasetDTO> getUserCompiledDatasets() {\n        if (userCompiledDatasets == null && !StringUtils.isBlank(uri)) {\n            try {\n                CompiledDatasetDAO dao = DAOFactory.get().getDao(CompiledDatasetDAO.class);\n                userCompiledDatasets = dao.getCompiledDatasets(getUser().getHomeUri(), uri);\n            } catch (DAOException e) {\n                e.printStackTrace();\n            }\n        }\n        return userCompiledDatasets;\n    }\n\n    /**\n     *\n     * @param userCompiledDatasets\n     */\n    public void setUserCompiledDatasets(List<DatasetDTO> userCompiledDatasets) {\n        this.userCompiledDatasets = userCompiledDatasets;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public Class<ViewSourceActionBean> getViewSourceActionBeanClass() {\n        return ViewSourceActionBean.class;\n    }\n\n    /**\n     *\n     * @return\n     */\n    public boolean isUriIsFolder() {\n        return uriIsFolder;\n    }\n\n    /**\n     *\n     * @param uriIsFolder\n     */\n    public void setUriIsFolder(boolean uriIsFolder) {\n        this.uriIsFolder = uriIsFolder;\n\n    }\n\n    /**\n     * @return the harvestSourceDTO\n     */\n    public HarvestSourceDTO getHarvestSourceDTO() {\n        return harvestSourceDTO;\n    }\n\n}\n"], "filenames": ["pom.xml", "src/main/java/eionet/cr/web/action/TagSearchActionBean.java", "src/main/java/eionet/cr/web/action/factsheet/FactsheetActionBean.java"], "buggy_code_start_loc": [945, 44, 428], "buggy_code_end_loc": [945, 194, 429], "fixing_code_start_loc": [946, 45, 428], "fixing_code_end_loc": [952, 196, 430], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, has been found in European Environment Agency eionet.contreg. This issue affects some unknown processing. The manipulation of the argument searchTag/resourceUri leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 2022-06-27T0948 is able to address this issue. The name of the patch is a120c2153e263e62c4db34a06ab96a9f1c6bccb6. It is recommended to upgrade the affected component. The identifier VDB-215885 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4513", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-15T20:15:10.023", "lastModified": "2022-12-20T20:29:05.070", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in European Environment Agency eionet.contreg. This issue affects some unknown processing. The manipulation of the argument searchTag/resourceUri leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 2022-06-27T0948 is able to address this issue. The name of the patch is a120c2153e263e62c4db34a06ab96a9f1c6bccb6. It is recommended to upgrade the affected component. The identifier VDB-215885 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:eea:eionet_content_registry:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-06-27t0948", "matchCriteriaId": "AC631E1F-86EF-442B-BFBB-F653E19F435D"}]}]}], "references": [{"url": "https://github.com/eea/eionet.contreg/commit/a120c2153e263e62c4db34a06ab96a9f1c6bccb6", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/eea/eionet.contreg/releases/tag/2022-06-27T0948", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.215885", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/eea/eionet.contreg/commit/a120c2153e263e62c4db34a06ab96a9f1c6bccb6"}}