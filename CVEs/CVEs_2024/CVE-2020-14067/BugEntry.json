{"buggy_code": ["<?php\r\n\r\nclass extension\r\n{\r\n\tpublic $id;\r\n\tpublic $website;\r\n    public $title;\r\n    public $code;\r\n    public $definition;\r\n\r\n    public $enabled;\r\n    public $settings;\r\n\r\n    public $dictionary;\r\n\tpublic $dictionaries;\r\n\r\n\tpublic function load($code)\r\n\t{\r\n\t\tglobal $DB;\r\n        global $website;\r\n\r\n        // retrieve extension definition from filesystem\r\n        if(file_exists(NAVIGATE_PATH.'/plugins/'.$code.'/'.$code.'.plugin'))\r\n        {\r\n            $this->definition = @json_decode(file_get_contents(NAVIGATE_PATH.'/plugins/'.$code.'/'.$code.'.plugin'));\r\n        }\r\n\r\n        debug_json_error('extension: '.$code);\r\n\r\n        $this->id = null;\r\n        $this->website = $website->id;\r\n        $this->title = $this->definition->title;\r\n        $this->code = $code;\r\n        $this->enabled = 1; // default\r\n        $this->settings = array(); // default\r\n\r\n        // now retrieve extension configuration for the active website\r\n        $DB->query('\r\n            SELECT * FROM nv_extensions\r\n            WHERE website = :wid\r\n              AND extension = :code',\r\n            'object',\r\n            array(\r\n                ':wid' => $this->website,\r\n                ':code' => $this->code\r\n            )\r\n        );\r\n\r\n        $row = $DB->first();\r\n\r\n        if(!empty($row))\r\n        {\r\n            $this->id = $row->id;\r\n            $this->enabled = $row->enabled;\r\n            $this->settings = json_decode($row->settings, true);\r\n        }\r\n        else\r\n        {\r\n            // get from definition the default values for settings, if any\r\n            if(isset($this->definition->options))\r\n            {\r\n                foreach ($this->definition->options as $option)\r\n                {\r\n                    if (isset($option->dvalue))\r\n                    {\r\n                        $this->settings[$option->id] = $option->dvalue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\t}\r\n\r\n    public function load_from_post()\r\n    {\r\n        global $website;\r\n\r\n        // it can only be extension options!\r\n        if(!empty($this->definition->options))\r\n        {\r\n            foreach($this->definition->options as $extension_option)\r\n            {\r\n                // get property info\r\n                $property = new property();\r\n                $property->load_from_object($extension_option, $this->settings->{$extension_option->id}, $this);\r\n\r\n                $value = '';\r\n\r\n                switch($property->type)\r\n                {\r\n                    case 'text':\r\n                    case 'textarea':\r\n                        // multilang\r\n                        $value = array();\r\n                        foreach($website->languages_list as $lang)\r\n                        {\r\n                            $value[$lang] = $_REQUEST['property-'.$extension_option->id.'-'.$lang];\r\n                        }\r\n                        break;\r\n\r\n                    case 'link':\r\n                        // multilang and title+link\r\n                        $value = array();\r\n                        foreach($website->languages_list as $lang)\r\n                        {\r\n                            $value[$lang] = $_REQUEST['property-'.$extension_option->id.'-'.$lang.'-link'].'##'.$_REQUEST['property-'.$extension_option->id.'-'.$lang.'-title'];\r\n                        }\r\n                        break;\r\n\r\n                    case 'date':\r\n                    case 'datetime':\r\n                        $value = core_date2ts($_REQUEST['property-'.$extension_option->id]);\r\n                        break;\r\n\r\n                    case 'moption':\r\n                        $value = implode(',', $_REQUEST['property-'.$extension_option->id]);\r\n                        break;\r\n\r\n                    case 'coordinates':\r\n                        $value = $_REQUEST['property-'.$extension_option->id.'-latitude'].'#'.$_REQUEST['property-'.$extension_option->id.'-longitude'];\r\n                        break;\r\n\r\n                    case 'boolean':\r\n                        $value = 0;\r\n                        if($_REQUEST['property-'.$extension_option->id]=='1')\r\n                        {\r\n                            $value = 1;\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // direct value\r\n                        $value = $_REQUEST['property-'.$extension_option->id];\r\n                }\r\n\r\n                $this->settings[$extension_option->id] = $value;\r\n            }\r\n        }\r\n    }\r\n\t\t\r\n\tpublic function save()\r\n\t{\r\n\t\tglobal $DB;\r\n\t\tglobal $events;\r\n\r\n        $ok = false;\r\n\r\n        $settings = $this->settings;\r\n        $settings = json_encode($settings);\r\n\r\n        if(empty($this->id))\r\n        {\r\n            $ok = $DB->execute('\r\n                INSERT INTO nv_extensions (id, website, extension, enabled, settings)\r\n                    VALUES(0, :website, :code, :enabled, :settings)',\r\n                array(\r\n                    ':website' => $this->website,\r\n                    ':code' => $this->code,\r\n                    ':enabled' => value_or_default($this->enabled, 0),\r\n                    ':settings' => $settings\r\n                )\r\n            );\r\n        }\r\n        else\r\n        {\r\n            $ok = $DB->execute('\r\n                UPDATE nv_extensions\r\n                   SET enabled = :enabled, settings = :settings\r\n                 WHERE id = :id',\r\n                array(\r\n                    ':enabled' => value_or_default($this->enabled, 0),\r\n                    ':settings' => $settings,\r\n                    ':id' => $this->id\r\n                )\r\n            );\r\n        }\r\n\r\n        if(method_exists($events, 'trigger'))\r\n        {\r\n            $events->trigger(\r\n                'extension',\r\n                'save',\r\n                array(\r\n                    'extension' => $this\r\n                )\r\n            );\r\n        }\r\n\r\n        return $ok;\r\n\t}\r\n\t\r\n\tpublic function delete()\r\n\t{\r\n\t\tglobal $DB;\r\n        global $user;\r\n        global $events;\r\n\r\n        $ok = false;\r\n\r\n        if($user->permission(\"themes.delete\")==\"false\")\r\n        {\r\n            throw new Exception(t(610, \"Sorry, you are not allowed to execute this function.\"));\r\n        }\r\n\r\n        if(file_exists(NAVIGATE_PATH.'/plugins/'.$this->code.'/'.$this->code.'.plugin'))\r\n        {\r\n            core_remove_folder(NAVIGATE_PATH.'/plugins/'.$this->code);\r\n\r\n            $ok = $DB->execute('\r\n                DELETE FROM nv_extensions\r\n                 WHERE id = '.intval($this->id)\r\n            );\r\n\r\n            if(method_exists($events, 'trigger'))\r\n            {\r\n                $events->trigger(\r\n                    'extension',\r\n                    'delete',\r\n                    array(\r\n                        'extension' => $this\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        return $ok;\r\n\t\r\n\t}\r\n\t\r\n\tpublic function quicksearch($text)\r\n\t{\r\n\r\n\t}\r\n\r\n    public function t($code)\r\n    {\r\n        global $user;\r\n        global $session;\r\n        global $website;\r\n        global $DB;\r\n\r\n        if(empty($this->dictionary))\r\n        {\r\n            $extension_languages = (array)$this->definition->languages;\r\n            $file = '';\r\n\r\n            if(!is_array($extension_languages))\r\n            {\r\n                $extension_languages = array();\r\n            }\r\n\r\n            // if we are in Navigate CMS, user has the default language\r\n            // if we call this function from the website, the session has the default language\r\n            $current_language = $session['lang'];\r\n            if(empty($current_language) && !empty($webuser))\r\n            {\r\n                $current_language = $webuser->language;\r\n            }\r\n\r\n            if(empty($current_language) && !empty($user))\r\n            {\r\n                $current_language = $user->language;\r\n            }\r\n\r\n            foreach($extension_languages as $lcode => $lfile)\r\n            {\r\n                if( $lcode==@$user->language ||\r\n                    $lcode==@$session['lang'] ||\r\n                    empty($file)\r\n                )\r\n                {\r\n                    $file = $lfile;\r\n                }\r\n            }\r\n\r\n            $json = '';\r\n            if(file_exists(NAVIGATE_PATH.'/plugins/'.$this->code.'/'.$file))\r\n            {\r\n                $json = @file_get_contents(NAVIGATE_PATH.'/plugins/'.$this->code.'/'.$file);\r\n            }\r\n\r\n            if(!empty($json))\r\n            {\r\n                $this->dictionary = (array)json_decode($json);\r\n            }\r\n\r\n            // maybe we have a custom translation added in navigate / webdictionary ?\r\n            if(!empty($website->id))\r\n            {\r\n                $DB->query('\r\n                  SELECT subtype, lang, text\r\n                    FROM nv_webdictionary\r\n                   WHERE website = '.$website->id.'\r\n                     AND node_type = \"extension\"\r\n                     AND lang = :lang\r\n                     AND extension = :code',\r\n                    'object',\r\n                    array(\r\n                        ':lang' => $current_language,\r\n                        ':code' => $this->code\r\n                    )\r\n                );\r\n                $rs = $DB->result();\r\n\r\n                for($r=0; $r < count($rs); $r++)\r\n                {\r\n                    $this->dictionary[$rs[$r]->subtype] = $rs[$r]->text;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(is_string($code))\r\n\t\t{\r\n            $out = $code;\r\n            if(substr($out, 0, 1)=='@')  // get translation from theme dictionary\r\n            {\r\n                $out = substr($out, 1);\r\n            }\r\n\r\n            if(!empty($this->dictionary[$out]))\r\n            {\r\n                $out = $this->dictionary[$out];\r\n            }\r\n        }\r\n\r\n        return $out;\r\n    }\r\n\r\n\r\n    public function get_translations()\r\n\t{\r\n\t\tif(empty($this->dictionaries))\r\n\t\t{\r\n\t\t\t$dict = array();\r\n            if(isset($this->definition->languages))\r\n            {\r\n                foreach($this->definition->languages as $lcode => $lfile)\r\n                {\r\n                    $jarray = NULL;\r\n                    $json = @file_get_contents(NAVIGATE_PATH.'/plugins/'.$this->code.'/'.$lfile);\r\n\r\n                    if(!empty($json))\r\n                    {\r\n                        $jarray = (array)json_decode($json);\r\n                    }\r\n\r\n                    if(!empty($jarray))\r\n                    {\r\n                        foreach($jarray as $code => $text)\r\n                        {\r\n                            $id = count($dict) + 1;\r\n                            $id = -$id;\r\n                            $dict[] = array(\r\n                                'id'\t\t=>\t$id, //.' | '.$this->name . ' | '.$code,\r\n                                'extension'\t=>\t$this->code,\r\n                                'source'    =>  'extension.'.$this->code.'.'.$code,\r\n                                'node_id'\t=>\t$code,\r\n                                'lang'\t\t=>\t$lcode,\r\n                                'text'\t\t=>\t$text\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t}\r\n\r\n\t\t\t$this->dictionaries = $dict;\r\n\t\t}\r\n\r\n\t\treturn $this->dictionaries;\r\n\t}\r\n\r\n\r\n    public static function list_installed($type='', $ignore_permissions=true)\r\n    {\r\n        global $website;\r\n        global $DB;\r\n        global $user;\r\n\r\n        $extensions = glob(NAVIGATE_PATH.'/plugins/*/*.plugin');\r\n        $updates = @$_SESSION['extensions_updates'];\r\n\r\n        $DB->query('\r\n            SELECT extension, enabled\r\n              FROM nv_extensions\r\n             WHERE website = '.intval($website->id),\r\n            'array'\r\n        );\r\n\r\n        $rs = $DB->result();\r\n\r\n        foreach($rs as $row)\r\n        {\r\n            $properties[$row['extension']] = array(\r\n                'enabled' => intval($row['enabled'])\r\n            );\r\n        }\r\n\r\n        $allowed_extensions = array();  // empty => all of them\r\n        if(!$ignore_permissions)\r\n        {\r\n            if(method_exists($user, \"permission\"))\r\n            {\r\n                $allowed_extensions = $user->permission(\"extensions.allowed\");\r\n            }\r\n        }\r\n\r\n        for($t=0; $t < count($extensions); $t++)\r\n        {\r\n            $extension_json = @json_decode(@file_get_contents($extensions[$t]));\r\n            debug_json_error($extensions[$t]); // if debug is enabled, show last json error\r\n\r\n            $code = substr($extensions[$t], strrpos($extensions[$t], '/')+1);\r\n            $code = substr($code, 0, strpos($code, '.plugin'));\r\n\r\n            if(!empty($allowed_extensions) && !in_array($code, $allowed_extensions))\r\n            {\r\n                $extensions[$t] = null;\r\n                continue;\r\n            }\r\n\r\n            if(!empty($extension_json))\r\n            {\r\n                $extensions[$t] = (array)$extension_json;\r\n\r\n                if(!empty($type) && $extensions[$t]['type']!=$type && $type!='all')\r\n                {\r\n                    $extensions[$t] = '';\r\n                    continue;\r\n                }\r\n\r\n                // ignore preinit type extensions\r\n                if(empty($type) && $extensions[$t]['type'] == 'debugger' && $type!='all')\r\n                {\r\n                    $extensions[$t] = '';\r\n                    continue;\r\n                }\r\n\r\n                if(substr($extensions[$t]['description'], 0, 1)=='@')\r\n                {\r\n                    $tmp = new extension();\r\n                    $tmp->load($code);\r\n                    $extensions[$t]['description'] = $tmp->t($extensions[$t]['description']);\r\n                }\r\n\r\n                $extensions[$t]['code'] = $code;\r\n                $extensions[$t]['update'] = ((isset($updates[$code]) && isset($extensions[$t]) && version_compare($updates[$code], $extensions[$t]['version']) > 0)? $updates[$code] : '');\r\n\r\n                if(isset($properties) && isset($properties[$code]))\r\n                {\r\n                    $extensions[$t]['enabled'] = ($properties[$code]['enabled']===0)? '0' : '1';\r\n                }\r\n                else\r\n                {\r\n                    $extensions[$t]['enabled'] = '1';\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!is_array($extensions))\r\n        {\r\n            $extensions = array();\r\n        }\r\n\r\n        $extensions = array_filter($extensions);\r\n        sort($extensions);\r\n\r\n        return $extensions;\r\n    }\r\n\r\n    public static function latest_available()\r\n    {\r\n        $list = extension::list_installed();\r\n        $post = array();\r\n\r\n        if(!is_array($list))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        foreach($list as $extension)\r\n        {\r\n            $post[$extension['code']] = $extension['version'];\r\n        }\r\n\r\n        $latest_update = core_curl_post(\r\n            'http://update.navigatecms.com/extensions',\r\n            array(\r\n                'extensions' => json_encode($post)\r\n            )\r\n        );\r\n\r\n        if(empty($latest_update))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $latest_update = json_decode($latest_update, true);\r\n\r\n        return $latest_update;\r\n    }\r\n\r\n    public static function include_php($extension_code)\r\n    {\r\n        if(file_exists(NAVIGATE_PATH.'/plugins/'.$extension_code.'/'.$extension_code.'.php'))\r\n        {\r\n            include_once(NAVIGATE_PATH.'/plugins/'.$extension_code.'/'.$extension_code.'.php');\r\n        }\r\n    }\r\n\r\n    public static function check_upload($file_upload, $extension_name)\r\n    {\r\n        // check mime\r\n        if(!in_array($file_upload['type'], array('application/zip', 'application/x-zip-compressed')))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // check file extension\r\n        if(pathinfo($file_upload['name'], PATHINFO_EXTENSION) != 'zip')\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // extract the zip in a temporary folder\r\n        $zip = new ZipArchive;\r\n        if($zip->open($file_upload['tmp_name']) !== true)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $tempdir = NAVIGATE_PRIVATE . '/tmp/' . uniqid('plugin-check-');\r\n\r\n        mkdir($tempdir);\r\n        $zip->extractTo($tempdir);\r\n        $zip->close();\r\n\r\n        // extension definition exists?\r\n        if(!file_exists($tempdir . '/' . $extension_name . '.plugin'))\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        // it's a valid json?\r\n        $extension_def = file_get_contents($tempdir . '/' . $extension_name . '.plugin');\r\n        $extension_def = json_decode($extension_def);\r\n        \r\n        if(json_last_error() != JSON_ERROR_NONE)\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        // check every php file included\r\n        $files = core_recursive_file_search($tempdir,  '/.*\\/*.php/');\r\n\r\n        $prohibited_functions = array(\r\n            'eval(',\r\n            'system(',\r\n            'exec(',\r\n            'shell_exec(',\r\n            'popen(',\r\n            'proc_open(',\r\n            'passthru(',\r\n            '`' // https://www.php.net/manual/en/language.operators.execution.php\r\n        );\r\n\r\n        foreach($files as $file)\r\n        {\r\n            // remove all spaces\r\n            $file_content = file_get_contents($file);\r\n            $file_content = str_replace(array(' ', \"\\t\", \"\\r\", \"\\n\"), '', $file_content);\r\n\r\n            foreach($prohibited_functions as $pf)\r\n            {\r\n                if(stripos($file_content, $pf) !== false)\r\n                {\r\n                    core_remove_folder($tempdir);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // check for \"dangerous\" files\r\n        $htaccess = core_recursive_file_search($tempdir,  '/.htaccess/');\r\n        $phpini = core_recursive_file_search($tempdir,  '/php.ini/');\r\n        if(!empty($htaccess) || !empty($phpini))\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        core_remove_folder($tempdir);\r\n\r\n        return true;\r\n    }\r\n\r\n    public static function blocks()\r\n    {\r\n        $out = array();\r\n\r\n        $list = extension::list_installed();\r\n\r\n        for($e=0; $e < count($list); $e++)\r\n        {\r\n            if(isset($list[$e]['blocks']))\r\n            {\r\n                for($eb=0; $eb < count($list[$e]['blocks']); $eb++)\r\n                {\r\n                    $list[$e]['blocks'][$eb]->_extension = $list[$e]['code'];\r\n                    $out[] = $list[$e]['blocks'][$eb];\r\n                }\r\n            }\r\n        }\r\n\r\n        return $out;\r\n    }\r\n}\r\n\r\n?>", "// make executable the runnable extensions\r\n$(\".navigrid-item-buttonset[run='1'],.navigrid-item-buttonset[run='true']\").parent().on(\"dblclick\", function()\r\n{\r\n    // is this extension enabled?\r\n    if($(this).find(\".navigrid-item-buttonset\").attr(\"enabled\")==\"0\")\r\n        return;\r\n\r\n    var extension = $(this).find(\".navigrid-item-buttonset\").attr(\"extension\");\r\n    //location.href = NAVIGATE_APP + \"?fid=extensions&act=run&extension=\" + extension;\r\n    location.href = NAVIGATE_APP + \"?fid=ext_\" + extension;\r\n});\r\n\r\n// open configuration on NON runnable extensions (if configuration is available)\r\n$(\".navigrid-item-buttonset[run='']\").parent().on(\"dblclick\", function()\r\n{\r\n    // is this extension enabled?\r\n    if($(this).find(\".navigrid-item-buttonset\").attr(\"enabled\")==\"0\")\r\n        return;\r\n\r\n    // has this extension a configuration option?\r\n    if($(this).find('.navigrid-extensions-settings').length > 0)\r\n        $(this).find('.navigrid-extensions-settings').trigger('click');\r\n});\r\n\r\n// show extension info window\r\n$(\".navigrid-extensions-info\").bind(\"click\", function()\r\n{\r\n    var extension = $(this).parent().attr(\"extension\");\r\n\r\n    $(\"#navigrid-extension-information\").attr(\"title\", $(this).parent().attr(\"extension-title\"));\r\n    $(\"#navigrid-extension-information\").load(\"?fid=extensions&act=extension_info&extension=\" + extension, function()\r\n    {\r\n        $(\"#navigrid-extension-information\").dialog(\r\n            {\r\n                width: 700,\r\n                height: 500,\r\n                modal: true,\r\n                title: \"<img src=\\\"img/icons/silk/information.png\\\" align=\\\"absmiddle\\\"> \" + $(\"#navigrid-extension-information\").attr(\"title\")\r\n            }).dialogExtend(\r\n            {\r\n                maximizable: true\r\n            });\r\n    });\r\n});\r\n\r\n// disable extension\r\n$(\".navigrid-extensions-disable\").bind(\"click\", function()\r\n{\r\n    var extension = $(this).parent().attr(\"extension\");\r\n    $.post(\r\n        NAVIGATE_APP + \"?fid=extensions&act=disable\",\r\n        { extension: extension },\r\n        function(data)\r\n        {\r\n            $(\"div#item-\" + extension).find(\".navigrid-extensions-enable\").hide();\r\n            $(\"div#item-\" + extension).find(\".navigrid-extensions-disable\").hide();\r\n            $(\"div#item-\" + extension).find(\".navigrid-extensions-remove\").hide();\r\n\r\n            if(data==\"true\")\r\n            {\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-enable\").show();\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-remove\").show();\r\n                $(\"div#item-\" + extension).find(\".navigrid-item-buttonset\").attr(\"enabled\", 1);\r\n            }\r\n            else\r\n            {\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-disable\").show();\r\n            }\r\n\r\n            navigate_extensions_refresh();\r\n        });\r\n});\r\n\r\n// enable extension\r\n$(\".navigrid-extensions-enable\").bind(\"click\", function()\r\n{\r\n    var extension = $(this).parent().attr(\"extension\");\r\n    $.post(\r\n        NAVIGATE_APP + \"?fid=extensions&act=enable\",\r\n        { extension: extension },\r\n        function(data)\r\n        {\r\n            $(\"div#item-\" + extension).find(\".navigrid-extensions-enable\").hide();\r\n            $(\"div#item-\" + extension).find(\".navigrid-extensions-disable\").hide();\r\n            $(\"div#item-\" + extension).find(\".navigrid-extensions-remove\").hide();\r\n\r\n            if(data==\"true\")\r\n            {\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-disable\").show();\r\n            }\r\n            else\r\n            {\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-enable\").show();\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-remove\").show();\r\n            }\r\n\r\n            navigate_extensions_refresh();\r\n        });\r\n});\r\n\r\n// add extension as favorite\r\n$(\".navigrid-extensions-favorite\").bind(\"click\", function()\r\n{\r\n    var extension = $(this).parent().attr(\"extension\");\r\n    var add_as_favorite = ($(this).parent().attr(\"favorite\")==0);\r\n    var el = this;\r\n\r\n    $.post(\r\n        NAVIGATE_APP + \"?fid=extensions&act=favorite\",\r\n        { extension: extension,\r\n            value: (add_as_favorite? 1 : 0)\r\n        },\r\n        function(data)\r\n        {\r\n            $(el).find(\"img\").removeClass(\"silk-heart_add\");\r\n            $(el).find(\"img\").removeClass(\"silk-heart_delete\");\r\n\r\n            if(data==\"true\")\r\n            {\r\n                if(add_as_favorite)\r\n                {\r\n                    $(el).parent().attr(\"favorite\", 1);\r\n                    $(el).find(\"img\").addClass(\"silk-heart_delete\");\r\n                }\r\n                else\r\n                {\r\n                    $(el).parent().attr(\"favorite\", 0);\r\n                    $(el).find(\"img\").addClass(\"silk-heart_add\");\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // show error\r\n                navigate_notification(navigate_lang_dictionary[56]);\r\n            }\r\n\r\n            navigate_extensions_refresh();\r\n        });\r\n});\r\n\r\n$(\".navigrid-extensions-settings\").on(\"click\", function()\r\n{\r\n    var extension = $(this).parent().attr(\"extension\");\r\n\r\n    $(\"#navigrid-extension-options\").attr(\"title\", $(this).parent().attr(\"extension-title\"));\r\n    //$(\"#navigrid-extension-options\").load(\"?fid=extensions&act=options&extension=\" + extension, function()\r\n    $(\"#navigrid-extension-options\").html('<iframe width=\"100%\" height=\"100%\" frameborder=\"0\" src=\"?fid=extensions&act=options&extension=' + extension + '\"></iframe>');\r\n\r\n    $(\"#navigrid-extension-options\").dialog(\r\n    {\r\n        width: $(window).width() * 0.95,\r\n        height: $(window).height() * 0.95,\r\n        modal: true,\r\n        title: \"<img src=\\\"img/icons/silk/cog.png\\\" align=\\\"absmiddle\\\"> \" + $(\"#navigrid-extension-options\").attr(\"title\")\r\n    }).dialogExtend(\r\n    {\r\n        maximizable: true\r\n    });\r\n});\r\n\r\n$(\".navigrid-extensions-remove\").bind(\"click\", function()\r\n{\r\n    var extension = $(this).parent().attr(\"extension\");\r\n\r\n    $(\"#navigrid-extensions-remove-confirmation\").dialog(\r\n        {\r\n            resizable: true,\r\n            width: 300,\r\n            height: 150,\r\n            modal: true,\r\n            buttons:\r\n                [\r\n                    {\r\n                        text: navigate_lang_dictionary[190],\r\n                        click: function()\r\n                        {\r\n                            $.post(\r\n                                NAVIGATE_APP + \"?fid=extensions&act=remove&extension=\" + extension,\r\n                                { },\r\n                                function(data)\r\n                                {\r\n                                    if(data==\"true\")\r\n                                    {\r\n                                        $(\"#item-\" + extension).fadeOut(\"slow\", function(){ $(\"#item-\" + extension).remove(); });\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        navigate_notification(navigate_lang_dictionary[56]);\r\n                                    }\r\n                                }\r\n                            );\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    },\r\n                    {\r\n                        text: navigate_lang_dictionary[58],\r\n                        click: function()\r\n                        {\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    }\r\n                ]\r\n        });\r\n    return false;\r\n});\r\n\r\n$(\".navigrid-extensions-update\").on(\"click\", function()\r\n{\r\n    var extension = $(this).parent().attr(\"extension\");\r\n\r\n    $(\"#navigrid-extensions-update\").dialog(\r\n        {\r\n            resizable: false,\r\n            width: 980,\r\n            height: 650,\r\n            modal: true\r\n        }\r\n    );\r\n\r\n    $(\"#navigrid-extensions-update\").find('iframe').\r\n        css({\r\n            \"width\": \"960\",\r\n            \"height\": 600\r\n        }).\r\n        attr('src', 'http://www.navigatecms.com/en/marketplace/purchase?extension='+extension+'&get_update')\r\n\r\n    return false;\r\n});\r\n\r\nfunction navigate_extensions_refresh()\r\n{\r\n    $(\".navigrid-extensions-enable\").each(function(i, el)\r\n    {\r\n        if($(el).is(\":visible\"))\r\n        {\r\n            $(el).parent().parent().find(\"*\").css(\"opacity\", 0.5);\r\n            $(el).parent().css(\"opacity\", 1);\r\n            $(el).parent().find(\".navigrid-extensions-enable, .navigrid-extensions-remove\").css(\"opacity\", 0.9);\r\n            $(el).parent().find(\"img\").css(\"opacity\", 1);\r\n            $(el).parent().attr(\"enabled\", '0');\r\n        }\r\n        else\r\n        {\r\n            $(el).parent().parent().find(\"*\").css(\"opacity\", 1);\r\n            $(el).parent().attr(\"enabled\", '1');\r\n        }\r\n    });\r\n}", "<?php\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/extensions/extension.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/properties/property.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/properties/property.layout.php');\r\n\r\nfunction run()\r\n{\r\n\tglobal $user;\t\r\n\tglobal $layout;\r\n\tglobal $DB;\r\n\tglobal $website;\r\n\tglobal $events;\r\n\t\r\n\t$out = '';\r\n\t$item = new extension();\r\n\r\n\tswitch($_REQUEST['act'])\r\n\t{\r\n        case 'extension_info':\r\n            echo '<iframe src=\"'.NAVIGATE_URL.'/plugins/'.$_REQUEST['extension'].'/'.$_REQUEST['extension'].'.info.html'.'\" scrolling=\"auto\" frameborder=\"0\"  width=\"100%\" height=\"100%\"></iframe>';\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'disable':\r\n            if(naviforms::check_csrf_token('header'))\r\n            {\r\n                $extension = new extension();\r\n                $extension->load($_REQUEST['extension']);\r\n                $extension->enabled = 0;\r\n                $ok = $extension->save();\r\n                echo json_encode($ok);\r\n            }\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'enable':\r\n            if(naviforms::check_csrf_token('header'))\r\n            {\r\n                $extension = new extension();\r\n                $extension->load($_REQUEST['extension']);\r\n                $extension->enabled = 1;\r\n                $ok = $extension->save();\r\n                echo json_encode($ok);\r\n            }\r\n            core_terminate();\r\n            break;\r\n\r\n        // TODO: rework favorite extensions as user's favorite (not global)\r\n        /*\r\n        case 'favorite':\r\n            $extension = new extension();\r\n            $extension->load($_REQUEST['extension']);\r\n            $extension->favorite = intval($_REQUEST['value']);\r\n            $ok = $extension->save();\r\n            echo json_encode($ok);\r\n            core_terminate();\r\n            break;\r\n        */\r\n\r\n        case 'remove':\r\n            try\r\n            {\r\n                if(!naviforms::check_csrf_token('header'))\r\n                {\r\n                    throw new Exception(t(344, \"Security error\"));\r\n                }\r\n\r\n                $extension = new extension();\r\n                $extension->load($_REQUEST['extension']);\r\n                $status = $extension->delete();\r\n                echo json_encode($status);\r\n            }\r\n            catch(Exception $e)\r\n            {\r\n                echo $e->getMessage();\r\n            }\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'options':\r\n            $extension = new extension();\r\n            $extension->load($_REQUEST['extension']);\r\n\r\n            $status = null;\r\n            if(isset($_REQUEST['form-sent']))\r\n            {\r\n                naviforms::check_csrf_token();\r\n                $extension->load_from_post();\r\n                $status = $extension->save();\r\n            }\r\n\r\n            $out = extensions_options($extension, $status);\r\n            echo $out;\r\n\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'dialog':\r\n            $extension = new extension();\r\n            $extension->load($_REQUEST['extension']);\r\n            $out = extensions_dialog($extension, $_REQUEST['function'], $_REQUEST);\r\n            echo $out;\r\n\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'process':\r\n            $extension = trim($_REQUEST['extension']);\r\n            call_user_func(\"nvweb_\".$extension.\"_plugin\", $_REQUEST);\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'run':\r\n            $extension = trim($_REQUEST['extension']);\r\n\r\n            $extensions_allowed = $user->permission(\"extensions.allowed\");\r\n            if(!empty($extensions_allowed) && !in_array($extension, $extensions_allowed))\r\n            {\r\n                $out = t(610, \"Sorry, you are not allowed to execute this function.\");\r\n            }\r\n            else\r\n            {\r\n                if(file_exists(NAVIGATE_PATH.'/plugins/'.$extension.'/run.php'))\r\n                {\r\n                    include_once(NAVIGATE_PATH.'/plugins/'.$extension.'/run.php');\r\n                    if(function_exists($extension.'_run'))\r\n                    {\r\n                        eval('$out = '.$extension.'_run();');\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case 'tinymce_add_content_event':\r\n            $events_out = $events->trigger(\r\n                'tinymce_add_content',\r\n                'add_file',\r\n                array(\r\n                    'file_id' => $_REQUEST['file_id'],\r\n                    'media' => $_REQUEST['media'],\r\n                    'mime' => $_REQUEST['mime']\r\n                )\r\n            );\r\n\r\n            if(empty($events_out))\r\n            {\r\n                $events_out = array();\r\n            }\r\n\r\n            echo json_encode($events_out);\r\n\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'install_from_hash':\r\n            $url = base64_decode($_GET['hash']);\r\n\r\n            if(!empty($url) && $user->permission(\"extensions.install\")==\"true\")\r\n            {\r\n                $error = false;\r\n                parse_str(parse_url($url, PHP_URL_QUERY), $query);\r\n\r\n                $tmp_file = sys_get_temp_dir().DIRECTORY_SEPARATOR.$query['code'].'.zip';\r\n                @core_file_curl($url, $tmp_file);\r\n                if(@filesize($tmp_file) == 0)\r\n                {\r\n                    @unlink($tmp_file);\r\n                    // core file curl failed, try using file_get_contents...\r\n                    $tmp = @file_get_contents($url);\r\n                    if(!empty($tmp))\r\n                    {\r\n                        @file_put_contents($tmp_file, $tmp);\r\n                    }\r\n                    unset($tmp);\r\n                }\r\n\r\n                if(@filesize($tmp_file) > 0)\r\n                {\r\n                    // uncompress ZIP and copy it to the extensions dir\r\n                    @mkdir(NAVIGATE_PATH.'/plugins/'.$query['code']);\r\n\r\n                    $zip = new ZipArchive();\r\n                    $zip_open_status = $zip->open($tmp_file);\r\n                    if($zip_open_status === TRUE)\r\n                    {\r\n                        $zip->extractTo(NAVIGATE_PATH.'/plugins/'.$query['code']);\r\n                        $zip->close();\r\n\r\n                        $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                    }\r\n                    else // zip extraction failed\r\n                    {\r\n                        $layout->navigate_notification('ERROR '.$zip_open_status, true, true);\r\n                        $error = true;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    $layout->navigate_notification(t(56, 'Unexpected error'), true, true);\r\n                    $error = true;\r\n                }\r\n\r\n                if($error)\r\n                {\r\n                    $layout->add_content('\r\n                        <div id=\"navigate_marketplace_install_from_hash_error\">\r\n                            <p>'.t(529, \"It has not been possible to download from the marketplace.\").'</p>\r\n                            <p>'.t(530, \"You have to visit your Marketplace Dashboard and download the file, then use the <strong>Install from file</strong> button you'll find in the actions bar on the right.\").'</p>\r\n                            <p>'.t(531, \"Sorry for the inconvenience.\").'</p>\r\n                            <a class=\"uibutton\" href=\"http://www.navigatecms.com/en/marketplace/dashboard\" target=\"_blank\"><span class=\"ui-icon ui-icon-extlink\" style=\"float: left;\"></span> '.t(532, \"Navigate CMS Marketplace\").'</a>\r\n                        </div>\r\n                    ');\r\n                    $layout->add_script('\r\n                        $(\"#navigate_marketplace_install_from_hash_error\").dialog({\r\n                            modal: true,\r\n                            title: \"'.t(56, \"Unexpected error\").'\"\r\n                        });\r\n                    ');\r\n                }\r\n\r\n            }\r\n        // don't break, we want to show the themes grid right now (theme_upload by browser upload won't trigger)\r\n\r\n        case 'extension_upload':\r\n            if(!naviforms::check_csrf_token())\r\n            {\r\n                $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n            }\r\n            else if(isset($_FILES['extension-upload']) && $_FILES['extension-upload']['error']==0  && $user->permission(\"extensions.install\")==\"true\")\r\n            {\r\n                // uncompress ZIP and copy it to the extensions dir\r\n                $tmp = trim(substr($_FILES['extension-upload']['name'], 0, strpos($_FILES['extension-upload']['name'], '.')));\r\n                $extension_name = filter_var($tmp, FILTER_SANITIZE_EMAIL);\r\n\r\n                if($tmp != $extension_name) // INVALID file name\r\n                {\r\n                    $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                }\r\n                else\r\n                {\r\n                    // security validation\r\n                    $secure = extension::check_upload($_FILES['extension-upload'], $extension_name);\r\n\r\n                    if($secure !== true)\r\n                    {\r\n                        $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                    }\r\n                    else // everything seems fine, go ahead\r\n                    {\r\n                        @mkdir(NAVIGATE_PATH.'/plugins/'.$extension_name);\r\n\r\n                        $zip = new ZipArchive;\r\n                        if($zip->open($_FILES['extension-upload']['tmp_name']) === TRUE)\r\n                        {\r\n                            $zip->extractTo(NAVIGATE_PATH.'/plugins/'.$extension_name);\r\n                            $zip->close();\r\n\r\n                            $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                        }\r\n                        else // zip extraction failed\r\n                        {\r\n                            $layout->navigate_notification(t(262, 'Error uploading file'), true, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // don't break!\r\n\r\n\t\tdefault:\r\n            $list = extension::list_installed(\"all\", false);\r\n\t\t\t$out = extensions_grid($list);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn $out;\r\n}\r\n\r\nfunction extensions_grid($list)\r\n{\r\n    global $layout;\r\n    global $user;\r\n    global $current_version;\r\n\r\n    $navibars = new navibars();\r\n    $navibars->title(t(327, 'Extensions'));\r\n\r\n    $marketplace = isset($_REQUEST['marketplace']);\r\n\r\n    if($user->permission(\"extensions.install\")==\"true\")\r\n    {\r\n        $navibars->add_actions(\r\n            array(\r\n                '<a href=\"#\" id=\"extension-upload-button\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/package_add.png\"> '.t(461, 'Install from file').'</a>'\r\n            )\r\n        );\r\n    }\r\n\r\n    if(!$marketplace)\r\n    {\r\n        $navibars->add_actions(\tarray ( 'search_form' ));\r\n    }\r\n\r\n    $grid = new navigrid('extensions');\r\n\r\n    $grid->set_header('\r\n        <div class=\"navibrowse-path ui-corner-all\">\r\n            <input type=\"checkbox\" id=\"extension-available-button\" /><label for=\"extension-available-button\"><img src=\"img/icons/silk/plugin.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(528, 'Available').'</label>\r\n            '.($user->permission(\"extensions.marketplace\")==\"true\"? '<input type=\"checkbox\" id=\"extension-marketplace-button\" /><label for=\"extension-marketplace-button\"><img src=\"img/icons/silk/basket.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(527, 'Marketplace').'</label>' : '').'\r\n        </div>\r\n\t');\r\n\r\n    $layout->add_script('\r\n        $(\"#extension-available-button\").button().on(\"click\", function()\r\n        {\r\n            window.location.replace(\"?fid=extensions\");\r\n        });\r\n        $(\"#extension-marketplace-button\").button();\r\n        $(\"#extension-marketplace-button\").button().on(\"click\", function()\r\n        {\r\n            window.location.replace(\"?fid=extensions&marketplace\");\r\n        });\r\n\r\n        $(\".navibrowse-path input\").removeAttr(\"checked\");\r\n        $(\"#extension-'.($marketplace? 'marketplace' : 'available').'-button\").attr(\"checked\", \"checked\");\r\n        $(\"#extension-marketplace-button,#extension-available-button\").button(\"refresh\");\r\n    ');\r\n\r\n    if(!$marketplace)\r\n    {\r\n        $grid->item_size(220, 220);\r\n        $grid->thumbnail_size(205, 145);\r\n\r\n        $extensions = array();\r\n\r\n        for($i=0; $i < count($list); $i++)\r\n        {\r\n            $extension_has_options = !empty($list[$i]['options']);\r\n            // ignore options for extensions of type payment_method\r\n            if($list[$i]['type']=='payment_method')\r\n                $extension_has_options = false;\r\n\r\n            $extensions[] = array(\r\n                'id'\t=>  $list[$i]['code'],\r\n                'name'\t=>\t'<div class=\"navigrid-item-title\">'.$list[$i]['title'].'<br />v'.$list[$i]['version'].'</div>',\r\n                'thumbnail' => NAVIGATE_URL.'/plugins/'.$list[$i]['code'].'/thumbnail.png',\r\n                'description' => $list[$i]['description'],\r\n                'header' => '',\r\n                'footer' => '\r\n                    <div class=\"buttonset navigrid-item-buttonset\" style=\" font-size: 0.6em; margin-top: 5px; visibility: hidden; \"\r\n                         extension=\"'.$list[$i]['code'].'\" extension-title=\"'.$list[$i]['title'].'\"\r\n                         run=\"'.$list[$i]['run'].'\" enabled=\"'.$list[$i]['enabled'].'\"  favorite=\"'.$list[$i]['favorite'].'\">\r\n                        <button class=\"navigrid-extensions-info\" title=\"'.t(457, 'Information').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/information.png\"></button>'.\r\n                        //(empty($list[$i]['run'])?       '' : '<button class=\"navigrid-extensions-favorite\" title=\"'.t(464, 'Favorite').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/heart_'.($list[$i]['favorite']=='1'? 'delete' : 'add').'.png\"></button>').\r\n                        (!$extension_has_options?   '' : '<button class=\"navigrid-extensions-settings\" title=\"'.t(459, 'Settings').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/cog.png\"></button>').\r\n                        (empty($list[$i]['update']) || ($user->permission(\"extensions.update\")==\"false\")?    '' : '<button class=\"navigrid-extensions-update\" title=\"'.t(463, 'Update available').': '.$list[$i]['update'].'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/asterisk_orange.png\"></button>').\r\n                        '<button '.(($list[$i]['enabled']==='0')? 'style=\"display: none;\"' : '').' class=\"navigrid-extensions-disable\" title=\"'.t(460, 'Disable').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/delete.png\"></button>'.\r\n                        '<button '.(($list[$i]['enabled']==='1')? 'style=\"display: none;\"' : '').' class=\"navigrid-extensions-enable\" title=\"'.t(462, 'Enable').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/accept.png\"></button>'.\r\n                        ($user->permission(\"extensions.delete\")==\"true\"? '<button '.(($list[$i]['enabled']==='1')? 'style=\"display: none;\"' : '').' class=\"navigrid-extensions-remove\" title=\"'.t(35, 'Delete').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/cross.png\"></button>' : '').'\r\n                    </div>\r\n                '\r\n            );\r\n        }\r\n\r\n        $grid->items($extensions);\r\n\r\n        $navibars->add_content($grid->generate());\r\n\r\n        $navibars->add_content('<div id=\"navigrid-extension-information\" title=\"\" style=\" display: none; \"></div>');\r\n        $navibars->add_content('<div id=\"navigrid-extension-options\" title=\"\" style=\" display: none; \"></div>');\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-extensions-remove-confirmation\" title=\"'.t(59, 'Confirmation').'\" style=\" display: none; \">\r\n                '.t(57, 'Do you really want to delete the item?').'\r\n            </div>'\r\n        );\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-extensions-update\" title=\"'.t(285, 'Update').'\" style=\" display: none; \">\r\n                <iframe src=\"about:blank\"\r\n                    class=\"ui-corner-all\"\r\n                    border=\"0\" frameborder=\"0\" allowtransparency=\"true\">\r\n                </iframe>\r\n            </div>'\r\n        );\r\n\r\n        $out = $navibars->generate();\r\n\r\n        $layout->add_script('\r\n            $.ajax({\r\n                type: \"GET\",\r\n                dataType: \"script\",\r\n                cache: true,\r\n                url: \"lib/packages/extensions/extensions.js?r='.$current_version->revision.'\",\r\n                complete: function()\r\n                {                   \r\n                    navigate_extensions_refresh();\r\n                }\r\n            });\r\n\r\n            $(window).on(\"load\", function()\r\n            {\r\n                $(\".navigrid-item-buttonset\").each(function(i, el)\r\n                {\r\n                    $(el).hide().css(\"visibility\", \"visible\");\r\n                    $(el).fadeIn();\r\n                    $(\".navigrid-extensions-disable\").addClass(\"ui-corner-right\");\r\n                });\r\n            });\r\n\r\n            function navitable_quicksearch(value)\r\n            {\r\n                $(\".navigrid-item\").hide();\r\n\r\n                if(value==\"\")\r\n                    $(\".navigrid-item\").show();\r\n                else\r\n                {\r\n                    $(\".navigrid-item\").each(function(i, el)\r\n                    {\r\n                        var item_text = $(el).text().toLowerCase();\r\n                        if( item_text.indexOf(value.toLowerCase()) >= 0 )\r\n                            $(el).fadeIn();\r\n                    });\r\n                }\r\n            }\r\n            \r\n            $(\"#extension-upload-button\").on(\"click\", function()\r\n            {\r\n                $(\"#extension-upload-button\").parent().find(\"form\").remove();\r\n                $(\"#extension-upload-button\").after(\\'<form action=\"?fid=extensions&act=extension_upload\" enctype=\"multipart/form-data\" method=\"post\"><input type=\"file\" name=\"extension-upload\" style=\" display: none;\" /><input type=\"hidden\" id=\"_nv_csrf_token\" name=\"_nv_csrf_token\" value=\"\\'+navigatecms.csrf_token+\\'\" /></form>\\');\r\n                $(\"#extension-upload-button\").next().find(\"input\").on(\"change\", function()\r\n                {\r\n                    if($(this).val()!=\"\")\r\n                        $(this).parent().submit();\r\n                });\r\n                $(\"#extension-upload-button\").next().find(\"input\").trigger(\"click\");\r\n\r\n                return false;\r\n            });\r\n\r\n        ');\r\n    }\r\n    else\r\n    {\r\n        $html = '\r\n            <div class=\"navibrowse-path ui-corner-all\">\r\n                <input type=\"checkbox\" id=\"extension-available-button\" /><label for=\"extension-available-button\"><img src=\"img/icons/silk/rainbow.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(528, 'Available').'</label>\r\n                <input type=\"checkbox\" id=\"extension-marketplace-button\" /><label for=\"extension-marketplace-button\"><img src=\"img/icons/silk/basket.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(527, 'Marketplace').'</label>\r\n            </div>\r\n        ';\r\n        $html .= '\r\n            <iframe src=\"http://www.navigatecms.com/en/marketplace/extensions\"\r\n                    style=\"visibility: hidden; width: 1px; height: 1px;\"\r\n                    class=\"ui-corner-all\"\r\n                    border=\"0\" frameborder=\"0\" allowtransparency=\"true\">\r\n            </iframe>\r\n        ';\r\n\r\n        $navibars->add_content('<div id=\"navigate-content-safe\" class=\"ui-corner-all\">'.$html.'</div>');\r\n\r\n        $layout->add_script('\r\n            $(window).on(\"resize focus blur\", function()\r\n            {\r\n                $(\"#navigate-content-safe iframe\").css({\"width\": 1, \"height\": 1});\r\n\r\n                $(\"#navigate-content-safe iframe\").css({\r\n                    padding: \"0px 4px\",\r\n                    width: $(\".navibrowse-path\").width() + parseInt($(\".navibrowse-path\").css(\"padding-right\")) * 2,\r\n                    height: $(\"#navigate-content-safe\").height() - $(\"#navigate-content-safe div:first\").height() - 24,\r\n                    visibility: \"visible\"\r\n                });\r\n            });\r\n\r\n            $(\"#navigate-content-safe iframe\").on(\"focus blur load\", function(){ $(window).trigger(\"resize\");});\r\n        ');\r\n\r\n        $out = $navibars->generate();\r\n    }\r\n\r\n    $layout->add_script('\r\n        function navigatecms_marketplace_install_from_hash(hash)\r\n        {\r\n            window.location.replace(\"?fid=extensions&act=install_from_hash&hash=\"+hash);\r\n        }\r\n\r\n        if(typeof(window.postMessage) != \"undefined\")\r\n        {\r\n           if(typeof(window.addEventListener) != \"undefined\")\r\n            {\r\n                window.addEventListener(\"message\", function(event) {\r\n                    navigatecms_marketplace_install_from_hash(event.data);\r\n                }, false);\r\n            }\r\n            else\r\n            {\r\n                window.attachEvent(\"onmessage\", function(e) {\r\n                    navigatecms_marketplace_install_from_hash(e.data);\r\n                });\r\n            }\r\n        }\r\n    ');\r\n\r\n    if(isset($_REQUEST['edit_settings']))\r\n    {\r\n        $layout->add_script('\r\n            $(window).on(\"load\", function()\r\n            {\r\n                $(\"div.buttonset[extension='.$_REQUEST['edit_settings'].']\").find(\".navigrid-extensions-settings\").trigger(\"click\");\r\n            });\r\n        ');\r\n    }\r\n\r\n    return $out;\r\n}\r\n\r\nfunction extensions_options($extension, $saved=null)\r\n{\r\n    global $layout;\r\n    global $website;\r\n    global $events;\r\n\r\n    $layout = null;\r\n    $layout = new layout('navigate');\r\n\r\n    if($saved!==null)\r\n    {\r\n        if($saved)\r\n        {\r\n            $layout->navigate_notification(t(53, \"Data saved successfully.\"), false, false, 'fa fa-check');\r\n        }\r\n        else\r\n        {\r\n            $layout->navigate_notification(t(56, \"Unexpected error\"), true, true);\r\n        }\r\n    }\r\n\r\n    $navibars = new navibars();\r\n    $naviforms = new naviforms();\r\n\r\n    $navibars->title(t(327, 'Extensions'));\r\n\r\n    $layout->navigate_media_browser();\t// we can use media browser in this function\r\n\r\n    $navibars->add_actions(\r\n        array(\r\n            '<a href=\"#\" onclick=\"javascript: navigate_media_browser();\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/images.png\"> '.t(36, 'Media').'</a>'\r\n        )\r\n    );\r\n\r\n    $navibars->add_actions(\r\n        array(\r\n            '<a href=\"#\" onclick=\"navigate_tabform_submit(0);\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/accept.png\"> '.t(34, 'Save').'</a>'\r\n        )\r\n    );\r\n\r\n    $navibars->form();\r\n\r\n    $navibars->add_tab(t(7, 'Configuration'));\r\n\r\n    $navibars->add_tab_content($naviforms->hidden('form-sent', 'true'));\r\n    $navibars->add_tab_content($naviforms->csrf_token());\r\n\r\n    // show a language selector (only if it's a multi language website and has properties)\r\n    if(!empty($extension->definition->options) && count($website->languages) > 1)\r\n    {\r\n        $website_languages_selector = $website->languages();\r\n        $website_languages_selector = array_merge(array('' => '('.t(443, 'All').')'), $website_languages_selector);\r\n\r\n        $navibars->add_tab_content_row(\r\n            array(\r\n                '<label>'.t(63, 'Languages').'</label>',\r\n                $naviforms->buttonset('language_selector', $website_languages_selector, '', \"navigate_tabform_language_selector(this);\")\r\n            ),\r\n\t        \"navigate-form-language_selector\"\r\n        );\r\n\r\n\t    // hide languages selector if there isn't a multilanguage property\r\n\t    $layout->add_script('\r\n\t\t\t$(document).ready(function()\r\n\t\t    {\r\n\t\t\t\tif($(\"#navigate-content-tabs-1 .navigate-form-row[lang]\").length < 1)\r\n\t\t\t\t{\r\n\t\t\t\t\t$(\"#navigate-form-language_selector\").css(\"display\", \"none\");\r\n\t\t\t\t}\r\n\t\t    });\r\n\t    ');\r\n    }\r\n\r\n    foreach($extension->definition->options as $option)\r\n    {\r\n        $property = new property();\r\n        $property->load_from_object($option, $extension->settings[$option->id], $extension);\r\n\r\n        if($property->type == 'tab')\r\n        {\r\n            $navibars->add_tab($property->name);\r\n            if(count($website->languages) > 1)\r\n            {\r\n                $website_languages_selector = $website->languages();\r\n                $website_languages_selector = array_merge(array('' => '('.t(443, 'All').')'), $website_languages_selector);\r\n\r\n                $navibars->add_tab_content_row(\r\n                    array(\r\n                        '<label>'.t(63, 'Languages').'</label>',\r\n                        $naviforms->buttonset('language_selector', $website_languages_selector, '', \"navigate_tabform_language_selector(this);\")\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        if($property->type == 'function')\r\n        {\r\n            $fname = $option->dvalue;\r\n            if(empty($fname))\r\n                $fname = $option->function;\r\n\r\n            // load the extension source code, if not already done\r\n            extension::include_php($extension->code);\r\n\r\n            if(!function_exists($fname))\r\n                continue;\r\n\r\n            call_user_func(\r\n                $fname,\r\n                array(\r\n                    'extension' => $extension,\r\n                    'navibars' => $navibars,\r\n                    'naviforms' => $naviforms\r\n                )\r\n            );\r\n        }\r\n        else\r\n        {\r\n            $navibars->add_tab_content(navigate_property_layout_field($property, $extension));\r\n        }\r\n    }\r\n\r\n    $layout->add_content('<div id=\"navigate-content\" class=\"navigate-content ui-corner-all\">'.$navibars->generate().'</div>');\r\n    $layout->navigate_additional_scripts();\r\n    navigate_property_layout_scripts(); // add javascript to enable special buttons and functions (Copy from, etc.)\r\n    $layout->add_script('\r\n        $(\"html\").css(\"background\", \"transparent\");\r\n    ');\r\n    \r\n    $out = $layout->generate();\r\n\r\n    return $out;\r\n}\r\n\r\nfunction extensions_dialog($extension, $function, $params)\r\n{\r\n    global $layout;\r\n\r\n    $layout = null;\r\n    $layout = new layout('navigate');\r\n\r\n\t// load the extension source code, if not already done\r\n    extension::include_php($extension->code);\r\n\r\n    if(function_exists($function))\r\n    {\r\n        call_user_func($function, $params);\r\n        $out = $layout->generate();\r\n    }\r\n    else\r\n    {\r\n        $out = 'ERROR: \"'.$function.'\" function does not exist!';\r\n    }\r\n\r\n    return $out;\r\n}\r\n\r\n?>", "<?php\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/items/item.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/structure/structure.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/comments/comment.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/blocks/block_group.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/blocks/block.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/files/file.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/properties/property.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/external/misc/zipfile.php');\r\n\r\nclass theme\r\n{\r\n\tpublic $name;\r\n\tpublic $title;\r\n    public $version;\r\n\tpublic $author;\r\n\tpublic $website;\r\n\tpublic $shop;\r\n\t\r\n\tpublic $languages;\r\n\tpublic $styles;\r\n\tpublic $options;\r\n    public $block_groups;\r\n\tpublic $blocks;\r\n\tpublic $templates;\r\n    public $webusers;\r\n\r\n    public $sections;\r\n\tpublic $dictionary;\r\n\tpublic $dictionaries;\r\n\t\r\n\tpublic function load($name)\r\n\t{\r\n\t\t$json = @file_get_contents(NAVIGATE_PATH.'/themes/'.$name.'/'.$name.'.theme');\r\n\r\n\t\tif(empty($json))\r\n        {\r\n            return false;\r\n        }\r\n\t\t\t\r\n\t\t$theme = json_decode($json);\r\n\r\n        if(empty($theme))\r\n        {\r\n            return false;\r\n        }\r\n\r\n\t\t//var_dump(json_last_error());\r\n\t\t$this->name = $name;\r\n\t\t$this->title = $theme->title;\r\n\t\t$this->version = $theme->version;\r\n\t\t$this->author = $theme->author;\r\n\t\t$this->website = $theme->website;\r\n\t\t$this->shop = value_or_default($theme->shop, false);\r\n\r\n        // remove \"@\" from styles section definition\r\n        $this->styles = json_encode($theme->styles);\r\n        $this->styles = str_replace(\"@\", \"\", $this->styles);\r\n        $this->styles = json_decode($this->styles);\r\n\r\n\t\t$this->languages = $theme->languages;\r\n\t\t$this->options = (array)$theme->options;\r\n\t\t$this->blocks = (array)$theme->blocks;\r\n\t\t$this->block_groups = (array)$theme->block_groups;\r\n\t\t$this->templates = (array)$theme->templates;\r\n\t\t$this->webusers = (array)$theme->webusers;\r\n        $this->content_samples = (array)$theme->content_samples;\r\n\r\n\t\t$this->content_samples_parse(null);\r\n\r\n\t\t// in 2.0 templates->section \"code\" was replaced by \"id\"\r\n\t\t// added some code to keep compatibility with existing themes\r\n\t\tfor($t=0; $t < count($this->templates); $t++)\r\n\t\t{\r\n\t\t    if(isset($this->templates[$t]->sections))\r\n            {\r\n                for ($s = 0; $s < count($this->templates[$t]->sections); $s++)\r\n                {\r\n                    if(!is_array($this->templates[$t]->sections))\r\n                    {\r\n                        $this->templates[$t]->sections = (array) $this->templates[$t]->sections;\r\n                    }\r\n\r\n                    if(!empty($this->templates[$t]->sections))\r\n                    {\r\n                        if (!isset($this->templates[$t]->sections[$s]->id))\r\n                        {\r\n                            $this->templates[$t]->sections[$s]->id = $this->templates[$t]->sections[$s]->code;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\t\t\t// remove spaces in \"uses\" attribute value, if declared\r\n            if(isset($this->templates[$t]->uses))\r\n            {\r\n                $this->templates[$t]->uses = str_replace(\" \", \"\", $this->templates[$t]->uses);\r\n            }\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n    public function delete()\r\n    {\r\n        global $user;\r\n\r\n        if($user->permission(\"themes.delete\")==\"false\")\r\n        {\r\n            throw new Exception(t(610, \"Sorry, you are not allowed to execute this function.\"));\r\n        }\r\n\r\n        $ok = false;\r\n        if(file_exists(NAVIGATE_PATH.'/themes/'.$this->name))\r\n        {\r\n            core_remove_folder(NAVIGATE_PATH.'/themes/'.$this->name);\r\n            $ok = !file_exists(NAVIGATE_PATH.'/themes/'.$this->name);\r\n        }\r\n\r\n        return $ok;\r\n    }\r\n\t\r\n\tpublic function templates($type=NULL)\r\n\t{\t\t\r\n\t\t$data = array();\r\n\r\n        if(!is_array($this->templates))\r\n        {\r\n            $this->templates = array();\r\n        }\r\n\r\n\t\tforeach($this->templates as $template)\r\n\t\t{\r\n\t\t\t$template->id = $template->type;\r\n\t\t\t$template->title = $this->template_title($template->type);\r\n\t\t\t$data[] = $template;\r\n\r\n            if($type == $template->id)\r\n            {\r\n                return $template;\r\n            }\r\n\t\t}\r\n\t\t\r\n\t\treturn $data;\r\n\t}\r\n\t\r\n\tpublic function template_title($type, $add_theme_name=true)\r\n\t{\r\n\t\t$out = $this->t($type);\r\n\r\n\t\tif($out==$type)\r\n\t\t{\r\n\t\t\t$types = theme::types();\r\n\t\t\t$out = (empty($types[$type])? $type : $types[$type]);\r\n\t\t}\r\n\t\t\r\n\t\tif($add_theme_name)\r\n        {\r\n            $out = $this->title . ' | ' . $out;\r\n        }\r\n\t\t\r\n\t\treturn $out;\r\n\t}\r\n\t\r\n\tpublic function t($code='')\r\n\t{\r\n        global $DB;\r\n\t\tglobal $user;\r\n\t\tglobal $webuser;\r\n        global $website;\r\n        global $session;\r\n\r\n\t\t$out = \"\";\r\n\r\n\t\tif(empty($this->dictionary))\r\n\t\t{\r\n\t\t\t$theme_languages = (array)$this->languages;\r\n            $file = '';\r\n\r\n    \t\tif(!is_array($theme_languages))\r\n\t\t\t\t$theme_languages = array();\r\n\r\n            // if we are in Navigate CMS, user has the default language\r\n            // if we call this function from the website, the session has the default language\r\n            $current_language = $session['lang'];\r\n            if(empty($current_language) && !empty($webuser))\r\n            {\r\n                $current_language = $webuser->language;\r\n            }\r\n\r\n            if(empty($current_language) && !empty($user))\r\n            {\r\n                $current_language = $user->language;\r\n            }\r\n\r\n\t\t\tforeach($theme_languages as $lcode => $lfile)\r\n\t\t\t{\r\n\t\t\t\tif( $lcode==$current_language || empty($file))\r\n                {\r\n                    $file = $lfile;\r\n                }\r\n\t\t\t}\r\n\r\n\t\t\t$json = @file_get_contents(NAVIGATE_PATH.'/themes/'.$this->name.'/'.$file);\r\n\t\t\r\n\t\t\tif(!empty($json))\t\t\r\n            {\r\n                $this->dictionary = (array)json_decode($json);\r\n            }\r\n\r\n            // maybe we have a custom translation added in navigate / webdictionary ?\r\n            if(!empty($website->id))\r\n            {\r\n                $DB->query('\r\n                  SELECT subtype, lang, text\r\n                    FROM nv_webdictionary\r\n                   WHERE website = :wid\r\n                     AND node_type = \"theme\"\r\n                     AND lang = :lang\r\n                     AND theme = :theme',\r\n                    'object',\r\n                    array(\r\n                        ':wid' => $website->id,\r\n                        ':lang' => $current_language,\r\n                        ':theme' => $this->name\r\n                    )\r\n                );\r\n                $rs = $DB->result();\r\n\r\n                for($r=0; $r < count($rs); $r++)\r\n                {\r\n                    $this->dictionary[$rs[$r]->subtype] = $rs[$r]->text;\r\n                }\r\n            }\r\n\t\t}\r\n\r\n\t\tif(is_string($code))\r\n\t\t{\r\n\t\t\t$out = $code;\r\n\r\n\t        if(substr($out, 0, 1)=='@')  // get translation from theme dictionary\r\n            {\r\n                $out = substr($out, 1);\r\n            }\r\n\r\n\t        if(!empty($this->dictionary[$out]))\r\n            {\r\n                $out = $this->dictionary[$out];\r\n            }\r\n\t\t}\r\n\t\t\r\n\t\treturn $out;\r\n\t}\r\n\t\r\n\tpublic function get_translations()\r\n\t{\t\t\r\n\t\tif(empty($this->dictionaries))\r\n\t\t{\r\n\t\t\t$dict = array();\r\n\t\t\tforeach($this->languages as $lcode => $lfile)\r\n\t\t\t{\r\n\t\t\t\t$jarray = NULL;\r\n\t\t\t\t$json = @file_get_contents(NAVIGATE_PATH.'/themes/'.$this->name.'/'.$lfile);\r\n\t\t\t\r\n\t\t\t\tif(!empty($json))\t\t\r\n                {\r\n                    $jarray = (array)json_decode($json);\r\n                }\r\n\t\t\t\t\r\n\t\t\t\tif(!empty($jarray))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($jarray as $code => $text)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$id = count($dict) + 1;\r\n\t\t\t\t\t\t$id = -$id;\r\n\t\t\t\t\t\t$dict[] = array(\r\n                            'id'\t\t=>\t$id, //.' | '.$this->name . ' | '.$code,\r\n                            'theme'\t\t=>\t$this->name,\r\n\t\t\t\t\t\t\t'source'    =>  'theme.'.$this->name.'.'.$code,\r\n                            'node_id'\t=>\t$code,\r\n                            'lang'\t\t=>\t$lcode,\r\n                            'text'\t\t=>\t$text\r\n                        );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$this->dictionaries = $dict;\r\n\t\t}\r\n\t\t\r\n\t\treturn $this->dictionaries;\r\n\t}\t\r\n\r\n\tpublic static function types()\r\n\t{\t\t\r\n\t\t$template_types = array(\r\n            'home'\t\t\t    =>\tt(187, 'Home page'),\r\n            'content'\t\t    =>\tt(9, 'Content'),\r\n            'gallery'\t\t    =>\tt(210, 'Gallery'),\r\n            'blog'\t\t\t    =>\tt(375, 'Blog'),\r\n            'blog_entry'\t    =>\tt(376, 'Blog entry'),\r\n            'item'\t\t\t    =>\tt(630, 'Element'),\r\n            'product'\t\t    =>\tt(198, 'Product'),\r\n            'product_list'\t    =>\tt(737, 'Product list'),\r\n            'cart'\t            =>\tt(736, 'Cart'),\r\n            'checkout'          =>\tt(738, 'Checkout'),\r\n            'customer_account'  =>\tt(817, 'Customer account'),\r\n            'list'\t\t\t    =>\tt(39, 'List'),\r\n            'contact'\t        =>\tt(377, 'Contact'),\r\n            'search'\t\t    =>\tt(41, 'Search'),\r\n            'newsletter'\t    =>\tt(249, 'Newsletter'),\r\n            'portfolio'         =>  t(447, 'Portfolio'),\r\n            'portfolio_item'    =>  t(448, 'Portfolio item'),\r\n            'not_found'         =>  t(13, 'Not found')\r\n        );\r\n\r\n\t\treturn $template_types;\r\n\t}\r\n\t\r\n\tpublic static function list_available()\r\n\t{\r\n\t\t$themes = glob(NAVIGATE_PATH.'/themes/*/*.theme');\r\n        \r\n\t\tfor($t=0; $t < count($themes); $t++)\r\n\t\t{\r\n            $theme_json = @json_decode(@file_get_contents($themes[$t]));\r\n\r\n            debug_json_error($themes[$t]); // if debug is enabled, show last json error\r\n\r\n            $code = substr($themes[$t], strrpos($themes[$t], '/')+1);\r\n            $code = substr($code, 0, strpos($code, '.theme'));\r\n\r\n            $themes[$t] = '';\r\n\r\n            if(!empty($theme_json))\r\n            {\r\n                $themes[$t] = array(\r\n                    'code'  =>  $code,\r\n                    'title' =>  $theme_json->title,\r\n                    'version' => $theme_json->version\r\n                );\r\n            }\r\n\t\t}\r\n\r\n        $themes = array_filter($themes);\r\n        sort($themes);\r\n\r\n\t\treturn $themes;\r\n\t}\r\n\r\n    public function block_group_blocks($block_group_id)\r\n    {\r\n        $out = array();\r\n        foreach($this->block_groups as $bg)\r\n        {\r\n            if($bg->id == $block_group_id)\r\n            {\r\n                foreach($bg->blocks as $bgb)\r\n                {\r\n                    if(empty($bgb->type))\r\n                    {\r\n                        $bgb->type = $bgb->id;\r\n                    }\r\n                    $out[$bgb->id] = $bgb;\r\n                }\r\n            }\r\n        }\r\n        return $out;\r\n    }\r\n\r\n    // add special samples if the theme is using foundation, bootstrap...\r\n    public function content_samples_parse($ws=null)\r\n    {\r\n        global $website;\r\n\r\n\t    if(empty($ws) && !empty($website))\r\n        {\r\n            $ws = $website;\r\n        }\r\n\t    else\r\n        {\r\n            $ws = new website();\r\n        }\r\n\r\n        $content_samples = array();\r\n\r\n        $grid_samples = array(\r\n            '6,6',\r\n            '4,4,4',\r\n            '3,3,3,3',\r\n            '9,3', '3,9',\r\n            '8,4', '4,8',\r\n            '7,5', '5,7',\r\n            '6,3,3', '3,6,3', '3,3,6'\r\n        );\r\n\r\n        $text = \"Vis prodesset adolescens adipiscing te, usu mazim perfecto recteque at, assum putant erroribus mea in.\\n\";\r\n        $text.= \"Vel facete imperdiet id, cum an libris luptatum perfecto, vel fabellas inciderint ut.\";\r\n\r\n        if(!empty($this->content_samples))\r\n        {\r\n            foreach($this->content_samples as $cs)\r\n            {\r\n                switch($cs->file)\r\n                {\r\n                    case 'foundation_grid':\r\n                    case 'bootstrap_grid':\r\n                    case 'grid':\r\n                        $stylesheets = $ws->content_stylesheets('array', \"content\", false, $this);\r\n\r\n                        $html_pre = '<html><head>';\r\n\r\n                        if(!empty($stylesheets) && is_array($stylesheets))\r\n                        {\r\n                            foreach($stylesheets as $ss)\r\n                            {\r\n                                $html_pre.= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.$ss.'\" />';\r\n                            }\r\n                        }\r\n\r\n                        $html_pre.= '</head><body><div id=\"navigate-theme-content-sample\" style=\" width: 99%; \">';\r\n\r\n                        foreach($grid_samples as $gs)\r\n                        {\r\n                            $cols = explode(',', $gs);\r\n\r\n                            $name = \"Grid &nbsp; [ \";\r\n\r\n                            $html = $html_pre.'<div class=\"row\">';\r\n                            foreach($cols as $col)\r\n                            {\r\n                                $name .= $col.str_pad(\"\", $col, \"-\");\r\n                                $scol = $col * 2;\r\n                                // set the small column to the closest step: 6 or 12\r\n                                if($scol >= 8) $scol = 12;\r\n                                if($scol <= 7) $scol = 6;\r\n\r\n                                $html .= '<div class=\"col-md-'.$col.' medium-'.$col.' col-xs-'.$scol.' small-'.$scol.' columns\">'.$text.'</div>';\r\n                            }\r\n                            $name .= \" ]\";\r\n                            $html .= '</div>'; // close row\r\n                            $html .= '<div><p>+</p></div>'; // add extra space under the row\r\n                            $html .= '</div>'; // close copy enabled content\r\n                            $html .= '</body></html>';\r\n\r\n                            $content_samples[] = json_decode(json_encode(array('title' => $name, 'content' => $html)));\r\n                        }\r\n                        break;\r\n\r\n                    case 'skeleton_grid':\r\n                        $stylesheets = explode(\",\", $ws->content_stylesheets());\r\n                        $translate = array(\r\n                            1   => \"one\",\r\n                            2   => \"two\",\r\n                            3   => \"three\",\r\n                            4   => \"four\",\r\n                            5   => \"fix\",\r\n                            6   => \"six\",\r\n                            7   => \"seven\",\r\n                            8   => \"eight\",\r\n                            9   => \"nine\",\r\n                            10   => \"ten\",\r\n                            11   => \"eleven\",\r\n                            12   => \"twelve\"\r\n                        );\r\n\r\n                        $html_pre = '<html><head>';\r\n                        foreach($stylesheets as $ss)\r\n                        {\r\n                            $html_pre.= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.$ss.'\" />';\r\n                        }\r\n                        $html_pre.= '</head><body><div id=\"navigate-theme-content-sample\" style=\" width: 99%; \">';\r\n\r\n                        foreach($grid_samples as $gs)\r\n                        {\r\n                            $cols = explode(',', $gs);\r\n\r\n                            $name = \"Grid &nbsp; [ \";\r\n\r\n                            $html = $html_pre.'<div class=\"row\">';\r\n                            foreach($cols as $col)\r\n                            {\r\n                                $name .= $col.str_pad(\"\", $col, \"-\");\r\n                                $scol = $col * 2;\r\n                                // set the small column to the closest step: 6 or 12\r\n                                if($scol >= 8) $scol = 12;\r\n                                if($scol <= 7) $scol = 6;\r\n\r\n                                $html .= '<div class=\"'.$translate[$col].' columns\">'.$text.'</div>';\r\n                            }\r\n                            $name .= \" ]\";\r\n                            $html .= '</div>'; // close row\r\n                            $html .= '<div><p>+</p></div>'; // add extra space under the row\r\n                            $html .= '</div>'; // close copy enabled content\r\n                            $html .= '</body></html>';\r\n\r\n                            $content_samples[] = json_decode(json_encode(array('title' => $name, 'content' => $html)));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        $content_samples[] = $cs;\r\n                }\r\n            }\r\n\r\n            $this->content_samples = $content_samples;\r\n        }\r\n    }\r\n\r\n    public static function check_upload($file_upload, $theme_name)\r\n    {\r\n        // check mime\r\n        if(!in_array($file_upload['type'], array('application/zip', 'application/x-zip-compressed')))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // check file extension\r\n        if(pathinfo($file_upload['name'], PATHINFO_EXTENSION) != 'zip')\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // extract the zip in a temporary folder\r\n        $zip = new ZipArchive;\r\n        if($zip->open($file_upload['tmp_name']) !== true)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $tempdir = NAVIGATE_PRIVATE . '/tmp/' . uniqid('theme-check-');\r\n\r\n        mkdir($tempdir);\r\n        $zip->extractTo($tempdir);\r\n        $zip->close();\r\n\r\n        // theme definition exists?\r\n        if(!file_exists($tempdir . '/' . $theme_name . '.theme'))\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        // it's a valid json?\r\n        $theme_def = file_get_contents($tempdir . '/' . $theme_name . '.theme');\r\n        $theme_def = json_decode($theme_def);\r\n\r\n        if(json_last_error() != JSON_ERROR_NONE)\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        // check every php file included\r\n        $files = core_recursive_file_search($tempdir,  '/.*\\/*.php/');\r\n\r\n        $prohibited_functions = array(\r\n            'eval(',\r\n            'system(',\r\n            'exec(',\r\n            'shell_exec(',\r\n            'popen(',\r\n            'proc_open(',\r\n            'passthru(',\r\n            '`' // https://www.php.net/manual/en/language.operators.execution.php\r\n        );\r\n\r\n        foreach($files as $file)\r\n        {\r\n            // remove all spaces\r\n            $file_content = file_get_contents($file);\r\n            $file_content = str_replace(array(' ', \"\\t\", \"\\r\", \"\\n\"), '', $file_content);\r\n\r\n            foreach($prohibited_functions as $pf)\r\n            {\r\n                if(stripos($file_content, $pf) !== false)\r\n                {\r\n                    core_remove_folder($tempdir);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // check for \"dangerous\" files\r\n        $htaccess = core_recursive_file_search($tempdir,  '/.htaccess/');\r\n        $phpini = core_recursive_file_search($tempdir,  '/php.ini/');\r\n        if(!empty($htaccess) || !empty($phpini))\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        core_remove_folder($tempdir);\r\n\r\n        return true;\r\n    }\r\n\r\n    public function import_sample($ws=null)\r\n    {\r\n        global $DB;\r\n        global $website;\r\n        global $theme;\r\n\t    global $events;\r\n\r\n        if(is_null($ws))\r\n            $ws = $website;\r\n\r\n        if(!file_exists(NAVIGATE_PATH.'/themes/'.$this->name.'/'.$this->name.'_sample.zip'))\r\n        {\r\n            throw new Exception(t(56, 'Unexpected error'));\r\n        }\r\n\r\n        $ptf = NAVIGATE_PRIVATE.'/tmp/'.$this->name.'_sample';\r\n        core_remove_folder($ptf);\r\n\r\n        // decompress the zip file\r\n        $extracted = false;\r\n        $zip = new ZipArchive;\r\n        if($zip->open(NAVIGATE_PATH.'/themes/'.$this->name.'/'.$this->name.'_sample.zip') === TRUE)\r\n        {\r\n            @mkdir($ptf, 0777, true);\r\n            $extracted = $zip->extractTo($ptf);\r\n            if(!$extracted)\r\n            {\r\n                throw new Exception(t(56, 'Unexpected error'));\r\n            }\r\n            $zip->close();\r\n        }\r\n\r\n        // website languages (add website included languages)\r\n        if(file_exists($ptf.'/languages.var_export'))\r\n        {\r\n            eval('$wlangs = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/languages.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $wlangs = unserialize(file_get_contents($ptf.'/languages.serialized'));\r\n        }\r\n\r\n        if(!is_array($wlangs))  $wlangs = array();\r\n\r\n        foreach($wlangs as $lcode => $loptions)\r\n        {\r\n            if(!is_array($ws->languages) || !in_array($lcode, array_keys($ws->languages)))\r\n            {\r\n                $ws->languages[$lcode] = $loptions;\r\n            }\r\n        }\r\n\r\n        // theme options\r\n        if(file_exists($ptf.'/theme_options.var_export'))\r\n        {\r\n            eval('$toptions = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/theme_options.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $toptions = unserialize(file_get_contents($ptf.'/theme_options.serialized'));\r\n        }\r\n\r\n        $ws->theme_options = $toptions;\r\n\r\n        $ws->save();\r\n\r\n\r\n        // folders (if available)\r\n        $theme_files_parent = file::create_folder($this->name, \"folder/generic\", 0, $ws->id);\r\n\r\n        $folders = array();\r\n        if(file_exists($ptf.'/folders.var_export')) // available since v2.1.2\r\n        {\r\n            eval('$folders_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/folders.var_export')).';');\r\n        }\r\n\r\n        if(!empty($folders_or))\r\n        {\r\n            // assume folders are defined in order (first the parents, then their children)\r\n            foreach($folders_or as $f)\r\n            {\r\n                // error protection\r\n                if(empty($f->id))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                $folders[$f->id] = new file();\r\n                $folders[$f->id]->load_from_resultset(array($f));\r\n                $folders[$f->id]->id = 0;\r\n                $folders[$f->id]->website = $ws->id;\r\n\r\n                if(isset($folders[$f->parent]))\r\n                {\r\n                    $folders[$f->id]->parent = $folders[$f->parent]->id;\r\n                }\r\n                else\r\n                {\r\n                    $folders[$f->id]->parent = $theme_files_parent;\r\n                }\r\n\r\n                $folders[$f->id]->insert();\r\n            }\r\n        }\r\n\r\n        \r\n        // files\r\n        $files = array();\r\n        if(file_exists($ptf.'/files.var_export'))\r\n        {\r\n            eval('$files_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/files.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $files_or = unserialize(file_get_contents($ptf.'/files.serialized'));\r\n        }\r\n\r\n        foreach($files_or as $f)\r\n        {\r\n            // error protection\r\n            if(empty($f->id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $files[$f->id] = new file();\r\n            $files[$f->id]->load_from_resultset(array($f));\r\n            $files[$f->id]->id = 0;\r\n            $files[$f->id]->website = $ws->id;\r\n\r\n            if(isset($folders[$f->parent]))\r\n            {\r\n                $files[$f->id]->parent = $folders[$f->parent]->id;\r\n            }\r\n            else\r\n            {\r\n                $files[$f->id]->parent = $theme_files_parent;\r\n            }\r\n\r\n            $files[$f->id]->insert();\r\n\r\n            // finally copy the sample file\r\n            @copy($ptf.'/files/'.$f->id, NAVIGATE_PRIVATE.'/'.$ws->id.'/files/'.$files[$f->id]->id);\r\n        }\r\n\r\n        // structure\r\n        $structure = array();\r\n        if(file_exists($ptf.'/structure.var_export'))\r\n        {\r\n            eval('$structure_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/structure.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $structure_or = unserialize(file_get_contents($ptf.'/structure.serialized'));\r\n        }\r\n\r\n        // hide existing structure entries\r\n        $DB->execute('\r\n            UPDATE nv_structure\r\n               SET permission = 2, visible = 0\r\n             WHERE website = '.$ws->id\r\n        );\r\n\r\n        // we need to insert the old categories in order, in other words, the parents before its children\r\n        // so to make things easy, we loop until we have no more categories to insert\r\n        // this could lead to an infinite loop, so we have to add a simple protection\r\n        $structure_categories_or = $structure_or;\r\n        $changes = true;\r\n        while(!empty($structure_categories_or) && $changes)\r\n        {\r\n            $changes = false;\r\n            foreach($structure_categories_or as $si => $category)\r\n            {\r\n                if(empty($category))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                $old_category_id = $category->id;\r\n                $category->id = 0;\r\n                $category->website = $ws->id;\r\n\r\n                if($category->parent > 0 && !isset($structure[$category->parent]))\r\n                {\r\n                    // this structure entry needs a parent category that's not yet inserted\r\n                    // ignore the current entry until the next loop\r\n                    continue;\r\n                }\r\n\r\n                // if this category has a parent != root, update the parent id with the new value given\r\n                if($category->parent > 0)\r\n                {\r\n                    $category->parent = $structure[$category->parent]->id;\r\n                }\r\n\r\n                $category->insert();\r\n                $changes = true;\r\n\r\n                $structure[$old_category_id] = $category;\r\n                unset($structure_categories_or[$si]);\r\n            }\r\n\r\n            $structure_categories_or = array_filter($structure_categories_or);\r\n        }\r\n\r\n\r\n        // elements\r\n        $items = array();\r\n        if(file_exists($ptf.'/items.var_export'))\r\n        {\r\n            eval('$items_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/items.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $items_or = unserialize(file_get_contents($ptf.'/items.serialized'));\r\n        }\r\n\r\n        foreach($items_or as $item)\r\n        {\r\n            // error protection\r\n            if(empty($item->id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $old_item_id = $item->id;\r\n            $item->id = 0;\r\n            $item->website = $ws->id;\r\n\r\n            // if this category has a parent != root, update the parent id with the new value given\r\n            if($item->category > 0)\r\n            {\r\n                $item->category = $structure[$item->category]->id;\r\n            }\r\n\r\n            $item->dictionary = theme::import_sample_parse_dictionary($item->dictionary, $files, $ws);\r\n\r\n            // gallery images (correct FILE ids)\r\n            if(!empty($item->galleries))\r\n            {\r\n                $ngallery = array();\r\n                foreach($item->galleries as $gid => $gallery)\r\n                {\r\n                    foreach($gallery as $fid => $caption)\r\n                    {\r\n                        $ngallery[$files[$fid]->id] = $caption;\r\n                    }\r\n\r\n                    $item->galleries[$gid] = $ngallery;\r\n                }\r\n            }\r\n\r\n            $item->insert();\r\n\r\n            $items[$old_item_id] = $item;\r\n        }\r\n\r\n\r\n        // blocks\r\n        $blocks = array();\r\n        if(file_exists($ptf.'/blocks.var_export'))\r\n        {\r\n            eval('$blocks_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/blocks.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $blocks_or = mb_unserialize(file_get_contents($ptf.'/blocks.serialized'));\r\n        }\r\n\r\n        if(!is_array($blocks_or))\r\n        {\r\n            $blocks_or = array();\r\n        }\r\n\r\n        foreach($blocks_or as $block)\r\n        {\r\n            // error protection\r\n            if(empty($block->id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $old_block_id = $block->id;\r\n            $block->id = 0;\r\n            $block->website = $ws->id;\r\n\r\n            // update structure entries (if used)\r\n            if(!empty($block->categories))\r\n            {\r\n                for($bc=0; $bc < count($block->categories); $bc++)\r\n                {\r\n                    $block->categories[$bc] = $structure[$block->categories[$bc]]->id;\r\n                }\r\n            }\r\n\r\n            // update Actions (file/image)\r\n            if(is_array($block->action['action-file']))\r\n            {\r\n                foreach($block->action['action-file'] as $lang => $file)\r\n                {\r\n                    $block->action['action-file'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            if(is_array($block->action['action-image']))\r\n            {\r\n                foreach(@$block->action['action-image'] as $lang => $file)\r\n                {\r\n                    $block->action['action-image'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            // update Triggers (image/rolloverimage/flash/content/html)\r\n            if(is_array($block->trigger['trigger-image']))\r\n            {\r\n                foreach(@$block->trigger['trigger-image'] as $lang => $file)\r\n                {\r\n                    $block->trigger['trigger-image'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            if(is_array($block->trigger['trigger-rollover']))\r\n            {\r\n                foreach(@$block->trigger['trigger-rollover'] as $lang => $file)\r\n                {\r\n                    $block->trigger['trigger-rollover'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            if(is_array($block->trigger['trigger-rollover-active']))\r\n            {\r\n                foreach(@$block->trigger['trigger-rollover-active'] as $lang => $file)\r\n                {\r\n                    $block->trigger['trigger-rollover'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            if(is_array($block->trigger['trigger-flash']))\r\n            {\r\n                foreach(@$block->trigger['trigger-flash'] as $lang => $file)\r\n                {\r\n                    $block->trigger['trigger-flash'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            $block->trigger['trigger-content'] = theme::import_sample_parse_array($block->trigger['trigger-content'], $files, $ws);\r\n            $block->trigger['trigger-html'] = theme::import_sample_parse_array($block->trigger['trigger-html'], $files, $ws);\r\n\r\n            $block->dictionary = theme::import_sample_parse_dictionary($block->dictionary, $files, $ws);\r\n\r\n            // translate nv:// urls, which may be in:\r\n            //      trigger->[trigger-links][lang][link][code] => link\r\n            //      trigger->[trigger-content][lang] (as html code)\r\n            //      trigger->[trigger-html][lang] (as html code)\r\n            //      action->[action-web][lang]\r\n\r\n            if(!empty($block->trigger['trigger-links']))\r\n            {\r\n                foreach($block->trigger['trigger-links'] as $lang => $block_trigger_link)\r\n                {\r\n                    foreach($block_trigger_link['link'] as $btl_code => $btl_link)\r\n                    {\r\n                        $btl_link = theme::import_sample_translate_nv_urls($btl_link, $structure, $items);\r\n                        $block->trigger['trigger-links'][$lang]['link'][$btl_code] = $btl_link;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(!empty($block->trigger['trigger-content']))\r\n            {\r\n                foreach($block->trigger['trigger-content'] as $lang => $block_trigger_content)\r\n                {\r\n                    $block_trigger_content = theme::import_sample_translate_nv_urls($block_trigger_content, $structure, $items);\r\n                    $block->trigger['trigger-content'][$lang] = $block_trigger_content;\r\n                }\r\n            }\r\n\r\n            if(!empty($block->trigger['trigger-html']))\r\n            {\r\n                foreach($block->trigger['trigger-html'] as $lang => $block_trigger_content)\r\n                {\r\n                    $block_trigger_content = theme::import_sample_translate_nv_urls($block_trigger_content, $structure, $items);\r\n                    $block->trigger['trigger-html'][$lang] = $block_trigger_content;\r\n                }\r\n            }\r\n\r\n            if(!empty($block->action['action-web']))\r\n            {\r\n                foreach($block->action['action-web'] as $lang => $block_action_web)\r\n                {\r\n                    $block_action_web = theme::import_sample_translate_nv_urls($block_action_web, $structure, $items);\r\n                    $block->action['action-web'][$lang] = $block_action_web;\r\n                }\r\n            }\r\n\r\n            $block->insert();\r\n\r\n            $blocks[$old_block_id] = $block;\r\n        }\r\n\r\n        // block_groups\r\n        $block_groups = array();\r\n        if(file_exists($ptf.'/block_groups.var_export'))\r\n        {\r\n            eval('$block_groups_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/block_groups.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $block_groups_or = unserialize(file_get_contents($ptf.'/block_groups.serialized'));\r\n        }\r\n\r\n        foreach($block_groups_or as $block_group)\r\n        {\r\n            // error protection\r\n            if(empty($block_group->id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $old_block_group_id = $block_group->id;\r\n            $block_group->id = 0;\r\n            $block_group->website = $ws->id;\r\n\r\n            // fix block IDs in group\r\n            $new_selection = array();\r\n            for($bi=0; $bi < count($block_group->blocks); $bi++)\r\n            {\r\n                if($block_group->blocks[$bi]['type'] == 'block')\r\n                {\r\n                    $block_group->blocks[$bi]['id'] = $blocks[ $block_group->blocks[$bi]['id'] ]->id;\r\n                }\r\n\r\n                $new_selection[] = $block_group->blocks[$bi];\r\n            }\r\n            $block_group->blocks = $new_selection;\r\n\r\n            $block_group->insert();\r\n\r\n            $block_groups[$old_block_group_id] = $block_group;\r\n        }\r\n\r\n\r\n        // comments\r\n        if(file_exists($ptf.'/comments.var_export'))\r\n        {\r\n            eval('$comments_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/comments.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $comments_or = unserialize(file_get_contents($ptf.'/comments.serialized'));\r\n        }\r\n\r\n        foreach($comments_or as $comment)\r\n        {\r\n            if(empty($comment->object_id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $comment->id = 0;\r\n            $comment->website = $ws->id;\r\n            $comment->object_id = $items[$comment->object_id]->id;\r\n            $comment->ip = '';\r\n            $comment->insert();\r\n        }\r\n\r\n        // now that categories and elements have been inserted\r\n        // we need to fix:\r\n        //      structure jumps: [jump-branch, jump-item] to its new ID values\r\n        //      items' sections: embedded nv:// urls\r\n        // note: properties will be \"translated\" later\r\n\r\n        // update structure properties\r\n        foreach($structure as $old_id => $entry)\r\n        {\r\n            foreach($entry->dictionary as $elang => $properties)\r\n            {\r\n                if(!empty($properties['action-jump-item']))\r\n                {\r\n                    $entry->dictionary[$elang]['action-jump-item'] = $items[$properties['action-jump-item']]->id;\r\n                }\r\n                else if(!empty($properties['action-jump-branch']))\r\n                {\r\n                    $entry->dictionary[$elang]['action-jump-branch'] = $structure[$properties['action-jump-branch']]->id;\r\n                }\r\n\r\n                $entry->save();\r\n            }\r\n        }\r\n\r\n        // find & update items' sections nv:// urls\r\n        foreach($items as $old => $element)\r\n        {\r\n            foreach($element->dictionary as $eld_lang => $eld_field)\r\n            {\r\n                foreach($eld_field as $eld_field_key => $eld_field_val)\r\n                {\r\n                    $html = theme::import_sample_translate_nv_urls($eld_field_val, $structure, $items);\r\n                    $items[$old]->dictionary[$eld_lang][$eld_field_key] = $html;\r\n                }\r\n            }\r\n            $items[$old]->save();\r\n        }\r\n\r\n\r\n        // translate website options; check for forced multilanguage options!\r\n\t    $theme_options = array();\r\n        for($toi=0; $toi < count($theme->options); $toi++)\r\n        {\r\n            $to = $theme->options[$toi];\r\n            $to->value = $ws->theme_options->{$to->id};\r\n\r\n            switch($to->type)\r\n            {\r\n                case 'file':\r\n                case 'image':\r\n                    // is multi-language forced for this option?\r\n\t\t\t\t\tif(in_array($to->multilanguage, array('true', '1')))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach($to->value as $olang => $oval)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(isset($files[$oval]->id))\r\n                            {\r\n                                $to->value[$olang] = $files[$oval]->id;\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isset($files[$to->value]->id))\r\n                        {\r\n                            $to->value = $files[$to->value]->id;\r\n                        }\r\n\t\t\t\t\t}\r\n                    break;\r\n\r\n                case 'category':\r\n                    // is multi-language forced for this option?\r\n\t\t\t\t\tif(in_array($to->multilanguage, array('true', '1')))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach($to->value as $olang => $oval)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(isset($structure[$oval]->id))\r\n                            {\r\n                                $to->value[$olang] = $structure[$oval]->id;\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isset($structure[$to->value]->id))\r\n                        {\r\n                            $to->value = $structure[$to->value]->id;\r\n                        }\r\n\t\t\t\t\t}\r\n                    break;\r\n\r\n                case 'element':\r\n                    // is multi-language forced for this option?\r\n\t\t\t\t\tif(in_array($to->multilanguage, array('true', '1')))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach($to->value as $olang => $oval)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(isset($items[$oval]->id))\r\n                            {\r\n                                $to->value[$olang] = $items[$oval]->id;\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isset($items[$to->value]->id))\r\n                        {\r\n                            $to->value = $items[$to->value]->id;\r\n                        }\r\n\t\t\t\t\t}\r\n                    break;\r\n\r\n                case 'categories':\r\n                    // is multi-language forced for this option?\r\n\t\t\t\t\tif(in_array($to->multilanguage, array('true', '1')))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach($to->value as $olang => $oval)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t$property_categories_old = explode(',', $oval);\r\n\t\t                    $property_categories_new = array();\r\n\t\t                    foreach($property_categories_old as $oc)\r\n                            {\r\n                                $property_categories_new[] = $structure[$oc]->id;\r\n                            }\r\n\r\n\t\t                    $to->value[$olang] = implode(',', $property_categories_new);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t                    $property_categories_old = explode(',', $to->value);\r\n\t                    $property_categories_new = array();\r\n\t                    foreach($property_categories_old as $oc)\r\n                        {\r\n                            $property_categories_new[] = $structure[$oc]->id;\r\n                        }\r\n\r\n\t\t\t\t\t\t$to->value = implode(',', $property_categories_new);\r\n\t\t\t\t\t}\r\n                    break;\r\n\r\n                default:\r\n                    // we don't need to change this type of value\r\n            }\r\n\r\n\t        // convert theme option definition to website option value\r\n            $theme_options[$to->id] = $to->value;\r\n        }\r\n\r\n\t    $ws->theme_options = $theme_options;\r\n\r\n        $ws->save();\r\n\r\n        // properties\r\n        // array ('structure' => ..., 'item' => ..., 'block' => ...)\r\n        if(file_exists($ptf.'/properties.var_export'))\r\n        {\r\n            eval('$properties = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/properties.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $properties = unserialize(file_get_contents($ptf.'/properties.serialized'));\r\n        }\r\n\r\n        $elements_with_properties = array('structure', 'item', 'block', 'block_group_block');\r\n\r\n        foreach($elements_with_properties as $el)\r\n        {\r\n            if($el=='structure')\r\n            {\r\n                $real = $structure;\r\n            }\r\n            else if($el=='item')\r\n            {\r\n                $real = $items;\r\n            }\r\n            else if($el=='block')\r\n            {\r\n                $real = $blocks;\r\n            }\r\n            else if($el=='block_group_block')\r\n            {\r\n                $real = $block_groups;\r\n            }\r\n            else\r\n            {\r\n                continue;\r\n            } // unrecognized element type, ignore\r\n\r\n            if(!is_array($properties[$el]))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            foreach($properties[$el] as $el_id => $el_properties)\r\n            {\r\n                if(empty($el_properties))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                $item_uid = \"\";\r\n                if($el=='block_group_block')\r\n                {\r\n                    // find each assigned block UID reference in this block group block\r\n                    foreach($el_properties as $item_uid => $el_properties_bg)\r\n                    {\r\n                        theme::import_sample_properties($ws, $el_properties_bg, $el, $files, $structure, $items, $real, $el_id, $item_uid);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    theme::import_sample_properties($ws, $el_properties, $el, $files, $structure, $items, $real, $el_id, $item_uid);\r\n                }\r\n            }\r\n        }\r\n\r\n\t    // apply final settings from export\r\n        if(file_exists($ptf.'/settings.var_export'))\r\n        {\r\n            eval('$settings_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/settings.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n\t        // get first structure ID\r\n\t        $structure_id = array_keys($structure);\r\n\t        $structure_id = $structure_id[0];\r\n\t        $settings_or = array('homepage' => $structure_id);\r\n        }\r\n\r\n        if(!empty($settings_or['favicon']))\r\n        {\r\n            $ws->favicon = $files[$settings_or['favicon']]->id;\r\n        }\r\n\r\n        // what is the homepage?\r\n\t    if(is_numeric($settings_or['homepage']))\r\n\t    {\r\n\t\t    // homepage as a category ID\r\n\t\t    $ws->homepage = $structure[$settings_or['homepage']]->id;\r\n\t    }\r\n\t    else\r\n\t    {\r\n\t\t    // homepage as a path\r\n\t\t    $ws->homepage = $settings_or['homepage'];\r\n\t    }\r\n\r\n\t    $ws->save();\r\n\r\n        core_remove_folder($ptf);\r\n    }\r\n\r\n    public static function export_sample($a_categories, $a_items, $a_block_groups, $a_blocks, $a_comments, $folder)\r\n    {\r\n        global $website;\r\n        global $theme;\r\n\t    global $DB;\r\n\r\n        @set_time_limit(0);\r\n\r\n        $categories = array();\r\n        $items = array();\r\n        $blocks = array();\r\n        $block_groups = array();\r\n        $comments = array();\r\n        $properties = array();\r\n        $files = array();\r\n\t    $settings = array();\r\n\r\n        // structure\r\n        for($c=0; $c < count($a_categories); $c++)\r\n        {\r\n            $tmp = new structure();\r\n            $tmp->load($a_categories[$c]);\r\n            //$properties['structure'][$tmp->id] = property::load_properties_associative('structure', $tmp->template, 'structure', $tmp->id);\r\n            $properties['structure'][$tmp->id] = property::load_properties('structure', $tmp->template, 'structure', $tmp->id);\r\n            $categories[$tmp->id] = $tmp;\r\n            // add files referenced in properties\r\n            if(is_array($properties['structure'][$tmp->id]))\r\n            {\r\n                foreach($properties['structure'][$tmp->id] as $property)\r\n                {\r\n                    if($property->type == 'image' || $property->type == 'file')\r\n                    {\r\n                        $files[] = $property->value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // comments\r\n        for($c=0; $c < count($a_comments); $c++)\r\n        {\r\n            $tmp = new comment();\r\n            $tmp->load($a_comments[$c]);\r\n            $comments[$tmp->id] = $tmp;\r\n        }\r\n\r\n        // items\r\n        for($i=0; $i < count($a_items); $i++)\r\n        {\r\n            $tmp = new item();\r\n            $tmp->load($a_items[$i]);\r\n\r\n\t        $template_id = $tmp->template;\r\n\r\n\t        if($tmp->association != \"free\" && $tmp->embedding == 1)\r\n\t        {\r\n\t\t        // we have to get the template set in the category of the item\r\n\t\t\t\t$template_id = $DB->query_single(\r\n\t\t\t\t    'template',\r\n                    'nv_structure',\r\n                    ' id = :category AND website = :wid',\r\n                    null,\r\n                    array(\r\n                        ':wid' => $website->id,\r\n                        ':category' => $tmp->category\r\n                    )\r\n                );\r\n\t        }\r\n\r\n\t        $properties['item'][$tmp->id] = property::load_properties('item', $template_id, 'item', $tmp->id);\r\n\r\n\t        list($tmp->dictionary, $files) = theme::export_sample_parse_dictionary($tmp->dictionary, $files);\r\n\r\n            // add files referenced in properties\r\n            if(is_array($properties['item'][$tmp->id]))\r\n            {\r\n                foreach($properties['item'][$tmp->id] as $property)\r\n                {\r\n                    if($property->type == 'image' || $property->type == 'file')\r\n                    {\r\n                        $files[] = $property->value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // add files referenced in gallery\r\n            if(is_array($tmp->galleries[0]))\r\n            {\r\n                $gallery_images = array_keys($tmp->galleries[0]);\r\n                $files = array_merge($files, $gallery_images);\r\n            }\r\n\r\n            $items[$tmp->id] = $tmp;\r\n        }\r\n\r\n        // block_groups\r\n        for($i=0; $i < count($a_block_groups); $i++)\r\n        {\r\n            $tmp = new block_group();\r\n            $tmp->load($a_block_groups[$i]);\r\n            $block_groups[$tmp->id] = $tmp;\r\n\r\n            if(is_array($tmp->blocks))\r\n            {\r\n                foreach($tmp->blocks as $bgb)\r\n                {\r\n                    if($bgb['type'] == 'block_group_block')\r\n                    {\r\n                        $properties['block_group_block'][$a_block_groups[$i]][$bgb['uid']] = property::load_properties($bgb['id'], $tmp->code, 'block_group_block', $bgb['id'], $bgb['uid']);\r\n                    }\r\n                    else if($bgb['type'] == 'extension')\r\n                    {\r\n                        $properties['block_group_block'][$a_block_groups[$i]][$bgb['uid']] = property::load_properties(NULL, $bgb['id'], \"extension_block\", NULL, $bgb['uid']);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // note: maybe not all blocks in the group have been selected in the \"blocks\" tab\r\n            // here we only export the block group definition, the block group blocks properties and the extension blocks properties, not adding anything else to export\r\n        }\r\n\r\n\r\n        // blocks\r\n        for($i=0; $i < count($a_blocks); $i++)\r\n        {\r\n            $tmp = new block();\r\n            $tmp->load($a_blocks[$i]);\r\n\r\n            $properties['block'][$tmp->id] = property::load_properties('block', $tmp->type, 'block', $tmp->id);\r\n            list($tmp->dictionary, $files) = theme::export_sample_parse_dictionary($tmp->dictionary, $files);\r\n            list($tmp->trigger['trigger-content'], $files) = theme::export_sample_parse_array($tmp->trigger['trigger-content'], $files);\r\n            list($tmp->trigger['trigger-html'], $files) = theme::export_sample_parse_array($tmp->trigger['trigger-html'], $files);\r\n\r\n            if(!empty($tmp->trigger['trigger-image']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->trigger['trigger-image']));\r\n            }\r\n\r\n            if(!empty($tmp->trigger['trigger-rollover']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->trigger['trigger-rollover']));\r\n            }\r\n\r\n            if(!empty($tmp->trigger['trigger-rollover-active']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->trigger['trigger-rollover-active']));\r\n            }\r\n\r\n            if(!empty($tmp->trigger['trigger-flash']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->trigger['trigger-flash']));\r\n            }\r\n\r\n            if(!empty($tmp->action['action-image']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->action['action-image']));\r\n            }\r\n\r\n            if(!empty($tmp->action['action-file']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->action['action-file']));\r\n            }\r\n\r\n            // add files referenced in properties\r\n            if(is_array($properties['block'][$tmp->id]))\r\n            {\r\n                foreach($properties['block'][$tmp->id] as $property)\r\n                {\r\n                    if($property->type == 'image' || $property->type == 'file')\r\n                    {\r\n                        $files[] = $property->value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $blocks[$tmp->id] = $tmp;\r\n        }\r\n\r\n        // folders\r\n        // save references and get their files list\r\n        $folders = array();\r\n        $folders_to_check = array();\r\n        if(!empty($folder))\r\n        {\r\n            array_push($folders_to_check, $folder);\r\n            while(!empty($folders_to_check))\r\n            {\r\n                $f = array_shift($folders_to_check);\r\n                $f = file::filesOnPath($f);\r\n                foreach($f as $file)\r\n                {\r\n                    if($file->type == 'folder')\r\n                    {\r\n                        array_push($folders_to_check, $file->id);\r\n                        array_push($folders, $file);\r\n                    }\r\n                    else\r\n                    {\r\n                        $files[] = $file->id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // add files selected as theme_options\r\n        foreach($theme->options as $to)\r\n        {\r\n            if($to->type == 'image' || $to->type == 'file')\r\n            {\r\n                $to_value = $website->theme_options->{$to->id};\r\n                if(is_array($to_value))\r\n                {\r\n                    $files = array_merge($files, $to_value);\r\n                }\r\n                else\r\n                {\r\n                    $files[] = $to_value;\r\n                }\r\n            }\r\n        }\r\n\r\n        // include favicon in file list\r\n        if(!empty($website->favicon))\r\n        {\r\n            $files[] = $website->favicon;\r\n        }\r\n\r\n        // files\r\n        $files = array_unique($files);\r\n        for($f=0; $f < count($files); $f++)\r\n        {\r\n            $file = new file();\r\n            $file->load($files[$f]);\r\n            $files[$f] = $file;\r\n        }\r\n\r\n\t    // settings\r\n\t    $settings['homepage'] = $website->homepage;\r\n        $settings['favicon'] = $website->favicon;\r\n\r\n        $zip = new zipfile();\r\n        $zip->addFile(var_export($website->languages, true), 'languages.var_export');\r\n        $zip->addFile(var_export($website->theme_options, true), 'theme_options.var_export');\r\n        $zip->addFile(var_export($categories, true), 'structure.var_export');\r\n        $zip->addFile(var_export($items, true), 'items.var_export');\r\n        $zip->addFile(var_export($block_groups, true), 'block_groups.var_export');\r\n        $zip->addFile(var_export($blocks, true), 'blocks.var_export');\r\n        $zip->addFile(var_export($comments, true), 'comments.var_export');\r\n        $zip->addFile(var_export($files, true), 'files.var_export');\r\n        $zip->addFile(var_export($folders, true), 'folders.var_export');\r\n        $zip->addFile(var_export($properties, true), 'properties.var_export');\r\n        $zip->addFile(var_export($settings, true), 'settings.var_export');\r\n\r\n        foreach($files as $file)\r\n        {\r\n            $zip->addFile(file_get_contents($file->absolute_path()), 'files/'.$file->id);\r\n        }\r\n\r\n        $contents = $zip->file();\r\n\r\n        header('Content-Disposition: attachment; filename=\"'.$website->theme.'_sample.zip\"');\r\n        header(\"Content-type: application/octet-stream\");\r\n        header('Content-Length: '.strlen($contents));\r\n\r\n        echo $contents;\r\n    }\r\n\r\n    public static function export_sample_parse_dictionary($dictionary, $files=array())\r\n    {\r\n        if(is_array($dictionary))\r\n        {\r\n            foreach($dictionary as $language => $dictionary_data)\r\n            {\r\n                list($dictionary_data, $files) = theme::export_sample_parse_array($dictionary_data, $files);\r\n                $dictionary[$language] = $dictionary_data;\r\n            }\r\n        }\r\n\r\n        return array($dictionary, $files);\r\n    }\r\n\r\n    public static function export_sample_parse_array($dictionary, $files=array())\r\n    {\r\n        global $website;\r\n\r\n        if(is_array($dictionary))\r\n        {\r\n            foreach($dictionary as $entry => $content)\r\n            {\r\n                // identify all files used\r\n                preg_match_all('!'.NAVIGATE_DOWNLOAD.'!', $content, $matches_nd, PREG_OFFSET_CAPTURE);\r\n\r\n                $matches_nd = $matches_nd[0];\r\n\r\n                for($m=count($matches_nd); $m >= 0; $m--)\r\n                {\r\n                    if(@empty($matches_nd[$m][1]))\r\n                    {\r\n                        continue;\r\n                    }\r\n                    $offset = $matches_nd[$m][1] + strlen(NAVIGATE_DOWNLOAD);\r\n                    $end = strpos($content, '\"', $offset);\r\n                    $file_query = substr($content, $offset + 1, $end - $offset - 1);\r\n\r\n                    $file_query = str_replace('&amp;', '&', $file_query);\r\n                    parse_str($file_query, $file_query);\r\n                    $file_id = intval($file_query['id']);\r\n                    $files[] = $file_id;\r\n\r\n                    $file_query['id'] = '{{NAVIGATE_FILE}'.$file_id.'}';\r\n                    if(!empty($file_query['wid']))\r\n                    {\r\n                        $file_query['wid'] = '{{NVWEB_WID}}';\r\n                    }\r\n\r\n                    $file_query = http_build_query($file_query);\r\n\r\n                    $content = substr_replace($content, $file_query, $offset + 1, $end - $offset - 1);\r\n                }\r\n\r\n                preg_match_all('!'.NVWEB_OBJECT.'!', $content, $matches_no, PREG_OFFSET_CAPTURE);\r\n                $matches_no = $matches_no[0];\r\n\r\n                for($m=count($matches_no); $m >= 0; $m--)\r\n                {\r\n                    if(@empty($matches_no[$m][1])) continue;\r\n                    $offset = $matches_no[$m][1] + strlen(NVWEB_OBJECT);\r\n                    $end = strpos($content, '\"', $offset);\r\n                    $file_query = substr($content, $offset + 1, $end - $offset - 1);\r\n\r\n                    $file_query = str_replace('&amp;', '&', $file_query);\r\n\r\n                    parse_str($file_query, $file_query);\r\n                    $file_id = intval($file_query['id']);\r\n                    $files[] = $file_id;\r\n\r\n                    $file_query['id'] = '{{NAVIGATE_FILE}'.$file_id.'}';\r\n                    $file_query = http_build_query($file_query);\r\n\r\n                    $content = substr_replace($content, $file_query, $offset + 1, $end - $offset - 1);\r\n                }\r\n\r\n                // example route substitutions\r\n                // http://192.168.x.x/navigate/navigate_download.php --> NAVIGATE_DOWNLOAD\r\n                // http://192.168.x.x/ocean [ $website->absolute_path() ] --> WEBSITE_ABSOLUTE_PATH\r\n                // http://192.168.x.x/navigate/themes/ocean [ NAVIGATE_PARENT.NAVIGATE_FOLDER.'/themes/'.$website->theme ] --> THEME_ABSOLUTE_PATH\r\n\r\n                $content = str_replace(NAVIGATE_DOWNLOAD, 'url://{{NAVIGATE_DOWNLOAD}}', $content);\r\n                $content = str_replace($website->absolute_path(), 'url://{{WEBSITE_ABSOLUTE_PATH}}', $content);\r\n                $content = str_replace(NAVIGATE_PARENT.NAVIGATE_FOLDER.'/themes/'.$website->theme, 'url://{{THEME_ABSOLUTE_PATH}}', $content);\r\n\r\n                $dictionary[$entry] = $content;\r\n            }\r\n        }\r\n\r\n        return array($dictionary, $files);\r\n    }\r\n\r\n    public static function import_sample_parse_dictionary($dictionary, $files=array(), $ws=null)\r\n    {\r\n        if(is_array($dictionary))\r\n        {\r\n            foreach($dictionary as $language => $foo)\r\n            {\r\n                $dictionary[$language] = theme::import_sample_parse_array($dictionary[$language], $files, $ws);\r\n            }\r\n        }\r\n\r\n        return $dictionary;\r\n    }\r\n\r\n    public static function import_sample_parse_array($dictionary, $files=array(), $ws=null)\r\n    {\r\n        global $website;\r\n\r\n\t    if(empty($ws))\r\n        {\r\n            $ws = $website;\r\n        }\r\n\r\n        if(!is_array($dictionary))\r\n        {\r\n            return $dictionary;\r\n        }\r\n\r\n        foreach($dictionary as $entry => $content)\r\n        {\r\n            // replace file IDs with real ones\r\n\r\n            // example: %7B%7BNAVIGATE_FILE%7D117%7D  --> {{NAVIGATE_FILE}117}\r\n\r\n            preg_match_all('!%7B%7BNAVIGATE_FILE%7D!', $content, $matches, PREG_OFFSET_CAPTURE);\r\n\r\n            $matches = $matches[0];\r\n\r\n            for($m=count($matches); $m >= 0; $m--)\r\n            {\r\n                if(@empty($matches[$m])) continue;\r\n\r\n                $offset = $matches[$m][1] + strlen('%7B%7BNAVIGATE_FILE%7D#');\r\n                $end = strpos($content, '%7D', $offset);\r\n                $file_id = substr($content, $offset - 1, $end - $offset + 1);\r\n                $content = substr_replace($content, $files[$file_id]->id, $matches[$m][1], strlen('%7B%7BNAVIGATE_FILE%7D'.$file_id.'%7D'));\r\n            }\r\n\r\n            $content = str_replace('%7B%7BNVWEB_WID%7D%7D', $ws->id, $content);\r\n            $content = str_replace('url://{{NAVIGATE_DOWNLOAD}}', NAVIGATE_DOWNLOAD, $content);\r\n            $content = str_replace('url://{{WEBSITE_ABSOLUTE_PATH}}', $ws->absolute_path(), $content);\r\n            $content = str_replace('url://{{THEME_ABSOLUTE_PATH}}', NAVIGATE_PARENT.NAVIGATE_FOLDER.'/themes/'.$ws->theme, $content);\r\n\r\n            $dictionary[$entry] = $content;\r\n        }\r\n\r\n        return $dictionary;\r\n    }\r\n\r\n    public static function import_sample_properties($ws, $el_properties, $el, $files, $structure, $items, $real, $el_id, $item_uid)\r\n    {\r\n        global $DB;\r\n\r\n        $el_properties_associative = array();\r\n\r\n        foreach($el_properties as $foo => $property)\r\n        {\r\n            if(!empty($property) && is_array($property))\r\n            {\r\n                $property = $property[0];\r\n            }\r\n\r\n            if(empty($property->value))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            // get the original ID for files and categories\r\n            // \"translate\" those IDs for the ones assigned on the new website\r\n            // for example:\r\n            // (old website) file id: 35    =>  (new website) file id: 3\r\n\r\n            // ...and also translate nv:// urls in (text) properties values\r\n            switch($property->type)\r\n            {\r\n                case 'file':\r\n                case 'image':\r\n                    if(in_array($property->multilanguage, array('true', '1')))\r\n                    {\r\n                        foreach($property->value as $plang => $pval)\r\n                        {\r\n                            if(isset($files[$pval]->id))\r\n                            {\r\n                                $property->value[$plang] = $files[$pval]->id;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if(isset($files[$property->value]->id))\r\n                        {\r\n                            $property->value = $files[$property->value]->id;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 'category':\r\n                    if(in_array($property->multilanguage, array('true', '1')))\r\n                    {\r\n                        foreach($property->value as $plang => $pval)\r\n                        {\r\n                            if(isset($structure[$pval]->id))\r\n                            {\r\n                                $property->value[$plang] = $structure[$pval]->id;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if(isset($structure[$property->value]->id))\r\n                        {\r\n                            $property->value = $structure[$property->value]->id;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 'categories':\r\n                    if(in_array($property->multilanguage, array('true', '1')))\r\n                    {\r\n                        foreach($property->value as $plang => $pval)\r\n                        {\r\n                            $property_categories_old = explode(',', $pval);\r\n                            $property_categories_new = array();\r\n                            foreach($property_categories_old as $oc)\r\n                            {\r\n                                $property_categories_new[] = $structure[$oc]->id;\r\n                            }\r\n                            $property->value[$plang] = implode(',', $property_categories_new);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        $property_categories_old = explode(',', $property->value);\r\n                        $property_categories_new = array();\r\n\r\n                        foreach($property_categories_old as $oc)\r\n                        {\r\n                            $property_categories_new[] = $structure[$oc]->id;\r\n                        }\r\n                        $property->value = implode(',', $property_categories_new);\r\n                    }\r\n                    break;\r\n\r\n                case 'element':\r\n                    // is multi-language forced for this property?\r\n                    if(in_array($property->multilanguage, array('true', '1')))\r\n                    {\r\n                        foreach($property->value as $olang => $oval)\r\n                        {\r\n                            if(isset($items[$oval]->id))\r\n                            {\r\n                                $property->value[$olang] = $items[$oval]->id;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if(isset($items[$property->value]->id))\r\n                        {\r\n                            $property->value = $items[$property->value]->id;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    if(is_array($property->value))\r\n                    {\r\n                        // multilanguage property\r\n                        foreach($property->value as $lang => $pvalue)\r\n                        {\r\n                            $property->value[$lang] = theme::import_sample_translate_nv_urls($pvalue, $structure, $items);\r\n                        }\r\n                    }\r\n                    else if(!is_string($property->value))  // ignore numeric values\r\n                    {\r\n                        $property->value = theme::import_sample_translate_nv_urls($property->value, $structure, $items);\r\n                    }\r\n            }\r\n\r\n            $el_properties_associative[$property->id] = $property->value;\r\n        }\r\n\r\n        if(!empty($el_properties_associative))\r\n        {\r\n            if($el=='block_group_block')\r\n            {\r\n                $template = $real[$el_id]->code;\r\n            }\r\n            else if($el=='block')\r\n            {\r\n                $template = $real[$el_id]->type;\r\n            }\r\n            else\r\n            {\r\n                $template = $real[$el_id]->template;\r\n\r\n                if(empty($template) && $el == 'item' && $real[$el_id]->embedding == 1)\r\n                {\r\n                    // we have to get the template set in the category of the item\r\n                    $template = $DB->query_single(\r\n                        'template',\r\n                        'nv_structure',\r\n                        ' id = '.intval($real[$el_id]->category).' AND \r\n\t\t\t\t\t\t\t\t  website = '.intval($ws->id)\r\n                    );\r\n                }\r\n            }\r\n\r\n            property::save_properties_from_array($el, $real[$el_id]->id, $template, $el_properties_associative, $ws, $item_uid);\r\n        }\r\n    }\r\n\r\n    public static function import_sample_translate_nv_urls($html, $structure, $items)\r\n    {\r\n        preg_match_all(\"/nv:\\/\\/(element|elements|structure|category)\\/([0-9])+/\", $html, $matches);\r\n\r\n        if(!empty($matches) && !empty($matches[0]))\r\n        {\r\n            $matches = $matches[0];\r\n            foreach($matches as $match)\r\n            {\r\n                $parts = explode('/', $match);\r\n                $url = \"\";\r\n                switch($parts[2])\r\n                {\r\n                    case 'element':\r\n                    case 'item':\r\n                    case 'elements':\r\n                        $url = 'nv://element/' . $items[$parts[3]]->id;\r\n                        break;\r\n\r\n                    case 'structure':\r\n                    case 'category':\r\n                        $url = 'nv://structure/' . $structure[$parts[3]]->id;\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore this url, leave as is\r\n                }\r\n\r\n                if(!empty($url))\r\n                {\r\n                    $html = str_replace($match, $url, $html);\r\n                }\r\n            }\r\n        }\r\n\r\n        return $html;\r\n    }\r\n\r\n    public static function latest_available()\r\n    {\r\n        $list = theme::list_available();\r\n        $post = array();\r\n\r\n        if(!is_array($list))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        foreach($list as $theme)\r\n        {\r\n            $post[$theme['code']] = $theme['version'];\r\n        }\r\n\r\n        $latest_update = core_curl_post(\r\n            'http://update.navigatecms.com/themes',\r\n            array(\r\n                'themes' => json_encode($post)\r\n            )\r\n        );\r\n\r\n        if(empty($latest_update))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $latest_update = json_decode($latest_update, true);\r\n\r\n        return $latest_update;\r\n    }\r\n}\r\n\r\n?>", "function navigate_themes_init()\r\n{\r\n    $(\".navigrid-themes-installed\").parent().parent().addClass(\"navigrid-item-highlight\");\r\n\r\n    $(\".navigrid-themes-info\").on(\"click\", function()\r\n    {\r\n        var theme = $(this).attr(\"theme\");\r\n        $(\"#navigrid-themes-information\").prop(\"title\", $(this).attr(\"theme-title\"));\r\n        $(\"#navigrid-themes-information\").load(NAVIGATE_APP + \"?fid=themes&act=theme_info&theme=\" + theme, function()\r\n        {\r\n            $(\"#navigrid-themes-information\").dialog(\r\n                {\r\n                    width: 700,\r\n                    height: 500,\r\n                    modal: true\r\n                }).dialogExtend(\r\n                {\r\n                    maximizable: true\r\n                }).css(\"padding\", \"3px\");\r\n        });\r\n    });\r\n\r\n    $(\".navigrid-themes-update\").on(\"click\", function()\r\n    {\r\n        var theme = $(this).attr(\"theme\");\r\n\r\n        $(\"#navigrid-themes-update\").dialog(\r\n            {\r\n                resizable: false,\r\n                width: 980,\r\n                height: 650,\r\n                modal: true\r\n            }\r\n        );\r\n\r\n        $(\"#navigrid-themes-update\").find('iframe').\r\n            css({\r\n                \"width\": \"960\",\r\n                \"height\": 600\r\n            }).\r\n            attr('src', 'http://www.navigatecms.com/en/marketplace/purchase?theme='+theme+'&get_update')\r\n\r\n        return false;\r\n    });\r\n\r\n    $(\".navigrid-themes-install\").on(\"click\", function()\r\n    {\r\n        var theme = $(this).attr(\"theme\");\r\n\r\n        $(\"#navigrid-themes-install-confirmation\").dialog(\r\n            {\r\n                resizable: true,\r\n                width: 400,\r\n                height: 200,\r\n                modal: true,\r\n                buttons:\r\n                [\r\n                    {\r\n                        text: navigate_lang_dictionary[190],\r\n                        click: function()\r\n                        {\r\n                            window.location.href = \"?fid=themes&act=themes&opt=install&theme=\" + theme;\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    },\r\n                    {\r\n                        text: navigate_lang_dictionary[58],\r\n                        click: function()\r\n                        {\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        return false;\r\n    });\r\n\r\n    $(\".navigrid-theme-install-demo\").on(\"click\", function()\r\n    {\r\n        $(\"#navigrid-themes-install-demo-confirmation\").dialog(\r\n            {\r\n                resizable: true,\r\n                width: 400,\r\n                height: 200,\r\n                modal: true,\r\n                buttons:\r\n                    [\r\n                        {\r\n                            text: navigate_lang_dictionary[190],\r\n                            click: function()\r\n                            {\r\n                                window.location.href = \"?fid=themes&act=theme_sample_content_import&rtk=\" + navigatecms.request_token;\r\n                                $( this ).dialog( \"close\" );\r\n                            }\r\n                        },\r\n                        {\r\n                            text: navigate_lang_dictionary[58],\r\n                            click: function()\r\n                            {\r\n                                $( this ).dialog( \"close\" );\r\n                            }\r\n                        }\r\n                    ]\r\n            });\r\n        return false;\r\n    });\r\n\r\n    $(\"#theme-upload-button\").on(\"click\", function(e)\r\n    {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        $(\"#theme-upload-button\").parent().find(\"form\").remove();\r\n        $(\"#theme-upload-button\").after('<form action=\"?fid=themes&act=theme_upload\" enctype=\"multipart/form-data\" method=\"post\"><input type=\"file\" name=\"theme-upload\" style=\" display: none;\" /><input type=\"hidden\" id=\"_nv_csrf_token\" name=\"_nv_csrf_token\" value=\"'+navigatecms.csrf_token+'\" /></form>');\r\n        $(\"#theme-upload-button\").next().find(\"input\").on(\"change\", function()\r\n        {\r\n            if($(this).val()!=\"\")\r\n            {\r\n                $(this).parent().submit();\r\n            }\r\n        });\r\n        $(\"#theme-upload-button\").next().find(\"input\").trigger(\"click\");\r\n\r\n        return false;\r\n    });\r\n\r\n    $(\".navigrid-themes-remove\").on(\"click\", function()\r\n    {\r\n        var theme = $(this).attr(\"theme\");\r\n\r\n        $(\"#navigrid-themes-remove-confirmation\").dialog(\r\n            {\r\n                resizable: true,\r\n                width: 300,\r\n                height: 150,\r\n                modal: true,\r\n                title: $(this).attr(\"theme-title\"),\r\n                buttons:\r\n                [\r\n                    {\r\n                        text: navigate_lang_dictionary[190],\r\n                        click: function()\r\n                        {\r\n                            $.post(\r\n                                NAVIGATE_APP + \"?fid=themes&act=remove&theme=\" + theme,\r\n                                { },\r\n                                function(data)\r\n                                {\r\n                                    if(data==\"true\")\r\n                                    {\r\n                                        $(\"#item-\" + theme).fadeOut(\"slow\", function(){ $(\"#item-\" + theme).remove(); });\r\n                                    }\r\n                                    else if(data!=\"false\")\r\n                                    {\r\n                                        navigate_notification(data);\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        navigate_notification(navigate_lang_dictionary[56]);\r\n                                    }\r\n                                }\r\n                            );\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    },\r\n                    {\r\n                        text: navigate_lang_dictionary[58],\r\n                        click: function()\r\n                        {\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        return false;\r\n    });\r\n}", "<?php\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/themes/theme.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/properties/property.class.php');\r\n\r\nfunction run()\r\n{\r\n\tglobal $user;\t\r\n\tglobal $layout;\r\n\tglobal $website;\r\n    global $theme;\r\n    global $DB;\r\n\t\r\n\t$out = '';\r\n\r\n\tswitch($_REQUEST['act'])\r\n\t{\r\n        case 'theme_info':\r\n            echo '<iframe src=\"'.NAVIGATE_URL.'/themes/'.$_REQUEST['theme'].'/'.$_REQUEST['theme'].'.info.html'.'\" scrolling=\"auto\" frameborder=\"0\"  width=\"100%\" height=\"100%\"></iframe>';\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'remove':\r\n            if(!naviforms::check_csrf_token('header'))\r\n            {\r\n                echo t(344, \"Security error\");\r\n            }\r\n            else\r\n            {\r\n                // check the theme is not actually used in any website\r\n                $usages = $DB->query_single(\r\n                    'COUNT(*)',\r\n                    'nv_websites',\r\n                    ' theme = :theme',\r\n                    null,\r\n                    array(\r\n                        ':theme' => $_REQUEST['theme']\r\n                    )\r\n                );\r\n                if($usages == 0)\r\n                {\r\n                    try\r\n                    {\r\n                        $theme = new theme();\r\n                        $theme->load($_REQUEST['theme']);\r\n                        $status = $theme->delete();\r\n                        echo json_encode($status);\r\n                    }\r\n                    catch(Exception $e)\r\n                    {\r\n                        echo $e->getMessage();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    $status = t(537, \"Can't remove the theme because it is currently being used by another website.\");\r\n                    echo $status;\r\n                }\r\n            }\r\n            core_terminate();\r\n            break;\r\n\r\n        /*\r\n        case 'export':\r\n            $out = themes_export_form();\r\n            break;\r\n        */\r\n\r\n        case 'theme_sample_content_import':\r\n            if($_REQUEST['rtk'] != $_SESSION['request_token'])\r\n            {\r\n                $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                break;\r\n            }\r\n            else\r\n            {\r\n                try\r\n                {\r\n                    $theme->import_sample();\r\n                    $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                }\r\n                catch(Exception $e)\r\n                {\r\n                    $layout->navigate_notification($e->getMessage(), true, true);\r\n                }\r\n            }\r\n\r\n            $themes = theme::list_available();\r\n            $out = themes_grid($themes);\r\n            break;\r\n\r\n        case 'theme_sample_content_export':\r\n            if(empty($_POST))\r\n            {\r\n                $out = themes_sample_content_export_form();\r\n            }\r\n            else\r\n            {\r\n                $categories = explode(',', $_POST['categories']);\r\n                $folder = $_POST['folder'];\r\n                $items = explode(',', $_POST['elements']);\r\n                $block_groups = explode(',', $_POST['block_groups']);\r\n                $blocks = explode(',', $_POST['blocks']);\r\n                $comments = explode(',', $_POST['comments']);\r\n\r\n                theme::export_sample($categories, $items, $block_groups, $blocks, $comments, $folder);\r\n\r\n                core_terminate();\r\n            }\r\n            break;\r\n\r\n        case 'install_from_hash':\r\n            $url = base64_decode($_GET['hash']);\r\n\r\n            if(!empty($url) && $user->permission(\"themes.install\")==\"true\")\r\n            {\r\n                $error = false;\r\n                parse_str(parse_url($url, PHP_URL_QUERY), $query);\r\n\r\n                $tmp_file = sys_get_temp_dir() . DIRECTORY_SEPARATOR . $query['code'] . '.zip';\r\n                @core_file_curl($url, $tmp_file);\r\n                if(@filesize($tmp_file) == 0)\r\n                {\r\n                    @unlink($tmp_file);\r\n                    // core file curl failed, try using file_get_contents...\r\n                    $tmp = @file_get_contents($url);\r\n                    if(!empty($tmp))\r\n                    {\r\n                        @file_put_contents($tmp_file, $tmp);\r\n                    }\r\n                    unset($tmp);\r\n                }\r\n\r\n                if(@filesize($tmp_file) > 0)\r\n                {\r\n                    // uncompress ZIP and copy it to the themes dir\r\n                    @mkdir(NAVIGATE_PATH.'/themes/'.$query['code']);\r\n\r\n                    $zip = new ZipArchive();\r\n                    $zip_open_status = $zip->open($tmp_file);\r\n                    if($zip_open_status === TRUE)\r\n                    {\r\n                        $zip->extractTo(NAVIGATE_PATH.'/themes/'.$query['code']);\r\n                        $zip->close();\r\n\r\n                        $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                    }\r\n                    else // zip extraction failed\r\n                    {\r\n                        $layout->navigate_notification('ERROR '.$zip_open_status, true, true);\r\n                        $error = true;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    $layout->navigate_notification(t(56, 'Unexpected error'), true, true);\r\n                    $error = true;\r\n                }\r\n\r\n                if($error)\r\n                {\r\n                    $layout->add_content('\r\n                        <div id=\"navigate_marketplace_install_from_hash_error\">\r\n                            <p>'.t(529, \"It has not been possible to download the item you have just bought from the marketplace.\").'</p>\r\n                            <p>'.t(530, \"You have to visit your Marketplace Dashboard and download the file, then use the <strong>Install from file</strong> button you'll find in the actions bar on the right.\").'</p>\r\n                            <p>'.t(531, \"Sorry for the inconvenience.\").'</p>\r\n                            <a class=\"uibutton\" href=\"http://www.navigatecms.com/en/marketplace/dashboard\" target=\"_blank\"><span class=\"ui-icon ui-icon-extlink\" style=\"float: left;\"></span> '.t(532, \"Navigate CMS Marketplace\").'</a>\r\n                        </div>\r\n                    ');\r\n                    $layout->add_script('\r\n                        $(\"#navigate_marketplace_install_from_hash_error\").dialog({\r\n                            modal: true,\r\n                            title: \"'.t(56, \"Unexpected error\").'\"\r\n                        });\r\n                    ');\r\n                }\r\n            }\r\n            // don't break, we want to show the themes grid right now (theme_upload by browser upload won't trigger)\r\n\r\n        case 'theme_upload':\r\n            if(!naviforms::check_csrf_token())\r\n            {\r\n                $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n            }\r\n            else if(isset($_FILES['theme-upload']) && $_FILES['theme-upload']['error']==0 &&  $user->permission(\"themes.install\")==\"true\")\r\n            {\r\n                // uncompress ZIP and copy it to the themes dir\r\n                $tmp = trim(substr($_FILES['theme-upload']['name'], 0, strpos($_FILES['theme-upload']['name'], '.')));\r\n                $theme_name = filter_var($tmp, FILTER_SANITIZE_EMAIL);\r\n\r\n                if($tmp!=$theme_name) // INVALID file name\r\n                {\r\n                    $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                }\r\n                else\r\n                {\r\n                    // security validation\r\n                    $secure = theme::check_upload($_FILES['theme-upload'], $theme_name);\r\n\r\n                    if($secure !== true)\r\n                    {\r\n                        $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                    }\r\n                    else // everything seems fine, go ahead\r\n                    {\r\n                        @mkdir(NAVIGATE_PATH.'/themes/'.$theme_name);\r\n\r\n                        $zip = new ZipArchive;\r\n                        if($zip->open($_FILES['theme-upload']['tmp_name']) === TRUE)\r\n                        {\r\n                            $zip->extractTo(NAVIGATE_PATH.'/themes/'.$theme_name);\r\n                            $zip->close();\r\n\r\n                            $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                        }\r\n                        else // zip extraction failed\r\n                        {\r\n                            $layout->navigate_notification(t(262, 'Error uploading file'), true, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // don't break, we want to show the themes grid right now\r\n\r\n        case 'themes':\r\n        default:\r\n            if(@$_REQUEST['opt']=='install')\r\n            {\r\n                $ntheme = new theme();\r\n                $ntheme->load($_REQUEST['theme']);\r\n\r\n                $website->theme = $ntheme->name;\r\n\r\n                if(!empty($ntheme->styles))\r\n                {\r\n                    $nst = get_object_vars($ntheme->styles);\r\n                    $nst = array_keys($nst);\r\n\r\n                    if(!isset($website->theme_options) || empty($website->theme_options))\r\n                        $website->theme_options = json_decode('{\"style\": \"\"}');\r\n                    $website->theme_options->style = array_shift($nst);\r\n                }\r\n                else\r\n                {\r\n                    if(!isset($website->theme_options) || empty($website->theme_options))\r\n                        $website->theme_options = json_decode('{\"style\": \"\"}');\r\n                    else\r\n                        $website->theme_options->style = \"\";\r\n                }\r\n\r\n                try\r\n                {\r\n                    $website->update();\r\n                    $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                }\r\n                catch(Exception $e)\r\n                {\r\n                    $layout->navigate_notification($e->getMessage(), true, true);\r\n                }\r\n            }\r\n\r\n            $themes = theme::list_available();\r\n\r\n            $out = themes_grid($themes);\r\n            break;\r\n\r\n    }\r\n\t\r\n\treturn $out;\r\n}\r\n\r\nfunction themes_grid($list)\r\n{\r\n\tglobal $layout;\r\n\tglobal $website;\r\n    global $user;\r\n    global $current_version;\r\n\t\r\n\t$navibars = new navibars();\t\r\n\t$navibars->title(t(367, 'Themes'));\r\n\r\n    $marketplace = isset($_REQUEST['marketplace']);\r\n\r\n    if($user->permission(\"themes.install\")==\"true\")\r\n    {\r\n        $navibars->add_actions(\r\n            array(\r\n                '<a href=\"#\" id=\"theme-upload-button\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/package_add.png\"> '.t(461, 'Install from file').'</a>'\r\n            )\r\n        );\r\n    }\r\n\r\n    $navibars->add_actions(\r\n        array(\r\n            '<a href=\"?fid=themes&act=theme_sample_content_export\" id=\"theme-sample-content-export-button\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/server_compressed.png\"> '.t(480, 'Export sample content').'</a>'\r\n        )\r\n    );\r\n\r\n\t$grid = new navigrid('themes');\r\n\r\n\t$grid->set_header('\r\n        <div class=\"navibrowse-path ui-corner-all\">\r\n            <input type=\"checkbox\" id=\"theme-available-button\" /><label for=\"theme-available-button\"><img src=\"img/icons/silk/rainbow.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(528, 'Available').'</label>\r\n            '.($user->permission(\"themes.marketplace\")==\"true\"? '<input type=\"checkbox\" id=\"theme-marketplace-button\" /><label for=\"theme-marketplace-button\"><img src=\"img/icons/silk/basket.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(527, 'Marketplace').'</label>' : '').'\r\n        </div>\r\n\t');\r\n\r\n    $layout->add_script('\r\n        $(\"#theme-available-button\").button().on(\"click\", function()\r\n        {\r\n            window.location.replace(\"?fid=themes\");\r\n        });\r\n        $(\"#theme-marketplace-button\").button();\r\n        $(\"#theme-marketplace-button\").button().on(\"click\", function()\r\n        {\r\n            window.location.replace(\"?fid=themes&marketplace\");\r\n        });\r\n\r\n        $(\".navibrowse-path input\").removeAttr(\"checked\");\r\n        $(\"#theme-'.($marketplace? 'marketplace' : 'available').'-button\").attr(\"checked\", \"checked\");\r\n        $(\"#theme-marketplace-button,#theme-available-button\").button(\"refresh\");\r\n    ');\r\n\r\n    if(!$marketplace)\r\n    {\r\n        $grid->item_size(220, 220);\r\n        //$grid->thumbnail_size(138, 150); NV 1.x thumbnail size\r\n        $grid->thumbnail_size(205, 145);\r\n        $grid->highlight_on_click = false;\r\n\r\n        $themes = array();\r\n\r\n        // current website theme\r\n        if(!empty($website->theme))\r\n        {\r\n            $theme = new theme();\r\n            $theme->load($website->theme, true);\r\n            $update_ver = $_SESSION['themes_updates'][$theme->name];\r\n\r\n            if(version_compare($update_ver, $theme->version, '<='))\r\n                $update_ver = '';\r\n            else\r\n                $update_ver = $theme->version.' &raquo; '.$update_ver;\r\n\r\n            $themes[] = array(\r\n                'id'\t=>  $website->theme,\r\n                'name'\t=>\t'<div class=\"navigrid-themes-title navigrid-themes-installed\">'.$theme->title.'</div>',\r\n                'thumbnail' => NAVIGATE_URL.'/themes/'.$website->theme.'/thumbnail.png',\r\n                'header' => '\r\n                '.(file_exists(NAVIGATE_PATH.'/themes/'.$website->theme.'/'.$website->theme.'.info.html')? '<a href=\"#\" class=\"navigrid-themes-info\" theme=\"'.$website->theme.'\" theme-title=\"'.$theme->title.'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/information.png\"></a>' : '').'\r\n                '.(empty($update_ver)? '' : '\r\n                    <a href=\"#\" class=\"navigrid-themes-update\" theme=\"'.$website->theme.'\" title=\"'.t(285, \"Update\").' '.$update_ver.'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/asterisk_orange.png\"></a>\r\n                '),\r\n                'footer' => '\r\n                    <a href=\"?fid=websites&act=edit&id='.$website->id.'&tab=7\" class=\"uibutton navigrid-themes-button navigrid-theme-configure\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/wrench_orange.png\"> '.t(200, 'Options').'</a>\r\n                '.(\r\n                    !file_exists(NAVIGATE_PATH.'/themes/'.$website->theme.'/'.$website->theme.'_sample.zip')?\r\n                        '' : '<a href=\"#\" class=\"uibutton navigrid-themes-button navigrid-theme-install-demo\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/wand.png\"> '.t(484, 'Install demo').'</a>'\r\n                )\r\n            );\r\n        }\r\n\r\n        for($t=0; $t < count($list); $t++)\r\n        {\r\n            if($website->theme==$list[$t]['code']) continue;\r\n\r\n            $update_ver = $_SESSION['themes_updates'][$list[$t]['code']];\r\n            if(version_compare($update_ver, $list[$t]['version'], '<='))\r\n                $update_ver = '';\r\n            else\r\n                $update_ver = $list[$t]['version'].' &raquo; '.$update_ver;\r\n\r\n            $themes[] = array(\r\n                'id'\t=>  $list[$t]['code'],\r\n                'name'\t=>\t'<div class=\"navigrid-themes-title\">'.$list[$t]['title'].'</div>',\r\n                'thumbnail' => NAVIGATE_URL.'/themes/'.$list[$t]['code'].'/thumbnail.png',\r\n                'header' => '\r\n                    '.($user->permission(\"themes.delete\")==\"true\"? '<a href=\"#\" class=\"navigrid-themes-remove\" theme=\"'.$list[$t]['code'].'\" theme-title=\"'.$list[$t]['title'].'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/cancel.png\"></a>' : '').'\r\n                    '.(file_exists(NAVIGATE_PATH.'/themes/'.$list[$t]['code'].'/'.$list[$t]['code'].'.info.html')? '<a href=\"#\" class=\"navigrid-themes-info\" theme=\"'.$list[$t]['code'].'\" theme-title=\"'.$list[$t]['title'].'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/information.png\"></a>' : '').'\r\n                    '.(empty($update_ver)? '' : '\r\n                    '.($user->permission(\"themes.update\")==\"true\"? '<a href=\"#\" class=\"navigrid-themes-update\" theme=\"'.$list[$t]['code'].'\" title=\"'.t(285, \"Update\").' '.$update_ver.'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/asterisk_orange.png\"></a>' : '').'\r\n                '),\r\n                'footer' => '\r\n                    '.(file_exists(NAVIGATE_PATH.'/themes/'.$list[$t]['code'].'/demo.html')? '<a href=\"'.NAVIGATE_URL.'/themes/'.$list[$t]['code'].'/demo.html'.'\" class=\"uibutton navigrid-themes-button\" target=\"_blank\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/monitor.png\"> '.t(274, 'Preview').'</a>' : '').'\r\n                    <a href=\"#\" class=\"uibutton navigrid-themes-button navigrid-themes-install\" theme=\"'.$list[$t]['code'].'\" target=\"_blank\" style=\" margin-left: 5px; \"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/world_go.png\"> '.t(365, 'Install').'</a>\r\n                '\r\n            );\r\n        }\r\n\r\n        $grid->items($themes);\r\n\r\n        $navibars->add_content($grid->generate());\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-themes-install-confirmation\" title=\"'.t(59, 'Confirmation').'\" style=\" display: none; \">\r\n                '.t(371, 'Installing a new theme removes the settings of the old one.').'<br />\r\n                '.t(372, 'The list of available block types may also change.').'<br /><br />\r\n                '.t(373, 'Are you sure you want to continue?').'\r\n            </div>\r\n\r\n            <div id=\"navigrid-themes-information\" title=\"\" style=\" display: none; \"></div>\r\n        ');\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-themes-install-demo-confirmation\" title=\"'.t(59, 'Confirmation').'\" style=\" display: none; \">\r\n                '.t(483, 'Do you really want to import the default website for the theme selected?').'\r\n            </div>'\r\n        );\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-themes-remove-confirmation\" title=\"'.t(59, 'Confirmation').'\" style=\" display: none; \">\r\n                '.t(57, 'Do you really want to delete the item?').'\r\n            </div>'\r\n        );\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-themes-update\" title=\"'.t(285, 'Update').'\" style=\" display: none; \">\r\n                <iframe src=\"about:blank\"\r\n                    class=\"ui-corner-all\"\r\n                    border=\"0\" frameborder=\"0\" allowtransparency=\"true\">\r\n                </iframe>\r\n            </div>'\r\n        );\r\n    }\r\n    else\r\n    {\r\n        $html = '\r\n            <div class=\"navibrowse-path ui-corner-all\">\r\n                <input type=\"checkbox\" id=\"theme-available-button\" /><label for=\"theme-available-button\"><img src=\"img/icons/silk/rainbow.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(528, 'Available').'</label>\r\n                <input type=\"checkbox\" id=\"theme-marketplace-button\" /><label for=\"theme-marketplace-button\"><img src=\"img/icons/silk/basket.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(527, 'Marketplace').'</label>\r\n            </div>\r\n        ';\r\n        $html .= '\r\n            <iframe src=\"http://www.navigatecms.com/en/marketplace/themes\"\r\n                    style=\"visibility: hidden; width: 1px; height: 1px;\"\r\n                    class=\"ui-corner-all\"\r\n                    border=\"0\" frameborder=\"0\" allowtransparency=\"true\">\r\n            </iframe>\r\n        ';\r\n\r\n        $navibars->add_content('<div id=\"navigate-content-safe\" class=\"ui-corner-all\">'.$html.'</div>');\r\n\r\n        $layout->add_script('\r\n            $(window).on(\"resize focus blur\", function()\r\n            {\r\n                $(\"#navigate-content-safe iframe\").css({\"width\": 1, \"height\": 1});\r\n\r\n                $(\"#navigate-content-safe iframe\").css({\r\n                    padding: \"0px 4px\",\r\n                    width: $(\".navibrowse-path\").width() + parseInt($(\".navibrowse-path\").css(\"padding-right\")) * 2,\r\n                    height: $(\"#navigate-content-safe\").height() - $(\"#navigate-content-safe div:first\").height() - 24,\r\n                    visibility: \"visible\"\r\n                });\r\n            });\r\n\r\n            $(\"#navigate-content-safe iframe\").on(\"focus blur load\", function(){ $(window).trigger(\"resize\");});\r\n        ');\r\n    }\r\n\r\n    $layout->add_script('\r\n        function navigatecms_marketplace_install_from_hash(hash)\r\n        {\r\n            window.location.replace(\"?fid=themes&act=install_from_hash&hash=\"+hash);\r\n        }\r\n\r\n        if(typeof(window.postMessage) != \"undefined\")\r\n        {\r\n           if(typeof(window.addEventListener) != \"undefined\")\r\n            {\r\n                window.addEventListener(\"message\", function(event) {\r\n                    navigatecms_marketplace_install_from_hash(event.data);\r\n                }, false);\r\n            }\r\n            else\r\n            {\r\n                window.attachEvent(\"onmessage\", function(e) {\r\n                    navigatecms_marketplace_install_from_hash(e.data);\r\n                });\r\n            }\r\n        }\r\n    ');\r\n\r\n    $out = $navibars->generate();\r\n\r\n    $layout->add_script('\r\n\t    $.ajax({\r\n\t        type: \"GET\",\r\n\t        dataType: \"script\",\r\n\t        cache: true,\r\n\t        url: \"lib/packages/themes/themes.js?r='.$current_version->revision.'\",\r\n\t        complete: function()\r\n\t        {\r\n                navigate_themes_init();\r\n\t        }\r\n\t    });\r\n\t');\r\n\r\n\treturn $out;\r\n}\r\n\r\nfunction themes_sample_content_export_form()\r\n{\r\n    // templates, blocks, files, properties\r\n    global $user;\r\n    global $DB;\r\n    global $website;\r\n    global $layout;\r\n    global $theme;\r\n\r\n    $navibars = new navibars();\r\n    $naviforms = new naviforms();\r\n\r\n    $navibars->title(t(367, 'Themes').' / '.t(480, 'Export sample content'));\r\n\r\n    $layout->navigate_media_browser();\t// we can use media browser in this function\r\n\r\n    $navibars->add_actions(\t\tarray(\t'<a href=\"#\" onclick=\"javascript: navigate_media_browser();\" title=\"Ctrl+M\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/images.png\"> '.t(36, 'Media').'</a>'\t));\r\n\r\n    $navibars->add_actions(\r\n        array(\t'<a href=\"#\" onclick=\"navigate_tabform_submit(0);\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/accept.png\"> '.t(34, 'Save').'</a>'\t)\r\n    );\r\n\r\n    $navibars->form();\r\n\r\n    /*\r\n    $navibars->add_tab(t(43, \"Main\"));\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(67, 'Title').'</label>',\r\n        $naviforms->textfield('theme-title', $website->name)\r\n    ));\r\n    */\r\n\r\n    $navibars->add_tab(t(16, \"Structure\"));\r\n    // select structure points to export\r\n    $hierarchy = structure::hierarchy(0);\r\n    $categories_list = structure::hierarchyList($hierarchy);\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(330, 'Categories').'<br /></label>',\r\n        '<div class=\"category_tree\" id=\"category-tree-parent\">\r\n            <img src=\"img/icons/silk/world.png\" align=\"absmiddle\" /> '.$website->name.\r\n            '<div class=\"tree_ul\">'.$categories_list.'</div>'.\r\n        '</div>',\r\n        '<label>&nbsp;</label>',\r\n        '<button id=\"theme_export_sample_content_select_all_categories\">'.t(481, 'Select all').'</button>'\r\n    ));\r\n\r\n    $navibars->add_tab_content($naviforms->hidden('categories', ''));\r\n\r\n    $layout->add_script('        \r\n        $(\"#category-tree-parent .tree_ul\").jstree({\r\n            plugins: [\"changed\", \"types\", \"checkbox\"],\r\n            \"types\" :\r\n            {\r\n                \"default\":  {   \"icon\": \"img/icons/silk/folder.png\"    },\r\n                \"leaf\":     {   \"icon\": \"img/icons/silk/page_white.png\"      }\r\n            },\r\n            \"checkbox\":\r\n            {\r\n                three_state: false,\r\n                cascade: \"undetermined\"\r\n            },\r\n            \"core\":\r\n            {\r\n                dblclick_toggle: false\r\n            }\r\n        })\r\n        .on(\"dblclick.jstree\", function(e)\r\n        {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        \r\n            var li = $(e.target).closest(\"li\");\r\n            $(\"#category-tree-parent .tree_ul\").jstree(\"open_node\", \"#\" + li[0].id);\r\n        \r\n            var children_nodes = new Array();\r\n            children_nodes.push(li);\r\n            $(li).find(\"li\").each(function() {\r\n                children_nodes.push(\"#\" + $(this)[0].id);\r\n            });\r\n        \r\n            $(\"#category-tree-parent .tree_ul\").jstree(\"select_node\", children_nodes);\r\n        \r\n            return false;\r\n        })\r\n        .on(\"changed.jstree\", function(e, data)\r\n        {        \r\n            var i, j, r = [];\r\n            var categories = new Array();\r\n            $(\"#categories\").val(\"\");       \r\n        \r\n            for(i = 0, j = data.selected.length; i < j; i++)\r\n            {\r\n                var id = data.instance.get_node(data.selected[i]).data.nodeId;\r\n                categories.push(id);\r\n            }\r\n            \r\n            if(categories.length > 0)\r\n                $(\"#categories\").val(categories);                                                                \r\n        });\r\n\r\n        $(\"#theme_export_sample_content_select_all_categories\").on(\"click\", function(e)\r\n        {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            $(\"#category-tree-parent .tree_ul\").jstree(\"select_all\");\r\n            return false;\r\n        });\r\n\t');\r\n\r\n    $navibars->add_tab(t(22, \"Elements\"));\r\n    // select elements to export\r\n    $navitable_items = new navitable(\"items_list\");\r\n    $navitable_items->setURL('?fid=items&act=1');\r\n    $navitable_items->sortBy('date_modified', 'DESC');\r\n\t$navitable_items->setDataIndex('id');\r\n\t$navitable_items->max_rows = 9999999;\r\n    $navitable_items->addCol(\"ID\", 'id', \"40\", \"true\", \"left\");\r\n    $navitable_items->addCol(t(67, 'Title'), 'title', \"350\", \"true\", \"left\");\r\n    $navitable_items->addCol(t(309, 'Social'), 'comments', \"80\", \"true\", \"center\");\r\n    $navitable_items->addCol(t(78, 'Category'), 'category', \"150\", \"true\", \"center\");\r\n    $navitable_items->addCol(t(266, 'Author'), 'author_username', \"100\", \"true\", \"left\");\r\n    $navitable_items->addCol(t(85, 'Date published'), 'dates', \"100\", \"true\", \"center\");\r\n    $navitable_items->addCol(t(80, 'Permission'), 'permission', \"80\", \"true\", \"center\");\r\n    $navitable_items->after_select_callback = ' $(\"#elements\").val(navitable_items_list_selected_rows); ';\r\n    $navitable_items->setLoadCallback('\r\n        if(!themes_export_first_select_elements) \r\n        {\r\n            $(\"#cb_items_list\").trigger(\"click\");\r\n            themes_export_first_select_elements = true; \r\n        }\r\n    ');\r\n    $navibars->add_tab_content($naviforms->hidden('elements', ''));\r\n    $navibars->add_tab_content($navitable_items->generate());\r\n\r\n\r\n    $navibars->add_tab(t(544, \"Block groups\"));\r\n    // select blocks to export\r\n    $navitable_block_groups = new navitable(\"block_groups_list\");\r\n    $navitable_block_groups->setURL('?fid=blocks&act=block_groups_json');\r\n    $navitable_block_groups->sortBy('id', 'DESC');\r\n    $navitable_block_groups->setDataIndex('id');\r\n    $navitable_items->max_rows = 9999999;\r\n    $navitable_block_groups->addCol(\"ID\", 'id', \"80\", \"true\", \"left\");\r\n    $navitable_block_groups->addCol(t(237, 'Code'), 'code', \"120\", \"true\", \"left\");\r\n    $navitable_block_groups->addCol(t(67, 'Title'), 'title', \"200\", \"true\", \"left\");\r\n    $navitable_block_groups->addCol(t(23, 'Blocks'), 'blocks', \"80\", \"true\", \"left\");\r\n    $navitable_block_groups->after_select_callback = ' $(\"#block_groups\").val(navitable_block_groups_list_selected_rows); ';\r\n    $navitable_block_groups->setLoadCallback('\r\n        if(!themes_export_first_select_blockgrp) \r\n        {\r\n            $(\"#cb_block_groups_list\").trigger(\"click\");\r\n            themes_export_first_select_blockgrp = true; \r\n        }\r\n    ');\r\n    $navibars->add_tab_content($naviforms->hidden('block_groups', ''));\r\n    $navibars->add_tab_content($navitable_block_groups->generate());\r\n\r\n\r\n    $navibars->add_tab(t(23, \"Blocks\"));\r\n    // select blocks to export\r\n    $navitable_blocks = new navitable(\"blocks_list\");\r\n    $navitable_blocks->setURL('?fid=blocks&act=1');\r\n    $navitable_blocks->sortBy('id', 'DESC');\r\n    $navitable_blocks->setDataIndex('id');\r\n    $navitable_items->max_rows = 9999999;\r\n    $navitable_blocks->addCol(\"ID\", 'id', \"40\", \"true\", \"left\");\r\n    $navitable_blocks->addCol(t(160, 'Type'), 'type', \"120\", \"true\", \"center\");\r\n    $navitable_blocks->addCol(t(67, 'Title'), 'title', \"400\", \"true\", \"left\");\r\n    $navitable_blocks->addCol(t(85, 'Date published'), 'dates', \"100\", \"true\", \"center\");\r\n    $navitable_blocks->addCol(t(364, 'Access'), 'access', \"40\", \"true\", \"center\");\r\n    $navitable_blocks->addCol(t(65, 'Enabled'), 'enabled', \"40\", \"true\", \"center\");\r\n    $navitable_blocks->after_select_callback = ' $(\"#blocks\").val(navitable_blocks_list_selected_rows); ';\r\n    $navitable_blocks->setLoadCallback('\r\n        if(!themes_export_first_select_blocks) \r\n        {\r\n            $(\"#cb_blocks_list\").trigger(\"click\"); \r\n            themes_export_first_select_blocks = true; \r\n        }\r\n    ');\r\n    $navibars->add_tab_content($naviforms->hidden('blocks', ''));\r\n    $navibars->add_tab_content($navitable_blocks->generate());\r\n\r\n\r\n    $navibars->add_tab(t(250, \"Comments\"));\r\n    // select comments to export\r\n    $navitable_comments = new navitable(\"comments_list\");\r\n    $navitable_comments->setURL('?fid=comments&act=1');\r\n    $navitable_comments->sortBy('date_created', 'desc');\r\n    $navitable_comments->setDataIndex('id');\r\n    $navitable_items->max_rows = 9999999;\r\n    $navitable_comments->addCol(\"ID\", 'id', \"80\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(180, 'Item'), 'item', \"200\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(226, 'Date created'), 'date_created', \"100\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(1, 'User'), 'user', \"100\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(54, 'Text'), 'message', \"200\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(68, 'Status'), 'status', \"80\", \"true\", \"center\");\r\n    $navitable_comments->after_select_callback = ' $(\"#comments\").val(navitable_comments_list_selected_rows); ';\r\n    $navitable_comments->setLoadCallback('\r\n        if(!themes_export_first_select_comments) \r\n        {\r\n            $(\"#cb_comments_list\").trigger(\"click\"); \r\n            themes_export_first_select_comments = true; \r\n        }\r\n    ');\r\n    $navibars->add_tab_content($naviforms->hidden('comments', ''));\r\n    $navibars->add_tab_content($navitable_comments->generate());\r\n    \r\n    $navibars->add_tab(t(89, \"Files\"));\r\n    $navibars->add_tab_content_row(\r\n        array(\r\n            '<label>'.t(141, 'Folder').'</label>',\r\n            $naviforms->dropbox('folder', 0, 'folder')\r\n        )\r\n    );\r\n\r\n    $navibars->add_tab_content_row(\r\n        '<div class=\"subcomment\"><span class=\"ui-icon ui-icon-info\" style=\"float: left;\"></span> '.\r\n            t(482, 'All sample files should be placed in a folder. Navigate CMS will also add files used in contents.').\r\n        '</div>'\r\n    );\r\n\r\n    // auto-select everything on load\r\n    $layout->add_script('\r\n        themes_export_first_select_elements = false;\r\n        themes_export_first_select_blockgrp = false;\r\n        themes_export_first_select_blocks   = false;\r\n        themes_export_first_select_comments = false;\r\n\r\n        $(\"#theme_export_sample_content_select_all_categories\").trigger(\"click\");               \r\n    ');\r\n\r\n    return $navibars->generate();\r\n}\r\n\r\n/* TODO: generate a theme from custom templates and blocks... maybe in NVCMS3.0?\r\nfunction themes_export_form()\r\n{\r\n    // templates, blocks, files, properties\r\n    global $user;\r\n    global $DB;\r\n    global $website;\r\n    global $layout;\r\n    global $theme;\r\n\r\n    $navibars = new navibars();\r\n    $naviforms = new naviforms();\r\n\r\n    $navibars->title(t(367, 'Themes').' / '.t(475, 'Export'));\r\n\r\n    $navibars->add_actions(\r\n        array(\t'<a href=\"#\" onclick=\"navigate_tabform_submit(1);\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/accept.png\"> '.t(34, 'Save').'</a>'\t)\r\n    );\r\n\r\n    $navibars->form();\r\n\r\n    $navibars->add_tab(t(43, \"Main\"));\r\n\r\n    $navibars->add_tab_content(\r\n        '<div class=\"subcomment\"><span class=\"ui-icon ui-icon-info\" style=\"float: left;\"></span></div>'\r\n    );\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(67, 'Title').'</label>',\r\n        $naviforms->textfield('theme-title', $website->name)\r\n    ));\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(237, 'Code').'</label>',\r\n        $naviforms->textfield('theme-name', $website->name)\r\n    ));\r\n\r\n    $layout->add_script('\r\n        $(\"#theme-name\").on(\"keyup\", function()\r\n        {\r\n            var title = $(this).val();\r\n\t\t\ttitle = title.replace(/([\\'\"?:\\+\\&!\u00bf#\\\\\\\\])/g, \"\");\r\n\t\t\ttitle = title.replace(/[.\\s]+/g, \"_\");\r\n            $(this).val(title.toLowerCase());\r\n        });\r\n        $(\"#theme-name\").trigger(\"keyup\");\r\n    ');\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(220, 'Version').'</label>',\r\n        $naviforms->textfield('theme-version', '1.0')\r\n    ));\r\n\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(266, 'Author').'</label>',\r\n        $naviforms->textfield('theme-author', $user->username)\r\n    ));\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(177, 'Website').'</label>',\r\n        $naviforms->textfield('theme-website', $website->absolute_path())\r\n    ));\r\n\r\n    // languages (+auto create dictionary)\r\n    // styles\r\n\r\n    $navibars->add_tab(t(200, \"Properties\"));\r\n    // similar to template properties\r\n\r\n    $navibars->add_tab(t(20, \"Templates\"));\r\n    // select templates to export\r\n\r\n    $navibars->add_tab(t(23, \"Blocks\"));\r\n    // select block types to export\r\n\r\n    $navibars->add_tab(t(89, \"Files\"));\r\n    // upload JS files\r\n    // upload CSS files\r\n    // upload IMG files\r\n    // select files from database to be included\r\n\r\n    // + demo structure, content & blocks?\r\n\r\n    return $navibars->generate();\r\n}\r\n*/\r\n\r\n?>"], "fixing_code": ["<?php\r\n\r\nclass extension\r\n{\r\n\tpublic $id;\r\n\tpublic $website;\r\n    public $title;\r\n    public $code;\r\n    public $definition;\r\n\r\n    public $enabled;\r\n    public $settings;\r\n\r\n    public $dictionary;\r\n\tpublic $dictionaries;\r\n\r\n\tpublic function load($code)\r\n\t{\r\n\t\tglobal $DB;\r\n        global $website;\r\n\r\n        // retrieve extension definition from filesystem\r\n        if(file_exists(NAVIGATE_PATH.'/plugins/'.$code.'/'.$code.'.plugin'))\r\n        {\r\n            $this->definition = @json_decode(file_get_contents(NAVIGATE_PATH.'/plugins/'.$code.'/'.$code.'.plugin'));\r\n        }\r\n\r\n        debug_json_error('extension: '.$code);\r\n\r\n        $this->id = null;\r\n        $this->website = $website->id;\r\n        $this->title = $this->definition->title;\r\n        $this->code = $code;\r\n        $this->enabled = 1; // default\r\n        $this->settings = array(); // default\r\n\r\n        // now retrieve extension configuration for the active website\r\n        $DB->query('\r\n            SELECT * FROM nv_extensions\r\n            WHERE website = :wid\r\n              AND extension = :code',\r\n            'object',\r\n            array(\r\n                ':wid' => $this->website,\r\n                ':code' => $this->code\r\n            )\r\n        );\r\n\r\n        $row = $DB->first();\r\n\r\n        if(!empty($row))\r\n        {\r\n            $this->id = $row->id;\r\n            $this->enabled = $row->enabled;\r\n            $this->settings = json_decode($row->settings, true);\r\n        }\r\n        else\r\n        {\r\n            // get from definition the default values for settings, if any\r\n            if(isset($this->definition->options))\r\n            {\r\n                foreach ($this->definition->options as $option)\r\n                {\r\n                    if (isset($option->dvalue))\r\n                    {\r\n                        $this->settings[$option->id] = $option->dvalue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\t}\r\n\r\n    public function load_from_post()\r\n    {\r\n        global $website;\r\n\r\n        // it can only be extension options!\r\n        if(!empty($this->definition->options))\r\n        {\r\n            foreach($this->definition->options as $extension_option)\r\n            {\r\n                // get property info\r\n                $property = new property();\r\n                $property->load_from_object($extension_option, $this->settings->{$extension_option->id}, $this);\r\n\r\n                $value = '';\r\n\r\n                switch($property->type)\r\n                {\r\n                    case 'text':\r\n                    case 'textarea':\r\n                        // multilang\r\n                        $value = array();\r\n                        foreach($website->languages_list as $lang)\r\n                        {\r\n                            $value[$lang] = $_REQUEST['property-'.$extension_option->id.'-'.$lang];\r\n                        }\r\n                        break;\r\n\r\n                    case 'link':\r\n                        // multilang and title+link\r\n                        $value = array();\r\n                        foreach($website->languages_list as $lang)\r\n                        {\r\n                            $value[$lang] = $_REQUEST['property-'.$extension_option->id.'-'.$lang.'-link'].'##'.$_REQUEST['property-'.$extension_option->id.'-'.$lang.'-title'];\r\n                        }\r\n                        break;\r\n\r\n                    case 'date':\r\n                    case 'datetime':\r\n                        $value = core_date2ts($_REQUEST['property-'.$extension_option->id]);\r\n                        break;\r\n\r\n                    case 'moption':\r\n                        $value = implode(',', $_REQUEST['property-'.$extension_option->id]);\r\n                        break;\r\n\r\n                    case 'coordinates':\r\n                        $value = $_REQUEST['property-'.$extension_option->id.'-latitude'].'#'.$_REQUEST['property-'.$extension_option->id.'-longitude'];\r\n                        break;\r\n\r\n                    case 'boolean':\r\n                        $value = 0;\r\n                        if($_REQUEST['property-'.$extension_option->id]=='1')\r\n                        {\r\n                            $value = 1;\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // direct value\r\n                        $value = $_REQUEST['property-'.$extension_option->id];\r\n                }\r\n\r\n                $this->settings[$extension_option->id] = $value;\r\n            }\r\n        }\r\n    }\r\n\t\t\r\n\tpublic function save()\r\n\t{\r\n\t\tglobal $DB;\r\n\t\tglobal $events;\r\n\r\n        $ok = false;\r\n\r\n        $settings = $this->settings;\r\n        $settings = json_encode($settings);\r\n\r\n        if(empty($this->id))\r\n        {\r\n            $ok = $DB->execute('\r\n                INSERT INTO nv_extensions (id, website, extension, enabled, settings)\r\n                    VALUES(0, :website, :code, :enabled, :settings)',\r\n                array(\r\n                    ':website' => $this->website,\r\n                    ':code' => $this->code,\r\n                    ':enabled' => value_or_default($this->enabled, 0),\r\n                    ':settings' => $settings\r\n                )\r\n            );\r\n        }\r\n        else\r\n        {\r\n            $ok = $DB->execute('\r\n                UPDATE nv_extensions\r\n                   SET enabled = :enabled, settings = :settings\r\n                 WHERE id = :id',\r\n                array(\r\n                    ':enabled' => value_or_default($this->enabled, 0),\r\n                    ':settings' => $settings,\r\n                    ':id' => $this->id\r\n                )\r\n            );\r\n        }\r\n\r\n        if(method_exists($events, 'trigger'))\r\n        {\r\n            $events->trigger(\r\n                'extension',\r\n                'save',\r\n                array(\r\n                    'extension' => $this\r\n                )\r\n            );\r\n        }\r\n\r\n        return $ok;\r\n\t}\r\n\t\r\n\tpublic function delete()\r\n\t{\r\n\t\tglobal $DB;\r\n        global $user;\r\n        global $events;\r\n\r\n        $ok = false;\r\n\r\n        if($user->permission(\"themes.delete\")==\"false\")\r\n        {\r\n            throw new Exception(t(610, \"Sorry, you are not allowed to execute this function.\"));\r\n        }\r\n\r\n        if(file_exists(NAVIGATE_PATH.'/plugins/'.$this->code.'/'.$this->code.'.plugin'))\r\n        {\r\n            core_remove_folder(NAVIGATE_PATH.'/plugins/'.$this->code);\r\n\r\n            $ok = $DB->execute('\r\n                DELETE FROM nv_extensions\r\n                 WHERE id = '.intval($this->id)\r\n            );\r\n\r\n            if(method_exists($events, 'trigger'))\r\n            {\r\n                $events->trigger(\r\n                    'extension',\r\n                    'delete',\r\n                    array(\r\n                        'extension' => $this\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        return $ok;\r\n\t\r\n\t}\r\n\t\r\n\tpublic function quicksearch($text)\r\n\t{\r\n\r\n\t}\r\n\r\n    public function t($code)\r\n    {\r\n        global $user;\r\n        global $session;\r\n        global $website;\r\n        global $DB;\r\n\r\n        if(empty($this->dictionary))\r\n        {\r\n            $extension_languages = (array)$this->definition->languages;\r\n            $file = '';\r\n\r\n            if(!is_array($extension_languages))\r\n            {\r\n                $extension_languages = array();\r\n            }\r\n\r\n            // if we are in Navigate CMS, user has the default language\r\n            // if we call this function from the website, the session has the default language\r\n            $current_language = $session['lang'];\r\n            if(empty($current_language) && !empty($webuser))\r\n            {\r\n                $current_language = $webuser->language;\r\n            }\r\n\r\n            if(empty($current_language) && !empty($user))\r\n            {\r\n                $current_language = $user->language;\r\n            }\r\n\r\n            foreach($extension_languages as $lcode => $lfile)\r\n            {\r\n                if( $lcode==@$user->language ||\r\n                    $lcode==@$session['lang'] ||\r\n                    empty($file)\r\n                )\r\n                {\r\n                    $file = $lfile;\r\n                }\r\n            }\r\n\r\n            $json = '';\r\n            if(file_exists(NAVIGATE_PATH.'/plugins/'.$this->code.'/'.$file))\r\n            {\r\n                $json = @file_get_contents(NAVIGATE_PATH.'/plugins/'.$this->code.'/'.$file);\r\n            }\r\n\r\n            if(!empty($json))\r\n            {\r\n                $this->dictionary = (array)json_decode($json);\r\n            }\r\n\r\n            // maybe we have a custom translation added in navigate / webdictionary ?\r\n            if(!empty($website->id))\r\n            {\r\n                $DB->query('\r\n                  SELECT subtype, lang, text\r\n                    FROM nv_webdictionary\r\n                   WHERE website = '.$website->id.'\r\n                     AND node_type = \"extension\"\r\n                     AND lang = :lang\r\n                     AND extension = :code',\r\n                    'object',\r\n                    array(\r\n                        ':lang' => $current_language,\r\n                        ':code' => $this->code\r\n                    )\r\n                );\r\n                $rs = $DB->result();\r\n\r\n                for($r=0; $r < count($rs); $r++)\r\n                {\r\n                    $this->dictionary[$rs[$r]->subtype] = $rs[$r]->text;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(is_string($code))\r\n\t\t{\r\n            $out = $code;\r\n            if(substr($out, 0, 1)=='@')  // get translation from theme dictionary\r\n            {\r\n                $out = substr($out, 1);\r\n            }\r\n\r\n            if(!empty($this->dictionary[$out]))\r\n            {\r\n                $out = $this->dictionary[$out];\r\n            }\r\n        }\r\n\r\n        return $out;\r\n    }\r\n\r\n\r\n    public function get_translations()\r\n\t{\r\n\t\tif(empty($this->dictionaries))\r\n\t\t{\r\n\t\t\t$dict = array();\r\n            if(isset($this->definition->languages))\r\n            {\r\n                foreach($this->definition->languages as $lcode => $lfile)\r\n                {\r\n                    $jarray = NULL;\r\n                    $json = @file_get_contents(NAVIGATE_PATH.'/plugins/'.$this->code.'/'.$lfile);\r\n\r\n                    if(!empty($json))\r\n                    {\r\n                        $jarray = (array)json_decode($json);\r\n                    }\r\n\r\n                    if(!empty($jarray))\r\n                    {\r\n                        foreach($jarray as $code => $text)\r\n                        {\r\n                            $id = count($dict) + 1;\r\n                            $id = -$id;\r\n                            $dict[] = array(\r\n                                'id'\t\t=>\t$id, //.' | '.$this->name . ' | '.$code,\r\n                                'extension'\t=>\t$this->code,\r\n                                'source'    =>  'extension.'.$this->code.'.'.$code,\r\n                                'node_id'\t=>\t$code,\r\n                                'lang'\t\t=>\t$lcode,\r\n                                'text'\t\t=>\t$text\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t}\r\n\r\n\t\t\t$this->dictionaries = $dict;\r\n\t\t}\r\n\r\n\t\treturn $this->dictionaries;\r\n\t}\r\n\r\n\r\n    public static function list_installed($type='', $ignore_permissions=true)\r\n    {\r\n        global $website;\r\n        global $DB;\r\n        global $user;\r\n\r\n        $extensions = glob(NAVIGATE_PATH.'/plugins/*/*.plugin');\r\n        $updates = @$_SESSION['extensions_updates'];\r\n\r\n        $DB->query('\r\n            SELECT extension, enabled\r\n              FROM nv_extensions\r\n             WHERE website = '.intval($website->id),\r\n            'array'\r\n        );\r\n\r\n        $rs = $DB->result();\r\n\r\n        foreach($rs as $row)\r\n        {\r\n            $properties[$row['extension']] = array(\r\n                'enabled' => intval($row['enabled'])\r\n            );\r\n        }\r\n\r\n        $allowed_extensions = array();  // empty => all of them\r\n        if(!$ignore_permissions)\r\n        {\r\n            if(method_exists($user, \"permission\"))\r\n            {\r\n                $allowed_extensions = $user->permission(\"extensions.allowed\");\r\n            }\r\n        }\r\n\r\n        for($t=0; $t < count($extensions); $t++)\r\n        {\r\n            $extension_json = @json_decode(@file_get_contents($extensions[$t]));\r\n            debug_json_error($extensions[$t]); // if debug is enabled, show last json error\r\n\r\n            $code = substr($extensions[$t], strrpos($extensions[$t], '/')+1);\r\n            $code = substr($code, 0, strpos($code, '.plugin'));\r\n\r\n            if(!empty($allowed_extensions) && !in_array($code, $allowed_extensions))\r\n            {\r\n                $extensions[$t] = null;\r\n                continue;\r\n            }\r\n\r\n            if(!empty($extension_json))\r\n            {\r\n                $extensions[$t] = (array)$extension_json;\r\n\r\n                if(!empty($type) && $extensions[$t]['type']!=$type && $type!='all')\r\n                {\r\n                    $extensions[$t] = '';\r\n                    continue;\r\n                }\r\n\r\n                // ignore preinit type extensions\r\n                if(empty($type) && $extensions[$t]['type'] == 'debugger' && $type!='all')\r\n                {\r\n                    $extensions[$t] = '';\r\n                    continue;\r\n                }\r\n\r\n                if(substr($extensions[$t]['description'], 0, 1)=='@')\r\n                {\r\n                    $tmp = new extension();\r\n                    $tmp->load($code);\r\n                    $extensions[$t]['description'] = $tmp->t($extensions[$t]['description']);\r\n                }\r\n\r\n                $extensions[$t]['code'] = $code;\r\n                $extensions[$t]['update'] = ((isset($updates[$code]) && isset($extensions[$t]) && version_compare($updates[$code], $extensions[$t]['version']) > 0)? $updates[$code] : '');\r\n\r\n                if(isset($properties) && isset($properties[$code]))\r\n                {\r\n                    $extensions[$t]['enabled'] = ($properties[$code]['enabled']===0)? '0' : '1';\r\n                }\r\n                else\r\n                {\r\n                    $extensions[$t]['enabled'] = '1';\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!is_array($extensions))\r\n        {\r\n            $extensions = array();\r\n        }\r\n\r\n        $extensions = array_filter($extensions);\r\n        sort($extensions);\r\n\r\n        return $extensions;\r\n    }\r\n\r\n    public static function latest_available()\r\n    {\r\n        $list = extension::list_installed();\r\n        $post = array();\r\n\r\n        if(!is_array($list))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        foreach($list as $extension)\r\n        {\r\n            $post[$extension['code']] = $extension['version'];\r\n        }\r\n\r\n        $latest_update = core_curl_post(\r\n            'http://update.navigatecms.com/extensions',\r\n            array(\r\n                'extensions' => json_encode($post)\r\n            )\r\n        );\r\n\r\n        if(empty($latest_update))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $latest_update = json_decode($latest_update, true);\r\n\r\n        return $latest_update;\r\n    }\r\n\r\n    public static function include_php($extension_code)\r\n    {\r\n        if(file_exists(NAVIGATE_PATH.'/plugins/'.$extension_code.'/'.$extension_code.'.php'))\r\n        {\r\n            include_once(NAVIGATE_PATH.'/plugins/'.$extension_code.'/'.$extension_code.'.php');\r\n        }\r\n    }\r\n\r\n    public static function check_upload($file_upload, $extension_name)\r\n    {\r\n        // check mime\r\n        if(!in_array($file_upload['type'], array('application/zip', 'application/x-zip-compressed')))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // check file extension\r\n        if(pathinfo($file_upload['name'], PATHINFO_EXTENSION) != 'zip')\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // extract the zip in a temporary folder\r\n        $zip = new ZipArchive;\r\n        if($zip->open($file_upload['tmp_name']) !== true)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $tempdir = NAVIGATE_PRIVATE . '/tmp/' . uniqid('plugin-check-');\r\n\r\n        mkdir($tempdir);\r\n        $zip->extractTo($tempdir);\r\n        $zip->close();\r\n\r\n        // extension definition exists?\r\n        if(!file_exists($tempdir . '/' . $extension_name . '.plugin'))\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        // it's a valid json?\r\n        $extension_def = file_get_contents($tempdir . '/' . $extension_name . '.plugin');\r\n        $extension_def = json_decode($extension_def);\r\n        \r\n        if(json_last_error() != JSON_ERROR_NONE)\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        // check every php file included\r\n        $files = core_recursive_file_search($tempdir,  '/.*\\/*.(php|phtml)/');\r\n\r\n        $prohibited_functions = array(\r\n            'eval(',\r\n            'system(',\r\n            'exec(',\r\n            'shell_exec(',\r\n            'popen(',\r\n            'proc_open(',\r\n            'passthru(',\r\n            '`' // https://www.php.net/manual/en/language.operators.execution.php\r\n        );\r\n\r\n        foreach($files as $file)\r\n        {\r\n            if(!file_exists($file))\r\n            {\r\n                continue;\r\n            }\r\n            $file_content = file_get_contents($file);\r\n            // remove all spaces\r\n            $file_content = str_replace(array(' ', \"\\t\", \"\\r\", \"\\n\"), '', $file_content);\r\n\r\n            foreach($prohibited_functions as $pf)\r\n            {\r\n                if(stripos($file_content, $pf) !== false)\r\n                {\r\n                    core_remove_folder($tempdir);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // check for \"dangerous\" files\r\n        $htaccess = core_recursive_file_search($tempdir,  '/.htaccess/');\r\n        $phpini = core_recursive_file_search($tempdir,  '/php.ini/');\r\n        if(!empty($htaccess) || !empty($phpini))\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        core_remove_folder($tempdir);\r\n\r\n        return true;\r\n    }\r\n\r\n    public static function blocks()\r\n    {\r\n        $out = array();\r\n\r\n        $list = extension::list_installed();\r\n\r\n        for($e=0; $e < count($list); $e++)\r\n        {\r\n            if(isset($list[$e]['blocks']))\r\n            {\r\n                for($eb=0; $eb < count($list[$e]['blocks']); $eb++)\r\n                {\r\n                    $list[$e]['blocks'][$eb]->_extension = $list[$e]['code'];\r\n                    $out[] = $list[$e]['blocks'][$eb];\r\n                }\r\n            }\r\n        }\r\n\r\n        return $out;\r\n    }\r\n}\r\n\r\n?>", "function navigate_extensions_init()\r\n{\r\n    // make executable the runnable extensions\r\n    $(\".navigrid-item-buttonset[run='1'],.navigrid-item-buttonset[run='true']\").parent().on(\"dblclick\", function()\r\n    {\r\n        // is this extension enabled?\r\n        if($(this).find(\".navigrid-item-buttonset\").attr(\"enabled\")==\"0\")\r\n            return;\r\n\r\n        var extension = $(this).find(\".navigrid-item-buttonset\").attr(\"extension\");\r\n        //location.href = NAVIGATE_APP + \"?fid=extensions&act=run&extension=\" + extension;\r\n        location.href = NAVIGATE_APP + \"?fid=ext_\" + extension;\r\n    });\r\n\r\n    // open configuration on NON runnable extensions (if configuration is available)\r\n    $(\".navigrid-item-buttonset[run='']\").parent().on(\"dblclick\", function()\r\n    {\r\n        // is this extension enabled?\r\n        if($(this).find(\".navigrid-item-buttonset\").attr(\"enabled\")==\"0\")\r\n            return;\r\n\r\n        // has this extension a configuration option?\r\n        if($(this).find('.navigrid-extensions-settings').length > 0)\r\n            $(this).find('.navigrid-extensions-settings').trigger('click');\r\n    });\r\n\r\n    // show extension info window\r\n    $(\".navigrid-extensions-info\").bind(\"click\", function()\r\n    {\r\n        var extension = $(this).parent().attr(\"extension\");\r\n\r\n        $(\"#navigrid-extension-information\").attr(\"title\", $(this).parent().attr(\"extension-title\"));\r\n        $(\"#navigrid-extension-information\").load(\"?fid=extensions&act=extension_info&extension=\" + extension, function()\r\n        {\r\n            $(\"#navigrid-extension-information\").dialog(\r\n                {\r\n                    width: 700,\r\n                    height: 500,\r\n                    modal: true,\r\n                    title: \"<img src=\\\"img/icons/silk/information.png\\\" align=\\\"absmiddle\\\"> \" + $(\"#navigrid-extension-information\").attr(\"title\")\r\n                }).dialogExtend(\r\n                {\r\n                    maximizable: true\r\n                });\r\n        });\r\n    });\r\n\r\n    // disable extension\r\n    $(\".navigrid-extensions-disable\").on(\"click\", function()\r\n    {\r\n        var extension = $(this).parent().attr(\"extension\");\r\n        $.post(\r\n            NAVIGATE_APP + \"?fid=extensions&act=disable\",\r\n            { extension: extension },\r\n            function(data)\r\n            {\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-enable\").hide();\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-disable\").hide();\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-remove\").hide();\r\n\r\n                if(data==\"true\")\r\n                {\r\n                    $(\"div#item-\" + extension).find(\".navigrid-extensions-enable\").show();\r\n                    $(\"div#item-\" + extension).find(\".navigrid-extensions-remove\").show();\r\n                    $(\"div#item-\" + extension).find(\".navigrid-item-buttonset\").attr(\"enabled\", 1);\r\n                }\r\n                else\r\n                {\r\n                    $(\"div#item-\" + extension).find(\".navigrid-extensions-disable\").show();\r\n                }\r\n\r\n                navigate_extensions_refresh();\r\n            });\r\n    });\r\n\r\n    // enable extension\r\n    $(\".navigrid-extensions-enable\").on(\"click\", function()\r\n    {\r\n        var extension = $(this).parent().attr(\"extension\");\r\n        $.post(\r\n            NAVIGATE_APP + \"?fid=extensions&act=enable\",\r\n            { extension: extension },\r\n            function(data)\r\n            {\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-enable\").hide();\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-disable\").hide();\r\n                $(\"div#item-\" + extension).find(\".navigrid-extensions-remove\").hide();\r\n\r\n                if(data==\"true\")\r\n                {\r\n                    $(\"div#item-\" + extension).find(\".navigrid-extensions-disable\").show();\r\n                }\r\n                else\r\n                {\r\n                    $(\"div#item-\" + extension).find(\".navigrid-extensions-enable\").show();\r\n                    $(\"div#item-\" + extension).find(\".navigrid-extensions-remove\").show();\r\n                }\r\n\r\n                navigate_extensions_refresh();\r\n            });\r\n    });\r\n\r\n    // add extension as favorite\r\n    $(\".navigrid-extensions-favorite\").on(\"click\", function()\r\n    {\r\n        var extension = $(this).parent().attr(\"extension\");\r\n        var add_as_favorite = ($(this).parent().attr(\"favorite\")==0);\r\n        var el = this;\r\n\r\n        $.post(\r\n            NAVIGATE_APP + \"?fid=extensions&act=favorite\",\r\n            { extension: extension,\r\n                value: (add_as_favorite? 1 : 0)\r\n            },\r\n            function(data)\r\n            {\r\n                $(el).find(\"img\").removeClass(\"silk-heart_add\");\r\n                $(el).find(\"img\").removeClass(\"silk-heart_delete\");\r\n\r\n                if(data==\"true\")\r\n                {\r\n                    if(add_as_favorite)\r\n                    {\r\n                        $(el).parent().attr(\"favorite\", 1);\r\n                        $(el).find(\"img\").addClass(\"silk-heart_delete\");\r\n                    }\r\n                    else\r\n                    {\r\n                        $(el).parent().attr(\"favorite\", 0);\r\n                        $(el).find(\"img\").addClass(\"silk-heart_add\");\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    // show error\r\n                    navigate_notification(navigate_lang_dictionary[56]);\r\n                }\r\n\r\n                navigate_extensions_refresh();\r\n            });\r\n    });\r\n\r\n    $(\".navigrid-extensions-settings\").on(\"click\", function()\r\n    {\r\n        var extension = $(this).parent().attr(\"extension\");\r\n\r\n        $(\"#navigrid-extension-options\").attr(\"title\", $(this).parent().attr(\"extension-title\"));\r\n        //$(\"#navigrid-extension-options\").load(\"?fid=extensions&act=options&extension=\" + extension, function()\r\n        $(\"#navigrid-extension-options\").html('<iframe width=\"100%\" height=\"100%\" frameborder=\"0\" src=\"?fid=extensions&act=options&extension=' + extension + '\"></iframe>');\r\n\r\n        $(\"#navigrid-extension-options\").dialog(\r\n        {\r\n            width: $(window).width() * 0.95,\r\n            height: $(window).height() * 0.95,\r\n            modal: true,\r\n            title: \"<img src=\\\"img/icons/silk/cog.png\\\" align=\\\"absmiddle\\\"> \" + $(\"#navigrid-extension-options\").attr(\"title\")\r\n        }).dialogExtend(\r\n        {\r\n            maximizable: true\r\n        });\r\n    });\r\n\r\n    $(\".navigrid-extensions-remove\").bind(\"click\", function()\r\n    {\r\n        var extension = $(this).parent().attr(\"extension\");\r\n\r\n        $(\"#navigrid-extensions-remove-confirmation\").dialog(\r\n            {\r\n                resizable: true,\r\n                width: 300,\r\n                height: 150,\r\n                modal: true,\r\n                buttons:\r\n                    [\r\n                        {\r\n                            text: navigate_lang_dictionary[190],\r\n                            click: function()\r\n                            {\r\n                                $.post(\r\n                                    NAVIGATE_APP + \"?fid=extensions&act=remove&extension=\" + extension,\r\n                                    { },\r\n                                    function(data)\r\n                                    {\r\n                                        if(data==\"true\")\r\n                                        {\r\n                                            $(\"#item-\" + extension).fadeOut(\"slow\", function(){ $(\"#item-\" + extension).remove(); });\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            navigate_notification(navigate_lang_dictionary[56]);\r\n                                        }\r\n                                    }\r\n                                );\r\n                                $( this ).dialog( \"close\" );\r\n                            }\r\n                        },\r\n                        {\r\n                            text: navigate_lang_dictionary[58],\r\n                            click: function()\r\n                            {\r\n                                $( this ).dialog( \"close\" );\r\n                            }\r\n                        }\r\n                    ]\r\n            });\r\n        return false;\r\n    });\r\n\r\n    $(\".navigrid-extensions-update\").on(\"click\", function()\r\n    {\r\n        var extension = $(this).parent().attr(\"extension\");\r\n\r\n        $(\"#navigrid-extensions-update\").dialog(\r\n            {\r\n                resizable: false,\r\n                width: 980,\r\n                height: 650,\r\n                modal: true\r\n            }\r\n        );\r\n\r\n        $(\"#navigrid-extensions-update\").find('iframe').\r\n            css({\r\n                \"width\": \"960\",\r\n                \"height\": 600\r\n            }).\r\n            attr('src', 'http://www.navigatecms.com/en/marketplace/purchase?extension='+extension+'&get_update')\r\n\r\n        return false;\r\n    });\r\n\r\n    $(\".navigrid-item-buttonset\").each(function(i, el)\r\n    {\r\n        $(el).hide().css(\"visibility\", \"visible\");\r\n        $(el).fadeIn();\r\n        $(\".navigrid-extensions-disable\").addClass(\"ui-corner-right\");\r\n    });\r\n\r\n    $(\"#extension-upload-button\").on(\"click\", function()\r\n    {\r\n        $(\"#extension-upload-button\").parent().find(\"form\").remove();\r\n        $(\"#extension-upload-button\").after('<form action=\"?fid=extensions&act=extension_upload\" enctype=\"multipart/form-data\" method=\"post\"></form>');\r\n        $(\"#extension-upload-button\").next().append('<input type=\"hidden\" id=\"_nv_csrf_token\" name=\"_nv_csrf_token\" value=\"'+navigatecms.csrf_token+'\" />');\r\n        $(\"#extension-upload-button\").next().append('<input type=\"file\" name=\"extension-upload\" style=\" display: none;\" />');\r\n\r\n        $(\"#extension-upload-button\").next().find(\"input\").on(\"change\", function()\r\n        {\r\n            if($(this).val()!=\"\")\r\n            {\r\n                $(this).parent().submit();\r\n            }\r\n        });\r\n        $(\"#extension-upload-button\").next().find(\"input\").trigger(\"click\");\r\n\r\n        return false;\r\n    });\r\n}\r\n\r\nfunction navitable_quicksearch(value)\r\n{\r\n    $(\".navigrid-item\").hide();\r\n\r\n    if(value==\"\")\r\n        $(\".navigrid-item\").show();\r\n    else\r\n    {\r\n        $(\".navigrid-item\").each(function(i, el)\r\n        {\r\n            var item_text = $(el).text().toLowerCase();\r\n            if( item_text.indexOf(value.toLowerCase()) >= 0 )\r\n                $(el).fadeIn();\r\n        });\r\n    }\r\n}\r\n\r\nfunction navigate_extensions_refresh()\r\n{\r\n    $(\".navigrid-extensions-enable\").each(function(i, el)\r\n    {\r\n        if($(el).is(\":visible\"))\r\n        {\r\n            $(el).parent().parent().find(\"*\").css(\"opacity\", 0.5);\r\n            $(el).parent().css(\"opacity\", 1);\r\n            $(el).parent().find(\".navigrid-extensions-enable, .navigrid-extensions-remove\").css(\"opacity\", 0.9);\r\n            $(el).parent().find(\"img\").css(\"opacity\", 1);\r\n            $(el).parent().attr(\"enabled\", '0');\r\n        }\r\n        else\r\n        {\r\n            $(el).parent().parent().find(\"*\").css(\"opacity\", 1);\r\n            $(el).parent().attr(\"enabled\", '1');\r\n        }\r\n    });\r\n}", "<?php\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/extensions/extension.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/properties/property.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/properties/property.layout.php');\r\n\r\nfunction run()\r\n{\r\n\tglobal $user;\t\r\n\tglobal $layout;\r\n\tglobal $DB;\r\n\tglobal $website;\r\n\tglobal $events;\r\n\t\r\n\t$out = '';\r\n\t$item = new extension();\r\n\r\n\tswitch($_REQUEST['act'])\r\n\t{\r\n        case 'extension_info':\r\n            echo '<iframe src=\"'.NAVIGATE_URL.'/plugins/'.$_REQUEST['extension'].'/'.$_REQUEST['extension'].'.info.html'.'\" scrolling=\"auto\" frameborder=\"0\"  width=\"100%\" height=\"100%\"></iframe>';\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'disable':\r\n            if(naviforms::check_csrf_token('header'))\r\n            {\r\n                $extension = new extension();\r\n                $extension->load($_REQUEST['extension']);\r\n                $extension->enabled = 0;\r\n                $ok = $extension->save();\r\n                echo json_encode($ok);\r\n            }\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'enable':\r\n            if(naviforms::check_csrf_token('header'))\r\n            {\r\n                $extension = new extension();\r\n                $extension->load($_REQUEST['extension']);\r\n                $extension->enabled = 1;\r\n                $ok = $extension->save();\r\n                echo json_encode($ok);\r\n            }\r\n            core_terminate();\r\n            break;\r\n\r\n        // TODO: rework favorite extensions as user's favorite (not global)\r\n        /*\r\n        case 'favorite':\r\n            $extension = new extension();\r\n            $extension->load($_REQUEST['extension']);\r\n            $extension->favorite = intval($_REQUEST['value']);\r\n            $ok = $extension->save();\r\n            echo json_encode($ok);\r\n            core_terminate();\r\n            break;\r\n        */\r\n\r\n        case 'remove':\r\n            try\r\n            {\r\n                if(!naviforms::check_csrf_token('header'))\r\n                {\r\n                    throw new Exception(t(344, \"Security error\"));\r\n                }\r\n\r\n                $extension = new extension();\r\n                $extension->load($_REQUEST['extension']);\r\n                $status = $extension->delete();\r\n                echo json_encode($status);\r\n            }\r\n            catch(Exception $e)\r\n            {\r\n                echo $e->getMessage();\r\n            }\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'options':\r\n            $extension = new extension();\r\n            $extension->load($_REQUEST['extension']);\r\n\r\n            $status = null;\r\n            if(isset($_REQUEST['form-sent']))\r\n            {\r\n                naviforms::check_csrf_token();\r\n                $extension->load_from_post();\r\n                $status = $extension->save();\r\n            }\r\n\r\n            $out = extensions_options($extension, $status);\r\n            echo $out;\r\n\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'dialog':\r\n            $extension = new extension();\r\n            $extension->load($_REQUEST['extension']);\r\n            $out = extensions_dialog($extension, $_REQUEST['function'], $_REQUEST);\r\n            echo $out;\r\n\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'process':\r\n            $extension = trim($_REQUEST['extension']);\r\n            call_user_func(\"nvweb_\".$extension.\"_plugin\", $_REQUEST);\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'run':\r\n            $extension = trim($_REQUEST['extension']);\r\n\r\n            $extensions_allowed = $user->permission(\"extensions.allowed\");\r\n            if(!empty($extensions_allowed) && !in_array($extension, $extensions_allowed))\r\n            {\r\n                $out = t(610, \"Sorry, you are not allowed to execute this function.\");\r\n            }\r\n            else\r\n            {\r\n                if(file_exists(NAVIGATE_PATH.'/plugins/'.$extension.'/run.php'))\r\n                {\r\n                    include_once(NAVIGATE_PATH.'/plugins/'.$extension.'/run.php');\r\n                    if(function_exists($extension.'_run'))\r\n                    {\r\n                        eval('$out = '.$extension.'_run();');\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case 'tinymce_add_content_event':\r\n            $events_out = $events->trigger(\r\n                'tinymce_add_content',\r\n                'add_file',\r\n                array(\r\n                    'file_id' => $_REQUEST['file_id'],\r\n                    'media' => $_REQUEST['media'],\r\n                    'mime' => $_REQUEST['mime']\r\n                )\r\n            );\r\n\r\n            if(empty($events_out))\r\n            {\r\n                $events_out = array();\r\n            }\r\n\r\n            echo json_encode($events_out);\r\n\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'install_from_hash':\r\n            $url = base64_decode($_GET['hash']);\r\n\r\n            if(!empty($url) && $user->permission(\"extensions.install\")==\"true\")\r\n            {\r\n                $error = false;\r\n                $tmp_file = NULL;\r\n\r\n                parse_str(parse_url($url, PHP_URL_QUERY), $query);\r\n\r\n                if(parse_url($url, PHP_URL_HOST) == 'www.navigatecms.com')\r\n                {\r\n                    $tmp_file = sys_get_temp_dir().DIRECTORY_SEPARATOR.$query['code'].'.zip';\r\n                    @core_file_curl($url, $tmp_file);\r\n                }\r\n\r\n                if(!empty($tmp_file) && @filesize($tmp_file) > 0)\r\n                {\r\n                    $secure = extension::check_upload(\r\n                        array(\r\n                            'type' => mime_content_type($tmp_file),\r\n                            'name' => $query['code'].'.zip',\r\n                            'tmp_name' => $tmp_file\r\n                        ),\r\n                        $query['code']\r\n                    );\r\n\r\n                    if($secure !== true)\r\n                    {\r\n                        $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                        $error = true;\r\n                    }\r\n                    else // everything seems fine, go ahead\r\n                    {\r\n                        // uncompress ZIP and copy it to the extensions dir\r\n                        @mkdir(NAVIGATE_PATH.'/plugins/'.$query['code']);\r\n\r\n                        $zip = new ZipArchive();\r\n                        $zip_open_status = $zip->open($tmp_file);\r\n                        if($zip_open_status === TRUE)\r\n                        {\r\n                            $zip->extractTo(NAVIGATE_PATH.'/plugins/'.$query['code']);\r\n                            $zip->close();\r\n\r\n                            $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                        }\r\n                        else // zip extraction failed\r\n                        {\r\n                            $layout->navigate_notification('ERROR '.$zip_open_status, true, true);\r\n                            $error = true;\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    $layout->navigate_notification(t(56, 'Unexpected error'), true, true);\r\n                    $error = true;\r\n                }\r\n\r\n                if($error)\r\n                {\r\n                    $layout->add_content('\r\n                        <div id=\"navigate_marketplace_install_from_hash_error\">\r\n                            <p>'.t(529, \"It has not been possible to download from the marketplace.\").'</p>\r\n                            <p>'.t(530, \"You have to visit your Marketplace Dashboard and download the file, then use the <strong>Install from file</strong> button you'll find in the actions bar on the right.\").'</p>\r\n                            <p>'.t(531, \"Sorry for the inconvenience.\").'</p>\r\n                            <a class=\"uibutton\" href=\"http://www.navigatecms.com/en/marketplace/dashboard\" target=\"_blank\"><span class=\"ui-icon ui-icon-extlink\" style=\"float: left;\"></span> '.t(532, \"Navigate CMS Marketplace\").'</a>\r\n                        </div>\r\n                    ');\r\n                    $layout->add_script('\r\n                        $(\"#navigate_marketplace_install_from_hash_error\").dialog({\r\n                            modal: true,\r\n                            title: \"'.t(56, \"Unexpected error\").'\",\r\n                            close: function()\r\n                            {\r\n                                window.location.replace(\"?fid=extensions\");\r\n                            }\r\n                        });\r\n                    ');\r\n                }\r\n                else\r\n                {\r\n                    // redirect to extensions grid\r\n                    core_terminate('?fid=extensions');\r\n                }\r\n            }\r\n            break;\r\n\r\n        case 'extension_upload':\r\n            if(!naviforms::check_csrf_token())\r\n            {\r\n                $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n            }\r\n            else if(isset($_FILES['extension-upload']) && $_FILES['extension-upload']['error']==0  && $user->permission(\"extensions.install\")==\"true\")\r\n            {\r\n                // uncompress ZIP and copy it to the extensions dir\r\n                $tmp = trim(substr($_FILES['extension-upload']['name'], 0, strpos($_FILES['extension-upload']['name'], '.')));\r\n                $extension_name = filter_var($tmp, FILTER_SANITIZE_EMAIL);\r\n\r\n                if($tmp != $extension_name) // INVALID file name\r\n                {\r\n                    $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                }\r\n                else\r\n                {\r\n                    // security validation\r\n                    $secure = extension::check_upload($_FILES['extension-upload'], $extension_name);\r\n\r\n                    if($secure !== true)\r\n                    {\r\n                        $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                    }\r\n                    else // everything seems fine, go ahead\r\n                    {\r\n                        @mkdir(NAVIGATE_PATH.'/plugins/'.$extension_name);\r\n\r\n                        $zip = new ZipArchive;\r\n                        if($zip->open($_FILES['extension-upload']['tmp_name']) === TRUE)\r\n                        {\r\n                            $zip->extractTo(NAVIGATE_PATH.'/plugins/'.$extension_name);\r\n                            $zip->close();\r\n\r\n                            $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                        }\r\n                        else // zip extraction failed\r\n                        {\r\n                            $layout->navigate_notification(t(262, 'Error uploading file'), true, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // don't break!\r\n\r\n\t\tdefault:\r\n            $list = extension::list_installed(\"all\", false);\r\n\t\t\t$out = extensions_grid($list);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn $out;\r\n}\r\n\r\nfunction extensions_grid($list)\r\n{\r\n    global $layout;\r\n    global $user;\r\n    global $current_version;\r\n\r\n    $navibars = new navibars();\r\n    $navibars->title(t(327, 'Extensions'));\r\n\r\n    $marketplace = isset($_REQUEST['marketplace']);\r\n\r\n    if($user->permission(\"extensions.install\")==\"true\")\r\n    {\r\n        $navibars->add_actions(\r\n            array(\r\n                '<a href=\"#\" id=\"extension-upload-button\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/package_add.png\"> '.t(461, 'Install from file').'</a>'\r\n            )\r\n        );\r\n    }\r\n\r\n    if(!$marketplace)\r\n    {\r\n        $navibars->add_actions(\tarray ( 'search_form' ));\r\n    }\r\n\r\n    $grid = new navigrid('extensions');\r\n\r\n    $grid->set_header('\r\n        <div class=\"navibrowse-path ui-corner-all\">\r\n            <input type=\"checkbox\" id=\"extension-available-button\" /><label for=\"extension-available-button\"><img src=\"img/icons/silk/plugin.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(528, 'Available').'</label>\r\n            '.($user->permission(\"extensions.marketplace\")==\"true\"? '<input type=\"checkbox\" id=\"extension-marketplace-button\" /><label for=\"extension-marketplace-button\"><img src=\"img/icons/silk/basket.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(527, 'Marketplace').'</label>' : '').'\r\n        </div>\r\n\t');\r\n\r\n    $layout->add_script('\r\n        $(\"#extension-available-button\").button().on(\"click\", function()\r\n        {\r\n            window.location.replace(\"?fid=extensions\");\r\n        });\r\n        $(\"#extension-marketplace-button\").button();\r\n        $(\"#extension-marketplace-button\").button().on(\"click\", function()\r\n        {\r\n            window.location.replace(\"?fid=extensions&marketplace\");\r\n        });\r\n\r\n        $(\".navibrowse-path input\").removeAttr(\"checked\");\r\n        $(\"#extension-'.($marketplace? 'marketplace' : 'available').'-button\").attr(\"checked\", \"checked\");\r\n        $(\"#extension-marketplace-button,#extension-available-button\").button(\"refresh\");\r\n    ');\r\n\r\n    if(!$marketplace)\r\n    {\r\n        $grid->item_size(220, 220);\r\n        $grid->thumbnail_size(205, 145);\r\n\r\n        $extensions = array();\r\n\r\n        for($i=0; $i < count($list); $i++)\r\n        {\r\n            $extension_has_options = !empty($list[$i]['options']);\r\n            // ignore options for extensions of type payment_method\r\n            if($list[$i]['type']=='payment_method')\r\n                $extension_has_options = false;\r\n\r\n            $extensions[] = array(\r\n                'id'\t=>  $list[$i]['code'],\r\n                'name'\t=>\t'<div class=\"navigrid-item-title\">'.$list[$i]['title'].'<br />v'.$list[$i]['version'].'</div>',\r\n                'thumbnail' => NAVIGATE_URL.'/plugins/'.$list[$i]['code'].'/thumbnail.png',\r\n                'description' => $list[$i]['description'],\r\n                'header' => '',\r\n                'footer' => '\r\n                    <div class=\"buttonset navigrid-item-buttonset\" style=\" font-size: 0.6em; margin-top: 5px; visibility: hidden; \"\r\n                         extension=\"'.$list[$i]['code'].'\" extension-title=\"'.$list[$i]['title'].'\"\r\n                         run=\"'.$list[$i]['run'].'\" enabled=\"'.$list[$i]['enabled'].'\"  favorite=\"'.$list[$i]['favorite'].'\">\r\n                        <button class=\"navigrid-extensions-info\" title=\"'.t(457, 'Information').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/information.png\"></button>'.\r\n                        //(empty($list[$i]['run'])?       '' : '<button class=\"navigrid-extensions-favorite\" title=\"'.t(464, 'Favorite').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/heart_'.($list[$i]['favorite']=='1'? 'delete' : 'add').'.png\"></button>').\r\n                        (!$extension_has_options?   '' : '<button class=\"navigrid-extensions-settings\" title=\"'.t(459, 'Settings').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/cog.png\"></button>').\r\n                        (empty($list[$i]['update']) || ($user->permission(\"extensions.update\")==\"false\")?    '' : '<button class=\"navigrid-extensions-update\" title=\"'.t(463, 'Update available').': '.$list[$i]['update'].'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/asterisk_orange.png\"></button>').\r\n                        '<button '.(($list[$i]['enabled']==='0')? 'style=\"display: none;\"' : '').' class=\"navigrid-extensions-disable\" title=\"'.t(460, 'Disable').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/delete.png\"></button>'.\r\n                        '<button '.(($list[$i]['enabled']==='1')? 'style=\"display: none;\"' : '').' class=\"navigrid-extensions-enable\" title=\"'.t(462, 'Enable').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/accept.png\"></button>'.\r\n                        ($user->permission(\"extensions.delete\")==\"true\"? '<button '.(($list[$i]['enabled']==='1')? 'style=\"display: none;\"' : '').' class=\"navigrid-extensions-remove\" title=\"'.t(35, 'Delete').'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/cross.png\"></button>' : '').'\r\n                    </div>\r\n                '\r\n            );\r\n        }\r\n\r\n        $grid->items($extensions);\r\n\r\n        $navibars->add_content($grid->generate());\r\n\r\n        $navibars->add_content('<div id=\"navigrid-extension-information\" title=\"\" style=\" display: none; \"></div>');\r\n        $navibars->add_content('<div id=\"navigrid-extension-options\" title=\"\" style=\" display: none; \"></div>');\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-extensions-remove-confirmation\" title=\"'.t(59, 'Confirmation').'\" style=\" display: none; \">\r\n                '.t(57, 'Do you really want to delete the item?').'\r\n            </div>'\r\n        );\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-extensions-update\" title=\"'.t(285, 'Update').'\" style=\" display: none; \">\r\n                <iframe src=\"about:blank\"\r\n                    class=\"ui-corner-all\"\r\n                    border=\"0\" frameborder=\"0\" allowtransparency=\"true\">\r\n                </iframe>\r\n            </div>'\r\n        );\r\n\r\n        $out = $navibars->generate();\r\n\r\n        $layout->add_script('\r\n            $.ajax({\r\n                type: \"GET\",\r\n                dataType: \"script\",\r\n                cache: true,\r\n                url: \"lib/packages/extensions/extensions.js?r='.$current_version->revision.'\",\r\n                complete: function()\r\n                {                   \r\n                    navigate_extensions_init();\r\n                    navigate_extensions_refresh();\r\n                }\r\n            });\r\n        ');\r\n    }\r\n    else\r\n    {\r\n        $html = '\r\n            <div class=\"navibrowse-path ui-corner-all\">\r\n                <input type=\"checkbox\" id=\"extension-available-button\" /><label for=\"extension-available-button\"><img src=\"img/icons/silk/rainbow.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(528, 'Available').'</label>\r\n                <input type=\"checkbox\" id=\"extension-marketplace-button\" /><label for=\"extension-marketplace-button\"><img src=\"img/icons/silk/basket.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(527, 'Marketplace').'</label>\r\n            </div>\r\n        ';\r\n        $html .= '\r\n            <iframe src=\"http://www.navigatecms.com/en/marketplace/extensions\"\r\n                    style=\"visibility: hidden; width: 1px; height: 1px;\"\r\n                    class=\"ui-corner-all\"\r\n                    border=\"0\" frameborder=\"0\" allowtransparency=\"true\">\r\n            </iframe>\r\n        ';\r\n\r\n        $navibars->add_content('<div id=\"navigate-content-safe\" class=\"ui-corner-all\">'.$html.'</div>');\r\n\r\n        $layout->add_script('\r\n            $(window).on(\"resize focus blur\", function()\r\n            {\r\n                $(\"#navigate-content-safe iframe\").css({\"width\": 1, \"height\": 1});\r\n\r\n                $(\"#navigate-content-safe iframe\").css({\r\n                    padding: \"0px 4px\",\r\n                    width: $(\".navibrowse-path\").width() + parseInt($(\".navibrowse-path\").css(\"padding-right\")) * 2,\r\n                    height: $(\"#navigate-content-safe\").height() - $(\"#navigate-content-safe div:first\").height() - 24,\r\n                    visibility: \"visible\"\r\n                });\r\n            });\r\n\r\n            $(\"#navigate-content-safe iframe\").on(\"focus blur load\", function(){ $(window).trigger(\"resize\");});\r\n        ');\r\n\r\n        $out = $navibars->generate();\r\n    }\r\n\r\n    $layout->add_script('\r\n        function navigatecms_marketplace_install_from_hash(hash)\r\n        {\r\n            window.location.replace(\"?fid=extensions&act=install_from_hash&hash=\"+hash);\r\n        }\r\n\r\n        if(typeof(window.postMessage) != \"undefined\")\r\n        {\r\n           if(typeof(window.addEventListener) != \"undefined\")\r\n            {\r\n                window.addEventListener(\"message\", function(event) {\r\n                    navigatecms_marketplace_install_from_hash(event.data);\r\n                }, false);\r\n            }\r\n            else\r\n            {\r\n                window.attachEvent(\"onmessage\", function(e) {\r\n                    navigatecms_marketplace_install_from_hash(e.data);\r\n                });\r\n            }\r\n        }\r\n    ');\r\n\r\n    if(isset($_REQUEST['edit_settings']))\r\n    {\r\n        $layout->add_script('\r\n            $(window).on(\"load\", function()\r\n            {\r\n                $(\"div.buttonset[extension='.$_REQUEST['edit_settings'].']\").find(\".navigrid-extensions-settings\").trigger(\"click\");\r\n            });\r\n        ');\r\n    }\r\n\r\n    return $out;\r\n}\r\n\r\nfunction extensions_options($extension, $saved=null)\r\n{\r\n    global $layout;\r\n    global $website;\r\n    global $events;\r\n\r\n    $layout = null;\r\n    $layout = new layout('navigate');\r\n\r\n    if($saved!==null)\r\n    {\r\n        if($saved)\r\n        {\r\n            $layout->navigate_notification(t(53, \"Data saved successfully.\"), false, false, 'fa fa-check');\r\n        }\r\n        else\r\n        {\r\n            $layout->navigate_notification(t(56, \"Unexpected error\"), true, true);\r\n        }\r\n    }\r\n\r\n    $navibars = new navibars();\r\n    $naviforms = new naviforms();\r\n\r\n    $navibars->title(t(327, 'Extensions'));\r\n\r\n    $layout->navigate_media_browser();\t// we can use media browser in this function\r\n\r\n    $navibars->add_actions(\r\n        array(\r\n            '<a href=\"#\" onclick=\"javascript: navigate_media_browser();\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/images.png\"> '.t(36, 'Media').'</a>'\r\n        )\r\n    );\r\n\r\n    $navibars->add_actions(\r\n        array(\r\n            '<a href=\"#\" onclick=\"navigate_tabform_submit(0);\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/accept.png\"> '.t(34, 'Save').'</a>'\r\n        )\r\n    );\r\n\r\n    $navibars->form();\r\n\r\n    $navibars->add_tab(t(7, 'Configuration'));\r\n\r\n    $navibars->add_tab_content($naviforms->hidden('form-sent', 'true'));\r\n    $navibars->add_tab_content($naviforms->csrf_token());\r\n\r\n    // show a language selector (only if it's a multi language website and has properties)\r\n    if(!empty($extension->definition->options) && count($website->languages) > 1)\r\n    {\r\n        $website_languages_selector = $website->languages();\r\n        $website_languages_selector = array_merge(array('' => '('.t(443, 'All').')'), $website_languages_selector);\r\n\r\n        $navibars->add_tab_content_row(\r\n            array(\r\n                '<label>'.t(63, 'Languages').'</label>',\r\n                $naviforms->buttonset('language_selector', $website_languages_selector, '', \"navigate_tabform_language_selector(this);\")\r\n            ),\r\n\t        \"navigate-form-language_selector\"\r\n        );\r\n\r\n\t    // hide languages selector if there isn't a multilanguage property\r\n\t    $layout->add_script('\r\n\t\t\t$(document).ready(function()\r\n\t\t    {\r\n\t\t\t\tif($(\"#navigate-content-tabs-1 .navigate-form-row[lang]\").length < 1)\r\n\t\t\t\t{\r\n\t\t\t\t\t$(\"#navigate-form-language_selector\").css(\"display\", \"none\");\r\n\t\t\t\t}\r\n\t\t    });\r\n\t    ');\r\n    }\r\n\r\n    foreach($extension->definition->options as $option)\r\n    {\r\n        $property = new property();\r\n        $property->load_from_object($option, $extension->settings[$option->id], $extension);\r\n\r\n        if($property->type == 'tab')\r\n        {\r\n            $navibars->add_tab($property->name);\r\n            if(count($website->languages) > 1)\r\n            {\r\n                $website_languages_selector = $website->languages();\r\n                $website_languages_selector = array_merge(array('' => '('.t(443, 'All').')'), $website_languages_selector);\r\n\r\n                $navibars->add_tab_content_row(\r\n                    array(\r\n                        '<label>'.t(63, 'Languages').'</label>',\r\n                        $naviforms->buttonset('language_selector', $website_languages_selector, '', \"navigate_tabform_language_selector(this);\")\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        if($property->type == 'function')\r\n        {\r\n            $fname = $option->dvalue;\r\n            if(empty($fname))\r\n                $fname = $option->function;\r\n\r\n            // load the extension source code, if not already done\r\n            extension::include_php($extension->code);\r\n\r\n            if(!function_exists($fname))\r\n                continue;\r\n\r\n            call_user_func(\r\n                $fname,\r\n                array(\r\n                    'extension' => $extension,\r\n                    'navibars' => $navibars,\r\n                    'naviforms' => $naviforms\r\n                )\r\n            );\r\n        }\r\n        else\r\n        {\r\n            $navibars->add_tab_content(navigate_property_layout_field($property, $extension));\r\n        }\r\n    }\r\n\r\n    $layout->add_content('<div id=\"navigate-content\" class=\"navigate-content ui-corner-all\">'.$navibars->generate().'</div>');\r\n    $layout->navigate_additional_scripts();\r\n    navigate_property_layout_scripts(); // add javascript to enable special buttons and functions (Copy from, etc.)\r\n    $layout->add_script('\r\n        $(\"html\").css(\"background\", \"transparent\");\r\n    ');\r\n    \r\n    $out = $layout->generate();\r\n\r\n    return $out;\r\n}\r\n\r\nfunction extensions_dialog($extension, $function, $params)\r\n{\r\n    global $layout;\r\n\r\n    $layout = null;\r\n    $layout = new layout('navigate');\r\n\r\n\t// load the extension source code, if not already done\r\n    extension::include_php($extension->code);\r\n\r\n    if(function_exists($function))\r\n    {\r\n        call_user_func($function, $params);\r\n        $out = $layout->generate();\r\n    }\r\n    else\r\n    {\r\n        $out = 'ERROR: \"'.$function.'\" function does not exist!';\r\n    }\r\n\r\n    return $out;\r\n}\r\n\r\n?>", "<?php\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/items/item.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/structure/structure.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/comments/comment.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/blocks/block_group.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/blocks/block.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/files/file.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/properties/property.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/external/misc/zipfile.php');\r\n\r\nclass theme\r\n{\r\n\tpublic $name;\r\n\tpublic $title;\r\n    public $version;\r\n\tpublic $author;\r\n\tpublic $website;\r\n\tpublic $shop;\r\n\t\r\n\tpublic $languages;\r\n\tpublic $styles;\r\n\tpublic $options;\r\n    public $block_groups;\r\n\tpublic $blocks;\r\n\tpublic $templates;\r\n    public $webusers;\r\n\r\n    public $sections;\r\n\tpublic $dictionary;\r\n\tpublic $dictionaries;\r\n\t\r\n\tpublic function load($name)\r\n\t{\r\n\t\t$json = @file_get_contents(NAVIGATE_PATH.'/themes/'.$name.'/'.$name.'.theme');\r\n\r\n\t\tif(empty($json))\r\n        {\r\n            return false;\r\n        }\r\n\t\t\t\r\n\t\t$theme = json_decode($json);\r\n\r\n        if(empty($theme))\r\n        {\r\n            return false;\r\n        }\r\n\r\n\t\t//var_dump(json_last_error());\r\n\t\t$this->name = $name;\r\n\t\t$this->title = $theme->title;\r\n\t\t$this->version = $theme->version;\r\n\t\t$this->author = $theme->author;\r\n\t\t$this->website = $theme->website;\r\n\t\t$this->shop = value_or_default($theme->shop, false);\r\n\r\n        // remove \"@\" from styles section definition\r\n        $this->styles = json_encode($theme->styles);\r\n        $this->styles = str_replace(\"@\", \"\", $this->styles);\r\n        $this->styles = json_decode($this->styles);\r\n\r\n\t\t$this->languages = $theme->languages;\r\n\t\t$this->options = (array)$theme->options;\r\n\t\t$this->blocks = (array)$theme->blocks;\r\n\t\t$this->block_groups = (array)$theme->block_groups;\r\n\t\t$this->templates = (array)$theme->templates;\r\n\t\t$this->webusers = (array)$theme->webusers;\r\n        $this->content_samples = (array)$theme->content_samples;\r\n\r\n\t\t$this->content_samples_parse(null);\r\n\r\n\t\t// in 2.0 templates->section \"code\" was replaced by \"id\"\r\n\t\t// added some code to keep compatibility with existing themes\r\n\t\tfor($t=0; $t < count($this->templates); $t++)\r\n\t\t{\r\n\t\t    if(isset($this->templates[$t]->sections))\r\n            {\r\n                for ($s = 0; $s < count($this->templates[$t]->sections); $s++)\r\n                {\r\n                    if(!is_array($this->templates[$t]->sections))\r\n                    {\r\n                        $this->templates[$t]->sections = (array) $this->templates[$t]->sections;\r\n                    }\r\n\r\n                    if(!empty($this->templates[$t]->sections))\r\n                    {\r\n                        if (!isset($this->templates[$t]->sections[$s]->id))\r\n                        {\r\n                            $this->templates[$t]->sections[$s]->id = $this->templates[$t]->sections[$s]->code;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\t\t\t// remove spaces in \"uses\" attribute value, if declared\r\n            if(isset($this->templates[$t]->uses))\r\n            {\r\n                $this->templates[$t]->uses = str_replace(\" \", \"\", $this->templates[$t]->uses);\r\n            }\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n    public function delete()\r\n    {\r\n        global $user;\r\n\r\n        if($user->permission(\"themes.delete\")==\"false\")\r\n        {\r\n            throw new Exception(t(610, \"Sorry, you are not allowed to execute this function.\"));\r\n        }\r\n\r\n        $ok = false;\r\n        if(file_exists(NAVIGATE_PATH.'/themes/'.$this->name))\r\n        {\r\n            core_remove_folder(NAVIGATE_PATH.'/themes/'.$this->name);\r\n            $ok = !file_exists(NAVIGATE_PATH.'/themes/'.$this->name);\r\n        }\r\n\r\n        return $ok;\r\n    }\r\n\t\r\n\tpublic function templates($type=NULL)\r\n\t{\t\t\r\n\t\t$data = array();\r\n\r\n        if(!is_array($this->templates))\r\n        {\r\n            $this->templates = array();\r\n        }\r\n\r\n\t\tforeach($this->templates as $template)\r\n\t\t{\r\n\t\t\t$template->id = $template->type;\r\n\t\t\t$template->title = $this->template_title($template->type);\r\n\t\t\t$data[] = $template;\r\n\r\n            if($type == $template->id)\r\n            {\r\n                return $template;\r\n            }\r\n\t\t}\r\n\t\t\r\n\t\treturn $data;\r\n\t}\r\n\t\r\n\tpublic function template_title($type, $add_theme_name=true)\r\n\t{\r\n\t\t$out = $this->t($type);\r\n\r\n\t\tif($out==$type)\r\n\t\t{\r\n\t\t\t$types = theme::types();\r\n\t\t\t$out = (empty($types[$type])? $type : $types[$type]);\r\n\t\t}\r\n\t\t\r\n\t\tif($add_theme_name)\r\n        {\r\n            $out = $this->title . ' | ' . $out;\r\n        }\r\n\t\t\r\n\t\treturn $out;\r\n\t}\r\n\t\r\n\tpublic function t($code='')\r\n\t{\r\n        global $DB;\r\n\t\tglobal $user;\r\n\t\tglobal $webuser;\r\n        global $website;\r\n        global $session;\r\n\r\n\t\t$out = \"\";\r\n\r\n\t\tif(empty($this->dictionary))\r\n\t\t{\r\n\t\t\t$theme_languages = (array)$this->languages;\r\n            $file = '';\r\n\r\n    \t\tif(!is_array($theme_languages))\r\n\t\t\t\t$theme_languages = array();\r\n\r\n            // if we are in Navigate CMS, user has the default language\r\n            // if we call this function from the website, the session has the default language\r\n            $current_language = $session['lang'];\r\n            if(empty($current_language) && !empty($webuser))\r\n            {\r\n                $current_language = $webuser->language;\r\n            }\r\n\r\n            if(empty($current_language) && !empty($user))\r\n            {\r\n                $current_language = $user->language;\r\n            }\r\n\r\n\t\t\tforeach($theme_languages as $lcode => $lfile)\r\n\t\t\t{\r\n\t\t\t\tif( $lcode==$current_language || empty($file))\r\n                {\r\n                    $file = $lfile;\r\n                }\r\n\t\t\t}\r\n\r\n\t\t\t$json = @file_get_contents(NAVIGATE_PATH.'/themes/'.$this->name.'/'.$file);\r\n\t\t\r\n\t\t\tif(!empty($json))\t\t\r\n            {\r\n                $this->dictionary = (array)json_decode($json);\r\n            }\r\n\r\n            // maybe we have a custom translation added in navigate / webdictionary ?\r\n            if(!empty($website->id))\r\n            {\r\n                $DB->query('\r\n                  SELECT subtype, lang, text\r\n                    FROM nv_webdictionary\r\n                   WHERE website = :wid\r\n                     AND node_type = \"theme\"\r\n                     AND lang = :lang\r\n                     AND theme = :theme',\r\n                    'object',\r\n                    array(\r\n                        ':wid' => $website->id,\r\n                        ':lang' => $current_language,\r\n                        ':theme' => $this->name\r\n                    )\r\n                );\r\n                $rs = $DB->result();\r\n\r\n                for($r=0; $r < count($rs); $r++)\r\n                {\r\n                    $this->dictionary[$rs[$r]->subtype] = $rs[$r]->text;\r\n                }\r\n            }\r\n\t\t}\r\n\r\n\t\tif(is_string($code))\r\n\t\t{\r\n\t\t\t$out = $code;\r\n\r\n\t        if(substr($out, 0, 1)=='@')  // get translation from theme dictionary\r\n            {\r\n                $out = substr($out, 1);\r\n            }\r\n\r\n\t        if(!empty($this->dictionary[$out]))\r\n            {\r\n                $out = $this->dictionary[$out];\r\n            }\r\n\t\t}\r\n\t\t\r\n\t\treturn $out;\r\n\t}\r\n\t\r\n\tpublic function get_translations()\r\n\t{\t\t\r\n\t\tif(empty($this->dictionaries))\r\n\t\t{\r\n\t\t\t$dict = array();\r\n\t\t\tforeach($this->languages as $lcode => $lfile)\r\n\t\t\t{\r\n\t\t\t\t$jarray = NULL;\r\n\t\t\t\t$json = @file_get_contents(NAVIGATE_PATH.'/themes/'.$this->name.'/'.$lfile);\r\n\t\t\t\r\n\t\t\t\tif(!empty($json))\t\t\r\n                {\r\n                    $jarray = (array)json_decode($json);\r\n                }\r\n\t\t\t\t\r\n\t\t\t\tif(!empty($jarray))\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($jarray as $code => $text)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$id = count($dict) + 1;\r\n\t\t\t\t\t\t$id = -$id;\r\n\t\t\t\t\t\t$dict[] = array(\r\n                            'id'\t\t=>\t$id, //.' | '.$this->name . ' | '.$code,\r\n                            'theme'\t\t=>\t$this->name,\r\n\t\t\t\t\t\t\t'source'    =>  'theme.'.$this->name.'.'.$code,\r\n                            'node_id'\t=>\t$code,\r\n                            'lang'\t\t=>\t$lcode,\r\n                            'text'\t\t=>\t$text\r\n                        );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$this->dictionaries = $dict;\r\n\t\t}\r\n\t\t\r\n\t\treturn $this->dictionaries;\r\n\t}\t\r\n\r\n\tpublic static function types()\r\n\t{\t\t\r\n\t\t$template_types = array(\r\n            'home'\t\t\t    =>\tt(187, 'Home page'),\r\n            'content'\t\t    =>\tt(9, 'Content'),\r\n            'gallery'\t\t    =>\tt(210, 'Gallery'),\r\n            'blog'\t\t\t    =>\tt(375, 'Blog'),\r\n            'blog_entry'\t    =>\tt(376, 'Blog entry'),\r\n            'item'\t\t\t    =>\tt(630, 'Element'),\r\n            'product'\t\t    =>\tt(198, 'Product'),\r\n            'product_list'\t    =>\tt(737, 'Product list'),\r\n            'cart'\t            =>\tt(736, 'Cart'),\r\n            'checkout'          =>\tt(738, 'Checkout'),\r\n            'customer_account'  =>\tt(817, 'Customer account'),\r\n            'list'\t\t\t    =>\tt(39, 'List'),\r\n            'contact'\t        =>\tt(377, 'Contact'),\r\n            'search'\t\t    =>\tt(41, 'Search'),\r\n            'newsletter'\t    =>\tt(249, 'Newsletter'),\r\n            'portfolio'         =>  t(447, 'Portfolio'),\r\n            'portfolio_item'    =>  t(448, 'Portfolio item'),\r\n            'not_found'         =>  t(13, 'Not found')\r\n        );\r\n\r\n\t\treturn $template_types;\r\n\t}\r\n\t\r\n\tpublic static function list_available()\r\n\t{\r\n\t\t$themes = glob(NAVIGATE_PATH.'/themes/*/*.theme');\r\n        \r\n\t\tfor($t=0; $t < count($themes); $t++)\r\n\t\t{\r\n            $theme_json = @json_decode(@file_get_contents($themes[$t]));\r\n\r\n            debug_json_error($themes[$t]); // if debug is enabled, show last json error\r\n\r\n            $code = substr($themes[$t], strrpos($themes[$t], '/')+1);\r\n            $code = substr($code, 0, strpos($code, '.theme'));\r\n\r\n            $themes[$t] = '';\r\n\r\n            if(!empty($theme_json))\r\n            {\r\n                $themes[$t] = array(\r\n                    'code'  =>  $code,\r\n                    'title' =>  $theme_json->title,\r\n                    'version' => $theme_json->version\r\n                );\r\n            }\r\n\t\t}\r\n\r\n        $themes = array_filter($themes);\r\n        sort($themes);\r\n\r\n\t\treturn $themes;\r\n\t}\r\n\r\n    public function block_group_blocks($block_group_id)\r\n    {\r\n        $out = array();\r\n        foreach($this->block_groups as $bg)\r\n        {\r\n            if($bg->id == $block_group_id)\r\n            {\r\n                foreach($bg->blocks as $bgb)\r\n                {\r\n                    if(empty($bgb->type))\r\n                    {\r\n                        $bgb->type = $bgb->id;\r\n                    }\r\n                    $out[$bgb->id] = $bgb;\r\n                }\r\n            }\r\n        }\r\n        return $out;\r\n    }\r\n\r\n    // add special samples if the theme is using foundation, bootstrap...\r\n    public function content_samples_parse($ws=null)\r\n    {\r\n        global $website;\r\n\r\n\t    if(empty($ws) && !empty($website))\r\n        {\r\n            $ws = $website;\r\n        }\r\n\t    else\r\n        {\r\n            $ws = new website();\r\n        }\r\n\r\n        $content_samples = array();\r\n\r\n        $grid_samples = array(\r\n            '6,6',\r\n            '4,4,4',\r\n            '3,3,3,3',\r\n            '9,3', '3,9',\r\n            '8,4', '4,8',\r\n            '7,5', '5,7',\r\n            '6,3,3', '3,6,3', '3,3,6'\r\n        );\r\n\r\n        $text = \"Vis prodesset adolescens adipiscing te, usu mazim perfecto recteque at, assum putant erroribus mea in.\\n\";\r\n        $text.= \"Vel facete imperdiet id, cum an libris luptatum perfecto, vel fabellas inciderint ut.\";\r\n\r\n        if(!empty($this->content_samples))\r\n        {\r\n            foreach($this->content_samples as $cs)\r\n            {\r\n                switch($cs->file)\r\n                {\r\n                    case 'foundation_grid':\r\n                    case 'bootstrap_grid':\r\n                    case 'grid':\r\n                        $stylesheets = $ws->content_stylesheets('array', \"content\", false, $this);\r\n\r\n                        $html_pre = '<html><head>';\r\n\r\n                        if(!empty($stylesheets) && is_array($stylesheets))\r\n                        {\r\n                            foreach($stylesheets as $ss)\r\n                            {\r\n                                $html_pre.= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.$ss.'\" />';\r\n                            }\r\n                        }\r\n\r\n                        $html_pre.= '</head><body><div id=\"navigate-theme-content-sample\" style=\" width: 99%; \">';\r\n\r\n                        foreach($grid_samples as $gs)\r\n                        {\r\n                            $cols = explode(',', $gs);\r\n\r\n                            $name = \"Grid &nbsp; [ \";\r\n\r\n                            $html = $html_pre.'<div class=\"row\">';\r\n                            foreach($cols as $col)\r\n                            {\r\n                                $name .= $col.str_pad(\"\", $col, \"-\");\r\n                                $scol = $col * 2;\r\n                                // set the small column to the closest step: 6 or 12\r\n                                if($scol >= 8) $scol = 12;\r\n                                if($scol <= 7) $scol = 6;\r\n\r\n                                $html .= '<div class=\"col-md-'.$col.' medium-'.$col.' col-xs-'.$scol.' small-'.$scol.' columns\">'.$text.'</div>';\r\n                            }\r\n                            $name .= \" ]\";\r\n                            $html .= '</div>'; // close row\r\n                            $html .= '<div><p>+</p></div>'; // add extra space under the row\r\n                            $html .= '</div>'; // close copy enabled content\r\n                            $html .= '</body></html>';\r\n\r\n                            $content_samples[] = json_decode(json_encode(array('title' => $name, 'content' => $html)));\r\n                        }\r\n                        break;\r\n\r\n                    case 'skeleton_grid':\r\n                        $stylesheets = explode(\",\", $ws->content_stylesheets());\r\n                        $translate = array(\r\n                            1   => \"one\",\r\n                            2   => \"two\",\r\n                            3   => \"three\",\r\n                            4   => \"four\",\r\n                            5   => \"fix\",\r\n                            6   => \"six\",\r\n                            7   => \"seven\",\r\n                            8   => \"eight\",\r\n                            9   => \"nine\",\r\n                            10   => \"ten\",\r\n                            11   => \"eleven\",\r\n                            12   => \"twelve\"\r\n                        );\r\n\r\n                        $html_pre = '<html><head>';\r\n                        foreach($stylesheets as $ss)\r\n                        {\r\n                            $html_pre.= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.$ss.'\" />';\r\n                        }\r\n                        $html_pre.= '</head><body><div id=\"navigate-theme-content-sample\" style=\" width: 99%; \">';\r\n\r\n                        foreach($grid_samples as $gs)\r\n                        {\r\n                            $cols = explode(',', $gs);\r\n\r\n                            $name = \"Grid &nbsp; [ \";\r\n\r\n                            $html = $html_pre.'<div class=\"row\">';\r\n                            foreach($cols as $col)\r\n                            {\r\n                                $name .= $col.str_pad(\"\", $col, \"-\");\r\n                                $scol = $col * 2;\r\n                                // set the small column to the closest step: 6 or 12\r\n                                if($scol >= 8) $scol = 12;\r\n                                if($scol <= 7) $scol = 6;\r\n\r\n                                $html .= '<div class=\"'.$translate[$col].' columns\">'.$text.'</div>';\r\n                            }\r\n                            $name .= \" ]\";\r\n                            $html .= '</div>'; // close row\r\n                            $html .= '<div><p>+</p></div>'; // add extra space under the row\r\n                            $html .= '</div>'; // close copy enabled content\r\n                            $html .= '</body></html>';\r\n\r\n                            $content_samples[] = json_decode(json_encode(array('title' => $name, 'content' => $html)));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        $content_samples[] = $cs;\r\n                }\r\n            }\r\n\r\n            $this->content_samples = $content_samples;\r\n        }\r\n    }\r\n\r\n    public static function check_upload($file_upload, $theme_name)\r\n    {\r\n        // check mime\r\n        if(!in_array($file_upload['type'], array('application/zip', 'application/x-zip-compressed')))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // check file extension\r\n        if(pathinfo($file_upload['name'], PATHINFO_EXTENSION) != 'zip')\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // extract the zip in a temporary folder\r\n        $zip = new ZipArchive;\r\n        if($zip->open($file_upload['tmp_name']) !== true)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $tempdir = NAVIGATE_PRIVATE . '/tmp/' . uniqid('theme-check-');\r\n\r\n        mkdir($tempdir);\r\n        $zip->extractTo($tempdir);\r\n        $zip->close();\r\n\r\n        // theme definition exists?\r\n        if(!file_exists($tempdir . '/' . $theme_name . '.theme'))\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        // it's a valid json?\r\n        $theme_def = file_get_contents($tempdir . '/' . $theme_name . '.theme');\r\n        $theme_def = json_decode($theme_def);\r\n\r\n        if(json_last_error() != JSON_ERROR_NONE)\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        // check every php file included\r\n        $files = core_recursive_file_search($tempdir,  '/.*\\/*.(php|phtml)/');\r\n\r\n        $prohibited_functions = array(\r\n            'eval(',\r\n            'system(',\r\n            'exec(',\r\n            'shell_exec(',\r\n            'popen(',\r\n            'proc_open(',\r\n            'passthru(',\r\n            '`' // https://www.php.net/manual/en/language.operators.execution.php\r\n        );\r\n\r\n        foreach($files as $file)\r\n        {\r\n            if(!file_exists($file))\r\n            {\r\n                continue;\r\n            }\r\n            $file_content = file_get_contents($file);\r\n            // remove all spaces\r\n            $file_content = str_replace(array(' ', \"\\t\", \"\\r\", \"\\n\"), '', $file_content);\r\n\r\n            foreach($prohibited_functions as $pf)\r\n            {\r\n                if(stripos($file_content, $pf) !== false)\r\n                {\r\n                    core_remove_folder($tempdir);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // check for \"dangerous\" files\r\n        $htaccess = core_recursive_file_search($tempdir,  '/.htaccess/');\r\n        $phpini = core_recursive_file_search($tempdir,  '/php.ini/');\r\n        if(!empty($htaccess) || !empty($phpini))\r\n        {\r\n            core_remove_folder($tempdir);\r\n            return false;\r\n        }\r\n\r\n        core_remove_folder($tempdir);\r\n\r\n        return true;\r\n    }\r\n\r\n    public function import_sample($ws=null)\r\n    {\r\n        global $DB;\r\n        global $website;\r\n        global $theme;\r\n\t    global $events;\r\n\r\n        if(is_null($ws))\r\n            $ws = $website;\r\n\r\n        if(!file_exists(NAVIGATE_PATH.'/themes/'.$this->name.'/'.$this->name.'_sample.zip'))\r\n        {\r\n            throw new Exception(t(56, 'Unexpected error'));\r\n        }\r\n\r\n        $ptf = NAVIGATE_PRIVATE.'/tmp/'.$this->name.'_sample';\r\n        core_remove_folder($ptf);\r\n\r\n        // decompress the zip file\r\n        $extracted = false;\r\n        $zip = new ZipArchive;\r\n        if($zip->open(NAVIGATE_PATH.'/themes/'.$this->name.'/'.$this->name.'_sample.zip') === TRUE)\r\n        {\r\n            @mkdir($ptf, 0777, true);\r\n            $extracted = $zip->extractTo($ptf);\r\n            if(!$extracted)\r\n            {\r\n                throw new Exception(t(56, 'Unexpected error'));\r\n            }\r\n            $zip->close();\r\n        }\r\n\r\n        // website languages (add website included languages)\r\n        if(file_exists($ptf.'/languages.var_export'))\r\n        {\r\n            eval('$wlangs = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/languages.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $wlangs = unserialize(file_get_contents($ptf.'/languages.serialized'));\r\n        }\r\n\r\n        if(!is_array($wlangs))  $wlangs = array();\r\n\r\n        foreach($wlangs as $lcode => $loptions)\r\n        {\r\n            if(!is_array($ws->languages) || !in_array($lcode, array_keys($ws->languages)))\r\n            {\r\n                $ws->languages[$lcode] = $loptions;\r\n            }\r\n        }\r\n\r\n        // theme options\r\n        if(file_exists($ptf.'/theme_options.var_export'))\r\n        {\r\n            eval('$toptions = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/theme_options.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $toptions = unserialize(file_get_contents($ptf.'/theme_options.serialized'));\r\n        }\r\n\r\n        $ws->theme_options = $toptions;\r\n\r\n        $ws->save();\r\n\r\n\r\n        // folders (if available)\r\n        $theme_files_parent = file::create_folder($this->name, \"folder/generic\", 0, $ws->id);\r\n\r\n        $folders = array();\r\n        if(file_exists($ptf.'/folders.var_export')) // available since v2.1.2\r\n        {\r\n            eval('$folders_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/folders.var_export')).';');\r\n        }\r\n\r\n        if(!empty($folders_or))\r\n        {\r\n            // assume folders are defined in order (first the parents, then their children)\r\n            foreach($folders_or as $f)\r\n            {\r\n                // error protection\r\n                if(empty($f->id))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                $folders[$f->id] = new file();\r\n                $folders[$f->id]->load_from_resultset(array($f));\r\n                $folders[$f->id]->id = 0;\r\n                $folders[$f->id]->website = $ws->id;\r\n\r\n                if(isset($folders[$f->parent]))\r\n                {\r\n                    $folders[$f->id]->parent = $folders[$f->parent]->id;\r\n                }\r\n                else\r\n                {\r\n                    $folders[$f->id]->parent = $theme_files_parent;\r\n                }\r\n\r\n                $folders[$f->id]->insert();\r\n            }\r\n        }\r\n\r\n        \r\n        // files\r\n        $files = array();\r\n        if(file_exists($ptf.'/files.var_export'))\r\n        {\r\n            eval('$files_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/files.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $files_or = unserialize(file_get_contents($ptf.'/files.serialized'));\r\n        }\r\n\r\n        foreach($files_or as $f)\r\n        {\r\n            // error protection\r\n            if(empty($f->id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $files[$f->id] = new file();\r\n            $files[$f->id]->load_from_resultset(array($f));\r\n            $files[$f->id]->id = 0;\r\n            $files[$f->id]->website = $ws->id;\r\n\r\n            if(isset($folders[$f->parent]))\r\n            {\r\n                $files[$f->id]->parent = $folders[$f->parent]->id;\r\n            }\r\n            else\r\n            {\r\n                $files[$f->id]->parent = $theme_files_parent;\r\n            }\r\n\r\n            $files[$f->id]->insert();\r\n\r\n            // finally copy the sample file\r\n            @copy($ptf.'/files/'.$f->id, NAVIGATE_PRIVATE.'/'.$ws->id.'/files/'.$files[$f->id]->id);\r\n        }\r\n\r\n        // structure\r\n        $structure = array();\r\n        if(file_exists($ptf.'/structure.var_export'))\r\n        {\r\n            eval('$structure_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/structure.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $structure_or = unserialize(file_get_contents($ptf.'/structure.serialized'));\r\n        }\r\n\r\n        // hide existing structure entries\r\n        $DB->execute('\r\n            UPDATE nv_structure\r\n               SET permission = 2, visible = 0\r\n             WHERE website = '.$ws->id\r\n        );\r\n\r\n        // we need to insert the old categories in order, in other words, the parents before its children\r\n        // so to make things easy, we loop until we have no more categories to insert\r\n        // this could lead to an infinite loop, so we have to add a simple protection\r\n        $structure_categories_or = $structure_or;\r\n        $changes = true;\r\n        while(!empty($structure_categories_or) && $changes)\r\n        {\r\n            $changes = false;\r\n            foreach($structure_categories_or as $si => $category)\r\n            {\r\n                if(empty($category))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                $old_category_id = $category->id;\r\n                $category->id = 0;\r\n                $category->website = $ws->id;\r\n\r\n                if($category->parent > 0 && !isset($structure[$category->parent]))\r\n                {\r\n                    // this structure entry needs a parent category that's not yet inserted\r\n                    // ignore the current entry until the next loop\r\n                    continue;\r\n                }\r\n\r\n                // if this category has a parent != root, update the parent id with the new value given\r\n                if($category->parent > 0)\r\n                {\r\n                    $category->parent = $structure[$category->parent]->id;\r\n                }\r\n\r\n                $category->insert();\r\n                $changes = true;\r\n\r\n                $structure[$old_category_id] = $category;\r\n                unset($structure_categories_or[$si]);\r\n            }\r\n\r\n            $structure_categories_or = array_filter($structure_categories_or);\r\n        }\r\n\r\n\r\n        // elements\r\n        $items = array();\r\n        if(file_exists($ptf.'/items.var_export'))\r\n        {\r\n            eval('$items_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/items.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $items_or = unserialize(file_get_contents($ptf.'/items.serialized'));\r\n        }\r\n\r\n        foreach($items_or as $item)\r\n        {\r\n            // error protection\r\n            if(empty($item->id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $old_item_id = $item->id;\r\n            $item->id = 0;\r\n            $item->website = $ws->id;\r\n\r\n            // if this category has a parent != root, update the parent id with the new value given\r\n            if($item->category > 0)\r\n            {\r\n                $item->category = $structure[$item->category]->id;\r\n            }\r\n\r\n            $item->dictionary = theme::import_sample_parse_dictionary($item->dictionary, $files, $ws);\r\n\r\n            // gallery images (correct FILE ids)\r\n            if(!empty($item->galleries))\r\n            {\r\n                $ngallery = array();\r\n                foreach($item->galleries as $gid => $gallery)\r\n                {\r\n                    foreach($gallery as $fid => $caption)\r\n                    {\r\n                        $ngallery[$files[$fid]->id] = $caption;\r\n                    }\r\n\r\n                    $item->galleries[$gid] = $ngallery;\r\n                }\r\n            }\r\n\r\n            $item->insert();\r\n\r\n            $items[$old_item_id] = $item;\r\n        }\r\n\r\n\r\n        // blocks\r\n        $blocks = array();\r\n        if(file_exists($ptf.'/blocks.var_export'))\r\n        {\r\n            eval('$blocks_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/blocks.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $blocks_or = mb_unserialize(file_get_contents($ptf.'/blocks.serialized'));\r\n        }\r\n\r\n        if(!is_array($blocks_or))\r\n        {\r\n            $blocks_or = array();\r\n        }\r\n\r\n        foreach($blocks_or as $block)\r\n        {\r\n            // error protection\r\n            if(empty($block->id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $old_block_id = $block->id;\r\n            $block->id = 0;\r\n            $block->website = $ws->id;\r\n\r\n            // update structure entries (if used)\r\n            if(!empty($block->categories))\r\n            {\r\n                for($bc=0; $bc < count($block->categories); $bc++)\r\n                {\r\n                    $block->categories[$bc] = $structure[$block->categories[$bc]]->id;\r\n                }\r\n            }\r\n\r\n            // update Actions (file/image)\r\n            if(is_array($block->action['action-file']))\r\n            {\r\n                foreach($block->action['action-file'] as $lang => $file)\r\n                {\r\n                    $block->action['action-file'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            if(is_array($block->action['action-image']))\r\n            {\r\n                foreach(@$block->action['action-image'] as $lang => $file)\r\n                {\r\n                    $block->action['action-image'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            // update Triggers (image/rolloverimage/flash/content/html)\r\n            if(is_array($block->trigger['trigger-image']))\r\n            {\r\n                foreach(@$block->trigger['trigger-image'] as $lang => $file)\r\n                {\r\n                    $block->trigger['trigger-image'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            if(is_array($block->trigger['trigger-rollover']))\r\n            {\r\n                foreach(@$block->trigger['trigger-rollover'] as $lang => $file)\r\n                {\r\n                    $block->trigger['trigger-rollover'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            if(is_array($block->trigger['trigger-rollover-active']))\r\n            {\r\n                foreach(@$block->trigger['trigger-rollover-active'] as $lang => $file)\r\n                {\r\n                    $block->trigger['trigger-rollover'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            if(is_array($block->trigger['trigger-flash']))\r\n            {\r\n                foreach(@$block->trigger['trigger-flash'] as $lang => $file)\r\n                {\r\n                    $block->trigger['trigger-flash'][$lang] = $files[$file]->id;\r\n                }\r\n            }\r\n\r\n            $block->trigger['trigger-content'] = theme::import_sample_parse_array($block->trigger['trigger-content'], $files, $ws);\r\n            $block->trigger['trigger-html'] = theme::import_sample_parse_array($block->trigger['trigger-html'], $files, $ws);\r\n\r\n            $block->dictionary = theme::import_sample_parse_dictionary($block->dictionary, $files, $ws);\r\n\r\n            // translate nv:// urls, which may be in:\r\n            //      trigger->[trigger-links][lang][link][code] => link\r\n            //      trigger->[trigger-content][lang] (as html code)\r\n            //      trigger->[trigger-html][lang] (as html code)\r\n            //      action->[action-web][lang]\r\n\r\n            if(!empty($block->trigger['trigger-links']))\r\n            {\r\n                foreach($block->trigger['trigger-links'] as $lang => $block_trigger_link)\r\n                {\r\n                    foreach($block_trigger_link['link'] as $btl_code => $btl_link)\r\n                    {\r\n                        $btl_link = theme::import_sample_translate_nv_urls($btl_link, $structure, $items);\r\n                        $block->trigger['trigger-links'][$lang]['link'][$btl_code] = $btl_link;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(!empty($block->trigger['trigger-content']))\r\n            {\r\n                foreach($block->trigger['trigger-content'] as $lang => $block_trigger_content)\r\n                {\r\n                    $block_trigger_content = theme::import_sample_translate_nv_urls($block_trigger_content, $structure, $items);\r\n                    $block->trigger['trigger-content'][$lang] = $block_trigger_content;\r\n                }\r\n            }\r\n\r\n            if(!empty($block->trigger['trigger-html']))\r\n            {\r\n                foreach($block->trigger['trigger-html'] as $lang => $block_trigger_content)\r\n                {\r\n                    $block_trigger_content = theme::import_sample_translate_nv_urls($block_trigger_content, $structure, $items);\r\n                    $block->trigger['trigger-html'][$lang] = $block_trigger_content;\r\n                }\r\n            }\r\n\r\n            if(!empty($block->action['action-web']))\r\n            {\r\n                foreach($block->action['action-web'] as $lang => $block_action_web)\r\n                {\r\n                    $block_action_web = theme::import_sample_translate_nv_urls($block_action_web, $structure, $items);\r\n                    $block->action['action-web'][$lang] = $block_action_web;\r\n                }\r\n            }\r\n\r\n            $block->insert();\r\n\r\n            $blocks[$old_block_id] = $block;\r\n        }\r\n\r\n        // block_groups\r\n        $block_groups = array();\r\n        if(file_exists($ptf.'/block_groups.var_export'))\r\n        {\r\n            eval('$block_groups_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/block_groups.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $block_groups_or = unserialize(file_get_contents($ptf.'/block_groups.serialized'));\r\n        }\r\n\r\n        foreach($block_groups_or as $block_group)\r\n        {\r\n            // error protection\r\n            if(empty($block_group->id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $old_block_group_id = $block_group->id;\r\n            $block_group->id = 0;\r\n            $block_group->website = $ws->id;\r\n\r\n            // fix block IDs in group\r\n            $new_selection = array();\r\n            for($bi=0; $bi < count($block_group->blocks); $bi++)\r\n            {\r\n                if($block_group->blocks[$bi]['type'] == 'block')\r\n                {\r\n                    $block_group->blocks[$bi]['id'] = $blocks[ $block_group->blocks[$bi]['id'] ]->id;\r\n                }\r\n\r\n                $new_selection[] = $block_group->blocks[$bi];\r\n            }\r\n            $block_group->blocks = $new_selection;\r\n\r\n            $block_group->insert();\r\n\r\n            $block_groups[$old_block_group_id] = $block_group;\r\n        }\r\n\r\n\r\n        // comments\r\n        if(file_exists($ptf.'/comments.var_export'))\r\n        {\r\n            eval('$comments_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/comments.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $comments_or = unserialize(file_get_contents($ptf.'/comments.serialized'));\r\n        }\r\n\r\n        foreach($comments_or as $comment)\r\n        {\r\n            if(empty($comment->object_id))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            $comment->id = 0;\r\n            $comment->website = $ws->id;\r\n            $comment->object_id = $items[$comment->object_id]->id;\r\n            $comment->ip = '';\r\n            $comment->insert();\r\n        }\r\n\r\n        // now that categories and elements have been inserted\r\n        // we need to fix:\r\n        //      structure jumps: [jump-branch, jump-item] to its new ID values\r\n        //      items' sections: embedded nv:// urls\r\n        // note: properties will be \"translated\" later\r\n\r\n        // update structure properties\r\n        foreach($structure as $old_id => $entry)\r\n        {\r\n            foreach($entry->dictionary as $elang => $properties)\r\n            {\r\n                if(!empty($properties['action-jump-item']))\r\n                {\r\n                    $entry->dictionary[$elang]['action-jump-item'] = $items[$properties['action-jump-item']]->id;\r\n                }\r\n                else if(!empty($properties['action-jump-branch']))\r\n                {\r\n                    $entry->dictionary[$elang]['action-jump-branch'] = $structure[$properties['action-jump-branch']]->id;\r\n                }\r\n\r\n                $entry->save();\r\n            }\r\n        }\r\n\r\n        // find & update items' sections nv:// urls\r\n        foreach($items as $old => $element)\r\n        {\r\n            foreach($element->dictionary as $eld_lang => $eld_field)\r\n            {\r\n                foreach($eld_field as $eld_field_key => $eld_field_val)\r\n                {\r\n                    $html = theme::import_sample_translate_nv_urls($eld_field_val, $structure, $items);\r\n                    $items[$old]->dictionary[$eld_lang][$eld_field_key] = $html;\r\n                }\r\n            }\r\n            $items[$old]->save();\r\n        }\r\n\r\n\r\n        // translate website options; check for forced multilanguage options!\r\n\t    $theme_options = array();\r\n        for($toi=0; $toi < count($theme->options); $toi++)\r\n        {\r\n            $to = $theme->options[$toi];\r\n            $to->value = $ws->theme_options->{$to->id};\r\n\r\n            switch($to->type)\r\n            {\r\n                case 'file':\r\n                case 'image':\r\n                    // is multi-language forced for this option?\r\n\t\t\t\t\tif(in_array($to->multilanguage, array('true', '1')))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach($to->value as $olang => $oval)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(isset($files[$oval]->id))\r\n                            {\r\n                                $to->value[$olang] = $files[$oval]->id;\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isset($files[$to->value]->id))\r\n                        {\r\n                            $to->value = $files[$to->value]->id;\r\n                        }\r\n\t\t\t\t\t}\r\n                    break;\r\n\r\n                case 'category':\r\n                    // is multi-language forced for this option?\r\n\t\t\t\t\tif(in_array($to->multilanguage, array('true', '1')))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach($to->value as $olang => $oval)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(isset($structure[$oval]->id))\r\n                            {\r\n                                $to->value[$olang] = $structure[$oval]->id;\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isset($structure[$to->value]->id))\r\n                        {\r\n                            $to->value = $structure[$to->value]->id;\r\n                        }\r\n\t\t\t\t\t}\r\n                    break;\r\n\r\n                case 'element':\r\n                    // is multi-language forced for this option?\r\n\t\t\t\t\tif(in_array($to->multilanguage, array('true', '1')))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach($to->value as $olang => $oval)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(isset($items[$oval]->id))\r\n                            {\r\n                                $to->value[$olang] = $items[$oval]->id;\r\n                            }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isset($items[$to->value]->id))\r\n                        {\r\n                            $to->value = $items[$to->value]->id;\r\n                        }\r\n\t\t\t\t\t}\r\n                    break;\r\n\r\n                case 'categories':\r\n                    // is multi-language forced for this option?\r\n\t\t\t\t\tif(in_array($to->multilanguage, array('true', '1')))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tforeach($to->value as $olang => $oval)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t$property_categories_old = explode(',', $oval);\r\n\t\t                    $property_categories_new = array();\r\n\t\t                    foreach($property_categories_old as $oc)\r\n                            {\r\n                                $property_categories_new[] = $structure[$oc]->id;\r\n                            }\r\n\r\n\t\t                    $to->value[$olang] = implode(',', $property_categories_new);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t                    $property_categories_old = explode(',', $to->value);\r\n\t                    $property_categories_new = array();\r\n\t                    foreach($property_categories_old as $oc)\r\n                        {\r\n                            $property_categories_new[] = $structure[$oc]->id;\r\n                        }\r\n\r\n\t\t\t\t\t\t$to->value = implode(',', $property_categories_new);\r\n\t\t\t\t\t}\r\n                    break;\r\n\r\n                default:\r\n                    // we don't need to change this type of value\r\n            }\r\n\r\n\t        // convert theme option definition to website option value\r\n            $theme_options[$to->id] = $to->value;\r\n        }\r\n\r\n\t    $ws->theme_options = $theme_options;\r\n\r\n        $ws->save();\r\n\r\n        // properties\r\n        // array ('structure' => ..., 'item' => ..., 'block' => ...)\r\n        if(file_exists($ptf.'/properties.var_export'))\r\n        {\r\n            eval('$properties = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/properties.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n            $properties = unserialize(file_get_contents($ptf.'/properties.serialized'));\r\n        }\r\n\r\n        $elements_with_properties = array('structure', 'item', 'block', 'block_group_block');\r\n\r\n        foreach($elements_with_properties as $el)\r\n        {\r\n            if($el=='structure')\r\n            {\r\n                $real = $structure;\r\n            }\r\n            else if($el=='item')\r\n            {\r\n                $real = $items;\r\n            }\r\n            else if($el=='block')\r\n            {\r\n                $real = $blocks;\r\n            }\r\n            else if($el=='block_group_block')\r\n            {\r\n                $real = $block_groups;\r\n            }\r\n            else\r\n            {\r\n                continue;\r\n            } // unrecognized element type, ignore\r\n\r\n            if(!is_array($properties[$el]))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            foreach($properties[$el] as $el_id => $el_properties)\r\n            {\r\n                if(empty($el_properties))\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                $item_uid = \"\";\r\n                if($el=='block_group_block')\r\n                {\r\n                    // find each assigned block UID reference in this block group block\r\n                    foreach($el_properties as $item_uid => $el_properties_bg)\r\n                    {\r\n                        theme::import_sample_properties($ws, $el_properties_bg, $el, $files, $structure, $items, $real, $el_id, $item_uid);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    theme::import_sample_properties($ws, $el_properties, $el, $files, $structure, $items, $real, $el_id, $item_uid);\r\n                }\r\n            }\r\n        }\r\n\r\n\t    // apply final settings from export\r\n        if(file_exists($ptf.'/settings.var_export'))\r\n        {\r\n            eval('$settings_or = '.str_replace(\"stdClass::__set_state\", \"(object)\", file_get_contents($ptf.'/settings.var_export')).';');\r\n        }\r\n        else\r\n        {\r\n\t        // get first structure ID\r\n\t        $structure_id = array_keys($structure);\r\n\t        $structure_id = $structure_id[0];\r\n\t        $settings_or = array('homepage' => $structure_id);\r\n        }\r\n\r\n        if(!empty($settings_or['favicon']))\r\n        {\r\n            $ws->favicon = $files[$settings_or['favicon']]->id;\r\n        }\r\n\r\n        // what is the homepage?\r\n\t    if(is_numeric($settings_or['homepage']))\r\n\t    {\r\n\t\t    // homepage as a category ID\r\n\t\t    $ws->homepage = $structure[$settings_or['homepage']]->id;\r\n\t    }\r\n\t    else\r\n\t    {\r\n\t\t    // homepage as a path\r\n\t\t    $ws->homepage = $settings_or['homepage'];\r\n\t    }\r\n\r\n\t    $ws->save();\r\n\r\n        core_remove_folder($ptf);\r\n    }\r\n\r\n    public static function export_sample($a_categories, $a_items, $a_block_groups, $a_blocks, $a_comments, $folder)\r\n    {\r\n        global $website;\r\n        global $theme;\r\n\t    global $DB;\r\n\r\n        @set_time_limit(0);\r\n\r\n        $categories = array();\r\n        $items = array();\r\n        $blocks = array();\r\n        $block_groups = array();\r\n        $comments = array();\r\n        $properties = array();\r\n        $files = array();\r\n\t    $settings = array();\r\n\r\n        // structure\r\n        for($c=0; $c < count($a_categories); $c++)\r\n        {\r\n            $tmp = new structure();\r\n            $tmp->load($a_categories[$c]);\r\n            //$properties['structure'][$tmp->id] = property::load_properties_associative('structure', $tmp->template, 'structure', $tmp->id);\r\n            $properties['structure'][$tmp->id] = property::load_properties('structure', $tmp->template, 'structure', $tmp->id);\r\n            $categories[$tmp->id] = $tmp;\r\n            // add files referenced in properties\r\n            if(is_array($properties['structure'][$tmp->id]))\r\n            {\r\n                foreach($properties['structure'][$tmp->id] as $property)\r\n                {\r\n                    if($property->type == 'image' || $property->type == 'file')\r\n                    {\r\n                        $files[] = $property->value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // comments\r\n        for($c=0; $c < count($a_comments); $c++)\r\n        {\r\n            $tmp = new comment();\r\n            $tmp->load($a_comments[$c]);\r\n            $comments[$tmp->id] = $tmp;\r\n        }\r\n\r\n        // items\r\n        for($i=0; $i < count($a_items); $i++)\r\n        {\r\n            $tmp = new item();\r\n            $tmp->load($a_items[$i]);\r\n\r\n\t        $template_id = $tmp->template;\r\n\r\n\t        if($tmp->association != \"free\" && $tmp->embedding == 1)\r\n\t        {\r\n\t\t        // we have to get the template set in the category of the item\r\n\t\t\t\t$template_id = $DB->query_single(\r\n\t\t\t\t    'template',\r\n                    'nv_structure',\r\n                    ' id = :category AND website = :wid',\r\n                    null,\r\n                    array(\r\n                        ':wid' => $website->id,\r\n                        ':category' => $tmp->category\r\n                    )\r\n                );\r\n\t        }\r\n\r\n\t        $properties['item'][$tmp->id] = property::load_properties('item', $template_id, 'item', $tmp->id);\r\n\r\n\t        list($tmp->dictionary, $files) = theme::export_sample_parse_dictionary($tmp->dictionary, $files);\r\n\r\n            // add files referenced in properties\r\n            if(is_array($properties['item'][$tmp->id]))\r\n            {\r\n                foreach($properties['item'][$tmp->id] as $property)\r\n                {\r\n                    if($property->type == 'image' || $property->type == 'file')\r\n                    {\r\n                        $files[] = $property->value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // add files referenced in gallery\r\n            if(is_array($tmp->galleries[0]))\r\n            {\r\n                $gallery_images = array_keys($tmp->galleries[0]);\r\n                $files = array_merge($files, $gallery_images);\r\n            }\r\n\r\n            $items[$tmp->id] = $tmp;\r\n        }\r\n\r\n        // block_groups\r\n        for($i=0; $i < count($a_block_groups); $i++)\r\n        {\r\n            $tmp = new block_group();\r\n            $tmp->load($a_block_groups[$i]);\r\n            $block_groups[$tmp->id] = $tmp;\r\n\r\n            if(is_array($tmp->blocks))\r\n            {\r\n                foreach($tmp->blocks as $bgb)\r\n                {\r\n                    if($bgb['type'] == 'block_group_block')\r\n                    {\r\n                        $properties['block_group_block'][$a_block_groups[$i]][$bgb['uid']] = property::load_properties($bgb['id'], $tmp->code, 'block_group_block', $bgb['id'], $bgb['uid']);\r\n                    }\r\n                    else if($bgb['type'] == 'extension')\r\n                    {\r\n                        $properties['block_group_block'][$a_block_groups[$i]][$bgb['uid']] = property::load_properties(NULL, $bgb['id'], \"extension_block\", NULL, $bgb['uid']);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // note: maybe not all blocks in the group have been selected in the \"blocks\" tab\r\n            // here we only export the block group definition, the block group blocks properties and the extension blocks properties, not adding anything else to export\r\n        }\r\n\r\n\r\n        // blocks\r\n        for($i=0; $i < count($a_blocks); $i++)\r\n        {\r\n            $tmp = new block();\r\n            $tmp->load($a_blocks[$i]);\r\n\r\n            $properties['block'][$tmp->id] = property::load_properties('block', $tmp->type, 'block', $tmp->id);\r\n            list($tmp->dictionary, $files) = theme::export_sample_parse_dictionary($tmp->dictionary, $files);\r\n            list($tmp->trigger['trigger-content'], $files) = theme::export_sample_parse_array($tmp->trigger['trigger-content'], $files);\r\n            list($tmp->trigger['trigger-html'], $files) = theme::export_sample_parse_array($tmp->trigger['trigger-html'], $files);\r\n\r\n            if(!empty($tmp->trigger['trigger-image']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->trigger['trigger-image']));\r\n            }\r\n\r\n            if(!empty($tmp->trigger['trigger-rollover']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->trigger['trigger-rollover']));\r\n            }\r\n\r\n            if(!empty($tmp->trigger['trigger-rollover-active']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->trigger['trigger-rollover-active']));\r\n            }\r\n\r\n            if(!empty($tmp->trigger['trigger-flash']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->trigger['trigger-flash']));\r\n            }\r\n\r\n            if(!empty($tmp->action['action-image']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->action['action-image']));\r\n            }\r\n\r\n            if(!empty($tmp->action['action-file']))\r\n            {\r\n                $files = array_merge($files, array_values($tmp->action['action-file']));\r\n            }\r\n\r\n            // add files referenced in properties\r\n            if(is_array($properties['block'][$tmp->id]))\r\n            {\r\n                foreach($properties['block'][$tmp->id] as $property)\r\n                {\r\n                    if($property->type == 'image' || $property->type == 'file')\r\n                    {\r\n                        $files[] = $property->value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $blocks[$tmp->id] = $tmp;\r\n        }\r\n\r\n        // folders\r\n        // save references and get their files list\r\n        $folders = array();\r\n        $folders_to_check = array();\r\n        if(!empty($folder))\r\n        {\r\n            array_push($folders_to_check, $folder);\r\n            while(!empty($folders_to_check))\r\n            {\r\n                $f = array_shift($folders_to_check);\r\n                $f = file::filesOnPath($f);\r\n                foreach($f as $file)\r\n                {\r\n                    if($file->type == 'folder')\r\n                    {\r\n                        array_push($folders_to_check, $file->id);\r\n                        array_push($folders, $file);\r\n                    }\r\n                    else\r\n                    {\r\n                        $files[] = $file->id;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // add files selected as theme_options\r\n        foreach($theme->options as $to)\r\n        {\r\n            if($to->type == 'image' || $to->type == 'file')\r\n            {\r\n                $to_value = $website->theme_options->{$to->id};\r\n                if(is_array($to_value))\r\n                {\r\n                    $files = array_merge($files, $to_value);\r\n                }\r\n                else\r\n                {\r\n                    $files[] = $to_value;\r\n                }\r\n            }\r\n        }\r\n\r\n        // include favicon in file list\r\n        if(!empty($website->favicon))\r\n        {\r\n            $files[] = $website->favicon;\r\n        }\r\n\r\n        // files\r\n        $files = array_unique($files);\r\n        for($f=0; $f < count($files); $f++)\r\n        {\r\n            $file = new file();\r\n            $file->load($files[$f]);\r\n            $files[$f] = $file;\r\n        }\r\n\r\n\t    // settings\r\n\t    $settings['homepage'] = $website->homepage;\r\n        $settings['favicon'] = $website->favicon;\r\n\r\n        $zip = new zipfile();\r\n        $zip->addFile(var_export($website->languages, true), 'languages.var_export');\r\n        $zip->addFile(var_export($website->theme_options, true), 'theme_options.var_export');\r\n        $zip->addFile(var_export($categories, true), 'structure.var_export');\r\n        $zip->addFile(var_export($items, true), 'items.var_export');\r\n        $zip->addFile(var_export($block_groups, true), 'block_groups.var_export');\r\n        $zip->addFile(var_export($blocks, true), 'blocks.var_export');\r\n        $zip->addFile(var_export($comments, true), 'comments.var_export');\r\n        $zip->addFile(var_export($files, true), 'files.var_export');\r\n        $zip->addFile(var_export($folders, true), 'folders.var_export');\r\n        $zip->addFile(var_export($properties, true), 'properties.var_export');\r\n        $zip->addFile(var_export($settings, true), 'settings.var_export');\r\n\r\n        foreach($files as $file)\r\n        {\r\n            $zip->addFile(file_get_contents($file->absolute_path()), 'files/'.$file->id);\r\n        }\r\n\r\n        $contents = $zip->file();\r\n\r\n        header('Content-Disposition: attachment; filename=\"'.$website->theme.'_sample.zip\"');\r\n        header(\"Content-type: application/octet-stream\");\r\n        header('Content-Length: '.strlen($contents));\r\n\r\n        echo $contents;\r\n    }\r\n\r\n    public static function export_sample_parse_dictionary($dictionary, $files=array())\r\n    {\r\n        if(is_array($dictionary))\r\n        {\r\n            foreach($dictionary as $language => $dictionary_data)\r\n            {\r\n                list($dictionary_data, $files) = theme::export_sample_parse_array($dictionary_data, $files);\r\n                $dictionary[$language] = $dictionary_data;\r\n            }\r\n        }\r\n\r\n        return array($dictionary, $files);\r\n    }\r\n\r\n    public static function export_sample_parse_array($dictionary, $files=array())\r\n    {\r\n        global $website;\r\n\r\n        if(is_array($dictionary))\r\n        {\r\n            foreach($dictionary as $entry => $content)\r\n            {\r\n                // identify all files used\r\n                preg_match_all('!'.NAVIGATE_DOWNLOAD.'!', $content, $matches_nd, PREG_OFFSET_CAPTURE);\r\n\r\n                $matches_nd = $matches_nd[0];\r\n\r\n                for($m=count($matches_nd); $m >= 0; $m--)\r\n                {\r\n                    if(@empty($matches_nd[$m][1]))\r\n                    {\r\n                        continue;\r\n                    }\r\n                    $offset = $matches_nd[$m][1] + strlen(NAVIGATE_DOWNLOAD);\r\n                    $end = strpos($content, '\"', $offset);\r\n                    $file_query = substr($content, $offset + 1, $end - $offset - 1);\r\n\r\n                    $file_query = str_replace('&amp;', '&', $file_query);\r\n                    parse_str($file_query, $file_query);\r\n                    $file_id = intval($file_query['id']);\r\n                    $files[] = $file_id;\r\n\r\n                    $file_query['id'] = '{{NAVIGATE_FILE}'.$file_id.'}';\r\n                    if(!empty($file_query['wid']))\r\n                    {\r\n                        $file_query['wid'] = '{{NVWEB_WID}}';\r\n                    }\r\n\r\n                    $file_query = http_build_query($file_query);\r\n\r\n                    $content = substr_replace($content, $file_query, $offset + 1, $end - $offset - 1);\r\n                }\r\n\r\n                preg_match_all('!'.NVWEB_OBJECT.'!', $content, $matches_no, PREG_OFFSET_CAPTURE);\r\n                $matches_no = $matches_no[0];\r\n\r\n                for($m=count($matches_no); $m >= 0; $m--)\r\n                {\r\n                    if(@empty($matches_no[$m][1])) continue;\r\n                    $offset = $matches_no[$m][1] + strlen(NVWEB_OBJECT);\r\n                    $end = strpos($content, '\"', $offset);\r\n                    $file_query = substr($content, $offset + 1, $end - $offset - 1);\r\n\r\n                    $file_query = str_replace('&amp;', '&', $file_query);\r\n\r\n                    parse_str($file_query, $file_query);\r\n                    $file_id = intval($file_query['id']);\r\n                    $files[] = $file_id;\r\n\r\n                    $file_query['id'] = '{{NAVIGATE_FILE}'.$file_id.'}';\r\n                    $file_query = http_build_query($file_query);\r\n\r\n                    $content = substr_replace($content, $file_query, $offset + 1, $end - $offset - 1);\r\n                }\r\n\r\n                // example route substitutions\r\n                // http://192.168.x.x/navigate/navigate_download.php --> NAVIGATE_DOWNLOAD\r\n                // http://192.168.x.x/ocean [ $website->absolute_path() ] --> WEBSITE_ABSOLUTE_PATH\r\n                // http://192.168.x.x/navigate/themes/ocean [ NAVIGATE_PARENT.NAVIGATE_FOLDER.'/themes/'.$website->theme ] --> THEME_ABSOLUTE_PATH\r\n\r\n                $content = str_replace(NAVIGATE_DOWNLOAD, 'url://{{NAVIGATE_DOWNLOAD}}', $content);\r\n                $content = str_replace($website->absolute_path(), 'url://{{WEBSITE_ABSOLUTE_PATH}}', $content);\r\n                $content = str_replace(NAVIGATE_PARENT.NAVIGATE_FOLDER.'/themes/'.$website->theme, 'url://{{THEME_ABSOLUTE_PATH}}', $content);\r\n\r\n                $dictionary[$entry] = $content;\r\n            }\r\n        }\r\n\r\n        return array($dictionary, $files);\r\n    }\r\n\r\n    public static function import_sample_parse_dictionary($dictionary, $files=array(), $ws=null)\r\n    {\r\n        if(is_array($dictionary))\r\n        {\r\n            foreach($dictionary as $language => $foo)\r\n            {\r\n                $dictionary[$language] = theme::import_sample_parse_array($dictionary[$language], $files, $ws);\r\n            }\r\n        }\r\n\r\n        return $dictionary;\r\n    }\r\n\r\n    public static function import_sample_parse_array($dictionary, $files=array(), $ws=null)\r\n    {\r\n        global $website;\r\n\r\n\t    if(empty($ws))\r\n        {\r\n            $ws = $website;\r\n        }\r\n\r\n        if(!is_array($dictionary))\r\n        {\r\n            return $dictionary;\r\n        }\r\n\r\n        foreach($dictionary as $entry => $content)\r\n        {\r\n            // replace file IDs with real ones\r\n\r\n            // example: %7B%7BNAVIGATE_FILE%7D117%7D  --> {{NAVIGATE_FILE}117}\r\n\r\n            preg_match_all('!%7B%7BNAVIGATE_FILE%7D!', $content, $matches, PREG_OFFSET_CAPTURE);\r\n\r\n            $matches = $matches[0];\r\n\r\n            for($m=count($matches); $m >= 0; $m--)\r\n            {\r\n                if(@empty($matches[$m])) continue;\r\n\r\n                $offset = $matches[$m][1] + strlen('%7B%7BNAVIGATE_FILE%7D#');\r\n                $end = strpos($content, '%7D', $offset);\r\n                $file_id = substr($content, $offset - 1, $end - $offset + 1);\r\n                $content = substr_replace($content, $files[$file_id]->id, $matches[$m][1], strlen('%7B%7BNAVIGATE_FILE%7D'.$file_id.'%7D'));\r\n            }\r\n\r\n            $content = str_replace('%7B%7BNVWEB_WID%7D%7D', $ws->id, $content);\r\n            $content = str_replace('url://{{NAVIGATE_DOWNLOAD}}', NAVIGATE_DOWNLOAD, $content);\r\n            $content = str_replace('url://{{WEBSITE_ABSOLUTE_PATH}}', $ws->absolute_path(), $content);\r\n            $content = str_replace('url://{{THEME_ABSOLUTE_PATH}}', NAVIGATE_PARENT.NAVIGATE_FOLDER.'/themes/'.$ws->theme, $content);\r\n\r\n            $dictionary[$entry] = $content;\r\n        }\r\n\r\n        return $dictionary;\r\n    }\r\n\r\n    public static function import_sample_properties($ws, $el_properties, $el, $files, $structure, $items, $real, $el_id, $item_uid)\r\n    {\r\n        global $DB;\r\n\r\n        $el_properties_associative = array();\r\n\r\n        foreach($el_properties as $foo => $property)\r\n        {\r\n            if(!empty($property) && is_array($property))\r\n            {\r\n                $property = $property[0];\r\n            }\r\n\r\n            if(empty($property->value))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            // get the original ID for files and categories\r\n            // \"translate\" those IDs for the ones assigned on the new website\r\n            // for example:\r\n            // (old website) file id: 35    =>  (new website) file id: 3\r\n\r\n            // ...and also translate nv:// urls in (text) properties values\r\n            switch($property->type)\r\n            {\r\n                case 'file':\r\n                case 'image':\r\n                    if(in_array($property->multilanguage, array('true', '1')))\r\n                    {\r\n                        foreach($property->value as $plang => $pval)\r\n                        {\r\n                            if(isset($files[$pval]->id))\r\n                            {\r\n                                $property->value[$plang] = $files[$pval]->id;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if(isset($files[$property->value]->id))\r\n                        {\r\n                            $property->value = $files[$property->value]->id;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 'category':\r\n                    if(in_array($property->multilanguage, array('true', '1')))\r\n                    {\r\n                        foreach($property->value as $plang => $pval)\r\n                        {\r\n                            if(isset($structure[$pval]->id))\r\n                            {\r\n                                $property->value[$plang] = $structure[$pval]->id;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if(isset($structure[$property->value]->id))\r\n                        {\r\n                            $property->value = $structure[$property->value]->id;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 'categories':\r\n                    if(in_array($property->multilanguage, array('true', '1')))\r\n                    {\r\n                        foreach($property->value as $plang => $pval)\r\n                        {\r\n                            $property_categories_old = explode(',', $pval);\r\n                            $property_categories_new = array();\r\n                            foreach($property_categories_old as $oc)\r\n                            {\r\n                                $property_categories_new[] = $structure[$oc]->id;\r\n                            }\r\n                            $property->value[$plang] = implode(',', $property_categories_new);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        $property_categories_old = explode(',', $property->value);\r\n                        $property_categories_new = array();\r\n\r\n                        foreach($property_categories_old as $oc)\r\n                        {\r\n                            $property_categories_new[] = $structure[$oc]->id;\r\n                        }\r\n                        $property->value = implode(',', $property_categories_new);\r\n                    }\r\n                    break;\r\n\r\n                case 'element':\r\n                    // is multi-language forced for this property?\r\n                    if(in_array($property->multilanguage, array('true', '1')))\r\n                    {\r\n                        foreach($property->value as $olang => $oval)\r\n                        {\r\n                            if(isset($items[$oval]->id))\r\n                            {\r\n                                $property->value[$olang] = $items[$oval]->id;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if(isset($items[$property->value]->id))\r\n                        {\r\n                            $property->value = $items[$property->value]->id;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    if(is_array($property->value))\r\n                    {\r\n                        // multilanguage property\r\n                        foreach($property->value as $lang => $pvalue)\r\n                        {\r\n                            $property->value[$lang] = theme::import_sample_translate_nv_urls($pvalue, $structure, $items);\r\n                        }\r\n                    }\r\n                    else if(!is_string($property->value))  // ignore numeric values\r\n                    {\r\n                        $property->value = theme::import_sample_translate_nv_urls($property->value, $structure, $items);\r\n                    }\r\n            }\r\n\r\n            $el_properties_associative[$property->id] = $property->value;\r\n        }\r\n\r\n        if(!empty($el_properties_associative))\r\n        {\r\n            if($el=='block_group_block')\r\n            {\r\n                $template = $real[$el_id]->code;\r\n            }\r\n            else if($el=='block')\r\n            {\r\n                $template = $real[$el_id]->type;\r\n            }\r\n            else\r\n            {\r\n                $template = $real[$el_id]->template;\r\n\r\n                if(empty($template) && $el == 'item' && $real[$el_id]->embedding == 1)\r\n                {\r\n                    // we have to get the template set in the category of the item\r\n                    $template = $DB->query_single(\r\n                        'template',\r\n                        'nv_structure',\r\n                        ' id = '.intval($real[$el_id]->category).' AND \r\n\t\t\t\t\t\t\t\t  website = '.intval($ws->id)\r\n                    );\r\n                }\r\n            }\r\n\r\n            property::save_properties_from_array($el, $real[$el_id]->id, $template, $el_properties_associative, $ws, $item_uid);\r\n        }\r\n    }\r\n\r\n    public static function import_sample_translate_nv_urls($html, $structure, $items)\r\n    {\r\n        preg_match_all(\"/nv:\\/\\/(element|elements|structure|category)\\/([0-9])+/\", $html, $matches);\r\n\r\n        if(!empty($matches) && !empty($matches[0]))\r\n        {\r\n            $matches = $matches[0];\r\n            foreach($matches as $match)\r\n            {\r\n                $parts = explode('/', $match);\r\n                $url = \"\";\r\n                switch($parts[2])\r\n                {\r\n                    case 'element':\r\n                    case 'item':\r\n                    case 'elements':\r\n                        $url = 'nv://element/' . $items[$parts[3]]->id;\r\n                        break;\r\n\r\n                    case 'structure':\r\n                    case 'category':\r\n                        $url = 'nv://structure/' . $structure[$parts[3]]->id;\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore this url, leave as is\r\n                }\r\n\r\n                if(!empty($url))\r\n                {\r\n                    $html = str_replace($match, $url, $html);\r\n                }\r\n            }\r\n        }\r\n\r\n        return $html;\r\n    }\r\n\r\n    public static function latest_available()\r\n    {\r\n        $list = theme::list_available();\r\n        $post = array();\r\n\r\n        if(!is_array($list))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        foreach($list as $theme)\r\n        {\r\n            $post[$theme['code']] = $theme['version'];\r\n        }\r\n\r\n        $latest_update = core_curl_post(\r\n            'http://update.navigatecms.com/themes',\r\n            array(\r\n                'themes' => json_encode($post)\r\n            )\r\n        );\r\n\r\n        if(empty($latest_update))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        $latest_update = json_decode($latest_update, true);\r\n\r\n        return $latest_update;\r\n    }\r\n}\r\n\r\n?>", "function navigate_themes_init()\r\n{\r\n    $(\".navigrid-themes-installed\").parent().parent().addClass(\"navigrid-item-highlight\");\r\n\r\n    $(\".navigrid-themes-info\").on(\"click\", function()\r\n    {\r\n        var theme = $(this).attr(\"theme\");\r\n        $(\"#navigrid-themes-information\").prop(\"title\", $(this).attr(\"theme-title\"));\r\n        $(\"#navigrid-themes-information\").load(NAVIGATE_APP + \"?fid=themes&act=theme_info&theme=\" + theme, function()\r\n        {\r\n            $(\"#navigrid-themes-information\").dialog(\r\n                {\r\n                    width: 700,\r\n                    height: 500,\r\n                    modal: true\r\n                }).dialogExtend(\r\n                {\r\n                    maximizable: true\r\n                }).css(\"padding\", \"3px\");\r\n        });\r\n    });\r\n\r\n    $(\".navigrid-themes-update\").on(\"click\", function()\r\n    {\r\n        var theme = $(this).attr(\"theme\");\r\n\r\n        $(\"#navigrid-themes-update\").dialog(\r\n            {\r\n                resizable: false,\r\n                width: 980,\r\n                height: 650,\r\n                modal: true\r\n            }\r\n        );\r\n\r\n        $(\"#navigrid-themes-update\").find('iframe').\r\n            css({\r\n                \"width\": \"960\",\r\n                \"height\": 600\r\n            }).\r\n            attr('src', 'http://www.navigatecms.com/en/marketplace/purchase?theme='+theme+'&get_update')\r\n\r\n        return false;\r\n    });\r\n\r\n    $(\".navigrid-themes-install\").on(\"click\", function()\r\n    {\r\n        var theme = $(this).attr(\"theme\");\r\n\r\n        $(\"#navigrid-themes-install-confirmation\").dialog(\r\n            {\r\n                resizable: true,\r\n                width: 400,\r\n                height: 200,\r\n                modal: true,\r\n                buttons:\r\n                [\r\n                    {\r\n                        text: navigate_lang_dictionary[190],\r\n                        click: function()\r\n                        {\r\n                            window.location.href = \"?fid=themes&act=themes&opt=install&theme=\" + theme;\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    },\r\n                    {\r\n                        text: navigate_lang_dictionary[58],\r\n                        click: function()\r\n                        {\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        return false;\r\n    });\r\n\r\n    $(\".navigrid-theme-install-demo\").on(\"click\", function()\r\n    {\r\n        $(\"#navigrid-themes-install-demo-confirmation\").dialog(\r\n            {\r\n                resizable: true,\r\n                width: 400,\r\n                height: 200,\r\n                modal: true,\r\n                buttons:\r\n                    [\r\n                        {\r\n                            text: navigate_lang_dictionary[190],\r\n                            click: function()\r\n                            {\r\n                                window.location.href = \"?fid=themes&act=theme_sample_content_import&rtk=\" + navigatecms.request_token;\r\n                                $( this ).dialog( \"close\" );\r\n                            }\r\n                        },\r\n                        {\r\n                            text: navigate_lang_dictionary[58],\r\n                            click: function()\r\n                            {\r\n                                $( this ).dialog( \"close\" );\r\n                            }\r\n                        }\r\n                    ]\r\n            });\r\n        return false;\r\n    });\r\n\r\n    $(\"#theme-upload-button\").on(\"click\", function(e)\r\n    {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        $(\"#theme-upload-button\").parent().find(\"form\").remove();\r\n        $(\"#theme-upload-button\").after('<form action=\"?fid=themes&act=theme_upload\" enctype=\"multipart/form-data\" method=\"post\"></form>');\r\n        $(\"#theme-upload-button\").next().append('<input type=\"hidden\" id=\"_nv_csrf_token\" name=\"_nv_csrf_token\" value=\"'+navigatecms.csrf_token+'\" />');\r\n        $(\"#theme-upload-button\").next().append('<input type=\"file\" name=\"theme-upload\" style=\" display: none;\" />');\r\n        $(\"#theme-upload-button\").next().find(\"input\").on(\"change\", function()\r\n        {\r\n            if($(this).val()!=\"\")\r\n            {\r\n                $(this).parent().submit();\r\n                return false;\r\n            }\r\n        });\r\n        $(\"#theme-upload-button\").next().find(\"input\").trigger(\"click\");\r\n\r\n        return false;\r\n    });\r\n\r\n    $(\".navigrid-themes-remove\").on(\"click\", function()\r\n    {\r\n        var theme = $(this).attr(\"theme\");\r\n\r\n        $(\"#navigrid-themes-remove-confirmation\").dialog(\r\n            {\r\n                resizable: true,\r\n                width: 300,\r\n                height: 150,\r\n                modal: true,\r\n                title: $(this).attr(\"theme-title\"),\r\n                buttons:\r\n                [\r\n                    {\r\n                        text: navigate_lang_dictionary[190],\r\n                        click: function()\r\n                        {\r\n                            $.post(\r\n                                NAVIGATE_APP + \"?fid=themes&act=remove&theme=\" + theme,\r\n                                { },\r\n                                function(data)\r\n                                {\r\n                                    if(data==\"true\")\r\n                                    {\r\n                                        $(\"#item-\" + theme).fadeOut(\"slow\", function(){ $(\"#item-\" + theme).remove(); });\r\n                                    }\r\n                                    else if(data!=\"false\")\r\n                                    {\r\n                                        navigate_notification(data);\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        navigate_notification(navigate_lang_dictionary[56]);\r\n                                    }\r\n                                }\r\n                            );\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    },\r\n                    {\r\n                        text: navigate_lang_dictionary[58],\r\n                        click: function()\r\n                        {\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        return false;\r\n    });\r\n}", "<?php\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/themes/theme.class.php');\r\nrequire_once(NAVIGATE_PATH.'/lib/packages/properties/property.class.php');\r\n\r\nfunction run()\r\n{\r\n\tglobal $user;\t\r\n\tglobal $layout;\r\n\tglobal $website;\r\n    global $theme;\r\n    global $DB;\r\n\t\r\n\t$out = '';\r\n\r\n\tswitch($_REQUEST['act'])\r\n\t{\r\n        case 'theme_info':\r\n            echo '<iframe src=\"'.NAVIGATE_URL.'/themes/'.$_REQUEST['theme'].'/'.$_REQUEST['theme'].'.info.html'.'\" scrolling=\"auto\" frameborder=\"0\"  width=\"100%\" height=\"100%\"></iframe>';\r\n            core_terminate();\r\n            break;\r\n\r\n        case 'remove':\r\n            if(!naviforms::check_csrf_token('header'))\r\n            {\r\n                echo t(344, \"Security error\");\r\n            }\r\n            else\r\n            {\r\n                // check the theme is not actually used in any website\r\n                $usages = $DB->query_single(\r\n                    'COUNT(*)',\r\n                    'nv_websites',\r\n                    ' theme = :theme',\r\n                    null,\r\n                    array(\r\n                        ':theme' => $_REQUEST['theme']\r\n                    )\r\n                );\r\n                if($usages == 0)\r\n                {\r\n                    try\r\n                    {\r\n                        $theme = new theme();\r\n                        $theme->load($_REQUEST['theme']);\r\n                        $status = $theme->delete();\r\n                        echo json_encode($status);\r\n                    }\r\n                    catch(Exception $e)\r\n                    {\r\n                        echo $e->getMessage();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    $status = t(537, \"Can't remove the theme because it is currently being used by another website.\");\r\n                    echo $status;\r\n                }\r\n            }\r\n            core_terminate();\r\n            break;\r\n\r\n        /*\r\n        case 'export':\r\n            $out = themes_export_form();\r\n            break;\r\n        */\r\n\r\n        case 'theme_sample_content_import':\r\n            if($_REQUEST['rtk'] != $_SESSION['request_token'])\r\n            {\r\n                $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                break;\r\n            }\r\n            else\r\n            {\r\n                try\r\n                {\r\n                    $theme->import_sample();\r\n                    $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                }\r\n                catch(Exception $e)\r\n                {\r\n                    $layout->navigate_notification($e->getMessage(), true, true);\r\n                }\r\n            }\r\n\r\n            $themes = theme::list_available();\r\n            $out = themes_grid($themes);\r\n            break;\r\n\r\n        case 'theme_sample_content_export':\r\n            if(empty($_POST))\r\n            {\r\n                $out = themes_sample_content_export_form();\r\n            }\r\n            else\r\n            {\r\n                $categories = explode(',', $_POST['categories']);\r\n                $folder = $_POST['folder'];\r\n                $items = explode(',', $_POST['elements']);\r\n                $block_groups = explode(',', $_POST['block_groups']);\r\n                $blocks = explode(',', $_POST['blocks']);\r\n                $comments = explode(',', $_POST['comments']);\r\n\r\n                theme::export_sample($categories, $items, $block_groups, $blocks, $comments, $folder);\r\n\r\n                core_terminate();\r\n            }\r\n            break;\r\n\r\n        case 'install_from_hash':\r\n            $url = base64_decode($_GET['hash']);\r\n\r\n            if(!empty($url) && $user->permission(\"themes.install\")==\"true\")\r\n            {\r\n                $error = false;\r\n                $tmp_file = NULL;\r\n\r\n                parse_str(parse_url($url, PHP_URL_QUERY), $query);\r\n\r\n                if(parse_url($url, PHP_URL_HOST) == 'www.navigatecms.com')\r\n                {\r\n                    $tmp_file = sys_get_temp_dir().DIRECTORY_SEPARATOR.$query['code'].'.zip';\r\n                    @core_file_curl($url, $tmp_file);\r\n                }\r\n\r\n                if(!empty($tmp_file) && @filesize($tmp_file) > 0)\r\n                {\r\n                    $secure = theme::check_upload(\r\n                        array(\r\n                            'type' => mime_content_type($tmp_file),\r\n                            'name' => $query['code'].'.zip',\r\n                            'tmp_name' => $tmp_file\r\n                        ),\r\n                        $query['code']\r\n                    );\r\n\r\n                    if($secure !== true)\r\n                    {\r\n                        $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                        $error = true;\r\n                    }\r\n                    else // everything seems fine, go ahead\r\n                    {\r\n                        // uncompress ZIP and copy it to the themes dir\r\n                        @mkdir(NAVIGATE_PATH.'/themes/'.$query['code']);\r\n\r\n                        $zip = new ZipArchive();\r\n                        $zip_open_status = $zip->open($tmp_file);\r\n                        if($zip_open_status === TRUE)\r\n                        {\r\n                            $zip->extractTo(NAVIGATE_PATH.'/themes/'.$query['code']);\r\n                            $zip->close();\r\n\r\n                            $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                        }\r\n                        else // zip extraction failed\r\n                        {\r\n                            $layout->navigate_notification('ERROR '.$zip_open_status, true, true);\r\n                            $error = true;\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    $layout->navigate_notification(t(56, 'Unexpected error'), true, true);\r\n                    $error = true;\r\n                }\r\n\r\n                if($error)\r\n                {\r\n                    $layout->add_content('\r\n                        <div id=\"navigate_marketplace_install_from_hash_error\">\r\n                            <p>'.t(529, \"It has not been possible to download the item you have just bought from the marketplace.\").'</p>\r\n                            <p>'.t(530, \"You have to visit your Marketplace Dashboard and download the file, then use the <strong>Install from file</strong> button you'll find in the actions bar on the right.\").'</p>\r\n                            <p>'.t(531, \"Sorry for the inconvenience.\").'</p>\r\n                            <a class=\"uibutton\" href=\"http://www.navigatecms.com/en/marketplace/dashboard\" target=\"_blank\"><span class=\"ui-icon ui-icon-extlink\" style=\"float: left;\"></span> '.t(532, \"Navigate CMS Marketplace\").'</a>\r\n                        </div>\r\n                    ');\r\n                    $layout->add_script('\r\n                        $(\"#navigate_marketplace_install_from_hash_error\").dialog({\r\n                            modal: true,\r\n                            title: \"'.t(56, \"Unexpected error\").'\",\r\n                            close: function()\r\n                            {\r\n                                window.location.replace(\"?fid=themes\");\r\n                            }\r\n                        });\r\n                    ');\r\n                }\r\n                else\r\n                {\r\n                    // redirect to themes grid\r\n                    core_terminate('?fid=themes');\r\n                }\r\n            }\r\n            break;\r\n\r\n        case 'theme_upload':\r\n            if(!naviforms::check_csrf_token())\r\n            {\r\n                $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n            }\r\n            else if(isset($_FILES['theme-upload']) && $_FILES['theme-upload']['error']==0 &&  $user->permission(\"themes.install\")==\"true\")\r\n            {\r\n                // uncompress ZIP and copy it to the themes dir\r\n                $tmp = trim(substr($_FILES['theme-upload']['name'], 0, strpos($_FILES['theme-upload']['name'], '.')));\r\n                $theme_name = filter_var($tmp, FILTER_SANITIZE_EMAIL);\r\n\r\n                if($tmp!=$theme_name) // INVALID file name\r\n                {\r\n                    $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                }\r\n                else\r\n                {\r\n                    // security validation\r\n                    $secure = theme::check_upload($_FILES['theme-upload'], $theme_name);\r\n\r\n                    if($secure !== true)\r\n                    {\r\n                        $layout->navigate_notification(t(344, 'Security error'), true, true);\r\n                    }\r\n                    else // everything seems fine, go ahead\r\n                    {\r\n                        @mkdir(NAVIGATE_PATH.'/themes/'.$theme_name);\r\n\r\n                        $zip = new ZipArchive;\r\n                        if($zip->open($_FILES['theme-upload']['tmp_name']) === TRUE)\r\n                        {\r\n                            $zip->extractTo(NAVIGATE_PATH.'/themes/'.$theme_name);\r\n                            $zip->close();\r\n\r\n                            $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                        }\r\n                        else // zip extraction failed\r\n                        {\r\n                            $layout->navigate_notification(t(262, 'Error uploading file'), true, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // don't break, we want to show the themes grid right now\r\n\r\n        case 'themes':\r\n        default:\r\n            if(@$_REQUEST['opt']=='install')\r\n            {\r\n                $ntheme = new theme();\r\n                $ntheme->load($_REQUEST['theme']);\r\n\r\n                $website->theme = $ntheme->name;\r\n\r\n                if(!empty($ntheme->styles))\r\n                {\r\n                    $nst = get_object_vars($ntheme->styles);\r\n                    $nst = array_keys($nst);\r\n\r\n                    if(!isset($website->theme_options) || empty($website->theme_options))\r\n                        $website->theme_options = json_decode('{\"style\": \"\"}');\r\n                    $website->theme_options->style = array_shift($nst);\r\n                }\r\n                else\r\n                {\r\n                    if(!isset($website->theme_options) || empty($website->theme_options))\r\n                        $website->theme_options = json_decode('{\"style\": \"\"}');\r\n                    else\r\n                        $website->theme_options->style = \"\";\r\n                }\r\n\r\n                try\r\n                {\r\n                    $website->update();\r\n                    $layout->navigate_notification(t(374, \"Item installed successfully.\"), false);\r\n                }\r\n                catch(Exception $e)\r\n                {\r\n                    $layout->navigate_notification($e->getMessage(), true, true);\r\n                }\r\n            }\r\n\r\n            $themes = theme::list_available();\r\n\r\n            $out = themes_grid($themes);\r\n            break;\r\n\r\n    }\r\n\t\r\n\treturn $out;\r\n}\r\n\r\nfunction themes_grid($list)\r\n{\r\n\tglobal $layout;\r\n\tglobal $website;\r\n    global $user;\r\n    global $current_version;\r\n\t\r\n\t$navibars = new navibars();\t\r\n\t$navibars->title(t(367, 'Themes'));\r\n\r\n    $marketplace = isset($_REQUEST['marketplace']);\r\n\r\n    if($user->permission(\"themes.install\")==\"true\")\r\n    {\r\n        $navibars->add_actions(\r\n            array(\r\n                '<a href=\"#\" id=\"theme-upload-button\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/package_add.png\"> '.t(461, 'Install from file').'</a>'\r\n            )\r\n        );\r\n    }\r\n\r\n    $navibars->add_actions(\r\n        array(\r\n            '<a href=\"?fid=themes&act=theme_sample_content_export\" id=\"theme-sample-content-export-button\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/server_compressed.png\"> '.t(480, 'Export sample content').'</a>'\r\n        )\r\n    );\r\n\r\n\t$grid = new navigrid('themes');\r\n\r\n\t$grid->set_header('\r\n        <div class=\"navibrowse-path ui-corner-all\">\r\n            <input type=\"checkbox\" id=\"theme-available-button\" /><label for=\"theme-available-button\"><img src=\"img/icons/silk/rainbow.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(528, 'Available').'</label>\r\n            '.($user->permission(\"themes.marketplace\")==\"true\"? '<input type=\"checkbox\" id=\"theme-marketplace-button\" /><label for=\"theme-marketplace-button\"><img src=\"img/icons/silk/basket.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(527, 'Marketplace').'</label>' : '').'\r\n        </div>\r\n\t');\r\n\r\n    $layout->add_script('\r\n        $(\"#theme-available-button\").button().on(\"click\", function()\r\n        {\r\n            window.location.replace(\"?fid=themes\");\r\n        });\r\n        $(\"#theme-marketplace-button\").button();\r\n        $(\"#theme-marketplace-button\").button().on(\"click\", function()\r\n        {\r\n            window.location.replace(\"?fid=themes&marketplace\");\r\n        });\r\n\r\n        $(\".navibrowse-path input\").removeAttr(\"checked\");\r\n        $(\"#theme-'.($marketplace? 'marketplace' : 'available').'-button\").attr(\"checked\", \"checked\");\r\n        $(\"#theme-marketplace-button,#theme-available-button\").button(\"refresh\");\r\n    ');\r\n\r\n    if(!$marketplace)\r\n    {\r\n        $grid->item_size(220, 220);\r\n        //$grid->thumbnail_size(138, 150); NV 1.x thumbnail size\r\n        $grid->thumbnail_size(205, 145);\r\n        $grid->highlight_on_click = false;\r\n\r\n        $themes = array();\r\n\r\n        // current website theme\r\n        if(!empty($website->theme))\r\n        {\r\n            $theme = new theme();\r\n            $theme->load($website->theme, true);\r\n            $update_ver = $_SESSION['themes_updates'][$theme->name];\r\n\r\n            if(version_compare($update_ver, $theme->version, '<='))\r\n                $update_ver = '';\r\n            else\r\n                $update_ver = $theme->version.' &raquo; '.$update_ver;\r\n\r\n            $themes[] = array(\r\n                'id'\t=>  $website->theme,\r\n                'name'\t=>\t'<div class=\"navigrid-themes-title navigrid-themes-installed\">'.$theme->title.'</div>',\r\n                'thumbnail' => NAVIGATE_URL.'/themes/'.$website->theme.'/thumbnail.png',\r\n                'header' => '\r\n                '.(file_exists(NAVIGATE_PATH.'/themes/'.$website->theme.'/'.$website->theme.'.info.html')? '<a href=\"#\" class=\"navigrid-themes-info\" theme=\"'.$website->theme.'\" theme-title=\"'.$theme->title.'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/information.png\"></a>' : '').'\r\n                '.(empty($update_ver)? '' : '\r\n                    <a href=\"#\" class=\"navigrid-themes-update\" theme=\"'.$website->theme.'\" title=\"'.t(285, \"Update\").' '.$update_ver.'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/asterisk_orange.png\"></a>\r\n                '),\r\n                'footer' => '\r\n                    <a href=\"?fid=websites&act=edit&id='.$website->id.'&tab=7\" class=\"uibutton navigrid-themes-button navigrid-theme-configure\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/wrench_orange.png\"> '.t(200, 'Options').'</a>\r\n                '.(\r\n                    !file_exists(NAVIGATE_PATH.'/themes/'.$website->theme.'/'.$website->theme.'_sample.zip')?\r\n                        '' : '<a href=\"#\" class=\"uibutton navigrid-themes-button navigrid-theme-install-demo\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/wand.png\"> '.t(484, 'Install demo').'</a>'\r\n                )\r\n            );\r\n        }\r\n\r\n        for($t=0; $t < count($list); $t++)\r\n        {\r\n            if($website->theme==$list[$t]['code']) continue;\r\n\r\n            $update_ver = $_SESSION['themes_updates'][$list[$t]['code']];\r\n            if(version_compare($update_ver, $list[$t]['version'], '<='))\r\n                $update_ver = '';\r\n            else\r\n                $update_ver = $list[$t]['version'].' &raquo; '.$update_ver;\r\n\r\n            $themes[] = array(\r\n                'id'\t=>  $list[$t]['code'],\r\n                'name'\t=>\t'<div class=\"navigrid-themes-title\">'.$list[$t]['title'].'</div>',\r\n                'thumbnail' => NAVIGATE_URL.'/themes/'.$list[$t]['code'].'/thumbnail.png',\r\n                'header' => '\r\n                    '.($user->permission(\"themes.delete\")==\"true\"? '<a href=\"#\" class=\"navigrid-themes-remove\" theme=\"'.$list[$t]['code'].'\" theme-title=\"'.$list[$t]['title'].'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/cancel.png\"></a>' : '').'\r\n                    '.(file_exists(NAVIGATE_PATH.'/themes/'.$list[$t]['code'].'/'.$list[$t]['code'].'.info.html')? '<a href=\"#\" class=\"navigrid-themes-info\" theme=\"'.$list[$t]['code'].'\" theme-title=\"'.$list[$t]['title'].'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/information.png\"></a>' : '').'\r\n                    '.(empty($update_ver)? '' : '\r\n                    '.($user->permission(\"themes.update\")==\"true\"? '<a href=\"#\" class=\"navigrid-themes-update\" theme=\"'.$list[$t]['code'].'\" title=\"'.t(285, \"Update\").' '.$update_ver.'\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/asterisk_orange.png\"></a>' : '').'\r\n                '),\r\n                'footer' => '\r\n                    '.(file_exists(NAVIGATE_PATH.'/themes/'.$list[$t]['code'].'/demo.html')? '<a href=\"'.NAVIGATE_URL.'/themes/'.$list[$t]['code'].'/demo.html'.'\" class=\"uibutton navigrid-themes-button\" target=\"_blank\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/monitor.png\"> '.t(274, 'Preview').'</a>' : '').'\r\n                    <a href=\"#\" class=\"uibutton navigrid-themes-button navigrid-themes-install\" theme=\"'.$list[$t]['code'].'\" target=\"_blank\" style=\" margin-left: 5px; \"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/world_go.png\"> '.t(365, 'Install').'</a>\r\n                '\r\n            );\r\n        }\r\n\r\n        $grid->items($themes);\r\n\r\n        $navibars->add_content($grid->generate());\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-themes-install-confirmation\" title=\"'.t(59, 'Confirmation').'\" style=\" display: none; \">\r\n                '.t(371, 'Installing a new theme removes the settings of the old one.').'<br />\r\n                '.t(372, 'The list of available block types may also change.').'<br /><br />\r\n                '.t(373, 'Are you sure you want to continue?').'\r\n            </div>\r\n\r\n            <div id=\"navigrid-themes-information\" title=\"\" style=\" display: none; \"></div>\r\n        ');\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-themes-install-demo-confirmation\" title=\"'.t(59, 'Confirmation').'\" style=\" display: none; \">\r\n                '.t(483, 'Do you really want to import the default website for the theme selected?').'\r\n            </div>'\r\n        );\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-themes-remove-confirmation\" title=\"'.t(59, 'Confirmation').'\" style=\" display: none; \">\r\n                '.t(57, 'Do you really want to delete the item?').'\r\n            </div>'\r\n        );\r\n\r\n        $navibars->add_content('\r\n            <div id=\"navigrid-themes-update\" title=\"'.t(285, 'Update').'\" style=\" display: none; \">\r\n                <iframe src=\"about:blank\"\r\n                    class=\"ui-corner-all\"\r\n                    border=\"0\" frameborder=\"0\" allowtransparency=\"true\">\r\n                </iframe>\r\n            </div>'\r\n        );\r\n    }\r\n    else\r\n    {\r\n        $html = '\r\n            <div class=\"navibrowse-path ui-corner-all\">\r\n                <input type=\"checkbox\" id=\"theme-available-button\" /><label for=\"theme-available-button\"><img src=\"img/icons/silk/rainbow.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(528, 'Available').'</label>\r\n                <input type=\"checkbox\" id=\"theme-marketplace-button\" /><label for=\"theme-marketplace-button\"><img src=\"img/icons/silk/basket.png\" width=\"16px\" height=\"16px\" align=\"absbottom\" /> '.t(527, 'Marketplace').'</label>\r\n            </div>\r\n        ';\r\n        $html .= '\r\n            <iframe src=\"http://www.navigatecms.com/en/marketplace/themes\"\r\n                    style=\"visibility: hidden; width: 1px; height: 1px;\"\r\n                    class=\"ui-corner-all\"\r\n                    border=\"0\" frameborder=\"0\" allowtransparency=\"true\">\r\n            </iframe>\r\n        ';\r\n\r\n        $navibars->add_content('<div id=\"navigate-content-safe\" class=\"ui-corner-all\">'.$html.'</div>');\r\n\r\n        $layout->add_script('\r\n            $(window).on(\"resize focus blur\", function()\r\n            {\r\n                $(\"#navigate-content-safe iframe\").css({\"width\": 1, \"height\": 1});\r\n\r\n                $(\"#navigate-content-safe iframe\").css({\r\n                    padding: \"0px 4px\",\r\n                    width: $(\".navibrowse-path\").width() + parseInt($(\".navibrowse-path\").css(\"padding-right\")) * 2,\r\n                    height: $(\"#navigate-content-safe\").height() - $(\"#navigate-content-safe div:first\").height() - 24,\r\n                    visibility: \"visible\"\r\n                });\r\n            });\r\n\r\n            $(\"#navigate-content-safe iframe\").on(\"focus blur load\", function(){ $(window).trigger(\"resize\");});\r\n        ');\r\n    }\r\n\r\n    $layout->add_script('\r\n        function navigatecms_marketplace_install_from_hash(hash)\r\n        {\r\n            window.location.replace(\"?fid=themes&act=install_from_hash&hash=\"+hash);\r\n        }\r\n\r\n        if(typeof(window.postMessage) != \"undefined\")\r\n        {\r\n           if(typeof(window.addEventListener) != \"undefined\")\r\n            {\r\n                window.addEventListener(\"message\", function(event) {\r\n                    navigatecms_marketplace_install_from_hash(event.data);\r\n                }, false);\r\n            }\r\n            else\r\n            {\r\n                window.attachEvent(\"onmessage\", function(e) {\r\n                    navigatecms_marketplace_install_from_hash(e.data);\r\n                });\r\n            }\r\n        }\r\n    ');\r\n\r\n    $out = $navibars->generate();\r\n\r\n    $layout->add_script('\r\n\t    $.ajax({\r\n\t        type: \"GET\",\r\n\t        dataType: \"script\",\r\n\t        cache: true,\r\n\t        url: \"lib/packages/themes/themes.js?r='.$current_version->revision.'\",\r\n\t        complete: function()\r\n\t        {\r\n                navigate_themes_init();\r\n\t        }\r\n\t    });\r\n\t');\r\n\r\n\treturn $out;\r\n}\r\n\r\nfunction themes_sample_content_export_form()\r\n{\r\n    // templates, blocks, files, properties\r\n    global $user;\r\n    global $DB;\r\n    global $website;\r\n    global $layout;\r\n    global $theme;\r\n\r\n    $navibars = new navibars();\r\n    $naviforms = new naviforms();\r\n\r\n    $navibars->title(t(367, 'Themes').' / '.t(480, 'Export sample content'));\r\n\r\n    $layout->navigate_media_browser();\t// we can use media browser in this function\r\n\r\n    $navibars->add_actions(\t\tarray(\t'<a href=\"#\" onclick=\"javascript: navigate_media_browser();\" title=\"Ctrl+M\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/images.png\"> '.t(36, 'Media').'</a>'\t));\r\n\r\n    $navibars->add_actions(\r\n        array(\t'<a href=\"#\" onclick=\"navigate_tabform_submit(0);\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/accept.png\"> '.t(34, 'Save').'</a>'\t)\r\n    );\r\n\r\n    $navibars->form();\r\n\r\n    /*\r\n    $navibars->add_tab(t(43, \"Main\"));\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(67, 'Title').'</label>',\r\n        $naviforms->textfield('theme-title', $website->name)\r\n    ));\r\n    */\r\n\r\n    $navibars->add_tab(t(16, \"Structure\"));\r\n    // select structure points to export\r\n    $hierarchy = structure::hierarchy(0);\r\n    $categories_list = structure::hierarchyList($hierarchy);\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(330, 'Categories').'<br /></label>',\r\n        '<div class=\"category_tree\" id=\"category-tree-parent\">\r\n            <img src=\"img/icons/silk/world.png\" align=\"absmiddle\" /> '.$website->name.\r\n            '<div class=\"tree_ul\">'.$categories_list.'</div>'.\r\n        '</div>',\r\n        '<label>&nbsp;</label>',\r\n        '<button id=\"theme_export_sample_content_select_all_categories\">'.t(481, 'Select all').'</button>'\r\n    ));\r\n\r\n    $navibars->add_tab_content($naviforms->hidden('categories', ''));\r\n\r\n    $layout->add_script('        \r\n        $(\"#category-tree-parent .tree_ul\").jstree({\r\n            plugins: [\"changed\", \"types\", \"checkbox\"],\r\n            \"types\" :\r\n            {\r\n                \"default\":  {   \"icon\": \"img/icons/silk/folder.png\"    },\r\n                \"leaf\":     {   \"icon\": \"img/icons/silk/page_white.png\"      }\r\n            },\r\n            \"checkbox\":\r\n            {\r\n                three_state: false,\r\n                cascade: \"undetermined\"\r\n            },\r\n            \"core\":\r\n            {\r\n                dblclick_toggle: false\r\n            }\r\n        })\r\n        .on(\"dblclick.jstree\", function(e)\r\n        {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        \r\n            var li = $(e.target).closest(\"li\");\r\n            $(\"#category-tree-parent .tree_ul\").jstree(\"open_node\", \"#\" + li[0].id);\r\n        \r\n            var children_nodes = new Array();\r\n            children_nodes.push(li);\r\n            $(li).find(\"li\").each(function() {\r\n                children_nodes.push(\"#\" + $(this)[0].id);\r\n            });\r\n        \r\n            $(\"#category-tree-parent .tree_ul\").jstree(\"select_node\", children_nodes);\r\n        \r\n            return false;\r\n        })\r\n        .on(\"changed.jstree\", function(e, data)\r\n        {        \r\n            var i, j, r = [];\r\n            var categories = new Array();\r\n            $(\"#categories\").val(\"\");       \r\n        \r\n            for(i = 0, j = data.selected.length; i < j; i++)\r\n            {\r\n                var id = data.instance.get_node(data.selected[i]).data.nodeId;\r\n                categories.push(id);\r\n            }\r\n            \r\n            if(categories.length > 0)\r\n                $(\"#categories\").val(categories);                                                                \r\n        });\r\n\r\n        $(\"#theme_export_sample_content_select_all_categories\").on(\"click\", function(e)\r\n        {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            $(\"#category-tree-parent .tree_ul\").jstree(\"select_all\");\r\n            return false;\r\n        });\r\n\t');\r\n\r\n    $navibars->add_tab(t(22, \"Elements\"));\r\n    // select elements to export\r\n    $navitable_items = new navitable(\"items_list\");\r\n    $navitable_items->setURL('?fid=items&act=1');\r\n    $navitable_items->sortBy('date_modified', 'DESC');\r\n\t$navitable_items->setDataIndex('id');\r\n\t$navitable_items->max_rows = 9999999;\r\n    $navitable_items->addCol(\"ID\", 'id', \"40\", \"true\", \"left\");\r\n    $navitable_items->addCol(t(67, 'Title'), 'title', \"350\", \"true\", \"left\");\r\n    $navitable_items->addCol(t(309, 'Social'), 'comments', \"80\", \"true\", \"center\");\r\n    $navitable_items->addCol(t(78, 'Category'), 'category', \"150\", \"true\", \"center\");\r\n    $navitable_items->addCol(t(266, 'Author'), 'author_username', \"100\", \"true\", \"left\");\r\n    $navitable_items->addCol(t(85, 'Date published'), 'dates', \"100\", \"true\", \"center\");\r\n    $navitable_items->addCol(t(80, 'Permission'), 'permission', \"80\", \"true\", \"center\");\r\n    $navitable_items->after_select_callback = ' $(\"#elements\").val(navitable_items_list_selected_rows); ';\r\n    $navitable_items->setLoadCallback('\r\n        if(!themes_export_first_select_elements) \r\n        {\r\n            $(\"#cb_items_list\").trigger(\"click\");\r\n            themes_export_first_select_elements = true; \r\n        }\r\n    ');\r\n    $navibars->add_tab_content($naviforms->hidden('elements', ''));\r\n    $navibars->add_tab_content($navitable_items->generate());\r\n\r\n\r\n    $navibars->add_tab(t(544, \"Block groups\"));\r\n    // select blocks to export\r\n    $navitable_block_groups = new navitable(\"block_groups_list\");\r\n    $navitable_block_groups->setURL('?fid=blocks&act=block_groups_json');\r\n    $navitable_block_groups->sortBy('id', 'DESC');\r\n    $navitable_block_groups->setDataIndex('id');\r\n    $navitable_items->max_rows = 9999999;\r\n    $navitable_block_groups->addCol(\"ID\", 'id', \"80\", \"true\", \"left\");\r\n    $navitable_block_groups->addCol(t(237, 'Code'), 'code', \"120\", \"true\", \"left\");\r\n    $navitable_block_groups->addCol(t(67, 'Title'), 'title', \"200\", \"true\", \"left\");\r\n    $navitable_block_groups->addCol(t(23, 'Blocks'), 'blocks', \"80\", \"true\", \"left\");\r\n    $navitable_block_groups->after_select_callback = ' $(\"#block_groups\").val(navitable_block_groups_list_selected_rows); ';\r\n    $navitable_block_groups->setLoadCallback('\r\n        if(!themes_export_first_select_blockgrp) \r\n        {\r\n            $(\"#cb_block_groups_list\").trigger(\"click\");\r\n            themes_export_first_select_blockgrp = true; \r\n        }\r\n    ');\r\n    $navibars->add_tab_content($naviforms->hidden('block_groups', ''));\r\n    $navibars->add_tab_content($navitable_block_groups->generate());\r\n\r\n\r\n    $navibars->add_tab(t(23, \"Blocks\"));\r\n    // select blocks to export\r\n    $navitable_blocks = new navitable(\"blocks_list\");\r\n    $navitable_blocks->setURL('?fid=blocks&act=1');\r\n    $navitable_blocks->sortBy('id', 'DESC');\r\n    $navitable_blocks->setDataIndex('id');\r\n    $navitable_items->max_rows = 9999999;\r\n    $navitable_blocks->addCol(\"ID\", 'id', \"40\", \"true\", \"left\");\r\n    $navitable_blocks->addCol(t(160, 'Type'), 'type', \"120\", \"true\", \"center\");\r\n    $navitable_blocks->addCol(t(67, 'Title'), 'title', \"400\", \"true\", \"left\");\r\n    $navitable_blocks->addCol(t(85, 'Date published'), 'dates', \"100\", \"true\", \"center\");\r\n    $navitable_blocks->addCol(t(364, 'Access'), 'access', \"40\", \"true\", \"center\");\r\n    $navitable_blocks->addCol(t(65, 'Enabled'), 'enabled', \"40\", \"true\", \"center\");\r\n    $navitable_blocks->after_select_callback = ' $(\"#blocks\").val(navitable_blocks_list_selected_rows); ';\r\n    $navitable_blocks->setLoadCallback('\r\n        if(!themes_export_first_select_blocks) \r\n        {\r\n            $(\"#cb_blocks_list\").trigger(\"click\"); \r\n            themes_export_first_select_blocks = true; \r\n        }\r\n    ');\r\n    $navibars->add_tab_content($naviforms->hidden('blocks', ''));\r\n    $navibars->add_tab_content($navitable_blocks->generate());\r\n\r\n\r\n    $navibars->add_tab(t(250, \"Comments\"));\r\n    // select comments to export\r\n    $navitable_comments = new navitable(\"comments_list\");\r\n    $navitable_comments->setURL('?fid=comments&act=1');\r\n    $navitable_comments->sortBy('date_created', 'desc');\r\n    $navitable_comments->setDataIndex('id');\r\n    $navitable_items->max_rows = 9999999;\r\n    $navitable_comments->addCol(\"ID\", 'id', \"80\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(180, 'Item'), 'item', \"200\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(226, 'Date created'), 'date_created', \"100\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(1, 'User'), 'user', \"100\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(54, 'Text'), 'message', \"200\", \"true\", \"left\");\r\n    $navitable_comments->addCol(t(68, 'Status'), 'status', \"80\", \"true\", \"center\");\r\n    $navitable_comments->after_select_callback = ' $(\"#comments\").val(navitable_comments_list_selected_rows); ';\r\n    $navitable_comments->setLoadCallback('\r\n        if(!themes_export_first_select_comments) \r\n        {\r\n            $(\"#cb_comments_list\").trigger(\"click\"); \r\n            themes_export_first_select_comments = true; \r\n        }\r\n    ');\r\n    $navibars->add_tab_content($naviforms->hidden('comments', ''));\r\n    $navibars->add_tab_content($navitable_comments->generate());\r\n    \r\n    $navibars->add_tab(t(89, \"Files\"));\r\n    $navibars->add_tab_content_row(\r\n        array(\r\n            '<label>'.t(141, 'Folder').'</label>',\r\n            $naviforms->dropbox('folder', 0, 'folder')\r\n        )\r\n    );\r\n\r\n    $navibars->add_tab_content_row(\r\n        '<div class=\"subcomment\"><span class=\"ui-icon ui-icon-info\" style=\"float: left;\"></span> '.\r\n            t(482, 'All sample files should be placed in a folder. Navigate CMS will also add files used in contents.').\r\n        '</div>'\r\n    );\r\n\r\n    // auto-select everything on load\r\n    $layout->add_script('\r\n        themes_export_first_select_elements = false;\r\n        themes_export_first_select_blockgrp = false;\r\n        themes_export_first_select_blocks   = false;\r\n        themes_export_first_select_comments = false;\r\n\r\n        $(\"#theme_export_sample_content_select_all_categories\").trigger(\"click\");               \r\n    ');\r\n\r\n    return $navibars->generate();\r\n}\r\n\r\n/* TODO: generate a theme from custom templates and blocks... maybe in NVCMS3.0?\r\nfunction themes_export_form()\r\n{\r\n    // templates, blocks, files, properties\r\n    global $user;\r\n    global $DB;\r\n    global $website;\r\n    global $layout;\r\n    global $theme;\r\n\r\n    $navibars = new navibars();\r\n    $naviforms = new naviforms();\r\n\r\n    $navibars->title(t(367, 'Themes').' / '.t(475, 'Export'));\r\n\r\n    $navibars->add_actions(\r\n        array(\t'<a href=\"#\" onclick=\"navigate_tabform_submit(1);\"><img height=\"16\" align=\"absmiddle\" width=\"16\" src=\"img/icons/silk/accept.png\"> '.t(34, 'Save').'</a>'\t)\r\n    );\r\n\r\n    $navibars->form();\r\n\r\n    $navibars->add_tab(t(43, \"Main\"));\r\n\r\n    $navibars->add_tab_content(\r\n        '<div class=\"subcomment\"><span class=\"ui-icon ui-icon-info\" style=\"float: left;\"></span></div>'\r\n    );\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(67, 'Title').'</label>',\r\n        $naviforms->textfield('theme-title', $website->name)\r\n    ));\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(237, 'Code').'</label>',\r\n        $naviforms->textfield('theme-name', $website->name)\r\n    ));\r\n\r\n    $layout->add_script('\r\n        $(\"#theme-name\").on(\"keyup\", function()\r\n        {\r\n            var title = $(this).val();\r\n\t\t\ttitle = title.replace(/([\\'\"?:\\+\\&!\u00bf#\\\\\\\\])/g, \"\");\r\n\t\t\ttitle = title.replace(/[.\\s]+/g, \"_\");\r\n            $(this).val(title.toLowerCase());\r\n        });\r\n        $(\"#theme-name\").trigger(\"keyup\");\r\n    ');\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(220, 'Version').'</label>',\r\n        $naviforms->textfield('theme-version', '1.0')\r\n    ));\r\n\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(266, 'Author').'</label>',\r\n        $naviforms->textfield('theme-author', $user->username)\r\n    ));\r\n\r\n    $navibars->add_tab_content_row(array(\r\n        '<label>'.t(177, 'Website').'</label>',\r\n        $naviforms->textfield('theme-website', $website->absolute_path())\r\n    ));\r\n\r\n    // languages (+auto create dictionary)\r\n    // styles\r\n\r\n    $navibars->add_tab(t(200, \"Properties\"));\r\n    // similar to template properties\r\n\r\n    $navibars->add_tab(t(20, \"Templates\"));\r\n    // select templates to export\r\n\r\n    $navibars->add_tab(t(23, \"Blocks\"));\r\n    // select block types to export\r\n\r\n    $navibars->add_tab(t(89, \"Files\"));\r\n    // upload JS files\r\n    // upload CSS files\r\n    // upload IMG files\r\n    // select files from database to be included\r\n\r\n    // + demo structure, content & blocks?\r\n\r\n    return $navibars->generate();\r\n}\r\n*/\r\n\r\n?>"], "filenames": ["lib/packages/extensions/extension.class.php", "lib/packages/extensions/extensions.js", "lib/packages/extensions/extensions.php", "lib/packages/themes/theme.class.php", "lib/packages/themes/themes.js", "lib/packages/themes/themes.php"], "buggy_code_start_loc": [554, 1, 160, 555, 113, 116], "buggy_code_end_loc": [571, 229, 441, 572, 118, 178], "fixing_code_start_loc": [554, 1, 161, 555, 113, 117], "fixing_code_end_loc": [574, 275, 418, 575, 122, 198], "type": "CWE-434", "message": "The install_from_hash functionality in Navigate CMS 2.9 does not consider the .phtml extension when examining files within a ZIP archive that may contain PHP code, in check_upload in lib/packages/extensions/extension.class.php and lib/packages/themes/theme.class.php.", "other": {"cve": {"id": "CVE-2020-14067", "sourceIdentifier": "cve@mitre.org", "published": "2020-06-15T01:15:10.273", "lastModified": "2020-06-17T19:18:43.097", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The install_from_hash functionality in Navigate CMS 2.9 does not consider the .phtml extension when examining files within a ZIP archive that may contain PHP code, in check_upload in lib/packages/extensions/extension.class.php and lib/packages/themes/theme.class.php."}, {"lang": "es", "value": "La funcionalidad install_from_hash en Navigate CMS versi\u00f3n 2.9, no considera la extensi\u00f3n .phtml cuando examina archivos dentro de un archivo ZIP que puede contener c\u00f3digo PHP, en la funci\u00f3n check_upload en la bibliotecas lib/packages/extensions/extension.class.php y lib/packages/themes/theme.class.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:naviwebs:navigatecms:2.9:*:*:*:*:*:*:*", "matchCriteriaId": "54FE5CDA-77C7-441D-A61C-FF8171A1DF30"}]}]}], "references": [{"url": "https://github.com/NavigateCMS/Navigate-CMS/commit/f1f47126b359d73a2635306ae46d8719c14d240b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/NavigateCMS/Navigate-CMS/commit/f1f47126b359d73a2635306ae46d8719c14d240b"}}