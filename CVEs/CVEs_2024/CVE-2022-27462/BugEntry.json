{"buggy_code": ["<?php\n$AVideoMobileAPP_UA = \"AVideoMobileApp\";\n$AVideoEncoder_UA = \"AVideoEncoder\";\n$AVideoStreamer_UA = \"AVideoStreamer\";\n$AVideoStorage_UA = \"AVideoStorage\";\n$mysql_connect_was_closed = 1;\n\nfunction forbiddenWords($text) {\n    global $global;\n    if (empty($global['forbiddenWords'])) {\n        return false;\n    }\n    foreach ($global['forbiddenWords'] as $value) {\n        if (preg_match(\"/{$value}/i\", $text)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nif (!function_exists('xss_esc')) {\n\n    function xss_esc($text) {\n        if (empty($text)) {\n            return \"\";\n        }\n        $result = @htmlspecialchars($text, ENT_QUOTES, 'UTF-8');\n        if (empty($result)) {\n            $result = str_replace(['\"', \"'\", \"\\\\\"], [\"\", \"\", \"\"], strip_tags($text));\n        }\n        $result = str_replace(['&amp;amp;'], ['&amp;'], $result);\n        return $result;\n    }\n\n}\n\nfunction xss_esc_back($text) {\n    $text = htmlspecialchars_decode($text, ENT_QUOTES);\n    $text = str_replace(['&amp;', '&#039;', \"#039;\"], [\" \", \"`\", \"`\"], $text);\n    return $text;\n}\n\n// Make sure SecureVideosDirectory will be the first\nfunction cmpPlugin($a, $b) {\n    if (\n            $a['name'] === 'SecureVideosDirectory' ||\n            $a['name'] === 'GoogleAds_IMA' ||\n            $a['name'] === 'Subscription' ||\n            $a['name'] === 'PayPerView' ||\n            $a['name'] === 'FansSubscriptions'\n    ) {\n        return -1;\n    } elseif ($a['name'] === 'PlayerSkins') {\n        return 1;\n    } elseif (\n            $b['name'] === 'SecureVideosDirectory' ||\n            $b['name'] === 'GoogleAds_IMA' ||\n            $b['name'] === 'Subscription' ||\n            $b['name'] === 'PayPerView' ||\n            $b['name'] === 'FansSubscriptions'\n    ) {\n        return 1;\n    } elseif ($b['name'] === 'PlayerSkins') {\n        return -1;\n    }\n    return 0;\n}\n\n// Returns a file size limit in bytes based on the PHP upload_max_filesize\n// and post_max_size\nfunction file_upload_max_size() {\n    static $max_size = -1;\n\n    if ($max_size < 0) {\n        // Start with post_max_size.\n        $max_size = parse_size(ini_get('post_max_size'));\n\n        // If upload_max_size is less, then reduce. Except if upload_max_size is\n        // zero, which indicates no limit.\n        $upload_max = parse_size(ini_get('upload_max_filesize'));\n        if ($upload_max > 0 && $upload_max < $max_size) {\n            $max_size = $upload_max;\n        }\n    }\n    return $max_size;\n}\n\nfunction parse_size($size) {\n    $unit = preg_replace('/[^bkmgtpezy]/i', '', $size); // Remove the non-unit characters from the size.\n    $size = preg_replace('/[^0-9\\.]/', '', $size); // Remove the non-numeric characters from the size.\n    if ($unit) {\n        // Find the position of the unit in the ordered string which is the power of magnitude to multiply a kilobyte by.\n        return round($size * pow(1024, stripos('bkmgtpezy', $unit[0])));\n    } else {\n        return round($size);\n    }\n}\n\nfunction humanFileSize($size, $unit = \"\") {\n    if ((!$unit && $size >= 1 << 30) || $unit == \"GB\") {\n        return number_format($size / (1 << 30), 2) . \"GB\";\n    }\n\n    if ((!$unit && $size >= 1 << 20) || $unit == \"MB\") {\n        return number_format($size / (1 << 20), 2) . \"MB\";\n    }\n\n    if ((!$unit && $size >= 1 << 10) || $unit == \"KB\") {\n        return number_format($size / (1 << 10), 2) . \"KB\";\n    }\n\n    return number_format($size) . \" bytes\";\n}\n\nfunction get_max_file_size() {\n    return humanFileSize(file_upload_max_size());\n}\n\nfunction humanTiming($time, $precision = 0, $useDatabaseTime = true) {\n    $time = secondsIntervalFromNow($time, $useDatabaseTime);\n    return secondsToHumanTiming($time, $precision);\n}\n\n/**\n *\n * @param type $time\n * @param type $precision\n * @param type $useDatabaseTime good if you are checking the created time\n * @return type\n */\nfunction humanTimingAgo($time, $precision = 0, $useDatabaseTime = true) {\n    $time = secondsIntervalFromNow($time, $useDatabaseTime);\n    if (empty($time)) {\n        return __(\"Now\");\n    }\n    return secondsToHumanTiming($time, $precision) . \" \" . __(\"ago\");\n}\n\nfunction humanTimingAfterwards($time, $precision = 0, $useDatabaseTime = true) {\n    if (!is_numeric($time)) {\n        $time = strtotime($time);\n    }\n    $time = secondsIntervalFromNow($time, $useDatabaseTime);\n    if (empty($time)) {\n        return __(\"Now\");\n    } elseif ($time > 0) {\n        return secondsToHumanTiming($time, $precision) . ' ' . __('Ago');\n    }\n    return __('Coming in') . ' ' . secondsToHumanTiming($time, $precision);\n}\n\nfunction secondsToHumanTiming($time, $precision = 0) {\n    if (empty($time)) {\n        return __(\"Now\");\n    }\n    $time = ($time < 0) ? $time * -1 : $time;\n    $time = ($time < 1) ? 1 : $time;\n    $tokens = [\n        31536000 => 'year',\n        2592000 => 'month',\n        604800 => 'week',\n        86400 => 'day',\n        3600 => 'hour',\n        60 => 'minute',\n        1 => 'second',\n    ];\n\n    /**\n     * For detection propouse only\n     */\n    __('year');\n    __('month');\n    __('week');\n    __('day');\n    __('hour');\n    __('minute');\n    __('second');\n    __('years');\n    __('months');\n    __('weeks');\n    __('days');\n    __('hours');\n    __('minutes');\n    __('seconds');\n\n    foreach ($tokens as $unit => $text) {\n        if ($time < $unit) {\n            continue;\n        }\n\n        $numberOfUnits = floor($time / $unit);\n        if ($numberOfUnits > 1) {\n            $text = __($text . \"s\");\n        } else {\n            $text = __($text);\n        }\n\n        if ($precision) {\n            $rest = $time % $unit;\n            if ($rest) {\n                $text .= ' ' . secondsToHumanTiming($rest, $precision - 1);\n            }\n        }\n\n        return $numberOfUnits . ' ' . $text;\n    }\n}\n\nfunction checkVideosDir() {\n    $dir = \"../videos\";\n    if (file_exists($dir)) {\n        return is_writable($dir);\n    }\n    return mkdir($dir);\n}\n\nfunction isApache() {\n    return (strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') !== false);\n}\n\nfunction isPHP($version = \"'7.3.0'\") {\n    return (version_compare(PHP_VERSION, $version) >= 0);\n}\n\nfunction modEnabled($mod_name) {\n    if (!function_exists('apache_get_modules')) {\n        ob_start();\n        phpinfo(INFO_MODULES);\n        $contents = ob_get_contents();\n        ob_end_clean();\n        return (strpos($contents, 'mod_' . $mod_name) !== false);\n    }\n    return in_array('mod_' . $mod_name, apache_get_modules());\n}\n\nfunction modRewriteEnabled() {\n    return modEnabled(\"rewrite\");\n}\n\nfunction modAliasEnabled() {\n    return modEnabled(\"alias\");\n}\n\nfunction isFFMPEG() {\n    return trim(shell_exec('which ffmpeg'));\n}\n\nfunction isUnzip() {\n    return trim(shell_exec('which unzip'));\n}\n\nfunction isExifToo() {\n    return trim(shell_exec('which exiftool'));\n}\n\nfunction isAPPInstalled($appName) {\n    $appName = preg_replace('/[^a-z0-9_-]/i', '', $appName);\n    return trim(shell_exec(\"which {$appName}\"));\n}\n\nfunction getPathToApplication() {\n    return str_replace(\"install/index.php\", \"\", $_SERVER[\"SCRIPT_FILENAME\"]);\n}\n\nfunction getURLToApplication() {\n    $url = (isset($_SERVER['HTTPS']) ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n    $url = explode(\"install/index.php\", $url);\n    return $url[0];\n}\n\n//max_execution_time = 7200\nfunction check_max_execution_time() {\n    $max_size = ini_get('max_execution_time');\n    $recomended_size = 7200;\n    return ($recomended_size <= $max_size);\n}\n\n//post_max_size = 100M\nfunction check_post_max_size() {\n    $max_size = parse_size(ini_get('post_max_size'));\n    $recomended_size = parse_size('100M');\n    return ($recomended_size <= $max_size);\n}\n\n//upload_max_filesize = 100M\nfunction check_upload_max_filesize() {\n    $max_size = parse_size(ini_get('upload_max_filesize'));\n    $recomended_size = parse_size('100M');\n    return ($recomended_size <= $max_size);\n}\n\n//memory_limit = 100M\nfunction check_memory_limit() {\n    $max_size = parse_size(ini_get('memory_limit'));\n    $recomended_size = parse_size('512M');\n    return ($recomended_size <= $max_size);\n}\n\nfunction check_mysqlnd() {\n    return function_exists('mysqli_fetch_all');\n}\n\nfunction base64DataToImage($imgBase64) {\n    $img = $imgBase64;\n    $img = str_replace('data:image/png;base64,', '', $img);\n    $img = str_replace(' ', '+', $img);\n    return base64_decode($img);\n}\n\nfunction getRealIpAddr() {\n    if (isCommandLineInterface()) {\n        $ip = \"127.0.0.1\";\n    } else if (!empty($_SERVER['HTTP_CLIENT_IP'])) { //check ip from share internet\n        $ip = $_SERVER['HTTP_CLIENT_IP'];\n    } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) { //to check ip is pass from proxy\n        $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];\n    } elseif (!empty($_SERVER['REMOTE_ADDR'])) {\n        $ip = $_SERVER['REMOTE_ADDR'];\n    } else {\n        $ip = \"127.0.0.1\";\n    }\n    return $ip;\n}\n\nfunction cleanString($text) {\n    $utf8 = [\n        '/[\u00e1a\u00e2aa\u00e4\u0105]/u' => 'a',\n        '/[\u00c1A\u00c2A\u00c4\u0104]/u' => 'A',\n        '/[\u00cdI\u00ceI]/u' => 'I',\n        '/[\u00edi\u00eei]/u' => 'i',\n        '/[\u00e9ee\u00eb\u0119]/u' => 'e',\n        '/[\u00c9EE\u00cb\u0118]/u' => 'E',\n        '/[\u00f3o\u00f4oo\u00f6]/u' => 'o',\n        '/[\u00d3O\u00d4O\u00d6]/u' => 'O',\n        '/[\u00fauu\u00fc]/u' => 'u',\n        '/[\u00daUU\u00dc]/u' => 'U',\n        '/[\u00e7\u0107]/u' => 'c',\n        '/[\u00c7\u0106]/u' => 'C',\n        '/[n\u0144]/u' => 'n',\n        '/[N\u0143]/u' => 'N',\n        '/[\u017c\u017a]/u' => 'z',\n        '/[\u017b\u0179]/u' => 'Z',\n        '/\u0142/' => 'l',\n        '/\u0141/' => 'L',\n        '/\u015b/' => 's',\n        '/\u015a/' => 'S',\n        '/\u2013/' => '-', // UTF-8 hyphen to 'normal' hyphen\n        '/[\u2019\u2018\u2039\u203a\u201a]/u' => ' ', // Literally a single quote\n        '/[\u201c\u201d\u00ab\u00bb\u201e]/u' => ' ', // Double quote\n        '/ /' => ' ', // nonbreaking space (equiv. to 0x160)\n        '/\u0404/' => 'YE', '/\u0406/' => 'I', '/\u0403/' => 'G', '/\u0456/' => 'i', '/\u2116/' => '#', '/\u0454/' => 'ye', '/\u0453/' => 'g',\n        '/\u0410/' => 'A', '/\u0411/' => 'B', '/\u0412/' => 'V', '/\u0413/' => 'G', '/\u0414/' => 'D',\n        '/\u0415/' => 'E', '/\u0401/' => 'YO', '/\u0416/' => 'ZH',\n        '/\u0417/' => 'Z', '/\u0418/' => 'I', '/\u0419/' => 'J', '/\u041a/' => 'K', '/\u041b/' => 'L',\n        '/\u041c/' => 'M', '/\u041d/' => 'N', '/\u041e/' => 'O', '/\u041f/' => 'P', '/\u0420/' => 'R',\n        '/\u0421/' => 'S', '/\u0422/' => 'T', '/\u0423/' => 'U', '/\u0424/' => 'F', '/\u0425/' => 'H',\n        '/\u0426/' => 'C', '/\u0427/' => 'CH', '/\u0428/' => 'SH', '/\u0429/' => 'SHH', '/\u042a/' => '',\n        '/\u042b/' => 'Y', '/\u042c/' => '', '/\u042d/' => 'E', '/\u042e/' => 'YU', '/\u042f/' => 'YA',\n        '/\u0430/' => 'a', '/\u0431/' => 'b', '/\u0432/' => 'v', '/\u0433/' => 'g', '/\u0434/' => 'd',\n        '/\u0435/' => 'e', '/\u0451/' => 'yo', '/\u0436/' => 'zh',\n        '/\u0437/' => 'z', '/\u0438/' => 'i', '/\u0439/' => 'j', '/\u043a/' => 'k', '/\u043b/' => 'l',\n        '/\u043c/' => 'm', '/\u043d/' => 'n', '/\u043e/' => 'o', '/\u043f/' => 'p', '/\u0440/' => 'r',\n        '/\u0441/' => 's', '/\u0442/' => 't', '/\u0443/' => 'u', '/\u0444/' => 'f', '/\u0445/' => 'h',\n        '/\u0446/' => 'c', '/\u0447/' => 'ch', '/\u0448/' => 'sh', '/\u0449/' => 'shh', '/\u044a/' => '',\n        '/\u044b/' => 'y', '/\u044c/' => '', '/\u044d/' => 'e', '/\u044e/' => 'yu', '/\u044f/' => 'ya',\n        '/\u2014/' => '-', '/\u00ab/' => '', '/\u00bb/' => '', '/\u2026/' => '',\n    ];\n    return preg_replace(array_keys($utf8), array_values($utf8), $text);\n}\n\nfunction cleanURLName($name) {\n    $name = preg_replace('/[!#$&\\'()*+,\\\\/:;=?@[\\\\]%\"\\/ ]+/', '-', trim(strtolower(cleanString($name))));\n    return trim(preg_replace('/[\\x00-\\x1F\\x7F]/u', '', $name), \"-\");\n}\n\n/**\n * @brief return true if running in CLI, false otherwise\n * if is set $_GET['ignoreCommandLineInterface'] will return false\n * @return boolean\n */\nfunction isCommandLineInterface() {\n    return (empty($_GET['ignoreCommandLineInterface']) && php_sapi_name() === 'cli');\n}\n\n/**\n * @brief show status message as text (CLI) or JSON-encoded array (web)\n *\n * @param array $statusarray associative array with type/message pairs\n * @return string\n */\nfunction status($statusarray) {\n    if (isCommandLineInterface()) {\n        foreach ($statusarray as $status => $message) {\n            echo $status . \":\" . $message . \"\\n\";\n        }\n    } else {\n        echo json_encode(array_map(function ($text) {\n                    return nl2br($text);\n                }, $statusarray));\n    }\n}\n\n/**\n * @brief show status message and die\n *\n * @param array $statusarray associative array with type/message pairs\n */\nfunction croak($statusarray) {\n    status($statusarray);\n    die;\n}\n\nfunction getSecondsTotalVideosLength() {\n    $configFile = dirname(__FILE__) . '/../videos/configuration.php';\n    require_once $configFile;\n    global $global;\n\n    if (!User::isLogged()) {\n        return 0;\n    }\n    $sql = \"SELECT * FROM videos v \";\n    $formats = '';\n    $values = [];\n    if (!User::isAdmin()) {\n        $id = User::getId();\n        $sql .= \" WHERE users_id = ? \";\n        $formats = \"i\";\n        $values = [$id];\n    }\n\n    $res = sqlDAL::readSql($sql, $formats, $values);\n    $fullData = sqlDAL::fetchAllAssoc($res);\n    sqlDAL::close($res);\n    $seconds = 0;\n    foreach ($fullData as $row) {\n        $seconds += parseDurationToSeconds($row['duration']);\n    }\n    return $seconds;\n}\n\nfunction getMinutesTotalVideosLength() {\n    $seconds = getSecondsTotalVideosLength();\n    return floor($seconds / 60);\n}\n\nfunction secondsToVideoTime($seconds) {\n    if (!is_numeric($seconds)) {\n        return $seconds;\n    }\n    $seconds = round($seconds);\n    $hours = floor($seconds / 3600);\n    $mins = floor($seconds / 60 % 60);\n    $secs = floor($seconds % 60);\n    return sprintf('%02d:%02d:%02d', $hours, $mins, $secs);\n}\n\nfunction parseSecondsToDuration($seconds) {\n    return secondsToVideoTime($seconds);\n}\n\nfunction parseDurationToSeconds($str) {\n    if (is_numeric($str)) {\n        return intval($str);\n    }\n    $durationParts = explode(\":\", $str);\n    if (empty($durationParts[1]) || $durationParts[0] == \"EE\") {\n        return 0;\n    }\n    if (empty($durationParts[2])) {\n        $durationParts[2] = 0;\n    }\n    $minutes = intval(($durationParts[0]) * 60) + intval($durationParts[1]);\n    return intval($durationParts[2]) + ($minutes * 60);\n}\n\nfunction durationToSeconds($str) {\n    return parseDurationToSeconds($str);\n}\n\nfunction secondsToDuration($seconds) {\n    return parseSecondsToDuration($seconds);\n}\n\n/**\n *\n * @global type $global\n * @param type $mail\n * call it before send mail to let AVideo decide the method\n */\nfunction setSiteSendMessage(&$mail) {\n    global $global;\n    if (empty($_POST[\"comment\"])) {\n        $_POST[\"comment\"] = '';\n    }\n    require_once $global['systemRootPath'] . 'objects/configuration.php';\n    $config = new Configuration();\n    $mail->CharSet = 'UTF-8';\n    if ($config->getSmtp()) {\n        _error_log(\"Sending SMTP Email\");\n        $mail->CharSet = 'UTF-8';\n        $mail->IsSMTP(); // enable SMTP\n        if (!empty($_POST) && $_POST[\"comment\"] == \"Test of comment\" && User::isAdmin()) {\n            $mail->SMTPDebug = 3;\n            $mail->Debugoutput = function ($str, $level) {\n                _error_log(\"SMTP ERROR $level; message: $str\", AVideoLog::$ERROR);\n            };\n        }\n        $mail->SMTPOptions = [\n            'ssl' => [\n                'verify_peer' => false,\n                'verify_peer_name' => false,\n                'allow_self_signed' => true,\n            ],\n        ];\n        $mail->SMTPAuth = $config->getSmtpAuth(); // authentication enabled\n        $mail->SMTPSecure = $config->getSmtpSecure(); // secure transfer enabled REQUIRED for Gmail\n        $mail->Host = $config->getSmtpHost();\n        $mail->Port = $config->getSmtpPort();\n        $mail->Username = $config->getSmtpUsername();\n        $mail->Password = $config->getSmtpPassword();\n        //_error_log(print_r($config, true));\n    } else {\n        _error_log(\"Sending SendMail Email\");\n        $mail->isSendmail();\n    }\n}\n\nfunction array_iunique($array) {\n    return array_intersect_key($array, array_unique(array_map(\"strtolower\", $array)));\n}\n\nfunction partition(array $list, $totalItens) {\n    $listlen = count($list);\n    _error_log(\"partition: listlen={$listlen} totalItens={$totalItens}\");\n    $p = ceil($listlen / $totalItens);\n    $partlen = floor($listlen / $p);\n\n    $partition = [];\n    $mark = 0;\n    for ($index = 0; $index < $p; $index++) {\n        $partition[$index] = array_slice($list, $mark, $totalItens);\n        $mark += $totalItens;\n    }\n\n    return $partition;\n}\n\nfunction sendSiteEmail($to, $subject, $message) {\n    global $advancedCustom;\n    if (empty($to)) {\n        return false;\n    }\n    if (!is_array($to)) {\n        $to = [$to];\n    }\n\n    if (empty($advancedCustom)) {\n        $advancedCustom = AVideoPlugin::loadPlugin(\"CustomizeAdvanced\");\n    }\n\n    $subject = UTF8encode($subject);\n    $message = UTF8encode($message);\n    $message = createEmailMessageFromTemplate($message);\n    _error_log(\"sendSiteEmail [\" . count($to) . \"] {$subject}\");\n    global $config, $global;\n    //require_once $global['systemRootPath'] . 'objects/include_phpmailer.php';\n    $contactEmail = $config->getContactEmail();\n    $webSiteTitle = $config->getWebSiteTitle();\n    try {\n        if (!is_array($to)) {\n            $mail = new \\PHPMailer\\PHPMailer\\PHPMailer();\n            setSiteSendMessage($mail);\n            $mail->setFrom($contactEmail, $webSiteTitle);\n            $mail->Subject = $subject . \" - \" . $webSiteTitle;\n            $mail->msgHTML($message);\n\n            $mail->addAddress($to);\n\n            $resp = $mail->send();\n            if (!$resp) {\n                _error_log(\"sendSiteEmail Error Info: {$mail->ErrorInfo}\");\n            } else {\n                _error_log(\"sendSiteEmail Success Info: $subject \" . json_encode($to));\n            }\n        } else {\n            $size = intval(@$advancedCustom->splitBulkEmailSend);\n            if (empty($size)) {\n                $size = 90;\n            }\n\n            $to = array_iunique($to);\n            $pieces = partition($to, $size);\n            foreach ($pieces as $piece) {\n                $mail = new \\PHPMailer\\PHPMailer\\PHPMailer();\n                setSiteSendMessage($mail);\n                $mail->setFrom($contactEmail, $webSiteTitle);\n                $mail->Subject = $subject . \" - \" . $webSiteTitle;\n                $mail->msgHTML($message);\n                $count = 0;\n                foreach ($piece as $value) {\n                    $count++;\n                    _error_log(\"sendSiteEmail::addBCC [{$count}] {$value}\");\n                    $mail->addBCC($value);\n                }\n\n                $resp = $mail->send();\n                if (!$resp) {\n                    _error_log(\"sendSiteEmail Error Info: {$mail->ErrorInfo}\");\n                } else {\n                    _error_log(\"sendSiteEmail Success Info: $subject \" . json_encode($to));\n                }\n            }\n        }\n        //Set the subject line\n        return $resp;\n    } catch (phpmailerException $e) {\n        _error_log($e->errorMessage()); //Pretty error messages from PHPMailer\n    } catch (Exception $e) {\n        _error_log($e->getMessage()); //Boring error messages from anything else!\n    }\n}\n\nfunction sendSiteEmailAsync($to, $subject, $message) {\n    global $global;\n    $content = ['to' => $to, 'subject' => $subject, 'message' => $message];\n    $tmpFile = getTmpFile();\n    file_put_contents($tmpFile, _json_encode($content));\n    //outputAndContinueInBackground();\n    $command = \"php {$global['systemRootPath']}objects/sendSiteEmailAsync.php '$tmpFile'\";\n\n    _error_log(\"sendSiteEmailAsync start  ($command)\");\n    $pid = execAsync($command);\n    _error_log(\"sendSiteEmailAsync end {$pid}\");\n    return $pid;\n}\n\nfunction createEmailMessageFromTemplate($message) {\n\n    //check if the message already have a HTML body\n    if (preg_match(\"/html>/i\", $message)) {\n        return $message;\n    }\n\n    global $global, $config;\n    $text = file_get_contents(\"{$global['systemRootPath']}view/include/emailTemplate.html\");\n    $siteTitle = $config->getWebSiteTitle();\n    $logo = \"<img src=\\\"\" . getURL($config->getLogo()) . \"\\\" alt=\\\"{$siteTitle}\\\"/>\";\n\n    $words = [$logo, $message, $siteTitle];\n    $replace = ['{logo}', '{message}', '{siteTitle}'];\n\n    return str_replace($replace, $words, $text);\n}\n\nfunction sendEmailToSiteOwner($subject, $message) {\n    global $advancedCustom;\n    $subject = UTF8encode($subject);\n    $message = UTF8encode($message);\n    _error_log(\"sendEmailToSiteOwner {$subject}\");\n    global $config, $global;\n    require_once $global['systemRootPath'] . 'objects/include_phpmailer.php';\n    $contactEmail = $config->getContactEmail();\n    $webSiteTitle = $config->getWebSiteTitle();\n    try {\n        $mail = new \\PHPMailer\\PHPMailer\\PHPMailer();\n        setSiteSendMessage($mail);\n        $mail->setFrom($contactEmail, $webSiteTitle);\n        $mail->Subject = $subject . \" - \" . $webSiteTitle;\n        $mail->msgHTML($message);\n        $mail->addAddress($contactEmail);\n        $resp = $mail->send();\n        if (!$resp) {\n            _error_log(\"sendEmailToSiteOwner Error Info: {$mail->ErrorInfo}\");\n        } else {\n            _error_log(\"sendEmailToSiteOwner Success Info: $subject \" . json_encode($to));\n        }\n        return $resp;\n    } catch (phpmailerException $e) {\n        _error_log($e->errorMessage()); //Pretty error messages from PHPMailer\n    } catch (Exception $e) {\n        _error_log($e->getMessage()); //Boring error messages from anything else!\n    }\n}\n\nfunction parseVideos($videoString = null, $autoplay = 0, $loop = 0, $mute = 0, $showinfo = 0, $controls = 1, $time = 0, $objectFit = \"\") {\n    global $global;\n    //_error_log(\"parseVideos: $videoString\");\n    if (strpos($videoString, 'youtube.com/embed') !== false) {\n        return $videoString . (parse_url($videoString, PHP_URL_QUERY) ? '&' : '?') . 'modestbranding=1&showinfo='\n                . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time&objectFit=$objectFit\";\n    }\n    if (strpos($videoString, 'iframe') !== false) {\n        // retrieve the video url\n        $anchorRegex = '/src=\"(.*)?\"/isU';\n        $results = [];\n        if (preg_match($anchorRegex, $video, $results)) {\n            $link = trim($results[1]);\n        }\n    } else {\n        // we already have a url\n        $link = $videoString;\n    }\n\n    if (stripos($link, 'embed') !== false) {\n        return $link . (parse_url($link, PHP_URL_QUERY) ? '&' : '?') . 'modestbranding=1&showinfo='\n                . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time&objectFit=$objectFit\";\n    } elseif (strpos($link, 'youtube.com') !== false) {\n        preg_match(\n                '/[\\\\?\\\\&]v=([^\\\\?\\\\&]+)/',\n                $link,\n                $matches\n        );\n        //the ID of the YouTube URL: x6qe_kVaBpg\n        if (empty($matches[1])) {\n            return $link;\n        }\n        $id = $matches[1];\n        return '//www.youtube.com/embed/' . $id . '?modestbranding=1&showinfo='\n                . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&te=$time&objectFit=$objectFit\";\n    } elseif (strpos($link, 'youtu.be') !== false) {\n        //https://youtu.be/9XXOBSsPoMU\n        preg_match(\n                '/youtu.be\\/([a-zA-Z0-9_]+)($|\\/)/',\n                $link,\n                $matches\n        );\n        //the ID of the YouTube URL: x6qe_kVaBpg\n        $id = $matches[1];\n        return '//www.youtube.com/embed/' . $id . '?modestbranding=1&showinfo='\n                . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&te=$time&objectFit=$objectFit\";\n    } elseif (strpos($link, 'player.vimeo.com') !== false) {\n        // works on:\n        // http://player.vimeo.com/video/37985580?title=0&amp;byline=0&amp;portrait=0\n        $videoIdRegex = '/player.vimeo.com\\/video\\/([0-9]+)\\??/i';\n        preg_match($videoIdRegex, $link, $matches);\n        $id = $matches[1];\n        return '//player.vimeo.com/video/' . $id;\n    } elseif (strpos($link, 'vimeo.com/channels') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?vimeo.com\\/channels\\/[a-z0-9-]+\\/(\\d+)($|\\/)/i',\n                $link,\n                $matches\n        );\n\n        //the ID of the Vimeo URL: 71673549\n        $id = $matches[2];\n        return '//player.vimeo.com/video/' . $id;\n    } elseif (strpos($link, 'vimeo.com') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?vimeo.com\\/(\\d+)($|\\/)/',\n                $link,\n                $matches\n        );\n\n        //the ID of the Vimeo URL: 71673549\n        $id = $matches[2];\n        return '//player.vimeo.com/video/' . $id;\n    } elseif (strpos($link, 'dailymotion.com') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?dailymotion.com\\/video\\/([a-zA-Z0-9_]+)($|\\/)/',\n                $link,\n                $matches\n        );\n\n        //the ID of the Vimeo URL: 71673549\n        $id = $matches[2];\n        return '//www.dailymotion.com/embed/video/' . $id;\n    } elseif (strpos($link, 'metacafe.com') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?metacafe.com\\/watch\\/([a-zA-Z0-9_\\/-]+)$/',\n                $link,\n                $matches\n        );\n        $id = $matches[2];\n        return '//www.metacafe.com/embed/' . $id;\n    } elseif (strpos($link, 'vid.me') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?vid.me\\/([a-zA-Z0-9_-]+)$/',\n                $link,\n                $matches\n        );\n\n        $id = $matches[2];\n        return '//vid.me/e/' . $id;\n    } elseif (strpos($link, 'rutube.ru') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?rutube.ru\\/video\\/([a-zA-Z0-9_-]+)\\/.*/', $link, $matches);\n        $id = $matches[2];\n        return '//rutube.ru/play/embed/' . $id;\n    } elseif (strpos($link, 'ok.ru') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?ok.ru\\/video\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n\n        $id = $matches[2];\n        return '//ok.ru/videoembed/' . $id;\n    } elseif (strpos($link, 'streamable.com') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?streamable.com\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n\n        $id = $matches[2];\n        return '//streamable.com/s/' . $id;\n    } elseif (strpos($link, 'twitch.tv/videos') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?twitch.tv\\/videos\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n        if (!empty($matches[2])) {\n            $id = $matches[2];\n            return '//player.twitch.tv/?video=' . $id . '&parent=' . parse_url($global['webSiteRootURL'], PHP_URL_HOST);\n        }\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?twitch.tv\\/[a-zA-Z0-9_-]+\\/v\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n\n        $id = $matches[2];\n        return '//player.twitch.tv/?video=' . $id . '&parent=' . parse_url($global['webSiteRootURL'], PHP_URL_HOST);\n    } elseif (strpos($link, 'twitch.tv') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?twitch.tv\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n\n        $id = $matches[2];\n        return '//player.twitch.tv/?channel=' . $id . '&parent=' . parse_url($global['webSiteRootURL'], PHP_URL_HOST);\n    } elseif (strpos($link, 'bitchute.com/video') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?bitchute.com\\/video\\/([^\\/]+)/', $link, $matches);\n        $id = $matches[2];\n        return 'https://www.bitchute.com/embed/' . $id . '/?parent=' . parse_url($global['webSiteRootURL'], PHP_URL_HOST);\n    } elseif (strpos($link, '/evideo/') !== false) {\n        //extract the ID\n        preg_match('/(http.+)\\/evideo\\/([a-zA-Z0-9_-]+)($|\\/)/i', $link, $matches);\n\n        //the AVideo site\n        $site = $matches[1];\n        $id = $matches[2];\n        return $site . '/evideoEmbed/' . $id . \"?autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time\";\n    } elseif (strpos($link, '/video/') !== false) {\n        //extract the ID\n        preg_match('/(http.+)\\/video\\/([a-zA-Z0-9_-]+)($|\\/)/i', $link, $matches);\n\n        //the AVideo site\n        if (!empty($matches[1])) {\n            $site = $matches[1];\n            $id = $matches[2];\n            return $site . '/videoEmbeded/' . $id . \"?autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time\";\n        } else {\n            return $link;\n        }\n    }\n\n    $url = $videoString;\n    $url_parsed = parse_url($url);\n    if (empty($url_parsed['query'])) {\n        return \"\";\n    }\n    $new_qs_parsed = [];\n    // Grab our first query string\n    parse_str($url_parsed['query'], $new_qs_parsed);\n    // Here's the other query string\n    $other_query_string = 'modestbranding=1&showinfo='\n            . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time\";\n    $other_qs_parsed = [];\n    parse_str($other_query_string, $other_qs_parsed);\n    // Stitch the two query strings together\n    $final_query_string_array = array_merge($new_qs_parsed, $other_qs_parsed);\n    $final_query_string = http_build_query($final_query_string_array);\n    // Now, our final URL:\n    if (empty($url_parsed['scheme'])) {\n        $scheme = '';\n    } else {\n        $scheme = \"{$url_parsed['scheme']}:\";\n    }\n    $new_url = $scheme\n            . '//'\n            . $url_parsed['host']\n            . $url_parsed['path']\n            . '?'\n            . $final_query_string;\n\n    return $new_url;\n    // return data\n}\n\n$canUseCDN = [];\n\nfunction canUseCDN($videos_id) {\n    if (empty($videos_id)) {\n        return false;\n    }\n    global $global, $canUseCDN;\n    if (!isset($canUseCDN[$videos_id])) {\n        require_once $global['systemRootPath'] . 'plugin/VR360/Objects/VideosVR360.php';\n        $pvr360 = AVideoPlugin::isEnabledByName('VR360');\n        // if the VR360 is enabled you can not use the CDN, it fail to load the GL\n        $isVR360Enabled = VideosVR360::isVR360Enabled($videos_id);\n        if ($pvr360 && $isVR360Enabled) {\n            $ret = false;\n        } else {\n            $ret = true;\n        }\n\n        //_error_log(json_encode(array('canUseCDN'=>$ret, '$pvr360'=>$pvr360, '$isVR360Enabled'=>$isVR360Enabled, '$videos_id'=>$videos_id)));\n        $canUseCDN[$videos_id] = $ret;\n    }\n    return $canUseCDN[$videos_id];\n}\n\nfunction clearVideosURL($fileName = \"\") {\n    global $global;\n    $path = getCacheDir() . \"getVideosURL/\";\n    if (empty($path)) {\n        rrmdir($path);\n    } else {\n        $cacheFilename = \"{$path}{$fileName}.cache\";\n        @unlink($cacheFilename);\n    }\n}\n\nfunction maxLifetime() {\n    global $maxLifetime;\n    if (!isset($maxLifetime)) {\n        $aws_s3 = AVideoPlugin::getObjectDataIfEnabled('AWS_S3');\n        $bb_b2 = AVideoPlugin::getObjectDataIfEnabled('Blackblaze_B2');\n        $secure = AVideoPlugin::getObjectDataIfEnabled('SecureVideosDirectory');\n        $maxLifetime = 0;\n        if (!empty($aws_s3) && empty($aws_s3->makeMyFilesPublicRead) && !empty($aws_s3->presignedRequestSecondsTimeout) && (empty($maxLifetime) || $aws_s3->presignedRequestSecondsTimeout < $maxLifetime)) {\n            $maxLifetime = $aws_s3->presignedRequestSecondsTimeout;\n            //_error_log(\"maxLifetime: AWS_S3 = {$maxLifetime}\");\n        }\n        if (!empty($bb_b2) && empty($bb_b2->usePublicBucket) && !empty($bb_b2->presignedRequestSecondsTimeout) && (empty($maxLifetime) || $bb_b2->presignedRequestSecondsTimeout < $maxLifetime)) {\n            $maxLifetime = $bb_b2->presignedRequestSecondsTimeout;\n            //_error_log(\"maxLifetime: B2 = {$maxLifetime}\");\n        }\n        if (!empty($secure) && !empty($secure->tokenTimeOut) && (empty($maxLifetime) || $secure->tokenTimeOut < $maxLifetime)) {\n            $maxLifetime = $secure->tokenTimeOut;\n            //_error_log(\"maxLifetime: Secure = {$maxLifetime}\");\n        }\n    }\n    return $maxLifetime;\n}\n\n$cacheExpirationTime = false;\n\nfunction cacheExpirationTime() {\n    if (isBot()) {\n        return 604800; // 1 week\n    }\n    global $cacheExpirationTime;\n    if (empty($cacheExpirationTime)) {\n        $obj = AVideoPlugin::getObjectDataIfEnabled('Cache');\n        $cacheExpirationTime = @$obj->cacheTimeInSeconds;\n    }\n    return intval($cacheExpirationTime);\n}\n\n/**\n * Tell whether a file should recreate a cache, based on its time and the plugin's token expiration.\n * @param type $filename\n * @return boolean\n */\nfunction recreateCache($filename) {\n    return (!file_exists($filename) || time() - filemtime($filename) > minimumExpirationTime());\n}\n\nfunction _getImagesURL($fileName, $type) {\n    global $global;\n    $files = [];\n    $source = Video::getSourceFile($fileName, \".jpg\");\n    $file1 = $source['path'];\n    if (file_exists($file1)) {\n        $files[\"jpg\"] = [\n            'filename' => \"{$fileName}.jpg\",\n            'path' => $file1,\n            'url' => $source['url'],\n            'type' => 'image',\n        ];\n    } else {\n        unset($file1);\n        $files[\"jpg\"] = [\n            'filename' => \"{$type}.png\",\n            'path' => getCDN() . \"view/img/{$type}.png\",\n            'url' => getCDN() . \"view/img/{$type}.png\",\n            'type' => 'image',\n        ];\n    }\n    $source = Video::getSourceFile($fileName, \"_portrait.jpg\");\n    $file2 = $source['path'];\n    if (file_exists($file2)) {\n        $files[\"pjpg\"] = [\n            'filename' => \"{$fileName}_portrait.jpg\",\n            'path' => $file2,\n            'url' => $source['url'],\n            'type' => 'image',\n        ];\n    } elseif ($type !== 'image') {\n        if (!empty($file1)) {\n            $files[\"pjpg\"] = $files[\"jpg\"];\n        } else {\n            $files[\"pjpg\"] = [\n                'filename' => \"{$type}_portrait.png\",\n                'path' => getCDN() . \"view/img/{$type}_portrait.png\",\n                'url' => getCDN() . \"view/img/{$type}_portrait.png\",\n                'type' => 'image',\n            ];\n        }\n    }\n    return $files;\n}\n\nfunction getVideosURLPDF($fileName) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n\n    $source = Video::getSourceFile($fileName, \".pdf\");\n    $file = $source['path'];\n    $files[\"pdf\"] = [\n        'filename' => \"{$fileName}.pdf\",\n        'path' => $file,\n        'url' => $source['url'],\n        'type' => 'pdf',\n    ];\n    $files = array_merge($files, _getImagesURL($fileName, 'pdf'));\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLPDF generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURLIMAGE($fileName) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n\n    $types = ['png', 'gif', 'webp', 'jpg'];\n\n    foreach ($types as $value) {\n        $source = Video::getSourceFile($fileName, \".{$value}\");\n        $file = $source['path'];\n        $files[\"image\"] = [\n            'filename' => \"{$fileName}.{$value}\",\n            'path' => $file,\n            'url' => $source['url'],\n            'type' => 'image',\n        ];\n        if (file_exists($file)) {\n            break;\n        }\n    }\n\n    $files = array_merge($files, _getImagesURL($fileName, 'image'));\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLPDF generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURLZIP($fileName) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n\n    $types = ['zip'];\n\n    foreach ($types as $value) {\n        $source = Video::getSourceFile($fileName, \".{$value}\");\n        $file = $source['path'];\n        $files[\"zip\"] = [\n            'filename' => \"{$fileName}.zip\",\n            'path' => $file,\n            'url' => $source['url'],\n            'type' => 'zip',\n        ];\n        if (file_exists($file)) {\n            break;\n        }\n    }\n\n    $files = array_merge($files, _getImagesURL($fileName, 'zip'));\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLPDF generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURLArticle($fileName) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n    //$files = array_merge($files, _getImagesURL($fileName, 'article'));\n    $files = _getImagesURL($fileName, 'article');\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLPDF generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURLAudio($fileName, $fileNameisThePath = false) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n    if ($fileNameisThePath) {\n        $filename = basename($fileName);\n        $path = Video::getPathToFile($filename);\n        if (filesize($path) < 20) {\n            $objCDNS = AVideoPlugin::getObjectDataIfEnabled('CDN');\n            if (!empty($objCDNS) && $objCDNS->enable_storage) {\n                $url = CDNStorage::getURL(\"{$filename}\");\n            }\n        }\n        if (empty($url)) {\n            $url = Video::getURLToFile($filename);\n        }\n\n        $files[\"mp3\"] = [\n            'filename' => $filename,\n            'path' => $path,\n            'url' => $url,\n            'url_noCDN' => $url,\n            'type' => 'audio',\n            'format' => 'mp3',\n        ];\n    } else {\n        $source = Video::getSourceFile($fileName, \".mp3\");\n        $file = $source['path'];\n        $files[\"mp3\"] = [\n            'filename' => \"{$fileName}.mp3\",\n            'path' => $file,\n            'url' => $source['url'],\n            'url_noCDN' => @$source['url_noCDN'],\n            'type' => 'audio',\n            'format' => 'mp3',\n        ];\n    }\n\n    $files = array_merge($files, _getImagesURL($fileName, 'audio_wave'));\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLAudio generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURL($fileName, $cache = true) {\n    return getVideosURL_V2($fileName); // disable this function soon\n}\n\nfunction getVideosURLMP4Only($fileName) {\n    $allFiles = getVideosURL_V2($fileName);\n    if (is_array($allFiles)) {\n        foreach ($allFiles as $key => $value) {\n            if ($value['format'] !== 'mp4') {\n                unset($allFiles[$key]);\n            }\n        }\n        return $allFiles;\n    }\n    _error_log(\"getVideosURLMP4Only does not return an ARRAY from getVideosURL_V2($fileName) \" . json_encode($allFiles));\n    return [];\n}\n\nfunction getVideosURLMP3Only($fileName) {\n    $allFiles = getVideosURL_V2($fileName);\n    if (is_array($allFiles)) {\n        foreach ($allFiles as $key => $value) {\n            if ($value['format'] !== 'mp3') {\n                unset($allFiles[$key]);\n            }\n        }\n        return $allFiles;\n    }\n    _error_log(\"getVideosURLMP4Only does not return an ARRAY from getVideosURL_V2($fileName) \" . json_encode($allFiles));\n    return [];\n}\n\nfunction getVideosURLWEBMOnly($fileName) {\n    $allFiles = getVideosURL_V2($fileName); // disable this function soon\n    if (is_array($allFiles)) {\n        foreach ($allFiles as $key => $value) {\n            if ($value['format'] !== 'webm') {\n                unset($allFiles[$key]);\n            }\n        }\n        return $allFiles;\n    }\n    _error_log(\"getVideosURLMP4Only does not return an ARRAY from getVideosURL_V2($fileName) \" . json_encode($allFiles));\n    return [];\n}\n\nfunction getVideosURLMP4WEBMOnly($fileName) {\n    return array_merge(getVideosURLMP4Only($fileName), getVideosURLWEBMOnly($fileName));\n}\n\nfunction getVideosURLMP4WEBMMP3Only($fileName) {\n    return array_merge(getVideosURLMP4Only($fileName), getVideosURLWEBMOnly($fileName), getVideosURLMP3Only($fileName));\n}\n\nfunction getVideosURLOnly($fileName) {\n    $allFiles = getVideosURL_V2($fileName); // disable this function soon\n    foreach ($allFiles as $key => $value) {\n        if ($value['type'] !== 'video') {\n            unset($allFiles[$key]);\n        }\n    }\n    return $allFiles;\n}\n\nfunction getAudioURLOnly($fileName) {\n    $allFiles = getVideosURL_V2($fileName); // disable this function soon\n    foreach ($allFiles as $key => $value) {\n        if ($value['type'] !== 'audio') {\n            unset($allFiles[$key]);\n        }\n    }\n    return $allFiles;\n}\n\nfunction getAudioOrVideoURLOnly($fileName) {\n    $allFiles = getVideosURL_V2($fileName); // disable this function soon\n    foreach ($allFiles as $key => $value) {\n        if ($value['type'] !== 'video' && $value['type'] !== 'audio') {\n            unset($allFiles[$key]);\n        }\n    }\n    return $allFiles;\n}\n\nfunction getVideosDir() {\n    return Video::getStoragePath();\n}\n\n$getVideosURL_V2Array = [];\n\nfunction getVideosURL_V2($fileName, $recreateCache = false) {\n    global $global, $getVideosURL_V2Array;\n    if (empty($fileName)) {\n        return [];\n    }\n    //$recreateCache = true;\n    $cleanfilename = Video::getCleanFilenameFromFile($fileName);\n\n    if (!empty($getVideosURL_V2Array[$cleanfilename])) {\n        return $getVideosURL_V2Array[$cleanfilename];\n    }\n\n    $paths = Video::getPaths($cleanfilename);\n\n    $pdf = $paths['path'] . \"{$cleanfilename}.pdf\";\n    $mp3 = $paths['path'] . \"{$cleanfilename}.mp3\";\n    if (file_exists($pdf)) {\n        return getVideosURLPDF($fileName);\n    } elseif (file_exists($mp3)) {\n        return getVideosURLAudio($mp3, true);\n    }\n    $cacheName = \"getVideosURL_V2$fileName\";\n    if (empty($recreateCache)) {\n        $lifetime = maxLifetime();\n\n        $TimeLog1 = \"getVideosURL_V2($fileName) empty recreateCache\";\n        TimeLogStart($TimeLog1);\n        $files = object_to_array(ObjectYPT::getCache($cacheName, $lifetime, true));\n        if (is_array($files)) {\n            //_error_log(\"getVideosURL_V2: do NOT recreate lifetime = {$lifetime}\");\n            $preg_match_url = addcslashes(getCDN(), \"/\") . \"videos\";\n            foreach ($files as $value) {\n                // check if is a dummy file and the URL still wrong\n                $pathFilesize = filesize($value['path']);\n                if (\n                        $value['type'] === 'video' && // is a video\n                        preg_match(\"/^{$preg_match_url}/\", $value['url']) && // the URL is the same as the main domain\n                        $pathFilesize < 20) { // file size is small\n                    _error_log(\"getVideosURL_V2:: dummy file found, fix cache \" . json_encode([\"/^{$preg_match_url}/\", $value['url'], preg_match(\"/^{$preg_match_url}video/\", $value['url']), $pathFilesize, $value]));\n                    unset($files);\n                    $video = Video::getVideoFromFileName($fileName, true, true);\n                    Video::clearCache($video['id']);\n                    break;\n                } else {\n                    //_error_log(\"getVideosURL_V2:: NOT dummy file \". json_encode(array(\"/^{$preg_match_url}video/\", $value['url'], preg_match(\"/^{$preg_match_url}video/\", $value['url']),filesize($value['path']),$value)));\n                }\n            }\n            //_error_log(\"getVideosURL_V2:: cachestill good \". json_encode($files));\n        } else {\n            //_error_log(\"getVideosURL_V2:: cache not found \". json_encode($files));\n        }\n        TimeLogEnd($TimeLog1, __LINE__);\n    } else {\n        _error_log(\"getVideosURL_V2($fileName) Recreate cache requested \" . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n    }\n    if (empty($files)) {\n        $files = [];\n        $plugin = AVideoPlugin::loadPlugin(\"VideoHLS\");\n        if (!empty($plugin)) {\n            $timeName = \"getVideosURL_V2::VideoHLS::getSourceFile($fileName)\";\n            TimeLogStart($timeName);\n            $files = VideoHLS::getSourceFile($fileName, true);\n            TimeLogEnd($timeName, __LINE__);\n        }\n        $video = ['webm', 'mp4'];\n        $audio = ['mp3', 'ogg'];\n        $image = ['jpg', 'gif', 'webp'];\n\n        $formats = array_merge($video, $audio, $image);\n\n        //$globQuery = getVideosDir().\"{$cleanfilename}*.{\" . implode(\",\", $formats) . \"}\";\n        //$filesInDir = glob($globQuery, GLOB_BRACE);\n        $timeName = \"getVideosURL_V2::globVideosDir($cleanfilename)\";\n        TimeLogStart($timeName);\n        $filesInDir = globVideosDir($cleanfilename, true);\n        TimeLogEnd($timeName, __LINE__);\n\n        $timeName = \"getVideosURL_V2::foreach\";\n        TimeLogStart($timeName);\n        foreach ($filesInDir as $file) {\n            $parts = pathinfo($file);\n\n            if ($parts['filename'] == 'index') {\n                $parts['filename'] = str_replace(Video::getPathToFile($parts['dirname']), '', $parts['dirname']);\n            }\n\n            //$timeName2 = \"getVideosURL_V2::Video::getSourceFile({$parts['filename']}, .{$parts['extension']})\";\n            //TimeLogStart($timeName2);\n            $source = Video::getSourceFile($parts['filename'], \".{$parts['extension']}\");\n            //TimeLogEnd($timeName2, __LINE__);\n            if (empty($source)) {\n                continue;\n            }\n            if (in_array($parts['extension'], $image) && filesize($file) < 1000 && !preg_match(\"/Dummy File/i\", file_get_contents($file))) {\n                continue;\n            }\n\n            if (preg_match(\"/{$cleanfilename}(_.+)[.]{$parts['extension']}$/\", $file, $matches)) {\n                $resolution = $matches[1];\n            } else {\n                preg_match('/_([^_]{0,4}).' . $parts['extension'] . '$/', $file, $matches);\n                $resolution = @$matches[1];\n            }\n            $type = 'video';\n            if (in_array($parts['extension'], $video)) {\n                $type = 'video';\n            } elseif (in_array($parts['extension'], $audio)) {\n                $type = 'audio';\n            } elseif (in_array($parts['extension'], $image) || preg_match('/^(gif|jpg|webp|png|jpeg)/i', $parts['extension'])) {\n                $type = 'image';\n                if (!preg_match('/(thumb|roku)/', $resolution)) {\n                    $resolution = '';\n                }\n            }\n            $files[\"{$parts['extension']}{$resolution}\"] = [\n                'filename' => \"{$parts['filename']}.{$parts['extension']}\",\n                'path' => $file,\n                'url' => $source['url'],\n                'url_noCDN' => @$source['url_noCDN'],\n                'type' => $type,\n                'format' => strtolower($parts['extension']),\n            ];\n        }\n\n        TimeLogEnd($timeName, __LINE__);\n        ObjectYPT::setCache($cacheName, $files);\n    }\n    if (is_array($files)) {\n        // sort by resolution\n        uasort($files, \"sortVideosURL\");\n    }\n    //var_dump($files);exit;\n    $getVideosURL_V2Array[$cleanfilename] = $files;\n    return $getVideosURL_V2Array[$cleanfilename];\n}\n\n//Returns < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.\nfunction sortVideosURL($a, $b) {\n    if ($a['type'] == 'video') {\n        $aRes = getResolutionFromFilename($a['filename']);\n        $bRes = getResolutionFromFilename($b['filename']);\n        return $aRes - $bRes;\n    }\n\n    return 0;\n}\n\nfunction getResolutionFromFilename($filename) {\n    global $getResolutionFromFilenameArray;\n\n    if (!isset($getResolutionFromFilenameArray)) {\n        $getResolutionFromFilenameArray = [];\n    }\n\n    if (!empty($getResolutionFromFilenameArray[$filename])) {\n        return $getResolutionFromFilenameArray[$filename];\n    }\n\n    if (!preg_match('/^http/i', $filename) && !file_exists($filename)) {\n        return 0;\n    }\n    $res = Video::getResolutionFromFilename($filename);\n    if (empty($res)) {\n        if (preg_match('/[_\\/]hd[.\\/]/i', $filename)) {\n            $res = 720;\n        } elseif (preg_match('/[_\\/]sd[.\\/]/i', $filename)) {\n            $res = 480;\n        } elseif (preg_match('/[_\\/]low[.\\/]/i', $filename)) {\n            $res = 240;\n        } else {\n            $res = 0;\n        }\n    }\n    $getResolutionFromFilenameArray[$filename] = $res;\n    return $res;\n}\n\nfunction getSources($fileName, $returnArray = false, $try = 0) {\n    if ($returnArray) {\n        $videoSources = $audioTracks = $subtitleTracks = [];\n    } else {\n        $videoSources = $audioTracks = $subtitleTracks = '';\n    }\n\n    $video = Video::getVideoFromFileNameLight($fileName);\n\n    if ($video['type'] !== 'audio' && function_exists('getVRSSources')) {\n        $videoSources = getVRSSources($fileName, $returnArray);\n    } else {\n        //$files = getVideosURL($fileName);\n        $files = getVideosURL_V2($fileName, !empty($try));\n        $sources = '';\n        $sourcesArray = [];\n        foreach ($files as $key => $value) {\n            $path_parts = pathinfo($value['path']);\n            if ($path_parts['extension'] == \"webm\" || $path_parts['extension'] == \"mp4\" || $path_parts['extension'] == \"m3u8\" || $path_parts['extension'] == \"mp3\" || $path_parts['extension'] == \"ogg\") {\n                $obj = new stdClass();\n                $obj->type = mime_content_type_per_filename($value['path']);\n                $sources .= \"<source src=\\\"{$value['url']}\\\" type=\\\"{$obj->type}\\\">\";\n                $obj->src = $value['url'];\n                $sourcesArray[] = $obj;\n            }\n        }\n        $videoSources = $returnArray ? $sourcesArray : $sources;\n    }\n    if (function_exists('getVTTTracks')) {\n        $subtitleTracks = getVTTTracks($fileName, $returnArray);\n    }\n\n    if ($returnArray) {\n        $return = array_merge($videoSources, $audioTracks, $subtitleTracks);\n    } else {\n        $return = $videoSources . $audioTracks . $subtitleTracks;\n    }\n\n    $obj = new stdClass();\n    $obj->result = $return;\n    if (empty($videoSources) && empty($audioTracks) && !empty($video['id']) && $video['type'] == 'video') {\n        if (empty($try)) {\n            //sleep(1);\n            $sources = getSources($fileName, $returnArray, $try + 1);\n            if (!empty($sources)) {\n                Video::updateFilesize($video['id']);\n            }\n            Video::clearCache($video['id']);\n            return $sources;\n        } else {\n            _error_log(\"getSources($fileName) File not found \" . json_encode($video));\n\n            $obj = new stdClass();\n            $obj->type = \"video/mp4\";\n            $obj->src = \"Video not found\";\n            $obj->label = \"Video not found\";\n            $obj->res = 0;\n            $sourcesArray[\"mp4\"] = $obj;\n            $sources[\"mp4\"] = \"<source src=\\\"\\\" type=\\\"{$obj->type}\\\" label=\\\"{$obj->label}\\\" res=\\\"{$obj->res}\\\">\";\n            $return = $returnArray ? $sourcesArray : implode(PHP_EOL, $sources);\n        }\n    }\n    return $return;\n}\n\n/**\n *\n * @param type $file_src\n * @return typeget image size with cache\n */\nfunction getimgsize($file_src) {\n    global $_getimagesize;\n    if (empty($file_src) || !file_exists($file_src)) {\n        return [0, 0];\n    }\n    if (empty($_getimagesize)) {\n        $_getimagesize = [];\n    }\n\n    $name = \"getimgsize_\" . md5($file_src);\n\n    if (!empty($_getimagesize[$name])) {\n        $size = $_getimagesize[$name];\n    } else {\n        $cached = ObjectYPT::getCache($name, 86400); //one day\n        if (!empty($cached)) {\n            $c = (array) $cached;\n            $size = [];\n            foreach ($c as $key => $value) {\n                if (preg_match(\"/^[0-9]+$/\", $key)) {\n                    $key = intval($key);\n                }\n                $size[$key] = $value;\n            }\n            $_getimagesize[$name] = $size;\n            return $size;\n        }\n\n        $size = @getimagesize($file_src);\n\n        if (empty($size)) {\n            $size = [1024, 768];\n        }\n\n        ObjectYPT::setCache($name, $size);\n        $_getimagesize[$name] = $size;\n    }\n    return $size;\n}\n\nfunction im_resize($file_src, $file_dest, $wd, $hd, $q = 80) {\n    if (empty($file_dest)) {\n        return false;\n    }\n    if (!file_exists($file_src)) {\n        _error_log(\"im_resize: Source not found: {$file_src}\");\n        return false;\n    }\n    $size = getimgsize($file_src);\n    if ($size === false) {\n        _error_log(\"im_resize: Could not get image size: {$file_src}\");\n        return false;\n    }\n\n    if (empty($size['mime']) || $size['mime'] == 'image/pjpeg') {\n        $size['mime'] = 'image/jpeg';\n    }\n\n    $format = strtolower(substr($size['mime'], strpos($size['mime'], '/') + 1));\n    if (empty($format)) {\n        $format = 'jpeg';\n    }\n    $destformat = strtolower(substr($file_dest, -4));\n    if (empty($destformat)) {\n        _error_log(\"destformat not found {$file_dest}\");\n        $destformat = \".jpg\";\n    }\n    $icfunc = \"imagecreatefrom\" . $format;\n    if (!function_exists($icfunc)) {\n        _error_log(\"im_resize: Function does not exists: {$icfunc}\");\n        return false;\n    }\n\n    $imgSize = getimagesize($file_src);\n    if (empty($imgSize)) {\n        _error_log(\"im_resize: getimagesize($file_src) return false \" . json_encode($imgSize));\n        return false;\n    }\n    try {\n        $src = $icfunc($file_src);\n    } catch (Exception $exc) {\n        _error_log(\"im_resize: ($file_src) \" . $exc->getMessage());\n        _error_log(\"im_resize: Try {$icfunc} from string\");\n        $src = imagecreatefromstring(file_get_contents($file_src));\n        if (!$src) {\n            _error_log(\"im_resize: fail {$icfunc} from string\");\n            return false;\n        }\n    }\n    $ws = imagesx($src);\n    $hs = imagesy($src);\n\n    if ($ws <= $hs) {\n        $hd = ceil(($wd * $hs) / $ws);\n    } else {\n        $wd = ceil(($hd * $ws) / $hs);\n    }\n    if ($ws <= $wd) {\n        $wd = $ws;\n        $hd = $hs;\n    }\n    $wc = ($wd * $hs) / $hd;\n\n    if ($wc <= $ws) {\n        $hc = ($wc * $hd) / $wd;\n    } else {\n        $hc = ($ws * $hd) / $wd;\n        $wc = ($wd * $hc) / $hd;\n    }\n\n    $dest = imagecreatetruecolor($wd, $hd);\n    switch ($format) {\n        case \"png\":\n            imagealphablending($dest, false);\n            imagesavealpha($dest, true);\n            $transparent = imagecolorallocatealpha($dest, 255, 255, 255, 127);\n            imagefilledrectangle($dest, 0, 0, $wd, $hd, $transparent);\n\n            break;\n        case \"gif\":\n// integer representation of the color black (rgb: 0,0,0)\n            $background = imagecolorallocate($src, 0, 0, 0);\n// removing the black from the placeholder\n            imagecolortransparent($src, $background);\n\n            break;\n    }\n\n    imagecopyresampled($dest, $src, 0, 0, ($ws - $wc) / 2, ($hs - $hc) / 2, $wd, $hd, $wc, $hc);\n    $saved = false;\n    if ($destformat == '.png') {\n        $saved = imagepng($dest, $file_dest);\n    }\n\n    if ($destformat == '.jpg') {\n        $saved = imagejpeg($dest, $file_dest, $q);\n    }\n\n    if (!$saved) {\n        _error_log('saving failed');\n    }\n\n    imagedestroy($dest);\n    imagedestroy($src);\n    @chmod($file_dest, 0666);\n\n    return true;\n}\n\nfunction im_resizeV2($file_src, $file_dest, $wd, $hd, $q = 80) {\n    _error_log(\"im_resizeV2: $file_src, $file_dest, $wd, $hd, $q\");\n    $newImage = im_resize($file_src, $file_dest, $wd, $hd, 100);\n    if (!$newImage) {\n        return false;\n    }\n    $src = imagecreatefromjpeg($file_dest);\n    if (empty($src)) {\n        return false;\n    }\n    $ws = imagesx($src);\n    $hs = imagesy($src);\n\n    if ($ws < $wd) {\n        $dst_x = ($wd - $ws) / 2;\n    } else {\n        $dst_x = 0;\n    }\n\n    if ($hs < $hd) {\n        $dst_y = ($hd - $hs) / 2;\n    } else {\n        $dst_y = 0;\n    }\n\n    $mapImage = imagecreatetruecolor($wd, $hd);\n    $bgColor = imagecolorallocate($mapImage, 0, 0, 0);\n    imagefill($mapImage, 0, 0, $bgColor);\n\n    $tileImg = imagecreatefromjpeg($file_dest);\n    imagecopy($mapImage, $tileImg, $dst_x, $dst_y, 0, 0, $ws, $hs);\n\n    $saved = imagejpeg($mapImage, $file_dest, $q);\n\n    return $saved;\n}\n\nfunction im_resizePNG($file_src, $file_dest, $wd, $hd) {\n    $srcImage = imagecreatefrompng($file_src);\n    $ws = imagesx($srcImage);\n    $hs = imagesy($srcImage);\n\n    $targetImage = imagecreatetruecolor($wd, $hd);\n    imagealphablending($targetImage, false);\n    imagesavealpha($targetImage, true);\n\n    imagecopyresampled(\n            $targetImage,\n            $srcImage,\n            0,\n            0,\n            0,\n            0,\n            $wd,\n            $hd,\n            $ws,\n            $hs\n    );\n\n    $saved = imagepng($targetImage, $file_dest);\n\n    return $saved;\n}\n\nfunction im_resizeV3($file_src, $file_dest, $wd, $hd) {\n    return im_resizeV2($file_src, $file_dest, $wd, $hd); // ffmpeg disabled\n\n    _error_log(\"im_resizeV3: $file_src, $file_dest, $wd, $hd\");\n    // This tries to preserve the aspect ratio of the thumb while letterboxing it in\n    // The same way that the encoder now does.\n    eval('$ffmpeg =\"ffmpeg -i {$file_src} -filter_complex \\\"scale=(iw*sar)*min({$wd}/(iw*sar)\\,{$hd}/ih):ih*min({$wd}/(iw*sar)\\,{$hd}/ih), pad={$wd}:{$hd}:({$wd}-iw*min({$wd}/iw\\,{$hd}/ih))/2:({$hd}-ih*min({$wd}/iw\\,{$hd}/ih))/2\\\" -sws_flags lanczos -qscale:v 2 {$file_dest}\";');\n    exec($ffmpeg . \" < /dev/null 2>&1\", $output, $return_val);\n}\n\nfunction im_resize_gif($file_src, $file_dest, $max_width, $max_height) {\n    if (class_exists('Imagick')) {\n        $imagick = new Imagick($file_src);\n\n        $format = $imagick->getImageFormat();\n        if ($format == 'GIF') {\n            $imagick = $imagick->coalesceImages();\n            do {\n                $imagick->resizeImage($max_width, $max_height, Imagick::FILTER_BOX, 1);\n            } while ($imagick->nextImage());\n            $imagick = $imagick->deconstructImages();\n            $imagick->writeImages($file_dest, true);\n        }\n\n        $imagick->clear();\n        $imagick->destroy();\n    } else {\n        copy($file_src, $file_dest);\n    }\n}\n\nfunction im_resize_max_size($file_src, $file_dest, $max_width, $max_height) {\n    $fn = $file_src;\n\n    $extension = strtolower(pathinfo($file_dest, PATHINFO_EXTENSION));\n\n    if ($extension == 'gif') {\n        im_resize_gif($file_src, $file_dest, $max_width, $max_height);\n        @unlink($file_src);\n        return true;\n    }\n\n    $tmpFile = getTmpFile() . \".{$extension}\";\n    if (empty($fn)) {\n        _error_log(\"im_resize_max_size: file name is empty, Destination: {$file_dest}\", AVideoLog::$ERROR);\n        return false;\n    }\n    if (function_exists(\"exif_read_data\")) {\n        error_log($fn);\n        convertImage($fn, $tmpFile, 100);\n        $exif = exif_read_data($tmpFile);\n        if ($exif && isset($exif['Orientation'])) {\n            $orientation = $exif['Orientation'];\n            if ($orientation != 1) {\n                $img = imagecreatefromjpeg($tmpFile);\n                $deg = 0;\n                switch ($orientation) {\n                    case 3:\n                        $deg = 180;\n                        break;\n                    case 6:\n                        $deg = 270;\n                        break;\n                    case 8:\n                        $deg = 90;\n                        break;\n                }\n                if ($deg) {\n                    $img = imagerotate($img, $deg, 0);\n                }\n                imagejpeg($img, $fn, 100);\n            }\n        }\n    } else {\n        _error_log(\"Make sure you install the php_mbstring and php_exif to be able to rotate images\");\n    }\n\n    $size = getimagesize($fn);\n    $ratio = $size[0] / $size[1]; // width/height\n    if ($size[0] <= $max_width && $size[1] <= $max_height) {\n        $width = $size[0];\n        $height = $size[1];\n    } elseif ($ratio > 1) {\n        $width = $max_width;\n        $height = $max_height / $ratio;\n    } else {\n        $width = $max_width * $ratio;\n        $height = $max_height;\n    }\n\n    $src = imagecreatefromstring(file_get_contents($fn));\n    $dst = imagecreatetruecolor($width, $height);\n    imagecopyresampled($dst, $src, 0, 0, 0, 0, $width, $height, $size[0], $size[1]);\n    imagedestroy($src);\n    imagejpeg($dst, $file_dest); // adjust format as needed\n    imagedestroy($dst);\n    @unlink($file_src);\n    @unlink($tmpFile);\n}\n\nfunction convertImage($originalImage, $outputImage, $quality) {\n    $imagetype = 0;\n    if (function_exists('exif_imagetype')) {\n        $imagetype = exif_imagetype($originalImage);\n    }\n\n    $ext = strtolower(pathinfo($originalImage, PATHINFO_EXTENSION));\n    $extOutput = strtolower(pathinfo($outputImage, PATHINFO_EXTENSION));\n\n    if ($ext == $extOutput) {\n        return copy($originalImage, $outputImage);\n    }\n\n    try {\n        if ($imagetype == IMAGETYPE_JPEG || preg_match('/jpg|jpeg/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_JPEG\");\n            $imageTmp = imagecreatefromjpeg($originalImage);\n        } elseif ($imagetype == IMAGETYPE_PNG || preg_match('/png/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_PNG\");\n            $imageTmp = imagecreatefrompng($originalImage);\n        } elseif ($imagetype == IMAGETYPE_GIF || preg_match('/gif/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_GIF\");\n            $imageTmp = imagecreatefromgif($originalImage);\n        } elseif ($imagetype == IMAGETYPE_BMP || preg_match('/bmp/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_BMP\");\n            $imageTmp = imagecreatefrombmp($originalImage);\n        } elseif ($imagetype == IMAGETYPE_WEBP || preg_match('/webp/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_WEBP\");\n            $imageTmp = imagecreatefromwebp($originalImage);\n        } else {\n            _error_log(\"convertImage: File Extension not found ($originalImage, $outputImage, $quality) \" . exif_imagetype($originalImage));\n            return 0;\n        }\n    } catch (Exception $exc) {\n        _error_log(\"convertImage: \" . $exc->getMessage());\n        return 0;\n    }\n    if ($imageTmp === false) {\n        _error_log(\"convertImage: could not create a resource: $originalImage, $outputImage, $quality, $ext \" . json_encode(debug_backtrace()));\n        return 0;\n    }\n    // quality is a value from 0 (worst) to 100 (best)\n    $response = 0;\n    if ($extOutput === 'jpg') {\n        if (function_exists('imagejpeg')) {\n            $response = imagejpeg($imageTmp, $outputImage, $quality);\n        } else {\n            _error_log(\"convertImage ERROR: function imagejpeg does not exists\");\n        }\n    } elseif ($extOutput === 'png') {\n        if (function_exists('imagepng')) {\n            $response = imagepng($imageTmp, $outputImage, $quality / 10);\n        } else {\n            _error_log(\"convertImage ERROR: function imagepng does not exists\");\n        }\n    } elseif ($extOutput === 'webp') {\n        if (function_exists('imagewebp')) {\n            $response = imagewebp($imageTmp, $outputImage, $quality);\n        } else {\n            _error_log(\"convertImage ERROR: function imagewebp does not exists\");\n        }\n    } elseif ($extOutput === 'gif') {\n        if (function_exists('imagegif')) {\n            $response = imagegif($imageTmp, $outputImage);\n        } else {\n            _error_log(\"convertImage ERROR: function imagegif does not exists\");\n        }\n    }\n\n    imagedestroy($imageTmp);\n\n    return $response;\n}\n\nfunction decideMoveUploadedToVideos($tmp_name, $filename, $type = \"video\") {\n    if ($filename == '.zip') {\n        return false;\n    }\n    global $global;\n    $obj = new stdClass();\n    $aws_s3 = AVideoPlugin::loadPluginIfEnabled('AWS_S3');\n    $bb_b2 = AVideoPlugin::loadPluginIfEnabled('Blackblaze_B2');\n    $ftp = AVideoPlugin::loadPluginIfEnabled('FTP_Storage');\n    $paths = Video::getPaths($filename, true);\n    $destinationFile = \"{$paths['path']}{$filename}\";\n    //$destinationFile = getVideosDir() . \"{$filename}\";\n    _error_log(\"decideMoveUploadedToVideos: {$filename}\");\n    $path_info = pathinfo($filename);\n    if ($type !== \"zip\" && $path_info['extension'] === 'zip') {\n        _error_log(\"decideMoveUploadedToVideos: ZIp file {$filename}\");\n        $paths = Video::getPaths($path_info['filename']);\n        $dir = $paths['path'];\n        unzipDirectory($tmp_name, $dir); // unzip it\n        cleanDirectory($dir);\n        if (!empty($aws_s3)) {\n            //$aws_s3->move_uploaded_file($tmp_name, $filename);\n        } elseif (!empty($bb_b2)) {\n            $bb_b2->move_uploaded_directory($dir);\n        } elseif (!empty($ftp)) {\n            //$ftp->move_uploaded_file($tmp_name, $filename);\n        }\n    } else {\n        _error_log(\"decideMoveUploadedToVideos: NOT ZIp file {$filename}\");\n        if (!empty($aws_s3)) {\n            _error_log(\"decideMoveUploadedToVideos: S3 {$filename}\");\n            $aws_s3->move_uploaded_file($tmp_name, $filename);\n        } elseif (!empty($bb_b2)) {\n            _error_log(\"decideMoveUploadedToVideos: B2 {$filename}\");\n            $bb_b2->move_uploaded_file($tmp_name, $filename);\n        } elseif (!empty($ftp)) {\n            _error_log(\"decideMoveUploadedToVideos: FTP {$filename}\");\n            $ftp->move_uploaded_file($tmp_name, $filename);\n        } else {\n            _error_log(\"decideMoveUploadedToVideos: Local {$filename}\");\n            if (!move_uploaded_file($tmp_name, $destinationFile)) {\n                if (!rename($tmp_name, $destinationFile)) {\n                    if (!copy($tmp_name, $destinationFile)) {\n                        $obj->msg = \"Error on decideMoveUploadedToVideos({$tmp_name}, $destinationFile)\";\n                        die(json_encode($obj));\n                    }\n                }\n            }\n            if (file_exists($destinationFile)) {\n                _error_log(\"decideMoveUploadedToVideos: SUCCESS Local {$destinationFile}\");\n            } else {\n                _error_log(\"decideMoveUploadedToVideos: ERROR Local {$destinationFile}\");\n            }\n            chmod($destinationFile, 0644);\n        }\n    }\n    sleep(1);\n    $fsize = @filesize($destinationFile);\n    _error_log(\"decideMoveUploadedToVideos: destinationFile {$destinationFile} filesize=\" . ($fsize) . \" (\" . humanFileSize($fsize) . \")\");\n    Video::clearCacheFromFilename($filename);\n    return $destinationFile;\n}\n\nfunction unzipDirectory($filename, $destination) {\n    global $global;\n    // Wait a couple of seconds to make sure the file has completed transfer\n    sleep(2);\n    ini_set('memory_limit', '-1');\n    ini_set('max_execution_time', 7200); // 2 hours\n    $cmd = \"unzip {$filename} -d {$destination}\" . \"  2>&1\";\n    _error_log(\"unzipDirectory: {$cmd}\");\n    exec($cmd, $output, $return_val);\n    if ($return_val !== 0 && function_exists(\"zip_open\")) {\n        // try to unzip using PHP\n        _error_log(\"unzipDirectory: TRY to use PHP {$filename}\");\n        $zip = zip_open($filename);\n        if ($zip) {\n            while ($zip_entry = zip_read($zip)) {\n                $path = \"{$destination}/\" . zip_entry_name($zip_entry);\n                //_error_log(\"unzipDirectory: fopen $path\");\n                if (substr(zip_entry_name($zip_entry), -1) == '/') {\n                    make_path($path);\n                } else {\n                    make_path($path);\n                    $fp = fopen($path, \"w\");\n                    if (zip_entry_open($zip, $zip_entry, \"r\")) {\n                        $buf = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));\n                        fwrite($fp, \"$buf\");\n                        zip_entry_close($zip_entry);\n                        fclose($fp);\n                    }\n                }\n            }\n            zip_close($zip);\n        } else {\n            _error_log(\"unzipDirectory: ERROR php zip does not work\");\n        }\n    } else {\n        _error_log(\"unzipDirectory: Success {$destination}\");\n    }\n    @unlink($filename);\n}\n\nfunction make_path($path) {\n    $created = false;\n    if (substr($path, -1) !== DIRECTORY_SEPARATOR) {\n        $path = pathinfo($path, PATHINFO_DIRNAME);\n    }\n    if (!is_dir($path)) {\n        //if(preg_match('/getvideoinfo/i', $path)){var_dump(debug_backtrace());}\n        if (preg_match('/cache/i', $path)) {\n            $mode = 0777;\n        } else {\n            $mode = 0755;\n        }\n        $created = mkdir($path, $mode, true);\n        /*\n          if (!$created) {\n          _error_log('make_path: could not create the dir ' . json_encode($path) . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n          }\n         */\n    } else {\n        $created = true;\n    }\n    return $created;\n}\n\n/**\n * for security clean all non secure files from directory\n * @param type $dir\n * @param type $allowedExtensions\n * @return type\n */\nfunction cleanDirectory($dir, $allowedExtensions = ['key', 'm3u8', 'ts', 'vtt', 'jpg', 'gif', 'mp3', 'webm', 'webp']) {\n    $ffs = scandir($dir);\n\n    unset($ffs[array_search('.', $ffs, true)]);\n    unset($ffs[array_search('..', $ffs, true)]);\n\n    // prevent empty ordered elements\n    if (count($ffs) < 1) {\n        return;\n    }\n\n    foreach ($ffs as $ff) {\n        $current = $dir . '/' . $ff;\n        if (is_dir($current)) {\n            cleanDirectory($current, $allowedExtensions);\n        }\n        $path_parts = pathinfo($current);\n        if (!empty($path_parts['extension']) && !in_array($path_parts['extension'], $allowedExtensions)) {\n            unlink($current);\n        }\n    }\n}\n\nfunction decideFile_put_contentsToVideos($tmp_name, $filename) {\n    global $global;\n    $aws_s3 = AVideoPlugin::loadPluginIfEnabled('AWS_S3');\n    $bb_b2 = AVideoPlugin::loadPluginIfEnabled('Blackblaze_B2');\n    $ftp = AVideoPlugin::loadPluginIfEnabled('FTP_Storage');\n    if (!empty($bb_b2)) {\n        $bb_b2->move_uploaded_file($tmp_name, $filename);\n    } elseif (!empty($aws_s3)) {\n        $aws_s3->move_uploaded_file($tmp_name, $filename);\n    } elseif (!empty($ftp)) {\n        $ftp->move_uploaded_file($tmp_name, $filename);\n    } else {\n        $path = Video::getPathToFile($filename);\n        if (!move_uploaded_file($tmp_name, $path)) {\n            $obj->msg = \"Error on move_uploaded_file({$tmp_name}, {$filename})\";\n            die(json_encode($obj));\n        }\n    }\n}\n\nfunction isAnyStorageEnabled() {\n    if ($yptStorage = AVideoPlugin::loadPluginIfEnabled(\"YPTStorage\")) {\n        return true;\n    } elseif ($aws_s3 = AVideoPlugin::loadPluginIfEnabled(\"AWS_S3\")) {\n        return true;\n    } elseif ($bb_b2 = AVideoPlugin::loadPluginIfEnabled(\"Blackblaze_B2\")) {\n        return true;\n    } elseif ($ftp = AVideoPlugin::loadPluginIfEnabled(\"FTP_Storage\")) {\n        return true;\n    }\n    return false;\n}\n\nif (!function_exists('mime_content_type')) {\n\n    function mime_content_type($filename) {\n        return mime_content_type_per_filename($filename);\n    }\n\n}\n\nfunction fontAwesomeClassName($filename) {\n    $mime_type = mime_content_type_per_filename($filename);\n    // List of official MIME Types: http://www.iana.org/assignments/media-types/media-types.xhtml\n    $icon_classes = [\n// Media\n        'image' => 'fas fa-file-image',\n        'audio' => 'fas fa-file-audio',\n        'video' => 'fas fa-file-video',\n        // Documents\n        'application/pdf' => 'fas fa-file-pdf',\n        'application/msword' => 'fas fa-file-word',\n        'application/vnd.ms-word' => 'fas fa-file-word',\n        'application/vnd.oasis.opendocument.text' => 'fas fa-file-word',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml' => 'fas fa-file-word',\n        'application/vnd.ms-excel' => 'fas fa-file-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml' => 'fas fa-file-excel',\n        'application/vnd.oasis.opendocument.spreadsheet' => 'fas fa-file-excel',\n        'application/vnd.ms-powerpoint' => 'fas fa-file-powerpoint',\n        'application/vnd.openxmlformats-officedocument.presentationml' => 'fas fa-file-powerpoint',\n        'application/vnd.oasis.opendocument.presentation' => 'fas fa-file-powerpoint',\n        'text/plain' => 'far fa-file-alt',\n        'text/html' => 'fas fa-code',\n        'application/json' => 'fas fa-code',\n        // Archives\n        'application/gzip' => 'far fa-file-archive',\n        'application/zip' => 'far fa-file-archive',\n    ];\n    foreach ($icon_classes as $text => $icon) {\n        if (strpos($mime_type, $text) === 0) {\n            return $icon;\n        }\n    }\n    return 'fas fa-file';\n}\n\nfunction mime_content_type_per_filename($filename) {\n    $mime_types = [\n        'txt' => 'text/plain',\n        'htm' => 'text/html',\n        'html' => 'text/html',\n        'php' => 'text/html',\n        'css' => 'text/css',\n        'js' => 'application/javascript',\n        'json' => 'application/json',\n        'xml' => 'application/xml',\n        'swf' => 'application/x-shockwave-flash',\n        'flv' => 'video/x-flv',\n        // images\n        'png' => 'image/png',\n        'jpe' => 'image/jpeg',\n        'jpeg' => 'image/jpeg',\n        'jpg' => 'image/jpeg',\n        'gif' => 'image/gif',\n        'bmp' => 'image/bmp',\n        'ico' => 'image/vnd.microsoft.icon',\n        'tiff' => 'image/tiff',\n        'tif' => 'image/tiff',\n        'svg' => 'image/svg+xml',\n        'svgz' => 'image/svg+xml',\n        // archives\n        'zip' => 'application/zip',\n        'rar' => 'application/x-rar-compressed',\n        'exe' => 'application/x-msdownload',\n        'msi' => 'application/x-msdownload',\n        'cab' => 'application/vnd.ms-cab-compressed',\n        // audio/video\n        'mp3' => 'audio/mpeg',\n        'qt' => 'video/quicktime',\n        'mov' => 'video/quicktime',\n        'mp4' => 'video/mp4',\n        'avi' => 'video/avi',\n        'mkv' => 'video/mkv',\n        'wav' => 'audio/wav',\n        'm4v' => 'video/mpeg',\n        'webm' => 'video/webm',\n        'wmv' => 'video/wmv',\n        'mpg' => 'video/mpeg',\n        'mpeg' => 'video/mpeg',\n        'f4v' => 'video/x-flv',\n        'm4v' => 'video/m4v',\n        'm4a' => 'video/quicktime',\n        'm2p' => 'video/quicktime',\n        'rm' => 'video/quicktime',\n        'vob' => 'video/quicktime',\n        'mkv' => 'video/quicktime',\n        '3gp' => 'video/quicktime',\n        'm3u8' => 'application/x-mpegURL',\n        // adobe\n        'pdf' => 'application/pdf',\n        'psd' => 'image/vnd.adobe.photoshop',\n        'ai' => 'application/postscript',\n        'eps' => 'application/postscript',\n        'ps' => 'application/postscript',\n        // ms office\n        'doc' => 'application/msword',\n        'rtf' => 'application/rtf',\n        'xls' => 'application/vnd.ms-excel',\n        'ppt' => 'application/vnd.ms-powerpoint',\n        // open office\n        'odt' => 'application/vnd.oasis.opendocument.text',\n        'ods' => 'application/vnd.oasis.opendocument.spreadsheet',\n    ];\n    if (filter_var($filename, FILTER_VALIDATE_URL) === false) {\n        $ext = pathinfo($filename, PATHINFO_EXTENSION);\n    } else {\n        $ext = pathinfo(parse_url($filename, PHP_URL_PATH), PATHINFO_EXTENSION);\n    }\n\n    if ($ext === 'mp4' || $ext === 'webm') {\n        $securePlugin = AVideoPlugin::loadPluginIfEnabled('SecureVideosDirectory');\n        if (!empty($securePlugin)) {\n            if (method_exists($securePlugin, \"useEncoderWatrermarkFromFileName\") && $securePlugin->useEncoderWatrermarkFromFileName($filename)) {\n                return \"application/x-mpegURL\";\n            }\n        }\n    }\n\n    if (array_key_exists($ext, $mime_types)) {\n        return $mime_types[$ext];\n    } elseif (function_exists('finfo_open')) {\n        $finfo = finfo_open(FILEINFO_MIME);\n        $mimetype = finfo_file($finfo, $filename);\n        finfo_close($finfo);\n        return $mimetype;\n    } else {\n        return 'application/octet-stream';\n    }\n}\n\nfunction combineFiles($filesArray, $extension = \"js\") {\n    global $global, $advancedCustom;\n\n    if ($extension == 'js' && isBot()) {\n        return getCDN() . 'view/js/empty.js';\n    }\n\n    $relativeDir = 'videos/cache/' . $extension . '/';\n    $cacheDir = $global['systemRootPath'] . $relativeDir;\n    $str = '';\n    $fileName = '';\n    foreach ($filesArray as $value) {\n        $fileName .= $value . filectime($global['systemRootPath'] . $value) . filemtime($global['systemRootPath'] . $value);\n    }\n    if ($advancedCustom !== false) {\n        $minifyEnabled = $advancedCustom->EnableMinifyJS;\n    } else {\n        $minifyEnabled = false;\n    }\n    // temporary disable minify\n    $minifyEnabled = false;\n\n    $md5FileName = md5($fileName) . \".{$extension}\";\n    if (!file_exists($cacheDir . $md5FileName)) {\n        foreach ($filesArray as $value) {\n            if (file_exists($global['systemRootPath'] . $value)) {\n                $str .= \"\\n/*{$value} created local with systemRootPath */\\n\" . local_get_contents($global['systemRootPath'] . $value);\n            } elseif (file_exists($value)) {\n                $str .= \"\\n/*{$value} created local with full-path given */\\n\" . local_get_contents($value);\n            } else {\n                $allowed = '';\n                if (ini_get('allow_url_fopen')) {\n                    $allowed .= \"allow_url_fopen is on and \";\n                }\n                if (function_exists('curl_init')) {\n                    $allowed .= \"curl is on\";\n                } else {\n                    $allowed .= \"curl is off\";\n                }\n\n                $content = url_get_contents($value);\n                if (empty($content)) {\n                    $allowed .= \" - web-fallback 1 (add webSiteRootURL)\";\n                    $content = url_get_contents($global['webSiteRootURL'] . $value);\n                }\n                $str .= \"\\n/*{$value} created via web with own url ({$allowed}) */\\n\" . $content;\n            }\n        }\n        //if ((($extension == \"js\" || $extension == \"css\") && ($minifyEnabled))) {\n        if ($extension == \"css\" && ($minifyEnabled)) {\n            require_once $global['systemRootPath'] . 'objects/jshrink.php';\n            $str = \\JShrink\\Minifier::minify($str, ['flaggedComments' => false]);\n        }\n        if (!is_dir($cacheDir)) {\n            make_path($cacheDir);\n        }\n        $bytes = _file_put_contents($cacheDir . $md5FileName, $str);\n        if (empty($bytes)) {\n            _error_log('combineFiles: error on save strlen=' . strlen($str) . ' ' . $cacheDir . $md5FileName . ' cacheDir=' . $cacheDir);\n            return false;\n        }\n    }\n\n    return getURL($relativeDir . $md5FileName);\n}\n\nfunction combineFilesHTML($filesArray, $extension = \"js\", $doNotCombine = false) {\n    if (empty($doNotCombine)) {\n        $jsURL = combineFiles($filesArray, $extension);\n    }\n    if ($extension == \"js\") {\n        if (empty($jsURL)) {\n            $str = '';\n            foreach ($filesArray as $value) {\n                $jsURL = getURL($value);\n                $str .= '<script src=\"' . $jsURL . '\" type=\"text/javascript\"></script>';\n            }\n            return $str;\n        } else {\n            return '<script src=\"' . $jsURL . '\" type=\"text/javascript\"></script>';\n        }\n    } else {\n        if (empty($jsURL)) {\n            $str = '';\n            foreach ($filesArray as $value) {\n                $jsURL = getURL($value);\n                $str .= '<link href=\"' . $jsURL . '\" rel=\"stylesheet\" type=\"text/css\"/>';\n            }\n            return $str;\n        } else {\n            return '<link href=\"' . $jsURL . '\" rel=\"stylesheet\" type=\"text/css\"/>';\n        }\n    }\n}\n\nfunction local_get_contents($path) {\n    if (function_exists('fopen')) {\n        $myfile = fopen($path, \"r\") or die(\"Unable to open file! [{$path}]\");\n        $text = fread($myfile, filesize($path));\n        fclose($myfile);\n        return $text;\n    }\n}\n\nfunction getSelfUserAgent() {\n    global $global, $AVideoStreamer_UA;\n    $agent = $AVideoStreamer_UA . \"_\";\n    $agent .= md5($global['salt']);\n    return $agent;\n}\n\nfunction isValidM3U8Link($url, $timeout = 3) {\n    if (!isValidURL($url)) {\n        return false;\n    }\n    $content = url_get_contents($url, '', $timeout);\n    if (!empty($content)) {\n        if (preg_match('/EXTM3U/', $content)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction url_get_contents($url, $ctx = \"\", $timeout = 0, $debug = false) {\n    global $global, $mysqlHost, $mysqlUser, $mysqlPass, $mysqlDatabase, $mysqlPort;\n    if ($debug) {\n        _error_log(\"url_get_contents: Start $url, $ctx, $timeout \" . getSelfURI() . \" \" . getRealIpAddr() . \" \" . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n    }\n    $agent = getSelfUserAgent();\n\n    if (empty($ctx)) {\n        $opts = [\n            'http' => ['header' => \"User-Agent: {$agent}\\r\\n\"],\n            \"ssl\" => [\n                \"verify_peer\" => false,\n                \"verify_peer_name\" => false,\n                \"allow_self_signed\" => true,\n            ],\n        ];\n        if (!empty($timeout)) {\n            ini_set('default_socket_timeout', $timeout);\n            $opts['http'] = ['timeout' => $timeout];\n        }\n        $context = stream_context_create($opts);\n    } else {\n        $context = $ctx;\n    }\n    if (ini_get('allow_url_fopen')) {\n        if ($debug) {\n            _error_log(\"url_get_contents: allow_url_fopen {$url}\");\n        }\n        try {\n            $tmp = @file_get_contents($url, false, $context);\n            if ($tmp !== false) {\n                $response = remove_utf8_bom($tmp);\n                if ($debug) {\n                    //_error_log(\"url_get_contents: SUCCESS file_get_contents($url) {$response}\");\n                    _error_log(\"url_get_contents: SUCCESS file_get_contents($url)\");\n                }\n                return $response;\n            }\n            if ($debug) {\n                _error_log(\"url_get_contents: ERROR file_get_contents($url) \");\n            }\n        } catch (ErrorException $e) {\n            if ($debug) {\n                _error_log(\"url_get_contents: allow_url_fopen ERROR \" . $e->getMessage() . \"  {$url}\");\n            }\n            return \"url_get_contents: \" . $e->getMessage();\n        }\n    } elseif (function_exists('curl_init')) {\n        if ($debug) {\n            _error_log(\"url_get_contents: CURL  {$url} \");\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_USERAGENT, $agent);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        if (!empty($timeout)) {\n            curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout + 10);\n        }\n        $output = curl_exec($ch);\n        curl_close($ch);\n        if ($debug) {\n            _error_log(\"url_get_contents: CURL SUCCESS {$url}\");\n        }\n        return remove_utf8_bom($output);\n    }\n    if ($debug) {\n        _error_log(\"url_get_contents: Nothing yet  {$url}\");\n    }\n\n    // try wget\n    $filename = getTmpDir(\"YPTurl_get_contents\") . md5($url);\n    if ($debug) {\n        _error_log(\"url_get_contents: try wget $filename {$url}\");\n    }\n    if (wget($url, $filename, $debug)) {\n        if ($debug) {\n            _error_log(\"url_get_contents: wget success {$url} \");\n        }\n        $result = file_get_contents($filename);\n        unlink($filename);\n        if (!empty($result)) {\n            return remove_utf8_bom($result);\n        }\n    } elseif ($debug) {\n        _error_log(\"url_get_contents: try wget fail {$url}\");\n    }\n\n    return false;\n}\n\nfunction getUpdatesFilesArray() {\n    global $config, $global;\n    if (!class_exists('User') || !User::isAdmin()) {\n        return [];\n    }\n    $files1 = scandir($global['systemRootPath'] . \"updatedb\");\n    $updateFiles = [];\n    foreach ($files1 as $value) {\n        preg_match(\"/updateDb.v([0-9.]*).sql/\", $value, $match);\n        if (!empty($match)) {\n            if ($config->currentVersionLowerThen($match[1])) {\n                $updateFiles[] = ['filename' => $match[0], 'version' => $match[1]];\n            }\n        }\n    }\n    usort($updateFiles, function($a, $b) {\n        return version_compare($a['version'], $b['version']);\n    });\n    return $updateFiles;\n}\n\nfunction thereIsAnyUpdate() {\n    if (!User::isAdmin()) {\n        return false;\n    }\n    $name = 'thereIsAnyUpdate';\n    if (!isset($_SESSION['sessionCache'][$name])) {\n        $files = getUpdatesFilesArray();\n        if (!empty($files)) {\n            _session_start();\n            $_SESSION['sessionCache'][$name] = $files;\n        }\n    }\n    return @$_SESSION['sessionCache'][$name];\n}\n\nfunction thereIsAnyRemoteUpdate() {\n    if (!User::isAdmin()) {\n        return false;\n    }\n    global $config;\n\n    $cacheName = '_thereIsAnyRemoteUpdate';\n    $cache = ObjectYPT::getCache($cacheName, 86400); // 24 hours\n    if (!empty($cache)) {\n        return $cache;\n    }\n\n    $version = _json_decode(url_get_contents(\"https://tutorials.wwbn.net/version\"));\n    //$version = _json_decode(url_get_contents(\"https://tutorialsavideo.b-cdn.net/version\", \"\", 4));\n    if (empty($version)) {\n        return false;\n    }\n    $name = 'thereIsAnyRemoteUpdate';\n    if (!isset($_SESSION['sessionCache'][$name])) {\n        if (!empty($version)) {\n            _session_start();\n            if (version_compare($config->getVersion(), $version->version) === -1) {\n                $_SESSION['sessionCache'][$name] = $version;\n            } else {\n                $_SESSION['sessionCache'][$name] = false;\n            }\n        }\n    }\n    ObjectYPT::setCache($cacheName, $_SESSION['sessionCache'][$name]);\n    return $_SESSION['sessionCache'][$name];\n}\n\nfunction UTF8encode($data) {\n    global $advancedCustom, $global;\n\n    if (!empty($advancedCustom->utf8Encode)) {\n        return utf8_encode($data);\n    }\n    if (!empty($advancedCustom->utf8Decode)) {\n        return utf8_decode($data);\n    }\n    return $data;\n}\n\n//detect search engine bots\nfunction isBot() {\n    global $_isBot;\n    if (empty($_SERVER['HTTP_USER_AGENT'])) {\n        return true;\n    }\n    if (isAVideoEncoder()) {\n        return false;\n    }\n    if (isset($_isBot)) {\n        return $_isBot;\n    }\n    $_isBot = false;\n    // User lowercase string for comparison.\n    $user_agent = strtolower($_SERVER['HTTP_USER_AGENT']);\n    // A list of some common words used only for bots and crawlers.\n    $bot_identifiers = [\n        'bot',\n        'slurp',\n        'crawler',\n        'spider',\n        'curl',\n        'facebook',\n        'fetch',\n        'loader',\n        'lighthouse',\n        'pingdom',\n        'gtmetrix',\n        'ptst',\n        'dmbrowser',\n        'dareboost',\n    ];\n    // See if one of the identifiers is in the UA string.\n    foreach ($bot_identifiers as $identifier) {\n        if (stripos($user_agent, $identifier) !== false) {\n            $_isBot = true;\n            break;\n        }\n    }\n    return $_isBot;\n}\n\n/**\n * A function that could get me the last N lines of a log file.\n * @param type $filepath\n * @param type $lines\n * @param type $adaptive\n * @return boolean\n */\nfunction tail($filepath, $lines = 1, $adaptive = true, $returnArray = false) {\n    if (!function_exists('mb_strlen')) {\n        $msg = \"AVideoLog::ERROR you need to install the mb_strlen function to make it work, please the command 'sudo apt install php-mbstring'\";\n        if ($returnArray) {\n            return [[$msg]];\n        } else {\n            return $msg;\n        }\n    }\n    // Open file\n    $f = @fopen($filepath, \"rb\");\n    if ($f === false) {\n        return false;\n    }\n\n    // Sets buffer size, according to the number of lines to retrieve.\n    // This gives a performance boost when reading a few lines from the file.\n    if (!$adaptive) {\n        $buffer = 4096;\n    } else {\n        $buffer = ($lines < 2 ? 64 : ($lines < 10 ? 512 : 4096));\n    }\n\n    // Jump to last character\n    fseek($f, -1, SEEK_END);\n    // Read it and adjust line number if necessary\n    // (Otherwise the result would be wrong if file doesn't end with a blank line)\n    if (fread($f, 1) !== \"\\n\") {\n        $lines -= 1;\n    }\n\n    // Start reading\n    $output = '';\n    $chunk = '';\n    // While we would like more\n    while (ftell($f) > 0 && $lines >= 0) {\n        // Figure out how far back we should jump\n        $seek = min(ftell($f), $buffer);\n        // Do the jump (backwards, relative to where we are)\n        fseek($f, -$seek, SEEK_CUR);\n        // Read a chunk and prepend it to our output\n        $output = ($chunk = fread($f, $seek)) . $output;\n        // Jump back to where we started reading\n        fseek($f, -mb_strlen($chunk, '8bit'), SEEK_CUR);\n        // Decrease our line counter\n        $lines -= substr_count($chunk, \"\\n\");\n    }\n    // While we have too many lines\n    // (Because of buffer size we might have read too many)\n    while ($lines++ < 0) {\n        // Find first newline and remove all text before that\n        $output = substr($output, strpos($output, \"\\n\") + 1);\n    }\n    // Close file and return\n    fclose($f);\n    $output = trim($output);\n    if ($returnArray) {\n        $array = explode(\"\\n\", $output);\n        $newArray = [];\n        foreach ($array as $value) {\n            $newArray[] = [$value];\n        }\n        return $newArray;\n    } else {\n        return $output;\n    }\n}\n\nfunction encryptPassword($password, $noSalt = false) {\n    global $advancedCustom, $global, $advancedCustomUser;\n    if (!empty($advancedCustomUser->encryptPasswordsWithSalt) && !empty($global['salt']) && empty($noSalt)) {\n        $password .= $global['salt'];\n    }\n\n    return md5(hash(\"whirlpool\", sha1($password)));\n}\n\nfunction encryptPasswordVerify($password, $hash, $encodedPass = false) {\n    global $advancedCustom, $global;\n    if (!$encodedPass || $encodedPass === 'false') {\n        //_error_log(\"encryptPasswordVerify: encrypt\");\n        $passwordSalted = encryptPassword($password);\n        // in case you enable the salt later\n        $passwordUnSalted = encryptPassword($password, true);\n    } else {\n        //_error_log(\"encryptPasswordVerify: do not encrypt\");\n        $passwordSalted = $password;\n        // in case you enable the salt later\n        $passwordUnSalted = $password;\n    }\n    //_error_log(\"passwordSalted = $passwordSalted,  hash=$hash, passwordUnSalted=$passwordUnSalted\");\n    return $passwordSalted === $hash || $passwordUnSalted === $hash || $password === $hash;\n}\n\nfunction encryptPasswordV2($uniqueSalt, $password, $noSalt = false) {\n    global $advancedCustom, $global, $advancedCustomUser;\n    if (!empty($advancedCustomUser->encryptPasswordsWithSalt) && !empty($global['salt']) && empty($noSalt)) {\n        $password .= $global['salt'];\n    }\n    $password .= md5($uniqueSalt);\n    return md5(hash(\"whirlpool\", sha1($password)));\n}\n\nfunction encryptPasswordVerifyV2($uniqueSalt, $password, $hash, $encodedPass = false) {\n    global $advancedCustom, $global;\n    if (!$encodedPass || $encodedPass === 'false') {\n        //_error_log(\"encryptPasswordVerify: encrypt\");\n        $passwordSalted = encryptPasswordV2($uniqueSalt, $password);\n        // in case you enable the salt later\n        $passwordUnSalted = encryptPasswordV2($uniqueSalt, $password, true);\n    } else {\n        //_error_log(\"encryptPasswordVerify: do not encrypt\");\n        $passwordSalted = $password;\n        // in case you enable the salt later\n        $passwordUnSalted = $password;\n    }\n    //_error_log(\"passwordSalted = $passwordSalted,  hash=$hash, passwordUnSalted=$passwordUnSalted\");\n    return $passwordSalted === $hash || $passwordUnSalted === $hash || $password === $hash;\n}\n\nfunction isMobile($userAgent = null, $httpHeaders = null) {\n    if (empty($userAgent) && empty($_SERVER[\"HTTP_USER_AGENT\"])) {\n        return false;\n    }\n    global $global;\n    require_once $global['systemRootPath'] . 'objects/Mobile_Detect.php';\n    $detect = new Mobile_Detect();\n\n    return $detect->isMobile($userAgent, $httpHeaders);\n}\n\nfunction isChannelPage() {\n    return strpos($_SERVER[\"SCRIPT_NAME\"], 'view/channel.php') !== false;\n}\n\nfunction isAVideoMobileApp($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoMobileAPP_UA;\n    if (preg_match(\"/{$AVideoMobileAPP_UA}(.*)/\", $_SERVER[\"HTTP_USER_AGENT\"], $match)) {\n        $url = trim($match[1]);\n        if (!empty($url)) {\n            return $url;\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction isAVideoEncoder($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoEncoder_UA;\n    if (preg_match(\"/{$AVideoEncoder_UA}(.*)/\", $_SERVER[\"HTTP_USER_AGENT\"], $match)) {\n        $url = trim($match[1]);\n        if (!empty($url)) {\n            return $url;\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction isCDN() {\n    if (empty($_SERVER['HTTP_CDN_HOST'])) {\n        return false;\n    }\n    return isFromCDN($_SERVER['HTTP_CDN_HOST']);\n}\n\nfunction isFromCDN($url) {\n    if (preg_match('/cdn.ypt.me/i', $url)) {\n        return true;\n    }\n    return false;\n}\n\nfunction isAVideo($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoEncoder_UA;\n    if (preg_match(\"/AVideo(.*)/\", $_SERVER[\"HTTP_USER_AGENT\"], $match)) {\n        $url = trim($match[1]);\n        if (!empty($url)) {\n            return $url;\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction isAVideoEncoderOnSameDomain() {\n    $url = isAVideoEncoder();\n    if (empty($url)) {\n        return false;\n    }\n    $url = \"http://{$url}\";\n    return isSameDomainAsMyAVideo($url);\n}\n\nfunction isSameDomainAsMyAVideo($url) {\n    global $global;\n    if (empty($url)) {\n        return false;\n    }\n    return isSameDomain($url, $global['webSiteRootURL']) || isSameDomain($url, getCDN());\n}\n\nfunction requestComesFromSameDomainAsMyAVideo() {\n    global $global;\n    $url = '';\n    if (!empty($_SERVER['HTTP_REFERER'])) {\n        $url = $_SERVER['HTTP_REFERER'];\n    } elseif (!empty($_SERVER['HTTP_ORIGIN'])) {\n        $url = $_SERVER['HTTP_ORIGIN'];\n    }\n    //_error_log(\"requestComesFromSameDomainAsMyAVideo: ({$url}) == ({$global['webSiteRootURL']})\");\n    return isSameDomain($url, $global['webSiteRootURL']) || isSameDomain($url, getCDN()) || isFromCDN($url);\n}\n\nfunction requestComesFromSafePlace() {\n    return (requestComesFromSameDomainAsMyAVideo() || isAVideo());\n}\n\nfunction addGlobalTokenIfSameDomain($url) {\n    if (!filter_var($url, FILTER_VALIDATE_URL) || (empty($_GET['livelink']) || !preg_match(\"/^http.*/i\", $_GET['livelink']))) {\n        return $url;\n    }\n    if (!isSameDomainAsMyAVideo($url)) {\n        return $url;\n    }\n    return addQueryStringParameter($url, 'globalToken', getToken(60));\n}\n\n/**\n * Remove a query string parameter from an URL.\n *\n * @param string $url\n * @param string $varname\n *\n * @return string\n */\nfunction removeQueryStringParameter($url, $varname) {\n    $parsedUrl = parse_url($url);\n    $query = [];\n\n    if (isset($parsedUrl['query'])) {\n        parse_str($parsedUrl['query'], $query);\n        unset($query[$varname]);\n    }\n\n    $path = $parsedUrl['path'] ?? '';\n    $query = !empty($query) ? '?' . http_build_query($query) : '';\n\n    if (empty($parsedUrl['scheme'])) {\n        $scheme = '';\n    } else {\n        $scheme = \"{$parsedUrl['scheme']}:\";\n    }\n    return $scheme . '//' . $parsedUrl['host'] . $path . $query;\n}\n\n/**\n * Add a query string parameter from an URL.\n *\n * @param string $url\n * @param string $varname\n *\n * @return string\n */\nfunction addQueryStringParameter($url, $varname, $value) {\n    $parsedUrl = parse_url($url);\n    if (empty($parsedUrl['host'])) {\n        return \"\";\n    }\n    $query = [];\n\n    if (isset($parsedUrl['query'])) {\n        parse_str($parsedUrl['query'], $query);\n    }\n    $query[$varname] = $value;\n    $path = $parsedUrl['path'] ?? '';\n    $query = !empty($query) ? '?' . http_build_query($query) : '';\n\n    $port = '';\n    if (!empty($parsedUrl['port']) && $parsedUrl['port'] != '80') {\n        $port = \":{$parsedUrl['port']}\";\n    }\n\n    if (empty($parsedUrl['scheme'])) {\n        $scheme = '';\n    } else {\n        $scheme = \"{$parsedUrl['scheme']}:\";\n    }\n    return $scheme . '//' . $parsedUrl['host'] . $port . $path . $query;\n}\n\nfunction isSameDomain($url1, $url2) {\n    if (empty($url1) || empty($url2)) {\n        return false;\n    }\n    return (get_domain($url1) === get_domain($url2));\n}\n\nfunction isAVideoStreamer($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoStreamer_UA, $global;\n    $md5 = md5($global['salt']);\n    if (preg_match(\"/{$AVideoStreamer_UA}_{$md5}/\", $_SERVER[\"HTTP_USER_AGENT\"])) {\n        return true;\n    }\n    return false;\n}\n\nfunction isAVideoUserAgent($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoMobileAPP_UA, $AVideoEncoder_UA, $AVideoStreamer_UA, $AVideoStorage_UA, $global;\n\n    // Lavf = ffmpeg\n    $agents = [$AVideoMobileAPP_UA, $AVideoEncoder_UA, $AVideoStreamer_UA, $AVideoStorage_UA, 'Lavf'];\n\n    foreach ($agents as $value) {\n        if (preg_match(\"/{$value}/\", $_SERVER[\"HTTP_USER_AGENT\"])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isAVideoStorage($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoStorage_UA;\n    if (preg_match(\"/{$AVideoStorage_UA}(.*)/\", $_SERVER[\"HTTP_USER_AGENT\"], $match)) {\n        $url = trim($match[1]);\n        if (!empty($url)) {\n            return $url;\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction get_domain($url, $ifEmptyReturnSameString = false) {\n    $pieces = parse_url($url);\n    $domain = $pieces['host'] ?? '';\n    if (empty($domain)) {\n        return $ifEmptyReturnSameString ? $url : false;\n    }\n    if (preg_match('/(?P<domain>[a-z0-9][a-z0-9\\-]{1,63}\\.[a-z\\.]{2,6})$/i', $domain, $regs)) {\n        return $regs['domain'];\n    } else {\n        $isIp = (bool) ip2long($pieces['host']);\n        if ($isIp) {\n            return $pieces['host'];\n        }\n    }\n    return false;\n}\n\nfunction verify($url) {\n    ini_set('default_socket_timeout', 5);\n    $cacheFile = sys_get_temp_dir() . '/' . md5($url) . \"_verify.log\";\n    $lifetime = 86400; //24 hours\n    error_log(\"Verification Start {$url}\");\n    $verifyURL = \"https://search.ypt.me/verify.php\";\n    $verifyURL = addQueryStringParameter($verifyURL, 'url', $global['webSiteRootURL']);\n    $verifyURL = addQueryStringParameter($verifyURL, 'screenshot', 1);\n    if (!file_exists($cacheFile) || (time() > (filemtime($cacheFile) + $lifetime))) {\n        error_log(\"Verification Creating the Cache {$url}\");\n        $result = url_get_contents($verifyURL, '', 5);\n        file_put_contents($cacheFile, $result);\n    } else {\n        error_log(\"Verification GetFrom Cache {$url}\");\n        $result = file_get_contents($cacheFile);\n    }\n    error_log(\"Verification Response ($verifyURL): {$result}\");\n    return json_decode($result);\n}\n\nfunction isVerified($url) {\n    $resultV = verify($url);\n    if (!empty($resultV) && !$resultV->verified) {\n        error_log(\"Error on Login not verified\");\n        return false;\n    }\n    return true;\n}\n\nfunction siteMap() {\n    _error_log(\"siteMap: start\");\n    ini_set('memory_limit', '-1');\n    ini_set('max_execution_time', 0);\n    @session_write_close();\n    global $global, $advancedCustom;\n    $global['disableVideoTags'] = 1;\n    $date = date('Y-m-d\\TH:i:s') . \"+00:00\";\n    $xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\n        http://www.w3.org/1999/xhtml http://www.w3.org/2002/08/xhtml/xhtml1-strict.xsd\"\n        xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"\n        xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n        xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n        <!-- Main Page -->\n        <url>\n            <loc>' . $global['webSiteRootURL'] . '</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>always</changefreq>\n            <priority>1.00</priority>\n        </url>\n\n        <url>\n            <loc>' . $global['webSiteRootURL'] . 'help</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>monthly</changefreq>\n            <priority>0.50</priority>\n        </url>\n        <url>\n            <loc>' . $global['webSiteRootURL'] . 'about</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>monthly</changefreq>\n            <priority>0.50</priority>\n        </url>\n        <url>\n            <loc>' . $global['webSiteRootURL'] . 'contact</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>monthly</changefreq>\n            <priority>0.50</priority>\n        </url>\n\n        <!-- Channels -->\n        <url>\n            <loc>' . $global['webSiteRootURL'] . 'channels</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>daily</changefreq>\n            <priority>0.80</priority>\n        </url>\n        ';\n\n    $_REQUEST['rowCount'] = $advancedCustom->siteMapRowsLimit;\n    _error_log(\"siteMap: rowCount {$_REQUEST['rowCount']} \");\n    $_POST['sort']['modified'] = \"DESC\";\n    TimeLogStart(\"siteMap getAllUsersThatHasVideos\");\n    $users = User::getAllUsersThatHasVideos(true);\n    _error_log(\"siteMap: getAllUsers \" . count($users));\n    foreach ($users as $value) {\n        $xml .= '\n            <url>\n                <loc>' . User::getChannelLink($value['id']) . '</loc>\n                <lastmod>' . $date . '</lastmod>\n                <changefreq>daily</changefreq>\n                <priority>0.90</priority>\n            </url>\n            ';\n    }\n    TimeLogEnd(\"siteMap getAllUsersThatHasVideos\", __LINE__, 0.5);\n    TimeLogStart(\"siteMap getAllCategories\");\n    $xml .= '\n        <!-- Categories -->\n        ';\n    $_REQUEST['rowCount'] = $advancedCustom->siteMapRowsLimit;\n    $_POST['sort']['modified'] = \"DESC\";\n    $rows = Category::getAllCategories();\n    _error_log(\"siteMap: getAllCategories \" . count($rows));\n    foreach ($rows as $value) {\n        $xml .= '\n            <url>\n                <loc>' . $global['webSiteRootURL'] . 'cat/' . $value['clean_name'] . '</loc>\n                <lastmod>' . $date . '</lastmod>\n                <changefreq>weekly</changefreq>\n                <priority>0.80</priority>\n            </url>\n            ';\n    }\n    TimeLogEnd(\"siteMap getAllCategories\", __LINE__, 0.5);\n    TimeLogStart(\"siteMap getAllVideos\");\n    $xml .= '<!-- Videos -->';\n    $_REQUEST['rowCount'] = $advancedCustom->siteMapRowsLimit * 10;\n    $_POST['sort']['created'] = \"DESC\";\n    $rows = Video::getAllVideos(!empty($advancedCustom->showPrivateVideosOnSitemap) ? \"viewableNotUnlisted\" : \"publicOnly\");\n    _error_log(\"siteMap: getAllVideos \" . count($rows));\n    foreach ($rows as $video) {\n        $videos_id = $video['id'];\n\n        TimeLogStart(\"siteMap Video::getPoster $videos_id\");\n        $img = Video::getPoster($videos_id);\n        TimeLogEnd(\"siteMap Video::getPoster $videos_id\", __LINE__, 0.5);\n\n        $description = str_replace(['\"', \"\\n\", \"\\r\"], ['', ' ', ' '], empty(trim($video['description'])) ? $video['title'] : $video['description']);\n        $duration = parseDurationToSeconds($video['duration']);\n        if ($duration > 28800) {\n            // this is because this issue https://github.com/WWBN/AVideo/issues/3338 remove in the future if is not necessary anymore\n            $duration = 28800;\n        }\n\n        TimeLogStart(\"siteMap Video::getLink $videos_id\");\n        $loc = Video::getLink($video['id'], $video['clean_title']);\n        TimeLogEnd(\"siteMap Video::getLink $videos_id\", __LINE__, 0.5);\n        $title = strip_tags($video['title']);\n        $description = _substr(strip_tags(br2nl($description)), 0, 2048);\n        TimeLogStart(\"siteMap Video::getLinkToVideo $videos_id\");\n        $player_loc = Video::getLinkToVideo($video['id'], $video['clean_title'], true);\n        TimeLogEnd(\"siteMap Video::getLinkToVideo $videos_id\", __LINE__, 0.5);\n        TimeLogStart(\"siteMap Video::isPublic $videos_id\");\n        $requires_subscription = Video::isPublic($video['id']) ? \"no\" : \"yes\";\n        TimeLogEnd(\"siteMap Video::isPublic $videos_id\", __LINE__, 0.5);\n        TimeLogStart(\"siteMap Video::getChannelLink $videos_id\");\n        $uploader_info = User::getChannelLink($video['users_id']);\n        TimeLogEnd(\"siteMap Video::getChannelLink $videos_id\", __LINE__, 0.5);\n        TimeLogStart(\"siteMap Video::getNameIdentificationById $videos_id\");\n        $uploader = htmlentities(User::getNameIdentificationById($video['users_id']));\n        TimeLogEnd(\"siteMap Video::getNameIdentificationById $videos_id\", __LINE__, 0.5);\n\n        $xml .= '\n            <url>\n                <loc>' . $loc . '</loc>\n                <video:video>\n                    <video:thumbnail_loc>' . $img . '</video:thumbnail_loc>\n                    <video:title><![CDATA[' . $title . ']]></video:title>\n                    <video:description><![CDATA[' . $description . ']]></video:description>\n                    <video:player_loc><![CDATA[' . $player_loc . ']]></video:player_loc>\n                    <video:duration>' . $duration . '</video:duration>\n                    <video:view_count>' . $video['views_count'] . '</video:view_count>\n                    <video:publication_date>' . date(\"Y-m-d\\TH:i:s\", strtotime($video['created'])) . '+00:00</video:publication_date>\n                    <video:family_friendly>yes</video:family_friendly>\n                    <video:requires_subscription>' . $requires_subscription . '</video:requires_subscription>\n                    <video:uploader info=\"' . $uploader_info . '\">' . $uploader . '</video:uploader>\n                    <video:live>no</video:live>\n                </video:video>\n            </url>\n            ';\n    }\n    TimeLogEnd(\"siteMap getAllVideos\", __LINE__, 0.5);\n    $xml .= '</urlset> ';\n    _error_log(\"siteMap: done \");\n    $newXML1 = preg_replace('/[^\\x{0009}\\x{000a}\\x{000d}\\x{0020}-\\x{D7FF}\\x{E000}-\\x{FFFD}]+/u', '', $xml);\n    if (empty($newXML1)) {\n        _error_log(\"siteMap: pregreplace1 fail \");\n        $newXML1 = $xml;\n    }\n    if (!empty($advancedCustom->siteMapUTF8Fix)) {\n        $newXML2 = preg_replace('/&(?!#?[a-z0-9]+;)/', '&amp;', $newXML1);\n        if (empty($newXML2)) {\n            _error_log(\"siteMap: pregreplace2 fail \");\n            $newXML2 = $newXML1;\n        }\n        $newXML3 = preg_replace('/[\\x00-\\x1F\\x7F-\\xFF]/', '', $newXML2);\n        if (empty($newXML3)) {\n            _error_log(\"siteMap: pregreplace3 fail \");\n            $newXML3 = $newXML2;\n        }\n        $newXML4 = preg_replace('/[\\x00-\\x1F\\x7F]/', '', $newXML3);\n        if (empty($newXML4)) {\n            _error_log(\"siteMap: pregreplace4 fail \");\n            $newXML4 = $newXML3;\n        }\n        $newXML5 = preg_replace('/[\\x00-\\x1F\\x7F\\xA0]/u', '', $newXML4);\n        if (empty($newXML5)) {\n            _error_log(\"siteMap: pregreplace5 fail \");\n            $newXML5 = $newXML4;\n        }\n    } else {\n        $newXML5 = $newXML1;\n    }\n    return $newXML5;\n}\n\nfunction object_to_array($obj) {\n    //only process if it's an object or array being passed to the function\n    if (is_object($obj) || is_array($obj)) {\n        $ret = (array) $obj;\n        foreach ($ret as &$item) {\n            //recursively process EACH element regardless of type\n            $item = object_to_array($item);\n        }\n        return $ret;\n    }\n    //otherwise (i.e. for scalar values) return without modification\n    else {\n        return $obj;\n    }\n}\n\nfunction allowOrigin() {\n    global $global;\n    cleanUpAccessControlHeader();\n    if (empty($_SERVER['HTTP_ORIGIN'])) {\n        $server = parse_url($global['webSiteRootURL']);\n        header('Access-Control-Allow-Origin: ' . $server[\"scheme\"] . '://imasdk.googleapis.com');\n    } else {\n        header(\"Access-Control-Allow-Origin: \" . $_SERVER['HTTP_ORIGIN']);\n    }\n    header(\"Access-Control-Allow-Credentials: true\");\n    header(\"Access-Control-Allow-Methods: GET,HEAD,OPTIONS,POST,PUT\");\n    header(\"Access-Control-Allow-Headers: Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers\");\n}\n\nfunction cleanUpAccessControlHeader() {\n    if (!headers_sent()) {\n        foreach (headers_list() as $header) {\n            if (preg_match('/Access-Control-Allow-Origin/i', $header)) {\n                $parts = explode(':', $header);\n                header_remove($parts[0]);\n            }\n        }\n    }\n}\n\nfunction rrmdir($dir) {\n    //if(preg_match('/cache/i', $dir)){_error_log(\"rrmdir($dir) \". json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));exit;}\n\n    $dir = str_replace(['//', '\\\\\\\\'], DIRECTORY_SEPARATOR, $dir);\n    //_error_log('rrmdir: ' . $dir);\n    if (empty($dir)) {\n        _error_log('rrmdir: the dir was empty');\n        return false;\n    }\n    global $global;\n    $dir = fixPath($dir);\n    $pattern = '/' . addcslashes($dir, DIRECTORY_SEPARATOR) . 'videos[\\/\\\\\\]?$/i';\n    if ($dir == getVideosDir() || $dir == \"{$global['systemRootPath']}videos\" . DIRECTORY_SEPARATOR || preg_match($pattern, $dir)) {\n        _error_log('rrmdir: A script ties to delete the videos Directory [' . $dir . '] ' . json_encode([$dir == getVideosDir(), $dir == \"{$global['systemRootPath']}videos\" . DIRECTORY_SEPARATOR, preg_match($pattern, $dir)]));\n        return false;\n    }\n    rrmdirCommandLine($dir);\n    if (is_dir($dir)) {\n        //_error_log('rrmdir: The Directory was not deleted, trying again ' . $dir);\n        $objects = scandir($dir);\n        //_error_log('rrmdir: scandir ' . $dir . ' '. json_encode($objects));\n        foreach ($objects as $object) {\n            if ($object !== '.' && $object !== '..') {\n                if (is_dir($dir . DIRECTORY_SEPARATOR . $object)) {\n                    rrmdir($dir . DIRECTORY_SEPARATOR . $object);\n                } else {\n                    unlink($dir . DIRECTORY_SEPARATOR . $object);\n                }\n            }\n        }\n        if (preg_match('/(\\/|^)videos(\\/cache)?\\/?$/i', $dir)) {\n            _error_log('rrmdir: do not delete videos or cache folder ' . $dir);\n            // do not delete videos or cache folder\n            return false;\n        }\n        if (rmdir($dir)) {\n            return true;\n        } else {\n            _error_log('rrmdir: could not delete folder ' . $dir);\n            return false;\n        }\n    } else {\n        //_error_log('rrmdir: The Directory does not exists '.$dir);\n        return true;\n    }\n}\n\nfunction rrmdirCommandLine($dir, $async = false) {\n    if (is_dir($dir)) {\n        if (isWindows()) {\n            $command = ('rd /s /q ' . $dir);\n        } else {\n            $command = ('rm -fR ' . $dir);\n        }\n\n        if ($async) {\n            return execAsync($command);\n        } else {\n            return exec($command);\n        }\n    }\n}\n\n/**\n * You can now configure it on the configuration.php\n * @return boolean\n */\nfunction ddosProtection() {\n    global $global;\n    $maxCon = empty($global['ddosMaxConnections']) ? 40 : $global['ddosMaxConnections'];\n    $secondTimeout = empty($global['ddosSecondTimeout']) ? 5 : $global['ddosSecondTimeout'];\n    $whitelistedFiles = [\n        'playlists.json.php',\n        'playlistsFromUserVideos.json.php',\n        'image404.php',\n    ];\n\n    if (in_array(basename($_SERVER[\"SCRIPT_FILENAME\"]), $whitelistedFiles)) {\n        return true;\n    }\n\n    $time = time();\n    if (!isset($_SESSION['bruteForceBlock']) || empty($_SESSION['bruteForceBlock'])) {\n        $_SESSION['bruteForceBlock'] = [];\n        $_SESSION['bruteForceBlock'][] = $time;\n        return true;\n    }\n\n    $_SESSION['bruteForceBlock'][] = $time;\n\n    //remove requests that are older than secondTimeout\n    foreach ($_SESSION['bruteForceBlock'] as $key => $request_time) {\n        if ($request_time < $time - $secondTimeout) {\n            unset($_SESSION['bruteForceBlock'][$key]);\n        }\n    }\n\n    //progressive timeout-> more requests, longer timeout\n    $active_connections = count($_SESSION['bruteForceBlock']);\n    $timeoutReal = ($active_connections / $maxCon) < 1 ? 0 : ($active_connections / $maxCon) * $secondTimeout;\n    if ($timeoutReal) {\n        _error_log(\"ddosProtection:: progressive timeout timeoutReal = ($timeoutReal) active_connections = ($active_connections) maxCon = ($maxCon) \", AVideoLog::$SECURITY);\n    }\n    sleep($timeoutReal);\n\n    //with strict mode, penalize \"attacker\" with sleep() above, log and then die\n    if ($global['strictDDOSprotection'] && $timeoutReal > 0) {\n        $str = \"bruteForceBlock: maxCon: $maxCon => secondTimeout: $secondTimeout | IP: \" . getRealIpAddr() . \" | count:\" . count($_SESSION['bruteForceBlock']);\n        _error_log($str);\n        die($str);\n    }\n\n    return true;\n}\n\nfunction getAdsLeaderBoardBigVideo() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardBigVideoMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardBigVideo->value);\n        }\n    }\n}\n\nfunction getAdsLeaderBoardTop() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardTopMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardTop->value);\n        }\n    } else {\n        return false;\n    }\n}\n\nfunction getAdsChannelLeaderBoardTop() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->channelLeaderBoardTopMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->channelLeaderBoardTop->value);\n        }\n    }\n}\n\nfunction getAdsLeaderBoardTop2() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardTopMobile2->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardTop2->value);\n        }\n    }\n}\n\nfunction getAdsLeaderBoardMiddle() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardMiddleMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardMiddle->value);\n        }\n    }\n}\n\nfunction getAdsLeaderBoardFooter() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardFooterMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardFooter->value);\n        }\n    }\n}\n\nfunction getAdsSideRectangle() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->sideRectangle->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->sideRectangle->value);\n        }\n    }\n}\n\nfunction isToHidePrivateVideos() {\n    $obj = AVideoPlugin::getObjectDataIfEnabled(\"Gallery\");\n    if (!empty($obj)) {\n        return $obj->hidePrivateVideos;\n    }\n    $obj = AVideoPlugin::getObjectDataIfEnabled(\"YouPHPFlix2\");\n    if (!empty($obj)) {\n        return $obj->hidePrivateVideos;\n    }\n    $obj = AVideoPlugin::getObjectDataIfEnabled(\"YouTube\");\n    if (!empty($obj)) {\n        return $obj->hidePrivateVideos;\n    }\n    return false;\n}\n\nfunction convertImageToOG($source, $destination) {\n    if (!file_exists($destination)) {\n        $w = 200;\n        $h = 200;\n        $sizes = getimagesize($source);\n        if ($sizes[0] < $w || $sizes[1] < $h) {\n            $tmpDir = getTmpDir();\n            $fileConverted = $tmpDir . \"_jpg_\" . uniqid() . \".jpg\";\n            convertImage($source, $fileConverted, 100);\n            im_resizeV2($fileConverted, $destination, $w, $h, 100);\n            unlink($fileConverted);\n        }\n    }\n    return $destination;\n}\n\nfunction convertImageToRoku($source, $destination) {\n    if (empty($source)) {\n        _error_log(\"convertImageToRoku: source image is empty\");\n        return false;\n    }\n\n    $w = 1280;\n    $h = 720;\n    if (file_exists($destination)) {\n        $sizes = getimagesize($destination);\n        if ($sizes[0] < $w || $sizes[1] < $h) {\n            _error_log(\"convertImageToRoku: file is smaller \" . json_encode($sizes));\n            unlink($destination);\n        }\n    }\n    if (!file_exists($destination)) {\n        try {\n            $tmpDir = getTmpDir();\n            $fileConverted = $tmpDir . \"_jpg_\" . uniqid() . \".jpg\";\n            convertImage($source, $fileConverted, 100);\n            im_resizeV2($fileConverted, $destination, $w, $h, 100);\n            @unlink($fileConverted);\n        } catch (Exception $exc) {\n            _error_log(\"convertImageToRoku: \" . $exc->getMessage());\n            return false;\n        }\n    }\n    return $destination;\n}\n\nfunction ogSite() {\n    global $global, $config;\n    include $global['systemRootPath'] . 'objects/functionogSite.php';\n}\n\nfunction getOpenGraph($videos_id) {\n    global $global, $config, $advancedCustom;\n    include $global['systemRootPath'] . 'objects/functiongetOpenGraph.php';\n}\n\nfunction getLdJson($videos_id) {\n    $cache = ObjectYPT::getCache(\"getLdJson{$videos_id}\", 0);\n    if (empty($cache)) {\n        echo $cache;\n    }\n    global $global, $config;\n    echo \"<!-- ld+json -->\";\n    if (empty($videos_id)) {\n        echo \"<!-- ld+json no video id -->\";\n        if (!empty($_GET['videoName'])) {\n            echo \"<!-- ld+json videoName {$_GET['videoName']} -->\";\n            $video = Video::getVideoFromCleanTitle($_GET['videoName']);\n        }\n    } else {\n        echo \"<!-- ld+json videos_id {$videos_id} -->\";\n        $video = Video::getVideoLight($videos_id);\n    }\n    if (empty($video)) {\n        echo \"<!-- ld+json no video -->\";\n        return false;\n    }\n    $videos_id = $video['id'];\n\n    $img = Video::getPoster($videos_id);\n\n    $description = html2plainText(empty(trim($video['description'])) ? $video['title'] : $video['description']);\n    $duration = Video::getItemPropDuration($video['duration']);\n    if ($duration == \"PT0H0M0S\") {\n        $duration = \"PT0H0M1S\";\n    }\n    $output = '\n    <script type=\"application/ld+json\" id=\"application_ld_json\">\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"VideoObject\",\n        \"name\": \"' . html2plainText($video['title']) . '\",\n        \"description\": \"' . $description . '\",\n        \"thumbnailUrl\": [\n        \"' . $img . '\"\n        ],\n        \"uploadDate\": \"' . date(\"Y-m-d\\Th:i:s\", strtotime($video['created'])) . '\",\n        \"duration\": \"' . $duration . '\",\n        \"contentUrl\": \"' . Video::getLinkToVideo($videos_id) . '\",\n        \"embedUrl\": \"' . parseVideos(Video::getLinkToVideo($videos_id)) . '\",\n        \"interactionCount\": \"' . $video['views_count'] . '\",\n        \"@id\": \"' . Video::getPermaLink($videos_id) . '\",\n        \"datePublished\": \"' . date(\"Y-m-d\", strtotime($video['created'])) . '\",\n        \"interactionStatistic\": [\n        {\n        \"@type\": \"InteractionCounter\",\n        \"interactionService\": {\n        \"@type\": \"WebSite\",\n        \"name\": \"' . str_replace('\"', '', $config->getWebSiteTitle()) . '\",\n        \"@id\": \"' . $global['webSiteRootURL'] . '\"\n        },\n        \"interactionType\": \"http://schema.org/LikeAction\",\n        \"userInteractionCount\": \"' . $video['views_count'] . '\"\n        },\n        {\n        \"@type\": \"InteractionCounter\",\n        \"interactionType\": \"http://schema.org/WatchAction\",\n        \"userInteractionCount\": \"' . $video['views_count'] . '\"\n        }\n        ]\n        }\n    </script>';\n    ObjectYPT::setCache(\"getLdJson{$videos_id}\", $output);\n    echo $output;\n}\n\nfunction getItemprop($videos_id) {\n    $cache = ObjectYPT::getCache(\"getItemprop{$videos_id}\", 0);\n    if (empty($cache)) {\n        echo $cache;\n    }\n    global $global, $config;\n    echo \"<!-- Itemprop -->\";\n    if (empty($videos_id)) {\n        echo \"<!-- Itemprop no video id -->\";\n        if (!empty($_GET['videoName'])) {\n            echo \"<!-- Itemprop videoName {$_GET['videoName']} -->\";\n            $video = Video::getVideoFromCleanTitle($_GET['videoName']);\n        }\n    } else {\n        echo \"<!-- Itemprop videos_id {$videos_id} -->\";\n        $video = Video::getVideoLight($videos_id);\n    }\n    if (empty($video)) {\n        echo \"<!-- Itemprop no video -->\";\n        return false;\n    }\n    $videos_id = $video['id'];\n    $img = Video::getPoster($videos_id);\n\n    $description = html2plainText(empty(trim($video['description'])) ? $video['title'] : $video['description']);\n    $duration = Video::getItemPropDuration($video['duration']);\n    if ($duration == \"PT0H0M0S\") {\n        $duration = \"PT0H0M1S\";\n    }\n    $output = '<span itemprop=\"name\" content=\"' . str_replace('\"', '', $video['title']) . '\" />\n    <span itemprop=\"description\" content=\"' . $description . '\" />\n    <span itemprop=\"thumbnailUrl\" content=\"' . $img . '\" />\n    <span itemprop=\"uploadDate\" content=\"' . date(\"Y-m-d\\Th:i:s\", strtotime($video['created'])) . '\" />\n    <span itemprop=\"duration\" content=\"' . $duration . '\" />\n    <span itemprop=\"contentUrl\" content=\"' . Video::getLinkToVideo($videos_id) . '\" />\n    <span itemprop=\"embedUrl\" content=\"' . parseVideos(Video::getLinkToVideo($videos_id)) . '\" />\n    <span itemprop=\"interactionCount\" content=\"' . $video['views_count'] . '\" />';\n\n    ObjectYPT::setCache(\"getItemprop{$videos_id}\", $output);\n    echo $output;\n}\n\nfunction getOS($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n\n    $os_platform = \"Unknown OS Platform\";\n\n    $os_array = [\n        '/windows nt 10/i' => 'Windows 10',\n        '/windows nt 6.3/i' => 'Windows 8.1',\n        '/windows nt 6.2/i' => 'Windows 8',\n        '/windows nt 6.1/i' => 'Windows 7',\n        '/windows nt 6.0/i' => 'Windows Vista',\n        '/windows nt 5.2/i' => 'Windows Server 2003/XP x64',\n        '/windows nt 5.1/i' => 'Windows XP',\n        '/windows xp/i' => 'Windows XP',\n        '/windows nt 5.0/i' => 'Windows 2000',\n        '/windows me/i' => 'Windows ME',\n        '/win98/i' => 'Windows 98',\n        '/win95/i' => 'Windows 95',\n        '/win16/i' => 'Windows 3.11',\n        '/macintosh|mac os x/i' => 'Mac OS X',\n        '/mac_powerpc/i' => 'Mac OS 9',\n        '/linux/i' => 'Linux',\n        '/ubuntu/i' => 'Ubuntu',\n        '/iphone/i' => 'iPhone',\n        '/ipod/i' => 'iPod',\n        '/ipad/i' => 'iPad',\n        '/android/i' => 'Android',\n        '/blackberry/i' => 'BlackBerry',\n        '/webos/i' => 'Mobile',\n    ];\n\n    foreach ($os_array as $regex => $value) {\n        if (preg_match($regex, $user_agent)) {\n            $os_platform = $value;\n        }\n    }\n\n    return $os_platform;\n}\n\nfunction get_browser_name($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return 'Unknow';\n    }\n    // Make case insensitive.\n    $t = strtolower($user_agent);\n\n    // If the string *starts* with the string, strpos returns 0 (i.e., FALSE). Do a ghetto hack and start with a space.\n    // \"[strpos()] may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE.\"\n    //     http://php.net/manual/en/function.strpos.php\n    $t = \" \" . $t;\n\n    // Humans / Regular Users\n    if (isAVideoStreamer($t)) {\n        return 'AVideo Mobile App';\n    } elseif ($url = isAVideoEncoder($t)) {\n        return 'AVideo Encoder ' . $url;\n    } elseif ($url = isAVideoStreamer($t)) {\n        return 'AVideo Streamer ' . $url;\n    } elseif (strpos($t, 'crkey')) {\n        return 'Chromecast';\n    } elseif (strpos($t, 'opera') || strpos($t, 'opr/')) {\n        return 'Opera';\n    } elseif (strpos($t, 'edge')) {\n        return 'Edge';\n    } elseif (strpos($t, 'chrome')) {\n        return 'Chrome';\n    } elseif (strpos($t, 'safari')) {\n        return 'Safari';\n    } elseif (strpos($t, 'firefox')) {\n        return 'Firefox';\n    } elseif (strpos($t, 'msie') || strpos($t, 'trident/7')) {\n        return 'Internet Explorer';\n    } elseif (strpos($t, 'applecoremedia')) {\n        return 'Native Apple Player';\n    }\n\n    // Search Engines\n    elseif (strpos($t, 'google')) {\n        return '[Bot] Googlebot';\n    } elseif (strpos($t, 'bing')) {\n        return '[Bot] Bingbot';\n    } elseif (strpos($t, 'slurp')) {\n        return '[Bot] Yahoo! Slurp';\n    } elseif (strpos($t, 'duckduckgo')) {\n        return '[Bot] DuckDuckBot';\n    } elseif (strpos($t, 'baidu')) {\n        return '[Bot] Baidu';\n    } elseif (strpos($t, 'yandex')) {\n        return '[Bot] Yandex';\n    } elseif (strpos($t, 'sogou')) {\n        return '[Bot] Sogou';\n    } elseif (strpos($t, 'exabot')) {\n        return '[Bot] Exabot';\n    } elseif (strpos($t, 'msn')) {\n        return '[Bot] MSN';\n    }\n\n    // Common Tools and Bots\n    elseif (strpos($t, 'mj12bot')) {\n        return '[Bot] Majestic';\n    } elseif (strpos($t, 'ahrefs')) {\n        return '[Bot] Ahrefs';\n    } elseif (strpos($t, 'semrush')) {\n        return '[Bot] SEMRush';\n    } elseif (strpos($t, 'rogerbot') || strpos($t, 'dotbot')) {\n        return '[Bot] Moz or OpenSiteExplorer';\n    } elseif (strpos($t, 'frog') || strpos($t, 'screaming')) {\n        return '[Bot] Screaming Frog';\n    }\n\n    // Miscellaneous\n    elseif (strpos($t, 'facebook')) {\n        return '[Bot] Facebook';\n    } elseif (strpos($t, 'pinterest')) {\n        return '[Bot] Pinterest';\n    }\n\n    // Check for strings commonly used in bot user agents\n    elseif (strpos($t, 'crawler') || strpos($t, 'api') ||\n            strpos($t, 'spider') || strpos($t, 'http') ||\n            strpos($t, 'bot') || strpos($t, 'archive') ||\n            strpos($t, 'info') || strpos($t, 'data')) {\n        return '[Bot] Other';\n    }\n    //_error_log(\"Unknow user agent ($t) IP=\" . getRealIpAddr() . \" URI=\" . getRequestURI());\n    return 'Other (Unknown)';\n}\n\n/**\n * Due some error on old chrome browsers (version < 70) on decrypt HLS keys with the videojs versions greater then 7.9.7\n * we need to detect the chrome browser and load an older version\n *\n */\nfunction isOldChromeVersion() {\n    $global;\n    if (empty($_SERVER['HTTP_USER_AGENT'])) {\n        return false;\n    }\n    if (!empty($global['forceOldChrome'])) {\n        return true;\n    }\n    if (preg_match('/Chrome\\/([0-9.]+)/i', $_SERVER['HTTP_USER_AGENT'], $matches)) {\n        return version_compare($matches[1], '80', '<=');\n    }\n    return false;\n}\n\nfunction TimeLogStart($name) {\n    global $global;\n    if (!empty($global['noDebug'])) {\n        return false;\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    if (empty($global['start']) || !is_array($global['start'])) {\n        $global['start'] = [];\n    }\n    $global['start'][$name] = $time;\n    return $name;\n}\n\nfunction TimeLogEnd($name, $line, $TimeLogLimit = 0.7) {\n    global $global;\n    if (!empty($global['noDebug']) || empty($global['start'][$name])) {\n        return false;\n    }\n    if (!empty($global['TimeLogLimit'])) {\n        $TimeLogLimit = $global['TimeLogLimit'];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $global['start'][$name]), 4);\n    if (empty($global['noDebugSlowProcess']) && $total_time > $TimeLogLimit) {\n        _error_log(\"Warning: Slow process detected [{$name}] On  Line {$line} takes {$total_time} seconds to complete, Limit ({$TimeLogLimit}). {$_SERVER[\"SCRIPT_FILENAME\"]}\");\n    }\n    TimeLogStart($name);\n}\n\nclass AVideoLog {\n\n    public static $DEBUG = 0;\n    public static $WARNING = 1;\n    public static $ERROR = 2;\n    public static $SECURITY = 3;\n    public static $SOCKET = 4;\n\n}\n\nfunction _error_log_debug($message, $show_args = false) {\n    $array = debug_backtrace();\n    $message .= PHP_EOL;\n    foreach ($array as $value) {\n        $message .= \"function: {$value['function']} Line: {{$value['line']}} File: {{$value['file']}}\" . PHP_EOL;\n        if ($show_args) {\n            $message .= print_r($value['args'], true) . PHP_EOL;\n        }\n    }\n    _error_log(PHP_EOL . '***' . PHP_EOL . $message . '***');\n}\n\nfunction _error_log($message, $type = 0, $doNotRepeat = false) {\n    if (empty($doNotRepeat)) {\n        // do not log it too many times when you are using HLS format, other wise it will fill the log file with the same error\n        $doNotRepeat = preg_match(\"/hls.php$/\", $_SERVER['SCRIPT_NAME']);\n    }\n    if ($doNotRepeat) {\n        return false;\n    }\n    global $global;\n    if (!empty($global['noDebug']) && $type == 0) {\n        return false;\n    }\n    if (!is_string($message)) {\n        $message = json_encode($message);\n    }\n    $prefix = \"AVideoLog::\";\n    switch ($type) {\n        case AVideoLog::$DEBUG:\n            $prefix .= \"DEBUG: \";\n            break;\n        case AVideoLog::$WARNING:\n            $prefix .= \"WARNING: \";\n            break;\n        case AVideoLog::$ERROR:\n            $prefix .= \"ERROR: \";\n            break;\n        case AVideoLog::$SECURITY:\n            $prefix .= \"SECURITY: \";\n            break;\n        case AVideoLog::$SOCKET:\n            $prefix .= \"SOCKET: \";\n            break;\n    }\n    $str = $prefix . $message . \" SCRIPT_NAME: {$_SERVER['SCRIPT_NAME']}\";\n    if (isCommandLineInterface()) {\n        echo '[' . date('Y-m-d H:i:s') . '] ' . $str . PHP_EOL;\n    }\n    error_log($str);\n}\n\nfunction postVariables($url, $array, $httpcodeOnly = true, $timeout = 10) {\n    if (!$url || !is_string($url) || !preg_match('/^http(s)?:\\/\\/[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(\\/.*)?$/i', $url)) {\n        return false;\n    }\n    $array = object_to_array($array);\n    $ch = curl_init($url);\n    if ($httpcodeOnly) {\n        @curl_setopt($ch, CURLOPT_HEADER, true);  // we want headers\n        @curl_setopt($ch, CURLOPT_NOBODY, true);  // we don't need body\n    } else {\n        curl_setopt($curl, CURLOPT_USERAGENT, getSelfUserAgent());\n    }\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); //The number of seconds to wait while trying to connect. Use 0 to wait indefinitely.\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout + 1); //The maximum number of seconds to allow cURL functions to execute.\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $array);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n\n    // execute!\n    $response = curl_exec($ch);\n    if ($httpcodeOnly) {\n        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        // close the connection, release resources used\n        curl_close($ch);\n        if ($httpcode == 200) {\n            return true;\n        }\n        return $httpcode;\n    } else {\n        curl_close($ch);\n        return $response;\n    }\n}\n\nfunction _session_start(array $options = []) {\n    try {\n        if (!empty($_GET['PHPSESSID'])) {\n            if ($_GET['PHPSESSID'] !== session_id()) {\n                if (session_status() !== PHP_SESSION_NONE) {\n                    @session_write_close();\n                }\n                session_id($_GET['PHPSESSID']);\n                //_error_log(\"captcha: session_id changed to \" . $_GET['PHPSESSID']);\n            }\n            unset($_GET['PHPSESSID']);\n            return @session_start($options);\n        } elseif (session_status() == PHP_SESSION_NONE) {\n            return @session_start($options);\n        }\n    } catch (Exception $exc) {\n        _error_log(\"_session_start: \" . $exc->getTraceAsString());\n        return false;\n    }\n}\n\nfunction _mysql_connect() {\n    global $global, $mysqlHost, $mysqlUser, $mysqlPass, $mysqlDatabase, $mysqlPort, $mysql_connect_was_closed;\n    try {\n        if (!_mysql_is_open()) {\n            //_error_log('MySQL Connect '. json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n            $mysql_connect_was_closed = 0;\n            $global['mysqli'] = new mysqli($mysqlHost, $mysqlUser, $mysqlPass, $mysqlDatabase, @$mysqlPort);\n            if (!empty($global['mysqli_charset'])) {\n                $global['mysqli']->set_charset($global['mysqli_charset']);\n            }\n        }\n    } catch (Exception $exc) {\n        _error_log($exc->getTraceAsString());\n        return false;\n    }\n}\n\nfunction _mysql_close() {\n    global $global, $mysql_connect_was_closed;\n    if (_mysql_is_open()) {\n        //_error_log('MySQL Closed '. json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n        $mysql_connect_was_closed = 1;\n        @$global['mysqli']->close();\n        $global['mysqli'] = false;\n    }\n}\n\nfunction _mysql_is_open() {\n    global $global, $mysql_connect_was_closed;\n    try {\n        //if (is_object($global['mysqli']) && (empty($mysql_connect_was_closed) || !empty(@$global['mysqli']->ping()))) {\n        if (!empty($global['mysqli']) && is_object($global['mysqli']) && empty($mysql_connect_was_closed)) {\n            return true;\n        }\n    } catch (Exception $exc) {\n        return false;\n    }\n    return false;\n}\n\nfunction remove_utf8_bom($text) {\n    if (strlen($text) > 1000000) {\n        return $text;\n    }\n\n    $bom = pack('H*', 'EFBBBF');\n    $text = preg_replace(\"/^$bom/\", '', $text);\n    return $text;\n}\n\nfunction getCacheDir() {\n    $p = AVideoPlugin::loadPlugin(\"Cache\");\n    return $p->getCacheDir();\n}\n\nfunction clearCache($firstPageOnly = false) {\n    global $global;\n    $lockFile = getVideosDir() . '.clearCache.lock';\n    if (file_exists($lockFile) && filectime($lockFile) > strtotime('-5 minutes')) {\n        _error_log('clearCache is in progress ' . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n        return false;\n    }\n    $start = microtime(true);\n    _error_log('clearCache starts ');\n    file_put_contents($lockFile, time());\n\n    $dir = getVideosDir() . \"cache\" . DIRECTORY_SEPARATOR;\n    $tmpDir = ObjectYPT::getCacheDir('firstPage');\n    $parts = explode('firstpage', $tmpDir);\n\n    if ($firstPageOnly || !empty($_REQUEST['FirstPage'])) {\n        $tmpDir = $parts[0] . 'firstpage' . DIRECTORY_SEPARATOR;\n        //var_dump($tmpDir);exit;\n        $dir .= \"firstPage\" . DIRECTORY_SEPARATOR;\n    } else {\n        $tmpDir = $parts[0];\n    }\n\n    //_error_log('clearCache 1: '.$dir);\n    rrmdir($dir);\n    rrmdir($tmpDir);\n    ObjectYPT::deleteCache(\"getEncoderURL\");\n    ObjectYPT::deleteAllSessionCache();\n    unlink($lockFile);\n    $end = microtime(true) - $start;\n    _error_log(\"clearCache end in {$end} seconds\");\n    return true;\n}\n\nfunction clearAllUsersSessionCache() {\n    sendSocketMessageToAll(time(), 'socketClearSessionCache');\n}\n\nfunction clearFirstPageCache() {\n    return clearCache(true);\n}\n\nfunction getUsageFromFilename($filename, $dir = \"\") {\n    global $global;\n\n    if (!empty($global['getUsageFromFilename'])) { // manually add this variable in your configuration.php file to not scan your video usage\n        return 0;\n    }\n\n    if (empty($dir)) {\n        $paths = Video::getPaths($filename);\n        $dir = $paths['path'];\n    }\n    $dir = addLastSlash($dir);\n    $totalSize = 0;\n    _error_log(\"getUsageFromFilename: start {$dir}{$filename} \" . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n    //$files = glob(\"{$dir}{$filename}*\");\n    $paths = Video::getPaths($filename);\n\n    if (is_dir($paths['path'])) {\n        $files = [$paths['path']];\n    } else {\n        $files = globVideosDir($filename);\n    }\n    //var_dump($paths, $files, $filename);exit;\n    session_write_close();\n    $filesProcessed = [];\n    if (empty($files)) {\n        _error_log(\"getUsageFromFilename: we did not find any file for {$dir}{$filename}, we will create a fake one \" . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n        make_path($dir);\n        file_put_contents(\"{$dir}{$filename}.notfound\", time());\n        $totalSize = 10;\n    } else {\n        foreach ($files as $f) {\n            if (strpos($f, '.size.lock') !== false) {\n                continue;\n            }\n            if (is_dir($f)) {\n                $dirSize = getDirSize($f, true);\n                _error_log(\"getUsageFromFilename: is Dir dirSize={$dirSize} \" . humanFileSize($dirSize) . \" {$f}\");\n                $totalSize += $dirSize;\n                $minDirSize = 4000000;\n                $isEnabled = AVideoPlugin::isEnabledByName('YPTStorage');\n                $isEnabledCDN = AVideoPlugin::getObjectDataIfEnabled('CDN');\n                $isEnabledS3 = AVideoPlugin::loadPluginIfEnabled('AWS_S3');\n                if (!empty($isEnabledCDN) && $isEnabledCDN->enable_storage) {\n                    $v = Video::getVideoFromFileName($filename);\n                    if (!empty($v)) {\n                        $size = CDNStorage::getRemoteDirectorySize($v['id']);\n                        _error_log(\"getUsageFromFilename: CDNStorage found $size \" . humanFileSize($size));\n                        $totalSize += $size;\n                    }\n                }\n                if ($dirSize < $minDirSize && $isEnabled) {\n                    // probably the HLS file is hosted on the YPTStorage\n                    $info = YPTStorage::getFileInfo($filename);\n                    if (!empty($info->size)) {\n                        _error_log(\"getUsageFromFilename: found info on the YPTStorage \" . print_r($info, true));\n                        $totalSize += $info->size;\n                    } else {\n                        _error_log(\"getUsageFromFilename: there is no info on the YPTStorage \" . print_r($info, true));\n                    }\n                } elseif ($dirSize < $minDirSize && $isEnabledS3) {\n                    // probably the HLS file is hosted on the S3\n                    $size = $isEnabledS3->getFilesize($filename);\n                    if (!empty($size)) {\n                        _error_log(\"getUsageFromFilename: found info on the AWS_S3 {$filename} {$size}\");\n                        $totalSize += $size;\n                    } else {\n                        _error_log(\"getUsageFromFilename: there is no info on the AWS_S3  {$filename} {$size}\");\n                    }\n                } else {\n                    if (!($dirSize < $minDirSize)) {\n                        _error_log(\"getUsageFromFilename: does not have the size to process $dirSize < $minDirSize\");\n                    }\n                    if (!$isEnabled) {\n                        _error_log(\"getUsageFromFilename: YPTStorage is disabled\");\n                    }\n                    if (!$isEnabledCDN) {\n                        _error_log(\"getUsageFromFilename: CDN Storage is disabled\");\n                    }\n                    if (!$isEnabledS3) {\n                        _error_log(\"getUsageFromFilename: S3 Storage is disabled\");\n                    }\n                }\n            } elseif (is_file($f)) {\n                $filesize = filesize($f);\n                if ($filesize < 20) { // that means it is a dummy file\n                    $lockFile = $f . \".size.lock\";\n                    if (!file_exists($lockFile) || (time() - 600) > filemtime($lockFile)) {\n                        file_put_contents($lockFile, time());\n                        _error_log(\"getUsageFromFilename: {$f} is Dummy file ({$filesize})\");\n                        $aws_s3 = AVideoPlugin::loadPluginIfEnabled('AWS_S3');\n                        //$bb_b2 = AVideoPlugin::loadPluginIfEnabled('Blackblaze_B2');\n                        if (!empty($aws_s3)) {\n                            _error_log(\"getUsageFromFilename: Get from S3\");\n                            $filesize += $aws_s3->getFilesize($filename);\n                        } elseif (!empty($bb_b2)) {\n                            // TODO\n                        } else {\n                            $urls = Video::getVideosPaths($filename, true);\n                            _error_log(\"getUsageFromFilename: Paths \" . json_encode($urls));\n                            if (!empty($urls[\"m3u8\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"m3u8\"]['url']);\n                            }\n                            if (!empty($urls['mp4'])) {\n                                foreach ($urls['mp4'] as $mp4) {\n                                    if (in_array($mp4, $filesProcessed)) {\n                                        continue;\n                                    }\n                                    $filesProcessed[] = $mp4;\n                                    $filesize += getUsageFromURL($mp4);\n                                }\n                            }\n                            if (!empty($urls['webm'])) {\n                                foreach ($urls['webm'] as $mp4) {\n                                    if (in_array($mp4, $filesProcessed)) {\n                                        continue;\n                                    }\n                                    $filesProcessed[] = $mp4;\n                                    $filesize += getUsageFromURL($mp4);\n                                }\n                            }\n                            if (!empty($urls[\"pdf\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"pdf\"]['url']);\n                            }\n                            if (!empty($urls[\"image\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"image\"]['url']);\n                            }\n                            if (!empty($urls[\"zip\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"zip\"]['url']);\n                            }\n                            if (!empty($urls[\"mp3\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"mp3\"]['url']);\n                            }\n                        }\n                        unlink($lockFile);\n                    }\n                } else {\n                    _error_log(\"getUsageFromFilename: {$f} is File ({$filesize})\");\n                }\n                $totalSize += $filesize;\n            }\n        }\n    }\n    return $totalSize;\n}\n\n/**\n * Returns the size of a file without downloading it, or -1 if the file\n * size could not be determined.\n *\n * @param $url - The location of the remote file to download. Cannot\n * be null or empty.\n *\n * @return The size of the file referenced by $url, or false if the size\n * could not be determined.\n */\nfunction getUsageFromURL($url) {\n    global $global;\n\n    if (!empty($global['doNotGetUsageFromURL'])) { // manually add this variable in your configuration.php file to not scan your video usage\n        return 0;\n    }\n\n    _error_log(\"getUsageFromURL: start ({$url})\");\n    // Assume failure.\n    $result = false;\n\n    $curl = curl_init($url);\n\n    _error_log(\"getUsageFromURL: curl_init \");\n\n    try {\n        // Issue a HEAD request and follow any redirects.\n        curl_setopt($curl, CURLOPT_NOBODY, true);\n        curl_setopt($curl, CURLOPT_HEADER, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\n        //curl_setopt($curl, CURLOPT_USERAGENT, get_user_agent_string());\n        $data = curl_exec($curl);\n    } catch (Exception $exc) {\n        echo $exc->getTraceAsString();\n        _error_log(\"getUsageFromURL: ERROR \" . $exc->getMessage());\n        _error_log(\"getUsageFromURL: ERROR \" . curl_errno($curl));\n        _error_log(\"getUsageFromURL: ERROR \" . curl_error($curl));\n    }\n\n    if ($data) {\n        _error_log(\"getUsageFromURL: response header \" . $data);\n        $content_length = \"unknown\";\n        $status = \"unknown\";\n\n        if (preg_match(\"/^HTTP\\/1\\.[01] (\\d\\d\\d)/\", $data, $matches)) {\n            $status = (int) $matches[1];\n        }\n\n        if (preg_match(\"/Content-Length: (\\d+)/\", $data, $matches)) {\n            $content_length = (int) $matches[1];\n        }\n\n        // http://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n        if ($status == 200 || ($status > 300 && $status <= 308)) {\n            $result = $content_length;\n        }\n    } else {\n        _error_log(\"getUsageFromURL: ERROR no response data \" . curl_error($curl));\n    }\n\n    curl_close($curl);\n    return (int) $result;\n}\n\nfunction getDirSize($dir, $forceNew = false) {\n    global $_getDirSize;\n\n    if (!isset($_getDirSize)) {\n        $_getDirSize = [];\n    }\n    if (empty($forceNew) && isset($_getDirSize[$dir])) {\n        return $_getDirSize[$dir];\n    }\n\n    _error_log(\"getDirSize: start {$dir}\");\n\n    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        $return = foldersize($dir);\n        $_getDirSize[$dir] = $return;\n        return $return;\n    } else {\n        $command = \"du -sb {$dir}\";\n        exec($command . \" < /dev/null 2>&1\", $output, $return_val);\n        if ($return_val !== 0) {\n            _error_log(\"getDirSize: ERROR ON Command {$command}\");\n            $return = 0;\n            $_getDirSize[$dir] = $return;\n            return $return;\n        } else {\n            if (!empty($output[0])) {\n                preg_match(\"/^([0-9]+).*/\", $output[0], $matches);\n            }\n            if (!empty($matches[1])) {\n                _error_log(\"getDirSize: found {$matches[1]} from - {$output[0]}\");\n                $return = intval($matches[1]);\n                $_getDirSize[$dir] = $return;\n                return $return;\n            }\n\n            _error_log(\"getDirSize: ERROR on pregmatch {$output[0]}\");\n            $return = 0;\n            $_getDirSize[$dir] = $return;\n            return $return;\n        }\n    }\n}\n\nfunction foldersize($path) {\n    $total_size = 0;\n    $files = scandir($path);\n    $cleanPath = rtrim($path, '/') . '/';\n\n    foreach ($files as $t) {\n        if ($t <> \".\" && $t <> \"..\") {\n            $currentFile = $cleanPath . $t;\n            if (is_dir($currentFile)) {\n                $size = foldersize($currentFile);\n                $total_size += $size;\n            } else {\n                $size = filesize($currentFile);\n                $total_size += $size;\n            }\n        }\n    }\n\n    return $total_size;\n}\n\nfunction getDiskUsage() {\n    global $global;\n    $dir = getVideosDir() . \"\";\n    $obj = new stdClass();\n    $obj->disk_free_space = disk_free_space($dir);\n    $obj->disk_total_space = disk_total_space($dir);\n    $obj->videos_dir = getDirSize($dir);\n    $obj->disk_used = $obj->disk_total_space - $obj->disk_free_space;\n    $obj->disk_used_by_other = $obj->disk_used - $obj->videos_dir;\n    $obj->disk_free_space_human = humanFileSize($obj->disk_free_space);\n    $obj->disk_total_space_human = humanFileSize($obj->disk_total_space);\n    $obj->videos_dir_human = humanFileSize($obj->videos_dir);\n    $obj->disk_used_human = humanFileSize($obj->disk_used);\n    $obj->disk_used_by_other_human = humanFileSize($obj->disk_used_by_other);\n    // percentage of disk used\n    $obj->disk_used_percentage = sprintf('%.2f', ($obj->disk_used / $obj->disk_total_space) * 100);\n    $obj->videos_dir_used_percentage = sprintf('%.2f', ($obj->videos_dir / $obj->disk_total_space) * 100);\n    $obj->disk_free_space_percentage = sprintf('%.2f', ($obj->disk_free_space / $obj->disk_total_space) * 100);\n\n    return $obj;\n}\n\nfunction unsetSearch() {\n    unset($_GET['searchPhrase'], $_POST['searchPhrase'], $_GET['search'], $_GET['q']);\n}\n\nfunction encrypt_decrypt($string, $action) {\n    global $global;\n    $output = false;\n\n    $encrypt_method = \"AES-256-CBC\";\n    $secret_key = 'This is my secret key';\n    $secret_iv = $global['systemRootPath'];\n    while (strlen($secret_iv) < 16) {\n        $secret_iv .= $global['systemRootPath'];\n    }\n    if (empty($secret_iv)) {\n        $secret_iv = '1234567890abcdef';\n    }\n    // hash\n    $key = hash('sha256', $global['salt']);\n\n    // iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning\n    $iv = substr(hash('sha256', $secret_iv), 0, 16);\n\n    if ($action == 'encrypt') {\n        $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);\n        $output = base64_encode($output);\n    } elseif ($action == 'decrypt') {\n        $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);\n    }\n\n    return $output;\n}\n\nfunction compressString($string) {\n    if (function_exists(\"gzdeflate\")) {\n        $string = gzdeflate($string, 9);\n    }\n    return $string;\n}\n\nfunction decompressString($string) {\n    if (function_exists(\"gzinflate\")) {\n        $string = gzinflate($string);\n    }\n    return $string;\n}\n\nfunction encryptString($string) {\n    if (is_object($string)) {\n        $string = json_encode($string);\n    }\n    return encrypt_decrypt($string, 'encrypt');\n}\n\nfunction decryptString($string) {\n    return encrypt_decrypt($string, 'decrypt');\n}\n\nfunction getToken($timeout = 0, $salt = \"\") {\n    global $global;\n    $obj = new stdClass();\n    $obj->salt = $global['salt'] . $salt;\n    $obj->timezone = date_default_timezone_get();\n\n    if (!empty($timeout)) {\n        $obj->time = time();\n        $obj->timeout = $obj->time + $timeout;\n    } else {\n        $obj->time = strtotime(\"Today 00:00:00\");\n        $obj->timeout = strtotime(\"Today 23:59:59\");\n        $obj->timeout += cacheExpirationTime();\n    }\n    $strObj = json_encode($obj);\n    //_error_log(\"Token created: {$strObj}\");\n\n    return encryptString($strObj);\n}\n\nfunction isTokenValid($token, $salt = \"\") {\n    return verifyToken($token, $salt);\n}\n\nfunction verifyToken($token, $salt = \"\") {\n    global $global;\n    $obj = _json_decode(decryptString($token));\n    if (empty($obj)) {\n        _error_log(\"verifyToken invalid token\");\n        return false;\n    }\n    if ($obj->salt !== $global['salt'] . $salt) {\n        _error_log(\"verifyToken salt fail\");\n        return false;\n    }\n    $old_timezone = date_default_timezone_get();\n    date_default_timezone_set($obj->timezone);\n    $time = time();\n    date_default_timezone_set($old_timezone);\n    if (!($time >= $obj->time && $time <= $obj->timeout)) {\n        _error_log(\"verifyToken token timout time = $time; obj->time = $obj->time;  obj->timeout = $obj->timeout\");\n        return false;\n    }\n    return true;\n}\n\nclass YPTvideoObject {\n\n    public $id;\n    public $title;\n    public $description;\n    public $thumbnails;\n    public $channelTitle;\n    public $videoLink;\n\n    public function __construct($id, $title, $description, $thumbnails, $channelTitle, $videoLink) {\n        $this->id = $id;\n        $this->title = $title;\n        $this->description = $description;\n        $this->thumbnails = $thumbnails;\n        $this->channelTitle = $channelTitle;\n        $this->videoLink = $videoLink;\n    }\n\n}\n\nfunction isToShowDuration($type) {\n    $notShowTo = ['pdf', 'article', 'serie', 'zip', 'image', 'live', 'livelinks'];\n    if (in_array($type, $notShowTo)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfunction _dieAndLogObject($obj, $prefix = \"\") {\n    $objString = json_encode($obj);\n    _error_log($prefix . $objString);\n    die($objString);\n}\n\nfunction isAVideoPlayer() {\n    if (isVideo() || isSerie()) {\n        return true;\n    }\n    return false;\n}\n\nfunction isFirstPage() {\n    global $isFirstPage, $global;\n    return !empty($isFirstPage) || getSelfURI() === \"{$global['webSiteRootURL']}view/\";\n}\n\nfunction isVideo() {\n    global $isModeYouTube, $global;\n    if (!empty($global['doNotLoadPlayer'])) {\n        return false;\n    }\n    return !empty($isModeYouTube) || isPlayList() || isEmbed() || isLive();\n}\n\nfunction isVideoTypeEmbed() {\n    global $isVideoTypeEmbed;\n\n    if (isVideo() && !empty($isVideoTypeEmbed) && $videos_id = getVideos_id()) {\n        return $videos_id;\n    }\n\n    return false;\n}\n\nfunction isAudio() {\n    global $isAudio;\n    return !empty($isAudio);\n}\n\nfunction isSerie() {\n    return isPlayList();\n}\n\nfunction isPlayList() {\n    global $isPlayList, $isSerie;\n    return !empty($isSerie) || !empty($isPlayList);\n}\n\nfunction isChannel() {\n    global $isChannel;\n    if (!empty($isChannel) && !isVideo()) {\n        $user_id = 0;\n        if (empty($_GET['channelName'])) {\n            if (User::isLogged()) {\n                $user_id = User::getId();\n            } else {\n                return false;\n            }\n        } else {\n            $_GET['channelName'] = xss_esc($_GET['channelName']);\n            $user = User::getChannelOwner($_GET['channelName']);\n            if (!empty($user)) {\n                $user_id = $user['id'];\n            } else {\n                $user_id = $_GET['channelName'];\n            }\n        }\n        return $user_id;\n    }\n    return false;\n}\n\nfunction isEmbed() {\n    global $isEmbed, $global;\n    if (!empty($global['doNotLoadPlayer'])) {\n        return false;\n    }\n    return !empty($isEmbed);\n}\n\nfunction isWebRTC() {\n    global $isWebRTC, $global;\n    if (!empty($global['doNotLoadPlayer'])) {\n        return false;\n    }\n    return !empty($isWebRTC);\n}\n\nfunction isLive() {\n    global $isLive, $global;\n    if (!empty($global['doNotLoadPlayer'])) {\n        return false;\n    }\n    if (class_exists('LiveTransmition') && class_exists('Live')) {\n        $livet = LiveTransmition::getFromRequest();\n        if (!empty($livet)) {\n            setLiveKey($livet['key'], Live::getLiveServersIdRequest(), @$_REQUEST['live_index']);\n            $isLive = 1;\n        }\n    }\n    if (!empty($isLive)) {\n        $live = getLiveKey();\n        if (empty($live)) {\n            $live = ['key' => false, 'live_servers_id' => false, 'live_index' => false];\n        }\n        $live['liveLink'] = isLiveLink();\n        return $live;\n    } else {\n        return false;\n    }\n}\n\nfunction isLiveLink() {\n    global $isLiveLink;\n    if (!empty($isLiveLink)) {\n        return $isLiveLink;\n    } else {\n        return false;\n    }\n}\n\nfunction getLiveKey() {\n    global $getLiveKey;\n    if (empty($getLiveKey)) {\n        return false;\n    }\n    return $getLiveKey;\n}\n\nfunction setLiveKey($key, $live_servers_id, $live_index = '') {\n    global $getLiveKey;\n    $parameters = Live::getLiveParametersFromKey($key);\n    $key = $parameters['key'];\n    $cleanKey = $parameters['cleanKey'];\n    if (empty($live_index)) {\n        $live_index = $parameters['live_index'];\n    }\n    $key = Live::getLiveKeyFromRequest($key, $live_index, $parameters['playlists_id_live']);\n\n    $getLiveKey = ['key' => $key, 'live_servers_id' => intval($live_servers_id), 'live_index' => $live_index, 'cleanKey' => $cleanKey];\n    return $getLiveKey;\n}\n\nfunction isVideoPlayerHasProgressBar() {\n    if (isWebRTC()) {\n        return false;\n    }\n    if (isLive()) {\n        $obj = AVideoPlugin::getObjectData('Live');\n        if (empty($obj->disableDVR)) {\n            return true;\n        }\n    } elseif (isAVideoPlayer()) {\n        return true;\n    }\n    return false;\n}\n\nfunction isHLS() {\n    global $video, $global;\n    if (isLive()) {\n        return true;\n    } elseif (!empty($video) && $video['type'] == 'video' && file_exists(Video::getPathToFile(\"{$video['filename']}/index.m3u8\"))) {\n        return true;\n    }\n    return false;\n}\n\nfunction getRedirectUri($returnThisIfRedirectUriIsNotSet = false) {\n    if (isValidURL(@$_GET['redirectUri'])) {\n        return $_GET['redirectUri'];\n    }\n    if (isValidURL(@$_SESSION['redirectUri'])) {\n        return $_SESSION['redirectUri'];\n    }\n    if (isValidURL(@$_REQUEST[\"redirectUri\"])) {\n        return $_REQUEST[\"redirectUri\"];\n    }\n    if (isValidURL(@$_SERVER[\"HTTP_REFERER\"])) {\n        return $_SERVER[\"HTTP_REFERER\"];\n    }\n    if (isValidURL($returnThisIfRedirectUriIsNotSet)) {\n        return $returnThisIfRedirectUriIsNotSet;\n    } else {\n        return getRequestURI();\n    }\n}\n\nfunction setRedirectUri($redirectUri) {\n    _session_start();\n    $_SESSION['redirectUri'] = $redirectUri;\n}\n\nfunction redirectIfRedirectUriIsSet() {\n    $redirectUri = false;\n    if (!empty($_GET['redirectUri'])) {\n        if (isSameDomainAsMyAVideo($_GET['redirectUri'])) {\n            $redirectUri = $_GET['redirectUri'];\n        }\n    }\n    if (!empty($_SESSION['redirectUri'])) {\n        if (isSameDomainAsMyAVideo($_SESSION['redirectUri'])) {\n            $redirectUri = $_SESSION['redirectUri'];\n        }\n        _session_start();\n        unset($_SESSION['redirectUri']);\n    }\n\n    if (!empty($redirectUri)) {\n        header(\"Location: {$_SESSION['redirectUri']}\");\n        exit;\n    }\n}\n\nfunction getRedirectToVideo($videos_id) {\n    $redirectUri = getRedirectUri();\n    $isEmbed = 0;\n    if (stripos($redirectUri, \"embed\") !== false) {\n        $isEmbed = 1;\n    }\n    $video = Video::getVideoLight($videos_id);\n    if (empty($video)) {\n        return false;\n    }\n    return Video::getLink($videos_id, $video['clean_title'], $isEmbed);\n}\n\nfunction getRequestURI() {\n    if (empty($_SERVER['REQUEST_URI'])) {\n        return \"\";\n    }\n    return (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n}\n\nfunction getSelfURI() {\n    if (empty($_SERVER['PHP_SELF']) || empty($_SERVER['HTTP_HOST'])) {\n        return \"\";\n    }\n    global $global;\n    $http = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\");\n    if (preg_match('/^https:/i', $global['webSiteRootURL'])) {\n        $http = 'https';\n    }\n\n    $queryStringWithoutError = preg_replace(\"/error=[^&]*/\", \"\", @$_SERVER['QUERY_STRING']);\n    $phpselfWithoutIndex = preg_replace(\"/index.php/\", \"\", @$_SERVER['PHP_SELF']);\n    $url = $http . \"://$_SERVER[HTTP_HOST]$phpselfWithoutIndex?$queryStringWithoutError\";\n    $url = rtrim($url, '?');\n    return $url;\n}\n\nfunction isSameVideoAsSelfURI($url) {\n    return URLsAreSameVideo($url, getSelfURI());\n}\n\nfunction URLsAreSameVideo($url1, $url2) {\n    $videos_id1 = getVideoIDFromURL($url1);\n    $videos_id2 = getVideoIDFromURL($url2);\n    if (empty($videos_id1) || empty($videos_id2)) {\n        return false;\n    }\n    return $videos_id1 === $videos_id2;\n}\n\nfunction getVideos_id() {\n    global $_getVideos_id;\n    $videos_id = false;\n    if (isset($_getVideos_id) && is_int($_getVideos_id)) {\n        return $_getVideos_id;\n    }\n    if (isVideo()) {\n        $videos_id = getVideoIDFromURL(getSelfURI());\n        if (empty($videos_id) && !empty($_REQUEST['videoName'])) {\n            $video = Video::getVideoFromCleanTitle($_REQUEST['videoName']);\n            if (!empty($video)) {\n                $videos_id = $video['id'];\n            }\n        }\n        setVideos_id($videos_id);\n    }\n    if (empty($videos_id) && !empty($_REQUEST['playlists_id'])) {\n        AVideoPlugin::loadPlugin('PlayLists');\n        $video = PlayLists::isPlayListASerie($_REQUEST['playlists_id']);\n        if (!empty($video)) {\n            $videos_id = $video['id'];\n        }\n    }\n\n    if (empty($videos_id) && !empty($_REQUEST['v'])) {\n        $videos_id = $_REQUEST['v'];\n    }\n\n    $videos_id = videosHashToID($videos_id);\n\n    return $videos_id;\n}\n\nfunction setVideos_id($videos_id) {\n    global $_getVideos_id;\n    $_getVideos_id = $videos_id;\n}\n\nfunction getPlaylists_id() {\n    global $_isPlayList;\n    if (!isset($_isPlayList)) {\n        $_isPlayList = false;\n        if (isPlayList()) {\n            $_isPlayList = intval(@$_GET['playlists_id']);\n            if (empty($_isPlayList)) {\n                $videos_id = getVideos_id();\n                if (empty($videos_id)) {\n                    $_isPlayList = false;\n                } else {\n                    $v = Video::getVideoLight($videos_id);\n                    if (empty($v) || empty($v['serie_playlists_id'])) {\n                        $_isPlayList = false;\n                    } else {\n                        $_isPlayList = $v['serie_playlists_id'];\n                    }\n                }\n            }\n        }\n    }\n    return $_isPlayList;\n}\n\nfunction isVideoOrAudioNotEmbed() {\n    if (!isVideo()) {\n        return false;\n    }\n    $videos_id = getVideos_id();\n    if (empty($videos_id)) {\n        return false;\n    }\n    $v = Video::getVideoLight($videos_id);\n    if (empty($v)) {\n        return false;\n    }\n    $types = ['audio', 'video'];\n    if (in_array($v['type'], $types)) {\n        return true;\n    }\n    return false;\n}\n\nfunction getVideoIDFromURL($url) {\n    if (preg_match(\"/v=([0-9]+)/\", $url, $matches)) {\n        return intval($matches[1]);\n    }\n    if (preg_match('/\\/(video|videoEmbed|v|vEmbed|article|articleEmbed)\\/([0-9]+)/', $url, $matches)) {\n        if (is_numeric($matches[1])) {\n            return intval($matches[1]);\n        } elseif (is_numeric($matches[2])) {\n            return intval($matches[2]);\n        }\n    }\n    if (AVideoPlugin::isEnabledByName('PlayLists')) {\n        if (preg_match('/player.php\\?playlists_id=([0-9]+)/', $url, $matches)) {\n            $serie_playlists_id = intval($matches[1]);\n            $video = PlayLists::isPlayListASerie($serie_playlists_id);\n            if ($video) {\n                return $video['id'];\n            }\n        }\n    }\n    if (preg_match(\"/v=(\\.[0-9a-zA-Z_-]+)/\", $url, $matches)) {\n        return hashToID($matches[1]);\n    }\n    if (preg_match('/\\/(video|videoEmbed|v|vEmbed|article|articleEmbed)\\/(\\.[0-9a-zA-Z_-]+)/', $url, $matches)) {\n        return hashToID($matches[2]);\n    }\n    return false;\n}\n\nfunction getBackURL() {\n    global $global;\n    $backURL = getRedirectUri();\n    if (empty($backURL)) {\n        $backURL = getRequestURI();\n    }\n    if (isSameVideoAsSelfURI($backURL)) {\n        $backURL = getHomeURL();\n    }\n    return $backURL;\n}\n\nfunction getHomeURL() {\n    global $global, $advancedCustomUser, $advancedCustom;\n    if (isValidURL($advancedCustomUser->afterLoginGoToURL)) {\n        return $advancedCustomUser->afterLoginGoToURL;\n    } elseif (isValidURL($advancedCustom->logoMenuBarURL) && isSameDomainAsMyAVideo($advancedCustom->logoMenuBarURL)) {\n        return $advancedCustom->logoMenuBarURL;\n    }\n    return $global['webSiteRootURL'];\n}\n\nfunction isValidURL($url) {\n    //var_dump(empty($url), !is_string($url), preg_match(\"/^http.*/\", $url), filter_var($url, FILTER_VALIDATE_URL));\n    if (empty($url) || !is_string($url)) {\n        return false;\n    }\n    if (preg_match(\"/^http.*/\", $url) && filter_var($url, FILTER_VALIDATE_URL)) {\n        return true;\n    }\n    return false;\n}\n\nfunction hasLastSlash($word) {\n    return substr($word, -1) === '/';\n}\n\nfunction addLastSlash($word) {\n    return $word . (hasLastSlash($word) ? \"\" : \"/\");\n}\n\nfunction URLHasLastSlash() {\n    return hasLastSlash($_SERVER[\"REQUEST_URI\"]);\n}\n\nfunction ucname($str) {\n    $str = ucwords(strtolower($str));\n\n    foreach (['\\'', '-'] as $delim) {\n        if (strpos($str, $delim) !== false) {\n            $str = implode($delim, array_map('ucfirst', explode($delim, $str)));\n        }\n    }\n    return $str;\n}\n\nfunction sanitize_input($input) {\n    return htmlentities(strip_tags($input));\n}\n\nfunction sanitize_array_item(&$item, $key) {\n    $item = sanitize_input($item);\n}\n\nfunction getSEOComplement($parameters = []) {\n    global $config;\n\n    $allowedTypes = $parameters[\"allowedTypes\"] ?? null;\n    $addAutoPrefix = $parameters[\"addAutoPrefix\"] ?? true;\n    $addCategory = $parameters[\"addCategory\"] ?? true;\n\n    $parts = [];\n\n    if (!empty($_GET['error'])) {\n        array_push($parts, __(\"Error\"));\n    }\n\n    if ($addCategory && !empty($_GET['catName'])) {\n        array_push($parts, $_GET['catName']);\n    }\n\n    if (!empty($_GET['channelName'])) {\n        array_push($parts, $_GET['channelName']);\n    }\n\n    if (!empty($_GET['type'])) {\n        $type = $_GET['type'];\n        if (empty($allowedTypes) || in_array(strtolower($type), $allowedTypes)) {\n            array_push($parts, __(ucname($type)));\n        }\n    }\n\n    if (!empty($_GET['showOnly'])) {\n        array_push($parts, $_GET['showOnly']);\n    }\n\n    if (!empty($_GET['page'])) {\n        $page = intval($_GET['page']);\n        if ($page > 1) {\n            array_push($parts, sprintf(__(\"Page %d\"), $page));\n        }\n    }\n\n    // Cleaning all entries in the $parts array\n    array_walk($parts, 'sanitize_array_item');\n\n    $txt = implode($config->getPageTitleSeparator(), $parts);\n    $txt = (!empty($txt) && $addAutoPrefix ? $config->getPageTitleSeparator() : \"\") . $txt;\n\n    return $txt;\n}\n\nfunction getCurrentPage() {\n    if (!empty($_REQUEST['current'])) {\n        return intval($_REQUEST['current']);\n    } elseif (!empty($_POST['current'])) {\n        return intval($_POST['current']);\n    } elseif (!empty($_GET['current'])) {\n        return intval($_GET['current']);\n    } elseif (isset($_GET['start']) && isset($_GET['length'])) { // for the bootgrid\n        $start = intval($_GET['start']);\n        $length = intval($_GET['length']);\n        if (!empty($start) && !empty($length)) {\n            return floor($start / $length) + 1;\n        }\n    }\n    return 1;\n}\n\nfunction getRowCount($default = 1000) {\n    global $global;\n    if (!empty($_REQUEST['rowCount'])) {\n        $defaultN = intval($_REQUEST['rowCount']);\n    } elseif (!empty($_POST['rowCount'])) {\n        $defaultN = intval($_POST['rowCount']);\n    } elseif (!empty($_GET['rowCount'])) {\n        $defaultN = intval($_GET['rowCount']);\n    } elseif (!empty($_REQUEST['length'])) {\n        $defaultN = intval($_REQUEST['length']);\n    } elseif (!empty($_POST['length'])) {\n        $defaultN = intval($_POST['length']);\n    } elseif (!empty($_GET['length'])) {\n        $defaultN = intval($_GET['length']);\n    } elseif (!empty($global['rowCount'])) {\n        $defaultN = intval($global['rowCount']);\n    }\n    return (!empty($defaultN) && $defaultN > 0) ? $defaultN : $default;\n}\n\nfunction getSearchVar() {\n    if (!empty($_REQUEST['search'])) {\n        return $_REQUEST['search'];\n    } elseif (!empty($_REQUEST['q'])) {\n        return $_REQUEST['q'];\n    }\n    if (!empty($_REQUEST['searchPhrase'])) {\n        return $_REQUEST['searchPhrase'];\n    } elseif (!empty($_REQUEST['search']['value'])) {\n        return $_REQUEST['search']['value'];\n    }\n    return \"\";\n}\n\n$cleanSearchHistory = '';\n\nfunction cleanSearchVar() {\n    global $cleanSearchHistory;\n    $search = getSearchVar();\n    if (!empty($search)) {\n        $cleanSearchHistory = $search;\n    }\n    $searchIdex = ['q', 'searchPhrase', 'search'];\n    foreach ($searchIdex as $value) {\n        unset($_REQUEST[$value], $_POST[$value], $_GET[$value]);\n    }\n}\n\nfunction reloadSearchVar() {\n    global $cleanSearchHistory;\n    $_REQUEST['search'] = $cleanSearchHistory;\n    if (empty($_GET['search'])) {\n        $_GET['search'] = $cleanSearchHistory;\n    }\n    if (empty($_POST['search'])) {\n        $_POST['search'] = $cleanSearchHistory;\n    }\n}\n\nfunction wget($url, $filename, $debug = false) {\n    if (empty($url) || $url == \"php://input\" || !preg_match(\"/^http/\", $url)) {\n        return false;\n    }\n    if (wgetIsLocked($url)) {\n        if ($debug) {\n            _error_log(\"wget: ERROR the url is already downloading $url, $filename\");\n        }\n        return false;\n    }\n    wgetLock($url);\n    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        $content = @file_get_contents($url);\n        if (!empty($content) && file_put_contents($filename, $content) > 100) {\n            wgetRemoveLock($url);\n            return true;\n        }\n        wgetRemoveLock($url);\n        return false;\n    }\n    $cmd = \"wget --tries=1 {$url} -O {$filename} --no-check-certificate\";\n    if ($debug) {\n        _error_log(\"wget Start ({$cmd}) \");\n    }\n    //echo $cmd;\n    exec($cmd);\n    wgetRemoveLock($url);\n    if (!file_exists($filename)) {\n        _error_log(\"wget: ERROR the url does not download $url, $filename\");\n        return false;\n    }\n    if ($_SERVER['SCRIPT_NAME'] !== '/plugin/Live/m3u8.php' && empty(filesize($filename))) {\n        _error_log(\"wget: ERROR the url download but is empty $url, $filename\");\n        return true;\n    }\n    return false;\n}\n\n/**\n * Copy remote file over HTTP one small chunk at a time.\n *\n * @param $infile The full URL to the remote file\n * @param $outfile The path where to save the file\n */\nfunction copyfile_chunked($infile, $outfile) {\n    $chunksize = 10 * (1024 * 1024); // 10 Megs\n\n    /**\n     * parse_url breaks a part a URL into it's parts, i.e. host, path,\n     * query string, etc.\n     */\n    $parts = parse_url($infile);\n    $i_handle = fsockopen($parts['host'], 80, $errstr, $errcode, 5);\n    $o_handle = fopen($outfile, 'wb');\n\n    if ($i_handle == false || $o_handle == false) {\n        return false;\n    }\n\n    if (!empty($parts['query'])) {\n        $parts['path'] .= '?' . $parts['query'];\n    }\n\n    /**\n     * Send the request to the server for the file\n     */\n    $request = \"GET {$parts['path']} HTTP/1.1\\r\\n\";\n    $request .= \"Host: {$parts['host']}\\r\\n\";\n    $request .= \"User-Agent: Mozilla/5.0\\r\\n\";\n    $request .= \"Keep-Alive: 115\\r\\n\";\n    $request .= \"Connection: keep-alive\\r\\n\\r\\n\";\n    fwrite($i_handle, $request);\n\n    /**\n     * Now read the headers from the remote server. We'll need\n     * to get the content length.\n     */\n    $headers = [];\n    while (!feof($i_handle)) {\n        $line = fgets($i_handle);\n        if ($line == \"\\r\\n\") {\n            break;\n        }\n        $headers[] = $line;\n    }\n\n    /**\n     * Look for the Content-Length header, and get the size\n     * of the remote file.\n     */\n    $length = 0;\n    foreach ($headers as $header) {\n        if (stripos($header, 'Content-Length:') === 0) {\n            $length = (int) str_replace('Content-Length: ', '', $header);\n            break;\n        }\n    }\n\n    /**\n     * Start reading in the remote file, and writing it to the\n     * local file one chunk at a time.\n     */\n    $cnt = 0;\n    while (!feof($i_handle)) {\n        $buf = '';\n        $buf = fread($i_handle, $chunksize);\n        $bytes = fwrite($o_handle, $buf);\n        if ($bytes == false) {\n            return false;\n        }\n        $cnt += $bytes;\n\n        /**\n         * We're done reading when we've reached the conent length\n         */\n        if ($cnt >= $length) {\n            break;\n        }\n    }\n\n    fclose($i_handle);\n    fclose($o_handle);\n    return $cnt;\n}\n\nfunction wgetLockFile($url) {\n    return getTmpDir(\"YPTWget\") . md5($url) . \".lock\";\n}\n\nfunction wgetLock($url) {\n    $file = wgetLockFile($url);\n    return file_put_contents($file, time() . PHP_EOL, FILE_APPEND | LOCK_EX);\n}\n\nfunction wgetRemoveLock($url) {\n    $filename = wgetLockFile($url);\n    if (!file_exists($filename)) {\n        return false;\n    }\n    return unlink($filename);\n}\n\nfunction getLockFile($name) {\n    return getTmpDir(\"YPTLockFile\") . md5($name) . \".lock\";\n}\n\nfunction setLock($name) {\n    $file = getLockFile($name);\n    return file_put_contents($file, time());\n}\n\nfunction isLock($name, $timeout = 60) {\n    $file = getLockFile($name);\n    if (file_exists($file)) {\n        $time = intval(file_get_contents($file));\n        if ($time + $timeout < time()) {\n            return false;\n        }\n    }\n}\n\nfunction removeLock($name) {\n    $filename = getLockFile($name);\n    if (!file_exists($filename)) {\n        return false;\n    }\n    return unlink($filename);\n}\n\nfunction wgetIsLocked($url) {\n    $filename = wgetLockFile($url);\n    if (!file_exists($filename)) {\n        return false;\n    }\n    $time = intval(file_get_contents($filename));\n    if (time() - $time > 36000) { // more then 10 hours\n        unlink($filename);\n        return false;\n    }\n    return true;\n}\n\n// due the some OS gives a fake is_writable response\nfunction isWritable($dir) {\n    $dir = rtrim($dir, '/') . '/';\n    $file = $dir . uniqid();\n    $result = false;\n    $time = time();\n    if (@file_put_contents($file, $time)) {\n        if ($fileTime = @file_get_contents($file)) {\n            if ($fileTime == $time) {\n                $result = true;\n            }\n        }\n    }\n    @unlink($file);\n    return $result;\n}\n\nfunction _isWritable($dir) {\n    if (!isWritable($dir)) {\n        return false;\n    }\n    $tmpFile = \"{$dir}\" . uniqid();\n    $bytes = @file_put_contents($tmpFile, time());\n    @unlink($tmpFile);\n    return !empty($bytes);\n}\n\nfunction getTmpDir($subdir = \"\") {\n    global $global;\n    if (empty($_SESSION['getTmpDir'])) {\n        $_SESSION['getTmpDir'] = [];\n    }\n    if (empty($_SESSION['getTmpDir'][$subdir . \"_\"])) {\n        if (empty($global['tmpDir'])) {\n            $tmpDir = sys_get_temp_dir();\n            if (empty($tmpDir) || !_isWritable($tmpDir)) {\n                $tmpDir = getVideosDir() . \"cache\" . DIRECTORY_SEPARATOR;\n            }\n            $tmpDir = rtrim($tmpDir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n            $tmpDir = \"{$tmpDir}{$subdir}\";\n        } else {\n            $tmpDir = $global['tmpDir'];\n        }\n        $tmpDir = addLastSlash($tmpDir);\n        if (!is_dir($tmpDir)) {\n            mkdir($tmpDir, 0777, true);\n        }\n        _session_start();\n        $_SESSION['getTmpDir'][$subdir . \"_\"] = $tmpDir;\n    } else {\n        $tmpDir = $_SESSION['getTmpDir'][$subdir . \"_\"];\n    }\n    return $tmpDir;\n}\n\nfunction getTmpFile() {\n    return getTmpDir(\"tmpFiles\") . uniqid();\n}\n\nfunction getMySQLDate() {\n    global $global;\n    $sql = \"SELECT now() as time FROM configurations LIMIT 1\";\n    // I had to add this because the about from customize plugin was not loading on the about page http://127.0.0.1/AVideo/about\n    $res = sqlDAL::readSql($sql);\n    $data = sqlDAL::fetchAssoc($res);\n    sqlDAL::close($res);\n    if ($res) {\n        $row = $data['time'];\n    } else {\n        $row = false;\n    }\n    return $row;\n}\n\nfunction _file_put_contents($filename, $data, $flags = 0, $context = null) {\n    make_path($filename);\n    return file_put_contents($filename, $data, $flags, $context);\n}\n\nfunction html2plainText($html) {\n    $text = strip_tags($html);\n    $text = str_replace(['\\\\', \"\\n\", \"\\r\", '\"'], ['', ' ', ' ', ''], trim($text));\n    return $text;\n}\n\nfunction getInputPassword($id, $attributes = 'class=\"form-control\"', $paceholder = '') {\n    if (empty($paceholder)) {\n        $paceholder = __(\"Password\");\n    }\n    ?>\n    <div class=\"input-group\">\n        <span class=\"input-group-addon\"><i class=\"fas fa-lock\"></i></span>\n        <input id=\"<?php echo $id; ?>\" name=\"<?php echo $id; ?>\" type=\"password\"  placeholder=\"<?php echo $paceholder; ?>\" <?php echo $attributes; ?> >\n            <span class=\"input-group-addon\" style=\"cursor: pointer;\" id=\"toggle_<?php echo $id; ?>\"  data-toggle=\"tooltip\" data-placement=\"left\" title=\"<?php echo __('Show/Hide Password'); ?>\"><i class=\"fas fa-eye-slash\"></i></span>\n    </div>\n    <script>\n        $(document).ready(function () {\n            $('#toggle_<?php echo $id; ?>').click(function () {\n                $(this).find('i').toggleClass(\"fa-eye fa-eye-slash\");\n                if ($(this).find('i').hasClass(\"fa-eye\")) {\n                    $(\"#<?php echo $id; ?>\").attr(\"type\", \"text\");\n                } else {\n                    $(\"#<?php echo $id; ?>\").attr(\"type\", \"password\");\n                }\n            })\n        });\n    </script>\n    <?php\n}\n\nfunction getInputCopyToClipboard($id, $value, $attributes = 'class=\"form-control\" readonly=\"readonly\"', $paceholder = '') {\n    if (strpos($value, '\"') !== false) {\n        $valueAttr = \"value='{$value}'\";\n    } else {\n        $valueAttr = 'value=\"' . $value . '\"';\n    }\n    ?>\n    <div class=\"input-group\">\n        <input id=\"<?php echo $id; ?>\" type=\"text\"  placeholder=\"<?php echo $paceholder; ?>\" <?php echo $attributes; ?> <?php echo $valueAttr; ?> >\n            <span class=\"input-group-addon\" style=\"cursor: pointer;\" id=\"copyToClipboard_<?php echo $id; ?>\"  data-toggle=\"tooltip\" data-placement=\"left\" title=\"<?php echo __('Copy to Clipboard'); ?>\"><i class=\"fas fa-clipboard\"></i></span>\n    </div>\n    <script>\n        var timeOutCopyToClipboard_<?php echo $id; ?>;\n        $(document).ready(function () {\n            $('#copyToClipboard_<?php echo $id; ?>').click(function () {\n                clearTimeout(timeOutCopyToClipboard_<?php echo $id; ?>);\n                $('#copyToClipboard_<?php echo $id; ?>').find('i').removeClass(\"fa-clipboard\");\n                $('#copyToClipboard_<?php echo $id; ?>').find('i').addClass(\"text-success\");\n                $('#copyToClipboard_<?php echo $id; ?>').addClass('bg-success');\n                $('#copyToClipboard_<?php echo $id; ?>').find('i').addClass(\"fa-clipboard-check\");\n                timeOutCopyToClipboard_<?php echo $id; ?> = setTimeout(function () {\n                    $('#copyToClipboard_<?php echo $id; ?>').find('i').removeClass(\"fa-clipboard-check\");\n                    $('#copyToClipboard_<?php echo $id; ?>').find('i').removeClass(\"text-success\");\n                    $('#copyToClipboard_<?php echo $id; ?>').removeClass('bg-success');\n                    $('#copyToClipboard_<?php echo $id; ?>').find('i').addClass(\"fa-clipboard\");\n                }, 3000);\n                copyToClipboard($('#<?php echo $id; ?>').val());\n            })\n        });\n    </script>\n    <?php\n}\n\nfunction getButtontCopyToClipboard($elemToCopyId, $attributes = 'class=\"btn btn-default btn-sm btn-xs pull-right\"', $label = \"Copy to Clipboard\") {\n    $id = \"getButtontCopyToClipboard\" . uniqid();\n    ?>\n    <button id=\"<?php echo $id; ?>\" <?php echo $attributes; ?> data-toggle=\"tooltip\" data-placement=\"left\" title=\"<?php echo __($label); ?>\"><i class=\"fas fa-clipboard\"></i> <?php echo __($label); ?></button>\n    <script>\n        var timeOutCopyToClipboard_<?php echo $id; ?>;\n        $(document).ready(function () {\n            $('#<?php echo $id; ?>').click(function () {\n                clearTimeout(timeOutCopyToClipboard_<?php echo $id; ?>);\n                $('#<?php echo $id; ?>').find('i').removeClass(\"fa-clipboard\");\n                $('#<?php echo $id; ?>').find('i').addClass(\"text-success\");\n                $('#<?php echo $id; ?>').addClass('bg-success');\n                $('#<?php echo $id; ?>').find('i').addClass(\"fa-clipboard-check\");\n                timeOutCopyToClipboard_<?php echo $id; ?> = setTimeout(function () {\n                    $('#<?php echo $id; ?>').find('i').removeClass(\"fa-clipboard-check\");\n                    $('#<?php echo $id; ?>').find('i').removeClass(\"text-success\");\n                    $('#<?php echo $id; ?>').removeClass('bg-success');\n                    $('#<?php echo $id; ?>').find('i').addClass(\"fa-clipboard\");\n                }, 3000);\n                copyToClipboard($('#<?php echo $elemToCopyId; ?>').val());\n            })\n        });\n    </script>\n    <?php\n    return $id;\n}\n\nfunction fakeBrowser($url) {\n    // create curl resource\n    $ch = curl_init();\n\n    // set url\n    curl_setopt($ch, CURLOPT_URL, $url);\n\n    //return the transfer as a string\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');\n\n    // $output contains the output string\n    $output = curl_exec($ch);\n\n    // close curl resource to free up system resources\n    curl_close($ch);\n    return $output;\n}\n\nfunction examineJSONError($object) {\n    $json = json_encode($object);\n    if (json_last_error()) {\n        echo \"Error 1 Found: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n    $object = object_to_array($object);\n    $json = json_encode($object);\n    if (json_last_error()) {\n        echo \"Error 1 Found after array conversion: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $json = json_encode($object, JSON_UNESCAPED_UNICODE);\n    if (json_last_error()) {\n        echo \"Error 1 Found with JSON_UNESCAPED_UNICODE: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $objectEncoded = $object;\n\n    array_walk_recursive($objectEncoded, function (&$item) {\n        if (is_string($item)) {\n            $item = utf8_encode($item);\n        }\n    });\n    $json = json_encode($objectEncoded);\n    if (json_last_error()) {\n        echo \"Error 2 Found after array conversion: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $json = json_encode($objectEncoded, JSON_UNESCAPED_UNICODE);\n    if (json_last_error()) {\n        echo \"Error 2 Found with JSON_UNESCAPED_UNICODE: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $objectDecoded = $object;\n\n    array_walk_recursive($objectDecoded, function (&$item) {\n        if (is_string($item)) {\n            $item = utf8_decode($item);\n        }\n    });\n    $json = json_encode($objectDecoded);\n    if (json_last_error()) {\n        echo \"Error 2 Found after array conversion: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $json = json_encode($objectDecoded, JSON_UNESCAPED_UNICODE);\n    if (json_last_error()) {\n        echo \"Error 2 Found with JSON_UNESCAPED_UNICODE: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    return false;\n}\n\nfunction _json_encode($object) {\n    if (empty($object)) {\n        return false;\n    }\n    if (is_string($object)) {\n        return $object;\n    }\n    $json = json_encode($object);\n    if (empty($json) && json_last_error()) {\n        //_error_log(\"_json_encode: Error 1 Found: \" . json_last_error_msg());\n        $object = object_to_array($object);\n        $json = json_encode($object);\n        if (empty($json) && json_last_error()) {\n            //_error_log(\"_json_encode: Error 2 Found: \" . json_last_error_msg());\n            $json = json_encode($object, JSON_UNESCAPED_UNICODE);\n            if (json_last_error()) {\n                _error_log(\"_json_encode: Error 3 Found: {$object} \" . json_last_error_msg() . PHP_EOL . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n                $objectEncoded = $object;\n                array_walk_recursive($objectEncoded, function (&$item) {\n                    if (is_string($item)) {\n                        $item = utf8_encode($item);\n                    }\n                });\n                $json = json_encode($objectEncoded);\n                if (empty($json) && json_last_error()) {\n                    _error_log(\"_json_encode: Error 4 Found: \" . json_last_error_msg());\n                    $json = json_encode($objectEncoded, JSON_UNESCAPED_UNICODE);\n                    if (json_last_error()) {\n                        _error_log(\"_json_encode: Error 5 Found: \" . json_last_error_msg());\n                        $objectDecoded = $object;\n                        array_walk_recursive($objectDecoded, function (&$item) {\n                            if (is_string($item)) {\n                                $item = utf8_decode($item);\n                            }\n                        });\n                        $json = json_encode($objectDecoded);\n                        if (empty($json) && json_last_error()) {\n                            _error_log(\"_json_encode: Error 6 Found: \" . json_last_error_msg());\n                            $json = json_encode($objectDecoded, JSON_UNESCAPED_UNICODE);\n                            if (empty($json) && json_last_error()) {\n                                _error_log(\"_json_encode: Error 7 Found: \" . json_last_error_msg());\n                                array_walk_recursive($objectDecoded, function (&$item) {\n                                    if (is_string($item)) {\n                                        $item = cleanString($item);\n                                    }\n                                });\n                                $json = json_encode($users);\n                                if (json_last_error()) {\n                                    _error_log(\"_json_encode: Error 8 Found: \" . json_last_error_msg());\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return $json;\n}\n\nfunction _json_decode($object) {\n    if (empty($object)) {\n        return false;\n    }\n    if (!is_string($object)) {\n        return $object;\n    }\n    $json = json_decode($object);\n    if ($json === null) {\n        $object = str_replace([\"\\r\", \"\\n\"], ['\\r', '\\n'], $object);\n        return json_decode($object);\n    } else {\n        return $json;\n    }\n}\n\n// this will make sure the strring will fits in the database field\nfunction _substr($string, $start, $length = null) {\n    // make sure the name is not chunked in case of multibyte string\n    if (function_exists(\"mb_strcut\")) {\n        return mb_strcut($string, $start, $length, \"UTF-8\");\n    } else {\n        return substr($string, $start, $length);\n    }\n}\n\nfunction getPagination($total, $page = 0, $link = \"\", $maxVisible = 10, $infinityScrollGetFromSelector = \"\", $infinityScrollAppendIntoSelector = \"\") {\n    global $global, $advancedCustom;\n    if ($total < 2) {\n        return '<!-- getPagination total < 2 (' . json_encode($total) . ') -->';\n    }\n\n    if (empty($page)) {\n        $page = getCurrentPage();\n    }\n\n    $isInfiniteScroll = !empty($infinityScrollGetFromSelector) && !empty($infinityScrollAppendIntoSelector);\n\n    $uid = md5($link);\n\n    if ($total < $maxVisible) {\n        $maxVisible = $total;\n    }\n    if (empty($link)) {\n        $link = getSelfURI();\n        if (preg_match(\"/(current=[0-9]+)/i\", $link, $match)) {\n            $link = str_replace($match[1], \"current={page}\", $link);\n        } else {\n            //$link = addQueryStringParameter($link, 'current', '{page}');\n            $link .= (parse_url($link, PHP_URL_QUERY) ? '&' : '?') . 'current={page}';\n        }\n    }\n\n    $class = '';\n    if (!empty($infinityScrollGetFromSelector) && !empty($infinityScrollAppendIntoSelector)) {\n        $class = \"infiniteScrollPagination{$uid} hidden\";\n    }\n\n    if ($isInfiniteScroll && $page > 1) {\n        if (preg_match(\"/\\{page\\}/\", $link, $match)) {\n            $pageForwardLink = str_replace(\"{page}\", $page + 1, $link);\n        } else {\n            $pageForwardLink = addQueryStringParameter($link, 'current', $page + 1);\n        }\n\n        return \"<nav class=\\\"{$class}\\\">\"\n                . \"<ul class=\\\"pagination\\\">\"\n                . \"<li class=\\\"page-item\\\"><a class=\\\"page-link pagination__next pagination__next{$uid}\\\" href=\\\"{$pageForwardLink}\\\"></a></li></ul></nav>\";\n    }\n\n    $pag = '<nav aria-label=\"Page navigation\" class=\"text-center ' . $class . '\"><ul class=\"pagination\"><!-- page ' . $page . ' maxVisible = ' . $maxVisible . ' -->';\n    $start = 1;\n    $end = $maxVisible;\n\n    if ($page > $maxVisible - 2) {\n        $start = $page - ($maxVisible - 2);\n        $end = $page + 2;\n        if ($end > $total) {\n            $rest = $end - $total;\n            $start -= $rest;\n            $end -= $rest;\n        }\n    }\n    if ($start <= 0) {\n        $start = 1;\n    }\n    if (!$isInfiniteScroll) {\n        if ($page > 1) {\n            if (preg_match(\"/\\{page\\}/\", $link, $match)) {\n                $pageLink = str_replace(\"{page}\", 1, $link);\n                $pageBackLink = str_replace(\"{page}\", $page - 1, $link);\n            } else {\n                $pageLink = addQueryStringParameter($link, 'current', 1);\n                $pageBackLink = addQueryStringParameter($link, 'current', $page - 1);\n            }\n            if ($start > ($page - 1)) {\n                $pag .= PHP_EOL . '<li class=\"page-item\"><a class=\"page-link\" href=\"' . $pageLink . '\" tabindex=\"-1\" onclick=\"modal.showPleaseWait();\"><i class=\"fas fa-angle-double-left\"></i></a></li>';\n            }\n            $pag .= PHP_EOL . '<li class=\"page-item\"><a class=\"page-link\" href=\"' . $pageBackLink . '\" tabindex=\"-1\" onclick=\"modal.showPleaseWait();\"><i class=\"fas fa-angle-left\"></i></a></li>';\n        }\n        for ($i = $start; $i <= $end; $i++) {\n            if ($i == $page) {\n                $pag .= PHP_EOL . ' <li class=\"page-item active\"><span class=\"page-link\"> ' . $i . ' <span class=\"sr-only\">(current)</span></span></li>';\n            } else {\n                $pageLink = str_replace(\"{page}\", $i, $link);\n                $pag .= PHP_EOL . ' <li class=\"page-item\"><a class=\"page-link\" href=\"' . $pageLink . '\" onclick=\"modal.showPleaseWait();\"> ' . $i . ' </a></li>';\n            }\n        }\n    }\n    if ($page < $total) {\n        if (preg_match(\"/\\{page\\}/\", $link, $match)) {\n            $pageLink = str_replace(\"{page}\", $total, $link);\n            $pageForwardLink = str_replace(\"{page}\", $page + 1, $link);\n        } else {\n            $pageLink = addQueryStringParameter($link, 'current', $total);\n            $pageForwardLink = addQueryStringParameter($link, 'current', $page + 1);\n        }\n        $pag .= PHP_EOL . '<li class=\"page-item\"><a class=\"page-link pagination__next' . $uid . '\" href=\"' . $pageForwardLink . '\" tabindex=\"-1\" onclick=\"modal.showPleaseWait();\"><i class=\"fas fa-angle-right\"></i></a></li>';\n        if ($total > ($end + 1)) {\n            $pag .= PHP_EOL . '<li class=\"page-item\"><a class=\"page-link\" href=\"' . $pageLink . '\" tabindex=\"-1\" onclick=\"modal.showPleaseWait();\"><i class=\"fas fa-angle-double-right\"></i></a></li>';\n        }\n    }\n    $pag .= PHP_EOL . '</ul></nav> ';\n\n    if ($isInfiniteScroll) {\n        $content = file_get_contents($global['systemRootPath'] . 'objects/functiongetPagination.php');\n        $pag .= str_replace(\n                ['$uid', '$webSiteRootURL', '$infinityScrollGetFromSelector', '$infinityScrollAppendIntoSelector'],\n                [$uid, $global['webSiteRootURL'], $infinityScrollGetFromSelector, $infinityScrollAppendIntoSelector],\n                $content\n        );\n    }\n\n    return $pag;\n}\n\nfunction getShareMenu($title, $permaLink, $URLFriendly, $embedURL, $img, $class = \"row bgWhite list-group-item menusDiv\", $videoLengthInSeconds = 0) {\n    global $global, $advancedCustom;\n    include $global['systemRootPath'] . 'objects/functiongetShareMenu.php';\n}\n\nfunction getSharePopupButton($videos_id, $url = \"\", $title = \"\") {\n    global $global, $advancedCustom;\n    if ($advancedCustom->disableShareOnly || $advancedCustom->disableShareAndPlaylist) {\n        return false;\n    }\n    $video['id'] = $videos_id;\n    include $global['systemRootPath'] . 'view/include/socialModal.php';\n}\n\nfunction forbiddenPage($message = '', $logMessage = false, $unlockPassword = '', $namespace = '') {\n    global $global;\n    if (!empty($unlockPassword)) {\n        if (empty($namespace)) {\n            $namespace = $_SERVER[\"SCRIPT_FILENAME\"];\n        }\n        if (!empty($_REQUEST['unlockPassword'])) {\n            if ($_REQUEST['unlockPassword'] == $unlockPassword) {\n                _session_start();\n                if (!isset($_SESSION['user']['forbiddenPage'])) {\n                    $_SESSION['user']['forbiddenPage'] = [];\n                }\n                $_SESSION['user']['forbiddenPage'][$namespace] = $_REQUEST['unlockPassword'];\n            }\n        }\n        if (!empty($_SESSION['user']['forbiddenPage'][$namespace]) && $unlockPassword === $_SESSION['user']['forbiddenPage'][$namespace]) {\n            return true;\n        }\n    }\n    $_REQUEST['403ErrorMsg'] = $message;\n    if ($logMessage) {\n        _error_log($message);\n    }\n\n    $headers = headers_list(); // get list of headers\n    foreach ($headers as $header) { // iterate over that list of headers\n        if (stripos($header, 'Content-Type') !== FALSE) { // if the current header hasthe String \"Content-Type\" in it\n            $headerParts = explode(':', $header); // split the string, getting an array\n            $headerValue = trim($headerParts[1]); // take second part as value\n            $contentType = $headerValue;\n            break;\n        }\n    }\n    if (empty($unlockPassword) && preg_match('/json/i', $contentType)) {\n        header(\"Content-Type: application/json\");\n        $obj = new stdClass();\n        $obj->error = true;\n        $obj->msg = $message;\n        $obj->forbiddenPage = true;\n        die(json_encode($obj));\n    } else {\n        header(\"Content-Type: text/html\");\n        include $global['systemRootPath'] . 'view/forbiddenPage.php';\n    }\n    exit;\n}\n\ndefine('E_FATAL', E_ERROR | E_USER_ERROR | E_PARSE | E_CORE_ERROR |\n        E_COMPILE_ERROR | E_RECOVERABLE_ERROR);\nif (!isCommandLineInterface() && !isAVideoEncoder()) {\n    register_shutdown_function('avidoeShutdown');\n}\n\nfunction avidoeShutdown() {\n    global $global;\n    $error = error_get_last();\n    if ($error && ($error['type'] & E_FATAL)) {\n        var_dump($error);\n        _error_log($error, AVideoLog::$ERROR);\n        header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error', true, 500);\n        if (!User::isAdmin()) {\n            if (!preg_match('/json\\.php$/i', $_SERVER['PHP_SELF'])) {\n                echo '<!-- This page means an error 500 Internal Server Error, check your log file -->' . PHP_EOL;\n                include $global['systemRootPath'] . 'view/maintanance.html';\n            } else {\n                $o = new stdClass();\n                $o->error = true;\n                $o->msg = __('Under Maintanance');\n                echo json_encode($o);\n            }\n        } else {\n            echo '<pre>';\n            var_dump($error);\n            var_dump(debug_backtrace());\n            echo '</pre>';\n        }\n        exit;\n    }\n}\n\nfunction videoNotFound($message, $logMessage = false) {\n    global $global;\n    $_REQUEST['404ErrorMsg'] = $message;\n    if ($logMessage) {\n        _error_log($message);\n    }\n    include $global['systemRootPath'] . 'view/videoNotFound.php';\n    exit;\n}\n\nfunction isForbidden() {\n    global $global;\n    if (!empty($global['isForbidden'])) {\n        return true;\n    }\n    return false;\n}\n\nfunction diskUsageBars() {\n    return ''; //TODO check why it is slowing down\n    global $global;\n    ob_start();\n    include $global['systemRootPath'] . 'objects/functiondiskUsageBars.php';\n    $contents = ob_get_contents();\n    ob_end_clean();\n    return $contents;\n}\n\nfunction getDomain() {\n    global $global, $_getDomain;\n\n    if (isset($_getDomain)) {\n        return $_getDomain;\n    }\n\n    if (empty($_SERVER['HTTP_HOST'])) {\n        $parse = parse_url($global['webSiteRootURL']);\n        $domain = $parse['host'];\n    } else {\n        $domain = $_SERVER['HTTP_HOST'];\n    }\n    $domain = str_replace(\"www.\", \"\", $domain);\n    $domain = preg_match(\"/^\\..+/\", $domain) ? ltrim($domain, '.') : $domain;\n    $domain = preg_replace('/:[0-9]+$/', '', $domain);\n    $_getDomain = $domain;\n    return $domain;\n}\n\nfunction getHostOnlyFromURL($url) {\n    $parse = parse_url($url);\n    $domain = $parse['host'];\n    $domain = str_replace(\"www.\", \"\", $domain);\n    $domain = preg_match(\"/^\\..+/\", $domain) ? ltrim($domain, '.') : $domain;\n    $domain = preg_replace('/:[0-9]+$/', '', $domain);\n    return $domain;\n}\n\n/**\n * It's separated by time, version, clock_seq_hi, clock_seq_lo, node, as indicated in the followoing rfc.\n *\n * From the IETF RFC4122:\n * 8-4-4-4-12\n * @return string\n */\nfunction getDeviceID($useRandomString = true) {\n    $ip = md5(getRealIpAddr());\n    if (empty($_SERVER['HTTP_USER_AGENT'])) {\n        $device = \"unknowDevice-{$ip}\";\n        $device .= '-' . intval(User::getId());\n        return $device;\n    }\n\n    if (empty($useRandomString)) {\n        $device = 'ypt-' . get_browser_name() . '-' . getOS() . '-' . $ip . '-' . md5($_SERVER['HTTP_USER_AGENT']);\n        $device = str_replace(\n                ['[', ']', ' '],\n                ['', '', '_'],\n                $device\n        );\n        $device .= '-' . intval(User::getId());\n        return $device;\n    }\n\n    $cookieName = \"yptDeviceID\";\n    if (empty($_COOKIE[$cookieName])) {\n        if (empty($_GET[$cookieName])) {\n            $id = uniqidV4();\n            $_GET[$cookieName] = $id;\n        }\n        if (empty($_SESSION[$cookieName])) {\n            _session_start();\n            $_SESSION[$cookieName] = $_GET[$cookieName];\n        } else {\n            $_GET[$cookieName] = $_SESSION[$cookieName];\n        }\n        if (!_setcookie($cookieName, $_GET[$cookieName], strtotime(\"+ 1 year\"))) {\n            return \"getDeviceIDError\";\n        }\n        $_COOKIE[$cookieName] = $_GET[$cookieName];\n        return $_GET[$cookieName];\n    }\n    return $_COOKIE[$cookieName];\n}\n\nfunction deviceIdToObject($deviceID) {\n    $parts = explode('-', $deviceID);\n    $obj = new stdClass();\n    $obj->browser = '';\n    $obj->os = '';\n    $obj->ip = '';\n    $obj->user_agent = '';\n    $obj->users_id = 0;\n\n    foreach ($parts as $key => $value) {\n        $parts[$key] = str_replace('_', ' ', $value);\n    }\n\n    switch ($parts[0]) {\n        case 'ypt':\n            $obj->browser = $parts[1];\n            $obj->os = $parts[2];\n            $obj->ip = $parts[3];\n            $obj->user_agent = $parts[4];\n            $obj->users_id = $parts[5];\n            break;\n        case 'unknowDevice':\n            $obj->browser = $parts[0];\n            $obj->os = 'unknow OS';\n            $obj->ip = $parts[1];\n            $obj->user_agent = 'unknow UA';\n            $obj->users_id = $parts[2];\n            break;\n        default:\n            break;\n    }\n    return $obj;\n}\n\nfunction uniqidV4() {\n    $randomString = openssl_random_pseudo_bytes(16);\n    $time_low = bin2hex(substr($randomString, 0, 4));\n    $time_mid = bin2hex(substr($randomString, 4, 2));\n    $time_hi_and_version = bin2hex(substr($randomString, 6, 2));\n    $clock_seq_hi_and_reserved = bin2hex(substr($randomString, 8, 2));\n    $node = bin2hex(substr($randomString, 10, 6));\n\n    /**\n     * Set the four most significant bits (bits 12 through 15) of the\n     * time_hi_and_version field to the 4-bit version number from\n     * Section 4.1.3.\n     * @see http://tools.ietf.org/html/rfc4122#section-4.1.3\n     */\n    $time_hi_and_version = hexdec($time_hi_and_version);\n    $time_hi_and_version = $time_hi_and_version >> 4;\n    $time_hi_and_version = $time_hi_and_version | 0x4000;\n\n    /**\n     * Set the two most significant bits (bits 6 and 7) of the\n     * clock_seq_hi_and_reserved to zero and one, respectively.\n     */\n    $clock_seq_hi_and_reserved = hexdec($clock_seq_hi_and_reserved);\n    $clock_seq_hi_and_reserved = $clock_seq_hi_and_reserved >> 2;\n    $clock_seq_hi_and_reserved = $clock_seq_hi_and_reserved | 0x8000;\n\n    return sprintf('%08s-%04s-%04x-%04x-%012s', $time_low, $time_mid, $time_hi_and_version, $clock_seq_hi_and_reserved, $node);\n}\n\n// guid\n\nfunction _setcookie($cookieName, $value, $expires = 0) {\n    if (empty($expires)) {\n        if (empty($config) || !is_object($config)) {\n            $config = new Configuration();\n        }\n        $expires = time() + $config->getSession_timeout();\n    }\n\n    if (version_compare(phpversion(), '7.3', '>=')) {\n        $cookie_options = [\n            'expires' => $expires,\n            'path' => '/',\n            'domain' => getDomain(),\n            'secure' => true,\n            'httponly' => false,\n            'samesite' => 'None'\n        ];\n        return setcookie($cookieName, $value, $cookie_options);\n    } else {\n        return setcookie($cookieName, $value, (int) $expires, \"/\", getDomain());\n    }\n}\n\nfunction _unsetcookie($cookieName) {\n    $domain = getDomain();\n    $expires = strtotime(\"-10 years\");\n    $value = '';\n    _setcookie($cookieName, $value, $expires);\n    setcookie($cookieName, $value, (int) $expires, \"/\") && setcookie($cookieName, $value, (int) $expires);\n    setcookie($cookieName, $value, (int) $expires, \"/\", str_replace(\"www\", \"\", $domain));\n    setcookie($cookieName, $value, (int) $expires, \"/\", \"www.\" . $domain);\n    setcookie($cookieName, $value, (int) $expires, \"/\", \".\" . $domain);\n    setcookie($cookieName, $value, (int) $expires, \"/\", $domain);\n    setcookie($cookieName, $value, (int) $expires, \"/\");\n    setcookie($cookieName, $value, (int) $expires);\n    unset($_COOKIE[$cookieName]);\n}\n\n/**\n * This function is not 100% but try to tell if the site is in an iFrame\n * @global type $global\n * @return boolean\n */\nfunction isIframeInDifferentDomain() {\n    global $global;\n    if (!isIframe()) {\n        return false;\n    }\n    return isSameDomainAsMyAVideo($_SERVER['HTTP_REFERER']);\n}\n\nfunction isIframe() {\n    global $global;\n    if (isset($_SERVER['HTTP_SEC_FETCH_DEST']) && $_SERVER['HTTP_SEC_FETCH_DEST'] === 'iframe') {\n        return true;\n    }\n    if (empty($_SERVER['HTTP_REFERER']) || $_SERVER['HTTP_REFERER'] == $global['webSiteRootURL'] || str_replace('view/', '', getSelfURI()) == $global['webSiteRootURL']) {\n        return false;\n    }\n    return true;\n}\n\nfunction getCredentialsURL() {\n    global $global;\n    return \"webSiteRootURL=\" . urlencode($global['webSiteRootURL']) . \"&user=\" . urlencode(User::getUserName()) . \"&pass=\" . urlencode(User::getUserPass()) . \"&encodedPass=1\";\n}\n\nfunction gotToLoginAndComeBackHere($msg) {\n    global $global;\n    if (User::isLogged()) {\n        forbiddenPage($msg);\n        exit;\n    }\n    if (!empty($_GET['comebackhere'])) {\n        return false;\n    }\n    header(\"Location: {$global['webSiteRootURL']}user?redirectUri=\" . urlencode(getSelfURI()) . \"&msg=\" . urlencode($msg) . \"&comebackhere=1\");\n    exit;\n}\n\nfunction setAlertMessage($msg, $type = \"msg\") {\n    _session_start();\n    $_SESSION['YPTalertMessage'][] = [$msg, $type];\n}\n\nfunction setToastMessage($msg) {\n    setAlertMessage($msg, \"toast\");\n}\n\nfunction showAlertMessage() {\n    if (!empty($_SESSION['YPTalertMessage'])) {\n        foreach ($_SESSION['YPTalertMessage'] as $value) {\n            if (!empty($value[0])) {\n                if (empty($_GET[$value[1]])) {\n                    $_GET[$value[1]] = [];\n                }\n                $_GET[$value[1]][] = $value[0];\n            }\n        }\n        _session_start();\n        unset($_SESSION['YPTalertMessage']);\n    }\n\n    $joinString = ['error', 'msg', 'success'];\n    foreach ($joinString as $value) {\n        if (!empty($_GET[$value]) && is_array($_GET[$value])) {\n            $_GET[$value] = array_unique($_GET[$value]);\n            $newStr = [];\n            foreach ($_GET[$value] as $value2) {\n                if (!empty($value2)) {\n                    $newStr[] = $value2;\n                }\n            }\n            $_GET[$value] = implode(\"<br>\", $newStr);\n        }\n    }\n\n    $check = ['error', 'msg', 'success', 'toast'];\n    foreach ($check as $value) {\n        if (!empty($_GET[$value])) {\n            if (is_array($_GET[$value])) {\n                $newStr = [];\n                foreach ($_GET[$value] as $key => $value2) {\n                    $value2 = str_replace('\"', \"''\", $value2);\n                    if (!empty($value2)) {\n                        $newStr[] = $value2;\n                    }\n                }\n                $_GET[$value] = $newStr;\n            } else {\n                $_GET[$value] = str_replace('\"', \"''\", $_GET[$value]);\n            }\n        }\n    }\n    echo \"/** showAlertMessage **/\", PHP_EOL;\n    if (!empty($_GET['error'])) {\n        echo 'avideoAlertError(\"' . $_GET['error'] . '\");';\n        echo 'window.history.pushState({}, document.title, \"' . getSelfURI() . '\");';\n    }\n    if (!empty($_GET['msg'])) {\n        echo 'avideoAlertInfo(\"' . $_GET['msg'] . '\");';\n        echo 'window.history.pushState({}, document.title, \"' . getSelfURI() . '\");';\n    }\n    if (!empty($_GET['success'])) {\n        echo 'avideoAlertSuccess(\"' . $_GET['success'] . '\");';\n        echo 'window.history.pushState({}, document.title, \"' . getSelfURI() . '\");';\n    }\n    if (!empty($_GET['toast'])) {\n        if (!is_array($_GET['toast'])) {\n            $_GET['toast'] = [$_GET['toast']];\n        } else {\n            $_GET['toast'] = array_unique($_GET['toast']);\n        }\n        foreach ($_GET['toast'] as $key => $value) {\n            $hideAfter = strlen(strip_tags($value)) * 150;\n\n            if ($hideAfter < 3000) {\n                $hideAfter = 3000;\n            }\n            if ($hideAfter > 15000) {\n                $hideAfter = 15000;\n            }\n\n            echo '$.toast({\n                    text: \"' . $value . '\",\n                    hideAfter: ' . $hideAfter . '   // in milli seconds\n                });console.log(\"Toast Hide after ' . $hideAfter . '\");';\n        }\n        echo 'window.history.pushState({}, document.title, \"' . getSelfURI() . '\");';\n    }\n    echo PHP_EOL, \"/** showAlertMessage END **/\";\n}\n\nfunction getResolutionLabel($res) {\n    if ($res == 720) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } elseif ($res == 1080) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } elseif ($res == 1440) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } elseif ($res == 2160) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } elseif ($res == 4320) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } else {\n        return '';\n    }\n}\n\nfunction getResolutionText($res) {\n    $res = intval($res);\n    if ($res >= 720 && $res < 1080) {\n        return \"HD\";\n    } elseif ($res >= 1080 && $res < 1440) {\n        return \"FHD\";\n    } elseif ($res >= 1440 && $res < 2160) {\n        return \"FHD+\";\n    } elseif ($res >= 2160 && $res < 4320) {\n        return \"4K\";\n    } elseif ($res >= 4320) {\n        return \"8K\";\n    } else {\n        return '';\n    }\n}\n\nfunction getResolutionTextRoku($res) {\n    $res = intval($res);\n    if ($res >= 720 && $res < 1080) {\n        return \"HD\";\n    } elseif ($res >= 1080 && $res < 2160) {\n        return \"FHD\";\n    } elseif ($res >= 2160) {\n        return \"UHD\";\n    } else {\n        return 'SD';\n    }\n}\n\n// just realize the readdir is a lot faster then glob\nfunction _glob($dir, $pattern) {\n    global $_glob;\n    if (empty($dir)) {\n        return [];\n    }\n    if (empty($_glob)) {\n        $_glob = [];\n    }\n    $name = md5($dir . $pattern);\n    if (isset($_glob[$name])) {\n        return $_glob[$name];\n    }\n    $dir = rtrim($dir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n    $array = [];\n    if (is_dir($dir) && $handle = opendir($dir)) {\n        $count = 0;\n        while (false !== ($file_name = readdir($handle))) {\n            if ($file_name == '.' || $file_name == '..') {\n                continue;\n            }\n            //_error_log(\"_glob: {$dir}{$file_name} [$pattern]\");\n            //var_dump($pattern, $file_name, preg_match($pattern, $file_name));\n            if (preg_match($pattern, $file_name)) {\n                $array[] = \"{$dir}{$file_name}\";\n            }\n        }\n        closedir($handle);\n    }\n    $_glob[$name] = $array;\n    return $array;\n}\n\nfunction globVideosDir($filename, $filesOnly = false) {\n    global $global;\n    if (empty($filename)) {\n        return [];\n    }\n    $cleanfilename = Video::getCleanFilenameFromFile($filename);\n    $paths = Video::getPaths($filename);\n\n    $dir = $paths['path'];\n\n    if (is_dir($dir . $filename)) {\n        $dir = $dir . $filename;\n        $cleanfilename = '';\n    }\n\n    $pattern = \"/{$cleanfilename}.*\";\n    if (!empty($filesOnly)) {\n        $formats = getValidFormats();\n        $pattern .= \".(\" . implode(\"|\", $formats) . \")\";\n    }\n    $pattern .= \"/\";\n    //var_dump($dir, $pattern);\n    return _glob($dir, $pattern);\n}\n\nfunction getValidFormats() {\n    $video = ['webm', 'mp4', 'm3u8'];\n    $audio = ['mp3', 'ogg'];\n    $image = ['jpg', 'gif', 'webp'];\n    return array_merge($video, $audio, $image);\n}\n\nfunction isValidFormats($format) {\n    $format = str_replace(\".\", \"\", $format);\n    return in_array($format, getValidFormats());\n}\n\nfunction getTimerFromDates($startTime, $endTime = 0) {\n    if (!is_int($startTime)) {\n        $startTime = strtotime($startTime);\n    }\n    if (!is_int($endTime)) {\n        $endTime = strtotime($endTime);\n    }\n    if (empty($endTime)) {\n        $endTime = time();\n    }\n    $timer = abs($endTime - $startTime);\n    $uid = uniqid();\n    return \"<span id='{$uid}'></span><script>$(document).ready(function () {startTimer({$timer}, '#{$uid}', '');})</script>\";\n}\n\nfunction getServerClock() {\n    $id = uniqid();\n    $today = getdate();\n    $html = '<span id=\"' . $id . '\">00:00:00</span>';\n    $html .= \"<script type=\\\"text/javascript\\\">\n    $(document).ready(function () {\n        var d = new Date({$today['year']},{$today['mon']},{$today['mday']},{$today['hours']},{$today['minutes']},{$today['seconds']});\n        setInterval(function() {\n            d.setSeconds(d.getSeconds() + 1);\n            $('#{$id}').text((d.getHours() +':' + d.getMinutes() + ':' + d.getSeconds() ));\n        }, 1000);\n    });\n</script>\";\n    return $html;\n}\n\n/**\n * Xsendfile and FFMPEG are required for this feature\n * @global type $global\n * @param type $filepath\n * @return boolean\n */\nfunction downloadHLS($filepath) {\n    global $global;\n\n    if (!CustomizeUser::canDownloadVideos()) {\n        _error_log(\"downloadHLS: CustomizeUser::canDownloadVideos said NO\");\n        return false;\n    }\n\n    if (!file_exists($filepath)) {\n        _error_log(\"downloadHLS: file NOT found: {$filepath}\");\n        return false;\n    }\n    $output = m3u8ToMP4($filepath);\n\n    if (!empty($output['error'])) {\n        $msg = 'downloadHLS was not possible';\n        if (User::isAdmin()) {\n            $msg .= '<br>' . \"m3u8ToMP4($filepath) return empty<br>\" . nl2br($output['msg']);\n        }\n        _error_log(\"downloadHLS: m3u8ToMP4($filepath) return empty\");\n        die($msg);\n    }\n\n    $outputpath = $output['path'];\n    $outputfilename = $output['filename'];\n\n    if (!empty($_REQUEST['title'])) {\n        $quoted = sprintf('\"%s\"', addcslashes(basename($_REQUEST['title']), '\"\\\\'));\n    } elseif (!empty($_REQUEST['file'])) {\n        $quoted = sprintf('\"%s\"', addcslashes(basename($_REQUEST['file']), '\"\\\\')) . \".mp4\";\n    } else {\n        $quoted = $outputfilename;\n    }\n\n    header('Content-Description: File Transfer');\n    header('Content-Disposition: attachment; filename=' . $quoted);\n    header('Content-Transfer-Encoding: binary');\n    header('Connection: Keep-Alive');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    header(\"X-Sendfile: {$outputpath}\");\n    exit;\n}\n\nfunction playHLSasMP4($filepath) {\n    global $global;\n\n    if (!CustomizeUser::canDownloadVideos()) {\n        _error_log(\"playHLSasMP4: CustomizeUser::canDownloadVideos said NO\");\n        return false;\n    }\n\n    if (!file_exists($filepath)) {\n        _error_log(\"playHLSasMP4: file NOT found: {$filepath}\");\n        return false;\n    }\n    $output = m3u8ToMP4($filepath);\n\n    if (!empty($output['error'])) {\n        $msg = 'playHLSasMP4 was not possible';\n        if (User::isAdmin()) {\n            $msg .= '<br>' . \"m3u8ToMP4($filepath) return empty<br>\" . nl2br($output['msg']);\n        }\n        die($msg);\n    }\n\n    $outputpath = $output['path'];\n\n    header('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');\n    header('Cache-Control: post-check=0, pre-check=0', false);\n    header('Pragma: no-cache');\n    header('Content-type: video/mp4');\n    header('Content-Length: ' . filesize($outputpath));\n    header(\"X-Sendfile: {$outputpath}\");\n    exit;\n}\n\nfunction m3u8ToMP4($input) {\n    $videosDir = getVideosDir();\n    $outputfilename = str_replace($videosDir, \"\", $input);\n    $parts = explode(\"/\", $outputfilename);\n    $resolution = Video::getResolutionFromFilename($input);\n    $outputfilename = $parts[0] . \"_{$resolution}_.mp4\";\n    $outputpath = \"{$videosDir}cache/downloads/{$outputfilename}\";\n    $msg = '';\n    $error = true;\n    make_path($outputpath);\n    if (empty($outputfilename)) {\n        $msg = \"downloadHLS: empty outputfilename {$outputfilename}\";\n        _error_log($msg);\n        return ['error' => $error, 'msg' => $msg];\n    }\n    _error_log(\"downloadHLS: m3u8ToMP4($input)\");\n    //var_dump(!preg_match('/^http/i', $input), filesize($input), preg_match('/.m3u8$/i', $input));\n    $ism3u8 = preg_match('/.m3u8$/i', $input);\n    if (!preg_match('/^http/i', $input) && (filesize($input) <= 10 || $ism3u8)) { // dummy file\n        $filepath = escapeshellcmd(pathToRemoteURL($input, true, true));\n        if ($ism3u8 && !preg_match('/.m3u8$/i', $filepath)) {\n            $filepath = addLastSlash($filepath) . 'index.m3u8';\n        }\n\n        $token = getToken(60);\n        $filepath = addQueryStringParameter($filepath, 'globalToken', $token);\n    } else {\n        $filepath = escapeshellcmd($input);\n    }\n\n    if (is_dir($filepath)) {\n        $filepath = addLastSlash($filepath) . 'index.m3u8';\n    }\n\n    $outputpath = escapeshellcmd($outputpath);\n    if (!file_exists($outputpath)) {\n        $command = get_ffmpeg() . \" -allowed_extensions ALL -y -i \\\"{$filepath}\\\" -c:v copy -c:a copy -bsf:a aac_adtstoasc -strict -2 {$outputpath}\";\n        $msg1 = \"downloadHLS: Exec Command ({$command})\";\n        _error_log($msg1);\n        //var_dump($outputfilename, $command, $_GET, $filepath);exit;\n        exec($command . \" 2>&1\", $output, $return);\n        if (!empty($return)) {\n            $msg2 = \"downloadHLS: ERROR 1 \" . implode(PHP_EOL, $output);\n            _error_log($msg2);\n\n            $command = get_ffmpeg() . \" -y -i \\\"{$filepath}\\\" -c:v copy -c:a copy -bsf:a aac_adtstoasc -strict -2 {$outputpath}\";\n            //var_dump($outputfilename, $command, $_GET, $filepath);exit;\n            exec($command . \" 2>&1\", $output, $return);\n            if (!empty($return)) {\n                $msg3 = \"downloadHLS: ERROR 2 \" . implode(PHP_EOL, $output);\n                $finalMsg = $msg1 . PHP_EOL . $msg2 . PHP_EOL . $msg3;\n                _error_log($msg3);\n                return ['error' => $error, 'msg' => $finalMsg];\n            }\n        }\n    } else {\n        $msg = \"downloadHLS: outputpath already exists ({$outputpath})\";\n        _error_log($msg);\n    }\n    $error = false;\n    return ['error' => $error, 'msg' => $msg, 'path' => $outputpath, 'filename' => $outputfilename];\n}\n\nfunction getSocialModal($videos_id, $url = \"\", $title = \"\") {\n    global $global;\n    $video['id'] = $videos_id;\n    $sharingUid = uniqid();\n    ob_start();\n    ?>\n    <div id=\"SharingModal<?php echo $sharingUid ?>\" class=\"modal fade\" role=\"dialog\" style=\"top: 60px;\">\n        <div class=\"modal-dialog\">\n            <!-- Modal content-->\n            <div class=\"modal-content\">\n                <div class=\"modal-body\">\n                    <center>\n                        <?php include $global['systemRootPath'] . 'view/include/social.php'; ?>\n                    </center>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script>\n        function showSharing<?php echo $sharingUid ?>() {\n            if ($('#mainVideo').length) {\n                $('#SharingModal<?php echo $sharingUid ?>').appendTo(\"#mainVideo\");\n            } else {\n                $('#SharingModal<?php echo $sharingUid ?>').appendTo(\"body\");\n            }\n            $('#SharingModal<?php echo $sharingUid ?>').modal(\"show\");\n            $('.modal-backdrop').hide();\n\n            return false;\n        }\n\n        $(document).ready(function () {\n            $('#SharingModal<?php echo $sharingUid ?>').modal({show: false});\n        });\n    </script>\n    <?php\n    $contents = ob_get_contents();\n    ob_end_clean();\n    return ['html' => $contents, 'id' => $sharingUid];\n}\n\nfunction getCroppie(\n        $buttonTitle,\n        $callBackJSFunction,\n        $resultWidth = 0,\n        $resultHeight = 0,\n        $viewportWidth = 0,\n        $boundary = 25,\n        $viewportHeight = 0,\n        $enforceBoundary = true\n) {\n    global $global;\n\n    if (empty($resultWidth) && empty($resultHeight)) {\n        if (isMobile()) {\n            $viewportWidth = 250;\n        } else {\n            $viewportWidth = 800;\n        }\n\n        if (defaultIsPortrait()) {\n            $resultWidth = 540;\n            $resultHeight = 800;\n        } else {\n            $resultWidth = 1280;\n            $resultHeight = 720;\n        }\n    }\n\n    if (empty($viewportWidth)) {\n        $viewportWidth = $resultWidth;\n    }\n    $zoom = 0;\n    if (empty($viewportHeight)) {\n        $zoom = ($viewportWidth / $resultWidth);\n        $viewportHeight = $zoom * $resultHeight;\n    }\n    if (empty($enforceBoundary)) {\n        $boundary = 0;\n    }\n    $boundaryWidth = $viewportWidth + $boundary;\n    $boundaryHeight = $viewportHeight + $boundary;\n    $uid = uniqid();\n    ob_start();\n    include $global['systemRootPath'] . 'objects/functionCroppie.php';\n    $contents = ob_get_contents();\n    ob_end_clean();\n    $callBackJSFunction = addcslashes($callBackJSFunction, \"'\");\n    return [\n        \"html\" => $contents,\n        \"id\" => \"croppie{$uid}\",\n        \"uploadCropObject\" => \"uploadCrop{$uid}\",\n        \"getCroppieFunction\" => \"getCroppie(uploadCrop{$uid}, '{$callBackJSFunction}', {$resultWidth}, {$resultHeight});\",\n        \"createCroppie\" => \"createCroppie{$uid}\",\n        \"restartCroppie\" => \"restartCroppie{$uid}\",\n    ];\n}\n\nfunction saveCroppieImage($destination, $postIndex = \"imgBase64\") {\n    if (empty($destination) || empty($_POST[$postIndex])) {\n        return false;\n    }\n    $fileData = base64DataToImage($_POST[$postIndex]);\n\n    $path_parts = pathinfo($destination);\n    $tmpDestination = $destination;\n    $extension = strtolower($path_parts['extension']);\n    if ($extension !== 'png') {\n        $tmpDestination = $destination . '.png';\n    }\n\n    $saved = _file_put_contents($tmpDestination, $fileData);\n\n    if ($saved) {\n        if ($extension !== 'png') {\n            convertImage($tmpDestination, $destination, 100);\n            unlink($tmpDestination);\n        }\n    }\n    //var_dump($saved, $tmpDestination, $destination, $extension);exit;\n    return $saved;\n}\n\nfunction get_ffmpeg($ignoreGPU = false) {\n    global $global;\n    $complement = '';\n    //$complement = ' -user_agent \"'.getSelfUserAgent(\"FFMPEG\").'\" ';\n    //return 'ffmpeg -headers \"User-Agent: '.getSelfUserAgent(\"FFMPEG\").'\" ';\n    $ffmpeg = 'ffmpeg  ';\n    if (empty($ignoreGPU) && !empty($global['ffmpegGPU'])) {\n        $ffmpeg .= ' --enable-nvenc ';\n    }\n    if (!empty($global['ffmpeg'])) {\n        $ffmpeg = \"{$global['ffmpeg']}{$ffmpeg}\";\n    }\n    return $ffmpeg . $complement;\n}\n\nfunction get_php() {\n    global $global;\n    $php = 'php  ';\n    if (!empty($global['php'])) {\n        $php = \"{$global['php']} \";\n    }\n    return $php;\n}\n\nfunction isHTMLPage($url) {\n    if (preg_match('/https?:\\/\\/(www\\.)?(youtu.be|youtube.com|vimeo.com|bitchute.com)\\//i', $url)) {\n        return true;\n    } elseif ($type = getHeaderContentTypeFromURL($url)) {\n        if (preg_match('/text\\/html/i', $type)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction getHeaderContentTypeFromURL($url) {\n    if (isValidURL($url) && $type = get_headers($url, 1)[\"Content-Type\"]) {\n        return $type;\n    }\n    return false;\n}\n\nfunction canFullScreen() {\n    global $doNotFullScreen;\n    if (!empty($doNotFullScreen) || isSerie() || !isVideo()) {\n        return false;\n    }\n    return true;\n}\n\nfunction getTinyMCE($id, $simpleMode = false) {\n    global $global;\n    ob_start();\n    include $global['systemRootPath'] . 'objects/functionsGetTinyMCE.php';\n    $contents = ob_get_contents();\n    ob_end_clean();\n    return $contents;\n}\n\nfunction pathToRemoteURL($filename, $forceHTTP = false, $ignoreCDN = false) {\n    global $pathToRemoteURL, $global;\n    if (!isset($pathToRemoteURL)) {\n        $pathToRemoteURL = [];\n    }\n\n    if (isset($pathToRemoteURL[$filename])) {\n        return $pathToRemoteURL[$filename];\n    }\n    if (!file_exists($filename) || filesize($filename) < 1000) {\n        $fileName = getFilenameFromPath($filename);\n        if ($yptStorage = AVideoPlugin::loadPluginIfEnabled(\"YPTStorage\")) {\n            $source = $yptStorage->getAddress(\"{$fileName}\");\n            $url = $source['url'];\n        } elseif (!preg_match('/index.m3u8$/', $filename)) {\n            if ($aws_s3 = AVideoPlugin::loadPluginIfEnabled(\"AWS_S3\")) {\n                $source = $aws_s3->getAddress(\"{$fileName}\");\n                $url = $source['url'];\n                if (empty($ignoreCDN)) {\n                    $url = replaceCDNIfNeed($url, 'CDN_S3');\n                } elseif (!empty($source['url_noCDN'])) {\n                    $url = $source['url_noCDN'];\n                }\n            } elseif ($bb_b2 = AVideoPlugin::loadPluginIfEnabled(\"Blackblaze_B2\")) {\n                $source = $bb_b2->getAddress(\"{$fileName}\");\n                $url = $source['url'];\n                if (empty($ignoreCDN)) {\n                    $url = replaceCDNIfNeed($url, 'CDN_B2');\n                } elseif (!empty($source['url_noCDN'])) {\n                    $url = $source['url_noCDN'];\n                }\n            } elseif ($ftp = AVideoPlugin::loadPluginIfEnabled(\"FTP_Storage\")) {\n                $source = $ftp->getAddress(\"{$fileName}\");\n                $url = $source['url'];\n                if (empty($ignoreCDN)) {\n                    $url = replaceCDNIfNeed($url, 'CDN_FTP');\n                } elseif (!empty($source['url_noCDN'])) {\n                    $url = $source['url_noCDN'];\n                }\n            }\n        }\n    }\n    if (empty($url)) {\n        if ($forceHTTP) {\n            $paths = Video::getPaths($filename);\n            //$url = str_replace(getVideosDir(), getCDN() . \"videos/\", $filename);\n            if (empty($ignoreCDN)) {\n                $url = getCDN() . \"{$paths['relative']}\";\n            } else {\n                $url = \"{$global['webSiteRootURL']}{$paths['relative']}\";\n            }\n            if (preg_match('/index.m3u8$/', $filename) && !preg_match('/index.m3u8$/', $url)) {\n                $url .= 'index.m3u8';\n            }\n        } else {\n            $url = $filename;\n        }\n    }\n\n    //$url = str_replace(array($global['systemRootPath'], '/videos/videos/'), array(\"\", '/videos/'), $url);\n\n    $pathToRemoteURL[$filename] = $url;\n    return $url;\n}\n\nfunction getFilenameFromPath($path) {\n    global $global;\n    $fileName = Video::getCleanFilenameFromFile($path);\n    return $fileName;\n}\n\nfunction showCloseButton() {\n    global $global, $showCloseButtonIncluded;\n    if (!empty($showCloseButtonIncluded)) {\n        return '<!-- showCloseButton is already included -->';\n    }\n    if (isSerie()) {\n        return '<!-- showCloseButton is a serie -->';\n    }\n\n    if (!isLive() && $obj = AVideoPlugin::getDataObjectIfEnabled(\"Gallery\")) {\n        if (!empty($obj->playVideoOnFullscreen)) {\n            $_REQUEST['showCloseButton'] = 1;\n        }\n    }\n    if (isLive() && $obj = AVideoPlugin::getDataObjectIfEnabled(\"Live\")) {\n        if (!empty($obj->playLiveInFullScreen)) {\n            $_REQUEST['showCloseButton'] = 1;\n        }\n    }\n    if (!empty($_REQUEST['showCloseButton'])) {\n        $showCloseButtonIncluded = 1;\n        include $global['systemRootPath'] . 'view/include/youtubeModeOnFullscreenCloseButton.php';\n    }\n    return '<!-- showCloseButton finished -->';\n}\n\nfunction getThemes() {\n    global $_getThemes, $global;\n    if (isset($_getThemes)) {\n        return $_getThemes;\n    }\n    $_getThemes = [];\n    foreach (glob(\"{$global['systemRootPath']}view/css/custom/*.css\") as $filename) {\n        $fileEx = basename($filename, \".css\");\n        $_getThemes[] = $fileEx;\n    }\n    return $_getThemes;\n}\n\nfunction getCurrentTheme() {\n    global $config;\n    if (!empty($_REQUEST['customCSS'])) {\n        _setcookie('customCSS', $_REQUEST['customCSS']);\n        return $_REQUEST['customCSS'];\n    }\n    if (!empty($_COOKIE['customCSS'])) {\n        return $_COOKIE['customCSS'];\n    }\n    return $config->getTheme();\n}\n\n/*\n * $users_id=\"\" or 0 means send messages to all users\n * $users_id=\"-1\" means send to no one\n */\n\nfunction sendSocketMessage($msg, $callbackJSFunction = \"\", $users_id = \"-1\", $send_to_uri_pattern = \"\") {\n    if (AVideoPlugin::isEnabledByName('YPTSocket')) {\n        if (!is_string($msg)) {\n            $msg = json_encode($msg);\n        }\n        $obj = YPTSocket::send($msg, $callbackJSFunction, $users_id, $send_to_uri_pattern);\n        if ($obj->error && !empty($obj->msg)) {\n            _error_log(\"sendSocketMessage \" . $obj->msg);\n        }\n        return $obj;\n    }\n    return false;\n}\n\nfunction sendSocketMessageToUsers_id($msg, $users_id, $callbackJSFunction = \"\") {\n\n    if (empty($users_id)) {\n        return false;\n    }\n    _error_log(\"sendSocketMessageToUsers_id start \" . json_encode($users_id));\n    if (!is_array($users_id)) {\n        $users_id = [$users_id];\n    }\n\n    $resp = [];\n    foreach ($users_id as $value) {\n        $resp[] = sendSocketMessage($msg, $callbackJSFunction, $value);\n    }\n\n    return $resp;\n}\n\nfunction sendSocketErrorMessageToUsers_id($msg, $users_id, $callbackJSFunction = \"avideoResponse\") {\n    $newMessage = new stdClass();\n    $newMessage->error = true;\n    $newMessage->msg = $msg;\n    return sendSocketMessageToUsers_id($newMessage, $users_id, $callbackJSFunction);\n}\n\nfunction sendSocketSuccessMessageToUsers_id($msg, $users_id, $callbackJSFunction = \"avideoResponse\") {\n    $newMessage = new stdClass();\n    $newMessage->error = false;\n    $newMessage->msg = $msg;\n    return sendSocketMessageToUsers_id($newMessage, $users_id, $callbackJSFunction);\n}\n\nfunction sendSocketMessageToAll($msg, $callbackJSFunction = \"\", $send_to_uri_pattern = \"\") {\n    return sendSocketMessage($msg, $callbackJSFunction, \"\", $send_to_uri_pattern);\n}\n\nfunction sendSocketMessageToNone($msg, $callbackJSFunction = \"\") {\n    return sendSocketMessage($msg, $callbackJSFunction, -1);\n}\n\nfunction execAsync($command) {\n    //$command = escapeshellarg($command);\n    // If windows, else\n    if (isWindows()) {\n        //echo $command;\n        //$pid = system(\"start /min  \".$command. \" > NUL\");\n        //$commandString = \"start /B \" . $command;\n        //pclose($pid = popen($commandString, \"r\"));\n        _error_log($command);\n        $pid = exec($command, $output, $retval);\n        _error_log('execAsync: ' . json_encode($output) . ' ' . $retval);\n    } else {\n        $newCommand = $command . \" > /dev/null 2>&1 & echo $!; \";\n        _error_log($newCommand);\n        $pid = exec($newCommand);\n    }\n    return $pid;\n}\n\nfunction killProcess($pid) {\n    $pid = intval($pid);\n    if (empty($pid)) {\n        return false;\n    }\n    if (isWindows()) {\n        exec(\"taskkill /F /PID $pid\");\n    } else {\n        exec(\"kill -9 $pid\");\n    }\n    return true;\n}\n\nfunction isWindows() {\n    return strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';\n}\n\nfunction getPIDUsingPort($port) {\n    $port = intval($port);\n    if (empty($port)) {\n        return false;\n    }\n    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        $command = 'netstat -ano | findstr ' . $port;\n        exec($command, $output, $retval);\n        $pid = 0;\n        foreach ($output as $value) {\n            if (preg_match('/LISTENING[^0-9]+([0-9]+)/i', $value, $matches)) {\n                if (!empty($matches[1])) {\n                    $pid = intval($matches[1]);\n                    return $pid;\n                }\n            }\n        }\n    } else {\n        $command = 'lsof -n -i :' . $port . ' | grep LISTEN';\n        exec($command, $output, $retval);\n        $pid = 0;\n        foreach ($output as $value) {\n            if (preg_match('/[^ ] +([0-9]+).*/i', $value, $matches)) {\n                if (!empty($matches[1])) {\n                    $pid = intval($matches[1]);\n                    return $pid;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nfunction isURL200($url, $forceRecheck = false) {\n    global $_isURL200;\n    $name = \"isURL200\" . DIRECTORY_SEPARATOR . md5($url);\n    if (empty($forceRecheck)) {\n        $result = ObjectYPT::getCache($name, 30);\n        if (!empty($result)) {\n            $object = _json_decode($result);\n            return $object->result;\n        }\n    }\n\n\n    $object = new stdClass();\n    $object->url = $url;\n    $object->forceRecheck = $forceRecheck;\n\n    //error_log(\"isURL200 checking URL {$url}\");\n    $headers = @get_headers($url);\n    if (!is_array($headers)) {\n        $headers = [$headers];\n    }\n\n    $object->result = false;\n    foreach ($headers as $value) {\n        if (\n                strpos($value, '200') ||\n                strpos($value, '302') ||\n                strpos($value, '304')\n        ) {\n            $object->result = true;\n            break;\n        } else {\n            //_error_log('isURL200: '.$value);\n        }\n    }\n\n    ObjectYPT::setCache($name, json_encode($object));\n\n    return $object->result;\n}\n\nfunction isURL200Clear() {\n    $tmpDir = ObjectYPT::getCacheDir();\n    $cacheDir = $tmpDir . \"isURL200\" . DIRECTORY_SEPARATOR;\n    _error_log('isURL200Clear: ' . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n    rrmdir($cacheDir);\n}\n\nfunction deleteStatsNotifications() {\n    Live::deleteStatsCache();\n    $cacheName = \"getStats\" . DIRECTORY_SEPARATOR . \"getStatsNotifications\";\n    ObjectYPT::deleteCache($cacheName);\n}\n\nfunction getStatsNotifications($force_recreate = false, $listItIfIsAdminOrOwner = true) {\n    $cacheName = \"getStats\" . DIRECTORY_SEPARATOR . \"getStatsNotifications\";\n    unset($_POST['sort']);\n    if ($force_recreate) {\n        Live::deleteStatsCache();\n    } else {\n        $json = ObjectYPT::getCache($cacheName, 0, true);\n    }\n    if (empty($json) || !empty($json->error) || !isset($json->error)) {\n        //_error_log('getStatsNotifications: 1 ' . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n        $json = Live::getStats();\n        $json = object_to_array($json);\n\n        if (empty($json['applications']) && is_array($json)) {\n            $oldjson = $json;\n            $json = [];\n            $json['applications'] = [];\n            foreach ($oldjson as $key => $value) {\n                if (empty($value['applications'])) {\n                    continue;\n                }\n                $json['applications'] = array_merge($json['applications'], $value['applications']);\n                unset($json[$key]);\n            }\n        }\n\n        $appArray = AVideoPlugin::getLiveApplicationArray();\n        if (!empty($appArray)) {\n            if (empty($json)) {\n                $json = [];\n            }\n            $json['error'] = false;\n            if (empty($json['msg'])) {\n                $json['msg'] = \"OFFLINE\";\n            }\n            $json['nclients'] = count($appArray);\n            if (empty($json['applications'])) {\n                $json['applications'] = [];\n            }\n            $json['applications'] = array_merge($json['applications'], $appArray);\n        }\n\n        $count = 0;\n        if (!isset($json['total'])) {\n            $json['total'] = 0;\n        }\n        if (!empty($json['applications'])) {\n            $json['total'] += count($json['applications']);\n        }\n        while (!empty($json[$count])) {\n            $json['total'] += count($json[$count]['applications']);\n            $count++;\n        }\n        if (!empty($json['applications'])) {\n            $applications = array();\n            foreach ($json['applications'] as $key => $value) {\n                // remove duplicated\n                if (in_array($value['href'], $applications)) {\n                    unset($json['applications'][$key]);\n                    continue;\n                }\n                $applications[] = $value['href'];\n                if (empty($value['users_id']) && !empty($value['user'])) {\n                    $u = User::getFromUsername($value['user']);\n                    $json['applications'][$key]['users_id'] = $u['id'];\n                }\n                if (!empty($json['applications'][$key]['key']) && $json['applications'][$key][\"type\"] === \"live\") {\n                    // make sure it is online\n                    $lth = new LiveTransmitionHistory();\n                    $lth->setTitle($json['applications'][$key]['title']);\n                    $lth->setKey($json['applications'][$key]['key']);\n                    $lth->setUsers_id($json['applications'][$key]['users_id']);\n                    $lth->setLive_servers_id($json['applications'][$key]['live_servers_id']);\n                    $json['applications'][$key]['live_transmitions_history_id'] = $lth->save();\n                }\n            }\n        }\n        $cache = ObjectYPT::setCache($cacheName, $json);\n        //_error_log('Live::createStatsCache ' . json_encode($cache));\n    } else {\n        //_error_log('getStatsNotifications: 2 cached result');\n        $json = object_to_array($json);\n    }\n\n    foreach ($json['applications'] as $key => $value) {\n        if (!Live::isApplicationListed(@$value['key'], $listItIfIsAdminOrOwner)) {\n            $json['hidden_applications'][] = $value;\n            unset($json['applications'][$key]);\n        }\n    }\n\n    $json['countLiveStream'] = count($json['applications']);\n    return $json;\n}\n\nfunction getSocketConnectionLabel() {\n    $html = '<span class=\"socketStatus\">\n            <span class=\"socket_icon socket_loading_icon\">\n                <i class=\"fas fa-sync fa-spin\"></i>\n            </span>\n            <span class=\"socket_icon socket_not_loading socket_disconnected_icon\">\n                <span class=\"fa-stack\">\n  <i class=\"fas fa-slash fa-stack-1x\"></i>\n  <i class=\"fas fa-plug fa-stack-1x\"></i>\n</span> ' . __('Disconnected') . '\n            </span>\n            <span class=\"socket_icon socket_not_loading socket_connected_icon\">\n                <span class=\"fa-stack\">\n  <i class=\"fas fa-plug fa-stack-1x\"></i>\n</span>  ' . __('Connected') . '\n            </span>\n        </span>';\n    return $html;\n}\n\nfunction getSocketVideoClassName($videos_id) {\n    return 'total_on_videos_id_' . $videos_id;\n}\n\nfunction getSocketLiveClassName($key, $live_servers_id) {\n    return 'total_on_live_' . $key . '_' . intval($live_servers_id);\n}\n\nfunction getSocketLiveLinksClassName($live_links_id) {\n    return 'total_on_live_links_id_' . $live_links_id;\n}\n\nfunction getLiveUsersLabelVideo($videos_id, $totalViews = null, $viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    if (AVideoPlugin::isEnabledByName('LiveUsers') && method_exists(\"LiveUsers\", \"getLabels\")) {\n        return LiveUsers::getLabels(getSocketVideoClassName($videos_id), $totalViews, $viewsClass, $counterClass, 'video');\n    }\n}\n\nfunction getLiveUsersLabelLive($key, $live_servers_id, $viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    if (AVideoPlugin::isEnabledByName('LiveUsers') && method_exists(\"LiveUsers\", \"getLabels\")) {\n        $totalViews = 0;\n        if (User::isLogged()) {\n            $totalViews = LiveUsers::getTotalUsers($key, $live_servers_id);\n        }\n        return LiveUsers::getLabels(getSocketLiveClassName($key, $live_servers_id), $totalViews, $viewsClass, $counterClass, 'live');\n    }\n}\n\nfunction getLiveUsersLabelLiveLinks($liveLinks_id, $totalViews = null, $viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    if (AVideoPlugin::isEnabledByName('LiveUsers') && method_exists(\"LiveUsers\", \"getWatchingNowLabel\")) {\n        return LiveUsers::getWatchingNowLabel(getSocketLiveLinksClassName($liveLinks_id), \"label label-primary\", '', $viewsClass, 'livelinks');\n    }\n}\n\nfunction getLiveUsersLabel($viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    if (AVideoPlugin::isEnabledByName('LiveUsers')) {\n        $live = isLive();\n        if (!empty($live)) {\n            if (!empty($live['key'])) {\n                return getLiveUsersLabelLive($live['key'], $live['live_servers_id'], $viewsClass, $counterClass);\n            } elseif (!empty($live['liveLinks_id'])) {\n                return getLiveUsersLabelLiveLinks($live['liveLinks_id'], null, $viewsClass, $counterClass);\n            }\n        } else {\n            $videos_id = getVideos_id();\n            if (!empty($videos_id)) {\n                $v = new Video(\"\", \"\", $videos_id);\n                $totalViews = $v->getViews_count();\n                return getLiveUsersLabelVideo($videos_id, $totalViews, $viewsClass, $counterClass);\n            }\n        }\n    }\n    return \"\";\n}\n\nfunction getLiveUsersLabelHTML($viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    global $global;\n    ob_start();\n    include $global['systemRootPath'] . 'plugin/Live/view/onlineLabel.php';\n    $htmlMediaTag = '<div style=\"z-index: 999; position: absolute; top:5px; left: 5px; opacity: 0.8; filter: alpha(opacity=80);\" class=\"liveUsersLabel\">';\n    $htmlMediaTag .= ob_get_contents();\n    ob_end_clean();\n    $htmlMediaTag .= getLiveUsersLabel($viewsClass, $counterClass);\n    $htmlMediaTag .= '</div>';\n    return $htmlMediaTag;\n}\n\nfunction getHTMLTitle($titleArray) {\n    global $config, $global;\n\n    if (!is_array($titleArray)) {\n        $titleArray = [];\n    }\n    $titleArray[] = $config->getWebSiteTitle();\n\n    $title = implode($config->getPageTitleSeparator(), $titleArray);\n    $global['pageTitle'] = $title;\n    return \"<title>{$title}</title>\";\n}\n\nfunction getButtonSignInAndUp() {\n    $signIn = getButtonSignIn();\n    $signUp = getButtonSignUp();\n    $html = $signIn . $signUp;\n    if (!empty($signIn) && !empty($signIn)) {\n        return '<div class=\"btn-group justified\">' . $html . '</div>';\n    } else {\n        return $html;\n    }\n}\n\nfunction getButtonSignUp() {\n    global $global;\n    $obj = AVideoPlugin::getDataObject('CustomizeUser');\n    if (!empty($obj->disableNativeSignUp)) {\n        return '';\n    }\n\n    $url = $global['webSiteRootURL'] . 'signUp';\n    $url = addQueryStringParameter($url, 'redirectUri', getRedirectUri());\n\n    $html = '<a class=\"btn navbar-btn btn-default\" href=\"' . $url . '\" ><i class=\"fas fa-user-plus\"></i> ' . __(\"Sign Up\") . '</a> ';\n    return $html;\n}\n\nfunction getButtonSignIn() {\n    global $global;\n    $obj = AVideoPlugin::getDataObject('CustomizeUser');\n    if (!empty($obj->disableNativeSignIn)) {\n        return '';\n    }\n\n    $url = $global['webSiteRootURL'] . 'user';\n    $url = addQueryStringParameter($url, 'redirectUri', getRedirectUri());\n\n    $html = '<a class=\"btn navbar-btn btn-success\" href=\"' . $url . '\" ><i class=\"fas fa-sign-in-alt\" ></i> ' . __(\"Sign In\") . '</a> ';\n    return $html;\n}\n\nfunction getTitle() {\n    global $global;\n    if (empty($global['pageTitle'])) {\n        $url = getSelfURI();\n\n        $global['pageTitle'] = str_replace($global['webSiteRootURL'], '', $url);\n\n        if (preg_match('/\\/plugin\\/([^\\/])/i', $url, $matches)) {\n            $global['pageTitle'] = __('Plugin') . ' ' . __($matches[1]);\n        }\n\n        $title = $global['pageTitle'];\n    }\n\n    return $global['pageTitle'];\n}\n\nfunction outputAndContinueInBackground($msg = '') {\n    global $outputAndContinueInBackground;\n\n    if (!empty($outputAndContinueInBackground)) {\n        return false;\n    }\n    $outputAndContinueInBackground = 1;\n    @session_write_close();\n    //_mysql_close();\n    // Instruct PHP to continue execution\n    ignore_user_abort(true);\n    if (function_exists('fastcgi_finish_request')) {\n        fastcgi_finish_request();\n    }\n    ob_start();\n    echo $msg;\n    @header(\"Connection: close\");\n    @header(\"Content-Length: \" . ob_get_length());\n    @header(\"HTTP/1.1 200 OK\");\n    ob_end_flush();\n    flush();\n}\n\nfunction cleanUpRowFromDatabase($row) {\n    if (is_array($row)) {\n        foreach ($row as $key => $value) {\n            if (preg_match('/pass/i', $key)) {\n                unset($row[$key]);\n            }\n        }\n    }\n    return $row;\n}\n\nfunction getImageTransparent1pxURL() {\n    global $global;\n    return getCDN() . \"view/img/transparent1px.png\";\n}\n\nfunction getDatabaseTime() {\n    global $global, $_getDatabaseTime;\n    if (isset($_getDatabaseTime)) {\n        return $_getDatabaseTime;\n    }\n    $sql = \"SELECT CURRENT_TIMESTAMP\";\n    $res = sqlDAL::readSql($sql);\n    $data = sqlDAL::fetchAssoc($res);\n    sqlDAL::close($res);\n    if ($res) {\n        $row = $data;\n    } else {\n        $row = false;\n    }\n    $_getDatabaseTime = strtotime($row['CURRENT_TIMESTAMP']);\n    return $_getDatabaseTime;\n}\n\nfunction get_js_availableLangs() {\n    global $global;\n    if (empty($global['js_availableLangs'])) {\n        include_once $global['systemRootPath'] . 'objects/bcp47.php';\n    }\n    return $global['js_availableLangs'];\n}\n\nfunction listAllWordsToTranslate() {\n    global $global;\n    $cacheName = 'listAllWordsToTranslate';\n    $cache = ObjectYPT::getCache($cacheName, 0);\n    if (!empty($cache)) {\n        return object_to_array($cache);\n    }\n    ini_set('max_execution_time', 300);\n\n    function listAll($dir) {\n        $vars = [];\n        if (preg_match('/vendor.*$/', $dir)) {\n            return $vars;\n        }\n        if ($handle = opendir($dir)) {\n            while (false !== ($entry = readdir($handle))) {\n                if ($entry !== '.' && $entry !== '..') {\n                    $filename = $dir . '/' . $entry;\n                    if (is_dir($filename)) {\n                        $vars = listAll($filename);\n                    } elseif (preg_match(\"/\\.php$/\", $entry)) {\n                        $data = file_get_contents($filename);\n                        $regex = '/__\\([\"\\']{1}(.*)[\"\\']{1}\\)/U';\n                        preg_match_all(\n                                $regex,\n                                $data,\n                                $matches\n                        );\n\n                        foreach ($matches[0] as $key => $value) {\n                            $vars[$matches[1][$key]] = $matches[1][$key];\n                        }\n                    }\n                }\n            }\n\n            closedir($handle);\n        }\n        return $vars;\n    }\n\n    $vars = listAll($global['systemRootPath']);\n    sort($vars);\n    ObjectYPT::setCache($cacheName, $vars);\n    return $vars;\n}\n\nfunction secondsInterval($time1, $time2) {\n    if (!is_numeric($time1)) {\n        $time1 = strtotime($time1);\n    }\n    if (!is_numeric($time2)) {\n        $time2 = strtotime($time2);\n    }\n\n    return $time1 - $time2;\n}\n\nfunction secondsIntervalHuman($time, $useDatabaseTime = true) {\n    $dif = secondsIntervalFromNow($time, $useDatabaseTime);\n    if ($dif < 0) {\n        return humanTimingAfterwards($time, 0, $useDatabaseTime);\n    } else {\n        return humanTimingAgo($time, 0, $useDatabaseTime);\n    }\n}\n\nfunction isTimeForFuture($time, $useDatabaseTime = true) {\n    $dif = secondsIntervalFromNow($time, $useDatabaseTime);\n    if ($dif < 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction secondsIntervalFromNow($time, $useDatabaseTimeOrTimezoneString = true) {\n    $timeNow = time();\n    //var_dump($time, $useDatabaseTimeOrTimezoneString);\n    if (!empty($useDatabaseTimeOrTimezoneString)) {\n        if (is_numeric($useDatabaseTimeOrTimezoneString) || is_bool($useDatabaseTimeOrTimezoneString)) {\n            //echo $time . '-' . __LINE__ . '=>';\n            $timeNow = getDatabaseTime();\n        } elseif (is_string($useDatabaseTimeOrTimezoneString)) {\n            //echo '-' . __LINE__ . PHP_EOL . PHP_EOL;\n            $timeNow = getTimeInTimezone($timeNow, $useDatabaseTimeOrTimezoneString);\n        }\n    }\n    return secondsInterval($timeNow, $time);\n}\n\nfunction getScriptRunMicrotimeInSeconds() {\n    global $global;\n    $time_now = microtime(true);\n    return ($time_now - $global['avideoStartMicrotime']);\n}\n\nfunction fixSystemPath() {\n    global $global;\n    $global['systemRootPath'] = fixPath($global['systemRootPath']);\n}\n\nfunction fixPath($path, $addLastSlash = false) {\n    if (empty($path)) {\n        return false;\n    }\n    if (isWindows()) {\n        $path = str_replace('/', DIRECTORY_SEPARATOR, $path);\n        $path = str_replace('\\\\\\\\\\\\', DIRECTORY_SEPARATOR, $path);\n    } else {\n        $path = str_replace('\\\\', DIRECTORY_SEPARATOR, $path);\n    }\n    if ($addLastSlash) {\n        $path = rtrim($path, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n    }\n    return $path;\n}\n\nfunction idToHash($id) {\n    global $global, $_idToHash;\n\n    if (!isset($_idToHash)) {\n        $_idToHash = [];\n    }\n\n    if (!empty($_idToHash[$id])) {\n        return $_idToHash[$id];\n    }\n\n    if (!empty($global['useLongHash'])) {\n        $base = 2;\n        $cipher_algo = 'des';\n    } else {\n        $base = 32;\n        $cipher_algo = 'rc4';\n    }\n    if (empty($global['salt'])) {\n        $global['salt'] = '11234567890abcdef';\n    }\n    $idConverted = base_convert($id, 10, $base);\n    $hash = (@openssl_encrypt($idConverted, $cipher_algo, $global['salt']));\n    //$hash = preg_replace('/^([+]+)/', '', $hash);\n    $hash = preg_replace('/(=+)$/', '', $hash);\n    $hash = str_replace(['/', '+', '='], ['_', '-', '.'], $hash);\n    //return base64_encode($hash);\n    $_idToHash[$id] = $hash;\n    return $hash;\n}\n\nfunction hashToID($hash) {\n    global $global;\n    if (!empty($global['useLongHash'])) {\n        $base = 2;\n        $cipher_algo = 'des';\n    } else {\n        $base = 32;\n        $cipher_algo = 'rc4';\n    }\n    //$hash = str_pad($hash,  4, \"=\");\n    $hash = str_replace(['_', '-', '.'], ['/', '+', '='], $hash);\n    //$hash = base64_decode($hash);\n    $decrypt = openssl_decrypt(($hash), $cipher_algo, $global['salt']);\n    $decrypt = base_convert($decrypt, $base, 10);\n    return intval($decrypt);\n}\n\nfunction videosHashToID($hash_of_videos_id) {\n    if (is_int($hash_of_videos_id)) {\n        return $hash_of_videos_id;\n    }\n    if (!is_string($hash_of_videos_id) && !is_numeric($hash_of_videos_id)) {\n        if (is_array($hash_of_videos_id)) {\n            return $hash_of_videos_id;\n        } else {\n            return 0;\n        }\n    }\n    if (preg_match('/^\\.([0-9a-z._-]+)/i', $hash_of_videos_id, $matches)) {\n        $hash_of_videos_id = hashToID($matches[1]);\n    }\n    return $hash_of_videos_id;\n}\n\n/**\n *\n * @global type $advancedCustom\n * @global type $global\n * @global type $_getCDNURL\n * @param type $type enum(CDN, CDN_S3,CDN_B2,CDN_FTP,CDN_YPTStorage,CDN_Live,CDN_LiveServers)\n * @param type $id the ID of the URL in case the CDN is an array\n * @return \\type\n */\nfunction getCDN($type = 'CDN', $id = 0) {\n    global $advancedCustom, $global, $_getCDNURL;\n    $index = $type . $id;\n    if (!isset($_getCDNURL)) {\n        $_getCDNURL = [];\n    }\n    if (empty($_getCDNURL[$index])) {\n        if (!empty($type) && AVideoPlugin::isEnabledByName('CDN')) {\n            $_getCDNURL[$index] = CDN::getURL($type, $id);\n        }\n    }\n    if ($type == 'CDN') {\n        if (!empty($global['ignoreCDN'])) {\n            return $global['webSiteRootURL'];\n        } elseif (!empty($advancedCustom) && isValidURL($advancedCustom->videosCDN)) {\n            $_getCDNURL[$index] = addLastSlash($advancedCustom->videosCDN);\n        } elseif (empty($_getCDNURL[$index])) {\n            $_getCDNURL[$index] = $global['webSiteRootURL'];\n        }\n    }\n    //var_dump($type, $id, $_getCDNURL[$index]);\n    return empty($_getCDNURL[$index]) ? false : $_getCDNURL[$index];\n}\n\nfunction getURL($relativePath, $ignoreCDN = false) {\n    global $global;\n    if (!isset($_SESSION['user']['sessionCache']['getURL'])) {\n        $_SESSION['user']['sessionCache']['getURL'] = [];\n    }\n    if (!empty($_SESSION['user']['sessionCache']['getURL'][$relativePath])) {\n        return $_SESSION['user']['sessionCache']['getURL'][$relativePath];\n    }\n\n    $file = \"{$global['systemRootPath']}{$relativePath}\";\n    if (empty($ignoreCDN)) {\n        $url = getCDN() . $relativePath;\n    } else {\n        $url = $global['webSiteRootURL'] . $relativePath;\n    }\n    if (file_exists($file)) {\n        $cache = @filemtime($file) . '_' . @filectime($file);\n        $url = addQueryStringParameter($url, 'cache', $cache);\n        $_SESSION['user']['sessionCache']['getURL'][$relativePath] = $url;\n    } else {\n        $url = addQueryStringParameter($url, 'cache', 'not_found');\n    }\n\n    return $url;\n}\n\nfunction getCDNOrURL($url, $type = 'CDN', $id = 0) {\n    if (!preg_match('/^http/i', $url)) {\n        return $url;\n    }\n    $cdn = getCDN($type, $id);\n    if (!empty($cdn)) {\n        return $cdn;\n    }\n    return addLastSlash($url);\n}\n\nfunction replaceCDNIfNeed($url, $type = 'CDN', $id = 0) {\n    $cdn = getCDN($type, $id);\n    if (empty($cdn)) {\n        return $url;\n    }\n\n    return str_replace(parse_url($url, PHP_URL_HOST), parse_url($cdn, PHP_URL_HOST), $url);\n}\n\nfunction isIPPrivate($ip) {\n    if ($ip == '192.168.1.4') {\n        return false;\n    }\n    if (!filter_var($ip, FILTER_VALIDATE_IP)) {\n        return false;\n    }\n    $result = filter_var(\n            $ip,\n            FILTER_VALIDATE_IP,\n            FILTER_FLAG_IPV4 | FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE\n    );\n    if (empty($result)) {\n        return true;\n    }\n    return false;\n}\n\nfunction countDownPage($toTime, $message, $image, $bgImage, $title) {\n    global $global;\n    include $global['systemRootPath'] . 'objects/functionCountDownPage.php';\n    exit;\n}\n\nfunction inputToRequest() {\n    $content = file_get_contents(\"php://input\");\n    if (!empty($content)) {\n        $json = json_decode($content);\n        if (empty($json)) {\n            return false;\n        }\n        foreach ($json as $key => $value) {\n            if (!isset($_REQUEST[$key])) {\n                $_REQUEST[$key] = $value;\n            }\n        }\n    }\n}\n\nfunction useVideoHashOrLogin() {\n    if (!empty($_REQUEST['video_id_hash'])) {\n        $videos_id = Video::getVideoIdFromHash($_REQUEST['video_id_hash']);\n        if (!empty($videos_id)) {\n            $users_id = Video::getOwner($videos_id);\n            $user = new User($users_id);\n            _error_log(\"useVideoHashOrLogin: $users_id, $videos_id\");\n            return $user->login(true);\n        }\n    }\n    return User::loginFromRequest();\n}\n\nfunction strip_specific_tags($string, $tags_to_strip = ['script', 'style', 'iframe', 'object', 'applet', 'link']) {\n    foreach ($tags_to_strip as $tag) {\n        $string = preg_replace('/<' . $tag . '[^>]*>(.*?)<\\/' . $tag . '>/s', '$1', $string);\n    }\n    return $string;\n}\n\nfunction strip_render_blocking_resources($string) {\n    $tags_to_strip = ['link', 'style'];\n    $head = preg_match('/<head>(.*)<\\/head>/s', $string, $matches);\n    $string = str_replace($matches[0], '{_head_}', $string);\n    foreach ($tags_to_strip as $tag) {\n        $string = preg_replace('/<' . $tag . '[^>]*>(.*?)<\\/' . $tag . '>/s', '', $string);\n        $string = preg_replace('/<' . $tag . '[^>]*\\/>/s', '', $string);\n    }\n    $string = str_replace('{_head_}', $matches[0], $string);\n    return $string;\n}\n\nfunction optimizeHTMLTags($html) {\n    return $html;\n    //$html = optimizeCSS($html);\n    //$html = optimizeJS($html);\n    return $html . '<--! optimized -->';\n}\n\nfunction optimizeCSS($html) {\n    global $global;\n    $css = '';\n    $cacheDir = getVideosDir() . 'cache/';\n    $cacheName = md5(getSelfURI() . User::getId()) . '.css';\n    $filename = \"{$cacheDir}{$cacheName}\";\n    $urlname = \"{$global['webSiteRootURL']}videos/cache/{$cacheName}\";\n    $HTMLTag = \"<link href=\\\"{$urlname}\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\"/>\";\n    $fileExists = file_exists($filename);\n    //$fileExists = false;\n    // get link tags\n    $pattern = '/((<(link)[^>]*(stylesheet|css)[^>]*\\/>)|(<(style)[^>]*>([^<]+)<\\/style>))/i';\n    preg_match_all($pattern, $html, $matches);\n    foreach ($matches[3] as $key => $type) {\n        if (strtolower($type) == 'link') {\n            $linkTag = $matches[0][$key];\n            $pattern = '/href=.(http[^\"\\']+)/i';\n            preg_match($pattern, $linkTag, $href);\n            if (empty($href)) {\n                continue;\n            }\n            if (!$fileExists) {\n                $content = url_get_contents($href[1]);\n                if (empty($content)) {\n                    continue;\n                }\n                $css .= PHP_EOL . \" /* link {$href[1]} */ \" . $content;\n            }\n            $html = str_replace($linkTag, '', $html);\n        } else {\n            if (!$fileExists) {\n                $css .= PHP_EOL . ' /* style */ ' . $matches[7][$key];\n            }\n            $html = str_replace($matches[1][$key], '', $html);\n        }\n    }\n    if (!$fileExists) {\n        _file_put_contents($filename, $css);\n    }\n    return str_replace('</title>', '</title><!-- optimized CSS -->' . PHP_EOL . $HTMLTag . PHP_EOL . '', $html);\n}\n\nfunction optimizeJS($html) {\n    global $global;\n    $js = '';\n    $cacheDir = getVideosDir() . 'cache/';\n    $cacheName = md5(getSelfURI() . User::getId()) . '.js';\n    $filename = \"{$cacheDir}{$cacheName}\";\n    $urlname = \"{$global['webSiteRootURL']}videos/cache/{$cacheName}\";\n    $HTMLTag = \"<script src=\\\"{$urlname}\\\"></script>\";\n    $fileExists = file_exists($filename);\n    $fileExists = false;\n    // get link tags\n    $pattern = '/((<script[^>]+(src=[^ ]+)[^>]*>( *)<\\/script>)|(<script[^>]*>([^<]+)<\\/script>))/si';\n    preg_match_all($pattern, $html, $matches);\n    foreach ($matches[2] as $key => $type) {\n        if (empty($type)) {\n            if (preg_match('/application_ld_json/i', $matches[1][$key])) {\n                continue;\n            }\n            $js .= PHP_EOL . \" /* js */ \" . $matches[6][$key];\n            $html = str_replace($matches[1][$key], '', $html);\n        } else {\n            $pattern = '/src=.(http[^\"\\']+)/i';\n            preg_match($pattern, $type, $href);\n            if (empty($href)) {\n                continue;\n            }\n            if (preg_match('/(jquery|video-js|videojs)/i', $href[1])) {\n                continue;\n            }\n            if (!$fileExists) {\n                $content = url_get_contents($href[1]);\n                if (empty($content)) {\n                    continue;\n                }\n                $js .= PHP_EOL . \" /* js link {$href[1]} */ \" . $content;\n            }\n            $html = str_replace($type, '', $html);\n        }\n    }\n    if (!$fileExists) {\n        _file_put_contents($filename, $js);\n    }\n    return str_replace('</body>', '<!-- optimized JS -->' . PHP_EOL . $HTMLTag . PHP_EOL . '</body>', $html);\n}\n\nfunction mysqlBeginTransaction() {\n    global $global;\n    _error_log('Begin transaction ' . getSelfURI());\n    $global['mysqli']->autocommit(false);\n}\n\nfunction mysqlRollback() {\n    global $global;\n    _error_log('Rollback transaction ' . getSelfURI(), AVideoLog::$ERROR);\n    $global['mysqli']->rollback();\n    $global['mysqli']->autocommit(true);\n}\n\nfunction mysqlCommit() {\n    global $global;\n    _error_log('Commit transaction ' . getSelfURI());\n    $global['mysqli']->commit();\n    $global['mysqli']->autocommit(true);\n}\n\nfunction number_format_short($n, $precision = 1) {\n    $n = floatval($n);\n    if ($n < 900) {\n        // 0 - 900\n        $n_format = number_format($n, $precision);\n        $suffix = '';\n    } elseif ($n < 900000) {\n        // 0.9k-850k\n        $n_format = number_format($n / 1000, $precision);\n        $suffix = 'K';\n    } elseif ($n < 900000000) {\n        // 0.9m-850m\n        $n_format = number_format($n / 1000000, $precision);\n        $suffix = 'M';\n    } elseif ($n < 900000000000) {\n        // 0.9b-850b\n        $n_format = number_format($n / 1000000000, $precision);\n        $suffix = 'B';\n    } else {\n        // 0.9t+\n        $n_format = number_format($n / 1000000000000, $precision);\n        $suffix = 'T';\n    }\n\n    // Remove unnecessary zeroes after decimal. \"1.0\" -> \"1\"; \"1.00\" -> \"1\"\n    // Intentionally does not affect partials, eg \"1.50\" -> \"1.50\"\n    if ($precision > 0) {\n        $dotzero = '.' . str_repeat('0', $precision);\n        $n_format = str_replace($dotzero, '', $n_format);\n    }\n\n    return $n_format . $suffix;\n}\n\nfunction seconds2human($ss) {\n    $s = $ss % 60;\n    $m = floor(($ss % 3600) / 60);\n    $h = floor(($ss % 86400) / 3600);\n    $d = floor(($ss % 2592000) / 86400);\n    $M = floor($ss / 2592000);\n\n    $times = [];\n\n    if (!empty($M)) {\n        $times[] = \"$M \" . __('m');\n    }\n    if (!empty($d)) {\n        $times[] = \"$d \" . __('d');\n    }\n    if (!empty($h)) {\n        $times[] = \"$h \" . __('h');\n    }\n    if (!empty($m)) {\n        $times[] = \"$m \" . __('min');\n    }\n    if (!empty($s)) {\n        $times[] = \"$s \" . __('sec');\n    }\n\n    return implode(', ', $times);\n}\n\n/**\n * convert a time in a timezone into my time\n * @param type $time\n * @param type $timezone\n * @return type\n */\nfunction getTimeInTimezone($time, $timezone) {\n    if (!is_numeric($time)) {\n        $time = strtotime($time);\n    }\n    if (empty($timezone) || empty(date_default_timezone_get()) || $timezone == date_default_timezone_get()) {\n        return $time;\n    }\n    $date = new DateTime(date('Y-m-d H:i:s', $time));\n    $date->setTimezone(new DateTimeZone($timezone));\n    //$date->setTimezone(date_default_timezone_get());\n    $dateString = $date->format('Y-m-d H:i:s');\n    return strtotime($dateString);\n}\n\nfunction listFolderFiles($dir) {\n    if (empty($dir)) {\n        return [];\n    }\n    $ffs = scandir($dir);\n\n    unset($ffs[array_search('.', $ffs, true)]);\n    unset($ffs[array_search('..', $ffs, true)]);\n\n    $files = [];\n    // prevent empty ordered elements\n    if (count($ffs) >= 1) {\n        foreach ($ffs as $ff) {\n            $dir = rtrim($dir, DIRECTORY_SEPARATOR);\n            $file = $dir . DIRECTORY_SEPARATOR . $ff;\n            if (is_dir($file)) {\n                $files[] = listFolderFiles($file);\n            } else {\n                $files[] = $file;\n            }\n        }\n    }\n    return $files;\n}\n\nfunction convertToMyTimezone($date, $fromTimezone) {\n    $time = getTimestampFromTimezone($date, $fromTimezone);\n    return date('Y-m-d H:i:s', $time);\n}\n\nfunction getTimestampFromTimezone($date, $fromTimezone) {\n    $date = new DateTime($date, new DateTimeZone($fromTimezone));\n    return $date->getTimestamp();\n}\n\nfunction getCSSAnimation($type = 'animate__flipInX', $loaderSequenceName = 'default', $delay = 0.1) {\n    global $_getCSSAnimationClassDelay;\n    getCSSAnimationClassAndStyleAddWait($delay, $loaderSequenceName);\n    return ['class' => 'animate__animated ' . $type, 'style' => \"-webkit-animation-delay: {$_getCSSAnimationClassDelay[$loaderSequenceName]}s; animation-delay: {$_getCSSAnimationClassDelay[$loaderSequenceName]}s;\"];\n}\n\nfunction getCSSAnimationClassAndStyleAddWait($delay, $loaderSequenceName = 'default') {\n    global $_getCSSAnimationClassDelay;\n    if (!isset($_getCSSAnimationClassDelay)) {\n        $_getCSSAnimationClassDelay = [];\n    }\n    if (empty($_getCSSAnimationClassDelay[$loaderSequenceName])) {\n        $_getCSSAnimationClassDelay[$loaderSequenceName] = 0;\n    }\n    $_getCSSAnimationClassDelay[$loaderSequenceName] += $delay;\n}\n\nfunction getCSSAnimationClassAndStyle($type = 'animate__flipInX', $loaderSequenceName = 'default', $delay = 0.1) {\n    $array = getCSSAnimation($type, $loaderSequenceName, $delay);\n    return \"{$array['class']}\\\" style=\\\"{$array['style']}\";\n}\n\nfunction isImage($file) {\n    [$width, $height, $type, $attr] = getimagesize($file);\n    if ($type == IMAGETYPE_PNG) {\n        return 'png';\n    }\n    if ($type == IMAGETYPE_JPEG) {\n        return 'jpg';\n    }\n    if ($type == IMAGETYPE_GIF) {\n        return 'gif';\n    }\n    return false;\n}\n\nfunction isHTMLEmpty($html_string) {\n    $html_string_no_tags = strip_specific_tags($html_string, ['br', 'p', 'span', 'div']);\n    //var_dump($html_string_no_tags, $html_string);\n    return empty(trim(str_replace(array(\"\\r\", \"\\n\"), array('', ''), $html_string_no_tags)));\n}\n\nfunction emptyHTML($html_string){\n    return isHTMLEmpty($html_string);\n}\n\nfunction totalImageColors($image_path) {\n    $img = imagecreatefromjpeg($image_path);\n    $w = imagesx($img);\n    $h = imagesy($img);\n\n    // capture the raw data of the image\n    ob_start();\n    imagegd2($img, null, $w);\n    $data = ob_get_clean();\n    $totalLength = strlen($data);\n\n    // calculate the length of the actual pixel data\n    // from that we can derive the header size\n    $pixelDataLength = $w * $h * 4;\n    $headerLength = $totalLength - $pixelDataLength;\n\n    // use each four-byte segment as the key to a hash table\n    $counts = [];\n    for ($i = $headerLength; $i < $totalLength; $i += 4) {\n        $pixel = substr($data, $i, 4);\n        $count = & $counts[$pixel];\n        $count += 1;\n    }\n    $colorCount = count($counts);\n    return $colorCount;\n}\n\nfunction isImageCorrupted($image_path) {\n    $fsize = filesize($image_path);\n    if (strpos($image_path, 'thumbsSmall') !== false) {\n        if ($fsize < 1000) {\n            return true;\n        }\n    } else {\n        if ($fsize < 2000) {\n            return true;\n        }\n    }\n\n    if (totalImageColors($image_path) === 1) {\n        return true;\n    }\n\n    if (!isGoodImage($image_path)) {\n        return true;\n    }\n    return false;\n}\n\n// detect partial grey immages\nfunction isGoodImage($fn) {\n    [$w, $h] = getimagesize($fn);\n    $im = imagecreatefromstring(file_get_contents($fn));\n    $grey = 0;\n    for ($i = 0; $i < 5; ++$i) {\n        for ($j = 0; $j < 5; ++$j) {\n            $x = $w - 5 + $i;\n            $y = $h - 5 + $j;\n            [$r, $g, $b] = array_values(imagecolorsforindex($im, imagecolorat($im, $x, $y)));\n            if ($r == $g && $g == $b && $b == 128) {\n                ++$grey;\n            }\n        }\n    }\n    return $grey < 12;\n}\n\nfunction defaultIsPortrait() {\n    global $_defaultIsPortrait;\n\n    if (!isset($_defaultIsPortrait)) {\n        $_defaultIsPortrait = false;\n        if ($obj = AVideoPlugin::getDataObjectIfEnabled('YouPHPFlix2') && empty($obj->landscapePosters)) {\n            $_defaultIsPortrait = true;\n        }\n    }\n\n    return $_defaultIsPortrait;\n}\n\nfunction isDummyFile($filePath) {\n    global $_isDummyFile;\n\n    if (!isset($_isDummyFile)) {\n        $_isDummyFile = array();\n    }\n    if (isset($_isDummyFile[$filePath])) {\n        return $_isDummyFile[$filePath];\n    }\n\n    $return = false;\n\n    if (file_exists($filePath)) {\n        $fileSize = filesize($filePath);\n        if ($fileSize > 5 && $fileSize < 20) {\n            $return = true;\n        } else\n        if ($fileSize < 100) {\n            $return = preg_match(\"/Dummy File/i\", file_get_contents($filePath));\n        }\n    }\n    $_isDummyFile[$filePath] = $return;\n    return $return;\n}\n\nfunction forbiddenPageIfCannotEmbed($videos_id) {\n    global $customizedAdvanced, $advancedCustomUser, $global;\n    if (empty($customizedAdvanced)) {\n        $customizedAdvanced = AVideoPlugin::getObjectDataIfEnabled('CustomizeAdvanced');\n    }\n    if (empty($advancedCustomUser)) {\n        $customizedAdvanced = AVideoPlugin::getObjectDataIfEnabled('CustomizeUser');\n    }\n    if (!isAVideoMobileApp()) {\n        if (!isSameDomain(@$_SERVER['HTTP_REFERER'], $global['webSiteRootURL'])) {\n            if (!empty($advancedCustomUser->blockEmbedFromSharedVideos) && !CustomizeUser::canShareVideosFromVideo($videos_id)) {\n                $reason = array();\n                if (!empty($advancedCustomUser->blockEmbedFromSharedVideos)) {\n                    error_log(\"forbiddenPageIfCannotEmbed: Embed is forbidden: \\$advancedCustomUser->blockEmbedFromSharedVideos\");\n                    $reason[] = __('Admin block video sharing');\n                }\n                if (!CustomizeUser::canShareVideosFromVideo($videos_id)) {\n                    error_log(\"forbiddenPageIfCannotEmbed: Embed is forbidden: !CustomizeUser::canShareVideosFromVideo(\\$video['id'])\");\n                    $reason[] = __('User block video sharing');\n                }\n                forbiddenPage(\"Embed is forbidden \" . implode('<br>', $reason));\n            }\n        }\n\n        $objSecure = AVideoPlugin::loadPluginIfEnabled('SecureVideosDirectory');\n        if (!empty($objSecure)) {\n            $objSecure->verifyEmbedSecurity();\n        }\n    }\n}\n"], "fixing_code": ["<?php\n$AVideoMobileAPP_UA = \"AVideoMobileApp\";\n$AVideoEncoder_UA = \"AVideoEncoder\";\n$AVideoStreamer_UA = \"AVideoStreamer\";\n$AVideoStorage_UA = \"AVideoStorage\";\n$mysql_connect_was_closed = 1;\n\nfunction forbiddenWords($text) {\n    global $global;\n    if (empty($global['forbiddenWords'])) {\n        return false;\n    }\n    foreach ($global['forbiddenWords'] as $value) {\n        if (preg_match(\"/{$value}/i\", $text)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nif (!function_exists('xss_esc')) {\n\n    function xss_esc($text) {\n        if (empty($text)) {\n            return \"\";\n        }\n        $result = @htmlspecialchars($text, ENT_QUOTES, 'UTF-8');\n        if (empty($result)) {\n            $result = str_replace(['\"', \"'\", \"\\\\\"], [\"\", \"\", \"\"], strip_tags($text));\n        }\n        $result = str_replace(['&amp;amp;'], ['&amp;'], $result);\n        return $result;\n    }\n\n}\n\nfunction xss_esc_back($text) {\n    $text = htmlspecialchars_decode($text, ENT_QUOTES);\n    $text = str_replace(['&amp;', '&#039;', \"#039;\"], [\" \", \"`\", \"`\"], $text);\n    return $text;\n}\n\n// Make sure SecureVideosDirectory will be the first\nfunction cmpPlugin($a, $b) {\n    if (\n            $a['name'] === 'SecureVideosDirectory' ||\n            $a['name'] === 'GoogleAds_IMA' ||\n            $a['name'] === 'Subscription' ||\n            $a['name'] === 'PayPerView' ||\n            $a['name'] === 'FansSubscriptions'\n    ) {\n        return -1;\n    } elseif ($a['name'] === 'PlayerSkins') {\n        return 1;\n    } elseif (\n            $b['name'] === 'SecureVideosDirectory' ||\n            $b['name'] === 'GoogleAds_IMA' ||\n            $b['name'] === 'Subscription' ||\n            $b['name'] === 'PayPerView' ||\n            $b['name'] === 'FansSubscriptions'\n    ) {\n        return 1;\n    } elseif ($b['name'] === 'PlayerSkins') {\n        return -1;\n    }\n    return 0;\n}\n\n// Returns a file size limit in bytes based on the PHP upload_max_filesize\n// and post_max_size\nfunction file_upload_max_size() {\n    static $max_size = -1;\n\n    if ($max_size < 0) {\n        // Start with post_max_size.\n        $max_size = parse_size(ini_get('post_max_size'));\n\n        // If upload_max_size is less, then reduce. Except if upload_max_size is\n        // zero, which indicates no limit.\n        $upload_max = parse_size(ini_get('upload_max_filesize'));\n        if ($upload_max > 0 && $upload_max < $max_size) {\n            $max_size = $upload_max;\n        }\n    }\n    return $max_size;\n}\n\nfunction parse_size($size) {\n    $unit = preg_replace('/[^bkmgtpezy]/i', '', $size); // Remove the non-unit characters from the size.\n    $size = preg_replace('/[^0-9\\.]/', '', $size); // Remove the non-numeric characters from the size.\n    if ($unit) {\n        // Find the position of the unit in the ordered string which is the power of magnitude to multiply a kilobyte by.\n        return round($size * pow(1024, stripos('bkmgtpezy', $unit[0])));\n    } else {\n        return round($size);\n    }\n}\n\nfunction humanFileSize($size, $unit = \"\") {\n    if ((!$unit && $size >= 1 << 30) || $unit == \"GB\") {\n        return number_format($size / (1 << 30), 2) . \"GB\";\n    }\n\n    if ((!$unit && $size >= 1 << 20) || $unit == \"MB\") {\n        return number_format($size / (1 << 20), 2) . \"MB\";\n    }\n\n    if ((!$unit && $size >= 1 << 10) || $unit == \"KB\") {\n        return number_format($size / (1 << 10), 2) . \"KB\";\n    }\n\n    return number_format($size) . \" bytes\";\n}\n\nfunction get_max_file_size() {\n    return humanFileSize(file_upload_max_size());\n}\n\nfunction humanTiming($time, $precision = 0, $useDatabaseTime = true) {\n    $time = secondsIntervalFromNow($time, $useDatabaseTime);\n    return secondsToHumanTiming($time, $precision);\n}\n\n/**\n *\n * @param type $time\n * @param type $precision\n * @param type $useDatabaseTime good if you are checking the created time\n * @return type\n */\nfunction humanTimingAgo($time, $precision = 0, $useDatabaseTime = true) {\n    $time = secondsIntervalFromNow($time, $useDatabaseTime);\n    if (empty($time)) {\n        return __(\"Now\");\n    }\n    return secondsToHumanTiming($time, $precision) . \" \" . __(\"ago\");\n}\n\nfunction humanTimingAfterwards($time, $precision = 0, $useDatabaseTime = true) {\n    if (!is_numeric($time)) {\n        $time = strtotime($time);\n    }\n    $time = secondsIntervalFromNow($time, $useDatabaseTime);\n    if (empty($time)) {\n        return __(\"Now\");\n    } elseif ($time > 0) {\n        return secondsToHumanTiming($time, $precision) . ' ' . __('Ago');\n    }\n    return __('Coming in') . ' ' . secondsToHumanTiming($time, $precision);\n}\n\nfunction secondsToHumanTiming($time, $precision = 0) {\n    if (empty($time)) {\n        return __(\"Now\");\n    }\n    $time = ($time < 0) ? $time * -1 : $time;\n    $time = ($time < 1) ? 1 : $time;\n    $tokens = [\n        31536000 => 'year',\n        2592000 => 'month',\n        604800 => 'week',\n        86400 => 'day',\n        3600 => 'hour',\n        60 => 'minute',\n        1 => 'second',\n    ];\n\n    /**\n     * For detection propouse only\n     */\n    __('year');\n    __('month');\n    __('week');\n    __('day');\n    __('hour');\n    __('minute');\n    __('second');\n    __('years');\n    __('months');\n    __('weeks');\n    __('days');\n    __('hours');\n    __('minutes');\n    __('seconds');\n\n    foreach ($tokens as $unit => $text) {\n        if ($time < $unit) {\n            continue;\n        }\n\n        $numberOfUnits = floor($time / $unit);\n        if ($numberOfUnits > 1) {\n            $text = __($text . \"s\");\n        } else {\n            $text = __($text);\n        }\n\n        if ($precision) {\n            $rest = $time % $unit;\n            if ($rest) {\n                $text .= ' ' . secondsToHumanTiming($rest, $precision - 1);\n            }\n        }\n\n        return $numberOfUnits . ' ' . $text;\n    }\n}\n\nfunction checkVideosDir() {\n    $dir = \"../videos\";\n    if (file_exists($dir)) {\n        return is_writable($dir);\n    }\n    return mkdir($dir);\n}\n\nfunction isApache() {\n    return (strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') !== false);\n}\n\nfunction isPHP($version = \"'7.3.0'\") {\n    return (version_compare(PHP_VERSION, $version) >= 0);\n}\n\nfunction modEnabled($mod_name) {\n    if (!function_exists('apache_get_modules')) {\n        ob_start();\n        phpinfo(INFO_MODULES);\n        $contents = ob_get_contents();\n        ob_end_clean();\n        return (strpos($contents, 'mod_' . $mod_name) !== false);\n    }\n    return in_array('mod_' . $mod_name, apache_get_modules());\n}\n\nfunction modRewriteEnabled() {\n    return modEnabled(\"rewrite\");\n}\n\nfunction modAliasEnabled() {\n    return modEnabled(\"alias\");\n}\n\nfunction isFFMPEG() {\n    return trim(shell_exec('which ffmpeg'));\n}\n\nfunction isUnzip() {\n    return trim(shell_exec('which unzip'));\n}\n\nfunction isExifToo() {\n    return trim(shell_exec('which exiftool'));\n}\n\nfunction isAPPInstalled($appName) {\n    $appName = preg_replace('/[^a-z0-9_-]/i', '', $appName);\n    return trim(shell_exec(\"which {$appName}\"));\n}\n\nfunction getPathToApplication() {\n    return str_replace(\"install/index.php\", \"\", $_SERVER[\"SCRIPT_FILENAME\"]);\n}\n\nfunction getURLToApplication() {\n    $url = (isset($_SERVER['HTTPS']) ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n    $url = explode(\"install/index.php\", $url);\n    return $url[0];\n}\n\n//max_execution_time = 7200\nfunction check_max_execution_time() {\n    $max_size = ini_get('max_execution_time');\n    $recomended_size = 7200;\n    return ($recomended_size <= $max_size);\n}\n\n//post_max_size = 100M\nfunction check_post_max_size() {\n    $max_size = parse_size(ini_get('post_max_size'));\n    $recomended_size = parse_size('100M');\n    return ($recomended_size <= $max_size);\n}\n\n//upload_max_filesize = 100M\nfunction check_upload_max_filesize() {\n    $max_size = parse_size(ini_get('upload_max_filesize'));\n    $recomended_size = parse_size('100M');\n    return ($recomended_size <= $max_size);\n}\n\n//memory_limit = 100M\nfunction check_memory_limit() {\n    $max_size = parse_size(ini_get('memory_limit'));\n    $recomended_size = parse_size('512M');\n    return ($recomended_size <= $max_size);\n}\n\nfunction check_mysqlnd() {\n    return function_exists('mysqli_fetch_all');\n}\n\nfunction base64DataToImage($imgBase64) {\n    $img = $imgBase64;\n    $img = str_replace('data:image/png;base64,', '', $img);\n    $img = str_replace(' ', '+', $img);\n    return base64_decode($img);\n}\n\nfunction getRealIpAddr() {\n    if (isCommandLineInterface()) {\n        $ip = \"127.0.0.1\";\n    } else if (!empty($_SERVER['HTTP_CLIENT_IP'])) { //check ip from share internet\n        $ip = $_SERVER['HTTP_CLIENT_IP'];\n    } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) { //to check ip is pass from proxy\n        $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];\n    } elseif (!empty($_SERVER['REMOTE_ADDR'])) {\n        $ip = $_SERVER['REMOTE_ADDR'];\n    } else {\n        $ip = \"127.0.0.1\";\n    }\n    return $ip;\n}\n\nfunction cleanString($text) {\n    $utf8 = [\n        '/[\u00e1a\u00e2aa\u00e4\u0105]/u' => 'a',\n        '/[\u00c1A\u00c2A\u00c4\u0104]/u' => 'A',\n        '/[\u00cdI\u00ceI]/u' => 'I',\n        '/[\u00edi\u00eei]/u' => 'i',\n        '/[\u00e9ee\u00eb\u0119]/u' => 'e',\n        '/[\u00c9EE\u00cb\u0118]/u' => 'E',\n        '/[\u00f3o\u00f4oo\u00f6]/u' => 'o',\n        '/[\u00d3O\u00d4O\u00d6]/u' => 'O',\n        '/[\u00fauu\u00fc]/u' => 'u',\n        '/[\u00daUU\u00dc]/u' => 'U',\n        '/[\u00e7\u0107]/u' => 'c',\n        '/[\u00c7\u0106]/u' => 'C',\n        '/[n\u0144]/u' => 'n',\n        '/[N\u0143]/u' => 'N',\n        '/[\u017c\u017a]/u' => 'z',\n        '/[\u017b\u0179]/u' => 'Z',\n        '/\u0142/' => 'l',\n        '/\u0141/' => 'L',\n        '/\u015b/' => 's',\n        '/\u015a/' => 'S',\n        '/\u2013/' => '-', // UTF-8 hyphen to 'normal' hyphen\n        '/[\u2019\u2018\u2039\u203a\u201a]/u' => ' ', // Literally a single quote\n        '/[\u201c\u201d\u00ab\u00bb\u201e]/u' => ' ', // Double quote\n        '/ /' => ' ', // nonbreaking space (equiv. to 0x160)\n        '/\u0404/' => 'YE', '/\u0406/' => 'I', '/\u0403/' => 'G', '/\u0456/' => 'i', '/\u2116/' => '#', '/\u0454/' => 'ye', '/\u0453/' => 'g',\n        '/\u0410/' => 'A', '/\u0411/' => 'B', '/\u0412/' => 'V', '/\u0413/' => 'G', '/\u0414/' => 'D',\n        '/\u0415/' => 'E', '/\u0401/' => 'YO', '/\u0416/' => 'ZH',\n        '/\u0417/' => 'Z', '/\u0418/' => 'I', '/\u0419/' => 'J', '/\u041a/' => 'K', '/\u041b/' => 'L',\n        '/\u041c/' => 'M', '/\u041d/' => 'N', '/\u041e/' => 'O', '/\u041f/' => 'P', '/\u0420/' => 'R',\n        '/\u0421/' => 'S', '/\u0422/' => 'T', '/\u0423/' => 'U', '/\u0424/' => 'F', '/\u0425/' => 'H',\n        '/\u0426/' => 'C', '/\u0427/' => 'CH', '/\u0428/' => 'SH', '/\u0429/' => 'SHH', '/\u042a/' => '',\n        '/\u042b/' => 'Y', '/\u042c/' => '', '/\u042d/' => 'E', '/\u042e/' => 'YU', '/\u042f/' => 'YA',\n        '/\u0430/' => 'a', '/\u0431/' => 'b', '/\u0432/' => 'v', '/\u0433/' => 'g', '/\u0434/' => 'd',\n        '/\u0435/' => 'e', '/\u0451/' => 'yo', '/\u0436/' => 'zh',\n        '/\u0437/' => 'z', '/\u0438/' => 'i', '/\u0439/' => 'j', '/\u043a/' => 'k', '/\u043b/' => 'l',\n        '/\u043c/' => 'm', '/\u043d/' => 'n', '/\u043e/' => 'o', '/\u043f/' => 'p', '/\u0440/' => 'r',\n        '/\u0441/' => 's', '/\u0442/' => 't', '/\u0443/' => 'u', '/\u0444/' => 'f', '/\u0445/' => 'h',\n        '/\u0446/' => 'c', '/\u0447/' => 'ch', '/\u0448/' => 'sh', '/\u0449/' => 'shh', '/\u044a/' => '',\n        '/\u044b/' => 'y', '/\u044c/' => '', '/\u044d/' => 'e', '/\u044e/' => 'yu', '/\u044f/' => 'ya',\n        '/\u2014/' => '-', '/\u00ab/' => '', '/\u00bb/' => '', '/\u2026/' => '',\n    ];\n    return preg_replace(array_keys($utf8), array_values($utf8), $text);\n}\n\nfunction cleanURLName($name) {\n    $name = preg_replace('/[!#$&\\'()*+,\\\\/:;=?@[\\\\]%\"\\/ ]+/', '-', trim(strtolower(cleanString($name))));\n    return trim(preg_replace('/[\\x00-\\x1F\\x7F]/u', '', $name), \"-\");\n}\n\n/**\n * @brief return true if running in CLI, false otherwise\n * if is set $_GET['ignoreCommandLineInterface'] will return false\n * @return boolean\n */\nfunction isCommandLineInterface() {\n    return (empty($_GET['ignoreCommandLineInterface']) && php_sapi_name() === 'cli');\n}\n\n/**\n * @brief show status message as text (CLI) or JSON-encoded array (web)\n *\n * @param array $statusarray associative array with type/message pairs\n * @return string\n */\nfunction status($statusarray) {\n    if (isCommandLineInterface()) {\n        foreach ($statusarray as $status => $message) {\n            echo $status . \":\" . $message . \"\\n\";\n        }\n    } else {\n        echo json_encode(array_map(function ($text) {\n                    return nl2br($text);\n                }, $statusarray));\n    }\n}\n\n/**\n * @brief show status message and die\n *\n * @param array $statusarray associative array with type/message pairs\n */\nfunction croak($statusarray) {\n    status($statusarray);\n    die;\n}\n\nfunction getSecondsTotalVideosLength() {\n    $configFile = dirname(__FILE__) . '/../videos/configuration.php';\n    require_once $configFile;\n    global $global;\n\n    if (!User::isLogged()) {\n        return 0;\n    }\n    $sql = \"SELECT * FROM videos v \";\n    $formats = '';\n    $values = [];\n    if (!User::isAdmin()) {\n        $id = User::getId();\n        $sql .= \" WHERE users_id = ? \";\n        $formats = \"i\";\n        $values = [$id];\n    }\n\n    $res = sqlDAL::readSql($sql, $formats, $values);\n    $fullData = sqlDAL::fetchAllAssoc($res);\n    sqlDAL::close($res);\n    $seconds = 0;\n    foreach ($fullData as $row) {\n        $seconds += parseDurationToSeconds($row['duration']);\n    }\n    return $seconds;\n}\n\nfunction getMinutesTotalVideosLength() {\n    $seconds = getSecondsTotalVideosLength();\n    return floor($seconds / 60);\n}\n\nfunction secondsToVideoTime($seconds) {\n    if (!is_numeric($seconds)) {\n        return $seconds;\n    }\n    $seconds = round($seconds);\n    $hours = floor($seconds / 3600);\n    $mins = floor($seconds / 60 % 60);\n    $secs = floor($seconds % 60);\n    return sprintf('%02d:%02d:%02d', $hours, $mins, $secs);\n}\n\nfunction parseSecondsToDuration($seconds) {\n    return secondsToVideoTime($seconds);\n}\n\nfunction parseDurationToSeconds($str) {\n    if (is_numeric($str)) {\n        return intval($str);\n    }\n    $durationParts = explode(\":\", $str);\n    if (empty($durationParts[1]) || $durationParts[0] == \"EE\") {\n        return 0;\n    }\n    if (empty($durationParts[2])) {\n        $durationParts[2] = 0;\n    }\n    $minutes = intval(($durationParts[0]) * 60) + intval($durationParts[1]);\n    return intval($durationParts[2]) + ($minutes * 60);\n}\n\nfunction durationToSeconds($str) {\n    return parseDurationToSeconds($str);\n}\n\nfunction secondsToDuration($seconds) {\n    return parseSecondsToDuration($seconds);\n}\n\n/**\n *\n * @global type $global\n * @param type $mail\n * call it before send mail to let AVideo decide the method\n */\nfunction setSiteSendMessage(&$mail) {\n    global $global;\n    if (empty($_POST[\"comment\"])) {\n        $_POST[\"comment\"] = '';\n    }\n    require_once $global['systemRootPath'] . 'objects/configuration.php';\n    $config = new Configuration();\n    $mail->CharSet = 'UTF-8';\n    if ($config->getSmtp()) {\n        _error_log(\"Sending SMTP Email\");\n        $mail->CharSet = 'UTF-8';\n        $mail->IsSMTP(); // enable SMTP\n        if (!empty($_POST) && $_POST[\"comment\"] == \"Test of comment\" && User::isAdmin()) {\n            $mail->SMTPDebug = 3;\n            $mail->Debugoutput = function ($str, $level) {\n                _error_log(\"SMTP ERROR $level; message: $str\", AVideoLog::$ERROR);\n            };\n        }\n        $mail->SMTPOptions = [\n            'ssl' => [\n                'verify_peer' => false,\n                'verify_peer_name' => false,\n                'allow_self_signed' => true,\n            ],\n        ];\n        $mail->SMTPAuth = $config->getSmtpAuth(); // authentication enabled\n        $mail->SMTPSecure = $config->getSmtpSecure(); // secure transfer enabled REQUIRED for Gmail\n        $mail->Host = $config->getSmtpHost();\n        $mail->Port = $config->getSmtpPort();\n        $mail->Username = $config->getSmtpUsername();\n        $mail->Password = $config->getSmtpPassword();\n        //_error_log(print_r($config, true));\n    } else {\n        _error_log(\"Sending SendMail Email\");\n        $mail->isSendmail();\n    }\n}\n\nfunction array_iunique($array) {\n    return array_intersect_key($array, array_unique(array_map(\"strtolower\", $array)));\n}\n\nfunction partition(array $list, $totalItens) {\n    $listlen = count($list);\n    _error_log(\"partition: listlen={$listlen} totalItens={$totalItens}\");\n    $p = ceil($listlen / $totalItens);\n    $partlen = floor($listlen / $p);\n\n    $partition = [];\n    $mark = 0;\n    for ($index = 0; $index < $p; $index++) {\n        $partition[$index] = array_slice($list, $mark, $totalItens);\n        $mark += $totalItens;\n    }\n\n    return $partition;\n}\n\nfunction sendSiteEmail($to, $subject, $message) {\n    global $advancedCustom;\n    if (empty($to)) {\n        return false;\n    }\n    if (!is_array($to)) {\n        $to = [$to];\n    }\n\n    if (empty($advancedCustom)) {\n        $advancedCustom = AVideoPlugin::loadPlugin(\"CustomizeAdvanced\");\n    }\n\n    $subject = UTF8encode($subject);\n    $message = UTF8encode($message);\n    $message = createEmailMessageFromTemplate($message);\n    _error_log(\"sendSiteEmail [\" . count($to) . \"] {$subject}\");\n    global $config, $global;\n    //require_once $global['systemRootPath'] . 'objects/include_phpmailer.php';\n    $contactEmail = $config->getContactEmail();\n    $webSiteTitle = $config->getWebSiteTitle();\n    try {\n        if (!is_array($to)) {\n            $mail = new \\PHPMailer\\PHPMailer\\PHPMailer();\n            setSiteSendMessage($mail);\n            $mail->setFrom($contactEmail, $webSiteTitle);\n            $mail->Subject = $subject . \" - \" . $webSiteTitle;\n            $mail->msgHTML($message);\n\n            $mail->addAddress($to);\n\n            $resp = $mail->send();\n            if (!$resp) {\n                _error_log(\"sendSiteEmail Error Info: {$mail->ErrorInfo}\");\n            } else {\n                _error_log(\"sendSiteEmail Success Info: $subject \" . json_encode($to));\n            }\n        } else {\n            $size = intval(@$advancedCustom->splitBulkEmailSend);\n            if (empty($size)) {\n                $size = 90;\n            }\n\n            $to = array_iunique($to);\n            $pieces = partition($to, $size);\n            foreach ($pieces as $piece) {\n                $mail = new \\PHPMailer\\PHPMailer\\PHPMailer();\n                setSiteSendMessage($mail);\n                $mail->setFrom($contactEmail, $webSiteTitle);\n                $mail->Subject = $subject . \" - \" . $webSiteTitle;\n                $mail->msgHTML($message);\n                $count = 0;\n                foreach ($piece as $value) {\n                    $count++;\n                    _error_log(\"sendSiteEmail::addBCC [{$count}] {$value}\");\n                    $mail->addBCC($value);\n                }\n\n                $resp = $mail->send();\n                if (!$resp) {\n                    _error_log(\"sendSiteEmail Error Info: {$mail->ErrorInfo}\");\n                } else {\n                    _error_log(\"sendSiteEmail Success Info: $subject \" . json_encode($to));\n                }\n            }\n        }\n        //Set the subject line\n        return $resp;\n    } catch (phpmailerException $e) {\n        _error_log($e->errorMessage()); //Pretty error messages from PHPMailer\n    } catch (Exception $e) {\n        _error_log($e->getMessage()); //Boring error messages from anything else!\n    }\n}\n\nfunction sendSiteEmailAsync($to, $subject, $message) {\n    global $global;\n    $content = ['to' => $to, 'subject' => $subject, 'message' => $message];\n    $tmpFile = getTmpFile();\n    file_put_contents($tmpFile, _json_encode($content));\n    //outputAndContinueInBackground();\n    $command = \"php {$global['systemRootPath']}objects/sendSiteEmailAsync.php '$tmpFile'\";\n\n    _error_log(\"sendSiteEmailAsync start  ($command)\");\n    $pid = execAsync($command);\n    _error_log(\"sendSiteEmailAsync end {$pid}\");\n    return $pid;\n}\n\nfunction createEmailMessageFromTemplate($message) {\n\n    //check if the message already have a HTML body\n    if (preg_match(\"/html>/i\", $message)) {\n        return $message;\n    }\n\n    global $global, $config;\n    $text = file_get_contents(\"{$global['systemRootPath']}view/include/emailTemplate.html\");\n    $siteTitle = $config->getWebSiteTitle();\n    $logo = \"<img src=\\\"\" . getURL($config->getLogo()) . \"\\\" alt=\\\"{$siteTitle}\\\"/>\";\n\n    $words = [$logo, $message, $siteTitle];\n    $replace = ['{logo}', '{message}', '{siteTitle}'];\n\n    return str_replace($replace, $words, $text);\n}\n\nfunction sendEmailToSiteOwner($subject, $message) {\n    global $advancedCustom;\n    $subject = UTF8encode($subject);\n    $message = UTF8encode($message);\n    _error_log(\"sendEmailToSiteOwner {$subject}\");\n    global $config, $global;\n    require_once $global['systemRootPath'] . 'objects/include_phpmailer.php';\n    $contactEmail = $config->getContactEmail();\n    $webSiteTitle = $config->getWebSiteTitle();\n    try {\n        $mail = new \\PHPMailer\\PHPMailer\\PHPMailer();\n        setSiteSendMessage($mail);\n        $mail->setFrom($contactEmail, $webSiteTitle);\n        $mail->Subject = $subject . \" - \" . $webSiteTitle;\n        $mail->msgHTML($message);\n        $mail->addAddress($contactEmail);\n        $resp = $mail->send();\n        if (!$resp) {\n            _error_log(\"sendEmailToSiteOwner Error Info: {$mail->ErrorInfo}\");\n        } else {\n            _error_log(\"sendEmailToSiteOwner Success Info: $subject \" . json_encode($to));\n        }\n        return $resp;\n    } catch (phpmailerException $e) {\n        _error_log($e->errorMessage()); //Pretty error messages from PHPMailer\n    } catch (Exception $e) {\n        _error_log($e->getMessage()); //Boring error messages from anything else!\n    }\n}\n\nfunction parseVideos($videoString = null, $autoplay = 0, $loop = 0, $mute = 0, $showinfo = 0, $controls = 1, $time = 0, $objectFit = \"\") {\n    global $global;\n    //_error_log(\"parseVideos: $videoString\");\n    if (strpos($videoString, 'youtube.com/embed') !== false) {\n        return $videoString . (parse_url($videoString, PHP_URL_QUERY) ? '&' : '?') . 'modestbranding=1&showinfo='\n                . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time&objectFit=$objectFit\";\n    }\n    if (strpos($videoString, 'iframe') !== false) {\n        // retrieve the video url\n        $anchorRegex = '/src=\"(.*)?\"/isU';\n        $results = [];\n        if (preg_match($anchorRegex, $video, $results)) {\n            $link = trim($results[1]);\n        }\n    } else {\n        // we already have a url\n        $link = $videoString;\n    }\n\n    if (stripos($link, 'embed') !== false) {\n        return $link . (parse_url($link, PHP_URL_QUERY) ? '&' : '?') . 'modestbranding=1&showinfo='\n                . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time&objectFit=$objectFit\";\n    } elseif (strpos($link, 'youtube.com') !== false) {\n        preg_match(\n                '/[\\\\?\\\\&]v=([^\\\\?\\\\&]+)/',\n                $link,\n                $matches\n        );\n        //the ID of the YouTube URL: x6qe_kVaBpg\n        if (empty($matches[1])) {\n            return $link;\n        }\n        $id = $matches[1];\n        return '//www.youtube.com/embed/' . $id . '?modestbranding=1&showinfo='\n                . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&te=$time&objectFit=$objectFit\";\n    } elseif (strpos($link, 'youtu.be') !== false) {\n        //https://youtu.be/9XXOBSsPoMU\n        preg_match(\n                '/youtu.be\\/([a-zA-Z0-9_]+)($|\\/)/',\n                $link,\n                $matches\n        );\n        //the ID of the YouTube URL: x6qe_kVaBpg\n        $id = $matches[1];\n        return '//www.youtube.com/embed/' . $id . '?modestbranding=1&showinfo='\n                . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&te=$time&objectFit=$objectFit\";\n    } elseif (strpos($link, 'player.vimeo.com') !== false) {\n        // works on:\n        // http://player.vimeo.com/video/37985580?title=0&amp;byline=0&amp;portrait=0\n        $videoIdRegex = '/player.vimeo.com\\/video\\/([0-9]+)\\??/i';\n        preg_match($videoIdRegex, $link, $matches);\n        $id = $matches[1];\n        return '//player.vimeo.com/video/' . $id;\n    } elseif (strpos($link, 'vimeo.com/channels') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?vimeo.com\\/channels\\/[a-z0-9-]+\\/(\\d+)($|\\/)/i',\n                $link,\n                $matches\n        );\n\n        //the ID of the Vimeo URL: 71673549\n        $id = $matches[2];\n        return '//player.vimeo.com/video/' . $id;\n    } elseif (strpos($link, 'vimeo.com') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?vimeo.com\\/(\\d+)($|\\/)/',\n                $link,\n                $matches\n        );\n\n        //the ID of the Vimeo URL: 71673549\n        $id = $matches[2];\n        return '//player.vimeo.com/video/' . $id;\n    } elseif (strpos($link, 'dailymotion.com') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?dailymotion.com\\/video\\/([a-zA-Z0-9_]+)($|\\/)/',\n                $link,\n                $matches\n        );\n\n        //the ID of the Vimeo URL: 71673549\n        $id = $matches[2];\n        return '//www.dailymotion.com/embed/video/' . $id;\n    } elseif (strpos($link, 'metacafe.com') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?metacafe.com\\/watch\\/([a-zA-Z0-9_\\/-]+)$/',\n                $link,\n                $matches\n        );\n        $id = $matches[2];\n        return '//www.metacafe.com/embed/' . $id;\n    } elseif (strpos($link, 'vid.me') !== false) {\n        //extract the ID\n        preg_match(\n                '/\\/\\/(www\\.)?vid.me\\/([a-zA-Z0-9_-]+)$/',\n                $link,\n                $matches\n        );\n\n        $id = $matches[2];\n        return '//vid.me/e/' . $id;\n    } elseif (strpos($link, 'rutube.ru') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?rutube.ru\\/video\\/([a-zA-Z0-9_-]+)\\/.*/', $link, $matches);\n        $id = $matches[2];\n        return '//rutube.ru/play/embed/' . $id;\n    } elseif (strpos($link, 'ok.ru') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?ok.ru\\/video\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n\n        $id = $matches[2];\n        return '//ok.ru/videoembed/' . $id;\n    } elseif (strpos($link, 'streamable.com') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?streamable.com\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n\n        $id = $matches[2];\n        return '//streamable.com/s/' . $id;\n    } elseif (strpos($link, 'twitch.tv/videos') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?twitch.tv\\/videos\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n        if (!empty($matches[2])) {\n            $id = $matches[2];\n            return '//player.twitch.tv/?video=' . $id . '&parent=' . parse_url($global['webSiteRootURL'], PHP_URL_HOST);\n        }\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?twitch.tv\\/[a-zA-Z0-9_-]+\\/v\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n\n        $id = $matches[2];\n        return '//player.twitch.tv/?video=' . $id . '&parent=' . parse_url($global['webSiteRootURL'], PHP_URL_HOST);\n    } elseif (strpos($link, 'twitch.tv') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?twitch.tv\\/([a-zA-Z0-9_-]+)$/', $link, $matches);\n\n        $id = $matches[2];\n        return '//player.twitch.tv/?channel=' . $id . '&parent=' . parse_url($global['webSiteRootURL'], PHP_URL_HOST);\n    } elseif (strpos($link, 'bitchute.com/video') !== false) {\n        //extract the ID\n        preg_match('/\\/\\/(www\\.)?bitchute.com\\/video\\/([^\\/]+)/', $link, $matches);\n        $id = $matches[2];\n        return 'https://www.bitchute.com/embed/' . $id . '/?parent=' . parse_url($global['webSiteRootURL'], PHP_URL_HOST);\n    } elseif (strpos($link, '/evideo/') !== false) {\n        //extract the ID\n        preg_match('/(http.+)\\/evideo\\/([a-zA-Z0-9_-]+)($|\\/)/i', $link, $matches);\n\n        //the AVideo site\n        $site = $matches[1];\n        $id = $matches[2];\n        return $site . '/evideoEmbed/' . $id . \"?autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time\";\n    } elseif (strpos($link, '/video/') !== false) {\n        //extract the ID\n        preg_match('/(http.+)\\/video\\/([a-zA-Z0-9_-]+)($|\\/)/i', $link, $matches);\n\n        //the AVideo site\n        if (!empty($matches[1])) {\n            $site = $matches[1];\n            $id = $matches[2];\n            return $site . '/videoEmbeded/' . $id . \"?autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time\";\n        } else {\n            return $link;\n        }\n    }\n\n    $url = $videoString;\n    $url_parsed = parse_url($url);\n    if (empty($url_parsed['query'])) {\n        return \"\";\n    }\n    $new_qs_parsed = [];\n    // Grab our first query string\n    parse_str($url_parsed['query'], $new_qs_parsed);\n    // Here's the other query string\n    $other_query_string = 'modestbranding=1&showinfo='\n            . $showinfo . \"&autoplay={$autoplay}&controls=$controls&loop=$loop&mute=$mute&t=$time\";\n    $other_qs_parsed = [];\n    parse_str($other_query_string, $other_qs_parsed);\n    // Stitch the two query strings together\n    $final_query_string_array = array_merge($new_qs_parsed, $other_qs_parsed);\n    $final_query_string = http_build_query($final_query_string_array);\n    // Now, our final URL:\n    if (empty($url_parsed['scheme'])) {\n        $scheme = '';\n    } else {\n        $scheme = \"{$url_parsed['scheme']}:\";\n    }\n    $new_url = $scheme\n            . '//'\n            . $url_parsed['host']\n            . $url_parsed['path']\n            . '?'\n            . $final_query_string;\n\n    return $new_url;\n    // return data\n}\n\n$canUseCDN = [];\n\nfunction canUseCDN($videos_id) {\n    if (empty($videos_id)) {\n        return false;\n    }\n    global $global, $canUseCDN;\n    if (!isset($canUseCDN[$videos_id])) {\n        require_once $global['systemRootPath'] . 'plugin/VR360/Objects/VideosVR360.php';\n        $pvr360 = AVideoPlugin::isEnabledByName('VR360');\n        // if the VR360 is enabled you can not use the CDN, it fail to load the GL\n        $isVR360Enabled = VideosVR360::isVR360Enabled($videos_id);\n        if ($pvr360 && $isVR360Enabled) {\n            $ret = false;\n        } else {\n            $ret = true;\n        }\n\n        //_error_log(json_encode(array('canUseCDN'=>$ret, '$pvr360'=>$pvr360, '$isVR360Enabled'=>$isVR360Enabled, '$videos_id'=>$videos_id)));\n        $canUseCDN[$videos_id] = $ret;\n    }\n    return $canUseCDN[$videos_id];\n}\n\nfunction clearVideosURL($fileName = \"\") {\n    global $global;\n    $path = getCacheDir() . \"getVideosURL/\";\n    if (empty($path)) {\n        rrmdir($path);\n    } else {\n        $cacheFilename = \"{$path}{$fileName}.cache\";\n        @unlink($cacheFilename);\n    }\n}\n\nfunction maxLifetime() {\n    global $maxLifetime;\n    if (!isset($maxLifetime)) {\n        $aws_s3 = AVideoPlugin::getObjectDataIfEnabled('AWS_S3');\n        $bb_b2 = AVideoPlugin::getObjectDataIfEnabled('Blackblaze_B2');\n        $secure = AVideoPlugin::getObjectDataIfEnabled('SecureVideosDirectory');\n        $maxLifetime = 0;\n        if (!empty($aws_s3) && empty($aws_s3->makeMyFilesPublicRead) && !empty($aws_s3->presignedRequestSecondsTimeout) && (empty($maxLifetime) || $aws_s3->presignedRequestSecondsTimeout < $maxLifetime)) {\n            $maxLifetime = $aws_s3->presignedRequestSecondsTimeout;\n            //_error_log(\"maxLifetime: AWS_S3 = {$maxLifetime}\");\n        }\n        if (!empty($bb_b2) && empty($bb_b2->usePublicBucket) && !empty($bb_b2->presignedRequestSecondsTimeout) && (empty($maxLifetime) || $bb_b2->presignedRequestSecondsTimeout < $maxLifetime)) {\n            $maxLifetime = $bb_b2->presignedRequestSecondsTimeout;\n            //_error_log(\"maxLifetime: B2 = {$maxLifetime}\");\n        }\n        if (!empty($secure) && !empty($secure->tokenTimeOut) && (empty($maxLifetime) || $secure->tokenTimeOut < $maxLifetime)) {\n            $maxLifetime = $secure->tokenTimeOut;\n            //_error_log(\"maxLifetime: Secure = {$maxLifetime}\");\n        }\n    }\n    return $maxLifetime;\n}\n\n$cacheExpirationTime = false;\n\nfunction cacheExpirationTime() {\n    if (isBot()) {\n        return 604800; // 1 week\n    }\n    global $cacheExpirationTime;\n    if (empty($cacheExpirationTime)) {\n        $obj = AVideoPlugin::getObjectDataIfEnabled('Cache');\n        $cacheExpirationTime = @$obj->cacheTimeInSeconds;\n    }\n    return intval($cacheExpirationTime);\n}\n\n/**\n * Tell whether a file should recreate a cache, based on its time and the plugin's token expiration.\n * @param type $filename\n * @return boolean\n */\nfunction recreateCache($filename) {\n    return (!file_exists($filename) || time() - filemtime($filename) > minimumExpirationTime());\n}\n\nfunction _getImagesURL($fileName, $type) {\n    global $global;\n    $files = [];\n    $source = Video::getSourceFile($fileName, \".jpg\");\n    $file1 = $source['path'];\n    if (file_exists($file1)) {\n        $files[\"jpg\"] = [\n            'filename' => \"{$fileName}.jpg\",\n            'path' => $file1,\n            'url' => $source['url'],\n            'type' => 'image',\n        ];\n    } else {\n        unset($file1);\n        $files[\"jpg\"] = [\n            'filename' => \"{$type}.png\",\n            'path' => getCDN() . \"view/img/{$type}.png\",\n            'url' => getCDN() . \"view/img/{$type}.png\",\n            'type' => 'image',\n        ];\n    }\n    $source = Video::getSourceFile($fileName, \"_portrait.jpg\");\n    $file2 = $source['path'];\n    if (file_exists($file2)) {\n        $files[\"pjpg\"] = [\n            'filename' => \"{$fileName}_portrait.jpg\",\n            'path' => $file2,\n            'url' => $source['url'],\n            'type' => 'image',\n        ];\n    } elseif ($type !== 'image') {\n        if (!empty($file1)) {\n            $files[\"pjpg\"] = $files[\"jpg\"];\n        } else {\n            $files[\"pjpg\"] = [\n                'filename' => \"{$type}_portrait.png\",\n                'path' => getCDN() . \"view/img/{$type}_portrait.png\",\n                'url' => getCDN() . \"view/img/{$type}_portrait.png\",\n                'type' => 'image',\n            ];\n        }\n    }\n    return $files;\n}\n\nfunction getVideosURLPDF($fileName) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n\n    $source = Video::getSourceFile($fileName, \".pdf\");\n    $file = $source['path'];\n    $files[\"pdf\"] = [\n        'filename' => \"{$fileName}.pdf\",\n        'path' => $file,\n        'url' => $source['url'],\n        'type' => 'pdf',\n    ];\n    $files = array_merge($files, _getImagesURL($fileName, 'pdf'));\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLPDF generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURLIMAGE($fileName) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n\n    $types = ['png', 'gif', 'webp', 'jpg'];\n\n    foreach ($types as $value) {\n        $source = Video::getSourceFile($fileName, \".{$value}\");\n        $file = $source['path'];\n        $files[\"image\"] = [\n            'filename' => \"{$fileName}.{$value}\",\n            'path' => $file,\n            'url' => $source['url'],\n            'type' => 'image',\n        ];\n        if (file_exists($file)) {\n            break;\n        }\n    }\n\n    $files = array_merge($files, _getImagesURL($fileName, 'image'));\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLPDF generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURLZIP($fileName) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n\n    $types = ['zip'];\n\n    foreach ($types as $value) {\n        $source = Video::getSourceFile($fileName, \".{$value}\");\n        $file = $source['path'];\n        $files[\"zip\"] = [\n            'filename' => \"{$fileName}.zip\",\n            'path' => $file,\n            'url' => $source['url'],\n            'type' => 'zip',\n        ];\n        if (file_exists($file)) {\n            break;\n        }\n    }\n\n    $files = array_merge($files, _getImagesURL($fileName, 'zip'));\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLPDF generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURLArticle($fileName) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n    //$files = array_merge($files, _getImagesURL($fileName, 'article'));\n    $files = _getImagesURL($fileName, 'article');\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLPDF generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURLAudio($fileName, $fileNameisThePath = false) {\n    global $global;\n    if (empty($fileName)) {\n        return [];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $start = $time;\n    if ($fileNameisThePath) {\n        $filename = basename($fileName);\n        $path = Video::getPathToFile($filename);\n        if (filesize($path) < 20) {\n            $objCDNS = AVideoPlugin::getObjectDataIfEnabled('CDN');\n            if (!empty($objCDNS) && $objCDNS->enable_storage) {\n                $url = CDNStorage::getURL(\"{$filename}\");\n            }\n        }\n        if (empty($url)) {\n            $url = Video::getURLToFile($filename);\n        }\n\n        $files[\"mp3\"] = [\n            'filename' => $filename,\n            'path' => $path,\n            'url' => $url,\n            'url_noCDN' => $url,\n            'type' => 'audio',\n            'format' => 'mp3',\n        ];\n    } else {\n        $source = Video::getSourceFile($fileName, \".mp3\");\n        $file = $source['path'];\n        $files[\"mp3\"] = [\n            'filename' => \"{$fileName}.mp3\",\n            'path' => $file,\n            'url' => $source['url'],\n            'url_noCDN' => @$source['url_noCDN'],\n            'type' => 'audio',\n            'format' => 'mp3',\n        ];\n    }\n\n    $files = array_merge($files, _getImagesURL($fileName, 'audio_wave'));\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $start), 4);\n    //_error_log(\"getVideosURLAudio generated in {$total_time} seconds. fileName: $fileName \");\n    return $files;\n}\n\nfunction getVideosURL($fileName, $cache = true) {\n    return getVideosURL_V2($fileName); // disable this function soon\n}\n\nfunction getVideosURLMP4Only($fileName) {\n    $allFiles = getVideosURL_V2($fileName);\n    if (is_array($allFiles)) {\n        foreach ($allFiles as $key => $value) {\n            if ($value['format'] !== 'mp4') {\n                unset($allFiles[$key]);\n            }\n        }\n        return $allFiles;\n    }\n    _error_log(\"getVideosURLMP4Only does not return an ARRAY from getVideosURL_V2($fileName) \" . json_encode($allFiles));\n    return [];\n}\n\nfunction getVideosURLMP3Only($fileName) {\n    $allFiles = getVideosURL_V2($fileName);\n    if (is_array($allFiles)) {\n        foreach ($allFiles as $key => $value) {\n            if ($value['format'] !== 'mp3') {\n                unset($allFiles[$key]);\n            }\n        }\n        return $allFiles;\n    }\n    _error_log(\"getVideosURLMP4Only does not return an ARRAY from getVideosURL_V2($fileName) \" . json_encode($allFiles));\n    return [];\n}\n\nfunction getVideosURLWEBMOnly($fileName) {\n    $allFiles = getVideosURL_V2($fileName); // disable this function soon\n    if (is_array($allFiles)) {\n        foreach ($allFiles as $key => $value) {\n            if ($value['format'] !== 'webm') {\n                unset($allFiles[$key]);\n            }\n        }\n        return $allFiles;\n    }\n    _error_log(\"getVideosURLMP4Only does not return an ARRAY from getVideosURL_V2($fileName) \" . json_encode($allFiles));\n    return [];\n}\n\nfunction getVideosURLMP4WEBMOnly($fileName) {\n    return array_merge(getVideosURLMP4Only($fileName), getVideosURLWEBMOnly($fileName));\n}\n\nfunction getVideosURLMP4WEBMMP3Only($fileName) {\n    return array_merge(getVideosURLMP4Only($fileName), getVideosURLWEBMOnly($fileName), getVideosURLMP3Only($fileName));\n}\n\nfunction getVideosURLOnly($fileName) {\n    $allFiles = getVideosURL_V2($fileName); // disable this function soon\n    foreach ($allFiles as $key => $value) {\n        if ($value['type'] !== 'video') {\n            unset($allFiles[$key]);\n        }\n    }\n    return $allFiles;\n}\n\nfunction getAudioURLOnly($fileName) {\n    $allFiles = getVideosURL_V2($fileName); // disable this function soon\n    foreach ($allFiles as $key => $value) {\n        if ($value['type'] !== 'audio') {\n            unset($allFiles[$key]);\n        }\n    }\n    return $allFiles;\n}\n\nfunction getAudioOrVideoURLOnly($fileName) {\n    $allFiles = getVideosURL_V2($fileName); // disable this function soon\n    foreach ($allFiles as $key => $value) {\n        if ($value['type'] !== 'video' && $value['type'] !== 'audio') {\n            unset($allFiles[$key]);\n        }\n    }\n    return $allFiles;\n}\n\nfunction getVideosDir() {\n    return Video::getStoragePath();\n}\n\n$getVideosURL_V2Array = [];\n\nfunction getVideosURL_V2($fileName, $recreateCache = false) {\n    global $global, $getVideosURL_V2Array;\n    if (empty($fileName)) {\n        return [];\n    }\n    //$recreateCache = true;\n    $cleanfilename = Video::getCleanFilenameFromFile($fileName);\n\n    if (!empty($getVideosURL_V2Array[$cleanfilename])) {\n        return $getVideosURL_V2Array[$cleanfilename];\n    }\n\n    $paths = Video::getPaths($cleanfilename);\n\n    $pdf = $paths['path'] . \"{$cleanfilename}.pdf\";\n    $mp3 = $paths['path'] . \"{$cleanfilename}.mp3\";\n    if (file_exists($pdf)) {\n        return getVideosURLPDF($fileName);\n    } elseif (file_exists($mp3)) {\n        return getVideosURLAudio($mp3, true);\n    }\n    $cacheName = \"getVideosURL_V2$fileName\";\n    if (empty($recreateCache)) {\n        $lifetime = maxLifetime();\n\n        $TimeLog1 = \"getVideosURL_V2($fileName) empty recreateCache\";\n        TimeLogStart($TimeLog1);\n        $files = object_to_array(ObjectYPT::getCache($cacheName, $lifetime, true));\n        if (is_array($files)) {\n            //_error_log(\"getVideosURL_V2: do NOT recreate lifetime = {$lifetime}\");\n            $preg_match_url = addcslashes(getCDN(), \"/\") . \"videos\";\n            foreach ($files as $value) {\n                // check if is a dummy file and the URL still wrong\n                $pathFilesize = filesize($value['path']);\n                if (\n                        $value['type'] === 'video' && // is a video\n                        preg_match(\"/^{$preg_match_url}/\", $value['url']) && // the URL is the same as the main domain\n                        $pathFilesize < 20) { // file size is small\n                    _error_log(\"getVideosURL_V2:: dummy file found, fix cache \" . json_encode([\"/^{$preg_match_url}/\", $value['url'], preg_match(\"/^{$preg_match_url}video/\", $value['url']), $pathFilesize, $value]));\n                    unset($files);\n                    $video = Video::getVideoFromFileName($fileName, true, true);\n                    Video::clearCache($video['id']);\n                    break;\n                } else {\n                    //_error_log(\"getVideosURL_V2:: NOT dummy file \". json_encode(array(\"/^{$preg_match_url}video/\", $value['url'], preg_match(\"/^{$preg_match_url}video/\", $value['url']),filesize($value['path']),$value)));\n                }\n            }\n            //_error_log(\"getVideosURL_V2:: cachestill good \". json_encode($files));\n        } else {\n            //_error_log(\"getVideosURL_V2:: cache not found \". json_encode($files));\n        }\n        TimeLogEnd($TimeLog1, __LINE__);\n    } else {\n        _error_log(\"getVideosURL_V2($fileName) Recreate cache requested \" . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n    }\n    if (empty($files)) {\n        $files = [];\n        $plugin = AVideoPlugin::loadPlugin(\"VideoHLS\");\n        if (!empty($plugin)) {\n            $timeName = \"getVideosURL_V2::VideoHLS::getSourceFile($fileName)\";\n            TimeLogStart($timeName);\n            $files = VideoHLS::getSourceFile($fileName, true);\n            TimeLogEnd($timeName, __LINE__);\n        }\n        $video = ['webm', 'mp4'];\n        $audio = ['mp3', 'ogg'];\n        $image = ['jpg', 'gif', 'webp'];\n\n        $formats = array_merge($video, $audio, $image);\n\n        //$globQuery = getVideosDir().\"{$cleanfilename}*.{\" . implode(\",\", $formats) . \"}\";\n        //$filesInDir = glob($globQuery, GLOB_BRACE);\n        $timeName = \"getVideosURL_V2::globVideosDir($cleanfilename)\";\n        TimeLogStart($timeName);\n        $filesInDir = globVideosDir($cleanfilename, true);\n        TimeLogEnd($timeName, __LINE__);\n\n        $timeName = \"getVideosURL_V2::foreach\";\n        TimeLogStart($timeName);\n        foreach ($filesInDir as $file) {\n            $parts = pathinfo($file);\n\n            if ($parts['filename'] == 'index') {\n                $parts['filename'] = str_replace(Video::getPathToFile($parts['dirname']), '', $parts['dirname']);\n            }\n\n            //$timeName2 = \"getVideosURL_V2::Video::getSourceFile({$parts['filename']}, .{$parts['extension']})\";\n            //TimeLogStart($timeName2);\n            $source = Video::getSourceFile($parts['filename'], \".{$parts['extension']}\");\n            //TimeLogEnd($timeName2, __LINE__);\n            if (empty($source)) {\n                continue;\n            }\n            if (in_array($parts['extension'], $image) && filesize($file) < 1000 && !preg_match(\"/Dummy File/i\", file_get_contents($file))) {\n                continue;\n            }\n\n            if (preg_match(\"/{$cleanfilename}(_.+)[.]{$parts['extension']}$/\", $file, $matches)) {\n                $resolution = $matches[1];\n            } else {\n                preg_match('/_([^_]{0,4}).' . $parts['extension'] . '$/', $file, $matches);\n                $resolution = @$matches[1];\n            }\n            $type = 'video';\n            if (in_array($parts['extension'], $video)) {\n                $type = 'video';\n            } elseif (in_array($parts['extension'], $audio)) {\n                $type = 'audio';\n            } elseif (in_array($parts['extension'], $image) || preg_match('/^(gif|jpg|webp|png|jpeg)/i', $parts['extension'])) {\n                $type = 'image';\n                if (!preg_match('/(thumb|roku)/', $resolution)) {\n                    $resolution = '';\n                }\n            }\n            $files[\"{$parts['extension']}{$resolution}\"] = [\n                'filename' => \"{$parts['filename']}.{$parts['extension']}\",\n                'path' => $file,\n                'url' => $source['url'],\n                'url_noCDN' => @$source['url_noCDN'],\n                'type' => $type,\n                'format' => strtolower($parts['extension']),\n            ];\n        }\n\n        TimeLogEnd($timeName, __LINE__);\n        ObjectYPT::setCache($cacheName, $files);\n    }\n    if (is_array($files)) {\n        // sort by resolution\n        uasort($files, \"sortVideosURL\");\n    }\n    //var_dump($files);exit;\n    $getVideosURL_V2Array[$cleanfilename] = $files;\n    return $getVideosURL_V2Array[$cleanfilename];\n}\n\n//Returns < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.\nfunction sortVideosURL($a, $b) {\n    if ($a['type'] == 'video') {\n        $aRes = getResolutionFromFilename($a['filename']);\n        $bRes = getResolutionFromFilename($b['filename']);\n        return $aRes - $bRes;\n    }\n\n    return 0;\n}\n\nfunction getResolutionFromFilename($filename) {\n    global $getResolutionFromFilenameArray;\n\n    if (!isset($getResolutionFromFilenameArray)) {\n        $getResolutionFromFilenameArray = [];\n    }\n\n    if (!empty($getResolutionFromFilenameArray[$filename])) {\n        return $getResolutionFromFilenameArray[$filename];\n    }\n\n    if (!preg_match('/^http/i', $filename) && !file_exists($filename)) {\n        return 0;\n    }\n    $res = Video::getResolutionFromFilename($filename);\n    if (empty($res)) {\n        if (preg_match('/[_\\/]hd[.\\/]/i', $filename)) {\n            $res = 720;\n        } elseif (preg_match('/[_\\/]sd[.\\/]/i', $filename)) {\n            $res = 480;\n        } elseif (preg_match('/[_\\/]low[.\\/]/i', $filename)) {\n            $res = 240;\n        } else {\n            $res = 0;\n        }\n    }\n    $getResolutionFromFilenameArray[$filename] = $res;\n    return $res;\n}\n\nfunction getSources($fileName, $returnArray = false, $try = 0) {\n    if ($returnArray) {\n        $videoSources = $audioTracks = $subtitleTracks = [];\n    } else {\n        $videoSources = $audioTracks = $subtitleTracks = '';\n    }\n\n    $video = Video::getVideoFromFileNameLight($fileName);\n\n    if ($video['type'] !== 'audio' && function_exists('getVRSSources')) {\n        $videoSources = getVRSSources($fileName, $returnArray);\n    } else {\n        //$files = getVideosURL($fileName);\n        $files = getVideosURL_V2($fileName, !empty($try));\n        $sources = '';\n        $sourcesArray = [];\n        foreach ($files as $key => $value) {\n            $path_parts = pathinfo($value['path']);\n            if ($path_parts['extension'] == \"webm\" || $path_parts['extension'] == \"mp4\" || $path_parts['extension'] == \"m3u8\" || $path_parts['extension'] == \"mp3\" || $path_parts['extension'] == \"ogg\") {\n                $obj = new stdClass();\n                $obj->type = mime_content_type_per_filename($value['path']);\n                $sources .= \"<source src=\\\"{$value['url']}\\\" type=\\\"{$obj->type}\\\">\";\n                $obj->src = $value['url'];\n                $sourcesArray[] = $obj;\n            }\n        }\n        $videoSources = $returnArray ? $sourcesArray : $sources;\n    }\n    if (function_exists('getVTTTracks')) {\n        $subtitleTracks = getVTTTracks($fileName, $returnArray);\n    }\n\n    if ($returnArray) {\n        $return = array_merge($videoSources, $audioTracks, $subtitleTracks);\n    } else {\n        $return = $videoSources . $audioTracks . $subtitleTracks;\n    }\n\n    $obj = new stdClass();\n    $obj->result = $return;\n    if (empty($videoSources) && empty($audioTracks) && !empty($video['id']) && $video['type'] == 'video') {\n        if (empty($try)) {\n            //sleep(1);\n            $sources = getSources($fileName, $returnArray, $try + 1);\n            if (!empty($sources)) {\n                Video::updateFilesize($video['id']);\n            }\n            Video::clearCache($video['id']);\n            return $sources;\n        } else {\n            _error_log(\"getSources($fileName) File not found \" . json_encode($video));\n\n            $obj = new stdClass();\n            $obj->type = \"video/mp4\";\n            $obj->src = \"Video not found\";\n            $obj->label = \"Video not found\";\n            $obj->res = 0;\n            $sourcesArray[\"mp4\"] = $obj;\n            $sources[\"mp4\"] = \"<source src=\\\"\\\" type=\\\"{$obj->type}\\\" label=\\\"{$obj->label}\\\" res=\\\"{$obj->res}\\\">\";\n            $return = $returnArray ? $sourcesArray : implode(PHP_EOL, $sources);\n        }\n    }\n    return $return;\n}\n\n/**\n *\n * @param type $file_src\n * @return typeget image size with cache\n */\nfunction getimgsize($file_src) {\n    global $_getimagesize;\n    if (empty($file_src) || !file_exists($file_src)) {\n        return [0, 0];\n    }\n    if (empty($_getimagesize)) {\n        $_getimagesize = [];\n    }\n\n    $name = \"getimgsize_\" . md5($file_src);\n\n    if (!empty($_getimagesize[$name])) {\n        $size = $_getimagesize[$name];\n    } else {\n        $cached = ObjectYPT::getCache($name, 86400); //one day\n        if (!empty($cached)) {\n            $c = (array) $cached;\n            $size = [];\n            foreach ($c as $key => $value) {\n                if (preg_match(\"/^[0-9]+$/\", $key)) {\n                    $key = intval($key);\n                }\n                $size[$key] = $value;\n            }\n            $_getimagesize[$name] = $size;\n            return $size;\n        }\n\n        $size = @getimagesize($file_src);\n\n        if (empty($size)) {\n            $size = [1024, 768];\n        }\n\n        ObjectYPT::setCache($name, $size);\n        $_getimagesize[$name] = $size;\n    }\n    return $size;\n}\n\nfunction im_resize($file_src, $file_dest, $wd, $hd, $q = 80) {\n    if (empty($file_dest)) {\n        return false;\n    }\n    if (!file_exists($file_src)) {\n        _error_log(\"im_resize: Source not found: {$file_src}\");\n        return false;\n    }\n    $size = getimgsize($file_src);\n    if ($size === false) {\n        _error_log(\"im_resize: Could not get image size: {$file_src}\");\n        return false;\n    }\n\n    if (empty($size['mime']) || $size['mime'] == 'image/pjpeg') {\n        $size['mime'] = 'image/jpeg';\n    }\n\n    $format = strtolower(substr($size['mime'], strpos($size['mime'], '/') + 1));\n    if (empty($format)) {\n        $format = 'jpeg';\n    }\n    $destformat = strtolower(substr($file_dest, -4));\n    if (empty($destformat)) {\n        _error_log(\"destformat not found {$file_dest}\");\n        $destformat = \".jpg\";\n    }\n    $icfunc = \"imagecreatefrom\" . $format;\n    if (!function_exists($icfunc)) {\n        _error_log(\"im_resize: Function does not exists: {$icfunc}\");\n        return false;\n    }\n\n    $imgSize = getimagesize($file_src);\n    if (empty($imgSize)) {\n        _error_log(\"im_resize: getimagesize($file_src) return false \" . json_encode($imgSize));\n        return false;\n    }\n    try {\n        $src = $icfunc($file_src);\n    } catch (Exception $exc) {\n        _error_log(\"im_resize: ($file_src) \" . $exc->getMessage());\n        _error_log(\"im_resize: Try {$icfunc} from string\");\n        $src = imagecreatefromstring(file_get_contents($file_src));\n        if (!$src) {\n            _error_log(\"im_resize: fail {$icfunc} from string\");\n            return false;\n        }\n    }\n    $ws = imagesx($src);\n    $hs = imagesy($src);\n\n    if ($ws <= $hs) {\n        $hd = ceil(($wd * $hs) / $ws);\n    } else {\n        $wd = ceil(($hd * $ws) / $hs);\n    }\n    if ($ws <= $wd) {\n        $wd = $ws;\n        $hd = $hs;\n    }\n    $wc = ($wd * $hs) / $hd;\n\n    if ($wc <= $ws) {\n        $hc = ($wc * $hd) / $wd;\n    } else {\n        $hc = ($ws * $hd) / $wd;\n        $wc = ($wd * $hc) / $hd;\n    }\n\n    $dest = imagecreatetruecolor($wd, $hd);\n    switch ($format) {\n        case \"png\":\n            imagealphablending($dest, false);\n            imagesavealpha($dest, true);\n            $transparent = imagecolorallocatealpha($dest, 255, 255, 255, 127);\n            imagefilledrectangle($dest, 0, 0, $wd, $hd, $transparent);\n\n            break;\n        case \"gif\":\n// integer representation of the color black (rgb: 0,0,0)\n            $background = imagecolorallocate($src, 0, 0, 0);\n// removing the black from the placeholder\n            imagecolortransparent($src, $background);\n\n            break;\n    }\n\n    imagecopyresampled($dest, $src, 0, 0, ($ws - $wc) / 2, ($hs - $hc) / 2, $wd, $hd, $wc, $hc);\n    $saved = false;\n    if ($destformat == '.png') {\n        $saved = imagepng($dest, $file_dest);\n    }\n\n    if ($destformat == '.jpg') {\n        $saved = imagejpeg($dest, $file_dest, $q);\n    }\n\n    if (!$saved) {\n        _error_log('saving failed');\n    }\n\n    imagedestroy($dest);\n    imagedestroy($src);\n    @chmod($file_dest, 0666);\n\n    return true;\n}\n\nfunction im_resizeV2($file_src, $file_dest, $wd, $hd, $q = 80) {\n    _error_log(\"im_resizeV2: $file_src, $file_dest, $wd, $hd, $q\");\n    $newImage = im_resize($file_src, $file_dest, $wd, $hd, 100);\n    if (!$newImage) {\n        return false;\n    }\n    $src = imagecreatefromjpeg($file_dest);\n    if (empty($src)) {\n        return false;\n    }\n    $ws = imagesx($src);\n    $hs = imagesy($src);\n\n    if ($ws < $wd) {\n        $dst_x = ($wd - $ws) / 2;\n    } else {\n        $dst_x = 0;\n    }\n\n    if ($hs < $hd) {\n        $dst_y = ($hd - $hs) / 2;\n    } else {\n        $dst_y = 0;\n    }\n\n    $mapImage = imagecreatetruecolor($wd, $hd);\n    $bgColor = imagecolorallocate($mapImage, 0, 0, 0);\n    imagefill($mapImage, 0, 0, $bgColor);\n\n    $tileImg = imagecreatefromjpeg($file_dest);\n    imagecopy($mapImage, $tileImg, $dst_x, $dst_y, 0, 0, $ws, $hs);\n\n    $saved = imagejpeg($mapImage, $file_dest, $q);\n\n    return $saved;\n}\n\nfunction im_resizePNG($file_src, $file_dest, $wd, $hd) {\n    $srcImage = imagecreatefrompng($file_src);\n    $ws = imagesx($srcImage);\n    $hs = imagesy($srcImage);\n\n    $targetImage = imagecreatetruecolor($wd, $hd);\n    imagealphablending($targetImage, false);\n    imagesavealpha($targetImage, true);\n\n    imagecopyresampled(\n            $targetImage,\n            $srcImage,\n            0,\n            0,\n            0,\n            0,\n            $wd,\n            $hd,\n            $ws,\n            $hs\n    );\n\n    $saved = imagepng($targetImage, $file_dest);\n\n    return $saved;\n}\n\nfunction im_resizeV3($file_src, $file_dest, $wd, $hd) {\n    return im_resizeV2($file_src, $file_dest, $wd, $hd); // ffmpeg disabled\n\n    _error_log(\"im_resizeV3: $file_src, $file_dest, $wd, $hd\");\n    // This tries to preserve the aspect ratio of the thumb while letterboxing it in\n    // The same way that the encoder now does.\n    eval('$ffmpeg =\"ffmpeg -i {$file_src} -filter_complex \\\"scale=(iw*sar)*min({$wd}/(iw*sar)\\,{$hd}/ih):ih*min({$wd}/(iw*sar)\\,{$hd}/ih), pad={$wd}:{$hd}:({$wd}-iw*min({$wd}/iw\\,{$hd}/ih))/2:({$hd}-ih*min({$wd}/iw\\,{$hd}/ih))/2\\\" -sws_flags lanczos -qscale:v 2 {$file_dest}\";');\n    exec($ffmpeg . \" < /dev/null 2>&1\", $output, $return_val);\n}\n\nfunction im_resize_gif($file_src, $file_dest, $max_width, $max_height) {\n    if (class_exists('Imagick')) {\n        $imagick = new Imagick($file_src);\n\n        $format = $imagick->getImageFormat();\n        if ($format == 'GIF') {\n            $imagick = $imagick->coalesceImages();\n            do {\n                $imagick->resizeImage($max_width, $max_height, Imagick::FILTER_BOX, 1);\n            } while ($imagick->nextImage());\n            $imagick = $imagick->deconstructImages();\n            $imagick->writeImages($file_dest, true);\n        }\n\n        $imagick->clear();\n        $imagick->destroy();\n    } else {\n        copy($file_src, $file_dest);\n    }\n}\n\nfunction im_resize_max_size($file_src, $file_dest, $max_width, $max_height) {\n    $fn = $file_src;\n\n    $extension = strtolower(pathinfo($file_dest, PATHINFO_EXTENSION));\n\n    if ($extension == 'gif') {\n        im_resize_gif($file_src, $file_dest, $max_width, $max_height);\n        @unlink($file_src);\n        return true;\n    }\n\n    $tmpFile = getTmpFile() . \".{$extension}\";\n    if (empty($fn)) {\n        _error_log(\"im_resize_max_size: file name is empty, Destination: {$file_dest}\", AVideoLog::$ERROR);\n        return false;\n    }\n    if (function_exists(\"exif_read_data\")) {\n        error_log($fn);\n        convertImage($fn, $tmpFile, 100);\n        $exif = exif_read_data($tmpFile);\n        if ($exif && isset($exif['Orientation'])) {\n            $orientation = $exif['Orientation'];\n            if ($orientation != 1) {\n                $img = imagecreatefromjpeg($tmpFile);\n                $deg = 0;\n                switch ($orientation) {\n                    case 3:\n                        $deg = 180;\n                        break;\n                    case 6:\n                        $deg = 270;\n                        break;\n                    case 8:\n                        $deg = 90;\n                        break;\n                }\n                if ($deg) {\n                    $img = imagerotate($img, $deg, 0);\n                }\n                imagejpeg($img, $fn, 100);\n            }\n        }\n    } else {\n        _error_log(\"Make sure you install the php_mbstring and php_exif to be able to rotate images\");\n    }\n\n    $size = getimagesize($fn);\n    $ratio = $size[0] / $size[1]; // width/height\n    if ($size[0] <= $max_width && $size[1] <= $max_height) {\n        $width = $size[0];\n        $height = $size[1];\n    } elseif ($ratio > 1) {\n        $width = $max_width;\n        $height = $max_height / $ratio;\n    } else {\n        $width = $max_width * $ratio;\n        $height = $max_height;\n    }\n\n    $src = imagecreatefromstring(file_get_contents($fn));\n    $dst = imagecreatetruecolor($width, $height);\n    imagecopyresampled($dst, $src, 0, 0, 0, 0, $width, $height, $size[0], $size[1]);\n    imagedestroy($src);\n    imagejpeg($dst, $file_dest); // adjust format as needed\n    imagedestroy($dst);\n    @unlink($file_src);\n    @unlink($tmpFile);\n}\n\nfunction convertImage($originalImage, $outputImage, $quality) {\n    $imagetype = 0;\n    if (function_exists('exif_imagetype')) {\n        $imagetype = exif_imagetype($originalImage);\n    }\n\n    $ext = strtolower(pathinfo($originalImage, PATHINFO_EXTENSION));\n    $extOutput = strtolower(pathinfo($outputImage, PATHINFO_EXTENSION));\n\n    if ($ext == $extOutput) {\n        return copy($originalImage, $outputImage);\n    }\n\n    try {\n        if ($imagetype == IMAGETYPE_JPEG || preg_match('/jpg|jpeg/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_JPEG\");\n            $imageTmp = imagecreatefromjpeg($originalImage);\n        } elseif ($imagetype == IMAGETYPE_PNG || preg_match('/png/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_PNG\");\n            $imageTmp = imagecreatefrompng($originalImage);\n        } elseif ($imagetype == IMAGETYPE_GIF || preg_match('/gif/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_GIF\");\n            $imageTmp = imagecreatefromgif($originalImage);\n        } elseif ($imagetype == IMAGETYPE_BMP || preg_match('/bmp/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_BMP\");\n            $imageTmp = imagecreatefrombmp($originalImage);\n        } elseif ($imagetype == IMAGETYPE_WEBP || preg_match('/webp/i', $ext)) {\n            //_error_log(\"convertImage: IMAGETYPE_WEBP\");\n            $imageTmp = imagecreatefromwebp($originalImage);\n        } else {\n            _error_log(\"convertImage: File Extension not found ($originalImage, $outputImage, $quality) \" . exif_imagetype($originalImage));\n            return 0;\n        }\n    } catch (Exception $exc) {\n        _error_log(\"convertImage: \" . $exc->getMessage());\n        return 0;\n    }\n    if ($imageTmp === false) {\n        _error_log(\"convertImage: could not create a resource: $originalImage, $outputImage, $quality, $ext \" . json_encode(debug_backtrace()));\n        return 0;\n    }\n    // quality is a value from 0 (worst) to 100 (best)\n    $response = 0;\n    if ($extOutput === 'jpg') {\n        if (function_exists('imagejpeg')) {\n            $response = imagejpeg($imageTmp, $outputImage, $quality);\n        } else {\n            _error_log(\"convertImage ERROR: function imagejpeg does not exists\");\n        }\n    } elseif ($extOutput === 'png') {\n        if (function_exists('imagepng')) {\n            $response = imagepng($imageTmp, $outputImage, $quality / 10);\n        } else {\n            _error_log(\"convertImage ERROR: function imagepng does not exists\");\n        }\n    } elseif ($extOutput === 'webp') {\n        if (function_exists('imagewebp')) {\n            $response = imagewebp($imageTmp, $outputImage, $quality);\n        } else {\n            _error_log(\"convertImage ERROR: function imagewebp does not exists\");\n        }\n    } elseif ($extOutput === 'gif') {\n        if (function_exists('imagegif')) {\n            $response = imagegif($imageTmp, $outputImage);\n        } else {\n            _error_log(\"convertImage ERROR: function imagegif does not exists\");\n        }\n    }\n\n    imagedestroy($imageTmp);\n\n    return $response;\n}\n\nfunction decideMoveUploadedToVideos($tmp_name, $filename, $type = \"video\") {\n    if ($filename == '.zip') {\n        return false;\n    }\n    global $global;\n    $obj = new stdClass();\n    $aws_s3 = AVideoPlugin::loadPluginIfEnabled('AWS_S3');\n    $bb_b2 = AVideoPlugin::loadPluginIfEnabled('Blackblaze_B2');\n    $ftp = AVideoPlugin::loadPluginIfEnabled('FTP_Storage');\n    $paths = Video::getPaths($filename, true);\n    $destinationFile = \"{$paths['path']}{$filename}\";\n    //$destinationFile = getVideosDir() . \"{$filename}\";\n    _error_log(\"decideMoveUploadedToVideos: {$filename}\");\n    $path_info = pathinfo($filename);\n    if ($type !== \"zip\" && $path_info['extension'] === 'zip') {\n        _error_log(\"decideMoveUploadedToVideos: ZIp file {$filename}\");\n        $paths = Video::getPaths($path_info['filename']);\n        $dir = $paths['path'];\n        unzipDirectory($tmp_name, $dir); // unzip it\n        cleanDirectory($dir);\n        if (!empty($aws_s3)) {\n            //$aws_s3->move_uploaded_file($tmp_name, $filename);\n        } elseif (!empty($bb_b2)) {\n            $bb_b2->move_uploaded_directory($dir);\n        } elseif (!empty($ftp)) {\n            //$ftp->move_uploaded_file($tmp_name, $filename);\n        }\n    } else {\n        _error_log(\"decideMoveUploadedToVideos: NOT ZIp file {$filename}\");\n        if (!empty($aws_s3)) {\n            _error_log(\"decideMoveUploadedToVideos: S3 {$filename}\");\n            $aws_s3->move_uploaded_file($tmp_name, $filename);\n        } elseif (!empty($bb_b2)) {\n            _error_log(\"decideMoveUploadedToVideos: B2 {$filename}\");\n            $bb_b2->move_uploaded_file($tmp_name, $filename);\n        } elseif (!empty($ftp)) {\n            _error_log(\"decideMoveUploadedToVideos: FTP {$filename}\");\n            $ftp->move_uploaded_file($tmp_name, $filename);\n        } else {\n            _error_log(\"decideMoveUploadedToVideos: Local {$filename}\");\n            if (!move_uploaded_file($tmp_name, $destinationFile)) {\n                if (!rename($tmp_name, $destinationFile)) {\n                    if (!copy($tmp_name, $destinationFile)) {\n                        $obj->msg = \"Error on decideMoveUploadedToVideos({$tmp_name}, $destinationFile)\";\n                        die(json_encode($obj));\n                    }\n                }\n            }\n            if (file_exists($destinationFile)) {\n                _error_log(\"decideMoveUploadedToVideos: SUCCESS Local {$destinationFile}\");\n            } else {\n                _error_log(\"decideMoveUploadedToVideos: ERROR Local {$destinationFile}\");\n            }\n            chmod($destinationFile, 0644);\n        }\n    }\n    sleep(1);\n    $fsize = @filesize($destinationFile);\n    _error_log(\"decideMoveUploadedToVideos: destinationFile {$destinationFile} filesize=\" . ($fsize) . \" (\" . humanFileSize($fsize) . \")\");\n    Video::clearCacheFromFilename($filename);\n    return $destinationFile;\n}\n\nfunction unzipDirectory($filename, $destination) {\n    global $global;\n    // Wait a couple of seconds to make sure the file has completed transfer\n    sleep(2);\n    ini_set('memory_limit', '-1');\n    ini_set('max_execution_time', 7200); // 2 hours\n    $cmd = \"unzip {$filename} -d {$destination}\" . \"  2>&1\";\n    _error_log(\"unzipDirectory: {$cmd}\");\n    exec($cmd, $output, $return_val);\n    if ($return_val !== 0 && function_exists(\"zip_open\")) {\n        // try to unzip using PHP\n        _error_log(\"unzipDirectory: TRY to use PHP {$filename}\");\n        $zip = zip_open($filename);\n        if ($zip) {\n            while ($zip_entry = zip_read($zip)) {\n                $path = \"{$destination}/\" . zip_entry_name($zip_entry);\n                //_error_log(\"unzipDirectory: fopen $path\");\n                if (substr(zip_entry_name($zip_entry), -1) == '/') {\n                    make_path($path);\n                } else {\n                    make_path($path);\n                    $fp = fopen($path, \"w\");\n                    if (zip_entry_open($zip, $zip_entry, \"r\")) {\n                        $buf = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));\n                        fwrite($fp, \"$buf\");\n                        zip_entry_close($zip_entry);\n                        fclose($fp);\n                    }\n                }\n            }\n            zip_close($zip);\n        } else {\n            _error_log(\"unzipDirectory: ERROR php zip does not work\");\n        }\n    } else {\n        _error_log(\"unzipDirectory: Success {$destination}\");\n    }\n    @unlink($filename);\n}\n\nfunction make_path($path) {\n    $created = false;\n    if (substr($path, -1) !== DIRECTORY_SEPARATOR) {\n        $path = pathinfo($path, PATHINFO_DIRNAME);\n    }\n    if (!is_dir($path)) {\n        //if(preg_match('/getvideoinfo/i', $path)){var_dump(debug_backtrace());}\n        if (preg_match('/cache/i', $path)) {\n            $mode = 0777;\n        } else {\n            $mode = 0755;\n        }\n        $created = mkdir($path, $mode, true);\n        /*\n          if (!$created) {\n          _error_log('make_path: could not create the dir ' . json_encode($path) . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n          }\n         */\n    } else {\n        $created = true;\n    }\n    return $created;\n}\n\n/**\n * for security clean all non secure files from directory\n * @param type $dir\n * @param type $allowedExtensions\n * @return type\n */\nfunction cleanDirectory($dir, $allowedExtensions = ['key', 'm3u8', 'ts', 'vtt', 'jpg', 'gif', 'mp3', 'webm', 'webp']) {\n    $ffs = scandir($dir);\n\n    unset($ffs[array_search('.', $ffs, true)]);\n    unset($ffs[array_search('..', $ffs, true)]);\n\n    // prevent empty ordered elements\n    if (count($ffs) < 1) {\n        return;\n    }\n\n    foreach ($ffs as $ff) {\n        $current = $dir . '/' . $ff;\n        if (is_dir($current)) {\n            cleanDirectory($current, $allowedExtensions);\n        }\n        $path_parts = pathinfo($current);\n        if (!empty($path_parts['extension']) && !in_array($path_parts['extension'], $allowedExtensions)) {\n            unlink($current);\n        }\n    }\n}\n\nfunction decideFile_put_contentsToVideos($tmp_name, $filename) {\n    global $global;\n    $aws_s3 = AVideoPlugin::loadPluginIfEnabled('AWS_S3');\n    $bb_b2 = AVideoPlugin::loadPluginIfEnabled('Blackblaze_B2');\n    $ftp = AVideoPlugin::loadPluginIfEnabled('FTP_Storage');\n    if (!empty($bb_b2)) {\n        $bb_b2->move_uploaded_file($tmp_name, $filename);\n    } elseif (!empty($aws_s3)) {\n        $aws_s3->move_uploaded_file($tmp_name, $filename);\n    } elseif (!empty($ftp)) {\n        $ftp->move_uploaded_file($tmp_name, $filename);\n    } else {\n        $path = Video::getPathToFile($filename);\n        if (!move_uploaded_file($tmp_name, $path)) {\n            $obj->msg = \"Error on move_uploaded_file({$tmp_name}, {$filename})\";\n            die(json_encode($obj));\n        }\n    }\n}\n\nfunction isAnyStorageEnabled() {\n    if ($yptStorage = AVideoPlugin::loadPluginIfEnabled(\"YPTStorage\")) {\n        return true;\n    } elseif ($aws_s3 = AVideoPlugin::loadPluginIfEnabled(\"AWS_S3\")) {\n        return true;\n    } elseif ($bb_b2 = AVideoPlugin::loadPluginIfEnabled(\"Blackblaze_B2\")) {\n        return true;\n    } elseif ($ftp = AVideoPlugin::loadPluginIfEnabled(\"FTP_Storage\")) {\n        return true;\n    }\n    return false;\n}\n\nif (!function_exists('mime_content_type')) {\n\n    function mime_content_type($filename) {\n        return mime_content_type_per_filename($filename);\n    }\n\n}\n\nfunction fontAwesomeClassName($filename) {\n    $mime_type = mime_content_type_per_filename($filename);\n    // List of official MIME Types: http://www.iana.org/assignments/media-types/media-types.xhtml\n    $icon_classes = [\n// Media\n        'image' => 'fas fa-file-image',\n        'audio' => 'fas fa-file-audio',\n        'video' => 'fas fa-file-video',\n        // Documents\n        'application/pdf' => 'fas fa-file-pdf',\n        'application/msword' => 'fas fa-file-word',\n        'application/vnd.ms-word' => 'fas fa-file-word',\n        'application/vnd.oasis.opendocument.text' => 'fas fa-file-word',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml' => 'fas fa-file-word',\n        'application/vnd.ms-excel' => 'fas fa-file-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml' => 'fas fa-file-excel',\n        'application/vnd.oasis.opendocument.spreadsheet' => 'fas fa-file-excel',\n        'application/vnd.ms-powerpoint' => 'fas fa-file-powerpoint',\n        'application/vnd.openxmlformats-officedocument.presentationml' => 'fas fa-file-powerpoint',\n        'application/vnd.oasis.opendocument.presentation' => 'fas fa-file-powerpoint',\n        'text/plain' => 'far fa-file-alt',\n        'text/html' => 'fas fa-code',\n        'application/json' => 'fas fa-code',\n        // Archives\n        'application/gzip' => 'far fa-file-archive',\n        'application/zip' => 'far fa-file-archive',\n    ];\n    foreach ($icon_classes as $text => $icon) {\n        if (strpos($mime_type, $text) === 0) {\n            return $icon;\n        }\n    }\n    return 'fas fa-file';\n}\n\nfunction mime_content_type_per_filename($filename) {\n    $mime_types = [\n        'txt' => 'text/plain',\n        'htm' => 'text/html',\n        'html' => 'text/html',\n        'php' => 'text/html',\n        'css' => 'text/css',\n        'js' => 'application/javascript',\n        'json' => 'application/json',\n        'xml' => 'application/xml',\n        'swf' => 'application/x-shockwave-flash',\n        'flv' => 'video/x-flv',\n        // images\n        'png' => 'image/png',\n        'jpe' => 'image/jpeg',\n        'jpeg' => 'image/jpeg',\n        'jpg' => 'image/jpeg',\n        'gif' => 'image/gif',\n        'bmp' => 'image/bmp',\n        'ico' => 'image/vnd.microsoft.icon',\n        'tiff' => 'image/tiff',\n        'tif' => 'image/tiff',\n        'svg' => 'image/svg+xml',\n        'svgz' => 'image/svg+xml',\n        // archives\n        'zip' => 'application/zip',\n        'rar' => 'application/x-rar-compressed',\n        'exe' => 'application/x-msdownload',\n        'msi' => 'application/x-msdownload',\n        'cab' => 'application/vnd.ms-cab-compressed',\n        // audio/video\n        'mp3' => 'audio/mpeg',\n        'qt' => 'video/quicktime',\n        'mov' => 'video/quicktime',\n        'mp4' => 'video/mp4',\n        'avi' => 'video/avi',\n        'mkv' => 'video/mkv',\n        'wav' => 'audio/wav',\n        'm4v' => 'video/mpeg',\n        'webm' => 'video/webm',\n        'wmv' => 'video/wmv',\n        'mpg' => 'video/mpeg',\n        'mpeg' => 'video/mpeg',\n        'f4v' => 'video/x-flv',\n        'm4v' => 'video/m4v',\n        'm4a' => 'video/quicktime',\n        'm2p' => 'video/quicktime',\n        'rm' => 'video/quicktime',\n        'vob' => 'video/quicktime',\n        'mkv' => 'video/quicktime',\n        '3gp' => 'video/quicktime',\n        'm3u8' => 'application/x-mpegURL',\n        // adobe\n        'pdf' => 'application/pdf',\n        'psd' => 'image/vnd.adobe.photoshop',\n        'ai' => 'application/postscript',\n        'eps' => 'application/postscript',\n        'ps' => 'application/postscript',\n        // ms office\n        'doc' => 'application/msword',\n        'rtf' => 'application/rtf',\n        'xls' => 'application/vnd.ms-excel',\n        'ppt' => 'application/vnd.ms-powerpoint',\n        // open office\n        'odt' => 'application/vnd.oasis.opendocument.text',\n        'ods' => 'application/vnd.oasis.opendocument.spreadsheet',\n    ];\n    if (filter_var($filename, FILTER_VALIDATE_URL) === false) {\n        $ext = pathinfo($filename, PATHINFO_EXTENSION);\n    } else {\n        $ext = pathinfo(parse_url($filename, PHP_URL_PATH), PATHINFO_EXTENSION);\n    }\n\n    if ($ext === 'mp4' || $ext === 'webm') {\n        $securePlugin = AVideoPlugin::loadPluginIfEnabled('SecureVideosDirectory');\n        if (!empty($securePlugin)) {\n            if (method_exists($securePlugin, \"useEncoderWatrermarkFromFileName\") && $securePlugin->useEncoderWatrermarkFromFileName($filename)) {\n                return \"application/x-mpegURL\";\n            }\n        }\n    }\n\n    if (array_key_exists($ext, $mime_types)) {\n        return $mime_types[$ext];\n    } elseif (function_exists('finfo_open')) {\n        $finfo = finfo_open(FILEINFO_MIME);\n        $mimetype = finfo_file($finfo, $filename);\n        finfo_close($finfo);\n        return $mimetype;\n    } else {\n        return 'application/octet-stream';\n    }\n}\n\nfunction combineFiles($filesArray, $extension = \"js\") {\n    global $global, $advancedCustom;\n\n    if ($extension == 'js' && isBot()) {\n        return getCDN() . 'view/js/empty.js';\n    }\n\n    $relativeDir = 'videos/cache/' . $extension . '/';\n    $cacheDir = $global['systemRootPath'] . $relativeDir;\n    $str = '';\n    $fileName = '';\n    foreach ($filesArray as $value) {\n        $fileName .= $value . filectime($global['systemRootPath'] . $value) . filemtime($global['systemRootPath'] . $value);\n    }\n    if ($advancedCustom !== false) {\n        $minifyEnabled = $advancedCustom->EnableMinifyJS;\n    } else {\n        $minifyEnabled = false;\n    }\n    // temporary disable minify\n    $minifyEnabled = false;\n\n    $md5FileName = md5($fileName) . \".{$extension}\";\n    if (!file_exists($cacheDir . $md5FileName)) {\n        foreach ($filesArray as $value) {\n            if (file_exists($global['systemRootPath'] . $value)) {\n                $str .= \"\\n/*{$value} created local with systemRootPath */\\n\" . local_get_contents($global['systemRootPath'] . $value);\n            } elseif (file_exists($value)) {\n                $str .= \"\\n/*{$value} created local with full-path given */\\n\" . local_get_contents($value);\n            } else {\n                $allowed = '';\n                if (ini_get('allow_url_fopen')) {\n                    $allowed .= \"allow_url_fopen is on and \";\n                }\n                if (function_exists('curl_init')) {\n                    $allowed .= \"curl is on\";\n                } else {\n                    $allowed .= \"curl is off\";\n                }\n\n                $content = url_get_contents($value);\n                if (empty($content)) {\n                    $allowed .= \" - web-fallback 1 (add webSiteRootURL)\";\n                    $content = url_get_contents($global['webSiteRootURL'] . $value);\n                }\n                $str .= \"\\n/*{$value} created via web with own url ({$allowed}) */\\n\" . $content;\n            }\n        }\n        //if ((($extension == \"js\" || $extension == \"css\") && ($minifyEnabled))) {\n        if ($extension == \"css\" && ($minifyEnabled)) {\n            require_once $global['systemRootPath'] . 'objects/jshrink.php';\n            $str = \\JShrink\\Minifier::minify($str, ['flaggedComments' => false]);\n        }\n        if (!is_dir($cacheDir)) {\n            make_path($cacheDir);\n        }\n        $bytes = _file_put_contents($cacheDir . $md5FileName, $str);\n        if (empty($bytes)) {\n            _error_log('combineFiles: error on save strlen=' . strlen($str) . ' ' . $cacheDir . $md5FileName . ' cacheDir=' . $cacheDir);\n            return false;\n        }\n    }\n\n    return getURL($relativeDir . $md5FileName);\n}\n\nfunction combineFilesHTML($filesArray, $extension = \"js\", $doNotCombine = false) {\n    if (empty($doNotCombine)) {\n        $jsURL = combineFiles($filesArray, $extension);\n    }\n    if ($extension == \"js\") {\n        if (empty($jsURL)) {\n            $str = '';\n            foreach ($filesArray as $value) {\n                $jsURL = getURL($value);\n                $str .= '<script src=\"' . $jsURL . '\" type=\"text/javascript\"></script>';\n            }\n            return $str;\n        } else {\n            return '<script src=\"' . $jsURL . '\" type=\"text/javascript\"></script>';\n        }\n    } else {\n        if (empty($jsURL)) {\n            $str = '';\n            foreach ($filesArray as $value) {\n                $jsURL = getURL($value);\n                $str .= '<link href=\"' . $jsURL . '\" rel=\"stylesheet\" type=\"text/css\"/>';\n            }\n            return $str;\n        } else {\n            return '<link href=\"' . $jsURL . '\" rel=\"stylesheet\" type=\"text/css\"/>';\n        }\n    }\n}\n\nfunction local_get_contents($path) {\n    if (function_exists('fopen')) {\n        $myfile = fopen($path, \"r\") or die(\"Unable to open file! [{$path}]\");\n        $text = fread($myfile, filesize($path));\n        fclose($myfile);\n        return $text;\n    }\n}\n\nfunction getSelfUserAgent() {\n    global $global, $AVideoStreamer_UA;\n    $agent = $AVideoStreamer_UA . \"_\";\n    $agent .= md5($global['salt']);\n    return $agent;\n}\n\nfunction isValidM3U8Link($url, $timeout = 3) {\n    if (!isValidURL($url)) {\n        return false;\n    }\n    $content = url_get_contents($url, '', $timeout);\n    if (!empty($content)) {\n        if (preg_match('/EXTM3U/', $content)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction url_get_contents($url, $ctx = \"\", $timeout = 0, $debug = false) {\n    global $global, $mysqlHost, $mysqlUser, $mysqlPass, $mysqlDatabase, $mysqlPort;\n    if ($debug) {\n        _error_log(\"url_get_contents: Start $url, $ctx, $timeout \" . getSelfURI() . \" \" . getRealIpAddr() . \" \" . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n    }\n    $agent = getSelfUserAgent();\n\n    if (empty($ctx)) {\n        $opts = [\n            'http' => ['header' => \"User-Agent: {$agent}\\r\\n\"],\n            \"ssl\" => [\n                \"verify_peer\" => false,\n                \"verify_peer_name\" => false,\n                \"allow_self_signed\" => true,\n            ],\n        ];\n        if (!empty($timeout)) {\n            ini_set('default_socket_timeout', $timeout);\n            $opts['http'] = ['timeout' => $timeout];\n        }\n        $context = stream_context_create($opts);\n    } else {\n        $context = $ctx;\n    }\n    if (ini_get('allow_url_fopen')) {\n        if ($debug) {\n            _error_log(\"url_get_contents: allow_url_fopen {$url}\");\n        }\n        try {\n            $tmp = @file_get_contents($url, false, $context);\n            if ($tmp !== false) {\n                $response = remove_utf8_bom($tmp);\n                if ($debug) {\n                    //_error_log(\"url_get_contents: SUCCESS file_get_contents($url) {$response}\");\n                    _error_log(\"url_get_contents: SUCCESS file_get_contents($url)\");\n                }\n                return $response;\n            }\n            if ($debug) {\n                _error_log(\"url_get_contents: ERROR file_get_contents($url) \");\n            }\n        } catch (ErrorException $e) {\n            if ($debug) {\n                _error_log(\"url_get_contents: allow_url_fopen ERROR \" . $e->getMessage() . \"  {$url}\");\n            }\n            return \"url_get_contents: \" . $e->getMessage();\n        }\n    } elseif (function_exists('curl_init')) {\n        if ($debug) {\n            _error_log(\"url_get_contents: CURL  {$url} \");\n        }\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_USERAGENT, $agent);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        if (!empty($timeout)) {\n            curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);\n            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout + 10);\n        }\n        $output = curl_exec($ch);\n        curl_close($ch);\n        if ($debug) {\n            _error_log(\"url_get_contents: CURL SUCCESS {$url}\");\n        }\n        return remove_utf8_bom($output);\n    }\n    if ($debug) {\n        _error_log(\"url_get_contents: Nothing yet  {$url}\");\n    }\n\n    // try wget\n    $filename = getTmpDir(\"YPTurl_get_contents\") . md5($url);\n    if ($debug) {\n        _error_log(\"url_get_contents: try wget $filename {$url}\");\n    }\n    if (wget($url, $filename, $debug)) {\n        if ($debug) {\n            _error_log(\"url_get_contents: wget success {$url} \");\n        }\n        $result = file_get_contents($filename);\n        unlink($filename);\n        if (!empty($result)) {\n            return remove_utf8_bom($result);\n        }\n    } elseif ($debug) {\n        _error_log(\"url_get_contents: try wget fail {$url}\");\n    }\n\n    return false;\n}\n\nfunction getUpdatesFilesArray() {\n    global $config, $global;\n    if (!class_exists('User') || !User::isAdmin()) {\n        return [];\n    }\n    $files1 = scandir($global['systemRootPath'] . \"updatedb\");\n    $updateFiles = [];\n    foreach ($files1 as $value) {\n        preg_match(\"/updateDb.v([0-9.]*).sql/\", $value, $match);\n        if (!empty($match)) {\n            if ($config->currentVersionLowerThen($match[1])) {\n                $updateFiles[] = ['filename' => $match[0], 'version' => $match[1]];\n            }\n        }\n    }\n    usort($updateFiles, function($a, $b) {\n        return version_compare($a['version'], $b['version']);\n    });\n    return $updateFiles;\n}\n\nfunction thereIsAnyUpdate() {\n    if (!User::isAdmin()) {\n        return false;\n    }\n    $name = 'thereIsAnyUpdate';\n    if (!isset($_SESSION['sessionCache'][$name])) {\n        $files = getUpdatesFilesArray();\n        if (!empty($files)) {\n            _session_start();\n            $_SESSION['sessionCache'][$name] = $files;\n        }\n    }\n    return @$_SESSION['sessionCache'][$name];\n}\n\nfunction thereIsAnyRemoteUpdate() {\n    if (!User::isAdmin()) {\n        return false;\n    }\n    global $config;\n\n    $cacheName = '_thereIsAnyRemoteUpdate';\n    $cache = ObjectYPT::getCache($cacheName, 86400); // 24 hours\n    if (!empty($cache)) {\n        return $cache;\n    }\n\n    $version = _json_decode(url_get_contents(\"https://tutorials.wwbn.net/version\"));\n    //$version = _json_decode(url_get_contents(\"https://tutorialsavideo.b-cdn.net/version\", \"\", 4));\n    if (empty($version)) {\n        return false;\n    }\n    $name = 'thereIsAnyRemoteUpdate';\n    if (!isset($_SESSION['sessionCache'][$name])) {\n        if (!empty($version)) {\n            _session_start();\n            if (version_compare($config->getVersion(), $version->version) === -1) {\n                $_SESSION['sessionCache'][$name] = $version;\n            } else {\n                $_SESSION['sessionCache'][$name] = false;\n            }\n        }\n    }\n    ObjectYPT::setCache($cacheName, $_SESSION['sessionCache'][$name]);\n    return $_SESSION['sessionCache'][$name];\n}\n\nfunction UTF8encode($data) {\n    global $advancedCustom, $global;\n\n    if (!empty($advancedCustom->utf8Encode)) {\n        return utf8_encode($data);\n    }\n    if (!empty($advancedCustom->utf8Decode)) {\n        return utf8_decode($data);\n    }\n    return $data;\n}\n\n//detect search engine bots\nfunction isBot() {\n    global $_isBot;\n    if (empty($_SERVER['HTTP_USER_AGENT'])) {\n        return true;\n    }\n    if (isAVideoEncoder()) {\n        return false;\n    }\n    if (isset($_isBot)) {\n        return $_isBot;\n    }\n    $_isBot = false;\n    // User lowercase string for comparison.\n    $user_agent = strtolower($_SERVER['HTTP_USER_AGENT']);\n    // A list of some common words used only for bots and crawlers.\n    $bot_identifiers = [\n        'bot',\n        'slurp',\n        'crawler',\n        'spider',\n        'curl',\n        'facebook',\n        'fetch',\n        'loader',\n        'lighthouse',\n        'pingdom',\n        'gtmetrix',\n        'ptst',\n        'dmbrowser',\n        'dareboost',\n    ];\n    // See if one of the identifiers is in the UA string.\n    foreach ($bot_identifiers as $identifier) {\n        if (stripos($user_agent, $identifier) !== false) {\n            $_isBot = true;\n            break;\n        }\n    }\n    return $_isBot;\n}\n\n/**\n * A function that could get me the last N lines of a log file.\n * @param type $filepath\n * @param type $lines\n * @param type $adaptive\n * @return boolean\n */\nfunction tail($filepath, $lines = 1, $adaptive = true, $returnArray = false) {\n    if (!function_exists('mb_strlen')) {\n        $msg = \"AVideoLog::ERROR you need to install the mb_strlen function to make it work, please the command 'sudo apt install php-mbstring'\";\n        if ($returnArray) {\n            return [[$msg]];\n        } else {\n            return $msg;\n        }\n    }\n    // Open file\n    $f = @fopen($filepath, \"rb\");\n    if ($f === false) {\n        return false;\n    }\n\n    // Sets buffer size, according to the number of lines to retrieve.\n    // This gives a performance boost when reading a few lines from the file.\n    if (!$adaptive) {\n        $buffer = 4096;\n    } else {\n        $buffer = ($lines < 2 ? 64 : ($lines < 10 ? 512 : 4096));\n    }\n\n    // Jump to last character\n    fseek($f, -1, SEEK_END);\n    // Read it and adjust line number if necessary\n    // (Otherwise the result would be wrong if file doesn't end with a blank line)\n    if (fread($f, 1) !== \"\\n\") {\n        $lines -= 1;\n    }\n\n    // Start reading\n    $output = '';\n    $chunk = '';\n    // While we would like more\n    while (ftell($f) > 0 && $lines >= 0) {\n        // Figure out how far back we should jump\n        $seek = min(ftell($f), $buffer);\n        // Do the jump (backwards, relative to where we are)\n        fseek($f, -$seek, SEEK_CUR);\n        // Read a chunk and prepend it to our output\n        $output = ($chunk = fread($f, $seek)) . $output;\n        // Jump back to where we started reading\n        fseek($f, -mb_strlen($chunk, '8bit'), SEEK_CUR);\n        // Decrease our line counter\n        $lines -= substr_count($chunk, \"\\n\");\n    }\n    // While we have too many lines\n    // (Because of buffer size we might have read too many)\n    while ($lines++ < 0) {\n        // Find first newline and remove all text before that\n        $output = substr($output, strpos($output, \"\\n\") + 1);\n    }\n    // Close file and return\n    fclose($f);\n    $output = trim($output);\n    if ($returnArray) {\n        $array = explode(\"\\n\", $output);\n        $newArray = [];\n        foreach ($array as $value) {\n            $newArray[] = [$value];\n        }\n        return $newArray;\n    } else {\n        return $output;\n    }\n}\n\nfunction encryptPassword($password, $noSalt = false) {\n    global $advancedCustom, $global, $advancedCustomUser;\n    if (!empty($advancedCustomUser->encryptPasswordsWithSalt) && !empty($global['salt']) && empty($noSalt)) {\n        $password .= $global['salt'];\n    }\n\n    return md5(hash(\"whirlpool\", sha1($password)));\n}\n\nfunction encryptPasswordVerify($password, $hash, $encodedPass = false) {\n    global $advancedCustom, $global;\n    if (!$encodedPass || $encodedPass === 'false') {\n        //_error_log(\"encryptPasswordVerify: encrypt\");\n        $passwordSalted = encryptPassword($password);\n        // in case you enable the salt later\n        $passwordUnSalted = encryptPassword($password, true);\n    } else {\n        //_error_log(\"encryptPasswordVerify: do not encrypt\");\n        $passwordSalted = $password;\n        // in case you enable the salt later\n        $passwordUnSalted = $password;\n    }\n    //_error_log(\"passwordSalted = $passwordSalted,  hash=$hash, passwordUnSalted=$passwordUnSalted\");\n    return $passwordSalted === $hash || $passwordUnSalted === $hash || $password === $hash;\n}\n\nfunction encryptPasswordV2($uniqueSalt, $password, $noSalt = false) {\n    global $advancedCustom, $global, $advancedCustomUser;\n    if (!empty($advancedCustomUser->encryptPasswordsWithSalt) && !empty($global['salt']) && empty($noSalt)) {\n        $password .= $global['salt'];\n    }\n    $password .= md5($uniqueSalt);\n    return md5(hash(\"whirlpool\", sha1($password)));\n}\n\nfunction encryptPasswordVerifyV2($uniqueSalt, $password, $hash, $encodedPass = false) {\n    global $advancedCustom, $global;\n    if (!$encodedPass || $encodedPass === 'false') {\n        //_error_log(\"encryptPasswordVerify: encrypt\");\n        $passwordSalted = encryptPasswordV2($uniqueSalt, $password);\n        // in case you enable the salt later\n        $passwordUnSalted = encryptPasswordV2($uniqueSalt, $password, true);\n    } else {\n        //_error_log(\"encryptPasswordVerify: do not encrypt\");\n        $passwordSalted = $password;\n        // in case you enable the salt later\n        $passwordUnSalted = $password;\n    }\n    //_error_log(\"passwordSalted = $passwordSalted,  hash=$hash, passwordUnSalted=$passwordUnSalted\");\n    return $passwordSalted === $hash || $passwordUnSalted === $hash || $password === $hash;\n}\n\nfunction isMobile($userAgent = null, $httpHeaders = null) {\n    if (empty($userAgent) && empty($_SERVER[\"HTTP_USER_AGENT\"])) {\n        return false;\n    }\n    global $global;\n    require_once $global['systemRootPath'] . 'objects/Mobile_Detect.php';\n    $detect = new Mobile_Detect();\n\n    return $detect->isMobile($userAgent, $httpHeaders);\n}\n\nfunction isChannelPage() {\n    return strpos($_SERVER[\"SCRIPT_NAME\"], 'view/channel.php') !== false;\n}\n\nfunction isAVideoMobileApp($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoMobileAPP_UA;\n    if (preg_match(\"/{$AVideoMobileAPP_UA}(.*)/\", $_SERVER[\"HTTP_USER_AGENT\"], $match)) {\n        $url = trim($match[1]);\n        if (!empty($url)) {\n            return $url;\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction isAVideoEncoder($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoEncoder_UA;\n    if (preg_match(\"/{$AVideoEncoder_UA}(.*)/\", $_SERVER[\"HTTP_USER_AGENT\"], $match)) {\n        $url = trim($match[1]);\n        if (!empty($url)) {\n            return $url;\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction isCDN() {\n    if (empty($_SERVER['HTTP_CDN_HOST'])) {\n        return false;\n    }\n    return isFromCDN($_SERVER['HTTP_CDN_HOST']);\n}\n\nfunction isFromCDN($url) {\n    if (preg_match('/cdn.ypt.me/i', $url)) {\n        return true;\n    }\n    return false;\n}\n\nfunction isAVideo($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoEncoder_UA;\n    if (preg_match(\"/AVideo(.*)/\", $_SERVER[\"HTTP_USER_AGENT\"], $match)) {\n        $url = trim($match[1]);\n        if (!empty($url)) {\n            return $url;\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction isAVideoEncoderOnSameDomain() {\n    $url = isAVideoEncoder();\n    if (empty($url)) {\n        return false;\n    }\n    $url = \"http://{$url}\";\n    return isSameDomainAsMyAVideo($url);\n}\n\nfunction isSameDomainAsMyAVideo($url) {\n    global $global;\n    if (empty($url)) {\n        return false;\n    }\n    return isSameDomain($url, $global['webSiteRootURL']) || isSameDomain($url, getCDN());\n}\n\nfunction requestComesFromSameDomainAsMyAVideo() {\n    global $global;\n    $url = '';\n    if (!empty($_SERVER['HTTP_REFERER'])) {\n        $url = $_SERVER['HTTP_REFERER'];\n    } elseif (!empty($_SERVER['HTTP_ORIGIN'])) {\n        $url = $_SERVER['HTTP_ORIGIN'];\n    }\n    //_error_log(\"requestComesFromSameDomainAsMyAVideo: ({$url}) == ({$global['webSiteRootURL']})\");\n    return isSameDomain($url, $global['webSiteRootURL']) || isSameDomain($url, getCDN()) || isFromCDN($url);\n}\n\nfunction requestComesFromSafePlace() {\n    return (requestComesFromSameDomainAsMyAVideo() || isAVideo());\n}\n\nfunction addGlobalTokenIfSameDomain($url) {\n    if (!filter_var($url, FILTER_VALIDATE_URL) || (empty($_GET['livelink']) || !preg_match(\"/^http.*/i\", $_GET['livelink']))) {\n        return $url;\n    }\n    if (!isSameDomainAsMyAVideo($url)) {\n        return $url;\n    }\n    return addQueryStringParameter($url, 'globalToken', getToken(60));\n}\n\n/**\n * Remove a query string parameter from an URL.\n *\n * @param string $url\n * @param string $varname\n *\n * @return string\n */\nfunction removeQueryStringParameter($url, $varname) {\n    $parsedUrl = parse_url($url);\n    $query = [];\n\n    if (isset($parsedUrl['query'])) {\n        parse_str($parsedUrl['query'], $query);\n        unset($query[$varname]);\n    }\n\n    $path = $parsedUrl['path'] ?? '';\n    $query = !empty($query) ? '?' . http_build_query($query) : '';\n\n    if (empty($parsedUrl['scheme'])) {\n        $scheme = '';\n    } else {\n        $scheme = \"{$parsedUrl['scheme']}:\";\n    }\n    return $scheme . '//' . $parsedUrl['host'] . $path . $query;\n}\n\n/**\n * Add a query string parameter from an URL.\n *\n * @param string $url\n * @param string $varname\n *\n * @return string\n */\nfunction addQueryStringParameter($url, $varname, $value) {\n    $parsedUrl = parse_url($url);\n    if (empty($parsedUrl['host'])) {\n        return \"\";\n    }\n    $query = [];\n\n    if (isset($parsedUrl['query'])) {\n        parse_str($parsedUrl['query'], $query);\n    }\n    $query[$varname] = $value;\n    $path = $parsedUrl['path'] ?? '';\n    $query = !empty($query) ? '?' . http_build_query($query) : '';\n\n    $port = '';\n    if (!empty($parsedUrl['port']) && $parsedUrl['port'] != '80') {\n        $port = \":{$parsedUrl['port']}\";\n    }\n\n    if (empty($parsedUrl['scheme'])) {\n        $scheme = '';\n    } else {\n        $scheme = \"{$parsedUrl['scheme']}:\";\n    }\n    return $scheme . '//' . $parsedUrl['host'] . $port . $path . $query;\n}\n\nfunction isSameDomain($url1, $url2) {\n    if (empty($url1) || empty($url2)) {\n        return false;\n    }\n    return (get_domain($url1) === get_domain($url2));\n}\n\nfunction isAVideoStreamer($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoStreamer_UA, $global;\n    $md5 = md5($global['salt']);\n    if (preg_match(\"/{$AVideoStreamer_UA}_{$md5}/\", $_SERVER[\"HTTP_USER_AGENT\"])) {\n        return true;\n    }\n    return false;\n}\n\nfunction isAVideoUserAgent($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoMobileAPP_UA, $AVideoEncoder_UA, $AVideoStreamer_UA, $AVideoStorage_UA, $global;\n\n    // Lavf = ffmpeg\n    $agents = [$AVideoMobileAPP_UA, $AVideoEncoder_UA, $AVideoStreamer_UA, $AVideoStorage_UA, 'Lavf'];\n\n    foreach ($agents as $value) {\n        if (preg_match(\"/{$value}/\", $_SERVER[\"HTTP_USER_AGENT\"])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isAVideoStorage($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return false;\n    }\n    global $AVideoStorage_UA;\n    if (preg_match(\"/{$AVideoStorage_UA}(.*)/\", $_SERVER[\"HTTP_USER_AGENT\"], $match)) {\n        $url = trim($match[1]);\n        if (!empty($url)) {\n            return $url;\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction get_domain($url, $ifEmptyReturnSameString = false) {\n    $pieces = parse_url($url);\n    $domain = $pieces['host'] ?? '';\n    if (empty($domain)) {\n        return $ifEmptyReturnSameString ? $url : false;\n    }\n    if (preg_match('/(?P<domain>[a-z0-9][a-z0-9\\-]{1,63}\\.[a-z\\.]{2,6})$/i', $domain, $regs)) {\n        return $regs['domain'];\n    } else {\n        $isIp = (bool) ip2long($pieces['host']);\n        if ($isIp) {\n            return $pieces['host'];\n        }\n    }\n    return false;\n}\n\nfunction verify($url) {\n    ini_set('default_socket_timeout', 5);\n    $cacheFile = sys_get_temp_dir() . '/' . md5($url) . \"_verify.log\";\n    $lifetime = 86400; //24 hours\n    error_log(\"Verification Start {$url}\");\n    $verifyURL = \"https://search.ypt.me/verify.php\";\n    $verifyURL = addQueryStringParameter($verifyURL, 'url', $global['webSiteRootURL']);\n    $verifyURL = addQueryStringParameter($verifyURL, 'screenshot', 1);\n    if (!file_exists($cacheFile) || (time() > (filemtime($cacheFile) + $lifetime))) {\n        error_log(\"Verification Creating the Cache {$url}\");\n        $result = url_get_contents($verifyURL, '', 5);\n        file_put_contents($cacheFile, $result);\n    } else {\n        error_log(\"Verification GetFrom Cache {$url}\");\n        $result = file_get_contents($cacheFile);\n    }\n    error_log(\"Verification Response ($verifyURL): {$result}\");\n    return json_decode($result);\n}\n\nfunction isVerified($url) {\n    $resultV = verify($url);\n    if (!empty($resultV) && !$resultV->verified) {\n        error_log(\"Error on Login not verified\");\n        return false;\n    }\n    return true;\n}\n\nfunction siteMap() {\n    _error_log(\"siteMap: start\");\n    ini_set('memory_limit', '-1');\n    ini_set('max_execution_time', 0);\n    @session_write_close();\n    global $global, $advancedCustom;\n    $global['disableVideoTags'] = 1;\n    $date = date('Y-m-d\\TH:i:s') . \"+00:00\";\n    $xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\n        http://www.w3.org/1999/xhtml http://www.w3.org/2002/08/xhtml/xhtml1-strict.xsd\"\n        xmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"\n        xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n        xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n        <!-- Main Page -->\n        <url>\n            <loc>' . $global['webSiteRootURL'] . '</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>always</changefreq>\n            <priority>1.00</priority>\n        </url>\n\n        <url>\n            <loc>' . $global['webSiteRootURL'] . 'help</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>monthly</changefreq>\n            <priority>0.50</priority>\n        </url>\n        <url>\n            <loc>' . $global['webSiteRootURL'] . 'about</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>monthly</changefreq>\n            <priority>0.50</priority>\n        </url>\n        <url>\n            <loc>' . $global['webSiteRootURL'] . 'contact</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>monthly</changefreq>\n            <priority>0.50</priority>\n        </url>\n\n        <!-- Channels -->\n        <url>\n            <loc>' . $global['webSiteRootURL'] . 'channels</loc>\n            <lastmod>' . $date . '</lastmod>\n            <changefreq>daily</changefreq>\n            <priority>0.80</priority>\n        </url>\n        ';\n\n    $_REQUEST['rowCount'] = $advancedCustom->siteMapRowsLimit;\n    _error_log(\"siteMap: rowCount {$_REQUEST['rowCount']} \");\n    $_POST['sort']['modified'] = \"DESC\";\n    TimeLogStart(\"siteMap getAllUsersThatHasVideos\");\n    $users = User::getAllUsersThatHasVideos(true);\n    _error_log(\"siteMap: getAllUsers \" . count($users));\n    foreach ($users as $value) {\n        $xml .= '\n            <url>\n                <loc>' . User::getChannelLink($value['id']) . '</loc>\n                <lastmod>' . $date . '</lastmod>\n                <changefreq>daily</changefreq>\n                <priority>0.90</priority>\n            </url>\n            ';\n    }\n    TimeLogEnd(\"siteMap getAllUsersThatHasVideos\", __LINE__, 0.5);\n    TimeLogStart(\"siteMap getAllCategories\");\n    $xml .= '\n        <!-- Categories -->\n        ';\n    $_REQUEST['rowCount'] = $advancedCustom->siteMapRowsLimit;\n    $_POST['sort']['modified'] = \"DESC\";\n    $rows = Category::getAllCategories();\n    _error_log(\"siteMap: getAllCategories \" . count($rows));\n    foreach ($rows as $value) {\n        $xml .= '\n            <url>\n                <loc>' . $global['webSiteRootURL'] . 'cat/' . $value['clean_name'] . '</loc>\n                <lastmod>' . $date . '</lastmod>\n                <changefreq>weekly</changefreq>\n                <priority>0.80</priority>\n            </url>\n            ';\n    }\n    TimeLogEnd(\"siteMap getAllCategories\", __LINE__, 0.5);\n    TimeLogStart(\"siteMap getAllVideos\");\n    $xml .= '<!-- Videos -->';\n    $_REQUEST['rowCount'] = $advancedCustom->siteMapRowsLimit * 10;\n    $_POST['sort']['created'] = \"DESC\";\n    $rows = Video::getAllVideos(!empty($advancedCustom->showPrivateVideosOnSitemap) ? \"viewableNotUnlisted\" : \"publicOnly\");\n    _error_log(\"siteMap: getAllVideos \" . count($rows));\n    foreach ($rows as $video) {\n        $videos_id = $video['id'];\n\n        TimeLogStart(\"siteMap Video::getPoster $videos_id\");\n        $img = Video::getPoster($videos_id);\n        TimeLogEnd(\"siteMap Video::getPoster $videos_id\", __LINE__, 0.5);\n\n        $description = str_replace(['\"', \"\\n\", \"\\r\"], ['', ' ', ' '], empty(trim($video['description'])) ? $video['title'] : $video['description']);\n        $duration = parseDurationToSeconds($video['duration']);\n        if ($duration > 28800) {\n            // this is because this issue https://github.com/WWBN/AVideo/issues/3338 remove in the future if is not necessary anymore\n            $duration = 28800;\n        }\n\n        TimeLogStart(\"siteMap Video::getLink $videos_id\");\n        $loc = Video::getLink($video['id'], $video['clean_title']);\n        TimeLogEnd(\"siteMap Video::getLink $videos_id\", __LINE__, 0.5);\n        $title = strip_tags($video['title']);\n        $description = _substr(strip_tags(br2nl($description)), 0, 2048);\n        TimeLogStart(\"siteMap Video::getLinkToVideo $videos_id\");\n        $player_loc = Video::getLinkToVideo($video['id'], $video['clean_title'], true);\n        TimeLogEnd(\"siteMap Video::getLinkToVideo $videos_id\", __LINE__, 0.5);\n        TimeLogStart(\"siteMap Video::isPublic $videos_id\");\n        $requires_subscription = Video::isPublic($video['id']) ? \"no\" : \"yes\";\n        TimeLogEnd(\"siteMap Video::isPublic $videos_id\", __LINE__, 0.5);\n        TimeLogStart(\"siteMap Video::getChannelLink $videos_id\");\n        $uploader_info = User::getChannelLink($video['users_id']);\n        TimeLogEnd(\"siteMap Video::getChannelLink $videos_id\", __LINE__, 0.5);\n        TimeLogStart(\"siteMap Video::getNameIdentificationById $videos_id\");\n        $uploader = htmlentities(User::getNameIdentificationById($video['users_id']));\n        TimeLogEnd(\"siteMap Video::getNameIdentificationById $videos_id\", __LINE__, 0.5);\n\n        $xml .= '\n            <url>\n                <loc>' . $loc . '</loc>\n                <video:video>\n                    <video:thumbnail_loc>' . $img . '</video:thumbnail_loc>\n                    <video:title><![CDATA[' . $title . ']]></video:title>\n                    <video:description><![CDATA[' . $description . ']]></video:description>\n                    <video:player_loc><![CDATA[' . $player_loc . ']]></video:player_loc>\n                    <video:duration>' . $duration . '</video:duration>\n                    <video:view_count>' . $video['views_count'] . '</video:view_count>\n                    <video:publication_date>' . date(\"Y-m-d\\TH:i:s\", strtotime($video['created'])) . '+00:00</video:publication_date>\n                    <video:family_friendly>yes</video:family_friendly>\n                    <video:requires_subscription>' . $requires_subscription . '</video:requires_subscription>\n                    <video:uploader info=\"' . $uploader_info . '\">' . $uploader . '</video:uploader>\n                    <video:live>no</video:live>\n                </video:video>\n            </url>\n            ';\n    }\n    TimeLogEnd(\"siteMap getAllVideos\", __LINE__, 0.5);\n    $xml .= '</urlset> ';\n    _error_log(\"siteMap: done \");\n    $newXML1 = preg_replace('/[^\\x{0009}\\x{000a}\\x{000d}\\x{0020}-\\x{D7FF}\\x{E000}-\\x{FFFD}]+/u', '', $xml);\n    if (empty($newXML1)) {\n        _error_log(\"siteMap: pregreplace1 fail \");\n        $newXML1 = $xml;\n    }\n    if (!empty($advancedCustom->siteMapUTF8Fix)) {\n        $newXML2 = preg_replace('/&(?!#?[a-z0-9]+;)/', '&amp;', $newXML1);\n        if (empty($newXML2)) {\n            _error_log(\"siteMap: pregreplace2 fail \");\n            $newXML2 = $newXML1;\n        }\n        $newXML3 = preg_replace('/[\\x00-\\x1F\\x7F-\\xFF]/', '', $newXML2);\n        if (empty($newXML3)) {\n            _error_log(\"siteMap: pregreplace3 fail \");\n            $newXML3 = $newXML2;\n        }\n        $newXML4 = preg_replace('/[\\x00-\\x1F\\x7F]/', '', $newXML3);\n        if (empty($newXML4)) {\n            _error_log(\"siteMap: pregreplace4 fail \");\n            $newXML4 = $newXML3;\n        }\n        $newXML5 = preg_replace('/[\\x00-\\x1F\\x7F\\xA0]/u', '', $newXML4);\n        if (empty($newXML5)) {\n            _error_log(\"siteMap: pregreplace5 fail \");\n            $newXML5 = $newXML4;\n        }\n    } else {\n        $newXML5 = $newXML1;\n    }\n    return $newXML5;\n}\n\nfunction object_to_array($obj) {\n    //only process if it's an object or array being passed to the function\n    if (is_object($obj) || is_array($obj)) {\n        $ret = (array) $obj;\n        foreach ($ret as &$item) {\n            //recursively process EACH element regardless of type\n            $item = object_to_array($item);\n        }\n        return $ret;\n    }\n    //otherwise (i.e. for scalar values) return without modification\n    else {\n        return $obj;\n    }\n}\n\nfunction allowOrigin() {\n    global $global;\n    cleanUpAccessControlHeader();\n    if (empty($_SERVER['HTTP_ORIGIN'])) {\n        $server = parse_url($global['webSiteRootURL']);\n        header('Access-Control-Allow-Origin: ' . $server[\"scheme\"] . '://imasdk.googleapis.com');\n    } else {\n        header(\"Access-Control-Allow-Origin: \" . $_SERVER['HTTP_ORIGIN']);\n    }\n    header(\"Access-Control-Allow-Credentials: true\");\n    header(\"Access-Control-Allow-Methods: GET,HEAD,OPTIONS,POST,PUT\");\n    header(\"Access-Control-Allow-Headers: Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers\");\n}\n\nfunction cleanUpAccessControlHeader() {\n    if (!headers_sent()) {\n        foreach (headers_list() as $header) {\n            if (preg_match('/Access-Control-Allow-Origin/i', $header)) {\n                $parts = explode(':', $header);\n                header_remove($parts[0]);\n            }\n        }\n    }\n}\n\nfunction rrmdir($dir) {\n    //if(preg_match('/cache/i', $dir)){_error_log(\"rrmdir($dir) \". json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));exit;}\n\n    $dir = str_replace(['//', '\\\\\\\\'], DIRECTORY_SEPARATOR, $dir);\n    //_error_log('rrmdir: ' . $dir);\n    if (empty($dir)) {\n        _error_log('rrmdir: the dir was empty');\n        return false;\n    }\n    global $global;\n    $dir = fixPath($dir);\n    $pattern = '/' . addcslashes($dir, DIRECTORY_SEPARATOR) . 'videos[\\/\\\\\\]?$/i';\n    if ($dir == getVideosDir() || $dir == \"{$global['systemRootPath']}videos\" . DIRECTORY_SEPARATOR || preg_match($pattern, $dir)) {\n        _error_log('rrmdir: A script ties to delete the videos Directory [' . $dir . '] ' . json_encode([$dir == getVideosDir(), $dir == \"{$global['systemRootPath']}videos\" . DIRECTORY_SEPARATOR, preg_match($pattern, $dir)]));\n        return false;\n    }\n    rrmdirCommandLine($dir);\n    if (is_dir($dir)) {\n        //_error_log('rrmdir: The Directory was not deleted, trying again ' . $dir);\n        $objects = scandir($dir);\n        //_error_log('rrmdir: scandir ' . $dir . ' '. json_encode($objects));\n        foreach ($objects as $object) {\n            if ($object !== '.' && $object !== '..') {\n                if (is_dir($dir . DIRECTORY_SEPARATOR . $object)) {\n                    rrmdir($dir . DIRECTORY_SEPARATOR . $object);\n                } else {\n                    unlink($dir . DIRECTORY_SEPARATOR . $object);\n                }\n            }\n        }\n        if (preg_match('/(\\/|^)videos(\\/cache)?\\/?$/i', $dir)) {\n            _error_log('rrmdir: do not delete videos or cache folder ' . $dir);\n            // do not delete videos or cache folder\n            return false;\n        }\n        if (rmdir($dir)) {\n            return true;\n        } else {\n            _error_log('rrmdir: could not delete folder ' . $dir);\n            return false;\n        }\n    } else {\n        //_error_log('rrmdir: The Directory does not exists '.$dir);\n        return true;\n    }\n}\n\nfunction rrmdirCommandLine($dir, $async = false) {\n    if (is_dir($dir)) {\n        if (isWindows()) {\n            $command = ('rd /s /q ' . $dir);\n        } else {\n            $command = ('rm -fR ' . $dir);\n        }\n\n        if ($async) {\n            return execAsync($command);\n        } else {\n            return exec($command);\n        }\n    }\n}\n\n/**\n * You can now configure it on the configuration.php\n * @return boolean\n */\nfunction ddosProtection() {\n    global $global;\n    $maxCon = empty($global['ddosMaxConnections']) ? 40 : $global['ddosMaxConnections'];\n    $secondTimeout = empty($global['ddosSecondTimeout']) ? 5 : $global['ddosSecondTimeout'];\n    $whitelistedFiles = [\n        'playlists.json.php',\n        'playlistsFromUserVideos.json.php',\n        'image404.php',\n    ];\n\n    if (in_array(basename($_SERVER[\"SCRIPT_FILENAME\"]), $whitelistedFiles)) {\n        return true;\n    }\n\n    $time = time();\n    if (!isset($_SESSION['bruteForceBlock']) || empty($_SESSION['bruteForceBlock'])) {\n        $_SESSION['bruteForceBlock'] = [];\n        $_SESSION['bruteForceBlock'][] = $time;\n        return true;\n    }\n\n    $_SESSION['bruteForceBlock'][] = $time;\n\n    //remove requests that are older than secondTimeout\n    foreach ($_SESSION['bruteForceBlock'] as $key => $request_time) {\n        if ($request_time < $time - $secondTimeout) {\n            unset($_SESSION['bruteForceBlock'][$key]);\n        }\n    }\n\n    //progressive timeout-> more requests, longer timeout\n    $active_connections = count($_SESSION['bruteForceBlock']);\n    $timeoutReal = ($active_connections / $maxCon) < 1 ? 0 : ($active_connections / $maxCon) * $secondTimeout;\n    if ($timeoutReal) {\n        _error_log(\"ddosProtection:: progressive timeout timeoutReal = ($timeoutReal) active_connections = ($active_connections) maxCon = ($maxCon) \", AVideoLog::$SECURITY);\n    }\n    sleep($timeoutReal);\n\n    //with strict mode, penalize \"attacker\" with sleep() above, log and then die\n    if ($global['strictDDOSprotection'] && $timeoutReal > 0) {\n        $str = \"bruteForceBlock: maxCon: $maxCon => secondTimeout: $secondTimeout | IP: \" . getRealIpAddr() . \" | count:\" . count($_SESSION['bruteForceBlock']);\n        _error_log($str);\n        die($str);\n    }\n\n    return true;\n}\n\nfunction getAdsLeaderBoardBigVideo() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardBigVideoMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardBigVideo->value);\n        }\n    }\n}\n\nfunction getAdsLeaderBoardTop() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardTopMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardTop->value);\n        }\n    } else {\n        return false;\n    }\n}\n\nfunction getAdsChannelLeaderBoardTop() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->channelLeaderBoardTopMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->channelLeaderBoardTop->value);\n        }\n    }\n}\n\nfunction getAdsLeaderBoardTop2() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardTopMobile2->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardTop2->value);\n        }\n    }\n}\n\nfunction getAdsLeaderBoardMiddle() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardMiddleMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardMiddle->value);\n        }\n    }\n}\n\nfunction getAdsLeaderBoardFooter() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->leaderBoardFooterMobile->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->leaderBoardFooter->value);\n        }\n    }\n}\n\nfunction getAdsSideRectangle() {\n    $ad = AVideoPlugin::getObjectDataIfEnabled('ADs');\n    if (!empty($ad)) {\n        if (isMobile()) {\n            return ADs::giveGoogleATimeout($ad->sideRectangle->value);\n        } else {\n            return ADs::giveGoogleATimeout($ad->sideRectangle->value);\n        }\n    }\n}\n\nfunction isToHidePrivateVideos() {\n    $obj = AVideoPlugin::getObjectDataIfEnabled(\"Gallery\");\n    if (!empty($obj)) {\n        return $obj->hidePrivateVideos;\n    }\n    $obj = AVideoPlugin::getObjectDataIfEnabled(\"YouPHPFlix2\");\n    if (!empty($obj)) {\n        return $obj->hidePrivateVideos;\n    }\n    $obj = AVideoPlugin::getObjectDataIfEnabled(\"YouTube\");\n    if (!empty($obj)) {\n        return $obj->hidePrivateVideos;\n    }\n    return false;\n}\n\nfunction convertImageToOG($source, $destination) {\n    if (!file_exists($destination)) {\n        $w = 200;\n        $h = 200;\n        $sizes = getimagesize($source);\n        if ($sizes[0] < $w || $sizes[1] < $h) {\n            $tmpDir = getTmpDir();\n            $fileConverted = $tmpDir . \"_jpg_\" . uniqid() . \".jpg\";\n            convertImage($source, $fileConverted, 100);\n            im_resizeV2($fileConverted, $destination, $w, $h, 100);\n            unlink($fileConverted);\n        }\n    }\n    return $destination;\n}\n\nfunction convertImageToRoku($source, $destination) {\n    if (empty($source)) {\n        _error_log(\"convertImageToRoku: source image is empty\");\n        return false;\n    }\n\n    $w = 1280;\n    $h = 720;\n    if (file_exists($destination)) {\n        $sizes = getimagesize($destination);\n        if ($sizes[0] < $w || $sizes[1] < $h) {\n            _error_log(\"convertImageToRoku: file is smaller \" . json_encode($sizes));\n            unlink($destination);\n        }\n    }\n    if (!file_exists($destination)) {\n        try {\n            $tmpDir = getTmpDir();\n            $fileConverted = $tmpDir . \"_jpg_\" . uniqid() . \".jpg\";\n            convertImage($source, $fileConverted, 100);\n            im_resizeV2($fileConverted, $destination, $w, $h, 100);\n            @unlink($fileConverted);\n        } catch (Exception $exc) {\n            _error_log(\"convertImageToRoku: \" . $exc->getMessage());\n            return false;\n        }\n    }\n    return $destination;\n}\n\nfunction ogSite() {\n    global $global, $config;\n    include $global['systemRootPath'] . 'objects/functionogSite.php';\n}\n\nfunction getOpenGraph($videos_id) {\n    global $global, $config, $advancedCustom;\n    include $global['systemRootPath'] . 'objects/functiongetOpenGraph.php';\n}\n\nfunction getLdJson($videos_id) {\n    $cache = ObjectYPT::getCache(\"getLdJson{$videos_id}\", 0);\n    if (empty($cache)) {\n        echo $cache;\n    }\n    global $global, $config;\n    echo \"<!-- ld+json -->\";\n    if (empty($videos_id)) {\n        echo \"<!-- ld+json no video id -->\";\n        if (!empty($_GET['videoName'])) {\n            echo \"<!-- ld+json videoName {$_GET['videoName']} -->\";\n            $video = Video::getVideoFromCleanTitle($_GET['videoName']);\n        }\n    } else {\n        echo \"<!-- ld+json videos_id {$videos_id} -->\";\n        $video = Video::getVideoLight($videos_id);\n    }\n    if (empty($video)) {\n        echo \"<!-- ld+json no video -->\";\n        return false;\n    }\n    $videos_id = $video['id'];\n\n    $img = Video::getPoster($videos_id);\n\n    $description = html2plainText(empty(trim($video['description'])) ? $video['title'] : $video['description']);\n    $duration = Video::getItemPropDuration($video['duration']);\n    if ($duration == \"PT0H0M0S\") {\n        $duration = \"PT0H0M1S\";\n    }\n    $output = '\n    <script type=\"application/ld+json\" id=\"application_ld_json\">\n        {\n        \"@context\": \"http://schema.org/\",\n        \"@type\": \"VideoObject\",\n        \"name\": \"' . html2plainText($video['title']) . '\",\n        \"description\": \"' . $description . '\",\n        \"thumbnailUrl\": [\n        \"' . $img . '\"\n        ],\n        \"uploadDate\": \"' . date(\"Y-m-d\\Th:i:s\", strtotime($video['created'])) . '\",\n        \"duration\": \"' . $duration . '\",\n        \"contentUrl\": \"' . Video::getLinkToVideo($videos_id) . '\",\n        \"embedUrl\": \"' . parseVideos(Video::getLinkToVideo($videos_id)) . '\",\n        \"interactionCount\": \"' . $video['views_count'] . '\",\n        \"@id\": \"' . Video::getPermaLink($videos_id) . '\",\n        \"datePublished\": \"' . date(\"Y-m-d\", strtotime($video['created'])) . '\",\n        \"interactionStatistic\": [\n        {\n        \"@type\": \"InteractionCounter\",\n        \"interactionService\": {\n        \"@type\": \"WebSite\",\n        \"name\": \"' . str_replace('\"', '', $config->getWebSiteTitle()) . '\",\n        \"@id\": \"' . $global['webSiteRootURL'] . '\"\n        },\n        \"interactionType\": \"http://schema.org/LikeAction\",\n        \"userInteractionCount\": \"' . $video['views_count'] . '\"\n        },\n        {\n        \"@type\": \"InteractionCounter\",\n        \"interactionType\": \"http://schema.org/WatchAction\",\n        \"userInteractionCount\": \"' . $video['views_count'] . '\"\n        }\n        ]\n        }\n    </script>';\n    ObjectYPT::setCache(\"getLdJson{$videos_id}\", $output);\n    echo $output;\n}\n\nfunction getItemprop($videos_id) {\n    $cache = ObjectYPT::getCache(\"getItemprop{$videos_id}\", 0);\n    if (empty($cache)) {\n        echo $cache;\n    }\n    global $global, $config;\n    echo \"<!-- Itemprop -->\";\n    if (empty($videos_id)) {\n        echo \"<!-- Itemprop no video id -->\";\n        if (!empty($_GET['videoName'])) {\n            echo \"<!-- Itemprop videoName {$_GET['videoName']} -->\";\n            $video = Video::getVideoFromCleanTitle($_GET['videoName']);\n        }\n    } else {\n        echo \"<!-- Itemprop videos_id {$videos_id} -->\";\n        $video = Video::getVideoLight($videos_id);\n    }\n    if (empty($video)) {\n        echo \"<!-- Itemprop no video -->\";\n        return false;\n    }\n    $videos_id = $video['id'];\n    $img = Video::getPoster($videos_id);\n\n    $description = html2plainText(empty(trim($video['description'])) ? $video['title'] : $video['description']);\n    $duration = Video::getItemPropDuration($video['duration']);\n    if ($duration == \"PT0H0M0S\") {\n        $duration = \"PT0H0M1S\";\n    }\n    $output = '<span itemprop=\"name\" content=\"' . str_replace('\"', '', $video['title']) . '\" />\n    <span itemprop=\"description\" content=\"' . $description . '\" />\n    <span itemprop=\"thumbnailUrl\" content=\"' . $img . '\" />\n    <span itemprop=\"uploadDate\" content=\"' . date(\"Y-m-d\\Th:i:s\", strtotime($video['created'])) . '\" />\n    <span itemprop=\"duration\" content=\"' . $duration . '\" />\n    <span itemprop=\"contentUrl\" content=\"' . Video::getLinkToVideo($videos_id) . '\" />\n    <span itemprop=\"embedUrl\" content=\"' . parseVideos(Video::getLinkToVideo($videos_id)) . '\" />\n    <span itemprop=\"interactionCount\" content=\"' . $video['views_count'] . '\" />';\n\n    ObjectYPT::setCache(\"getItemprop{$videos_id}\", $output);\n    echo $output;\n}\n\nfunction getOS($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n\n    $os_platform = \"Unknown OS Platform\";\n\n    $os_array = [\n        '/windows nt 10/i' => 'Windows 10',\n        '/windows nt 6.3/i' => 'Windows 8.1',\n        '/windows nt 6.2/i' => 'Windows 8',\n        '/windows nt 6.1/i' => 'Windows 7',\n        '/windows nt 6.0/i' => 'Windows Vista',\n        '/windows nt 5.2/i' => 'Windows Server 2003/XP x64',\n        '/windows nt 5.1/i' => 'Windows XP',\n        '/windows xp/i' => 'Windows XP',\n        '/windows nt 5.0/i' => 'Windows 2000',\n        '/windows me/i' => 'Windows ME',\n        '/win98/i' => 'Windows 98',\n        '/win95/i' => 'Windows 95',\n        '/win16/i' => 'Windows 3.11',\n        '/macintosh|mac os x/i' => 'Mac OS X',\n        '/mac_powerpc/i' => 'Mac OS 9',\n        '/linux/i' => 'Linux',\n        '/ubuntu/i' => 'Ubuntu',\n        '/iphone/i' => 'iPhone',\n        '/ipod/i' => 'iPod',\n        '/ipad/i' => 'iPad',\n        '/android/i' => 'Android',\n        '/blackberry/i' => 'BlackBerry',\n        '/webos/i' => 'Mobile',\n    ];\n\n    foreach ($os_array as $regex => $value) {\n        if (preg_match($regex, $user_agent)) {\n            $os_platform = $value;\n        }\n    }\n\n    return $os_platform;\n}\n\nfunction get_browser_name($user_agent = \"\") {\n    if (empty($user_agent)) {\n        $user_agent = @$_SERVER['HTTP_USER_AGENT'];\n    }\n    if (empty($user_agent)) {\n        return 'Unknow';\n    }\n    // Make case insensitive.\n    $t = strtolower($user_agent);\n\n    // If the string *starts* with the string, strpos returns 0 (i.e., FALSE). Do a ghetto hack and start with a space.\n    // \"[strpos()] may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE.\"\n    //     http://php.net/manual/en/function.strpos.php\n    $t = \" \" . $t;\n\n    // Humans / Regular Users\n    if (isAVideoStreamer($t)) {\n        return 'AVideo Mobile App';\n    } elseif ($url = isAVideoEncoder($t)) {\n        return 'AVideo Encoder ' . $url;\n    } elseif ($url = isAVideoStreamer($t)) {\n        return 'AVideo Streamer ' . $url;\n    } elseif (strpos($t, 'crkey')) {\n        return 'Chromecast';\n    } elseif (strpos($t, 'opera') || strpos($t, 'opr/')) {\n        return 'Opera';\n    } elseif (strpos($t, 'edge')) {\n        return 'Edge';\n    } elseif (strpos($t, 'chrome')) {\n        return 'Chrome';\n    } elseif (strpos($t, 'safari')) {\n        return 'Safari';\n    } elseif (strpos($t, 'firefox')) {\n        return 'Firefox';\n    } elseif (strpos($t, 'msie') || strpos($t, 'trident/7')) {\n        return 'Internet Explorer';\n    } elseif (strpos($t, 'applecoremedia')) {\n        return 'Native Apple Player';\n    }\n\n    // Search Engines\n    elseif (strpos($t, 'google')) {\n        return '[Bot] Googlebot';\n    } elseif (strpos($t, 'bing')) {\n        return '[Bot] Bingbot';\n    } elseif (strpos($t, 'slurp')) {\n        return '[Bot] Yahoo! Slurp';\n    } elseif (strpos($t, 'duckduckgo')) {\n        return '[Bot] DuckDuckBot';\n    } elseif (strpos($t, 'baidu')) {\n        return '[Bot] Baidu';\n    } elseif (strpos($t, 'yandex')) {\n        return '[Bot] Yandex';\n    } elseif (strpos($t, 'sogou')) {\n        return '[Bot] Sogou';\n    } elseif (strpos($t, 'exabot')) {\n        return '[Bot] Exabot';\n    } elseif (strpos($t, 'msn')) {\n        return '[Bot] MSN';\n    }\n\n    // Common Tools and Bots\n    elseif (strpos($t, 'mj12bot')) {\n        return '[Bot] Majestic';\n    } elseif (strpos($t, 'ahrefs')) {\n        return '[Bot] Ahrefs';\n    } elseif (strpos($t, 'semrush')) {\n        return '[Bot] SEMRush';\n    } elseif (strpos($t, 'rogerbot') || strpos($t, 'dotbot')) {\n        return '[Bot] Moz or OpenSiteExplorer';\n    } elseif (strpos($t, 'frog') || strpos($t, 'screaming')) {\n        return '[Bot] Screaming Frog';\n    }\n\n    // Miscellaneous\n    elseif (strpos($t, 'facebook')) {\n        return '[Bot] Facebook';\n    } elseif (strpos($t, 'pinterest')) {\n        return '[Bot] Pinterest';\n    }\n\n    // Check for strings commonly used in bot user agents\n    elseif (strpos($t, 'crawler') || strpos($t, 'api') ||\n            strpos($t, 'spider') || strpos($t, 'http') ||\n            strpos($t, 'bot') || strpos($t, 'archive') ||\n            strpos($t, 'info') || strpos($t, 'data')) {\n        return '[Bot] Other';\n    }\n    //_error_log(\"Unknow user agent ($t) IP=\" . getRealIpAddr() . \" URI=\" . getRequestURI());\n    return 'Other (Unknown)';\n}\n\n/**\n * Due some error on old chrome browsers (version < 70) on decrypt HLS keys with the videojs versions greater then 7.9.7\n * we need to detect the chrome browser and load an older version\n *\n */\nfunction isOldChromeVersion() {\n    $global;\n    if (empty($_SERVER['HTTP_USER_AGENT'])) {\n        return false;\n    }\n    if (!empty($global['forceOldChrome'])) {\n        return true;\n    }\n    if (preg_match('/Chrome\\/([0-9.]+)/i', $_SERVER['HTTP_USER_AGENT'], $matches)) {\n        return version_compare($matches[1], '80', '<=');\n    }\n    return false;\n}\n\nfunction TimeLogStart($name) {\n    global $global;\n    if (!empty($global['noDebug'])) {\n        return false;\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    if (empty($global['start']) || !is_array($global['start'])) {\n        $global['start'] = [];\n    }\n    $global['start'][$name] = $time;\n    return $name;\n}\n\nfunction TimeLogEnd($name, $line, $TimeLogLimit = 0.7) {\n    global $global;\n    if (!empty($global['noDebug']) || empty($global['start'][$name])) {\n        return false;\n    }\n    if (!empty($global['TimeLogLimit'])) {\n        $TimeLogLimit = $global['TimeLogLimit'];\n    }\n    $time = microtime();\n    $time = explode(' ', $time);\n    $time = $time[1] + $time[0];\n    $finish = $time;\n    $total_time = round(($finish - $global['start'][$name]), 4);\n    if (empty($global['noDebugSlowProcess']) && $total_time > $TimeLogLimit) {\n        _error_log(\"Warning: Slow process detected [{$name}] On  Line {$line} takes {$total_time} seconds to complete, Limit ({$TimeLogLimit}). {$_SERVER[\"SCRIPT_FILENAME\"]}\");\n    }\n    TimeLogStart($name);\n}\n\nclass AVideoLog {\n\n    public static $DEBUG = 0;\n    public static $WARNING = 1;\n    public static $ERROR = 2;\n    public static $SECURITY = 3;\n    public static $SOCKET = 4;\n\n}\n\nfunction _error_log_debug($message, $show_args = false) {\n    $array = debug_backtrace();\n    $message .= PHP_EOL;\n    foreach ($array as $value) {\n        $message .= \"function: {$value['function']} Line: {{$value['line']}} File: {{$value['file']}}\" . PHP_EOL;\n        if ($show_args) {\n            $message .= print_r($value['args'], true) . PHP_EOL;\n        }\n    }\n    _error_log(PHP_EOL . '***' . PHP_EOL . $message . '***');\n}\n\nfunction _error_log($message, $type = 0, $doNotRepeat = false) {\n    if (empty($doNotRepeat)) {\n        // do not log it too many times when you are using HLS format, other wise it will fill the log file with the same error\n        $doNotRepeat = preg_match(\"/hls.php$/\", $_SERVER['SCRIPT_NAME']);\n    }\n    if ($doNotRepeat) {\n        return false;\n    }\n    global $global;\n    if (!empty($global['noDebug']) && $type == 0) {\n        return false;\n    }\n    if (!is_string($message)) {\n        $message = json_encode($message);\n    }\n    $prefix = \"AVideoLog::\";\n    switch ($type) {\n        case AVideoLog::$DEBUG:\n            $prefix .= \"DEBUG: \";\n            break;\n        case AVideoLog::$WARNING:\n            $prefix .= \"WARNING: \";\n            break;\n        case AVideoLog::$ERROR:\n            $prefix .= \"ERROR: \";\n            break;\n        case AVideoLog::$SECURITY:\n            $prefix .= \"SECURITY: \";\n            break;\n        case AVideoLog::$SOCKET:\n            $prefix .= \"SOCKET: \";\n            break;\n    }\n    $str = $prefix . $message . \" SCRIPT_NAME: {$_SERVER['SCRIPT_NAME']}\";\n    if (isCommandLineInterface()) {\n        echo '[' . date('Y-m-d H:i:s') . '] ' . $str . PHP_EOL;\n    }\n    error_log($str);\n}\n\nfunction postVariables($url, $array, $httpcodeOnly = true, $timeout = 10) {\n    if (!$url || !is_string($url) || !preg_match('/^http(s)?:\\/\\/[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(\\/.*)?$/i', $url)) {\n        return false;\n    }\n    $array = object_to_array($array);\n    $ch = curl_init($url);\n    if ($httpcodeOnly) {\n        @curl_setopt($ch, CURLOPT_HEADER, true);  // we want headers\n        @curl_setopt($ch, CURLOPT_NOBODY, true);  // we don't need body\n    } else {\n        curl_setopt($curl, CURLOPT_USERAGENT, getSelfUserAgent());\n    }\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); //The number of seconds to wait while trying to connect. Use 0 to wait indefinitely.\n    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout + 1); //The maximum number of seconds to allow cURL functions to execute.\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $array);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n\n    // execute!\n    $response = curl_exec($ch);\n    if ($httpcodeOnly) {\n        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n        // close the connection, release resources used\n        curl_close($ch);\n        if ($httpcode == 200) {\n            return true;\n        }\n        return $httpcode;\n    } else {\n        curl_close($ch);\n        return $response;\n    }\n}\n\nfunction _session_start(array $options = []) {\n    try {\n        if (!empty($_GET['PHPSESSID'])) {\n            if ($_GET['PHPSESSID'] !== session_id()) {\n                if (session_status() !== PHP_SESSION_NONE) {\n                    @session_write_close();\n                }\n                session_id($_GET['PHPSESSID']);\n                //_error_log(\"captcha: session_id changed to \" . $_GET['PHPSESSID']);\n            }\n            unset($_GET['PHPSESSID']);\n            return @session_start($options);\n        } elseif (session_status() == PHP_SESSION_NONE) {\n            return @session_start($options);\n        }\n    } catch (Exception $exc) {\n        _error_log(\"_session_start: \" . $exc->getTraceAsString());\n        return false;\n    }\n}\n\nfunction _mysql_connect() {\n    global $global, $mysqlHost, $mysqlUser, $mysqlPass, $mysqlDatabase, $mysqlPort, $mysql_connect_was_closed;\n    try {\n        if (!_mysql_is_open()) {\n            //_error_log('MySQL Connect '. json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n            $mysql_connect_was_closed = 0;\n            $global['mysqli'] = new mysqli($mysqlHost, $mysqlUser, $mysqlPass, $mysqlDatabase, @$mysqlPort);\n            if (!empty($global['mysqli_charset'])) {\n                $global['mysqli']->set_charset($global['mysqli_charset']);\n            }\n        }\n    } catch (Exception $exc) {\n        _error_log($exc->getTraceAsString());\n        return false;\n    }\n}\n\nfunction _mysql_close() {\n    global $global, $mysql_connect_was_closed;\n    if (_mysql_is_open()) {\n        //_error_log('MySQL Closed '. json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n        $mysql_connect_was_closed = 1;\n        @$global['mysqli']->close();\n        $global['mysqli'] = false;\n    }\n}\n\nfunction _mysql_is_open() {\n    global $global, $mysql_connect_was_closed;\n    try {\n        //if (is_object($global['mysqli']) && (empty($mysql_connect_was_closed) || !empty(@$global['mysqli']->ping()))) {\n        if (!empty($global['mysqli']) && is_object($global['mysqli']) && empty($mysql_connect_was_closed)) {\n            return true;\n        }\n    } catch (Exception $exc) {\n        return false;\n    }\n    return false;\n}\n\nfunction remove_utf8_bom($text) {\n    if (strlen($text) > 1000000) {\n        return $text;\n    }\n\n    $bom = pack('H*', 'EFBBBF');\n    $text = preg_replace(\"/^$bom/\", '', $text);\n    return $text;\n}\n\nfunction getCacheDir() {\n    $p = AVideoPlugin::loadPlugin(\"Cache\");\n    return $p->getCacheDir();\n}\n\nfunction clearCache($firstPageOnly = false) {\n    global $global;\n    $lockFile = getVideosDir() . '.clearCache.lock';\n    if (file_exists($lockFile) && filectime($lockFile) > strtotime('-5 minutes')) {\n        _error_log('clearCache is in progress ' . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n        return false;\n    }\n    $start = microtime(true);\n    _error_log('clearCache starts ');\n    file_put_contents($lockFile, time());\n\n    $dir = getVideosDir() . \"cache\" . DIRECTORY_SEPARATOR;\n    $tmpDir = ObjectYPT::getCacheDir('firstPage');\n    $parts = explode('firstpage', $tmpDir);\n\n    if ($firstPageOnly || !empty($_REQUEST['FirstPage'])) {\n        $tmpDir = $parts[0] . 'firstpage' . DIRECTORY_SEPARATOR;\n        //var_dump($tmpDir);exit;\n        $dir .= \"firstPage\" . DIRECTORY_SEPARATOR;\n    } else {\n        $tmpDir = $parts[0];\n    }\n\n    //_error_log('clearCache 1: '.$dir);\n    rrmdir($dir);\n    rrmdir($tmpDir);\n    ObjectYPT::deleteCache(\"getEncoderURL\");\n    ObjectYPT::deleteAllSessionCache();\n    unlink($lockFile);\n    $end = microtime(true) - $start;\n    _error_log(\"clearCache end in {$end} seconds\");\n    return true;\n}\n\nfunction clearAllUsersSessionCache() {\n    sendSocketMessageToAll(time(), 'socketClearSessionCache');\n}\n\nfunction clearFirstPageCache() {\n    return clearCache(true);\n}\n\nfunction getUsageFromFilename($filename, $dir = \"\") {\n    global $global;\n\n    if (!empty($global['getUsageFromFilename'])) { // manually add this variable in your configuration.php file to not scan your video usage\n        return 0;\n    }\n\n    if (empty($dir)) {\n        $paths = Video::getPaths($filename);\n        $dir = $paths['path'];\n    }\n    $dir = addLastSlash($dir);\n    $totalSize = 0;\n    _error_log(\"getUsageFromFilename: start {$dir}{$filename} \" . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n    //$files = glob(\"{$dir}{$filename}*\");\n    $paths = Video::getPaths($filename);\n\n    if (is_dir($paths['path'])) {\n        $files = [$paths['path']];\n    } else {\n        $files = globVideosDir($filename);\n    }\n    //var_dump($paths, $files, $filename);exit;\n    session_write_close();\n    $filesProcessed = [];\n    if (empty($files)) {\n        _error_log(\"getUsageFromFilename: we did not find any file for {$dir}{$filename}, we will create a fake one \" . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n        make_path($dir);\n        file_put_contents(\"{$dir}{$filename}.notfound\", time());\n        $totalSize = 10;\n    } else {\n        foreach ($files as $f) {\n            if (strpos($f, '.size.lock') !== false) {\n                continue;\n            }\n            if (is_dir($f)) {\n                $dirSize = getDirSize($f, true);\n                _error_log(\"getUsageFromFilename: is Dir dirSize={$dirSize} \" . humanFileSize($dirSize) . \" {$f}\");\n                $totalSize += $dirSize;\n                $minDirSize = 4000000;\n                $isEnabled = AVideoPlugin::isEnabledByName('YPTStorage');\n                $isEnabledCDN = AVideoPlugin::getObjectDataIfEnabled('CDN');\n                $isEnabledS3 = AVideoPlugin::loadPluginIfEnabled('AWS_S3');\n                if (!empty($isEnabledCDN) && $isEnabledCDN->enable_storage) {\n                    $v = Video::getVideoFromFileName($filename);\n                    if (!empty($v)) {\n                        $size = CDNStorage::getRemoteDirectorySize($v['id']);\n                        _error_log(\"getUsageFromFilename: CDNStorage found $size \" . humanFileSize($size));\n                        $totalSize += $size;\n                    }\n                }\n                if ($dirSize < $minDirSize && $isEnabled) {\n                    // probably the HLS file is hosted on the YPTStorage\n                    $info = YPTStorage::getFileInfo($filename);\n                    if (!empty($info->size)) {\n                        _error_log(\"getUsageFromFilename: found info on the YPTStorage \" . print_r($info, true));\n                        $totalSize += $info->size;\n                    } else {\n                        _error_log(\"getUsageFromFilename: there is no info on the YPTStorage \" . print_r($info, true));\n                    }\n                } elseif ($dirSize < $minDirSize && $isEnabledS3) {\n                    // probably the HLS file is hosted on the S3\n                    $size = $isEnabledS3->getFilesize($filename);\n                    if (!empty($size)) {\n                        _error_log(\"getUsageFromFilename: found info on the AWS_S3 {$filename} {$size}\");\n                        $totalSize += $size;\n                    } else {\n                        _error_log(\"getUsageFromFilename: there is no info on the AWS_S3  {$filename} {$size}\");\n                    }\n                } else {\n                    if (!($dirSize < $minDirSize)) {\n                        _error_log(\"getUsageFromFilename: does not have the size to process $dirSize < $minDirSize\");\n                    }\n                    if (!$isEnabled) {\n                        _error_log(\"getUsageFromFilename: YPTStorage is disabled\");\n                    }\n                    if (!$isEnabledCDN) {\n                        _error_log(\"getUsageFromFilename: CDN Storage is disabled\");\n                    }\n                    if (!$isEnabledS3) {\n                        _error_log(\"getUsageFromFilename: S3 Storage is disabled\");\n                    }\n                }\n            } elseif (is_file($f)) {\n                $filesize = filesize($f);\n                if ($filesize < 20) { // that means it is a dummy file\n                    $lockFile = $f . \".size.lock\";\n                    if (!file_exists($lockFile) || (time() - 600) > filemtime($lockFile)) {\n                        file_put_contents($lockFile, time());\n                        _error_log(\"getUsageFromFilename: {$f} is Dummy file ({$filesize})\");\n                        $aws_s3 = AVideoPlugin::loadPluginIfEnabled('AWS_S3');\n                        //$bb_b2 = AVideoPlugin::loadPluginIfEnabled('Blackblaze_B2');\n                        if (!empty($aws_s3)) {\n                            _error_log(\"getUsageFromFilename: Get from S3\");\n                            $filesize += $aws_s3->getFilesize($filename);\n                        } elseif (!empty($bb_b2)) {\n                            // TODO\n                        } else {\n                            $urls = Video::getVideosPaths($filename, true);\n                            _error_log(\"getUsageFromFilename: Paths \" . json_encode($urls));\n                            if (!empty($urls[\"m3u8\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"m3u8\"]['url']);\n                            }\n                            if (!empty($urls['mp4'])) {\n                                foreach ($urls['mp4'] as $mp4) {\n                                    if (in_array($mp4, $filesProcessed)) {\n                                        continue;\n                                    }\n                                    $filesProcessed[] = $mp4;\n                                    $filesize += getUsageFromURL($mp4);\n                                }\n                            }\n                            if (!empty($urls['webm'])) {\n                                foreach ($urls['webm'] as $mp4) {\n                                    if (in_array($mp4, $filesProcessed)) {\n                                        continue;\n                                    }\n                                    $filesProcessed[] = $mp4;\n                                    $filesize += getUsageFromURL($mp4);\n                                }\n                            }\n                            if (!empty($urls[\"pdf\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"pdf\"]['url']);\n                            }\n                            if (!empty($urls[\"image\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"image\"]['url']);\n                            }\n                            if (!empty($urls[\"zip\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"zip\"]['url']);\n                            }\n                            if (!empty($urls[\"mp3\"]['url'])) {\n                                $filesize += getUsageFromURL($urls[\"mp3\"]['url']);\n                            }\n                        }\n                        unlink($lockFile);\n                    }\n                } else {\n                    _error_log(\"getUsageFromFilename: {$f} is File ({$filesize})\");\n                }\n                $totalSize += $filesize;\n            }\n        }\n    }\n    return $totalSize;\n}\n\n/**\n * Returns the size of a file without downloading it, or -1 if the file\n * size could not be determined.\n *\n * @param $url - The location of the remote file to download. Cannot\n * be null or empty.\n *\n * @return The size of the file referenced by $url, or false if the size\n * could not be determined.\n */\nfunction getUsageFromURL($url) {\n    global $global;\n\n    if (!empty($global['doNotGetUsageFromURL'])) { // manually add this variable in your configuration.php file to not scan your video usage\n        return 0;\n    }\n\n    _error_log(\"getUsageFromURL: start ({$url})\");\n    // Assume failure.\n    $result = false;\n\n    $curl = curl_init($url);\n\n    _error_log(\"getUsageFromURL: curl_init \");\n\n    try {\n        // Issue a HEAD request and follow any redirects.\n        curl_setopt($curl, CURLOPT_NOBODY, true);\n        curl_setopt($curl, CURLOPT_HEADER, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\n        //curl_setopt($curl, CURLOPT_USERAGENT, get_user_agent_string());\n        $data = curl_exec($curl);\n    } catch (Exception $exc) {\n        echo $exc->getTraceAsString();\n        _error_log(\"getUsageFromURL: ERROR \" . $exc->getMessage());\n        _error_log(\"getUsageFromURL: ERROR \" . curl_errno($curl));\n        _error_log(\"getUsageFromURL: ERROR \" . curl_error($curl));\n    }\n\n    if ($data) {\n        _error_log(\"getUsageFromURL: response header \" . $data);\n        $content_length = \"unknown\";\n        $status = \"unknown\";\n\n        if (preg_match(\"/^HTTP\\/1\\.[01] (\\d\\d\\d)/\", $data, $matches)) {\n            $status = (int) $matches[1];\n        }\n\n        if (preg_match(\"/Content-Length: (\\d+)/\", $data, $matches)) {\n            $content_length = (int) $matches[1];\n        }\n\n        // http://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n        if ($status == 200 || ($status > 300 && $status <= 308)) {\n            $result = $content_length;\n        }\n    } else {\n        _error_log(\"getUsageFromURL: ERROR no response data \" . curl_error($curl));\n    }\n\n    curl_close($curl);\n    return (int) $result;\n}\n\nfunction getDirSize($dir, $forceNew = false) {\n    global $_getDirSize;\n\n    if (!isset($_getDirSize)) {\n        $_getDirSize = [];\n    }\n    if (empty($forceNew) && isset($_getDirSize[$dir])) {\n        return $_getDirSize[$dir];\n    }\n\n    _error_log(\"getDirSize: start {$dir}\");\n\n    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        $return = foldersize($dir);\n        $_getDirSize[$dir] = $return;\n        return $return;\n    } else {\n        $command = \"du -sb {$dir}\";\n        exec($command . \" < /dev/null 2>&1\", $output, $return_val);\n        if ($return_val !== 0) {\n            _error_log(\"getDirSize: ERROR ON Command {$command}\");\n            $return = 0;\n            $_getDirSize[$dir] = $return;\n            return $return;\n        } else {\n            if (!empty($output[0])) {\n                preg_match(\"/^([0-9]+).*/\", $output[0], $matches);\n            }\n            if (!empty($matches[1])) {\n                _error_log(\"getDirSize: found {$matches[1]} from - {$output[0]}\");\n                $return = intval($matches[1]);\n                $_getDirSize[$dir] = $return;\n                return $return;\n            }\n\n            _error_log(\"getDirSize: ERROR on pregmatch {$output[0]}\");\n            $return = 0;\n            $_getDirSize[$dir] = $return;\n            return $return;\n        }\n    }\n}\n\nfunction foldersize($path) {\n    $total_size = 0;\n    $files = scandir($path);\n    $cleanPath = rtrim($path, '/') . '/';\n\n    foreach ($files as $t) {\n        if ($t <> \".\" && $t <> \"..\") {\n            $currentFile = $cleanPath . $t;\n            if (is_dir($currentFile)) {\n                $size = foldersize($currentFile);\n                $total_size += $size;\n            } else {\n                $size = filesize($currentFile);\n                $total_size += $size;\n            }\n        }\n    }\n\n    return $total_size;\n}\n\nfunction getDiskUsage() {\n    global $global;\n    $dir = getVideosDir() . \"\";\n    $obj = new stdClass();\n    $obj->disk_free_space = disk_free_space($dir);\n    $obj->disk_total_space = disk_total_space($dir);\n    $obj->videos_dir = getDirSize($dir);\n    $obj->disk_used = $obj->disk_total_space - $obj->disk_free_space;\n    $obj->disk_used_by_other = $obj->disk_used - $obj->videos_dir;\n    $obj->disk_free_space_human = humanFileSize($obj->disk_free_space);\n    $obj->disk_total_space_human = humanFileSize($obj->disk_total_space);\n    $obj->videos_dir_human = humanFileSize($obj->videos_dir);\n    $obj->disk_used_human = humanFileSize($obj->disk_used);\n    $obj->disk_used_by_other_human = humanFileSize($obj->disk_used_by_other);\n    // percentage of disk used\n    $obj->disk_used_percentage = sprintf('%.2f', ($obj->disk_used / $obj->disk_total_space) * 100);\n    $obj->videos_dir_used_percentage = sprintf('%.2f', ($obj->videos_dir / $obj->disk_total_space) * 100);\n    $obj->disk_free_space_percentage = sprintf('%.2f', ($obj->disk_free_space / $obj->disk_total_space) * 100);\n\n    return $obj;\n}\n\nfunction unsetSearch() {\n    unset($_GET['searchPhrase'], $_POST['searchPhrase'], $_GET['search'], $_GET['q']);\n}\n\nfunction encrypt_decrypt($string, $action) {\n    global $global;\n    $output = false;\n\n    $encrypt_method = \"AES-256-CBC\";\n    $secret_key = 'This is my secret key';\n    $secret_iv = $global['systemRootPath'];\n    while (strlen($secret_iv) < 16) {\n        $secret_iv .= $global['systemRootPath'];\n    }\n    if (empty($secret_iv)) {\n        $secret_iv = '1234567890abcdef';\n    }\n    // hash\n    $key = hash('sha256', $global['salt']);\n\n    // iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning\n    $iv = substr(hash('sha256', $secret_iv), 0, 16);\n\n    if ($action == 'encrypt') {\n        $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);\n        $output = base64_encode($output);\n    } elseif ($action == 'decrypt') {\n        $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);\n    }\n\n    return $output;\n}\n\nfunction compressString($string) {\n    if (function_exists(\"gzdeflate\")) {\n        $string = gzdeflate($string, 9);\n    }\n    return $string;\n}\n\nfunction decompressString($string) {\n    if (function_exists(\"gzinflate\")) {\n        $string = gzinflate($string);\n    }\n    return $string;\n}\n\nfunction encryptString($string) {\n    if (is_object($string)) {\n        $string = json_encode($string);\n    }\n    return encrypt_decrypt($string, 'encrypt');\n}\n\nfunction decryptString($string) {\n    return encrypt_decrypt($string, 'decrypt');\n}\n\nfunction getToken($timeout = 0, $salt = \"\") {\n    global $global;\n    $obj = new stdClass();\n    $obj->salt = $global['salt'] . $salt;\n    $obj->timezone = date_default_timezone_get();\n\n    if (!empty($timeout)) {\n        $obj->time = time();\n        $obj->timeout = $obj->time + $timeout;\n    } else {\n        $obj->time = strtotime(\"Today 00:00:00\");\n        $obj->timeout = strtotime(\"Today 23:59:59\");\n        $obj->timeout += cacheExpirationTime();\n    }\n    $strObj = json_encode($obj);\n    //_error_log(\"Token created: {$strObj}\");\n\n    return encryptString($strObj);\n}\n\nfunction isTokenValid($token, $salt = \"\") {\n    return verifyToken($token, $salt);\n}\n\nfunction verifyToken($token, $salt = \"\") {\n    global $global;\n    $obj = _json_decode(decryptString($token));\n    if (empty($obj)) {\n        _error_log(\"verifyToken invalid token\");\n        return false;\n    }\n    if ($obj->salt !== $global['salt'] . $salt) {\n        _error_log(\"verifyToken salt fail\");\n        return false;\n    }\n    $old_timezone = date_default_timezone_get();\n    date_default_timezone_set($obj->timezone);\n    $time = time();\n    date_default_timezone_set($old_timezone);\n    if (!($time >= $obj->time && $time <= $obj->timeout)) {\n        _error_log(\"verifyToken token timout time = $time; obj->time = $obj->time;  obj->timeout = $obj->timeout\");\n        return false;\n    }\n    return true;\n}\n\nclass YPTvideoObject {\n\n    public $id;\n    public $title;\n    public $description;\n    public $thumbnails;\n    public $channelTitle;\n    public $videoLink;\n\n    public function __construct($id, $title, $description, $thumbnails, $channelTitle, $videoLink) {\n        $this->id = $id;\n        $this->title = $title;\n        $this->description = $description;\n        $this->thumbnails = $thumbnails;\n        $this->channelTitle = $channelTitle;\n        $this->videoLink = $videoLink;\n    }\n\n}\n\nfunction isToShowDuration($type) {\n    $notShowTo = ['pdf', 'article', 'serie', 'zip', 'image', 'live', 'livelinks'];\n    if (in_array($type, $notShowTo)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfunction _dieAndLogObject($obj, $prefix = \"\") {\n    $objString = json_encode($obj);\n    _error_log($prefix . $objString);\n    die($objString);\n}\n\nfunction isAVideoPlayer() {\n    if (isVideo() || isSerie()) {\n        return true;\n    }\n    return false;\n}\n\nfunction isFirstPage() {\n    global $isFirstPage, $global;\n    return !empty($isFirstPage) || getSelfURI() === \"{$global['webSiteRootURL']}view/\";\n}\n\nfunction isVideo() {\n    global $isModeYouTube, $global;\n    if (!empty($global['doNotLoadPlayer'])) {\n        return false;\n    }\n    return !empty($isModeYouTube) || isPlayList() || isEmbed() || isLive();\n}\n\nfunction isVideoTypeEmbed() {\n    global $isVideoTypeEmbed;\n\n    if (isVideo() && !empty($isVideoTypeEmbed) && $videos_id = getVideos_id()) {\n        return $videos_id;\n    }\n\n    return false;\n}\n\nfunction isAudio() {\n    global $isAudio;\n    return !empty($isAudio);\n}\n\nfunction isSerie() {\n    return isPlayList();\n}\n\nfunction isPlayList() {\n    global $isPlayList, $isSerie;\n    return !empty($isSerie) || !empty($isPlayList);\n}\n\nfunction isChannel() {\n    global $isChannel;\n    if (!empty($isChannel) && !isVideo()) {\n        $user_id = 0;\n        if (empty($_GET['channelName'])) {\n            if (User::isLogged()) {\n                $user_id = User::getId();\n            } else {\n                return false;\n            }\n        } else {\n            $_GET['channelName'] = xss_esc($_GET['channelName']);\n            $user = User::getChannelOwner($_GET['channelName']);\n            if (!empty($user)) {\n                $user_id = $user['id'];\n            } else {\n                $user_id = $_GET['channelName'];\n            }\n        }\n        return $user_id;\n    }\n    return false;\n}\n\nfunction isEmbed() {\n    global $isEmbed, $global;\n    if (!empty($global['doNotLoadPlayer'])) {\n        return false;\n    }\n    return !empty($isEmbed);\n}\n\nfunction isWebRTC() {\n    global $isWebRTC, $global;\n    if (!empty($global['doNotLoadPlayer'])) {\n        return false;\n    }\n    return !empty($isWebRTC);\n}\n\nfunction isLive() {\n    global $isLive, $global;\n    if (!empty($global['doNotLoadPlayer'])) {\n        return false;\n    }\n    if (class_exists('LiveTransmition') && class_exists('Live')) {\n        $livet = LiveTransmition::getFromRequest();\n        if (!empty($livet)) {\n            setLiveKey($livet['key'], Live::getLiveServersIdRequest(), @$_REQUEST['live_index']);\n            $isLive = 1;\n        }\n    }\n    if (!empty($isLive)) {\n        $live = getLiveKey();\n        if (empty($live)) {\n            $live = ['key' => false, 'live_servers_id' => false, 'live_index' => false];\n        }\n        $live['liveLink'] = isLiveLink();\n        return $live;\n    } else {\n        return false;\n    }\n}\n\nfunction isLiveLink() {\n    global $isLiveLink;\n    if (!empty($isLiveLink)) {\n        return $isLiveLink;\n    } else {\n        return false;\n    }\n}\n\nfunction getLiveKey() {\n    global $getLiveKey;\n    if (empty($getLiveKey)) {\n        return false;\n    }\n    return $getLiveKey;\n}\n\nfunction setLiveKey($key, $live_servers_id, $live_index = '') {\n    global $getLiveKey;\n    $parameters = Live::getLiveParametersFromKey($key);\n    $key = $parameters['key'];\n    $cleanKey = $parameters['cleanKey'];\n    if (empty($live_index)) {\n        $live_index = $parameters['live_index'];\n    }\n    $key = Live::getLiveKeyFromRequest($key, $live_index, $parameters['playlists_id_live']);\n\n    $getLiveKey = ['key' => $key, 'live_servers_id' => intval($live_servers_id), 'live_index' => $live_index, 'cleanKey' => $cleanKey];\n    return $getLiveKey;\n}\n\nfunction isVideoPlayerHasProgressBar() {\n    if (isWebRTC()) {\n        return false;\n    }\n    if (isLive()) {\n        $obj = AVideoPlugin::getObjectData('Live');\n        if (empty($obj->disableDVR)) {\n            return true;\n        }\n    } elseif (isAVideoPlayer()) {\n        return true;\n    }\n    return false;\n}\n\nfunction isHLS() {\n    global $video, $global;\n    if (isLive()) {\n        return true;\n    } elseif (!empty($video) && $video['type'] == 'video' && file_exists(Video::getPathToFile(\"{$video['filename']}/index.m3u8\"))) {\n        return true;\n    }\n    return false;\n}\n\nfunction getRedirectUri($returnThisIfRedirectUriIsNotSet = false) {\n    if (isValidURL(@$_GET['redirectUri'])) {\n        return $_GET['redirectUri'];\n    }\n    if (isValidURL(@$_SESSION['redirectUri'])) {\n        return $_SESSION['redirectUri'];\n    }\n    if (isValidURL(@$_REQUEST[\"redirectUri\"])) {\n        return $_REQUEST[\"redirectUri\"];\n    }\n    if (isValidURL(@$_SERVER[\"HTTP_REFERER\"])) {\n        return $_SERVER[\"HTTP_REFERER\"];\n    }\n    if (isValidURL($returnThisIfRedirectUriIsNotSet)) {\n        return $returnThisIfRedirectUriIsNotSet;\n    } else {\n        return getRequestURI();\n    }\n}\n\nfunction setRedirectUri($redirectUri) {\n    _session_start();\n    $_SESSION['redirectUri'] = $redirectUri;\n}\n\nfunction redirectIfRedirectUriIsSet() {\n    $redirectUri = false;\n    if (!empty($_GET['redirectUri'])) {\n        if (isSameDomainAsMyAVideo($_GET['redirectUri'])) {\n            $redirectUri = $_GET['redirectUri'];\n        }\n    }\n    if (!empty($_SESSION['redirectUri'])) {\n        if (isSameDomainAsMyAVideo($_SESSION['redirectUri'])) {\n            $redirectUri = $_SESSION['redirectUri'];\n        }\n        _session_start();\n        unset($_SESSION['redirectUri']);\n    }\n\n    if (!empty($redirectUri)) {\n        header(\"Location: {$_SESSION['redirectUri']}\");\n        exit;\n    }\n}\n\nfunction getRedirectToVideo($videos_id) {\n    $redirectUri = getRedirectUri();\n    $isEmbed = 0;\n    if (stripos($redirectUri, \"embed\") !== false) {\n        $isEmbed = 1;\n    }\n    $video = Video::getVideoLight($videos_id);\n    if (empty($video)) {\n        return false;\n    }\n    return Video::getLink($videos_id, $video['clean_title'], $isEmbed);\n}\n\nfunction getRequestURI() {\n    if (empty($_SERVER['REQUEST_URI'])) {\n        return \"\";\n    }\n    return (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\") . \"://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\";\n}\n\nfunction getSelfURI() {\n    if (empty($_SERVER['PHP_SELF']) || empty($_SERVER['HTTP_HOST'])) {\n        return \"\";\n    }\n    global $global;\n    $http = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? \"https\" : \"http\");\n    if (preg_match('/^https:/i', $global['webSiteRootURL'])) {\n        $http = 'https';\n    }\n\n    $queryStringWithoutError = preg_replace(\"/error=[^&]*/\", \"\", @$_SERVER['QUERY_STRING']);\n    $phpselfWithoutIndex = preg_replace(\"/index.php/\", \"\", @$_SERVER['PHP_SELF']);\n    $url = $http . \"://$_SERVER[HTTP_HOST]$phpselfWithoutIndex?$queryStringWithoutError\";\n    $url = rtrim($url, '?');\n    return $url;\n}\n\nfunction isSameVideoAsSelfURI($url) {\n    return URLsAreSameVideo($url, getSelfURI());\n}\n\nfunction URLsAreSameVideo($url1, $url2) {\n    $videos_id1 = getVideoIDFromURL($url1);\n    $videos_id2 = getVideoIDFromURL($url2);\n    if (empty($videos_id1) || empty($videos_id2)) {\n        return false;\n    }\n    return $videos_id1 === $videos_id2;\n}\n\nfunction getVideos_id() {\n    global $_getVideos_id;\n    $videos_id = false;\n    if (isset($_getVideos_id) && is_int($_getVideos_id)) {\n        return $_getVideos_id;\n    }\n    if (isVideo()) {\n        $videos_id = getVideoIDFromURL(getSelfURI());\n        if (empty($videos_id) && !empty($_REQUEST['videoName'])) {\n            $video = Video::getVideoFromCleanTitle($_REQUEST['videoName']);\n            if (!empty($video)) {\n                $videos_id = $video['id'];\n            }\n        }\n        setVideos_id($videos_id);\n    }\n    if (empty($videos_id) && !empty($_REQUEST['playlists_id'])) {\n        AVideoPlugin::loadPlugin('PlayLists');\n        $video = PlayLists::isPlayListASerie($_REQUEST['playlists_id']);\n        if (!empty($video)) {\n            $videos_id = $video['id'];\n        }\n    }\n\n    if (empty($videos_id) && !empty($_REQUEST['v'])) {\n        $videos_id = $_REQUEST['v'];\n    }\n\n    $videos_id = videosHashToID($videos_id);\n\n    return $videos_id;\n}\n\nfunction setVideos_id($videos_id) {\n    global $_getVideos_id;\n    $_getVideos_id = $videos_id;\n}\n\nfunction getPlaylists_id() {\n    global $_isPlayList;\n    if (!isset($_isPlayList)) {\n        $_isPlayList = false;\n        if (isPlayList()) {\n            $_isPlayList = intval(@$_GET['playlists_id']);\n            if (empty($_isPlayList)) {\n                $videos_id = getVideos_id();\n                if (empty($videos_id)) {\n                    $_isPlayList = false;\n                } else {\n                    $v = Video::getVideoLight($videos_id);\n                    if (empty($v) || empty($v['serie_playlists_id'])) {\n                        $_isPlayList = false;\n                    } else {\n                        $_isPlayList = $v['serie_playlists_id'];\n                    }\n                }\n            }\n        }\n    }\n    return $_isPlayList;\n}\n\nfunction isVideoOrAudioNotEmbed() {\n    if (!isVideo()) {\n        return false;\n    }\n    $videos_id = getVideos_id();\n    if (empty($videos_id)) {\n        return false;\n    }\n    $v = Video::getVideoLight($videos_id);\n    if (empty($v)) {\n        return false;\n    }\n    $types = ['audio', 'video'];\n    if (in_array($v['type'], $types)) {\n        return true;\n    }\n    return false;\n}\n\nfunction getVideoIDFromURL($url) {\n    if (preg_match(\"/v=([0-9]+)/\", $url, $matches)) {\n        return intval($matches[1]);\n    }\n    if (preg_match('/\\/(video|videoEmbed|v|vEmbed|article|articleEmbed)\\/([0-9]+)/', $url, $matches)) {\n        if (is_numeric($matches[1])) {\n            return intval($matches[1]);\n        } elseif (is_numeric($matches[2])) {\n            return intval($matches[2]);\n        }\n    }\n    if (AVideoPlugin::isEnabledByName('PlayLists')) {\n        if (preg_match('/player.php\\?playlists_id=([0-9]+)/', $url, $matches)) {\n            $serie_playlists_id = intval($matches[1]);\n            $video = PlayLists::isPlayListASerie($serie_playlists_id);\n            if ($video) {\n                return $video['id'];\n            }\n        }\n    }\n    if (preg_match(\"/v=(\\.[0-9a-zA-Z_-]+)/\", $url, $matches)) {\n        return hashToID($matches[1]);\n    }\n    if (preg_match('/\\/(video|videoEmbed|v|vEmbed|article|articleEmbed)\\/(\\.[0-9a-zA-Z_-]+)/', $url, $matches)) {\n        return hashToID($matches[2]);\n    }\n    return false;\n}\n\nfunction getBackURL() {\n    global $global;\n    $backURL = getRedirectUri();\n    if (empty($backURL)) {\n        $backURL = getRequestURI();\n    }\n    if (isSameVideoAsSelfURI($backURL)) {\n        $backURL = getHomeURL();\n    }\n    return $backURL;\n}\n\nfunction getHomeURL() {\n    global $global, $advancedCustomUser, $advancedCustom;\n    if (isValidURL($advancedCustomUser->afterLoginGoToURL)) {\n        return $advancedCustomUser->afterLoginGoToURL;\n    } elseif (isValidURL($advancedCustom->logoMenuBarURL) && isSameDomainAsMyAVideo($advancedCustom->logoMenuBarURL)) {\n        return $advancedCustom->logoMenuBarURL;\n    }\n    return $global['webSiteRootURL'];\n}\n\nfunction isValidURL($url) {\n    //var_dump(empty($url), !is_string($url), preg_match(\"/^http.*/\", $url), filter_var($url, FILTER_VALIDATE_URL));\n    if (empty($url) || !is_string($url)) {\n        return false;\n    }\n    if (preg_match(\"/^http.*/\", $url) && filter_var($url, FILTER_VALIDATE_URL)) {\n        return true;\n    }\n    return false;\n}\n\nfunction hasLastSlash($word) {\n    return substr($word, -1) === '/';\n}\n\nfunction addLastSlash($word) {\n    return $word . (hasLastSlash($word) ? \"\" : \"/\");\n}\n\nfunction URLHasLastSlash() {\n    return hasLastSlash($_SERVER[\"REQUEST_URI\"]);\n}\n\nfunction ucname($str) {\n    $str = ucwords(strtolower($str));\n\n    foreach (['\\'', '-'] as $delim) {\n        if (strpos($str, $delim) !== false) {\n            $str = implode($delim, array_map('ucfirst', explode($delim, $str)));\n        }\n    }\n    return $str;\n}\n\nfunction sanitize_input($input) {\n    return htmlentities(strip_tags($input));\n}\n\nfunction sanitize_array_item(&$item, $key) {\n    $item = sanitize_input($item);\n}\n\nfunction getSEOComplement($parameters = []) {\n    global $config;\n\n    $allowedTypes = $parameters[\"allowedTypes\"] ?? null;\n    $addAutoPrefix = $parameters[\"addAutoPrefix\"] ?? true;\n    $addCategory = $parameters[\"addCategory\"] ?? true;\n\n    $parts = [];\n\n    if (!empty($_GET['error'])) {\n        array_push($parts, __(\"Error\"));\n    }\n\n    if ($addCategory && !empty($_GET['catName'])) {\n        array_push($parts, $_GET['catName']);\n    }\n\n    if (!empty($_GET['channelName'])) {\n        array_push($parts, $_GET['channelName']);\n    }\n\n    if (!empty($_GET['type'])) {\n        $type = $_GET['type'];\n        if (empty($allowedTypes) || in_array(strtolower($type), $allowedTypes)) {\n            array_push($parts, __(ucname($type)));\n        }\n    }\n\n    if (!empty($_GET['showOnly'])) {\n        array_push($parts, $_GET['showOnly']);\n    }\n\n    if (!empty($_GET['page'])) {\n        $page = intval($_GET['page']);\n        if ($page > 1) {\n            array_push($parts, sprintf(__(\"Page %d\"), $page));\n        }\n    }\n\n    // Cleaning all entries in the $parts array\n    array_walk($parts, 'sanitize_array_item');\n\n    $txt = implode($config->getPageTitleSeparator(), $parts);\n    $txt = (!empty($txt) && $addAutoPrefix ? $config->getPageTitleSeparator() : \"\") . $txt;\n\n    return $txt;\n}\n\nfunction getCurrentPage() {\n    if (!empty($_REQUEST['current'])) {\n        return intval($_REQUEST['current']);\n    } elseif (!empty($_POST['current'])) {\n        return intval($_POST['current']);\n    } elseif (!empty($_GET['current'])) {\n        return intval($_GET['current']);\n    } elseif (isset($_GET['start']) && isset($_GET['length'])) { // for the bootgrid\n        $start = intval($_GET['start']);\n        $length = intval($_GET['length']);\n        if (!empty($start) && !empty($length)) {\n            return floor($start / $length) + 1;\n        }\n    }\n    return 1;\n}\n\nfunction getRowCount($default = 1000) {\n    global $global;\n    if (!empty($_REQUEST['rowCount'])) {\n        $defaultN = intval($_REQUEST['rowCount']);\n    } elseif (!empty($_POST['rowCount'])) {\n        $defaultN = intval($_POST['rowCount']);\n    } elseif (!empty($_GET['rowCount'])) {\n        $defaultN = intval($_GET['rowCount']);\n    } elseif (!empty($_REQUEST['length'])) {\n        $defaultN = intval($_REQUEST['length']);\n    } elseif (!empty($_POST['length'])) {\n        $defaultN = intval($_POST['length']);\n    } elseif (!empty($_GET['length'])) {\n        $defaultN = intval($_GET['length']);\n    } elseif (!empty($global['rowCount'])) {\n        $defaultN = intval($global['rowCount']);\n    }\n    return (!empty($defaultN) && $defaultN > 0) ? $defaultN : $default;\n}\n\nfunction getSearchVar() {\n    if (!empty($_REQUEST['search'])) {\n        return $_REQUEST['search'];\n    } elseif (!empty($_REQUEST['q'])) {\n        return $_REQUEST['q'];\n    }\n    if (!empty($_REQUEST['searchPhrase'])) {\n        return $_REQUEST['searchPhrase'];\n    } elseif (!empty($_REQUEST['search']['value'])) {\n        return $_REQUEST['search']['value'];\n    }\n    return \"\";\n}\n\n$cleanSearchHistory = '';\n\nfunction cleanSearchVar() {\n    global $cleanSearchHistory;\n    $search = getSearchVar();\n    if (!empty($search)) {\n        $cleanSearchHistory = $search;\n    }\n    $searchIdex = ['q', 'searchPhrase', 'search'];\n    foreach ($searchIdex as $value) {\n        unset($_REQUEST[$value], $_POST[$value], $_GET[$value]);\n    }\n}\n\nfunction reloadSearchVar() {\n    global $cleanSearchHistory;\n    $_REQUEST['search'] = $cleanSearchHistory;\n    if (empty($_GET['search'])) {\n        $_GET['search'] = $cleanSearchHistory;\n    }\n    if (empty($_POST['search'])) {\n        $_POST['search'] = $cleanSearchHistory;\n    }\n}\n\nfunction wget($url, $filename, $debug = false) {\n    if (empty($url) || $url == \"php://input\" || !preg_match(\"/^http/\", $url)) {\n        return false;\n    }\n    if (wgetIsLocked($url)) {\n        if ($debug) {\n            _error_log(\"wget: ERROR the url is already downloading $url, $filename\");\n        }\n        return false;\n    }\n    wgetLock($url);\n    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        $content = @file_get_contents($url);\n        if (!empty($content) && file_put_contents($filename, $content) > 100) {\n            wgetRemoveLock($url);\n            return true;\n        }\n        wgetRemoveLock($url);\n        return false;\n    }\n    $cmd = \"wget --tries=1 {$url} -O {$filename} --no-check-certificate\";\n    if ($debug) {\n        _error_log(\"wget Start ({$cmd}) \");\n    }\n    //echo $cmd;\n    exec($cmd);\n    wgetRemoveLock($url);\n    if (!file_exists($filename)) {\n        _error_log(\"wget: ERROR the url does not download $url, $filename\");\n        return false;\n    }\n    if ($_SERVER['SCRIPT_NAME'] !== '/plugin/Live/m3u8.php' && empty(filesize($filename))) {\n        _error_log(\"wget: ERROR the url download but is empty $url, $filename\");\n        return true;\n    }\n    return false;\n}\n\n/**\n * Copy remote file over HTTP one small chunk at a time.\n *\n * @param $infile The full URL to the remote file\n * @param $outfile The path where to save the file\n */\nfunction copyfile_chunked($infile, $outfile) {\n    $chunksize = 10 * (1024 * 1024); // 10 Megs\n\n    /**\n     * parse_url breaks a part a URL into it's parts, i.e. host, path,\n     * query string, etc.\n     */\n    $parts = parse_url($infile);\n    $i_handle = fsockopen($parts['host'], 80, $errstr, $errcode, 5);\n    $o_handle = fopen($outfile, 'wb');\n\n    if ($i_handle == false || $o_handle == false) {\n        return false;\n    }\n\n    if (!empty($parts['query'])) {\n        $parts['path'] .= '?' . $parts['query'];\n    }\n\n    /**\n     * Send the request to the server for the file\n     */\n    $request = \"GET {$parts['path']} HTTP/1.1\\r\\n\";\n    $request .= \"Host: {$parts['host']}\\r\\n\";\n    $request .= \"User-Agent: Mozilla/5.0\\r\\n\";\n    $request .= \"Keep-Alive: 115\\r\\n\";\n    $request .= \"Connection: keep-alive\\r\\n\\r\\n\";\n    fwrite($i_handle, $request);\n\n    /**\n     * Now read the headers from the remote server. We'll need\n     * to get the content length.\n     */\n    $headers = [];\n    while (!feof($i_handle)) {\n        $line = fgets($i_handle);\n        if ($line == \"\\r\\n\") {\n            break;\n        }\n        $headers[] = $line;\n    }\n\n    /**\n     * Look for the Content-Length header, and get the size\n     * of the remote file.\n     */\n    $length = 0;\n    foreach ($headers as $header) {\n        if (stripos($header, 'Content-Length:') === 0) {\n            $length = (int) str_replace('Content-Length: ', '', $header);\n            break;\n        }\n    }\n\n    /**\n     * Start reading in the remote file, and writing it to the\n     * local file one chunk at a time.\n     */\n    $cnt = 0;\n    while (!feof($i_handle)) {\n        $buf = '';\n        $buf = fread($i_handle, $chunksize);\n        $bytes = fwrite($o_handle, $buf);\n        if ($bytes == false) {\n            return false;\n        }\n        $cnt += $bytes;\n\n        /**\n         * We're done reading when we've reached the conent length\n         */\n        if ($cnt >= $length) {\n            break;\n        }\n    }\n\n    fclose($i_handle);\n    fclose($o_handle);\n    return $cnt;\n}\n\nfunction wgetLockFile($url) {\n    return getTmpDir(\"YPTWget\") . md5($url) . \".lock\";\n}\n\nfunction wgetLock($url) {\n    $file = wgetLockFile($url);\n    return file_put_contents($file, time() . PHP_EOL, FILE_APPEND | LOCK_EX);\n}\n\nfunction wgetRemoveLock($url) {\n    $filename = wgetLockFile($url);\n    if (!file_exists($filename)) {\n        return false;\n    }\n    return unlink($filename);\n}\n\nfunction getLockFile($name) {\n    return getTmpDir(\"YPTLockFile\") . md5($name) . \".lock\";\n}\n\nfunction setLock($name) {\n    $file = getLockFile($name);\n    return file_put_contents($file, time());\n}\n\nfunction isLock($name, $timeout = 60) {\n    $file = getLockFile($name);\n    if (file_exists($file)) {\n        $time = intval(file_get_contents($file));\n        if ($time + $timeout < time()) {\n            return false;\n        }\n    }\n}\n\nfunction removeLock($name) {\n    $filename = getLockFile($name);\n    if (!file_exists($filename)) {\n        return false;\n    }\n    return unlink($filename);\n}\n\nfunction wgetIsLocked($url) {\n    $filename = wgetLockFile($url);\n    if (!file_exists($filename)) {\n        return false;\n    }\n    $time = intval(file_get_contents($filename));\n    if (time() - $time > 36000) { // more then 10 hours\n        unlink($filename);\n        return false;\n    }\n    return true;\n}\n\n// due the some OS gives a fake is_writable response\nfunction isWritable($dir) {\n    $dir = rtrim($dir, '/') . '/';\n    $file = $dir . uniqid();\n    $result = false;\n    $time = time();\n    if (@file_put_contents($file, $time)) {\n        if ($fileTime = @file_get_contents($file)) {\n            if ($fileTime == $time) {\n                $result = true;\n            }\n        }\n    }\n    @unlink($file);\n    return $result;\n}\n\nfunction _isWritable($dir) {\n    if (!isWritable($dir)) {\n        return false;\n    }\n    $tmpFile = \"{$dir}\" . uniqid();\n    $bytes = @file_put_contents($tmpFile, time());\n    @unlink($tmpFile);\n    return !empty($bytes);\n}\n\nfunction getTmpDir($subdir = \"\") {\n    global $global;\n    if (empty($_SESSION['getTmpDir'])) {\n        $_SESSION['getTmpDir'] = [];\n    }\n    if (empty($_SESSION['getTmpDir'][$subdir . \"_\"])) {\n        if (empty($global['tmpDir'])) {\n            $tmpDir = sys_get_temp_dir();\n            if (empty($tmpDir) || !_isWritable($tmpDir)) {\n                $tmpDir = getVideosDir() . \"cache\" . DIRECTORY_SEPARATOR;\n            }\n            $tmpDir = rtrim($tmpDir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n            $tmpDir = \"{$tmpDir}{$subdir}\";\n        } else {\n            $tmpDir = $global['tmpDir'];\n        }\n        $tmpDir = addLastSlash($tmpDir);\n        if (!is_dir($tmpDir)) {\n            mkdir($tmpDir, 0777, true);\n        }\n        _session_start();\n        $_SESSION['getTmpDir'][$subdir . \"_\"] = $tmpDir;\n    } else {\n        $tmpDir = $_SESSION['getTmpDir'][$subdir . \"_\"];\n    }\n    return $tmpDir;\n}\n\nfunction getTmpFile() {\n    return getTmpDir(\"tmpFiles\") . uniqid();\n}\n\nfunction getMySQLDate() {\n    global $global;\n    $sql = \"SELECT now() as time FROM configurations LIMIT 1\";\n    // I had to add this because the about from customize plugin was not loading on the about page http://127.0.0.1/AVideo/about\n    $res = sqlDAL::readSql($sql);\n    $data = sqlDAL::fetchAssoc($res);\n    sqlDAL::close($res);\n    if ($res) {\n        $row = $data['time'];\n    } else {\n        $row = false;\n    }\n    return $row;\n}\n\nfunction _file_put_contents($filename, $data, $flags = 0, $context = null) {\n    make_path($filename);\n    return file_put_contents($filename, $data, $flags, $context);\n}\n\nfunction html2plainText($html) {\n    $text = strip_tags($html);\n    $text = str_replace(['\\\\', \"\\n\", \"\\r\", '\"'], ['', ' ', ' ', ''], trim($text));\n    return $text;\n}\n\nfunction getInputPassword($id, $attributes = 'class=\"form-control\"', $paceholder = '') {\n    if (empty($paceholder)) {\n        $paceholder = __(\"Password\");\n    }\n    ?>\n    <div class=\"input-group\">\n        <span class=\"input-group-addon\"><i class=\"fas fa-lock\"></i></span>\n        <input id=\"<?php echo $id; ?>\" name=\"<?php echo $id; ?>\" type=\"password\"  placeholder=\"<?php echo $paceholder; ?>\" <?php echo $attributes; ?> >\n            <span class=\"input-group-addon\" style=\"cursor: pointer;\" id=\"toggle_<?php echo $id; ?>\"  data-toggle=\"tooltip\" data-placement=\"left\" title=\"<?php echo __('Show/Hide Password'); ?>\"><i class=\"fas fa-eye-slash\"></i></span>\n    </div>\n    <script>\n        $(document).ready(function () {\n            $('#toggle_<?php echo $id; ?>').click(function () {\n                $(this).find('i').toggleClass(\"fa-eye fa-eye-slash\");\n                if ($(this).find('i').hasClass(\"fa-eye\")) {\n                    $(\"#<?php echo $id; ?>\").attr(\"type\", \"text\");\n                } else {\n                    $(\"#<?php echo $id; ?>\").attr(\"type\", \"password\");\n                }\n            })\n        });\n    </script>\n    <?php\n}\n\nfunction getInputCopyToClipboard($id, $value, $attributes = 'class=\"form-control\" readonly=\"readonly\"', $paceholder = '') {\n    if (strpos($value, '\"') !== false) {\n        $valueAttr = \"value='{$value}'\";\n    } else {\n        $valueAttr = 'value=\"' . $value . '\"';\n    }\n    ?>\n    <div class=\"input-group\">\n        <input id=\"<?php echo $id; ?>\" type=\"text\"  placeholder=\"<?php echo $paceholder; ?>\" <?php echo $attributes; ?> <?php echo $valueAttr; ?> >\n            <span class=\"input-group-addon\" style=\"cursor: pointer;\" id=\"copyToClipboard_<?php echo $id; ?>\"  data-toggle=\"tooltip\" data-placement=\"left\" title=\"<?php echo __('Copy to Clipboard'); ?>\"><i class=\"fas fa-clipboard\"></i></span>\n    </div>\n    <script>\n        var timeOutCopyToClipboard_<?php echo $id; ?>;\n        $(document).ready(function () {\n            $('#copyToClipboard_<?php echo $id; ?>').click(function () {\n                clearTimeout(timeOutCopyToClipboard_<?php echo $id; ?>);\n                $('#copyToClipboard_<?php echo $id; ?>').find('i').removeClass(\"fa-clipboard\");\n                $('#copyToClipboard_<?php echo $id; ?>').find('i').addClass(\"text-success\");\n                $('#copyToClipboard_<?php echo $id; ?>').addClass('bg-success');\n                $('#copyToClipboard_<?php echo $id; ?>').find('i').addClass(\"fa-clipboard-check\");\n                timeOutCopyToClipboard_<?php echo $id; ?> = setTimeout(function () {\n                    $('#copyToClipboard_<?php echo $id; ?>').find('i').removeClass(\"fa-clipboard-check\");\n                    $('#copyToClipboard_<?php echo $id; ?>').find('i').removeClass(\"text-success\");\n                    $('#copyToClipboard_<?php echo $id; ?>').removeClass('bg-success');\n                    $('#copyToClipboard_<?php echo $id; ?>').find('i').addClass(\"fa-clipboard\");\n                }, 3000);\n                copyToClipboard($('#<?php echo $id; ?>').val());\n            })\n        });\n    </script>\n    <?php\n}\n\nfunction getButtontCopyToClipboard($elemToCopyId, $attributes = 'class=\"btn btn-default btn-sm btn-xs pull-right\"', $label = \"Copy to Clipboard\") {\n    $id = \"getButtontCopyToClipboard\" . uniqid();\n    ?>\n    <button id=\"<?php echo $id; ?>\" <?php echo $attributes; ?> data-toggle=\"tooltip\" data-placement=\"left\" title=\"<?php echo __($label); ?>\"><i class=\"fas fa-clipboard\"></i> <?php echo __($label); ?></button>\n    <script>\n        var timeOutCopyToClipboard_<?php echo $id; ?>;\n        $(document).ready(function () {\n            $('#<?php echo $id; ?>').click(function () {\n                clearTimeout(timeOutCopyToClipboard_<?php echo $id; ?>);\n                $('#<?php echo $id; ?>').find('i').removeClass(\"fa-clipboard\");\n                $('#<?php echo $id; ?>').find('i').addClass(\"text-success\");\n                $('#<?php echo $id; ?>').addClass('bg-success');\n                $('#<?php echo $id; ?>').find('i').addClass(\"fa-clipboard-check\");\n                timeOutCopyToClipboard_<?php echo $id; ?> = setTimeout(function () {\n                    $('#<?php echo $id; ?>').find('i').removeClass(\"fa-clipboard-check\");\n                    $('#<?php echo $id; ?>').find('i').removeClass(\"text-success\");\n                    $('#<?php echo $id; ?>').removeClass('bg-success');\n                    $('#<?php echo $id; ?>').find('i').addClass(\"fa-clipboard\");\n                }, 3000);\n                copyToClipboard($('#<?php echo $elemToCopyId; ?>').val());\n            })\n        });\n    </script>\n    <?php\n    return $id;\n}\n\nfunction fakeBrowser($url) {\n    // create curl resource\n    $ch = curl_init();\n\n    // set url\n    curl_setopt($ch, CURLOPT_URL, $url);\n\n    //return the transfer as a string\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');\n\n    // $output contains the output string\n    $output = curl_exec($ch);\n\n    // close curl resource to free up system resources\n    curl_close($ch);\n    return $output;\n}\n\nfunction examineJSONError($object) {\n    $json = json_encode($object);\n    if (json_last_error()) {\n        echo \"Error 1 Found: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n    $object = object_to_array($object);\n    $json = json_encode($object);\n    if (json_last_error()) {\n        echo \"Error 1 Found after array conversion: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $json = json_encode($object, JSON_UNESCAPED_UNICODE);\n    if (json_last_error()) {\n        echo \"Error 1 Found with JSON_UNESCAPED_UNICODE: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $objectEncoded = $object;\n\n    array_walk_recursive($objectEncoded, function (&$item) {\n        if (is_string($item)) {\n            $item = utf8_encode($item);\n        }\n    });\n    $json = json_encode($objectEncoded);\n    if (json_last_error()) {\n        echo \"Error 2 Found after array conversion: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $json = json_encode($objectEncoded, JSON_UNESCAPED_UNICODE);\n    if (json_last_error()) {\n        echo \"Error 2 Found with JSON_UNESCAPED_UNICODE: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $objectDecoded = $object;\n\n    array_walk_recursive($objectDecoded, function (&$item) {\n        if (is_string($item)) {\n            $item = utf8_decode($item);\n        }\n    });\n    $json = json_encode($objectDecoded);\n    if (json_last_error()) {\n        echo \"Error 2 Found after array conversion: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    $json = json_encode($objectDecoded, JSON_UNESCAPED_UNICODE);\n    if (json_last_error()) {\n        echo \"Error 2 Found with JSON_UNESCAPED_UNICODE: \" . json_last_error_msg() . \"<br>\" . PHP_EOL;\n    } else {\n        return __LINE__;\n    }\n\n    return false;\n}\n\nfunction _json_encode($object) {\n    if (empty($object)) {\n        return false;\n    }\n    if (is_string($object)) {\n        return $object;\n    }\n    $json = json_encode($object);\n    if (empty($json) && json_last_error()) {\n        //_error_log(\"_json_encode: Error 1 Found: \" . json_last_error_msg());\n        $object = object_to_array($object);\n        $json = json_encode($object);\n        if (empty($json) && json_last_error()) {\n            //_error_log(\"_json_encode: Error 2 Found: \" . json_last_error_msg());\n            $json = json_encode($object, JSON_UNESCAPED_UNICODE);\n            if (json_last_error()) {\n                _error_log(\"_json_encode: Error 3 Found: {$object} \" . json_last_error_msg() . PHP_EOL . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n                $objectEncoded = $object;\n                array_walk_recursive($objectEncoded, function (&$item) {\n                    if (is_string($item)) {\n                        $item = utf8_encode($item);\n                    }\n                });\n                $json = json_encode($objectEncoded);\n                if (empty($json) && json_last_error()) {\n                    _error_log(\"_json_encode: Error 4 Found: \" . json_last_error_msg());\n                    $json = json_encode($objectEncoded, JSON_UNESCAPED_UNICODE);\n                    if (json_last_error()) {\n                        _error_log(\"_json_encode: Error 5 Found: \" . json_last_error_msg());\n                        $objectDecoded = $object;\n                        array_walk_recursive($objectDecoded, function (&$item) {\n                            if (is_string($item)) {\n                                $item = utf8_decode($item);\n                            }\n                        });\n                        $json = json_encode($objectDecoded);\n                        if (empty($json) && json_last_error()) {\n                            _error_log(\"_json_encode: Error 6 Found: \" . json_last_error_msg());\n                            $json = json_encode($objectDecoded, JSON_UNESCAPED_UNICODE);\n                            if (empty($json) && json_last_error()) {\n                                _error_log(\"_json_encode: Error 7 Found: \" . json_last_error_msg());\n                                array_walk_recursive($objectDecoded, function (&$item) {\n                                    if (is_string($item)) {\n                                        $item = cleanString($item);\n                                    }\n                                });\n                                $json = json_encode($users);\n                                if (json_last_error()) {\n                                    _error_log(\"_json_encode: Error 8 Found: \" . json_last_error_msg());\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return $json;\n}\n\nfunction _json_decode($object) {\n    if (empty($object)) {\n        return false;\n    }\n    if (!is_string($object)) {\n        return $object;\n    }\n    $json = json_decode($object);\n    if ($json === null) {\n        $object = str_replace([\"\\r\", \"\\n\"], ['\\r', '\\n'], $object);\n        return json_decode($object);\n    } else {\n        return $json;\n    }\n}\n\n// this will make sure the strring will fits in the database field\nfunction _substr($string, $start, $length = null) {\n    // make sure the name is not chunked in case of multibyte string\n    if (function_exists(\"mb_strcut\")) {\n        return mb_strcut($string, $start, $length, \"UTF-8\");\n    } else {\n        return substr($string, $start, $length);\n    }\n}\n\nfunction getPagination($total, $page = 0, $link = \"\", $maxVisible = 10, $infinityScrollGetFromSelector = \"\", $infinityScrollAppendIntoSelector = \"\") {\n    global $global, $advancedCustom;\n    if ($total < 2) {\n        return '<!-- getPagination total < 2 (' . json_encode($total) . ') -->';\n    }\n\n    if (empty($page)) {\n        $page = getCurrentPage();\n    }\n\n    $isInfiniteScroll = !empty($infinityScrollGetFromSelector) && !empty($infinityScrollAppendIntoSelector);\n\n    $uid = md5($link);\n\n    if ($total < $maxVisible) {\n        $maxVisible = $total;\n    }\n    if (empty($link)) {\n        $link = getSelfURI();\n        if (preg_match(\"/(current=[0-9]+)/i\", $link, $match)) {\n            $link = str_replace($match[1], \"current={page}\", $link);\n        } else {\n            //$link = addQueryStringParameter($link, 'current', '{page}');\n            $link .= (parse_url($link, PHP_URL_QUERY) ? '&' : '?') . 'current={page}';\n        }\n    }\n\n    $class = '';\n    if (!empty($infinityScrollGetFromSelector) && !empty($infinityScrollAppendIntoSelector)) {\n        $class = \"infiniteScrollPagination{$uid} hidden\";\n    }\n\n    if ($isInfiniteScroll && $page > 1) {\n        if (preg_match(\"/\\{page\\}/\", $link, $match)) {\n            $pageForwardLink = str_replace(\"{page}\", $page + 1, $link);\n        } else {\n            $pageForwardLink = addQueryStringParameter($link, 'current', $page + 1);\n        }\n\n        return \"<nav class=\\\"{$class}\\\">\"\n                . \"<ul class=\\\"pagination\\\">\"\n                . \"<li class=\\\"page-item\\\"><a class=\\\"page-link pagination__next pagination__next{$uid}\\\" href=\\\"{$pageForwardLink}\\\"></a></li></ul></nav>\";\n    }\n\n    $pag = '<nav aria-label=\"Page navigation\" class=\"text-center ' . $class . '\"><ul class=\"pagination\"><!-- page ' . $page . ' maxVisible = ' . $maxVisible . ' -->';\n    $start = 1;\n    $end = $maxVisible;\n\n    if ($page > $maxVisible - 2) {\n        $start = $page - ($maxVisible - 2);\n        $end = $page + 2;\n        if ($end > $total) {\n            $rest = $end - $total;\n            $start -= $rest;\n            $end -= $rest;\n        }\n    }\n    if ($start <= 0) {\n        $start = 1;\n    }\n    if (!$isInfiniteScroll) {\n        if ($page > 1) {\n            if (preg_match(\"/\\{page\\}/\", $link, $match)) {\n                $pageLink = str_replace(\"{page}\", 1, $link);\n                $pageBackLink = str_replace(\"{page}\", $page - 1, $link);\n            } else {\n                $pageLink = addQueryStringParameter($link, 'current', 1);\n                $pageBackLink = addQueryStringParameter($link, 'current', $page - 1);\n            }\n            if ($start > ($page - 1)) {\n                $pag .= PHP_EOL . '<li class=\"page-item\"><a class=\"page-link\" href=\"' . $pageLink . '\" tabindex=\"-1\" onclick=\"modal.showPleaseWait();\"><i class=\"fas fa-angle-double-left\"></i></a></li>';\n            }\n            $pag .= PHP_EOL . '<li class=\"page-item\"><a class=\"page-link\" href=\"' . $pageBackLink . '\" tabindex=\"-1\" onclick=\"modal.showPleaseWait();\"><i class=\"fas fa-angle-left\"></i></a></li>';\n        }\n        for ($i = $start; $i <= $end; $i++) {\n            if ($i == $page) {\n                $pag .= PHP_EOL . ' <li class=\"page-item active\"><span class=\"page-link\"> ' . $i . ' <span class=\"sr-only\">(current)</span></span></li>';\n            } else {\n                $pageLink = str_replace(\"{page}\", $i, $link);\n                $pag .= PHP_EOL . ' <li class=\"page-item\"><a class=\"page-link\" href=\"' . $pageLink . '\" onclick=\"modal.showPleaseWait();\"> ' . $i . ' </a></li>';\n            }\n        }\n    }\n    if ($page < $total) {\n        if (preg_match(\"/\\{page\\}/\", $link, $match)) {\n            $pageLink = str_replace(\"{page}\", $total, $link);\n            $pageForwardLink = str_replace(\"{page}\", $page + 1, $link);\n        } else {\n            $pageLink = addQueryStringParameter($link, 'current', $total);\n            $pageForwardLink = addQueryStringParameter($link, 'current', $page + 1);\n        }\n        $pag .= PHP_EOL . '<li class=\"page-item\"><a class=\"page-link pagination__next' . $uid . '\" href=\"' . $pageForwardLink . '\" tabindex=\"-1\" onclick=\"modal.showPleaseWait();\"><i class=\"fas fa-angle-right\"></i></a></li>';\n        if ($total > ($end + 1)) {\n            $pag .= PHP_EOL . '<li class=\"page-item\"><a class=\"page-link\" href=\"' . $pageLink . '\" tabindex=\"-1\" onclick=\"modal.showPleaseWait();\"><i class=\"fas fa-angle-double-right\"></i></a></li>';\n        }\n    }\n    $pag .= PHP_EOL . '</ul></nav> ';\n\n    if ($isInfiniteScroll) {\n        $content = file_get_contents($global['systemRootPath'] . 'objects/functiongetPagination.php');\n        $pag .= str_replace(\n                ['$uid', '$webSiteRootURL', '$infinityScrollGetFromSelector', '$infinityScrollAppendIntoSelector'],\n                [$uid, $global['webSiteRootURL'], $infinityScrollGetFromSelector, $infinityScrollAppendIntoSelector],\n                $content\n        );\n    }\n\n    return $pag;\n}\n\nfunction getShareMenu($title, $permaLink, $URLFriendly, $embedURL, $img, $class = \"row bgWhite list-group-item menusDiv\", $videoLengthInSeconds = 0) {\n    global $global, $advancedCustom;\n    include $global['systemRootPath'] . 'objects/functiongetShareMenu.php';\n}\n\nfunction getSharePopupButton($videos_id, $url = \"\", $title = \"\") {\n    global $global, $advancedCustom;\n    if ($advancedCustom->disableShareOnly || $advancedCustom->disableShareAndPlaylist) {\n        return false;\n    }\n    $video['id'] = $videos_id;\n    include $global['systemRootPath'] . 'view/include/socialModal.php';\n}\n\nfunction forbiddenPage($message = '', $logMessage = false, $unlockPassword = '', $namespace = '') {\n    global $global;\n    if (!empty($unlockPassword)) {\n        if (empty($namespace)) {\n            $namespace = $_SERVER[\"SCRIPT_FILENAME\"];\n        }\n        if (!empty($_REQUEST['unlockPassword'])) {\n            if ($_REQUEST['unlockPassword'] == $unlockPassword) {\n                _session_start();\n                if (!isset($_SESSION['user']['forbiddenPage'])) {\n                    $_SESSION['user']['forbiddenPage'] = [];\n                }\n                $_SESSION['user']['forbiddenPage'][$namespace] = $_REQUEST['unlockPassword'];\n            }\n        }\n        if (!empty($_SESSION['user']['forbiddenPage'][$namespace]) && $unlockPassword === $_SESSION['user']['forbiddenPage'][$namespace]) {\n            return true;\n        }\n    }\n    $_REQUEST['403ErrorMsg'] = $message;\n    if ($logMessage) {\n        _error_log($message);\n    }\n\n    $headers = headers_list(); // get list of headers\n    foreach ($headers as $header) { // iterate over that list of headers\n        if (stripos($header, 'Content-Type') !== FALSE) { // if the current header hasthe String \"Content-Type\" in it\n            $headerParts = explode(':', $header); // split the string, getting an array\n            $headerValue = trim($headerParts[1]); // take second part as value\n            $contentType = $headerValue;\n            break;\n        }\n    }\n    if (empty($unlockPassword) && preg_match('/json/i', $contentType)) {\n        header(\"Content-Type: application/json\");\n        $obj = new stdClass();\n        $obj->error = true;\n        $obj->msg = $message;\n        $obj->forbiddenPage = true;\n        die(json_encode($obj));\n    } else {\n        header(\"Content-Type: text/html\");\n        include $global['systemRootPath'] . 'view/forbiddenPage.php';\n    }\n    exit;\n}\n\ndefine('E_FATAL', E_ERROR | E_USER_ERROR | E_PARSE | E_CORE_ERROR |\n        E_COMPILE_ERROR | E_RECOVERABLE_ERROR);\nif (!isCommandLineInterface() && !isAVideoEncoder()) {\n    register_shutdown_function('avidoeShutdown');\n}\n\nfunction avidoeShutdown() {\n    global $global;\n    $error = error_get_last();\n    if ($error && ($error['type'] & E_FATAL)) {\n        var_dump($error);\n        _error_log($error, AVideoLog::$ERROR);\n        header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error', true, 500);\n        if (!User::isAdmin()) {\n            if (!preg_match('/json\\.php$/i', $_SERVER['PHP_SELF'])) {\n                echo '<!-- This page means an error 500 Internal Server Error, check your log file -->' . PHP_EOL;\n                include $global['systemRootPath'] . 'view/maintanance.html';\n            } else {\n                $o = new stdClass();\n                $o->error = true;\n                $o->msg = __('Under Maintanance');\n                echo json_encode($o);\n            }\n        } else {\n            echo '<pre>';\n            var_dump($error);\n            var_dump(debug_backtrace());\n            echo '</pre>';\n        }\n        exit;\n    }\n}\n\nfunction videoNotFound($message, $logMessage = false) {\n    global $global;\n    $_REQUEST['404ErrorMsg'] = $message;\n    if ($logMessage) {\n        _error_log($message);\n    }\n    include $global['systemRootPath'] . 'view/videoNotFound.php';\n    exit;\n}\n\nfunction isForbidden() {\n    global $global;\n    if (!empty($global['isForbidden'])) {\n        return true;\n    }\n    return false;\n}\n\nfunction diskUsageBars() {\n    return ''; //TODO check why it is slowing down\n    global $global;\n    ob_start();\n    include $global['systemRootPath'] . 'objects/functiondiskUsageBars.php';\n    $contents = ob_get_contents();\n    ob_end_clean();\n    return $contents;\n}\n\nfunction getDomain() {\n    global $global, $_getDomain;\n\n    if (isset($_getDomain)) {\n        return $_getDomain;\n    }\n\n    if (empty($_SERVER['HTTP_HOST'])) {\n        $parse = parse_url($global['webSiteRootURL']);\n        $domain = $parse['host'];\n    } else {\n        $domain = $_SERVER['HTTP_HOST'];\n    }\n    $domain = str_replace(\"www.\", \"\", $domain);\n    $domain = preg_match(\"/^\\..+/\", $domain) ? ltrim($domain, '.') : $domain;\n    $domain = preg_replace('/:[0-9]+$/', '', $domain);\n    $_getDomain = $domain;\n    return $domain;\n}\n\nfunction getHostOnlyFromURL($url) {\n    $parse = parse_url($url);\n    $domain = $parse['host'];\n    $domain = str_replace(\"www.\", \"\", $domain);\n    $domain = preg_match(\"/^\\..+/\", $domain) ? ltrim($domain, '.') : $domain;\n    $domain = preg_replace('/:[0-9]+$/', '', $domain);\n    return $domain;\n}\n\n/**\n * It's separated by time, version, clock_seq_hi, clock_seq_lo, node, as indicated in the followoing rfc.\n *\n * From the IETF RFC4122:\n * 8-4-4-4-12\n * @return string\n */\nfunction getDeviceID($useRandomString = true) {\n    $ip = md5(getRealIpAddr());\n    $pattern = \"/[0-9a-z_.-]/i\";\n    if (empty($_SERVER['HTTP_USER_AGENT'])) {\n        $device = \"unknowDevice-{$ip}\";\n        $device .= '-' . intval(User::getId());\n        return preg_replace($pattern, '-', $device);\n    }\n\n    if (empty($useRandomString)) {\n        $device = 'ypt-' . get_browser_name() . '-' . getOS() . '-' . $ip . '-' . md5($_SERVER['HTTP_USER_AGENT']);\n        $device = str_replace(\n                ['[', ']', ' '],\n                ['', '', '_'],\n                $device\n        );\n        $device .= '-' . intval(User::getId());\n        return preg_replace($pattern, '', $device);\n    }\n\n    $cookieName = \"yptDeviceID\";\n    if (empty($_COOKIE[$cookieName])) {\n        if (empty($_GET[$cookieName])) {\n            $id = uniqidV4();\n            $_GET[$cookieName] = $id;\n        }\n        if (empty($_SESSION[$cookieName])) {\n            _session_start();\n            $_SESSION[$cookieName] = $_GET[$cookieName];\n        } else {\n            $_GET[$cookieName] = $_SESSION[$cookieName];\n        }\n        if (!_setcookie($cookieName, $_GET[$cookieName], strtotime(\"+ 1 year\"))) {\n            return \"getDeviceIDError\";\n        }\n        $_COOKIE[$cookieName] = $_GET[$cookieName];\n    }\n    return preg_replace($pattern, '', $_COOKIE[$cookieName]);\n}\n\nfunction deviceIdToObject($deviceID) {\n    $parts = explode('-', $deviceID);\n    $obj = new stdClass();\n    $obj->browser = '';\n    $obj->os = '';\n    $obj->ip = '';\n    $obj->user_agent = '';\n    $obj->users_id = 0;\n\n    foreach ($parts as $key => $value) {\n        $parts[$key] = str_replace('_', ' ', $value);\n    }\n\n    switch ($parts[0]) {\n        case 'ypt':\n            $obj->browser = $parts[1];\n            $obj->os = $parts[2];\n            $obj->ip = $parts[3];\n            $obj->user_agent = $parts[4];\n            $obj->users_id = $parts[5];\n            break;\n        case 'unknowDevice':\n            $obj->browser = $parts[0];\n            $obj->os = 'unknow OS';\n            $obj->ip = $parts[1];\n            $obj->user_agent = 'unknow UA';\n            $obj->users_id = $parts[2];\n            break;\n        default:\n            break;\n    }\n    return $obj;\n}\n\nfunction uniqidV4() {\n    $randomString = openssl_random_pseudo_bytes(16);\n    $time_low = bin2hex(substr($randomString, 0, 4));\n    $time_mid = bin2hex(substr($randomString, 4, 2));\n    $time_hi_and_version = bin2hex(substr($randomString, 6, 2));\n    $clock_seq_hi_and_reserved = bin2hex(substr($randomString, 8, 2));\n    $node = bin2hex(substr($randomString, 10, 6));\n\n    /**\n     * Set the four most significant bits (bits 12 through 15) of the\n     * time_hi_and_version field to the 4-bit version number from\n     * Section 4.1.3.\n     * @see http://tools.ietf.org/html/rfc4122#section-4.1.3\n     */\n    $time_hi_and_version = hexdec($time_hi_and_version);\n    $time_hi_and_version = $time_hi_and_version >> 4;\n    $time_hi_and_version = $time_hi_and_version | 0x4000;\n\n    /**\n     * Set the two most significant bits (bits 6 and 7) of the\n     * clock_seq_hi_and_reserved to zero and one, respectively.\n     */\n    $clock_seq_hi_and_reserved = hexdec($clock_seq_hi_and_reserved);\n    $clock_seq_hi_and_reserved = $clock_seq_hi_and_reserved >> 2;\n    $clock_seq_hi_and_reserved = $clock_seq_hi_and_reserved | 0x8000;\n\n    return sprintf('%08s-%04s-%04x-%04x-%012s', $time_low, $time_mid, $time_hi_and_version, $clock_seq_hi_and_reserved, $node);\n}\n\n// guid\n\nfunction _setcookie($cookieName, $value, $expires = 0) {\n    if (empty($expires)) {\n        if (empty($config) || !is_object($config)) {\n            $config = new Configuration();\n        }\n        $expires = time() + $config->getSession_timeout();\n    }\n\n    if (version_compare(phpversion(), '7.3', '>=')) {\n        $cookie_options = [\n            'expires' => $expires,\n            'path' => '/',\n            'domain' => getDomain(),\n            'secure' => true,\n            'httponly' => false,\n            'samesite' => 'None'\n        ];\n        return setcookie($cookieName, $value, $cookie_options);\n    } else {\n        return setcookie($cookieName, $value, (int) $expires, \"/\", getDomain());\n    }\n}\n\nfunction _unsetcookie($cookieName) {\n    $domain = getDomain();\n    $expires = strtotime(\"-10 years\");\n    $value = '';\n    _setcookie($cookieName, $value, $expires);\n    setcookie($cookieName, $value, (int) $expires, \"/\") && setcookie($cookieName, $value, (int) $expires);\n    setcookie($cookieName, $value, (int) $expires, \"/\", str_replace(\"www\", \"\", $domain));\n    setcookie($cookieName, $value, (int) $expires, \"/\", \"www.\" . $domain);\n    setcookie($cookieName, $value, (int) $expires, \"/\", \".\" . $domain);\n    setcookie($cookieName, $value, (int) $expires, \"/\", $domain);\n    setcookie($cookieName, $value, (int) $expires, \"/\");\n    setcookie($cookieName, $value, (int) $expires);\n    unset($_COOKIE[$cookieName]);\n}\n\n/**\n * This function is not 100% but try to tell if the site is in an iFrame\n * @global type $global\n * @return boolean\n */\nfunction isIframeInDifferentDomain() {\n    global $global;\n    if (!isIframe()) {\n        return false;\n    }\n    return isSameDomainAsMyAVideo($_SERVER['HTTP_REFERER']);\n}\n\nfunction isIframe() {\n    global $global;\n    if (isset($_SERVER['HTTP_SEC_FETCH_DEST']) && $_SERVER['HTTP_SEC_FETCH_DEST'] === 'iframe') {\n        return true;\n    }\n    if (empty($_SERVER['HTTP_REFERER']) || $_SERVER['HTTP_REFERER'] == $global['webSiteRootURL'] || str_replace('view/', '', getSelfURI()) == $global['webSiteRootURL']) {\n        return false;\n    }\n    return true;\n}\n\nfunction getCredentialsURL() {\n    global $global;\n    return \"webSiteRootURL=\" . urlencode($global['webSiteRootURL']) . \"&user=\" . urlencode(User::getUserName()) . \"&pass=\" . urlencode(User::getUserPass()) . \"&encodedPass=1\";\n}\n\nfunction gotToLoginAndComeBackHere($msg) {\n    global $global;\n    if (User::isLogged()) {\n        forbiddenPage($msg);\n        exit;\n    }\n    if (!empty($_GET['comebackhere'])) {\n        return false;\n    }\n    header(\"Location: {$global['webSiteRootURL']}user?redirectUri=\" . urlencode(getSelfURI()) . \"&msg=\" . urlencode($msg) . \"&comebackhere=1\");\n    exit;\n}\n\nfunction setAlertMessage($msg, $type = \"msg\") {\n    _session_start();\n    $_SESSION['YPTalertMessage'][] = [$msg, $type];\n}\n\nfunction setToastMessage($msg) {\n    setAlertMessage($msg, \"toast\");\n}\n\nfunction showAlertMessage() {\n    if (!empty($_SESSION['YPTalertMessage'])) {\n        foreach ($_SESSION['YPTalertMessage'] as $value) {\n            if (!empty($value[0])) {\n                if (empty($_GET[$value[1]])) {\n                    $_GET[$value[1]] = [];\n                }\n                $_GET[$value[1]][] = $value[0];\n            }\n        }\n        _session_start();\n        unset($_SESSION['YPTalertMessage']);\n    }\n\n    $joinString = ['error', 'msg', 'success'];\n    foreach ($joinString as $value) {\n        if (!empty($_GET[$value]) && is_array($_GET[$value])) {\n            $_GET[$value] = array_unique($_GET[$value]);\n            $newStr = [];\n            foreach ($_GET[$value] as $value2) {\n                if (!empty($value2)) {\n                    $newStr[] = $value2;\n                }\n            }\n            $_GET[$value] = implode(\"<br>\", $newStr);\n        }\n    }\n\n    $check = ['error', 'msg', 'success', 'toast'];\n    foreach ($check as $value) {\n        if (!empty($_GET[$value])) {\n            if (is_array($_GET[$value])) {\n                $newStr = [];\n                foreach ($_GET[$value] as $key => $value2) {\n                    $value2 = str_replace('\"', \"''\", $value2);\n                    if (!empty($value2)) {\n                        $newStr[] = $value2;\n                    }\n                }\n                $_GET[$value] = $newStr;\n            } else {\n                $_GET[$value] = str_replace('\"', \"''\", $_GET[$value]);\n            }\n        }\n    }\n    echo \"/** showAlertMessage **/\", PHP_EOL;\n    if (!empty($_GET['error'])) {\n        echo 'avideoAlertError(\"' . $_GET['error'] . '\");';\n        echo 'window.history.pushState({}, document.title, \"' . getSelfURI() . '\");';\n    }\n    if (!empty($_GET['msg'])) {\n        echo 'avideoAlertInfo(\"' . $_GET['msg'] . '\");';\n        echo 'window.history.pushState({}, document.title, \"' . getSelfURI() . '\");';\n    }\n    if (!empty($_GET['success'])) {\n        echo 'avideoAlertSuccess(\"' . $_GET['success'] . '\");';\n        echo 'window.history.pushState({}, document.title, \"' . getSelfURI() . '\");';\n    }\n    if (!empty($_GET['toast'])) {\n        if (!is_array($_GET['toast'])) {\n            $_GET['toast'] = [$_GET['toast']];\n        } else {\n            $_GET['toast'] = array_unique($_GET['toast']);\n        }\n        foreach ($_GET['toast'] as $key => $value) {\n            $hideAfter = strlen(strip_tags($value)) * 150;\n\n            if ($hideAfter < 3000) {\n                $hideAfter = 3000;\n            }\n            if ($hideAfter > 15000) {\n                $hideAfter = 15000;\n            }\n\n            echo '$.toast({\n                    text: \"' . $value . '\",\n                    hideAfter: ' . $hideAfter . '   // in milli seconds\n                });console.log(\"Toast Hide after ' . $hideAfter . '\");';\n        }\n        echo 'window.history.pushState({}, document.title, \"' . getSelfURI() . '\");';\n    }\n    echo PHP_EOL, \"/** showAlertMessage END **/\";\n}\n\nfunction getResolutionLabel($res) {\n    if ($res == 720) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } elseif ($res == 1080) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } elseif ($res == 1440) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } elseif ($res == 2160) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } elseif ($res == 4320) {\n        return \"<span class='label label-danger' style='padding: 0 2px; font-size: .8em; display: inline;'>\" . getResolutionText($res) . \"</span>\";\n    } else {\n        return '';\n    }\n}\n\nfunction getResolutionText($res) {\n    $res = intval($res);\n    if ($res >= 720 && $res < 1080) {\n        return \"HD\";\n    } elseif ($res >= 1080 && $res < 1440) {\n        return \"FHD\";\n    } elseif ($res >= 1440 && $res < 2160) {\n        return \"FHD+\";\n    } elseif ($res >= 2160 && $res < 4320) {\n        return \"4K\";\n    } elseif ($res >= 4320) {\n        return \"8K\";\n    } else {\n        return '';\n    }\n}\n\nfunction getResolutionTextRoku($res) {\n    $res = intval($res);\n    if ($res >= 720 && $res < 1080) {\n        return \"HD\";\n    } elseif ($res >= 1080 && $res < 2160) {\n        return \"FHD\";\n    } elseif ($res >= 2160) {\n        return \"UHD\";\n    } else {\n        return 'SD';\n    }\n}\n\n// just realize the readdir is a lot faster then glob\nfunction _glob($dir, $pattern) {\n    global $_glob;\n    if (empty($dir)) {\n        return [];\n    }\n    if (empty($_glob)) {\n        $_glob = [];\n    }\n    $name = md5($dir . $pattern);\n    if (isset($_glob[$name])) {\n        return $_glob[$name];\n    }\n    $dir = rtrim($dir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n    $array = [];\n    if (is_dir($dir) && $handle = opendir($dir)) {\n        $count = 0;\n        while (false !== ($file_name = readdir($handle))) {\n            if ($file_name == '.' || $file_name == '..') {\n                continue;\n            }\n            //_error_log(\"_glob: {$dir}{$file_name} [$pattern]\");\n            //var_dump($pattern, $file_name, preg_match($pattern, $file_name));\n            if (preg_match($pattern, $file_name)) {\n                $array[] = \"{$dir}{$file_name}\";\n            }\n        }\n        closedir($handle);\n    }\n    $_glob[$name] = $array;\n    return $array;\n}\n\nfunction globVideosDir($filename, $filesOnly = false) {\n    global $global;\n    if (empty($filename)) {\n        return [];\n    }\n    $cleanfilename = Video::getCleanFilenameFromFile($filename);\n    $paths = Video::getPaths($filename);\n\n    $dir = $paths['path'];\n\n    if (is_dir($dir . $filename)) {\n        $dir = $dir . $filename;\n        $cleanfilename = '';\n    }\n\n    $pattern = \"/{$cleanfilename}.*\";\n    if (!empty($filesOnly)) {\n        $formats = getValidFormats();\n        $pattern .= \".(\" . implode(\"|\", $formats) . \")\";\n    }\n    $pattern .= \"/\";\n    //var_dump($dir, $pattern);\n    return _glob($dir, $pattern);\n}\n\nfunction getValidFormats() {\n    $video = ['webm', 'mp4', 'm3u8'];\n    $audio = ['mp3', 'ogg'];\n    $image = ['jpg', 'gif', 'webp'];\n    return array_merge($video, $audio, $image);\n}\n\nfunction isValidFormats($format) {\n    $format = str_replace(\".\", \"\", $format);\n    return in_array($format, getValidFormats());\n}\n\nfunction getTimerFromDates($startTime, $endTime = 0) {\n    if (!is_int($startTime)) {\n        $startTime = strtotime($startTime);\n    }\n    if (!is_int($endTime)) {\n        $endTime = strtotime($endTime);\n    }\n    if (empty($endTime)) {\n        $endTime = time();\n    }\n    $timer = abs($endTime - $startTime);\n    $uid = uniqid();\n    return \"<span id='{$uid}'></span><script>$(document).ready(function () {startTimer({$timer}, '#{$uid}', '');})</script>\";\n}\n\nfunction getServerClock() {\n    $id = uniqid();\n    $today = getdate();\n    $html = '<span id=\"' . $id . '\">00:00:00</span>';\n    $html .= \"<script type=\\\"text/javascript\\\">\n    $(document).ready(function () {\n        var d = new Date({$today['year']},{$today['mon']},{$today['mday']},{$today['hours']},{$today['minutes']},{$today['seconds']});\n        setInterval(function() {\n            d.setSeconds(d.getSeconds() + 1);\n            $('#{$id}').text((d.getHours() +':' + d.getMinutes() + ':' + d.getSeconds() ));\n        }, 1000);\n    });\n</script>\";\n    return $html;\n}\n\n/**\n * Xsendfile and FFMPEG are required for this feature\n * @global type $global\n * @param type $filepath\n * @return boolean\n */\nfunction downloadHLS($filepath) {\n    global $global;\n\n    if (!CustomizeUser::canDownloadVideos()) {\n        _error_log(\"downloadHLS: CustomizeUser::canDownloadVideos said NO\");\n        return false;\n    }\n\n    if (!file_exists($filepath)) {\n        _error_log(\"downloadHLS: file NOT found: {$filepath}\");\n        return false;\n    }\n    $output = m3u8ToMP4($filepath);\n\n    if (!empty($output['error'])) {\n        $msg = 'downloadHLS was not possible';\n        if (User::isAdmin()) {\n            $msg .= '<br>' . \"m3u8ToMP4($filepath) return empty<br>\" . nl2br($output['msg']);\n        }\n        _error_log(\"downloadHLS: m3u8ToMP4($filepath) return empty\");\n        die($msg);\n    }\n\n    $outputpath = $output['path'];\n    $outputfilename = $output['filename'];\n\n    if (!empty($_REQUEST['title'])) {\n        $quoted = sprintf('\"%s\"', addcslashes(basename($_REQUEST['title']), '\"\\\\'));\n    } elseif (!empty($_REQUEST['file'])) {\n        $quoted = sprintf('\"%s\"', addcslashes(basename($_REQUEST['file']), '\"\\\\')) . \".mp4\";\n    } else {\n        $quoted = $outputfilename;\n    }\n\n    header('Content-Description: File Transfer');\n    header('Content-Disposition: attachment; filename=' . $quoted);\n    header('Content-Transfer-Encoding: binary');\n    header('Connection: Keep-Alive');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    header(\"X-Sendfile: {$outputpath}\");\n    exit;\n}\n\nfunction playHLSasMP4($filepath) {\n    global $global;\n\n    if (!CustomizeUser::canDownloadVideos()) {\n        _error_log(\"playHLSasMP4: CustomizeUser::canDownloadVideos said NO\");\n        return false;\n    }\n\n    if (!file_exists($filepath)) {\n        _error_log(\"playHLSasMP4: file NOT found: {$filepath}\");\n        return false;\n    }\n    $output = m3u8ToMP4($filepath);\n\n    if (!empty($output['error'])) {\n        $msg = 'playHLSasMP4 was not possible';\n        if (User::isAdmin()) {\n            $msg .= '<br>' . \"m3u8ToMP4($filepath) return empty<br>\" . nl2br($output['msg']);\n        }\n        die($msg);\n    }\n\n    $outputpath = $output['path'];\n\n    header('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');\n    header('Cache-Control: post-check=0, pre-check=0', false);\n    header('Pragma: no-cache');\n    header('Content-type: video/mp4');\n    header('Content-Length: ' . filesize($outputpath));\n    header(\"X-Sendfile: {$outputpath}\");\n    exit;\n}\n\nfunction m3u8ToMP4($input) {\n    $videosDir = getVideosDir();\n    $outputfilename = str_replace($videosDir, \"\", $input);\n    $parts = explode(\"/\", $outputfilename);\n    $resolution = Video::getResolutionFromFilename($input);\n    $outputfilename = $parts[0] . \"_{$resolution}_.mp4\";\n    $outputpath = \"{$videosDir}cache/downloads/{$outputfilename}\";\n    $msg = '';\n    $error = true;\n    make_path($outputpath);\n    if (empty($outputfilename)) {\n        $msg = \"downloadHLS: empty outputfilename {$outputfilename}\";\n        _error_log($msg);\n        return ['error' => $error, 'msg' => $msg];\n    }\n    _error_log(\"downloadHLS: m3u8ToMP4($input)\");\n    //var_dump(!preg_match('/^http/i', $input), filesize($input), preg_match('/.m3u8$/i', $input));\n    $ism3u8 = preg_match('/.m3u8$/i', $input);\n    if (!preg_match('/^http/i', $input) && (filesize($input) <= 10 || $ism3u8)) { // dummy file\n        $filepath = escapeshellcmd(pathToRemoteURL($input, true, true));\n        if ($ism3u8 && !preg_match('/.m3u8$/i', $filepath)) {\n            $filepath = addLastSlash($filepath) . 'index.m3u8';\n        }\n\n        $token = getToken(60);\n        $filepath = addQueryStringParameter($filepath, 'globalToken', $token);\n    } else {\n        $filepath = escapeshellcmd($input);\n    }\n\n    if (is_dir($filepath)) {\n        $filepath = addLastSlash($filepath) . 'index.m3u8';\n    }\n\n    $outputpath = escapeshellcmd($outputpath);\n    if (!file_exists($outputpath)) {\n        $command = get_ffmpeg() . \" -allowed_extensions ALL -y -i \\\"{$filepath}\\\" -c:v copy -c:a copy -bsf:a aac_adtstoasc -strict -2 {$outputpath}\";\n        $msg1 = \"downloadHLS: Exec Command ({$command})\";\n        _error_log($msg1);\n        //var_dump($outputfilename, $command, $_GET, $filepath);exit;\n        exec($command . \" 2>&1\", $output, $return);\n        if (!empty($return)) {\n            $msg2 = \"downloadHLS: ERROR 1 \" . implode(PHP_EOL, $output);\n            _error_log($msg2);\n\n            $command = get_ffmpeg() . \" -y -i \\\"{$filepath}\\\" -c:v copy -c:a copy -bsf:a aac_adtstoasc -strict -2 {$outputpath}\";\n            //var_dump($outputfilename, $command, $_GET, $filepath);exit;\n            exec($command . \" 2>&1\", $output, $return);\n            if (!empty($return)) {\n                $msg3 = \"downloadHLS: ERROR 2 \" . implode(PHP_EOL, $output);\n                $finalMsg = $msg1 . PHP_EOL . $msg2 . PHP_EOL . $msg3;\n                _error_log($msg3);\n                return ['error' => $error, 'msg' => $finalMsg];\n            }\n        }\n    } else {\n        $msg = \"downloadHLS: outputpath already exists ({$outputpath})\";\n        _error_log($msg);\n    }\n    $error = false;\n    return ['error' => $error, 'msg' => $msg, 'path' => $outputpath, 'filename' => $outputfilename];\n}\n\nfunction getSocialModal($videos_id, $url = \"\", $title = \"\") {\n    global $global;\n    $video['id'] = $videos_id;\n    $sharingUid = uniqid();\n    ob_start();\n    ?>\n    <div id=\"SharingModal<?php echo $sharingUid ?>\" class=\"modal fade\" role=\"dialog\" style=\"top: 60px;\">\n        <div class=\"modal-dialog\">\n            <!-- Modal content-->\n            <div class=\"modal-content\">\n                <div class=\"modal-body\">\n                    <center>\n                        <?php include $global['systemRootPath'] . 'view/include/social.php'; ?>\n                    </center>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script>\n        function showSharing<?php echo $sharingUid ?>() {\n            if ($('#mainVideo').length) {\n                $('#SharingModal<?php echo $sharingUid ?>').appendTo(\"#mainVideo\");\n            } else {\n                $('#SharingModal<?php echo $sharingUid ?>').appendTo(\"body\");\n            }\n            $('#SharingModal<?php echo $sharingUid ?>').modal(\"show\");\n            $('.modal-backdrop').hide();\n\n            return false;\n        }\n\n        $(document).ready(function () {\n            $('#SharingModal<?php echo $sharingUid ?>').modal({show: false});\n        });\n    </script>\n    <?php\n    $contents = ob_get_contents();\n    ob_end_clean();\n    return ['html' => $contents, 'id' => $sharingUid];\n}\n\nfunction getCroppie(\n        $buttonTitle,\n        $callBackJSFunction,\n        $resultWidth = 0,\n        $resultHeight = 0,\n        $viewportWidth = 0,\n        $boundary = 25,\n        $viewportHeight = 0,\n        $enforceBoundary = true\n) {\n    global $global;\n\n    if (empty($resultWidth) && empty($resultHeight)) {\n        if (isMobile()) {\n            $viewportWidth = 250;\n        } else {\n            $viewportWidth = 800;\n        }\n\n        if (defaultIsPortrait()) {\n            $resultWidth = 540;\n            $resultHeight = 800;\n        } else {\n            $resultWidth = 1280;\n            $resultHeight = 720;\n        }\n    }\n\n    if (empty($viewportWidth)) {\n        $viewportWidth = $resultWidth;\n    }\n    $zoom = 0;\n    if (empty($viewportHeight)) {\n        $zoom = ($viewportWidth / $resultWidth);\n        $viewportHeight = $zoom * $resultHeight;\n    }\n    if (empty($enforceBoundary)) {\n        $boundary = 0;\n    }\n    $boundaryWidth = $viewportWidth + $boundary;\n    $boundaryHeight = $viewportHeight + $boundary;\n    $uid = uniqid();\n    ob_start();\n    include $global['systemRootPath'] . 'objects/functionCroppie.php';\n    $contents = ob_get_contents();\n    ob_end_clean();\n    $callBackJSFunction = addcslashes($callBackJSFunction, \"'\");\n    return [\n        \"html\" => $contents,\n        \"id\" => \"croppie{$uid}\",\n        \"uploadCropObject\" => \"uploadCrop{$uid}\",\n        \"getCroppieFunction\" => \"getCroppie(uploadCrop{$uid}, '{$callBackJSFunction}', {$resultWidth}, {$resultHeight});\",\n        \"createCroppie\" => \"createCroppie{$uid}\",\n        \"restartCroppie\" => \"restartCroppie{$uid}\",\n    ];\n}\n\nfunction saveCroppieImage($destination, $postIndex = \"imgBase64\") {\n    if (empty($destination) || empty($_POST[$postIndex])) {\n        return false;\n    }\n    $fileData = base64DataToImage($_POST[$postIndex]);\n\n    $path_parts = pathinfo($destination);\n    $tmpDestination = $destination;\n    $extension = strtolower($path_parts['extension']);\n    if ($extension !== 'png') {\n        $tmpDestination = $destination . '.png';\n    }\n\n    $saved = _file_put_contents($tmpDestination, $fileData);\n\n    if ($saved) {\n        if ($extension !== 'png') {\n            convertImage($tmpDestination, $destination, 100);\n            unlink($tmpDestination);\n        }\n    }\n    //var_dump($saved, $tmpDestination, $destination, $extension);exit;\n    return $saved;\n}\n\nfunction get_ffmpeg($ignoreGPU = false) {\n    global $global;\n    $complement = '';\n    //$complement = ' -user_agent \"'.getSelfUserAgent(\"FFMPEG\").'\" ';\n    //return 'ffmpeg -headers \"User-Agent: '.getSelfUserAgent(\"FFMPEG\").'\" ';\n    $ffmpeg = 'ffmpeg  ';\n    if (empty($ignoreGPU) && !empty($global['ffmpegGPU'])) {\n        $ffmpeg .= ' --enable-nvenc ';\n    }\n    if (!empty($global['ffmpeg'])) {\n        $ffmpeg = \"{$global['ffmpeg']}{$ffmpeg}\";\n    }\n    return $ffmpeg . $complement;\n}\n\nfunction get_php() {\n    global $global;\n    $php = 'php  ';\n    if (!empty($global['php'])) {\n        $php = \"{$global['php']} \";\n    }\n    return $php;\n}\n\nfunction isHTMLPage($url) {\n    if (preg_match('/https?:\\/\\/(www\\.)?(youtu.be|youtube.com|vimeo.com|bitchute.com)\\//i', $url)) {\n        return true;\n    } elseif ($type = getHeaderContentTypeFromURL($url)) {\n        if (preg_match('/text\\/html/i', $type)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction getHeaderContentTypeFromURL($url) {\n    if (isValidURL($url) && $type = get_headers($url, 1)[\"Content-Type\"]) {\n        return $type;\n    }\n    return false;\n}\n\nfunction canFullScreen() {\n    global $doNotFullScreen;\n    if (!empty($doNotFullScreen) || isSerie() || !isVideo()) {\n        return false;\n    }\n    return true;\n}\n\nfunction getTinyMCE($id, $simpleMode = false) {\n    global $global;\n    ob_start();\n    include $global['systemRootPath'] . 'objects/functionsGetTinyMCE.php';\n    $contents = ob_get_contents();\n    ob_end_clean();\n    return $contents;\n}\n\nfunction pathToRemoteURL($filename, $forceHTTP = false, $ignoreCDN = false) {\n    global $pathToRemoteURL, $global;\n    if (!isset($pathToRemoteURL)) {\n        $pathToRemoteURL = [];\n    }\n\n    if (isset($pathToRemoteURL[$filename])) {\n        return $pathToRemoteURL[$filename];\n    }\n    if (!file_exists($filename) || filesize($filename) < 1000) {\n        $fileName = getFilenameFromPath($filename);\n        if ($yptStorage = AVideoPlugin::loadPluginIfEnabled(\"YPTStorage\")) {\n            $source = $yptStorage->getAddress(\"{$fileName}\");\n            $url = $source['url'];\n        } elseif (!preg_match('/index.m3u8$/', $filename)) {\n            if ($aws_s3 = AVideoPlugin::loadPluginIfEnabled(\"AWS_S3\")) {\n                $source = $aws_s3->getAddress(\"{$fileName}\");\n                $url = $source['url'];\n                if (empty($ignoreCDN)) {\n                    $url = replaceCDNIfNeed($url, 'CDN_S3');\n                } elseif (!empty($source['url_noCDN'])) {\n                    $url = $source['url_noCDN'];\n                }\n            } elseif ($bb_b2 = AVideoPlugin::loadPluginIfEnabled(\"Blackblaze_B2\")) {\n                $source = $bb_b2->getAddress(\"{$fileName}\");\n                $url = $source['url'];\n                if (empty($ignoreCDN)) {\n                    $url = replaceCDNIfNeed($url, 'CDN_B2');\n                } elseif (!empty($source['url_noCDN'])) {\n                    $url = $source['url_noCDN'];\n                }\n            } elseif ($ftp = AVideoPlugin::loadPluginIfEnabled(\"FTP_Storage\")) {\n                $source = $ftp->getAddress(\"{$fileName}\");\n                $url = $source['url'];\n                if (empty($ignoreCDN)) {\n                    $url = replaceCDNIfNeed($url, 'CDN_FTP');\n                } elseif (!empty($source['url_noCDN'])) {\n                    $url = $source['url_noCDN'];\n                }\n            }\n        }\n    }\n    if (empty($url)) {\n        if ($forceHTTP) {\n            $paths = Video::getPaths($filename);\n            //$url = str_replace(getVideosDir(), getCDN() . \"videos/\", $filename);\n            if (empty($ignoreCDN)) {\n                $url = getCDN() . \"{$paths['relative']}\";\n            } else {\n                $url = \"{$global['webSiteRootURL']}{$paths['relative']}\";\n            }\n            if (preg_match('/index.m3u8$/', $filename) && !preg_match('/index.m3u8$/', $url)) {\n                $url .= 'index.m3u8';\n            }\n        } else {\n            $url = $filename;\n        }\n    }\n\n    //$url = str_replace(array($global['systemRootPath'], '/videos/videos/'), array(\"\", '/videos/'), $url);\n\n    $pathToRemoteURL[$filename] = $url;\n    return $url;\n}\n\nfunction getFilenameFromPath($path) {\n    global $global;\n    $fileName = Video::getCleanFilenameFromFile($path);\n    return $fileName;\n}\n\nfunction showCloseButton() {\n    global $global, $showCloseButtonIncluded;\n    if (!empty($showCloseButtonIncluded)) {\n        return '<!-- showCloseButton is already included -->';\n    }\n    if (isSerie()) {\n        return '<!-- showCloseButton is a serie -->';\n    }\n\n    if (!isLive() && $obj = AVideoPlugin::getDataObjectIfEnabled(\"Gallery\")) {\n        if (!empty($obj->playVideoOnFullscreen)) {\n            $_REQUEST['showCloseButton'] = 1;\n        }\n    }\n    if (isLive() && $obj = AVideoPlugin::getDataObjectIfEnabled(\"Live\")) {\n        if (!empty($obj->playLiveInFullScreen)) {\n            $_REQUEST['showCloseButton'] = 1;\n        }\n    }\n    if (!empty($_REQUEST['showCloseButton'])) {\n        $showCloseButtonIncluded = 1;\n        include $global['systemRootPath'] . 'view/include/youtubeModeOnFullscreenCloseButton.php';\n    }\n    return '<!-- showCloseButton finished -->';\n}\n\nfunction getThemes() {\n    global $_getThemes, $global;\n    if (isset($_getThemes)) {\n        return $_getThemes;\n    }\n    $_getThemes = [];\n    foreach (glob(\"{$global['systemRootPath']}view/css/custom/*.css\") as $filename) {\n        $fileEx = basename($filename, \".css\");\n        $_getThemes[] = $fileEx;\n    }\n    return $_getThemes;\n}\n\nfunction getCurrentTheme() {\n    global $config;\n    if (!empty($_REQUEST['customCSS'])) {\n        _setcookie('customCSS', $_REQUEST['customCSS']);\n        return $_REQUEST['customCSS'];\n    }\n    if (!empty($_COOKIE['customCSS'])) {\n        return $_COOKIE['customCSS'];\n    }\n    return $config->getTheme();\n}\n\n/*\n * $users_id=\"\" or 0 means send messages to all users\n * $users_id=\"-1\" means send to no one\n */\n\nfunction sendSocketMessage($msg, $callbackJSFunction = \"\", $users_id = \"-1\", $send_to_uri_pattern = \"\") {\n    if (AVideoPlugin::isEnabledByName('YPTSocket')) {\n        if (!is_string($msg)) {\n            $msg = json_encode($msg);\n        }\n        $obj = YPTSocket::send($msg, $callbackJSFunction, $users_id, $send_to_uri_pattern);\n        if ($obj->error && !empty($obj->msg)) {\n            _error_log(\"sendSocketMessage \" . $obj->msg);\n        }\n        return $obj;\n    }\n    return false;\n}\n\nfunction sendSocketMessageToUsers_id($msg, $users_id, $callbackJSFunction = \"\") {\n\n    if (empty($users_id)) {\n        return false;\n    }\n    _error_log(\"sendSocketMessageToUsers_id start \" . json_encode($users_id));\n    if (!is_array($users_id)) {\n        $users_id = [$users_id];\n    }\n\n    $resp = [];\n    foreach ($users_id as $value) {\n        $resp[] = sendSocketMessage($msg, $callbackJSFunction, $value);\n    }\n\n    return $resp;\n}\n\nfunction sendSocketErrorMessageToUsers_id($msg, $users_id, $callbackJSFunction = \"avideoResponse\") {\n    $newMessage = new stdClass();\n    $newMessage->error = true;\n    $newMessage->msg = $msg;\n    return sendSocketMessageToUsers_id($newMessage, $users_id, $callbackJSFunction);\n}\n\nfunction sendSocketSuccessMessageToUsers_id($msg, $users_id, $callbackJSFunction = \"avideoResponse\") {\n    $newMessage = new stdClass();\n    $newMessage->error = false;\n    $newMessage->msg = $msg;\n    return sendSocketMessageToUsers_id($newMessage, $users_id, $callbackJSFunction);\n}\n\nfunction sendSocketMessageToAll($msg, $callbackJSFunction = \"\", $send_to_uri_pattern = \"\") {\n    return sendSocketMessage($msg, $callbackJSFunction, \"\", $send_to_uri_pattern);\n}\n\nfunction sendSocketMessageToNone($msg, $callbackJSFunction = \"\") {\n    return sendSocketMessage($msg, $callbackJSFunction, -1);\n}\n\nfunction execAsync($command) {\n    //$command = escapeshellarg($command);\n    // If windows, else\n    if (isWindows()) {\n        //echo $command;\n        //$pid = system(\"start /min  \".$command. \" > NUL\");\n        //$commandString = \"start /B \" . $command;\n        //pclose($pid = popen($commandString, \"r\"));\n        _error_log($command);\n        $pid = exec($command, $output, $retval);\n        _error_log('execAsync: ' . json_encode($output) . ' ' . $retval);\n    } else {\n        $newCommand = $command . \" > /dev/null 2>&1 & echo $!; \";\n        _error_log($newCommand);\n        $pid = exec($newCommand);\n    }\n    return $pid;\n}\n\nfunction killProcess($pid) {\n    $pid = intval($pid);\n    if (empty($pid)) {\n        return false;\n    }\n    if (isWindows()) {\n        exec(\"taskkill /F /PID $pid\");\n    } else {\n        exec(\"kill -9 $pid\");\n    }\n    return true;\n}\n\nfunction isWindows() {\n    return strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';\n}\n\nfunction getPIDUsingPort($port) {\n    $port = intval($port);\n    if (empty($port)) {\n        return false;\n    }\n    if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n        $command = 'netstat -ano | findstr ' . $port;\n        exec($command, $output, $retval);\n        $pid = 0;\n        foreach ($output as $value) {\n            if (preg_match('/LISTENING[^0-9]+([0-9]+)/i', $value, $matches)) {\n                if (!empty($matches[1])) {\n                    $pid = intval($matches[1]);\n                    return $pid;\n                }\n            }\n        }\n    } else {\n        $command = 'lsof -n -i :' . $port . ' | grep LISTEN';\n        exec($command, $output, $retval);\n        $pid = 0;\n        foreach ($output as $value) {\n            if (preg_match('/[^ ] +([0-9]+).*/i', $value, $matches)) {\n                if (!empty($matches[1])) {\n                    $pid = intval($matches[1]);\n                    return $pid;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nfunction isURL200($url, $forceRecheck = false) {\n    global $_isURL200;\n    $name = \"isURL200\" . DIRECTORY_SEPARATOR . md5($url);\n    if (empty($forceRecheck)) {\n        $result = ObjectYPT::getCache($name, 30);\n        if (!empty($result)) {\n            $object = _json_decode($result);\n            return $object->result;\n        }\n    }\n\n\n    $object = new stdClass();\n    $object->url = $url;\n    $object->forceRecheck = $forceRecheck;\n\n    //error_log(\"isURL200 checking URL {$url}\");\n    $headers = @get_headers($url);\n    if (!is_array($headers)) {\n        $headers = [$headers];\n    }\n\n    $object->result = false;\n    foreach ($headers as $value) {\n        if (\n                strpos($value, '200') ||\n                strpos($value, '302') ||\n                strpos($value, '304')\n        ) {\n            $object->result = true;\n            break;\n        } else {\n            //_error_log('isURL200: '.$value);\n        }\n    }\n\n    ObjectYPT::setCache($name, json_encode($object));\n\n    return $object->result;\n}\n\nfunction isURL200Clear() {\n    $tmpDir = ObjectYPT::getCacheDir();\n    $cacheDir = $tmpDir . \"isURL200\" . DIRECTORY_SEPARATOR;\n    _error_log('isURL200Clear: ' . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n    rrmdir($cacheDir);\n}\n\nfunction deleteStatsNotifications() {\n    Live::deleteStatsCache();\n    $cacheName = \"getStats\" . DIRECTORY_SEPARATOR . \"getStatsNotifications\";\n    ObjectYPT::deleteCache($cacheName);\n}\n\nfunction getStatsNotifications($force_recreate = false, $listItIfIsAdminOrOwner = true) {\n    $cacheName = \"getStats\" . DIRECTORY_SEPARATOR . \"getStatsNotifications\";\n    unset($_POST['sort']);\n    if ($force_recreate) {\n        Live::deleteStatsCache();\n    } else {\n        $json = ObjectYPT::getCache($cacheName, 0, true);\n    }\n    if (empty($json) || !empty($json->error) || !isset($json->error)) {\n        //_error_log('getStatsNotifications: 1 ' . json_encode(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)));\n        $json = Live::getStats();\n        $json = object_to_array($json);\n\n        if (empty($json['applications']) && is_array($json)) {\n            $oldjson = $json;\n            $json = [];\n            $json['applications'] = [];\n            foreach ($oldjson as $key => $value) {\n                if (empty($value['applications'])) {\n                    continue;\n                }\n                $json['applications'] = array_merge($json['applications'], $value['applications']);\n                unset($json[$key]);\n            }\n        }\n\n        $appArray = AVideoPlugin::getLiveApplicationArray();\n        if (!empty($appArray)) {\n            if (empty($json)) {\n                $json = [];\n            }\n            $json['error'] = false;\n            if (empty($json['msg'])) {\n                $json['msg'] = \"OFFLINE\";\n            }\n            $json['nclients'] = count($appArray);\n            if (empty($json['applications'])) {\n                $json['applications'] = [];\n            }\n            $json['applications'] = array_merge($json['applications'], $appArray);\n        }\n\n        $count = 0;\n        if (!isset($json['total'])) {\n            $json['total'] = 0;\n        }\n        if (!empty($json['applications'])) {\n            $json['total'] += count($json['applications']);\n        }\n        while (!empty($json[$count])) {\n            $json['total'] += count($json[$count]['applications']);\n            $count++;\n        }\n        if (!empty($json['applications'])) {\n            $applications = array();\n            foreach ($json['applications'] as $key => $value) {\n                // remove duplicated\n                if (in_array($value['href'], $applications)) {\n                    unset($json['applications'][$key]);\n                    continue;\n                }\n                $applications[] = $value['href'];\n                if (empty($value['users_id']) && !empty($value['user'])) {\n                    $u = User::getFromUsername($value['user']);\n                    $json['applications'][$key]['users_id'] = $u['id'];\n                }\n                if (!empty($json['applications'][$key]['key']) && $json['applications'][$key][\"type\"] === \"live\") {\n                    // make sure it is online\n                    $lth = new LiveTransmitionHistory();\n                    $lth->setTitle($json['applications'][$key]['title']);\n                    $lth->setKey($json['applications'][$key]['key']);\n                    $lth->setUsers_id($json['applications'][$key]['users_id']);\n                    $lth->setLive_servers_id($json['applications'][$key]['live_servers_id']);\n                    $json['applications'][$key]['live_transmitions_history_id'] = $lth->save();\n                }\n            }\n        }\n        $cache = ObjectYPT::setCache($cacheName, $json);\n        //_error_log('Live::createStatsCache ' . json_encode($cache));\n    } else {\n        //_error_log('getStatsNotifications: 2 cached result');\n        $json = object_to_array($json);\n    }\n\n    foreach ($json['applications'] as $key => $value) {\n        if (!Live::isApplicationListed(@$value['key'], $listItIfIsAdminOrOwner)) {\n            $json['hidden_applications'][] = $value;\n            unset($json['applications'][$key]);\n        }\n    }\n\n    $json['countLiveStream'] = count($json['applications']);\n    return $json;\n}\n\nfunction getSocketConnectionLabel() {\n    $html = '<span class=\"socketStatus\">\n            <span class=\"socket_icon socket_loading_icon\">\n                <i class=\"fas fa-sync fa-spin\"></i>\n            </span>\n            <span class=\"socket_icon socket_not_loading socket_disconnected_icon\">\n                <span class=\"fa-stack\">\n  <i class=\"fas fa-slash fa-stack-1x\"></i>\n  <i class=\"fas fa-plug fa-stack-1x\"></i>\n</span> ' . __('Disconnected') . '\n            </span>\n            <span class=\"socket_icon socket_not_loading socket_connected_icon\">\n                <span class=\"fa-stack\">\n  <i class=\"fas fa-plug fa-stack-1x\"></i>\n</span>  ' . __('Connected') . '\n            </span>\n        </span>';\n    return $html;\n}\n\nfunction getSocketVideoClassName($videos_id) {\n    return 'total_on_videos_id_' . $videos_id;\n}\n\nfunction getSocketLiveClassName($key, $live_servers_id) {\n    return 'total_on_live_' . $key . '_' . intval($live_servers_id);\n}\n\nfunction getSocketLiveLinksClassName($live_links_id) {\n    return 'total_on_live_links_id_' . $live_links_id;\n}\n\nfunction getLiveUsersLabelVideo($videos_id, $totalViews = null, $viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    if (AVideoPlugin::isEnabledByName('LiveUsers') && method_exists(\"LiveUsers\", \"getLabels\")) {\n        return LiveUsers::getLabels(getSocketVideoClassName($videos_id), $totalViews, $viewsClass, $counterClass, 'video');\n    }\n}\n\nfunction getLiveUsersLabelLive($key, $live_servers_id, $viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    if (AVideoPlugin::isEnabledByName('LiveUsers') && method_exists(\"LiveUsers\", \"getLabels\")) {\n        $totalViews = 0;\n        if (User::isLogged()) {\n            $totalViews = LiveUsers::getTotalUsers($key, $live_servers_id);\n        }\n        return LiveUsers::getLabels(getSocketLiveClassName($key, $live_servers_id), $totalViews, $viewsClass, $counterClass, 'live');\n    }\n}\n\nfunction getLiveUsersLabelLiveLinks($liveLinks_id, $totalViews = null, $viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    if (AVideoPlugin::isEnabledByName('LiveUsers') && method_exists(\"LiveUsers\", \"getWatchingNowLabel\")) {\n        return LiveUsers::getWatchingNowLabel(getSocketLiveLinksClassName($liveLinks_id), \"label label-primary\", '', $viewsClass, 'livelinks');\n    }\n}\n\nfunction getLiveUsersLabel($viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    if (AVideoPlugin::isEnabledByName('LiveUsers')) {\n        $live = isLive();\n        if (!empty($live)) {\n            if (!empty($live['key'])) {\n                return getLiveUsersLabelLive($live['key'], $live['live_servers_id'], $viewsClass, $counterClass);\n            } elseif (!empty($live['liveLinks_id'])) {\n                return getLiveUsersLabelLiveLinks($live['liveLinks_id'], null, $viewsClass, $counterClass);\n            }\n        } else {\n            $videos_id = getVideos_id();\n            if (!empty($videos_id)) {\n                $v = new Video(\"\", \"\", $videos_id);\n                $totalViews = $v->getViews_count();\n                return getLiveUsersLabelVideo($videos_id, $totalViews, $viewsClass, $counterClass);\n            }\n        }\n    }\n    return \"\";\n}\n\nfunction getLiveUsersLabelHTML($viewsClass = \"label label-default\", $counterClass = \"label label-primary\") {\n    global $global;\n    ob_start();\n    include $global['systemRootPath'] . 'plugin/Live/view/onlineLabel.php';\n    $htmlMediaTag = '<div style=\"z-index: 999; position: absolute; top:5px; left: 5px; opacity: 0.8; filter: alpha(opacity=80);\" class=\"liveUsersLabel\">';\n    $htmlMediaTag .= ob_get_contents();\n    ob_end_clean();\n    $htmlMediaTag .= getLiveUsersLabel($viewsClass, $counterClass);\n    $htmlMediaTag .= '</div>';\n    return $htmlMediaTag;\n}\n\nfunction getHTMLTitle($titleArray) {\n    global $config, $global;\n\n    if (!is_array($titleArray)) {\n        $titleArray = [];\n    }\n    $titleArray[] = $config->getWebSiteTitle();\n\n    $title = implode($config->getPageTitleSeparator(), $titleArray);\n    $global['pageTitle'] = $title;\n    return \"<title>{$title}</title>\";\n}\n\nfunction getButtonSignInAndUp() {\n    $signIn = getButtonSignIn();\n    $signUp = getButtonSignUp();\n    $html = $signIn . $signUp;\n    if (!empty($signIn) && !empty($signIn)) {\n        return '<div class=\"btn-group justified\">' . $html . '</div>';\n    } else {\n        return $html;\n    }\n}\n\nfunction getButtonSignUp() {\n    global $global;\n    $obj = AVideoPlugin::getDataObject('CustomizeUser');\n    if (!empty($obj->disableNativeSignUp)) {\n        return '';\n    }\n\n    $url = $global['webSiteRootURL'] . 'signUp';\n    $url = addQueryStringParameter($url, 'redirectUri', getRedirectUri());\n\n    $html = '<a class=\"btn navbar-btn btn-default\" href=\"' . $url . '\" ><i class=\"fas fa-user-plus\"></i> ' . __(\"Sign Up\") . '</a> ';\n    return $html;\n}\n\nfunction getButtonSignIn() {\n    global $global;\n    $obj = AVideoPlugin::getDataObject('CustomizeUser');\n    if (!empty($obj->disableNativeSignIn)) {\n        return '';\n    }\n\n    $url = $global['webSiteRootURL'] . 'user';\n    $url = addQueryStringParameter($url, 'redirectUri', getRedirectUri());\n\n    $html = '<a class=\"btn navbar-btn btn-success\" href=\"' . $url . '\" ><i class=\"fas fa-sign-in-alt\" ></i> ' . __(\"Sign In\") . '</a> ';\n    return $html;\n}\n\nfunction getTitle() {\n    global $global;\n    if (empty($global['pageTitle'])) {\n        $url = getSelfURI();\n\n        $global['pageTitle'] = str_replace($global['webSiteRootURL'], '', $url);\n\n        if (preg_match('/\\/plugin\\/([^\\/])/i', $url, $matches)) {\n            $global['pageTitle'] = __('Plugin') . ' ' . __($matches[1]);\n        }\n\n        $title = $global['pageTitle'];\n    }\n\n    return $global['pageTitle'];\n}\n\nfunction outputAndContinueInBackground($msg = '') {\n    global $outputAndContinueInBackground;\n\n    if (!empty($outputAndContinueInBackground)) {\n        return false;\n    }\n    $outputAndContinueInBackground = 1;\n    @session_write_close();\n    //_mysql_close();\n    // Instruct PHP to continue execution\n    ignore_user_abort(true);\n    if (function_exists('fastcgi_finish_request')) {\n        fastcgi_finish_request();\n    }\n    ob_start();\n    echo $msg;\n    @header(\"Connection: close\");\n    @header(\"Content-Length: \" . ob_get_length());\n    @header(\"HTTP/1.1 200 OK\");\n    ob_end_flush();\n    flush();\n}\n\nfunction cleanUpRowFromDatabase($row) {\n    if (is_array($row)) {\n        foreach ($row as $key => $value) {\n            if (preg_match('/pass/i', $key)) {\n                unset($row[$key]);\n            }\n        }\n    }\n    return $row;\n}\n\nfunction getImageTransparent1pxURL() {\n    global $global;\n    return getCDN() . \"view/img/transparent1px.png\";\n}\n\nfunction getDatabaseTime() {\n    global $global, $_getDatabaseTime;\n    if (isset($_getDatabaseTime)) {\n        return $_getDatabaseTime;\n    }\n    $sql = \"SELECT CURRENT_TIMESTAMP\";\n    $res = sqlDAL::readSql($sql);\n    $data = sqlDAL::fetchAssoc($res);\n    sqlDAL::close($res);\n    if ($res) {\n        $row = $data;\n    } else {\n        $row = false;\n    }\n    $_getDatabaseTime = strtotime($row['CURRENT_TIMESTAMP']);\n    return $_getDatabaseTime;\n}\n\nfunction get_js_availableLangs() {\n    global $global;\n    if (empty($global['js_availableLangs'])) {\n        include_once $global['systemRootPath'] . 'objects/bcp47.php';\n    }\n    return $global['js_availableLangs'];\n}\n\nfunction listAllWordsToTranslate() {\n    global $global;\n    $cacheName = 'listAllWordsToTranslate';\n    $cache = ObjectYPT::getCache($cacheName, 0);\n    if (!empty($cache)) {\n        return object_to_array($cache);\n    }\n    ini_set('max_execution_time', 300);\n\n    function listAll($dir) {\n        $vars = [];\n        if (preg_match('/vendor.*$/', $dir)) {\n            return $vars;\n        }\n        if ($handle = opendir($dir)) {\n            while (false !== ($entry = readdir($handle))) {\n                if ($entry !== '.' && $entry !== '..') {\n                    $filename = $dir . '/' . $entry;\n                    if (is_dir($filename)) {\n                        $vars = listAll($filename);\n                    } elseif (preg_match(\"/\\.php$/\", $entry)) {\n                        $data = file_get_contents($filename);\n                        $regex = '/__\\([\"\\']{1}(.*)[\"\\']{1}\\)/U';\n                        preg_match_all(\n                                $regex,\n                                $data,\n                                $matches\n                        );\n\n                        foreach ($matches[0] as $key => $value) {\n                            $vars[$matches[1][$key]] = $matches[1][$key];\n                        }\n                    }\n                }\n            }\n\n            closedir($handle);\n        }\n        return $vars;\n    }\n\n    $vars = listAll($global['systemRootPath']);\n    sort($vars);\n    ObjectYPT::setCache($cacheName, $vars);\n    return $vars;\n}\n\nfunction secondsInterval($time1, $time2) {\n    if (!is_numeric($time1)) {\n        $time1 = strtotime($time1);\n    }\n    if (!is_numeric($time2)) {\n        $time2 = strtotime($time2);\n    }\n\n    return $time1 - $time2;\n}\n\nfunction secondsIntervalHuman($time, $useDatabaseTime = true) {\n    $dif = secondsIntervalFromNow($time, $useDatabaseTime);\n    if ($dif < 0) {\n        return humanTimingAfterwards($time, 0, $useDatabaseTime);\n    } else {\n        return humanTimingAgo($time, 0, $useDatabaseTime);\n    }\n}\n\nfunction isTimeForFuture($time, $useDatabaseTime = true) {\n    $dif = secondsIntervalFromNow($time, $useDatabaseTime);\n    if ($dif < 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction secondsIntervalFromNow($time, $useDatabaseTimeOrTimezoneString = true) {\n    $timeNow = time();\n    //var_dump($time, $useDatabaseTimeOrTimezoneString);\n    if (!empty($useDatabaseTimeOrTimezoneString)) {\n        if (is_numeric($useDatabaseTimeOrTimezoneString) || is_bool($useDatabaseTimeOrTimezoneString)) {\n            //echo $time . '-' . __LINE__ . '=>';\n            $timeNow = getDatabaseTime();\n        } elseif (is_string($useDatabaseTimeOrTimezoneString)) {\n            //echo '-' . __LINE__ . PHP_EOL . PHP_EOL;\n            $timeNow = getTimeInTimezone($timeNow, $useDatabaseTimeOrTimezoneString);\n        }\n    }\n    return secondsInterval($timeNow, $time);\n}\n\nfunction getScriptRunMicrotimeInSeconds() {\n    global $global;\n    $time_now = microtime(true);\n    return ($time_now - $global['avideoStartMicrotime']);\n}\n\nfunction fixSystemPath() {\n    global $global;\n    $global['systemRootPath'] = fixPath($global['systemRootPath']);\n}\n\nfunction fixPath($path, $addLastSlash = false) {\n    if (empty($path)) {\n        return false;\n    }\n    if (isWindows()) {\n        $path = str_replace('/', DIRECTORY_SEPARATOR, $path);\n        $path = str_replace('\\\\\\\\\\\\', DIRECTORY_SEPARATOR, $path);\n    } else {\n        $path = str_replace('\\\\', DIRECTORY_SEPARATOR, $path);\n    }\n    if ($addLastSlash) {\n        $path = rtrim($path, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;\n    }\n    return $path;\n}\n\nfunction idToHash($id) {\n    global $global, $_idToHash;\n\n    if (!isset($_idToHash)) {\n        $_idToHash = [];\n    }\n\n    if (!empty($_idToHash[$id])) {\n        return $_idToHash[$id];\n    }\n\n    if (!empty($global['useLongHash'])) {\n        $base = 2;\n        $cipher_algo = 'des';\n    } else {\n        $base = 32;\n        $cipher_algo = 'rc4';\n    }\n    if (empty($global['salt'])) {\n        $global['salt'] = '11234567890abcdef';\n    }\n    $idConverted = base_convert($id, 10, $base);\n    $hash = (@openssl_encrypt($idConverted, $cipher_algo, $global['salt']));\n    //$hash = preg_replace('/^([+]+)/', '', $hash);\n    $hash = preg_replace('/(=+)$/', '', $hash);\n    $hash = str_replace(['/', '+', '='], ['_', '-', '.'], $hash);\n    //return base64_encode($hash);\n    $_idToHash[$id] = $hash;\n    return $hash;\n}\n\nfunction hashToID($hash) {\n    global $global;\n    if (!empty($global['useLongHash'])) {\n        $base = 2;\n        $cipher_algo = 'des';\n    } else {\n        $base = 32;\n        $cipher_algo = 'rc4';\n    }\n    //$hash = str_pad($hash,  4, \"=\");\n    $hash = str_replace(['_', '-', '.'], ['/', '+', '='], $hash);\n    //$hash = base64_decode($hash);\n    $decrypt = openssl_decrypt(($hash), $cipher_algo, $global['salt']);\n    $decrypt = base_convert($decrypt, $base, 10);\n    return intval($decrypt);\n}\n\nfunction videosHashToID($hash_of_videos_id) {\n    if (is_int($hash_of_videos_id)) {\n        return $hash_of_videos_id;\n    }\n    if (!is_string($hash_of_videos_id) && !is_numeric($hash_of_videos_id)) {\n        if (is_array($hash_of_videos_id)) {\n            return $hash_of_videos_id;\n        } else {\n            return 0;\n        }\n    }\n    if (preg_match('/^\\.([0-9a-z._-]+)/i', $hash_of_videos_id, $matches)) {\n        $hash_of_videos_id = hashToID($matches[1]);\n    }\n    return $hash_of_videos_id;\n}\n\n/**\n *\n * @global type $advancedCustom\n * @global type $global\n * @global type $_getCDNURL\n * @param type $type enum(CDN, CDN_S3,CDN_B2,CDN_FTP,CDN_YPTStorage,CDN_Live,CDN_LiveServers)\n * @param type $id the ID of the URL in case the CDN is an array\n * @return \\type\n */\nfunction getCDN($type = 'CDN', $id = 0) {\n    global $advancedCustom, $global, $_getCDNURL;\n    $index = $type . $id;\n    if (!isset($_getCDNURL)) {\n        $_getCDNURL = [];\n    }\n    if (empty($_getCDNURL[$index])) {\n        if (!empty($type) && AVideoPlugin::isEnabledByName('CDN')) {\n            $_getCDNURL[$index] = CDN::getURL($type, $id);\n        }\n    }\n    if ($type == 'CDN') {\n        if (!empty($global['ignoreCDN'])) {\n            return $global['webSiteRootURL'];\n        } elseif (!empty($advancedCustom) && isValidURL($advancedCustom->videosCDN)) {\n            $_getCDNURL[$index] = addLastSlash($advancedCustom->videosCDN);\n        } elseif (empty($_getCDNURL[$index])) {\n            $_getCDNURL[$index] = $global['webSiteRootURL'];\n        }\n    }\n    //var_dump($type, $id, $_getCDNURL[$index]);\n    return empty($_getCDNURL[$index]) ? false : $_getCDNURL[$index];\n}\n\nfunction getURL($relativePath, $ignoreCDN = false) {\n    global $global;\n    if (!isset($_SESSION['user']['sessionCache']['getURL'])) {\n        $_SESSION['user']['sessionCache']['getURL'] = [];\n    }\n    if (!empty($_SESSION['user']['sessionCache']['getURL'][$relativePath])) {\n        return $_SESSION['user']['sessionCache']['getURL'][$relativePath];\n    }\n\n    $file = \"{$global['systemRootPath']}{$relativePath}\";\n    if (empty($ignoreCDN)) {\n        $url = getCDN() . $relativePath;\n    } else {\n        $url = $global['webSiteRootURL'] . $relativePath;\n    }\n    if (file_exists($file)) {\n        $cache = @filemtime($file) . '_' . @filectime($file);\n        $url = addQueryStringParameter($url, 'cache', $cache);\n        $_SESSION['user']['sessionCache']['getURL'][$relativePath] = $url;\n    } else {\n        $url = addQueryStringParameter($url, 'cache', 'not_found');\n    }\n\n    return $url;\n}\n\nfunction getCDNOrURL($url, $type = 'CDN', $id = 0) {\n    if (!preg_match('/^http/i', $url)) {\n        return $url;\n    }\n    $cdn = getCDN($type, $id);\n    if (!empty($cdn)) {\n        return $cdn;\n    }\n    return addLastSlash($url);\n}\n\nfunction replaceCDNIfNeed($url, $type = 'CDN', $id = 0) {\n    $cdn = getCDN($type, $id);\n    if (empty($cdn)) {\n        return $url;\n    }\n\n    return str_replace(parse_url($url, PHP_URL_HOST), parse_url($cdn, PHP_URL_HOST), $url);\n}\n\nfunction isIPPrivate($ip) {\n    if ($ip == '192.168.1.4') {\n        return false;\n    }\n    if (!filter_var($ip, FILTER_VALIDATE_IP)) {\n        return false;\n    }\n    $result = filter_var(\n            $ip,\n            FILTER_VALIDATE_IP,\n            FILTER_FLAG_IPV4 | FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE\n    );\n    if (empty($result)) {\n        return true;\n    }\n    return false;\n}\n\nfunction countDownPage($toTime, $message, $image, $bgImage, $title) {\n    global $global;\n    include $global['systemRootPath'] . 'objects/functionCountDownPage.php';\n    exit;\n}\n\nfunction inputToRequest() {\n    $content = file_get_contents(\"php://input\");\n    if (!empty($content)) {\n        $json = json_decode($content);\n        if (empty($json)) {\n            return false;\n        }\n        foreach ($json as $key => $value) {\n            if (!isset($_REQUEST[$key])) {\n                $_REQUEST[$key] = $value;\n            }\n        }\n    }\n}\n\nfunction useVideoHashOrLogin() {\n    if (!empty($_REQUEST['video_id_hash'])) {\n        $videos_id = Video::getVideoIdFromHash($_REQUEST['video_id_hash']);\n        if (!empty($videos_id)) {\n            $users_id = Video::getOwner($videos_id);\n            $user = new User($users_id);\n            _error_log(\"useVideoHashOrLogin: $users_id, $videos_id\");\n            return $user->login(true);\n        }\n    }\n    return User::loginFromRequest();\n}\n\nfunction strip_specific_tags($string, $tags_to_strip = ['script', 'style', 'iframe', 'object', 'applet', 'link']) {\n    foreach ($tags_to_strip as $tag) {\n        $string = preg_replace('/<' . $tag . '[^>]*>(.*?)<\\/' . $tag . '>/s', '$1', $string);\n    }\n    return $string;\n}\n\nfunction strip_render_blocking_resources($string) {\n    $tags_to_strip = ['link', 'style'];\n    $head = preg_match('/<head>(.*)<\\/head>/s', $string, $matches);\n    $string = str_replace($matches[0], '{_head_}', $string);\n    foreach ($tags_to_strip as $tag) {\n        $string = preg_replace('/<' . $tag . '[^>]*>(.*?)<\\/' . $tag . '>/s', '', $string);\n        $string = preg_replace('/<' . $tag . '[^>]*\\/>/s', '', $string);\n    }\n    $string = str_replace('{_head_}', $matches[0], $string);\n    return $string;\n}\n\nfunction optimizeHTMLTags($html) {\n    return $html;\n    //$html = optimizeCSS($html);\n    //$html = optimizeJS($html);\n    return $html . '<--! optimized -->';\n}\n\nfunction optimizeCSS($html) {\n    global $global;\n    $css = '';\n    $cacheDir = getVideosDir() . 'cache/';\n    $cacheName = md5(getSelfURI() . User::getId()) . '.css';\n    $filename = \"{$cacheDir}{$cacheName}\";\n    $urlname = \"{$global['webSiteRootURL']}videos/cache/{$cacheName}\";\n    $HTMLTag = \"<link href=\\\"{$urlname}\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\"/>\";\n    $fileExists = file_exists($filename);\n    //$fileExists = false;\n    // get link tags\n    $pattern = '/((<(link)[^>]*(stylesheet|css)[^>]*\\/>)|(<(style)[^>]*>([^<]+)<\\/style>))/i';\n    preg_match_all($pattern, $html, $matches);\n    foreach ($matches[3] as $key => $type) {\n        if (strtolower($type) == 'link') {\n            $linkTag = $matches[0][$key];\n            $pattern = '/href=.(http[^\"\\']+)/i';\n            preg_match($pattern, $linkTag, $href);\n            if (empty($href)) {\n                continue;\n            }\n            if (!$fileExists) {\n                $content = url_get_contents($href[1]);\n                if (empty($content)) {\n                    continue;\n                }\n                $css .= PHP_EOL . \" /* link {$href[1]} */ \" . $content;\n            }\n            $html = str_replace($linkTag, '', $html);\n        } else {\n            if (!$fileExists) {\n                $css .= PHP_EOL . ' /* style */ ' . $matches[7][$key];\n            }\n            $html = str_replace($matches[1][$key], '', $html);\n        }\n    }\n    if (!$fileExists) {\n        _file_put_contents($filename, $css);\n    }\n    return str_replace('</title>', '</title><!-- optimized CSS -->' . PHP_EOL . $HTMLTag . PHP_EOL . '', $html);\n}\n\nfunction optimizeJS($html) {\n    global $global;\n    $js = '';\n    $cacheDir = getVideosDir() . 'cache/';\n    $cacheName = md5(getSelfURI() . User::getId()) . '.js';\n    $filename = \"{$cacheDir}{$cacheName}\";\n    $urlname = \"{$global['webSiteRootURL']}videos/cache/{$cacheName}\";\n    $HTMLTag = \"<script src=\\\"{$urlname}\\\"></script>\";\n    $fileExists = file_exists($filename);\n    $fileExists = false;\n    // get link tags\n    $pattern = '/((<script[^>]+(src=[^ ]+)[^>]*>( *)<\\/script>)|(<script[^>]*>([^<]+)<\\/script>))/si';\n    preg_match_all($pattern, $html, $matches);\n    foreach ($matches[2] as $key => $type) {\n        if (empty($type)) {\n            if (preg_match('/application_ld_json/i', $matches[1][$key])) {\n                continue;\n            }\n            $js .= PHP_EOL . \" /* js */ \" . $matches[6][$key];\n            $html = str_replace($matches[1][$key], '', $html);\n        } else {\n            $pattern = '/src=.(http[^\"\\']+)/i';\n            preg_match($pattern, $type, $href);\n            if (empty($href)) {\n                continue;\n            }\n            if (preg_match('/(jquery|video-js|videojs)/i', $href[1])) {\n                continue;\n            }\n            if (!$fileExists) {\n                $content = url_get_contents($href[1]);\n                if (empty($content)) {\n                    continue;\n                }\n                $js .= PHP_EOL . \" /* js link {$href[1]} */ \" . $content;\n            }\n            $html = str_replace($type, '', $html);\n        }\n    }\n    if (!$fileExists) {\n        _file_put_contents($filename, $js);\n    }\n    return str_replace('</body>', '<!-- optimized JS -->' . PHP_EOL . $HTMLTag . PHP_EOL . '</body>', $html);\n}\n\nfunction mysqlBeginTransaction() {\n    global $global;\n    _error_log('Begin transaction ' . getSelfURI());\n    $global['mysqli']->autocommit(false);\n}\n\nfunction mysqlRollback() {\n    global $global;\n    _error_log('Rollback transaction ' . getSelfURI(), AVideoLog::$ERROR);\n    $global['mysqli']->rollback();\n    $global['mysqli']->autocommit(true);\n}\n\nfunction mysqlCommit() {\n    global $global;\n    _error_log('Commit transaction ' . getSelfURI());\n    $global['mysqli']->commit();\n    $global['mysqli']->autocommit(true);\n}\n\nfunction number_format_short($n, $precision = 1) {\n    $n = floatval($n);\n    if ($n < 900) {\n        // 0 - 900\n        $n_format = number_format($n, $precision);\n        $suffix = '';\n    } elseif ($n < 900000) {\n        // 0.9k-850k\n        $n_format = number_format($n / 1000, $precision);\n        $suffix = 'K';\n    } elseif ($n < 900000000) {\n        // 0.9m-850m\n        $n_format = number_format($n / 1000000, $precision);\n        $suffix = 'M';\n    } elseif ($n < 900000000000) {\n        // 0.9b-850b\n        $n_format = number_format($n / 1000000000, $precision);\n        $suffix = 'B';\n    } else {\n        // 0.9t+\n        $n_format = number_format($n / 1000000000000, $precision);\n        $suffix = 'T';\n    }\n\n    // Remove unnecessary zeroes after decimal. \"1.0\" -> \"1\"; \"1.00\" -> \"1\"\n    // Intentionally does not affect partials, eg \"1.50\" -> \"1.50\"\n    if ($precision > 0) {\n        $dotzero = '.' . str_repeat('0', $precision);\n        $n_format = str_replace($dotzero, '', $n_format);\n    }\n\n    return $n_format . $suffix;\n}\n\nfunction seconds2human($ss) {\n    $s = $ss % 60;\n    $m = floor(($ss % 3600) / 60);\n    $h = floor(($ss % 86400) / 3600);\n    $d = floor(($ss % 2592000) / 86400);\n    $M = floor($ss / 2592000);\n\n    $times = [];\n\n    if (!empty($M)) {\n        $times[] = \"$M \" . __('m');\n    }\n    if (!empty($d)) {\n        $times[] = \"$d \" . __('d');\n    }\n    if (!empty($h)) {\n        $times[] = \"$h \" . __('h');\n    }\n    if (!empty($m)) {\n        $times[] = \"$m \" . __('min');\n    }\n    if (!empty($s)) {\n        $times[] = \"$s \" . __('sec');\n    }\n\n    return implode(', ', $times);\n}\n\n/**\n * convert a time in a timezone into my time\n * @param type $time\n * @param type $timezone\n * @return type\n */\nfunction getTimeInTimezone($time, $timezone) {\n    if (!is_numeric($time)) {\n        $time = strtotime($time);\n    }\n    if (empty($timezone) || empty(date_default_timezone_get()) || $timezone == date_default_timezone_get()) {\n        return $time;\n    }\n    $date = new DateTime(date('Y-m-d H:i:s', $time));\n    $date->setTimezone(new DateTimeZone($timezone));\n    //$date->setTimezone(date_default_timezone_get());\n    $dateString = $date->format('Y-m-d H:i:s');\n    return strtotime($dateString);\n}\n\nfunction listFolderFiles($dir) {\n    if (empty($dir)) {\n        return [];\n    }\n    $ffs = scandir($dir);\n\n    unset($ffs[array_search('.', $ffs, true)]);\n    unset($ffs[array_search('..', $ffs, true)]);\n\n    $files = [];\n    // prevent empty ordered elements\n    if (count($ffs) >= 1) {\n        foreach ($ffs as $ff) {\n            $dir = rtrim($dir, DIRECTORY_SEPARATOR);\n            $file = $dir . DIRECTORY_SEPARATOR . $ff;\n            if (is_dir($file)) {\n                $files[] = listFolderFiles($file);\n            } else {\n                $files[] = $file;\n            }\n        }\n    }\n    return $files;\n}\n\nfunction convertToMyTimezone($date, $fromTimezone) {\n    $time = getTimestampFromTimezone($date, $fromTimezone);\n    return date('Y-m-d H:i:s', $time);\n}\n\nfunction getTimestampFromTimezone($date, $fromTimezone) {\n    $date = new DateTime($date, new DateTimeZone($fromTimezone));\n    return $date->getTimestamp();\n}\n\nfunction getCSSAnimation($type = 'animate__flipInX', $loaderSequenceName = 'default', $delay = 0.1) {\n    global $_getCSSAnimationClassDelay;\n    getCSSAnimationClassAndStyleAddWait($delay, $loaderSequenceName);\n    return ['class' => 'animate__animated ' . $type, 'style' => \"-webkit-animation-delay: {$_getCSSAnimationClassDelay[$loaderSequenceName]}s; animation-delay: {$_getCSSAnimationClassDelay[$loaderSequenceName]}s;\"];\n}\n\nfunction getCSSAnimationClassAndStyleAddWait($delay, $loaderSequenceName = 'default') {\n    global $_getCSSAnimationClassDelay;\n    if (!isset($_getCSSAnimationClassDelay)) {\n        $_getCSSAnimationClassDelay = [];\n    }\n    if (empty($_getCSSAnimationClassDelay[$loaderSequenceName])) {\n        $_getCSSAnimationClassDelay[$loaderSequenceName] = 0;\n    }\n    $_getCSSAnimationClassDelay[$loaderSequenceName] += $delay;\n}\n\nfunction getCSSAnimationClassAndStyle($type = 'animate__flipInX', $loaderSequenceName = 'default', $delay = 0.1) {\n    $array = getCSSAnimation($type, $loaderSequenceName, $delay);\n    return \"{$array['class']}\\\" style=\\\"{$array['style']}\";\n}\n\nfunction isImage($file) {\n    [$width, $height, $type, $attr] = getimagesize($file);\n    if ($type == IMAGETYPE_PNG) {\n        return 'png';\n    }\n    if ($type == IMAGETYPE_JPEG) {\n        return 'jpg';\n    }\n    if ($type == IMAGETYPE_GIF) {\n        return 'gif';\n    }\n    return false;\n}\n\nfunction isHTMLEmpty($html_string) {\n    $html_string_no_tags = strip_specific_tags($html_string, ['br', 'p', 'span', 'div']);\n    //var_dump($html_string_no_tags, $html_string);\n    return empty(trim(str_replace(array(\"\\r\", \"\\n\"), array('', ''), $html_string_no_tags)));\n}\n\nfunction emptyHTML($html_string){\n    return isHTMLEmpty($html_string);\n}\n\nfunction totalImageColors($image_path) {\n    $img = imagecreatefromjpeg($image_path);\n    $w = imagesx($img);\n    $h = imagesy($img);\n\n    // capture the raw data of the image\n    ob_start();\n    imagegd2($img, null, $w);\n    $data = ob_get_clean();\n    $totalLength = strlen($data);\n\n    // calculate the length of the actual pixel data\n    // from that we can derive the header size\n    $pixelDataLength = $w * $h * 4;\n    $headerLength = $totalLength - $pixelDataLength;\n\n    // use each four-byte segment as the key to a hash table\n    $counts = [];\n    for ($i = $headerLength; $i < $totalLength; $i += 4) {\n        $pixel = substr($data, $i, 4);\n        $count = & $counts[$pixel];\n        $count += 1;\n    }\n    $colorCount = count($counts);\n    return $colorCount;\n}\n\nfunction isImageCorrupted($image_path) {\n    $fsize = filesize($image_path);\n    if (strpos($image_path, 'thumbsSmall') !== false) {\n        if ($fsize < 1000) {\n            return true;\n        }\n    } else {\n        if ($fsize < 2000) {\n            return true;\n        }\n    }\n\n    if (totalImageColors($image_path) === 1) {\n        return true;\n    }\n\n    if (!isGoodImage($image_path)) {\n        return true;\n    }\n    return false;\n}\n\n// detect partial grey immages\nfunction isGoodImage($fn) {\n    [$w, $h] = getimagesize($fn);\n    $im = imagecreatefromstring(file_get_contents($fn));\n    $grey = 0;\n    for ($i = 0; $i < 5; ++$i) {\n        for ($j = 0; $j < 5; ++$j) {\n            $x = $w - 5 + $i;\n            $y = $h - 5 + $j;\n            [$r, $g, $b] = array_values(imagecolorsforindex($im, imagecolorat($im, $x, $y)));\n            if ($r == $g && $g == $b && $b == 128) {\n                ++$grey;\n            }\n        }\n    }\n    return $grey < 12;\n}\n\nfunction defaultIsPortrait() {\n    global $_defaultIsPortrait;\n\n    if (!isset($_defaultIsPortrait)) {\n        $_defaultIsPortrait = false;\n        if ($obj = AVideoPlugin::getDataObjectIfEnabled('YouPHPFlix2') && empty($obj->landscapePosters)) {\n            $_defaultIsPortrait = true;\n        }\n    }\n\n    return $_defaultIsPortrait;\n}\n\nfunction isDummyFile($filePath) {\n    global $_isDummyFile;\n\n    if (!isset($_isDummyFile)) {\n        $_isDummyFile = array();\n    }\n    if (isset($_isDummyFile[$filePath])) {\n        return $_isDummyFile[$filePath];\n    }\n\n    $return = false;\n\n    if (file_exists($filePath)) {\n        $fileSize = filesize($filePath);\n        if ($fileSize > 5 && $fileSize < 20) {\n            $return = true;\n        } else\n        if ($fileSize < 100) {\n            $return = preg_match(\"/Dummy File/i\", file_get_contents($filePath));\n        }\n    }\n    $_isDummyFile[$filePath] = $return;\n    return $return;\n}\n\nfunction forbiddenPageIfCannotEmbed($videos_id) {\n    global $customizedAdvanced, $advancedCustomUser, $global;\n    if (empty($customizedAdvanced)) {\n        $customizedAdvanced = AVideoPlugin::getObjectDataIfEnabled('CustomizeAdvanced');\n    }\n    if (empty($advancedCustomUser)) {\n        $customizedAdvanced = AVideoPlugin::getObjectDataIfEnabled('CustomizeUser');\n    }\n    if (!isAVideoMobileApp()) {\n        if (!isSameDomain(@$_SERVER['HTTP_REFERER'], $global['webSiteRootURL'])) {\n            if (!empty($advancedCustomUser->blockEmbedFromSharedVideos) && !CustomizeUser::canShareVideosFromVideo($videos_id)) {\n                $reason = array();\n                if (!empty($advancedCustomUser->blockEmbedFromSharedVideos)) {\n                    error_log(\"forbiddenPageIfCannotEmbed: Embed is forbidden: \\$advancedCustomUser->blockEmbedFromSharedVideos\");\n                    $reason[] = __('Admin block video sharing');\n                }\n                if (!CustomizeUser::canShareVideosFromVideo($videos_id)) {\n                    error_log(\"forbiddenPageIfCannotEmbed: Embed is forbidden: !CustomizeUser::canShareVideosFromVideo(\\$video['id'])\");\n                    $reason[] = __('User block video sharing');\n                }\n                forbiddenPage(\"Embed is forbidden \" . implode('<br>', $reason));\n            }\n        }\n\n        $objSecure = AVideoPlugin::loadPluginIfEnabled('SecureVideosDirectory');\n        if (!empty($objSecure)) {\n            $objSecure->verifyEmbedSecurity();\n        }\n    }\n}\n"], "filenames": ["objects/functions.php"], "buggy_code_start_loc": [5785], "buggy_code_end_loc": [5822], "fixing_code_start_loc": [5786], "fixing_code_end_loc": [5822], "type": "CWE-79", "message": "Cross Site Scripting (XSS) vulnerability in objects/function.php in function getDeviceID in WWBN AVideo through 11.6, via the yptDevice parameter to view/include/head.php.", "other": {"cve": {"id": "CVE-2022-27462", "sourceIdentifier": "cve@mitre.org", "published": "2022-04-05T16:15:16.053", "lastModified": "2022-04-12T19:35:54.377", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross Site Scripting (XSS) vulnerability in objects/function.php in function getDeviceID in WWBN AVideo through 11.6, via the yptDevice parameter to view/include/head.php."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross Site Scripting (XSS) en el archivo objects/function.php en la funci\u00f3n getDeviceID en WWBN AVideo versiones hasta 11.6, por medio del par\u00e1metro yptDevice en el archivo view/include/head.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wwbn:avideo:*:*:*:*:*:*:*:*", "versionEndIncluding": "11.6", "matchCriteriaId": "DEF0B0D4-CF7D-4A7F-996B-2C4E40783131"}]}]}], "references": [{"url": "https://avideo.tube/", "source": "cve@mitre.org", "tags": ["Product"]}, {"url": "https://github.com/WWBN/AVideo/commit/3722335f808484e6bfb5e71028fedddd942add4a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WWBN/AVideo/commit/3722335f808484e6bfb5e71028fedddd942add4a"}}