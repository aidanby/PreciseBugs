{"buggy_code": ["# frozen_string_literal: true\n\nmodule Api\n  class AdminUsersController < ApiBaseController\n    before_action :build_admin_user, only: :create\n    load_and_authorize_resource class: 'Motor::AdminUser'\n\n    def index\n      render json: serialized_user_data(\n        @admin_users.preload(:roles).where(deleted_at: nil).order(:id)\n      )\n    end\n\n    def show\n      render json: serialized_user_data(@admin_user)\n    end\n\n    def create\n      if @admin_user.save!\n        render json: serialized_user_data(@admin_user)\n      else\n        render json: { errors: @admin_user.errors.as_json }, status: :unprocessable_entity\n      end\n    end\n\n    def update\n      if @admin_user.update(admin_user_params)\n        render json: serialized_user_data(@admin_user)\n      else\n        render json: { errors: @admin_user.errors.as_json }, status: :unprocessable_entity\n      end\n    end\n\n    def destroy\n      @admin_user.update!(deleted_at: Time.current)\n\n      head :ok\n    end\n\n    def reset_password\n      @admin_user = Motor::AdminUser.find(params[:admin_user_id])\n\n      authorize!(:manage, @admin_user)\n\n      Devise::Mailer.default_url_options = { host: request.host, protocol: request.protocol, port: request.port }\n\n      @admin_user.send_reset_password_instructions\n\n      head :ok\n    end\n\n    private\n\n    def build_admin_user\n      @admin_user   = Motor::AdminUser.find_by(email: admin_user_params[:email])\n      @admin_user ||= Motor::AdminUser.new(admin_user_params.merge(roles: [Motor::Role.admin]))\n\n      @admin_user.assign_attributes(admin_user_params.merge(deleted_at: nil))\n    end\n\n    def serialized_user_data(user)\n      {\n        data: user.as_json(only: %i[id email first_name last_name locked_at], include: %i[roles])\n      }\n    end\n\n    def admin_user_params\n      params.require(:admin_user).permit(:email, :first_name, :last_name, :password)\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nclass ApplicationController < ActionController::Base\n  before_action :maybe_redirect_to_setup\n  before_action :maybe_redirect_from_setup\n\n  before_action :authenticate_admin_user!, unless: :setup_path?\n\n  before_action do\n    Devise::Mailer.default_url_options = { host: request.host, protocol: request.protocol, port: request.port }\n  end\n\n  private\n\n  def current_ability\n    Motor::Ability.new(current_admin_user, request)\n  end\n\n  def maybe_redirect_to_setup\n    return if setup_path?\n    return unless new_setup?\n\n    redirect_to admin_setup_path\n  end\n\n  def maybe_redirect_from_setup\n    return unless setup_path?\n    return if new_setup?\n\n    redirect_to motor_admin_path\n  end\n\n  def new_setup?\n    current_admin_user.nil? && Motor::AdminUser.count.zero?\n  end\n\n  def setup_path?\n    request.path == admin_setup_path\n  end\nend\n"], "fixing_code": ["# frozen_string_literal: true\n\nmodule Api\n  class AdminUsersController < ApiBaseController\n    before_action :build_admin_user, only: :create\n    load_and_authorize_resource class: 'Motor::AdminUser'\n\n    def index\n      render json: serialized_user_data(\n        @admin_users.preload(:roles).where(deleted_at: nil).order(:id)\n      )\n    end\n\n    def show\n      render json: serialized_user_data(@admin_user)\n    end\n\n    def create\n      if @admin_user.save!\n        render json: serialized_user_data(@admin_user)\n      else\n        render json: { errors: @admin_user.errors.as_json }, status: :unprocessable_entity\n      end\n    end\n\n    def update\n      if @admin_user.update(admin_user_params)\n        render json: serialized_user_data(@admin_user)\n      else\n        render json: { errors: @admin_user.errors.as_json }, status: :unprocessable_entity\n      end\n    end\n\n    def destroy\n      @admin_user.update!(deleted_at: Time.current)\n\n      head :ok\n    end\n\n    def reset_password\n      @admin_user = Motor::AdminUser.find(params[:admin_user_id])\n\n      authorize!(:manage, @admin_user)\n\n      Devise::Mailer.default_url_options = { host: ENV['HOST'], protocol: request.protocol, port: request.port }\n\n      @admin_user.send_reset_password_instructions\n\n      head :ok\n    end\n\n    private\n\n    def build_admin_user\n      @admin_user   = Motor::AdminUser.find_by(email: admin_user_params[:email])\n      @admin_user ||= Motor::AdminUser.new(admin_user_params.merge(roles: [Motor::Role.admin]))\n\n      @admin_user.assign_attributes(admin_user_params.merge(deleted_at: nil))\n    end\n\n    def serialized_user_data(user)\n      {\n        data: user.as_json(only: %i[id email first_name last_name locked_at], include: %i[roles])\n      }\n    end\n\n    def admin_user_params\n      params.require(:admin_user).permit(:email, :first_name, :last_name, :password)\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nclass ApplicationController < ActionController::Base\n  before_action :maybe_redirect_to_setup\n  before_action :maybe_redirect_from_setup\n\n  before_action :authenticate_admin_user!, unless: :setup_path?\n\n  before_action do\n    Devise::Mailer.default_url_options = { host: ENV['HOST'], protocol: request.protocol, port: request.port }\n  end\n\n  private\n\n  def current_ability\n    Motor::Ability.new(current_admin_user, request)\n  end\n\n  def maybe_redirect_to_setup\n    return if setup_path?\n    return unless new_setup?\n\n    redirect_to admin_setup_path\n  end\n\n  def maybe_redirect_from_setup\n    return unless setup_path?\n    return if new_setup?\n\n    redirect_to motor_admin_path\n  end\n\n  def new_setup?\n    current_admin_user.nil? && Motor::AdminUser.count.zero?\n  end\n\n  def setup_path?\n    request.path == admin_setup_path\n  end\nend\n"], "filenames": ["app/controllers/api/admin_users_controller.rb", "app/controllers/application_controller.rb"], "buggy_code_start_loc": [45, 10], "buggy_code_end_loc": [46, 11], "fixing_code_start_loc": [45, 10], "fixing_code_end_loc": [46, 11], "type": "CWE-116", "message": "In motor-admin versions 0.0.1 through 0.2.56 are vulnerable to host header injection in the password reset functionality where malicious actor can send fake password reset email to arbitrary victim.", "other": {"cve": {"id": "CVE-2022-23079", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2022-06-22T13:15:08.027", "lastModified": "2022-06-29T15:50:55.117", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In motor-admin versions 0.0.1 through 0.2.56 are vulnerable to host header injection in the password reset functionality where malicious actor can send fake password reset email to arbitrary victim."}, {"lang": "es", "value": "En motor-admin versiones 0.0.1 hasta 0.2.56, son vulnerables a una inyecci\u00f3n de encabezado de host en la funcionalidad password reset donde un actor malicioso puede enviar un correo electr\u00f3nico falso de restablecimiento de contrase\u00f1a a una v\u00edctima arbitraria"}], "metrics": {"cvssMetricV31": [{"source": "vulnerabilitylab@mend.io", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "vulnerabilitylab@mend.io", "type": "Primary", "description": [{"lang": "en", "value": "CWE-116"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:getmotoradmin:motor_admin:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.0.1", "versionEndIncluding": "0.2.56", "matchCriteriaId": "D16B19E8-BBCC-459E-B447-4FDB95BDA8AB"}]}]}], "references": [{"url": "https://github.com/motor-admin/motor-admin/commit/a461b7507940a1fa062836daa89c82404fe3ecf9", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.mend.io/vulnerability-database/CVE-2022-23079", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/motor-admin/motor-admin/commit/a461b7507940a1fa062836daa89c82404fe3ecf9"}}