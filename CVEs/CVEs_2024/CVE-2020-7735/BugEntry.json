{"buggy_code": ["@import 'theme';\n@import 'less/test/less/debug/linenumbers';\n\n.baz {\n  .oom {\n    color: @foreground-color-bright;\n  }\n}\n\n.myFunction() {\n  @functions: ~`(function () {return 'hi!' ;}) () `;\n}\n\n.myFunction();\n", "import { expect } from 'chai';\n\ndescribe(`@sample/scss-paths`, () => {\n  describe(`sample-scss-paths.metadata.json`, () => {\n    let METADATA;\n    before(() => {\n      METADATA = require('../dist/sample-scss-paths.metadata.json');\n    });\n\n    it(`should exist`, () => {\n      expect(METADATA).to.be.ok;\n    });\n\n    it(`should \"importAs\": \"@sample/scss-paths\"`, () => {\n      expect(METADATA['importAs']).to.equal('@sample/scss-paths');\n    });\n\n    it(`should resolve the styles from the SCSS theme`, () => {\n      const scssStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`color:red`);\n      expect(scssStyles).to.contain(`background-color:#ff0`);\n    });\n\n    it(`should autoprefix scss based on the config in .browserslistrc`, () => {\n      const scssStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`display:flex`);\n      expect(scssStyles).to.contain(`display:-ms-flexbox`);\n    });\n\n    it(`should resolve the styles from the Less theme`, () => {\n      const lessStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][1];\n      expect(lessStyles).to.contain(`.baz .oom`);\n      expect(lessStyles).to.contain(`color:red`);\n    });\n\n    it(`should resolve the styles from the Less 'node_module' file ~`, () => {\n      const lessStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][1];\n      expect(lessStyles).to.contain(`tst3`);\n    });\n\n    it(`should resolve the styles from the Stylus theme`, () => {\n      const stylusStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][2];\n      expect(stylusStyles).to.contain(`font-size:32pt`);\n    });\n\n    it(`should resolve the styles from the SASS theme`, () => {\n      const scssStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`color:#00f`);\n      expect(scssStyles).to.contain(`background-color:#ff0`);\n    });\n\n    it(`should autoprefix sass based on the config in .browserslistrc`, () => {\n      const scssStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][3];\n      expect(scssStyles).to.contain(`display:flex`);\n      expect(scssStyles).to.contain(`display:-ms-flexbox`);\n    });\n  });\n\n  describe(`scss-paths-sub-module.metadata.json`, () => {\n    let METADATA;\n    before(() => {\n      METADATA = require('../dist/sub-module/sample-scss-paths-sub-module.metadata.json');\n    });\n\n    it(`should exist`, () => {\n      expect(METADATA).to.be.ok;\n    });\n\n    it(`should \"importAs\": \"@sample/scss-paths/sub-module\"`, () => {\n      expect(METADATA['importAs']).to.equal('@sample/scss-paths/sub-module');\n    });\n\n    it(`should resolve the SCSS styles from the parent theme`, () => {\n      const scssStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`background-color:#ff0`);\n    });\n\n    it(`should resolve the SCSS styles from the sub-module common utilities`, () => {\n      const scssStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`border:10px solid #ff0`);\n    });\n\n    it(`should resolve the Less styles from the parent theme`, () => {\n      const lessStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][1];\n      expect(lessStyles).to.contain(`color:red`);\n    });\n\n    it(`should resolve the Less styles from the sub-module common utilities`, () => {\n      const lessStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][1];\n      expect(lessStyles).to.contain(`font-weight:700`);\n    });\n\n    it(`should resolve the Stylus styles from the parent theme`, () => {\n      const stylusStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][2];\n      expect(stylusStyles).to.contain(`font-size:32pt`);\n    });\n\n    it(`should resolve the Stylus styles from the sub-module common utilities`, () => {\n      const stylusStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][2];\n      expect(stylusStyles).to.contain(`font-face:sans-serif`);\n    });\n\n    it(`should resolve the SASS styles from the parent theme`, () => {\n      const scssStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][3];\n      expect(scssStyles).to.contain(`background-color:#ff0`);\n    });\n\n    it(`should resolve the SASS styles from the sub-module common utilities`, () => {\n      const scssStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][3];\n      expect(scssStyles).to.contain(`border:10px solid #ff0`);\n    });\n  });\n});\n", "import * as path from 'path';\nimport * as log from '../utils/log';\nimport { execSync } from 'child_process';\n\n// CSS Tools\nimport * as autoprefixer from 'autoprefixer';\nimport * as browserslist from 'browserslist';\nimport * as nodeSassTildeImporter from 'node-sass-tilde-importer';\nimport * as postcss from 'postcss';\nimport * as postcssUrl from 'postcss-url';\nimport * as cssnanoPresetDefault from 'cssnano-preset-default';\nimport * as stylus from 'stylus';\n\nexport enum CssUrl {\n  inline = 'inline',\n  none = 'none',\n}\n\n/*\n * Please be aware of the few differences in behaviour https://github.com/sass/dart-sass/blob/master/README.md#behavioral-differences-from-ruby-sass\n * By default `npm install` will install sass.\n * To use node-sass you need to use:\n *   Npm:\n *     `npm install node-sass --save-dev`\n *   Yarn:\n *     `yarn add node-sass --dev`\n */\nlet sassComplier: any | undefined;\ntry {\n  sassComplier = require('node-sass'); // Check if node-sass is explicitly included.\n} catch {\n  sassComplier = require('sass');\n}\n\nexport class StylesheetProcessor {\n  private postCssProcessor: postcss.Processor;\n\n  constructor(readonly basePath: string, readonly cssUrl?: CssUrl, readonly styleIncludePaths?: string[]) {\n    this.postCssProcessor = this.createPostCssProcessor(basePath, cssUrl);\n  }\n\n  process(filePath: string, content: string) {\n    // Render pre-processor language (sass, styl, less)\n    const renderedCss: string = this.renderPreProcessor(filePath, content);\n\n    // Render postcss (autoprefixing and friends)\n    const result = this.postCssProcessor.process(renderedCss, {\n      from: filePath,\n      to: filePath.replace(path.extname(filePath), '.css'),\n    });\n\n    // Log warnings from postcss\n    result.warnings().forEach((msg) => log.warn(msg.toString()));\n\n    return result.css;\n  }\n\n  private renderPreProcessor(filePath: string, content: string): string {\n    const ext = path.extname(filePath);\n\n    log.debug(`rendering ${ext} from ${filePath}`);\n\n    switch (ext) {\n      case '.sass':\n      case '.scss':\n        return sassComplier\n          .renderSync({\n            file: filePath,\n            data: content,\n            indentedSyntax: '.sass' === ext,\n            importer: nodeSassTildeImporter,\n            includePaths: this.styleIncludePaths,\n          })\n          .css.toString();\n\n      case '.less':\n        // this is the only way I found to make LESS sync\n        let cmd = `node \"${require.resolve('less/bin/lessc')}\" \"${filePath}\" --js`;\n        if (this.styleIncludePaths.length) {\n          cmd += ` --include-path=\"${this.styleIncludePaths.join(':')}\"`;\n        }\n\n        return execSync(cmd).toString();\n\n      case '.styl':\n      case '.stylus':\n        return (\n          stylus(content)\n            // add paths for resolve\n            .set('paths', [this.basePath, '.', ...this.styleIncludePaths, 'node_modules'])\n            // add support for resolving plugins from node_modules\n            .set('filename', filePath)\n            // turn on url resolver in stylus, same as flag --resolve-url\n            .set('resolve url', true)\n            .define('url', stylus.resolver(undefined))\n            .render()\n        );\n\n      case '.css':\n      default:\n        return content;\n    }\n  }\n\n  private createPostCssProcessor(basePath: string, cssUrl?: CssUrl): postcss.Processor {\n    log.debug(`determine browserslist for ${basePath}`);\n    const overrideBrowserslist = browserslist(undefined, { path: basePath });\n\n    const postCssPlugins = [];\n\n    if (cssUrl !== CssUrl.none) {\n      log.debug(`postcssUrl: ${cssUrl}`);\n      postCssPlugins.push(postcssUrl({ url: cssUrl }));\n    }\n\n    // this is important to be executed post running `postcssUrl`\n    postCssPlugins.push(autoprefixer({ overrideBrowserslist, grid: true }));\n\n    const preset = cssnanoPresetDefault({\n      svgo: false,\n      // Disable calc optimizations due to several issues.\n      calc: false,\n    });\n\n    const asyncPlugins = ['postcss-svgo'];\n    const cssNanoPlugins = preset.plugins\n      // replicate the `initializePlugin` behavior from https://github.com/cssnano/cssnano/blob/a566cc5/packages/cssnano/src/index.js#L8\n      .map(([creator, pluginConfig]) => creator(pluginConfig))\n      .filter((plugin) => !asyncPlugins.includes(plugin.postcssPlugin));\n\n    postCssPlugins.push(...cssNanoPlugins);\n\n    return postcss(postCssPlugins);\n  }\n}\n"], "fixing_code": ["@import 'theme';\n\n.baz {\n  .oom {\n    color: @foreground-color-bright;\n  }\n}\n\n.myFunction() {\n  @functions: ~`(function () {return 'hi!' ;}) () `;\n}\n\n.myFunction();\n", "import { expect } from 'chai';\n\ndescribe(`@sample/scss-paths`, () => {\n  describe(`sample-scss-paths.metadata.json`, () => {\n    let METADATA;\n    before(() => {\n      METADATA = require('../dist/sample-scss-paths.metadata.json');\n    });\n\n    it(`should exist`, () => {\n      expect(METADATA).to.be.ok;\n    });\n\n    it(`should \"importAs\": \"@sample/scss-paths\"`, () => {\n      expect(METADATA['importAs']).to.equal('@sample/scss-paths');\n    });\n\n    it(`should resolve the styles from the SCSS theme`, () => {\n      const scssStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`color:red`);\n      expect(scssStyles).to.contain(`background-color:#ff0`);\n    });\n\n    it(`should autoprefix scss based on the config in .browserslistrc`, () => {\n      const scssStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`display:flex`);\n      expect(scssStyles).to.contain(`display:-ms-flexbox`);\n    });\n\n    it(`should resolve the styles from the Less theme`, () => {\n      const lessStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][1];\n      expect(lessStyles).to.contain(`.baz .oom`);\n      expect(lessStyles).to.contain(`color:red`);\n    });\n\n    xit(`should resolve the styles from the Less 'node_module' file ~`, () => {\n      const lessStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][1];\n      expect(lessStyles).to.contain(`tst3`);\n    });\n\n    it(`should resolve the styles from the Stylus theme`, () => {\n      const stylusStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][2];\n      expect(stylusStyles).to.contain(`font-size:32pt`);\n    });\n\n    it(`should resolve the styles from the SASS theme`, () => {\n      const scssStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`color:#00f`);\n      expect(scssStyles).to.contain(`background-color:#ff0`);\n    });\n\n    it(`should autoprefix sass based on the config in .browserslistrc`, () => {\n      const scssStyles = METADATA['metadata']['BazComponent']['decorators'][0]['arguments'][0]['styles'][3];\n      expect(scssStyles).to.contain(`display:flex`);\n      expect(scssStyles).to.contain(`display:-ms-flexbox`);\n    });\n  });\n\n  describe(`scss-paths-sub-module.metadata.json`, () => {\n    let METADATA;\n    before(() => {\n      METADATA = require('../dist/sub-module/sample-scss-paths-sub-module.metadata.json');\n    });\n\n    it(`should exist`, () => {\n      expect(METADATA).to.be.ok;\n    });\n\n    it(`should \"importAs\": \"@sample/scss-paths/sub-module\"`, () => {\n      expect(METADATA['importAs']).to.equal('@sample/scss-paths/sub-module');\n    });\n\n    it(`should resolve the SCSS styles from the parent theme`, () => {\n      const scssStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`background-color:#ff0`);\n    });\n\n    it(`should resolve the SCSS styles from the sub-module common utilities`, () => {\n      const scssStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][0];\n      expect(scssStyles).to.contain(`border:10px solid #ff0`);\n    });\n\n    it(`should resolve the Less styles from the parent theme`, () => {\n      const lessStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][1];\n      expect(lessStyles).to.contain(`color:red`);\n    });\n\n    it(`should resolve the Less styles from the sub-module common utilities`, () => {\n      const lessStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][1];\n      expect(lessStyles).to.contain(`font-weight:700`);\n    });\n\n    it(`should resolve the Stylus styles from the parent theme`, () => {\n      const stylusStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][2];\n      expect(stylusStyles).to.contain(`font-size:32pt`);\n    });\n\n    it(`should resolve the Stylus styles from the sub-module common utilities`, () => {\n      const stylusStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][2];\n      expect(stylusStyles).to.contain(`font-face:sans-serif`);\n    });\n\n    it(`should resolve the SASS styles from the parent theme`, () => {\n      const scssStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][3];\n      expect(scssStyles).to.contain(`background-color:#ff0`);\n    });\n\n    it(`should resolve the SASS styles from the sub-module common utilities`, () => {\n      const scssStyles = METADATA['metadata']['BarComponent']['decorators'][0]['arguments'][0]['styles'][3];\n      expect(scssStyles).to.contain(`border:10px solid #ff0`);\n    });\n  });\n});\n", "import * as path from 'path';\nimport * as log from '../utils/log';\nimport { execFileSync } from 'child_process';\n\n// CSS Tools\nimport * as autoprefixer from 'autoprefixer';\nimport * as browserslist from 'browserslist';\nimport * as nodeSassTildeImporter from 'node-sass-tilde-importer';\nimport * as postcss from 'postcss';\nimport * as postcssUrl from 'postcss-url';\nimport * as cssnanoPresetDefault from 'cssnano-preset-default';\nimport * as stylus from 'stylus';\n\nexport enum CssUrl {\n  inline = 'inline',\n  none = 'none',\n}\n\n/*\n * Please be aware of the few differences in behaviour https://github.com/sass/dart-sass/blob/master/README.md#behavioral-differences-from-ruby-sass\n * By default `npm install` will install sass.\n * To use node-sass you need to use:\n *   Npm:\n *     `npm install node-sass --save-dev`\n *   Yarn:\n *     `yarn add node-sass --dev`\n */\nlet sassComplier: any | undefined;\ntry {\n  sassComplier = require('node-sass'); // Check if node-sass is explicitly included.\n} catch {\n  sassComplier = require('sass');\n}\n\nexport class StylesheetProcessor {\n  private postCssProcessor: postcss.Processor;\n\n  constructor(readonly basePath: string, readonly cssUrl?: CssUrl, readonly styleIncludePaths?: string[]) {\n    this.postCssProcessor = this.createPostCssProcessor(basePath, cssUrl);\n  }\n\n  process(filePath: string, content: string) {\n    // Render pre-processor language (sass, styl, less)\n    const renderedCss: string = this.renderPreProcessor(filePath, content);\n\n    // Render postcss (autoprefixing and friends)\n    const result = this.postCssProcessor.process(renderedCss, {\n      from: filePath,\n      to: filePath.replace(path.extname(filePath), '.css'),\n    });\n\n    // Log warnings from postcss\n    result.warnings().forEach(msg => log.warn(msg.toString()));\n\n    return result.css;\n  }\n\n  private renderPreProcessor(filePath: string, content: string): string {\n    const ext = path.extname(filePath);\n\n    log.debug(`rendering ${ext} from ${filePath}`);\n\n    switch (ext) {\n      case '.sass':\n      case '.scss':\n        return sassComplier\n          .renderSync({\n            file: filePath,\n            data: content,\n            indentedSyntax: '.sass' === ext,\n            importer: nodeSassTildeImporter,\n            includePaths: this.styleIncludePaths,\n          })\n          .css.toString();\n\n      case '.less':\n        // this is the only way I found to make LESS sync\n        const args = [filePath, '--js'];\n        if (this.styleIncludePaths.length) {\n          args.push(`--include-path=${this.styleIncludePaths.join(':')}`);\n        }\n\n        return execFileSync(require.resolve('less/bin/lessc'), args).toString();\n\n      case '.styl':\n      case '.stylus':\n        return (\n          stylus(content)\n            // add paths for resolve\n            .set('paths', [this.basePath, '.', ...this.styleIncludePaths, 'node_modules'])\n            // add support for resolving plugins from node_modules\n            .set('filename', filePath)\n            // turn on url resolver in stylus, same as flag --resolve-url\n            .set('resolve url', true)\n            .define('url', stylus.resolver(undefined))\n            .render()\n        );\n\n      case '.css':\n      default:\n        return content;\n    }\n  }\n\n  private createPostCssProcessor(basePath: string, cssUrl?: CssUrl): postcss.Processor {\n    log.debug(`determine browserslist for ${basePath}`);\n    const overrideBrowserslist = browserslist(undefined, { path: basePath });\n\n    const postCssPlugins = [];\n\n    if (cssUrl !== CssUrl.none) {\n      log.debug(`postcssUrl: ${cssUrl}`);\n      postCssPlugins.push(postcssUrl({ url: cssUrl }));\n    }\n\n    // this is important to be executed post running `postcssUrl`\n    postCssPlugins.push(autoprefixer({ overrideBrowserslist, grid: true }));\n\n    const preset = cssnanoPresetDefault({\n      svgo: false,\n      // Disable calc optimizations due to several issues.\n      calc: false,\n    });\n\n    const asyncPlugins = ['postcss-svgo'];\n    const cssNanoPlugins = preset.plugins\n      // replicate the `initializePlugin` behavior from https://github.com/cssnano/cssnano/blob/a566cc5/packages/cssnano/src/index.js#L8\n      .map(([creator, pluginConfig]) => creator(pluginConfig))\n      .filter(plugin => !asyncPlugins.includes(plugin.postcssPlugin));\n\n    postCssPlugins.push(...cssNanoPlugins);\n\n    return postcss(postCssPlugins);\n  }\n}\n"], "filenames": ["integration/samples/scss-paths/baz/baz component.less", "integration/samples/scss-paths/specs/metadata.ts", "src/lib/styles/stylesheet-processor.ts"], "buggy_code_start_loc": [2, 36, 3], "buggy_code_end_loc": [3, 37, 130], "fixing_code_start_loc": [1, 36, 3], "fixing_code_end_loc": [1, 37, 130], "type": "CWE-78", "message": "The package ng-packagr before 10.1.1 are vulnerable to Command Injection via the styleIncludePaths option.", "other": {"cve": {"id": "CVE-2020-7735", "sourceIdentifier": "report@snyk.io", "published": "2020-09-25T12:15:14.610", "lastModified": "2020-09-30T14:37:17.440", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package ng-packagr before 10.1.1 are vulnerable to Command Injection via the styleIncludePaths option."}, {"lang": "es", "value": "El paquete ng-packagr versiones anteriores a 10.1.1, es vulnerable a una inyecci\u00f3n de comandos por medio de la opci\u00f3n styleIncludePaths"}], "metrics": {"cvssMetricV31": [{"source": "report@snyk.io", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.7, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ng-packagr_project:ng-packagr:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.1.1", "matchCriteriaId": "F1D6EFCD-D695-4EE9-8711-02632CD0A057"}]}]}], "references": [{"url": "https://github.com/ng-packagr/ng-packagr/commit/bda0fff3443301f252930a73fdc8fb9502de596d", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-NGPACKAGR-1012427", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ng-packagr/ng-packagr/commit/bda0fff3443301f252930a73fdc8fb9502de596d"}}