{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nuse Egulias\\EmailValidator\\EmailValidator;\nuse Egulias\\EmailValidator\\Validation\\MultipleValidationWithAnd;\nuse Egulias\\EmailValidator\\Validation\\RFCValidation;\nuse PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\Constraints\\CustomerName;\nuse PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\Factory\\CustomerNameValidatorFactory;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Currency\\ValueObject\\NumericIsoCode;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Product\\ValueObject\\Isbn;\nuse PrestaShop\\PrestaShop\\Core\\Email\\SwiftMailerValidation;\nuse PrestaShop\\PrestaShop\\Core\\Security\\PasswordPolicyConfiguration;\nuse Symfony\\Component\\Validator\\Constraints\\Email;\nuse Symfony\\Component\\Validator\\Validation;\nuse ZxcvbnPhp\\Zxcvbn;\n\nclass ValidateCore\n{\n    public const ORDER_BY_REGEXP = '/^(?:(`?)[\\w!_-]+\\1\\.)?(?:(`?)[\\w!_-]+\\2)$/';\n    public const OBJECT_CLASS_NAME_REGEXP = '/^[a-zA-Z_\\x80-\\xff][a-zA-Z0-9_\\x80-\\xff]*$/';\n    /**\n     * Maximal 32 bits value: (2^32)-1\n     *\n     * @var int\n     */\n    public const MYSQL_UNSIGNED_INT_MAX = 4294967295;\n\n    /**\n     * @deprecated since 8.0.0 use PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_LENGTH\n     */\n    public const ADMIN_PASSWORD_LENGTH = 8;\n\n    /**\n     * @deprecated since 8.0.0 use PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_LENGTH\n     */\n    public const PASSWORD_LENGTH = 5;\n\n    public static function isIp2Long($ip)\n    {\n        return preg_match('#^-?[0-9]+$#', (string) $ip);\n    }\n\n    /**\n     * @deprecated since PrestaShop 8.1 and will be removed in Prestashop 9.0\n     */\n    public static function isAnything()\n    {\n        @trigger_error(\n            'This function is deprecated PrestaShop 8.1 and will be removed in Prestashop 9.0.',\n            E_USER_DEPRECATED\n        );\n\n        return true;\n    }\n\n    /**\n     * Check for e-mail validity.\n     *\n     * @param string $email e-mail address to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isEmail($email)\n    {\n        // Check if the value is empty\n        if (empty($email)) {\n            return false;\n        }\n\n        $validator = Validation::createValidator();\n        $errors = $validator->validate($email, new Email([\n            'mode' => 'loose',\n        ]));\n\n        if (count($errors) > 0) {\n            return false;\n        }\n\n        // Check if the value is correct according to both validators (RFC & SwiftMailer)\n        return (new EmailValidator())->isValid($email, new MultipleValidationWithAnd([\n            new RFCValidation(),\n            new SwiftMailerValidation(), // special validation to be compatible with Swift Mailer\n        ]));\n    }\n\n    /**\n     * Check for module URL validity.\n     *\n     * @param string $url module URL to validate\n     * @param array $errors Reference array for catching errors\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isModuleUrl($url, &$errors)\n    {\n        if (!$url || $url == 'http://') {\n            $errors[] = Context::getContext()->getTranslator()->trans('Please specify module URL', [], 'Admin.Modules.Notification');\n        } elseif (substr($url, -4) != '.tar' && substr($url, -4) != '.zip' && substr($url, -4) != '.tgz' && substr($url, -7) != '.tar.gz') {\n            $errors[] = Context::getContext()->getTranslator()->trans('Unknown archive type.', [], 'Admin.Modules.Notification');\n        } else {\n            if ((strpos($url, 'http')) === false) {\n                $url = 'http://' . $url;\n            }\n            if (!is_array(@get_headers($url))) {\n                $errors[] = Context::getContext()->getTranslator()->trans('Invalid URL', [], 'Admin.Notifications.Error');\n            }\n        }\n        if (!count($errors)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check for MD5 string validity.\n     *\n     * @param string $md5 MD5 string to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMd5($md5)\n    {\n        return preg_match('/^[a-f0-9A-F]{32}$/', $md5);\n    }\n\n    /**\n     * Check for SHA1 string validity.\n     *\n     * @param string $sha1 SHA1 string to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isSha1($sha1)\n    {\n        return preg_match('/^[a-fA-F0-9]{40}$/', $sha1);\n    }\n\n    /**\n     * Check for a float number validity.\n     *\n     * @param float $float Float number to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isFloat($float)\n    {\n        return (string) ((float) $float) == (string) $float;\n    }\n\n    public static function isUnsignedFloat($float)\n    {\n        return (string) ((float) $float) == (string) $float && $float >= 0;\n    }\n\n    /**\n     * Check for a float number validity.\n     *\n     * @param float $float Float number to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isOptFloat($float)\n    {\n        return empty($float) || Validate::isFloat($float);\n    }\n\n    /**\n     * Check for a carrier name validity.\n     *\n     * @param string $name Carrier name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCarrierName($name)\n    {\n        return empty($name) || preg_match('/^[^<>;=#{}]*$/u', $name);\n    }\n\n    /**\n     * Check for an image size validity.\n     *\n     * @param string $size Image size to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isImageSize($size)\n    {\n        return preg_match('/^[0-9]{1,4}$/', $size);\n    }\n\n    /**\n     * Check whether given customer name is valid\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool\n     */\n    public static function isCustomerName($name)\n    {\n        $validatorBuilder = Validation::createValidatorBuilder();\n        $validatorBuilder->setConstraintValidatorFactory(new CustomerNameValidatorFactory());\n        $validator = $validatorBuilder->getValidator();\n        $violations = $validator->validate($name, [\n            new CustomerName(),\n        ]);\n\n        return count($violations) === 0;\n    }\n\n    /**\n     * Check whether given name is valid\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool\n     */\n    public static function isName($name)\n    {\n        return preg_match('/^[^0-9!<>,;?=+()@#\"\u00b0{}_$%:\u00a4|]*$/u', $name);\n    }\n\n    /**\n     * Check for hook name validity.\n     *\n     * @param string $hook Hook name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isHookName($hook)\n    {\n        return preg_match('/^[a-zA-Z0-9_-]+$/', $hook);\n    }\n\n    /**\n     * Check for sender name validity.\n     *\n     * @param string $mail_name Sender name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMailName($mail_name)\n    {\n        return is_string($mail_name) && preg_match('/^[^<>;=#{}]*$/u', $mail_name);\n    }\n\n    /**\n     * Check for e-mail subject validity.\n     *\n     * @param string $mail_subject e-mail subject to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMailSubject($mail_subject)\n    {\n        return preg_match('/^[^<>]*$/u', $mail_subject);\n    }\n\n    /**\n     * Check for module name validity.\n     *\n     * @param string $module_name Module name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isModuleName($module_name)\n    {\n        return is_string($module_name) && preg_match('/^[a-zA-Z0-9_-]+$/', $module_name);\n    }\n\n    /**\n     * Check for template name validity.\n     *\n     * @param string $tpl_name Template name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTplName($tpl_name)\n    {\n        return preg_match('/^[a-zA-Z0-9_-]+$/', $tpl_name);\n    }\n\n    /**\n     * Check for image type name validity.\n     *\n     * @param string $type Image type name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isImageTypeName($type)\n    {\n        return preg_match('/^[a-zA-Z0-9_ -]+$/', $type);\n    }\n\n    /**\n     * Check for price validity.\n     *\n     * @param string $price Price to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPrice($price)\n    {\n        return preg_match('/^[0-9]{1,10}(\\.[0-9]{1,9})?$/', $price);\n    }\n\n    /**\n     * Check for price validity (including negative price).\n     *\n     * @param string $price Price to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isNegativePrice($price)\n    {\n        return preg_match('/^[-]?[0-9]{1,10}(\\.[0-9]{1,9})?$/', $price);\n    }\n\n    /**\n     * Check for language code (ISO) validity.\n     *\n     * @param string $iso_code Language code (ISO) to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLanguageIsoCode($iso_code)\n    {\n        return preg_match('/^[a-zA-Z]{2,3}$/', $iso_code);\n    }\n\n    public static function isLanguageCode($s)\n    {\n        return preg_match('/^[a-zA-Z]{2}(-[a-zA-Z]{2})?$/', $s);\n    }\n\n    /**\n     * @see https://en.wikipedia.org/wiki/IETF_language_tag#ISO_3166-1_and_UN_M.49\n     *\n     * @param string $s\n     *\n     * @return bool\n     */\n    public static function isLocale($s)\n    {\n        return preg_match('/^[a-z]{2}-[A-Z]{2}$/', $s);\n    }\n\n    public static function isStateIsoCode($iso_code)\n    {\n        return preg_match('/^[a-zA-Z0-9]{1,4}((-)[a-zA-Z0-9]{1,4})?$/', $iso_code);\n    }\n\n    public static function isNumericIsoCode($iso_code)\n    {\n        return preg_match(NumericIsoCode::PATTERN, $iso_code);\n    }\n\n    /**\n     * Check for voucher name validity.\n     *\n     * @param string $voucher voucher to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isDiscountName($voucher)\n    {\n        return preg_match('/^[^!<>,;?=+()@\"\u00b0{}_$%:]{3,32}$/u', $voucher);\n    }\n\n    /**\n     * Check for product or category name validity.\n     *\n     * @param string $name Product or category name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCatalogName($name)\n    {\n        return preg_match('/^[^<>;=#{}]*$/u', $name);\n    }\n\n    /**\n     * Check for a message validity.\n     *\n     * @param string $message Message to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMessage($message)\n    {\n        return !preg_match('/[<>{}]/i', $message);\n    }\n\n    /**\n     * Check for a country name validity.\n     *\n     * @param string $name Country name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCountryName($name)\n    {\n        return preg_match('/^[a-zA-Z -]+$/', $name);\n    }\n\n    /**\n     * Check for a link (url-rewriting only) validity.\n     *\n     * @param string $link Link to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLinkRewrite($link)\n    {\n        if (Configuration::get('PS_ALLOW_ACCENTED_CHARS_URL')) {\n            return preg_match('/^[_a-zA-Z0-9\\x{0600}-\\x{06FF}\\pL\\pS-]+$/u', $link);\n        }\n\n        return preg_match('/^[_a-zA-Z0-9\\-]+$/', $link);\n    }\n\n    /**\n     * Check for a route pattern validity.\n     *\n     * @param string $pattern to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isRoutePattern($pattern)\n    {\n        if (Configuration::get('PS_ALLOW_ACCENTED_CHARS_URL')) {\n            return preg_match('/^[_a-zA-Z0-9\\x{0600}-\\x{06FF}\\(\\)\\.{}:\\/\\pL\\pS-]+$/u', $pattern);\n        }\n\n        return preg_match('/^[_a-zA-Z0-9\\(\\)\\.{}:\\/\\-]+$/', $pattern);\n    }\n\n    /**\n     * Check for a postal address validity.\n     *\n     * @param string $address Address to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isAddress($address)\n    {\n        return empty($address) || preg_match('/^[^!<>?=+@{}_$%]*$/u', $address);\n    }\n\n    /**\n     * Check for city name validity.\n     *\n     * @param string $city City name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCityName($city)\n    {\n        return preg_match('/^[^!<>;?=+@#\"\u00b0{}_$%]*$/u', $city);\n    }\n\n    /**\n     * Check for search query validity.\n     *\n     * @param string $search Query to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isValidSearch($search)\n    {\n        return preg_match('/^[^<>;=#{}]{0,64}$/u', $search);\n    }\n\n    /**\n     * Check for standard name validity.\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isGenericName($name)\n    {\n        return empty($name) || preg_match('/^[^<>={}]*$/u', $name);\n    }\n\n    /**\n     * Check for HTML field validity (no XSS please !).\n     *\n     * @param string $html HTML field to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCleanHtml($html, $allow_iframe = false)\n    {\n        $events = 'onmousedown|onmousemove|onmmouseup|onmouseover|onmouseout|onload|onunload|onfocus|onblur|onchange';\n        $events .= '|onsubmit|ondblclick|onclick|onkeydown|onkeyup|onkeypress|onmouseenter|onmouseleave|onerror|onselect|onreset|onabort|ondragdrop|onresize|onactivate|onafterprint|onmoveend';\n        $events .= '|onafterupdate|onbeforeactivate|onbeforecopy|onbeforecut|onbeforedeactivate|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onmove';\n        $events .= '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|onmousewheel';\n        $events .= '|ondragleave|ondragover|ondragstart|ondrop|onerrorupdate|onfilterchange|onfinish|onfocusin|onfocusout|onhashchange|onhelp|oninput|onlosecapture|onmessage|onmouseup|onmovestart';\n        $events .= '|onoffline|ononline|onpaste|onpropertychange|onreadystatechange|onresizeend|onresizestart|onrowenter|onrowexit|onrowsdelete|onrowsinserted|onscroll|onsearch|onselectionchange';\n        $events .= '|onselectstart|onstart|onstop|onanimationcancel|onanimationend|onanimationiteration|onanimationstart';\n\n        if (preg_match('/<[\\s]*script/ims', $html) || preg_match('/(' . $events . ')[\\s]*=/ims', $html) || preg_match('/.*script\\:/ims', $html)) {\n            return false;\n        }\n\n        if (!$allow_iframe && preg_match('/<[\\s]*(i?frame|form|input|embed|object)/ims', $html)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check for product reference validity.\n     *\n     * @param string $reference Product reference to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isReference($reference)\n    {\n        return preg_match('/^[^<>;={}]*$/u', $reference);\n    }\n\n    /**\n     * Check if the password score is valid\n     *\n     * @param string $password Password to validate\n     *\n     * @return bool Indicates whether the given string is a valid password\n     *\n     * @since 8.0.0\n     */\n    public static function isAcceptablePasswordScore(string $password): bool\n    {\n        $zxcvbn = new Zxcvbn();\n        $result = $zxcvbn->passwordStrength($password);\n        $minScore = Configuration::hasKey(PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_SCORE) ?\n                  Configuration::get(PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_SCORE) :\n                  PasswordPolicyConfiguration::PASSWORD_SAFELY_UNGUESSABLE;\n\n        return isset($result['score']) && $result['score'] >= $minScore;\n    }\n\n    /**\n     * Check if password length is valid\n     *\n     * @param string $password Password to validate\n     *\n     * @return bool Indicates whether the given string is a valid password length\n     *\n     * @since 8.0.0\n     */\n    public static function isAcceptablePasswordLength(string $password): bool\n    {\n        $passwordLength = Tools::strlen($password);\n        if (Configuration::hasKey(PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_LENGTH)\n            && Configuration::hasKey(PasswordPolicyConfiguration::CONFIGURATION_MAXIMUM_LENGTH)\n        ) {\n            return $passwordLength >= Configuration::get(PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_LENGTH)\n                && $passwordLength <= Configuration::get(PasswordPolicyConfiguration::CONFIGURATION_MAXIMUM_LENGTH);\n        }\n\n        // If value doesn't exist in database, use default behavior check\n        return $passwordLength >= PasswordPolicyConfiguration::DEFAULT_MINIMUM_LENGTH && $passwordLength <= PasswordPolicyConfiguration::DEFAULT_MAXIMUM_LENGTH;\n    }\n\n    /**\n     * Check if plaintext password is valid\n     * Size is limited by `password_hash()` (72 chars).\n     *\n     * @param string $plaintextPasswd Password to validate\n     * @param int $size\n     *\n     * @return bool Indicates whether the given string is a valid plaintext password\n     *\n     * @since 1.7.0\n     * @deprecated since 8.0, use Validate::isAcceptablePasswordLength instead\n     */\n    public static function isPlaintextPassword($plaintextPasswd, $size = Validate::PASSWORD_LENGTH)\n    {\n        // The password length is limited by `password_hash()`\n        return Tools::strlen($plaintextPasswd) >= $size && Tools::strlen($plaintextPasswd) <= 72;\n    }\n\n    /**\n     * Check if hashed password is valid\n     * PrestaShop supports both MD5 and `PASSWORD_BCRYPT` (PHP API)\n     * The lengths are 32 (MD5) or 60 (`PASSWORD_BCRYPT`)\n     * Anything else is invalid.\n     *\n     * @param string $hashedPasswd Password to validate\n     *\n     * @return bool Indicates whether the given string is a valid hashed password\n     *\n     * @since 1.7.0\n     */\n    public static function isHashedPassword($hashedPasswd)\n    {\n        return Tools::strlen($hashedPasswd) == 32 || Tools::strlen($hashedPasswd) == 60;\n    }\n\n    /**\n     * @deprecated since 8.0\n     */\n    public static function isPasswdAdmin($passwd)\n    {\n        return Validate::isPlaintextPassword($passwd, Validate::ADMIN_PASSWORD_LENGTH);\n    }\n\n    /**\n     * Check for configuration key validity.\n     *\n     * @param string $config_name Configuration key to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isConfigName($config_name)\n    {\n        return preg_match('/^[a-zA-Z_0-9-]+$/', $config_name);\n    }\n\n    /**\n     * Check date formats like http://php.net/manual/en/function.date.php.\n     *\n     * @param string $date_format date format to check\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPhpDateFormat($date_format)\n    {\n        // We can't really check if this is valid or not, because this is a string and you can write whatever you want in it.\n        // That's why only < et > are forbidden (HTML)\n        return preg_match('/^[^<>]+$/', $date_format);\n    }\n\n    /**\n     * Check for date format.\n     *\n     * @param string $date Date to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isDateFormat($date)\n    {\n        return (bool) preg_match('/^([0-9]{4})-((0?[0-9])|(1[0-2]))-((0?[0-9])|([1-2][0-9])|(3[01]))( [0-9]{2}:[0-9]{2}:[0-9]{2})?$/', $date);\n    }\n\n    /**\n     * Check for date validity.\n     *\n     * @param string $date Date to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isDate($date)\n    {\n        if (!preg_match('/^([0-9]{4})-((?:0?[0-9])|(?:1[0-2]))-((?:0?[0-9])|(?:[1-2][0-9])|(?:3[01]))( [0-9]{2}:[0-9]{2}:[0-9]{2})?$/', $date, $matches)) {\n            return false;\n        }\n\n        return checkdate((int) $matches[2], (int) $matches[3], (int) $matches[1]);\n    }\n\n    public static function isDateOrNull($date)\n    {\n        if (null === $date || $date === '0000-00-00 00:00:00' || $date === '0000-00-00') {\n            return true;\n        }\n\n        return self::isDate($date);\n    }\n\n    /**\n     * Check for birthDate validity. To avoid year in two digits, disallow date < 200 years ago\n     *\n     * @param string $date birthdate to validate\n     * @param string $format optional format\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isBirthDate($date, $format = 'Y-m-d')\n    {\n        if (empty($date) || $date == '0000-00-00') {\n            return true;\n        }\n\n        $d = DateTime::createFromFormat($format, $date);\n        if (!empty(DateTime::getLastErrors()['warning_count']) || false === $d) {\n            return false;\n        }\n        $twoHundredYearsAgo = new Datetime();\n        $twoHundredYearsAgo->sub(new DateInterval('P200Y'));\n\n        return $d->setTime(0, 0, 0) <= new Datetime() && $d->setTime(0, 0, 0) >= $twoHundredYearsAgo;\n    }\n\n    /**\n     * Check for boolean validity.\n     *\n     * @param mixed $bool Value to validate as a boolean\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isBool($bool)\n    {\n        return $bool === null || is_bool($bool) || preg_match('/^(0|1)$/', $bool);\n    }\n\n    /**\n     * Check for phone number validity.\n     *\n     * @param string $number Phone number to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPhoneNumber($number)\n    {\n        return preg_match('/^[+0-9. ()\\/-]*$/', $number);\n    }\n\n    /**\n     * Check for barcode validity (EAN-13).\n     *\n     * @param string $ean13 Barcode to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isEan13($ean13)\n    {\n        return !$ean13 || preg_match('/^[0-9]{0,13}$/', $ean13);\n    }\n\n    /**\n     * Check for ISBN.\n     *\n     * @param string $isbn validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isIsbn($isbn)\n    {\n        return !$isbn || preg_match(Isbn::VALID_PATTERN, $isbn);\n    }\n\n    /**\n     * Check for barcode validity (UPC).\n     *\n     * @param string $upc Barcode to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUpc($upc)\n    {\n        return !$upc || preg_match('/^[0-9]{0,12}$/', $upc);\n    }\n\n    /**\n     * Check for MPN validity.\n     *\n     * @param string $mpn to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMpn($mpn)\n    {\n        return Tools::strlen($mpn) <= 40;\n    }\n\n    /**\n     * Check for postal code validity.\n     *\n     * @param string $postcode Postal code to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPostCode($postcode)\n    {\n        return empty($postcode) || preg_match('/^[a-zA-Z 0-9-]+$/', $postcode);\n    }\n\n    /**\n     * Check for zip code format validity.\n     *\n     * @param string $zip_code zip code format to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isZipCodeFormat($zip_code)\n    {\n        if (!empty($zip_code)) {\n            return preg_match('/^[NLCnlc 0-9-]+$/', $zip_code);\n        }\n\n        return true;\n    }\n\n    /**\n     * Check for table or identifier validity\n     * Mostly used in database for ordering : ASC / DESC.\n     *\n     * @param string $way Keyword to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isOrderWay($way)\n    {\n        return !empty($way) && in_array(strtolower($way), ['asc', 'desc', 'random']);\n    }\n\n    /**\n     * Check for table or identifier validity\n     * Mostly used in database for ordering : ORDER BY field.\n     *\n     * @param string $order Field to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isOrderBy($order)\n    {\n        return !empty($order) && preg_match(static::ORDER_BY_REGEXP, $order);\n    }\n\n    /**\n     * Check for table or identifier validity\n     * Mostly used in database for table names and id_table.\n     *\n     * @param string $table Table/identifier to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTableOrIdentifier($table)\n    {\n        return preg_match('/^[a-zA-Z0-9_-]+$/', $table);\n    }\n\n    /**\n     * Check for tags list validity.\n     *\n     * @param string $list List to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTagsList($list)\n    {\n        return preg_match('/^[^!<>;?=+#\"\u00b0{}_$%]*$/u', $list);\n    }\n\n    /**\n     * Check for product visibility.\n     *\n     * @param string $s visibility to check\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isProductVisibility($s)\n    {\n        return preg_match('/^both|catalog|search|none$/i', $s);\n    }\n\n    /**\n     * Check for an integer validity.\n     *\n     * @param int|bool $value Integer to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isInt($value)\n    {\n        return (string) (int) $value === (string) $value || $value === false;\n    }\n\n    /**\n     * Check for an integer validity (unsigned).\n     *\n     * @param mixed $value Integer to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUnsignedInt($value)\n    {\n        return (is_numeric($value) || is_string($value))\n            && (string) (int) $value === (string) $value\n            && $value < (static::MYSQL_UNSIGNED_INT_MAX + 1)\n            && $value >= 0;\n    }\n\n    /**\n     * Check for an percentage validity (between 0 and 100).\n     *\n     * @param float $value Float to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPercentage($value)\n    {\n        return Validate::isFloat($value) && $value >= 0 && $value <= 100;\n    }\n\n    /**\n     * Check for an integer validity (unsigned)\n     * Mostly used in database for auto-increment.\n     *\n     * @param int $id Integer to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUnsignedId($id)\n    {\n        return Validate::isUnsignedInt($id); /* Because an id could be equal to zero when there is no association */\n    }\n\n    public static function isNullOrUnsignedId($id)\n    {\n        return $id === null || Validate::isUnsignedId($id);\n    }\n\n    /**\n     * Check object validity.\n     *\n     * @param object $object Object to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLoadedObject($object)\n    {\n        return is_object($object) && $object->id;\n    }\n\n    /**\n     * Check color validity.\n     *\n     * @param string $color Color to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isColor($color)\n    {\n        return preg_match('/^(#[0-9a-fA-F]{6}|[a-zA-Z0-9-]*)$/', $color);\n    }\n\n    /**\n     * Check url validity (disallowed empty string).\n     *\n     * @param string $url Url to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUrl($url)\n    {\n        return preg_match('/^[~:#,$%&_=\\(\\)\\.\\? \\+\\-@\\/a-zA-Z0-9\\pL\\pS-]+$/u', $url);\n    }\n\n    /**\n     * Check tracking number validity (disallowed empty string).\n     *\n     * @param string $tracking_number Tracking number to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTrackingNumber($tracking_number)\n    {\n        return preg_match('/^[~:#,%&_=\\(\\)\\[\\]\\.\\? \\+\\-@\\/a-zA-Z0-9]+$/', $tracking_number);\n    }\n\n    /**\n     * Check url validity (allowed empty string).\n     *\n     * @param string $url Url to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUrlOrEmpty($url)\n    {\n        return empty($url) || Validate::isUrl($url);\n    }\n\n    /**\n     * Check if URL is absolute.\n     *\n     * @param string $url URL to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isAbsoluteUrl($url)\n    {\n        if (!empty($url)) {\n            return preg_match('/^(https?:)?\\/\\/[$~:;#,%&_=\\(\\)\\[\\]\\.\\? \\+\\-@\\/a-zA-Z0-9]+$/', $url);\n        }\n\n        return true;\n    }\n\n    public static function isMySQLEngine($engine)\n    {\n        return in_array($engine, ['InnoDB', 'MyISAM']);\n    }\n\n    public static function isUnixName($data)\n    {\n        return preg_match('/^[a-z0-9\\._-]+$/ui', $data);\n    }\n\n    public static function isTablePrefix($data)\n    {\n        // Even if \"-\" is theorically allowed, it will be considered a syntax error if you do not add backquotes (`) around the table name\n        return preg_match('/^[a-z0-9_]+$/ui', $data);\n    }\n\n    /**\n     * Check for standard name file validity.\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isFileName($name)\n    {\n        return preg_match('/^[a-zA-Z0-9_.-]+$/', $name);\n    }\n\n    /**\n     * Check for standard name directory validity.\n     *\n     * @param string $dir Directory to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isDirName($dir)\n    {\n        return (bool) preg_match('/^[a-zA-Z0-9_.-]*$/', $dir);\n    }\n\n    /**\n     * Check for admin panel tab name validity.\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTabName($name)\n    {\n        return preg_match('/^[^<>]+$/u', $name);\n    }\n\n    public static function isWeightUnit($unit)\n    {\n        return Validate::isGenericName($unit) & (Tools::strlen($unit) < 5);\n    }\n\n    public static function isDistanceUnit($unit)\n    {\n        return Validate::isGenericName($unit) & (Tools::strlen($unit) < 5);\n    }\n\n    public static function isSubDomainName($domain)\n    {\n        return preg_match('/^[a-zA-Z0-9-_]*$/', $domain);\n    }\n\n    public static function isVoucherDescription($text)\n    {\n        return preg_match('/^([^<>{}]|<br \\/>)*$/i', $text);\n    }\n\n    /**\n     * Check if the value is a sort direction value (DESC/ASC).\n     *\n     * @param string $value\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isSortDirection($value)\n    {\n        return $value === 'ASC' || $value === 'DESC';\n    }\n\n    /**\n     * Customization fields' label validity.\n     *\n     * @param string $label\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLabel($label)\n    {\n        return preg_match('/^[^{}<>]*$/u', $label);\n    }\n\n    /**\n     * Price display method validity.\n     *\n     * @param int $data Data to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPriceDisplayMethod($data)\n    {\n        return $data == PS_TAX_EXC || $data == PS_TAX_INC;\n    }\n\n    /**\n     * @param string $dni to validate\n     *\n     * @return bool\n     */\n    public static function isDniLite($dni)\n    {\n        return empty($dni) || (bool) preg_match('/^[0-9A-Za-z-.]{1,16}$/U', $dni);\n    }\n\n    /**\n     * Check if $data is a PrestaShop cookie object.\n     *\n     * @param mixed $data to validate\n     *\n     * @return bool\n     */\n    public static function isCookie($data)\n    {\n        return is_object($data) && get_class($data) == 'Cookie';\n    }\n\n    /**\n     * Check if $data is a string.\n     *\n     * @param string $data Data to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isString($data)\n    {\n        return is_string($data);\n    }\n\n    /**\n     * Check if the data is a reduction type (amout or percentage).\n     *\n     * @param string $data Data to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isReductionType($data)\n    {\n        return $data === 'amount' || $data === 'percentage';\n    }\n\n    /**\n     * Check for bool_id.\n     *\n     * @param string $ids\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isBoolId($ids)\n    {\n        return (bool) preg_match('#^[01]_[0-9]+$#', $ids);\n    }\n\n    /**\n     * Check the localization pack part selected.\n     *\n     * @param string $data Localization pack to check\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLocalizationPackSelection($data)\n    {\n        return in_array((string) $data, ['states', 'taxes', 'currencies', 'languages', 'units', 'groups']);\n    }\n\n    /**\n     * Check for PHP serialized data.\n     *\n     * @param string|null $data Serialized data to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isSerializedArray($data)\n    {\n        return $data === null || (is_string($data) && preg_match('/^a:[0-9]+:{.*;}$/s', $data));\n    }\n\n    /**\n     * Check if $string is a valid JSON string.\n     *\n     * @param string $string JSON string to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isJson($string)\n    {\n        json_decode($string);\n\n        return json_last_error() == JSON_ERROR_NONE;\n    }\n\n    /**\n     * Check for Latitude/Longitude.\n     *\n     * @param string|null $data Coordinate to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCoordinate($data)\n    {\n        return $data === null || preg_match('/^\\-?[0-9]{1,8}\\.[0-9]{1,8}$/s', $data);\n    }\n\n    /**\n     * Check for Language Iso Code.\n     *\n     * @param string $iso_code\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLangIsoCode($iso_code)\n    {\n        return (bool) preg_match('/^[a-zA-Z]{2,3}$/s', $iso_code);\n    }\n\n    /**\n     * Check for Language File Name.\n     *\n     * @param string $file_name\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLanguageFileName($file_name)\n    {\n        return (bool) preg_match('/^[a-zA-Z]{2,3}\\.(?:gzip|tar\\.gz)$/s', $file_name);\n    }\n\n    /**\n     * @param array $ids\n     *\n     * @return bool return true if the array contain only unsigned int value and not empty\n     */\n    public static function isArrayWithIds($ids)\n    {\n        if (!is_array($ids) || count($ids) < 1) {\n            return false;\n        }\n\n        foreach ($ids as $id) {\n            if ($id == 0 || !Validate::isUnsignedInt($id)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param array $stock_management\n     *\n     * @return bool return true if is a valide stock management\n     */\n    public static function isStockManagement($stock_management)\n    {\n        if (!in_array($stock_management, ['WA', 'FIFO', 'LIFO'])) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Validate SIRET Code.\n     *\n     * @param string $siret SIRET Code\n     *\n     * @return bool Return true if is valid\n     */\n    public static function isSiret($siret)\n    {\n        if (Tools::strlen($siret) != 14) {\n            return false;\n        }\n        $sum = 0;\n        for ($i = 0; $i != 14; ++$i) {\n            $tmp = ((($i + 1) % 2) + 1) * (int) ($siret[$i]);\n            if ($tmp >= 10) {\n                $tmp -= 9;\n            }\n            $sum += $tmp;\n        }\n\n        return $sum % 10 === 0;\n    }\n\n    /**\n     * Validate APE Code.\n     *\n     * @param string $ape APE Code\n     *\n     * @return bool Return true if is valid\n     */\n    public static function isApe($ape)\n    {\n        return (bool) preg_match('/^[0-9]{3,4}[a-zA-Z]{1}$/s', $ape);\n    }\n\n    public static function isControllerName($name)\n    {\n        return (bool) (is_string($name) && preg_match('/^[0-9a-zA-Z-_]*$/u', $name));\n    }\n\n    public static function isPrestaShopVersion($version)\n    {\n        return preg_match('/^[0-1]\\.[0-9]{1,2}(\\.[0-9]{1,2}){0,2}$/', $version) && ip2long($version);\n    }\n\n    public static function isOrderInvoiceNumber($id)\n    {\n        return preg_match('/^(?:' . Configuration::get('PS_INVOICE_PREFIX', Context::getContext()->language->id) . ')\\s*([0-9]+)$/i', $id);\n    }\n\n    public static function isThemeName($theme_name)\n    {\n        return (bool) preg_match('/^[\\w-]{3,255}$/u', $theme_name);\n    }\n\n    /**\n     * Check if enable_insecure_rsh exists in\n     * this PHP version otherwise disable the\n     * oProxyCommand option.\n     *\n     * @return bool\n     */\n    public static function isValidImapUrl($imapUrl)\n    {\n        if (false === ini_get('imap.enable_insecure_rsh')) {\n            return preg_match('~^((?!oProxyCommand).)*$~i', $imapUrl);\n        }\n\n        return true;\n    }\n\n    /**\n     * Check the given string is a valid PHP class name\n     *\n     * @param string $objectClassName object class name\n     *\n     * @return bool\n     */\n    public static function isValidObjectClassName(string $objectClassName): bool\n    {\n        return preg_match(static::OBJECT_CLASS_NAME_REGEXP, $objectClassName);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nuse Egulias\\EmailValidator\\EmailValidator;\nuse Egulias\\EmailValidator\\Validation\\MultipleValidationWithAnd;\nuse Egulias\\EmailValidator\\Validation\\RFCValidation;\nuse PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\Constraints\\CustomerName;\nuse PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\Factory\\CustomerNameValidatorFactory;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Currency\\ValueObject\\NumericIsoCode;\nuse PrestaShop\\PrestaShop\\Core\\Domain\\Product\\ValueObject\\Isbn;\nuse PrestaShop\\PrestaShop\\Core\\Email\\SwiftMailerValidation;\nuse PrestaShop\\PrestaShop\\Core\\Security\\PasswordPolicyConfiguration;\nuse Symfony\\Component\\Validator\\Constraints\\Email;\nuse Symfony\\Component\\Validator\\Validation;\nuse ZxcvbnPhp\\Zxcvbn;\n\nclass ValidateCore\n{\n    public const ORDER_BY_REGEXP = '/^(?:(`?)[\\w!_-]+\\1\\.)?(?:(`?)[\\w!_-]+\\2)$/';\n    public const OBJECT_CLASS_NAME_REGEXP = '/^[a-zA-Z_\\x80-\\xff][a-zA-Z0-9_\\x80-\\xff]*$/';\n    /**\n     * Maximal 32 bits value: (2^32)-1\n     *\n     * @var int\n     */\n    public const MYSQL_UNSIGNED_INT_MAX = 4294967295;\n\n    /**\n     * @deprecated since 8.0.0 use PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_LENGTH\n     */\n    public const ADMIN_PASSWORD_LENGTH = 8;\n\n    /**\n     * @deprecated since 8.0.0 use PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_LENGTH\n     */\n    public const PASSWORD_LENGTH = 5;\n\n    public static function isIp2Long($ip)\n    {\n        return preg_match('#^-?[0-9]+$#', (string) $ip);\n    }\n\n    /**\n     * @deprecated since PrestaShop 8.1 and will be removed in Prestashop 9.0\n     */\n    public static function isAnything()\n    {\n        @trigger_error(\n            'This function is deprecated PrestaShop 8.1 and will be removed in Prestashop 9.0.',\n            E_USER_DEPRECATED\n        );\n\n        return true;\n    }\n\n    /**\n     * Check for e-mail validity.\n     *\n     * @param string $email e-mail address to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isEmail($email)\n    {\n        // Check if the value is empty\n        if (empty($email)) {\n            return false;\n        }\n\n        $validator = Validation::createValidator();\n        $errors = $validator->validate($email, new Email([\n            'mode' => 'loose',\n        ]));\n\n        if (count($errors) > 0) {\n            return false;\n        }\n\n        // Check if the value is correct according to both validators (RFC & SwiftMailer)\n        return (new EmailValidator())->isValid($email, new MultipleValidationWithAnd([\n            new RFCValidation(),\n            new SwiftMailerValidation(), // special validation to be compatible with Swift Mailer\n        ]));\n    }\n\n    /**\n     * Check for module URL validity.\n     *\n     * @param string $url module URL to validate\n     * @param array $errors Reference array for catching errors\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isModuleUrl($url, &$errors)\n    {\n        if (!$url || $url == 'http://') {\n            $errors[] = Context::getContext()->getTranslator()->trans('Please specify module URL', [], 'Admin.Modules.Notification');\n        } elseif (substr($url, -4) != '.tar' && substr($url, -4) != '.zip' && substr($url, -4) != '.tgz' && substr($url, -7) != '.tar.gz') {\n            $errors[] = Context::getContext()->getTranslator()->trans('Unknown archive type.', [], 'Admin.Modules.Notification');\n        } else {\n            if ((strpos($url, 'http')) === false) {\n                $url = 'http://' . $url;\n            }\n            if (!is_array(@get_headers($url))) {\n                $errors[] = Context::getContext()->getTranslator()->trans('Invalid URL', [], 'Admin.Notifications.Error');\n            }\n        }\n        if (!count($errors)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check for MD5 string validity.\n     *\n     * @param string $md5 MD5 string to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMd5($md5)\n    {\n        return preg_match('/^[a-f0-9A-F]{32}$/', $md5);\n    }\n\n    /**\n     * Check for SHA1 string validity.\n     *\n     * @param string $sha1 SHA1 string to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isSha1($sha1)\n    {\n        return preg_match('/^[a-fA-F0-9]{40}$/', $sha1);\n    }\n\n    /**\n     * Check for a float number validity.\n     *\n     * @param float $float Float number to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isFloat($float)\n    {\n        return (string) ((float) $float) == (string) $float;\n    }\n\n    public static function isUnsignedFloat($float)\n    {\n        return (string) ((float) $float) == (string) $float && $float >= 0;\n    }\n\n    /**\n     * Check for a float number validity.\n     *\n     * @param float $float Float number to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isOptFloat($float)\n    {\n        return empty($float) || Validate::isFloat($float);\n    }\n\n    /**\n     * Check for a carrier name validity.\n     *\n     * @param string $name Carrier name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCarrierName($name)\n    {\n        return empty($name) || preg_match('/^[^<>;=#{}]*$/u', $name);\n    }\n\n    /**\n     * Check for an image size validity.\n     *\n     * @param string $size Image size to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isImageSize($size)\n    {\n        return preg_match('/^[0-9]{1,4}$/', $size);\n    }\n\n    /**\n     * Check whether given customer name is valid\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool\n     */\n    public static function isCustomerName($name)\n    {\n        $validatorBuilder = Validation::createValidatorBuilder();\n        $validatorBuilder->setConstraintValidatorFactory(new CustomerNameValidatorFactory());\n        $validator = $validatorBuilder->getValidator();\n        $violations = $validator->validate($name, [\n            new CustomerName(),\n        ]);\n\n        return count($violations) === 0;\n    }\n\n    /**\n     * Check whether given name is valid\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool\n     */\n    public static function isName($name)\n    {\n        return preg_match('/^[^0-9!<>,;?=+()@#\"\u00b0{}_$%:\u00a4|]*$/u', $name);\n    }\n\n    /**\n     * Check for hook name validity.\n     *\n     * @param string $hook Hook name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isHookName($hook)\n    {\n        return preg_match('/^[a-zA-Z0-9_-]+$/', $hook);\n    }\n\n    /**\n     * Check for sender name validity.\n     *\n     * @param string $mail_name Sender name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMailName($mail_name)\n    {\n        return is_string($mail_name) && preg_match('/^[^<>;=#{}]*$/u', $mail_name);\n    }\n\n    /**\n     * Check for e-mail subject validity.\n     *\n     * @param string $mail_subject e-mail subject to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMailSubject($mail_subject)\n    {\n        return preg_match('/^[^<>]*$/u', $mail_subject);\n    }\n\n    /**\n     * Check for module name validity.\n     *\n     * @param string $module_name Module name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isModuleName($module_name)\n    {\n        return is_string($module_name) && preg_match('/^[a-zA-Z0-9_-]+$/', $module_name);\n    }\n\n    /**\n     * Check for template name validity.\n     *\n     * @param string $tpl_name Template name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTplName($tpl_name)\n    {\n        return preg_match('/^[a-zA-Z0-9_-]+$/', $tpl_name);\n    }\n\n    /**\n     * Check for image type name validity.\n     *\n     * @param string $type Image type name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isImageTypeName($type)\n    {\n        return preg_match('/^[a-zA-Z0-9_ -]+$/', $type);\n    }\n\n    /**\n     * Check for price validity.\n     *\n     * @param string $price Price to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPrice($price)\n    {\n        return preg_match('/^[0-9]{1,10}(\\.[0-9]{1,9})?$/', $price);\n    }\n\n    /**\n     * Check for price validity (including negative price).\n     *\n     * @param string $price Price to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isNegativePrice($price)\n    {\n        return preg_match('/^[-]?[0-9]{1,10}(\\.[0-9]{1,9})?$/', $price);\n    }\n\n    /**\n     * Check for language code (ISO) validity.\n     *\n     * @param string $iso_code Language code (ISO) to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLanguageIsoCode($iso_code)\n    {\n        return preg_match('/^[a-zA-Z]{2,3}$/', $iso_code);\n    }\n\n    public static function isLanguageCode($s)\n    {\n        return preg_match('/^[a-zA-Z]{2}(-[a-zA-Z]{2})?$/', $s);\n    }\n\n    /**\n     * @see https://en.wikipedia.org/wiki/IETF_language_tag#ISO_3166-1_and_UN_M.49\n     *\n     * @param string $s\n     *\n     * @return bool\n     */\n    public static function isLocale($s)\n    {\n        return preg_match('/^[a-z]{2}-[A-Z]{2}$/', $s);\n    }\n\n    public static function isStateIsoCode($iso_code)\n    {\n        return preg_match('/^[a-zA-Z0-9]{1,4}((-)[a-zA-Z0-9]{1,4})?$/', $iso_code);\n    }\n\n    public static function isNumericIsoCode($iso_code)\n    {\n        return preg_match(NumericIsoCode::PATTERN, $iso_code);\n    }\n\n    /**\n     * Check for voucher name validity.\n     *\n     * @param string $voucher voucher to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isDiscountName($voucher)\n    {\n        return preg_match('/^[^!<>,;?=+()@\"\u00b0{}_$%:]{3,32}$/u', $voucher);\n    }\n\n    /**\n     * Check for product or category name validity.\n     *\n     * @param string $name Product or category name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCatalogName($name)\n    {\n        return preg_match('/^[^<>;=#{}]*$/u', $name);\n    }\n\n    /**\n     * Check for a message validity.\n     *\n     * @param string $message Message to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMessage($message)\n    {\n        return !preg_match('/[<>{}]/i', $message);\n    }\n\n    /**\n     * Check for a country name validity.\n     *\n     * @param string $name Country name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCountryName($name)\n    {\n        return preg_match('/^[a-zA-Z -]+$/', $name);\n    }\n\n    /**\n     * Check for a link (url-rewriting only) validity.\n     *\n     * @param string $link Link to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLinkRewrite($link)\n    {\n        if (Configuration::get('PS_ALLOW_ACCENTED_CHARS_URL')) {\n            return preg_match('/^[_a-zA-Z0-9\\x{0600}-\\x{06FF}\\pL\\pS-]+$/u', $link);\n        }\n\n        return preg_match('/^[_a-zA-Z0-9\\-]+$/', $link);\n    }\n\n    /**\n     * Check for a route pattern validity.\n     *\n     * @param string $pattern to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isRoutePattern($pattern)\n    {\n        if (Configuration::get('PS_ALLOW_ACCENTED_CHARS_URL')) {\n            return preg_match('/^[_a-zA-Z0-9\\x{0600}-\\x{06FF}\\(\\)\\.{}:\\/\\pL\\pS-]+$/u', $pattern);\n        }\n\n        return preg_match('/^[_a-zA-Z0-9\\(\\)\\.{}:\\/\\-]+$/', $pattern);\n    }\n\n    /**\n     * Check for a postal address validity.\n     *\n     * @param string $address Address to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isAddress($address)\n    {\n        return empty($address) || preg_match('/^[^!<>?=+@{}_$%]*$/u', $address);\n    }\n\n    /**\n     * Check for city name validity.\n     *\n     * @param string $city City name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCityName($city)\n    {\n        return preg_match('/^[^!<>;?=+@#\"\u00b0{}_$%]*$/u', $city);\n    }\n\n    /**\n     * Check for search query validity.\n     *\n     * @param string $search Query to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isValidSearch($search)\n    {\n        return preg_match('/^[^<>;=#{}]{0,64}$/u', $search);\n    }\n\n    /**\n     * Check for standard name validity.\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isGenericName($name)\n    {\n        return empty($name) || preg_match('/^[^<>={}]*$/u', $name);\n    }\n\n    /**\n     * Check for HTML field validity (no XSS please !).\n     *\n     * @param string $html HTML field to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCleanHtml($html, $allow_iframe = false)\n    {\n        $events = 'onmousedown|onmousemove|onmmouseup|onmouseover|onmouseout|onload|onunload|onfocus|onblur|onchange';\n        $events .= '|onsubmit|ondblclick|onclick|onkeydown|onkeyup|onkeypress|onmouseenter|onmouseleave|onerror|onselect|onreset|onabort|ondragdrop|onresize|onactivate|onafterprint|onmoveend';\n        $events .= '|onafterupdate|onbeforeactivate|onbeforecopy|onbeforecut|onbeforedeactivate|onbeforeeditfocus|onbeforepaste|onbeforeprint|onbeforeunload|onbeforeupdate|onmove';\n        $events .= '|onbounce|oncellchange|oncontextmenu|oncontrolselect|oncopy|oncut|ondataavailable|ondatasetchanged|ondatasetcomplete|ondeactivate|ondrag|ondragend|ondragenter|onmousewheel';\n        $events .= '|ondragleave|ondragover|ondragstart|ondrop|onerrorupdate|onfilterchange|onfinish|onfocusin|onfocusout|onhashchange|onhelp|oninput|onlosecapture|onmessage|onmouseup|onmovestart';\n        $events .= '|onoffline|ononline|onpaste|onpropertychange|onreadystatechange|onresizeend|onresizestart|onrowenter|onrowexit|onrowsdelete|onrowsinserted|onscroll|onsearch|onselectionchange';\n        $events .= '|onselectstart|onstart|onstop|onanimationcancel|onanimationend|onanimationiteration|onanimationstart';\n        $events .= '|onpointerover|onpointerenter|onpointerdown|onpointermove|onpointerup|onpointerout|onpointerleave|onpointercancel|ongotpointercapture|onlostpointercapture';\n\n        if (preg_match('/<[\\s]*script/ims', $html) || preg_match('/(' . $events . ')[\\s]*=/ims', $html) || preg_match('/.*script\\:/ims', $html)) {\n            return false;\n        }\n\n        if (!$allow_iframe && preg_match('/<[\\s]*(i?frame|form|input|embed|object)/ims', $html)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check for product reference validity.\n     *\n     * @param string $reference Product reference to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isReference($reference)\n    {\n        return preg_match('/^[^<>;={}]*$/u', $reference);\n    }\n\n    /**\n     * Check if the password score is valid\n     *\n     * @param string $password Password to validate\n     *\n     * @return bool Indicates whether the given string is a valid password\n     *\n     * @since 8.0.0\n     */\n    public static function isAcceptablePasswordScore(string $password): bool\n    {\n        $zxcvbn = new Zxcvbn();\n        $result = $zxcvbn->passwordStrength($password);\n        $minScore = Configuration::hasKey(PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_SCORE) ?\n                  Configuration::get(PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_SCORE) :\n                  PasswordPolicyConfiguration::PASSWORD_SAFELY_UNGUESSABLE;\n\n        return isset($result['score']) && $result['score'] >= $minScore;\n    }\n\n    /**\n     * Check if password length is valid\n     *\n     * @param string $password Password to validate\n     *\n     * @return bool Indicates whether the given string is a valid password length\n     *\n     * @since 8.0.0\n     */\n    public static function isAcceptablePasswordLength(string $password): bool\n    {\n        $passwordLength = Tools::strlen($password);\n        if (Configuration::hasKey(PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_LENGTH)\n            && Configuration::hasKey(PasswordPolicyConfiguration::CONFIGURATION_MAXIMUM_LENGTH)\n        ) {\n            return $passwordLength >= Configuration::get(PasswordPolicyConfiguration::CONFIGURATION_MINIMUM_LENGTH)\n                && $passwordLength <= Configuration::get(PasswordPolicyConfiguration::CONFIGURATION_MAXIMUM_LENGTH);\n        }\n\n        // If value doesn't exist in database, use default behavior check\n        return $passwordLength >= PasswordPolicyConfiguration::DEFAULT_MINIMUM_LENGTH && $passwordLength <= PasswordPolicyConfiguration::DEFAULT_MAXIMUM_LENGTH;\n    }\n\n    /**\n     * Check if plaintext password is valid\n     * Size is limited by `password_hash()` (72 chars).\n     *\n     * @param string $plaintextPasswd Password to validate\n     * @param int $size\n     *\n     * @return bool Indicates whether the given string is a valid plaintext password\n     *\n     * @since 1.7.0\n     * @deprecated since 8.0, use Validate::isAcceptablePasswordLength instead\n     */\n    public static function isPlaintextPassword($plaintextPasswd, $size = Validate::PASSWORD_LENGTH)\n    {\n        // The password length is limited by `password_hash()`\n        return Tools::strlen($plaintextPasswd) >= $size && Tools::strlen($plaintextPasswd) <= 72;\n    }\n\n    /**\n     * Check if hashed password is valid\n     * PrestaShop supports both MD5 and `PASSWORD_BCRYPT` (PHP API)\n     * The lengths are 32 (MD5) or 60 (`PASSWORD_BCRYPT`)\n     * Anything else is invalid.\n     *\n     * @param string $hashedPasswd Password to validate\n     *\n     * @return bool Indicates whether the given string is a valid hashed password\n     *\n     * @since 1.7.0\n     */\n    public static function isHashedPassword($hashedPasswd)\n    {\n        return Tools::strlen($hashedPasswd) == 32 || Tools::strlen($hashedPasswd) == 60;\n    }\n\n    /**\n     * @deprecated since 8.0\n     */\n    public static function isPasswdAdmin($passwd)\n    {\n        return Validate::isPlaintextPassword($passwd, Validate::ADMIN_PASSWORD_LENGTH);\n    }\n\n    /**\n     * Check for configuration key validity.\n     *\n     * @param string $config_name Configuration key to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isConfigName($config_name)\n    {\n        return preg_match('/^[a-zA-Z_0-9-]+$/', $config_name);\n    }\n\n    /**\n     * Check date formats like http://php.net/manual/en/function.date.php.\n     *\n     * @param string $date_format date format to check\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPhpDateFormat($date_format)\n    {\n        // We can't really check if this is valid or not, because this is a string and you can write whatever you want in it.\n        // That's why only < et > are forbidden (HTML)\n        return preg_match('/^[^<>]+$/', $date_format);\n    }\n\n    /**\n     * Check for date format.\n     *\n     * @param string $date Date to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isDateFormat($date)\n    {\n        return (bool) preg_match('/^([0-9]{4})-((0?[0-9])|(1[0-2]))-((0?[0-9])|([1-2][0-9])|(3[01]))( [0-9]{2}:[0-9]{2}:[0-9]{2})?$/', $date);\n    }\n\n    /**\n     * Check for date validity.\n     *\n     * @param string $date Date to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isDate($date)\n    {\n        if (!preg_match('/^([0-9]{4})-((?:0?[0-9])|(?:1[0-2]))-((?:0?[0-9])|(?:[1-2][0-9])|(?:3[01]))( [0-9]{2}:[0-9]{2}:[0-9]{2})?$/', $date, $matches)) {\n            return false;\n        }\n\n        return checkdate((int) $matches[2], (int) $matches[3], (int) $matches[1]);\n    }\n\n    public static function isDateOrNull($date)\n    {\n        if (null === $date || $date === '0000-00-00 00:00:00' || $date === '0000-00-00') {\n            return true;\n        }\n\n        return self::isDate($date);\n    }\n\n    /**\n     * Check for birthDate validity. To avoid year in two digits, disallow date < 200 years ago\n     *\n     * @param string $date birthdate to validate\n     * @param string $format optional format\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isBirthDate($date, $format = 'Y-m-d')\n    {\n        if (empty($date) || $date == '0000-00-00') {\n            return true;\n        }\n\n        $d = DateTime::createFromFormat($format, $date);\n        if (!empty(DateTime::getLastErrors()['warning_count']) || false === $d) {\n            return false;\n        }\n        $twoHundredYearsAgo = new Datetime();\n        $twoHundredYearsAgo->sub(new DateInterval('P200Y'));\n\n        return $d->setTime(0, 0, 0) <= new Datetime() && $d->setTime(0, 0, 0) >= $twoHundredYearsAgo;\n    }\n\n    /**\n     * Check for boolean validity.\n     *\n     * @param mixed $bool Value to validate as a boolean\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isBool($bool)\n    {\n        return $bool === null || is_bool($bool) || preg_match('/^(0|1)$/', $bool);\n    }\n\n    /**\n     * Check for phone number validity.\n     *\n     * @param string $number Phone number to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPhoneNumber($number)\n    {\n        return preg_match('/^[+0-9. ()\\/-]*$/', $number);\n    }\n\n    /**\n     * Check for barcode validity (EAN-13).\n     *\n     * @param string $ean13 Barcode to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isEan13($ean13)\n    {\n        return !$ean13 || preg_match('/^[0-9]{0,13}$/', $ean13);\n    }\n\n    /**\n     * Check for ISBN.\n     *\n     * @param string $isbn validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isIsbn($isbn)\n    {\n        return !$isbn || preg_match(Isbn::VALID_PATTERN, $isbn);\n    }\n\n    /**\n     * Check for barcode validity (UPC).\n     *\n     * @param string $upc Barcode to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUpc($upc)\n    {\n        return !$upc || preg_match('/^[0-9]{0,12}$/', $upc);\n    }\n\n    /**\n     * Check for MPN validity.\n     *\n     * @param string $mpn to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isMpn($mpn)\n    {\n        return Tools::strlen($mpn) <= 40;\n    }\n\n    /**\n     * Check for postal code validity.\n     *\n     * @param string $postcode Postal code to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPostCode($postcode)\n    {\n        return empty($postcode) || preg_match('/^[a-zA-Z 0-9-]+$/', $postcode);\n    }\n\n    /**\n     * Check for zip code format validity.\n     *\n     * @param string $zip_code zip code format to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isZipCodeFormat($zip_code)\n    {\n        if (!empty($zip_code)) {\n            return preg_match('/^[NLCnlc 0-9-]+$/', $zip_code);\n        }\n\n        return true;\n    }\n\n    /**\n     * Check for table or identifier validity\n     * Mostly used in database for ordering : ASC / DESC.\n     *\n     * @param string $way Keyword to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isOrderWay($way)\n    {\n        return !empty($way) && in_array(strtolower($way), ['asc', 'desc', 'random']);\n    }\n\n    /**\n     * Check for table or identifier validity\n     * Mostly used in database for ordering : ORDER BY field.\n     *\n     * @param string $order Field to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isOrderBy($order)\n    {\n        return !empty($order) && preg_match(static::ORDER_BY_REGEXP, $order);\n    }\n\n    /**\n     * Check for table or identifier validity\n     * Mostly used in database for table names and id_table.\n     *\n     * @param string $table Table/identifier to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTableOrIdentifier($table)\n    {\n        return preg_match('/^[a-zA-Z0-9_-]+$/', $table);\n    }\n\n    /**\n     * Check for tags list validity.\n     *\n     * @param string $list List to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTagsList($list)\n    {\n        return preg_match('/^[^!<>;?=+#\"\u00b0{}_$%]*$/u', $list);\n    }\n\n    /**\n     * Check for product visibility.\n     *\n     * @param string $s visibility to check\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isProductVisibility($s)\n    {\n        return preg_match('/^both|catalog|search|none$/i', $s);\n    }\n\n    /**\n     * Check for an integer validity.\n     *\n     * @param int|bool $value Integer to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isInt($value)\n    {\n        return (string) (int) $value === (string) $value || $value === false;\n    }\n\n    /**\n     * Check for an integer validity (unsigned).\n     *\n     * @param mixed $value Integer to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUnsignedInt($value)\n    {\n        return (is_numeric($value) || is_string($value))\n            && (string) (int) $value === (string) $value\n            && $value < (static::MYSQL_UNSIGNED_INT_MAX + 1)\n            && $value >= 0;\n    }\n\n    /**\n     * Check for an percentage validity (between 0 and 100).\n     *\n     * @param float $value Float to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPercentage($value)\n    {\n        return Validate::isFloat($value) && $value >= 0 && $value <= 100;\n    }\n\n    /**\n     * Check for an integer validity (unsigned)\n     * Mostly used in database for auto-increment.\n     *\n     * @param int $id Integer to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUnsignedId($id)\n    {\n        return Validate::isUnsignedInt($id); /* Because an id could be equal to zero when there is no association */\n    }\n\n    public static function isNullOrUnsignedId($id)\n    {\n        return $id === null || Validate::isUnsignedId($id);\n    }\n\n    /**\n     * Check object validity.\n     *\n     * @param object $object Object to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLoadedObject($object)\n    {\n        return is_object($object) && $object->id;\n    }\n\n    /**\n     * Check color validity.\n     *\n     * @param string $color Color to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isColor($color)\n    {\n        return preg_match('/^(#[0-9a-fA-F]{6}|[a-zA-Z0-9-]*)$/', $color);\n    }\n\n    /**\n     * Check url validity (disallowed empty string).\n     *\n     * @param string $url Url to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUrl($url)\n    {\n        return preg_match('/^[~:#,$%&_=\\(\\)\\.\\? \\+\\-@\\/a-zA-Z0-9\\pL\\pS-]+$/u', $url);\n    }\n\n    /**\n     * Check tracking number validity (disallowed empty string).\n     *\n     * @param string $tracking_number Tracking number to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTrackingNumber($tracking_number)\n    {\n        return preg_match('/^[~:#,%&_=\\(\\)\\[\\]\\.\\? \\+\\-@\\/a-zA-Z0-9]+$/', $tracking_number);\n    }\n\n    /**\n     * Check url validity (allowed empty string).\n     *\n     * @param string $url Url to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isUrlOrEmpty($url)\n    {\n        return empty($url) || Validate::isUrl($url);\n    }\n\n    /**\n     * Check if URL is absolute.\n     *\n     * @param string $url URL to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isAbsoluteUrl($url)\n    {\n        if (!empty($url)) {\n            return preg_match('/^(https?:)?\\/\\/[$~:;#,%&_=\\(\\)\\[\\]\\.\\? \\+\\-@\\/a-zA-Z0-9]+$/', $url);\n        }\n\n        return true;\n    }\n\n    public static function isMySQLEngine($engine)\n    {\n        return in_array($engine, ['InnoDB', 'MyISAM']);\n    }\n\n    public static function isUnixName($data)\n    {\n        return preg_match('/^[a-z0-9\\._-]+$/ui', $data);\n    }\n\n    public static function isTablePrefix($data)\n    {\n        // Even if \"-\" is theorically allowed, it will be considered a syntax error if you do not add backquotes (`) around the table name\n        return preg_match('/^[a-z0-9_]+$/ui', $data);\n    }\n\n    /**\n     * Check for standard name file validity.\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isFileName($name)\n    {\n        return preg_match('/^[a-zA-Z0-9_.-]+$/', $name);\n    }\n\n    /**\n     * Check for standard name directory validity.\n     *\n     * @param string $dir Directory to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isDirName($dir)\n    {\n        return (bool) preg_match('/^[a-zA-Z0-9_.-]*$/', $dir);\n    }\n\n    /**\n     * Check for admin panel tab name validity.\n     *\n     * @param string $name Name to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isTabName($name)\n    {\n        return preg_match('/^[^<>]+$/u', $name);\n    }\n\n    public static function isWeightUnit($unit)\n    {\n        return Validate::isGenericName($unit) & (Tools::strlen($unit) < 5);\n    }\n\n    public static function isDistanceUnit($unit)\n    {\n        return Validate::isGenericName($unit) & (Tools::strlen($unit) < 5);\n    }\n\n    public static function isSubDomainName($domain)\n    {\n        return preg_match('/^[a-zA-Z0-9-_]*$/', $domain);\n    }\n\n    public static function isVoucherDescription($text)\n    {\n        return preg_match('/^([^<>{}]|<br \\/>)*$/i', $text);\n    }\n\n    /**\n     * Check if the value is a sort direction value (DESC/ASC).\n     *\n     * @param string $value\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isSortDirection($value)\n    {\n        return $value === 'ASC' || $value === 'DESC';\n    }\n\n    /**\n     * Customization fields' label validity.\n     *\n     * @param string $label\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLabel($label)\n    {\n        return preg_match('/^[^{}<>]*$/u', $label);\n    }\n\n    /**\n     * Price display method validity.\n     *\n     * @param int $data Data to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isPriceDisplayMethod($data)\n    {\n        return $data == PS_TAX_EXC || $data == PS_TAX_INC;\n    }\n\n    /**\n     * @param string $dni to validate\n     *\n     * @return bool\n     */\n    public static function isDniLite($dni)\n    {\n        return empty($dni) || (bool) preg_match('/^[0-9A-Za-z-.]{1,16}$/U', $dni);\n    }\n\n    /**\n     * Check if $data is a PrestaShop cookie object.\n     *\n     * @param mixed $data to validate\n     *\n     * @return bool\n     */\n    public static function isCookie($data)\n    {\n        return is_object($data) && get_class($data) == 'Cookie';\n    }\n\n    /**\n     * Check if $data is a string.\n     *\n     * @param string $data Data to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isString($data)\n    {\n        return is_string($data);\n    }\n\n    /**\n     * Check if the data is a reduction type (amout or percentage).\n     *\n     * @param string $data Data to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isReductionType($data)\n    {\n        return $data === 'amount' || $data === 'percentage';\n    }\n\n    /**\n     * Check for bool_id.\n     *\n     * @param string $ids\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isBoolId($ids)\n    {\n        return (bool) preg_match('#^[01]_[0-9]+$#', $ids);\n    }\n\n    /**\n     * Check the localization pack part selected.\n     *\n     * @param string $data Localization pack to check\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLocalizationPackSelection($data)\n    {\n        return in_array((string) $data, ['states', 'taxes', 'currencies', 'languages', 'units', 'groups']);\n    }\n\n    /**\n     * Check for PHP serialized data.\n     *\n     * @param string|null $data Serialized data to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isSerializedArray($data)\n    {\n        return $data === null || (is_string($data) && preg_match('/^a:[0-9]+:{.*;}$/s', $data));\n    }\n\n    /**\n     * Check if $string is a valid JSON string.\n     *\n     * @param string $string JSON string to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isJson($string)\n    {\n        json_decode($string);\n\n        return json_last_error() == JSON_ERROR_NONE;\n    }\n\n    /**\n     * Check for Latitude/Longitude.\n     *\n     * @param string|null $data Coordinate to validate\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isCoordinate($data)\n    {\n        return $data === null || preg_match('/^\\-?[0-9]{1,8}\\.[0-9]{1,8}$/s', $data);\n    }\n\n    /**\n     * Check for Language Iso Code.\n     *\n     * @param string $iso_code\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLangIsoCode($iso_code)\n    {\n        return (bool) preg_match('/^[a-zA-Z]{2,3}$/s', $iso_code);\n    }\n\n    /**\n     * Check for Language File Name.\n     *\n     * @param string $file_name\n     *\n     * @return bool Validity is ok or not\n     */\n    public static function isLanguageFileName($file_name)\n    {\n        return (bool) preg_match('/^[a-zA-Z]{2,3}\\.(?:gzip|tar\\.gz)$/s', $file_name);\n    }\n\n    /**\n     * @param array $ids\n     *\n     * @return bool return true if the array contain only unsigned int value and not empty\n     */\n    public static function isArrayWithIds($ids)\n    {\n        if (!is_array($ids) || count($ids) < 1) {\n            return false;\n        }\n\n        foreach ($ids as $id) {\n            if ($id == 0 || !Validate::isUnsignedInt($id)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param array $stock_management\n     *\n     * @return bool return true if is a valide stock management\n     */\n    public static function isStockManagement($stock_management)\n    {\n        if (!in_array($stock_management, ['WA', 'FIFO', 'LIFO'])) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Validate SIRET Code.\n     *\n     * @param string $siret SIRET Code\n     *\n     * @return bool Return true if is valid\n     */\n    public static function isSiret($siret)\n    {\n        if (Tools::strlen($siret) != 14) {\n            return false;\n        }\n        $sum = 0;\n        for ($i = 0; $i != 14; ++$i) {\n            $tmp = ((($i + 1) % 2) + 1) * (int) ($siret[$i]);\n            if ($tmp >= 10) {\n                $tmp -= 9;\n            }\n            $sum += $tmp;\n        }\n\n        return $sum % 10 === 0;\n    }\n\n    /**\n     * Validate APE Code.\n     *\n     * @param string $ape APE Code\n     *\n     * @return bool Return true if is valid\n     */\n    public static function isApe($ape)\n    {\n        return (bool) preg_match('/^[0-9]{3,4}[a-zA-Z]{1}$/s', $ape);\n    }\n\n    public static function isControllerName($name)\n    {\n        return (bool) (is_string($name) && preg_match('/^[0-9a-zA-Z-_]*$/u', $name));\n    }\n\n    public static function isPrestaShopVersion($version)\n    {\n        return preg_match('/^[0-1]\\.[0-9]{1,2}(\\.[0-9]{1,2}){0,2}$/', $version) && ip2long($version);\n    }\n\n    public static function isOrderInvoiceNumber($id)\n    {\n        return preg_match('/^(?:' . Configuration::get('PS_INVOICE_PREFIX', Context::getContext()->language->id) . ')\\s*([0-9]+)$/i', $id);\n    }\n\n    public static function isThemeName($theme_name)\n    {\n        return (bool) preg_match('/^[\\w-]{3,255}$/u', $theme_name);\n    }\n\n    /**\n     * Check if enable_insecure_rsh exists in\n     * this PHP version otherwise disable the\n     * oProxyCommand option.\n     *\n     * @return bool\n     */\n    public static function isValidImapUrl($imapUrl)\n    {\n        if (false === ini_get('imap.enable_insecure_rsh')) {\n            return preg_match('~^((?!oProxyCommand).)*$~i', $imapUrl);\n        }\n\n        return true;\n    }\n\n    /**\n     * Check the given string is a valid PHP class name\n     *\n     * @param string $objectClassName object class name\n     *\n     * @return bool\n     */\n    public static function isValidObjectClassName(string $objectClassName): bool\n    {\n        return preg_match(static::OBJECT_CLASS_NAME_REGEXP, $objectClassName);\n    }\n}\n"], "filenames": ["classes/Validate.php"], "buggy_code_start_loc": [523], "buggy_code_end_loc": [523], "fixing_code_start_loc": [524], "fixing_code_end_loc": [525], "type": "CWE-116", "message": "PrestaShop is an open source e-commerce web application. Versions prior to 1.7.8.10, 8.0.5, and 8.1.1 are vulnerable to cross-site scripting through the `isCleanHTML` method. Versions 1.7.8.10, 8.0.5, and 8.1.1 contain a patch. There are no known workarounds.", "other": {"cve": {"id": "CVE-2023-39527", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-07T21:15:10.480", "lastModified": "2023-08-09T20:19:10.417", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrestaShop is an open source e-commerce web application. Versions prior to 1.7.8.10, 8.0.5, and 8.1.1 are vulnerable to cross-site scripting through the `isCleanHTML` method. Versions 1.7.8.10, 8.0.5, and 8.1.1 contain a patch. There are no known workarounds."}, {"lang": "es", "value": "PrestaShop es una aplicaci\u00f3n web de comercio electr\u00f3nico de c\u00f3digo abierto. Las versiones anteriores a 1.7.8.10, 8.0.5, y 8.1.1 son vulnerables a Cross-Site Scripting (XSS) a trav\u00e9s del m\u00e9todo \"isCleanHTML\". Las versiones 1.7.8.10, 8.0.5 y 8.1.1 contienen un parche. No se conocen soluciones. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.7, "impactScore": 6.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-116"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.8.10", "matchCriteriaId": "67B46788-7E3F-49C3-A69A-2F1922BCA5A5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.0", "versionEndExcluding": "8.0.5", "matchCriteriaId": "1E3B54B4-4484-44F8-A0F1-714EA40399CF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "D34AD75A-BC2E-46F5-BFCD-671C06A23898"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/afc14f8eaa058b3e6a20ac43e033ee2656fb88b4", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-xw2r-f8xv-c8xp", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/afc14f8eaa058b3e6a20ac43e033ee2656fb88b4"}}