{"buggy_code": ["import { marked } from 'marked';\nimport DOMPurify from 'dompurify';\nimport { escapeHtml } from './HTMLSanitizer';\n\nconst TWITTER_USERNAME_REGEX = /(^|[^@\\w])@(\\w{1,15})\\b/g;\nconst TWITTER_USERNAME_REPLACEMENT =\n  '$1<a href=\"http://twitter.com/$2\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">@$2</a>';\n\nconst TWITTER_HASH_REGEX = /(^|\\s)#(\\w+)/g;\nconst TWITTER_HASH_REPLACEMENT =\n  '$1<a href=\"https://twitter.com/hashtag/$2\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">#$2</a>';\n\nconst USER_MENTIONS_REGEX = /mention:\\/\\/(user|team)\\/(\\d+)\\/(.+)/gm;\n\nclass MessageFormatter {\n  constructor(message, isATweet = false) {\n    this.message = DOMPurify.sanitize(escapeHtml(message || ''));\n    this.isATweet = isATweet;\n    this.marked = marked;\n\n    const renderer = {\n      heading(text) {\n        return `<strong>${text}</strong>`;\n      },\n      link(url, title, text) {\n        const mentionRegex = new RegExp(USER_MENTIONS_REGEX);\n        if (url.match(mentionRegex)) {\n          return `<span class=\"prosemirror-mention-node\">${text}</span>`;\n        }\n        return `<a rel=\"noreferrer noopener nofollow\" href=\"${url}\" class=\"link\" title=\"${title ||\n          ''}\" target=\"_blank\">${text}</a>`;\n      },\n    };\n    this.marked.use({ renderer });\n  }\n\n  formatMessage() {\n    if (this.isATweet) {\n      const withUserName = this.message.replace(\n        TWITTER_USERNAME_REGEX,\n        TWITTER_USERNAME_REPLACEMENT\n      );\n      const withHash = withUserName.replace(\n        TWITTER_HASH_REGEX,\n        TWITTER_HASH_REPLACEMENT\n      );\n      const markedDownOutput = marked(withHash);\n      return markedDownOutput;\n    }\n    return marked(this.message, { breaks: true, gfm: true });\n  }\n\n  get formattedMessage() {\n    return this.formatMessage();\n  }\n\n  get plainText() {\n    const strippedOutHtml = new DOMParser().parseFromString(\n      this.formattedMessage,\n      'text/html'\n    );\n    return strippedOutHtml.body.textContent || '';\n  }\n}\n\nexport default MessageFormatter;\n", "import MessageFormatter from '../MessageFormatter';\n\ndescribe('#MessageFormatter', () => {\n  describe('content with links', () => {\n    it('should format correctly', () => {\n      const message =\n        'Chatwoot is an opensource tool. [Chatwoot](https://www.chatwoot.com)';\n      expect(new MessageFormatter(message).formattedMessage).toMatch(\n        '<p>Chatwoot is an opensource tool. <a rel=\"noreferrer noopener nofollow\" href=\"https://www.chatwoot.com\" class=\"link\" title=\"\" target=\"_blank\">Chatwoot</a></p>'\n      );\n    });\n    it('should format correctly', () => {\n      const message =\n        'Chatwoot is an opensource tool. https://www.chatwoot.com';\n      expect(new MessageFormatter(message).formattedMessage).toMatch(\n        '<p>Chatwoot is an opensource tool. <a rel=\"noreferrer noopener nofollow\" href=\"https://www.chatwoot.com\" class=\"link\" title=\"\" target=\"_blank\">https://www.chatwoot.com</a></p>'\n      );\n    });\n  });\n\n  describe('parses heading to strong', () => {\n    it('should format correctly', () => {\n      const message = '### opensource \\n ## tool';\n      expect(new MessageFormatter(message).formattedMessage).toMatch(\n        '<strong>opensource</strong><strong>tool</strong>'\n      );\n    });\n  });\n\n  describe('tweets', () => {\n    it('should return the same string if not tags or @mentions', () => {\n      const message = 'Chatwoot is an opensource tool';\n      expect(new MessageFormatter(message).formattedMessage).toMatch(message);\n    });\n\n    it('should add links to @mentions', () => {\n      const message =\n        '@chatwootapp is an opensource tool thanks @longnonexistenttwitterusername';\n      expect(new MessageFormatter(message, true).formattedMessage).toMatch(\n        '<p><a href=\"http://twitter.com/chatwootapp\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">@chatwootapp</a> is an opensource tool thanks @longnonexistenttwitterusername</p>'\n      );\n    });\n\n    it('should add links to #tags', () => {\n      const message = '#chatwootapp is an opensource tool';\n      expect(new MessageFormatter(message, true).formattedMessage).toMatch(\n        '<p><a href=\"https://twitter.com/hashtag/chatwootapp\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">#chatwootapp</a> is an opensource tool</p>'\n      );\n    });\n  });\n\n  describe('plain text content', () => {\n    it('returns the plain text without HTML', () => {\n      const message =\n        '<b>Chatwoot is an opensource tool. https://www.chatwoot.com</b>';\n      expect(new MessageFormatter(message).plainText).toMatch(\n        'Chatwoot is an opensource tool. https://www.chatwoot.com'\n      );\n    });\n  });\n});\n"], "fixing_code": ["import { marked } from 'marked';\nimport DOMPurify from 'dompurify';\nimport { escapeHtml } from './HTMLSanitizer';\n\nconst TWITTER_USERNAME_REGEX = /(^|[^@\\w])@(\\w{1,15})\\b/g;\nconst TWITTER_USERNAME_REPLACEMENT =\n  '$1<a href=\"http://twitter.com/$2\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">@$2</a>';\n\nconst TWITTER_HASH_REGEX = /(^|\\s)#(\\w+)/g;\nconst TWITTER_HASH_REPLACEMENT =\n  '$1<a href=\"https://twitter.com/hashtag/$2\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">#$2</a>';\n\nconst USER_MENTIONS_REGEX = /mention:\\/\\/(user|team)\\/(\\d+)\\/(.+)/gm;\n\nclass MessageFormatter {\n  constructor(message, isATweet = false) {\n    this.message = DOMPurify.sanitize(escapeHtml(message || ''));\n    this.isATweet = isATweet;\n    this.marked = marked;\n\n    const renderer = {\n      heading(text) {\n        return `<strong>${text}</strong>`;\n      },\n      link(url, title, text) {\n        const mentionRegex = new RegExp(USER_MENTIONS_REGEX);\n        if (url.match(mentionRegex)) {\n          return `<span class=\"prosemirror-mention-node\">${text}</span>`;\n        }\n        return `<a rel=\"noreferrer noopener nofollow\" href=\"${url}\" class=\"link\" title=\"${title ||\n          ''}\" target=\"_blank\">${text}</a>`;\n      },\n    };\n    this.marked.use({ renderer });\n  }\n\n  formatMessage() {\n    if (this.isATweet) {\n      const withUserName = this.message.replace(\n        TWITTER_USERNAME_REGEX,\n        TWITTER_USERNAME_REPLACEMENT\n      );\n      const withHash = withUserName.replace(\n        TWITTER_HASH_REGEX,\n        TWITTER_HASH_REPLACEMENT\n      );\n      const markedDownOutput = marked(withHash);\n      return markedDownOutput;\n    }\n    DOMPurify.addHook('afterSanitizeAttributes', node => {\n      if ('target' in node) node.setAttribute('target', '_blank');\n    });\n    return DOMPurify.sanitize(\n      marked(this.message, { breaks: true, gfm: true })\n    );\n  }\n\n  get formattedMessage() {\n    return this.formatMessage();\n  }\n\n  get plainText() {\n    const strippedOutHtml = new DOMParser().parseFromString(\n      this.formattedMessage,\n      'text/html'\n    );\n    return strippedOutHtml.body.textContent || '';\n  }\n}\n\nexport default MessageFormatter;\n", "import MessageFormatter from '../MessageFormatter';\n\ndescribe('#MessageFormatter', () => {\n  describe('content with links', () => {\n    it('should format correctly', () => {\n      const message =\n        'Chatwoot is an opensource tool. [Chatwoot](https://www.chatwoot.com)';\n      expect(new MessageFormatter(message).formattedMessage).toMatch(\n        '<p>Chatwoot is an opensource tool. <a title=\"\" class=\"link\" href=\"https://www.chatwoot.com\" rel=\"noreferrer noopener nofollow\" target=\"_blank\">Chatwoot</a></p>'\n      );\n    });\n    it('should format correctly', () => {\n      const message =\n        'Chatwoot is an opensource tool. https://www.chatwoot.com';\n      expect(new MessageFormatter(message).formattedMessage).toMatch(\n        '<p>Chatwoot is an opensource tool. <a title=\"\" class=\"link\" href=\"https://www.chatwoot.com\" rel=\"noreferrer noopener nofollow\" target=\"_blank\">https://www.chatwoot.com</a></p>'\n      );\n    });\n  });\n\n  describe('parses heading to strong', () => {\n    it('should format correctly', () => {\n      const message = '### opensource \\n ## tool';\n      expect(new MessageFormatter(message).formattedMessage).toMatch(\n        '<strong>opensource</strong><strong>tool</strong>'\n      );\n    });\n  });\n\n  describe('tweets', () => {\n    it('should return the same string if not tags or @mentions', () => {\n      const message = 'Chatwoot is an opensource tool';\n      expect(new MessageFormatter(message).formattedMessage).toMatch(message);\n    });\n\n    it('should add links to @mentions', () => {\n      const message =\n        '@chatwootapp is an opensource tool thanks @longnonexistenttwitterusername';\n      expect(new MessageFormatter(message, true).formattedMessage).toMatch(\n        '<p><a href=\"http://twitter.com/chatwootapp\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">@chatwootapp</a> is an opensource tool thanks @longnonexistenttwitterusername</p>'\n      );\n    });\n\n    it('should add links to #tags', () => {\n      const message = '#chatwootapp is an opensource tool';\n      expect(new MessageFormatter(message, true).formattedMessage).toMatch(\n        '<p><a href=\"https://twitter.com/hashtag/chatwootapp\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">#chatwootapp</a> is an opensource tool</p>'\n      );\n    });\n  });\n\n  describe('plain text content', () => {\n    it('returns the plain text without HTML', () => {\n      const message =\n        '<b>Chatwoot is an opensource tool. https://www.chatwoot.com</b>';\n      expect(new MessageFormatter(message).plainText).toMatch(\n        'Chatwoot is an opensource tool. https://www.chatwoot.com'\n      );\n    });\n  });\n\n  describe('#sanitize', () => {\n    it('sanitizes markup and removes all unnecessary elements', () => {\n      const message =\n        '[xssLink](javascript:alert(document.cookie))\\n[normalLink](https://google.com)**I am a bold text paragraph**';\n      expect(new MessageFormatter(message).formattedMessage).toMatch(\n        '<p><a title=\"\" class=\"link\" rel=\"noreferrer noopener nofollow\" target=\"_blank\">xssLink</a><br><a title=\"\" class=\"link\" href=\"https://google.com\" rel=\"noreferrer noopener nofollow\" target=\"_blank\">normalLink</a><strong>I am a bold text paragraph</strong></p>'\n      );\n    });\n  });\n});\n"], "filenames": ["app/javascript/shared/helpers/MessageFormatter.js", "app/javascript/shared/helpers/specs/MessageFormatter.spec.js"], "buggy_code_start_loc": [50, 9], "buggy_code_end_loc": [51, 60], "fixing_code_start_loc": [50, 9], "fixing_code_end_loc": [56, 71], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - DOM in GitHub repository chatwoot/chatwoot prior to 2.7.0.", "other": {"cve": {"id": "CVE-2022-0542", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-19T18:15:08.590", "lastModified": "2022-08-23T14:17:59.497", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - DOM in GitHub repository chatwoot/chatwoot prior to 2.7.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - DOM en el repositorio GitHub chatwoot/chatwoot versiones anteriores a 2.7.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chatwoot:chatwoot:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.7.0", "matchCriteriaId": "6A092E9E-8B6F-48E5-B4BF-6BF99F160CAB"}]}]}], "references": [{"url": "https://github.com/chatwoot/chatwoot/commit/dd1fe4f93a6fbafa1d1eed87ac7d4143e701ec08", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/e6469ba6-03a2-4b17-8b4e-8932ecd0f7ac", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chatwoot/chatwoot/commit/dd1fe4f93a6fbafa1d1eed87ac7d4143e701ec08"}}