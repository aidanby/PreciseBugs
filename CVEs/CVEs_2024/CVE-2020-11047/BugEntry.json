{"buggy_code": ["/**\n * FreeRDP: A Remote Desktop Protocol Implementation\n * Auto-Detect PDUs\n *\n * Copyright 2014 Dell Software <Mike.McDonald@software.dell.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include <winpr/crypto.h>\n\n#include \"autodetect.h\"\n\n#define RDP_RTT_REQUEST_TYPE_CONTINUOUS 0x0001\n#define RDP_RTT_REQUEST_TYPE_CONNECTTIME 0x1001\n\n#define RDP_RTT_RESPONSE_TYPE 0x0000\n\n#define RDP_BW_START_REQUEST_TYPE_CONTINUOUS 0x0014\n#define RDP_BW_START_REQUEST_TYPE_TUNNEL 0x0114\n#define RDP_BW_START_REQUEST_TYPE_CONNECTTIME 0x1014\n#define RDP_BW_PAYLOAD_REQUEST_TYPE 0x0002\n#define RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME 0x002B\n#define RDP_BW_STOP_REQUEST_TYPE_CONTINUOUS 0x0429\n#define RDP_BW_STOP_REQUEST_TYPE_TUNNEL 0x0629\n\n#define RDP_BW_RESULTS_RESPONSE_TYPE_CONNECTTIME 0x0003\n#define RDP_BW_RESULTS_RESPONSE_TYPE_CONTINUOUS 0x000B\n\n#define RDP_NETCHAR_SYNC_RESPONSE_TYPE 0x0018\n\ntypedef struct\n{\n\tUINT8 headerLength;\n\tUINT8 headerTypeId;\n\tUINT16 sequenceNumber;\n\tUINT16 requestType;\n} AUTODETECT_REQ_PDU;\n\ntypedef struct\n{\n\tUINT8 headerLength;\n\tUINT8 headerTypeId;\n\tUINT16 sequenceNumber;\n\tUINT16 responseType;\n} AUTODETECT_RSP_PDU;\n\nstatic BOOL autodetect_send_rtt_measure_request(rdpContext* context, UINT16 sequenceNumber,\n                                                UINT16 requestType)\n{\n\twStream* s;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending RTT Measure Request PDU\");\n\tStream_Write_UINT8(s, 0x06);                       /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, requestType);               /* requestType (2 bytes) */\n\tcontext->rdp->autodetect->rttMeasureStartTime = GetTickCount64();\n\treturn rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n}\n\nstatic BOOL autodetect_send_continuous_rtt_measure_request(rdpContext* context,\n                                                           UINT16 sequenceNumber)\n{\n\treturn autodetect_send_rtt_measure_request(context, sequenceNumber,\n\t                                           RDP_RTT_REQUEST_TYPE_CONTINUOUS);\n}\n\nBOOL autodetect_send_connecttime_rtt_measure_request(rdpContext* context, UINT16 sequenceNumber)\n{\n\treturn autodetect_send_rtt_measure_request(context, sequenceNumber,\n\t                                           RDP_RTT_REQUEST_TYPE_CONNECTTIME);\n}\n\nstatic BOOL autodetect_send_rtt_measure_response(rdpRdp* rdp, UINT16 sequenceNumber)\n{\n\twStream* s;\n\t/* Send the response PDU to the server */\n\ts = rdp_message_channel_pdu_init(rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending RTT Measure Response PDU\");\n\tStream_Write_UINT8(s, 0x06);                        /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_RESPONSE); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);             /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, RDP_RTT_RESPONSE_TYPE);      /* responseType (1 byte) */\n\treturn rdp_send_message_channel_pdu(rdp, s, SEC_AUTODETECT_RSP);\n}\n\nstatic BOOL autodetect_send_bandwidth_measure_start(rdpContext* context, UINT16 sequenceNumber,\n                                                    UINT16 requestType)\n{\n\twStream* s;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending Bandwidth Measure Start PDU\");\n\tStream_Write_UINT8(s, 0x06);                       /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, requestType);               /* requestType (2 bytes) */\n\treturn rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n}\n\nstatic BOOL autodetect_send_continuous_bandwidth_measure_start(rdpContext* context,\n                                                               UINT16 sequenceNumber)\n{\n\treturn autodetect_send_bandwidth_measure_start(context, sequenceNumber,\n\t                                               RDP_BW_START_REQUEST_TYPE_CONTINUOUS);\n}\n\nBOOL autodetect_send_connecttime_bandwidth_measure_start(rdpContext* context, UINT16 sequenceNumber)\n{\n\treturn autodetect_send_bandwidth_measure_start(context, sequenceNumber,\n\t                                               RDP_BW_START_REQUEST_TYPE_CONNECTTIME);\n}\n\nBOOL autodetect_send_bandwidth_measure_payload(rdpContext* context, UINT16 payloadLength,\n                                               UINT16 sequenceNumber)\n{\n\twStream* s;\n\tUCHAR* buffer = NULL;\n\tBOOL bResult = FALSE;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending Bandwidth Measure Payload PDU -> payloadLength=%\" PRIu16 \"\",\n\t         payloadLength);\n\t/* 4-bytes aligned */\n\tpayloadLength &= ~3;\n\n\tif (!Stream_EnsureRemainingCapacity(s, 8 + payloadLength))\n\t{\n\t\tStream_Release(s);\n\t\treturn FALSE;\n\t}\n\n\tStream_Write_UINT8(s, 0x08);                         /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST);   /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);              /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, RDP_BW_PAYLOAD_REQUEST_TYPE); /* requestType (2 bytes) */\n\tStream_Write_UINT16(s, payloadLength);               /* payloadLength (2 bytes) */\n\t/* Random data (better measurement in case the line is compressed) */\n\tbuffer = (UCHAR*)malloc(payloadLength);\n\n\tif (NULL == buffer)\n\t{\n\t\tStream_Release(s);\n\t\treturn FALSE;\n\t}\n\n\twinpr_RAND(buffer, payloadLength);\n\tStream_Write(s, buffer, payloadLength);\n\tbResult = rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n\tfree(buffer);\n\treturn bResult;\n}\n\nstatic BOOL autodetect_send_bandwidth_measure_stop(rdpContext* context, UINT16 payloadLength,\n                                                   UINT16 sequenceNumber, UINT16 requestType)\n{\n\twStream* s;\n\tUCHAR* buffer = NULL;\n\tBOOL bResult = FALSE;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending Bandwidth Measure Stop PDU -> payloadLength=%\" PRIu16 \"\",\n\t         payloadLength);\n\t/* 4-bytes aligned */\n\tpayloadLength &= ~3;\n\tStream_Write_UINT8(s, requestType == RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME\n\t                          ? 0x08\n\t                          : 0x06);                 /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, requestType);               /* requestType (2 bytes) */\n\n\tif (requestType == RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME)\n\t{\n\t\tStream_Write_UINT16(s, payloadLength); /* payloadLength (2 bytes) */\n\n\t\tif (payloadLength > 0)\n\t\t{\n\t\t\tif (!Stream_EnsureRemainingCapacity(s, payloadLength))\n\t\t\t{\n\t\t\t\tStream_Release(s);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t/* Random data (better measurement in case the line is compressed) */\n\t\t\tbuffer = malloc(payloadLength);\n\n\t\t\tif (NULL == buffer)\n\t\t\t{\n\t\t\t\tStream_Release(s);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\twinpr_RAND(buffer, payloadLength);\n\t\t\tStream_Write(s, buffer, payloadLength);\n\t\t}\n\t}\n\n\tbResult = rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n\tfree(buffer);\n\treturn bResult;\n}\n\nstatic BOOL autodetect_send_continuous_bandwidth_measure_stop(rdpContext* context,\n                                                              UINT16 sequenceNumber)\n{\n\treturn autodetect_send_bandwidth_measure_stop(context, 0, sequenceNumber,\n\t                                              RDP_BW_STOP_REQUEST_TYPE_CONTINUOUS);\n}\n\nBOOL autodetect_send_connecttime_bandwidth_measure_stop(rdpContext* context, UINT16 payloadLength,\n                                                        UINT16 sequenceNumber)\n{\n\treturn autodetect_send_bandwidth_measure_stop(context, payloadLength, sequenceNumber,\n\t                                              RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME);\n}\n\nstatic BOOL autodetect_send_bandwidth_measure_results(rdpRdp* rdp, UINT16 responseType,\n                                                      UINT16 sequenceNumber)\n{\n\tBOOL success = TRUE;\n\twStream* s;\n\tUINT64 timeDelta;\n\t/* Compute the total time */\n\ttimeDelta = GetTickCount64() - rdp->autodetect->bandwidthMeasureStartTime;\n\t/* Send the result PDU to the server */\n\ts = rdp_message_channel_pdu_init(rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"sending Bandwidth Measure Results PDU -> timeDelta=%\" PRIu32 \", byteCount=%\" PRIu32\n\t         \"\",\n\t         timeDelta, rdp->autodetect->bandwidthMeasureByteCount);\n\tStream_Write_UINT8(s, 0x0E);                        /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_RESPONSE); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);             /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, responseType);               /* responseType (1 byte) */\n\tStream_Write_UINT32(s, timeDelta);                  /* timeDelta (4 bytes) */\n\tStream_Write_UINT32(s, rdp->autodetect->bandwidthMeasureByteCount); /* byteCount (4 bytes) */\n\tIFCALLRET(rdp->autodetect->ClientBandwidthMeasureResult, success, rdp->context,\n\t          rdp->autodetect);\n\n\tif (!success)\n\t\treturn FALSE;\n\n\treturn rdp_send_message_channel_pdu(rdp, s, SEC_AUTODETECT_RSP);\n}\n\nstatic BOOL autodetect_send_netchar_result(rdpContext* context, UINT16 sequenceNumber)\n{\n\twStream* s;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending Bandwidth Network Characteristics Result PDU\");\n\n\tif (context->rdp->autodetect->netCharBandwidth > 0)\n\t{\n\t\tStream_Write_UINT8(s, 0x12);                       /* headerLength (1 byte) */\n\t\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\t\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\t\tStream_Write_UINT16(s, 0x08C0);                    /* requestType (2 bytes) */\n\t\tStream_Write_UINT32(s, context->rdp->autodetect->netCharBaseRTT); /* baseRTT (4 bytes) */\n\t\tStream_Write_UINT32(s,\n\t\t                    context->rdp->autodetect->netCharBandwidth); /* bandwidth (4 bytes) */\n\t\tStream_Write_UINT32(s,\n\t\t                    context->rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t}\n\telse\n\t{\n\t\tStream_Write_UINT8(s, 0x0E);                       /* headerLength (1 byte) */\n\t\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\t\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\t\tStream_Write_UINT16(s, 0x0840);                    /* requestType (2 bytes) */\n\t\tStream_Write_UINT32(s, context->rdp->autodetect->netCharBaseRTT); /* baseRTT (4 bytes) */\n\t\tStream_Write_UINT32(s,\n\t\t                    context->rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t}\n\n\treturn rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n}\n\nstatic BOOL autodetect_send_netchar_sync(rdpRdp* rdp, UINT16 sequenceNumber)\n{\n\twStream* s;\n\t/* Send the response PDU to the server */\n\ts = rdp_message_channel_pdu_init(rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"sending Network Characteristics Sync PDU -> bandwidth=%\" PRIu32 \", rtt=%\" PRIu32 \"\",\n\t         rdp->autodetect->netCharBandwidth, rdp->autodetect->netCharAverageRTT);\n\tStream_Write_UINT8(s, 0x0E);                                /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_RESPONSE);         /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);                     /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, RDP_NETCHAR_SYNC_RESPONSE_TYPE);     /* responseType (1 byte) */\n\tStream_Write_UINT32(s, rdp->autodetect->netCharBandwidth);  /* bandwidth (4 bytes) */\n\tStream_Write_UINT32(s, rdp->autodetect->netCharAverageRTT); /* rtt (4 bytes) */\n\treturn rdp_send_message_channel_pdu(rdp, s, SEC_AUTODETECT_RSP);\n}\n\nstatic BOOL autodetect_recv_rtt_measure_request(rdpRdp* rdp, wStream* s,\n                                                AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tif (autodetectReqPdu->headerLength != 0x06)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received RTT Measure Request PDU\");\n\t/* Send a response to the server */\n\treturn autodetect_send_rtt_measure_response(rdp, autodetectReqPdu->sequenceNumber);\n}\n\nstatic BOOL autodetect_recv_rtt_measure_response(rdpRdp* rdp, wStream* s,\n                                                 AUTODETECT_RSP_PDU* autodetectRspPdu)\n{\n\tBOOL success = TRUE;\n\n\tif (autodetectRspPdu->headerLength != 0x06)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received RTT Measure Response PDU\");\n\trdp->autodetect->netCharAverageRTT = GetTickCount64() - rdp->autodetect->rttMeasureStartTime;\n\n\tif (rdp->autodetect->netCharBaseRTT == 0 ||\n\t    rdp->autodetect->netCharBaseRTT > rdp->autodetect->netCharAverageRTT)\n\t\trdp->autodetect->netCharBaseRTT = rdp->autodetect->netCharAverageRTT;\n\n\tIFCALLRET(rdp->autodetect->RTTMeasureResponse, success, rdp->context,\n\t          autodetectRspPdu->sequenceNumber);\n\treturn success;\n}\n\nstatic BOOL autodetect_recv_bandwidth_measure_start(rdpRdp* rdp, wStream* s,\n                                                    AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tif (autodetectReqPdu->headerLength != 0x06)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received Bandwidth Measure Start PDU - time=%\" PRIu64 \"\",\n\t         GetTickCount64());\n\t/* Initialize bandwidth measurement parameters */\n\trdp->autodetect->bandwidthMeasureStartTime = GetTickCount64();\n\trdp->autodetect->bandwidthMeasureByteCount = 0;\n\n\t/* Continuous Auto-Detection: mark the start of the measurement */\n\tif (autodetectReqPdu->requestType == RDP_BW_START_REQUEST_TYPE_CONTINUOUS)\n\t{\n\t\trdp->autodetect->bandwidthMeasureStarted = TRUE;\n\t}\n\n\treturn TRUE;\n}\n\nstatic BOOL autodetect_recv_bandwidth_measure_payload(rdpRdp* rdp, wStream* s,\n                                                      AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tUINT16 payloadLength;\n\n\tif (autodetectReqPdu->headerLength != 0x08)\n\t\treturn FALSE;\n\n\tif (Stream_GetRemainingLength(s) < 2)\n\t\treturn FALSE;\n\n\tStream_Read_UINT16(s, payloadLength); /* payloadLength (2 bytes) */\n\tif (!Stream_SafeSeek(s, payloadLength))\n\t\treturn FALSE;\n\tWLog_DBG(AUTODETECT_TAG, \"received Bandwidth Measure Payload PDU -> payloadLength=%\" PRIu16 \"\",\n\t         payloadLength);\n\t/* Add the payload length to the bandwidth measurement parameters */\n\trdp->autodetect->bandwidthMeasureByteCount += payloadLength;\n\treturn TRUE;\n}\n\nstatic BOOL autodetect_recv_bandwidth_measure_stop(rdpRdp* rdp, wStream* s,\n                                                   AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tUINT16 payloadLength;\n\tUINT16 responseType;\n\n\tif (autodetectReqPdu->requestType == RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME)\n\t{\n\t\tif (autodetectReqPdu->headerLength != 0x08)\n\t\t\treturn FALSE;\n\n\t\tif (Stream_GetRemainingLength(s) < 2)\n\t\t\treturn FALSE;\n\n\t\tStream_Read_UINT16(s, payloadLength); /* payloadLength (2 bytes) */\n\t}\n\telse\n\t{\n\t\tif (autodetectReqPdu->headerLength != 0x06)\n\t\t\treturn FALSE;\n\n\t\tpayloadLength = 0;\n\t}\n\n\tif (!Stream_SafeSeek(s, payloadLength))\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received Bandwidth Measure Stop PDU -> payloadLength=%\" PRIu16 \"\",\n\t         payloadLength);\n\t/* Add the payload length to the bandwidth measurement parameters */\n\trdp->autodetect->bandwidthMeasureByteCount += payloadLength;\n\n\t/* Continuous Auto-Detection: mark the stop of the measurement */\n\tif (autodetectReqPdu->requestType == RDP_BW_STOP_REQUEST_TYPE_CONTINUOUS)\n\t{\n\t\trdp->autodetect->bandwidthMeasureStarted = FALSE;\n\t}\n\n\t/* Send a response the server */\n\tresponseType = autodetectReqPdu->requestType == RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME\n\t                   ? RDP_BW_RESULTS_RESPONSE_TYPE_CONNECTTIME\n\t                   : RDP_BW_RESULTS_RESPONSE_TYPE_CONTINUOUS;\n\treturn autodetect_send_bandwidth_measure_results(rdp, responseType,\n\t                                                 autodetectReqPdu->sequenceNumber);\n}\n\nstatic BOOL autodetect_recv_bandwidth_measure_results(rdpRdp* rdp, wStream* s,\n                                                      AUTODETECT_RSP_PDU* autodetectRspPdu)\n{\n\tBOOL success = TRUE;\n\n\tif (autodetectRspPdu->headerLength != 0x0E)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received Bandwidth Measure Results PDU\");\n\tStream_Read_UINT32(s, rdp->autodetect->bandwidthMeasureTimeDelta); /* timeDelta (4 bytes) */\n\tStream_Read_UINT32(s, rdp->autodetect->bandwidthMeasureByteCount); /* byteCount (4 bytes) */\n\n\tif (rdp->autodetect->bandwidthMeasureTimeDelta > 0)\n\t\trdp->autodetect->netCharBandwidth = rdp->autodetect->bandwidthMeasureByteCount * 8 /\n\t\t                                    rdp->autodetect->bandwidthMeasureTimeDelta;\n\telse\n\t\trdp->autodetect->netCharBandwidth = 0;\n\n\tIFCALLRET(rdp->autodetect->BandwidthMeasureResults, success, rdp->context,\n\t          autodetectRspPdu->sequenceNumber);\n\treturn success;\n}\n\nstatic BOOL autodetect_recv_netchar_result(rdpRdp* rdp, wStream* s,\n                                           AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tBOOL success = TRUE;\n\n\tswitch (autodetectReqPdu->requestType)\n\t{\n\t\tcase 0x0840:\n\n\t\t\t/* baseRTT and averageRTT fields are present (bandwidth field is not) */\n\t\t\tif ((autodetectReqPdu->headerLength != 0x0E) || (Stream_GetRemainingLength(s) < 8))\n\t\t\t\treturn FALSE;\n\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharBaseRTT);    /* baseRTT (4 bytes) */\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t\t\tbreak;\n\n\t\tcase 0x0880:\n\n\t\t\t/* bandwidth and averageRTT fields are present (baseRTT field is not) */\n\t\t\tif ((autodetectReqPdu->headerLength != 0x0E) || (Stream_GetRemainingLength(s) < 8))\n\t\t\t\treturn FALSE;\n\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharBandwidth);  /* bandwidth (4 bytes) */\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t\t\tbreak;\n\n\t\tcase 0x08C0:\n\n\t\t\t/* baseRTT, bandwidth, and averageRTT fields are present */\n\t\t\tif ((autodetectReqPdu->headerLength != 0x12) || (Stream_GetRemainingLength(s) < 12))\n\t\t\t\treturn FALSE;\n\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharBaseRTT);    /* baseRTT (4 bytes) */\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharBandwidth);  /* bandwidth (4 bytes) */\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t\t\tbreak;\n\t}\n\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"received Network Characteristics Result PDU -> baseRTT=%\" PRIu32\n\t         \", bandwidth=%\" PRIu32 \", averageRTT=%\" PRIu32 \"\",\n\t         rdp->autodetect->netCharBaseRTT, rdp->autodetect->netCharBandwidth,\n\t         rdp->autodetect->netCharAverageRTT);\n\tIFCALLRET(rdp->autodetect->NetworkCharacteristicsResult, success, rdp->context,\n\t          autodetectReqPdu->sequenceNumber);\n\treturn success;\n}\n\nint rdp_recv_autodetect_request_packet(rdpRdp* rdp, wStream* s)\n{\n\tAUTODETECT_REQ_PDU autodetectReqPdu;\n\tBOOL success = FALSE;\n\n\tif (Stream_GetRemainingLength(s) < 6)\n\t\treturn -1;\n\n\tStream_Read_UINT8(s, autodetectReqPdu.headerLength);    /* headerLength (1 byte) */\n\tStream_Read_UINT8(s, autodetectReqPdu.headerTypeId);    /* headerTypeId (1 byte) */\n\tStream_Read_UINT16(s, autodetectReqPdu.sequenceNumber); /* sequenceNumber (2 bytes) */\n\tStream_Read_UINT16(s, autodetectReqPdu.requestType);    /* requestType (2 bytes) */\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"rdp_recv_autodetect_request_packet: headerLength=%\" PRIu8 \", headerTypeId=%\" PRIu8\n\t         \", sequenceNumber=%\" PRIu16 \", requestType=%04\" PRIx16 \"\",\n\t         autodetectReqPdu.headerLength, autodetectReqPdu.headerTypeId,\n\t         autodetectReqPdu.sequenceNumber, autodetectReqPdu.requestType);\n\n\tif (autodetectReqPdu.headerTypeId != TYPE_ID_AUTODETECT_REQUEST)\n\t\treturn -1;\n\n\tswitch (autodetectReqPdu.requestType)\n\t{\n\t\tcase RDP_RTT_REQUEST_TYPE_CONTINUOUS:\n\t\tcase RDP_RTT_REQUEST_TYPE_CONNECTTIME:\n\t\t\t/* RTT Measure Request (RDP_RTT_REQUEST) - MS-RDPBCGR 2.2.14.1.1 */\n\t\t\tsuccess = autodetect_recv_rtt_measure_request(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tcase RDP_BW_START_REQUEST_TYPE_CONTINUOUS:\n\t\tcase RDP_BW_START_REQUEST_TYPE_TUNNEL:\n\t\tcase RDP_BW_START_REQUEST_TYPE_CONNECTTIME:\n\t\t\t/* Bandwidth Measure Start (RDP_BW_START) - MS-RDPBCGR 2.2.14.1.2 */\n\t\t\tsuccess = autodetect_recv_bandwidth_measure_start(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tcase RDP_BW_PAYLOAD_REQUEST_TYPE:\n\t\t\t/* Bandwidth Measure Payload (RDP_BW_PAYLOAD) - MS-RDPBCGR 2.2.14.1.3 */\n\t\t\tsuccess = autodetect_recv_bandwidth_measure_payload(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tcase RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME:\n\t\tcase RDP_BW_STOP_REQUEST_TYPE_CONTINUOUS:\n\t\tcase RDP_BW_STOP_REQUEST_TYPE_TUNNEL:\n\t\t\t/* Bandwidth Measure Stop (RDP_BW_STOP) - MS-RDPBCGR 2.2.14.1.4 */\n\t\t\tsuccess = autodetect_recv_bandwidth_measure_stop(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tcase 0x0840:\n\t\tcase 0x0880:\n\t\tcase 0x08C0:\n\t\t\t/* Network Characteristics Result (RDP_NETCHAR_RESULT) - MS-RDPBCGR 2.2.14.1.5 */\n\t\t\tsuccess = autodetect_recv_netchar_result(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\treturn success ? 0 : -1;\n}\n\nint rdp_recv_autodetect_response_packet(rdpRdp* rdp, wStream* s)\n{\n\tAUTODETECT_RSP_PDU autodetectRspPdu;\n\tBOOL success = FALSE;\n\n\tif (Stream_GetRemainingLength(s) < 6)\n\t\treturn -1;\n\n\tStream_Read_UINT8(s, autodetectRspPdu.headerLength);    /* headerLength (1 byte) */\n\tStream_Read_UINT8(s, autodetectRspPdu.headerTypeId);    /* headerTypeId (1 byte) */\n\tStream_Read_UINT16(s, autodetectRspPdu.sequenceNumber); /* sequenceNumber (2 bytes) */\n\tStream_Read_UINT16(s, autodetectRspPdu.responseType);   /* responseType (2 bytes) */\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"rdp_recv_autodetect_response_packet: headerLength=%\" PRIu8 \", headerTypeId=%\" PRIu8\n\t         \", sequenceNumber=%\" PRIu16 \", requestType=%04\" PRIx16 \"\",\n\t         autodetectRspPdu.headerLength, autodetectRspPdu.headerTypeId,\n\t         autodetectRspPdu.sequenceNumber, autodetectRspPdu.responseType);\n\n\tif (autodetectRspPdu.headerTypeId != TYPE_ID_AUTODETECT_RESPONSE)\n\t\treturn -1;\n\n\tswitch (autodetectRspPdu.responseType)\n\t{\n\t\tcase RDP_RTT_RESPONSE_TYPE:\n\t\t\t/* RTT Measure Response (RDP_RTT_RESPONSE) - MS-RDPBCGR 2.2.14.2.1 */\n\t\t\tsuccess = autodetect_recv_rtt_measure_response(rdp, s, &autodetectRspPdu);\n\t\t\tbreak;\n\n\t\tcase RDP_BW_RESULTS_RESPONSE_TYPE_CONNECTTIME:\n\t\tcase RDP_BW_RESULTS_RESPONSE_TYPE_CONTINUOUS:\n\t\t\t/* Bandwidth Measure Results (RDP_BW_RESULTS) - MS-RDPBCGR 2.2.14.2.2 */\n\t\t\tsuccess = autodetect_recv_bandwidth_measure_results(rdp, s, &autodetectRspPdu);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn success ? 0 : -1;\n}\n\nrdpAutoDetect* autodetect_new(void)\n{\n\trdpAutoDetect* autoDetect = (rdpAutoDetect*)calloc(1, sizeof(rdpAutoDetect));\n\n\tif (autoDetect)\n\t{\n\t}\n\n\treturn autoDetect;\n}\n\nvoid autodetect_free(rdpAutoDetect* autoDetect)\n{\n\tfree(autoDetect);\n}\n\nvoid autodetect_register_server_callbacks(rdpAutoDetect* autodetect)\n{\n\tautodetect->RTTMeasureRequest = autodetect_send_continuous_rtt_measure_request;\n\tautodetect->BandwidthMeasureStart = autodetect_send_continuous_bandwidth_measure_start;\n\tautodetect->BandwidthMeasureStop = autodetect_send_continuous_bandwidth_measure_stop;\n\tautodetect->NetworkCharacteristicsResult = autodetect_send_netchar_result;\n}\n"], "fixing_code": ["/**\n * FreeRDP: A Remote Desktop Protocol Implementation\n * Auto-Detect PDUs\n *\n * Copyright 2014 Dell Software <Mike.McDonald@software.dell.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include <winpr/crypto.h>\n\n#include \"autodetect.h\"\n\n#define RDP_RTT_REQUEST_TYPE_CONTINUOUS 0x0001\n#define RDP_RTT_REQUEST_TYPE_CONNECTTIME 0x1001\n\n#define RDP_RTT_RESPONSE_TYPE 0x0000\n\n#define RDP_BW_START_REQUEST_TYPE_CONTINUOUS 0x0014\n#define RDP_BW_START_REQUEST_TYPE_TUNNEL 0x0114\n#define RDP_BW_START_REQUEST_TYPE_CONNECTTIME 0x1014\n#define RDP_BW_PAYLOAD_REQUEST_TYPE 0x0002\n#define RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME 0x002B\n#define RDP_BW_STOP_REQUEST_TYPE_CONTINUOUS 0x0429\n#define RDP_BW_STOP_REQUEST_TYPE_TUNNEL 0x0629\n\n#define RDP_BW_RESULTS_RESPONSE_TYPE_CONNECTTIME 0x0003\n#define RDP_BW_RESULTS_RESPONSE_TYPE_CONTINUOUS 0x000B\n\n#define RDP_NETCHAR_SYNC_RESPONSE_TYPE 0x0018\n\ntypedef struct\n{\n\tUINT8 headerLength;\n\tUINT8 headerTypeId;\n\tUINT16 sequenceNumber;\n\tUINT16 requestType;\n} AUTODETECT_REQ_PDU;\n\ntypedef struct\n{\n\tUINT8 headerLength;\n\tUINT8 headerTypeId;\n\tUINT16 sequenceNumber;\n\tUINT16 responseType;\n} AUTODETECT_RSP_PDU;\n\nstatic BOOL autodetect_send_rtt_measure_request(rdpContext* context, UINT16 sequenceNumber,\n                                                UINT16 requestType)\n{\n\twStream* s;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending RTT Measure Request PDU\");\n\tStream_Write_UINT8(s, 0x06);                       /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, requestType);               /* requestType (2 bytes) */\n\tcontext->rdp->autodetect->rttMeasureStartTime = GetTickCount64();\n\treturn rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n}\n\nstatic BOOL autodetect_send_continuous_rtt_measure_request(rdpContext* context,\n                                                           UINT16 sequenceNumber)\n{\n\treturn autodetect_send_rtt_measure_request(context, sequenceNumber,\n\t                                           RDP_RTT_REQUEST_TYPE_CONTINUOUS);\n}\n\nBOOL autodetect_send_connecttime_rtt_measure_request(rdpContext* context, UINT16 sequenceNumber)\n{\n\treturn autodetect_send_rtt_measure_request(context, sequenceNumber,\n\t                                           RDP_RTT_REQUEST_TYPE_CONNECTTIME);\n}\n\nstatic BOOL autodetect_send_rtt_measure_response(rdpRdp* rdp, UINT16 sequenceNumber)\n{\n\twStream* s;\n\t/* Send the response PDU to the server */\n\ts = rdp_message_channel_pdu_init(rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending RTT Measure Response PDU\");\n\tStream_Write_UINT8(s, 0x06);                        /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_RESPONSE); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);             /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, RDP_RTT_RESPONSE_TYPE);      /* responseType (1 byte) */\n\treturn rdp_send_message_channel_pdu(rdp, s, SEC_AUTODETECT_RSP);\n}\n\nstatic BOOL autodetect_send_bandwidth_measure_start(rdpContext* context, UINT16 sequenceNumber,\n                                                    UINT16 requestType)\n{\n\twStream* s;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending Bandwidth Measure Start PDU\");\n\tStream_Write_UINT8(s, 0x06);                       /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, requestType);               /* requestType (2 bytes) */\n\treturn rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n}\n\nstatic BOOL autodetect_send_continuous_bandwidth_measure_start(rdpContext* context,\n                                                               UINT16 sequenceNumber)\n{\n\treturn autodetect_send_bandwidth_measure_start(context, sequenceNumber,\n\t                                               RDP_BW_START_REQUEST_TYPE_CONTINUOUS);\n}\n\nBOOL autodetect_send_connecttime_bandwidth_measure_start(rdpContext* context, UINT16 sequenceNumber)\n{\n\treturn autodetect_send_bandwidth_measure_start(context, sequenceNumber,\n\t                                               RDP_BW_START_REQUEST_TYPE_CONNECTTIME);\n}\n\nBOOL autodetect_send_bandwidth_measure_payload(rdpContext* context, UINT16 payloadLength,\n                                               UINT16 sequenceNumber)\n{\n\twStream* s;\n\tUCHAR* buffer = NULL;\n\tBOOL bResult = FALSE;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending Bandwidth Measure Payload PDU -> payloadLength=%\" PRIu16 \"\",\n\t         payloadLength);\n\t/* 4-bytes aligned */\n\tpayloadLength &= ~3;\n\n\tif (!Stream_EnsureRemainingCapacity(s, 8 + payloadLength))\n\t{\n\t\tStream_Release(s);\n\t\treturn FALSE;\n\t}\n\n\tStream_Write_UINT8(s, 0x08);                         /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST);   /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);              /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, RDP_BW_PAYLOAD_REQUEST_TYPE); /* requestType (2 bytes) */\n\tStream_Write_UINT16(s, payloadLength);               /* payloadLength (2 bytes) */\n\t/* Random data (better measurement in case the line is compressed) */\n\tbuffer = (UCHAR*)malloc(payloadLength);\n\n\tif (NULL == buffer)\n\t{\n\t\tStream_Release(s);\n\t\treturn FALSE;\n\t}\n\n\twinpr_RAND(buffer, payloadLength);\n\tStream_Write(s, buffer, payloadLength);\n\tbResult = rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n\tfree(buffer);\n\treturn bResult;\n}\n\nstatic BOOL autodetect_send_bandwidth_measure_stop(rdpContext* context, UINT16 payloadLength,\n                                                   UINT16 sequenceNumber, UINT16 requestType)\n{\n\twStream* s;\n\tUCHAR* buffer = NULL;\n\tBOOL bResult = FALSE;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending Bandwidth Measure Stop PDU -> payloadLength=%\" PRIu16 \"\",\n\t         payloadLength);\n\t/* 4-bytes aligned */\n\tpayloadLength &= ~3;\n\tStream_Write_UINT8(s, requestType == RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME\n\t                          ? 0x08\n\t                          : 0x06);                 /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, requestType);               /* requestType (2 bytes) */\n\n\tif (requestType == RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME)\n\t{\n\t\tStream_Write_UINT16(s, payloadLength); /* payloadLength (2 bytes) */\n\n\t\tif (payloadLength > 0)\n\t\t{\n\t\t\tif (!Stream_EnsureRemainingCapacity(s, payloadLength))\n\t\t\t{\n\t\t\t\tStream_Release(s);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t/* Random data (better measurement in case the line is compressed) */\n\t\t\tbuffer = malloc(payloadLength);\n\n\t\t\tif (NULL == buffer)\n\t\t\t{\n\t\t\t\tStream_Release(s);\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\twinpr_RAND(buffer, payloadLength);\n\t\t\tStream_Write(s, buffer, payloadLength);\n\t\t}\n\t}\n\n\tbResult = rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n\tfree(buffer);\n\treturn bResult;\n}\n\nstatic BOOL autodetect_send_continuous_bandwidth_measure_stop(rdpContext* context,\n                                                              UINT16 sequenceNumber)\n{\n\treturn autodetect_send_bandwidth_measure_stop(context, 0, sequenceNumber,\n\t                                              RDP_BW_STOP_REQUEST_TYPE_CONTINUOUS);\n}\n\nBOOL autodetect_send_connecttime_bandwidth_measure_stop(rdpContext* context, UINT16 payloadLength,\n                                                        UINT16 sequenceNumber)\n{\n\treturn autodetect_send_bandwidth_measure_stop(context, payloadLength, sequenceNumber,\n\t                                              RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME);\n}\n\nstatic BOOL autodetect_send_bandwidth_measure_results(rdpRdp* rdp, UINT16 responseType,\n                                                      UINT16 sequenceNumber)\n{\n\tBOOL success = TRUE;\n\twStream* s;\n\tUINT64 timeDelta;\n\t/* Compute the total time */\n\ttimeDelta = GetTickCount64() - rdp->autodetect->bandwidthMeasureStartTime;\n\t/* Send the result PDU to the server */\n\ts = rdp_message_channel_pdu_init(rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"sending Bandwidth Measure Results PDU -> timeDelta=%\" PRIu32 \", byteCount=%\" PRIu32\n\t         \"\",\n\t         timeDelta, rdp->autodetect->bandwidthMeasureByteCount);\n\tStream_Write_UINT8(s, 0x0E);                        /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_RESPONSE); /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);             /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, responseType);               /* responseType (1 byte) */\n\tStream_Write_UINT32(s, timeDelta);                  /* timeDelta (4 bytes) */\n\tStream_Write_UINT32(s, rdp->autodetect->bandwidthMeasureByteCount); /* byteCount (4 bytes) */\n\tIFCALLRET(rdp->autodetect->ClientBandwidthMeasureResult, success, rdp->context,\n\t          rdp->autodetect);\n\n\tif (!success)\n\t\treturn FALSE;\n\n\treturn rdp_send_message_channel_pdu(rdp, s, SEC_AUTODETECT_RSP);\n}\n\nstatic BOOL autodetect_send_netchar_result(rdpContext* context, UINT16 sequenceNumber)\n{\n\twStream* s;\n\ts = rdp_message_channel_pdu_init(context->rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"sending Bandwidth Network Characteristics Result PDU\");\n\n\tif (context->rdp->autodetect->netCharBandwidth > 0)\n\t{\n\t\tStream_Write_UINT8(s, 0x12);                       /* headerLength (1 byte) */\n\t\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\t\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\t\tStream_Write_UINT16(s, 0x08C0);                    /* requestType (2 bytes) */\n\t\tStream_Write_UINT32(s, context->rdp->autodetect->netCharBaseRTT); /* baseRTT (4 bytes) */\n\t\tStream_Write_UINT32(s,\n\t\t                    context->rdp->autodetect->netCharBandwidth); /* bandwidth (4 bytes) */\n\t\tStream_Write_UINT32(s,\n\t\t                    context->rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t}\n\telse\n\t{\n\t\tStream_Write_UINT8(s, 0x0E);                       /* headerLength (1 byte) */\n\t\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_REQUEST); /* headerTypeId (1 byte) */\n\t\tStream_Write_UINT16(s, sequenceNumber);            /* sequenceNumber (2 bytes) */\n\t\tStream_Write_UINT16(s, 0x0840);                    /* requestType (2 bytes) */\n\t\tStream_Write_UINT32(s, context->rdp->autodetect->netCharBaseRTT); /* baseRTT (4 bytes) */\n\t\tStream_Write_UINT32(s,\n\t\t                    context->rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t}\n\n\treturn rdp_send_message_channel_pdu(context->rdp, s, SEC_AUTODETECT_REQ);\n}\n\nstatic BOOL autodetect_send_netchar_sync(rdpRdp* rdp, UINT16 sequenceNumber)\n{\n\twStream* s;\n\t/* Send the response PDU to the server */\n\ts = rdp_message_channel_pdu_init(rdp);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"sending Network Characteristics Sync PDU -> bandwidth=%\" PRIu32 \", rtt=%\" PRIu32 \"\",\n\t         rdp->autodetect->netCharBandwidth, rdp->autodetect->netCharAverageRTT);\n\tStream_Write_UINT8(s, 0x0E);                                /* headerLength (1 byte) */\n\tStream_Write_UINT8(s, TYPE_ID_AUTODETECT_RESPONSE);         /* headerTypeId (1 byte) */\n\tStream_Write_UINT16(s, sequenceNumber);                     /* sequenceNumber (2 bytes) */\n\tStream_Write_UINT16(s, RDP_NETCHAR_SYNC_RESPONSE_TYPE);     /* responseType (1 byte) */\n\tStream_Write_UINT32(s, rdp->autodetect->netCharBandwidth);  /* bandwidth (4 bytes) */\n\tStream_Write_UINT32(s, rdp->autodetect->netCharAverageRTT); /* rtt (4 bytes) */\n\treturn rdp_send_message_channel_pdu(rdp, s, SEC_AUTODETECT_RSP);\n}\n\nstatic BOOL autodetect_recv_rtt_measure_request(rdpRdp* rdp, wStream* s,\n                                                AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tif (autodetectReqPdu->headerLength != 0x06)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received RTT Measure Request PDU\");\n\t/* Send a response to the server */\n\treturn autodetect_send_rtt_measure_response(rdp, autodetectReqPdu->sequenceNumber);\n}\n\nstatic BOOL autodetect_recv_rtt_measure_response(rdpRdp* rdp, wStream* s,\n                                                 AUTODETECT_RSP_PDU* autodetectRspPdu)\n{\n\tBOOL success = TRUE;\n\n\tif (autodetectRspPdu->headerLength != 0x06)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received RTT Measure Response PDU\");\n\trdp->autodetect->netCharAverageRTT = GetTickCount64() - rdp->autodetect->rttMeasureStartTime;\n\n\tif (rdp->autodetect->netCharBaseRTT == 0 ||\n\t    rdp->autodetect->netCharBaseRTT > rdp->autodetect->netCharAverageRTT)\n\t\trdp->autodetect->netCharBaseRTT = rdp->autodetect->netCharAverageRTT;\n\n\tIFCALLRET(rdp->autodetect->RTTMeasureResponse, success, rdp->context,\n\t          autodetectRspPdu->sequenceNumber);\n\treturn success;\n}\n\nstatic BOOL autodetect_recv_bandwidth_measure_start(rdpRdp* rdp, wStream* s,\n                                                    AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tif (autodetectReqPdu->headerLength != 0x06)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received Bandwidth Measure Start PDU - time=%\" PRIu64 \"\",\n\t         GetTickCount64());\n\t/* Initialize bandwidth measurement parameters */\n\trdp->autodetect->bandwidthMeasureStartTime = GetTickCount64();\n\trdp->autodetect->bandwidthMeasureByteCount = 0;\n\n\t/* Continuous Auto-Detection: mark the start of the measurement */\n\tif (autodetectReqPdu->requestType == RDP_BW_START_REQUEST_TYPE_CONTINUOUS)\n\t{\n\t\trdp->autodetect->bandwidthMeasureStarted = TRUE;\n\t}\n\n\treturn TRUE;\n}\n\nstatic BOOL autodetect_recv_bandwidth_measure_payload(rdpRdp* rdp, wStream* s,\n                                                      AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tUINT16 payloadLength;\n\n\tif (autodetectReqPdu->headerLength != 0x08)\n\t\treturn FALSE;\n\n\tif (Stream_GetRemainingLength(s) < 2)\n\t\treturn FALSE;\n\n\tStream_Read_UINT16(s, payloadLength); /* payloadLength (2 bytes) */\n\tif (!Stream_SafeSeek(s, payloadLength))\n\t\treturn FALSE;\n\tWLog_DBG(AUTODETECT_TAG, \"received Bandwidth Measure Payload PDU -> payloadLength=%\" PRIu16 \"\",\n\t         payloadLength);\n\t/* Add the payload length to the bandwidth measurement parameters */\n\trdp->autodetect->bandwidthMeasureByteCount += payloadLength;\n\treturn TRUE;\n}\n\nstatic BOOL autodetect_recv_bandwidth_measure_stop(rdpRdp* rdp, wStream* s,\n                                                   AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tUINT16 payloadLength;\n\tUINT16 responseType;\n\n\tif (autodetectReqPdu->requestType == RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME)\n\t{\n\t\tif (autodetectReqPdu->headerLength != 0x08)\n\t\t\treturn FALSE;\n\n\t\tif (Stream_GetRemainingLength(s) < 2)\n\t\t\treturn FALSE;\n\n\t\tStream_Read_UINT16(s, payloadLength); /* payloadLength (2 bytes) */\n\t}\n\telse\n\t{\n\t\tif (autodetectReqPdu->headerLength != 0x06)\n\t\t\treturn FALSE;\n\n\t\tpayloadLength = 0;\n\t}\n\n\tif (!Stream_SafeSeek(s, payloadLength))\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received Bandwidth Measure Stop PDU -> payloadLength=%\" PRIu16 \"\",\n\t         payloadLength);\n\t/* Add the payload length to the bandwidth measurement parameters */\n\trdp->autodetect->bandwidthMeasureByteCount += payloadLength;\n\n\t/* Continuous Auto-Detection: mark the stop of the measurement */\n\tif (autodetectReqPdu->requestType == RDP_BW_STOP_REQUEST_TYPE_CONTINUOUS)\n\t{\n\t\trdp->autodetect->bandwidthMeasureStarted = FALSE;\n\t}\n\n\t/* Send a response the server */\n\tresponseType = autodetectReqPdu->requestType == RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME\n\t                   ? RDP_BW_RESULTS_RESPONSE_TYPE_CONNECTTIME\n\t                   : RDP_BW_RESULTS_RESPONSE_TYPE_CONTINUOUS;\n\treturn autodetect_send_bandwidth_measure_results(rdp, responseType,\n\t                                                 autodetectReqPdu->sequenceNumber);\n}\n\nstatic BOOL autodetect_recv_bandwidth_measure_results(rdpRdp* rdp, wStream* s,\n                                                      AUTODETECT_RSP_PDU* autodetectRspPdu)\n{\n\tBOOL success = TRUE;\n\n\tif (autodetectRspPdu->headerLength != 0x0E)\n\t\treturn FALSE;\n\n\tWLog_VRB(AUTODETECT_TAG, \"received Bandwidth Measure Results PDU\");\n\tif (Stream_GetRemainingLength(s) < 8)\n\t\treturn -1;\n\tStream_Read_UINT32(s, rdp->autodetect->bandwidthMeasureTimeDelta); /* timeDelta (4 bytes) */\n\tStream_Read_UINT32(s, rdp->autodetect->bandwidthMeasureByteCount); /* byteCount (4 bytes) */\n\n\tif (rdp->autodetect->bandwidthMeasureTimeDelta > 0)\n\t\trdp->autodetect->netCharBandwidth = rdp->autodetect->bandwidthMeasureByteCount * 8 /\n\t\t                                    rdp->autodetect->bandwidthMeasureTimeDelta;\n\telse\n\t\trdp->autodetect->netCharBandwidth = 0;\n\n\tIFCALLRET(rdp->autodetect->BandwidthMeasureResults, success, rdp->context,\n\t          autodetectRspPdu->sequenceNumber);\n\treturn success;\n}\n\nstatic BOOL autodetect_recv_netchar_result(rdpRdp* rdp, wStream* s,\n                                           AUTODETECT_REQ_PDU* autodetectReqPdu)\n{\n\tBOOL success = TRUE;\n\n\tswitch (autodetectReqPdu->requestType)\n\t{\n\t\tcase 0x0840:\n\n\t\t\t/* baseRTT and averageRTT fields are present (bandwidth field is not) */\n\t\t\tif ((autodetectReqPdu->headerLength != 0x0E) || (Stream_GetRemainingLength(s) < 8))\n\t\t\t\treturn FALSE;\n\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharBaseRTT);    /* baseRTT (4 bytes) */\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t\t\tbreak;\n\n\t\tcase 0x0880:\n\n\t\t\t/* bandwidth and averageRTT fields are present (baseRTT field is not) */\n\t\t\tif ((autodetectReqPdu->headerLength != 0x0E) || (Stream_GetRemainingLength(s) < 8))\n\t\t\t\treturn FALSE;\n\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharBandwidth);  /* bandwidth (4 bytes) */\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t\t\tbreak;\n\n\t\tcase 0x08C0:\n\n\t\t\t/* baseRTT, bandwidth, and averageRTT fields are present */\n\t\t\tif ((autodetectReqPdu->headerLength != 0x12) || (Stream_GetRemainingLength(s) < 12))\n\t\t\t\treturn FALSE;\n\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharBaseRTT);    /* baseRTT (4 bytes) */\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharBandwidth);  /* bandwidth (4 bytes) */\n\t\t\tStream_Read_UINT32(s, rdp->autodetect->netCharAverageRTT); /* averageRTT (4 bytes) */\n\t\t\tbreak;\n\t}\n\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"received Network Characteristics Result PDU -> baseRTT=%\" PRIu32\n\t         \", bandwidth=%\" PRIu32 \", averageRTT=%\" PRIu32 \"\",\n\t         rdp->autodetect->netCharBaseRTT, rdp->autodetect->netCharBandwidth,\n\t         rdp->autodetect->netCharAverageRTT);\n\tIFCALLRET(rdp->autodetect->NetworkCharacteristicsResult, success, rdp->context,\n\t          autodetectReqPdu->sequenceNumber);\n\treturn success;\n}\n\nint rdp_recv_autodetect_request_packet(rdpRdp* rdp, wStream* s)\n{\n\tAUTODETECT_REQ_PDU autodetectReqPdu;\n\tBOOL success = FALSE;\n\n\tif (Stream_GetRemainingLength(s) < 6)\n\t\treturn -1;\n\n\tStream_Read_UINT8(s, autodetectReqPdu.headerLength);    /* headerLength (1 byte) */\n\tStream_Read_UINT8(s, autodetectReqPdu.headerTypeId);    /* headerTypeId (1 byte) */\n\tStream_Read_UINT16(s, autodetectReqPdu.sequenceNumber); /* sequenceNumber (2 bytes) */\n\tStream_Read_UINT16(s, autodetectReqPdu.requestType);    /* requestType (2 bytes) */\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"rdp_recv_autodetect_request_packet: headerLength=%\" PRIu8 \", headerTypeId=%\" PRIu8\n\t         \", sequenceNumber=%\" PRIu16 \", requestType=%04\" PRIx16 \"\",\n\t         autodetectReqPdu.headerLength, autodetectReqPdu.headerTypeId,\n\t         autodetectReqPdu.sequenceNumber, autodetectReqPdu.requestType);\n\n\tif (autodetectReqPdu.headerTypeId != TYPE_ID_AUTODETECT_REQUEST)\n\t\treturn -1;\n\n\tswitch (autodetectReqPdu.requestType)\n\t{\n\t\tcase RDP_RTT_REQUEST_TYPE_CONTINUOUS:\n\t\tcase RDP_RTT_REQUEST_TYPE_CONNECTTIME:\n\t\t\t/* RTT Measure Request (RDP_RTT_REQUEST) - MS-RDPBCGR 2.2.14.1.1 */\n\t\t\tsuccess = autodetect_recv_rtt_measure_request(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tcase RDP_BW_START_REQUEST_TYPE_CONTINUOUS:\n\t\tcase RDP_BW_START_REQUEST_TYPE_TUNNEL:\n\t\tcase RDP_BW_START_REQUEST_TYPE_CONNECTTIME:\n\t\t\t/* Bandwidth Measure Start (RDP_BW_START) - MS-RDPBCGR 2.2.14.1.2 */\n\t\t\tsuccess = autodetect_recv_bandwidth_measure_start(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tcase RDP_BW_PAYLOAD_REQUEST_TYPE:\n\t\t\t/* Bandwidth Measure Payload (RDP_BW_PAYLOAD) - MS-RDPBCGR 2.2.14.1.3 */\n\t\t\tsuccess = autodetect_recv_bandwidth_measure_payload(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tcase RDP_BW_STOP_REQUEST_TYPE_CONNECTTIME:\n\t\tcase RDP_BW_STOP_REQUEST_TYPE_CONTINUOUS:\n\t\tcase RDP_BW_STOP_REQUEST_TYPE_TUNNEL:\n\t\t\t/* Bandwidth Measure Stop (RDP_BW_STOP) - MS-RDPBCGR 2.2.14.1.4 */\n\t\t\tsuccess = autodetect_recv_bandwidth_measure_stop(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tcase 0x0840:\n\t\tcase 0x0880:\n\t\tcase 0x08C0:\n\t\t\t/* Network Characteristics Result (RDP_NETCHAR_RESULT) - MS-RDPBCGR 2.2.14.1.5 */\n\t\t\tsuccess = autodetect_recv_netchar_result(rdp, s, &autodetectReqPdu);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\treturn success ? 0 : -1;\n}\n\nint rdp_recv_autodetect_response_packet(rdpRdp* rdp, wStream* s)\n{\n\tAUTODETECT_RSP_PDU autodetectRspPdu;\n\tBOOL success = FALSE;\n\n\tif (Stream_GetRemainingLength(s) < 6)\n\t\treturn -1;\n\n\tStream_Read_UINT8(s, autodetectRspPdu.headerLength);    /* headerLength (1 byte) */\n\tStream_Read_UINT8(s, autodetectRspPdu.headerTypeId);    /* headerTypeId (1 byte) */\n\tStream_Read_UINT16(s, autodetectRspPdu.sequenceNumber); /* sequenceNumber (2 bytes) */\n\tStream_Read_UINT16(s, autodetectRspPdu.responseType);   /* responseType (2 bytes) */\n\tWLog_VRB(AUTODETECT_TAG,\n\t         \"rdp_recv_autodetect_response_packet: headerLength=%\" PRIu8 \", headerTypeId=%\" PRIu8\n\t         \", sequenceNumber=%\" PRIu16 \", requestType=%04\" PRIx16 \"\",\n\t         autodetectRspPdu.headerLength, autodetectRspPdu.headerTypeId,\n\t         autodetectRspPdu.sequenceNumber, autodetectRspPdu.responseType);\n\n\tif (autodetectRspPdu.headerTypeId != TYPE_ID_AUTODETECT_RESPONSE)\n\t\treturn -1;\n\n\tswitch (autodetectRspPdu.responseType)\n\t{\n\t\tcase RDP_RTT_RESPONSE_TYPE:\n\t\t\t/* RTT Measure Response (RDP_RTT_RESPONSE) - MS-RDPBCGR 2.2.14.2.1 */\n\t\t\tsuccess = autodetect_recv_rtt_measure_response(rdp, s, &autodetectRspPdu);\n\t\t\tbreak;\n\n\t\tcase RDP_BW_RESULTS_RESPONSE_TYPE_CONNECTTIME:\n\t\tcase RDP_BW_RESULTS_RESPONSE_TYPE_CONTINUOUS:\n\t\t\t/* Bandwidth Measure Results (RDP_BW_RESULTS) - MS-RDPBCGR 2.2.14.2.2 */\n\t\t\tsuccess = autodetect_recv_bandwidth_measure_results(rdp, s, &autodetectRspPdu);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn success ? 0 : -1;\n}\n\nrdpAutoDetect* autodetect_new(void)\n{\n\trdpAutoDetect* autoDetect = (rdpAutoDetect*)calloc(1, sizeof(rdpAutoDetect));\n\n\tif (autoDetect)\n\t{\n\t}\n\n\treturn autoDetect;\n}\n\nvoid autodetect_free(rdpAutoDetect* autoDetect)\n{\n\tfree(autoDetect);\n}\n\nvoid autodetect_register_server_callbacks(rdpAutoDetect* autodetect)\n{\n\tautodetect->RTTMeasureRequest = autodetect_send_continuous_rtt_measure_request;\n\tautodetect->BandwidthMeasureStart = autodetect_send_continuous_bandwidth_measure_start;\n\tautodetect->BandwidthMeasureStop = autodetect_send_continuous_bandwidth_measure_stop;\n\tautodetect->NetworkCharacteristicsResult = autodetect_send_netchar_result;\n}\n"], "filenames": ["libfreerdp/core/autodetect.c"], "buggy_code_start_loc": [467], "buggy_code_end_loc": [467], "fixing_code_start_loc": [468], "fixing_code_end_loc": [470], "type": "CWE-125", "message": "In FreeRDP after 1.1 and before 2.0.0, there is an out-of-bounds read in autodetect_recv_bandwidth_measure_results. A malicious server can extract up to 8 bytes of client memory with a manipulated message by providing a short input and reading the measurement result data. This has been patched in 2.0.0.", "other": {"cve": {"id": "CVE-2020-11047", "sourceIdentifier": "security-advisories@github.com", "published": "2020-05-07T20:15:12.127", "lastModified": "2020-06-09T14:26:54.087", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In FreeRDP after 1.1 and before 2.0.0, there is an out-of-bounds read in autodetect_recv_bandwidth_measure_results. A malicious server can extract up to 8 bytes of client memory with a manipulated message by providing a short input and reading the measurement result data. This has been patched in 2.0.0."}, {"lang": "es", "value": "En FreeRDP versiones posteriores a 1.1 y versiones anteriores a 2.0.0, se presenta una lectura fuera de l\u00edmites en autodetect_recv_bandwidth_measure_results. Un servidor malicioso puede extraer hasta 8 bytes de la memoria del cliente con un mensaje manipulado al proporcionar una entrada corta y leer los datos del resultado de la medici\u00f3n. Esto ha sido parcheado en la versi\u00f3n 2.0.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.7, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 3.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:freerdp:freerdp:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.1.0", "versionEndExcluding": "2.0.0", "matchCriteriaId": "F953BF38-4A6C-41EE-B646-37702989F524"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:18.04:*:*:*:lts:*:*:*", "matchCriteriaId": "23A7C53F-B80F-4E6A-AFA9-58EEA84BE11D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:19.10:*:*:*:*:*:*:*", "matchCriteriaId": "A31C8344-3E02-4EB8-8BD8-4C84B7959624"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:20.04:*:*:*:lts:*:*:*", "matchCriteriaId": "902B8056-9E37-443B-8905-8AA93E2447FB"}]}]}], "references": [{"url": "https://github.com/FreeRDP/FreeRDP/commit/f5e73cc7c9cd973b516a618da877c87b80950b65", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/FreeRDP/FreeRDP/issues/6009", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/FreeRDP/FreeRDP/security/advisories/GHSA-9fw6-m2q8-h5pw", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4379-1/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/FreeRDP/FreeRDP/commit/f5e73cc7c9cd973b516a618da877c87b80950b65"}}