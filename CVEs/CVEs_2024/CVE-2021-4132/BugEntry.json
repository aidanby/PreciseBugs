{"buggy_code": ["<h1 ng-non-bindable><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Edit user');?> - <?php echo htmlspecialchars($user->name_support)?></h1>\n\n<?php if (isset($errors)) : ?>\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/validation_error.tpl.php'));?>\n<?php endif; ?>\n\n<?php if (isset($updated)) : $msg = erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account updated'); ?>\n\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/alert_success.tpl.php'));?>\n<?php endif; ?>\n\n<ul class=\"nav nav-pills\" role=\"tablist\">\n\t<li class=\"nav-item\" role=\"presentation\"><a class=\"nav-link <?php if ($tab == '') : ?>active<?php endif;?>\" href=\"#account\" aria-controls=\"account\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account data');?></a></li>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false) && (\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n        )) : ?>\n\t<li class=\"nav-item\" role=\"presentation\"><a class=\"nav-link <?php if ($tab == 'tab_departments') : ?>active<?php endif;?>\" href=\"#departments\" aria-controls=\"departments\" role=\"tab\" data-toggle=\"tab\" ><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Assigned departments');?></a></li>\n    <?php endif;?>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n    <li class=\"nav-item\" role=\"presentation\"><a class=\"nav-link <?php if ($tab == 'tab_pending') : ?>active<?php endif;?>\" href=\"#pending\" aria-controls=\"pending\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Pending chats');?></a></li>\n    <?php endif;?>\n\n\t<?php if (erLhcoreClassUser::instance()->hasAccessTo('lhpermission','see_permissions_users')) : ?>\n\t<li class=\"nav-item\" role=\"presentation\"><a class=\"nav-link <?php if ($tab == 'tab_permission') : ?>active<?php endif;?>\" href=\"#permission\" aria-controls=\"permission\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Permissions');?></a></li>\n\t<?php endif;?>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n    <li class=\"nav-item\" role=\"presentation\" ><a class=\"nav-link <?php if ($tab == 'tab_speech') : ?>active<?php endif;?>\" href=\"#speech\" aria-controls=\"speech\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Speech');?></a></li>\n    <?php endif; ?>\n\n    <?php include(erLhcoreClassDesign::designtpl('lhuser/menu_tabs/custom_multiinclude_tab.tpl.php'));?>\n\n</ul>\n\n<div class=\"tab-content\" ng-controller=\"LHCAccountValidator as accval\">\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == '') : ?>active<?php endif;?>\" id=\"account\">\n\n\t   <?php include(erLhcoreClassDesign::designtpl('lhuser/account/above_account_edit_multiinclude.tpl.php'));?>\n\n\t   <div class=\"explain\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Do not enter a password unless you want to change it');?></div>\n\t   <br />\n\n\t   <form action=\"<?php echo erLhcoreClassDesign::baseurl('user/edit')?>/<?php echo $user->id?>#account\" method=\"post\" autocomplete=\"off\" enctype=\"multipart/form-data\">\n\t        \n\t        <?php include(erLhcoreClassDesign::designtpl('lhuser/account/above_new_account_form_multiinclude.tpl.php'));?>\n\t        \n\t        <div class=\"form-group\">\n    \t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Username');?>*</label>\n    \t\t  <input <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" type=\"text\" ng-non-bindable name=\"Username\" value=\"<?php echo htmlspecialchars($user->username);?>\" />\n    \t\t</div>\n    \t\t\n    \t\t<div class=\"form-group\">\n        \t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Password');?></label>\n        \t\t<input ng-non-bindable autocomplete=\"new-password\" type=\"password\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Password\" value=\"<?php echo htmlspecialchars(isset($user->password_temp_1) ? $user->password_temp_1 : '');?>\" />\n    \t\t</div>\n\n    \t\t<div class=\"form-group\">\n        \t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Repeat the new password');?></label>\n        \t\t<input ng-non-bindable autocomplete=\"new-password\" type=\"password\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Password1\" value=\"<?php echo htmlspecialchars(isset($user->password_temp_2) ? $user->password_temp_2 : '');?>\" />\n    \t\t</div>\n\n           <div class=\"row\">\n               <div class=\"col-6\">\n                   <div class=\"form-group\">\n                       <label><input type=\"checkbox\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> value=\"on\" name=\"ForceResetPassword\" <?php echo isset($force_reset_password) && $force_reset_password == 1 ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Force user to change password on login')?></label>\n                   </div>\n               </div>\n               <div class=\"col-6\">\n                   <div class=\"form-group\">\n                       <label><input type=\"checkbox\" <?php if (isset($can_edit_groups) && $can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> value=\"on\" name=\"force_logout\" <?php echo $user->force_logout == 1 ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Force logout')?></label>\n                   </div>\n               </div>\n           </div>\n\n    \t\t<div class=\"form-group\">\n        \t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','E-mail');?></label>\n        \t\t<input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Email\" value=\"<?php echo $user->email;?>\"/>\n    \t\t</div>\n    \t\t\n    \t\t<div class=\"form-group\">\n\t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Chat nickname');?></label>\n\t\t\t\t<input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"ChatNickname\" value=\"<?php echo htmlspecialchars($user->chat_nickname);?>\" />\n\t\t\t</div>\n\t\t\t\n    \t\t<div class=\"form-group\">\n    \t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Name');?></label>\n    \t\t  <input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Name\" value=\"<?php echo htmlspecialchars($user->name);?>\"/>\n    \t\t</div>\n    \t\t\n    \t\t<div class=\"form-group\">\n    \t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Surname');?></label>\n    \t\t  <input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Surname\" value=\"<?php echo htmlspecialchars($user->surname);?>\"/>\n    \t\t</div>\n    \t\t\n    \t\t<div class=\"form-group\">\n    \t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Job title');?></label>\n    \t\t  <input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"JobTitle\" value=\"<?php echo htmlspecialchars($user->job_title);?>\"/>\n    \t\t</div>\n    \t\t\t    \n    \t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/parts/time_zone.tpl.php'));?>\n    \t\t\n    \t\t<div class=\"row\">\n    \t\t\n    \t\t  <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/visibility_content.tpl.php'));?>\n    \t\t  \n    \t\t  <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/after_visibility_content.tpl.php'));?>\n\n              <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/hidability.tpl.php'));?>\n\n    \t\t  <div class=\"col-4\">\n        \t\t  <div class=\"form-group\">\n        \t\t      <label title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','User receives other operators permissions request');?>\"><input <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> type=\"checkbox\" value=\"on\" name=\"ReceivePermissionRequest\" <?php echo $user->rec_per_req == 1 ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','User receives other operators permissions request')?></label>\n        \t\t  </div>\n    \t\t  </div>\n    \t\t</div>\n    \t\t\n    \t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/after_permission.tpl.php'));?>\n    \t\t\n    \t\t<div class=\"row form-group\">\n    \t\t\t<div class=\"col-md-6\">\n    \t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Skype');?></label>\n    \t\t\t\t<input type=\"text\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> ng-non-bindable class=\"form-control\" name=\"Skype\" value=\"<?php echo htmlspecialchars($user->skype);?>\"/>\n    \t\t\t</div>\n    \t\t\t<div class=\"col-md-6\">\n    \t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','XMPP username');?></label>\n    \t\t\t\t<input type=\"text\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> ng-non-bindable class=\"form-control\" name=\"XMPPUsername\" value=\"<?php echo htmlspecialchars($user->xmpp_username);?>\"/>\n    \t\t\t</div>\n    \t\t</div>\n\n           <div class=\"row\">\n               <div class=\"col-6\">\n                   <?php if (!($can_edit_groups === false)) : ?>\n                       <div class=\"form-group\">\n                           <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Photo');?>, (jpg,png)</label>\n                           <input type=\"file\" name=\"UserPhoto\" value=\"\" />\n                       </div>\n                   <?php endif;?>\n                   <?php if ($user->has_photo) : ?>\n                       <div class=\"form-group\">\n                           <img src=\"<?php echo $user->photo_path?>\" alt=\"\" width=\"50\" /><br />\n                           <label><input type=\"checkbox\" name=\"DeletePhoto\" value=\"1\" /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Delete')?></label>\n                       </div>\n                   <?php endif;?>\n               </div>\n               <div class=\"col-6\">\n                   <?php $avatarOptions = ['avatar' => $user->avatar]; ?>\n                   <?php include(erLhcoreClassDesign::designtpl('lhuser/parts/avatar_build.tpl.php'));?>\n               </div>\n           </div>\n\n            <?php if ($can_edit_groups === true) : ?>\n\n            <?php $user_groups_filter['filter']['required'] = 0; if (erLhcoreClassModelGroup::getcount($user_groups_filter) > 0) : ?>\n            <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','User group')?></label>\n            <div class=\"row\">\n                <?php echo erLhcoreClassRenderHelper::renderCheckbox( array (\n                    'input_name'     => 'DefaultGroup[]',\n                    'selected_id'    => $user->user_groups_id,\n                    'multiple' \t\t => true,\n                    'css_class'      => 'form-control',\n                    'wrap_prepend'   => '<div class=\"col-3\">',\n                    'wrap_append'    => '</div>',\n                    'list_function'  => 'erLhcoreClassModelGroup::getList',\n                    'list_function_params'  => $user_groups_filter,\n                    'read_only_list' => $groups_read_only\n                )); ?>\n            </div>\n            <?php endif; ?>\n\n            <?php $user_groups_filter['filter']['required'] = 1; $groupsRequired = erLhcoreClassModelGroup::getList($user_groups_filter); if (!empty($groupsRequired)) : ?>\n                     <br/>\n                    <label ng-class=\"{'chat-closed' : !accval.validRequiredGroups}\"><i ng-if=\"!accval.validRequiredGroups\" class=\"material-icons chat-closed\">error</i><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Required groups, choose one or more')?>*</label>\n                    <div class=\"row\" ng-init='accval.requiredGroups = <?php $obj = new stdClass(); foreach ($user->user_groups_id as $userGroupId) {if (isset($groupsRequired[$userGroupId])) { $obj->{$userGroupId} = true; }}; echo json_encode($obj)?>;accval.validateGroups()'>\n                        <?php echo erLhcoreClassRenderHelper::renderCheckbox( array (\n                            'input_name'     => 'DefaultGroup[]',\n                            'selected_id'    => $user->user_groups_id,\n                            'multiple' \t\t => true,\n                            'css_class'      => 'form-control',\n                            'wrap_prepend'   => '<div class=\"col-3\">',\n                            'wrap_append'    => '</div>',\n                            'ng_change'      => 'accval.validateGroups()',\n                            'ng_model'      => 'accval.requiredGroups[$id]',\n                            'list_function'  => 'erLhcoreClassModelGroup::getList',\n                            'list_function_params'  => $user_groups_filter\n                        )); ?>\n                    </div>\n            <?php endif; ?>\n\n            <hr>\n    \t\t<label><input type=\"checkbox\" value=\"on\" name=\"UserDisabled\" <?php echo $user->disabled == 1 ? 'checked=\"checked\"' : '' ?> />&nbsp;<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Disabled')?></label><br>\n    \t\t<?php endif; ?>\n    \t\t    \t\t    \t\t\n    \t\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n    \t\t\n    \t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/below_account_edit_multiinclude.tpl.php'));?>\n\n    \t\t<div class=\"btn-group\" role=\"group\" aria-label=\"...\" <?php if (empty($groupsRequired)) :?>ng-init=\"accval.validForm=true\"<?php endif?> >\n\n                <?php if (!($can_edit_groups === false)) : ?>\n                <input type=\"submit\" class=\"btn btn-secondary\" ng-disabled=\"!accval.validForm\" name=\"Save_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Save');?>\"/>\n    \t\t    <input type=\"submit\" class=\"btn btn-secondary\" ng-disabled=\"!accval.validForm\" name=\"Update_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Update');?>\"/>\n                <?php endif; ?>\n\n    \t\t    <input type=\"submit\" class=\"btn btn-secondary\" name=\"Cancel_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Cancel');?>\"/>\n        \t</div>\t\n\t\n\t   </form>\n\t</div>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false) && (\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n        )) : ?>\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_departments') : ?>active<?php endif;?>\" id=\"departments\">\n\n\t\t<?php if (isset($account_updated_departaments) && $account_updated_departaments == 'done') : $msg = erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account updated'); ?>\n\t\t\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/alert_success.tpl.php'));?>\n\t\t<?php endif; ?>\n\t\t\n\t\t<?php \n\t\t  $userDepartaments = erLhcoreClassUserDep::getUserDepartamentsIndividual($user->id);\n\t\t  $userDepartamentsRead = erLhcoreClassUserDep::getUserDepartamentsIndividual($user->id, true);\n\t\t  $userDepartamentsGroup = erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds($user->id);\n\t\t  $userDepartamentsGroupRead = erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds($user->id, true);\n          $departmentEditParams = [\n                  'self_edit' => false,\n                  'all_departments' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','edit_all_departments'),\n                  'individual' => [\n                          'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                          'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                          'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual')\n                  ],\n                  'groups' => [\n                      'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                      'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                      'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n                  ]\n          ];\n\n          if ($departmentEditParams['individual']['edit_all'] == false) {\n              $departmentEditParams['individual']['id'] = array_merge(\n                      erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                              erLhcoreClassUser::instance()->getUserID()\n                      ),\n                      erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                              erLhcoreClassUser::instance()->getUserID(),\n                              true\n                      )\n              );\n          }\n\n          if ($departmentEditParams['groups']['edit_all'] == false) {\n              $departmentEditParams['groups']['id'] = array_merge(\n                      erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                              erLhcoreClassUser::instance()->getUserID()\n                      ),\n                      erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                              erLhcoreClassUser::instance()->getUserID(),\n                              true\n                      )\n              );\n          }\n\t\t?>\n\t\t\n\t\t<form action=\"<?php echo erLhcoreClassDesign::baseurl('user/edit')?>/<?php echo $user->id?>#departments\" method=\"post\" enctype=\"multipart/form-data\">\n\t\t\n\t\t    <?php include(erLhcoreClassDesign::designtpl('lhuser/account/departments_assignment.tpl.php'));?>\n\t\t    \n\t\t    <input type=\"submit\" class=\"btn btn-secondary\" name=\"UpdateDepartaments_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Update');?>\"/>\n\t\t</form> \n    </div>\n    <?php endif; ?>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_pending') : ?>active<?php endif;?>\" id=\"pending\">\n\t   <form action=\"<?php echo erLhcoreClassDesign::baseurl('user/edit')?>/<?php echo $user->id?>#pending\" method=\"post\">\n\n\t  \t<?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\n        <div class=\"form-group\">\n\t\t    <label><input type=\"checkbox\" name=\"showAllPendingEnabled\" value=\"1\" <?php erLhcoreClassModelUserSetting::getSetting('show_all_pending',1, $user->id) == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','User can see all pending chats, not only assigned to him');?></label><br>\n        </div>\n\n        <div class=\"form-group\">\n           <label><input type=\"checkbox\" name=\"autoAccept\" value=\"1\" <?php $user->auto_accept == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Automatically accept assigned chats');?></label>\n        </div>\n\n        <div class=\"form-group\">\n           <label><input type=\"checkbox\" name=\"exclude_autoasign\" value=\"1\" <?php $user->exclude_autoasign == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Exclude from auto assign workflow');?></label>\n        </div>\n\n       <div class=\"form-group\">\n           <label><input type=\"checkbox\" name=\"auto_join_private\" value=\"1\" <?php erLhcoreClassModelUserSetting::getSetting('auto_join_private',1, $user->id) == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Auto join private chats');?></label>\n       </div>\n\n        <div class=\"form-group\">\n           <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Maximum active chats');?></label>\n           <input type=\"text\" ng-non-bindable class=\"form-control\" name=\"maximumChats\" value=\"<?php echo $user->max_active_chats?>\" />\n        </div>\n\n\t\t<input type=\"submit\" class=\"btn btn-secondary\" name=\"UpdatePending_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Update');?>\"/>\n\t   </form>\n    </div>\n    <?php endif; ?>\n\n    <?php if (erLhcoreClassUser::instance()->hasAccessTo('lhpermission','see_permissions_users')) : ?>\n    <div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_permission') : ?>active<?php endif;?>\" id=\"permission\">\n        <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','In order to change operator permissions you have to edit');?> <a href=\"<?php echo erLhcoreClassDesign::baseurl('permission/roles')?>\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','roles');?></a>.</p>\n\n        <input type=\"button\" class=\"btn btn-secondary\" name=\"UpdateSpeech_account\" onclick=\"lhinst.showMyPermissions('<?php echo $user->id?>')\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Show permissions');?>\" />\n\t\t<div id=\"permissions-summary\"></div>\t\t\n    </div>\n\t<?php endif;?>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n    <div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_speech') : ?>active<?php endif;?>\" id=\"speech\">\n\n        <?php if (isset($account_updated) && $account_updated == 'done') : $msg = erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account updated'); ?>\n            <?php include(erLhcoreClassDesign::designtpl('lhkernel/alert_success.tpl.php'));?>\n        <?php endif; ?>\n\n        <form action=\"<?php echo erLhcoreClassDesign::baseurl('user/edit')?>/<?php echo $user->id?>\" method=\"post\">\n\n            <?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\n            <?php $dataSpeech = array(\n                'language' => (int)erLhcoreClassModelUserSetting::getSetting('speech_language','',$user->id),\n                'dialect' => (int)erLhcoreClassModelUserSetting::getSetting('speech_dialect','',$user->id),\n                'optional' => true,\n            ); ?>\n\n            <?php include(erLhcoreClassDesign::designtpl('lhspeech/speech_form_fields.tpl.php'));?>\n\n            <?php include(erLhcoreClassDesign::designtpl('lhspeech/my_languages.tpl.php'));?>\n\n            <input type=\"submit\" class=\"btn btn-secondary\" name=\"UpdateSpeech_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Update');?>\" />\n\n        </form>\n    </div>\n    <?php endif; ?>\n\n\t<?php include(erLhcoreClassDesign::designtpl('lhuser/menu_tabs_content/custom_multiinclude_tab.tpl.php'));?>\n\t\n</div>\n", "<h1><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','New user');?></h1>\n\n<?php include(erLhcoreClassDesign::designtpl('lhuser/pre_user_form.tpl.php'));?>\n\n<?php if (isset($errors)) : ?>\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/validation_error.tpl.php'));?>\n<?php endif; ?>\n\n<form action=\"<?php echo erLhcoreClassDesign::baseurl('user/new')?>\" method=\"post\" autocomplete=\"off\" enctype=\"multipart/form-data\">\n\n<ul class=\"nav nav-pills\" role=\"tablist\">\n\t<li role=\"presentation\" class=\"nav-item\"><a class=\"nav-link <?php if ($tab == '') : ?>active<?php endif;?>\" href=\"#account\" aria-controls=\"account\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account data');?></a></li>\n\t<li role=\"presentation\" class=\"nav-item\"><a class=\"nav-link <?php if ($tab == 'tab_departments') : ?>active<?php endif;?>\" href=\"#departments\" aria-controls=\"departments\" role=\"tab\" data-toggle=\"tab\" ><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Assigned departments');?></a></li>\n\t<li role=\"presentation\" class=\"nav-item\"><a class=\"nav-link <?php if ($tab == 'tab_pending') : ?>active<?php endif;?>\" href=\"#pending\" aria-controls=\"pending\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Pending chats');?></a></li>\n\t<?php include(erLhcoreClassDesign::designtpl('lhuser/menu_tabs/custom_multiinclude_tab.tpl.php'));?>\n</ul>\n\n<div class=\"tab-content\" ng-controller=\"LHCAccountValidator as accval\">\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == '') : ?>active<?php endif;?>\" id=\"account\">\n\t    <?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\t\t\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/above_account_new_multiinclude.tpl.php'));?>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Username');?></label>\n\t\t  <input class=\"form-control\" type=\"text\" name=\"Username\" value=\"<?php echo htmlspecialchars($user->username);?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','E-mail');?></label>\n\t\t  <input type=\"text\" class=\"form-control\" name=\"Email\" value=\"<?php echo htmlspecialchars($user->email);?>\"/>\n\t\t</div>\n\t\t\t\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Password');?></label>\n\t\t  <input type=\"password\" class=\"form-control\" autocomplete=\"new-password\" name=\"Password\" value=\"<?php echo htmlspecialchars(isset($user->password_temp_1) ? $user->password_temp_1 : '');?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Repeat the new password');?></label>\n\t\t  <input type=\"password\" class=\"form-control\" autocomplete=\"new-password\" name=\"Password1\" value=\"<?php echo htmlspecialchars(isset($user->password_temp_2) ? $user->password_temp_2 : '');?>\" />\n\t\t</div>\n\n        <div class=\"form-group\">\n            <label><input type=\"checkbox\" value=\"on\" name=\"ForceResetPassword\" <?php echo isset($_POST['ForceResetPassword']) ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Force user to change password on login')?></label>\n        </div>\n\n\t\t<div class=\"form-group\">\n\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Chat nickname');?></label>\n\t\t\t<input type=\"text\" class=\"form-control\" name=\"ChatNickname\" value=\"<?php echo htmlspecialchars($user->chat_nickname);?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Name');?></label>\n\t\t  <input class=\"form-control\" type=\"text\" name=\"Name\" value=\"<?php echo htmlspecialchars($user->name);?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Surname');?></label>\n\t\t  <input class=\"form-control\" type=\"text\" name=\"Surname\" value=\"<?php echo htmlspecialchars($user->surname);?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Job title');?></label>\n\t\t  <input type=\"text\" class=\"form-control\" name=\"JobTitle\" value=\"<?php echo htmlspecialchars($user->job_title);?>\"/>\n\t\t</div>\n\t\t\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/parts/time_zone.tpl.php'));?>\n\t\t\n\t\t<div class=\"row\">\n\t\t  \n\t\t  <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/visibility_content.tpl.php'));?>\n    \t\t  \n          <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/after_visibility_content.tpl.php'));?>\n\n          <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/hidability.tpl.php'));?>\n\n\t\t  <div class=\"col-4\">\n    \t\t  <div class=\"form-group\">\n    \t\t      <label title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','User receives other operators permissions request');?>\"><input type=\"checkbox\" value=\"on\" name=\"ReceivePermissionRequest\" <?php echo $user->rec_per_req == 1 ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','User receives other operators permissions request')?></label>\n    \t\t  </div>\n\t\t  </div>\n\t\t</div>\n\t\t\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/after_permission.tpl.php'));?>\n\t\t\n\t\t<div class=\"row form-group\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Skype');?></label>\n\t\t\t\t<input class=\"form-control\" type=\"text\" name=\"Skype\" value=\"<?php echo htmlspecialchars($user->skype);?>\"/>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','XMPP username');?></label>\n\t\t\t\t<input class=\"form-control\" type=\"text\" name=\"XMPPUsername\" value=\"<?php echo htmlspecialchars($user->xmpp_username);?>\"/>\n\t\t\t</div>\n\t\t</div>\n\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <div class=\"form-group\">\n                    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Photo');?>, (jpg,png)</label>\n                    <input type=\"file\" name=\"UserPhoto\" value=\"\" />\n                </div>\n            </div>\n            <div class=\"col-6\">\n                <?php $avatarOptions = ['avatar' => $user->avatar]; ?>\n                <?php include(erLhcoreClassDesign::designtpl('lhuser/parts/avatar_build.tpl.php'));?>\n            </div>\n        </div>\n\n        <?php $user_groups_filter['filter']['required'] = 0; if (erLhcoreClassModelGroup::getcount($user_groups_filter) > 0) : ?>\n            <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','User group')?></label>\n            <div class=\"row\">\n                <?php echo erLhcoreClassRenderHelper::renderCheckbox( array (\n                    'input_name'     => 'DefaultGroup[]',\n                    'selected_id'    => $user->user_groups_id,\n                    'multiple'       => true,\n                    'css_class'      => 'form-control',\n                    'wrap_prepend'   => '<div class=\"col-3\">',\n                    'wrap_append'    => '</div>',\n                    'list_function'  => 'erLhcoreClassModelGroup::getList',\n                    'list_function_params'  => $user_groups_filter,\n                    'read_only_list' => $groups_read_only\n                )); ?>\n            </div>\n        <?php endif; ?>\n\n        <?php $user_groups_filter['filter']['required'] = 1; $groupsRequired = erLhcoreClassModelGroup::getList($user_groups_filter); if (!empty($groupsRequired)) : ?>\n            <br/>\n            <label ng-class=\"{'chat-closed' : !accval.validRequiredGroups}\"><i ng-if=\"!accval.validRequiredGroups\" class=\"material-icons chat-closed\">error</i><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Required groups, choose one or more')?>*</label>\n            <div class=\"row\" ng-init='accval.requiredGroups = <?php $obj = new stdClass(); foreach ($user->user_groups_id as $userGroupId) {if (isset($groupsRequired[$userGroupId])) { $obj->{$userGroupId} = true; }}; echo json_encode($obj)?>;accval.validateGroups()'>\n                <?php echo erLhcoreClassRenderHelper::renderCheckbox( array (\n                    'input_name'     => 'DefaultGroup[]',\n                    'selected_id'    => $user->user_groups_id,\n                    'multiple' \t\t => true,\n                    'css_class'      => 'form-control',\n                    'wrap_prepend'   => '<div class=\"col-3\">',\n                    'wrap_append'    => '</div>',\n                    'ng_change'      => 'accval.validateGroups()',\n                    'ng_model'      => 'accval.requiredGroups[$id]',\n                    'list_function'  => 'erLhcoreClassModelGroup::getList',\n                    'list_function_params'  => $user_groups_filter\n                )); ?>\n            </div>\n        <?php endif; ?>\n        <hr>\n\t\t<label>&nbsp;<input type=\"checkbox\" value=\"on\" name=\"UserDisabled\" <?php echo $user->disabled == 1 ? 'checked=\"checked\"' : '' ?> />&nbsp;<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Disabled')?></label><br>\n\t\t\t\t\t\t\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/below_new_account_multiinclude.tpl.php'));?>\n\t\t\n\t\t<input <?php if (empty($groupsRequired)) :?>ng-init=\"accval.validForm=true\"<?php endif?> type=\"submit\" class=\"btn btn-secondary\" ng-disabled=\"!accval.validForm\" name=\"Update_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Save');?>\" />\n\t</div>\n\t\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_departments') : ?>active<?php endif;?>\" id=\"departments\">\n        <?php\n            $departmentEditParams = [\n                'self_edit' => false,\n                'edit_all_departments' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','edit_all_departments'),\n                'individual' => [\n                    'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                    'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                    'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual')\n                ],\n                'groups' => [\n                    'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                    'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                    'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n                ]\n            ];\n\n            if ($departmentEditParams['individual']['edit_all'] == false) {\n                $departmentEditParams['individual']['id'] = array_merge(\n                    erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                        erLhcoreClassUser::instance()->getUserID()\n                    ),\n                    erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                        erLhcoreClassUser::instance()->getUserID(),\n                        true\n                    )\n                );\n            }\n\n            if ($departmentEditParams['groups']['edit_all'] == false) {\n                $departmentEditParams['groups']['id'] = array_merge(\n                    erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                        erLhcoreClassUser::instance()->getUserID()\n                    ),\n                    erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                        erLhcoreClassUser::instance()->getUserID(),\n                        true\n                    )\n                );\n            }\n        ?>\n\t    <?php include(erLhcoreClassDesign::designtpl('lhuser/account/departments_assignment.tpl.php'));?>\n\t    \t\t\n\t\t<input type=\"submit\" class=\"btn btn-secondary\" name=\"Update_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Save');?>\" />\n\t</div>\n\t\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_pending') : ?>active<?php endif;?>\" id=\"pending\">\n        <?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\n\t\t<label><input type=\"checkbox\" name=\"showAllPendingEnabled\" value=\"1\" <?php $show_all_pending == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','User can see all pending chats, not only assigned to him');?></label><br>\n\n        <div class=\"form-group\">\n            <label><input type=\"checkbox\" name=\"autoAccept\" value=\"1\" <?php $user->auto_accept == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Automatically accept assigned chats');?></label>\n        </div>\n\n        <div class=\"form-group\">\n            <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Maximum active chats');?></label>\n            <input type=\"text\" class=\"form-control\" name=\"maximumChats\" value=\"<?php echo $user->max_active_chats?>\" />\n        </div>\n\n \t\t<input type=\"submit\" class=\"btn btn-secondary\" name=\"Update_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Save');?>\" />\n\t</div>\n\t\n\t<?php include(erLhcoreClassDesign::designtpl('lhuser/menu_tabs_content/custom_multiinclude_tab.tpl.php'));?>\n\t\n</div>\n</form>\n\n", "<div class=\"row\">\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n    <div class=\"col-9\">\n        <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n        <span class=\"input-group-text action-image\" onclick=\"lhc.revealModal({'url':WWW_DIR_JAVASCRIPT+'user/avatarbuilder/'+$('#<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>id_avatar_string').val() + '?prefix=<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>'})\">\n            <span class=\"material-icons mr-0 btn-link\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Avatar builder');?>\">palette</span>\n        </span>\n            </div>\n            <input maxlength=\"100\" name=\"<?php isset($avatarOptions['field_name']) ? print $avatarOptions['field_name'] : print 'avatar'?>\" onkeyup=\"$('#<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>avatar_string_img').attr('src',WWW_DIR_JAVASCRIPT + 'widgetrestapi/avatar/' + $(this).val())\" id=\"<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>id_avatar_string\" type=\"text\" class=\"form-control\" value=\"<?php echo htmlspecialchars($avatarOptions['avatar'])?>\" placeholder=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Enter any string to generate an avatar');?>\"/>\n        </div>\n    </div>\n    <?php endif; ?>\n\n    <div class=\"col-3\">\n        <img width=\"70\" height=\"70\" id=\"<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>avatar_string_img\" src=\"<?php echo erLhcoreClassDesign::baseurl('widgetrestapi/avatar')?>/<?php echo htmlspecialchars($avatarOptions['avatar'])?>\" alt=\"\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Click to set avatar');?>\" />\n    </div>\n</div>\n\n\n\n", "<?php\n\n/**\n * Class used for validator\n * */\n\nclass erLhcoreClassUserValidator {\n\t\n\tpublic static function validateUser(& $userData, $params = array()) {\n\t\t\n\t\t$definition = array (\n\t\t\t'Password' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Password1' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Email' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'validate_email'\n\t\t\t),\n\t\t\t'Name' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Surname' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'ChatNickname' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Username' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'UserDisabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'force_logout' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'HideMyStatus' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'UserInvisible' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\t\t\t\n\t\t\t'ReceivePermissionRequest' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'JobTitle' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n            'avatar' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'UserTimeZone' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'DefaultGroup' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'int',\n\t\t\t\tnull,\n\t\t\t\tFILTER_REQUIRE_ARRAY\n\t\t\t),\n\t\t\t'Skype' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'XMPPUsername' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t)\n\t\t);\n\t\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition);\n\t\t\n\t\t$Errors = array();\n\t\t\n\t\tif (isset($params['user_new']) && $params['user_new'] == true) {\n\t\t\t\n\t\t\tif ( !$form->hasValidData( 'Username' ) || $form->Username == '') {\n\t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Please enter a username');\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\t$userData->username = $form->Username;\n\t\t\t\t\n\t\t\t\tif(erLhcoreClassModelUser::userExists($userData->username) === true) {\n\t\t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','User exists');\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ( $form->hasValidData( 'Password' ) && $form->hasValidData( 'Password1' ) ) {\n    \t\t\t$userData->password_temp_1 = $form->Password;\n    \t\t\t$userData->password_temp_2 = $form->Password1;\n\t\t\t}\n\t\t\t\n\t\t\tif ( !$form->hasValidData( 'Password' ) || !$form->hasValidData( 'Password1' ) || $form->Password == '' || $form->Password1 == '' || $form->Password != $form->Password1) {\n\t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Passwords mismatch');\n\t\t\t} else {\n\t\t\t\t$userData->setPassword($form->Password);\n\t\t\t\t$userData->password_front = $form->Password;\n\t\t\t}\n\t\t\t\n\t\t} elseif ($params['user_edit'] && $params['user_edit'] == true) {\n\t\t\t\n\t\t    if ((isset($params['can_edit_groups']) && $params['can_edit_groups'] == true) || !isset($params['can_edit_groups'])) {\n    \t\t\tif ( !$form->hasValidData( 'Username' ) || $form->Username == '') {\n    \t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Please enter a username');\n    \t\t\t} else {\n    \t\t\t\t\n    \t\t\t\tif($form->Username != $userData->username) {\n    \t\t\t\t\t\n    \t\t\t\t\t$userData->username = $form->Username;\n    \t\t\t\t\t\n    \t\t\t\t\tif(erLhcoreClassModelUser::userExists($userData->username) === true) {\n    \t\t\t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','User exists');\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\t\n    \t\t\t\n    \t\t\tif ( $form->hasValidData( 'Password' ) && $form->hasValidData( 'Password1' ) ) {\n    \t\t\t    $userData->password_temp_1 = $form->Password;\n    \t\t\t    $userData->password_temp_2 = $form->Password1;\n    \t\t\t}\n    \t\t\t\n    \t\t\tif ( $form->hasInputField( 'Password' ) && (!$form->hasInputField( 'Password1' ) || $form->Password != $form->Password1 ) ) {\n    \t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Passwords mismatch');\n    \t\t\t} else {\n    \t\t\t\t\n    \t\t\t\tif ($form->hasInputField( 'Password' ) && $form->hasInputField( 'Password1' ) && $form->Password != '' && $form->Password1 != '') {\n    \t\t\t\t\t$userData->setPassword($form->Password);\n    \t\t\t\t\t$userData->password_front = $form->Password;\n    \t\t\t\t}\n    \t\t\t\t\n    \t\t\t}\n\t\t    }\n\t\t    \n\t\t}  else {\n\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','User action type not set');\n\t\t}\n\n\t\tself::validatePassword($userData,$Errors);\n\n\t\tif ( $form->hasValidData( 'ChatNickname' ) && $form->ChatNickname != '' ) {\n\t\t    $userData->chat_nickname = $form->ChatNickname;\n\t\t} else {\n\t\t    $userData->chat_nickname = '';\n\t\t}\n\t\t\n\t\tif ( !$form->hasValidData( 'Email' ) ) {\n\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Wrong email address');\n\t\t} else {\n\t\t\t$userData->email = $form->Email;\n\t\t}\n\n\t\tif ($form->hasValidData( 'avatar' ) ) {\n            $userData->avatar = $form->avatar;\n\t\t}\n\t\t\n\t\tif ( !$form->hasValidData( 'Name' ) || $form->Name == '' ) {\n\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Please enter a name');\n\t\t} else {\n\t\t\t$userData->name = $form->Name;\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'Surname' ) && $form->Surname != '') {\n\t\t\t$userData->surname = $form->Surname;\n\t\t} else {\n\t\t\t$userData->surname = '';\n\t\t}\n\t\t\t\t\n\t\tif ( $form->hasValidData( 'JobTitle' ) && $form->JobTitle != '') {\n\t\t\t$userData->job_title = $form->JobTitle;\n\t\t} else {\n\t\t\t$userData->job_title = '';\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'UserTimeZone' ) && $form->UserTimeZone != '') {\n\t\t\t$userData->time_zone = $form->UserTimeZone;\n\t\t} else {\n\t\t\t$userData->time_zone = '';\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'Skype' ) && $form->Skype != '') {\n\t\t\t$userData->skype = $form->Skype;\n\t\t} else {\n\t\t\t$userData->skype = '';\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'XMPPUsername' ) && $form->XMPPUsername != '') {\n\t\t\t$userData->xmpp_username = $form->XMPPUsername;\n\t\t} else {\n\t\t\t$userData->xmpp_username = '';\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'HideMyStatus' ) && $form->HideMyStatus == true )\t{\n\t\t\t$userData->hide_online = 1;\n\t\t} else {\n\t\t\t$userData->hide_online = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'force_logout' ) && $form->force_logout == true )\t{\n\t\t\t$userData->force_logout = 1;\n\t\t} else {\n\t\t\t$userData->force_logout = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'UserInvisible' ) && $form->UserInvisible == true ) {\n\t\t\t$userData->invisible_mode = 1;\n\t\t} else {\n\t\t\t$userData->invisible_mode = 0;\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'ReceivePermissionRequest' ) && $form->ReceivePermissionRequest == true ) {\n\t\t\t$userData->rec_per_req = 1;\n\t\t} else {\n\t\t\t$userData->rec_per_req = 0;\n\t\t}\n\t\t\n\t\tif ((isset($params['can_edit_groups']) && $params['can_edit_groups'] == true) || !isset($params['can_edit_groups'])) {\n\n\t\t    if ( $form->hasValidData( 'UserDisabled' ) && $form->UserDisabled == true )\t{\n\t\t        $userData->disabled = 1;\n\t\t    } else {\n\t\t        $userData->disabled = 0;\n\t\t    }\n\t\t    \n    \t\tif ( $form->hasValidData( 'DefaultGroup' ) ) {\n\n    \t\t    if ($params['groups_can_edit'] === true) {\n    \t\t        $userData->user_groups_id = $form->DefaultGroup;\n\n    \t\t        $groupsRequired = erLhcoreClassModelGroup::getList(array('filter' => array('required' => 1)));\n\n    \t\t        if (!empty($groupsRequired)) {\n                        $diff = array_diff(array_keys($groupsRequired), $userData->user_groups_id);\n\n                        if (count($diff) == count($groupsRequired)) {\n                            $Errors['group_required'] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','You have to choose one of required groups!');\n                        }\n    \t\t        }\n\n    \t\t    } else {\n\n                    $groupsMustChecked = array_intersect($userData->user_groups_id,$params['groups_can_read']);\n\n    \t\t        $unknownGroups = array_diff($form->DefaultGroup, $params['groups_can_edit']);\n\n    \t\t        if (empty($unknownGroups)) {\n    \t\t            $userData->user_groups_id = $form->DefaultGroup;\n                        foreach ($groupsMustChecked as $groupAdd) {\n                            $userData->user_groups_id[] = $groupAdd;\n                        }\n\n    \t\t            if (!empty($params['groups_can_edit'])) {\n                            $groupsRequired = erLhcoreClassModelGroup::getList(array('filterin' => array('id' => $params['groups_can_edit']), 'filter' => array('required' => 1)));\n\n                            if (!empty($groupsRequired)) {\n                                $diff = array_diff(array_keys($groupsRequired), $userData->user_groups_id);\n    \n                                if (count($diff) == count($groupsRequired)) {\n                                    $Errors['group_required'] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','You have to choose one of required groups!');\n                                }\n                            }\n    \t\t            }\n\n    \t\t        } else {\n    \t\t            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','You are trying to assign group which are not known!');\n    \t\t        }\n    \t\t    }\n    \t\t    \n    \t\t} else {\n    \t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Please choose a default user group');\n    \t\t}\n\t\t}\n\t\t\n\t\treturn $Errors;\n\t\t\n\t}\t\n\t\n\tpublic static function validateDepartments(& $userData, $params = array()) {\n\t\n\t\t$globalDepartament = array();\n\n        if (!isset($params['all_departments']) || $params['all_departments'] == true)\n        {\n            if (isset($_POST['all_departments']) && $_POST['all_departments'] == 'on') {\n                $userData->all_departments = 1;\n                $globalDepartament[] = 0;\n            } else {\n                $userData->all_departments = 0;\n                if(isset($params['all_departments_0_global_value'])) {\n                    $globalDepartament[] = $params['all_departments_0_global_value'];\n                } else {\n                    $globalDepartament[] = -1;\n                }\n            }\n        } else {\n            $globalDepartament[] = $userData->all_departments == 1 ? 0 : -1;\n        }\n\n\t\tif ($params['edit_params']['individual']['edit_all'] == true) {\n            if (isset($_POST['UserDepartament']) && count($_POST['UserDepartament']) > 0) {\n                $globalDepartament = array_merge($_POST['UserDepartament'], $globalDepartament);\n            }\n\t\t} elseif ($params['edit_params']['individual']['edit_personal'] == true) {\n            // Append departments present operator can't control\n            $globalDepartament = array_merge($params['edit_params']['individual']['remote_id_write'], $globalDepartament);\n\n            if (isset($_POST['UserDepartament']) && count($_POST['UserDepartament']) > 0) {\n                foreach ($params['edit_params']['individual']['id'] as $depId) {\n                    if (in_array($depId, $_POST['UserDepartament'])){\n                        $globalDepartament[] = $depId;\n                    }\n                }\n            }\n\n        } else {\n            $globalDepartament = array_merge($params['edit_params']['individual']['remote_id_write_all'], $globalDepartament); // Keep previously selected departments\n        }\n\n        if ($params['edit_params']['individual']['edit_all'] == true) {\n            if (isset($_POST['UserDepartamentRead']) && count($_POST['UserDepartamentRead']) > 0) {\n                $globalDepartament = array_merge($_POST['UserDepartamentRead'], $globalDepartament);\n            }\n\t\t} elseif ($params['edit_params']['individual']['edit_personal'] == true) {\n            // Append departments present operator can't control\n            $globalDepartament = array_merge($params['edit_params']['individual']['remote_id_read'], $globalDepartament);\n\n            if (isset($_POST['UserDepartamentRead']) && count($_POST['UserDepartamentRead']) > 0) {\n                foreach ($params['edit_params']['individual']['id'] as $depId) {\n                    if (in_array($depId, $_POST['UserDepartamentRead'])){\n                        $globalDepartament[] = $depId;\n                    }\n                }\n            }\n\n        } else {\n            $globalDepartament = array_merge($params['edit_params']['individual']['remote_id_read_all'], $globalDepartament); // Keep previously selected departments\n        }\n\n        $globalDepartament = array_unique($globalDepartament);\n\n\t\t$userData->departments_ids = implode(',', $globalDepartament);\n\t\n\t\treturn $globalDepartament;\n\t\n\t}\n\t\n\tpublic static function validateShowAllPendingOption() {\n\t\n\t\t$definition = array(\n\t\t\t'showAllPendingEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'autoAccept' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'exclude_autoasign' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'auto_uppercase' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'auto_join_private' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'maximumChats' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'int'\n\t\t\t),\n\t\t);\n\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition );\n\n\t\t$result = array();\n\n\t\tif ( $form->hasValidData( 'showAllPendingEnabled' ) && $form->showAllPendingEnabled == true ) {\n            $result['show_all_pending'] = 1;\n\t\t} else {\n            $result['show_all_pending'] = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'auto_uppercase' ) && $form->auto_uppercase == true ) {\n            $result['auto_uppercase'] = 1;\n\t\t} else {\n            $result['auto_uppercase'] = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'autoAccept' ) && $form->autoAccept == true ) {\n            $result['auto_accept'] = 1;\n\t\t} else {\n            $result['auto_accept'] = 0;\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'auto_join_private' ) && $form->auto_join_private == true ) {\n            $result['auto_join_private'] = 1;\n\t\t} else {\n            $result['auto_join_private'] = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'exclude_autoasign' ) && $form->exclude_autoasign == true ) {\n            $result['exclude_autoasign'] = 1;\n\t\t} else {\n            $result['exclude_autoasign'] = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'maximumChats' )) {\n            $result['max_chats'] = $form->maximumChats;\n\t\t} else {\n            $result['max_chats'] = 0;\n\t\t}\n\t\n\t\treturn $result;\n\t}\n\t\n\tpublic static function validateUserPhoto(& $userData, $params = array()) {\n\t\t\n\t\t$Errors = false;\n\t\t\n\t\tif ( isset($_FILES[\"UserPhoto\"]) && is_uploaded_file($_FILES[\"UserPhoto\"][\"tmp_name\"]) && $_FILES[\"UserPhoto\"][\"error\"] == 0 && erLhcoreClassImageConverter::isPhoto('UserPhoto') ) {\n\n\t\t\t$Errors = array();\n\t\t\t\n\t\t\t$dir = 'var/userphoto/' . date('Y') . 'y/' . date('m') . '/' . date('d') .'/' . $userData->id . '/';\n\t\t\t \n\t\t\terLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.edit.photo_path',array('dir' => & $dir,'storage_id' => $userData->id));\n\t\t\t \n\t\t\t$response = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.edit.photo_store', array('file_post_variable' => 'UserPhoto', 'dir' => & $dir, 'storage_id' => $userData->id));\n\t\t\n\t\t\t// There was no callbacks\n\t\t\tif ($response === false) {\n\t\t\t\terLhcoreClassFileUpload::mkdirRecursive( $dir );\n\t\t\t\t$file = qqFileUploader::upload($_FILES,'UserPhoto',$dir);\n\t\t\t} else {\n\t\t\t\t$file = $response['data'];\n\t\t\t}\n\n\t\t\tif ( !empty($file[\"errors\"]) ) {\n\t\t\t\t\n\t\t\t\tforeach ($file[\"errors\"] as $err) {\n\t\t\t\t\t$Errors[] = $err;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\n\t\t\t\t$userData->removeFile();\n\t\t\t\t$userData->filename\t= $file[\"data\"][\"filename\"];\n\t\t\t\t$userData->filepath\t= $file[\"data\"][\"dir\"];\n\t\t\t\n\t\t\t\t$response = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.edit.photo_resize_150', array('mime_type' => $file[\"data\"]['mime_type'],'user' => $userData));\n\t\t\t\n\t\t\t\tif ($response === false) {\n\t\t\t\t    if ($file[\"data\"]['mime_type'] != 'image/svg+xml') {\n                        erLhcoreClassImageConverter::getInstance()->converter->transform( 'photow_150', $userData->file_path_server, $userData->file_path_server );\n                    }\n\t\t\t\t\tchmod($userData->file_path_server, 0644);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\treturn $Errors;\n\t}\n\n\tpublic static function validateUserNew(& $userData, & $params = array()) {\n\n\t\t$params['user_new'] = true;\n\n\t\t$Errors = self::validateUser($userData, $params);\n\n\t\tif (isset($params['global_departament'])) {\n\t\t\t$params['global_departament'] = self::validateDepartments($userData, ['edit_params' => $params['edit_params']]);\n\t\t}\n\n\t\tif (isset($params['show_all_pending'])) {\n\t\t\t$paramsPending = self::validateShowAllPendingOption();\n            $params = array_merge($params,$paramsPending);\n\t\t}\n\n        $userData->auto_accept = $params['auto_accept'];\n        $userData->max_active_chats = $params['max_chats'];\n        $userData->pswd_updated = time();\n        \n\t\terLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.new_user', array('userData' => & $userData, 'errors' => & $Errors));\n\t\t\n\t\treturn $Errors;\n\t}\n\n\tpublic static function validateUserEdit(& $userData, & $params = array()) {\n\t\n\t\t$params['user_edit'] = true;\n\t\t\n\t\t$Errors = self::validateUser($userData, $params);\n\t\t\n\t\terLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.edit_user',array('userData' => & $userData, 'errors' => & $Errors));\n\t\t\n\t\treturn $Errors;\n\t\t\n\t}\n\t\n\tpublic static function validateSpeech() {\n\t\t\n\t\t$data = array();\n\t\t\n\t\t$definition = array(\n\t\t\t'select_language' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'int',array('min_range' => 1)\n\t\t\t),\n\t\t\t'select_dialect' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'string'\n\t\t\t),\n            'userLanguages' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'string',\n                null,\n                FILTER_REQUIRE_ARRAY\n            )\n\t\t);\n\t\t\t\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition );\n\t\t\n\t\t$Errors = array();\n\t\t\n\t\t$data['speech_language'] = ( $form->hasValidData( 'select_language' ) ) ? $form->select_language : ''; \n\t\t\n\t\t$data['speech_dialect'] = ( $form->hasValidData( 'select_dialect' ) && $form->hasValidData( 'select_dialect' ) != '0' ) ? $form->select_dialect : '';\n\n        $data['user_languages'] = ($form->hasValidData( 'userLanguages' ) && !empty($form->userLanguages)) ? $form->userLanguages : array();\n\n\t\treturn $data;\n\t}\n\t\n\tpublic static function validateVisibilityList() {\n\t\t\n\t\t$data = array();\n\t\t\n\t\t$definition = array(\n\t\t\t'pendingTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'activeTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'closedTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'unreadTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'mychatsTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'botchatsTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t)\n\t\t);\n\t\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition );\n\t\t\n\t\t$Errors = array();\n\t\t\n\t\t$data['enable_pending_list'] = ( $form->hasValidData( 'pendingTabEnabled' ) && $form->pendingTabEnabled == true ) ? 1 : 0;\n\t\t\n\t\t$data['enable_active_list'] = ( $form->hasValidData( 'activeTabEnabled' ) && $form->activeTabEnabled == true ) ? 1 : 0;\n\t\t\t\t\n\t\t$data['enable_close_list'] = ( $form->hasValidData( 'closedTabEnabled' ) && $form->closedTabEnabled == true ) ? 1 : 0;\n\t\t\n\t\t$data['enable_unread_list'] = ( $form->hasValidData( 'unreadTabEnabled' ) && $form->unreadTabEnabled == true ) ? 1 : 0;\n\t\t\n\t\t$data['enable_mchats_list'] = ( $form->hasValidData( 'mychatsTabEnabled' ) && $form->mychatsTabEnabled == true ) ? 1 : 0;\n\n\t\t$data['enable_bot_list'] = ( $form->hasValidData( 'botchatsTabEnabled' ) && $form->botchatsTabEnabled == true ) ? 1 : 0;\n\n\t\treturn $data;\n\t}\n\t\n\tpublic static function validateNotifications() {\n\t    $data = array();\n\t    \n\t    $definition = array(\n\t        'show_alert_chat' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        ),\n\t        'sn_off' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        ),\n\t        'ownntfonly' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        ),\n\t        'trackactivity' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        ),\n\t        'trackactivitytimeout' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'int'\n\t        ),\n            'show_alert_transfer' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        )\n\t    );\n\t    \n\t    $form = new ezcInputForm( INPUT_POST, $definition );\n\t    \n\t    $Errors = array();\n\t    \n\t    $data['show_alert_chat'] = ( $form->hasValidData( 'show_alert_chat' ) && $form->show_alert_chat == true ) ? 1 : 0;\n\t    $data['sn_off'] = ( $form->hasValidData( 'sn_off' ) && $form->sn_off == true ) ? 1 : 0;\n\t    $data['ownntfonly'] = ( $form->hasValidData( 'ownntfonly' ) && $form->ownntfonly == true ) ? 1 : 0;\n\t    $data['trackactivity'] = ( $form->hasValidData( 'trackactivity' ) && $form->trackactivity == true ) ? 1 : 0;\n\t    $data['trackactivitytimeout'] = ( $form->hasValidData( 'trackactivitytimeout' )) ? (int)$form->trackactivitytimeout : -1;\n\t    $data['show_alert_transfer'] = ( $form->hasValidData( 'show_alert_transfer' ) && $form->show_alert_transfer == true) ? (int)$form->show_alert_transfer : 0;\n\n\t    return $data;\n\t}\n\t\n\tpublic static function validateDepartmentsGroup(& $userData, $params = array()) {\n\t\n\t    $globalDepartament = array();\n\n        $attr = isset($params['read_only']) && $params['read_only'] == true ?  'UserDepartamentGroupRead' : 'UserDepartamentGroup';\n\n        if ($params['edit_params']['groups']['edit_all'] == true) {\n\n            if (isset($_POST[$attr]) && count($_POST[$attr]) > 0) {\n                $globalDepartament = array_merge($_POST[$attr], $globalDepartament);\n            }\n\n        } elseif ($params['edit_params']['groups']['edit_personal'] == true) {\n\n            // Keep original departments present user can't edit in other user\n            if (isset($params['read_only']) && $params['read_only'] == true) {\n                $globalDepartament = $params['edit_params']['groups']['remote_id_read'];\n            } else {\n                $globalDepartament = $params['edit_params']['groups']['remote_id_write'];\n            }\n\n            if (isset($_POST[$attr]) && count($_POST[$attr]) > 0) {\n                foreach ($_POST[$attr] as $depId) {\n                    if (in_array($depId, $params['edit_params']['groups']['id'])) {\n                        $globalDepartament[] = $depId;\n                    }\n                }\n            }\n\n        } else {\n            if (isset($params['read_only']) && $params['read_only'] == true) {\n                $globalDepartament = $params['edit_params']['groups']['remote_id_read_all'];\n            } else {\n                $globalDepartament = $params['edit_params']['groups']['remote_id_write_all'];\n            }\n        }\n\n\t    return $globalDepartament;\n\t}\n\n    public static function generatePassword() {\n\n        $passwordData = (array)erLhcoreClassModelChatConfig::fetch('password_data')->data;\n\n        $charactersList = [\n            'uppercase_required' => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n            'lowercase_required' => 'abcdefghijklmnopqrstuvwxyz',\n            'number_required' => '0123456789',\n            'special_required' => '~!@#$%^&*()_+-,.<>/?;:\\'\"{}[]\\\\|=',\n        ];\n\n        $passwordParts = [];\n\n        foreach (['uppercase_required','number_required','special_required','lowercase_required'] as $parameter){\n            if (isset($passwordData[$parameter]) && $passwordData[$parameter] > 0) {\n                for ($i = 0; $i < $passwordData[$parameter]; $i++) {\n                    $passwordParts[] = substr($charactersList[$parameter], random_int(1, strlen($charactersList[$parameter])) - 1, 1);\n                }\n            }\n        }\n\n        $passwordRandomized = [];\n\n        while (!empty($passwordParts)) {\n            $passwordRandomized[] = implode('',array_splice($passwordParts,random_int(1, count($passwordParts)) - 1,1));\n        }\n\n        if (empty($passwordRandomized)) {\n            return erLhcoreClassModelForgotPassword::randomPassword(10);\n        }\n\n        return implode($passwordRandomized);\n    }\n\n\tpublic static function validatePassword(& $userData, & $Errors)\n    {\n        if ($userData->password_temp_1 != '') {\n\n            $length = mb_strlen($userData->password_temp_1);\n            $lowercase = preg_match_all('@[a-z]@', $userData->password_temp_1);\n            $uppercase = preg_match_all('@[A-Z]@', $userData->password_temp_1);\n            $number    = preg_match_all('@[0-9]@', $userData->password_temp_1);\n            $specialChars = preg_match_all('@[^\\w]@', $userData->password_temp_1);\n\n            $passwordData = (array)erLhcoreClassModelChatConfig::fetch('password_data')->data;\n\n            if (isset($passwordData['length']) && $passwordData['length'] > 0 && $passwordData['length'] > $length) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to be at least %d characters length'),$passwordData['length']);\n            }\n\n            if (isset($passwordData['uppercase_required']) && $passwordData['uppercase_required'] > 0 && $passwordData['uppercase_required'] > $uppercase) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to have at-least %d uppercase letter'),$passwordData['uppercase_required']);\n            }\n\n            if (isset($passwordData['number_required']) && $passwordData['number_required'] > 0 && $passwordData['number_required'] > $number) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to have at-least %d number(s)'),$passwordData['number_required']);\n            }\n\n            if (isset($passwordData['special_required']) && $passwordData['special_required'] > 1 && $passwordData['special_required'] > $specialChars) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to have at-least %d special character(s)'),$passwordData['special_required']);\n            }\n\n            if (isset($passwordData['lowercase_required']) && $passwordData['lowercase_required'] > 1 && $passwordData['lowercase_required'] > $lowercase) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to have at-least %d lowercase letters'),$passwordData['lowercase_required']);\n            }\n        }\n    }\n\n    public static function validatePasswordChange(& $userData, & $Errors)\n    {\n        $definition = array (\n            'OldPassword' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n            ),\n            'NewPassword' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n            ),\n            'NewPassword1' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n            )\n        );\n\n        $form = new ezcInputForm( INPUT_POST, $definition);\n\n        $Errors = array();\n\n        if ( $form->hasValidData( 'NewPassword' ) && $form->hasValidData( 'NewPassword1' ) ) {\n            $userData->password_temp_1 = $form->NewPassword;\n            $userData->password_temp_2 = $form->NewPassword1;\n        }\n\n        if (!$form->hasValidData( 'OldPassword' ) || !password_verify($form->OldPassword, $userData->password)) {\n            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Old password incorrect!');\n        }\n\n        if ( !$form->hasValidData( 'NewPassword' ) || !$form->hasValidData( 'NewPassword1' ) || $form->NewPassword == '' || $form->NewPassword1 == '' || $form->NewPassword != $form->NewPassword1) {\n            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Passwords mismatch!');\n        } else {\n            $userData->setPassword($form->NewPassword);\n            $userData->password_front = $form->NewPassword;\n        }\n\n        if ($form->hasValidData( 'NewPassword' ) && $form->hasValidData( 'OldPassword' ) && $form->OldPassword === $form->NewPassword) {\n            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Old and new password has to be different!');\n        }\n\n        self::validatePassword($userData, $Errors);\n\n        return $Errors;\n    }\n\n\tpublic static function validateAccount(& $userData) {\n\t\t\n\t\t$definition = array(\n\t\t\t'Password' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Password1' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Email' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'validate_email'\n\t\t\t),\n\t\t\t'Name' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n            'avatar' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Surname' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Username' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'JobTitle' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Skype' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\t\t \n\t\t\t'XMPPUsername' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'ChatNickname' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'UserTimeZone' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'UserInvisible' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'HideMyStatus' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n            ),\n\t\t\t'ReceivePermissionRequest' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t)\n\t\t);\n\t\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition );\n\t\t\n\t\t$Errors = array();\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_core_attributes') ) {\n            if (!$form->hasValidData('Username') || $form->Username == '') {\n                $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator', 'Please enter a username');\n            } else {\n                if ($form->Username != $userData->username) {\n                    $userData->username = $form->Username;\n                    if (erLhcoreClassModelUser::userExists($userData->username) === true) {\n                        $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator', 'User exists');\n                    }\n                }\n            }\n        }\n\n        if ( $form->hasValidData( 'HideMyStatus' ) && $form->HideMyStatus == true )\t{\n            $userData->hide_online = 1;\n        } else {\n            $userData->hide_online = 0;\n        }\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_core_attributes') ) {\n\n            if ( $form->hasValidData( 'Password' ) && $form->hasValidData( 'Password1' ) ) {\n                $userData->password_temp_1 = $form->Password;\n                $userData->password_temp_2 = $form->Password1;\n            }\n\n            if ( $form->hasInputField( 'Password' ) && (!$form->hasInputField( 'Password1' ) || $form->Password != $form->Password1 ) ) {\n                $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Passwords mismatch');\n            } else {\n                if ($form->hasInputField( 'Password' ) && $form->hasInputField( 'Password1' ) && $form->Password != '' && $form->Password1 != '') {\n                    $userData->setPassword($form->Password);\n                    $userData->password_front = $form->Password;\n                }\n            }\n            self::validatePassword($userData,$Errors);\n\n            if ( !$form->hasValidData( 'Email' ) ) {\n                $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Wrong email address');\n            } else {\n                $userData->email = $form->Email;\n            }\n        }\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_chat_nickname') ) {\n            if ( $form->hasValidData( 'ChatNickname' ) && $form->ChatNickname != '' ) {\n                $userData->chat_nickname = $form->ChatNickname;\n            } else {\n                $userData->chat_nickname = '';\n            }\n        }\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_name_surname') ) {\n            if (!$form->hasValidData('Name') || $form->Name == '') {\n                $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator', 'Please enter a name');\n            } else {\n                $userData->name = $form->Name;\n            }\n\n            if ($form->hasValidData('Surname') && $form->Surname != '') {\n                $userData->surname = $form->Surname;\n            } else {\n                $userData->surname = '';\n            }\n        }\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_job_title') ) {\n            if ( $form->hasValidData( 'JobTitle' ) && $form->JobTitle != '') {\n                $userData->job_title = $form->JobTitle;\n            } else {\n                $userData->job_title = '';\n            }\n        }\n\n\t\tif ( $form->hasValidData( 'avatar' )) {\n\t\t\t$userData->avatar = $form->avatar;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'UserTimeZone' ) && $form->UserTimeZone != '') {\n\t\t\t$userData->time_zone = $form->UserTimeZone;\n\t\t\tCSCacheAPC::getMem()->setSession('lhc_user_timezone', $userData->time_zone, true);\n\t\t} else {\n\t\t\tCSCacheAPC::getMem()->setSession('lhc_user_timezone', '', true);\n\t\t\t$userData->time_zone = '';\n\t\t}\n\t\t\n\t\tif ( erLhcoreClassUser::instance()->hasAccessTo('lhuser','changevisibility') ) {\n\t\t\tif ( $form->hasValidData( 'UserInvisible' ) && $form->UserInvisible == true ) {\n\t\t\t\t$userData->invisible_mode = 1;\n\t\t\t} else {\n\t\t\t\t$userData->invisible_mode = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( erLhcoreClassUser::instance()->hasAccessTo('lhuser','receivepermissionrequest') ) {\n\t\t\tif ( $form->hasValidData( 'ReceivePermissionRequest' ) && $form->ReceivePermissionRequest == true ) {\n\t\t\t\t$userData->rec_per_req = 1;\n\t\t\t} else {\n\t\t\t\t$userData->rec_per_req = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( erLhcoreClassUser::instance()->hasAccessTo('lhuser','changeskypenick') ) {\n\t\t\tif ( $form->hasValidData( 'Skype' ) && $form->Skype != '' ) {\n\t\t\t\t$userData->skype = $form->Skype;\n\t\t\t} else {\n\t\t\t\t$userData->skype = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'XMPPUsername' ) && $form->XMPPUsername != '') {\n\t\t\t$userData->xmpp_username = $form->XMPPUsername;\n\t\t} else {\n\t\t\t$userData->xmpp_username = '';\n\t\t}\n\t\t\n\t\t// new event for save additional account fields\n\t\terLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.account.update', array('userData' => & $userData, 'errors' => & $Errors));\n\t\t\n\t\treturn $Errors;\n\t\t\n\t}\n\n\tpublic static function validateUsersImport(& $settings)\n    {\n        $Errors = array();\n\n        $definition = array(\n            'CSVSeparator' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n            ),\n            'oneRecordImport' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n            ),\n            'skipFirstRow' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n            ),\n            'DefaultGroup' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'int',\n                null,\n                FILTER_REQUIRE_ARRAY\n            ),\n            'DepartmentGroup' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'int',\n                null,\n                FILTER_REQUIRE_ARRAY\n            ),\n            'DepartmentGroups' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'int',\n                null,\n                FILTER_REQUIRE_ARRAY\n            ),\n            'field' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'int',\n                null,\n                FILTER_REQUIRE_ARRAY\n            )\n        );\n\n        $form = new ezcInputForm( INPUT_POST, $definition );\n\n        if ( $form->hasValidData( 'CSVSeparator' )) {\n            $settings['csv_separator'] = $form->CSVSeparator;\n        } else {\n            $settings['csv_separator'] = ',';\n        }\n\n        if ( $form->hasValidData( 'DefaultGroup' )) {\n            $settings['user_groups_id'] = $form->DefaultGroup;\n        } else {\n            $settings['user_groups_id'] = array();\n        }\n\n        if ( $form->hasValidData( 'DepartmentGroup' )) {\n            $settings['dep_id'] = $form->DepartmentGroup;\n        } else {\n            $settings['dep_id'] = array();\n        }\n\n        if ( $form->hasValidData( 'DepartmentGroups' )) {\n            $settings['dep_group_id'] = $form->DepartmentGroups;\n        } else {\n            $settings['dep_group_id'] = array();\n        }\n\n        if ( $form->hasValidData( 'oneRecordImport' )) {\n            $settings['import_one'] = 1;\n        } else {\n            $settings['import_one'] = 0;\n        }\n\n        if ( $form->hasValidData( 'skipFirstRow' )) {\n            $settings['skip_first_row'] = 1;\n        } else {\n            $settings['skip_first_row'] = 0;\n        }\n\n        if ( $form->hasValidData( 'field' )) {\n            $settings['field'] = $form->field;\n        } else {\n            $settings['field'] = array();\n        }\n\n        return $Errors;\n    }\n\n    public static function importUsers($configuration, $users) {\n\n\t    $status = array('created' => 0, 'updated' => 0);\n\n        $Data = str_getcsv($users, \"\\n\"); //parse the rows\n\n        foreach($Data as $key => $Row) {\n\n            if ($key == 0 && $configuration['skip_first_row'] == true) {\n                continue;\n            }\n\n            $allDepartments = false;\n\n            $RowData = str_getcsv($Row, $configuration['csv_separator']);\n\n            if (isset($RowData[$configuration['field']['username']-1])) {\n                $username = $RowData[$configuration['field']['username'] - 1];\n            } else {\n                throw new Exception(erTranslationClassLhTranslation::getInstance()->getTranslation('user/import','Username field not found!'));\n            }\n\n            $user = erLhcoreClassModelUser::findOne(array('filter' => array('username' => $username)));\n\n            if (!($user instanceof erLhcoreClassModelUser)){\n                $user = new erLhcoreClassModelUser();\n                $status['created']++;\n            } else {\n                $status['updated']++;\n            }\n\n            $maxActiveChats = null;\n\n            foreach ($configuration['field'] as $attr => $index) {\n                if (is_numeric($index) && $index > 0 && isset($RowData[$configuration['field'][$attr]-1])) {\n                    if ($attr == 'password') {\n                        $user->setPassword($RowData[$index - 1]);\n                    } elseif ($attr == 'all_departments') {\n                        $allDepartments = $RowData[$index-1] == 1;\n                    } elseif ($attr == 'max_active_chats') {\n                        $user->max_active_chats = $maxActiveChats = (int)$RowData[$index-1];\n                    } elseif ($attr == 'show_all_pending') {\n                        $show_all_pending = $RowData[$index-1] == 1;\n                    } else {\n                        $user->{$attr} = $RowData[$index-1];\n                    }\n                }\n            }\n\n            $user->saveThis();\n\n            if (isset($show_all_pending)) {\n                erLhcoreClassModelUserSetting::setSetting('show_all_pending', (int)$show_all_pending, $user->id);\n            }\n\n            if (count($configuration['dep_id']) > 0) {\n\n                if ($allDepartments == 1) {\n                    $configuration['dep_id'][] = 0;\n                    $user->all_departments = 1;\n                } else {\n                    $user->all_departments = 0;\n                }\n\n                $user->departments_ids = implode(',',$configuration['dep_id']);\n                $user->saveThis();\n\n                erLhcoreClassUserDep::addUserDepartaments($configuration['dep_id'], $user->id, $user);\n            } else {\n                erLhcoreClassUserDep::addUserDepartaments(array(), $user->id, $user);\n            }\n\n            if (count($configuration['dep_group_id']) > 0) {\n                erLhcoreClassModelDepartamentGroupUser::addUserDepartmentGroups($user, $configuration['dep_group_id']);\n            }\n\n            if (isset($maxActiveChats)) {\n                // Update max active chats directly\n                $db = ezcDbInstance::get();\n                $stmt = $db->prepare('UPDATE lh_userdep SET max_chats = :max_chats WHERE user_id = :user_id');\n                $stmt->bindValue(':max_chats', $user->max_active_chats, PDO::PARAM_INT);\n                $stmt->bindValue(':user_id', $user->id, PDO::PARAM_INT);\n                $stmt->execute();\n            }\n\n            if (count($configuration['user_groups_id']) > 0) {\n                $user->user_groups_id = $configuration['user_groups_id'];\n                $user->setUserGroups();\n            }\n\n            erLhcoreClassUserDep::setHideOnlineStatus($user);\n\n            if ($configuration['import_one'] == true) {\n                break;\n            }\n\n        }\n\n        return $status;\n    }\n\n    public static function getDepartmentValidationParams($UserData, $selfEdit = false)\n    {\n        $departmentEditParams = [\n            'self_edit' => $selfEdit,\n            'all_departments' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','edit_all_departments'),\n            'individual' => [\n                'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual')\n            ],\n            'groups' => [\n                'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n            ]\n        ];\n\n        if ($departmentEditParams['individual']['edit_all'] == false) {\n            $departmentEditParams['individual']['id'] = array_merge(\n                erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                    erLhcoreClassUser::instance()->getUserID()\n                ),\n                erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                    erLhcoreClassUser::instance()->getUserID(),\n                    true\n                )\n            );\n\n            $departmentEditParams['individual']['remote_id_read_all'] = $departmentEditParams['individual']['remote_id_write_all'] = [];\n\n            if ($UserData->id > 0) {\n\n                $departmentEditParams['individual']['remote_id_write_all'] = erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                    $UserData->id\n                );\n\n                $departmentEditParams['individual']['remote_id_read_all'] = erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                    $UserData->id,\n                    true\n                );\n            }\n\n            // Departments to whom edited operator has access to\n            $departmentEditParams['individual']['remote_id_write'] = array_diff($departmentEditParams['individual']['remote_id_write_all'], $departmentEditParams['individual']['id']);\n\n            $departmentEditParams['individual']['remote_id_read'] = array_diff($departmentEditParams['individual']['remote_id_read_all'], $departmentEditParams['individual']['id']);\n\n        }\n\n        if ($departmentEditParams['groups']['edit_all'] == false) {\n            $departmentEditParams['groups']['id'] = array_merge(\n                erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                    erLhcoreClassUser::instance()->getUserID()\n                ),\n                erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                    erLhcoreClassUser::instance()->getUserID(),\n                    true\n                )\n            );\n\n            $departmentEditParams['groups']['remote_id_write_all'] = $departmentEditParams['groups']['remote_id_read_all'] = [];\n\n            if ($UserData->id > 0) {\n                $departmentEditParams['groups']['remote_id_write_all'] = erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                    $UserData->id\n                );\n\n                $departmentEditParams['groups']['remote_id_read_all'] = erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                    $UserData->id,\n                    true\n                );\n            }\n\n            // Departments to whom edited operator has access to\n            $departmentEditParams['groups']['remote_id_write'] = array_diff($departmentEditParams['groups']['remote_id_write_all'], $departmentEditParams['groups']['id']);\n\n            $departmentEditParams['groups']['remote_id_read'] = array_diff($departmentEditParams['groups']['remote_id_read_all'], $departmentEditParams['groups']['id']);\n        }\n\n        return $departmentEditParams;\n    }\n}\n\n?>"], "fixing_code": ["<h1 ng-non-bindable><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Edit user');?> - <?php echo htmlspecialchars($user->name_support)?></h1>\n\n<?php if (isset($errors)) : ?>\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/validation_error.tpl.php'));?>\n<?php endif; ?>\n\n<?php if (isset($updated)) : $msg = erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account updated'); ?>\n\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/alert_success.tpl.php'));?>\n<?php endif; ?>\n\n<ul class=\"nav nav-pills\" role=\"tablist\">\n\t<li class=\"nav-item\" role=\"presentation\"><a class=\"nav-link <?php if ($tab == '') : ?>active<?php endif;?>\" href=\"#account\" aria-controls=\"account\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account data');?></a></li>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false) && (\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n        )) : ?>\n\t<li class=\"nav-item\" role=\"presentation\"><a class=\"nav-link <?php if ($tab == 'tab_departments') : ?>active<?php endif;?>\" href=\"#departments\" aria-controls=\"departments\" role=\"tab\" data-toggle=\"tab\" ><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Assigned departments');?></a></li>\n    <?php endif;?>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n    <li class=\"nav-item\" role=\"presentation\"><a class=\"nav-link <?php if ($tab == 'tab_pending') : ?>active<?php endif;?>\" href=\"#pending\" aria-controls=\"pending\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Pending chats');?></a></li>\n    <?php endif;?>\n\n\t<?php if (erLhcoreClassUser::instance()->hasAccessTo('lhpermission','see_permissions_users')) : ?>\n\t<li class=\"nav-item\" role=\"presentation\"><a class=\"nav-link <?php if ($tab == 'tab_permission') : ?>active<?php endif;?>\" href=\"#permission\" aria-controls=\"permission\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Permissions');?></a></li>\n\t<?php endif;?>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n    <li class=\"nav-item\" role=\"presentation\" ><a class=\"nav-link <?php if ($tab == 'tab_speech') : ?>active<?php endif;?>\" href=\"#speech\" aria-controls=\"speech\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Speech');?></a></li>\n    <?php endif; ?>\n\n    <?php include(erLhcoreClassDesign::designtpl('lhuser/menu_tabs/custom_multiinclude_tab.tpl.php'));?>\n\n</ul>\n\n<div class=\"tab-content\" ng-controller=\"LHCAccountValidator as accval\">\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == '') : ?>active<?php endif;?>\" id=\"account\">\n\n\t   <?php include(erLhcoreClassDesign::designtpl('lhuser/account/above_account_edit_multiinclude.tpl.php'));?>\n\n\t   <div class=\"explain\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Do not enter a password unless you want to change it');?></div>\n\t   <br />\n\n\t   <form action=\"<?php echo erLhcoreClassDesign::baseurl('user/edit')?>/<?php echo $user->id?>#account\" method=\"post\" autocomplete=\"off\" enctype=\"multipart/form-data\">\n\n\t        <?php include(erLhcoreClassDesign::designtpl('lhuser/account/above_new_account_form_multiinclude.tpl.php'));?>\n\n\t        <div class=\"form-group\">\n    \t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Username');?>*</label>\n    \t\t  <input <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" type=\"text\" ng-non-bindable name=\"Username\" value=\"<?php echo htmlspecialchars($user->username);?>\" />\n    \t\t</div>\n\n    \t\t<div class=\"form-group\">\n        \t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Password');?></label>\n        \t\t<input ng-non-bindable autocomplete=\"new-password\" type=\"password\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Password\" value=\"<?php echo htmlspecialchars(isset($user->password_temp_1) ? $user->password_temp_1 : '');?>\" />\n    \t\t</div>\n\n    \t\t<div class=\"form-group\">\n        \t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Repeat the new password');?></label>\n        \t\t<input ng-non-bindable autocomplete=\"new-password\" type=\"password\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Password1\" value=\"<?php echo htmlspecialchars(isset($user->password_temp_2) ? $user->password_temp_2 : '');?>\" />\n    \t\t</div>\n\n           <div class=\"row\">\n               <div class=\"col-6\">\n                   <div class=\"form-group\">\n                       <label><input type=\"checkbox\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> value=\"on\" name=\"ForceResetPassword\" <?php echo isset($force_reset_password) && $force_reset_password == 1 ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Force user to change password on login')?></label>\n                   </div>\n               </div>\n               <div class=\"col-6\">\n                   <div class=\"form-group\">\n                       <label><input type=\"checkbox\" <?php if (isset($can_edit_groups) && $can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> value=\"on\" name=\"force_logout\" <?php echo $user->force_logout == 1 ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Force logout')?></label>\n                   </div>\n               </div>\n           </div>\n\n    \t\t<div class=\"form-group\">\n        \t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','E-mail');?></label>\n        \t\t<input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Email\" value=\"<?php echo $user->email;?>\"/>\n    \t\t</div>\n\n    \t\t<div class=\"form-group\">\n\t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Chat nickname');?></label>\n\t\t\t\t<input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"ChatNickname\" value=\"<?php echo htmlspecialchars($user->chat_nickname);?>\" />\n\t\t\t</div>\n\n    \t\t<div class=\"form-group\">\n    \t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Name');?></label>\n    \t\t  <input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Name\" value=\"<?php echo htmlspecialchars($user->name);?>\"/>\n    \t\t</div>\n\n    \t\t<div class=\"form-group\">\n    \t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Surname');?></label>\n    \t\t  <input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"Surname\" value=\"<?php echo htmlspecialchars($user->surname);?>\"/>\n    \t\t</div>\n\n    \t\t<div class=\"form-group\">\n    \t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Job title');?></label>\n    \t\t  <input type=\"text\" ng-non-bindable <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> class=\"form-control\" name=\"JobTitle\" value=\"<?php echo htmlspecialchars($user->job_title);?>\"/>\n    \t\t</div>\n\n    \t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/parts/time_zone.tpl.php'));?>\n\n    \t\t<div class=\"row\">\n\n    \t\t  <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/visibility_content.tpl.php'));?>\n\n    \t\t  <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/after_visibility_content.tpl.php'));?>\n\n              <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/hidability.tpl.php'));?>\n\n    \t\t  <div class=\"col-4\">\n        \t\t  <div class=\"form-group\">\n        \t\t      <label title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','User receives other operators permissions request');?>\"><input <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> type=\"checkbox\" value=\"on\" name=\"ReceivePermissionRequest\" <?php echo $user->rec_per_req == 1 ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','User receives other operators permissions request')?></label>\n        \t\t  </div>\n    \t\t  </div>\n    \t\t</div>\n\n    \t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/after_permission.tpl.php'));?>\n\n    \t\t<div class=\"row form-group\">\n    \t\t\t<div class=\"col-md-6\">\n    \t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Skype');?></label>\n    \t\t\t\t<input type=\"text\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> ng-non-bindable class=\"form-control\" name=\"Skype\" value=\"<?php echo htmlspecialchars($user->skype);?>\"/>\n    \t\t\t</div>\n    \t\t\t<div class=\"col-md-6\">\n    \t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','XMPP username');?></label>\n    \t\t\t\t<input type=\"text\" <?php if ($can_edit_groups === false) : ?>disabled=\"disabled\"<?php endif;?> ng-non-bindable class=\"form-control\" name=\"XMPPUsername\" value=\"<?php echo htmlspecialchars($user->xmpp_username);?>\"/>\n    \t\t\t</div>\n    \t\t</div>\n\n           <div class=\"row\">\n               <div class=\"col-6\">\n                   <?php if (!($can_edit_groups === false)) : ?>\n                       <div class=\"form-group\">\n                           <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Photo');?>, (jpg,png)</label>\n                           <input type=\"file\" name=\"UserPhoto\" value=\"\" />\n                       </div>\n                   <?php endif;?>\n                   <?php if ($user->has_photo) : ?>\n                       <div class=\"form-group\">\n                           <img src=\"<?php echo $user->photo_path?>\" alt=\"\" width=\"50\" /><br />\n                           <label><input type=\"checkbox\" name=\"DeletePhoto\" value=\"1\" /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Delete')?></label>\n                       </div>\n                   <?php endif;?>\n               </div>\n               <div class=\"col-6\">\n                   <?php $avatarOptions = ['avatar' => $user->avatar]; ?>\n                   <?php include(erLhcoreClassDesign::designtpl('lhuser/parts/avatar_build.tpl.php'));?>\n               </div>\n           </div>\n\n            <?php if ($can_edit_groups === true) : ?>\n\n            <?php $user_groups_filter['filter']['required'] = 0; if (erLhcoreClassModelGroup::getcount($user_groups_filter) > 0) : ?>\n            <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','User group')?></label>\n            <div class=\"row\">\n                <?php echo erLhcoreClassRenderHelper::renderCheckbox( array (\n                    'input_name'     => 'DefaultGroup[]',\n                    'selected_id'    => $user->user_groups_id,\n                    'multiple' \t\t => true,\n                    'css_class'      => 'form-control',\n                    'wrap_prepend'   => '<div class=\"col-3\">',\n                    'wrap_append'    => '</div>',\n                    'list_function'  => 'erLhcoreClassModelGroup::getList',\n                    'list_function_params'  => $user_groups_filter,\n                    'read_only_list' => $groups_read_only\n                )); ?>\n            </div>\n            <?php endif; ?>\n\n            <?php $user_groups_filter['filter']['required'] = 1; $groupsRequired = erLhcoreClassModelGroup::getList($user_groups_filter); if (!empty($groupsRequired)) : ?>\n                     <br/>\n                    <label ng-class=\"{'chat-closed' : !accval.validRequiredGroups}\"><i ng-if=\"!accval.validRequiredGroups\" class=\"material-icons chat-closed\">error</i><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Required groups, choose one or more')?>*</label>\n                    <div class=\"row\" ng-init='accval.requiredGroups = <?php $obj = new stdClass(); foreach ($user->user_groups_id as $userGroupId) {if (isset($groupsRequired[$userGroupId])) { $obj->{$userGroupId} = true; }}; echo json_encode($obj)?>;accval.validateGroups()'>\n                        <?php echo erLhcoreClassRenderHelper::renderCheckbox( array (\n                            'input_name'     => 'DefaultGroup[]',\n                            'selected_id'    => $user->user_groups_id,\n                            'multiple' \t\t => true,\n                            'css_class'      => 'form-control',\n                            'wrap_prepend'   => '<div class=\"col-3\">',\n                            'wrap_append'    => '</div>',\n                            'ng_change'      => 'accval.validateGroups()',\n                            'ng_model'      => 'accval.requiredGroups[$id]',\n                            'list_function'  => 'erLhcoreClassModelGroup::getList',\n                            'list_function_params'  => $user_groups_filter\n                        )); ?>\n                    </div>\n            <?php endif; ?>\n\n            <hr>\n    \t\t<label><input type=\"checkbox\" value=\"on\" name=\"UserDisabled\" <?php echo $user->disabled == 1 ? 'checked=\"checked\"' : '' ?> />&nbsp;<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Disabled')?></label><br>\n    \t\t<?php endif; ?>\n\n    \t\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\n    \t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/below_account_edit_multiinclude.tpl.php'));?>\n\n    \t\t<div class=\"btn-group\" role=\"group\" aria-label=\"...\" <?php if (empty($groupsRequired)) :?>ng-init=\"accval.validForm=true\"<?php endif?> >\n\n                <?php if (!($can_edit_groups === false)) : ?>\n                <input type=\"submit\" class=\"btn btn-secondary\" ng-disabled=\"!accval.validForm\" name=\"Save_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Save');?>\"/>\n    \t\t    <input type=\"submit\" class=\"btn btn-secondary\" ng-disabled=\"!accval.validForm\" name=\"Update_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Update');?>\"/>\n                <?php endif; ?>\n\n    \t\t    <input type=\"submit\" class=\"btn btn-secondary\" name=\"Cancel_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Cancel');?>\"/>\n        \t</div>\n\n\t   </form>\n\t</div>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false) && (\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual') ||\n            erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n        )) : ?>\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_departments') : ?>active<?php endif;?>\" id=\"departments\">\n\n\t\t<?php if (isset($account_updated_departaments) && $account_updated_departaments == 'done') : $msg = erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account updated'); ?>\n\t\t\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/alert_success.tpl.php'));?>\n\t\t<?php endif; ?>\n\n\t\t<?php\n\t\t  $userDepartaments = erLhcoreClassUserDep::getUserDepartamentsIndividual($user->id);\n\t\t  $userDepartamentsRead = erLhcoreClassUserDep::getUserDepartamentsIndividual($user->id, true);\n\t\t  $userDepartamentsGroup = erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds($user->id);\n\t\t  $userDepartamentsGroupRead = erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds($user->id, true);\n          $departmentEditParams = [\n                  'self_edit' => false,\n                  'all_departments' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','edit_all_departments'),\n                  'individual' => [\n                          'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                          'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                          'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual')\n                  ],\n                  'groups' => [\n                      'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                      'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                      'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n                  ]\n          ];\n\n          if ($departmentEditParams['individual']['edit_all'] == false) {\n              $departmentEditParams['individual']['id'] = array_merge(\n                      erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                              erLhcoreClassUser::instance()->getUserID()\n                      ),\n                      erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                              erLhcoreClassUser::instance()->getUserID(),\n                              true\n                      )\n              );\n          }\n\n          if ($departmentEditParams['groups']['edit_all'] == false) {\n              $departmentEditParams['groups']['id'] = array_merge(\n                      erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                              erLhcoreClassUser::instance()->getUserID()\n                      ),\n                      erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                              erLhcoreClassUser::instance()->getUserID(),\n                              true\n                      )\n              );\n          }\n\t\t?>\n\n\t\t<form action=\"<?php echo erLhcoreClassDesign::baseurl('user/edit')?>/<?php echo $user->id?>#departments\" method=\"post\" enctype=\"multipart/form-data\">\n\n\t\t    <?php include(erLhcoreClassDesign::designtpl('lhuser/account/departments_assignment.tpl.php'));?>\n\n\t\t    <input type=\"submit\" class=\"btn btn-secondary\" name=\"UpdateDepartaments_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/edit','Update');?>\"/>\n\t\t</form>\n    </div>\n    <?php endif; ?>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_pending') : ?>active<?php endif;?>\" id=\"pending\">\n\t   <form action=\"<?php echo erLhcoreClassDesign::baseurl('user/edit')?>/<?php echo $user->id?>#pending\" method=\"post\">\n\n\t  \t<?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\n        <div class=\"form-group\">\n\t\t    <label><input type=\"checkbox\" name=\"showAllPendingEnabled\" value=\"1\" <?php erLhcoreClassModelUserSetting::getSetting('show_all_pending',1, $user->id) == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','User can see all pending chats, not only assigned to him');?></label><br>\n        </div>\n\n        <div class=\"form-group\">\n           <label><input type=\"checkbox\" name=\"autoAccept\" value=\"1\" <?php $user->auto_accept == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Automatically accept assigned chats');?></label>\n        </div>\n\n        <div class=\"form-group\">\n           <label><input type=\"checkbox\" name=\"exclude_autoasign\" value=\"1\" <?php $user->exclude_autoasign == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Exclude from auto assign workflow');?></label>\n        </div>\n\n       <div class=\"form-group\">\n           <label><input type=\"checkbox\" name=\"auto_join_private\" value=\"1\" <?php erLhcoreClassModelUserSetting::getSetting('auto_join_private',1, $user->id) == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Auto join private chats');?></label>\n       </div>\n\n        <div class=\"form-group\">\n           <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Maximum active chats');?></label>\n           <input type=\"text\" ng-non-bindable class=\"form-control\" name=\"maximumChats\" value=\"<?php echo $user->max_active_chats?>\" />\n        </div>\n\n\t\t<input type=\"submit\" class=\"btn btn-secondary\" name=\"UpdatePending_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Update');?>\"/>\n\t   </form>\n    </div>\n    <?php endif; ?>\n\n    <?php if (erLhcoreClassUser::instance()->hasAccessTo('lhpermission','see_permissions_users')) : ?>\n    <div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_permission') : ?>active<?php endif;?>\" id=\"permission\">\n        <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','In order to change operator permissions you have to edit');?> <a href=\"<?php echo erLhcoreClassDesign::baseurl('permission/roles')?>\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','roles');?></a>.</p>\n\n        <input type=\"button\" class=\"btn btn-secondary\" name=\"UpdateSpeech_account\" onclick=\"lhinst.showMyPermissions('<?php echo $user->id?>')\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Show permissions');?>\" />\n\t\t<div id=\"permissions-summary\"></div>\n    </div>\n\t<?php endif;?>\n\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n    <div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_speech') : ?>active<?php endif;?>\" id=\"speech\">\n\n        <?php if (isset($account_updated) && $account_updated == 'done') : $msg = erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account updated'); ?>\n            <?php include(erLhcoreClassDesign::designtpl('lhkernel/alert_success.tpl.php'));?>\n        <?php endif; ?>\n\n        <form action=\"<?php echo erLhcoreClassDesign::baseurl('user/edit')?>/<?php echo $user->id?>\" method=\"post\">\n\n            <?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\n            <?php $dataSpeech = array(\n                'language' => (int)erLhcoreClassModelUserSetting::getSetting('speech_language','',$user->id),\n                'dialect' => (int)erLhcoreClassModelUserSetting::getSetting('speech_dialect','',$user->id),\n                'optional' => true,\n            ); ?>\n\n            <?php include(erLhcoreClassDesign::designtpl('lhspeech/speech_form_fields.tpl.php'));?>\n\n            <?php include(erLhcoreClassDesign::designtpl('lhspeech/my_languages.tpl.php'));?>\n\n            <input type=\"submit\" class=\"btn btn-secondary\" name=\"UpdateSpeech_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Update');?>\" />\n\n        </form>\n    </div>\n    <?php endif; ?>\n\n\t<?php include(erLhcoreClassDesign::designtpl('lhuser/menu_tabs_content/custom_multiinclude_tab.tpl.php'));?>\n\n</div>\n", "<h1><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','New user');?></h1>\n\n<?php include(erLhcoreClassDesign::designtpl('lhuser/pre_user_form.tpl.php'));?>\n\n<?php if (isset($errors)) : ?>\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/validation_error.tpl.php'));?>\n<?php endif; ?>\n\n<form action=\"<?php echo erLhcoreClassDesign::baseurl('user/new')?>\" method=\"post\" autocomplete=\"off\" enctype=\"multipart/form-data\">\n\n<ul class=\"nav nav-pills\" role=\"tablist\">\n\t<li role=\"presentation\" class=\"nav-item\"><a class=\"nav-link <?php if ($tab == '') : ?>active<?php endif;?>\" href=\"#account\" aria-controls=\"account\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Account data');?></a></li>\n\t<li role=\"presentation\" class=\"nav-item\"><a class=\"nav-link <?php if ($tab == 'tab_departments') : ?>active<?php endif;?>\" href=\"#departments\" aria-controls=\"departments\" role=\"tab\" data-toggle=\"tab\" ><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Assigned departments');?></a></li>\n\t<li role=\"presentation\" class=\"nav-item\"><a class=\"nav-link <?php if ($tab == 'tab_pending') : ?>active<?php endif;?>\" href=\"#pending\" aria-controls=\"pending\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Pending chats');?></a></li>\n\t<?php include(erLhcoreClassDesign::designtpl('lhuser/menu_tabs/custom_multiinclude_tab.tpl.php'));?>\n</ul>\n\n<div class=\"tab-content\" ng-controller=\"LHCAccountValidator as accval\">\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == '') : ?>active<?php endif;?>\" id=\"account\">\n\t    <?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\t\t\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/above_account_new_multiinclude.tpl.php'));?>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Username');?></label>\n\t\t  <input class=\"form-control\" type=\"text\" name=\"Username\" value=\"<?php echo htmlspecialchars($user->username);?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','E-mail');?></label>\n\t\t  <input type=\"text\" ng-non-bindable class=\"form-control\" name=\"Email\" value=\"<?php echo htmlspecialchars($user->email);?>\"/>\n\t\t</div>\n\t\t\t\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Password');?></label>\n\t\t  <input type=\"password\" ng-non-bindable class=\"form-control\" autocomplete=\"new-password\" name=\"Password\" value=\"<?php echo htmlspecialchars(isset($user->password_temp_1) ? $user->password_temp_1 : '');?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Repeat the new password');?></label>\n\t\t  <input type=\"password\" ng-non-bindable class=\"form-control\" autocomplete=\"new-password\" name=\"Password1\" value=\"<?php echo htmlspecialchars(isset($user->password_temp_2) ? $user->password_temp_2 : '');?>\" />\n\t\t</div>\n\n        <div class=\"form-group\">\n            <label><input type=\"checkbox\" value=\"on\" name=\"ForceResetPassword\" <?php echo isset($_POST['ForceResetPassword']) ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Force user to change password on login')?></label>\n        </div>\n\n\t\t<div class=\"form-group\">\n\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Chat nickname');?></label>\n\t\t\t<input type=\"text\" class=\"form-control\" ng-non-bindable name=\"ChatNickname\" value=\"<?php echo htmlspecialchars($user->chat_nickname);?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Name');?></label>\n\t\t  <input class=\"form-control\" ng-non-bindable type=\"text\" name=\"Name\" value=\"<?php echo htmlspecialchars($user->name);?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Surname');?></label>\n\t\t  <input class=\"form-control\" ng-non-bindable type=\"text\" name=\"Surname\" value=\"<?php echo htmlspecialchars($user->surname);?>\" />\n\t\t</div>\n\t\t\n\t\t<div class=\"form-group\">\n\t\t  <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Job title');?></label>\n\t\t  <input type=\"text\" ng-non-bindable class=\"form-control\" name=\"JobTitle\" value=\"<?php echo htmlspecialchars($user->job_title);?>\"/>\n\t\t</div>\n\t\t\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/parts/time_zone.tpl.php'));?>\n\t\t\n\t\t<div class=\"row\">\n\t\t  \n\t\t  <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/visibility_content.tpl.php'));?>\n    \t\t  \n          <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/after_visibility_content.tpl.php'));?>\n\n          <?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/hidability.tpl.php'));?>\n\n\t\t  <div class=\"col-4\">\n    \t\t  <div class=\"form-group\">\n    \t\t      <label title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','User receives other operators permissions request');?>\"><input type=\"checkbox\" value=\"on\" name=\"ReceivePermissionRequest\" <?php echo $user->rec_per_req == 1 ? 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','User receives other operators permissions request')?></label>\n    \t\t  </div>\n\t\t  </div>\n\t\t</div>\n\t\t\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/part/after_permission.tpl.php'));?>\n\t\t\n\t\t<div class=\"row form-group\">\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Skype');?></label>\n\t\t\t\t<input class=\"form-control\" ng-non-bindable maxlength=\"50\" type=\"text\" name=\"Skype\" value=\"<?php echo htmlspecialchars($user->skype);?>\"/>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','XMPP username');?></label>\n\t\t\t\t<input class=\"form-control\" ng-non-bindable type=\"text\" name=\"XMPPUsername\" value=\"<?php echo htmlspecialchars($user->xmpp_username);?>\"/>\n\t\t\t</div>\n\t\t</div>\n\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <div class=\"form-group\">\n                    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Photo');?>, (jpg,png)</label>\n                    <input type=\"file\" name=\"UserPhoto\" value=\"\" />\n                </div>\n            </div>\n            <div class=\"col-6\">\n                <?php $avatarOptions = ['avatar' => $user->avatar]; ?>\n                <?php include(erLhcoreClassDesign::designtpl('lhuser/parts/avatar_build.tpl.php'));?>\n            </div>\n        </div>\n\n        <?php $user_groups_filter['filter']['required'] = 0; if (erLhcoreClassModelGroup::getcount($user_groups_filter) > 0) : ?>\n            <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','User group')?></label>\n            <div class=\"row\">\n                <?php echo erLhcoreClassRenderHelper::renderCheckbox( array (\n                    'input_name'     => 'DefaultGroup[]',\n                    'selected_id'    => $user->user_groups_id,\n                    'multiple'       => true,\n                    'css_class'      => 'form-control',\n                    'wrap_prepend'   => '<div class=\"col-3\">',\n                    'wrap_append'    => '</div>',\n                    'list_function'  => 'erLhcoreClassModelGroup::getList',\n                    'list_function_params'  => $user_groups_filter,\n                    'read_only_list' => $groups_read_only\n                )); ?>\n            </div>\n        <?php endif; ?>\n\n        <?php $user_groups_filter['filter']['required'] = 1; $groupsRequired = erLhcoreClassModelGroup::getList($user_groups_filter); if (!empty($groupsRequired)) : ?>\n            <br/>\n            <label ng-class=\"{'chat-closed' : !accval.validRequiredGroups}\"><i ng-if=\"!accval.validRequiredGroups\" class=\"material-icons chat-closed\">error</i><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Required groups, choose one or more')?>*</label>\n            <div class=\"row\" ng-init='accval.requiredGroups = <?php $obj = new stdClass(); foreach ($user->user_groups_id as $userGroupId) {if (isset($groupsRequired[$userGroupId])) { $obj->{$userGroupId} = true; }}; echo json_encode($obj)?>;accval.validateGroups()'>\n                <?php echo erLhcoreClassRenderHelper::renderCheckbox( array (\n                    'input_name'     => 'DefaultGroup[]',\n                    'selected_id'    => $user->user_groups_id,\n                    'multiple' \t\t => true,\n                    'css_class'      => 'form-control',\n                    'wrap_prepend'   => '<div class=\"col-3\">',\n                    'wrap_append'    => '</div>',\n                    'ng_change'      => 'accval.validateGroups()',\n                    'ng_model'      => 'accval.requiredGroups[$id]',\n                    'list_function'  => 'erLhcoreClassModelGroup::getList',\n                    'list_function_params'  => $user_groups_filter\n                )); ?>\n            </div>\n        <?php endif; ?>\n        <hr>\n\t\t<label>&nbsp;<input type=\"checkbox\" value=\"on\" name=\"UserDisabled\" <?php echo $user->disabled == 1 ? 'checked=\"checked\"' : '' ?> />&nbsp;<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Disabled')?></label><br>\n\t\t\t\t\t\t\n\t\t<?php include(erLhcoreClassDesign::designtpl('lhuser/account/below_new_account_multiinclude.tpl.php'));?>\n\t\t\n\t\t<input <?php if (empty($groupsRequired)) :?>ng-init=\"accval.validForm=true\"<?php endif?> type=\"submit\" class=\"btn btn-secondary\" ng-disabled=\"!accval.validForm\" name=\"Update_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Save');?>\" />\n\t</div>\n\t\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_departments') : ?>active<?php endif;?>\" id=\"departments\">\n        <?php\n            $departmentEditParams = [\n                'self_edit' => false,\n                'edit_all_departments' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','edit_all_departments'),\n                'individual' => [\n                    'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                    'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                    'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual')\n                ],\n                'groups' => [\n                    'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                    'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                    'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n                ]\n            ];\n\n            if ($departmentEditParams['individual']['edit_all'] == false) {\n                $departmentEditParams['individual']['id'] = array_merge(\n                    erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                        erLhcoreClassUser::instance()->getUserID()\n                    ),\n                    erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                        erLhcoreClassUser::instance()->getUserID(),\n                        true\n                    )\n                );\n            }\n\n            if ($departmentEditParams['groups']['edit_all'] == false) {\n                $departmentEditParams['groups']['id'] = array_merge(\n                    erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                        erLhcoreClassUser::instance()->getUserID()\n                    ),\n                    erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                        erLhcoreClassUser::instance()->getUserID(),\n                        true\n                    )\n                );\n            }\n        ?>\n\t    <?php include(erLhcoreClassDesign::designtpl('lhuser/account/departments_assignment.tpl.php'));?>\n\t    \t\t\n\t\t<input type=\"submit\" class=\"btn btn-secondary\" name=\"Update_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Save');?>\" />\n\t</div>\n\t\n\t<div role=\"tabpanel\" class=\"tab-pane <?php if ($tab == 'tab_pending') : ?>active<?php endif;?>\" id=\"pending\">\n        <?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\n\t\t<label><input type=\"checkbox\" name=\"showAllPendingEnabled\" value=\"1\" <?php $show_all_pending == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','User can see all pending chats, not only assigned to him');?></label><br>\n\n        <div class=\"form-group\">\n            <label><input type=\"checkbox\" name=\"autoAccept\" value=\"1\" <?php $user->auto_accept == 1 ? print 'checked=\"checked\"' : '' ?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Automatically accept assigned chats');?></label>\n        </div>\n\n        <div class=\"form-group\">\n            <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Maximum active chats');?></label>\n            <input type=\"text\" class=\"form-control\" name=\"maximumChats\" value=\"<?php echo $user->max_active_chats?>\" />\n        </div>\n\n \t\t<input type=\"submit\" class=\"btn btn-secondary\" name=\"Update_account\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/new','Save');?>\" />\n\t</div>\n\t\n\t<?php include(erLhcoreClassDesign::designtpl('lhuser/menu_tabs_content/custom_multiinclude_tab.tpl.php'));?>\n\t\n</div>\n</form>\n\n", "<div class=\"row\" ng-non-bindable>\n    <?php if (!(isset($can_edit_groups) && $can_edit_groups === false)) : ?>\n    <div class=\"col-9\">\n        <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n        <span class=\"input-group-text action-image\" onclick=\"lhc.revealModal({'url':WWW_DIR_JAVASCRIPT+'user/avatarbuilder/'+$('#<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>id_avatar_string').val() + '?prefix=<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>'})\">\n            <span class=\"material-icons mr-0 btn-link\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Avatar builder');?>\">palette</span>\n        </span>\n            </div>\n            <input maxlength=\"100\" name=\"<?php isset($avatarOptions['field_name']) ? print $avatarOptions['field_name'] : print 'avatar'?>\" onkeyup=\"$('#<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>avatar_string_img').attr('src',WWW_DIR_JAVASCRIPT + 'widgetrestapi/avatar/' + $(this).val())\" id=\"<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>id_avatar_string\" type=\"text\" class=\"form-control\" value=\"<?php echo htmlspecialchars($avatarOptions['avatar'])?>\" placeholder=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Enter any string to generate an avatar');?>\"/>\n        </div>\n    </div>\n    <?php endif; ?>\n\n    <div class=\"col-3\">\n        <img width=\"70\" height=\"70\" id=\"<?php isset($avatarOptions['field_prefix']) ? print $avatarOptions['field_prefix'] : ''?>avatar_string_img\" src=\"<?php echo erLhcoreClassDesign::baseurl('widgetrestapi/avatar')?>/<?php echo htmlspecialchars($avatarOptions['avatar'])?>\" alt=\"\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('user/account','Click to set avatar');?>\" />\n    </div>\n</div>\n\n\n\n", "<?php\n\n/**\n * Class used for validator\n * */\n\nclass erLhcoreClassUserValidator {\n\t\n\tpublic static function validateUser(& $userData, $params = array()) {\n\t\t\n\t\t$definition = array (\n\t\t\t'Password' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Password1' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Email' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'validate_email'\n\t\t\t),\n\t\t\t'Name' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Surname' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'ChatNickname' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Username' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'UserDisabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'force_logout' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'HideMyStatus' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'UserInvisible' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\t\t\t\n\t\t\t'ReceivePermissionRequest' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'JobTitle' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n            'avatar' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'UserTimeZone' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'DefaultGroup' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'int',\n\t\t\t\tnull,\n\t\t\t\tFILTER_REQUIRE_ARRAY\n\t\t\t),\n\t\t\t'Skype' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'XMPPUsername' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t)\n\t\t);\n\t\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition);\n\t\t\n\t\t$Errors = array();\n\t\t\n\t\tif (isset($params['user_new']) && $params['user_new'] == true) {\n\t\t\t\n\t\t\tif ( !$form->hasValidData( 'Username' ) || $form->Username == '') {\n\t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Please enter a username');\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\t$userData->username = $form->Username;\n\t\t\t\t\n\t\t\t\tif(erLhcoreClassModelUser::userExists($userData->username) === true) {\n\t\t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','User exists');\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ( $form->hasValidData( 'Password' ) && $form->hasValidData( 'Password1' ) ) {\n    \t\t\t$userData->password_temp_1 = $form->Password;\n    \t\t\t$userData->password_temp_2 = $form->Password1;\n\t\t\t}\n\t\t\t\n\t\t\tif ( !$form->hasValidData( 'Password' ) || !$form->hasValidData( 'Password1' ) || $form->Password == '' || $form->Password1 == '' || $form->Password != $form->Password1) {\n\t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Passwords mismatch');\n\t\t\t} else {\n\t\t\t\t$userData->setPassword($form->Password);\n\t\t\t\t$userData->password_front = $form->Password;\n\t\t\t}\n\t\t\t\n\t\t} elseif ($params['user_edit'] && $params['user_edit'] == true) {\n\t\t\t\n\t\t    if ((isset($params['can_edit_groups']) && $params['can_edit_groups'] == true) || !isset($params['can_edit_groups'])) {\n    \t\t\tif ( !$form->hasValidData( 'Username' ) || $form->Username == '') {\n    \t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Please enter a username');\n    \t\t\t} else {\n    \t\t\t\t\n    \t\t\t\tif($form->Username != $userData->username) {\n    \t\t\t\t\t\n    \t\t\t\t\t$userData->username = $form->Username;\n    \t\t\t\t\t\n    \t\t\t\t\tif(erLhcoreClassModelUser::userExists($userData->username) === true) {\n    \t\t\t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','User exists');\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\t\n    \t\t\t\n    \t\t\tif ( $form->hasValidData( 'Password' ) && $form->hasValidData( 'Password1' ) ) {\n    \t\t\t    $userData->password_temp_1 = $form->Password;\n    \t\t\t    $userData->password_temp_2 = $form->Password1;\n    \t\t\t}\n    \t\t\t\n    \t\t\tif ( $form->hasInputField( 'Password' ) && (!$form->hasInputField( 'Password1' ) || $form->Password != $form->Password1 ) ) {\n    \t\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Passwords mismatch');\n    \t\t\t} else {\n    \t\t\t\t\n    \t\t\t\tif ($form->hasInputField( 'Password' ) && $form->hasInputField( 'Password1' ) && $form->Password != '' && $form->Password1 != '') {\n    \t\t\t\t\t$userData->setPassword($form->Password);\n    \t\t\t\t\t$userData->password_front = $form->Password;\n    \t\t\t\t}\n    \t\t\t\t\n    \t\t\t}\n\t\t    }\n\t\t    \n\t\t}  else {\n\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','User action type not set');\n\t\t}\n\n\t\tself::validatePassword($userData,$Errors);\n\n\t\tif ( $form->hasValidData( 'ChatNickname' ) && $form->ChatNickname != '' ) {\n\t\t    $userData->chat_nickname = $form->ChatNickname;\n\t\t} else {\n\t\t    $userData->chat_nickname = '';\n\t\t}\n\t\t\n\t\tif ( !$form->hasValidData( 'Email' ) ) {\n\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Wrong email address');\n\t\t} else {\n\t\t\t$userData->email = $form->Email;\n\t\t}\n\n\t\tif ($form->hasValidData( 'avatar' ) ) {\n            $userData->avatar = $form->avatar;\n\t\t}\n\t\t\n\t\tif ( !$form->hasValidData( 'Name' ) || $form->Name == '' ) {\n\t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Please enter a name');\n\t\t} else {\n\t\t\t$userData->name = $form->Name;\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'Surname' ) && $form->Surname != '') {\n\t\t\t$userData->surname = $form->Surname;\n\t\t} else {\n\t\t\t$userData->surname = '';\n\t\t}\n\t\t\t\t\n\t\tif ( $form->hasValidData( 'JobTitle' ) && $form->JobTitle != '') {\n\t\t\t$userData->job_title = $form->JobTitle;\n\t\t} else {\n\t\t\t$userData->job_title = '';\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'UserTimeZone' ) && $form->UserTimeZone != '') {\n\t\t\t$userData->time_zone = $form->UserTimeZone;\n\t\t} else {\n\t\t\t$userData->time_zone = '';\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'Skype' ) && $form->Skype != '') {\n\t\t\t$userData->skype = mb_substr($form->Skype,0,50);\n\t\t} else {\n\t\t\t$userData->skype = '';\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'XMPPUsername' ) && $form->XMPPUsername != '') {\n\t\t\t$userData->xmpp_username = $form->XMPPUsername;\n\t\t} else {\n\t\t\t$userData->xmpp_username = '';\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'HideMyStatus' ) && $form->HideMyStatus == true )\t{\n\t\t\t$userData->hide_online = 1;\n\t\t} else {\n\t\t\t$userData->hide_online = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'force_logout' ) && $form->force_logout == true )\t{\n\t\t\t$userData->force_logout = 1;\n\t\t} else {\n\t\t\t$userData->force_logout = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'UserInvisible' ) && $form->UserInvisible == true ) {\n\t\t\t$userData->invisible_mode = 1;\n\t\t} else {\n\t\t\t$userData->invisible_mode = 0;\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'ReceivePermissionRequest' ) && $form->ReceivePermissionRequest == true ) {\n\t\t\t$userData->rec_per_req = 1;\n\t\t} else {\n\t\t\t$userData->rec_per_req = 0;\n\t\t}\n\t\t\n\t\tif ((isset($params['can_edit_groups']) && $params['can_edit_groups'] == true) || !isset($params['can_edit_groups'])) {\n\n\t\t    if ( $form->hasValidData( 'UserDisabled' ) && $form->UserDisabled == true )\t{\n\t\t        $userData->disabled = 1;\n\t\t    } else {\n\t\t        $userData->disabled = 0;\n\t\t    }\n\t\t    \n    \t\tif ( $form->hasValidData( 'DefaultGroup' ) ) {\n\n    \t\t    if ($params['groups_can_edit'] === true) {\n    \t\t        $userData->user_groups_id = $form->DefaultGroup;\n\n    \t\t        $groupsRequired = erLhcoreClassModelGroup::getList(array('filter' => array('required' => 1)));\n\n    \t\t        if (!empty($groupsRequired)) {\n                        $diff = array_diff(array_keys($groupsRequired), $userData->user_groups_id);\n\n                        if (count($diff) == count($groupsRequired)) {\n                            $Errors['group_required'] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','You have to choose one of required groups!');\n                        }\n    \t\t        }\n\n    \t\t    } else {\n\n                    $groupsMustChecked = array_intersect($userData->user_groups_id,$params['groups_can_read']);\n\n    \t\t        $unknownGroups = array_diff($form->DefaultGroup, $params['groups_can_edit']);\n\n    \t\t        if (empty($unknownGroups)) {\n    \t\t            $userData->user_groups_id = $form->DefaultGroup;\n                        foreach ($groupsMustChecked as $groupAdd) {\n                            $userData->user_groups_id[] = $groupAdd;\n                        }\n\n    \t\t            if (!empty($params['groups_can_edit'])) {\n                            $groupsRequired = erLhcoreClassModelGroup::getList(array('filterin' => array('id' => $params['groups_can_edit']), 'filter' => array('required' => 1)));\n\n                            if (!empty($groupsRequired)) {\n                                $diff = array_diff(array_keys($groupsRequired), $userData->user_groups_id);\n    \n                                if (count($diff) == count($groupsRequired)) {\n                                    $Errors['group_required'] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','You have to choose one of required groups!');\n                                }\n                            }\n    \t\t            }\n\n    \t\t        } else {\n    \t\t            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','You are trying to assign group which are not known!');\n    \t\t        }\n    \t\t    }\n    \t\t    \n    \t\t} else {\n    \t\t\t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Please choose a default user group');\n    \t\t}\n\t\t}\n\t\t\n\t\treturn $Errors;\n\t\t\n\t}\t\n\t\n\tpublic static function validateDepartments(& $userData, $params = array()) {\n\t\n\t\t$globalDepartament = array();\n\n        if (!isset($params['all_departments']) || $params['all_departments'] == true)\n        {\n            if (isset($_POST['all_departments']) && $_POST['all_departments'] == 'on') {\n                $userData->all_departments = 1;\n                $globalDepartament[] = 0;\n            } else {\n                $userData->all_departments = 0;\n                if(isset($params['all_departments_0_global_value'])) {\n                    $globalDepartament[] = $params['all_departments_0_global_value'];\n                } else {\n                    $globalDepartament[] = -1;\n                }\n            }\n        } else {\n            $globalDepartament[] = $userData->all_departments == 1 ? 0 : -1;\n        }\n\n\t\tif ($params['edit_params']['individual']['edit_all'] == true) {\n            if (isset($_POST['UserDepartament']) && count($_POST['UserDepartament']) > 0) {\n                $globalDepartament = array_merge($_POST['UserDepartament'], $globalDepartament);\n            }\n\t\t} elseif ($params['edit_params']['individual']['edit_personal'] == true) {\n            // Append departments present operator can't control\n            $globalDepartament = array_merge($params['edit_params']['individual']['remote_id_write'], $globalDepartament);\n\n            if (isset($_POST['UserDepartament']) && count($_POST['UserDepartament']) > 0) {\n                foreach ($params['edit_params']['individual']['id'] as $depId) {\n                    if (in_array($depId, $_POST['UserDepartament'])){\n                        $globalDepartament[] = $depId;\n                    }\n                }\n            }\n\n        } else {\n            $globalDepartament = array_merge($params['edit_params']['individual']['remote_id_write_all'], $globalDepartament); // Keep previously selected departments\n        }\n\n        if ($params['edit_params']['individual']['edit_all'] == true) {\n            if (isset($_POST['UserDepartamentRead']) && count($_POST['UserDepartamentRead']) > 0) {\n                $globalDepartament = array_merge($_POST['UserDepartamentRead'], $globalDepartament);\n            }\n\t\t} elseif ($params['edit_params']['individual']['edit_personal'] == true) {\n            // Append departments present operator can't control\n            $globalDepartament = array_merge($params['edit_params']['individual']['remote_id_read'], $globalDepartament);\n\n            if (isset($_POST['UserDepartamentRead']) && count($_POST['UserDepartamentRead']) > 0) {\n                foreach ($params['edit_params']['individual']['id'] as $depId) {\n                    if (in_array($depId, $_POST['UserDepartamentRead'])){\n                        $globalDepartament[] = $depId;\n                    }\n                }\n            }\n\n        } else {\n            $globalDepartament = array_merge($params['edit_params']['individual']['remote_id_read_all'], $globalDepartament); // Keep previously selected departments\n        }\n\n        $globalDepartament = array_unique($globalDepartament);\n\n\t\t$userData->departments_ids = implode(',', $globalDepartament);\n\t\n\t\treturn $globalDepartament;\n\t\n\t}\n\t\n\tpublic static function validateShowAllPendingOption() {\n\t\n\t\t$definition = array(\n\t\t\t'showAllPendingEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'autoAccept' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'exclude_autoasign' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'auto_uppercase' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'auto_join_private' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'maximumChats' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'int'\n\t\t\t),\n\t\t);\n\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition );\n\n\t\t$result = array();\n\n\t\tif ( $form->hasValidData( 'showAllPendingEnabled' ) && $form->showAllPendingEnabled == true ) {\n            $result['show_all_pending'] = 1;\n\t\t} else {\n            $result['show_all_pending'] = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'auto_uppercase' ) && $form->auto_uppercase == true ) {\n            $result['auto_uppercase'] = 1;\n\t\t} else {\n            $result['auto_uppercase'] = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'autoAccept' ) && $form->autoAccept == true ) {\n            $result['auto_accept'] = 1;\n\t\t} else {\n            $result['auto_accept'] = 0;\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'auto_join_private' ) && $form->auto_join_private == true ) {\n            $result['auto_join_private'] = 1;\n\t\t} else {\n            $result['auto_join_private'] = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'exclude_autoasign' ) && $form->exclude_autoasign == true ) {\n            $result['exclude_autoasign'] = 1;\n\t\t} else {\n            $result['exclude_autoasign'] = 0;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'maximumChats' )) {\n            $result['max_chats'] = $form->maximumChats;\n\t\t} else {\n            $result['max_chats'] = 0;\n\t\t}\n\t\n\t\treturn $result;\n\t}\n\t\n\tpublic static function validateUserPhoto(& $userData, $params = array()) {\n\t\t\n\t\t$Errors = false;\n\t\t\n\t\tif ( isset($_FILES[\"UserPhoto\"]) && is_uploaded_file($_FILES[\"UserPhoto\"][\"tmp_name\"]) && $_FILES[\"UserPhoto\"][\"error\"] == 0 && erLhcoreClassImageConverter::isPhoto('UserPhoto') ) {\n\n\t\t\t$Errors = array();\n\t\t\t\n\t\t\t$dir = 'var/userphoto/' . date('Y') . 'y/' . date('m') . '/' . date('d') .'/' . $userData->id . '/';\n\t\t\t \n\t\t\terLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.edit.photo_path',array('dir' => & $dir,'storage_id' => $userData->id));\n\t\t\t \n\t\t\t$response = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.edit.photo_store', array('file_post_variable' => 'UserPhoto', 'dir' => & $dir, 'storage_id' => $userData->id));\n\t\t\n\t\t\t// There was no callbacks\n\t\t\tif ($response === false) {\n\t\t\t\terLhcoreClassFileUpload::mkdirRecursive( $dir );\n\t\t\t\t$file = qqFileUploader::upload($_FILES,'UserPhoto',$dir);\n\t\t\t} else {\n\t\t\t\t$file = $response['data'];\n\t\t\t}\n\n\t\t\tif ( !empty($file[\"errors\"]) ) {\n\t\t\t\t\n\t\t\t\tforeach ($file[\"errors\"] as $err) {\n\t\t\t\t\t$Errors[] = $err;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\n\t\t\t\t$userData->removeFile();\n\t\t\t\t$userData->filename\t= $file[\"data\"][\"filename\"];\n\t\t\t\t$userData->filepath\t= $file[\"data\"][\"dir\"];\n\t\t\t\n\t\t\t\t$response = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.edit.photo_resize_150', array('mime_type' => $file[\"data\"]['mime_type'],'user' => $userData));\n\t\t\t\n\t\t\t\tif ($response === false) {\n\t\t\t\t    if ($file[\"data\"]['mime_type'] != 'image/svg+xml') {\n                        erLhcoreClassImageConverter::getInstance()->converter->transform( 'photow_150', $userData->file_path_server, $userData->file_path_server );\n                    }\n\t\t\t\t\tchmod($userData->file_path_server, 0644);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\treturn $Errors;\n\t}\n\n\tpublic static function validateUserNew(& $userData, & $params = array()) {\n\n\t\t$params['user_new'] = true;\n\n\t\t$Errors = self::validateUser($userData, $params);\n\n\t\tif (isset($params['global_departament'])) {\n\t\t\t$params['global_departament'] = self::validateDepartments($userData, ['edit_params' => $params['edit_params']]);\n\t\t}\n\n\t\tif (isset($params['show_all_pending'])) {\n\t\t\t$paramsPending = self::validateShowAllPendingOption();\n            $params = array_merge($params,$paramsPending);\n\t\t}\n\n        $userData->auto_accept = $params['auto_accept'];\n        $userData->max_active_chats = $params['max_chats'];\n        $userData->pswd_updated = time();\n        \n\t\terLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.new_user', array('userData' => & $userData, 'errors' => & $Errors));\n\t\t\n\t\treturn $Errors;\n\t}\n\n\tpublic static function validateUserEdit(& $userData, & $params = array()) {\n\t\n\t\t$params['user_edit'] = true;\n\t\t\n\t\t$Errors = self::validateUser($userData, $params);\n\t\t\n\t\terLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.edit_user',array('userData' => & $userData, 'errors' => & $Errors));\n\t\t\n\t\treturn $Errors;\n\t\t\n\t}\n\t\n\tpublic static function validateSpeech() {\n\t\t\n\t\t$data = array();\n\t\t\n\t\t$definition = array(\n\t\t\t'select_language' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'int',array('min_range' => 1)\n\t\t\t),\n\t\t\t'select_dialect' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'string'\n\t\t\t),\n            'userLanguages' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'string',\n                null,\n                FILTER_REQUIRE_ARRAY\n            )\n\t\t);\n\t\t\t\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition );\n\t\t\n\t\t$Errors = array();\n\t\t\n\t\t$data['speech_language'] = ( $form->hasValidData( 'select_language' ) ) ? $form->select_language : ''; \n\t\t\n\t\t$data['speech_dialect'] = ( $form->hasValidData( 'select_dialect' ) && $form->hasValidData( 'select_dialect' ) != '0' ) ? $form->select_dialect : '';\n\n        $data['user_languages'] = ($form->hasValidData( 'userLanguages' ) && !empty($form->userLanguages)) ? $form->userLanguages : array();\n\n\t\treturn $data;\n\t}\n\t\n\tpublic static function validateVisibilityList() {\n\t\t\n\t\t$data = array();\n\t\t\n\t\t$definition = array(\n\t\t\t'pendingTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'activeTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'closedTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'unreadTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n\t\t\t'mychatsTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'botchatsTabEnabled' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t)\n\t\t);\n\t\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition );\n\t\t\n\t\t$Errors = array();\n\t\t\n\t\t$data['enable_pending_list'] = ( $form->hasValidData( 'pendingTabEnabled' ) && $form->pendingTabEnabled == true ) ? 1 : 0;\n\t\t\n\t\t$data['enable_active_list'] = ( $form->hasValidData( 'activeTabEnabled' ) && $form->activeTabEnabled == true ) ? 1 : 0;\n\t\t\t\t\n\t\t$data['enable_close_list'] = ( $form->hasValidData( 'closedTabEnabled' ) && $form->closedTabEnabled == true ) ? 1 : 0;\n\t\t\n\t\t$data['enable_unread_list'] = ( $form->hasValidData( 'unreadTabEnabled' ) && $form->unreadTabEnabled == true ) ? 1 : 0;\n\t\t\n\t\t$data['enable_mchats_list'] = ( $form->hasValidData( 'mychatsTabEnabled' ) && $form->mychatsTabEnabled == true ) ? 1 : 0;\n\n\t\t$data['enable_bot_list'] = ( $form->hasValidData( 'botchatsTabEnabled' ) && $form->botchatsTabEnabled == true ) ? 1 : 0;\n\n\t\treturn $data;\n\t}\n\t\n\tpublic static function validateNotifications() {\n\t    $data = array();\n\t    \n\t    $definition = array(\n\t        'show_alert_chat' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        ),\n\t        'sn_off' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        ),\n\t        'ownntfonly' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        ),\n\t        'trackactivity' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        ),\n\t        'trackactivitytimeout' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'int'\n\t        ),\n            'show_alert_transfer' => new ezcInputFormDefinitionElement(\n\t            ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t        )\n\t    );\n\t    \n\t    $form = new ezcInputForm( INPUT_POST, $definition );\n\t    \n\t    $Errors = array();\n\t    \n\t    $data['show_alert_chat'] = ( $form->hasValidData( 'show_alert_chat' ) && $form->show_alert_chat == true ) ? 1 : 0;\n\t    $data['sn_off'] = ( $form->hasValidData( 'sn_off' ) && $form->sn_off == true ) ? 1 : 0;\n\t    $data['ownntfonly'] = ( $form->hasValidData( 'ownntfonly' ) && $form->ownntfonly == true ) ? 1 : 0;\n\t    $data['trackactivity'] = ( $form->hasValidData( 'trackactivity' ) && $form->trackactivity == true ) ? 1 : 0;\n\t    $data['trackactivitytimeout'] = ( $form->hasValidData( 'trackactivitytimeout' )) ? (int)$form->trackactivitytimeout : -1;\n\t    $data['show_alert_transfer'] = ( $form->hasValidData( 'show_alert_transfer' ) && $form->show_alert_transfer == true) ? (int)$form->show_alert_transfer : 0;\n\n\t    return $data;\n\t}\n\t\n\tpublic static function validateDepartmentsGroup(& $userData, $params = array()) {\n\t\n\t    $globalDepartament = array();\n\n        $attr = isset($params['read_only']) && $params['read_only'] == true ?  'UserDepartamentGroupRead' : 'UserDepartamentGroup';\n\n        if ($params['edit_params']['groups']['edit_all'] == true) {\n\n            if (isset($_POST[$attr]) && count($_POST[$attr]) > 0) {\n                $globalDepartament = array_merge($_POST[$attr], $globalDepartament);\n            }\n\n        } elseif ($params['edit_params']['groups']['edit_personal'] == true) {\n\n            // Keep original departments present user can't edit in other user\n            if (isset($params['read_only']) && $params['read_only'] == true) {\n                $globalDepartament = $params['edit_params']['groups']['remote_id_read'];\n            } else {\n                $globalDepartament = $params['edit_params']['groups']['remote_id_write'];\n            }\n\n            if (isset($_POST[$attr]) && count($_POST[$attr]) > 0) {\n                foreach ($_POST[$attr] as $depId) {\n                    if (in_array($depId, $params['edit_params']['groups']['id'])) {\n                        $globalDepartament[] = $depId;\n                    }\n                }\n            }\n\n        } else {\n            if (isset($params['read_only']) && $params['read_only'] == true) {\n                $globalDepartament = $params['edit_params']['groups']['remote_id_read_all'];\n            } else {\n                $globalDepartament = $params['edit_params']['groups']['remote_id_write_all'];\n            }\n        }\n\n\t    return $globalDepartament;\n\t}\n\n    public static function generatePassword() {\n\n        $passwordData = (array)erLhcoreClassModelChatConfig::fetch('password_data')->data;\n\n        $charactersList = [\n            'uppercase_required' => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n            'lowercase_required' => 'abcdefghijklmnopqrstuvwxyz',\n            'number_required' => '0123456789',\n            'special_required' => '~!@#$%^&*()_+-,.<>/?;:\\'\"{}[]\\\\|=',\n        ];\n\n        $passwordParts = [];\n\n        foreach (['uppercase_required','number_required','special_required','lowercase_required'] as $parameter){\n            if (isset($passwordData[$parameter]) && $passwordData[$parameter] > 0) {\n                for ($i = 0; $i < $passwordData[$parameter]; $i++) {\n                    $passwordParts[] = substr($charactersList[$parameter], random_int(1, strlen($charactersList[$parameter])) - 1, 1);\n                }\n            }\n        }\n\n        $passwordRandomized = [];\n\n        while (!empty($passwordParts)) {\n            $passwordRandomized[] = implode('',array_splice($passwordParts,random_int(1, count($passwordParts)) - 1,1));\n        }\n\n        if (empty($passwordRandomized)) {\n            return erLhcoreClassModelForgotPassword::randomPassword(10);\n        }\n\n        return implode($passwordRandomized);\n    }\n\n\tpublic static function validatePassword(& $userData, & $Errors)\n    {\n        if ($userData->password_temp_1 != '') {\n\n            $length = mb_strlen($userData->password_temp_1);\n            $lowercase = preg_match_all('@[a-z]@', $userData->password_temp_1);\n            $uppercase = preg_match_all('@[A-Z]@', $userData->password_temp_1);\n            $number    = preg_match_all('@[0-9]@', $userData->password_temp_1);\n            $specialChars = preg_match_all('@[^\\w]@', $userData->password_temp_1);\n\n            $passwordData = (array)erLhcoreClassModelChatConfig::fetch('password_data')->data;\n\n            if (isset($passwordData['length']) && $passwordData['length'] > 0 && $passwordData['length'] > $length) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to be at least %d characters length'),$passwordData['length']);\n            }\n\n            if (isset($passwordData['uppercase_required']) && $passwordData['uppercase_required'] > 0 && $passwordData['uppercase_required'] > $uppercase) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to have at-least %d uppercase letter'),$passwordData['uppercase_required']);\n            }\n\n            if (isset($passwordData['number_required']) && $passwordData['number_required'] > 0 && $passwordData['number_required'] > $number) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to have at-least %d number(s)'),$passwordData['number_required']);\n            }\n\n            if (isset($passwordData['special_required']) && $passwordData['special_required'] > 1 && $passwordData['special_required'] > $specialChars) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to have at-least %d special character(s)'),$passwordData['special_required']);\n            }\n\n            if (isset($passwordData['lowercase_required']) && $passwordData['lowercase_required'] > 1 && $passwordData['lowercase_required'] > $lowercase) {\n                $Errors[] = sprintf(erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Password has to have at-least %d lowercase letters'),$passwordData['lowercase_required']);\n            }\n        }\n    }\n\n    public static function validatePasswordChange(& $userData, & $Errors)\n    {\n        $definition = array (\n            'OldPassword' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n            ),\n            'NewPassword' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n            ),\n            'NewPassword1' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n            )\n        );\n\n        $form = new ezcInputForm( INPUT_POST, $definition);\n\n        $Errors = array();\n\n        if ( $form->hasValidData( 'NewPassword' ) && $form->hasValidData( 'NewPassword1' ) ) {\n            $userData->password_temp_1 = $form->NewPassword;\n            $userData->password_temp_2 = $form->NewPassword1;\n        }\n\n        if (!$form->hasValidData( 'OldPassword' ) || !password_verify($form->OldPassword, $userData->password)) {\n            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Old password incorrect!');\n        }\n\n        if ( !$form->hasValidData( 'NewPassword' ) || !$form->hasValidData( 'NewPassword1' ) || $form->NewPassword == '' || $form->NewPassword1 == '' || $form->NewPassword != $form->NewPassword1) {\n            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Passwords mismatch!');\n        } else {\n            $userData->setPassword($form->NewPassword);\n            $userData->password_front = $form->NewPassword;\n        }\n\n        if ($form->hasValidData( 'NewPassword' ) && $form->hasValidData( 'OldPassword' ) && $form->OldPassword === $form->NewPassword) {\n            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Old and new password has to be different!');\n        }\n\n        self::validatePassword($userData, $Errors);\n\n        return $Errors;\n    }\n\n\tpublic static function validateAccount(& $userData) {\n\t\t\n\t\t$definition = array(\n\t\t\t'Password' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Password1' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Email' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'validate_email'\n\t\t\t),\n\t\t\t'Name' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n            'avatar' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Surname' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Username' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'JobTitle' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'Skype' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\t\t \n\t\t\t'XMPPUsername' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'ChatNickname' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'UserTimeZone' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t),\n\t\t\t'UserInvisible' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t),\n            'HideMyStatus' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n            ),\n\t\t\t'ReceivePermissionRequest' => new ezcInputFormDefinitionElement(\n\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n\t\t\t)\n\t\t);\n\t\t\n\t\t$form = new ezcInputForm( INPUT_POST, $definition );\n\t\t\n\t\t$Errors = array();\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_core_attributes') ) {\n            if (!$form->hasValidData('Username') || $form->Username == '') {\n                $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator', 'Please enter a username');\n            } else {\n                if ($form->Username != $userData->username) {\n                    $userData->username = $form->Username;\n                    if (erLhcoreClassModelUser::userExists($userData->username) === true) {\n                        $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator', 'User exists');\n                    }\n                }\n            }\n        }\n\n        if ( $form->hasValidData( 'HideMyStatus' ) && $form->HideMyStatus == true )\t{\n            $userData->hide_online = 1;\n        } else {\n            $userData->hide_online = 0;\n        }\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_core_attributes') ) {\n\n            if ( $form->hasValidData( 'Password' ) && $form->hasValidData( 'Password1' ) ) {\n                $userData->password_temp_1 = $form->Password;\n                $userData->password_temp_2 = $form->Password1;\n            }\n\n            if ( $form->hasInputField( 'Password' ) && (!$form->hasInputField( 'Password1' ) || $form->Password != $form->Password1 ) ) {\n                $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Passwords mismatch');\n            } else {\n                if ($form->hasInputField( 'Password' ) && $form->hasInputField( 'Password1' ) && $form->Password != '' && $form->Password1 != '') {\n                    $userData->setPassword($form->Password);\n                    $userData->password_front = $form->Password;\n                }\n            }\n            self::validatePassword($userData,$Errors);\n\n            if ( !$form->hasValidData( 'Email' ) ) {\n                $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator','Wrong email address');\n            } else {\n                $userData->email = $form->Email;\n            }\n        }\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_chat_nickname') ) {\n            if ( $form->hasValidData( 'ChatNickname' ) && $form->ChatNickname != '' ) {\n                $userData->chat_nickname = $form->ChatNickname;\n            } else {\n                $userData->chat_nickname = '';\n            }\n        }\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_name_surname') ) {\n            if (!$form->hasValidData('Name') || $form->Name == '') {\n                $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('user/validator', 'Please enter a name');\n            } else {\n                $userData->name = $form->Name;\n            }\n\n            if ($form->hasValidData('Surname') && $form->Surname != '') {\n                $userData->surname = $form->Surname;\n            } else {\n                $userData->surname = '';\n            }\n        }\n\n        if (erLhcoreClassUser::instance()->hasAccessTo('lhuser', 'change_job_title') ) {\n            if ( $form->hasValidData( 'JobTitle' ) && $form->JobTitle != '') {\n                $userData->job_title = $form->JobTitle;\n            } else {\n                $userData->job_title = '';\n            }\n        }\n\n\t\tif ( $form->hasValidData( 'avatar' )) {\n\t\t\t$userData->avatar = $form->avatar;\n\t\t}\n\n\t\tif ( $form->hasValidData( 'UserTimeZone' ) && $form->UserTimeZone != '') {\n\t\t\t$userData->time_zone = $form->UserTimeZone;\n\t\t\tCSCacheAPC::getMem()->setSession('lhc_user_timezone', $userData->time_zone, true);\n\t\t} else {\n\t\t\tCSCacheAPC::getMem()->setSession('lhc_user_timezone', '', true);\n\t\t\t$userData->time_zone = '';\n\t\t}\n\t\t\n\t\tif ( erLhcoreClassUser::instance()->hasAccessTo('lhuser','changevisibility') ) {\n\t\t\tif ( $form->hasValidData( 'UserInvisible' ) && $form->UserInvisible == true ) {\n\t\t\t\t$userData->invisible_mode = 1;\n\t\t\t} else {\n\t\t\t\t$userData->invisible_mode = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( erLhcoreClassUser::instance()->hasAccessTo('lhuser','receivepermissionrequest') ) {\n\t\t\tif ( $form->hasValidData( 'ReceivePermissionRequest' ) && $form->ReceivePermissionRequest == true ) {\n\t\t\t\t$userData->rec_per_req = 1;\n\t\t\t} else {\n\t\t\t\t$userData->rec_per_req = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( erLhcoreClassUser::instance()->hasAccessTo('lhuser','changeskypenick') ) {\n\t\t\tif ( $form->hasValidData( 'Skype' ) && $form->Skype != '' ) {\n\t\t\t\t$userData->skype = mb_substr($form->Skype,0,50);\n\t\t\t} else {\n\t\t\t\t$userData->skype = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( $form->hasValidData( 'XMPPUsername' ) && $form->XMPPUsername != '') {\n\t\t\t$userData->xmpp_username = $form->XMPPUsername;\n\t\t} else {\n\t\t\t$userData->xmpp_username = '';\n\t\t}\n\t\t\n\t\t// new event for save additional account fields\n\t\terLhcoreClassChatEventDispatcher::getInstance()->dispatch('user.account.update', array('userData' => & $userData, 'errors' => & $Errors));\n\t\t\n\t\treturn $Errors;\n\t\t\n\t}\n\n\tpublic static function validateUsersImport(& $settings)\n    {\n        $Errors = array();\n\n        $definition = array(\n            'CSVSeparator' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n            ),\n            'oneRecordImport' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n            ),\n            'skipFirstRow' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'boolean'\n            ),\n            'DefaultGroup' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'int',\n                null,\n                FILTER_REQUIRE_ARRAY\n            ),\n            'DepartmentGroup' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'int',\n                null,\n                FILTER_REQUIRE_ARRAY\n            ),\n            'DepartmentGroups' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'int',\n                null,\n                FILTER_REQUIRE_ARRAY\n            ),\n            'field' => new ezcInputFormDefinitionElement(\n                ezcInputFormDefinitionElement::OPTIONAL, 'int',\n                null,\n                FILTER_REQUIRE_ARRAY\n            )\n        );\n\n        $form = new ezcInputForm( INPUT_POST, $definition );\n\n        if ( $form->hasValidData( 'CSVSeparator' )) {\n            $settings['csv_separator'] = $form->CSVSeparator;\n        } else {\n            $settings['csv_separator'] = ',';\n        }\n\n        if ( $form->hasValidData( 'DefaultGroup' )) {\n            $settings['user_groups_id'] = $form->DefaultGroup;\n        } else {\n            $settings['user_groups_id'] = array();\n        }\n\n        if ( $form->hasValidData( 'DepartmentGroup' )) {\n            $settings['dep_id'] = $form->DepartmentGroup;\n        } else {\n            $settings['dep_id'] = array();\n        }\n\n        if ( $form->hasValidData( 'DepartmentGroups' )) {\n            $settings['dep_group_id'] = $form->DepartmentGroups;\n        } else {\n            $settings['dep_group_id'] = array();\n        }\n\n        if ( $form->hasValidData( 'oneRecordImport' )) {\n            $settings['import_one'] = 1;\n        } else {\n            $settings['import_one'] = 0;\n        }\n\n        if ( $form->hasValidData( 'skipFirstRow' )) {\n            $settings['skip_first_row'] = 1;\n        } else {\n            $settings['skip_first_row'] = 0;\n        }\n\n        if ( $form->hasValidData( 'field' )) {\n            $settings['field'] = $form->field;\n        } else {\n            $settings['field'] = array();\n        }\n\n        return $Errors;\n    }\n\n    public static function importUsers($configuration, $users) {\n\n\t    $status = array('created' => 0, 'updated' => 0);\n\n        $Data = str_getcsv($users, \"\\n\"); //parse the rows\n\n        foreach($Data as $key => $Row) {\n\n            if ($key == 0 && $configuration['skip_first_row'] == true) {\n                continue;\n            }\n\n            $allDepartments = false;\n\n            $RowData = str_getcsv($Row, $configuration['csv_separator']);\n\n            if (isset($RowData[$configuration['field']['username']-1])) {\n                $username = $RowData[$configuration['field']['username'] - 1];\n            } else {\n                throw new Exception(erTranslationClassLhTranslation::getInstance()->getTranslation('user/import','Username field not found!'));\n            }\n\n            $user = erLhcoreClassModelUser::findOne(array('filter' => array('username' => $username)));\n\n            if (!($user instanceof erLhcoreClassModelUser)){\n                $user = new erLhcoreClassModelUser();\n                $status['created']++;\n            } else {\n                $status['updated']++;\n            }\n\n            $maxActiveChats = null;\n\n            foreach ($configuration['field'] as $attr => $index) {\n                if (is_numeric($index) && $index > 0 && isset($RowData[$configuration['field'][$attr]-1])) {\n                    if ($attr == 'password') {\n                        $user->setPassword($RowData[$index - 1]);\n                    } elseif ($attr == 'all_departments') {\n                        $allDepartments = $RowData[$index-1] == 1;\n                    } elseif ($attr == 'max_active_chats') {\n                        $user->max_active_chats = $maxActiveChats = (int)$RowData[$index-1];\n                    } elseif ($attr == 'show_all_pending') {\n                        $show_all_pending = $RowData[$index-1] == 1;\n                    } else {\n                        $user->{$attr} = $RowData[$index-1];\n                    }\n                }\n            }\n\n            $user->saveThis();\n\n            if (isset($show_all_pending)) {\n                erLhcoreClassModelUserSetting::setSetting('show_all_pending', (int)$show_all_pending, $user->id);\n            }\n\n            if (count($configuration['dep_id']) > 0) {\n\n                if ($allDepartments == 1) {\n                    $configuration['dep_id'][] = 0;\n                    $user->all_departments = 1;\n                } else {\n                    $user->all_departments = 0;\n                }\n\n                $user->departments_ids = implode(',',$configuration['dep_id']);\n                $user->saveThis();\n\n                erLhcoreClassUserDep::addUserDepartaments($configuration['dep_id'], $user->id, $user);\n            } else {\n                erLhcoreClassUserDep::addUserDepartaments(array(), $user->id, $user);\n            }\n\n            if (count($configuration['dep_group_id']) > 0) {\n                erLhcoreClassModelDepartamentGroupUser::addUserDepartmentGroups($user, $configuration['dep_group_id']);\n            }\n\n            if (isset($maxActiveChats)) {\n                // Update max active chats directly\n                $db = ezcDbInstance::get();\n                $stmt = $db->prepare('UPDATE lh_userdep SET max_chats = :max_chats WHERE user_id = :user_id');\n                $stmt->bindValue(':max_chats', $user->max_active_chats, PDO::PARAM_INT);\n                $stmt->bindValue(':user_id', $user->id, PDO::PARAM_INT);\n                $stmt->execute();\n            }\n\n            if (count($configuration['user_groups_id']) > 0) {\n                $user->user_groups_id = $configuration['user_groups_id'];\n                $user->setUserGroups();\n            }\n\n            erLhcoreClassUserDep::setHideOnlineStatus($user);\n\n            if ($configuration['import_one'] == true) {\n                break;\n            }\n\n        }\n\n        return $status;\n    }\n\n    public static function getDepartmentValidationParams($UserData, $selfEdit = false)\n    {\n        $departmentEditParams = [\n            'self_edit' => $selfEdit,\n            'all_departments' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','edit_all_departments'),\n            'individual' => [\n                'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_individual'),\n                'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_individual')\n            ],\n            'groups' => [\n                'read_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','see_user_assigned_departments_groups') || erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                'edit_all' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_all_department_group'),\n                'edit_personal' => erLhcoreClassUser::instance()->hasAccessTo('lhuser','assign_to_own_department_group')\n            ]\n        ];\n\n        if ($departmentEditParams['individual']['edit_all'] == false) {\n            $departmentEditParams['individual']['id'] = array_merge(\n                erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                    erLhcoreClassUser::instance()->getUserID()\n                ),\n                erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                    erLhcoreClassUser::instance()->getUserID(),\n                    true\n                )\n            );\n\n            $departmentEditParams['individual']['remote_id_read_all'] = $departmentEditParams['individual']['remote_id_write_all'] = [];\n\n            if ($UserData->id > 0) {\n\n                $departmentEditParams['individual']['remote_id_write_all'] = erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                    $UserData->id\n                );\n\n                $departmentEditParams['individual']['remote_id_read_all'] = erLhcoreClassUserDep::getUserDepartamentsIndividual(\n                    $UserData->id,\n                    true\n                );\n            }\n\n            // Departments to whom edited operator has access to\n            $departmentEditParams['individual']['remote_id_write'] = array_diff($departmentEditParams['individual']['remote_id_write_all'], $departmentEditParams['individual']['id']);\n\n            $departmentEditParams['individual']['remote_id_read'] = array_diff($departmentEditParams['individual']['remote_id_read_all'], $departmentEditParams['individual']['id']);\n\n        }\n\n        if ($departmentEditParams['groups']['edit_all'] == false) {\n            $departmentEditParams['groups']['id'] = array_merge(\n                erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                    erLhcoreClassUser::instance()->getUserID()\n                ),\n                erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                    erLhcoreClassUser::instance()->getUserID(),\n                    true\n                )\n            );\n\n            $departmentEditParams['groups']['remote_id_write_all'] = $departmentEditParams['groups']['remote_id_read_all'] = [];\n\n            if ($UserData->id > 0) {\n                $departmentEditParams['groups']['remote_id_write_all'] = erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                    $UserData->id\n                );\n\n                $departmentEditParams['groups']['remote_id_read_all'] = erLhcoreClassModelDepartamentGroupUser::getUserGroupsIds(\n                    $UserData->id,\n                    true\n                );\n            }\n\n            // Departments to whom edited operator has access to\n            $departmentEditParams['groups']['remote_id_write'] = array_diff($departmentEditParams['groups']['remote_id_write_all'], $departmentEditParams['groups']['id']);\n\n            $departmentEditParams['groups']['remote_id_read'] = array_diff($departmentEditParams['groups']['remote_id_read_all'], $departmentEditParams['groups']['id']);\n        }\n\n        return $departmentEditParams;\n    }\n}\n\n?>"], "filenames": ["lhc_web/design/defaulttheme/tpl/lhuser/edit.tpl.php", "lhc_web/design/defaulttheme/tpl/lhuser/new.tpl.php", "lhc_web/design/defaulttheme/tpl/lhuser/parts/avatar_build.tpl.php", "lhc_web/lib/core/lhuser/lhuservalidator.php"], "buggy_code_start_loc": [50, 31, 1, 180], "buggy_code_end_loc": [354, 95, 2, 919], "fixing_code_start_loc": [50, 31, 1, 180], "fixing_code_end_loc": [354, 95, 2, 919], "type": "CWE-79", "message": "livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-4132", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-17T13:15:07.383", "lastModified": "2021-12-21T15:07:42.040", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "livehelperchat es vulnerable a una Neutralizaci\u00f3n Inapropiada de Entrada Durante la Generaci\u00f3n de la P\u00e1gina Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:livehelperchat:live_helper_chat:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.90", "matchCriteriaId": "5F68A743-8655-4AE7-9E50-75FF9F872F55"}]}]}], "references": [{"url": "https://github.com/livehelperchat/livehelperchat/commit/55b1e3bf62c564db7c919f5293ec1e755c2958d6", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/7eb80e7c-bb7a-478d-9760-0ea2fa9dc0c2", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/livehelperchat/livehelperchat/commit/55b1e3bf62c564db7c919f5293ec1e755c2958d6"}}