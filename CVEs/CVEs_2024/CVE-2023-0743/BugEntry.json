{"buggy_code": ["package middleware\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/answerdev/answer/internal/service/service_config\"\n\t\"github.com/answerdev/answer/internal/service/uploader\"\n\t\"github.com/answerdev/answer/pkg/converter\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/segmentfault/pacman/log\"\n)\n\ntype AvatarMiddleware struct {\n\tserviceConfig   *service_config.ServiceConfig\n\tuploaderService *uploader.UploaderService\n}\n\n// NewAvatarMiddleware new auth user middleware\nfunc NewAvatarMiddleware(serviceConfig *service_config.ServiceConfig,\n\tuploaderService *uploader.UploaderService,\n) *AvatarMiddleware {\n\treturn &AvatarMiddleware{\n\t\tserviceConfig:   serviceConfig,\n\t\tuploaderService: uploaderService,\n\t}\n}\n\nfunc (am *AvatarMiddleware) AvatarThumb() gin.HandlerFunc {\n\treturn func(ctx *gin.Context) {\n\t\tu := ctx.Request.RequestURI\n\t\tif strings.Contains(u, \"/uploads/avatar/\") {\n\t\t\tsizeStr := ctx.Query(\"s\")\n\t\t\tsize := converter.StringToInt(sizeStr)\n\t\t\tuUrl, err := url.Parse(u)\n\t\t\tif err != nil {\n\t\t\t\tctx.Next()\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, urlfileName := filepath.Split(uUrl.Path)\n\t\t\tuploadPath := am.serviceConfig.UploadPath\n\t\t\tfilePath := fmt.Sprintf(\"%s/avatar/%s\", uploadPath, urlfileName)\n\t\t\tvar avatarfile []byte\n\t\t\tif size == 0 {\n\t\t\t\tavatarfile, err = os.ReadFile(filePath)\n\t\t\t} else {\n\t\t\t\tavatarfile, err = am.uploaderService.AvatarThumbFile(ctx, uploadPath, urlfileName, size)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tctx.Next()\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, err = ctx.Writer.WriteString(string(avatarfile))\n\t\t\tif err != nil {\n\t\t\t\tlog.Error(err)\n\t\t\t}\n\t\t\tctx.Abort()\n\t\t\treturn\n\n\t\t}\n\t\tctx.Next()\n\t}\n}\n"], "fixing_code": ["package middleware\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/answerdev/answer/internal/service/service_config\"\n\t\"github.com/answerdev/answer/internal/service/uploader\"\n\t\"github.com/answerdev/answer/pkg/converter\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/segmentfault/pacman/log\"\n)\n\ntype AvatarMiddleware struct {\n\tserviceConfig   *service_config.ServiceConfig\n\tuploaderService *uploader.UploaderService\n}\n\n// NewAvatarMiddleware new auth user middleware\nfunc NewAvatarMiddleware(serviceConfig *service_config.ServiceConfig,\n\tuploaderService *uploader.UploaderService,\n) *AvatarMiddleware {\n\treturn &AvatarMiddleware{\n\t\tserviceConfig:   serviceConfig,\n\t\tuploaderService: uploaderService,\n\t}\n}\n\nfunc (am *AvatarMiddleware) AvatarThumb() gin.HandlerFunc {\n\treturn func(ctx *gin.Context) {\n\t\tu := ctx.Request.RequestURI\n\t\tif strings.Contains(u, \"/uploads/avatar/\") {\n\t\t\tsizeStr := ctx.Query(\"s\")\n\t\t\tsize := converter.StringToInt(sizeStr)\n\t\t\tuUrl, err := url.Parse(u)\n\t\t\tif err != nil {\n\t\t\t\tctx.Next()\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, urlfileName := filepath.Split(uUrl.Path)\n\t\t\tuploadPath := am.serviceConfig.UploadPath\n\t\t\tfilePath := fmt.Sprintf(\"%s/avatar/%s\", uploadPath, urlfileName)\n\t\t\tvar avatarfile []byte\n\t\t\tif size == 0 {\n\t\t\t\tavatarfile, err = os.ReadFile(filePath)\n\t\t\t} else {\n\t\t\t\tavatarfile, err = am.uploaderService.AvatarThumbFile(ctx, uploadPath, urlfileName, size)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tctx.Next()\n\t\t\t\treturn\n\t\t\t}\n\t\t\text := strings.ToLower(path.Ext(filePath)[1:])\n\t\t\tctx.Header(\"content-type\", fmt.Sprintf(\"image/%s\", ext))\n\t\t\t_, err = ctx.Writer.WriteString(string(avatarfile))\n\t\t\tif err != nil {\n\t\t\t\tlog.Error(err)\n\t\t\t}\n\t\t\tctx.Abort()\n\t\t\treturn\n\n\t\t} else {\n\t\t\tuUrl, err := url.Parse(u)\n\t\t\tif err != nil {\n\t\t\t\tctx.Next()\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, urlfileName := filepath.Split(uUrl.Path)\n\t\t\tuploadPath := am.serviceConfig.UploadPath\n\t\t\tfilePath := fmt.Sprintf(\"%s/%s\", uploadPath, urlfileName)\n\t\t\text := strings.ToLower(path.Ext(filePath)[1:])\n\t\t\tctx.Header(\"content-type\", fmt.Sprintf(\"image/%s\", ext))\n\t\t}\n\t\tctx.Next()\n\t}\n}\n"], "filenames": ["internal/base/middleware/avatar.go"], "buggy_code_start_loc": [6], "buggy_code_end_loc": [62], "fixing_code_start_loc": [7], "fixing_code_end_loc": [77], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository answerdev/answer prior to 1.0.4.", "other": {"cve": {"id": "CVE-2023-0743", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-08T08:15:08.453", "lastModified": "2023-02-16T19:05:24.053", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository answerdev/answer prior to 1.0.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.3}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:answer:answer:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.4", "matchCriteriaId": "6C25084E-B0C5-46D7-BDD3-E024EEB1E764"}]}]}], "references": [{"url": "https://github.com/answerdev/answer/commit/860b1a3bd8cfaa8827e6e6f50ab1d98fa4c2c816", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/366cf8bb-19f6-4388-b089-d0a260efd863", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/answerdev/answer/commit/860b1a3bd8cfaa8827e6e6f50ab1d98fa4c2c816"}}