{"buggy_code": ["# Changelog\n\nAll notable changes to _Shescape_ will be documented in this file.\n\nThe format is based on [Keep a Changelog], and this project adheres to [Semantic\nVersioning].\n\n## [Unreleased]\n\n- Correct documented behavior of quoting functions. ([#969])\n\n## [1.7.0] - 2023-06-12\n\n- Add flag protection option. ([#908])\n- Add `@since` information to API options. ([#909])\n- Add `options` to the API documentation. ([#936])\n\n## [1.6.7] - 2023-05-29\n\n- Provide injection strings for testing purposes. ([#902])\n- Update the package homepage. ([#827])\n\n## [1.6.6] - 2023-04-20\n\n- Add support for Node.js v20. ([#823])\n- Provide testing utilities. ([#710])\n- Update type exports to be compatible with the TypeScript compiler option\n  `\"moduleResolution\": \"bundler\"`. ([#761])\n\n## [1.6.5] - 2023-01-26\n\n- Add support for Node.js v19. ([#682])\n\n## [1.6.4] - 2023-01-22\n\n- Fix incorrect quoting of arguments with trailing `\\!` for C shell. ([#675])\n\n## [1.6.3] - 2023-01-21\n\n- Add support for C shell. ([#659])\n- Update documentation for readability. ([#630], [#652], [#666])\n\n## [1.6.2] - 2023-01-03\n\n- Add in-code example usage for each API function. ([#610])\n- Add whitespace preservation for Bash, Dash, and Zsh. ([#584])\n- Add whitespace preservation for PowerShell. ([#614])\n- Improve TypeScript type definitions. ([#567])\n- Improve JSDoc support for IDEs. ([#568])\n- Update API documentation. ([#612])\n\n## [1.6.1] - 2022-10-25\n\n- Fix potential polynomial backtracking in regular expression for Bash escaping\n  with `{interpolation:true}`. ([552e8ea])\n\n## [1.6.0] - 2022-10-15\n\n- Escape control characters `U+0008`, `U+000D`, `U+001B`, and `U+009B`. ([#456])\n- Improve escaping performance when interpolation is set to `true`. ([#457])\n- Improve newline substitution on Windows. ([#458], [#460])\n- Improve specificity of supported Node.js versions. ([#432], [#459])\n- Remove all side effects on import. ([#408])\n\n## [1.5.10] - 2022-08-21\n\n- Fix potential polynomial backtracking in regular expression for Bash escaping\n  with `{interpolation:true}`. ([#373])\n- Fix potential quadratic runtime regular expressions for Bash escaping with\n  `{interpolation:true}`. ([#373])\n\n## [1.5.9] - 2022-07-28\n\n- Fix escaping characters after `U+0085` with `{interpolation:true}` for\n  PowerShell on Windows systems. ([#354])\n- Improve performance of escaping for Dash. ([#336])\n- Include full documentation in published package. ([#350])\n\n## [1.5.8] - 2022-07-15\n\n- Fix escaping of line feed characters for Bash, Dash, and Zsh on Unix\n  systems. ([#332])\n- Fix escaping of line feed and carriage return characters for PowerShell and\n  CMD on Windows systems. ([#332])\n- Fix escaping of `~` and `{` for Bash on Unix systems with input strings\n  containing line terminating characters. ([#332])\n\n## [1.5.7] - 2022-07-06\n\n- Fix escaping of characters after whitespace with `{interpolation:true}` for\n  Bash, Dash, and Zsh on Unix systems. ([#324])\n- Fix escaping of characters after whitespace with `{interpolation:true}` for\n  Powershell on Windows systems. ([#322])\n\n## [1.5.6] - 2022-07-02\n\n- Fix unnecessary escaping of quotes with the `child_process` functions `fork`,\n  `spawn`, and `execFile`. ([#310])\n- Improve performance of escaping for Dash. ([#272])\n\n## [1.5.5] - 2022-06-05\n\n- Fix `The \"path\" argument must be of type string` error. ([#277])\n\n## [1.5.4] - 2022-03-07\n\n- Fix `Cannot find module 'path/win32'` error on Node.js <16.0.0. ([#199])\n- Improve detection of the Windows operating system. ([#192])\n\n## [1.5.3] - 2022-03-06\n\n- Fix documented type of `interpolation` option. ([#190])\n\n## [1.5.2] - 2022-02-23\n\n- Add escaping of brace expansion for non-Zsh shells when interpolation is\n  enabled. ([#178])\n- Explicitly import `process`. ([#173])\n\n## [1.5.1] - 2022-02-20\n\n- Fix default shell for Windows when `%COMSPEC%` is missing.\n- Fix escaping of `~` for certain input strings with `escape` and `escapeAll`\n  when `interpolation` is set to `true` in the options.\n- Improve error messaging for certain non-string arguments.\n\n## [1.5.0] - 2022-02-14\n\n- Follow symbolic links when determining the shell to escape for.\n\n## [1.4.0] - 2022-02-08\n\n- Add escaping for Unix interpolation characters to `escape`/`escapeAll`.\n- Add escaping for Zsh wildcard characters to `escape`/`escapeAll`.\n- Update TypeScript type definitions.\n- Update type information in the documentation.\n\n## [1.3.3] - 2022-01-15\n\n- Add official support for Dash (_Debian Almquist shell_).\n- Include offline documentation in package installation.\n\n## [1.3.2] - 2022-01-05\n\n- Fix escaping unicode double quotes (U+201C, U+201D, U+201) for PowerShell.\n- Update documentation to include officially supported shells.\n\n## [1.3.1] - 2021-12-06\n\n- Add default shell detection.\n\n## [1.3.0] - 2021-12-05\n\n- Add support to configure the shell to escape for.\n- Fix escaping backticks for PowerShell.\n- Fix escaping `$` for PowerShell.\n\n## [1.2.1] - 2021-04-24\n\n- Provide TypeScript type definitions.\n- Update documentation to use ECMAScript module in examples.\n\n## [1.2.0] - 2021-04-14\n\n- Provide native ECMAScript module source files.\n\n## [1.1.3] - 2021-03-13\n\n- Strip null characters from arguments.\n\n## [1.1.2] - 2021-01-07\n\n- Add in-source JSDoc documentation.\n\n## [1.1.1] - 2020-12-30\n\n- Improve error message when a value is not stringable.\n\n## [1.1.0] - 2020-12-22\n\n- Add `escapeAll` function to escape an array of arguments.\n- Recommend usage of `escapeAll` when using `fork`/`spawn`/`execFile`.\n\n## [1.0.0] - 2020-12-10\n\n- BREAKING CHANGE: Remove ability to call `shescape()` directly.\n- BREAKING CHANGE: Automatically convert input to array in `quoteAll()`.\n- Fix numbering in documentation's \"Install\" section.\n\n## [0.4.1] - 2020-12-09\n\n- Support non-string values as arguments.\n\n## [0.4.0] - 2020-12-08\n\n- Add `quoteAll` function to quote and escape an array of arguments.\n- Create website with full documentation (_no longer exists_).\n\n## [0.3.1] - 2020-12-07\n\n- Deprecate calling `shescape()` directly.\n\n## [0.3.0] - 2020-12-07\n\n- Add `escape` function to escape an argument (same as `shescape()`).\n- Add `quote` function to quote and escape an argument.\n\n## [0.2.1] - 2020-11-07\n\n- Fix missing released files.\n\n## [0.2.0] - 2020-11-07\n\n- Add support for escaping of double quotes on Windows.\n\n## [0.1.0] - 2020-11-06\n\n- Escape individual shell arguments.\n\n[#173]: https://github.com/ericcornelissen/shescape/pull/173\n[#178]: https://github.com/ericcornelissen/shescape/pull/178\n[#190]: https://github.com/ericcornelissen/shescape/pull/190\n[#192]: https://github.com/ericcornelissen/shescape/pull/192\n[#199]: https://github.com/ericcornelissen/shescape/pull/199\n[#272]: https://github.com/ericcornelissen/shescape/pull/272\n[#277]: https://github.com/ericcornelissen/shescape/pull/277\n[#310]: https://github.com/ericcornelissen/shescape/pull/310\n[#322]: https://github.com/ericcornelissen/shescape/pull/322\n[#324]: https://github.com/ericcornelissen/shescape/pull/324\n[#332]: https://github.com/ericcornelissen/shescape/pull/332\n[#336]: https://github.com/ericcornelissen/shescape/pull/336\n[#350]: https://github.com/ericcornelissen/shescape/pull/350\n[#354]: https://github.com/ericcornelissen/shescape/pull/354\n[#373]: https://github.com/ericcornelissen/shescape/pull/373\n[#408]: https://github.com/ericcornelissen/shescape/pull/408\n[#432]: https://github.com/ericcornelissen/shescape/pull/432\n[#456]: https://github.com/ericcornelissen/shescape/pull/456\n[#457]: https://github.com/ericcornelissen/shescape/pull/457\n[#458]: https://github.com/ericcornelissen/shescape/pull/458\n[#459]: https://github.com/ericcornelissen/shescape/pull/459\n[#460]: https://github.com/ericcornelissen/shescape/pull/460\n[#567]: https://github.com/ericcornelissen/shescape/pull/567\n[#568]: https://github.com/ericcornelissen/shescape/pull/568\n[#584]: https://github.com/ericcornelissen/shescape/pull/584\n[#610]: https://github.com/ericcornelissen/shescape/pull/610\n[#612]: https://github.com/ericcornelissen/shescape/pull/612\n[#614]: https://github.com/ericcornelissen/shescape/pull/614\n[#630]: https://github.com/ericcornelissen/shescape/pull/630\n[#652]: https://github.com/ericcornelissen/shescape/pull/652\n[#659]: https://github.com/ericcornelissen/shescape/pull/659\n[#666]: https://github.com/ericcornelissen/shescape/pull/666\n[#675]: https://github.com/ericcornelissen/shescape/pull/675\n[#682]: https://github.com/ericcornelissen/shescape/pull/682\n[#710]: https://github.com/ericcornelissen/shescape/pull/710\n[#761]: https://github.com/ericcornelissen/shescape/pull/761\n[#823]: https://github.com/ericcornelissen/shescape/pull/823\n[#827]: https://github.com/ericcornelissen/shescape/pull/827\n[#902]: https://github.com/ericcornelissen/shescape/pull/902\n[#908]: https://github.com/ericcornelissen/shescape/pull/908\n[#909]: https://github.com/ericcornelissen/shescape/pull/909\n[#936]: https://github.com/ericcornelissen/shescape/pull/936\n[#969]: https://github.com/ericcornelissen/shescape/pull/969\n[552e8ea]: https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9\n[keep a changelog]: https://keepachangelog.com/en/1.0.0/\n[semantic versioning]: https://semver.org/spec/v2.0.0.html\n", "/**\n * @overview Provides functionality for the Windows Command Prompt.\n * @license MPL-2.0\n */\n\n/**\n * Escape an argument for use in CMD when interpolation is active.\n *\n * @param {string} arg The argument to escape.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgForInterpolation(arg) {\n  return arg\n    .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")\n    .replace(/\\r?\\n|\\r/gu, \" \")\n    .replace(/\\^/gu, \"^^\")\n    .replace(/([\"&<>|])/gu, \"^$1\");\n}\n\n/**\n * Escape an argument for use in CMD when the argument is not being quoted (but\n * interpolation is inactive).\n *\n * @param {string} arg The argument to escape.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgForNoInterpolation(arg) {\n  return arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").replace(/\\r?\\n|\\r/gu, \" \");\n}\n\n/**\n * Returns a function to escape arguments for use in CMD for the given use case.\n *\n * @param {object} options The options for escaping arguments.\n * @param {boolean} options.interpolation Is interpolation enabled.\n * @returns {Function} A function to escape arguments.\n */\nexport function getEscapeFunction(options) {\n  if (options.interpolation) {\n    return escapeArgForInterpolation;\n  } else {\n    return escapeArgForNoInterpolation;\n  }\n}\n\n/**\n * Escape an argument for use in CMD when the argument is being quoted.\n *\n * @param {string} arg The argument to escape.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgForQuoted(arg) {\n  return arg\n    .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")\n    .replace(/\\r?\\n|\\r/gu, \" \")\n    .replace(/\"/gu, `\"\"`);\n}\n\n/**\n * Quotes an argument for use in CMD.\n *\n * @param {string} arg The argument to quote.\n * @returns {string} The quoted argument.\n */\nfunction quoteArg(arg) {\n  return `\"${arg}\"`;\n}\n\n/**\n * Returns a pair of functions to escape and quote arguments for use in CMD.\n *\n * @returns {Function[]} A function pair to escape & quote arguments.\n */\nexport function getQuoteFunction() {\n  return [escapeArgForQuoted, quoteArg];\n}\n\n/**\n * Remove any prefix from the provided argument that might be interpreted as a\n * flag on Windows systems for CMD.\n *\n * @param {string} arg The argument to update.\n * @returns {string} The updated argument.\n */\nfunction stripFlagPrefix(arg) {\n  return arg.replace(/^(?:-+|\\/+)/gu, \"\");\n}\n\n/**\n * Returns a function to protect against flag injection for CMD.\n *\n * @returns {Function} A function to protect against flag injection.\n */\nexport function getFlagProtectionFunction() {\n  return stripFlagPrefix;\n}\n", "/**\n * @overview Provides fixtures for testing Windows specific functionality.\n * @license MPL-2.0\n */\n\nimport { binCmd, binPowerShell } from \"../_constants.cjs\";\n\nexport const escape = {\n  [binCmd]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a\\u0085b\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a\\u00A0b\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a\\u2000b\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a\\u2001b\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a\\u2002b\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a\\u2003b\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a\\u2004b\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a\\u2005b\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a\\u2006b\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a\\u2007b\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a\\u2008b\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a\\u2009b\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a\\u200Ab\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a\\u2028b\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a\\u2029b\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a\\u202Fb\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a\\u205Fb\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a\\u3000b\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a\\uFEFFb\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: { interpolation: \"a'b\", noInterpolation: \"a'b\" },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a'b'c\",\n          noInterpolation: \"a'b'c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: {\n          interpolation: 'a^\"b',\n          noInterpolation: 'a\"b',\n        },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: {\n          interpolation: 'a^\"b^\"c',\n          noInterpolation: 'a\"b\"c',\n        },\n      },\n    ],\n    \"backticks ('`')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a`b\", noInterpolation: \"a`b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a`b`c\", noInterpolation: \"a`b`c\" },\n      },\n    ],\n    \"at signs ('@')\": [\n      {\n        input: \"@a\",\n        expected: { interpolation: \"@a\", noInterpolation: \"@a\" },\n      },\n      {\n        input: \"@a@b\",\n        expected: { interpolation: \"@a@b\", noInterpolation: \"@a@b\" },\n      },\n      {\n        input: \"a@b\",\n        expected: { interpolation: \"a@b\", noInterpolation: \"a@b\" },\n      },\n      {\n        input: \"a@b@c\",\n        expected: { interpolation: \"a@b@c\", noInterpolation: \"a@b@c\" },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n    ],\n    \"carets ('^')\": [\n      {\n        input: \"a^b\",\n        expected: { interpolation: \"a^^b\", noInterpolation: \"a^b\" },\n      },\n      {\n        input: \"a^b^c\",\n        expected: { interpolation: \"a^^b^^c\", noInterpolation: \"a^b^c\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a$b\", noInterpolation: \"a$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a$b$c\", noInterpolation: \"a$b$c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a^&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a^&b^&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"hyphens ('-')\": [\n      {\n        input: \"-a\",\n        expected: { interpolation: \"-a\", noInterpolation: \"-a\" },\n      },\n      {\n        input: \"-a-b\",\n        expected: { interpolation: \"-a-b\", noInterpolation: \"-a-b\" },\n      },\n      {\n        input: \"a-b\",\n        expected: { interpolation: \"a-b\", noInterpolation: \"a-b\" },\n      },\n      {\n        input: \"a-b-c\",\n        expected: { interpolation: \"a-b-c\", noInterpolation: \"a-b-c\" },\n      },\n    ],\n    \"colons (':')\": [\n      {\n        input: \"a:b\",\n        expected: { interpolation: \"a:b\", noInterpolation: \"a:b\" },\n      },\n      {\n        input: \"a:b:c\",\n        expected: { interpolation: \"a:b:c\", noInterpolation: \"a:b:c\" },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a;b;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a^|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a^|b^|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"comma (',')\": [\n      {\n        input: \"a,b\",\n        expected: { interpolation: \"a,b\", noInterpolation: \"a,b\" },\n      },\n      {\n        input: \"a,b,c\",\n        expected: { interpolation: \"a,b,c\", noInterpolation: \"a,b,c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a(b(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a)b)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a(b)c\", noInterpolation: \"a(b)c\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a]b]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a{b{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a}b}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a{b}c\", noInterpolation: \"a{b}c\" },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a^<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a^>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a^<b^<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a^>b^>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a^<b^>c\", noInterpolation: \"a<b>c\" },\n      },\n    ],\n    \"left double quotation mark ('\u201c')\": [\n      {\n        input: \"a\u201cb\",\n        expected: { interpolation: \"a\u201cb\", noInterpolation: \"a\u201cb\" },\n      },\n      {\n        input: \"a\u201cb\u201cc\",\n        expected: {\n          interpolation: \"a\u201cb\u201cc\",\n          noInterpolation: \"a\u201cb\u201cc\",\n        },\n      },\n    ],\n    \"right double quotation mark ('\u201d')\": [\n      {\n        input: \"a\u201db\",\n        expected: { interpolation: \"a\u201db\", noInterpolation: \"a\u201db\" },\n      },\n      {\n        input: \"a\u201db\u201dc\",\n        expected: {\n          interpolation: \"a\u201db\u201dc\",\n          noInterpolation: \"a\u201db\u201dc\",\n        },\n      },\n    ],\n    \"double low-9 quotation mark ('\u201e')\": [\n      {\n        input: \"a\u201eb\",\n        expected: { interpolation: \"a\u201eb\", noInterpolation: \"a\u201eb\" },\n      },\n      {\n        input: \"a\u201eb\u201ec\",\n        expected: {\n          interpolation: \"a\u201eb\u201ec\",\n          noInterpolation: \"a\u201eb\u201ec\",\n        },\n      },\n    ],\n    \"left single quotation mark ('\u2018')\": [\n      {\n        input: \"a\u2018b\",\n        expected: { interpolation: \"a\u2018b\", noInterpolation: \"a\u2018b\" },\n      },\n      {\n        input: \"a\u2018b\u2018c\",\n        expected: {\n          interpolation: \"a\u2018b\u2018c\",\n          noInterpolation: \"a\u2018b\u2018c\",\n        },\n      },\n    ],\n    \"right single quotation mark ('\u2019')\": [\n      {\n        input: \"a\u2019b\",\n        expected: { interpolation: \"a\u2019b\", noInterpolation: \"a\u2019b\" },\n      },\n      {\n        input: \"a\u2019b\u2019c\",\n        expected: {\n          interpolation: \"a\u2019b\u2019c\",\n          noInterpolation: \"a\u2019b\u2019c\",\n        },\n      },\n    ],\n    \"single low-9 quotation mark ('\u201a')\": [\n      {\n        input: \"a\u201ab\",\n        expected: { interpolation: \"a\u201ab\", noInterpolation: \"a\u201ab\" },\n      },\n      {\n        input: \"a\u201ab\u201ac\",\n        expected: {\n          interpolation: \"a\u201ab\u201ac\",\n          noInterpolation: \"a\u201ab\u201ac\",\n        },\n      },\n    ],\n    \"single high-reversed-9 quotation mark ('\u201b')\": [\n      {\n        input: \"a\u201bb\",\n        expected: { interpolation: \"a\u201bb\", noInterpolation: \"a\u201bb\" },\n      },\n      {\n        input: \"a\u201bb\u201bc\",\n        expected: {\n          interpolation: \"a\u201bb\u201bc\",\n          noInterpolation: \"a\u201bb\u201bc\",\n        },\n      },\n    ],\n  },\n  [binPowerShell]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a`\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a`\\tb`\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a`\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"`\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a` b\", noInterpolation: \"a\\nb\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a` b` c\", noInterpolation: \"a\\nb\\nc\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a` \", noInterpolation: \"a\\n\" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \"` a\", noInterpolation: \"\\na\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a`\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a`\\vb`\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a`\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"`\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a`\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a`\\fb`\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a`\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"`\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a` b\", noInterpolation: \"a\\r\\nb\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a` b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a` b` c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a` \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \"` a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a`\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a`\\u0085b`\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a`\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"`\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a`\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a`\\u00A0b`\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a`\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"`\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<ogham space mark> (\\\\u1680)\": [\n      {\n        input: \"a\\u1680b\",\n        expected: {\n          interpolation: \"a`\\u1680b\",\n          noInterpolation: \"a\\u1680b\",\n        },\n      },\n      {\n        input: \"a\\u1680b\\u1680c\",\n        expected: {\n          interpolation: \"a`\\u1680b`\\u1680c\",\n          noInterpolation: \"a\\u1680b\\u1680c\",\n        },\n      },\n      {\n        input: \"a\\u1680\",\n        expected: {\n          interpolation: \"a`\\u1680\",\n          noInterpolation: \"a\\u1680\",\n        },\n      },\n      {\n        input: \"\\u1680a\",\n        expected: {\n          interpolation: \"`\\u1680a\",\n          noInterpolation: \"\\u1680a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a`\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a`\\u2000b`\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a`\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"`\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a`\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a`\\u2001b`\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a`\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"`\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a`\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a`\\u2002b`\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a`\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"`\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a`\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a`\\u2003b`\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a`\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"`\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a`\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a`\\u2004b`\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a`\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"`\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a`\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a`\\u2005b`\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a`\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"`\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a`\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a`\\u2006b`\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a`\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"`\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a`\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a`\\u2007b`\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a`\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"`\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a`\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a`\\u2008b`\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a`\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"`\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a`\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a`\\u2009b`\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a`\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"`\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a`\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a`\\u200Ab`\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a`\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"`\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a`\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a`\\u2028b`\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a`\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"`\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a`\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a`\\u2029b`\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a`\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"`\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a`\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a`\\u202Fb`\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a`\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"`\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a`\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a`\\u205Fb`\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a`\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"`\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a`\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a`\\u3000b`\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a`\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"`\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a`\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a`\\uFEFFb`\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a`\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"`\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: { interpolation: \"a`'b\", noInterpolation: \"a'b\" },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a`'b`'c\",\n          noInterpolation: \"a'b'c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: {\n          interpolation: 'a`\"b',\n          noInterpolation: 'a\"b',\n        },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: {\n          interpolation: 'a`\"b`\"c',\n          noInterpolation: 'a\"b\"c',\n        },\n      },\n    ],\n    \"backticks ('`')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a``b\", noInterpolation: \"a``b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a``b``c\", noInterpolation: \"a``b``c\" },\n      },\n    ],\n    \"at signs ('@')\": [\n      {\n        input: \"@a\",\n        expected: { interpolation: \"`@a\", noInterpolation: \"@a\" },\n      },\n      {\n        input: \"@a@b\",\n        expected: { interpolation: \"`@a@b\", noInterpolation: \"@a@b\" },\n      },\n      {\n        input: \"a@b\",\n        expected: { interpolation: \"a@b\", noInterpolation: \"a@b\" },\n      },\n      {\n        input: \"a@b@c\",\n        expected: { interpolation: \"a@b@c\", noInterpolation: \"a@b@c\" },\n      },\n      {\n        input: \"a @b\",\n        expected: { interpolation: \"a` `@b\", noInterpolation: \"a @b\" },\n      },\n      {\n        input: \"a\\t@b\",\n        expected: { interpolation: \"a`\\t`@b\", noInterpolation: \"a\\t@b\" },\n      },\n      {\n        input: \"a\\u0085@b\",\n        expected: {\n          interpolation: \"a`\\u0085`@b\",\n          noInterpolation: \"a\\u0085@b\",\n        },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"`#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"`#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n      {\n        input: \"a #b\",\n        expected: { interpolation: \"a` `#b\", noInterpolation: \"a #b\" },\n      },\n      {\n        input: \"a\\t#b\",\n        expected: { interpolation: \"a`\\t`#b\", noInterpolation: \"a\\t#b\" },\n      },\n      {\n        input: \"a\\u0085#b\",\n        expected: {\n          interpolation: \"a`\\u0085`#b\",\n          noInterpolation: \"a\\u0085#b\",\n        },\n      },\n    ],\n    \"carets ('^')\": [\n      {\n        input: \"a^b\",\n        expected: { interpolation: \"a^b\", noInterpolation: \"a^b\" },\n      },\n      {\n        input: \"a^b^c\",\n        expected: { interpolation: \"a^b^c\", noInterpolation: \"a^b^c\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a`$b\", noInterpolation: \"a`$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a`$b`$c\", noInterpolation: \"a`$b`$c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a`&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a`&b`&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"hyphens ('-')\": [\n      {\n        input: \"-a\",\n        expected: { interpolation: \"`-a\", noInterpolation: \"-a\" },\n      },\n      {\n        input: \"-a-b\",\n        expected: { interpolation: \"`-a-b\", noInterpolation: \"-a-b\" },\n      },\n      {\n        input: \"a-b\",\n        expected: { interpolation: \"a-b\", noInterpolation: \"a-b\" },\n      },\n      {\n        input: \"a-b-c\",\n        expected: { interpolation: \"a-b-c\", noInterpolation: \"a-b-c\" },\n      },\n      {\n        input: \"a -b\",\n        expected: { interpolation: \"a` `-b\", noInterpolation: \"a -b\" },\n      },\n      {\n        input: \"a\\t-b\",\n        expected: { interpolation: \"a`\\t`-b\", noInterpolation: \"a\\t-b\" },\n      },\n      {\n        input: \"a\\u0085-b\",\n        expected: {\n          interpolation: \"a`\\u0085`-b\",\n          noInterpolation: \"a\\u0085-b\",\n        },\n      },\n    ],\n    \"colons (':')\": [\n      {\n        input: \":a\",\n        expected: { interpolation: \"`:a\", noInterpolation: \":a\" },\n      },\n      {\n        input: \"a:b\",\n        expected: { interpolation: \"a:b\", noInterpolation: \"a:b\" },\n      },\n      {\n        input: \"a:b:c\",\n        expected: { interpolation: \"a:b:c\", noInterpolation: \"a:b:c\" },\n      },\n      {\n        input: \"a :b\",\n        expected: { interpolation: \"a` `:b\", noInterpolation: \"a :b\" },\n      },\n      {\n        input: \"a\\t:b\",\n        expected: { interpolation: \"a`\\t`:b\", noInterpolation: \"a\\t:b\" },\n      },\n      {\n        input: \"a\\u0085:b\",\n        expected: {\n          interpolation: \"a`\\u0085`:b\",\n          noInterpolation: \"a\\u0085:b\",\n        },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a`;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a`;b`;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a`|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a`|b`|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"comma (',')\": [\n      {\n        input: \"a,b\",\n        expected: { interpolation: \"a`,b\", noInterpolation: \"a,b\" },\n      },\n      {\n        input: \"a,b,c\",\n        expected: { interpolation: \"a`,b`,c\", noInterpolation: \"a,b,c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a`(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a`)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a`(b`(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a`)b`)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a`(b`)c\", noInterpolation: \"a(b)c\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"[a\",\n        expected: { interpolation: \"[a\", noInterpolation: \"[a\" },\n      },\n      {\n        input: \"]a\",\n        expected: { interpolation: \"`]a\", noInterpolation: \"]a\" },\n      },\n      {\n        input: \"[a]\",\n        expected: { interpolation: \"[a]\", noInterpolation: \"[a]\" },\n      },\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a]b]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },\n      },\n      {\n        input: \"a [b\",\n        expected: { interpolation: \"a` [b\", noInterpolation: \"a [b\" },\n      },\n      {\n        input: \"a ]b\",\n        expected: { interpolation: \"a` `]b\", noInterpolation: \"a ]b\" },\n      },\n      {\n        input: \"a [b]\",\n        expected: { interpolation: \"a` [b]\", noInterpolation: \"a [b]\" },\n      },\n      {\n        input: \"a\\t[b\",\n        expected: { interpolation: \"a`\\t[b\", noInterpolation: \"a\\t[b\" },\n      },\n      {\n        input: \"a\\t]b\",\n        expected: { interpolation: \"a`\\t`]b\", noInterpolation: \"a\\t]b\" },\n      },\n      {\n        input: \"a\\t[b]\",\n        expected: { interpolation: \"a`\\t[b]\", noInterpolation: \"a\\t[b]\" },\n      },\n      {\n        input: \"a\\u0085[b\",\n        expected: { interpolation: \"a`\\u0085[b\", noInterpolation: \"a\\u0085[b\" },\n      },\n      {\n        input: \"a\\u0085]b\",\n        expected: {\n          interpolation: \"a`\\u0085`]b\",\n          noInterpolation: \"a\\u0085]b\",\n        },\n      },\n      {\n        input: \"a\\u0085[b]\",\n        expected: {\n          interpolation: \"a`\\u0085[b]\",\n          noInterpolation: \"a\\u0085[b]\",\n        },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a`{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a`}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a`{b`{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a`}b`}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a`{b`}c\", noInterpolation: \"a{b}c\" },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"<a\",\n        expected: { interpolation: \"`<a\", noInterpolation: \"<a\" },\n      },\n      {\n        input: \">a\",\n        expected: { interpolation: \"`>a\", noInterpolation: \">a\" },\n      },\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"1>a\",\n        expected: { interpolation: \"1`>a\", noInterpolation: \"1>a\" },\n      },\n      {\n        input: \"2>a\",\n        expected: { interpolation: \"2`>a\", noInterpolation: \"2>a\" },\n      },\n      {\n        input: \"3>a\",\n        expected: { interpolation: \"3`>a\", noInterpolation: \"3>a\" },\n      },\n      {\n        input: \"4>a\",\n        expected: { interpolation: \"4`>a\", noInterpolation: \"4>a\" },\n      },\n      {\n        input: \"5>a\",\n        expected: { interpolation: \"5`>a\", noInterpolation: \"5>a\" },\n      },\n      {\n        input: \"6>a\",\n        expected: { interpolation: \"6`>a\", noInterpolation: \"6>a\" },\n      },\n      {\n        input: \"*>a\",\n        expected: { interpolation: \"*`>a\", noInterpolation: \"*>a\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a<b<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a>b>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a<b>c\", noInterpolation: \"a<b>c\" },\n      },\n      {\n        input: \"a <b\",\n        expected: { interpolation: \"a` `<b\", noInterpolation: \"a <b\" },\n      },\n      {\n        input: \"a >b\",\n        expected: { interpolation: \"a` `>b\", noInterpolation: \"a >b\" },\n      },\n      {\n        input: \"a 1>b\",\n        expected: { interpolation: \"a` 1`>b\", noInterpolation: \"a 1>b\" },\n      },\n      {\n        input: \"a 2>b\",\n        expected: { interpolation: \"a` 2`>b\", noInterpolation: \"a 2>b\" },\n      },\n      {\n        input: \"a 3>b\",\n        expected: { interpolation: \"a` 3`>b\", noInterpolation: \"a 3>b\" },\n      },\n      {\n        input: \"a 4>b\",\n        expected: { interpolation: \"a` 4`>b\", noInterpolation: \"a 4>b\" },\n      },\n      {\n        input: \"a 5>b\",\n        expected: { interpolation: \"a` 5`>b\", noInterpolation: \"a 5>b\" },\n      },\n      {\n        input: \"a 6>b\",\n        expected: { interpolation: \"a` 6`>b\", noInterpolation: \"a 6>b\" },\n      },\n      {\n        input: \"a *>b\",\n        expected: { interpolation: \"a` *`>b\", noInterpolation: \"a *>b\" },\n      },\n      {\n        input: \"a\\t<b\",\n        expected: { interpolation: \"a`\\t`<b\", noInterpolation: \"a\\t<b\" },\n      },\n      {\n        input: \"a\\t>b\",\n        expected: { interpolation: \"a`\\t`>b\", noInterpolation: \"a\\t>b\" },\n      },\n      {\n        input: \"a\\t1>b\",\n        expected: { interpolation: \"a`\\t1`>b\", noInterpolation: \"a\\t1>b\" },\n      },\n      {\n        input: \"a\\t2>b\",\n        expected: { interpolation: \"a`\\t2`>b\", noInterpolation: \"a\\t2>b\" },\n      },\n      {\n        input: \"a\\t3>b\",\n        expected: { interpolation: \"a`\\t3`>b\", noInterpolation: \"a\\t3>b\" },\n      },\n      {\n        input: \"a\\t4>b\",\n        expected: { interpolation: \"a`\\t4`>b\", noInterpolation: \"a\\t4>b\" },\n      },\n      {\n        input: \"a\\t5>b\",\n        expected: { interpolation: \"a`\\t5`>b\", noInterpolation: \"a\\t5>b\" },\n      },\n      {\n        input: \"a\\t6>b\",\n        expected: { interpolation: \"a`\\t6`>b\", noInterpolation: \"a\\t6>b\" },\n      },\n      {\n        input: \"a\\t*>b\",\n        expected: { interpolation: \"a`\\t*`>b\", noInterpolation: \"a\\t*>b\" },\n      },\n      {\n        input: \"a\\u0085<b\",\n        expected: {\n          interpolation: \"a`\\u0085`<b\",\n          noInterpolation: \"a\\u0085<b\",\n        },\n      },\n      {\n        input: \"a\\u0085>b\",\n        expected: {\n          interpolation: \"a`\\u0085`>b\",\n          noInterpolation: \"a\\u0085>b\",\n        },\n      },\n      {\n        input: \"a\\u00851>b\",\n        expected: {\n          interpolation: \"a`\\u00851`>b\",\n          noInterpolation: \"a\\u00851>b\",\n        },\n      },\n      {\n        input: \"a\\u00852>b\",\n        expected: {\n          interpolation: \"a`\\u00852`>b\",\n          noInterpolation: \"a\\u00852>b\",\n        },\n      },\n      {\n        input: \"a\\u00853>b\",\n        expected: {\n          interpolation: \"a`\\u00853`>b\",\n          noInterpolation: \"a\\u00853>b\",\n        },\n      },\n      {\n        input: \"a\\u00854>b\",\n        expected: {\n          interpolation: \"a`\\u00854`>b\",\n          noInterpolation: \"a\\u00854>b\",\n        },\n      },\n      {\n        input: \"a\\u00855>b\",\n        expected: {\n          interpolation: \"a`\\u00855`>b\",\n          noInterpolation: \"a\\u00855>b\",\n        },\n      },\n      {\n        input: \"a\\u00856>b\",\n        expected: {\n          interpolation: \"a`\\u00856`>b\",\n          noInterpolation: \"a\\u00856>b\",\n        },\n      },\n      {\n        input: \"a\\u0085*>b\",\n        expected: {\n          interpolation: \"a`\\u0085*`>b\",\n          noInterpolation: \"a\\u0085*>b\",\n        },\n      },\n    ],\n    \"left double quotation mark ('\u201c')\": [\n      {\n        input: \"a\u201cb\",\n        expected: {\n          interpolation: \"a`\u201cb\",\n          noInterpolation: \"a\u201cb\",\n        },\n      },\n      {\n        input: \"a\u201cb\u201cc\",\n        expected: {\n          interpolation: \"a`\u201cb`\u201cc\",\n          noInterpolation: \"a\u201cb\u201cc\",\n        },\n      },\n    ],\n    \"right double quotation mark ('\u201d')\": [\n      {\n        input: \"a\u201db\",\n        expected: {\n          interpolation: \"a`\u201db\",\n          noInterpolation: \"a\u201db\",\n        },\n      },\n      {\n        input: \"a\u201db\u201dc\",\n        expected: {\n          interpolation: \"a`\u201db`\u201dc\",\n          noInterpolation: \"a\u201db\u201dc\",\n        },\n      },\n    ],\n    \"double low-9 quotation mark ('\u201e')\": [\n      {\n        input: \"a\u201eb\",\n        expected: {\n          interpolation: \"a`\u201eb\",\n          noInterpolation: \"a\u201eb\",\n        },\n      },\n      {\n        input: \"a\u201eb\u201ec\",\n        expected: {\n          interpolation: \"a`\u201eb`\u201ec\",\n          noInterpolation: \"a\u201eb\u201ec\",\n        },\n      },\n    ],\n    \"left single quotation mark ('\u2018')\": [\n      {\n        input: \"a\u2018b\",\n        expected: { interpolation: \"a`\u2018b\", noInterpolation: \"a\u2018b\" },\n      },\n      {\n        input: \"a\u2018b\u2018c\",\n        expected: {\n          interpolation: \"a`\u2018b`\u2018c\",\n          noInterpolation: \"a\u2018b\u2018c\",\n        },\n      },\n    ],\n    \"right single quotation mark ('\u2019')\": [\n      {\n        input: \"a\u2019b\",\n        expected: { interpolation: \"a`\u2019b\", noInterpolation: \"a\u2019b\" },\n      },\n      {\n        input: \"a\u2019b\u2019c\",\n        expected: {\n          interpolation: \"a`\u2019b`\u2019c\",\n          noInterpolation: \"a\u2019b\u2019c\",\n        },\n      },\n    ],\n    \"single low-9 quotation mark ('\u201a')\": [\n      {\n        input: \"a\u201ab\",\n        expected: { interpolation: \"a`\u201ab\", noInterpolation: \"a\u201ab\" },\n      },\n      {\n        input: \"a\u201ab\u201ac\",\n        expected: {\n          interpolation: \"a`\u201ab`\u201ac\",\n          noInterpolation: \"a\u201ab\u201ac\",\n        },\n      },\n    ],\n    \"single high-reversed-9 quotation mark ('\u201b')\": [\n      {\n        input: \"a\u201bb\",\n        expected: { interpolation: \"a`\u201bb\", noInterpolation: \"a\u201bb\" },\n      },\n      {\n        input: \"a\u201bb\u201bc\",\n        expected: {\n          interpolation: \"a`\u201bb`\u201bc\",\n          noInterpolation: \"a\u201bb\u201bc\",\n        },\n      },\n    ],\n  },\n};\n\nexport const flag = {\n  [binCmd]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { unquoted: \"foobar\", quoted: '\"foobar\"' },\n      },\n    ],\n    \"single hyphen (-)\": [\n      {\n        input: \"-a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a-\",\n        expected: { unquoted: \"a-\", quoted: '\"a-\"' },\n      },\n      {\n        input: \"-a-\",\n        expected: { unquoted: \"a-\", quoted: '\"a-\"' },\n      },\n      {\n        input: \"-ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a-b\",\n        expected: { unquoted: \"a-b\", quoted: '\"a-b\"' },\n      },\n      {\n        input: \"-a-b\",\n        expected: { unquoted: \"a-b\", quoted: '\"a-b\"' },\n      },\n      {\n        input: \"-a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"double hyphen (--)\": [\n      {\n        input: \"--a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a--\",\n        expected: { unquoted: \"a--\", quoted: '\"a--\"' },\n      },\n      {\n        input: \"--a--\",\n        expected: { unquoted: \"a--\", quoted: '\"a--\"' },\n      },\n      {\n        input: \"--ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a--b\",\n        expected: { unquoted: \"a--b\", quoted: '\"a--b\"' },\n      },\n      {\n        input: \"--a--b\",\n        expected: { unquoted: \"a--b\", quoted: '\"a--b\"' },\n      },\n      {\n        input: \"--a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"many hyphens (/-{3,}/)\": [\n      {\n        input: \"---a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"---ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"---a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"forward slash (/)\": [\n      {\n        input: \"/a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a/\",\n        expected: { unquoted: \"a/\", quoted: '\"a/\"' },\n      },\n      {\n        input: \"/a/\",\n        expected: { unquoted: \"a/\", quoted: '\"a/\"' },\n      },\n      {\n        input: \"/ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a/b\",\n        expected: { unquoted: \"a/b\", quoted: '\"a/b\"' },\n      },\n      {\n        input: \"/a/b\",\n        expected: { unquoted: \"a/b\", quoted: '\"a/b\"' },\n      },\n    ],\n    \"multiple forward slashes (//{2,}/)\": [\n      {\n        input: \"//a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a//\",\n        expected: { unquoted: \"a//\", quoted: '\"a//\"' },\n      },\n      {\n        input: \"//a//\",\n        expected: { unquoted: \"a//\", quoted: '\"a//\"' },\n      },\n      {\n        input: \"//ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a//b\",\n        expected: { unquoted: \"a//b\", quoted: '\"a//b\"' },\n      },\n      {\n        input: \"//a//b\",\n        expected: { unquoted: \"a//b\", quoted: '\"a//b\"' },\n      },\n    ],\n  },\n  [binPowerShell]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { unquoted: \"foobar\", quoted: '\"foobar\"' },\n      },\n    ],\n    \"single hyphen (-)\": [\n      {\n        input: \"-a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a-\",\n        expected: { unquoted: \"a-\", quoted: '\"a-\"' },\n      },\n      {\n        input: \"-a-\",\n        expected: { unquoted: \"a-\", quoted: '\"a-\"' },\n      },\n      {\n        input: \"-ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a-b\",\n        expected: { unquoted: \"a-b\", quoted: '\"a-b\"' },\n      },\n      {\n        input: \"-a-b\",\n        expected: { unquoted: \"a-b\", quoted: '\"a-b\"' },\n      },\n      {\n        input: \"-a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"double hyphen (--)\": [\n      {\n        input: \"--a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a--\",\n        expected: { unquoted: \"a--\", quoted: '\"a--\"' },\n      },\n      {\n        input: \"--a--\",\n        expected: { unquoted: \"a--\", quoted: '\"a--\"' },\n      },\n      {\n        input: \"--ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a--b\",\n        expected: { unquoted: \"a--b\", quoted: '\"a--b\"' },\n      },\n      {\n        input: \"--a--b\",\n        expected: { unquoted: \"a--b\", quoted: '\"a--b\"' },\n      },\n      {\n        input: \"--a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"many hyphens (/-{3,}/)\": [\n      {\n        input: \"---a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"---ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"---a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"forward slash (/)\": [\n      {\n        input: \"/a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a/\",\n        expected: { unquoted: \"a/\", quoted: '\"a/\"' },\n      },\n      {\n        input: \"/a/\",\n        expected: { unquoted: \"a/\", quoted: '\"a/\"' },\n      },\n      {\n        input: \"/ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a/b\",\n        expected: { unquoted: \"a/b\", quoted: '\"a/b\"' },\n      },\n      {\n        input: \"/a/b\",\n        expected: { unquoted: \"a/b\", quoted: '\"a/b\"' },\n      },\n    ],\n    \"multiple forward slashes (//{2,}/)\": [\n      {\n        input: \"//a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a//\",\n        expected: { unquoted: \"a//\", quoted: '\"a//\"' },\n      },\n      {\n        input: \"//a//\",\n        expected: { unquoted: \"a//\", quoted: '\"a//\"' },\n      },\n      {\n        input: \"//ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a//b\",\n        expected: { unquoted: \"a//b\", quoted: '\"a//b\"' },\n      },\n      {\n        input: \"//a//b\",\n        expected: { unquoted: \"a//b\", quoted: '\"a//b\"' },\n      },\n    ],\n  },\n};\n\nexport const quote = {\n  [binCmd]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\x00\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\x00a\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<backspace> (\\\\b)\": [\n      {\n        input: \"a\\bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\b\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: '\"a b\"',\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: '\"a b c\"',\n      },\n      {\n        input: \"a\\n\",\n        expected: '\"a \"',\n      },\n      {\n        input: \"\\na\",\n        expected: '\" a\"',\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: '\"a b\"',\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: '\"a b c\"',\n      },\n      {\n        input: \"\\ra\",\n        expected: '\" a\"',\n      },\n      {\n        input: \"a\\r\",\n        expected: '\"a \"',\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: '\"a b\"',\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\u001B\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\u009B\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: '\"a\"\"b\"',\n      },\n      {\n        input: 'a\"b\"c',\n        expected: '\"a\"\"b\"\"c\"',\n      },\n    ],\n    \"backticks ('`')\": [\n      {\n        input: \"a`b\",\n        expected: '\"a`b\"',\n      },\n      {\n        input: \"a`b`c\",\n        expected: '\"a`b`c\"',\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: '\"a$b\"',\n      },\n      {\n        input: \"a$b$c\",\n        expected: '\"a$b$c\"',\n      },\n    ],\n    \"left double quotation mark ('\u201c')\": [\n      {\n        input: \"a\u201cb\",\n        expected: '\"a\u201cb\"',\n      },\n      {\n        input: \"a\u201cb\u201cc\",\n        expected: '\"a\u201cb\u201cc\"',\n      },\n    ],\n    \"right double quotation mark ('\u201d')\": [\n      {\n        input: \"a\u201db\",\n        expected: '\"a\u201db\"',\n      },\n      {\n        input: \"a\u201db\u201dc\",\n        expected: '\"a\u201db\u201dc\"',\n      },\n    ],\n    \"double low-9 quotation mark ('\u201e')\": [\n      {\n        input: \"a\u201eb\",\n        expected: '\"a\u201eb\"',\n      },\n      {\n        input: \"a\u201eb\u201ec\",\n        expected: '\"a\u201eb\u201ec\"',\n      },\n    ],\n    \"hyphens ('-')\": [\n      {\n        input: \"-a\",\n        expected: '\"-a\"',\n      },\n      {\n        input: \"-a-b\",\n        expected: '\"-a-b\"',\n      },\n      {\n        input: \"a-b\",\n        expected: '\"a-b\"',\n      },\n      {\n        input: \"a-b-c\",\n        expected: '\"a-b-c\"',\n      },\n    ],\n  },\n  [binPowerShell]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\x00\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\x00a\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<backspace> (\\\\b)\": [\n      {\n        input: \"a\\bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\b\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: '\"a\\nb\"',\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: '\"a\\nb\\nc\"',\n      },\n      {\n        input: \"a\\n\",\n        expected: '\"a\\n\"',\n      },\n      {\n        input: \"\\na\",\n        expected: '\"\\na\"',\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"\\ra\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"a\\r\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: '\"a\\r\\nb\"',\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\u001B\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\u009B\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: '\"a\"\"b\"',\n      },\n      {\n        input: 'a\"b\"c',\n        expected: '\"a\"\"b\"\"c\"',\n      },\n    ],\n    \"backticks ('`')\": [\n      {\n        input: \"a`b\",\n        expected: '\"a``b\"',\n      },\n      {\n        input: \"a`b`c\",\n        expected: '\"a``b``c\"',\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: '\"a`$b\"',\n      },\n      {\n        input: \"a$b$c\",\n        expected: '\"a`$b`$c\"',\n      },\n    ],\n    \"left double quotation mark ('\u201c')\": [\n      {\n        input: \"a\u201cb\",\n        expected: '\"a\u201c\u201cb\"',\n      },\n      {\n        input: \"a\u201cb\u201cc\",\n        expected: '\"a\u201c\u201cb\u201c\u201cc\"',\n      },\n    ],\n    \"right double quotation mark ('\u201d')\": [\n      {\n        input: \"a\u201db\",\n        expected: '\"a\u201d\u201db\"',\n      },\n      {\n        input: \"a\u201db\u201dc\",\n        expected: '\"a\u201d\u201db\u201d\u201dc\"',\n      },\n    ],\n    \"double low-9 quotation mark ('\u201e')\": [\n      {\n        input: \"a\u201eb\",\n        expected: '\"a\u201e\u201eb\"',\n      },\n      {\n        input: \"a\u201eb\u201ec\",\n        expected: '\"a\u201e\u201eb\u201e\u201ec\"',\n      },\n    ],\n    \"hyphens ('-')\": [\n      {\n        input: \"-a\",\n        expected: '\"-a\"',\n      },\n      {\n        input: \"-a-b\",\n        expected: '\"-a-b\"',\n      },\n      {\n        input: \"a-b\",\n        expected: '\"a-b\"',\n      },\n      {\n        input: \"a-b-c\",\n        expected: '\"a-b-c\"',\n      },\n      {\n        input: \"a -b\",\n        expected: '\"a -b\"',\n      },\n      {\n        input: \"a\\t-b\",\n        expected: '\"a\\t-b\"',\n      },\n      {\n        input: \"a\\u0085-b\",\n        expected: '\"a\\u0085-b\"',\n      },\n    ],\n  },\n};\n", "/**\n * @overview Provides utilities for fuzzing.\n * @license MIT\n */\n\nconst process = require(\"node:process\");\n\nrequire(\"dotenv\").config();\n\nconst constants = require(\"../_constants.cjs\");\n\nconst ECHO_SCRIPT = constants.echoScript;\n\n/**\n * Checks if the fuzz shell is CMD.\n *\n * @param {string} shell The configured shell.\n * @returns {boolean} `true` if `shell` is CMD, `false` otherwise.\n */\nfunction isShellCmd(shell) {\n  return (\n    (constants.isWindows && [undefined, true, false].includes(shell)) ||\n    /cmd\\.exe$/u.test(shell)\n  );\n}\n\n/**\n * Checks if the fuzz shell is the C shell.\n *\n * @param {string} shell The configured shell.\n * @returns {boolean} `true` if `shell` is csh, `false` otherwise.\n */\nfunction isShellCsh(shell) {\n  return /csh$/u.test(shell);\n}\n\n/**\n * Checks if the fuzz shell is PowerShell.\n *\n * @param {string} shell The configured shell.\n * @returns {boolean} `true` if `shell` is PowerShell, `false` otherwise.\n */\nfunction isShellPowerShell(shell) {\n  return /powershell\\.exe$/u.test(shell);\n}\n\n/**\n * Produces the expected echoed output.\n *\n * @param {object} args The function arguments.\n * @param {string} args.arg The input argument that was echoed.\n * @param {string} args.shell The shell used for echoing.\n * @param {boolean} normalizeWhitespace Whether whitespace should be normalized.\n * @returns {string} The expected echoed value.\n */\nfunction getExpectedOutput({ arg, shell }, normalizeWhitespace) {\n  // Remove control characters, like Shescape\n  arg = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");\n\n  // Replace newline characters, like Shescape\n  if (isShellCmd(shell) || isShellCsh(shell)) {\n    arg = arg.replace(/\\r?\\n|\\r/gu, \" \");\n  } else {\n    arg = arg.replace(/\\r(?!\\n)/gu, \"\");\n  }\n\n  if (normalizeWhitespace) {\n    // Replace newline characters, like Shescape\n    if (!isShellCmd(shell)) {\n      arg = arg.replace(/\\r?\\n/gu, \" \");\n    }\n\n    // Convert whitespace between arguments, like the shell\n    if (isShellCmd(shell)) {\n      arg = arg.replace(/[\\t ]+/gu, \" \");\n    }\n\n    // Trim the string, like the shell\n    if (isShellPowerShell(shell)) {\n      arg = arg.replace(/^[\\s\\u0085]+/gu, \"\");\n    } else if (isShellCmd(shell)) {\n      arg = arg.replace(/^[\\t\\n\\r ]+|(?<![\\t\\n\\r ])[\\t\\n\\r ]+$/gu, \"\");\n    }\n  }\n\n  arg = `${arg}\\n`; // Append a newline, like the echo script\n  return arg;\n}\n\n/**\n * Returns the shell configured to be used for fuzzing.\n *\n * @returns {string | undefined} The configured shell, or `undefined`.\n */\nfunction getFuzzShell() {\n  return process.env.FUZZ_SHELL || undefined;\n}\n\n/**\n * Prepares an argument for echoing to accommodate shell-specific behaviour.\n *\n * @param {object} args The function arguments.\n * @param {string} args.arg The input argument that will be echoed.\n * @param {boolean} args.quoted Will `arg` be quoted prior to echoing.\n * @param {string} args.shell The shell to be used for echoing.\n * @param {boolean} disableExtraWindowsPreparations Disable Windows prep.\n * @returns {string} The prepared `arg`.\n */\nfunction prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {\n  if (constants.isWindows && !disableExtraWindowsPreparations) {\n    // Node on Windows ...\n    if (isShellCmd(shell)) {\n      // ... in CMD, depending on if the argument is quotes ...\n      if (quoted) {\n        // ... interprets arguments with `\\\"` as `\"` so we escape the `\\`.\n        arg = arg.replace(\n          /(?<!\\\\)((?:\\\\[\\0\\u0008\\u001B\\u009B]*)+)(?=\"|$)/gu,\n          \"$1$1\"\n        );\n      } else {\n        // ... interprets arguments with `\\\"` as `\"` so we escape the `\\` ...\n        arg = arg.replace(\n          /(?<!\\\\)((?:\\\\[\\0\\u0008\\u001B\\u009B]*)+)(?=\")/gu,\n          \"$1$1\"\n        );\n\n        // ... interprets arguments with `\"` as `` so we escape it with `\\`.\n        arg = arg.replace(/\"/gu, `\\\\\"`);\n      }\n    } else if (isShellPowerShell(shell)) {\n      // ... in PowerShell, depending on if there's whitespace in the\n      // argument ...\n      if (\n        (quoted &&\n          /[\\t\\n\\v\\f \\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/u.test(\n            arg\n          )) ||\n        (!quoted &&\n          /(?<!^)[\\t\\n\\v\\f \\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/u.test(\n            arg.replace(/^[\\s\\0\\u0008\\u001B\\u0085\\u009B]+/gu, \"\")\n          ))\n      ) {\n        // ... interprets arguments with `\"` as nothing so we escape it with\n        // extra double quotes as `\"\"` ...\n        arg = arg.replace(/\"/gu, `\"\"`);\n\n        // ... and interprets arguments with `\\\"` as `\"` so we escape the `\\`.\n        arg = arg.replace(\n          /(?<!\\\\)((?:\\\\[\\0\\u0008\\r\\u001B\\u009B]*)+)(?=\"|$)/gu,\n          \"$1$1\"\n        );\n      } else {\n        // ... interprets arguments with `\\\"` as `\"` so we escape the `\\` ...\n        arg = arg.replace(\n          /(?<!\\\\)((?:\\\\[\\0\\u0008\\r\\u001B\\u009B]*)+)(?=\")/gu,\n          \"$1$1\"\n        );\n\n        // ... and interprets arguments with `\"` as nothing so we escape it\n        // with `\\\"`.\n        arg = arg.replace(/\"/gu, `\\\\\"`);\n      }\n    }\n  }\n\n  return arg;\n}\n\nmodule.exports = {\n  ECHO_SCRIPT,\n  isShellPowerShell,\n  getExpectedOutput,\n  getFuzzShell,\n  prepareArg,\n};\n", "/**\n * @overview Provides instances of shescape for testing purposes.\n * @license MPL-2.0\n */\n\nimport { checkedToString, toArrayIfNecessary } from \"./src/reflection.js\";\n\n/**\n * A list of example shell injection strings to test whether or not a function\n * is vulnerable to shell injection.\n *\n * @example\n * for (const injectionString of injectionStrings) {\n *   const result = functionThatIsUsingShescape(injectionString);\n *   assert.equal(result, \"no injection\");\n * }\n */\nexport const injectionStrings = [\"\\x00world\", \"&& ls\", \"'; ls #\", '\"; ls #'];\n\n/**\n * A test stub of shescape that has the same input-output profile as the real\n * shescape implementation.\n *\n * In particular:\n * - Returns a string for all stringable inputs.\n * - Errors on non-stringable inputs.\n * - Converts non-array inputs to single-item arrays where necessary.\n */\nexport const shescape = {\n  escape: (arg, _options) => checkedToString(arg),\n  escapeAll: (args, _options) => {\n    args = toArrayIfNecessary(args);\n    return args.map(shescape.escape);\n  },\n  quote: (arg, _options) => shescape.escape(arg),\n  quoteAll: (args, _options) => shescape.escapeAll(args),\n};\n"], "fixing_code": ["# Changelog\n\nAll notable changes to _Shescape_ will be documented in this file.\n\nThe format is based on [Keep a Changelog], and this project adheres to [Semantic\nVersioning].\n\n## [Unreleased]\n\n- Add `%` escaping for CMD. ([#982])\n- Correct documented behavior of quoting functions. ([#969])\n- Expand injection strings to cover environment variables. ([#982])\n\n## [1.7.0] - 2023-06-12\n\n- Add flag protection option. ([#908])\n- Add `@since` information to API options. ([#909])\n- Add `options` to the API documentation. ([#936])\n\n## [1.6.7] - 2023-05-29\n\n- Provide injection strings for testing purposes. ([#902])\n- Update the package homepage. ([#827])\n\n## [1.6.6] - 2023-04-20\n\n- Add support for Node.js v20. ([#823])\n- Provide testing utilities. ([#710])\n- Update type exports to be compatible with the TypeScript compiler option\n  `\"moduleResolution\": \"bundler\"`. ([#761])\n\n## [1.6.5] - 2023-01-26\n\n- Add support for Node.js v19. ([#682])\n\n## [1.6.4] - 2023-01-22\n\n- Fix incorrect quoting of arguments with trailing `\\!` for C shell. ([#675])\n\n## [1.6.3] - 2023-01-21\n\n- Add support for C shell. ([#659])\n- Update documentation for readability. ([#630], [#652], [#666])\n\n## [1.6.2] - 2023-01-03\n\n- Add in-code example usage for each API function. ([#610])\n- Add whitespace preservation for Bash, Dash, and Zsh. ([#584])\n- Add whitespace preservation for PowerShell. ([#614])\n- Improve TypeScript type definitions. ([#567])\n- Improve JSDoc support for IDEs. ([#568])\n- Update API documentation. ([#612])\n\n## [1.6.1] - 2022-10-25\n\n- Fix potential polynomial backtracking in regular expression for Bash escaping\n  with `{interpolation:true}`. ([552e8ea])\n\n## [1.6.0] - 2022-10-15\n\n- Escape control characters `U+0008`, `U+000D`, `U+001B`, and `U+009B`. ([#456])\n- Improve escaping performance when interpolation is set to `true`. ([#457])\n- Improve newline substitution on Windows. ([#458], [#460])\n- Improve specificity of supported Node.js versions. ([#432], [#459])\n- Remove all side effects on import. ([#408])\n\n## [1.5.10] - 2022-08-21\n\n- Fix potential polynomial backtracking in regular expression for Bash escaping\n  with `{interpolation:true}`. ([#373])\n- Fix potential quadratic runtime regular expressions for Bash escaping with\n  `{interpolation:true}`. ([#373])\n\n## [1.5.9] - 2022-07-28\n\n- Fix escaping characters after `U+0085` with `{interpolation:true}` for\n  PowerShell on Windows systems. ([#354])\n- Improve performance of escaping for Dash. ([#336])\n- Include full documentation in published package. ([#350])\n\n## [1.5.8] - 2022-07-15\n\n- Fix escaping of line feed characters for Bash, Dash, and Zsh on Unix\n  systems. ([#332])\n- Fix escaping of line feed and carriage return characters for PowerShell and\n  CMD on Windows systems. ([#332])\n- Fix escaping of `~` and `{` for Bash on Unix systems with input strings\n  containing line terminating characters. ([#332])\n\n## [1.5.7] - 2022-07-06\n\n- Fix escaping of characters after whitespace with `{interpolation:true}` for\n  Bash, Dash, and Zsh on Unix systems. ([#324])\n- Fix escaping of characters after whitespace with `{interpolation:true}` for\n  Powershell on Windows systems. ([#322])\n\n## [1.5.6] - 2022-07-02\n\n- Fix unnecessary escaping of quotes with the `child_process` functions `fork`,\n  `spawn`, and `execFile`. ([#310])\n- Improve performance of escaping for Dash. ([#272])\n\n## [1.5.5] - 2022-06-05\n\n- Fix `The \"path\" argument must be of type string` error. ([#277])\n\n## [1.5.4] - 2022-03-07\n\n- Fix `Cannot find module 'path/win32'` error on Node.js <16.0.0. ([#199])\n- Improve detection of the Windows operating system. ([#192])\n\n## [1.5.3] - 2022-03-06\n\n- Fix documented type of `interpolation` option. ([#190])\n\n## [1.5.2] - 2022-02-23\n\n- Add escaping of brace expansion for non-Zsh shells when interpolation is\n  enabled. ([#178])\n- Explicitly import `process`. ([#173])\n\n## [1.5.1] - 2022-02-20\n\n- Fix default shell for Windows when `%COMSPEC%` is missing.\n- Fix escaping of `~` for certain input strings with `escape` and `escapeAll`\n  when `interpolation` is set to `true` in the options.\n- Improve error messaging for certain non-string arguments.\n\n## [1.5.0] - 2022-02-14\n\n- Follow symbolic links when determining the shell to escape for.\n\n## [1.4.0] - 2022-02-08\n\n- Add escaping for Unix interpolation characters to `escape`/`escapeAll`.\n- Add escaping for Zsh wildcard characters to `escape`/`escapeAll`.\n- Update TypeScript type definitions.\n- Update type information in the documentation.\n\n## [1.3.3] - 2022-01-15\n\n- Add official support for Dash (_Debian Almquist shell_).\n- Include offline documentation in package installation.\n\n## [1.3.2] - 2022-01-05\n\n- Fix escaping unicode double quotes (U+201C, U+201D, U+201) for PowerShell.\n- Update documentation to include officially supported shells.\n\n## [1.3.1] - 2021-12-06\n\n- Add default shell detection.\n\n## [1.3.0] - 2021-12-05\n\n- Add support to configure the shell to escape for.\n- Fix escaping backticks for PowerShell.\n- Fix escaping `$` for PowerShell.\n\n## [1.2.1] - 2021-04-24\n\n- Provide TypeScript type definitions.\n- Update documentation to use ECMAScript module in examples.\n\n## [1.2.0] - 2021-04-14\n\n- Provide native ECMAScript module source files.\n\n## [1.1.3] - 2021-03-13\n\n- Strip null characters from arguments.\n\n## [1.1.2] - 2021-01-07\n\n- Add in-source JSDoc documentation.\n\n## [1.1.1] - 2020-12-30\n\n- Improve error message when a value is not stringable.\n\n## [1.1.0] - 2020-12-22\n\n- Add `escapeAll` function to escape an array of arguments.\n- Recommend usage of `escapeAll` when using `fork`/`spawn`/`execFile`.\n\n## [1.0.0] - 2020-12-10\n\n- BREAKING CHANGE: Remove ability to call `shescape()` directly.\n- BREAKING CHANGE: Automatically convert input to array in `quoteAll()`.\n- Fix numbering in documentation's \"Install\" section.\n\n## [0.4.1] - 2020-12-09\n\n- Support non-string values as arguments.\n\n## [0.4.0] - 2020-12-08\n\n- Add `quoteAll` function to quote and escape an array of arguments.\n- Create website with full documentation (_no longer exists_).\n\n## [0.3.1] - 2020-12-07\n\n- Deprecate calling `shescape()` directly.\n\n## [0.3.0] - 2020-12-07\n\n- Add `escape` function to escape an argument (same as `shescape()`).\n- Add `quote` function to quote and escape an argument.\n\n## [0.2.1] - 2020-11-07\n\n- Fix missing released files.\n\n## [0.2.0] - 2020-11-07\n\n- Add support for escaping of double quotes on Windows.\n\n## [0.1.0] - 2020-11-06\n\n- Escape individual shell arguments.\n\n[#173]: https://github.com/ericcornelissen/shescape/pull/173\n[#178]: https://github.com/ericcornelissen/shescape/pull/178\n[#190]: https://github.com/ericcornelissen/shescape/pull/190\n[#192]: https://github.com/ericcornelissen/shescape/pull/192\n[#199]: https://github.com/ericcornelissen/shescape/pull/199\n[#272]: https://github.com/ericcornelissen/shescape/pull/272\n[#277]: https://github.com/ericcornelissen/shescape/pull/277\n[#310]: https://github.com/ericcornelissen/shescape/pull/310\n[#322]: https://github.com/ericcornelissen/shescape/pull/322\n[#324]: https://github.com/ericcornelissen/shescape/pull/324\n[#332]: https://github.com/ericcornelissen/shescape/pull/332\n[#336]: https://github.com/ericcornelissen/shescape/pull/336\n[#350]: https://github.com/ericcornelissen/shescape/pull/350\n[#354]: https://github.com/ericcornelissen/shescape/pull/354\n[#373]: https://github.com/ericcornelissen/shescape/pull/373\n[#408]: https://github.com/ericcornelissen/shescape/pull/408\n[#432]: https://github.com/ericcornelissen/shescape/pull/432\n[#456]: https://github.com/ericcornelissen/shescape/pull/456\n[#457]: https://github.com/ericcornelissen/shescape/pull/457\n[#458]: https://github.com/ericcornelissen/shescape/pull/458\n[#459]: https://github.com/ericcornelissen/shescape/pull/459\n[#460]: https://github.com/ericcornelissen/shescape/pull/460\n[#567]: https://github.com/ericcornelissen/shescape/pull/567\n[#568]: https://github.com/ericcornelissen/shescape/pull/568\n[#584]: https://github.com/ericcornelissen/shescape/pull/584\n[#610]: https://github.com/ericcornelissen/shescape/pull/610\n[#612]: https://github.com/ericcornelissen/shescape/pull/612\n[#614]: https://github.com/ericcornelissen/shescape/pull/614\n[#630]: https://github.com/ericcornelissen/shescape/pull/630\n[#652]: https://github.com/ericcornelissen/shescape/pull/652\n[#659]: https://github.com/ericcornelissen/shescape/pull/659\n[#666]: https://github.com/ericcornelissen/shescape/pull/666\n[#675]: https://github.com/ericcornelissen/shescape/pull/675\n[#682]: https://github.com/ericcornelissen/shescape/pull/682\n[#710]: https://github.com/ericcornelissen/shescape/pull/710\n[#761]: https://github.com/ericcornelissen/shescape/pull/761\n[#823]: https://github.com/ericcornelissen/shescape/pull/823\n[#827]: https://github.com/ericcornelissen/shescape/pull/827\n[#902]: https://github.com/ericcornelissen/shescape/pull/902\n[#908]: https://github.com/ericcornelissen/shescape/pull/908\n[#909]: https://github.com/ericcornelissen/shescape/pull/909\n[#936]: https://github.com/ericcornelissen/shescape/pull/936\n[#969]: https://github.com/ericcornelissen/shescape/pull/969\n[#982]: https://github.com/ericcornelissen/shescape/pull/982\n[552e8ea]: https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9\n[keep a changelog]: https://keepachangelog.com/en/1.0.0/\n[semantic versioning]: https://semver.org/spec/v2.0.0.html\n", "/**\n * @overview Provides functionality for the Windows Command Prompt.\n * @license MPL-2.0\n */\n\n/**\n * Escape an argument for use in CMD when interpolation is active.\n *\n * @param {string} arg The argument to escape.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgForInterpolation(arg) {\n  return arg\n    .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")\n    .replace(/\\r?\\n|\\r/gu, \" \")\n    .replace(/\\^/gu, \"^^\")\n    .replace(/([\"%&<>|])/gu, \"^$1\");\n}\n\n/**\n * Escape an argument for use in CMD when the argument is not being quoted (but\n * interpolation is inactive).\n *\n * @param {string} arg The argument to escape.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgForNoInterpolation(arg) {\n  return arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\").replace(/\\r?\\n|\\r/gu, \" \");\n}\n\n/**\n * Returns a function to escape arguments for use in CMD for the given use case.\n *\n * @param {object} options The options for escaping arguments.\n * @param {boolean} options.interpolation Is interpolation enabled.\n * @returns {Function} A function to escape arguments.\n */\nexport function getEscapeFunction(options) {\n  if (options.interpolation) {\n    return escapeArgForInterpolation;\n  } else {\n    return escapeArgForNoInterpolation;\n  }\n}\n\n/**\n * Escape an argument for use in CMD when the argument is being quoted.\n *\n * @param {string} arg The argument to escape.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgForQuoted(arg) {\n  return arg\n    .replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\")\n    .replace(/\\r?\\n|\\r/gu, \" \")\n    .replace(/%/gu, \"^%\")\n    .replace(/\"/gu, `\"\"`);\n}\n\n/**\n * Quotes an argument for use in CMD.\n *\n * @param {string} arg The argument to quote.\n * @returns {string} The quoted argument.\n */\nfunction quoteArg(arg) {\n  return `\"${arg}\"`;\n}\n\n/**\n * Returns a pair of functions to escape and quote arguments for use in CMD.\n *\n * @returns {Function[]} A function pair to escape & quote arguments.\n */\nexport function getQuoteFunction() {\n  return [escapeArgForQuoted, quoteArg];\n}\n\n/**\n * Remove any prefix from the provided argument that might be interpreted as a\n * flag on Windows systems for CMD.\n *\n * @param {string} arg The argument to update.\n * @returns {string} The updated argument.\n */\nfunction stripFlagPrefix(arg) {\n  return arg.replace(/^(?:-+|\\/+)/gu, \"\");\n}\n\n/**\n * Returns a function to protect against flag injection for CMD.\n *\n * @returns {Function} A function to protect against flag injection.\n */\nexport function getFlagProtectionFunction() {\n  return stripFlagPrefix;\n}\n", "/**\n * @overview Provides fixtures for testing Windows specific functionality.\n * @license MPL-2.0\n */\n\nimport { binCmd, binPowerShell } from \"../_constants.cjs\";\n\nexport const escape = {\n  [binCmd]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a\\u0085b\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a\\u00A0b\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a\\u2000b\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a\\u2001b\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a\\u2002b\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a\\u2003b\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a\\u2004b\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a\\u2005b\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a\\u2006b\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a\\u2007b\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a\\u2008b\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a\\u2009b\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a\\u200Ab\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a\\u2028b\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a\\u2029b\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a\\u202Fb\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a\\u205Fb\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a\\u3000b\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a\\uFEFFb\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: { interpolation: \"a'b\", noInterpolation: \"a'b\" },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a'b'c\",\n          noInterpolation: \"a'b'c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: {\n          interpolation: 'a^\"b',\n          noInterpolation: 'a\"b',\n        },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: {\n          interpolation: 'a^\"b^\"c',\n          noInterpolation: 'a\"b\"c',\n        },\n      },\n    ],\n    \"backticks ('`')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a`b\", noInterpolation: \"a`b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a`b`c\", noInterpolation: \"a`b`c\" },\n      },\n    ],\n    \"at signs ('@')\": [\n      {\n        input: \"@a\",\n        expected: { interpolation: \"@a\", noInterpolation: \"@a\" },\n      },\n      {\n        input: \"@a@b\",\n        expected: { interpolation: \"@a@b\", noInterpolation: \"@a@b\" },\n      },\n      {\n        input: \"a@b\",\n        expected: { interpolation: \"a@b\", noInterpolation: \"a@b\" },\n      },\n      {\n        input: \"a@b@c\",\n        expected: { interpolation: \"a@b@c\", noInterpolation: \"a@b@c\" },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n    ],\n    \"carets ('^')\": [\n      {\n        input: \"a^b\",\n        expected: { interpolation: \"a^^b\", noInterpolation: \"a^b\" },\n      },\n      {\n        input: \"a^b^c\",\n        expected: { interpolation: \"a^^b^^c\", noInterpolation: \"a^b^c\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a$b\", noInterpolation: \"a$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a$b$c\", noInterpolation: \"a$b$c\" },\n      },\n    ],\n    \"percentage signs ('%')\": [\n      {\n        input: \"a%b\",\n        expected: { interpolation: \"a^%b\", noInterpolation: \"a%b\" },\n      },\n      {\n        input: \"a%b%c\",\n        expected: { interpolation: \"a^%b^%c\", noInterpolation: \"a%b%c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a^&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a^&b^&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"hyphens ('-')\": [\n      {\n        input: \"-a\",\n        expected: { interpolation: \"-a\", noInterpolation: \"-a\" },\n      },\n      {\n        input: \"-a-b\",\n        expected: { interpolation: \"-a-b\", noInterpolation: \"-a-b\" },\n      },\n      {\n        input: \"a-b\",\n        expected: { interpolation: \"a-b\", noInterpolation: \"a-b\" },\n      },\n      {\n        input: \"a-b-c\",\n        expected: { interpolation: \"a-b-c\", noInterpolation: \"a-b-c\" },\n      },\n    ],\n    \"colons (':')\": [\n      {\n        input: \"a:b\",\n        expected: { interpolation: \"a:b\", noInterpolation: \"a:b\" },\n      },\n      {\n        input: \"a:b:c\",\n        expected: { interpolation: \"a:b:c\", noInterpolation: \"a:b:c\" },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a;b;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a^|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a^|b^|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"comma (',')\": [\n      {\n        input: \"a,b\",\n        expected: { interpolation: \"a,b\", noInterpolation: \"a,b\" },\n      },\n      {\n        input: \"a,b,c\",\n        expected: { interpolation: \"a,b,c\", noInterpolation: \"a,b,c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a(b(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a)b)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a(b)c\", noInterpolation: \"a(b)c\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a]b]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a{b{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a}b}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a{b}c\", noInterpolation: \"a{b}c\" },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a^<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a^>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a^<b^<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a^>b^>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a^<b^>c\", noInterpolation: \"a<b>c\" },\n      },\n    ],\n    \"left double quotation mark ('\u201c')\": [\n      {\n        input: \"a\u201cb\",\n        expected: { interpolation: \"a\u201cb\", noInterpolation: \"a\u201cb\" },\n      },\n      {\n        input: \"a\u201cb\u201cc\",\n        expected: {\n          interpolation: \"a\u201cb\u201cc\",\n          noInterpolation: \"a\u201cb\u201cc\",\n        },\n      },\n    ],\n    \"right double quotation mark ('\u201d')\": [\n      {\n        input: \"a\u201db\",\n        expected: { interpolation: \"a\u201db\", noInterpolation: \"a\u201db\" },\n      },\n      {\n        input: \"a\u201db\u201dc\",\n        expected: {\n          interpolation: \"a\u201db\u201dc\",\n          noInterpolation: \"a\u201db\u201dc\",\n        },\n      },\n    ],\n    \"double low-9 quotation mark ('\u201e')\": [\n      {\n        input: \"a\u201eb\",\n        expected: { interpolation: \"a\u201eb\", noInterpolation: \"a\u201eb\" },\n      },\n      {\n        input: \"a\u201eb\u201ec\",\n        expected: {\n          interpolation: \"a\u201eb\u201ec\",\n          noInterpolation: \"a\u201eb\u201ec\",\n        },\n      },\n    ],\n    \"left single quotation mark ('\u2018')\": [\n      {\n        input: \"a\u2018b\",\n        expected: { interpolation: \"a\u2018b\", noInterpolation: \"a\u2018b\" },\n      },\n      {\n        input: \"a\u2018b\u2018c\",\n        expected: {\n          interpolation: \"a\u2018b\u2018c\",\n          noInterpolation: \"a\u2018b\u2018c\",\n        },\n      },\n    ],\n    \"right single quotation mark ('\u2019')\": [\n      {\n        input: \"a\u2019b\",\n        expected: { interpolation: \"a\u2019b\", noInterpolation: \"a\u2019b\" },\n      },\n      {\n        input: \"a\u2019b\u2019c\",\n        expected: {\n          interpolation: \"a\u2019b\u2019c\",\n          noInterpolation: \"a\u2019b\u2019c\",\n        },\n      },\n    ],\n    \"single low-9 quotation mark ('\u201a')\": [\n      {\n        input: \"a\u201ab\",\n        expected: { interpolation: \"a\u201ab\", noInterpolation: \"a\u201ab\" },\n      },\n      {\n        input: \"a\u201ab\u201ac\",\n        expected: {\n          interpolation: \"a\u201ab\u201ac\",\n          noInterpolation: \"a\u201ab\u201ac\",\n        },\n      },\n    ],\n    \"single high-reversed-9 quotation mark ('\u201b')\": [\n      {\n        input: \"a\u201bb\",\n        expected: { interpolation: \"a\u201bb\", noInterpolation: \"a\u201bb\" },\n      },\n      {\n        input: \"a\u201bb\u201bc\",\n        expected: {\n          interpolation: \"a\u201bb\u201bc\",\n          noInterpolation: \"a\u201bb\u201bc\",\n        },\n      },\n    ],\n  },\n  [binPowerShell]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a`\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a`\\tb`\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a`\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"`\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a` b\", noInterpolation: \"a\\nb\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a` b` c\", noInterpolation: \"a\\nb\\nc\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a` \", noInterpolation: \"a\\n\" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \"` a\", noInterpolation: \"\\na\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a`\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a`\\vb`\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a`\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"`\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a`\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a`\\fb`\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a`\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"`\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a` b\", noInterpolation: \"a\\r\\nb\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a` b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a` b` c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a` \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \"` a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a`\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a`\\u0085b`\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a`\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"`\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a`\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a`\\u00A0b`\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a`\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"`\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<ogham space mark> (\\\\u1680)\": [\n      {\n        input: \"a\\u1680b\",\n        expected: {\n          interpolation: \"a`\\u1680b\",\n          noInterpolation: \"a\\u1680b\",\n        },\n      },\n      {\n        input: \"a\\u1680b\\u1680c\",\n        expected: {\n          interpolation: \"a`\\u1680b`\\u1680c\",\n          noInterpolation: \"a\\u1680b\\u1680c\",\n        },\n      },\n      {\n        input: \"a\\u1680\",\n        expected: {\n          interpolation: \"a`\\u1680\",\n          noInterpolation: \"a\\u1680\",\n        },\n      },\n      {\n        input: \"\\u1680a\",\n        expected: {\n          interpolation: \"`\\u1680a\",\n          noInterpolation: \"\\u1680a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a`\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a`\\u2000b`\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a`\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"`\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a`\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a`\\u2001b`\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a`\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"`\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a`\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a`\\u2002b`\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a`\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"`\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a`\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a`\\u2003b`\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a`\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"`\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a`\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a`\\u2004b`\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a`\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"`\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a`\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a`\\u2005b`\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a`\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"`\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a`\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a`\\u2006b`\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a`\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"`\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a`\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a`\\u2007b`\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a`\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"`\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a`\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a`\\u2008b`\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a`\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"`\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a`\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a`\\u2009b`\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a`\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"`\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a`\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a`\\u200Ab`\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a`\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"`\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a`\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a`\\u2028b`\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a`\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"`\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a`\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a`\\u2029b`\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a`\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"`\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a`\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a`\\u202Fb`\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a`\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"`\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a`\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a`\\u205Fb`\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a`\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"`\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a`\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a`\\u3000b`\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a`\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"`\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a`\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a`\\uFEFFb`\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a`\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"`\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: { interpolation: \"a`'b\", noInterpolation: \"a'b\" },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a`'b`'c\",\n          noInterpolation: \"a'b'c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: {\n          interpolation: 'a`\"b',\n          noInterpolation: 'a\"b',\n        },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: {\n          interpolation: 'a`\"b`\"c',\n          noInterpolation: 'a\"b\"c',\n        },\n      },\n    ],\n    \"backticks ('`')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a``b\", noInterpolation: \"a``b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a``b``c\", noInterpolation: \"a``b``c\" },\n      },\n    ],\n    \"at signs ('@')\": [\n      {\n        input: \"@a\",\n        expected: { interpolation: \"`@a\", noInterpolation: \"@a\" },\n      },\n      {\n        input: \"@a@b\",\n        expected: { interpolation: \"`@a@b\", noInterpolation: \"@a@b\" },\n      },\n      {\n        input: \"a@b\",\n        expected: { interpolation: \"a@b\", noInterpolation: \"a@b\" },\n      },\n      {\n        input: \"a@b@c\",\n        expected: { interpolation: \"a@b@c\", noInterpolation: \"a@b@c\" },\n      },\n      {\n        input: \"a @b\",\n        expected: { interpolation: \"a` `@b\", noInterpolation: \"a @b\" },\n      },\n      {\n        input: \"a\\t@b\",\n        expected: { interpolation: \"a`\\t`@b\", noInterpolation: \"a\\t@b\" },\n      },\n      {\n        input: \"a\\u0085@b\",\n        expected: {\n          interpolation: \"a`\\u0085`@b\",\n          noInterpolation: \"a\\u0085@b\",\n        },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"`#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"`#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n      {\n        input: \"a #b\",\n        expected: { interpolation: \"a` `#b\", noInterpolation: \"a #b\" },\n      },\n      {\n        input: \"a\\t#b\",\n        expected: { interpolation: \"a`\\t`#b\", noInterpolation: \"a\\t#b\" },\n      },\n      {\n        input: \"a\\u0085#b\",\n        expected: {\n          interpolation: \"a`\\u0085`#b\",\n          noInterpolation: \"a\\u0085#b\",\n        },\n      },\n    ],\n    \"carets ('^')\": [\n      {\n        input: \"a^b\",\n        expected: { interpolation: \"a^b\", noInterpolation: \"a^b\" },\n      },\n      {\n        input: \"a^b^c\",\n        expected: { interpolation: \"a^b^c\", noInterpolation: \"a^b^c\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a`$b\", noInterpolation: \"a`$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a`$b`$c\", noInterpolation: \"a`$b`$c\" },\n      },\n    ],\n    \"percentage signs ('%')\": [\n      {\n        input: \"a%b\",\n        expected: { interpolation: \"a%b\", noInterpolation: \"a%b\" },\n      },\n      {\n        input: \"a%b%c\",\n        expected: { interpolation: \"a%b%c\", noInterpolation: \"a%b%c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a`&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a`&b`&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"hyphens ('-')\": [\n      {\n        input: \"-a\",\n        expected: { interpolation: \"`-a\", noInterpolation: \"-a\" },\n      },\n      {\n        input: \"-a-b\",\n        expected: { interpolation: \"`-a-b\", noInterpolation: \"-a-b\" },\n      },\n      {\n        input: \"a-b\",\n        expected: { interpolation: \"a-b\", noInterpolation: \"a-b\" },\n      },\n      {\n        input: \"a-b-c\",\n        expected: { interpolation: \"a-b-c\", noInterpolation: \"a-b-c\" },\n      },\n      {\n        input: \"a -b\",\n        expected: { interpolation: \"a` `-b\", noInterpolation: \"a -b\" },\n      },\n      {\n        input: \"a\\t-b\",\n        expected: { interpolation: \"a`\\t`-b\", noInterpolation: \"a\\t-b\" },\n      },\n      {\n        input: \"a\\u0085-b\",\n        expected: {\n          interpolation: \"a`\\u0085`-b\",\n          noInterpolation: \"a\\u0085-b\",\n        },\n      },\n    ],\n    \"colons (':')\": [\n      {\n        input: \":a\",\n        expected: { interpolation: \"`:a\", noInterpolation: \":a\" },\n      },\n      {\n        input: \"a:b\",\n        expected: { interpolation: \"a:b\", noInterpolation: \"a:b\" },\n      },\n      {\n        input: \"a:b:c\",\n        expected: { interpolation: \"a:b:c\", noInterpolation: \"a:b:c\" },\n      },\n      {\n        input: \"a :b\",\n        expected: { interpolation: \"a` `:b\", noInterpolation: \"a :b\" },\n      },\n      {\n        input: \"a\\t:b\",\n        expected: { interpolation: \"a`\\t`:b\", noInterpolation: \"a\\t:b\" },\n      },\n      {\n        input: \"a\\u0085:b\",\n        expected: {\n          interpolation: \"a`\\u0085`:b\",\n          noInterpolation: \"a\\u0085:b\",\n        },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a`;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a`;b`;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a`|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a`|b`|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"comma (',')\": [\n      {\n        input: \"a,b\",\n        expected: { interpolation: \"a`,b\", noInterpolation: \"a,b\" },\n      },\n      {\n        input: \"a,b,c\",\n        expected: { interpolation: \"a`,b`,c\", noInterpolation: \"a,b,c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a`(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a`)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a`(b`(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a`)b`)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a`(b`)c\", noInterpolation: \"a(b)c\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"[a\",\n        expected: { interpolation: \"[a\", noInterpolation: \"[a\" },\n      },\n      {\n        input: \"]a\",\n        expected: { interpolation: \"`]a\", noInterpolation: \"]a\" },\n      },\n      {\n        input: \"[a]\",\n        expected: { interpolation: \"[a]\", noInterpolation: \"[a]\" },\n      },\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a]b]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },\n      },\n      {\n        input: \"a [b\",\n        expected: { interpolation: \"a` [b\", noInterpolation: \"a [b\" },\n      },\n      {\n        input: \"a ]b\",\n        expected: { interpolation: \"a` `]b\", noInterpolation: \"a ]b\" },\n      },\n      {\n        input: \"a [b]\",\n        expected: { interpolation: \"a` [b]\", noInterpolation: \"a [b]\" },\n      },\n      {\n        input: \"a\\t[b\",\n        expected: { interpolation: \"a`\\t[b\", noInterpolation: \"a\\t[b\" },\n      },\n      {\n        input: \"a\\t]b\",\n        expected: { interpolation: \"a`\\t`]b\", noInterpolation: \"a\\t]b\" },\n      },\n      {\n        input: \"a\\t[b]\",\n        expected: { interpolation: \"a`\\t[b]\", noInterpolation: \"a\\t[b]\" },\n      },\n      {\n        input: \"a\\u0085[b\",\n        expected: { interpolation: \"a`\\u0085[b\", noInterpolation: \"a\\u0085[b\" },\n      },\n      {\n        input: \"a\\u0085]b\",\n        expected: {\n          interpolation: \"a`\\u0085`]b\",\n          noInterpolation: \"a\\u0085]b\",\n        },\n      },\n      {\n        input: \"a\\u0085[b]\",\n        expected: {\n          interpolation: \"a`\\u0085[b]\",\n          noInterpolation: \"a\\u0085[b]\",\n        },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a`{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a`}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a`{b`{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a`}b`}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a`{b`}c\", noInterpolation: \"a{b}c\" },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"<a\",\n        expected: { interpolation: \"`<a\", noInterpolation: \"<a\" },\n      },\n      {\n        input: \">a\",\n        expected: { interpolation: \"`>a\", noInterpolation: \">a\" },\n      },\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"1>a\",\n        expected: { interpolation: \"1`>a\", noInterpolation: \"1>a\" },\n      },\n      {\n        input: \"2>a\",\n        expected: { interpolation: \"2`>a\", noInterpolation: \"2>a\" },\n      },\n      {\n        input: \"3>a\",\n        expected: { interpolation: \"3`>a\", noInterpolation: \"3>a\" },\n      },\n      {\n        input: \"4>a\",\n        expected: { interpolation: \"4`>a\", noInterpolation: \"4>a\" },\n      },\n      {\n        input: \"5>a\",\n        expected: { interpolation: \"5`>a\", noInterpolation: \"5>a\" },\n      },\n      {\n        input: \"6>a\",\n        expected: { interpolation: \"6`>a\", noInterpolation: \"6>a\" },\n      },\n      {\n        input: \"*>a\",\n        expected: { interpolation: \"*`>a\", noInterpolation: \"*>a\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a<b<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a>b>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a<b>c\", noInterpolation: \"a<b>c\" },\n      },\n      {\n        input: \"a <b\",\n        expected: { interpolation: \"a` `<b\", noInterpolation: \"a <b\" },\n      },\n      {\n        input: \"a >b\",\n        expected: { interpolation: \"a` `>b\", noInterpolation: \"a >b\" },\n      },\n      {\n        input: \"a 1>b\",\n        expected: { interpolation: \"a` 1`>b\", noInterpolation: \"a 1>b\" },\n      },\n      {\n        input: \"a 2>b\",\n        expected: { interpolation: \"a` 2`>b\", noInterpolation: \"a 2>b\" },\n      },\n      {\n        input: \"a 3>b\",\n        expected: { interpolation: \"a` 3`>b\", noInterpolation: \"a 3>b\" },\n      },\n      {\n        input: \"a 4>b\",\n        expected: { interpolation: \"a` 4`>b\", noInterpolation: \"a 4>b\" },\n      },\n      {\n        input: \"a 5>b\",\n        expected: { interpolation: \"a` 5`>b\", noInterpolation: \"a 5>b\" },\n      },\n      {\n        input: \"a 6>b\",\n        expected: { interpolation: \"a` 6`>b\", noInterpolation: \"a 6>b\" },\n      },\n      {\n        input: \"a *>b\",\n        expected: { interpolation: \"a` *`>b\", noInterpolation: \"a *>b\" },\n      },\n      {\n        input: \"a\\t<b\",\n        expected: { interpolation: \"a`\\t`<b\", noInterpolation: \"a\\t<b\" },\n      },\n      {\n        input: \"a\\t>b\",\n        expected: { interpolation: \"a`\\t`>b\", noInterpolation: \"a\\t>b\" },\n      },\n      {\n        input: \"a\\t1>b\",\n        expected: { interpolation: \"a`\\t1`>b\", noInterpolation: \"a\\t1>b\" },\n      },\n      {\n        input: \"a\\t2>b\",\n        expected: { interpolation: \"a`\\t2`>b\", noInterpolation: \"a\\t2>b\" },\n      },\n      {\n        input: \"a\\t3>b\",\n        expected: { interpolation: \"a`\\t3`>b\", noInterpolation: \"a\\t3>b\" },\n      },\n      {\n        input: \"a\\t4>b\",\n        expected: { interpolation: \"a`\\t4`>b\", noInterpolation: \"a\\t4>b\" },\n      },\n      {\n        input: \"a\\t5>b\",\n        expected: { interpolation: \"a`\\t5`>b\", noInterpolation: \"a\\t5>b\" },\n      },\n      {\n        input: \"a\\t6>b\",\n        expected: { interpolation: \"a`\\t6`>b\", noInterpolation: \"a\\t6>b\" },\n      },\n      {\n        input: \"a\\t*>b\",\n        expected: { interpolation: \"a`\\t*`>b\", noInterpolation: \"a\\t*>b\" },\n      },\n      {\n        input: \"a\\u0085<b\",\n        expected: {\n          interpolation: \"a`\\u0085`<b\",\n          noInterpolation: \"a\\u0085<b\",\n        },\n      },\n      {\n        input: \"a\\u0085>b\",\n        expected: {\n          interpolation: \"a`\\u0085`>b\",\n          noInterpolation: \"a\\u0085>b\",\n        },\n      },\n      {\n        input: \"a\\u00851>b\",\n        expected: {\n          interpolation: \"a`\\u00851`>b\",\n          noInterpolation: \"a\\u00851>b\",\n        },\n      },\n      {\n        input: \"a\\u00852>b\",\n        expected: {\n          interpolation: \"a`\\u00852`>b\",\n          noInterpolation: \"a\\u00852>b\",\n        },\n      },\n      {\n        input: \"a\\u00853>b\",\n        expected: {\n          interpolation: \"a`\\u00853`>b\",\n          noInterpolation: \"a\\u00853>b\",\n        },\n      },\n      {\n        input: \"a\\u00854>b\",\n        expected: {\n          interpolation: \"a`\\u00854`>b\",\n          noInterpolation: \"a\\u00854>b\",\n        },\n      },\n      {\n        input: \"a\\u00855>b\",\n        expected: {\n          interpolation: \"a`\\u00855`>b\",\n          noInterpolation: \"a\\u00855>b\",\n        },\n      },\n      {\n        input: \"a\\u00856>b\",\n        expected: {\n          interpolation: \"a`\\u00856`>b\",\n          noInterpolation: \"a\\u00856>b\",\n        },\n      },\n      {\n        input: \"a\\u0085*>b\",\n        expected: {\n          interpolation: \"a`\\u0085*`>b\",\n          noInterpolation: \"a\\u0085*>b\",\n        },\n      },\n    ],\n    \"left double quotation mark ('\u201c')\": [\n      {\n        input: \"a\u201cb\",\n        expected: {\n          interpolation: \"a`\u201cb\",\n          noInterpolation: \"a\u201cb\",\n        },\n      },\n      {\n        input: \"a\u201cb\u201cc\",\n        expected: {\n          interpolation: \"a`\u201cb`\u201cc\",\n          noInterpolation: \"a\u201cb\u201cc\",\n        },\n      },\n    ],\n    \"right double quotation mark ('\u201d')\": [\n      {\n        input: \"a\u201db\",\n        expected: {\n          interpolation: \"a`\u201db\",\n          noInterpolation: \"a\u201db\",\n        },\n      },\n      {\n        input: \"a\u201db\u201dc\",\n        expected: {\n          interpolation: \"a`\u201db`\u201dc\",\n          noInterpolation: \"a\u201db\u201dc\",\n        },\n      },\n    ],\n    \"double low-9 quotation mark ('\u201e')\": [\n      {\n        input: \"a\u201eb\",\n        expected: {\n          interpolation: \"a`\u201eb\",\n          noInterpolation: \"a\u201eb\",\n        },\n      },\n      {\n        input: \"a\u201eb\u201ec\",\n        expected: {\n          interpolation: \"a`\u201eb`\u201ec\",\n          noInterpolation: \"a\u201eb\u201ec\",\n        },\n      },\n    ],\n    \"left single quotation mark ('\u2018')\": [\n      {\n        input: \"a\u2018b\",\n        expected: { interpolation: \"a`\u2018b\", noInterpolation: \"a\u2018b\" },\n      },\n      {\n        input: \"a\u2018b\u2018c\",\n        expected: {\n          interpolation: \"a`\u2018b`\u2018c\",\n          noInterpolation: \"a\u2018b\u2018c\",\n        },\n      },\n    ],\n    \"right single quotation mark ('\u2019')\": [\n      {\n        input: \"a\u2019b\",\n        expected: { interpolation: \"a`\u2019b\", noInterpolation: \"a\u2019b\" },\n      },\n      {\n        input: \"a\u2019b\u2019c\",\n        expected: {\n          interpolation: \"a`\u2019b`\u2019c\",\n          noInterpolation: \"a\u2019b\u2019c\",\n        },\n      },\n    ],\n    \"single low-9 quotation mark ('\u201a')\": [\n      {\n        input: \"a\u201ab\",\n        expected: { interpolation: \"a`\u201ab\", noInterpolation: \"a\u201ab\" },\n      },\n      {\n        input: \"a\u201ab\u201ac\",\n        expected: {\n          interpolation: \"a`\u201ab`\u201ac\",\n          noInterpolation: \"a\u201ab\u201ac\",\n        },\n      },\n    ],\n    \"single high-reversed-9 quotation mark ('\u201b')\": [\n      {\n        input: \"a\u201bb\",\n        expected: { interpolation: \"a`\u201bb\", noInterpolation: \"a\u201bb\" },\n      },\n      {\n        input: \"a\u201bb\u201bc\",\n        expected: {\n          interpolation: \"a`\u201bb`\u201bc\",\n          noInterpolation: \"a\u201bb\u201bc\",\n        },\n      },\n    ],\n  },\n};\n\nexport const flag = {\n  [binCmd]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { unquoted: \"foobar\", quoted: '\"foobar\"' },\n      },\n    ],\n    \"single hyphen (-)\": [\n      {\n        input: \"-a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a-\",\n        expected: { unquoted: \"a-\", quoted: '\"a-\"' },\n      },\n      {\n        input: \"-a-\",\n        expected: { unquoted: \"a-\", quoted: '\"a-\"' },\n      },\n      {\n        input: \"-ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a-b\",\n        expected: { unquoted: \"a-b\", quoted: '\"a-b\"' },\n      },\n      {\n        input: \"-a-b\",\n        expected: { unquoted: \"a-b\", quoted: '\"a-b\"' },\n      },\n      {\n        input: \"-a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"double hyphen (--)\": [\n      {\n        input: \"--a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a--\",\n        expected: { unquoted: \"a--\", quoted: '\"a--\"' },\n      },\n      {\n        input: \"--a--\",\n        expected: { unquoted: \"a--\", quoted: '\"a--\"' },\n      },\n      {\n        input: \"--ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a--b\",\n        expected: { unquoted: \"a--b\", quoted: '\"a--b\"' },\n      },\n      {\n        input: \"--a--b\",\n        expected: { unquoted: \"a--b\", quoted: '\"a--b\"' },\n      },\n      {\n        input: \"--a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"many hyphens (/-{3,}/)\": [\n      {\n        input: \"---a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"---ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"---a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"forward slash (/)\": [\n      {\n        input: \"/a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a/\",\n        expected: { unquoted: \"a/\", quoted: '\"a/\"' },\n      },\n      {\n        input: \"/a/\",\n        expected: { unquoted: \"a/\", quoted: '\"a/\"' },\n      },\n      {\n        input: \"/ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a/b\",\n        expected: { unquoted: \"a/b\", quoted: '\"a/b\"' },\n      },\n      {\n        input: \"/a/b\",\n        expected: { unquoted: \"a/b\", quoted: '\"a/b\"' },\n      },\n    ],\n    \"multiple forward slashes (//{2,}/)\": [\n      {\n        input: \"//a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a//\",\n        expected: { unquoted: \"a//\", quoted: '\"a//\"' },\n      },\n      {\n        input: \"//a//\",\n        expected: { unquoted: \"a//\", quoted: '\"a//\"' },\n      },\n      {\n        input: \"//ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a//b\",\n        expected: { unquoted: \"a//b\", quoted: '\"a//b\"' },\n      },\n      {\n        input: \"//a//b\",\n        expected: { unquoted: \"a//b\", quoted: '\"a//b\"' },\n      },\n    ],\n  },\n  [binPowerShell]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { unquoted: \"foobar\", quoted: '\"foobar\"' },\n      },\n    ],\n    \"single hyphen (-)\": [\n      {\n        input: \"-a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a-\",\n        expected: { unquoted: \"a-\", quoted: '\"a-\"' },\n      },\n      {\n        input: \"-a-\",\n        expected: { unquoted: \"a-\", quoted: '\"a-\"' },\n      },\n      {\n        input: \"-ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a-b\",\n        expected: { unquoted: \"a-b\", quoted: '\"a-b\"' },\n      },\n      {\n        input: \"-a-b\",\n        expected: { unquoted: \"a-b\", quoted: '\"a-b\"' },\n      },\n      {\n        input: \"-a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"double hyphen (--)\": [\n      {\n        input: \"--a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a--\",\n        expected: { unquoted: \"a--\", quoted: '\"a--\"' },\n      },\n      {\n        input: \"--a--\",\n        expected: { unquoted: \"a--\", quoted: '\"a--\"' },\n      },\n      {\n        input: \"--ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a--b\",\n        expected: { unquoted: \"a--b\", quoted: '\"a--b\"' },\n      },\n      {\n        input: \"--a--b\",\n        expected: { unquoted: \"a--b\", quoted: '\"a--b\"' },\n      },\n      {\n        input: \"--a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"many hyphens (/-{3,}/)\": [\n      {\n        input: \"---a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"---ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"---a=b\",\n        expected: { unquoted: \"a=b\", quoted: '\"a=b\"' },\n      },\n    ],\n    \"forward slash (/)\": [\n      {\n        input: \"/a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a/\",\n        expected: { unquoted: \"a/\", quoted: '\"a/\"' },\n      },\n      {\n        input: \"/a/\",\n        expected: { unquoted: \"a/\", quoted: '\"a/\"' },\n      },\n      {\n        input: \"/ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a/b\",\n        expected: { unquoted: \"a/b\", quoted: '\"a/b\"' },\n      },\n      {\n        input: \"/a/b\",\n        expected: { unquoted: \"a/b\", quoted: '\"a/b\"' },\n      },\n    ],\n    \"multiple forward slashes (//{2,}/)\": [\n      {\n        input: \"//a\",\n        expected: { unquoted: \"a\", quoted: '\"a\"' },\n      },\n      {\n        input: \"a//\",\n        expected: { unquoted: \"a//\", quoted: '\"a//\"' },\n      },\n      {\n        input: \"//a//\",\n        expected: { unquoted: \"a//\", quoted: '\"a//\"' },\n      },\n      {\n        input: \"//ab\",\n        expected: { unquoted: \"ab\", quoted: '\"ab\"' },\n      },\n      {\n        input: \"a//b\",\n        expected: { unquoted: \"a//b\", quoted: '\"a//b\"' },\n      },\n      {\n        input: \"//a//b\",\n        expected: { unquoted: \"a//b\", quoted: '\"a//b\"' },\n      },\n    ],\n  },\n};\n\nexport const quote = {\n  [binCmd]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\x00\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\x00a\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<backspace> (\\\\b)\": [\n      {\n        input: \"a\\bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\b\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: '\"a b\"',\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: '\"a b c\"',\n      },\n      {\n        input: \"a\\n\",\n        expected: '\"a \"',\n      },\n      {\n        input: \"\\na\",\n        expected: '\" a\"',\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: '\"a b\"',\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: '\"a b c\"',\n      },\n      {\n        input: \"\\ra\",\n        expected: '\" a\"',\n      },\n      {\n        input: \"a\\r\",\n        expected: '\"a \"',\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: '\"a b\"',\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\u001B\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\u009B\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: '\"a\"\"b\"',\n      },\n      {\n        input: 'a\"b\"c',\n        expected: '\"a\"\"b\"\"c\"',\n      },\n    ],\n    \"backticks ('`')\": [\n      {\n        input: \"a`b\",\n        expected: '\"a`b\"',\n      },\n      {\n        input: \"a`b`c\",\n        expected: '\"a`b`c\"',\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: '\"a$b\"',\n      },\n      {\n        input: \"a$b$c\",\n        expected: '\"a$b$c\"',\n      },\n    ],\n    \"percentage signs ('%')\": [\n      {\n        input: \"a%b\",\n        expected: '\"a^%b\"',\n      },\n      {\n        input: \"a%b%c\",\n        expected: '\"a^%b^%c\"',\n      },\n    ],\n    \"left double quotation mark ('\u201c')\": [\n      {\n        input: \"a\u201cb\",\n        expected: '\"a\u201cb\"',\n      },\n      {\n        input: \"a\u201cb\u201cc\",\n        expected: '\"a\u201cb\u201cc\"',\n      },\n    ],\n    \"right double quotation mark ('\u201d')\": [\n      {\n        input: \"a\u201db\",\n        expected: '\"a\u201db\"',\n      },\n      {\n        input: \"a\u201db\u201dc\",\n        expected: '\"a\u201db\u201dc\"',\n      },\n    ],\n    \"double low-9 quotation mark ('\u201e')\": [\n      {\n        input: \"a\u201eb\",\n        expected: '\"a\u201eb\"',\n      },\n      {\n        input: \"a\u201eb\u201ec\",\n        expected: '\"a\u201eb\u201ec\"',\n      },\n    ],\n    \"hyphens ('-')\": [\n      {\n        input: \"-a\",\n        expected: '\"-a\"',\n      },\n      {\n        input: \"-a-b\",\n        expected: '\"-a-b\"',\n      },\n      {\n        input: \"a-b\",\n        expected: '\"a-b\"',\n      },\n      {\n        input: \"a-b-c\",\n        expected: '\"a-b-c\"',\n      },\n    ],\n  },\n  [binPowerShell]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\x00\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\x00a\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<backspace> (\\\\b)\": [\n      {\n        input: \"a\\bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\b\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: '\"a\\nb\"',\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: '\"a\\nb\\nc\"',\n      },\n      {\n        input: \"a\\n\",\n        expected: '\"a\\n\"',\n      },\n      {\n        input: \"\\na\",\n        expected: '\"\\na\"',\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"\\ra\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"a\\r\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: '\"a\\r\\nb\"',\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\u001B\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: '\"ab\"',\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: '\"abc\"',\n      },\n      {\n        input: \"a\\u009B\",\n        expected: '\"a\"',\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: '\"a\"',\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: '\"a\"\"b\"',\n      },\n      {\n        input: 'a\"b\"c',\n        expected: '\"a\"\"b\"\"c\"',\n      },\n    ],\n    \"backticks ('`')\": [\n      {\n        input: \"a`b\",\n        expected: '\"a``b\"',\n      },\n      {\n        input: \"a`b`c\",\n        expected: '\"a``b``c\"',\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: '\"a`$b\"',\n      },\n      {\n        input: \"a$b$c\",\n        expected: '\"a`$b`$c\"',\n      },\n    ],\n    \"percentage signs ('%')\": [\n      {\n        input: \"a%b\",\n        expected: '\"a%b\"',\n      },\n      {\n        input: \"a%b%c\",\n        expected: '\"a%b%c\"',\n      },\n    ],\n    \"left double quotation mark ('\u201c')\": [\n      {\n        input: \"a\u201cb\",\n        expected: '\"a\u201c\u201cb\"',\n      },\n      {\n        input: \"a\u201cb\u201cc\",\n        expected: '\"a\u201c\u201cb\u201c\u201cc\"',\n      },\n    ],\n    \"right double quotation mark ('\u201d')\": [\n      {\n        input: \"a\u201db\",\n        expected: '\"a\u201d\u201db\"',\n      },\n      {\n        input: \"a\u201db\u201dc\",\n        expected: '\"a\u201d\u201db\u201d\u201dc\"',\n      },\n    ],\n    \"double low-9 quotation mark ('\u201e')\": [\n      {\n        input: \"a\u201eb\",\n        expected: '\"a\u201e\u201eb\"',\n      },\n      {\n        input: \"a\u201eb\u201ec\",\n        expected: '\"a\u201e\u201eb\u201e\u201ec\"',\n      },\n    ],\n    \"hyphens ('-')\": [\n      {\n        input: \"-a\",\n        expected: '\"-a\"',\n      },\n      {\n        input: \"-a-b\",\n        expected: '\"-a-b\"',\n      },\n      {\n        input: \"a-b\",\n        expected: '\"a-b\"',\n      },\n      {\n        input: \"a-b-c\",\n        expected: '\"a-b-c\"',\n      },\n      {\n        input: \"a -b\",\n        expected: '\"a -b\"',\n      },\n      {\n        input: \"a\\t-b\",\n        expected: '\"a\\t-b\"',\n      },\n      {\n        input: \"a\\u0085-b\",\n        expected: '\"a\\u0085-b\"',\n      },\n    ],\n  },\n};\n", "/**\n * @overview Provides utilities for fuzzing.\n * @license MIT\n */\n\nconst process = require(\"node:process\");\n\nrequire(\"dotenv\").config();\n\nconst constants = require(\"../_constants.cjs\");\n\nconst ECHO_SCRIPT = constants.echoScript;\n\n/**\n * Checks if the fuzz shell is CMD.\n *\n * @param {string} shell The configured shell.\n * @returns {boolean} `true` if `shell` is CMD, `false` otherwise.\n */\nfunction isShellCmd(shell) {\n  return (\n    (constants.isWindows && [undefined, true, false].includes(shell)) ||\n    /cmd\\.exe$/u.test(shell)\n  );\n}\n\n/**\n * Checks if the fuzz shell is the C shell.\n *\n * @param {string} shell The configured shell.\n * @returns {boolean} `true` if `shell` is csh, `false` otherwise.\n */\nfunction isShellCsh(shell) {\n  return /csh$/u.test(shell);\n}\n\n/**\n * Checks if the fuzz shell is PowerShell.\n *\n * @param {string} shell The configured shell.\n * @returns {boolean} `true` if `shell` is PowerShell, `false` otherwise.\n */\nfunction isShellPowerShell(shell) {\n  return /powershell\\.exe$/u.test(shell);\n}\n\n/**\n * Produces the expected echoed output.\n *\n * @param {object} args The function arguments.\n * @param {string} args.arg The input argument that was echoed.\n * @param {boolean} args.quoted Was `arg` quoted prior to echoing.\n * @param {string} args.shell The shell used for echoing.\n * @param {boolean} normalizeWhitespace Whether whitespace should be normalized.\n * @returns {string} The expected echoed value.\n */\nfunction getExpectedOutput({ arg, quoted, shell }, normalizeWhitespace) {\n  // Remove control characters, like Shescape\n  arg = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");\n\n  // Replace newline characters, like Shescape\n  if (isShellCmd(shell) || isShellCsh(shell)) {\n    arg = arg.replace(/\\r?\\n|\\r/gu, \" \");\n  } else {\n    arg = arg.replace(/\\r(?!\\n)/gu, \"\");\n  }\n\n  // Adjust % for shell when quoted\n  if (isShellCmd(shell) && quoted) {\n    arg = arg.replace(/%/gu, \"^%\");\n  }\n\n  if (normalizeWhitespace) {\n    // Replace newline characters, like Shescape\n    if (!isShellCmd(shell)) {\n      arg = arg.replace(/\\r?\\n/gu, \" \");\n    }\n\n    // Convert whitespace between arguments, like the shell\n    if (isShellCmd(shell)) {\n      arg = arg.replace(/[\\t ]+/gu, \" \");\n    }\n\n    // Trim the string, like the shell\n    if (isShellPowerShell(shell)) {\n      arg = arg.replace(/^[\\s\\u0085]+/gu, \"\");\n    } else if (isShellCmd(shell)) {\n      arg = arg.replace(/^[\\t\\n\\r ]+|(?<![\\t\\n\\r ])[\\t\\n\\r ]+$/gu, \"\");\n    }\n  }\n\n  arg = `${arg}\\n`; // Append a newline, like the echo script\n  return arg;\n}\n\n/**\n * Returns the shell configured to be used for fuzzing.\n *\n * @returns {string | undefined} The configured shell, or `undefined`.\n */\nfunction getFuzzShell() {\n  return process.env.FUZZ_SHELL || undefined;\n}\n\n/**\n * Prepares an argument for echoing to accommodate shell-specific behaviour.\n *\n * @param {object} args The function arguments.\n * @param {string} args.arg The input argument that will be echoed.\n * @param {boolean} args.quoted Will `arg` be quoted prior to echoing.\n * @param {string} args.shell The shell to be used for echoing.\n * @param {boolean} disableExtraWindowsPreparations Disable Windows prep.\n * @returns {string} The prepared `arg`.\n */\nfunction prepareArg({ arg, quoted, shell }, disableExtraWindowsPreparations) {\n  if (constants.isWindows && !disableExtraWindowsPreparations) {\n    // Node on Windows ...\n    if (isShellCmd(shell)) {\n      // ... in CMD, depending on if the argument is quotes ...\n      if (quoted) {\n        // ... interprets arguments with `\\\"` as `\"` so we escape the `\\`.\n        arg = arg.replace(\n          /(?<!\\\\)((?:\\\\[\\0\\u0008\\u001B\\u009B]*)+)(?=\"|$)/gu,\n          \"$1$1\"\n        );\n      } else {\n        // ... interprets arguments with `\\\"` as `\"` so we escape the `\\` ...\n        arg = arg.replace(\n          /(?<!\\\\)((?:\\\\[\\0\\u0008\\u001B\\u009B]*)+)(?=\")/gu,\n          \"$1$1\"\n        );\n\n        // ... interprets arguments with `\"` as `` so we escape it with `\\`.\n        arg = arg.replace(/\"/gu, `\\\\\"`);\n      }\n    } else if (isShellPowerShell(shell)) {\n      // ... in PowerShell, depending on if there's whitespace in the\n      // argument ...\n      if (\n        (quoted &&\n          /[\\t\\n\\v\\f \\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/u.test(\n            arg\n          )) ||\n        (!quoted &&\n          /(?<!^)[\\t\\n\\v\\f \\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/u.test(\n            arg.replace(/^[\\s\\0\\u0008\\u001B\\u0085\\u009B]+/gu, \"\")\n          ))\n      ) {\n        // ... interprets arguments with `\"` as nothing so we escape it with\n        // extra double quotes as `\"\"` ...\n        arg = arg.replace(/\"/gu, `\"\"`);\n\n        // ... and interprets arguments with `\\\"` as `\"` so we escape the `\\`.\n        arg = arg.replace(\n          /(?<!\\\\)((?:\\\\[\\0\\u0008\\r\\u001B\\u009B]*)+)(?=\"|$)/gu,\n          \"$1$1\"\n        );\n      } else {\n        // ... interprets arguments with `\\\"` as `\"` so we escape the `\\` ...\n        arg = arg.replace(\n          /(?<!\\\\)((?:\\\\[\\0\\u0008\\r\\u001B\\u009B]*)+)(?=\")/gu,\n          \"$1$1\"\n        );\n\n        // ... and interprets arguments with `\"` as nothing so we escape it\n        // with `\\\"`.\n        arg = arg.replace(/\"/gu, `\\\\\"`);\n      }\n    }\n  }\n\n  return arg;\n}\n\nmodule.exports = {\n  ECHO_SCRIPT,\n  isShellPowerShell,\n  getExpectedOutput,\n  getFuzzShell,\n  prepareArg,\n};\n", "/**\n * @overview Provides instances of shescape for testing purposes.\n * @license MPL-2.0\n */\n\nimport { checkedToString, toArrayIfNecessary } from \"./src/reflection.js\";\n\n/**\n * A list of example shell injection strings to test whether or not a function\n * is vulnerable to shell injection.\n *\n * @example\n * for (const injectionString of injectionStrings) {\n *   const result = functionThatIsUsingShescape(injectionString);\n *   assert.equal(result, \"no injection\");\n * }\n */\nexport const injectionStrings = [\n  \"\\x00world\",\n  \"&& ls\",\n  \"'; ls #\",\n  '\"; ls #',\n  \"$PATH\",\n  \"$Env:PATH\",\n  \"%PATH%\",\n];\n\n/**\n * A test stub of shescape that has the same input-output profile as the real\n * shescape implementation.\n *\n * In particular:\n * - Returns a string for all stringable inputs.\n * - Errors on non-stringable inputs.\n * - Converts non-array inputs to single-item arrays where necessary.\n */\nexport const shescape = {\n  escape: (arg, _options) => checkedToString(arg),\n  escapeAll: (args, _options) => {\n    args = toArrayIfNecessary(args);\n    return args.map(shescape.escape);\n  },\n  quote: (arg, _options) => shescape.escape(arg),\n  quoteAll: (args, _options) => shescape.escapeAll(args),\n};\n"], "filenames": ["CHANGELOG.md", "src/win/cmd.js", "test/fixtures/win.js", "test/fuzz/_common.cjs", "testing.js"], "buggy_code_start_loc": [9, 17, 856, 51, 18], "buggy_code_end_loc": [262, 55, 3149, 64, 19], "fixing_code_start_loc": [10, 17, 857, 52, 18], "fixing_code_end_loc": [266, 57, 3190, 71, 27], "type": "CWE-526", "message": "Shescape is a simple shell escape library for JavaScript. An attacker may be able to get read-only access to environment variables. This bug has been patched in version 1.7.1.\n\n\n", "other": {"cve": {"id": "CVE-2023-35931", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-23T20:15:09.357", "lastModified": "2023-07-04T01:55:42.670", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Shescape is a simple shell escape library for JavaScript. An attacker may be able to get read-only access to environment variables. This bug has been patched in version 1.7.1.\n\n\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.1, "baseSeverity": "LOW"}, "exploitabilityScore": 1.6, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-526"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shescape_project:shescape:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.7.1", "matchCriteriaId": "FD2B2F90-B50D-4B40-8397-FA1731E34DB8"}]}]}], "references": [{"url": "https://github.com/ericcornelissen/shescape/commit/d0fce70f987ac0d8331f93cb45d47e79436173ac", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/ericcornelissen/shescape/pull/982", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/ericcornelissen/shescape/releases/tag/v1.7.1", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/ericcornelissen/shescape/security/advisories/GHSA-3g7p-8qhx-mc8r", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ericcornelissen/shescape/commit/d0fce70f987ac0d8331f93cb45d47e79436173ac"}}