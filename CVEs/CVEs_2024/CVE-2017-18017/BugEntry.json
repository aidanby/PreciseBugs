{"buggy_code": ["/*\n * This is a module which is used for setting the MSS option in TCP packets.\n *\n * Copyright (C) 2000 Marc Boucher <marc@mbsi.ca>\n * Copyright (C) 2007 Patrick McHardy <kaber@trash.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n */\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n#include <linux/module.h>\n#include <linux/skbuff.h>\n#include <linux/ip.h>\n#include <linux/gfp.h>\n#include <linux/ipv6.h>\n#include <linux/tcp.h>\n#include <net/dst.h>\n#include <net/flow.h>\n#include <net/ipv6.h>\n#include <net/route.h>\n#include <net/tcp.h>\n\n#include <linux/netfilter_ipv4/ip_tables.h>\n#include <linux/netfilter_ipv6/ip6_tables.h>\n#include <linux/netfilter/x_tables.h>\n#include <linux/netfilter/xt_tcpudp.h>\n#include <linux/netfilter/xt_TCPMSS.h>\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Marc Boucher <marc@mbsi.ca>\");\nMODULE_DESCRIPTION(\"Xtables: TCP Maximum Segment Size (MSS) adjustment\");\nMODULE_ALIAS(\"ipt_TCPMSS\");\nMODULE_ALIAS(\"ip6t_TCPMSS\");\n\nstatic inline unsigned int\noptlen(const u_int8_t *opt, unsigned int offset)\n{\n\t/* Beware zero-length options: make finite progress */\n\tif (opt[offset] <= TCPOPT_NOP || opt[offset+1] == 0)\n\t\treturn 1;\n\telse\n\t\treturn opt[offset+1];\n}\n\nstatic u_int32_t tcpmss_reverse_mtu(struct net *net,\n\t\t\t\t    const struct sk_buff *skb,\n\t\t\t\t    unsigned int family)\n{\n\tstruct flowi fl;\n\tconst struct nf_afinfo *ai;\n\tstruct rtable *rt = NULL;\n\tu_int32_t mtu     = ~0U;\n\n\tif (family == PF_INET) {\n\t\tstruct flowi4 *fl4 = &fl.u.ip4;\n\t\tmemset(fl4, 0, sizeof(*fl4));\n\t\tfl4->daddr = ip_hdr(skb)->saddr;\n\t} else {\n\t\tstruct flowi6 *fl6 = &fl.u.ip6;\n\n\t\tmemset(fl6, 0, sizeof(*fl6));\n\t\tfl6->daddr = ipv6_hdr(skb)->saddr;\n\t}\n\trcu_read_lock();\n\tai = nf_get_afinfo(family);\n\tif (ai != NULL)\n\t\tai->route(net, (struct dst_entry **)&rt, &fl, false);\n\trcu_read_unlock();\n\n\tif (rt != NULL) {\n\t\tmtu = dst_mtu(&rt->dst);\n\t\tdst_release(&rt->dst);\n\t}\n\treturn mtu;\n}\n\nstatic int\ntcpmss_mangle_packet(struct sk_buff *skb,\n\t\t     const struct xt_action_param *par,\n\t\t     unsigned int family,\n\t\t     unsigned int tcphoff,\n\t\t     unsigned int minlen)\n{\n\tconst struct xt_tcpmss_info *info = par->targinfo;\n\tstruct tcphdr *tcph;\n\tint len, tcp_hdrlen;\n\tunsigned int i;\n\t__be16 oldval;\n\tu16 newmss;\n\tu8 *opt;\n\n\t/* This is a fragment, no TCP header is available */\n\tif (par->fragoff != 0)\n\t\treturn 0;\n\n\tif (!skb_make_writable(skb, skb->len))\n\t\treturn -1;\n\n\tlen = skb->len - tcphoff;\n\tif (len < (int)sizeof(struct tcphdr))\n\t\treturn -1;\n\n\ttcph = (struct tcphdr *)(skb_network_header(skb) + tcphoff);\n\ttcp_hdrlen = tcph->doff * 4;\n\n\tif (len < tcp_hdrlen)\n\t\treturn -1;\n\n\tif (info->mss == XT_TCPMSS_CLAMP_PMTU) {\n\t\tstruct net *net = xt_net(par);\n\t\tunsigned int in_mtu = tcpmss_reverse_mtu(net, skb, family);\n\t\tunsigned int min_mtu = min(dst_mtu(skb_dst(skb)), in_mtu);\n\n\t\tif (min_mtu <= minlen) {\n\t\t\tnet_err_ratelimited(\"unknown or invalid path-MTU (%u)\\n\",\n\t\t\t\t\t    min_mtu);\n\t\t\treturn -1;\n\t\t}\n\t\tnewmss = min_mtu - minlen;\n\t} else\n\t\tnewmss = info->mss;\n\n\topt = (u_int8_t *)tcph;\n\tfor (i = sizeof(struct tcphdr); i <= tcp_hdrlen - TCPOLEN_MSS; i += optlen(opt, i)) {\n\t\tif (opt[i] == TCPOPT_MSS && opt[i+1] == TCPOLEN_MSS) {\n\t\t\tu_int16_t oldmss;\n\n\t\t\toldmss = (opt[i+2] << 8) | opt[i+3];\n\n\t\t\t/* Never increase MSS, even when setting it, as\n\t\t\t * doing so results in problems for hosts that rely\n\t\t\t * on MSS being set correctly.\n\t\t\t */\n\t\t\tif (oldmss <= newmss)\n\t\t\t\treturn 0;\n\n\t\t\topt[i+2] = (newmss & 0xff00) >> 8;\n\t\t\topt[i+3] = newmss & 0x00ff;\n\n\t\t\tinet_proto_csum_replace2(&tcph->check, skb,\n\t\t\t\t\t\t htons(oldmss), htons(newmss),\n\t\t\t\t\t\t false);\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/* There is data after the header so the option can't be added\n\t * without moving it, and doing so may make the SYN packet\n\t * itself too large. Accept the packet unmodified instead.\n\t */\n\tif (len > tcp_hdrlen)\n\t\treturn 0;\n\n\t/*\n\t * MSS Option not found ?! add it..\n\t */\n\tif (skb_tailroom(skb) < TCPOLEN_MSS) {\n\t\tif (pskb_expand_head(skb, 0,\n\t\t\t\t     TCPOLEN_MSS - skb_tailroom(skb),\n\t\t\t\t     GFP_ATOMIC))\n\t\t\treturn -1;\n\t\ttcph = (struct tcphdr *)(skb_network_header(skb) + tcphoff);\n\t}\n\n\tskb_put(skb, TCPOLEN_MSS);\n\n\t/*\n\t * IPv4: RFC 1122 states \"If an MSS option is not received at\n\t * connection setup, TCP MUST assume a default send MSS of 536\".\n\t * IPv6: RFC 2460 states IPv6 has a minimum MTU of 1280 and a minimum\n\t * length IPv6 header of 60, ergo the default MSS value is 1220\n\t * Since no MSS was provided, we must use the default values\n\t */\n\tif (xt_family(par) == NFPROTO_IPV4)\n\t\tnewmss = min(newmss, (u16)536);\n\telse\n\t\tnewmss = min(newmss, (u16)1220);\n\n\topt = (u_int8_t *)tcph + sizeof(struct tcphdr);\n\tmemmove(opt + TCPOLEN_MSS, opt, len - sizeof(struct tcphdr));\n\n\tinet_proto_csum_replace2(&tcph->check, skb,\n\t\t\t\t htons(len), htons(len + TCPOLEN_MSS), true);\n\topt[0] = TCPOPT_MSS;\n\topt[1] = TCPOLEN_MSS;\n\topt[2] = (newmss & 0xff00) >> 8;\n\topt[3] = newmss & 0x00ff;\n\n\tinet_proto_csum_replace4(&tcph->check, skb, 0, *((__be32 *)opt), false);\n\n\toldval = ((__be16 *)tcph)[6];\n\ttcph->doff += TCPOLEN_MSS/4;\n\tinet_proto_csum_replace2(&tcph->check, skb,\n\t\t\t\t oldval, ((__be16 *)tcph)[6], false);\n\treturn TCPOLEN_MSS;\n}\n\nstatic unsigned int\ntcpmss_tg4(struct sk_buff *skb, const struct xt_action_param *par)\n{\n\tstruct iphdr *iph = ip_hdr(skb);\n\t__be16 newlen;\n\tint ret;\n\n\tret = tcpmss_mangle_packet(skb, par,\n\t\t\t\t   PF_INET,\n\t\t\t\t   iph->ihl * 4,\n\t\t\t\t   sizeof(*iph) + sizeof(struct tcphdr));\n\tif (ret < 0)\n\t\treturn NF_DROP;\n\tif (ret > 0) {\n\t\tiph = ip_hdr(skb);\n\t\tnewlen = htons(ntohs(iph->tot_len) + ret);\n\t\tcsum_replace2(&iph->check, iph->tot_len, newlen);\n\t\tiph->tot_len = newlen;\n\t}\n\treturn XT_CONTINUE;\n}\n\n#if IS_ENABLED(CONFIG_IP6_NF_IPTABLES)\nstatic unsigned int\ntcpmss_tg6(struct sk_buff *skb, const struct xt_action_param *par)\n{\n\tstruct ipv6hdr *ipv6h = ipv6_hdr(skb);\n\tu8 nexthdr;\n\t__be16 frag_off, oldlen, newlen;\n\tint tcphoff;\n\tint ret;\n\n\tnexthdr = ipv6h->nexthdr;\n\ttcphoff = ipv6_skip_exthdr(skb, sizeof(*ipv6h), &nexthdr, &frag_off);\n\tif (tcphoff < 0)\n\t\treturn NF_DROP;\n\tret = tcpmss_mangle_packet(skb, par,\n\t\t\t\t   PF_INET6,\n\t\t\t\t   tcphoff,\n\t\t\t\t   sizeof(*ipv6h) + sizeof(struct tcphdr));\n\tif (ret < 0)\n\t\treturn NF_DROP;\n\tif (ret > 0) {\n\t\tipv6h = ipv6_hdr(skb);\n\t\toldlen = ipv6h->payload_len;\n\t\tnewlen = htons(ntohs(oldlen) + ret);\n\t\tif (skb->ip_summed == CHECKSUM_COMPLETE)\n\t\t\tskb->csum = csum_add(csum_sub(skb->csum, oldlen),\n\t\t\t\t\t     newlen);\n\t\tipv6h->payload_len = newlen;\n\t}\n\treturn XT_CONTINUE;\n}\n#endif\n\n/* Must specify -p tcp --syn */\nstatic inline bool find_syn_match(const struct xt_entry_match *m)\n{\n\tconst struct xt_tcp *tcpinfo = (const struct xt_tcp *)m->data;\n\n\tif (strcmp(m->u.kernel.match->name, \"tcp\") == 0 &&\n\t    tcpinfo->flg_cmp & TCPHDR_SYN &&\n\t    !(tcpinfo->invflags & XT_TCP_INV_FLAGS))\n\t\treturn true;\n\n\treturn false;\n}\n\nstatic int tcpmss_tg4_check(const struct xt_tgchk_param *par)\n{\n\tconst struct xt_tcpmss_info *info = par->targinfo;\n\tconst struct ipt_entry *e = par->entryinfo;\n\tconst struct xt_entry_match *ematch;\n\n\tif (info->mss == XT_TCPMSS_CLAMP_PMTU &&\n\t    (par->hook_mask & ~((1 << NF_INET_FORWARD) |\n\t\t\t   (1 << NF_INET_LOCAL_OUT) |\n\t\t\t   (1 << NF_INET_POST_ROUTING))) != 0) {\n\t\tpr_info(\"path-MTU clamping only supported in \"\n\t\t\t\"FORWARD, OUTPUT and POSTROUTING hooks\\n\");\n\t\treturn -EINVAL;\n\t}\n\tif (par->nft_compat)\n\t\treturn 0;\n\n\txt_ematch_foreach(ematch, e)\n\t\tif (find_syn_match(ematch))\n\t\t\treturn 0;\n\tpr_info(\"Only works on TCP SYN packets\\n\");\n\treturn -EINVAL;\n}\n\n#if IS_ENABLED(CONFIG_IP6_NF_IPTABLES)\nstatic int tcpmss_tg6_check(const struct xt_tgchk_param *par)\n{\n\tconst struct xt_tcpmss_info *info = par->targinfo;\n\tconst struct ip6t_entry *e = par->entryinfo;\n\tconst struct xt_entry_match *ematch;\n\n\tif (info->mss == XT_TCPMSS_CLAMP_PMTU &&\n\t    (par->hook_mask & ~((1 << NF_INET_FORWARD) |\n\t\t\t   (1 << NF_INET_LOCAL_OUT) |\n\t\t\t   (1 << NF_INET_POST_ROUTING))) != 0) {\n\t\tpr_info(\"path-MTU clamping only supported in \"\n\t\t\t\"FORWARD, OUTPUT and POSTROUTING hooks\\n\");\n\t\treturn -EINVAL;\n\t}\n\tif (par->nft_compat)\n\t\treturn 0;\n\n\txt_ematch_foreach(ematch, e)\n\t\tif (find_syn_match(ematch))\n\t\t\treturn 0;\n\tpr_info(\"Only works on TCP SYN packets\\n\");\n\treturn -EINVAL;\n}\n#endif\n\nstatic struct xt_target tcpmss_tg_reg[] __read_mostly = {\n\t{\n\t\t.family\t\t= NFPROTO_IPV4,\n\t\t.name\t\t= \"TCPMSS\",\n\t\t.checkentry\t= tcpmss_tg4_check,\n\t\t.target\t\t= tcpmss_tg4,\n\t\t.targetsize\t= sizeof(struct xt_tcpmss_info),\n\t\t.proto\t\t= IPPROTO_TCP,\n\t\t.me\t\t= THIS_MODULE,\n\t},\n#if IS_ENABLED(CONFIG_IP6_NF_IPTABLES)\n\t{\n\t\t.family\t\t= NFPROTO_IPV6,\n\t\t.name\t\t= \"TCPMSS\",\n\t\t.checkentry\t= tcpmss_tg6_check,\n\t\t.target\t\t= tcpmss_tg6,\n\t\t.targetsize\t= sizeof(struct xt_tcpmss_info),\n\t\t.proto\t\t= IPPROTO_TCP,\n\t\t.me\t\t= THIS_MODULE,\n\t},\n#endif\n};\n\nstatic int __init tcpmss_tg_init(void)\n{\n\treturn xt_register_targets(tcpmss_tg_reg, ARRAY_SIZE(tcpmss_tg_reg));\n}\n\nstatic void __exit tcpmss_tg_exit(void)\n{\n\txt_unregister_targets(tcpmss_tg_reg, ARRAY_SIZE(tcpmss_tg_reg));\n}\n\nmodule_init(tcpmss_tg_init);\nmodule_exit(tcpmss_tg_exit);\n"], "fixing_code": ["/*\n * This is a module which is used for setting the MSS option in TCP packets.\n *\n * Copyright (C) 2000 Marc Boucher <marc@mbsi.ca>\n * Copyright (C) 2007 Patrick McHardy <kaber@trash.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n */\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n#include <linux/module.h>\n#include <linux/skbuff.h>\n#include <linux/ip.h>\n#include <linux/gfp.h>\n#include <linux/ipv6.h>\n#include <linux/tcp.h>\n#include <net/dst.h>\n#include <net/flow.h>\n#include <net/ipv6.h>\n#include <net/route.h>\n#include <net/tcp.h>\n\n#include <linux/netfilter_ipv4/ip_tables.h>\n#include <linux/netfilter_ipv6/ip6_tables.h>\n#include <linux/netfilter/x_tables.h>\n#include <linux/netfilter/xt_tcpudp.h>\n#include <linux/netfilter/xt_TCPMSS.h>\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Marc Boucher <marc@mbsi.ca>\");\nMODULE_DESCRIPTION(\"Xtables: TCP Maximum Segment Size (MSS) adjustment\");\nMODULE_ALIAS(\"ipt_TCPMSS\");\nMODULE_ALIAS(\"ip6t_TCPMSS\");\n\nstatic inline unsigned int\noptlen(const u_int8_t *opt, unsigned int offset)\n{\n\t/* Beware zero-length options: make finite progress */\n\tif (opt[offset] <= TCPOPT_NOP || opt[offset+1] == 0)\n\t\treturn 1;\n\telse\n\t\treturn opt[offset+1];\n}\n\nstatic u_int32_t tcpmss_reverse_mtu(struct net *net,\n\t\t\t\t    const struct sk_buff *skb,\n\t\t\t\t    unsigned int family)\n{\n\tstruct flowi fl;\n\tconst struct nf_afinfo *ai;\n\tstruct rtable *rt = NULL;\n\tu_int32_t mtu     = ~0U;\n\n\tif (family == PF_INET) {\n\t\tstruct flowi4 *fl4 = &fl.u.ip4;\n\t\tmemset(fl4, 0, sizeof(*fl4));\n\t\tfl4->daddr = ip_hdr(skb)->saddr;\n\t} else {\n\t\tstruct flowi6 *fl6 = &fl.u.ip6;\n\n\t\tmemset(fl6, 0, sizeof(*fl6));\n\t\tfl6->daddr = ipv6_hdr(skb)->saddr;\n\t}\n\trcu_read_lock();\n\tai = nf_get_afinfo(family);\n\tif (ai != NULL)\n\t\tai->route(net, (struct dst_entry **)&rt, &fl, false);\n\trcu_read_unlock();\n\n\tif (rt != NULL) {\n\t\tmtu = dst_mtu(&rt->dst);\n\t\tdst_release(&rt->dst);\n\t}\n\treturn mtu;\n}\n\nstatic int\ntcpmss_mangle_packet(struct sk_buff *skb,\n\t\t     const struct xt_action_param *par,\n\t\t     unsigned int family,\n\t\t     unsigned int tcphoff,\n\t\t     unsigned int minlen)\n{\n\tconst struct xt_tcpmss_info *info = par->targinfo;\n\tstruct tcphdr *tcph;\n\tint len, tcp_hdrlen;\n\tunsigned int i;\n\t__be16 oldval;\n\tu16 newmss;\n\tu8 *opt;\n\n\t/* This is a fragment, no TCP header is available */\n\tif (par->fragoff != 0)\n\t\treturn 0;\n\n\tif (!skb_make_writable(skb, skb->len))\n\t\treturn -1;\n\n\tlen = skb->len - tcphoff;\n\tif (len < (int)sizeof(struct tcphdr))\n\t\treturn -1;\n\n\ttcph = (struct tcphdr *)(skb_network_header(skb) + tcphoff);\n\ttcp_hdrlen = tcph->doff * 4;\n\n\tif (len < tcp_hdrlen || tcp_hdrlen < sizeof(struct tcphdr))\n\t\treturn -1;\n\n\tif (info->mss == XT_TCPMSS_CLAMP_PMTU) {\n\t\tstruct net *net = xt_net(par);\n\t\tunsigned int in_mtu = tcpmss_reverse_mtu(net, skb, family);\n\t\tunsigned int min_mtu = min(dst_mtu(skb_dst(skb)), in_mtu);\n\n\t\tif (min_mtu <= minlen) {\n\t\t\tnet_err_ratelimited(\"unknown or invalid path-MTU (%u)\\n\",\n\t\t\t\t\t    min_mtu);\n\t\t\treturn -1;\n\t\t}\n\t\tnewmss = min_mtu - minlen;\n\t} else\n\t\tnewmss = info->mss;\n\n\topt = (u_int8_t *)tcph;\n\tfor (i = sizeof(struct tcphdr); i <= tcp_hdrlen - TCPOLEN_MSS; i += optlen(opt, i)) {\n\t\tif (opt[i] == TCPOPT_MSS && opt[i+1] == TCPOLEN_MSS) {\n\t\t\tu_int16_t oldmss;\n\n\t\t\toldmss = (opt[i+2] << 8) | opt[i+3];\n\n\t\t\t/* Never increase MSS, even when setting it, as\n\t\t\t * doing so results in problems for hosts that rely\n\t\t\t * on MSS being set correctly.\n\t\t\t */\n\t\t\tif (oldmss <= newmss)\n\t\t\t\treturn 0;\n\n\t\t\topt[i+2] = (newmss & 0xff00) >> 8;\n\t\t\topt[i+3] = newmss & 0x00ff;\n\n\t\t\tinet_proto_csum_replace2(&tcph->check, skb,\n\t\t\t\t\t\t htons(oldmss), htons(newmss),\n\t\t\t\t\t\t false);\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/* There is data after the header so the option can't be added\n\t * without moving it, and doing so may make the SYN packet\n\t * itself too large. Accept the packet unmodified instead.\n\t */\n\tif (len > tcp_hdrlen)\n\t\treturn 0;\n\n\t/* tcph->doff has 4 bits, do not wrap it to 0 */\n\tif (tcp_hdrlen >= 15 * 4)\n\t\treturn 0;\n\n\t/*\n\t * MSS Option not found ?! add it..\n\t */\n\tif (skb_tailroom(skb) < TCPOLEN_MSS) {\n\t\tif (pskb_expand_head(skb, 0,\n\t\t\t\t     TCPOLEN_MSS - skb_tailroom(skb),\n\t\t\t\t     GFP_ATOMIC))\n\t\t\treturn -1;\n\t\ttcph = (struct tcphdr *)(skb_network_header(skb) + tcphoff);\n\t}\n\n\tskb_put(skb, TCPOLEN_MSS);\n\n\t/*\n\t * IPv4: RFC 1122 states \"If an MSS option is not received at\n\t * connection setup, TCP MUST assume a default send MSS of 536\".\n\t * IPv6: RFC 2460 states IPv6 has a minimum MTU of 1280 and a minimum\n\t * length IPv6 header of 60, ergo the default MSS value is 1220\n\t * Since no MSS was provided, we must use the default values\n\t */\n\tif (xt_family(par) == NFPROTO_IPV4)\n\t\tnewmss = min(newmss, (u16)536);\n\telse\n\t\tnewmss = min(newmss, (u16)1220);\n\n\topt = (u_int8_t *)tcph + sizeof(struct tcphdr);\n\tmemmove(opt + TCPOLEN_MSS, opt, len - sizeof(struct tcphdr));\n\n\tinet_proto_csum_replace2(&tcph->check, skb,\n\t\t\t\t htons(len), htons(len + TCPOLEN_MSS), true);\n\topt[0] = TCPOPT_MSS;\n\topt[1] = TCPOLEN_MSS;\n\topt[2] = (newmss & 0xff00) >> 8;\n\topt[3] = newmss & 0x00ff;\n\n\tinet_proto_csum_replace4(&tcph->check, skb, 0, *((__be32 *)opt), false);\n\n\toldval = ((__be16 *)tcph)[6];\n\ttcph->doff += TCPOLEN_MSS/4;\n\tinet_proto_csum_replace2(&tcph->check, skb,\n\t\t\t\t oldval, ((__be16 *)tcph)[6], false);\n\treturn TCPOLEN_MSS;\n}\n\nstatic unsigned int\ntcpmss_tg4(struct sk_buff *skb, const struct xt_action_param *par)\n{\n\tstruct iphdr *iph = ip_hdr(skb);\n\t__be16 newlen;\n\tint ret;\n\n\tret = tcpmss_mangle_packet(skb, par,\n\t\t\t\t   PF_INET,\n\t\t\t\t   iph->ihl * 4,\n\t\t\t\t   sizeof(*iph) + sizeof(struct tcphdr));\n\tif (ret < 0)\n\t\treturn NF_DROP;\n\tif (ret > 0) {\n\t\tiph = ip_hdr(skb);\n\t\tnewlen = htons(ntohs(iph->tot_len) + ret);\n\t\tcsum_replace2(&iph->check, iph->tot_len, newlen);\n\t\tiph->tot_len = newlen;\n\t}\n\treturn XT_CONTINUE;\n}\n\n#if IS_ENABLED(CONFIG_IP6_NF_IPTABLES)\nstatic unsigned int\ntcpmss_tg6(struct sk_buff *skb, const struct xt_action_param *par)\n{\n\tstruct ipv6hdr *ipv6h = ipv6_hdr(skb);\n\tu8 nexthdr;\n\t__be16 frag_off, oldlen, newlen;\n\tint tcphoff;\n\tint ret;\n\n\tnexthdr = ipv6h->nexthdr;\n\ttcphoff = ipv6_skip_exthdr(skb, sizeof(*ipv6h), &nexthdr, &frag_off);\n\tif (tcphoff < 0)\n\t\treturn NF_DROP;\n\tret = tcpmss_mangle_packet(skb, par,\n\t\t\t\t   PF_INET6,\n\t\t\t\t   tcphoff,\n\t\t\t\t   sizeof(*ipv6h) + sizeof(struct tcphdr));\n\tif (ret < 0)\n\t\treturn NF_DROP;\n\tif (ret > 0) {\n\t\tipv6h = ipv6_hdr(skb);\n\t\toldlen = ipv6h->payload_len;\n\t\tnewlen = htons(ntohs(oldlen) + ret);\n\t\tif (skb->ip_summed == CHECKSUM_COMPLETE)\n\t\t\tskb->csum = csum_add(csum_sub(skb->csum, oldlen),\n\t\t\t\t\t     newlen);\n\t\tipv6h->payload_len = newlen;\n\t}\n\treturn XT_CONTINUE;\n}\n#endif\n\n/* Must specify -p tcp --syn */\nstatic inline bool find_syn_match(const struct xt_entry_match *m)\n{\n\tconst struct xt_tcp *tcpinfo = (const struct xt_tcp *)m->data;\n\n\tif (strcmp(m->u.kernel.match->name, \"tcp\") == 0 &&\n\t    tcpinfo->flg_cmp & TCPHDR_SYN &&\n\t    !(tcpinfo->invflags & XT_TCP_INV_FLAGS))\n\t\treturn true;\n\n\treturn false;\n}\n\nstatic int tcpmss_tg4_check(const struct xt_tgchk_param *par)\n{\n\tconst struct xt_tcpmss_info *info = par->targinfo;\n\tconst struct ipt_entry *e = par->entryinfo;\n\tconst struct xt_entry_match *ematch;\n\n\tif (info->mss == XT_TCPMSS_CLAMP_PMTU &&\n\t    (par->hook_mask & ~((1 << NF_INET_FORWARD) |\n\t\t\t   (1 << NF_INET_LOCAL_OUT) |\n\t\t\t   (1 << NF_INET_POST_ROUTING))) != 0) {\n\t\tpr_info(\"path-MTU clamping only supported in \"\n\t\t\t\"FORWARD, OUTPUT and POSTROUTING hooks\\n\");\n\t\treturn -EINVAL;\n\t}\n\tif (par->nft_compat)\n\t\treturn 0;\n\n\txt_ematch_foreach(ematch, e)\n\t\tif (find_syn_match(ematch))\n\t\t\treturn 0;\n\tpr_info(\"Only works on TCP SYN packets\\n\");\n\treturn -EINVAL;\n}\n\n#if IS_ENABLED(CONFIG_IP6_NF_IPTABLES)\nstatic int tcpmss_tg6_check(const struct xt_tgchk_param *par)\n{\n\tconst struct xt_tcpmss_info *info = par->targinfo;\n\tconst struct ip6t_entry *e = par->entryinfo;\n\tconst struct xt_entry_match *ematch;\n\n\tif (info->mss == XT_TCPMSS_CLAMP_PMTU &&\n\t    (par->hook_mask & ~((1 << NF_INET_FORWARD) |\n\t\t\t   (1 << NF_INET_LOCAL_OUT) |\n\t\t\t   (1 << NF_INET_POST_ROUTING))) != 0) {\n\t\tpr_info(\"path-MTU clamping only supported in \"\n\t\t\t\"FORWARD, OUTPUT and POSTROUTING hooks\\n\");\n\t\treturn -EINVAL;\n\t}\n\tif (par->nft_compat)\n\t\treturn 0;\n\n\txt_ematch_foreach(ematch, e)\n\t\tif (find_syn_match(ematch))\n\t\t\treturn 0;\n\tpr_info(\"Only works on TCP SYN packets\\n\");\n\treturn -EINVAL;\n}\n#endif\n\nstatic struct xt_target tcpmss_tg_reg[] __read_mostly = {\n\t{\n\t\t.family\t\t= NFPROTO_IPV4,\n\t\t.name\t\t= \"TCPMSS\",\n\t\t.checkentry\t= tcpmss_tg4_check,\n\t\t.target\t\t= tcpmss_tg4,\n\t\t.targetsize\t= sizeof(struct xt_tcpmss_info),\n\t\t.proto\t\t= IPPROTO_TCP,\n\t\t.me\t\t= THIS_MODULE,\n\t},\n#if IS_ENABLED(CONFIG_IP6_NF_IPTABLES)\n\t{\n\t\t.family\t\t= NFPROTO_IPV6,\n\t\t.name\t\t= \"TCPMSS\",\n\t\t.checkentry\t= tcpmss_tg6_check,\n\t\t.target\t\t= tcpmss_tg6,\n\t\t.targetsize\t= sizeof(struct xt_tcpmss_info),\n\t\t.proto\t\t= IPPROTO_TCP,\n\t\t.me\t\t= THIS_MODULE,\n\t},\n#endif\n};\n\nstatic int __init tcpmss_tg_init(void)\n{\n\treturn xt_register_targets(tcpmss_tg_reg, ARRAY_SIZE(tcpmss_tg_reg));\n}\n\nstatic void __exit tcpmss_tg_exit(void)\n{\n\txt_unregister_targets(tcpmss_tg_reg, ARRAY_SIZE(tcpmss_tg_reg));\n}\n\nmodule_init(tcpmss_tg_init);\nmodule_exit(tcpmss_tg_exit);\n"], "filenames": ["net/netfilter/xt_TCPMSS.c"], "buggy_code_start_loc": [107], "buggy_code_end_loc": [152], "fixing_code_start_loc": [107], "fixing_code_end_loc": [157], "type": "CWE-416", "message": "The tcpmss_mangle_packet function in net/netfilter/xt_TCPMSS.c in the Linux kernel before 4.11, and 4.9.x before 4.9.36, allows remote attackers to cause a denial of service (use-after-free and memory corruption) or possibly have unspecified other impact by leveraging the presence of xt_TCPMSS in an iptables action.", "other": {"cve": {"id": "CVE-2017-18017", "sourceIdentifier": "cve@mitre.org", "published": "2018-01-03T06:29:00.517", "lastModified": "2023-01-19T16:26:28.863", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The tcpmss_mangle_packet function in net/netfilter/xt_TCPMSS.c in the Linux kernel before 4.11, and 4.9.x before 4.9.36, allows remote attackers to cause a denial of service (use-after-free and memory corruption) or possibly have unspecified other impact by leveraging the presence of xt_TCPMSS in an iptables action."}, {"lang": "es", "value": "La funci\u00f3n tcpmss_mangle_packet en net/netfilter/xt_TCPMSS.c en el kernel de Linux, en versiones anteriores a la 4.11 y en versiones 4.9.x anteriores a la 4.9.36, permite que atacantes remotos provoquen una denegaci\u00f3n de servicio (uso de memoria previamente liberada y corrupci\u00f3n de memoria) o, posiblemente, otro tipo de impacto sin especificar aprovechando la presencia de xt_TCPMSS en una acci\u00f3n iptables."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 10.0}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-416"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.2", "versionEndExcluding": "3.2.99", "matchCriteriaId": "1CC1F4D9-8598-423F-8BD7-D59F42CDE503"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.3", "versionEndExcluding": "3.10.108", "matchCriteriaId": "7AEC5142-D74C-40FD-9F20-286B9566A40E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.11", "versionEndExcluding": "3.16.54", "matchCriteriaId": "B63FE1A7-0BFF-48C4-8DBA-262DCBC568BC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.17", "versionEndExcluding": "3.18.60", "matchCriteriaId": "0B36DEBD-E96A-4602-85F4-D47720E48DDB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.19", "versionEndExcluding": "4.1.43", "matchCriteriaId": "5F6B255F-0933-4983-B3F6-AD5B128A8F04"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.2", "versionEndExcluding": "4.4.76", "matchCriteriaId": "8816B066-19C8-4CC5-BAB9-77545B026381"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.5", "versionEndExcluding": "4.9.36", "matchCriteriaId": "50810A89-82C2-467A-9026-E695C66E09CE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.10", "versionEndExcluding": "4.11", "matchCriteriaId": "28FFE753-2608-40BE-A218-483B3D8C0241"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:arista:eos:*:*:*:*:*:*:*:*", "matchCriteriaId": "1B40F638-20F7-4AAF-9DD5-5110512382DE"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:f5:arx:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.2.0", "versionEndIncluding": "6.4.0", "matchCriteriaId": "2ADBC8C8-BEA1-464A-BB79-0ADA584DC406"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:suse:caas_platform:*:*:*:*:*:*:*:*", "matchCriteriaId": "40285076-B38C-4993-8AD2-2FC279E664A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:suse:linux_enterprise_debuginfo:11:sp3:*:*:*:*:*:*", "matchCriteriaId": "58D3B6FD-B474-4B09-B644-A8634A629280"}, {"vulnerable": true, "criteria": "cpe:2.3:a:suse:linux_enterprise_debuginfo:11:sp4:*:*:*:*:*:*", "matchCriteriaId": "F892F1B0-514C-42F7-90AE-12ACDFDC1033"}, {"vulnerable": true, "criteria": "cpe:2.3:a:suse:linux_enterprise_module_for_public_cloud:12:*:*:*:*:*:*:*", "matchCriteriaId": "1B8F4626-6942-4A79-BF25-C8AD33A82034"}, {"vulnerable": true, "criteria": "cpe:2.3:a:suse:linux_enterprise_point_of_sale:11:sp3:*:*:*:*:*:*", "matchCriteriaId": "0FC411C9-9A8A-49D0-B704-2207674778CB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:suse:openstack_cloud:6:*:*:*:*:*:*:*", "matchCriteriaId": "53945BEC-81F5-44F8-8035-7A4E5E2DA5B3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.3:*:*:*:*:*:*:*", "matchCriteriaId": "5F65DAB0-3DAD-49FF-BC73-3581CC3D5BF3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_desktop:12:sp2:*:*:*:*:*:*", "matchCriteriaId": "57CFAD92-EECD-417D-ADDB-8178C320B204"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_desktop:12:sp3:*:*:*:*:*:*", "matchCriteriaId": "C1DCD75C-9775-4922-8A44-C4707C640946"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_high_availability:12:sp2:*:*:*:*:*:*", "matchCriteriaId": "4B4F47F0-A116-4844-8A2C-B1D8FD18B27E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_high_availability:12:sp3:*:*:*:*:*:*", "matchCriteriaId": "55C27484-294A-4BF6-B320-1F218E6F0F5A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_high_availability_extension:11:sp4:*:*:*:*:*:*", "matchCriteriaId": "68B0C0E7-98BD-48F8-8F6A-B3B8A820C427"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_live_patching:12:-:*:*:*:*:*:*", "matchCriteriaId": "3FA7DD36-7B56-4749-8850-C351593BEB55"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_live_patching:12:sp3:*:*:*:*:*:*", "matchCriteriaId": "29A2ED76-6702-4C1D-909A-F4F1EB57EEE2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_real_time_extension:11:sp4:*:*:*:*:*:*", "matchCriteriaId": "99A38379-DBD3-4BF6-9A8F-95A3F553AD02"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_real_time_extension:12:sp2:*:*:*:*:*:*", "matchCriteriaId": "154A0D00-12A6-41FD-BF96-43CA3C40F4EE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_real_time_extension:12:sp3:*:*:*:*:*:*", "matchCriteriaId": "A5C1E27D-480B-48DF-B9F5-57C5418B5E1B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:11:sp3:*:*:ltss:*:*:*", "matchCriteriaId": "B12243B2-D726-404C-ABFF-F1AB51BA1783"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:11:sp4:*:*:*:*:*:*", "matchCriteriaId": "55C5561F-BE86-4EEA-99D4-8697F8BD9DFE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:12:*:*:*:ltss:*:*:*", "matchCriteriaId": "B2F3699A-38E4-4E9D-9414-411F71D9E371"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:12:sp1:*:*:*:sap:*:*", "matchCriteriaId": "CFE323D0-8720-45B2-BAF3-6184B8FC00CB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:12:sp1:*:*:ltss:*:*:*", "matchCriteriaId": "0651347C-AE16-4155-98EF-A0A2C63A37A8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:12:sp2:*:*:*:*:*:*", "matchCriteriaId": "F84B2729-7B52-4505-9656-1BD31B980705"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:12:sp2:*:*:*:*:raspberry_pi:*", "matchCriteriaId": "F2681D87-58A9-4A56-BE97-B00C5061CA32"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:12:sp3:*:*:-:-:*:*", "matchCriteriaId": "47FB0003-EFE7-4E9A-8772-27576A771884"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_software_development_kit:11:sp4:*:*:*:*:*:*", "matchCriteriaId": "D41A798E-0D69-43C7-9A63-1E5921138EAC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_software_development_kit:12:sp2:*:*:*:*:*:*", "matchCriteriaId": "5F150BD9-4B94-42D3-9E14-58665B7FF220"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_software_development_kit:12:sp3:*:*:*:*:*:*", "matchCriteriaId": "B779A4B4-0721-4F4C-B3BD-C640BEAB2463"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_workstation_extension:12:sp2:*:*:*:*:*:*", "matchCriteriaId": "85F85F45-1290-44BF-9480-2165A4B40A48"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_workstation_extension:12:sp3:*:*:*:*:*:*", "matchCriteriaId": "B71882EC-6A1E-4394-B4EC-33B9D3440AB8"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openstack:cloud_magnum_orchestration:7:*:*:*:*:*:*:*", "matchCriteriaId": "B27A3E24-7BC2-4EA9-BFAD-987C2CDEF8DA"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:12.04:*:*:*:-:*:*:*", "matchCriteriaId": "CB66DB75-2B16-4EBF-9B93-CE49D8086E41"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:esm:*:*:*", "matchCriteriaId": "815D70A8-47D3-459C-A32C-9FEACA0659D1"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:mrg_realtime:2.0:*:*:*:*:*:*:*", "matchCriteriaId": "AFB0FFE3-4BE1-4024-BCC6-1B87074DE2E3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_desktop:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "EE249E1B-A1FD-4E08-AA71-A0E1F10FFE97"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_desktop:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "33C068A4-3780-4EAB-A937-6082DF847564"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_eus:7.3:*:*:*:*:*:*:*", "matchCriteriaId": "807C024A-F8E8-4B48-A349-4C68CD252CA1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_eus:7.4:*:*:*:*:*:*:*", "matchCriteriaId": "F96E3779-F56A-45FF-BB3D-4980527D721E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_eus:7.6:*:*:*:*:*:*:*", "matchCriteriaId": "5BF3C7A5-9117-42C7-BEA1-4AA378A582EF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_eus:7.7:*:*:*:*:*:*:*", "matchCriteriaId": "83737173-E12E-4641-BC49-0BD84A6B29D0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_for_real_time:7:*:*:*:*:*:*:*", "matchCriteriaId": "C2B15608-BABC-4663-A58F-B74BD2D1A734"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_for_real_time_for_nfv:7:*:*:*:*:*:*:*", "matchCriteriaId": "36E85B24-30F2-42AB-9F68-8668C0FCC5E3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "9BBCD86A-E6C7-4444-9D74-F861084090F0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "51EF4996-72F4-4FA4-814F-F5991E7A8318"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:7.3:*:*:*:*:*:*:*", "matchCriteriaId": "98381E61-F082-4302-B51F-5648884F998B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:7.4:*:*:*:*:*:*:*", "matchCriteriaId": "D99A687E-EAE6-417E-A88E-D0082BC194CD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:7.6:*:*:*:*:*:*:*", "matchCriteriaId": "B353CE99-D57C-465B-AAB0-73EF581127D1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:7.7:*:*:*:*:*:*:*", "matchCriteriaId": "7431ABC1-9252-419E-8CC1-311B41360078"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:7.3:*:*:*:*:*:*:*", "matchCriteriaId": "24C0F4E1-C52C-41E0-9F14-F83ADD5CC7ED"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:7.4:*:*:*:*:*:*:*", "matchCriteriaId": "D5F7E11E-FB34-4467-8919-2B6BEAABF665"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:7.6:*:*:*:*:*:*:*", "matchCriteriaId": "B76AA310-FEC7-497F-AF04-C3EC1E76C4CC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:7.7:*:*:*:*:*:*:*", "matchCriteriaId": "17F256A9-D3B9-4C72-B013-4EFD878BFEA8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_workstation:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "E5ED5807-55B7-47C5-97A6-03233F4FBC3A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_workstation:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "825ECE2D-E232-46E0-A047-074B34DB1E97"}]}]}], "references": [{"url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2638fd0f92d4397884fd991d8f4925cb3f081901", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-02/msg00008.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-02/msg00013.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-02/msg00015.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-02/msg00038.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-02/msg00047.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-03/msg00030.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-03/msg00067.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-03/msg00070.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-03/msg00072.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2018-04/msg00014.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://patchwork.ozlabs.org/patch/746618/", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/102367", "source": "cve@mitre.org", "tags": ["Broken Link", "Third Party Advisory", "VDB Entry"]}, {"url": "http://www.ubuntu.com/usn/USN-3583-1", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-3583-2", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:0676", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1062", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1130", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1170", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1319", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2018:1737", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1739765", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/2638fd0f92d4397884fd991d8f4925cb3f081901", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://help.ecostruxureit.com/display/public/UADCE725/Security+fixes+in+StruxureWare+Data+Center+Expert+v7.6.0", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/05/msg00000.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lkml.org/lkml/2017/4/2/13", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://support.f5.com/csp/article/K18352029", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/3583-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/3583-2/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.arista.com/en/support/advisories-notices/security-advisories/4577-security-advisory-34", "source": "cve@mitre.org", "tags": ["Mitigation", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4187", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.9.36", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/2638fd0f92d4397884fd991d8f4925cb3f081901"}}