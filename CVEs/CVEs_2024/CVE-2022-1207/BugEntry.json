{"buggy_code": ["/* radare2 - LGPL - Copyright 2014-2015 - pancake */\n\n#include <r_asm.h>\n#include <r_lib.h>\n\nstatic int analop(RAnal *a, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAnalOpMask mask) {\n\tint opsize = -1;\n\top->type = -1;\n\topsize = 2;\n\tswitch (buf[0]) {\n\tcase 0x3f:\n\tcase 0x4f:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\topsize = 4;\n\t\tbreak;\n\tcase 0x6f:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\topsize = 6;\n\t\tbreak;\n\tcase 0x7f:\n\t\top->type = R_ANAL_OP_TYPE_LEA;\n\t\tif (len > 5) {\n\t\t\top->ptr = buf[2];\n\t\t\top->ptr |= buf[3]<<8;\n\t\t\top->ptr |= buf[4]<<16;\n\t\t\top->ptr |= ((ut32)(0xff&buf[5]))<<24;\n\t\t\top->ptr += addr;\n\t\t\topsize = 6;\n\t\t} else {\n\t\t\t// error\n\t\t\top->ptr = UT64_MAX;\n\t\t}\n\t\tbreak;\n\tcase 0xbf: // bsr\n\t\top->type = R_ANAL_OP_TYPE_CALL;\n\t\tif (len > 5) {\n\t\t\tst32 delta = buf[2];\n\t\t\tdelta |= buf[3]<<8;\n\t\t\tdelta |= buf[4]<<16;\n\t\t\tdelta |= buf[5]<<24;\n\t\t\top->jump = addr + delta;\n\t\t} else {\n\t\t\top->jump = UT64_MAX;\n\t\t}\n\t\top->fail = addr + 6;\n\t\topsize = 6;\n\t\tbreak;\n\tcase 0x00:\n\t\tif (buf[1] == 0x00) {\n\t\t\top->type = R_ANAL_OP_TYPE_TRAP;\n\t\t} else {\n\t\t\top->type = R_ANAL_OP_TYPE_JMP;\n\t\t\t{\n\t\t\t\tst8 delta = buf[0];\n\t\t\t\top->jump = addr + delta;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 0xf0:\n\t\tif (buf[1]==0xb9) {\n\t\t\top->type = R_ANAL_OP_TYPE_RET;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tswitch (buf[1]) {\n\t\tcase 0x00:\n\t\t\top->type = R_ANAL_OP_TYPE_CJMP; // BCC\n\t\t\tbreak;\n\t\tcase 0xf3:\n\t\t\top->type = R_ANAL_OP_TYPE_SHR;\n\t\t\tbreak;\n\t\tcase 0x96: // move.d r, r\n\t\t\tif (buf[0] >=0xc0) {\n\t\t\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\t\t} else {\n\t\t\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0xf2:\n\t\tcase 0x0b:\n\t\tcase 0x72:\n\t\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\t\tbreak;\n\t\tcase 0x05:\n\t\t\tif (buf[0] == 0xb0) {\n\t\t\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x01:\n\t\tcase 0x02:\n\t\tcase 0xc2:\n\t\tcase 0xf5:\n\t\tcase 0x91:\n\t\tcase 0x41:\n\t\tcase 0x61:\n\t\tcase 0x65:\n\t\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\t\tbreak;\n\t\tcase 0x12:\n\t\tcase 0xf6:\n\t\tcase 0xe2:\n\t\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\t\tbreak;\n\t\tcase 0x82: // moveq i, r\n\t\tcase 0xba: // move.d [r], r\n\t\tcase 0xeb: // move.d r, [r]\n\t\tcase 0xc6: // move.d r, r\n\t\tcase 0x92: // moveq i, r\n\t\tcase 0x9b: // move.d i, r\n\t\tcase 0xbe: // move [sp+], srp\n\t\tcase 0x06:\n\t\tcase 0x26:\n\t\tcase 0xfb:\n\t\tcase 0x9a:\n\t\tcase 0xb2:\n\t\tcase 0xda:\n\t\tcase 0x2b:\n\t\tcase 0x6f:\n\t\tcase 0xa2:\n\t\tcase 0x2f:\n\t\tcase 0x8b:\n\t\tcase 0x1b:\n\t\tcase 0xaa:\n\t\tcase 0xa6:\n\t\tcase 0xb6:\n\t\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\t\tbreak;\n\t\tcase 0xe0:\n\t\t\top->type = R_ANAL_OP_TYPE_JMP;\n\t\t\t{\n\t\t\t\tst8 delta = buf[0];\n\t\t\t\top->jump = addr + delta;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x10:\n\t\tcase 0x30:\n\t\tcase 0x20:\n\t\tcase 0x2d:\n\t\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\t\top->jump = addr + buf[0];\n\t\t\top->fail = addr + 2; // delay slot here?\n\t\t\tbreak;\n\t\tcase 0xbf:\n\t\t\top->type = R_ANAL_OP_TYPE_CALL; // bsr\n\t\t\tbreak;\n\t\tcase 0xb9:\n\t\t\top->type = R_ANAL_OP_TYPE_UJMP; // jsr reg\n\t\t\tbreak;\n\t\t}\n\t}\n#if 0\n\tswitch (*buf) {\n\tcase 0x3f: // adds.w N, R\n\t\topsize = 4;\n\tcase 0x01:\n\tcase 0x53: // addi, acr.w, r3, acr\n\tcase 0x04:\n\tcase 0x61:\n\tcase 0x62:\n\tcase 0x63:\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x88:\n\tcase 0x84:\n\tcase 0x81:\n\tcase 0x8c:\n\tcase 0xad:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0x7f: // lapc <addr>, <reg>\n\t\top->type = R_ANAL_OP_TYPE_LEA;\n\t\tbreak;\n\tcase 0xcf:\n\tcase 0xbe:\n\tcase 0x60:\n\tcase 0x6f:\n\tcase 0x6a: // move.d reg, reg\n\tcase 0x7e:\n\tcase 0xfe:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x00:\n\t\top->type = R_ANAL_OP_TYPE_JMP;\n\t\t// jsr acr\n\t\tbreak;\n\tcase 0xff:\n\t\topsize = 6;\n\tcase 0x14:\n\tcase 0x0e:\n\tcase 0x1a:\n\tcase 0x9c:\n\tcase 0x6d: // bne\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\t// jsr acr\n\t\tbreak;\n\tcase 0xbf:\n\t\topsize = 6;\n\tcase 0xb1:\n\tcase 0xb2:\n\tcase 0xb3:\n\tcase 0xb4:\n\tcase 0xb5:\n\tcase 0xb6:\n\tcase 0xb7:\n\tcase 0xb8:\n\tcase 0xb9:\n\t\top->type = R_ANAL_OP_TYPE_UJMP;\n\t\t// jsr acr\n\t\tbreak;\n\tcase 0x8f: // test.b [acr]\n\tcase 0xc0:\n\tcase 0xe1:\n\tcase 0xaa:\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\tbreak;\n\tdefault:\n\t\tswitch (*w) {\n\t\tcase 0xb0b9: //// jsr r0\n\t\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\t\tbreak;\n\t\tcase 0xb005:\n\t\tcase 0x05b0:\n\t\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\t\tbreak;\n\t\tcase 0xf0b9:\n\t\tcase 0xb9f0:\n\t\t\top->type = R_ANAL_OP_TYPE_RET;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\t\tbreak;\n\t\t}\n\t}\n#endif\n\top->size = opsize;\n\t//op->delay = 1;\n\treturn opsize;\n}\n\nstatic bool set_reg_profile(RAnal *anal) {\n\tconst char *p =\n\t\t\"=PC\tpc\\n\"\n\t\t\"=SP\tr14\\n\" // XXX\n\t\t\"=BP\tsrp\\n\" // XXX\n\t\t\"=A0\tr0\\n\"\n\t\t\"=A1\tr1\\n\"\n\t\t\"=A2\tr2\\n\"\n\t\t\"=A3\tr3\\n\"\n\t\t\"gpr\tsp\t.32\t56\t0\\n\" // r14\n\t\t\"gpr\tacr\t.32\t60\t0\\n\" // r15\n\t\t\"gpr\tpc\t.32\t64\t0\\n\" // r16 // out of context\n\t\t\"gpr\tsrp\t.32\t68\t0\\n\" // like rbp on x86 // out of context\n\t\t// GPR\n\t\t\"gpr\tr0\t.32\t0\t0\\n\"\n\t\t\"gpr\tr1\t.32\t4\t0\\n\"\n\t\t\"gpr\tr2\t.32\t8\t0\\n\"\n\t\t\"gpr\tr3\t.32\t12\t0\\n\"\n\t\t\"gpr\tr4\t.32\t16\t0\\n\"\n\t\t\"gpr\tr5\t.32\t20\t0\\n\"\n\t\t\"gpr\tr6\t.32\t24\t0\\n\"\n\t\t\"gpr\tr7\t.32\t28\t0\\n\"\n\t\t\"gpr\tr8\t.32\t32\t0\\n\"\n\t\t\"gpr\tr9\t.32\t36\t0\\n\"\n\t\t\"gpr\tr10\t.32\t40\t0\\n\"\n\t\t\"gpr\tr11\t.32\t44\t0\\n\"\n\t\t\"gpr\tr12\t.32\t48\t0\\n\"\n\t\t\"gpr\tr13\t.32\t52\t0\\n\"\n\n\t\t// STACK POINTER\n\t\t\"gpr\tr14\t.32\t56\t0\\n\"\n\t\t\"gpr\tr15\t.32\t60\t0\\n\"\n\t\t// ADD P REGISTERS\n\t\t;\n\treturn r_reg_set_profile_string (anal->reg, p);\n}\n\nRAnalPlugin r_anal_plugin_cris = {\n\t.name = \"cris\",\n\t.desc = \"Axis Communications 32-bit embedded processor\",\n\t.license = \"LGPL3\",\n\t.esil = false,\n\t.arch = \"cris\",\n\t.set_reg_profile = set_reg_profile,\n\t.bits = 32,\n\t.op = &analop,\n};\n\n#ifndef R2_PLUGIN_INCORE\nR_API RLibStruct radare_plugin = {\n\t.type = R_LIB_TYPE_ANAL,\n\t.data = &r_anal_plugin_cris,\n\t.version = R2_VERSION\n};\n#endif\n"], "fixing_code": ["/* radare2 - LGPL - Copyright 2014-2022 - pancake */\n\n#include <r_asm.h>\n#include <r_lib.h>\n\nstatic int analop(RAnal *a, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAnalOpMask mask) {\n\tint opsize = -1;\n\top->type = -1;\n\topsize = 2;\n\tif (len < 1) {\n\t\treturn -1;\n\t}\n\tswitch (buf[0]) {\n\tcase 0x3f:\n\tcase 0x4f:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\topsize = 4;\n\t\tbreak;\n\tcase 0x6f:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\topsize = 6;\n\t\tbreak;\n\tcase 0x7f:\n\t\top->type = R_ANAL_OP_TYPE_LEA;\n\t\tif (len > 5) {\n\t\t\top->ptr = buf[2];\n\t\t\top->ptr |= buf[3] << 8;\n\t\t\top->ptr |= buf[4] << 16;\n\t\t\top->ptr |= ((ut32)(0xff & buf[5])) << 24;\n\t\t\top->ptr += addr;\n\t\t\topsize = 6;\n\t\t} else {\n\t\t\t// error\n\t\t\top->ptr = UT64_MAX;\n\t\t}\n\t\tbreak;\n\tcase 0xbf: // bsr\n\t\top->type = R_ANAL_OP_TYPE_CALL;\n\t\tif (len > 5) {\n\t\t\tst32 delta = buf[2];\n\t\t\tdelta |= buf[3] << 8;\n\t\t\tdelta |= buf[4] << 16;\n\t\t\tdelta |= buf[5] << 24;\n\t\t\top->jump = addr + delta;\n\t\t} else {\n\t\t\top->jump = UT64_MAX;\n\t\t}\n\t\top->fail = addr + 6;\n\t\topsize = 6;\n\t\tbreak;\n\tcase 0x00:\n\t\tif (len < 2) {\n\t\t\tbreak;\n\t\t}\n\t\tif (buf[1] == 0x00) {\n\t\t\top->type = R_ANAL_OP_TYPE_TRAP;\n\t\t} else {\n\t\t\top->type = R_ANAL_OP_TYPE_JMP;\n\t\t\t{\n\t\t\t\tst8 delta = buf[0];\n\t\t\t\top->jump = addr + delta;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 0xf0:\n\t\tif (len < 2) {\n\t\t\tbreak;\n\t\t}\n\t\tif (buf[1] == 0xb9) {\n\t\t\top->type = R_ANAL_OP_TYPE_RET;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tif (len < 2) {\n\t\t\tbreak;\n\t\t}\n\t\tswitch (buf[1]) {\n\t\tcase 0x00:\n\t\t\top->type = R_ANAL_OP_TYPE_CJMP; // BCC\n\t\t\tbreak;\n\t\tcase 0xf3:\n\t\t\top->type = R_ANAL_OP_TYPE_SHR;\n\t\t\tbreak;\n\t\tcase 0x96: // move.d r, r\n\t\t\tif (buf[0] >= 0xc0) {\n\t\t\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\t\t} else {\n\t\t\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0xf2:\n\t\tcase 0x0b:\n\t\tcase 0x72:\n\t\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\t\tbreak;\n\t\tcase 0x05:\n\t\t\tif (buf[0] == 0xb0) {\n\t\t\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x01:\n\t\tcase 0x02:\n\t\tcase 0xc2:\n\t\tcase 0xf5:\n\t\tcase 0x91:\n\t\tcase 0x41:\n\t\tcase 0x61:\n\t\tcase 0x65:\n\t\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\t\tbreak;\n\t\tcase 0x12:\n\t\tcase 0xf6:\n\t\tcase 0xe2:\n\t\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\t\tbreak;\n\t\tcase 0x82: // moveq i, r\n\t\tcase 0xba: // move.d [r], r\n\t\tcase 0xeb: // move.d r, [r]\n\t\tcase 0xc6: // move.d r, r\n\t\tcase 0x92: // moveq i, r\n\t\tcase 0x9b: // move.d i, r\n\t\tcase 0xbe: // move [sp+], srp\n\t\tcase 0x06:\n\t\tcase 0x26:\n\t\tcase 0xfb:\n\t\tcase 0x9a:\n\t\tcase 0xb2:\n\t\tcase 0xda:\n\t\tcase 0x2b:\n\t\tcase 0x6f:\n\t\tcase 0xa2:\n\t\tcase 0x2f:\n\t\tcase 0x8b:\n\t\tcase 0x1b:\n\t\tcase 0xaa:\n\t\tcase 0xa6:\n\t\tcase 0xb6:\n\t\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\t\tbreak;\n\t\tcase 0xe0:\n\t\t\top->type = R_ANAL_OP_TYPE_JMP;\n\t\t\t{\n\t\t\t\tst8 delta = buf[0];\n\t\t\t\top->jump = addr + delta;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x10:\n\t\tcase 0x30:\n\t\tcase 0x20:\n\t\tcase 0x2d:\n\t\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\t\top->jump = addr + buf[0];\n\t\t\top->fail = addr + 2; // delay slot here?\n\t\t\tbreak;\n\t\tcase 0xbf:\n\t\t\top->type = R_ANAL_OP_TYPE_CALL; // bsr\n\t\t\tbreak;\n\t\tcase 0xb9:\n\t\t\top->type = R_ANAL_OP_TYPE_UJMP; // jsr reg\n\t\t\tbreak;\n\t\t}\n\t}\n#if 0\n\tswitch (*buf) {\n\tcase 0x3f: // adds.w N, R\n\t\topsize = 4;\n\tcase 0x01:\n\tcase 0x53: // addi, acr.w, r3, acr\n\tcase 0x04:\n\tcase 0x61:\n\tcase 0x62:\n\tcase 0x63:\n\t\top->type = R_ANAL_OP_TYPE_ADD;\n\t\tbreak;\n\tcase 0x88:\n\tcase 0x84:\n\tcase 0x81:\n\tcase 0x8c:\n\tcase 0xad:\n\t\top->type = R_ANAL_OP_TYPE_SUB;\n\t\tbreak;\n\tcase 0x7f: // lapc <addr>, <reg>\n\t\top->type = R_ANAL_OP_TYPE_LEA;\n\t\tbreak;\n\tcase 0xcf:\n\tcase 0xbe:\n\tcase 0x60:\n\tcase 0x6f:\n\tcase 0x6a: // move.d reg, reg\n\tcase 0x7e:\n\tcase 0xfe:\n\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\tbreak;\n\tcase 0x00:\n\t\top->type = R_ANAL_OP_TYPE_JMP;\n\t\t// jsr acr\n\t\tbreak;\n\tcase 0xff:\n\t\topsize = 6;\n\tcase 0x14:\n\tcase 0x0e:\n\tcase 0x1a:\n\tcase 0x9c:\n\tcase 0x6d: // bne\n\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\t// jsr acr\n\t\tbreak;\n\tcase 0xbf:\n\t\topsize = 6;\n\tcase 0xb1:\n\tcase 0xb2:\n\tcase 0xb3:\n\tcase 0xb4:\n\tcase 0xb5:\n\tcase 0xb6:\n\tcase 0xb7:\n\tcase 0xb8:\n\tcase 0xb9:\n\t\top->type = R_ANAL_OP_TYPE_UJMP;\n\t\t// jsr acr\n\t\tbreak;\n\tcase 0x8f: // test.b [acr]\n\tcase 0xc0:\n\tcase 0xe1:\n\tcase 0xaa:\n\t\top->type = R_ANAL_OP_TYPE_CMP;\n\t\tbreak;\n\tdefault:\n\t\tswitch (*w) {\n\t\tcase 0xb0b9: //// jsr r0\n\t\t\top->type = R_ANAL_OP_TYPE_CJMP;\n\t\t\tbreak;\n\t\tcase 0xb005:\n\t\tcase 0x05b0:\n\t\t\top->type = R_ANAL_OP_TYPE_NOP;\n\t\t\tbreak;\n\t\tcase 0xf0b9:\n\t\tcase 0xb9f0:\n\t\t\top->type = R_ANAL_OP_TYPE_RET;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\top->type = R_ANAL_OP_TYPE_MOV;\n\t\t\tbreak;\n\t\t}\n\t}\n#endif\n\top->size = opsize;\n\t//op->delay = 1;\n\treturn opsize;\n}\n\nstatic bool set_reg_profile(RAnal *anal) {\n\tconst char *p =\n\t\t\"=PC\tpc\\n\"\n\t\t\"=SP\tr14\\n\" // XXX\n\t\t\"=BP\tsrp\\n\" // XXX\n\t\t\"=SN\tr0\\n\"\n\t\t\"=A0\tr0\\n\"\n\t\t\"=A1\tr1\\n\"\n\t\t\"=A2\tr2\\n\"\n\t\t\"=A3\tr3\\n\"\n\t\t\"gpr\tsp\t.32\t56\t0\\n\" // r14\n\t\t\"gpr\tacr\t.32\t60\t0\\n\" // r15\n\t\t\"gpr\tpc\t.32\t64\t0\\n\" // r16 // out of context\n\t\t\"gpr\tsrp\t.32\t68\t0\\n\" // like rbp on x86 // out of context\n\t\t// GPR\n\t\t\"gpr\tr0\t.32\t0\t0\\n\"\n\t\t\"gpr\tr1\t.32\t4\t0\\n\"\n\t\t\"gpr\tr2\t.32\t8\t0\\n\"\n\t\t\"gpr\tr3\t.32\t12\t0\\n\"\n\t\t\"gpr\tr4\t.32\t16\t0\\n\"\n\t\t\"gpr\tr5\t.32\t20\t0\\n\"\n\t\t\"gpr\tr6\t.32\t24\t0\\n\"\n\t\t\"gpr\tr7\t.32\t28\t0\\n\"\n\t\t\"gpr\tr8\t.32\t32\t0\\n\"\n\t\t\"gpr\tr9\t.32\t36\t0\\n\"\n\t\t\"gpr\tr10\t.32\t40\t0\\n\"\n\t\t\"gpr\tr11\t.32\t44\t0\\n\"\n\t\t\"gpr\tr12\t.32\t48\t0\\n\"\n\t\t\"gpr\tr13\t.32\t52\t0\\n\"\n\n\t\t// STACK POINTER\n\t\t\"gpr\tr14\t.32\t56\t0\\n\"\n\t\t\"gpr\tr15\t.32\t60\t0\\n\"\n\t\t// ADD P REGISTERS\n\t\t;\n\treturn r_reg_set_profile_string (anal->reg, p);\n}\n\nRAnalPlugin r_anal_plugin_cris = {\n\t.name = \"cris\",\n\t.desc = \"Axis Communications 32-bit embedded processor\",\n\t.license = \"LGPL3\",\n\t.esil = false,\n\t.arch = \"cris\",\n\t.set_reg_profile = set_reg_profile,\n\t.bits = 32,\n\t.op = &analop,\n};\n\n#ifndef R2_PLUGIN_INCORE\nR_API RLibStruct radare_plugin = {\n\t.type = R_LIB_TYPE_ANAL,\n\t.data = &r_anal_plugin_cris,\n\t.version = R2_VERSION\n};\n#endif\n"], "filenames": ["libr/anal/p/anal_cris.c"], "buggy_code_start_loc": [1], "buggy_code_end_loc": [244], "fixing_code_start_loc": [1], "fixing_code_end_loc": [258], "type": "CWE-125", "message": "Out-of-bounds read in GitHub repository radareorg/radare2 prior to 5.6.8. This vulnerability allows attackers to read sensitive information from outside the allocated buffer boundary.", "other": {"cve": {"id": "CVE-2022-1207", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-01T19:15:07.777", "lastModified": "2022-04-08T16:53:51.460", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Out-of-bounds read in GitHub repository radareorg/radare2 prior to 5.6.8. This vulnerability allows attackers to read sensitive information from outside the allocated buffer boundary."}, {"lang": "es", "value": "Una lectura fuera de l\u00edmites en el repositorio de GitHub radareorg/radare2 versiones anteriores a 5.6.8. Esta vulnerabilidad permite a atacantes leer informaci\u00f3n confidencial desde fuera del l\u00edmite del b\u00fafer asignado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:radare:radare2:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.6.8", "matchCriteriaId": "8956009B-4EDA-4AA6-997D-B2C8C5D05CEC"}]}]}], "references": [{"url": "https://github.com/radareorg/radare2/commit/605785b65dd356d46d4487faa41dbf90943b8bc1", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/7b979e76-ae54-4132-b455-0833e45195eb", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/radareorg/radare2/commit/605785b65dd356d46d4487faa41dbf90943b8bc1"}}