{"buggy_code": ["*** WooSidebars Changelog ***\n\n2015.02.17 - version 1.4.1\n * Fix - Fixes an error notice on the homepage, caused by the tag check logic.\n   /classes/class-woo-conditions.php\n\n2015.02.17 - version 1.4.0\n * New - Adds a condition to change the widget area for all posts tagged with a selected tag.\n   /classes/class-woo-conditions.php\n\n2013.08.13 - version 1.3.1\n * /classes/class-woo-conditions.php - Re-introduce add_post_meta() instead of update_post_meta() when saving conditions. Using update_post_meta() prevents multiple conditions from being saved.\n\n2013.08.12 - version 1.3.0\n * /assets/css/admin.css - Replace all instances of #woo-conditions with #woosidebars-conditions to match the renamed meta box. Add basic jQueryUI styling reset to prevent visual inconsistency when jQueryUI is loaded via a third-party plugin.\n * /assets/js/admin.js - Adjust the JavaScript logic to use the new \"woosidebars-conditions\" selector instead of \"woo-conditions\" for toggling advanced options on and off.\n * /classes/class-woo-conditions.php - Rename \"woo-conditions\" meta box to \"woosidebars-conditions\". Fixes display bug with the WPML \"Multilingual Content Setup\" meta box. Replaces all instances of &$this with $this. Introduces upper_limit property and woosidebars_upper_limit filter. Addresses logic for the \"single\" condition type.\n * /classes/class-woo-sidebars.php - Replaces all instances of &$this with $this. Introduces upper_limit property and woosidebars_upper_limit filter.\n\n2013.03.08 - version 1.2.2\n * /classes/class-woo-sidebars.php - Changed capability for displaying the \"Widget Areas\" menu to use \"edit_theme_options\" instead of \"switch_themes\".\n * /assets/css/admin.css - Minor styling adjustments. Fixes admin styling when jquery-ui-fresh CSS is loaded by other plugins.\n\n2013.01.09 - version 1.2.1\n * /classes/class-woo-conditions.php - Update script version. Update conditions meta box HTML to move the \"advanced\" button to it's own list instead of being a part of the tabs. Add \"post_type\" condition without the \"post-type-\" prefix. Fixes the \"Template Hierarchy -> Pages\" bug.\n * /classes/class-woo-sidebars.php - If WordPress SEO is active, remove the unused meta box styling, as it conflicts with the custom WooSidebars meta box styling. Set \"has_archive\" to \"sidebars\". Make sure only users with the \"switch_themes\" capability can see the \"Widget Areas\" admin menu.\n * /assets/js/admin.js - Adjust admin JavaScript to work with updated conditions meta box HTML.\n\n2012.08.14 - version 1.1.2\n * /integrations/integration-woocommerce.php - Added logic to stop undefined index notices in foreach(). Prevent direct file access.\n * /classes/class.wooconditions.php,\n   /classes/class.woosidebars.php - Prevent direct file access.\n * /classes/class.updater.php - Prevent direct file access. Return $false instead of false when checking for updates, if not WooSidebars.\n * /lang/woosidebars-en_GB.po - Rescanned language file.\n * /lang/woosidebars-xx_XX.pot - Rescanned language template file.\n * woosidebars.php - Prevent direct file access. Update stable tag.\n * index.php - Added to prevent directory listing.\n\n2012.05.23 - version 1.1.0\n * /classes/class.woosidebars.php - Adjustments to accept integrations.\n * /classes/class.wooconditions.php - Adjustments to accept integrations.\n * /integrations/integration-woocommerce.php - Initial WooCommerce integration, if WooCommerce is active.\n * woosidebars.php - Load WooCommerce integration, if WooCommerce is active.\n\n2012.04.11 - version 1.0.0\n * Initial release. Woo!\n", "<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\n/**\n * WooSidebars Base Class\n *\n * All functionality pertaining to core functionality of the WooSidebars plugin.\n *\n * @package WordPress\n * @subpackage WooSidebars\n * @author WooThemes\n * @since 1.0.0\n *\n * TABLE OF CONTENTS\n *\n * public $version\n * private $file\n * public $upper_limit\n *\n * private $token\n * private $prefix\n * public $conditions\n *\n * private $plugin_url\n * private $assets_url\n *\n * - __construct()\n * - init()\n * - register_post_type_columns()\n * - register_post_type()\n * - register_custom_columns()\n * - register_custom_column_headings()\n * - meta_box_setup()\n * - meta_box_content()\n * - meta_box_save()\n * - description_meta_box()\n * - enter_title_here()\n * - update_messages()\n * - get_registered_sidebars()\n * - register_custom_sidebars()\n * - init_sidebar_replacement()\n * - replace_sidebars()\n * - find_best_sidebars()\n * - enqueue_styles()\n * - add_post_column_headings()\n * - add_post_column_data()\n * - enable_custom_post_sidebars()\n * - multidimensional_search()\n * - add_contextual_help()\n *\n * - load_localisation()\n * - activation()\n * - register_plugin_version()\n */\nclass Woo_Sidebars {\n\tpublic $version;\n\tprivate $file;\n\tpublic $upper_limit;\n\n\tprivate $token;\n\tprivate $prefix;\n\tpublic $conditions;\n\n\tprivate $plugin_url;\n\tprivate $assets_url;\n\n\t/**\n\t * __construct function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function __construct ( $file ) {\n\t\t$this->version = '';\n\t\t$this->file = $file;\n\t\t$this->upper_limit = intval( apply_filters( 'woosidebars_upper_limit', 200 ) );\n\n\t\t$this->token = 'sidebar';\n\t\t$this->prefix = 'woo_sidebar_';\n\n\t\t/* Plugin URL/path settings. */\n\t\t$this->plugin_url = str_replace( '/classes', '', plugins_url( plugin_basename( dirname( __FILE__ ) ) ) );\n\t\t$this->assets_url = $this->plugin_url . '/assets';\n\n\t\t$this->conditions = new Woo_Conditions();\n\t\t$this->conditions->token = $this->token;\n\t} // End __construct()\n\n\t/**\n\t * init function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function init () {\n\t\tadd_action( 'init', array( $this, 'load_localisation' ) );\n\n\t\tadd_action( 'init', array( $this, 'register_post_type' ), 20 );\n\t\tadd_action( 'admin_menu', array( $this, 'meta_box_setup' ), 20 );\n\t\tadd_action( 'save_post', array( $this, 'meta_box_save' ) );\n\t\tadd_filter( 'enter_title_here', array( $this, 'enter_title_here' ) );\n\t\tadd_filter( 'post_updated_messages', array( $this, 'update_messages' ) );\n\t\tadd_action( 'widgets_init', array( $this, 'register_custom_sidebars' ) );\n\t\tadd_action( 'get_header', array( $this, 'init_sidebar_replacement' ) );\n\n\t\tif ( is_admin() ) {\n\t\t\tglobal $pagenow;\n\n\t\t\tadd_action( 'admin_print_styles', array( $this, 'enqueue_styles' ), 12 );\n\t\t\tadd_action( 'admin_head', array( $this, 'add_contextual_help' ) );\n\t\t\tif ( $pagenow == 'edit.php' && isset( $_GET['post_type'] ) && esc_attr( $_GET['post_type'] ) == $this->token ) {\n\t\t\t\tadd_filter( 'manage_edit-' . $this->token . '_columns', array( $this, 'register_custom_column_headings' ), 10, 1 );\n\t\t\t\tadd_action( 'manage_posts_custom_column', array( $this, 'register_custom_columns' ), 10, 2 );\n\t\t\t}\n\t\t}\n\n\t\t// By default, add post type support for sidebars to the \"post\" post type.\n\t\tadd_post_type_support( 'post', 'woosidebars' );\n\n\t\tadd_action( 'admin_head', array( $this, 'register_post_type_columns' ) );\n\n\t\tadd_action( 'wp_ajax_woosidebars-post-enable', array( $this, 'enable_custom_post_sidebars' ) );\n\n\t\t// Run this on activation.\n\t\tregister_activation_hook( $this->file, array( $this, 'activation' ) );\n\t} // End init()\n\n\t/**\n\t * register_post_type_columns function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function register_post_type_columns () {\n\t\t$post_type = get_post_type();\n\n\t\tif ( $post_type != '' && post_type_supports( $post_type, 'woosidebars' ) ) {\n\t\t\tadd_filter( 'manage_edit-' . $post_type . '_columns', array( $this, 'add_post_column_headings' ), 10, 1 );\n\t\t\tadd_action( 'manage_posts_custom_column', array( $this, 'add_post_column_data' ), 10, 2 );\n\t\t\tadd_action( 'manage_pages_custom_column', array( $this, 'add_post_column_data' ), 10, 2 );\n\t\t}\n\t} // End register_post_type_columns()\n\n\t/**\n\t * register_post_type function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function register_post_type () {\n\t\t// Allow only users who can adjust the theme to view the WooSidebars admin.\n\t\tif ( ! current_user_can( 'edit_theme_options' ) ) return;\n\n\t\t$page = 'themes.php';\n\n\t\t$singular = __( 'Widget Area', 'woosidebars' );\n\t\t$plural = __( 'Widget Areas', 'woosidebars' );\n\t\t$rewrite = array( 'slug' => 'sidebars' );\n\t\t$supports = array( 'title', 'excerpt' );\n\n\t\tif ( $rewrite == '' ) { $rewrite = $this->token; }\n\n\t\t$labels = array(\n\t\t\t'name' => _x( 'Widget Areas', 'post type general name', 'woosidebars' ),\n\t\t\t'singular_name' => _x( 'Widget Area', 'post type singular name', 'woosidebars' ),\n\t\t\t'add_new' => _x( 'Add New', 'Widget Area' ),\n\t\t\t'add_new_item' => sprintf( __( 'Add New %s', 'woosidebars' ), $singular ),\n\t\t\t'edit_item' => sprintf( __( 'Edit %s', 'woosidebars' ), $singular ),\n\t\t\t'new_item' => sprintf( __( 'New %s', 'woosidebars' ), $singular ),\n\t\t\t'all_items' => sprintf( __( 'Widget Areas', 'woosidebars' ), $plural ),\n\t\t\t'view_item' => sprintf( __( 'View %s', 'woosidebars' ), $singular ),\n\t\t\t'search_items' => sprintf( __( 'Search %a', 'woosidebars' ), $plural ),\n\t\t\t'not_found' =>  sprintf( __( 'No %s Found', 'woosidebars' ), $plural ),\n\t\t\t'not_found_in_trash' => sprintf( __( 'No %s Found In Trash', 'woosidebars' ), $plural ),\n\t\t\t'parent_item_colon' => '',\n\t\t\t'menu_name' => $plural\n\n\t\t);\n\t\t$args = array(\n\t\t\t'labels' => $labels,\n\t\t\t'public' => false,\n\t\t\t'publicly_queryable' => true,\n\t\t\t'show_ui' => true,\n\t\t\t'show_in_nav_menus' => false,\n\t\t\t'show_in_admin_bar' => false,\n\t\t\t'show_in_menu' => $page,\n\t\t\t'query_var' => true,\n\t\t\t'rewrite' => $rewrite,\n\t\t\t'capability_type' => 'post',\n\t\t\t'has_archive' => 'sidebars',\n\t\t\t'hierarchical' => false,\n\t\t\t'menu_position' => null,\n\t\t\t'supports' => $supports\n\t\t);\n\t\tregister_post_type( $this->token, $args );\n\t} // End register_post_type()\n\n\t/**\n\t * register_custom_columns function.\n\t *\n\t * @access public\n\t * @param string $column_name\n\t * @param int $id\n\t * @return void\n\t */\n\tpublic function register_custom_columns ( $column_name, $id ) {\n\t\tglobal $wpdb, $post;\n\n\t\t$meta = get_post_custom( $id );\n\t\t$sidebars = $this->get_registered_sidebars();\n\n\t\t$this->conditions->setup_default_conditions_reference();\n\n\t\tswitch ( $column_name ) {\n\n\t\t\tcase 'sidebar_to_replace':\n\t\t\t\t$value = '';\n\n\t\t\t\tif ( isset( $meta['_sidebar_to_replace'] ) && ( $meta['_sidebar_to_replace'][0] != '' ) ) {\n\t\t\t\t\t$value = $meta['_sidebar_to_replace'][0];\n\n\t\t\t\t\tif ( isset( $sidebars[$value] ) ) {\n\t\t\t\t\t\t$value = $sidebars[$value]['name'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$value .= '<br /><strong>' . __( '(Not in use by current theme)', 'woosidebars' ) . '</strong>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\techo $value;\n\t\t\tbreak;\n\n\t\t\tcase 'condition':\n\t\t\t\t$value = '';\n\n\t\t\t\tif ( isset( $meta['_condition'] ) && ( $meta['_condition'][0] != '' ) ) {\n\t\t\t\t\tforeach ( $meta['_condition'] as $k => $v ) {\n\t\t\t\t\t\t$value .= $this->multidimensional_search( $v, $this->conditions->conditions_reference ) . '<br />' . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\techo $value;\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\tbreak;\n\n\t\t}\n\t} // End register_custom_columns()\n\n\t/**\n\t * register_custom_column_headings function.\n\t *\n\t * @access public\n\t * @param array $defaults\n\t * @return void\n\t */\n\tpublic function register_custom_column_headings ( $defaults ) {\n\t\t$this->conditions->setup_default_conditions_reference();\n\n\t\t$new_columns = array( 'sidebar_to_replace' => __( 'Sidebar To Replace', 'woosidebars' ), 'condition' => __( 'Condition(s)', 'woosidebars' ) );\n\n\t\t$last_item = '';\n\n\t\tif ( isset( $defaults['date'] ) ) { unset( $defaults['date'] ); }\n\n\t\tif ( count( $defaults ) > 2 ) {\n\t\t\t$last_item = array_slice( $defaults, -1 );\n\n\t\t\tarray_pop( $defaults );\n\t\t}\n\t\t$defaults = array_merge( $defaults, $new_columns );\n\n\t\tif ( $last_item != '' ) {\n\t\t\tforeach ( $last_item as $k => $v ) {\n\t\t\t\t$defaults[$k] = $v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn $defaults;\n\t} // End register_custom_column_headings()\n\n\t/**\n\t * meta_box_setup function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function meta_box_setup () {\n\t\tadd_meta_box( 'sidebar-to-replace', __( 'Sidebar To Replace', 'woosidebars' ), array( $this, 'meta_box_content' ), $this->token, 'side', 'low' );\n\n\t\t// Remove \"Custom Settings\" meta box.\n\t\tremove_meta_box( 'woothemes-settings', 'sidebar', 'normal' );\n\n\t\t// Customise the \"Excerpt\" meta box for the sidebars.\n\t\tremove_meta_box( 'postexcerpt', $this->token, 'normal' );\n\t\tadd_meta_box( 'sidebar-description', __( 'Description', 'woosidebars' ), array( $this, 'description_meta_box' ), $this->token, 'normal', 'core' );\n\t} // End meta_box_setup()\n\n\t/**\n\t * meta_box_content function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function meta_box_content () {\n\t\tglobal $post_id;\n\n\t\t$sidebars = $this->get_registered_sidebars();\n\n\t\t$selected_sidebar = get_post_meta( $post_id, '_sidebar_to_replace', true );\n\n\t\t$html = '';\n\n\t\t$html .= '<input type=\"hidden\" name=\"woo_' . $this->token . '_noonce\" id=\"woo_' . $this->token . '_noonce\" value=\"' . wp_create_nonce( plugin_basename(__FILE__) ) . '\" />';\n\n\t\tif ( count( $sidebars ) > 0 ) {\n\t\t\t$html .= '<select name=\"sidebar_to_replace\" class=\"widefat\">' . \"\\n\";\n\t\t\t\tforeach ( $sidebars as $k => $v ) {\n\t\t\t\t\t$html .= '<option value=\"' . $v['id'] . '\"' . selected( $selected_sidebar, $v['id'], false ) . '>' . $v['name'] . '</option>' . \"\\n\";\n\t\t\t\t}\n\t\t\t$html .= '</select>' . \"\\n\";\n\t\t} else {\n\t\t\t$html .= '<p>' . __( 'No sidebars are available with this theme.', 'woosidebars' ) . '</p>';\n\t\t}\n\n\t\techo $html;\n\n\t} // End meta_box_content()\n\n\t/**\n\t * meta_box_save function.\n\t *\n\t * @access public\n\t * @param int $post_id\n\t * @return void\n\t */\n\tpublic function meta_box_save ( $post_id ) {\n\t\tglobal $post, $messages;\n\n\t\t// Verify\n\t\tif ( ( get_post_type() != $this->token ) || ! wp_verify_nonce( $_POST['woo_' . $this->token . '_noonce'], plugin_basename( __FILE__ ) ) ) {\n\t\t\treturn $post_id;\n\t\t}\n\n\t\tif ( 'page' == $_POST['post_type'] ) {\n\t\t\tif ( ! current_user_can( 'edit_page', $post_id ) ) {\n\t\t\t\treturn $post_id;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\t\treturn $post_id;\n\t\t\t}\n\t\t}\n\n\t\t$fields = array( 'sidebar_to_replace' );\n\n\t\tforeach ( $fields as $f ) {\n\n\t\t\t${$f} = strip_tags(trim($_POST[$f]));\n\n\t\t\tif ( get_post_meta( $post_id, '_' . $f ) == '' ) {\n\t\t\t\tadd_post_meta( $post_id, '_' . $f, ${$f}, true );\n\t\t\t} elseif( ${$f} != get_post_meta( $post_id, '_' . $f, true ) ) {\n\t\t\t\tupdate_post_meta( $post_id, '_' . $f, ${$f} );\n\t\t\t} elseif ( ${$f} == '' ) {\n\t\t\t\tdelete_post_meta( $post_id, '_' . $f, get_post_meta( $post_id, '_' . $f, true ) );\n\t\t\t}\n\t\t}\n\t} // End meta_box_save()\n\n\t/**\n\t * description_meta_box function.\n\t *\n\t * @param object $post\n\t */\n\tpublic function description_meta_box ( $post ) {\n\t?>\n\t<label class=\"screen-reader-text\" for=\"excerpt\"><?php _e( 'Description', 'woosidebars' ); ?></label><textarea rows=\"1\" cols=\"40\" name=\"excerpt\" tabindex=\"6\" id=\"excerpt\"><?php echo $post->post_excerpt; // textarea_escaped ?></textarea>\n\t<p><?php printf( __( 'Add an optional description, to be displayed when adding widgets to this widget area on the %sWidgets%s screen.', 'woosidebars' ), '<a href=\"' . esc_url( admin_url( 'widgets.php' ) ) . '\">', '</a>' ); ?></p>\n\t<?php\n\t} // End description_meta_box()\n\n\t/**\n\t * enter_title_here function.\n\t *\n\t * @access public\n\t * @param string $title\n\t * @return void\n\t */\n\tpublic function enter_title_here ( $title ) {\n\t\tif ( get_post_type() == $this->token ) {\n\t\t\t$title = __( 'Enter widget area name here', 'woosidebars' );\n\t\t}\n\t\treturn $title;\n\t} // End enter_title_here()\n\n\t/**\n\t * update_messages function.\n\t *\n\t * @access public\n\t * @param array $messages\n\t * @return void\n\t */\n\tpublic function update_messages ( $messages ) {\n\t\tif ( get_post_type() != $this->token ) {\n\t\t\treturn $messages;\n\t\t}\n\n\t\t$messages[$this->token][1] = __( 'Widget Area updated.', 'woosidebars' );\n\n\t\treturn $messages;\n\t} // End update_messages()\n\n\t/**\n\t * get_registered_sidebars function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function get_registered_sidebars () {\n\t\tglobal $wp_registered_sidebars;\n\n\t\t$sidebars = array();\n\t\t$to_ignore = array();\n\n\t\t$custom_sidebars = get_posts( array( 'post_type' => 'sidebar', 'numberposts' => intval( $this->upper_limit ), 'suppress_filters' => 'false' ) );\n\t\tif ( ! is_wp_error( $custom_sidebars ) && count( $custom_sidebars ) > 0 ) {\n\t\t\tforeach ( $custom_sidebars as $k => $v ) {\n\t\t\t\t$to_ignore[] = $v->post_name;\n\t\t\t}\n\t\t}\n\n\t\tif ( is_array( $wp_registered_sidebars ) && ( count( $wp_registered_sidebars ) > 0 ) ) {\n\t\t\tforeach ( $wp_registered_sidebars as $k => $v ) {\n\t\t\t\tif ( ! stristr( $v['id'], $this->prefix ) && ! stristr( $v['id'], 'woo_sbm_' ) && ! in_array( $v['id'], $to_ignore ) ) {\n\t\t\t\t\t$sidebars[$k] = $v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $sidebars;\n\t} // End get_registered_sidebars()\n\n\t/**\n\t * register_custom_sidebars function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function register_custom_sidebars () {\n\t\t$sidebars = get_posts( array( 'post_type' => 'sidebar', 'posts_per_page' => intval( $this->upper_limit ), 'suppress_filters' => 'false' ) );\n\n\t\tif ( count( $sidebars ) > 0 ) {\n\t\t\tforeach ( $sidebars as $k => $v ) {\n\t\t\t\t$sidebar_id = $v->post_name;\n\t\t\t\t// $sidebar_id = $this->prefix . $v->ID;\n\t\t\t\tregister_sidebar( array( 'name' => $v->post_title, 'id' => $sidebar_id, 'description' => $v->post_excerpt ) );\n\t\t\t}\n\t\t}\n\t} // End register_custom_sidebars()\n\n\t/**\n\t * init_sidebar_replacement function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function init_sidebar_replacement () {\n\t\tadd_filter( 'sidebars_widgets', array( $this, 'replace_sidebars' ) );\n\t} // End init_sidebar_replacement()\n\n\t/**\n\t * replace_sidebars function.\n\t *\n\t * @access public\n\t * @param array $sidebars_widgets\n\t * @return void\n\t */\n\tpublic function replace_sidebars ( $sidebars_widgets ) {\n\t\tif ( is_admin() ) {\n\t \t\treturn $sidebars_widgets;\n\t \t}\n\n\t\t// Determine the conditions to construct the query.\n\t\t$conditions = $this->conditions->conditions;\n\n\t\tif ( ! isset( $this->conditions->conditions ) || count( $this->conditions->conditions ) <= 0 ) {\n\t\t\treturn $sidebars_widgets;\n\t\t}\n\n\t \tglobal $woo_custom_sidebar_data;\n\n\t \tif ( ! isset( $woo_custom_sidebar_data ) ) {\n\n\t\t \t$conditions_str = join( ', ', $conditions );\n\n\t\t \t$args = array(\n\t\t \t\t'post_type' => $this->token,\n\t\t \t\t'posts_per_page' => intval( $this->upper_limit ),\n\t\t \t\t'suppress_filters' => 'false'\n\t\t \t);\n\n\t\t \t$meta_query = array(\n\t\t \t\t\t\t\t'key' => '_sidebar_to_replace',\n\t\t \t\t\t\t\t'compare' => '!=',\n\t\t \t\t\t\t\t'value' => ''\n\t\t \t\t\t\t\t);\n\n\t\t \t$args['meta_query'][] = $meta_query;\n\n\t\t \t$meta_query = array(\n\t\t \t\t\t\t\t'key' => '_condition',\n\t\t \t\t\t\t\t'compare' => 'IN',\n\t\t \t\t\t\t\t'value' => $conditions\n\t\t \t\t\t\t\t);\n\n\t\t \t$args['meta_query'][] = $meta_query;\n\n\t\t \t$sidebars = get_posts( $args );\n\n\t\t \tif ( count( $sidebars ) > 0 ) {\n\t\t \t\tforeach ( $sidebars as $k => $v ) {\n\t\t \t\t\t$to_replace = get_post_meta( $v->ID, '_sidebar_to_replace', true );\n\t\t \t\t\t$sidebars[$k]->to_replace = $to_replace;\n\n\t\t \t\t\t$conditions = get_post_meta( $v->ID, '_condition', false );\n\n\t\t \t\t\t$sidebars[$k]->conditions = array();\n\n\t\t \t\t\t// Remove any irrelevant conditions from the array.\n\t\t \t\t\tif ( is_array( $conditions ) ) {\n\t\t \t\t\t\tforeach ( $conditions as $i => $j ) {\n\t\t \t\t\t\t\tif ( in_array( $j, $this->conditions->conditions ) ) {\n\t\t \t\t\t\t\t\t$sidebars[$k]->conditions[] = $j;\n\t\t \t\t\t\t\t}\n\t\t \t\t\t\t}\n\t\t \t\t\t}\n\n\t\t \t\t}\n\t\t \t}\n\n\t\t \t$woo_custom_sidebar_data = $sidebars;\n\t \t}\n\n\t\t// Make sure only the most appropriate sidebars are kept.\n\t\t// $woo_custom_sidebar_data = $this->remove_unwanted_sidebars( $woo_custom_sidebar_data );\n\t\t$woo_custom_sidebar_data = $this->find_best_sidebars( $woo_custom_sidebar_data );\n\n\t \tif ( count( $woo_custom_sidebar_data ) > 0 ) {\n\t \t\tforeach ( $woo_custom_sidebar_data as $k => $v ) {\n\t \t\t\t$sidebar_id = $v->post_name;\n\t\t\t\t// $sidebar_id = $this->prefix . $v->ID;\n\t \t\t\tif ( isset( $sidebars_widgets[$sidebar_id] ) && isset( $v->to_replace ) && $v->to_replace != '' ) {\n\t\t\t\t \t$widgets = $sidebars_widgets[$sidebar_id];\n\t\t\t\t\tunset( $sidebars_widgets[$sidebar_id] );\n\t\t\t\t\t$sidebars_widgets[$v->to_replace] = $widgets;\n\t\t\t\t}\n\t \t\t}\n\t \t}\n\n\t\treturn $sidebars_widgets;\n\t} // End replace_sidebars()\n\n\t/**\n\t * find_best_sidebars function.\n\t *\n\t * @access public\n\t * @param array $sidebars\n\t * @return array $sorted_sidebars\n\t */\n\tpublic function find_best_sidebars ( $sidebars ) {\n\t\t$sorted_sidebars = array();\n\n\t\tif ( ! isset( $this->conditions->conditions ) || count( $this->conditions->conditions ) <= 0 ) {\n\t\t\treturn $sidebars;\n\t\t}\n\n\t\t// Keep track of each sidebar we'd like to replace widgets for.\n\t\tforeach ( $sidebars as $k => $v ) {\n\t\t\tif ( isset( $v->to_replace ) && ( $v->to_replace != '' ) && ! isset( $sorted_sidebars[$v->to_replace] ) ) {\n\t\t\t\t$sorted_sidebars[$v->to_replace] = '';\n\t\t\t}\n\t\t}\n\n\t\tforeach ( $sidebars as $k => $v ) {\n\t\t\tif ( isset( $sorted_sidebars[$v->to_replace] ) && ( $sorted_sidebars[$v->to_replace] == '' ) ) {\n\t\t\t\t$sorted_sidebars[$v->to_replace] = $v;\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\treturn $sorted_sidebars;\n\t} // End find_best_sidebars()\n\n\t/**\n\t * enqueue_styles function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function enqueue_styles () {\n\t\tglobal $pagenow;\n\n\t\tif ( in_array( $pagenow, array( 'edit.php', 'post.php', 'post-new.php' ) ) ) {\n\t\t\tif ( get_post_type() != $this->token ) { return; }\n\t\t\twp_enqueue_style( 'jquery-ui-tabs' );\n\n\t\t\twp_register_style( $this->token . '-admin', $this->assets_url . '/css/admin.css', array(), '1.0.0' );\n\t\t\twp_enqueue_style( $this->token . '-admin' );\n\n\t\t\twp_dequeue_style( 'jquery-ui-datepicker' );\n\n\t\t\tif ( class_exists( 'WPSEO_Metabox' ) ) {\n\t\t\t\t// Dequeue unused WordPress SEO CSS files.\n\t\t\t\twp_dequeue_style( 'edit-page' );\n\t\t\t\twp_dequeue_style( 'metabox-tabs' );\n\n\t\t\t\t$color = get_user_meta( get_current_user_id(), 'admin_color', true );\n\t\t\t\tif ( '' == $color ) $color = 'fresh';\n\n\t\t\t\twp_dequeue_style( 'metabox-' . $color );\n\t\t\t}\n\t\t}\n\n\t\tif ( in_array( $pagenow, array( 'edit.php' ) ) ) {\n\t\t\twp_register_style( $this->token . '-admin-posts', $this->assets_url . '/css/admin-posts.css', array(), '1.0.0' );\n\t\t\twp_enqueue_style( $this->token . '-admin-posts' );\n\t\t}\n\t} // End enqueue_styles()\n\n\t/**\n\t * add_post_column_headings function.\n\t *\n\t * @access public\n\t * @param array $defaults\n\t * @return array $new_columns\n\t */\n\tpublic function add_post_column_headings ( $defaults ) {\n\t\t$defaults['woosidebars_enable'] = __( 'Custom Sidebars', 'woosidebars' );\n\t\treturn $defaults;\n\t} // End add_post_column_headings()\n\n\t/**\n\t * add_post_column_data function.\n\t *\n\t * @access public\n\t * @param string $column_name\n\t * @param int $id\n\t * @return void\n\t */\n\tpublic function add_post_column_data ( $column_name, $id ) {\n\t\tglobal $wpdb, $post;\n\t\t$meta = get_post_custom( $id );\n\n\t\tswitch ( $column_name ) {\n\t\t\tcase 'woosidebars_enable':\n\t\t\t\t$image = 'success-off';\n\t\t\t\t$value = '';\n\t\t\t\t$class = 'custom-sidebars-disabled';\n\n\t\t\t\tif ( isset( $meta['_enable_sidebar'] ) && ( $meta['_enable_sidebar'][0] != '' ) && ( $meta['_enable_sidebar'][0] == 'yes' ) ) {\n\t\t\t\t\t$image = 'success';\n\t\t\t\t\t$class = 'custom-sidebars-enabled';\n\t\t\t\t}\n\n\t\t\t\t$url = wp_nonce_url( admin_url( 'admin-ajax.php?action=woosidebars-post-enable&post_id=' . $post->ID ), 'woosidebars-post-enable' );\n\t\t\t\t$value = '<span class=\"' . esc_attr( $class ) . '\"><a href=\"' . esc_url( $url ) . '\"><img src=\"' . esc_url( $this->assets_url . '/images/' . $image . '.png' ) . '\" /></a></span>';\n\n\t\t\t\techo $value;\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t} // End add_post_column_data()\n\n\t/**\n\t * enable_custom_post_sidebars function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function enable_custom_post_sidebars () {\n\t\tif( ! is_admin() ) die;\n\t\tif( ! current_user_can( 'edit_posts' ) ) wp_die( __( 'You do not have sufficient permissions to access this page.', 'woosidebars' ) );\n\t\tif( ! check_admin_referer( 'woosidebars-post-enable' ) ) wp_die( __( 'You have taken too long. Please go back and retry.', 'woosidebars' ) );\n\n\t\t$post_id = isset( $_GET['post_id'] ) && (int)$_GET['post_id'] ? (int)$_GET['post_id'] : '';\n\n\t\tif( ! $post_id ) die;\n\n\t\t$post = get_post( $post_id );\n\t\tif( ! $post ) die;\n\n\t\t$meta = get_post_meta( $post->ID, '_enable_sidebar', true );\n\n\t\tif ( $meta == 'yes' ) {\n\t\t\tupdate_post_meta($post->ID, '_enable_sidebar', 'no' );\n\t\t} else {\n\t\t\tupdate_post_meta($post->ID, '_enable_sidebar', 'yes' );\n\t\t}\n\n\t\t$sendback = remove_query_arg( array( 'trashed', 'untrashed', 'deleted', 'ids' ), wp_get_referer() );\n\t\twp_safe_redirect( $sendback );\n\t} // End enable_custom_post_sidebars()\n\n\t/**\n\t * multidimensional_search function.\n\t *\n\t * @access public\n\t * @param string $needle\n\t * @param array $haystack\n\t * @return string $m\n\t */\n\tpublic function multidimensional_search ( $needle, $haystack ) {\n\t\tif (empty( $needle ) || empty( $haystack ) ) {\n            return false;\n        }\n\n        foreach ( $haystack as $key => $value ) {\n            $exists = 0;\n        \tforeach ( (array)$needle as $nkey => $nvalue) {\n                if ( ! empty( $value[$nvalue] ) && is_array( $value[$nvalue] ) ) {\n                    return $value[$nvalue]['label'];\n                }\n            }\n        }\n\n        return false;\n\t} // End multidimensional_search()\n\n\t/**\n\t * add_contextual_help function.\n\t *\n\t * @description Add contextual help to the current screen.\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function add_contextual_help () {\n\t\tif ( get_current_screen()->id != 'edit-sidebar' ) { return; }\n\n\t\tget_current_screen()->add_help_tab( array(\n\t\t'id'\t\t=> 'overview',\n\t\t'title'\t\t=> __( 'Overview', 'woosidebars' ),\n\t\t'content'\t=>\n\t\t\t'<p>' . __( 'All custom widget areas are listed on this screen. To add a new customised widget area, click the \"Add New\" button.', 'woosidebars' ) . '</p>'\n\t\t) );\n\t\tget_current_screen()->add_help_tab( array(\n\t\t'id'\t\t=> 'wooframework-sbm',\n\t\t'title'\t\t=> __( 'Sidebar Manager', 'woosidebars' ),\n\t\t'content'\t=>\n\t\t\t'<p>' . __( 'WooSidebars is intended to replace the Sidebar Manager found in the WooFramework. Please ensure that all sidebars have been transferred over from the Sidebar Manager, if you choose to use WooSidebars instead.', 'woosidebars' ) . '</p>' .\n\t\t\t'<p>' . __( 'To transfer a sidebar from the Sidebar Manager:', 'woosidebars' ) . '</p>' .\n\t\t\t'<ul>' . \"\\n\" .\n\t\t\t'<li>' . __( 'Create a new custom widget area in WooSidebars.', 'woosidebars' ) . '</li>' . \"\\n\" .\n\t\t\t'<li>' . sprintf( __( 'Visit the %sAppearance &rarr; Widgets%s screen and drag the widgets from the old sidebar into the newly created sidebar.', 'woosidebars' ), '<a href=\"' . esc_url( admin_url( 'widgets.php' ) ) . '\">', '</a>' ) . '</li>' . \"\\n\" .\n\t\t\t'<li>' . __( 'Repeat this process for each of your custom sidebars, including dependencies if necessary (the WooSidebars conditions system replaces the need for dependencies).', 'woosidebars' ) . '</li>' . \"\\n\" .\n\t\t\t'<li>' . __( 'Once you are certain that you widgets have been moved across for all widget areas, remove the sidebar from the Sidebar Manager (don\\'t forget to transfer any dependencies over as well, if necessary).', 'woosidebars' ) . '</li>' . \"\\n\" .\n\t\t\t'</ul>' . \"\\n\"\n\t\t) );\n\n\t\tget_current_screen()->set_help_sidebar(\n\t\t'<p><strong>' . __( 'For more information:', 'woosidebars' ) . '</strong></p>' .\n\t\t'<p><a href=\"http://support.woothemes.com/?ref=' . 'woosidebars' . '\" target=\"_blank\">' . __( 'Support HelpDesk', 'woosidebars' ) . '</a></p>' .\n\t\t'<p><a href=\"http://docs.woothemes.com/document/woosidebars/?ref=' . 'woosidebars' . '\" target=\"_blank\">' . __( 'WooSidebars Documentation', 'woosidebars' ) . '</a></p>'\n\t\t);\n\t} // End add_contextual_help()\n\n\t/**\n\t * load_localisation function.\n\t *\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function load_localisation () {\n\t\t$lang_dir = trailingslashit( str_replace( 'classes', 'lang', plugin_basename( dirname(__FILE__) ) ) );\n\t\tload_plugin_textdomain( 'woosidebars', false, $lang_dir );\n\t} // End load_localisation()\n\n\t/**\n\t * activation function.\n\t *\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function activation () {\n\t\t$this->register_plugin_version();\n\t} // End activation()\n\n\t/**\n\t * register_plugin_version function.\n\t *\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function register_plugin_version () {\n\t\tif ( $this->version != '' ) {\n\t\t\tupdate_option( 'woosidebars' . '-version', $this->version );\n\t\t}\n\t} // End register_plugin_version()\n} // End Class\n?>", "=== WooSidebars ===\nContributors: woothemes, mattyza\nTags: widgets, sidebars, widget-areas\nRequires at least: 3.3\nTested up to: 4.1.0\nStable tag: 1.4.1\nLicense: GPLv3 or later\nLicense URI: http://www.gnu.org/licenses/gpl-3.0.html\n\nWooSidebars adds functionality to display different widgets in a sidebar, according to a context (for example, a specific page or a category).\n\n== Description ==\n\nWith WooSidebars, it's possible to change the widgets that display in a sidebar (widgetized area) according to a context (for example, a specific page, a specific blog post, certain categories or the search results screen). Setting up a custom widget area to display across multiple conditions is as easy as a few clicks.\n\n[vimeo http://vimeo.com/42980663]\n\nLooking for a helping hand? [View plugin documentation](http://docs.woothemes.com/documentation/plugins/woosidebars/).\n\nLooking to contribute code to this plugin? [Fork the repository over at GitHub](http://github.com/woothemes/woosidebars/). Please also read the CONTRIBUTING.md file, bundled within this plugin.\n\n== Installation ==\n\n= Minimum Requirements =\n\n* WordPress 3.3 or greater\n* PHP version 5.2.4 or greater\n* MySQL version 5.0 or greater\n\n= Automatic installation =\n\nAutomatic installation is the easiest option as WordPress handles the file transfers itself and you don\u2019t even need to leave your web browser. To do an automatic install of WooSidebars, log in to your WordPress admin panel, navigate to the Plugins menu and click Add New.\n\nIn the search field type \"WooSidebars\" and click Search Plugins. Once you\u2019ve found our widget areas plugin you can view details about it such as the the point release, rating and description. Most importantly of course, you can install it by simply clicking Install Now. After clicking that link you will be asked if you\u2019re sure you want to install the plugin. Click yes and WordPress will automatically complete the installation.\n\n= Manual installation =\n\nThe manual installation method involves downloading WooSidebars and uploading it to your webserver via your favourite FTP application.\n\n1. Download the plugin file to your computer and unzip it\n2. Using an FTP program, or your hosting control panel, upload the unzipped plugin folder to your WordPress installation\u2019s wp-content/plugins/ directory.\n3. Activate the plugin from the Plugins menu within the WordPress admin.\n\n= Where to go after installation =\n\nOnce WooSidebars has been installed and activated, please visit the \"Appearance -> Widget Areas\" screen to begin adding custom widget areas.\n\n= Upgrading =\n\nAutomatic updates should work a charm; as always though, ensure you backup your site just in case.\n\n== Frequently Asked Questions ==\n\n= Where can I find WooSidebars documentation and user guides? =\n\nFor further documentation on using WooSidebars, please view the [WooSidebars Documentation](http://docs.woothemes.com/documentation/plugins/woosidebars/).\n\n= Will WooSidebars work with my theme? =\n\nYes; WooSidebars will work with any theme that supports dynamic widget areas.\n\n= How can I contribute to WooSidebars development? =\n\nLooking to contribute code to this plugin? [Fork the repository over at GitHub](http://github.com/woothemes/woosidebars/).\n(submit pull requests to the \"develop\" branch)\n\n== Screenshots ==\n\n1. The list of custom widget areas.\n2. Adding a custom widget area.\n\n== Upgrade Notice ==\n\n= 1.4.1 =\nFixes an error notice on the homepage, caused by the tag check logic.\n\n= 1.4.0 =\nWordPress 3.8 compatibility.\nAdds \"posts tagged with\" condition.\n\n= 1.3.1 =\nBug fix to ensure multiple conditions save correctly.\n\n= 1.3.0 =\nOptimisation update.\n\n= 1.2.2 =\n\"Widget Areas\" menu is now only visible to users who can add/modify widgets.\n\n= 1.2.1 =\nUpdated for WordPress 3.5+ compatibility. Adjusted \"Advanced\" tab logic. Fixed bug where \"Template Hierarchy -> Pages\" condition wasn't being applied correctly. Dequeue WordPress SEO admin stylesheets from the \"Widget Areas\" \"Add\" and \"Edit\" screens.\n\n= 1.2.0 =\nMoved to WordPress.org. Woo! Added scope to methods and properties where missing.\n\n== Changelog ==\n\n= 1.4.1 =\n* 2015-02-17\nFixes an error notice on the homepage, caused by the tag check logic.\n\n= 1.4.0 =\n* 2015-02-17\n* WordPress 3.8 compatibility.\n* Adds \"posts tagged with\" condition.\n\n\n= 1.3.1 =\n* 2013-08-13\n* Bug fix to ensure multiple conditions save correctly.\n\n= 1.3.0 =\n* 2013-08-12\n* Introduces woosidebars_upper_limit filter, used on all database queries, to control scaling.\n* Fixes several PHP notices for \"undefined index\".\n* Fixes \"single\" condition, where a small section of logic was missing for determining if the condition applied to the current screen being loaded.\n* Optimises admin-side JavaScript and CSS.\n\n= 1.2.2 =\n* 2013-03-08\n* Changes capability for displaying the menu to \"edit_theme_options\" in line with the \"Widgets\" menu capability.\n\n= 1.2.1 =\n* 2013-01-09\n* Updated admin JavaScript for WordPress 3.5+ compatibility. Moved \"Advanced\" tab outside of the tabs list.\n* Fixed bug with the \"Template Hierarchy -> Pages\" condition that wasn't applying.\n* When WordPress SEO is active, dequeue unused stylesheets on the \"Widget Areas\" \"add\" and \"edit\" screens.\n\n= 1.2.0 =\n* Renamed files according to standards naming convention.\n* Added scope to methods and properties where missing.\n\n= 1.1.2 =\n* Routine hardening and maintenance update. Fixed notice message in WooCommerce integration.\n\n= 1.1.1 =\n* Fix notice displayed on WooCommerce product pages from the WooSidebars integration.\n\n= 1.1.0 =\n* Initial WooCommerce integration.\n\n= 1.0.0 =\n* First release. Woo!", "<?php\n/**\n * Plugin Name: WooSidebars\n * Plugin URI: http://woothemes.com/woosidebars/\n * Description: Replace widget areas in your theme for specific pages, archives and other sections of WordPress.\n * Author: WooThemes\n * Author URI: http://woothemes.com/\n * Version: 1.4.1\n * Stable tag: 1.4.1\n * License: GPL v2 - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n */\n\n if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\n if ( ! class_exists( 'Woo_Conditions' ) ) {\n \trequire_once( 'classes/class-woo-conditions.php' );\n }\n require_once( 'classes/class-woo-sidebars.php' );\n\n // Third-party integrations.\n if ( class_exists( 'Woocommerce' ) ) require_once( 'integrations/integration-woocommerce.php' );\n\n global $woosidebars;\n $woosidebars = new Woo_Sidebars( __FILE__ );\n $woosidebars->version = '1.4.1';\n $woosidebars->init();\n?>"], "fixing_code": ["*** WooSidebars Changelog ***\n\n2015-04-22 - version 1.4.2\n* Security Fix - remove_query_arg vulnerability\n  /classes/class-woo-sidebars.php\n\n2015.02.17 - version 1.4.1\n * Fix - Fixes an error notice on the homepage, caused by the tag check logic.\n   /classes/class-woo-conditions.php\n\n2015.02.17 - version 1.4.0\n * New - Adds a condition to change the widget area for all posts tagged with a selected tag.\n   /classes/class-woo-conditions.php\n\n2013.08.13 - version 1.3.1\n * /classes/class-woo-conditions.php - Re-introduce add_post_meta() instead of update_post_meta() when saving conditions. Using update_post_meta() prevents multiple conditions from being saved.\n\n2013.08.12 - version 1.3.0\n * /assets/css/admin.css - Replace all instances of #woo-conditions with #woosidebars-conditions to match the renamed meta box. Add basic jQueryUI styling reset to prevent visual inconsistency when jQueryUI is loaded via a third-party plugin.\n * /assets/js/admin.js - Adjust the JavaScript logic to use the new \"woosidebars-conditions\" selector instead of \"woo-conditions\" for toggling advanced options on and off.\n * /classes/class-woo-conditions.php - Rename \"woo-conditions\" meta box to \"woosidebars-conditions\". Fixes display bug with the WPML \"Multilingual Content Setup\" meta box. Replaces all instances of &$this with $this. Introduces upper_limit property and woosidebars_upper_limit filter. Addresses logic for the \"single\" condition type.\n * /classes/class-woo-sidebars.php - Replaces all instances of &$this with $this. Introduces upper_limit property and woosidebars_upper_limit filter.\n\n2013.03.08 - version 1.2.2\n * /classes/class-woo-sidebars.php - Changed capability for displaying the \"Widget Areas\" menu to use \"edit_theme_options\" instead of \"switch_themes\".\n * /assets/css/admin.css - Minor styling adjustments. Fixes admin styling when jquery-ui-fresh CSS is loaded by other plugins.\n\n2013.01.09 - version 1.2.1\n * /classes/class-woo-conditions.php - Update script version. Update conditions meta box HTML to move the \"advanced\" button to it's own list instead of being a part of the tabs. Add \"post_type\" condition without the \"post-type-\" prefix. Fixes the \"Template Hierarchy -> Pages\" bug.\n * /classes/class-woo-sidebars.php - If WordPress SEO is active, remove the unused meta box styling, as it conflicts with the custom WooSidebars meta box styling. Set \"has_archive\" to \"sidebars\". Make sure only users with the \"switch_themes\" capability can see the \"Widget Areas\" admin menu.\n * /assets/js/admin.js - Adjust admin JavaScript to work with updated conditions meta box HTML.\n\n2012.08.14 - version 1.1.2\n * /integrations/integration-woocommerce.php - Added logic to stop undefined index notices in foreach(). Prevent direct file access.\n * /classes/class.wooconditions.php,\n   /classes/class.woosidebars.php - Prevent direct file access.\n * /classes/class.updater.php - Prevent direct file access. Return $false instead of false when checking for updates, if not WooSidebars.\n * /lang/woosidebars-en_GB.po - Rescanned language file.\n * /lang/woosidebars-xx_XX.pot - Rescanned language template file.\n * woosidebars.php - Prevent direct file access. Update stable tag.\n * index.php - Added to prevent directory listing.\n\n2012.05.23 - version 1.1.0\n * /classes/class.woosidebars.php - Adjustments to accept integrations.\n * /classes/class.wooconditions.php - Adjustments to accept integrations.\n * /integrations/integration-woocommerce.php - Initial WooCommerce integration, if WooCommerce is active.\n * woosidebars.php - Load WooCommerce integration, if WooCommerce is active.\n\n2012.04.11 - version 1.0.0\n * Initial release. Woo!\n", "<?php\nif ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\n/**\n * WooSidebars Base Class\n *\n * All functionality pertaining to core functionality of the WooSidebars plugin.\n *\n * @package WordPress\n * @subpackage WooSidebars\n * @author WooThemes\n * @since 1.0.0\n *\n * TABLE OF CONTENTS\n *\n * public $version\n * private $file\n * public $upper_limit\n *\n * private $token\n * private $prefix\n * public $conditions\n *\n * private $plugin_url\n * private $assets_url\n *\n * - __construct()\n * - init()\n * - register_post_type_columns()\n * - register_post_type()\n * - register_custom_columns()\n * - register_custom_column_headings()\n * - meta_box_setup()\n * - meta_box_content()\n * - meta_box_save()\n * - description_meta_box()\n * - enter_title_here()\n * - update_messages()\n * - get_registered_sidebars()\n * - register_custom_sidebars()\n * - init_sidebar_replacement()\n * - replace_sidebars()\n * - find_best_sidebars()\n * - enqueue_styles()\n * - add_post_column_headings()\n * - add_post_column_data()\n * - enable_custom_post_sidebars()\n * - multidimensional_search()\n * - add_contextual_help()\n *\n * - load_localisation()\n * - activation()\n * - register_plugin_version()\n */\nclass Woo_Sidebars {\n\tpublic $version;\n\tprivate $file;\n\tpublic $upper_limit;\n\n\tprivate $token;\n\tprivate $prefix;\n\tpublic $conditions;\n\n\tprivate $plugin_url;\n\tprivate $assets_url;\n\n\t/**\n\t * __construct function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function __construct ( $file ) {\n\t\t$this->version = '';\n\t\t$this->file = $file;\n\t\t$this->upper_limit = intval( apply_filters( 'woosidebars_upper_limit', 200 ) );\n\n\t\t$this->token = 'sidebar';\n\t\t$this->prefix = 'woo_sidebar_';\n\n\t\t/* Plugin URL/path settings. */\n\t\t$this->plugin_url = str_replace( '/classes', '', plugins_url( plugin_basename( dirname( __FILE__ ) ) ) );\n\t\t$this->assets_url = $this->plugin_url . '/assets';\n\n\t\t$this->conditions = new Woo_Conditions();\n\t\t$this->conditions->token = $this->token;\n\t} // End __construct()\n\n\t/**\n\t * init function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function init () {\n\t\tadd_action( 'init', array( $this, 'load_localisation' ) );\n\n\t\tadd_action( 'init', array( $this, 'register_post_type' ), 20 );\n\t\tadd_action( 'admin_menu', array( $this, 'meta_box_setup' ), 20 );\n\t\tadd_action( 'save_post', array( $this, 'meta_box_save' ) );\n\t\tadd_filter( 'enter_title_here', array( $this, 'enter_title_here' ) );\n\t\tadd_filter( 'post_updated_messages', array( $this, 'update_messages' ) );\n\t\tadd_action( 'widgets_init', array( $this, 'register_custom_sidebars' ) );\n\t\tadd_action( 'get_header', array( $this, 'init_sidebar_replacement' ) );\n\n\t\tif ( is_admin() ) {\n\t\t\tglobal $pagenow;\n\n\t\t\tadd_action( 'admin_print_styles', array( $this, 'enqueue_styles' ), 12 );\n\t\t\tadd_action( 'admin_head', array( $this, 'add_contextual_help' ) );\n\t\t\tif ( $pagenow == 'edit.php' && isset( $_GET['post_type'] ) && esc_attr( $_GET['post_type'] ) == $this->token ) {\n\t\t\t\tadd_filter( 'manage_edit-' . $this->token . '_columns', array( $this, 'register_custom_column_headings' ), 10, 1 );\n\t\t\t\tadd_action( 'manage_posts_custom_column', array( $this, 'register_custom_columns' ), 10, 2 );\n\t\t\t}\n\t\t}\n\n\t\t// By default, add post type support for sidebars to the \"post\" post type.\n\t\tadd_post_type_support( 'post', 'woosidebars' );\n\n\t\tadd_action( 'admin_head', array( $this, 'register_post_type_columns' ) );\n\n\t\tadd_action( 'wp_ajax_woosidebars-post-enable', array( $this, 'enable_custom_post_sidebars' ) );\n\n\t\t// Run this on activation.\n\t\tregister_activation_hook( $this->file, array( $this, 'activation' ) );\n\t} // End init()\n\n\t/**\n\t * register_post_type_columns function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function register_post_type_columns () {\n\t\t$post_type = get_post_type();\n\n\t\tif ( $post_type != '' && post_type_supports( $post_type, 'woosidebars' ) ) {\n\t\t\tadd_filter( 'manage_edit-' . $post_type . '_columns', array( $this, 'add_post_column_headings' ), 10, 1 );\n\t\t\tadd_action( 'manage_posts_custom_column', array( $this, 'add_post_column_data' ), 10, 2 );\n\t\t\tadd_action( 'manage_pages_custom_column', array( $this, 'add_post_column_data' ), 10, 2 );\n\t\t}\n\t} // End register_post_type_columns()\n\n\t/**\n\t * register_post_type function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function register_post_type () {\n\t\t// Allow only users who can adjust the theme to view the WooSidebars admin.\n\t\tif ( ! current_user_can( 'edit_theme_options' ) ) return;\n\n\t\t$page = 'themes.php';\n\n\t\t$singular = __( 'Widget Area', 'woosidebars' );\n\t\t$plural = __( 'Widget Areas', 'woosidebars' );\n\t\t$rewrite = array( 'slug' => 'sidebars' );\n\t\t$supports = array( 'title', 'excerpt' );\n\n\t\tif ( $rewrite == '' ) { $rewrite = $this->token; }\n\n\t\t$labels = array(\n\t\t\t'name' => _x( 'Widget Areas', 'post type general name', 'woosidebars' ),\n\t\t\t'singular_name' => _x( 'Widget Area', 'post type singular name', 'woosidebars' ),\n\t\t\t'add_new' => _x( 'Add New', 'Widget Area' ),\n\t\t\t'add_new_item' => sprintf( __( 'Add New %s', 'woosidebars' ), $singular ),\n\t\t\t'edit_item' => sprintf( __( 'Edit %s', 'woosidebars' ), $singular ),\n\t\t\t'new_item' => sprintf( __( 'New %s', 'woosidebars' ), $singular ),\n\t\t\t'all_items' => sprintf( __( 'Widget Areas', 'woosidebars' ), $plural ),\n\t\t\t'view_item' => sprintf( __( 'View %s', 'woosidebars' ), $singular ),\n\t\t\t'search_items' => sprintf( __( 'Search %a', 'woosidebars' ), $plural ),\n\t\t\t'not_found' =>  sprintf( __( 'No %s Found', 'woosidebars' ), $plural ),\n\t\t\t'not_found_in_trash' => sprintf( __( 'No %s Found In Trash', 'woosidebars' ), $plural ),\n\t\t\t'parent_item_colon' => '',\n\t\t\t'menu_name' => $plural\n\n\t\t);\n\t\t$args = array(\n\t\t\t'labels' => $labels,\n\t\t\t'public' => false,\n\t\t\t'publicly_queryable' => true,\n\t\t\t'show_ui' => true,\n\t\t\t'show_in_nav_menus' => false,\n\t\t\t'show_in_admin_bar' => false,\n\t\t\t'show_in_menu' => $page,\n\t\t\t'query_var' => true,\n\t\t\t'rewrite' => $rewrite,\n\t\t\t'capability_type' => 'post',\n\t\t\t'has_archive' => 'sidebars',\n\t\t\t'hierarchical' => false,\n\t\t\t'menu_position' => null,\n\t\t\t'supports' => $supports\n\t\t);\n\t\tregister_post_type( $this->token, $args );\n\t} // End register_post_type()\n\n\t/**\n\t * register_custom_columns function.\n\t *\n\t * @access public\n\t * @param string $column_name\n\t * @param int $id\n\t * @return void\n\t */\n\tpublic function register_custom_columns ( $column_name, $id ) {\n\t\tglobal $wpdb, $post;\n\n\t\t$meta = get_post_custom( $id );\n\t\t$sidebars = $this->get_registered_sidebars();\n\n\t\t$this->conditions->setup_default_conditions_reference();\n\n\t\tswitch ( $column_name ) {\n\n\t\t\tcase 'sidebar_to_replace':\n\t\t\t\t$value = '';\n\n\t\t\t\tif ( isset( $meta['_sidebar_to_replace'] ) && ( $meta['_sidebar_to_replace'][0] != '' ) ) {\n\t\t\t\t\t$value = $meta['_sidebar_to_replace'][0];\n\n\t\t\t\t\tif ( isset( $sidebars[$value] ) ) {\n\t\t\t\t\t\t$value = $sidebars[$value]['name'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$value .= '<br /><strong>' . __( '(Not in use by current theme)', 'woosidebars' ) . '</strong>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\techo $value;\n\t\t\tbreak;\n\n\t\t\tcase 'condition':\n\t\t\t\t$value = '';\n\n\t\t\t\tif ( isset( $meta['_condition'] ) && ( $meta['_condition'][0] != '' ) ) {\n\t\t\t\t\tforeach ( $meta['_condition'] as $k => $v ) {\n\t\t\t\t\t\t$value .= $this->multidimensional_search( $v, $this->conditions->conditions_reference ) . '<br />' . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\techo $value;\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\tbreak;\n\n\t\t}\n\t} // End register_custom_columns()\n\n\t/**\n\t * register_custom_column_headings function.\n\t *\n\t * @access public\n\t * @param array $defaults\n\t * @return void\n\t */\n\tpublic function register_custom_column_headings ( $defaults ) {\n\t\t$this->conditions->setup_default_conditions_reference();\n\n\t\t$new_columns = array( 'sidebar_to_replace' => __( 'Sidebar To Replace', 'woosidebars' ), 'condition' => __( 'Condition(s)', 'woosidebars' ) );\n\n\t\t$last_item = '';\n\n\t\tif ( isset( $defaults['date'] ) ) { unset( $defaults['date'] ); }\n\n\t\tif ( count( $defaults ) > 2 ) {\n\t\t\t$last_item = array_slice( $defaults, -1 );\n\n\t\t\tarray_pop( $defaults );\n\t\t}\n\t\t$defaults = array_merge( $defaults, $new_columns );\n\n\t\tif ( $last_item != '' ) {\n\t\t\tforeach ( $last_item as $k => $v ) {\n\t\t\t\t$defaults[$k] = $v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn $defaults;\n\t} // End register_custom_column_headings()\n\n\t/**\n\t * meta_box_setup function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function meta_box_setup () {\n\t\tadd_meta_box( 'sidebar-to-replace', __( 'Sidebar To Replace', 'woosidebars' ), array( $this, 'meta_box_content' ), $this->token, 'side', 'low' );\n\n\t\t// Remove \"Custom Settings\" meta box.\n\t\tremove_meta_box( 'woothemes-settings', 'sidebar', 'normal' );\n\n\t\t// Customise the \"Excerpt\" meta box for the sidebars.\n\t\tremove_meta_box( 'postexcerpt', $this->token, 'normal' );\n\t\tadd_meta_box( 'sidebar-description', __( 'Description', 'woosidebars' ), array( $this, 'description_meta_box' ), $this->token, 'normal', 'core' );\n\t} // End meta_box_setup()\n\n\t/**\n\t * meta_box_content function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function meta_box_content () {\n\t\tglobal $post_id;\n\n\t\t$sidebars = $this->get_registered_sidebars();\n\n\t\t$selected_sidebar = get_post_meta( $post_id, '_sidebar_to_replace', true );\n\n\t\t$html = '';\n\n\t\t$html .= '<input type=\"hidden\" name=\"woo_' . $this->token . '_noonce\" id=\"woo_' . $this->token . '_noonce\" value=\"' . wp_create_nonce( plugin_basename(__FILE__) ) . '\" />';\n\n\t\tif ( count( $sidebars ) > 0 ) {\n\t\t\t$html .= '<select name=\"sidebar_to_replace\" class=\"widefat\">' . \"\\n\";\n\t\t\t\tforeach ( $sidebars as $k => $v ) {\n\t\t\t\t\t$html .= '<option value=\"' . $v['id'] . '\"' . selected( $selected_sidebar, $v['id'], false ) . '>' . $v['name'] . '</option>' . \"\\n\";\n\t\t\t\t}\n\t\t\t$html .= '</select>' . \"\\n\";\n\t\t} else {\n\t\t\t$html .= '<p>' . __( 'No sidebars are available with this theme.', 'woosidebars' ) . '</p>';\n\t\t}\n\n\t\techo $html;\n\n\t} // End meta_box_content()\n\n\t/**\n\t * meta_box_save function.\n\t *\n\t * @access public\n\t * @param int $post_id\n\t * @return void\n\t */\n\tpublic function meta_box_save ( $post_id ) {\n\t\tglobal $post, $messages;\n\n\t\t// Verify\n\t\tif ( ( get_post_type() != $this->token ) || ! wp_verify_nonce( $_POST['woo_' . $this->token . '_noonce'], plugin_basename( __FILE__ ) ) ) {\n\t\t\treturn $post_id;\n\t\t}\n\n\t\tif ( 'page' == $_POST['post_type'] ) {\n\t\t\tif ( ! current_user_can( 'edit_page', $post_id ) ) {\n\t\t\t\treturn $post_id;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\t\treturn $post_id;\n\t\t\t}\n\t\t}\n\n\t\t$fields = array( 'sidebar_to_replace' );\n\n\t\tforeach ( $fields as $f ) {\n\n\t\t\t${$f} = strip_tags(trim($_POST[$f]));\n\n\t\t\tif ( get_post_meta( $post_id, '_' . $f ) == '' ) {\n\t\t\t\tadd_post_meta( $post_id, '_' . $f, ${$f}, true );\n\t\t\t} elseif( ${$f} != get_post_meta( $post_id, '_' . $f, true ) ) {\n\t\t\t\tupdate_post_meta( $post_id, '_' . $f, ${$f} );\n\t\t\t} elseif ( ${$f} == '' ) {\n\t\t\t\tdelete_post_meta( $post_id, '_' . $f, get_post_meta( $post_id, '_' . $f, true ) );\n\t\t\t}\n\t\t}\n\t} // End meta_box_save()\n\n\t/**\n\t * description_meta_box function.\n\t *\n\t * @param object $post\n\t */\n\tpublic function description_meta_box ( $post ) {\n\t?>\n\t<label class=\"screen-reader-text\" for=\"excerpt\"><?php _e( 'Description', 'woosidebars' ); ?></label><textarea rows=\"1\" cols=\"40\" name=\"excerpt\" tabindex=\"6\" id=\"excerpt\"><?php echo $post->post_excerpt; // textarea_escaped ?></textarea>\n\t<p><?php printf( __( 'Add an optional description, to be displayed when adding widgets to this widget area on the %sWidgets%s screen.', 'woosidebars' ), '<a href=\"' . esc_url( admin_url( 'widgets.php' ) ) . '\">', '</a>' ); ?></p>\n\t<?php\n\t} // End description_meta_box()\n\n\t/**\n\t * enter_title_here function.\n\t *\n\t * @access public\n\t * @param string $title\n\t * @return void\n\t */\n\tpublic function enter_title_here ( $title ) {\n\t\tif ( get_post_type() == $this->token ) {\n\t\t\t$title = __( 'Enter widget area name here', 'woosidebars' );\n\t\t}\n\t\treturn $title;\n\t} // End enter_title_here()\n\n\t/**\n\t * update_messages function.\n\t *\n\t * @access public\n\t * @param array $messages\n\t * @return void\n\t */\n\tpublic function update_messages ( $messages ) {\n\t\tif ( get_post_type() != $this->token ) {\n\t\t\treturn $messages;\n\t\t}\n\n\t\t$messages[$this->token][1] = __( 'Widget Area updated.', 'woosidebars' );\n\n\t\treturn $messages;\n\t} // End update_messages()\n\n\t/**\n\t * get_registered_sidebars function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function get_registered_sidebars () {\n\t\tglobal $wp_registered_sidebars;\n\n\t\t$sidebars = array();\n\t\t$to_ignore = array();\n\n\t\t$custom_sidebars = get_posts( array( 'post_type' => 'sidebar', 'numberposts' => intval( $this->upper_limit ), 'suppress_filters' => 'false' ) );\n\t\tif ( ! is_wp_error( $custom_sidebars ) && count( $custom_sidebars ) > 0 ) {\n\t\t\tforeach ( $custom_sidebars as $k => $v ) {\n\t\t\t\t$to_ignore[] = $v->post_name;\n\t\t\t}\n\t\t}\n\n\t\tif ( is_array( $wp_registered_sidebars ) && ( count( $wp_registered_sidebars ) > 0 ) ) {\n\t\t\tforeach ( $wp_registered_sidebars as $k => $v ) {\n\t\t\t\tif ( ! stristr( $v['id'], $this->prefix ) && ! stristr( $v['id'], 'woo_sbm_' ) && ! in_array( $v['id'], $to_ignore ) ) {\n\t\t\t\t\t$sidebars[$k] = $v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $sidebars;\n\t} // End get_registered_sidebars()\n\n\t/**\n\t * register_custom_sidebars function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function register_custom_sidebars () {\n\t\t$sidebars = get_posts( array( 'post_type' => 'sidebar', 'posts_per_page' => intval( $this->upper_limit ), 'suppress_filters' => 'false' ) );\n\n\t\tif ( count( $sidebars ) > 0 ) {\n\t\t\tforeach ( $sidebars as $k => $v ) {\n\t\t\t\t$sidebar_id = $v->post_name;\n\t\t\t\t// $sidebar_id = $this->prefix . $v->ID;\n\t\t\t\tregister_sidebar( array( 'name' => $v->post_title, 'id' => $sidebar_id, 'description' => $v->post_excerpt ) );\n\t\t\t}\n\t\t}\n\t} // End register_custom_sidebars()\n\n\t/**\n\t * init_sidebar_replacement function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function init_sidebar_replacement () {\n\t\tadd_filter( 'sidebars_widgets', array( $this, 'replace_sidebars' ) );\n\t} // End init_sidebar_replacement()\n\n\t/**\n\t * replace_sidebars function.\n\t *\n\t * @access public\n\t * @param array $sidebars_widgets\n\t * @return void\n\t */\n\tpublic function replace_sidebars ( $sidebars_widgets ) {\n\t\tif ( is_admin() ) {\n\t \t\treturn $sidebars_widgets;\n\t \t}\n\n\t\t// Determine the conditions to construct the query.\n\t\t$conditions = $this->conditions->conditions;\n\n\t\tif ( ! isset( $this->conditions->conditions ) || count( $this->conditions->conditions ) <= 0 ) {\n\t\t\treturn $sidebars_widgets;\n\t\t}\n\n\t \tglobal $woo_custom_sidebar_data;\n\n\t \tif ( ! isset( $woo_custom_sidebar_data ) ) {\n\n\t\t \t$conditions_str = join( ', ', $conditions );\n\n\t\t \t$args = array(\n\t\t \t\t'post_type' => $this->token,\n\t\t \t\t'posts_per_page' => intval( $this->upper_limit ),\n\t\t \t\t'suppress_filters' => 'false'\n\t\t \t);\n\n\t\t \t$meta_query = array(\n\t\t \t\t\t\t\t'key' => '_sidebar_to_replace',\n\t\t \t\t\t\t\t'compare' => '!=',\n\t\t \t\t\t\t\t'value' => ''\n\t\t \t\t\t\t\t);\n\n\t\t \t$args['meta_query'][] = $meta_query;\n\n\t\t \t$meta_query = array(\n\t\t \t\t\t\t\t'key' => '_condition',\n\t\t \t\t\t\t\t'compare' => 'IN',\n\t\t \t\t\t\t\t'value' => $conditions\n\t\t \t\t\t\t\t);\n\n\t\t \t$args['meta_query'][] = $meta_query;\n\n\t\t \t$sidebars = get_posts( $args );\n\n\t\t \tif ( count( $sidebars ) > 0 ) {\n\t\t \t\tforeach ( $sidebars as $k => $v ) {\n\t\t \t\t\t$to_replace = get_post_meta( $v->ID, '_sidebar_to_replace', true );\n\t\t \t\t\t$sidebars[$k]->to_replace = $to_replace;\n\n\t\t \t\t\t$conditions = get_post_meta( $v->ID, '_condition', false );\n\n\t\t \t\t\t$sidebars[$k]->conditions = array();\n\n\t\t \t\t\t// Remove any irrelevant conditions from the array.\n\t\t \t\t\tif ( is_array( $conditions ) ) {\n\t\t \t\t\t\tforeach ( $conditions as $i => $j ) {\n\t\t \t\t\t\t\tif ( in_array( $j, $this->conditions->conditions ) ) {\n\t\t \t\t\t\t\t\t$sidebars[$k]->conditions[] = $j;\n\t\t \t\t\t\t\t}\n\t\t \t\t\t\t}\n\t\t \t\t\t}\n\n\t\t \t\t}\n\t\t \t}\n\n\t\t \t$woo_custom_sidebar_data = $sidebars;\n\t \t}\n\n\t\t// Make sure only the most appropriate sidebars are kept.\n\t\t// $woo_custom_sidebar_data = $this->remove_unwanted_sidebars( $woo_custom_sidebar_data );\n\t\t$woo_custom_sidebar_data = $this->find_best_sidebars( $woo_custom_sidebar_data );\n\n\t \tif ( count( $woo_custom_sidebar_data ) > 0 ) {\n\t \t\tforeach ( $woo_custom_sidebar_data as $k => $v ) {\n\t \t\t\t$sidebar_id = $v->post_name;\n\t\t\t\t// $sidebar_id = $this->prefix . $v->ID;\n\t \t\t\tif ( isset( $sidebars_widgets[$sidebar_id] ) && isset( $v->to_replace ) && $v->to_replace != '' ) {\n\t\t\t\t \t$widgets = $sidebars_widgets[$sidebar_id];\n\t\t\t\t\tunset( $sidebars_widgets[$sidebar_id] );\n\t\t\t\t\t$sidebars_widgets[$v->to_replace] = $widgets;\n\t\t\t\t}\n\t \t\t}\n\t \t}\n\n\t\treturn $sidebars_widgets;\n\t} // End replace_sidebars()\n\n\t/**\n\t * find_best_sidebars function.\n\t *\n\t * @access public\n\t * @param array $sidebars\n\t * @return array $sorted_sidebars\n\t */\n\tpublic function find_best_sidebars ( $sidebars ) {\n\t\t$sorted_sidebars = array();\n\n\t\tif ( ! isset( $this->conditions->conditions ) || count( $this->conditions->conditions ) <= 0 ) {\n\t\t\treturn $sidebars;\n\t\t}\n\n\t\t// Keep track of each sidebar we'd like to replace widgets for.\n\t\tforeach ( $sidebars as $k => $v ) {\n\t\t\tif ( isset( $v->to_replace ) && ( $v->to_replace != '' ) && ! isset( $sorted_sidebars[$v->to_replace] ) ) {\n\t\t\t\t$sorted_sidebars[$v->to_replace] = '';\n\t\t\t}\n\t\t}\n\n\t\tforeach ( $sidebars as $k => $v ) {\n\t\t\tif ( isset( $sorted_sidebars[$v->to_replace] ) && ( $sorted_sidebars[$v->to_replace] == '' ) ) {\n\t\t\t\t$sorted_sidebars[$v->to_replace] = $v;\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\treturn $sorted_sidebars;\n\t} // End find_best_sidebars()\n\n\t/**\n\t * enqueue_styles function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function enqueue_styles () {\n\t\tglobal $pagenow;\n\n\t\tif ( in_array( $pagenow, array( 'edit.php', 'post.php', 'post-new.php' ) ) ) {\n\t\t\tif ( get_post_type() != $this->token ) { return; }\n\t\t\twp_enqueue_style( 'jquery-ui-tabs' );\n\n\t\t\twp_register_style( $this->token . '-admin', $this->assets_url . '/css/admin.css', array(), '1.0.0' );\n\t\t\twp_enqueue_style( $this->token . '-admin' );\n\n\t\t\twp_dequeue_style( 'jquery-ui-datepicker' );\n\n\t\t\tif ( class_exists( 'WPSEO_Metabox' ) ) {\n\t\t\t\t// Dequeue unused WordPress SEO CSS files.\n\t\t\t\twp_dequeue_style( 'edit-page' );\n\t\t\t\twp_dequeue_style( 'metabox-tabs' );\n\n\t\t\t\t$color = get_user_meta( get_current_user_id(), 'admin_color', true );\n\t\t\t\tif ( '' == $color ) $color = 'fresh';\n\n\t\t\t\twp_dequeue_style( 'metabox-' . $color );\n\t\t\t}\n\t\t}\n\n\t\tif ( in_array( $pagenow, array( 'edit.php' ) ) ) {\n\t\t\twp_register_style( $this->token . '-admin-posts', $this->assets_url . '/css/admin-posts.css', array(), '1.0.0' );\n\t\t\twp_enqueue_style( $this->token . '-admin-posts' );\n\t\t}\n\t} // End enqueue_styles()\n\n\t/**\n\t * add_post_column_headings function.\n\t *\n\t * @access public\n\t * @param array $defaults\n\t * @return array $new_columns\n\t */\n\tpublic function add_post_column_headings ( $defaults ) {\n\t\t$defaults['woosidebars_enable'] = __( 'Custom Sidebars', 'woosidebars' );\n\t\treturn $defaults;\n\t} // End add_post_column_headings()\n\n\t/**\n\t * add_post_column_data function.\n\t *\n\t * @access public\n\t * @param string $column_name\n\t * @param int $id\n\t * @return void\n\t */\n\tpublic function add_post_column_data ( $column_name, $id ) {\n\t\tglobal $wpdb, $post;\n\t\t$meta = get_post_custom( $id );\n\n\t\tswitch ( $column_name ) {\n\t\t\tcase 'woosidebars_enable':\n\t\t\t\t$image = 'success-off';\n\t\t\t\t$value = '';\n\t\t\t\t$class = 'custom-sidebars-disabled';\n\n\t\t\t\tif ( isset( $meta['_enable_sidebar'] ) && ( $meta['_enable_sidebar'][0] != '' ) && ( $meta['_enable_sidebar'][0] == 'yes' ) ) {\n\t\t\t\t\t$image = 'success';\n\t\t\t\t\t$class = 'custom-sidebars-enabled';\n\t\t\t\t}\n\n\t\t\t\t$url = wp_nonce_url( admin_url( 'admin-ajax.php?action=woosidebars-post-enable&post_id=' . $post->ID ), 'woosidebars-post-enable' );\n\t\t\t\t$value = '<span class=\"' . esc_attr( $class ) . '\"><a href=\"' . esc_url( $url ) . '\"><img src=\"' . esc_url( $this->assets_url . '/images/' . $image . '.png' ) . '\" /></a></span>';\n\n\t\t\t\techo $value;\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t} // End add_post_column_data()\n\n\t/**\n\t * enable_custom_post_sidebars function.\n\t *\n\t * @access public\n\t * @return void\n\t */\n\tpublic function enable_custom_post_sidebars () {\n\t\tif( ! is_admin() ) die;\n\t\tif( ! current_user_can( 'edit_posts' ) ) wp_die( __( 'You do not have sufficient permissions to access this page.', 'woosidebars' ) );\n\t\tif( ! check_admin_referer( 'woosidebars-post-enable' ) ) wp_die( __( 'You have taken too long. Please go back and retry.', 'woosidebars' ) );\n\n\t\t$post_id = isset( $_GET['post_id'] ) && (int)$_GET['post_id'] ? (int)$_GET['post_id'] : '';\n\n\t\tif( ! $post_id ) die;\n\n\t\t$post = get_post( $post_id );\n\t\tif( ! $post ) die;\n\n\t\t$meta = get_post_meta( $post->ID, '_enable_sidebar', true );\n\n\t\tif ( $meta == 'yes' ) {\n\t\t\tupdate_post_meta($post->ID, '_enable_sidebar', 'no' );\n\t\t} else {\n\t\t\tupdate_post_meta($post->ID, '_enable_sidebar', 'yes' );\n\t\t}\n\n\t\t$sendback = remove_query_arg( array( 'trashed', 'untrashed', 'deleted', 'ids' ), wp_get_referer() );\n\t\twp_safe_redirect( esc_url( $sendback ) );\n\t} // End enable_custom_post_sidebars()\n\n\t/**\n\t * multidimensional_search function.\n\t *\n\t * @access public\n\t * @param string $needle\n\t * @param array $haystack\n\t * @return string $m\n\t */\n\tpublic function multidimensional_search ( $needle, $haystack ) {\n\t\tif (empty( $needle ) || empty( $haystack ) ) {\n            return false;\n        }\n\n        foreach ( $haystack as $key => $value ) {\n            $exists = 0;\n        \tforeach ( (array)$needle as $nkey => $nvalue) {\n                if ( ! empty( $value[$nvalue] ) && is_array( $value[$nvalue] ) ) {\n                    return $value[$nvalue]['label'];\n                }\n            }\n        }\n\n        return false;\n\t} // End multidimensional_search()\n\n\t/**\n\t * add_contextual_help function.\n\t *\n\t * @description Add contextual help to the current screen.\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function add_contextual_help () {\n\t\tif ( get_current_screen()->id != 'edit-sidebar' ) { return; }\n\n\t\tget_current_screen()->add_help_tab( array(\n\t\t'id'\t\t=> 'overview',\n\t\t'title'\t\t=> __( 'Overview', 'woosidebars' ),\n\t\t'content'\t=>\n\t\t\t'<p>' . __( 'All custom widget areas are listed on this screen. To add a new customised widget area, click the \"Add New\" button.', 'woosidebars' ) . '</p>'\n\t\t) );\n\t\tget_current_screen()->add_help_tab( array(\n\t\t'id'\t\t=> 'wooframework-sbm',\n\t\t'title'\t\t=> __( 'Sidebar Manager', 'woosidebars' ),\n\t\t'content'\t=>\n\t\t\t'<p>' . __( 'WooSidebars is intended to replace the Sidebar Manager found in the WooFramework. Please ensure that all sidebars have been transferred over from the Sidebar Manager, if you choose to use WooSidebars instead.', 'woosidebars' ) . '</p>' .\n\t\t\t'<p>' . __( 'To transfer a sidebar from the Sidebar Manager:', 'woosidebars' ) . '</p>' .\n\t\t\t'<ul>' . \"\\n\" .\n\t\t\t'<li>' . __( 'Create a new custom widget area in WooSidebars.', 'woosidebars' ) . '</li>' . \"\\n\" .\n\t\t\t'<li>' . sprintf( __( 'Visit the %sAppearance &rarr; Widgets%s screen and drag the widgets from the old sidebar into the newly created sidebar.', 'woosidebars' ), '<a href=\"' . esc_url( admin_url( 'widgets.php' ) ) . '\">', '</a>' ) . '</li>' . \"\\n\" .\n\t\t\t'<li>' . __( 'Repeat this process for each of your custom sidebars, including dependencies if necessary (the WooSidebars conditions system replaces the need for dependencies).', 'woosidebars' ) . '</li>' . \"\\n\" .\n\t\t\t'<li>' . __( 'Once you are certain that you widgets have been moved across for all widget areas, remove the sidebar from the Sidebar Manager (don\\'t forget to transfer any dependencies over as well, if necessary).', 'woosidebars' ) . '</li>' . \"\\n\" .\n\t\t\t'</ul>' . \"\\n\"\n\t\t) );\n\n\t\tget_current_screen()->set_help_sidebar(\n\t\t'<p><strong>' . __( 'For more information:', 'woosidebars' ) . '</strong></p>' .\n\t\t'<p><a href=\"http://support.woothemes.com/?ref=' . 'woosidebars' . '\" target=\"_blank\">' . __( 'Support HelpDesk', 'woosidebars' ) . '</a></p>' .\n\t\t'<p><a href=\"http://docs.woothemes.com/document/woosidebars/?ref=' . 'woosidebars' . '\" target=\"_blank\">' . __( 'WooSidebars Documentation', 'woosidebars' ) . '</a></p>'\n\t\t);\n\t} // End add_contextual_help()\n\n\t/**\n\t * load_localisation function.\n\t *\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function load_localisation () {\n\t\t$lang_dir = trailingslashit( str_replace( 'classes', 'lang', plugin_basename( dirname(__FILE__) ) ) );\n\t\tload_plugin_textdomain( 'woosidebars', false, $lang_dir );\n\t} // End load_localisation()\n\n\t/**\n\t * activation function.\n\t *\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function activation () {\n\t\t$this->register_plugin_version();\n\t} // End activation()\n\n\t/**\n\t * register_plugin_version function.\n\t *\n\t * @access public\n\t * @since 1.0.0\n\t * @return void\n\t */\n\tpublic function register_plugin_version () {\n\t\tif ( $this->version != '' ) {\n\t\t\tupdate_option( 'woosidebars' . '-version', $this->version );\n\t\t}\n\t} // End register_plugin_version()\n} // End Class\n?>", "=== WooSidebars ===\nContributors: woothemes, mattyza\nTags: widgets, sidebars, widget-areas\nRequires at least: 3.3\nTested up to: 4.1.1\nStable tag: 1.4.2\nLicense: GPLv3 or later\nLicense URI: http://www.gnu.org/licenses/gpl-3.0.html\n\nWooSidebars adds functionality to display different widgets in a sidebar, according to a context (for example, a specific page or a category).\n\n== Description ==\n\nWith WooSidebars, it's possible to change the widgets that display in a sidebar (widgetized area) according to a context (for example, a specific page, a specific blog post, certain categories or the search results screen). Setting up a custom widget area to display across multiple conditions is as easy as a few clicks.\n\n[vimeo http://vimeo.com/42980663]\n\nLooking for a helping hand? [View plugin documentation](http://docs.woothemes.com/documentation/plugins/woosidebars/).\n\nLooking to contribute code to this plugin? [Fork the repository over at GitHub](http://github.com/woothemes/woosidebars/). Please also read the CONTRIBUTING.md file, bundled within this plugin.\n\n== Installation ==\n\n= Minimum Requirements =\n\n* WordPress 3.3 or greater\n* PHP version 5.2.4 or greater\n* MySQL version 5.0 or greater\n\n= Automatic installation =\n\nAutomatic installation is the easiest option as WordPress handles the file transfers itself and you don\u2019t even need to leave your web browser. To do an automatic install of WooSidebars, log in to your WordPress admin panel, navigate to the Plugins menu and click Add New.\n\nIn the search field type \"WooSidebars\" and click Search Plugins. Once you\u2019ve found our widget areas plugin you can view details about it such as the the point release, rating and description. Most importantly of course, you can install it by simply clicking Install Now. After clicking that link you will be asked if you\u2019re sure you want to install the plugin. Click yes and WordPress will automatically complete the installation.\n\n= Manual installation =\n\nThe manual installation method involves downloading WooSidebars and uploading it to your webserver via your favourite FTP application.\n\n1. Download the plugin file to your computer and unzip it\n2. Using an FTP program, or your hosting control panel, upload the unzipped plugin folder to your WordPress installation\u2019s wp-content/plugins/ directory.\n3. Activate the plugin from the Plugins menu within the WordPress admin.\n\n= Where to go after installation =\n\nOnce WooSidebars has been installed and activated, please visit the \"Appearance -> Widget Areas\" screen to begin adding custom widget areas.\n\n= Upgrading =\n\nAutomatic updates should work a charm; as always though, ensure you backup your site just in case.\n\n== Frequently Asked Questions ==\n\n= Where can I find WooSidebars documentation and user guides? =\n\nFor further documentation on using WooSidebars, please view the [WooSidebars Documentation](http://docs.woothemes.com/documentation/plugins/woosidebars/).\n\n= Will WooSidebars work with my theme? =\n\nYes; WooSidebars will work with any theme that supports dynamic widget areas.\n\n= How can I contribute to WooSidebars development? =\n\nLooking to contribute code to this plugin? [Fork the repository over at GitHub](http://github.com/woothemes/woosidebars/).\n(submit pull requests to the \"develop\" branch)\n\n== Screenshots ==\n\n1. The list of custom widget areas.\n2. Adding a custom widget area.\n\n== Upgrade Notice ==\n\n= 1.4.2 =\nSecurity Fix for XSS vulnerability\n\n= 1.4.1 =\nFixes an error notice on the homepage, caused by the tag check logic.\n\n= 1.4.0 =\nWordPress 3.8 compatibility.\nAdds \"posts tagged with\" condition.\n\n= 1.3.1 =\nBug fix to ensure multiple conditions save correctly.\n\n= 1.3.0 =\nOptimisation update.\n\n= 1.2.2 =\n\"Widget Areas\" menu is now only visible to users who can add/modify widgets.\n\n= 1.2.1 =\nUpdated for WordPress 3.5+ compatibility. Adjusted \"Advanced\" tab logic. Fixed bug where \"Template Hierarchy -> Pages\" condition wasn't being applied correctly. Dequeue WordPress SEO admin stylesheets from the \"Widget Areas\" \"Add\" and \"Edit\" screens.\n\n= 1.2.0 =\nMoved to WordPress.org. Woo! Added scope to methods and properties where missing.\n\n== Changelog ==\n\n= 1.4.2 =\n* 2015-04-22\n* Security Fix for remove_query_arg vulnerability\n\n= 1.4.1 =\n* 2015-02-17\nFixes an error notice on the homepage, caused by the tag check logic.\n\n= 1.4.0 =\n* 2015-02-17\n* WordPress 3.8 compatibility.\n* Adds \"posts tagged with\" condition.\n\n\n= 1.3.1 =\n* 2013-08-13\n* Bug fix to ensure multiple conditions save correctly.\n\n= 1.3.0 =\n* 2013-08-12\n* Introduces woosidebars_upper_limit filter, used on all database queries, to control scaling.\n* Fixes several PHP notices for \"undefined index\".\n* Fixes \"single\" condition, where a small section of logic was missing for determining if the condition applied to the current screen being loaded.\n* Optimises admin-side JavaScript and CSS.\n\n= 1.2.2 =\n* 2013-03-08\n* Changes capability for displaying the menu to \"edit_theme_options\" in line with the \"Widgets\" menu capability.\n\n= 1.2.1 =\n* 2013-01-09\n* Updated admin JavaScript for WordPress 3.5+ compatibility. Moved \"Advanced\" tab outside of the tabs list.\n* Fixed bug with the \"Template Hierarchy -> Pages\" condition that wasn't applying.\n* When WordPress SEO is active, dequeue unused stylesheets on the \"Widget Areas\" \"add\" and \"edit\" screens.\n\n= 1.2.0 =\n* Renamed files according to standards naming convention.\n* Added scope to methods and properties where missing.\n\n= 1.1.2 =\n* Routine hardening and maintenance update. Fixed notice message in WooCommerce integration.\n\n= 1.1.1 =\n* Fix notice displayed on WooCommerce product pages from the WooSidebars integration.\n\n= 1.1.0 =\n* Initial WooCommerce integration.\n\n= 1.0.0 =\n* First release. Woo!", "<?php\n/**\n * Plugin Name: WooSidebars\n * Plugin URI: http://woothemes.com/woosidebars/\n * Description: Replace widget areas in your theme for specific pages, archives and other sections of WordPress.\n * Author: WooThemes\n * Author URI: http://woothemes.com/\n * Version: 1.4.2\n * Stable tag: 1.4.2\n * License: GPL v2 - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n */\n\n if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly\n\n if ( ! class_exists( 'Woo_Conditions' ) ) {\n \trequire_once( 'classes/class-woo-conditions.php' );\n }\n require_once( 'classes/class-woo-sidebars.php' );\n\n // Third-party integrations.\n if ( class_exists( 'Woocommerce' ) ) require_once( 'integrations/integration-woocommerce.php' );\n\n global $woosidebars;\n $woosidebars = new Woo_Sidebars( __FILE__ );\n $woosidebars->version = '1.4.2';\n $woosidebars->init();\n?>"], "filenames": ["changelog.txt", "classes/class-woo-sidebars.php", "readme.txt", "woosidebars.php"], "buggy_code_start_loc": [1, 706, 5, 8], "buggy_code_end_loc": [1, 707, 96, 26], "fixing_code_start_loc": [2, 706, 5, 8], "fixing_code_end_loc": [6, 707, 104, 26], "type": "CWE-601", "message": "A vulnerability, which was classified as problematic, has been found in WooSidebars Plugin up to 1.4.1 on WordPress. Affected by this issue is the function enable_custom_post_sidebars of the file classes/class-woo-sidebars.php. The manipulation of the argument sendback leads to open redirect. The attack may be launched remotely. Upgrading to version 1.4.2 is able to address this issue. The patch is identified as 1ac6d6ac26e185673f95fc1ccc56a392169ba601. It is recommended to upgrade the affected component. VDB-230654 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10114", "sourceIdentifier": "cna@vuldb.com", "published": "2023-06-05T16:15:09.280", "lastModified": "2023-06-09T19:44:47.700", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in WooSidebars Plugin up to 1.4.1 on WordPress. Affected by this issue is the function enable_custom_post_sidebars of the file classes/class-woo-sidebars.php. The manipulation of the argument sendback leads to open redirect. The attack may be launched remotely. Upgrading to version 1.4.2 is able to address this issue. The patch is identified as 1ac6d6ac26e185673f95fc1ccc56a392169ba601. It is recommended to upgrade the affected component. VDB-230654 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:woocommerce:woosidebars:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "1.4.2", "matchCriteriaId": "1FE2308A-E6E3-401D-A2BC-43DC217CCAE6"}]}]}], "references": [{"url": "https://github.com/wp-plugins/woosidebars/commit/1ac6d6ac26e185673f95fc1ccc56a392169ba601", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.230654", "source": "cna@vuldb.com", "tags": ["Permissions Required"]}, {"url": "https://vuldb.com/?id.230654", "source": "cna@vuldb.com", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/wp-plugins/woosidebars/commit/1ac6d6ac26e185673f95fc1ccc56a392169ba601"}}