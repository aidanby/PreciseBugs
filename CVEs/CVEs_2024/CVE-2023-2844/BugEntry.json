{"buggy_code": ["package com.fit2cloud.provider.impl.huawei.api;\n\nimport com.aliyun.tea.TeaException;\nimport com.fit2cloud.common.exception.Fit2cloudException;\nimport com.fit2cloud.common.log.utils.LogUtil;\nimport com.fit2cloud.common.provider.entity.F2CEntityType;\nimport com.fit2cloud.common.provider.entity.F2CPerfMetricMonitorData;\nimport com.fit2cloud.common.provider.exception.ReTryException;\nimport com.fit2cloud.common.provider.exception.SkipPageException;\nimport com.fit2cloud.common.provider.util.CommonUtil;\nimport com.fit2cloud.common.provider.util.PageUtil;\nimport com.fit2cloud.common.utils.DateUtil;\nimport com.fit2cloud.common.utils.JsonUtil;\nimport com.fit2cloud.constants.ErrorCodeConstants;\nimport com.fit2cloud.provider.constants.*;\nimport com.fit2cloud.provider.entity.F2CDisk;\nimport com.fit2cloud.provider.entity.F2CImage;\nimport com.fit2cloud.provider.entity.F2CVirtualMachine;\nimport com.fit2cloud.provider.entity.request.BaseDiskRequest;\nimport com.fit2cloud.provider.entity.request.GetMetricsRequest;\nimport com.fit2cloud.provider.impl.huawei.constants.HuaweiDiskType;\nimport com.fit2cloud.provider.impl.huawei.constants.HuaweiPerfMetricConstants;\nimport com.fit2cloud.provider.impl.huawei.entity.*;\nimport com.fit2cloud.provider.impl.huawei.entity.credential.HuaweiVmCredential;\nimport com.fit2cloud.provider.impl.huawei.entity.request.*;\nimport com.fit2cloud.provider.impl.huawei.util.HuaweiMappingUtil;\nimport com.google.gson.Gson;\nimport com.huaweicloud.sdk.bss.v2.BssClient;\nimport com.huaweicloud.sdk.bss.v2.model.*;\nimport com.huaweicloud.sdk.ces.v1.CesClient;\nimport com.huaweicloud.sdk.ces.v1.model.*;\nimport com.huaweicloud.sdk.ecs.v2.EcsClient;\nimport com.huaweicloud.sdk.ecs.v2.model.*;\nimport com.huaweicloud.sdk.evs.v2.EvsClient;\nimport com.huaweicloud.sdk.evs.v2.model.ShowJobRequest;\nimport com.huaweicloud.sdk.evs.v2.model.ShowJobResponse;\nimport com.huaweicloud.sdk.evs.v2.model.*;\nimport com.huaweicloud.sdk.iam.v3.IamClient;\nimport com.huaweicloud.sdk.iam.v3.model.AuthProjectResult;\nimport com.huaweicloud.sdk.iam.v3.model.KeystoneListAuthProjectsRequest;\nimport com.huaweicloud.sdk.iam.v3.model.KeystoneListAuthProjectsResponse;\nimport com.huaweicloud.sdk.ims.v2.ImsClient;\nimport com.huaweicloud.sdk.ims.v2.model.ImageInfo;\nimport com.huaweicloud.sdk.ims.v2.model.ListImagesRequest;\nimport com.huaweicloud.sdk.ims.v2.model.ListImagesResponse;\nimport com.huaweicloud.sdk.vpc.v2.VpcClient;\nimport com.huaweicloud.sdk.vpc.v2.model.*;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.BeanUtils;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n\n/**\n * @Author:\u5f20\u5c11\u864e\n * @Date: 2022/9/22  2:44 PM\n * @Version 1.0\n * @\u6ce8\u91ca:\n */\npublic class HuaweiSyncCloudApi {\n    private static final Logger logger = LoggerFactory.getLogger(HuaweiSyncCloudApi.class);\n    private static final int WAIT_COUNT = 50;\n    private static final int SLEEP_TIME = 10000;\n\n    /**\n     * \u83b7\u53d6\u534e\u4e3a\u4e91\u4e91\u4e3b\u673a\u6570\u636e\n     *\n     * @param listVirtualMachineRequest \u83b7\u53d6\u534e\u4e3a\u4e91\u4e91\u4e3b\u673a\u8bf7\u6c42\u5bf9\u8c61\n     * @return \u4e91\u4e3b\u673a\u5bf9\u8c61\n     */\n    public static List<F2CVirtualMachine> listVirtualMachine(ListVirtualMachineRequest listVirtualMachineRequest) {\n        if (StringUtils.isEmpty(listVirtualMachineRequest.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(listVirtualMachineRequest.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(listVirtualMachineRequest.getCredential(), HuaweiVmCredential.class);\n            listVirtualMachineRequest.setLimit(PageUtil.DefaultPageSize);\n            listVirtualMachineRequest.setOffset(PageUtil.DefaultCurrentPage);\n            EcsClient ecsClient = credential.getEcsClient(listVirtualMachineRequest.getRegionId());\n            // \u5206\u9875\u67e5\u8be2\u4e91\u4e3b\u673a\u5217\u8868\n            List<ServerDetail> instances = PageUtil.page(listVirtualMachineRequest, req -> listServersDetails(ecsClient, req),\n                    ListServersDetailsResponse::getServers,\n                    (req, res) -> req.getLimit() <= res.getServers().size(),\n                    req -> req.setOffset(req.getOffset() + 1));\n            if (CollectionUtils.isNotEmpty(instances)) {\n                List<Port> ports = listPorts(listVirtualMachineRequest.getCredential(), listVirtualMachineRequest.getRegionId());\n                return instances.stream().map(server -> {\n                            F2CVirtualMachine virtualMachine = HuaweiMappingUtil.toF2CVirtualMachine(server, ports);\n                            // \u83b7\u53d6\u5305\u5e74\u5305\u6708\u673a\u5668\u7684\u5230\u671f\u65f6\u95f4\n                            if (F2CChargeType.PRE_PAID.equalsIgnoreCase(virtualMachine.getInstanceChargeType())) {\n                                appendExpiredTime(credential, server, virtualMachine);\n                            }\n                            return virtualMachine;\n                        }).map(virtualMachine -> {\n                            virtualMachine.setRegion(listVirtualMachineRequest.getRegionId());\n                            return virtualMachine;\n                        }).map(virtualMachine -> appendDisk(listVirtualMachineRequest.getCredential(), listVirtualMachineRequest.getRegionId(), virtualMachine))\n                        .toList();\n            }\n        }\n        return new ArrayList<>();\n    }\n\n\n    /**\n     * \u83b7\u53d6\u78c1\u76d8\n     *\n     * @param request \u8bf7\u6c42\u78c1\u76d8\u53c2\u6570\n     * @return \u54cd\u5e94\u5bf9\u8c61\n     */\n    public static List<F2CDisk> listDisk(ListDisksRequest request) {\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = credential.getEvsClient(request.getRegionId());\n            try {\n                ListVolumesResponse listVolumesResponse = evsClient.listVolumes(request);\n                List<VolumeDetail> volumes = listVolumesResponse.getVolumes();\n                return volumes.stream().map(HuaweiMappingUtil::toF2CDisk).toList();\n            } catch (Exception e) {\n                ReTryException.throwHuaweiReTry(e);\n                SkipPageException.throwHuaweiSkip(e);\n                throw new Fit2cloudException(10000, \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\" + e.getMessage());\n            }\n        }\n        return new ArrayList<>();\n    }\n\n    /**\n     * \u540c\u6b65\u955c\u50cf\n     *\n     * @param request \u8bf7\u6c42\u5bf9\u8c61\n     * @return \u54cd\u5e94\u5bf9\u8c61\n     */\n    public static List<F2CImage> lisImages(ListImageRequest request) {\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            ImsClient imsClient = credential.getImsClient(request.getRegionId());\n            try {\n                // \u53ea\u67e5\u8be2\u516c\u5171\u955c\u50cfgold\n                request.setImagetype(ListImagesRequest.ImagetypeEnum.GOLD);\n                ListImagesResponse listImagesResponse = imsClient.listImages(request);\n                List<ImageInfo> images = listImagesResponse.getImages();\n                return images.stream().map(imageInfo -> HuaweiMappingUtil.toF2CImage(imageInfo, request.getRegionId())).filter(Objects::nonNull).toList();\n            } catch (Exception e) {\n                ReTryException.throwHuaweiReTry(e);\n                SkipPageException.throwHuaweiSkip(e);\n                throw new Fit2cloudException(10000, \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\" + e.getMessage());\n            }\n        }\n        return new ArrayList<>();\n    }\n\n    /**\n     * \u7ed9\u4e91\u4e3b\u673a\u6dfb\u52a0\u78c1\u76d8\u6570\u636e\n     *\n     * @param credential     \u8ba4\u8bc1\u4fe1\u606f\n     * @param regionId       \u533a\u57df\u4fe1\u606f\n     * @param virtualMachine \u4e91\u4e3b\u673a\u5bf9\u8c61\n     * @return \u4e91\u4e3b\u673a\u5bf9\u8c61\n     */\n    private static F2CVirtualMachine appendDisk(String credential, String regionId, F2CVirtualMachine virtualMachine) {\n        ListDisksRequest listDisksRequest = new ListDisksRequest();\n        listDisksRequest.setCredential(credential);\n        listDisksRequest.setRegionId(regionId);\n        List<F2CDisk> disks = listDisk(listDisksRequest);\n        long sum = disks.stream().mapToLong(F2CDisk::getSize).sum();\n        virtualMachine.setDisk((int) sum);\n        return virtualMachine;\n    }\n\n    /**\n     * \u7ed9\u4e91\u4e3b\u673a\u589e\u52a0\u5230\u671f\u65f6\u95f4\n     *\n     * @param credential\n     * @param serverDetail\n     * @param virtualMachine\n     */\n    private static void appendExpiredTime(HuaweiVmCredential credential, ServerDetail serverDetail, F2CVirtualMachine virtualMachine) {\n        String orderId = serverDetail.getMetadata().get(\"metering.order_id\");\n        String productId = serverDetail.getMetadata().get(\"metering.product_id\");\n        ShowCustomerOrderDetailsResponse response = getOrderDetailsById(orderId, credential.getBssClient());\n        if (CollectionUtils.isNotEmpty(response.getOrderLineItems())) {\n            String expireTime = response.getOrderLineItems().stream().filter(orderLineItemEntityV2 ->\n                    orderLineItemEntityV2.getProductId().equalsIgnoreCase(productId)\n            ).collect(Collectors.toList()).get(0).getExpireTime();\n            virtualMachine.setExpiredTime(new Date(CommonUtil.getUTCTime(expireTime, \"yyyy-MM-dd'T'HH:mm:ss'Z'\")).getTime());\n        }\n    }\n\n    /**\n     * \u83b7\u53d6port\u5217\u8868\n     *\n     * @param credential \u8ba4\u8bc1\u4fe1\u606f\n     * @param regionId   \u533a\u57dfid\n     * @return port\u5bf9\u8c61\n     */\n    private static List<Port> listPorts(String credential, String regionId) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(credential, HuaweiVmCredential.class);\n            VpcClient vpcClient = huaweiVmCredential.getVpcClient(regionId);\n            ListPortsRequest listPortsRequest = new ListPortsRequest();\n            ListPortsResponse listPortsResponse = vpcClient.listPorts(listPortsRequest);\n            return listPortsResponse.getPorts();\n        } catch (Exception e) {\n            return new ArrayList<>();\n        }\n    }\n\n    /**\n     * @param ecsClient ecs\u5ba2\u6237\u7aef\n     * @param req       \u8bf7\u6c42\u5bf9\u8c61\n     * @return ListServersDetailsResponse\n     */\n    private static ListServersDetailsResponse listServersDetails(EcsClient ecsClient, ListServersDetailsRequest req) {\n        try {\n            return ecsClient.listServersDetails(req);\n        } catch (Exception e) {\n            ReTryException.throwHuaweiReTry(e);\n            SkipPageException.throwHuaweiSkip(e);\n            throw new Fit2cloudException(10000, \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\" + e.getMessage());\n        }\n    }\n\n    public static boolean powerOff(HuaweiInstanceRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n\n            try {\n                ServerDetail serverDetail = getInstanceById(request.getUuid(), client);\n                if (F2CInstanceStatus.Stopped.name().equalsIgnoreCase(HuaweiMappingUtil.toF2CInstanceStatus(serverDetail.getStatus()))) {\n                    return true;\n                }\n                BatchStopServersResponse batchStopServersResponse = client.batchStopServers(new BatchStopServersRequest()\n                        .withBody(new BatchStopServersRequestBody()\n                                .withOsStop(\n                                        new BatchStopServersOption()\n                                                .withServers(Arrays.asList(new ServerId().withId(request.getUuid())))\n                                                .withType(request.getForce() ? BatchStopServersOption.TypeEnum.HARD : BatchStopServersOption.TypeEnum.SOFT))));\n\n                checkEcsJobStatus(client, batchStopServersResponse.getJobId());\n                return true;\n            } catch (TeaException teaException) {\n                throw new Fit2cloudException(ErrorCodeConstants.VM_POWER_OFF_FAIL.getCode(), teaException.getMessage());\n            } catch (Exception e) {\n                TeaException error = new TeaException(e.getMessage(), e);\n                throw new Fit2cloudException(ErrorCodeConstants.VM_POWER_OFF_FAIL.getCode(), error.getMessage());\n            }\n        }\n        return false;\n    }\n\n    public static boolean powerOn(HuaweiInstanceRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            try {\n                ServerDetail serverDetail = getInstanceById(request.getUuid(), client);\n                if (F2CInstanceStatus.Running.name().equalsIgnoreCase(HuaweiMappingUtil.toF2CInstanceStatus(serverDetail.getStatus()))) {\n                    return true;\n                }\n                BatchStartServersResponse batchStartServersResponse = client.batchStartServers(new BatchStartServersRequest()\n                        .withBody(new BatchStartServersRequestBody()\n                                .withOsStart(\n                                        new BatchStartServersOption()\n                                                .withServers(Arrays.asList(new ServerId().withId(request.getUuid()))))));\n                checkEcsJobStatus(client, batchStartServersResponse.getJobId());\n                return true;\n            } catch (TeaException teaError) {\n                throw new Fit2cloudException(ErrorCodeConstants.VM_POWER_ON_FAIL.getCode(), teaError.getMessage());\n            } catch (Exception e) {\n                TeaException error = new TeaException(e.getMessage(), e);\n                throw new Fit2cloudException(ErrorCodeConstants.VM_POWER_ON_FAIL.getCode(), error.getMessage());\n            }\n        }\n        return false;\n    }\n\n    public static boolean rebootInstance(HuaweiInstanceRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            try {\n                BatchRebootServersResponse batchRebootServersResponse = client.batchRebootServers(new BatchRebootServersRequest()\n                        .withBody(new BatchRebootServersRequestBody()\n                                .withReboot(\n                                        new BatchRebootSeversOption()\n                                                .withServers(Arrays.asList(new ServerId().withId(request.getUuid())))\n                                                .withType(request.getForce() ? BatchRebootSeversOption.TypeEnum.HARD : BatchRebootSeversOption.TypeEnum.SOFT))));\n                checkEcsJobStatus(client, batchRebootServersResponse.getJobId());\n                return true;\n            } catch (TeaException teaException) {\n                throw new Fit2cloudException(ErrorCodeConstants.VM_REBOOT_FAIL.getCode(), teaException.getMessage());\n            } catch (Exception e) {\n                TeaException error = new TeaException(e.getMessage(), e);\n                throw new Fit2cloudException(ErrorCodeConstants.VM_REBOOT_FAIL.getCode(), error.getMessage());\n            }\n        }\n        return false;\n    }\n\n    public static boolean deleteInstance(HuaweiInstanceRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            try {\n                ShowServerResponse showServerResponse = client.showServer(new ShowServerRequest().withServerId(request.getUuid()));\n                ServerDetail instance = showServerResponse.getServer();\n                // \u5982\u679c\u662f\u5305\u5e74\u5305\u6708 \u8c03\u7528\u9000\u8ba2\u65b9\u6cd5 \u5426\u5219\u76f4\u63a5\u5220\u9664\n                Map<String, String> metadata = instance.getMetadata();\n                if (ObjectUtils.isNotEmpty(metadata) && metadata.containsKey(\"charging_mode\") && StringUtils.equals(metadata.get(\"charging_mode\"), \"1\")) {\n                    BssClient bssClient = credential.getBssClient();\n                    CancelResourcesSubscriptionRequest cancelRequest = new CancelResourcesSubscriptionRequest();\n                    UnsubscribeResourcesReq body = new UnsubscribeResourcesReq();\n                    body.setResourceIds(new ArrayList<String>() {{\n                        add(request.getUuid());\n                    }});\n                    body.setUnsubscribeType(1);\n                    cancelRequest.setBody(body);\n                    CancelResourcesSubscriptionResponse cancelResponse = bssClient.cancelResourcesSubscription(cancelRequest);\n                    return cancelResponse.getHttpStatusCode() == 200;\n                } else {\n                    DeleteServersResponse batchStartServersResponse = client.deleteServers(new DeleteServersRequest()\n                            .withBody(new DeleteServersRequestBody()\n                                    .withServers(Arrays.asList(new ServerId().withId(request.getUuid())))));\n                    checkEcsJobStatus(client, batchStartServersResponse.getJobId());\n                    return true;\n                }\n            } catch (TeaException teaException) {\n                throw new Fit2cloudException(ErrorCodeConstants.VM_DELETE_FAIL.getCode(), teaException.getMessage());\n            } catch (Exception e) {\n                TeaException error = new TeaException(e.getMessage(), e);\n                throw new Fit2cloudException(ErrorCodeConstants.VM_DELETE_FAIL.getCode(), error.getMessage());\n            }\n        }\n        return false;\n    }\n\n    private static void checkEcsJobStatus(EcsClient client, String jobId) {\n        int count = 0;\n        while (true) {\n            try {\n                Thread.sleep(SLEEP_TIME);\n                com.huaweicloud.sdk.ecs.v2.model.ShowJobResponse jobResponse = client.showJob(new com.huaweicloud.sdk.ecs.v2.model.ShowJobRequest().withJobId(jobId));\n                com.huaweicloud.sdk.ecs.v2.model.ShowJobResponse.StatusEnum status = jobResponse.getStatus();\n                if (ShowJobResponse.StatusEnum.SUCCESS.getValue().equals(status.getValue())) {\n                    break;\n                }\n                if (ShowJobResponse.StatusEnum.FAIL.getValue().equals(status.getValue())) {\n                    throw new RuntimeException(jobResponse.getFailReason());\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"Check cloud server status timeout\uff01\");\n                }\n                count++;\n            } catch (Exception e) {\n                throw new RuntimeException(\"Check cloud server status error: \" + e.getMessage());\n            }\n        }\n    }\n\n    /**\n     * \u6839\u636e\u53ef\u7528\u533a\u8fc7\u6ee4\u78c1\u76d8\u79cd\u7c7b\n     *\n     * @param request\n     * @return\n     */\n    public static List<Map<String, String>> getDiskTypes(HuaweiGetDiskTypeRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n\n        CinderListVolumeTypesRequest cinderListVolumeTypesRequest = new CinderListVolumeTypesRequest();\n        try {\n            CinderListVolumeTypesResponse response = evsClient.cinderListVolumeTypes(cinderListVolumeTypesRequest);\n            List<Map<String, String>> mapList = new ArrayList<>();\n            response.getVolumeTypes().forEach(volumeType -> {\n                if (StringUtils.isNoneEmpty(request.getZone())\n                        //\u8fd9\u4e2a\u540d\u79f0\u7684\u78c1\u76d8\u7c7b\u578b\u6709\u95ee\u9898\uff0c\u4e91\u4e0a\u663e\u793a\u6ca1\u6709\uff0c\u4f46\u662f\u63a5\u53e3\u4f1a\u8fd4\u56de\u6765\uff0c\u5728\u8fd9\u91cc\u7279\u6b8a\u5904\u7406\u53bb\u6389\n                        && !StringUtils.equalsIgnoreCase(\"uh-l1\", volumeType.getName())\n                        && StringUtils.isNoneEmpty(volumeType.getExtraSpecs().getReSKEYAvailabilityZones())\n                        && volumeType.getExtraSpecs().getReSKEYAvailabilityZones().contains(request.getZone())\n                        && (StringUtils.isEmpty(volumeType.getExtraSpecs().getOsVendorExtendedSoldOutAvailabilityZones())\n                        || !volumeType.getExtraSpecs().getOsVendorExtendedSoldOutAvailabilityZones().contains(request.getZone())) && !volumeType.getName().startsWith(\"DESS_\")) {\n                    Map<String, String> vol = new HashMap<>();\n                    vol.put(\"id\", volumeType.getName());\n                    vol.put(\"name\", HuaweiDiskType.getName(volumeType.getName()));\n                    mapList.add(vol);\n                }\n            });\n            return mapList;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return new ArrayList<>();\n    }\n\n    /**\n     * \u521b\u5efa\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static List<F2CDisk> createDisks(HuaweiCreateDisksRequest request) {\n        List<F2CDisk> f2CDisks = new ArrayList<>();\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n        try {\n            for (F2CDisk disk : request.getDisks()) {\n                CreateVolumeResponse response = evsClient.createVolume(request.toCreateVolumeRequest(disk));\n                ShowJobResponse showJobResponse = getJob(response.getJobId(), evsClient);\n                String status = request.getInstanceUuid() == null ? F2CDiskStatus.AVAILABLE : \"in-use\";\n                F2CDisk createdDisk = HuaweiMappingUtil.toF2CDisk(checkVolumeStatus(showJobResponse.getEntities().getVolumeId(), evsClient, status));\n                createdDisk.setDeleteWithInstance(disk.getDeleteWithInstance());\n                f2CDisks.add(createdDisk);\n            }\n            return f2CDisks;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u521b\u5efa\u78c1\u76d8\n     */\n    public static F2CDisk createDisk(HuaweiCreateDiskRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n        try {\n            CreateVolumeResponse response = evsClient.createVolume(request.toCreateVolumeRequest());\n            String volumeId;\n            // \u534e\u4e3a\u4e91\u7684 in-use \u662f\u4e2d\u5212\u7ebf\ud83d\ude2d\n            String status = request.getInstanceUuid() == null ? F2CDiskStatus.AVAILABLE : \"in-use\";\n            if (StringUtils.isNotEmpty(response.getOrderId())) {\n                volumeId = checkOrderResourceId(response.getOrderId(), huaweiVmCredential.getBssClient());\n            } else {\n                ShowJobResponse showJobResponse = getJob(response.getJobId(), evsClient);\n                volumeId = showJobResponse.getEntities().getVolumeId();\n            }\n            F2CDisk createdDisk = HuaweiMappingUtil.toF2CDisk(checkVolumeStatus(volumeId, evsClient, status));\n\n            // \u5355\u72ec\u8c03\u7528\u63a5\u53e3\u8bbe\u7f6e\u78c1\u76d8\u662f\u5426\u968f\u5b9e\u4f8b\u5220\u9664\u5c5e\u6027\uff0c\u4e0d\u629b\u51fa\u5f02\u5e38\n            if (DeleteWithInstance.YES.name().equalsIgnoreCase(request.getDeleteWithInstance())) {\n                try {\n                    EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n                    updateServerBlockDevice(ecsClient, request.getInstanceUuid(), createdDisk.getDiskId(), request.getDeleteWithInstance());\n                    createdDisk.setDeleteWithInstance(DeleteWithInstance.YES.name());\n                } catch (Exception e) {\n                    createdDisk.setDeleteWithInstance(DeleteWithInstance.NO.name());\n                    LogUtil.error(\"Failed to modify disk.\" + e.getMessage(), e);\n                }\n            }\n\n            return createdDisk;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    public static String checkOrderResourceId(String orderId, BssClient bssClient) {\n        ListPayPerUseCustomerResourcesRequest resourceRequest = new ListPayPerUseCustomerResourcesRequest();\n        QueryResourcesReq body = new QueryResourcesReq();\n        body.setOrderId(orderId);\n        resourceRequest.withBody(body);\n        String resourceId = null;\n        try {\n            int count = 0;\n            boolean b = true;\n            while (b) {\n                Thread.sleep(5000);\n                count++;\n                ListPayPerUseCustomerResourcesResponse resourcesResponse = bssClient.listPayPerUseCustomerResources(resourceRequest);\n                List<OrderInstanceV2> disksInfo = resourcesResponse.getData();\n                if (CollectionUtils.isNotEmpty(disksInfo)) {\n                    b = false;\n                    resourceId = disksInfo.get(0).getResourceId();\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"Check order resource info timeout\uff01\");\n                }\n            }\n            return resourceId;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u6269\u5bb9\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static boolean enlargeDisk(HuaweiResizeDiskRequest request) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n\n            String diskId = request.getDiskId();\n            ShowVolumeRequest showVolumeRequest = new ShowVolumeRequest();\n            showVolumeRequest.setVolumeId(diskId);\n            VolumeDetail volume = evsClient.showVolume(showVolumeRequest).getVolume();\n            if (volume == null) {\n                throw new RuntimeException(\"Can not find disk: \" + request.getDiskId());\n            }\n            String status = volume.getStatus();\n            evsClient.resizeVolume(request.toResizeVolumeRequest());\n            if (\"in-use\".equalsIgnoreCase(status) || status.equalsIgnoreCase(F2CDiskStatus.AVAILABLE)) {\n                checkVolumeStatus(diskId, evsClient, status);\n            }\n            return true;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u6302\u8f7d\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static F2CDisk attachDisk(HuaweiAttachDiskRequest request) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n            EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n            ecsClient.attachServerVolume(request.toAttachServerVolumeRequest());\n            F2CDisk f2CDisk = HuaweiMappingUtil.toF2CDisk(checkVolumeStatus(request.getDiskId(), evsClient, \"in-use\"));\n\n            // \u5355\u72ec\u8c03\u7528\u63a5\u53e3\u8bbe\u7f6e\u78c1\u76d8\u662f\u5426\u968f\u5b9e\u4f8b\u5220\u9664\u5c5e\u6027\uff0c\u4e0d\u629b\u51fa\u5f02\u5e38\n            if (DeleteWithInstance.YES.name().equalsIgnoreCase(request.getDeleteWithInstance())) {\n                try {\n                    updateServerBlockDevice(ecsClient, request.getInstanceUuid(), request.getDiskId(), request.getDeleteWithInstance());\n                    f2CDisk.setDeleteWithInstance(DeleteWithInstance.YES.name());\n                } catch (Exception e) {\n                    f2CDisk.setDeleteWithInstance(DeleteWithInstance.NO.name());\n                    LogUtil.error(\"Failed to modify disk.\" + e.getMessage(), e);\n                }\n            }\n\n            return f2CDisk;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u4fee\u6539\u4e91\u670d\u52a1\u5668\u6302\u8f7d\u7684\u5355\u4e2a\u78c1\u76d8\u4fe1\u606f\uff08\u662f\u5426\u968f\u5b9e\u4f8b\u5220\u9664\u5c5e\u6027\uff09\n     *\n     * @param client\n     * @return\n     */\n    public static void updateServerBlockDevice(EcsClient client, String instanceId, String diskId, String deleteWithInstance) {\n        if (StringUtils.isNotEmpty(instanceId)) {\n            UpdateServerBlockDeviceRequest blockDeviceRequest =\n                    new UpdateServerBlockDeviceRequest()\n                            .withServerId(instanceId)\n                            .withVolumeId(diskId)\n                            .withBody(new UpdateServerBlockDeviceReq()\n                                    .withBlockDevice(new UpdateServerBlockDeviceOption()\n                                            .withDeleteOnTermination(DeleteWithInstance.YES.name().equals(deleteWithInstance))));\n            client.updateServerBlockDevice(blockDeviceRequest);\n        }\n    }\n\n    /**\n     * \u5378\u8f7d\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static boolean detachDisk(HuaweiDetachDiskRequest request) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n            EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n\n            // \u5224\u65ad\u78c1\u76d8\u662f\u5426\u662f\u7cfb\u7edf\u76d8\n            ShowVolumeRequest showVolumeRequest = new ShowVolumeRequest();\n            showVolumeRequest.setVolumeId(request.getDiskId());\n            VolumeDetail volume = evsClient.showVolume(showVolumeRequest).getVolume();\n            Optional.ofNullable(volume).orElseThrow(() -> new RuntimeException(\"Can not find the disk!\"));\n\n            if (Boolean.valueOf(volume.getBootable())) {\n                // \u5224\u65ad\u5b9e\u4f8b\u662f\u5426\u662f\u5173\u673a\u72b6\u6001\n                ShowServerResponse showServerResponse = ecsClient.showServer(new ShowServerRequest().withServerId(request.getInstanceUuid()));\n                ServerDetail server = showServerResponse.getServer();\n                Optional.ofNullable(server).orElseThrow(() -> new RuntimeException(\"Can not find the server!\"));\n\n                String serverStatus = server.getStatus();\n                if (!\"stopped\".equalsIgnoreCase(serverStatus)) {\n                    // \u7cfb\u7edf\u76d8\u9700\u8981\u5b9e\u4f8b\u5173\u673a\u65b9\u53ef\u5378\u8f7d\n                    throw new RuntimeException(\"Server status must be stopped!\");\n                }\n            }\n\n            ecsClient.detachServerVolume(request.toDetachServerVolumeRequest());\n            checkVolumeStatus(request.getDiskId(), evsClient, F2CDiskStatus.AVAILABLE);\n            return true;\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to detach data disk!\" + e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u5220\u9664\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static boolean deleteDisk(HuaweiDeleteDiskRequest request) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n            evsClient.deleteVolume(request.toDeleteVolumeRequest());\n            return true;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    private static VolumeDetail checkVolumeStatus(String volumeId, EvsClient evsClient, String status) throws Exception {\n        try {\n            int count = 0;\n            VolumeDetail volume = null;\n            boolean b = true;\n            while (b) {\n                Thread.sleep(5000);\n                count++;\n                ShowVolumeRequest showVolumeRequest = new ShowVolumeRequest();\n                showVolumeRequest.setVolumeId(volumeId);\n                volume = evsClient.showVolume(showVolumeRequest).getVolume();\n\n                if (volume != null && status.equalsIgnoreCase(volume.getStatus())) {\n                    b = false;\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"Check cloud disk status timeout\uff01\");\n                }\n            }\n            return volume;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    private static ShowJobResponse getJob(String jobId, EvsClient evsClient) {\n        com.huaweicloud.sdk.evs.v2.model.ShowJobRequest showJobRequest = new ShowJobRequest();\n        showJobRequest.setJobId(jobId);\n        try {\n            int count = 0;\n            while (true) {\n                Thread.sleep(2000);\n                count++;\n                ShowJobResponse showJobResponse = evsClient.showJob(showJobRequest);\n                if (\"FAIL\".equalsIgnoreCase(showJobResponse.getStatus().getValue())) {\n                    throw new RuntimeException(new Gson().toJson(showJobResponse));\n                }\n                if (\"SUCCESS\".equalsIgnoreCase(showJobResponse.getStatus().getValue())) {\n                    return showJobResponse;\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"Check job status timeout\uff01\");\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    public static List<F2CPerfMetricMonitorData> getF2CPerfMetricList(GetMetricsRequest getMetricsRequest) {\n        existRegion(getMetricsRequest);\n        List<F2CPerfMetricMonitorData> result = new ArrayList<>();\n        //\u8bbe\u7f6e\u65f6\u95f4\uff0c\u6839\u636esyncTimeStampStr,\u9ed8\u8ba4\u4e00\u4e2a\u5c0f\u65f6\n        Long startTime = DateUtil.beforeOneHourToTimestamp(Long.valueOf(getMetricsRequest.getSyncTimeStampStr()));\n        //\u591a\u83b7\u53d6\u8fc7\u53bb30\u5206\u949f\u7684\u6570\u636e\uff0c\u9632\u6b62\u540c\u6b65\u7ebf\u7a0b\u65f6\u95f4\u4e0d\u56fa\u5b9a\uff0c\u5bfc\u81f4\u6570\u636e\u4e0d\u5168\u7684\u95ee\u9898\n        getMetricsRequest.setStartTime(String.valueOf(startTime - 1800000L));\n        getMetricsRequest.setEndTime(getMetricsRequest.getSyncTimeStampStr());\n        try {\n            getMetricsRequest.setRegionId(getMetricsRequest.getRegionId());\n            result.addAll(getVmPerfMetric(getMetricsRequest));\n        } catch (Exception e) {\n            throw new SkipPageException(100021, \"\u83b7\u53d6\u76d1\u63a7\u6570\u636e\u5931\u8d25-\" + getMetricsRequest.getRegionId() + \"-\" + e.getMessage());\n        }\n        return result;\n    }\n\n    private static void existRegion(GetMetricsRequest getMetricsRequest) {\n        if (StringUtils.isEmpty(getMetricsRequest.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u865a\u62df\u673a\u76d1\u63a7\u6307\u6807\u6570\u636e\n     * \u9664\u4e86CPU,\u5185\u5b58\uff0c\u78c1\u76d8\u4e0e\u7f51\u7edc\u90fd\u662f\u57fa\u7840\u6307\u6807\u7684\u6570\u636e\uff0c\u56e0\u4e3aAPI\u65e0\u6cd5\u83b7\u53d6\n     *\n     * @param getMetricsRequest \u76d1\u63a7\u67e5\u8be2\u53c2\u6570\n     * @return \u76d1\u63a7\u6570\u636e\n     */\n    private static List<F2CPerfMetricMonitorData> getVmPerfMetric(GetMetricsRequest getMetricsRequest) {\n        HuaweiVmCredential credential = JsonUtil.parseObject(getMetricsRequest.getCredential(), HuaweiVmCredential.class);\n        List<F2CPerfMetricMonitorData> result = new ArrayList<>();\n        List<F2CVirtualMachine> vms = listVirtualMachine(getListVmRequest(getMetricsRequest));\n        if (vms.size() == 0) {\n            return result;\n        }\n        CesClient cesClient = credential.getCesClient(getMetricsRequest.getRegionId());\n        // \u5faa\u73af\u4e91\u4e3b\u673a\n        vms.forEach(vm -> {\n            try {\n                // \u5b58\u50a8\u63a5\u53e3\u8fd4\u56de\u7684\u6570\u636e\n                Map<String, List<BatchMetricData>> apiResult = new HashMap<>(3);\n                // \u6570\u636e\u805a\u5408\u67e5\u8be2\u63a5\u53e3\n                List.of(\"average\", \"max\", \"min\").forEach(filter -> {\n                    try {\n                        BatchListMetricDataRequest request = batchListMetricRequest(getMetricsRequest, vm.getInstanceUUID(), filter);\n                        BatchListMetricDataResponse response = cesClient.batchListMetricData(request);\n                        apiResult.put(filter, response.getMetrics());\n                    } catch (Exception e) {\n                        LogUtil.error(\"\u534e\u4e3a\u4e91\u67e5\u8be2\u4e91\u4e3b\u673a \" + vm.getName() + \"\u805a\u5408\u503c-\" + filter + \"- \u76d1\u63a7\u6570\u636e\u5931\u8d25:\" + e.getMessage());\n                    }\n                });\n                // \u5904\u7406\u7ed3\u679c\uff0c\u6620\u5c04\u6570\u636e\u5230\u5e73\u53f0\u9700\u8981\u67e5\u8be2\u7684\u6307\u6807\n                Arrays.stream(HuaweiPerfMetricConstants.CloudServerPerfMetricEnum.values()).sorted().toList().forEach(perfMetric -> {\n                    // \u5b58\u50a8\u65f6\u95f4\u8282\u70b9\u6570\u636e\uff0c5\u5206\u949f\u95f4\u9694\uff0c1\u4e2a\u534a\u5c0f\u65f6\uff0c\u6700\u591a18\u6761\u6570\u636e\n                    Map<Long, DatapointForBatchMetric> datapointMap = new HashMap<>(18);\n                    // \u5904\u7406\u7ed3\u679c\u6570\u636e\n                    apiResult.keySet().forEach(key -> {\n                        // \u8fc7\u6ee4\u76d1\u63a7\u6570\u636e\n                        List<DatapointForBatchMetric> datapointList = new ArrayList<>();\n                        datapointList = getDatapointForBaseOrAgent(apiResult.get(key), perfMetric);\n                        datapointList.forEach(v -> {\n                            if (!datapointMap.containsKey(v.getTimestamp())) {\n                                datapointMap.put(v.getTimestamp(), v);\n                            }\n                            if (StringUtils.equalsIgnoreCase(key, \"average\")) {\n                                datapointMap.get(v.getTimestamp()).setAverage(v.getAverage());\n                            }\n                            if (StringUtils.equalsIgnoreCase(key, \"max\")) {\n                                datapointMap.get(v.getTimestamp()).setMax(v.getMax());\n                            }\n                            if (StringUtils.equalsIgnoreCase(key, \"min\")) {\n                                datapointMap.get(v.getTimestamp()).setMin(v.getMin());\n                            }\n                        });\n                    });\n                    datapointMap.forEach((k, v) -> {\n                        F2CPerfMetricMonitorData f2CEntityPerfMetric = HuaweiMappingUtil.toF2CPerfMetricMonitorData(v);\n                        f2CEntityPerfMetric.setEntityType(F2CEntityType.VIRTUAL_MACHINE.name());\n                        f2CEntityPerfMetric.setMetricName(perfMetric.name());\n                        f2CEntityPerfMetric.setPeriod(getMetricsRequest.getPeriod());\n                        f2CEntityPerfMetric.setInstanceId(vm.getInstanceUUID());\n                        f2CEntityPerfMetric.setUnit(perfMetric.getUnit());\n                        result.add(f2CEntityPerfMetric);\n                    });\n                });\n            } catch (Exception e) {\n                LogUtil.error(\"\u540c\u6b65 \u534e\u4e3a \u4e91\u4e3b\u673a \" + vm.getName() + \" \u76d1\u63a7\u5931\u8d25:\" + e.getMessage());\n            }\n        });\n        return result;\n    }\n\n    /**\n     * \u8fc7\u6ee4\u76d1\u63a7\u6570\u636e\n     *\n     * @param response   \u7ed3\u679c\n     * @param perfMetric \u6307\u6807\n     * @return \u76d1\u63a7\u6570\u636e\n     */\n    private static List<DatapointForBatchMetric> getDatapointForBaseOrAgent(List<BatchMetricData> response, HuaweiPerfMetricConstants.CloudServerPerfMetricEnum perfMetric) {\n        List<DatapointForBatchMetric> agentData = getDatapointForBaseOrAgent(response, perfMetric, true);\n        return CollectionUtils.isNotEmpty(agentData) ? agentData : getDatapointForBaseOrAgent(response, perfMetric, false);\n    }\n\n    /**\n     * \u83b7\u53d6 \u57fa\u7840\u76d1\u63a7\u6570\u636e\u6d3b\u7740agent\u7684\u76d1\u63a7\u6570\u636edatapoint\n     *\n     * @param response   \u6570\u636e\u7ed3\u679c\n     * @param perfMetric \u6307\u6807\n     * @param agent      \u662f\u5426\u662fagent\n     * @return \u6570\u636e\n     */\n    private static List<DatapointForBatchMetric> getDatapointForBaseOrAgent(List<BatchMetricData> response, HuaweiPerfMetricConstants.CloudServerPerfMetricEnum perfMetric, boolean agent) {\n        List<BatchMetricData> agentMetricData = response.stream()\n                .filter(v -> StringUtils.equalsIgnoreCase(agent ? \"AGT.ECS\" : \"SYS.ECS\", v.getNamespace()))\n                .filter(v -> StringUtils.equalsIgnoreCase(agent ? perfMetric.getAgentMetricName() : perfMetric.getBaseMetricName(), v.getMetricName()))\n                .filter(v -> v.getDatapoints().size() > 0).toList();\n        return CollectionUtils.isNotEmpty(agentMetricData) ? agentMetricData.get(0).getDatapoints() : new ArrayList<>();\n    }\n\n\n    /**\n     * \u6279\u91cf\u6307\u6807\u83b7\u53d6\u76d1\u63a7\u6570\u636e\n     *\n     * @param getMetricsRequest \u53c2\u6570\u6765\u6e90\n     * @param instanceId        \u4e91\u4e3b\u673aID\n     * @param filter            \u6570\u636e\u805a\u5408\u65b9\u5f0f,max\u4e3a\u6700\u5927\u503c,min\u4e3a\u6700\u5c0f\u503c,average\u4e3a\u5e73\u5747\u503c\n     * @return \u6279\u91cf\u67e5\u8be2\u53c2\u6570\n     */\n    private static BatchListMetricDataRequest batchListMetricRequest(GetMetricsRequest getMetricsRequest, String instanceId, String filter) {\n        BatchListMetricDataRequest request = new BatchListMetricDataRequest();\n        BatchListMetricDataRequestBody body = new BatchListMetricDataRequestBody();\n        List<MetricsDimension> listMetricsDimensions = new ArrayList<>();\n        listMetricsDimensions.add(\n                new MetricsDimension()\n                        .withName(\"instance_id\")\n                        .withValue(instanceId)\n        );\n        List<MetricInfo> listBodyMetrics = listMetricInfo(listMetricsDimensions);\n        body.withTo(Long.valueOf(getMetricsRequest.getEndTime()));\n        body.withFrom(Long.valueOf(getMetricsRequest.getStartTime()));\n        body.withFilter(filter);\n        body.withPeriod(\"300\");\n        body.withMetrics(listBodyMetrics);\n        request.withBody(body);\n        return request;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u6307\u6807\u4e24\u4e2anamespace\u7684\u6570\u636e\uff08\u57fa\u7840\u3001agent\uff09\n     * listBodyMetrics\u6700\u5927\u652f\u6301500\u4e2a\n     * \u76ee\u524d10*2\n     *\n     * @param listMetricsDimensions \u5bf9\u8c61\u53c2\u6570\n     * @return \u6240\u6709\u6307\u6807\u53c2\u6570\n     */\n    private static List<MetricInfo> listMetricInfo(List<MetricsDimension> listMetricsDimensions) {\n        List<MetricInfo> listBodyMetrics = new ArrayList<>();\n        Arrays.stream(HuaweiPerfMetricConstants.CloudServerPerfMetricEnum.values()).sorted().toList().forEach(perfMetric -> {\n            listBodyMetrics.add(\n                    new MetricInfo()\n                            .withNamespace(\"AGT.ECS\")\n                            .withMetricName(perfMetric.getAgentMetricName())\n                            .withDimensions(listMetricsDimensions)\n            );\n            listBodyMetrics.add(\n                    new MetricInfo()\n                            .withNamespace(\"SYS.ECS\")\n                            .withMetricName(perfMetric.getBaseMetricName())\n                            .withDimensions(listMetricsDimensions)\n            );\n        });\n        return listBodyMetrics;\n    }\n\n    /**\n     * \u6839\u636e\u6307\u6807\u67e5\u8be2\u6307\u5b9a\u503c\u7684\u76d1\u63a7\u6570\u636e\n     *\n     * @param cesClient  \u67e5\u8be2\u5ba2\u6237\u7aef\n     * @param vm         \u8981\u67e5\u8be2\u76d1\u63a7\u6570\u636e\u7684\u4e91\u4e3b\u673a\n     * @param perfMetric \u76d1\u63a7\u6307\u6807\n     * @param request    API\u53c2\u6570\n     * @return \u76d1\u63a7\u6570\u636e\u65f6\u95f4\u6233\n     */\n    private static Map<Long, Datapoint> getVmMonitoringData(CesClient cesClient, F2CVirtualMachine vm, HuaweiPerfMetricConstants.CloudServerPerfMetricEnum perfMetric, ShowMetricDataRequest request) {\n        Map<Long, Datapoint> datapointMap = new HashMap<>();\n        List.of(\"average\", \"max\", \"min\").forEach(filter -> {\n            try {\n                request.withFilter(ShowMetricDataRequest.FilterEnum.fromValue(filter));\n                //\u67e5\u8be2\u76d1\u63a7\u6307\u6807\u6570\u636e\n                ShowMetricDataResponse response = cesClient.showMetricData(request);\n                if (response.getHttpStatusCode() == 200 && CollectionUtils.isNotEmpty(response.getDatapoints())) {\n                    List<Datapoint> list = response.getDatapoints();\n                    list.forEach(v -> {\n                        if (!datapointMap.containsKey(v.getTimestamp())) {\n                            datapointMap.put(v.getTimestamp(), v);\n                        }\n                        if (StringUtils.equalsIgnoreCase(filter, \"average\")) {\n                            datapointMap.get(v.getTimestamp()).setAverage(v.getAverage());\n                        }\n                        if (StringUtils.equalsIgnoreCase(filter, \"max\")) {\n                            datapointMap.get(v.getTimestamp()).setMax(v.getMax());\n                        }\n                        if (StringUtils.equalsIgnoreCase(filter, \"min\")) {\n                            datapointMap.get(v.getTimestamp()).setMin(v.getMin());\n                        }\n                    });\n                }\n            } catch (Exception e) {\n                LogUtil.error(\"\u67e5\u8be2 \u534e\u4e3a \u4e91\u4e3b\u673a \" + vm.getName() + \" \u76d1\u63a7\u6307\u6807 \" + perfMetric.getDescription() + \" \" + filter + \"\u503c\u5931\u8d25:\" + e.getMessage());\n            }\n        });\n        return datapointMap;\n    }\n\n    /**\n     * \u67e5\u8be2\u4e91\u4e3b\u673a\u76d1\u63a7\u6570\u636e\u53c2\u6570\n     *\n     * @param getMetricsRequest \u5168\u90e8\u53c2\u6570\n     * @return API\u6240\u9700\u57fa\u672c\u53c2\u6570\n     */\n    @NotNull\n    private static ShowMetricDataRequest getShowMetricDataRequest(GetMetricsRequest getMetricsRequest) {\n        ShowMetricDataRequest request = new ShowMetricDataRequest();\n        request.withPeriod(300);\n        getMetricsRequest.setPeriod(request.getPeriod());\n        request.withFrom(Long.valueOf(getMetricsRequest.getStartTime()));\n        request.withTo(Long.valueOf(getMetricsRequest.getEndTime()));\n        return request;\n    }\n\n    /**\n     * \u67e5\u8be2\u6240\u6709\u865a\u62df\u673a\u53c2\u6570\n     *\n     * @param getMetricsRequest\n     * @return\n     */\n    public static ListVirtualMachineRequest getListVmRequest(GetMetricsRequest getMetricsRequest) {\n        ListVirtualMachineRequest listVirtualMachineRequest = new ListVirtualMachineRequest();\n        listVirtualMachineRequest.setCredential(getMetricsRequest.getCredential());\n        listVirtualMachineRequest.setRegionId(getMetricsRequest.getRegionId());\n        return listVirtualMachineRequest;\n    }\n\n    public static List<NovaAvailabilityZoneDTO> getAvailabilityZone(HuaweiVmCreateRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            return new ArrayList<>();\n        }\n        List<NovaAvailabilityZoneDTO> result = new ArrayList<>();\n        try {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            NovaListAvailabilityZonesRequest getAz = new NovaListAvailabilityZonesRequest();\n            NovaListAvailabilityZonesResponse response = client.novaListAvailabilityZones(getAz);\n            for (NovaAvailabilityZone novaAvailabilityZone : response.getAvailabilityZoneInfo()) {\n                NovaAvailabilityZoneDTO dto = new NovaAvailabilityZoneDTO(novaAvailabilityZone);\n                String name = dto.getZoneName();\n                int index = StringUtils.lowerCase(name).charAt(name.length() - 1) - 96;\n                dto.setDisplayName(\"\u53ef\u7528\u533a\" + index);\n                result.add(dto);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    public static F2CVirtualMachine getSimpleServerByCreateRequest(HuaweiVmCreateRequest request) {\n        F2CVirtualMachine virtualMachine = new F2CVirtualMachine();\n\n        int index = request.getIndex();\n        virtualMachine\n                .setId(request.getId())\n                .setName(request.getServerNameInfos().get(index).getName())\n                .setIpArray(new ArrayList<>())\n                .setInstanceType(request.getInstanceType());\n\n        return virtualMachine;\n\n    }\n\n    public static Integer getPeriodNumber(String periodNumber) {\n        if (Integer.valueOf(periodNumber) >= 12) {\n            return Integer.valueOf(periodNumber) / 12;\n        }\n        return Integer.valueOf(periodNumber);\n    }\n\n    public static String getPeriodType(String periodNumber) {\n        return Integer.valueOf(periodNumber) < 12 ? \"month\" : \"year\";\n    }\n\n    public static F2CVirtualMachine createServer(HuaweiVmCreateRequest request) {\n        F2CVirtualMachine f2CVirtualMachine = new F2CVirtualMachine();\n        try {\n            request.setRegion(request.getRegionId());\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            //\u521b\u5efa\u4e91\u4e3b\u673a\u53c2\u6570\n            CreateServersRequest createServersRequest = new CreateServersRequest();\n            //\u53c2\u6570\u5b9e\u4f53\n            CreateServersRequestBody body = new CreateServersRequestBody();\n\n            //\u8ba1\u8d39\u7c7b\u7c7b\u578b\n            PrePaidServerExtendParam extendparamServer = new PrePaidServerExtendParam();\n            extendparamServer.withChargingMode(PrePaidServerExtendParam.ChargingModeEnum.fromValue(request.getBillingMode()))\n                    .withRegionID(request.getRegionId());\n            if (StringUtils.equalsIgnoreCase(request.getBillingMode(), PrePaidServerExtendParam.ChargingModeEnum.PREPAID.getValue())) {\n                extendparamServer.withPeriodType(PrePaidServerExtendParam.PeriodTypeEnum.fromValue(getPeriodType(request.getPeriodNum())));\n                extendparamServer.withPeriodNum(getPeriodNumber(request.getPeriodNum()));\n                extendparamServer.withIsAutoPay(PrePaidServerExtendParam.IsAutoPayEnum.TRUE);\n            }\n            //\u5b89\u5168\u7ec4\n            List<PrePaidServerSecurityGroup> listServerSecurityGroups = new ArrayList<>();\n            request.getSecurityGroups().forEach(v -> listServerSecurityGroups.add(new PrePaidServerSecurityGroup().withId(v)));\n\n            //\u7cfb\u7edf\u76d8\n            DiskConfig systemDisk = request.getDisks().get(0);\n            PrePaidServerRootVolume rootVolumeServer = new PrePaidServerRootVolume();\n            rootVolumeServer.withVolumetype(PrePaidServerRootVolume.VolumetypeEnum.fromValue(systemDisk.getDiskType()))\n                    .withSize(systemDisk.getSize())\n                    .withHwPassthrough(true);\n            //\u6570\u636e\u76d8\n            List<PrePaidServerDataVolume> listServerDataVolumes = new ArrayList<>();\n            for (int i = 0; i < request.getDisks().size(); i++) {\n                if (i == 0) {\n                    continue;\n                }\n                DiskConfig dataDisk = request.getDisks().get(i);\n                listServerDataVolumes.add(\n                        new PrePaidServerDataVolume()\n                                .withVolumetype(PrePaidServerDataVolume.VolumetypeEnum.fromValue(dataDisk.getDiskType()))\n                                .withSize(dataDisk.getSize())\n                                .withShareable(false)\n                                .withMultiattach(false)\n                                .withHwPassthrough(true)\n                                .withDataImageId(\"\")\n                );\n            }\n\n            //\u516c\u7f51IP\n            PrePaidServerPublicip publicipServer = null;\n            if (request.isUsePublicIp()) {\n                PrePaidServerEipExtendParam extendparamEip = new PrePaidServerEipExtendParam();\n                extendparamEip.withChargingMode(PrePaidServerEipExtendParam.ChargingModeEnum.fromValue(Objects.equals(request.getBillingMode(), \"1\") ? \"prePaid\" : \"postPaid\"));\n                PrePaidServerEipBandwidth bandwidthEip = new PrePaidServerEipBandwidth();\n                boolean isTraffic = StringUtils.equalsIgnoreCase(\"traffic\", request.getChargeMode());\n                bandwidthEip.withSize(isTraffic ? request.getTrafficBandwidthSize() : request.getBandwidthSize())\n                        //PER,\u8868\u793a\u72ec\u4eab\u3002WHOLE,\u8868\u793a\u5171\u4eab\n                        .withSharetype(PrePaidServerEipBandwidth.SharetypeEnum.fromValue(\"PER\"))\n                        //traffic\u8868\u793a\u6309\u6d41\u91cf\u8ba1\u8d39\uff0c\u7a7a\u6216\u8005\u4e0d\u4f20\u4e3a\u6309\u5e26\u5bbd\u8ba1\u8d39\n                        .withChargemode(StringUtils.equalsIgnoreCase(request.getChargeMode(), \"traffic\") ? \"traffic\" : \"\");\n\n                PrePaidServerEip eipPublicip = new PrePaidServerEip();\n                //\u56fa\u5b9a\n                eipPublicip.withIptype(\"5_bgp\")\n                        .withBandwidth(bandwidthEip)\n                        .withExtendparam(extendparamEip);\n                publicipServer = new PrePaidServerPublicip();\n                publicipServer.withEip(eipPublicip);\n                //\u9ed8\u8ba4\u968f\u5b9e\u4f8b\u5220\u9664\n                publicipServer.setDeleteOnTermination(true);\n            }\n\n            // TODO \u7f51\u5361 \u76ee\u524d\u4ec5\u652f\u6301\u4e00\u4e2a\u7f51\u5361\uff0c\u5b98\u65b9\u652f\u6301\u6700\u591a\u4e24\u4e2a\n            List<F2CHuaweiSubnet> networks = listSubnet(request);\n            if (CollectionUtils.isEmpty(networks)) {\n                throw new RuntimeException(\"No suitable network found!\");\n            }\n            F2CHuaweiSubnet network = networks.get(0);\n            List<PrePaidServerNic> listServerNics = new ArrayList<>();\n            listServerNics.add(\n                    new PrePaidServerNic()\n                            .withSubnetId(network.getUuid())\n                            .withIpAddress(\"\")\n            );\n            PrePaidServer serverbody = new PrePaidServer();\n            //\u83b7\u53d6\u955c\u50cfID\uff0c\u6839\u636e\u89c4\u683c\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\n            List<F2CImage> images = listCreateImages(request);\n            if (CollectionUtils.isEmpty(images)) {\n                throw new RuntimeException(\"No suitable image found!\");\n            }\n            serverbody.withImageRef(images.get(0).getId())\n                    .withFlavorRef(request.getInstanceType())\n                    .withName(request.getServerNameInfos().get(request.getIndex()).getName())\n                    .withVpcid(network.getVpcId())\n                    .withNics(listServerNics)\n                    .withCount(1)\n                    .withIsAutoRename(false)\n                    .withRootVolume(rootVolumeServer)\n                    .withDataVolumes(listServerDataVolumes)\n                    .withSecurityGroups(listServerSecurityGroups)\n                    .withAvailabilityZone(request.getAvailabilityZone())\n                    .withExtendparam(extendparamServer)\n                    //.withMetadata(listServerMetadata)\n                    .withDescription(\"\");\n            if (publicipServer != null) {\n                serverbody.withPublicip(publicipServer);\n            }\n            if (StringUtils.equalsIgnoreCase(\"pwd\", request.getLoginMethod())) {\n                serverbody.withAdminPass(request.getPwd());\n            } else {\n                serverbody.withKeyName(request.getKeyPari());\n            }\n            body.withServer(serverbody);\n            createServersRequest.withBody(body);\n            CreateServersResponse response = client.createServers(createServersRequest);\n            List<Port> ports = listPorts(request.getCredential(), request.getRegionId());\n            ServerDetail serverDetail = getJobEntities(client, response.getJobId());\n            f2CVirtualMachine = HuaweiMappingUtil.toF2CVirtualMachine(serverDetail, ports);\n            f2CVirtualMachine.setRegion(request.getRegionId());\n            f2CVirtualMachine.setId(request.getId());\n            setServerHostName(client, f2CVirtualMachine, request);\n            // \u83b7\u53d6\u5305\u5e74\u5305\u6708\u673a\u5668\u7684\u5230\u671f\u65f6\u95f4\n            if (F2CChargeType.PRE_PAID.equalsIgnoreCase(f2CVirtualMachine.getInstanceChargeType())) {\n                appendExpiredTime(credential, serverDetail, f2CVirtualMachine);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new Fit2cloudException(5000, \"Huawei create vm fail - \" + e.getMessage());\n        }\n        return f2CVirtualMachine;\n    }\n\n    private static void setServerHostName(EcsClient client, F2CVirtualMachine f2CVirtualMachine, HuaweiVmCreateRequest createRequest) {\n        try {\n            // \u8bbe\u7f6ehostname\n            UpdateServerRequest request = new UpdateServerRequest();\n            request.withServerId(f2CVirtualMachine.getInstanceUUID());\n            UpdateServerRequestBody body = new UpdateServerRequestBody();\n            UpdateServerOption serverbody = new UpdateServerOption();\n            serverbody.withHostname(createRequest.getServerNameInfos().get(createRequest.getIndex()).getHostName());\n            body.withServer(serverbody);\n            request.withBody(body);\n            UpdateServerResponse response = client.updateServer(request);\n            if (response.getHttpStatusCode() == 200) {\n                if (createRequest.getServerNameInfos().get(createRequest.getIndex()).isAuthReboot()) {\n                    // \u91cd\u542f\n                    HuaweiInstanceRequest instanceRequest = new HuaweiInstanceRequest();\n                    instanceRequest.setCredential(createRequest.getCredential());\n                    instanceRequest.setRegionId(createRequest.getRegionId());\n                    instanceRequest.setUuid(f2CVirtualMachine.getInstanceUUID());\n                    rebootInstance(instanceRequest);\n                    f2CVirtualMachine.setHostname(response.getServer().getOsEXTSRVATTRHostname());\n                }\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.error(\"{}-set hostname fail\uff1a{}\", f2CVirtualMachine.getName(), e.getMessage());\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u521b\u5efa\u4e3b\u673a\u955c\u50cf\n     * \u6839\u636e\u89c4\u683c\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\u3001\u72b6\u6001\n     *\n     * @param createRequest \u8bf7\u6c42\u5bf9\u8c61\n     * @return \u54cd\u5e94\u5bf9\u8c61\n     */\n    public static List<F2CImage> listCreateImages(HuaweiVmCreateRequest createRequest) {\n        ListImageRequest request = new ListImageRequest();\n        request.setRegionId(createRequest.getRegionId());\n        request.setCredential(createRequest.getCredential());\n        request.setFlavorId(createRequest.getInstanceType());\n        request.setPlatform(ListImagesRequest.PlatformEnum.valueOf(createRequest.getOs()));\n        request.setStatus(ListImagesRequest.StatusEnum.ACTIVE);\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            ImsClient imsClient = credential.getImsClient(request.getRegionId());\n            request.setImagetype(ListImagesRequest.ImagetypeEnum.GOLD);\n            ListImagesResponse listImagesResponse = imsClient.listImages(request);\n            List<ImageInfo> images = listImagesResponse.getImages();\n            //\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\u8fc7\u6ee4\n            return images.stream().filter(v -> filterImageByOsAndOsVersion(v, createRequest)).map(imageInfo -> HuaweiMappingUtil.toF2CImage(imageInfo, request.getRegionId())).filter(Objects::nonNull).toList();\n        }\n        return new ArrayList<>();\n    }\n\n    private static boolean filterImageByOsAndOsVersion(ImageInfo imageInfo, HuaweiVmCreateRequest createRequest) {\n        return StringUtils.equalsIgnoreCase(imageInfo.getPlatform().getValue(), createRequest.getOs()) && StringUtils.equalsIgnoreCase(imageInfo.getId(), createRequest.getOsVersion());\n    }\n\n\n    private static ServerDetail getJobEntities(EcsClient client, String jobId) {\n        int count = 0;\n        while (true) {\n            try {\n                Thread.sleep(SLEEP_TIME);\n                com.huaweicloud.sdk.ecs.v2.model.ShowJobResponse jobResponse = client.showJob(new com.huaweicloud.sdk.ecs.v2.model.ShowJobRequest().withJobId(jobId));\n                com.huaweicloud.sdk.ecs.v2.model.ShowJobResponse.StatusEnum status = jobResponse.getStatus();\n                if (ShowJobResponse.StatusEnum.SUCCESS.getValue().equals(status.getValue())) {\n                    String id = jobResponse.getEntities().getSubJobs().get(0).getEntities().getServerId();\n                    ShowServerRequest request = new ShowServerRequest();\n                    request.setServerId(id);\n                    ShowServerResponse response = client.showServer(request);\n                    return response.getServer();\n                }\n                if (ShowJobResponse.StatusEnum.FAIL.getValue().equalsIgnoreCase(status.getValue())) {\n                    String errorMsg = jobResponse.getFailReason();\n                    try {\n                        errorMsg = jobResponse.getEntities().getSubJobs().get(0).getEntities().getErrorcodeMessage();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    throw new RuntimeException(errorMsg);\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"check create server status timeout\uff01\");\n                }\n                count++;\n            } catch (Exception e) {\n                throw new RuntimeException(\"getJobEntities fail jobId - \" + jobId + \"-\" + e.getMessage());\n            }\n        }\n    }\n\n\n    public static List<InstanceSpecType> getInstanceSpecTypes(HuaweiVmCreateRequest request) {\n        List<InstanceSpecType> instanceSpecTypes = new ArrayList<>();\n        if (StringUtils.isEmpty(request.getRegionId()) || StringUtils.isEmpty(request.getAvailabilityZone())) {\n            return instanceSpecTypes;\n        }\n        try {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            ListFlavorsResponse response = client.listFlavors(new ListFlavorsRequest()\n                    .withAvailabilityZone(request.getAvailabilityZone()));\n            for (Flavor flavor : response.getFlavors()) {\n                if (flavor.getOsExtraSpecs().getCondOperationAz().contains((request.getAvailabilityZone() + \"(normal)\"))) {\n                    InstanceSpecType instanceSpecType = HuaweiMappingUtil.toInstanceSpecType(flavor);\n                    instanceSpecTypes.add(instanceSpecType);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return instanceSpecTypes;\n    }\n\n    public static List<Map<String, String>> getAllDiskTypes(HuaweiVmCreateRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId()) && StringUtils.isEmpty(request.getAvailabilityZone())) {\n            return new ArrayList<>();\n        }\n        HuaweiGetDiskTypeRequest getDiskTypeRequest = new HuaweiGetDiskTypeRequest();\n        getDiskTypeRequest.setZone(request.getAvailabilityZone());\n        getDiskTypeRequest.setCredential(request.getCredential());\n        getDiskTypeRequest.setRegion(request.getRegionId());\n        getDiskTypeRequest.setLanguage(request.getLanguage());\n        return getDiskTypes(getDiskTypeRequest);\n    }\n\n    public static List<F2CHuaweiSubnet> listSubnet(HuaweiVmCreateRequest request) {\n        List<F2CHuaweiSubnet> result = new ArrayList<>();\n        Map<String, F2CHuaweiVpc> vpcMap = listVpc(request).stream().collect(Collectors.toMap(F2CHuaweiVpc::getUuid, v -> v, (k1, k2) -> k1));\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            VpcClient vpcClient = huaweiVmCredential.getVpcClient(request.getRegionId());\n            ListSubnetsRequest listSubnetsRequest = new ListSubnetsRequest();\n            listSubnetsRequest.setLimit(1000);\n            ListSubnetsResponse response = vpcClient.listSubnets(listSubnetsRequest);\n            if (CollectionUtils.isNotEmpty(response.getSubnets())) {\n                response.getSubnets().stream()\n                        .collect(Collectors.toList())\n                        .forEach(subnet -> {\n                            F2CHuaweiSubnet f2CHuaweiSubnet = HuaweiMappingUtil.toF2CHuaweiSubnet(subnet);\n                            if (vpcMap.containsKey(f2CHuaweiSubnet.getVpcId())) {\n                                f2CHuaweiSubnet.setVpcName(vpcMap.get(f2CHuaweiSubnet.getVpcId()).getName());\n                            }\n                            result.add(f2CHuaweiSubnet);\n                        });\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        if (!StringUtils.equalsIgnoreCase(\"random\", request.getAvailabilityZone())) {\n            return result.stream().filter(v -> StringUtils.equalsIgnoreCase(request.getAvailabilityZone(), v.getAvailabilityZone())).collect(Collectors.toList());\n        }\n        if (StringUtils.isNotEmpty(request.getNetworkId())) {\n            return result.stream().filter(v -> StringUtils.equalsIgnoreCase(v.getUuid(), request.getNetworkId())).toList();\n        }\n        return result;\n    }\n\n    public static List<F2CHuaweiVpc> listVpc(HuaweiVmCreateRequest request) {\n        List<F2CHuaweiVpc> result = new ArrayList<>();\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            VpcClient vpcClient = huaweiVmCredential.getVpcClient(request.getRegionId());\n            ListVpcsRequest listVpcsRequest = new ListVpcsRequest();\n            listVpcsRequest.setLimit(1000);\n            ListVpcsResponse response = vpcClient.listVpcs(listVpcsRequest);\n            if (CollectionUtils.isNotEmpty(response.getVpcs())) {\n                response.getVpcs().forEach(vpc -> {\n                    result.add(HuaweiMappingUtil.toF2CHuaweiVpc(vpc));\n                });\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n\n    public static List<F2CHuaweiSecurityGroups> listSecurityGroups(HuaweiVmCreateRequest request) {\n        List<F2CHuaweiSecurityGroups> result = new ArrayList<>();\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            VpcClient vpcClient = huaweiVmCredential.getVpcClient(request.getRegionId());\n            ListSecurityGroupsRequest listSecurityGroupsRequest = new ListSecurityGroupsRequest();\n            listSecurityGroupsRequest.setLimit(1000);\n            ListSecurityGroupsResponse response = vpcClient.listSecurityGroups(listSecurityGroupsRequest);\n            if (CollectionUtils.isNotEmpty(response.getSecurityGroups())) {\n                response.getSecurityGroups().forEach(securityGroup -> {\n                    result.add(HuaweiMappingUtil.toF2CHuaweiSecurityGroups(securityGroup));\n                });\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    public static List<NovaSimpleKeypair> listKeyPairs(HuaweiVmCreateRequest request) {\n        List<NovaSimpleKeypair> result = new ArrayList<>();\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = huaweiVmCredential.getEcsClient(request.getRegionId());\n            NovaListKeypairsRequest listKeypairsRequest = new NovaListKeypairsRequest();\n            listKeypairsRequest.setLimit(1000);\n            NovaListKeypairsResponse response = client.novaListKeypairs(listKeypairsRequest);\n            if (CollectionUtils.isNotEmpty(response.getKeypairs())) {\n                response.getKeypairs().forEach(keypair -> {\n                    result.add(keypair.getKeypair());\n                });\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    /**\n     * \u8be2\u4ef7\n     *\n     * @param request\n     * @return\n     */\n    public static String calculatedPrice(Boolean trafficPriceOnly, HuaweiVmCreateRequest request) {\n        StringBuilder result = new StringBuilder();\n        try {\n            if (StringUtils.isEmpty(request.getAvailabilityZone())) {\n                return result.toString();\n            }\n            if (request.getCount() == 0) {\n                request.setCount(1);\n            }\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            //\u67e5\u8be2\u9879\u76ee\n            KeystoneListAuthProjectsRequest projectsRequest = new KeystoneListAuthProjectsRequest();\n            IamClient client = credential.getIamClient(request.getRegionId());\n            KeystoneListAuthProjectsResponse projectsResponse = client.keystoneListAuthProjects(projectsRequest);\n            List<AuthProjectResult> projectResults = projectsResponse.getProjects().stream()\n                    .filter(v -> StringUtils.equalsIgnoreCase(v.getName(), request.getRegionId())).collect(Collectors.toList());\n            if (CollectionUtils.isNotEmpty(projectResults)) {\n                String projectId = projectResults.get(0).getId();\n                Double vmAmount = 0D;\n                Double diskAmount = 0D;\n                Double bandwidthAmount = 0D;\n                //\u5f00\u542f\u516c\u7f51IP\n                boolean isUsePublicIp = request.isUsePublicIp();\n                //\u516c\u7f51IP\u8ba1\u8d39\u4ef7\u683c\n                if (isUsePublicIp) {\n                    bandwidthAmount = bandwidthInquiryPriceForHour(request, credential, projectId);\n                }\n                if (trafficPriceOnly) {\n                    result.append(bandwidthAmount).append(\"\u5143/GB\");\n                    return result.toString();\n                }\n                boolean isTraffic = StringUtils.equalsIgnoreCase(\"traffic\", request.getChargeMode());\n                //\u6309\u91cf\u8ba1\u8d39\n                if (StringUtils.equalsIgnoreCase(request.getBillingMode(), \"postPaid\")) {\n                    vmAmount = vmInquiryPriceForHour(request, credential, projectId);\n                    diskAmount = diskInquiryPriceForHour(request, credential, projectId);\n                    BigDecimal amountBig = new BigDecimal(vmAmount + diskAmount + (isTraffic ? 0 : bandwidthAmount));\n                    result.append(amountBig.setScale(4, RoundingMode.HALF_UP));\n                    result.append(\"\u5143/\u5c0f\u65f6\");\n                }\n                //\u5305\u5e74\u5305\u6708\n                if (StringUtils.equalsIgnoreCase(request.getBillingMode(), \"prePaid\")) {\n                    vmAmount = vmInquiryPriceForMonth(request, credential, projectId);\n                    diskAmount = diskInquiryPriceForMonth(request, credential, projectId);\n                    if (isUsePublicIp) {\n                        bandwidthAmount = bandwidthInquiryPriceForMonth(request, credential, projectId);\n                    }\n                    BigDecimal amountBig = new BigDecimal(vmAmount + diskAmount + (isTraffic ? 0 : bandwidthAmount));\n                    result.append(amountBig.setScale(4, RoundingMode.HALF_UP));\n                    result.append(\"\u5143\");\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result.toString();\n    }\n\n\n    /**\n     * \u865a\u62df\u673a\u5305\u5e74\u5305\u6708\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double vmInquiryPriceForMonth(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        ListRateOnPeriodDetailRequest request = new ListRateOnPeriodDetailRequest();\n        RateOnPeriodReq body = new RateOnPeriodReq();\n        List<PeriodProductInfo> listPeriodProductInfo = new ArrayList<>();\n        listPeriodProductInfo.add(new PeriodProductInfo()\n                //\u552f\u4e00\u6807\u8bc6\n                .withId(createRequest.getInstanceType())\n                //\u4e91\u4e3b\u673a\u8be2\u4ef7\u56fa\u5b9a\n                .withCloudServiceType(\"hws.service.type.ec2\")\n                .withResourceType(\"hws.resource.type.vm\")\n                //\u533a\u5206linux\\win\uff0c\u76ee\u524d\u67e5\u8be2\u7ed3\u679c\u4ef7\u683c\u4e00\u81f4\uff0c\u5b98\u7f51\u8fd9\u4e2a\u4ef7\u683c\uff0c\u4e0d\u6839\u636e\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0d\u540c\u800c\u6539\u53d8\u4ef7\u683c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u505a\u533a\u5206\n                .withResourceSpec(createRequest.getInstanceType() + \".linux\")\n                .withRegion(createRequest.getRegionId())\n                //\u5468\u671f\u7c7b\u578b0:\u59292:\u67083:\u5e744:\u5c0f\u65f6\n                .withPeriodType(StringUtils.equalsIgnoreCase(getPeriodType(createRequest.getPeriodNum()), \"month\") ? 2 : 3)\n                //\u5468\u671f\u6570 1\u4e2a\u6708\n                .withPeriodNum(getPeriodNumber(createRequest.getPeriodNum()))\n                //\u6570\u91cf\n                .withSubscriptionNum(createRequest.getCount()));\n        body.withProductInfos(listPeriodProductInfo);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListRateOnPeriodDetailResponse response = credential.getBssClient().listRateOnPeriodDetail(request);\n                return response.getOfficialWebsiteRatingResult().getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n    /**\n     * \u865a\u62df\u673a\u6309\u9700\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double vmInquiryPriceForHour(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        ListOnDemandResourceRatingsRequest request = new ListOnDemandResourceRatingsRequest();\n        RateOnDemandReq body = new RateOnDemandReq();\n        List<DemandProductInfo> listBodyProductInfos = new ArrayList<>();\n        if (Objects.isNull(createRequest.getInstanceType())) {\n            return 0D;\n        }\n        listBodyProductInfos.add(new DemandProductInfo()\n                //\u552f\u4e00\u6807\u8bc6\n                .withId(createRequest.getInstanceType())\n                //\u4e91\u4e3b\u673a\u8be2\u4ef7\u56fa\u5b9a\n                .withCloudServiceType(\"hws.service.type.ec2\")\n                .withResourceType(\"hws.resource.type.vm\")\n                //\u533a\u5206linux\\win\uff0c\u76ee\u524d\u67e5\u8be2\u7ed3\u679c\u4ef7\u683c\u4e00\u81f4\uff0c\u5b98\u7f51\u8fd9\u4e2a\u4ef7\u683c\uff0c\u4e0d\u6839\u636e\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0d\u540c\u800c\u6539\u53d8\u4ef7\u683c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u505a\u533a\u5206\n                .withResourceSpec(createRequest.getInstanceType() + \".linux\")\n                .withRegion(createRequest.getRegionId())\n                //\u4e91\u670d\u52a1\u5668\uff1aDuration\n                //\u4e91\u786c\u76d8\uff1aDuration\n                //\u5f39\u6027IP\uff1aDuration\n                .withUsageFactor(\"Duration\")\n                //\u6309\u5c0f\u65f6\u8be2\u4ef7\uff0c\u4f7f\u7528\u91cf\u503c\u4e3a1\uff0c\u4f7f\u7528\u91cf\u5355\u4f4d\u4e3a\u5c0f\u65f6\u3002\n                .withUsageValue((double) 1)\n                //\u8c03\u5ea6\u5355\u4f4d\u5c0f\u65f6\u4e3a4\n                .withUsageMeasureId(4)\n                .withSubscriptionNum(createRequest.getCount()));\n        body.withProductInfos(listBodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListOnDemandResourceRatingsResponse response = credential.getBssClient().listOnDemandResourceRatings(request);\n                return response.getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n\n    /**\n     * \u78c1\u76d8\u5305\u5e74\u5305\u6708\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double diskInquiryPriceForMonth(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        ListRateOnPeriodDetailRequest request = new ListRateOnPeriodDetailRequest();\n        RateOnPeriodReq body = new RateOnPeriodReq();\n        List<PeriodProductInfo> listbodyProductInfos = new ArrayList<>();\n        for (int i = 0; i < createRequest.getDisks().size(); i++) {\n            DiskConfig diskConfig = createRequest.getDisks().get(i);\n            listbodyProductInfos.add(new PeriodProductInfo()\n                    .withId(String.valueOf(i))\n                    .withCloudServiceType(\"hws.service.type.ebs\")\n                    .withResourceType(\"hws.resource.type.volume\")\n                    .withResourceSpec(diskConfig.getDiskType())\n                    .withRegion(createRequest.getRegionId())\n                    .withResourceSize(diskConfig.getSize())\n                    //\u8d44\u6e90\u5bb9\u91cf\u5ea6\u91cf\u6807\u8bc6\u4e91\u76d8GB17\u300115Mbps\n                    .withSizeMeasureId(17)\n                    //\u5468\u671f\u7c7b\u578b0:\u59292:\u67083:\u5e744:\u5c0f\u65f6\n                    .withPeriodType(StringUtils.equalsIgnoreCase(getPeriodType(createRequest.getPeriodNum()), \"month\") ? 2 : 3)\n                    //\u5468\u671f\u6570 1\u4e2a\u6708\n                    .withPeriodNum(getPeriodNumber(createRequest.getPeriodNum()))\n                    .withSubscriptionNum(1));\n        }\n        body.withProductInfos(listbodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListRateOnPeriodDetailResponse response = credential.getBssClient().listRateOnPeriodDetail(request);\n                return response.getOfficialWebsiteRatingResult().getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n    /**\n     * \u78c1\u76d8\u6309\u9700\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double diskInquiryPriceForHour(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        ListOnDemandResourceRatingsRequest request = new ListOnDemandResourceRatingsRequest();\n        RateOnDemandReq body = new RateOnDemandReq();\n        List<DemandProductInfo> listbodyProductInfos = new ArrayList<>();\n        for (int i = 0; i < createRequest.getDisks().size(); i++) {\n            DiskConfig diskConfig = createRequest.getDisks().get(i);\n            listbodyProductInfos.add(new DemandProductInfo()\n                    .withId(String.valueOf(i))\n                    .withCloudServiceType(\"hws.service.type.ebs\")\n                    .withResourceType(\"hws.resource.type.volume\")\n                    .withResourceSpec(diskConfig.getDiskType())\n                    .withRegion(createRequest.getRegionId())\n                    //\u5927\u5c0f\n                    .withResourceSize(diskConfig.getSize())\n                    //\u8d44\u6e90\u5bb9\u91cf\u5ea6\u91cf\u6807\u8bc6\u4e91\u76d8GB17\u300115Mbps\n                    .withSizeMeasureId(17)\n                    .withUsageFactor(\"Duration\")\n                    //\u6309\u5c0f\u65f6\u8be2\u4ef7\uff0c\u4f7f\u7528\u91cf\u503c\u4e3a1\uff0c\u4f7f\u7528\u91cf\u5355\u4f4d\u4e3a\u5c0f\u65f6\u3002\n                    .withUsageValue((double) 1)\n                    //\u8c03\u5ea6\u5355\u4f4d\u5c0f\u65f6\u4e3a4\n                    .withUsageMeasureId(4)\n                    .withSubscriptionNum(createRequest.getCount()));\n        }\n        body.withProductInfos(listbodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListOnDemandResourceRatingsResponse response = credential.getBssClient().listOnDemandResourceRatings(request);\n                return response.getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n\n    /**\n     * \u516c\u7f51\u5e26\u5bbd\u5305\u5e74\u5305\u6708\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double bandwidthInquiryPriceForMonth(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        boolean isTraffic = StringUtils.equalsIgnoreCase(\"traffic\", createRequest.getChargeMode());\n        //\u6309\u6d41\u91cf\u4e0e\u5468\u671f\u65e0\u5173\n        if (isTraffic) {\n            return bandwidthInquiryPriceForHour(createRequest, credential, projectId);\n        }\n        ListRateOnPeriodDetailRequest request = new ListRateOnPeriodDetailRequest();\n        RateOnPeriodReq body = new RateOnPeriodReq();\n        List<PeriodProductInfo> listbodyProductInfos = new ArrayList<>();\n        listbodyProductInfos.add(\n                new PeriodProductInfo()\n                        .withId(\"1\")\n                        .withCloudServiceType(\"hws.service.type.vpc\")\n                        .withResourceType(\"hws.resource.type.bandwidth\")\n                        .withResourceSpec(\"19_bgp\")\n                        .withRegion(createRequest.getRegionId())\n                        .withResourceSize(isTraffic ? createRequest.getTrafficBandwidthSize() : createRequest.getBandwidthSize())\n                        .withSizeMeasureId(15)\n                        //\u5468\u671f\u7c7b\u578b0:\u59292:\u67083:\u5e744:\u5c0f\u65f6\n                        .withPeriodType(StringUtils.equalsIgnoreCase(getPeriodType(createRequest.getPeriodNum()), \"month\") ? 2 : 3)\n                        //\u5468\u671f\u6570 1\u4e2a\u6708\n                        .withPeriodNum(getPeriodNumber(createRequest.getPeriodNum()))\n                        .withSubscriptionNum(createRequest.getCount())\n        );\n        body.withProductInfos(listbodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListRateOnPeriodDetailResponse response = credential.getBssClient().listRateOnPeriodDetail(request);\n                return response.getOfficialWebsiteRatingResult().getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n    /**\n     * \u5e26\u5bbd\u6309\u9700\u8be2\u4ef7\n     * 12_bgp:\u52a8\u6001BGP\u6309\u6d41\u91cf\u8ba1\u8d39\u5e26\u5bbd\n     * 12_sbgp:\u9759\u6001BGP\u6309\u6d41\u91cf\u8ba1\u8d39\u5e26\u5bbd\n     * 19_bgp:\u52a8\u6001BGP\u6309\u5e26\u5bbd\u8ba1\u8d39\u5e26\u5bbd\n     * 19_sbgp:\u9759\u6001BGP\u6309\u5e26\u5bbd\u8ba1\u8d39\u5e26\u5bbd\n     * 19_share:\u6309\u5e26\u5bbd\u8ba1\u8d39\u5171\u4eab\u5e26\u5bbd\n     * IP:5_bgp:\u52a8\u6001BGP\u516c\u7f51\n     * IP5_sbgp:\u9759\u6001BGP\u516c\u7f51IP\n     */\n    private static Double bandwidthInquiryPriceForHour(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        if (StringUtils.isEmpty(createRequest.getChargeMode())) {\n            return 0D;\n        }\n        boolean isTraffic = StringUtils.equalsIgnoreCase(\"traffic\", createRequest.getChargeMode());\n        ListOnDemandResourceRatingsRequest request = new ListOnDemandResourceRatingsRequest();\n        RateOnDemandReq body = new RateOnDemandReq();\n        List<DemandProductInfo> listbodyProductInfos = new ArrayList<>();\n        DemandProductInfo demandProductInfo = new DemandProductInfo();\n        demandProductInfo.withId(\"1\")\n                .withCloudServiceType(\"hws.service.type.vpc\")\n                .withResourceType(\"hws.resource.type.bandwidth\")\n                .withUsageValue((double) 1)\n                .withSizeMeasureId(15)\n                .withSubscriptionNum(createRequest.getCount())\n                .withRegion(createRequest.getRegionId())\n                .withResourceSize(isTraffic ? createRequest.getTrafficBandwidthSize() : createRequest.getBandwidthSize());\n        // \u6309\u6d41\u91cf\n        if (isTraffic) {\n            demandProductInfo.withUsageFactor(\"upflow\").withResourceSpec(\"12_bgp\").withUsageMeasureId(10);\n        } else {\n            // \u6309\u5e26\u5bbd\n            demandProductInfo.withUsageFactor(\"Duration\").withResourceSpec(\"19_bgp\").withUsageMeasureId(4);\n        }\n        listbodyProductInfos.add(demandProductInfo);\n        body.withProductInfos(listbodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListOnDemandResourceRatingsResponse response = credential.getBssClient().listOnDemandResourceRatings(request);\n                return response.getAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n    /**\n     * \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\n     *\n     * @param createRequest\n     * @return\n     */\n    public static List<OsConfig> listOsVersion(HuaweiVmCreateRequest createRequest) {\n        List<OsConfig> result = new ArrayList<>();\n        if (StringUtils.isEmpty(createRequest.getOs())\n                || (Objects.isNull(createRequest.getInstanceType()))) {\n            return result;\n        }\n        try {\n            ListImageRequest request = new ListImageRequest();\n            request.setRegionId(createRequest.getRegionId());\n            request.setCredential(createRequest.getCredential());\n            request.setFlavorId(createRequest.getInstanceType());\n            request.setPlatform(ListImagesRequest.PlatformEnum.valueOf(createRequest.getOs()));\n            request.setStatus(ListImagesRequest.StatusEnum.ACTIVE);\n            List<ImageInfo> osImages = new ArrayList<>();\n            if (StringUtils.isNotEmpty(request.getCredential())) {\n                HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n                ImsClient imsClient = credential.getImsClient(request.getRegionId());\n                request.setImagetype(ListImagesRequest.ImagetypeEnum.GOLD);\n                ListImagesResponse listImagesResponse = imsClient.listImages(request);\n                List<ImageInfo> imagesAll = listImagesResponse.getImages();\n                osImages = imagesAll.stream().filter(v -> StringUtils.equalsIgnoreCase(v.getPlatform().getValue(), createRequest.getOs())).collect(Collectors.toList());\n            }\n            osImages.forEach(v -> {\n                OsConfig osConfig = new OsConfig();\n                osConfig.setOs(v.getPlatform().getValue());\n                osConfig.setOsVersion(v.getOsVersion());\n                osConfig.setImageName(v.getName());\n                osConfig.setImageId(v.getId());\n                osConfig.setImageDiskMinSize(Long.valueOf(String.valueOf(v.getMinDisk())));\n                result.add(osConfig);\n            });\n            return result.stream().sorted(Comparator.comparing(OsConfig::getOsVersion)).collect(Collectors.toList());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    public static List<Map<String, String>> listOs(String request) {\n        List<Map<String, String>> result = new ArrayList<>(14);\n        List<String> osList = Arrays.asList(\"Windows\", \"RedHat\", \"CentOS\", \"SUSE\", \"Debian\", \"OpenSUSE\", \"Oracle Linux\", \"Fedora\", \"Ubuntu\", \"EulerOS\", \"CoreOS\", \"ESXi\", \"Other\", \"openEuler\");\n        osList.stream().sorted().forEach(v -> {\n            Map<String, String> m = new HashMap<>();\n            m.put(\"id\", v);\n            m.put(\"name\", v);\n            result.add(m);\n        });\n        return result;\n    }\n\n    /**\n     * \u4e91\u4e3b\u673a\u914d\u7f6e\u53d8\u66f4\n     *\n     * @param request\n     * @return\n     */\n    public static F2CVirtualMachine changeVmConfig(HuaweiUpdateConfigRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n\n        String instanceId = request.getInstanceUuid();\n        String instanceType = request.getNewInstanceType();\n        ServerDetail server = getInstanceById(instanceId, ecsClient);\n        Optional.ofNullable(server).orElseThrow(() -> new RuntimeException(\"Can not find the server!\"));\n\n        ResizeServerRequest resizeServerRequest = new ResizeServerRequest();\n        resizeServerRequest.withServerId(instanceId);\n        ResizeServerRequestBody body = new ResizeServerRequestBody();\n\n        ResizeServerExtendParam extendParamResize = new ResizeServerExtendParam();\n        extendParamResize.withIsAutoPay(\"true\");\n        ResizePrePaidServerOption resizeBody = new ResizePrePaidServerOption();\n        resizeBody.withFlavorRef(instanceType)\n                .withMode(\"withStopServer\")\n                .withExtendparam(extendParamResize);\n\n        body.withResize(resizeBody);\n        resizeServerRequest.withBody(body);\n\n        ResizeServerResponse resizeResponse = ecsClient.resizeServer(resizeServerRequest);\n        if (null == resizeResponse || StringUtils.isEmpty(resizeResponse.getJobId())) {\n            throw new RuntimeException(\"Failed to change instance config.\");\n        }\n        try {\n            checkEcsJobStatus(ecsClient, resizeResponse.getJobId());\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to check ecs job status.\" + e.getMessage(), e);\n        }\n\n        return HuaweiMappingUtil.toF2CVirtualMachine(getInstanceById(instanceId, ecsClient));\n    }\n\n    public static List<InstanceSpecType> getInstanceTypesForConfigUpdate(HuaweiUpdateConfigRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n\n        ListResizeFlavorsRequest listResizeFlavorsRequest = new ListResizeFlavorsRequest()\n                .withInstanceUuid(request.getInstanceUuid())\n                .withSourceFlavorId(request.getCurrentInstanceType());\n\n        ListResizeFlavorsResponse response = ecsClient.listResizeFlavors(listResizeFlavorsRequest);\n        List<InstanceSpecType> result = response.getFlavors().stream()\n                .filter(listResizeFlavorsResult -> !listResizeFlavorsResult.getName().equalsIgnoreCase(request.getCurrentInstanceType()))\n                .map(flavor -> {\n                    InstanceSpecType instanceSpecType = new InstanceSpecType();\n                    instanceSpecType.setSpecName(flavor.getName());\n                    instanceSpecType.setInstanceSpec(HuaweiMappingUtil.transInstanceSpecTypeDescription(flavor));\n                    instanceSpecType.setInstanceTypeDesc(instanceSpecType.getSpecName() + \"\uff08\" + instanceSpecType.getInstanceSpec() + \"\uff09\");\n                    return instanceSpecType;\n                }).collect(Collectors.toList());\n        return result;\n    }\n\n    /**\n     * \u4e91\u4e3b\u673a\u914d\u7f6e\u53d8\u66f4\u8be2\u4ef7\n     *\n     * @param request\n     * @return\n     */\n    public static String calculateConfigUpdatePrice(HuaweiUpdateConfigRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n\n        ServerDetail server = getInstanceById(request.getInstanceUuid(), ecsClient);\n        Optional.ofNullable(server).orElseThrow(() -> new RuntimeException(\"Can not find the server!\"));\n\n        String instanceChargeType;\n        if (StringUtils.equalsIgnoreCase(server.getMetadata().get(\"charging_mode\"), \"2\")) {\n            instanceChargeType = F2CChargeType.SPOT_PAID;\n        } else {\n            instanceChargeType = StringUtils.equalsIgnoreCase(server.getMetadata().get(\"charging_mode\"), \"0\") ? F2CChargeType.POST_PAID : F2CChargeType.PRE_PAID;\n        }\n\n        HuaweiVmCreateRequest createRequest = new HuaweiVmCreateRequest();\n        BeanUtils.copyProperties(request, createRequest);\n        createRequest.setInstanceType(request.getNewInstanceType());\n        createRequest.setCount(1);\n        String projectId = server.getTenantId();\n\n        Double price;\n        if (F2CChargeType.PRE_PAID.equalsIgnoreCase(instanceChargeType)) {\n            BssClient bssClient = huaweiVmCredential.getBssClient();\n            ShowCustomerOrderDetailsResponse response = getOrderDetailsById(server.getMetadata().get(\"metering.order_id\"), bssClient);\n            response.getOrderLineItems().stream().forEach((item) -> {\n                if (\"hws.service.type.ec2\".equalsIgnoreCase(item.getServiceTypeCode())) {\n                    if (item.getPeriodType() == 2) {\n                        createRequest.setPeriodNum(String.valueOf(item.getPeriodNum() == null ? 1 : item.getPeriodNum()));\n                    } else {\n                        createRequest.setPeriodNum(String.valueOf(item.getPeriodNum() * 12));\n                    }\n                }\n            });\n            price = vmInquiryPriceForMonth(createRequest, huaweiVmCredential, projectId);\n        } else {\n            price = vmInquiryPriceForHour(createRequest, huaweiVmCredential, projectId);\n        }\n        return String.format(\"%.2f\", price) + PriceUnit.YUAN;\n    }\n\n    /**\n     * \u6839\u636e\u5b9e\u4f8b ID \u83b7\u53d6\u5b9e\u4f8b\n     *\n     * @param instanceId\n     * @param ecsClient\n     * @return\n     */\n    private static ServerDetail getInstanceById(String instanceId, EcsClient ecsClient) {\n        ShowServerResponse showServerResponse = ecsClient.showServer(new ShowServerRequest().withServerId(instanceId));\n        ServerDetail server = showServerResponse.getServer();\n        return server;\n    }\n\n    /**\n     * \u67e5\u8be2\u8ba2\u5355\u8be6\u60c5\n     *\n     * @param orderId\n     * @param bssClient\n     * @return\n     */\n    private static ShowCustomerOrderDetailsResponse getOrderDetailsById(String orderId, BssClient bssClient) {\n        ShowCustomerOrderDetailsRequest request = new ShowCustomerOrderDetailsRequest();\n        request.setOrderId(orderId);\n        bssClient.showCustomerOrderDetails(request);\n        return bssClient.showCustomerOrderDetails(request);\n    }\n\n    /**\n     * \u83b7\u53d6\u4e91\u4e3b\u673a\u5173\u8054\u7684\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static List<F2CDisk> getVmF2CDisks(BaseDiskRequest request) {\n        HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EcsClient ecsClient = credential.getEcsClient(request.getRegionId());\n        EvsClient evsClient = credential.getEvsClient(request.getRegionId());\n        try {\n            ListServerBlockDevicesResponse listServerBlockDevicesResponse = ecsClient.listServerBlockDevices(new ListServerBlockDevicesRequest().withServerId(request.getInstanceUuid()));\n            List<ServerBlockDevice> volumeAttachments = listServerBlockDevicesResponse.getVolumeAttachments();\n            return volumeAttachments.stream().map(attachment -> {\n                ShowVolumeResponse showVolumeResponse = evsClient.showVolume(new ShowVolumeRequest().withVolumeId(attachment.getVolumeId()));\n                VolumeDetail volume = showVolumeResponse.getVolume();\n                F2CDisk f2CDisk = HuaweiMappingUtil.toF2CDisk(volume);\n                return f2CDisk;\n            }).collect(Collectors.toList());\n        } catch (Exception e) {\n            throw new RuntimeException(\"GetVmF2CDisks Error!\" + e.getMessage(), e);\n        }\n    }\n}\n"], "fixing_code": ["package com.fit2cloud.provider.impl.huawei.api;\n\nimport com.aliyun.tea.TeaException;\nimport com.fit2cloud.common.exception.Fit2cloudException;\nimport com.fit2cloud.common.log.utils.LogUtil;\nimport com.fit2cloud.common.provider.entity.F2CEntityType;\nimport com.fit2cloud.common.provider.entity.F2CPerfMetricMonitorData;\nimport com.fit2cloud.common.provider.exception.ReTryException;\nimport com.fit2cloud.common.provider.exception.SkipPageException;\nimport com.fit2cloud.common.provider.util.CommonUtil;\nimport com.fit2cloud.common.provider.util.PageUtil;\nimport com.fit2cloud.common.utils.DateUtil;\nimport com.fit2cloud.common.utils.JsonUtil;\nimport com.fit2cloud.constants.ErrorCodeConstants;\nimport com.fit2cloud.provider.constants.*;\nimport com.fit2cloud.provider.entity.F2CDisk;\nimport com.fit2cloud.provider.entity.F2CImage;\nimport com.fit2cloud.provider.entity.F2CVirtualMachine;\nimport com.fit2cloud.provider.entity.request.BaseDiskRequest;\nimport com.fit2cloud.provider.entity.request.GetMetricsRequest;\nimport com.fit2cloud.provider.impl.huawei.constants.HuaweiDiskType;\nimport com.fit2cloud.provider.impl.huawei.constants.HuaweiPerfMetricConstants;\nimport com.fit2cloud.provider.impl.huawei.entity.*;\nimport com.fit2cloud.provider.impl.huawei.entity.credential.HuaweiVmCredential;\nimport com.fit2cloud.provider.impl.huawei.entity.request.*;\nimport com.fit2cloud.provider.impl.huawei.util.HuaweiMappingUtil;\nimport com.google.gson.Gson;\nimport com.huaweicloud.sdk.bss.v2.BssClient;\nimport com.huaweicloud.sdk.bss.v2.model.*;\nimport com.huaweicloud.sdk.ces.v1.CesClient;\nimport com.huaweicloud.sdk.ces.v1.model.*;\nimport com.huaweicloud.sdk.ecs.v2.EcsClient;\nimport com.huaweicloud.sdk.ecs.v2.model.*;\nimport com.huaweicloud.sdk.evs.v2.EvsClient;\nimport com.huaweicloud.sdk.evs.v2.model.ShowJobRequest;\nimport com.huaweicloud.sdk.evs.v2.model.ShowJobResponse;\nimport com.huaweicloud.sdk.evs.v2.model.*;\nimport com.huaweicloud.sdk.iam.v3.IamClient;\nimport com.huaweicloud.sdk.iam.v3.model.AuthProjectResult;\nimport com.huaweicloud.sdk.iam.v3.model.KeystoneListAuthProjectsRequest;\nimport com.huaweicloud.sdk.iam.v3.model.KeystoneListAuthProjectsResponse;\nimport com.huaweicloud.sdk.ims.v2.ImsClient;\nimport com.huaweicloud.sdk.ims.v2.model.ImageInfo;\nimport com.huaweicloud.sdk.ims.v2.model.ListImagesRequest;\nimport com.huaweicloud.sdk.ims.v2.model.ListImagesResponse;\nimport com.huaweicloud.sdk.vpc.v2.VpcClient;\nimport com.huaweicloud.sdk.vpc.v2.model.*;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.BeanUtils;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n\n/**\n * @Author:\u5f20\u5c11\u864e\n * @Date: 2022/9/22  2:44 PM\n * @Version 1.0\n * @\u6ce8\u91ca:\n */\npublic class HuaweiSyncCloudApi {\n    private static final Logger logger = LoggerFactory.getLogger(HuaweiSyncCloudApi.class);\n    private static final int WAIT_COUNT = 50;\n    private static final int SLEEP_TIME = 10000;\n\n    /**\n     * \u83b7\u53d6\u534e\u4e3a\u4e91\u4e91\u4e3b\u673a\u6570\u636e\n     *\n     * @param listVirtualMachineRequest \u83b7\u53d6\u534e\u4e3a\u4e91\u4e91\u4e3b\u673a\u8bf7\u6c42\u5bf9\u8c61\n     * @return \u4e91\u4e3b\u673a\u5bf9\u8c61\n     */\n    public static List<F2CVirtualMachine> listVirtualMachine(ListVirtualMachineRequest listVirtualMachineRequest) {\n        if (StringUtils.isEmpty(listVirtualMachineRequest.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(listVirtualMachineRequest.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(listVirtualMachineRequest.getCredential(), HuaweiVmCredential.class);\n            listVirtualMachineRequest.setLimit(PageUtil.DefaultPageSize);\n            listVirtualMachineRequest.setOffset(PageUtil.DefaultCurrentPage);\n            EcsClient ecsClient = credential.getEcsClient(listVirtualMachineRequest.getRegionId());\n            // \u5206\u9875\u67e5\u8be2\u4e91\u4e3b\u673a\u5217\u8868\n            List<ServerDetail> instances = PageUtil.page(listVirtualMachineRequest, req -> listServersDetails(ecsClient, req),\n                    ListServersDetailsResponse::getServers,\n                    (req, res) -> req.getLimit() <= res.getServers().size(),\n                    req -> req.setOffset(req.getOffset() + 1));\n            if (CollectionUtils.isNotEmpty(instances)) {\n                List<Port> ports = listPorts(listVirtualMachineRequest.getCredential(), listVirtualMachineRequest.getRegionId());\n                return instances.stream().map(server -> {\n                            F2CVirtualMachine virtualMachine = HuaweiMappingUtil.toF2CVirtualMachine(server, ports);\n                            // \u83b7\u53d6\u5305\u5e74\u5305\u6708\u673a\u5668\u7684\u5230\u671f\u65f6\u95f4\n                            if (F2CChargeType.PRE_PAID.equalsIgnoreCase(virtualMachine.getInstanceChargeType())) {\n                                appendExpiredTime(credential, server, virtualMachine);\n                            }\n                            return virtualMachine;\n                        }).map(virtualMachine -> {\n                            virtualMachine.setRegion(listVirtualMachineRequest.getRegionId());\n                            return virtualMachine;\n                        }).map(virtualMachine -> appendDisk(listVirtualMachineRequest.getCredential(), listVirtualMachineRequest.getRegionId(), virtualMachine))\n                        .toList();\n            }\n        }\n        return new ArrayList<>();\n    }\n\n\n    /**\n     * \u83b7\u53d6\u78c1\u76d8\n     *\n     * @param request \u8bf7\u6c42\u78c1\u76d8\u53c2\u6570\n     * @return \u54cd\u5e94\u5bf9\u8c61\n     */\n    public static List<F2CDisk> listDisk(ListDisksRequest request) {\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = credential.getEvsClient(request.getRegionId());\n            try {\n                ListVolumesResponse listVolumesResponse = evsClient.listVolumes(request);\n                List<VolumeDetail> volumes = listVolumesResponse.getVolumes();\n                return volumes.stream().map(HuaweiMappingUtil::toF2CDisk).toList();\n            } catch (Exception e) {\n                ReTryException.throwHuaweiReTry(e);\n                SkipPageException.throwHuaweiSkip(e);\n                throw new Fit2cloudException(10000, \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\" + e.getMessage());\n            }\n        }\n        return new ArrayList<>();\n    }\n\n    /**\n     * \u540c\u6b65\u955c\u50cf\n     *\n     * @param request \u8bf7\u6c42\u5bf9\u8c61\n     * @return \u54cd\u5e94\u5bf9\u8c61\n     */\n    public static List<F2CImage> lisImages(ListImageRequest request) {\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            ImsClient imsClient = credential.getImsClient(request.getRegionId());\n            try {\n                // \u53ea\u67e5\u8be2\u516c\u5171\u955c\u50cfgold\n                request.setImagetype(ListImagesRequest.ImagetypeEnum.GOLD);\n                ListImagesResponse listImagesResponse = imsClient.listImages(request);\n                List<ImageInfo> images = listImagesResponse.getImages();\n                return images.stream().map(imageInfo -> HuaweiMappingUtil.toF2CImage(imageInfo, request.getRegionId())).filter(Objects::nonNull).toList();\n            } catch (Exception e) {\n                ReTryException.throwHuaweiReTry(e);\n                SkipPageException.throwHuaweiSkip(e);\n                throw new Fit2cloudException(10000, \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\" + e.getMessage());\n            }\n        }\n        return new ArrayList<>();\n    }\n\n    /**\n     * \u7ed9\u4e91\u4e3b\u673a\u6dfb\u52a0\u78c1\u76d8\u6570\u636e\n     *\n     * @param credential     \u8ba4\u8bc1\u4fe1\u606f\n     * @param regionId       \u533a\u57df\u4fe1\u606f\n     * @param virtualMachine \u4e91\u4e3b\u673a\u5bf9\u8c61\n     * @return \u4e91\u4e3b\u673a\u5bf9\u8c61\n     */\n    private static F2CVirtualMachine appendDisk(String credential, String regionId, F2CVirtualMachine virtualMachine) {\n        ListDisksRequest listDisksRequest = new ListDisksRequest();\n        listDisksRequest.setCredential(credential);\n        listDisksRequest.setRegionId(regionId);\n        List<F2CDisk> disks = listDisk(listDisksRequest);\n        long sum = disks.stream().mapToLong(F2CDisk::getSize).sum();\n        virtualMachine.setDisk((int) sum);\n        return virtualMachine;\n    }\n\n    /**\n     * \u7ed9\u4e91\u4e3b\u673a\u589e\u52a0\u5230\u671f\u65f6\u95f4\n     *\n     * @param credential\n     * @param serverDetail\n     * @param virtualMachine\n     */\n    private static void appendExpiredTime(HuaweiVmCredential credential, ServerDetail serverDetail, F2CVirtualMachine virtualMachine) {\n        String orderId = serverDetail.getMetadata().get(\"metering.order_id\");\n        String productId = serverDetail.getMetadata().get(\"metering.product_id\");\n        ShowCustomerOrderDetailsResponse response = getOrderDetailsById(orderId, credential.getBssClient());\n        if (CollectionUtils.isNotEmpty(response.getOrderLineItems())) {\n            String expireTime = response.getOrderLineItems().stream().filter(orderLineItemEntityV2 ->\n                    orderLineItemEntityV2.getProductId().equalsIgnoreCase(productId)\n            ).collect(Collectors.toList()).get(0).getExpireTime();\n            virtualMachine.setExpiredTime(new Date(CommonUtil.getUTCTime(expireTime, \"yyyy-MM-dd'T'HH:mm:ss'Z'\")).getTime());\n        }\n    }\n\n    /**\n     * \u83b7\u53d6port\u5217\u8868\n     *\n     * @param credential \u8ba4\u8bc1\u4fe1\u606f\n     * @param regionId   \u533a\u57dfid\n     * @return port\u5bf9\u8c61\n     */\n    private static List<Port> listPorts(String credential, String regionId) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(credential, HuaweiVmCredential.class);\n            VpcClient vpcClient = huaweiVmCredential.getVpcClient(regionId);\n            ListPortsRequest listPortsRequest = new ListPortsRequest();\n            ListPortsResponse listPortsResponse = vpcClient.listPorts(listPortsRequest);\n            return listPortsResponse.getPorts();\n        } catch (Exception e) {\n            return new ArrayList<>();\n        }\n    }\n\n    /**\n     * @param ecsClient ecs\u5ba2\u6237\u7aef\n     * @param req       \u8bf7\u6c42\u5bf9\u8c61\n     * @return ListServersDetailsResponse\n     */\n    private static ListServersDetailsResponse listServersDetails(EcsClient ecsClient, ListServersDetailsRequest req) {\n        try {\n            return ecsClient.listServersDetails(req);\n        } catch (Exception e) {\n            ReTryException.throwHuaweiReTry(e);\n            SkipPageException.throwHuaweiSkip(e);\n            throw new Fit2cloudException(10000, \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\" + e.getMessage());\n        }\n    }\n\n    public static boolean powerOff(HuaweiInstanceRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n\n            try {\n                ServerDetail serverDetail = getInstanceById(request.getUuid(), client);\n                if (F2CInstanceStatus.Stopped.name().equalsIgnoreCase(HuaweiMappingUtil.toF2CInstanceStatus(serverDetail.getStatus()))) {\n                    return true;\n                }\n                BatchStopServersResponse batchStopServersResponse = client.batchStopServers(new BatchStopServersRequest()\n                        .withBody(new BatchStopServersRequestBody()\n                                .withOsStop(\n                                        new BatchStopServersOption()\n                                                .withServers(Arrays.asList(new ServerId().withId(request.getUuid())))\n                                                .withType(request.getForce() ? BatchStopServersOption.TypeEnum.HARD : BatchStopServersOption.TypeEnum.SOFT))));\n\n                checkEcsJobStatus(client, batchStopServersResponse.getJobId());\n                return true;\n            } catch (TeaException teaException) {\n                throw new Fit2cloudException(ErrorCodeConstants.VM_POWER_OFF_FAIL.getCode(), teaException.getMessage());\n            } catch (Exception e) {\n                TeaException error = new TeaException(e.getMessage(), e);\n                throw new Fit2cloudException(ErrorCodeConstants.VM_POWER_OFF_FAIL.getCode(), error.getMessage());\n            }\n        }\n        return false;\n    }\n\n    public static boolean powerOn(HuaweiInstanceRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            try {\n                ServerDetail serverDetail = getInstanceById(request.getUuid(), client);\n                if (F2CInstanceStatus.Running.name().equalsIgnoreCase(HuaweiMappingUtil.toF2CInstanceStatus(serverDetail.getStatus()))) {\n                    return true;\n                }\n                BatchStartServersResponse batchStartServersResponse = client.batchStartServers(new BatchStartServersRequest()\n                        .withBody(new BatchStartServersRequestBody()\n                                .withOsStart(\n                                        new BatchStartServersOption()\n                                                .withServers(Arrays.asList(new ServerId().withId(request.getUuid()))))));\n                checkEcsJobStatus(client, batchStartServersResponse.getJobId());\n                return true;\n            } catch (TeaException teaError) {\n                throw new Fit2cloudException(ErrorCodeConstants.VM_POWER_ON_FAIL.getCode(), teaError.getMessage());\n            } catch (Exception e) {\n                TeaException error = new TeaException(e.getMessage(), e);\n                throw new Fit2cloudException(ErrorCodeConstants.VM_POWER_ON_FAIL.getCode(), error.getMessage());\n            }\n        }\n        return false;\n    }\n\n    public static boolean rebootInstance(HuaweiInstanceRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            try {\n                BatchRebootServersResponse batchRebootServersResponse = client.batchRebootServers(new BatchRebootServersRequest()\n                        .withBody(new BatchRebootServersRequestBody()\n                                .withReboot(\n                                        new BatchRebootSeversOption()\n                                                .withServers(Arrays.asList(new ServerId().withId(request.getUuid())))\n                                                .withType(request.getForce() ? BatchRebootSeversOption.TypeEnum.HARD : BatchRebootSeversOption.TypeEnum.SOFT))));\n                checkEcsJobStatus(client, batchRebootServersResponse.getJobId());\n                return true;\n            } catch (TeaException teaException) {\n                throw new Fit2cloudException(ErrorCodeConstants.VM_REBOOT_FAIL.getCode(), teaException.getMessage());\n            } catch (Exception e) {\n                TeaException error = new TeaException(e.getMessage(), e);\n                throw new Fit2cloudException(ErrorCodeConstants.VM_REBOOT_FAIL.getCode(), error.getMessage());\n            }\n        }\n        return false;\n    }\n\n    public static boolean deleteInstance(HuaweiInstanceRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            try {\n                ShowServerResponse showServerResponse = client.showServer(new ShowServerRequest().withServerId(request.getUuid()));\n                ServerDetail instance = showServerResponse.getServer();\n                // \u5982\u679c\u662f\u5305\u5e74\u5305\u6708 \u8c03\u7528\u9000\u8ba2\u65b9\u6cd5 \u5426\u5219\u76f4\u63a5\u5220\u9664\n                Map<String, String> metadata = instance.getMetadata();\n                if (ObjectUtils.isNotEmpty(metadata) && metadata.containsKey(\"charging_mode\") && StringUtils.equals(metadata.get(\"charging_mode\"), \"1\")) {\n                    BssClient bssClient = credential.getBssClient();\n                    CancelResourcesSubscriptionRequest cancelRequest = new CancelResourcesSubscriptionRequest();\n                    UnsubscribeResourcesReq body = new UnsubscribeResourcesReq();\n                    body.setResourceIds(new ArrayList<String>() {{\n                        add(request.getUuid());\n                    }});\n                    body.setUnsubscribeType(1);\n                    cancelRequest.setBody(body);\n                    CancelResourcesSubscriptionResponse cancelResponse = bssClient.cancelResourcesSubscription(cancelRequest);\n                    return cancelResponse.getHttpStatusCode() == 200;\n                } else {\n                    DeleteServersResponse batchStartServersResponse = client.deleteServers(new DeleteServersRequest()\n                            .withBody(new DeleteServersRequestBody()\n                                    .withServers(Arrays.asList(new ServerId().withId(request.getUuid())))));\n                    checkEcsJobStatus(client, batchStartServersResponse.getJobId());\n                    return true;\n                }\n            } catch (TeaException teaException) {\n                throw new Fit2cloudException(ErrorCodeConstants.VM_DELETE_FAIL.getCode(), teaException.getMessage());\n            } catch (Exception e) {\n                TeaException error = new TeaException(e.getMessage(), e);\n                throw new Fit2cloudException(ErrorCodeConstants.VM_DELETE_FAIL.getCode(), error.getMessage());\n            }\n        }\n        return false;\n    }\n\n    private static void checkEcsJobStatus(EcsClient client, String jobId) {\n        int count = 0;\n        while (true) {\n            try {\n                Thread.sleep(SLEEP_TIME);\n                com.huaweicloud.sdk.ecs.v2.model.ShowJobResponse jobResponse = client.showJob(new com.huaweicloud.sdk.ecs.v2.model.ShowJobRequest().withJobId(jobId));\n                com.huaweicloud.sdk.ecs.v2.model.ShowJobResponse.StatusEnum status = jobResponse.getStatus();\n                if (ShowJobResponse.StatusEnum.SUCCESS.getValue().equals(status.getValue())) {\n                    break;\n                }\n                if (ShowJobResponse.StatusEnum.FAIL.getValue().equals(status.getValue())) {\n                    throw new RuntimeException(jobResponse.getFailReason());\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"Check cloud server status timeout\uff01\");\n                }\n                count++;\n            } catch (Exception e) {\n                throw new RuntimeException(\"Check cloud server status error: \" + e.getMessage());\n            }\n        }\n    }\n\n    /**\n     * \u6839\u636e\u53ef\u7528\u533a\u8fc7\u6ee4\u78c1\u76d8\u79cd\u7c7b\n     *\n     * @param request\n     * @return\n     */\n    public static List<Map<String, String>> getDiskTypes(HuaweiGetDiskTypeRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n\n        CinderListVolumeTypesRequest cinderListVolumeTypesRequest = new CinderListVolumeTypesRequest();\n        try {\n            CinderListVolumeTypesResponse response = evsClient.cinderListVolumeTypes(cinderListVolumeTypesRequest);\n            List<Map<String, String>> mapList = new ArrayList<>();\n            response.getVolumeTypes().forEach(volumeType -> {\n                if (StringUtils.isNoneEmpty(request.getZone())\n                        //\u8fd9\u4e2a\u540d\u79f0\u7684\u78c1\u76d8\u7c7b\u578b\u6709\u95ee\u9898\uff0c\u4e91\u4e0a\u663e\u793a\u6ca1\u6709\uff0c\u4f46\u662f\u63a5\u53e3\u4f1a\u8fd4\u56de\u6765\uff0c\u5728\u8fd9\u91cc\u7279\u6b8a\u5904\u7406\u53bb\u6389\n                        && !StringUtils.equalsIgnoreCase(\"uh-l1\", volumeType.getName())\n                        && StringUtils.isNoneEmpty(volumeType.getExtraSpecs().getReSKEYAvailabilityZones())\n                        && volumeType.getExtraSpecs().getReSKEYAvailabilityZones().contains(request.getZone())\n                        && (StringUtils.isEmpty(volumeType.getExtraSpecs().getOsVendorExtendedSoldOutAvailabilityZones())\n                        || !volumeType.getExtraSpecs().getOsVendorExtendedSoldOutAvailabilityZones().contains(request.getZone())) && !volumeType.getName().startsWith(\"DESS_\")) {\n                    Map<String, String> vol = new HashMap<>();\n                    vol.put(\"id\", volumeType.getName());\n                    vol.put(\"name\", HuaweiDiskType.getName(volumeType.getName()));\n                    mapList.add(vol);\n                }\n            });\n            return mapList;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return new ArrayList<>();\n    }\n\n    /**\n     * \u521b\u5efa\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static List<F2CDisk> createDisks(HuaweiCreateDisksRequest request) {\n        List<F2CDisk> f2CDisks = new ArrayList<>();\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n        try {\n            for (F2CDisk disk : request.getDisks()) {\n                CreateVolumeResponse response = evsClient.createVolume(request.toCreateVolumeRequest(disk));\n                ShowJobResponse showJobResponse = getJob(response.getJobId(), evsClient);\n                String status = request.getInstanceUuid() == null ? F2CDiskStatus.AVAILABLE : \"in-use\";\n                F2CDisk createdDisk = HuaweiMappingUtil.toF2CDisk(checkVolumeStatus(showJobResponse.getEntities().getVolumeId(), evsClient, status));\n                createdDisk.setDeleteWithInstance(disk.getDeleteWithInstance());\n                f2CDisks.add(createdDisk);\n            }\n            return f2CDisks;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u521b\u5efa\u78c1\u76d8\n     */\n    public static F2CDisk createDisk(HuaweiCreateDiskRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n        try {\n            CreateVolumeResponse response = evsClient.createVolume(request.toCreateVolumeRequest());\n            String volumeId;\n            // \u534e\u4e3a\u4e91\u7684 in-use \u662f\u4e2d\u5212\u7ebf\ud83d\ude2d\n            String status = request.getInstanceUuid() == null ? F2CDiskStatus.AVAILABLE : \"in-use\";\n            if (StringUtils.isNotEmpty(response.getOrderId())) {\n                volumeId = checkOrderResourceId(response.getOrderId(), huaweiVmCredential.getBssClient());\n            } else {\n                ShowJobResponse showJobResponse = getJob(response.getJobId(), evsClient);\n                volumeId = showJobResponse.getEntities().getVolumeId();\n            }\n            F2CDisk createdDisk = HuaweiMappingUtil.toF2CDisk(checkVolumeStatus(volumeId, evsClient, status));\n\n            // \u5355\u72ec\u8c03\u7528\u63a5\u53e3\u8bbe\u7f6e\u78c1\u76d8\u662f\u5426\u968f\u5b9e\u4f8b\u5220\u9664\u5c5e\u6027\uff0c\u4e0d\u629b\u51fa\u5f02\u5e38\n            if (DeleteWithInstance.YES.name().equalsIgnoreCase(request.getDeleteWithInstance())) {\n                try {\n                    EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n                    updateServerBlockDevice(ecsClient, request.getInstanceUuid(), createdDisk.getDiskId(), request.getDeleteWithInstance());\n                    createdDisk.setDeleteWithInstance(DeleteWithInstance.YES.name());\n                } catch (Exception e) {\n                    createdDisk.setDeleteWithInstance(DeleteWithInstance.NO.name());\n                    LogUtil.error(\"Failed to modify disk.\" + e.getMessage(), e);\n                }\n            }\n\n            return createdDisk;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    public static String checkOrderResourceId(String orderId, BssClient bssClient) {\n        ListPayPerUseCustomerResourcesRequest resourceRequest = new ListPayPerUseCustomerResourcesRequest();\n        QueryResourcesReq body = new QueryResourcesReq();\n        body.setOrderId(orderId);\n        resourceRequest.withBody(body);\n        String resourceId = null;\n        try {\n            int count = 0;\n            boolean b = true;\n            while (b) {\n                Thread.sleep(5000);\n                count++;\n                ListPayPerUseCustomerResourcesResponse resourcesResponse = bssClient.listPayPerUseCustomerResources(resourceRequest);\n                List<OrderInstanceV2> disksInfo = resourcesResponse.getData();\n                if (CollectionUtils.isNotEmpty(disksInfo)) {\n                    b = false;\n                    resourceId = disksInfo.get(0).getResourceId();\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"Check order resource info timeout\uff01\");\n                }\n            }\n            return resourceId;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u6269\u5bb9\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static boolean enlargeDisk(HuaweiResizeDiskRequest request) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n\n            String diskId = request.getDiskId();\n            ShowVolumeRequest showVolumeRequest = new ShowVolumeRequest();\n            showVolumeRequest.setVolumeId(diskId);\n            VolumeDetail volume = evsClient.showVolume(showVolumeRequest).getVolume();\n            if (volume == null) {\n                throw new RuntimeException(\"Can not find disk: \" + request.getDiskId());\n            }\n            String status = volume.getStatus();\n            evsClient.resizeVolume(request.toResizeVolumeRequest());\n            if (\"in-use\".equalsIgnoreCase(status) || status.equalsIgnoreCase(F2CDiskStatus.AVAILABLE)) {\n                checkVolumeStatus(diskId, evsClient, status);\n            }\n            return true;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u6302\u8f7d\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static F2CDisk attachDisk(HuaweiAttachDiskRequest request) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n            EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n            ecsClient.attachServerVolume(request.toAttachServerVolumeRequest());\n            F2CDisk f2CDisk = HuaweiMappingUtil.toF2CDisk(checkVolumeStatus(request.getDiskId(), evsClient, \"in-use\"));\n\n            // \u5355\u72ec\u8c03\u7528\u63a5\u53e3\u8bbe\u7f6e\u78c1\u76d8\u662f\u5426\u968f\u5b9e\u4f8b\u5220\u9664\u5c5e\u6027\uff0c\u4e0d\u629b\u51fa\u5f02\u5e38\n            if (DeleteWithInstance.YES.name().equalsIgnoreCase(request.getDeleteWithInstance())) {\n                try {\n                    updateServerBlockDevice(ecsClient, request.getInstanceUuid(), request.getDiskId(), request.getDeleteWithInstance());\n                    f2CDisk.setDeleteWithInstance(DeleteWithInstance.YES.name());\n                } catch (Exception e) {\n                    f2CDisk.setDeleteWithInstance(DeleteWithInstance.NO.name());\n                    LogUtil.error(\"Failed to modify disk.\" + e.getMessage(), e);\n                }\n            }\n\n            return f2CDisk;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u4fee\u6539\u4e91\u670d\u52a1\u5668\u6302\u8f7d\u7684\u5355\u4e2a\u78c1\u76d8\u4fe1\u606f\uff08\u662f\u5426\u968f\u5b9e\u4f8b\u5220\u9664\u5c5e\u6027\uff09\n     *\n     * @param client\n     * @return\n     */\n    public static void updateServerBlockDevice(EcsClient client, String instanceId, String diskId, String deleteWithInstance) {\n        if (StringUtils.isNotEmpty(instanceId)) {\n            UpdateServerBlockDeviceRequest blockDeviceRequest =\n                    new UpdateServerBlockDeviceRequest()\n                            .withServerId(instanceId)\n                            .withVolumeId(diskId)\n                            .withBody(new UpdateServerBlockDeviceReq()\n                                    .withBlockDevice(new UpdateServerBlockDeviceOption()\n                                            .withDeleteOnTermination(DeleteWithInstance.YES.name().equals(deleteWithInstance))));\n            client.updateServerBlockDevice(blockDeviceRequest);\n        }\n    }\n\n    /**\n     * \u5378\u8f7d\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static boolean detachDisk(HuaweiDetachDiskRequest request) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n            EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n\n            // \u5224\u65ad\u78c1\u76d8\u662f\u5426\u662f\u7cfb\u7edf\u76d8\n            ShowVolumeRequest showVolumeRequest = new ShowVolumeRequest();\n            showVolumeRequest.setVolumeId(request.getDiskId());\n            VolumeDetail volume = evsClient.showVolume(showVolumeRequest).getVolume();\n            Optional.ofNullable(volume).orElseThrow(() -> new RuntimeException(\"Can not find the disk!\"));\n\n            if (Boolean.valueOf(volume.getBootable())) {\n                // \u5224\u65ad\u5b9e\u4f8b\u662f\u5426\u662f\u5173\u673a\u72b6\u6001\n                ShowServerResponse showServerResponse = ecsClient.showServer(new ShowServerRequest().withServerId(request.getInstanceUuid()));\n                ServerDetail server = showServerResponse.getServer();\n                Optional.ofNullable(server).orElseThrow(() -> new RuntimeException(\"Can not find the server!\"));\n\n                String serverStatus = server.getStatus();\n                if (!\"stopped\".equalsIgnoreCase(serverStatus)) {\n                    // \u7cfb\u7edf\u76d8\u9700\u8981\u5b9e\u4f8b\u5173\u673a\u65b9\u53ef\u5378\u8f7d\n                    throw new RuntimeException(\"Server status must be stopped!\");\n                }\n            }\n\n            ecsClient.detachServerVolume(request.toDetachServerVolumeRequest());\n            checkVolumeStatus(request.getDiskId(), evsClient, F2CDiskStatus.AVAILABLE);\n            return true;\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to detach data disk!\" + e.getMessage(), e);\n        }\n    }\n\n    /**\n     * \u5220\u9664\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static boolean deleteDisk(HuaweiDeleteDiskRequest request) {\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EvsClient evsClient = huaweiVmCredential.getEvsClient(request.getRegionId());\n            evsClient.deleteVolume(request.toDeleteVolumeRequest());\n            return true;\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    private static VolumeDetail checkVolumeStatus(String volumeId, EvsClient evsClient, String status) throws Exception {\n        try {\n            int count = 0;\n            VolumeDetail volume = null;\n            boolean b = true;\n            while (b) {\n                Thread.sleep(5000);\n                count++;\n                ShowVolumeRequest showVolumeRequest = new ShowVolumeRequest();\n                showVolumeRequest.setVolumeId(volumeId);\n                volume = evsClient.showVolume(showVolumeRequest).getVolume();\n\n                if (volume != null && status.equalsIgnoreCase(volume.getStatus())) {\n                    b = false;\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"Check cloud disk status timeout\uff01\");\n                }\n            }\n            return volume;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    private static ShowJobResponse getJob(String jobId, EvsClient evsClient) {\n        com.huaweicloud.sdk.evs.v2.model.ShowJobRequest showJobRequest = new ShowJobRequest();\n        showJobRequest.setJobId(jobId);\n        try {\n            int count = 0;\n            while (true) {\n                Thread.sleep(2000);\n                count++;\n                ShowJobResponse showJobResponse = evsClient.showJob(showJobRequest);\n                if (\"FAIL\".equalsIgnoreCase(showJobResponse.getStatus().getValue())) {\n                    throw new RuntimeException(new Gson().toJson(showJobResponse));\n                }\n                if (\"SUCCESS\".equalsIgnoreCase(showJobResponse.getStatus().getValue())) {\n                    return showJobResponse;\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"Check job status timeout\uff01\");\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    public static List<F2CPerfMetricMonitorData> getF2CPerfMetricList(GetMetricsRequest getMetricsRequest) {\n        existRegion(getMetricsRequest);\n        List<F2CPerfMetricMonitorData> result = new ArrayList<>();\n        //\u8bbe\u7f6e\u65f6\u95f4\uff0c\u6839\u636esyncTimeStampStr,\u9ed8\u8ba4\u4e00\u4e2a\u5c0f\u65f6\n        Long startTime = DateUtil.beforeOneHourToTimestamp(Long.valueOf(getMetricsRequest.getSyncTimeStampStr()));\n        //\u591a\u83b7\u53d6\u8fc7\u53bb30\u5206\u949f\u7684\u6570\u636e\uff0c\u9632\u6b62\u540c\u6b65\u7ebf\u7a0b\u65f6\u95f4\u4e0d\u56fa\u5b9a\uff0c\u5bfc\u81f4\u6570\u636e\u4e0d\u5168\u7684\u95ee\u9898\n        getMetricsRequest.setStartTime(String.valueOf(startTime - 1800000L));\n        getMetricsRequest.setEndTime(getMetricsRequest.getSyncTimeStampStr());\n        try {\n            getMetricsRequest.setRegionId(getMetricsRequest.getRegionId());\n            getMetricsRequest.setPeriod(300);\n            result.addAll(getVmPerfMetric(getMetricsRequest));\n        } catch (Exception e) {\n            throw new SkipPageException(100021, \"\u83b7\u53d6\u76d1\u63a7\u6570\u636e\u5931\u8d25-\" + getMetricsRequest.getRegionId() + \"-\" + e.getMessage());\n        }\n        return result;\n    }\n\n    private static void existRegion(GetMetricsRequest getMetricsRequest) {\n        if (StringUtils.isEmpty(getMetricsRequest.getRegionId())) {\n            throw new Fit2cloudException(10002, \"\u533a\u57df\u4e3a\u5fc5\u586b\u53c2\u6570\");\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u865a\u62df\u673a\u76d1\u63a7\u6307\u6807\u6570\u636e\n     * \u9664\u4e86CPU,\u5185\u5b58\uff0c\u78c1\u76d8\u4e0e\u7f51\u7edc\u90fd\u662f\u57fa\u7840\u6307\u6807\u7684\u6570\u636e\uff0c\u56e0\u4e3aAPI\u65e0\u6cd5\u83b7\u53d6\n     *\n     * @param getMetricsRequest \u76d1\u63a7\u67e5\u8be2\u53c2\u6570\n     * @return \u76d1\u63a7\u6570\u636e\n     */\n    private static List<F2CPerfMetricMonitorData> getVmPerfMetric(GetMetricsRequest getMetricsRequest) {\n        HuaweiVmCredential credential = JsonUtil.parseObject(getMetricsRequest.getCredential(), HuaweiVmCredential.class);\n        List<F2CPerfMetricMonitorData> result = new ArrayList<>();\n        List<F2CVirtualMachine> vms = listVirtualMachine(getListVmRequest(getMetricsRequest));\n        if (vms.size() == 0) {\n            return result;\n        }\n        CesClient cesClient = credential.getCesClient(getMetricsRequest.getRegionId());\n        // \u5faa\u73af\u4e91\u4e3b\u673a\n        vms.forEach(vm -> {\n            try {\n                // \u5b58\u50a8\u63a5\u53e3\u8fd4\u56de\u7684\u6570\u636e\n                Map<String, List<BatchMetricData>> apiResult = new HashMap<>(3);\n                // \u6570\u636e\u805a\u5408\u67e5\u8be2\u63a5\u53e3\n                List.of(\"average\", \"max\", \"min\").forEach(filter -> {\n                    try {\n                        BatchListMetricDataRequest request = batchListMetricRequest(getMetricsRequest, vm.getInstanceUUID(), filter);\n                        BatchListMetricDataResponse response = cesClient.batchListMetricData(request);\n                        apiResult.put(filter, response.getMetrics());\n                    } catch (Exception e) {\n                        LogUtil.error(\"\u534e\u4e3a\u4e91\u67e5\u8be2\u4e91\u4e3b\u673a \" + vm.getName() + \"\u805a\u5408\u503c-\" + filter + \"- \u76d1\u63a7\u6570\u636e\u5931\u8d25:\" + e.getMessage());\n                    }\n                });\n                // \u5904\u7406\u7ed3\u679c\uff0c\u6620\u5c04\u6570\u636e\u5230\u5e73\u53f0\u9700\u8981\u67e5\u8be2\u7684\u6307\u6807\n                Arrays.stream(HuaweiPerfMetricConstants.CloudServerPerfMetricEnum.values()).sorted().toList().forEach(perfMetric -> {\n                    // \u5b58\u50a8\u65f6\u95f4\u8282\u70b9\u6570\u636e\uff0c5\u5206\u949f\u95f4\u9694\uff0c1\u4e2a\u534a\u5c0f\u65f6\uff0c\u6700\u591a18\u6761\u6570\u636e\n                    Map<Long, DatapointForBatchMetric> datapointMap = new HashMap<>(18);\n                    // \u5904\u7406\u7ed3\u679c\u6570\u636e\n                    apiResult.keySet().forEach(key -> {\n                        // \u8fc7\u6ee4\u76d1\u63a7\u6570\u636e\n                        List<DatapointForBatchMetric> datapointList = new ArrayList<>();\n                        datapointList = getDatapointForBaseOrAgent(apiResult.get(key), perfMetric);\n                        datapointList.forEach(v -> {\n                            if (!datapointMap.containsKey(v.getTimestamp())) {\n                                datapointMap.put(v.getTimestamp(), v);\n                            }\n                            if (StringUtils.equalsIgnoreCase(key, \"average\")) {\n                                datapointMap.get(v.getTimestamp()).setAverage(v.getAverage());\n                            }\n                            if (StringUtils.equalsIgnoreCase(key, \"max\")) {\n                                datapointMap.get(v.getTimestamp()).setMax(v.getMax());\n                            }\n                            if (StringUtils.equalsIgnoreCase(key, \"min\")) {\n                                datapointMap.get(v.getTimestamp()).setMin(v.getMin());\n                            }\n                        });\n                    });\n                    datapointMap.forEach((k, v) -> {\n                        F2CPerfMetricMonitorData f2CEntityPerfMetric = HuaweiMappingUtil.toF2CPerfMetricMonitorData(v);\n                        f2CEntityPerfMetric.setEntityType(F2CEntityType.VIRTUAL_MACHINE.name());\n                        f2CEntityPerfMetric.setMetricName(perfMetric.name());\n                        f2CEntityPerfMetric.setPeriod(getMetricsRequest.getPeriod());\n                        f2CEntityPerfMetric.setInstanceId(vm.getInstanceUUID());\n                        f2CEntityPerfMetric.setUnit(perfMetric.getUnit());\n                        result.add(f2CEntityPerfMetric);\n                    });\n                });\n            } catch (Exception e) {\n                LogUtil.error(\"\u540c\u6b65 \u534e\u4e3a \u4e91\u4e3b\u673a \" + vm.getName() + \" \u76d1\u63a7\u5931\u8d25:\" + e.getMessage());\n            }\n        });\n        return result;\n    }\n\n    /**\n     * \u8fc7\u6ee4\u76d1\u63a7\u6570\u636e\n     *\n     * @param response   \u7ed3\u679c\n     * @param perfMetric \u6307\u6807\n     * @return \u76d1\u63a7\u6570\u636e\n     */\n    private static List<DatapointForBatchMetric> getDatapointForBaseOrAgent(List<BatchMetricData> response, HuaweiPerfMetricConstants.CloudServerPerfMetricEnum perfMetric) {\n        List<DatapointForBatchMetric> agentData = getDatapointForBaseOrAgent(response, perfMetric, true);\n        return CollectionUtils.isNotEmpty(agentData) ? agentData : getDatapointForBaseOrAgent(response, perfMetric, false);\n    }\n\n    /**\n     * \u83b7\u53d6 \u57fa\u7840\u76d1\u63a7\u6570\u636e\u6d3b\u7740agent\u7684\u76d1\u63a7\u6570\u636edatapoint\n     *\n     * @param response   \u6570\u636e\u7ed3\u679c\n     * @param perfMetric \u6307\u6807\n     * @param agent      \u662f\u5426\u662fagent\n     * @return \u6570\u636e\n     */\n    private static List<DatapointForBatchMetric> getDatapointForBaseOrAgent(List<BatchMetricData> response, HuaweiPerfMetricConstants.CloudServerPerfMetricEnum perfMetric, boolean agent) {\n        List<BatchMetricData> agentMetricData = response.stream()\n                .filter(v -> StringUtils.equalsIgnoreCase(agent ? \"AGT.ECS\" : \"SYS.ECS\", v.getNamespace()))\n                .filter(v -> StringUtils.equalsIgnoreCase(agent ? perfMetric.getAgentMetricName() : perfMetric.getBaseMetricName(), v.getMetricName()))\n                .filter(v -> v.getDatapoints().size() > 0).toList();\n        return CollectionUtils.isNotEmpty(agentMetricData) ? agentMetricData.get(0).getDatapoints() : new ArrayList<>();\n    }\n\n\n    /**\n     * \u6279\u91cf\u6307\u6807\u83b7\u53d6\u76d1\u63a7\u6570\u636e\n     *\n     * @param getMetricsRequest \u53c2\u6570\u6765\u6e90\n     * @param instanceId        \u4e91\u4e3b\u673aID\n     * @param filter            \u6570\u636e\u805a\u5408\u65b9\u5f0f,max\u4e3a\u6700\u5927\u503c,min\u4e3a\u6700\u5c0f\u503c,average\u4e3a\u5e73\u5747\u503c\n     * @return \u6279\u91cf\u67e5\u8be2\u53c2\u6570\n     */\n    private static BatchListMetricDataRequest batchListMetricRequest(GetMetricsRequest getMetricsRequest, String instanceId, String filter) {\n        BatchListMetricDataRequest request = new BatchListMetricDataRequest();\n        BatchListMetricDataRequestBody body = new BatchListMetricDataRequestBody();\n        List<MetricsDimension> listMetricsDimensions = new ArrayList<>();\n        listMetricsDimensions.add(\n                new MetricsDimension()\n                        .withName(\"instance_id\")\n                        .withValue(instanceId)\n        );\n        List<MetricInfo> listBodyMetrics = listMetricInfo(listMetricsDimensions);\n        body.withTo(Long.valueOf(getMetricsRequest.getEndTime()));\n        body.withFrom(Long.valueOf(getMetricsRequest.getStartTime()));\n        body.withFilter(filter);\n        body.withPeriod(\"300\");\n        body.withMetrics(listBodyMetrics);\n        request.withBody(body);\n        return request;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u6307\u6807\u4e24\u4e2anamespace\u7684\u6570\u636e\uff08\u57fa\u7840\u3001agent\uff09\n     * listBodyMetrics\u6700\u5927\u652f\u6301500\u4e2a\n     * \u76ee\u524d10*2\n     *\n     * @param listMetricsDimensions \u5bf9\u8c61\u53c2\u6570\n     * @return \u6240\u6709\u6307\u6807\u53c2\u6570\n     */\n    private static List<MetricInfo> listMetricInfo(List<MetricsDimension> listMetricsDimensions) {\n        List<MetricInfo> listBodyMetrics = new ArrayList<>();\n        Arrays.stream(HuaweiPerfMetricConstants.CloudServerPerfMetricEnum.values()).sorted().toList().forEach(perfMetric -> {\n            listBodyMetrics.add(\n                    new MetricInfo()\n                            .withNamespace(\"AGT.ECS\")\n                            .withMetricName(perfMetric.getAgentMetricName())\n                            .withDimensions(listMetricsDimensions)\n            );\n            listBodyMetrics.add(\n                    new MetricInfo()\n                            .withNamespace(\"SYS.ECS\")\n                            .withMetricName(perfMetric.getBaseMetricName())\n                            .withDimensions(listMetricsDimensions)\n            );\n        });\n        return listBodyMetrics;\n    }\n\n    /**\n     * \u6839\u636e\u6307\u6807\u67e5\u8be2\u6307\u5b9a\u503c\u7684\u76d1\u63a7\u6570\u636e\n     *\n     * @param cesClient  \u67e5\u8be2\u5ba2\u6237\u7aef\n     * @param vm         \u8981\u67e5\u8be2\u76d1\u63a7\u6570\u636e\u7684\u4e91\u4e3b\u673a\n     * @param perfMetric \u76d1\u63a7\u6307\u6807\n     * @param request    API\u53c2\u6570\n     * @return \u76d1\u63a7\u6570\u636e\u65f6\u95f4\u6233\n     */\n    private static Map<Long, Datapoint> getVmMonitoringData(CesClient cesClient, F2CVirtualMachine vm, HuaweiPerfMetricConstants.CloudServerPerfMetricEnum perfMetric, ShowMetricDataRequest request) {\n        Map<Long, Datapoint> datapointMap = new HashMap<>();\n        List.of(\"average\", \"max\", \"min\").forEach(filter -> {\n            try {\n                request.withFilter(ShowMetricDataRequest.FilterEnum.fromValue(filter));\n                //\u67e5\u8be2\u76d1\u63a7\u6307\u6807\u6570\u636e\n                ShowMetricDataResponse response = cesClient.showMetricData(request);\n                if (response.getHttpStatusCode() == 200 && CollectionUtils.isNotEmpty(response.getDatapoints())) {\n                    List<Datapoint> list = response.getDatapoints();\n                    list.forEach(v -> {\n                        if (!datapointMap.containsKey(v.getTimestamp())) {\n                            datapointMap.put(v.getTimestamp(), v);\n                        }\n                        if (StringUtils.equalsIgnoreCase(filter, \"average\")) {\n                            datapointMap.get(v.getTimestamp()).setAverage(v.getAverage());\n                        }\n                        if (StringUtils.equalsIgnoreCase(filter, \"max\")) {\n                            datapointMap.get(v.getTimestamp()).setMax(v.getMax());\n                        }\n                        if (StringUtils.equalsIgnoreCase(filter, \"min\")) {\n                            datapointMap.get(v.getTimestamp()).setMin(v.getMin());\n                        }\n                    });\n                }\n            } catch (Exception e) {\n                LogUtil.error(\"\u67e5\u8be2 \u534e\u4e3a \u4e91\u4e3b\u673a \" + vm.getName() + \" \u76d1\u63a7\u6307\u6807 \" + perfMetric.getDescription() + \" \" + filter + \"\u503c\u5931\u8d25:\" + e.getMessage());\n            }\n        });\n        return datapointMap;\n    }\n\n    /**\n     * \u67e5\u8be2\u4e91\u4e3b\u673a\u76d1\u63a7\u6570\u636e\u53c2\u6570\n     *\n     * @param getMetricsRequest \u5168\u90e8\u53c2\u6570\n     * @return API\u6240\u9700\u57fa\u672c\u53c2\u6570\n     */\n    @NotNull\n    private static ShowMetricDataRequest getShowMetricDataRequest(GetMetricsRequest getMetricsRequest) {\n        ShowMetricDataRequest request = new ShowMetricDataRequest();\n        request.withPeriod(300);\n        getMetricsRequest.setPeriod(request.getPeriod());\n        request.withFrom(Long.valueOf(getMetricsRequest.getStartTime()));\n        request.withTo(Long.valueOf(getMetricsRequest.getEndTime()));\n        return request;\n    }\n\n    /**\n     * \u67e5\u8be2\u6240\u6709\u865a\u62df\u673a\u53c2\u6570\n     *\n     * @param getMetricsRequest\n     * @return\n     */\n    public static ListVirtualMachineRequest getListVmRequest(GetMetricsRequest getMetricsRequest) {\n        ListVirtualMachineRequest listVirtualMachineRequest = new ListVirtualMachineRequest();\n        listVirtualMachineRequest.setCredential(getMetricsRequest.getCredential());\n        listVirtualMachineRequest.setRegionId(getMetricsRequest.getRegionId());\n        return listVirtualMachineRequest;\n    }\n\n    public static List<NovaAvailabilityZoneDTO> getAvailabilityZone(HuaweiVmCreateRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId())) {\n            return new ArrayList<>();\n        }\n        List<NovaAvailabilityZoneDTO> result = new ArrayList<>();\n        try {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            NovaListAvailabilityZonesRequest getAz = new NovaListAvailabilityZonesRequest();\n            NovaListAvailabilityZonesResponse response = client.novaListAvailabilityZones(getAz);\n            for (NovaAvailabilityZone novaAvailabilityZone : response.getAvailabilityZoneInfo()) {\n                NovaAvailabilityZoneDTO dto = new NovaAvailabilityZoneDTO(novaAvailabilityZone);\n                String name = dto.getZoneName();\n                int index = StringUtils.lowerCase(name).charAt(name.length() - 1) - 96;\n                dto.setDisplayName(\"\u53ef\u7528\u533a\" + index);\n                result.add(dto);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    public static F2CVirtualMachine getSimpleServerByCreateRequest(HuaweiVmCreateRequest request) {\n        F2CVirtualMachine virtualMachine = new F2CVirtualMachine();\n\n        int index = request.getIndex();\n        virtualMachine\n                .setId(request.getId())\n                .setName(request.getServerNameInfos().get(index).getName())\n                .setIpArray(new ArrayList<>())\n                .setInstanceType(request.getInstanceType());\n\n        return virtualMachine;\n\n    }\n\n    public static Integer getPeriodNumber(String periodNumber) {\n        if (Integer.valueOf(periodNumber) >= 12) {\n            return Integer.valueOf(periodNumber) / 12;\n        }\n        return Integer.valueOf(periodNumber);\n    }\n\n    public static String getPeriodType(String periodNumber) {\n        return Integer.valueOf(periodNumber) < 12 ? \"month\" : \"year\";\n    }\n\n    public static F2CVirtualMachine createServer(HuaweiVmCreateRequest request) {\n        F2CVirtualMachine f2CVirtualMachine = new F2CVirtualMachine();\n        try {\n            request.setRegion(request.getRegionId());\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            //\u521b\u5efa\u4e91\u4e3b\u673a\u53c2\u6570\n            CreateServersRequest createServersRequest = new CreateServersRequest();\n            //\u53c2\u6570\u5b9e\u4f53\n            CreateServersRequestBody body = new CreateServersRequestBody();\n\n            //\u8ba1\u8d39\u7c7b\u7c7b\u578b\n            PrePaidServerExtendParam extendparamServer = new PrePaidServerExtendParam();\n            extendparamServer.withChargingMode(PrePaidServerExtendParam.ChargingModeEnum.fromValue(request.getBillingMode()))\n                    .withRegionID(request.getRegionId());\n            if (StringUtils.equalsIgnoreCase(request.getBillingMode(), PrePaidServerExtendParam.ChargingModeEnum.PREPAID.getValue())) {\n                extendparamServer.withPeriodType(PrePaidServerExtendParam.PeriodTypeEnum.fromValue(getPeriodType(request.getPeriodNum())));\n                extendparamServer.withPeriodNum(getPeriodNumber(request.getPeriodNum()));\n                extendparamServer.withIsAutoPay(PrePaidServerExtendParam.IsAutoPayEnum.TRUE);\n            }\n            //\u5b89\u5168\u7ec4\n            List<PrePaidServerSecurityGroup> listServerSecurityGroups = new ArrayList<>();\n            request.getSecurityGroups().forEach(v -> listServerSecurityGroups.add(new PrePaidServerSecurityGroup().withId(v)));\n\n            //\u7cfb\u7edf\u76d8\n            DiskConfig systemDisk = request.getDisks().get(0);\n            PrePaidServerRootVolume rootVolumeServer = new PrePaidServerRootVolume();\n            rootVolumeServer.withVolumetype(PrePaidServerRootVolume.VolumetypeEnum.fromValue(systemDisk.getDiskType()))\n                    .withSize(systemDisk.getSize())\n                    .withHwPassthrough(true);\n            //\u6570\u636e\u76d8\n            List<PrePaidServerDataVolume> listServerDataVolumes = new ArrayList<>();\n            for (int i = 0; i < request.getDisks().size(); i++) {\n                if (i == 0) {\n                    continue;\n                }\n                DiskConfig dataDisk = request.getDisks().get(i);\n                listServerDataVolumes.add(\n                        new PrePaidServerDataVolume()\n                                .withVolumetype(PrePaidServerDataVolume.VolumetypeEnum.fromValue(dataDisk.getDiskType()))\n                                .withSize(dataDisk.getSize())\n                                .withShareable(false)\n                                .withMultiattach(false)\n                                .withHwPassthrough(true)\n                                .withDataImageId(\"\")\n                );\n            }\n\n            //\u516c\u7f51IP\n            PrePaidServerPublicip publicipServer = null;\n            if (request.isUsePublicIp()) {\n                PrePaidServerEipExtendParam extendparamEip = new PrePaidServerEipExtendParam();\n                extendparamEip.withChargingMode(PrePaidServerEipExtendParam.ChargingModeEnum.fromValue(Objects.equals(request.getBillingMode(), \"1\") ? \"prePaid\" : \"postPaid\"));\n                PrePaidServerEipBandwidth bandwidthEip = new PrePaidServerEipBandwidth();\n                boolean isTraffic = StringUtils.equalsIgnoreCase(\"traffic\", request.getChargeMode());\n                bandwidthEip.withSize(isTraffic ? request.getTrafficBandwidthSize() : request.getBandwidthSize())\n                        //PER,\u8868\u793a\u72ec\u4eab\u3002WHOLE,\u8868\u793a\u5171\u4eab\n                        .withSharetype(PrePaidServerEipBandwidth.SharetypeEnum.fromValue(\"PER\"))\n                        //traffic\u8868\u793a\u6309\u6d41\u91cf\u8ba1\u8d39\uff0c\u7a7a\u6216\u8005\u4e0d\u4f20\u4e3a\u6309\u5e26\u5bbd\u8ba1\u8d39\n                        .withChargemode(StringUtils.equalsIgnoreCase(request.getChargeMode(), \"traffic\") ? \"traffic\" : \"\");\n\n                PrePaidServerEip eipPublicip = new PrePaidServerEip();\n                //\u56fa\u5b9a\n                eipPublicip.withIptype(\"5_bgp\")\n                        .withBandwidth(bandwidthEip)\n                        .withExtendparam(extendparamEip);\n                publicipServer = new PrePaidServerPublicip();\n                publicipServer.withEip(eipPublicip);\n                //\u9ed8\u8ba4\u968f\u5b9e\u4f8b\u5220\u9664\n                publicipServer.setDeleteOnTermination(true);\n            }\n\n            // TODO \u7f51\u5361 \u76ee\u524d\u4ec5\u652f\u6301\u4e00\u4e2a\u7f51\u5361\uff0c\u5b98\u65b9\u652f\u6301\u6700\u591a\u4e24\u4e2a\n            List<F2CHuaweiSubnet> networks = listSubnet(request);\n            if (CollectionUtils.isEmpty(networks)) {\n                throw new RuntimeException(\"No suitable network found!\");\n            }\n            F2CHuaweiSubnet network = networks.get(0);\n            List<PrePaidServerNic> listServerNics = new ArrayList<>();\n            listServerNics.add(\n                    new PrePaidServerNic()\n                            .withSubnetId(network.getUuid())\n                            .withIpAddress(\"\")\n            );\n            PrePaidServer serverbody = new PrePaidServer();\n            //\u83b7\u53d6\u955c\u50cfID\uff0c\u6839\u636e\u89c4\u683c\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\n            List<F2CImage> images = listCreateImages(request);\n            if (CollectionUtils.isEmpty(images)) {\n                throw new RuntimeException(\"No suitable image found!\");\n            }\n            serverbody.withImageRef(images.get(0).getId())\n                    .withFlavorRef(request.getInstanceType())\n                    .withName(request.getServerNameInfos().get(request.getIndex()).getName())\n                    .withVpcid(network.getVpcId())\n                    .withNics(listServerNics)\n                    .withCount(1)\n                    .withIsAutoRename(false)\n                    .withRootVolume(rootVolumeServer)\n                    .withDataVolumes(listServerDataVolumes)\n                    .withSecurityGroups(listServerSecurityGroups)\n                    .withAvailabilityZone(request.getAvailabilityZone())\n                    .withExtendparam(extendparamServer)\n                    //.withMetadata(listServerMetadata)\n                    .withDescription(\"\");\n            if (publicipServer != null) {\n                serverbody.withPublicip(publicipServer);\n            }\n            if (StringUtils.equalsIgnoreCase(\"pwd\", request.getLoginMethod())) {\n                serverbody.withAdminPass(request.getPwd());\n            } else {\n                serverbody.withKeyName(request.getKeyPari());\n            }\n            body.withServer(serverbody);\n            createServersRequest.withBody(body);\n            CreateServersResponse response = client.createServers(createServersRequest);\n            List<Port> ports = listPorts(request.getCredential(), request.getRegionId());\n            ServerDetail serverDetail = getJobEntities(client, response.getJobId());\n            f2CVirtualMachine = HuaweiMappingUtil.toF2CVirtualMachine(serverDetail, ports);\n            f2CVirtualMachine.setRegion(request.getRegionId());\n            f2CVirtualMachine.setId(request.getId());\n            setServerHostName(client, f2CVirtualMachine, request);\n            // \u83b7\u53d6\u5305\u5e74\u5305\u6708\u673a\u5668\u7684\u5230\u671f\u65f6\u95f4\n            if (F2CChargeType.PRE_PAID.equalsIgnoreCase(f2CVirtualMachine.getInstanceChargeType())) {\n                appendExpiredTime(credential, serverDetail, f2CVirtualMachine);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new Fit2cloudException(5000, \"Huawei create vm fail - \" + e.getMessage());\n        }\n        return f2CVirtualMachine;\n    }\n\n    private static void setServerHostName(EcsClient client, F2CVirtualMachine f2CVirtualMachine, HuaweiVmCreateRequest createRequest) {\n        try {\n            // \u8bbe\u7f6ehostname\n            UpdateServerRequest request = new UpdateServerRequest();\n            request.withServerId(f2CVirtualMachine.getInstanceUUID());\n            UpdateServerRequestBody body = new UpdateServerRequestBody();\n            UpdateServerOption serverbody = new UpdateServerOption();\n            serverbody.withHostname(createRequest.getServerNameInfos().get(createRequest.getIndex()).getHostName());\n            body.withServer(serverbody);\n            request.withBody(body);\n            UpdateServerResponse response = client.updateServer(request);\n            if (response.getHttpStatusCode() == 200) {\n                if (createRequest.getServerNameInfos().get(createRequest.getIndex()).isAuthReboot()) {\n                    // \u91cd\u542f\n                    HuaweiInstanceRequest instanceRequest = new HuaweiInstanceRequest();\n                    instanceRequest.setCredential(createRequest.getCredential());\n                    instanceRequest.setRegionId(createRequest.getRegionId());\n                    instanceRequest.setUuid(f2CVirtualMachine.getInstanceUUID());\n                    rebootInstance(instanceRequest);\n                    f2CVirtualMachine.setHostname(response.getServer().getOsEXTSRVATTRHostname());\n                }\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.error(\"{}-set hostname fail\uff1a{}\", f2CVirtualMachine.getName(), e.getMessage());\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u521b\u5efa\u4e3b\u673a\u955c\u50cf\n     * \u6839\u636e\u89c4\u683c\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\u3001\u72b6\u6001\n     *\n     * @param createRequest \u8bf7\u6c42\u5bf9\u8c61\n     * @return \u54cd\u5e94\u5bf9\u8c61\n     */\n    public static List<F2CImage> listCreateImages(HuaweiVmCreateRequest createRequest) {\n        ListImageRequest request = new ListImageRequest();\n        request.setRegionId(createRequest.getRegionId());\n        request.setCredential(createRequest.getCredential());\n        request.setFlavorId(createRequest.getInstanceType());\n        request.setPlatform(ListImagesRequest.PlatformEnum.valueOf(createRequest.getOs()));\n        request.setStatus(ListImagesRequest.StatusEnum.ACTIVE);\n        if (StringUtils.isNotEmpty(request.getCredential())) {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            ImsClient imsClient = credential.getImsClient(request.getRegionId());\n            request.setImagetype(ListImagesRequest.ImagetypeEnum.GOLD);\n            ListImagesResponse listImagesResponse = imsClient.listImages(request);\n            List<ImageInfo> images = listImagesResponse.getImages();\n            //\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\u8fc7\u6ee4\n            return images.stream().filter(v -> filterImageByOsAndOsVersion(v, createRequest)).map(imageInfo -> HuaweiMappingUtil.toF2CImage(imageInfo, request.getRegionId())).filter(Objects::nonNull).toList();\n        }\n        return new ArrayList<>();\n    }\n\n    private static boolean filterImageByOsAndOsVersion(ImageInfo imageInfo, HuaweiVmCreateRequest createRequest) {\n        return StringUtils.equalsIgnoreCase(imageInfo.getPlatform().getValue(), createRequest.getOs()) && StringUtils.equalsIgnoreCase(imageInfo.getId(), createRequest.getOsVersion());\n    }\n\n\n    private static ServerDetail getJobEntities(EcsClient client, String jobId) {\n        int count = 0;\n        while (true) {\n            try {\n                Thread.sleep(SLEEP_TIME);\n                com.huaweicloud.sdk.ecs.v2.model.ShowJobResponse jobResponse = client.showJob(new com.huaweicloud.sdk.ecs.v2.model.ShowJobRequest().withJobId(jobId));\n                com.huaweicloud.sdk.ecs.v2.model.ShowJobResponse.StatusEnum status = jobResponse.getStatus();\n                if (ShowJobResponse.StatusEnum.SUCCESS.getValue().equals(status.getValue())) {\n                    String id = jobResponse.getEntities().getSubJobs().get(0).getEntities().getServerId();\n                    ShowServerRequest request = new ShowServerRequest();\n                    request.setServerId(id);\n                    ShowServerResponse response = client.showServer(request);\n                    return response.getServer();\n                }\n                if (ShowJobResponse.StatusEnum.FAIL.getValue().equalsIgnoreCase(status.getValue())) {\n                    String errorMsg = jobResponse.getFailReason();\n                    try {\n                        errorMsg = jobResponse.getEntities().getSubJobs().get(0).getEntities().getErrorcodeMessage();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    throw new RuntimeException(errorMsg);\n                }\n                if (count >= WAIT_COUNT) {\n                    throw new RuntimeException(\"check create server status timeout\uff01\");\n                }\n                count++;\n            } catch (Exception e) {\n                throw new RuntimeException(\"getJobEntities fail jobId - \" + jobId + \"-\" + e.getMessage());\n            }\n        }\n    }\n\n\n    public static List<InstanceSpecType> getInstanceSpecTypes(HuaweiVmCreateRequest request) {\n        List<InstanceSpecType> instanceSpecTypes = new ArrayList<>();\n        if (StringUtils.isEmpty(request.getRegionId()) || StringUtils.isEmpty(request.getAvailabilityZone())) {\n            return instanceSpecTypes;\n        }\n        try {\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = credential.getEcsClient(request.getRegionId());\n            ListFlavorsResponse response = client.listFlavors(new ListFlavorsRequest()\n                    .withAvailabilityZone(request.getAvailabilityZone()));\n            for (Flavor flavor : response.getFlavors()) {\n                if (flavor.getOsExtraSpecs().getCondOperationAz().contains((request.getAvailabilityZone() + \"(normal)\"))) {\n                    InstanceSpecType instanceSpecType = HuaweiMappingUtil.toInstanceSpecType(flavor);\n                    instanceSpecTypes.add(instanceSpecType);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return instanceSpecTypes;\n    }\n\n    public static List<Map<String, String>> getAllDiskTypes(HuaweiVmCreateRequest request) {\n        if (StringUtils.isEmpty(request.getRegionId()) && StringUtils.isEmpty(request.getAvailabilityZone())) {\n            return new ArrayList<>();\n        }\n        HuaweiGetDiskTypeRequest getDiskTypeRequest = new HuaweiGetDiskTypeRequest();\n        getDiskTypeRequest.setZone(request.getAvailabilityZone());\n        getDiskTypeRequest.setCredential(request.getCredential());\n        getDiskTypeRequest.setRegion(request.getRegionId());\n        getDiskTypeRequest.setLanguage(request.getLanguage());\n        return getDiskTypes(getDiskTypeRequest);\n    }\n\n    public static List<F2CHuaweiSubnet> listSubnet(HuaweiVmCreateRequest request) {\n        List<F2CHuaweiSubnet> result = new ArrayList<>();\n        Map<String, F2CHuaweiVpc> vpcMap = listVpc(request).stream().collect(Collectors.toMap(F2CHuaweiVpc::getUuid, v -> v, (k1, k2) -> k1));\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            VpcClient vpcClient = huaweiVmCredential.getVpcClient(request.getRegionId());\n            ListSubnetsRequest listSubnetsRequest = new ListSubnetsRequest();\n            listSubnetsRequest.setLimit(1000);\n            ListSubnetsResponse response = vpcClient.listSubnets(listSubnetsRequest);\n            if (CollectionUtils.isNotEmpty(response.getSubnets())) {\n                response.getSubnets().stream()\n                        .collect(Collectors.toList())\n                        .forEach(subnet -> {\n                            F2CHuaweiSubnet f2CHuaweiSubnet = HuaweiMappingUtil.toF2CHuaweiSubnet(subnet);\n                            if (vpcMap.containsKey(f2CHuaweiSubnet.getVpcId())) {\n                                f2CHuaweiSubnet.setVpcName(vpcMap.get(f2CHuaweiSubnet.getVpcId()).getName());\n                            }\n                            result.add(f2CHuaweiSubnet);\n                        });\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        if (!StringUtils.equalsIgnoreCase(\"random\", request.getAvailabilityZone())) {\n            return result.stream().filter(v -> StringUtils.equalsIgnoreCase(request.getAvailabilityZone(), v.getAvailabilityZone())).collect(Collectors.toList());\n        }\n        if (StringUtils.isNotEmpty(request.getNetworkId())) {\n            return result.stream().filter(v -> StringUtils.equalsIgnoreCase(v.getUuid(), request.getNetworkId())).toList();\n        }\n        return result;\n    }\n\n    public static List<F2CHuaweiVpc> listVpc(HuaweiVmCreateRequest request) {\n        List<F2CHuaweiVpc> result = new ArrayList<>();\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            VpcClient vpcClient = huaweiVmCredential.getVpcClient(request.getRegionId());\n            ListVpcsRequest listVpcsRequest = new ListVpcsRequest();\n            listVpcsRequest.setLimit(1000);\n            ListVpcsResponse response = vpcClient.listVpcs(listVpcsRequest);\n            if (CollectionUtils.isNotEmpty(response.getVpcs())) {\n                response.getVpcs().forEach(vpc -> {\n                    result.add(HuaweiMappingUtil.toF2CHuaweiVpc(vpc));\n                });\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n\n    public static List<F2CHuaweiSecurityGroups> listSecurityGroups(HuaweiVmCreateRequest request) {\n        List<F2CHuaweiSecurityGroups> result = new ArrayList<>();\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            VpcClient vpcClient = huaweiVmCredential.getVpcClient(request.getRegionId());\n            ListSecurityGroupsRequest listSecurityGroupsRequest = new ListSecurityGroupsRequest();\n            listSecurityGroupsRequest.setLimit(1000);\n            ListSecurityGroupsResponse response = vpcClient.listSecurityGroups(listSecurityGroupsRequest);\n            if (CollectionUtils.isNotEmpty(response.getSecurityGroups())) {\n                response.getSecurityGroups().forEach(securityGroup -> {\n                    result.add(HuaweiMappingUtil.toF2CHuaweiSecurityGroups(securityGroup));\n                });\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    public static List<NovaSimpleKeypair> listKeyPairs(HuaweiVmCreateRequest request) {\n        List<NovaSimpleKeypair> result = new ArrayList<>();\n        try {\n            HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            EcsClient client = huaweiVmCredential.getEcsClient(request.getRegionId());\n            NovaListKeypairsRequest listKeypairsRequest = new NovaListKeypairsRequest();\n            listKeypairsRequest.setLimit(1000);\n            NovaListKeypairsResponse response = client.novaListKeypairs(listKeypairsRequest);\n            if (CollectionUtils.isNotEmpty(response.getKeypairs())) {\n                response.getKeypairs().forEach(keypair -> {\n                    result.add(keypair.getKeypair());\n                });\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    /**\n     * \u8be2\u4ef7\n     *\n     * @param request\n     * @return\n     */\n    public static String calculatedPrice(Boolean trafficPriceOnly, HuaweiVmCreateRequest request) {\n        StringBuilder result = new StringBuilder();\n        try {\n            if (StringUtils.isEmpty(request.getAvailabilityZone())) {\n                return result.toString();\n            }\n            if (request.getCount() == 0) {\n                request.setCount(1);\n            }\n            HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n            //\u67e5\u8be2\u9879\u76ee\n            KeystoneListAuthProjectsRequest projectsRequest = new KeystoneListAuthProjectsRequest();\n            IamClient client = credential.getIamClient(request.getRegionId());\n            KeystoneListAuthProjectsResponse projectsResponse = client.keystoneListAuthProjects(projectsRequest);\n            List<AuthProjectResult> projectResults = projectsResponse.getProjects().stream()\n                    .filter(v -> StringUtils.equalsIgnoreCase(v.getName(), request.getRegionId())).collect(Collectors.toList());\n            if (CollectionUtils.isNotEmpty(projectResults)) {\n                String projectId = projectResults.get(0).getId();\n                Double vmAmount = 0D;\n                Double diskAmount = 0D;\n                Double bandwidthAmount = 0D;\n                //\u5f00\u542f\u516c\u7f51IP\n                boolean isUsePublicIp = request.isUsePublicIp();\n                //\u516c\u7f51IP\u8ba1\u8d39\u4ef7\u683c\n                if (isUsePublicIp) {\n                    bandwidthAmount = bandwidthInquiryPriceForHour(request, credential, projectId);\n                }\n                if (trafficPriceOnly) {\n                    result.append(bandwidthAmount).append(\"\u5143/GB\");\n                    return result.toString();\n                }\n                boolean isTraffic = StringUtils.equalsIgnoreCase(\"traffic\", request.getChargeMode());\n                //\u6309\u91cf\u8ba1\u8d39\n                if (StringUtils.equalsIgnoreCase(request.getBillingMode(), \"postPaid\")) {\n                    vmAmount = vmInquiryPriceForHour(request, credential, projectId);\n                    diskAmount = diskInquiryPriceForHour(request, credential, projectId);\n                    BigDecimal amountBig = new BigDecimal(vmAmount + diskAmount + (isTraffic ? 0 : bandwidthAmount));\n                    result.append(amountBig.setScale(4, RoundingMode.HALF_UP));\n                    result.append(\"\u5143/\u5c0f\u65f6\");\n                }\n                //\u5305\u5e74\u5305\u6708\n                if (StringUtils.equalsIgnoreCase(request.getBillingMode(), \"prePaid\")) {\n                    vmAmount = vmInquiryPriceForMonth(request, credential, projectId);\n                    diskAmount = diskInquiryPriceForMonth(request, credential, projectId);\n                    if (isUsePublicIp) {\n                        bandwidthAmount = bandwidthInquiryPriceForMonth(request, credential, projectId);\n                    }\n                    BigDecimal amountBig = new BigDecimal(vmAmount + diskAmount + (isTraffic ? 0 : bandwidthAmount));\n                    result.append(amountBig.setScale(4, RoundingMode.HALF_UP));\n                    result.append(\"\u5143\");\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result.toString();\n    }\n\n\n    /**\n     * \u865a\u62df\u673a\u5305\u5e74\u5305\u6708\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double vmInquiryPriceForMonth(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        ListRateOnPeriodDetailRequest request = new ListRateOnPeriodDetailRequest();\n        RateOnPeriodReq body = new RateOnPeriodReq();\n        List<PeriodProductInfo> listPeriodProductInfo = new ArrayList<>();\n        listPeriodProductInfo.add(new PeriodProductInfo()\n                //\u552f\u4e00\u6807\u8bc6\n                .withId(createRequest.getInstanceType())\n                //\u4e91\u4e3b\u673a\u8be2\u4ef7\u56fa\u5b9a\n                .withCloudServiceType(\"hws.service.type.ec2\")\n                .withResourceType(\"hws.resource.type.vm\")\n                //\u533a\u5206linux\\win\uff0c\u76ee\u524d\u67e5\u8be2\u7ed3\u679c\u4ef7\u683c\u4e00\u81f4\uff0c\u5b98\u7f51\u8fd9\u4e2a\u4ef7\u683c\uff0c\u4e0d\u6839\u636e\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0d\u540c\u800c\u6539\u53d8\u4ef7\u683c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u505a\u533a\u5206\n                .withResourceSpec(createRequest.getInstanceType() + \".linux\")\n                .withRegion(createRequest.getRegionId())\n                //\u5468\u671f\u7c7b\u578b0:\u59292:\u67083:\u5e744:\u5c0f\u65f6\n                .withPeriodType(StringUtils.equalsIgnoreCase(getPeriodType(createRequest.getPeriodNum()), \"month\") ? 2 : 3)\n                //\u5468\u671f\u6570 1\u4e2a\u6708\n                .withPeriodNum(getPeriodNumber(createRequest.getPeriodNum()))\n                //\u6570\u91cf\n                .withSubscriptionNum(createRequest.getCount()));\n        body.withProductInfos(listPeriodProductInfo);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListRateOnPeriodDetailResponse response = credential.getBssClient().listRateOnPeriodDetail(request);\n                return response.getOfficialWebsiteRatingResult().getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n    /**\n     * \u865a\u62df\u673a\u6309\u9700\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double vmInquiryPriceForHour(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        ListOnDemandResourceRatingsRequest request = new ListOnDemandResourceRatingsRequest();\n        RateOnDemandReq body = new RateOnDemandReq();\n        List<DemandProductInfo> listBodyProductInfos = new ArrayList<>();\n        if (Objects.isNull(createRequest.getInstanceType())) {\n            return 0D;\n        }\n        listBodyProductInfos.add(new DemandProductInfo()\n                //\u552f\u4e00\u6807\u8bc6\n                .withId(createRequest.getInstanceType())\n                //\u4e91\u4e3b\u673a\u8be2\u4ef7\u56fa\u5b9a\n                .withCloudServiceType(\"hws.service.type.ec2\")\n                .withResourceType(\"hws.resource.type.vm\")\n                //\u533a\u5206linux\\win\uff0c\u76ee\u524d\u67e5\u8be2\u7ed3\u679c\u4ef7\u683c\u4e00\u81f4\uff0c\u5b98\u7f51\u8fd9\u4e2a\u4ef7\u683c\uff0c\u4e0d\u6839\u636e\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0d\u540c\u800c\u6539\u53d8\u4ef7\u683c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u505a\u533a\u5206\n                .withResourceSpec(createRequest.getInstanceType() + \".linux\")\n                .withRegion(createRequest.getRegionId())\n                //\u4e91\u670d\u52a1\u5668\uff1aDuration\n                //\u4e91\u786c\u76d8\uff1aDuration\n                //\u5f39\u6027IP\uff1aDuration\n                .withUsageFactor(\"Duration\")\n                //\u6309\u5c0f\u65f6\u8be2\u4ef7\uff0c\u4f7f\u7528\u91cf\u503c\u4e3a1\uff0c\u4f7f\u7528\u91cf\u5355\u4f4d\u4e3a\u5c0f\u65f6\u3002\n                .withUsageValue((double) 1)\n                //\u8c03\u5ea6\u5355\u4f4d\u5c0f\u65f6\u4e3a4\n                .withUsageMeasureId(4)\n                .withSubscriptionNum(createRequest.getCount()));\n        body.withProductInfos(listBodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListOnDemandResourceRatingsResponse response = credential.getBssClient().listOnDemandResourceRatings(request);\n                return response.getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n\n    /**\n     * \u78c1\u76d8\u5305\u5e74\u5305\u6708\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double diskInquiryPriceForMonth(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        ListRateOnPeriodDetailRequest request = new ListRateOnPeriodDetailRequest();\n        RateOnPeriodReq body = new RateOnPeriodReq();\n        List<PeriodProductInfo> listbodyProductInfos = new ArrayList<>();\n        for (int i = 0; i < createRequest.getDisks().size(); i++) {\n            DiskConfig diskConfig = createRequest.getDisks().get(i);\n            listbodyProductInfos.add(new PeriodProductInfo()\n                    .withId(String.valueOf(i))\n                    .withCloudServiceType(\"hws.service.type.ebs\")\n                    .withResourceType(\"hws.resource.type.volume\")\n                    .withResourceSpec(diskConfig.getDiskType())\n                    .withRegion(createRequest.getRegionId())\n                    .withResourceSize(diskConfig.getSize())\n                    //\u8d44\u6e90\u5bb9\u91cf\u5ea6\u91cf\u6807\u8bc6\u4e91\u76d8GB17\u300115Mbps\n                    .withSizeMeasureId(17)\n                    //\u5468\u671f\u7c7b\u578b0:\u59292:\u67083:\u5e744:\u5c0f\u65f6\n                    .withPeriodType(StringUtils.equalsIgnoreCase(getPeriodType(createRequest.getPeriodNum()), \"month\") ? 2 : 3)\n                    //\u5468\u671f\u6570 1\u4e2a\u6708\n                    .withPeriodNum(getPeriodNumber(createRequest.getPeriodNum()))\n                    .withSubscriptionNum(1));\n        }\n        body.withProductInfos(listbodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListRateOnPeriodDetailResponse response = credential.getBssClient().listRateOnPeriodDetail(request);\n                return response.getOfficialWebsiteRatingResult().getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n    /**\n     * \u78c1\u76d8\u6309\u9700\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double diskInquiryPriceForHour(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        ListOnDemandResourceRatingsRequest request = new ListOnDemandResourceRatingsRequest();\n        RateOnDemandReq body = new RateOnDemandReq();\n        List<DemandProductInfo> listbodyProductInfos = new ArrayList<>();\n        for (int i = 0; i < createRequest.getDisks().size(); i++) {\n            DiskConfig diskConfig = createRequest.getDisks().get(i);\n            listbodyProductInfos.add(new DemandProductInfo()\n                    .withId(String.valueOf(i))\n                    .withCloudServiceType(\"hws.service.type.ebs\")\n                    .withResourceType(\"hws.resource.type.volume\")\n                    .withResourceSpec(diskConfig.getDiskType())\n                    .withRegion(createRequest.getRegionId())\n                    //\u5927\u5c0f\n                    .withResourceSize(diskConfig.getSize())\n                    //\u8d44\u6e90\u5bb9\u91cf\u5ea6\u91cf\u6807\u8bc6\u4e91\u76d8GB17\u300115Mbps\n                    .withSizeMeasureId(17)\n                    .withUsageFactor(\"Duration\")\n                    //\u6309\u5c0f\u65f6\u8be2\u4ef7\uff0c\u4f7f\u7528\u91cf\u503c\u4e3a1\uff0c\u4f7f\u7528\u91cf\u5355\u4f4d\u4e3a\u5c0f\u65f6\u3002\n                    .withUsageValue((double) 1)\n                    //\u8c03\u5ea6\u5355\u4f4d\u5c0f\u65f6\u4e3a4\n                    .withUsageMeasureId(4)\n                    .withSubscriptionNum(createRequest.getCount()));\n        }\n        body.withProductInfos(listbodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListOnDemandResourceRatingsResponse response = credential.getBssClient().listOnDemandResourceRatings(request);\n                return response.getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n\n    /**\n     * \u516c\u7f51\u5e26\u5bbd\u5305\u5e74\u5305\u6708\u8be2\u4ef7\n     *\n     * @param createRequest\n     * @param credential\n     * @param projectId\n     * @return\n     */\n    private static Double bandwidthInquiryPriceForMonth(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        boolean isTraffic = StringUtils.equalsIgnoreCase(\"traffic\", createRequest.getChargeMode());\n        //\u6309\u6d41\u91cf\u4e0e\u5468\u671f\u65e0\u5173\n        if (isTraffic) {\n            return bandwidthInquiryPriceForHour(createRequest, credential, projectId);\n        }\n        ListRateOnPeriodDetailRequest request = new ListRateOnPeriodDetailRequest();\n        RateOnPeriodReq body = new RateOnPeriodReq();\n        List<PeriodProductInfo> listbodyProductInfos = new ArrayList<>();\n        listbodyProductInfos.add(\n                new PeriodProductInfo()\n                        .withId(\"1\")\n                        .withCloudServiceType(\"hws.service.type.vpc\")\n                        .withResourceType(\"hws.resource.type.bandwidth\")\n                        .withResourceSpec(\"19_bgp\")\n                        .withRegion(createRequest.getRegionId())\n                        .withResourceSize(isTraffic ? createRequest.getTrafficBandwidthSize() : createRequest.getBandwidthSize())\n                        .withSizeMeasureId(15)\n                        //\u5468\u671f\u7c7b\u578b0:\u59292:\u67083:\u5e744:\u5c0f\u65f6\n                        .withPeriodType(StringUtils.equalsIgnoreCase(getPeriodType(createRequest.getPeriodNum()), \"month\") ? 2 : 3)\n                        //\u5468\u671f\u6570 1\u4e2a\u6708\n                        .withPeriodNum(getPeriodNumber(createRequest.getPeriodNum()))\n                        .withSubscriptionNum(createRequest.getCount())\n        );\n        body.withProductInfos(listbodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListRateOnPeriodDetailResponse response = credential.getBssClient().listRateOnPeriodDetail(request);\n                return response.getOfficialWebsiteRatingResult().getOfficialWebsiteAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n    /**\n     * \u5e26\u5bbd\u6309\u9700\u8be2\u4ef7\n     * 12_bgp:\u52a8\u6001BGP\u6309\u6d41\u91cf\u8ba1\u8d39\u5e26\u5bbd\n     * 12_sbgp:\u9759\u6001BGP\u6309\u6d41\u91cf\u8ba1\u8d39\u5e26\u5bbd\n     * 19_bgp:\u52a8\u6001BGP\u6309\u5e26\u5bbd\u8ba1\u8d39\u5e26\u5bbd\n     * 19_sbgp:\u9759\u6001BGP\u6309\u5e26\u5bbd\u8ba1\u8d39\u5e26\u5bbd\n     * 19_share:\u6309\u5e26\u5bbd\u8ba1\u8d39\u5171\u4eab\u5e26\u5bbd\n     * IP:5_bgp:\u52a8\u6001BGP\u516c\u7f51\n     * IP5_sbgp:\u9759\u6001BGP\u516c\u7f51IP\n     */\n    private static Double bandwidthInquiryPriceForHour(HuaweiVmCreateRequest createRequest, HuaweiVmCredential credential, String projectId) {\n        if (StringUtils.isEmpty(createRequest.getChargeMode())) {\n            return 0D;\n        }\n        boolean isTraffic = StringUtils.equalsIgnoreCase(\"traffic\", createRequest.getChargeMode());\n        ListOnDemandResourceRatingsRequest request = new ListOnDemandResourceRatingsRequest();\n        RateOnDemandReq body = new RateOnDemandReq();\n        List<DemandProductInfo> listbodyProductInfos = new ArrayList<>();\n        DemandProductInfo demandProductInfo = new DemandProductInfo();\n        demandProductInfo.withId(\"1\")\n                .withCloudServiceType(\"hws.service.type.vpc\")\n                .withResourceType(\"hws.resource.type.bandwidth\")\n                .withUsageValue((double) 1)\n                .withSizeMeasureId(15)\n                .withSubscriptionNum(createRequest.getCount())\n                .withRegion(createRequest.getRegionId())\n                .withResourceSize(isTraffic ? createRequest.getTrafficBandwidthSize() : createRequest.getBandwidthSize());\n        // \u6309\u6d41\u91cf\n        if (isTraffic) {\n            demandProductInfo.withUsageFactor(\"upflow\").withResourceSpec(\"12_bgp\").withUsageMeasureId(10);\n        } else {\n            // \u6309\u5e26\u5bbd\n            demandProductInfo.withUsageFactor(\"Duration\").withResourceSpec(\"19_bgp\").withUsageMeasureId(4);\n        }\n        listbodyProductInfos.add(demandProductInfo);\n        body.withProductInfos(listbodyProductInfos);\n        body.withProjectId(projectId);\n        request.withBody(body);\n        try {\n            if (CollectionUtils.isNotEmpty(body.getProductInfos())) {\n                ListOnDemandResourceRatingsResponse response = credential.getBssClient().listOnDemandResourceRatings(request);\n                return response.getAmount();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return 0D;\n    }\n\n    /**\n     * \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\n     *\n     * @param createRequest\n     * @return\n     */\n    public static List<OsConfig> listOsVersion(HuaweiVmCreateRequest createRequest) {\n        List<OsConfig> result = new ArrayList<>();\n        if (StringUtils.isEmpty(createRequest.getOs())\n                || (Objects.isNull(createRequest.getInstanceType()))) {\n            return result;\n        }\n        try {\n            ListImageRequest request = new ListImageRequest();\n            request.setRegionId(createRequest.getRegionId());\n            request.setCredential(createRequest.getCredential());\n            request.setFlavorId(createRequest.getInstanceType());\n            request.setPlatform(ListImagesRequest.PlatformEnum.valueOf(createRequest.getOs()));\n            request.setStatus(ListImagesRequest.StatusEnum.ACTIVE);\n            List<ImageInfo> osImages = new ArrayList<>();\n            if (StringUtils.isNotEmpty(request.getCredential())) {\n                HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n                ImsClient imsClient = credential.getImsClient(request.getRegionId());\n                request.setImagetype(ListImagesRequest.ImagetypeEnum.GOLD);\n                ListImagesResponse listImagesResponse = imsClient.listImages(request);\n                List<ImageInfo> imagesAll = listImagesResponse.getImages();\n                osImages = imagesAll.stream().filter(v -> StringUtils.equalsIgnoreCase(v.getPlatform().getValue(), createRequest.getOs())).collect(Collectors.toList());\n            }\n            osImages.forEach(v -> {\n                OsConfig osConfig = new OsConfig();\n                osConfig.setOs(v.getPlatform().getValue());\n                osConfig.setOsVersion(v.getOsVersion());\n                osConfig.setImageName(v.getName());\n                osConfig.setImageId(v.getId());\n                osConfig.setImageDiskMinSize(Long.valueOf(String.valueOf(v.getMinDisk())));\n                result.add(osConfig);\n            });\n            return result.stream().sorted(Comparator.comparing(OsConfig::getOsVersion)).collect(Collectors.toList());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    public static List<Map<String, String>> listOs(String request) {\n        List<Map<String, String>> result = new ArrayList<>(14);\n        List<String> osList = Arrays.asList(\"Windows\", \"RedHat\", \"CentOS\", \"SUSE\", \"Debian\", \"OpenSUSE\", \"Oracle Linux\", \"Fedora\", \"Ubuntu\", \"EulerOS\", \"CoreOS\", \"ESXi\", \"Other\", \"openEuler\");\n        osList.stream().sorted().forEach(v -> {\n            Map<String, String> m = new HashMap<>();\n            m.put(\"id\", v);\n            m.put(\"name\", v);\n            result.add(m);\n        });\n        return result;\n    }\n\n    /**\n     * \u4e91\u4e3b\u673a\u914d\u7f6e\u53d8\u66f4\n     *\n     * @param request\n     * @return\n     */\n    public static F2CVirtualMachine changeVmConfig(HuaweiUpdateConfigRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n\n        String instanceId = request.getInstanceUuid();\n        String instanceType = request.getNewInstanceType();\n        ServerDetail server = getInstanceById(instanceId, ecsClient);\n        Optional.ofNullable(server).orElseThrow(() -> new RuntimeException(\"Can not find the server!\"));\n\n        ResizeServerRequest resizeServerRequest = new ResizeServerRequest();\n        resizeServerRequest.withServerId(instanceId);\n        ResizeServerRequestBody body = new ResizeServerRequestBody();\n\n        ResizeServerExtendParam extendParamResize = new ResizeServerExtendParam();\n        extendParamResize.withIsAutoPay(\"true\");\n        ResizePrePaidServerOption resizeBody = new ResizePrePaidServerOption();\n        resizeBody.withFlavorRef(instanceType)\n                .withMode(\"withStopServer\")\n                .withExtendparam(extendParamResize);\n\n        body.withResize(resizeBody);\n        resizeServerRequest.withBody(body);\n\n        ResizeServerResponse resizeResponse = ecsClient.resizeServer(resizeServerRequest);\n        if (null == resizeResponse || StringUtils.isEmpty(resizeResponse.getJobId())) {\n            throw new RuntimeException(\"Failed to change instance config.\");\n        }\n        try {\n            checkEcsJobStatus(ecsClient, resizeResponse.getJobId());\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to check ecs job status.\" + e.getMessage(), e);\n        }\n\n        return HuaweiMappingUtil.toF2CVirtualMachine(getInstanceById(instanceId, ecsClient));\n    }\n\n    public static List<InstanceSpecType> getInstanceTypesForConfigUpdate(HuaweiUpdateConfigRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n\n        ListResizeFlavorsRequest listResizeFlavorsRequest = new ListResizeFlavorsRequest()\n                .withInstanceUuid(request.getInstanceUuid())\n                .withSourceFlavorId(request.getCurrentInstanceType());\n\n        ListResizeFlavorsResponse response = ecsClient.listResizeFlavors(listResizeFlavorsRequest);\n        List<InstanceSpecType> result = response.getFlavors().stream()\n                .filter(listResizeFlavorsResult -> !listResizeFlavorsResult.getName().equalsIgnoreCase(request.getCurrentInstanceType()))\n                .map(flavor -> {\n                    InstanceSpecType instanceSpecType = new InstanceSpecType();\n                    instanceSpecType.setSpecName(flavor.getName());\n                    instanceSpecType.setInstanceSpec(HuaweiMappingUtil.transInstanceSpecTypeDescription(flavor));\n                    instanceSpecType.setInstanceTypeDesc(instanceSpecType.getSpecName() + \"\uff08\" + instanceSpecType.getInstanceSpec() + \"\uff09\");\n                    return instanceSpecType;\n                }).collect(Collectors.toList());\n        return result;\n    }\n\n    /**\n     * \u4e91\u4e3b\u673a\u914d\u7f6e\u53d8\u66f4\u8be2\u4ef7\n     *\n     * @param request\n     * @return\n     */\n    public static String calculateConfigUpdatePrice(HuaweiUpdateConfigRequest request) {\n        HuaweiVmCredential huaweiVmCredential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EcsClient ecsClient = huaweiVmCredential.getEcsClient(request.getRegionId());\n\n        ServerDetail server = getInstanceById(request.getInstanceUuid(), ecsClient);\n        Optional.ofNullable(server).orElseThrow(() -> new RuntimeException(\"Can not find the server!\"));\n\n        String instanceChargeType;\n        if (StringUtils.equalsIgnoreCase(server.getMetadata().get(\"charging_mode\"), \"2\")) {\n            instanceChargeType = F2CChargeType.SPOT_PAID;\n        } else {\n            instanceChargeType = StringUtils.equalsIgnoreCase(server.getMetadata().get(\"charging_mode\"), \"0\") ? F2CChargeType.POST_PAID : F2CChargeType.PRE_PAID;\n        }\n\n        HuaweiVmCreateRequest createRequest = new HuaweiVmCreateRequest();\n        BeanUtils.copyProperties(request, createRequest);\n        createRequest.setInstanceType(request.getNewInstanceType());\n        createRequest.setCount(1);\n        String projectId = server.getTenantId();\n\n        Double price;\n        if (F2CChargeType.PRE_PAID.equalsIgnoreCase(instanceChargeType)) {\n            BssClient bssClient = huaweiVmCredential.getBssClient();\n            ShowCustomerOrderDetailsResponse response = getOrderDetailsById(server.getMetadata().get(\"metering.order_id\"), bssClient);\n            response.getOrderLineItems().stream().forEach((item) -> {\n                if (\"hws.service.type.ec2\".equalsIgnoreCase(item.getServiceTypeCode())) {\n                    if (item.getPeriodType() == 2) {\n                        createRequest.setPeriodNum(String.valueOf(item.getPeriodNum() == null ? 1 : item.getPeriodNum()));\n                    } else {\n                        createRequest.setPeriodNum(String.valueOf(item.getPeriodNum() * 12));\n                    }\n                }\n            });\n            price = vmInquiryPriceForMonth(createRequest, huaweiVmCredential, projectId);\n        } else {\n            price = vmInquiryPriceForHour(createRequest, huaweiVmCredential, projectId);\n        }\n        return String.format(\"%.2f\", price) + PriceUnit.YUAN;\n    }\n\n    /**\n     * \u6839\u636e\u5b9e\u4f8b ID \u83b7\u53d6\u5b9e\u4f8b\n     *\n     * @param instanceId\n     * @param ecsClient\n     * @return\n     */\n    private static ServerDetail getInstanceById(String instanceId, EcsClient ecsClient) {\n        ShowServerResponse showServerResponse = ecsClient.showServer(new ShowServerRequest().withServerId(instanceId));\n        ServerDetail server = showServerResponse.getServer();\n        return server;\n    }\n\n    /**\n     * \u67e5\u8be2\u8ba2\u5355\u8be6\u60c5\n     *\n     * @param orderId\n     * @param bssClient\n     * @return\n     */\n    private static ShowCustomerOrderDetailsResponse getOrderDetailsById(String orderId, BssClient bssClient) {\n        ShowCustomerOrderDetailsRequest request = new ShowCustomerOrderDetailsRequest();\n        request.setOrderId(orderId);\n        bssClient.showCustomerOrderDetails(request);\n        return bssClient.showCustomerOrderDetails(request);\n    }\n\n    /**\n     * \u83b7\u53d6\u4e91\u4e3b\u673a\u5173\u8054\u7684\u78c1\u76d8\n     *\n     * @param request\n     * @return\n     */\n    public static List<F2CDisk> getVmF2CDisks(BaseDiskRequest request) {\n        HuaweiVmCredential credential = JsonUtil.parseObject(request.getCredential(), HuaweiVmCredential.class);\n        EcsClient ecsClient = credential.getEcsClient(request.getRegionId());\n        EvsClient evsClient = credential.getEvsClient(request.getRegionId());\n        try {\n            ListServerBlockDevicesResponse listServerBlockDevicesResponse = ecsClient.listServerBlockDevices(new ListServerBlockDevicesRequest().withServerId(request.getInstanceUuid()));\n            List<ServerBlockDevice> volumeAttachments = listServerBlockDevicesResponse.getVolumeAttachments();\n            return volumeAttachments.stream().map(attachment -> {\n                ShowVolumeResponse showVolumeResponse = evsClient.showVolume(new ShowVolumeRequest().withVolumeId(attachment.getVolumeId()));\n                VolumeDetail volume = showVolumeResponse.getVolume();\n                F2CDisk f2CDisk = HuaweiMappingUtil.toF2CDisk(volume);\n                return f2CDisk;\n            }).collect(Collectors.toList());\n        } catch (Exception e) {\n            throw new RuntimeException(\"GetVmF2CDisks Error!\" + e.getMessage(), e);\n        }\n    }\n}\n"], "filenames": ["services/vm-service/backend/src/main/java/com/fit2cloud/provider/impl/huawei/api/HuaweiSyncCloudApi.java"], "buggy_code_start_loc": [702], "buggy_code_end_loc": [702], "fixing_code_start_loc": [703], "fixing_code_end_loc": [704], "type": "CWE-639", "message": "Missing Authorization in GitHub repository cloudexplorer-dev/cloudexplorer-lite prior to v1.1.0.", "other": {"cve": {"id": "CVE-2023-2844", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-23T04:15:09.497", "lastModified": "2023-05-30T21:57:51.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Missing Authorization in GitHub repository cloudexplorer-dev/cloudexplorer-lite prior to v1.1.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fit2cloud:cloudexplorer_lite:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.1.0", "matchCriteriaId": "C21F0984-6CAC-4621-A57A-BA7D0D894D51"}]}]}], "references": [{"url": "https://github.com/cloudexplorer-dev/cloudexplorer-lite/commit/d9f55a44e579d312977b02317b2020de758b763a", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/6644b36e-603d-4dbe-8ee2-5df8b8fb2e22", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cloudexplorer-dev/cloudexplorer-lite/commit/d9f55a44e579d312977b02317b2020de758b763a"}}