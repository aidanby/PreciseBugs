{"buggy_code": ["<?php\r\n/**\r\n * dynWid class\r\n *\r\n * @version $Id$\r\n * @copyright 2011 Jacco Drabbe\r\n */\r\n\r\n\tdefined('ABSPATH') or die(\"No script kiddies please!\");\r\n\r\n\tclass dynWid {\r\n\t\tprivate $dbtable;\r\n\t\tpublic  $device;\r\n\t\tpublic  $dwoptions = array();\r\n\t\tpublic  $dynwid_list;\r\n\t\tpublic  $enabled;\r\n\t\tprivate $firstmessage = TRUE;\r\n\t\tpublic\t$ip_address;\r\n\t\tpublic  $listmade = FALSE;\r\n\t\tpublic  $overrule_maintype = array();\r\n\t\tprivate $registered_sidebars;\r\n\t\tpublic  $registered_widget_controls;\r\n\t\tpublic  $registered_widgets;\r\n\t\tpublic  $removelist = array();\r\n\t\tpublic  $sidebars;\r\n\t\tpublic  $template;\r\n\t\tpublic  $url;\r\n\t\tpublic  $plugin_url;\r\n\t\tpublic  $useragent;\r\n\t\tpublic  $userrole;\r\n\t\tpublic  $whereami;\r\n\t\tprivate $wpdb;\r\n\r\n\t\t/**\r\n\t\t * dynWid::__construct() Master class\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function __construct() {\r\n\t\t\tglobal $wpdb;\r\n\r\n\t\t\tif ( is_user_logged_in() ) {\r\n\t\t\t\t$this->userrole = $GLOBALS['current_user']->roles;\r\n\t\t\t} else {\r\n\t\t\t\t$this->userrole = array('anonymous');\r\n\t\t\t}\r\n\r\n\t\t\t$this->registered_sidebars = $GLOBALS['wp_registered_sidebars'];\r\n\t\t\t$this->registered_widget_controls = &$GLOBALS['wp_registered_widget_controls'];\r\n\t\t\t$this->registered_widgets = &$GLOBALS['wp_registered_widgets'];\r\n\t\t\t$this->sidebars = wp_get_sidebars_widgets();\r\n\t\t\t$this->useragent = $this->getBrowser();\r\n\t\t\t$this->ip_address = $this->getIP();\r\n\r\n\t\t\t// DB init\r\n\t\t\t$this->wpdb = $wpdb;\r\n\t\t\t$this->dbtable = $this->wpdb->prefix . DW_DB_TABLE;\r\n\t\t\t$query = \"SHOW TABLES LIKE '\" . $this->dbtable . \"'\";\r\n\t\t\t$result = $this->wpdb->get_var($query);\r\n\r\n\t\t\t$this->enabled = ( is_null($result) ) ? FALSE : TRUE;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::__get() Overload get\r\n\t\t *\r\n\t\t * @param string $name\r\n\t\t * @return mixed\r\n\t\t */\r\n\t\tpublic function __get($name) {\r\n\t\t\treturn $this->$name;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::__isset() Overload isset\r\n\t\t *\r\n\t\t * @param mixed $name\r\n\t\t * @return boolean\r\n\t\t */\r\n\t\tpublic function __isset($name) {\r\n\t\t\tif ( isset($this->$name) ) {\r\n\t\t\t\treturn TRUE;\r\n\t\t\t}\r\n\t\t\treturn FALSE;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::__set() Overload set\r\n\t\t *\r\n\t\t * @param string $name\r\n\t\t * @param mixed $value\r\n\t\t */\r\n\t\tpublic function __set($name, $value) {\r\n\t\t\t$this->$name = $value;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addChilds() Save child options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param string $maintype Name of module\r\n\t\t * @param string $default Default module setting\r\n\t\t * @param array $act Parent options\r\n\t\t * @param array $childs Options\r\n\t\t */\r\n\t\tpublic function addChilds($widget_id, $maintype, $default, $act, $childs) {\r\n\t\t\t$child_act = array();\r\n\t\t\tforeach ( $childs as $opt ) {\r\n\t\t\t\tif ( in_array($opt, $act) ) {\r\n\t\t\t\t\t$childs_act[ ] = $opt;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$this->addMultiOption($widget_id, $maintype, $default, $childs_act);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addDate() Saves date options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param array $dates Dates\r\n\t\t */\r\n\t\tpublic function addDate($widget_id, $dates) {\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                    (widget_id, maintype, name, value)\r\n                  VALUES\r\n                    ('\" . $widget_id . \"', 'date', 'default', '0')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\r\n\t\t\tforeach ( $dates as $name => $date ) {\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                    (widget_id, maintype, name, value)\r\n                  VALUES\r\n                    ('\" . esc_sql($widget_id) . \"', 'date', '\" . esc_sql($name) . \"', '\" . esc_sql($date) . \"')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n         * dynWid::addIPs() Saves IP options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param array $default Default setting\r\n\t\t * @param string $ips IPs\r\n\t\t */\r\n\t\tpublic function addIPs($widget_id, $default, $ips) {\r\n\t\t\t$value = serialize($ips);\r\n\t\t\tif ( $default == 'no' ) {\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'ip', 'default', '0')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t}\r\n\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'ip', 'ip', '\" . $value . \"')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t}\r\n\r\n\t\tpublic function addShortcode($widget_id, $default, $value, $match, $operator) {\r\n\t\t\t$value = array( 'value' => $value, 'match' => $match, 'operator' => $operator );\r\n\t\t\t$value = serialize($value);\r\n\r\n\t\t\tif ( $default == 'no' ) {\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'shortcode', 'default', '0')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t}\r\n\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'shortcode', 'shortcode', '\" . $value . \"')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addUrls() Saves url options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param array $default Default setting\r\n\t\t * @param string $urls URLs\r\n\t\t */\r\n\t\tpublic function addUrls($widget_id, $default, $urls) {\r\n\t\t\t$value = serialize($urls);\r\n\t\t\tif ( $default == 'no' ) {\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'url', 'default', '0')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t}\r\n\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'url', 'url', '\" . $value . \"')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addMultiOption() Save multi (complex) options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param string $maintype Name of the module\r\n\t\t * @param string $default Default setting\r\n\t\t * @param array $act Options\r\n\t\t */\r\n\t\tpublic function addMultiOption($widget_id, $maintype, $default, $act = array()) {\r\n\t\t\t$insert = TRUE;\r\n\r\n\t\t\tif ( $default == 'no' ) {\r\n\t\t\t\t$opt_default = '0';\r\n\t\t\t\t$opt_act = '1';\r\n\t\t\t} else {\r\n\t\t\t\t$opt_default = '1';\r\n\t\t\t\t$opt_act = '0';\r\n\t\t\t}\r\n\r\n\t\t\t// Check single-post or single-option coming from posts or tags screen to prevent database polution\r\n\t\t\t$types = array();\r\n\t\t\t$args = array(\r\n\t\t\t\t\t\t\t\t'public'   => TRUE,\r\n\t\t\t\t\t\t\t\t'_builtin' => FALSE\r\n\t\t\t\t\t\t\t);\r\n\t\t\t$post_types = get_post_types($args, 'objects', 'and');\r\n\t\t\tforeach ( array_keys($post_types) as $t ){\r\n\t\t\t\t$types[ ] = $t . '-post';\r\n\t\t\t}\r\n\t\t\t$post_types = array_merge( $types, array('single-post', 'single-tag') );\r\n\r\n\t\t\tif ( in_array($maintype, $post_types) ) {\r\n\t\t\t\t$query = \"SELECT COUNT(1) AS total FROM \" . $this->dbtable . \" WHERE widget_id = '\" . $widget_id . \"' AND maintype = '\" . $maintype . \"' AND name = 'default'\";\r\n\t\t\t\t$count = $this->wpdb->get_var($query);\r\n\t\t\t\tif ( $count > 0 ) {\r\n\t\t\t\t\t$insert = FALSE;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( $insert ) {\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                      (widget_id, maintype, name, value)\r\n                    VALUES\r\n                      ('\" . esc_sql($widget_id) . \"', '\" . esc_sql($maintype) . \"', 'default', '\" . esc_sql($opt_default) . \"')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t}\r\n\t\t\tforeach ( $act as $option ) {\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                      (widget_id, maintype, name, value)\r\n                    VALUES\r\n                      ('\" . esc_sql($widget_id) . \"', '\" . esc_sql($maintype) . \"', '\" . esc_sql($option) . \"', '\" . esc_sql($opt_act) . \"')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addSingleOption() Save single (simple) options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param string $maintype Name of the module\r\n\t\t * @param integer $value Default setting\r\n\t\t */\r\n\t\tpublic function addSingleOption($widget_id, $maintype, $value = '0') {\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                    (widget_id, maintype, value)\r\n                  VALUES\r\n                    ('\" . esc_sql($widget_id) . \"', '\" . esc_sql($maintype) . \"', '\" . esc_sql($value) . \"')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::checkWPhead() Checks for wp_head()\r\n\t\t *\r\n\t\t * @return integer\r\n\t\t */\r\n\t\tpublic function checkWPhead() {\r\n\t\t\t$ct = current_theme_info();\r\n\t\t\t$headerfile = $ct->template_dir . '/header.php';\r\n\t\t\tif ( file_exists($headerfile) ) {\r\n\t\t\t\t$buffer = file_get_contents($headerfile);\r\n\t\t\t\tif ( strpos($buffer, 'wp_head()') ) {\r\n\t\t\t\t\t// wp_head() found\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wp_head() not found\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// wp_head() unable to determine\r\n\t\t\t\treturn 2;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::createList() Creates full list of options\r\n\t\t *\r\n\t\t */\r\n\t\tprivate function createList() {\r\n\t\t\t$this->dynwid_list = array();\r\n\r\n\t\t\tforeach ( $this->sidebars as $sidebar_id => $widgets ) {\r\n\t\t\t\tif ( count($widgets) > 0 ) {\r\n\t\t\t\t\tforeach ( $widgets as $widget_id ) {\r\n\t\t\t\t\t\tif ( $this->hasOptions($widget_id) ) {\r\n\t\t\t\t\t\t\t$this->dynwid_list[ ] = $widget_id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} // END foreach widgets\r\n\t\t\t\t}\r\n\t\t\t} // END foreach sidebars\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::deleteOption() Removes option\r\n\t\t *\r\n\t\t * @param string $widget_id ID of widget\r\n\t\t * @param string $maintype Name of module\r\n\t\t * @param string $name Name of option\r\n\t\t */\r\n\t\tpublic function deleteOption($widget_id, $maintype, $name = '') {\r\n\t\t\t$query = \"DELETE FROM \" . $this->dbtable . \" WHERE widget_id = '\" . $widget_id . \"' AND maintype = '\" . $maintype .\"'\";\r\n\t\t\tif (! empty($name) ) {\r\n\t\t\t\t$query .= \" AND name = '\" . $name . \"'\";\r\n\t\t\t}\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::detectPage() Page detection\r\n\t\t *\r\n\t\t * @return string\r\n\t\t */\r\n\t\tpublic function detectPage() {\r\n\t\t\t// First we register the Path URL\r\n\t\t\t$this->url = $_SERVER['REQUEST_URI'];\r\n\r\n\t\t\tif ( is_front_page() && get_option('show_on_front') == 'posts' ) {\r\n\t\t\t\treturn 'front-page';\r\n\t\t\t} else if ( is_home() && get_option('show_on_front') == 'page' ) {\r\n\t\t\t\treturn 'front-page';\r\n\t\t\t} else if ( is_attachment() ) {\r\n\t\t\t\treturn 'attachment';\t\t\t\t\t// must be before is_single(), otherwise detects as 'single'\r\n\t\t\t} else if ( is_single() ) {\r\n\t\t\t\treturn 'single';\r\n\t\t\t} else if ( is_page() ) {\r\n\t\t\t\treturn 'page';\r\n\t\t\t} else if ( is_author() ) {\r\n\t\t\t\treturn 'author';\r\n\t\t\t} else if ( is_category() ) {\r\n\t\t\t\treturn 'category';\r\n\t\t\t} else if ( is_tag() ) {\r\n\t\t\t\treturn 'tag';\r\n\t\t\t} else if ( function_exists('is_post_type_archive') && is_post_type_archive() ) {\r\n\t\t\t\treturn 'cp_archive';\t\t\t\t// must be before is_archive(), otherwise detects as 'archive' in WP 3.1.0\r\n\t\t\t} else if ( function_exists('is_tax') && is_tax() ) {\r\n\t\t\t\treturn 'tax_archive';\r\n\t\t\t} else if ( is_archive() && ! is_category() && ! is_author() && ! is_tag() ) {\r\n\t\t\t\treturn 'archive';\r\n\t\t\t} else if ( function_exists('bbp_is_single_user') && (bbp_is_single_user() || bbp_is_single_user_edit()) ) {\t// must be before is_404(), otherwise bbPress profile page is detected as 'e404'.\r\n\t\t\t\treturn 'bbp_profile';\r\n\t\t\t} else if ( is_404() ) {\r\n\t\t\t\treturn 'e404';\r\n\t\t\t} else if ( is_search() ) {\r\n\t\t\t\treturn 'search';\r\n\t\t\t} else if ( function_exists('is_pod_page') && is_pod_page() ) {\r\n\t\t\t\treturn 'pods';\r\n\t\t\t} else {\r\n\t\t\t\treturn 'undef';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::dump() Dump file creation\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function dump() {\r\n\t\t\techo \"wp version: \" . $GLOBALS['wp_version'] . \"\\n\";\r\n\t\t\techo \"wp_head: \" . $this->checkWPhead() . \"\\n\";\r\n\t\t\techo \"dw version: \" . DW_VERSION . \"\\n\";\r\n\t\t\techo \"php version: \" . PHP_VERSION . \"\\n\";\r\n\t\t\techo \"\\n\";\r\n\t\t\techo \"front: \" . get_option('show_on_front') . \"\\n\";\r\n\t\t\tif ( get_option('show_on_front') == 'page' ) {\r\n\t\t\t\techo \"front page: \" . get_option('page_on_front') . \"\\n\";\r\n\t\t\t\techo \"posts page: \" . get_option('page_for_posts') . \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\techo \"\\n\";\r\n\t\t\techo \"list: \\n\";\r\n\t\t\t$list = array();\r\n\t\t\t$this->createList();\r\n\t\t\tforeach ( $this->dynwid_list as $widget_id ) {\r\n\t\t\t\t$list[$widget_id] = strip_tags($this->getName($widget_id));\r\n\t\t\t}\r\n\t\t\tprint_r($list);\r\n\r\n\t\t\techo \"wp_registered_widgets: \\n\";\r\n\t\t\tprint_r($this->registered_widgets);\r\n\r\n\t\t\techo \"options: \\n\";\r\n\t\t\tprint_r( $this->getOpt('%', NULL) );\r\n\r\n\t\t\techo \"\\n\";\r\n\t\t\techo serialize($this->getOpt('%', NULL));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::dumpOpt() Debug dump option\r\n\t\t *\r\n\t\t * @param object $opt\r\n\t\t */\r\n\t\tpublic function dumpOpt($opt) {\r\n\t\t\tif ( DW_DEBUG && count($opt) > 0 ) {\r\n\t\t\t\tvar_dump($opt);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// replacement for createList() to make the worker faster\r\n\t\t/**\r\n\t\t * dynWid::dwList() Option list creation\r\n\t\t *\r\n\t\t * @param string $whereami Page\r\n\t\t */\r\n\t\tpublic function dwList($whereami) {\r\n\t\t\t$this->dynwid_list = array();\r\n\t\t\tif ( $whereami == 'home' ) {\r\n\t\t\t\t$whereami = 'page';\r\n\t\t\t}\r\n\r\n\t\t\t$query = \"SELECT DISTINCT widget_id FROM \" . $this->dbtable . \"\r\n                     WHERE  maintype LIKE '\" . $whereami . \"%'\";\r\n\r\n\t\t\tif ( count($this->overrule_maintype) > 0 ) {\r\n\t\t\t\t$query .= \" OR maintype IN \";\r\n\t\t\t\t$q = array();\r\n\t\t\t\tforeach ( $this->overrule_maintype as $omt ) {\r\n\t\t\t\t\t$q[ ] = \"'\" . $omt . \"'\";\r\n\t\t\t\t}\r\n\t\t\t\t$query .= \"(\" . implode(', ', $q) . \")\";\r\n\t\t\t}\r\n\r\n\t\t\t$results = $this->wpdb->get_results($query);\r\n\t\t\tforeach ( $results as $myrow ) {\r\n\t\t\t\t$this->dynwid_list[ ] = $myrow->widget_id;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getBrowser() Browser detection\r\n\t\t *\r\n\t\t * @return string\r\n\t\t */\r\n\t\tprivate function getBrowser() {\r\n\t\t\tglobal $is_gecko, $is_IE, $is_opera, $is_NS4, $is_safari, $is_chrome;\r\n\r\n\t\t\tif ( $is_gecko ) {\r\n\t\t\t\treturn 'gecko';\r\n\t\t\t} else if ( $is_IE ) {\r\n\t\t\t\tif ( strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE 6.') !== FALSE ) {\r\n\t\t\t\t\treturn 'msie6';\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 'msie';\r\n\t\t\t\t}\r\n\t\t\t} else if ( $is_opera ) {\r\n\t\t\t\treturn 'opera';\r\n\t\t\t} else if ( $is_NS4 ) {\r\n\t\t\t\treturn 'ns';\r\n\t\t\t} else if ( $is_safari ) {\r\n\t\t\t\treturn 'safari';\r\n\t\t\t} else if ( $is_chrome ) {\r\n\t\t\t\treturn 'chrome';\r\n\t\t\t} else {\r\n\t\t\t\treturn 'undef';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getDWOpt() Gets SQL object used in DWOpts\r\n\t\t *\r\n\t\t * @param string $widget_id ID of widget\r\n\t\t * @param string $maintype Name of module\r\n\t\t * @return object\r\n\t\t */\r\n\t\tpublic function getDWOpt($widget_id, $maintype) {\r\n\t\t\tif ( $maintype == 'home' ) {\r\n\t\t\t\t$maintype = 'page';\r\n\t\t\t}\r\n\r\n\t\t\t$query = \"SELECT widget_id, maintype, name, value FROM \" . $this->dbtable . \"\r\n                 WHERE widget_id LIKE '\" . $widget_id . \"'\r\n                   AND maintype LIKE '\" . $maintype . \"%'\r\n                 ORDER BY maintype, name\";\r\n\t\t\t$results = new DWOpts($this->wpdb->get_results($query), $maintype);\r\n\t\t\treturn $results;\r\n\t\t}\r\n\r\n\t\tprivate function getIP() {\r\n\t\t\t$ip = $_SERVER['REMOTE_ADDR'];\r\n\t\t\t$this->message( 'Raw IP: ' . $ip );\r\n\r\n\t\t\treturn ( strstr($ip, '.') !== FALSE ) ? $ip : NULL;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getModuleName() Full registration of the modules\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function getModuleName() {\r\n\t\t\t$dwoptions = array();\r\n\t\t\t// I NEED PHP > 5.3!!\r\n\r\n\t\t\tDWModule::registerOption(DW_Archive::$option);\r\n\t\t\tDWModule::registerOption(DW_Attachment::$option);\r\n\t\t\tDWModule::registerOption(DW_Author::$option);\r\n\t\t\tDWModule::registerOption(DW_bbPress::$option);\r\n\t\t\tDWModule::registerOption(DW_BP::$option);\r\n\t\t\tDWModule::registerOption(DW_Browser::$option);\r\n\t\t\tDWModule::registerOption(DW_IP::$option);\r\n\t\t\tDWModule::registerOption(DW_Category::$option);\r\n\t\t\tDW_CustomPost::registerOption(NULL);\r\n\t\t\tDWModule::registerOption(DW_Date::$option);\r\n\t\t\tDWModule::registerOption(DW_Day::$option);\r\n\t\t\tDWModule::registerOption(DW_E404::$option);\r\n\t\t\tDWModule::registerOption(DW_Front_page::$option);\r\n\t\t\tDWModule::registerOption(DW_Device::$option);\r\n\t\t\tDWModule::registerOption(DW_Page::$option);\r\n\t\t\tDWModule::registerOption(DW_Pods::$option);\r\n\t\t\tDWModule::registerOption(DW_QT::$option);\r\n\t\t\tDWModule::registerOption(DW_Role::$option);\r\n\t\t\tDWModule::registerOption(DW_Search::$option);\r\n\t\t\tDWModule::registerOption(DW_Shortcode::$option);\r\n\t\t\tDWModule::registerOption(DW_Single::$option);\r\n\t\t\tDWModule::registerOption(DW_Tag::$option);\r\n\t\t\tDWModule::registerOption(DW_Tpl::$option);\r\n\t\t\tDWModule::registerOption(DW_URL::$option);\r\n\t\t\tDWModule::registerOption(DW_Week::$option);\r\n\t\t\tDWModule::registerOption(DW_WPSC::$option);\r\n\t\t\tDWModule::registerOption(DW_WPML::$option);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getName() Gets the lookup name\r\n\t\t *\r\n\t\t * @return string\r\n\t\t */\r\n\t\tpublic function getName($id, $type = 'W') {\r\n\t\t\tswitch ( $type ) {\r\n\t\t\t\tcase 'S':\r\n\t\t\t\t\t$lookup = $this->registered_sidebars;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t$lookup = $this->registered_widgets;\r\n\t\t\t\t\t// end default\r\n\t\t\t}\r\n\r\n\t\t\tif ( isset($lookup[$id]['name']) ) {\r\n\t\t\t\t$name = $lookup[$id]['name'];\r\n\r\n\t\t\t\tif ( $type == 'W' && isset($lookup[$id]['params'][0]['number']) ) {\r\n\t\t\t\t\t// Retrieve optional set title\r\n\t\t\t\t\t$number = $lookup[$id]['params'][0]['number'];\r\n\t\t\t\t\t$option_name = $lookup[$id]['callback'][0]->option_name;\r\n\t\t\t\t\t$option = get_option($option_name);\r\n\t\t\t\t\tif (! empty($option[$number]['title']) ) {\r\n\t\t\t\t\t\t$name .= ': <span class=\"in-widget-title\">' . $option[$number]['title'] . '</span>';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$name = NULL;\r\n\t\t\t}\r\n\r\n\t\t\treturn $name;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getOpt() Get SQL object of Opt\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param string $maintype Name of the module\r\n\t\t * @param boolean $admin Admin page\r\n\t\t * @return object\r\n\t\t */\r\n\t\tpublic function getOpt($widget_id, $maintype, $admin = TRUE) {\r\n\t\t\t$opt = array();\r\n\r\n\t\t\tif ( $admin ) {\r\n\t\t\t\t$query = \"SELECT widget_id, maintype, name, value FROM \" . $this->dbtable . \"\r\n                  WHERE widget_id LIKE '\" . $widget_id . \"'\r\n                    AND maintype LIKE '\" . $maintype . \"%'\r\n                  ORDER BY maintype, name\";\r\n\r\n\t\t\t} else {\r\n\t\t\t\tif ( $maintype == 'home' ) {\r\n\t\t\t\t\t$maintype = 'page';\r\n\t\t\t\t}\r\n\t\t\t\t$query = \"SELECT widget_id, maintype, name, value FROM \" . $this->dbtable . \"\r\n                  WHERE widget_id LIKE '\" . $widget_id . \"'\r\n                    AND (maintype LIKE '\" . $maintype . \"%'\";\r\n\r\n\t\t\t\tif ( count($this->overrule_maintype) > 0 ) {\r\n\t\t\t\t\t$query .= \" OR maintype IN (\";\r\n\t\t\t\t\t$q = array();\r\n\t\t\t\t\tforeach ( $this->overrule_maintype as $omt ) {\r\n\t\t\t\t\t\t$q[ ] = \"'\" . $omt . \"'\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$query .= implode(', ', $q);\r\n\t\t\t\t\t$query .= \")\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$query .= \") ORDER BY maintype, name\";\r\n\t\t\t}\r\n\t\t\t$this->message('Q: ' . $query);\r\n\r\n\t\t\t$results = $this->wpdb->get_results($query);\r\n\t\t\treturn $results;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getPostCatParents() Gets parents from post category\r\n\t\t *\r\n\t\t * @param array $post_category Categories\r\n\t\t * @return array\r\n\t\t */\r\n\t\tpublic function getPostCatParents($post_category) {\r\n\t\t\t// Getting all parents from the categories this post is in\r\n\t\t\t$parents = array();\r\n\t\t\tforeach ( $post_category as $id ) {\r\n\t\t\t\t$tp = $this->getTaxParents('category', array(), $id);\r\n\t\t\t\t// Now checking if the parent is already known\r\n\t\t\t\tforeach ( $tp as $p ) {\r\n\t\t\t\t\tif (! in_array($p, $parents) ) {\r\n\t\t\t\t\t\t$parents[ ] = $p;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn $parents;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getParents() Gets parents from posts or pages\r\n\t\t *\r\n\t\t * @param string $type Type\r\n\t\t * @param array $arr\r\n\t\t * @param integer $id Child ID\r\n\t\t * @return array\r\n\t\t */\r\n\t\tpublic function getParents($type, $arr, $id) {\r\n\t\t\tif ( $type == 'page' ) {\r\n\t\t\t\t$obj = get_page($id);\r\n\t\t\t} else {\r\n\t\t\t\t$obj = get_post($id);\r\n\t\t\t}\r\n\r\n\t\t\tif ( $obj->post_parent > 0 ) {\r\n\t\t\t\t$arr[ ] = $obj->post_parent;\r\n\t\t\t\t$a = &$arr;\r\n\t\t\t\t$a = $this->getParents($type, $a, $obj->post_parent);\r\n\t\t\t}\r\n\r\n\t\t\treturn $arr;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getTaxParents() Get parents for Taxonomy\r\n\t\t *\r\n\t\t * @param string $tax_name Taxonomy name\r\n\t\t * @param array $arr\r\n\t\t * @param integer $id Child ID\r\n\t\t * @return array\r\n\t\t */\r\n\t\tpublic function getTaxParents($tax_name, $arr, $id) {\r\n\t\t\t$obj = get_term_by('id', $id, $tax_name);\r\n\r\n\t\t\tif ( $obj->parent > 0 ) {\r\n\t\t\t\t$arr[ ] = $obj->parent;\r\n\t\t\t\t$a = &$arr;\r\n\t\t\t\t$a = $this->getTaxParents($tax_name, $a, $obj->parent);\r\n\t\t\t}\r\n\r\n\t\t\treturn $arr;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getURLPrefix() Gets the optional prefix this blog is under\r\n\t\t *\r\n\t\t * @return string\r\n\t\t */\r\n\t\tpublic function getURLPrefix() {\r\n\t\t\t$proto = ( is_ssl() ) ? 'https' : 'http';\r\n\t\t\t$name = ( isset($_SERVER['HTTP_HOST']) ) ? $_SERVER['HTTP_HOST'] : $_SERVER['SERVER_NAME'];\r\n\t\t\t$server = $proto . '://' . $name;\r\n\t\t\t$prefix = substr( home_url('/'), strlen($server) );\r\n\r\n\t\t\t// Apply filters\r\n\t\t\t$prefix = apply_filters('dynwid_urlprefix', $prefix);\r\n\r\n\t\t\tif ( $prefix != '/' ) {\r\n\t\t\t\t$prefix = substr($prefix, 0, strlen($prefix) - 1 );\r\n\t\t\t\treturn $prefix;\r\n\t\t\t}\r\n\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::hasOptions() Checks if a widget has options set\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @return boolean\r\n\t\t */\r\n\t\tpublic function hasOptions($widget_id) {\r\n\t\t\t$query = \"SELECT COUNT(1) AS total FROM \" . $this->dbtable . \"\r\n                  WHERE widget_id = '\" . $widget_id . \"' AND\r\n                        maintype != 'individual'\";\r\n\t\t\t$count = $this->wpdb->get_var($query);\r\n\r\n\t\t\tif ( $count > 0 ) {\r\n\t\t\t\treturn TRUE;\r\n\t\t\t}\r\n\r\n\t\t\treturn FALSE;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::housekeeping() Housekeeping\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function housekeeping() {\r\n\t\t\t$widgets = array_keys($this->registered_widgets);\r\n\r\n\t\t\t$query = \"SELECT DISTINCT widget_id FROM \" . $this->dbtable;\r\n\t\t\t$results = $this->wpdb->get_results($query);\r\n\t\t\tforeach ( $results as $myrow ) {\r\n\t\t\t\tif (! in_array($myrow->widget_id, $widgets) ) {\r\n\t\t\t\t\t$this->resetOptions($myrow->widget_id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::IPinRange() IP address in range\r\n\t\t *\r\n\t\t * @param $ip string IP address\r\n\t\t * @param $range string IP range\r\n\t\t * @return boolean\r\n\t\t */\r\n\t\tpublic function IPinRange($ip, $range) {\r\n\t\t /* Copyright 2008: Paul Gregg <pgregg@pgregg.com>\r\n\t\t  * 10 January 2008\r\n\t\t  * Version: 1.2\r\n\t\t  *\r\n\t\t  * Source website: http://www.pgregg.com/projects/php/ip_in_range/\r\n\t\t  * Version 1.2\r\n\t\t  */\r\n\r\n\t\t  if ( strpos($range, '/') !== FALSE ) {\r\n\t\t\t\t// $range is in IP/NETMASK format\r\n\t\t\t\tlist($range, $netmask) = explode('/', $range, 2);\r\n\r\n\t\t\t\tif ( strpos($netmask, '.') !== FALSE ) {\r\n\t\t\t\t  // $netmask is a 255.255.0.0 format\r\n\t\t\t\t  $netmask = str_replace('*', '0', $netmask);\r\n\t\t\t\t  $netmask_dec = ip2long($netmask);\r\n\r\n\t\t\t\t  return ( (ip2long($ip) & $netmask_dec) == (ip2long($range) & $netmask_dec) );\r\n\t\t\t\t} else {\r\n\t\t\t\t  // $netmask is a CIDR size block\r\n\t\t\t\t  // fix the range argument\r\n\t\t\t\t  $x = explode('.', $range);\r\n\t\t\t\t  while ( count($x) < 4 ) {\r\n\t\t\t\t\t\t$x[ ] = '0';\r\n\t\t\t\t  }\r\n\r\n\t\t\t\t  list( $a, $b, $c, $d ) = $x;\r\n\t\t\t\t  $range = sprintf( \"%u.%u.%u.%u\", empty($a) ? '0' : $a, empty($b) ? '0' : $b, empty($c) ? '0' : $c, empty($d) ? '0' : $d );\r\n\t\t\t\t  $range_dec = ip2long($range);\r\n\t\t\t\t  $ip_dec = ip2long($ip);\r\n\r\n\t\t\t\t  // Use math to create it\r\n\t\t\t\t  $wildcard_dec = pow( 2, (32-$netmask) ) - 1;\r\n\t\t\t\t  $netmask_dec = ~ $wildcard_dec;\r\n\r\n\t\t\t\t  return ( ($ip_dec & $netmask_dec) == ($range_dec & $netmask_dec) );\r\n\t\t\t\t}\r\n\t\t  } else {\r\n\t\t\t\t// range might be 255.255.*.* or 1.2.3.0-1.2.3.255\r\n\t\t\t\tif ( strpos($range, '*') !== FALSE ) { // a.b.*.* format\r\n\t\t\t\t  // Just convert to A-B format by setting * to 0 for A and 255 for B\r\n\t\t\t\t  $lower = str_replace('*', '0', $range);\r\n\t\t\t\t  $upper = str_replace('*', '255', $range);\r\n\t\t\t\t  $range = \"$lower-$upper\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( strpos($range, '-') !== FALSE ) { // A-B format\r\n\t\t\t\t  list( $lower, $upper ) = explode('-', $range, 2);\r\n\t\t\t\t  $lower_dec = (float) sprintf( \"%u\", ip2long($lower) );\r\n\t\t\t\t  $upper_dec = (float) sprintf( \"%u\", ip2long($upper) );\r\n\t\t\t\t  $ip_dec = (float) sprintf( \"%u\",ip2long($ip) );\r\n\t\t\t\t  return ( ($ip_dec >= $lower_dec) && ($ip_dec <= $upper_dec) );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// last resort\r\n\t\t\t\tif ( substr($range, -3) != '/32' ) {\r\n\t\t\t\t\t$range .= '/32';\r\n\t\t\t\t\treturn $this->IPinRange($ip, $range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$this->message('Range argument is not in 1.2.3.4/24 or 1.2.3.4/255.255.255.0 format');\r\n\t\t\t\treturn FALSE;\r\n\t\t  }\r\n\r\n\t\t}\r\n\t\t/**\r\n\t\t * dynWid::loadModules() Full load of all modules\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function loadModules() {\r\n\t\t\t$dh = opendir(DW_MODULES);\r\n\t\t\twhile ( ($file = readdir($dh)) !== FALSE) {\r\n\t\t\t\tif ( $file != '.' && $file != '..' && substr(strrchr($file, '_'), 1) == 'module.php' ) {\r\n\t\t\t\t\tinclude_once(DW_MODULES . $file);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::log() Write text to debug log\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function log($text) {\r\n\t\t\tif ( WP_DEBUG && DW_DEBUG ) {\r\n\t\t\t\terror_log($text);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::message() Debug message\r\n\t\t *\r\n\t\t * @param string $text\r\n\t\t */\r\n\t\tpublic function message($text) {\r\n\t\t\tif ( DW_DEBUG ) {\r\n\t\t\t\tif ( $this->firstmessage ) {\r\n\t\t\t\t\techo \"\\n\";\r\n\t\t\t\t\t$this->firstmessage = FALSE;\r\n\t\t\t\t}\r\n\t\t\t\techo '<!-- ' . $text . ' //-->';\r\n\t\t\t\techo \"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::registerOverrulers() Overrule module regsitering\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function registerOverrulers() {\r\n\t\t\tinclude_once(DW_MODULES . 'browser_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'date_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'day_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'week_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'role_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'shortcode_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'tpl_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'url_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'device_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'ip_module.php');\r\n\r\n\t\t\tDW_Browser::checkOverrule('DW_Browser');\r\n\t\t\tDW_Date::checkOverrule('DW_Date');\r\n\t\t\tDW_Day::checkOverrule('DW_Day');\r\n\t\t\tDW_Week::checkOverrule('DW_Week');\r\n\t\t\tDW_Role::checkOverrule('DW_Role');\r\n\t\t\tDW_Shortcode::checkOverrule('DW_Shortcode');\r\n\t\t\tDW_Tpl::checkOverrule('DW_Tpl');\r\n\t\t\tDW_URL::checkOverrule('DW_URL');\r\n\t\t\tDW_URL::checkOverrule('DW_Device');\r\n\t\t\tDW_URL::checkOverrule('DW_IP');\r\n\r\n\t\t\t// WPML Plugin Support\r\n\t\t\tinclude_once(DW_MODULES . 'wpml_module.php');\r\n\t\t\tDW_WPML::detectLanguage();\r\n\r\n\t\t\t// QT Plugin Support\r\n\t\t\tinclude_once(DW_MODULES . 'qt_module.php');\r\n\t\t\tDW_QT::detectLanguage();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::resetOptions() Full reset (remove) of options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t */\r\n\t\tpublic function resetOptions($widget_id) {\r\n\t\t\t$query = \"DELETE FROM \" . $this->dbtable . \" WHERE widget_id = '\" . $widget_id . \"'\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t}\r\n\t}\r\n?>"], "fixing_code": ["<?php\r\n/**\r\n * dynWid class\r\n *\r\n * @version $Id$\r\n * @copyright 2011 Jacco Drabbe\r\n */\r\n\r\n\tdefined('ABSPATH') or die(\"No script kiddies please!\");\r\n\r\n\tclass dynWid {\r\n\t\tprivate $dbtable;\r\n\t\tpublic  $device;\r\n\t\tpublic  $dwoptions = array();\r\n\t\tpublic  $dynwid_list;\r\n\t\tpublic  $enabled;\r\n\t\tprivate $firstmessage = TRUE;\r\n\t\tpublic\t$ip_address;\r\n\t\tpublic  $listmade = FALSE;\r\n\t\tpublic  $overrule_maintype = array();\r\n\t\tprivate $registered_sidebars;\r\n\t\tpublic  $registered_widget_controls;\r\n\t\tpublic  $registered_widgets;\r\n\t\tpublic  $removelist = array();\r\n\t\tpublic  $sidebars;\r\n\t\tpublic  $template;\r\n\t\tpublic  $url;\r\n\t\tpublic  $plugin_url;\r\n\t\tpublic  $useragent;\r\n\t\tpublic  $userrole;\r\n\t\tpublic  $whereami;\r\n\t\tprivate $wpdb;\r\n\r\n\t\t/**\r\n\t\t * dynWid::__construct() Master class\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function __construct() {\r\n\t\t\tglobal $wpdb;\r\n\r\n\t\t\tif ( is_user_logged_in() ) {\r\n\t\t\t\t$this->userrole = $GLOBALS['current_user']->roles;\r\n\t\t\t} else {\r\n\t\t\t\t$this->userrole = array('anonymous');\r\n\t\t\t}\r\n\r\n\t\t\t$this->registered_sidebars = $GLOBALS['wp_registered_sidebars'];\r\n\t\t\t$this->registered_widget_controls = &$GLOBALS['wp_registered_widget_controls'];\r\n\t\t\t$this->registered_widgets = &$GLOBALS['wp_registered_widgets'];\r\n\t\t\t$this->sidebars = wp_get_sidebars_widgets();\r\n\t\t\t$this->useragent = $this->getBrowser();\r\n\t\t\t$this->ip_address = $this->getIP();\r\n\r\n\t\t\t// DB init\r\n\t\t\t$this->wpdb = $wpdb;\r\n\t\t\t$this->dbtable = $this->wpdb->prefix . DW_DB_TABLE;\r\n\t\t\t$query = \"SHOW TABLES LIKE '\" . $this->dbtable . \"'\";\r\n\t\t\t$result = $this->wpdb->get_var($query);\r\n\r\n\t\t\t$this->enabled = ( is_null($result) ) ? FALSE : TRUE;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::__get() Overload get\r\n\t\t *\r\n\t\t * @param string $name\r\n\t\t * @return mixed\r\n\t\t */\r\n\t\tpublic function __get($name) {\r\n\t\t\treturn $this->$name;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::__isset() Overload isset\r\n\t\t *\r\n\t\t * @param mixed $name\r\n\t\t * @return boolean\r\n\t\t */\r\n\t\tpublic function __isset($name) {\r\n\t\t\tif ( isset($this->$name) ) {\r\n\t\t\t\treturn TRUE;\r\n\t\t\t}\r\n\t\t\treturn FALSE;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::__set() Overload set\r\n\t\t *\r\n\t\t * @param string $name\r\n\t\t * @param mixed $value\r\n\t\t */\r\n\t\tpublic function __set($name, $value) {\r\n\t\t\t$this->$name = $value;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addChilds() Save child options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param string $maintype Name of module\r\n\t\t * @param string $default Default module setting\r\n\t\t * @param array $act Parent options\r\n\t\t * @param array $childs Options\r\n\t\t */\r\n\t\tpublic function addChilds($widget_id, $maintype, $default, $act, $childs) {\r\n\t\t\t$child_act = array();\r\n\t\t\tforeach ( $childs as $opt ) {\r\n\t\t\t\tif ( in_array($opt, $act) ) {\r\n\t\t\t\t\t$childs_act[ ] = $opt;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$this->addMultiOption($widget_id, $maintype, $default, $childs_act);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addDate() Saves date options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param array $dates Dates\r\n\t\t */\r\n\t\tpublic function addDate($widget_id, $dates) {\r\n\t\t\t$fields = array(\r\n\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t'maintype'\t\t=> 'date',\r\n\t\t\t\t'name'\t\t\t=> 'default',\r\n\t\t\t\t'value'\t\t\t=> '0'\r\n\t\t\t);\r\n\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t/*\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                    (widget_id, maintype, name, value)\r\n                  VALUES\r\n                    ('\" . $widget_id . \"', 'date', 'default', '0')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t\t*/\r\n\r\n\t\t\tforeach ( $dates as $name => $date ) {\r\n\t\t\t\t$fields = array(\r\n\t\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t\t'maintype'\t\t=> 'date',\r\n\t\t\t\t\t'name'\t\t\t=> $name,\r\n\t\t\t\t\t'value'\t\t\t=> $date\r\n\t\t\t\t);\r\n\t\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                    (widget_id, maintype, name, value)\r\n                  VALUES\r\n                    ('\" . esc_sql($widget_id) . \"', 'date', '\" . esc_sql($name) . \"', '\" . esc_sql($date) . \"')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n         * dynWid::addIPs() Saves IP options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param array $default Default setting\r\n\t\t * @param string $ips IPs\r\n\t\t */\r\n\t\tpublic function addIPs($widget_id, $default, $ips) {\r\n\t\t\t$value = serialize($ips);\r\n\r\n\t\t\tif ( $default == 'no' ) {\r\n\t\t\t\t$fields = array(\r\n\t\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t\t'maintype'\t\t=> 'ip',\r\n\t\t\t\t\t'name'\t\t\t=> 'default',\r\n\t\t\t\t\t'value'\t\t\t=> '0'\r\n\t\t\t\t);\r\n\t\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'ip', 'default', '0')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\r\n\t\t\t$fields = array(\r\n\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t'maintype'\t\t=> 'ip',\r\n\t\t\t\t'name'\t\t\t=> 'ip',\r\n\t\t\t\t'value'\t\t\t=> $value\r\n\t\t\t);\r\n\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t/*\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'ip', 'ip', '\" . $value . \"')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t\t*/\r\n\t\t}\r\n\r\n\t\tpublic function addShortcode($widget_id, $default, $value, $match, $operator) {\r\n\t\t\t$value = array( 'value' => $value, 'match' => $match, 'operator' => $operator );\r\n\t\t\t$value = serialize($value);\r\n\r\n\t\t\tif ( $default == 'no' ) {\r\n\t\t\t\t$fields = array(\r\n\t\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t\t'maintype'\t\t=> 'shortcode',\r\n\t\t\t\t\t'name'\t\t\t=> 'default',\r\n\t\t\t\t\t'value'\t\t\t=> '0'\r\n\t\t\t\t);\r\n\t\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'shortcode', 'default', '0')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\r\n\t\t\t$fields = array(\r\n\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t'maintype'\t\t=> 'shortcode',\r\n\t\t\t\t'name'\t\t\t=> 'shortcode',\r\n\t\t\t\t'value'\t\t\t=> $value\r\n\t\t\t);\r\n\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t/*\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'shortcode', 'shortcode', '\" . $value . \"')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t\t*/\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addUrls() Saves url options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param array $default Default setting\r\n\t\t * @param string $urls URLs\r\n\t\t */\r\n\t\tpublic function addUrls($widget_id, $default, $urls) {\r\n\t\t\t$value = serialize($urls);\r\n\t\t\tif ( $default == 'no' ) {\r\n\t\t\t\t$fields = array(\r\n\t\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t\t'maintype'\t\t=> 'url',\r\n\t\t\t\t\t'name'\t\t\t=> 'default',\r\n\t\t\t\t\t'value'\t\t\t=> '0'\r\n\t\t\t\t);\r\n\t\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'url', 'default', '0')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\r\n\t\t\t$fields = array(\r\n\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t'maintype'\t\t=> 'url',\r\n\t\t\t\t'name'\t\t\t=> 'url',\r\n\t\t\t\t'value'\t\t\t=> $value\r\n\t\t\t);\r\n\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t/*\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n\t\t\t\t\t\t\t\t\t\t(widget_id, maintype, name, value)\r\n\t\t\t\t\t\t\t\t\tVALUES\r\n\t\t\t\t\t\t\t\t\t\t('\" . esc_sql($widget_id) . \"', 'url', 'url', '\" . $value . \"')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t\t*/\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addMultiOption() Save multi (complex) options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param string $maintype Name of the module\r\n\t\t * @param string $default Default setting\r\n\t\t * @param array $act Options\r\n\t\t */\r\n\t\tpublic function addMultiOption($widget_id, $maintype, $default, $act = array()) {\r\n\t\t\t$insert = TRUE;\r\n\r\n\t\t\tif ( $default == 'no' ) {\r\n\t\t\t\t$opt_default = '0';\r\n\t\t\t\t$opt_act = '1';\r\n\t\t\t} else {\r\n\t\t\t\t$opt_default = '1';\r\n\t\t\t\t$opt_act = '0';\r\n\t\t\t}\r\n\r\n\t\t\t// Check single-post or single-option coming from posts or tags screen to prevent database polution\r\n\t\t\t$types = array();\r\n\t\t\t$args = array(\r\n\t\t\t\t\t\t\t\t'public'   => TRUE,\r\n\t\t\t\t\t\t\t\t'_builtin' => FALSE\r\n\t\t\t\t\t\t\t);\r\n\t\t\t$post_types = get_post_types($args, 'objects', 'and');\r\n\t\t\tforeach ( array_keys($post_types) as $t ){\r\n\t\t\t\t$types[ ] = $t . '-post';\r\n\t\t\t}\r\n\t\t\t$post_types = array_merge( $types, array('single-post', 'single-tag') );\r\n\r\n\t\t\tif ( in_array($maintype, $post_types) ) {\r\n\t\t\t\t$query = \"SELECT COUNT(1) AS total FROM \" . $this->dbtable . \" WHERE widget_id = %s AND maintype = %s AND name = %s\";\r\n\t\t\t\t$query = $this->wpdb->prepare($query, $widget_id, $maintype, 'default');\r\n\t\t\t\t$count = $this->wpdb->get_var($query);\r\n\t\t\t\tif ( $count > 0 ) {\r\n\t\t\t\t\t$insert = FALSE;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( $insert ) {\r\n\t\t\t\t$fields = array(\r\n\t\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t\t'maintype'\t\t=> $maintype,\r\n\t\t\t\t\t'name'\t\t\t=> 'default',\r\n\t\t\t\t\t'value'\t\t\t=> $opt_default\r\n\t\t\t\t);\r\n\t\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                      (widget_id, maintype, name, value)\r\n                    VALUES\r\n                      ('\" . esc_sql($widget_id) . \"', '\" . esc_sql($maintype) . \"', 'default', '\" . esc_sql($opt_default) . \"')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\t\t\tforeach ( $act as $option ) {\r\n\t\t\t\t$fields = array(\r\n\t\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t\t'maintype'\t\t=> $maintype,\r\n\t\t\t\t\t'name'\t\t\t=> $option,\r\n\t\t\t\t\t'value'\t\t\t=> $opt_act\r\n\t\t\t\t);\r\n\t\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                      (widget_id, maintype, name, value)\r\n                    VALUES\r\n                      ('\" . esc_sql($widget_id) . \"', '\" . esc_sql($maintype) . \"', '\" . esc_sql($option) . \"', '\" . esc_sql($opt_act) . \"')\";\r\n\t\t\t\t$this->wpdb->query($query);\r\n\t\t\t\t*/\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::addSingleOption() Save single (simple) options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param string $maintype Name of the module\r\n\t\t * @param integer $value Default setting\r\n\t\t */\r\n\t\tpublic function addSingleOption($widget_id, $maintype, $value = '0') {\r\n\t\t\t$fields = array(\r\n\t\t\t\t'widget_id'\t\t=> $widget_id,\r\n\t\t\t\t'maintype'\t\t=> $maintype,\r\n\t\t\t\t'value'\t\t\t=> $value\r\n\t\t\t);\r\n\t\t\t$this->wpdb->insert($this->dbtable, $fields);\r\n\r\n\t\t\t/*\r\n\t\t\t$query = \"INSERT INTO \" . $this->dbtable . \"\r\n                    (widget_id, maintype, value)\r\n                  VALUES\r\n                    ('\" . esc_sql($widget_id) . \"', '\" . esc_sql($maintype) . \"', '\" . esc_sql($value) . \"')\";\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t\t*/\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::checkWPhead() Checks for wp_head()\r\n\t\t *\r\n\t\t * @return integer\r\n\t\t */\r\n\t\tpublic function checkWPhead() {\r\n\t\t\t$ct = current_theme_info();\r\n\t\t\t$headerfile = $ct->template_dir . '/header.php';\r\n\t\t\tif ( file_exists($headerfile) ) {\r\n\t\t\t\t$buffer = file_get_contents($headerfile);\r\n\t\t\t\tif ( strpos($buffer, 'wp_head()') ) {\r\n\t\t\t\t\t// wp_head() found\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wp_head() not found\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// wp_head() unable to determine\r\n\t\t\t\treturn 2;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::createList() Creates full list of options\r\n\t\t *\r\n\t\t */\r\n\t\tprivate function createList() {\r\n\t\t\t$this->dynwid_list = array();\r\n\r\n\t\t\tforeach ( $this->sidebars as $sidebar_id => $widgets ) {\r\n\t\t\t\tif ( count($widgets) > 0 ) {\r\n\t\t\t\t\tforeach ( $widgets as $widget_id ) {\r\n\t\t\t\t\t\tif ( $this->hasOptions($widget_id) ) {\r\n\t\t\t\t\t\t\t$this->dynwid_list[ ] = $widget_id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} // END foreach widgets\r\n\t\t\t\t}\r\n\t\t\t} // END foreach sidebars\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::deleteOption() Removes option\r\n\t\t *\r\n\t\t * @param string $widget_id ID of widget\r\n\t\t * @param string $maintype Name of module\r\n\t\t * @param string $name Name of option\r\n\t\t */\r\n\t\tpublic function deleteOption($widget_id, $maintype, $name = '') {\r\n\t\t\t$query = \"DELETE FROM \" . $this->dbtable . \" WHERE widget_id = %s AND maintype = %s\";\r\n\t\t\tif (! empty($name) ) {\r\n\t\t\t\t$query .= \" AND name = %s\";\r\n\t\t\t\t$query = $this->wpdb->prepare($query, $widget_id, $maintype, $name);\r\n\t\t\t} else {\r\n\t\t\t\t$query = $this->wpdb->prepare($query, $widget_id, $maintype);\r\n\t\t\t}\r\n\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::detectPage() Page detection\r\n\t\t *\r\n\t\t * @return string\r\n\t\t */\r\n\t\tpublic function detectPage() {\r\n\t\t\t// First we register the Path URL\r\n\t\t\t$this->url = $_SERVER['REQUEST_URI'];\r\n\r\n\t\t\tif ( is_front_page() && get_option('show_on_front') == 'posts' ) {\r\n\t\t\t\treturn 'front-page';\r\n\t\t\t} else if ( is_home() && get_option('show_on_front') == 'page' ) {\r\n\t\t\t\treturn 'front-page';\r\n\t\t\t} else if ( is_attachment() ) {\r\n\t\t\t\treturn 'attachment';\t\t\t\t\t// must be before is_single(), otherwise detects as 'single'\r\n\t\t\t} else if ( is_single() ) {\r\n\t\t\t\treturn 'single';\r\n\t\t\t} else if ( is_page() ) {\r\n\t\t\t\treturn 'page';\r\n\t\t\t} else if ( is_author() ) {\r\n\t\t\t\treturn 'author';\r\n\t\t\t} else if ( is_category() ) {\r\n\t\t\t\treturn 'category';\r\n\t\t\t} else if ( is_tag() ) {\r\n\t\t\t\treturn 'tag';\r\n\t\t\t} else if ( function_exists('is_post_type_archive') && is_post_type_archive() ) {\r\n\t\t\t\treturn 'cp_archive';\t\t\t\t// must be before is_archive(), otherwise detects as 'archive' in WP 3.1.0\r\n\t\t\t} else if ( function_exists('is_tax') && is_tax() ) {\r\n\t\t\t\treturn 'tax_archive';\r\n\t\t\t} else if ( is_archive() && ! is_category() && ! is_author() && ! is_tag() ) {\r\n\t\t\t\treturn 'archive';\r\n\t\t\t} else if ( function_exists('bbp_is_single_user') && (bbp_is_single_user() || bbp_is_single_user_edit()) ) {\t// must be before is_404(), otherwise bbPress profile page is detected as 'e404'.\r\n\t\t\t\treturn 'bbp_profile';\r\n\t\t\t} else if ( is_404() ) {\r\n\t\t\t\treturn 'e404';\r\n\t\t\t} else if ( is_search() ) {\r\n\t\t\t\treturn 'search';\r\n\t\t\t} else if ( function_exists('is_pod_page') && is_pod_page() ) {\r\n\t\t\t\treturn 'pods';\r\n\t\t\t} else {\r\n\t\t\t\treturn 'undef';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::dump() Dump file creation\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function dump() {\r\n\t\t\techo \"wp version: \" . $GLOBALS['wp_version'] . \"\\n\";\r\n\t\t\techo \"wp_head: \" . $this->checkWPhead() . \"\\n\";\r\n\t\t\techo \"dw version: \" . DW_VERSION . \"\\n\";\r\n\t\t\techo \"php version: \" . PHP_VERSION . \"\\n\";\r\n\t\t\techo \"\\n\";\r\n\t\t\techo \"front: \" . get_option('show_on_front') . \"\\n\";\r\n\t\t\tif ( get_option('show_on_front') == 'page' ) {\r\n\t\t\t\techo \"front page: \" . get_option('page_on_front') . \"\\n\";\r\n\t\t\t\techo \"posts page: \" . get_option('page_for_posts') . \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\techo \"\\n\";\r\n\t\t\techo \"list: \\n\";\r\n\t\t\t$list = array();\r\n\t\t\t$this->createList();\r\n\t\t\tforeach ( $this->dynwid_list as $widget_id ) {\r\n\t\t\t\t$list[$widget_id] = strip_tags($this->getName($widget_id));\r\n\t\t\t}\r\n\t\t\tprint_r($list);\r\n\r\n\t\t\techo \"wp_registered_widgets: \\n\";\r\n\t\t\tprint_r($this->registered_widgets);\r\n\r\n\t\t\techo \"options: \\n\";\r\n\t\t\tprint_r( $this->getOpt('%', NULL) );\r\n\r\n\t\t\techo \"\\n\";\r\n\t\t\techo serialize($this->getOpt('%', NULL));\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::dumpOpt() Debug dump option\r\n\t\t *\r\n\t\t * @param object $opt\r\n\t\t */\r\n\t\tpublic function dumpOpt($opt) {\r\n\t\t\tif ( DW_DEBUG && count($opt) > 0 ) {\r\n\t\t\t\tvar_dump($opt);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// replacement for createList() to make the worker faster\r\n\t\t/**\r\n\t\t * dynWid::dwList() Option list creation\r\n\t\t *\r\n\t\t * @param string $whereami Page\r\n\t\t */\r\n\t\tpublic function dwList($whereami) {\r\n\t\t\t$this->dynwid_list = array();\r\n\t\t\tif ( $whereami == 'home' ) {\r\n\t\t\t\t$whereami = 'page';\r\n\t\t\t}\r\n\r\n\t\t\t$query = \"SELECT DISTINCT widget_id FROM \" . $this->dbtable . \"\r\n                     WHERE  maintype LIKE '\" . esc_sql($whereami) . \"%'\";\r\n\r\n\t\t\tif ( count($this->overrule_maintype) > 0 ) {\r\n\t\t\t\t$query .= \" OR maintype IN \";\r\n\t\t\t\t$q = array();\r\n\t\t\t\tforeach ( $this->overrule_maintype as $omt ) {\r\n\t\t\t\t\t$q[ ] = \"'\" . $omt . \"'\";\r\n\t\t\t\t}\r\n\t\t\t\t$query .= \"(\" . implode(', ', $q) . \")\";\r\n\t\t\t}\r\n\r\n\t\t\t$results = $this->wpdb->get_results($query);\r\n\t\t\tforeach ( $results as $myrow ) {\r\n\t\t\t\t$this->dynwid_list[ ] = $myrow->widget_id;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getBrowser() Browser detection\r\n\t\t *\r\n\t\t * @return string\r\n\t\t */\r\n\t\tprivate function getBrowser() {\r\n\t\t\tglobal $is_gecko, $is_IE, $is_opera, $is_NS4, $is_safari, $is_chrome;\r\n\r\n\t\t\tif ( $is_gecko ) {\r\n\t\t\t\treturn 'gecko';\r\n\t\t\t} else if ( $is_IE ) {\r\n\t\t\t\tif ( strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE 6.') !== FALSE ) {\r\n\t\t\t\t\treturn 'msie6';\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 'msie';\r\n\t\t\t\t}\r\n\t\t\t} else if ( $is_opera ) {\r\n\t\t\t\treturn 'opera';\r\n\t\t\t} else if ( $is_NS4 ) {\r\n\t\t\t\treturn 'ns';\r\n\t\t\t} else if ( $is_safari ) {\r\n\t\t\t\treturn 'safari';\r\n\t\t\t} else if ( $is_chrome ) {\r\n\t\t\t\treturn 'chrome';\r\n\t\t\t} else {\r\n\t\t\t\treturn 'undef';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getDWOpt() Gets SQL object used in DWOpts\r\n\t\t *\r\n\t\t * @param string $widget_id ID of widget\r\n\t\t * @param string $maintype Name of module\r\n\t\t * @return object\r\n\t\t */\r\n\t\tpublic function getDWOpt($widget_id, $maintype) {\r\n\t\t\tif ( $maintype == 'home' ) {\r\n\t\t\t\t$maintype = 'page';\r\n\t\t\t}\r\n\r\n\t\t\t$query = \"SELECT widget_id, maintype, name, value FROM \" . $this->dbtable . \"\r\n                 WHERE widget_id LIKE '\" . esc_sql($widget_id) . \"'\r\n                   AND maintype LIKE '\" . esc_sql($maintype) . \"%'\r\n                 ORDER BY maintype, name\";\r\n\t\t\t$results = new DWOpts($this->wpdb->get_results($query), $maintype);\r\n\t\t\treturn $results;\r\n\t\t}\r\n\r\n\t\tprivate function getIP() {\r\n\t\t\t$ip = $_SERVER['REMOTE_ADDR'];\r\n\t\t\t$this->message( 'Raw IP: ' . $ip );\r\n\r\n\t\t\treturn ( strstr($ip, '.') !== FALSE ) ? $ip : NULL;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getModuleName() Full registration of the modules\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function getModuleName() {\r\n\t\t\t$dwoptions = array();\r\n\t\t\t// I NEED PHP > 5.3!!\r\n\r\n\t\t\tDWModule::registerOption(DW_Archive::$option);\r\n\t\t\tDWModule::registerOption(DW_Attachment::$option);\r\n\t\t\tDWModule::registerOption(DW_Author::$option);\r\n\t\t\tDWModule::registerOption(DW_bbPress::$option);\r\n\t\t\tDWModule::registerOption(DW_BP::$option);\r\n\t\t\tDWModule::registerOption(DW_Browser::$option);\r\n\t\t\tDWModule::registerOption(DW_IP::$option);\r\n\t\t\tDWModule::registerOption(DW_Category::$option);\r\n\t\t\tDW_CustomPost::registerOption(NULL);\r\n\t\t\tDWModule::registerOption(DW_Date::$option);\r\n\t\t\tDWModule::registerOption(DW_Day::$option);\r\n\t\t\tDWModule::registerOption(DW_E404::$option);\r\n\t\t\tDWModule::registerOption(DW_Front_page::$option);\r\n\t\t\tDWModule::registerOption(DW_Device::$option);\r\n\t\t\tDWModule::registerOption(DW_Page::$option);\r\n\t\t\tDWModule::registerOption(DW_Pods::$option);\r\n\t\t\tDWModule::registerOption(DW_QT::$option);\r\n\t\t\tDWModule::registerOption(DW_Role::$option);\r\n\t\t\tDWModule::registerOption(DW_Search::$option);\r\n\t\t\tDWModule::registerOption(DW_Shortcode::$option);\r\n\t\t\tDWModule::registerOption(DW_Single::$option);\r\n\t\t\tDWModule::registerOption(DW_Tag::$option);\r\n\t\t\tDWModule::registerOption(DW_Tpl::$option);\r\n\t\t\tDWModule::registerOption(DW_URL::$option);\r\n\t\t\tDWModule::registerOption(DW_Week::$option);\r\n\t\t\tDWModule::registerOption(DW_WPSC::$option);\r\n\t\t\tDWModule::registerOption(DW_WPML::$option);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getName() Gets the lookup name\r\n\t\t *\r\n\t\t * @return string\r\n\t\t */\r\n\t\tpublic function getName($id, $type = 'W') {\r\n\t\t\tswitch ( $type ) {\r\n\t\t\t\tcase 'S':\r\n\t\t\t\t\t$lookup = $this->registered_sidebars;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t$lookup = $this->registered_widgets;\r\n\t\t\t\t\t// end default\r\n\t\t\t}\r\n\r\n\t\t\tif ( isset($lookup[$id]['name']) ) {\r\n\t\t\t\t$name = $lookup[$id]['name'];\r\n\r\n\t\t\t\tif ( $type == 'W' && isset($lookup[$id]['params'][0]['number']) ) {\r\n\t\t\t\t\t// Retrieve optional set title\r\n\t\t\t\t\t$number = $lookup[$id]['params'][0]['number'];\r\n\t\t\t\t\t$option_name = $lookup[$id]['callback'][0]->option_name;\r\n\t\t\t\t\t$option = get_option($option_name);\r\n\t\t\t\t\tif (! empty($option[$number]['title']) ) {\r\n\t\t\t\t\t\t$name .= ': <span class=\"in-widget-title\">' . $option[$number]['title'] . '</span>';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t$name = NULL;\r\n\t\t\t}\r\n\r\n\t\t\treturn $name;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getOpt() Get SQL object of Opt\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @param string $maintype Name of the module\r\n\t\t * @param boolean $admin Admin page\r\n\t\t * @return object\r\n\t\t */\r\n\t\tpublic function getOpt($widget_id, $maintype, $admin = TRUE) {\r\n\t\t\t$opt = array();\r\n\r\n\t\t\tif ( $admin ) {\r\n\t\t\t\t$query = \"SELECT widget_id, maintype, name, value FROM \" . $this->dbtable . \"\r\n                  WHERE widget_id LIKE '\" . esc_sql($widget_id) . \"'\r\n                    AND maintype LIKE '\" . esc_sql($maintype) . \"%'\r\n                  ORDER BY maintype, name\";\r\n\r\n\t\t\t} else {\r\n\t\t\t\tif ( $maintype == 'home' ) {\r\n\t\t\t\t\t$maintype = 'page';\r\n\t\t\t\t}\r\n\t\t\t\t$query = \"SELECT widget_id, maintype, name, value FROM \" . $this->dbtable . \"\r\n                  WHERE widget_id LIKE '\" . esc_sql($widget_id) . \"'\r\n                    AND (maintype LIKE '\" . esc_sql($maintype) . \"%'\";\r\n\r\n\t\t\t\tif ( count($this->overrule_maintype) > 0 ) {\r\n\t\t\t\t\t$query .= \" OR maintype IN (\";\r\n\t\t\t\t\t$q = array();\r\n\t\t\t\t\tforeach ( $this->overrule_maintype as $omt ) {\r\n\t\t\t\t\t\t$q[ ] = \"'\" . esc_sql($omt) . \"'\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$query .= implode(', ', $q);\r\n\t\t\t\t\t$query .= \")\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$query .= \") ORDER BY maintype, name\";\r\n\t\t\t}\r\n\t\t\t$this->message('Q: ' . $query);\r\n\r\n\t\t\t$results = $this->wpdb->get_results($query);\r\n\t\t\treturn $results;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getPostCatParents() Gets parents from post category\r\n\t\t *\r\n\t\t * @param array $post_category Categories\r\n\t\t * @return array\r\n\t\t */\r\n\t\tpublic function getPostCatParents($post_category) {\r\n\t\t\t// Getting all parents from the categories this post is in\r\n\t\t\t$parents = array();\r\n\t\t\tforeach ( $post_category as $id ) {\r\n\t\t\t\t$tp = $this->getTaxParents('category', array(), $id);\r\n\t\t\t\t// Now checking if the parent is already known\r\n\t\t\t\tforeach ( $tp as $p ) {\r\n\t\t\t\t\tif (! in_array($p, $parents) ) {\r\n\t\t\t\t\t\t$parents[ ] = $p;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn $parents;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getParents() Gets parents from posts or pages\r\n\t\t *\r\n\t\t * @param string $type Type\r\n\t\t * @param array $arr\r\n\t\t * @param integer $id Child ID\r\n\t\t * @return array\r\n\t\t */\r\n\t\tpublic function getParents($type, $arr, $id) {\r\n\t\t\tif ( $type == 'page' ) {\r\n\t\t\t\t$obj = get_page($id);\r\n\t\t\t} else {\r\n\t\t\t\t$obj = get_post($id);\r\n\t\t\t}\r\n\r\n\t\t\tif ( $obj->post_parent > 0 ) {\r\n\t\t\t\t$arr[ ] = $obj->post_parent;\r\n\t\t\t\t$a = &$arr;\r\n\t\t\t\t$a = $this->getParents($type, $a, $obj->post_parent);\r\n\t\t\t}\r\n\r\n\t\t\treturn $arr;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getTaxParents() Get parents for Taxonomy\r\n\t\t *\r\n\t\t * @param string $tax_name Taxonomy name\r\n\t\t * @param array $arr\r\n\t\t * @param integer $id Child ID\r\n\t\t * @return array\r\n\t\t */\r\n\t\tpublic function getTaxParents($tax_name, $arr, $id) {\r\n\t\t\t$obj = get_term_by('id', $id, $tax_name);\r\n\r\n\t\t\tif ( $obj->parent > 0 ) {\r\n\t\t\t\t$arr[ ] = $obj->parent;\r\n\t\t\t\t$a = &$arr;\r\n\t\t\t\t$a = $this->getTaxParents($tax_name, $a, $obj->parent);\r\n\t\t\t}\r\n\r\n\t\t\treturn $arr;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::getURLPrefix() Gets the optional prefix this blog is under\r\n\t\t *\r\n\t\t * @return string\r\n\t\t */\r\n\t\tpublic function getURLPrefix() {\r\n\t\t\t$proto = ( is_ssl() ) ? 'https' : 'http';\r\n\t\t\t$name = ( isset($_SERVER['HTTP_HOST']) ) ? $_SERVER['HTTP_HOST'] : $_SERVER['SERVER_NAME'];\r\n\t\t\t$server = $proto . '://' . $name;\r\n\t\t\t$prefix = substr( home_url('/'), strlen($server) );\r\n\r\n\t\t\t// Apply filters\r\n\t\t\t$prefix = apply_filters('dynwid_urlprefix', $prefix);\r\n\r\n\t\t\tif ( $prefix != '/' ) {\r\n\t\t\t\t$prefix = substr($prefix, 0, strlen($prefix) - 1 );\r\n\t\t\t\treturn $prefix;\r\n\t\t\t}\r\n\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::hasOptions() Checks if a widget has options set\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t * @return boolean\r\n\t\t */\r\n\t\tpublic function hasOptions($widget_id) {\r\n\t\t\t$query = \"SELECT COUNT(1) AS total FROM \" . $this->dbtable . \"\r\n                  WHERE widget_id = %s AND\r\n                        maintype != %s\";\r\n\t\t\t$query = $this->wpdb->prepare($query, $widget_id, 'individual');\r\n\t\t\t$count = $this->wpdb->get_var($query);\r\n\r\n\t\t\tif ( $count > 0 ) {\r\n\t\t\t\treturn TRUE;\r\n\t\t\t}\r\n\r\n\t\t\treturn FALSE;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::housekeeping() Housekeeping\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function housekeeping() {\r\n\t\t\t$widgets = array_keys($this->registered_widgets);\r\n\r\n\t\t\t$query = \"SELECT DISTINCT widget_id FROM \" . $this->dbtable;\r\n\t\t\t$results = $this->wpdb->get_results($query);\r\n\t\t\tforeach ( $results as $myrow ) {\r\n\t\t\t\tif (! in_array($myrow->widget_id, $widgets) ) {\r\n\t\t\t\t\t$this->resetOptions($myrow->widget_id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::IPinRange() IP address in range\r\n\t\t *\r\n\t\t * @param $ip string IP address\r\n\t\t * @param $range string IP range\r\n\t\t * @return boolean\r\n\t\t */\r\n\t\tpublic function IPinRange($ip, $range) {\r\n\t\t /* Copyright 2008: Paul Gregg <pgregg@pgregg.com>\r\n\t\t  * 10 January 2008\r\n\t\t  * Version: 1.2\r\n\t\t  *\r\n\t\t  * Source website: http://www.pgregg.com/projects/php/ip_in_range/\r\n\t\t  * Version 1.2\r\n\t\t  */\r\n\r\n\t\t  if ( strpos($range, '/') !== FALSE ) {\r\n\t\t\t\t// $range is in IP/NETMASK format\r\n\t\t\t\tlist($range, $netmask) = explode('/', $range, 2);\r\n\r\n\t\t\t\tif ( strpos($netmask, '.') !== FALSE ) {\r\n\t\t\t\t  // $netmask is a 255.255.0.0 format\r\n\t\t\t\t  $netmask = str_replace('*', '0', $netmask);\r\n\t\t\t\t  $netmask_dec = ip2long($netmask);\r\n\r\n\t\t\t\t  return ( (ip2long($ip) & $netmask_dec) == (ip2long($range) & $netmask_dec) );\r\n\t\t\t\t} else {\r\n\t\t\t\t  // $netmask is a CIDR size block\r\n\t\t\t\t  // fix the range argument\r\n\t\t\t\t  $x = explode('.', $range);\r\n\t\t\t\t  while ( count($x) < 4 ) {\r\n\t\t\t\t\t\t$x[ ] = '0';\r\n\t\t\t\t  }\r\n\r\n\t\t\t\t  list( $a, $b, $c, $d ) = $x;\r\n\t\t\t\t  $range = sprintf( \"%u.%u.%u.%u\", empty($a) ? '0' : $a, empty($b) ? '0' : $b, empty($c) ? '0' : $c, empty($d) ? '0' : $d );\r\n\t\t\t\t  $range_dec = ip2long($range);\r\n\t\t\t\t  $ip_dec = ip2long($ip);\r\n\r\n\t\t\t\t  // Use math to create it\r\n\t\t\t\t  $wildcard_dec = pow( 2, (32-$netmask) ) - 1;\r\n\t\t\t\t  $netmask_dec = ~ $wildcard_dec;\r\n\r\n\t\t\t\t  return ( ($ip_dec & $netmask_dec) == ($range_dec & $netmask_dec) );\r\n\t\t\t\t}\r\n\t\t  } else {\r\n\t\t\t\t// range might be 255.255.*.* or 1.2.3.0-1.2.3.255\r\n\t\t\t\tif ( strpos($range, '*') !== FALSE ) { // a.b.*.* format\r\n\t\t\t\t  // Just convert to A-B format by setting * to 0 for A and 255 for B\r\n\t\t\t\t  $lower = str_replace('*', '0', $range);\r\n\t\t\t\t  $upper = str_replace('*', '255', $range);\r\n\t\t\t\t  $range = \"$lower-$upper\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( strpos($range, '-') !== FALSE ) { // A-B format\r\n\t\t\t\t  list( $lower, $upper ) = explode('-', $range, 2);\r\n\t\t\t\t  $lower_dec = (float) sprintf( \"%u\", ip2long($lower) );\r\n\t\t\t\t  $upper_dec = (float) sprintf( \"%u\", ip2long($upper) );\r\n\t\t\t\t  $ip_dec = (float) sprintf( \"%u\",ip2long($ip) );\r\n\t\t\t\t  return ( ($ip_dec >= $lower_dec) && ($ip_dec <= $upper_dec) );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// last resort\r\n\t\t\t\tif ( substr($range, -3) != '/32' ) {\r\n\t\t\t\t\t$range .= '/32';\r\n\t\t\t\t\treturn $this->IPinRange($ip, $range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$this->message('Range argument is not in 1.2.3.4/24 or 1.2.3.4/255.255.255.0 format');\r\n\t\t\t\treturn FALSE;\r\n\t\t  }\r\n\r\n\t\t}\r\n\t\t/**\r\n\t\t * dynWid::loadModules() Full load of all modules\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function loadModules() {\r\n\t\t\t$dh = opendir(DW_MODULES);\r\n\t\t\twhile ( ($file = readdir($dh)) !== FALSE) {\r\n\t\t\t\tif ( $file != '.' && $file != '..' && substr(strrchr($file, '_'), 1) == 'module.php' ) {\r\n\t\t\t\t\tinclude_once(DW_MODULES . $file);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::log() Write text to debug log\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function log($text) {\r\n\t\t\tif ( WP_DEBUG && DW_DEBUG ) {\r\n\t\t\t\terror_log($text);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::message() Debug message\r\n\t\t *\r\n\t\t * @param string $text\r\n\t\t */\r\n\t\tpublic function message($text) {\r\n\t\t\tif ( DW_DEBUG ) {\r\n\t\t\t\tif ( $this->firstmessage ) {\r\n\t\t\t\t\techo \"\\n\";\r\n\t\t\t\t\t$this->firstmessage = FALSE;\r\n\t\t\t\t}\r\n\t\t\t\techo '<!-- ' . $text . ' //-->';\r\n\t\t\t\techo \"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::registerOverrulers() Overrule module regsitering\r\n\t\t *\r\n\t\t */\r\n\t\tpublic function registerOverrulers() {\r\n\t\t\tinclude_once(DW_MODULES . 'browser_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'date_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'day_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'week_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'role_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'shortcode_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'tpl_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'url_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'device_module.php');\r\n\t\t\tinclude_once(DW_MODULES . 'ip_module.php');\r\n\r\n\t\t\tDW_Browser::checkOverrule('DW_Browser');\r\n\t\t\tDW_Date::checkOverrule('DW_Date');\r\n\t\t\tDW_Day::checkOverrule('DW_Day');\r\n\t\t\tDW_Week::checkOverrule('DW_Week');\r\n\t\t\tDW_Role::checkOverrule('DW_Role');\r\n\t\t\tDW_Shortcode::checkOverrule('DW_Shortcode');\r\n\t\t\tDW_Tpl::checkOverrule('DW_Tpl');\r\n\t\t\tDW_URL::checkOverrule('DW_URL');\r\n\t\t\tDW_URL::checkOverrule('DW_Device');\r\n\t\t\tDW_URL::checkOverrule('DW_IP');\r\n\r\n\t\t\t// WPML Plugin Support\r\n\t\t\tinclude_once(DW_MODULES . 'wpml_module.php');\r\n\t\t\tDW_WPML::detectLanguage();\r\n\r\n\t\t\t// QT Plugin Support\r\n\t\t\tinclude_once(DW_MODULES . 'qt_module.php');\r\n\t\t\tDW_QT::detectLanguage();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * dynWid::resetOptions() Full reset (remove) of options\r\n\t\t *\r\n\t\t * @param string $widget_id ID of the widget\r\n\t\t */\r\n\t\tpublic function resetOptions($widget_id) {\r\n\t\t\t$query = \"DELETE FROM \" . $this->dbtable . \" WHERE widget_id = %s\";\r\n\t\t\t$query = $this->wpdb->prepare($query, $widget_id);\r\n\t\t\t$this->wpdb->query($query);\r\n\t\t}\r\n\t}\r\n?>"], "filenames": ["classes/dynwid_class.php"], "buggy_code_start_loc": [121], "buggy_code_end_loc": [899], "fixing_code_start_loc": [122], "fixing_code_end_loc": [1016], "type": "CWE-89", "message": "A vulnerability, which was classified as critical, has been found in Dynamic Widgets Plugin up to 1.5.10. This issue affects some unknown processing of the file classes/dynwid_class.php. The manipulation leads to sql injection. The attack may be initiated remotely. Upgrading to version 1.5.11 is able to address this issue. The name of the patch is d0a19c6efcdc86d7093b369bc9e29a0629e57795. It is recommended to upgrade the affected component. The identifier VDB-225353 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10100", "sourceIdentifier": "cna@vuldb.com", "published": "2023-04-10T18:15:07.873", "lastModified": "2023-04-14T17:48:29.007", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as critical, has been found in Dynamic Widgets Plugin up to 1.5.10. This issue affects some unknown processing of the file classes/dynwid_class.php. The manipulation leads to sql injection. The attack may be initiated remotely. Upgrading to version 1.5.11 is able to address this issue. The name of the patch is d0a19c6efcdc86d7093b369bc9e29a0629e57795. It is recommended to upgrade the affected component. The identifier VDB-225353 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:qurl:dynamic_widgets:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "1.5.11", "matchCriteriaId": "7103CC42-3CEE-40CA-B419-DB7555F846D8"}]}]}], "references": [{"url": "https://github.com/wp-plugins/dynamic-widgets/commit/d0a19c6efcdc86d7093b369bc9e29a0629e57795", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/wp-plugins/dynamic-widgets/releases/tag/1.5.11", "source": "cna@vuldb.com", "tags": ["Patch", "Release Notes"]}, {"url": "https://vuldb.com/?ctiid.225353", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.225353", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wp-plugins/dynamic-widgets/commit/d0a19c6efcdc86d7093b369bc9e29a0629e57795"}}