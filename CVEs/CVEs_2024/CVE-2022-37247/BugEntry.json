{"buggy_code": ["# Release Notes for Craft CMS 4\n\n## Unreleased\n\n### Added\n- Added `craft\\config\\GeneralConfig::getRememberedUserSessionDuration()`.\n- Added `craft\\helpers\\DateTimeHelper::toDateInterval()`.\n\n### Changed\n- `craft\\config\\DbConfig::dsn()` now parses the DSN string and populates the other DSN-settable config properties.\n\n### Deprecated\n- Deprecated `craft\\helpers\\DateTimeHelper::secondsToInterval()`. `toDateInterval()` should be used instead.\n\n### Fixed\n- Fixed a bug where database connections would always use port `3306` by default if `craft\\config\\DbConfig` had been configured via fluent methods, even for PostgreSQL.\n- Fixed a bug where system messages provided by Yii weren\u2019t getting translated in some cases. ([#11712](https://github.com/craftcms/cms/issues/11712))\n- Fixed a bug where the \u201cKeep me signed in\u201d checkbox label wasn\u2019t always accurately representing the `rememberedUserSessionDuration` config setting. ([#11594](https://github.com/craftcms/cms/discussions/11594))\n\n### Security\n- Fixed an XSS vulnerability.\n\n## 4.2.0.2 - 2022-07-27\n\n### Fixed\n- Fixed a bug where `Garnish.uiShortcutManager` was getting double-instantiated, causing some keyboard shortcuts to be triggered multiple times.\n- Fixed a JavaScript error that occurred when switching sites in the control panel. ([#11709](https://github.com/craftcms/cms/issues/11709))\n- Fixed a bug where some config settings set via fluent setters weren\u2019t getting normalized.\n- Fixed a bug where the database connection DSN string wasn\u2019t getting built properly when the connection settings were set via fluent setters.\n\n## 4.2.0.1 - 2022-07-26\n\n### Fixed\n- Fixed an error that could occur when passing an object into `craft\\helpers\\ArrayHelper::removeValue()` or the `|without` filter.\n\n## 4.2.0 - 2022-07-26\n\n### Added\n- The control panel is now translated into Ukrainian.\n- Element conditions can now include condition rules for Matrix fields. ([#11620](https://github.com/craftcms/cms/issues/11620))\n- Element conditions can now include condition rules for Money fields. ([#11560](https://github.com/craftcms/cms/issues/11560))\n- Added the \u201cNotification Duration\u201d user accessibility preference. ([#11612](https://github.com/craftcms/cms/pull/11612))\n- The `accessibilityDefaults` config setting now supports a `notificationDuration` key.\n- Added `craft\\behaviors\\SessionBehavior::getSuccess()`.\n- Added `craft\\behaviors\\SessionBehavior::setSuccess()`.\n- Added `craft\\config\\BaseConfig`. ([#11591](https://github.com/craftcms/cms/pull/11591), [#11656](https://github.com/craftcms/cms/pull/11656))\n- Added `craft\\controllers\\UsersController::EVENT_AFTER_FIND_LOGIN_USER`. ([#11645](https://github.com/craftcms/cms/pull/11645))\n- Added `craft\\controllers\\UsersController::EVENT_BEFORE_FIND_LOGIN_USER`. ([#11645](https://github.com/craftcms/cms/pull/11645))\n- Added `craft\\events\\DefineFieldLayoutCustomFieldsEvent`.\n- Added `craft\\events\\FindLoginUserEvent`.\n- Added `craft\\events\\IndexKeywordsEvent`.\n- Added `craft\\fields\\conditions\\EmptyFieldConditionRule`.\n- Added `craft\\helpers\\DateTimeHelper::humanDuration()`.\n- Added `craft\\helpers\\Template::resolveTemplatePathAndLine()`.\n- Added `craft\\models\\FieldLayout::EVENT_DEFINE_CUSTOM_FIELDS`. ([#11634](https://github.com/craftcms/cms/discussions/11634))\n- Added `craft\\services\\Config::getLoadingConfigFile()`.\n- Added `craft\\services\\Elements::EVENT_INVALIDATE_CACHES`. ([#11617](https://github.com/craftcms/cms/pull/11617))\n- Added `craft\\services\\Search::EVENT_BEFORE_INDEX_KEYWORDS`. ([#11575](https://github.com/craftcms/cms/discussions/11575))\n\n### Changed\n- Redesigned user notifications. ([#11612](https://github.com/craftcms/cms/pull/11612))\n- Most element notifications now include a link to the element. ([#11612](https://github.com/craftcms/cms/pull/11612))\n- Improved overall control panel accessibility. ([#11563](https://github.com/craftcms/cms/pull/11563), [#11543](https://github.com/craftcms/cms/pull/11543), [#11688](https://github.com/craftcms/cms/pull/11688), [#11699](https://github.com/craftcms/cms/pull/11699))\n- Improved condition builder accessibility. ([#11588](https://github.com/craftcms/cms/pull/11588), [#11643](https://github.com/craftcms/cms/pull/11643))\n- Improved Image Editor accessibility. ([#11496](https://github.com/craftcms/cms/pull/11496))\n- The \u201cKeep me signed in\u201d checkbox label on the control panel\u2019s login page now includes the remembered session duration, e.g. \u201cKeep me signed in for 2 weeks\u201d. ([#11594](https://github.com/craftcms/cms/discussions/11594))\n- Dashboard widgets no longer show a confirmation dialog when deleted. Their delete notifications include an \u201cUndo\u201d button instead. ([#11573](https://github.com/craftcms/cms/discussions/11573))\n- Element edit pages no longer jump down when the \u201cShowing your unsaved changes\u201d notice is added, unless there\u2019s not enough content to require a scroll bar. ([#11586](https://github.com/craftcms/cms/discussions/11586))\n- Matrix block previews now show selected option labels rather than their raw values. ([#11659](https://github.com/craftcms/cms/issues/11659))\n- Improved the behavior of some console commands for non-interactive shells. ([#11650](https://github.com/craftcms/cms/issues/11650))\n- The `utils/prune-revisions` console command now has a `--section` option. ([#8783](https://github.com/craftcms/cms/discussions/8783))\n- Deprecation warnings\u2019 stack traces now show source templates\u2019 paths and line numbers.\n- Exception JSON responses now include the previous exception details, recursively. ([#11694](https://github.com/craftcms/cms/discussions/11694))\n- `config/general.php` and `config/db.php` can now return `craft\\config\\GeneralConfig`/`DbConfig` objects, which can be defined using new fluent setter methods. ([#11591](https://github.com/craftcms/cms/pull/11591), [#11656](https://github.com/craftcms/cms/pull/11656))\n- The `|duration` Twig filter can now be used with an integer representing a number of seconds, and its `showSeconds` argument is no longer required. Seconds will be output if the duration is less than one minute by default.\n- The `|length` Twig filter now checks if the variable is a query, and if so, returns its count. ([#11625](https://github.com/craftcms/cms/discussions/11625))\n- The `|without` Twig filter no longer uses strict value comparisons by default. It has a new `$strict` argument that can be set to `true` to enforce strict comparisons if desired. ([#11695](https://github.com/craftcms/cms/issues/11695))\n- `craft\\base\\conditions\\BaseConditionRule::inputHtml()` is no longer abstract, and returns an empty string by default.\n- `craft\\behaviors\\SessionBehavior::setError()` now has a `$settings` argument.\n- `craft\\behaviors\\SessionBehavior::setNotice()` now has a `$settings` argument.\n- `craft\\db\\Query` now implements the `ArrayAccess` and `IteratorAggregate` interfaces, so queries (including element queries) can be treated as arrays.\n- `craft\\helpers\\ArrayHelper::removeValue()` no longer uses strict value comparisons by default. It has a new `$strict` argument that can be set to `true` to enforce strict comparisons if desired.\n- `craft\\web\\Controller::asSuccess()` now has a `$notificationSettings` argument.\n- `craft\\web\\Controller::setFailFlash()` now has a `$settings` argument.\n- `craft\\web\\Controller::setSuccessFlash()` now has a `$settings` argument.\n\n### Deprecated\n- Deprecated `craft\\helpers\\DateTimeHelper::humanDurationFromInterval()`. `humanDuration()` should be used instead.\n- Deprecated `craft\\helpers\\DateTimeHelper::secondsToHumanTimeDuration()`. `humanDuration()` should be used instead.\n\n### Fixed\n- Fixed a bug where new condition rules\u2019 type selectors weren\u2019t getting auto-focused.\n- Fixed a bug where Quick Post widgets weren\u2019t submitting custom field values.\n- Fixed a bug where assets\u2019 `getImg()` methods were returning `null` for assets in volumes without URLs, even if a transform was being used. ([#11614](https://github.com/craftcms/cms/issues/11614))\n- Fixed a bug where sensitive data wasn\u2019t getting redacted in the logs when Dev Mode was enabled. ([#11618](https://github.com/craftcms/cms/issues/11618))\n- Fixed a SQL error that could occur on MySQL 5. ([#11596](https://github.com/craftcms/cms/issues/11596))\n- Fixed an error that could occur when upgrading to Craft 4. ([#11644](https://github.com/craftcms/cms/issues/11644))\n- Fixed a bug where the green color used in lightswitches was too dark. ([#11653](https://github.com/craftcms/cms/issues/11653))\n- Fixed a bug where relational and Matrix fields were assuming their values hadn\u2019t been eager-loaded on element save. ([#11667](https://github.com/craftcms/cms/issues/11667), [#11670](https://github.com/craftcms/cms/issues/11670))\n- Fixed a bug where deprecation warnings for treating an element query as an array weren\u2019t getting logged with an origin, if they involved Twig\u2019s `|batch` filter. ([#11597](https://github.com/craftcms/cms/issues/11597))\n- Fixed a bug where `{% js %}`, `{% script %}`, and `{% css %}` tags weren\u2019t registering JavaScript and CSS code properly when used within a `{% cache %}` tag that contained an ungenerated image transform. ([#11602](https://github.com/craftcms/cms/issues/11602))\n- Fixed a bug where the \u201cUser saved\u201d notification was translated for the former language, when changing the current user\u2019s language preference.\n- Fixed a JavaScript error that occurred when removing a category from a Categories field, if any of its descendants were selected as well. ([#11641](https://github.com/craftcms/cms/issues/11641))\n- Fixed a bug where links to config settings from **Settings** \u2192 **General** didn\u2019t include the correct setting anchors. ([#11665](https://github.com/craftcms/cms/pull/11665))\n- Fixed styling issues with Live Preview in Firefox.\n\n### Security\n- Fixed an information disclosure vulnerability.\n\n## 4.1.4.1 - 2022-07-13\n\n### Fixed\n- Fixed a bug where `craft\\services\\Assets::getRootFolderByVolumeId()` wasn\u2019t returning the root folder. ([#11593](https://github.com/craftcms/cms/issues/11593))\n\n## 4.1.4 - 2022-07-12\n\n### Added\n- Added `craft\\models\\FieldLayout::getVisibleCustomFieldElements()`.\n\n### Changed\n- Relation fields now focus on the next related element\u2019s \u201cRemove\u201d button when an element is removed. ([#11577](https://github.com/craftcms/cms/issues/11577))\n\n### Deprecated\n- Deprecated `craft\\base\\FieldTrait::$required`. `craft\\fieldlayoutelements\\BaseField::$required` should be used instead.\n\n### Fixed\n- Fixed a bug where assets\u2019 native Alternative Text fields were getting mislabeled as translatable. ([#11576](https://github.com/craftcms/cms/issues/11576))\n- Fixed a bug where fields nested within Neo fields could be incorrectly validated as required. ([#11574](https://github.com/craftcms/cms/issues/11574))\n- Fixed a PHP error that occurred when editing a Date field with a Min Date setting set.\n- Fixed a bug where date range inputs weren\u2019t working on mobile. ([#11571](https://github.com/craftcms/cms/issues/11571))\n- Fixed a bug where the \u201cCraft Support\u201d Dashboard widget wasn\u2019t being labeled properly in the widget settings HUD and delete confirmation dialog. ([#11573](https://github.com/craftcms/cms/discussions/11573))\n- Fixed a bug where the project config cache was getting invalidated on each public GraphQL API request.\n\n## 4.1.3 - 2022-07-07\n\n### Changed\n- Address fields now show required indicators based on the configured validation rules. ([#11566](https://github.com/craftcms/cms/pull/11566))\n\n### Fixed\n- Fixed a JavaScript error that occurred on the Updates utility. ([#11567](https://github.com/craftcms/cms/issues/11567))\n- Fixed a bug where Craft\u2019s Composer commands could produce a malformed `composer.json` file. ([#11564](https://github.com/craftcms/cms/issues/11564))\n\n## 4.1.2 - 2022-07-06\n\n### Added\n- Added `craft\\helpers\\ProjectConfig::ensureAllFilesystemsProcessed()`.\n\n### Changed\n- Relational field condition rules now have the \u201cis related to\u201d operator selected by default. ([#11550](https://github.com/craftcms/cms/discussions/11550))\n\n### Fixed\n- Fixed a bug where the Updates utility wasn\u2019t checking for updates properly. ([#11552](https://github.com/craftcms/cms/issues/11552))\n- Fixed an error that could occur when deploying a Craft 4 upgrade to another server. ([#11558](https://github.com/craftcms/cms/issues/11558))\n- Fixed a bug where Assets fields were relocating assets when saving a revision.\n- Fixed a bug where asset bundles weren\u2019t getting registered on the front end. ([#11555](https://github.com/craftcms/cms/issues/11555))\n\n## 4.1.1 - 2022-07-05\n\n### Changed\n- Improved the control panel tab design. ([#11524](https://github.com/craftcms/cms/pull/11524))\n- Changed the order of relational field condition rule operators, so \u201cis related to\u201d is listed first. ([#11550](https://github.com/craftcms/cms/discussions/11550))\n- Template caching is now supported for console requests, for `{% cache %}` tags that have the `globally` param. ([#11551](https://github.com/craftcms/cms/issues/11551))\n- Updated Composer to 2.2.15. ([#11538](https://github.com/craftcms/cms/issues/11538))\n\n### Fixed\n- Fixed an error that could occur if any custom fields were missing their field group. ([#11522](https://github.com/craftcms/cms/discussions/11522))\n- Fixed a bug where custom selects weren\u2019t scrolling to the visually-focused option.\n- Fixed errors that could occur if an element condition contained any rules for deleted custom fields. ([#11526](https://github.com/craftcms/cms/issues/11526))\n- Fixed a bug where the \u201cDeactivate users by default\u201d user setting wasn\u2019t working. ([#11519](https://github.com/craftcms/cms/issues/11519))\n- Fixed a styling issue with the Edit Route modal. ([#11528](https://github.com/craftcms/cms/issues/11528))\n- Fixed a bug where assets uploaded from Assets fields weren\u2019t retaining their original filename. ([#11530](https://github.com/craftcms/cms/issues/11530))\n- Fixed a bug where project config changes made at the end of the request lifecycle weren\u2019t getting saved.\n- Fixed a bug where toggling entries\u2019 and categories\u2019 site-specific statuses from element editor slideouts wasn\u2019t working. ([#11547](https://github.com/craftcms/cms/issues/11547))\n- Fixed a SQL error that occurred when running the `utils/prune-provisional-drafts` command. ([#11548](https://github.com/craftcms/cms/issues/11548))\n- Fixed focus styling issues with the Edit Route modal.\n\n## 4.1.0.2 - 2022-06-28\n\n### Fixed\n- Fixed a PHP error. ([#11518](https://github.com/craftcms/cms/issues/11518))\n\n## 4.1.0.1 - 2022-06-28\n\n### Fixed\n- Fixed an infinite recursion bug. ([#11514](https://github.com/craftcms/cms/issues/11514))\n\n## 4.1.0 - 2022-06-28\n\n### Added\n- Field layouts can now have \u201cLine Break\u201d UI elements. ([#11328](https://github.com/craftcms/cms/discussions/11328))\n- Added the `db/drop-all-tables` command. ([#11288](https://github.com/craftcms/cms/pull/11288))\n- Added the `elements/delete` command.\n- Added the `elements/restore` command.\n- Added the `project-config/get` command. ([#11341](https://github.com/craftcms/cms/pull/11341))\n- Added the `project-config/remove` command. ([#11341](https://github.com/craftcms/cms/pull/11341))\n- Added the `project-config/set` command. ([#11341](https://github.com/craftcms/cms/pull/11341))\n- The `AdminTable` Vue component can now be included into other Vue apps, in addition to being used as a standalone app. ([#11107](https://github.com/craftcms/cms/pull/11107))\n- Added a `one()` alias for `first()` to collections. ([#11134](https://github.com/craftcms/cms/discussions/11134))\n- Added `craft\\base\\Element::EVENT_DEFINE_CACHE_TAGS`. ([#11171](https://github.com/craftcms/cms/discussions/11171))\n- Added `craft\\base\\Element::cacheTags()`.\n- Added `craft\\base\\FieldInterface::getLabelId()`.\n- Added `craft\\console\\controllers\\UsersController::$activate`.\n- Added `craft\\elements\\conditions\\ElementCondition::$sourceKey`.\n- Added `craft\\elements\\db\\ElementQuery::EVENT_AFTER_POPULATE_ELEMENTS`. ([#11262](https://github.com/craftcms/cms/discussions/11262))\n- Added `craft\\elements\\db\\ElementQuery::EVENT_DEFINE_CACHE_TAGS`. ([#11171](https://github.com/craftcms/cms/discussions/11171))\n- Added `craft\\events\\PopulateElementsEvent`.\n- Added `craft\\fieldlayoutelements\\BaseField::labelId()`.\n- Added `craft\\fieldlayoutelements\\LineBreak`.\n- Added `craft\\helpers\\DateTimeHelper::now()`.\n- Added `craft\\helpers\\DateTimeHelper::pause()`. ([#11130](https://github.com/craftcms/cms/pull/11130))\n- Added `craft\\helpers\\DateTimeHelper::resume()`. ([#11130](https://github.com/craftcms/cms/pull/11130))\n\n### Changed\n- Improved overall control panel accessibility. ([#11297](https://github.com/craftcms/cms/pull/11297), [#11296](https://github.com/craftcms/cms/pull/11296), [#11414](https://github.com/craftcms/cms/pull/11414), [#11452](https://github.com/craftcms/cms/pull/11452))\n- Improved pagination UI accessibility. ([#11126](https://github.com/craftcms/cms/pull/11126))\n- Improved element index accessibility. ([#11169](https://github.com/craftcms/cms/pull/11169), [#11200](https://github.com/craftcms/cms/pull/11200), [#11251](https://github.com/craftcms/cms/pull/11251))\n- Improved Dashboard accessibility. ([#11217](https://github.com/craftcms/cms/pull/11217), [#11297](https://github.com/craftcms/cms/pull/11297))\n- Improved address management accessibility. ([#11397](https://github.com/craftcms/cms/pull/11397))\n- Improved Matrix field accessibility. ([#11306](https://github.com/craftcms/cms/pull/11306))\n- Improved mobile support. ([#11323](https://github.com/craftcms/cms/pull/11323), [#11430](https://github.com/craftcms/cms/pull/11430))\n- Improved keyboard support for custom selects. ([#11414](https://github.com/craftcms/cms/pull/11414))\n- It\u2019s now possible to remove all selected elements from relational fields by pressing <kbd>Backspace</kbd> or <kbd>Delete</kbd> while one of them is focussed.\n- Improved the UI of condition builders. ([#11386](https://github.com/craftcms/cms/pull/11386))\n- Entry Type condition rules now allow multiple selections. ([#11124](https://github.com/craftcms/cms/pull/11124))\n- Element index filters now only show condition rules for the custom fields that are used by the field layouts in the selected source, if a native source is selected. ([#11187](https://github.com/craftcms/cms/discussions/11187))\n- Element index filters now only show condition rules for custom fields used by field layouts created for the target element type, if no native source is selected.\n- Condition builders can now include multiple rules with the same label, as long as they\u2019re in different groups.\n- Asset indexes now have a \u201cLocation\u201d table attribute option. ([#11450](https://github.com/craftcms/cms/discussions/11450))\n- It\u2019s now possible to sort entries by their section and type. ([#9192](https://github.com/craftcms/cms/discussions/9192), [#11335](https://github.com/craftcms/cms/discussions/11335))\n- It\u2019s now possible to sort assets by their file kind.\n- Element editor metadata now lists elements\u2019 IDs.\n- Live Preview now always shows a \u201cRefresh\u201d button, regardless of whether the preview target has auto-refresh enabled. ([#11160](https://github.com/craftcms/cms/discussions/11160))\n- Sites\u2019 Language settings now display the locale IDs as option hints, rather than the languages\u2019 native names. ([#11195](https://github.com/craftcms/cms/discussions/11195))\n- Selectize options can now specify searchable `keywords` that won\u2019t be visible in the UI.\n- Selectize inputs will now include their options\u2019 values as search keywords.\n- Newly-created entries now get placeholder Post Date set on them, so they get sorted appropriately when querying for entries ordered by `postDate`. ([#11272](https://github.com/craftcms/cms/issues/11272))\n- Element queries can now pass columns into the `orderBy` param in addition to `score` when searching. ([#11470](https://github.com/craftcms/cms/pull/11470), [#11457](https://github.com/craftcms/cms/discussions/11457))\n- Field layout elements within field layout designers now support double-clicking to open their settings slideout. ([#11277](https://github.com/craftcms/cms/discussions/11277))\n- The control panel\u2019s JavaScript queue is now paused when the browser tab isn\u2019t visible. ([#10632](https://github.com/craftcms/cms/issues/10632))\n- The `db/restore` command now asks whether the database should be backed up, and whether all existing database tables should be dropped, prior to restoring the backup. ([#11288](https://github.com/craftcms/cms/pull/11288))\n- The `users/create` command now asks whether the user should be activated when saved.\n- The `maxBackups` config setting now impacts `.sql.zip` files in addition to `.sql` files. ([#11241](https://github.com/craftcms/cms/issues/11241))\n- Deprecation messages are now consistently referred to as \u201cdeprecation warnings\u201d in the control panel.\n- Callback functions returned by elements\u2019 `sortOptions()`/`defineSortOptions()` methods are now passed a `craft\\db\\Connection` object as a second argument.\n- All element sources now have a \u201cSet Status\u201d action, even if the element type\u2019s `defineActions()` method didn\u2019t include one, if the element type\u2019s `hasStatuses()` method returns `true`. ([#11383](https://github.com/craftcms/cms/discussions/11383))\n- All element sources now have a \u201cView\u201d action, even if the element type\u2019s `defineActions()` method didn\u2019t include one, if the element type\u2019s `hasUris()` method returns `true`. ([#11383](https://github.com/craftcms/cms/discussions/11383))\n- All element sources now have \u201cEdit\u201d and \u201cDelete\u201d actions, even if the element type\u2019s `defineActions()` method didn\u2019t include them. ([#11383](https://github.com/craftcms/cms/discussions/11383))\n- The \u201cSet Status\u201d and \u201cEdit\u201d element actions are now only available for elements whose `canSave()` method returned `true`.\n- Assets fields now reject uploaded files which don\u2019t pass their \u201cSelectable Assets Condition\u201d setting. ([#11433](https://github.com/craftcms/cms/issues/11433))\n- It\u2019s now possible to save new assets without setting their `filename` or `kind` attributes, as long as `newLocation` or `newFilename` is set. ([#11439](https://github.com/craftcms/cms/issues/11439))\n- The `searchindex` table is now uses the InnoDB storage engine by default for MySQL installs. ([#11374](https://github.com/craftcms/cms/discussions/11374))\n- The `_layouts/elementindex` control panel template now sets the page title based on the element\u2019s `pluralDisplayName()` method by default. ([#11502](https://github.com/craftcms/cms/pull/11502))\n- `craft\\test\\ActiveFixture::$data` is now populated with the active record instances, making them accessible to tests via `$this->tester->grabFixture('my-fixture', 'data-key')`. ([#11445](https://github.com/craftcms/cms/pull/11445))\n- Address validation rules are now defined by `defineRules()`. ([#11471](https://github.com/craftcms/cms/pull/11471))\n- `Garnish.DELETE_KEY` now refers to the actual <kbd>Delete</kbd> key code, and the <kbd>Backspace</kbd> key code is now referenced by `Garnish.BACKSPACE_KEY`.\n\n### Deprecated\n- Deprecated `craft\\elements\\actions\\DeleteAssets`. `craft\\elements\\actions\\Delete` should be used instead.\n\n### Removed\n- Removed `craft\\elements\\conditions\\entries\\EntryTypeCondition::$sectionUid`.\n- Removed `craft\\elements\\conditions\\entries\\EntryTypeCondition::$entryTypeUid`.\n\n## 4.0.6 - 2022-06-28\n\n### Added\n- Added `craft\\fields\\BaseOptionsField::encodeValue()`.\n\n### Changed\n- Improved the `install` command\u2019s error output when invalid options were passed.\n- `canonical` is now a reserved field handle. ([#11503](https://github.com/craftcms/cms/issues/11503))\n- `craft\\fields\\BaseOptionsField::translatedOptions()` now has an `$encode` argument.\n\n### Fixed\n- Fixed a bug where self relations within relational fields were being forgotten. ([#11461](https://github.com/craftcms/cms/issues/11461))\n- Fixed a bug where the `install` command required `--site-name`, `--site-url`, and `--language` options to be passed when project config YAML was already present. ([#11513](https://github.com/craftcms/cms/issues/11513))\n- Fixed a bug where `Garnish.setFocusWithin()` wasn\u2019t working if the first focusable element was a checkbox. ([#11498](https://github.com/craftcms/cms/discussions/11498))\n- Fixed a bug where Matrix blocks could be saved in the wrong order.\n- Fixed a bug where Checkboxes, Dropdown, Multi-select, and Radio Buttons fields could lose their values if their option values were set to integers. ([#11461](https://github.com/craftcms/cms/issues/11461))\n\n## 4.0.5.2 - 2022-06-24\n\n### Fixed\n- Fixed a SQL error that could occur on MySQL 5. ([#11493](https://github.com/craftcms/cms/issues/11493))\n- Fixed a bug where Craft\u2019s Composer commands weren\u2019t ensuring that `config.allow-plugins.yiisoft/yii2-composer` was `true` in `composer.json`. ([#11399](https://github.com/craftcms/cms/issues/11399))\n\n## 4.0.5.1 - 2022-06-22\n\n### Fixed\n- Fixed a bug where not all changes to entries and categories created via the \u201cSave and add another\u201d action were propagating to other sites. ([#11476](https://github.com/craftcms/cms/issues/11476))\n- Fixed a bug where it wasn\u2019t possible to rename assets.\n- Fixed a bug where a provisional draft could be created for an entry if its form was interacted with before the page had fully initialized. ([#11466](https://github.com/craftcms/cms/issues/11466))\n- Fixed exact phrase searching on PostgreSQL. ([#11486](https://github.com/craftcms/cms/issues/11486))\n\n## 4.0.5 - 2022-06-21\n\n### Added\n- Added `craft\\helpers\\Number::isIntOrFloat()`.\n\n### Changed\n- Categories now support change tracking.\n- Improved performance when working with temp asset folders.\n- Temp asset folders are no longer created until they\u2019re actually needed. ([#11427](https://github.com/craftcms/cms/issues/11427))\n- Element index queries are no longer cached if they contain a search term.\n- Search inputs within field layout designers now prevent the containing form from being submitted when the <kbd>Return</kbd> key is pressed. ([#11415](https://github.com/craftcms/cms/discussions/11415))\n\n### Deprecated\n- Deprecated `craft\\services\\Categories::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Globals::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Sections::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Tags::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Users::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Volumes::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n\n### Fixed\n- Fixed an error that could occur when saving an element to a disabled site. ([#10499](https://github.com/craftcms/cms/issues/10499))\n- Fixed a bug where newly-added condition rules\u2019 types were still selectable for preexisting condition rules, when they shouldn\u2019t have been.\n- Fixed a bug where field layout designers were checking the wrong setting when determining whether to include UI elements (`customizableTabs` instead of `customizableUi`).\n- Fixed a bug where the Asset Indexes utility was analyzing image transform directories and files. ([#11362](https://github.com/craftcms/cms/issues/11362), [#11384](https://github.com/craftcms/cms/pull/11384))\n- Fixed a bug where focus was getting trapped within element editor slideouts\u2019 sidebars even for wide viewports where there was enough room to display the sidebar side-by-side with other slideout content. ([#11358](https://github.com/craftcms/cms/pull/11358))\n- Fixed a bug where users\u2019 Formatting Locale preferences weren\u2019t always being respected.\n- Fixed a bug where address card menus would linger around after an address was deleted.\n- Fixed a bug where the `index-assets` command could produce unexpected output. ([#11194](https://github.com/craftcms/cms/issues/11194)).\n- Fixed a bug where video controls within asset preview modals were inaccessible via the keyboard. ([#11371](https://github.com/craftcms/cms/pull/11371))\n- Fixed a bug where `transform` GraphQL directives weren\u2019t working for Assets fields. ([#10299](https://github.com/craftcms/cms/discussions/10299))\n- Fixed a PHP error that could occur when running the `help` command. ([#11423](https://github.com/craftcms/cms/issues/11423))\n- Fixed a bug where `craft\\helpers\\App::env()` was converting some values to integers or floats unexpectedly. ([#11422](https://github.com/craftcms/cms/issues/11422))\n- Fixed a bug where changes to existing Matrix blocks weren\u2019t saving for element types that supported drafts but not change tracking. ([#11419](https://github.com/craftcms/cms/issues/11419))\n- Fixed a bug where double-clicking on a related asset\u2019s thumbnail could open the asset\u2019s preview modal. ([#11424](https://github.com/craftcms/cms/issues/11424))\n- Fixed a bug where the control panel wasn\u2019t displaying file upload failure messages.\n- Fixed a bug where `action` query params were taking precedence over `actionTrigger` URI matches, when handling action requests. ([#11435](https://github.com/craftcms/cms/issues/11435))\n- Fixed a bug where image fields within Edit User pages and the Settings \u2192 General page weren\u2019t resetting properly after an image was deleted. ([#11436](https://github.com/craftcms/cms/issues/11436))\n- Fixed a bug where User Group condition rules set to the \u201cis not one of\u201d operator weren\u2019t being applied to individual elements correctly. ([#11444](https://github.com/craftcms/cms/discussions/11444))\n- Fixed a JavaScript error that occurred on element indexes for users that didn\u2019t have permission to edit any sites.\n- Fixed a bug where users without permission to create new entries in a section could duplicate existing entries. ([#11447](https://github.com/craftcms/cms/pull/11447))\n- Fixed a bug where element selection condition rules weren\u2019t working if an element ID was provided. ([#11451](https://github.com/craftcms/cms/pull/11451))\n- Fixed a PHP error that occurred when executing a GraphQL query using a token that wasn\u2019t set to a schema. ([#11453](https://github.com/craftcms/cms/issues/11453))\n- Fixed a PHP error that could occur when unserializing a `craft\\validator\\DateTimeValidator`, `LanguageValidator`, `StringValidator`, or `TimeValidator` object. ([#11454](https://github.com/craftcms/cms/issues/11454))\n- Fixed a bug where element types\u2019 `actions()` methods were getting called for all `element-indexes/*` action requests.\n- Fixed a bug where the `install` command would run non-interactively even if not all needed options were passed, resulting in an error after the database tables had been added. ([#11305](https://github.com/craftcms/cms/issues/11305))\n- Fixed a viewport clipping bug on the control panel\u2019s Login page. ([#11372](https://github.com/craftcms/cms/pull/11372))\n- Fixed a bug where filtering an element query by a relational field using `:empty:`/`:notempty:` wasn\u2019t factoring in the field\u2019s \u201cWhich site should entries be related from?\u201d setting properly.\n- Fixed a bug where filtering an element query by a relational field using `:empty:`/`:notempty:` wasn\u2019t factoring in the source elements\u2019 site IDs, for fields set to manage relations on a per-site basis. ([#11418](https://github.com/craftcms/cms/issues/11418))\n- Fixed a bug where the Temporary Uploads asset source wasn\u2019t including subfolders.\n- Fixed a bug where file upload progress bars weren\u2019t always going away when an upload error occurred.\n- Fixed a bug where Pashto was not being treated as an RTL langauge. ([#11428](https://github.com/craftcms/cms/issues/11428))\n- Fixed a bug where the `upscaleImages` config setting wasn\u2019t being respected for transforms where only a single image dimension was specified. ([#11398](https://github.com/craftcms/cms/issues/11398))\n- Fixed an error that could occur when executing a GraphQL query, if a section didn\u2019t have any entry types. ([#11273](https://github.com/craftcms/cms/issues/11273))\n- Fixed an error that could occur when changing the primary site on installs with a large number of users. ([#11459](https://github.com/craftcms/cms/issues/11459))\n- Fixed a bug where Assets fields within Vizy fields weren\u2019t getting relocated from the user\u2019s temp uploads folder. ([#11462](https://github.com/craftcms/cms/issues/11462))\n\n### Security\n- Environment-aware control panel fields no longer suggest environment variables that begin with `HTTP_`.\n- The Sendmail mailer no longer validates if the Sendmail Command setting is set to an enivornment variable that begins with `HTTP_`.\n\n## 4.0.4 - 2022-06-03\n\n### Added\n- Added support for querying for users with a `credentialed` status.\n- Added `craft\\elements\\db\\UserQuery::STATUS_CREDENTIALED`.\n- Added `craft\\errors\\FieldNotFoundException`.\n- Added `craft\\helpers\\Html::encodeSpaces()`.\n- Added `craft\\web\\twig\\variables\\Cp::getRequestedSite()`. ([#11082](https://github.com/craftcms/cms/discussions/11082))\n\n### Changed\n- `temp` is now a reserved volume handle.\n- Improved the performance of field layout designers. ([#11298](https://github.com/craftcms/cms/issues/11298))\n- All control panel pages now have a `site--<siteHandle>` class name on the `<body>`, based on the currently-selected site. ([#11303](https://github.com/craftcms/cms/discussions/11303))\n- Warnings are no longer logged when instantiating a field layout that references a deleted custom field. ([#11333](https://github.com/craftcms/cms/issues/11333))\n- Read/write splitting is now disabled for all console requests.\n- The `db/restore` command now prompts to clear data caches after the import is complete. ([#11327](https://github.com/craftcms/cms/issues/11327))\n- Entry queries no longer factor in seconds when looking for currently-live entries, without excluding entries that were published in the past minute. ([#5389](https://github.com/craftcms/cms/issues/5389))\n- `craft\\elements\\Asset::getUrl()` now encodes any spaces in the URL as `%20` entities.\n\n### Fixed\n- Fixed a bug where it wasn\u2019t possible to disable all table columns for an element source. ([#11291](https://github.com/craftcms/cms/issues/11291))\n- Fixed a bug where the Assets index page wasn\u2019t allowing any bulk actions for assets in the temporary volume. ([#11293](https://github.com/craftcms/cms/issues/11293))\n- Fixed a bug where PHP errors thrown while rendering a template weren\u2019t being handled properly. ([#11108](https://github.com/craftcms/cms/issues/11108))\n- Fixed a bug where site status labels were inconsistent on element edit pages. ([#11307](https://github.com/craftcms/cms/issues/11307))\n- Fixed a bug where addresses\u2019 County fields were mislablled. ([#11314](https://github.com/craftcms/cms/pull/11314))\n- Fixed a bug where the control panel\u2019s login form wasn\u2019t handling errors properly. ([#11319](https://github.com/craftcms/cms/pull/11319))\n- Fixed a bug where it wasn\u2019t possible to use a `{% redirect %}` tag in an error template. ([#11336](https://github.com/craftcms/cms/issues/11336))\n- Fixed an error that occurred when saving an entry via a GraphQL mutation. ([#11312](https://github.com/craftcms/cms/issues/11312))\n- Fixed a bug where all web requests were getting no-cache headers. ([#11346](https://github.com/craftcms/cms/issues/11346))\n- Fixed a bug where user caches weren\u2019t getting invalidated when users were changed to a pending or inactive state.\n- Fixed a bug where querying for users with an `active` status was returning suspended users. ([#11370](https://github.com/craftcms/cms/pull/11370))\n- Fixed a bug where it wasn\u2019t possible to drag assets within Assets fields by their thumbnails. ([#11364](https://github.com/craftcms/cms/issues/11364))\n- Fixed a bug where asset thumbnails weren\u2019t loading if their filename contained a space. ([#11350](https://github.com/craftcms/cms/issues/11350))\n- Fixed a bug where `craft\\services\\AssetIndexer::indexFile()` wasn\u2019t removing the filename from the file path when setting the directory on the listing. ([#11365](https://github.com/craftcms/cms/issues/11365))\n- Fixed a bug where links within custom field instructions were getting mangled. ([#11377](https://github.com/craftcms/cms/issues/11377))\n- Fixed a bug where project config paths that contained slashes weren\u2019t getting handled properly. ([#10774](https://github.com/craftcms/cms/issues/10774))\n- Fixed a bug where the Login page had a tab-focusable \u201cSkip to content\u201d button. ([#11375](https://github.com/craftcms/cms/issues/11375))\n\n## 4.0.3 - 2022-05-20\n\n### Added\n- Added `craft\\elements\\db\\ElementQuery::prepareSubquery()`.\n\n### Changed\n- Element edit pages now disable pointer events on the content container for 300 milliseconds after the \u201cShowing your unsaved changes\u201d notice is displayed. ([#11229](https://github.com/craftcms/cms/issues/11229))\n- Users can now create drafts for entries they have permission to view, but not save. ([#11249](https://github.com/craftcms/cms/issues/11249))\n- User Group condition rules are no longer available in element conditions when no user groups exist. ([#11252](https://github.com/craftcms/cms/issues/11252))\n- Matrix blocks now have `data-type-name` attributes. ([#11286](https://github.com/craftcms/cms/pull/11286))\n- Reversed the order of Lightswitch fields\u2019 \u201cON Label\u201d and \u201cOFF Label\u201d settings. ([#11259](https://github.com/craftcms/cms/issues/11259))\n- `craft\\services\\Elements::duplicateElement()` now has a `$trackDuplication` argument.\n- `craft\\services\\Matrix::duplicateBlocks()` now has a `$trackDuplications` argument.\n\n### Fixed\n- Fixed a bug where dynamically-defined image transforms weren\u2019t respecting the `format` param, unless the `generateTransformsBeforePageLoad` config setting was enabled.\n- Fixed a bug where Table fields with Min Rows and Max Rows set to `1` were still showing a delete button. ([#11211](https://github.com/craftcms/cms/issues/11211))\n- Fixed an error that could occur when saving an Assets field that was restricted to a single location, at the root of a volume. ([#11212](https://github.com/craftcms/cms/issues/11212))\n- Fixed an error that could occur after a queue job execution had finished. ([#11213](https://github.com/craftcms/cms/issues/11213))\n- Fixed an error that could occur when saving an entry with Matrix blocks. ([#11155](https://github.com/craftcms/cms/issues/11155))\n- Fixed an error that occurred when saving a GraphQL schema without a scope. ([#11240](https://github.com/craftcms/cms/issues/11240))\n- Fixed an error that could occur when editing the public GraphQL schema, if a public token existed in the project config, but not the database. ([#11218](https://github.com/craftcms/cms/issues/11218))\n- Fixed some bugs with inconsistent asset indexing on Windows. ([#11174](https://github.com/craftcms/cms/issues/11174)), ([#11219](https://github.com/craftcms/cms/issues/11219))\n- Fixed a bug where custom fields weren\u2019t available to be included as table attributes. ([#11222](https://github.com/craftcms/cms/issues/11222))\n- Fixed a bug where Alternative Text wasn\u2019t available to be included as a table attribute. ([#11222](https://github.com/craftcms/cms/issues/11222))`immediately`\n- Fixed a JavaScript error that broke Matrix fields with Min Blocks and Max Blocks both set to `1`. ([#11233](https://github.com/craftcms/cms/issues/11233))\n- Fixed a bug where request context logs could appear when nothing else was logged. ([#11141](https://github.com/craftcms/cms/issues/11141))\n- Fixed a bug where stack traces could be erroneously filtered from logs.\n- Fixed a bug where removing an element from a relational field within an element editor could cause the editor to create a provisional draft, even if the element type didn\u2019t support drafts. ([#11242](https://github.com/craftcms/cms/issues/11242))\n- Fixed a bug where draft editor pages had two identical \u201cSave and continue editing\u201d alternate form actions.\n- Fixed a JavaScript warning that occurred when viewing an element edit page, if the user didn\u2019t have permission to edit it.\n- Fixed a bug where asset selector modals weren\u2019t fully initializing for Assets fields, if they were targeting the user\u2019s temp folder. ([#11254](https://github.com/craftcms/cms/issues/11254))\n- Fixed an error that occurred when saving an entry via a GraphQL mutation. ([#11258](https://github.com/craftcms/cms/issues/11258))\n- Fixed a bug where Matrix block types\u2019 layout elements were getting new UUIDs assigned each time the Matrix field was edited. ([#11248](https://github.com/craftcms/cms/issues/11248))\n- Fixed a bug where the web-based installation wizard was throwing an exception if a database connection couldn\u2019t be established, and there was no `config/db.php` file. ([#11245](https://github.com/craftcms/cms/issues/11245))\n- Fixed a bug where editable tables\u2019 delete buttons\u2019 `aria-label` attributes weren\u2019t getting updated when table rows were reordered or deleted.\n- Fixed a bug where editable tables\u2019 delete buttons weren\u2019t visually disabled when the minimum number of rows had been reached.\n- Fixed a bug where all eager-loaded `srcset`-style transform sizes were relative to the first eager-loaded transform, rather than the prior one. ([#11209](https://github.com/craftcms/cms/issues/11209))\n- Fixed a bug where eager-loaded `srcset`-style transform sizes didn\u2019t reference the prior eager-loaded transform\u2019s `format`, `interlace`, `mode`, `position`, or `quality` settings. ([#11264](https://github.com/craftcms/cms/issues/11264))\n- Fixed a bug where the web-based installation wizard wouldn\u2019t show the database connection screen if a connection could be established but no database was selected. ([#11245](https://github.com/craftcms/cms/issues/11245))\n- Fixed an error that could occur when applying a multi-site draft with relational fields. ([#11220](https://github.com/craftcms/cms/issues/11220))\n- Fixed a bug where Matrix blocks could be deleted from newly-created multi-site entries, if the edit page was reloaded. ([#10906](https://github.com/craftcms/cms/issues/10906))\n\n## 4.0.2 - 2022-05-11\n\n### Added\n- Added `craft\\events\\LocateUploadedFilesEvent`.\n- Added `craft\\fields\\Assets::EVENT_LOCATE_UPLOADED_FILES`. ([#11123](https://github.com/craftcms/cms/discussions/11123))\n\n### Changed\n- `elements/*` actions no longer include custom field values in the response data, improving performance.\n- Garnish menu buttons are now aware of the `disabled` attribute. ([#11128](https://github.com/craftcms/cms/issues/11128))\n- Improved save performance for multi-site elements ([#11113](https://github.com/craftcms/cms/issues/11113))\n- Built-in Composer actions now ensure that `composer.json` allows the `craftcms/plugin-installer` Composer plugin.\n\n### Fixed\n- Fixed an error that occurred when searching for elements by a custom field. ([#11120](https://github.com/craftcms/cms/pull/11120))\n- Fixed a bug where asset upload failures weren\u2019t being handled properly. ([#11156](https://github.com/craftcms/cms/issues/11156))\n- Fixed a bug where warning and error logs were being sent to both `stdout` and `stderr` when `CRAFT_STREAM_LOG` was enabled. ([#11189](https://github.com/craftcms/cms/issues/11189))\n- Fixed an error that occurred when exporting elements with relational fields using the \u201cExpanded\u201d export type. ([#11127](https://github.com/craftcms/cms/issues/11127))\n- Fixed a PHP deprecation warning that occurred if the `tablePrefix` database connection setting was `null`.\n- Fixed a bug where category groups were being identified as \u201c{name}\u201d in user permission lists. ([#11132](https://github.com/craftcms/cms/issues/11132))\n- Fixed a bug where Assets fields\u2019 \u201cUpload files\u201d buttons weren\u2019t wrapping when there wasn\u2019t enough space to show them alongside \u201cAdd an asset\u201d. ([#11133](https://github.com/craftcms/cms/issues/11133))\n- Fixed a bug where `Craft.getUrl()` was appending empty query strings to URLs when they weren\u2019t needed. ([#11159](https://github.com/craftcms/cms/issues/11159))\n- Fixed a bug where addresses could validate the wrong set of required fields, if the validation rules were invoked before the country code was set. ([#11162](https://github.com/craftcms/cms/issues/11162))\n- Fixed an error that could occur when viewing the Temporary Uploads volume, if the Temp Uploads Location asset setting was set to \u201cIn the local temp folder\u201d. ([#11192](https://github.com/craftcms/cms/issues/11192))\n- Fixed an error that could occur when deleting a volume, if its filesystem had been deleted.\n- Fixed an error that could occur when rendering the thumbnail preview for an asset, if its file was missing. ([#11196](https://github.com/craftcms/cms/issues/11196))\n- Fixed a bug where soft-deleted drafts\u2019 search keywords weren\u2019t getting re-indexed if they were restored.\n- Fixed an error that occurred when transforming an SVG image without specifying a width or height. ([#11122](https://github.com/craftcms/cms/issues/11122))\n- Fixed an error that occurred when saving a Number field with a non-numeric value. ([#11164](https://github.com/craftcms/cms/issues/11164))\n- Fixed a bug where it wasn\u2019t possible to drag an item to the top in admin tables. ([#10781](https://github.com/craftcms/cms/issues/10781))\n- Fixed a bug where entries within Structure sections weren\u2019t expandable if their only descendants were unpublished drafts.\n- Fixed a bug where expanding a collapsed Structure section entry wouldn\u2019t reveal its descendants, if the parent was a draft. ([#11186](https://github.com/craftcms/cms/issues/11186))\n- Fixed a bug where element caches weren\u2019t getting cleared for elements when they were propagated to a newly-created site.\n\n## 4.0.1 - 2022-05-06\n\n### Fixed\n- Fixed a bug where Money field labels\u2019 `for` attributes weren\u2019t referencing the correct input ID. ([#11016](https://github.com/craftcms/cms/pull/11016))\n- Fixed a bug where Money field inputs weren\u2019t getting `aria-describedby` attributes. ([#11016](https://github.com/craftcms/cms/pull/11016))\n- Fixed an error that occurred when loading an edit screen for an element type that didn\u2019t have a field layout. ([#11110](https://github.com/craftcms/cms/pull/11110))\n- Fixed a bug where condition rules that weren\u2019t selectable (per `isSelectable()`) were still visible in the rule dropdown menu. ([#11104](https://github.com/craftcms/cms/pull/11104))\n- Fixed a bug where element edit pages could reload themselves immediately after saving the element. ([#11084](https://github.com/craftcms/cms/issues/11084))\n- Fixed a bug where tabs weren\u2019t interactive after changing an entry\u2019s type, if the new entry type didn\u2019t have a tab of the same name as the previously-selected tab. ([#11093](https://github.com/craftcms/cms/issues/11093))\n- Fixed a bug where Twig syntax errors weren\u2019t being handled properly. ([#11108](https://github.com/craftcms/cms/issues/11108))\n- Fixed an error that occurred when attempting to delete a global set. ([#11100](https://github.com/craftcms/cms/issues/11100))\n- Fixed an error that could occur when applying a draft. ([#11083](https://github.com/craftcms/cms/issues/11083))\n- Fixed a bug where element queries weren\u2019t returning any results if an element attribute table wasn\u2019t joined in, and the element query was set to an abstract element class. ([#11105](https://github.com/craftcms/cms/issues/11105))\n\n## 4.0.0.1 - 2022-05-04\n\n### Changed\n- The `setup` command now writes the application ID to a `CRAFT_APP_ID` environment variable.\n- The `setup` command now writes the security key to a `CRAFT_SECURITY_KEY` environment variable.\n\n## 4.0.0 - 2022-05-04\n\n### Added\n- Entries\u2019, categories\u2019, and assets\u2019 edit pages, and all element types via slideouts, now use a unified editing experience. ([#10467](https://github.com/craftcms/cms/pull/10467))\n- Categories now support drafts. ([#10467](https://github.com/craftcms/cms/pull/10467))\n- Element slideouts now support provisional drafts and autosaving, for element types that support them. ([#10467](https://github.com/craftcms/cms/pull/10467))\n- Element indexes can now be filtered by element attributes and custom field values. ([#9192](https://github.com/craftcms/cms/discussions/9192), [#9450](https://github.com/craftcms/cms/discussions/9450), [#9462](https://github.com/craftcms/cms/discussions/9462), [#9483](https://github.com/craftcms/cms/discussions/9483))\n- Admins can now create custom element sources from the Customize Sources modal. ([#8423](https://github.com/craftcms/cms/discussions/8423))\n- It\u2019s now possible to disable native element sources from the Customize Sources modal. ([#10676](https://github.com/craftcms/cms/discussions/10676))\n- Field layout tabs, fields, and UI elements can now be conditionally shown based on properties of the current user and/or element being edited. ([#8099](https://github.com/craftcms/cms/discussions/8099), [#8154](https://github.com/craftcms/cms/discussions/8154))\n- Assets, Entries, and Users fields have new condition settings that can be used to further limit which elements should be relatable, beyond the existing field settings. ([#10393](https://github.com/craftcms/cms/pull/10393))\n- Assets, Entries, and Users fields have new \u201cMin Relations\u201d settings, and their former \u201cLimit\u201d settings have been renamed to \u201cMax Relations\u201d. ([#8621](https://github.com/craftcms/cms/discussions/8621))\n- Added a dedicated \u201cFull Name\u201d field to users. \u201cFirst Name\u201d and \u201cLast Name\u201d are now parsed out from the full name automatically when a user is saved. ([#10405](https://github.com/craftcms/cms/discussions/10405))\n- Added the \u201cInactive\u201d user status, which can be used by users which can\u2019t be signed into. ([#8963](https://github.com/craftcms/cms/discussions/8963))\n- Added \u201cCredentialed\u201d and \u201cInactive\u201d user sources.\n- Added the \u201cDeactivate\u2026\u201d user action for pending and active users.\n- Users can now have an \u201cAddresses\u201d field. ([#10507](https://github.com/craftcms/cms/pull/10507))\n- Added the concept of \u201cfilesystems\u201d, which handle file operations, either locally or on a remote service like Amazon S3.\n- It\u2019s now possible to set sites\u2019 Status settings to environment variables. ([#3005](https://github.com/craftcms/cms/issues/3005))\n- Added the Money field type.\n- Craft now provides a native \u201cAlternative Text\u201d (`alt`) field for assets. ([#10302](https://github.com/craftcms/cms/discussions/10302))\n- Asset thumbnails in the control panel now have `alt` attributes, for assets with a filled-in Alternative Text value.\n- Added the `index-assets/cleanup` command.\n- Added the \u201cDeactivate users by default\u201d user registration setting, which replaces \u201cSuspend users by default\u201d. ([#5830](https://github.com/craftcms/cms/issues/5830))\n- Element source settings are now stored in the project config. ([#8616](https://github.com/craftcms/cms/discussions/8616))\n- Improved element index accessibility. ([#10629](https://github.com/craftcms/cms/pull/10629), [#10660](https://github.com/craftcms/cms/pull/10660))\n- Improved Live Preview accessibility for screen readers. ([#10688](https://github.com/craftcms/cms/pull/10688))\n- Slideouts, Live Preview, and Matrix blocks are no longer animated for browsers that have requested reduced motion. ([#10665](https://github.com/craftcms/cms/pull/10665))\n- Added support for `JSON` columns. ([#9089](https://github.com/craftcms/cms/pull/9089))\n- It\u2019s now possible to edit images\u2019 focal points from their preview modals. ([#8489](https://github.com/craftcms/cms/discussions/8489))\n- Added support for Monolog and the PSR-3 logging interface. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- Added the `|address` Twig filter.\n- Added the `|money` Twig filter.\n- Added the `collect()` Twig function.\n- Added the `assetUploaders`, `authors`, and `fullName` user query params.\n- Added the `primaryOwner` and `primaryOwnerId` Matrix block query params.\n- Added the `hasAlt` asset query param.\n- Added the `button`, `submitButton`, `fs`, `fsField`, `volume`, and `volumeField` macros to the `_includes/forms` control panel template.\n- Added the `buildId` general config. ([#10705](https://github.com/craftcms/cms/pull/10705))\n- Added support for setting custom config settings from `config/custom.php`, which are accessible via `Craft::$app->config->custom`. ([#10012](https://github.com/craftcms/cms/issues/10012))\n- Added the `addresses`, `address`, and `addressCount` GraphQL queries.\n- Added the `hasAlt` argument to asset GraphQL queries.\n- Added the `alt` field to assets queried via GraphQL.\n- Added the `fullName`, `assetUploaders`, and `authors` arguments to user GraphQL queries.\n- Added the `addresses` field to user GraphQL queries.\n- GraphQL schemas now include settings that determine which sites elements can be queried from. ([#10610](https://github.com/craftcms/cms/issues/10610))\n- Added the `assets/icon` action.\n- Added the `assets/update-focal-point` action.\n- Added the `categories/create` action.\n- Added the `elements/apply-draft` action.\n- Added the `elements/create` action.\n- Added the `elements/delete-draft` action.\n- Added the `elements/delete-for-site` action.\n- Added the `elements/delete` action.\n- Added the `elements/duplicate` action.\n- Added the `elements/edit` action.\n- Added the `elements/redirect` action.\n- Added the `elements/revert` action.\n- Added the `elements/save-draft` action.\n- Added the `elements/save` action.\n- Added the `users/delete-address` action.\n- Added the `users/save-address` action.\n- Added the `app/render-element` control panel controller action.\n- Added the `element-indexes/element-table-html` control panel controller action.\n- Added `craft\\base\\ApplicationTrait::getConditions()`.\n- Added `craft\\base\\ApplicationTrait::getElementSources()`, which replaces `getElementIndexes()`.\n- Added `craft\\base\\ApplicationTrait::getFs()`.\n- Added `craft\\base\\ApplicationTrait::getImageTransforms()`, which replaces `getAssetTransforms()`.\n- Added `craft\\base\\conditions\\BaseCondition`.\n- Added `craft\\base\\conditions\\BaseConditionRule`.\n- Added `craft\\base\\conditions\\BaseDateRangeConditionRule`.\n- Added `craft\\base\\conditions\\BaseElementSelectConditionRule`.\n- Added `craft\\base\\conditions\\BaseLightswitchConditionRule`.\n- Added `craft\\base\\conditions\\BaseMultiSelectConditionRule`.\n- Added `craft\\base\\conditions\\BaseNumberConditionRule`.\n- Added `craft\\base\\conditions\\BaseSelectConditionRule`.\n- Added `craft\\base\\conditions\\BaseTextConditionRule`.\n- Added `craft\\base\\conditions\\ConditionInterface`.\n- Added `craft\\base\\conditions\\ConditionRuleInterface`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_CREATE_DRAFTS`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_DELETE_FOR_SITE`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_DELETE`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_DUPLICATE`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_SAVE`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_VIEW`.\n- Added `craft\\base\\Element::EVENT_DEFINE_ADDITIONAL_BUTTONS`. ([#10420](https://github.com/craftcms/cms/discussions/10420))\n- Added `craft\\base\\Element::getParentId()`.\n- Added `craft\\base\\Element::hasNewParent()`.\n- Added `craft\\base\\Element::notesFieldHtml()`.\n- Added `craft\\base\\Element::setParentId()`.\n- Added `craft\\base\\Element::statusFieldHtml()`.\n- Added `craft\\base\\ElementInterface::canCreateDrafts()`.\n- Added `craft\\base\\ElementInterface::canDelete()`.\n- Added `craft\\base\\ElementInterface::canDeleteForSite()`.\n- Added `craft\\base\\ElementInterface::canDuplicate()`.\n- Added `craft\\base\\ElementInterface::canSave()`.\n- Added `craft\\base\\ElementInterface::canView()`.\n- Added `craft\\base\\ElementInterface::createAnother()`.\n- Added `craft\\base\\ElementInterface::createCondition()`.\n- Added `craft\\base\\ElementInterface::getAdditionalButtons()`.\n- Added `craft\\base\\ElementInterface::getPostEditUrl()`.\n- Added `craft\\base\\ElementInterface::getThumbAlt()`.\n- Added `craft\\base\\ElementInterface::hasRevisions()`.\n- Added `craft\\base\\ElementInterface::prepareEditScreen()`.\n- Added `craft\\base\\FieldInterface::getElementConditionRuleType()`.\n- Added `craft\\base\\FieldInterface::isRequirable()`.\n- Added `craft\\base\\FieldLayoutComponent`.\n- Added `craft\\base\\Fs`.\n- Added `craft\\base\\FsInterface`.\n- Added `craft\\base\\FsTrait`.\n- Added `craft\\base\\Image::heartbeat()`.\n- Added `craft\\base\\Image::setHeartbeatCallback()`.\n- Added `craft\\base\\imagetransforms\\EagerImageTransformerInterface`.\n- Added `craft\\base\\imagetransforms\\ImageEditorTransformerInterface`.\n- Added `craft\\base\\imagetransforms\\ImageTransformerInterface`.\n- Added `craft\\base\\LocalFsInterface`.\n- Added `craft\\base\\Model::defineBehaviors()`. ([#10691](https://github.com/craftcms/cms/pull/10691))\n- Added `craft\\base\\ModelInterface`.\n- Added `craft\\base\\NameTrait`.\n- Added `craft\\base\\PluginInterface::config()`. ([#11039](https://github.com/craftcms/cms/pull/11039))\n- Added `craft\\behaviors\\SessionBehavior::broadcastToJs()`.\n- Added `craft\\behaviors\\SessionBehavior::getError()`.\n- Added `craft\\behaviors\\SessionBehavior::getNotice()`.\n- Added `craft\\controllers\\AddressesController`.\n- Added `craft\\controllers\\AssetIndexesController`.\n- Added `craft\\controllers\\ConditionsController`.\n- Added `craft\\controllers\\ElementIndexesController::$condition`.\n- Added `craft\\controllers\\FsController`.\n- Added `craft\\controllers\\ImageTransformsController`.\n- Added `craft\\db\\Migration::archiveTableIfExists()`. ([#10827](https://github.com/craftcms/cms/discussions/10827))\n- Added `craft\\db\\Migration::dropAllForeignKeysToTable()`.\n- Added `craft\\db\\Migration::dropForeignKeyIfExists()`.\n- Added `craft\\db\\Migration::renameTable()`.\n- Added `craft\\db\\Query::collect()`, which returns the query results as an `Illuminate\\Support\\Collection` object rather than an array. ([#8513](https://github.com/craftcms/cms/discussions/8513))\n- Added `craft\\db\\Table::ADDRESSES`.\n- Added `craft\\db\\Table::ASSETINDEXINGSESSIONS`.\n- Added `craft\\db\\Table::IMAGETRANSFORMINDEX`.\n- Added `craft\\db\\Table::IMAGETRANSFORMS`.\n- Added `craft\\db\\Table::MATRIXBLOCKS_OWNERS`.\n- Added `craft\\debug\\LogTarget`.\n- Added `craft\\debug\\MailPanel`.\n- Added `craft\\elements\\Address`.\n- Added `craft\\elements\\Asset::$alt`.\n- Added `craft\\elements\\Asset::EVENT_AFTER_GENERATE_TRANSFORM`.\n- Added `craft\\elements\\Asset::EVENT_BEFORE_GENERATE_TRANSFORM`.\n- Added `craft\\elements\\Asset::getFs()`.\n- Added `craft\\elements\\Asset::setFilename()`.\n- Added `craft\\elements\\conditions\\addresses\\AddressCondition`.\n- Added `craft\\elements\\conditions\\addresses\\CountryConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\AssetCondition`.\n- Added `craft\\elements\\conditions\\assets\\DateModifiedConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\FilenameConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\FileSizeConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\FileTypeConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\HasAltConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\HeightConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\UploaderConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\VolumeConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\WidthConditionRule`.\n- Added `craft\\elements\\conditions\\categories\\CategoryCondition`.\n- Added `craft\\elements\\conditions\\categories\\GroupConditionRule`.\n- Added `craft\\elements\\conditions\\DateCreatedConditionRule`.\n- Added `craft\\elements\\conditions\\DateUpdatedConditionRule`.\n- Added `craft\\elements\\conditions\\ElementCondition`.\n- Added `craft\\elements\\conditions\\ElementConditionInterface`.\n- Added `craft\\elements\\conditions\\ElementConditionRuleInterface`.\n- Added `craft\\elements\\conditions\\entries\\AuthorConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\AuthorGroupConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\EntryCondition`.\n- Added `craft\\elements\\conditions\\entries\\ExpiryDateConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\PostDateConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\SectionConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\TypeConditionRule`.\n- Added `craft\\elements\\conditions\\HasUrlConditionRule`.\n- Added `craft\\elements\\conditions\\IdConditionRule`.\n- Added `craft\\elements\\conditions\\LevelConditionRule`.\n- Added `craft\\elements\\conditions\\RelatedToConditionRule`.\n- Added `craft\\elements\\conditions\\SlugConditionRule`.\n- Added `craft\\elements\\conditions\\tags\\GroupConditionRule`.\n- Added `craft\\elements\\conditions\\tags\\TagCondition`.\n- Added `craft\\elements\\conditions\\TitleConditionRule`.\n- Added `craft\\elements\\conditions\\UriConditionRule`.\n- Added `craft\\elements\\conditions\\users\\AdminConditionRule`.\n- Added `craft\\elements\\conditions\\users\\CredentialedConditionRule`.\n- Added `craft\\elements\\conditions\\users\\EmailConditionRule`.\n- Added `craft\\elements\\conditions\\users\\FirstNameConditionRule`.\n- Added `craft\\elements\\conditions\\users\\GroupConditionRule`.\n- Added `craft\\elements\\conditions\\users\\LastLoginDateConditionRule`.\n- Added `craft\\elements\\conditions\\users\\LastNameConditionRule`.\n- Added `craft\\elements\\conditions\\users\\UserCondition`.\n- Added `craft\\elements\\conditions\\users\\UsernameConditionRule`.\n- Added `craft\\elements\\db\\AddressQuery`.\n- Added `craft\\elements\\MatrixBlock::$primaryOwnerId`.\n- Added `craft\\elements\\MatrixBlock::$saveOwnership`.\n- Added `craft\\elements\\User::$active`.\n- Added `craft\\elements\\User::$fullName`.\n- Added `craft\\elements\\User::canAssignUserGroups()`.\n- Added `craft\\elements\\User::getAddresses()`.\n- Added `craft\\elements\\User::getIsCredentialed()`.\n- Added `craft\\elements\\User::STATUS_INACTIVE`.\n- Added `craft\\errors\\FsException`.\n- Added `craft\\errors\\FsObjectExistsException`.\n- Added `craft\\errors\\FsObjectNotFoundException`.\n- Added `craft\\errors\\ImageTransformException`.\n- Added `craft\\errors\\InvalidFsException`.\n- Added `craft\\errors\\MissingVolumeFolderException`.\n- Added `craft\\events\\AuthorizationCheckEvent`.\n- Added `craft\\events\\CreateElementCheckEvent`.\n- Added `craft\\events\\DefineElementEditorHtmlEvent`.\n- Added `craft\\events\\DefineElementInnerHtmlEvent`. ([#11035](https://github.com/craftcms/cms/pull/11035))\n- Added `craft\\events\\DefineHtmlEvent::$static`.\n- Added `craft\\events\\FsEvent`.\n- Added `craft\\events\\GenerateTransformEvent::$asset`.\n- Added `craft\\events\\GenerateTransformEvent::$transform`.\n- Added `craft\\events\\GenerateTransformEvent::$url`.\n- Added `craft\\events\\ImageTransformerOperationEvent`.\n- Added `craft\\events\\ImageTransformEvent`.\n- Added `craft\\events\\RegisterConditionRuleTypesEvent`.\n- Added `craft\\events\\TransformImageEvent`.\n- Added `craft\\fieldlayoutelements\\addresses\\AddressField`.\n- Added `craft\\fieldlayoutelements\\addresses\\CountryCodeField`.\n- Added `craft\\fieldlayoutelements\\addresses\\LabelField`.\n- Added `craft\\fieldlayoutelements\\addresses\\LatLongField`.\n- Added `craft\\fieldlayoutelements\\addresses\\OrganizationField`.\n- Added `craft\\fieldlayoutelements\\addresses\\OrganizationTaxIdField`.\n- Added `craft\\fieldlayoutelements\\assets\\AltField`.\n- Added `craft\\fieldlayoutelements\\BaseField::selectorLabel()`.\n- Added `craft\\fieldlayoutelements\\FullNameField`.\n- Added `craft\\fieldlayoutelements\\TextareaField`.\n- Added `craft\\fieldlayoutelements\\users\\AddressesField`.\n- Added `craft\\fields\\Assets::$allowSubfolders`.\n- Added `craft\\fields\\Assets::$restrictedDefaulUploadSubpath`.\n- Added `craft\\fields\\BaseRelationField::createSelectionCondition()`.\n- Added `craft\\fields\\BaseRelationField::getSelectionCondition()`.\n- Added `craft\\fields\\BaseRelationField::setSelectionCondition()`.\n- Added `craft\\fields\\conditions\\DateFieldConditionRule`.\n- Added `craft\\fields\\conditions\\FieldConditionRuleInterface`.\n- Added `craft\\fields\\conditions\\FieldConditionRuleTrait`.\n- Added `craft\\fields\\conditions\\LightswitchFieldConditionRule`.\n- Added `craft\\fields\\conditions\\NumberFieldConditionRule`.\n- Added `craft\\fields\\conditions\\OptionsFieldConditionRule`.\n- Added `craft\\fields\\conditions\\RelationalFieldConditionRule`.\n- Added `craft\\fields\\conditions\\TextFieldConditionRule`.\n- Added `craft\\fields\\Money`.\n- Added `craft\\fs\\Local`.\n- Added `craft\\fs\\MissingFs`.\n- Added `craft\\fs\\Temp`.\n- Added `craft\\gql\\arguments\\elements\\Address`.\n- Added `craft\\gql\\base\\SingularTypeInterface`.\n- Added `craft\\gql\\interfaces\\elements\\Address`.\n- Added `craft\\gql\\queries\\Address`.\n- Added `craft\\gql\\resolvers\\elements\\Address`.\n- Added `craft\\gql\\TypeManager::registerFieldDefinitions()`.\n- Added `craft\\gql\\types\\elements\\Address`.\n- Added `craft\\gql\\types\\generators\\AddressType`.\n- Added `craft\\helpers\\App::cliOption()`.\n- Added `craft\\helpers\\App::devMode()`.\n- Added `craft\\helpers\\App::envConfig()`. ([#10869](https://github.com/craftcms/cms/pull/10869))\n- Added `craft\\helpers\\App::isStreamLog()`.\n- Added `craft\\helpers\\App::normalizeValue()`.\n- Added `craft\\helpers\\Assets::downloadFile()`.\n- Added `craft\\helpers\\Assets::iconPath()`.\n- Added `craft\\helpers\\Assets::iconUrl()`.\n- Added `craft\\helpers\\Assets::revParams()`.\n- Added `craft\\helpers\\Cp::addressCardHtml()`.\n- Added `craft\\helpers\\Cp::addressCardsHtml()`.\n- Added `craft\\helpers\\Cp::addressFieldsHtml()`.\n- Added `craft\\helpers\\Cp::dateFieldHtml()`.\n- Added `craft\\helpers\\Cp::dateHtml()`.\n- Added `craft\\helpers\\Cp::elementSelectHtml()`.\n- Added `craft\\helpers\\Cp::EVENT_DEFINE_ELEMENT_INNER_HTML`. ([#11035](https://github.com/craftcms/cms/pull/11035))\n- Added `craft\\helpers\\Cp::fieldLayoutDesignerHtml()`.\n- Added `craft\\helpers\\Cp::lightswitchHtml()`.\n- Added `craft\\helpers\\Cp::multiSelectFieldHtml()`.\n- Added `craft\\helpers\\Cp::multiSelectHtml()`.\n- Added `craft\\helpers\\Cp::requestedSite()`.\n- Added `craft\\helpers\\Cp::textareaHtml()`.\n- Added `craft\\helpers\\Cp::textHtml()`.\n- Added `craft\\helpers\\Cp::timeFieldHtml()`.\n- Added `craft\\helpers\\Cp::timeHtml()`.\n- Added `craft\\helpers\\Db::dropAllForeignKeysToTable()`.\n- Added `craft\\helpers\\Db::dropForeignKeyIfExists()`.\n- Added `craft\\helpers\\Db::dropIndexIfExists()`.\n- Added `craft\\helpers\\Db::findForeignKey()`.\n- Added `craft\\helpers\\Db::findIndex()`.\n- Added `craft\\helpers\\Db::parseMoneyParam()`.\n- Added `craft\\helpers\\Db::parseNumericParam()`.\n- Added `craft\\helpers\\Db::prepareMoneyForDb()`.\n- Added `craft\\helpers\\Db::renameTable()`.\n- Added `craft\\helpers\\FileHelper::deleteFileAfterRequest()`.\n- Added `craft\\helpers\\FileHelper::deleteQueuedFiles()`.\n- Added `craft\\helpers\\Gql::getSchemaContainedEntryTypes)()`.\n- Added `craft\\helpers\\Html::hiddenLabel()`.\n- Added `craft\\helpers\\Html::unwrapCondition()`.\n- Added `craft\\helpers\\Html::unwrapNoscript()`.\n- Added `craft\\helpers\\ImageTransforms`.\n- Added `craft\\helpers\\Money`.\n- Added `craft\\helpers\\Number::isInt()`.\n- Added `craft\\helpers\\Number::toIntOrFloat()`.\n- Added `craft\\helpers\\ProjectConfig::encodeValueAsString()`.\n- Added `craft\\helpers\\ProjectConfig::ensureAllSectionsProcessed()`.\n- Added `craft\\helpers\\ProjectConfig::traverseDataArray()`.\n- Added `craft\\helpers\\Typecast`. ([#10706](https://github.com/craftcms/cms/pull/10706))\n- Added `craft\\i18n\\Translation`.\n- Added `craft\\imagetransforms\\ImageTransformer`.\n- Added `craft\\log\\ContextProcessor`.\n- Added `craft\\log\\Dispatcher::getTargets()`.\n- Added `craft\\log\\MessageProcessor`.\n- Added `craft\\log\\MonologTarget`.\n- Added `craft\\models\\AssetIndexingSession`.\n- Added `craft\\models\\FieldLayout::getElementsByType()`.\n- Added `craft\\models\\FieldLayout::getFirstElementByType()`.\n- Added `craft\\models\\FieldLayout::getFirstVisibleElementByType()`.\n- Added `craft\\models\\FieldLayout::getVisibleCustomFields()`.\n- Added `craft\\models\\FieldLayout::getVisibleElementsByType()`.\n- Added `craft\\models\\FieldLayoutElement::$uid`.\n- Added `craft\\models\\FieldLayoutElement::getLayout()` and `setLayout()`.\n- Added `craft\\models\\FieldLayoutForm::getVisibleElements()`.\n- Added `craft\\models\\FieldLayoutFormTab::getTabId()`.\n- Added `craft\\models\\FieldLayoutFormTab::getUid()`.\n- Added `craft\\models\\FieldLayoutTab::getElements()` and `setElements()`.\n- Added `craft\\models\\FsListing`.\n- Added `craft\\models\\ImageTransform`.\n- Added `craft\\models\\ImageTransformIndex`.\n- Added `craft\\models\\ProjectConfigData`.\n- Added `craft\\models\\ReadOnlyProjectConfigData`.\n- Added `craft\\models\\Volume`.\n- Added `craft\\queue\\jobs\\Proxy`.\n- Added `craft\\queue\\Queue::$proxyQueue`, which can be set to another queue configuration that all jobs should be sent to as proxies. ([#10999](https://github.com/craftcms/cms/pull/10999))\n- Added `craft\\records\\Address`.\n- Added `craft\\records\\AssetIndexingSession`.\n- Added `craft\\records\\ImageTransform`.\n- Added `craft\\services\\Addresses`.\n- Added `craft\\services\\AssetIndexer::createIndexingSession()`.\n- Added `craft\\services\\AssetIndexer::getExistingIndexingSessions()`.\n- Added `craft\\services\\AssetIndexer::getIndexingSessionById()`.\n- Added `craft\\services\\AssetIndexer::getMissingEntriesForSession()`.\n- Added `craft\\services\\AssetIndexer::getSkippedItemsForSession()`.\n- Added `craft\\services\\AssetIndexer::indexFileByListing()`.\n- Added `craft\\services\\AssetIndexer::indexFolderByEntry()`.\n- Added `craft\\services\\AssetIndexer::indexFolderByListing()`.\n- Added `craft\\services\\AssetIndexer::processIndexSession()`.\n- Added `craft\\services\\AssetIndexer::removeCliIndexingSessions()`.\n- Added `craft\\services\\AssetIndexer::startIndexingSession()`.\n- Added `craft\\services\\AssetIndexer::stopIndexingSession()`.\n- Added `craft\\services\\Assets::getImagePreviewUrl()`.\n- Added `craft\\services\\AssetTransforms::deleteTransformIndexDataByAssetIds()`.\n- Added `craft\\services\\Conditions`.\n- Added `craft\\services\\Config::CATEGORY_CUSTOM`.\n- Added `craft\\services\\Config::getCustom()`.\n- Added `craft\\services\\Drafts::removeDraftData()`.\n- Added `craft\\services\\ElementSources`, which replaces `craft\\services\\ElementIndexes`.\n- Added `craft\\services\\Fields::createLayout()`.\n- Added `craft\\services\\Fs`.\n- Added `craft\\services\\Gc::hardDeleteElements()`.\n- Added `craft\\services\\Gc::removeEmptyTempFolders()`.\n- Added `craft\\services\\Gql::prepareFieldDefinitions()`.\n- Added `craft\\services\\ImageTransforms`.\n- Added `craft\\services\\Matrix::createRevisionBlocks()`.\n- Added `craft\\services\\Matrix::duplicateOwnership()`.\n- Added `craft\\services\\ProjectConfig::ASSOC_KEY`.\n- Added `craft\\services\\ProjectConfig::PATH_DATE_MODIFIED`.\n- Added `craft\\services\\ProjectConfig::PATH_ELEMENT_SOURCES`.\n- Added `craft\\services\\ProjectConfig::PATH_FS`.\n- Added `craft\\services\\ProjectConfig::PATH_META_NAMES`.\n- Added `craft\\services\\ProjectConfig::PATH_SCHEMA_VERSION`.\n- Added `craft\\services\\ProjectConfig::PATH_SYSTEM`.\n- Added `craft\\services\\ProjectConfig::rememberAppliedChanges()`.\n- Added `craft\\services\\Users::deactivateUser()`.\n- Added `craft\\services\\Users::ensureUserByEmail()`, which will return a user for the given email, creating one if it didn\u2019t exist yet.\n- Added `craft\\services\\Users::EVENT_AFTER_DEACTIVATE_USER`.\n- Added `craft\\services\\Users::EVENT_BEFORE_DEACTIVATE_USER`.\n- Added `craft\\services\\Users::removeCredentials()`.\n- Added `craft\\services\\Volumes::getTemporaryVolume()`.\n- Added `craft\\services\\Volumes::getUserPhotoVolume()`.\n- Added `craft\\validators\\MoneyValidator`.\n- Added `craft\\web\\assets\\conditionbuilder\\ConditionBuilderAsset`.\n- Added `craft\\web\\assets\\htmx\\HtmxAsset`.\n- Added `craft\\web\\assets\\money\\MoneyAsset`.\n- Added `craft\\web\\Controller::asCpScreen()`.\n- Added `craft\\web\\Controller::asFailure()`.\n- Added `craft\\web\\Controller::asModelFailure()`.\n- Added `craft\\web\\Controller::asModelSuccess()`.\n- Added `craft\\web\\Controller::asSuccess()`.\n- Added `craft\\web\\Controller::CpScreenResponseBehavior()`.\n- Added `craft\\web\\Controller::CpScreenResponseFormatter()`.\n- Added `craft\\web\\Controller::getPostedRedirectUrl()`.\n- Added `craft\\web\\Controller::TemplateResponseBehavior()`.\n- Added `craft\\web\\Controller::TemplateResponseFormatter()`.\n- Added `craft\\web\\twig\\Extension::addressFilter()`.\n- Added `craft\\web\\twig\\Extension::moneyFilter()`.\n- Added `craft\\web\\twig\\variables\\Cp::fieldLayoutDesigner()`.\n- Added `craft\\web\\twig\\variables\\Cp::getFsOptions()`.\n- Added `craft\\web\\twig\\variables\\Cp::getVolumeOptions()`.\n- Added `craft\\web\\View::clearCssFileBuffer()`.\n- Added `craft\\web\\View::clearJsFileBuffer()`.\n- Added `craft\\web\\View::startCssFileBuffer()`.\n- Added `craft\\web\\View::startJsFileBuffer()`.\n- Added the `Craft.appendBodyHtml()` JavaScript method, which replaces the now-deprecated `appendFootHtml()` method.\n- Added the `Craft.CpScreenSlideout` JavaScript class, which can be used to create slideouts from actions that return `$this->asCpScreen()`.\n- Added the `Craft.ElementEditor` JavaScript class.\n- Added the `Craft.ElementEditorSlideout` JavaScript class.\n- Added the `Craft.getPageUrl()` JavaScript method.\n- Added the `Craft.getQueryParam()` JavaScript method.\n- Added the `Craft.getQueryParams()` JavaScript method.\n- Added the `Craft.namespaceId()` JavaScript method.\n- Added the `Craft.namespaceInputName()` JavaScript method.\n- Added the `Craft.Preview.refresh()` JavaScript method.\n- Added the `Craft.Queue` JavaScript class.\n- Added the `Craft.setElementAttributes()` JavaScript method.\n- Added the `Craft.setPath()` JavaScript method.\n- Added the `Craft.setQueryParam()` JavaScript method.\n- Added the `Craft.setUrl()` JavaScript method.\n- Added the `Craft.ui.createButton()` JavaScript method.\n- Added the `Craft.ui.createSubmitButton()` JavaScript method.\n- Added the `htmx.org` JavaScript library.\n- Added the commerceguys/addressing package.\n- Added the illuminate/collections package. ([#8475](https://github.com/craftcms/cms/discussions/8475))\n- Added the moneyphp/money package.\n- Added the symfony/var-dumper package.\n- Added the theiconic/name-parser package.\n- Added the yiisoft/yii2-symfonymailer package.\n\n### Changed\n- Craft now requires PHP 8.0.2 or later.\n- Craft now requires MySQL 5.7.8 / MariaDB 10.2.7 / PostgreSQL 10.0 or later.\n- Craft now requires the [Intl](https://php.net/manual/en/book.intl.php) and [BCMath](https://www.php.net/manual/en/book.bc.php) PHP extensions.\n- Improved draft creation/application performance. ([#10577](https://github.com/craftcms/cms/pull/10577))\n- Improved revision creation performance. ([#10589](https://github.com/craftcms/cms/pull/10577))\n- The \u201cWhat\u2019s New\u201d HUD now displays an icon and label above each announcement, identifying where it came from (Craft CMS or a plugin). ([#9747](https://github.com/craftcms/cms/discussions/9747))\n- The control panel now keeps track of the currently-edited site on a per-tab basis by adding a `site` query string param to all control panel URLs. ([#8920](https://github.com/craftcms/cms/discussions/8920))\n- Element index pages\u2019 status and sort menu option selections are now coded into the page URL via `status` and `sort` query string params. ([#10669](https://github.com/craftcms/cms/discussions/10669))\n- Users are no longer required to have a username or email.\n- Users can now set their Formatting Locale to any known locale; not just the available Language options. ([#10519](https://github.com/craftcms/cms/pull/10519))\n- Users\u2019 Language and Formatting Locale settings now display locale names in the current language and their native languages. ([#10519](https://github.com/craftcms/cms/pull/10519))\n- User queries now return all users by default, rather than only active users.\n- Filtering users by `active`, `pending`, and `locked` statuses no longer excludes suspended users.\n- `credentialed` and `inactive` are now reserved user group handles.\n- Elements throughout the control panel are now automatically updated whenever they\u2019re saved by another browser tab.\n- Assets fields that are restricted to a single location can now be configured to allow selection within subfolders of that location. ([#9070](https://github.com/craftcms/cms/discussions/9070))\n- When an image is saved as a new asset from the Image Editor via an Assets field, the Assets field will now automatically replace the selected asset with the new one. ([#8974](https://github.com/craftcms/cms/discussions/8974))\n- `alt` is now a reserved field handle for volume field layouts.\n- Volumes no longer have \u201ctypes\u201d, and their file operations are now delegated to a filesystem selected by an \u201cAsset Filesystem\u201d setting on the volume.\n- Volumes now have \u201cTransform Filesystem\u201d and \u201cTransform Subpath\u201d settings, which can be used to choose where image transforms should be stored. (The volume\u2019s Asset Filesystem will be used by default.)\n- Asset thumbnails are now generated as image transforms.\n- It\u2019s now possible to create volumes directly from the User Settings page.\n- Images that are not web-safe now are always converted to JPEGs when transforming, if no format was specified.\n- Entry post dates are no longer set automatically until the entry is validated with the `live` scenario. ([#10093](https://github.com/craftcms/cms/pull/10093))\n- Entry queries\u2019 `authorGroup()` param method now accepts an array of `craft\\models\\UserGroup` objects.\n- Element queries\u2019 `revision` params can now be set to `null` to include normal and revision elements.\n- Element queries can no longer be traversed or accessed like an array. Use a query execution method such as `all()`, `collect()`, or `one()` to fetch the results before working with them.\n- Element queries\u2019 `title` params no longer treat values with commas as arrays. ([#10891](https://github.com/craftcms/cms/issues/10891))\n- User queries\u2019 `firstName` and `lastName` params no longer treat values with commas as arrays. ([#10891](https://github.com/craftcms/cms/issues/10891))\n- Relational fields now load elements in the current site rather than the primary site, if the source element isn\u2019t localizable. ([#7048](https://github.com/craftcms/cms/issues/7048))\n- Lightswitch fields can no longer be marked as required within field layouts. ([#10773](https://github.com/craftcms/cms/issues/10773))\n- Built-in queue jobs are now always translated for the current user\u2019s language. ([#9745](https://github.com/craftcms/cms/pull/9745))\n- Path options passed to console commands (e.g. `--basePath`) now take precedence over their enivronment variable/PHP constant counterparts.\n- Database backups are now named after the Craft version in the database, rather than the Composer-installed version. ([#9733](https://github.com/craftcms/cms/discussions/9733))\n- Template autosuggestions now include their filename. ([#9744](https://github.com/craftcms/cms/pull/9744))\n- Improved the look of loading spinners in the control panel. ([#9109](https://github.com/craftcms/cms/discussions/9109))\n- The default `subLeft` and `subRight` search query term options are now only applied to terms that don\u2019t include an asterisk at the beginning/end, e.g. `hello*`. ([#10613](https://github.com/craftcms/cms/discussions/10613))\n- `{% cache %}` tags now store any external JavaScript or CSS files registered with `{% js %}` and `{% css %}` tags. ([#9987](https://github.com/craftcms/cms/discussions/9987))\n- All control panel templates end in `.twig` now. ([#9743](https://github.com/craftcms/cms/pull/9743))\n- 404 requests are no longer logged by default. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- Log entries are now single-line by default when Dev Mode is disabled. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- Log files are now rotated once every 24 hours. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- `CRAFT_STREAM_LOG` no longer logs _in addition to_ other log targets. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- The default log target no longer logs `debug` or `info` messages when Dev Mode is enabled. ([#10916](https://github.com/craftcms/cms/pull/10916))\n- SQL query logs now use the `debug` log level, so they no longer get logged when Dev Mode is enabled. ([#10916](https://github.com/craftcms/cms/pull/10916))\n- `yii\\db\\Connection::$enableLogging` and `$enableProfiling` are no longer enabled by default when Dev Mode is disabled. ([#10916](https://github.com/craftcms/cms/pull/10916))\n- The `queue` log target no longer has special handling for Yii or `info` logs. ([#10916](https://github.com/craftcms/cms/pull/10916))\n- A warning is now logged if an element query is executed before Craft is fully initialized. ([#11033](https://github.com/craftcms/cms/issues/11033))\n- A warning is now logged if Twig is instantiated before Craft is fully initialized. ([#11033](https://github.com/craftcms/cms/issues/11033))\n- Craft\u2019s bootstrap script now attempts to create its configured system paths automatically. ([#10562](https://github.com/craftcms/cms/pull/10562))\n- When using GraphQL to mutate entries, the `enabled` status is now affected on a per-site basis when specifying both the `enabled` and `siteId` parameters. ([#9771](https://github.com/craftcms/cms/issues/9771))\n- The `forms/selectize` control panel template now supports `addOptionFn` and `addOptionLabel` params, which can be set to add new options to the list.\n- Editable tables now support `allowAdd`, `allowDelete`, and `allowReorder` settings, replacing `staticRows`. ([#10163](https://github.com/craftcms/cms/pull/10163))\n- Column definitions passed to the `_includes/forms/editableTable` control panel template can now specify a `width` key. ([#11062](https://github.com/craftcms/cms/pull/11062))\n- The `limitField` macro in the `_components/fieldtypes/elementfieldsettings` control panel template has been renamed to `limitFields`.\n- Renamed the `elements/get-categories-input-html` action to `categories/input-html`.\n- Renamed the `elements/get-modal-body` action to `element-selector-modals/body`.\n- The `entries/save-entry` action now returns a 400 HTTP status for JSON responses when the entry couldn\u2019t be saved.\n- The `users/save-user` action no longer includes a `unverifiedEmail` key in failure responses.\n- The `users/set-password` action now returns a 400 HTTP status when an invalid token is passed, if there\u2019s no URL to redirect to. ([#10592](https://github.com/craftcms/cms/discussions/10592))\n- `install/*`, `setup/*`, `db/*`, and `help` actions no longer output a warning if Craft can\u2019t connect to the database. ([#10851](https://github.com/craftcms/cms/pull/10851))\n- `createFoldersInVolume:<uid>` user permissions have been renamed to `createFolders:<uid>`.\n- `deleteFilesAndFoldersInVolume:<uid>` user permissions have been renamed to `deleteAssets:<uid>`.\n- `deletePeerFilesInVolume:<uid>` user permissions have been renamed to `deletePeerAssets:<uid>`.\n- `editCategories:<uid>` user permissions have been split into `viewCategories:<uid>`, `saveCategories:<uid>`, `deleteCategories:<uid>`, `viewPeerCategoryDrafts:<uid>`, `savePeerCategoryDrafts:<uid>`, and `deletePeerCategoryDrafts:<uid>`.\n- `editEntries:<uid>` user permissions have been renamed to `viewEntries:<uid>`.\n- `editImagesInVolume:<uid>` user permissions have been renamed to `editImages:<uid>`.\n- `editPeerEntries:<uid>` user permissions have been renamed to `viewPeerEntries:<uid>`.\n- `editPeerEntryDrafts:<uid>` user permissions have been split into `viewPeerEntryDrafts:<uid>` and `savePeerEntryDrafts:<uid>`.\n- `editPeerFilesInVolume:<uid>` user permissions have been renamed to `savePeerAssets:<uid>`.\n- `editPeerImagesInVolume:<uid>` user permissions have been renamed to `editPeerImages:<uid>`.\n- `publishEntries:<uid>` user permissions have been renamed to `saveEntries:<uid>`, and no longer differentiate between enabled and disabled entries. (Users with `viewEntries:<uid>` permissions will still be able to create drafts.)\n- `publishPeerEntries:<uid>` user permissions have been renamed to `savePeerEntries:<uid>`, and no longer differentiate between enabled and disabled entries. (Users with `viewPeerEntries:<uid>` permissions will still be able to create drafts.)\n- `replaceFilesInVolume:<uid>` user permissions have been renamed to `replaceFiles:<uid>`.\n- `replacePeerFilesInVolume:<uid>` user permissions have been renamed to `replacePeerFiles:<uid>`.\n- `saveAssetInVolume:<uid>` user permissions have been renamed to `saveAssets:<uid>`.\n- `viewPeerFilesInVolume:<uid>` user permissions have been renamed to `viewPeerAssets:<uid>`.\n- `viewVolume:<uid>` user permissions have been renamed to `viewAssets:<uid>`.\n- Elements\u2019 `searchScore` GraphQL fields are now returned as integers.\n- Element types must now override `craft\\base\\Element::isDeletable()` if its elements should be deletable from the index page.\n- Element types\u2019 `cpEditUrl()` methods no longer need to add a `site` param; one will be added automatically by `craft\\base\\Element::getCpEditUrl()`.\n- Element types\u2019 `defineActions()` methods\u2019 `$source` arguments should no longer accept `null`.\n- Element types\u2019 `defineSources()` methods\u2019 `$context` arguments should no longer accept `null`.\n- Element types\u2019 `getHtmlAttributes()` and `htmlAttributes()` methods must now return attribute arrays that are compatible with `craft\\helpers\\Html::renderTagAttributes()`.\n- Element types\u2019 `sources()` methods\u2019 `$context` arguments should no longer accept `null`.\n- Element types\u2019 `tableAttributes()` and `defineTableAttributes()` methods should no longer return a generic attribute for defining the header column heading at the beginning of the returned array. The header column heading is now set to the element type\u2019s display name, per its `displayName()` method.\n- Block element types\u2019 `getOwner()` methods can now return `null`.\n- Control panel resource locations are now cached, so resource requests can be resolved when Craft isn\u2019t installed yet, or a database connection can\u2019t be established. ([#10642](https://github.com/craftcms/cms/pull/10642))\n- Control panel resources are now served with cache headers, if the `buildId` config setting is set. ([#10705](https://github.com/craftcms/cms/pull/10705))\n- Empty subfolders within the temporary upload volume are now removed during garbage collection. ([#10746](https://github.com/craftcms/cms/issues/10746))\n- Most config settings can now be overridden via environment variables. ([#10573](https://github.com/craftcms/cms/pull/10573), [#10869](https://github.com/craftcms/cms/pull/10869))\n- It\u2019s now possible to configure the Debug Toolbar to store its data files on a filesystem, rather than within `storage/runtime/debug/`. ([#10825](https://github.com/craftcms/cms/pull/10825))\n- `craft\\base\\AssetPreviewHandlerInterface::getPreviewHtml()` now accepts an optional array of variable to pass on to the template.\n- `craft\\base\\Element::__get()` now clones custom field values before returning them. ([#8781](https://github.com/craftcms/cms/discussions/8781))\n- `craft\\base\\Element::fieldLayoutFields()` now has a `visibleOnly` argument.\n- `craft\\base\\Element::getFieldValue()` now returns eager-loaded element values for the field, when they exist. ([#10047](https://github.com/craftcms/cms/issues/10047))\n- `craft\\base\\Element::metaFieldsHtml()` now has a `static` argument.\n- `craft\\base\\Element::setFieldValue()` now unsets any previously-eager-loaded elements for the field. ([#11003](https://github.com/craftcms/cms/discussions/11003))\n- `craft\\base\\Element::slugFieldHtml()` now has a `static` argument.\n- `craft\\base\\ElementInterface::getEagerLoadedElements()` now returns an `Illuminate\\Support\\Collection` object instead of an array. ([#8513](https://github.com/craftcms/cms/discussions/8513))\n- `craft\\base\\ElementInterface::getSidebarHtml()` now has a `static` argument.\n- `craft\\base\\MemoizableArray` no longer extends `ArrayObject`, and now implements `IteratorAggregate` and `Countable` directly.\n- `craft\\base\\Model::__construct()` and `setAttributes()` now automatically typecast values that map to properties with `int`, `float`, `int|float`, `string`, `bool`, `array`, or `DateTime` type declarations. ([#10706](https://github.com/craftcms/cms/pull/10706))\n- `craft\\base\\Model::datetimeAttributes()` is now called from the constructor, instead of the `init()` method.\n- `craft\\base\\Model::setAttributes()` now normalizes date attributes into `DateTime` objects.\n- `craft\\behaviors\\FieldLayoutBehavior::getFields()` has been renamed to `getCustomFields()`.\n- `craft\\elements\\Asset::getImg()` now sets the `alt` attribute to the native Alternative Text field value, if set.\n- `craft\\elements\\Asset::getVolume()` now returns an instance of `craft\\models\\Volume`.\n- `craft\\elements\\db\\ElementQuery::ids()` no longer accepts an array of criteria params.\n- `craft\\events\\DraftEvent::$source` has been renamed to `$canonical`.\n- `craft\\events\\GetAssetThumbUrlEvent` has been renamed to `DefineAssetThumbUrlEvent`.\n- `craft\\events\\GetAssetUrlEvent` has been renamed to `DefineAssetUrlEvent`.\n- `craft\\events\\RevisionEvent::$source` has been renamed to `$canonical`.\n- `craft\\fieldlayoutelements\\AssetTitleField` has been renamed to `craft\\fieldlayoutelements\\assets\\AssetTitleField`.\n- `craft\\fieldlayoutelements\\EntryTitleField` has been renamed to `craft\\fieldlayoutelements\\entries\\EntryTitleField`.\n- `craft\\fieldlayoutelements\\StandardField` has been renamed to `craft\\fieldlayoutelements\\BaseNativeField`.\n- `craft\\fieldlayoutelements\\StandardTextField` has been renamed to `craft\\fieldlayoutelements\\TextField`.\n- `craft\\fields\\Assets::$singleUploadLocationSource` has been renamed to `$restrictedLocationSource`.\n- `craft\\fields\\Assets::$singleUploadLocationSubpath` has been renamed to `$restrictedLocationSubpath`.\n- `craft\\fields\\Assets::$useSingleFolder` has been renamed to `$restrictLocation`.\n- `craft\\fields\\BaseRelationField::$limit` has been renamed to `$maxRelations`.\n- `craft\\fields\\BaseRelationField::elementType()` is now public.\n- `craft\\fields\\BaseRelationField::inputSelectionCriteria()` has been renamed to `getInputSelectionCriteria()`, and is now public.\n- `craft\\fields\\BaseRelationField::inputSources()` has been renamed to `getInputSources()`, and is now public.\n- `craft\\gql\\directives\\FormatDateTime::defaultTimezone()` has been renamed to `defaultTimeZone()`.\n- `craft\\gql\\TypeManager::EVENT_DEFINE_GQL_TYPE_FIELDS` is now triggered when actually resolving fields for a GraphQL type, rather than when the type is first created. ([#9626](https://github.com/craftcms/cms/issues/9626))\n- `craft\\helpers\\App::env()` now checks for a PHP constant as well, if the environment variable didn\u2019t exist.\n- `craft\\helpers\\App::env()` now returns `null` if a value couldn\u2019t be found, rather than `false`.\n- `craft\\helpers\\App::env()` now returns a boolean if the original value was `'true'` or `'false'`.\n- `craft\\helpers\\App::env()` now returns an integer or float if the original value was numeric.\n- `craft\\helpers\\ArrayHelper::getValue()` now supports keys in square bracket syntax, e.g. `foo[bar][baz]`.\n- `craft\\helpers\\Assets::generateUrl()` no longer accepts a transform index for date modified comparisons. A `DateTime` object is expected instead.\n- `craft\\helpers\\Assets::urlAppendix()` no longer accepts a transform index for date modified comparisons. A `DateTime` object is expected instead.\n- `craft\\helpers\\Component::createComponent()` now automatically typecasts values that map to properties with `int`, `float`, `int|float`, `string`, `bool`, `array`, or `DateTime` type declarations. ([#10706](https://github.com/craftcms/cms/pull/10706))\n- `craft\\helpers\\Cp::elementHtml()` now has an `$autoReload` argument.\n- `craft\\helpers\\Db::batchInsert()`, `craft\\helpers\\Db::insert()`, `craft\\db\\Command::batchInsert()`, `craft\\db\\Command::insert()`, `craft\\db\\Migration::batchInsert()`, and `craft\\db\\Migration::insert()` no longer have `$includeAuditColumns` arguments, and now check if the table has `dateCreated`, `dateUpdated`, and/or `uid` columns before setting their values.\n- `craft\\helpers\\Db::parseParam()` now validates that numeric values are passed if the `$columnType` is set to a numeric column type. ([#9142](https://github.com/craftcms/cms/issues/9142))\n- `craft\\helpers\\Db::prepareDateForDb()` no longer has a `$stripSeconds` argument.\n- `craft\\helpers\\Db::prepareValueForDb()` now has a `$columnType` argument.\n- `craft\\helpers\\Db::truncateTable()` now returns `void` rather than `int`.\n- `craft\\helpers\\Db::update()`, `craft\\helpers\\Db::upsert()`, `craft\\db\\Command::update()`, `craft\\db\\Command::upsert()`, `craft\\db\\Migration::update()`\u2019 and `craft\\db\\Migration::upsert()`\u2019 `$includeAuditColumns` arguments have been renamed to `$updateTimestamp`, and only affect the `dateCreated` column now. All upserts now check if the table has `dateCreated`, `dateUpdated`, and/or `uid` columns before setting their values.\n- `craft\\helpers\\Db::upsert()`, `craft\\db\\Command::upsert()`, and `craft\\db\\Migration()` no longer merge the `$updateColumns` array into `$insertColumns`. The full array of `INSERT` column values should be passed to `$insertColumns` now.\n- `craft\\helpers\\Gql::getUnionType()` no longer requires a resolver function to be passed, if the union contains only element GraphQL types.\n- `craft\\helpers\\Html::beginForm()` not sets `accept-charset=\"UTF-8\"` by default.\n- `craft\\helpers\\Html` now supports defining `hx-*` and `data-hx-*` attributes via a `hx` and `data-hx` keys, similar to `aria` and `data`.\n- `craft\\helpers\\i18n\\Formatter::asPercent()` now chooses a default `$decimals` value based on the value given, if `null`.\n- `craft\\helpers\\i18n\\Formatter::asPercent()` now treats all empty values as `0`.\n- `craft\\helpers\\MailerHelper::normalizeEmails()` now returns an empty array instead of `null`.\n- `craft\\helpers\\MigrationHelper::dropAllIndexesOnTable()` no longer returns an array of the dropped indexes.\n- `craft\\helpers\\Queue::push()` now has a `$queue` argument.\n- `craft\\models\\FieldLayout::EVENT_DEFINE_STANDARD_FIELDS` has been renamed to `EVENT_DEFINE_NATIVE_FIELDS`.\n- `craft\\models\\FieldLayout::getAvailableStandardFields()` has been renamed to `getAvailableNativeFields()`.\n- `craft\\models\\FieldLayout::getFields()` has been renamed to `getCustomFields()`.\n- `craft\\queue\\Queue::$channel` is now set automatically based on the queue\u2019s application component ID.\n- `craft\\services\\Announcements::push()` no longer accepts callables to be passed to the `$heading` and `$body` arguments. `craft\\i18n\\Translation::prep()` should be used to prepare the messages to be lazy-translated instead.\n- `craft\\services\\AssetIndexer::storeIndexList()` now expects the first argument to be a generator that returns `craft\\models\\FsListing` objects.\n- `craft\\services\\Assets::ensureFolderByFullPathAndVolume()` now returns a `craft\\models\\VolumeFolder` object rather than a folder ID.\n- `craft\\services\\Assets::ensureTopFolder()` now returns a `craft\\models\\VolumeFolder` object rather than a folder ID.\n- `craft\\services\\Assets::EVENT_GET_ASSET_THUMB_URL` has been renamed to `EVENT_DEFINE_THUMB_URL`.\n- `craft\\services\\Assets::EVENT_GET_ASSET_URL` has been moved to `craft\\elements\\Asset::EVENT_DEFINE_URL`.\n- `craft\\services\\AssetTransforms::CONFIG_TRANSFORM_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_IMAGE_TRANSFORMS`.\n- `craft\\services\\Categories::CONFIG_CATEGORYROUP_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_CATEGORY_GROUPS`.\n- `craft\\services\\Fields::CONFIG_FIELDGROUP_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_FIELD_GROUPS`.\n- `craft\\services\\Fields::CONFIG_FIELDS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_FIELDS`.\n- `craft\\services\\Globals::CONFIG_GLOBALSETS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_GLOBAL_SETS`.\n- `craft\\services\\Gql::CONFIG_GQL_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_GRAPHQL`.\n- `craft\\services\\Gql::CONFIG_GQL_PUBLIC_TOKEN_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_GRAPHQL_PUBLIC_TOKEN`.\n- `craft\\services\\Gql::CONFIG_GQL_SCHEMAS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_GRAPHQL_SCHEMAS`.\n- `craft\\services\\Matrix::CONFIG_BLOCKTYPE_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_MATRIX_BLOCK_TYPES`.\n- `craft\\services\\Matrix::duplicateBlocks()` now has a `$deleteOtherBlocks` argument.\n- `craft\\services\\Plugins::CONFIG_PLUGINS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_PLUGINS`.\n- `craft\\services\\Plugins::doesPluginRequireDatabaseUpdate()` has been renamed to `isPluginUpdatePending()`.\n- `craft\\services\\ProjectConfig::applyYamlChanges()` has been renamed to `applyExternalChanges()`.\n- `craft\\services\\ProjectConfig::getDoesYamlExist()` has been renamed to `getDoesExternalConfigExist()`.\n- `craft\\services\\ProjectConfig::getIsApplyingYamlChanges()` has been renamed to `getIsApplyingExternalChanges()`.\n- `craft\\services\\ProjectConfig::set()` now returns `true` or `false` depending on whether the project config was modified.\n- `craft\\services\\Revisions::createRevision()` now returns the ID of the revision, rather than the revision itself.\n- `craft\\services\\Routes::CONFIG_ROUTES_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_ROUTES`.\n- `craft\\services\\Sections::CONFIG_ENTRYTYPES_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_ENTRY_TYPES`.\n- `craft\\services\\Sections::CONFIG_SECTIONS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_PATH_SECTIONS`.\n- `craft\\services\\Sites::CONFIG_SITEGROUP_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_SITE_GROUPS`.\n- `craft\\services\\Sites::CONFIG_SITES_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_SITES`.\n- `craft\\services\\Tags::CONFIG_TAGGROUP_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_TAG_GROUPS`.\n- `craft\\services\\Updates::getIsCraftDbMigrationNeeded()` has been renamed to `getIsCraftUpdatePending()`.\n- `craft\\services\\Updates::getIsPluginDbUpdateNeeded()` has been renamed to `getIsPluginUpdatePending()`.\n- `craft\\services\\UserGroups::CONFIG_USERPGROUPS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_USER_GROUPS`.\n- `craft\\services\\UserPermissions::getAllPermissions()` and `getAssignablePermissions()` now return permission groups as arrays with `heading` and `permission` sub-keys, fixing a bug where two groups with the same heading would conflict with each other. ([#7771](https://github.com/craftcms/cms/issues/7771))\n- `craft\\services\\Users::CONFIG_USERLAYOUT_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_USER_FIELD_LAYOUTS`.\n- `craft\\services\\Users::CONFIG_USERS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_USERS`.\n- `craft\\services\\Volumes::CONFIG_VOLUME_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_VOLUMES`.\n- `craft\\test\\fixtures\\elements\\BaseElementFixture` now validates elements with the `live` scenario if they are enabled, canonical, and not a provisional draft.\n- `craft\\test\\TestSetup::getMockApp()` has been renamed to `getMockModule()`, and its `$appClass` argument has been renamed to `$moduleClass`.\n- `craft\\web\\Request::getBodyParam()` now accepts nested param names in the `foo[bar][baz]` format.\n- `craft\\web\\Request::getBodyParams()` and `getBodyParam()` now check for an `X-Craft-Namespace` header. If present, only params that begin with its value will be returned, excluding the namespace.\n- `craft\\web\\View::renderString()` now has an `$escapeHtml` argument.\n- `craft\\web\\View::setNamespace()`\u2019 `$namespace` argument no longer has a default value of `null`.\n- The `Craft.getUrl()` JavaScript method now removes duplicate query string params when passing in a param that\u2019s already included in the base URL.\n- The `Craft.getUrl()` JavaScript method now encodes any query string params passed to it.\n- `Craft.broadcastChannel` has been split up into two broadcast channels: `Craft.broadcaster` and `Craft.messageReceiver`.\n- `Craft.cp.$tabs` now returns a collection of the tabs\u2019 `<a>` elements, as they no longer have wrapping `<li>` elements.\n- Local volumes no longer use Flysystem.\n- A selected volume for user photo storage if no longer displayed if no volume has been set.\n- The user photo volume can now only be set to a volume that has a public transform filesystem configured.\n- Craft now uses Symfony Mailer to send email. ([#10062](https://github.com/craftcms/cms/discussions/10062))\n- Updated Twig to 3.3.\n- Updated vue-autosuggest to 2.2.0.\n\n### Deprecated\n- Deprecated the `autosaveDrafts` config setting.\n- Deprecated the `anyStatus` element query param. `status(null)` should be used instead.\n- Deprecated the `immediately` argument for transforms created over GraphQL. It no longer has any effect.\n- Deprecated `craft\\base\\ApplicationTrait::getInstalledSchemaVersion()`.\n- Deprecated `craft\\base\\Model::datetimeAttributes()`. ([#10706](https://github.com/craftcms/cms/pull/10706))\n- Deprecated `craft\\elements\\User::getFullName()`. `$fullName` should be used instead.\n- Deprecated `craft\\gql\\TypeManager::flush()`. `craft\\services\\Gql::flushCaches()` should be used instead.\n- Deprecated `craft\\gql\\TypeManager::prepareFieldDefinitions()`. `craft\\services\\Gql::prepareFieldDefinitions()` should be used instead.\n- Deprecated `craft\\helpers\\ArrayHelper::append()`. `array_unshift()` should be used instead.\n- Deprecated `craft\\helpers\\ArrayHelper::prepend()`. `array_push()` should be used instead.\n- Deprecated `craft\\helpers\\MigrationHelper`.\n- Deprecated `craft\\i18n\\I18N::getIsIntlLoaded()`.\n- Deprecated `craft\\services\\Assets::getAssetUrl()`. `craft\\elements\\Asset::getUrl()` should be used instead.\n- Deprecated `craft\\services\\Assets::getIconPath()`. `craft\\helpers\\Assets::iconPath()` should be used instead.\n- Deprecated `craft\\web\\Controller::asErrorJson()`. `asFailure()` should be used instead.\n- Deprecated the `assets/save-asset` action. `elements/save` should be used instead.\n- Deprecated the `categories/save-category` action. `elements/save` should be used instead.\n- Deprecated the `Craft.appendFootHtml()` JavaScript method. `appendBodyHtml()` should be used instead.\n\n### Removed\n- Removed the \u201cHeader Column Heading\u201d element source setting.\n- Removed support for setting custom config settings from `config/general.php`. `config/custom.php` should be used instead. ([#10012](https://github.com/craftcms/cms/issues/10012))\n- Removed the `customAsciiCharMappings` config setting.\n- Removed the `siteName` config setting. Environment-specific site names can be defined via environment variables.\n- Removed the `siteUrl` config setting. Environment-specific site URLs can be defined via environment variables.\n- Removed the `suppressTemplateErrors` config setting.\n- Removed the `useCompressedJs` config setting.\n- Removed the `useProjectConfigFile` config setting. Override `craft\\services\\ProjectConfig::$writeYamlAutomatically` to opt into [manual YAML file generation](https://craftcms.com/docs/4.x/project-config.html#manual-yaml-file-generation).\n- Removed support for `config/volumes.php`. Volumes can now specify per-environment filesystems.\n- Removed support for the `CRAFT_SITE_URL` PHP constant. Environment-specific site URLs can be defined via environment variables.\n- Removed the `enabledForSite` GraphQL argument. `status` should be used instead.\n- Removed the `{% includeHiResCss %}` Twig tag.\n- Removed support for deprecated `DateTime` faux Twig methods `atom()`, `cookie()`, `iso8601()`, `rfc822()`, `rfc850()`, `rfc1036()`, `rfc1123()`, `rfc2822()`, `rfc3339()`, `rss()`, `w3c()`, `w3cDate()`, `mySqlDateTime()`, `localeDate()`, `localeTime()`, `year()`, `month()`, `day()`, `nice()`, and `uiTimestamp()`.\n- Removed the `locale` element property. `siteId` should be used instead.\n- Removed the `ownerLocale` Matrix block query param. `site` or `siteId` should be used instead.\n- Removed support for `sourceLocale` in `relatedTo` element query params. `sourceSite` should be used instead.\n- Removed the `craft.categoryGroups` Twig variable.\n- Removed the `craft.config` Twig variable.\n- Removed the `craft.deprecator` Twig variable.\n- Removed the `craft.elementIndexes` Twig variable.\n- Removed the `craft.emailMessages` Twig variable.\n- Removed the `craft.feeds` Twig variable.\n- Removed the `craft.fields` Twig variable.\n- Removed the `craft.globals` Twig variable.\n- Removed the `craft.i18n` Twig variable.\n- Removed the `craft.request` Twig variable.\n- Removed the `craft.sections` Twig variable.\n- Removed the `craft.session` Twig variable.\n- Removed the `craft.systemSettings` Twig variable.\n- Removed the `craft.userGroups` Twig variable.\n- Removed the `craft.userPermissions` Twig variable.\n- Removed the `assignUserGroups` user permission, which authorized users to assign other users to their own groups. Authorization must now be explicitly granted for each group. ([#10422](https://github.com/craftcms/cms/issues/10422))\n- Removed the `customizeSources` user permission. Only admins can customize element sources now, and only from an environment that allows admin changes.\n- Removed the `publishPeerEntryDrafts:<uid>` permissions, as they were pointless. (If a user is authorized to save an entry and view other users\u2019 drafts of it, there\u2019s nothing stopping them from making the same changes themselves.)\n- Removed the `assets/edit-asset` action.\n- Removed the `assets/thumb` action.\n- Removed the `categories/edit-category` action.\n- Removed the `categories/preview-category` action.\n- Removed the `categories/share-category` action.\n- Removed the `categories/view-shared-category` action.\n- Removed the `dashboard/get-feed-items` action.\n- Removed the `elements/get-editor-html` action.\n- Removed the `entries/switch-entry-type` action.\n- Removed `craft\\base\\ApplicationTrait::getEntryRevisions()`.\n- Removed `craft\\base\\ApplicationTrait::getFeed()`.\n- Removed `craft\\base\\Element::ATTR_STATUS_CONFLICTED`.\n- Removed `craft\\base\\Element::getHasFreshContent()`. `getIsFresh()` should be used instead.\n- Removed `craft\\base\\ElementInterface::getEditorHtml()`. Element edit forms are now exclusively driven by their field layout.\n- Removed `craft\\base\\FieldLayoutElementInterface`.\n- Removed `craft\\base\\FlysystemVolume`.\n- Removed `craft\\base\\LocalVolumeInterface`.\n- Removed `craft\\base\\Volume`.\n- Removed `craft\\base\\VolumeInterface`.\n- Removed `craft\\base\\VolumeTrait`.\n- Removed `craft\\behaviors\\FieldLayoutBehavior::setFields()`.\n- Removed `craft\\config\\DbConfig::updateDsn()`.\n- Removed `craft\\console\\Request::getIsSingleActionRequest()`.\n- Removed `craft\\controllers\\AssetTransformsController`.\n- Removed `craft\\controllers\\BaseUpdaterController::ACTION_COMPOSER_OPTIMIZE`.\n- Removed `craft\\controllers\\BaseUpdaterController::actionComposerOptimize()`.\n- Removed `craft\\controllers\\Drafts`.\n- Removed `craft\\controllers\\ElementIndexesController::$paginated`.\n- Removed `craft\\controllers\\EntriesController::EVENT_PREVIEW_ENTRY`.\n- Removed `craft\\controllers\\UtilitiesController::actionAssetIndexPerformAction()`.\n- Removed `craft\\db\\Connection::trimObjectName()`.\n- Removed `craft\\db\\Table::ASSETTRANSFORMINDEX`.\n- Removed `craft\\db\\Table::ASSETTRANSFORMS`.\n- Removed `craft\\elements\\actions\\SetStatus::$allowDisabledForSite`.\n- Removed `craft\\elements\\actions\\SetStatus::DISABLED_FOR_SITE`.\n- Removed `craft\\elements\\actions\\SetStatus::DISABLED_GLOBALLY`.\n- Removed `craft\\elements\\Asset::getSupportsPreview()`.\n- Removed `craft\\elements\\Asset::getTransformSource()`.\n- Removed `craft\\elements\\Asset::setTransformSource()`.\n- Removed `craft\\elements\\db\\ElementQuery::getIterator()`.\n- Removed `craft\\elements\\db\\ElementQuery::offsetExists()`.\n- Removed `craft\\elements\\db\\ElementQuery::offsetGet()`.\n- Removed `craft\\elements\\db\\ElementQuery::offsetSet()`.\n- Removed `craft\\elements\\db\\ElementQuery::offsetUnset()`.\n- Removed `craft\\elements\\User::mergePreferences()`.\n- Removed `craft\\errors\\AssetTransformException`.\n- Removed `craft\\errors\\FieldNotFoundException`.\n- Removed `craft\\errors\\InvalidVolumeException`.\n- Removed `craft\\errors\\MissingVolumeFolderException`.\n- Removed `craft\\errors\\VolumeException`.\n- Removed `craft\\errors\\VolumeObjectExistsException`.\n- Removed `craft\\errors\\VolumeObjectNotFoundException`.\n- Removed `craft\\events\\AssetTransformEvent`.\n- Removed `craft\\events\\AssetTransformImageEvent`.\n- Removed `craft\\events\\DefineComponentsEvent`.\n- Removed `craft\\events\\GenerateTransformEvent::$image`.\n- Removed `craft\\events\\GenerateTransformEvent::$tempPath`.\n- Removed `craft\\events\\GetAssetThumbEvent`.\n- Removed `craft\\events\\GetAssetThumbUrlEvent::$generate`.\n- Removed `craft\\events\\GetAssetThumbUrlEvent::$size`.\n- Removed `craft\\events\\GlobalSetContentEvent`.\n- Removed `craft\\events\\RegisterGqlPermissionsEvent`.\n- Removed `craft\\events\\SearchEvent::getElementIds()`.\n- Removed `craft\\events\\SearchEvent::setElementIds()`.\n- Removed `craft\\feeds\\Feeds`.\n- Removed `craft\\feeds\\GuzzleClient`.\n- Removed `craft\\fields\\BaseOptionsField::optionLabel()`.\n- Removed `craft\\fields\\Url::$placeholder`.\n- Removed `craft\\gql\\base\\Resolver::extractEagerLoadCondition()`.\n- Removed `craft\\gql\\base\\Resolver::getArrayableArguments()`.\n- Removed `craft\\gql\\base\\Resolver::prepareArguments()`.\n- Removed `craft\\helpers\\App::dbMutexConfig()`.\n- Removed `craft\\helpers\\App::getDefaultLogTargets()`.\n- Removed `craft\\helpers\\App::logConfig()`.\n- Removed `craft\\helpers\\Cp::editElementTitles()`.\n- Removed `craft\\helpers\\Localization::localeData()`.\n- Removed `craft\\helpers\\Stringy`.\n- Removed `craft\\i18n\\Locale::setDateTimeFormats()`.\n- Removed `craft\\log\\FileTarget`.\n- Removed `craft\\log\\StreamLogTarget`.\n- Removed `craft\\models\\AssetTransform`.\n- Removed `craft\\models\\AssetTransformIndex`.\n- Removed `craft\\models\\BaseEntryRevisionModel`.\n- Removed `craft\\models\\EntryDraft`.\n- Removed `craft\\models\\EntryVersion`.\n- Removed `craft\\models\\FieldLayout::setFields()`.\n- Removed `craft\\models\\Site::$originalBaseUrl`.\n- Removed `craft\\models\\Site::$originalName`.\n- Removed `craft\\models\\Site::overrideBaseUrl()`.\n- Removed `craft\\models\\Site::overrideName()`.\n- Removed `craft\\models\\VolumeListing`.\n- Removed `craft\\mutex\\DbMutexTrait`.\n- Removed `craft\\mutex\\FileMutex`.\n- Removed `craft\\mutex\\MysqlMutex`.\n- Removed `craft\\mutex\\PgsqlMutex`.\n- Removed `craft\\mutex\\PrefixedMutexTrait`.\n- Removed `craft\\queue\\jobs\\DeleteStaleTemplateCaches`.\n- Removed `craft\\records\\AssetTransform`.\n- Removed `craft\\records\\MatrixBlockType::$validateUniques`.\n- Removed `craft\\services\\AssetIndexer::deleteStaleIndexingData()`.\n- Removed `craft\\services\\AssetIndexer::extractFolderItemsFromIndexList()`.\n- Removed `craft\\services\\AssetIndexer::extractSkippedItemsFromIndexList()`.\n- Removed `craft\\services\\AssetIndexer::getIndexingSessionId()`.\n- Removed `craft\\services\\AssetIndexer::getMissingFiles()`.\n- Removed `craft\\services\\AssetIndexer::prepareIndexList()`.\n- Removed `craft\\services\\AssetIndexer::processIndexForVolume()`.\n- Removed `craft\\services\\Assets::$generatePendingTransformsViaQueue`.\n- Removed `craft\\services\\Assets::EVENT_GET_ASSET_THUMB_URL`.\n- Removed `craft\\services\\Assets::EVENT_GET_THUMB_PATH`.\n- Removed `craft\\services\\Assets::getThumbPath()`.\n- Removed `craft\\services\\AssetTransforms`.\n- Removed `craft\\services\\Composer::$disablePackagist`.\n- Removed `craft\\services\\Composer::optimize()`.\n- Removed `craft\\services\\Content::getContentRow()`.\n- Removed `craft\\services\\Content::populateElementContent()`.\n- Removed `craft\\services\\Drafts::EVENT_AFTER_MERGE_SOURCE_CHANGES`.\n- Removed `craft\\services\\Drafts::EVENT_AFTER_PUBLISH_DRAFT`.\n- Removed `craft\\services\\Drafts::EVENT_BEFORE_MERGE_SOURCE_CHANGES`.\n- Removed `craft\\services\\Drafts::EVENT_BEFORE_PUBLISH_DRAFT`.\n- Removed `craft\\services\\Drafts::publishDraft()`.\n- Removed `craft\\services\\EntryRevisions`.\n- Removed `craft\\services\\Fields::assembleLayout()`.\n- Removed `craft\\services\\Fields::getFieldIdsByLayoutId()`.\n- Removed `craft\\services\\Fields::getFieldsByElementType()`.\n- Removed `craft\\services\\Fields::getFieldsByLayoutId()`.\n- Removed `craft\\services\\Gql::getAllPermissions()`.\n- Removed `craft\\services\\Path::getAssetThumbsPath()`.\n- Removed `craft\\services\\ProjectConfig::CONFIG_ALL_KEY`.\n- Removed `craft\\services\\ProjectConfig::CONFIG_ALL_KEY`.\n- Removed `craft\\services\\ProjectConfig::CONFIG_KEY`.\n- Removed `craft\\services\\Sections::isSectionTemplateValid()`.\n- Removed `craft\\services\\SystemSettings`.\n- Removed `craft\\services\\TemplateCaches::deleteCacheById()`.\n- Removed `craft\\services\\TemplateCaches::deleteCachesByKey()`.\n- Removed `craft\\services\\TemplateCaches::deleteExpiredCaches()`.\n- Removed `craft\\services\\TemplateCaches::deleteExpiredCachesIfOverdue()`.\n- Removed `craft\\services\\TemplateCaches::EVENT_AFTER_DELETE_CACHES`.\n- Removed `craft\\services\\TemplateCaches::EVENT_BEFORE_DELETE_CACHES`.\n- Removed `craft\\services\\TemplateCaches::handleResponse()`.\n- Removed `craft\\services\\TemplateCaches::handleResponse()`.\n- Removed `craft\\services\\TemplateCaches::includeElementInTemplateCaches()`.\n- Removed `craft\\services\\TemplateCaches::includeElementQueryInTemplateCaches()`.\n- Removed `craft\\services\\Volumes::createVolume()`.\n- Removed `craft\\services\\Volumes::EVENT_REGISTER_VOLUME_TYPES`.\n- Removed `craft\\services\\Volumes::getAllVolumeTypes()`.\n- Removed `craft\\services\\Volumes::getVolumeOverrides()`.\n- Removed `craft\\volumes\\Local`.\n- Removed `craft\\volumes\\MissingVolume`.\n- Removed `craft\\volumes\\Temp`.\n- Removed `craft\\web\\AssetBundle::useCompressedJs()`.\n- Removed `craft\\web\\AssetManager::getPublishedPath()`.\n- Removed `craft\\web\\Request::getIsSingleActionRequest()`.\n- Removed `craft\\web\\twig\\Template`.\n- Removed `craft\\web\\twig\\variables\\CategoryGroups`.\n- Removed `craft\\web\\twig\\variables\\Config`.\n- Removed `craft\\web\\twig\\variables\\Deprecator`.\n- Removed `craft\\web\\twig\\variables\\ElementIndexes`.\n- Removed `craft\\web\\twig\\variables\\EmailMessages`.\n- Removed `craft\\web\\twig\\variables\\Feeds`.\n- Removed `craft\\web\\twig\\variables\\Fields`.\n- Removed `craft\\web\\twig\\variables\\Globals`.\n- Removed `craft\\web\\twig\\variables\\I18N`.\n- Removed `craft\\web\\twig\\variables\\Request`.\n- Removed `craft\\web\\twig\\variables\\Sections`.\n- Removed `craft\\web\\twig\\variables\\SystemSettings`.\n- Removed `craft\\web\\twig\\variables\\UserGroups`.\n- Removed `craft\\web\\twig\\variables\\UserPermissions`.\n- Removed `craft\\web\\twig\\variables\\UserSession`.\n- Removed `craft\\web\\User::destroyDebugPreferencesInSession()`.\n- Removed `craft\\web\\User::saveDebugPreferencesToSession()`.\n- Removed `craft\\web\\View::$minifyCss`.\n- Removed `craft\\web\\View::$minifyJs`.\n- Removed `craft\\web\\View::registerHiResCss()`.\n- Removed `craft\\web\\View::renderTemplateMacro()`.\n- Removed the `_layouts/element` control panel template.\n- Removed the `assets/_edit` control panel template.\n- Removed the `categories/_edit` control panel template.\n- Removed the `entries/_edit` control panel template.\n- Removed the `cp.assets.edit.content` control panel template hook.\n- Removed the `cp.assets.edit.details` control panel template hook.\n- Removed the `cp.assets.edit.meta` control panel template hook.\n- Removed the `cp.assets.edit.settings` control panel template hook.\n- Removed the `cp.assets.edit` control panel template hook.\n- Removed the `cp.categories.edit.content` control panel template hook.\n- Removed the `cp.categories.edit.details` control panel template hook.\n- Removed the `cp.categories.edit.meta` control panel template hook.\n- Removed the `cp.categories.edit.settings` control panel template hook.\n- Removed the `cp.categories.edit` control panel template hook.\n- Removed the `cp.elements.edit` control panel template hook.\n- Removed the `cp.entries.edit.content` control panel template hook.\n- Removed the `cp.entries.edit.details` control panel template hook.\n- Removed the `cp.entries.edit.meta` control panel template hook.\n- Removed the `cp.entries.edit.settings` control panel template hook.\n- Removed the `cp.entries.edit` control panel template hook.\n- Removed the `Craft.AssetEditor` JavaScript class.\n- Removed the `Craft.BaseElementEditor` JavaScript class.\n- Removed the `Craft.DraftEditor` JavaScript class.\n- Removed the `Craft.queueActionRequest()` JavaScript method. `Craft.queue.push()` can be used instead.\n- Removed the Flysystem package. The `craftcms/flysystem-adapter` package now provides a base Flysystem adapter class.\n- Removed the laminas-feed package.\n- Removed the yii2-swiftmailer package.\n\n### Fixed\n- Fixed a bug where pending project config changes in the YAML would get applied when other project config changes were made. ([#9660](https://github.com/craftcms/cms/issues/9660))\n- Fixed a bug where revisions weren\u2019t getting propagated when a section was enabled for new sites, or its Propagation Method was changed. ([#10634](https://github.com/craftcms/cms/issues/10634))\n\n### Security\n- Generated control panel URLs now begin with the `@web` alias value if the `baseCpUrl` config setting isn\u2019t defined.\n- HTML entities output within email body text are now escaped by default in HTML email bodies.\n", "<?php\n/**\n * @link https://craftcms.com/\n * @copyright Copyright (c) Pixel & Tonic, Inc.\n * @license https://craftcms.github.io/license/\n */\n\nnamespace craft\\helpers;\n\nuse Craft;\nuse craft\\base\\Element;\nuse craft\\base\\ElementInterface;\nuse craft\\base\\FieldLayoutElement;\nuse craft\\behaviors\\DraftBehavior;\nuse craft\\elements\\Address;\nuse craft\\enums\\LicenseKeyStatus;\nuse craft\\events\\DefineElementInnerHtmlEvent;\nuse craft\\events\\RegisterCpAlertsEvent;\nuse craft\\fieldlayoutelements\\BaseField;\nuse craft\\models\\FieldLayout;\nuse craft\\models\\FieldLayoutTab;\nuse craft\\models\\Site;\nuse craft\\web\\twig\\TemplateLoaderException;\nuse craft\\web\\View;\nuse yii\\base\\Event;\nuse yii\\base\\InvalidArgumentException;\nuse yii\\helpers\\Markdown;\nuse yii\\validators\\RequiredValidator;\n\n/**\n * Class Cp\n *\n * @author Pixel & Tonic, Inc. <support@pixelandtonic.com>\n * @since 3.0.0\n */\nclass Cp\n{\n    /**\n     * @event RegisterCpAlertsEvent The event that is triggered when registering control panel alerts.\n     */\n    public const EVENT_REGISTER_ALERTS = 'registerAlerts';\n\n    /**\n     * @event DefineElementInnerHtmlEvent The event that is triggered when defining an element\u2019s inner HTML.\n     * @since 4.0.0\n     */\n    public const EVENT_DEFINE_ELEMENT_INNER_HTML = 'defineElementInnerHtml';\n\n    /**\n     * @since 3.5.8\n     */\n    public const ELEMENT_SIZE_SMALL = 'small';\n    /**\n     * @since 3.5.8\n     */\n    public const ELEMENT_SIZE_LARGE = 'large';\n\n    /**\n     * @var Site|false\n     * @see requestedSite()\n     */\n    private static Site|false $_requestedSite;\n\n    /**\n     * Renders a control panel template.\n     *\n     * @param string $template\n     * @param array $variables\n     * @return string\n     * @throws TemplateLoaderException if `$template` is an invalid template path\n     */\n    public static function renderTemplate(string $template, array $variables = []): string\n    {\n        return Craft::$app->getView()->renderTemplate($template, $variables, View::TEMPLATE_MODE_CP);\n    }\n\n    /**\n     * @param string|null $path\n     * @param bool $fetch\n     * @return array\n     */\n    public static function alerts(?string $path = null, bool $fetch = false): array\n    {\n        $alerts = [];\n        $user = Craft::$app->getUser()->getIdentity();\n        $generalConfig = Craft::$app->getConfig()->getGeneral();\n\n        if (!$user) {\n            return $alerts;\n        }\n\n        $updatesService = Craft::$app->getUpdates();\n        $canSettleUp = true;\n        $licenseAlerts = [];\n\n        if ($updatesService->getIsUpdateInfoCached() || $fetch) {\n            // Fetch the updates regardless of whether we're on the Updates page or not, because the other alerts are\n            // relying on cached Craftnet info\n            $updatesService->getUpdates();\n\n            // Get the license key status\n            $licenseKeyStatus = Craft::$app->getCache()->get('licenseKeyStatus');\n\n            if ($path !== 'plugin-store/upgrade-craft') {\n                // Invalid license?\n                if ($licenseKeyStatus === LicenseKeyStatus::Invalid) {\n                    $alerts[] = Craft::t('app', 'Your Craft license key is invalid.');\n                } elseif (Craft::$app->getHasWrongEdition()) {\n                    $message = Craft::t('app', 'You\u2019re running Craft {edition} with a Craft {licensedEdition} license.', [\n                            'edition' => Craft::$app->getEditionName(),\n                            'licensedEdition' => Craft::$app->getLicensedEditionName(),\n                        ]) . ' ';\n                    if ($user->admin) {\n                        if ($generalConfig->allowAdminChanges) {\n                            $message .= '<a class=\"go\" href=\"' . UrlHelper::url('plugin-store/upgrade-craft') . '\">' . Craft::t('app', 'Resolve') . '</a>';\n                        } else {\n                            $message .= Craft::t('app', 'Please fix on an environment where administrative changes are allowed.');\n                        }\n                    } else {\n                        $message .= Craft::t('app', 'Please notify one of your site\u2019s admins.');\n                    }\n\n                    $licenseAlerts[] = $message;\n                }\n            }\n\n            // Any plugin issues?\n            if ($path != 'settings/plugins') {\n                $pluginsService = Craft::$app->getPlugins();\n                $issuePlugins = [];\n                foreach ($pluginsService->getAllPlugins() as $pluginHandle => $plugin) {\n                    if ($pluginsService->hasIssues($pluginHandle)) {\n                        $issuePlugins[] = [$plugin->name, $plugin->handle];\n                    }\n                }\n                if (!empty($issuePlugins)) {\n                    if (count($issuePlugins) === 1) {\n                        $message = Craft::t('app', 'There\u2019s a licensing issue with the {name} plugin.', [\n                            'name' => reset($issuePlugins)[0],\n                        ]);\n                    } else {\n                        $message = Craft::t('app', '{num} plugins have licensing issues.', [\n                            'num' => count($issuePlugins),\n                        ]);\n                    }\n                    $message .= ' ';\n                    if ($user->admin) {\n                        if ($generalConfig->allowAdminChanges) {\n                            $message .= '<a class=\"go\" href=\"' . UrlHelper::cpUrl('settings/plugins') . '\">' . Craft::t('app', 'Resolve') . '</a>';\n                        } else {\n                            $message .= Craft::t('app', 'Please fix on an environment where administrative changes are allowed.');\n                        }\n                    } else {\n                        $message .= Craft::t('app', 'Please notify one of your site\u2019s admins.');\n                    }\n\n                    $licenseAlerts[] = $message;\n\n                    // Is this reconcilable?\n                    foreach ($issuePlugins as [$pluginName, $pluginHandle]) {\n                        if ($pluginsService->getPluginLicenseKeyStatus($pluginHandle) !== LicenseKeyStatus::Trial) {\n                            $canSettleUp = false;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (!empty($licenseAlerts)) {\n                if ($canSettleUp) {\n                    if ($path !== 'plugin-store/buy-all-trials') {\n                        $alerts[] = Craft::t('app', 'There are trial licenses that require payment.') . ' ' .\n                            Html::a(Craft::t('app', 'Buy now'), UrlHelper::cpUrl('plugin-store/buy-all-trials'), ['class' => 'go']);\n                    }\n                } else {\n                    array_push($alerts, ...$licenseAlerts);\n                }\n            }\n\n            if (\n                $path !== 'utilities/updates' &&\n                $user->can('utility:updates') &&\n                $updatesService->getIsCriticalUpdateAvailable()\n            ) {\n                $alerts[] = Craft::t('app', 'A critical update is available.') .\n                    ' <a class=\"go nowrap\" href=\"' . UrlHelper::url('utilities/updates') . '\">' . Craft::t('app', 'Go to Updates') . '</a>';\n            }\n\n            // Domain mismatch?\n            if ($licenseKeyStatus === LicenseKeyStatus::Mismatched) {\n                $licensedDomain = Craft::$app->getCache()->get('licensedDomain');\n                $domainLink = '<a href=\"http://' . $licensedDomain . '\" rel=\"noopener\" target=\"_blank\">' . $licensedDomain . '</a>';\n\n                if (defined('CRAFT_LICENSE_KEY')) {\n                    $message = Craft::t('app', 'The license key in use belongs to {domain}', [\n                        'domain' => $domainLink,\n                    ]);\n                } else {\n                    $keyPath = Craft::$app->getPath()->getLicenseKeyPath();\n\n                    // If the license key path starts with the root project path, trim the project path off\n                    $rootPath = Craft::getAlias('@root');\n                    if (str_starts_with($keyPath, $rootPath . '/')) {\n                        $keyPath = substr($keyPath, strlen($rootPath) + 1);\n                    }\n\n                    $message = Craft::t('app', 'The license located at {file} belongs to {domain}.', [\n                        'file' => $keyPath,\n                        'domain' => $domainLink,\n                    ]);\n                }\n\n                $alerts[] = $message . ' <a class=\"go\" href=\"https://craftcms.com/support/resolving-mismatched-licenses\">' . Craft::t('app', 'Learn more') . '</a>';\n            }\n        }\n\n        // Display an alert if there are pending project config YAML changes\n        $projectConfig = Craft::$app->getProjectConfig();\n        if (\n            $path !== 'utilities/project-config' &&\n            $user->can('utility:project-config') &&\n            $projectConfig->areChangesPending() &&\n            ($projectConfig->writeYamlAutomatically || $projectConfig->get('dateModified') <= $projectConfig->get('dateModified', true))\n        ) {\n            $alerts[] = Craft::t('app', 'Your project config YAML files contain pending changes.') .\n                ' ' . '<a class=\"go\" href=\"' . UrlHelper::url('utilities/project-config') . '\">' . Craft::t('app', 'Review') . '</a>';\n        }\n\n        // Display a warning if admin changes are allowed, and project.yaml is being used but not writable\n        if (\n            $user->admin &&\n            $generalConfig->allowAdminChanges &&\n            $projectConfig->getHadFileWriteIssues()\n        ) {\n            $alerts[] = Craft::t('app', 'Your {folder} folder isn\u2019t writable.', [\n                'folder' => \"config/$projectConfig->folderName/\",\n            ]);\n        }\n\n        // Give plugins a chance to add their own alerts\n        $event = new RegisterCpAlertsEvent();\n        Event::trigger(self::class, self::EVENT_REGISTER_ALERTS, $event);\n        return array_merge($alerts, $event->alerts);\n    }\n\n    /**\n     * Renders an element\u2019s HTML.\n     *\n     * @param ElementInterface $element The element to be rendered\n     * @param string $context The context the element is going to be shown in (`index`, `field`, etc.)\n     * @param string $size The size of the element (`small` or `large`)\n     * @param string|null $inputName The `name` attribute that should be set on the hidden input, if `$context` is set to `field`\n     * @param bool $showStatus Whether the element status should be shown (if the element type has statuses)\n     * @param bool $showThumb Whether the element thumb should be shown (if the element has one)\n     * @param bool $showLabel Whether the element label should be shown\n     * @param bool $showDraftName Whether to show the draft name beside the label if the element is a draft of a published element\n     * @param bool $single Whether the input name should omit the trailing `[]`\n     * @param bool $autoReload Whether the element should auto-reload itself when it\u2019s saved\n     * @return string\n     * @since 3.5.8\n     */\n    public static function elementHtml(\n        ElementInterface $element,\n        string $context = 'index',\n        string $size = self::ELEMENT_SIZE_SMALL,\n        ?string $inputName = null,\n        bool $showStatus = true,\n        bool $showThumb = true,\n        bool $showLabel = true,\n        bool $showDraftName = true,\n        bool $single = false,\n        bool $autoReload = true,\n    ): string {\n        $isDraft = $element->getIsDraft();\n        $isRevision = !$isDraft && $element->getIsRevision();\n        $label = $element->getUiLabel();\n        $showStatus = $showStatus && ($isDraft || $element::hasStatuses());\n\n        // Create the thumb/icon image, if there is one\n        if ($showThumb) {\n            $thumbSizePx = $size === self::ELEMENT_SIZE_SMALL ? 34 : 120;\n            $thumbUrl = $element->getThumbUrl($thumbSizePx);\n        } else {\n            $thumbSizePx = $thumbUrl = null;\n        }\n\n        if ($thumbUrl !== null) {\n            $imageSize2x = $thumbSizePx * 2;\n            $thumbUrl2x = $element->getThumbUrl($imageSize2x);\n\n            $srcsets = [\n                \"$thumbUrl {$thumbSizePx}w\",\n                \"$thumbUrl2x {$imageSize2x}w\",\n            ];\n            $sizesHtml = \"{$thumbSizePx}px\";\n            $srcsetHtml = implode(', ', $srcsets);\n            $imgHtml = Html::tag('div', '', [\n                'class' => array_filter([\n                    'elementthumb',\n                    $element->getHasCheckeredThumb() ? 'checkered' : null,\n                    $size === self::ELEMENT_SIZE_SMALL && $element->getHasRoundedThumb() ? 'rounded' : null,\n                ]),\n                'data' => [\n                    'sizes' => $sizesHtml,\n                    'srcset' => $srcsetHtml,\n                    'alt' => $element->getThumbAlt(),\n                ],\n            ]);\n        } else {\n            $imgHtml = '';\n        }\n\n        $attributes = ArrayHelper::merge(\n            Html::normalizeTagAttributes($element->getHtmlAttributes($context)),\n            [\n                'class' => ['element', $size],\n                'title' => $label . (Craft::$app->getIsMultiSite() ? ' \u2013 ' . Craft::t('site', $element->getSite()->getName()) : ''),\n                'data' => array_filter([\n                    'type' => get_class($element),\n                    'id' => $element->id,\n                    'draft-id' => $element->draftId,\n                    'revision-id' => $element->revisionId,\n                    'site-id' => $element->siteId,\n                    'status' => $element->getStatus(),\n                    'label' => (string)$element,\n                    'url' => $element->getUrl(),\n                    'level' => $element->level,\n                    'settings' => $autoReload ? compact(\n                        'context',\n                        'size',\n                        'showStatus',\n                        'showThumb',\n                        'showLabel',\n                        'showDraftName',\n                    ) : false,\n                ]),\n            ]\n        );\n\n        if ($context === 'field') {\n            $attributes['class'][] = 'removable';\n        }\n\n        if ($element->hasErrors()) {\n            $attributes['class'][] = 'error';\n        }\n\n        if ($showStatus) {\n            $attributes['class'][] = 'hasstatus';\n        }\n\n        if ($thumbUrl !== null) {\n            $attributes['class'][] = 'hasthumb';\n        }\n\n        $user = Craft::$app->getUser()->getIdentity();\n\n        if ($user) {\n            if ($element->canView($user)) {\n                $attributes['data']['editable'] = true;\n            }\n\n            if ($context === 'index') {\n                if ($element->canSave($user)) {\n                    $attributes['data']['savable'] = true;\n                }\n\n                if ($element->canDelete($user)) {\n                    $attributes['data']['deletable'] = true;\n                }\n            }\n        }\n\n        if ($element->trashed) {\n            $attributes['data']['trashed'] = true;\n        }\n\n        $innerHtml = '';\n\n        if ($context === 'field' && $inputName !== null) {\n            $innerHtml .= Html::hiddenInput($inputName . ($single ? '' : '[]'), (string)$element->id) .\n                Html::button('', [\n                    'class' => ['delete', 'icon'],\n                    'title' => Craft::t('app', 'Remove'),\n                    'aria' => [\n                        'label' => Craft::t('app', 'Remove {label}', [\n                            'label' => $label,\n                        ]),\n                    ],\n                ]);\n        }\n\n        if ($showStatus) {\n            if ($isDraft) {\n                $innerHtml .= Html::tag('span', '', [\n                    'class' => ['icon'],\n                    'aria' => [\n                        'hidden' => 'true',\n                    ],\n                    'data' => [\n                        'icon' => 'draft',\n                    ],\n                ]);\n            } else {\n                $status = !$isRevision ? $element->getStatus() : null;\n                $innerHtml .= Html::tag('span', '', [\n                    'class' => array_filter([\n                        'status',\n                        $status,\n                        $status ? ($element::statuses()[$status]['color'] ?? null) : null,\n                    ]),\n                ]);\n            }\n        }\n\n        $innerHtml .= $imgHtml;\n\n        if ($showLabel) {\n            $innerHtml .= '<div class=\"label\">';\n            $innerHtml .= '<span class=\"title\">';\n\n            $encodedLabel = Html::encode($label);\n\n            if ($showDraftName && $isDraft && !$element->getIsUnpublishedDraft()) {\n                /** @var DraftBehavior|ElementInterface $element */\n                $encodedLabel .= Html::tag('span', $element->draftName ?: Craft::t('app', 'Draft'), [\n                    'class' => 'draft-label',\n                ]);\n            }\n\n            // Should we make the element a link?\n            if (\n                $context === 'index' &&\n                !$element->trashed &&\n                ($cpEditUrl = $element->getCpEditUrl())\n            ) {\n                $innerHtml .= Html::a($encodedLabel, $cpEditUrl);\n            } else {\n                $innerHtml .= $encodedLabel;\n            }\n\n            $innerHtml .= '</span></div>';\n        }\n\n        // Allow plugins to modify the inner HTML\n        $event = new DefineElementInnerHtmlEvent(compact(\n            'element',\n            'context',\n            'size',\n            'showStatus',\n            'showThumb',\n            'showLabel',\n            'showDraftName',\n            'innerHtml',\n        ));\n        Event::trigger(self::class, self::EVENT_DEFINE_ELEMENT_INNER_HTML, $event);\n\n        return Html::tag('div', $event->innerHtml, $attributes);\n    }\n\n    /**\n     * Returns element preview HTML, for a list of elements.\n     *\n     * @param ElementInterface[] $elements The elements\n     * @param string $size The size of the element (`small` or `large`)\n     * @param bool $showStatus Whether the element status should be shown (if the element type has statuses)\n     * @param bool $showThumb Whether the element thumb should be shown (if the element has one)\n     * @param bool $showLabel Whether the element label should be shown\n     * @param bool $showDraftName Whether to show the draft name beside the label if the element is a draft of a published element\n     * @return string\n     * @since 3.6.3\n     */\n    public static function elementPreviewHtml(\n        array $elements,\n        string $size = self::ELEMENT_SIZE_SMALL,\n        bool $showStatus = true,\n        bool $showThumb = true,\n        bool $showLabel = true,\n        bool $showDraftName = true,\n    ): string {\n        if (empty($elements)) {\n            return '';\n        }\n\n        $first = array_shift($elements);\n        $html = static::elementHtml($first, 'index', $size, null, $showStatus, $showThumb, $showLabel, $showDraftName);\n\n        if (!empty($elements)) {\n            $otherHtml = '';\n            foreach ($elements as $other) {\n                $otherHtml .= static::elementHtml($other, 'index', $size, null, $showStatus, $showThumb, $showLabel, $showDraftName);\n            }\n            $html .= Html::tag('span', '+' . Craft::$app->getFormatter()->asInteger(count($elements)), [\n                'title' => implode(', ', ArrayHelper::getColumn($elements, 'title')),\n                'class' => 'btn small',\n                'role' => 'button',\n                'onclick' => 'jQuery(this).replaceWith(' . Json::encode($otherHtml) . ')',\n            ]);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders a field\u2019s HTML, for the given input HTML or a template.\n     *\n     * @param string $input The input HTML or template path. If passing a template path, it must begin with `template:`.\n     * @param array $config\n     * @return string\n     * @throws TemplateLoaderException if $input begins with `template:` and is followed by an invalid template path\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.5.8\n     */\n    public static function fieldHtml(string $input, array $config = []): string\n    {\n        $attribute = $config['attribute'] ?? $config['id'] ?? null;\n        $id = $config['id'] = $config['id'] ?? 'field' . mt_rand();\n        $labelId = $config['labelId'] ?? \"$id-label\";\n        $instructionsId = $config['instructionsId'] ?? \"$id-instructions\";\n        $tipId = $config['tipId'] ?? \"$id-tip\";\n        $warningId = $config['warningId'] ?? \"$id-warning\";\n        $errorsId = $config['errorsId'] ?? \"$id-errors\";\n        $statusId = $config['statusId'] ?? \"$id-status\";\n\n        $instructions = $config['instructions'] ?? null;\n        $tip = $config['tip'] ?? null;\n        $warning = $config['warning'] ?? null;\n        $errors = $config['errors'] ?? null;\n        $status = $config['status'] ?? null;\n\n        if (str_starts_with($input, 'template:')) {\n            // Set labelledBy and describedBy values in case the input template supports it\n            if (!isset($config['labelledBy'])) {\n                $config['labelledBy'] = $labelId;\n            }\n            if (!isset($config['describedBy'])) {\n                $descriptorIds = array_filter([\n                    $errors ? $errorsId : null,\n                    $status ? $statusId : null,\n                    $instructions ? $instructionsId : null,\n                    $tip ? $tipId : null,\n                    $warning ? $warningId : null,\n                ]);\n                $config['describedBy'] = $descriptorIds ? implode(' ', $descriptorIds) : null;\n            }\n\n            $input = static::renderTemplate(substr($input, 9), $config);\n        }\n\n        $fieldset = $config['fieldset'] ?? false;\n        $fieldId = $config['fieldId'] ?? \"$id-field\";\n        $label = $config['fieldLabel'] ?? $config['label'] ?? null;\n\n        if ($label === '__blank__') {\n            $label = null;\n        }\n\n        $siteId = Craft::$app->getIsMultiSite() && isset($config['siteId']) ? (int)$config['siteId'] : null;\n\n        if ($siteId) {\n            $site = Craft::$app->getSites()->getSiteById($siteId);\n            if (!$site) {\n                throw new InvalidArgumentException(\"Invalid site ID: $siteId\");\n            }\n        } else {\n            $site = null;\n        }\n\n        $required = (bool)($config['required'] ?? false);\n        $instructionsPosition = $config['instructionsPosition'] ?? 'before';\n        $orientation = $config['orientation'] ?? ($site ? $site->getLocale() : Craft::$app->getLocale())->getOrientation();\n        $translatable = Craft::$app->getIsMultiSite() ? ($config['translatable'] ?? ($site !== null)) : false;\n\n        $fieldClass = array_merge(array_filter([\n            'field',\n            ($config['first'] ?? false) ? 'first' : null,\n            $errors ? 'has-errors' : null,\n        ]), Html::explodeClass($config['fieldClass'] ?? []));\n\n        if (isset($config['attribute']) && ($currentUser = Craft::$app->getUser()->getIdentity())) {\n            $showAttribute = $currentUser->admin && $currentUser->getPreference('showFieldHandles');\n        } else {\n            $showAttribute = false;\n        }\n\n        $instructionsHtml = $instructions\n            ? Html::tag('div', preg_replace('/&amp;(\\w+);/', '&$1;', Markdown::process(Html::encodeInvalidTags($instructions), 'gfm-comment')), [\n                'id' => $instructionsId,\n                'class' => ['instructions'],\n            ])\n            : '';\n\n        $labelHtml = $label . (\n            $required\n                ? Html::tag('span', Craft::t('app', 'Required'), [\n                    'class' => ['visually-hidden'],\n                ]) .\n                Html::tag('span', '', [\n                    'class' => ['required'],\n                    'aria' => [\n                        'hidden' => 'true',\n                    ],\n                ])\n                : ''\n            );\n\n        $containerTag = $fieldset ? 'fieldset' : 'div';\n\n        return\n            Html::beginTag($containerTag, ArrayHelper::merge(\n                [\n                    'class' => $fieldClass,\n                    'id' => $fieldId,\n                    'data' => [\n                        'attribute' => $attribute,\n                    ],\n                ],\n                $config['fieldAttributes'] ?? []\n            )) .\n            (($label && $fieldset)\n                ? Html::tag('legend', $labelHtml, [\n                    'class' => ['visually-hidden'],\n                    'data' => [\n                        'label' => $label,\n                    ],\n                ])\n                : '') .\n            ($status\n                ? Html::beginTag('div', [\n                    'id' => $statusId,\n                    'class' => ['status-badge', $status[0]],\n                    'title' => $status[1],\n                ]) .\n                Html::tag('span', $status[1], [\n                    'class' => 'visually-hidden',\n                ]) .\n                Html::endTag('div')\n                : '') .\n            (($label || $showAttribute)\n                ? (\n                    Html::beginTag('div', ['class' => 'heading']) .\n                    ($config['headingPrefix'] ?? '') .\n                    ($label\n                        ? Html::tag($fieldset ? 'legend' : 'label', $labelHtml, ArrayHelper::merge([\n                            'id' => $labelId,\n                            'class' => $config['labelClass'] ?? null,\n                            'for' => !$fieldset ? $id : null,\n                            'aria' => [\n                                'hidden' => $fieldset ? 'true' : null,\n                            ],\n                        ], $config['labelAttributes'] ?? []))\n                        : '') .\n                    ($translatable\n                        ? Html::beginTag('div', [\n                            'class' => ['t9n-indicator'],\n                            'title' => $config['translationDescription'] ?? Craft::t('app', 'This field is translatable.'),\n                        ]) .\n                        Html::tag('span', '', [\n                            'data' => [\n                                'icon' => 'language',\n                            ],\n                            'aria' => [\n                                'hidden' => 'true',\n                            ],\n                        ]) .\n                        Html::tag('span', $config['translationDescription'] ?? Craft::t('app', 'This field is translatable.'), [\n                            'class' => 'visually-hidden',\n                        ]) .\n                        Html::endTag('div')\n                        : '') .\n                    ($showAttribute\n                        ? Html::tag('div', '', [\n                            'class' => ['flex-grow'],\n                        ]) . static::renderTemplate('_includes/forms/copytextbtn', [\n                            'id' => \"$id-attribute\",\n                            'class' => ['code', 'small', 'light'],\n                            'value' => $config['attribute'],\n                        ])\n                        : '') .\n                    ($config['headingSuffix'] ?? '') .\n                    Html::endTag('div')\n                )\n                : '') .\n            ($instructionsPosition === 'before' ? $instructionsHtml : '') .\n            Html::tag('div', $input, ArrayHelper::merge(\n                [\n                    'class' => array_filter([\n                        'input',\n                        $orientation,\n                        $errors ? 'errors' : null,\n                    ]),\n                ],\n                $config['inputContainerAttributes'] ?? []\n            )) .\n            ($instructionsPosition === 'after' ? $instructionsHtml : '') .\n            self::_noticeHtml($tipId, 'notice', Craft::t('app', 'Tip:'), $tip) .\n            self::_noticeHtml($warningId, 'warning', Craft::t('app', 'Warning:'), $warning) .\n            ($errors\n                ? static::renderTemplate('_includes/forms/errorList', [\n                    'id' => $errorsId,\n                    'errors' => $errors,\n                ])\n                : '') .\n            Html::endTag($containerTag);\n    }\n\n    /**\n     * Returns the HTML for a field tip/warning.\n     *\n     * @param string $id\n     * @param string $class\n     * @param string $label\n     * @param string|null $message\n     * @return string\n     */\n    private static function _noticeHtml(string $id, string $class, string $label, ?string $message): string\n    {\n        if (!$message) {\n            return '';\n        }\n\n        return\n            Html::beginTag('p', [\n                'id' => $id,\n                'class' => [$class, 'has-icon'],\n            ]) .\n            Html::tag('span', '', [\n                'class' => 'icon',\n                'aria' => [\n                    'hidden' => 'true',\n                ],\n            ]) .\n            Html::tag('span', \"$label \", [\n                'class' => 'visually-hidden',\n            ]) .\n            Html::tag('span', preg_replace('/&amp;(\\w+);/', '&$1;', Markdown::processParagraph(Html::encodeInvalidTags($message)))) .\n            Html::endTag('p');\n    }\n\n    /**\n     * Renders a checkbox field\u2019s HTML.\n     *\n     * Note that unlike the `checkboxField` macro in `_includes/forms.html`, you must set the checkbox label via\n     * `$config['checkboxLabel']`.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function checkboxFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'checkbox' . mt_rand();\n\n        $config['fieldClass'] = Html::explodeClass($config['fieldClass'] ?? []);\n        $config['fieldClass'][] = 'checkboxfield';\n        $config['instructionsPosition'] = $config['instructionsPosition'] ?? 'after';\n\n        // Don't pass along `label` since it's ambiguous\n        unset($config['label']);\n\n        return static::fieldHtml('template:_includes/forms/checkbox', $config);\n    }\n\n    /**\n     * Renders a checkbox select field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function checkboxSelectFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'checkboxselect' . mt_rand();\n        $config['fieldset'] = true;\n        return static::fieldHtml('template:_includes/forms/checkboxSelect', $config);\n    }\n\n    /**\n     * Renders a color field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function colorFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'color' . mt_rand();\n        $config['fieldset'] = true;\n        return static::fieldHtml('template:_includes/forms/color', $config);\n    }\n\n    /**\n     * Renders an editable table field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function editableTableFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'editabletable' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/editableTable', $config);\n    }\n\n    /**\n     * Renders a lightswitch input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function lightswitchHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/lightswitch', $config);\n    }\n\n    /**\n     * Renders a lightswitch field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function lightswitchFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'lightswitch' . mt_rand();\n\n        $config['fieldClass'] = Html::explodeClass($config['fieldClass'] ?? []);\n        $config['fieldClass'][] = 'lightswitch-field';\n\n        // Don't pass along `label` since it's ambiguous\n        $config['fieldLabel'] = $config['fieldLabel'] ?? $config['label'] ?? null;\n        unset($config['label']);\n\n        return static::fieldHtml('template:_includes/forms/lightswitch', $config);\n    }\n\n    /**\n     * Renders a select input.\n     *\n     * @param array $config\n     * @return string\n     * @since 3.6.0\n     */\n    public static function selectHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/select', $config);\n    }\n\n    /**\n     * Renders a select field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function selectFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'select' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/select', $config);\n    }\n\n    /**\n     * Renders a selectize input.\n     *\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function selectizeHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/selectize', $config);\n    }\n\n    /**\n     * Renders a selectize field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function selectizeFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'selectize' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/selectize', $config);\n    }\n\n    /**\n     * Renders a multi-select input.\n     *\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function multiSelectHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/multiselect', $config);\n    }\n\n    /**\n     * Renders a multi-select field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function multiSelectFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'multiselect' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/multiselect', $config);\n    }\n\n    /**\n     * Renders a text input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function textHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/text', $config);\n    }\n\n    /**\n     * Renders a text field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function textFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'text' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/text', $config);\n    }\n\n    /**\n     * Renders a textarea input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function textareaHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/textarea', $config);\n    }\n\n    /**\n     * Renders a textarea field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function textareaFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'textarea' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/textarea', $config);\n    }\n\n    /**\n     * Returns a date input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function dateHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/date', $config);\n    }\n\n    /**\n     * Returns a date field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function dateFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'date' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/date', $config);\n    }\n\n    /**\n     * Returns a time input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function timeHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/time', $config);\n    }\n\n    /**\n     * Returns a date field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function timeFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'time' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/time', $config);\n    }\n\n    /**\n     * Renders a date + time field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.7.0\n     */\n    public static function dateTimeFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'datetime' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/datetime', $config);\n    }\n\n    /**\n     * Renders an element select input\u2019s HTML\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function elementSelectHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/elementSelect', $config);\n    }\n\n    /**\n     * Renders an element select field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.7.0\n     */\n    public static function elementSelectFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'elementselect' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/elementSelect', $config);\n    }\n\n    /**\n     * Renders an autosuggest field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.7.0\n     */\n    public static function autosuggestFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'autosuggest' . mt_rand();\n\n        // Suggest an environment variable / alias?\n        if ($config['suggestEnvVars'] ?? false) {\n            $value = $config['value'] ?? '';\n            if (!isset($config['tip']) && (!isset($value[0]) || !in_array($value[0], ['$', '@']))) {\n                if ($config['suggestAliases'] ?? false) {\n                    $config['tip'] = Craft::t('app', 'This can be set to an environment variable, or begin with an alias.');\n                } else {\n                    $config['tip'] = Craft::t('app', 'This can be set to an environment variable.');\n                }\n                $config['tip'] .= ' ' .\n                    Html::a(Craft::t('app', 'Learn more'), 'https://craftcms.com/docs/4.x/config/#environmental-configuration', [\n                        'class' => 'go',\n                    ]);\n            } elseif (\n                !isset($config['warning']) &&\n                ($value === '@web' || str_starts_with($value, '@web/')) &&\n                Craft::$app->getRequest()->isWebAliasSetDynamically\n            ) {\n                $config['warning'] = Craft::t('app', 'The `@web` alias is not recommended if it is determined automatically.');\n            }\n        }\n\n        return static::fieldHtml('template:_includes/forms/autosuggest', $config);\n    }\n\n    /**\n     * Renders address cards.\n     *\n     * @param Address[] $addresses\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function addressCardsHtml(array $addresses, array $config = []): string\n    {\n        $config += [\n            'id' => sprintf('addresses%s', mt_rand()),\n            'ownerId' => null,\n            'maxAddresses' => null,\n        ];\n\n        $view = Craft::$app->getView();\n\n        $view->registerJsWithVars(fn($selector, $settings) => <<<JS\nnew Craft.AddressesInput($($selector), $settings);\nJS, [\n            sprintf('#%s', $view->namespaceInputId($config['id'])),\n            [\n                'ownerId' => $config['ownerId'],\n                'maxAddresses' => $config['maxAddresses'],\n            ],\n        ]);\n\n        return\n            Html::beginTag('ul', [\n                'id' => $config['id'],\n                'class' => 'address-cards',\n            ]) .\n            implode(\"\\n\", array_map(fn(Address $address) => static::addressCardHtml($address, $config), $addresses)) .\n            Html::beginTag('li') .\n            Html::beginTag('button', [\n                'type' => 'button',\n                'class' => ['btn', 'dashed', 'add', 'icon', 'address-cards__add-btn'],\n            ]) .\n            Html::tag('div', '', [\n                'class' => ['spinner', 'spinner-absolute'],\n            ]) .\n            Html::tag('div', Craft::t('app', 'Add an address'), [\n                'class' => 'label',\n            ]) .\n            Html::endTag('button') . // .add\n            Html::endTag('li') .\n            Html::endTag('ul'); // .address-cards\n    }\n\n    /**\n     * Renders an address card for an Addresses input.\n     *\n     * @param Address $address\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function addressCardHtml(Address $address, array $config = []): string\n    {\n        $config += [\n            'name' => null,\n        ];\n\n        $label = $address->title;\n        $canDelete = $address->canDelete(Craft::$app->getUser()->getIdentity());\n        $actionMenuId = sprintf('address-card-action-menu-%s', mt_rand());\n\n        return\n            Html::beginTag('li', [\n                'class' => 'address-card',\n                'data' => [\n                    'id' => $address->id,\n                    'draftId' => $address->draftId,\n                ],\n            ]) .\n            ($config['name'] ? Html::hiddenInput(\"{$config['name']}[]\", (string)$address->id) : '') .\n            Html::beginTag('div', ['class' => 'address-card-header']) .\n            Html::tag('h2', $address->title, [\n                'class' => array_filter([\n                    'address-card-label',\n                    !$label ? 'hidden' : null,\n                ]),\n            ]) .\n            ($canDelete\n                ? Html::beginTag('div', [\n                    'class' => 'address-card-header-actions',\n                    'data' => [\n                        'wrapper' => true,\n                    ],\n                ]) .\n                Html::button('', [\n                    'class' => ['btn', 'menubtn'],\n                    'title' => Craft::t('app', 'Actions'),\n                    'aria' => [\n                        'controls' => $actionMenuId,\n                        'label' => sprintf('%s %s', $label ?? Craft::t('app', 'New Address'), Craft::t('app', 'Settings')),\n                    ],\n                    'data' => [\n                        'icon' => 'settings',\n                        'disclosure-trigger' => true,\n                    ],\n                ]) .\n                Html::beginTag('div', [\n                    'id' => $actionMenuId,\n                    'class' => ['menu', 'menu--disclosure'],\n                ]) .\n                Html::beginTag('ul', ['class' => 'padded']) .\n                Html::beginTag('li') .\n                Html::button(Craft::t('app', 'Edit'), [\n                    'class' => 'menu-option',\n                    'type' => 'button',\n                    'aria' => [\n                        'label' => Craft::t('app', 'Edit'),\n                    ],\n                    'data' => [\n                        'icon' => 'edit',\n                        'action' => 'edit',\n                    ],\n                ]) .\n                Html::endTag('li') .\n                Html::beginTag('li') .\n                Html::button(Craft::t('app', 'Delete'), [\n                    'class' => 'error menu-option',\n                    'type' => 'button',\n                    'aria' => [\n                        'label' => Craft::t('app', 'Delete'),\n                    ],\n                    'data' => [\n                        'icon' => 'remove',\n                        'action' => 'delete',\n                    ],\n                ]) .\n                Html::endTag('li') .\n                Html::endTag('ul') .\n                Html::endTag('div') . // .menu\n                Html::endTag('div') // .address-card-header-actions\n                : ''\n            ) .\n            Html::endTag('div') . // .address-card-header\n            Html::tag('div', Craft::$app->getAddresses()->formatAddress($address), [\n                'class' => 'address-card-body',\n            ]) .\n            Html::endTag('li'); // .address-card\n    }\n\n    /**\n     * Returns address fields\u2019 HTML (sans country) for a given address.\n     *\n     * @param Address $address\n     * @return string\n     * @since 4.0.0\n     */\n    public static function addressFieldsHtml(Address $address): string\n    {\n        $formatRepo = Craft::$app->getAddresses()->getAddressFormatRepository()->get($address->countryCode);\n\n        $requiredFields = [];\n        $scenario = $address->getScenario();\n        $address->setScenario(Element::SCENARIO_LIVE);\n        $activeValidators = $address->getActiveValidators();\n        $address->setScenario($scenario);\n\n        foreach ($activeValidators as $validator) {\n            if ($validator instanceof RequiredValidator) {\n                foreach ($validator->getAttributeNames() as $attr) {\n                    if ($validator->when === null || call_user_func($validator->when, $address, $attr)) {\n                        $requiredFields[$attr] = true;\n                    }\n                }\n            }\n        }\n\n        $visibleFields = array_flip(array_merge(\n                $formatRepo->getUsedFields(),\n                $formatRepo->getUsedSubdivisionFields(),\n            )) + $requiredFields;\n\n        return\n            static::textFieldHtml([\n                'label' => $address->getAttributeLabel('addressLine1'),\n                'id' => 'addressLine1',\n                'name' => 'addressLine1',\n                'value' => $address->addressLine1,\n                'required' => isset($requiredFields['addressLine1']),\n                'errors' => $address->getErrors('addressLine1'),\n            ]) .\n            static::textFieldHtml([\n                'label' => $address->getAttributeLabel('addressLine2'),\n                'id' => 'addressLine2',\n                'name' => 'addressLine2',\n                'value' => $address->addressLine2,\n                'required' => isset($requiredFields['addressLine2']),\n                'errors' => $address->getErrors('addressLine2'),\n            ]) .\n            self::_subdivisionField(\n                $address,\n                'administrativeArea',\n                isset($visibleFields['administrativeArea']),\n                isset($requiredFields['administrativeArea']),\n                [$address->countryCode],\n                true,\n            ) .\n            self::_subdivisionField(\n                $address,\n                'locality',\n                isset($visibleFields['locality']),\n                isset($requiredFields['locality']),\n                [$address->countryCode, $address->administrativeArea],\n                true,\n            ) .\n            self::_subdivisionField(\n                $address,\n                'dependentLocality',\n                isset($visibleFields['dependentLocality']),\n                isset($requiredFields['dependentLocality']),\n                [$address->countryCode, $address->administrativeArea, $address->locality],\n                false,\n            ) .\n            Html::beginTag('div', ['class' => 'flex-fields']) .\n            static::textFieldHtml([\n                'fieldClass' => array_filter([\n                    'width-50',\n                    !isset($visibleFields['postalCode']) ? 'hidden' : null,\n                ]),\n                'label' => $address->getAttributeLabel('postalCode'),\n                'id' => 'postalCode',\n                'name' => 'postalCode',\n                'value' => $address->postalCode,\n                'required' => isset($requiredFields['postalCode']),\n                'errors' => $address->getErrors('postalCode'),\n            ]) .\n            static::textFieldHtml([\n                'fieldClass' => array_filter([\n                    'width-50',\n                    !isset($visibleFields['sortingCode']) ? 'hidden' : null,\n                ]),\n                'label' => $address->getAttributeLabel('sortingCode'),\n                'id' => 'sortingCode',\n                'name' => 'sortingCode',\n                'value' => $address->sortingCode,\n                'required' => isset($requiredFields['sortingCode']),\n                'errors' => $address->getErrors('sortingCode'),\n            ]) .\n            Html::endTag('div'); // .flex-fields\n    }\n\n    private static function _subdivisionField(\n        Address $address,\n        string $name,\n        bool $visible,\n        bool $required,\n        ?array $parents,\n        bool $spinner,\n    ): string {\n        $value = $address->$name;\n        $options = Craft::$app->getAddresses()->getSubdivisionRepository()->getList($parents, Craft::$app->language);\n\n        if ($options) {\n            // Persist invalid values in the UI\n            if ($value && !isset($options[$value])) {\n                $options[$value] = $value;\n            }\n\n            if ($spinner) {\n                $errors = $address->getErrors($name);\n                $input =\n                    Html::beginTag('div', [\n                        'class' => ['flex', 'flex-nowrap'],\n                    ]) .\n                    static::selectizeHtml([\n                        'id' => $name,\n                        'name' => $name,\n                        'value' => $value,\n                        'options' => $options,\n                        'errors' => $errors,\n                    ]) .\n                    Html::tag('div', '', [\n                        'id' => \"$name-spinner\",\n                        'class' => ['spinner', 'hidden'],\n                    ]) .\n                    Html::endTag('div');\n\n                return static::fieldHtml($input, [\n                    'fieldClass' => !$visible ? 'hidden' : null,\n                    'label' => $address->getAttributeLabel($name),\n                    'id' => $name,\n                    'required' => $required,\n                    'errors' => $errors,\n                ]);\n            }\n\n            return static::selectizeFieldHtml([\n                'fieldClass' => !$visible ? 'hidden' : null,\n                'label' => $address->getAttributeLabel($name),\n                'id' => $name,\n                'name' => $name,\n                'value' => $value,\n                'options' => $options,\n                'required' => $required,\n                'errors' => $address->getErrors($name),\n            ]);\n        }\n\n        // No preconfigured subdivisions for the given parents, so just output a text input\n        return static::textFieldHtml([\n            'fieldClass' => !$visible ? 'hidden' : null,\n            'label' => $address->getAttributeLabel($name),\n            'id' => $name,\n            'name' => $name,\n            'value' => $value,\n            'required' => $required,\n            'errors' => $address->getErrors($name),\n        ]);\n    }\n\n    /**\n     * Renders a field layout designer.\n     *\n     * @param FieldLayout $fieldLayout\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function fieldLayoutDesignerHtml(FieldLayout $fieldLayout, array $config = []): string\n    {\n        $config += [\n            'id' => 'fld' . mt_rand(),\n            'customizableTabs' => true,\n            'customizableUi' => true,\n        ];\n\n        $tabs = array_filter($fieldLayout->getTabs(), fn(FieldLayoutTab $tab) => !empty($tab->getElements()));\n\n        if (!$config['customizableTabs']) {\n            $tab = array_shift($tabs) ?? new FieldLayoutTab([\n                    'uid' => StringHelper::UUID(),\n                    'layout' => $fieldLayout,\n                ]);\n            $tab->name = $config['pretendTabName'] ?? Craft::t('app', 'Content');\n\n            // Any extra tabs?\n            if (!empty($tabs)) {\n                $elements = $tab->getElements();\n                foreach ($tabs as $extraTab) {\n                    array_push($elements, ...$extraTab->getElements());\n                }\n                $tab->setElements($elements);\n            }\n\n            $tabs = [$tab];\n        }\n\n        // Make sure all tabs and their elements have UUIDs\n        // (We do this here instead of from FieldLayoutComponent::init() because the we don't want field layout forms to\n        // get the impression that tabs/elements have persisting UUIDs if they don't.)\n        foreach ($tabs as $tab) {\n            if (!isset($tab->uid)) {\n                $tab->uid = StringHelper::UUID();\n            }\n\n            foreach ($tab->getElements() as $layoutElement) {\n                if (!isset($layoutElement->uid)) {\n                    $layoutElement->uid = StringHelper::UUID();\n                }\n            }\n        }\n\n        $view = Craft::$app->getView();\n        $jsSettings = Json::encode([\n            'customizableTabs' => $config['customizableTabs'],\n            'customizableUi' => $config['customizableUi'],\n        ]);\n        $namespacedId = $view->namespaceInputId($config['id']);\n\n        $js = <<<JS\nnew Craft.FieldLayoutDesigner(\"#$namespacedId\", $jsSettings);\nJS;\n        $view->registerJs($js);\n\n        $availableCustomFields = $fieldLayout->getAvailableCustomFields();\n        $availableNativeFields = $fieldLayout->getAvailableNativeFields();\n        $availableUiElements = $fieldLayout->getAvailableUiElements();\n\n        // Make sure everything has the field layout set properly\n        foreach ($availableCustomFields as $groupFields) {\n            self::_setLayoutOnElements($groupFields, $fieldLayout);\n        }\n        self::_setLayoutOnElements($availableNativeFields, $fieldLayout);\n        self::_setLayoutOnElements($availableUiElements, $fieldLayout);\n\n        // Don't call FieldLayout::getConfig() here because we want to include *all* tabs, not just non-empty ones\n        $fieldLayoutConfig = [\n            'uid' => $fieldLayout->uid,\n            'tabs' => array_map(fn(FieldLayoutTab $tab) => $tab->getConfig(), $tabs),\n        ];\n\n        if ($fieldLayout->id) {\n            $fieldLayoutConfig['id'] = $fieldLayout->id;\n        }\n\n        $newTabSettingsData = self::_fldTabSettingsData(new FieldLayoutTab([\n            'uid' => 'TAB_UID',\n            'name' => 'TAB_NAME',\n            'layout' => $fieldLayout,\n        ]));\n\n        return\n            Html::beginTag('div', [\n                'id' => $config['id'],\n                'class' => 'layoutdesigner',\n                'data' => [\n                    'new-tab-settings-namespace' => $newTabSettingsData['settings-namespace'],\n                    'new-tab-settings-html' => $newTabSettingsData['settings-html'],\n                    'new-tab-settings-js' => $newTabSettingsData['settings-js'],\n                ],\n            ]) .\n            Html::hiddenInput('fieldLayout', Json::encode($fieldLayoutConfig), [\n                'data' => ['config-input' => true],\n            ]) .\n            Html::beginTag('div', ['class' => 'fld-workspace']) .\n            Html::beginTag('div', ['class' => 'fld-tabs']) .\n            implode('', array_map(fn(FieldLayoutTab $tab) => self::_fldTabHtml($tab, $config['customizableTabs']), $tabs)) .\n            Html::endTag('div') . // .fld-tabs\n            ($config['customizableTabs']\n                ? Html::button(Craft::t('app', 'New Tab'), [\n                    'type' => 'button',\n                    'class' => ['fld-new-tab-btn', 'btn', 'add', 'icon'],\n                ])\n                : '') .\n            Html::endTag('div') . // .fld-workspace\n            Html::beginTag('div', ['class' => 'fld-sidebar']) .\n            ($config['customizableUi']\n                ? Html::beginTag('div', [\n                    'role' => 'listbox',\n                    'class' => ['btngroup', 'small', 'fullwidth'],\n                    'aria' => ['label' => Craft::t('app', 'Layout element types')],\n                    'tabindex' => '0',\n                ]) .\n                Html::button(Craft::t('app', 'Fields'), [\n                    'role' => 'option',\n                    'type' => 'button',\n                    'class' => ['btn', 'small', 'active'],\n                    'aria' => ['selected' => 'true'],\n                    'data' => ['library' => 'field'],\n                    'tabindex' => '-1',\n                ]) .\n                Html::button(Craft::t('app', 'UI Elements'), [\n                    'role' => 'option',\n                    'type' => 'button',\n                    'class' => ['btn', 'small'],\n                    'aria' => ['selected' => 'false'],\n                    'data' => ['library' => 'ui'],\n                    'tabindex' => '-1',\n                ]) .\n                Html::endTag('div') // .btngroup\n                : '') .\n            Html::beginTag('div', ['class' => 'fld-field-library']) .\n            Html::beginTag('div', ['class' => ['texticon', 'search', 'icon', 'clearable']]) .\n            static::textHtml([\n                'class' => 'fullwidth',\n                'inputmode' => 'search',\n                'placeholder' => Craft::t('app', 'Search'),\n            ]) .\n            Html::tag('div', '', [\n                'class' => ['clear', 'hidden'],\n                'title' => Craft::t('app', 'Clear'),\n                'aria' => ['label' => Craft::t('app', 'Clear')],\n            ]) .\n            Html::endTag('div') . // .texticon\n            self::_fldFieldSelectorsHtml(Craft::t('app', 'Native Fields'), $availableNativeFields, $fieldLayout) .\n            implode('', array_map(fn(string $groupName) => self::_fldFieldSelectorsHtml($groupName, $availableCustomFields[$groupName], $fieldLayout), array_keys($availableCustomFields))) .\n            Html::endTag('div') . // .fld-field-library\n            ($config['customizableUi']\n                ? Html::beginTag('div', ['class' => ['fld-ui-library', 'hidden']]) .\n                implode('', array_map(fn(FieldLayoutElement $element) => self::_fldElementSelectorHtml($element, true), $availableUiElements)) .\n                Html::endTag('div') // .fld-ui-library\n                : '') .\n            Html::endTag('div') . // .fld-sidebar\n            Html::endTag('div'); // .layoutdesigner\n    }\n\n    /**\n     * @param FieldLayoutElement[] $elements\n     * @param FieldLayout $fieldLayout\n     */\n    private static function _setLayoutOnElements(array $elements, FieldLayout $fieldLayout): void\n    {\n        foreach ($elements as $element) {\n            $element->setLayout($fieldLayout);\n        }\n    }\n\n    /**\n     * @param FieldLayoutTab $tab\n     * @param bool $customizable\n     * @return string\n     */\n    private static function _fldTabHtml(FieldLayoutTab $tab, bool $customizable): string\n    {\n        return\n            Html::beginTag('div', [\n                'class' => 'fld-tab',\n                'data' => array_merge([\n                    'uid' => $tab->uid,\n                ], self::_fldTabSettingsData($tab)),\n            ]) .\n            Html::beginTag('div', ['class' => 'tabs']) .\n            Html::beginTag('div', [\n                'class' => array_filter([\n                    'tab',\n                    'sel',\n                    $customizable ? 'draggable' : null,\n                ]),\n            ]) .\n            Html::tag('span', $tab->name) .\n            ($customizable\n                ? Html::a('', null, [\n                    'role' => 'button',\n                    'class' => ['settings', 'icon'],\n                    'title' => Craft::t('app', 'Edit'),\n                    'aria' => ['label' => Craft::t('app', 'Edit')],\n                ]) :\n                '') .\n            Html::endTag('div') . // .tab\n            Html::endTag('div') . // .tabs\n            Html::beginTag('div', ['class' => 'fld-tabcontent']) .\n            implode('', array_map(fn(FieldLayoutElement $element) => self::_fldElementSelectorHtml($element, false), $tab->getElements())) .\n            Html::endTag('div') . // .fld-tabcontent\n            Html::endTag('div'); // .fld-tab\n    }\n\n    /**\n     * @param FieldLayoutTab $tab\n     * @return array\n     */\n    private static function _fldTabSettingsData(FieldLayoutTab $tab): array\n    {\n        $view = Craft::$app->getView();\n        $oldNamespace = $view->getNamespace();\n        $namespace = $view->namespaceInputName(\"tab-$tab->uid\");\n        $view->setNamespace($namespace);\n        $view->startJsBuffer();\n        $settingsHtml = $view->namespaceInputs($tab->getSettingsHtml());\n        $settingsJs = $view->clearJsBuffer(false);\n        $view->setNamespace($oldNamespace);\n\n        return [\n            'settings-namespace' => $namespace,\n            'settings-html' => $settingsHtml,\n            'settings-js' => $settingsJs,\n        ];\n    }\n\n    /**\n     * @param FieldLayoutElement $element\n     * @param bool $forLibrary\n     * @param array $attr\n     * @return string\n     */\n    private static function _fldElementSelectorHtml(FieldLayoutElement $element, bool $forLibrary, array $attr = []): string\n    {\n        if ($element instanceof BaseField) {\n            $attr = ArrayHelper::merge($attr, [\n                'class' => !$forLibrary && $element->required ? ['fld-required'] : [],\n                'data' => [\n                    'keywords' => $forLibrary ? implode(' ', array_map('mb_strtolower', $element->keywords())) : false,\n                ],\n            ]);\n        }\n\n        $view = Craft::$app->getView();\n        $oldNamespace = $view->getNamespace();\n        $namespace = $view->namespaceInputName('element-' . ($forLibrary ? 'ELEMENT_UID' : $element->uid));\n        $view->setNamespace($namespace);\n        $view->startJsBuffer();\n        $settingsHtml = $view->namespaceInputs($element->getSettingsHtml());\n        $settingsJs = $view->clearJsBuffer(false);\n        $view->setNamespace($oldNamespace);\n\n        $attr = ArrayHelper::merge($attr, [\n            'class' => array_filter([\n                'fld-element',\n                $forLibrary ? 'unused' : null,\n                !$forLibrary && $element->hasConditions() ? 'has-conditions' : null,\n            ]),\n            'data' => [\n                'uid' => !$forLibrary ? $element->uid : false,\n                'config' => $forLibrary ? ['type' => get_class($element)] + $element->toArray() : false,\n                'has-custom-width' => $element->hasCustomWidth(),\n                'settings-namespace' => $namespace,\n                'settings-html' => $settingsHtml ?: false,\n                'settings-js' => $settingsJs ?: false,\n            ],\n        ]);\n\n        return Html::modifyTagAttributes($element->selectorHtml(), $attr);\n    }\n\n    /**\n     * @param string $groupName\n     * @param BaseField[] $groupFields\n     * @param FieldLayout $fieldLayout\n     * @return string\n     */\n    private static function _fldFieldSelectorsHtml(string $groupName, array $groupFields, FieldLayout $fieldLayout): string\n    {\n        $showGroup = ArrayHelper::contains($groupFields, fn(BaseField $field) => !$fieldLayout->isFieldIncluded($field->attribute()));\n\n        return\n            Html::beginTag('div', [\n                'class' => array_filter([\n                    'fld-field-group',\n                    $showGroup ? null : 'hidden',\n                ]),\n                'data' => ['name' => mb_strtolower($groupName)],\n            ]) .\n            Html::tag('h6', $groupName) .\n            implode('', array_map(fn(BaseField $field) => self::_fldElementSelectorHtml($field, true, [\n                'class' => array_filter([\n                    $fieldLayout->isFieldIncluded($field->attribute()) ? 'hidden' : null,\n                ]),\n            ]), $groupFields)) .\n            Html::endTag('div'); // .fld-field-group\n    }\n\n    /**\n     * Returns a metadata component\u2019s HTML.\n     *\n     * @param array $data The data, with keys representing the labels. The values can either be strings or callables.\n     * If a value is `false`, it will be omitted.\n     * @return string\n     */\n    public static function metadataHtml(array $data): string\n    {\n        $defs = [];\n\n        foreach ($data as $label => $value) {\n            if (is_callable($value)) {\n                $value = $value();\n            }\n            if ($value !== false) {\n                $defs[] =\n                    Html::beginTag('div', [\n                        'class' => 'data',\n                    ]) .\n                    Html::tag('dt', Html::encode($label), ['class' => 'heading']) . \"\\n\" .\n                    Html::tag('dd', $value, ['class' => 'value']) . \"\\n\" .\n                    Html::endTag('div');\n            }\n        }\n\n        if (empty($defs)) {\n            return '';\n        }\n\n        return Html::tag('dl', implode(\"\\n\", $defs), [\n            'class' => ['meta', 'read-only'],\n        ]);\n    }\n\n    /**\n     * Returns the site the control panel is currently working with, via a `site` query string param if sent.\n     *\n     * @return Site|null The site, or `null` if the user doesn\u2019t have permission to edit any sites.\n     * @since 4.0.0\n     */\n    public static function requestedSite(): ?Site\n    {\n        if (!isset(self::$_requestedSite)) {\n            $sitesService = Craft::$app->getSites();\n            $editableSiteIds = $sitesService->getEditableSiteIds();\n\n            if (!empty($editableSiteIds)) {\n                $request = Craft::$app->getRequest();\n                if (\n                    !$request->getIsConsoleRequest() &&\n                    ($handle = $request->getQueryParam('site')) !== null &&\n                    ($site = $sitesService->getSiteByHandle($handle, true)) !== null &&\n                    in_array($site->id, $editableSiteIds, false)\n                ) {\n                    self::$_requestedSite = $site;\n                } else {\n                    self::$_requestedSite = $sitesService->getCurrentSite();\n\n                    if (!in_array(self::$_requestedSite->id, $editableSiteIds, false)) {\n                        // Just go with the first editable site\n                        self::$_requestedSite = $sitesService->getSiteById($editableSiteIds[0]);\n                    }\n                }\n            } else {\n                self::$_requestedSite = false;\n            }\n        }\n\n        return self::$_requestedSite ?: null;\n    }\n}\n", "{% requireAdmin %}\n\n{% extends \"_layouts/cp\" %}\n{% set title = \"Fields\"|t('app') %}\n\n{% do view.registerAssetBundle(\"craft\\\\web\\\\assets\\\\fields\\\\FieldsAsset\") %}\n{% do view.registerAssetBundle('craft\\\\web\\\\assets\\\\admintable\\\\AdminTableAsset') -%}\n\n{% do view.registerTranslations('app', [\n    \"What do you want to name the group?\",\n    \"Could not create the group:\",\n    \"Could not create the group:\",\n    \"Are you sure you want to delete this group and all its fields?\",\n    \"Could not delete the group.\",\n    \"Group renamed.\",\n    \"Name\",\n    \"Handle\",\n    \"Type\",\n    \"Group\",\n    \"This field\u2019s values are used as search keywords.\",\n    \"This group doesn\u2019t have any fields yet.\",\n    \"No fields exist yet.\",\n]) %}\n\n{% set crumbs = [\n    { label: \"Settings\"|t('app'), url: url('settings') }\n] %}\n\n{% set groups = craft.app.fields.getAllGroups()|index('id') %}\n\n{% if groupId is defined %}\n    {% if groups[groupId] is not defined %}\n        {% exit 404 %}\n    {% endif %}\n\n    {% set fields = groups[groupId].getFields() %}\n    {% set emptyMessage = \"This group doesn\u2019t have any fields yet.\"|t('app') %}\n{% else %}\n    {% set emptyMessage = \"No fields exist yet.\"|t('app') %}\n    {% set fields = craft.app.fields.getAllFields() %}\n{% endif %}\n\n\n{% block actionButton %}\n    {% if groups %}\n        {% set newFieldUrl = url('settings/fields/new', (groupId is defined ? { groupId: groupId } : null)) %}\n        <a href=\"{{ newFieldUrl }}\" class=\"submit btn add icon\">{{ \"New field\"|t('app') }}</a>\n    {% endif %}\n{% endblock %}\n\n\n{% block sidebar %}\n    <nav>\n        <ul id=\"groups\">\n            <li><a href=\"{{ url('settings/fields') }}\"{% if groupId is not defined %} class=\"sel\"{% endif %}>{{ \"All Fields\"|t('app') }}</a></li>\n            {% for group in groups %}\n                <li><a href=\"{{ url('settings/fields/'~group.id) }}\"{% if groupId is defined and group.id == groupId %} class=\"sel\"{% endif %} data-id=\"{{ group.id }}\">{{ group.name|t('site') }}</a></li>\n            {% endfor %}\n        </ul>\n    </nav>\n\n    <div class=\"buttons\">\n        <button type=\"button\" id=\"newgroupbtn\" class=\"btn add icon\">{{ \"New group\"|t('app') }}</button>\n\n        {% if groupId is defined %}\n            <button type=\"button\" id=\"groupsettingsbtn\" class=\"btn settings icon menubtn\" title=\"{{ 'Settings'|t('app') }}\" aria-label=\"{{ 'Settings'|t('app') }}\"></button>\n            <div class=\"menu\">\n                <ul>\n                    <li><a data-action=\"rename\" role=\"button\">{{ \"Rename selected group\"|t('app') }}</a></li>\n                    <li><a data-action=\"delete\" role=\"button\">{{ \"Delete selected group\"|t('app') }}</a></li>\n                </ul>\n            </div>\n        {% endif %}\n    </div>\n{% endblock %}\n\n\n{% block content %}\n    <div id=\"fields-vue-admin-table\"></div>\n{% endblock %}\n\n{% set tableData = [] %}\n{% for field in fields %}\n    {% set fieldIsMissing = false %}\n\n    {% if field is missing %}\n        {% set fieldIsMissing = true %}\n    {% endif %}\n\n    {% set group = field.getGroup() %}\n\n    {% set tableData = tableData|merge([{\n        id: field.id,\n        title: field.name|t('site'),\n        translatable: field.getIsTranslatable() ? (field.getTranslationDescription() ?? 'This field is translatable.'|t('app')),\n        searchable: field.searchable ? true : false,\n        url: url('settings/fields/edit/' ~ field.id),\n        handle: field.handle,\n        type: {\n            isMissing: fieldIsMissing,\n            label: fieldIsMissing ? field.expectedType : field.displayName()\n        },\n        group: group ? group.name|t('site') : \"<span class=\\\"error\\\">#{'(Ungrouped)'|t('app')}</span>\",\n    }]) %}\n{% endfor %}\n\n{% js %}\n    var columns = [\n        { name: '__slot:title', title: Craft.t('app', 'Name') },\n        {\n            name: 'searchable',\n            titleClass: 'thin',\n            callback: value => {\n                if (!value) {\n                    return null;\n                }\n                return `<div class=\"badge-icon\" data-icon=\"search\" title=\"${Craft.t('app', 'This field\u2019s values are used as search keywords.')}\" aria-label=\"${Craft.t('app', 'This field\u2019s values are used as search keywords.')}\"></div>`;\n            }\n        },\n        {% if craft.app.isMultiSite %}\n        {\n            name: 'translatable',\n            titleClass: 'thin',\n            callback: value => {\n                if (!value) {\n                    return null;\n                }\n                return `<div class=\"badge-icon\" data-icon=\"language\" title=\"${value}\" aria-label=\"${value}\"></div>`;\n            }\n        },\n        {% endif %}\n        { name: '__slot:handle', title: Craft.t('app', 'Handle') },\n        {\n            name: 'type',\n            title: Craft.t('app', 'Type'),\n            callback: function(value) {\n                if (value.isMissing) {\n                    return '<span class=\"error\">' + value.label + '</span>'\n                }\n\n                return value.label\n            }\n        },\n    ];\n\n    {% if groupId is not defined %}\n        columns.push({\n            name: 'group',\n            title: Craft.t('app', 'Group'),\n        })\n    {% endif %}\n\n    new Craft.VueAdminTable({\n        columns: columns,\n        container: '#fields-vue-admin-table',\n        deleteAction: 'fields/delete-field',\n        emptyMessage: Craft.t('app', '{{ emptyMessage }}'),\n        tableData: {{ tableData|json_encode|raw }},\n    });\n{% endjs %}\n"], "fixing_code": ["# Release Notes for Craft CMS 4\n\n## Unreleased\n\n### Added\n- Added `craft\\config\\GeneralConfig::getRememberedUserSessionDuration()`.\n- Added `craft\\helpers\\DateTimeHelper::toDateInterval()`.\n\n### Changed\n- `craft\\config\\DbConfig::dsn()` now parses the DSN string and populates the other DSN-settable config properties.\n\n### Deprecated\n- Deprecated `craft\\helpers\\DateTimeHelper::secondsToInterval()`. `toDateInterval()` should be used instead.\n\n### Fixed\n- Fixed a bug where database connections would always use port `3306` by default if `craft\\config\\DbConfig` had been configured via fluent methods, even for PostgreSQL.\n- Fixed a bug where system messages provided by Yii weren\u2019t getting translated in some cases. ([#11712](https://github.com/craftcms/cms/issues/11712))\n- Fixed a bug where the \u201cKeep me signed in\u201d checkbox label wasn\u2019t always accurately representing the `rememberedUserSessionDuration` config setting. ([#11594](https://github.com/craftcms/cms/discussions/11594))\n\n### Security\n- Fixed XSS vulnerabilities.\n\n## 4.2.0.2 - 2022-07-27\n\n### Fixed\n- Fixed a bug where `Garnish.uiShortcutManager` was getting double-instantiated, causing some keyboard shortcuts to be triggered multiple times.\n- Fixed a JavaScript error that occurred when switching sites in the control panel. ([#11709](https://github.com/craftcms/cms/issues/11709))\n- Fixed a bug where some config settings set via fluent setters weren\u2019t getting normalized.\n- Fixed a bug where the database connection DSN string wasn\u2019t getting built properly when the connection settings were set via fluent setters.\n\n## 4.2.0.1 - 2022-07-26\n\n### Fixed\n- Fixed an error that could occur when passing an object into `craft\\helpers\\ArrayHelper::removeValue()` or the `|without` filter.\n\n## 4.2.0 - 2022-07-26\n\n### Added\n- The control panel is now translated into Ukrainian.\n- Element conditions can now include condition rules for Matrix fields. ([#11620](https://github.com/craftcms/cms/issues/11620))\n- Element conditions can now include condition rules for Money fields. ([#11560](https://github.com/craftcms/cms/issues/11560))\n- Added the \u201cNotification Duration\u201d user accessibility preference. ([#11612](https://github.com/craftcms/cms/pull/11612))\n- The `accessibilityDefaults` config setting now supports a `notificationDuration` key.\n- Added `craft\\behaviors\\SessionBehavior::getSuccess()`.\n- Added `craft\\behaviors\\SessionBehavior::setSuccess()`.\n- Added `craft\\config\\BaseConfig`. ([#11591](https://github.com/craftcms/cms/pull/11591), [#11656](https://github.com/craftcms/cms/pull/11656))\n- Added `craft\\controllers\\UsersController::EVENT_AFTER_FIND_LOGIN_USER`. ([#11645](https://github.com/craftcms/cms/pull/11645))\n- Added `craft\\controllers\\UsersController::EVENT_BEFORE_FIND_LOGIN_USER`. ([#11645](https://github.com/craftcms/cms/pull/11645))\n- Added `craft\\events\\DefineFieldLayoutCustomFieldsEvent`.\n- Added `craft\\events\\FindLoginUserEvent`.\n- Added `craft\\events\\IndexKeywordsEvent`.\n- Added `craft\\fields\\conditions\\EmptyFieldConditionRule`.\n- Added `craft\\helpers\\DateTimeHelper::humanDuration()`.\n- Added `craft\\helpers\\Template::resolveTemplatePathAndLine()`.\n- Added `craft\\models\\FieldLayout::EVENT_DEFINE_CUSTOM_FIELDS`. ([#11634](https://github.com/craftcms/cms/discussions/11634))\n- Added `craft\\services\\Config::getLoadingConfigFile()`.\n- Added `craft\\services\\Elements::EVENT_INVALIDATE_CACHES`. ([#11617](https://github.com/craftcms/cms/pull/11617))\n- Added `craft\\services\\Search::EVENT_BEFORE_INDEX_KEYWORDS`. ([#11575](https://github.com/craftcms/cms/discussions/11575))\n\n### Changed\n- Redesigned user notifications. ([#11612](https://github.com/craftcms/cms/pull/11612))\n- Most element notifications now include a link to the element. ([#11612](https://github.com/craftcms/cms/pull/11612))\n- Improved overall control panel accessibility. ([#11563](https://github.com/craftcms/cms/pull/11563), [#11543](https://github.com/craftcms/cms/pull/11543), [#11688](https://github.com/craftcms/cms/pull/11688), [#11699](https://github.com/craftcms/cms/pull/11699))\n- Improved condition builder accessibility. ([#11588](https://github.com/craftcms/cms/pull/11588), [#11643](https://github.com/craftcms/cms/pull/11643))\n- Improved Image Editor accessibility. ([#11496](https://github.com/craftcms/cms/pull/11496))\n- The \u201cKeep me signed in\u201d checkbox label on the control panel\u2019s login page now includes the remembered session duration, e.g. \u201cKeep me signed in for 2 weeks\u201d. ([#11594](https://github.com/craftcms/cms/discussions/11594))\n- Dashboard widgets no longer show a confirmation dialog when deleted. Their delete notifications include an \u201cUndo\u201d button instead. ([#11573](https://github.com/craftcms/cms/discussions/11573))\n- Element edit pages no longer jump down when the \u201cShowing your unsaved changes\u201d notice is added, unless there\u2019s not enough content to require a scroll bar. ([#11586](https://github.com/craftcms/cms/discussions/11586))\n- Matrix block previews now show selected option labels rather than their raw values. ([#11659](https://github.com/craftcms/cms/issues/11659))\n- Improved the behavior of some console commands for non-interactive shells. ([#11650](https://github.com/craftcms/cms/issues/11650))\n- The `utils/prune-revisions` console command now has a `--section` option. ([#8783](https://github.com/craftcms/cms/discussions/8783))\n- Deprecation warnings\u2019 stack traces now show source templates\u2019 paths and line numbers.\n- Exception JSON responses now include the previous exception details, recursively. ([#11694](https://github.com/craftcms/cms/discussions/11694))\n- `config/general.php` and `config/db.php` can now return `craft\\config\\GeneralConfig`/`DbConfig` objects, which can be defined using new fluent setter methods. ([#11591](https://github.com/craftcms/cms/pull/11591), [#11656](https://github.com/craftcms/cms/pull/11656))\n- The `|duration` Twig filter can now be used with an integer representing a number of seconds, and its `showSeconds` argument is no longer required. Seconds will be output if the duration is less than one minute by default.\n- The `|length` Twig filter now checks if the variable is a query, and if so, returns its count. ([#11625](https://github.com/craftcms/cms/discussions/11625))\n- The `|without` Twig filter no longer uses strict value comparisons by default. It has a new `$strict` argument that can be set to `true` to enforce strict comparisons if desired. ([#11695](https://github.com/craftcms/cms/issues/11695))\n- `craft\\base\\conditions\\BaseConditionRule::inputHtml()` is no longer abstract, and returns an empty string by default.\n- `craft\\behaviors\\SessionBehavior::setError()` now has a `$settings` argument.\n- `craft\\behaviors\\SessionBehavior::setNotice()` now has a `$settings` argument.\n- `craft\\db\\Query` now implements the `ArrayAccess` and `IteratorAggregate` interfaces, so queries (including element queries) can be treated as arrays.\n- `craft\\helpers\\ArrayHelper::removeValue()` no longer uses strict value comparisons by default. It has a new `$strict` argument that can be set to `true` to enforce strict comparisons if desired.\n- `craft\\web\\Controller::asSuccess()` now has a `$notificationSettings` argument.\n- `craft\\web\\Controller::setFailFlash()` now has a `$settings` argument.\n- `craft\\web\\Controller::setSuccessFlash()` now has a `$settings` argument.\n\n### Deprecated\n- Deprecated `craft\\helpers\\DateTimeHelper::humanDurationFromInterval()`. `humanDuration()` should be used instead.\n- Deprecated `craft\\helpers\\DateTimeHelper::secondsToHumanTimeDuration()`. `humanDuration()` should be used instead.\n\n### Fixed\n- Fixed a bug where new condition rules\u2019 type selectors weren\u2019t getting auto-focused.\n- Fixed a bug where Quick Post widgets weren\u2019t submitting custom field values.\n- Fixed a bug where assets\u2019 `getImg()` methods were returning `null` for assets in volumes without URLs, even if a transform was being used. ([#11614](https://github.com/craftcms/cms/issues/11614))\n- Fixed a bug where sensitive data wasn\u2019t getting redacted in the logs when Dev Mode was enabled. ([#11618](https://github.com/craftcms/cms/issues/11618))\n- Fixed a SQL error that could occur on MySQL 5. ([#11596](https://github.com/craftcms/cms/issues/11596))\n- Fixed an error that could occur when upgrading to Craft 4. ([#11644](https://github.com/craftcms/cms/issues/11644))\n- Fixed a bug where the green color used in lightswitches was too dark. ([#11653](https://github.com/craftcms/cms/issues/11653))\n- Fixed a bug where relational and Matrix fields were assuming their values hadn\u2019t been eager-loaded on element save. ([#11667](https://github.com/craftcms/cms/issues/11667), [#11670](https://github.com/craftcms/cms/issues/11670))\n- Fixed a bug where deprecation warnings for treating an element query as an array weren\u2019t getting logged with an origin, if they involved Twig\u2019s `|batch` filter. ([#11597](https://github.com/craftcms/cms/issues/11597))\n- Fixed a bug where `{% js %}`, `{% script %}`, and `{% css %}` tags weren\u2019t registering JavaScript and CSS code properly when used within a `{% cache %}` tag that contained an ungenerated image transform. ([#11602](https://github.com/craftcms/cms/issues/11602))\n- Fixed a bug where the \u201cUser saved\u201d notification was translated for the former language, when changing the current user\u2019s language preference.\n- Fixed a JavaScript error that occurred when removing a category from a Categories field, if any of its descendants were selected as well. ([#11641](https://github.com/craftcms/cms/issues/11641))\n- Fixed a bug where links to config settings from **Settings** \u2192 **General** didn\u2019t include the correct setting anchors. ([#11665](https://github.com/craftcms/cms/pull/11665))\n- Fixed styling issues with Live Preview in Firefox.\n\n### Security\n- Fixed an information disclosure vulnerability.\n\n## 4.1.4.1 - 2022-07-13\n\n### Fixed\n- Fixed a bug where `craft\\services\\Assets::getRootFolderByVolumeId()` wasn\u2019t returning the root folder. ([#11593](https://github.com/craftcms/cms/issues/11593))\n\n## 4.1.4 - 2022-07-12\n\n### Added\n- Added `craft\\models\\FieldLayout::getVisibleCustomFieldElements()`.\n\n### Changed\n- Relation fields now focus on the next related element\u2019s \u201cRemove\u201d button when an element is removed. ([#11577](https://github.com/craftcms/cms/issues/11577))\n\n### Deprecated\n- Deprecated `craft\\base\\FieldTrait::$required`. `craft\\fieldlayoutelements\\BaseField::$required` should be used instead.\n\n### Fixed\n- Fixed a bug where assets\u2019 native Alternative Text fields were getting mislabeled as translatable. ([#11576](https://github.com/craftcms/cms/issues/11576))\n- Fixed a bug where fields nested within Neo fields could be incorrectly validated as required. ([#11574](https://github.com/craftcms/cms/issues/11574))\n- Fixed a PHP error that occurred when editing a Date field with a Min Date setting set.\n- Fixed a bug where date range inputs weren\u2019t working on mobile. ([#11571](https://github.com/craftcms/cms/issues/11571))\n- Fixed a bug where the \u201cCraft Support\u201d Dashboard widget wasn\u2019t being labeled properly in the widget settings HUD and delete confirmation dialog. ([#11573](https://github.com/craftcms/cms/discussions/11573))\n- Fixed a bug where the project config cache was getting invalidated on each public GraphQL API request.\n\n## 4.1.3 - 2022-07-07\n\n### Changed\n- Address fields now show required indicators based on the configured validation rules. ([#11566](https://github.com/craftcms/cms/pull/11566))\n\n### Fixed\n- Fixed a JavaScript error that occurred on the Updates utility. ([#11567](https://github.com/craftcms/cms/issues/11567))\n- Fixed a bug where Craft\u2019s Composer commands could produce a malformed `composer.json` file. ([#11564](https://github.com/craftcms/cms/issues/11564))\n\n## 4.1.2 - 2022-07-06\n\n### Added\n- Added `craft\\helpers\\ProjectConfig::ensureAllFilesystemsProcessed()`.\n\n### Changed\n- Relational field condition rules now have the \u201cis related to\u201d operator selected by default. ([#11550](https://github.com/craftcms/cms/discussions/11550))\n\n### Fixed\n- Fixed a bug where the Updates utility wasn\u2019t checking for updates properly. ([#11552](https://github.com/craftcms/cms/issues/11552))\n- Fixed an error that could occur when deploying a Craft 4 upgrade to another server. ([#11558](https://github.com/craftcms/cms/issues/11558))\n- Fixed a bug where Assets fields were relocating assets when saving a revision.\n- Fixed a bug where asset bundles weren\u2019t getting registered on the front end. ([#11555](https://github.com/craftcms/cms/issues/11555))\n\n## 4.1.1 - 2022-07-05\n\n### Changed\n- Improved the control panel tab design. ([#11524](https://github.com/craftcms/cms/pull/11524))\n- Changed the order of relational field condition rule operators, so \u201cis related to\u201d is listed first. ([#11550](https://github.com/craftcms/cms/discussions/11550))\n- Template caching is now supported for console requests, for `{% cache %}` tags that have the `globally` param. ([#11551](https://github.com/craftcms/cms/issues/11551))\n- Updated Composer to 2.2.15. ([#11538](https://github.com/craftcms/cms/issues/11538))\n\n### Fixed\n- Fixed an error that could occur if any custom fields were missing their field group. ([#11522](https://github.com/craftcms/cms/discussions/11522))\n- Fixed a bug where custom selects weren\u2019t scrolling to the visually-focused option.\n- Fixed errors that could occur if an element condition contained any rules for deleted custom fields. ([#11526](https://github.com/craftcms/cms/issues/11526))\n- Fixed a bug where the \u201cDeactivate users by default\u201d user setting wasn\u2019t working. ([#11519](https://github.com/craftcms/cms/issues/11519))\n- Fixed a styling issue with the Edit Route modal. ([#11528](https://github.com/craftcms/cms/issues/11528))\n- Fixed a bug where assets uploaded from Assets fields weren\u2019t retaining their original filename. ([#11530](https://github.com/craftcms/cms/issues/11530))\n- Fixed a bug where project config changes made at the end of the request lifecycle weren\u2019t getting saved.\n- Fixed a bug where toggling entries\u2019 and categories\u2019 site-specific statuses from element editor slideouts wasn\u2019t working. ([#11547](https://github.com/craftcms/cms/issues/11547))\n- Fixed a SQL error that occurred when running the `utils/prune-provisional-drafts` command. ([#11548](https://github.com/craftcms/cms/issues/11548))\n- Fixed focus styling issues with the Edit Route modal.\n\n## 4.1.0.2 - 2022-06-28\n\n### Fixed\n- Fixed a PHP error. ([#11518](https://github.com/craftcms/cms/issues/11518))\n\n## 4.1.0.1 - 2022-06-28\n\n### Fixed\n- Fixed an infinite recursion bug. ([#11514](https://github.com/craftcms/cms/issues/11514))\n\n## 4.1.0 - 2022-06-28\n\n### Added\n- Field layouts can now have \u201cLine Break\u201d UI elements. ([#11328](https://github.com/craftcms/cms/discussions/11328))\n- Added the `db/drop-all-tables` command. ([#11288](https://github.com/craftcms/cms/pull/11288))\n- Added the `elements/delete` command.\n- Added the `elements/restore` command.\n- Added the `project-config/get` command. ([#11341](https://github.com/craftcms/cms/pull/11341))\n- Added the `project-config/remove` command. ([#11341](https://github.com/craftcms/cms/pull/11341))\n- Added the `project-config/set` command. ([#11341](https://github.com/craftcms/cms/pull/11341))\n- The `AdminTable` Vue component can now be included into other Vue apps, in addition to being used as a standalone app. ([#11107](https://github.com/craftcms/cms/pull/11107))\n- Added a `one()` alias for `first()` to collections. ([#11134](https://github.com/craftcms/cms/discussions/11134))\n- Added `craft\\base\\Element::EVENT_DEFINE_CACHE_TAGS`. ([#11171](https://github.com/craftcms/cms/discussions/11171))\n- Added `craft\\base\\Element::cacheTags()`.\n- Added `craft\\base\\FieldInterface::getLabelId()`.\n- Added `craft\\console\\controllers\\UsersController::$activate`.\n- Added `craft\\elements\\conditions\\ElementCondition::$sourceKey`.\n- Added `craft\\elements\\db\\ElementQuery::EVENT_AFTER_POPULATE_ELEMENTS`. ([#11262](https://github.com/craftcms/cms/discussions/11262))\n- Added `craft\\elements\\db\\ElementQuery::EVENT_DEFINE_CACHE_TAGS`. ([#11171](https://github.com/craftcms/cms/discussions/11171))\n- Added `craft\\events\\PopulateElementsEvent`.\n- Added `craft\\fieldlayoutelements\\BaseField::labelId()`.\n- Added `craft\\fieldlayoutelements\\LineBreak`.\n- Added `craft\\helpers\\DateTimeHelper::now()`.\n- Added `craft\\helpers\\DateTimeHelper::pause()`. ([#11130](https://github.com/craftcms/cms/pull/11130))\n- Added `craft\\helpers\\DateTimeHelper::resume()`. ([#11130](https://github.com/craftcms/cms/pull/11130))\n\n### Changed\n- Improved overall control panel accessibility. ([#11297](https://github.com/craftcms/cms/pull/11297), [#11296](https://github.com/craftcms/cms/pull/11296), [#11414](https://github.com/craftcms/cms/pull/11414), [#11452](https://github.com/craftcms/cms/pull/11452))\n- Improved pagination UI accessibility. ([#11126](https://github.com/craftcms/cms/pull/11126))\n- Improved element index accessibility. ([#11169](https://github.com/craftcms/cms/pull/11169), [#11200](https://github.com/craftcms/cms/pull/11200), [#11251](https://github.com/craftcms/cms/pull/11251))\n- Improved Dashboard accessibility. ([#11217](https://github.com/craftcms/cms/pull/11217), [#11297](https://github.com/craftcms/cms/pull/11297))\n- Improved address management accessibility. ([#11397](https://github.com/craftcms/cms/pull/11397))\n- Improved Matrix field accessibility. ([#11306](https://github.com/craftcms/cms/pull/11306))\n- Improved mobile support. ([#11323](https://github.com/craftcms/cms/pull/11323), [#11430](https://github.com/craftcms/cms/pull/11430))\n- Improved keyboard support for custom selects. ([#11414](https://github.com/craftcms/cms/pull/11414))\n- It\u2019s now possible to remove all selected elements from relational fields by pressing <kbd>Backspace</kbd> or <kbd>Delete</kbd> while one of them is focussed.\n- Improved the UI of condition builders. ([#11386](https://github.com/craftcms/cms/pull/11386))\n- Entry Type condition rules now allow multiple selections. ([#11124](https://github.com/craftcms/cms/pull/11124))\n- Element index filters now only show condition rules for the custom fields that are used by the field layouts in the selected source, if a native source is selected. ([#11187](https://github.com/craftcms/cms/discussions/11187))\n- Element index filters now only show condition rules for custom fields used by field layouts created for the target element type, if no native source is selected.\n- Condition builders can now include multiple rules with the same label, as long as they\u2019re in different groups.\n- Asset indexes now have a \u201cLocation\u201d table attribute option. ([#11450](https://github.com/craftcms/cms/discussions/11450))\n- It\u2019s now possible to sort entries by their section and type. ([#9192](https://github.com/craftcms/cms/discussions/9192), [#11335](https://github.com/craftcms/cms/discussions/11335))\n- It\u2019s now possible to sort assets by their file kind.\n- Element editor metadata now lists elements\u2019 IDs.\n- Live Preview now always shows a \u201cRefresh\u201d button, regardless of whether the preview target has auto-refresh enabled. ([#11160](https://github.com/craftcms/cms/discussions/11160))\n- Sites\u2019 Language settings now display the locale IDs as option hints, rather than the languages\u2019 native names. ([#11195](https://github.com/craftcms/cms/discussions/11195))\n- Selectize options can now specify searchable `keywords` that won\u2019t be visible in the UI.\n- Selectize inputs will now include their options\u2019 values as search keywords.\n- Newly-created entries now get placeholder Post Date set on them, so they get sorted appropriately when querying for entries ordered by `postDate`. ([#11272](https://github.com/craftcms/cms/issues/11272))\n- Element queries can now pass columns into the `orderBy` param in addition to `score` when searching. ([#11470](https://github.com/craftcms/cms/pull/11470), [#11457](https://github.com/craftcms/cms/discussions/11457))\n- Field layout elements within field layout designers now support double-clicking to open their settings slideout. ([#11277](https://github.com/craftcms/cms/discussions/11277))\n- The control panel\u2019s JavaScript queue is now paused when the browser tab isn\u2019t visible. ([#10632](https://github.com/craftcms/cms/issues/10632))\n- The `db/restore` command now asks whether the database should be backed up, and whether all existing database tables should be dropped, prior to restoring the backup. ([#11288](https://github.com/craftcms/cms/pull/11288))\n- The `users/create` command now asks whether the user should be activated when saved.\n- The `maxBackups` config setting now impacts `.sql.zip` files in addition to `.sql` files. ([#11241](https://github.com/craftcms/cms/issues/11241))\n- Deprecation messages are now consistently referred to as \u201cdeprecation warnings\u201d in the control panel.\n- Callback functions returned by elements\u2019 `sortOptions()`/`defineSortOptions()` methods are now passed a `craft\\db\\Connection` object as a second argument.\n- All element sources now have a \u201cSet Status\u201d action, even if the element type\u2019s `defineActions()` method didn\u2019t include one, if the element type\u2019s `hasStatuses()` method returns `true`. ([#11383](https://github.com/craftcms/cms/discussions/11383))\n- All element sources now have a \u201cView\u201d action, even if the element type\u2019s `defineActions()` method didn\u2019t include one, if the element type\u2019s `hasUris()` method returns `true`. ([#11383](https://github.com/craftcms/cms/discussions/11383))\n- All element sources now have \u201cEdit\u201d and \u201cDelete\u201d actions, even if the element type\u2019s `defineActions()` method didn\u2019t include them. ([#11383](https://github.com/craftcms/cms/discussions/11383))\n- The \u201cSet Status\u201d and \u201cEdit\u201d element actions are now only available for elements whose `canSave()` method returned `true`.\n- Assets fields now reject uploaded files which don\u2019t pass their \u201cSelectable Assets Condition\u201d setting. ([#11433](https://github.com/craftcms/cms/issues/11433))\n- It\u2019s now possible to save new assets without setting their `filename` or `kind` attributes, as long as `newLocation` or `newFilename` is set. ([#11439](https://github.com/craftcms/cms/issues/11439))\n- The `searchindex` table is now uses the InnoDB storage engine by default for MySQL installs. ([#11374](https://github.com/craftcms/cms/discussions/11374))\n- The `_layouts/elementindex` control panel template now sets the page title based on the element\u2019s `pluralDisplayName()` method by default. ([#11502](https://github.com/craftcms/cms/pull/11502))\n- `craft\\test\\ActiveFixture::$data` is now populated with the active record instances, making them accessible to tests via `$this->tester->grabFixture('my-fixture', 'data-key')`. ([#11445](https://github.com/craftcms/cms/pull/11445))\n- Address validation rules are now defined by `defineRules()`. ([#11471](https://github.com/craftcms/cms/pull/11471))\n- `Garnish.DELETE_KEY` now refers to the actual <kbd>Delete</kbd> key code, and the <kbd>Backspace</kbd> key code is now referenced by `Garnish.BACKSPACE_KEY`.\n\n### Deprecated\n- Deprecated `craft\\elements\\actions\\DeleteAssets`. `craft\\elements\\actions\\Delete` should be used instead.\n\n### Removed\n- Removed `craft\\elements\\conditions\\entries\\EntryTypeCondition::$sectionUid`.\n- Removed `craft\\elements\\conditions\\entries\\EntryTypeCondition::$entryTypeUid`.\n\n## 4.0.6 - 2022-06-28\n\n### Added\n- Added `craft\\fields\\BaseOptionsField::encodeValue()`.\n\n### Changed\n- Improved the `install` command\u2019s error output when invalid options were passed.\n- `canonical` is now a reserved field handle. ([#11503](https://github.com/craftcms/cms/issues/11503))\n- `craft\\fields\\BaseOptionsField::translatedOptions()` now has an `$encode` argument.\n\n### Fixed\n- Fixed a bug where self relations within relational fields were being forgotten. ([#11461](https://github.com/craftcms/cms/issues/11461))\n- Fixed a bug where the `install` command required `--site-name`, `--site-url`, and `--language` options to be passed when project config YAML was already present. ([#11513](https://github.com/craftcms/cms/issues/11513))\n- Fixed a bug where `Garnish.setFocusWithin()` wasn\u2019t working if the first focusable element was a checkbox. ([#11498](https://github.com/craftcms/cms/discussions/11498))\n- Fixed a bug where Matrix blocks could be saved in the wrong order.\n- Fixed a bug where Checkboxes, Dropdown, Multi-select, and Radio Buttons fields could lose their values if their option values were set to integers. ([#11461](https://github.com/craftcms/cms/issues/11461))\n\n## 4.0.5.2 - 2022-06-24\n\n### Fixed\n- Fixed a SQL error that could occur on MySQL 5. ([#11493](https://github.com/craftcms/cms/issues/11493))\n- Fixed a bug where Craft\u2019s Composer commands weren\u2019t ensuring that `config.allow-plugins.yiisoft/yii2-composer` was `true` in `composer.json`. ([#11399](https://github.com/craftcms/cms/issues/11399))\n\n## 4.0.5.1 - 2022-06-22\n\n### Fixed\n- Fixed a bug where not all changes to entries and categories created via the \u201cSave and add another\u201d action were propagating to other sites. ([#11476](https://github.com/craftcms/cms/issues/11476))\n- Fixed a bug where it wasn\u2019t possible to rename assets.\n- Fixed a bug where a provisional draft could be created for an entry if its form was interacted with before the page had fully initialized. ([#11466](https://github.com/craftcms/cms/issues/11466))\n- Fixed exact phrase searching on PostgreSQL. ([#11486](https://github.com/craftcms/cms/issues/11486))\n\n## 4.0.5 - 2022-06-21\n\n### Added\n- Added `craft\\helpers\\Number::isIntOrFloat()`.\n\n### Changed\n- Categories now support change tracking.\n- Improved performance when working with temp asset folders.\n- Temp asset folders are no longer created until they\u2019re actually needed. ([#11427](https://github.com/craftcms/cms/issues/11427))\n- Element index queries are no longer cached if they contain a search term.\n- Search inputs within field layout designers now prevent the containing form from being submitted when the <kbd>Return</kbd> key is pressed. ([#11415](https://github.com/craftcms/cms/discussions/11415))\n\n### Deprecated\n- Deprecated `craft\\services\\Categories::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Globals::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Sections::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Tags::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Users::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n- Deprecated `craft\\services\\Volumes::pruneDeletedField()`. ([#11054](https://github.com/craftcms/cms/discussions/11054))\n\n### Fixed\n- Fixed an error that could occur when saving an element to a disabled site. ([#10499](https://github.com/craftcms/cms/issues/10499))\n- Fixed a bug where newly-added condition rules\u2019 types were still selectable for preexisting condition rules, when they shouldn\u2019t have been.\n- Fixed a bug where field layout designers were checking the wrong setting when determining whether to include UI elements (`customizableTabs` instead of `customizableUi`).\n- Fixed a bug where the Asset Indexes utility was analyzing image transform directories and files. ([#11362](https://github.com/craftcms/cms/issues/11362), [#11384](https://github.com/craftcms/cms/pull/11384))\n- Fixed a bug where focus was getting trapped within element editor slideouts\u2019 sidebars even for wide viewports where there was enough room to display the sidebar side-by-side with other slideout content. ([#11358](https://github.com/craftcms/cms/pull/11358))\n- Fixed a bug where users\u2019 Formatting Locale preferences weren\u2019t always being respected.\n- Fixed a bug where address card menus would linger around after an address was deleted.\n- Fixed a bug where the `index-assets` command could produce unexpected output. ([#11194](https://github.com/craftcms/cms/issues/11194)).\n- Fixed a bug where video controls within asset preview modals were inaccessible via the keyboard. ([#11371](https://github.com/craftcms/cms/pull/11371))\n- Fixed a bug where `transform` GraphQL directives weren\u2019t working for Assets fields. ([#10299](https://github.com/craftcms/cms/discussions/10299))\n- Fixed a PHP error that could occur when running the `help` command. ([#11423](https://github.com/craftcms/cms/issues/11423))\n- Fixed a bug where `craft\\helpers\\App::env()` was converting some values to integers or floats unexpectedly. ([#11422](https://github.com/craftcms/cms/issues/11422))\n- Fixed a bug where changes to existing Matrix blocks weren\u2019t saving for element types that supported drafts but not change tracking. ([#11419](https://github.com/craftcms/cms/issues/11419))\n- Fixed a bug where double-clicking on a related asset\u2019s thumbnail could open the asset\u2019s preview modal. ([#11424](https://github.com/craftcms/cms/issues/11424))\n- Fixed a bug where the control panel wasn\u2019t displaying file upload failure messages.\n- Fixed a bug where `action` query params were taking precedence over `actionTrigger` URI matches, when handling action requests. ([#11435](https://github.com/craftcms/cms/issues/11435))\n- Fixed a bug where image fields within Edit User pages and the Settings \u2192 General page weren\u2019t resetting properly after an image was deleted. ([#11436](https://github.com/craftcms/cms/issues/11436))\n- Fixed a bug where User Group condition rules set to the \u201cis not one of\u201d operator weren\u2019t being applied to individual elements correctly. ([#11444](https://github.com/craftcms/cms/discussions/11444))\n- Fixed a JavaScript error that occurred on element indexes for users that didn\u2019t have permission to edit any sites.\n- Fixed a bug where users without permission to create new entries in a section could duplicate existing entries. ([#11447](https://github.com/craftcms/cms/pull/11447))\n- Fixed a bug where element selection condition rules weren\u2019t working if an element ID was provided. ([#11451](https://github.com/craftcms/cms/pull/11451))\n- Fixed a PHP error that occurred when executing a GraphQL query using a token that wasn\u2019t set to a schema. ([#11453](https://github.com/craftcms/cms/issues/11453))\n- Fixed a PHP error that could occur when unserializing a `craft\\validator\\DateTimeValidator`, `LanguageValidator`, `StringValidator`, or `TimeValidator` object. ([#11454](https://github.com/craftcms/cms/issues/11454))\n- Fixed a bug where element types\u2019 `actions()` methods were getting called for all `element-indexes/*` action requests.\n- Fixed a bug where the `install` command would run non-interactively even if not all needed options were passed, resulting in an error after the database tables had been added. ([#11305](https://github.com/craftcms/cms/issues/11305))\n- Fixed a viewport clipping bug on the control panel\u2019s Login page. ([#11372](https://github.com/craftcms/cms/pull/11372))\n- Fixed a bug where filtering an element query by a relational field using `:empty:`/`:notempty:` wasn\u2019t factoring in the field\u2019s \u201cWhich site should entries be related from?\u201d setting properly.\n- Fixed a bug where filtering an element query by a relational field using `:empty:`/`:notempty:` wasn\u2019t factoring in the source elements\u2019 site IDs, for fields set to manage relations on a per-site basis. ([#11418](https://github.com/craftcms/cms/issues/11418))\n- Fixed a bug where the Temporary Uploads asset source wasn\u2019t including subfolders.\n- Fixed a bug where file upload progress bars weren\u2019t always going away when an upload error occurred.\n- Fixed a bug where Pashto was not being treated as an RTL langauge. ([#11428](https://github.com/craftcms/cms/issues/11428))\n- Fixed a bug where the `upscaleImages` config setting wasn\u2019t being respected for transforms where only a single image dimension was specified. ([#11398](https://github.com/craftcms/cms/issues/11398))\n- Fixed an error that could occur when executing a GraphQL query, if a section didn\u2019t have any entry types. ([#11273](https://github.com/craftcms/cms/issues/11273))\n- Fixed an error that could occur when changing the primary site on installs with a large number of users. ([#11459](https://github.com/craftcms/cms/issues/11459))\n- Fixed a bug where Assets fields within Vizy fields weren\u2019t getting relocated from the user\u2019s temp uploads folder. ([#11462](https://github.com/craftcms/cms/issues/11462))\n\n### Security\n- Environment-aware control panel fields no longer suggest environment variables that begin with `HTTP_`.\n- The Sendmail mailer no longer validates if the Sendmail Command setting is set to an enivornment variable that begins with `HTTP_`.\n\n## 4.0.4 - 2022-06-03\n\n### Added\n- Added support for querying for users with a `credentialed` status.\n- Added `craft\\elements\\db\\UserQuery::STATUS_CREDENTIALED`.\n- Added `craft\\errors\\FieldNotFoundException`.\n- Added `craft\\helpers\\Html::encodeSpaces()`.\n- Added `craft\\web\\twig\\variables\\Cp::getRequestedSite()`. ([#11082](https://github.com/craftcms/cms/discussions/11082))\n\n### Changed\n- `temp` is now a reserved volume handle.\n- Improved the performance of field layout designers. ([#11298](https://github.com/craftcms/cms/issues/11298))\n- All control panel pages now have a `site--<siteHandle>` class name on the `<body>`, based on the currently-selected site. ([#11303](https://github.com/craftcms/cms/discussions/11303))\n- Warnings are no longer logged when instantiating a field layout that references a deleted custom field. ([#11333](https://github.com/craftcms/cms/issues/11333))\n- Read/write splitting is now disabled for all console requests.\n- The `db/restore` command now prompts to clear data caches after the import is complete. ([#11327](https://github.com/craftcms/cms/issues/11327))\n- Entry queries no longer factor in seconds when looking for currently-live entries, without excluding entries that were published in the past minute. ([#5389](https://github.com/craftcms/cms/issues/5389))\n- `craft\\elements\\Asset::getUrl()` now encodes any spaces in the URL as `%20` entities.\n\n### Fixed\n- Fixed a bug where it wasn\u2019t possible to disable all table columns for an element source. ([#11291](https://github.com/craftcms/cms/issues/11291))\n- Fixed a bug where the Assets index page wasn\u2019t allowing any bulk actions for assets in the temporary volume. ([#11293](https://github.com/craftcms/cms/issues/11293))\n- Fixed a bug where PHP errors thrown while rendering a template weren\u2019t being handled properly. ([#11108](https://github.com/craftcms/cms/issues/11108))\n- Fixed a bug where site status labels were inconsistent on element edit pages. ([#11307](https://github.com/craftcms/cms/issues/11307))\n- Fixed a bug where addresses\u2019 County fields were mislablled. ([#11314](https://github.com/craftcms/cms/pull/11314))\n- Fixed a bug where the control panel\u2019s login form wasn\u2019t handling errors properly. ([#11319](https://github.com/craftcms/cms/pull/11319))\n- Fixed a bug where it wasn\u2019t possible to use a `{% redirect %}` tag in an error template. ([#11336](https://github.com/craftcms/cms/issues/11336))\n- Fixed an error that occurred when saving an entry via a GraphQL mutation. ([#11312](https://github.com/craftcms/cms/issues/11312))\n- Fixed a bug where all web requests were getting no-cache headers. ([#11346](https://github.com/craftcms/cms/issues/11346))\n- Fixed a bug where user caches weren\u2019t getting invalidated when users were changed to a pending or inactive state.\n- Fixed a bug where querying for users with an `active` status was returning suspended users. ([#11370](https://github.com/craftcms/cms/pull/11370))\n- Fixed a bug where it wasn\u2019t possible to drag assets within Assets fields by their thumbnails. ([#11364](https://github.com/craftcms/cms/issues/11364))\n- Fixed a bug where asset thumbnails weren\u2019t loading if their filename contained a space. ([#11350](https://github.com/craftcms/cms/issues/11350))\n- Fixed a bug where `craft\\services\\AssetIndexer::indexFile()` wasn\u2019t removing the filename from the file path when setting the directory on the listing. ([#11365](https://github.com/craftcms/cms/issues/11365))\n- Fixed a bug where links within custom field instructions were getting mangled. ([#11377](https://github.com/craftcms/cms/issues/11377))\n- Fixed a bug where project config paths that contained slashes weren\u2019t getting handled properly. ([#10774](https://github.com/craftcms/cms/issues/10774))\n- Fixed a bug where the Login page had a tab-focusable \u201cSkip to content\u201d button. ([#11375](https://github.com/craftcms/cms/issues/11375))\n\n## 4.0.3 - 2022-05-20\n\n### Added\n- Added `craft\\elements\\db\\ElementQuery::prepareSubquery()`.\n\n### Changed\n- Element edit pages now disable pointer events on the content container for 300 milliseconds after the \u201cShowing your unsaved changes\u201d notice is displayed. ([#11229](https://github.com/craftcms/cms/issues/11229))\n- Users can now create drafts for entries they have permission to view, but not save. ([#11249](https://github.com/craftcms/cms/issues/11249))\n- User Group condition rules are no longer available in element conditions when no user groups exist. ([#11252](https://github.com/craftcms/cms/issues/11252))\n- Matrix blocks now have `data-type-name` attributes. ([#11286](https://github.com/craftcms/cms/pull/11286))\n- Reversed the order of Lightswitch fields\u2019 \u201cON Label\u201d and \u201cOFF Label\u201d settings. ([#11259](https://github.com/craftcms/cms/issues/11259))\n- `craft\\services\\Elements::duplicateElement()` now has a `$trackDuplication` argument.\n- `craft\\services\\Matrix::duplicateBlocks()` now has a `$trackDuplications` argument.\n\n### Fixed\n- Fixed a bug where dynamically-defined image transforms weren\u2019t respecting the `format` param, unless the `generateTransformsBeforePageLoad` config setting was enabled.\n- Fixed a bug where Table fields with Min Rows and Max Rows set to `1` were still showing a delete button. ([#11211](https://github.com/craftcms/cms/issues/11211))\n- Fixed an error that could occur when saving an Assets field that was restricted to a single location, at the root of a volume. ([#11212](https://github.com/craftcms/cms/issues/11212))\n- Fixed an error that could occur after a queue job execution had finished. ([#11213](https://github.com/craftcms/cms/issues/11213))\n- Fixed an error that could occur when saving an entry with Matrix blocks. ([#11155](https://github.com/craftcms/cms/issues/11155))\n- Fixed an error that occurred when saving a GraphQL schema without a scope. ([#11240](https://github.com/craftcms/cms/issues/11240))\n- Fixed an error that could occur when editing the public GraphQL schema, if a public token existed in the project config, but not the database. ([#11218](https://github.com/craftcms/cms/issues/11218))\n- Fixed some bugs with inconsistent asset indexing on Windows. ([#11174](https://github.com/craftcms/cms/issues/11174)), ([#11219](https://github.com/craftcms/cms/issues/11219))\n- Fixed a bug where custom fields weren\u2019t available to be included as table attributes. ([#11222](https://github.com/craftcms/cms/issues/11222))\n- Fixed a bug where Alternative Text wasn\u2019t available to be included as a table attribute. ([#11222](https://github.com/craftcms/cms/issues/11222))`immediately`\n- Fixed a JavaScript error that broke Matrix fields with Min Blocks and Max Blocks both set to `1`. ([#11233](https://github.com/craftcms/cms/issues/11233))\n- Fixed a bug where request context logs could appear when nothing else was logged. ([#11141](https://github.com/craftcms/cms/issues/11141))\n- Fixed a bug where stack traces could be erroneously filtered from logs.\n- Fixed a bug where removing an element from a relational field within an element editor could cause the editor to create a provisional draft, even if the element type didn\u2019t support drafts. ([#11242](https://github.com/craftcms/cms/issues/11242))\n- Fixed a bug where draft editor pages had two identical \u201cSave and continue editing\u201d alternate form actions.\n- Fixed a JavaScript warning that occurred when viewing an element edit page, if the user didn\u2019t have permission to edit it.\n- Fixed a bug where asset selector modals weren\u2019t fully initializing for Assets fields, if they were targeting the user\u2019s temp folder. ([#11254](https://github.com/craftcms/cms/issues/11254))\n- Fixed an error that occurred when saving an entry via a GraphQL mutation. ([#11258](https://github.com/craftcms/cms/issues/11258))\n- Fixed a bug where Matrix block types\u2019 layout elements were getting new UUIDs assigned each time the Matrix field was edited. ([#11248](https://github.com/craftcms/cms/issues/11248))\n- Fixed a bug where the web-based installation wizard was throwing an exception if a database connection couldn\u2019t be established, and there was no `config/db.php` file. ([#11245](https://github.com/craftcms/cms/issues/11245))\n- Fixed a bug where editable tables\u2019 delete buttons\u2019 `aria-label` attributes weren\u2019t getting updated when table rows were reordered or deleted.\n- Fixed a bug where editable tables\u2019 delete buttons weren\u2019t visually disabled when the minimum number of rows had been reached.\n- Fixed a bug where all eager-loaded `srcset`-style transform sizes were relative to the first eager-loaded transform, rather than the prior one. ([#11209](https://github.com/craftcms/cms/issues/11209))\n- Fixed a bug where eager-loaded `srcset`-style transform sizes didn\u2019t reference the prior eager-loaded transform\u2019s `format`, `interlace`, `mode`, `position`, or `quality` settings. ([#11264](https://github.com/craftcms/cms/issues/11264))\n- Fixed a bug where the web-based installation wizard wouldn\u2019t show the database connection screen if a connection could be established but no database was selected. ([#11245](https://github.com/craftcms/cms/issues/11245))\n- Fixed an error that could occur when applying a multi-site draft with relational fields. ([#11220](https://github.com/craftcms/cms/issues/11220))\n- Fixed a bug where Matrix blocks could be deleted from newly-created multi-site entries, if the edit page was reloaded. ([#10906](https://github.com/craftcms/cms/issues/10906))\n\n## 4.0.2 - 2022-05-11\n\n### Added\n- Added `craft\\events\\LocateUploadedFilesEvent`.\n- Added `craft\\fields\\Assets::EVENT_LOCATE_UPLOADED_FILES`. ([#11123](https://github.com/craftcms/cms/discussions/11123))\n\n### Changed\n- `elements/*` actions no longer include custom field values in the response data, improving performance.\n- Garnish menu buttons are now aware of the `disabled` attribute. ([#11128](https://github.com/craftcms/cms/issues/11128))\n- Improved save performance for multi-site elements ([#11113](https://github.com/craftcms/cms/issues/11113))\n- Built-in Composer actions now ensure that `composer.json` allows the `craftcms/plugin-installer` Composer plugin.\n\n### Fixed\n- Fixed an error that occurred when searching for elements by a custom field. ([#11120](https://github.com/craftcms/cms/pull/11120))\n- Fixed a bug where asset upload failures weren\u2019t being handled properly. ([#11156](https://github.com/craftcms/cms/issues/11156))\n- Fixed a bug where warning and error logs were being sent to both `stdout` and `stderr` when `CRAFT_STREAM_LOG` was enabled. ([#11189](https://github.com/craftcms/cms/issues/11189))\n- Fixed an error that occurred when exporting elements with relational fields using the \u201cExpanded\u201d export type. ([#11127](https://github.com/craftcms/cms/issues/11127))\n- Fixed a PHP deprecation warning that occurred if the `tablePrefix` database connection setting was `null`.\n- Fixed a bug where category groups were being identified as \u201c{name}\u201d in user permission lists. ([#11132](https://github.com/craftcms/cms/issues/11132))\n- Fixed a bug where Assets fields\u2019 \u201cUpload files\u201d buttons weren\u2019t wrapping when there wasn\u2019t enough space to show them alongside \u201cAdd an asset\u201d. ([#11133](https://github.com/craftcms/cms/issues/11133))\n- Fixed a bug where `Craft.getUrl()` was appending empty query strings to URLs when they weren\u2019t needed. ([#11159](https://github.com/craftcms/cms/issues/11159))\n- Fixed a bug where addresses could validate the wrong set of required fields, if the validation rules were invoked before the country code was set. ([#11162](https://github.com/craftcms/cms/issues/11162))\n- Fixed an error that could occur when viewing the Temporary Uploads volume, if the Temp Uploads Location asset setting was set to \u201cIn the local temp folder\u201d. ([#11192](https://github.com/craftcms/cms/issues/11192))\n- Fixed an error that could occur when deleting a volume, if its filesystem had been deleted.\n- Fixed an error that could occur when rendering the thumbnail preview for an asset, if its file was missing. ([#11196](https://github.com/craftcms/cms/issues/11196))\n- Fixed a bug where soft-deleted drafts\u2019 search keywords weren\u2019t getting re-indexed if they were restored.\n- Fixed an error that occurred when transforming an SVG image without specifying a width or height. ([#11122](https://github.com/craftcms/cms/issues/11122))\n- Fixed an error that occurred when saving a Number field with a non-numeric value. ([#11164](https://github.com/craftcms/cms/issues/11164))\n- Fixed a bug where it wasn\u2019t possible to drag an item to the top in admin tables. ([#10781](https://github.com/craftcms/cms/issues/10781))\n- Fixed a bug where entries within Structure sections weren\u2019t expandable if their only descendants were unpublished drafts.\n- Fixed a bug where expanding a collapsed Structure section entry wouldn\u2019t reveal its descendants, if the parent was a draft. ([#11186](https://github.com/craftcms/cms/issues/11186))\n- Fixed a bug where element caches weren\u2019t getting cleared for elements when they were propagated to a newly-created site.\n\n## 4.0.1 - 2022-05-06\n\n### Fixed\n- Fixed a bug where Money field labels\u2019 `for` attributes weren\u2019t referencing the correct input ID. ([#11016](https://github.com/craftcms/cms/pull/11016))\n- Fixed a bug where Money field inputs weren\u2019t getting `aria-describedby` attributes. ([#11016](https://github.com/craftcms/cms/pull/11016))\n- Fixed an error that occurred when loading an edit screen for an element type that didn\u2019t have a field layout. ([#11110](https://github.com/craftcms/cms/pull/11110))\n- Fixed a bug where condition rules that weren\u2019t selectable (per `isSelectable()`) were still visible in the rule dropdown menu. ([#11104](https://github.com/craftcms/cms/pull/11104))\n- Fixed a bug where element edit pages could reload themselves immediately after saving the element. ([#11084](https://github.com/craftcms/cms/issues/11084))\n- Fixed a bug where tabs weren\u2019t interactive after changing an entry\u2019s type, if the new entry type didn\u2019t have a tab of the same name as the previously-selected tab. ([#11093](https://github.com/craftcms/cms/issues/11093))\n- Fixed a bug where Twig syntax errors weren\u2019t being handled properly. ([#11108](https://github.com/craftcms/cms/issues/11108))\n- Fixed an error that occurred when attempting to delete a global set. ([#11100](https://github.com/craftcms/cms/issues/11100))\n- Fixed an error that could occur when applying a draft. ([#11083](https://github.com/craftcms/cms/issues/11083))\n- Fixed a bug where element queries weren\u2019t returning any results if an element attribute table wasn\u2019t joined in, and the element query was set to an abstract element class. ([#11105](https://github.com/craftcms/cms/issues/11105))\n\n## 4.0.0.1 - 2022-05-04\n\n### Changed\n- The `setup` command now writes the application ID to a `CRAFT_APP_ID` environment variable.\n- The `setup` command now writes the security key to a `CRAFT_SECURITY_KEY` environment variable.\n\n## 4.0.0 - 2022-05-04\n\n### Added\n- Entries\u2019, categories\u2019, and assets\u2019 edit pages, and all element types via slideouts, now use a unified editing experience. ([#10467](https://github.com/craftcms/cms/pull/10467))\n- Categories now support drafts. ([#10467](https://github.com/craftcms/cms/pull/10467))\n- Element slideouts now support provisional drafts and autosaving, for element types that support them. ([#10467](https://github.com/craftcms/cms/pull/10467))\n- Element indexes can now be filtered by element attributes and custom field values. ([#9192](https://github.com/craftcms/cms/discussions/9192), [#9450](https://github.com/craftcms/cms/discussions/9450), [#9462](https://github.com/craftcms/cms/discussions/9462), [#9483](https://github.com/craftcms/cms/discussions/9483))\n- Admins can now create custom element sources from the Customize Sources modal. ([#8423](https://github.com/craftcms/cms/discussions/8423))\n- It\u2019s now possible to disable native element sources from the Customize Sources modal. ([#10676](https://github.com/craftcms/cms/discussions/10676))\n- Field layout tabs, fields, and UI elements can now be conditionally shown based on properties of the current user and/or element being edited. ([#8099](https://github.com/craftcms/cms/discussions/8099), [#8154](https://github.com/craftcms/cms/discussions/8154))\n- Assets, Entries, and Users fields have new condition settings that can be used to further limit which elements should be relatable, beyond the existing field settings. ([#10393](https://github.com/craftcms/cms/pull/10393))\n- Assets, Entries, and Users fields have new \u201cMin Relations\u201d settings, and their former \u201cLimit\u201d settings have been renamed to \u201cMax Relations\u201d. ([#8621](https://github.com/craftcms/cms/discussions/8621))\n- Added a dedicated \u201cFull Name\u201d field to users. \u201cFirst Name\u201d and \u201cLast Name\u201d are now parsed out from the full name automatically when a user is saved. ([#10405](https://github.com/craftcms/cms/discussions/10405))\n- Added the \u201cInactive\u201d user status, which can be used by users which can\u2019t be signed into. ([#8963](https://github.com/craftcms/cms/discussions/8963))\n- Added \u201cCredentialed\u201d and \u201cInactive\u201d user sources.\n- Added the \u201cDeactivate\u2026\u201d user action for pending and active users.\n- Users can now have an \u201cAddresses\u201d field. ([#10507](https://github.com/craftcms/cms/pull/10507))\n- Added the concept of \u201cfilesystems\u201d, which handle file operations, either locally or on a remote service like Amazon S3.\n- It\u2019s now possible to set sites\u2019 Status settings to environment variables. ([#3005](https://github.com/craftcms/cms/issues/3005))\n- Added the Money field type.\n- Craft now provides a native \u201cAlternative Text\u201d (`alt`) field for assets. ([#10302](https://github.com/craftcms/cms/discussions/10302))\n- Asset thumbnails in the control panel now have `alt` attributes, for assets with a filled-in Alternative Text value.\n- Added the `index-assets/cleanup` command.\n- Added the \u201cDeactivate users by default\u201d user registration setting, which replaces \u201cSuspend users by default\u201d. ([#5830](https://github.com/craftcms/cms/issues/5830))\n- Element source settings are now stored in the project config. ([#8616](https://github.com/craftcms/cms/discussions/8616))\n- Improved element index accessibility. ([#10629](https://github.com/craftcms/cms/pull/10629), [#10660](https://github.com/craftcms/cms/pull/10660))\n- Improved Live Preview accessibility for screen readers. ([#10688](https://github.com/craftcms/cms/pull/10688))\n- Slideouts, Live Preview, and Matrix blocks are no longer animated for browsers that have requested reduced motion. ([#10665](https://github.com/craftcms/cms/pull/10665))\n- Added support for `JSON` columns. ([#9089](https://github.com/craftcms/cms/pull/9089))\n- It\u2019s now possible to edit images\u2019 focal points from their preview modals. ([#8489](https://github.com/craftcms/cms/discussions/8489))\n- Added support for Monolog and the PSR-3 logging interface. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- Added the `|address` Twig filter.\n- Added the `|money` Twig filter.\n- Added the `collect()` Twig function.\n- Added the `assetUploaders`, `authors`, and `fullName` user query params.\n- Added the `primaryOwner` and `primaryOwnerId` Matrix block query params.\n- Added the `hasAlt` asset query param.\n- Added the `button`, `submitButton`, `fs`, `fsField`, `volume`, and `volumeField` macros to the `_includes/forms` control panel template.\n- Added the `buildId` general config. ([#10705](https://github.com/craftcms/cms/pull/10705))\n- Added support for setting custom config settings from `config/custom.php`, which are accessible via `Craft::$app->config->custom`. ([#10012](https://github.com/craftcms/cms/issues/10012))\n- Added the `addresses`, `address`, and `addressCount` GraphQL queries.\n- Added the `hasAlt` argument to asset GraphQL queries.\n- Added the `alt` field to assets queried via GraphQL.\n- Added the `fullName`, `assetUploaders`, and `authors` arguments to user GraphQL queries.\n- Added the `addresses` field to user GraphQL queries.\n- GraphQL schemas now include settings that determine which sites elements can be queried from. ([#10610](https://github.com/craftcms/cms/issues/10610))\n- Added the `assets/icon` action.\n- Added the `assets/update-focal-point` action.\n- Added the `categories/create` action.\n- Added the `elements/apply-draft` action.\n- Added the `elements/create` action.\n- Added the `elements/delete-draft` action.\n- Added the `elements/delete-for-site` action.\n- Added the `elements/delete` action.\n- Added the `elements/duplicate` action.\n- Added the `elements/edit` action.\n- Added the `elements/redirect` action.\n- Added the `elements/revert` action.\n- Added the `elements/save-draft` action.\n- Added the `elements/save` action.\n- Added the `users/delete-address` action.\n- Added the `users/save-address` action.\n- Added the `app/render-element` control panel controller action.\n- Added the `element-indexes/element-table-html` control panel controller action.\n- Added `craft\\base\\ApplicationTrait::getConditions()`.\n- Added `craft\\base\\ApplicationTrait::getElementSources()`, which replaces `getElementIndexes()`.\n- Added `craft\\base\\ApplicationTrait::getFs()`.\n- Added `craft\\base\\ApplicationTrait::getImageTransforms()`, which replaces `getAssetTransforms()`.\n- Added `craft\\base\\conditions\\BaseCondition`.\n- Added `craft\\base\\conditions\\BaseConditionRule`.\n- Added `craft\\base\\conditions\\BaseDateRangeConditionRule`.\n- Added `craft\\base\\conditions\\BaseElementSelectConditionRule`.\n- Added `craft\\base\\conditions\\BaseLightswitchConditionRule`.\n- Added `craft\\base\\conditions\\BaseMultiSelectConditionRule`.\n- Added `craft\\base\\conditions\\BaseNumberConditionRule`.\n- Added `craft\\base\\conditions\\BaseSelectConditionRule`.\n- Added `craft\\base\\conditions\\BaseTextConditionRule`.\n- Added `craft\\base\\conditions\\ConditionInterface`.\n- Added `craft\\base\\conditions\\ConditionRuleInterface`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_CREATE_DRAFTS`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_DELETE_FOR_SITE`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_DELETE`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_DUPLICATE`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_SAVE`.\n- Added `craft\\base\\Element::EVENT_AUTHORIZE_VIEW`.\n- Added `craft\\base\\Element::EVENT_DEFINE_ADDITIONAL_BUTTONS`. ([#10420](https://github.com/craftcms/cms/discussions/10420))\n- Added `craft\\base\\Element::getParentId()`.\n- Added `craft\\base\\Element::hasNewParent()`.\n- Added `craft\\base\\Element::notesFieldHtml()`.\n- Added `craft\\base\\Element::setParentId()`.\n- Added `craft\\base\\Element::statusFieldHtml()`.\n- Added `craft\\base\\ElementInterface::canCreateDrafts()`.\n- Added `craft\\base\\ElementInterface::canDelete()`.\n- Added `craft\\base\\ElementInterface::canDeleteForSite()`.\n- Added `craft\\base\\ElementInterface::canDuplicate()`.\n- Added `craft\\base\\ElementInterface::canSave()`.\n- Added `craft\\base\\ElementInterface::canView()`.\n- Added `craft\\base\\ElementInterface::createAnother()`.\n- Added `craft\\base\\ElementInterface::createCondition()`.\n- Added `craft\\base\\ElementInterface::getAdditionalButtons()`.\n- Added `craft\\base\\ElementInterface::getPostEditUrl()`.\n- Added `craft\\base\\ElementInterface::getThumbAlt()`.\n- Added `craft\\base\\ElementInterface::hasRevisions()`.\n- Added `craft\\base\\ElementInterface::prepareEditScreen()`.\n- Added `craft\\base\\FieldInterface::getElementConditionRuleType()`.\n- Added `craft\\base\\FieldInterface::isRequirable()`.\n- Added `craft\\base\\FieldLayoutComponent`.\n- Added `craft\\base\\Fs`.\n- Added `craft\\base\\FsInterface`.\n- Added `craft\\base\\FsTrait`.\n- Added `craft\\base\\Image::heartbeat()`.\n- Added `craft\\base\\Image::setHeartbeatCallback()`.\n- Added `craft\\base\\imagetransforms\\EagerImageTransformerInterface`.\n- Added `craft\\base\\imagetransforms\\ImageEditorTransformerInterface`.\n- Added `craft\\base\\imagetransforms\\ImageTransformerInterface`.\n- Added `craft\\base\\LocalFsInterface`.\n- Added `craft\\base\\Model::defineBehaviors()`. ([#10691](https://github.com/craftcms/cms/pull/10691))\n- Added `craft\\base\\ModelInterface`.\n- Added `craft\\base\\NameTrait`.\n- Added `craft\\base\\PluginInterface::config()`. ([#11039](https://github.com/craftcms/cms/pull/11039))\n- Added `craft\\behaviors\\SessionBehavior::broadcastToJs()`.\n- Added `craft\\behaviors\\SessionBehavior::getError()`.\n- Added `craft\\behaviors\\SessionBehavior::getNotice()`.\n- Added `craft\\controllers\\AddressesController`.\n- Added `craft\\controllers\\AssetIndexesController`.\n- Added `craft\\controllers\\ConditionsController`.\n- Added `craft\\controllers\\ElementIndexesController::$condition`.\n- Added `craft\\controllers\\FsController`.\n- Added `craft\\controllers\\ImageTransformsController`.\n- Added `craft\\db\\Migration::archiveTableIfExists()`. ([#10827](https://github.com/craftcms/cms/discussions/10827))\n- Added `craft\\db\\Migration::dropAllForeignKeysToTable()`.\n- Added `craft\\db\\Migration::dropForeignKeyIfExists()`.\n- Added `craft\\db\\Migration::renameTable()`.\n- Added `craft\\db\\Query::collect()`, which returns the query results as an `Illuminate\\Support\\Collection` object rather than an array. ([#8513](https://github.com/craftcms/cms/discussions/8513))\n- Added `craft\\db\\Table::ADDRESSES`.\n- Added `craft\\db\\Table::ASSETINDEXINGSESSIONS`.\n- Added `craft\\db\\Table::IMAGETRANSFORMINDEX`.\n- Added `craft\\db\\Table::IMAGETRANSFORMS`.\n- Added `craft\\db\\Table::MATRIXBLOCKS_OWNERS`.\n- Added `craft\\debug\\LogTarget`.\n- Added `craft\\debug\\MailPanel`.\n- Added `craft\\elements\\Address`.\n- Added `craft\\elements\\Asset::$alt`.\n- Added `craft\\elements\\Asset::EVENT_AFTER_GENERATE_TRANSFORM`.\n- Added `craft\\elements\\Asset::EVENT_BEFORE_GENERATE_TRANSFORM`.\n- Added `craft\\elements\\Asset::getFs()`.\n- Added `craft\\elements\\Asset::setFilename()`.\n- Added `craft\\elements\\conditions\\addresses\\AddressCondition`.\n- Added `craft\\elements\\conditions\\addresses\\CountryConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\AssetCondition`.\n- Added `craft\\elements\\conditions\\assets\\DateModifiedConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\FilenameConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\FileSizeConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\FileTypeConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\HasAltConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\HeightConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\UploaderConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\VolumeConditionRule`.\n- Added `craft\\elements\\conditions\\assets\\WidthConditionRule`.\n- Added `craft\\elements\\conditions\\categories\\CategoryCondition`.\n- Added `craft\\elements\\conditions\\categories\\GroupConditionRule`.\n- Added `craft\\elements\\conditions\\DateCreatedConditionRule`.\n- Added `craft\\elements\\conditions\\DateUpdatedConditionRule`.\n- Added `craft\\elements\\conditions\\ElementCondition`.\n- Added `craft\\elements\\conditions\\ElementConditionInterface`.\n- Added `craft\\elements\\conditions\\ElementConditionRuleInterface`.\n- Added `craft\\elements\\conditions\\entries\\AuthorConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\AuthorGroupConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\EntryCondition`.\n- Added `craft\\elements\\conditions\\entries\\ExpiryDateConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\PostDateConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\SectionConditionRule`.\n- Added `craft\\elements\\conditions\\entries\\TypeConditionRule`.\n- Added `craft\\elements\\conditions\\HasUrlConditionRule`.\n- Added `craft\\elements\\conditions\\IdConditionRule`.\n- Added `craft\\elements\\conditions\\LevelConditionRule`.\n- Added `craft\\elements\\conditions\\RelatedToConditionRule`.\n- Added `craft\\elements\\conditions\\SlugConditionRule`.\n- Added `craft\\elements\\conditions\\tags\\GroupConditionRule`.\n- Added `craft\\elements\\conditions\\tags\\TagCondition`.\n- Added `craft\\elements\\conditions\\TitleConditionRule`.\n- Added `craft\\elements\\conditions\\UriConditionRule`.\n- Added `craft\\elements\\conditions\\users\\AdminConditionRule`.\n- Added `craft\\elements\\conditions\\users\\CredentialedConditionRule`.\n- Added `craft\\elements\\conditions\\users\\EmailConditionRule`.\n- Added `craft\\elements\\conditions\\users\\FirstNameConditionRule`.\n- Added `craft\\elements\\conditions\\users\\GroupConditionRule`.\n- Added `craft\\elements\\conditions\\users\\LastLoginDateConditionRule`.\n- Added `craft\\elements\\conditions\\users\\LastNameConditionRule`.\n- Added `craft\\elements\\conditions\\users\\UserCondition`.\n- Added `craft\\elements\\conditions\\users\\UsernameConditionRule`.\n- Added `craft\\elements\\db\\AddressQuery`.\n- Added `craft\\elements\\MatrixBlock::$primaryOwnerId`.\n- Added `craft\\elements\\MatrixBlock::$saveOwnership`.\n- Added `craft\\elements\\User::$active`.\n- Added `craft\\elements\\User::$fullName`.\n- Added `craft\\elements\\User::canAssignUserGroups()`.\n- Added `craft\\elements\\User::getAddresses()`.\n- Added `craft\\elements\\User::getIsCredentialed()`.\n- Added `craft\\elements\\User::STATUS_INACTIVE`.\n- Added `craft\\errors\\FsException`.\n- Added `craft\\errors\\FsObjectExistsException`.\n- Added `craft\\errors\\FsObjectNotFoundException`.\n- Added `craft\\errors\\ImageTransformException`.\n- Added `craft\\errors\\InvalidFsException`.\n- Added `craft\\errors\\MissingVolumeFolderException`.\n- Added `craft\\events\\AuthorizationCheckEvent`.\n- Added `craft\\events\\CreateElementCheckEvent`.\n- Added `craft\\events\\DefineElementEditorHtmlEvent`.\n- Added `craft\\events\\DefineElementInnerHtmlEvent`. ([#11035](https://github.com/craftcms/cms/pull/11035))\n- Added `craft\\events\\DefineHtmlEvent::$static`.\n- Added `craft\\events\\FsEvent`.\n- Added `craft\\events\\GenerateTransformEvent::$asset`.\n- Added `craft\\events\\GenerateTransformEvent::$transform`.\n- Added `craft\\events\\GenerateTransformEvent::$url`.\n- Added `craft\\events\\ImageTransformerOperationEvent`.\n- Added `craft\\events\\ImageTransformEvent`.\n- Added `craft\\events\\RegisterConditionRuleTypesEvent`.\n- Added `craft\\events\\TransformImageEvent`.\n- Added `craft\\fieldlayoutelements\\addresses\\AddressField`.\n- Added `craft\\fieldlayoutelements\\addresses\\CountryCodeField`.\n- Added `craft\\fieldlayoutelements\\addresses\\LabelField`.\n- Added `craft\\fieldlayoutelements\\addresses\\LatLongField`.\n- Added `craft\\fieldlayoutelements\\addresses\\OrganizationField`.\n- Added `craft\\fieldlayoutelements\\addresses\\OrganizationTaxIdField`.\n- Added `craft\\fieldlayoutelements\\assets\\AltField`.\n- Added `craft\\fieldlayoutelements\\BaseField::selectorLabel()`.\n- Added `craft\\fieldlayoutelements\\FullNameField`.\n- Added `craft\\fieldlayoutelements\\TextareaField`.\n- Added `craft\\fieldlayoutelements\\users\\AddressesField`.\n- Added `craft\\fields\\Assets::$allowSubfolders`.\n- Added `craft\\fields\\Assets::$restrictedDefaulUploadSubpath`.\n- Added `craft\\fields\\BaseRelationField::createSelectionCondition()`.\n- Added `craft\\fields\\BaseRelationField::getSelectionCondition()`.\n- Added `craft\\fields\\BaseRelationField::setSelectionCondition()`.\n- Added `craft\\fields\\conditions\\DateFieldConditionRule`.\n- Added `craft\\fields\\conditions\\FieldConditionRuleInterface`.\n- Added `craft\\fields\\conditions\\FieldConditionRuleTrait`.\n- Added `craft\\fields\\conditions\\LightswitchFieldConditionRule`.\n- Added `craft\\fields\\conditions\\NumberFieldConditionRule`.\n- Added `craft\\fields\\conditions\\OptionsFieldConditionRule`.\n- Added `craft\\fields\\conditions\\RelationalFieldConditionRule`.\n- Added `craft\\fields\\conditions\\TextFieldConditionRule`.\n- Added `craft\\fields\\Money`.\n- Added `craft\\fs\\Local`.\n- Added `craft\\fs\\MissingFs`.\n- Added `craft\\fs\\Temp`.\n- Added `craft\\gql\\arguments\\elements\\Address`.\n- Added `craft\\gql\\base\\SingularTypeInterface`.\n- Added `craft\\gql\\interfaces\\elements\\Address`.\n- Added `craft\\gql\\queries\\Address`.\n- Added `craft\\gql\\resolvers\\elements\\Address`.\n- Added `craft\\gql\\TypeManager::registerFieldDefinitions()`.\n- Added `craft\\gql\\types\\elements\\Address`.\n- Added `craft\\gql\\types\\generators\\AddressType`.\n- Added `craft\\helpers\\App::cliOption()`.\n- Added `craft\\helpers\\App::devMode()`.\n- Added `craft\\helpers\\App::envConfig()`. ([#10869](https://github.com/craftcms/cms/pull/10869))\n- Added `craft\\helpers\\App::isStreamLog()`.\n- Added `craft\\helpers\\App::normalizeValue()`.\n- Added `craft\\helpers\\Assets::downloadFile()`.\n- Added `craft\\helpers\\Assets::iconPath()`.\n- Added `craft\\helpers\\Assets::iconUrl()`.\n- Added `craft\\helpers\\Assets::revParams()`.\n- Added `craft\\helpers\\Cp::addressCardHtml()`.\n- Added `craft\\helpers\\Cp::addressCardsHtml()`.\n- Added `craft\\helpers\\Cp::addressFieldsHtml()`.\n- Added `craft\\helpers\\Cp::dateFieldHtml()`.\n- Added `craft\\helpers\\Cp::dateHtml()`.\n- Added `craft\\helpers\\Cp::elementSelectHtml()`.\n- Added `craft\\helpers\\Cp::EVENT_DEFINE_ELEMENT_INNER_HTML`. ([#11035](https://github.com/craftcms/cms/pull/11035))\n- Added `craft\\helpers\\Cp::fieldLayoutDesignerHtml()`.\n- Added `craft\\helpers\\Cp::lightswitchHtml()`.\n- Added `craft\\helpers\\Cp::multiSelectFieldHtml()`.\n- Added `craft\\helpers\\Cp::multiSelectHtml()`.\n- Added `craft\\helpers\\Cp::requestedSite()`.\n- Added `craft\\helpers\\Cp::textareaHtml()`.\n- Added `craft\\helpers\\Cp::textHtml()`.\n- Added `craft\\helpers\\Cp::timeFieldHtml()`.\n- Added `craft\\helpers\\Cp::timeHtml()`.\n- Added `craft\\helpers\\Db::dropAllForeignKeysToTable()`.\n- Added `craft\\helpers\\Db::dropForeignKeyIfExists()`.\n- Added `craft\\helpers\\Db::dropIndexIfExists()`.\n- Added `craft\\helpers\\Db::findForeignKey()`.\n- Added `craft\\helpers\\Db::findIndex()`.\n- Added `craft\\helpers\\Db::parseMoneyParam()`.\n- Added `craft\\helpers\\Db::parseNumericParam()`.\n- Added `craft\\helpers\\Db::prepareMoneyForDb()`.\n- Added `craft\\helpers\\Db::renameTable()`.\n- Added `craft\\helpers\\FileHelper::deleteFileAfterRequest()`.\n- Added `craft\\helpers\\FileHelper::deleteQueuedFiles()`.\n- Added `craft\\helpers\\Gql::getSchemaContainedEntryTypes)()`.\n- Added `craft\\helpers\\Html::hiddenLabel()`.\n- Added `craft\\helpers\\Html::unwrapCondition()`.\n- Added `craft\\helpers\\Html::unwrapNoscript()`.\n- Added `craft\\helpers\\ImageTransforms`.\n- Added `craft\\helpers\\Money`.\n- Added `craft\\helpers\\Number::isInt()`.\n- Added `craft\\helpers\\Number::toIntOrFloat()`.\n- Added `craft\\helpers\\ProjectConfig::encodeValueAsString()`.\n- Added `craft\\helpers\\ProjectConfig::ensureAllSectionsProcessed()`.\n- Added `craft\\helpers\\ProjectConfig::traverseDataArray()`.\n- Added `craft\\helpers\\Typecast`. ([#10706](https://github.com/craftcms/cms/pull/10706))\n- Added `craft\\i18n\\Translation`.\n- Added `craft\\imagetransforms\\ImageTransformer`.\n- Added `craft\\log\\ContextProcessor`.\n- Added `craft\\log\\Dispatcher::getTargets()`.\n- Added `craft\\log\\MessageProcessor`.\n- Added `craft\\log\\MonologTarget`.\n- Added `craft\\models\\AssetIndexingSession`.\n- Added `craft\\models\\FieldLayout::getElementsByType()`.\n- Added `craft\\models\\FieldLayout::getFirstElementByType()`.\n- Added `craft\\models\\FieldLayout::getFirstVisibleElementByType()`.\n- Added `craft\\models\\FieldLayout::getVisibleCustomFields()`.\n- Added `craft\\models\\FieldLayout::getVisibleElementsByType()`.\n- Added `craft\\models\\FieldLayoutElement::$uid`.\n- Added `craft\\models\\FieldLayoutElement::getLayout()` and `setLayout()`.\n- Added `craft\\models\\FieldLayoutForm::getVisibleElements()`.\n- Added `craft\\models\\FieldLayoutFormTab::getTabId()`.\n- Added `craft\\models\\FieldLayoutFormTab::getUid()`.\n- Added `craft\\models\\FieldLayoutTab::getElements()` and `setElements()`.\n- Added `craft\\models\\FsListing`.\n- Added `craft\\models\\ImageTransform`.\n- Added `craft\\models\\ImageTransformIndex`.\n- Added `craft\\models\\ProjectConfigData`.\n- Added `craft\\models\\ReadOnlyProjectConfigData`.\n- Added `craft\\models\\Volume`.\n- Added `craft\\queue\\jobs\\Proxy`.\n- Added `craft\\queue\\Queue::$proxyQueue`, which can be set to another queue configuration that all jobs should be sent to as proxies. ([#10999](https://github.com/craftcms/cms/pull/10999))\n- Added `craft\\records\\Address`.\n- Added `craft\\records\\AssetIndexingSession`.\n- Added `craft\\records\\ImageTransform`.\n- Added `craft\\services\\Addresses`.\n- Added `craft\\services\\AssetIndexer::createIndexingSession()`.\n- Added `craft\\services\\AssetIndexer::getExistingIndexingSessions()`.\n- Added `craft\\services\\AssetIndexer::getIndexingSessionById()`.\n- Added `craft\\services\\AssetIndexer::getMissingEntriesForSession()`.\n- Added `craft\\services\\AssetIndexer::getSkippedItemsForSession()`.\n- Added `craft\\services\\AssetIndexer::indexFileByListing()`.\n- Added `craft\\services\\AssetIndexer::indexFolderByEntry()`.\n- Added `craft\\services\\AssetIndexer::indexFolderByListing()`.\n- Added `craft\\services\\AssetIndexer::processIndexSession()`.\n- Added `craft\\services\\AssetIndexer::removeCliIndexingSessions()`.\n- Added `craft\\services\\AssetIndexer::startIndexingSession()`.\n- Added `craft\\services\\AssetIndexer::stopIndexingSession()`.\n- Added `craft\\services\\Assets::getImagePreviewUrl()`.\n- Added `craft\\services\\AssetTransforms::deleteTransformIndexDataByAssetIds()`.\n- Added `craft\\services\\Conditions`.\n- Added `craft\\services\\Config::CATEGORY_CUSTOM`.\n- Added `craft\\services\\Config::getCustom()`.\n- Added `craft\\services\\Drafts::removeDraftData()`.\n- Added `craft\\services\\ElementSources`, which replaces `craft\\services\\ElementIndexes`.\n- Added `craft\\services\\Fields::createLayout()`.\n- Added `craft\\services\\Fs`.\n- Added `craft\\services\\Gc::hardDeleteElements()`.\n- Added `craft\\services\\Gc::removeEmptyTempFolders()`.\n- Added `craft\\services\\Gql::prepareFieldDefinitions()`.\n- Added `craft\\services\\ImageTransforms`.\n- Added `craft\\services\\Matrix::createRevisionBlocks()`.\n- Added `craft\\services\\Matrix::duplicateOwnership()`.\n- Added `craft\\services\\ProjectConfig::ASSOC_KEY`.\n- Added `craft\\services\\ProjectConfig::PATH_DATE_MODIFIED`.\n- Added `craft\\services\\ProjectConfig::PATH_ELEMENT_SOURCES`.\n- Added `craft\\services\\ProjectConfig::PATH_FS`.\n- Added `craft\\services\\ProjectConfig::PATH_META_NAMES`.\n- Added `craft\\services\\ProjectConfig::PATH_SCHEMA_VERSION`.\n- Added `craft\\services\\ProjectConfig::PATH_SYSTEM`.\n- Added `craft\\services\\ProjectConfig::rememberAppliedChanges()`.\n- Added `craft\\services\\Users::deactivateUser()`.\n- Added `craft\\services\\Users::ensureUserByEmail()`, which will return a user for the given email, creating one if it didn\u2019t exist yet.\n- Added `craft\\services\\Users::EVENT_AFTER_DEACTIVATE_USER`.\n- Added `craft\\services\\Users::EVENT_BEFORE_DEACTIVATE_USER`.\n- Added `craft\\services\\Users::removeCredentials()`.\n- Added `craft\\services\\Volumes::getTemporaryVolume()`.\n- Added `craft\\services\\Volumes::getUserPhotoVolume()`.\n- Added `craft\\validators\\MoneyValidator`.\n- Added `craft\\web\\assets\\conditionbuilder\\ConditionBuilderAsset`.\n- Added `craft\\web\\assets\\htmx\\HtmxAsset`.\n- Added `craft\\web\\assets\\money\\MoneyAsset`.\n- Added `craft\\web\\Controller::asCpScreen()`.\n- Added `craft\\web\\Controller::asFailure()`.\n- Added `craft\\web\\Controller::asModelFailure()`.\n- Added `craft\\web\\Controller::asModelSuccess()`.\n- Added `craft\\web\\Controller::asSuccess()`.\n- Added `craft\\web\\Controller::CpScreenResponseBehavior()`.\n- Added `craft\\web\\Controller::CpScreenResponseFormatter()`.\n- Added `craft\\web\\Controller::getPostedRedirectUrl()`.\n- Added `craft\\web\\Controller::TemplateResponseBehavior()`.\n- Added `craft\\web\\Controller::TemplateResponseFormatter()`.\n- Added `craft\\web\\twig\\Extension::addressFilter()`.\n- Added `craft\\web\\twig\\Extension::moneyFilter()`.\n- Added `craft\\web\\twig\\variables\\Cp::fieldLayoutDesigner()`.\n- Added `craft\\web\\twig\\variables\\Cp::getFsOptions()`.\n- Added `craft\\web\\twig\\variables\\Cp::getVolumeOptions()`.\n- Added `craft\\web\\View::clearCssFileBuffer()`.\n- Added `craft\\web\\View::clearJsFileBuffer()`.\n- Added `craft\\web\\View::startCssFileBuffer()`.\n- Added `craft\\web\\View::startJsFileBuffer()`.\n- Added the `Craft.appendBodyHtml()` JavaScript method, which replaces the now-deprecated `appendFootHtml()` method.\n- Added the `Craft.CpScreenSlideout` JavaScript class, which can be used to create slideouts from actions that return `$this->asCpScreen()`.\n- Added the `Craft.ElementEditor` JavaScript class.\n- Added the `Craft.ElementEditorSlideout` JavaScript class.\n- Added the `Craft.getPageUrl()` JavaScript method.\n- Added the `Craft.getQueryParam()` JavaScript method.\n- Added the `Craft.getQueryParams()` JavaScript method.\n- Added the `Craft.namespaceId()` JavaScript method.\n- Added the `Craft.namespaceInputName()` JavaScript method.\n- Added the `Craft.Preview.refresh()` JavaScript method.\n- Added the `Craft.Queue` JavaScript class.\n- Added the `Craft.setElementAttributes()` JavaScript method.\n- Added the `Craft.setPath()` JavaScript method.\n- Added the `Craft.setQueryParam()` JavaScript method.\n- Added the `Craft.setUrl()` JavaScript method.\n- Added the `Craft.ui.createButton()` JavaScript method.\n- Added the `Craft.ui.createSubmitButton()` JavaScript method.\n- Added the `htmx.org` JavaScript library.\n- Added the commerceguys/addressing package.\n- Added the illuminate/collections package. ([#8475](https://github.com/craftcms/cms/discussions/8475))\n- Added the moneyphp/money package.\n- Added the symfony/var-dumper package.\n- Added the theiconic/name-parser package.\n- Added the yiisoft/yii2-symfonymailer package.\n\n### Changed\n- Craft now requires PHP 8.0.2 or later.\n- Craft now requires MySQL 5.7.8 / MariaDB 10.2.7 / PostgreSQL 10.0 or later.\n- Craft now requires the [Intl](https://php.net/manual/en/book.intl.php) and [BCMath](https://www.php.net/manual/en/book.bc.php) PHP extensions.\n- Improved draft creation/application performance. ([#10577](https://github.com/craftcms/cms/pull/10577))\n- Improved revision creation performance. ([#10589](https://github.com/craftcms/cms/pull/10577))\n- The \u201cWhat\u2019s New\u201d HUD now displays an icon and label above each announcement, identifying where it came from (Craft CMS or a plugin). ([#9747](https://github.com/craftcms/cms/discussions/9747))\n- The control panel now keeps track of the currently-edited site on a per-tab basis by adding a `site` query string param to all control panel URLs. ([#8920](https://github.com/craftcms/cms/discussions/8920))\n- Element index pages\u2019 status and sort menu option selections are now coded into the page URL via `status` and `sort` query string params. ([#10669](https://github.com/craftcms/cms/discussions/10669))\n- Users are no longer required to have a username or email.\n- Users can now set their Formatting Locale to any known locale; not just the available Language options. ([#10519](https://github.com/craftcms/cms/pull/10519))\n- Users\u2019 Language and Formatting Locale settings now display locale names in the current language and their native languages. ([#10519](https://github.com/craftcms/cms/pull/10519))\n- User queries now return all users by default, rather than only active users.\n- Filtering users by `active`, `pending`, and `locked` statuses no longer excludes suspended users.\n- `credentialed` and `inactive` are now reserved user group handles.\n- Elements throughout the control panel are now automatically updated whenever they\u2019re saved by another browser tab.\n- Assets fields that are restricted to a single location can now be configured to allow selection within subfolders of that location. ([#9070](https://github.com/craftcms/cms/discussions/9070))\n- When an image is saved as a new asset from the Image Editor via an Assets field, the Assets field will now automatically replace the selected asset with the new one. ([#8974](https://github.com/craftcms/cms/discussions/8974))\n- `alt` is now a reserved field handle for volume field layouts.\n- Volumes no longer have \u201ctypes\u201d, and their file operations are now delegated to a filesystem selected by an \u201cAsset Filesystem\u201d setting on the volume.\n- Volumes now have \u201cTransform Filesystem\u201d and \u201cTransform Subpath\u201d settings, which can be used to choose where image transforms should be stored. (The volume\u2019s Asset Filesystem will be used by default.)\n- Asset thumbnails are now generated as image transforms.\n- It\u2019s now possible to create volumes directly from the User Settings page.\n- Images that are not web-safe now are always converted to JPEGs when transforming, if no format was specified.\n- Entry post dates are no longer set automatically until the entry is validated with the `live` scenario. ([#10093](https://github.com/craftcms/cms/pull/10093))\n- Entry queries\u2019 `authorGroup()` param method now accepts an array of `craft\\models\\UserGroup` objects.\n- Element queries\u2019 `revision` params can now be set to `null` to include normal and revision elements.\n- Element queries can no longer be traversed or accessed like an array. Use a query execution method such as `all()`, `collect()`, or `one()` to fetch the results before working with them.\n- Element queries\u2019 `title` params no longer treat values with commas as arrays. ([#10891](https://github.com/craftcms/cms/issues/10891))\n- User queries\u2019 `firstName` and `lastName` params no longer treat values with commas as arrays. ([#10891](https://github.com/craftcms/cms/issues/10891))\n- Relational fields now load elements in the current site rather than the primary site, if the source element isn\u2019t localizable. ([#7048](https://github.com/craftcms/cms/issues/7048))\n- Lightswitch fields can no longer be marked as required within field layouts. ([#10773](https://github.com/craftcms/cms/issues/10773))\n- Built-in queue jobs are now always translated for the current user\u2019s language. ([#9745](https://github.com/craftcms/cms/pull/9745))\n- Path options passed to console commands (e.g. `--basePath`) now take precedence over their enivronment variable/PHP constant counterparts.\n- Database backups are now named after the Craft version in the database, rather than the Composer-installed version. ([#9733](https://github.com/craftcms/cms/discussions/9733))\n- Template autosuggestions now include their filename. ([#9744](https://github.com/craftcms/cms/pull/9744))\n- Improved the look of loading spinners in the control panel. ([#9109](https://github.com/craftcms/cms/discussions/9109))\n- The default `subLeft` and `subRight` search query term options are now only applied to terms that don\u2019t include an asterisk at the beginning/end, e.g. `hello*`. ([#10613](https://github.com/craftcms/cms/discussions/10613))\n- `{% cache %}` tags now store any external JavaScript or CSS files registered with `{% js %}` and `{% css %}` tags. ([#9987](https://github.com/craftcms/cms/discussions/9987))\n- All control panel templates end in `.twig` now. ([#9743](https://github.com/craftcms/cms/pull/9743))\n- 404 requests are no longer logged by default. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- Log entries are now single-line by default when Dev Mode is disabled. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- Log files are now rotated once every 24 hours. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- `CRAFT_STREAM_LOG` no longer logs _in addition to_ other log targets. ([#10659](https://github.com/craftcms/cms/pull/10659))\n- The default log target no longer logs `debug` or `info` messages when Dev Mode is enabled. ([#10916](https://github.com/craftcms/cms/pull/10916))\n- SQL query logs now use the `debug` log level, so they no longer get logged when Dev Mode is enabled. ([#10916](https://github.com/craftcms/cms/pull/10916))\n- `yii\\db\\Connection::$enableLogging` and `$enableProfiling` are no longer enabled by default when Dev Mode is disabled. ([#10916](https://github.com/craftcms/cms/pull/10916))\n- The `queue` log target no longer has special handling for Yii or `info` logs. ([#10916](https://github.com/craftcms/cms/pull/10916))\n- A warning is now logged if an element query is executed before Craft is fully initialized. ([#11033](https://github.com/craftcms/cms/issues/11033))\n- A warning is now logged if Twig is instantiated before Craft is fully initialized. ([#11033](https://github.com/craftcms/cms/issues/11033))\n- Craft\u2019s bootstrap script now attempts to create its configured system paths automatically. ([#10562](https://github.com/craftcms/cms/pull/10562))\n- When using GraphQL to mutate entries, the `enabled` status is now affected on a per-site basis when specifying both the `enabled` and `siteId` parameters. ([#9771](https://github.com/craftcms/cms/issues/9771))\n- The `forms/selectize` control panel template now supports `addOptionFn` and `addOptionLabel` params, which can be set to add new options to the list.\n- Editable tables now support `allowAdd`, `allowDelete`, and `allowReorder` settings, replacing `staticRows`. ([#10163](https://github.com/craftcms/cms/pull/10163))\n- Column definitions passed to the `_includes/forms/editableTable` control panel template can now specify a `width` key. ([#11062](https://github.com/craftcms/cms/pull/11062))\n- The `limitField` macro in the `_components/fieldtypes/elementfieldsettings` control panel template has been renamed to `limitFields`.\n- Renamed the `elements/get-categories-input-html` action to `categories/input-html`.\n- Renamed the `elements/get-modal-body` action to `element-selector-modals/body`.\n- The `entries/save-entry` action now returns a 400 HTTP status for JSON responses when the entry couldn\u2019t be saved.\n- The `users/save-user` action no longer includes a `unverifiedEmail` key in failure responses.\n- The `users/set-password` action now returns a 400 HTTP status when an invalid token is passed, if there\u2019s no URL to redirect to. ([#10592](https://github.com/craftcms/cms/discussions/10592))\n- `install/*`, `setup/*`, `db/*`, and `help` actions no longer output a warning if Craft can\u2019t connect to the database. ([#10851](https://github.com/craftcms/cms/pull/10851))\n- `createFoldersInVolume:<uid>` user permissions have been renamed to `createFolders:<uid>`.\n- `deleteFilesAndFoldersInVolume:<uid>` user permissions have been renamed to `deleteAssets:<uid>`.\n- `deletePeerFilesInVolume:<uid>` user permissions have been renamed to `deletePeerAssets:<uid>`.\n- `editCategories:<uid>` user permissions have been split into `viewCategories:<uid>`, `saveCategories:<uid>`, `deleteCategories:<uid>`, `viewPeerCategoryDrafts:<uid>`, `savePeerCategoryDrafts:<uid>`, and `deletePeerCategoryDrafts:<uid>`.\n- `editEntries:<uid>` user permissions have been renamed to `viewEntries:<uid>`.\n- `editImagesInVolume:<uid>` user permissions have been renamed to `editImages:<uid>`.\n- `editPeerEntries:<uid>` user permissions have been renamed to `viewPeerEntries:<uid>`.\n- `editPeerEntryDrafts:<uid>` user permissions have been split into `viewPeerEntryDrafts:<uid>` and `savePeerEntryDrafts:<uid>`.\n- `editPeerFilesInVolume:<uid>` user permissions have been renamed to `savePeerAssets:<uid>`.\n- `editPeerImagesInVolume:<uid>` user permissions have been renamed to `editPeerImages:<uid>`.\n- `publishEntries:<uid>` user permissions have been renamed to `saveEntries:<uid>`, and no longer differentiate between enabled and disabled entries. (Users with `viewEntries:<uid>` permissions will still be able to create drafts.)\n- `publishPeerEntries:<uid>` user permissions have been renamed to `savePeerEntries:<uid>`, and no longer differentiate between enabled and disabled entries. (Users with `viewPeerEntries:<uid>` permissions will still be able to create drafts.)\n- `replaceFilesInVolume:<uid>` user permissions have been renamed to `replaceFiles:<uid>`.\n- `replacePeerFilesInVolume:<uid>` user permissions have been renamed to `replacePeerFiles:<uid>`.\n- `saveAssetInVolume:<uid>` user permissions have been renamed to `saveAssets:<uid>`.\n- `viewPeerFilesInVolume:<uid>` user permissions have been renamed to `viewPeerAssets:<uid>`.\n- `viewVolume:<uid>` user permissions have been renamed to `viewAssets:<uid>`.\n- Elements\u2019 `searchScore` GraphQL fields are now returned as integers.\n- Element types must now override `craft\\base\\Element::isDeletable()` if its elements should be deletable from the index page.\n- Element types\u2019 `cpEditUrl()` methods no longer need to add a `site` param; one will be added automatically by `craft\\base\\Element::getCpEditUrl()`.\n- Element types\u2019 `defineActions()` methods\u2019 `$source` arguments should no longer accept `null`.\n- Element types\u2019 `defineSources()` methods\u2019 `$context` arguments should no longer accept `null`.\n- Element types\u2019 `getHtmlAttributes()` and `htmlAttributes()` methods must now return attribute arrays that are compatible with `craft\\helpers\\Html::renderTagAttributes()`.\n- Element types\u2019 `sources()` methods\u2019 `$context` arguments should no longer accept `null`.\n- Element types\u2019 `tableAttributes()` and `defineTableAttributes()` methods should no longer return a generic attribute for defining the header column heading at the beginning of the returned array. The header column heading is now set to the element type\u2019s display name, per its `displayName()` method.\n- Block element types\u2019 `getOwner()` methods can now return `null`.\n- Control panel resource locations are now cached, so resource requests can be resolved when Craft isn\u2019t installed yet, or a database connection can\u2019t be established. ([#10642](https://github.com/craftcms/cms/pull/10642))\n- Control panel resources are now served with cache headers, if the `buildId` config setting is set. ([#10705](https://github.com/craftcms/cms/pull/10705))\n- Empty subfolders within the temporary upload volume are now removed during garbage collection. ([#10746](https://github.com/craftcms/cms/issues/10746))\n- Most config settings can now be overridden via environment variables. ([#10573](https://github.com/craftcms/cms/pull/10573), [#10869](https://github.com/craftcms/cms/pull/10869))\n- It\u2019s now possible to configure the Debug Toolbar to store its data files on a filesystem, rather than within `storage/runtime/debug/`. ([#10825](https://github.com/craftcms/cms/pull/10825))\n- `craft\\base\\AssetPreviewHandlerInterface::getPreviewHtml()` now accepts an optional array of variable to pass on to the template.\n- `craft\\base\\Element::__get()` now clones custom field values before returning them. ([#8781](https://github.com/craftcms/cms/discussions/8781))\n- `craft\\base\\Element::fieldLayoutFields()` now has a `visibleOnly` argument.\n- `craft\\base\\Element::getFieldValue()` now returns eager-loaded element values for the field, when they exist. ([#10047](https://github.com/craftcms/cms/issues/10047))\n- `craft\\base\\Element::metaFieldsHtml()` now has a `static` argument.\n- `craft\\base\\Element::setFieldValue()` now unsets any previously-eager-loaded elements for the field. ([#11003](https://github.com/craftcms/cms/discussions/11003))\n- `craft\\base\\Element::slugFieldHtml()` now has a `static` argument.\n- `craft\\base\\ElementInterface::getEagerLoadedElements()` now returns an `Illuminate\\Support\\Collection` object instead of an array. ([#8513](https://github.com/craftcms/cms/discussions/8513))\n- `craft\\base\\ElementInterface::getSidebarHtml()` now has a `static` argument.\n- `craft\\base\\MemoizableArray` no longer extends `ArrayObject`, and now implements `IteratorAggregate` and `Countable` directly.\n- `craft\\base\\Model::__construct()` and `setAttributes()` now automatically typecast values that map to properties with `int`, `float`, `int|float`, `string`, `bool`, `array`, or `DateTime` type declarations. ([#10706](https://github.com/craftcms/cms/pull/10706))\n- `craft\\base\\Model::datetimeAttributes()` is now called from the constructor, instead of the `init()` method.\n- `craft\\base\\Model::setAttributes()` now normalizes date attributes into `DateTime` objects.\n- `craft\\behaviors\\FieldLayoutBehavior::getFields()` has been renamed to `getCustomFields()`.\n- `craft\\elements\\Asset::getImg()` now sets the `alt` attribute to the native Alternative Text field value, if set.\n- `craft\\elements\\Asset::getVolume()` now returns an instance of `craft\\models\\Volume`.\n- `craft\\elements\\db\\ElementQuery::ids()` no longer accepts an array of criteria params.\n- `craft\\events\\DraftEvent::$source` has been renamed to `$canonical`.\n- `craft\\events\\GetAssetThumbUrlEvent` has been renamed to `DefineAssetThumbUrlEvent`.\n- `craft\\events\\GetAssetUrlEvent` has been renamed to `DefineAssetUrlEvent`.\n- `craft\\events\\RevisionEvent::$source` has been renamed to `$canonical`.\n- `craft\\fieldlayoutelements\\AssetTitleField` has been renamed to `craft\\fieldlayoutelements\\assets\\AssetTitleField`.\n- `craft\\fieldlayoutelements\\EntryTitleField` has been renamed to `craft\\fieldlayoutelements\\entries\\EntryTitleField`.\n- `craft\\fieldlayoutelements\\StandardField` has been renamed to `craft\\fieldlayoutelements\\BaseNativeField`.\n- `craft\\fieldlayoutelements\\StandardTextField` has been renamed to `craft\\fieldlayoutelements\\TextField`.\n- `craft\\fields\\Assets::$singleUploadLocationSource` has been renamed to `$restrictedLocationSource`.\n- `craft\\fields\\Assets::$singleUploadLocationSubpath` has been renamed to `$restrictedLocationSubpath`.\n- `craft\\fields\\Assets::$useSingleFolder` has been renamed to `$restrictLocation`.\n- `craft\\fields\\BaseRelationField::$limit` has been renamed to `$maxRelations`.\n- `craft\\fields\\BaseRelationField::elementType()` is now public.\n- `craft\\fields\\BaseRelationField::inputSelectionCriteria()` has been renamed to `getInputSelectionCriteria()`, and is now public.\n- `craft\\fields\\BaseRelationField::inputSources()` has been renamed to `getInputSources()`, and is now public.\n- `craft\\gql\\directives\\FormatDateTime::defaultTimezone()` has been renamed to `defaultTimeZone()`.\n- `craft\\gql\\TypeManager::EVENT_DEFINE_GQL_TYPE_FIELDS` is now triggered when actually resolving fields for a GraphQL type, rather than when the type is first created. ([#9626](https://github.com/craftcms/cms/issues/9626))\n- `craft\\helpers\\App::env()` now checks for a PHP constant as well, if the environment variable didn\u2019t exist.\n- `craft\\helpers\\App::env()` now returns `null` if a value couldn\u2019t be found, rather than `false`.\n- `craft\\helpers\\App::env()` now returns a boolean if the original value was `'true'` or `'false'`.\n- `craft\\helpers\\App::env()` now returns an integer or float if the original value was numeric.\n- `craft\\helpers\\ArrayHelper::getValue()` now supports keys in square bracket syntax, e.g. `foo[bar][baz]`.\n- `craft\\helpers\\Assets::generateUrl()` no longer accepts a transform index for date modified comparisons. A `DateTime` object is expected instead.\n- `craft\\helpers\\Assets::urlAppendix()` no longer accepts a transform index for date modified comparisons. A `DateTime` object is expected instead.\n- `craft\\helpers\\Component::createComponent()` now automatically typecasts values that map to properties with `int`, `float`, `int|float`, `string`, `bool`, `array`, or `DateTime` type declarations. ([#10706](https://github.com/craftcms/cms/pull/10706))\n- `craft\\helpers\\Cp::elementHtml()` now has an `$autoReload` argument.\n- `craft\\helpers\\Db::batchInsert()`, `craft\\helpers\\Db::insert()`, `craft\\db\\Command::batchInsert()`, `craft\\db\\Command::insert()`, `craft\\db\\Migration::batchInsert()`, and `craft\\db\\Migration::insert()` no longer have `$includeAuditColumns` arguments, and now check if the table has `dateCreated`, `dateUpdated`, and/or `uid` columns before setting their values.\n- `craft\\helpers\\Db::parseParam()` now validates that numeric values are passed if the `$columnType` is set to a numeric column type. ([#9142](https://github.com/craftcms/cms/issues/9142))\n- `craft\\helpers\\Db::prepareDateForDb()` no longer has a `$stripSeconds` argument.\n- `craft\\helpers\\Db::prepareValueForDb()` now has a `$columnType` argument.\n- `craft\\helpers\\Db::truncateTable()` now returns `void` rather than `int`.\n- `craft\\helpers\\Db::update()`, `craft\\helpers\\Db::upsert()`, `craft\\db\\Command::update()`, `craft\\db\\Command::upsert()`, `craft\\db\\Migration::update()`\u2019 and `craft\\db\\Migration::upsert()`\u2019 `$includeAuditColumns` arguments have been renamed to `$updateTimestamp`, and only affect the `dateCreated` column now. All upserts now check if the table has `dateCreated`, `dateUpdated`, and/or `uid` columns before setting their values.\n- `craft\\helpers\\Db::upsert()`, `craft\\db\\Command::upsert()`, and `craft\\db\\Migration()` no longer merge the `$updateColumns` array into `$insertColumns`. The full array of `INSERT` column values should be passed to `$insertColumns` now.\n- `craft\\helpers\\Gql::getUnionType()` no longer requires a resolver function to be passed, if the union contains only element GraphQL types.\n- `craft\\helpers\\Html::beginForm()` not sets `accept-charset=\"UTF-8\"` by default.\n- `craft\\helpers\\Html` now supports defining `hx-*` and `data-hx-*` attributes via a `hx` and `data-hx` keys, similar to `aria` and `data`.\n- `craft\\helpers\\i18n\\Formatter::asPercent()` now chooses a default `$decimals` value based on the value given, if `null`.\n- `craft\\helpers\\i18n\\Formatter::asPercent()` now treats all empty values as `0`.\n- `craft\\helpers\\MailerHelper::normalizeEmails()` now returns an empty array instead of `null`.\n- `craft\\helpers\\MigrationHelper::dropAllIndexesOnTable()` no longer returns an array of the dropped indexes.\n- `craft\\helpers\\Queue::push()` now has a `$queue` argument.\n- `craft\\models\\FieldLayout::EVENT_DEFINE_STANDARD_FIELDS` has been renamed to `EVENT_DEFINE_NATIVE_FIELDS`.\n- `craft\\models\\FieldLayout::getAvailableStandardFields()` has been renamed to `getAvailableNativeFields()`.\n- `craft\\models\\FieldLayout::getFields()` has been renamed to `getCustomFields()`.\n- `craft\\queue\\Queue::$channel` is now set automatically based on the queue\u2019s application component ID.\n- `craft\\services\\Announcements::push()` no longer accepts callables to be passed to the `$heading` and `$body` arguments. `craft\\i18n\\Translation::prep()` should be used to prepare the messages to be lazy-translated instead.\n- `craft\\services\\AssetIndexer::storeIndexList()` now expects the first argument to be a generator that returns `craft\\models\\FsListing` objects.\n- `craft\\services\\Assets::ensureFolderByFullPathAndVolume()` now returns a `craft\\models\\VolumeFolder` object rather than a folder ID.\n- `craft\\services\\Assets::ensureTopFolder()` now returns a `craft\\models\\VolumeFolder` object rather than a folder ID.\n- `craft\\services\\Assets::EVENT_GET_ASSET_THUMB_URL` has been renamed to `EVENT_DEFINE_THUMB_URL`.\n- `craft\\services\\Assets::EVENT_GET_ASSET_URL` has been moved to `craft\\elements\\Asset::EVENT_DEFINE_URL`.\n- `craft\\services\\AssetTransforms::CONFIG_TRANSFORM_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_IMAGE_TRANSFORMS`.\n- `craft\\services\\Categories::CONFIG_CATEGORYROUP_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_CATEGORY_GROUPS`.\n- `craft\\services\\Fields::CONFIG_FIELDGROUP_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_FIELD_GROUPS`.\n- `craft\\services\\Fields::CONFIG_FIELDS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_FIELDS`.\n- `craft\\services\\Globals::CONFIG_GLOBALSETS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_GLOBAL_SETS`.\n- `craft\\services\\Gql::CONFIG_GQL_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_GRAPHQL`.\n- `craft\\services\\Gql::CONFIG_GQL_PUBLIC_TOKEN_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_GRAPHQL_PUBLIC_TOKEN`.\n- `craft\\services\\Gql::CONFIG_GQL_SCHEMAS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_GRAPHQL_SCHEMAS`.\n- `craft\\services\\Matrix::CONFIG_BLOCKTYPE_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_MATRIX_BLOCK_TYPES`.\n- `craft\\services\\Matrix::duplicateBlocks()` now has a `$deleteOtherBlocks` argument.\n- `craft\\services\\Plugins::CONFIG_PLUGINS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_PLUGINS`.\n- `craft\\services\\Plugins::doesPluginRequireDatabaseUpdate()` has been renamed to `isPluginUpdatePending()`.\n- `craft\\services\\ProjectConfig::applyYamlChanges()` has been renamed to `applyExternalChanges()`.\n- `craft\\services\\ProjectConfig::getDoesYamlExist()` has been renamed to `getDoesExternalConfigExist()`.\n- `craft\\services\\ProjectConfig::getIsApplyingYamlChanges()` has been renamed to `getIsApplyingExternalChanges()`.\n- `craft\\services\\ProjectConfig::set()` now returns `true` or `false` depending on whether the project config was modified.\n- `craft\\services\\Revisions::createRevision()` now returns the ID of the revision, rather than the revision itself.\n- `craft\\services\\Routes::CONFIG_ROUTES_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_ROUTES`.\n- `craft\\services\\Sections::CONFIG_ENTRYTYPES_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_ENTRY_TYPES`.\n- `craft\\services\\Sections::CONFIG_SECTIONS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_PATH_SECTIONS`.\n- `craft\\services\\Sites::CONFIG_SITEGROUP_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_SITE_GROUPS`.\n- `craft\\services\\Sites::CONFIG_SITES_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_SITES`.\n- `craft\\services\\Tags::CONFIG_TAGGROUP_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_TAG_GROUPS`.\n- `craft\\services\\Updates::getIsCraftDbMigrationNeeded()` has been renamed to `getIsCraftUpdatePending()`.\n- `craft\\services\\Updates::getIsPluginDbUpdateNeeded()` has been renamed to `getIsPluginUpdatePending()`.\n- `craft\\services\\UserGroups::CONFIG_USERPGROUPS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_USER_GROUPS`.\n- `craft\\services\\UserPermissions::getAllPermissions()` and `getAssignablePermissions()` now return permission groups as arrays with `heading` and `permission` sub-keys, fixing a bug where two groups with the same heading would conflict with each other. ([#7771](https://github.com/craftcms/cms/issues/7771))\n- `craft\\services\\Users::CONFIG_USERLAYOUT_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_USER_FIELD_LAYOUTS`.\n- `craft\\services\\Users::CONFIG_USERS_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_USERS`.\n- `craft\\services\\Volumes::CONFIG_VOLUME_KEY` has been moved to `craft\\services\\ProjectConfig::PATH_VOLUMES`.\n- `craft\\test\\fixtures\\elements\\BaseElementFixture` now validates elements with the `live` scenario if they are enabled, canonical, and not a provisional draft.\n- `craft\\test\\TestSetup::getMockApp()` has been renamed to `getMockModule()`, and its `$appClass` argument has been renamed to `$moduleClass`.\n- `craft\\web\\Request::getBodyParam()` now accepts nested param names in the `foo[bar][baz]` format.\n- `craft\\web\\Request::getBodyParams()` and `getBodyParam()` now check for an `X-Craft-Namespace` header. If present, only params that begin with its value will be returned, excluding the namespace.\n- `craft\\web\\View::renderString()` now has an `$escapeHtml` argument.\n- `craft\\web\\View::setNamespace()`\u2019 `$namespace` argument no longer has a default value of `null`.\n- The `Craft.getUrl()` JavaScript method now removes duplicate query string params when passing in a param that\u2019s already included in the base URL.\n- The `Craft.getUrl()` JavaScript method now encodes any query string params passed to it.\n- `Craft.broadcastChannel` has been split up into two broadcast channels: `Craft.broadcaster` and `Craft.messageReceiver`.\n- `Craft.cp.$tabs` now returns a collection of the tabs\u2019 `<a>` elements, as they no longer have wrapping `<li>` elements.\n- Local volumes no longer use Flysystem.\n- A selected volume for user photo storage if no longer displayed if no volume has been set.\n- The user photo volume can now only be set to a volume that has a public transform filesystem configured.\n- Craft now uses Symfony Mailer to send email. ([#10062](https://github.com/craftcms/cms/discussions/10062))\n- Updated Twig to 3.3.\n- Updated vue-autosuggest to 2.2.0.\n\n### Deprecated\n- Deprecated the `autosaveDrafts` config setting.\n- Deprecated the `anyStatus` element query param. `status(null)` should be used instead.\n- Deprecated the `immediately` argument for transforms created over GraphQL. It no longer has any effect.\n- Deprecated `craft\\base\\ApplicationTrait::getInstalledSchemaVersion()`.\n- Deprecated `craft\\base\\Model::datetimeAttributes()`. ([#10706](https://github.com/craftcms/cms/pull/10706))\n- Deprecated `craft\\elements\\User::getFullName()`. `$fullName` should be used instead.\n- Deprecated `craft\\gql\\TypeManager::flush()`. `craft\\services\\Gql::flushCaches()` should be used instead.\n- Deprecated `craft\\gql\\TypeManager::prepareFieldDefinitions()`. `craft\\services\\Gql::prepareFieldDefinitions()` should be used instead.\n- Deprecated `craft\\helpers\\ArrayHelper::append()`. `array_unshift()` should be used instead.\n- Deprecated `craft\\helpers\\ArrayHelper::prepend()`. `array_push()` should be used instead.\n- Deprecated `craft\\helpers\\MigrationHelper`.\n- Deprecated `craft\\i18n\\I18N::getIsIntlLoaded()`.\n- Deprecated `craft\\services\\Assets::getAssetUrl()`. `craft\\elements\\Asset::getUrl()` should be used instead.\n- Deprecated `craft\\services\\Assets::getIconPath()`. `craft\\helpers\\Assets::iconPath()` should be used instead.\n- Deprecated `craft\\web\\Controller::asErrorJson()`. `asFailure()` should be used instead.\n- Deprecated the `assets/save-asset` action. `elements/save` should be used instead.\n- Deprecated the `categories/save-category` action. `elements/save` should be used instead.\n- Deprecated the `Craft.appendFootHtml()` JavaScript method. `appendBodyHtml()` should be used instead.\n\n### Removed\n- Removed the \u201cHeader Column Heading\u201d element source setting.\n- Removed support for setting custom config settings from `config/general.php`. `config/custom.php` should be used instead. ([#10012](https://github.com/craftcms/cms/issues/10012))\n- Removed the `customAsciiCharMappings` config setting.\n- Removed the `siteName` config setting. Environment-specific site names can be defined via environment variables.\n- Removed the `siteUrl` config setting. Environment-specific site URLs can be defined via environment variables.\n- Removed the `suppressTemplateErrors` config setting.\n- Removed the `useCompressedJs` config setting.\n- Removed the `useProjectConfigFile` config setting. Override `craft\\services\\ProjectConfig::$writeYamlAutomatically` to opt into [manual YAML file generation](https://craftcms.com/docs/4.x/project-config.html#manual-yaml-file-generation).\n- Removed support for `config/volumes.php`. Volumes can now specify per-environment filesystems.\n- Removed support for the `CRAFT_SITE_URL` PHP constant. Environment-specific site URLs can be defined via environment variables.\n- Removed the `enabledForSite` GraphQL argument. `status` should be used instead.\n- Removed the `{% includeHiResCss %}` Twig tag.\n- Removed support for deprecated `DateTime` faux Twig methods `atom()`, `cookie()`, `iso8601()`, `rfc822()`, `rfc850()`, `rfc1036()`, `rfc1123()`, `rfc2822()`, `rfc3339()`, `rss()`, `w3c()`, `w3cDate()`, `mySqlDateTime()`, `localeDate()`, `localeTime()`, `year()`, `month()`, `day()`, `nice()`, and `uiTimestamp()`.\n- Removed the `locale` element property. `siteId` should be used instead.\n- Removed the `ownerLocale` Matrix block query param. `site` or `siteId` should be used instead.\n- Removed support for `sourceLocale` in `relatedTo` element query params. `sourceSite` should be used instead.\n- Removed the `craft.categoryGroups` Twig variable.\n- Removed the `craft.config` Twig variable.\n- Removed the `craft.deprecator` Twig variable.\n- Removed the `craft.elementIndexes` Twig variable.\n- Removed the `craft.emailMessages` Twig variable.\n- Removed the `craft.feeds` Twig variable.\n- Removed the `craft.fields` Twig variable.\n- Removed the `craft.globals` Twig variable.\n- Removed the `craft.i18n` Twig variable.\n- Removed the `craft.request` Twig variable.\n- Removed the `craft.sections` Twig variable.\n- Removed the `craft.session` Twig variable.\n- Removed the `craft.systemSettings` Twig variable.\n- Removed the `craft.userGroups` Twig variable.\n- Removed the `craft.userPermissions` Twig variable.\n- Removed the `assignUserGroups` user permission, which authorized users to assign other users to their own groups. Authorization must now be explicitly granted for each group. ([#10422](https://github.com/craftcms/cms/issues/10422))\n- Removed the `customizeSources` user permission. Only admins can customize element sources now, and only from an environment that allows admin changes.\n- Removed the `publishPeerEntryDrafts:<uid>` permissions, as they were pointless. (If a user is authorized to save an entry and view other users\u2019 drafts of it, there\u2019s nothing stopping them from making the same changes themselves.)\n- Removed the `assets/edit-asset` action.\n- Removed the `assets/thumb` action.\n- Removed the `categories/edit-category` action.\n- Removed the `categories/preview-category` action.\n- Removed the `categories/share-category` action.\n- Removed the `categories/view-shared-category` action.\n- Removed the `dashboard/get-feed-items` action.\n- Removed the `elements/get-editor-html` action.\n- Removed the `entries/switch-entry-type` action.\n- Removed `craft\\base\\ApplicationTrait::getEntryRevisions()`.\n- Removed `craft\\base\\ApplicationTrait::getFeed()`.\n- Removed `craft\\base\\Element::ATTR_STATUS_CONFLICTED`.\n- Removed `craft\\base\\Element::getHasFreshContent()`. `getIsFresh()` should be used instead.\n- Removed `craft\\base\\ElementInterface::getEditorHtml()`. Element edit forms are now exclusively driven by their field layout.\n- Removed `craft\\base\\FieldLayoutElementInterface`.\n- Removed `craft\\base\\FlysystemVolume`.\n- Removed `craft\\base\\LocalVolumeInterface`.\n- Removed `craft\\base\\Volume`.\n- Removed `craft\\base\\VolumeInterface`.\n- Removed `craft\\base\\VolumeTrait`.\n- Removed `craft\\behaviors\\FieldLayoutBehavior::setFields()`.\n- Removed `craft\\config\\DbConfig::updateDsn()`.\n- Removed `craft\\console\\Request::getIsSingleActionRequest()`.\n- Removed `craft\\controllers\\AssetTransformsController`.\n- Removed `craft\\controllers\\BaseUpdaterController::ACTION_COMPOSER_OPTIMIZE`.\n- Removed `craft\\controllers\\BaseUpdaterController::actionComposerOptimize()`.\n- Removed `craft\\controllers\\Drafts`.\n- Removed `craft\\controllers\\ElementIndexesController::$paginated`.\n- Removed `craft\\controllers\\EntriesController::EVENT_PREVIEW_ENTRY`.\n- Removed `craft\\controllers\\UtilitiesController::actionAssetIndexPerformAction()`.\n- Removed `craft\\db\\Connection::trimObjectName()`.\n- Removed `craft\\db\\Table::ASSETTRANSFORMINDEX`.\n- Removed `craft\\db\\Table::ASSETTRANSFORMS`.\n- Removed `craft\\elements\\actions\\SetStatus::$allowDisabledForSite`.\n- Removed `craft\\elements\\actions\\SetStatus::DISABLED_FOR_SITE`.\n- Removed `craft\\elements\\actions\\SetStatus::DISABLED_GLOBALLY`.\n- Removed `craft\\elements\\Asset::getSupportsPreview()`.\n- Removed `craft\\elements\\Asset::getTransformSource()`.\n- Removed `craft\\elements\\Asset::setTransformSource()`.\n- Removed `craft\\elements\\db\\ElementQuery::getIterator()`.\n- Removed `craft\\elements\\db\\ElementQuery::offsetExists()`.\n- Removed `craft\\elements\\db\\ElementQuery::offsetGet()`.\n- Removed `craft\\elements\\db\\ElementQuery::offsetSet()`.\n- Removed `craft\\elements\\db\\ElementQuery::offsetUnset()`.\n- Removed `craft\\elements\\User::mergePreferences()`.\n- Removed `craft\\errors\\AssetTransformException`.\n- Removed `craft\\errors\\FieldNotFoundException`.\n- Removed `craft\\errors\\InvalidVolumeException`.\n- Removed `craft\\errors\\MissingVolumeFolderException`.\n- Removed `craft\\errors\\VolumeException`.\n- Removed `craft\\errors\\VolumeObjectExistsException`.\n- Removed `craft\\errors\\VolumeObjectNotFoundException`.\n- Removed `craft\\events\\AssetTransformEvent`.\n- Removed `craft\\events\\AssetTransformImageEvent`.\n- Removed `craft\\events\\DefineComponentsEvent`.\n- Removed `craft\\events\\GenerateTransformEvent::$image`.\n- Removed `craft\\events\\GenerateTransformEvent::$tempPath`.\n- Removed `craft\\events\\GetAssetThumbEvent`.\n- Removed `craft\\events\\GetAssetThumbUrlEvent::$generate`.\n- Removed `craft\\events\\GetAssetThumbUrlEvent::$size`.\n- Removed `craft\\events\\GlobalSetContentEvent`.\n- Removed `craft\\events\\RegisterGqlPermissionsEvent`.\n- Removed `craft\\events\\SearchEvent::getElementIds()`.\n- Removed `craft\\events\\SearchEvent::setElementIds()`.\n- Removed `craft\\feeds\\Feeds`.\n- Removed `craft\\feeds\\GuzzleClient`.\n- Removed `craft\\fields\\BaseOptionsField::optionLabel()`.\n- Removed `craft\\fields\\Url::$placeholder`.\n- Removed `craft\\gql\\base\\Resolver::extractEagerLoadCondition()`.\n- Removed `craft\\gql\\base\\Resolver::getArrayableArguments()`.\n- Removed `craft\\gql\\base\\Resolver::prepareArguments()`.\n- Removed `craft\\helpers\\App::dbMutexConfig()`.\n- Removed `craft\\helpers\\App::getDefaultLogTargets()`.\n- Removed `craft\\helpers\\App::logConfig()`.\n- Removed `craft\\helpers\\Cp::editElementTitles()`.\n- Removed `craft\\helpers\\Localization::localeData()`.\n- Removed `craft\\helpers\\Stringy`.\n- Removed `craft\\i18n\\Locale::setDateTimeFormats()`.\n- Removed `craft\\log\\FileTarget`.\n- Removed `craft\\log\\StreamLogTarget`.\n- Removed `craft\\models\\AssetTransform`.\n- Removed `craft\\models\\AssetTransformIndex`.\n- Removed `craft\\models\\BaseEntryRevisionModel`.\n- Removed `craft\\models\\EntryDraft`.\n- Removed `craft\\models\\EntryVersion`.\n- Removed `craft\\models\\FieldLayout::setFields()`.\n- Removed `craft\\models\\Site::$originalBaseUrl`.\n- Removed `craft\\models\\Site::$originalName`.\n- Removed `craft\\models\\Site::overrideBaseUrl()`.\n- Removed `craft\\models\\Site::overrideName()`.\n- Removed `craft\\models\\VolumeListing`.\n- Removed `craft\\mutex\\DbMutexTrait`.\n- Removed `craft\\mutex\\FileMutex`.\n- Removed `craft\\mutex\\MysqlMutex`.\n- Removed `craft\\mutex\\PgsqlMutex`.\n- Removed `craft\\mutex\\PrefixedMutexTrait`.\n- Removed `craft\\queue\\jobs\\DeleteStaleTemplateCaches`.\n- Removed `craft\\records\\AssetTransform`.\n- Removed `craft\\records\\MatrixBlockType::$validateUniques`.\n- Removed `craft\\services\\AssetIndexer::deleteStaleIndexingData()`.\n- Removed `craft\\services\\AssetIndexer::extractFolderItemsFromIndexList()`.\n- Removed `craft\\services\\AssetIndexer::extractSkippedItemsFromIndexList()`.\n- Removed `craft\\services\\AssetIndexer::getIndexingSessionId()`.\n- Removed `craft\\services\\AssetIndexer::getMissingFiles()`.\n- Removed `craft\\services\\AssetIndexer::prepareIndexList()`.\n- Removed `craft\\services\\AssetIndexer::processIndexForVolume()`.\n- Removed `craft\\services\\Assets::$generatePendingTransformsViaQueue`.\n- Removed `craft\\services\\Assets::EVENT_GET_ASSET_THUMB_URL`.\n- Removed `craft\\services\\Assets::EVENT_GET_THUMB_PATH`.\n- Removed `craft\\services\\Assets::getThumbPath()`.\n- Removed `craft\\services\\AssetTransforms`.\n- Removed `craft\\services\\Composer::$disablePackagist`.\n- Removed `craft\\services\\Composer::optimize()`.\n- Removed `craft\\services\\Content::getContentRow()`.\n- Removed `craft\\services\\Content::populateElementContent()`.\n- Removed `craft\\services\\Drafts::EVENT_AFTER_MERGE_SOURCE_CHANGES`.\n- Removed `craft\\services\\Drafts::EVENT_AFTER_PUBLISH_DRAFT`.\n- Removed `craft\\services\\Drafts::EVENT_BEFORE_MERGE_SOURCE_CHANGES`.\n- Removed `craft\\services\\Drafts::EVENT_BEFORE_PUBLISH_DRAFT`.\n- Removed `craft\\services\\Drafts::publishDraft()`.\n- Removed `craft\\services\\EntryRevisions`.\n- Removed `craft\\services\\Fields::assembleLayout()`.\n- Removed `craft\\services\\Fields::getFieldIdsByLayoutId()`.\n- Removed `craft\\services\\Fields::getFieldsByElementType()`.\n- Removed `craft\\services\\Fields::getFieldsByLayoutId()`.\n- Removed `craft\\services\\Gql::getAllPermissions()`.\n- Removed `craft\\services\\Path::getAssetThumbsPath()`.\n- Removed `craft\\services\\ProjectConfig::CONFIG_ALL_KEY`.\n- Removed `craft\\services\\ProjectConfig::CONFIG_ALL_KEY`.\n- Removed `craft\\services\\ProjectConfig::CONFIG_KEY`.\n- Removed `craft\\services\\Sections::isSectionTemplateValid()`.\n- Removed `craft\\services\\SystemSettings`.\n- Removed `craft\\services\\TemplateCaches::deleteCacheById()`.\n- Removed `craft\\services\\TemplateCaches::deleteCachesByKey()`.\n- Removed `craft\\services\\TemplateCaches::deleteExpiredCaches()`.\n- Removed `craft\\services\\TemplateCaches::deleteExpiredCachesIfOverdue()`.\n- Removed `craft\\services\\TemplateCaches::EVENT_AFTER_DELETE_CACHES`.\n- Removed `craft\\services\\TemplateCaches::EVENT_BEFORE_DELETE_CACHES`.\n- Removed `craft\\services\\TemplateCaches::handleResponse()`.\n- Removed `craft\\services\\TemplateCaches::handleResponse()`.\n- Removed `craft\\services\\TemplateCaches::includeElementInTemplateCaches()`.\n- Removed `craft\\services\\TemplateCaches::includeElementQueryInTemplateCaches()`.\n- Removed `craft\\services\\Volumes::createVolume()`.\n- Removed `craft\\services\\Volumes::EVENT_REGISTER_VOLUME_TYPES`.\n- Removed `craft\\services\\Volumes::getAllVolumeTypes()`.\n- Removed `craft\\services\\Volumes::getVolumeOverrides()`.\n- Removed `craft\\volumes\\Local`.\n- Removed `craft\\volumes\\MissingVolume`.\n- Removed `craft\\volumes\\Temp`.\n- Removed `craft\\web\\AssetBundle::useCompressedJs()`.\n- Removed `craft\\web\\AssetManager::getPublishedPath()`.\n- Removed `craft\\web\\Request::getIsSingleActionRequest()`.\n- Removed `craft\\web\\twig\\Template`.\n- Removed `craft\\web\\twig\\variables\\CategoryGroups`.\n- Removed `craft\\web\\twig\\variables\\Config`.\n- Removed `craft\\web\\twig\\variables\\Deprecator`.\n- Removed `craft\\web\\twig\\variables\\ElementIndexes`.\n- Removed `craft\\web\\twig\\variables\\EmailMessages`.\n- Removed `craft\\web\\twig\\variables\\Feeds`.\n- Removed `craft\\web\\twig\\variables\\Fields`.\n- Removed `craft\\web\\twig\\variables\\Globals`.\n- Removed `craft\\web\\twig\\variables\\I18N`.\n- Removed `craft\\web\\twig\\variables\\Request`.\n- Removed `craft\\web\\twig\\variables\\Sections`.\n- Removed `craft\\web\\twig\\variables\\SystemSettings`.\n- Removed `craft\\web\\twig\\variables\\UserGroups`.\n- Removed `craft\\web\\twig\\variables\\UserPermissions`.\n- Removed `craft\\web\\twig\\variables\\UserSession`.\n- Removed `craft\\web\\User::destroyDebugPreferencesInSession()`.\n- Removed `craft\\web\\User::saveDebugPreferencesToSession()`.\n- Removed `craft\\web\\View::$minifyCss`.\n- Removed `craft\\web\\View::$minifyJs`.\n- Removed `craft\\web\\View::registerHiResCss()`.\n- Removed `craft\\web\\View::renderTemplateMacro()`.\n- Removed the `_layouts/element` control panel template.\n- Removed the `assets/_edit` control panel template.\n- Removed the `categories/_edit` control panel template.\n- Removed the `entries/_edit` control panel template.\n- Removed the `cp.assets.edit.content` control panel template hook.\n- Removed the `cp.assets.edit.details` control panel template hook.\n- Removed the `cp.assets.edit.meta` control panel template hook.\n- Removed the `cp.assets.edit.settings` control panel template hook.\n- Removed the `cp.assets.edit` control panel template hook.\n- Removed the `cp.categories.edit.content` control panel template hook.\n- Removed the `cp.categories.edit.details` control panel template hook.\n- Removed the `cp.categories.edit.meta` control panel template hook.\n- Removed the `cp.categories.edit.settings` control panel template hook.\n- Removed the `cp.categories.edit` control panel template hook.\n- Removed the `cp.elements.edit` control panel template hook.\n- Removed the `cp.entries.edit.content` control panel template hook.\n- Removed the `cp.entries.edit.details` control panel template hook.\n- Removed the `cp.entries.edit.meta` control panel template hook.\n- Removed the `cp.entries.edit.settings` control panel template hook.\n- Removed the `cp.entries.edit` control panel template hook.\n- Removed the `Craft.AssetEditor` JavaScript class.\n- Removed the `Craft.BaseElementEditor` JavaScript class.\n- Removed the `Craft.DraftEditor` JavaScript class.\n- Removed the `Craft.queueActionRequest()` JavaScript method. `Craft.queue.push()` can be used instead.\n- Removed the Flysystem package. The `craftcms/flysystem-adapter` package now provides a base Flysystem adapter class.\n- Removed the laminas-feed package.\n- Removed the yii2-swiftmailer package.\n\n### Fixed\n- Fixed a bug where pending project config changes in the YAML would get applied when other project config changes were made. ([#9660](https://github.com/craftcms/cms/issues/9660))\n- Fixed a bug where revisions weren\u2019t getting propagated when a section was enabled for new sites, or its Propagation Method was changed. ([#10634](https://github.com/craftcms/cms/issues/10634))\n\n### Security\n- Generated control panel URLs now begin with the `@web` alias value if the `baseCpUrl` config setting isn\u2019t defined.\n- HTML entities output within email body text are now escaped by default in HTML email bodies.\n", "<?php\n/**\n * @link https://craftcms.com/\n * @copyright Copyright (c) Pixel & Tonic, Inc.\n * @license https://craftcms.github.io/license/\n */\n\nnamespace craft\\helpers;\n\nuse Craft;\nuse craft\\base\\Element;\nuse craft\\base\\ElementInterface;\nuse craft\\base\\FieldLayoutElement;\nuse craft\\behaviors\\DraftBehavior;\nuse craft\\elements\\Address;\nuse craft\\enums\\LicenseKeyStatus;\nuse craft\\events\\DefineElementInnerHtmlEvent;\nuse craft\\events\\RegisterCpAlertsEvent;\nuse craft\\fieldlayoutelements\\BaseField;\nuse craft\\models\\FieldLayout;\nuse craft\\models\\FieldLayoutTab;\nuse craft\\models\\Site;\nuse craft\\web\\twig\\TemplateLoaderException;\nuse craft\\web\\View;\nuse yii\\base\\Event;\nuse yii\\base\\InvalidArgumentException;\nuse yii\\helpers\\Markdown;\nuse yii\\validators\\RequiredValidator;\n\n/**\n * Class Cp\n *\n * @author Pixel & Tonic, Inc. <support@pixelandtonic.com>\n * @since 3.0.0\n */\nclass Cp\n{\n    /**\n     * @event RegisterCpAlertsEvent The event that is triggered when registering control panel alerts.\n     */\n    public const EVENT_REGISTER_ALERTS = 'registerAlerts';\n\n    /**\n     * @event DefineElementInnerHtmlEvent The event that is triggered when defining an element\u2019s inner HTML.\n     * @since 4.0.0\n     */\n    public const EVENT_DEFINE_ELEMENT_INNER_HTML = 'defineElementInnerHtml';\n\n    /**\n     * @since 3.5.8\n     */\n    public const ELEMENT_SIZE_SMALL = 'small';\n    /**\n     * @since 3.5.8\n     */\n    public const ELEMENT_SIZE_LARGE = 'large';\n\n    /**\n     * @var Site|false\n     * @see requestedSite()\n     */\n    private static Site|false $_requestedSite;\n\n    /**\n     * Renders a control panel template.\n     *\n     * @param string $template\n     * @param array $variables\n     * @return string\n     * @throws TemplateLoaderException if `$template` is an invalid template path\n     */\n    public static function renderTemplate(string $template, array $variables = []): string\n    {\n        return Craft::$app->getView()->renderTemplate($template, $variables, View::TEMPLATE_MODE_CP);\n    }\n\n    /**\n     * @param string|null $path\n     * @param bool $fetch\n     * @return array\n     */\n    public static function alerts(?string $path = null, bool $fetch = false): array\n    {\n        $alerts = [];\n        $user = Craft::$app->getUser()->getIdentity();\n        $generalConfig = Craft::$app->getConfig()->getGeneral();\n\n        if (!$user) {\n            return $alerts;\n        }\n\n        $updatesService = Craft::$app->getUpdates();\n        $canSettleUp = true;\n        $licenseAlerts = [];\n\n        if ($updatesService->getIsUpdateInfoCached() || $fetch) {\n            // Fetch the updates regardless of whether we're on the Updates page or not, because the other alerts are\n            // relying on cached Craftnet info\n            $updatesService->getUpdates();\n\n            // Get the license key status\n            $licenseKeyStatus = Craft::$app->getCache()->get('licenseKeyStatus');\n\n            if ($path !== 'plugin-store/upgrade-craft') {\n                // Invalid license?\n                if ($licenseKeyStatus === LicenseKeyStatus::Invalid) {\n                    $alerts[] = Craft::t('app', 'Your Craft license key is invalid.');\n                } elseif (Craft::$app->getHasWrongEdition()) {\n                    $message = Craft::t('app', 'You\u2019re running Craft {edition} with a Craft {licensedEdition} license.', [\n                            'edition' => Craft::$app->getEditionName(),\n                            'licensedEdition' => Craft::$app->getLicensedEditionName(),\n                        ]) . ' ';\n                    if ($user->admin) {\n                        if ($generalConfig->allowAdminChanges) {\n                            $message .= '<a class=\"go\" href=\"' . UrlHelper::url('plugin-store/upgrade-craft') . '\">' . Craft::t('app', 'Resolve') . '</a>';\n                        } else {\n                            $message .= Craft::t('app', 'Please fix on an environment where administrative changes are allowed.');\n                        }\n                    } else {\n                        $message .= Craft::t('app', 'Please notify one of your site\u2019s admins.');\n                    }\n\n                    $licenseAlerts[] = $message;\n                }\n            }\n\n            // Any plugin issues?\n            if ($path != 'settings/plugins') {\n                $pluginsService = Craft::$app->getPlugins();\n                $issuePlugins = [];\n                foreach ($pluginsService->getAllPlugins() as $pluginHandle => $plugin) {\n                    if ($pluginsService->hasIssues($pluginHandle)) {\n                        $issuePlugins[] = [$plugin->name, $plugin->handle];\n                    }\n                }\n                if (!empty($issuePlugins)) {\n                    if (count($issuePlugins) === 1) {\n                        $message = Craft::t('app', 'There\u2019s a licensing issue with the {name} plugin.', [\n                            'name' => reset($issuePlugins)[0],\n                        ]);\n                    } else {\n                        $message = Craft::t('app', '{num} plugins have licensing issues.', [\n                            'num' => count($issuePlugins),\n                        ]);\n                    }\n                    $message .= ' ';\n                    if ($user->admin) {\n                        if ($generalConfig->allowAdminChanges) {\n                            $message .= '<a class=\"go\" href=\"' . UrlHelper::cpUrl('settings/plugins') . '\">' . Craft::t('app', 'Resolve') . '</a>';\n                        } else {\n                            $message .= Craft::t('app', 'Please fix on an environment where administrative changes are allowed.');\n                        }\n                    } else {\n                        $message .= Craft::t('app', 'Please notify one of your site\u2019s admins.');\n                    }\n\n                    $licenseAlerts[] = $message;\n\n                    // Is this reconcilable?\n                    foreach ($issuePlugins as [$pluginName, $pluginHandle]) {\n                        if ($pluginsService->getPluginLicenseKeyStatus($pluginHandle) !== LicenseKeyStatus::Trial) {\n                            $canSettleUp = false;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (!empty($licenseAlerts)) {\n                if ($canSettleUp) {\n                    if ($path !== 'plugin-store/buy-all-trials') {\n                        $alerts[] = Craft::t('app', 'There are trial licenses that require payment.') . ' ' .\n                            Html::a(Craft::t('app', 'Buy now'), UrlHelper::cpUrl('plugin-store/buy-all-trials'), ['class' => 'go']);\n                    }\n                } else {\n                    array_push($alerts, ...$licenseAlerts);\n                }\n            }\n\n            if (\n                $path !== 'utilities/updates' &&\n                $user->can('utility:updates') &&\n                $updatesService->getIsCriticalUpdateAvailable()\n            ) {\n                $alerts[] = Craft::t('app', 'A critical update is available.') .\n                    ' <a class=\"go nowrap\" href=\"' . UrlHelper::url('utilities/updates') . '\">' . Craft::t('app', 'Go to Updates') . '</a>';\n            }\n\n            // Domain mismatch?\n            if ($licenseKeyStatus === LicenseKeyStatus::Mismatched) {\n                $licensedDomain = Craft::$app->getCache()->get('licensedDomain');\n                $domainLink = '<a href=\"http://' . $licensedDomain . '\" rel=\"noopener\" target=\"_blank\">' . $licensedDomain . '</a>';\n\n                if (defined('CRAFT_LICENSE_KEY')) {\n                    $message = Craft::t('app', 'The license key in use belongs to {domain}', [\n                        'domain' => $domainLink,\n                    ]);\n                } else {\n                    $keyPath = Craft::$app->getPath()->getLicenseKeyPath();\n\n                    // If the license key path starts with the root project path, trim the project path off\n                    $rootPath = Craft::getAlias('@root');\n                    if (str_starts_with($keyPath, $rootPath . '/')) {\n                        $keyPath = substr($keyPath, strlen($rootPath) + 1);\n                    }\n\n                    $message = Craft::t('app', 'The license located at {file} belongs to {domain}.', [\n                        'file' => $keyPath,\n                        'domain' => $domainLink,\n                    ]);\n                }\n\n                $alerts[] = $message . ' <a class=\"go\" href=\"https://craftcms.com/support/resolving-mismatched-licenses\">' . Craft::t('app', 'Learn more') . '</a>';\n            }\n        }\n\n        // Display an alert if there are pending project config YAML changes\n        $projectConfig = Craft::$app->getProjectConfig();\n        if (\n            $path !== 'utilities/project-config' &&\n            $user->can('utility:project-config') &&\n            $projectConfig->areChangesPending() &&\n            ($projectConfig->writeYamlAutomatically || $projectConfig->get('dateModified') <= $projectConfig->get('dateModified', true))\n        ) {\n            $alerts[] = Craft::t('app', 'Your project config YAML files contain pending changes.') .\n                ' ' . '<a class=\"go\" href=\"' . UrlHelper::url('utilities/project-config') . '\">' . Craft::t('app', 'Review') . '</a>';\n        }\n\n        // Display a warning if admin changes are allowed, and project.yaml is being used but not writable\n        if (\n            $user->admin &&\n            $generalConfig->allowAdminChanges &&\n            $projectConfig->getHadFileWriteIssues()\n        ) {\n            $alerts[] = Craft::t('app', 'Your {folder} folder isn\u2019t writable.', [\n                'folder' => \"config/$projectConfig->folderName/\",\n            ]);\n        }\n\n        // Give plugins a chance to add their own alerts\n        $event = new RegisterCpAlertsEvent();\n        Event::trigger(self::class, self::EVENT_REGISTER_ALERTS, $event);\n        return array_merge($alerts, $event->alerts);\n    }\n\n    /**\n     * Renders an element\u2019s HTML.\n     *\n     * @param ElementInterface $element The element to be rendered\n     * @param string $context The context the element is going to be shown in (`index`, `field`, etc.)\n     * @param string $size The size of the element (`small` or `large`)\n     * @param string|null $inputName The `name` attribute that should be set on the hidden input, if `$context` is set to `field`\n     * @param bool $showStatus Whether the element status should be shown (if the element type has statuses)\n     * @param bool $showThumb Whether the element thumb should be shown (if the element has one)\n     * @param bool $showLabel Whether the element label should be shown\n     * @param bool $showDraftName Whether to show the draft name beside the label if the element is a draft of a published element\n     * @param bool $single Whether the input name should omit the trailing `[]`\n     * @param bool $autoReload Whether the element should auto-reload itself when it\u2019s saved\n     * @return string\n     * @since 3.5.8\n     */\n    public static function elementHtml(\n        ElementInterface $element,\n        string $context = 'index',\n        string $size = self::ELEMENT_SIZE_SMALL,\n        ?string $inputName = null,\n        bool $showStatus = true,\n        bool $showThumb = true,\n        bool $showLabel = true,\n        bool $showDraftName = true,\n        bool $single = false,\n        bool $autoReload = true,\n    ): string {\n        $isDraft = $element->getIsDraft();\n        $isRevision = !$isDraft && $element->getIsRevision();\n        $label = $element->getUiLabel();\n        $showStatus = $showStatus && ($isDraft || $element::hasStatuses());\n\n        // Create the thumb/icon image, if there is one\n        if ($showThumb) {\n            $thumbSizePx = $size === self::ELEMENT_SIZE_SMALL ? 34 : 120;\n            $thumbUrl = $element->getThumbUrl($thumbSizePx);\n        } else {\n            $thumbSizePx = $thumbUrl = null;\n        }\n\n        if ($thumbUrl !== null) {\n            $imageSize2x = $thumbSizePx * 2;\n            $thumbUrl2x = $element->getThumbUrl($imageSize2x);\n\n            $srcsets = [\n                \"$thumbUrl {$thumbSizePx}w\",\n                \"$thumbUrl2x {$imageSize2x}w\",\n            ];\n            $sizesHtml = \"{$thumbSizePx}px\";\n            $srcsetHtml = implode(', ', $srcsets);\n            $imgHtml = Html::tag('div', '', [\n                'class' => array_filter([\n                    'elementthumb',\n                    $element->getHasCheckeredThumb() ? 'checkered' : null,\n                    $size === self::ELEMENT_SIZE_SMALL && $element->getHasRoundedThumb() ? 'rounded' : null,\n                ]),\n                'data' => [\n                    'sizes' => $sizesHtml,\n                    'srcset' => $srcsetHtml,\n                    'alt' => $element->getThumbAlt(),\n                ],\n            ]);\n        } else {\n            $imgHtml = '';\n        }\n\n        $attributes = ArrayHelper::merge(\n            Html::normalizeTagAttributes($element->getHtmlAttributes($context)),\n            [\n                'class' => ['element', $size],\n                'title' => $label . (Craft::$app->getIsMultiSite() ? ' \u2013 ' . Craft::t('site', $element->getSite()->getName()) : ''),\n                'data' => array_filter([\n                    'type' => get_class($element),\n                    'id' => $element->id,\n                    'draft-id' => $element->draftId,\n                    'revision-id' => $element->revisionId,\n                    'site-id' => $element->siteId,\n                    'status' => $element->getStatus(),\n                    'label' => (string)$element,\n                    'url' => $element->getUrl(),\n                    'level' => $element->level,\n                    'settings' => $autoReload ? compact(\n                        'context',\n                        'size',\n                        'showStatus',\n                        'showThumb',\n                        'showLabel',\n                        'showDraftName',\n                    ) : false,\n                ]),\n            ]\n        );\n\n        if ($context === 'field') {\n            $attributes['class'][] = 'removable';\n        }\n\n        if ($element->hasErrors()) {\n            $attributes['class'][] = 'error';\n        }\n\n        if ($showStatus) {\n            $attributes['class'][] = 'hasstatus';\n        }\n\n        if ($thumbUrl !== null) {\n            $attributes['class'][] = 'hasthumb';\n        }\n\n        $user = Craft::$app->getUser()->getIdentity();\n\n        if ($user) {\n            if ($element->canView($user)) {\n                $attributes['data']['editable'] = true;\n            }\n\n            if ($context === 'index') {\n                if ($element->canSave($user)) {\n                    $attributes['data']['savable'] = true;\n                }\n\n                if ($element->canDelete($user)) {\n                    $attributes['data']['deletable'] = true;\n                }\n            }\n        }\n\n        if ($element->trashed) {\n            $attributes['data']['trashed'] = true;\n        }\n\n        $innerHtml = '';\n\n        if ($context === 'field' && $inputName !== null) {\n            $innerHtml .= Html::hiddenInput($inputName . ($single ? '' : '[]'), (string)$element->id) .\n                Html::button('', [\n                    'class' => ['delete', 'icon'],\n                    'title' => Craft::t('app', 'Remove'),\n                    'aria' => [\n                        'label' => Craft::t('app', 'Remove {label}', [\n                            'label' => $label,\n                        ]),\n                    ],\n                ]);\n        }\n\n        if ($showStatus) {\n            if ($isDraft) {\n                $innerHtml .= Html::tag('span', '', [\n                    'class' => ['icon'],\n                    'aria' => [\n                        'hidden' => 'true',\n                    ],\n                    'data' => [\n                        'icon' => 'draft',\n                    ],\n                ]);\n            } else {\n                $status = !$isRevision ? $element->getStatus() : null;\n                $innerHtml .= Html::tag('span', '', [\n                    'class' => array_filter([\n                        'status',\n                        $status,\n                        $status ? ($element::statuses()[$status]['color'] ?? null) : null,\n                    ]),\n                ]);\n            }\n        }\n\n        $innerHtml .= $imgHtml;\n\n        if ($showLabel) {\n            $innerHtml .= '<div class=\"label\">';\n            $innerHtml .= '<span class=\"title\">';\n\n            $encodedLabel = Html::encode($label);\n\n            if ($showDraftName && $isDraft && !$element->getIsUnpublishedDraft()) {\n                /** @var DraftBehavior|ElementInterface $element */\n                $encodedLabel .= Html::tag('span', $element->draftName ?: Craft::t('app', 'Draft'), [\n                    'class' => 'draft-label',\n                ]);\n            }\n\n            // Should we make the element a link?\n            if (\n                $context === 'index' &&\n                !$element->trashed &&\n                ($cpEditUrl = $element->getCpEditUrl())\n            ) {\n                $innerHtml .= Html::a($encodedLabel, $cpEditUrl);\n            } else {\n                $innerHtml .= $encodedLabel;\n            }\n\n            $innerHtml .= '</span></div>';\n        }\n\n        // Allow plugins to modify the inner HTML\n        $event = new DefineElementInnerHtmlEvent(compact(\n            'element',\n            'context',\n            'size',\n            'showStatus',\n            'showThumb',\n            'showLabel',\n            'showDraftName',\n            'innerHtml',\n        ));\n        Event::trigger(self::class, self::EVENT_DEFINE_ELEMENT_INNER_HTML, $event);\n\n        return Html::tag('div', $event->innerHtml, $attributes);\n    }\n\n    /**\n     * Returns element preview HTML, for a list of elements.\n     *\n     * @param ElementInterface[] $elements The elements\n     * @param string $size The size of the element (`small` or `large`)\n     * @param bool $showStatus Whether the element status should be shown (if the element type has statuses)\n     * @param bool $showThumb Whether the element thumb should be shown (if the element has one)\n     * @param bool $showLabel Whether the element label should be shown\n     * @param bool $showDraftName Whether to show the draft name beside the label if the element is a draft of a published element\n     * @return string\n     * @since 3.6.3\n     */\n    public static function elementPreviewHtml(\n        array $elements,\n        string $size = self::ELEMENT_SIZE_SMALL,\n        bool $showStatus = true,\n        bool $showThumb = true,\n        bool $showLabel = true,\n        bool $showDraftName = true,\n    ): string {\n        if (empty($elements)) {\n            return '';\n        }\n\n        $first = array_shift($elements);\n        $html = static::elementHtml($first, 'index', $size, null, $showStatus, $showThumb, $showLabel, $showDraftName);\n\n        if (!empty($elements)) {\n            $otherHtml = '';\n            foreach ($elements as $other) {\n                $otherHtml .= static::elementHtml($other, 'index', $size, null, $showStatus, $showThumb, $showLabel, $showDraftName);\n            }\n            $html .= Html::tag('span', '+' . Craft::$app->getFormatter()->asInteger(count($elements)), [\n                'title' => implode(', ', ArrayHelper::getColumn($elements, 'title')),\n                'class' => 'btn small',\n                'role' => 'button',\n                'onclick' => 'jQuery(this).replaceWith(' . Json::encode($otherHtml) . ')',\n            ]);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders a field\u2019s HTML, for the given input HTML or a template.\n     *\n     * @param string $input The input HTML or template path. If passing a template path, it must begin with `template:`.\n     * @param array $config\n     * @return string\n     * @throws TemplateLoaderException if $input begins with `template:` and is followed by an invalid template path\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.5.8\n     */\n    public static function fieldHtml(string $input, array $config = []): string\n    {\n        $attribute = $config['attribute'] ?? $config['id'] ?? null;\n        $id = $config['id'] = $config['id'] ?? 'field' . mt_rand();\n        $labelId = $config['labelId'] ?? \"$id-label\";\n        $instructionsId = $config['instructionsId'] ?? \"$id-instructions\";\n        $tipId = $config['tipId'] ?? \"$id-tip\";\n        $warningId = $config['warningId'] ?? \"$id-warning\";\n        $errorsId = $config['errorsId'] ?? \"$id-errors\";\n        $statusId = $config['statusId'] ?? \"$id-status\";\n\n        $instructions = $config['instructions'] ?? null;\n        $tip = $config['tip'] ?? null;\n        $warning = $config['warning'] ?? null;\n        $errors = $config['errors'] ?? null;\n        $status = $config['status'] ?? null;\n\n        if (str_starts_with($input, 'template:')) {\n            // Set labelledBy and describedBy values in case the input template supports it\n            if (!isset($config['labelledBy'])) {\n                $config['labelledBy'] = $labelId;\n            }\n            if (!isset($config['describedBy'])) {\n                $descriptorIds = array_filter([\n                    $errors ? $errorsId : null,\n                    $status ? $statusId : null,\n                    $instructions ? $instructionsId : null,\n                    $tip ? $tipId : null,\n                    $warning ? $warningId : null,\n                ]);\n                $config['describedBy'] = $descriptorIds ? implode(' ', $descriptorIds) : null;\n            }\n\n            $input = static::renderTemplate(substr($input, 9), $config);\n        }\n\n        $fieldset = $config['fieldset'] ?? false;\n        $fieldId = $config['fieldId'] ?? \"$id-field\";\n        $label = $config['fieldLabel'] ?? $config['label'] ?? null;\n\n        if ($label === '__blank__') {\n            $label = null;\n        }\n\n        $siteId = Craft::$app->getIsMultiSite() && isset($config['siteId']) ? (int)$config['siteId'] : null;\n\n        if ($siteId) {\n            $site = Craft::$app->getSites()->getSiteById($siteId);\n            if (!$site) {\n                throw new InvalidArgumentException(\"Invalid site ID: $siteId\");\n            }\n        } else {\n            $site = null;\n        }\n\n        $required = (bool)($config['required'] ?? false);\n        $instructionsPosition = $config['instructionsPosition'] ?? 'before';\n        $orientation = $config['orientation'] ?? ($site ? $site->getLocale() : Craft::$app->getLocale())->getOrientation();\n        $translatable = Craft::$app->getIsMultiSite() ? ($config['translatable'] ?? ($site !== null)) : false;\n\n        $fieldClass = array_merge(array_filter([\n            'field',\n            ($config['first'] ?? false) ? 'first' : null,\n            $errors ? 'has-errors' : null,\n        ]), Html::explodeClass($config['fieldClass'] ?? []));\n\n        if (isset($config['attribute']) && ($currentUser = Craft::$app->getUser()->getIdentity())) {\n            $showAttribute = $currentUser->admin && $currentUser->getPreference('showFieldHandles');\n        } else {\n            $showAttribute = false;\n        }\n\n        $instructionsHtml = $instructions\n            ? Html::tag('div', preg_replace('/&amp;(\\w+);/', '&$1;', Markdown::process(Html::encodeInvalidTags($instructions), 'gfm-comment')), [\n                'id' => $instructionsId,\n                'class' => ['instructions'],\n            ])\n            : '';\n\n        $labelHtml = $label . (\n            $required\n                ? Html::tag('span', Craft::t('app', 'Required'), [\n                    'class' => ['visually-hidden'],\n                ]) .\n                Html::tag('span', '', [\n                    'class' => ['required'],\n                    'aria' => [\n                        'hidden' => 'true',\n                    ],\n                ])\n                : ''\n            );\n\n        $containerTag = $fieldset ? 'fieldset' : 'div';\n\n        return\n            Html::beginTag($containerTag, ArrayHelper::merge(\n                [\n                    'class' => $fieldClass,\n                    'id' => $fieldId,\n                    'data' => [\n                        'attribute' => $attribute,\n                    ],\n                ],\n                $config['fieldAttributes'] ?? []\n            )) .\n            (($label && $fieldset)\n                ? Html::tag('legend', $labelHtml, [\n                    'class' => ['visually-hidden'],\n                    'data' => [\n                        'label' => $label,\n                    ],\n                ])\n                : '') .\n            ($status\n                ? Html::beginTag('div', [\n                    'id' => $statusId,\n                    'class' => ['status-badge', $status[0]],\n                    'title' => $status[1],\n                ]) .\n                Html::tag('span', $status[1], [\n                    'class' => 'visually-hidden',\n                ]) .\n                Html::endTag('div')\n                : '') .\n            (($label || $showAttribute)\n                ? (\n                    Html::beginTag('div', ['class' => 'heading']) .\n                    ($config['headingPrefix'] ?? '') .\n                    ($label\n                        ? Html::tag($fieldset ? 'legend' : 'label', $labelHtml, ArrayHelper::merge([\n                            'id' => $labelId,\n                            'class' => $config['labelClass'] ?? null,\n                            'for' => !$fieldset ? $id : null,\n                            'aria' => [\n                                'hidden' => $fieldset ? 'true' : null,\n                            ],\n                        ], $config['labelAttributes'] ?? []))\n                        : '') .\n                    ($translatable\n                        ? Html::beginTag('div', [\n                            'class' => ['t9n-indicator'],\n                            'title' => $config['translationDescription'] ?? Craft::t('app', 'This field is translatable.'),\n                        ]) .\n                        Html::tag('span', '', [\n                            'data' => [\n                                'icon' => 'language',\n                            ],\n                            'aria' => [\n                                'hidden' => 'true',\n                            ],\n                        ]) .\n                        Html::tag('span', $config['translationDescription'] ?? Craft::t('app', 'This field is translatable.'), [\n                            'class' => 'visually-hidden',\n                        ]) .\n                        Html::endTag('div')\n                        : '') .\n                    ($showAttribute\n                        ? Html::tag('div', '', [\n                            'class' => ['flex-grow'],\n                        ]) . static::renderTemplate('_includes/forms/copytextbtn', [\n                            'id' => \"$id-attribute\",\n                            'class' => ['code', 'small', 'light'],\n                            'value' => $config['attribute'],\n                        ])\n                        : '') .\n                    ($config['headingSuffix'] ?? '') .\n                    Html::endTag('div')\n                )\n                : '') .\n            ($instructionsPosition === 'before' ? $instructionsHtml : '') .\n            Html::tag('div', $input, ArrayHelper::merge(\n                [\n                    'class' => array_filter([\n                        'input',\n                        $orientation,\n                        $errors ? 'errors' : null,\n                    ]),\n                ],\n                $config['inputContainerAttributes'] ?? []\n            )) .\n            ($instructionsPosition === 'after' ? $instructionsHtml : '') .\n            self::_noticeHtml($tipId, 'notice', Craft::t('app', 'Tip:'), $tip) .\n            self::_noticeHtml($warningId, 'warning', Craft::t('app', 'Warning:'), $warning) .\n            ($errors\n                ? static::renderTemplate('_includes/forms/errorList', [\n                    'id' => $errorsId,\n                    'errors' => $errors,\n                ])\n                : '') .\n            Html::endTag($containerTag);\n    }\n\n    /**\n     * Returns the HTML for a field tip/warning.\n     *\n     * @param string $id\n     * @param string $class\n     * @param string $label\n     * @param string|null $message\n     * @return string\n     */\n    private static function _noticeHtml(string $id, string $class, string $label, ?string $message): string\n    {\n        if (!$message) {\n            return '';\n        }\n\n        return\n            Html::beginTag('p', [\n                'id' => $id,\n                'class' => [$class, 'has-icon'],\n            ]) .\n            Html::tag('span', '', [\n                'class' => 'icon',\n                'aria' => [\n                    'hidden' => 'true',\n                ],\n            ]) .\n            Html::tag('span', \"$label \", [\n                'class' => 'visually-hidden',\n            ]) .\n            Html::tag('span', preg_replace('/&amp;(\\w+);/', '&$1;', Markdown::processParagraph(Html::encodeInvalidTags($message)))) .\n            Html::endTag('p');\n    }\n\n    /**\n     * Renders a checkbox field\u2019s HTML.\n     *\n     * Note that unlike the `checkboxField` macro in `_includes/forms.html`, you must set the checkbox label via\n     * `$config['checkboxLabel']`.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function checkboxFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'checkbox' . mt_rand();\n\n        $config['fieldClass'] = Html::explodeClass($config['fieldClass'] ?? []);\n        $config['fieldClass'][] = 'checkboxfield';\n        $config['instructionsPosition'] = $config['instructionsPosition'] ?? 'after';\n\n        // Don't pass along `label` since it's ambiguous\n        unset($config['label']);\n\n        return static::fieldHtml('template:_includes/forms/checkbox', $config);\n    }\n\n    /**\n     * Renders a checkbox select field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function checkboxSelectFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'checkboxselect' . mt_rand();\n        $config['fieldset'] = true;\n        return static::fieldHtml('template:_includes/forms/checkboxSelect', $config);\n    }\n\n    /**\n     * Renders a color field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function colorFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'color' . mt_rand();\n        $config['fieldset'] = true;\n        return static::fieldHtml('template:_includes/forms/color', $config);\n    }\n\n    /**\n     * Renders an editable table field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function editableTableFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'editabletable' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/editableTable', $config);\n    }\n\n    /**\n     * Renders a lightswitch input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function lightswitchHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/lightswitch', $config);\n    }\n\n    /**\n     * Renders a lightswitch field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function lightswitchFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'lightswitch' . mt_rand();\n\n        $config['fieldClass'] = Html::explodeClass($config['fieldClass'] ?? []);\n        $config['fieldClass'][] = 'lightswitch-field';\n\n        // Don't pass along `label` since it's ambiguous\n        $config['fieldLabel'] = $config['fieldLabel'] ?? $config['label'] ?? null;\n        unset($config['label']);\n\n        return static::fieldHtml('template:_includes/forms/lightswitch', $config);\n    }\n\n    /**\n     * Renders a select input.\n     *\n     * @param array $config\n     * @return string\n     * @since 3.6.0\n     */\n    public static function selectHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/select', $config);\n    }\n\n    /**\n     * Renders a select field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function selectFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'select' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/select', $config);\n    }\n\n    /**\n     * Renders a selectize input.\n     *\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function selectizeHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/selectize', $config);\n    }\n\n    /**\n     * Renders a selectize field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function selectizeFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'selectize' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/selectize', $config);\n    }\n\n    /**\n     * Renders a multi-select input.\n     *\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function multiSelectHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/multiselect', $config);\n    }\n\n    /**\n     * Renders a multi-select field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function multiSelectFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'multiselect' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/multiselect', $config);\n    }\n\n    /**\n     * Renders a text input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function textHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/text', $config);\n    }\n\n    /**\n     * Renders a text field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function textFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'text' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/text', $config);\n    }\n\n    /**\n     * Renders a textarea input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function textareaHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/textarea', $config);\n    }\n\n    /**\n     * Renders a textarea field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.6.0\n     */\n    public static function textareaFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'textarea' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/textarea', $config);\n    }\n\n    /**\n     * Returns a date input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function dateHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/date', $config);\n    }\n\n    /**\n     * Returns a date field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function dateFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'date' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/date', $config);\n    }\n\n    /**\n     * Returns a time input\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function timeHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/time', $config);\n    }\n\n    /**\n     * Returns a date field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function timeFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'time' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/time', $config);\n    }\n\n    /**\n     * Renders a date + time field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.7.0\n     */\n    public static function dateTimeFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'datetime' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/datetime', $config);\n    }\n\n    /**\n     * Renders an element select input\u2019s HTML\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 4.0.0\n     */\n    public static function elementSelectHtml(array $config): string\n    {\n        return static::renderTemplate('_includes/forms/elementSelect', $config);\n    }\n\n    /**\n     * Renders an element select field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.7.0\n     */\n    public static function elementSelectFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'elementselect' . mt_rand();\n        return static::fieldHtml('template:_includes/forms/elementSelect', $config);\n    }\n\n    /**\n     * Renders an autosuggest field\u2019s HTML.\n     *\n     * @param array $config\n     * @return string\n     * @throws InvalidArgumentException if `$config['siteId']` is invalid\n     * @since 3.7.0\n     */\n    public static function autosuggestFieldHtml(array $config): string\n    {\n        $config['id'] = $config['id'] ?? 'autosuggest' . mt_rand();\n\n        // Suggest an environment variable / alias?\n        if ($config['suggestEnvVars'] ?? false) {\n            $value = $config['value'] ?? '';\n            if (!isset($config['tip']) && (!isset($value[0]) || !in_array($value[0], ['$', '@']))) {\n                if ($config['suggestAliases'] ?? false) {\n                    $config['tip'] = Craft::t('app', 'This can be set to an environment variable, or begin with an alias.');\n                } else {\n                    $config['tip'] = Craft::t('app', 'This can be set to an environment variable.');\n                }\n                $config['tip'] .= ' ' .\n                    Html::a(Craft::t('app', 'Learn more'), 'https://craftcms.com/docs/4.x/config/#environmental-configuration', [\n                        'class' => 'go',\n                    ]);\n            } elseif (\n                !isset($config['warning']) &&\n                ($value === '@web' || str_starts_with($value, '@web/')) &&\n                Craft::$app->getRequest()->isWebAliasSetDynamically\n            ) {\n                $config['warning'] = Craft::t('app', 'The `@web` alias is not recommended if it is determined automatically.');\n            }\n        }\n\n        return static::fieldHtml('template:_includes/forms/autosuggest', $config);\n    }\n\n    /**\n     * Renders address cards.\n     *\n     * @param Address[] $addresses\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function addressCardsHtml(array $addresses, array $config = []): string\n    {\n        $config += [\n            'id' => sprintf('addresses%s', mt_rand()),\n            'ownerId' => null,\n            'maxAddresses' => null,\n        ];\n\n        $view = Craft::$app->getView();\n\n        $view->registerJsWithVars(fn($selector, $settings) => <<<JS\nnew Craft.AddressesInput($($selector), $settings);\nJS, [\n            sprintf('#%s', $view->namespaceInputId($config['id'])),\n            [\n                'ownerId' => $config['ownerId'],\n                'maxAddresses' => $config['maxAddresses'],\n            ],\n        ]);\n\n        return\n            Html::beginTag('ul', [\n                'id' => $config['id'],\n                'class' => 'address-cards',\n            ]) .\n            implode(\"\\n\", array_map(fn(Address $address) => static::addressCardHtml($address, $config), $addresses)) .\n            Html::beginTag('li') .\n            Html::beginTag('button', [\n                'type' => 'button',\n                'class' => ['btn', 'dashed', 'add', 'icon', 'address-cards__add-btn'],\n            ]) .\n            Html::tag('div', '', [\n                'class' => ['spinner', 'spinner-absolute'],\n            ]) .\n            Html::tag('div', Craft::t('app', 'Add an address'), [\n                'class' => 'label',\n            ]) .\n            Html::endTag('button') . // .add\n            Html::endTag('li') .\n            Html::endTag('ul'); // .address-cards\n    }\n\n    /**\n     * Renders an address card for an Addresses input.\n     *\n     * @param Address $address\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function addressCardHtml(Address $address, array $config = []): string\n    {\n        $config += [\n            'name' => null,\n        ];\n\n        $label = $address->title;\n        $canDelete = $address->canDelete(Craft::$app->getUser()->getIdentity());\n        $actionMenuId = sprintf('address-card-action-menu-%s', mt_rand());\n\n        return\n            Html::beginTag('li', [\n                'class' => 'address-card',\n                'data' => [\n                    'id' => $address->id,\n                    'draftId' => $address->draftId,\n                ],\n            ]) .\n            ($config['name'] ? Html::hiddenInput(\"{$config['name']}[]\", (string)$address->id) : '') .\n            Html::beginTag('div', ['class' => 'address-card-header']) .\n            Html::tag('h2', $address->title, [\n                'class' => array_filter([\n                    'address-card-label',\n                    !$label ? 'hidden' : null,\n                ]),\n            ]) .\n            ($canDelete\n                ? Html::beginTag('div', [\n                    'class' => 'address-card-header-actions',\n                    'data' => [\n                        'wrapper' => true,\n                    ],\n                ]) .\n                Html::button('', [\n                    'class' => ['btn', 'menubtn'],\n                    'title' => Craft::t('app', 'Actions'),\n                    'aria' => [\n                        'controls' => $actionMenuId,\n                        'label' => sprintf('%s %s', $label ?? Craft::t('app', 'New Address'), Craft::t('app', 'Settings')),\n                    ],\n                    'data' => [\n                        'icon' => 'settings',\n                        'disclosure-trigger' => true,\n                    ],\n                ]) .\n                Html::beginTag('div', [\n                    'id' => $actionMenuId,\n                    'class' => ['menu', 'menu--disclosure'],\n                ]) .\n                Html::beginTag('ul', ['class' => 'padded']) .\n                Html::beginTag('li') .\n                Html::button(Craft::t('app', 'Edit'), [\n                    'class' => 'menu-option',\n                    'type' => 'button',\n                    'aria' => [\n                        'label' => Craft::t('app', 'Edit'),\n                    ],\n                    'data' => [\n                        'icon' => 'edit',\n                        'action' => 'edit',\n                    ],\n                ]) .\n                Html::endTag('li') .\n                Html::beginTag('li') .\n                Html::button(Craft::t('app', 'Delete'), [\n                    'class' => 'error menu-option',\n                    'type' => 'button',\n                    'aria' => [\n                        'label' => Craft::t('app', 'Delete'),\n                    ],\n                    'data' => [\n                        'icon' => 'remove',\n                        'action' => 'delete',\n                    ],\n                ]) .\n                Html::endTag('li') .\n                Html::endTag('ul') .\n                Html::endTag('div') . // .menu\n                Html::endTag('div') // .address-card-header-actions\n                : ''\n            ) .\n            Html::endTag('div') . // .address-card-header\n            Html::tag('div', Craft::$app->getAddresses()->formatAddress($address), [\n                'class' => 'address-card-body',\n            ]) .\n            Html::endTag('li'); // .address-card\n    }\n\n    /**\n     * Returns address fields\u2019 HTML (sans country) for a given address.\n     *\n     * @param Address $address\n     * @return string\n     * @since 4.0.0\n     */\n    public static function addressFieldsHtml(Address $address): string\n    {\n        $formatRepo = Craft::$app->getAddresses()->getAddressFormatRepository()->get($address->countryCode);\n\n        $requiredFields = [];\n        $scenario = $address->getScenario();\n        $address->setScenario(Element::SCENARIO_LIVE);\n        $activeValidators = $address->getActiveValidators();\n        $address->setScenario($scenario);\n\n        foreach ($activeValidators as $validator) {\n            if ($validator instanceof RequiredValidator) {\n                foreach ($validator->getAttributeNames() as $attr) {\n                    if ($validator->when === null || call_user_func($validator->when, $address, $attr)) {\n                        $requiredFields[$attr] = true;\n                    }\n                }\n            }\n        }\n\n        $visibleFields = array_flip(array_merge(\n                $formatRepo->getUsedFields(),\n                $formatRepo->getUsedSubdivisionFields(),\n            )) + $requiredFields;\n\n        return\n            static::textFieldHtml([\n                'label' => $address->getAttributeLabel('addressLine1'),\n                'id' => 'addressLine1',\n                'name' => 'addressLine1',\n                'value' => $address->addressLine1,\n                'required' => isset($requiredFields['addressLine1']),\n                'errors' => $address->getErrors('addressLine1'),\n            ]) .\n            static::textFieldHtml([\n                'label' => $address->getAttributeLabel('addressLine2'),\n                'id' => 'addressLine2',\n                'name' => 'addressLine2',\n                'value' => $address->addressLine2,\n                'required' => isset($requiredFields['addressLine2']),\n                'errors' => $address->getErrors('addressLine2'),\n            ]) .\n            self::_subdivisionField(\n                $address,\n                'administrativeArea',\n                isset($visibleFields['administrativeArea']),\n                isset($requiredFields['administrativeArea']),\n                [$address->countryCode],\n                true,\n            ) .\n            self::_subdivisionField(\n                $address,\n                'locality',\n                isset($visibleFields['locality']),\n                isset($requiredFields['locality']),\n                [$address->countryCode, $address->administrativeArea],\n                true,\n            ) .\n            self::_subdivisionField(\n                $address,\n                'dependentLocality',\n                isset($visibleFields['dependentLocality']),\n                isset($requiredFields['dependentLocality']),\n                [$address->countryCode, $address->administrativeArea, $address->locality],\n                false,\n            ) .\n            Html::beginTag('div', ['class' => 'flex-fields']) .\n            static::textFieldHtml([\n                'fieldClass' => array_filter([\n                    'width-50',\n                    !isset($visibleFields['postalCode']) ? 'hidden' : null,\n                ]),\n                'label' => $address->getAttributeLabel('postalCode'),\n                'id' => 'postalCode',\n                'name' => 'postalCode',\n                'value' => $address->postalCode,\n                'required' => isset($requiredFields['postalCode']),\n                'errors' => $address->getErrors('postalCode'),\n            ]) .\n            static::textFieldHtml([\n                'fieldClass' => array_filter([\n                    'width-50',\n                    !isset($visibleFields['sortingCode']) ? 'hidden' : null,\n                ]),\n                'label' => $address->getAttributeLabel('sortingCode'),\n                'id' => 'sortingCode',\n                'name' => 'sortingCode',\n                'value' => $address->sortingCode,\n                'required' => isset($requiredFields['sortingCode']),\n                'errors' => $address->getErrors('sortingCode'),\n            ]) .\n            Html::endTag('div'); // .flex-fields\n    }\n\n    private static function _subdivisionField(\n        Address $address,\n        string $name,\n        bool $visible,\n        bool $required,\n        ?array $parents,\n        bool $spinner,\n    ): string {\n        $value = $address->$name;\n        $options = Craft::$app->getAddresses()->getSubdivisionRepository()->getList($parents, Craft::$app->language);\n\n        if ($options) {\n            // Persist invalid values in the UI\n            if ($value && !isset($options[$value])) {\n                $options[$value] = $value;\n            }\n\n            if ($spinner) {\n                $errors = $address->getErrors($name);\n                $input =\n                    Html::beginTag('div', [\n                        'class' => ['flex', 'flex-nowrap'],\n                    ]) .\n                    static::selectizeHtml([\n                        'id' => $name,\n                        'name' => $name,\n                        'value' => $value,\n                        'options' => $options,\n                        'errors' => $errors,\n                    ]) .\n                    Html::tag('div', '', [\n                        'id' => \"$name-spinner\",\n                        'class' => ['spinner', 'hidden'],\n                    ]) .\n                    Html::endTag('div');\n\n                return static::fieldHtml($input, [\n                    'fieldClass' => !$visible ? 'hidden' : null,\n                    'label' => $address->getAttributeLabel($name),\n                    'id' => $name,\n                    'required' => $required,\n                    'errors' => $errors,\n                ]);\n            }\n\n            return static::selectizeFieldHtml([\n                'fieldClass' => !$visible ? 'hidden' : null,\n                'label' => $address->getAttributeLabel($name),\n                'id' => $name,\n                'name' => $name,\n                'value' => $value,\n                'options' => $options,\n                'required' => $required,\n                'errors' => $address->getErrors($name),\n            ]);\n        }\n\n        // No preconfigured subdivisions for the given parents, so just output a text input\n        return static::textFieldHtml([\n            'fieldClass' => !$visible ? 'hidden' : null,\n            'label' => $address->getAttributeLabel($name),\n            'id' => $name,\n            'name' => $name,\n            'value' => $value,\n            'required' => $required,\n            'errors' => $address->getErrors($name),\n        ]);\n    }\n\n    /**\n     * Renders a field layout designer.\n     *\n     * @param FieldLayout $fieldLayout\n     * @param array $config\n     * @return string\n     * @since 4.0.0\n     */\n    public static function fieldLayoutDesignerHtml(FieldLayout $fieldLayout, array $config = []): string\n    {\n        $config += [\n            'id' => 'fld' . mt_rand(),\n            'customizableTabs' => true,\n            'customizableUi' => true,\n        ];\n\n        $tabs = array_filter($fieldLayout->getTabs(), fn(FieldLayoutTab $tab) => !empty($tab->getElements()));\n\n        if (!$config['customizableTabs']) {\n            $tab = array_shift($tabs) ?? new FieldLayoutTab([\n                    'uid' => StringHelper::UUID(),\n                    'layout' => $fieldLayout,\n                ]);\n            $tab->name = $config['pretendTabName'] ?? Craft::t('app', 'Content');\n\n            // Any extra tabs?\n            if (!empty($tabs)) {\n                $elements = $tab->getElements();\n                foreach ($tabs as $extraTab) {\n                    array_push($elements, ...$extraTab->getElements());\n                }\n                $tab->setElements($elements);\n            }\n\n            $tabs = [$tab];\n        }\n\n        // Make sure all tabs and their elements have UUIDs\n        // (We do this here instead of from FieldLayoutComponent::init() because the we don't want field layout forms to\n        // get the impression that tabs/elements have persisting UUIDs if they don't.)\n        foreach ($tabs as $tab) {\n            if (!isset($tab->uid)) {\n                $tab->uid = StringHelper::UUID();\n            }\n\n            foreach ($tab->getElements() as $layoutElement) {\n                if (!isset($layoutElement->uid)) {\n                    $layoutElement->uid = StringHelper::UUID();\n                }\n            }\n        }\n\n        $view = Craft::$app->getView();\n        $jsSettings = Json::encode([\n            'customizableTabs' => $config['customizableTabs'],\n            'customizableUi' => $config['customizableUi'],\n        ]);\n        $namespacedId = $view->namespaceInputId($config['id']);\n\n        $js = <<<JS\nnew Craft.FieldLayoutDesigner(\"#$namespacedId\", $jsSettings);\nJS;\n        $view->registerJs($js);\n\n        $availableCustomFields = $fieldLayout->getAvailableCustomFields();\n        $availableNativeFields = $fieldLayout->getAvailableNativeFields();\n        $availableUiElements = $fieldLayout->getAvailableUiElements();\n\n        // Make sure everything has the field layout set properly\n        foreach ($availableCustomFields as $groupFields) {\n            self::_setLayoutOnElements($groupFields, $fieldLayout);\n        }\n        self::_setLayoutOnElements($availableNativeFields, $fieldLayout);\n        self::_setLayoutOnElements($availableUiElements, $fieldLayout);\n\n        // Don't call FieldLayout::getConfig() here because we want to include *all* tabs, not just non-empty ones\n        $fieldLayoutConfig = [\n            'uid' => $fieldLayout->uid,\n            'tabs' => array_map(fn(FieldLayoutTab $tab) => $tab->getConfig(), $tabs),\n        ];\n\n        if ($fieldLayout->id) {\n            $fieldLayoutConfig['id'] = $fieldLayout->id;\n        }\n\n        $newTabSettingsData = self::_fldTabSettingsData(new FieldLayoutTab([\n            'uid' => 'TAB_UID',\n            'name' => 'TAB_NAME',\n            'layout' => $fieldLayout,\n        ]));\n\n        return\n            Html::beginTag('div', [\n                'id' => $config['id'],\n                'class' => 'layoutdesigner',\n                'data' => [\n                    'new-tab-settings-namespace' => $newTabSettingsData['settings-namespace'],\n                    'new-tab-settings-html' => $newTabSettingsData['settings-html'],\n                    'new-tab-settings-js' => $newTabSettingsData['settings-js'],\n                ],\n            ]) .\n            Html::hiddenInput('fieldLayout', Json::encode($fieldLayoutConfig), [\n                'data' => ['config-input' => true],\n            ]) .\n            Html::beginTag('div', ['class' => 'fld-workspace']) .\n            Html::beginTag('div', ['class' => 'fld-tabs']) .\n            implode('', array_map(fn(FieldLayoutTab $tab) => self::_fldTabHtml($tab, $config['customizableTabs']), $tabs)) .\n            Html::endTag('div') . // .fld-tabs\n            ($config['customizableTabs']\n                ? Html::button(Craft::t('app', 'New Tab'), [\n                    'type' => 'button',\n                    'class' => ['fld-new-tab-btn', 'btn', 'add', 'icon'],\n                ])\n                : '') .\n            Html::endTag('div') . // .fld-workspace\n            Html::beginTag('div', ['class' => 'fld-sidebar']) .\n            ($config['customizableUi']\n                ? Html::beginTag('div', [\n                    'role' => 'listbox',\n                    'class' => ['btngroup', 'small', 'fullwidth'],\n                    'aria' => ['label' => Craft::t('app', 'Layout element types')],\n                    'tabindex' => '0',\n                ]) .\n                Html::button(Craft::t('app', 'Fields'), [\n                    'role' => 'option',\n                    'type' => 'button',\n                    'class' => ['btn', 'small', 'active'],\n                    'aria' => ['selected' => 'true'],\n                    'data' => ['library' => 'field'],\n                    'tabindex' => '-1',\n                ]) .\n                Html::button(Craft::t('app', 'UI Elements'), [\n                    'role' => 'option',\n                    'type' => 'button',\n                    'class' => ['btn', 'small'],\n                    'aria' => ['selected' => 'false'],\n                    'data' => ['library' => 'ui'],\n                    'tabindex' => '-1',\n                ]) .\n                Html::endTag('div') // .btngroup\n                : '') .\n            Html::beginTag('div', ['class' => 'fld-field-library']) .\n            Html::beginTag('div', ['class' => ['texticon', 'search', 'icon', 'clearable']]) .\n            static::textHtml([\n                'class' => 'fullwidth',\n                'inputmode' => 'search',\n                'placeholder' => Craft::t('app', 'Search'),\n            ]) .\n            Html::tag('div', '', [\n                'class' => ['clear', 'hidden'],\n                'title' => Craft::t('app', 'Clear'),\n                'aria' => ['label' => Craft::t('app', 'Clear')],\n            ]) .\n            Html::endTag('div') . // .texticon\n            self::_fldFieldSelectorsHtml(Craft::t('app', 'Native Fields'), $availableNativeFields, $fieldLayout) .\n            implode('', array_map(fn(string $groupName) => self::_fldFieldSelectorsHtml($groupName, $availableCustomFields[$groupName], $fieldLayout), array_keys($availableCustomFields))) .\n            Html::endTag('div') . // .fld-field-library\n            ($config['customizableUi']\n                ? Html::beginTag('div', ['class' => ['fld-ui-library', 'hidden']]) .\n                implode('', array_map(fn(FieldLayoutElement $element) => self::_fldElementSelectorHtml($element, true), $availableUiElements)) .\n                Html::endTag('div') // .fld-ui-library\n                : '') .\n            Html::endTag('div') . // .fld-sidebar\n            Html::endTag('div'); // .layoutdesigner\n    }\n\n    /**\n     * @param FieldLayoutElement[] $elements\n     * @param FieldLayout $fieldLayout\n     */\n    private static function _setLayoutOnElements(array $elements, FieldLayout $fieldLayout): void\n    {\n        foreach ($elements as $element) {\n            $element->setLayout($fieldLayout);\n        }\n    }\n\n    /**\n     * @param FieldLayoutTab $tab\n     * @param bool $customizable\n     * @return string\n     */\n    private static function _fldTabHtml(FieldLayoutTab $tab, bool $customizable): string\n    {\n        return\n            Html::beginTag('div', [\n                'class' => 'fld-tab',\n                'data' => array_merge([\n                    'uid' => $tab->uid,\n                ], self::_fldTabSettingsData($tab)),\n            ]) .\n            Html::beginTag('div', ['class' => 'tabs']) .\n            Html::beginTag('div', [\n                'class' => array_filter([\n                    'tab',\n                    'sel',\n                    $customizable ? 'draggable' : null,\n                ]),\n            ]) .\n            Html::tag('span', Html::encode($tab->name)) .\n            ($customizable\n                ? Html::a('', null, [\n                    'role' => 'button',\n                    'class' => ['settings', 'icon'],\n                    'title' => Craft::t('app', 'Edit'),\n                    'aria' => ['label' => Craft::t('app', 'Edit')],\n                ]) :\n                '') .\n            Html::endTag('div') . // .tab\n            Html::endTag('div') . // .tabs\n            Html::beginTag('div', ['class' => 'fld-tabcontent']) .\n            implode('', array_map(fn(FieldLayoutElement $element) => self::_fldElementSelectorHtml($element, false), $tab->getElements())) .\n            Html::endTag('div') . // .fld-tabcontent\n            Html::endTag('div'); // .fld-tab\n    }\n\n    /**\n     * @param FieldLayoutTab $tab\n     * @return array\n     */\n    private static function _fldTabSettingsData(FieldLayoutTab $tab): array\n    {\n        $view = Craft::$app->getView();\n        $oldNamespace = $view->getNamespace();\n        $namespace = $view->namespaceInputName(\"tab-$tab->uid\");\n        $view->setNamespace($namespace);\n        $view->startJsBuffer();\n        $settingsHtml = $view->namespaceInputs($tab->getSettingsHtml());\n        $settingsJs = $view->clearJsBuffer(false);\n        $view->setNamespace($oldNamespace);\n\n        return [\n            'settings-namespace' => $namespace,\n            'settings-html' => $settingsHtml,\n            'settings-js' => $settingsJs,\n        ];\n    }\n\n    /**\n     * @param FieldLayoutElement $element\n     * @param bool $forLibrary\n     * @param array $attr\n     * @return string\n     */\n    private static function _fldElementSelectorHtml(FieldLayoutElement $element, bool $forLibrary, array $attr = []): string\n    {\n        if ($element instanceof BaseField) {\n            $attr = ArrayHelper::merge($attr, [\n                'class' => !$forLibrary && $element->required ? ['fld-required'] : [],\n                'data' => [\n                    'keywords' => $forLibrary ? implode(' ', array_map('mb_strtolower', $element->keywords())) : false,\n                ],\n            ]);\n        }\n\n        $view = Craft::$app->getView();\n        $oldNamespace = $view->getNamespace();\n        $namespace = $view->namespaceInputName('element-' . ($forLibrary ? 'ELEMENT_UID' : $element->uid));\n        $view->setNamespace($namespace);\n        $view->startJsBuffer();\n        $settingsHtml = $view->namespaceInputs($element->getSettingsHtml());\n        $settingsJs = $view->clearJsBuffer(false);\n        $view->setNamespace($oldNamespace);\n\n        $attr = ArrayHelper::merge($attr, [\n            'class' => array_filter([\n                'fld-element',\n                $forLibrary ? 'unused' : null,\n                !$forLibrary && $element->hasConditions() ? 'has-conditions' : null,\n            ]),\n            'data' => [\n                'uid' => !$forLibrary ? $element->uid : false,\n                'config' => $forLibrary ? ['type' => get_class($element)] + $element->toArray() : false,\n                'has-custom-width' => $element->hasCustomWidth(),\n                'settings-namespace' => $namespace,\n                'settings-html' => $settingsHtml ?: false,\n                'settings-js' => $settingsJs ?: false,\n            ],\n        ]);\n\n        return Html::modifyTagAttributes($element->selectorHtml(), $attr);\n    }\n\n    /**\n     * @param string $groupName\n     * @param BaseField[] $groupFields\n     * @param FieldLayout $fieldLayout\n     * @return string\n     */\n    private static function _fldFieldSelectorsHtml(string $groupName, array $groupFields, FieldLayout $fieldLayout): string\n    {\n        $showGroup = ArrayHelper::contains($groupFields, fn(BaseField $field) => !$fieldLayout->isFieldIncluded($field->attribute()));\n\n        return\n            Html::beginTag('div', [\n                'class' => array_filter([\n                    'fld-field-group',\n                    $showGroup ? null : 'hidden',\n                ]),\n                'data' => ['name' => mb_strtolower($groupName)],\n            ]) .\n            Html::tag('h6', Html::encode($groupName)) .\n            implode('', array_map(fn(BaseField $field) => self::_fldElementSelectorHtml($field, true, [\n                'class' => array_filter([\n                    $fieldLayout->isFieldIncluded($field->attribute()) ? 'hidden' : null,\n                ]),\n            ]), $groupFields)) .\n            Html::endTag('div'); // .fld-field-group\n    }\n\n    /**\n     * Returns a metadata component\u2019s HTML.\n     *\n     * @param array $data The data, with keys representing the labels. The values can either be strings or callables.\n     * If a value is `false`, it will be omitted.\n     * @return string\n     */\n    public static function metadataHtml(array $data): string\n    {\n        $defs = [];\n\n        foreach ($data as $label => $value) {\n            if (is_callable($value)) {\n                $value = $value();\n            }\n            if ($value !== false) {\n                $defs[] =\n                    Html::beginTag('div', [\n                        'class' => 'data',\n                    ]) .\n                    Html::tag('dt', Html::encode($label), ['class' => 'heading']) . \"\\n\" .\n                    Html::tag('dd', $value, ['class' => 'value']) . \"\\n\" .\n                    Html::endTag('div');\n            }\n        }\n\n        if (empty($defs)) {\n            return '';\n        }\n\n        return Html::tag('dl', implode(\"\\n\", $defs), [\n            'class' => ['meta', 'read-only'],\n        ]);\n    }\n\n    /**\n     * Returns the site the control panel is currently working with, via a `site` query string param if sent.\n     *\n     * @return Site|null The site, or `null` if the user doesn\u2019t have permission to edit any sites.\n     * @since 4.0.0\n     */\n    public static function requestedSite(): ?Site\n    {\n        if (!isset(self::$_requestedSite)) {\n            $sitesService = Craft::$app->getSites();\n            $editableSiteIds = $sitesService->getEditableSiteIds();\n\n            if (!empty($editableSiteIds)) {\n                $request = Craft::$app->getRequest();\n                if (\n                    !$request->getIsConsoleRequest() &&\n                    ($handle = $request->getQueryParam('site')) !== null &&\n                    ($site = $sitesService->getSiteByHandle($handle, true)) !== null &&\n                    in_array($site->id, $editableSiteIds, false)\n                ) {\n                    self::$_requestedSite = $site;\n                } else {\n                    self::$_requestedSite = $sitesService->getCurrentSite();\n\n                    if (!in_array(self::$_requestedSite->id, $editableSiteIds, false)) {\n                        // Just go with the first editable site\n                        self::$_requestedSite = $sitesService->getSiteById($editableSiteIds[0]);\n                    }\n                }\n            } else {\n                self::$_requestedSite = false;\n            }\n        }\n\n        return self::$_requestedSite ?: null;\n    }\n}\n", "{% requireAdmin %}\n\n{% extends \"_layouts/cp\" %}\n{% set title = \"Fields\"|t('app') %}\n\n{% do view.registerAssetBundle(\"craft\\\\web\\\\assets\\\\fields\\\\FieldsAsset\") %}\n{% do view.registerAssetBundle('craft\\\\web\\\\assets\\\\admintable\\\\AdminTableAsset') -%}\n\n{% do view.registerTranslations('app', [\n    \"What do you want to name the group?\",\n    \"Could not create the group:\",\n    \"Could not create the group:\",\n    \"Are you sure you want to delete this group and all its fields?\",\n    \"Could not delete the group.\",\n    \"Group renamed.\",\n    \"Name\",\n    \"Handle\",\n    \"Type\",\n    \"Group\",\n    \"This field\u2019s values are used as search keywords.\",\n    \"This group doesn\u2019t have any fields yet.\",\n    \"No fields exist yet.\",\n]) %}\n\n{% set crumbs = [\n    { label: \"Settings\"|t('app'), url: url('settings') }\n] %}\n\n{% set groups = craft.app.fields.getAllGroups()|index('id') %}\n\n{% if groupId is defined %}\n    {% if groups[groupId] is not defined %}\n        {% exit 404 %}\n    {% endif %}\n\n    {% set fields = groups[groupId].getFields() %}\n    {% set emptyMessage = \"This group doesn\u2019t have any fields yet.\"|t('app') %}\n{% else %}\n    {% set emptyMessage = \"No fields exist yet.\"|t('app') %}\n    {% set fields = craft.app.fields.getAllFields() %}\n{% endif %}\n\n\n{% block actionButton %}\n    {% if groups %}\n        {% set newFieldUrl = url('settings/fields/new', (groupId is defined ? { groupId: groupId } : null)) %}\n        <a href=\"{{ newFieldUrl }}\" class=\"submit btn add icon\">{{ \"New field\"|t('app') }}</a>\n    {% endif %}\n{% endblock %}\n\n\n{% block sidebar %}\n    <nav>\n        <ul id=\"groups\">\n            <li><a href=\"{{ url('settings/fields') }}\"{% if groupId is not defined %} class=\"sel\"{% endif %}>{{ \"All Fields\"|t('app') }}</a></li>\n            {% for group in groups %}\n                <li><a href=\"{{ url('settings/fields/'~group.id) }}\"{% if groupId is defined and group.id == groupId %} class=\"sel\"{% endif %} data-id=\"{{ group.id }}\">{{ group.name|t('site') }}</a></li>\n            {% endfor %}\n        </ul>\n    </nav>\n\n    <div class=\"buttons\">\n        <button type=\"button\" id=\"newgroupbtn\" class=\"btn add icon\">{{ \"New group\"|t('app') }}</button>\n\n        {% if groupId is defined %}\n            <button type=\"button\" id=\"groupsettingsbtn\" class=\"btn settings icon menubtn\" title=\"{{ 'Settings'|t('app') }}\" aria-label=\"{{ 'Settings'|t('app') }}\"></button>\n            <div class=\"menu\">\n                <ul>\n                    <li><a data-action=\"rename\" role=\"button\">{{ \"Rename selected group\"|t('app') }}</a></li>\n                    <li><a data-action=\"delete\" role=\"button\">{{ \"Delete selected group\"|t('app') }}</a></li>\n                </ul>\n            </div>\n        {% endif %}\n    </div>\n{% endblock %}\n\n\n{% block content %}\n    <div id=\"fields-vue-admin-table\"></div>\n{% endblock %}\n\n{% set tableData = [] %}\n{% for field in fields %}\n    {% set fieldIsMissing = false %}\n\n    {% if field is missing %}\n        {% set fieldIsMissing = true %}\n    {% endif %}\n\n    {% set group = field.getGroup() %}\n\n    {% set tableData = tableData|merge([{\n        id: field.id,\n        title: field.name|t('site'),\n        translatable: field.getIsTranslatable() ? (field.getTranslationDescription() ?? 'This field is translatable.'|t('app')),\n        searchable: field.searchable ? true : false,\n        url: url('settings/fields/edit/' ~ field.id),\n        handle: field.handle,\n        type: {\n            isMissing: fieldIsMissing,\n            label: fieldIsMissing ? field.expectedType : field.displayName()\n        },\n        group: group ? group.name|t('site')|e : \"<span class=\\\"error\\\">#{'(Ungrouped)'|t('app')}</span>\",\n    }]) %}\n{% endfor %}\n\n{% js %}\n    var columns = [\n        { name: '__slot:title', title: Craft.t('app', 'Name') },\n        {\n            name: 'searchable',\n            titleClass: 'thin',\n            callback: value => {\n                if (!value) {\n                    return null;\n                }\n                return `<div class=\"badge-icon\" data-icon=\"search\" title=\"${Craft.t('app', 'This field\u2019s values are used as search keywords.')}\" aria-label=\"${Craft.t('app', 'This field\u2019s values are used as search keywords.')}\"></div>`;\n            }\n        },\n        {% if craft.app.isMultiSite %}\n        {\n            name: 'translatable',\n            titleClass: 'thin',\n            callback: value => {\n                if (!value) {\n                    return null;\n                }\n                return `<div class=\"badge-icon\" data-icon=\"language\" title=\"${value}\" aria-label=\"${value}\"></div>`;\n            }\n        },\n        {% endif %}\n        { name: '__slot:handle', title: Craft.t('app', 'Handle') },\n        {\n            name: 'type',\n            title: Craft.t('app', 'Type'),\n            callback: function(value) {\n                if (value.isMissing) {\n                    return '<span class=\"error\">' + value.label + '</span>'\n                }\n\n                return value.label\n            }\n        },\n    ];\n\n    {% if groupId is not defined %}\n        columns.push({\n            name: 'group',\n            title: Craft.t('app', 'Group'),\n        })\n    {% endif %}\n\n    new Craft.VueAdminTable({\n        columns: columns,\n        container: '#fields-vue-admin-table',\n        deleteAction: 'fields/delete-field',\n        emptyMessage: Craft.t('app', '{{ emptyMessage }}'),\n        tableData: {{ tableData|json_encode|raw }},\n    });\n{% endjs %}\n"], "filenames": ["CHANGELOG.md", "src/helpers/Cp.php", "src/templates/settings/fields/index.twig"], "buggy_code_start_loc": [21, 1623, 103], "buggy_code_end_loc": [22, 1726, 104], "fixing_code_start_loc": [21, 1623, 103], "fixing_code_end_loc": [22, 1726, 104], "type": "CWE-79", "message": "Craft CMS 4.2.0.1 is vulnerable to stored a cross-site scripting (XSS) via /admin/settings/fields page.", "other": {"cve": {"id": "CVE-2022-37247", "sourceIdentifier": "cve@mitre.org", "published": "2022-09-16T22:15:12.017", "lastModified": "2022-09-21T15:39:50.187", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Craft CMS 4.2.0.1 is vulnerable to stored a cross-site scripting (XSS) via /admin/settings/fields page."}, {"lang": "es", "value": "Craft CMS versi\u00f3n 4.2.0.1, es vulnerable a un ataque de tipo cross-site scripting (XSS) almacenado por medio de la p\u00e1gina /admin/settings/fields"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:craftcms:craft_cms:4.2.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "3AFD2A34-547A-4DFE-A60A-2A4032CC8BC7"}]}]}], "references": [{"url": "https://github.com/craftcms/cms/commit/cedeba0609e4b173cd584dae7f33c5f713f19627", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://labs.integrity.pt/advisories/cve-2022-37247/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/craftcms/cms/commit/cedeba0609e4b173cd584dae7f33c5f713f19627"}}