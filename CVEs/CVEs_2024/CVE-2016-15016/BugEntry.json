{"buggy_code": ["<?php\ndefined('_JEXEC') or die('Restricted Access');\n\nclass modEinsatzStatsHelper {\n\n\tpublic static function getNext() {\n\t\t$avg = self::executeQuery(self::$qMeanTime) * 60;\t// value in seconds\n\t\t// can be NULL if MIN(date1) is 0000-00-00\n\t\tif ($avg == 0) return false;\n\t\t$last = self::executeQuery(self::$qLatestTimestamp);\t// timestamp format: YYYY-MM-DD HH:MM:SS\n\t\t$next = strtotime($last.' + '.$avg.' seconds');\t// unix timestamp in integer\n\t\twhile ($next < time()) {\n\t\t\t$next = $next + $avg;\n\t\t}\n\t\treturn $next;\n\t}\n\n\tpublic static function getStatsByType($year) {\n\t\t$latest = substr(self::executeQuery(self::$qLatestTimestamp), 0, 4);\n\t\tif (($year > $latest) or !(ctype_digit($year)))\n\t\t\t$year = $latest;\n\n\t\t$query =\n\t\t\t'SELECT arten.title AS label,\n\t\t\t\tcount(data1) AS value,\n\t\t\t\tarten.marker AS color\n\t\t\tFROM #__eiko_einsatzberichte AS berichte\n\t\t\tINNER JOIN #__eiko_einsatzarten AS arten\n\t\t\tON berichte.data1=arten.id\n\t\t\tWHERE berichte.state=1 AND berichte.date1 LIKE \\''.$year.'%\\'\n\t\t\tGROUP BY data1\n\t\t\tORDER BY arten.ordering;';\n\t\t\t//TODO mucho importante: Prevent SQL injection\n\t\t$result = self::executeQuery($query, 1);\n\t\tforeach ($result as $i) {\n\t\t\t$i->highlight = $i->color;\n\t\t\t//chart.js needs values as integers\n\t\t\t$i->value = intval($i->value);\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic static function getAjax() {\n\t\t// get data from Ajax request\n\t\t$input = JFactory::getApplication()->input;\n\t\t$data = $input->get('data');\n\n\t\treturn json_encode(self::getStatsByType($data));\n\t}\n\n\t// All the SQL queries\n\tprivate static $qMeanTime = '\tSELECT\n  \t\t\t\t\t\t\t\t\t\tCASE\n\t\t\t\t\t\t\t\t\t\t\tWHEN COUNT(date1) < 2 THEN 0\n\t\t\t\t\t\t\t\t\t\t\tELSE ROUND(\n\t\t\t\t\t\t\t\t\t\t\t\tTIMESTAMPDIFF(\n\t\t\t\t\t\t\t\t\t\t\t    MINUTE,\n    \t\t\t\t\t\t\t\t\t\t\tMIN(date1),\n\t\t\t\t\t\t\t\t\t\t\t\tMAX(date1)) / (COUNT(date1)-1))\n\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\tas mean_time\n\t\t\t\t\t\t\t\t\tFROM #__eiko_einsatzberichte\t';\n\n\tprivate static $qLatestTimestamp = 'SELECT MAX(date1) FROM #__eiko_einsatzberichte';\n\n/*\tpublic function getNextType($next) {\n\t\t$query = 'SELECT MAX(id) FROM #__reports_data';\n\t\t$j = self::query($query);\n\t\t$results = array();\n\t\tfor ($i = 0; $i < $j; $i++) {\n\t\t\t$query = 'SELECT\n  \t\t\t\tCASE\n\t\t\t\t\tWHEN COUNT(date1) < 2 THEN 0\n\t\t\t\t\tELSE ROUND(\n\t\t\t\t\t\tTIMESTAMPDIFF(\n\t\t\t\t\t    MINUTE,\n    \t\t\t\t\tMIN(date1),\n\t\t\t\t\t\tMAX(date1)) / (COUNT(date1)-1))\n\t\t\t\tEND\n\t\t\t\tas mean_time\n\t\t\tFROM #__reports WHERE data1 = (SELECT title FROM #__reports_data WHERE id = '.$i.')';\n\t\t\t$results[$i] = self::query($query);\n\t\t}\n\t\treturn $results;\n\t}\n*/\n\tprivate static function executeQuery($query, $returnArray=0) {\n\t\t$db = JFactory::getDBO();\n\t\t$db->setQuery($query);\n\t\tif ($returnArray)\n\t\t\t$result = $db->loadObjectList();\n\t\telse\n\t\t\t$result = $db->loadResult();\n\t\treturn $result;\n\t}\n}\n"], "fixing_code": ["<?php\ndefined('_JEXEC') or die('Restricted Access');\n\nclass modEinsatzStatsHelper {\n\n\tpublic static function getNext() {\n\t\t$avg = self::executeQuery(self::$qMeanTime) * 60;\t// value in seconds\n\t\t// can be NULL if MIN(date1) is 0000-00-00\n\t\tif ($avg == 0) return false;\n\t\t$last = self::executeQuery(self::$qLatestTimestamp);\t// timestamp format: YYYY-MM-DD HH:MM:SS\n\t\t$next = strtotime($last.' + '.$avg.' seconds');\t// unix timestamp in integer\n\t\twhile ($next < time()) {\n\t\t\t$next = $next + $avg;\n\t\t}\n\t\treturn $next;\n\t}\n\n\tpublic static function getStatsByType($year) {\n\t\t$latest = substr(self::executeQuery(self::$qLatestTimestamp), 0, 4);\n\t\tif (($year > $latest) or !(ctype_digit($year)))\n\t\t\t$year = $latest;\n\n\t\t$db = JFactory::getDbo();\n\t\t$query =\n\t\t\t'SELECT arten.title AS label,\n\t\t\t\tcount(data1) AS value,\n\t\t\t\tarten.marker AS color\n\t\t\tFROM #__eiko_einsatzberichte AS berichte\n\t\t\tINNER JOIN #__eiko_einsatzarten AS arten\n\t\t\tON berichte.data1=arten.id\n\t\t\tWHERE berichte.state=1 AND berichte.date1 LIKE '.$db->quote($year.'%').'\n\t\t\tGROUP BY data1\n\t\t\tORDER BY arten.ordering;';\n\t\t$result = self::executeQuery($query, 1);\n\t\tforeach ($result as $i) {\n\t\t\t$i->highlight = $i->color;\n\t\t\t//chart.js needs values as integers\n\t\t\t$i->value = intval($i->value);\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic static function getAjax() {\n\t\t// get data from Ajax request\n\t\t$input = JFactory::getApplication()->input;\n\t\t// only allow unsigned integers\n\t\t$data = $input->get('data', date('Y'), 'UINT');\n\n\t\treturn json_encode(self::getStatsByType($data));\n\t}\n\n\t// All the SQL queries\n\tprivate static $qMeanTime = '\tSELECT\n  \t\t\t\t\t\t\t\t\t\tCASE\n\t\t\t\t\t\t\t\t\t\t\tWHEN COUNT(date1) < 2 THEN 0\n\t\t\t\t\t\t\t\t\t\t\tELSE ROUND(\n\t\t\t\t\t\t\t\t\t\t\t\tTIMESTAMPDIFF(\n\t\t\t\t\t\t\t\t\t\t\t    MINUTE,\n    \t\t\t\t\t\t\t\t\t\t\tMIN(date1),\n\t\t\t\t\t\t\t\t\t\t\t\tMAX(date1)) / (COUNT(date1)-1))\n\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t\tas mean_time\n\t\t\t\t\t\t\t\t\tFROM #__eiko_einsatzberichte\t';\n\n\tprivate static $qLatestTimestamp = 'SELECT MAX(date1) FROM #__eiko_einsatzberichte';\n\n/*\tpublic function getNextType($next) {\n\t\t$query = 'SELECT MAX(id) FROM #__reports_data';\n\t\t$j = self::query($query);\n\t\t$results = array();\n\t\tfor ($i = 0; $i < $j; $i++) {\n\t\t\t$query = 'SELECT\n  \t\t\t\tCASE\n\t\t\t\t\tWHEN COUNT(date1) < 2 THEN 0\n\t\t\t\t\tELSE ROUND(\n\t\t\t\t\t\tTIMESTAMPDIFF(\n\t\t\t\t\t    MINUTE,\n    \t\t\t\t\tMIN(date1),\n\t\t\t\t\t\tMAX(date1)) / (COUNT(date1)-1))\n\t\t\t\tEND\n\t\t\t\tas mean_time\n\t\t\tFROM #__reports WHERE data1 = (SELECT title FROM #__reports_data WHERE id = '.$i.')';\n\t\t\t$results[$i] = self::query($query);\n\t\t}\n\t\treturn $results;\n\t}\n*/\n\tprivate static function executeQuery($query, $returnArray=0) {\n\t\t$db = JFactory::getDBO();\n\t\t$db->setQuery($query);\n\t\tif ($returnArray)\n\t\t\t$result = $db->loadObjectList();\n\t\telse\n\t\t\t$result = $db->loadResult();\n\t\treturn $result;\n\t}\n}\n"], "filenames": ["helper.php"], "buggy_code_start_loc": [22], "buggy_code_end_loc": [47], "fixing_code_start_loc": [23], "fixing_code_end_loc": [48], "type": "CWE-89", "message": "A vulnerability was found in mrtnmtth joomla_mod_einsatz_stats up to 0.2. It has been classified as critical. This affects the function getStatsByType of the file helper.php. The manipulation of the argument year leads to sql injection. Upgrading to version 0.3 is able to address this issue. The name of the patch is 27c1b443cff45c81d9d7d926a74c76f8b6ffc6cb. It is recommended to upgrade the affected component. The identifier VDB-217653 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2016-15016", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-08T18:15:10.117", "lastModified": "2023-01-12T23:39:44.593", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in mrtnmtth joomla_mod_einsatz_stats up to 0.2. It has been classified as critical. This affects the function getStatsByType of the file helper.php. The manipulation of the argument year leads to sql injection. Upgrading to version 0.3 is able to address this issue. The name of the patch is 27c1b443cff45c81d9d7d926a74c76f8b6ffc6cb. It is recommended to upgrade the affected component. The identifier VDB-217653 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:joomla_mod_einsatz_stats_project:joomla_mod_einsatz_stats:*:*:*:*:*:joomla\\!:*:*", "versionEndExcluding": "0.3", "matchCriteriaId": "7B69EB9D-0571-4F2B-A2F2-76D01625292B"}]}]}], "references": [{"url": "https://github.com/mrtnmtth/joomla_mod_einsatz_stats/commit/27c1b443cff45c81d9d7d926a74c76f8b6ffc6cb", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mrtnmtth/joomla_mod_einsatz_stats/releases/tag/v0.3", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217653", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217653", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mrtnmtth/joomla_mod_einsatz_stats/commit/27c1b443cff45c81d9d7d926a74c76f8b6ffc6cb"}}