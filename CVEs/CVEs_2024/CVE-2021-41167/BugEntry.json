{"buggy_code": ["\nimport mapLimit from './mapLimit.mjs'\n\n/**\n * Calls a function on each element of iterable.\n *\n * Multiple calls to `iteratee` will be performed in parallel, up to the concurrency limit.\n *\n * If any of the calls to iteratee throws an exception the returned promise will be rejected and the remaining\n * pending tasks will be cancelled.\n *\n * @param {Iterable} iterable An iterable object.\n * @param {Function} iteratee A function that will be called with each member of the iterable. It will receive\n * three arguments:\n *   * `value`: The current value to process\n *   * `index`: The index in the iterable. Will start from 0.\n *   * `iterable`: The iterable on which the operation is being performed.\n * @param {number} concurrency The number of times iteratee can be called concurrently.\n * @returns {Promise} A promise that will be resolved when all the calls to `iteratee` have been done.\n * This promise will be rejected if any call to `iteratee` throws an exception.\n * @example\n * import { forEachLimit, asyncRoot, sleep } from 'modern-async'\n *\n * asyncRoot(async () => {\n *   const array = [1, 2, 3]\n *   await forEachLimit(array, async (v) => {\n *     // these calls will be performed in parallel with a maximum of 2\n *     // concurrent calls\n *     await sleep(Math.random() * 10) // waits a random amount of time between 0ms and 10ms\n *     console.log(v)\n *   }, 2)\n *   // prints 1, 2 and 3 in a random order (it will always print 1 or 2 before printing 3 due to\n *   // the concurrency limit and the internal scheduling order)\n * })\n */\nasync function forEachLimit (iterable, iteratee, concurrency) {\n  await mapLimit(iterable, async (v, i, t) => {\n    iteratee(v, i, t)\n  }, concurrency)\n}\n\nexport default forEachLimit\n"], "fixing_code": ["\nimport mapLimit from './mapLimit.mjs'\n\n/**\n * Calls a function on each element of iterable.\n *\n * Multiple calls to `iteratee` will be performed in parallel, up to the concurrency limit.\n *\n * If any of the calls to iteratee throws an exception the returned promise will be rejected and the remaining\n * pending tasks will be cancelled.\n *\n * @param {Iterable} iterable An iterable object.\n * @param {Function} iteratee A function that will be called with each member of the iterable. It will receive\n * three arguments:\n *   * `value`: The current value to process\n *   * `index`: The index in the iterable. Will start from 0.\n *   * `iterable`: The iterable on which the operation is being performed.\n * @param {number} concurrency The number of times iteratee can be called concurrently.\n * @returns {Promise} A promise that will be resolved when all the calls to `iteratee` have been done.\n * This promise will be rejected if any call to `iteratee` throws an exception.\n * @example\n * import { forEachLimit, asyncRoot, sleep } from 'modern-async'\n *\n * asyncRoot(async () => {\n *   const array = [1, 2, 3]\n *   await forEachLimit(array, async (v) => {\n *     // these calls will be performed in parallel with a maximum of 2\n *     // concurrent calls\n *     await sleep(Math.random() * 10) // waits a random amount of time between 0ms and 10ms\n *     console.log(v)\n *   }, 2)\n *   // prints 1, 2 and 3 in a random order (it will always print 1 or 2 before printing 3 due to\n *   // the concurrency limit and the internal scheduling order)\n * })\n */\nasync function forEachLimit (iterable, iteratee, concurrency) {\n  await mapLimit(iterable, async (v, i, t) => {\n    await iteratee(v, i, t)\n  }, concurrency)\n}\n\nexport default forEachLimit\n"], "filenames": ["src/forEachLimit.mjs"], "buggy_code_start_loc": [38], "buggy_code_end_loc": [39], "fixing_code_start_loc": [38], "fixing_code_end_loc": [39], "type": "CWE-770", "message": "modern-async is an open source JavaScript tooling library for asynchronous operations using async/await and promises. In affected versions a bug affecting two of the functions in this library: forEachSeries and forEachLimit. They should limit the concurrency of some actions but, in practice, they don't. Any code calling these functions will be written thinking they would limit the concurrency but they won't. This could lead to potential security issues in other projects. The problem has been patched in 1.0.4. There is no workaround.", "other": {"cve": {"id": "CVE-2021-41167", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-20T19:15:07.570", "lastModified": "2022-08-12T14:48:21.893", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "modern-async is an open source JavaScript tooling library for asynchronous operations using async/await and promises. In affected versions a bug affecting two of the functions in this library: forEachSeries and forEachLimit. They should limit the concurrency of some actions but, in practice, they don't. Any code calling these functions will be written thinking they would limit the concurrency but they won't. This could lead to potential security issues in other projects. The problem has been patched in 1.0.4. There is no workaround."}, {"lang": "es", "value": "modern-async es una biblioteca de herramientas de JavaScript de c\u00f3digo abierto para operaciones as\u00edncronas usando async/await y promesas. En las versiones afectadas se ha detectado un error que afecta a dos de las funciones de esta biblioteca: forEachSeries y forEachLimit. Deber\u00edan limitar la concurrencia de algunas acciones pero, en la pr\u00e1ctica, no lo hacen. Cualquier c\u00f3digo que llame a estas funciones se escribir\u00e1 pensando que limitar\u00e1n la concurrencia pero no lo har\u00e1n. Esto podr\u00eda conllevar a posibles problemas de seguridad en otros proyectos. El problema ha sido parcheado en la versi\u00f3n 1.0.4. No se presenta ninguna soluci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-770"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:modern-async_project:modern-async:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.0.4", "matchCriteriaId": "8342CAB0-7958-4083-BFBE-643DDB7E9E2A"}]}]}], "references": [{"url": "https://github.com/nicolas-van/modern-async/commit/0010d28de1b15d51db3976080e26357fa7144436", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nicolas-van/modern-async/issues/5", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/nicolas-van/modern-async/security/advisories/GHSA-3pcq-34w5-p4g2", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nicolas-van/modern-async/commit/0010d28de1b15d51db3976080e26357fa7144436"}}