{"buggy_code": ["/*\n    RawSpeed - RAW file decoder.\n\n    Copyright (C) 2009-2014 Klaus Post\n    Copyright (C) 2017 Roman Lebedev\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n*/\n\n#include \"common/TableLookUp.h\"\n#include \"decoders/RawDecoderException.h\" // for RawDecoderException (ptr o...\n#include <cassert>                        // for assert\n\nnamespace rawspeed {\n\nconst int TABLE_SIZE = 65536 * 2;\n\n// Creates n numre of tables.\nTableLookUp::TableLookUp(int _ntables, bool _dither)\n    : ntables(_ntables), dither(_dither) {\n  if (ntables < 1) {\n    ThrowRDE(\"Cannot construct 0 tables\");\n  }\n  tables.resize(ntables * TABLE_SIZE, ushort16(0));\n}\n\nvoid TableLookUp::setTable(int ntable, const std::vector<ushort16>& table) {\n  assert(!table.empty());\n\n  const int nfilled = table.size();\n\n  if (ntable > ntables) {\n    ThrowRDE(\"Table lookup with number greater than number of tables.\");\n  }\n  ushort16* t = &tables[ntable * TABLE_SIZE];\n  if (!dither) {\n    for (int i = 0; i < 65536; i++) {\n      t[i] = (i < nfilled) ? table[i] : table[nfilled - 1];\n    }\n    return;\n  }\n  for (int i = 0; i < nfilled; i++) {\n    int center = table[i];\n    int lower = i > 0 ? table[i - 1] : center;\n    int upper = i < (nfilled - 1) ? table[i + 1] : center;\n    int delta = upper - lower;\n    t[i * 2] = center - ((upper - lower + 2) / 4);\n    t[i * 2 + 1] = delta;\n  }\n\n  for (int i = nfilled; i < 65536; i++) {\n    t[i * 2] = table[nfilled - 1];\n    t[i * 2 + 1] = 0;\n  }\n  t[0] = t[1];\n  t[TABLE_SIZE - 1] = t[TABLE_SIZE - 2];\n}\n\nushort16* TableLookUp::getTable(int n) {\n  if (n > ntables) {\n    ThrowRDE(\"Table lookup with number greater than number of tables.\");\n  }\n  return &tables[n * TABLE_SIZE];\n}\n\n} // namespace rawspeed\n"], "fixing_code": ["/*\n    RawSpeed - RAW file decoder.\n\n    Copyright (C) 2009-2014 Klaus Post\n    Copyright (C) 2017 Roman Lebedev\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n*/\n\n#include \"common/TableLookUp.h\"\n#include \"decoders/RawDecoderException.h\" // for RawDecoderException (ptr o...\n#include <cassert>                        // for assert\n\nnamespace rawspeed {\n\nconst int TABLE_SIZE = 65536 * 2;\n\n// Creates n numre of tables.\nTableLookUp::TableLookUp(int _ntables, bool _dither)\n    : ntables(_ntables), dither(_dither) {\n  if (ntables < 1) {\n    ThrowRDE(\"Cannot construct 0 tables\");\n  }\n  tables.resize(ntables * TABLE_SIZE, ushort16(0));\n}\n\nvoid TableLookUp::setTable(int ntable, const std::vector<ushort16>& table) {\n  assert(!table.empty());\n\n  const int nfilled = table.size();\n  if (nfilled >= 65536)\n    ThrowRDE(\"Table lookup with %i entries is unsupported\", nfilled);\n\n  if (ntable > ntables) {\n    ThrowRDE(\"Table lookup with number greater than number of tables.\");\n  }\n  ushort16* t = &tables[ntable * TABLE_SIZE];\n  if (!dither) {\n    for (int i = 0; i < 65536; i++) {\n      t[i] = (i < nfilled) ? table[i] : table[nfilled - 1];\n    }\n    return;\n  }\n  for (int i = 0; i < nfilled; i++) {\n    int center = table[i];\n    int lower = i > 0 ? table[i - 1] : center;\n    int upper = i < (nfilled - 1) ? table[i + 1] : center;\n    int delta = upper - lower;\n    t[i * 2] = center - ((upper - lower + 2) / 4);\n    t[i * 2 + 1] = delta;\n  }\n\n  for (int i = nfilled; i < 65536; i++) {\n    t[i * 2] = table[nfilled - 1];\n    t[i * 2 + 1] = 0;\n  }\n  t[0] = t[1];\n  t[TABLE_SIZE - 1] = t[TABLE_SIZE - 2];\n}\n\nushort16* TableLookUp::getTable(int n) {\n  if (n > ntables) {\n    ThrowRDE(\"Table lookup with number greater than number of tables.\");\n  }\n  return &tables[n * TABLE_SIZE];\n}\n\n} // namespace rawspeed\n"], "filenames": ["src/librawspeed/common/TableLookUp.cpp"], "buggy_code_start_loc": [42], "buggy_code_end_loc": [42], "fixing_code_start_loc": [43], "fixing_code_end_loc": [45], "type": "CWE-787", "message": "RawSpeed (aka librawspeed) 3.1 has a heap-based buffer overflow in TableLookUp::setTable.", "other": {"cve": {"id": "CVE-2018-25017", "sourceIdentifier": "cve@mitre.org", "published": "2021-07-01T03:15:07.477", "lastModified": "2021-07-06T20:19:49.957", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "RawSpeed (aka librawspeed) 3.1 has a heap-based buffer overflow in TableLookUp::setTable."}, {"lang": "es", "value": "RawSpeed (tambi\u00e9n se conoce como librawspeed) versi\u00f3n 3.1 presenta un desbordamiento de b\u00fafer en la regi\u00f3n heap de la memoria en la funci\u00f3n TableLookUp::setTable"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rawspeed:rawspeed:3.1:*:*:*:*:*:*:*", "matchCriteriaId": "1F14CE12-885C-4216-B05D-741679EB468F"}]}]}], "references": [{"url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5256", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/darktable-org/rawspeed/commit/dbe7591e54bad5e6430d38be6bed051582da76b9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/google/oss-fuzz-vulns/blob/main/vulns/librawspeed/OSV-2018-227.yaml", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/darktable-org/rawspeed/commit/dbe7591e54bad5e6430d38be6bed051582da76b9"}}