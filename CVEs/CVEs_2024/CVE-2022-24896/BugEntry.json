{"buggy_code": ["<?php\n/**\n * Copyright (c) Enalean, 2014-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Project\\MappingRegistry;\n\nclass GraphOnTrackersV5_ChartFactory\n{\n    public const CHART_REMOVED = 'removed';\n    public const MAPPING_KEY   = 'plugin_graphontrackers_chart_mapping';\n\n    protected $charts;\n    protected $chart_factories;\n\n    protected function __construct()\n    {\n        $this->charts          = null;\n        $this->chart_factories = [];\n        $em                    = EventManager::instance();\n        $em->processEvent('graphontrackersv5_load_chart_factories', ['factories' => &$this->chart_factories]);\n    }\n\n    /**\n     * Hold an instance of the class\n     * @var self|null\n     */\n    protected static $_instance;\n\n    /**\n     * @return GraphOnTrackersV5_ChartFactory\n     */\n    public static function instance()\n    {\n        if (! isset(self::$_instance)) {\n            self::$_instance = new self();\n        }\n        return self::$_instance;\n    }\n\n    public function getCharts($renderer, $store_in_session = true)\n    {\n        if (! isset($this->charts[$renderer->id])) {\n            $charts_data                 = [];\n            $this->charts[$renderer->id] = [];\n            if ($store_in_session) {\n                $this->report_session = new Tracker_Report_Session($renderer->report->id);\n                $this->report_session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n\n                $charts_data = $this->report_session->get(\"charts\");\n            }\n            //do we have charts in session?\n            if (empty($charts_data)) {\n                //No?! Retrieve them from the db!\n                $charts_data = $this->getChartsFromDb($renderer);\n                //$dao = new GraphOnTrackers_ChartDao(CodendiDataAccess::instance());\n                //$charts_data = $dao->searchByReportId($renderer->id);\n            } else {\n                uasort($charts_data, [$this, 'sortArrayByRank']);\n                if ($store_in_session) {\n                    $this->report_session->set(\"charts\", $charts_data);\n                }\n            }\n            if ($charts_data) {\n                foreach ($charts_data as $row) {\n                    if ($row !== self::CHART_REMOVED) {\n                        if ($c = $this->instanciateChart($row, $renderer, $store_in_session)) {\n                            $this->charts[$renderer->id][$row['id']] = $c;\n                        }\n                        if ($store_in_session) {\n                            //Add in session\n                            foreach ($row as $key => $value) {\n                                $this->report_session->set(\"charts.{$row['id']}.$key\", $value);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return $this->charts[$renderer->id];\n    }\n\n    public function forceChartsRankInSession(\n        GraphOnTrackersV5_Renderer $renderer,\n        GraphOnTrackersV5_Chart $edited_chart,\n        $wanted_position,\n    ) {\n        $session = new Tracker_Report_Session($renderer->report->id);\n        $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n\n        $sorter = new GraphOnTrackersV5_InSessionChartSorter($session);\n        $sorter->sortChartInSession($this->getCharts($renderer), $edited_chart, $wanted_position);\n    }\n\n    public function sortArrayByRank($a, $b)\n    {\n        if ($a === self::CHART_REMOVED || $b === self::CHART_REMOVED) {\n            return 0;\n        }\n\n        return $a['rank'] - $b['rank'];\n    }\n\n    public function getChartsFromDb($renderer)\n    {\n        $charts = [];\n        $dao    = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        $charts = $dao->searchByReportId($renderer->id);\n        return $charts;\n    }\n\n\n    public function getReportRenderersByReportFromDb($report)\n    {\n        $renderers = [];\n        foreach ($this->getDao()->searchByReportId($report->id) as $row) {\n            if ($r = $this->getInstanceFromRow($row, $report)) {\n                $renderers[$row['id']] = $r;\n            }\n        }\n        return $renderers;\n    }\n\n\n    public function getChartFactories()\n    {\n        return $this->chart_factories;\n    }\n\n    public function createChart($renderer, $chart_type)\n    {\n        $chart = null;\n        if ($chart_classname = $this->getChartClassname($chart_type)) {\n            $dao                 = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n            $default_title       = 'Untitled ' . $chart_type;\n            $default_description = '';\n            $default_width       = call_user_func([$chart_classname, 'getDefaultWidth']);\n            $default_height      = call_user_func([$chart_classname, 'getDefaultHeight']);\n\n            $session = new Tracker_Report_Session($renderer->report->id);\n            $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n            if (! $session->charts) {\n                $session->charts = [];\n            }\n            $id   = -count($session->charts) - 1;\n            $rank = 0;\n\n            //Add new chart in session\n            $session->set(\"charts.$id.chart_type\", $chart_type);\n            $session->setHasChanged();\n            $chart = call_user_func([$chart_classname, 'create'], $renderer, $id, $rank, $default_title, $default_description, $default_width, $default_height);\n        }\n        return $chart;\n    }\n\n    public function deleteChart($renderer, $id, $user_can_update_report)\n    {\n        $session = new Tracker_Report_Session($renderer->report->id);\n        $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n        if (isset($session->charts[$id])) {\n            $session->set(\"charts.$id\", self::CHART_REMOVED);\n            $session->setHasChanged();\n        } elseif ($user_can_update_report) {\n            $this->deleteDb($renderer, $id);\n        }\n    }\n\n    public function deleteDb($renderer, $id)\n    {\n        //not in session, but in db cause removed in session\n        if ($c = $this->getChartFromDb($renderer, $id)) {\n            $dao = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n            $dao->delete($id);\n            $c->delete();\n        }\n    }\n\n\n    public function updateDb($renderer_id, $chart)\n    {\n        $dao = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        $dao->updateById(\n            $renderer_id,\n            $chart->getId(),\n            $chart->getRank(),\n            $chart->getTitle(),\n            $chart->getDescription(),\n            $chart->getWidth(),\n            $chart->getHeight()\n        );\n        $chart->updateDb();\n    }\n\n    public function createDb($renderer_id, $chart)\n    {\n        $dao = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        $id  = $dao->create(\n            $renderer_id,\n            $chart->getChartType(),\n            $chart->getRank(),\n            $chart->getTitle(),\n            $chart->getDescription(),\n            $chart->getWidth(),\n            $chart->getHeight()\n        );\n        $chart->createDb($id);\n    }\n\n    /**\n     * retrieve a specific chart by its id\n     * @param GraphOnTrackersV5_Renderer $renderer | null\n     * @param string                     $id\n     * @param bool                       $store_in_session\n     * @return GraphOnTrackersV5_Chart | null\n     */\n    public function getChart($renderer, $id, $store_in_session = true)\n    {\n        $c          = null;\n        $chart_data = null;\n        if ($renderer != null && $store_in_session) {\n            $session = new Tracker_Report_Session($renderer->report->id);\n            $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n\n            // look for the chart in the session\n            $chart_data = $session->get(\"charts.$id\");\n        }\n\n        if (! $chart_data) {\n            // not found. look in the db\n            $dao        = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n            $chart_data = $dao->searchById($id)->getRow();\n        }\n\n        if ($chart_data) {\n            if (! $renderer) {\n                $report   = null; //We don't know the report\n                $renderer = Tracker_Report_RendererFactory::instance()->getReportRendererById($chart_data['report_graphic_id'], $report, $store_in_session);\n            }\n            if ($renderer) {\n                $c = $this->instanciateChart($chart_data, $renderer, $store_in_session);\n            }\n        }\n        return $c;\n    }\n\n    /**\n     * retrieve a specific chart by its id from db only\n     * @return GraphOnTrackersV5_Chart | null\n     */\n    public function getChartFromDb($renderer, $id)\n    {\n        //not add in session\n        $c          = null;\n        $dao        = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        $chart_data = $dao->searchById($id)->getRow();\n        if ($chart_data) {\n            if (! $renderer) {\n                $report   = null; //We don't know the report\n                $renderer = Tracker_Report_RendererFactory::instance()->getReportRendererById($chart_data['report_graphic_id'], $report);\n            }\n            if ($renderer) {\n                if ($chart_classname = $this->getChartClassname($chart_data['chart_type'])) {\n                    $c = new $chart_classname($renderer, $chart_data['id'], $chart_data['rank'], $chart_data['title'], $chart_data['description'], $chart_data['width'], $chart_data['height']);\n                }\n            }\n        }\n        return $c;\n    }\n\n    /**\n     * @psalm-return class-string<GraphOnTrackersV5_Chart>|null\n     */\n    protected function getChartClassname($chart_type)\n    {\n        $chart_classname = null;\n        if (isset($this->chart_factories[$chart_type])) {\n            $chart_classname = $this->chart_factories[$chart_type]['chart_classname'];\n        }\n        return $chart_classname;\n    }\n\n    protected function instanciateChart($row, $renderer, $store_in_session = true)\n    {\n        $c = null;\n        if ($chart_classname = $this->getChartClassname($row['chart_type'])) {\n            if ($store_in_session) {\n                $session = new Tracker_Report_Session($renderer->report->id);\n                $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n                $session->set(\"charts.{$row['id']}.chart_type\", $row['chart_type']);\n            }\n            $c = new $chart_classname($renderer, $row['id'], $row['rank'], $row['title'], $row['description'], $row['width'], $row['height']);\n            if ($store_in_session) {\n                $c->loadFromSession();\n            } else {\n                $c->loadFromDb();\n            }\n        }\n        return $c;\n    }\n\n    /**\n     * Duplicate the charts\n     */\n    public function duplicate($from_renderer, $to_renderer, $field_mapping, MappingRegistry $mapping_registry)\n    {\n        $dao = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        foreach ($this->getCharts($from_renderer) as $chart) {\n            if ($id = $dao->duplicate($chart->getId(), $to_renderer->id)) {\n                if (! $mapping_registry->hasCustomMapping(self::MAPPING_KEY)) {\n                    $chart_mapping = new ArrayObject();\n                    $mapping_registry->setCustomMapping(self::MAPPING_KEY, $chart_mapping);\n                } else {\n                    $chart_mapping = $mapping_registry->getCustomMapping(self::MAPPING_KEY);\n                }\n                $chart_mapping[$chart->getId()] = $id;\n\n                $this->getChart($to_renderer, $id)->duplicate($chart, $field_mapping);\n            }\n        }\n    }\n\n    public function getInstanceFromXML($xml, $renderer, $formsMapping, $store_in_session = true)\n    {\n        $att = $xml->attributes();\n        $row = [\n            'id'          => 0,\n            'chart_type'  => (string) $att->type,\n            'height'      => (int) $att->height,\n            'width'       => (int) $att->width,\n            'rank'        => 'end',\n            'title'       => (string) $xml->title,\n            'description' => (string) $xml->description,\n        ];\n\n        $chart = $this->instanciateChart($row, $renderer, $store_in_session);\n        $chart->setSpecificPropertiesFromXML($xml, $formsMapping);\n        return $chart;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2011 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Project\\MappingRegistry;\n\n/**\n * Widget_TrackerRenderer\n *\n * Tracker Renderer\n */\nabstract class Tracker_Widget_Renderer extends Widget\n{\n    public $renderer_title;\n    public $renderer_id;\n\n    public function __construct($id, $owner_id, $owner_type)\n    {\n        parent::__construct($id);\n        $this->setOwner($owner_id, $owner_type);\n    }\n\n    public function getTitle()\n    {\n        return $this->renderer_title ?:\n            dgettext('tuleap-tracker', 'Tracker renderer');\n    }\n\n    public function getContent()\n    {\n        $renderer = $this->getRenderer();\n        if ($renderer) {\n            return $renderer->fetchWidget($this->getCurrentUser());\n        } else {\n            return '<em>Renderer does not exist</em>';\n        }\n    }\n\n    private function getRenderer(): ?Tracker_Report_Renderer\n    {\n        $store_in_session = false;\n        $arrf             = Tracker_Report_RendererFactory::instance();\n        $renderer         = $arrf->getReportRendererById($this->renderer_id, null, $store_in_session);\n        if ($renderer) {\n            $tracker = $renderer->report->getTracker();\n            $project = $tracker->getProject();\n            if ($tracker->isActive() && $project->isActive()) {\n                return $renderer;\n            }\n        }\n        return null;\n    }\n\n    public function isAjax()\n    {\n        return true;\n    }\n\n    public function hasPreferences($widget_id)\n    {\n        return true;\n    }\n\n    public function getPreferences($widget_id)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        return '\n            <div class=\"tlp-form-element\">\n                <label class=\"tlp-label\" for=\"title-' . $purifier->purify($widget_id) . '\">\n                    ' . $purifier->purify(_('Title')) . '\n                </label>\n                <input type=\"text\"\n                       class=\"tlp-input\"\n                       id=\"title-' . $purifier->purify($widget_id) . '\"\n                       name=\"renderer[title]\"\n                       value=\"' . $purifier->purify($this->getTitle()) . '\"\n                       placeholder=\"' . $purifier->purify(dgettext('tuleap-tracker', 'Tracker renderer')) . '\">\n            </div>\n            <div class=\"tlp-form-element\">\n                <label class=\"tlp-label\" for=\"renderer-id-' . $purifier->purify($widget_id) . '\">\n                    ' . $purifier->purify(dgettext('tuleap-tracker', 'Renderer id')) . '\n                    <i class=\"fa fa-asterisk\"></i>\n                </label>\n                <input type=\"number\"\n                       size=\"5\"\n                       class=\"tlp-input\"\n                       id=\"renderer-id-' . $purifier->purify($widget_id) . '\"\n                       name=\"renderer[renderer_id]\"\n                       value=\"' . $purifier->purify($this->renderer_id) . '\"\n                       required\n                       placeholder=\"123\">\n            </div>\n            ';\n    }\n\n    public function getInstallPreferences()\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        return '\n            <div class=\"tlp-form-element\">\n                <label class=\"tlp-label\" for=\"widget-renderer-title\">' . $purifier->purify(_('Title')) . '</label>\n                <input type=\"text\"\n                       class=\"tlp-input\"\n                       id=\"widget-renderer-title\"\n                       name=\"renderer[title]\"\n                       value=\"' . $purifier->purify($this->getTitle()) . '\"\n                       placeholder=\"' . $purifier->purify(dgettext('tuleap-tracker', 'Tracker renderer')) . '\">\n            </div>\n            <div class=\"tlp-form-element\">\n                <label class=\"tlp-label\" for=\"widget-renderer-id\">\n                    ' . $purifier->purify(dgettext('tuleap-tracker', 'Renderer id')) . '\n                    <i class=\"fa fa-asterisk\"></i>\n                </label>\n                <input type=\"number\"\n                       size=\"5\"\n                       class=\"tlp-input\"\n                       id=\"widget-renderer-id\"\n                       name=\"renderer[renderer_id]\"\n                       required\n                       placeholder=\"123\">\n            </div>\n            ';\n    }\n\n    public function cloneContent(\n        Project $template_project,\n        Project $new_project,\n        $id,\n        $owner_id,\n        $owner_type,\n        MappingRegistry $mapping_registry,\n    ) {\n        $sql = \"INSERT INTO tracker_widget_renderer (owner_id, owner_type, title, renderer_id)\n        SELECT  \" . db_ei($owner_id) . \", '\" . db_es($owner_type) . \"', title, renderer_id\n        FROM tracker_widget_renderer\n        WHERE owner_id = \" . db_ei($this->owner_id) . \" AND owner_type = '\" . db_es($this->owner_type) . \"' \";\n        $res = db_query($sql);\n        return db_insertid($res);\n    }\n\n    public function loadContent($id)\n    {\n        $sql = \"SELECT * FROM tracker_widget_renderer WHERE owner_id = \" . db_ei($this->owner_id) . \" AND owner_type = '\" . db_es($this->owner_type) . \"' AND id = \" . db_ei($id);\n        $res = db_query($sql);\n        if ($res && db_numrows($res)) {\n            $data                 = db_fetch_array($res);\n            $this->renderer_title = $data['title'];\n            $this->renderer_id    = $data['renderer_id'];\n            $this->content_id     = $id;\n        }\n    }\n\n    public function create(Codendi_Request $request)\n    {\n        $content_id = false;\n        $vId        = new Valid_UInt('renderer_id');\n        $vId->setErrorMessage(\"Can't add empty renderer id\");\n        $vId->required();\n        if ($request->validInArray('renderer', $vId)) {\n            $renderer   = $request->get('renderer');\n            $sql        = 'INSERT INTO tracker_widget_renderer (owner_id, owner_type, title, renderer_id) VALUES (' . db_ei($this->owner_id) . \", '\" . db_es($this->owner_type) . \"', '\" . db_escape_string($renderer['title']) . \"', \" . db_escape_int($renderer['renderer_id']) . \")\";\n            $res        = db_query($sql);\n            $content_id = db_insertid($res);\n        }\n        return $content_id;\n    }\n\n    public function updatePreferences(Codendi_Request $request)\n    {\n        $done       = false;\n        $vContentId = new Valid_UInt('content_id');\n        $vContentId->required();\n        if (($renderer = $request->get('renderer')) && $request->valid($vContentId)) {\n            $vId = new Valid_UInt('renderer_id');\n            if ($request->validInArray('renderer', $vId)) {\n                $id = \" renderer_id   = \" . db_escape_int($renderer['renderer_id']) . \" \";\n            } else {\n                $id = '';\n            }\n\n            $vTitle = new Valid_String('title');\n            if ($request->validInArray('renderer', $vTitle)) {\n                $title = \" title = '\" . db_escape_string($renderer['title']) . \"' \";\n            } else {\n                $title = '';\n            }\n\n            if ($id || $title) {\n                $sql  = \"UPDATE tracker_widget_renderer SET \" . $title . \", \" . $id . \" WHERE owner_id = \" . db_ei($this->owner_id) . \" AND owner_type = '\" . db_es($this->owner_type) . \"' AND id = \" . db_ei((int) $request->get('content_id'));\n                $res  = db_query($sql);\n                $done = true;\n            }\n        }\n        return $done;\n    }\n\n    public function destroy($id)\n    {\n        $sql = 'DELETE FROM tracker_widget_renderer WHERE id = ' . db_ei($id) . ' AND owner_id = ' . db_ei($this->owner_id) . \" AND owner_type = '\" . db_es($this->owner_type) . \"'\";\n        db_query($sql);\n    }\n\n    public function isUnique()\n    {\n        return false;\n    }\n\n    public function getCategory()\n    {\n        return dgettext('tuleap-tracker', 'Trackers');\n    }\n\n    public function getJavascriptDependencies()\n    {\n        $renderer = $this->getRenderer();\n        if ($renderer === null) {\n            return parent::getJavascriptDependencies();\n        }\n        return $renderer->getJavascriptDependencies();\n    }\n\n    public function getStylesheetDependencies()\n    {\n        $renderer = $this->getRenderer();\n        if ($renderer === null) {\n            return parent::getStylesheetDependencies();\n        }\n        return $renderer->getStylesheetDependencies();\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) Enalean, 2014-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Project\\MappingRegistry;\n\nclass GraphOnTrackersV5_ChartFactory\n{\n    public const CHART_REMOVED = 'removed';\n    public const MAPPING_KEY   = 'plugin_graphontrackers_chart_mapping';\n\n    protected $charts;\n    protected $chart_factories;\n\n    protected function __construct()\n    {\n        $this->charts          = null;\n        $this->chart_factories = [];\n        $em                    = EventManager::instance();\n        $em->processEvent('graphontrackersv5_load_chart_factories', ['factories' => &$this->chart_factories]);\n    }\n\n    /**\n     * Hold an instance of the class\n     * @var self|null\n     */\n    protected static $_instance;\n\n    /**\n     * @return GraphOnTrackersV5_ChartFactory\n     */\n    public static function instance()\n    {\n        if (! isset(self::$_instance)) {\n            self::$_instance = new self();\n        }\n        return self::$_instance;\n    }\n\n    public function getCharts($renderer, $store_in_session = true)\n    {\n        if (! isset($this->charts[$renderer->id])) {\n            $charts_data                 = [];\n            $this->charts[$renderer->id] = [];\n            if ($store_in_session) {\n                $this->report_session = new Tracker_Report_Session($renderer->report->id);\n                $this->report_session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n\n                $charts_data = $this->report_session->get(\"charts\");\n            }\n            //do we have charts in session?\n            if (empty($charts_data)) {\n                //No?! Retrieve them from the db!\n                $charts_data = $this->getChartsFromDb($renderer);\n                //$dao = new GraphOnTrackers_ChartDao(CodendiDataAccess::instance());\n                //$charts_data = $dao->searchByReportId($renderer->id);\n            } else {\n                uasort($charts_data, [$this, 'sortArrayByRank']);\n                if ($store_in_session) {\n                    $this->report_session->set(\"charts\", $charts_data);\n                }\n            }\n            if ($charts_data) {\n                foreach ($charts_data as $row) {\n                    if ($row !== self::CHART_REMOVED) {\n                        if ($c = $this->instanciateChart($row, $renderer, $store_in_session)) {\n                            $this->charts[$renderer->id][$row['id']] = $c;\n                        }\n                        if ($store_in_session) {\n                            //Add in session\n                            foreach ($row as $key => $value) {\n                                $this->report_session->set(\"charts.{$row['id']}.$key\", $value);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return $this->charts[$renderer->id];\n    }\n\n    public function forceChartsRankInSession(\n        GraphOnTrackersV5_Renderer $renderer,\n        GraphOnTrackersV5_Chart $edited_chart,\n        $wanted_position,\n    ) {\n        $session = new Tracker_Report_Session($renderer->report->id);\n        $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n\n        $sorter = new GraphOnTrackersV5_InSessionChartSorter($session);\n        $sorter->sortChartInSession($this->getCharts($renderer), $edited_chart, $wanted_position);\n    }\n\n    public function sortArrayByRank($a, $b)\n    {\n        if ($a === self::CHART_REMOVED || $b === self::CHART_REMOVED) {\n            return 0;\n        }\n\n        return $a['rank'] - $b['rank'];\n    }\n\n    public function getChartsFromDb($renderer)\n    {\n        $charts = [];\n        $dao    = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        $charts = $dao->searchByReportId($renderer->id);\n        return $charts;\n    }\n\n\n    public function getReportRenderersByReportFromDb($report)\n    {\n        $renderers = [];\n        foreach ($this->getDao()->searchByReportId($report->id) as $row) {\n            if ($r = $this->getInstanceFromRow($row, $report)) {\n                $renderers[$row['id']] = $r;\n            }\n        }\n        return $renderers;\n    }\n\n\n    public function getChartFactories()\n    {\n        return $this->chart_factories;\n    }\n\n    public function createChart($renderer, $chart_type)\n    {\n        $chart = null;\n        if ($chart_classname = $this->getChartClassname($chart_type)) {\n            $dao                 = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n            $default_title       = 'Untitled ' . $chart_type;\n            $default_description = '';\n            $default_width       = call_user_func([$chart_classname, 'getDefaultWidth']);\n            $default_height      = call_user_func([$chart_classname, 'getDefaultHeight']);\n\n            $session = new Tracker_Report_Session($renderer->report->id);\n            $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n            if (! $session->charts) {\n                $session->charts = [];\n            }\n            $id   = -count($session->charts) - 1;\n            $rank = 0;\n\n            //Add new chart in session\n            $session->set(\"charts.$id.chart_type\", $chart_type);\n            $session->setHasChanged();\n            $chart = call_user_func([$chart_classname, 'create'], $renderer, $id, $rank, $default_title, $default_description, $default_width, $default_height);\n        }\n        return $chart;\n    }\n\n    public function deleteChart($renderer, $id, $user_can_update_report)\n    {\n        $session = new Tracker_Report_Session($renderer->report->id);\n        $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n        if (isset($session->charts[$id])) {\n            $session->set(\"charts.$id\", self::CHART_REMOVED);\n            $session->setHasChanged();\n        } elseif ($user_can_update_report) {\n            $this->deleteDb($renderer, $id);\n        }\n    }\n\n    public function deleteDb($renderer, $id)\n    {\n        //not in session, but in db cause removed in session\n        if ($c = $this->getChartFromDb($renderer, $id)) {\n            $dao = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n            $dao->delete($id);\n            $c->delete();\n        }\n    }\n\n\n    public function updateDb($renderer_id, $chart)\n    {\n        $dao = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        $dao->updateById(\n            $renderer_id,\n            $chart->getId(),\n            $chart->getRank(),\n            $chart->getTitle(),\n            $chart->getDescription(),\n            $chart->getWidth(),\n            $chart->getHeight()\n        );\n        $chart->updateDb();\n    }\n\n    public function createDb($renderer_id, $chart)\n    {\n        $dao = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        $id  = $dao->create(\n            $renderer_id,\n            $chart->getChartType(),\n            $chart->getRank(),\n            $chart->getTitle(),\n            $chart->getDescription(),\n            $chart->getWidth(),\n            $chart->getHeight()\n        );\n        $chart->createDb($id);\n    }\n\n    /**\n     * retrieve a specific chart by its id\n     * @param GraphOnTrackersV5_Renderer $renderer | null\n     * @param string                     $id\n     * @param bool                       $store_in_session\n     * @return GraphOnTrackersV5_Chart | null\n     */\n    public function getChart($renderer, $id, $store_in_session = true)\n    {\n        $c          = null;\n        $chart_data = null;\n        if ($renderer != null && $store_in_session) {\n            $session = new Tracker_Report_Session($renderer->report->id);\n            $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n\n            // look for the chart in the session\n            $chart_data = $session->get(\"charts.$id\");\n        }\n\n        if (! $chart_data) {\n            // not found. look in the db\n            $dao        = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n            $chart_data = $dao->searchById($id)->getRow();\n        }\n\n        if ($chart_data) {\n            if (! $renderer) {\n                $report   = null; //We don't know the report\n                $renderer = Tracker_Report_RendererFactory::instance()->getReportRendererById($chart_data['report_graphic_id'], $report, $store_in_session);\n            }\n            if ($renderer && $renderer->getReport()->getTracker()->userCanView()) {\n                $c = $this->instanciateChart($chart_data, $renderer, $store_in_session);\n            }\n        }\n        return $c;\n    }\n\n    /**\n     * retrieve a specific chart by its id from db only\n     * @return GraphOnTrackersV5_Chart | null\n     */\n    public function getChartFromDb($renderer, $id)\n    {\n        //not add in session\n        $c          = null;\n        $dao        = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        $chart_data = $dao->searchById($id)->getRow();\n        if ($chart_data) {\n            if (! $renderer) {\n                $report   = null; //We don't know the report\n                $renderer = Tracker_Report_RendererFactory::instance()->getReportRendererById($chart_data['report_graphic_id'], $report);\n            }\n            if ($renderer) {\n                if ($chart_classname = $this->getChartClassname($chart_data['chart_type'])) {\n                    $c = new $chart_classname($renderer, $chart_data['id'], $chart_data['rank'], $chart_data['title'], $chart_data['description'], $chart_data['width'], $chart_data['height']);\n                }\n            }\n        }\n        return $c;\n    }\n\n    /**\n     * @psalm-return class-string<GraphOnTrackersV5_Chart>|null\n     */\n    protected function getChartClassname($chart_type)\n    {\n        $chart_classname = null;\n        if (isset($this->chart_factories[$chart_type])) {\n            $chart_classname = $this->chart_factories[$chart_type]['chart_classname'];\n        }\n        return $chart_classname;\n    }\n\n    protected function instanciateChart($row, $renderer, $store_in_session = true)\n    {\n        $c = null;\n        if ($chart_classname = $this->getChartClassname($row['chart_type'])) {\n            if ($store_in_session) {\n                $session = new Tracker_Report_Session($renderer->report->id);\n                $session->changeSessionNamespace(\"renderers.{$renderer->id}\");\n                $session->set(\"charts.{$row['id']}.chart_type\", $row['chart_type']);\n            }\n            $c = new $chart_classname($renderer, $row['id'], $row['rank'], $row['title'], $row['description'], $row['width'], $row['height']);\n            if ($store_in_session) {\n                $c->loadFromSession();\n            } else {\n                $c->loadFromDb();\n            }\n        }\n        return $c;\n    }\n\n    /**\n     * Duplicate the charts\n     */\n    public function duplicate($from_renderer, $to_renderer, $field_mapping, MappingRegistry $mapping_registry)\n    {\n        $dao = new GraphOnTrackersV5_ChartDao(CodendiDataAccess::instance());\n        foreach ($this->getCharts($from_renderer) as $chart) {\n            if ($id = $dao->duplicate($chart->getId(), $to_renderer->id)) {\n                if (! $mapping_registry->hasCustomMapping(self::MAPPING_KEY)) {\n                    $chart_mapping = new ArrayObject();\n                    $mapping_registry->setCustomMapping(self::MAPPING_KEY, $chart_mapping);\n                } else {\n                    $chart_mapping = $mapping_registry->getCustomMapping(self::MAPPING_KEY);\n                }\n                $chart_mapping[$chart->getId()] = $id;\n\n                $this->getChart($to_renderer, $id)->duplicate($chart, $field_mapping);\n            }\n        }\n    }\n\n    public function getInstanceFromXML($xml, $renderer, $formsMapping, $store_in_session = true)\n    {\n        $att = $xml->attributes();\n        $row = [\n            'id'          => 0,\n            'chart_type'  => (string) $att->type,\n            'height'      => (int) $att->height,\n            'width'       => (int) $att->width,\n            'rank'        => 'end',\n            'title'       => (string) $xml->title,\n            'description' => (string) $xml->description,\n        ];\n\n        $chart = $this->instanciateChart($row, $renderer, $store_in_session);\n        $chart->setSpecificPropertiesFromXML($xml, $formsMapping);\n        return $chart;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2011 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Project\\MappingRegistry;\n\n/**\n * Widget_TrackerRenderer\n *\n * Tracker Renderer\n */\nabstract class Tracker_Widget_Renderer extends Widget\n{\n    public $renderer_title;\n    public $renderer_id;\n\n    public function __construct($id, $owner_id, $owner_type)\n    {\n        parent::__construct($id);\n        $this->setOwner($owner_id, $owner_type);\n    }\n\n    public function getTitle()\n    {\n        return $this->renderer_title ?:\n            dgettext('tuleap-tracker', 'Tracker renderer');\n    }\n\n    public function getContent()\n    {\n        $renderer = $this->getRenderer();\n        if ($renderer) {\n            return $renderer->fetchWidget($this->getCurrentUser());\n        } else {\n            return '<em>Renderer does not exist</em>';\n        }\n    }\n\n    private function getRenderer(): ?Tracker_Report_Renderer\n    {\n        $store_in_session = false;\n        $arrf             = Tracker_Report_RendererFactory::instance();\n        $renderer         = $arrf->getReportRendererById($this->renderer_id, null, $store_in_session);\n        if ($renderer && $renderer->report->getTracker()->userCanView()) {\n            return $renderer;\n        }\n        return null;\n    }\n\n    public function isAjax()\n    {\n        return true;\n    }\n\n    public function hasPreferences($widget_id)\n    {\n        return true;\n    }\n\n    public function getPreferences($widget_id)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        return '\n            <div class=\"tlp-form-element\">\n                <label class=\"tlp-label\" for=\"title-' . $purifier->purify($widget_id) . '\">\n                    ' . $purifier->purify(_('Title')) . '\n                </label>\n                <input type=\"text\"\n                       class=\"tlp-input\"\n                       id=\"title-' . $purifier->purify($widget_id) . '\"\n                       name=\"renderer[title]\"\n                       value=\"' . $purifier->purify($this->getTitle()) . '\"\n                       placeholder=\"' . $purifier->purify(dgettext('tuleap-tracker', 'Tracker renderer')) . '\">\n            </div>\n            <div class=\"tlp-form-element\">\n                <label class=\"tlp-label\" for=\"renderer-id-' . $purifier->purify($widget_id) . '\">\n                    ' . $purifier->purify(dgettext('tuleap-tracker', 'Renderer id')) . '\n                    <i class=\"fa fa-asterisk\"></i>\n                </label>\n                <input type=\"number\"\n                       size=\"5\"\n                       class=\"tlp-input\"\n                       id=\"renderer-id-' . $purifier->purify($widget_id) . '\"\n                       name=\"renderer[renderer_id]\"\n                       value=\"' . $purifier->purify($this->renderer_id) . '\"\n                       required\n                       placeholder=\"123\">\n            </div>\n            ';\n    }\n\n    public function getInstallPreferences()\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        return '\n            <div class=\"tlp-form-element\">\n                <label class=\"tlp-label\" for=\"widget-renderer-title\">' . $purifier->purify(_('Title')) . '</label>\n                <input type=\"text\"\n                       class=\"tlp-input\"\n                       id=\"widget-renderer-title\"\n                       name=\"renderer[title]\"\n                       value=\"' . $purifier->purify($this->getTitle()) . '\"\n                       placeholder=\"' . $purifier->purify(dgettext('tuleap-tracker', 'Tracker renderer')) . '\">\n            </div>\n            <div class=\"tlp-form-element\">\n                <label class=\"tlp-label\" for=\"widget-renderer-id\">\n                    ' . $purifier->purify(dgettext('tuleap-tracker', 'Renderer id')) . '\n                    <i class=\"fa fa-asterisk\"></i>\n                </label>\n                <input type=\"number\"\n                       size=\"5\"\n                       class=\"tlp-input\"\n                       id=\"widget-renderer-id\"\n                       name=\"renderer[renderer_id]\"\n                       required\n                       placeholder=\"123\">\n            </div>\n            ';\n    }\n\n    public function cloneContent(\n        Project $template_project,\n        Project $new_project,\n        $id,\n        $owner_id,\n        $owner_type,\n        MappingRegistry $mapping_registry,\n    ) {\n        $sql = \"INSERT INTO tracker_widget_renderer (owner_id, owner_type, title, renderer_id)\n        SELECT  \" . db_ei($owner_id) . \", '\" . db_es($owner_type) . \"', title, renderer_id\n        FROM tracker_widget_renderer\n        WHERE owner_id = \" . db_ei($this->owner_id) . \" AND owner_type = '\" . db_es($this->owner_type) . \"' \";\n        $res = db_query($sql);\n        return db_insertid($res);\n    }\n\n    public function loadContent($id)\n    {\n        $sql = \"SELECT * FROM tracker_widget_renderer WHERE owner_id = \" . db_ei($this->owner_id) . \" AND owner_type = '\" . db_es($this->owner_type) . \"' AND id = \" . db_ei($id);\n        $res = db_query($sql);\n        if ($res && db_numrows($res)) {\n            $data                 = db_fetch_array($res);\n            $this->renderer_title = $data['title'];\n            $this->renderer_id    = $data['renderer_id'];\n            $this->content_id     = $id;\n        }\n    }\n\n    public function create(Codendi_Request $request)\n    {\n        $content_id = false;\n        $vId        = new Valid_UInt('renderer_id');\n        $vId->setErrorMessage(\"Can't add empty renderer id\");\n        $vId->required();\n        if ($request->validInArray('renderer', $vId)) {\n            $renderer   = $request->get('renderer');\n            $sql        = 'INSERT INTO tracker_widget_renderer (owner_id, owner_type, title, renderer_id) VALUES (' . db_ei($this->owner_id) . \", '\" . db_es($this->owner_type) . \"', '\" . db_escape_string($renderer['title']) . \"', \" . db_escape_int($renderer['renderer_id']) . \")\";\n            $res        = db_query($sql);\n            $content_id = db_insertid($res);\n        }\n        return $content_id;\n    }\n\n    public function updatePreferences(Codendi_Request $request)\n    {\n        $done       = false;\n        $vContentId = new Valid_UInt('content_id');\n        $vContentId->required();\n        if (($renderer = $request->get('renderer')) && $request->valid($vContentId)) {\n            $vId = new Valid_UInt('renderer_id');\n            if ($request->validInArray('renderer', $vId)) {\n                $id = \" renderer_id   = \" . db_escape_int($renderer['renderer_id']) . \" \";\n            } else {\n                $id = '';\n            }\n\n            $vTitle = new Valid_String('title');\n            if ($request->validInArray('renderer', $vTitle)) {\n                $title = \" title = '\" . db_escape_string($renderer['title']) . \"' \";\n            } else {\n                $title = '';\n            }\n\n            if ($id || $title) {\n                $sql  = \"UPDATE tracker_widget_renderer SET \" . $title . \", \" . $id . \" WHERE owner_id = \" . db_ei($this->owner_id) . \" AND owner_type = '\" . db_es($this->owner_type) . \"' AND id = \" . db_ei((int) $request->get('content_id'));\n                $res  = db_query($sql);\n                $done = true;\n            }\n        }\n        return $done;\n    }\n\n    public function destroy($id)\n    {\n        $sql = 'DELETE FROM tracker_widget_renderer WHERE id = ' . db_ei($id) . ' AND owner_id = ' . db_ei($this->owner_id) . \" AND owner_type = '\" . db_es($this->owner_type) . \"'\";\n        db_query($sql);\n    }\n\n    public function isUnique()\n    {\n        return false;\n    }\n\n    public function getCategory()\n    {\n        return dgettext('tuleap-tracker', 'Trackers');\n    }\n\n    public function getJavascriptDependencies()\n    {\n        $renderer = $this->getRenderer();\n        if ($renderer === null) {\n            return parent::getJavascriptDependencies();\n        }\n        return $renderer->getJavascriptDependencies();\n    }\n\n    public function getStylesheetDependencies()\n    {\n        $renderer = $this->getRenderer();\n        if ($renderer === null) {\n            return parent::getStylesheetDependencies();\n        }\n        return $renderer->getStylesheetDependencies();\n    }\n}\n"], "filenames": ["plugins/graphontrackersv5/include/data-access/GraphOnTrackersV5_ChartFactory.class.php", "plugins/tracker/include/Tracker/Widget/Tracker_Widget_Renderer.class.php"], "buggy_code_start_loc": [255, 61], "buggy_code_end_loc": [256, 67], "fixing_code_start_loc": [255, 61], "fixing_code_end_loc": [256, 63], "type": "CWE-862", "message": "Tuleap is a Free & Open Source Suite to manage software developments and collaboration. In versions prior to 13.7.99.239 Tuleap does not properly verify authorizations when displaying the content of tracker report renderer and chart widgets. Malicious users could use this vulnerability to retrieve the name of a tracker they cannot access as well as the name of the fields used in reports.", "other": {"cve": {"id": "CVE-2022-24896", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-09T06:15:07.053", "lastModified": "2022-06-15T17:42:52.937", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tuleap is a Free & Open Source Suite to manage software developments and collaboration. In versions prior to 13.7.99.239 Tuleap does not properly verify authorizations when displaying the content of tracker report renderer and chart widgets. Malicious users could use this vulnerability to retrieve the name of a tracker they cannot access as well as the name of the fields used in reports."}, {"lang": "es", "value": "Tuleap es una suite libre y de c\u00f3digo abierto para administrar el desarrollo de software y la colaboraci\u00f3n. En versiones anteriores a 13.7.99.239, Tuleap no verifica apropiadamente las autorizaciones cuando muestra el contenido del renderizador de informes de seguimiento y los widgets de gr\u00e1ficos. Unos usuarios maliciosos podr\u00edan usar esta vulnerabilidad para recuperar el nombre de un rastreador al que no pueden acceder, as\u00ed como el nombre de los campos usados en los informes"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionEndExcluding": "13.6-5", "matchCriteriaId": "92EF6BED-0507-466F-86D9-2BD080054445"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:community:*:*:*", "versionEndExcluding": "13.7.99.239", "matchCriteriaId": "12B7CD6D-1D15-4AC9-9500-DB77C2741CB3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "13.7-1", "versionEndExcluding": "13.7-4", "matchCriteriaId": "452FB6D4-A397-4F19-B67E-F6BBC619C7BF"}]}]}], "references": [{"url": "https://github.com/Enalean/tuleap/commit/8e99e7c82d9fe569799019b9e1d614d38a184313", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-x962-x43g-qw39", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=8e99e7c82d9fe569799019b9e1d614d38a184313", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://tuleap.net/plugins/tracker/?aid=26729", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Enalean/tuleap/commit/8e99e7c82d9fe569799019b9e1d614d38a184313"}}