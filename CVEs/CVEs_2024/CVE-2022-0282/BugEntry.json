{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\Comment\\Models;\n\nuse EloquentFilter\\Filterable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse MicroweberPackages\\Content\\Models\\ModelFilters\\ContentFilter;\n\nclass Comment extends Model\n{\n    use Filterable;\n\n    public $table = 'comments';\n\n    protected $fillable = [\n        'rel_type',\n        'rel_id',\n        'comment_name',\n        'comment_email',\n        'comment_website',\n        'comment_body',\n    ];\n\n//    protected $casts = [\n//        'comment_body'=>MarkdownCast::class\n//    ];\n\n    public function modelFilter()\n    {\n        return $this->provideFilter(ContentFilter::class);\n    }\n\n}\n", "<?php\n\nnamespace MicroweberPackages\\Comment\\Models;\n\nuse MicroweberPackages\\Database\\Crud;\n\n\nclass CommentsCrud extends Crud\n{\n\n    public $app;\n    public $table = 'comments';\n\n\n    public function get($params = false)\n    {\n        $params2 = array();\n\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $params2;\n        }\n        if (isset($params['content_id'])) {\n            $params['rel_type'] = 'content';\n            $params['rel_id'] = mw()->database_manager->escape_string($params['content_id']);\n\n        }\n        $date_format = get_option('date_format', 'website');\n        if ($date_format == false) {\n            $date_format = \"Y-m-d H:i:s\";\n        }\n        $table = $this->table;\n        $params['table'] = $table;\n\n        $comments = db_get($params);\n\n        if (is_array($comments)) {\n            $i = 0;\n            foreach ($comments as $item) {\n                if (isset($params['count'])) {\n                    if (isset($item['qty'])) {\n                        return $item['qty'];\n                    }\n                }\n                if (isset($item['created_by']) and intval($item['created_by']) > 0 and ($item['comment_name'] == false or $item['comment_name'] == '')) {\n                    $comments[$i]['comment_name'] = user_name($item['created_by']);\n                }\n                if (isset($item['created_at']) and trim($item['created_at']) != '') {\n                    $comments[$i]['created_at_display'] = date($date_format, strtotime($item['created_at']));\n                }\n                if (isset($item['updated_at']) and trim($item['updated_at']) != '') {\n                    $comments[$i]['updated_at_display'] = date($date_format, strtotime($item['updated_at']));\n                }\n                if (isset($item['comment_body']) and ($item['comment_body'] != '')) {\n                    $surl = site_url();\n                    $item['comment_body'] = str_replace('{SITE_URL}', $surl, $item['comment_body']);\n                    $comments[$i]['comment_body'] = $item['comment_body']; // mw()->format->autolink($item['comment_body']);\n                }\n\n                if (isset($params['single'])) {\n\n                    return $comments;\n                }\n\n                $i++;\n            }\n        }\n\n\n        return $comments;\n    }\n\n\n\n\n}\n", "\n                    <div class=\"row mb-3\">\n                        <div class=\"col\" style=\"max-width: 80px;\">\n                            <div class=\"img-circle-holder w-60 border-0 border-radius-10\">\n                                <?php if (isset($image) and $image != ''): ?>\n                                    <img src=\"<?php print thumbnail($image, 120, 120); ?>\"/>\n                                <?php else: ?>\n                                    <img src=\"<?php print thumbnail(''); ?>\"/>\n                                <?php endif; ?>\n                            </div>\n                        </div>\n                        <div class=\"col\">\n                            <div class=\"mb-1\">\n                                <small class=\"text-muted\">Status</small>\n                            </div>\n                            <script>\n                                $(document).ready(function () {\n                                    $(\".js-modify-comment\", '#comments-<?php print $comment['id'] ?>').change(function () {\n                                        $(this).find('option:selected').trigger('click');\n                                    });\n                                })\n                            </script>\n                            <div>\n                                <select class=\"selectpicker js-change-color js-modify-comment d-inline-block\" data-style=\"btn-success btn-sm\" data-width=\"fit\" data-title=\"<?php _e($status); ?>\">\n                                    <option class=\"js-comment-approved-btn\" data-id=\"<?php print $comment['id'] ?>\" data-change-color=\"btn-success\"><?php _e('Published'); ?></option>\n                                    <option class=\"js-comment-unpublished-btn\" data-id=\"<?php print $comment['id'] ?>\" data-change-color=\"btn-warning\"><?php _e('Unpublish'); ?></option>\n                                    <option class=\"js-mark-spam-comment-btn\" data-id=\"<?php print $comment['id'] ?>\" data-change-color=\"btn-secondary\"><?php _e('Mark as Spam'); ?></option>\n                                    <option class=\"js-delete-comment-btn\" data-id=\"<?php print $comment['id'] ?>\" data-change-color=\"btn-danger\"><?php _e('Delete'); ?></option>\n                                </select>\n\n                                <button class=\"js-edit-comment-btn btn btn-outline-secondary btn-sm\" data-id=\"<?php print $comment['id'] ?>\"><?php _e('Edit'); ?></button>\n                                <button class=\"js-save-comment-btn btn btn-success btn-sm\" data-id=\"<?php print $comment['id'] ?>\" style=\"display: none;\"><i class=\"mw-icon-pen\"></i><?php _e('Save'); ?></button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <form id=\"comment-form-<?php print $comment['id'] ?>\">\n                        <input type=\"hidden\" name=\"id\" value=\"<?php print $comment['id'] ?>\">\n                        <input type=\"text\" name=\"action\" class=\"comment_state semi_hidden\"/>\n                        <input type=\"hidden\" name=\"connected_id\" value=\"<?php print $comment['rel_id'] ?>\">\n\n                        <h6>\n                            <strong class=\"js-comment-name-text\">\n                                <?php if (isset($comment['comment_name'])): ?>\n                                    <?php print $comment['comment_name']; ?>\n                                <?php else: ?>\n                                    Guest\n                                <?php endif; ?>\n                            </strong>\n\n                            <span class=\"js-comment-name-input\" style=\"display: none;\">\n                                <input type=\"text\" name=\"comment_name\" class=\"mw_option_field form-control form-control-sm d-inline-block w-auto\" value=\"<?php print $comment['comment_name']; ?>\"/>\n                            </span>\n                            <small class=\"text-muted\">says:</small>\n                        </h6>\n\n                    <div class=\"mb-3\">\n                        <div class=\"js-comment-body-text\"><?php print $comment['comment_body']; ?></div>\n                        <span class=\"js-comment-body-textarea\" style=\"display: none;\">\n                            <small class=\"text-muted\">Comment:</small>\n                            <textarea name=\"comment_body\" class=\"form-control\"><?php print $comment['comment_body']; ?></textarea>\n                        </span>\n                    </div>\n\n                    <div class=\"mb-3\">\n                        <?php if ($comment['comment_email']) { ?>\n                            <small class=\"text-muted\">E-mail:</small>\n                            <span class=\"js-comment-email-text\"><a href=\"mailto:<?php print $comment['comment_email']; ?>\"><?php print $comment['comment_email']; ?></a></span>\n\n                            <span class=\"js-comment-email-input\" style=\"display: none;\">\n                                    <input type=\"text\" name=\"comment_email\" class=\"mw_option_field form-control form-control-sm d-inline-block w-auto\" value=\"<?php print $comment['comment_email']; ?>\"/>\n                                </span>\n                        <?php } ?>\n\n                        <?php if ($comment['comment_website']) { ?>\n                            <span class=\"js-comment-website-text\"> | <a href=\"<?php print mw()->format->prep_url($comment['comment_website']); ?>\" target=\"_blank\">Website</a></span>\n\n                            <span class=\"js-comment-website-input\" style=\"display: none;\">\n                                    <input type=\"text\" name=\"comment_website\" class=\"mw_option_field form-control form-control-sm d-inline-block w-auto\" value=\"<?php print $comment['comment_website']; ?>\"/>\n                                </span>\n                        <?php } ?>\n                    </div>\n                    </form>\n\n                    <?php if (isset($params['show-reply-form'])) { ?>\n                        <?php /*<a href=\"#reply-comment-id-<?php print $comment['id'] ?>\" data-target=\"#reply-comment-id-<?php print $comment['id'] ?>\" class=\"btn btn-outline-secondary btn-sm icon-left js-show-more\"><i class=\"mdi mdi-comment-account text-primary\"></i> Reply</a>*/ ?>\n\n                        <div class=\"collapse\" id=\"reply-comment-id-<?php print $comment['id'] ?>\">\n                            <hr class=\"thin\"/>\n\n                            <div class=\"row mb-3\">\n                                <div class=\"col-12 mb-3\">\n                                    <h5><strong>Add a new comment</strong></h5>\n                                </div>\n                                <div class=\"col\" style=\"max-width: 80px;\">\n                                    <?php\n                                    $image = get_user_by_id($comment['created_by']);\n                                    if (!isset($image['thumbnail'])) {\n                                        $image = '';\n                                    } else {\n                                        $image = $image['thumbnail'];\n                                    }\n                                    ?>\n\n                                    <div class=\"img-circle-holder w-60 border-0 border-radius-10\">\n                                        <?php if (isset($image) and $image != ''): ?>\n                                            <img src=\"<?php print thumbnail($image, 120, 120); ?>\"/>\n                                        <?php else: ?>\n                                            <img src=\"<?php print thumbnail('', 120, 120); ?>\"/>\n                                        <?php endif; ?>\n                                    </div>\n                                </div>\n                                <div class=\"col-12 col-sm mt-3 mt-sm-0\">\n                                    <form id=\"comment-form-reply-<?php print $comment['id'] ?>\" class=\"js-reply-comment-form\">\n                                        <div class=\"form-group\">\n                                            <input type=\"hidden\" name=\"reply_to_comment_id\" value=\"<?php print $comment['id'] ?>\">\n                                            <textarea placeholder=\"<?php _e('Reply to'); ?> <?php print $comment['comment_name']; ?>\" name=\"comment_body\"></textarea>\n                                        </div>\n                                        <div class=\"text-end text-right\">\n                                            <button class=\"btn btn-outline-secondary btn-sm\" type=\"submit\"><?php _e('Post Comment'); ?></button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    <?php } ?>\n\n", "<?php\n\n\nnamespace Microweber\\Comments\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse MicroweberPackages\\Comment\\Http\\Controllers\\Admin\\AdminCommentController;\nuse MicroweberPackages\\View\\View;\n\n\nclass Admin\n{\n    public $app = null;\n    public $views_dir = 'views';\n\n\n    function __construct($app = null)\n    {\n\n\n        if (!is_object($this->app)) {\n            if (is_object($app)) {\n                $this->app = $app;\n            } else {\n                $this->app = mw();\n            }\n        }\n        $this->views_dir = dirname(__DIR__) . DS . 'views' . DS;\n\n    }\n\n\n    function index($params)\n    {\n        if (!user_can_access('module.comments.index')) {\n            return;\n        }\n\n        $view_file = $this->views_dir . 'admin.php';\n        $view = new View($view_file);\n        $view->assign('params', $params);\n\n        return $view->display();\n    }\n\n\n    function comments_list($params)\n    {\n\n        if (!user_can_access('module.comments.index')) {\n            return;\n        }\n\n        if (!isset($params['content_id'])) {\n\n            if (isset($params['rel_id']) and isset($params['rel_type'])) {\n                $data = array(\n                    'rel_id' => $params['rel_id'],\n                    'rel_type' => $params['rel_type'],\n\n                );\n            }\n\n\n        } else {\n            $data = array(\n                'content_id' => $params['content_id']\n            );\n\n        }\n\n\n        if (isset($params['search-keyword']) and $params['search-keyword']) {\n            $kw = $data['keyword'] = $params['search-keyword'];\n            $data['search_in_fields'] = 'comment_name,comment_body,comment_email,comment_website,from_url,comment_subject';\n        }\n\n        $data['order_by'] = 'created_at desc';\n\n        $comments = $postComments = get_comments($data);\n        if (isset($params['content_id'])) {\n            $content = get_content_by_id($params['content_id']);\n            $content_id = $params['content_id'];\n        } else {\n            $content = false;\n            $content_id = false;\n        }\n\n        $moderation_is_required = get_option('require_moderation', 'comments') == 'y';\n\n        $view_file = $this->views_dir . 'comments_list.php';\n        $view = new View($view_file);\n        $view->assign('params', $params);\n        $view->assign('comments', $comments);\n        $view->assign('content_id', $content_id);\n        $view->assign('content', $content);\n        $view->assign('moderation_is_required', $moderation_is_required);\n\n        return $view->display();\n    }\n\n\n    function comment_item($params)\n    {\n        if (!user_can_access('module.comments.index')) {\n            return;\n        }\n\n        $data = array(\n            'id' => $params['comment_id'],\n            'single' => true,\n        );\n\n        $comment = get_comments($data);\n\n\n        if (!$comment) {\n            return;\n        }\n\n\n        $view_file = $this->views_dir . 'comment_item.php';\n        $view = new View($view_file);\n        $view->assign('params', $params);\n        $view->assign('comment', $comment);\n\n\n        return $view->display();\n\n\n    }\n\n    function manage($params)\n    {\n        if (!user_can_access('module.comments.index')) {\n            return;\n        }\n\n        $keyword = false;\n        $paging_param = 'comments_page';\n        $current_page_from_url = $this->app->url_manager->param($paging_param);\n\n        $comments_data = array();\n        $comments_data['cache_group'] = 'comments/global';\n        if (isset($params['search-keyword'])) {\n            $comments_data['keyword'] = $params['search-keyword'];\n        }\n        if (isset($params['content_id'])) {\n            $comments_data['content_id'] = $params['content_id'];\n        }\n\n        if (isset($params['limit'])) {\n            $comments_data['limit'] = intval($params['limit']);\n        }\n\n\n        if (isset($params['content_id'])) {\n            $comments_data['content_id'] = $params['content_id'];\n        } else {\n            if (isset($params['rel_type'])) {\n                $comments_data['rel_type'] = $params['rel_type'];\n            }\n            if (isset($params['rel_id'])) {\n                $comments_data['rel_id'] = $params['rel_id'];\n            }\n\n        }\n\n        $keyword = false;\n\n        if (isset($params['search-keyword']) and $params['search-keyword']) {\n            $keyword = $comments_data['keyword'] = $params['search-keyword'];\n            $comments_data['search_in_fields'] = 'comment_name,comment_body,comment_email,comment_website,from_url,comment_subject';\n        }\n        if ($keyword) {\n            $keyword = strip_tags($keyword);\n            $keyword = addslashes($keyword);\n        }\n\n\n        if (!$keyword and $current_page_from_url) {\n            $comments_data['current_page'] = $current_page_from_url;\n\n        }\n\n\n        $comments_data['group_by'] = 'rel_id,rel_type';\n      //  $comments_data['order_by'] = 'updated_at desc';\n        $comments_data['order_by'] = 'created_at desc';\n\n\n        $request = new Request();\n        $request->merge($comments_data);\n\n        $comments_controller = app()->make(AdminCommentController::class);\n        $comments_controller_data = $comments_controller->getComments($request);\n\n        return view('comment::admin.comments.partials.list', ['contents' => $comments_controller_data,'module_view'=>1]);\n\n//       // $data = get_comments($comments_data);\n//        $data = get_comments($comments_data);\n//        //dd($data);\n//        $comments_data['page_count'] = true;\n//\n//        $page_count = get_comments($comments_data);\n//\n//\n//        $view_file = $this->views_dir . 'manage.php';\n//\n//\n//        $view = new View($view_file);\n//        $view->assign('params', $params);\n//        $view->assign('kw', $keyword);\n//        $view->assign('data', $data);\n//        $view->assign('page_count', $page_count);\n//        $view->assign('paging_param', $paging_param);\n//\n//        return $view->display();\n    }\n\n\n}\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\Comment\\Models;\n\nuse EloquentFilter\\Filterable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse MicroweberPackages\\Content\\Models\\ModelFilters\\ContentFilter;\n\nclass Comment extends Model\n{\n    use Filterable;\n\n    public $table = 'comments';\n\n    protected $fillable = [\n        'rel_type',\n        'rel_id',\n        'comment_name',\n        'comment_email',\n        'comment_website',\n        'comment_body',\n    ];\n\n//    protected $casts = [\n//        'comment_body'=>MarkdownCast::class\n//    ];\n\n\n    public function modelFilter()\n    {\n        return $this->provideFilter(ContentFilter::class);\n    }\n\n}\n", "<?php\n\nnamespace MicroweberPackages\\Comment\\Models;\n\nuse MicroweberPackages\\Database\\Crud;\n\n\nclass CommentsCrud extends Crud\n{\n\n    public $app;\n    public $table = 'comments';\n\n\n    public function get($params = false)\n    {\n        $params2 = array();\n\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $params2;\n        }\n        if (isset($params['content_id'])) {\n            $params['rel_type'] = 'content';\n            $params['rel_id'] = mw()->database_manager->escape_string($params['content_id']);\n\n        }\n        $date_format = get_option('date_format', 'website');\n        if ($date_format == false) {\n            $date_format = \"Y-m-d H:i:s\";\n        }\n        $table = $this->table;\n        $params['table'] = $table;\n\n        $comments = db_get($params);\n\n        if (is_array($comments)) {\n            $i = 0;\n            foreach ($comments as $item) {\n                if (isset($params['count'])) {\n                    if (isset($item['qty'])) {\n                        return $item['qty'];\n                    }\n                }\n                if (isset($item['created_by']) and intval($item['created_by']) > 0 and ($item['comment_name'] == false or $item['comment_name'] == '')) {\n                    $comments[$i]['comment_name'] = user_name($item['created_by']);\n                }\n                if (isset($item['created_at']) and trim($item['created_at']) != '') {\n                    $comments[$i]['created_at_display'] = date($date_format, strtotime($item['created_at']));\n                }\n                if (isset($item['updated_at']) and trim($item['updated_at']) != '') {\n                    $comments[$i]['updated_at_display'] = date($date_format, strtotime($item['updated_at']));\n                }\n                if (isset($item['comment_body']) and ($item['comment_body'] != '')) {\n                    $surl = site_url();\n                    $item['comment_body'] = str_replace('{SITE_URL}', $surl, $item['comment_body']);\n                    $comments[$i]['comment_body'] = htmlentities($item['comment_body']);\n                }\n\n                if (isset($params['single'])) {\n\n                    return $comments;\n                }\n\n                $i++;\n            }\n        }\n\n\n        return $comments;\n    }\n\n\n\n\n}\n", "\n                    <div class=\"row mb-3\">\n                        <div class=\"col\" style=\"max-width: 80px;\">\n                            <div class=\"img-circle-holder w-60 border-0 border-radius-10\">\n                                <?php if (isset($image) and $image != ''): ?>\n                                    <img src=\"<?php print thumbnail($image, 120, 120); ?>\"/>\n                                <?php else: ?>\n                                    <img src=\"<?php print thumbnail(''); ?>\"/>\n                                <?php endif; ?>\n                            </div>\n                        </div>\n                        <div class=\"col\">\n                            <div class=\"mb-1\">\n                                <small class=\"text-muted\">Status</small>\n                            </div>\n                            <script>\n                                $(document).ready(function () {\n                                    $(\".js-modify-comment\", '#comments-<?php print $comment['id'] ?>').change(function () {\n                                        $(this).find('option:selected').trigger('click');\n                                    });\n                                })\n                            </script>\n                            <div>\n                                <select class=\"selectpicker js-change-color js-modify-comment d-inline-block\" data-style=\"btn-success btn-sm\" data-width=\"fit\" data-title=\"<?php _e($status); ?>\">\n                                    <option class=\"js-comment-approved-btn\" data-id=\"<?php print $comment['id'] ?>\" data-change-color=\"btn-success\"><?php _e('Published'); ?></option>\n                                    <option class=\"js-comment-unpublished-btn\" data-id=\"<?php print $comment['id'] ?>\" data-change-color=\"btn-warning\"><?php _e('Unpublish'); ?></option>\n                                    <option class=\"js-mark-spam-comment-btn\" data-id=\"<?php print $comment['id'] ?>\" data-change-color=\"btn-secondary\"><?php _e('Mark as Spam'); ?></option>\n                                    <option class=\"js-delete-comment-btn\" data-id=\"<?php print $comment['id'] ?>\" data-change-color=\"btn-danger\"><?php _e('Delete'); ?></option>\n                                </select>\n\n                                <button class=\"js-edit-comment-btn btn btn-outline-secondary btn-sm\" data-id=\"<?php print $comment['id'] ?>\"><?php _e('Edit'); ?></button>\n                                <button class=\"js-save-comment-btn btn btn-success btn-sm\" data-id=\"<?php print $comment['id'] ?>\" style=\"display: none;\"><i class=\"mw-icon-pen\"></i><?php _e('Save'); ?></button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <form id=\"comment-form-<?php print $comment['id'] ?>\">\n                        <input type=\"hidden\" name=\"id\" value=\"<?php print $comment['id'] ?>\">\n                        <input type=\"text\" name=\"action\" class=\"comment_state semi_hidden\"/>\n                        <input type=\"hidden\" name=\"connected_id\" value=\"<?php print $comment['rel_id'] ?>\">\n\n                        <h6>\n                            <strong class=\"js-comment-name-text\">\n                                <?php if (isset($comment['comment_name'])): ?>\n                                    <?php print $comment['comment_name']; ?>\n                                <?php else: ?>\n                                    Guest\n                                <?php endif; ?>\n                            </strong>\n\n                            <span class=\"js-comment-name-input\" style=\"display: none;\">\n                                <input type=\"text\" name=\"comment_name\" class=\"mw_option_field form-control form-control-sm d-inline-block w-auto\" value=\"<?php print $comment['comment_name']; ?>\"/>\n                            </span>\n                            <small class=\"text-muted\">says:</small>\n                        </h6>\n\n                    <div class=\"mb-3\">\n                        <div class=\"js-comment-body-text\">{{ $comment['comment_body'] }}</div>\n                        <span class=\"js-comment-body-textarea\" style=\"display: none;\">\n                            <small class=\"text-muted\">Comment:</small>\n                            <textarea name=\"comment_body\" class=\"form-control\">{{ $comment['comment_body'] }}</textarea>\n                        </span>\n                    </div>\n\n                    <div class=\"mb-3\">\n                        <?php if ($comment['comment_email']) { ?>\n                            <small class=\"text-muted\">E-mail:</small>\n                            <span class=\"js-comment-email-text\"><a href=\"mailto:<?php print $comment['comment_email']; ?>\"><?php print $comment['comment_email']; ?></a></span>\n\n                            <span class=\"js-comment-email-input\" style=\"display: none;\">\n                                    <input type=\"text\" name=\"comment_email\" class=\"mw_option_field form-control form-control-sm d-inline-block w-auto\" value=\"<?php print $comment['comment_email']; ?>\"/>\n                                </span>\n                        <?php } ?>\n\n                        <?php if ($comment['comment_website']) { ?>\n                            <span class=\"js-comment-website-text\"> | <a href=\"<?php print mw()->format->prep_url($comment['comment_website']); ?>\" target=\"_blank\">Website</a></span>\n\n                            <span class=\"js-comment-website-input\" style=\"display: none;\">\n                                    <input type=\"text\" name=\"comment_website\" class=\"mw_option_field form-control form-control-sm d-inline-block w-auto\" value=\"<?php print $comment['comment_website']; ?>\"/>\n                                </span>\n                        <?php } ?>\n                    </div>\n                    </form>\n\n                    <?php if (isset($params['show-reply-form'])) { ?>\n                        <?php /*<a href=\"#reply-comment-id-<?php print $comment['id'] ?>\" data-target=\"#reply-comment-id-<?php print $comment['id'] ?>\" class=\"btn btn-outline-secondary btn-sm icon-left js-show-more\"><i class=\"mdi mdi-comment-account text-primary\"></i> Reply</a>*/ ?>\n\n                        <div class=\"collapse\" id=\"reply-comment-id-<?php print $comment['id'] ?>\">\n                            <hr class=\"thin\"/>\n\n                            <div class=\"row mb-3\">\n                                <div class=\"col-12 mb-3\">\n                                    <h5><strong>Add a new comment</strong></h5>\n                                </div>\n                                <div class=\"col\" style=\"max-width: 80px;\">\n                                    <?php\n                                    $image = get_user_by_id($comment['created_by']);\n                                    if (!isset($image['thumbnail'])) {\n                                        $image = '';\n                                    } else {\n                                        $image = $image['thumbnail'];\n                                    }\n                                    ?>\n\n                                    <div class=\"img-circle-holder w-60 border-0 border-radius-10\">\n                                        <?php if (isset($image) and $image != ''): ?>\n                                            <img src=\"<?php print thumbnail($image, 120, 120); ?>\"/>\n                                        <?php else: ?>\n                                            <img src=\"<?php print thumbnail('', 120, 120); ?>\"/>\n                                        <?php endif; ?>\n                                    </div>\n                                </div>\n                                <div class=\"col-12 col-sm mt-3 mt-sm-0\">\n                                    <form id=\"comment-form-reply-<?php print $comment['id'] ?>\" class=\"js-reply-comment-form\">\n                                        <div class=\"form-group\">\n                                            <input type=\"hidden\" name=\"reply_to_comment_id\" value=\"<?php print $comment['id'] ?>\">\n                                            <textarea placeholder=\"<?php _e('Reply to'); ?> <?php print $comment['comment_name']; ?>\" name=\"comment_body\"></textarea>\n                                        </div>\n                                        <div class=\"text-end text-right\">\n                                            <button class=\"btn btn-outline-secondary btn-sm\" type=\"submit\"><?php _e('Post Comment'); ?></button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    <?php } ?>\n\n", "<?php\n\n\nnamespace Microweber\\Comments\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse MicroweberPackages\\Comment\\Http\\Controllers\\Admin\\AdminCommentController;\nuse MicroweberPackages\\View\\View;\n\n\nclass Admin\n{\n    public $app = null;\n    public $views_dir = 'views';\n\n\n    function __construct($app = null)\n    {\n\n\n        if (!is_object($this->app)) {\n            if (is_object($app)) {\n                $this->app = $app;\n            } else {\n                $this->app = mw();\n            }\n        }\n        $this->views_dir = dirname(__DIR__) . DS . 'views' . DS;\n\n    }\n\n\n    function index($params)\n    {\n        if (!user_can_access('module.comments.index')) {\n            return;\n        }\n\n        $view_file = $this->views_dir . 'admin.php';\n        $view = new View($view_file);\n        $view->assign('params', $params);\n\n        return $view->display();\n    }\n\n\n    function comments_list($params)\n    {\n        if (!user_can_access('module.comments.index')) {\n            return;\n        }\n\n        if (!isset($params['content_id'])) {\n\n            if (isset($params['rel_id']) and isset($params['rel_type'])) {\n                $data = array(\n                    'rel_id' => $params['rel_id'],\n                    'rel_type' => $params['rel_type'],\n\n                );\n            }\n\n\n        } else {\n            $data = array(\n                'content_id' => $params['content_id']\n            );\n\n        }\n\n\n        if (isset($params['search-keyword']) and $params['search-keyword']) {\n            $kw = $data['keyword'] = $params['search-keyword'];\n            $data['search_in_fields'] = 'comment_name,comment_body,comment_email,comment_website,from_url,comment_subject';\n        }\n\n        $data['order_by'] = 'created_at desc';\n\n        $comments = $postComments = get_comments($data);\n        if (isset($params['content_id'])) {\n            $content = get_content_by_id($params['content_id']);\n            $content_id = $params['content_id'];\n        } else {\n            $content = false;\n            $content_id = false;\n        }\n\n        $moderation_is_required = get_option('require_moderation', 'comments') == 'y';\n\n        $view_file = $this->views_dir . 'comments_list.php';\n        $view = new View($view_file);\n        $view->assign('params', $params);\n        $view->assign('comments', $comments);\n        $view->assign('content_id', $content_id);\n        $view->assign('content', $content);\n        $view->assign('moderation_is_required', $moderation_is_required);\n\n        return $view->display();\n    }\n\n\n    function comment_item($params)\n    {\n        if (!user_can_access('module.comments.index')) {\n            return;\n        }\n\n        $data = array(\n            'id' => $params['comment_id'],\n            'single' => true,\n        );\n\n        $comment = get_comments($data);\n\n        if (!$comment) {\n            return;\n        }\n\n        $view_file = $this->views_dir . 'comment_item.php';\n        $view = new View($view_file);\n        $view->assign('params', $params);\n        $view->assign('comment', $comment);\n\n\n        return $view->display();\n\n\n    }\n\n    function manage($params)\n    {\n        if (!user_can_access('module.comments.index')) {\n            return;\n        }\n\n        $keyword = false;\n        $paging_param = 'comments_page';\n        $current_page_from_url = $this->app->url_manager->param($paging_param);\n\n        $comments_data = array();\n        $comments_data['cache_group'] = 'comments/global';\n        if (isset($params['search-keyword'])) {\n            $comments_data['keyword'] = $params['search-keyword'];\n        }\n        if (isset($params['content_id'])) {\n            $comments_data['content_id'] = $params['content_id'];\n        }\n\n        if (isset($params['limit'])) {\n            $comments_data['limit'] = intval($params['limit']);\n        }\n\n\n        if (isset($params['content_id'])) {\n            $comments_data['content_id'] = $params['content_id'];\n        } else {\n            if (isset($params['rel_type'])) {\n                $comments_data['rel_type'] = $params['rel_type'];\n            }\n            if (isset($params['rel_id'])) {\n                $comments_data['rel_id'] = $params['rel_id'];\n            }\n\n        }\n\n        $keyword = false;\n\n        if (isset($params['search-keyword']) and $params['search-keyword']) {\n            $keyword = $comments_data['keyword'] = $params['search-keyword'];\n            $comments_data['search_in_fields'] = 'comment_name,comment_body,comment_email,comment_website,from_url,comment_subject';\n        }\n        if ($keyword) {\n            $keyword = strip_tags($keyword);\n            $keyword = addslashes($keyword);\n        }\n\n\n        if (!$keyword and $current_page_from_url) {\n            $comments_data['current_page'] = $current_page_from_url;\n\n        }\n\n\n        $comments_data['group_by'] = 'rel_id,rel_type';\n      //  $comments_data['order_by'] = 'updated_at desc';\n        $comments_data['order_by'] = 'created_at desc';\n\n\n        $request = new Request();\n        $request->merge($comments_data);\n\n        $comments_controller = app()->make(AdminCommentController::class);\n        $comments_controller_data = $comments_controller->getComments($request);\n\n        return view('comment::admin.comments.partials.list', ['contents' => $comments_controller_data,'module_view'=>1]);\n\n//       // $data = get_comments($comments_data);\n//        $data = get_comments($comments_data);\n//        //dd($data);\n//        $comments_data['page_count'] = true;\n//\n//        $page_count = get_comments($comments_data);\n//\n//\n//        $view_file = $this->views_dir . 'manage.php';\n//\n//\n//        $view = new View($view_file);\n//        $view->assign('params', $params);\n//        $view->assign('kw', $keyword);\n//        $view->assign('data', $data);\n//        $view->assign('page_count', $page_count);\n//        $view->assign('paging_param', $paging_param);\n//\n//        return $view->display();\n    }\n\n\n}\n"], "filenames": ["src/MicroweberPackages/Comment/Models/Comment.php", "src/MicroweberPackages/Comment/Models/CommentsCrud.php", "src/MicroweberPackages/Comment/resources/views/admin/comments/comment_item.blade.php", "userfiles/modules/comments/src/Controllers/Admin.php"], "buggy_code_start_loc": [27, 57, 58, 49], "buggy_code_end_loc": [27, 58, 62, 121], "fixing_code_start_loc": [28, 57, 58, 48], "fixing_code_end_loc": [29, 58, 62, 117], "type": "CWE-94", "message": "Code Injection in Packagist microweber/microweber prior to 1.2.11.", "other": {"cve": {"id": "CVE-2022-0282", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-20T12:15:08.663", "lastModified": "2022-01-26T16:17:20.173", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Code Injection in Packagist microweber/microweber prior to 1.2.11."}, {"lang": "es", "value": "Una Inyecci\u00f3n de C\u00f3digo en Packagist microweber/microweber versiones anteriores a 1.2.11"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.10", "matchCriteriaId": "3CB1BA10-C609-4709-A91C-72D12499CF96"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/51b5a4e3ef01e587797c0109159a8ad9d2bac77a", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/8815b642-bd9b-4737-951b-bde7319faedd", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/51b5a4e3ef01e587797c0109159a8ad9d2bac77a"}}