{"buggy_code": ["<?php\n\n/**\n * Pure-PHP implementation of AES.\n *\n * Uses mcrypt, if available/possible, and an internal implementation, otherwise.\n *\n * PHP version 5\n *\n * NOTE: Since AES.php is (for compatibility and phpseclib-historical reasons) virtually\n * just a wrapper to Rijndael.php you may consider using Rijndael.php instead of\n * to save one include_once().\n *\n * If {@link self::setKeyLength() setKeyLength()} isn't called, it'll be calculated from\n * {@link self::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's 136-bits\n * it'll be null-padded to 192-bits and 192 bits will be the key length until {@link self::setKey() setKey()}\n * is called, again, at which point, it'll be recalculated.\n *\n * Since \\phpseclib\\Crypt\\AES extends \\phpseclib\\Crypt\\Rijndael, some functions are available to be called that, in the context of AES, don't\n * make a whole lot of sense.  {@link self::setBlockLength() setBlockLength()}, for instance.  Calling that function,\n * however possible, won't do anything (AES has a fixed block length whereas Rijndael has a variable one).\n *\n * Here's a short example of how to use this library:\n * <code>\n * <?php\n *    include 'vendor/autoload.php';\n *\n *    $aes = new \\phpseclib\\Crypt\\AES();\n *\n *    $aes->setKey('abcdefghijklmnop');\n *\n *    $size = 10 * 1024;\n *    $plaintext = '';\n *    for ($i = 0; $i < $size; $i++) {\n *        $plaintext.= 'a';\n *    }\n *\n *    echo $aes->decrypt($aes->encrypt($plaintext));\n * ?>\n * </code>\n *\n * @category  Crypt\n * @package   AES\n * @author    Jim Wigginton <terrafrost@php.net>\n * @copyright 2008 Jim Wigginton\n * @license   http://www.opensource.org/licenses/mit-license.html  MIT License\n * @link      http://phpseclib.sourceforge.net\n */\n\nnamespace phpseclib\\Crypt;\n\nuse phpseclib\\Crypt\\Rijndael;\n\n/**\n * Pure-PHP implementation of AES.\n *\n * @package AES\n * @author  Jim Wigginton <terrafrost@php.net>\n * @access  public\n */\nclass AES extends Rijndael\n{\n    /**\n     * Dummy function\n     *\n     * Since \\phpseclib\\Crypt\\AES extends \\phpseclib\\Crypt\\Rijndael, this function is, technically, available, but it doesn't do anything.\n     *\n     * @see \\phpseclib\\Crypt\\Rijndael::setBlockLength()\n     * @access public\n     * @param int $length\n     */\n    function setBlockLength($length)\n    {\n        return;\n    }\n\n    /**\n     * Sets the key length\n     *\n     * Valid key lengths are 128, 192, and 256.  If the length is less than 128, it will be rounded up to\n     * 128.  If the length is greater than 128 and invalid, it will be rounded down to the closest valid amount.\n     *\n     * @see \\phpseclib\\Crypt\\Rijndael:setKeyLength()\n     * @access public\n     * @param int $length\n     */\n    function setKeyLength($length)\n    {\n        switch ($length) {\n            case 160:\n                $length = 192;\n                break;\n            case 224:\n                $length = 256;\n        }\n        parent::setKeyLength($length);\n    }\n\n    /**\n     * Sets the key.\n     *\n     * Rijndael supports five different key lengths, AES only supports three.\n     *\n     * @see \\phpseclib\\Crypt\\Rijndael:setKey()\n     * @see setKeyLength()\n     * @access public\n     * @param string $key\n     */\n    function setKey($key)\n    {\n        parent::setKey($key);\n\n        if (!$this->explicit_key_length) {\n            $length = strlen($key);\n            switch (true) {\n                case $length <= 16:\n                    $this->key_length = 16;\n                    break;\n                case $length <= 24:\n                    $this->key_length = 24;\n                    break;\n                default:\n                    $this->key_length = 32;\n            }\n            $this->_setEngine();\n        }\n    }\n}\n", "<?php\n\n/**\n * Pure-PHP implementation of Rijndael.\n *\n * Uses mcrypt, if available/possible, and an internal implementation, otherwise.\n *\n * PHP version 5\n *\n * If {@link self::setBlockLength() setBlockLength()} isn't called, it'll be assumed to be 128 bits.  If\n * {@link self::setKeyLength() setKeyLength()} isn't called, it'll be calculated from\n * {@link self::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's\n * 136-bits it'll be null-padded to 192-bits and 192 bits will be the key length until\n * {@link self::setKey() setKey()} is called, again, at which point, it'll be recalculated.\n *\n * Not all Rijndael implementations may support 160-bits or 224-bits as the block length / key length.  mcrypt, for example,\n * does not.  AES, itself, only supports block lengths of 128 and key lengths of 128, 192, and 256.\n * {@link http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=10 Rijndael-ammended.pdf#page=10} defines the\n * algorithm for block lengths of 192 and 256 but not for block lengths / key lengths of 160 and 224.  Indeed, 160 and 224\n * are first defined as valid key / block lengths in\n * {@link http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=44 Rijndael-ammended.pdf#page=44}:\n * Extensions: Other block and Cipher Key lengths.\n * Note: Use of 160/224-bit Keys must be explicitly set by setKeyLength(160) respectively setKeyLength(224).\n *\n * {@internal The variable names are the same as those in\n * {@link http://www.csrc.nist.gov/publications/fips/fips197/fips-197.pdf#page=10 fips-197.pdf#page=10}.}}\n *\n * Here's a short example of how to use this library:\n * <code>\n * <?php\n *    include 'vendor/autoload.php';\n *\n *    $rijndael = new \\phpseclib\\Crypt\\Rijndael();\n *\n *    $rijndael->setKey('abcdefghijklmnop');\n *\n *    $size = 10 * 1024;\n *    $plaintext = '';\n *    for ($i = 0; $i < $size; $i++) {\n *        $plaintext.= 'a';\n *    }\n *\n *    echo $rijndael->decrypt($rijndael->encrypt($plaintext));\n * ?>\n * </code>\n *\n * @category  Crypt\n * @package   Rijndael\n * @author    Jim Wigginton <terrafrost@php.net>\n * @copyright 2008 Jim Wigginton\n * @license   http://www.opensource.org/licenses/mit-license.html  MIT License\n * @link      http://phpseclib.sourceforge.net\n */\n\nnamespace phpseclib\\Crypt;\n\nuse phpseclib\\Crypt\\Base;\n\n/**\n * Pure-PHP implementation of Rijndael.\n *\n * @package Rijndael\n * @author  Jim Wigginton <terrafrost@php.net>\n * @access  public\n */\nclass Rijndael extends Base\n{\n    /**\n     * The mcrypt specific name of the cipher\n     *\n     * Mcrypt is useable for 128/192/256-bit $block_size/$key_length. For 160/224 not.\n     * \\phpseclib\\Crypt\\Rijndael determines automatically whether mcrypt is useable\n     * or not for the current $block_size/$key_length.\n     * In case of, $cipher_name_mcrypt will be set dynamically at run time accordingly.\n     *\n     * @see \\phpseclib\\Crypt\\Base::cipher_name_mcrypt\n     * @see \\phpseclib\\Crypt\\Base::engine\n     * @see self::isValidEngine()\n     * @var string\n     * @access private\n     */\n    var $cipher_name_mcrypt = 'rijndael-128';\n\n    /**\n     * The default salt used by setPassword()\n     *\n     * @see \\phpseclib\\Crypt\\Base::password_default_salt\n     * @see \\phpseclib\\Crypt\\Base::setPassword()\n     * @var string\n     * @access private\n     */\n    var $password_default_salt = 'phpseclib';\n\n    /**\n     * The Key Schedule\n     *\n     * @see self::_setup()\n     * @var array\n     * @access private\n     */\n    var $w;\n\n    /**\n     * The Inverse Key Schedule\n     *\n     * @see self::_setup()\n     * @var array\n     * @access private\n     */\n    var $dw;\n\n    /**\n     * The Block Length divided by 32\n     *\n     * @see self::setBlockLength()\n     * @var int\n     * @access private\n     * @internal The max value is 256 / 32 = 8, the min value is 128 / 32 = 4.  Exists in conjunction with $block_size\n     *    because the encryption / decryption / key schedule creation requires this number and not $block_size.  We could\n     *    derive this from $block_size or vice versa, but that'd mean we'd have to do multiple shift operations, so in lieu\n     *    of that, we'll just precompute it once.\n     */\n    var $Nb = 4;\n\n    /**\n     * The Key Length (in bytes)\n     *\n     * @see self::setKeyLength()\n     * @var int\n     * @access private\n     * @internal The max value is 256 / 8 = 32, the min value is 128 / 8 = 16.  Exists in conjunction with $Nk\n     *    because the encryption / decryption / key schedule creation requires this number and not $key_length.  We could\n     *    derive this from $key_length or vice versa, but that'd mean we'd have to do multiple shift operations, so in lieu\n     *    of that, we'll just precompute it once.\n     */\n    var $key_length = 16;\n\n    /**\n     * The Key Length divided by 32\n     *\n     * @see self::setKeyLength()\n     * @var int\n     * @access private\n     * @internal The max value is 256 / 32 = 8, the min value is 128 / 32 = 4\n     */\n    var $Nk = 4;\n\n    /**\n     * The Number of Rounds\n     *\n     * @var int\n     * @access private\n     * @internal The max value is 14, the min value is 10.\n     */\n    var $Nr;\n\n    /**\n     * Shift offsets\n     *\n     * @var array\n     * @access private\n     */\n    var $c;\n\n    /**\n     * Holds the last used key- and block_size information\n     *\n     * @var array\n     * @access private\n     */\n    var $kl;\n\n    /**\n     * Sets the key length.\n     *\n     * Valid key lengths are 128, 160, 192, 224, and 256.  If the length is less than 128, it will be rounded up to\n     * 128.  If the length is greater than 128 and invalid, it will be rounded down to the closest valid amount.\n     *\n     * Note: phpseclib extends Rijndael (and AES) for using 160- and 224-bit keys but they are officially not defined\n     *       and the most (if not all) implementations are not able using 160/224-bit keys but round/pad them up to\n     *       192/256 bits as, for example, mcrypt will do.\n     *\n     *       That said, if you want be compatible with other Rijndael and AES implementations,\n     *       you should not setKeyLength(160) or setKeyLength(224).\n     *\n     * Additional: In case of 160- and 224-bit keys, phpseclib will/can, for that reason, not use\n     *             the mcrypt php extension, even if available.\n     *             This results then in slower encryption.\n     *\n     * @access public\n     * @param int $length\n     */\n    function setKeyLength($length)\n    {\n        switch (true) {\n            case $length <= 128:\n                $this->key_length = 16;\n                break;\n            case $length <= 160:\n                $this->key_length = 20;\n                break;\n            case $length <= 192:\n                $this->key_length = 24;\n                break;\n            case $length <= 224:\n                $this->key_length = 28;\n                break;\n            default:\n                $this->key_length = 32;\n        }\n\n        parent::setKeyLength($length);\n    }\n\n    /**\n     * Sets the block length\n     *\n     * Valid block lengths are 128, 160, 192, 224, and 256.  If the length is less than 128, it will be rounded up to\n     * 128.  If the length is greater than 128 and invalid, it will be rounded down to the closest valid amount.\n     *\n     * @access public\n     * @param int $length\n     */\n    function setBlockLength($length)\n    {\n        $length >>= 5;\n        if ($length > 8) {\n            $length = 8;\n        } elseif ($length < 4) {\n            $length = 4;\n        }\n        $this->Nb = $length;\n        $this->block_size = $length << 2;\n        $this->changed = true;\n        $this->_setEngine();\n    }\n\n    /**\n     * Test for engine validity\n     *\n     * This is mainly just a wrapper to set things up for \\phpseclib\\Crypt\\Base::isValidEngine()\n     *\n     * @see \\phpseclib\\Crypt\\Base::__construct()\n     * @param int $engine\n     * @access public\n     * @return bool\n     */\n    function isValidEngine($engine)\n    {\n        switch ($engine) {\n            case self::ENGINE_OPENSSL:\n                if ($this->block_size != 16) {\n                    return false;\n                }\n                $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_length << 3) . '-ecb';\n                $this->cipher_name_openssl = 'aes-' . ($this->key_length << 3) . '-' . $this->_openssl_translate_mode();\n                break;\n            case self::ENGINE_MCRYPT:\n                $this->cipher_name_mcrypt = 'rijndael-' . ($this->block_size << 3);\n                if ($this->key_length % 8) { // is it a 160/224-bit key?\n                    // mcrypt is not usable for them, only for 128/192/256-bit keys\n                    return false;\n                }\n        }\n\n        return parent::isValidEngine($engine);\n    }\n\n    /**\n     * Encrypts a block\n     *\n     * @access private\n     * @param string $in\n     * @return string\n     */\n    function _encryptBlock($in)\n    {\n        static $tables;\n        if (empty($tables)) {\n            $tables = &$this->_getTables();\n        }\n        $t0   = $tables[0];\n        $t1   = $tables[1];\n        $t2   = $tables[2];\n        $t3   = $tables[3];\n        $sbox = $tables[4];\n\n        $state = array();\n        $words = unpack('N*', $in);\n\n        $c = $this->c;\n        $w = $this->w;\n        $Nb = $this->Nb;\n        $Nr = $this->Nr;\n\n        // addRoundKey\n        $wc = $Nb - 1;\n        foreach ($words as $word) {\n            $state[] = $word ^ $w[++$wc];\n        }\n\n        // fips-197.pdf#page=19, \"Figure 5. Pseudo Code for the Cipher\", states that this loop has four components -\n        // subBytes, shiftRows, mixColumns, and addRoundKey. fips-197.pdf#page=30, \"Implementation Suggestions Regarding\n        // Various Platforms\" suggests that performs enhanced implementations are described in Rijndael-ammended.pdf.\n        // Rijndael-ammended.pdf#page=20, \"Implementation aspects / 32-bit processor\", discusses such an optimization.\n        // Unfortunately, the description given there is not quite correct.  Per aes.spec.v316.pdf#page=19 [1],\n        // equation (7.4.7) is supposed to use addition instead of subtraction, so we'll do that here, as well.\n\n        // [1] http://fp.gladman.plus.com/cryptography_technology/rijndael/aes.spec.v316.pdf\n        $temp = array();\n        for ($round = 1; $round < $Nr; ++$round) {\n            $i = 0; // $c[0] == 0\n            $j = $c[1];\n            $k = $c[2];\n            $l = $c[3];\n\n            while ($i < $Nb) {\n                $temp[$i] = $t0[$state[$i] >> 24 & 0x000000FF] ^\n                            $t1[$state[$j] >> 16 & 0x000000FF] ^\n                            $t2[$state[$k] >>  8 & 0x000000FF] ^\n                            $t3[$state[$l]       & 0x000000FF] ^\n                            $w[++$wc];\n                ++$i;\n                $j = ($j + 1) % $Nb;\n                $k = ($k + 1) % $Nb;\n                $l = ($l + 1) % $Nb;\n            }\n            $state = $temp;\n        }\n\n        // subWord\n        for ($i = 0; $i < $Nb; ++$i) {\n            $state[$i] =   $sbox[$state[$i]       & 0x000000FF]        |\n                          ($sbox[$state[$i] >>  8 & 0x000000FF] <<  8) |\n                          ($sbox[$state[$i] >> 16 & 0x000000FF] << 16) |\n                          ($sbox[$state[$i] >> 24 & 0x000000FF] << 24);\n        }\n\n        // shiftRows + addRoundKey\n        $i = 0; // $c[0] == 0\n        $j = $c[1];\n        $k = $c[2];\n        $l = $c[3];\n        while ($i < $Nb) {\n            $temp[$i] = ($state[$i] & 0xFF000000) ^\n                        ($state[$j] & 0x00FF0000) ^\n                        ($state[$k] & 0x0000FF00) ^\n                        ($state[$l] & 0x000000FF) ^\n                         $w[$i];\n            ++$i;\n            $j = ($j + 1) % $Nb;\n            $k = ($k + 1) % $Nb;\n            $l = ($l + 1) % $Nb;\n        }\n\n        switch ($Nb) {\n            case 8:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5], $temp[6], $temp[7]);\n            case 7:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5], $temp[6]);\n            case 6:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5]);\n            case 5:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4]);\n            default:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3]);\n        }\n    }\n\n    /**\n     * Decrypts a block\n     *\n     * @access private\n     * @param string $in\n     * @return string\n     */\n    function _decryptBlock($in)\n    {\n        static $invtables;\n        if (empty($invtables)) {\n            $invtables = &$this->_getInvTables();\n        }\n        $dt0   = $invtables[0];\n        $dt1   = $invtables[1];\n        $dt2   = $invtables[2];\n        $dt3   = $invtables[3];\n        $isbox = $invtables[4];\n\n        $state = array();\n        $words = unpack('N*', $in);\n\n        $c  = $this->c;\n        $dw = $this->dw;\n        $Nb = $this->Nb;\n        $Nr = $this->Nr;\n\n        // addRoundKey\n        $wc = $Nb - 1;\n        foreach ($words as $word) {\n            $state[] = $word ^ $dw[++$wc];\n        }\n\n        $temp = array();\n        for ($round = $Nr - 1; $round > 0; --$round) {\n            $i = 0; // $c[0] == 0\n            $j = $Nb - $c[1];\n            $k = $Nb - $c[2];\n            $l = $Nb - $c[3];\n\n            while ($i < $Nb) {\n                $temp[$i] = $dt0[$state[$i] >> 24 & 0x000000FF] ^\n                            $dt1[$state[$j] >> 16 & 0x000000FF] ^\n                            $dt2[$state[$k] >>  8 & 0x000000FF] ^\n                            $dt3[$state[$l]       & 0x000000FF] ^\n                            $dw[++$wc];\n                ++$i;\n                $j = ($j + 1) % $Nb;\n                $k = ($k + 1) % $Nb;\n                $l = ($l + 1) % $Nb;\n            }\n            $state = $temp;\n        }\n\n        // invShiftRows + invSubWord + addRoundKey\n        $i = 0; // $c[0] == 0\n        $j = $Nb - $c[1];\n        $k = $Nb - $c[2];\n        $l = $Nb - $c[3];\n\n        while ($i < $Nb) {\n            $word = ($state[$i] & 0xFF000000) |\n                    ($state[$j] & 0x00FF0000) |\n                    ($state[$k] & 0x0000FF00) |\n                    ($state[$l] & 0x000000FF);\n\n            $temp[$i] = $dw[$i] ^ ($isbox[$word       & 0x000000FF]        |\n                                  ($isbox[$word >>  8 & 0x000000FF] <<  8) |\n                                  ($isbox[$word >> 16 & 0x000000FF] << 16) |\n                                  ($isbox[$word >> 24 & 0x000000FF] << 24));\n            ++$i;\n            $j = ($j + 1) % $Nb;\n            $k = ($k + 1) % $Nb;\n            $l = ($l + 1) % $Nb;\n        }\n\n        switch ($Nb) {\n            case 8:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5], $temp[6], $temp[7]);\n            case 7:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5], $temp[6]);\n            case 6:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5]);\n            case 5:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4]);\n            default:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3]);\n        }\n    }\n\n    /**\n     * Setup the key (expansion)\n     *\n     * @see \\phpseclib\\Crypt\\Base::_setupKey()\n     * @access private\n     */\n    function _setupKey()\n    {\n        // Each number in $rcon is equal to the previous number multiplied by two in Rijndael's finite field.\n        // See http://en.wikipedia.org/wiki/Finite_field_arithmetic#Multiplicative_inverse\n        static $rcon = array(0,\n            0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,\n            0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000,\n            0x6C000000, 0xD8000000, 0xAB000000, 0x4D000000, 0x9A000000,\n            0x2F000000, 0x5E000000, 0xBC000000, 0x63000000, 0xC6000000,\n            0x97000000, 0x35000000, 0x6A000000, 0xD4000000, 0xB3000000,\n            0x7D000000, 0xFA000000, 0xEF000000, 0xC5000000, 0x91000000\n        );\n\n        if (isset($this->kl['key']) && $this->key === $this->kl['key'] && $this->key_length === $this->kl['key_length'] && $this->block_size === $this->kl['block_size']) {\n            // already expanded\n            return;\n        }\n        $this->kl = array('key' => $this->key, 'key_length' => $this->key_length, 'block_size' => $this->block_size);\n\n        $this->Nk = $this->key_length >> 2;\n        // see Rijndael-ammended.pdf#page=44\n        $this->Nr = max($this->Nk, $this->Nb) + 6;\n\n        // shift offsets for Nb = 5, 7 are defined in Rijndael-ammended.pdf#page=44,\n        //     \"Table 8: Shift offsets in Shiftrow for the alternative block lengths\"\n        // shift offsets for Nb = 4, 6, 8 are defined in Rijndael-ammended.pdf#page=14,\n        //     \"Table 2: Shift offsets for different block lengths\"\n        switch ($this->Nb) {\n            case 4:\n            case 5:\n            case 6:\n                $this->c = array(0, 1, 2, 3);\n                break;\n            case 7:\n                $this->c = array(0, 1, 2, 4);\n                break;\n            case 8:\n                $this->c = array(0, 1, 3, 4);\n        }\n\n        $w = array_values(unpack('N*words', $this->key));\n\n        $length = $this->Nb * ($this->Nr + 1);\n        for ($i = $this->Nk; $i < $length; $i++) {\n            $temp = $w[$i - 1];\n            if ($i % $this->Nk == 0) {\n                // according to <http://php.net/language.types.integer>, \"the size of an integer is platform-dependent\".\n                // on a 32-bit machine, it's 32-bits, and on a 64-bit machine, it's 64-bits. on a 32-bit machine,\n                // 0xFFFFFFFF << 8 == 0xFFFFFF00, but on a 64-bit machine, it equals 0xFFFFFFFF00. as such, doing 'and'\n                // with 0xFFFFFFFF (or 0xFFFFFF00) on a 32-bit machine is unnecessary, but on a 64-bit machine, it is.\n                $temp = (($temp << 8) & 0xFFFFFF00) | (($temp >> 24) & 0x000000FF); // rotWord\n                $temp = $this->_subWord($temp) ^ $rcon[$i / $this->Nk];\n            } elseif ($this->Nk > 6 && $i % $this->Nk == 4) {\n                $temp = $this->_subWord($temp);\n            }\n            $w[$i] = $w[$i - $this->Nk] ^ $temp;\n        }\n\n        // convert the key schedule from a vector of $Nb * ($Nr + 1) length to a matrix with $Nr + 1 rows and $Nb columns\n        // and generate the inverse key schedule.  more specifically,\n        // according to <http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=23> (section 5.3.3),\n        // \"The key expansion for the Inverse Cipher is defined as follows:\n        //        1. Apply the Key Expansion.\n        //        2. Apply InvMixColumn to all Round Keys except the first and the last one.\"\n        // also, see fips-197.pdf#page=27, \"5.3.5 Equivalent Inverse Cipher\"\n        list($dt0, $dt1, $dt2, $dt3) = $this->_getInvTables();\n        $temp = $this->w = $this->dw = array();\n        for ($i = $row = $col = 0; $i < $length; $i++, $col++) {\n            if ($col == $this->Nb) {\n                if ($row == 0) {\n                    $this->dw[0] = $this->w[0];\n                } else {\n                    // subWord + invMixColumn + invSubWord = invMixColumn\n                    $j = 0;\n                    while ($j < $this->Nb) {\n                        $dw = $this->_subWord($this->w[$row][$j]);\n                        $temp[$j] = $dt0[$dw >> 24 & 0x000000FF] ^\n                                    $dt1[$dw >> 16 & 0x000000FF] ^\n                                    $dt2[$dw >>  8 & 0x000000FF] ^\n                                    $dt3[$dw       & 0x000000FF];\n                        $j++;\n                    }\n                    $this->dw[$row] = $temp;\n                }\n\n                $col = 0;\n                $row++;\n            }\n            $this->w[$row][$col] = $w[$i];\n        }\n\n        $this->dw[$row] = $this->w[$row];\n\n        // Converting to 1-dim key arrays (both ascending)\n        $this->dw = array_reverse($this->dw);\n        $w  = array_pop($this->w);\n        $dw = array_pop($this->dw);\n        foreach ($this->w as $r => $wr) {\n            foreach ($wr as $c => $wc) {\n                $w[]  = $wc;\n                $dw[] = $this->dw[$r][$c];\n            }\n        }\n        $this->w  = $w;\n        $this->dw = $dw;\n    }\n\n    /**\n     * Performs S-Box substitutions\n     *\n     * @access private\n     * @param int $word\n     */\n    function _subWord($word)\n    {\n        static $sbox;\n        if (empty($sbox)) {\n            list(, , , , $sbox) = $this->_getTables();\n        }\n\n        return  $sbox[$word       & 0x000000FF]        |\n               ($sbox[$word >>  8 & 0x000000FF] <<  8) |\n               ($sbox[$word >> 16 & 0x000000FF] << 16) |\n               ($sbox[$word >> 24 & 0x000000FF] << 24);\n    }\n\n    /**\n     * Provides the mixColumns and sboxes tables\n     *\n     * @see self::_encryptBlock()\n     * @see self::_setupInlineCrypt()\n     * @see self::_subWord()\n     * @access private\n     * @return array &$tables\n     */\n    function &_getTables()\n    {\n        static $tables;\n        if (empty($tables)) {\n            // according to <http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=19> (section 5.2.1),\n            // precomputed tables can be used in the mixColumns phase. in that example, they're assigned t0...t3, so\n            // those are the names we'll use.\n            $t3 = array_map('intval', array(\n                // with array_map('intval', ...) we ensure we have only int's and not\n                // some slower floats converted by php automatically on high values\n                0x6363A5C6, 0x7C7C84F8, 0x777799EE, 0x7B7B8DF6, 0xF2F20DFF, 0x6B6BBDD6, 0x6F6FB1DE, 0xC5C55491,\n                0x30305060, 0x01010302, 0x6767A9CE, 0x2B2B7D56, 0xFEFE19E7, 0xD7D762B5, 0xABABE64D, 0x76769AEC,\n                0xCACA458F, 0x82829D1F, 0xC9C94089, 0x7D7D87FA, 0xFAFA15EF, 0x5959EBB2, 0x4747C98E, 0xF0F00BFB,\n                0xADADEC41, 0xD4D467B3, 0xA2A2FD5F, 0xAFAFEA45, 0x9C9CBF23, 0xA4A4F753, 0x727296E4, 0xC0C05B9B,\n                0xB7B7C275, 0xFDFD1CE1, 0x9393AE3D, 0x26266A4C, 0x36365A6C, 0x3F3F417E, 0xF7F702F5, 0xCCCC4F83,\n                0x34345C68, 0xA5A5F451, 0xE5E534D1, 0xF1F108F9, 0x717193E2, 0xD8D873AB, 0x31315362, 0x15153F2A,\n                0x04040C08, 0xC7C75295, 0x23236546, 0xC3C35E9D, 0x18182830, 0x9696A137, 0x05050F0A, 0x9A9AB52F,\n                0x0707090E, 0x12123624, 0x80809B1B, 0xE2E23DDF, 0xEBEB26CD, 0x2727694E, 0xB2B2CD7F, 0x75759FEA,\n                0x09091B12, 0x83839E1D, 0x2C2C7458, 0x1A1A2E34, 0x1B1B2D36, 0x6E6EB2DC, 0x5A5AEEB4, 0xA0A0FB5B,\n                0x5252F6A4, 0x3B3B4D76, 0xD6D661B7, 0xB3B3CE7D, 0x29297B52, 0xE3E33EDD, 0x2F2F715E, 0x84849713,\n                0x5353F5A6, 0xD1D168B9, 0x00000000, 0xEDED2CC1, 0x20206040, 0xFCFC1FE3, 0xB1B1C879, 0x5B5BEDB6,\n                0x6A6ABED4, 0xCBCB468D, 0xBEBED967, 0x39394B72, 0x4A4ADE94, 0x4C4CD498, 0x5858E8B0, 0xCFCF4A85,\n                0xD0D06BBB, 0xEFEF2AC5, 0xAAAAE54F, 0xFBFB16ED, 0x4343C586, 0x4D4DD79A, 0x33335566, 0x85859411,\n                0x4545CF8A, 0xF9F910E9, 0x02020604, 0x7F7F81FE, 0x5050F0A0, 0x3C3C4478, 0x9F9FBA25, 0xA8A8E34B,\n                0x5151F3A2, 0xA3A3FE5D, 0x4040C080, 0x8F8F8A05, 0x9292AD3F, 0x9D9DBC21, 0x38384870, 0xF5F504F1,\n                0xBCBCDF63, 0xB6B6C177, 0xDADA75AF, 0x21216342, 0x10103020, 0xFFFF1AE5, 0xF3F30EFD, 0xD2D26DBF,\n                0xCDCD4C81, 0x0C0C1418, 0x13133526, 0xECEC2FC3, 0x5F5FE1BE, 0x9797A235, 0x4444CC88, 0x1717392E,\n                0xC4C45793, 0xA7A7F255, 0x7E7E82FC, 0x3D3D477A, 0x6464ACC8, 0x5D5DE7BA, 0x19192B32, 0x737395E6,\n                0x6060A0C0, 0x81819819, 0x4F4FD19E, 0xDCDC7FA3, 0x22226644, 0x2A2A7E54, 0x9090AB3B, 0x8888830B,\n                0x4646CA8C, 0xEEEE29C7, 0xB8B8D36B, 0x14143C28, 0xDEDE79A7, 0x5E5EE2BC, 0x0B0B1D16, 0xDBDB76AD,\n                0xE0E03BDB, 0x32325664, 0x3A3A4E74, 0x0A0A1E14, 0x4949DB92, 0x06060A0C, 0x24246C48, 0x5C5CE4B8,\n                0xC2C25D9F, 0xD3D36EBD, 0xACACEF43, 0x6262A6C4, 0x9191A839, 0x9595A431, 0xE4E437D3, 0x79798BF2,\n                0xE7E732D5, 0xC8C8438B, 0x3737596E, 0x6D6DB7DA, 0x8D8D8C01, 0xD5D564B1, 0x4E4ED29C, 0xA9A9E049,\n                0x6C6CB4D8, 0x5656FAAC, 0xF4F407F3, 0xEAEA25CF, 0x6565AFCA, 0x7A7A8EF4, 0xAEAEE947, 0x08081810,\n                0xBABAD56F, 0x787888F0, 0x25256F4A, 0x2E2E725C, 0x1C1C2438, 0xA6A6F157, 0xB4B4C773, 0xC6C65197,\n                0xE8E823CB, 0xDDDD7CA1, 0x74749CE8, 0x1F1F213E, 0x4B4BDD96, 0xBDBDDC61, 0x8B8B860D, 0x8A8A850F,\n                0x707090E0, 0x3E3E427C, 0xB5B5C471, 0x6666AACC, 0x4848D890, 0x03030506, 0xF6F601F7, 0x0E0E121C,\n                0x6161A3C2, 0x35355F6A, 0x5757F9AE, 0xB9B9D069, 0x86869117, 0xC1C15899, 0x1D1D273A, 0x9E9EB927,\n                0xE1E138D9, 0xF8F813EB, 0x9898B32B, 0x11113322, 0x6969BBD2, 0xD9D970A9, 0x8E8E8907, 0x9494A733,\n                0x9B9BB62D, 0x1E1E223C, 0x87879215, 0xE9E920C9, 0xCECE4987, 0x5555FFAA, 0x28287850, 0xDFDF7AA5,\n                0x8C8C8F03, 0xA1A1F859, 0x89898009, 0x0D0D171A, 0xBFBFDA65, 0xE6E631D7, 0x4242C684, 0x6868B8D0,\n                0x4141C382, 0x9999B029, 0x2D2D775A, 0x0F0F111E, 0xB0B0CB7B, 0x5454FCA8, 0xBBBBD66D, 0x16163A2C\n            ));\n\n            foreach ($t3 as $t3i) {\n                $t0[] = (($t3i << 24) & 0xFF000000) | (($t3i >>  8) & 0x00FFFFFF);\n                $t1[] = (($t3i << 16) & 0xFFFF0000) | (($t3i >> 16) & 0x0000FFFF);\n                $t2[] = (($t3i <<  8) & 0xFFFFFF00) | (($t3i >> 24) & 0x000000FF);\n            }\n\n            $tables = array(\n                // The Precomputed mixColumns tables t0 - t3\n                $t0,\n                $t1,\n                $t2,\n                $t3,\n                // The SubByte S-Box\n                array(\n                    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,\n                    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,\n                    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,\n                    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,\n                    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,\n                    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,\n                    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,\n                    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,\n                    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,\n                    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,\n                    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,\n                    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,\n                    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,\n                    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,\n                    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,\n                    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16\n                )\n            );\n        }\n        return $tables;\n    }\n\n    /**\n     * Provides the inverse mixColumns and inverse sboxes tables\n     *\n     * @see self::_decryptBlock()\n     * @see self::_setupInlineCrypt()\n     * @see self::_setupKey()\n     * @access private\n     * @return array &$tables\n     */\n    function &_getInvTables()\n    {\n        static $tables;\n        if (empty($tables)) {\n            $dt3 = array_map('intval', array(\n                0xF4A75051, 0x4165537E, 0x17A4C31A, 0x275E963A, 0xAB6BCB3B, 0x9D45F11F, 0xFA58ABAC, 0xE303934B,\n                0x30FA5520, 0x766DF6AD, 0xCC769188, 0x024C25F5, 0xE5D7FC4F, 0x2ACBD7C5, 0x35448026, 0x62A38FB5,\n                0xB15A49DE, 0xBA1B6725, 0xEA0E9845, 0xFEC0E15D, 0x2F7502C3, 0x4CF01281, 0x4697A38D, 0xD3F9C66B,\n                0x8F5FE703, 0x929C9515, 0x6D7AEBBF, 0x5259DA95, 0xBE832DD4, 0x7421D358, 0xE0692949, 0xC9C8448E,\n                0xC2896A75, 0x8E7978F4, 0x583E6B99, 0xB971DD27, 0xE14FB6BE, 0x88AD17F0, 0x20AC66C9, 0xCE3AB47D,\n                0xDF4A1863, 0x1A3182E5, 0x51336097, 0x537F4562, 0x6477E0B1, 0x6BAE84BB, 0x81A01CFE, 0x082B94F9,\n                0x48685870, 0x45FD198F, 0xDE6C8794, 0x7BF8B752, 0x73D323AB, 0x4B02E272, 0x1F8F57E3, 0x55AB2A66,\n                0xEB2807B2, 0xB5C2032F, 0xC57B9A86, 0x3708A5D3, 0x2887F230, 0xBFA5B223, 0x036ABA02, 0x16825CED,\n                0xCF1C2B8A, 0x79B492A7, 0x07F2F0F3, 0x69E2A14E, 0xDAF4CD65, 0x05BED506, 0x34621FD1, 0xA6FE8AC4,\n                0x2E539D34, 0xF355A0A2, 0x8AE13205, 0xF6EB75A4, 0x83EC390B, 0x60EFAA40, 0x719F065E, 0x6E1051BD,\n                0x218AF93E, 0xDD063D96, 0x3E05AEDD, 0xE6BD464D, 0x548DB591, 0xC45D0571, 0x06D46F04, 0x5015FF60,\n                0x98FB2419, 0xBDE997D6, 0x4043CC89, 0xD99E7767, 0xE842BDB0, 0x898B8807, 0x195B38E7, 0xC8EEDB79,\n                0x7C0A47A1, 0x420FE97C, 0x841EC9F8, 0x00000000, 0x80868309, 0x2BED4832, 0x1170AC1E, 0x5A724E6C,\n                0x0EFFFBFD, 0x8538560F, 0xAED51E3D, 0x2D392736, 0x0FD9640A, 0x5CA62168, 0x5B54D19B, 0x362E3A24,\n                0x0A67B10C, 0x57E70F93, 0xEE96D2B4, 0x9B919E1B, 0xC0C54F80, 0xDC20A261, 0x774B695A, 0x121A161C,\n                0x93BA0AE2, 0xA02AE5C0, 0x22E0433C, 0x1B171D12, 0x090D0B0E, 0x8BC7ADF2, 0xB6A8B92D, 0x1EA9C814,\n                0xF1198557, 0x75074CAF, 0x99DDBBEE, 0x7F60FDA3, 0x01269FF7, 0x72F5BC5C, 0x663BC544, 0xFB7E345B,\n                0x4329768B, 0x23C6DCCB, 0xEDFC68B6, 0xE4F163B8, 0x31DCCAD7, 0x63851042, 0x97224013, 0xC6112084,\n                0x4A247D85, 0xBB3DF8D2, 0xF93211AE, 0x29A16DC7, 0x9E2F4B1D, 0xB230F3DC, 0x8652EC0D, 0xC1E3D077,\n                0xB3166C2B, 0x70B999A9, 0x9448FA11, 0xE9642247, 0xFC8CC4A8, 0xF03F1AA0, 0x7D2CD856, 0x3390EF22,\n                0x494EC787, 0x38D1C1D9, 0xCAA2FE8C, 0xD40B3698, 0xF581CFA6, 0x7ADE28A5, 0xB78E26DA, 0xADBFA43F,\n                0x3A9DE42C, 0x78920D50, 0x5FCC9B6A, 0x7E466254, 0x8D13C2F6, 0xD8B8E890, 0x39F75E2E, 0xC3AFF582,\n                0x5D80BE9F, 0xD0937C69, 0xD52DA96F, 0x2512B3CF, 0xAC993BC8, 0x187DA710, 0x9C636EE8, 0x3BBB7BDB,\n                0x267809CD, 0x5918F46E, 0x9AB701EC, 0x4F9AA883, 0x956E65E6, 0xFFE67EAA, 0xBCCF0821, 0x15E8E6EF,\n                0xE79BD9BA, 0x6F36CE4A, 0x9F09D4EA, 0xB07CD629, 0xA4B2AF31, 0x3F23312A, 0xA59430C6, 0xA266C035,\n                0x4EBC3774, 0x82CAA6FC, 0x90D0B0E0, 0xA7D81533, 0x04984AF1, 0xECDAF741, 0xCD500E7F, 0x91F62F17,\n                0x4DD68D76, 0xEFB04D43, 0xAA4D54CC, 0x9604DFE4, 0xD1B5E39E, 0x6A881B4C, 0x2C1FB8C1, 0x65517F46,\n                0x5EEA049D, 0x8C355D01, 0x877473FA, 0x0B412EFB, 0x671D5AB3, 0xDBD25292, 0x105633E9, 0xD647136D,\n                0xD7618C9A, 0xA10C7A37, 0xF8148E59, 0x133C89EB, 0xA927EECE, 0x61C935B7, 0x1CE5EDE1, 0x47B13C7A,\n                0xD2DF599C, 0xF2733F55, 0x14CE7918, 0xC737BF73, 0xF7CDEA53, 0xFDAA5B5F, 0x3D6F14DF, 0x44DB8678,\n                0xAFF381CA, 0x68C43EB9, 0x24342C38, 0xA3405FC2, 0x1DC37216, 0xE2250CBC, 0x3C498B28, 0x0D9541FF,\n                0xA8017139, 0x0CB3DE08, 0xB4E49CD8, 0x56C19064, 0xCB84617B, 0x32B670D5, 0x6C5C7448, 0xB85742D0\n            ));\n\n            foreach ($dt3 as $dt3i) {\n                $dt0[] = (($dt3i << 24) & 0xFF000000) | (($dt3i >>  8) & 0x00FFFFFF);\n                $dt1[] = (($dt3i << 16) & 0xFFFF0000) | (($dt3i >> 16) & 0x0000FFFF);\n                $dt2[] = (($dt3i <<  8) & 0xFFFFFF00) | (($dt3i >> 24) & 0x000000FF);\n            };\n\n            $tables = array(\n                // The Precomputed inverse mixColumns tables dt0 - dt3\n                $dt0,\n                $dt1,\n                $dt2,\n                $dt3,\n                // The inverse SubByte S-Box\n                array(\n                    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,\n                    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,\n                    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,\n                    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,\n                    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,\n                    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,\n                    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,\n                    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,\n                    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,\n                    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,\n                    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,\n                    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,\n                    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,\n                    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,\n                    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,\n                    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D\n                )\n            );\n        }\n        return $tables;\n    }\n\n    /**\n     * Setup the performance-optimized function for de/encrypt()\n     *\n     * @see \\phpseclib\\Crypt\\Base::_setupInlineCrypt()\n     * @access private\n     */\n    function _setupInlineCrypt()\n    {\n        // Note: _setupInlineCrypt() will be called only if $this->changed === true\n        // So here we are'nt under the same heavy timing-stress as we are in _de/encryptBlock() or de/encrypt().\n        // However...the here generated function- $code, stored as php callback in $this->inline_crypt, must work as fast as even possible.\n\n        $lambda_functions =& self::_getLambdaFunctions();\n\n        // We create max. 10 hi-optimized code for memory reason. Means: For each $key one ultra fast inline-crypt function.\n        // (Currently, for Crypt_Rijndael/AES, one generated $lambda_function cost on php5.5@32bit ~80kb unfreeable mem and ~130kb on php5.5@64bit)\n        // After that, we'll still create very fast optimized code but not the hi-ultimative code, for each $mode one.\n        $gen_hi_opt_code = (bool)(count($lambda_functions) < 10);\n\n        // Generation of a uniqe hash for our generated code\n        $code_hash = \"Crypt_Rijndael, {$this->mode}, {$this->Nr}, {$this->Nb}\";\n        if ($gen_hi_opt_code) {\n            $code_hash = str_pad($code_hash, 32) . $this->_hashInlineCryptFunction($this->key);\n        }\n\n        if (!isset($lambda_functions[$code_hash])) {\n            switch (true) {\n                case $gen_hi_opt_code:\n                    // The hi-optimized $lambda_functions will use the key-words hardcoded for better performance.\n                    $w  = $this->w;\n                    $dw = $this->dw;\n                    $init_encrypt = '';\n                    $init_decrypt = '';\n                    break;\n                default:\n                    for ($i = 0, $cw = count($this->w); $i < $cw; ++$i) {\n                        $w[]  = '$w['  . $i . ']';\n                        $dw[] = '$dw[' . $i . ']';\n                    }\n                    $init_encrypt = '$w  = $self->w;';\n                    $init_decrypt = '$dw = $self->dw;';\n            }\n\n            $Nr = $this->Nr;\n            $Nb = $this->Nb;\n            $c  = $this->c;\n\n            // Generating encrypt code:\n            $init_encrypt.= '\n                static $tables;\n                if (empty($tables)) {\n                    $tables = &$self->_getTables();\n                }\n                $t0   = $tables[0];\n                $t1   = $tables[1];\n                $t2   = $tables[2];\n                $t3   = $tables[3];\n                $sbox = $tables[4];\n            ';\n\n            $s  = 'e';\n            $e  = 's';\n            $wc = $Nb - 1;\n\n            // Preround: addRoundKey\n            $encrypt_block = '$in = unpack(\"N*\", $in);'.\"\\n\";\n            for ($i = 0; $i < $Nb; ++$i) {\n                $encrypt_block .= '$s'.$i.' = $in['.($i + 1).'] ^ '.$w[++$wc].\";\\n\";\n            }\n\n            // Mainrounds: shiftRows + subWord + mixColumns + addRoundKey\n            for ($round = 1; $round < $Nr; ++$round) {\n                list($s, $e) = array($e, $s);\n                for ($i = 0; $i < $Nb; ++$i) {\n                    $encrypt_block.=\n                        '$'.$e.$i.' =\n                        $t0[($'.$s.$i                  .' >> 24) & 0xff] ^\n                        $t1[($'.$s.(($i + $c[1]) % $Nb).' >> 16) & 0xff] ^\n                        $t2[($'.$s.(($i + $c[2]) % $Nb).' >>  8) & 0xff] ^\n                        $t3[ $'.$s.(($i + $c[3]) % $Nb).'        & 0xff] ^\n                        '.$w[++$wc].\";\\n\";\n                }\n            }\n\n            // Finalround: subWord + shiftRows + addRoundKey\n            for ($i = 0; $i < $Nb; ++$i) {\n                $encrypt_block.=\n                    '$'.$e.$i.' =\n                     $sbox[ $'.$e.$i.'        & 0xff]        |\n                    ($sbox[($'.$e.$i.' >>  8) & 0xff] <<  8) |\n                    ($sbox[($'.$e.$i.' >> 16) & 0xff] << 16) |\n                    ($sbox[($'.$e.$i.' >> 24) & 0xff] << 24);'.\"\\n\";\n            }\n            $encrypt_block .= '$in = pack(\"N*\"'.\"\\n\";\n            for ($i = 0; $i < $Nb; ++$i) {\n                $encrypt_block.= ',\n                    ($'.$e.$i                  .' & '.((int)0xFF000000).') ^\n                    ($'.$e.(($i + $c[1]) % $Nb).' &         0x00FF0000   ) ^\n                    ($'.$e.(($i + $c[2]) % $Nb).' &         0x0000FF00   ) ^\n                    ($'.$e.(($i + $c[3]) % $Nb).' &         0x000000FF   ) ^\n                    '.$w[$i].\"\\n\";\n            }\n            $encrypt_block .= ');';\n\n            // Generating decrypt code:\n            $init_decrypt.= '\n                static $invtables;\n                if (empty($invtables)) {\n                    $invtables = &$self->_getInvTables();\n                }\n                $dt0   = $invtables[0];\n                $dt1   = $invtables[1];\n                $dt2   = $invtables[2];\n                $dt3   = $invtables[3];\n                $isbox = $invtables[4];\n            ';\n\n            $s  = 'e';\n            $e  = 's';\n            $wc = $Nb - 1;\n\n            // Preround: addRoundKey\n            $decrypt_block = '$in = unpack(\"N*\", $in);'.\"\\n\";\n            for ($i = 0; $i < $Nb; ++$i) {\n                $decrypt_block .= '$s'.$i.' = $in['.($i + 1).'] ^ '.$dw[++$wc].';'.\"\\n\";\n            }\n\n            // Mainrounds: shiftRows + subWord + mixColumns + addRoundKey\n            for ($round = 1; $round < $Nr; ++$round) {\n                list($s, $e) = array($e, $s);\n                for ($i = 0; $i < $Nb; ++$i) {\n                    $decrypt_block.=\n                        '$'.$e.$i.' =\n                        $dt0[($'.$s.$i                        .' >> 24) & 0xff] ^\n                        $dt1[($'.$s.(($Nb + $i - $c[1]) % $Nb).' >> 16) & 0xff] ^\n                        $dt2[($'.$s.(($Nb + $i - $c[2]) % $Nb).' >>  8) & 0xff] ^\n                        $dt3[ $'.$s.(($Nb + $i - $c[3]) % $Nb).'        & 0xff] ^\n                        '.$dw[++$wc].\";\\n\";\n                }\n            }\n\n            // Finalround: subWord + shiftRows + addRoundKey\n            for ($i = 0; $i < $Nb; ++$i) {\n                $decrypt_block.=\n                    '$'.$e.$i.' =\n                     $isbox[ $'.$e.$i.'        & 0xff]        |\n                    ($isbox[($'.$e.$i.' >>  8) & 0xff] <<  8) |\n                    ($isbox[($'.$e.$i.' >> 16) & 0xff] << 16) |\n                    ($isbox[($'.$e.$i.' >> 24) & 0xff] << 24);'.\"\\n\";\n            }\n            $decrypt_block .= '$in = pack(\"N*\"'.\"\\n\";\n            for ($i = 0; $i < $Nb; ++$i) {\n                $decrypt_block.= ',\n                    ($'.$e.$i.                        ' & '.((int)0xFF000000).') ^\n                    ($'.$e.(($Nb + $i - $c[1]) % $Nb).' &         0x00FF0000   ) ^\n                    ($'.$e.(($Nb + $i - $c[2]) % $Nb).' &         0x0000FF00   ) ^\n                    ($'.$e.(($Nb + $i - $c[3]) % $Nb).' &         0x000000FF   ) ^\n                    '.$dw[$i].\"\\n\";\n            }\n            $decrypt_block .= ');';\n\n            $lambda_functions[$code_hash] = $this->_createInlineCryptFunction(\n                array(\n                   'init_crypt'    => '',\n                   'init_encrypt'  => $init_encrypt,\n                   'init_decrypt'  => $init_decrypt,\n                   'encrypt_block' => $encrypt_block,\n                   'decrypt_block' => $decrypt_block\n                )\n            );\n        }\n        $this->inline_crypt = $lambda_functions[$code_hash];\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pure-PHP implementation of AES.\n *\n * Uses mcrypt, if available/possible, and an internal implementation, otherwise.\n *\n * PHP version 5\n *\n * NOTE: Since AES.php is (for compatibility and phpseclib-historical reasons) virtually\n * just a wrapper to Rijndael.php you may consider using Rijndael.php instead of\n * to save one include_once().\n *\n * If {@link self::setKeyLength() setKeyLength()} isn't called, it'll be calculated from\n * {@link self::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's 136-bits\n * it'll be null-padded to 192-bits and 192 bits will be the key length until {@link self::setKey() setKey()}\n * is called, again, at which point, it'll be recalculated.\n *\n * Since \\phpseclib\\Crypt\\AES extends \\phpseclib\\Crypt\\Rijndael, some functions are available to be called that, in the context of AES, don't\n * make a whole lot of sense.  {@link self::setBlockLength() setBlockLength()}, for instance.  Calling that function,\n * however possible, won't do anything (AES has a fixed block length whereas Rijndael has a variable one).\n *\n * Here's a short example of how to use this library:\n * <code>\n * <?php\n *    include 'vendor/autoload.php';\n *\n *    $aes = new \\phpseclib\\Crypt\\AES();\n *\n *    $aes->setKey('abcdefghijklmnop');\n *\n *    $size = 10 * 1024;\n *    $plaintext = '';\n *    for ($i = 0; $i < $size; $i++) {\n *        $plaintext.= 'a';\n *    }\n *\n *    echo $aes->decrypt($aes->encrypt($plaintext));\n * ?>\n * </code>\n *\n * @category  Crypt\n * @package   AES\n * @author    Jim Wigginton <terrafrost@php.net>\n * @copyright 2008 Jim Wigginton\n * @license   http://www.opensource.org/licenses/mit-license.html  MIT License\n * @link      http://phpseclib.sourceforge.net\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\nnamespace phpseclib\\Crypt;\n\nuse phpseclib\\Crypt\\Rijndael;\n\n/**\n * Pure-PHP implementation of AES.\n *\n * @package AES\n * @author  Jim Wigginton <terrafrost@php.net>\n * @access  public\n */\nclass AES extends Rijndael\n{\n    /**\n     * Dummy function\n     *\n     * Since \\phpseclib\\Crypt\\AES extends \\phpseclib\\Crypt\\Rijndael, this function is, technically, available, but it doesn't do anything.\n     *\n     * @see \\phpseclib\\Crypt\\Rijndael::setBlockLength()\n     * @access public\n     * @param int $length\n     */\n    function setBlockLength($length)\n    {\n        return;\n    }\n\n    /**\n     * Sets the key length\n     *\n     * Valid key lengths are 128, 192, and 256.  If the length is less than 128, it will be rounded up to\n     * 128.  If the length is greater than 128 and invalid, it will be rounded down to the closest valid amount.\n     *\n     * @see \\phpseclib\\Crypt\\Rijndael:setKeyLength()\n     * @access public\n     * @param int $length\n     */\n    function setKeyLength($length)\n    {\n        switch ($length) {\n            case 160:\n                $length = 192;\n                break;\n            case 224:\n                $length = 256;\n        }\n        parent::setKeyLength($length);\n    }\n\n    /**\n     * Sets the key.\n     *\n     * Rijndael supports five different key lengths, AES only supports three.\n     *\n     * @see \\phpseclib\\Crypt\\Rijndael:setKey()\n     * @see setKeyLength()\n     * @access public\n     * @param string $key\n     */\n    function setKey($key)\n    {\n        parent::setKey($key);\n\n        if (!$this->explicit_key_length) {\n            $length = strlen($key);\n            switch (true) {\n                case $length <= 16:\n                    $this->key_length = 16;\n                    break;\n                case $length <= 24:\n                    $this->key_length = 24;\n                    break;\n                default:\n                    $this->key_length = 32;\n            }\n            $this->_setEngine();\n        }\n    }\n}\n", "<?php\n\n/**\n * Pure-PHP implementation of Rijndael.\n *\n * Uses mcrypt, if available/possible, and an internal implementation, otherwise.\n *\n * PHP version 5\n *\n * If {@link self::setBlockLength() setBlockLength()} isn't called, it'll be assumed to be 128 bits.  If\n * {@link self::setKeyLength() setKeyLength()} isn't called, it'll be calculated from\n * {@link self::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's\n * 136-bits it'll be null-padded to 192-bits and 192 bits will be the key length until\n * {@link self::setKey() setKey()} is called, again, at which point, it'll be recalculated.\n *\n * Not all Rijndael implementations may support 160-bits or 224-bits as the block length / key length.  mcrypt, for example,\n * does not.  AES, itself, only supports block lengths of 128 and key lengths of 128, 192, and 256.\n * {@link http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=10 Rijndael-ammended.pdf#page=10} defines the\n * algorithm for block lengths of 192 and 256 but not for block lengths / key lengths of 160 and 224.  Indeed, 160 and 224\n * are first defined as valid key / block lengths in\n * {@link http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=44 Rijndael-ammended.pdf#page=44}:\n * Extensions: Other block and Cipher Key lengths.\n * Note: Use of 160/224-bit Keys must be explicitly set by setKeyLength(160) respectively setKeyLength(224).\n *\n * {@internal The variable names are the same as those in\n * {@link http://www.csrc.nist.gov/publications/fips/fips197/fips-197.pdf#page=10 fips-197.pdf#page=10}.}}\n *\n * Here's a short example of how to use this library:\n * <code>\n * <?php\n *    include 'vendor/autoload.php';\n *\n *    $rijndael = new \\phpseclib\\Crypt\\Rijndael();\n *\n *    $rijndael->setKey('abcdefghijklmnop');\n *\n *    $size = 10 * 1024;\n *    $plaintext = '';\n *    for ($i = 0; $i < $size; $i++) {\n *        $plaintext.= 'a';\n *    }\n *\n *    echo $rijndael->decrypt($rijndael->encrypt($plaintext));\n * ?>\n * </code>\n *\n * @category  Crypt\n * @package   Rijndael\n * @author    Jim Wigginton <terrafrost@php.net>\n * @copyright 2008 Jim Wigginton\n * @license   http://www.opensource.org/licenses/mit-license.html  MIT License\n * @link      http://phpseclib.sourceforge.net\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\nnamespace phpseclib\\Crypt;\n\nuse phpseclib\\Crypt\\Base;\n\n/**\n * Pure-PHP implementation of Rijndael.\n *\n * @package Rijndael\n * @author  Jim Wigginton <terrafrost@php.net>\n * @access  public\n */\nclass Rijndael extends Base\n{\n    /**\n     * The mcrypt specific name of the cipher\n     *\n     * Mcrypt is useable for 128/192/256-bit $block_size/$key_length. For 160/224 not.\n     * \\phpseclib\\Crypt\\Rijndael determines automatically whether mcrypt is useable\n     * or not for the current $block_size/$key_length.\n     * In case of, $cipher_name_mcrypt will be set dynamically at run time accordingly.\n     *\n     * @see \\phpseclib\\Crypt\\Base::cipher_name_mcrypt\n     * @see \\phpseclib\\Crypt\\Base::engine\n     * @see self::isValidEngine()\n     * @var string\n     * @access private\n     */\n    var $cipher_name_mcrypt = 'rijndael-128';\n\n    /**\n     * The default salt used by setPassword()\n     *\n     * @see \\phpseclib\\Crypt\\Base::password_default_salt\n     * @see \\phpseclib\\Crypt\\Base::setPassword()\n     * @var string\n     * @access private\n     */\n    var $password_default_salt = 'phpseclib';\n\n    /**\n     * The Key Schedule\n     *\n     * @see self::_setup()\n     * @var array\n     * @access private\n     */\n    var $w;\n\n    /**\n     * The Inverse Key Schedule\n     *\n     * @see self::_setup()\n     * @var array\n     * @access private\n     */\n    var $dw;\n\n    /**\n     * The Block Length divided by 32\n     *\n     * @see self::setBlockLength()\n     * @var int\n     * @access private\n     * @internal The max value is 256 / 32 = 8, the min value is 128 / 32 = 4.  Exists in conjunction with $block_size\n     *    because the encryption / decryption / key schedule creation requires this number and not $block_size.  We could\n     *    derive this from $block_size or vice versa, but that'd mean we'd have to do multiple shift operations, so in lieu\n     *    of that, we'll just precompute it once.\n     */\n    var $Nb = 4;\n\n    /**\n     * The Key Length (in bytes)\n     *\n     * @see self::setKeyLength()\n     * @var int\n     * @access private\n     * @internal The max value is 256 / 8 = 32, the min value is 128 / 8 = 16.  Exists in conjunction with $Nk\n     *    because the encryption / decryption / key schedule creation requires this number and not $key_length.  We could\n     *    derive this from $key_length or vice versa, but that'd mean we'd have to do multiple shift operations, so in lieu\n     *    of that, we'll just precompute it once.\n     */\n    var $key_length = 16;\n\n    /**\n     * The Key Length divided by 32\n     *\n     * @see self::setKeyLength()\n     * @var int\n     * @access private\n     * @internal The max value is 256 / 32 = 8, the min value is 128 / 32 = 4\n     */\n    var $Nk = 4;\n\n    /**\n     * The Number of Rounds\n     *\n     * @var int\n     * @access private\n     * @internal The max value is 14, the min value is 10.\n     */\n    var $Nr;\n\n    /**\n     * Shift offsets\n     *\n     * @var array\n     * @access private\n     */\n    var $c;\n\n    /**\n     * Holds the last used key- and block_size information\n     *\n     * @var array\n     * @access private\n     */\n    var $kl;\n\n    /**\n     * Sets the key length.\n     *\n     * Valid key lengths are 128, 160, 192, 224, and 256.  If the length is less than 128, it will be rounded up to\n     * 128.  If the length is greater than 128 and invalid, it will be rounded down to the closest valid amount.\n     *\n     * Note: phpseclib extends Rijndael (and AES) for using 160- and 224-bit keys but they are officially not defined\n     *       and the most (if not all) implementations are not able using 160/224-bit keys but round/pad them up to\n     *       192/256 bits as, for example, mcrypt will do.\n     *\n     *       That said, if you want be compatible with other Rijndael and AES implementations,\n     *       you should not setKeyLength(160) or setKeyLength(224).\n     *\n     * Additional: In case of 160- and 224-bit keys, phpseclib will/can, for that reason, not use\n     *             the mcrypt php extension, even if available.\n     *             This results then in slower encryption.\n     *\n     * @access public\n     * @param int $length\n     */\n    function setKeyLength($length)\n    {\n        switch (true) {\n            case $length <= 128:\n                $this->key_length = 16;\n                break;\n            case $length <= 160:\n                $this->key_length = 20;\n                break;\n            case $length <= 192:\n                $this->key_length = 24;\n                break;\n            case $length <= 224:\n                $this->key_length = 28;\n                break;\n            default:\n                $this->key_length = 32;\n        }\n\n        parent::setKeyLength($length);\n    }\n\n    /**\n     * Sets the block length\n     *\n     * Valid block lengths are 128, 160, 192, 224, and 256.  If the length is less than 128, it will be rounded up to\n     * 128.  If the length is greater than 128 and invalid, it will be rounded down to the closest valid amount.\n     *\n     * @access public\n     * @param int $length\n     */\n    function setBlockLength($length)\n    {\n        $length >>= 5;\n        if ($length > 8) {\n            $length = 8;\n        } elseif ($length < 4) {\n            $length = 4;\n        }\n        $this->Nb = $length;\n        $this->block_size = $length << 2;\n        $this->changed = true;\n        $this->_setEngine();\n    }\n\n    /**\n     * Test for engine validity\n     *\n     * This is mainly just a wrapper to set things up for \\phpseclib\\Crypt\\Base::isValidEngine()\n     *\n     * @see \\phpseclib\\Crypt\\Base::__construct()\n     * @param int $engine\n     * @access public\n     * @return bool\n     */\n    function isValidEngine($engine)\n    {\n        switch ($engine) {\n            case self::ENGINE_OPENSSL:\n                if ($this->block_size != 16) {\n                    return false;\n                }\n                $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_length << 3) . '-ecb';\n                $this->cipher_name_openssl = 'aes-' . ($this->key_length << 3) . '-' . $this->_openssl_translate_mode();\n                break;\n            case self::ENGINE_MCRYPT:\n                $this->cipher_name_mcrypt = 'rijndael-' . ($this->block_size << 3);\n                if ($this->key_length % 8) { // is it a 160/224-bit key?\n                    // mcrypt is not usable for them, only for 128/192/256-bit keys\n                    return false;\n                }\n        }\n\n        return parent::isValidEngine($engine);\n    }\n\n    /**\n     * Encrypts a block\n     *\n     * @access private\n     * @param string $in\n     * @return string\n     */\n    function _encryptBlock($in)\n    {\n        static $tables;\n        if (empty($tables)) {\n            $tables = &$this->_getTables();\n        }\n        $t0   = $tables[0];\n        $t1   = $tables[1];\n        $t2   = $tables[2];\n        $t3   = $tables[3];\n        $sbox = $tables[4];\n\n        $state = array();\n        $words = unpack('N*', $in);\n\n        $c = $this->c;\n        $w = $this->w;\n        $Nb = $this->Nb;\n        $Nr = $this->Nr;\n\n        // addRoundKey\n        $wc = $Nb - 1;\n        foreach ($words as $word) {\n            $state[] = $word ^ $w[++$wc];\n        }\n\n        // fips-197.pdf#page=19, \"Figure 5. Pseudo Code for the Cipher\", states that this loop has four components -\n        // subBytes, shiftRows, mixColumns, and addRoundKey. fips-197.pdf#page=30, \"Implementation Suggestions Regarding\n        // Various Platforms\" suggests that performs enhanced implementations are described in Rijndael-ammended.pdf.\n        // Rijndael-ammended.pdf#page=20, \"Implementation aspects / 32-bit processor\", discusses such an optimization.\n        // Unfortunately, the description given there is not quite correct.  Per aes.spec.v316.pdf#page=19 [1],\n        // equation (7.4.7) is supposed to use addition instead of subtraction, so we'll do that here, as well.\n\n        // [1] http://fp.gladman.plus.com/cryptography_technology/rijndael/aes.spec.v316.pdf\n        $temp = array();\n        for ($round = 1; $round < $Nr; ++$round) {\n            $i = 0; // $c[0] == 0\n            $j = $c[1];\n            $k = $c[2];\n            $l = $c[3];\n\n            while ($i < $Nb) {\n                $temp[$i] = $t0[$state[$i] >> 24 & 0x000000FF] ^\n                            $t1[$state[$j] >> 16 & 0x000000FF] ^\n                            $t2[$state[$k] >>  8 & 0x000000FF] ^\n                            $t3[$state[$l]       & 0x000000FF] ^\n                            $w[++$wc];\n                ++$i;\n                $j = ($j + 1) % $Nb;\n                $k = ($k + 1) % $Nb;\n                $l = ($l + 1) % $Nb;\n            }\n            $state = $temp;\n        }\n\n        // subWord\n        for ($i = 0; $i < $Nb; ++$i) {\n            $state[$i] =   $sbox[$state[$i]       & 0x000000FF]        |\n                          ($sbox[$state[$i] >>  8 & 0x000000FF] <<  8) |\n                          ($sbox[$state[$i] >> 16 & 0x000000FF] << 16) |\n                          ($sbox[$state[$i] >> 24 & 0x000000FF] << 24);\n        }\n\n        // shiftRows + addRoundKey\n        $i = 0; // $c[0] == 0\n        $j = $c[1];\n        $k = $c[2];\n        $l = $c[3];\n        while ($i < $Nb) {\n            $temp[$i] = ($state[$i] & 0xFF000000) ^\n                        ($state[$j] & 0x00FF0000) ^\n                        ($state[$k] & 0x0000FF00) ^\n                        ($state[$l] & 0x000000FF) ^\n                         $w[$i];\n            ++$i;\n            $j = ($j + 1) % $Nb;\n            $k = ($k + 1) % $Nb;\n            $l = ($l + 1) % $Nb;\n        }\n\n        switch ($Nb) {\n            case 8:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5], $temp[6], $temp[7]);\n            case 7:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5], $temp[6]);\n            case 6:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5]);\n            case 5:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4]);\n            default:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3]);\n        }\n    }\n\n    /**\n     * Decrypts a block\n     *\n     * @access private\n     * @param string $in\n     * @return string\n     */\n    function _decryptBlock($in)\n    {\n        static $invtables;\n        if (empty($invtables)) {\n            $invtables = &$this->_getInvTables();\n        }\n        $dt0   = $invtables[0];\n        $dt1   = $invtables[1];\n        $dt2   = $invtables[2];\n        $dt3   = $invtables[3];\n        $isbox = $invtables[4];\n\n        $state = array();\n        $words = unpack('N*', $in);\n\n        $c  = $this->c;\n        $dw = $this->dw;\n        $Nb = $this->Nb;\n        $Nr = $this->Nr;\n\n        // addRoundKey\n        $wc = $Nb - 1;\n        foreach ($words as $word) {\n            $state[] = $word ^ $dw[++$wc];\n        }\n\n        $temp = array();\n        for ($round = $Nr - 1; $round > 0; --$round) {\n            $i = 0; // $c[0] == 0\n            $j = $Nb - $c[1];\n            $k = $Nb - $c[2];\n            $l = $Nb - $c[3];\n\n            while ($i < $Nb) {\n                $temp[$i] = $dt0[$state[$i] >> 24 & 0x000000FF] ^\n                            $dt1[$state[$j] >> 16 & 0x000000FF] ^\n                            $dt2[$state[$k] >>  8 & 0x000000FF] ^\n                            $dt3[$state[$l]       & 0x000000FF] ^\n                            $dw[++$wc];\n                ++$i;\n                $j = ($j + 1) % $Nb;\n                $k = ($k + 1) % $Nb;\n                $l = ($l + 1) % $Nb;\n            }\n            $state = $temp;\n        }\n\n        // invShiftRows + invSubWord + addRoundKey\n        $i = 0; // $c[0] == 0\n        $j = $Nb - $c[1];\n        $k = $Nb - $c[2];\n        $l = $Nb - $c[3];\n\n        while ($i < $Nb) {\n            $word = ($state[$i] & 0xFF000000) |\n                    ($state[$j] & 0x00FF0000) |\n                    ($state[$k] & 0x0000FF00) |\n                    ($state[$l] & 0x000000FF);\n\n            $temp[$i] = $dw[$i] ^ ($isbox[$word       & 0x000000FF]        |\n                                  ($isbox[$word >>  8 & 0x000000FF] <<  8) |\n                                  ($isbox[$word >> 16 & 0x000000FF] << 16) |\n                                  ($isbox[$word >> 24 & 0x000000FF] << 24));\n            ++$i;\n            $j = ($j + 1) % $Nb;\n            $k = ($k + 1) % $Nb;\n            $l = ($l + 1) % $Nb;\n        }\n\n        switch ($Nb) {\n            case 8:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5], $temp[6], $temp[7]);\n            case 7:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5], $temp[6]);\n            case 6:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4], $temp[5]);\n            case 5:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3], $temp[4]);\n            default:\n                return pack('N*', $temp[0], $temp[1], $temp[2], $temp[3]);\n        }\n    }\n\n    /**\n     * Setup the key (expansion)\n     *\n     * @see \\phpseclib\\Crypt\\Base::_setupKey()\n     * @access private\n     */\n    function _setupKey()\n    {\n        // Each number in $rcon is equal to the previous number multiplied by two in Rijndael's finite field.\n        // See http://en.wikipedia.org/wiki/Finite_field_arithmetic#Multiplicative_inverse\n        static $rcon = array(0,\n            0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,\n            0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000,\n            0x6C000000, 0xD8000000, 0xAB000000, 0x4D000000, 0x9A000000,\n            0x2F000000, 0x5E000000, 0xBC000000, 0x63000000, 0xC6000000,\n            0x97000000, 0x35000000, 0x6A000000, 0xD4000000, 0xB3000000,\n            0x7D000000, 0xFA000000, 0xEF000000, 0xC5000000, 0x91000000\n        );\n\n        if (isset($this->kl['key']) && $this->key === $this->kl['key'] && $this->key_length === $this->kl['key_length'] && $this->block_size === $this->kl['block_size']) {\n            // already expanded\n            return;\n        }\n        $this->kl = array('key' => $this->key, 'key_length' => $this->key_length, 'block_size' => $this->block_size);\n\n        $this->Nk = $this->key_length >> 2;\n        // see Rijndael-ammended.pdf#page=44\n        $this->Nr = max($this->Nk, $this->Nb) + 6;\n\n        // shift offsets for Nb = 5, 7 are defined in Rijndael-ammended.pdf#page=44,\n        //     \"Table 8: Shift offsets in Shiftrow for the alternative block lengths\"\n        // shift offsets for Nb = 4, 6, 8 are defined in Rijndael-ammended.pdf#page=14,\n        //     \"Table 2: Shift offsets for different block lengths\"\n        switch ($this->Nb) {\n            case 4:\n            case 5:\n            case 6:\n                $this->c = array(0, 1, 2, 3);\n                break;\n            case 7:\n                $this->c = array(0, 1, 2, 4);\n                break;\n            case 8:\n                $this->c = array(0, 1, 3, 4);\n        }\n\n        $w = array_values(unpack('N*words', $this->key));\n\n        $length = $this->Nb * ($this->Nr + 1);\n        for ($i = $this->Nk; $i < $length; $i++) {\n            $temp = $w[$i - 1];\n            if ($i % $this->Nk == 0) {\n                // according to <http://php.net/language.types.integer>, \"the size of an integer is platform-dependent\".\n                // on a 32-bit machine, it's 32-bits, and on a 64-bit machine, it's 64-bits. on a 32-bit machine,\n                // 0xFFFFFFFF << 8 == 0xFFFFFF00, but on a 64-bit machine, it equals 0xFFFFFFFF00. as such, doing 'and'\n                // with 0xFFFFFFFF (or 0xFFFFFF00) on a 32-bit machine is unnecessary, but on a 64-bit machine, it is.\n                $temp = (($temp << 8) & 0xFFFFFF00) | (($temp >> 24) & 0x000000FF); // rotWord\n                $temp = $this->_subWord($temp) ^ $rcon[$i / $this->Nk];\n            } elseif ($this->Nk > 6 && $i % $this->Nk == 4) {\n                $temp = $this->_subWord($temp);\n            }\n            $w[$i] = $w[$i - $this->Nk] ^ $temp;\n        }\n\n        // convert the key schedule from a vector of $Nb * ($Nr + 1) length to a matrix with $Nr + 1 rows and $Nb columns\n        // and generate the inverse key schedule.  more specifically,\n        // according to <http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=23> (section 5.3.3),\n        // \"The key expansion for the Inverse Cipher is defined as follows:\n        //        1. Apply the Key Expansion.\n        //        2. Apply InvMixColumn to all Round Keys except the first and the last one.\"\n        // also, see fips-197.pdf#page=27, \"5.3.5 Equivalent Inverse Cipher\"\n        list($dt0, $dt1, $dt2, $dt3) = $this->_getInvTables();\n        $temp = $this->w = $this->dw = array();\n        for ($i = $row = $col = 0; $i < $length; $i++, $col++) {\n            if ($col == $this->Nb) {\n                if ($row == 0) {\n                    $this->dw[0] = $this->w[0];\n                } else {\n                    // subWord + invMixColumn + invSubWord = invMixColumn\n                    $j = 0;\n                    while ($j < $this->Nb) {\n                        $dw = $this->_subWord($this->w[$row][$j]);\n                        $temp[$j] = $dt0[$dw >> 24 & 0x000000FF] ^\n                                    $dt1[$dw >> 16 & 0x000000FF] ^\n                                    $dt2[$dw >>  8 & 0x000000FF] ^\n                                    $dt3[$dw       & 0x000000FF];\n                        $j++;\n                    }\n                    $this->dw[$row] = $temp;\n                }\n\n                $col = 0;\n                $row++;\n            }\n            $this->w[$row][$col] = $w[$i];\n        }\n\n        $this->dw[$row] = $this->w[$row];\n\n        // Converting to 1-dim key arrays (both ascending)\n        $this->dw = array_reverse($this->dw);\n        $w  = array_pop($this->w);\n        $dw = array_pop($this->dw);\n        foreach ($this->w as $r => $wr) {\n            foreach ($wr as $c => $wc) {\n                $w[]  = $wc;\n                $dw[] = $this->dw[$r][$c];\n            }\n        }\n        $this->w  = $w;\n        $this->dw = $dw;\n    }\n\n    /**\n     * Performs S-Box substitutions\n     *\n     * @access private\n     * @param int $word\n     */\n    function _subWord($word)\n    {\n        static $sbox;\n        if (empty($sbox)) {\n            list(, , , , $sbox) = $this->_getTables();\n        }\n\n        return  $sbox[$word       & 0x000000FF]        |\n               ($sbox[$word >>  8 & 0x000000FF] <<  8) |\n               ($sbox[$word >> 16 & 0x000000FF] << 16) |\n               ($sbox[$word >> 24 & 0x000000FF] << 24);\n    }\n\n    /**\n     * Provides the mixColumns and sboxes tables\n     *\n     * @see self::_encryptBlock()\n     * @see self::_setupInlineCrypt()\n     * @see self::_subWord()\n     * @access private\n     * @return array &$tables\n     */\n    function &_getTables()\n    {\n        static $tables;\n        if (empty($tables)) {\n            // according to <http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf#page=19> (section 5.2.1),\n            // precomputed tables can be used in the mixColumns phase. in that example, they're assigned t0...t3, so\n            // those are the names we'll use.\n            $t3 = array_map('intval', array(\n                // with array_map('intval', ...) we ensure we have only int's and not\n                // some slower floats converted by php automatically on high values\n                0x6363A5C6, 0x7C7C84F8, 0x777799EE, 0x7B7B8DF6, 0xF2F20DFF, 0x6B6BBDD6, 0x6F6FB1DE, 0xC5C55491,\n                0x30305060, 0x01010302, 0x6767A9CE, 0x2B2B7D56, 0xFEFE19E7, 0xD7D762B5, 0xABABE64D, 0x76769AEC,\n                0xCACA458F, 0x82829D1F, 0xC9C94089, 0x7D7D87FA, 0xFAFA15EF, 0x5959EBB2, 0x4747C98E, 0xF0F00BFB,\n                0xADADEC41, 0xD4D467B3, 0xA2A2FD5F, 0xAFAFEA45, 0x9C9CBF23, 0xA4A4F753, 0x727296E4, 0xC0C05B9B,\n                0xB7B7C275, 0xFDFD1CE1, 0x9393AE3D, 0x26266A4C, 0x36365A6C, 0x3F3F417E, 0xF7F702F5, 0xCCCC4F83,\n                0x34345C68, 0xA5A5F451, 0xE5E534D1, 0xF1F108F9, 0x717193E2, 0xD8D873AB, 0x31315362, 0x15153F2A,\n                0x04040C08, 0xC7C75295, 0x23236546, 0xC3C35E9D, 0x18182830, 0x9696A137, 0x05050F0A, 0x9A9AB52F,\n                0x0707090E, 0x12123624, 0x80809B1B, 0xE2E23DDF, 0xEBEB26CD, 0x2727694E, 0xB2B2CD7F, 0x75759FEA,\n                0x09091B12, 0x83839E1D, 0x2C2C7458, 0x1A1A2E34, 0x1B1B2D36, 0x6E6EB2DC, 0x5A5AEEB4, 0xA0A0FB5B,\n                0x5252F6A4, 0x3B3B4D76, 0xD6D661B7, 0xB3B3CE7D, 0x29297B52, 0xE3E33EDD, 0x2F2F715E, 0x84849713,\n                0x5353F5A6, 0xD1D168B9, 0x00000000, 0xEDED2CC1, 0x20206040, 0xFCFC1FE3, 0xB1B1C879, 0x5B5BEDB6,\n                0x6A6ABED4, 0xCBCB468D, 0xBEBED967, 0x39394B72, 0x4A4ADE94, 0x4C4CD498, 0x5858E8B0, 0xCFCF4A85,\n                0xD0D06BBB, 0xEFEF2AC5, 0xAAAAE54F, 0xFBFB16ED, 0x4343C586, 0x4D4DD79A, 0x33335566, 0x85859411,\n                0x4545CF8A, 0xF9F910E9, 0x02020604, 0x7F7F81FE, 0x5050F0A0, 0x3C3C4478, 0x9F9FBA25, 0xA8A8E34B,\n                0x5151F3A2, 0xA3A3FE5D, 0x4040C080, 0x8F8F8A05, 0x9292AD3F, 0x9D9DBC21, 0x38384870, 0xF5F504F1,\n                0xBCBCDF63, 0xB6B6C177, 0xDADA75AF, 0x21216342, 0x10103020, 0xFFFF1AE5, 0xF3F30EFD, 0xD2D26DBF,\n                0xCDCD4C81, 0x0C0C1418, 0x13133526, 0xECEC2FC3, 0x5F5FE1BE, 0x9797A235, 0x4444CC88, 0x1717392E,\n                0xC4C45793, 0xA7A7F255, 0x7E7E82FC, 0x3D3D477A, 0x6464ACC8, 0x5D5DE7BA, 0x19192B32, 0x737395E6,\n                0x6060A0C0, 0x81819819, 0x4F4FD19E, 0xDCDC7FA3, 0x22226644, 0x2A2A7E54, 0x9090AB3B, 0x8888830B,\n                0x4646CA8C, 0xEEEE29C7, 0xB8B8D36B, 0x14143C28, 0xDEDE79A7, 0x5E5EE2BC, 0x0B0B1D16, 0xDBDB76AD,\n                0xE0E03BDB, 0x32325664, 0x3A3A4E74, 0x0A0A1E14, 0x4949DB92, 0x06060A0C, 0x24246C48, 0x5C5CE4B8,\n                0xC2C25D9F, 0xD3D36EBD, 0xACACEF43, 0x6262A6C4, 0x9191A839, 0x9595A431, 0xE4E437D3, 0x79798BF2,\n                0xE7E732D5, 0xC8C8438B, 0x3737596E, 0x6D6DB7DA, 0x8D8D8C01, 0xD5D564B1, 0x4E4ED29C, 0xA9A9E049,\n                0x6C6CB4D8, 0x5656FAAC, 0xF4F407F3, 0xEAEA25CF, 0x6565AFCA, 0x7A7A8EF4, 0xAEAEE947, 0x08081810,\n                0xBABAD56F, 0x787888F0, 0x25256F4A, 0x2E2E725C, 0x1C1C2438, 0xA6A6F157, 0xB4B4C773, 0xC6C65197,\n                0xE8E823CB, 0xDDDD7CA1, 0x74749CE8, 0x1F1F213E, 0x4B4BDD96, 0xBDBDDC61, 0x8B8B860D, 0x8A8A850F,\n                0x707090E0, 0x3E3E427C, 0xB5B5C471, 0x6666AACC, 0x4848D890, 0x03030506, 0xF6F601F7, 0x0E0E121C,\n                0x6161A3C2, 0x35355F6A, 0x5757F9AE, 0xB9B9D069, 0x86869117, 0xC1C15899, 0x1D1D273A, 0x9E9EB927,\n                0xE1E138D9, 0xF8F813EB, 0x9898B32B, 0x11113322, 0x6969BBD2, 0xD9D970A9, 0x8E8E8907, 0x9494A733,\n                0x9B9BB62D, 0x1E1E223C, 0x87879215, 0xE9E920C9, 0xCECE4987, 0x5555FFAA, 0x28287850, 0xDFDF7AA5,\n                0x8C8C8F03, 0xA1A1F859, 0x89898009, 0x0D0D171A, 0xBFBFDA65, 0xE6E631D7, 0x4242C684, 0x6868B8D0,\n                0x4141C382, 0x9999B029, 0x2D2D775A, 0x0F0F111E, 0xB0B0CB7B, 0x5454FCA8, 0xBBBBD66D, 0x16163A2C\n            ));\n\n            foreach ($t3 as $t3i) {\n                $t0[] = (($t3i << 24) & 0xFF000000) | (($t3i >>  8) & 0x00FFFFFF);\n                $t1[] = (($t3i << 16) & 0xFFFF0000) | (($t3i >> 16) & 0x0000FFFF);\n                $t2[] = (($t3i <<  8) & 0xFFFFFF00) | (($t3i >> 24) & 0x000000FF);\n            }\n\n            $tables = array(\n                // The Precomputed mixColumns tables t0 - t3\n                $t0,\n                $t1,\n                $t2,\n                $t3,\n                // The SubByte S-Box\n                array(\n                    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,\n                    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,\n                    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,\n                    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,\n                    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,\n                    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,\n                    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,\n                    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,\n                    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,\n                    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,\n                    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,\n                    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,\n                    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,\n                    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,\n                    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,\n                    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16\n                )\n            );\n        }\n        return $tables;\n    }\n\n    /**\n     * Provides the inverse mixColumns and inverse sboxes tables\n     *\n     * @see self::_decryptBlock()\n     * @see self::_setupInlineCrypt()\n     * @see self::_setupKey()\n     * @access private\n     * @return array &$tables\n     */\n    function &_getInvTables()\n    {\n        static $tables;\n        if (empty($tables)) {\n            $dt3 = array_map('intval', array(\n                0xF4A75051, 0x4165537E, 0x17A4C31A, 0x275E963A, 0xAB6BCB3B, 0x9D45F11F, 0xFA58ABAC, 0xE303934B,\n                0x30FA5520, 0x766DF6AD, 0xCC769188, 0x024C25F5, 0xE5D7FC4F, 0x2ACBD7C5, 0x35448026, 0x62A38FB5,\n                0xB15A49DE, 0xBA1B6725, 0xEA0E9845, 0xFEC0E15D, 0x2F7502C3, 0x4CF01281, 0x4697A38D, 0xD3F9C66B,\n                0x8F5FE703, 0x929C9515, 0x6D7AEBBF, 0x5259DA95, 0xBE832DD4, 0x7421D358, 0xE0692949, 0xC9C8448E,\n                0xC2896A75, 0x8E7978F4, 0x583E6B99, 0xB971DD27, 0xE14FB6BE, 0x88AD17F0, 0x20AC66C9, 0xCE3AB47D,\n                0xDF4A1863, 0x1A3182E5, 0x51336097, 0x537F4562, 0x6477E0B1, 0x6BAE84BB, 0x81A01CFE, 0x082B94F9,\n                0x48685870, 0x45FD198F, 0xDE6C8794, 0x7BF8B752, 0x73D323AB, 0x4B02E272, 0x1F8F57E3, 0x55AB2A66,\n                0xEB2807B2, 0xB5C2032F, 0xC57B9A86, 0x3708A5D3, 0x2887F230, 0xBFA5B223, 0x036ABA02, 0x16825CED,\n                0xCF1C2B8A, 0x79B492A7, 0x07F2F0F3, 0x69E2A14E, 0xDAF4CD65, 0x05BED506, 0x34621FD1, 0xA6FE8AC4,\n                0x2E539D34, 0xF355A0A2, 0x8AE13205, 0xF6EB75A4, 0x83EC390B, 0x60EFAA40, 0x719F065E, 0x6E1051BD,\n                0x218AF93E, 0xDD063D96, 0x3E05AEDD, 0xE6BD464D, 0x548DB591, 0xC45D0571, 0x06D46F04, 0x5015FF60,\n                0x98FB2419, 0xBDE997D6, 0x4043CC89, 0xD99E7767, 0xE842BDB0, 0x898B8807, 0x195B38E7, 0xC8EEDB79,\n                0x7C0A47A1, 0x420FE97C, 0x841EC9F8, 0x00000000, 0x80868309, 0x2BED4832, 0x1170AC1E, 0x5A724E6C,\n                0x0EFFFBFD, 0x8538560F, 0xAED51E3D, 0x2D392736, 0x0FD9640A, 0x5CA62168, 0x5B54D19B, 0x362E3A24,\n                0x0A67B10C, 0x57E70F93, 0xEE96D2B4, 0x9B919E1B, 0xC0C54F80, 0xDC20A261, 0x774B695A, 0x121A161C,\n                0x93BA0AE2, 0xA02AE5C0, 0x22E0433C, 0x1B171D12, 0x090D0B0E, 0x8BC7ADF2, 0xB6A8B92D, 0x1EA9C814,\n                0xF1198557, 0x75074CAF, 0x99DDBBEE, 0x7F60FDA3, 0x01269FF7, 0x72F5BC5C, 0x663BC544, 0xFB7E345B,\n                0x4329768B, 0x23C6DCCB, 0xEDFC68B6, 0xE4F163B8, 0x31DCCAD7, 0x63851042, 0x97224013, 0xC6112084,\n                0x4A247D85, 0xBB3DF8D2, 0xF93211AE, 0x29A16DC7, 0x9E2F4B1D, 0xB230F3DC, 0x8652EC0D, 0xC1E3D077,\n                0xB3166C2B, 0x70B999A9, 0x9448FA11, 0xE9642247, 0xFC8CC4A8, 0xF03F1AA0, 0x7D2CD856, 0x3390EF22,\n                0x494EC787, 0x38D1C1D9, 0xCAA2FE8C, 0xD40B3698, 0xF581CFA6, 0x7ADE28A5, 0xB78E26DA, 0xADBFA43F,\n                0x3A9DE42C, 0x78920D50, 0x5FCC9B6A, 0x7E466254, 0x8D13C2F6, 0xD8B8E890, 0x39F75E2E, 0xC3AFF582,\n                0x5D80BE9F, 0xD0937C69, 0xD52DA96F, 0x2512B3CF, 0xAC993BC8, 0x187DA710, 0x9C636EE8, 0x3BBB7BDB,\n                0x267809CD, 0x5918F46E, 0x9AB701EC, 0x4F9AA883, 0x956E65E6, 0xFFE67EAA, 0xBCCF0821, 0x15E8E6EF,\n                0xE79BD9BA, 0x6F36CE4A, 0x9F09D4EA, 0xB07CD629, 0xA4B2AF31, 0x3F23312A, 0xA59430C6, 0xA266C035,\n                0x4EBC3774, 0x82CAA6FC, 0x90D0B0E0, 0xA7D81533, 0x04984AF1, 0xECDAF741, 0xCD500E7F, 0x91F62F17,\n                0x4DD68D76, 0xEFB04D43, 0xAA4D54CC, 0x9604DFE4, 0xD1B5E39E, 0x6A881B4C, 0x2C1FB8C1, 0x65517F46,\n                0x5EEA049D, 0x8C355D01, 0x877473FA, 0x0B412EFB, 0x671D5AB3, 0xDBD25292, 0x105633E9, 0xD647136D,\n                0xD7618C9A, 0xA10C7A37, 0xF8148E59, 0x133C89EB, 0xA927EECE, 0x61C935B7, 0x1CE5EDE1, 0x47B13C7A,\n                0xD2DF599C, 0xF2733F55, 0x14CE7918, 0xC737BF73, 0xF7CDEA53, 0xFDAA5B5F, 0x3D6F14DF, 0x44DB8678,\n                0xAFF381CA, 0x68C43EB9, 0x24342C38, 0xA3405FC2, 0x1DC37216, 0xE2250CBC, 0x3C498B28, 0x0D9541FF,\n                0xA8017139, 0x0CB3DE08, 0xB4E49CD8, 0x56C19064, 0xCB84617B, 0x32B670D5, 0x6C5C7448, 0xB85742D0\n            ));\n\n            foreach ($dt3 as $dt3i) {\n                $dt0[] = (($dt3i << 24) & 0xFF000000) | (($dt3i >>  8) & 0x00FFFFFF);\n                $dt1[] = (($dt3i << 16) & 0xFFFF0000) | (($dt3i >> 16) & 0x0000FFFF);\n                $dt2[] = (($dt3i <<  8) & 0xFFFFFF00) | (($dt3i >> 24) & 0x000000FF);\n            };\n\n            $tables = array(\n                // The Precomputed inverse mixColumns tables dt0 - dt3\n                $dt0,\n                $dt1,\n                $dt2,\n                $dt3,\n                // The inverse SubByte S-Box\n                array(\n                    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,\n                    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,\n                    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,\n                    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,\n                    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,\n                    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,\n                    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,\n                    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,\n                    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,\n                    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,\n                    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,\n                    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,\n                    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,\n                    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,\n                    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,\n                    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D\n                )\n            );\n        }\n        return $tables;\n    }\n\n    /**\n     * Setup the performance-optimized function for de/encrypt()\n     *\n     * @see \\phpseclib\\Crypt\\Base::_setupInlineCrypt()\n     * @access private\n     */\n    function _setupInlineCrypt()\n    {\n        // Note: _setupInlineCrypt() will be called only if $this->changed === true\n        // So here we are'nt under the same heavy timing-stress as we are in _de/encryptBlock() or de/encrypt().\n        // However...the here generated function- $code, stored as php callback in $this->inline_crypt, must work as fast as even possible.\n\n        $lambda_functions =& self::_getLambdaFunctions();\n\n        // We create max. 10 hi-optimized code for memory reason. Means: For each $key one ultra fast inline-crypt function.\n        // (Currently, for Crypt_Rijndael/AES, one generated $lambda_function cost on php5.5@32bit ~80kb unfreeable mem and ~130kb on php5.5@64bit)\n        // After that, we'll still create very fast optimized code but not the hi-ultimative code, for each $mode one.\n        $gen_hi_opt_code = (bool)(count($lambda_functions) < 10);\n\n        // Generation of a uniqe hash for our generated code\n        $code_hash = \"Crypt_Rijndael, {$this->mode}, {$this->Nr}, {$this->Nb}\";\n        if ($gen_hi_opt_code) {\n            $code_hash = str_pad($code_hash, 32) . $this->_hashInlineCryptFunction($this->key);\n        }\n\n        if (!isset($lambda_functions[$code_hash])) {\n            switch (true) {\n                case $gen_hi_opt_code:\n                    // The hi-optimized $lambda_functions will use the key-words hardcoded for better performance.\n                    $w  = $this->w;\n                    $dw = $this->dw;\n                    $init_encrypt = '';\n                    $init_decrypt = '';\n                    break;\n                default:\n                    for ($i = 0, $cw = count($this->w); $i < $cw; ++$i) {\n                        $w[]  = '$w['  . $i . ']';\n                        $dw[] = '$dw[' . $i . ']';\n                    }\n                    $init_encrypt = '$w  = $self->w;';\n                    $init_decrypt = '$dw = $self->dw;';\n            }\n\n            $Nr = $this->Nr;\n            $Nb = $this->Nb;\n            $c  = $this->c;\n\n            // Generating encrypt code:\n            $init_encrypt.= '\n                static $tables;\n                if (empty($tables)) {\n                    $tables = &$self->_getTables();\n                }\n                $t0   = $tables[0];\n                $t1   = $tables[1];\n                $t2   = $tables[2];\n                $t3   = $tables[3];\n                $sbox = $tables[4];\n            ';\n\n            $s  = 'e';\n            $e  = 's';\n            $wc = $Nb - 1;\n\n            // Preround: addRoundKey\n            $encrypt_block = '$in = unpack(\"N*\", $in);'.\"\\n\";\n            for ($i = 0; $i < $Nb; ++$i) {\n                $encrypt_block .= '$s'.$i.' = $in['.($i + 1).'] ^ '.$w[++$wc].\";\\n\";\n            }\n\n            // Mainrounds: shiftRows + subWord + mixColumns + addRoundKey\n            for ($round = 1; $round < $Nr; ++$round) {\n                list($s, $e) = array($e, $s);\n                for ($i = 0; $i < $Nb; ++$i) {\n                    $encrypt_block.=\n                        '$'.$e.$i.' =\n                        $t0[($'.$s.$i                  .' >> 24) & 0xff] ^\n                        $t1[($'.$s.(($i + $c[1]) % $Nb).' >> 16) & 0xff] ^\n                        $t2[($'.$s.(($i + $c[2]) % $Nb).' >>  8) & 0xff] ^\n                        $t3[ $'.$s.(($i + $c[3]) % $Nb).'        & 0xff] ^\n                        '.$w[++$wc].\";\\n\";\n                }\n            }\n\n            // Finalround: subWord + shiftRows + addRoundKey\n            for ($i = 0; $i < $Nb; ++$i) {\n                $encrypt_block.=\n                    '$'.$e.$i.' =\n                     $sbox[ $'.$e.$i.'        & 0xff]        |\n                    ($sbox[($'.$e.$i.' >>  8) & 0xff] <<  8) |\n                    ($sbox[($'.$e.$i.' >> 16) & 0xff] << 16) |\n                    ($sbox[($'.$e.$i.' >> 24) & 0xff] << 24);'.\"\\n\";\n            }\n            $encrypt_block .= '$in = pack(\"N*\"'.\"\\n\";\n            for ($i = 0; $i < $Nb; ++$i) {\n                $encrypt_block.= ',\n                    ($'.$e.$i                  .' & '.((int)0xFF000000).') ^\n                    ($'.$e.(($i + $c[1]) % $Nb).' &         0x00FF0000   ) ^\n                    ($'.$e.(($i + $c[2]) % $Nb).' &         0x0000FF00   ) ^\n                    ($'.$e.(($i + $c[3]) % $Nb).' &         0x000000FF   ) ^\n                    '.$w[$i].\"\\n\";\n            }\n            $encrypt_block .= ');';\n\n            // Generating decrypt code:\n            $init_decrypt.= '\n                static $invtables;\n                if (empty($invtables)) {\n                    $invtables = &$self->_getInvTables();\n                }\n                $dt0   = $invtables[0];\n                $dt1   = $invtables[1];\n                $dt2   = $invtables[2];\n                $dt3   = $invtables[3];\n                $isbox = $invtables[4];\n            ';\n\n            $s  = 'e';\n            $e  = 's';\n            $wc = $Nb - 1;\n\n            // Preround: addRoundKey\n            $decrypt_block = '$in = unpack(\"N*\", $in);'.\"\\n\";\n            for ($i = 0; $i < $Nb; ++$i) {\n                $decrypt_block .= '$s'.$i.' = $in['.($i + 1).'] ^ '.$dw[++$wc].';'.\"\\n\";\n            }\n\n            // Mainrounds: shiftRows + subWord + mixColumns + addRoundKey\n            for ($round = 1; $round < $Nr; ++$round) {\n                list($s, $e) = array($e, $s);\n                for ($i = 0; $i < $Nb; ++$i) {\n                    $decrypt_block.=\n                        '$'.$e.$i.' =\n                        $dt0[($'.$s.$i                        .' >> 24) & 0xff] ^\n                        $dt1[($'.$s.(($Nb + $i - $c[1]) % $Nb).' >> 16) & 0xff] ^\n                        $dt2[($'.$s.(($Nb + $i - $c[2]) % $Nb).' >>  8) & 0xff] ^\n                        $dt3[ $'.$s.(($Nb + $i - $c[3]) % $Nb).'        & 0xff] ^\n                        '.$dw[++$wc].\";\\n\";\n                }\n            }\n\n            // Finalround: subWord + shiftRows + addRoundKey\n            for ($i = 0; $i < $Nb; ++$i) {\n                $decrypt_block.=\n                    '$'.$e.$i.' =\n                     $isbox[ $'.$e.$i.'        & 0xff]        |\n                    ($isbox[($'.$e.$i.' >>  8) & 0xff] <<  8) |\n                    ($isbox[($'.$e.$i.' >> 16) & 0xff] << 16) |\n                    ($isbox[($'.$e.$i.' >> 24) & 0xff] << 24);'.\"\\n\";\n            }\n            $decrypt_block .= '$in = pack(\"N*\"'.\"\\n\";\n            for ($i = 0; $i < $Nb; ++$i) {\n                $decrypt_block.= ',\n                    ($'.$e.$i.                        ' & '.((int)0xFF000000).') ^\n                    ($'.$e.(($Nb + $i - $c[1]) % $Nb).' &         0x00FF0000   ) ^\n                    ($'.$e.(($Nb + $i - $c[2]) % $Nb).' &         0x0000FF00   ) ^\n                    ($'.$e.(($Nb + $i - $c[3]) % $Nb).' &         0x000000FF   ) ^\n                    '.$dw[$i].\"\\n\";\n            }\n            $decrypt_block .= ');';\n\n            $lambda_functions[$code_hash] = $this->_createInlineCryptFunction(\n                array(\n                   'init_crypt'    => '',\n                   'init_encrypt'  => $init_encrypt,\n                   'init_decrypt'  => $init_decrypt,\n                   'encrypt_block' => $encrypt_block,\n                   'decrypt_block' => $decrypt_block\n                )\n            );\n        }\n        $this->inline_crypt = $lambda_functions[$code_hash];\n    }\n}\n"], "filenames": ["libraries/phpseclib/Crypt/AES.php", "libraries/phpseclib/Crypt/Rijndael.php"], "buggy_code_start_loc": [48, 53], "buggy_code_end_loc": [48, 53], "fixing_code_start_loc": [49, 54], "fixing_code_end_loc": [52, 57], "type": "CWE-200", "message": "phpMyAdmin 4.4.x before 4.4.15.3 and 4.5.x before 4.5.4 allows remote attackers to obtain sensitive information via a crafted request to (1) libraries/phpseclib/Crypt/AES.php or (2) libraries/phpseclib/Crypt/Rijndael.php, which reveals the full path in an error message.", "other": {"cve": {"id": "CVE-2016-2042", "sourceIdentifier": "cve@mitre.org", "published": "2016-02-20T01:59:05.470", "lastModified": "2018-10-30T16:27:35.843", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "phpMyAdmin 4.4.x before 4.4.15.3 and 4.5.x before 4.5.4 allows remote attackers to obtain sensitive information via a crafted request to (1) libraries/phpseclib/Crypt/AES.php or (2) libraries/phpseclib/Crypt/Rijndael.php, which reveals the full path in an error message."}, {"lang": "es", "value": "phpMyAdmin 4.4.x en versiones anteriores a 4.4.15.3 y 4.5.x en versiones anteriores a 4.5.4 permite a atacantes remotos obtener informaci\u00f3n sensible a trav\u00e9s de una petici\u00f3n manipulada a (1) libraries/phpseclib/Crypt/AES.php o (2) libraries/phpseclib/Crypt/Rijndael.php, lo cual revela la ruta completa en un mensaje de error."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.1:*:*:*:*:*:*:*", "matchCriteriaId": "4863BE36-D16A-4D75-90D9-FD76DB5B48B7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.2:*:*:*:*:*:*:*", "matchCriteriaId": "03117DF1-3BEC-4B8D-AD63-DBBDB2126081"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:22:*:*:*:*:*:*:*", "matchCriteriaId": "253C303A-E577-4488-93E6-68A8DD942C38"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:23:*:*:*:*:*:*:*", "matchCriteriaId": "E79AB8DD-C907-4038-A931-1A5A4CFB6A5B"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "DFF55485-9892-4E7B-AEE0-017E61EAA7C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "6100FE3E-0A31-4B55-90F2-90AF765A8EB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "FBAAC8D9-AAA5-487C-B4AA-84BAE5DB109E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "5E06B1D3-29B4-45B7-B81F-C864AF579011"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "6B2E3923-0E2B-411A-B091-088E6FF050D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "1848C748-804D-4FE4-AB9C-B1BF9E58A19C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "12296322-DFAD-4B36-83EC-D01BF5DF7F2A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "EA321C14-C8F4-41FC-B601-2F646064ABBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "54DBCF86-0CE8-46C4-B2E7-E3224765CCFE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "1BF3DBC5-7020-48D0-ADEA-E71776DB2285"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "317F952E-5F12-4ED3-8FA3-FC1106B50F85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "87B97F98-C0A7-4D9E-8333-7EE9EC456A12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "7A1E753D-5653-4D7A-8E41-6C02511EBFCE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "417230C7-0EC2-49F4-B810-A8AE84A302AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "103FEAB1-194E-4CEF-935A-4DBCCA298205"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13.1:*:*:*:*:*:*:*", "matchCriteriaId": "C5814003-9FF8-4F8E-9D90-A2BBB80B8451"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14.1:*:*:*:*:*:*:*", "matchCriteriaId": "16D28B77-9353-4259-9299-30638A78CCD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "C022292B-6E06-4328-842F-135A872D22AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.1:*:*:*:*:*:*:*", "matchCriteriaId": "F15F00FB-BB9B-4D54-B198-0A74D418B8DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.2:*:*:*:*:*:*:*", "matchCriteriaId": "DC10AF20-7B65-4FAE-A2AD-783867D60A8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.3:*:*:*:*:*:*:*", "matchCriteriaId": "4EB7190C-0401-4E2E-B15F-4CFC79D5A4E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "A4D7AAF1-64FF-40C9-90B2-DEC814157372"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "96D529F5-8870-4934-BCD8-E49095D21224"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "296EB2FA-FCAD-4BD5-A015-62765407AFE5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "4DBD0DC7-64D0-42B1-8EEE-73A0214680F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "A6A15D1E-83ED-47EC-B17C-E6BCC49DE83D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "4112ACFF-D40E-45BE-9307-F710E7B41ECD"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176483.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176739.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00028.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00049.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.phpmyadmin.net/home_page/security/PMASA-2016-6.php", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/5a3de108f26e4b0dddadddbe8ccdb1dd5526771f", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/5a3de108f26e4b0dddadddbe8ccdb1dd5526771f"}}