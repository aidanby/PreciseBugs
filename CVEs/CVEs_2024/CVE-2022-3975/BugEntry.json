{"buggy_code": ["<?php\n\n/**\n * NukeViet Content Management System\n * @version 4.x\n * @author VINADES.,JSC <contact@vinades.vn>\n * @copyright (C) 2009-2021 VINADES.,JSC. All rights reserved\n * @license GNU/GPL version 2 or any later version\n * @see https://github.com/nukeviet The NukeViet CMS GitHub project\n */\n\nnamespace NukeViet\\Core;\n\n/**\n * NukeViet\\Core\\Request\n *\n * @package NukeViet\\Core\n * @author VINADES.,JSC <contact@vinades.vn>\n * @copyright (C) 2009-2021 VINADES.,JSC. All rights reserved\n * @version 4.5.00\n * @access public\n */\nclass Request\n{\n    const IS_HEADERS_SENT = 'Warning: Headers already sent';\n\n    const INCORRECT_IP = 'Incorrect IP address specified';\n\n    const INCORRECT_ORIGIN = 'Incorrect Origin specified';\n\n    const REQUEST_BLOCKED = 'Your request is blocked';\n\n    public $session_id;\n\n    public $doc_root;\n\n    public $site_url;\n\n    public $base_siteurl;\n\n    public $base_adminurl;\n\n    public $server_name;\n\n    public $server_protocol;\n\n    public $server_port;\n\n    public $my_current_domain;\n\n    public $headerstatus;\n\n    public $session_save_path;\n\n    public $cookie_path;\n\n    public $cookie_domain;\n\n    public $referer;\n\n    private $origin;\n\n    private $method;\n\n    /**\n     * @var int\n     *\n     * 0 cross origin referer\n     * 1 same origin referer\n     * 2 kh\u00f4ng c\u00f3 referer\n     */\n    public $referer_key;\n\n    /**\n     * @var int\n     *\n     * 0 cross origin\n     * 1 same origin\n     * 2 no origin header\n     */\n    private $origin_key;\n\n    public $referer_host = '';\n\n    public $referer_queries = false;\n\n    public $request_uri;\n\n    public $user_agent;\n\n    public $search_engine = '';\n\n    private $request_default_mode = 'request';\n\n    private $allow_request_mods = [\n        'get',\n        'post',\n        'request',\n        'cookie',\n        'session',\n        'env',\n        'server'\n    ];\n\n    private $cookie_prefix = 'NV4';\n\n    private $session_prefix = 'NV4';\n\n    private $cookie_key = 'nv4';\n\n    private $secure = false;\n\n    private $httponly = true;\n\n    private $SameSite = '';\n\n    private $set_cookie_by_options = false;\n\n    private $ip_addr;\n\n    private $remote_ip;\n\n    private $str_referer_blocker = false;\n\n    private $engine_allowed = [];\n\n    // Cac tags bi cam dung mac dinh, co the go bo bang cach thay doi cac tags cho phep cua NV_ALLOWED_HTML_TAGS\n    private $disabletags = [\n        'applet',\n        'body',\n        'basefont',\n        'head',\n        'html',\n        'id',\n        'meta',\n        'xml',\n        'blink',\n        'link',\n        'style',\n        'script',\n        'iframe',\n        'frame',\n        'frameset',\n        'ilayer',\n        'layer',\n        'bgsound',\n        'title',\n        'base'\n    ];\n\n    protected $remoteAttrCheck = [\n        'action' => ['form'],\n        'src' => ['iframe', 'embed'],\n        'data' => ['object']\n    ];\n\n    /**\n     * C\u00e1c attr b\u1ecb c\u1ea5m, s\u1ebd b\u1ecb l\u1ecdc b\u1ecf.\n     * - T\u1ea5t c\u1ea3 c\u00e1c arrt b\u1eaft \u0111\u1ea7u b\u1eb1ng on\n     * - C\u00e1c attr b\u00ean d\u01b0\u1edbi\n     */\n    private $disabledattributes = [\n        'action',\n        'background',\n        'codebase',\n        'dynsrc',\n        'lowsrc',\n        'allownetworking', // Control a SWF file\u2019s access to network functionality by setting the allowNetworking parameter = internal\n        'allowscriptaccess', // Lo\u1ea1i b\u1ecf \u0111i\u1ec1u khi\u1ec3n cho ph\u00e9p javascript trong embed, t\u1ef1 \u0111\u1ed9ng \u0111\u1eb7t = never\n        'fscommand', // attacker can use this when executed from within an embedded Flash object\n        'seeksegmenttime' // this is a method that locates the specified point on the element\u2019s segment time line and begins playing from that point. The segment consists of one repetition of the time line including reverse play using the AUTOREVERSE attribute.\n    ];\n\n    private $disablecomannds = [\n        'base64_decode',\n        'cmd',\n        'passthru',\n        'eval',\n        'exec',\n        'system',\n        'fopen',\n        'fsockopen',\n        'file',\n        'file_get_contents',\n        'readfile',\n        'unlink'\n    ];\n\n    /**\n     * @var array\n     */\n    protected $corsHeaders = [\n        'Access-Control-Allow-Origin' => '*',\n        'Access-Control-Allow-Headers' => 'Origin, X-Requested-With, Content-Type', // C\u00e1c Header \u0111\u01b0\u1ee3c ph\u00e9p trong CORS\n        'Access-Control-Allow-Methods' => 'PUT, GET, POST, DELETE, OPTIONS', // C\u00e1c ph\u01b0\u01a1ng th\u01b0\u1edbc \u0111\u01b0\u1ee3c ph\u00e9p trong CORS\n        'Access-Control-Allow-Credentials' => 'true', // Cho ph\u00e9p g\u1eedi cookie trong truy v\u1ea5n CORS\n        'Access-Control-Max-Age' => 10 * 60 * 60, // 10 min, max age for Chrome. Th\u1eddi gian cache preflight request (request OPTIONS ki\u1ec3m tra)\n        'Vary' => 'Origin' // Th\u00f4ng b\u00e1o cho tr\u00ecnh duy\u1ec7t bi\u1ebft, m\u1ed7i Origin kh\u00e1c nhau s\u1ebd c\u00f3 m\u1ed7i ph\u1ea3n h\u1ed3i kh\u00e1c nhau thay v\u00ec d\u00f9ng *\n    ];\n\n    /**\n     * @since 4.4.01\n     */\n    protected $restrictCrossDomain = true;\n    protected $validCrossDomains = [];\n    protected $validCrossIPs = [];\n\n    protected $isOriginValid = false;\n    protected $isRefererValid = false;\n\n    protected $isIpValid = false;\n\n    protected $isRestrictDomain = true;\n    protected $validDomains = [];\n\n    /**\n     * @since 4.5.00\n     */\n    private $allowNullOrigin = false;\n    private $allowNullOriginIps = [];\n\n    /**\n     * __construct()\n     *\n     * @param array                 $config\n     * @param string                $ip\n     * @param \\NukeViet\\Core\\Server $nv_Server\n     */\n    public function __construct($config, $ip, $nv_Server = false)\n    {\n        if (isset($config['allowed_html_tags']) and is_array($config['allowed_html_tags'])) {\n            $this->disabletags = array_diff($this->disabletags, $config['allowed_html_tags']);\n        }\n        if (!empty($config['allow_request_mods'])) {\n            if (!is_array($config['allow_request_mods'])) {\n                $config['allow_request_mods'] = [$config['allow_request_mods']];\n            }\n            $this->allow_request_mods = array_intersect($this->allow_request_mods, $config['allow_request_mods']);\n        }\n        if (!empty($config['request_default_mode']) and in_array($config['request_default_mode'], $this->allow_request_mods, true)) {\n            $this->request_default_mode = $config['request_default_mode'];\n        }\n        if (!empty($config['cookie_secure'])) {\n            $this->secure = true;\n        }\n        if (!empty($config['cookie_httponly'])) {\n            $this->httponly = true;\n        }\n        if (!empty($config['cookie_SameSite']) and in_array($config['cookie_SameSite'], [\n            'Lax',\n            'Strict',\n            'None'\n        ], true)) {\n            $this->SameSite = $config['cookie_SameSite'];\n        }\n        $this->set_cookie_by_options = version_compare(PHP_VERSION, '7.3.0', '>=');\n        if (!empty($config['cookie_prefix'])) {\n            $this->cookie_prefix = preg_replace('/[^a-zA-Z0-9\\_]+/', '', $config['cookie_prefix']);\n        }\n        if (!empty($config['session_prefix'])) {\n            $this->session_prefix = preg_replace('/[^a-zA-Z0-9\\_]+/', '', $config['session_prefix']);\n        }\n        if (!empty($config['sitekey'])) {\n            $this->cookie_key = $config['sitekey'];\n        }\n        if (!empty($config['str_referer_blocker'])) {\n            $this->str_referer_blocker = true;\n        }\n        $this->engine_allowed = (array) $config['engine_allowed'];\n        if (empty($ip)) {\n            $ip = $_SERVER['REMOTE_ADDR'];\n        }\n        $this->remote_ip = $ip;\n\n        if (defined('NV_ADMIN')) {\n            $this->restrictCrossDomain = !empty($config['crossadmin_restrict']) ? true : false;\n            $this->validCrossDomains = !empty($config['crossadmin_valid_domains']) ? ((array) $config['crossadmin_valid_domains']) : [];\n            $this->validCrossIPs = !empty($config['crossadmin_valid_ips']) ? ((array) $config['crossadmin_valid_ips']) : [];\n        } elseif (defined('NV_REMOTE_API')) {\n            $this->restrictCrossDomain = false;\n            $this->validCrossDomains = [];\n            $this->validCrossIPs = [];\n        } else {\n            $this->restrictCrossDomain = !empty($config['crosssite_restrict']) ? true : false;\n            $this->validCrossDomains = !empty($config['crosssite_valid_domains']) ? ((array) $config['crosssite_valid_domains']) : [];\n            $this->validCrossIPs = !empty($config['crosssite_valid_ips']) ? ((array) $config['crosssite_valid_ips']) : [];\n        }\n\n        $this->isRestrictDomain = !empty($config['domains_restrict']) ? true : false;\n        $this->validDomains = !empty($config['domains_whitelist']) ? ((array) $config['domains_whitelist']) : [];\n        $this->allowNullOrigin = !empty($config['allow_null_origin']) ? true : false;\n        $this->allowNullOriginIps = !empty($config['ip_allow_null_origin']) ? ((array) $config['ip_allow_null_origin']) : [];\n\n        if (preg_match('#^(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$#', $ip)) {\n            $ip2long = ip2long($ip);\n        } else {\n            if (substr_count($ip, '::')) {\n                $ip = str_replace('::', str_repeat(':0000', 8 - substr_count($ip, ':')) . ':', $ip);\n            }\n            $ip = explode(':', $ip);\n            $r_ip = '';\n            foreach ($ip as $v) {\n                $r_ip .= str_pad(base_convert($v, 16, 2), 16, 0, STR_PAD_LEFT);\n            }\n            $ip2long = base_convert($r_ip, 2, 10);\n        }\n\n        if ($ip2long == -1 or $ip2long === false) {\n            trigger_error(Request::INCORRECT_IP, 256);\n        }\n        $this->ip_addr = $ip2long;\n\n        $this->cookie_key = md5($this->cookie_key);\n\n        if ($nv_Server === false) {\n            $nv_Server = new Server();\n        }\n        $this->Initialize($nv_Server);\n        $this->get_cookie_save_path();\n\n        $this->sessionStart(!empty($config['https_only']));\n        $_REQUEST = array_merge($_POST, array_diff_key($_GET, $_POST));\n    }\n\n    /**\n     * get_Env()\n     *\n     * @param string $key\n     * @return string\n     */\n    private function get_Env($key)\n    {\n        if (!is_array($key)) {\n            $key = [$key];\n        }\n        foreach ($key as $k) {\n            if (isset($_SERVER[$k])) {\n                return $_SERVER[$k];\n            }\n            if (isset($_ENV[$k])) {\n                return $_ENV[$k];\n            }\n            if (@getenv($k)) {\n                return @getenv($k);\n            }\n            if (function_exists('apache_getenv') and apache_getenv($k, true)) {\n                return apache_getenv($k, true);\n            }\n        }\n\n        return '';\n    }\n\n    /**\n     * Initialize()\n     *\n     * @param \\NukeViet\\Core\\Server $nv_Server\n     */\n    private function Initialize($nv_Server)\n    {\n        if (sizeof($_GET)) {\n            $array_keys = array_keys($_GET);\n            foreach ($array_keys as $k) {\n                if (!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) or is_numeric($k)) {\n                    unset($_GET[$k]);\n                }\n            }\n        }\n        if (sizeof($_POST)) {\n            $array_keys = array_keys($_POST);\n            foreach ($array_keys as $k) {\n                if ((!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) and $k != 'g-recaptcha-response') or is_numeric($k)) {\n                    unset($_POST[$k]);\n                }\n            }\n        }\n        if (sizeof($_COOKIE)) {\n            $array_keys = array_keys($_COOKIE);\n            foreach ($array_keys as $k) {\n                if (!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) or is_numeric($k)) {\n                    @setcookie($k, '', NV_CURRENTTIME - 3600);\n                    unset($_COOKIE[$k]);\n                }\n            }\n        }\n        if (sizeof($_FILES) and strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {\n            $array_keys = array_keys($_FILES);\n            foreach ($array_keys as $k) {\n                if (!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) or is_numeric($k)) {\n                    unset($_FILES[$k]);\n                }\n            }\n        }\n        $query = http_build_query($_GET);\n        $_SERVER['QUERY_STRING'] = $query;\n        $_SERVER['argv'] = [$query];\n        $this->request_uri = (empty($_SERVER['REQUEST_URI'])) ? $_SERVER['PHP_SELF'] . '?' . $_SERVER['QUERY_STRING'] : $_SERVER['REQUEST_URI'];\n        $doc_root = isset($_SERVER['DOCUMENT_ROOT']) ? preg_replace('/[\\/]+$/', '', str_replace(DIRECTORY_SEPARATOR, '/', $_SERVER['DOCUMENT_ROOT'])) : '';\n\n        if (defined('NV_BASE_SITEURL')) {\n            $base_siteurl = preg_replace('/[\\/]+$/', '', NV_BASE_SITEURL);\n        } else {\n            $base_siteurl = $nv_Server->getWebsitePath();\n        }\n\n        if (NV_ROOTDIR !== $doc_root . $base_siteurl) {\n            $doc_root = NV_ROOTDIR;\n            $count = substr_count($base_siteurl, '/');\n            for ($i = 0; $i < $count; ++$i) {\n                $doc_root = preg_replace('#\\/[^\\/]+$#', '', $doc_root);\n            }\n            $_SERVER['DOCUMENT_ROOT'] = $doc_root;\n        }\n        $_SERVER['SCRIPT_FILENAME'] = $_SERVER['DOCUMENT_ROOT'] . $_SERVER['PHP_SELF'];\n        $_SERVER['SERVER_PORT'] = $this->get_Env('SERVER_PORT');\n        $_SERVER['SERVER_PROTOCOL'] = $this->get_Env('SERVER_PROTOCOL');\n\n        if (defined('NV_SERVER_NAME')) {\n            $this->server_name = NV_SERVER_NAME;\n        } else {\n            $this->server_name = $nv_Server->getServerHost();\n        }\n        if (defined('NV_SERVER_PROTOCOL')) {\n            $this->server_protocol = NV_SERVER_PROTOCOL;\n        } else {\n            $this->server_protocol = $nv_Server->getServerProtocol();\n        }\n        if (defined('NV_SERVER_PORT')) {\n            $this->server_port = NV_SERVER_PORT;\n        } else {\n            $this->server_port = $nv_Server->getServerPort();\n        }\n\n        $this->base_siteurl = $base_siteurl;\n        $this->base_adminurl = $base_siteurl . (NV_ADMINDIR != '' ? '/' . NV_ADMINDIR : '');\n        $this->doc_root = $doc_root;\n\n        if (defined('NV_MY_DOMAIN')) {\n            $this->my_current_domain = NV_MY_DOMAIN;\n        } else {\n            $this->my_current_domain = $nv_Server->getOriginalDomain();\n        }\n\n        $this->headerstatus = (substr(php_sapi_name(), 0, 3) == 'cgi') ? 'Status:' : $_SERVER['SERVER_PROTOCOL'];\n        $this->site_url = $this->my_current_domain . $this->base_siteurl;\n        $this->standardizeReferer();\n        $this->standardizeOrigin();\n        $this->method = strtoupper($this->get_Env(['REQUEST_METHOD', 'Method']));\n\n        // CORS handle\n        if (!empty($this->origin)) {\n            $this->corsHeaders['Access-Control-Allow-Origin'] = $this->getAllowOriginHeaderValue();\n            $hasControlRequestHeader = $this->get_Env(['HTTP_ACCESS_CONTROL_REQUEST_HEADERS', 'Access-Control-Request-Headers']);\n\n            foreach ($this->corsHeaders as $header => $value) {\n                header($header . ': ' . $value);\n            }\n\n            // Ki\u1ec3m tra preflight request\n            if ($this->method == 'OPTIONS' and !empty($hasControlRequestHeader)) {\n                exit(0);\n            }\n        }\n\n        if ($this->str_referer_blocker and !empty($_SERVER['QUERY_STRING']) and $this->referer_key == 0 and empty($this->search_engine)) {\n            header('Location: ' . $this->site_url);\n            exit(0);\n        }\n\n        $user_agent = (string) $this->get_Env('HTTP_USER_AGENT');\n        $user_agent = substr(htmlspecialchars($user_agent), 0, 255);\n        if (!empty($user_agent)) {\n            $user_agent = trim($user_agent);\n        }\n        if (empty($user_agent) or $user_agent == '-') {\n            $user_agent = 'none';\n        }\n        $this->user_agent = $user_agent;\n        $_SERVER['HTTP_USER_AGENT'] = $user_agent;\n\n        // Cross-Site handle\n        if (sizeof($_POST) or $this->method == 'POST') {\n            if ($this->origin_key == 0 or $this->referer_key !== 1) {\n                // Post cross ho\u1eb7c kh\u00f4ng same referer\n                if (!$this->restrictCrossDomain or in_array($this->remote_ip, $this->validCrossIPs, true)) {\n                    $this->isIpValid = true;\n                }\n            } else {\n                // Same referer ho\u1eb7c kh\u00f4ng cross\n                $this->isIpValid = true;\n            }\n            if (!(($this->isRefererValid and (empty($this->origin) or $this->isOriginValid)) or $this->isIpValid)) {\n                trigger_error(Request::REQUEST_BLOCKED, 256);\n            }\n        }\n    }\n\n    /**\n     * standardizeOrigin()\n     * Chu\u1ea9n h\u00f3a, ki\u1ec3m tra Origin header\n     */\n    private function standardizeOrigin()\n    {\n        $this->origin = $this->get_Env(['HTTP_ORIGIN', 'Origin']);\n        if (!empty($this->origin)) {\n            $origin = parse_url($this->origin);\n            if (isset($origin['scheme']) and in_array($origin['scheme'], ['http', 'https', 'ftp', 'gopher'], true) and isset($origin['host'])) {\n                $_SERVER['HTTP_ORIGIN'] = ($origin['scheme'] . '://' . $origin['host'] . ((isset($origin['port']) and $origin['port'] != '80' and $origin['port'] != '443') ? (':' . $origin['port']) : ''));\n                $this->origin = $_SERVER['HTTP_ORIGIN'];\n\n                if ($this->my_current_domain == $this->origin) {\n                    $this->origin_key = 1;\n                } else {\n                    $this->origin_key = 0;\n                }\n            } elseif (strtolower($this->origin) == 'null') {\n                // Null Origin xem nh\u01b0 l\u00e0 Cross-Site\n                $this->origin_key = 0;\n            } else {\n                /*\n                 * Origin c\u00f3 d\u1ea1ng `Origin: <scheme> \"://\" <hostname> [ \":\" <port> ]` ho\u1eb7c null\n                 * N\u1ebfu sai th\u00ec t\u1eeb ch\u1ed1i truy v\u1ea5n\n                 */\n                unset($_SERVER['HTTP_ORIGIN']);\n                trigger_error(Request::INCORRECT_ORIGIN, 256);\n            }\n        } else {\n            $this->origin_key = 2;\n        }\n    }\n\n    /**\n     * standardizeReferer()\n     * Chu\u1ea9n h\u00f3a, ki\u1ec3m tra Referer header\n     */\n    private function standardizeReferer()\n    {\n        $this->referer = $this->get_Env(['HTTP_REFERER', 'Referer']);\n        if (!empty($this->referer)) {\n            $ref = parse_url($this->referer);\n            if (isset($ref['scheme']) and in_array($ref['scheme'], ['http', 'https', 'ftp', 'gopher'], true) and isset($ref['host'])) {\n                $ref_origin = ($ref['scheme'] . '://' . $ref['host'] . ((isset($ref['port']) and $ref['port'] != '80' and $ref['port'] != '443') ? (':' . $ref['port']) : ''));\n                // Server d\u1ea1ng IPv6 tr\u1ef1c ti\u1ebfp\n                if (substr($ref['host'], 0, 1) == '[' and substr($ref['host'], -1) == ']') {\n                    $ref['host'] = substr($ref['host'], 1, -1);\n                }\n                if (preg_match('/^' . preg_quote($ref['host'], '/') . '/', $this->server_name)) {\n                    $this->referer_key = 1;\n                } else {\n                    $this->referer_key = 0;\n                    if (!empty($this->engine_allowed)) {\n                        foreach ($this->engine_allowed as $se => $v) {\n                            if (preg_match('/' . preg_quote($v['host_pattern'], '/') . '/i', $ref['host'])) {\n                                $this->search_engine = $se;\n                                break;\n                            }\n                        }\n                    }\n                }\n                $this->referer_host = $ref['host'];\n                $tmp = [];\n                $base = $this->referer;\n                if (isset($ref['query']) and !empty($ref['query'])) {\n                    list($base, $query_string) = explode('?', $this->referer);\n                    parse_str($query_string, $parameters);\n                    foreach ($parameters as $key => $value) {\n                        if (preg_match('/^[a-zA-Z\\_][a-zA-Z0-9\\_]*$/', $key)) {\n                            $tmp[$key] = $this->security_get($value, true);\n                        }\n                    }\n                }\n                if (!empty($tmp)) {\n                    $this->referer_queries = $tmp;\n                    $_SERVER['HTTP_REFERER'] = $base . '?' . http_build_query($tmp);\n                } else {\n                    $_SERVER['HTTP_REFERER'] = $base;\n                }\n                $this->referer = $_SERVER['HTTP_REFERER'];\n\n                if (!$this->restrictCrossDomain or $this->referer_key === 1 or in_array($ref_origin, $this->validCrossDomains, true)) {\n                    $this->isRefererValid = true;\n                }\n            } else {\n                $this->referer_key = 0;\n                $this->referer = '';\n                unset($_SERVER['HTTP_REFERER']);\n            }\n        } else {\n            $this->referer_key = 2;\n            unset($_SERVER['HTTP_REFERER']);\n        }\n    }\n\n    /**\n     * get_cookie_save_path()\n     */\n    private function get_cookie_save_path()\n    {\n        $this->cookie_path = $this->base_siteurl . '/';\n        $cookie_domain = preg_replace('/^([w]{3})\\./', '', $this->server_name);\n        $this->cookie_domain = (preg_match('/^([0-9a-z][0-9a-z-]+\\.)+[a-z]{2,6}$/', $cookie_domain)) ? '.' . $cookie_domain : '';\n    }\n\n    /**\n     * sessionStart()\n     *\n     * @param bool $https_only\n     */\n    private function sessionStart($https_only)\n    {\n        if (headers_sent() or connection_status() != 0 or connection_aborted()) {\n            trigger_error(Request::IS_HEADERS_SENT, 256);\n        }\n\n        $_secure = ($this->server_protocol == 'https' and $https_only) ? 1 : 0;\n        if ($this->set_cookie_by_options) {\n            $options = [\n                'lifetime' => NV_LIVE_SESSION_TIME,\n                'path' => $this->cookie_path,\n                'domain' => $this->cookie_domain,\n                'secure' => $_secure,\n                'httponly' => 1\n            ];\n            if ($this->SameSite == 'Lax' or $this->SameSite == 'Strict') {\n                $options['samesite'] = $this->SameSite;\n            }\n            session_set_cookie_params($options);\n        } else {\n            session_set_cookie_params(NV_LIVE_SESSION_TIME, $this->cookie_path, $this->cookie_domain, $_secure, 1);\n        }\n\n        session_name($this->cookie_prefix . '_sess');\n        session_start();\n        $session_id = session_id();\n\n        $_SESSION = (isset($_SESSION) and is_array($_SESSION)) ? $_SESSION : [];\n        if (sizeof($_SESSION)) {\n            $array_keys = array_keys($_SESSION);\n            foreach ($array_keys as $k) {\n                if (!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) or is_numeric($k)) {\n                    unset($_SESSION[$k]);\n                }\n            }\n        }\n        $this->session_id = $session_id;\n    }\n\n    /**\n     * chr_hexdec_callback()\n     *\n     * @param array $m\n     * @return string\n     */\n    private function chr_hexdec_callback($m)\n    {\n        return chr(hexdec($m[1]));\n    }\n\n    /**\n     * chr_callback()\n     *\n     * @param array $m\n     * @return string\n     */\n    private function chr_callback($m)\n    {\n        return chr($m[1]);\n    }\n\n    /**\n     * color_hex2rgb_callback()\n     *\n     * @param array $hex\n     * @return mixed\n     */\n    private function color_hex2rgb_callback($hex)\n    {\n        if (preg_match('/[^0-9ABCDEFabcdef]/', $hex[1])) {\n            return $hex[0];\n        }\n        $color = $hex[1];\n        $l = strlen($color);\n        if ($l != 3 and $l != 6) {\n            return $hex[0];\n        }\n        $l = $l / 3;\n\n        return 'rgb(' . (hexdec(substr($color, 0, 1 * $l))) . ', ' . (hexdec(substr($color, 1 * $l, 1 * $l))) . ', ' . (hexdec(substr($color, 2 * $l, 1 * $l))) . ');';\n    }\n\n    /**\n     * unhtmlentities()\n     *\n     * @param tring $value\n     * @return string\n     */\n    private function unhtmlentities($value)\n    {\n        $value = preg_replace('/%3A%2F%2F/', '', $value); // :// to empty\n        $value = preg_replace('/([\\x00-\\x08][\\x0b-\\x0c][\\x0e-\\x20])/', '', $value);\n        $value = preg_replace('/%u0([a-z0-9]{3})/i', '&#x\\\\1;', $value);\n        $value = preg_replace('/%([a-z0-9]{2})/i', '&#x\\\\1;', $value);\n        $value = str_ireplace(['&#x53;&#x43;&#x52;&#x49;&#x50;&#x54;', '&#x26;&#x23;&#x78;&#x36;&#x41;&#x3B;&#x26;&#x23;&#x78;&#x36;&#x31;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x36;&#x3B;&#x26;&#x23;&#x78;&#x36;&#x31;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x33;&#x3B;&#x26;&#x23;&#x78;&#x36;&#x33;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x32;&#x3B;&#x26;&#x23;&#x78;&#x36;&#x39;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x30;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x34;&#x3B;', '/*', '*/', '<!--', '-->', '<!-- -->', '&#x0A;', '&#x0D;', '&#x09;', '\u000e'], '', $value);\n        $value = str_replace(['&colon;', '&lpar;', '&rpar;', '&Tab;', '&NewLine;'], [':', '(', ')', '', ''], $value);\n\n        $search = '/&#[xX]0{0,8}(21|22|23|24|25|26|27|28|29|2a|2b|2d|2f|30|31|32|33|34|35|36|37|38|39|3a|3b|3d|3f|40|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|5b|5c|5d|5e|5f|60|61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a|7b|7c|7d|7e);?/i';\n        $value = preg_replace_callback($search, [$this, 'chr_hexdec_callback'], $value);\n\n        $search = '/&#0{0,8}(33|34|35|36|37|38|39|40|41|42|43|45|47|48|49|50|51|52|53|54|55|56|57|58|59|61|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126);?/i';\n        $value = preg_replace_callback($search, [$this, 'chr_callback'], $value);\n\n        $search = ['&#60', '&#060', '&#0060', '&#00060', '&#000060', '&#0000060', '&#60;', '&#060;', '&#0060;', '&#00060;', '&#000060;', '&#0000060;', '&#x3c', '&#x03c', '&#x003c', '&#x0003c', '&#x00003c', '&#x000003c', '&#x3c;', '&#x03c;', '&#x003c;', '&#x0003c;', '&#x00003c;', '&#x000003c;', '&#X3c', '&#X03c', '&#X003c', '&#X0003c', '&#X00003c', '&#X000003c', '&#X3c;', '&#X03c;', '&#X003c;', '&#X0003c;', '&#X00003c;', '&#X000003c;', '&#x3C', '&#x03C', '&#x003C', '&#x0003C', '&#x00003C', '&#x000003C', '&#x3C;', '&#x03C;', '&#x003C;', '&#x0003C;', '&#x00003C;', '&#x000003C;', '&#X3C', '&#X03C', '&#X003C', '&#X0003C', '&#X00003C', '&#X000003C', '&#X3C;', '&#X03C;', '&#X003C;', '&#X0003C;', '&#X00003C;', '&#X000003C;', '\\x3c', '\\x3C', '\\u003c', '\\u003C'];\n\n        return str_ireplace($search, '<', $value);\n    }\n\n    /**\n     * filterAttr()\n     *\n     * @param array  $attrSet\n     * @param string $tagName\n     * @param bool   $isvalid\n     * @return array\n     */\n    private function filterAttr($attrSet, $tagName, &$isvalid)\n    {\n        $newSet = [];\n\n        for ($i = 0, $count = sizeof($attrSet); $i < $count; ++$i) {\n            if (!$attrSet[$i]) {\n                continue;\n            }\n            $attrSubSet = array_map('trim', explode('=', trim($attrSet[$i]), 2));\n            $attrSubSet[0] = strtolower($attrSubSet[0]);\n\n            if (!preg_match('/[a-z]+/i', $attrSubSet[0]) or in_array($attrSubSet[0], $this->disabledattributes, true) or preg_match('/^on/i', $attrSubSet[0])) {\n                continue;\n            }\n\n            if (!empty($attrSubSet[1])) {\n                $attrSubSet[1] = preg_replace('/[ ]+/', ' ', $attrSubSet[1]);\n                $attrSubSet[1] = preg_replace('/^\"(.*)\"$/', '\\\\1', $attrSubSet[1]);\n                $attrSubSet[1] = preg_replace(\"/^\\'(.*)\\'$/\", '\\\\1', $attrSubSet[1]);\n                $attrSubSet[1] = str_replace(['\"', '&quot;'], \"'\", $attrSubSet[1]);\n\n                // Security check Data URLs\n                if (preg_match('/^[\\r\\n\\s\\t]*d\\s*a\\s*t\\s*a\\s*\\:([^\\,]*?)\\;*(base64)*?[\\r\\n\\s\\t]*\\,[\\r\\n\\s\\t]*(.*?)[\\r\\n\\s\\t]*$/isu', $attrSubSet[1], $m)) {\n                    if (empty($m[2])) {\n                        $dataURLs = urldecode($m[3]);\n                    } else {\n                        $dataURLs = (string) base64_decode($m[3], true);\n                    }\n\n                    $checkValid = true;\n                    $this->filterTags($dataURLs, $checkValid);\n                    if (!$checkValid) {\n                        continue;\n                    }\n                }\n\n                $value = $this->unhtmlentities($attrSubSet[1]);\n                $search = [\n                    'javascript' => '/j\\s*a\\s*v\\s*a\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t/si',\n                    'vbscript' => '/v\\s*b\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t/si',\n                    'script' => '/s\\s*c\\s*r\\s*i\\s*p\\s*t/si',\n                    'applet' => '/a\\s*p\\s*p\\s*l\\s*e\\s*t/si',\n                    'alert' => '/a\\s*l\\s*e\\s*r\\s*t/si',\n                    'document' => '/d\\s*o\\s*c\\s*u\\s*m\\s*e\\s*n\\s*t/si',\n                    'write' => '/w\\s*r\\s*i\\s*t\\s*e/si',\n                    'cookie' => '/c\\s*o\\s*o\\s*k\\s*i\\s*e/si',\n                    'window' => '/w\\s*i\\s*n\\s*d\\s*o\\s*w/si',\n                    'data:' => '/d\\s*a\\s*t\\s*a\\s*\\:/si'\n                ];\n                $value = preg_replace(array_values($search), array_keys($search), $value);\n\n                // Gi\u1edbi h\u1ea1n link t\u1eeb c\u00e1c t\u00ean mi\u1ec1n b\u00ean ngo\u00e0i\n                if ($this->isRestrictDomain and isset($this->remoteAttrCheck[$attrSubSet[0]]) and in_array($tagName, $this->remoteAttrCheck[$attrSubSet[0]], true)) {\n                    $url_info = parse_url($value);\n                    if (isset($url_info['host'])) {\n                        $domain = $url_info['host'];\n                        $callBack = function ($domain_allowed) use ($domain) {\n                            return preg_match('/^' . preg_quote($domain, '/') . '$/iu', $domain_allowed);\n                        };\n                        if (!array_filter($this->validDomains, $callBack)) {\n                            continue;\n                        }\n                    }\n                }\n\n                // Security remove object param tag\n                if ('param' == $tagName and 'name' == $attrSubSet[0] and preg_match('/^[\\r\\n\\s\\t]*(allowscriptaccess|allownetworking)/isu', strtolower($value))) {\n                    return [];\n                }\n                if (preg_match('/(expression|javascript|behaviour|vbscript|mocha|livescript)(\\:*)/', $value)) {\n                    continue;\n                }\n                if (!empty($this->disablecomannds) and preg_match('#(' . implode('|', $this->disablecomannds) . ')(\\s*)\\((.*?)\\)#si', $value)) {\n                    continue;\n                }\n\n                if ('href' != $attrSubSet[0]) {\n                    $attrSubSet[1] = preg_replace_callback('/\\#([0-9ABCDEFabcdef]{3,6})[\\;]*/', [$this, 'color_hex2rgb_callback'], $attrSubSet[1]);\n                }\n            } elseif ($attrSubSet[1] !== '0') {\n                $attrSubSet[1] = $attrSubSet[0];\n            }\n            $newSet[] = $attrSubSet[0] . '=[@{' . $attrSubSet[1] . '}@]';\n        }\n\n        if ($tagName == 'embed') {\n            $newSet[] = 'allowscriptaccess=[@{never}@]';\n            $newSet[] = 'allownetworking=[@{internal}@]';\n        }\n\n        return $newSet;\n    }\n\n    /**\n     * filterTags()\n     *\n     * @param string $source\n     * @param bool   $isvalid\n     * @return string\n     */\n    private function filterTags($source, &$isvalid = true)\n    {\n        $checkInvalid = 0;\n        $source = preg_replace('/\\<script([^\\>]*)\\>(.*)\\<\\/script\\>/isU', '', $source, -1, $checkInvalid);\n        if ($checkInvalid > 0) {\n            $isvalid = false;\n        }\n\n        $preTag = null;\n        $postTag = $source;\n        $tagOpen_start = strpos($source, '<');\n\n        while ($tagOpen_start !== false) {\n            $preTag .= substr($postTag, 0, $tagOpen_start);\n            $postTag = substr($postTag, $tagOpen_start);\n            $fromTagOpen = substr($postTag, 1);\n            $tagOpen_end = strpos($fromTagOpen, '>');\n\n            if ($tagOpen_end === false) {\n                break;\n            }\n\n            $tagOpen_nested = strpos($fromTagOpen, '<');\n\n            if (($tagOpen_nested !== false) and ($tagOpen_nested < $tagOpen_end)) {\n                $preTag .= substr($postTag, 0, ($tagOpen_nested + 1));\n                $postTag = substr($postTag, ($tagOpen_nested + 1));\n                $tagOpen_start = strpos($postTag, '<');\n                continue;\n            }\n\n            $tagOpen_nested = (strpos($fromTagOpen, '<') + $tagOpen_start + 1);\n            $currentTag = substr($fromTagOpen, 0, $tagOpen_end);\n            $tagLength = strlen($currentTag);\n\n            if (!$tagOpen_end) {\n                $preTag .= $postTag;\n                $tagOpen_start = strpos($postTag, '<');\n            }\n\n            $tagLeft = $currentTag;\n            $attrSet = [];\n            $currentSpace = strpos($tagLeft, ' ');\n\n            if (substr($currentTag, 0, 1) == '/') {\n                $isCloseTag = true;\n                list($tagName) = explode(' ', $currentTag);\n                $tagName = strtolower(substr($tagName, 1));\n            } else {\n                $isCloseTag = false;\n                list($tagName) = explode(' ', $currentTag);\n                $tagName = strtolower($tagName);\n            }\n\n            if ((!preg_match('/^[a-z][a-z0-9]*$/i', $tagName)) or in_array($tagName, $this->disabletags, true)) {\n                $postTag = substr($postTag, ($tagLength + 2));\n                $tagOpen_start = strpos($postTag, '<');\n                $isvalid = false;\n                continue;\n            }\n\n            while ($currentSpace !== false) {\n                $fromSpace = substr($tagLeft, ($currentSpace + 1));\n                $nextSpace = strpos($fromSpace, ' ');\n                $openQuotes = strpos($fromSpace, '\"');\n                $closeQuotes = strpos(substr($fromSpace, ($openQuotes + 1)), '\"') + $openQuotes + 1;\n\n                if (strpos($fromSpace, '=') !== false) {\n                    if (($openQuotes !== false) and (strpos(substr($fromSpace, ($openQuotes + 1)), '\"') !== false)) {\n                        $attr = substr($fromSpace, 0, ($closeQuotes + 1));\n                    } else {\n                        $attr = substr($fromSpace, 0, $nextSpace);\n                    }\n                } else {\n                    $attr = substr($fromSpace, 0, $nextSpace);\n                }\n\n                if (!$attr) {\n                    $attr = $fromSpace;\n                }\n\n                $attrSet[] = $attr;\n                $tagLeft = substr($fromSpace, strlen($attr));\n                $currentSpace = strpos($tagLeft, ' ');\n            }\n\n            if (!$isCloseTag) {\n                if (!empty($attrSet)) {\n                    $attrSet = $this->filterAttr($attrSet, $tagName, $isvalid);\n                }\n                if (!('param' == $tagName and empty($attrSet))) {\n                    $preTag .= '{@[' . $tagName;\n                    if (!empty($attrSet)) {\n                        $preTag .= ' ' . implode(' ', $attrSet);\n                    }\n                    $preTag .= (strpos($fromTagOpen, '</' . $tagName)) ? ']@}' : ' /]@}';\n                    if ($tagName == 'object') {\n                        if (preg_match('/\\]\\@\\}([\\s]+)\\{\\@\\[' . $tagName . '/', $preTag, $m)) {\n                            $space = $m[1] . '    ';\n                        } else {\n                            $space = \"\\n    \";\n                        }\n                        $preTag .= $space . '{@[param name=[@{allowscriptaccess}@] value=[@{never}@] /]@}' . $space . \"{@[param name=[@{allownetworking}@] value=[@{internal}@] /]@}\\n\";\n                    }\n                }\n            } else {\n                $preTag .= '{@[/' . $tagName . ']@}';\n            }\n\n            $postTag = substr($postTag, ($tagLength + 2));\n            $tagOpen_start = strpos($postTag, '<');\n        }\n\n        $preTag .= $postTag;\n        while (preg_match('/\\<script([^\\>]*)\\>(.*)\\<\\/script\\>/isU', $preTag)) {\n            $preTag = preg_replace('/\\<script([^\\>]*)\\>(.*)\\<\\/script\\>/isU', '', $preTag);\n        }\n        $preTag = str_replace([\"'\", '\"', '<', '>'], ['&#039;', '&quot;', '&lt;', '&gt;'], $preTag);\n\n        return trim(str_replace(['[@{', '}@]', '{@[', ']@}'], ['\"', '\"', '<', '>'], $preTag));\n    }\n\n    /**\n     * security_get()\n     *\n     * @param array $value\n     * @param bool  $decode\n     * @return mixed\n     */\n    private function security_get($value, $decode = false)\n    {\n        if (is_array($value)) {\n            $keys = array_keys($value);\n            foreach ($keys as $key) {\n                $value[$key] = $this->security_get($value[$key], $decode);\n            }\n        } else {\n            if (!empty($value) and !is_numeric($value)) {\n                if ($decode == true) {\n                    $value = urldecode($value);\n                }\n\n                $value = str_replace([\"\\t\", \"\\r\", \"\\n\", '../'], '', $value);\n                $value = $this->unhtmlentities($value);\n                unset($matches);\n                preg_match_all('/<!\\[cdata\\[(.*?)\\]\\]>/is', $value, $matches);\n                $value = str_replace($matches[0], $matches[1], $value);\n                $value = strip_tags($value);\n                $value = preg_replace('#(' . implode('|', $this->disablecomannds) . ')(\\s*)\\((.*?)\\)#si', '', $value);\n                $value = str_replace([\"'\", '\"', '<', '>'], ['&#039;', '&quot;', '&lt;', '&gt;'], $value);\n                $value = trim($value);\n            }\n        }\n\n        return $value;\n    }\n\n    /**\n     * security_post()\n     *\n     * @param mixed $value\n     * @return array|string\n     */\n    public function security_post($value)\n    {\n        if (is_array($value)) {\n            $keys = array_keys($value);\n            foreach ($keys as $key) {\n                $value[$key] = $this->security_post($value[$key]);\n            }\n        } else {\n            // Fix block tag\n            $value = str_replace(['[', ']'], ['&#91;', '&#93;'], $value);\n\n            if (preg_match_all('/<!\\[cdata\\[(.*?)\\]\\]>/is', $value, $matches)) {\n                $value = str_replace($matches[0], $matches[1], $value);\n            }\n            $value = $this->filterTags($value);\n        }\n\n        return $value;\n    }\n\n    /**\n     * security_cookie()\n     *\n     * @param mixed $value\n     * @return mixed\n     */\n    private function security_cookie($value)\n    {\n        return $value;\n    }\n\n    /**\n     * security_session()\n     *\n     * @param mixed $value\n     * @return mixed\n     */\n    private function security_session($value)\n    {\n        return $value;\n    }\n\n    /**\n     * parse_mode()\n     *\n     * @param string $mode\n     * @return mixed\n     */\n    private function parse_mode($mode)\n    {\n        if (empty($mode)) {\n            return [$this->request_default_mode];\n        }\n        $mode = explode(',', $mode);\n        $mode = array_map('trim', $mode);\n        $mode = array_map('strtolower', $mode);\n        $mode = array_intersect($this->allow_request_mods, $mode);\n        if (empty($mode)) {\n            return [$this->request_default_mode];\n        }\n\n        return array_values($mode);\n    }\n\n    /**\n     * encodeCookie()\n     *\n     * @param string $string\n     * @return string\n     */\n    private function encodeCookie($string)\n    {\n        $iv = substr($this->cookie_key, 0, 16);\n        $string = openssl_encrypt($string, 'aes-256-cbc', $this->cookie_key, 0, $iv);\n\n        return strtr($string, '+/=', '-_,');\n    }\n\n    /**\n     * decodeCookie()\n     *\n     * @param string $string\n     * @return false|string\n     */\n    private function decodeCookie($string)\n    {\n        $string = strtr($string, '-_,', '+/=');\n        $iv = substr($this->cookie_key, 0, 16);\n\n        return openssl_decrypt($string, 'aes-256-cbc', $this->cookie_key, 0, $iv);\n    }\n\n    /**\n     * get_value()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return mixed\n     */\n    private function get_value($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        $modes = $this->parse_mode($mode);\n        foreach ($modes as $mode) {\n            switch ($mode) {\n                case 'get':\n                    if (array_key_exists($name, $_GET)) {\n                        $value = $_GET[$name];\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_get($value) : $value;\n                    }\n                    break;\n                case 'post':\n                    if (array_key_exists($name, $_POST)) {\n                        $value = $_POST[$name];\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_post($value) : $value;\n                    }\n                    break;\n                case 'cookie':\n                    if (array_key_exists($this->cookie_prefix . '_' . $name, $_COOKIE)) {\n                        $value = $_COOKIE[$this->cookie_prefix . '_' . $name];\n                        if ($decode) {\n                            $value = $this->decodeCookie($value);\n                        }\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_cookie($value) : $value;\n                    }\n                    break;\n                case 'session':\n                    if (array_key_exists($this->session_prefix . '_' . $name, $_SESSION)) {\n                        $value = $_SESSION[$this->session_prefix . '_' . $name];\n                        if ($decode) {\n                            $value = $this->decodeCookie($value);\n                        }\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_session($value) : $value;\n                    }\n                    break;\n                case 'request':\n                    if (array_key_exists($name, $_POST)) {\n                        $value = $_POST[$name];\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_post($value) : $value;\n                    }\n                    if (array_key_exists($name, $_GET)) {\n                        $value = $_GET[$name];\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_get($value) : $value;\n                    }\n                    break;\n                case 'env':\n                    if (array_key_exists($name, $_ENV)) {\n                        $value = $_ENV[$name];\n\n                        return $value;\n                    }\n                    break;\n                case 'server':\n                    if (array_key_exists($name, $_SERVER)) {\n                        $value = $_SERVER[$name];\n\n                        return $value;\n                    }\n                    break;\n            }\n        }\n\n        return $default;\n    }\n\n    /**\n     * set_Cookie()\n     *\n     * @param string       $name\n     * @param array|string $value\n     * @param int          $expire\n     * @param bool         $encode\n     * @return bool\n     */\n    public function set_Cookie($name, $value = '', $expire = 0, $encode = true)\n    {\n        if (is_array($value)) {\n            return false;\n        }\n        if (empty($name)) {\n            return false;\n        }\n        $name = $this->cookie_prefix . '_' . $name;\n        if ($encode) {\n            $value = $this->encodeCookie($value);\n        }\n        $expire = (int) $expire;\n        if (!empty($expire)) {\n            $expire += NV_CURRENTTIME;\n        }\n\n        if ($this->set_cookie_by_options) {\n            $options = [\n                'expires' => $expire,\n                'path' => $this->cookie_path,\n                'domain' => $this->cookie_domain,\n                'secure' => $this->secure,\n                'httponly' => $this->httponly\n            ];\n            if (!empty($this->SameSite) and (in_array($this->SameSite, [\n                'Lax',\n                'Strict'\n            ], true) or ($this->SameSite == 'None' and !empty($this->secure)))) {\n                $options['samesite'] = $this->SameSite;\n            }\n\n            return setcookie($name, $value, $options);\n        }\n\n        return setcookie($name, $value, $expire, $this->cookie_path, $this->cookie_domain, $this->secure, $this->httponly);\n    }\n\n    /**\n     * set_Session()\n     *\n     * @param string $name\n     * @param string $value\n     * @return bool\n     */\n    public function set_Session($name, $value = '')\n    {\n        if (is_array($value)) {\n            return false;\n        }\n        if (empty($name)) {\n            return false;\n        }\n        $name = $this->session_prefix . '_' . $name;\n        $value = $this->encodeCookie($value);\n        $_SESSION[$name] = $value;\n\n        return true;\n    }\n\n    /**\n     * unset_request()\n     *\n     * @param string $names\n     * @param string $mode\n     * @return array|false|void\n     */\n    public function unset_request($names, $mode)\n    {\n        if (empty($names)) {\n            return [];\n        }\n        $names = ',' . $names;\n        unset($matches);\n        preg_match_all(\"/\\,\\s*([a-zA-Z\\_]{1}[a-zA-Z0-9\\_]*)/\", $names, $matches);\n        $names = $matches[1];\n        if (empty($names)) {\n            return false;\n        }\n        $mode = $this->parse_mode($mode);\n        foreach ($mode as $arr) {\n            if ($arr == 'get') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_GET[$name]);\n                }\n            } elseif ($arr == 'post') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_POST[$name]);\n                }\n            } elseif ($arr == 'cookie') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    $name2 = $this->cookie_prefix . '_' . $name;\n                    if (!isset($_COOKIE[$name2])) {\n                        continue;\n                    }\n                    $expire = NV_CURRENTTIME - 3600;\n\n                    setcookie($name2, '', $expire, $this->cookie_path, $this->cookie_domain, $this->secure, $this->httponly);\n\n                    unset($_COOKIE[$name2]);\n                }\n            } elseif ($arr == 'session') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    $name2 = $this->session_prefix . '_' . $name;\n                    if (!isset($_SESSION[$name2])) {\n                        continue;\n                    }\n                    unset($_SESSION[$name2]);\n                }\n            } elseif ($arr == 'request') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_REQUEST[$name]);\n                }\n            } elseif ($arr == 'env') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_ENV[$name]);\n                }\n            } elseif ($arr == 'server') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_SERVER[$name]);\n                }\n            }\n        }\n    }\n\n    /**\n     * isset_request()\n     *\n     * @param string $names\n     * @param string $mode\n     * @param bool   $all\n     * @return array|bool\n     */\n    public function isset_request($names, $mode, $all = true)\n    {\n        if (empty($names)) {\n            return [];\n        }\n        $names = ',' . $names;\n        unset($matches);\n        preg_match_all(\"/\\,\\s*([a-zA-Z\\_]{1}[a-zA-Z0-9\\_]*)/\", $names, $matches);\n        $names = $matches[1];\n        if (empty($names)) {\n            return false;\n        }\n        $names = array_flip($names);\n        $mode = $this->parse_mode($mode);\n        foreach ($mode as $arr) {\n            $array_keys = array_keys($names);\n            foreach ($array_keys as $name) {\n                if ($arr == 'get' and isset($_GET[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'post' and isset($_POST[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'cookie' and isset($_COOKIE[$this->cookie_prefix . '_' . $name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'session' and isset($_SESSION[$this->session_prefix . '_' . $name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'request' and isset($_REQUEST[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'env' and isset($_ENV[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'server' and isset($_SERVER[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                }\n            }\n        }\n        if (!empty($names)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * get_bool()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return bool\n     */\n    public function get_bool($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (bool) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * get_int()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return int\n     */\n    public function get_int($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (int) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * get_absint()\n     *\n     * @since 4.3.08\n     *\n     * @param string $name\n     * @param string $mode\n     * @param int    $default\n     * @param bool   $decode\n     * @param bool   $filter\n     * @return int\n     */\n    public function get_absint($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return abs((int) ($this->get_value($name, $mode, $default, $decode, $filter)));\n    }\n\n    /**\n     * get_float()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return float\n     */\n    public function get_float($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (float) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * get_string()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return string\n     */\n    public function get_string($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (string) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * _get_title()\n     *\n     * @param string $value\n     * @param bool   $specialchars\n     * @param array  $preg_replace\n     * @return string\n     */\n    private function _get_title($value, $specialchars, $preg_replace)\n    {\n        $value = strip_tags($value);\n        if ((bool) $specialchars == true) {\n            $search = ['&', '\\'', '\"', '<', '>', '\\\\', '/', '(', ')', '*', '[', ']', '!', '=', '%', '^', ':', '{', '}', '`', '~'];\n            $replace = ['&amp;', '&#039;', '&quot;', '&lt;', '&gt;', '&#x005C;', '&#x002F;', '&#40;', '&#41;', '&#42;', '&#91;', '&#93;', '&#33;', '&#x3D;', '&#x25;', '&#x5E;', '&#x3A;', '&#x7B;', '&#x7D;', '&#x60;', '&#x7E;'];\n\n            $value = str_replace($replace, $search, $value);\n            $value = str_replace('&#x23;', '#', $value);\n            $value = str_replace($search, $replace, $value);\n            $value = preg_replace(\"/([^\\&]+)\\#/\", '\\\\1&#x23;', $value);\n        }\n\n        if (!empty($preg_replace)) {\n            if (isset($preg_replace['pattern']) and !empty($preg_replace['pattern']) and isset($preg_replace['replacement'])) {\n                $value = preg_replace($preg_replace['pattern'], $preg_replace['replacement'], $value);\n            }\n        }\n\n        return trim($value);\n    }\n\n    /**\n     * get_title()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $specialchars\n     * @param array       $preg_replace\n     * @param bool        $filter\n     * @return string\n     */\n    public function get_title($name, $mode = null, $default = null, $specialchars = false, $preg_replace = [], $filter = true)\n    {\n        $value = (string) $this->get_value($name, $mode, $default, true, $filter);\n\n        return $this->_get_title($value, $specialchars, $preg_replace);\n    }\n\n    /**\n     * _get_editor()\n     *\n     * @param string $value\n     * @param string $allowed_html_tags\n     * @return string\n     */\n    private function _get_editor($value, $allowed_html_tags)\n    {\n        if (!empty($allowed_html_tags)) {\n            $allowed_html_tags = array_map('trim', explode(',', $allowed_html_tags));\n            $allowed_html_tags = '<' . implode('><', $allowed_html_tags) . '>';\n            $value = strip_tags($value, $allowed_html_tags);\n        }\n\n        return trim($value);\n    }\n\n    /**\n     * get_editor()\n     *\n     * @param string $name\n     * @param string $default\n     * @param string $allowed_html_tags\n     * @param bool   $filter\n     * @return string\n     */\n    public function get_editor($name, $default = '', $allowed_html_tags = '', $filter = true)\n    {\n        $value = (string) $this->get_value($name, 'post', $default, true, $filter);\n\n        return $this->_get_editor($value, $allowed_html_tags);\n    }\n\n    /**\n     * _get_textarea()\n     *\n     * @param string $value\n     * @param string $allowed_html_tags\n     * @param bool   $save\n     * @return string\n     */\n    private function _get_textarea($value, $allowed_html_tags, $save)\n    {\n        if (!empty($allowed_html_tags)) {\n            $allowed_html_tags = array_map('trim', explode(',', $allowed_html_tags));\n            $allowed_html_tags = '<' . implode('><', $allowed_html_tags) . '>';\n            $value = strip_tags($value, $allowed_html_tags);\n        }\n        if ((bool) $save) {\n            $value = strtr($value, [\n                \"\\r\\n\" => '<br />',\n                \"\\r\" => '<br />',\n                \"\\n\" => '<br />'\n            ]);\n        }\n\n        return trim($value);\n    }\n\n    /**\n     * get_textarea()\n     *\n     * @param string $name\n     * @param string $default\n     * @param string $allowed_html_tags\n     * @param bool   $save\n     * @param bool   $filter\n     * @return string\n     */\n    public function get_textarea($name, $default = '', $allowed_html_tags = '', $save = false, $filter = true)\n    {\n        $value = (string) $this->get_value($name, 'post', $default, true, $filter);\n\n        return $this->_get_textarea($value, $allowed_html_tags, $save);\n    }\n\n    /**\n     * get_array()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return array\n     */\n    public function get_array($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (array) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * get_typed_array()\n     *\n     * @param string      $name\n     * @param strig|null  $mode\n     * @param string|null $type\n     * @param mixed|null  $default\n     * @param bool        $specialchars\n     * @param array       $preg_replace\n     * @param string      $allowed_html_tags\n     * @param bool        $save\n     * @param bool        $filter\n     * @return array\n     */\n    public function get_typed_array($name, $mode = null, $type = null, $default = null, $specialchars = false, $preg_replace = [], $allowed_html_tags = '', $save = false, $filter = true)\n    {\n        $arr = $this->get_array($name, $mode, $default, true, $filter);\n        $array_keys = array_keys($arr);\n        foreach ($array_keys as $key) {\n            switch ($type) {\n                case 'bool':\n                    $arr[$key] = (bool) $arr[$key];\n                    break;\n                case 'int':\n                    $arr[$key] = (int) $arr[$key];\n                    break;\n                case 'float':\n                    $arr[$key] = (float) $arr[$key];\n                    break;\n                case 'string':\n                    $arr[$key] = (string) $arr[$key];\n                    break;\n                case 'array':\n                    $arr[$key] = (array) $arr[$key];\n                    break;\n                case 'title':\n                    $arr[$key] = (string) $this->_get_title($arr[$key], $specialchars, $preg_replace);\n                    break;\n                case 'textarea':\n                    $arr[$key] = (string) $this->_get_textarea($arr[$key], $allowed_html_tags, $save);\n                    break;\n                case 'editor':\n                    $arr[$key] = (string) $this->_get_editor($arr[$key], $allowed_html_tags);\n            }\n        }\n\n        return $arr;\n    }\n\n    /**\n     * getAllowOriginHeaderValue()\n     *\n     * @return mixed\n     */\n    private function getAllowOriginHeaderValue()\n    {\n        // Kh\u00f4ng block ho\u1eb7c domain h\u1ee3p l\u1ec7 (domain trong danh s\u00e1ch ho\u1eb7c l\u00e0 self) ho\u1eb7c null v\u00e0\n        if (\n            !$this->restrictCrossDomain or\n            $this->origin_key === 1 or\n            ($this->origin === 'null' and $this->allowNullOrigin and (empty($this->allowNullOriginIps) or in_array($this->remote_ip, $this->allowNullOriginIps, true))) or\n            in_array($this->origin, $this->validCrossDomains, true)\n        ) {\n            $this->isOriginValid = true;\n\n            return $this->origin;\n        }\n\n        $this->isOriginValid = false;\n\n        return $this->my_current_domain;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * NukeViet Content Management System\n * @version 4.x\n * @author VINADES.,JSC <contact@vinades.vn>\n * @copyright (C) 2009-2021 VINADES.,JSC. All rights reserved\n * @license GNU/GPL version 2 or any later version\n * @see https://github.com/nukeviet The NukeViet CMS GitHub project\n */\n\nnamespace NukeViet\\Core;\n\n/**\n * NukeViet\\Core\\Request\n *\n * @package NukeViet\\Core\n * @author VINADES.,JSC <contact@vinades.vn>\n * @copyright (C) 2009-2021 VINADES.,JSC. All rights reserved\n * @version 4.5.00\n * @access public\n */\nclass Request\n{\n    const IS_HEADERS_SENT = 'Warning: Headers already sent';\n\n    const INCORRECT_IP = 'Incorrect IP address specified';\n\n    const INCORRECT_ORIGIN = 'Incorrect Origin specified';\n\n    const REQUEST_BLOCKED = 'Your request is blocked';\n\n    public $session_id;\n\n    public $doc_root;\n\n    public $site_url;\n\n    public $base_siteurl;\n\n    public $base_adminurl;\n\n    public $server_name;\n\n    public $server_protocol;\n\n    public $server_port;\n\n    public $my_current_domain;\n\n    public $headerstatus;\n\n    public $session_save_path;\n\n    public $cookie_path;\n\n    public $cookie_domain;\n\n    public $referer;\n\n    private $origin;\n\n    private $method;\n\n    /**\n     * @var int\n     *\n     * 0 cross origin referer\n     * 1 same origin referer\n     * 2 kh\u00f4ng c\u00f3 referer\n     */\n    public $referer_key;\n\n    /**\n     * @var int\n     *\n     * 0 cross origin\n     * 1 same origin\n     * 2 no origin header\n     */\n    private $origin_key;\n\n    public $referer_host = '';\n\n    public $referer_queries = false;\n\n    public $request_uri;\n\n    public $user_agent;\n\n    public $search_engine = '';\n\n    private $request_default_mode = 'request';\n\n    private $allow_request_mods = [\n        'get',\n        'post',\n        'request',\n        'cookie',\n        'session',\n        'env',\n        'server'\n    ];\n\n    private $cookie_prefix = 'NV4';\n\n    private $session_prefix = 'NV4';\n\n    private $cookie_key = 'nv4';\n\n    private $secure = false;\n\n    private $httponly = true;\n\n    private $SameSite = '';\n\n    private $set_cookie_by_options = false;\n\n    private $ip_addr;\n\n    private $remote_ip;\n\n    private $str_referer_blocker = false;\n\n    private $engine_allowed = [];\n\n    // Cac tags bi cam dung mac dinh, co the go bo bang cach thay doi cac tags cho phep cua NV_ALLOWED_HTML_TAGS\n    private $disabletags = [\n        'applet',\n        'body',\n        'basefont',\n        'head',\n        'html',\n        'id',\n        'meta',\n        'xml',\n        'blink',\n        'link',\n        'style',\n        'script',\n        'iframe',\n        'frame',\n        'frameset',\n        'ilayer',\n        'layer',\n        'bgsound',\n        'title',\n        'base'\n    ];\n\n    protected $remoteAttrCheck = [\n        'action' => ['form'],\n        'src' => ['iframe', 'embed'],\n        'data' => ['object']\n    ];\n\n    /**\n     * C\u00e1c attr b\u1ecb c\u1ea5m, s\u1ebd b\u1ecb l\u1ecdc b\u1ecf.\n     * - T\u1ea5t c\u1ea3 c\u00e1c arrt b\u1eaft \u0111\u1ea7u b\u1eb1ng on\n     * - C\u00e1c attr b\u00ean d\u01b0\u1edbi\n     */\n    private $disabledattributes = [\n        'action',\n        'background',\n        'codebase',\n        'dynsrc',\n        'lowsrc',\n        'allownetworking', // Control a SWF file\u2019s access to network functionality by setting the allowNetworking parameter = internal\n        'allowscriptaccess', // Lo\u1ea1i b\u1ecf \u0111i\u1ec1u khi\u1ec3n cho ph\u00e9p javascript trong embed, t\u1ef1 \u0111\u1ed9ng \u0111\u1eb7t = never\n        'fscommand', // attacker can use this when executed from within an embedded Flash object\n        'seeksegmenttime' // this is a method that locates the specified point on the element\u2019s segment time line and begins playing from that point. The segment consists of one repetition of the time line including reverse play using the AUTOREVERSE attribute.\n    ];\n\n    private $disablecomannds = [\n        'base64_decode',\n        'cmd',\n        'passthru',\n        'eval',\n        'exec',\n        'system',\n        'fopen',\n        'fsockopen',\n        'file',\n        'file_get_contents',\n        'readfile',\n        'unlink'\n    ];\n\n    /**\n     * @var array\n     */\n    protected $corsHeaders = [\n        'Access-Control-Allow-Origin' => '*',\n        'Access-Control-Allow-Headers' => 'Origin, X-Requested-With, Content-Type', // C\u00e1c Header \u0111\u01b0\u1ee3c ph\u00e9p trong CORS\n        'Access-Control-Allow-Methods' => 'PUT, GET, POST, DELETE, OPTIONS', // C\u00e1c ph\u01b0\u01a1ng th\u01b0\u1edbc \u0111\u01b0\u1ee3c ph\u00e9p trong CORS\n        'Access-Control-Allow-Credentials' => 'true', // Cho ph\u00e9p g\u1eedi cookie trong truy v\u1ea5n CORS\n        'Access-Control-Max-Age' => 10 * 60 * 60, // 10 min, max age for Chrome. Th\u1eddi gian cache preflight request (request OPTIONS ki\u1ec3m tra)\n        'Vary' => 'Origin' // Th\u00f4ng b\u00e1o cho tr\u00ecnh duy\u1ec7t bi\u1ebft, m\u1ed7i Origin kh\u00e1c nhau s\u1ebd c\u00f3 m\u1ed7i ph\u1ea3n h\u1ed3i kh\u00e1c nhau thay v\u00ec d\u00f9ng *\n    ];\n\n    /**\n     * @since 4.4.01\n     */\n    protected $restrictCrossDomain = true;\n    protected $validCrossDomains = [];\n    protected $validCrossIPs = [];\n\n    protected $isOriginValid = false;\n    protected $isRefererValid = false;\n\n    protected $isIpValid = false;\n\n    protected $isRestrictDomain = true;\n    protected $validDomains = [];\n\n    /**\n     * @since 4.5.00\n     */\n    private $allowNullOrigin = false;\n    private $allowNullOriginIps = [];\n\n    /**\n     * __construct()\n     *\n     * @param array                 $config\n     * @param string                $ip\n     * @param \\NukeViet\\Core\\Server $nv_Server\n     */\n    public function __construct($config, $ip, $nv_Server = false)\n    {\n        if (isset($config['allowed_html_tags']) and is_array($config['allowed_html_tags'])) {\n            $this->disabletags = array_diff($this->disabletags, $config['allowed_html_tags']);\n        }\n        if (!empty($config['allow_request_mods'])) {\n            if (!is_array($config['allow_request_mods'])) {\n                $config['allow_request_mods'] = [$config['allow_request_mods']];\n            }\n            $this->allow_request_mods = array_intersect($this->allow_request_mods, $config['allow_request_mods']);\n        }\n        if (!empty($config['request_default_mode']) and in_array($config['request_default_mode'], $this->allow_request_mods, true)) {\n            $this->request_default_mode = $config['request_default_mode'];\n        }\n        if (!empty($config['cookie_secure'])) {\n            $this->secure = true;\n        }\n        if (!empty($config['cookie_httponly'])) {\n            $this->httponly = true;\n        }\n        if (!empty($config['cookie_SameSite']) and in_array($config['cookie_SameSite'], [\n            'Lax',\n            'Strict',\n            'None'\n        ], true)) {\n            $this->SameSite = $config['cookie_SameSite'];\n        }\n        $this->set_cookie_by_options = version_compare(PHP_VERSION, '7.3.0', '>=');\n        if (!empty($config['cookie_prefix'])) {\n            $this->cookie_prefix = preg_replace('/[^a-zA-Z0-9\\_]+/', '', $config['cookie_prefix']);\n        }\n        if (!empty($config['session_prefix'])) {\n            $this->session_prefix = preg_replace('/[^a-zA-Z0-9\\_]+/', '', $config['session_prefix']);\n        }\n        if (!empty($config['sitekey'])) {\n            $this->cookie_key = $config['sitekey'];\n        }\n        if (!empty($config['str_referer_blocker'])) {\n            $this->str_referer_blocker = true;\n        }\n        $this->engine_allowed = (array) $config['engine_allowed'];\n        if (empty($ip)) {\n            $ip = $_SERVER['REMOTE_ADDR'];\n        }\n        $this->remote_ip = $ip;\n\n        if (defined('NV_ADMIN')) {\n            $this->restrictCrossDomain = !empty($config['crossadmin_restrict']) ? true : false;\n            $this->validCrossDomains = !empty($config['crossadmin_valid_domains']) ? ((array) $config['crossadmin_valid_domains']) : [];\n            $this->validCrossIPs = !empty($config['crossadmin_valid_ips']) ? ((array) $config['crossadmin_valid_ips']) : [];\n        } elseif (defined('NV_REMOTE_API')) {\n            $this->restrictCrossDomain = false;\n            $this->validCrossDomains = [];\n            $this->validCrossIPs = [];\n        } else {\n            $this->restrictCrossDomain = !empty($config['crosssite_restrict']) ? true : false;\n            $this->validCrossDomains = !empty($config['crosssite_valid_domains']) ? ((array) $config['crosssite_valid_domains']) : [];\n            $this->validCrossIPs = !empty($config['crosssite_valid_ips']) ? ((array) $config['crosssite_valid_ips']) : [];\n        }\n\n        $this->isRestrictDomain = !empty($config['domains_restrict']) ? true : false;\n        $this->validDomains = !empty($config['domains_whitelist']) ? ((array) $config['domains_whitelist']) : [];\n        $this->allowNullOrigin = !empty($config['allow_null_origin']) ? true : false;\n        $this->allowNullOriginIps = !empty($config['ip_allow_null_origin']) ? ((array) $config['ip_allow_null_origin']) : [];\n\n        if (preg_match('#^(?:(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(?:\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$#', $ip)) {\n            $ip2long = ip2long($ip);\n        } else {\n            if (substr_count($ip, '::')) {\n                $ip = str_replace('::', str_repeat(':0000', 8 - substr_count($ip, ':')) . ':', $ip);\n            }\n            $ip = explode(':', $ip);\n            $r_ip = '';\n            foreach ($ip as $v) {\n                $r_ip .= str_pad(base_convert($v, 16, 2), 16, 0, STR_PAD_LEFT);\n            }\n            $ip2long = base_convert($r_ip, 2, 10);\n        }\n\n        if ($ip2long == -1 or $ip2long === false) {\n            trigger_error(Request::INCORRECT_IP, 256);\n        }\n        $this->ip_addr = $ip2long;\n\n        $this->cookie_key = md5($this->cookie_key);\n\n        if ($nv_Server === false) {\n            $nv_Server = new Server();\n        }\n        $this->Initialize($nv_Server);\n        $this->get_cookie_save_path();\n\n        $this->sessionStart(!empty($config['https_only']));\n        $_REQUEST = array_merge($_POST, array_diff_key($_GET, $_POST));\n    }\n\n    /**\n     * get_Env()\n     *\n     * @param string $key\n     * @return string\n     */\n    private function get_Env($key)\n    {\n        if (!is_array($key)) {\n            $key = [$key];\n        }\n        foreach ($key as $k) {\n            if (isset($_SERVER[$k])) {\n                return $_SERVER[$k];\n            }\n            if (isset($_ENV[$k])) {\n                return $_ENV[$k];\n            }\n            if (@getenv($k)) {\n                return @getenv($k);\n            }\n            if (function_exists('apache_getenv') and apache_getenv($k, true)) {\n                return apache_getenv($k, true);\n            }\n        }\n\n        return '';\n    }\n\n    /**\n     * Initialize()\n     *\n     * @param \\NukeViet\\Core\\Server $nv_Server\n     */\n    private function Initialize($nv_Server)\n    {\n        if (sizeof($_GET)) {\n            $array_keys = array_keys($_GET);\n            foreach ($array_keys as $k) {\n                if (!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) or is_numeric($k)) {\n                    unset($_GET[$k]);\n                }\n            }\n        }\n        if (sizeof($_POST)) {\n            $array_keys = array_keys($_POST);\n            foreach ($array_keys as $k) {\n                if ((!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) and $k != 'g-recaptcha-response') or is_numeric($k)) {\n                    unset($_POST[$k]);\n                }\n            }\n        }\n        if (sizeof($_COOKIE)) {\n            $array_keys = array_keys($_COOKIE);\n            foreach ($array_keys as $k) {\n                if (!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) or is_numeric($k)) {\n                    @setcookie($k, '', NV_CURRENTTIME - 3600);\n                    unset($_COOKIE[$k]);\n                }\n            }\n        }\n        if (sizeof($_FILES) and strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {\n            $array_keys = array_keys($_FILES);\n            foreach ($array_keys as $k) {\n                if (!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) or is_numeric($k)) {\n                    unset($_FILES[$k]);\n                }\n            }\n        }\n        $query = http_build_query($_GET);\n        $_SERVER['QUERY_STRING'] = $query;\n        $_SERVER['argv'] = [$query];\n        $this->request_uri = (empty($_SERVER['REQUEST_URI'])) ? $_SERVER['PHP_SELF'] . '?' . $_SERVER['QUERY_STRING'] : $_SERVER['REQUEST_URI'];\n        $doc_root = isset($_SERVER['DOCUMENT_ROOT']) ? preg_replace('/[\\/]+$/', '', str_replace(DIRECTORY_SEPARATOR, '/', $_SERVER['DOCUMENT_ROOT'])) : '';\n\n        if (defined('NV_BASE_SITEURL')) {\n            $base_siteurl = preg_replace('/[\\/]+$/', '', NV_BASE_SITEURL);\n        } else {\n            $base_siteurl = $nv_Server->getWebsitePath();\n        }\n\n        if (NV_ROOTDIR !== $doc_root . $base_siteurl) {\n            $doc_root = NV_ROOTDIR;\n            $count = substr_count($base_siteurl, '/');\n            for ($i = 0; $i < $count; ++$i) {\n                $doc_root = preg_replace('#\\/[^\\/]+$#', '', $doc_root);\n            }\n            $_SERVER['DOCUMENT_ROOT'] = $doc_root;\n        }\n        $_SERVER['SCRIPT_FILENAME'] = $_SERVER['DOCUMENT_ROOT'] . $_SERVER['PHP_SELF'];\n        $_SERVER['SERVER_PORT'] = $this->get_Env('SERVER_PORT');\n        $_SERVER['SERVER_PROTOCOL'] = $this->get_Env('SERVER_PROTOCOL');\n\n        if (defined('NV_SERVER_NAME')) {\n            $this->server_name = NV_SERVER_NAME;\n        } else {\n            $this->server_name = $nv_Server->getServerHost();\n        }\n        if (defined('NV_SERVER_PROTOCOL')) {\n            $this->server_protocol = NV_SERVER_PROTOCOL;\n        } else {\n            $this->server_protocol = $nv_Server->getServerProtocol();\n        }\n        if (defined('NV_SERVER_PORT')) {\n            $this->server_port = NV_SERVER_PORT;\n        } else {\n            $this->server_port = $nv_Server->getServerPort();\n        }\n\n        $this->base_siteurl = $base_siteurl;\n        $this->base_adminurl = $base_siteurl . (NV_ADMINDIR != '' ? '/' . NV_ADMINDIR : '');\n        $this->doc_root = $doc_root;\n\n        if (defined('NV_MY_DOMAIN')) {\n            $this->my_current_domain = NV_MY_DOMAIN;\n        } else {\n            $this->my_current_domain = $nv_Server->getOriginalDomain();\n        }\n\n        $this->headerstatus = (substr(php_sapi_name(), 0, 3) == 'cgi') ? 'Status:' : $_SERVER['SERVER_PROTOCOL'];\n        $this->site_url = $this->my_current_domain . $this->base_siteurl;\n        $this->standardizeReferer();\n        $this->standardizeOrigin();\n        $this->method = strtoupper($this->get_Env(['REQUEST_METHOD', 'Method']));\n\n        // CORS handle\n        if (!empty($this->origin)) {\n            $this->corsHeaders['Access-Control-Allow-Origin'] = $this->getAllowOriginHeaderValue();\n            $hasControlRequestHeader = $this->get_Env(['HTTP_ACCESS_CONTROL_REQUEST_HEADERS', 'Access-Control-Request-Headers']);\n\n            foreach ($this->corsHeaders as $header => $value) {\n                header($header . ': ' . $value);\n            }\n\n            // Ki\u1ec3m tra preflight request\n            if ($this->method == 'OPTIONS' and !empty($hasControlRequestHeader)) {\n                exit(0);\n            }\n        }\n\n        if ($this->str_referer_blocker and !empty($_SERVER['QUERY_STRING']) and $this->referer_key == 0 and empty($this->search_engine)) {\n            header('Location: ' . $this->site_url);\n            exit(0);\n        }\n\n        $user_agent = (string) $this->get_Env('HTTP_USER_AGENT');\n        $user_agent = substr(htmlspecialchars($user_agent), 0, 255);\n        if (!empty($user_agent)) {\n            $user_agent = trim($user_agent);\n        }\n        if (empty($user_agent) or $user_agent == '-') {\n            $user_agent = 'none';\n        }\n        $this->user_agent = $user_agent;\n        $_SERVER['HTTP_USER_AGENT'] = $user_agent;\n\n        // Cross-Site handle\n        if (sizeof($_POST) or $this->method == 'POST') {\n            if ($this->origin_key == 0 or $this->referer_key !== 1) {\n                // Post cross ho\u1eb7c kh\u00f4ng same referer\n                if (!$this->restrictCrossDomain or in_array($this->remote_ip, $this->validCrossIPs, true)) {\n                    $this->isIpValid = true;\n                }\n            } else {\n                // Same referer ho\u1eb7c kh\u00f4ng cross\n                $this->isIpValid = true;\n            }\n            if (!(($this->isRefererValid and (empty($this->origin) or $this->isOriginValid)) or $this->isIpValid)) {\n                trigger_error(Request::REQUEST_BLOCKED, 256);\n            }\n        }\n    }\n\n    /**\n     * standardizeOrigin()\n     * Chu\u1ea9n h\u00f3a, ki\u1ec3m tra Origin header\n     */\n    private function standardizeOrigin()\n    {\n        $this->origin = $this->get_Env(['HTTP_ORIGIN', 'Origin']);\n        if (!empty($this->origin)) {\n            $origin = parse_url($this->origin);\n            if (isset($origin['scheme']) and in_array($origin['scheme'], ['http', 'https', 'ftp', 'gopher'], true) and isset($origin['host'])) {\n                $_SERVER['HTTP_ORIGIN'] = ($origin['scheme'] . '://' . $origin['host'] . ((isset($origin['port']) and $origin['port'] != '80' and $origin['port'] != '443') ? (':' . $origin['port']) : ''));\n                $this->origin = $_SERVER['HTTP_ORIGIN'];\n\n                if ($this->my_current_domain == $this->origin) {\n                    $this->origin_key = 1;\n                } else {\n                    $this->origin_key = 0;\n                }\n            } elseif (strtolower($this->origin) == 'null') {\n                // Null Origin xem nh\u01b0 l\u00e0 Cross-Site\n                $this->origin_key = 0;\n            } else {\n                /*\n                 * Origin c\u00f3 d\u1ea1ng `Origin: <scheme> \"://\" <hostname> [ \":\" <port> ]` ho\u1eb7c null\n                 * N\u1ebfu sai th\u00ec t\u1eeb ch\u1ed1i truy v\u1ea5n\n                 */\n                unset($_SERVER['HTTP_ORIGIN']);\n                trigger_error(Request::INCORRECT_ORIGIN, 256);\n            }\n        } else {\n            $this->origin_key = 2;\n        }\n    }\n\n    /**\n     * standardizeReferer()\n     * Chu\u1ea9n h\u00f3a, ki\u1ec3m tra Referer header\n     */\n    private function standardizeReferer()\n    {\n        $this->referer = $this->get_Env(['HTTP_REFERER', 'Referer']);\n        if (!empty($this->referer)) {\n            $ref = parse_url($this->referer);\n            if (isset($ref['scheme']) and in_array($ref['scheme'], ['http', 'https', 'ftp', 'gopher'], true) and isset($ref['host'])) {\n                $ref_origin = ($ref['scheme'] . '://' . $ref['host'] . ((isset($ref['port']) and $ref['port'] != '80' and $ref['port'] != '443') ? (':' . $ref['port']) : ''));\n                // Server d\u1ea1ng IPv6 tr\u1ef1c ti\u1ebfp\n                if (substr($ref['host'], 0, 1) == '[' and substr($ref['host'], -1) == ']') {\n                    $ref['host'] = substr($ref['host'], 1, -1);\n                }\n                if (preg_match('/^' . preg_quote($ref['host'], '/') . '/', $this->server_name)) {\n                    $this->referer_key = 1;\n                } else {\n                    $this->referer_key = 0;\n                    if (!empty($this->engine_allowed)) {\n                        foreach ($this->engine_allowed as $se => $v) {\n                            if (preg_match('/' . preg_quote($v['host_pattern'], '/') . '/i', $ref['host'])) {\n                                $this->search_engine = $se;\n                                break;\n                            }\n                        }\n                    }\n                }\n                $this->referer_host = $ref['host'];\n                $tmp = [];\n                $base = $this->referer;\n                if (isset($ref['query']) and !empty($ref['query'])) {\n                    list($base, $query_string) = explode('?', $this->referer);\n                    parse_str($query_string, $parameters);\n                    foreach ($parameters as $key => $value) {\n                        if (preg_match('/^[a-zA-Z\\_][a-zA-Z0-9\\_]*$/', $key)) {\n                            $tmp[$key] = $this->security_get($value, true);\n                        }\n                    }\n                }\n                if (!empty($tmp)) {\n                    $this->referer_queries = $tmp;\n                    $_SERVER['HTTP_REFERER'] = $base . '?' . http_build_query($tmp);\n                } else {\n                    $_SERVER['HTTP_REFERER'] = $base;\n                }\n                $this->referer = $_SERVER['HTTP_REFERER'];\n\n                if (!$this->restrictCrossDomain or $this->referer_key === 1 or in_array($ref_origin, $this->validCrossDomains, true)) {\n                    $this->isRefererValid = true;\n                }\n            } else {\n                $this->referer_key = 0;\n                $this->referer = '';\n                unset($_SERVER['HTTP_REFERER']);\n            }\n        } else {\n            $this->referer_key = 2;\n            unset($_SERVER['HTTP_REFERER']);\n        }\n    }\n\n    /**\n     * get_cookie_save_path()\n     */\n    private function get_cookie_save_path()\n    {\n        $this->cookie_path = $this->base_siteurl . '/';\n        $cookie_domain = preg_replace('/^([w]{3})\\./', '', $this->server_name);\n        $this->cookie_domain = (preg_match('/^([0-9a-z][0-9a-z-]+\\.)+[a-z]{2,6}$/', $cookie_domain)) ? '.' . $cookie_domain : '';\n    }\n\n    /**\n     * sessionStart()\n     *\n     * @param bool $https_only\n     */\n    private function sessionStart($https_only)\n    {\n        if (headers_sent() or connection_status() != 0 or connection_aborted()) {\n            trigger_error(Request::IS_HEADERS_SENT, 256);\n        }\n\n        $_secure = ($this->server_protocol == 'https' and $https_only) ? 1 : 0;\n        if ($this->set_cookie_by_options) {\n            $options = [\n                'lifetime' => NV_LIVE_SESSION_TIME,\n                'path' => $this->cookie_path,\n                'domain' => $this->cookie_domain,\n                'secure' => $_secure,\n                'httponly' => 1\n            ];\n            if ($this->SameSite == 'Lax' or $this->SameSite == 'Strict') {\n                $options['samesite'] = $this->SameSite;\n            }\n            session_set_cookie_params($options);\n        } else {\n            session_set_cookie_params(NV_LIVE_SESSION_TIME, $this->cookie_path, $this->cookie_domain, $_secure, 1);\n        }\n\n        session_name($this->cookie_prefix . '_sess');\n        session_start();\n        $session_id = session_id();\n\n        $_SESSION = (isset($_SESSION) and is_array($_SESSION)) ? $_SESSION : [];\n        if (sizeof($_SESSION)) {\n            $array_keys = array_keys($_SESSION);\n            foreach ($array_keys as $k) {\n                if (!preg_match('/^[a-zA-Z0-9\\_]+$/', $k) or is_numeric($k)) {\n                    unset($_SESSION[$k]);\n                }\n            }\n        }\n        $this->session_id = $session_id;\n    }\n\n    /**\n     * chr_hexdec_callback()\n     *\n     * @param array $m\n     * @return string\n     */\n    private function chr_hexdec_callback($m)\n    {\n        return chr(hexdec($m[1]));\n    }\n\n    /**\n     * chr_callback()\n     *\n     * @param array $m\n     * @return string\n     */\n    private function chr_callback($m)\n    {\n        return chr($m[1]);\n    }\n\n    /**\n     * color_hex2rgb_callback()\n     *\n     * @param array $hex\n     * @return mixed\n     */\n    private function color_hex2rgb_callback($hex)\n    {\n        if (preg_match('/[^0-9ABCDEFabcdef]/', $hex[1])) {\n            return $hex[0];\n        }\n        $color = $hex[1];\n        $l = strlen($color);\n        if ($l != 3 and $l != 6) {\n            return $hex[0];\n        }\n        $l = $l / 3;\n\n        return 'rgb(' . (hexdec(substr($color, 0, 1 * $l))) . ', ' . (hexdec(substr($color, 1 * $l, 1 * $l))) . ', ' . (hexdec(substr($color, 2 * $l, 1 * $l))) . ');';\n    }\n\n    /**\n     * unhtmlentities()\n     *\n     * @param tring $value\n     * @return string\n     */\n    private function unhtmlentities($value)\n    {\n        $value = preg_replace('/%3A%2F%2F/', '', $value); // :// to empty\n        $value = preg_replace('/([\\x00-\\x08][\\x0b-\\x0c][\\x0e-\\x20])/', '', $value);\n        $value = preg_replace('/%u0([a-z0-9]{3})/i', '&#x\\\\1;', $value);\n        $value = preg_replace('/%([a-z0-9]{2})/i', '&#x\\\\1;', $value);\n        $value = str_ireplace(['&#x53;&#x43;&#x52;&#x49;&#x50;&#x54;', '&#x26;&#x23;&#x78;&#x36;&#x41;&#x3B;&#x26;&#x23;&#x78;&#x36;&#x31;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x36;&#x3B;&#x26;&#x23;&#x78;&#x36;&#x31;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x33;&#x3B;&#x26;&#x23;&#x78;&#x36;&#x33;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x32;&#x3B;&#x26;&#x23;&#x78;&#x36;&#x39;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x30;&#x3B;&#x26;&#x23;&#x78;&#x37;&#x34;&#x3B;', '/*', '*/', '<!--', '-->', '<!-- -->', '&#x0A;', '&#x0D;', '&#x09;', '\u000e'], '', $value);\n        $value = str_replace(['&colon;', '&lpar;', '&rpar;', '&Tab;', '&NewLine;'], [':', '(', ')', '', ''], $value);\n\n        $search = '/&#[xX]0{0,8}(21|22|23|24|25|26|27|28|29|2a|2b|2d|2f|30|31|32|33|34|35|36|37|38|39|3a|3b|3d|3f|40|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|5b|5c|5d|5e|5f|60|61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a|7b|7c|7d|7e);?/i';\n        $value = preg_replace_callback($search, [$this, 'chr_hexdec_callback'], $value);\n\n        $search = '/&#0{0,8}(33|34|35|36|37|38|39|40|41|42|43|45|47|48|49|50|51|52|53|54|55|56|57|58|59|61|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126);?/i';\n        $value = preg_replace_callback($search, [$this, 'chr_callback'], $value);\n\n        $search = ['&#60', '&#060', '&#0060', '&#00060', '&#000060', '&#0000060', '&#60;', '&#060;', '&#0060;', '&#00060;', '&#000060;', '&#0000060;', '&#x3c', '&#x03c', '&#x003c', '&#x0003c', '&#x00003c', '&#x000003c', '&#x3c;', '&#x03c;', '&#x003c;', '&#x0003c;', '&#x00003c;', '&#x000003c;', '&#X3c', '&#X03c', '&#X003c', '&#X0003c', '&#X00003c', '&#X000003c', '&#X3c;', '&#X03c;', '&#X003c;', '&#X0003c;', '&#X00003c;', '&#X000003c;', '&#x3C', '&#x03C', '&#x003C', '&#x0003C', '&#x00003C', '&#x000003C', '&#x3C;', '&#x03C;', '&#x003C;', '&#x0003C;', '&#x00003C;', '&#x000003C;', '&#X3C', '&#X03C', '&#X003C', '&#X0003C', '&#X00003C', '&#X000003C', '&#X3C;', '&#X03C;', '&#X003C;', '&#X0003C;', '&#X00003C;', '&#X000003C;', '\\x3c', '\\x3C', '\\u003c', '\\u003C'];\n\n        return str_ireplace($search, '<', $value);\n    }\n\n    /**\n     * filterAttr()\n     *\n     * @param array  $attrSet\n     * @param string $tagName\n     * @param bool   $isvalid\n     * @return array\n     */\n    private function filterAttr($attrSet, $tagName, &$isvalid)\n    {\n        $newSet = [];\n\n        for ($i = 0, $count = sizeof($attrSet); $i < $count; ++$i) {\n            if (!$attrSet[$i]) {\n                continue;\n            }\n            $attrSubSet = array_map('trim', explode('=', trim($attrSet[$i]), 2));\n            $attrSubSet[0] = strtolower($attrSubSet[0]);\n\n            if (!preg_match('/[a-z]+/i', $attrSubSet[0]) or in_array($attrSubSet[0], $this->disabledattributes, true) or preg_match('/^on/i', $attrSubSet[0])) {\n                continue;\n            }\n\n            if (!empty($attrSubSet[1])) {\n                $attrSubSet[1] = preg_replace('/[ ]+/', ' ', $attrSubSet[1]);\n                $attrSubSet[1] = preg_replace('/^\"(.*)\"$/', '\\\\1', $attrSubSet[1]);\n                $attrSubSet[1] = preg_replace(\"/^\\'(.*)\\'$/\", '\\\\1', $attrSubSet[1]);\n                $attrSubSet[1] = str_replace(['\"', '&quot;'], \"'\", $attrSubSet[1]);\n\n                $value = $this->unhtmlentities($attrSubSet[1]);\n\n                // Security check Data URLs\n                if (preg_match('/^[\\r\\n\\s\\t]*d\\s*a\\s*t\\s*a\\s*\\:([^\\,]*?)\\;*[\\r\\n\\s\\t]*(base64)*?[\\r\\n\\s\\t]*\\,[\\r\\n\\s\\t]*(.*?)[\\r\\n\\s\\t]*$/isu', $value, $m)) {\n                    if (empty($m[2])) {\n                        $dataURLs = urldecode($m[3]);\n                    } else {\n                        $dataURLs = (string) base64_decode($m[3], true);\n                    }\n\n                    $checkValid = true;\n                    $this->filterTags($dataURLs, $checkValid);\n                    if (!$checkValid) {\n                        continue;\n                    }\n                }\n\n                if (preg_replace('/\\<\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t([^\\>]*)\\>(.*)\\<\\s*\\/\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*\\>/isU', '', $value)) {\n                    continue;\n                }\n\n                $search = [\n                    'javascript' => '/j\\s*a\\s*v\\s*a\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t/si',\n                    'vbscript' => '/v\\s*b\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t/si',\n                    'script' => '/s\\s*c\\s*r\\s*i\\s*p\\s*t/si',\n                    'applet' => '/a\\s*p\\s*p\\s*l\\s*e\\s*t/si',\n                    'alert' => '/a\\s*l\\s*e\\s*r\\s*t/si',\n                    'document' => '/d\\s*o\\s*c\\s*u\\s*m\\s*e\\s*n\\s*t/si',\n                    'write' => '/w\\s*r\\s*i\\s*t\\s*e/si',\n                    'cookie' => '/c\\s*o\\s*o\\s*k\\s*i\\s*e/si',\n                    'window' => '/w\\s*i\\s*n\\s*d\\s*o\\s*w/si',\n                    'data:' => '/d\\s*a\\s*t\\s*a\\s*\\:/si'\n                ];\n                $value = preg_replace(array_values($search), array_keys($search), $value);\n\n                // Gi\u1edbi h\u1ea1n link t\u1eeb c\u00e1c t\u00ean mi\u1ec1n b\u00ean ngo\u00e0i\n                if ($this->isRestrictDomain and isset($this->remoteAttrCheck[$attrSubSet[0]]) and in_array($tagName, $this->remoteAttrCheck[$attrSubSet[0]], true)) {\n                    $url_info = parse_url($value);\n                    if (isset($url_info['host'])) {\n                        $domain = $url_info['host'];\n                        $callBack = function ($domain_allowed) use ($domain) {\n                            return preg_match('/^' . preg_quote($domain, '/') . '$/iu', $domain_allowed);\n                        };\n                        if (!array_filter($this->validDomains, $callBack)) {\n                            continue;\n                        }\n                    }\n                }\n\n                // Security remove object param tag\n                if ('param' == $tagName and 'name' == $attrSubSet[0] and preg_match('/^[\\r\\n\\s\\t]*(allowscriptaccess|allownetworking)/isu', strtolower($value))) {\n                    return [];\n                }\n                if (preg_match('/(expression|javascript|behaviour|vbscript|mocha|livescript)(\\:*)/', $value)) {\n                    continue;\n                }\n                if (!empty($this->disablecomannds) and preg_match('#(' . implode('|', $this->disablecomannds) . ')(\\s*)\\((.*?)\\)#si', $value)) {\n                    continue;\n                }\n\n                if ('href' != $attrSubSet[0]) {\n                    $attrSubSet[1] = preg_replace_callback('/\\#([0-9ABCDEFabcdef]{3,6})[\\;]*/', [$this, 'color_hex2rgb_callback'], $attrSubSet[1]);\n                }\n            } elseif ($attrSubSet[1] !== '0') {\n                $attrSubSet[1] = $attrSubSet[0];\n            }\n            $newSet[] = $attrSubSet[0] . '=[@{' . $attrSubSet[1] . '}@]';\n        }\n\n        if ($tagName == 'embed') {\n            $newSet[] = 'allowscriptaccess=[@{never}@]';\n            $newSet[] = 'allownetworking=[@{internal}@]';\n        }\n\n        return $newSet;\n    }\n\n    /**\n     * filterTags()\n     *\n     * @param string $source\n     * @param bool   $isvalid\n     * @return string\n     */\n    private function filterTags($source, &$isvalid = true)\n    {\n        $checkInvalid = 0;\n        $source = preg_replace('/\\<\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t([^\\>]*)\\>(.*)\\<\\s*\\/\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*\\>/isU', '', $source, -1, $checkInvalid);\n        if ($checkInvalid > 0) {\n            $isvalid = false;\n        }\n\n        $preTag = null;\n        $postTag = $source;\n        $tagOpen_start = strpos($source, '<');\n\n        while ($tagOpen_start !== false) {\n            $preTag .= substr($postTag, 0, $tagOpen_start);\n            $postTag = substr($postTag, $tagOpen_start);\n            $fromTagOpen = substr($postTag, 1);\n            $tagOpen_end = strpos($fromTagOpen, '>');\n\n            if ($tagOpen_end === false) {\n                break;\n            }\n\n            $tagOpen_nested = strpos($fromTagOpen, '<');\n\n            if (($tagOpen_nested !== false) and ($tagOpen_nested < $tagOpen_end)) {\n                $preTag .= substr($postTag, 0, ($tagOpen_nested + 1));\n                $postTag = substr($postTag, ($tagOpen_nested + 1));\n                $tagOpen_start = strpos($postTag, '<');\n                continue;\n            }\n\n            $tagOpen_nested = (strpos($fromTagOpen, '<') + $tagOpen_start + 1);\n            $currentTag = substr($fromTagOpen, 0, $tagOpen_end);\n            $tagLength = strlen($currentTag);\n\n            if (!$tagOpen_end) {\n                $preTag .= $postTag;\n                $tagOpen_start = strpos($postTag, '<');\n            }\n\n            $tagLeft = $currentTag;\n            $attrSet = [];\n            $currentSpace = strpos($tagLeft, ' ');\n\n            if (substr($currentTag, 0, 1) == '/') {\n                $isCloseTag = true;\n                list($tagName) = explode(' ', $currentTag);\n                $tagName = strtolower(substr($tagName, 1));\n            } else {\n                $isCloseTag = false;\n                list($tagName) = explode(' ', $currentTag);\n                $tagName = strtolower($tagName);\n            }\n\n            if ((!preg_match('/^[a-z][a-z0-9]*$/i', $tagName)) or in_array($tagName, $this->disabletags, true)) {\n                $postTag = substr($postTag, ($tagLength + 2));\n                $tagOpen_start = strpos($postTag, '<');\n                $isvalid = false;\n                continue;\n            }\n\n            while ($currentSpace !== false) {\n                $fromSpace = substr($tagLeft, ($currentSpace + 1));\n                $nextSpace = strpos($fromSpace, ' ');\n                $openQuotes = strpos($fromSpace, '\"');\n                $closeQuotes = strpos(substr($fromSpace, ($openQuotes + 1)), '\"') + $openQuotes + 1;\n\n                if (strpos($fromSpace, '=') !== false) {\n                    if (($openQuotes !== false) and (strpos(substr($fromSpace, ($openQuotes + 1)), '\"') !== false)) {\n                        $attr = substr($fromSpace, 0, ($closeQuotes + 1));\n                    } else {\n                        $attr = substr($fromSpace, 0, $nextSpace);\n                    }\n                } else {\n                    $attr = substr($fromSpace, 0, $nextSpace);\n                }\n\n                if (!$attr) {\n                    $attr = $fromSpace;\n                }\n\n                $attrSet[] = $attr;\n                $tagLeft = substr($fromSpace, strlen($attr));\n                $currentSpace = strpos($tagLeft, ' ');\n            }\n\n            if (!$isCloseTag) {\n                if (!empty($attrSet)) {\n                    $attrSet = $this->filterAttr($attrSet, $tagName, $isvalid);\n                }\n                if (!('param' == $tagName and empty($attrSet))) {\n                    $preTag .= '{@[' . $tagName;\n                    if (!empty($attrSet)) {\n                        $preTag .= ' ' . implode(' ', $attrSet);\n                    }\n                    $preTag .= (strpos($fromTagOpen, '</' . $tagName)) ? ']@}' : ' /]@}';\n                    if ($tagName == 'object') {\n                        if (preg_match('/\\]\\@\\}([\\s]+)\\{\\@\\[' . $tagName . '/', $preTag, $m)) {\n                            $space = $m[1] . '    ';\n                        } else {\n                            $space = \"\\n    \";\n                        }\n                        $preTag .= $space . '{@[param name=[@{allowscriptaccess}@] value=[@{never}@] /]@}' . $space . \"{@[param name=[@{allownetworking}@] value=[@{internal}@] /]@}\\n\";\n                    }\n                }\n            } else {\n                $preTag .= '{@[/' . $tagName . ']@}';\n            }\n\n            $postTag = substr($postTag, ($tagLength + 2));\n            $tagOpen_start = strpos($postTag, '<');\n        }\n\n        $preTag .= $postTag;\n        while (preg_match('/\\<\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t([^\\>]*)\\>(.*)\\<\\s*\\/\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\>/isU', $preTag)) {\n            $preTag = preg_replace('/\\<script([^\\>]*)\\>(.*)\\<\\/script\\>/isU', '', $preTag);\n        }\n        $preTag = str_replace([\"'\", '\"', '<', '>'], ['&#039;', '&quot;', '&lt;', '&gt;'], $preTag);\n\n        return trim(str_replace(['[@{', '}@]', '{@[', ']@}'], ['\"', '\"', '<', '>'], $preTag));\n    }\n\n    /**\n     * security_get()\n     *\n     * @param array $value\n     * @param bool  $decode\n     * @return mixed\n     */\n    private function security_get($value, $decode = false)\n    {\n        if (is_array($value)) {\n            $keys = array_keys($value);\n            foreach ($keys as $key) {\n                $value[$key] = $this->security_get($value[$key], $decode);\n            }\n        } else {\n            if (!empty($value) and !is_numeric($value)) {\n                if ($decode == true) {\n                    $value = urldecode($value);\n                }\n\n                $value = str_replace([\"\\t\", \"\\r\", \"\\n\", '../'], '', $value);\n                $value = $this->unhtmlentities($value);\n                unset($matches);\n                preg_match_all('/<!\\[cdata\\[(.*?)\\]\\]>/is', $value, $matches);\n                $value = str_replace($matches[0], $matches[1], $value);\n                $value = strip_tags($value);\n                $value = preg_replace('#(' . implode('|', $this->disablecomannds) . ')(\\s*)\\((.*?)\\)#si', '', $value);\n                $value = str_replace([\"'\", '\"', '<', '>'], ['&#039;', '&quot;', '&lt;', '&gt;'], $value);\n                $value = trim($value);\n            }\n        }\n\n        return $value;\n    }\n\n    /**\n     * security_post()\n     *\n     * @param mixed $value\n     * @return array|string\n     */\n    public function security_post($value)\n    {\n        if (is_array($value)) {\n            $keys = array_keys($value);\n            foreach ($keys as $key) {\n                $value[$key] = $this->security_post($value[$key]);\n            }\n        } else {\n            // Fix block tag\n            $value = str_replace(['[', ']'], ['&#91;', '&#93;'], $value);\n\n            if (preg_match_all('/<!\\[cdata\\[(.*?)\\]\\]>/is', $value, $matches)) {\n                $value = str_replace($matches[0], $matches[1], $value);\n            }\n            $value = $this->filterTags($value);\n        }\n\n        return $value;\n    }\n\n    /**\n     * security_cookie()\n     *\n     * @param mixed $value\n     * @return mixed\n     */\n    private function security_cookie($value)\n    {\n        return $value;\n    }\n\n    /**\n     * security_session()\n     *\n     * @param mixed $value\n     * @return mixed\n     */\n    private function security_session($value)\n    {\n        return $value;\n    }\n\n    /**\n     * parse_mode()\n     *\n     * @param string $mode\n     * @return mixed\n     */\n    private function parse_mode($mode)\n    {\n        if (empty($mode)) {\n            return [$this->request_default_mode];\n        }\n        $mode = explode(',', $mode);\n        $mode = array_map('trim', $mode);\n        $mode = array_map('strtolower', $mode);\n        $mode = array_intersect($this->allow_request_mods, $mode);\n        if (empty($mode)) {\n            return [$this->request_default_mode];\n        }\n\n        return array_values($mode);\n    }\n\n    /**\n     * encodeCookie()\n     *\n     * @param string $string\n     * @return string\n     */\n    private function encodeCookie($string)\n    {\n        $iv = substr($this->cookie_key, 0, 16);\n        $string = openssl_encrypt($string, 'aes-256-cbc', $this->cookie_key, 0, $iv);\n\n        return strtr($string, '+/=', '-_,');\n    }\n\n    /**\n     * decodeCookie()\n     *\n     * @param string $string\n     * @return false|string\n     */\n    private function decodeCookie($string)\n    {\n        $string = strtr($string, '-_,', '+/=');\n        $iv = substr($this->cookie_key, 0, 16);\n\n        return openssl_decrypt($string, 'aes-256-cbc', $this->cookie_key, 0, $iv);\n    }\n\n    /**\n     * get_value()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return mixed\n     */\n    private function get_value($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        $modes = $this->parse_mode($mode);\n        foreach ($modes as $mode) {\n            switch ($mode) {\n                case 'get':\n                    if (array_key_exists($name, $_GET)) {\n                        $value = $_GET[$name];\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_get($value) : $value;\n                    }\n                    break;\n                case 'post':\n                    if (array_key_exists($name, $_POST)) {\n                        $value = $_POST[$name];\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_post($value) : $value;\n                    }\n                    break;\n                case 'cookie':\n                    if (array_key_exists($this->cookie_prefix . '_' . $name, $_COOKIE)) {\n                        $value = $_COOKIE[$this->cookie_prefix . '_' . $name];\n                        if ($decode) {\n                            $value = $this->decodeCookie($value);\n                        }\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_cookie($value) : $value;\n                    }\n                    break;\n                case 'session':\n                    if (array_key_exists($this->session_prefix . '_' . $name, $_SESSION)) {\n                        $value = $_SESSION[$this->session_prefix . '_' . $name];\n                        if ($decode) {\n                            $value = $this->decodeCookie($value);\n                        }\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_session($value) : $value;\n                    }\n                    break;\n                case 'request':\n                    if (array_key_exists($name, $_POST)) {\n                        $value = $_POST[$name];\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_post($value) : $value;\n                    }\n                    if (array_key_exists($name, $_GET)) {\n                        $value = $_GET[$name];\n                        if (empty($value) or is_numeric($value)) {\n                            return $value;\n                        }\n\n                        return ($filter == true) ? $this->security_get($value) : $value;\n                    }\n                    break;\n                case 'env':\n                    if (array_key_exists($name, $_ENV)) {\n                        $value = $_ENV[$name];\n\n                        return $value;\n                    }\n                    break;\n                case 'server':\n                    if (array_key_exists($name, $_SERVER)) {\n                        $value = $_SERVER[$name];\n\n                        return $value;\n                    }\n                    break;\n            }\n        }\n\n        return $default;\n    }\n\n    /**\n     * set_Cookie()\n     *\n     * @param string       $name\n     * @param array|string $value\n     * @param int          $expire\n     * @param bool         $encode\n     * @return bool\n     */\n    public function set_Cookie($name, $value = '', $expire = 0, $encode = true)\n    {\n        if (is_array($value)) {\n            return false;\n        }\n        if (empty($name)) {\n            return false;\n        }\n        $name = $this->cookie_prefix . '_' . $name;\n        if ($encode) {\n            $value = $this->encodeCookie($value);\n        }\n        $expire = (int) $expire;\n        if (!empty($expire)) {\n            $expire += NV_CURRENTTIME;\n        }\n\n        if ($this->set_cookie_by_options) {\n            $options = [\n                'expires' => $expire,\n                'path' => $this->cookie_path,\n                'domain' => $this->cookie_domain,\n                'secure' => $this->secure,\n                'httponly' => $this->httponly\n            ];\n            if (!empty($this->SameSite) and (in_array($this->SameSite, [\n                'Lax',\n                'Strict'\n            ], true) or ($this->SameSite == 'None' and !empty($this->secure)))) {\n                $options['samesite'] = $this->SameSite;\n            }\n\n            return setcookie($name, $value, $options);\n        }\n\n        return setcookie($name, $value, $expire, $this->cookie_path, $this->cookie_domain, $this->secure, $this->httponly);\n    }\n\n    /**\n     * set_Session()\n     *\n     * @param string $name\n     * @param string $value\n     * @return bool\n     */\n    public function set_Session($name, $value = '')\n    {\n        if (is_array($value)) {\n            return false;\n        }\n        if (empty($name)) {\n            return false;\n        }\n        $name = $this->session_prefix . '_' . $name;\n        $value = $this->encodeCookie($value);\n        $_SESSION[$name] = $value;\n\n        return true;\n    }\n\n    /**\n     * unset_request()\n     *\n     * @param string $names\n     * @param string $mode\n     * @return array|false|void\n     */\n    public function unset_request($names, $mode)\n    {\n        if (empty($names)) {\n            return [];\n        }\n        $names = ',' . $names;\n        unset($matches);\n        preg_match_all(\"/\\,\\s*([a-zA-Z\\_]{1}[a-zA-Z0-9\\_]*)/\", $names, $matches);\n        $names = $matches[1];\n        if (empty($names)) {\n            return false;\n        }\n        $mode = $this->parse_mode($mode);\n        foreach ($mode as $arr) {\n            if ($arr == 'get') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_GET[$name]);\n                }\n            } elseif ($arr == 'post') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_POST[$name]);\n                }\n            } elseif ($arr == 'cookie') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    $name2 = $this->cookie_prefix . '_' . $name;\n                    if (!isset($_COOKIE[$name2])) {\n                        continue;\n                    }\n                    $expire = NV_CURRENTTIME - 3600;\n\n                    setcookie($name2, '', $expire, $this->cookie_path, $this->cookie_domain, $this->secure, $this->httponly);\n\n                    unset($_COOKIE[$name2]);\n                }\n            } elseif ($arr == 'session') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    $name2 = $this->session_prefix . '_' . $name;\n                    if (!isset($_SESSION[$name2])) {\n                        continue;\n                    }\n                    unset($_SESSION[$name2]);\n                }\n            } elseif ($arr == 'request') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_REQUEST[$name]);\n                }\n            } elseif ($arr == 'env') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_ENV[$name]);\n                }\n            } elseif ($arr == 'server') {\n                foreach ($names as $name) {\n                    if (empty($name)) {\n                        continue;\n                    }\n                    unset($_SERVER[$name]);\n                }\n            }\n        }\n    }\n\n    /**\n     * isset_request()\n     *\n     * @param string $names\n     * @param string $mode\n     * @param bool   $all\n     * @return array|bool\n     */\n    public function isset_request($names, $mode, $all = true)\n    {\n        if (empty($names)) {\n            return [];\n        }\n        $names = ',' . $names;\n        unset($matches);\n        preg_match_all(\"/\\,\\s*([a-zA-Z\\_]{1}[a-zA-Z0-9\\_]*)/\", $names, $matches);\n        $names = $matches[1];\n        if (empty($names)) {\n            return false;\n        }\n        $names = array_flip($names);\n        $mode = $this->parse_mode($mode);\n        foreach ($mode as $arr) {\n            $array_keys = array_keys($names);\n            foreach ($array_keys as $name) {\n                if ($arr == 'get' and isset($_GET[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'post' and isset($_POST[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'cookie' and isset($_COOKIE[$this->cookie_prefix . '_' . $name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'session' and isset($_SESSION[$this->session_prefix . '_' . $name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'request' and isset($_REQUEST[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'env' and isset($_ENV[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                } elseif ($arr == 'server' and isset($_SERVER[$name])) {\n                    if (empty($all)) {\n                        return true;\n                    }\n                    unset($names[$name]);\n                }\n            }\n        }\n        if (!empty($names)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * get_bool()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return bool\n     */\n    public function get_bool($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (bool) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * get_int()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return int\n     */\n    public function get_int($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (int) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * get_absint()\n     *\n     * @since 4.3.08\n     *\n     * @param string $name\n     * @param string $mode\n     * @param int    $default\n     * @param bool   $decode\n     * @param bool   $filter\n     * @return int\n     */\n    public function get_absint($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return abs((int) ($this->get_value($name, $mode, $default, $decode, $filter)));\n    }\n\n    /**\n     * get_float()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return float\n     */\n    public function get_float($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (float) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * get_string()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return string\n     */\n    public function get_string($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (string) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * _get_title()\n     *\n     * @param string $value\n     * @param bool   $specialchars\n     * @param array  $preg_replace\n     * @return string\n     */\n    private function _get_title($value, $specialchars, $preg_replace)\n    {\n        $value = strip_tags($value);\n        if ((bool) $specialchars == true) {\n            $search = ['&', '\\'', '\"', '<', '>', '\\\\', '/', '(', ')', '*', '[', ']', '!', '=', '%', '^', ':', '{', '}', '`', '~'];\n            $replace = ['&amp;', '&#039;', '&quot;', '&lt;', '&gt;', '&#x005C;', '&#x002F;', '&#40;', '&#41;', '&#42;', '&#91;', '&#93;', '&#33;', '&#x3D;', '&#x25;', '&#x5E;', '&#x3A;', '&#x7B;', '&#x7D;', '&#x60;', '&#x7E;'];\n\n            $value = str_replace($replace, $search, $value);\n            $value = str_replace('&#x23;', '#', $value);\n            $value = str_replace($search, $replace, $value);\n            $value = preg_replace(\"/([^\\&]+)\\#/\", '\\\\1&#x23;', $value);\n        }\n\n        if (!empty($preg_replace)) {\n            if (isset($preg_replace['pattern']) and !empty($preg_replace['pattern']) and isset($preg_replace['replacement'])) {\n                $value = preg_replace($preg_replace['pattern'], $preg_replace['replacement'], $value);\n            }\n        }\n\n        return trim($value);\n    }\n\n    /**\n     * get_title()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $specialchars\n     * @param array       $preg_replace\n     * @param bool        $filter\n     * @return string\n     */\n    public function get_title($name, $mode = null, $default = null, $specialchars = false, $preg_replace = [], $filter = true)\n    {\n        $value = (string) $this->get_value($name, $mode, $default, true, $filter);\n\n        return $this->_get_title($value, $specialchars, $preg_replace);\n    }\n\n    /**\n     * _get_editor()\n     *\n     * @param string $value\n     * @param string $allowed_html_tags\n     * @return string\n     */\n    private function _get_editor($value, $allowed_html_tags)\n    {\n        if (!empty($allowed_html_tags)) {\n            $allowed_html_tags = array_map('trim', explode(',', $allowed_html_tags));\n            $allowed_html_tags = '<' . implode('><', $allowed_html_tags) . '>';\n            $value = strip_tags($value, $allowed_html_tags);\n        }\n\n        return trim($value);\n    }\n\n    /**\n     * get_editor()\n     *\n     * @param string $name\n     * @param string $default\n     * @param string $allowed_html_tags\n     * @param bool   $filter\n     * @return string\n     */\n    public function get_editor($name, $default = '', $allowed_html_tags = '', $filter = true)\n    {\n        $value = (string) $this->get_value($name, 'post', $default, true, $filter);\n\n        return $this->_get_editor($value, $allowed_html_tags);\n    }\n\n    /**\n     * _get_textarea()\n     *\n     * @param string $value\n     * @param string $allowed_html_tags\n     * @param bool   $save\n     * @return string\n     */\n    private function _get_textarea($value, $allowed_html_tags, $save)\n    {\n        if (!empty($allowed_html_tags)) {\n            $allowed_html_tags = array_map('trim', explode(',', $allowed_html_tags));\n            $allowed_html_tags = '<' . implode('><', $allowed_html_tags) . '>';\n            $value = strip_tags($value, $allowed_html_tags);\n        }\n        if ((bool) $save) {\n            $value = strtr($value, [\n                \"\\r\\n\" => '<br />',\n                \"\\r\" => '<br />',\n                \"\\n\" => '<br />'\n            ]);\n        }\n\n        return trim($value);\n    }\n\n    /**\n     * get_textarea()\n     *\n     * @param string $name\n     * @param string $default\n     * @param string $allowed_html_tags\n     * @param bool   $save\n     * @param bool   $filter\n     * @return string\n     */\n    public function get_textarea($name, $default = '', $allowed_html_tags = '', $save = false, $filter = true)\n    {\n        $value = (string) $this->get_value($name, 'post', $default, true, $filter);\n\n        return $this->_get_textarea($value, $allowed_html_tags, $save);\n    }\n\n    /**\n     * get_array()\n     *\n     * @param string      $name\n     * @param string|null $mode\n     * @param mixed|null  $default\n     * @param bool        $decode\n     * @param bool        $filter\n     * @return array\n     */\n    public function get_array($name, $mode = null, $default = null, $decode = true, $filter = true)\n    {\n        return (array) $this->get_value($name, $mode, $default, $decode, $filter);\n    }\n\n    /**\n     * get_typed_array()\n     *\n     * @param string      $name\n     * @param strig|null  $mode\n     * @param string|null $type\n     * @param mixed|null  $default\n     * @param bool        $specialchars\n     * @param array       $preg_replace\n     * @param string      $allowed_html_tags\n     * @param bool        $save\n     * @param bool        $filter\n     * @return array\n     */\n    public function get_typed_array($name, $mode = null, $type = null, $default = null, $specialchars = false, $preg_replace = [], $allowed_html_tags = '', $save = false, $filter = true)\n    {\n        $arr = $this->get_array($name, $mode, $default, true, $filter);\n        $array_keys = array_keys($arr);\n        foreach ($array_keys as $key) {\n            switch ($type) {\n                case 'bool':\n                    $arr[$key] = (bool) $arr[$key];\n                    break;\n                case 'int':\n                    $arr[$key] = (int) $arr[$key];\n                    break;\n                case 'float':\n                    $arr[$key] = (float) $arr[$key];\n                    break;\n                case 'string':\n                    $arr[$key] = (string) $arr[$key];\n                    break;\n                case 'array':\n                    $arr[$key] = (array) $arr[$key];\n                    break;\n                case 'title':\n                    $arr[$key] = (string) $this->_get_title($arr[$key], $specialchars, $preg_replace);\n                    break;\n                case 'textarea':\n                    $arr[$key] = (string) $this->_get_textarea($arr[$key], $allowed_html_tags, $save);\n                    break;\n                case 'editor':\n                    $arr[$key] = (string) $this->_get_editor($arr[$key], $allowed_html_tags);\n            }\n        }\n\n        return $arr;\n    }\n\n    /**\n     * getAllowOriginHeaderValue()\n     *\n     * @return mixed\n     */\n    private function getAllowOriginHeaderValue()\n    {\n        // Kh\u00f4ng block ho\u1eb7c domain h\u1ee3p l\u1ec7 (domain trong danh s\u00e1ch ho\u1eb7c l\u00e0 self) ho\u1eb7c null v\u00e0\n        if (\n            !$this->restrictCrossDomain or\n            $this->origin_key === 1 or\n            ($this->origin === 'null' and $this->allowNullOrigin and (empty($this->allowNullOriginIps) or in_array($this->remote_ip, $this->allowNullOriginIps, true))) or\n            in_array($this->origin, $this->validCrossDomains, true)\n        ) {\n            $this->isOriginValid = true;\n\n            return $this->origin;\n        }\n\n        $this->isOriginValid = false;\n\n        return $this->my_current_domain;\n    }\n}\n"], "filenames": ["vendor/vinades/nukeviet/Core/Request.php"], "buggy_code_start_loc": [745], "buggy_code_end_loc": [940], "fixing_code_start_loc": [746], "fixing_code_end_loc": [945], "type": "CWE-707", "message": "A vulnerability, which was classified as problematic, has been found in NukeViet CMS. Affected by this issue is the function filterAttr of the file vendor/vinades/nukeviet/Core/Request.php of the component Data URL Handler. The manipulation of the argument attrSubSet leads to cross site scripting. The attack may be launched remotely. Upgrading to version 4.5 is able to address this issue. The name of the patch is 0b3197fad950bb3383e83039a8ee4c9509b3ce02. It is recommended to upgrade the affected component. VDB-213554 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-3975", "sourceIdentifier": "cna@vuldb.com", "published": "2022-11-13T10:15:10.427", "lastModified": "2022-11-18T20:39:01.310", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in NukeViet CMS. Affected by this issue is the function filterAttr of the file vendor/vinades/nukeviet/Core/Request.php of the component Data URL Handler. The manipulation of the argument attrSubSet leads to cross site scripting. The attack may be launched remotely. Upgrading to version 4.5 is able to address this issue. The name of the patch is 0b3197fad950bb3383e83039a8ee4c9509b3ce02. It is recommended to upgrade the affected component. VDB-213554 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nukeviet:nukeviet:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.5", "matchCriteriaId": "72F1440A-5270-4D6C-B701-1597E7C2404F"}]}]}], "references": [{"url": "https://github.com/nukeviet/nukeviet", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/nukeviet/nukeviet/commit/0b3197fad950bb3383e83039a8ee4c9509b3ce02", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.213554", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nukeviet/nukeviet/commit/0b3197fad950bb3383e83039a8ee4c9509b3ce02"}}