{"buggy_code": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Ferenc Karsany\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n */\n\npackage org.obridge.dao;\n\nimport org.obridge.context.OBridgeConfiguration;\nimport org.obridge.model.data.OraclePackage;\nimport org.obridge.model.data.Procedure;\nimport org.obridge.model.data.ProcedureArgument;\nimport org.obridge.util.jdbc.JdbcTemplate;\n\nimport javax.sql.DataSource;\nimport java.util.List;\n\n/**\n * User: fkarsany Date: 2013.11.18.\n */\npublic class ProcedureDao {\n\n    private static final String GET_ALL_PROCEDURE =\n            \"Select object_name,\\n\" +\n                    \"       procedure_name,\\n\" +\n                    \"       overload,\\n\" +\n                    \"       (Select Count(*)\\n\" +\n                    \"          From user_arguments a\\n\" +\n                    \"         Where a.object_name = t.procedure_name\\n\" +\n                    \"           And a.package_name = t.object_name\\n\" +\n                    \"           And nvl(a.overload, '##NVL##') = nvl(t.overload, '##NVL##')\\n\" +\n                    \"           And a.argument_name Is Null\\n\" +\n                    \"           And a.data_level = 0\\n\" +\n                    \"           And a.data_type Is Not Null) proc_or_func\\n\" +\n                    \"  From user_procedures t\\n\" +\n                    \" Where procedure_name Is Not Null\\n\" +\n                    \"   And object_type = 'PACKAGE'\\n\" +\n                    \"   And object_name Like ?\\n\" +\n                    \"   And procedure_name Like ?\\n\" +\n                    \"   And Not ((object_name, procedure_name, nvl(overload, -1)) In\\n\" +\n                    \"        (Select package_name, object_name, nvl(overload, -1)\\n\" +\n                    \"               From user_arguments\\n\" +\n                    \"              Where data_type In ('PL/SQL TABLE')\\n\" +\n                    \"                 Or (data_type = 'REF CURSOR' And in_out Like '%IN%')\\n\" +\n                    \"                 Or (data_type = 'PL/SQL RECORD' \" +\n                    (OBridgeConfiguration.GENERATE_SOURCE_FOR_PLSQL_TYPES ? \"And type_name Is Null\" : \"\") +\n                    \")))\\n\" +\n                    \"    Or procedure_name = 'ASSERT'\";\n\n\n    private static final String GET_ALL_SIMPLE_FUNCTION_AND_PROCEDURE =\n            \"Select object_name,\\n\" +\n                    \"       procedure_name,\\n\" +\n                    \"       overload,\\n\" +\n                    \"       (Select Count(*)\\n\" +\n                    \"          From user_arguments a\\n\" +\n                    \"         Where a.object_name = t.object_name\\n\" +\n                    \"           And a.package_name Is Null\\n\" +\n                    \"           And nvl(a.overload, '##NVL##') = nvl(t.overload, '##NVL##')\\n\" +\n                    \"           And a.argument_name Is Null\\n\" +\n                    \"           And a.data_level = 0\\n\" +\n                    \"           And a.data_type Is Not Null) proc_or_func\\n\" +\n                    \"  From user_procedures t\\n\" +\n                    \" Where procedure_name Is Null\\n\" +\n                    \"   And object_type In ('PROCEDURE', 'FUNCTION')\\n\" +\n                    \"   And Not ((object_name, procedure_name, nvl(overload, -1)) In\\n\" +\n                    \"        (Select object_name, package_name, nvl(overload, -1)\\n\" +\n                    \"               From user_arguments\\n\" +\n                    \"              Where data_type In ('PL/SQL TABLE')\\n\" +\n                    \"                 Or (data_type = 'REF CURSOR' And in_out Like '%IN%')\\n\" +\n                    \"                 Or (data_type = 'PL/SQL RECORD' \" +\n                    (OBridgeConfiguration.GENERATE_SOURCE_FOR_PLSQL_TYPES ? \"And type_name Is Null\" : \"\") +\n                    \")))\\n\" +\n                    \"    Or procedure_name = 'ASSERT'\";\n\n    private static final String GET_PROCEDURE_ARGUMENTS = \"  select argument_name,\" +\n            \"data_type,\" +\n            \"nvl( (select max(elem_type_name) from user_coll_types w where w.TYPE_NAME = p.type_name) , p.type_name || case when p.type_subname is not null then '_' || p.type_subname end) type_name,\" +\n            \"defaulted,\" +\n            \"in_out,\" +\n            \"rownum sequen, p.type_name orig_type_name \" +\n            \"from (Select argument_name, data_type, type_name, type_subname, defaulted, in_out\\n\"\n            + \"        From user_arguments t\\n\"\n            + \"       Where nvl(t.package_name, '###') = nvl((?), '###')\\n\"\n            + \"         And t.object_name = (?)\\n\"\n            + \"         And nvl(t.overload, '###') = nvl(?, '###')\\n\"\n            + \"         And t.data_level = 0\\n\"\n            + \"         And not(pls_type is null and argument_name is null and data_type is null)\"\n            + \"       Order By t.sequence) p\\n\";\n\n\n    private JdbcTemplate jdbcTemplate;\n\n    public ProcedureDao(DataSource dataSource) {\n        jdbcTemplate = new JdbcTemplate(dataSource);\n    }\n\n    public List<Procedure> getAllProcedure(OBridgeConfiguration c) {\n        List<Procedure> allProcedures = getAllProcedure(c.getPackagesLike(), \"\");\n        allProcedures.addAll(getAllSimpleFunctionAndProcedure());\n\n        return allProcedures;\n    }\n\n    public List<Procedure> getAllSimpleFunctionAndProcedure() {\n        return jdbcTemplate.query(\n                GET_ALL_SIMPLE_FUNCTION_AND_PROCEDURE,\n                (resultSet, i) -> new Procedure.Builder()\n                        .objectName(\"\")\n                        .procedureName(resultSet.getString(\"object_name\"))\n                        .overload(resultSet.getString(\"overload\") == null ? \"\" : resultSet.getString(\"overload\"))\n                        .methodType(resultSet.getInt(\"proc_or_func\") == 0 ? \"PROCEDURE\" : \"FUNCTION\")\n                        .argumentList(getProcedureArguments(\"\",\n                                resultSet.getString(\"object_name\"),\n                                resultSet.getString(\"overload\")))\n                        .build()\n        );\n\n    }\n\n    public List<Procedure> getAllProcedure(String packageName, String procedureName) {\n        String packageNameFilter;\n        String procedureNameFilter;\n\n        if (packageName == null || packageName.isEmpty() || \"\".equals(packageName)) {\n            packageNameFilter = \"%\";\n        } else {\n            packageNameFilter = packageName;\n        }\n\n        if (procedureName == null || procedureName.isEmpty() || \"\".equals(procedureName)) {\n            procedureNameFilter = \"%\";\n        } else {\n            procedureNameFilter = procedureName;\n        }\n\n\n        return jdbcTemplate.query(\n                GET_ALL_PROCEDURE,\n                (resultSet, i) -> new Procedure.Builder()\n                        .objectName(resultSet.getString(\"object_name\"))\n                        .procedureName(resultSet.getString(\"procedure_name\"))\n                        .overload(resultSet.getString(\"overload\") == null ? \"\" : resultSet.getString(\"overload\"))\n                        .methodType(resultSet.getInt(\"proc_or_func\") == 0 ? \"PROCEDURE\" : \"FUNCTION\")\n                        .argumentList(getProcedureArguments(resultSet.getString(\"object_name\"),\n                                resultSet.getString(\"procedure_name\"),\n                                resultSet.getString(\"overload\")))\n                        .build(), packageNameFilter, procedureNameFilter\n        );\n\n    }\n\n    public List<ProcedureArgument> getProcedureArguments(String packageName, String procedureName, String overLoadNo) {\n        return jdbcTemplate.query(\n                GET_PROCEDURE_ARGUMENTS,\n                new Object[]{packageName, procedureName, overLoadNo}, (resultSet, i) -> new ProcedureArgument(\n                        resultSet.getString(\"argument_name\"),\n                        resultSet.getString(\"data_type\"),\n                        resultSet.getString(\"type_name\"),\n                        resultSet.getString(\"in_out\").contains(\"IN\"),\n                        resultSet.getString(\"in_out\").contains(\"OUT\"),\n                        resultSet.getString(\"orig_type_name\")\n                )\n        );\n\n    }\n\n    public List<OraclePackage> getAllPackages(OBridgeConfiguration c) {\n        List<OraclePackage> allPackage = getAllRealOraclePackage(c);\n        allPackage.add(getAllStandaloneProcedureAndFunction());\n        return allPackage;\n    }\n\n    private OraclePackage getAllStandaloneProcedureAndFunction() {\n        OraclePackage oraclePackage = new OraclePackage();\n        oraclePackage.setName(\"PROCEDURES_AND_FUNCTIONS\");\n        oraclePackage.setProcedureList(getAllSimpleFunctionAndProcedure());\n        return oraclePackage;\n    }\n\n    private List<OraclePackage> getAllRealOraclePackage(OBridgeConfiguration c) {\n        String query = \"select object_name from user_objects where object_type = 'PACKAGE' and object_name like '\" + c.getPackagesLike() + \"'\";\n        return jdbcTemplate.query(query, (resultSet, i) -> {\n            OraclePackage p = new OraclePackage();\n            p.setName(resultSet.getString(\"object_name\"));\n            p.setProcedureList(getAllProcedure(resultSet.getString(\"object_name\"), \"\"));\n            return p;\n        });\n    }\n\n}\n"], "fixing_code": ["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Ferenc Karsany\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n */\n\npackage org.obridge.dao;\n\nimport org.obridge.context.OBridgeConfiguration;\nimport org.obridge.model.data.OraclePackage;\nimport org.obridge.model.data.Procedure;\nimport org.obridge.model.data.ProcedureArgument;\nimport org.obridge.util.jdbc.JdbcTemplate;\n\nimport javax.sql.DataSource;\nimport java.util.List;\n\n/**\n * User: fkarsany Date: 2013.11.18.\n */\npublic class ProcedureDao {\n\n    private static final String GET_ALL_PROCEDURE =\n            \"Select object_name,\\n\" +\n                    \"       procedure_name,\\n\" +\n                    \"       overload,\\n\" +\n                    \"       (Select Count(*)\\n\" +\n                    \"          From user_arguments a\\n\" +\n                    \"         Where a.object_name = t.procedure_name\\n\" +\n                    \"           And a.package_name = t.object_name\\n\" +\n                    \"           And nvl(a.overload, '##NVL##') = nvl(t.overload, '##NVL##')\\n\" +\n                    \"           And a.argument_name Is Null\\n\" +\n                    \"           And a.data_level = 0\\n\" +\n                    \"           And a.data_type Is Not Null) proc_or_func\\n\" +\n                    \"  From user_procedures t\\n\" +\n                    \" Where procedure_name Is Not Null\\n\" +\n                    \"   And object_type = 'PACKAGE'\\n\" +\n                    \"   And object_name Like ?\\n\" +\n                    \"   And procedure_name Like ?\\n\" +\n                    \"   And Not ((object_name, procedure_name, nvl(overload, -1)) In\\n\" +\n                    \"        (Select package_name, object_name, nvl(overload, -1)\\n\" +\n                    \"               From user_arguments\\n\" +\n                    \"              Where data_type In ('PL/SQL TABLE')\\n\" +\n                    \"                 Or (data_type = 'REF CURSOR' And in_out Like '%IN%')\\n\" +\n                    \"                 Or (data_type = 'PL/SQL RECORD' \" +\n                    (OBridgeConfiguration.GENERATE_SOURCE_FOR_PLSQL_TYPES ? \"And type_name Is Null\" : \"\") +\n                    \")))\\n\" +\n                    \"    Or procedure_name = 'ASSERT'\";\n\n\n    private static final String GET_ALL_SIMPLE_FUNCTION_AND_PROCEDURE =\n            \"Select object_name,\\n\" +\n                    \"       procedure_name,\\n\" +\n                    \"       overload,\\n\" +\n                    \"       (Select Count(*)\\n\" +\n                    \"          From user_arguments a\\n\" +\n                    \"         Where a.object_name = t.object_name\\n\" +\n                    \"           And a.package_name Is Null\\n\" +\n                    \"           And nvl(a.overload, '##NVL##') = nvl(t.overload, '##NVL##')\\n\" +\n                    \"           And a.argument_name Is Null\\n\" +\n                    \"           And a.data_level = 0\\n\" +\n                    \"           And a.data_type Is Not Null) proc_or_func\\n\" +\n                    \"  From user_procedures t\\n\" +\n                    \" Where procedure_name Is Null\\n\" +\n                    \"   And object_type In ('PROCEDURE', 'FUNCTION')\\n\" +\n                    \"   And Not ((object_name, procedure_name, nvl(overload, -1)) In\\n\" +\n                    \"        (Select object_name, package_name, nvl(overload, -1)\\n\" +\n                    \"               From user_arguments\\n\" +\n                    \"              Where data_type In ('PL/SQL TABLE')\\n\" +\n                    \"                 Or (data_type = 'REF CURSOR' And in_out Like '%IN%')\\n\" +\n                    \"                 Or (data_type = 'PL/SQL RECORD' \" +\n                    (OBridgeConfiguration.GENERATE_SOURCE_FOR_PLSQL_TYPES ? \"And type_name Is Null\" : \"\") +\n                    \")))\\n\" +\n                    \"    Or procedure_name = 'ASSERT'\";\n\n    private static final String GET_PROCEDURE_ARGUMENTS = \"  select argument_name,\" +\n            \"data_type,\" +\n            \"nvl( (select max(elem_type_name) from user_coll_types w where w.TYPE_NAME = p.type_name) , p.type_name || case when p.type_subname is not null then '_' || p.type_subname end) type_name,\" +\n            \"defaulted,\" +\n            \"in_out,\" +\n            \"rownum sequen, p.type_name orig_type_name \" +\n            \"from (Select argument_name, data_type, type_name, type_subname, defaulted, in_out\\n\"\n            + \"        From user_arguments t\\n\"\n            + \"       Where nvl(t.package_name, '###') = nvl((?), '###')\\n\"\n            + \"         And t.object_name = (?)\\n\"\n            + \"         And nvl(t.overload, '###') = nvl(?, '###')\\n\"\n            + \"         And t.data_level = 0\\n\"\n            + \"         And not(pls_type is null and argument_name is null and data_type is null)\"\n            + \"       Order By t.sequence) p\\n\";\n\n\n    private JdbcTemplate jdbcTemplate;\n\n    public ProcedureDao(DataSource dataSource) {\n        jdbcTemplate = new JdbcTemplate(dataSource);\n    }\n\n    public List<Procedure> getAllProcedure(OBridgeConfiguration c) {\n        List<Procedure> allProcedures = getAllProcedure(c.getPackagesLike(), \"\");\n        allProcedures.addAll(getAllSimpleFunctionAndProcedure());\n\n        return allProcedures;\n    }\n\n    public List<Procedure> getAllSimpleFunctionAndProcedure() {\n        return jdbcTemplate.query(\n                GET_ALL_SIMPLE_FUNCTION_AND_PROCEDURE,\n                (resultSet, i) -> new Procedure.Builder()\n                        .objectName(\"\")\n                        .procedureName(resultSet.getString(\"object_name\"))\n                        .overload(resultSet.getString(\"overload\") == null ? \"\" : resultSet.getString(\"overload\"))\n                        .methodType(resultSet.getInt(\"proc_or_func\") == 0 ? \"PROCEDURE\" : \"FUNCTION\")\n                        .argumentList(getProcedureArguments(\"\",\n                                resultSet.getString(\"object_name\"),\n                                resultSet.getString(\"overload\")))\n                        .build()\n        );\n\n    }\n\n    public List<Procedure> getAllProcedure(String packageName, String procedureName) {\n        String packageNameFilter;\n        String procedureNameFilter;\n\n        if (packageName == null || packageName.isEmpty() || \"\".equals(packageName)) {\n            packageNameFilter = \"%\";\n        } else {\n            packageNameFilter = packageName;\n        }\n\n        if (procedureName == null || procedureName.isEmpty() || \"\".equals(procedureName)) {\n            procedureNameFilter = \"%\";\n        } else {\n            procedureNameFilter = procedureName;\n        }\n\n\n        return jdbcTemplate.query(\n                GET_ALL_PROCEDURE,\n                (resultSet, i) -> new Procedure.Builder()\n                        .objectName(resultSet.getString(\"object_name\"))\n                        .procedureName(resultSet.getString(\"procedure_name\"))\n                        .overload(resultSet.getString(\"overload\") == null ? \"\" : resultSet.getString(\"overload\"))\n                        .methodType(resultSet.getInt(\"proc_or_func\") == 0 ? \"PROCEDURE\" : \"FUNCTION\")\n                        .argumentList(getProcedureArguments(resultSet.getString(\"object_name\"),\n                                resultSet.getString(\"procedure_name\"),\n                                resultSet.getString(\"overload\")))\n                        .build(), packageNameFilter, procedureNameFilter\n        );\n\n    }\n\n    public List<ProcedureArgument> getProcedureArguments(String packageName, String procedureName, String overLoadNo) {\n        return jdbcTemplate.query(\n                GET_PROCEDURE_ARGUMENTS,\n                new Object[]{packageName, procedureName, overLoadNo}, (resultSet, i) -> new ProcedureArgument(\n                        resultSet.getString(\"argument_name\"),\n                        resultSet.getString(\"data_type\"),\n                        resultSet.getString(\"type_name\"),\n                        resultSet.getString(\"in_out\").contains(\"IN\"),\n                        resultSet.getString(\"in_out\").contains(\"OUT\"),\n                        resultSet.getString(\"orig_type_name\")\n                )\n        );\n\n    }\n\n    public List<OraclePackage> getAllPackages(OBridgeConfiguration c) {\n        List<OraclePackage> allPackage = getAllRealOraclePackage(c);\n        allPackage.add(getAllStandaloneProcedureAndFunction());\n        return allPackage;\n    }\n\n    private OraclePackage getAllStandaloneProcedureAndFunction() {\n        OraclePackage oraclePackage = new OraclePackage();\n        oraclePackage.setName(\"PROCEDURES_AND_FUNCTIONS\");\n        oraclePackage.setProcedureList(getAllSimpleFunctionAndProcedure());\n        return oraclePackage;\n    }\n\n    private List<OraclePackage> getAllRealOraclePackage(OBridgeConfiguration c) {\n        String query = \"select object_name from user_objects where object_type = 'PACKAGE' and object_name like ?\";\n        return jdbcTemplate.query(query, (resultSet, i) -> {\n            OraclePackage p = new OraclePackage();\n            p.setName(resultSet.getString(\"object_name\"));\n            p.setProcedureList(getAllProcedure(resultSet.getString(\"object_name\"), \"\"));\n            return p;\n        }, c.getPackagesLike());\n    }\n\n}\n"], "filenames": ["obridge-main/src/main/java/org/obridge/dao/ProcedureDao.java"], "buggy_code_start_loc": [200], "buggy_code_end_loc": [207], "fixing_code_start_loc": [200], "fixing_code_end_loc": [207], "type": "CWE-89", "message": "A vulnerability classified as critical has been found in karsany OBridge up to 1.3. Affected is the function getAllStandaloneProcedureAndFunction of the file obridge-main/src/main/java/org/obridge/dao/ProcedureDao.java. The manipulation leads to sql injection. Upgrading to version 1.4 is able to address this issue. The name of the patch is 52eca4ad05f3c292aed3178b2f58977686ffa376. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-218376.", "other": {"cve": {"id": "CVE-2018-25075", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-15T20:15:09.260", "lastModified": "2023-01-24T18:35:58.613", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical has been found in karsany OBridge up to 1.3. Affected is the function getAllStandaloneProcedureAndFunction of the file obridge-main/src/main/java/org/obridge/dao/ProcedureDao.java. The manipulation leads to sql injection. Upgrading to version 1.4 is able to address this issue. The name of the patch is 52eca4ad05f3c292aed3178b2f58977686ffa376. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-218376."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:H/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "HIGH", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 2.5, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:obridge_project:obridge:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4", "matchCriteriaId": "3C45B1C3-0899-4874-8EB6-1DAEB231B872"}]}]}], "references": [{"url": "https://github.com/karsany/obridge/commit/52eca4ad05f3c292aed3178b2f58977686ffa376", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/karsany/obridge/releases/tag/v1.4", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218376", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218376", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/karsany/obridge/commit/52eca4ad05f3c292aed3178b2f58977686ffa376"}}