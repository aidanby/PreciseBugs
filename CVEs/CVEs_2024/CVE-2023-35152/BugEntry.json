{"buggy_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.xwiki.platform</groupId>\n    <artifactId>xwiki-platform</artifactId>\n    <version>12.9-SNAPSHOT</version>\n  </parent>\n  <artifactId>xwiki-platform-core</artifactId>\n  <name>XWiki Platform - Core - Parent POM</name>\n  <packaging>pom</packaging>\n  <description>XWiki Platform - Core - Parent POM</description>\n  <properties>\n    <!-- JS/CSS minification is on by default, this property is used in order to able to skip minification when the\n         debug profile is active. It can also be used from the command line to skip minification -->\n    <xwiki.minification.skip>false</xwiki.minification.skip>\n  </properties>\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-jar-plugin</artifactId>\n          <configuration>\n            <archive>\n              <!-- Use the manifest file generated by the OSGi Maven Bundle Plugin -->\n              <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n            </archive>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <configuration>\n            <systemProperties combine.children=\"append\">\n              <!-- Tells XWiki Platform Test module to generate screenshots in the target dir when a test is failing -->\n              <!-- TODO: Remove this property once all functional tests have been moved to use the failsafe plugin -->\n              <property>\n                <name>screenshotDirectory</name>\n                <value>${basedir}/target/screenshots</value>\n              </property>\n            </systemProperties>\n          </configuration>\n          <dependencies>\n            <dependency>\n              <groupId>org.xwiki.commons</groupId>\n              <artifactId>xwiki-commons-tool-test-simple</artifactId>\n              <version>${commons.version}</version>\n            </dependency>\n          </dependencies>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-failsafe-plugin</artifactId>\n          <configuration>\n            <systemProperties combine.children=\"append\">\n              <!-- Tells XWiki Platform Test module to generate screenshots in the target dir when a test is failing -->\n              <property>\n                <name>screenshotDirectory</name>\n                <value>${basedir}/target/screenshots</value>\n              </property>\n            </systemProperties>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n    <plugins>\n      <!-- Generate OSGi Manifest information to all XWiki Core JARs -->\n      <plugin>\n        <groupId>org.apache.felix</groupId>\n        <artifactId>maven-bundle-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>bundle-manifest</id>\n            <phase>process-classes</phase>\n            <goals>\n              <goal>manifest</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.revapi</groupId>\n        <artifactId>revapi-maven-plugin</artifactId>\n        <configuration>\n          <analysisConfiguration>\n            <revapi.filter>\n              <archives>\n                <!-- We're ignoring all API incompatibilities from XWiki dependencies (i.e. commons and rendering)\n                     since they're already covered by their own builds and we release all of them together. -->\n                <exclude>\n                  <item>org\\.xwiki\\.commons:.*:.*</item>\n                  <item>org\\.xwiki\\.rendering:.*:.*</item>\n                </exclude>\n              </archives>\n            </revapi.filter>\n            <!-- Add ignores here using the following syntax. You can use a single <revapi.ignore> entry but it\n                 cannot be empty.\n\n                 Note: you can use regexes by using the syntax: <regex>true</regex>\n                 Don't forget to '\\'-escape dots and other special characters in this case ;) -->\n            <revapi.ignore>\n              <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.like.LikedEntity org.xwiki.like.LikeManager::getEntityLikes(org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</old>\n                <new>method long org.xwiki.like.LikeManager::getEntityLikes(org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n              <item>\n                <code>java.method.addedToInterface</code>\n                <new>method java.util.List&lt;org.xwiki.user.UserReference&gt; org.xwiki.like.LikeManager::getLikers(org.xwiki.model.reference.EntityReference, int, int) throws org.xwiki.like.LikeException</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n                <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method java.util.List&lt;org.xwiki.like.LikedEntity&gt; org.xwiki.like.LikeManager::getUserLikes(org.xwiki.user.UserReference) throws org.xwiki.like.LikeException</old>\n                <new>method java.util.List&lt;org.xwiki.model.reference.EntityReference&gt; org.xwiki.like.LikeManager::getUserLikes(org.xwiki.user.UserReference, int, int) throws org.xwiki.like.LikeException</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n                <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.like.LikedEntity org.xwiki.like.LikeManager::saveLike(org.xwiki.user.UserReference, org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</old>\n                <new>method long org.xwiki.like.LikeManager::saveLike(org.xwiki.user.UserReference, org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n                <item>\n                <code>java.class.removed</code>\n                <old>interface org.xwiki.like.LikedEntity</old>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n                <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method java.util.List&lt;org.xwiki.like.LikedEntity&gt; org.xwiki.like.script.LikeScriptService::getUserLikes(org.xwiki.user.UserReference)</old>\n                <new>method java.util.List&lt;org.xwiki.model.reference.EntityReference&gt; org.xwiki.like.script.LikeScriptService::getUserLikes(org.xwiki.user.UserReference, int, int)</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.AbstractRatingEvent</old>\n                <justification>Redesign of Ratings API: this class has actually been moved to org.xwiki.ratings.events.AbstractRatingEvent but deeply changed internally.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.addedToInterface</code>\n                <new>method .+ org.xwiki.ratings.AverageRating::.+</new>\n                <justification>Redesign of Ratings API: Several new methods have been added to AverageRating class.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method void org.xwiki.ratings.AverageRating::save() throws org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: This method has been removed since it should be handled by a dedicated manager and not there.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method void org.xwiki.ratings.AverageRating::set.+</old>\n                <justification>Redesign of Ratings API: this interface now only provide getters.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.AverageRating::getMethod()</old>\n                <justification>Redesign of Ratings API: this method is no longer needed with the new architecture.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.AverageRatingApi</old>\n                <justification>Redesign of Ratings API: only the AverageRating interface should now be used.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>interface org.xwiki.ratings.ConfiguredProvider&lt;T&gt;</old>\n                <justification>Redesign of Ratings API: this class is useless with the new architecture.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.ConfiguredRatingsManagerProvider</old>\n                <justification>Redesign of Ratings API: this class is useless with the new architecture.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.ConfiguredReputationAlgorithmProvider</old>\n                <justification>Redesign of Ratings API: the reputation is no longer supported by this extension.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.Rating::display(java.lang.String, java.lang.String)</old>\n                <justification>Redesign of Ratings API: this method is not directly related to rating.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.Object org.xwiki.ratings.Rating::get(java.lang.String)</old>\n                <justification>Redesign of Ratings API: this method was too generic for this API.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method com.xpn.xwiki.objects.BaseObject org.xwiki.ratings.Rating::getAsObject() throws org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: this method implied that Rating were always stored as xobject which is not always true.</justification>\n              </item>\n              <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.model.reference.DocumentReference org.xwiki.ratings.Rating::getAuthor()</old>\n                <new>method org.xwiki.user.UserReference org.xwiki.ratings.Rating::getAuthor()</new>\n                <justification>Redesign of Ratings API: Following our new User API practice, a user is represented by a UserReference.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.addedToInterface</code>\n                <new>method .+ org.xwiki.ratings.Rating::.+</new>\n                <justification>Redesign of Ratings API: Rating interface expose now new data that are available through the interface.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.util.Date org.xwiki.ratings.Rating::getDate()</old>\n                <justification>Redesign of Ratings API: two dates are now available, the creation date and the last update date.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.model.reference.DocumentReference org.xwiki.ratings.Rating::getDocumentReference()</old>\n                <justification>Redesign of Ratings API: Rating is now not only for documents but for any entity. See Rating#getReference().</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.Rating::getGlobalRatingId()</old>\n                <justification>Redesign of Ratings API: there is now a unique ID available with Rating#getId().</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.Rating::getRatingId()</old>\n                <justification>Redesign of Ratings API: there is now a unique ID available with Rating#getId().</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method boolean org.xwiki.ratings.Rating::remove() throws org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: this API is now handled only through the RatingsManager.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method void org.xwiki.ratings.Rating::save() throws org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: this API is now handled only through the RatingsManager.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method void org.xwiki.ratings.Rating::set.+</old>\n                <justification>Redesign of Ratings API: Only getters are now available in this interface.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.addedToInterface</code>\n                <new>method .+ org.xwiki.ratings.RatingsConfiguration::.+</new>\n                <justification>Redesign of Ratings API: RatingsConfiguration now defines configuration methods for Ratings. Check out the documentation.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method com.xpn.xwiki.doc.XWikiDocument org.xwiki.ratings.RatingsConfiguration::getConfigurationDocument(org.xwiki.model.reference.DocumentReference)</old>\n                <justification>Redesign of Ratings API: RatingsConfiguration now defines configuration methods for Ratings. Check out the documentation.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.RatingsConfiguration::getConfigurationParameter(org.xwiki.model.reference.DocumentReference, java.lang.String, java.lang.String)</old>\n                <justification>Redesign of Ratings API: RatingsConfiguration now defines configuration methods for Ratings. Check out the documentation.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.field.removedWithConstant</code>\n                <old>field .+ @ org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: RatingsException does not extend anymore XWikiException.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.field.removedWithConstant</code>\n                <old>field org.xwiki.ratings.RatingsException.[A-Z_]+</old>\n                <justification>Redesign of Ratings API: Error codes have been removed from RatingsException, we only rely on meaningfull messages.</justification>\n              </item>\n              <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method void org.xwiki.ratings.RatingsException::&lt;init&gt;()</old>\n                <new>method void org.xwiki.ratings.RatingsException::&lt;init&gt;(java.lang.String)</new>\n                <justification>Redesign of Ratings API: Error codes have been removed from RatingsException, we only rely on meaningfull messages.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method .+ org.xwiki.ratings.RatingsException::.+</old>\n                <justification>Redesign of Ratings API: Error codes have been removed from RatingsException, we only rely on meaningfull messages.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method .+ com.xpn.xwiki.XWikiException::.+ @ org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: RatingsException does not extend anymore XWikiException.</justification>\n              </item>\n              <item>\n                <code>java.class.noLongerInheritsFromClass</code>\n                <old>class org.xwiki.ratings.RatingsException</old>\n                <new>class org.xwiki.ratings.RatingsException</new>\n                <justification>Redesign of Ratings API: RatingsException does not extend anymore XWikiException.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.field.removedWithConstant</code>\n                <old>field org.xwiki.ratings.RatingsManager.[A-Z_]+</old>\n                <justification>Redesign of Ratings API: Constants have been removed from RatingsManager since they were tightly linked to the storage representation.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.field.removed</code>\n                <old>field org.xwiki.ratings.RatingsManager.[A-Z_]+</old>\n                <justification>Redesign of Ratings API: Constants have been removed from RatingsManager since they were tightly linked to the storage representation.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.addedToInterface</code>\n                <new>method .+ org.xwiki.ratings.RatingsManager::.+</new>\n                <justification>Redesign of Ratings API: some new methods have been added because of new needs.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.AverageRating org.xwiki.ratings.RatingsManager::getAverageRating(===org.xwiki.model.reference.DocumentReference===) throws org.xwiki.ratings.RatingsException</old>\n                <new>parameter org.xwiki.ratings.AverageRating org.xwiki.ratings.RatingsManager::getAverageRating(===org.xwiki.model.reference.EntityReference===) throws org.xwiki.ratings.RatingsException</new>\n                <justification>Redesign of Ratings API: ratings now apply on entities not just documents.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method .+ org.xwiki.ratings.RatingsManager::.+</old>\n                <justification>Redesign of Ratings API: the API of RatingsManager have been greatly simplified.</justification>\n              </item>\n              <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.RatingsManager::getRatings(org.xwiki.model.reference.DocumentReference, int, int, boolean) throws org.xwiki.ratings.RatingsException</old>\n                <new>method java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.RatingsManager::getRatings(java.util.Map&lt;org.xwiki.ratings.RatingsManager.RatingQueryField, java.lang.Object&gt;, int, int, org.xwiki.ratings.RatingsManager.RatingQueryField, boolean) throws org.xwiki.ratings.RatingsException</new>\n                <justification>Redesign of Ratings API: the method to retrieve ratings in RatingsManager have been made more generic.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter boolean org.xwiki.ratings.RatingsManager::removeRating(===org.xwiki.ratings.Rating===) throws org.xwiki.ratings.RatingsException</old>\n                <new>parameter boolean org.xwiki.ratings.RatingsManager::removeRating(===java.lang.String===) throws org.xwiki.ratings.RatingsException</new>\n                <justification>Redesign of Ratings API: the method to remove a rating in RatingsManager now only take an identifier.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>interface org.xwiki.ratings.ReputationAlgorithm</old>\n                <justification>Redesign of Ratings API: Reputation was never finished and is no longer supported in Ratings.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>interface org.xwiki.ratings.ReputationAlgorithmGroovy</old>\n                <justification>Redesign of Ratings API: Reputation was never finished and is no longer supported in Ratings.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.ReputationException</old>\n                <justification>Redesign of Ratings API: Reputation was never finished and is no longer supported in Ratings.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.UpdateRatingEvent</old>\n                <justification>Redesign of Ratings API: this class has been refactored, an equivalent is now in org.xwiki.ratings.events.UpdatedRatingEvent.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.UpdateRatingFailedEvent</old>\n                <justification>Redesign of Ratings API: we removed the begin/end event for Ratings. They only exist for AverageRating for technical reasons.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.UpdatingRatingEvent</old>\n                <justification>Redesign of Ratings API: we removed the begin/end event for Ratings. They only exist for AverageRating for technical reasons.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.script.RatingApi</old>\n                <justification>Redesign of Ratings API: only the Rating interface should now be used.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getUserReputation.*</old>\n                <justification>Redesign of Ratings API: User reputation is not supported anymore.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(com.xpn.xwiki.api.Document, java.lang.String)</old>\n                <justification>Redesign of Ratings API: this method was already deprecated.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating(com.xpn.xwiki.api.Document, java.lang.String)</old>\n                <justification>Redesign of Ratings API: this method was already deprecated.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method com.xpn.xwiki.api.Document org.xwiki.ratings.script.RatingsScriptService::getConfigurationDocument(org.xwiki.model.reference.DocumentReference)</old>\n                <justification>Redesign of Ratings API: this method does not make sense in the new design.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating(===com.xpn.xwiki.api.Document===)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.AverageRating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getAverageRating(===org.xwiki.model.reference.EntityReference===) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: allow to retrieve average rating for any reference (not only DocumentReference).</justification>\n              </item>\n              <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating(com.xpn.xwiki.api.Document)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.AverageRating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getAverageRating(org.xwiki.model.reference.EntityReference) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating.*</old>\n                <justification>Redesign of Ratings API: clean up of deprecated methods or methods that are not relevant on the new design.</justification>\n              </item>\n              <item>\n                <code>java.class.nonFinalClassInheritsFromNewClass</code>\n                <old>class org.xwiki.ratings.script.RatingsScriptService</old>\n                <new>class org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: this change shouldn't impact using the script service.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(===com.xpn.xwiki.api.Document===, java.lang.String)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRating(===org.xwiki.model.reference.EntityReference===, org.xwiki.user.UserReference) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: allow to retrieve average rating for any reference (not only DocumentReference)</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(com.xpn.xwiki.api.Document, ===java.lang.String===)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRating(org.xwiki.model.reference.EntityReference, ===org.xwiki.user.UserReference===) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for specifying a user by using the UserReference.</justification>\n              </item>\n                <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(com.xpn.xwiki.api.Document, java.lang.String)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRating(org.xwiki.model.reference.EntityReference, org.xwiki.user.UserReference) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(org.xwiki.model.reference.DocumentReference, org.xwiki.model.reference.DocumentReference)</old>\n                <justification>Redesign of Ratings API: the changes above actually apply to that one.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(===com.xpn.xwiki.api.Document===, int, int)</old>\n                <new>parameter java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRatings(===org.xwiki.model.reference.EntityReference===, int, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: allow to retrieve rating for any reference (not only DocumentReference)</justification>\n              </item>\n              <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(org.xwiki.model.reference.DocumentReference, int, int)</old>\n                <new>method java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRatings(org.xwiki.model.reference.EntityReference, int, int, boolean) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: actually the method with this number of parameter existed (see below)</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(org.xwiki.model.reference.DocumentReference, int, int, boolean)</old>\n                <justification>Redesign of Ratings API: this method was actually not removed but we used an EntityReference instead of Document API. See above.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(com.xpn.xwiki.api.Document, int, int, boolean)</old>\n                <justification>Redesign of Ratings API: removal of deprecated methods using Document parameter.</justification>\n              </item>\n              <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(com.xpn.xwiki.api.Document, java.lang.String, int)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: removal of deprecated methods using Document parameter. A new API has been introduced and revapi considers it replaces it.</justification>\n              </item>\n              <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(com.xpn.xwiki.api.Document, java.lang.String, int)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>\n              </item>\n                <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(===org.xwiki.model.reference.DocumentReference===, org.xwiki.model.reference.DocumentReference, int)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(===org.xwiki.model.reference.EntityReference===, org.xwiki.user.UserReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: allow to set rating for any reference (not only DocumentReference)</justification>\n              </item>\n                <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(org.xwiki.model.reference.DocumentReference, ===org.xwiki.model.reference.DocumentReference===, int)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, ===org.xwiki.user.UserReference===, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for specifying a user by using the UserReference.</justification>\n              </item>\n                <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(org.xwiki.model.reference.DocumentReference, org.xwiki.model.reference.DocumentReference, int)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, org.xwiki.user.UserReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>\n              </item>\n            </revapi.ignore>\n          </analysisConfiguration>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n  <modules>\n      <!-- Sorted Alphabetically -->\n    <module>xwiki-platform-activeinstalls</module>\n    <module>xwiki-platform-administration</module>\n    <module>xwiki-platform-alerts</module>\n    <module>xwiki-platform-annotation</module>\n    <module>xwiki-platform-application</module>\n    <module>xwiki-platform-appwithinminutes</module>\n    <module>xwiki-platform-attachment</module>\n    <module>xwiki-platform-autotag</module>\n    <module>xwiki-platform-bridge</module>\n    <module>xwiki-platform-captcha</module>\n    <module>xwiki-platform-chart</module>\n    <module>xwiki-platform-classloader</module>\n    <module>xwiki-platform-component</module>\n    <module>xwiki-platform-configuration</module>\n    <module>xwiki-platform-container</module>\n    <module>xwiki-platform-crypto</module>\n    <module>xwiki-platform-csrf</module>\n    <module>xwiki-platform-dashboard</module>\n    <module>xwiki-platform-date</module>\n    <module>xwiki-platform-diff</module>\n    <module>xwiki-platform-diffplugin</module>\n    <module>xwiki-platform-display</module>\n    <module>xwiki-platform-edit</module>\n    <module>xwiki-platform-eventstream</module>\n    <module>xwiki-platform-extension</module>\n    <module>xwiki-platform-feed</module>\n    <module>xwiki-platform-filter</module>\n    <module>xwiki-platform-flamingo</module>\n    <module>xwiki-platform-flavor</module>\n    <module>xwiki-platform-formula</module>\n    <module>xwiki-platform-graphviz</module>\n    <module>xwiki-platform-groovy</module>\n    <module>xwiki-platform-help</module>\n    <module>xwiki-platform-icon</module>\n    <module>xwiki-platform-image</module>\n    <module>xwiki-platform-index</module>\n    <module>xwiki-platform-instance</module>\n    <module>xwiki-platform-invitation</module>\n    <module>xwiki-platform-job</module>\n    <module>xwiki-platform-jodatime</module>\n    <module>xwiki-platform-lesscss</module>\n    <module>xwiki-platform-like</module>\n    <module>xwiki-platform-linkchecker</module>\n    <module>xwiki-platform-livetable</module>\n    <module>xwiki-platform-localization</module>\n    <module>xwiki-platform-logging</module>\n    <module>xwiki-platform-mail</module>\n    <module>xwiki-platform-mailsender</module>\n    <module>xwiki-platform-mentions</module>\n    <module>xwiki-platform-menu</module>\n    <module>xwiki-platform-messagestream</module>\n    <module>xwiki-platform-minimaldependencies</module>\n    <module>xwiki-platform-model</module>\n    <module>xwiki-platform-notifications</module>\n    <module>xwiki-platform-observation</module>\n    <module>xwiki-platform-office</module>\n    <module>xwiki-platform-oldcore</module>\n    <module>xwiki-platform-panels</module>\n    <module>xwiki-platform-query</module>\n    <module>xwiki-platform-ratings</module>\n    <module>xwiki-platform-refactoring</module>\n    <module>xwiki-platform-release</module>\n    <module>xwiki-platform-rendering</module>\n    <module>xwiki-platform-repository</module>\n    <module>xwiki-platform-resource</module>\n    <module>xwiki-platform-rest</module>\n    <module>xwiki-platform-sandbox</module>\n    <module>xwiki-platform-sharepage</module>\n    <module>xwiki-platform-scheduler</module>\n    <module>xwiki-platform-search</module>\n    <module>xwiki-platform-security</module>\n    <module>xwiki-platform-sheet</module>\n    <module>xwiki-platform-skin</module>\n    <module>xwiki-platform-statistics</module>\n    <module>xwiki-platform-store</module>\n    <module>xwiki-platform-svg</module>\n    <module>xwiki-platform-tag</module>\n    <module>xwiki-platform-template</module>\n    <module>xwiki-platform-test</module>\n    <module>xwiki-platform-tika</module>\n    <module>xwiki-platform-tree</module>\n    <module>xwiki-platform-user</module>\n    <module>xwiki-platform-uiextension</module>\n    <module>xwiki-platform-url</module>\n    <module>xwiki-platform-velocity</module>\n    <module>xwiki-platform-vfs</module>\n    <module>xwiki-platform-web</module>\n    <module>xwiki-platform-webjars</module>\n    <module>xwiki-platform-wiki</module>\n    <module>xwiki-platform-wysiwyg</module>\n    <module>xwiki-platform-xar</module>\n    <module>xwiki-platform-xclass</module>\n    <module>xwiki-platform-xml</module>\n    <module>xwiki-platform-zipexplorer</module>\n  </modules>\n  <profiles>\n    <!-- Profile to build Legacy modules -->\n    <profile>\n      <id>legacy</id>\n      <modules>\n        <module>xwiki-platform-legacy</module>\n      </modules>\n    </profile>\n    <profile>\n      <id>docker</id>\n      <build>\n        <pluginManagement>\n          <plugins>\n            <plugin>\n              <groupId>org.apache.maven.plugins</groupId>\n              <artifactId>maven-failsafe-plugin</artifactId>\n              <configuration>\n                <systemProperties combine.children=\"append\">\n                  <!-- This is required by the Oracle JDBC driver when running configuration tests on Oracle, as\n                       otherwise it fails with:\n                         SQLException: ORA-00604: error occurred at recursive SQL level 1\n                         ORA-01882: timezone region not found\n                       It's required at this level since TestContainers used JDBC to verify that the Oracle database is\n                       started.\n                  -->\n                  <property>\n                    <name>oracle.jdbc.timezoneAsRegion</name>\n                    <value>false</value>\n                  </property>\n                </systemProperties>\n              </configuration>\n            </plugin>\n          </plugins>\n        </pluginManagement>\n      </build>\n    </profile>\n  </profiles>\n</project>\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like;\n\nimport java.util.List;\n\nimport org.xwiki.component.annotation.Role;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.user.UserReference;\n\n/**\n * General manager to handle likes.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@Role\n@Unstable\npublic interface LikeManager\n{\n    /**\n     * Create a page like and save it.\n     *\n     * @param source the user who performs the like.\n     * @param target the page or object to like.\n     * @return the new number of likes.\n     * @throws LikeException in case of problem when saving the like.\n     */\n    long saveLike(UserReference source, EntityReference target) throws LikeException;\n\n    /**\n     * Retrieve the likes performed by the given user.\n     *\n     * @param source the user for whom to retrieve the entity likes.\n     * @param offset the offset used for pagination.\n     * @param limit the limit number of results to retrieve for pagination.\n     * @return a list of references liked by this user.\n     * @throws LikeException in case of problem when getting the like.\n     */\n    List<EntityReference> getUserLikes(UserReference source, int offset, int limit) throws LikeException;\n\n    /**\n     * Retrieve like information a specific entity.\n     *\n     * @param target the page or object for which to retrieve the like information.\n     * @return the number of likes for that entity.\n     * @throws LikeException in case of problem when getting the like.\n     */\n    long getEntityLikes(EntityReference target) throws LikeException;\n\n    /**\n     * Allow a user to unlike an entity.\n     *\n     * @param source the user who performs the unlike.\n     * @param target the entity to unlike.\n     * @return {@code true} if the entity has been properly unliked.\n     * @throws LikeException in case of problem when removing the like.\n     */\n    boolean removeLike(UserReference source, EntityReference target) throws LikeException;\n\n    /**\n     * Check if an entity is liked by an user without loading all likers.\n     *\n     * @param source the user who might have liked.\n     * @param target the entity which might have been liked.\n     * @return {@code true} if the user liked the page already.\n     * @throws LikeException in case of problem for loading the result.\n     */\n    boolean isLiked(UserReference source, EntityReference target) throws LikeException;\n\n    /**\n     * Retrieve the users who liked the given reference.\n     *\n     * @param target the page that has been liked.\n     * @param offset the offset used for pagination.\n     * @param limit the limit used for pagination.\n     * @return a list of user references of users who liked this page.\n     * @throws LikeException in case of problem for performing the query.\n     */\n    List<UserReference> getLikers(EntityReference target, int offset, int limit) throws LikeException;\n\n    /**\n     * @return a dedicated programmatic right for Like feature.\n     */\n    Right getLikeRight();\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like.internal;\n\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.xwiki.cache.Cache;\nimport org.xwiki.cache.CacheException;\nimport org.xwiki.cache.CacheManager;\nimport org.xwiki.cache.config.LRUCacheConfiguration;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.component.manager.ComponentLifecycleException;\nimport org.xwiki.component.phase.Disposable;\nimport org.xwiki.component.phase.Initializable;\nimport org.xwiki.component.phase.InitializationException;\nimport org.xwiki.like.LikeConfiguration;\nimport org.xwiki.like.LikeEvent;\nimport org.xwiki.like.LikeException;\nimport org.xwiki.like.LikeManager;\nimport org.xwiki.like.UnlikeEvent;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.ratings.Rating;\nimport org.xwiki.ratings.RatingsException;\nimport org.xwiki.ratings.RatingsManager;\nimport org.xwiki.ratings.RatingsManagerFactory;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.security.authorization.UnableToRegisterRightException;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceSerializer;\n\n/**\n * Default implementation of {@link LikeManager} based on {@link RatingsManager}.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@Component\n@Singleton\npublic class DefaultLikeManager implements LikeManager, Initializable, Disposable\n{\n    private static final int DEFAULT_LIKE_VOTE = 1;\n\n    @Inject\n    private RatingsManagerFactory ratingsManagerFactory;\n\n    @Inject\n    @Named(\"document\")\n    private UserReferenceSerializer<DocumentReference> userReferenceDocumentSerializer;\n\n    @Inject\n    private UserReferenceSerializer<String> userReferenceStringSerializer;\n\n    @Inject\n    private EntityReferenceSerializer<String> entityReferenceSerializer;\n\n    @Inject\n    private AuthorizationManager authorizationManager;\n\n    @Inject\n    private ObservationManager observationManager;\n\n    @Inject\n    private CacheManager cacheManager;\n\n    @Inject\n    private LikeConfiguration likeConfiguration;\n\n    private RatingsManager ratingsManager;\n\n    private Cache<Long> likeCountCache;\n\n    private Cache<Boolean> likeExistCache;\n\n    private Right likeRight;\n\n    @Override\n    public void initialize() throws InitializationException\n    {\n        int likeCacheCapacity = this.likeConfiguration.getLikeCacheCapacity();\n        try {\n            this.likeCountCache = this.cacheManager.createNewCache(\n                new LRUCacheConfiguration(\"xwiki.like.count.cache\", likeCacheCapacity));\n            this.likeExistCache = this.cacheManager.createNewCache(\n                new LRUCacheConfiguration(\"xwiki.like.exist.cache\", likeCacheCapacity));\n            this.likeRight = this.authorizationManager.register(LikeRight.INSTANCE);\n        } catch (UnableToRegisterRightException e) {\n            throw new InitializationException(\"Error while registering the Like right.\", e);\n        } catch (CacheException e) {\n            throw new InitializationException(\"Error while creating the cache for likes.\", e);\n        }\n\n        try {\n            this.ratingsManager = this.ratingsManagerFactory\n                .getRatingsManager(LikeRatingsConfiguration.RANKING_MANAGER_HINT);\n        } catch (RatingsException e) {\n            throw new InitializationException(\"Error while trying to get the RankingManager.\", e);\n        }\n    }\n\n    @Override\n    public void dispose() throws ComponentLifecycleException\n    {\n        //this.authorizationManager.\n    }\n\n    private String getExistCacheKey(UserReference source, EntityReference target)\n    {\n        return String.format(\"%s_%s\",\n            this.userReferenceStringSerializer.serialize(source), this.entityReferenceSerializer.serialize(target));\n    }\n\n    @Override\n    public long saveLike(UserReference source, EntityReference target) throws LikeException\n    {\n        DocumentReference userDoc = this.userReferenceDocumentSerializer.serialize(source);\n        if (this.authorizationManager.hasAccess(this.likeRight, userDoc, target)) {\n            try {\n                this.ratingsManager.saveRating(target, source, DEFAULT_LIKE_VOTE);\n                this.likeCountCache.remove(this.entityReferenceSerializer.serialize(target));\n                this.likeExistCache.set(getExistCacheKey(source, target), true);\n                long newCount = this.getEntityLikes(target);\n                this.observationManager.notify(new LikeEvent(), source, target);\n                return newCount;\n            } catch (RatingsException e) {\n                throw new LikeException(String.format(\"Error while liking entity [%s]\", target), e);\n            }\n        } else {\n            throw new LikeException(String.format(\"User [%s] is not authorized to perform a like on [%s]\",\n                source, target));\n        }\n    }\n\n    @Override\n    public List<EntityReference> getUserLikes(UserReference source, int offset, int limit) throws LikeException\n    {\n        try {\n            List<Rating> ratings = this.ratingsManager.getRatings(\n                Collections.singletonMap(RatingsManager.RatingQueryField.USER_REFERENCE, source),\n                offset,\n                limit,\n                RatingsManager.RatingQueryField.UPDATED_DATE,\n                false);\n            return ratings.stream().map(Rating::getReference).collect(Collectors.toList());\n        } catch (RatingsException e) {\n            throw new LikeException(\n                String.format(\"Error when trying to retrieve user likes for user [%s]\", source), e);\n        }\n    }\n\n    @Override\n    public long getEntityLikes(EntityReference target) throws LikeException\n    {\n        Long result = this.likeCountCache.get(this.entityReferenceSerializer.serialize(target));\n        if (result == null) {\n            Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n            try {\n                result = this.ratingsManager.countRatings(queryMap);\n                this.likeCountCache.set(this.entityReferenceSerializer.serialize(target), result);\n            } catch (RatingsException e) {\n                throw\n                    new LikeException(String.format(\"Error while getting ratings for entity [%s]\", target), e);\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public boolean removeLike(UserReference source, EntityReference target) throws LikeException\n    {\n        String serializedTarget = this.entityReferenceSerializer.serialize(target);\n        DocumentReference userDoc = this.userReferenceDocumentSerializer.serialize(source);\n        boolean result = false;\n        if (this.authorizationManager.hasAccess(this.getLikeRight(), userDoc, target)) {\n            Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n            queryMap.put(RatingsManager.RatingQueryField.USER_REFERENCE, source);\n\n            try {\n                List<Rating> ratings =\n                    this.ratingsManager\n                        .getRatings(queryMap, 0, 1, RatingsManager.RatingQueryField.UPDATED_DATE, false);\n                if (!ratings.isEmpty()) {\n                    result = this.ratingsManager.removeRating(ratings.get(0).getId());\n                    this.likeCountCache.remove(serializedTarget);\n                    this.likeExistCache.set(getExistCacheKey(source, target), false);\n                    this.observationManager.notify(new UnlikeEvent(), source, target);\n                }\n            } catch (RatingsException e) {\n                throw new LikeException(\"Error while removing grading\", e);\n            }\n        } else {\n            throw new LikeException(\n                String.format(\"User [%s] is not authorized to remove a like on [%s].\",\n                    userDoc, target));\n        }\n        return result;\n    }\n\n    @Override\n    public boolean isLiked(UserReference source, EntityReference target) throws LikeException\n    {\n        Boolean result = this.likeExistCache.get(getExistCacheKey(source, target));\n        if (result == null) {\n            Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n            queryMap.put(RatingsManager.RatingQueryField.USER_REFERENCE, source);\n\n            try {\n                List<Rating> ratings =\n                    this.ratingsManager\n                        .getRatings(queryMap, 0, 1, RatingsManager.RatingQueryField.UPDATED_DATE, false);\n                result = !ratings.isEmpty();\n                this.likeExistCache.set(getExistCacheKey(source, target), result);\n            } catch (RatingsException e) {\n                throw new LikeException(\"Error while checking if grading exists\", e);\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public List<UserReference> getLikers(EntityReference target, int offset, int limit) throws LikeException\n    {\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        try {\n            List<Rating> ratings = this.ratingsManager\n                .getRatings(queryMap, offset, limit, RatingsManager.RatingQueryField.UPDATED_DATE, false);\n            return ratings.stream().map(Rating::getAuthor).collect(Collectors.toList());\n        } catch (RatingsException e) {\n            throw new LikeException(String.format(\"Error while getting likers of [%s]\", target), e);\n        }\n    }\n\n    @Override\n    public Right getLikeRight()\n    {\n        return this.likeRight;\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like.script;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Optional;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Provider;\nimport javax.inject.Singleton;\n\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.slf4j.Logger;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.like.LikeConfiguration;\nimport org.xwiki.like.LikeException;\nimport org.xwiki.like.LikeManager;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.LocalDocumentReference;\nimport org.xwiki.rendering.async.internal.AsyncRendererCache;\nimport org.xwiki.script.service.ScriptService;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\n\n/**\n * Script service for manipulating Like informations.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@Component\n@Singleton\n@Named(\"like\")\n@Unstable\npublic class LikeScriptService implements ScriptService\n{\n    private static final LocalDocumentReference UIX_REFERENCE =\n        new LocalDocumentReference(new LocalDocumentReference(Arrays.asList(\"XWiki\", \"Like\"), \"LikeUIX\"), Locale.ROOT);\n\n    @Inject\n    private Provider<XWikiContext> contextProvider;\n\n    @Inject\n    private LikeManager likeManager;\n\n    @Inject\n    private LikeConfiguration likeConfiguration;\n\n    @Inject\n    private AuthorizationManager authorizationManager;\n\n    @Inject\n    @Named(\"document\")\n    private UserReferenceResolver<DocumentReference> userReferenceResolver;\n\n    @Inject\n    private AsyncRendererCache asyncRendererCache;\n\n    @Inject\n    private Logger logger;\n\n    private Right getLikeRight()\n    {\n        return this.likeManager.getLikeRight();\n    }\n\n    /**\n     * Check if current user is allowed to use Like on the given reference.\n     * Note that we explicitely deny the right for guests.\n     * @param entityReference the reference on which to use like.\n     * @return {@code true} only if current user is not guest and has Like right on the reference.\n     */\n    public boolean isAuthorized(EntityReference entityReference)\n    {\n        DocumentReference userReference = this.contextProvider.get().getUserReference();\n        return userReference != null && this.authorizationManager.hasAccess(getLikeRight(),\n            userReference, entityReference);\n    }\n\n    /**\n     * Check if the display button should be displayed: should be {@code true} if current user is authorized to use like\n     * (see {@link #isAuthorized(EntityReference)}) or if the configuration is set to always display it\n     * (see {@link LikeConfiguration#alwaysDisplayButton()}).\n     *\n     * @param entityReference the reference for which to display the button\n     * @return {@code true} only if the button should be displayed.\n     */\n    public boolean displayButton(EntityReference entityReference)\n    {\n        return this.likeConfiguration.alwaysDisplayButton() || this.isAuthorized(entityReference);\n    }\n\n    /**\n     * Perform a like on the given reference with the current user, only if allowed.\n     *\n     * @param entityReference the reference on which to perform a like.\n     * @return the new number of likes if the operation succeeded, else return an empty optional.\n     */\n    public Optional<Long> like(EntityReference entityReference)\n    {\n        XWikiContext xWikiContext = this.contextProvider.get();\n        DocumentReference currentUser = xWikiContext.getUserReference();\n\n        if (entityReference instanceof DocumentReference) {\n            DocumentReference documentReference = (DocumentReference) entityReference;\n            if (isAuthorized(documentReference)) {\n                UserReference userReference = this.userReferenceResolver.resolve(currentUser);\n                try {\n                    return Optional.of(this.likeManager.saveLike(userReference, documentReference));\n                } catch (LikeException e) {\n                    this.logger.warn(\"Error while liking [{}] by [{}]\", documentReference, currentUser,\n                        ExceptionUtils.getRootCause(e));\n                }\n            } else {\n                this.logger.warn(\"[{}] is not authorized to like [{}].\", currentUser, documentReference);\n            }\n        } else {\n            this.logger.warn(\"Like is only implemented for document for now. (Called with [{}])\", entityReference);\n        }\n        return Optional.empty();\n    }\n\n    /**\n     * Perform a unlike on the given reference with the current user, only if allowed.\n     *\n     * @param entityReference the reference on which to perform a like.\n     * @return the new number of likes if the operation succeeded, else return an empty optional.\n     */\n    public Optional<Long> unlike(EntityReference entityReference)\n    {\n        XWikiContext xWikiContext = this.contextProvider.get();\n        DocumentReference currentUser = xWikiContext.getUserReference();\n\n        if (entityReference instanceof DocumentReference) {\n            DocumentReference documentReference = (DocumentReference) entityReference;\n            if (this.isAuthorized(documentReference)) {\n                UserReference userReference = this.userReferenceResolver.resolve(currentUser);\n                try {\n                    this.likeManager.removeLike(userReference, entityReference);\n                    return Optional.of(this.likeManager.getEntityLikes(entityReference));\n                } catch (LikeException e) {\n                    this.logger.warn(\"Error while unliking [{}] by [{}]\", documentReference, currentUser,\n                        ExceptionUtils.getRootCause(e));\n                }\n            } else {\n                this.logger.warn(\"[{}] is not authorized to unlike [{}].\", currentUser, documentReference);\n            }\n        } else {\n            this.logger.warn(\"Unlike is only implemented for document for now. (Called with [{}])\", entityReference);\n        }\n        return Optional.empty();\n    }\n\n    /**\n     * Retrieve like information for the given reference.\n     *\n     * @param entityReference the reference for which to retrieve like information.\n     * @return the number of likes, or an empty optional in case of problem.\n     */\n    public Optional<Long> getLikes(EntityReference entityReference)\n    {\n        try {\n            return Optional.of(this.likeManager.getEntityLikes(entityReference));\n        } catch (LikeException e) {\n            this.logger.warn(\"Error while getting like information for [{}]\", entityReference,\n                ExceptionUtils.getRootCause(e));\n        }\n        return Optional.empty();\n    }\n\n    /**\n     * Retrieve likes performed by the given user.\n     *\n     * @param userReference the user for whom to retrieve likes.\n     * @param offset the offset used for pagination.\n     * @param limit the limit used for pagination.\n     * @return a list of liked references.\n     */\n    public List<EntityReference> getUserLikes(UserReference userReference, int offset, int limit)\n    {\n        try {\n            return this.likeManager.getUserLikes(userReference, offset, limit);\n        } catch (LikeException e) {\n            this.logger.warn(\"Error while retrieving likes for user [{}]\", userReference,\n                ExceptionUtils.getRootCause(e));\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * Determine if the current user already liked the given reference.\n     * @param entityReference the reference for which to check if the current liked it or not already.\n     * @return {@code true} if the entity has been already liked.\n     */\n    public boolean isLiked(EntityReference entityReference)\n    {\n        UserReference userReference = this.userReferenceResolver.resolve(this.contextProvider.get().getUserReference());\n\n        try {\n            return this.likeManager.isLiked(userReference, entityReference);\n        } catch (LikeException e) {\n            this.logger.warn(\"Error while checking if [{}] is liked by [{}]\", entityReference, userReference,\n                ExceptionUtils.getRootCause(e));\n        }\n        return false;\n    }\n\n    /**\n     * Return the likers of a reference.\n     *\n     * @param target the reference being liked.\n     * @param offset the start offset for pagination.\n     * @param limit the limit of results for pagination.\n     * @return a list of user references who liked the reference.\n     * @since 12.8RC1\n     */\n    @Unstable\n    public List<UserReference> getLikers(EntityReference target, int offset, int limit)\n    {\n        try {\n            return this.likeManager.getLikers(target, offset, limit);\n        } catch (LikeException e) {\n            this.logger.warn(\"Error while checking getting likers for [{}]\", target, ExceptionUtils.getRootCause(e));\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * Clean the async rendering cache for the Like UIX.\n     */\n    public void cleanCacheUIX()\n    {\n        DocumentReference localUIXReference = new DocumentReference(UIX_REFERENCE,\n            contextProvider.get().getWikiReference());\n        this.asyncRendererCache.cleanCache(localUIXReference);\n    }\n}\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n#set ($likers = $services.like.getLikers($doc, 0, 50))\n<div id=\"document-title\"><h1>$services.localization.render('like.likers.title', [$doc.title])</h1></div>\n<div id=\"likers-content\">\n    #if ($likers.isEmpty())\n        $services.localization.render('like.likers.empty')\n    #else\n      <p>\n          $services.localization.render('like.likers.number', [$likers.size()])\n      </p>\n      <ul>\n          #foreach($liker in $likers)\n            <li>#displayUserLink($liker)</li>\n          #end\n      </ul>\n    #end\n</div>", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like.internal;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport javax.inject.Named;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.xwiki.cache.Cache;\nimport org.xwiki.cache.CacheManager;\nimport org.xwiki.cache.config.CacheConfiguration;\nimport org.xwiki.like.LikeConfiguration;\nimport org.xwiki.like.LikeEvent;\nimport org.xwiki.like.LikeException;\nimport org.xwiki.like.UnlikeEvent;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.ratings.Rating;\nimport org.xwiki.ratings.RatingsException;\nimport org.xwiki.ratings.RatingsManager;\nimport org.xwiki.ratings.RatingsManagerFactory;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.annotation.BeforeComponent;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceSerializer;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n/**\n * Tests for {@link DefaultLikeManager}.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@ComponentTest\npublic class DefaultLikeManagerTest\n{\n    @InjectMockComponents\n    private DefaultLikeManager defaultLikeManager;\n\n    @MockComponent\n    @Named(\"document\")\n    private UserReferenceSerializer<DocumentReference> userReferenceDocumentSerializer;\n\n    @MockComponent\n    private UserReferenceSerializer<String> userReferenceStringSerializer;\n\n    @MockComponent\n    private AuthorizationManager authorizationManager;\n\n    @MockComponent\n    private ObservationManager observationManager;\n\n    @MockComponent\n    private CacheManager cacheManager;\n\n    @MockComponent\n    private LikeConfiguration likeConfiguration;\n\n    @MockComponent\n    private EntityReferenceSerializer<String> entityReferenceSerializer;\n\n    @MockComponent\n    private RatingsManagerFactory ratingsManagerFactory;\n\n    private RatingsManager ratingsManager;\n\n    private Cache<Long> likedEntityCache;\n\n    private Cache<Boolean> likeExistCache;\n\n    private Right likeRight;\n\n    @Mock\n    private UserReference userReference;\n\n    private DocumentReference userDocReference;\n\n    private DocumentReference target;\n\n    @BeforeComponent\n    void beforeComponent() throws Exception\n    {\n        this.likeRight = mock(Right.class);\n        when(this.authorizationManager.register(LikeRight.INSTANCE)).thenReturn(this.likeRight);\n        when(this.likeConfiguration.getLikeCacheCapacity()).thenReturn(500);\n        this.likedEntityCache = mock(Cache.class);\n        this.likeExistCache = mock(Cache.class);\n        when(this.cacheManager.createNewCache(any())).then(invocationOnMock -> {\n            CacheConfiguration cacheConfiguration = invocationOnMock.getArgument(0);\n            if (cacheConfiguration.getConfigurationId().equals(\"xwiki.like.count.cache\")) {\n                return this.likedEntityCache;\n            } else if (cacheConfiguration.getConfigurationId().equals(\"xwiki.like.exist.cache\")) {\n                return this.likeExistCache;\n            } else {\n                throw new AssertionError(\"Cache key is wrong.\");\n            }\n        });\n        this.ratingsManager = mock(RatingsManager.class);\n        when(this.ratingsManagerFactory.getRatingsManager(LikeRatingsConfiguration.RANKING_MANAGER_HINT))\n            .thenReturn(this.ratingsManager);\n    }\n\n    @BeforeEach\n    void setup()\n    {\n        this.userDocReference = new DocumentReference(\"xwiki\", \"XWiki\", \"User\");\n        when(this.userReferenceDocumentSerializer.serialize(this.userReference)).thenReturn(this.userDocReference);\n        when(this.userReferenceStringSerializer.serialize(this.userReference)).thenReturn(\"xwiki:XWiki.User\");\n\n        this.target = new DocumentReference(\"xwiki\", \"Foo\", \"WebHome\");\n        when(this.entityReferenceSerializer.serialize(this.target)).thenReturn(\"xwiki:Foo.WebHome\");\n    }\n\n    @Test\n    void saveLike() throws Exception\n    {\n        when(this.authorizationManager.hasAccess(this.likeRight, this.userDocReference, target)).thenReturn(true);\n\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        when(this.ratingsManager.countRatings(queryMap)).thenReturn(42L);\n\n        assertEquals(42L, this.defaultLikeManager.saveLike(this.userReference, target));\n        verify(this.ratingsManager).saveRating(target, this.userReference, 1);\n        verify(this.observationManager).notify(any(LikeEvent.class), eq(this.userReference), eq(target));\n        verify(this.likedEntityCache).remove(\"xwiki:Foo.WebHome\");\n        verify(this.likedEntityCache).set(\"xwiki:Foo.WebHome\", 42L);\n        verify(this.likeExistCache).set(\"xwiki:XWiki.User_xwiki:Foo.WebHome\", true);\n    }\n\n    @Test\n    void saveLikeNoAuthorization() throws RatingsException\n    {\n        when(this.authorizationManager.hasAccess(this.likeRight, this.userDocReference, target)).thenReturn(false);\n\n        LikeException likeException = assertThrows(LikeException.class, () -> {\n            this.defaultLikeManager.saveLike(this.userReference, target);\n        });\n        assertEquals(\"User [userReference] is not authorized to perform a like on [xwiki:Foo.WebHome]\",\n            likeException.getMessage());\n        verify(this.ratingsManager, never()).saveRating(target, this.userReference, 1);\n        verify(this.observationManager, never()).notify(any(LikeEvent.class), eq(this.userReference), any());\n        verify(this.likedEntityCache, never()).remove(any());\n        verify(this.likedEntityCache, never()).set(any(), any());\n        verify(this.likedEntityCache, never()).get(any());\n    }\n\n    @Test\n    void getEntityLikes() throws Exception\n    {\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        when(this.ratingsManager.countRatings(queryMap)).thenReturn(43L);\n\n        assertEquals(43L, this.defaultLikeManager.getEntityLikes(target));\n        verify(this.likedEntityCache).set(\"xwiki:Foo.WebHome\", 43L);\n    }\n\n    @Test\n    void getLikeRight()\n    {\n        assertSame(this.likeRight, this.defaultLikeManager.getLikeRight());\n    }\n\n    @Test\n    void getUserLikes() throws Exception\n    {\n        Rating grading1 = mock(Rating.class);\n        EntityReference entityReference1 = mock(EntityReference.class);\n        when(grading1.getReference()).thenReturn(entityReference1);\n\n        Rating grading2 = mock(Rating.class);\n        EntityReference entityReference2 = mock(EntityReference.class);\n        when(grading2.getReference()).thenReturn(entityReference2);\n\n        Rating grading3 = mock(Rating.class);\n        EntityReference entityReference3 = mock(EntityReference.class);\n        when(grading3.getReference()).thenReturn(entityReference3);\n\n        when(this.ratingsManager.getRatings(\n            Collections.singletonMap(RatingsManager.RatingQueryField.USER_REFERENCE, this.userReference),\n            5,\n            3,\n            RatingsManager.RatingQueryField.UPDATED_DATE,\n            false)).thenReturn(Arrays.asList(grading1, grading2, grading3));\n\n        assertEquals(Arrays.asList(entityReference1, entityReference2, entityReference3),\n            this.defaultLikeManager.getUserLikes(this.userReference, 5, 3));\n    }\n\n    @Test\n    void isLiked() throws Exception\n    {\n        assertFalse(this.defaultLikeManager.isLiked(this.userReference, target));\n\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        queryMap.put(RatingsManager.RatingQueryField.USER_REFERENCE, this.userReference);\n\n        when(this.ratingsManager.getRatings(queryMap, 0, 1, RatingsManager.RatingQueryField.UPDATED_DATE, false)).\n            thenReturn(Collections.singletonList(mock(Rating.class)));\n        assertTrue(this.defaultLikeManager.isLiked(this.userReference, target));\n        verify(this.likeExistCache).set(\"xwiki:XWiki.User_xwiki:Foo.WebHome\", true);\n    }\n\n    @Test\n    void removeLike() throws Exception\n    {\n        when(this.authorizationManager.hasAccess(this.likeRight, this.userDocReference, target)).thenReturn(true);\n        assertFalse(this.defaultLikeManager.removeLike(this.userReference, target));\n\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        queryMap.put(RatingsManager.RatingQueryField.USER_REFERENCE, this.userReference);\n        Rating grading = mock(Rating.class);\n        when(grading.getId()).thenReturn(\"grading423\");\n\n        when(this.ratingsManager.getRatings(queryMap, 0, 1, RatingsManager.RatingQueryField.UPDATED_DATE, false))\n            .thenReturn(Collections.singletonList(grading));\n        when(this.ratingsManager.removeRating(\"grading423\")).thenReturn(true);\n\n        assertTrue(this.defaultLikeManager.removeLike(this.userReference, target));\n        verify(this.ratingsManager).removeRating(\"grading423\");\n        verify(this.observationManager).notify(any(UnlikeEvent.class), eq(this.userReference), eq(this.target));\n        verify(this.likeExistCache).set(\"xwiki:XWiki.User_xwiki:Foo.WebHome\", false);\n        verify(this.likedEntityCache).remove(\"xwiki:Foo.WebHome\");\n    }\n\n    @Test\n    void removeLikeNotAuthorized() throws Exception\n    {\n        when(this.authorizationManager.hasAccess(this.likeRight, this.userDocReference, target)).thenReturn(false);\n\n        LikeException likeException = assertThrows(LikeException.class, () -> {\n            this.defaultLikeManager.removeLike(this.userReference, target);\n        });\n        assertEquals(\"User [xwiki:XWiki.User] is not authorized to remove a like on [xwiki:Foo.WebHome].\",\n            likeException.getMessage());\n        verify(this.ratingsManager, never()).removeRating(any());\n        verify(this.observationManager, never()).notify(any(UnlikeEvent.class), eq(this.userReference), any());\n    }\n\n    @Test\n    void getLikers() throws Exception\n    {\n        Rating grading1 = mock(Rating.class);\n        UserReference userReference1 = mock(UserReference.class);\n        when(grading1.getAuthor()).thenReturn(userReference1);\n\n        Rating grading2 = mock(Rating.class);\n        UserReference userReference2 = mock(UserReference.class);\n        when(grading2.getAuthor()).thenReturn(userReference2);\n\n        Rating grading3 = mock(Rating.class);\n        UserReference userReference3 = mock(UserReference.class);\n        when(grading3.getAuthor()).thenReturn(userReference3);\n\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n\n        when(this.ratingsManager.getRatings(queryMap, 12, 4, RatingsManager.RatingQueryField.UPDATED_DATE, false))\n            .thenReturn(Arrays.asList(grading1, grading2, grading3));\n        assertEquals(Arrays.asList(userReference1, userReference2, userReference3),\n            this.defaultLikeManager.getLikers(this.target, 12, 4));\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like.script;\n\nimport java.util.Arrays;\nimport java.util.Locale;\nimport java.util.Optional;\n\nimport javax.inject.Named;\nimport javax.inject.Provider;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.RegisterExtension;\nimport org.mockito.Mock;\nimport org.xwiki.like.LikeConfiguration;\nimport org.xwiki.like.LikeException;\nimport org.xwiki.like.LikeManager;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.rendering.async.internal.AsyncRendererCache;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.LogLevel;\nimport org.xwiki.test.junit5.LogCaptureExtension;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n/**\n * Tests for {@link LikeScriptService}.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@ComponentTest\npublic class LikeScriptServiceTest\n{\n    @InjectMockComponents\n    private LikeScriptService likeScriptService;\n\n    @MockComponent\n    private LikeManager likeManager;\n\n    @MockComponent\n    private Provider<XWikiContext> contextProvider;\n\n    @MockComponent\n    private LikeConfiguration likeConfiguration;\n\n    @MockComponent\n    private AuthorizationManager authorizationManager;\n\n    @MockComponent\n    @Named(\"document\")\n    private UserReferenceResolver<DocumentReference> userReferenceResolver;\n\n    @MockComponent\n    private AsyncRendererCache asyncRendererCache;\n\n    @Mock\n    private Right likeRight;\n\n    @Mock\n    private XWikiContext xWikiContext;\n\n    @Mock\n    private UserReference userReference;\n\n    private DocumentReference docUserReference;\n\n    @RegisterExtension\n    LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n\n    @BeforeEach\n    void setup()\n    {\n        when(this.likeManager.getLikeRight()).thenReturn(this.likeRight);\n        when(this.contextProvider.get()).thenReturn(this.xWikiContext);\n        this.docUserReference = new DocumentReference(\"xwiki\", \"XWiki\", \"User\");\n        when(this.xWikiContext.getUserReference()).thenReturn(this.docUserReference);\n        when(this.userReferenceResolver.resolve(docUserReference)).thenReturn(userReference);\n    }\n\n    @Test\n    void isAuthorized()\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        assertTrue(this.likeScriptService.isAuthorized(entityReference));\n        verify(this.authorizationManager).hasAccess(this.likeRight, this.docUserReference, entityReference);\n\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(false);\n        assertFalse(this.likeScriptService.isAuthorized(entityReference));\n        verify(this.authorizationManager, times(2)).hasAccess(this.likeRight, this.docUserReference, entityReference);\n    }\n\n    @Test\n    void displayButton()\n    {\n        when(this.likeConfiguration.alwaysDisplayButton()).thenReturn(true);\n        assertTrue(this.likeScriptService.displayButton(null));\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        assertTrue(this.likeScriptService.displayButton(entityReference));\n\n        when(this.likeConfiguration.alwaysDisplayButton()).thenReturn(false);\n        assertFalse(this.likeScriptService.displayButton(null));\n\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        assertTrue(this.likeScriptService.displayButton(entityReference));\n        verify(this.authorizationManager).hasAccess(this.likeRight, this.docUserReference, entityReference);\n    }\n\n    @Test\n    void like() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        when(this.likeManager.saveLike(userReference, entityReference)).thenReturn(42L);\n        Optional<Long> optionalLikedEntity = this.likeScriptService.like(entityReference);\n\n        assertTrue(optionalLikedEntity.isPresent());\n        assertSame(42L, optionalLikedEntity.get());\n    }\n\n    @Test\n    void likeNotAuthorized()\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        assertFalse(this.likeScriptService.like(entityReference).isPresent());\n        assertEquals(\"[xwiki:XWiki.User] is not authorized to like [xwiki:Foo.Foo].\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void likeNotDocument()\n    {\n        EntityReference entityReference = new EntityReference(\"something\", EntityType.ATTACHMENT);\n        assertFalse(this.likeScriptService.like(entityReference).isPresent());\n        assertEquals(\"Like is only implemented for document for now. (Called with [Attachment something])\",\n            logCapture.getMessage(0));\n    }\n\n    @Test\n    void likeError() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        when(this.likeManager.saveLike(userReference, entityReference)).thenThrow(new LikeException(\"Problem\"));\n        assertFalse(this.likeScriptService.like(entityReference).isPresent());\n        assertEquals(\"Error while liking [xwiki:Foo.Foo] by [xwiki:XWiki.User]\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void unlike() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n\n        when(this.likeManager.getEntityLikes(entityReference)).thenReturn(41L);\n        Optional<Long> optionalLikedEntity = this.likeScriptService.unlike(entityReference);\n\n        assertTrue(optionalLikedEntity.isPresent());\n        assertSame(41L, optionalLikedEntity.get());\n        verify(this.likeManager).removeLike(userReference, entityReference);\n    }\n\n    @Test\n    void unlikeNotAuthorized()\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        assertFalse(this.likeScriptService.unlike(entityReference).isPresent());\n        assertEquals(\"[xwiki:XWiki.User] is not authorized to unlike [xwiki:Foo.Foo].\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void unlikeNotDocument()\n    {\n        EntityReference entityReference = new EntityReference(\"something\", EntityType.ATTACHMENT);\n        assertFalse(this.likeScriptService.unlike(entityReference).isPresent());\n        assertEquals(\"Unlike is only implemented for document for now. (Called with [Attachment something])\",\n            logCapture.getMessage(0));\n    }\n\n    @Test\n    void unlikeError() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        when(this.likeManager.removeLike(userReference, entityReference)).thenThrow(new LikeException(\"Problem\"));\n        assertFalse(this.likeScriptService.unlike(entityReference).isPresent());\n        assertEquals(\"Error while unliking [xwiki:Foo.Foo] by [xwiki:XWiki.User]\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void getLikes() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n\n        when(this.likeManager.getEntityLikes(entityReference)).thenReturn(40L);\n        Optional<Long> optionalLikedEntity = this.likeScriptService.getLikes(entityReference);\n\n        assertTrue(optionalLikedEntity.isPresent());\n        assertSame(40L, optionalLikedEntity.get());\n    }\n\n    @Test\n    void getLikesError() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.likeManager.getEntityLikes(entityReference)).thenThrow(new LikeException(\"Problem\"));\n        assertFalse(this.likeScriptService.getLikes(entityReference).isPresent());\n        assertEquals(\"Error while getting like information for [xwiki:Foo.Foo]\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void isLiked() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n\n        when(this.likeManager.isLiked(userReference, entityReference)).thenReturn(false);\n        assertFalse(this.likeScriptService.isLiked(entityReference));\n\n        when(this.likeManager.isLiked(userReference, entityReference)).thenReturn(true);\n        assertTrue(this.likeScriptService.isLiked(entityReference));\n    }\n\n    @Test\n    void isLikedError() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.likeManager.isLiked(userReference, entityReference)).thenThrow(new LikeException(\"Problem\"));\n        assertFalse(this.likeScriptService.isLiked(entityReference));\n        assertEquals(\"Error while checking if [xwiki:Foo.Foo] is liked by [userReference]\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void cleanCache()\n    {\n        when(this.xWikiContext.getWikiReference()).thenReturn(new WikiReference(\"foo\"));\n        this.likeScriptService.cleanCacheUIX();\n\n        // The Locale is important here since the AsyncRendererCache works with references containing a Locale.\n        DocumentReference uixReference = new DocumentReference(\"foo\", Arrays.asList(\"XWiki\", \"Like\"), \"LikeUIX\",\n            Locale.ROOT);\n        verify(this.asyncRendererCache).cleanCache(uixReference);\n    }\n}\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"de\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>de</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Gef\u00e4llt mir\nlike.unlike.modal.title=\"Gef\u00e4llt mir nicht mehr\" Best\u00e4tigung\nlike.unlike.modal.body=Sie sind Sie sicher, dass Sie Ihr \"Gef\u00e4llt mir\" f\u00fcr die Seite {0} entfernen m\u00f6chten?\nlike.unlike.modal.closeButton=Schlie\u00dfen\nlike.unlike.modal.unlikeButton=\"Gef\u00e4llt mir\" entfernen\nlike.unlike.modal.viewLikersButton=\"Gef\u00e4llt mir\" anzeigen\nlike.newlike.success=\"Gef\u00e4llt mir\" hinzugef\u00fcgt.\nlike.newlike.error=Fehler beim setzen des \"Gef\u00e4llt mir\".\nlike.unlike.success=Die Seite gef\u00e4llt Ihnen nun nicht mehr.\nlike.unlike.error=Fehler beim Entfernen des \"Gef\u00e4llt mir\".\nlike.userprofile.menu=\"Gef\u00e4llt mir\" Seiten\nlike.button.title=Anzahl der \"Gef\u00e4llt mir\" auf der Seite: {0}\n### Missing: like.button.title.like=Click to like the current page. Number of likes on this page: {0}.\n### Missing: like.button.title.unlike=Click to unlike the current page. Number of likes on this page: {0}.\nlike.likers.empty=Niemandem gef\u00e4llt diese Seite bisher.\nlike.likers.number={0} Personen gef\u00e4llt die Seite:\nlike.likers.title={0} Gef\u00e4llt mir\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=\"Gef\u00e4llt mir\" Schaltfl\u00e4che immer anzeigen\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Die \"Gef\u00e4llt mir\" Schaltfl\u00e4che immer anzeigen - selbst wenn der Nutzer kein Recht hat diese zu benutzen. Anschalten, um die Anzahl der \"Gef\u00e4llt mir\" immer anzuzeigen.\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Cache-Gr\u00f6\u00dfe\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Anzahl der \"Gef\u00e4llt mir\"-Informationen im Cache. Sie m\u00fcssen XWiki neustarten, damit ver\u00e4nderte Einstellungen angewendet werden.</content>\n  \n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"es\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>es</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Me gusta\nlike.unlike.modal.title=Confirmaci\u00f3n de \"ya no me gusta\"\nlike.unlike.modal.body=\u00bfEst\u00e1s seguro que deseas eliminar tu \"Me gusta\" de la p\u00e1gina {0}?\nlike.unlike.modal.closeButton=Cerrar\nlike.unlike.modal.unlikeButton=Ya no me gusta la p\u00e1gina\nlike.unlike.modal.viewLikersButton=Me gusta\nlike.newlike.success=La p\u00e1gina ha recibido alg\u00fan \"Me gusta\".\nlike.newlike.error=Error al intentar dar \"me gusta\" a la p\u00e1gina.\nlike.unlike.success=La p\u00e1gina ha recibido alg\u00fan \"Ya no me gusta\".\nlike.unlike.error=Error al intentar dar \"ya no me gusta\" a la p\u00e1gina.\nlike.userprofile.menu=P\u00e1ginas que me gustan\nlike.button.title=N\u00famero de \"Me gusta\" de esta p\u00e1gina: {0}\n### Missing: like.button.title.like=Click to like the current page. Number of likes on this page: {0}.\n### Missing: like.button.title.unlike=Click to unlike the current page. Number of likes on this page: {0}.\nlike.likers.empty=Todav\u00eda no le gusta a nadie esta p\u00e1gina.\nlike.likers.number={0} person(as) le gustas esta p\u00e1gina:\nlike.likers.title=\"Me gusta\" en {0}\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Mostrar siempre el bot\u00f3n \"Me gusta\"\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Mostrar el bot\u00f3n incluso si el usuario no tiene derecho de interaccionar con \u00e9l.  \u00dasalo si deseas mostrar siempre el contador de \"Me gusta\".\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Capacidad de la cach\u00e9\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=N\u00famero de informaci\u00f3n de \"Me gusta\" guardada en la cach\u00e9. Ten en cuenta que tienes que reiniciar XWiki para que se activen los cambios de esta opci\u00f3n.</content>\n  \n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"fr\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>fr</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Aimer\nlike.unlike.modal.title=Confirmation de suppression du J'aime\nlike.unlike.modal.body=\u00cates-vous s\u00fbr de vouloir enlever votre J''aime de la page {0} ?\nlike.unlike.modal.closeButton=Fermer\nlike.unlike.modal.unlikeButton=Je n'aime plus la page\nlike.unlike.modal.viewLikersButton=J'aime\nlike.newlike.success=Cette page a \u00e9t\u00e9 aim\u00e9e.\nlike.newlike.error=Erreur en essayant d'aimer une page.\nlike.unlike.success=Cette page n'est plus aim\u00e9e.\nlike.unlike.error=Erreur en essayant de ne plus aimer une page.\nlike.userprofile.menu=Pages Aim\u00e9es\nlike.button.title=Nombre de J''aime sur cette page : {0}\nlike.button.title.like=Cliquez pour aimer cette page. Actuellement {0} \"J''aime\" pour cette page.\nlike.button.title.unlike=Cliquez pour ne plus aimer cette page. Actuellement {0} \"J''aime\" pour cette page.\nlike.likers.empty=Personne n'aime encore cette page.\nlike.likers.number={0} personne(s) aime(nt) cette page :\nlike.likers.title=J''aime sur {0}\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Toujours afficher le bouton J'aime\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Afficher le bouton m\u00eame si l'utilisateur n'a pas les droits pour int\u00e9ragir avec. Utilisez cette option si vous souhaitez toujours afficher le compteur de J'aime.\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Capacit\u00e9 du Cache\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Nombre d'information J'aime \u00e0 conserver dans le cache. Notez que vous devrez red\u00e9marrer XWiki pour que cette option soit prise en compte.</content>\n  \n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"no\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>no</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Liker\nlike.unlike.modal.title=Bekreft \"liker ikke\"\nlike.unlike.modal.body=Er du sikker p\u00e5 at du \u00f8nsker \u00e5 fjerne din \"Liker\" for side {0}?\nlike.unlike.modal.closeButton=Lukk\nlike.unlike.modal.unlikeButton=Slutt \u00e5 like siden\nlike.unlike.modal.viewLikersButton=Liker\nlike.newlike.success=Siden er blitt likt.\nlike.newlike.error=Feil n\u00e5r du pr\u00f8ver \u00e5 like siden.\nlike.unlike.success=Siden er ikke lenger likt.\nlike.unlike.error=Feil under fjerning av liker.\nlike.userprofile.menu=Likte sider\nlike.button.title=Antall liker p\u00e5 denne siden: {0}\nlike.button.title.like=Klikk for \u00e5 like siden. Antall likes p\u00e5 denne siden: {0}.\nlike.button.title.unlike=Klikk for \u00e5 slutte \u00e5 like siden. Antall liker p\u00e5 denne siden: {0}.\nlike.likers.empty=Ingen liker denne siden enn\u00e5.\nlike.likers.number={0} person(er) liker denne siden:\nlike.likers.title=Liker p\u00e5 {0}\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Vis alltid Liker-knappen\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Vis knappen selv om brukeren ikke har rettigheter til \u00e5 bruke den. Bruk hvis du alltid vil vise Liker-telleren.\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Hurtigbufferkapasitet\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Antall Liker-informasjon som er lagret i hurtigbufferen. Merk at du m\u00e5 starte XWiki p\u00e5 nytt for at dette valget skal aktiveres.</content>\n  \n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"ru\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>ru</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=\u041d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f\nlike.unlike.modal.title=\u041d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f?\nlike.unlike.modal.body=\u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0442\u043c\u0435\u0442\u043a\u0443 \"\u041d\u0440\u0430\u0432\u0438\u0442\u0441\u044f\" \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b {0}?\nlike.unlike.modal.closeButton=\u0417\u0430\u043a\u0440\u044b\u0442\u044c\nlike.unlike.modal.unlikeButton=\u041d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f\nlike.unlike.modal.viewLikersButton=\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0442\u043c\u0435\u0442\u043a\u0438 \"\u041d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f\"\nlike.newlike.success=\u0421\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0430 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0430\u0441\u044c.\nlike.newlike.error=\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \"\u041d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f\" \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435.\n### Missing: like.unlike.success=The page has been unliked.\n### Missing: like.unlike.error=Error when trying to unlike the page.\n### Missing: like.userprofile.menu=Liked Pages\n### Missing: like.button.title=Number of likes on this page: {0}\n### Missing: like.button.title.like=Click to like the current page. Number of likes on this page: {0}.\n### Missing: like.button.title.unlike=Click to unlike the current page. Number of likes on this page: {0}.\n### Missing: like.likers.empty=No one likes this page yet.\n### Missing: like.likers.number={0} person(s) like this page:\n### Missing: like.likers.title=Likes on {0}\n### Missing: XWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Always display Like button\n### Missing: XWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Display the button even if the user doesn't have the rights to interact with it. Use it if you wish to always display the Likes counter.\n### Missing: XWiki.Like.LikeConfigurationClass_cacheCapacity=Cache capacity\n### Missing: XWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Number of Like information kept in cache. Note that you have to restart XWiki for this option change to be taken into account.</content>\n  \n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language/>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Like\nlike.unlike.modal.title=Unlike confirmation\nlike.unlike.modal.body=Are you sure you wish to remove your Like for page {0}?\nlike.unlike.modal.closeButton=Close\nlike.unlike.modal.unlikeButton=Unlike the page\nlike.unlike.modal.viewLikersButton=Likes\nlike.newlike.success=The page has been liked.\nlike.newlike.error=Error when trying to like the page.\nlike.unlike.success=The page has been unliked.\nlike.unlike.error=Error when trying to unlike the page.\nlike.userprofile.menu=Liked Pages\nlike.button.title=Number of likes on this page: {0}\nlike.button.title.like=Click to like the current page. Number of likes on this page: {0}.\nlike.button.title.unlike=Click to unlike the current page. Number of likes on this page: {0}.\nlike.likers.empty=No one likes this page yet.\nlike.likers.number={0} person(s) like this page:\nlike.likers.title=Likes on {0}\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Always display Like button\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Display the button even if the user doesn't have the rights to interact with it. Use it if you wish to always display the Likes counter.\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Cache capacity\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Number of Like information kept in cache. Note that you have to restart XWiki for this option change to be taken into account.</content>\n  <object>\n    <name>XWiki.Like.LikeTranslations</name>\n    <number>0</number>\n    <className>XWiki.TranslationDocumentClass</className>\n    <guid>a2b32a08-d4a4-4004-b7d7-cd16324914d8</guid>\n    <class>\n      <name>XWiki.TranslationDocumentClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <scope>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText>forbidden</freeText>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>scope</name>\n        <number>1</number>\n        <prettyName>Scope</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>1</size>\n        <unmodifiable>0</unmodifiable>\n        <values>GLOBAL|WIKI|USER|ON_DEMAND</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </scope>\n    </class>\n    <property>\n      <scope>WIKI</scope>\n    </property>\n  </object>\n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeViewersMenuUIX\" locale=\"\">\n  <web>XWiki.Like</web>\n  <name>LikeViewersMenuUIX</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeViewersMenuUIX</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content/>\n  <object>\n    <name>XWiki.Like.LikeViewersMenuUIX</name>\n    <number>0</number>\n    <className>XWiki.UIExtensionClass</className>\n    <guid>dc089545-5795-45e7-92f0-7cc28d1c74f5</guid>\n    <class>\n      <name>XWiki.UIExtensionClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <async_cached>\n        <defaultValue>0</defaultValue>\n        <disabled>0</disabled>\n        <displayFormType>select</displayFormType>\n        <displayType/>\n        <name>async_cached</name>\n        <number>3</number>\n        <prettyName>Cached</prettyName>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>\n      </async_cached>\n      <async_context>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText>forbidden</freeText>\n        <largeStorage>0</largeStorage>\n        <multiSelect>1</multiSelect>\n        <name>async_context</name>\n        <number>4</number>\n        <prettyName>Context elements</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>5</size>\n        <unmodifiable>0</unmodifiable>\n        <values>doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </async_context>\n      <async_enabled>\n        <defaultValue>0</defaultValue>\n        <disabled>0</disabled>\n        <displayFormType>select</displayFormType>\n        <displayType/>\n        <name>async_enabled</name>\n        <number>2</number>\n        <prettyName>Asynchronous rendering</prettyName>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>\n      </async_enabled>\n      <content>\n        <disabled>0</disabled>\n        <editor>Text</editor>\n        <name>content</name>\n        <number>1</number>\n        <prettyName>Executed Content</prettyName>\n        <rows>25</rows>\n        <size>120</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </content>\n      <extensionPointId>\n        <disabled>0</disabled>\n        <name>extensionPointId</name>\n        <number>5</number>\n        <prettyName>Extension Point ID</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </extensionPointId>\n      <name>\n        <disabled>0</disabled>\n        <name>name</name>\n        <number>6</number>\n        <prettyName>Extension ID</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </name>\n      <parameters>\n        <contenttype>PureText</contenttype>\n        <disabled>0</disabled>\n        <editor>PureText</editor>\n        <name>parameters</name>\n        <number>7</number>\n        <prettyName>Extension Parameters</prettyName>\n        <rows>10</rows>\n        <size>40</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </parameters>\n      <scope>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText>forbidden</freeText>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>scope</name>\n        <number>8</number>\n        <prettyName>Extension Scope</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>1</size>\n        <unmodifiable>0</unmodifiable>\n        <values>wiki=Current Wiki|user=Current User|global=Global</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </scope>\n    </class>\n    <property>\n      <async_cached>1</async_cached>\n    </property>\n    <property>\n      <async_context>\n        <value>doc.reference</value>\n      </async_context>\n    </property>\n    <property>\n      <async_enabled>0</async_enabled>\n    </property>\n    <property>\n      <content>{{velocity}}\n        {{html clean=\"false\"}}\n        #template('menus_macros.vm')\n        #submenuitem($doc.getURL('view','viewer=likers'), $services.localization.render('like.unlike.modal.viewLikersButton'), 'likers', '', 'heart')\n        {{/html}}\n        {{/velocity}}</content>\n    </property>\n    <property>\n      <extensionPointId>org.xwiki.platform.template.menu.viewers</extensionPointId>\n    </property>\n    <property>\n      <name>org.xwiki.like.menu.viewer</name>\n    </property>\n    <property>\n      <parameters>order=120000</parameters>\n    </property>\n    <property>\n      <scope>wiki</scope>\n    </property>\n  </object>\n</xwikidoc>", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.UserProfileUIX\" locale=\"\">\n  <web>XWiki.Like</web>\n  <name>UserProfileUIX</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>XWiki.Like.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title/>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content/>\n  <object>\n    <name>XWiki.Like.UserProfileUIX</name>\n    <number>0</number>\n    <className>XWiki.UIExtensionClass</className>\n    <guid>b79d80e9-7a28-4d56-b5d9-1de5cfa820ff</guid>\n    <class>\n      <name>XWiki.UIExtensionClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <async_cached>\n        <defaultValue>0</defaultValue>\n        <disabled>0</disabled>\n        <displayFormType>select</displayFormType>\n        <displayType/>\n        <name>async_cached</name>\n        <number>3</number>\n        <prettyName>Cached</prettyName>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>\n      </async_cached>\n      <async_context>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <multiSelect>1</multiSelect>\n        <name>async_context</name>\n        <number>4</number>\n        <prettyName>Context elements</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator>, </separator>\n        <separators>|, </separators>\n        <size>5</size>\n        <unmodifiable>0</unmodifiable>\n        <values>doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </async_context>\n      <async_enabled>\n        <defaultValue>0</defaultValue>\n        <disabled>0</disabled>\n        <displayFormType>select</displayFormType>\n        <displayType/>\n        <name>async_enabled</name>\n        <number>2</number>\n        <prettyName>Asynchronous rendering</prettyName>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>\n      </async_enabled>\n      <content>\n        <disabled>0</disabled>\n        <editor>Text</editor>\n        <name>content</name>\n        <number>1</number>\n        <prettyName>Executed Content</prettyName>\n        <rows>25</rows>\n        <size>120</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </content>\n      <extensionPointId>\n        <disabled>0</disabled>\n        <name>extensionPointId</name>\n        <number>5</number>\n        <prettyName>Extension Point ID</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </extensionPointId>\n      <name>\n        <disabled>0</disabled>\n        <name>name</name>\n        <number>6</number>\n        <prettyName>Extension ID</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </name>\n      <parameters>\n        <contenttype>PureText</contenttype>\n        <disabled>0</disabled>\n        <editor>PureText</editor>\n        <name>parameters</name>\n        <number>7</number>\n        <prettyName>Extension Parameters</prettyName>\n        <rows>10</rows>\n        <size>40</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </parameters>\n      <scope>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText>forbidden</freeText>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>scope</name>\n        <number>8</number>\n        <prettyName>Extension Scope</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>1</size>\n        <unmodifiable>0</unmodifiable>\n        <values>wiki=Current Wiki|user=Current User|global=Global</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </scope>\n    </class>\n    <property>\n      <async_cached>0</async_cached>\n    </property>\n    <property>\n      <async_context>\n        <value>user</value>\n        <value>wiki</value>\n      </async_context>\n    </property>\n    <property>\n      <async_enabled>1</async_enabled>\n    </property>\n    <property>\n      <content>{{velocity}}\n#set ($likedReferences = $services.like.getUserLikes($services.user.currentUserReference, 0, 50))\n|=Page\n#foreach ($likeReference in $likedReferences)\n  #set ($likedDocument = $xwiki.getDocument($likeReference))\n  |[[$likedDocument.title&gt;&gt;$services.model.serialize($likeReference)]]\n#end\n{{/velocity}}</content>\n    </property>\n    <property>\n      <extensionPointId>org.xwiki.plaftorm.user.profile.menu</extensionPointId>\n    </property>\n    <property>\n      <name>org.xwiki.platform.like.userProfileMenu</name>\n    </property>\n    <property>\n      <parameters>icon=heart\nname=$services.localization.render('like.userprofile.menu')\nisActive=#if($services.like.isAuthorized($services.wiki.currentWikiReference))true#{else}false#end\npriority=1000</parameters>\n    </property>\n    <property>\n      <scope>wiki</scope>\n    </property>\n  </object>\n</xwikidoc>\n"], "fixing_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.xwiki.platform</groupId>\n    <artifactId>xwiki-platform</artifactId>\n    <version>12.9-SNAPSHOT</version>\n  </parent>\n  <artifactId>xwiki-platform-core</artifactId>\n  <name>XWiki Platform - Core - Parent POM</name>\n  <packaging>pom</packaging>\n  <description>XWiki Platform - Core - Parent POM</description>\n  <properties>\n    <!-- JS/CSS minification is on by default, this property is used in order to able to skip minification when the\n         debug profile is active. It can also be used from the command line to skip minification -->\n    <xwiki.minification.skip>false</xwiki.minification.skip>\n  </properties>\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-jar-plugin</artifactId>\n          <configuration>\n            <archive>\n              <!-- Use the manifest file generated by the OSGi Maven Bundle Plugin -->\n              <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n            </archive>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <configuration>\n            <systemProperties combine.children=\"append\">\n              <!-- Tells XWiki Platform Test module to generate screenshots in the target dir when a test is failing -->\n              <!-- TODO: Remove this property once all functional tests have been moved to use the failsafe plugin -->\n              <property>\n                <name>screenshotDirectory</name>\n                <value>${basedir}/target/screenshots</value>\n              </property>\n            </systemProperties>\n          </configuration>\n          <dependencies>\n            <dependency>\n              <groupId>org.xwiki.commons</groupId>\n              <artifactId>xwiki-commons-tool-test-simple</artifactId>\n              <version>${commons.version}</version>\n            </dependency>\n          </dependencies>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-failsafe-plugin</artifactId>\n          <configuration>\n            <systemProperties combine.children=\"append\">\n              <!-- Tells XWiki Platform Test module to generate screenshots in the target dir when a test is failing -->\n              <property>\n                <name>screenshotDirectory</name>\n                <value>${basedir}/target/screenshots</value>\n              </property>\n            </systemProperties>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n    <plugins>\n      <!-- Generate OSGi Manifest information to all XWiki Core JARs -->\n      <plugin>\n        <groupId>org.apache.felix</groupId>\n        <artifactId>maven-bundle-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>bundle-manifest</id>\n            <phase>process-classes</phase>\n            <goals>\n              <goal>manifest</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.revapi</groupId>\n        <artifactId>revapi-maven-plugin</artifactId>\n        <configuration>\n          <analysisConfiguration>\n            <revapi.filter>\n              <archives>\n                <!-- We're ignoring all API incompatibilities from XWiki dependencies (i.e. commons and rendering)\n                     since they're already covered by their own builds and we release all of them together. -->\n                <exclude>\n                  <item>org\\.xwiki\\.commons:.*:.*</item>\n                  <item>org\\.xwiki\\.rendering:.*:.*</item>\n                </exclude>\n              </archives>\n            </revapi.filter>\n            <!-- Add ignores here using the following syntax. You can use a single <revapi.ignore> entry but it\n                 cannot be empty.\n\n                 Note: you can use regexes by using the syntax: <regex>true</regex>\n                 Don't forget to '\\'-escape dots and other special characters in this case ;) -->\n            <revapi.ignore>\n              <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.like.LikedEntity org.xwiki.like.LikeManager::getEntityLikes(org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</old>\n                <new>method long org.xwiki.like.LikeManager::getEntityLikes(org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n              <item>\n                <code>java.method.addedToInterface</code>\n                <new>method java.util.List&lt;org.xwiki.user.UserReference&gt; org.xwiki.like.LikeManager::getLikers(org.xwiki.model.reference.EntityReference, int, int) throws org.xwiki.like.LikeException</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n                <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method java.util.List&lt;org.xwiki.like.LikedEntity&gt; org.xwiki.like.LikeManager::getUserLikes(org.xwiki.user.UserReference) throws org.xwiki.like.LikeException</old>\n                <new>method java.util.List&lt;org.xwiki.model.reference.EntityReference&gt; org.xwiki.like.LikeManager::getUserLikes(org.xwiki.user.UserReference, int, int) throws org.xwiki.like.LikeException</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n                <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.like.LikedEntity org.xwiki.like.LikeManager::saveLike(org.xwiki.user.UserReference, org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</old>\n                <new>method long org.xwiki.like.LikeManager::saveLike(org.xwiki.user.UserReference, org.xwiki.model.reference.EntityReference) throws org.xwiki.like.LikeException</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n                <item>\n                <code>java.class.removed</code>\n                <old>interface org.xwiki.like.LikedEntity</old>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n                <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method java.util.List&lt;org.xwiki.like.LikedEntity&gt; org.xwiki.like.script.LikeScriptService::getUserLikes(org.xwiki.user.UserReference)</old>\n                <new>method java.util.List&lt;org.xwiki.model.reference.EntityReference&gt; org.xwiki.like.script.LikeScriptService::getUserLikes(org.xwiki.user.UserReference, int, int)</new>\n                <justification>Unstable API: not breaking.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.AbstractRatingEvent</old>\n                <justification>Redesign of Ratings API: this class has actually been moved to org.xwiki.ratings.events.AbstractRatingEvent but deeply changed internally.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.addedToInterface</code>\n                <new>method .+ org.xwiki.ratings.AverageRating::.+</new>\n                <justification>Redesign of Ratings API: Several new methods have been added to AverageRating class.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method void org.xwiki.ratings.AverageRating::save() throws org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: This method has been removed since it should be handled by a dedicated manager and not there.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method void org.xwiki.ratings.AverageRating::set.+</old>\n                <justification>Redesign of Ratings API: this interface now only provide getters.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.AverageRating::getMethod()</old>\n                <justification>Redesign of Ratings API: this method is no longer needed with the new architecture.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.AverageRatingApi</old>\n                <justification>Redesign of Ratings API: only the AverageRating interface should now be used.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>interface org.xwiki.ratings.ConfiguredProvider&lt;T&gt;</old>\n                <justification>Redesign of Ratings API: this class is useless with the new architecture.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.ConfiguredRatingsManagerProvider</old>\n                <justification>Redesign of Ratings API: this class is useless with the new architecture.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.ConfiguredReputationAlgorithmProvider</old>\n                <justification>Redesign of Ratings API: the reputation is no longer supported by this extension.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.Rating::display(java.lang.String, java.lang.String)</old>\n                <justification>Redesign of Ratings API: this method is not directly related to rating.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.Object org.xwiki.ratings.Rating::get(java.lang.String)</old>\n                <justification>Redesign of Ratings API: this method was too generic for this API.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method com.xpn.xwiki.objects.BaseObject org.xwiki.ratings.Rating::getAsObject() throws org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: this method implied that Rating were always stored as xobject which is not always true.</justification>\n              </item>\n              <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.model.reference.DocumentReference org.xwiki.ratings.Rating::getAuthor()</old>\n                <new>method org.xwiki.user.UserReference org.xwiki.ratings.Rating::getAuthor()</new>\n                <justification>Redesign of Ratings API: Following our new User API practice, a user is represented by a UserReference.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.addedToInterface</code>\n                <new>method .+ org.xwiki.ratings.Rating::.+</new>\n                <justification>Redesign of Ratings API: Rating interface expose now new data that are available through the interface.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.util.Date org.xwiki.ratings.Rating::getDate()</old>\n                <justification>Redesign of Ratings API: two dates are now available, the creation date and the last update date.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.model.reference.DocumentReference org.xwiki.ratings.Rating::getDocumentReference()</old>\n                <justification>Redesign of Ratings API: Rating is now not only for documents but for any entity. See Rating#getReference().</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.Rating::getGlobalRatingId()</old>\n                <justification>Redesign of Ratings API: there is now a unique ID available with Rating#getId().</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.Rating::getRatingId()</old>\n                <justification>Redesign of Ratings API: there is now a unique ID available with Rating#getId().</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method boolean org.xwiki.ratings.Rating::remove() throws org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: this API is now handled only through the RatingsManager.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method void org.xwiki.ratings.Rating::save() throws org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: this API is now handled only through the RatingsManager.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method void org.xwiki.ratings.Rating::set.+</old>\n                <justification>Redesign of Ratings API: Only getters are now available in this interface.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.addedToInterface</code>\n                <new>method .+ org.xwiki.ratings.RatingsConfiguration::.+</new>\n                <justification>Redesign of Ratings API: RatingsConfiguration now defines configuration methods for Ratings. Check out the documentation.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method com.xpn.xwiki.doc.XWikiDocument org.xwiki.ratings.RatingsConfiguration::getConfigurationDocument(org.xwiki.model.reference.DocumentReference)</old>\n                <justification>Redesign of Ratings API: RatingsConfiguration now defines configuration methods for Ratings. Check out the documentation.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.lang.String org.xwiki.ratings.RatingsConfiguration::getConfigurationParameter(org.xwiki.model.reference.DocumentReference, java.lang.String, java.lang.String)</old>\n                <justification>Redesign of Ratings API: RatingsConfiguration now defines configuration methods for Ratings. Check out the documentation.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.field.removedWithConstant</code>\n                <old>field .+ @ org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: RatingsException does not extend anymore XWikiException.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.field.removedWithConstant</code>\n                <old>field org.xwiki.ratings.RatingsException.[A-Z_]+</old>\n                <justification>Redesign of Ratings API: Error codes have been removed from RatingsException, we only rely on meaningfull messages.</justification>\n              </item>\n              <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method void org.xwiki.ratings.RatingsException::&lt;init&gt;()</old>\n                <new>method void org.xwiki.ratings.RatingsException::&lt;init&gt;(java.lang.String)</new>\n                <justification>Redesign of Ratings API: Error codes have been removed from RatingsException, we only rely on meaningfull messages.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method .+ org.xwiki.ratings.RatingsException::.+</old>\n                <justification>Redesign of Ratings API: Error codes have been removed from RatingsException, we only rely on meaningfull messages.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method .+ com.xpn.xwiki.XWikiException::.+ @ org.xwiki.ratings.RatingsException</old>\n                <justification>Redesign of Ratings API: RatingsException does not extend anymore XWikiException.</justification>\n              </item>\n              <item>\n                <code>java.class.noLongerInheritsFromClass</code>\n                <old>class org.xwiki.ratings.RatingsException</old>\n                <new>class org.xwiki.ratings.RatingsException</new>\n                <justification>Redesign of Ratings API: RatingsException does not extend anymore XWikiException.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.field.removedWithConstant</code>\n                <old>field org.xwiki.ratings.RatingsManager.[A-Z_]+</old>\n                <justification>Redesign of Ratings API: Constants have been removed from RatingsManager since they were tightly linked to the storage representation.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.field.removed</code>\n                <old>field org.xwiki.ratings.RatingsManager.[A-Z_]+</old>\n                <justification>Redesign of Ratings API: Constants have been removed from RatingsManager since they were tightly linked to the storage representation.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.addedToInterface</code>\n                <new>method .+ org.xwiki.ratings.RatingsManager::.+</new>\n                <justification>Redesign of Ratings API: some new methods have been added because of new needs.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.AverageRating org.xwiki.ratings.RatingsManager::getAverageRating(===org.xwiki.model.reference.DocumentReference===) throws org.xwiki.ratings.RatingsException</old>\n                <new>parameter org.xwiki.ratings.AverageRating org.xwiki.ratings.RatingsManager::getAverageRating(===org.xwiki.model.reference.EntityReference===) throws org.xwiki.ratings.RatingsException</new>\n                <justification>Redesign of Ratings API: ratings now apply on entities not just documents.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method .+ org.xwiki.ratings.RatingsManager::.+</old>\n                <justification>Redesign of Ratings API: the API of RatingsManager have been greatly simplified.</justification>\n              </item>\n              <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.RatingsManager::getRatings(org.xwiki.model.reference.DocumentReference, int, int, boolean) throws org.xwiki.ratings.RatingsException</old>\n                <new>method java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.RatingsManager::getRatings(java.util.Map&lt;org.xwiki.ratings.RatingsManager.RatingQueryField, java.lang.Object&gt;, int, int, org.xwiki.ratings.RatingsManager.RatingQueryField, boolean) throws org.xwiki.ratings.RatingsException</new>\n                <justification>Redesign of Ratings API: the method to retrieve ratings in RatingsManager have been made more generic.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter boolean org.xwiki.ratings.RatingsManager::removeRating(===org.xwiki.ratings.Rating===) throws org.xwiki.ratings.RatingsException</old>\n                <new>parameter boolean org.xwiki.ratings.RatingsManager::removeRating(===java.lang.String===) throws org.xwiki.ratings.RatingsException</new>\n                <justification>Redesign of Ratings API: the method to remove a rating in RatingsManager now only take an identifier.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>interface org.xwiki.ratings.ReputationAlgorithm</old>\n                <justification>Redesign of Ratings API: Reputation was never finished and is no longer supported in Ratings.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>interface org.xwiki.ratings.ReputationAlgorithmGroovy</old>\n                <justification>Redesign of Ratings API: Reputation was never finished and is no longer supported in Ratings.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.ReputationException</old>\n                <justification>Redesign of Ratings API: Reputation was never finished and is no longer supported in Ratings.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.UpdateRatingEvent</old>\n                <justification>Redesign of Ratings API: this class has been refactored, an equivalent is now in org.xwiki.ratings.events.UpdatedRatingEvent.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.UpdateRatingFailedEvent</old>\n                <justification>Redesign of Ratings API: we removed the begin/end event for Ratings. They only exist for AverageRating for technical reasons.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.UpdatingRatingEvent</old>\n                <justification>Redesign of Ratings API: we removed the begin/end event for Ratings. They only exist for AverageRating for technical reasons.</justification>\n              </item>\n              <item>\n                <code>java.class.removed</code>\n                <old>class org.xwiki.ratings.script.RatingApi</old>\n                <justification>Redesign of Ratings API: only the Rating interface should now be used.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getUserReputation.*</old>\n                <justification>Redesign of Ratings API: User reputation is not supported anymore.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(com.xpn.xwiki.api.Document, java.lang.String)</old>\n                <justification>Redesign of Ratings API: this method was already deprecated.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating(com.xpn.xwiki.api.Document, java.lang.String)</old>\n                <justification>Redesign of Ratings API: this method was already deprecated.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method com.xpn.xwiki.api.Document org.xwiki.ratings.script.RatingsScriptService::getConfigurationDocument(org.xwiki.model.reference.DocumentReference)</old>\n                <justification>Redesign of Ratings API: this method does not make sense in the new design.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating(===com.xpn.xwiki.api.Document===)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.AverageRating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getAverageRating(===org.xwiki.model.reference.EntityReference===) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: allow to retrieve average rating for any reference (not only DocumentReference).</justification>\n              </item>\n              <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating(com.xpn.xwiki.api.Document)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.AverageRating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getAverageRating(org.xwiki.model.reference.EntityReference) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>\n              </item>\n              <item>\n                <regex>true</regex>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.AverageRatingApi org.xwiki.ratings.script.RatingsScriptService::getAverageRating.*</old>\n                <justification>Redesign of Ratings API: clean up of deprecated methods or methods that are not relevant on the new design.</justification>\n              </item>\n              <item>\n                <code>java.class.nonFinalClassInheritsFromNewClass</code>\n                <old>class org.xwiki.ratings.script.RatingsScriptService</old>\n                <new>class org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: this change shouldn't impact using the script service.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(===com.xpn.xwiki.api.Document===, java.lang.String)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRating(===org.xwiki.model.reference.EntityReference===, org.xwiki.user.UserReference) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: allow to retrieve average rating for any reference (not only DocumentReference)</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(com.xpn.xwiki.api.Document, ===java.lang.String===)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRating(org.xwiki.model.reference.EntityReference, ===org.xwiki.user.UserReference===) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for specifying a user by using the UserReference.</justification>\n              </item>\n                <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(com.xpn.xwiki.api.Document, java.lang.String)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRating(org.xwiki.model.reference.EntityReference, org.xwiki.user.UserReference) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::getRating(org.xwiki.model.reference.DocumentReference, org.xwiki.model.reference.DocumentReference)</old>\n                <justification>Redesign of Ratings API: the changes above actually apply to that one.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(===com.xpn.xwiki.api.Document===, int, int)</old>\n                <new>parameter java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRatings(===org.xwiki.model.reference.EntityReference===, int, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: allow to retrieve rating for any reference (not only DocumentReference)</justification>\n              </item>\n              <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(org.xwiki.model.reference.DocumentReference, int, int)</old>\n                <new>method java.util.List&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::getRatings(org.xwiki.model.reference.EntityReference, int, int, boolean) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: actually the method with this number of parameter existed (see below)</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(org.xwiki.model.reference.DocumentReference, int, int, boolean)</old>\n                <justification>Redesign of Ratings API: this method was actually not removed but we used an EntityReference instead of Document API. See above.</justification>\n              </item>\n              <item>\n                <code>java.method.removed</code>\n                <old>method java.util.List&lt;org.xwiki.ratings.script.RatingApi&gt; org.xwiki.ratings.script.RatingsScriptService::getRatings(com.xpn.xwiki.api.Document, int, int, boolean)</old>\n                <justification>Redesign of Ratings API: removal of deprecated methods using Document parameter.</justification>\n              </item>\n              <item>\n                <code>java.method.numberOfParametersChanged</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(com.xpn.xwiki.api.Document, java.lang.String, int)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: removal of deprecated methods using Document parameter. A new API has been introduced and revapi considers it replaces it.</justification>\n              </item>\n              <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(com.xpn.xwiki.api.Document, java.lang.String, int)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(===org.xwiki.model.reference.DocumentReference===, org.xwiki.model.reference.DocumentReference, int)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(===org.xwiki.model.reference.EntityReference===, org.xwiki.user.UserReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: allow to set rating for any reference (not only DocumentReference)</justification>\n              </item>\n              <item>\n                <code>java.method.parameterTypeChanged</code>\n                <old>parameter org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(org.xwiki.model.reference.DocumentReference, ===org.xwiki.model.reference.DocumentReference===, int)</old>\n                <new>parameter java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, ===org.xwiki.user.UserReference===, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for specifying a user by using the UserReference.</justification>\n              </item>\n              <item>\n                <code>java.method.returnTypeChanged</code>\n                <old>method org.xwiki.ratings.script.RatingApi org.xwiki.ratings.script.RatingsScriptService::setRating(org.xwiki.model.reference.DocumentReference, org.xwiki.model.reference.DocumentReference, int)</old>\n                <new>method java.util.Optional&lt;org.xwiki.ratings.Rating&gt; org.xwiki.ratings.script.AbstractScriptRatingsManager::setRating(org.xwiki.model.reference.EntityReference, org.xwiki.user.UserReference, int) @ org.xwiki.ratings.script.RatingsScriptService</new>\n                <justification>Redesign of Ratings API: use new best practices for script service return if type is nullable.</justification>\n              </item>\n              <item>\n                <code>java.method.addedToInterface</code>\n                <new>method long org.xwiki.like.LikeManager::countUserLikes(org.xwiki.user.UserReference) throws org.xwiki.like.LikeException</new>\n                <justification>Unstable API.</justification>\n              </item>\n            </revapi.ignore>\n          </analysisConfiguration>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n  <modules>\n      <!-- Sorted Alphabetically -->\n    <module>xwiki-platform-activeinstalls</module>\n    <module>xwiki-platform-administration</module>\n    <module>xwiki-platform-alerts</module>\n    <module>xwiki-platform-annotation</module>\n    <module>xwiki-platform-application</module>\n    <module>xwiki-platform-appwithinminutes</module>\n    <module>xwiki-platform-attachment</module>\n    <module>xwiki-platform-autotag</module>\n    <module>xwiki-platform-bridge</module>\n    <module>xwiki-platform-captcha</module>\n    <module>xwiki-platform-chart</module>\n    <module>xwiki-platform-classloader</module>\n    <module>xwiki-platform-component</module>\n    <module>xwiki-platform-configuration</module>\n    <module>xwiki-platform-container</module>\n    <module>xwiki-platform-crypto</module>\n    <module>xwiki-platform-csrf</module>\n    <module>xwiki-platform-dashboard</module>\n    <module>xwiki-platform-date</module>\n    <module>xwiki-platform-diff</module>\n    <module>xwiki-platform-diffplugin</module>\n    <module>xwiki-platform-display</module>\n    <module>xwiki-platform-edit</module>\n    <module>xwiki-platform-eventstream</module>\n    <module>xwiki-platform-extension</module>\n    <module>xwiki-platform-feed</module>\n    <module>xwiki-platform-filter</module>\n    <module>xwiki-platform-flamingo</module>\n    <module>xwiki-platform-flavor</module>\n    <module>xwiki-platform-formula</module>\n    <module>xwiki-platform-graphviz</module>\n    <module>xwiki-platform-groovy</module>\n    <module>xwiki-platform-help</module>\n    <module>xwiki-platform-icon</module>\n    <module>xwiki-platform-image</module>\n    <module>xwiki-platform-index</module>\n    <module>xwiki-platform-instance</module>\n    <module>xwiki-platform-invitation</module>\n    <module>xwiki-platform-job</module>\n    <module>xwiki-platform-jodatime</module>\n    <module>xwiki-platform-lesscss</module>\n    <module>xwiki-platform-like</module>\n    <module>xwiki-platform-linkchecker</module>\n    <module>xwiki-platform-livetable</module>\n    <module>xwiki-platform-localization</module>\n    <module>xwiki-platform-logging</module>\n    <module>xwiki-platform-mail</module>\n    <module>xwiki-platform-mailsender</module>\n    <module>xwiki-platform-mentions</module>\n    <module>xwiki-platform-menu</module>\n    <module>xwiki-platform-messagestream</module>\n    <module>xwiki-platform-minimaldependencies</module>\n    <module>xwiki-platform-model</module>\n    <module>xwiki-platform-notifications</module>\n    <module>xwiki-platform-observation</module>\n    <module>xwiki-platform-office</module>\n    <module>xwiki-platform-oldcore</module>\n    <module>xwiki-platform-panels</module>\n    <module>xwiki-platform-query</module>\n    <module>xwiki-platform-ratings</module>\n    <module>xwiki-platform-refactoring</module>\n    <module>xwiki-platform-release</module>\n    <module>xwiki-platform-rendering</module>\n    <module>xwiki-platform-repository</module>\n    <module>xwiki-platform-resource</module>\n    <module>xwiki-platform-rest</module>\n    <module>xwiki-platform-sandbox</module>\n    <module>xwiki-platform-sharepage</module>\n    <module>xwiki-platform-scheduler</module>\n    <module>xwiki-platform-search</module>\n    <module>xwiki-platform-security</module>\n    <module>xwiki-platform-sheet</module>\n    <module>xwiki-platform-skin</module>\n    <module>xwiki-platform-statistics</module>\n    <module>xwiki-platform-store</module>\n    <module>xwiki-platform-svg</module>\n    <module>xwiki-platform-tag</module>\n    <module>xwiki-platform-template</module>\n    <module>xwiki-platform-test</module>\n    <module>xwiki-platform-tika</module>\n    <module>xwiki-platform-tree</module>\n    <module>xwiki-platform-user</module>\n    <module>xwiki-platform-uiextension</module>\n    <module>xwiki-platform-url</module>\n    <module>xwiki-platform-velocity</module>\n    <module>xwiki-platform-vfs</module>\n    <module>xwiki-platform-web</module>\n    <module>xwiki-platform-webjars</module>\n    <module>xwiki-platform-wiki</module>\n    <module>xwiki-platform-wysiwyg</module>\n    <module>xwiki-platform-xar</module>\n    <module>xwiki-platform-xclass</module>\n    <module>xwiki-platform-xml</module>\n    <module>xwiki-platform-zipexplorer</module>\n  </modules>\n  <profiles>\n    <!-- Profile to build Legacy modules -->\n    <profile>\n      <id>legacy</id>\n      <modules>\n        <module>xwiki-platform-legacy</module>\n      </modules>\n    </profile>\n    <profile>\n      <id>docker</id>\n      <build>\n        <pluginManagement>\n          <plugins>\n            <plugin>\n              <groupId>org.apache.maven.plugins</groupId>\n              <artifactId>maven-failsafe-plugin</artifactId>\n              <configuration>\n                <systemProperties combine.children=\"append\">\n                  <!-- This is required by the Oracle JDBC driver when running configuration tests on Oracle, as\n                       otherwise it fails with:\n                         SQLException: ORA-00604: error occurred at recursive SQL level 1\n                         ORA-01882: timezone region not found\n                       It's required at this level since TestContainers used JDBC to verify that the Oracle database is\n                       started.\n                  -->\n                  <property>\n                    <name>oracle.jdbc.timezoneAsRegion</name>\n                    <value>false</value>\n                  </property>\n                </systemProperties>\n              </configuration>\n            </plugin>\n          </plugins>\n        </pluginManagement>\n      </build>\n    </profile>\n  </profiles>\n</project>\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like;\n\nimport java.util.List;\n\nimport org.xwiki.component.annotation.Role;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.user.UserReference;\n\n/**\n * General manager to handle likes.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@Role\n@Unstable\npublic interface LikeManager\n{\n    /**\n     * Create a page like and save it.\n     *\n     * @param source the user who performs the like.\n     * @param target the page or object to like.\n     * @return the new number of likes.\n     * @throws LikeException in case of problem when saving the like.\n     */\n    long saveLike(UserReference source, EntityReference target) throws LikeException;\n\n    /**\n     * Retrieve the likes performed by the given user.\n     *\n     * @param source the user for whom to retrieve the entity likes.\n     * @param offset the offset used for pagination.\n     * @param limit the limit number of results to retrieve for pagination.\n     * @return a list of references liked by this user.\n     * @throws LikeException in case of problem when getting the like.\n     */\n    List<EntityReference> getUserLikes(UserReference source, int offset, int limit) throws LikeException;\n\n    /**\n     * Retrieve the total number of likes performed by a user.\n     *\n     * @param source the user who performs the likes to count.\n     * @return the total number of likes performed.\n     * @throws LikeException in case of problem when getting the information.\n     * @since 12.9RC1\n     */\n    @Unstable\n    long countUserLikes(UserReference source) throws LikeException;\n\n    /**\n     * Retrieve like information a specific entity.\n     *\n     * @param target the page or object for which to retrieve the like information.\n     * @return the number of likes for that entity.\n     * @throws LikeException in case of problem when getting the like.\n     */\n    long getEntityLikes(EntityReference target) throws LikeException;\n\n    /**\n     * Allow a user to unlike an entity.\n     *\n     * @param source the user who performs the unlike.\n     * @param target the entity to unlike.\n     * @return {@code true} if the entity has been properly unliked.\n     * @throws LikeException in case of problem when removing the like.\n     */\n    boolean removeLike(UserReference source, EntityReference target) throws LikeException;\n\n    /**\n     * Check if an entity is liked by an user without loading all likers.\n     *\n     * @param source the user who might have liked.\n     * @param target the entity which might have been liked.\n     * @return {@code true} if the user liked the page already.\n     * @throws LikeException in case of problem for loading the result.\n     */\n    boolean isLiked(UserReference source, EntityReference target) throws LikeException;\n\n    /**\n     * Retrieve the users who liked the given reference.\n     *\n     * @param target the page that has been liked.\n     * @param offset the offset used for pagination.\n     * @param limit the limit used for pagination.\n     * @return a list of user references of users who liked this page.\n     * @throws LikeException in case of problem for performing the query.\n     * @since 12.9RC1\n     */\n    @Unstable\n    List<UserReference> getLikers(EntityReference target, int offset, int limit) throws LikeException;\n\n    /**\n     * @return a dedicated programmatic right for Like feature.\n     */\n    Right getLikeRight();\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like.internal;\n\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.xwiki.cache.Cache;\nimport org.xwiki.cache.CacheException;\nimport org.xwiki.cache.CacheManager;\nimport org.xwiki.cache.config.LRUCacheConfiguration;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.component.phase.Initializable;\nimport org.xwiki.component.phase.InitializationException;\nimport org.xwiki.like.LikeConfiguration;\nimport org.xwiki.like.LikeEvent;\nimport org.xwiki.like.LikeException;\nimport org.xwiki.like.LikeManager;\nimport org.xwiki.like.UnlikeEvent;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.ratings.Rating;\nimport org.xwiki.ratings.RatingsException;\nimport org.xwiki.ratings.RatingsManager;\nimport org.xwiki.ratings.RatingsManagerFactory;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.security.authorization.UnableToRegisterRightException;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceSerializer;\n\n/**\n * Default implementation of {@link LikeManager} based on {@link RatingsManager}.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@Component\n@Singleton\npublic class DefaultLikeManager implements LikeManager, Initializable\n{\n    private static final int DEFAULT_LIKE_VOTE = 1;\n\n    @Inject\n    private RatingsManagerFactory ratingsManagerFactory;\n\n    @Inject\n    @Named(\"document\")\n    private UserReferenceSerializer<DocumentReference> userReferenceDocumentSerializer;\n\n    @Inject\n    private UserReferenceSerializer<String> userReferenceStringSerializer;\n\n    @Inject\n    private EntityReferenceSerializer<String> entityReferenceSerializer;\n\n    @Inject\n    private AuthorizationManager authorizationManager;\n\n    @Inject\n    private ObservationManager observationManager;\n\n    @Inject\n    private CacheManager cacheManager;\n\n    @Inject\n    private LikeConfiguration likeConfiguration;\n\n    private RatingsManager ratingsManager;\n\n    private Cache<Long> likeCountCache;\n\n    private Cache<Boolean> likeExistCache;\n\n    private Right likeRight;\n\n    @Override\n    public void initialize() throws InitializationException\n    {\n        int likeCacheCapacity = this.likeConfiguration.getLikeCacheCapacity();\n        try {\n            this.likeCountCache = this.cacheManager.createNewCache(\n                new LRUCacheConfiguration(\"xwiki.like.count.cache\", likeCacheCapacity));\n            this.likeExistCache = this.cacheManager.createNewCache(\n                new LRUCacheConfiguration(\"xwiki.like.exist.cache\", likeCacheCapacity));\n            this.likeRight = this.authorizationManager.register(LikeRight.INSTANCE);\n        } catch (UnableToRegisterRightException e) {\n            throw new InitializationException(\"Error while registering the Like right.\", e);\n        } catch (CacheException e) {\n            throw new InitializationException(\"Error while creating the cache for likes.\", e);\n        }\n\n        try {\n            this.ratingsManager = this.ratingsManagerFactory\n                .getRatingsManager(LikeRatingsConfiguration.RANKING_MANAGER_HINT);\n        } catch (RatingsException e) {\n            throw new InitializationException(\"Error while trying to get the RankingManager.\", e);\n        }\n    }\n\n    private String getExistCacheKey(UserReference source, EntityReference target)\n    {\n        return String.format(\"%s_%s\",\n            this.userReferenceStringSerializer.serialize(source), this.entityReferenceSerializer.serialize(target));\n    }\n\n    @Override\n    public long saveLike(UserReference source, EntityReference target) throws LikeException\n    {\n        DocumentReference userDoc = this.userReferenceDocumentSerializer.serialize(source);\n        if (this.authorizationManager.hasAccess(this.likeRight, userDoc, target)) {\n            try {\n                this.ratingsManager.saveRating(target, source, DEFAULT_LIKE_VOTE);\n                this.likeCountCache.remove(this.entityReferenceSerializer.serialize(target));\n                this.likeExistCache.set(getExistCacheKey(source, target), true);\n                long newCount = this.getEntityLikes(target);\n                this.observationManager.notify(new LikeEvent(), source, target);\n                return newCount;\n            } catch (RatingsException e) {\n                throw new LikeException(String.format(\"Error while liking entity [%s]\", target), e);\n            }\n        } else {\n            throw new LikeException(String.format(\"User [%s] is not authorized to perform a like on [%s]\",\n                source, target));\n        }\n    }\n\n    @Override\n    public List<EntityReference> getUserLikes(UserReference source, int offset, int limit) throws LikeException\n    {\n        try {\n            List<Rating> ratings = this.ratingsManager.getRatings(\n                Collections.singletonMap(RatingsManager.RatingQueryField.USER_REFERENCE, source),\n                offset,\n                limit,\n                RatingsManager.RatingQueryField.UPDATED_DATE,\n                false);\n            return ratings.stream().map(Rating::getReference).collect(Collectors.toList());\n        } catch (RatingsException e) {\n            throw new LikeException(\n                String.format(\"Error when trying to retrieve user likes for user [%s]\", source), e);\n        }\n    }\n\n    @Override\n    public long countUserLikes(UserReference source) throws LikeException\n    {\n        try {\n            return this.ratingsManager.countRatings(\n                Collections.singletonMap(RatingsManager.RatingQueryField.USER_REFERENCE, source));\n        } catch (RatingsException e) {\n            throw new LikeException(\n                String.format(\"Error when trying to count user likes for user [%s]\", source), e);\n        }\n    }\n\n    @Override\n    public long getEntityLikes(EntityReference target) throws LikeException\n    {\n        Long result = this.likeCountCache.get(this.entityReferenceSerializer.serialize(target));\n        if (result == null) {\n            Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n            try {\n                result = this.ratingsManager.countRatings(queryMap);\n                this.likeCountCache.set(this.entityReferenceSerializer.serialize(target), result);\n            } catch (RatingsException e) {\n                throw\n                    new LikeException(String.format(\"Error while getting ratings for entity [%s]\", target), e);\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public boolean removeLike(UserReference source, EntityReference target) throws LikeException\n    {\n        String serializedTarget = this.entityReferenceSerializer.serialize(target);\n        DocumentReference userDoc = this.userReferenceDocumentSerializer.serialize(source);\n        boolean result = false;\n        if (this.authorizationManager.hasAccess(this.getLikeRight(), userDoc, target)) {\n            Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n            queryMap.put(RatingsManager.RatingQueryField.USER_REFERENCE, source);\n\n            try {\n                List<Rating> ratings =\n                    this.ratingsManager\n                        .getRatings(queryMap, 0, 1, RatingsManager.RatingQueryField.UPDATED_DATE, false);\n                if (!ratings.isEmpty()) {\n                    result = this.ratingsManager.removeRating(ratings.get(0).getId());\n                    this.likeCountCache.remove(serializedTarget);\n                    this.likeExistCache.set(getExistCacheKey(source, target), false);\n                    this.observationManager.notify(new UnlikeEvent(), source, target);\n                }\n            } catch (RatingsException e) {\n                throw new LikeException(\"Error while removing grading\", e);\n            }\n        } else {\n            throw new LikeException(\n                String.format(\"User [%s] is not authorized to remove a like on [%s].\",\n                    userDoc, target));\n        }\n        return result;\n    }\n\n    @Override\n    public boolean isLiked(UserReference source, EntityReference target) throws LikeException\n    {\n        Boolean result = this.likeExistCache.get(getExistCacheKey(source, target));\n        if (result == null) {\n            Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n            queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n            queryMap.put(RatingsManager.RatingQueryField.USER_REFERENCE, source);\n\n            try {\n                List<Rating> ratings =\n                    this.ratingsManager\n                        .getRatings(queryMap, 0, 1, RatingsManager.RatingQueryField.UPDATED_DATE, false);\n                result = !ratings.isEmpty();\n                this.likeExistCache.set(getExistCacheKey(source, target), result);\n            } catch (RatingsException e) {\n                throw new LikeException(\"Error while checking if grading exists\", e);\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public List<UserReference> getLikers(EntityReference target, int offset, int limit) throws LikeException\n    {\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        try {\n            List<Rating> ratings = this.ratingsManager\n                .getRatings(queryMap, offset, limit, RatingsManager.RatingQueryField.UPDATED_DATE, false);\n            return ratings.stream().map(Rating::getAuthor).collect(Collectors.toList());\n        } catch (RatingsException e) {\n            throw new LikeException(String.format(\"Error while getting likers of [%s]\", target), e);\n        }\n    }\n\n    @Override\n    public Right getLikeRight()\n    {\n        return this.likeRight;\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like.script;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Optional;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Provider;\nimport javax.inject.Singleton;\n\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.slf4j.Logger;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.like.LikeConfiguration;\nimport org.xwiki.like.LikeException;\nimport org.xwiki.like.LikeManager;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.LocalDocumentReference;\nimport org.xwiki.rendering.async.internal.AsyncRendererCache;\nimport org.xwiki.script.service.ScriptService;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\n\n/**\n * Script service for manipulating Like informations.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@Component\n@Singleton\n@Named(\"like\")\n@Unstable\npublic class LikeScriptService implements ScriptService\n{\n    private static final LocalDocumentReference UIX_REFERENCE =\n        new LocalDocumentReference(new LocalDocumentReference(Arrays.asList(\"XWiki\", \"Like\"), \"LikeUIX\"), Locale.ROOT);\n\n    @Inject\n    private Provider<XWikiContext> contextProvider;\n\n    @Inject\n    private LikeManager likeManager;\n\n    @Inject\n    private LikeConfiguration likeConfiguration;\n\n    @Inject\n    private AuthorizationManager authorizationManager;\n\n    @Inject\n    @Named(\"document\")\n    private UserReferenceResolver<DocumentReference> userReferenceResolver;\n\n    @Inject\n    private AsyncRendererCache asyncRendererCache;\n\n    @Inject\n    private Logger logger;\n\n    private Right getLikeRight()\n    {\n        return this.likeManager.getLikeRight();\n    }\n\n    /**\n     * Check if current user is allowed to use Like on the given reference.\n     * Note that we explicitely deny the right for guests.\n     * @param entityReference the reference on which to use like.\n     * @return {@code true} only if current user is not guest and has Like right on the reference.\n     */\n    public boolean isAuthorized(EntityReference entityReference)\n    {\n        DocumentReference userReference = this.contextProvider.get().getUserReference();\n        return userReference != null && this.authorizationManager.hasAccess(getLikeRight(),\n            userReference, entityReference);\n    }\n\n    /**\n     * Check if the display button should be displayed: should be {@code true} if current user is authorized to use like\n     * (see {@link #isAuthorized(EntityReference)}) or if the configuration is set to always display it\n     * (see {@link LikeConfiguration#alwaysDisplayButton()}).\n     *\n     * @param entityReference the reference for which to display the button\n     * @return {@code true} only if the button should be displayed.\n     */\n    public boolean displayButton(EntityReference entityReference)\n    {\n        return this.likeConfiguration.alwaysDisplayButton() || this.isAuthorized(entityReference);\n    }\n\n    /**\n     * Perform a like on the given reference with the current user, only if allowed.\n     *\n     * @param entityReference the reference on which to perform a like.\n     * @return the new number of likes if the operation succeeded, else return an empty optional.\n     */\n    public Optional<Long> like(EntityReference entityReference)\n    {\n        XWikiContext xWikiContext = this.contextProvider.get();\n        DocumentReference currentUser = xWikiContext.getUserReference();\n\n        if (entityReference instanceof DocumentReference) {\n            DocumentReference documentReference = (DocumentReference) entityReference;\n            if (isAuthorized(documentReference)) {\n                UserReference userReference = this.userReferenceResolver.resolve(currentUser);\n                try {\n                    return Optional.of(this.likeManager.saveLike(userReference, documentReference));\n                } catch (LikeException e) {\n                    this.logger.warn(\"Error while liking [{}] by [{}]\", documentReference, currentUser,\n                        ExceptionUtils.getRootCause(e));\n                }\n            } else {\n                this.logger.warn(\"[{}] is not authorized to like [{}].\", currentUser, documentReference);\n            }\n        } else {\n            this.logger.warn(\"Like is only implemented for document for now. (Called with [{}])\", entityReference);\n        }\n        return Optional.empty();\n    }\n\n    /**\n     * Perform a unlike on the given reference with the current user, only if allowed.\n     *\n     * @param entityReference the reference on which to perform a like.\n     * @return the new number of likes if the operation succeeded, else return an empty optional.\n     */\n    public Optional<Long> unlike(EntityReference entityReference)\n    {\n        XWikiContext xWikiContext = this.contextProvider.get();\n        DocumentReference currentUser = xWikiContext.getUserReference();\n\n        if (entityReference instanceof DocumentReference) {\n            DocumentReference documentReference = (DocumentReference) entityReference;\n            if (this.isAuthorized(documentReference)) {\n                UserReference userReference = this.userReferenceResolver.resolve(currentUser);\n                try {\n                    this.likeManager.removeLike(userReference, entityReference);\n                    return Optional.of(this.likeManager.getEntityLikes(entityReference));\n                } catch (LikeException e) {\n                    this.logger.warn(\"Error while unliking [{}] by [{}]\", documentReference, currentUser,\n                        ExceptionUtils.getRootCause(e));\n                }\n            } else {\n                this.logger.warn(\"[{}] is not authorized to unlike [{}].\", currentUser, documentReference);\n            }\n        } else {\n            this.logger.warn(\"Unlike is only implemented for document for now. (Called with [{}])\", entityReference);\n        }\n        return Optional.empty();\n    }\n\n    /**\n     * Retrieve like information for the given reference.\n     *\n     * @param entityReference the reference for which to retrieve like information.\n     * @return the number of likes, or an empty optional in case of problem.\n     */\n    public Optional<Long> getLikes(EntityReference entityReference)\n    {\n        try {\n            return Optional.of(this.likeManager.getEntityLikes(entityReference));\n        } catch (LikeException e) {\n            this.logger.warn(\"Error while getting like information for [{}]\", entityReference,\n                ExceptionUtils.getRootCause(e));\n        }\n        return Optional.empty();\n    }\n\n    /**\n     * Retrieve likes performed by the given user.\n     *\n     * @param userReference the user for whom to retrieve likes.\n     * @param offset the offset used for pagination.\n     * @param limit the limit used for pagination.\n     * @return a list of liked references.\n     */\n    public List<EntityReference> getUserLikes(UserReference userReference, int offset, int limit)\n    {\n        try {\n            return this.likeManager.getUserLikes(userReference, offset, limit);\n        } catch (LikeException e) {\n            this.logger.warn(\"Error while retrieving likes for user [{}]\", userReference,\n                ExceptionUtils.getRootCause(e));\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * Count the number of likes performed by the given user.\n     *\n     * @param userReference the user for whom to count likes.\n     * @return the number of likes performed.\n     * @since 12.9RC1\n     */\n    @Unstable\n    public Optional<Long> countUserLikes(UserReference userReference)\n    {\n        Optional<Long> result = Optional.empty();\n        try {\n            result = Optional.of(this.likeManager.countUserLikes(userReference));\n        } catch (LikeException e) {\n            this.logger.warn(\"Error while counting likes for user [{}]\", userReference,\n                ExceptionUtils.getRootCause(e));\n        }\n        return result;\n    }\n\n    /**\n     * Determine if the current user already liked the given reference.\n     * @param entityReference the reference for which to check if the current liked it or not already.\n     * @return {@code true} if the entity has been already liked.\n     */\n    public boolean isLiked(EntityReference entityReference)\n    {\n        UserReference userReference = this.userReferenceResolver.resolve(this.contextProvider.get().getUserReference());\n\n        try {\n            return this.likeManager.isLiked(userReference, entityReference);\n        } catch (LikeException e) {\n            this.logger.warn(\"Error while checking if [{}] is liked by [{}]\", entityReference, userReference,\n                ExceptionUtils.getRootCause(e));\n        }\n        return false;\n    }\n\n    /**\n     * Return the likers of a reference.\n     *\n     * @param target the reference being liked.\n     * @param offset the start offset for pagination.\n     * @param limit the limit of results for pagination.\n     * @return a list of user references who liked the reference.\n     * @since 12.8RC1\n     */\n    @Unstable\n    public List<UserReference> getLikers(EntityReference target, int offset, int limit)\n    {\n        try {\n            return this.likeManager.getLikers(target, offset, limit);\n        } catch (LikeException e) {\n            this.logger.warn(\"Error while checking getting likers for [{}]\", target, ExceptionUtils.getRootCause(e));\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * Clean the async rendering cache for the Like UIX.\n     */\n    public void cleanCacheUIX()\n    {\n        DocumentReference localUIXReference = new DocumentReference(UIX_REFERENCE,\n            contextProvider.get().getWikiReference());\n        this.asyncRendererCache.cleanCache(localUIXReference);\n    }\n}\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n#if ($request.livetable == \"true\")\n    #macro (displayUserAliasWithAvatar $userReference $disabled)\n    <div class=\"user#if ($disabled) disabled#end\" data-reference=\"$escapetool.xml($userReference)\">\n    <span class=\"user-avatar-wrapper\">\n      #getUserAvatarURL($userReference $avatarURL 120)\n      <img class=\"user-avatar\" src=\"$escapetool.xml($avatarURL.url)\" />\n    </span>\n      <a href=\"$xwiki.getURL($userReference)\">$escapetool.xml($userReference.name)</a>\n    </div>\n    #end\n    $response.setContentType('application/json')\n    #set ($documentReference = $doc.documentReference)\n    ##==============================\n    ## Offset = item # at which to start displaying data\n    ##==============================\n    #set($offset = $numbertool.toNumber($request.get('offset')))\n    ## offset starts from 0 in velocity and 1 in javascript\n    #set($offset = $offset - 1)\n    #if($offset < 0)\n        #set($offset = 0)\n    #end\n    ##==================\n    ## Limit = # of items to display\n    ##==================\n    #set($limit = $numbertool.toNumber($request.get('limit')))\n    ##==========\n    ## Sort direction\n    ##==========\n    #set($order = \"$!request.sort\")\n    #if($order != '')\n        #set($orderDirection = \"$!{request.get('dir').toLowerCase()}\")\n        #if(\"$!orderDirection\" != '' && \"$!orderDirection\" != 'asc')\n            #set($orderDirection = 'desc')\n        #end\n    #end\n    #set ($likeRecords = $services.like.getLikers($documentReference, $offset, $limit))\n    #set ($userRows = [])\n    #foreach($userReference in $likeRecords)\n        #set ($grayed = $xcontext.userReference == $userReference.reference)\n        #set ($userDoc = $xwiki.getDocument($userReference.reference))\n        #set ($userProperties = $services.user.getProperties($userReference))\n        #set ($userObject = $user.getObject('XWiki.XWikiUsers'))\n        #set ($row = {\n            'grayed': $grayed,\n            'doc_fullName': $userDoc.fullName,\n            'doc_wiki': $userDoc.wiki,\n            'doc_url': $userDoc.getURL(),\n            'doc_viewable': $services.security.authorization.hasAccess('view', $userDoc.documentReference),\n            'name': \"#displayUserAliasWithAvatar($userDoc.documentReference $disabled)\",\n            'first_name': $userProperties.firstName,\n            'last_name': $userProperties.lastName\n        })\n        #set ($discard = $userRows.add($row))\n    #end\n    ## ===\n    ## JSON\n    ## ===\n    #set ($newOffset = $offset + 1)\n    #set ($optLikesNumber = $services.like.getLikes($documentReference))\n    #if ($optLikesNumber.isPresent())\n      #set ($totalRows = $optLikesNumber.get())\n    #else\n      #set ($totalRows = $likeRecords.size())\n    #end\n    {\n        \"totalrows\": $totalRows,\n        \"returnedrows\":  $likeRecords.size(),\n        \"offset\": $newOffset,\n        \"reqNo\": $numbertool.toNumber($request.reqNo),\n        \"rows\": $jsontool.serialize($userRows)\n    }\n#else\n    <h1>$escapetool.xml($services.localization.render('like.likers.title', [$doc.plainTitle]))</h1>\n    #set($columns = [\"name\", \"first_name\", \"last_name\"])\n    #set($columnsProperties = {\n        \"name\" : { \"type\" : \"text\", \"sortable\": false, \"filterable\": false, \"html\": true },\n        \"first_name\" : { \"type\" : \"text\", \"sortable\": false, \"filterable\": false},\n        \"last_name\" : { \"type\" : \"text\", \"sortable\": false, \"filterable\": false}\n    })\n    #set ($queryParams = {\n        \"livetable\": \"true\",\n        \"xpage\": \"likers\",\n        \"outputSyntax\": \"plain\"\n    })\n    ## We rely on the same column name than the Users administration, so we use same translation prefix for now.\n    #set($options = {\n        'url': $doc.getURL('get', $escapetool.url($queryParams)),\n        'outputOnlyHtml': true,\n        'translationPrefix' : \"xe.admin.users.\"\n    })\n\n    #livetable(\"likers\" $columns $columnsProperties $options)\n#end", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like.internal;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport javax.inject.Named;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.xwiki.cache.Cache;\nimport org.xwiki.cache.CacheManager;\nimport org.xwiki.cache.config.CacheConfiguration;\nimport org.xwiki.like.LikeConfiguration;\nimport org.xwiki.like.LikeEvent;\nimport org.xwiki.like.LikeException;\nimport org.xwiki.like.UnlikeEvent;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.ratings.Rating;\nimport org.xwiki.ratings.RatingsException;\nimport org.xwiki.ratings.RatingsManager;\nimport org.xwiki.ratings.RatingsManagerFactory;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.annotation.BeforeComponent;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceSerializer;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n/**\n * Tests for {@link DefaultLikeManager}.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@ComponentTest\npublic class DefaultLikeManagerTest\n{\n    @InjectMockComponents\n    private DefaultLikeManager defaultLikeManager;\n\n    @MockComponent\n    @Named(\"document\")\n    private UserReferenceSerializer<DocumentReference> userReferenceDocumentSerializer;\n\n    @MockComponent\n    private UserReferenceSerializer<String> userReferenceStringSerializer;\n\n    @MockComponent\n    private AuthorizationManager authorizationManager;\n\n    @MockComponent\n    private ObservationManager observationManager;\n\n    @MockComponent\n    private CacheManager cacheManager;\n\n    @MockComponent\n    private LikeConfiguration likeConfiguration;\n\n    @MockComponent\n    private EntityReferenceSerializer<String> entityReferenceSerializer;\n\n    @MockComponent\n    private RatingsManagerFactory ratingsManagerFactory;\n\n    private RatingsManager ratingsManager;\n\n    private Cache<Long> likedEntityCache;\n\n    private Cache<Boolean> likeExistCache;\n\n    private Right likeRight;\n\n    @Mock\n    private UserReference userReference;\n\n    private DocumentReference userDocReference;\n\n    private DocumentReference target;\n\n    @BeforeComponent\n    void beforeComponent() throws Exception\n    {\n        this.likeRight = mock(Right.class);\n        when(this.authorizationManager.register(LikeRight.INSTANCE)).thenReturn(this.likeRight);\n        when(this.likeConfiguration.getLikeCacheCapacity()).thenReturn(500);\n        this.likedEntityCache = mock(Cache.class);\n        this.likeExistCache = mock(Cache.class);\n        when(this.cacheManager.createNewCache(any())).then(invocationOnMock -> {\n            CacheConfiguration cacheConfiguration = invocationOnMock.getArgument(0);\n            if (cacheConfiguration.getConfigurationId().equals(\"xwiki.like.count.cache\")) {\n                return this.likedEntityCache;\n            } else if (cacheConfiguration.getConfigurationId().equals(\"xwiki.like.exist.cache\")) {\n                return this.likeExistCache;\n            } else {\n                throw new AssertionError(\"Cache key is wrong.\");\n            }\n        });\n        this.ratingsManager = mock(RatingsManager.class);\n        when(this.ratingsManagerFactory.getRatingsManager(LikeRatingsConfiguration.RANKING_MANAGER_HINT))\n            .thenReturn(this.ratingsManager);\n    }\n\n    @BeforeEach\n    void setup()\n    {\n        this.userDocReference = new DocumentReference(\"xwiki\", \"XWiki\", \"User\");\n        when(this.userReferenceDocumentSerializer.serialize(this.userReference)).thenReturn(this.userDocReference);\n        when(this.userReferenceStringSerializer.serialize(this.userReference)).thenReturn(\"xwiki:XWiki.User\");\n\n        this.target = new DocumentReference(\"xwiki\", \"Foo\", \"WebHome\");\n        when(this.entityReferenceSerializer.serialize(this.target)).thenReturn(\"xwiki:Foo.WebHome\");\n    }\n\n    @Test\n    void saveLike() throws Exception\n    {\n        when(this.authorizationManager.hasAccess(this.likeRight, this.userDocReference, target)).thenReturn(true);\n\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        when(this.ratingsManager.countRatings(queryMap)).thenReturn(42L);\n\n        assertEquals(42L, this.defaultLikeManager.saveLike(this.userReference, target));\n        verify(this.ratingsManager).saveRating(target, this.userReference, 1);\n        verify(this.observationManager).notify(any(LikeEvent.class), eq(this.userReference), eq(target));\n        verify(this.likedEntityCache).remove(\"xwiki:Foo.WebHome\");\n        verify(this.likedEntityCache).set(\"xwiki:Foo.WebHome\", 42L);\n        verify(this.likeExistCache).set(\"xwiki:XWiki.User_xwiki:Foo.WebHome\", true);\n    }\n\n    @Test\n    void saveLikeNoAuthorization() throws RatingsException\n    {\n        when(this.authorizationManager.hasAccess(this.likeRight, this.userDocReference, target)).thenReturn(false);\n\n        LikeException likeException = assertThrows(LikeException.class, () -> {\n            this.defaultLikeManager.saveLike(this.userReference, target);\n        });\n        assertEquals(\"User [userReference] is not authorized to perform a like on [xwiki:Foo.WebHome]\",\n            likeException.getMessage());\n        verify(this.ratingsManager, never()).saveRating(target, this.userReference, 1);\n        verify(this.observationManager, never()).notify(any(LikeEvent.class), eq(this.userReference), any());\n        verify(this.likedEntityCache, never()).remove(any());\n        verify(this.likedEntityCache, never()).set(any(), any());\n        verify(this.likedEntityCache, never()).get(any());\n    }\n\n    @Test\n    void getEntityLikes() throws Exception\n    {\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        when(this.ratingsManager.countRatings(queryMap)).thenReturn(43L);\n\n        assertEquals(43L, this.defaultLikeManager.getEntityLikes(target));\n        verify(this.likedEntityCache).set(\"xwiki:Foo.WebHome\", 43L);\n    }\n\n    @Test\n    void getLikeRight()\n    {\n        assertSame(this.likeRight, this.defaultLikeManager.getLikeRight());\n    }\n\n    @Test\n    void getUserLikes() throws Exception\n    {\n        Rating grading1 = mock(Rating.class);\n        EntityReference entityReference1 = mock(EntityReference.class);\n        when(grading1.getReference()).thenReturn(entityReference1);\n\n        Rating grading2 = mock(Rating.class);\n        EntityReference entityReference2 = mock(EntityReference.class);\n        when(grading2.getReference()).thenReturn(entityReference2);\n\n        Rating grading3 = mock(Rating.class);\n        EntityReference entityReference3 = mock(EntityReference.class);\n        when(grading3.getReference()).thenReturn(entityReference3);\n\n        when(this.ratingsManager.getRatings(\n            Collections.singletonMap(RatingsManager.RatingQueryField.USER_REFERENCE, this.userReference),\n            5,\n            3,\n            RatingsManager.RatingQueryField.UPDATED_DATE,\n            false)).thenReturn(Arrays.asList(grading1, grading2, grading3));\n\n        assertEquals(Arrays.asList(entityReference1, entityReference2, entityReference3),\n            this.defaultLikeManager.getUserLikes(this.userReference, 5, 3));\n    }\n\n    @Test\n    void isLiked() throws Exception\n    {\n        assertFalse(this.defaultLikeManager.isLiked(this.userReference, target));\n\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        queryMap.put(RatingsManager.RatingQueryField.USER_REFERENCE, this.userReference);\n\n        when(this.ratingsManager.getRatings(queryMap, 0, 1, RatingsManager.RatingQueryField.UPDATED_DATE, false)).\n            thenReturn(Collections.singletonList(mock(Rating.class)));\n        assertTrue(this.defaultLikeManager.isLiked(this.userReference, target));\n        verify(this.likeExistCache).set(\"xwiki:XWiki.User_xwiki:Foo.WebHome\", true);\n    }\n\n    @Test\n    void removeLike() throws Exception\n    {\n        when(this.authorizationManager.hasAccess(this.likeRight, this.userDocReference, target)).thenReturn(true);\n        assertFalse(this.defaultLikeManager.removeLike(this.userReference, target));\n\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n        queryMap.put(RatingsManager.RatingQueryField.USER_REFERENCE, this.userReference);\n        Rating grading = mock(Rating.class);\n        when(grading.getId()).thenReturn(\"grading423\");\n\n        when(this.ratingsManager.getRatings(queryMap, 0, 1, RatingsManager.RatingQueryField.UPDATED_DATE, false))\n            .thenReturn(Collections.singletonList(grading));\n        when(this.ratingsManager.removeRating(\"grading423\")).thenReturn(true);\n\n        assertTrue(this.defaultLikeManager.removeLike(this.userReference, target));\n        verify(this.ratingsManager).removeRating(\"grading423\");\n        verify(this.observationManager).notify(any(UnlikeEvent.class), eq(this.userReference), eq(this.target));\n        verify(this.likeExistCache).set(\"xwiki:XWiki.User_xwiki:Foo.WebHome\", false);\n        verify(this.likedEntityCache).remove(\"xwiki:Foo.WebHome\");\n    }\n\n    @Test\n    void removeLikeNotAuthorized() throws Exception\n    {\n        when(this.authorizationManager.hasAccess(this.likeRight, this.userDocReference, target)).thenReturn(false);\n\n        LikeException likeException = assertThrows(LikeException.class, () -> {\n            this.defaultLikeManager.removeLike(this.userReference, target);\n        });\n        assertEquals(\"User [xwiki:XWiki.User] is not authorized to remove a like on [xwiki:Foo.WebHome].\",\n            likeException.getMessage());\n        verify(this.ratingsManager, never()).removeRating(any());\n        verify(this.observationManager, never()).notify(any(UnlikeEvent.class), eq(this.userReference), any());\n    }\n\n    @Test\n    void getLikers() throws Exception\n    {\n        Rating grading1 = mock(Rating.class);\n        UserReference userReference1 = mock(UserReference.class);\n        when(grading1.getAuthor()).thenReturn(userReference1);\n\n        Rating grading2 = mock(Rating.class);\n        UserReference userReference2 = mock(UserReference.class);\n        when(grading2.getAuthor()).thenReturn(userReference2);\n\n        Rating grading3 = mock(Rating.class);\n        UserReference userReference3 = mock(UserReference.class);\n        when(grading3.getAuthor()).thenReturn(userReference3);\n\n        Map<RatingsManager.RatingQueryField, Object> queryMap = new LinkedHashMap<>();\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_TYPE, target.getType());\n        queryMap.put(RatingsManager.RatingQueryField.ENTITY_REFERENCE, target);\n\n        when(this.ratingsManager.getRatings(queryMap, 12, 4, RatingsManager.RatingQueryField.UPDATED_DATE, false))\n            .thenReturn(Arrays.asList(grading1, grading2, grading3));\n        assertEquals(Arrays.asList(userReference1, userReference2, userReference3),\n            this.defaultLikeManager.getLikers(this.target, 12, 4));\n    }\n\n    @Test\n    void countUserLikes() throws Exception\n    {\n        when(this.ratingsManager.countRatings(\n            Collections.singletonMap(RatingsManager.RatingQueryField.USER_REFERENCE, this.userReference)))\n            .thenReturn(42L);\n\n        assertEquals(42L, this.defaultLikeManager.countUserLikes(this.userReference));\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.like.script;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Optional;\n\nimport javax.inject.Named;\nimport javax.inject.Provider;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.RegisterExtension;\nimport org.mockito.Mock;\nimport org.xwiki.like.LikeConfiguration;\nimport org.xwiki.like.LikeException;\nimport org.xwiki.like.LikeManager;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.rendering.async.internal.AsyncRendererCache;\nimport org.xwiki.security.authorization.AuthorizationManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.LogLevel;\nimport org.xwiki.test.junit5.LogCaptureExtension;\nimport org.xwiki.test.junit5.mockito.ComponentTest;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\nimport org.xwiki.user.UserReference;\nimport org.xwiki.user.UserReferenceResolver;\n\nimport com.xpn.xwiki.XWikiContext;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n/**\n * Tests for {@link LikeScriptService}.\n *\n * @version $Id$\n * @since 12.7RC1\n */\n@ComponentTest\npublic class LikeScriptServiceTest\n{\n    @InjectMockComponents\n    private LikeScriptService likeScriptService;\n\n    @MockComponent\n    private LikeManager likeManager;\n\n    @MockComponent\n    private Provider<XWikiContext> contextProvider;\n\n    @MockComponent\n    private LikeConfiguration likeConfiguration;\n\n    @MockComponent\n    private AuthorizationManager authorizationManager;\n\n    @MockComponent\n    @Named(\"document\")\n    private UserReferenceResolver<DocumentReference> userReferenceResolver;\n\n    @MockComponent\n    private AsyncRendererCache asyncRendererCache;\n\n    @Mock\n    private Right likeRight;\n\n    @Mock\n    private XWikiContext xWikiContext;\n\n    @Mock\n    private UserReference userReference;\n\n    private DocumentReference docUserReference;\n\n    @RegisterExtension\n    LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n\n    @BeforeEach\n    void setup()\n    {\n        when(this.likeManager.getLikeRight()).thenReturn(this.likeRight);\n        when(this.contextProvider.get()).thenReturn(this.xWikiContext);\n        this.docUserReference = new DocumentReference(\"xwiki\", \"XWiki\", \"User\");\n        when(this.xWikiContext.getUserReference()).thenReturn(this.docUserReference);\n        when(this.userReferenceResolver.resolve(docUserReference)).thenReturn(userReference);\n    }\n\n    @Test\n    void isAuthorized()\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        assertTrue(this.likeScriptService.isAuthorized(entityReference));\n        verify(this.authorizationManager).hasAccess(this.likeRight, this.docUserReference, entityReference);\n\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(false);\n        assertFalse(this.likeScriptService.isAuthorized(entityReference));\n        verify(this.authorizationManager, times(2)).hasAccess(this.likeRight, this.docUserReference, entityReference);\n    }\n\n    @Test\n    void displayButton()\n    {\n        when(this.likeConfiguration.alwaysDisplayButton()).thenReturn(true);\n        assertTrue(this.likeScriptService.displayButton(null));\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        assertTrue(this.likeScriptService.displayButton(entityReference));\n\n        when(this.likeConfiguration.alwaysDisplayButton()).thenReturn(false);\n        assertFalse(this.likeScriptService.displayButton(null));\n\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        assertTrue(this.likeScriptService.displayButton(entityReference));\n        verify(this.authorizationManager).hasAccess(this.likeRight, this.docUserReference, entityReference);\n    }\n\n    @Test\n    void like() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        when(this.likeManager.saveLike(userReference, entityReference)).thenReturn(42L);\n        Optional<Long> optionalLikedEntity = this.likeScriptService.like(entityReference);\n\n        assertTrue(optionalLikedEntity.isPresent());\n        assertSame(42L, optionalLikedEntity.get());\n    }\n\n    @Test\n    void likeNotAuthorized()\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        assertFalse(this.likeScriptService.like(entityReference).isPresent());\n        assertEquals(\"[xwiki:XWiki.User] is not authorized to like [xwiki:Foo.Foo].\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void likeNotDocument()\n    {\n        EntityReference entityReference = new EntityReference(\"something\", EntityType.ATTACHMENT);\n        assertFalse(this.likeScriptService.like(entityReference).isPresent());\n        assertEquals(\"Like is only implemented for document for now. (Called with [Attachment something])\",\n            logCapture.getMessage(0));\n    }\n\n    @Test\n    void likeError() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        when(this.likeManager.saveLike(userReference, entityReference)).thenThrow(new LikeException(\"Problem\"));\n        assertFalse(this.likeScriptService.like(entityReference).isPresent());\n        assertEquals(\"Error while liking [xwiki:Foo.Foo] by [xwiki:XWiki.User]\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void unlike() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n\n        when(this.likeManager.getEntityLikes(entityReference)).thenReturn(41L);\n        Optional<Long> optionalLikedEntity = this.likeScriptService.unlike(entityReference);\n\n        assertTrue(optionalLikedEntity.isPresent());\n        assertSame(41L, optionalLikedEntity.get());\n        verify(this.likeManager).removeLike(userReference, entityReference);\n    }\n\n    @Test\n    void unlikeNotAuthorized()\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        assertFalse(this.likeScriptService.unlike(entityReference).isPresent());\n        assertEquals(\"[xwiki:XWiki.User] is not authorized to unlike [xwiki:Foo.Foo].\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void unlikeNotDocument()\n    {\n        EntityReference entityReference = new EntityReference(\"something\", EntityType.ATTACHMENT);\n        assertFalse(this.likeScriptService.unlike(entityReference).isPresent());\n        assertEquals(\"Unlike is only implemented for document for now. (Called with [Attachment something])\",\n            logCapture.getMessage(0));\n    }\n\n    @Test\n    void unlikeError() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.authorizationManager.hasAccess(this.likeRight, this.docUserReference, entityReference))\n            .thenReturn(true);\n        when(this.likeManager.removeLike(userReference, entityReference)).thenThrow(new LikeException(\"Problem\"));\n        assertFalse(this.likeScriptService.unlike(entityReference).isPresent());\n        assertEquals(\"Error while unliking [xwiki:Foo.Foo] by [xwiki:XWiki.User]\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void getLikes() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n\n        when(this.likeManager.getEntityLikes(entityReference)).thenReturn(40L);\n        Optional<Long> optionalLikedEntity = this.likeScriptService.getLikes(entityReference);\n\n        assertTrue(optionalLikedEntity.isPresent());\n        assertSame(40L, optionalLikedEntity.get());\n    }\n\n    @Test\n    void getLikesError() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.likeManager.getEntityLikes(entityReference)).thenThrow(new LikeException(\"Problem\"));\n        assertFalse(this.likeScriptService.getLikes(entityReference).isPresent());\n        assertEquals(\"Error while getting like information for [xwiki:Foo.Foo]\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void isLiked() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n\n        when(this.likeManager.isLiked(userReference, entityReference)).thenReturn(false);\n        assertFalse(this.likeScriptService.isLiked(entityReference));\n\n        when(this.likeManager.isLiked(userReference, entityReference)).thenReturn(true);\n        assertTrue(this.likeScriptService.isLiked(entityReference));\n    }\n\n    @Test\n    void isLikedError() throws LikeException\n    {\n        EntityReference entityReference = new DocumentReference(\"xwiki\", \"Foo\", \"Foo\");\n        when(this.likeManager.isLiked(userReference, entityReference)).thenThrow(new LikeException(\"Problem\"));\n        assertFalse(this.likeScriptService.isLiked(entityReference));\n        assertEquals(\"Error while checking if [xwiki:Foo.Foo] is liked by [userReference]\", logCapture.getMessage(0));\n    }\n\n    @Test\n    void cleanCache()\n    {\n        when(this.xWikiContext.getWikiReference()).thenReturn(new WikiReference(\"foo\"));\n        this.likeScriptService.cleanCacheUIX();\n\n        // The Locale is important here since the AsyncRendererCache works with references containing a Locale.\n        DocumentReference uixReference = new DocumentReference(\"foo\", Arrays.asList(\"XWiki\", \"Like\"), \"LikeUIX\",\n            Locale.ROOT);\n        verify(this.asyncRendererCache).cleanCache(uixReference);\n    }\n\n    @Test\n    void countUserLikes() throws LikeException\n    {\n        when(this.likeManager.countUserLikes(userReference)).thenReturn(43L);\n        assertEquals(Optional.of(43L), this.likeScriptService.countUserLikes(this.userReference));\n    }\n\n    @Test\n    void getUserLikes() throws LikeException\n    {\n        List<EntityReference> expectedList = Arrays.asList(\n            mock(EntityReference.class),\n            mock(EntityReference.class),\n            mock(EntityReference.class));\n        when(this.likeManager.getUserLikes(this.userReference, 2, 32)).thenReturn(expectedList);\n        assertEquals(expectedList, this.likeScriptService.getUserLikes(this.userReference, 2, 32));\n    }\n}\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"de\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>de</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Gef\u00e4llt mir\nlike.unlike.modal.title=\"Gef\u00e4llt mir nicht mehr\" Best\u00e4tigung\nlike.unlike.modal.body=Sie sind Sie sicher, dass Sie Ihr \"Gef\u00e4llt mir\" f\u00fcr die Seite {0} entfernen m\u00f6chten?\nlike.unlike.modal.closeButton=Schlie\u00dfen\nlike.unlike.modal.unlikeButton=\"Gef\u00e4llt mir\" entfernen\nlike.unlike.modal.viewLikersButton=\"Gef\u00e4llt mir\" anzeigen\nlike.newlike.success=\"Gef\u00e4llt mir\" hinzugef\u00fcgt.\nlike.newlike.error=Fehler beim setzen des \"Gef\u00e4llt mir\".\nlike.unlike.success=Die Seite gef\u00e4llt Ihnen nun nicht mehr.\nlike.unlike.error=Fehler beim Entfernen des \"Gef\u00e4llt mir\".\nlike.userprofile.menu=\"Gef\u00e4llt mir\" Seiten\nlike.button.title=Anzahl der \"Gef\u00e4llt mir\" auf der Seite: {0}\n### Missing: like.button.title.like=Click to like the current page. Number of likes on this page: {0}.\n### Missing: like.button.title.unlike=Click to unlike the current page. Number of likes on this page: {0}.\nlike.likers.empty=Niemandem gef\u00e4llt diese Seite bisher.\nlike.likers.number={0} Personen gef\u00e4llt die Seite:\nlike.likers.title={0} Gef\u00e4llt mir\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=\"Gef\u00e4llt mir\" Schaltfl\u00e4che immer anzeigen\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Die \"Gef\u00e4llt mir\" Schaltfl\u00e4che immer anzeigen - selbst wenn der Nutzer kein Recht hat diese zu benutzen. Anschalten, um die Anzahl der \"Gef\u00e4llt mir\" immer anzuzeigen.\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Cache-Gr\u00f6\u00dfe\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Anzahl der \"Gef\u00e4llt mir\"-Informationen im Cache. Sie m\u00fcssen XWiki neustarten, damit ver\u00e4nderte Einstellungen angewendet werden.</content>\n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"es\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>es</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Me gusta\nlike.unlike.modal.title=Confirmaci\u00f3n de \"ya no me gusta\"\nlike.unlike.modal.body=\u00bfEst\u00e1s seguro que deseas eliminar tu \"Me gusta\" de la p\u00e1gina {0}?\nlike.unlike.modal.closeButton=Cerrar\nlike.unlike.modal.unlikeButton=Ya no me gusta la p\u00e1gina\nlike.unlike.modal.viewLikersButton=Me gusta\nlike.newlike.success=La p\u00e1gina ha recibido alg\u00fan \"Me gusta\".\nlike.newlike.error=Error al intentar dar \"me gusta\" a la p\u00e1gina.\nlike.unlike.success=La p\u00e1gina ha recibido alg\u00fan \"Ya no me gusta\".\nlike.unlike.error=Error al intentar dar \"ya no me gusta\" a la p\u00e1gina.\nlike.userprofile.menu=P\u00e1ginas que me gustan\nlike.button.title=N\u00famero de \"Me gusta\" de esta p\u00e1gina: {0}\n### Missing: like.button.title.like=Click to like the current page. Number of likes on this page: {0}.\n### Missing: like.button.title.unlike=Click to unlike the current page. Number of likes on this page: {0}.\nlike.likers.empty=Todav\u00eda no le gusta a nadie esta p\u00e1gina.\nlike.likers.number={0} person(as) le gustas esta p\u00e1gina:\nlike.likers.title=\"Me gusta\" en {0}\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Mostrar siempre el bot\u00f3n \"Me gusta\"\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Mostrar el bot\u00f3n incluso si el usuario no tiene derecho de interaccionar con \u00e9l.  \u00dasalo si deseas mostrar siempre el contador de \"Me gusta\".\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Capacidad de la cach\u00e9\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=N\u00famero de informaci\u00f3n de \"Me gusta\" guardada en la cach\u00e9. Ten en cuenta que tienes que reiniciar XWiki para que se activen los cambios de esta opci\u00f3n.</content>\n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"fr\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>fr</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Aimer\nlike.unlike.modal.title=Confirmation de suppression du J'aime\nlike.unlike.modal.body=\u00cates-vous s\u00fbr de vouloir enlever votre J''aime de la page {0} ?\nlike.unlike.modal.closeButton=Fermer\nlike.unlike.modal.unlikeButton=Je n'aime plus la page\nlike.unlike.modal.viewLikersButton=J'aime\nlike.newlike.success=Cette page a \u00e9t\u00e9 aim\u00e9e.\nlike.newlike.error=Erreur en essayant d'aimer une page.\nlike.unlike.success=Cette page n'est plus aim\u00e9e.\nlike.unlike.error=Erreur en essayant de ne plus aimer une page.\nlike.userprofile.menu=Pages Aim\u00e9es\nlike.button.title=Nombre de J''aime sur cette page : {0}\nlike.button.title.like=Cliquez pour aimer cette page. Actuellement {0} \"J''aime\" pour cette page.\nlike.button.title.unlike=Cliquez pour ne plus aimer cette page. Actuellement {0} \"J''aime\" pour cette page.\nlike.likers.empty=Personne n'aime encore cette page.\nlike.likers.number={0} personne(s) aime(nt) cette page :\nlike.likers.title=J''aime sur {0}\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Toujours afficher le bouton J'aime\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Afficher le bouton m\u00eame si l'utilisateur n'a pas les droits pour int\u00e9ragir avec. Utilisez cette option si vous souhaitez toujours afficher le compteur de J'aime.\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Capacit\u00e9 du Cache\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Nombre d'information J'aime \u00e0 conserver dans le cache. Notez que vous devrez red\u00e9marrer XWiki pour que cette option soit prise en compte.</content>\n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"no\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>no</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Liker\nlike.unlike.modal.title=Bekreft \"liker ikke\"\nlike.unlike.modal.body=Er du sikker p\u00e5 at du \u00f8nsker \u00e5 fjerne din \"Liker\" for side {0}?\nlike.unlike.modal.closeButton=Lukk\nlike.unlike.modal.unlikeButton=Slutt \u00e5 like siden\nlike.unlike.modal.viewLikersButton=Liker\nlike.newlike.success=Siden er blitt likt.\nlike.newlike.error=Feil n\u00e5r du pr\u00f8ver \u00e5 like siden.\nlike.unlike.success=Siden er ikke lenger likt.\nlike.unlike.error=Feil under fjerning av liker.\nlike.userprofile.menu=Likte sider\nlike.button.title=Antall liker p\u00e5 denne siden: {0}\nlike.button.title.like=Klikk for \u00e5 like siden. Antall likes p\u00e5 denne siden: {0}.\nlike.button.title.unlike=Klikk for \u00e5 slutte \u00e5 like siden. Antall liker p\u00e5 denne siden: {0}.\nlike.likers.empty=Ingen liker denne siden enn\u00e5.\nlike.likers.number={0} person(er) liker denne siden:\nlike.likers.title=Liker p\u00e5 {0}\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Vis alltid Liker-knappen\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Vis knappen selv om brukeren ikke har rettigheter til \u00e5 bruke den. Bruk hvis du alltid vil vise Liker-telleren.\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Hurtigbufferkapasitet\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Antall Liker-informasjon som er lagret i hurtigbufferen. Merk at du m\u00e5 starte XWiki p\u00e5 nytt for at dette valget skal aktiveres.</content>\n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"ru\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language>ru</language>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>1</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=\u041d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f\nlike.unlike.modal.title=\u041d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f?\nlike.unlike.modal.body=\u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0442\u043c\u0435\u0442\u043a\u0443 \"\u041d\u0440\u0430\u0432\u0438\u0442\u0441\u044f\" \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b {0}?\nlike.unlike.modal.closeButton=\u0417\u0430\u043a\u0440\u044b\u0442\u044c\nlike.unlike.modal.unlikeButton=\u041d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f\nlike.unlike.modal.viewLikersButton=\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0442\u043c\u0435\u0442\u043a\u0438 \"\u041d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f\"\nlike.newlike.success=\u0421\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0430 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u043b\u0430\u0441\u044c.\nlike.newlike.error=\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \"\u041d\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f\" \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435.\n### Missing: like.unlike.success=The page has been unliked.\n### Missing: like.unlike.error=Error when trying to unlike the page.\n### Missing: like.userprofile.menu=Liked Pages\n### Missing: like.button.title=Number of likes on this page: {0}\n### Missing: like.button.title.like=Click to like the current page. Number of likes on this page: {0}.\n### Missing: like.button.title.unlike=Click to unlike the current page. Number of likes on this page: {0}.\n### Missing: like.likers.empty=No one likes this page yet.\n### Missing: like.likers.number={0} person(s) like this page:\n### Missing: like.likers.title=Likes on {0}\n### Missing: XWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Always display Like button\n### Missing: XWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Display the button even if the user doesn't have the rights to interact with it. Use it if you wish to always display the Likes counter.\n### Missing: XWiki.Like.LikeConfigurationClass_cacheCapacity=Cache capacity\n### Missing: XWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Number of Like information kept in cache. Note that you have to restart XWiki for this option change to be taken into account.</content>\n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeTranslations\" locale=\"\">\n  <web>XWiki.Like</web>\n  <name>LikeTranslations</name>\n  <language/>\n  <defaultLanguage>en</defaultLanguage>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>Main.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeTranslations</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>plain/1.0</syntaxId>\n  <hidden>true</hidden>\n  <content>rightsmanager.like=Like\nlike.unlike.modal.title=Unlike confirmation\nlike.unlike.modal.body=Are you sure you wish to remove your Like for page {0}?\nlike.unlike.modal.closeButton=Close\nlike.unlike.modal.unlikeButton=Unlike the page\nlike.unlike.modal.viewLikersButton=Likes\nlike.newlike.success=The page has been liked.\nlike.newlike.error=Error when trying to like the page.\nlike.unlike.success=The page has been unliked.\nlike.unlike.error=Error when trying to unlike the page.\nlike.userprofile.menu=Liked Pages\nlike.button.title=Number of likes on this page: {0}\nlike.button.title.like=Click to like the current page. Number of likes on this page: {0}.\nlike.button.title.unlike=Click to unlike the current page. Number of likes on this page: {0}.\nlike.likers.empty=No one likes this page yet.\nlike.likers.number={0} person(s) like this page:\nlike.likers.title=Likers of {0}\nlike.livetable.column.title=Title\nlike.livetable.column.location=Location\nlike.livetable.column.likes=Likes\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton=Always display Like button\nXWiki.Like.LikeConfigurationClass_alwaysDisplayButton.hint=Display the button even if the user doesn't have the rights to interact with it. Use it if you wish to always display the Likes counter.\nXWiki.Like.LikeConfigurationClass_cacheCapacity=Cache capacity\nXWiki.Like.LikeConfigurationClass_cacheCapacity.hint=Number of Like information kept in cache. Note that you have to restart XWiki for this option change to be taken into account.</content>\n  <object>\n    <name>XWiki.Like.LikeTranslations</name>\n    <number>0</number>\n    <className>XWiki.TranslationDocumentClass</className>\n    <guid>a2b32a08-d4a4-4004-b7d7-cd16324914d8</guid>\n    <class>\n      <name>XWiki.TranslationDocumentClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <scope>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText>forbidden</freeText>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>scope</name>\n        <number>1</number>\n        <prettyName>Scope</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>1</size>\n        <unmodifiable>0</unmodifiable>\n        <values>GLOBAL|WIKI|USER|ON_DEMAND</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </scope>\n    </class>\n    <property>\n      <scope>WIKI</scope>\n    </property>\n  </object>\n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.LikeViewersMenuUIX\" locale=\"\">\n  <web>XWiki.Like</web>\n  <name>LikeViewersMenuUIX</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>LikeViewersMenuUIX</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content/>\n  <object>\n    <name>XWiki.Like.LikeViewersMenuUIX</name>\n    <number>0</number>\n    <className>XWiki.UIExtensionClass</className>\n    <guid>dc089545-5795-45e7-92f0-7cc28d1c74f5</guid>\n    <class>\n      <name>XWiki.UIExtensionClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <async_cached>\n        <defaultValue>0</defaultValue>\n        <disabled>0</disabled>\n        <displayFormType>select</displayFormType>\n        <displayType/>\n        <name>async_cached</name>\n        <number>3</number>\n        <prettyName>Cached</prettyName>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>\n      </async_cached>\n      <async_context>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText>forbidden</freeText>\n        <largeStorage>0</largeStorage>\n        <multiSelect>1</multiSelect>\n        <name>async_context</name>\n        <number>4</number>\n        <prettyName>Context elements</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>5</size>\n        <unmodifiable>0</unmodifiable>\n        <values>doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </async_context>\n      <async_enabled>\n        <defaultValue>0</defaultValue>\n        <disabled>0</disabled>\n        <displayFormType>select</displayFormType>\n        <displayType/>\n        <name>async_enabled</name>\n        <number>2</number>\n        <prettyName>Asynchronous rendering</prettyName>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>\n      </async_enabled>\n      <content>\n        <disabled>0</disabled>\n        <editor>Text</editor>\n        <name>content</name>\n        <number>1</number>\n        <prettyName>Executed Content</prettyName>\n        <rows>25</rows>\n        <size>120</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </content>\n      <extensionPointId>\n        <disabled>0</disabled>\n        <name>extensionPointId</name>\n        <number>5</number>\n        <prettyName>Extension Point ID</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </extensionPointId>\n      <name>\n        <disabled>0</disabled>\n        <name>name</name>\n        <number>6</number>\n        <prettyName>Extension ID</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </name>\n      <parameters>\n        <contenttype>PureText</contenttype>\n        <disabled>0</disabled>\n        <editor>PureText</editor>\n        <name>parameters</name>\n        <number>7</number>\n        <prettyName>Extension Parameters</prettyName>\n        <rows>10</rows>\n        <size>40</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </parameters>\n      <scope>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText>forbidden</freeText>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>scope</name>\n        <number>8</number>\n        <prettyName>Extension Scope</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>1</size>\n        <unmodifiable>0</unmodifiable>\n        <values>wiki=Current Wiki|user=Current User|global=Global</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </scope>\n    </class>\n    <property>\n      <async_cached>1</async_cached>\n    </property>\n    <property>\n      <async_context>\n        <value>doc.reference</value>\n      </async_context>\n    </property>\n    <property>\n      <async_enabled>0</async_enabled>\n    </property>\n    <property>\n      <content>{{velocity}}\n        {{html clean=\"false\"}}\n        #template('menus_macros.vm')\n        #submenuitem($doc.getURL('view','viewer=likers'), $services.localization.render('like.unlike.modal.viewLikersButton'), 'likers', '', 'heart')\n        {{/html}}\n        {{/velocity}}</content>\n    </property>\n    <property>\n      <extensionPointId>org.xwiki.platform.template.menu.viewers</extensionPointId>\n    </property>\n    <property>\n      <name>org.xwiki.like.menu.viewer</name>\n    </property>\n    <property>\n      <parameters>order=120000</parameters>\n    </property>\n    <property>\n      <scope>wiki</scope>\n    </property>\n  </object>\n</xwikidoc>\n", "<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.4\" reference=\"XWiki.Like.UserProfileUIX\" locale=\"\">\n  <web>XWiki.Like</web>\n  <name>UserProfileUIX</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>XWiki.Like.WebHome</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title/>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content>{{velocity}}\n#if ($request.livetable == \"true\")\n  #template('hierarchy_macros.vm')\n  #if(\"$!{request.xpage}\" == 'plain')\n    $response.setContentType('application/json')\n  #end\n  #set ($documentReference = $services.model.resolveDocument($request.user))\n  ##==============================\n  ## Offset = item # at which to start displaying data\n  ##==============================\n  #set($offset = $numbertool.toNumber($request.get('offset')))\n  ## offset starts from 0 in velocity and 1 in javascript\n  #set($offset = $offset - 1)\n  #if($offset &lt; 0)\n    #set($offset = 0)\n  #end\n  ##==================\n  ## Limit = # of items to display\n  ##==================\n  #set($limit = $numbertool.toNumber($request.get('limit')))\n  #set ($likedPages = $services.like.getUserLikes($documentReference, $offset, $limit))\n  #set ($optUserLikes = $services.like.countUserLikes($documentReference))\n  #if ($optUserLikes.isPresent())\n    #set ($totalRows = $optUserLikes.get())\n  #else\n    #set ($totalRows = $likedPages.size())\n  #end\n  ##==========\n  ## Sort direction\n  ##==========\n  #set($order = \"$!request.sort\")\n  #if($order != '')\n    #set($orderDirection = \"$!{request.get('dir').toLowerCase()}\")\n    #if(\"$!orderDirection\" != '' &amp;&amp; \"$!orderDirection\" != 'asc')\n      #set($orderDirection = 'desc')\n    #end\n  #end\n  #set ($pagesRows = [])\n  #foreach($likedPage in $likedPages)\n    #set ($likedDoc = $xwiki.getDocument($likedPage))\n    #set ($optDocumentLikes = $services.like.getLikes($likedPage))\n    #if ($optDocumentLikes.isPresent())\n      #set ($documentLikes = $optDocumentLikes.get())\n    #else\n      #set ($documentLikes = \"N/A\")\n    #end\n    ## code inspired from getdocuments.vm\n    #set ($viewable = $xwiki.hasAccessLevel('view', $xcontext.user, $services.model.serialize($likedPage, \"default\")))\n    #set ($row = {'doc_viewable' : $viewable})\n    #if (!$viewable)\n      #set ($discard = $row.put('doc_fullName', $likedDoc.fullName))\n    #else\n      #set ($translatedDoc = $likedDoc.translatedDocument)\n      #set ($fullname = $services.model.serialize($likedDoc.documentReference, 'default'))\n      #set ($discard = $row.put('doc_name', $likedDoc.documentReference.name))\n      #set ($discard = $row.put('doc_fullName', $fullname))\n      #set ($location = \"#hierarchy($likedDoc.documentReference, {'limit': 5, 'plain': false, 'local': true, 'displayTitle': false})\")\n      #set ($discard = $row.put('doc_location', $location))\n      #set ($discard = $row.put('doc_space', $likedDoc.space))\n      #set ($discard = $row.put('doc_url', $xwiki.getURL($likedDoc)))\n      #set ($discard = $row.put('doc_space_url', $xwiki.getURL($services.model.createDocumentReference($!likedDoc.wiki, $!likedDoc.space, 'WebHome'))))\n      #set ($discard = $row.put('doc_wiki', $likedDoc.wiki))\n      #set ($discard = $row.put('doc_wiki_url', $xwiki.getURL($services.model.resolveDocument('', 'default', $likedDoc.documentReference.extractReference('WIKI')))))\n      #set ($discard = $row.put('doc_author_url', $xwiki.getURL($translatedDoc.author)))\n      #set ($discard = $row.put('doc_date', $xwiki.formatDate($translatedDoc.date)))\n      #set ($discard = $row.put('doc_title', $translatedDoc.plainTitle))\n      #set ($rawTitle = $translatedDoc.title)\n      #if ($rawTitle != $row['doc_title'])\n        #set ($discard = $row.put('doc_title_raw', $rawTitle))\n      #end\n      #set ($discard = $row.put('doc_author', $xwiki.getUserName($translatedDoc.author, false)))\n      #set ($discard = $row.put('doc_creationDate', $xwiki.formatDate($translatedDoc.creationDate)))\n      #set ($discard = $row.put('doc_creator', $xwiki.getUserName($translatedDoc.creator, false)))\n    #end\n    #set ($discard = $row.put('like', $documentLikes))\n    #set ($discard = $pagesRows.add($row))\n  #end\n  #set ($newOffset = $offset + 1)\n  ## ===\n  ## JSON\n  ## ===\n  {\n    \"totalrows\": $totalRows,\n    \"returnedrows\":  $pagesRows.size(),\n    \"offset\": $newOffset,\n    \"reqNo\": $numbertool.toNumber($request.reqNo),\n    \"rows\": $jsontool.serialize($pagesRows)\n  }\n#end\n{{/velocity}}</content>\n  <object>\n    <name>XWiki.Like.UserProfileUIX</name>\n    <number>0</number>\n    <className>XWiki.UIExtensionClass</className>\n    <guid>b79d80e9-7a28-4d56-b5d9-1de5cfa820ff</guid>\n    <class>\n      <name>XWiki.UIExtensionClass</name>\n      <customClass/>\n      <customMapping/>\n      <defaultViewSheet/>\n      <defaultEditSheet/>\n      <defaultWeb/>\n      <nameField/>\n      <validationScript/>\n      <async_cached>\n        <defaultValue>0</defaultValue>\n        <disabled>0</disabled>\n        <displayFormType>select</displayFormType>\n        <displayType/>\n        <name>async_cached</name>\n        <number>3</number>\n        <prettyName>Cached</prettyName>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>\n      </async_cached>\n      <async_context>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText>forbidden</freeText>\n        <largeStorage>0</largeStorage>\n        <multiSelect>1</multiSelect>\n        <name>async_context</name>\n        <number>4</number>\n        <prettyName>Context elements</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator>, </separator>\n        <separators>|, </separators>\n        <size>5</size>\n        <unmodifiable>0</unmodifiable>\n        <values>doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </async_context>\n      <async_enabled>\n        <defaultValue>0</defaultValue>\n        <disabled>0</disabled>\n        <displayFormType>select</displayFormType>\n        <displayType/>\n        <name>async_enabled</name>\n        <number>2</number>\n        <prettyName>Asynchronous rendering</prettyName>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>\n      </async_enabled>\n      <content>\n        <disabled>0</disabled>\n        <editor>Text</editor>\n        <name>content</name>\n        <number>1</number>\n        <prettyName>Executed Content</prettyName>\n        <rows>25</rows>\n        <size>120</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </content>\n      <extensionPointId>\n        <disabled>0</disabled>\n        <name>extensionPointId</name>\n        <number>5</number>\n        <prettyName>Extension Point ID</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </extensionPointId>\n      <name>\n        <disabled>0</disabled>\n        <name>name</name>\n        <number>6</number>\n        <prettyName>Extension ID</prettyName>\n        <size>30</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>\n      </name>\n      <parameters>\n        <contenttype>PureText</contenttype>\n        <disabled>0</disabled>\n        <editor>PureText</editor>\n        <name>parameters</name>\n        <number>7</number>\n        <prettyName>Extension Parameters</prettyName>\n        <rows>10</rows>\n        <size>40</size>\n        <unmodifiable>0</unmodifiable>\n        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>\n      </parameters>\n      <scope>\n        <cache>0</cache>\n        <disabled>0</disabled>\n        <displayType>select</displayType>\n        <freeText>forbidden</freeText>\n        <largeStorage>0</largeStorage>\n        <multiSelect>0</multiSelect>\n        <name>scope</name>\n        <number>8</number>\n        <prettyName>Extension Scope</prettyName>\n        <relationalStorage>0</relationalStorage>\n        <separator> </separator>\n        <separators>|, </separators>\n        <size>1</size>\n        <unmodifiable>0</unmodifiable>\n        <values>wiki=Current Wiki|user=Current User|global=Global</values>\n        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>\n      </scope>\n    </class>\n    <property>\n      <async_cached>0</async_cached>\n    </property>\n    <property>\n      <async_context>\n        <value>doc.reference</value>\n        <value>user</value>\n      </async_context>\n    </property>\n    <property>\n      <async_enabled>0</async_enabled>\n    </property>\n    <property>\n      <content>{{velocity}}\n=$escapetool.xml($services.localization.render(\"like.userprofile.menu\"))=\n#set($columns = [\"doc.title\", \"doc.location\", \"like\"])\n#set ($docTitleDisplayName = $escapetool.xml($services.localization.render('like.livetable.column.title')))\n#set ($docLocationDisplayName = $escapetool.xml($services.localization.render('like.livetable.column.location')))\n#set ($likesDisplayName = $escapetool.xml($services.localization.render('like.livetable.column.likes')))\n#set($columnsProperties = {\n  \"doc.title\" : { \"displayName\": $docTitleDisplayName, \"type\": \"text\", \"size\": 30, \"link\": \"view\", \"sortable\": false, \"filterable\": false },\n  \"doc.location\" : { \"displayName\": $docLocationDisplayName, \"type\": \"text\", \"size\": 30, \"html\": true, \"sortable\": false, \"filterable\": false },\n  \"like\" : { \"displayName\": $likesDisplayName, \"type\" : \"number\", \"sortable\": false, \"filterable\": false }\n})\n\n#set ($currentUser = $services.model.serialize($doc.documentReference, \"default\"))\n#set ($pageToCallReference = $services.model.resolveDocument(\"XWiki.Like.UserProfileUIX\"))\n#set ($pageToCall = $xwiki.getDocument($pageToCallReference))\n#set ($queryParams = {\n  \"user\": $currentUser,\n  \"livetable\": \"true\",\n  \"xpage\": \"plain\",\n  \"outputSyntax\": \"plain\"\n})\n#set($options = {\n  'url': $pageToCall.getURL('get', $escapetool.url($queryParams))\n})\n#livetable(\"likedPages\" $columns $columnsProperties $options)\n{{/velocity}}</content>\n    </property>\n    <property>\n      <extensionPointId>org.xwiki.plaftorm.user.profile.menu</extensionPointId>\n    </property>\n    <property>\n      <name>org.xwiki.platform.like.userProfileMenu</name>\n    </property>\n    <property>\n      <parameters>icon=heart\nname=$services.localization.render('like.userprofile.menu')\nisActive=#if($services.like.isAuthorized($services.wiki.currentWikiReference))true#{else}false#end\npriority=1000</parameters>\n    </property>\n    <property>\n      <scope>wiki</scope>\n    </property>\n  </object>\n</xwikidoc>\n"], "filenames": ["xwiki-platform-core/pom.xml", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-api/src/main/java/org/xwiki/like/LikeManager.java", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-api/src/main/java/org/xwiki/like/internal/DefaultLikeManager.java", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-api/src/main/java/org/xwiki/like/script/LikeScriptService.java", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-api/src/main/resources/templates/likers.vm", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-api/src/test/java/org/xwiki/like/internal/DefaultLikeManagerTest.java", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-api/src/test/java/org/xwiki/like/script/LikeScriptServiceTest.java", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-ui/src/main/resources/XWiki/Like/LikeTranslations.de.xml", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-ui/src/main/resources/XWiki/Like/LikeTranslations.es.xml", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-ui/src/main/resources/XWiki/Like/LikeTranslations.fr.xml", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-ui/src/main/resources/XWiki/Like/LikeTranslations.no.xml", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-ui/src/main/resources/XWiki/Like/LikeTranslations.ru.xml", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-ui/src/main/resources/XWiki/Like/LikeTranslations.xml", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-ui/src/main/resources/XWiki/Like/LikeViewersMenuUIX.xml", "xwiki-platform-core/xwiki-platform-like/xwiki-platform-like-ui/src/main/resources/XWiki/Like/UserProfileUIX.xml"], "buggy_code_start_loc": [497, 61, 37, 217, 20, 310, 22, 60, 60, 60, 60, 60, 55, 186, 39], "buggy_code_end_loc": [513, 98, 175, 217, 36, 310, 286, 61, 61, 61, 61, 61, 56, 187, 172], "fixing_code_start_loc": [497, 62, 36, 218, 20, 311, 23, 59, 59, 59, 59, 59, 55, 186, 39], "fixing_code_end_loc": [519, 112, 180, 238, 113, 321, 307, 59, 59, 59, 59, 59, 59, 187, 281], "type": "CWE-94", "message": "XWiki Platform is a generic wiki platform. Starting in version 12.9-rc-1 and prior to versions 14.4.8, 14.10.6, and 15.1, any logged in user can add dangerous content in their first name field and see it executed with programming rights. Leading to rights escalation. The vulnerability has been fixed on XWiki 14.4.8, 14.10.6, and 15.1. As a workaround, one may apply the patch manually.", "other": {"cve": {"id": "CVE-2023-35152", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-23T17:15:09.533", "lastModified": "2023-06-30T07:12:03.940", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform. Starting in version 12.9-rc-1 and prior to versions 14.4.8, 14.10.6, and 15.1, any logged in user can add dangerous content in their first name field and see it executed with programming rights. Leading to rights escalation. The vulnerability has been fixed on XWiki 14.4.8, 14.10.6, and 15.1. As a workaround, one may apply the patch manually."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-95"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.9", "versionEndExcluding": "14.4.8", "matchCriteriaId": "DDEC8883-7BFC-4D43-8E3D-21F711F3B919"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.10", "versionEndExcluding": "14.10.6", "matchCriteriaId": "F74638E1-2D3D-4FFD-921E-09C383F880DF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:12.9:rc1:*:*:*:*:*:*", "matchCriteriaId": "1C0FA972-239C-4B5A-9A29-A02FF66CA80F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "8F9D9551-B148-44B6-A5B3-889E6E7B72E8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "88E41345-F81E-401A-BD67-66AF4B3925D4"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/0993a7ab3c102f9ac37ffe361a83a3dc302c0e45#diff-0b51114cb27f7a5c599cf40c59d658eae6ddc5c0836532c3b35e163f40a4854fR39", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/xwiki/xwiki-platform/commit/6ce2d04a5779e07f6d3ed3f37d4761049b4fc3ac#diff-ef7f8b911bb8e584fda22aac5876a329add35ca0d1d32e0fdb62a439b78cfa49", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-rf8j-q39g-7xfm", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-19900", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20611", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/0993a7ab3c102f9ac37ffe361a83a3dc302c0e45#diff-0b51114cb27f7a5c599cf40c59d658eae6ddc5c0836532c3b35e163f40a4854fR39"}}