{"buggy_code": ["package migrations\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/answerdev/answer/internal/entity\"\n\t\"golang.org/x/crypto/bcrypt\"\n\t\"xorm.io/xorm\"\n)\n\ntype Mentor struct {\n\tctx      context.Context\n\tengine   *xorm.Engine\n\tuserData *InitNeedUserInputData\n\terr      error\n\tDone     bool\n}\n\nfunc NewMentor(ctx context.Context, engine *xorm.Engine, data *InitNeedUserInputData) *Mentor {\n\treturn &Mentor{ctx: ctx, engine: engine, userData: data}\n}\n\ntype InitNeedUserInputData struct {\n\tLanguage      string\n\tSiteName      string\n\tSiteURL       string\n\tContactEmail  string\n\tAdminName     string\n\tAdminPassword string\n\tAdminEmail    string\n}\n\nfunc (m *Mentor) InitDB() error {\n\tm.do(\"check table exist\", m.checkTableExist)\n\tm.do(\"sync table\", m.syncTable)\n\tm.do(\"init version table\", m.initVersionTable)\n\tm.do(\"init admin user\", m.initAdminUser)\n\tm.do(\"init config\", m.initConfig)\n\tm.do(\"init role\", m.initRole)\n\tm.do(\"init power\", m.initPower)\n\tm.do(\"init role power rel\", m.initRolePowerRel)\n\tm.do(\"init admin user role rel\", m.initAdminUserRoleRel)\n\tm.do(\"init site info interface\", m.initSiteInfoInterface)\n\tm.do(\"init site info general config\", m.initSiteInfoGeneralData)\n\tm.do(\"init site info login config\", m.initSiteInfoLoginConfig)\n\tm.do(\"init site info theme config\", m.initSiteInfoThemeConfig)\n\tm.do(\"init site info seo config\", m.initSiteInfoSEOConfig)\n\tm.do(\"init site info user config\", m.initSiteInfoUsersConfig)\n\treturn m.err\n}\n\nfunc (m *Mentor) do(taskName string, fn func()) {\n\tif m.err != nil || m.Done {\n\t\treturn\n\t}\n\tfn()\n\tif m.err != nil {\n\t\tm.err = fmt.Errorf(\"%s failed: %s\", taskName, m.err)\n\t}\n}\n\nfunc (m *Mentor) checkTableExist() {\n\tm.Done, m.err = m.engine.Context(m.ctx).IsTableExist(&entity.Version{})\n\tif m.Done {\n\t\tfmt.Println(\"[database] already exists\")\n\t}\n}\n\nfunc (m *Mentor) syncTable() {\n\tm.err = m.engine.Context(m.ctx).Sync(tables...)\n}\n\nfunc (m *Mentor) initVersionTable() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.Version{ID: 1, VersionNumber: ExpectedVersion()})\n}\n\nfunc (m *Mentor) initAdminUser() {\n\tgenerateFromPassword, _ := bcrypt.GenerateFromPassword([]byte(m.userData.AdminPassword), bcrypt.DefaultCost)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.User{\n\t\tID:           \"1\",\n\t\tUsername:     m.userData.AdminName,\n\t\tPass:         string(generateFromPassword),\n\t\tEMail:        m.userData.AdminEmail,\n\t\tMailStatus:   1,\n\t\tNoticeStatus: 1,\n\t\tStatus:       1,\n\t\tRank:         1,\n\t\tDisplayName:  m.userData.AdminName,\n\t})\n}\n\nfunc (m *Mentor) initConfig() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(defaultConfigTable)\n}\n\nfunc (m *Mentor) initRole() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(roles)\n}\n\nfunc (m *Mentor) initPower() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(powers)\n}\n\nfunc (m *Mentor) initRolePowerRel() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(rolePowerRels)\n}\n\nfunc (m *Mentor) initAdminUserRoleRel() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(adminUserRoleRel)\n}\n\nfunc (m *Mentor) initSiteInfoInterface() {\n\tinterfaceData := map[string]string{\n\t\t\"language\":  m.userData.Language,\n\t\t\"time_zone\": \"UTC\",\n\t}\n\tinterfaceDataBytes, _ := json.Marshal(interfaceData)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"interface\",\n\t\tContent: string(interfaceDataBytes),\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoGeneralData() {\n\tgeneralData := map[string]string{\n\t\t\"name\":          m.userData.SiteName,\n\t\t\"site_url\":      m.userData.SiteURL,\n\t\t\"contact_email\": m.userData.ContactEmail,\n\t}\n\tgeneralDataBytes, _ := json.Marshal(generalData)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"general\",\n\t\tContent: string(generalDataBytes),\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoLoginConfig() {\n\tloginConfig := map[string]bool{\n\t\t\"allow_new_registrations\":   true,\n\t\t\"allow_email_registrations\": true,\n\t\t\"login_required\":            false,\n\t}\n\tloginConfigDataBytes, _ := json.Marshal(loginConfig)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"login\",\n\t\tContent: string(loginConfigDataBytes),\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoThemeConfig() {\n\tthemeConfig := `{\"theme\":\"default\",\"theme_config\":{\"default\":{\"navbar_style\":\"colored\",\"primary_color\":\"#0033ff\"}}}`\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"theme\",\n\t\tContent: themeConfig,\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoSEOConfig() {\n\tseoData := map[string]interface{}{\n\t\t\"permalink\": 1,\n\t\t\"robots\":    defaultSEORobotTxt + m.userData.SiteURL + \"/sitemap.xml\",\n\t}\n\tseoDataBytes, _ := json.Marshal(seoData)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"seo\",\n\t\tContent: string(seoDataBytes),\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoUsersConfig() {\n\tusersData := map[string]any{\n\t\t\"default_avatar\":            \"gravatar\",\n\t\t\"gravatar_base_url\":         \"https://www.gravatar.com/avatar/\",\n\t\t\"allow_update_display_name\": true,\n\t\t\"allow_update_username\":     true,\n\t\t\"allow_update_avatar\":       true,\n\t\t\"allow_update_bio\":          true,\n\t\t\"allow_update_website\":      true,\n\t\t\"allow_update_location\":     true,\n\t}\n\tusersDataBytes, _ := json.Marshal(usersData)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"users\",\n\t\tContent: string(usersDataBytes),\n\t\tStatus:  1,\n\t})\n}\n", "package migrations\n\nimport (\n\t\"github.com/answerdev/answer/internal/entity\"\n\t\"github.com/answerdev/answer/internal/service/permission\"\n)\n\nconst (\n\tdefaultSEORobotTxt = `User-agent: *\nDisallow: /admin\nDisallow: /search\nDisallow: /install\nDisallow: /review\nDisallow: /users/login\nDisallow: /users/register\nDisallow: /users/account-recovery\nDisallow: /users/oauth/*\nDisallow: /users/*/*\nDisallow: /answer/api\nDisallow: /*?code*\n\nSitemap: `\n)\n\nvar (\n\ttables = []interface{}{\n\t\t&entity.Activity{},\n\t\t&entity.Answer{},\n\t\t&entity.Collection{},\n\t\t&entity.CollectionGroup{},\n\t\t&entity.Comment{},\n\t\t&entity.Config{},\n\t\t&entity.Meta{},\n\t\t&entity.Notification{},\n\t\t&entity.Question{},\n\t\t&entity.Report{},\n\t\t&entity.Revision{},\n\t\t&entity.SiteInfo{},\n\t\t&entity.Tag{},\n\t\t&entity.TagRel{},\n\t\t&entity.Uniqid{},\n\t\t&entity.User{},\n\t\t&entity.Version{},\n\t\t&entity.Role{},\n\t\t&entity.RolePowerRel{},\n\t\t&entity.Power{},\n\t\t&entity.UserRoleRel{},\n\t\t&entity.PluginConfig{},\n\t\t&entity.UserExternalLogin{},\n\t}\n\n\troles = []*entity.Role{\n\t\t{ID: 1, Name: \"User\", Description: \"Default with no special access.\"},\n\t\t{ID: 2, Name: \"Admin\", Description: \"Have the full power to access the site.\"},\n\t\t{ID: 3, Name: \"Moderator\", Description: \"Has access to all posts except admin settings.\"},\n\t}\n\n\tpowers = []*entity.Power{\n\t\t{ID: 1, Name: \"admin access\", PowerType: permission.AdminAccess, Description: \"admin access\"},\n\t\t{ID: 2, Name: \"question add\", PowerType: permission.QuestionAdd, Description: \"question add\"},\n\t\t{ID: 3, Name: \"question edit\", PowerType: permission.QuestionEdit, Description: \"question edit\"},\n\t\t{ID: 4, Name: \"question edit without review\", PowerType: permission.QuestionEditWithoutReview, Description: \"question edit without review\"},\n\t\t{ID: 5, Name: \"question delete\", PowerType: permission.QuestionDelete, Description: \"question delete\"},\n\t\t{ID: 6, Name: \"question close\", PowerType: permission.QuestionClose, Description: \"question close\"},\n\t\t{ID: 7, Name: \"question reopen\", PowerType: permission.QuestionReopen, Description: \"question reopen\"},\n\t\t{ID: 8, Name: \"question vote up\", PowerType: permission.QuestionVoteUp, Description: \"question vote up\"},\n\t\t{ID: 9, Name: \"question vote down\", PowerType: permission.QuestionVoteDown, Description: \"question vote down\"},\n\t\t{ID: 10, Name: \"answer add\", PowerType: permission.AnswerAdd, Description: \"answer add\"},\n\t\t{ID: 11, Name: \"answer edit\", PowerType: permission.AnswerEdit, Description: \"answer edit\"},\n\t\t{ID: 12, Name: \"answer edit without review\", PowerType: permission.AnswerEditWithoutReview, Description: \"answer edit without review\"},\n\t\t{ID: 13, Name: \"answer delete\", PowerType: permission.AnswerDelete, Description: \"answer delete\"},\n\t\t{ID: 14, Name: \"answer accept\", PowerType: permission.AnswerAccept, Description: \"answer accept\"},\n\t\t{ID: 15, Name: \"answer vote up\", PowerType: permission.AnswerVoteUp, Description: \"answer vote up\"},\n\t\t{ID: 16, Name: \"answer vote down\", PowerType: permission.AnswerVoteDown, Description: \"answer vote down\"},\n\t\t{ID: 17, Name: \"comment add\", PowerType: permission.CommentAdd, Description: \"comment add\"},\n\t\t{ID: 18, Name: \"comment edit\", PowerType: permission.CommentEdit, Description: \"comment edit\"},\n\t\t{ID: 19, Name: \"comment delete\", PowerType: permission.CommentDelete, Description: \"comment delete\"},\n\t\t{ID: 20, Name: \"comment vote up\", PowerType: permission.CommentVoteUp, Description: \"comment vote up\"},\n\t\t{ID: 21, Name: \"comment vote down\", PowerType: permission.CommentVoteDown, Description: \"comment vote down\"},\n\t\t{ID: 22, Name: \"report add\", PowerType: permission.ReportAdd, Description: \"report add\"},\n\t\t{ID: 23, Name: \"tag add\", PowerType: permission.TagAdd, Description: \"tag add\"},\n\t\t{ID: 24, Name: \"tag edit\", PowerType: permission.TagEdit, Description: \"tag edit\"},\n\t\t{ID: 25, Name: \"tag edit without review\", PowerType: permission.TagEditWithoutReview, Description: \"tag edit without review\"},\n\t\t{ID: 26, Name: \"tag edit slug name\", PowerType: permission.TagEditSlugName, Description: \"tag edit slug name\"},\n\t\t{ID: 27, Name: \"tag delete\", PowerType: permission.TagDelete, Description: \"tag delete\"},\n\t\t{ID: 28, Name: \"tag synonym\", PowerType: permission.TagSynonym, Description: \"tag synonym\"},\n\t\t{ID: 29, Name: \"link url limit\", PowerType: permission.LinkUrlLimit, Description: \"link url limit\"},\n\t\t{ID: 30, Name: \"vote detail\", PowerType: permission.VoteDetail, Description: \"vote detail\"},\n\t\t{ID: 31, Name: \"answer audit\", PowerType: permission.AnswerAudit, Description: \"answer audit\"},\n\t\t{ID: 32, Name: \"question audit\", PowerType: permission.QuestionAudit, Description: \"question audit\"},\n\t\t{ID: 33, Name: \"tag audit\", PowerType: permission.TagAudit, Description: \"tag audit\"},\n\t\t{ID: 34, Name: \"question pin\", PowerType: permission.QuestionPin, Description: \"top the question\"},\n\t\t{ID: 35, Name: \"question hide\", PowerType: permission.QuestionHide, Description: \"hide  the question\"},\n\t\t{ID: 36, Name: \"question unpin\", PowerType: permission.QuestionUnPin, Description: \"untop the question\"},\n\t\t{ID: 37, Name: \"question show\", PowerType: permission.QuestionShow, Description: \"show the question\"},\n\t\t{ID: 38, Name: \"invite someone to answer\", PowerType: permission.AnswerInviteSomeoneToAnswer, Description: \"invite someone to answer\"},\n\t}\n\n\trolePowerRels = []*entity.RolePowerRel{\n\t\t{RoleID: 2, PowerType: permission.AdminAccess},\n\t\t{RoleID: 2, PowerType: permission.QuestionAdd},\n\t\t{RoleID: 2, PowerType: permission.QuestionEdit},\n\t\t{RoleID: 2, PowerType: permission.QuestionEditWithoutReview},\n\t\t{RoleID: 2, PowerType: permission.QuestionDelete},\n\t\t{RoleID: 2, PowerType: permission.QuestionClose},\n\t\t{RoleID: 2, PowerType: permission.QuestionReopen},\n\t\t{RoleID: 2, PowerType: permission.QuestionVoteUp},\n\t\t{RoleID: 2, PowerType: permission.QuestionVoteDown},\n\t\t{RoleID: 2, PowerType: permission.AnswerAdd},\n\t\t{RoleID: 2, PowerType: permission.AnswerEdit},\n\t\t{RoleID: 2, PowerType: permission.AnswerEditWithoutReview},\n\t\t{RoleID: 2, PowerType: permission.AnswerDelete},\n\t\t{RoleID: 2, PowerType: permission.AnswerAccept},\n\t\t{RoleID: 2, PowerType: permission.AnswerVoteUp},\n\t\t{RoleID: 2, PowerType: permission.AnswerVoteDown},\n\t\t{RoleID: 2, PowerType: permission.CommentAdd},\n\t\t{RoleID: 2, PowerType: permission.CommentEdit},\n\t\t{RoleID: 2, PowerType: permission.CommentDelete},\n\t\t{RoleID: 2, PowerType: permission.CommentVoteUp},\n\t\t{RoleID: 2, PowerType: permission.CommentVoteDown},\n\t\t{RoleID: 2, PowerType: permission.ReportAdd},\n\t\t{RoleID: 2, PowerType: permission.TagAdd},\n\t\t{RoleID: 2, PowerType: permission.TagEdit},\n\t\t{RoleID: 2, PowerType: permission.TagEditSlugName},\n\t\t{RoleID: 2, PowerType: permission.TagEditWithoutReview},\n\t\t{RoleID: 2, PowerType: permission.TagDelete},\n\t\t{RoleID: 2, PowerType: permission.TagSynonym},\n\t\t{RoleID: 2, PowerType: permission.LinkUrlLimit},\n\t\t{RoleID: 2, PowerType: permission.VoteDetail},\n\t\t{RoleID: 2, PowerType: permission.AnswerAudit},\n\t\t{RoleID: 2, PowerType: permission.QuestionAudit},\n\t\t{RoleID: 2, PowerType: permission.TagAudit},\n\t\t{RoleID: 2, PowerType: permission.TagUseReservedTag},\n\t\t{RoleID: 2, PowerType: permission.QuestionPin},\n\t\t{RoleID: 2, PowerType: permission.QuestionHide},\n\t\t{RoleID: 2, PowerType: permission.QuestionUnPin},\n\t\t{RoleID: 2, PowerType: permission.QuestionShow},\n\t\t{RoleID: 2, PowerType: permission.AnswerInviteSomeoneToAnswer},\n\n\t\t{RoleID: 3, PowerType: permission.QuestionAdd},\n\t\t{RoleID: 3, PowerType: permission.QuestionEdit},\n\t\t{RoleID: 3, PowerType: permission.QuestionEditWithoutReview},\n\t\t{RoleID: 3, PowerType: permission.QuestionDelete},\n\t\t{RoleID: 3, PowerType: permission.QuestionClose},\n\t\t{RoleID: 3, PowerType: permission.QuestionReopen},\n\t\t{RoleID: 3, PowerType: permission.QuestionVoteUp},\n\t\t{RoleID: 3, PowerType: permission.QuestionVoteDown},\n\t\t{RoleID: 3, PowerType: permission.AnswerAdd},\n\t\t{RoleID: 3, PowerType: permission.AnswerEdit},\n\t\t{RoleID: 3, PowerType: permission.AnswerEditWithoutReview},\n\t\t{RoleID: 3, PowerType: permission.AnswerDelete},\n\t\t{RoleID: 3, PowerType: permission.AnswerAccept},\n\t\t{RoleID: 3, PowerType: permission.AnswerVoteUp},\n\t\t{RoleID: 3, PowerType: permission.AnswerVoteDown},\n\t\t{RoleID: 3, PowerType: permission.CommentAdd},\n\t\t{RoleID: 3, PowerType: permission.CommentEdit},\n\t\t{RoleID: 3, PowerType: permission.CommentDelete},\n\t\t{RoleID: 3, PowerType: permission.CommentVoteUp},\n\t\t{RoleID: 3, PowerType: permission.CommentVoteDown},\n\t\t{RoleID: 3, PowerType: permission.ReportAdd},\n\t\t{RoleID: 3, PowerType: permission.TagAdd},\n\t\t{RoleID: 3, PowerType: permission.TagEdit},\n\t\t{RoleID: 3, PowerType: permission.TagEditSlugName},\n\t\t{RoleID: 3, PowerType: permission.TagEditWithoutReview},\n\t\t{RoleID: 3, PowerType: permission.TagDelete},\n\t\t{RoleID: 3, PowerType: permission.TagSynonym},\n\t\t{RoleID: 3, PowerType: permission.LinkUrlLimit},\n\t\t{RoleID: 3, PowerType: permission.VoteDetail},\n\t\t{RoleID: 3, PowerType: permission.AnswerAudit},\n\t\t{RoleID: 3, PowerType: permission.QuestionAudit},\n\t\t{RoleID: 3, PowerType: permission.TagAudit},\n\t\t{RoleID: 3, PowerType: permission.TagUseReservedTag},\n\t\t{RoleID: 3, PowerType: permission.QuestionPin},\n\t\t{RoleID: 3, PowerType: permission.QuestionHide},\n\t\t{RoleID: 3, PowerType: permission.QuestionUnPin},\n\t\t{RoleID: 3, PowerType: permission.QuestionShow},\n\t\t{RoleID: 3, PowerType: permission.AnswerInviteSomeoneToAnswer},\n\t}\n\n\tadminUserRoleRel = &entity.UserRoleRel{\n\t\tUserID: \"1\",\n\t\tRoleID: 2,\n\t}\n\n\tdefaultConfigTable = []*entity.Config{\n\t\t{ID: 1, Key: \"answer.accepted\", Value: `15`},\n\t\t{ID: 2, Key: \"answer.voted_up\", Value: `10`},\n\t\t{ID: 3, Key: \"question.voted_up\", Value: `10`},\n\t\t{ID: 4, Key: \"tag.edit_accepted\", Value: `2`},\n\t\t{ID: 5, Key: \"answer.accept\", Value: `2`},\n\t\t{ID: 6, Key: \"answer.voted_down_cancel\", Value: `2`},\n\t\t{ID: 7, Key: \"question.voted_down_cancel\", Value: `2`},\n\t\t{ID: 8, Key: \"answer.vote_down_cancel\", Value: `1`},\n\t\t{ID: 9, Key: \"question.vote_down_cancel\", Value: `1`},\n\t\t{ID: 10, Key: \"user.activated\", Value: `1`},\n\t\t{ID: 11, Key: \"edit.accepted\", Value: `2`},\n\t\t{ID: 12, Key: \"answer.vote_down\", Value: `-1`},\n\t\t{ID: 13, Key: \"question.voted_down\", Value: `-2`},\n\t\t{ID: 14, Key: \"answer.voted_down\", Value: `-2`},\n\t\t{ID: 15, Key: \"answer.accept_cancel\", Value: `-2`},\n\t\t{ID: 16, Key: \"answer.deleted\", Value: `-5`},\n\t\t{ID: 17, Key: \"question.voted_up_cancel\", Value: `-10`},\n\t\t{ID: 18, Key: \"answer.voted_up_cancel\", Value: `-10`},\n\t\t{ID: 19, Key: \"answer.accepted_cancel\", Value: `-15`},\n\t\t{ID: 20, Key: \"object.reported\", Value: `-100`},\n\t\t{ID: 21, Key: \"edit.rejected\", Value: `-2`},\n\t\t{ID: 22, Key: \"daily_rank_limit\", Value: `200`},\n\t\t{ID: 23, Key: \"daily_rank_limit.exclude\", Value: `[\"answer.accepted\"]`},\n\t\t{ID: 24, Key: \"user.follow\", Value: `0`},\n\t\t{ID: 25, Key: \"comment.vote_up\", Value: `0`},\n\t\t{ID: 26, Key: \"comment.vote_up_cancel\", Value: `0`},\n\t\t{ID: 27, Key: \"question.vote_down\", Value: `0`},\n\t\t{ID: 28, Key: \"question.vote_up\", Value: `0`},\n\t\t{ID: 29, Key: \"question.vote_up_cancel\", Value: `0`},\n\t\t{ID: 30, Key: \"answer.vote_up\", Value: `0`},\n\t\t{ID: 31, Key: \"answer.vote_up_cancel\", Value: `0`},\n\t\t{ID: 32, Key: \"question.follow\", Value: `0`},\n\t\t{ID: 33, Key: \"email.config\", Value: `{\"from_name\":\"\",\"from_email\":\"\",\"smtp_host\":\"\",\"smtp_port\":465,\"smtp_password\":\"\",\"smtp_username\":\"\",\"smtp_authentication\":true,\"encryption\":\"\",\"register_title\":\"[{{.SiteName}}] Confirm your new account\",\"register_body\":\"Welcome to {{.SiteName}}<br><br>\\n\\nClick the following link to confirm and activate your new account:<br>\\n<a href='{{.RegisterUrl}}' target='_blank'>{{.RegisterUrl}}</a><br><br>\\n\\nIf the above link is not clickable, try copying and pasting it into the address bar of your web browser.\\n\",\"pass_reset_title\":\"[{{.SiteName }}] Password reset\",\"pass_reset_body\":\"Somebody asked to reset your password on [{{.SiteName}}].<br><br>\\n\\nIf it was not you, you can safely ignore this email.<br><br>\\n\\nClick the following link to choose a new password:<br>\\n<a href='{{.PassResetUrl}}' target='_blank'>{{.PassResetUrl}}</a>\\n\",\"change_title\":\"[{{.SiteName}}] Confirm your new email address\",\"change_body\":\"Confirm your new email address for {{.SiteName}}  by clicking on the following link:<br><br>\\n\\n<a href='{{.ChangeEmailUrl}}' target='_blank'>{{.ChangeEmailUrl}}</a><br><br>\\n\\nIf you did not request this change, please ignore this email.\\n\",\"test_title\":\"[{{.SiteName}}] Test Email\",\"test_body\":\"This is a test email.\",\"new_answer_title\":\"[{{.SiteName}}] {{.DisplayName}} answered your question\",\"new_answer_body\":\"<strong><a href='{{.AnswerUrl}}'>{{.QuestionTitle}}</a></strong><br><br>\\n\\n<small>{{.DisplayName}}:</small><br>\\n<blockquote>{{.AnswerSummary}}</blockquote><br>\\n<a href='{{.AnswerUrl}}'>View it on {{.SiteName}}</a><br><br>\\n\\n<small>You are receiving this because you authored the thread. <a href='{{.UnsubscribeUrl}}'>Unsubscribe</a></small>\",\"new_comment_title\":\"[{{.SiteName}}] {{.DisplayName}} commented on your post\",\"new_comment_body\":\"<strong><a href='{{.CommentUrl}}'>{{.QuestionTitle}}</a></strong><br><br>\\n\\n<small>{{.DisplayName}}:</small><br>\\n<blockquote>{{.CommentSummary}}</blockquote><br>\\n<a href='{{.CommentUrl}}'>View it on {{.SiteName}}</a><br><br>\\n\\n<small>You are receiving this because you authored the thread. <a href='{{.UnsubscribeUrl}}'>Unsubscribe</a></small>\"}`},\n\t\t{ID: 35, Key: \"tag.follow\", Value: `0`},\n\t\t{ID: 36, Key: \"rank.question.add\", Value: `1`},\n\t\t{ID: 37, Key: \"rank.question.edit\", Value: `200`},\n\t\t{ID: 38, Key: \"rank.question.delete\", Value: `-1`},\n\t\t{ID: 39, Key: \"rank.question.vote_up\", Value: `15`},\n\t\t{ID: 40, Key: \"rank.question.vote_down\", Value: `125`},\n\t\t{ID: 41, Key: \"rank.answer.add\", Value: `1`},\n\t\t{ID: 42, Key: \"rank.answer.edit\", Value: `200`},\n\t\t{ID: 43, Key: \"rank.answer.delete\", Value: `-1`},\n\t\t{ID: 44, Key: \"rank.answer.accept\", Value: `-1`},\n\t\t{ID: 45, Key: \"rank.answer.vote_up\", Value: `15`},\n\t\t{ID: 46, Key: \"rank.answer.vote_down\", Value: `125`},\n\t\t{ID: 47, Key: \"rank.comment.add\", Value: `1`},\n\t\t{ID: 48, Key: \"rank.comment.edit\", Value: `-1`},\n\t\t{ID: 49, Key: \"rank.comment.delete\", Value: `-1`},\n\t\t{ID: 50, Key: \"rank.report.add\", Value: `1`},\n\t\t{ID: 51, Key: \"rank.tag.add\", Value: `1`},\n\t\t{ID: 52, Key: \"rank.tag.edit\", Value: `100`},\n\t\t{ID: 53, Key: \"rank.tag.delete\", Value: `-1`},\n\t\t{ID: 54, Key: \"rank.tag.synonym\", Value: `20000`},\n\t\t{ID: 55, Key: \"rank.link.url_limit\", Value: `10`},\n\t\t{ID: 56, Key: \"rank.vote.detail\", Value: `0`},\n\t\t{ID: 57, Key: \"reason.spam\", Value: `{\"name\":\"spam\",\"description\":\"This post is an advertisement, or vandalism. It is not useful or relevant to the current topic.\"}`},\n\t\t{ID: 58, Key: \"reason.rude_or_abusive\", Value: `{\"name\":\"rude or abusive\",\"description\":\"A reasonable person would find this content inappropriate for respectful discourse.\"}`},\n\t\t{ID: 59, Key: \"reason.something\", Value: `{\"name\":\"something else\",\"description\":\"This post requires staff attention for another reason not listed above.\",\"content_type\":\"textarea\"}`},\n\t\t{ID: 60, Key: \"reason.a_duplicate\", Value: `{\"name\":\"a duplicate\",\"description\":\"This question has been asked before and already has an answer.\",\"content_type\":\"text\"}`},\n\t\t{ID: 61, Key: \"reason.not_a_answer\", Value: `{\"name\":\"not a answer\",\"description\":\"This was posted as an answer, but it does not attempt to answer the question. It should possibly be an edit, a comment, another question, or deleted altogether.\",\"content_type\":\"\"}`},\n\t\t{ID: 62, Key: \"reason.no_longer_needed\", Value: `{\"name\":\"no longer needed\",\"description\":\"This comment is outdated, conversational or not relevant to this post.\"}`},\n\t\t{ID: 63, Key: \"reason.community_specific\", Value: `{\"name\":\"a community-specific reason\",\"description\":\"This question doesn\u2019t meet a community guideline.\"}`},\n\t\t{ID: 64, Key: \"reason.not_clarity\", Value: `{\"name\":\"needs details or clarity\",\"description\":\"This question currently includes multiple questions in one. It should focus on one problem only.\",\"content_type\":\"text\"}`},\n\t\t{ID: 65, Key: \"reason.normal\", Value: `{\"name\":\"normal\",\"description\":\"A normal post available to everyone.\"}`},\n\t\t{ID: 66, Key: \"reason.normal.user\", Value: `{\"name\":\"normal\",\"description\":\"A normal user can ask and answer questions.\"}`},\n\t\t{ID: 67, Key: \"reason.closed\", Value: `{\"name\":\"closed\",\"description\":\"A closed question can\u2019t answer, but still can edit, vote and comment.\"}`},\n\t\t{ID: 68, Key: \"reason.deleted\", Value: `{\"name\":\"deleted\",\"description\":\"All reputation gained and lost will be restored.\"}`},\n\t\t{ID: 69, Key: \"reason.deleted.user\", Value: `{\"name\":\"deleted\",\"description\":\"Delete profile, authentication associations.\"}`},\n\t\t{ID: 70, Key: \"reason.suspended\", Value: `{\"name\":\"suspended\",\"description\":\"A suspended user can\u2019t log in.\"}`},\n\t\t{ID: 71, Key: \"reason.inactive\", Value: `{\"name\":\"inactive\",\"description\":\"An inactive user must re-validate their email.\"}`},\n\t\t{ID: 72, Key: \"reason.looks_ok\", Value: `{\"name\":\"looks ok\",\"description\":\"This post is good as-is and not low quality.\"}`},\n\t\t{ID: 73, Key: \"reason.needs_edit\", Value: `{\"name\":\"needs edit, and I did it\",\"description\":\"Improve and correct problems with this post yourself.\"}`},\n\t\t{ID: 74, Key: \"reason.needs_close\", Value: `{\"name\":\"needs close\",\"description\":\"A closed question can\u2019t answer, but still can edit, vote and comment.\"}`},\n\t\t{ID: 75, Key: \"reason.needs_delete\", Value: `{\"name\":\"needs delete\",\"description\":\"All reputation gained and lost will be restored.\"}`},\n\t\t{ID: 76, Key: \"question.flag.reasons\", Value: `[\"reason.spam\",\"reason.rude_or_abusive\",\"reason.something\",\"reason.a_duplicate\"]`},\n\t\t{ID: 77, Key: \"answer.flag.reasons\", Value: `[\"reason.spam\",\"reason.rude_or_abusive\",\"reason.something\",\"reason.not_a_answer\"]`},\n\t\t{ID: 78, Key: \"comment.flag.reasons\", Value: `[\"reason.spam\",\"reason.rude_or_abusive\",\"reason.something\",\"reason.no_longer_needed\"]`},\n\t\t{ID: 79, Key: \"question.close.reasons\", Value: `[\"reason.a_duplicate\",\"reason.community_specific\",\"reason.not_clarity\",\"reason.something\"]`},\n\t\t{ID: 80, Key: \"question.status.reasons\", Value: `[\"reason.normal\",\"reason.closed\",\"reason.deleted\"]`},\n\t\t{ID: 81, Key: \"answer.status.reasons\", Value: `[\"reason.normal\",\"reason.deleted\"]`},\n\t\t{ID: 82, Key: \"comment.status.reasons\", Value: `[\"reason.normal\",\"reason.deleted\"]`},\n\t\t{ID: 83, Key: \"user.status.reasons\", Value: `[\"reason.normal.user\",\"reason.suspended\",\"reason.deleted.user\",\"reason.inactive\"]`},\n\t\t{ID: 84, Key: \"question.review.reasons\", Value: `[\"reason.looks_ok\",\"reason.needs_edit\",\"reason.needs_close\",\"reason.needs_delete\"]`},\n\t\t{ID: 85, Key: \"answer.review.reasons\", Value: `[\"reason.looks_ok\",\"reason.needs_edit\",\"reason.needs_delete\"]`},\n\t\t{ID: 86, Key: \"comment.review.reasons\", Value: `[\"reason.looks_ok\",\"reason.needs_edit\",\"reason.needs_delete\"]`},\n\t\t{ID: 87, Key: \"question.asked\", Value: `0`},\n\t\t{ID: 88, Key: \"question.closed\", Value: `0`},\n\t\t{ID: 89, Key: \"question.reopened\", Value: `0`},\n\t\t{ID: 90, Key: \"question.answered\", Value: `0`},\n\t\t{ID: 91, Key: \"question.commented\", Value: `0`},\n\t\t{ID: 92, Key: \"question.accept\", Value: `0`},\n\t\t{ID: 93, Key: \"question.edited\", Value: `0`},\n\t\t{ID: 94, Key: \"question.rollback\", Value: `0`},\n\t\t{ID: 95, Key: \"question.deleted\", Value: `0`},\n\t\t{ID: 96, Key: \"question.undeleted\", Value: `0`},\n\t\t{ID: 97, Key: \"answer.answered\", Value: `0`},\n\t\t{ID: 98, Key: \"answer.commented\", Value: `0`},\n\t\t{ID: 99, Key: \"answer.edited\", Value: `0`},\n\t\t{ID: 100, Key: \"answer.rollback\", Value: `0`},\n\t\t{ID: 101, Key: \"answer.undeleted\", Value: `0`},\n\t\t{ID: 102, Key: \"tag.created\", Value: `0`},\n\t\t{ID: 103, Key: \"tag.edited\", Value: `0`},\n\t\t{ID: 104, Key: \"tag.rollback\", Value: `0`},\n\t\t{ID: 105, Key: \"tag.deleted\", Value: `0`},\n\t\t{ID: 106, Key: \"tag.undeleted\", Value: `0`},\n\t\t{ID: 107, Key: \"rank.comment.vote_up\", Value: `1`},\n\t\t{ID: 108, Key: \"rank.comment.vote_down\", Value: `1`},\n\t\t{ID: 109, Key: \"rank.question.edit_without_review\", Value: `2000`},\n\t\t{ID: 110, Key: \"rank.answer.edit_without_review\", Value: `2000`},\n\t\t{ID: 111, Key: \"rank.tag.edit_without_review\", Value: `20000`},\n\t\t{ID: 112, Key: \"rank.answer.audit\", Value: `2000`},\n\t\t{ID: 113, Key: \"rank.question.audit\", Value: `2000`},\n\t\t{ID: 114, Key: \"rank.tag.audit\", Value: `20000`},\n\t\t{ID: 115, Key: \"rank.question.close\", Value: `-1`},\n\t\t{ID: 116, Key: \"rank.question.reopen\", Value: `-1`},\n\t\t{ID: 117, Key: \"rank.tag.use_reserved_tag\", Value: `-1`},\n\t\t{ID: 118, Key: \"plugin.status\", Value: `{}`},\n\t\t{ID: 119, Key: \"question.pin\", Value: `0`},\n\t\t{ID: 120, Key: \"question.unpin\", Value: `0`},\n\t\t{ID: 121, Key: \"question.show\", Value: `0`},\n\t\t{ID: 122, Key: \"question.hide\", Value: `0`},\n\t\t{ID: 123, Key: \"rank.question.pin\", Value: `-1`},\n\t\t{ID: 124, Key: \"rank.question.unpin\", Value: `-1`},\n\t\t{ID: 125, Key: \"rank.question.show\", Value: `-1`},\n\t\t{ID: 126, Key: \"rank.question.hide\", Value: `-1`},\n\t\t{ID: 127, Key: \"rank.answer.invite_someone_to_answer\", Value: `1000`},\n\t}\n)\n", "package migrations\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/answerdev/answer/internal/entity\"\n\t\"github.com/segmentfault/pacman/log\"\n\t\"xorm.io/xorm\"\n\t\"xorm.io/xorm/schemas\"\n)\n\nfunc addActivityTimeline(x *xorm.Engine) (err error) {\n\tswitch x.Dialect().URI().DBType {\n\tcase schemas.MYSQL:\n\t\t_, err = x.Exec(\"ALTER TABLE `answer` CHANGE `updated_at` `updated_at` TIMESTAMP NULL DEFAULT NULL\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = x.Exec(\"ALTER TABLE `question` CHANGE `updated_at` `updated_at` TIMESTAMP NULL DEFAULT NULL\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tcase schemas.POSTGRES:\n\t\t_, err = x.Exec(`ALTER TABLE \"answer\" ALTER COLUMN \"updated_at\" DROP NOT NULL, ALTER COLUMN \"updated_at\" SET DEFAULT NULL`)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = x.Exec(`ALTER TABLE \"question\" ALTER COLUMN \"updated_at\" DROP NOT NULL, ALTER COLUMN \"updated_at\" SET DEFAULT NULL`)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tcase schemas.SQLITE:\n\t\t_, err = x.Exec(`DROP INDEX \"IDX_answer_user_id\";\n\nALTER TABLE \"answer\" RENAME TO \"_answer_old_v3\";\n\nCREATE TABLE \"answer\" (\n  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  \"created_at\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  \"updated_at\" DATETIME DEFAULT NULL,\n  \"question_id\" INTEGER NOT NULL DEFAULT 0,\n  \"user_id\" INTEGER NOT NULL DEFAULT 0,\n  \"original_text\" TEXT NOT NULL,\n  \"parsed_text\" TEXT NOT NULL,\n  \"status\" INTEGER NOT NULL DEFAULT 1,\n  \"adopted\" INTEGER NOT NULL DEFAULT 1,\n  \"comment_count\" INTEGER NOT NULL DEFAULT 0,\n  \"vote_count\" INTEGER NOT NULL DEFAULT 0,\n  \"revision_id\" INTEGER NOT NULL DEFAULT 0\n);\n\nINSERT INTO \"answer\" (\"id\", \"created_at\", \"updated_at\", \"question_id\", \"user_id\", \"original_text\", \"parsed_text\", \"status\", \"adopted\", \"comment_count\", \"vote_count\", \"revision_id\") SELECT \"id\", \"created_at\", \"updated_at\", \"question_id\", \"user_id\", \"original_text\", \"parsed_text\", \"status\", \"adopted\", \"comment_count\", \"vote_count\", \"revision_id\" FROM \"_answer_old_v3\";\n\nCREATE INDEX \"IDX_answer_user_id\"\nON \"answer\" (\n  \"user_id\" ASC\n);\nDROP INDEX \"IDX_question_user_id\";\n\nALTER TABLE \"question\" RENAME TO \"_question_old_v3\";\n\nCREATE TABLE \"question\" (\n  \"id\" INTEGER NOT NULL,\n  \"created_at\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  \"updated_at\" DATETIME DEFAULT NULL,\n  \"user_id\" INTEGER NOT NULL DEFAULT 0,\n  \"title\" TEXT NOT NULL DEFAULT '',\n  \"original_text\" TEXT NOT NULL,\n  \"parsed_text\" TEXT NOT NULL,\n  \"status\" INTEGER NOT NULL DEFAULT 1,\n  \"view_count\" INTEGER NOT NULL DEFAULT 0,\n  \"unique_view_count\" INTEGER NOT NULL DEFAULT 0,\n  \"vote_count\" INTEGER NOT NULL DEFAULT 0,\n  \"answer_count\" INTEGER NOT NULL DEFAULT 0,\n  \"collection_count\" INTEGER NOT NULL DEFAULT 0,\n  \"follow_count\" INTEGER NOT NULL DEFAULT 0,\n  \"accepted_answer_id\" INTEGER NOT NULL DEFAULT 0,\n  \"last_answer_id\" INTEGER NOT NULL DEFAULT 0,\n  \"post_update_time\" DATETIME DEFAULT CURRENT_TIMESTAMP,\n  \"revision_id\" INTEGER NOT NULL DEFAULT 0,\n  PRIMARY KEY (\"id\")\n);\n\nINSERT INTO \"question\" (\"id\", \"created_at\", \"updated_at\", \"user_id\", \"title\", \"original_text\", \"parsed_text\", \"status\", \"view_count\", \"unique_view_count\", \"vote_count\", \"answer_count\", \"collection_count\", \"follow_count\", \"accepted_answer_id\", \"last_answer_id\", \"post_update_time\", \"revision_id\") SELECT \"id\", \"created_at\", \"updated_at\", \"user_id\", \"title\", \"original_text\", \"parsed_text\", \"status\", \"view_count\", \"unique_view_count\", \"vote_count\", \"answer_count\", \"collection_count\", \"follow_count\", \"accepted_answer_id\", \"last_answer_id\", \"post_update_time\", \"revision_id\" FROM \"_question_old_v3\";\n\nCREATE INDEX \"IDX_question_user_id\"\nON \"question\" (\n  \"user_id\" ASC\n);`)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// only increasing field length to 128\n\ttype Config struct {\n\t\tID  int    `xorm:\"not null pk autoincr INT(11) id\"`\n\t\tKey string `xorm:\"unique VARCHAR(128) key\"`\n\t}\n\tif err := x.Sync(new(Config)); err != nil {\n\t\treturn fmt.Errorf(\"sync config table failed: %w\", err)\n\t}\n\tdefaultConfigTable := []*entity.Config{\n\t\t{ID: 36, Key: \"rank.question.add\", Value: `1`},\n\t\t{ID: 37, Key: \"rank.question.edit\", Value: `200`},\n\t\t{ID: 38, Key: \"rank.question.delete\", Value: `-1`},\n\t\t{ID: 39, Key: \"rank.question.vote_up\", Value: `15`},\n\t\t{ID: 40, Key: \"rank.question.vote_down\", Value: `125`},\n\t\t{ID: 41, Key: \"rank.answer.add\", Value: `1`},\n\t\t{ID: 42, Key: \"rank.answer.edit\", Value: `200`},\n\t\t{ID: 43, Key: \"rank.answer.delete\", Value: `-1`},\n\t\t{ID: 44, Key: \"rank.answer.accept\", Value: `-1`},\n\t\t{ID: 45, Key: \"rank.answer.vote_up\", Value: `15`},\n\t\t{ID: 46, Key: \"rank.answer.vote_down\", Value: `125`},\n\t\t{ID: 47, Key: \"rank.comment.add\", Value: `1`},\n\t\t{ID: 48, Key: \"rank.comment.edit\", Value: `-1`},\n\t\t{ID: 49, Key: \"rank.comment.delete\", Value: `-1`},\n\t\t{ID: 50, Key: \"rank.report.add\", Value: `1`},\n\t\t{ID: 51, Key: \"rank.tag.add\", Value: `1`},\n\t\t{ID: 52, Key: \"rank.tag.edit\", Value: `100`},\n\t\t{ID: 53, Key: \"rank.tag.delete\", Value: `-1`},\n\t\t{ID: 54, Key: \"rank.tag.synonym\", Value: `20000`},\n\t\t{ID: 55, Key: \"rank.link.url_limit\", Value: `10`},\n\t\t{ID: 56, Key: \"rank.vote.detail\", Value: `0`},\n\n\t\t{ID: 87, Key: \"question.asked\", Value: `0`},\n\t\t{ID: 88, Key: \"question.closed\", Value: `0`},\n\t\t{ID: 89, Key: \"question.reopened\", Value: `0`},\n\t\t{ID: 90, Key: \"question.answered\", Value: `0`},\n\t\t{ID: 91, Key: \"question.commented\", Value: `0`},\n\t\t{ID: 92, Key: \"question.accept\", Value: `0`},\n\t\t{ID: 93, Key: \"question.edited\", Value: `0`},\n\t\t{ID: 94, Key: \"question.rollback\", Value: `0`},\n\t\t{ID: 95, Key: \"question.deleted\", Value: `0`},\n\t\t{ID: 96, Key: \"question.undeleted\", Value: `0`},\n\t\t{ID: 97, Key: \"answer.answered\", Value: `0`},\n\t\t{ID: 98, Key: \"answer.commented\", Value: `0`},\n\t\t{ID: 99, Key: \"answer.edited\", Value: `0`},\n\t\t{ID: 100, Key: \"answer.rollback\", Value: `0`},\n\t\t{ID: 101, Key: \"answer.undeleted\", Value: `0`},\n\t\t{ID: 102, Key: \"tag.created\", Value: `0`},\n\t\t{ID: 103, Key: \"tag.edited\", Value: `0`},\n\t\t{ID: 104, Key: \"tag.rollback\", Value: `0`},\n\t\t{ID: 105, Key: \"tag.deleted\", Value: `0`},\n\t\t{ID: 106, Key: \"tag.undeleted\", Value: `0`},\n\n\t\t{ID: 107, Key: \"rank.comment.vote_up\", Value: `1`},\n\t\t{ID: 108, Key: \"rank.comment.vote_down\", Value: `1`},\n\t\t{ID: 109, Key: \"rank.question.edit_without_review\", Value: `2000`},\n\t\t{ID: 110, Key: \"rank.answer.edit_without_review\", Value: `2000`},\n\t\t{ID: 111, Key: \"rank.tag.edit_without_review\", Value: `20000`},\n\t\t{ID: 112, Key: \"rank.answer.audit\", Value: `2000`},\n\t\t{ID: 113, Key: \"rank.question.audit\", Value: `2000`},\n\t\t{ID: 114, Key: \"rank.tag.audit\", Value: `20000`},\n\t}\n\tfor _, c := range defaultConfigTable {\n\t\texist, err := x.Get(&entity.Config{ID: c.ID, Key: c.Key})\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"get config failed: %w\", err)\n\t\t}\n\t\tif exist {\n\t\t\tif _, err = x.Update(c, &entity.Config{ID: c.ID, Key: c.Key}); err != nil {\n\t\t\t\tlog.Errorf(\"update %+v config failed: %s\", c, err)\n\t\t\t\treturn fmt.Errorf(\"update config failed: %w\", err)\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tif _, err = x.Insert(&entity.Config{ID: c.ID, Key: c.Key, Value: c.Value}); err != nil {\n\t\t\tlog.Errorf(\"insert %+v config failed: %s\", c, err)\n\t\t\treturn fmt.Errorf(\"add config failed: %w\", err)\n\t\t}\n\t}\n\n\ttype Revision struct {\n\t\tID           string `xorm:\"not null pk autoincr BIGINT(20) id\"`\n\t\tObjectID     string `xorm:\"not null default 0 BIGINT(20) INDEX object_id\"`\n\t\tReviewUserID int64  `xorm:\"not null default 0 BIGINT(20) review_user_id\"`\n\t}\n\ttype Activity struct {\n\t\tID               string    `xorm:\"not null pk autoincr BIGINT(20) id\"`\n\t\tCancelledAt      time.Time `xorm:\"TIMESTAMP cancelled_at\"`\n\t\tUserID           string    `xorm:\"not null index BIGINT(20) user_id\"`\n\t\tTriggerUserID    int64     `xorm:\"not null default 0 index BIGINT(20) trigger_user_id\"`\n\t\tObjectID         string    `xorm:\"not null default 0 index BIGINT(20) object_id\"`\n\t\tRevisionID       int64     `xorm:\"not null default 0 BIGINT(20) revision_id\"`\n\t\tOriginalObjectID string    `xorm:\"not null default 0 BIGINT(20) original_object_id\"`\n\t}\n\ttype Tag struct {\n\t\tID       string `xorm:\"not null pk comment('tag_id') BIGINT(20) id\"`\n\t\tSlugName string `xorm:\"not null default '' unique VARCHAR(35) slug_name\"`\n\t\tUserID   string `xorm:\"not null default 0 BIGINT(20) user_id\"`\n\t}\n\ttype Question struct {\n\t\tID             string    `xorm:\"not null pk BIGINT(20) id\"`\n\t\tUserID         string    `xorm:\"not null default 0 BIGINT(20) INDEX user_id\"`\n\t\tUpdatedAt      time.Time `xorm:\"updated_at TIMESTAMP\"`\n\t\tLastEditUserID string    `xorm:\"not null default 0 BIGINT(20) last_edit_user_id\"`\n\t\tPostUpdateTime time.Time `xorm:\"post_update_time TIMESTAMP\"`\n\t}\n\ttype Answer struct {\n\t\tID             string    `xorm:\"not null pk autoincr BIGINT(20) id\"`\n\t\tUserID         string    `xorm:\"not null default 0 BIGINT(20) INDEX user_id\"`\n\t\tUpdatedAt      time.Time `xorm:\"updated_at TIMESTAMP\"`\n\t\tLastEditUserID string    `xorm:\"not null default 0 BIGINT(20) last_edit_user_id\"`\n\t}\n\n\terr = x.Sync(new(Activity), new(Revision), new(Tag), new(Question), new(Answer))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"sync table failed %w\", err)\n\t}\n\treturn nil\n}\n", "package schema\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/mail\"\n\t\"net/url\"\n\n\t\"github.com/answerdev/answer/internal/base/constant\"\n\t\"github.com/answerdev/answer/internal/base/handler\"\n\t\"github.com/answerdev/answer/internal/base/reason\"\n\t\"github.com/answerdev/answer/internal/base/translator\"\n\t\"github.com/answerdev/answer/internal/base/validator\"\n\t\"github.com/segmentfault/pacman/errors\"\n)\n\n// SiteGeneralReq site general request\ntype SiteGeneralReq struct {\n\tName             string `validate:\"required,sanitizer,gt=1,lte=128\" form:\"name\" json:\"name\"`\n\tShortDescription string `validate:\"omitempty,sanitizer,gt=3,lte=255\" form:\"short_description\" json:\"short_description\"`\n\tDescription      string `validate:\"omitempty,sanitizer,gt=3,lte=2000\" form:\"description\" json:\"description\"`\n\tSiteUrl          string `validate:\"required,sanitizer,gt=1,lte=512,url\" form:\"site_url\" json:\"site_url\"`\n\tContactEmail     string `validate:\"required,sanitizer,gt=1,lte=512,email\" form:\"contact_email\" json:\"contact_email\"`\n}\n\nfunc (r *SiteGeneralReq) FormatSiteUrl() {\n\tparsedUrl, err := url.Parse(r.SiteUrl)\n\tif err != nil {\n\t\treturn\n\t}\n\tr.SiteUrl = fmt.Sprintf(\"%s://%s\", parsedUrl.Scheme, parsedUrl.Host)\n}\n\n// SiteInterfaceReq site interface request\ntype SiteInterfaceReq struct {\n\tLanguage string `validate:\"required,gt=1,lte=128\" form:\"language\" json:\"language\"`\n\tTimeZone string `validate:\"required,gt=1,lte=128\" form:\"time_zone\" json:\"time_zone\"`\n}\n\n// SiteBrandingReq site branding request\ntype SiteBrandingReq struct {\n\tLogo       string `validate:\"omitempty,gt=0,lte=512\" form:\"logo\" json:\"logo\"`\n\tMobileLogo string `validate:\"omitempty,gt=0,lte=512\" form:\"mobile_logo\" json:\"mobile_logo\"`\n\tSquareIcon string `validate:\"omitempty,gt=0,lte=512\" form:\"square_icon\" json:\"square_icon\"`\n\tFavicon    string `validate:\"omitempty,gt=0,lte=512\" form:\"favicon\" json:\"favicon\"`\n}\n\n// SiteWriteReq site write request\ntype SiteWriteReq struct {\n\tRequiredTag   bool     `validate:\"omitempty\" form:\"required_tag\" json:\"required_tag\"`\n\tRecommendTags []string `validate:\"omitempty\" form:\"recommend_tags\" json:\"recommend_tags\"`\n\tReservedTags  []string `validate:\"omitempty\" form:\"reserved_tags\" json:\"reserved_tags\"`\n\tUserID        string   `json:\"-\"`\n}\n\n// SiteLegalReq site branding request\ntype SiteLegalReq struct {\n\tTermsOfServiceOriginalText string `json:\"terms_of_service_original_text\"`\n\tTermsOfServiceParsedText   string `json:\"terms_of_service_parsed_text\"`\n\tPrivacyPolicyOriginalText  string `json:\"privacy_policy_original_text\"`\n\tPrivacyPolicyParsedText    string `json:\"privacy_policy_parsed_text\"`\n}\n\n// GetSiteLegalInfoReq site site legal request\ntype GetSiteLegalInfoReq struct {\n\tInfoType string `validate:\"required,oneof=tos privacy\" form:\"info_type\"`\n}\n\nfunc (r *GetSiteLegalInfoReq) IsTOS() bool {\n\treturn r.InfoType == \"tos\"\n}\n\nfunc (r *GetSiteLegalInfoReq) IsPrivacy() bool {\n\treturn r.InfoType == \"privacy\"\n}\n\n// GetSiteLegalInfoResp get site legal info response\ntype GetSiteLegalInfoResp struct {\n\tTermsOfServiceOriginalText string `json:\"terms_of_service_original_text,omitempty\"`\n\tTermsOfServiceParsedText   string `json:\"terms_of_service_parsed_text,omitempty\"`\n\tPrivacyPolicyOriginalText  string `json:\"privacy_policy_original_text,omitempty\"`\n\tPrivacyPolicyParsedText    string `json:\"privacy_policy_parsed_text,omitempty\"`\n}\n\n// SiteUsersReq site users config request\ntype SiteUsersReq struct {\n\tDefaultAvatar          string `validate:\"required,oneof=system gravatar\" json:\"default_avatar\"`\n\tGravatarBaseURL        string `json:\"gravatar_base_url\"`\n\tAllowUpdateDisplayName bool   `json:\"allow_update_display_name\"`\n\tAllowUpdateUsername    bool   `json:\"allow_update_username\"`\n\tAllowUpdateAvatar      bool   `json:\"allow_update_avatar\"`\n\tAllowUpdateBio         bool   `json:\"allow_update_bio\"`\n\tAllowUpdateWebsite     bool   `json:\"allow_update_website\"`\n\tAllowUpdateLocation    bool   `json:\"allow_update_location\"`\n}\n\n// SiteLoginReq site login request\ntype SiteLoginReq struct {\n\tAllowNewRegistrations   bool     `json:\"allow_new_registrations\"`\n\tAllowEmailRegistrations bool     `json:\"allow_email_registrations\"`\n\tLoginRequired           bool     `json:\"login_required\"`\n\tAllowEmailDomains       []string `json:\"allow_email_domains\"`\n}\n\n// SiteCustomCssHTMLReq site custom css html\ntype SiteCustomCssHTMLReq struct {\n\tCustomHead    string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_head\"`\n\tCustomCss     string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_css\"`\n\tCustomHeader  string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_header\"`\n\tCustomFooter  string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_footer\"`\n\tCustomSideBar string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_sidebar\"`\n}\n\n// SiteThemeReq site theme config\ntype SiteThemeReq struct {\n\tTheme       string                 `validate:\"required,gt=0,lte=255\" json:\"theme\"`\n\tThemeConfig map[string]interface{} `validate:\"omitempty\" json:\"theme_config\"`\n}\n\ntype SiteSeoReq struct {\n\tPermaLink int    `validate:\"required,lte=4,gte=0\" form:\"permalink\" json:\"permalink\"`\n\tRobots    string `validate:\"required\" form:\"robots\" json:\"robots\"`\n}\n\nfunc (s *SiteSeoResp) IsShortLink() bool {\n\treturn s.PermaLink == constant.PermaLinkQuestionIDAndTitleByShortID ||\n\t\ts.PermaLink == constant.PermaLinkQuestionIDByShortID\n}\n\n// SiteGeneralResp site general response\ntype SiteGeneralResp SiteGeneralReq\n\n// SiteInterfaceResp site interface response\ntype SiteInterfaceResp SiteInterfaceReq\n\n// SiteBrandingResp site branding response\ntype SiteBrandingResp SiteBrandingReq\n\n// SiteLoginResp site login response\ntype SiteLoginResp SiteLoginReq\n\n// SiteCustomCssHTMLResp site custom css html response\ntype SiteCustomCssHTMLResp SiteCustomCssHTMLReq\n\n// SiteUsersResp site users response\ntype SiteUsersResp SiteUsersReq\n\n// SiteThemeResp site theme response\ntype SiteThemeResp struct {\n\tThemeOptions []*ThemeOption         `json:\"theme_options\"`\n\tTheme        string                 `json:\"theme\"`\n\tThemeConfig  map[string]interface{} `json:\"theme_config\"`\n}\n\nfunc (s *SiteThemeResp) TrTheme(ctx context.Context) {\n\tla := handler.GetLangByCtx(ctx)\n\tfor _, option := range s.ThemeOptions {\n\t\ttr := translator.Tr(la, option.Value)\n\t\t// if tr is equal the option value means not found translation, so use the original label\n\t\tif tr != option.Value {\n\t\t\toption.Label = tr\n\t\t}\n\t}\n}\n\n// ThemeOption get label option\ntype ThemeOption struct {\n\tLabel string `json:\"label\"`\n\tValue string `json:\"value\"`\n}\n\n// SiteWriteResp site write response\ntype SiteWriteResp SiteWriteReq\n\n// SiteLegalResp site write response\ntype SiteLegalResp SiteLegalReq\n\n// SiteSeoResp site write response\ntype SiteSeoResp SiteSeoReq\n\n// SiteInfoResp get site info response\ntype SiteInfoResp struct {\n\tGeneral       *SiteGeneralResp       `json:\"general\"`\n\tInterface     *SiteInterfaceResp     `json:\"interface\"`\n\tBranding      *SiteBrandingResp      `json:\"branding\"`\n\tLogin         *SiteLoginResp         `json:\"login\"`\n\tTheme         *SiteThemeResp         `json:\"theme\"`\n\tCustomCssHtml *SiteCustomCssHTMLResp `json:\"custom_css_html\"`\n\tSiteSeo       *SiteSeoResp           `json:\"site_seo\"`\n\tSiteUsers     *SiteUsersResp         `json:\"site_users\"`\n\tVersion       string                 `json:\"version\"`\n\tRevision      string                 `json:\"revision\"`\n}\ntype TemplateSiteInfoResp struct {\n\tGeneral       *SiteGeneralResp       `json:\"general\"`\n\tInterface     *SiteInterfaceResp     `json:\"interface\"`\n\tBranding      *SiteBrandingResp      `json:\"branding\"`\n\tSiteSeo       *SiteSeoResp           `json:\"site_seo\"`\n\tCustomCssHtml *SiteCustomCssHTMLResp `json:\"custom_css_html\"`\n\tTitle         string\n\tYear          string\n\tCanonical     string\n\tJsonLD        string\n\tKeywords      string\n\tDescription   string\n}\n\n// UpdateSMTPConfigReq get smtp config request\ntype UpdateSMTPConfigReq struct {\n\tFromEmail          string `validate:\"omitempty,gt=0,lte=256\" json:\"from_email\"`\n\tFromName           string `validate:\"omitempty,gt=0,lte=256\" json:\"from_name\"`\n\tSMTPHost           string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_host\"`\n\tSMTPPort           int    `validate:\"omitempty,min=1,max=65535\" json:\"smtp_port\"`\n\tEncryption         string `validate:\"omitempty,oneof=SSL\" json:\"encryption\"` // \"\" SSL\n\tSMTPUsername       string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_username\"`\n\tSMTPPassword       string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_password\"`\n\tSMTPAuthentication bool   `validate:\"omitempty\" json:\"smtp_authentication\"`\n\tTestEmailRecipient string `validate:\"omitempty,email\" json:\"test_email_recipient\"`\n}\n\nfunc (r *UpdateSMTPConfigReq) Check() (errField []*validator.FormErrorField, err error) {\n\t_, err = mail.ParseAddress(r.FromName)\n\tif err == nil {\n\t\treturn append(errField, &validator.FormErrorField{\n\t\t\tErrorField: \"from_name\",\n\t\t\tErrorMsg:   reason.SMTPConfigFromNameCannotBeEmail,\n\t\t}), errors.BadRequest(reason.SMTPConfigFromNameCannotBeEmail)\n\t}\n\treturn nil, nil\n}\n\n// GetSMTPConfigResp get smtp config response\ntype GetSMTPConfigResp struct {\n\tFromEmail          string `json:\"from_email\"`\n\tFromName           string `json:\"from_name\"`\n\tSMTPHost           string `json:\"smtp_host\"`\n\tSMTPPort           int    `json:\"smtp_port\"`\n\tEncryption         string `json:\"encryption\"` // \"\" SSL\n\tSMTPUsername       string `json:\"smtp_username\"`\n\tSMTPPassword       string `json:\"smtp_password\"`\n\tSMTPAuthentication bool   `json:\"smtp_authentication\"`\n}\n\n// GetManifestJsonResp get manifest json response\ntype GetManifestJsonResp struct {\n\tManifestVersion int               `json:\"manifest_version\"`\n\tVersion         string            `json:\"version\"`\n\tRevision        string            `json:\"revision\"`\n\tShortName       string            `json:\"short_name\"`\n\tName            string            `json:\"name\"`\n\tIcons           map[string]string `json:\"icons\"`\n\tStartUrl        string            `json:\"start_url\"`\n\tDisplay         string            `json:\"display\"`\n\tThemeColor      string            `json:\"theme_color\"`\n\tBackgroundColor string            `json:\"background_color\"`\n}\n\nconst (\n\t// PrivilegeLevel1 low\n\tPrivilegeLevel1 PrivilegeLevel = 1\n\t// PrivilegeLevel2 medium\n\tPrivilegeLevel2 PrivilegeLevel = 2\n\t// PrivilegeLevel3 high\n\tPrivilegeLevel3 PrivilegeLevel = 3\n)\n\ntype PrivilegeLevel int\n\n// GetPrivilegesConfigResp get privileges config response\ntype GetPrivilegesConfigResp struct {\n\tOptions       []*PrivilegeOption `json:\"options\"`\n\tSelectedLevel PrivilegeLevel     `json:\"selected_level\"`\n}\n\n// PrivilegeOption privilege option\ntype PrivilegeOption struct {\n\tLevel      PrivilegeLevel        `json:\"level\"`\n\tLevelDesc  string                `json:\"level_desc\"`\n\tPrivileges []*constant.Privilege `json:\"privileges\"`\n}\n\n// UpdatePrivilegesConfigReq update privileges config request\ntype UpdatePrivilegesConfigReq struct {\n\tLevel PrivilegeLevel `validate:\"required,min=1,max=3\" json:\"level\"`\n}\n\nvar (\n\tDefaultPrivilegeOptions      []*PrivilegeOption\n\tprivilegeOptionsLevelMapping = map[string][]int{\n\t\tconstant.RankQuestionAddKey:               {1, 1, 1},\n\t\tconstant.RankAnswerAddKey:                 {1, 1, 1},\n\t\tconstant.RankCommentAddKey:                {1, 1, 1},\n\t\tconstant.RankReportAddKey:                 {1, 1, 1},\n\t\tconstant.RankCommentVoteUpKey:             {1, 1, 1},\n\t\tconstant.RankLinkUrlLimitKey:              {1, 10, 10},\n\t\tconstant.RankQuestionVoteUpKey:            {1, 1, 15},\n\t\tconstant.RankAnswerVoteUpKey:              {1, 1, 15},\n\t\tconstant.RankQuestionVoteDownKey:          {125, 125, 125},\n\t\tconstant.RankAnswerVoteDownKey:            {125, 125, 125},\n\t\tconstant.RankInviteSomeoneToAnswerKey:     {1, 500, 1000},\n\t\tconstant.RankTagAddKey:                    {1, 750, 1500},\n\t\tconstant.RankTagEditKey:                   {1, 50, 100},\n\t\tconstant.RankQuestionEditKey:              {1, 100, 200},\n\t\tconstant.RankAnswerEditKey:                {1, 100, 200},\n\t\tconstant.RankQuestionEditWithoutReviewKey: {1, 1000, 2000},\n\t\tconstant.RankAnswerEditWithoutReviewKey:   {1, 1000, 2000},\n\t\tconstant.RankQuestionAuditKey:             {1, 1000, 2000},\n\t\tconstant.RankAnswerAuditKey:               {1, 1000, 2000},\n\t\tconstant.RankTagAuditKey:                  {1, 2500, 5000},\n\t\tconstant.RankTagEditWithoutReviewKey:      {1, 10000, 20000},\n\t\tconstant.RankTagSynonymKey:                {1, 10000, 20000},\n\t}\n)\n\nfunc init() {\n\tDefaultPrivilegeOptions = append(DefaultPrivilegeOptions, &PrivilegeOption{\n\t\tLevel:     PrivilegeLevel1,\n\t\tLevelDesc: reason.PrivilegeLevel1Desc,\n\t}, &PrivilegeOption{\n\t\tLevel:     PrivilegeLevel2,\n\t\tLevelDesc: reason.PrivilegeLevel2Desc,\n\t}, &PrivilegeOption{\n\t\tLevel:     PrivilegeLevel3,\n\t\tLevelDesc: reason.PrivilegeLevel3Desc,\n\t})\n\n\tfor _, option := range DefaultPrivilegeOptions {\n\t\tfor _, privilege := range constant.RankAllPrivileges {\n\t\t\tif len(privilegeOptionsLevelMapping[privilege.Key]) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\toption.Privileges = append(option.Privileges, &constant.Privilege{\n\t\t\t\tLabel: privilege.Label,\n\t\t\t\tValue: privilegeOptionsLevelMapping[privilege.Key][option.Level-1],\n\t\t\t\tKey:   privilege.Key,\n\t\t\t})\n\t\t}\n\t}\n}\n", "package siteinfo\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/answerdev/answer/internal/base/constant\"\n\t\"github.com/answerdev/answer/internal/base/handler\"\n\t\"github.com/answerdev/answer/internal/base/reason\"\n\t\"github.com/answerdev/answer/internal/base/translator\"\n\t\"github.com/answerdev/answer/internal/entity\"\n\t\"github.com/answerdev/answer/internal/schema\"\n\t\"github.com/answerdev/answer/internal/service/config\"\n\t\"github.com/answerdev/answer/internal/service/export\"\n\tquestioncommon \"github.com/answerdev/answer/internal/service/question_common\"\n\t\"github.com/answerdev/answer/internal/service/siteinfo_common\"\n\ttagcommon \"github.com/answerdev/answer/internal/service/tag_common\"\n\t\"github.com/answerdev/answer/plugin\"\n\t\"github.com/jinzhu/copier\"\n\t\"github.com/segmentfault/pacman/errors\"\n\t\"github.com/segmentfault/pacman/log\"\n)\n\ntype SiteInfoService struct {\n\tsiteInfoRepo          siteinfo_common.SiteInfoRepo\n\tsiteInfoCommonService siteinfo_common.SiteInfoCommonService\n\temailService          *export.EmailService\n\ttagCommonService      *tagcommon.TagCommonService\n\tconfigService         *config.ConfigService\n\tquestioncommon        *questioncommon.QuestionCommon\n}\n\nfunc NewSiteInfoService(\n\tsiteInfoRepo siteinfo_common.SiteInfoRepo,\n\tsiteInfoCommonService siteinfo_common.SiteInfoCommonService,\n\temailService *export.EmailService,\n\ttagCommonService *tagcommon.TagCommonService,\n\tconfigService *config.ConfigService,\n\tquestioncommon *questioncommon.QuestionCommon,\n\n) *SiteInfoService {\n\tplugin.RegisterGetSiteURLFunc(func() string {\n\t\tgeneralSiteInfo, err := siteInfoCommonService.GetSiteGeneral(context.Background())\n\t\tif err != nil {\n\t\t\tlog.Error(err)\n\t\t\treturn \"\"\n\t\t}\n\t\treturn generalSiteInfo.SiteUrl\n\t})\n\n\treturn &SiteInfoService{\n\t\tsiteInfoRepo:          siteInfoRepo,\n\t\tsiteInfoCommonService: siteInfoCommonService,\n\t\temailService:          emailService,\n\t\ttagCommonService:      tagCommonService,\n\t\tconfigService:         configService,\n\t\tquestioncommon:        questioncommon,\n\t}\n}\n\n// GetSiteGeneral get site info general\nfunc (s *SiteInfoService) GetSiteGeneral(ctx context.Context) (resp *schema.SiteGeneralResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteGeneral(ctx)\n}\n\n// GetSiteInterface get site info interface\nfunc (s *SiteInfoService) GetSiteInterface(ctx context.Context) (resp *schema.SiteInterfaceResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteInterface(ctx)\n}\n\n// GetSiteBranding get site info branding\nfunc (s *SiteInfoService) GetSiteBranding(ctx context.Context) (resp *schema.SiteBrandingResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteBranding(ctx)\n}\n\n// GetSiteUsers get site info about users\nfunc (s *SiteInfoService) GetSiteUsers(ctx context.Context) (resp *schema.SiteUsersResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteUsers(ctx)\n}\n\n// GetSiteWrite get site info write\nfunc (s *SiteInfoService) GetSiteWrite(ctx context.Context) (resp *schema.SiteWriteResp, err error) {\n\tresp = &schema.SiteWriteResp{}\n\tsiteInfo, exist, err := s.siteInfoRepo.GetByType(ctx, constant.SiteTypeWrite)\n\tif err != nil {\n\t\tlog.Error(err)\n\t\treturn resp, nil\n\t}\n\tif exist {\n\t\t_ = json.Unmarshal([]byte(siteInfo.Content), resp)\n\t}\n\n\tresp.RecommendTags, err = s.tagCommonService.GetSiteWriteRecommendTag(ctx)\n\tif err != nil {\n\t\tlog.Error(err)\n\t}\n\tresp.ReservedTags, err = s.tagCommonService.GetSiteWriteReservedTag(ctx)\n\tif err != nil {\n\t\tlog.Error(err)\n\t}\n\treturn resp, nil\n}\n\n// GetSiteLegal get site legal info\nfunc (s *SiteInfoService) GetSiteLegal(ctx context.Context) (resp *schema.SiteLegalResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteLegal(ctx)\n}\n\n// GetSiteLogin get site login info\nfunc (s *SiteInfoService) GetSiteLogin(ctx context.Context) (resp *schema.SiteLoginResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteLogin(ctx)\n}\n\n// GetSiteCustomCssHTML get site custom css html config\nfunc (s *SiteInfoService) GetSiteCustomCssHTML(ctx context.Context) (resp *schema.SiteCustomCssHTMLResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteCustomCssHTML(ctx)\n}\n\n// GetSiteTheme get site theme config\nfunc (s *SiteInfoService) GetSiteTheme(ctx context.Context) (resp *schema.SiteThemeResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteTheme(ctx)\n}\n\nfunc (s *SiteInfoService) SaveSiteGeneral(ctx context.Context, req schema.SiteGeneralReq) (err error) {\n\treq.FormatSiteUrl()\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeGeneral,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeGeneral, data)\n}\n\nfunc (s *SiteInfoService) SaveSiteInterface(ctx context.Context, req schema.SiteInterfaceReq) (err error) {\n\t// check language\n\tif !translator.CheckLanguageIsValid(req.Language) {\n\t\terr = errors.BadRequest(reason.LangNotFound)\n\t\treturn\n\t}\n\n\tcontent, _ := json.Marshal(req)\n\tdata := entity.SiteInfo{\n\t\tType:    constant.SiteTypeInterface,\n\t\tContent: string(content),\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeInterface, &data)\n}\n\n// SaveSiteBranding save site branding information\nfunc (s *SiteInfoService) SaveSiteBranding(ctx context.Context, req *schema.SiteBrandingReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeBranding,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeBranding, data)\n}\n\n// SaveSiteWrite save site configuration about write\nfunc (s *SiteInfoService) SaveSiteWrite(ctx context.Context, req *schema.SiteWriteReq) (resp interface{}, err error) {\n\terrData, err := s.tagCommonService.SetSiteWriteTag(ctx, req.RecommendTags, req.ReservedTags, req.UserID)\n\tif err != nil {\n\t\treturn errData, err\n\t}\n\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeWrite,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn nil, s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeWrite, data)\n}\n\n// SaveSiteLegal save site legal configuration\nfunc (s *SiteInfoService) SaveSiteLegal(ctx context.Context, req *schema.SiteLegalReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeLegal,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeLegal, data)\n}\n\n// SaveSiteLogin save site legal configuration\nfunc (s *SiteInfoService) SaveSiteLogin(ctx context.Context, req *schema.SiteLoginReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeLogin,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeLogin, data)\n}\n\n// SaveSiteCustomCssHTML save site custom html configuration\nfunc (s *SiteInfoService) SaveSiteCustomCssHTML(ctx context.Context, req *schema.SiteCustomCssHTMLReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeCustomCssHTML,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeCustomCssHTML, data)\n}\n\n// SaveSiteTheme save site custom html configuration\nfunc (s *SiteInfoService) SaveSiteTheme(ctx context.Context, req *schema.SiteThemeReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeTheme,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeTheme, data)\n}\n\n// SaveSiteUsers save site users\nfunc (s *SiteInfoService) SaveSiteUsers(ctx context.Context, req *schema.SiteUsersReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeUsers,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeUsers, data)\n}\n\n// GetSMTPConfig get smtp config\nfunc (s *SiteInfoService) GetSMTPConfig(ctx context.Context) (resp *schema.GetSMTPConfigResp, err error) {\n\temailConfig, err := s.emailService.GetEmailConfig(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresp = &schema.GetSMTPConfigResp{}\n\t_ = copier.Copy(resp, emailConfig)\n\treturn resp, nil\n}\n\n// UpdateSMTPConfig get smtp config\nfunc (s *SiteInfoService) UpdateSMTPConfig(ctx context.Context, req *schema.UpdateSMTPConfigReq) (err error) {\n\tec := &export.EmailConfig{}\n\t_ = copier.Copy(ec, req)\n\n\terr = s.emailService.SetEmailConfig(ctx, ec)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif len(req.TestEmailRecipient) > 0 {\n\t\ttitle, body, err := s.emailService.TestTemplate(ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo s.emailService.SendAndSaveCode(ctx, req.TestEmailRecipient, title, body, \"\", \"\")\n\t}\n\treturn nil\n}\n\nfunc (s *SiteInfoService) GetSeo(ctx context.Context) (resp *schema.SiteSeoReq, err error) {\n\tresp = &schema.SiteSeoReq{}\n\tif err = s.siteInfoCommonService.GetSiteInfoByType(ctx, constant.SiteTypeSeo, resp); err != nil {\n\t\treturn resp, err\n\t}\n\tloginConfig, err := s.GetSiteLogin(ctx)\n\tif err != nil {\n\t\tlog.Error(err)\n\t\treturn resp, nil\n\t}\n\t// If the site is set to privacy mode, prohibit crawling any page.\n\tif loginConfig.LoginRequired {\n\t\tresp.Robots = \"User-agent: *\\nDisallow: /\"\n\t\treturn resp, nil\n\t}\n\treturn resp, nil\n}\n\nfunc (s *SiteInfoService) SaveSeo(ctx context.Context, req schema.SiteSeoReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := entity.SiteInfo{\n\t\tType:    constant.SiteTypeSeo,\n\t\tContent: string(content),\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeSeo, &data)\n}\n\nfunc (s *SiteInfoService) GetPrivilegesConfig(ctx context.Context) (resp *schema.GetPrivilegesConfigResp, err error) {\n\tprivilege := &schema.UpdatePrivilegesConfigReq{}\n\tif err = s.siteInfoCommonService.GetSiteInfoByType(ctx, constant.SiteTypePrivileges, privilege); err != nil {\n\t\treturn nil, err\n\t}\n\tresp = &schema.GetPrivilegesConfigResp{\n\t\tOptions:       s.translatePrivilegeOptions(ctx),\n\t\tSelectedLevel: schema.PrivilegeLevel3,\n\t}\n\tif privilege != nil && privilege.Level > 0 {\n\t\tresp.SelectedLevel = privilege.Level\n\t}\n\treturn resp, nil\n}\n\nfunc (s *SiteInfoService) translatePrivilegeOptions(ctx context.Context) (options []*schema.PrivilegeOption) {\n\tla := handler.GetLangByCtx(ctx)\n\tfor _, option := range schema.DefaultPrivilegeOptions {\n\t\top := &schema.PrivilegeOption{\n\t\t\tLevel:     option.Level,\n\t\t\tLevelDesc: translator.Tr(la, option.LevelDesc),\n\t\t}\n\t\tfor _, privilege := range option.Privileges {\n\t\t\top.Privileges = append(op.Privileges, &constant.Privilege{\n\t\t\t\tKey:   privilege.Key,\n\t\t\t\tLabel: translator.Tr(la, privilege.Label),\n\t\t\t\tValue: privilege.Value,\n\t\t\t})\n\t\t}\n\t\toptions = append(options, op)\n\t}\n\treturn\n}\n\nfunc (s *SiteInfoService) UpdatePrivilegesConfig(ctx context.Context, req *schema.UpdatePrivilegesConfigReq) (err error) {\n\tvar chooseOption *schema.PrivilegeOption\n\tfor _, option := range schema.DefaultPrivilegeOptions {\n\t\tif option.Level == req.Level {\n\t\t\tchooseOption = option\n\t\t\tbreak\n\t\t}\n\t}\n\tif chooseOption == nil {\n\t\treturn nil\n\t}\n\n\t// update site info that user choose which privilege level\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypePrivileges,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\terr = s.siteInfoRepo.SaveByType(ctx, constant.SiteTypePrivileges, data)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// update privilege in config\n\tfor _, privilege := range chooseOption.Privileges {\n\t\terr = s.configService.UpdateConfig(ctx, privilege.Key, fmt.Sprintf(\"%d\", privilege.Value))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn\n}\n"], "fixing_code": ["package migrations\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/answerdev/answer/internal/schema\"\n\t\"github.com/segmentfault/pacman/log\"\n\n\t\"github.com/answerdev/answer/internal/entity\"\n\t\"golang.org/x/crypto/bcrypt\"\n\t\"xorm.io/xorm\"\n)\n\ntype Mentor struct {\n\tctx      context.Context\n\tengine   *xorm.Engine\n\tuserData *InitNeedUserInputData\n\terr      error\n\tDone     bool\n}\n\nfunc NewMentor(ctx context.Context, engine *xorm.Engine, data *InitNeedUserInputData) *Mentor {\n\treturn &Mentor{ctx: ctx, engine: engine, userData: data}\n}\n\ntype InitNeedUserInputData struct {\n\tLanguage      string\n\tSiteName      string\n\tSiteURL       string\n\tContactEmail  string\n\tAdminName     string\n\tAdminPassword string\n\tAdminEmail    string\n}\n\nfunc (m *Mentor) InitDB() error {\n\tm.do(\"check table exist\", m.checkTableExist)\n\tm.do(\"sync table\", m.syncTable)\n\tm.do(\"init version table\", m.initVersionTable)\n\tm.do(\"init admin user\", m.initAdminUser)\n\tm.do(\"init config\", m.initConfig)\n\tm.do(\"init default privileges config\", m.initDefaultRankPrivileges)\n\tm.do(\"init role\", m.initRole)\n\tm.do(\"init power\", m.initPower)\n\tm.do(\"init role power rel\", m.initRolePowerRel)\n\tm.do(\"init admin user role rel\", m.initAdminUserRoleRel)\n\tm.do(\"init site info interface\", m.initSiteInfoInterface)\n\tm.do(\"init site info general config\", m.initSiteInfoGeneralData)\n\tm.do(\"init site info login config\", m.initSiteInfoLoginConfig)\n\tm.do(\"init site info theme config\", m.initSiteInfoThemeConfig)\n\tm.do(\"init site info seo config\", m.initSiteInfoSEOConfig)\n\tm.do(\"init site info user config\", m.initSiteInfoUsersConfig)\n\tm.do(\"init site info privilege rank\", m.initSiteInfoPrivilegeRank)\n\treturn m.err\n}\n\nfunc (m *Mentor) do(taskName string, fn func()) {\n\tif m.err != nil || m.Done {\n\t\treturn\n\t}\n\tfn()\n\tif m.err != nil {\n\t\tm.err = fmt.Errorf(\"%s failed: %s\", taskName, m.err)\n\t}\n}\n\nfunc (m *Mentor) checkTableExist() {\n\tm.Done, m.err = m.engine.Context(m.ctx).IsTableExist(&entity.Version{})\n\tif m.Done {\n\t\tfmt.Println(\"[database] already exists\")\n\t}\n}\n\nfunc (m *Mentor) syncTable() {\n\tm.err = m.engine.Context(m.ctx).Sync(tables...)\n}\n\nfunc (m *Mentor) initVersionTable() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.Version{ID: 1, VersionNumber: ExpectedVersion()})\n}\n\nfunc (m *Mentor) initAdminUser() {\n\tgenerateFromPassword, _ := bcrypt.GenerateFromPassword([]byte(m.userData.AdminPassword), bcrypt.DefaultCost)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.User{\n\t\tID:           \"1\",\n\t\tUsername:     m.userData.AdminName,\n\t\tPass:         string(generateFromPassword),\n\t\tEMail:        m.userData.AdminEmail,\n\t\tMailStatus:   1,\n\t\tNoticeStatus: 1,\n\t\tStatus:       1,\n\t\tRank:         1,\n\t\tDisplayName:  m.userData.AdminName,\n\t})\n}\n\nfunc (m *Mentor) initConfig() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(defaultConfigTable)\n}\n\nfunc (m *Mentor) initDefaultRankPrivileges() {\n\tchooseOption := schema.DefaultPrivilegeOptions.Choose(schema.PrivilegeLevel2)\n\tfor _, privilege := range chooseOption.Privileges {\n\t\t_, err := m.engine.Context(m.ctx).Update(\n\t\t\t&entity.Config{Value: fmt.Sprintf(\"%d\", privilege.Value)},\n\t\t\t&entity.Config{Key: privilege.Key},\n\t\t)\n\t\tif err != nil {\n\t\t\tlog.Error(err)\n\t\t}\n\t}\n}\n\nfunc (m *Mentor) initRole() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(roles)\n}\n\nfunc (m *Mentor) initPower() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(powers)\n}\n\nfunc (m *Mentor) initRolePowerRel() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(rolePowerRels)\n}\n\nfunc (m *Mentor) initAdminUserRoleRel() {\n\t_, m.err = m.engine.Context(m.ctx).Insert(adminUserRoleRel)\n}\n\nfunc (m *Mentor) initSiteInfoInterface() {\n\tinterfaceData := map[string]string{\n\t\t\"language\":  m.userData.Language,\n\t\t\"time_zone\": \"UTC\",\n\t}\n\tinterfaceDataBytes, _ := json.Marshal(interfaceData)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"interface\",\n\t\tContent: string(interfaceDataBytes),\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoGeneralData() {\n\tgeneralData := map[string]string{\n\t\t\"name\":          m.userData.SiteName,\n\t\t\"site_url\":      m.userData.SiteURL,\n\t\t\"contact_email\": m.userData.ContactEmail,\n\t}\n\tgeneralDataBytes, _ := json.Marshal(generalData)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"general\",\n\t\tContent: string(generalDataBytes),\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoLoginConfig() {\n\tloginConfig := map[string]bool{\n\t\t\"allow_new_registrations\":   true,\n\t\t\"allow_email_registrations\": true,\n\t\t\"login_required\":            false,\n\t}\n\tloginConfigDataBytes, _ := json.Marshal(loginConfig)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"login\",\n\t\tContent: string(loginConfigDataBytes),\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoThemeConfig() {\n\tthemeConfig := `{\"theme\":\"default\",\"theme_config\":{\"default\":{\"navbar_style\":\"colored\",\"primary_color\":\"#0033ff\"}}}`\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"theme\",\n\t\tContent: themeConfig,\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoSEOConfig() {\n\tseoData := map[string]interface{}{\n\t\t\"permalink\": 1,\n\t\t\"robots\":    defaultSEORobotTxt + m.userData.SiteURL + \"/sitemap.xml\",\n\t}\n\tseoDataBytes, _ := json.Marshal(seoData)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"seo\",\n\t\tContent: string(seoDataBytes),\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoUsersConfig() {\n\tusersData := map[string]any{\n\t\t\"default_avatar\":            \"gravatar\",\n\t\t\"gravatar_base_url\":         \"https://www.gravatar.com/avatar/\",\n\t\t\"allow_update_display_name\": true,\n\t\t\"allow_update_username\":     true,\n\t\t\"allow_update_avatar\":       true,\n\t\t\"allow_update_bio\":          true,\n\t\t\"allow_update_website\":      true,\n\t\t\"allow_update_location\":     true,\n\t}\n\tusersDataBytes, _ := json.Marshal(usersData)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"users\",\n\t\tContent: string(usersDataBytes),\n\t\tStatus:  1,\n\t})\n}\n\nfunc (m *Mentor) initSiteInfoPrivilegeRank() {\n\tprivilegeRankData := map[string]interface{}{\n\t\t\"level\": schema.PrivilegeLevel2,\n\t}\n\tprivilegeRankDataBytes, _ := json.Marshal(privilegeRankData)\n\t_, m.err = m.engine.Context(m.ctx).Insert(&entity.SiteInfo{\n\t\tType:    \"privileges\",\n\t\tContent: string(privilegeRankDataBytes),\n\t\tStatus:  1,\n\t})\n}\n", "package migrations\n\nimport (\n\t\"github.com/answerdev/answer/internal/entity\"\n\t\"github.com/answerdev/answer/internal/service/permission\"\n)\n\nconst (\n\tdefaultSEORobotTxt = `User-agent: *\nDisallow: /admin\nDisallow: /search\nDisallow: /install\nDisallow: /review\nDisallow: /users/login\nDisallow: /users/register\nDisallow: /users/account-recovery\nDisallow: /users/oauth/*\nDisallow: /users/*/*\nDisallow: /answer/api\nDisallow: /*?code*\n\nSitemap: `\n)\n\nvar (\n\ttables = []interface{}{\n\t\t&entity.Activity{},\n\t\t&entity.Answer{},\n\t\t&entity.Collection{},\n\t\t&entity.CollectionGroup{},\n\t\t&entity.Comment{},\n\t\t&entity.Config{},\n\t\t&entity.Meta{},\n\t\t&entity.Notification{},\n\t\t&entity.Question{},\n\t\t&entity.Report{},\n\t\t&entity.Revision{},\n\t\t&entity.SiteInfo{},\n\t\t&entity.Tag{},\n\t\t&entity.TagRel{},\n\t\t&entity.Uniqid{},\n\t\t&entity.User{},\n\t\t&entity.Version{},\n\t\t&entity.Role{},\n\t\t&entity.RolePowerRel{},\n\t\t&entity.Power{},\n\t\t&entity.UserRoleRel{},\n\t\t&entity.PluginConfig{},\n\t\t&entity.UserExternalLogin{},\n\t}\n\n\troles = []*entity.Role{\n\t\t{ID: 1, Name: \"User\", Description: \"Default with no special access.\"},\n\t\t{ID: 2, Name: \"Admin\", Description: \"Have the full power to access the site.\"},\n\t\t{ID: 3, Name: \"Moderator\", Description: \"Has access to all posts except admin settings.\"},\n\t}\n\n\tpowers = []*entity.Power{\n\t\t{ID: 1, Name: \"admin access\", PowerType: permission.AdminAccess, Description: \"admin access\"},\n\t\t{ID: 2, Name: \"question add\", PowerType: permission.QuestionAdd, Description: \"question add\"},\n\t\t{ID: 3, Name: \"question edit\", PowerType: permission.QuestionEdit, Description: \"question edit\"},\n\t\t{ID: 4, Name: \"question edit without review\", PowerType: permission.QuestionEditWithoutReview, Description: \"question edit without review\"},\n\t\t{ID: 5, Name: \"question delete\", PowerType: permission.QuestionDelete, Description: \"question delete\"},\n\t\t{ID: 6, Name: \"question close\", PowerType: permission.QuestionClose, Description: \"question close\"},\n\t\t{ID: 7, Name: \"question reopen\", PowerType: permission.QuestionReopen, Description: \"question reopen\"},\n\t\t{ID: 8, Name: \"question vote up\", PowerType: permission.QuestionVoteUp, Description: \"question vote up\"},\n\t\t{ID: 9, Name: \"question vote down\", PowerType: permission.QuestionVoteDown, Description: \"question vote down\"},\n\t\t{ID: 10, Name: \"answer add\", PowerType: permission.AnswerAdd, Description: \"answer add\"},\n\t\t{ID: 11, Name: \"answer edit\", PowerType: permission.AnswerEdit, Description: \"answer edit\"},\n\t\t{ID: 12, Name: \"answer edit without review\", PowerType: permission.AnswerEditWithoutReview, Description: \"answer edit without review\"},\n\t\t{ID: 13, Name: \"answer delete\", PowerType: permission.AnswerDelete, Description: \"answer delete\"},\n\t\t{ID: 14, Name: \"answer accept\", PowerType: permission.AnswerAccept, Description: \"answer accept\"},\n\t\t{ID: 15, Name: \"answer vote up\", PowerType: permission.AnswerVoteUp, Description: \"answer vote up\"},\n\t\t{ID: 16, Name: \"answer vote down\", PowerType: permission.AnswerVoteDown, Description: \"answer vote down\"},\n\t\t{ID: 17, Name: \"comment add\", PowerType: permission.CommentAdd, Description: \"comment add\"},\n\t\t{ID: 18, Name: \"comment edit\", PowerType: permission.CommentEdit, Description: \"comment edit\"},\n\t\t{ID: 19, Name: \"comment delete\", PowerType: permission.CommentDelete, Description: \"comment delete\"},\n\t\t{ID: 20, Name: \"comment vote up\", PowerType: permission.CommentVoteUp, Description: \"comment vote up\"},\n\t\t{ID: 21, Name: \"comment vote down\", PowerType: permission.CommentVoteDown, Description: \"comment vote down\"},\n\t\t{ID: 22, Name: \"report add\", PowerType: permission.ReportAdd, Description: \"report add\"},\n\t\t{ID: 23, Name: \"tag add\", PowerType: permission.TagAdd, Description: \"tag add\"},\n\t\t{ID: 24, Name: \"tag edit\", PowerType: permission.TagEdit, Description: \"tag edit\"},\n\t\t{ID: 25, Name: \"tag edit without review\", PowerType: permission.TagEditWithoutReview, Description: \"tag edit without review\"},\n\t\t{ID: 26, Name: \"tag edit slug name\", PowerType: permission.TagEditSlugName, Description: \"tag edit slug name\"},\n\t\t{ID: 27, Name: \"tag delete\", PowerType: permission.TagDelete, Description: \"tag delete\"},\n\t\t{ID: 28, Name: \"tag synonym\", PowerType: permission.TagSynonym, Description: \"tag synonym\"},\n\t\t{ID: 29, Name: \"link url limit\", PowerType: permission.LinkUrlLimit, Description: \"link url limit\"},\n\t\t{ID: 30, Name: \"vote detail\", PowerType: permission.VoteDetail, Description: \"vote detail\"},\n\t\t{ID: 31, Name: \"answer audit\", PowerType: permission.AnswerAudit, Description: \"answer audit\"},\n\t\t{ID: 32, Name: \"question audit\", PowerType: permission.QuestionAudit, Description: \"question audit\"},\n\t\t{ID: 33, Name: \"tag audit\", PowerType: permission.TagAudit, Description: \"tag audit\"},\n\t\t{ID: 34, Name: \"question pin\", PowerType: permission.QuestionPin, Description: \"top the question\"},\n\t\t{ID: 35, Name: \"question hide\", PowerType: permission.QuestionHide, Description: \"hide  the question\"},\n\t\t{ID: 36, Name: \"question unpin\", PowerType: permission.QuestionUnPin, Description: \"untop the question\"},\n\t\t{ID: 37, Name: \"question show\", PowerType: permission.QuestionShow, Description: \"show the question\"},\n\t\t{ID: 38, Name: \"invite someone to answer\", PowerType: permission.AnswerInviteSomeoneToAnswer, Description: \"invite someone to answer\"},\n\t}\n\n\trolePowerRels = []*entity.RolePowerRel{\n\t\t{RoleID: 2, PowerType: permission.AdminAccess},\n\t\t{RoleID: 2, PowerType: permission.QuestionAdd},\n\t\t{RoleID: 2, PowerType: permission.QuestionEdit},\n\t\t{RoleID: 2, PowerType: permission.QuestionEditWithoutReview},\n\t\t{RoleID: 2, PowerType: permission.QuestionDelete},\n\t\t{RoleID: 2, PowerType: permission.QuestionClose},\n\t\t{RoleID: 2, PowerType: permission.QuestionReopen},\n\t\t{RoleID: 2, PowerType: permission.QuestionVoteUp},\n\t\t{RoleID: 2, PowerType: permission.QuestionVoteDown},\n\t\t{RoleID: 2, PowerType: permission.AnswerAdd},\n\t\t{RoleID: 2, PowerType: permission.AnswerEdit},\n\t\t{RoleID: 2, PowerType: permission.AnswerEditWithoutReview},\n\t\t{RoleID: 2, PowerType: permission.AnswerDelete},\n\t\t{RoleID: 2, PowerType: permission.AnswerAccept},\n\t\t{RoleID: 2, PowerType: permission.AnswerVoteUp},\n\t\t{RoleID: 2, PowerType: permission.AnswerVoteDown},\n\t\t{RoleID: 2, PowerType: permission.CommentAdd},\n\t\t{RoleID: 2, PowerType: permission.CommentEdit},\n\t\t{RoleID: 2, PowerType: permission.CommentDelete},\n\t\t{RoleID: 2, PowerType: permission.CommentVoteUp},\n\t\t{RoleID: 2, PowerType: permission.CommentVoteDown},\n\t\t{RoleID: 2, PowerType: permission.ReportAdd},\n\t\t{RoleID: 2, PowerType: permission.TagAdd},\n\t\t{RoleID: 2, PowerType: permission.TagEdit},\n\t\t{RoleID: 2, PowerType: permission.TagEditSlugName},\n\t\t{RoleID: 2, PowerType: permission.TagEditWithoutReview},\n\t\t{RoleID: 2, PowerType: permission.TagDelete},\n\t\t{RoleID: 2, PowerType: permission.TagSynonym},\n\t\t{RoleID: 2, PowerType: permission.LinkUrlLimit},\n\t\t{RoleID: 2, PowerType: permission.VoteDetail},\n\t\t{RoleID: 2, PowerType: permission.AnswerAudit},\n\t\t{RoleID: 2, PowerType: permission.QuestionAudit},\n\t\t{RoleID: 2, PowerType: permission.TagAudit},\n\t\t{RoleID: 2, PowerType: permission.TagUseReservedTag},\n\t\t{RoleID: 2, PowerType: permission.QuestionPin},\n\t\t{RoleID: 2, PowerType: permission.QuestionHide},\n\t\t{RoleID: 2, PowerType: permission.QuestionUnPin},\n\t\t{RoleID: 2, PowerType: permission.QuestionShow},\n\t\t{RoleID: 2, PowerType: permission.AnswerInviteSomeoneToAnswer},\n\n\t\t{RoleID: 3, PowerType: permission.QuestionAdd},\n\t\t{RoleID: 3, PowerType: permission.QuestionEdit},\n\t\t{RoleID: 3, PowerType: permission.QuestionEditWithoutReview},\n\t\t{RoleID: 3, PowerType: permission.QuestionDelete},\n\t\t{RoleID: 3, PowerType: permission.QuestionClose},\n\t\t{RoleID: 3, PowerType: permission.QuestionReopen},\n\t\t{RoleID: 3, PowerType: permission.QuestionVoteUp},\n\t\t{RoleID: 3, PowerType: permission.QuestionVoteDown},\n\t\t{RoleID: 3, PowerType: permission.AnswerAdd},\n\t\t{RoleID: 3, PowerType: permission.AnswerEdit},\n\t\t{RoleID: 3, PowerType: permission.AnswerEditWithoutReview},\n\t\t{RoleID: 3, PowerType: permission.AnswerDelete},\n\t\t{RoleID: 3, PowerType: permission.AnswerAccept},\n\t\t{RoleID: 3, PowerType: permission.AnswerVoteUp},\n\t\t{RoleID: 3, PowerType: permission.AnswerVoteDown},\n\t\t{RoleID: 3, PowerType: permission.CommentAdd},\n\t\t{RoleID: 3, PowerType: permission.CommentEdit},\n\t\t{RoleID: 3, PowerType: permission.CommentDelete},\n\t\t{RoleID: 3, PowerType: permission.CommentVoteUp},\n\t\t{RoleID: 3, PowerType: permission.CommentVoteDown},\n\t\t{RoleID: 3, PowerType: permission.ReportAdd},\n\t\t{RoleID: 3, PowerType: permission.TagAdd},\n\t\t{RoleID: 3, PowerType: permission.TagEdit},\n\t\t{RoleID: 3, PowerType: permission.TagEditSlugName},\n\t\t{RoleID: 3, PowerType: permission.TagEditWithoutReview},\n\t\t{RoleID: 3, PowerType: permission.TagDelete},\n\t\t{RoleID: 3, PowerType: permission.TagSynonym},\n\t\t{RoleID: 3, PowerType: permission.LinkUrlLimit},\n\t\t{RoleID: 3, PowerType: permission.VoteDetail},\n\t\t{RoleID: 3, PowerType: permission.AnswerAudit},\n\t\t{RoleID: 3, PowerType: permission.QuestionAudit},\n\t\t{RoleID: 3, PowerType: permission.TagAudit},\n\t\t{RoleID: 3, PowerType: permission.TagUseReservedTag},\n\t\t{RoleID: 3, PowerType: permission.QuestionPin},\n\t\t{RoleID: 3, PowerType: permission.QuestionHide},\n\t\t{RoleID: 3, PowerType: permission.QuestionUnPin},\n\t\t{RoleID: 3, PowerType: permission.QuestionShow},\n\t\t{RoleID: 3, PowerType: permission.AnswerInviteSomeoneToAnswer},\n\t}\n\n\tadminUserRoleRel = &entity.UserRoleRel{\n\t\tUserID: \"1\",\n\t\tRoleID: 2,\n\t}\n\n\tdefaultConfigTable = []*entity.Config{\n\t\t{ID: 1, Key: \"answer.accepted\", Value: `15`},\n\t\t{ID: 2, Key: \"answer.voted_up\", Value: `10`},\n\t\t{ID: 3, Key: \"question.voted_up\", Value: `10`},\n\t\t{ID: 4, Key: \"tag.edit_accepted\", Value: `2`},\n\t\t{ID: 5, Key: \"answer.accept\", Value: `2`},\n\t\t{ID: 6, Key: \"answer.voted_down_cancel\", Value: `2`},\n\t\t{ID: 7, Key: \"question.voted_down_cancel\", Value: `2`},\n\t\t{ID: 8, Key: \"answer.vote_down_cancel\", Value: `1`},\n\t\t{ID: 9, Key: \"question.vote_down_cancel\", Value: `1`},\n\t\t{ID: 10, Key: \"user.activated\", Value: `1`},\n\t\t{ID: 11, Key: \"edit.accepted\", Value: `2`},\n\t\t{ID: 12, Key: \"answer.vote_down\", Value: `-1`},\n\t\t{ID: 13, Key: \"question.voted_down\", Value: `-2`},\n\t\t{ID: 14, Key: \"answer.voted_down\", Value: `-2`},\n\t\t{ID: 15, Key: \"answer.accept_cancel\", Value: `-2`},\n\t\t{ID: 16, Key: \"answer.deleted\", Value: `-5`},\n\t\t{ID: 17, Key: \"question.voted_up_cancel\", Value: `-10`},\n\t\t{ID: 18, Key: \"answer.voted_up_cancel\", Value: `-10`},\n\t\t{ID: 19, Key: \"answer.accepted_cancel\", Value: `-15`},\n\t\t{ID: 20, Key: \"object.reported\", Value: `-100`},\n\t\t{ID: 21, Key: \"edit.rejected\", Value: `-2`},\n\t\t{ID: 22, Key: \"daily_rank_limit\", Value: `200`},\n\t\t{ID: 23, Key: \"daily_rank_limit.exclude\", Value: `[\"answer.accepted\"]`},\n\t\t{ID: 24, Key: \"user.follow\", Value: `0`},\n\t\t{ID: 25, Key: \"comment.vote_up\", Value: `0`},\n\t\t{ID: 26, Key: \"comment.vote_up_cancel\", Value: `0`},\n\t\t{ID: 27, Key: \"question.vote_down\", Value: `0`},\n\t\t{ID: 28, Key: \"question.vote_up\", Value: `0`},\n\t\t{ID: 29, Key: \"question.vote_up_cancel\", Value: `0`},\n\t\t{ID: 30, Key: \"answer.vote_up\", Value: `0`},\n\t\t{ID: 31, Key: \"answer.vote_up_cancel\", Value: `0`},\n\t\t{ID: 32, Key: \"question.follow\", Value: `0`},\n\t\t{ID: 33, Key: \"email.config\", Value: `{\"from_name\":\"\",\"from_email\":\"\",\"smtp_host\":\"\",\"smtp_port\":465,\"smtp_password\":\"\",\"smtp_username\":\"\",\"smtp_authentication\":true,\"encryption\":\"\",\"register_title\":\"[{{.SiteName}}] Confirm your new account\",\"register_body\":\"Welcome to {{.SiteName}}<br><br>\\n\\nClick the following link to confirm and activate your new account:<br>\\n<a href='{{.RegisterUrl}}' target='_blank'>{{.RegisterUrl}}</a><br><br>\\n\\nIf the above link is not clickable, try copying and pasting it into the address bar of your web browser.\\n\",\"pass_reset_title\":\"[{{.SiteName }}] Password reset\",\"pass_reset_body\":\"Somebody asked to reset your password on [{{.SiteName}}].<br><br>\\n\\nIf it was not you, you can safely ignore this email.<br><br>\\n\\nClick the following link to choose a new password:<br>\\n<a href='{{.PassResetUrl}}' target='_blank'>{{.PassResetUrl}}</a>\\n\",\"change_title\":\"[{{.SiteName}}] Confirm your new email address\",\"change_body\":\"Confirm your new email address for {{.SiteName}}  by clicking on the following link:<br><br>\\n\\n<a href='{{.ChangeEmailUrl}}' target='_blank'>{{.ChangeEmailUrl}}</a><br><br>\\n\\nIf you did not request this change, please ignore this email.\\n\",\"test_title\":\"[{{.SiteName}}] Test Email\",\"test_body\":\"This is a test email.\",\"new_answer_title\":\"[{{.SiteName}}] {{.DisplayName}} answered your question\",\"new_answer_body\":\"<strong><a href='{{.AnswerUrl}}'>{{.QuestionTitle}}</a></strong><br><br>\\n\\n<small>{{.DisplayName}}:</small><br>\\n<blockquote>{{.AnswerSummary}}</blockquote><br>\\n<a href='{{.AnswerUrl}}'>View it on {{.SiteName}}</a><br><br>\\n\\n<small>You are receiving this because you authored the thread. <a href='{{.UnsubscribeUrl}}'>Unsubscribe</a></small>\",\"new_comment_title\":\"[{{.SiteName}}] {{.DisplayName}} commented on your post\",\"new_comment_body\":\"<strong><a href='{{.CommentUrl}}'>{{.QuestionTitle}}</a></strong><br><br>\\n\\n<small>{{.DisplayName}}:</small><br>\\n<blockquote>{{.CommentSummary}}</blockquote><br>\\n<a href='{{.CommentUrl}}'>View it on {{.SiteName}}</a><br><br>\\n\\n<small>You are receiving this because you authored the thread. <a href='{{.UnsubscribeUrl}}'>Unsubscribe</a></small>\"}`},\n\t\t{ID: 35, Key: \"tag.follow\", Value: `0`},\n\t\t{ID: 36, Key: \"rank.question.add\", Value: `1`},\n\t\t{ID: 37, Key: \"rank.question.edit\", Value: `200`},\n\t\t{ID: 38, Key: \"rank.question.delete\", Value: `-1`},\n\t\t{ID: 39, Key: \"rank.question.vote_up\", Value: `15`},\n\t\t{ID: 40, Key: \"rank.question.vote_down\", Value: `125`},\n\t\t{ID: 41, Key: \"rank.answer.add\", Value: `1`},\n\t\t{ID: 42, Key: \"rank.answer.edit\", Value: `200`},\n\t\t{ID: 43, Key: \"rank.answer.delete\", Value: `-1`},\n\t\t{ID: 44, Key: \"rank.answer.accept\", Value: `-1`},\n\t\t{ID: 45, Key: \"rank.answer.vote_up\", Value: `15`},\n\t\t{ID: 46, Key: \"rank.answer.vote_down\", Value: `125`},\n\t\t{ID: 47, Key: \"rank.comment.add\", Value: `1`},\n\t\t{ID: 48, Key: \"rank.comment.edit\", Value: `-1`},\n\t\t{ID: 49, Key: \"rank.comment.delete\", Value: `-1`},\n\t\t{ID: 50, Key: \"rank.report.add\", Value: `1`},\n\t\t{ID: 51, Key: \"rank.tag.add\", Value: `1500`},\n\t\t{ID: 52, Key: \"rank.tag.edit\", Value: `100`},\n\t\t{ID: 53, Key: \"rank.tag.delete\", Value: `-1`},\n\t\t{ID: 54, Key: \"rank.tag.synonym\", Value: `20000`},\n\t\t{ID: 55, Key: \"rank.link.url_limit\", Value: `10`},\n\t\t{ID: 56, Key: \"rank.vote.detail\", Value: `0`},\n\t\t{ID: 57, Key: \"reason.spam\", Value: `{\"name\":\"spam\",\"description\":\"This post is an advertisement, or vandalism. It is not useful or relevant to the current topic.\"}`},\n\t\t{ID: 58, Key: \"reason.rude_or_abusive\", Value: `{\"name\":\"rude or abusive\",\"description\":\"A reasonable person would find this content inappropriate for respectful discourse.\"}`},\n\t\t{ID: 59, Key: \"reason.something\", Value: `{\"name\":\"something else\",\"description\":\"This post requires staff attention for another reason not listed above.\",\"content_type\":\"textarea\"}`},\n\t\t{ID: 60, Key: \"reason.a_duplicate\", Value: `{\"name\":\"a duplicate\",\"description\":\"This question has been asked before and already has an answer.\",\"content_type\":\"text\"}`},\n\t\t{ID: 61, Key: \"reason.not_a_answer\", Value: `{\"name\":\"not a answer\",\"description\":\"This was posted as an answer, but it does not attempt to answer the question. It should possibly be an edit, a comment, another question, or deleted altogether.\",\"content_type\":\"\"}`},\n\t\t{ID: 62, Key: \"reason.no_longer_needed\", Value: `{\"name\":\"no longer needed\",\"description\":\"This comment is outdated, conversational or not relevant to this post.\"}`},\n\t\t{ID: 63, Key: \"reason.community_specific\", Value: `{\"name\":\"a community-specific reason\",\"description\":\"This question doesn\u2019t meet a community guideline.\"}`},\n\t\t{ID: 64, Key: \"reason.not_clarity\", Value: `{\"name\":\"needs details or clarity\",\"description\":\"This question currently includes multiple questions in one. It should focus on one problem only.\",\"content_type\":\"text\"}`},\n\t\t{ID: 65, Key: \"reason.normal\", Value: `{\"name\":\"normal\",\"description\":\"A normal post available to everyone.\"}`},\n\t\t{ID: 66, Key: \"reason.normal.user\", Value: `{\"name\":\"normal\",\"description\":\"A normal user can ask and answer questions.\"}`},\n\t\t{ID: 67, Key: \"reason.closed\", Value: `{\"name\":\"closed\",\"description\":\"A closed question can\u2019t answer, but still can edit, vote and comment.\"}`},\n\t\t{ID: 68, Key: \"reason.deleted\", Value: `{\"name\":\"deleted\",\"description\":\"All reputation gained and lost will be restored.\"}`},\n\t\t{ID: 69, Key: \"reason.deleted.user\", Value: `{\"name\":\"deleted\",\"description\":\"Delete profile, authentication associations.\"}`},\n\t\t{ID: 70, Key: \"reason.suspended\", Value: `{\"name\":\"suspended\",\"description\":\"A suspended user can\u2019t log in.\"}`},\n\t\t{ID: 71, Key: \"reason.inactive\", Value: `{\"name\":\"inactive\",\"description\":\"An inactive user must re-validate their email.\"}`},\n\t\t{ID: 72, Key: \"reason.looks_ok\", Value: `{\"name\":\"looks ok\",\"description\":\"This post is good as-is and not low quality.\"}`},\n\t\t{ID: 73, Key: \"reason.needs_edit\", Value: `{\"name\":\"needs edit, and I did it\",\"description\":\"Improve and correct problems with this post yourself.\"}`},\n\t\t{ID: 74, Key: \"reason.needs_close\", Value: `{\"name\":\"needs close\",\"description\":\"A closed question can\u2019t answer, but still can edit, vote and comment.\"}`},\n\t\t{ID: 75, Key: \"reason.needs_delete\", Value: `{\"name\":\"needs delete\",\"description\":\"All reputation gained and lost will be restored.\"}`},\n\t\t{ID: 76, Key: \"question.flag.reasons\", Value: `[\"reason.spam\",\"reason.rude_or_abusive\",\"reason.something\",\"reason.a_duplicate\"]`},\n\t\t{ID: 77, Key: \"answer.flag.reasons\", Value: `[\"reason.spam\",\"reason.rude_or_abusive\",\"reason.something\",\"reason.not_a_answer\"]`},\n\t\t{ID: 78, Key: \"comment.flag.reasons\", Value: `[\"reason.spam\",\"reason.rude_or_abusive\",\"reason.something\",\"reason.no_longer_needed\"]`},\n\t\t{ID: 79, Key: \"question.close.reasons\", Value: `[\"reason.a_duplicate\",\"reason.community_specific\",\"reason.not_clarity\",\"reason.something\"]`},\n\t\t{ID: 80, Key: \"question.status.reasons\", Value: `[\"reason.normal\",\"reason.closed\",\"reason.deleted\"]`},\n\t\t{ID: 81, Key: \"answer.status.reasons\", Value: `[\"reason.normal\",\"reason.deleted\"]`},\n\t\t{ID: 82, Key: \"comment.status.reasons\", Value: `[\"reason.normal\",\"reason.deleted\"]`},\n\t\t{ID: 83, Key: \"user.status.reasons\", Value: `[\"reason.normal.user\",\"reason.suspended\",\"reason.deleted.user\",\"reason.inactive\"]`},\n\t\t{ID: 84, Key: \"question.review.reasons\", Value: `[\"reason.looks_ok\",\"reason.needs_edit\",\"reason.needs_close\",\"reason.needs_delete\"]`},\n\t\t{ID: 85, Key: \"answer.review.reasons\", Value: `[\"reason.looks_ok\",\"reason.needs_edit\",\"reason.needs_delete\"]`},\n\t\t{ID: 86, Key: \"comment.review.reasons\", Value: `[\"reason.looks_ok\",\"reason.needs_edit\",\"reason.needs_delete\"]`},\n\t\t{ID: 87, Key: \"question.asked\", Value: `0`},\n\t\t{ID: 88, Key: \"question.closed\", Value: `0`},\n\t\t{ID: 89, Key: \"question.reopened\", Value: `0`},\n\t\t{ID: 90, Key: \"question.answered\", Value: `0`},\n\t\t{ID: 91, Key: \"question.commented\", Value: `0`},\n\t\t{ID: 92, Key: \"question.accept\", Value: `0`},\n\t\t{ID: 93, Key: \"question.edited\", Value: `0`},\n\t\t{ID: 94, Key: \"question.rollback\", Value: `0`},\n\t\t{ID: 95, Key: \"question.deleted\", Value: `0`},\n\t\t{ID: 96, Key: \"question.undeleted\", Value: `0`},\n\t\t{ID: 97, Key: \"answer.answered\", Value: `0`},\n\t\t{ID: 98, Key: \"answer.commented\", Value: `0`},\n\t\t{ID: 99, Key: \"answer.edited\", Value: `0`},\n\t\t{ID: 100, Key: \"answer.rollback\", Value: `0`},\n\t\t{ID: 101, Key: \"answer.undeleted\", Value: `0`},\n\t\t{ID: 102, Key: \"tag.created\", Value: `0`},\n\t\t{ID: 103, Key: \"tag.edited\", Value: `0`},\n\t\t{ID: 104, Key: \"tag.rollback\", Value: `0`},\n\t\t{ID: 105, Key: \"tag.deleted\", Value: `0`},\n\t\t{ID: 106, Key: \"tag.undeleted\", Value: `0`},\n\t\t{ID: 107, Key: \"rank.comment.vote_up\", Value: `1`},\n\t\t{ID: 108, Key: \"rank.comment.vote_down\", Value: `1`},\n\t\t{ID: 109, Key: \"rank.question.edit_without_review\", Value: `2000`},\n\t\t{ID: 110, Key: \"rank.answer.edit_without_review\", Value: `2000`},\n\t\t{ID: 111, Key: \"rank.tag.edit_without_review\", Value: `20000`},\n\t\t{ID: 112, Key: \"rank.answer.audit\", Value: `2000`},\n\t\t{ID: 113, Key: \"rank.question.audit\", Value: `2000`},\n\t\t{ID: 114, Key: \"rank.tag.audit\", Value: `20000`},\n\t\t{ID: 115, Key: \"rank.question.close\", Value: `-1`},\n\t\t{ID: 116, Key: \"rank.question.reopen\", Value: `-1`},\n\t\t{ID: 117, Key: \"rank.tag.use_reserved_tag\", Value: `-1`},\n\t\t{ID: 118, Key: \"plugin.status\", Value: `{}`},\n\t\t{ID: 119, Key: \"question.pin\", Value: `0`},\n\t\t{ID: 120, Key: \"question.unpin\", Value: `0`},\n\t\t{ID: 121, Key: \"question.show\", Value: `0`},\n\t\t{ID: 122, Key: \"question.hide\", Value: `0`},\n\t\t{ID: 123, Key: \"rank.question.pin\", Value: `-1`},\n\t\t{ID: 124, Key: \"rank.question.unpin\", Value: `-1`},\n\t\t{ID: 125, Key: \"rank.question.show\", Value: `-1`},\n\t\t{ID: 126, Key: \"rank.question.hide\", Value: `-1`},\n\t\t{ID: 127, Key: \"rank.answer.invite_someone_to_answer\", Value: `1000`},\n\t}\n)\n", "package migrations\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/answerdev/answer/internal/entity\"\n\t\"github.com/segmentfault/pacman/log\"\n\t\"xorm.io/xorm\"\n\t\"xorm.io/xorm/schemas\"\n)\n\nfunc addActivityTimeline(x *xorm.Engine) (err error) {\n\tswitch x.Dialect().URI().DBType {\n\tcase schemas.MYSQL:\n\t\t_, err = x.Exec(\"ALTER TABLE `answer` CHANGE `updated_at` `updated_at` TIMESTAMP NULL DEFAULT NULL\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = x.Exec(\"ALTER TABLE `question` CHANGE `updated_at` `updated_at` TIMESTAMP NULL DEFAULT NULL\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tcase schemas.POSTGRES:\n\t\t_, err = x.Exec(`ALTER TABLE \"answer\" ALTER COLUMN \"updated_at\" DROP NOT NULL, ALTER COLUMN \"updated_at\" SET DEFAULT NULL`)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = x.Exec(`ALTER TABLE \"question\" ALTER COLUMN \"updated_at\" DROP NOT NULL, ALTER COLUMN \"updated_at\" SET DEFAULT NULL`)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tcase schemas.SQLITE:\n\t\t_, err = x.Exec(`DROP INDEX \"IDX_answer_user_id\";\n\nALTER TABLE \"answer\" RENAME TO \"_answer_old_v3\";\n\nCREATE TABLE \"answer\" (\n  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  \"created_at\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  \"updated_at\" DATETIME DEFAULT NULL,\n  \"question_id\" INTEGER NOT NULL DEFAULT 0,\n  \"user_id\" INTEGER NOT NULL DEFAULT 0,\n  \"original_text\" TEXT NOT NULL,\n  \"parsed_text\" TEXT NOT NULL,\n  \"status\" INTEGER NOT NULL DEFAULT 1,\n  \"adopted\" INTEGER NOT NULL DEFAULT 1,\n  \"comment_count\" INTEGER NOT NULL DEFAULT 0,\n  \"vote_count\" INTEGER NOT NULL DEFAULT 0,\n  \"revision_id\" INTEGER NOT NULL DEFAULT 0\n);\n\nINSERT INTO \"answer\" (\"id\", \"created_at\", \"updated_at\", \"question_id\", \"user_id\", \"original_text\", \"parsed_text\", \"status\", \"adopted\", \"comment_count\", \"vote_count\", \"revision_id\") SELECT \"id\", \"created_at\", \"updated_at\", \"question_id\", \"user_id\", \"original_text\", \"parsed_text\", \"status\", \"adopted\", \"comment_count\", \"vote_count\", \"revision_id\" FROM \"_answer_old_v3\";\n\nCREATE INDEX \"IDX_answer_user_id\"\nON \"answer\" (\n  \"user_id\" ASC\n);\nDROP INDEX \"IDX_question_user_id\";\n\nALTER TABLE \"question\" RENAME TO \"_question_old_v3\";\n\nCREATE TABLE \"question\" (\n  \"id\" INTEGER NOT NULL,\n  \"created_at\" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  \"updated_at\" DATETIME DEFAULT NULL,\n  \"user_id\" INTEGER NOT NULL DEFAULT 0,\n  \"title\" TEXT NOT NULL DEFAULT '',\n  \"original_text\" TEXT NOT NULL,\n  \"parsed_text\" TEXT NOT NULL,\n  \"status\" INTEGER NOT NULL DEFAULT 1,\n  \"view_count\" INTEGER NOT NULL DEFAULT 0,\n  \"unique_view_count\" INTEGER NOT NULL DEFAULT 0,\n  \"vote_count\" INTEGER NOT NULL DEFAULT 0,\n  \"answer_count\" INTEGER NOT NULL DEFAULT 0,\n  \"collection_count\" INTEGER NOT NULL DEFAULT 0,\n  \"follow_count\" INTEGER NOT NULL DEFAULT 0,\n  \"accepted_answer_id\" INTEGER NOT NULL DEFAULT 0,\n  \"last_answer_id\" INTEGER NOT NULL DEFAULT 0,\n  \"post_update_time\" DATETIME DEFAULT CURRENT_TIMESTAMP,\n  \"revision_id\" INTEGER NOT NULL DEFAULT 0,\n  PRIMARY KEY (\"id\")\n);\n\nINSERT INTO \"question\" (\"id\", \"created_at\", \"updated_at\", \"user_id\", \"title\", \"original_text\", \"parsed_text\", \"status\", \"view_count\", \"unique_view_count\", \"vote_count\", \"answer_count\", \"collection_count\", \"follow_count\", \"accepted_answer_id\", \"last_answer_id\", \"post_update_time\", \"revision_id\") SELECT \"id\", \"created_at\", \"updated_at\", \"user_id\", \"title\", \"original_text\", \"parsed_text\", \"status\", \"view_count\", \"unique_view_count\", \"vote_count\", \"answer_count\", \"collection_count\", \"follow_count\", \"accepted_answer_id\", \"last_answer_id\", \"post_update_time\", \"revision_id\" FROM \"_question_old_v3\";\n\nCREATE INDEX \"IDX_question_user_id\"\nON \"question\" (\n  \"user_id\" ASC\n);`)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// only increasing field length to 128\n\ttype Config struct {\n\t\tID  int    `xorm:\"not null pk autoincr INT(11) id\"`\n\t\tKey string `xorm:\"unique VARCHAR(128) key\"`\n\t}\n\tif err := x.Sync(new(Config)); err != nil {\n\t\treturn fmt.Errorf(\"sync config table failed: %w\", err)\n\t}\n\tdefaultConfigTable := []*entity.Config{\n\t\t{ID: 36, Key: \"rank.question.add\", Value: `1`},\n\t\t{ID: 37, Key: \"rank.question.edit\", Value: `200`},\n\t\t{ID: 38, Key: \"rank.question.delete\", Value: `-1`},\n\t\t{ID: 39, Key: \"rank.question.vote_up\", Value: `15`},\n\t\t{ID: 40, Key: \"rank.question.vote_down\", Value: `125`},\n\t\t{ID: 41, Key: \"rank.answer.add\", Value: `1`},\n\t\t{ID: 42, Key: \"rank.answer.edit\", Value: `200`},\n\t\t{ID: 43, Key: \"rank.answer.delete\", Value: `-1`},\n\t\t{ID: 44, Key: \"rank.answer.accept\", Value: `-1`},\n\t\t{ID: 45, Key: \"rank.answer.vote_up\", Value: `15`},\n\t\t{ID: 46, Key: \"rank.answer.vote_down\", Value: `125`},\n\t\t{ID: 47, Key: \"rank.comment.add\", Value: `1`},\n\t\t{ID: 48, Key: \"rank.comment.edit\", Value: `-1`},\n\t\t{ID: 49, Key: \"rank.comment.delete\", Value: `-1`},\n\t\t{ID: 50, Key: \"rank.report.add\", Value: `1`},\n\t\t{ID: 51, Key: \"rank.tag.add\", Value: `1500`},\n\t\t{ID: 52, Key: \"rank.tag.edit\", Value: `100`},\n\t\t{ID: 53, Key: \"rank.tag.delete\", Value: `-1`},\n\t\t{ID: 54, Key: \"rank.tag.synonym\", Value: `20000`},\n\t\t{ID: 55, Key: \"rank.link.url_limit\", Value: `10`},\n\t\t{ID: 56, Key: \"rank.vote.detail\", Value: `0`},\n\n\t\t{ID: 87, Key: \"question.asked\", Value: `0`},\n\t\t{ID: 88, Key: \"question.closed\", Value: `0`},\n\t\t{ID: 89, Key: \"question.reopened\", Value: `0`},\n\t\t{ID: 90, Key: \"question.answered\", Value: `0`},\n\t\t{ID: 91, Key: \"question.commented\", Value: `0`},\n\t\t{ID: 92, Key: \"question.accept\", Value: `0`},\n\t\t{ID: 93, Key: \"question.edited\", Value: `0`},\n\t\t{ID: 94, Key: \"question.rollback\", Value: `0`},\n\t\t{ID: 95, Key: \"question.deleted\", Value: `0`},\n\t\t{ID: 96, Key: \"question.undeleted\", Value: `0`},\n\t\t{ID: 97, Key: \"answer.answered\", Value: `0`},\n\t\t{ID: 98, Key: \"answer.commented\", Value: `0`},\n\t\t{ID: 99, Key: \"answer.edited\", Value: `0`},\n\t\t{ID: 100, Key: \"answer.rollback\", Value: `0`},\n\t\t{ID: 101, Key: \"answer.undeleted\", Value: `0`},\n\t\t{ID: 102, Key: \"tag.created\", Value: `0`},\n\t\t{ID: 103, Key: \"tag.edited\", Value: `0`},\n\t\t{ID: 104, Key: \"tag.rollback\", Value: `0`},\n\t\t{ID: 105, Key: \"tag.deleted\", Value: `0`},\n\t\t{ID: 106, Key: \"tag.undeleted\", Value: `0`},\n\n\t\t{ID: 107, Key: \"rank.comment.vote_up\", Value: `1`},\n\t\t{ID: 108, Key: \"rank.comment.vote_down\", Value: `1`},\n\t\t{ID: 109, Key: \"rank.question.edit_without_review\", Value: `2000`},\n\t\t{ID: 110, Key: \"rank.answer.edit_without_review\", Value: `2000`},\n\t\t{ID: 111, Key: \"rank.tag.edit_without_review\", Value: `20000`},\n\t\t{ID: 112, Key: \"rank.answer.audit\", Value: `2000`},\n\t\t{ID: 113, Key: \"rank.question.audit\", Value: `2000`},\n\t\t{ID: 114, Key: \"rank.tag.audit\", Value: `20000`},\n\t}\n\tfor _, c := range defaultConfigTable {\n\t\texist, err := x.Get(&entity.Config{ID: c.ID, Key: c.Key})\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"get config failed: %w\", err)\n\t\t}\n\t\tif exist {\n\t\t\tif _, err = x.Update(c, &entity.Config{ID: c.ID, Key: c.Key}); err != nil {\n\t\t\t\tlog.Errorf(\"update %+v config failed: %s\", c, err)\n\t\t\t\treturn fmt.Errorf(\"update config failed: %w\", err)\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tif _, err = x.Insert(&entity.Config{ID: c.ID, Key: c.Key, Value: c.Value}); err != nil {\n\t\t\tlog.Errorf(\"insert %+v config failed: %s\", c, err)\n\t\t\treturn fmt.Errorf(\"add config failed: %w\", err)\n\t\t}\n\t}\n\n\ttype Revision struct {\n\t\tID           string `xorm:\"not null pk autoincr BIGINT(20) id\"`\n\t\tObjectID     string `xorm:\"not null default 0 BIGINT(20) INDEX object_id\"`\n\t\tReviewUserID int64  `xorm:\"not null default 0 BIGINT(20) review_user_id\"`\n\t}\n\ttype Activity struct {\n\t\tID               string    `xorm:\"not null pk autoincr BIGINT(20) id\"`\n\t\tCancelledAt      time.Time `xorm:\"TIMESTAMP cancelled_at\"`\n\t\tUserID           string    `xorm:\"not null index BIGINT(20) user_id\"`\n\t\tTriggerUserID    int64     `xorm:\"not null default 0 index BIGINT(20) trigger_user_id\"`\n\t\tObjectID         string    `xorm:\"not null default 0 index BIGINT(20) object_id\"`\n\t\tRevisionID       int64     `xorm:\"not null default 0 BIGINT(20) revision_id\"`\n\t\tOriginalObjectID string    `xorm:\"not null default 0 BIGINT(20) original_object_id\"`\n\t}\n\ttype Tag struct {\n\t\tID       string `xorm:\"not null pk comment('tag_id') BIGINT(20) id\"`\n\t\tSlugName string `xorm:\"not null default '' unique VARCHAR(35) slug_name\"`\n\t\tUserID   string `xorm:\"not null default 0 BIGINT(20) user_id\"`\n\t}\n\ttype Question struct {\n\t\tID             string    `xorm:\"not null pk BIGINT(20) id\"`\n\t\tUserID         string    `xorm:\"not null default 0 BIGINT(20) INDEX user_id\"`\n\t\tUpdatedAt      time.Time `xorm:\"updated_at TIMESTAMP\"`\n\t\tLastEditUserID string    `xorm:\"not null default 0 BIGINT(20) last_edit_user_id\"`\n\t\tPostUpdateTime time.Time `xorm:\"post_update_time TIMESTAMP\"`\n\t}\n\ttype Answer struct {\n\t\tID             string    `xorm:\"not null pk autoincr BIGINT(20) id\"`\n\t\tUserID         string    `xorm:\"not null default 0 BIGINT(20) INDEX user_id\"`\n\t\tUpdatedAt      time.Time `xorm:\"updated_at TIMESTAMP\"`\n\t\tLastEditUserID string    `xorm:\"not null default 0 BIGINT(20) last_edit_user_id\"`\n\t}\n\n\terr = x.Sync(new(Activity), new(Revision), new(Tag), new(Question), new(Answer))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"sync table failed %w\", err)\n\t}\n\treturn nil\n}\n", "package schema\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/mail\"\n\t\"net/url\"\n\n\t\"github.com/answerdev/answer/internal/base/constant\"\n\t\"github.com/answerdev/answer/internal/base/handler\"\n\t\"github.com/answerdev/answer/internal/base/reason\"\n\t\"github.com/answerdev/answer/internal/base/translator\"\n\t\"github.com/answerdev/answer/internal/base/validator\"\n\t\"github.com/segmentfault/pacman/errors\"\n)\n\n// SiteGeneralReq site general request\ntype SiteGeneralReq struct {\n\tName             string `validate:\"required,sanitizer,gt=1,lte=128\" form:\"name\" json:\"name\"`\n\tShortDescription string `validate:\"omitempty,sanitizer,gt=3,lte=255\" form:\"short_description\" json:\"short_description\"`\n\tDescription      string `validate:\"omitempty,sanitizer,gt=3,lte=2000\" form:\"description\" json:\"description\"`\n\tSiteUrl          string `validate:\"required,sanitizer,gt=1,lte=512,url\" form:\"site_url\" json:\"site_url\"`\n\tContactEmail     string `validate:\"required,sanitizer,gt=1,lte=512,email\" form:\"contact_email\" json:\"contact_email\"`\n}\n\nfunc (r *SiteGeneralReq) FormatSiteUrl() {\n\tparsedUrl, err := url.Parse(r.SiteUrl)\n\tif err != nil {\n\t\treturn\n\t}\n\tr.SiteUrl = fmt.Sprintf(\"%s://%s\", parsedUrl.Scheme, parsedUrl.Host)\n}\n\n// SiteInterfaceReq site interface request\ntype SiteInterfaceReq struct {\n\tLanguage string `validate:\"required,gt=1,lte=128\" form:\"language\" json:\"language\"`\n\tTimeZone string `validate:\"required,gt=1,lte=128\" form:\"time_zone\" json:\"time_zone\"`\n}\n\n// SiteBrandingReq site branding request\ntype SiteBrandingReq struct {\n\tLogo       string `validate:\"omitempty,gt=0,lte=512\" form:\"logo\" json:\"logo\"`\n\tMobileLogo string `validate:\"omitempty,gt=0,lte=512\" form:\"mobile_logo\" json:\"mobile_logo\"`\n\tSquareIcon string `validate:\"omitempty,gt=0,lte=512\" form:\"square_icon\" json:\"square_icon\"`\n\tFavicon    string `validate:\"omitempty,gt=0,lte=512\" form:\"favicon\" json:\"favicon\"`\n}\n\n// SiteWriteReq site write request\ntype SiteWriteReq struct {\n\tRequiredTag   bool     `validate:\"omitempty\" form:\"required_tag\" json:\"required_tag\"`\n\tRecommendTags []string `validate:\"omitempty\" form:\"recommend_tags\" json:\"recommend_tags\"`\n\tReservedTags  []string `validate:\"omitempty\" form:\"reserved_tags\" json:\"reserved_tags\"`\n\tUserID        string   `json:\"-\"`\n}\n\n// SiteLegalReq site branding request\ntype SiteLegalReq struct {\n\tTermsOfServiceOriginalText string `json:\"terms_of_service_original_text\"`\n\tTermsOfServiceParsedText   string `json:\"terms_of_service_parsed_text\"`\n\tPrivacyPolicyOriginalText  string `json:\"privacy_policy_original_text\"`\n\tPrivacyPolicyParsedText    string `json:\"privacy_policy_parsed_text\"`\n}\n\n// GetSiteLegalInfoReq site site legal request\ntype GetSiteLegalInfoReq struct {\n\tInfoType string `validate:\"required,oneof=tos privacy\" form:\"info_type\"`\n}\n\nfunc (r *GetSiteLegalInfoReq) IsTOS() bool {\n\treturn r.InfoType == \"tos\"\n}\n\nfunc (r *GetSiteLegalInfoReq) IsPrivacy() bool {\n\treturn r.InfoType == \"privacy\"\n}\n\n// GetSiteLegalInfoResp get site legal info response\ntype GetSiteLegalInfoResp struct {\n\tTermsOfServiceOriginalText string `json:\"terms_of_service_original_text,omitempty\"`\n\tTermsOfServiceParsedText   string `json:\"terms_of_service_parsed_text,omitempty\"`\n\tPrivacyPolicyOriginalText  string `json:\"privacy_policy_original_text,omitempty\"`\n\tPrivacyPolicyParsedText    string `json:\"privacy_policy_parsed_text,omitempty\"`\n}\n\n// SiteUsersReq site users config request\ntype SiteUsersReq struct {\n\tDefaultAvatar          string `validate:\"required,oneof=system gravatar\" json:\"default_avatar\"`\n\tGravatarBaseURL        string `json:\"gravatar_base_url\"`\n\tAllowUpdateDisplayName bool   `json:\"allow_update_display_name\"`\n\tAllowUpdateUsername    bool   `json:\"allow_update_username\"`\n\tAllowUpdateAvatar      bool   `json:\"allow_update_avatar\"`\n\tAllowUpdateBio         bool   `json:\"allow_update_bio\"`\n\tAllowUpdateWebsite     bool   `json:\"allow_update_website\"`\n\tAllowUpdateLocation    bool   `json:\"allow_update_location\"`\n}\n\n// SiteLoginReq site login request\ntype SiteLoginReq struct {\n\tAllowNewRegistrations   bool     `json:\"allow_new_registrations\"`\n\tAllowEmailRegistrations bool     `json:\"allow_email_registrations\"`\n\tLoginRequired           bool     `json:\"login_required\"`\n\tAllowEmailDomains       []string `json:\"allow_email_domains\"`\n}\n\n// SiteCustomCssHTMLReq site custom css html\ntype SiteCustomCssHTMLReq struct {\n\tCustomHead    string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_head\"`\n\tCustomCss     string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_css\"`\n\tCustomHeader  string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_header\"`\n\tCustomFooter  string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_footer\"`\n\tCustomSideBar string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_sidebar\"`\n}\n\n// SiteThemeReq site theme config\ntype SiteThemeReq struct {\n\tTheme       string                 `validate:\"required,gt=0,lte=255\" json:\"theme\"`\n\tThemeConfig map[string]interface{} `validate:\"omitempty\" json:\"theme_config\"`\n}\n\ntype SiteSeoReq struct {\n\tPermaLink int    `validate:\"required,lte=4,gte=0\" form:\"permalink\" json:\"permalink\"`\n\tRobots    string `validate:\"required\" form:\"robots\" json:\"robots\"`\n}\n\nfunc (s *SiteSeoResp) IsShortLink() bool {\n\treturn s.PermaLink == constant.PermaLinkQuestionIDAndTitleByShortID ||\n\t\ts.PermaLink == constant.PermaLinkQuestionIDByShortID\n}\n\n// SiteGeneralResp site general response\ntype SiteGeneralResp SiteGeneralReq\n\n// SiteInterfaceResp site interface response\ntype SiteInterfaceResp SiteInterfaceReq\n\n// SiteBrandingResp site branding response\ntype SiteBrandingResp SiteBrandingReq\n\n// SiteLoginResp site login response\ntype SiteLoginResp SiteLoginReq\n\n// SiteCustomCssHTMLResp site custom css html response\ntype SiteCustomCssHTMLResp SiteCustomCssHTMLReq\n\n// SiteUsersResp site users response\ntype SiteUsersResp SiteUsersReq\n\n// SiteThemeResp site theme response\ntype SiteThemeResp struct {\n\tThemeOptions []*ThemeOption         `json:\"theme_options\"`\n\tTheme        string                 `json:\"theme\"`\n\tThemeConfig  map[string]interface{} `json:\"theme_config\"`\n}\n\nfunc (s *SiteThemeResp) TrTheme(ctx context.Context) {\n\tla := handler.GetLangByCtx(ctx)\n\tfor _, option := range s.ThemeOptions {\n\t\ttr := translator.Tr(la, option.Value)\n\t\t// if tr is equal the option value means not found translation, so use the original label\n\t\tif tr != option.Value {\n\t\t\toption.Label = tr\n\t\t}\n\t}\n}\n\n// ThemeOption get label option\ntype ThemeOption struct {\n\tLabel string `json:\"label\"`\n\tValue string `json:\"value\"`\n}\n\n// SiteWriteResp site write response\ntype SiteWriteResp SiteWriteReq\n\n// SiteLegalResp site write response\ntype SiteLegalResp SiteLegalReq\n\n// SiteSeoResp site write response\ntype SiteSeoResp SiteSeoReq\n\n// SiteInfoResp get site info response\ntype SiteInfoResp struct {\n\tGeneral       *SiteGeneralResp       `json:\"general\"`\n\tInterface     *SiteInterfaceResp     `json:\"interface\"`\n\tBranding      *SiteBrandingResp      `json:\"branding\"`\n\tLogin         *SiteLoginResp         `json:\"login\"`\n\tTheme         *SiteThemeResp         `json:\"theme\"`\n\tCustomCssHtml *SiteCustomCssHTMLResp `json:\"custom_css_html\"`\n\tSiteSeo       *SiteSeoResp           `json:\"site_seo\"`\n\tSiteUsers     *SiteUsersResp         `json:\"site_users\"`\n\tVersion       string                 `json:\"version\"`\n\tRevision      string                 `json:\"revision\"`\n}\ntype TemplateSiteInfoResp struct {\n\tGeneral       *SiteGeneralResp       `json:\"general\"`\n\tInterface     *SiteInterfaceResp     `json:\"interface\"`\n\tBranding      *SiteBrandingResp      `json:\"branding\"`\n\tSiteSeo       *SiteSeoResp           `json:\"site_seo\"`\n\tCustomCssHtml *SiteCustomCssHTMLResp `json:\"custom_css_html\"`\n\tTitle         string\n\tYear          string\n\tCanonical     string\n\tJsonLD        string\n\tKeywords      string\n\tDescription   string\n}\n\n// UpdateSMTPConfigReq get smtp config request\ntype UpdateSMTPConfigReq struct {\n\tFromEmail          string `validate:\"omitempty,gt=0,lte=256\" json:\"from_email\"`\n\tFromName           string `validate:\"omitempty,gt=0,lte=256\" json:\"from_name\"`\n\tSMTPHost           string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_host\"`\n\tSMTPPort           int    `validate:\"omitempty,min=1,max=65535\" json:\"smtp_port\"`\n\tEncryption         string `validate:\"omitempty,oneof=SSL\" json:\"encryption\"` // \"\" SSL\n\tSMTPUsername       string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_username\"`\n\tSMTPPassword       string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_password\"`\n\tSMTPAuthentication bool   `validate:\"omitempty\" json:\"smtp_authentication\"`\n\tTestEmailRecipient string `validate:\"omitempty,email\" json:\"test_email_recipient\"`\n}\n\nfunc (r *UpdateSMTPConfigReq) Check() (errField []*validator.FormErrorField, err error) {\n\t_, err = mail.ParseAddress(r.FromName)\n\tif err == nil {\n\t\treturn append(errField, &validator.FormErrorField{\n\t\t\tErrorField: \"from_name\",\n\t\t\tErrorMsg:   reason.SMTPConfigFromNameCannotBeEmail,\n\t\t}), errors.BadRequest(reason.SMTPConfigFromNameCannotBeEmail)\n\t}\n\treturn nil, nil\n}\n\n// GetSMTPConfigResp get smtp config response\ntype GetSMTPConfigResp struct {\n\tFromEmail          string `json:\"from_email\"`\n\tFromName           string `json:\"from_name\"`\n\tSMTPHost           string `json:\"smtp_host\"`\n\tSMTPPort           int    `json:\"smtp_port\"`\n\tEncryption         string `json:\"encryption\"` // \"\" SSL\n\tSMTPUsername       string `json:\"smtp_username\"`\n\tSMTPPassword       string `json:\"smtp_password\"`\n\tSMTPAuthentication bool   `json:\"smtp_authentication\"`\n}\n\n// GetManifestJsonResp get manifest json response\ntype GetManifestJsonResp struct {\n\tManifestVersion int               `json:\"manifest_version\"`\n\tVersion         string            `json:\"version\"`\n\tRevision        string            `json:\"revision\"`\n\tShortName       string            `json:\"short_name\"`\n\tName            string            `json:\"name\"`\n\tIcons           map[string]string `json:\"icons\"`\n\tStartUrl        string            `json:\"start_url\"`\n\tDisplay         string            `json:\"display\"`\n\tThemeColor      string            `json:\"theme_color\"`\n\tBackgroundColor string            `json:\"background_color\"`\n}\n\nconst (\n\t// PrivilegeLevel1 low\n\tPrivilegeLevel1 PrivilegeLevel = 1\n\t// PrivilegeLevel2 medium\n\tPrivilegeLevel2 PrivilegeLevel = 2\n\t// PrivilegeLevel3 high\n\tPrivilegeLevel3 PrivilegeLevel = 3\n)\n\ntype PrivilegeLevel int\ntype PrivilegeOptions []*PrivilegeOption\n\nfunc (p PrivilegeOptions) Choose(level PrivilegeLevel) (option *PrivilegeOption) {\n\tfor _, op := range p {\n\t\tif op.Level == level {\n\t\t\treturn op\n\t\t}\n\t}\n\treturn nil\n}\n\n// GetPrivilegesConfigResp get privileges config response\ntype GetPrivilegesConfigResp struct {\n\tOptions       []*PrivilegeOption `json:\"options\"`\n\tSelectedLevel PrivilegeLevel     `json:\"selected_level\"`\n}\n\n// PrivilegeOption privilege option\ntype PrivilegeOption struct {\n\tLevel      PrivilegeLevel        `json:\"level\"`\n\tLevelDesc  string                `json:\"level_desc\"`\n\tPrivileges []*constant.Privilege `json:\"privileges\"`\n}\n\n// UpdatePrivilegesConfigReq update privileges config request\ntype UpdatePrivilegesConfigReq struct {\n\tLevel PrivilegeLevel `validate:\"required,min=1,max=3\" json:\"level\"`\n}\n\nvar (\n\tDefaultPrivilegeOptions      PrivilegeOptions\n\tprivilegeOptionsLevelMapping = map[string][]int{\n\t\tconstant.RankQuestionAddKey:               {1, 1, 1},\n\t\tconstant.RankAnswerAddKey:                 {1, 1, 1},\n\t\tconstant.RankCommentAddKey:                {1, 1, 1},\n\t\tconstant.RankReportAddKey:                 {1, 1, 1},\n\t\tconstant.RankCommentVoteUpKey:             {1, 1, 1},\n\t\tconstant.RankLinkUrlLimitKey:              {1, 10, 10},\n\t\tconstant.RankQuestionVoteUpKey:            {1, 1, 15},\n\t\tconstant.RankAnswerVoteUpKey:              {1, 1, 15},\n\t\tconstant.RankQuestionVoteDownKey:          {125, 125, 125},\n\t\tconstant.RankAnswerVoteDownKey:            {125, 125, 125},\n\t\tconstant.RankInviteSomeoneToAnswerKey:     {1, 500, 1000},\n\t\tconstant.RankTagAddKey:                    {1, 750, 1500},\n\t\tconstant.RankTagEditKey:                   {1, 50, 100},\n\t\tconstant.RankQuestionEditKey:              {1, 100, 200},\n\t\tconstant.RankAnswerEditKey:                {1, 100, 200},\n\t\tconstant.RankQuestionEditWithoutReviewKey: {1, 1000, 2000},\n\t\tconstant.RankAnswerEditWithoutReviewKey:   {1, 1000, 2000},\n\t\tconstant.RankQuestionAuditKey:             {1, 1000, 2000},\n\t\tconstant.RankAnswerAuditKey:               {1, 1000, 2000},\n\t\tconstant.RankTagAuditKey:                  {1, 2500, 5000},\n\t\tconstant.RankTagEditWithoutReviewKey:      {1, 10000, 20000},\n\t\tconstant.RankTagSynonymKey:                {1, 10000, 20000},\n\t}\n)\n\nfunc init() {\n\tDefaultPrivilegeOptions = append(DefaultPrivilegeOptions, &PrivilegeOption{\n\t\tLevel:     PrivilegeLevel1,\n\t\tLevelDesc: reason.PrivilegeLevel1Desc,\n\t}, &PrivilegeOption{\n\t\tLevel:     PrivilegeLevel2,\n\t\tLevelDesc: reason.PrivilegeLevel2Desc,\n\t}, &PrivilegeOption{\n\t\tLevel:     PrivilegeLevel3,\n\t\tLevelDesc: reason.PrivilegeLevel3Desc,\n\t})\n\n\tfor _, option := range DefaultPrivilegeOptions {\n\t\tfor _, privilege := range constant.RankAllPrivileges {\n\t\t\tif len(privilegeOptionsLevelMapping[privilege.Key]) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\toption.Privileges = append(option.Privileges, &constant.Privilege{\n\t\t\t\tLabel: privilege.Label,\n\t\t\t\tValue: privilegeOptionsLevelMapping[privilege.Key][option.Level-1],\n\t\t\t\tKey:   privilege.Key,\n\t\t\t})\n\t\t}\n\t}\n}\n", "package siteinfo\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/answerdev/answer/internal/base/constant\"\n\t\"github.com/answerdev/answer/internal/base/handler\"\n\t\"github.com/answerdev/answer/internal/base/reason\"\n\t\"github.com/answerdev/answer/internal/base/translator\"\n\t\"github.com/answerdev/answer/internal/entity\"\n\t\"github.com/answerdev/answer/internal/schema\"\n\t\"github.com/answerdev/answer/internal/service/config\"\n\t\"github.com/answerdev/answer/internal/service/export\"\n\tquestioncommon \"github.com/answerdev/answer/internal/service/question_common\"\n\t\"github.com/answerdev/answer/internal/service/siteinfo_common\"\n\ttagcommon \"github.com/answerdev/answer/internal/service/tag_common\"\n\t\"github.com/answerdev/answer/plugin\"\n\t\"github.com/jinzhu/copier\"\n\t\"github.com/segmentfault/pacman/errors\"\n\t\"github.com/segmentfault/pacman/log\"\n)\n\ntype SiteInfoService struct {\n\tsiteInfoRepo          siteinfo_common.SiteInfoRepo\n\tsiteInfoCommonService siteinfo_common.SiteInfoCommonService\n\temailService          *export.EmailService\n\ttagCommonService      *tagcommon.TagCommonService\n\tconfigService         *config.ConfigService\n\tquestioncommon        *questioncommon.QuestionCommon\n}\n\nfunc NewSiteInfoService(\n\tsiteInfoRepo siteinfo_common.SiteInfoRepo,\n\tsiteInfoCommonService siteinfo_common.SiteInfoCommonService,\n\temailService *export.EmailService,\n\ttagCommonService *tagcommon.TagCommonService,\n\tconfigService *config.ConfigService,\n\tquestioncommon *questioncommon.QuestionCommon,\n\n) *SiteInfoService {\n\tplugin.RegisterGetSiteURLFunc(func() string {\n\t\tgeneralSiteInfo, err := siteInfoCommonService.GetSiteGeneral(context.Background())\n\t\tif err != nil {\n\t\t\tlog.Error(err)\n\t\t\treturn \"\"\n\t\t}\n\t\treturn generalSiteInfo.SiteUrl\n\t})\n\n\treturn &SiteInfoService{\n\t\tsiteInfoRepo:          siteInfoRepo,\n\t\tsiteInfoCommonService: siteInfoCommonService,\n\t\temailService:          emailService,\n\t\ttagCommonService:      tagCommonService,\n\t\tconfigService:         configService,\n\t\tquestioncommon:        questioncommon,\n\t}\n}\n\n// GetSiteGeneral get site info general\nfunc (s *SiteInfoService) GetSiteGeneral(ctx context.Context) (resp *schema.SiteGeneralResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteGeneral(ctx)\n}\n\n// GetSiteInterface get site info interface\nfunc (s *SiteInfoService) GetSiteInterface(ctx context.Context) (resp *schema.SiteInterfaceResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteInterface(ctx)\n}\n\n// GetSiteBranding get site info branding\nfunc (s *SiteInfoService) GetSiteBranding(ctx context.Context) (resp *schema.SiteBrandingResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteBranding(ctx)\n}\n\n// GetSiteUsers get site info about users\nfunc (s *SiteInfoService) GetSiteUsers(ctx context.Context) (resp *schema.SiteUsersResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteUsers(ctx)\n}\n\n// GetSiteWrite get site info write\nfunc (s *SiteInfoService) GetSiteWrite(ctx context.Context) (resp *schema.SiteWriteResp, err error) {\n\tresp = &schema.SiteWriteResp{}\n\tsiteInfo, exist, err := s.siteInfoRepo.GetByType(ctx, constant.SiteTypeWrite)\n\tif err != nil {\n\t\tlog.Error(err)\n\t\treturn resp, nil\n\t}\n\tif exist {\n\t\t_ = json.Unmarshal([]byte(siteInfo.Content), resp)\n\t}\n\n\tresp.RecommendTags, err = s.tagCommonService.GetSiteWriteRecommendTag(ctx)\n\tif err != nil {\n\t\tlog.Error(err)\n\t}\n\tresp.ReservedTags, err = s.tagCommonService.GetSiteWriteReservedTag(ctx)\n\tif err != nil {\n\t\tlog.Error(err)\n\t}\n\treturn resp, nil\n}\n\n// GetSiteLegal get site legal info\nfunc (s *SiteInfoService) GetSiteLegal(ctx context.Context) (resp *schema.SiteLegalResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteLegal(ctx)\n}\n\n// GetSiteLogin get site login info\nfunc (s *SiteInfoService) GetSiteLogin(ctx context.Context) (resp *schema.SiteLoginResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteLogin(ctx)\n}\n\n// GetSiteCustomCssHTML get site custom css html config\nfunc (s *SiteInfoService) GetSiteCustomCssHTML(ctx context.Context) (resp *schema.SiteCustomCssHTMLResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteCustomCssHTML(ctx)\n}\n\n// GetSiteTheme get site theme config\nfunc (s *SiteInfoService) GetSiteTheme(ctx context.Context) (resp *schema.SiteThemeResp, err error) {\n\treturn s.siteInfoCommonService.GetSiteTheme(ctx)\n}\n\nfunc (s *SiteInfoService) SaveSiteGeneral(ctx context.Context, req schema.SiteGeneralReq) (err error) {\n\treq.FormatSiteUrl()\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeGeneral,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeGeneral, data)\n}\n\nfunc (s *SiteInfoService) SaveSiteInterface(ctx context.Context, req schema.SiteInterfaceReq) (err error) {\n\t// check language\n\tif !translator.CheckLanguageIsValid(req.Language) {\n\t\terr = errors.BadRequest(reason.LangNotFound)\n\t\treturn\n\t}\n\n\tcontent, _ := json.Marshal(req)\n\tdata := entity.SiteInfo{\n\t\tType:    constant.SiteTypeInterface,\n\t\tContent: string(content),\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeInterface, &data)\n}\n\n// SaveSiteBranding save site branding information\nfunc (s *SiteInfoService) SaveSiteBranding(ctx context.Context, req *schema.SiteBrandingReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeBranding,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeBranding, data)\n}\n\n// SaveSiteWrite save site configuration about write\nfunc (s *SiteInfoService) SaveSiteWrite(ctx context.Context, req *schema.SiteWriteReq) (resp interface{}, err error) {\n\terrData, err := s.tagCommonService.SetSiteWriteTag(ctx, req.RecommendTags, req.ReservedTags, req.UserID)\n\tif err != nil {\n\t\treturn errData, err\n\t}\n\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeWrite,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn nil, s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeWrite, data)\n}\n\n// SaveSiteLegal save site legal configuration\nfunc (s *SiteInfoService) SaveSiteLegal(ctx context.Context, req *schema.SiteLegalReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeLegal,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeLegal, data)\n}\n\n// SaveSiteLogin save site legal configuration\nfunc (s *SiteInfoService) SaveSiteLogin(ctx context.Context, req *schema.SiteLoginReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeLogin,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeLogin, data)\n}\n\n// SaveSiteCustomCssHTML save site custom html configuration\nfunc (s *SiteInfoService) SaveSiteCustomCssHTML(ctx context.Context, req *schema.SiteCustomCssHTMLReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeCustomCssHTML,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeCustomCssHTML, data)\n}\n\n// SaveSiteTheme save site custom html configuration\nfunc (s *SiteInfoService) SaveSiteTheme(ctx context.Context, req *schema.SiteThemeReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeTheme,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeTheme, data)\n}\n\n// SaveSiteUsers save site users\nfunc (s *SiteInfoService) SaveSiteUsers(ctx context.Context, req *schema.SiteUsersReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypeUsers,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeUsers, data)\n}\n\n// GetSMTPConfig get smtp config\nfunc (s *SiteInfoService) GetSMTPConfig(ctx context.Context) (resp *schema.GetSMTPConfigResp, err error) {\n\temailConfig, err := s.emailService.GetEmailConfig(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresp = &schema.GetSMTPConfigResp{}\n\t_ = copier.Copy(resp, emailConfig)\n\treturn resp, nil\n}\n\n// UpdateSMTPConfig get smtp config\nfunc (s *SiteInfoService) UpdateSMTPConfig(ctx context.Context, req *schema.UpdateSMTPConfigReq) (err error) {\n\tec := &export.EmailConfig{}\n\t_ = copier.Copy(ec, req)\n\n\terr = s.emailService.SetEmailConfig(ctx, ec)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif len(req.TestEmailRecipient) > 0 {\n\t\ttitle, body, err := s.emailService.TestTemplate(ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo s.emailService.SendAndSaveCode(ctx, req.TestEmailRecipient, title, body, \"\", \"\")\n\t}\n\treturn nil\n}\n\nfunc (s *SiteInfoService) GetSeo(ctx context.Context) (resp *schema.SiteSeoReq, err error) {\n\tresp = &schema.SiteSeoReq{}\n\tif err = s.siteInfoCommonService.GetSiteInfoByType(ctx, constant.SiteTypeSeo, resp); err != nil {\n\t\treturn resp, err\n\t}\n\tloginConfig, err := s.GetSiteLogin(ctx)\n\tif err != nil {\n\t\tlog.Error(err)\n\t\treturn resp, nil\n\t}\n\t// If the site is set to privacy mode, prohibit crawling any page.\n\tif loginConfig.LoginRequired {\n\t\tresp.Robots = \"User-agent: *\\nDisallow: /\"\n\t\treturn resp, nil\n\t}\n\treturn resp, nil\n}\n\nfunc (s *SiteInfoService) SaveSeo(ctx context.Context, req schema.SiteSeoReq) (err error) {\n\tcontent, _ := json.Marshal(req)\n\tdata := entity.SiteInfo{\n\t\tType:    constant.SiteTypeSeo,\n\t\tContent: string(content),\n\t}\n\treturn s.siteInfoRepo.SaveByType(ctx, constant.SiteTypeSeo, &data)\n}\n\nfunc (s *SiteInfoService) GetPrivilegesConfig(ctx context.Context) (resp *schema.GetPrivilegesConfigResp, err error) {\n\tprivilege := &schema.UpdatePrivilegesConfigReq{}\n\tif err = s.siteInfoCommonService.GetSiteInfoByType(ctx, constant.SiteTypePrivileges, privilege); err != nil {\n\t\treturn nil, err\n\t}\n\tresp = &schema.GetPrivilegesConfigResp{\n\t\tOptions:       s.translatePrivilegeOptions(ctx),\n\t\tSelectedLevel: schema.PrivilegeLevel3,\n\t}\n\tif privilege != nil && privilege.Level > 0 {\n\t\tresp.SelectedLevel = privilege.Level\n\t}\n\treturn resp, nil\n}\n\nfunc (s *SiteInfoService) translatePrivilegeOptions(ctx context.Context) (options []*schema.PrivilegeOption) {\n\tla := handler.GetLangByCtx(ctx)\n\tfor _, option := range schema.DefaultPrivilegeOptions {\n\t\top := &schema.PrivilegeOption{\n\t\t\tLevel:     option.Level,\n\t\t\tLevelDesc: translator.Tr(la, option.LevelDesc),\n\t\t}\n\t\tfor _, privilege := range option.Privileges {\n\t\t\top.Privileges = append(op.Privileges, &constant.Privilege{\n\t\t\t\tKey:   privilege.Key,\n\t\t\t\tLabel: translator.Tr(la, privilege.Label),\n\t\t\t\tValue: privilege.Value,\n\t\t\t})\n\t\t}\n\t\toptions = append(options, op)\n\t}\n\treturn\n}\n\nfunc (s *SiteInfoService) UpdatePrivilegesConfig(ctx context.Context, req *schema.UpdatePrivilegesConfigReq) (err error) {\n\tchooseOption := schema.DefaultPrivilegeOptions.Choose(req.Level)\n\tif chooseOption == nil {\n\t\treturn nil\n\t}\n\n\t// update site info that user choose which privilege level\n\tcontent, _ := json.Marshal(req)\n\tdata := &entity.SiteInfo{\n\t\tType:    constant.SiteTypePrivileges,\n\t\tContent: string(content),\n\t\tStatus:  1,\n\t}\n\terr = s.siteInfoRepo.SaveByType(ctx, constant.SiteTypePrivileges, data)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// update privilege in config\n\tfor _, privilege := range chooseOption.Privileges {\n\t\terr = s.configService.UpdateConfig(ctx, privilege.Key, fmt.Sprintf(\"%d\", privilege.Value))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn\n}\n"], "filenames": ["internal/migrations/init.go", "internal/migrations/init_data.go", "internal/migrations/v3.go", "internal/schema/siteinfo_schema.go", "internal/service/siteinfo/siteinfo_service.go"], "buggy_code_start_loc": [6, 235, 120, 267, 325], "buggy_code_end_loc": [194, 236, 121, 289, 332], "fixing_code_start_loc": [7, 235, 120, 268, 325], "fixing_code_end_loc": [224, 236, 121, 299, 326], "type": "CWE-862", "message": "Missing Authorization in GitHub repository answerdev/answer prior to v1.1.1.", "other": {"cve": {"id": "CVE-2023-4124", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-03T04:15:11.340", "lastModified": "2023-08-08T16:25:23.753", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Missing Authorization in GitHub repository answerdev/answer prior to v1.1.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:answer:answer:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.1.1", "matchCriteriaId": "0025E76C-4BCF-464D-BF24-51B8D2FFE76F"}]}]}], "references": [{"url": "https://github.com/answerdev/answer/commit/964195fd859ee5d7171fac847374dfa31893e793", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/2c684f99-d181-4106-8ee2-64a76ae6a348", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/answerdev/answer/commit/964195fd859ee5d7171fac847374dfa31893e793"}}