{"buggy_code": ["<?php\n/*\nMySimplifiedSQL is an easy-to-use PHP class to interact with an SQL database. Currently this makes use of the MySQLi extension and therefore only supports MySQL/MariaDB.\nAll field values are properly sanitized , this means that you don't have to worry about security (Unless your perform direct queries, example: $database->query(\"SELECT * FROM users WHERE FirstName='John'\"))\nThis .php file shows you some examples on how you can use MySimplifiedSQL.\nGitHub: https://github.com/foxoverflow/MySimplifiedSQL\n*/\nrequire_once 'MySimplifiedSQL.php';\n//$database = New MySimplifiedSQL($db_user, $db_password, $db_host, $db_name); // Connect to MySQL and build class object\n$database = New MySimplifiedSQL(\"example_user\", \"example_password\", \"example_host\", \"example_name\", 1); // Test mode activated, set the last parameter to 0 or omit it to perform queries instead of viewing them\n//$database->testMode(1); // (Optional) Set test mode to 1 if you want to see querys instead of executing them\n$database->insert(\"users\", array(\"FirstName\" => \"John\")); // \"INSERT INTO users (FirstName) VALUES ('John')\"\n$database->insert(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\")); // \"INSERT INTO users (FirstName, LastName) VALUES ('John', 'Smith')\"\n$database->select(\"users\", array(\"FirstName\" => \"John\")); // \"SELECT * FROM users WHERE FirstName='John'\"\n$database->select(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\")); // \"SELECT * FROM users WHERE FirstName='John' AND LastName='Smith'\"\n$database->select(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\"), \"OR\"); // \"SELECT * FROM users WHERE FirstName='John' OR LastName='Smith'\"\n$database->select(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\", \"MiddleName\" => \"Bill\"), \"OR\"); // \"SELECT * FROM users WHERE FirstName='John' OR LastName='Smith' OR MiddleName='Bill'\"\n/*\nThe following $database->select is correctly written, however, there is a bug with the current MySimplifiedSQL version when we execute it:\n$database->select(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\", \"LastName\" => \"Bill\"), \"OR\"); \nThe query that should have been producted is: \"SELECT * FROM users WHERE FirstName='John' OR LastName='Smith' OR LastName='Bill'\"\nHowever, in the current version, the produced query is: \"SELECT * FROM users WHERE FirstName='John' OR LastName='Smith'\"\nThere is currently no ETA for a fix for this since you can easily solve it by performing a direct query, see at the end of this file examples.\n*/\nforeach($database->rowArray as $row) // Only to be used after a SELECT query ($database->select). If test mode is enabled, the array will be empty.\n{\n\techo \"First name:\" . $row['FirstName'] . \"<br>\";\n\techo \"Last name:\" . $row['LastName'] . \"<br>\";\n}\n$database->delete(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\")); // \"DELETE FROM users WHERE FirstName='John' AND LastName='Smith'\" - Works like $database->select\n// If you want more control over your queries, you can manually build an SQL Query, also known as direct query.\n$userInputDemo = \"John' Smith\"; // The ' could cause an SQL error, allowing to know SQL Injection is possible.\n$userInputDemo = $database->sanitize($userInputDemo); // Field sanitization, escaping \"malicious\" characters like '\n$database->query(\"SELECT * FROM users WHERE Name='\" . $userInputDemo . \"'\"); // \"SELECT * WHERE FirstName='John\\' Smith'\" - The ' was successfully escaped\n// You can also use MySQLi functions directly if you want, the connection handle/link is $database->mysqli\n// mysqli_query($database->mysqli, $query);  \n?> "], "fixing_code": ["<?php\n/*\nMySimplifiedSQL is an easy-to-use PHP class to interact with an SQL database. Currently this makes use of the MySQLi extension and therefore only supports MySQL/MariaDB.\nAll field values are properly sanitized , this means that you don't have to worry about security (Unless your perform direct queries, example: $database->query(\"SELECT * FROM users WHERE FirstName='John'\"))\nThis .php file shows you some examples on how you can use MySimplifiedSQL.\nGitHub: https://github.com/foxoverflow/MySimplifiedSQL\n*/\nrequire_once 'MySimplifiedSQL.php';\n//$database = New MySimplifiedSQL($db_user, $db_password, $db_host, $db_name); // Connect to MySQL and build class object\n$database = New MySimplifiedSQL(\"example_user\", \"example_password\", \"example_host\", \"example_name\", 1); // Test mode activated, set the last parameter to 0 or omit it to perform queries instead of viewing them\n//$database->testMode(1); // (Optional) Set test mode to 1 if you want to see querys instead of executing them\n$database->insert(\"users\", array(\"FirstName\" => \"John\")); // \"INSERT INTO users (FirstName) VALUES ('John')\"\n$database->insert(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\")); // \"INSERT INTO users (FirstName, LastName) VALUES ('John', 'Smith')\"\n$database->select(\"users\", array(\"FirstName\" => \"John\")); // \"SELECT * FROM users WHERE FirstName='John'\"\n$database->select(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\")); // \"SELECT * FROM users WHERE FirstName='John' AND LastName='Smith'\"\n$database->select(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\"), \"OR\"); // \"SELECT * FROM users WHERE FirstName='John' OR LastName='Smith'\"\n$database->select(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\", \"MiddleName\" => \"Bill\"), \"OR\"); // \"SELECT * FROM users WHERE FirstName='John' OR LastName='Smith' OR MiddleName='Bill'\"\n/*\nThe following $database->select is correctly written, however, there is a bug with the current MySimplifiedSQL version when we execute it:\n$database->select(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\", \"LastName\" => \"Bill\"), \"OR\"); \nThe query that should have been producted is: \"SELECT * FROM users WHERE FirstName='John' OR LastName='Smith' OR LastName='Bill'\"\nHowever, in the current version, the produced query is: \"SELECT * FROM users WHERE FirstName='John' OR LastName='Smith'\"\nThere is currently no ETA for a fix for this since you can easily solve it by performing a direct query, see at the end of this file examples.\n*/\nforeach($database->rowArray as $row) // Only to be used after a SELECT query ($database->select). If test mode is enabled, the array will be empty.\n{\n\techo \"First name:\" . htmlentities($row['FirstName']) . \"<br>\"; // htmlentities is used here to combat XSS attack attempts\n\techo \"Last name:\" . htmlentities($row['LastName']) . \"<br>\";\n}\n$database->delete(\"users\", array(\"FirstName\" => \"John\", \"LastName\" => \"Smith\")); // \"DELETE FROM users WHERE FirstName='John' AND LastName='Smith'\" - Works like $database->select\n// If you want more control over your queries, you can manually build an SQL Query, also known as direct query.\n$userInputDemo = \"John' Smith\"; // The ' could cause an SQL error, allowing to know SQL Injection is possible.\n$userInputDemo = $database->sanitize($userInputDemo); // Field sanitization, escaping \"malicious\" characters like '\n$database->query(\"SELECT * FROM users WHERE Name='\" . $userInputDemo . \"'\"); // \"SELECT * WHERE FirstName='John\\' Smith'\" - The ' was successfully escaped\n// You can also use MySQLi functions directly if you want, the connection handle/link is $database->mysqli\n// mysqli_query($database->mysqli, $query);  \n?> "], "filenames": ["MySimplifiedSQL_Examples.php"], "buggy_code_start_loc": [27], "buggy_code_end_loc": [29], "fixing_code_start_loc": [27], "fixing_code_end_loc": [29], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, has been found in foxoverflow MySimplifiedSQL. This issue affects some unknown processing of the file MySimplifiedSQL_Examples.php. The manipulation of the argument FirstName/LastName leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 3b7481c72786f88041b7c2d83bb4f219f77f1293. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217595.", "other": {"cve": {"id": "CVE-2015-10019", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T09:15:21.570", "lastModified": "2023-01-12T16:56:05.007", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in foxoverflow MySimplifiedSQL. This issue affects some unknown processing of the file MySimplifiedSQL_Examples.php. The manipulation of the argument FirstName/LastName leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 3b7481c72786f88041b7c2d83bb4f219f77f1293. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217595."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mysimplifiedsql_project:mysimplifiedsql:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-01-17", "matchCriteriaId": "CAB1326C-32C2-4F95-A20F-37F878C8BEE7"}]}]}], "references": [{"url": "https://github.com/foxoverflow/MySimplifiedSQL/commit/3b7481c72786f88041b7c2d83bb4f219f77f1293", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217595", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.217595", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/foxoverflow/MySimplifiedSQL/commit/3b7481c72786f88041b7c2d83bb4f219f77f1293"}}