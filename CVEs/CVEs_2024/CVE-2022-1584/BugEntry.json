{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\App\\Http\\Controllers;\n\n\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Request;\nuse MicroweberPackages\\App\\Http\\Middleware\\ApiAuth;\nuse MicroweberPackages\\App\\Http\\Middleware\\SameSiteRefererMiddleware;\nuse MicroweberPackages\\App\\Managers\\Helpers\\VerifyCsrfTokenHelper;\nuse MicroweberPackages\\Helper\\XSSClean;\nuse MicroweberPackages\\View\\View;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n\nclass ApiController  extends FrontendController\n{\n\n    public function api_html()\n    {\n        if (!defined('MW_API_HTML_OUTPUT')) {\n            define('MW_API_HTML_OUTPUT', true);\n        }\n        return $this->api();\n    }\n\n    public function api($api_function = false, $params = false)\n    {\n        if (isset($_REQUEST['api_key']) and user_id() == 0) {\n            api_login($_REQUEST['api_key']);\n        }\n\n        if (!defined('MW_API_CALL')) {\n            define('MW_API_CALL', true);\n        }\n\n        $set_constants = true;\n        if (!mw_is_installed()) {\n            $set_constants = false;\n        }\n\n        $mod_class_api = false;\n        $mod_class_api_called = false;\n        $mod_class_api_class_exist = false;\n        $caller_commander = false;\n        if ($api_function == false) {\n            $api_function_full = app()->url_manager->string();\n            $api_function_full = $this->app->format->replace_once('api_html', '', $api_function_full);\n            $api_function_full = $this->app->format->replace_once('api/api', 'api', $api_function_full);\n\n            $api_function_full = $this->app->format->replace_once('api', '', $api_function_full);\n            $api_function_full = trim($api_function_full, '/');\n\n            //$api_function_full = substr($api_function_full, 4);\n        } else {\n            $api_function_full = $api_function;\n        }\n        if (isset($api_function_full) and $api_function_full != '') {\n            if (ltrim($api_function_full, '/') == 'module') {\n                $set_constants = false;\n            }\n        }\n        if ($set_constants == true) {\n            $this->app->content_manager->define_constants();\n        }\n\n\n        if (defined('TEMPLATE_DIR')) {\n             app()->template_manager->boot_template();\n        }\n\n        //$api_function_full = str_ireplace('api/', '', $api_function_full);\n\n        $api_function_full = str_replace('..', '', $api_function_full);\n        $api_function_full = str_replace('\\\\', '/', $api_function_full);\n        $api_function_full = str_replace('//', '/', $api_function_full);\n\n        $api_function_full = app()->database_manager->escape_string($api_function_full);\n        if (is_string($api_function_full)) {\n            $mod_api_class = explode('/', $api_function_full);\n        } else {\n            $mod_api_class = $api_function_full;\n        }\n        $try_class_func = array_pop($mod_api_class);\n\n        // $try_class_func2 = array_pop($mod_api_class);\n        $mod_api_class_copy = $mod_api_class;\n        $try_class_func2 = array_pop($mod_api_class_copy);\n        $mod_api_class2 = implode(DS, $mod_api_class_copy);\n\n        $mod_api_class = implode(DS, $mod_api_class);\n        $mod_api_class_clean = ltrim($mod_api_class, '/');\n        $mod_api_class_clean = ltrim($mod_api_class_clean, '\\\\');\n        $mod_api_class_clean_uc1 = ucfirst($mod_api_class_clean);\n\n        $mod_api_class1 = normalize_path(modules_path() . $mod_api_class, false) . '.php';\n        $mod_api_class_native = normalize_path(mw_includes_path() . $mod_api_class, false) . '.php';\n        $mod_api_class_native_system = normalize_path(dirname(MW_PATH) . DS . $mod_api_class, false) . '.php';\n        $mod_api_class_native_global_ns = normalize_path(mw_includes_path() . 'classes' . DS . $mod_api_class2, false) . '.php';\n        $mod_api_class1_uc1 = normalize_path(modules_path() . $mod_api_class_clean_uc1, false) . '.php';\n        $mod_api_class_native_uc1 = normalize_path(mw_includes_path() . $mod_api_class_clean_uc1, false) . '.php';\n        $mod_api_class_native_global_ns_uc1 = normalize_path(mw_includes_path() . 'classes' . DS . $mod_api_class_clean_uc1, false) . '.php';\n\n        $mod_api_class2 = normalize_path(modules_path() . DS . $mod_api_class_clean . DS . $mod_api_class_clean, false) . '.php';\n        $mod_api_class2_uc1 = normalize_path(modules_path() . DS . $mod_api_class_clean . DS . $mod_api_class_clean, false) . '.php';\n\n        $try_class = '\\\\' . str_replace('/', '\\\\', $mod_api_class);\n\n        if (class_exists($try_class, false)) {\n            $caller_commander = 'class_is_already_here';\n            $mod_class_api_class_exist = true;\n        } else {\n            if (is_file($mod_api_class1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class1;\n            } elseif (is_file($mod_api_class_native_system)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native_system;\n            } elseif (is_file($mod_api_class1_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class1_uc1;\n            } elseif (is_file($mod_api_class_native_global_ns_uc1)) {\n                $try_class = str_replace('/', '\\\\', $mod_api_class2);\n                $mod_class_api = true;\n\n                include_once $mod_api_class_native_global_ns_uc1;\n            } elseif (is_file($mod_api_class_native_global_ns)) {\n                $try_class = str_replace('/', '\\\\', $mod_api_class2);\n                $mod_class_api = true;\n                include_once $mod_api_class_native_global_ns;\n            } elseif (is_file($mod_api_class_native_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native_uc1;\n            } elseif (is_file($mod_api_class_native)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native;\n            } elseif (is_file($mod_api_class2)) {\n                $mod_class_api = true;\n                include_once $mod_api_class2;\n            } elseif (is_file($mod_api_class2_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class2_uc1;\n            }\n        }\n\n        $api_exposed = '';\n\n        // user functions\n        $api_exposed .= 'user_login user_logout social_login_process';\n\n        // content functions\n\n        $api_exposed .= 'set_language ';\n        $api_exposed .= (api_expose(true));\n        $api_auth_exposed = ' ';\n        if (mw()->user_manager->is_logged()) {\n            $get_exposed = (api_expose_user(true));\n            $api_exposed .= $get_exposed;\n            $api_auth_exposed .= $get_exposed;\n        }\n\n        if (is_admin()) {\n            $get_exposed = (api_expose_admin(true));\n            $api_exposed .= $get_exposed;\n            $api_auth_exposed .= $get_exposed;\n        }\n\n\n        $api_exposed = explode(' ', $api_exposed);\n        $api_exposed = array_unique($api_exposed);\n        $api_exposed = array_trim($api_exposed);\n\n        $api_auth_exposed = explode(' ', $api_auth_exposed);\n        $api_auth_exposed = array_unique($api_auth_exposed);\n        $api_auth_exposed = array_trim($api_auth_exposed);\n\n        $hooks = api_bind(true);\n        if (mw()->user_manager->is_logged()) {\n            $hooks_admin = api_bind_user(true);\n            if (is_array($hooks_admin)) {\n                $hooks = array_merge($hooks, $hooks_admin);\n            }\n        }\n\n        if (is_admin()) {\n            $hooks_admin = api_bind_admin(true);\n            if (is_array($hooks_admin)) {\n                $hooks = array_merge($hooks, $hooks_admin);\n            }\n        }\n\n        if ($api_function == false) {\n            $api_function = app()->url_manager->segment(1);\n        }\n\n        if (!defined('MW_API_RAW')) {\n            if ($mod_class_api != false) {\n                $url_segs = app()->url_manager->segment(-1);\n            }\n        } else {\n            if (is_array($api_function)) {\n                $url_segs = $api_function;\n            } else {\n                $url_segs = explode('/', $api_function);\n            }\n        }\n        if (!defined('MW_API_FUNCTION_CALL')) {\n            define('MW_API_FUNCTION_CALL', $api_function);\n        }\n\n        $api_skip_token_validation_items = ['clearcache','logout','user_login'];\n\n        if (in_array($api_function, $api_auth_exposed)) {\n            if(!in_array($api_function, $api_skip_token_validation_items)) {\n\n                $request = request();\n                $request->merge($_GET);\n                $request->merge($_POST);\n                $ref = $request->headers->get('referer');\n\n                $same_site = app()->make(SameSiteRefererMiddleware::class);\n                $is_same_site = $same_site->isSameSite($ref);\n\n                if (!$is_same_site) {\n                    $bearer_token = $request->bearerToken();\n                    $is_bearer_token_valid = false;\n\n\n                    if ($bearer_token) {\n                        $validator = app()->make(ApiAuth::class);\n                        $is_bearer_token_valid = $validator->validateBearerToken($bearer_token);\n                    }\n                    if (!$is_bearer_token_valid) {\n                        $validator = app()->make(VerifyCsrfTokenHelper::class);\n                        $is_token_valid = $validator->isValid($request);\n                        if (!$is_token_valid) {\n                            App::abort(403, 'Unauthorized action. The API function requires authentication.');\n                        }\n                    }\n                }\n            }\n        }\n\n\n        switch ($caller_commander) {\n            case 'class_is_already_here':\n\n                if ($params != false) {\n                    $data = $params;\n                } elseif (!$_POST and !$_REQUEST) {\n                    $data = app()->url_manager->params(true);\n                    if (empty($data)) {\n                        $data = app()->url_manager->segment(2);\n                    }\n                } else {\n\n                    //$data = $_REQUEST;\n                    $data = array_merge($_GET, $_POST);\n                }\n\n                static $loaded_classes = array();\n\n                //$try_class_n = src_\n                if (isset($loaded_classes[$try_class]) == false) {\n                    $res = new $try_class($data);\n                    $loaded_classes[$try_class] = $res;\n                } else {\n                    $res = $loaded_classes[$try_class];\n                }\n\n                if (isset($hooks[$api_function_full]) and !empty($hooks[$api_function_full])) {\n                    foreach ($hooks[$api_function_full] as $hook) {\n                        if (is_array($hook)) {\n                            $hook = array_pop($hook);\n                        }\n                        if (is_callable($hook)) {\n                            $res = call_user_func($hook, $data);\n                            if (defined('MW_API_RAW')) {\n                                $mod_class_api_called = true;\n                            }\n                            return $this->_api_response($res);\n                        }\n                    }\n                }\n\n\n                if (method_exists($res, $try_class_func) or method_exists($res, $try_class_func2)) {\n                    if (method_exists($res, $try_class_func2)) {\n                        $try_class_func = $try_class_func2;\n                    }\n\n                    $res = $res->$try_class_func($data);\n\n                    if (defined('MW_API_RAW')) {\n                        $mod_class_api_called = true;\n                    }\n\n                    return $this->_api_response($res);\n                }\n                break;\n\n            default:\n                $res = false;\n                if (isset($hooks[$api_function_full])) {\n                    $data = array_merge($_GET, $_POST);\n\n                    $call = $hooks[$api_function_full];\n\n                    if (!empty($call)) {\n                        foreach ($call as $call_item) {\n                            $res = call_user_func($call_item, $data);\n                        }\n                    }\n                    if ($res != false) {\n                        return $this->_api_response($res);\n                    }\n                }\n\n                if ($mod_class_api == true and $mod_api_class != false) {\n                    $mod_api_class = str_replace('..', '', $mod_api_class);\n\n                    $try_class = str_replace('/', '\\\\', $mod_api_class);\n                    $try_class_full = str_replace('/', '\\\\', $api_function_full);\n\n                    $try_class_full2 = str_replace('\\\\', '/', $api_function_full);\n                    $mod_api_class_test = explode('/', $try_class_full2);\n                    $try_class_func_test = array_pop($mod_api_class_test);\n                    $mod_api_class_test_full = implode('/', $mod_api_class_test);\n                    $mod_api_err = false;\n                    if (!defined('MW_API_RAW')) {\n                        if (!in_array($try_class_full, $api_exposed, true) and !in_array($try_class_full2, $api_exposed, true) and !in_array($mod_api_class_test_full, $api_exposed, true)) {\n                            $mod_api_err = true;\n\n                            foreach ($api_exposed as $api_exposed_value) {\n                                if ($mod_api_err == true) {\n                                    if ($api_exposed_value == $try_class_full) {\n                                        $mod_api_err = false;\n                                    } elseif (strtolower('\\\\' . $api_exposed_value) == strtolower($try_class_full)) {\n                                        $mod_api_err = false;\n                                    } elseif ($api_exposed_value == $try_class_full2) {\n                                        $mod_api_err = false;\n                                    } else {\n                                        $convert_slashes = str_replace('\\\\', '/', $try_class_full);\n\n                                        if ($convert_slashes == $api_exposed_value) {\n                                            $mod_api_err = false;\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            $mod_api_err = false;\n                        }\n                    }\n\n                    if ($mod_class_api and $mod_api_err == false) {\n                        if (!class_exists($try_class, false)) {\n                            $remove = $url_segs;\n                            $last_seg = array_pop($remove);\n                            $last_prev_seg = array_pop($remove);\n                            $last_prev_seg2 = array_pop($remove);\n\n                            if (class_exists($last_prev_seg, false)) {\n                                $try_class = $last_prev_seg;\n                            } elseif (class_exists($last_prev_seg2, false)) {\n                                $try_class = $last_prev_seg2;\n                            }\n                        }\n\n                        if (!class_exists($try_class, false)) {\n                            $try_class_mw = ltrim($try_class, '/');\n                            $try_class_mw = ltrim($try_class_mw, '\\\\');\n                            $try_class = $try_class_mw;\n                        }\n\n                        if (class_exists($try_class, false)) {\n                            if ($params != false) {\n                                $data = $params;\n                            } elseif (!$_POST and !$_REQUEST) {\n                                $data = app()->url_manager->params(true);\n                                if (empty($data)) {\n                                    $data = app()->url_manager->segment(2);\n                                }\n                            } else {\n                                $data = array_merge($_GET, $_POST);\n                            }\n\n                            $res = new $try_class($data);\n\n                            if (method_exists($res, $try_class_func) or method_exists($res, $try_class_func2)) {\n                                if (method_exists($res, $try_class_func2)) {\n                                    $try_class_func = $try_class_func2;\n                                }\n\n                                $res = $res->$try_class_func($data);\n\n                                $mod_class_api_called = true;\n\n                                return $this->_api_response($res);\n                            }\n                        } else {\n                            mw_error('The api class ' . $try_class . '  does not exist');\n                        }\n                    }\n                }\n\n                break;\n        }\n\n        if ($api_function) {\n        } else {\n            $api_function = 'index';\n        }\n\n        if ($api_function == 'module' and $mod_class_api_called == false) {\n\n            return $this->module();\n        }\n        $err = false;\n        if (!in_array($api_function, $api_exposed, true)) {\n            $err = true;\n        }\n\n\n\n        if ($err == true) {\n            foreach ($api_exposed as $api_exposed_item) {\n                if ($api_exposed_item == $api_function) {\n                    $err = false;\n                }\n            }\n        }\n\n        if (isset($api_function_full)) {\n            foreach ($api_exposed as $api_exposed_item) {\n                if (is_string($api_exposed_item) and is_string($api_function_full)) {\n                    $api_function_full = str_replace('\\\\', '/', $api_function_full);\n                    $api_function_full = ltrim($api_function_full, '/');\n\n                    if (strtolower($api_exposed_item) == strtolower($api_function_full)) {\n                        $err = false;\n                    }\n                }\n            }\n        }\n\n        if ($err == false) {\n            if ($mod_class_api_called == false) {\n                if (!$_POST and !$_REQUEST) {\n\n                    //  $data = app()->url_manager->segment(2);\n                    $data = app()->url_manager->params(true);\n                    if (empty($data)) {\n                        $data = app()->url_manager->segment(2);\n                    }\n                } else {\n\n                    //$data = $_REQUEST;\n                    $data = array_merge($_GET, $_POST);\n                }\n\n                $api_function_full_2 = explode('/', $api_function_full);\n                unset($api_function_full_2[count($api_function_full_2) - 1]);\n                $api_function_full_2 = implode('/', $api_function_full_2);\n\n                if (function_exists($api_function)) {\n                    $res = $api_function($data);\n                } elseif (class_exists($api_function, false)) {\n\n                    //\n                    $segs = app()->url_manager->segment();\n                    $mmethod = array_pop($segs);\n\n                    $class = new $api_function($this->app);\n\n                    if (method_exists($class, $mmethod)) {\n                        $res = $class->$mmethod($data);\n                    }\n                } else {\n                    $api_function_full_2 = str_replace(array('..', '/'), array('', '\\\\'), $api_function_full_2);\n                    $api_function_full_2 = __NAMESPACE__ . '\\\\' . $api_function_full_2;\n\n                    if (class_exists($api_function_full_2, false)) {\n\n                        //\n\n                        $segs = app()->url_manager->segment();\n                        $mmethod = array_pop($segs);\n\n                        $class = new $api_function_full_2($this->app);\n\n                        if (method_exists($class, $mmethod)) {\n                            $res = $class->$mmethod($data);\n                        }\n                    } elseif (isset($api_function_full)) {\n                        $api_function_full = str_replace('\\\\', '/', $api_function_full);\n\n                        $api_function_full1 = explode('/', $api_function_full);\n                        $mmethod = array_pop($api_function_full1);\n                        $mclass = array_pop($api_function_full1);\n\n                        if (class_exists($mclass, false)) {\n\n                            if (is_array($this->app)) {\n                                $class = new $mclass($this->app);\n                            } else {\n                                $class = new $mclass();\n                            }\n\n                            if (method_exists($class, $mmethod)) {\n                                $res = $class->$mmethod($data);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (isset($res) and isset($hooks[$api_function]) and is_array($hooks[$api_function]) and !empty($hooks[$api_function])) {\n                foreach ($hooks[$api_function] as $hook_key => $hook_value) {\n                    if ($hook_value != false and $hook_value != null) {\n                        $hook_value($res);\n                    }\n                }\n            } else {\n\n                //error('The api function ' . $api_function . ' does not exist', __FILE__, __LINE__);\n            }\n\n            // print $api_function;\n        } else {\n            $api_function = mw()->format->clean_html($api_function);\n            $api_function = mw()->format->clean_xss($api_function);\n\n            App::abort(403, 'The api function is not defined in the allowed functions list');\n\n\n\n          //  mw_error('The api function ' . $api_function . ' is not defined in the allowed functions list');\n        }\n\n        if (isset($res)) {\n            return $this->_api_response($res);\n        }\n\n        return;\n\n    }\n\n\n    private function _api_response($res)\n    {\n        $status_code = 200;\n        if ($res instanceof Response) {\n            return $res;\n        }\n\n        if (defined('MW_API_RAW')) {\n            return response($res);\n        }\n\n        if (!defined('MW_API_HTML_OUTPUT')) {\n            if (is_bool($res) or is_int($res)) {\n                return \\Response::make(json_encode($res), $status_code);\n            } elseif ($res instanceof RedirectResponse) {\n                return $res;\n            } elseif ($res instanceof Response) {\n                return $res;\n            }\n\n            $response = \\Response::make($res, $status_code);\n            if (is_bool($res) or is_int($res) or is_array($res)) {\n                $response->header('Content-Type', 'application/json');\n            }\n\n            return $response;\n        } else {\n            if (is_array($res)) {\n                $res = json_encode($res);\n            } else if (is_bool($res)) {\n                $res = (bool)$res;\n            }\n            $response = \\Response::make($res, $status_code);\n            return $response;\n        }\n    }\n\n    public function module()\n    {\n        if (!defined('MW_API_CALL')) {\n            //      define('MW_API_CALL', true);\n        }\n\n        if (!defined('MW_NO_SESSION')) {\n            $is_ajax = app()->url_manager->is_ajax();\n            if (!mw()->user_manager->session_id() and $is_ajax == false and !defined('MW_SESS_STARTED')) {\n                define('MW_SESS_STARTED', true);\n                //session_start();\n            }\n            $editmode_sess = app()->user_manager->session_get('editmode');\n            if ($editmode_sess == true and !defined('IN_EDIT')) {\n                define('IN_EDIT', true);\n            }\n        }\n\n\n        $request_data = array_merge($_GET, $_POST);\n\n        // sanitize attributes\n        if($request_data){\n            $request_data_new = [];\n\n            $xssClean = new XSSClean();\n\n            foreach ($request_data as $k=>$v){\n                if(is_string($v)) {\n                    $v = str_replace('<', '-', $v);\n                    $v = str_replace('>', '-', $v);\n                }\n                if(is_array($v)) {\n                    $v = $xssClean->cleanArray($v);\n                } else {\n                    $v = $xssClean->clean($v);\n                }\n\n                if(is_string($k)){\n                    $k = str_replace('<', '-', $k);\n                    $k = str_replace('>', '-', $k);\n\n                    $k = $xssClean->clean($k);\n                    if($k){\n                        $request_data_new[$k] = $v;\n                    }\n                } else {\n                    $request_data_new[$k] = $v;\n                }\n\n            }\n            $request_data = $request_data_new;\n\n        }\n\n        $page = false;\n\n        $custom_display = false;\n        if (isset($request_data['data-display']) and $request_data['data-display'] == 'custom') {\n            $custom_display = true;\n        }\n\n        if (isset($request_data['data-module-name'])) {\n            $request_data['module'] = $request_data['data-module-name'];\n            $request_data['data-type'] = $request_data['data-module-name'];\n\n            if (!isset($request_data['id'])) {\n                $request_data['id'] = app()->url_manager->slug($request_data['data-module-name'] . '-' . date('YmdHis'));\n            }\n        }\n\n        if (isset($request_data['data-type'])) {\n            $request_data['module'] = $request_data['data-type'];\n        }\n\n        if (isset($request_data['display']) and $request_data['display'] == 'custom') {\n            $custom_display = true;\n        }\n        if (isset($request_data['view']) and $request_data['view'] == 'admin') {\n            $custom_display = false;\n        }\n\n        if ($custom_display == true) {\n            $custom_display_id = false;\n            if (isset($request_data['id'])) {\n                $custom_display_id = $request_data['id'];\n            }\n            if (isset($request_data['data-id'])) {\n                $custom_display_id = $request_data['data-id'];\n            }\n        }\n        if (isset($request_data['from_url'])) {\n            $from_url = $request_data['from_url'];\n        } elseif (isset($_SERVER['HTTP_REFERER'])) {\n            $from_url = $_SERVER['HTTP_REFERER'];\n            $from_url_p = @parse_url($from_url);\n            if (is_array($from_url_p) and isset($from_url_p['query'])) {\n                $from_url_p = parse_query($from_url_p['query']);\n                if (is_array($from_url_p) and isset($from_url_p['from_url'])) {\n                    $from_url = $from_url_p['from_url'];\n                }\n            }\n        }\n\n        if (isset($from_url) and $from_url != false) {\n            if (stristr($from_url, 'editor_tools/wysiwyg') && !defined('IN_EDITOR_TOOLS')) {\n                define('IN_EDITOR_TOOLS', true);\n            }\n\n            if (stristr($from_url, admin_url()) && !defined('MW_BACKEND')) {\n                define('MW_BACKEND', true);\n            }\n\n\n            $url = $from_url;\n            $from_url2 = str_replace('#', '/', $from_url);\n\n            $content_id = app()->url_manager->param('content_id', false, $from_url2);\n\n            if ($content_id == false) {\n                $content_id = app()->url_manager->param('editpage', false, $from_url2);\n            }\n            if ($content_id == false) {\n                $content_id = app()->url_manager->param('editpost', false, $from_url2);\n            }\n            if ($content_id == false) {\n                $is_current = app()->url_manager->param('is-current', false, $from_url2);\n                if ($is_current) {\n                    $content_id = app()->url_manager->param('content-id', false, $from_url2);\n                } else {\n                    $content_id = app()->url_manager->param('mw-adm-content-id', false, $from_url2);\n                }\n            }\n\n            if ($content_id == false) {\n                $action_test = app()->url_manager->param('action', false, $from_url2);\n\n                if ($action_test != false) {\n                    $action_test = str_ireplace('editpage:', '', $action_test);\n                    $action_test = str_ireplace('editpost:', '', $action_test);\n                    $action_test = str_ireplace('edit:', '', $action_test);\n                    $action_test = str_ireplace('showposts:', '', $action_test);\n\n                    $action_test = intval($action_test);\n                    if ($action_test != 0) {\n                        $content_id = $action_test;\n                        $this->app->content_manager->define_constants(array('id' => $content_id));\n                    }\n                }\n            }\n\n            if (strpos($url, '#')) {\n                $url = substr($url, 0, strpos($url, '#'));\n            }\n\n            //$url = $_SERVER[\"HTTP_REFERER\"];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if ($content_id != false) {\n                $page = array();\n                $page['id'] = $content_id;\n                if ($content_id) {\n                    $page = $this->app->content_manager->get_by_id($content_id);\n                    if($page){\n                        $url = $page['url'];\n                    }\n                }\n            } else {\n                if (trim($url) == '' or trim($url) == app()->url_manager->site()) {\n\n                    //var_dump($from_url);\n                    //$page = $this->app->content_manager->get_by_url($url);\n                    $page = $this->app->content_manager->homepage();\n\n                    if (!defined('IS_HOME')) {\n                        define('IS_HOME', true);\n                    }\n\n                    if (isset($from_url2)) {\n                        $mw_quick_edit = app()->url_manager->param('mw_quick_edit', false, $from_url2);\n\n                        if ($mw_quick_edit) {\n                            $page = false;\n                        }\n                    }\n                } else {\n                    if (!stristr($url, admin_url())) {\n                        $page = $this->app->content_manager->get_by_url($url);\n                    } else {\n                        $page = false;\n                        if (!defined('PAGE_ID')) {\n                            define('PAGE_ID', false);\n                        }\n                        if (!defined('POST_ID')) {\n                            define('POST_ID', false);\n                        }\n                        if (!defined('CONTENT_ID')) {\n                            define('CONTENT_ID', false);\n                        }\n                    }\n                }\n            }\n        } else {\n            $url = app()->url_manager->string();\n        }\n\n        if (!defined('IS_HOME')) {\n            if (isset($page['is_home']) and $page['is_home'] == 'y') {\n                define('IS_HOME', true);\n            }\n        }\n\n\n        if (mw_is_installed()) {\n            if ($page == false) {\n                if (!isset($content_id)) {\n                    return;\n                }\n\n                $this->app->content_manager->define_constants(array('id' => $content_id));\n            } else {\n                $this->app->content_manager->define_constants($page);\n            }\n        }\n\n        if (defined('TEMPLATE_DIR')) {\n            app()->template_manager->boot_template();\n        }\n\n        if ($custom_display == true) {\n            $u2 = app()->url_manager->site();\n            $u1 = str_replace($u2, '', $url);\n\n            $this->render_this_url = $u1;\n            $this->isolate_by_html_id = $custom_display_id;\n            return $this->frontend();\n\n\n        }\n\n\n        $url_last = false;\n        if (!isset($request_data['module'])) {\n            $url = app()->url_manager->string(0);\n            if ($url == __FUNCTION__) {\n                $url = app()->url_manager->string(0);\n            }\n\n            /*\n            $is_ajax = app()->url_manager->is_ajax();\n\n            if ($is_ajax == true) {\n            $url = app()->url_manager->string(true);\n            }*/\n\n            $url = $this->app->format->replace_once('module/', '', $url);\n            $url = $this->app->format->replace_once('module_api/', '', $url);\n            $url = $this->app->format->replace_once('m/', '', $url);\n            if (is_module($url)) {\n                $request_data['module'] = $url;\n                $mod_from_url = $url;\n            } else {\n                $url1 = $url_temp = explode('/', $url);\n                $url_last = array_pop($url_temp);\n\n                $try_intil_found = false;\n                $temp1 = array();\n                foreach ($url_temp as $item) {\n                    $temp1[] = implode('/', $url_temp);\n                    $url_laset = array_pop($url_temp);\n                }\n\n                $i = 0;\n                foreach ($temp1 as $item) {\n                    if ($try_intil_found == false) {\n                        if (is_module($item)) {\n                            $url_tempx = explode('/', $url);\n\n                            $request_data['module'] = $item;\n                            $url_prev = $url_last;\n                            $url_last = array_pop($url_tempx);\n                            $url_prev = array_pop($url_tempx);\n\n                            // d($url_prev);\n                            $mod_from_url = $item;\n                            $try_intil_found = true;\n                        }\n                    }\n                    ++$i;\n                }\n            }\n        }\n\n        $module_info = app()->url_manager->param('module_info', true);\n\n\n        if ($module_info and isset($request_data['module'])) {\n            $request_data['module'] = str_replace('..', '', $request_data['module']);\n            $try_config_file = modules_path() . '' . $request_data['module'] . '_config.php';\n            $try_config_file = normalize_path($try_config_file, false);\n            if (is_file($try_config_file)) {\n                include $try_config_file;\n\n                if (!isset($config) or !is_array($config)) {\n                    return false;\n                }\n\n                if (!isset($config['icon']) or $config['icon'] == false) {\n                    $config['icon'] = modules_path() . '' . $request_data['module'] . '.png';\n                    $config['icon'] = app()->url_manager->link_to_file($config['icon']);\n                }\n                echo json_encode($config);\n\n                return;\n            }\n        }\n\n\n        $admin = app()->url_manager->param('admin', true);\n\n        $mod_to_edit = app()->url_manager->param('module_to_edit', true);\n        $embed = app()->url_manager->param('embed', true);\n\n        $mod_iframe = false;\n        if ($mod_to_edit != false) {\n            $mod_to_edit = str_ireplace('_mw_slash_replace_', '/', $mod_to_edit);\n            $mod_iframe = true;\n        }\n\n        //$data = $request_data;\n\n        if (($_POST)) {\n            $data = $_POST;\n        } else {\n            $url = app()->url_manager->segment();\n\n            if (!empty($url)) {\n                foreach ($url as $k => $v) {\n                    $kv = explode(':', $v);\n                    if (isset($kv[0]) and isset($kv[1])) {\n                        $data[$kv[0]] = $kv[1];\n                    }\n                }\n            }\n        }\n\n        $tags = false;\n        $mod_n = false;\n\n        if (isset($data['type']) != false) {\n            if (trim($data['type']) != '') {\n                $mod_n = $data['data-type'] = $data['type'];\n            }\n        }\n\n        if (isset($data['data-module-name'])) {\n            $mod_n = $data['data-type'] = $data['data-module-name'];\n            unset($data['data-module-name']);\n        }\n\n        if (isset($data['data-type']) != false) {\n            $mod_n = $data['data-type'];\n        }\n        if (isset($data['data-module']) != false) {\n            if (trim($data['data-module']) != '') {\n                $mod_n = $data['module'] = $data['data-module'];\n            }\n        }\n\n        if (isset($data['module'])) {\n            $mod_n = $data['data-type'] = $data['module'];\n            unset($data['module']);\n        }\n\n        if (isset($data['type'])) {\n            $mod_n = $data['data-type'] = $data['type'];\n            unset($data['type']);\n        }\n        if (isset($data['data-type']) != false) {\n            $data['data-type'] = rtrim($data['data-type'], '/');\n            $data['data-type'] = rtrim($data['data-type'], '\\\\');\n            $data['data-type'] = str_replace('__', '/', $data['data-type']);\n        }\n        if (!isset($data)) {\n            $data = $request_data;\n        }\n        if (!isset($data['module']) and isset($mod_from_url) and $mod_from_url != false) {\n            $data['module'] = ($mod_from_url);\n        }\n\n        if (!isset($data['id']) and isset($request_data['id']) == true) {\n            $data['id'] = $request_data['id'];\n        }\n        if (isset($data['ondrop'])) {\n            if (!defined('MW_MODULE_ONDROP')) {\n                define('MW_MODULE_ONDROP', true);\n            }\n\n            unset($data['ondrop']);\n        }\n        // d($data);\n\n\n        $opts = array();\n        if ($request_data) {\n            $opts = $request_data;\n        }\n\n\n        if (isset($opts['class']) and is_string($opts['class']) and strstr($opts['class'], 'module-as-element')) {\n            $opts['module_as_element'] = true;\n            $opts['populate_module_ids_in_elements'] = true;\n        }\n\n\n        if ($mod_n == 'element-from-template' && isset($data['template'])) {\n            $t = str_replace('..', '', $data['template']);\n            $possible_layout = TEMPLATE_DIR . $t;\n            $possible_layout = normalize_path($possible_layout, false);\n            $opts['element_from_template'] = true;\n\n            if (is_file($possible_layout)) {\n                $l = new View($possible_layout);\n                $layout = $l->__toString();\n                $layout = $this->app->parser->process($layout, $opts);\n                return response($layout);\n            }\n        }\n\n        if ($mod_n == 'module-' && isset($data['template'])) {\n            $t = str_replace('..', '', $data['template']);\n            $possible_layout = templates_path() . $t;\n            $possible_layout = normalize_path($possible_layout, false);\n            if (is_file($possible_layout)) {\n                $l = new View($possible_layout);\n                $layout = $l->__toString();\n                $layout = $this->app->parser->process($layout, $opts);\n                return response($layout);\n\n\n                //  echo $layout;\n\n                // return;\n            }\n        }\n\n        $has_id = false;\n        if (isset($data) and is_array($data)) {\n            foreach ($data as $k => $v) {\n                if ($k != 'ondrop') {\n                    if ($k == 'id') {\n                        $has_id = true;\n                    }\n\n                    if (is_array($v)) {\n                        $v1 = $this->app->format->array_to_base64($v);\n                        $tags .= \"{$k}=\\\"$v1\\\" \";\n                    } else {\n                        $v = $this->app->format->clean_html($v);\n\n                        //$v = app()->database_manager->escape_string($v);\n\n                        $tags .= \"{$k}=\\\"$v\\\" \";\n                    }\n                }\n            }\n        }\n\n        if ($has_id == false) {\n//            if (defined('MW_MODULE_ONDROP')) {\n//                $mod_n = app()->url_manager->slug($mod_n) . '-' . date(\"YmdHis\").unquid();\n//                $tags .= \"id=\\\"$mod_n\\\" \";\n//            }\n            //  $mod_n = app()->url_manager->slug($mod_n) . '-' . date(\"YmdHis\");\n            //  $tags .= \"id=\\\"$mod_n\\\" \";\n        }\n\n        $tags = \"<module {$tags} />\";\n\n\n        if (isset($request_data['live_edit'])) {\n            event_trigger('mw.live_edit');\n        }\n        $opts['admin'] = $admin;\n        if ($admin == 'admin') {\n            event_trigger('mw_backend');\n            event_trigger('mw.admin');\n        } else {\n            event_trigger('mw_frontend');\n            event_trigger('mw.front');\n        }\n\n        if (isset($_SERVER['HTTP_REFERER']) and $_SERVER['HTTP_REFERER'] != false) {\n            $get_arr_from_ref = $_SERVER['HTTP_REFERER'];\n            if (strstr($get_arr_from_ref, app()->url_manager->site())) {\n                $get_arr_from_ref_arr = parse_url($get_arr_from_ref);\n                if (isset($get_arr_from_ref_arr['query']) and $get_arr_from_ref_arr['query'] != '') {\n                    $restore_get = parse_str($get_arr_from_ref_arr['query'], $get_array);\n                    if (is_array($get_array)) {\n                        mw_var('mw_restore_get', $get_array);\n                    }\n\n                    //\n                }\n            }\n        }\n\n        $res = $this->app->parser->process($tags, $opts);\n        $res = preg_replace('~<(?:!DOCTYPE|/?(?:html|head|body))[^>]*>\\s*~i', '', $res);\n\n        if ($embed != false) {\n            $p_index = mw_includes_path() . 'api/index.php';\n            $p_index = normalize_path($p_index, false);\n            $l = new View($p_index);\n            $layout = $l->__toString();\n            $res = str_replace('{content}', $res, $layout);\n        }\n\n        $aj = app()->url_manager->is_ajax();\n\n        if ((isset($request_data['live_edit']) or isset($request_data['admin'])) and $aj == false) {\n            $p_index = mw_includes_path() . DS . 'toolbar' . DS . 'editor_tools' . DS . 'module_settings' . DS . 'index.php';\n            $p_index = normalize_path($p_index, false);\n            $l = new View($p_index);\n            $l->params = $data;\n            $layout = $l->__toString();\n            $res = str_replace('{content}', $res, $layout);\n            $res = $this->app->parser->process($res, $options = false);\n        }\n\n        $res = mw()->template->process_stacks($res);\n\n        $res = execute_document_ready($res);\n        if (!defined('MW_NO_OUTPUT')) {\n            $res = app()->url_manager->replace_site_url_back($res);\n            return response($res);\n\n            // echo $res;\n        }\n\n        if ($url_last == __FUNCTION__) {\n            return;\n        }\n        if (function_exists($url_last)) {\n            $this->api($url_last);\n        } elseif (isset($url_prev) and function_exists($url_prev)) {\n            $this->api($url_last);\n        } elseif (class_exists($url_last, false)) {\n            $this->api($url_last);\n        } elseif (isset($url_prev) and class_exists($url_prev, false)) {\n            $this->api($url_prev);\n        }\n\n        return;\n    }\n\n    public function editor_tools()\n    {\n        if (!defined('IN_ADMIN') and is_admin()) {\n            define('IN_ADMIN', true);\n        }\n        if (!defined('IN_EDITOR_TOOLS')) {\n            define('IN_EDITOR_TOOLS', true);\n        }\n\n        if (mw_is_installed() == true) {\n\n            //event_trigger('mw_db_init');\n            //  event_trigger('mw_cron');\n        }\n\n        $tool = app()->url_manager->segment(1);\n\n        if ($tool) {\n        } else {\n            $tool = 'index';\n        }\n\n        $page = false;\n        if (isset($_REQUEST['content_id'])) {\n            if (intval($_REQUEST['content_id']) == 0) {\n                $this->create_new_page = true;\n\n                $custom_content_data_req = $_REQUEST;\n                $custom_content_data = array();\n                if (isset($custom_content_data_req['content_type'])) {\n                    //    $custom_content_data['content_type'] = $custom_content_data_req['content_type'];\n                }\n                if (isset($custom_content_data_req['content_type'])) {\n                    $custom_content_data['content_type'] = $custom_content_data_req['content_type'];\n                }\n                if (isset($custom_content_data_req['subtype'])) {\n                    $custom_content_data['subtype'] = $custom_content_data_req['subtype'];\n                }\n                if (isset($custom_content_data_req['parent_page']) and is_numeric($custom_content_data_req['parent_page'])) {\n                    $custom_content_data['parent'] = intval($custom_content_data_req['parent_page']);\n                }\n                if (isset($custom_content_data_req['preview_layout'])) {\n                    //  $custom_content_data['preview_layout'] =($custom_content_data_req['preview_layout']);\n                }\n                if (!empty($custom_content_data)) {\n                    $custom_content_data['id'] = 0;\n                    $this->content_data = $custom_content_data;\n                }\n\n                $this->return_data = 1;\n                 $page = $this->frontend();\n            } else {\n                $page = $this->app->content_manager->get_by_id($_REQUEST['content_id']);\n            }\n        } elseif (isset($_SERVER['HTTP_REFERER'])) {\n            $url = $_SERVER['HTTP_REFERER'];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if (trim($url) == '' or trim($url) == app()->url_manager->site()) {\n\n                //$page = $this->app->content_manager->get_by_url($url);\n                $page = $this->app->content_manager->homepage();\n            } else {\n                $page = $this->app->content_manager->get_by_url($url);\n            }\n        } else {\n            $url = app()->url_manager->string();\n        }\n\n        if (!isset($page['active_site_template'])) {\n            $page['active_site_template'] = 'default';\n        }\n\n        if (isset($_GET['preview_template'])) {\n            $page['active_site_template'] = $_GET['preview_template'];\n        }\n        if (isset($_GET['content_type'])) {\n            $page['content_type'] = $_GET['content_type'];\n        }\n        if (isset($_GET['preview_layout']) and $_GET['preview_layout'] != 'inherit') {\n            $page['layout_file'] = $_GET['preview_layout'];\n        }\n\n        $this->app->content_manager->define_constants($page);\n\n        $page['render_file'] = $this->app->template->get_layout($page);\n\n        if (defined('TEMPLATE_DIR')) {\n            app()->template_manager->boot_template();\n        }\n\n        // $params = $_REQUEST;\n        $params = array_merge($_GET, $_POST);\n        $tool = str_replace('..', '', $tool);\n\n        $p_index = mw_includes_path() . 'toolbar/editor_tools/index.php';\n        $p_index = normalize_path($p_index, false);\n\n        $standalone_edit = true;\n        $p = mw_includes_path() . 'toolbar/editor_tools/' . $tool . '/index.php';\n        $standalone_edit = false;\n        if ($tool == 'plupload') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'plupload') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'imageeditor') {\n            $standalone_edit = true;\n        }\n\n        if ($tool == 'rte_image_editor') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'editor_toolbar') {\n            $standalone_edit = true;\n        }\n\n        if ($tool == 'wysiwyg') {\n            $standalone_edit = false;\n            $ed_file_from_template = TEMPLATE_DIR . 'editor.php';\n\n            if (is_file($ed_file_from_template)) {\n                $p_index = $ed_file_from_template;\n            }\n\n            if (isset($page['content_type']) and $page['content_type'] != 'post' and $page['content_type'] != 'page' and $page['content_type'] != 'product') {\n                if (isset($page['subtype']) and ($page['subtype'] != 'post' and $page['subtype'] != 'product')) {\n                    $standalone_edit = true;\n                }\n            } elseif (isset($page['content_type']) and $page['content_type'] == 'post') {\n                if (isset($page['subtype']) and ($page['subtype'] != 'post' and $page['subtype'] != 'product')) {\n                    $standalone_edit = true;\n                }\n            }\n\n            if ($standalone_edit) {\n                if (!isset($page['content'])) {\n                    $page['content'] = '<div class=\"element\"></div>';\n                }\n                $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n                $page['render_file'] = false;\n            }\n\n            //\n            //  $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n        }\n        $default_css = '';\n        $apijs_settings_loaded = '';\n        $apijs_loaded = '';\n\n        $p = normalize_path($p, false);\n\n        $l = new View($p_index);\n        $l->params = $params;\n        $layout = $l->__toString();\n        $apijs_loaded = false;\n        if ($layout != false) {\n\n            //$apijs_loaded = $this->app->template->get_apijs_url() . '?id=' . CONTENT_ID;\n            //$apijs_loaded = $this->app->template->get_apijs_url();\n            // $apijs_settings_loaded = $this->app->template->get_apijs_settings_url() . '?id=' . CONTENT_ID . '&category_id=' . CATEGORY_ID;\n            //  $apijs_settings_loaded = $this->app->template->get_apijs_settings_url();\n            $default_css_url = $this->app->template->get_default_system_ui_css_url();\n\n\n            // $is_admin = app()->user_manager->is_admin();\n            // $default_css = '<link rel=\"stylesheet\" href=\"' . mw_includes_url() . 'default.css?v=' . MW_VERSION . '\" type=\"text/css\" />';\n            $default_css = '<link rel=\"stylesheet\" href=\"' . $default_css_url . '\" type=\"text/css\" />';\n\n\n            $headers = event_trigger('site_header', TEMPLATE_NAME);\n            $template_headers_append = '';\n            $one = 1;\n            if (is_array($headers)) {\n                foreach ($headers as $modify) {\n                    if ($modify != false and is_string($modify) and $modify != '') {\n                        $template_headers_append = $template_headers_append . $modify;\n                    }\n                }\n                if ($template_headers_append != false and $template_headers_append != '') {\n                    $layout = str_ireplace('</head>', $template_headers_append . '</head>', $l, $one);\n                }\n            }\n            if (function_exists('template_headers_src')) {\n                $template_headers_src = template_headers_src();\n                if ($template_headers_src != false and $template_headers_src != '') {\n                    $layout = str_ireplace('</head>', $template_headers_src . '</head>', $l, $one);\n                }\n            }\n\n            if (isset($page['active_site_template'])) {\n                if ($page['active_site_template'] == '') {\n                    $page['active_site_template'] = 'default';\n                }\n\n                if ($page['active_site_template'] == 'default') {\n                    $active_site_template = $this->app->option_manager->get('current_template', 'template');\n                } else {\n                    $active_site_template = $page['active_site_template'];\n                    if ($active_site_template == 'mw_default') {\n                        $active_site_template = 'default';\n                    }\n                }\n\n                $live_edit_css_folder = userfiles_path() . 'css' . DS . $active_site_template . DS;\n                $custom_live_edit = $live_edit_css_folder . DS . 'live_edit.css';\n                if (is_file($custom_live_edit)) {\n                    $live_edit_url_folder = userfiles_url() . 'css/' . $active_site_template . '/';\n                    $custom_live_editmtime = filemtime($custom_live_edit);\n                    $liv_ed_css = '<link rel=\"stylesheet\" href=\"' . $live_edit_url_folder . 'live_edit.css?version=' . $custom_live_editmtime . '\" id=\"mw-template-settings\" type=\"text/css\" />';\n                    $layout = str_ireplace('</head>', $liv_ed_css . '</head>', $l);\n                }\n            }\n        }\n\n        if (isset($_REQUEST['plain'])) {\n            if (is_file($p)) {\n                $p = new View($p);\n                $p->params = $params;\n                $layout = $p->__toString();\n                return response($layout);\n\n            }\n        } elseif (is_file($p)) {\n            $p = new View($p);\n            $p->params = $params;\n            $layout_tool = $p->__toString();\n            $layout = str_replace('{content}', $layout_tool, $layout);\n        } else {\n            $layout = str_replace('{content}', 'Not found!', $layout);\n        }\n        $category = false;\n        if (defined('CATEGORY_ID')) {\n            $category = $this->app->category_manager->get_by_id(CATEGORY_ID);\n        }\n\n        //    $page['render_file'] = $render_file;\n\n        if (!$standalone_edit and $tool == 'wysiwyg') {\n            if (isset($page['render_file'])) {\n                if (!isset($page['layout_file'])) {\n                    $page['layout_file'] = str_replace(template_dir(), '', $page['render_file']);\n                }\n\n\n                event_trigger('mw.front', $page);\n                $l = new View($page['render_file']);\n                $l->page_id = PAGE_ID;\n                $l->content_id = CONTENT_ID;\n                $l->post_id = POST_ID;\n                $l->category_id = CATEGORY_ID;\n                $l->content = $page;\n                $l->category = $category;\n                $l->params = $params;\n                $l->page = $page;\n                $l->application = $this->app;\n                $l = $l->__toString();\n//\n//\n//                $render_params = array();\n//                $render_params['render_file'] = $p;\n//                $render_params['page_id'] = PAGE_ID;\n//                $render_params['content_id'] = CONTENT_ID;\n//                $render_params['post_id'] = POST_ID;\n//                $render_params['category_id'] = CATEGORY_ID;\n//                $render_params['page'] = $page;\n//                $render_params['params'] = $params;\n//                $render_params['application'] = $this->app;\n\n                //  $l = $this->app->template->render($render_params);\n                if (is_object($l)) {\n                    return $l;\n                }\n\n                $l = $this->app->parser->process($l, $options = false);\n\n                //                if(isset($page['content']) and $page['content'] != false){\n                //\n                //                if($page['content'] == ''){\n                //                    unset($page['content']);\n                //                }\n                //                } else {\n                //                    $page['content'] = $l;\n                //                }\n\n                $editable = $this->app->parser->isolate_content_field($l, true);\n\n                if ($editable != false) {\n                    $page['content'] = $editable;\n                } else {\n                    if ($tool == 'wysiwyg') {\n                        $err = 'no editable content region found';\n                        if (isset($page['layout_file'])) {\n                            $file = $page['layout_file'];\n                            $file = str_replace('__', '/', $page['layout_file']);\n                            $err = $err . ' in file ' . $file;\n                        }\n                        if (isset($page['active_site_template'])) {\n                            $err = $err . ' (' . $page['active_site_template'] . ' template)';\n                        }\n\n                        return $err;\n                    }\n                }\n            }\n        }\n\n        /* if (!stristr($layout, $apijs_loaded)) {\n             $rep = 0;\n\n             $default_css = $default_css . \"\\r\\n\" . '<script src=\"' . $apijs_settings_loaded . '\"></script>' . \"\\r\\n\";\n             $default_css = $default_css . \"\\r\\n\" . '<script src=\"' . $apijs_loaded . '\"></script>' . \"\\r\\n\";\n             $layout = str_ireplace('<head>', '<head>' . $default_css, $layout, $rep);\n         }*/\n\n        $layout = str_ireplace('<head>', '<head>' . $default_css, $layout, $rep);\n\n\n        $layout = $this->app->template->append_api_js_to_layout($layout);\n        if (isset($page['content'])) {\n            if ($standalone_edit) {\n                if (!isset($render_file)) {\n                    if (stristr($page['content'], 'field=\"content\"') or stristr($page['content'], 'field=\\'content\\'')) {\n                        $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n                    }\n                }\n            }\n\n            $layout = str_replace('{content}', $page['content'], $layout);\n        }\n\n        $layout = mw()->template->process_meta($layout);\n        $layout = mw()->template->process_stacks($layout);\n\n\n        $layout = $this->app->parser->process($layout, $options = false);\n\n        $layout = mw()->template->add_csrf_token_meta_tags($layout);\n\n        $layout = execute_document_ready($layout);\n\n        $layout = str_replace('{head}', '', $layout);\n\n        $layout = str_replace('{content}', '', $layout);\n        return response($layout);\n\n\n    }\n\n}\n", "<?php\n\nnamespace MicroweberPackages\\Helper;\n\nuse voku\\helper\\AntiXSS;\n\nclass XSSClean\n{\n\n\n    public function cleanArray($array)    {\n\n        if (is_array($array)) {\n\n            $cleanedArray = [];\n            foreach ($array as $key => $value) {\n                if (is_string($key)) {\n                    $key = $this->clean($key);\n                }\n\n                if (is_array($value)) {\n                    $cleanedArray[$key] = $this->cleanArray($value);\n                } else {\n                    $cleanedArray[$key] = $this->clean($value);\n                }\n            }\n\n            return $cleanedArray;\n        }\n    }\n\n    public function clean($html)\n    {\n        if(is_array($html)){\n            return $this->cleanArray($html);\n        }\n\n        // from https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#ontransitionend\n        $cleanStrings = [\n            'ontransitionstart',\n            'onwebkitanimationend',\n            'onwebkitanimationiteration',\n            'onwebkitanimationstart',\n            'onwebkittransitionend',\n            'ontransitionrun',\n            'onloadedmetadata',\n            'ondurationchange',\n            'oncanplaythrough',\n            'oncuechange',\n            'onbounce',\n            'onbegin',\n            'onbeforeunload',\n            'onbeforescriptexecute',\n            'onbeforeprint',\n            'onanimationstart',\n            'onanimationiteration',\n            'onanimationend',\n            'onanimationcancel',\n            'onafterscriptexecute',\n            'onfocusin',\n            'onhashchange',\n            'onload',\n            'onunload',\n            'onloadend',\n            'onloadstart',\n            'onmessage',\n            'onpageshow',\n            'onloadedmetadata',\n            'onloadeddata',\n            'onplay',\n            'onplaying',\n            'onpopstate',\n            'onprogress',\n            'onrepeat',\n            'onresize',\n            'onscroll',\n            'onstart',\n            'ontimeupdate',\n            'ontoggle',\n            'ontransitionend',\n            'ontransitioncancel',\n            'ontransitionrun',\n            'ontransitionstart',\n            'onafterprint',\n            'onauxclick',\n            'onbeforecopy',\n            'onbeforecut',\n            'onblur',\n            'onchange',\n            'onclick',\n            'onclose',\n            'oncontextmenu',\n            'oncopy',\n            'oncut',\n            'ondblclick',\n            'ondrag',\n            'ondragend',\n            'ondragenter',\n            'ondragleave',\n            'ondragover',\n            'ondragstart',\n            'ondrop',\n            'onfocusout',\n            'onfullscreenchange',\n            'oninput',\n            'oninvalid',\n            'onkeydown',\n            'onkeypress',\n            'onkeyup',\n            'onmousedown',\n            'onmouseenter',\n            'onmouseleave',\n            'onmousemove',\n            'onmouseout',\n            'onmouseover',\n            'onmouseup',\n            'onmousewheel',\n            'onmozfullscreenchange',\n            'onpagehide',\n            'onpaste',\n            'onpause',\n            'onpointerdown',\n            'onpointerenter',\n            'onpointerleave',\n            'onpointermove',\n            'onpointerout',\n            'onpointerover',\n            'onpointerrawupdate',\n            'onpointerup',\n            'onreset',\n            'onsearch',\n            'onseeked',\n            'onseeking',\n            'onselect',\n            'onselectionchange',\n            'onselectstart',\n            'onshow',\n            'onsubmit',\n            'ontouchend',\n            'ontouchmove',\n            'ontouchstart',\n            'onvolumechange',\n            'onwheel',\n            'onWebkitAnimationEnd',\n            'onWebkitAnimationIteration',\n            'onWebkitAnimationStart',\n            'onWebkitTransitionEnd',\n            'onwebkitTransitionEnd',\n            'onunhandledrejection'\n        ];\n\n        $antiXss = new AntiXSS();\n        $antiXss->addEvilHtmlTags($cleanStrings);\n        $antiXss->addEvilAttributes($cleanStrings);\n        $antiXss->addNeverAllowedOnEventsAfterwards($cleanStrings);\n\n        $html = $antiXss->xss_clean($html);\n\n\n        return $html;\n    }\n\n}\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\App\\Http\\Controllers;\n\n\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Request;\nuse MicroweberPackages\\App\\Http\\Middleware\\ApiAuth;\nuse MicroweberPackages\\App\\Http\\Middleware\\SameSiteRefererMiddleware;\nuse MicroweberPackages\\App\\Managers\\Helpers\\VerifyCsrfTokenHelper;\nuse MicroweberPackages\\Helper\\XSSClean;\nuse MicroweberPackages\\View\\View;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n\nclass ApiController  extends FrontendController\n{\n\n    public function api_html()\n    {\n        if (!defined('MW_API_HTML_OUTPUT')) {\n            define('MW_API_HTML_OUTPUT', true);\n        }\n        return $this->api();\n    }\n\n    public function api($api_function = false, $params = false)\n    {\n        if (isset($_REQUEST['api_key']) and user_id() == 0) {\n            api_login($_REQUEST['api_key']);\n        }\n\n        if (!defined('MW_API_CALL')) {\n            define('MW_API_CALL', true);\n        }\n\n        $set_constants = true;\n        if (!mw_is_installed()) {\n            $set_constants = false;\n        }\n\n        $mod_class_api = false;\n        $mod_class_api_called = false;\n        $mod_class_api_class_exist = false;\n        $caller_commander = false;\n        if ($api_function == false) {\n            $api_function_full = app()->url_manager->string();\n            $api_function_full = $this->app->format->replace_once('api_html', '', $api_function_full);\n            $api_function_full = $this->app->format->replace_once('api/api', 'api', $api_function_full);\n\n            $api_function_full = $this->app->format->replace_once('api', '', $api_function_full);\n            $api_function_full = trim($api_function_full, '/');\n\n            //$api_function_full = substr($api_function_full, 4);\n        } else {\n            $api_function_full = $api_function;\n        }\n        if (isset($api_function_full) and $api_function_full != '') {\n            if (ltrim($api_function_full, '/') == 'module') {\n                $set_constants = false;\n            }\n        }\n        if ($set_constants == true) {\n            $this->app->content_manager->define_constants();\n        }\n\n\n        if (defined('TEMPLATE_DIR')) {\n             app()->template_manager->boot_template();\n        }\n\n        //$api_function_full = str_ireplace('api/', '', $api_function_full);\n\n        $api_function_full = str_replace('..', '', $api_function_full);\n        $api_function_full = str_replace('\\\\', '/', $api_function_full);\n        $api_function_full = str_replace('//', '/', $api_function_full);\n\n        $api_function_full = app()->database_manager->escape_string($api_function_full);\n        if (is_string($api_function_full)) {\n            $mod_api_class = explode('/', $api_function_full);\n        } else {\n            $mod_api_class = $api_function_full;\n        }\n        $try_class_func = array_pop($mod_api_class);\n\n        // $try_class_func2 = array_pop($mod_api_class);\n        $mod_api_class_copy = $mod_api_class;\n        $try_class_func2 = array_pop($mod_api_class_copy);\n        $mod_api_class2 = implode(DS, $mod_api_class_copy);\n\n        $mod_api_class = implode(DS, $mod_api_class);\n        $mod_api_class_clean = ltrim($mod_api_class, '/');\n        $mod_api_class_clean = ltrim($mod_api_class_clean, '\\\\');\n        $mod_api_class_clean_uc1 = ucfirst($mod_api_class_clean);\n\n        $mod_api_class1 = normalize_path(modules_path() . $mod_api_class, false) . '.php';\n        $mod_api_class_native = normalize_path(mw_includes_path() . $mod_api_class, false) . '.php';\n        $mod_api_class_native_system = normalize_path(dirname(MW_PATH) . DS . $mod_api_class, false) . '.php';\n        $mod_api_class_native_global_ns = normalize_path(mw_includes_path() . 'classes' . DS . $mod_api_class2, false) . '.php';\n        $mod_api_class1_uc1 = normalize_path(modules_path() . $mod_api_class_clean_uc1, false) . '.php';\n        $mod_api_class_native_uc1 = normalize_path(mw_includes_path() . $mod_api_class_clean_uc1, false) . '.php';\n        $mod_api_class_native_global_ns_uc1 = normalize_path(mw_includes_path() . 'classes' . DS . $mod_api_class_clean_uc1, false) . '.php';\n\n        $mod_api_class2 = normalize_path(modules_path() . DS . $mod_api_class_clean . DS . $mod_api_class_clean, false) . '.php';\n        $mod_api_class2_uc1 = normalize_path(modules_path() . DS . $mod_api_class_clean . DS . $mod_api_class_clean, false) . '.php';\n\n        $try_class = '\\\\' . str_replace('/', '\\\\', $mod_api_class);\n\n        if (class_exists($try_class, false)) {\n            $caller_commander = 'class_is_already_here';\n            $mod_class_api_class_exist = true;\n        } else {\n            if (is_file($mod_api_class1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class1;\n            } elseif (is_file($mod_api_class_native_system)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native_system;\n            } elseif (is_file($mod_api_class1_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class1_uc1;\n            } elseif (is_file($mod_api_class_native_global_ns_uc1)) {\n                $try_class = str_replace('/', '\\\\', $mod_api_class2);\n                $mod_class_api = true;\n\n                include_once $mod_api_class_native_global_ns_uc1;\n            } elseif (is_file($mod_api_class_native_global_ns)) {\n                $try_class = str_replace('/', '\\\\', $mod_api_class2);\n                $mod_class_api = true;\n                include_once $mod_api_class_native_global_ns;\n            } elseif (is_file($mod_api_class_native_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native_uc1;\n            } elseif (is_file($mod_api_class_native)) {\n                $mod_class_api = true;\n                include_once $mod_api_class_native;\n            } elseif (is_file($mod_api_class2)) {\n                $mod_class_api = true;\n                include_once $mod_api_class2;\n            } elseif (is_file($mod_api_class2_uc1)) {\n                $mod_class_api = true;\n                include_once $mod_api_class2_uc1;\n            }\n        }\n\n        $api_exposed = '';\n\n        // user functions\n        $api_exposed .= 'user_login user_logout social_login_process';\n\n        // content functions\n\n        $api_exposed .= 'set_language ';\n        $api_exposed .= (api_expose(true));\n        $api_auth_exposed = ' ';\n        if (mw()->user_manager->is_logged()) {\n            $get_exposed = (api_expose_user(true));\n            $api_exposed .= $get_exposed;\n            $api_auth_exposed .= $get_exposed;\n        }\n\n        if (is_admin()) {\n            $get_exposed = (api_expose_admin(true));\n            $api_exposed .= $get_exposed;\n            $api_auth_exposed .= $get_exposed;\n        }\n\n\n        $api_exposed = explode(' ', $api_exposed);\n        $api_exposed = array_unique($api_exposed);\n        $api_exposed = array_trim($api_exposed);\n\n        $api_auth_exposed = explode(' ', $api_auth_exposed);\n        $api_auth_exposed = array_unique($api_auth_exposed);\n        $api_auth_exposed = array_trim($api_auth_exposed);\n\n        $hooks = api_bind(true);\n        if (mw()->user_manager->is_logged()) {\n            $hooks_admin = api_bind_user(true);\n            if (is_array($hooks_admin)) {\n                $hooks = array_merge($hooks, $hooks_admin);\n            }\n        }\n\n        if (is_admin()) {\n            $hooks_admin = api_bind_admin(true);\n            if (is_array($hooks_admin)) {\n                $hooks = array_merge($hooks, $hooks_admin);\n            }\n        }\n\n        if ($api_function == false) {\n            $api_function = app()->url_manager->segment(1);\n        }\n\n        if (!defined('MW_API_RAW')) {\n            if ($mod_class_api != false) {\n                $url_segs = app()->url_manager->segment(-1);\n            }\n        } else {\n            if (is_array($api_function)) {\n                $url_segs = $api_function;\n            } else {\n                $url_segs = explode('/', $api_function);\n            }\n        }\n        if (!defined('MW_API_FUNCTION_CALL')) {\n            define('MW_API_FUNCTION_CALL', $api_function);\n        }\n\n        $api_skip_token_validation_items = ['clearcache','logout','user_login'];\n\n        if (in_array($api_function, $api_auth_exposed)) {\n            if(!in_array($api_function, $api_skip_token_validation_items)) {\n\n                $request = request();\n                $request->merge($_GET);\n                $request->merge($_POST);\n                $ref = $request->headers->get('referer');\n\n                $same_site = app()->make(SameSiteRefererMiddleware::class);\n                $is_same_site = $same_site->isSameSite($ref);\n\n                if (!$is_same_site) {\n                    $bearer_token = $request->bearerToken();\n                    $is_bearer_token_valid = false;\n\n\n                    if ($bearer_token) {\n                        $validator = app()->make(ApiAuth::class);\n                        $is_bearer_token_valid = $validator->validateBearerToken($bearer_token);\n                    }\n                    if (!$is_bearer_token_valid) {\n                        $validator = app()->make(VerifyCsrfTokenHelper::class);\n                        $is_token_valid = $validator->isValid($request);\n                        if (!$is_token_valid) {\n                            App::abort(403, 'Unauthorized action. The API function requires authentication.');\n                        }\n                    }\n                }\n            }\n        }\n\n\n        switch ($caller_commander) {\n            case 'class_is_already_here':\n\n                if ($params != false) {\n                    $data = $params;\n                } elseif (!$_POST and !$_REQUEST) {\n                    $data = app()->url_manager->params(true);\n                    if (empty($data)) {\n                        $data = app()->url_manager->segment(2);\n                    }\n                } else {\n\n                    //$data = $_REQUEST;\n                    $data = array_merge($_GET, $_POST);\n                }\n\n                static $loaded_classes = array();\n\n                //$try_class_n = src_\n                if (isset($loaded_classes[$try_class]) == false) {\n                    $res = new $try_class($data);\n                    $loaded_classes[$try_class] = $res;\n                } else {\n                    $res = $loaded_classes[$try_class];\n                }\n\n                if (isset($hooks[$api_function_full]) and !empty($hooks[$api_function_full])) {\n                    foreach ($hooks[$api_function_full] as $hook) {\n                        if (is_array($hook)) {\n                            $hook = array_pop($hook);\n                        }\n                        if (is_callable($hook)) {\n                            $res = call_user_func($hook, $data);\n                            if (defined('MW_API_RAW')) {\n                                $mod_class_api_called = true;\n                            }\n                            return $this->_api_response($res);\n                        }\n                    }\n                }\n\n\n                if (method_exists($res, $try_class_func) or method_exists($res, $try_class_func2)) {\n                    if (method_exists($res, $try_class_func2)) {\n                        $try_class_func = $try_class_func2;\n                    }\n\n                    $res = $res->$try_class_func($data);\n\n                    if (defined('MW_API_RAW')) {\n                        $mod_class_api_called = true;\n                    }\n\n                    return $this->_api_response($res);\n                }\n                break;\n\n            default:\n                $res = false;\n                if (isset($hooks[$api_function_full])) {\n                    $data = array_merge($_GET, $_POST);\n\n                    $call = $hooks[$api_function_full];\n\n                    if (!empty($call)) {\n                        foreach ($call as $call_item) {\n                            $res = call_user_func($call_item, $data);\n                        }\n                    }\n                    if ($res != false) {\n                        return $this->_api_response($res);\n                    }\n                }\n\n                if ($mod_class_api == true and $mod_api_class != false) {\n                    $mod_api_class = str_replace('..', '', $mod_api_class);\n\n                    $try_class = str_replace('/', '\\\\', $mod_api_class);\n                    $try_class_full = str_replace('/', '\\\\', $api_function_full);\n\n                    $try_class_full2 = str_replace('\\\\', '/', $api_function_full);\n                    $mod_api_class_test = explode('/', $try_class_full2);\n                    $try_class_func_test = array_pop($mod_api_class_test);\n                    $mod_api_class_test_full = implode('/', $mod_api_class_test);\n                    $mod_api_err = false;\n                    if (!defined('MW_API_RAW')) {\n                        if (!in_array($try_class_full, $api_exposed, true) and !in_array($try_class_full2, $api_exposed, true) and !in_array($mod_api_class_test_full, $api_exposed, true)) {\n                            $mod_api_err = true;\n\n                            foreach ($api_exposed as $api_exposed_value) {\n                                if ($mod_api_err == true) {\n                                    if ($api_exposed_value == $try_class_full) {\n                                        $mod_api_err = false;\n                                    } elseif (strtolower('\\\\' . $api_exposed_value) == strtolower($try_class_full)) {\n                                        $mod_api_err = false;\n                                    } elseif ($api_exposed_value == $try_class_full2) {\n                                        $mod_api_err = false;\n                                    } else {\n                                        $convert_slashes = str_replace('\\\\', '/', $try_class_full);\n\n                                        if ($convert_slashes == $api_exposed_value) {\n                                            $mod_api_err = false;\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            $mod_api_err = false;\n                        }\n                    }\n\n                    if ($mod_class_api and $mod_api_err == false) {\n                        if (!class_exists($try_class, false)) {\n                            $remove = $url_segs;\n                            $last_seg = array_pop($remove);\n                            $last_prev_seg = array_pop($remove);\n                            $last_prev_seg2 = array_pop($remove);\n\n                            if (class_exists($last_prev_seg, false)) {\n                                $try_class = $last_prev_seg;\n                            } elseif (class_exists($last_prev_seg2, false)) {\n                                $try_class = $last_prev_seg2;\n                            }\n                        }\n\n                        if (!class_exists($try_class, false)) {\n                            $try_class_mw = ltrim($try_class, '/');\n                            $try_class_mw = ltrim($try_class_mw, '\\\\');\n                            $try_class = $try_class_mw;\n                        }\n\n                        if (class_exists($try_class, false)) {\n                            if ($params != false) {\n                                $data = $params;\n                            } elseif (!$_POST and !$_REQUEST) {\n                                $data = app()->url_manager->params(true);\n                                if (empty($data)) {\n                                    $data = app()->url_manager->segment(2);\n                                }\n                            } else {\n                                $data = array_merge($_GET, $_POST);\n                            }\n\n                            $res = new $try_class($data);\n\n                            if (method_exists($res, $try_class_func) or method_exists($res, $try_class_func2)) {\n                                if (method_exists($res, $try_class_func2)) {\n                                    $try_class_func = $try_class_func2;\n                                }\n\n                                $res = $res->$try_class_func($data);\n\n                                $mod_class_api_called = true;\n\n                                return $this->_api_response($res);\n                            }\n                        } else {\n                            mw_error('The api class ' . $try_class . '  does not exist');\n                        }\n                    }\n                }\n\n                break;\n        }\n\n        if ($api_function) {\n        } else {\n            $api_function = 'index';\n        }\n\n        if ($api_function == 'module' and $mod_class_api_called == false) {\n\n            return $this->module();\n        }\n        $err = false;\n        if (!in_array($api_function, $api_exposed, true)) {\n            $err = true;\n        }\n\n\n\n        if ($err == true) {\n            foreach ($api_exposed as $api_exposed_item) {\n                if ($api_exposed_item == $api_function) {\n                    $err = false;\n                }\n            }\n        }\n\n        if (isset($api_function_full)) {\n            foreach ($api_exposed as $api_exposed_item) {\n                if (is_string($api_exposed_item) and is_string($api_function_full)) {\n                    $api_function_full = str_replace('\\\\', '/', $api_function_full);\n                    $api_function_full = ltrim($api_function_full, '/');\n\n                    if (strtolower($api_exposed_item) == strtolower($api_function_full)) {\n                        $err = false;\n                    }\n                }\n            }\n        }\n\n        if ($err == false) {\n            if ($mod_class_api_called == false) {\n                if (!$_POST and !$_REQUEST) {\n\n                    //  $data = app()->url_manager->segment(2);\n                    $data = app()->url_manager->params(true);\n                    if (empty($data)) {\n                        $data = app()->url_manager->segment(2);\n                    }\n                } else {\n\n                    //$data = $_REQUEST;\n                    $data = array_merge($_GET, $_POST);\n                }\n\n                $api_function_full_2 = explode('/', $api_function_full);\n                unset($api_function_full_2[count($api_function_full_2) - 1]);\n                $api_function_full_2 = implode('/', $api_function_full_2);\n\n                if (function_exists($api_function)) {\n                    $res = $api_function($data);\n                } elseif (class_exists($api_function, false)) {\n\n                    //\n                    $segs = app()->url_manager->segment();\n                    $mmethod = array_pop($segs);\n\n                    $class = new $api_function($this->app);\n\n                    if (method_exists($class, $mmethod)) {\n                        $res = $class->$mmethod($data);\n                    }\n                } else {\n                    $api_function_full_2 = str_replace(array('..', '/'), array('', '\\\\'), $api_function_full_2);\n                    $api_function_full_2 = __NAMESPACE__ . '\\\\' . $api_function_full_2;\n\n                    if (class_exists($api_function_full_2, false)) {\n\n                        //\n\n                        $segs = app()->url_manager->segment();\n                        $mmethod = array_pop($segs);\n\n                        $class = new $api_function_full_2($this->app);\n\n                        if (method_exists($class, $mmethod)) {\n                            $res = $class->$mmethod($data);\n                        }\n                    } elseif (isset($api_function_full)) {\n                        $api_function_full = str_replace('\\\\', '/', $api_function_full);\n\n                        $api_function_full1 = explode('/', $api_function_full);\n                        $mmethod = array_pop($api_function_full1);\n                        $mclass = array_pop($api_function_full1);\n\n                        if (class_exists($mclass, false)) {\n\n                            if (is_array($this->app)) {\n                                $class = new $mclass($this->app);\n                            } else {\n                                $class = new $mclass();\n                            }\n\n                            if (method_exists($class, $mmethod)) {\n                                $res = $class->$mmethod($data);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (isset($res) and isset($hooks[$api_function]) and is_array($hooks[$api_function]) and !empty($hooks[$api_function])) {\n                foreach ($hooks[$api_function] as $hook_key => $hook_value) {\n                    if ($hook_value != false and $hook_value != null) {\n                        $hook_value($res);\n                    }\n                }\n            } else {\n\n                //error('The api function ' . $api_function . ' does not exist', __FILE__, __LINE__);\n            }\n\n            // print $api_function;\n        } else {\n            $api_function = mw()->format->clean_html($api_function);\n            $api_function = mw()->format->clean_xss($api_function);\n\n            App::abort(403, 'The api function is not defined in the allowed functions list');\n\n\n\n          //  mw_error('The api function ' . $api_function . ' is not defined in the allowed functions list');\n        }\n\n        if (isset($res)) {\n            return $this->_api_response($res);\n        }\n\n        return;\n\n    }\n\n\n    private function _api_response($res)\n    {\n        $status_code = 200;\n        if ($res instanceof Response) {\n            return $res;\n        }\n\n        if (defined('MW_API_RAW')) {\n            return response($res);\n        }\n\n        if (!defined('MW_API_HTML_OUTPUT')) {\n            if (is_bool($res) or is_int($res)) {\n                return \\Response::make(json_encode($res), $status_code);\n            } elseif ($res instanceof RedirectResponse) {\n                return $res;\n            } elseif ($res instanceof Response) {\n                return $res;\n            }\n\n            $response = \\Response::make($res, $status_code);\n            if (is_bool($res) or is_int($res) or is_array($res)) {\n                $response->header('Content-Type', 'application/json');\n            }\n\n            return $response;\n        } else {\n            if (is_array($res)) {\n                $res = json_encode($res);\n            } else if (is_bool($res)) {\n                $res = (bool)$res;\n            }\n            $response = \\Response::make($res, $status_code);\n            return $response;\n        }\n    }\n\n    public function module()\n    {\n        if (!defined('MW_API_CALL')) {\n            //      define('MW_API_CALL', true);\n        }\n\n        if (!defined('MW_NO_SESSION')) {\n            $is_ajax = app()->url_manager->is_ajax();\n            if (!mw()->user_manager->session_id() and $is_ajax == false and !defined('MW_SESS_STARTED')) {\n                define('MW_SESS_STARTED', true);\n                //session_start();\n            }\n            $editmode_sess = app()->user_manager->session_get('editmode');\n            if ($editmode_sess == true and !defined('IN_EDIT')) {\n                define('IN_EDIT', true);\n            }\n        }\n\n\n        $request_data = array_merge($_GET, $_POST);\n\n        // sanitize attributes\n        if($request_data){\n            $request_data_new = [];\n\n            $xssClean = new XSSClean();\n\n            foreach ($request_data as $k=>$v){\n                if(is_string($v)) {\n                    $v = str_replace('<', '-', $v);\n                    $v = str_replace('>', '-', $v);\n                    $v = str_replace('\"', '-', $v);\n                    $v = str_replace(\"'\", '-', $v);\n                }\n                if(is_array($v)) {\n                    $v = $xssClean->cleanArray($v);\n                } else {\n                    $v = $xssClean->clean($v);\n                }\n\n                if(is_string($k)){\n                    $k = str_replace('<', '-', $k);\n                    $k = str_replace('>', '-', $k);\n                    $k = str_replace('\"', '-', $k);\n                    $k = str_replace(\"'\", '-', $k);\n\n                    $k = $xssClean->clean($k);\n                    if($k){\n                        $request_data_new[$k] = $v;\n                    }\n                } else {\n                    $request_data_new[$k] = $v;\n                }\n\n            }\n            $request_data = $request_data_new;\n\n        }\n\n        $page = false;\n\n        $custom_display = false;\n        if (isset($request_data['data-display']) and $request_data['data-display'] == 'custom') {\n            $custom_display = true;\n        }\n\n        if (isset($request_data['data-module-name'])) {\n            $request_data['module'] = $request_data['data-module-name'];\n            $request_data['data-type'] = $request_data['data-module-name'];\n\n            if (!isset($request_data['id'])) {\n                $request_data['id'] = app()->url_manager->slug($request_data['data-module-name'] . '-' . date('YmdHis'));\n            }\n        }\n\n        if (isset($request_data['data-type'])) {\n            $request_data['module'] = $request_data['data-type'];\n        }\n\n        if (isset($request_data['display']) and $request_data['display'] == 'custom') {\n            $custom_display = true;\n        }\n        if (isset($request_data['view']) and $request_data['view'] == 'admin') {\n            $custom_display = false;\n        }\n\n        if ($custom_display == true) {\n            $custom_display_id = false;\n            if (isset($request_data['id'])) {\n                $custom_display_id = $request_data['id'];\n            }\n            if (isset($request_data['data-id'])) {\n                $custom_display_id = $request_data['data-id'];\n            }\n        }\n        if (isset($request_data['from_url'])) {\n            $from_url = $request_data['from_url'];\n        } elseif (isset($_SERVER['HTTP_REFERER'])) {\n            $from_url = $_SERVER['HTTP_REFERER'];\n            $from_url_p = @parse_url($from_url);\n            if (is_array($from_url_p) and isset($from_url_p['query'])) {\n                $from_url_p = parse_query($from_url_p['query']);\n                if (is_array($from_url_p) and isset($from_url_p['from_url'])) {\n                    $from_url = $from_url_p['from_url'];\n                }\n            }\n        }\n\n        if (isset($from_url) and $from_url != false) {\n            if (stristr($from_url, 'editor_tools/wysiwyg') && !defined('IN_EDITOR_TOOLS')) {\n                define('IN_EDITOR_TOOLS', true);\n            }\n\n            if (stristr($from_url, admin_url()) && !defined('MW_BACKEND')) {\n                define('MW_BACKEND', true);\n            }\n\n\n            $url = $from_url;\n            $from_url2 = str_replace('#', '/', $from_url);\n\n            $content_id = app()->url_manager->param('content_id', false, $from_url2);\n\n            if ($content_id == false) {\n                $content_id = app()->url_manager->param('editpage', false, $from_url2);\n            }\n            if ($content_id == false) {\n                $content_id = app()->url_manager->param('editpost', false, $from_url2);\n            }\n            if ($content_id == false) {\n                $is_current = app()->url_manager->param('is-current', false, $from_url2);\n                if ($is_current) {\n                    $content_id = app()->url_manager->param('content-id', false, $from_url2);\n                } else {\n                    $content_id = app()->url_manager->param('mw-adm-content-id', false, $from_url2);\n                }\n            }\n\n            if ($content_id == false) {\n                $action_test = app()->url_manager->param('action', false, $from_url2);\n\n                if ($action_test != false) {\n                    $action_test = str_ireplace('editpage:', '', $action_test);\n                    $action_test = str_ireplace('editpost:', '', $action_test);\n                    $action_test = str_ireplace('edit:', '', $action_test);\n                    $action_test = str_ireplace('showposts:', '', $action_test);\n\n                    $action_test = intval($action_test);\n                    if ($action_test != 0) {\n                        $content_id = $action_test;\n                        $this->app->content_manager->define_constants(array('id' => $content_id));\n                    }\n                }\n            }\n\n            if (strpos($url, '#')) {\n                $url = substr($url, 0, strpos($url, '#'));\n            }\n\n            //$url = $_SERVER[\"HTTP_REFERER\"];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if ($content_id != false) {\n                $page = array();\n                $page['id'] = $content_id;\n                if ($content_id) {\n                    $page = $this->app->content_manager->get_by_id($content_id);\n                    if($page){\n                        $url = $page['url'];\n                    }\n                }\n            } else {\n                if (trim($url) == '' or trim($url) == app()->url_manager->site()) {\n\n                    //var_dump($from_url);\n                    //$page = $this->app->content_manager->get_by_url($url);\n                    $page = $this->app->content_manager->homepage();\n\n                    if (!defined('IS_HOME')) {\n                        define('IS_HOME', true);\n                    }\n\n                    if (isset($from_url2)) {\n                        $mw_quick_edit = app()->url_manager->param('mw_quick_edit', false, $from_url2);\n\n                        if ($mw_quick_edit) {\n                            $page = false;\n                        }\n                    }\n                } else {\n                    if (!stristr($url, admin_url())) {\n                        $page = $this->app->content_manager->get_by_url($url);\n                    } else {\n                        $page = false;\n                        if (!defined('PAGE_ID')) {\n                            define('PAGE_ID', false);\n                        }\n                        if (!defined('POST_ID')) {\n                            define('POST_ID', false);\n                        }\n                        if (!defined('CONTENT_ID')) {\n                            define('CONTENT_ID', false);\n                        }\n                    }\n                }\n            }\n        } else {\n            $url = app()->url_manager->string();\n        }\n\n        if (!defined('IS_HOME')) {\n            if (isset($page['is_home']) and $page['is_home'] == 'y') {\n                define('IS_HOME', true);\n            }\n        }\n\n\n        if (mw_is_installed()) {\n            if ($page == false) {\n                if (!isset($content_id)) {\n                    return;\n                }\n\n                $this->app->content_manager->define_constants(array('id' => $content_id));\n            } else {\n                $this->app->content_manager->define_constants($page);\n            }\n        }\n\n        if (defined('TEMPLATE_DIR')) {\n            app()->template_manager->boot_template();\n        }\n\n        if ($custom_display == true) {\n            $u2 = app()->url_manager->site();\n            $u1 = str_replace($u2, '', $url);\n\n            $this->render_this_url = $u1;\n            $this->isolate_by_html_id = $custom_display_id;\n            return $this->frontend();\n\n\n        }\n\n\n        $url_last = false;\n        if (!isset($request_data['module'])) {\n            $url = app()->url_manager->string(0);\n            if ($url == __FUNCTION__) {\n                $url = app()->url_manager->string(0);\n            }\n\n            /*\n            $is_ajax = app()->url_manager->is_ajax();\n\n            if ($is_ajax == true) {\n            $url = app()->url_manager->string(true);\n            }*/\n\n            $url = $this->app->format->replace_once('module/', '', $url);\n            $url = $this->app->format->replace_once('module_api/', '', $url);\n            $url = $this->app->format->replace_once('m/', '', $url);\n            if (is_module($url)) {\n                $request_data['module'] = $url;\n                $mod_from_url = $url;\n            } else {\n                $url1 = $url_temp = explode('/', $url);\n                $url_last = array_pop($url_temp);\n\n                $try_intil_found = false;\n                $temp1 = array();\n                foreach ($url_temp as $item) {\n                    $temp1[] = implode('/', $url_temp);\n                    $url_laset = array_pop($url_temp);\n                }\n\n                $i = 0;\n                foreach ($temp1 as $item) {\n                    if ($try_intil_found == false) {\n                        if (is_module($item)) {\n                            $url_tempx = explode('/', $url);\n\n                            $request_data['module'] = $item;\n                            $url_prev = $url_last;\n                            $url_last = array_pop($url_tempx);\n                            $url_prev = array_pop($url_tempx);\n\n                            // d($url_prev);\n                            $mod_from_url = $item;\n                            $try_intil_found = true;\n                        }\n                    }\n                    ++$i;\n                }\n            }\n        }\n\n        $module_info = app()->url_manager->param('module_info', true);\n\n\n        if ($module_info and isset($request_data['module'])) {\n            $request_data['module'] = str_replace('..', '', $request_data['module']);\n            $try_config_file = modules_path() . '' . $request_data['module'] . '_config.php';\n            $try_config_file = normalize_path($try_config_file, false);\n            if (is_file($try_config_file)) {\n                include $try_config_file;\n\n                if (!isset($config) or !is_array($config)) {\n                    return false;\n                }\n\n                if (!isset($config['icon']) or $config['icon'] == false) {\n                    $config['icon'] = modules_path() . '' . $request_data['module'] . '.png';\n                    $config['icon'] = app()->url_manager->link_to_file($config['icon']);\n                }\n                echo json_encode($config);\n\n                return;\n            }\n        }\n\n\n        $admin = app()->url_manager->param('admin', true);\n\n        $mod_to_edit = app()->url_manager->param('module_to_edit', true);\n        $embed = app()->url_manager->param('embed', true);\n\n        $mod_iframe = false;\n        if ($mod_to_edit != false) {\n            $mod_to_edit = str_ireplace('_mw_slash_replace_', '/', $mod_to_edit);\n            $mod_iframe = true;\n        }\n\n        //$data = $request_data;\n\n        if (($_POST)) {\n            $data = $_POST;\n        } else {\n            $url = app()->url_manager->segment();\n\n            if (!empty($url)) {\n                foreach ($url as $k => $v) {\n                    $kv = explode(':', $v);\n                    if (isset($kv[0]) and isset($kv[1])) {\n                        $data[$kv[0]] = $kv[1];\n                    }\n                }\n            }\n        }\n\n        $tags = false;\n        $mod_n = false;\n\n        if (isset($data['type']) != false) {\n            if (trim($data['type']) != '') {\n                $mod_n = $data['data-type'] = $data['type'];\n            }\n        }\n\n        if (isset($data['data-module-name'])) {\n            $mod_n = $data['data-type'] = $data['data-module-name'];\n            unset($data['data-module-name']);\n        }\n\n        if (isset($data['data-type']) != false) {\n            $mod_n = $data['data-type'];\n        }\n        if (isset($data['data-module']) != false) {\n            if (trim($data['data-module']) != '') {\n                $mod_n = $data['module'] = $data['data-module'];\n            }\n        }\n\n        if (isset($data['module'])) {\n            $mod_n = $data['data-type'] = $data['module'];\n            unset($data['module']);\n        }\n\n        if (isset($data['type'])) {\n            $mod_n = $data['data-type'] = $data['type'];\n            unset($data['type']);\n        }\n        if (isset($data['data-type']) != false) {\n            $data['data-type'] = rtrim($data['data-type'], '/');\n            $data['data-type'] = rtrim($data['data-type'], '\\\\');\n            $data['data-type'] = str_replace('__', '/', $data['data-type']);\n        }\n        if (!isset($data)) {\n            $data = $request_data;\n        }\n        if (!isset($data['module']) and isset($mod_from_url) and $mod_from_url != false) {\n            $data['module'] = ($mod_from_url);\n        }\n\n        if (!isset($data['id']) and isset($request_data['id']) == true) {\n            $data['id'] = $request_data['id'];\n        }\n        if (isset($data['ondrop'])) {\n            if (!defined('MW_MODULE_ONDROP')) {\n                define('MW_MODULE_ONDROP', true);\n            }\n\n            unset($data['ondrop']);\n        }\n        // d($data);\n\n\n        $opts = array();\n        if ($request_data) {\n            $opts = $request_data;\n        }\n\n\n        if (isset($opts['class']) and is_string($opts['class']) and strstr($opts['class'], 'module-as-element')) {\n            $opts['module_as_element'] = true;\n            $opts['populate_module_ids_in_elements'] = true;\n        }\n\n\n        if ($mod_n == 'element-from-template' && isset($data['template'])) {\n            $t = str_replace('..', '', $data['template']);\n            $possible_layout = TEMPLATE_DIR . $t;\n            $possible_layout = normalize_path($possible_layout, false);\n            $opts['element_from_template'] = true;\n\n            if (is_file($possible_layout)) {\n                $l = new View($possible_layout);\n                $layout = $l->__toString();\n                $layout = $this->app->parser->process($layout, $opts);\n                return response($layout);\n            }\n        }\n\n        if ($mod_n == 'module-' && isset($data['template'])) {\n            $t = str_replace('..', '', $data['template']);\n            $possible_layout = templates_path() . $t;\n            $possible_layout = normalize_path($possible_layout, false);\n            if (is_file($possible_layout)) {\n                $l = new View($possible_layout);\n                $layout = $l->__toString();\n                $layout = $this->app->parser->process($layout, $opts);\n                return response($layout);\n\n\n                //  echo $layout;\n\n                // return;\n            }\n        }\n\n        $has_id = false;\n        if (isset($data) and is_array($data)) {\n            foreach ($data as $k => $v) {\n                if ($k != 'ondrop') {\n                    if ($k == 'id') {\n                        $has_id = true;\n                    }\n\n                    if (is_array($v)) {\n                        $v1 = $this->app->format->array_to_base64($v);\n                        $tags .= \"{$k}=\\\"$v1\\\" \";\n                    } else {\n                        $v = $this->app->format->clean_html($v);\n\n                        //$v = app()->database_manager->escape_string($v);\n\n                        $tags .= \"{$k}=\\\"$v\\\" \";\n                    }\n                }\n            }\n        }\n\n        if ($has_id == false) {\n//            if (defined('MW_MODULE_ONDROP')) {\n//                $mod_n = app()->url_manager->slug($mod_n) . '-' . date(\"YmdHis\").unquid();\n//                $tags .= \"id=\\\"$mod_n\\\" \";\n//            }\n            //  $mod_n = app()->url_manager->slug($mod_n) . '-' . date(\"YmdHis\");\n            //  $tags .= \"id=\\\"$mod_n\\\" \";\n        }\n\n        $tags = \"<module {$tags} />\";\n\n\n        if (isset($request_data['live_edit'])) {\n            event_trigger('mw.live_edit');\n        }\n        $opts['admin'] = $admin;\n        if ($admin == 'admin') {\n            event_trigger('mw_backend');\n            event_trigger('mw.admin');\n        } else {\n            event_trigger('mw_frontend');\n            event_trigger('mw.front');\n        }\n\n        if (isset($_SERVER['HTTP_REFERER']) and $_SERVER['HTTP_REFERER'] != false) {\n            $get_arr_from_ref = $_SERVER['HTTP_REFERER'];\n            if (strstr($get_arr_from_ref, app()->url_manager->site())) {\n                $get_arr_from_ref_arr = parse_url($get_arr_from_ref);\n                if (isset($get_arr_from_ref_arr['query']) and $get_arr_from_ref_arr['query'] != '') {\n                    $restore_get = parse_str($get_arr_from_ref_arr['query'], $get_array);\n                    if (is_array($get_array)) {\n                        mw_var('mw_restore_get', $get_array);\n                    }\n\n                    //\n                }\n            }\n        }\n\n        $res = $this->app->parser->process($tags, $opts);\n        $res = preg_replace('~<(?:!DOCTYPE|/?(?:html|head|body))[^>]*>\\s*~i', '', $res);\n\n        if ($embed != false) {\n            $p_index = mw_includes_path() . 'api/index.php';\n            $p_index = normalize_path($p_index, false);\n            $l = new View($p_index);\n            $layout = $l->__toString();\n            $res = str_replace('{content}', $res, $layout);\n        }\n\n        $aj = app()->url_manager->is_ajax();\n\n        if ((isset($request_data['live_edit']) or isset($request_data['admin'])) and $aj == false) {\n            $p_index = mw_includes_path() . DS . 'toolbar' . DS . 'editor_tools' . DS . 'module_settings' . DS . 'index.php';\n            $p_index = normalize_path($p_index, false);\n            $l = new View($p_index);\n            $l->params = $data;\n            $layout = $l->__toString();\n            $res = str_replace('{content}', $res, $layout);\n            $res = $this->app->parser->process($res, $options = false);\n        }\n\n        $res = mw()->template->process_stacks($res);\n\n        $res = execute_document_ready($res);\n        if (!defined('MW_NO_OUTPUT')) {\n            $res = app()->url_manager->replace_site_url_back($res);\n            return response($res);\n\n            // echo $res;\n        }\n\n        if ($url_last == __FUNCTION__) {\n            return;\n        }\n        if (function_exists($url_last)) {\n            $this->api($url_last);\n        } elseif (isset($url_prev) and function_exists($url_prev)) {\n            $this->api($url_last);\n        } elseif (class_exists($url_last, false)) {\n            $this->api($url_last);\n        } elseif (isset($url_prev) and class_exists($url_prev, false)) {\n            $this->api($url_prev);\n        }\n\n        return;\n    }\n\n    public function editor_tools()\n    {\n        if (!defined('IN_ADMIN') and is_admin()) {\n            define('IN_ADMIN', true);\n        }\n        if (!defined('IN_EDITOR_TOOLS')) {\n            define('IN_EDITOR_TOOLS', true);\n        }\n\n        if (mw_is_installed() == true) {\n\n            //event_trigger('mw_db_init');\n            //  event_trigger('mw_cron');\n        }\n\n        $tool = app()->url_manager->segment(1);\n\n        if ($tool) {\n        } else {\n            $tool = 'index';\n        }\n\n        $page = false;\n        if (isset($_REQUEST['content_id'])) {\n            if (intval($_REQUEST['content_id']) == 0) {\n                $this->create_new_page = true;\n\n                $custom_content_data_req = $_REQUEST;\n                $custom_content_data = array();\n                if (isset($custom_content_data_req['content_type'])) {\n                    //    $custom_content_data['content_type'] = $custom_content_data_req['content_type'];\n                }\n                if (isset($custom_content_data_req['content_type'])) {\n                    $custom_content_data['content_type'] = $custom_content_data_req['content_type'];\n                }\n                if (isset($custom_content_data_req['subtype'])) {\n                    $custom_content_data['subtype'] = $custom_content_data_req['subtype'];\n                }\n                if (isset($custom_content_data_req['parent_page']) and is_numeric($custom_content_data_req['parent_page'])) {\n                    $custom_content_data['parent'] = intval($custom_content_data_req['parent_page']);\n                }\n                if (isset($custom_content_data_req['preview_layout'])) {\n                    //  $custom_content_data['preview_layout'] =($custom_content_data_req['preview_layout']);\n                }\n                if (!empty($custom_content_data)) {\n                    $custom_content_data['id'] = 0;\n                    $this->content_data = $custom_content_data;\n                }\n\n                $this->return_data = 1;\n                 $page = $this->frontend();\n            } else {\n                $page = $this->app->content_manager->get_by_id($_REQUEST['content_id']);\n            }\n        } elseif (isset($_SERVER['HTTP_REFERER'])) {\n            $url = $_SERVER['HTTP_REFERER'];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if (trim($url) == '' or trim($url) == app()->url_manager->site()) {\n\n                //$page = $this->app->content_manager->get_by_url($url);\n                $page = $this->app->content_manager->homepage();\n            } else {\n                $page = $this->app->content_manager->get_by_url($url);\n            }\n        } else {\n            $url = app()->url_manager->string();\n        }\n\n        if (!isset($page['active_site_template'])) {\n            $page['active_site_template'] = 'default';\n        }\n\n        if (isset($_GET['preview_template'])) {\n            $page['active_site_template'] = $_GET['preview_template'];\n        }\n        if (isset($_GET['content_type'])) {\n            $page['content_type'] = $_GET['content_type'];\n        }\n        if (isset($_GET['preview_layout']) and $_GET['preview_layout'] != 'inherit') {\n            $page['layout_file'] = $_GET['preview_layout'];\n        }\n\n        $this->app->content_manager->define_constants($page);\n\n        $page['render_file'] = $this->app->template->get_layout($page);\n\n        if (defined('TEMPLATE_DIR')) {\n            app()->template_manager->boot_template();\n        }\n\n        // $params = $_REQUEST;\n        $params = array_merge($_GET, $_POST);\n        $tool = str_replace('..', '', $tool);\n\n        $p_index = mw_includes_path() . 'toolbar/editor_tools/index.php';\n        $p_index = normalize_path($p_index, false);\n\n        $standalone_edit = true;\n        $p = mw_includes_path() . 'toolbar/editor_tools/' . $tool . '/index.php';\n        $standalone_edit = false;\n        if ($tool == 'plupload') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'plupload') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'imageeditor') {\n            $standalone_edit = true;\n        }\n\n        if ($tool == 'rte_image_editor') {\n            $standalone_edit = true;\n        }\n        if ($tool == 'editor_toolbar') {\n            $standalone_edit = true;\n        }\n\n        if ($tool == 'wysiwyg') {\n            $standalone_edit = false;\n            $ed_file_from_template = TEMPLATE_DIR . 'editor.php';\n\n            if (is_file($ed_file_from_template)) {\n                $p_index = $ed_file_from_template;\n            }\n\n            if (isset($page['content_type']) and $page['content_type'] != 'post' and $page['content_type'] != 'page' and $page['content_type'] != 'product') {\n                if (isset($page['subtype']) and ($page['subtype'] != 'post' and $page['subtype'] != 'product')) {\n                    $standalone_edit = true;\n                }\n            } elseif (isset($page['content_type']) and $page['content_type'] == 'post') {\n                if (isset($page['subtype']) and ($page['subtype'] != 'post' and $page['subtype'] != 'product')) {\n                    $standalone_edit = true;\n                }\n            }\n\n            if ($standalone_edit) {\n                if (!isset($page['content'])) {\n                    $page['content'] = '<div class=\"element\"></div>';\n                }\n                $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n                $page['render_file'] = false;\n            }\n\n            //\n            //  $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n        }\n        $default_css = '';\n        $apijs_settings_loaded = '';\n        $apijs_loaded = '';\n\n        $p = normalize_path($p, false);\n\n        $l = new View($p_index);\n        $l->params = $params;\n        $layout = $l->__toString();\n        $apijs_loaded = false;\n        if ($layout != false) {\n\n            //$apijs_loaded = $this->app->template->get_apijs_url() . '?id=' . CONTENT_ID;\n            //$apijs_loaded = $this->app->template->get_apijs_url();\n            // $apijs_settings_loaded = $this->app->template->get_apijs_settings_url() . '?id=' . CONTENT_ID . '&category_id=' . CATEGORY_ID;\n            //  $apijs_settings_loaded = $this->app->template->get_apijs_settings_url();\n            $default_css_url = $this->app->template->get_default_system_ui_css_url();\n\n\n            // $is_admin = app()->user_manager->is_admin();\n            // $default_css = '<link rel=\"stylesheet\" href=\"' . mw_includes_url() . 'default.css?v=' . MW_VERSION . '\" type=\"text/css\" />';\n            $default_css = '<link rel=\"stylesheet\" href=\"' . $default_css_url . '\" type=\"text/css\" />';\n\n\n            $headers = event_trigger('site_header', TEMPLATE_NAME);\n            $template_headers_append = '';\n            $one = 1;\n            if (is_array($headers)) {\n                foreach ($headers as $modify) {\n                    if ($modify != false and is_string($modify) and $modify != '') {\n                        $template_headers_append = $template_headers_append . $modify;\n                    }\n                }\n                if ($template_headers_append != false and $template_headers_append != '') {\n                    $layout = str_ireplace('</head>', $template_headers_append . '</head>', $l, $one);\n                }\n            }\n            if (function_exists('template_headers_src')) {\n                $template_headers_src = template_headers_src();\n                if ($template_headers_src != false and $template_headers_src != '') {\n                    $layout = str_ireplace('</head>', $template_headers_src . '</head>', $l, $one);\n                }\n            }\n\n            if (isset($page['active_site_template'])) {\n                if ($page['active_site_template'] == '') {\n                    $page['active_site_template'] = 'default';\n                }\n\n                if ($page['active_site_template'] == 'default') {\n                    $active_site_template = $this->app->option_manager->get('current_template', 'template');\n                } else {\n                    $active_site_template = $page['active_site_template'];\n                    if ($active_site_template == 'mw_default') {\n                        $active_site_template = 'default';\n                    }\n                }\n\n                $live_edit_css_folder = userfiles_path() . 'css' . DS . $active_site_template . DS;\n                $custom_live_edit = $live_edit_css_folder . DS . 'live_edit.css';\n                if (is_file($custom_live_edit)) {\n                    $live_edit_url_folder = userfiles_url() . 'css/' . $active_site_template . '/';\n                    $custom_live_editmtime = filemtime($custom_live_edit);\n                    $liv_ed_css = '<link rel=\"stylesheet\" href=\"' . $live_edit_url_folder . 'live_edit.css?version=' . $custom_live_editmtime . '\" id=\"mw-template-settings\" type=\"text/css\" />';\n                    $layout = str_ireplace('</head>', $liv_ed_css . '</head>', $l);\n                }\n            }\n        }\n\n        if (isset($_REQUEST['plain'])) {\n            if (is_file($p)) {\n                $p = new View($p);\n                $p->params = $params;\n                $layout = $p->__toString();\n                return response($layout);\n\n            }\n        } elseif (is_file($p)) {\n            $p = new View($p);\n            $p->params = $params;\n            $layout_tool = $p->__toString();\n            $layout = str_replace('{content}', $layout_tool, $layout);\n        } else {\n            $layout = str_replace('{content}', 'Not found!', $layout);\n        }\n        $category = false;\n        if (defined('CATEGORY_ID')) {\n            $category = $this->app->category_manager->get_by_id(CATEGORY_ID);\n        }\n\n        //    $page['render_file'] = $render_file;\n\n        if (!$standalone_edit and $tool == 'wysiwyg') {\n            if (isset($page['render_file'])) {\n                if (!isset($page['layout_file'])) {\n                    $page['layout_file'] = str_replace(template_dir(), '', $page['render_file']);\n                }\n\n\n                event_trigger('mw.front', $page);\n                $l = new View($page['render_file']);\n                $l->page_id = PAGE_ID;\n                $l->content_id = CONTENT_ID;\n                $l->post_id = POST_ID;\n                $l->category_id = CATEGORY_ID;\n                $l->content = $page;\n                $l->category = $category;\n                $l->params = $params;\n                $l->page = $page;\n                $l->application = $this->app;\n                $l = $l->__toString();\n//\n//\n//                $render_params = array();\n//                $render_params['render_file'] = $p;\n//                $render_params['page_id'] = PAGE_ID;\n//                $render_params['content_id'] = CONTENT_ID;\n//                $render_params['post_id'] = POST_ID;\n//                $render_params['category_id'] = CATEGORY_ID;\n//                $render_params['page'] = $page;\n//                $render_params['params'] = $params;\n//                $render_params['application'] = $this->app;\n\n                //  $l = $this->app->template->render($render_params);\n                if (is_object($l)) {\n                    return $l;\n                }\n\n                $l = $this->app->parser->process($l, $options = false);\n\n                //                if(isset($page['content']) and $page['content'] != false){\n                //\n                //                if($page['content'] == ''){\n                //                    unset($page['content']);\n                //                }\n                //                } else {\n                //                    $page['content'] = $l;\n                //                }\n\n                $editable = $this->app->parser->isolate_content_field($l, true);\n\n                if ($editable != false) {\n                    $page['content'] = $editable;\n                } else {\n                    if ($tool == 'wysiwyg') {\n                        $err = 'no editable content region found';\n                        if (isset($page['layout_file'])) {\n                            $file = $page['layout_file'];\n                            $file = str_replace('__', '/', $page['layout_file']);\n                            $err = $err . ' in file ' . $file;\n                        }\n                        if (isset($page['active_site_template'])) {\n                            $err = $err . ' (' . $page['active_site_template'] . ' template)';\n                        }\n\n                        return $err;\n                    }\n                }\n            }\n        }\n\n        /* if (!stristr($layout, $apijs_loaded)) {\n             $rep = 0;\n\n             $default_css = $default_css . \"\\r\\n\" . '<script src=\"' . $apijs_settings_loaded . '\"></script>' . \"\\r\\n\";\n             $default_css = $default_css . \"\\r\\n\" . '<script src=\"' . $apijs_loaded . '\"></script>' . \"\\r\\n\";\n             $layout = str_ireplace('<head>', '<head>' . $default_css, $layout, $rep);\n         }*/\n\n        $layout = str_ireplace('<head>', '<head>' . $default_css, $layout, $rep);\n\n\n        $layout = $this->app->template->append_api_js_to_layout($layout);\n        if (isset($page['content'])) {\n            if ($standalone_edit) {\n                if (!isset($render_file)) {\n                    if (stristr($page['content'], 'field=\"content\"') or stristr($page['content'], 'field=\\'content\\'')) {\n                        $page['content'] = '<div class=\"edit\" field=\"content\" rel=\"content\" contenteditable=\"true\">' . $page['content'] . '</div>';\n                    }\n                }\n            }\n\n            $layout = str_replace('{content}', $page['content'], $layout);\n        }\n\n        $layout = mw()->template->process_meta($layout);\n        $layout = mw()->template->process_stacks($layout);\n\n\n        $layout = $this->app->parser->process($layout, $options = false);\n\n        $layout = mw()->template->add_csrf_token_meta_tags($layout);\n\n        $layout = execute_document_ready($layout);\n\n        $layout = str_replace('{head}', '', $layout);\n\n        $layout = str_replace('{content}', '', $layout);\n        return response($layout);\n\n\n    }\n\n}\n", "<?php\n\nnamespace MicroweberPackages\\Helper;\n\nuse voku\\helper\\AntiXSS;\n\nclass XSSClean\n{\n\n\n    public function cleanArray($array)    {\n\n        if (is_array($array)) {\n\n            $cleanedArray = [];\n            foreach ($array as $key => $value) {\n                if (is_string($key)) {\n                    $key = $this->clean($key);\n                }\n\n                if (is_array($value)) {\n                    $cleanedArray[$key] = $this->cleanArray($value);\n                } else {\n                    $cleanedArray[$key] = $this->clean($value);\n                }\n            }\n\n            return $cleanedArray;\n        }\n    }\n\n    public function clean($html)\n    {\n        if(is_array($html)){\n            return $this->cleanArray($html);\n        }\n\n        // from https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#ontransitionend\n        $cleanStrings = [\n            'ontransitionstart',\n            'onwebkitanimationend',\n            'onwebkitanimationiteration',\n            'onwebkitanimationstart',\n            'onwebkittransitionend',\n            'ontransitionrun',\n            'onloadedmetadata',\n            'ondurationchange',\n            'oncanplaythrough',\n            'oncuechange',\n            'onbounce',\n            'onbegin',\n            'onbeforeunload',\n            'onbeforescriptexecute',\n            'onbeforeprint',\n            'onanimationstart',\n            'onanimationiteration',\n            'onanimationend',\n            'onanimationcancel',\n            'onafterscriptexecute',\n            'onfocusin',\n            'onhashchange',\n            'onload',\n            'onunload',\n            'onloadend',\n            'onloadstart',\n            'onmessage',\n            'onpageshow',\n            'onloadedmetadata',\n            'onloadeddata',\n            'onplay',\n            'onplaying',\n            'onpopstate',\n            'onprogress',\n            'onrepeat',\n            'onresize',\n            'onscroll',\n            'onstart',\n            'ontimeupdate',\n            'ontoggle',\n            'ontransitionend',\n            'ontransitioncancel',\n            'ontransitionrun',\n            'ontransitionstart',\n            'onafterprint',\n            'onauxclick',\n            'onbeforecopy',\n            'onbeforecut',\n            'onblur',\n            'onchange',\n            'onclick',\n            'onclose',\n            'oncontextmenu',\n            'oncopy',\n            'oncut',\n            'ondblclick',\n            'ondrag',\n            'ondragend',\n            'ondragenter',\n            'ondragleave',\n            'ondragover',\n            'ondragstart',\n            'ondragexit',\n            'ondrop',\n            'onfocusout',\n            'onfullscreenchange',\n            'oninput',\n            'oninvalid',\n            'onkeydown',\n            'onkeypress',\n            'onkeyup',\n            'onmousedown',\n            'onmouseenter',\n            'onmouseleave',\n            'onmousemove',\n            'onmouseout',\n            'onmouseover',\n            'onmouseup',\n            'onmousewheel',\n            'onmozfullscreenchange',\n            'onpagehide',\n            'onpaste',\n            'onpause',\n            'onpointerdown',\n            'onpointerenter',\n            'onpointerleave',\n            'onpointermove',\n            'onpointerout',\n            'onpointerover',\n            'onpointerrawupdate',\n            'onpointerup',\n            'onreset',\n            'onsearch',\n            'onseeked',\n            'onseeking',\n            'onselect',\n            'onselectionchange',\n            'onselectstart',\n            'onshow',\n            'onsubmit',\n            'ontouchend',\n            'ontouchmove',\n            'ontouchstart',\n            'onvolumechange',\n            'onwheel',\n            'onWebkitAnimationEnd',\n            'onWebkitAnimationIteration',\n            'onWebkitAnimationStart',\n            'onWebkitTransitionEnd',\n            'onwebkitTransitionEnd',\n            'onunhandledrejection'\n        ];\n\n        $antiXss = new AntiXSS();\n        $antiXss->addEvilHtmlTags($cleanStrings);\n        $antiXss->addEvilAttributes($cleanStrings);\n        $antiXss->addNeverAllowedOnEventsAfterwards($cleanStrings);\n\n        $html = $antiXss->xss_clean($html);\n\n\n        return $html;\n    }\n\n}\n"], "filenames": ["src/MicroweberPackages/App/Http/Controllers/ApiController.php", "src/MicroweberPackages/Helper/XSSClean.php"], "buggy_code_start_loc": [618, 101], "buggy_code_end_loc": [628, 101], "fixing_code_start_loc": [619, 102], "fixing_code_end_loc": [633, 103], "type": "CWE-79", "message": "Reflected XSS in GitHub repository microweber/microweber prior to 1.2.16. Executing JavaScript as the victim", "other": {"cve": {"id": "CVE-2022-1584", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-04T18:15:08.557", "lastModified": "2022-05-11T19:58:41.750", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Reflected XSS in GitHub repository microweber/microweber prior to 1.2.16. Executing JavaScript as the victim"}, {"lang": "es", "value": "Una vulnerabilidad ded tipo XSS reflejado en el repositorio de GitHub microweber/microweber versiones anteriores a 1.2.16. Ejecuci\u00f3n de JavaScript como v\u00edctima"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.16", "matchCriteriaId": "71C4B438-2976-4F10-9A3C-DFD10AD93AC5"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/527abd148e6b7aff8df92a9f1aa951e5bebac59c", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/69f4ca67-d615-4f25-b2d1-19df7bf1107d", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/527abd148e6b7aff8df92a9f1aa951e5bebac59c"}}