{"buggy_code": ["name: NATS.ws CI\n\non:\n  push:\n    tags:\n      - '*'\n    branches:\n      - '*'\n  pull_request:\n    branches: [master]\n\njobs:\n  test:\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout NATS.ws\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 1\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v1\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Use Deno Version ${{ matrix.deno-version }}\n        uses: denolib/setup-deno@master\n        with:\n          deno-version: 1.4.0\n      - name: Setup Go\n        uses: actions/setup-go@v1\n        with:\n          go-version: ${{matrix.go}}\n#      - name: Set NATS Server Version\n#        run: echo '::set-env name=NATS_VERSION::v2.1.7'\n#      - name: Get nats-server\n#        run: |\n#          wget \"https://github.com/nats-io/nats-server/releases/download/$NATS_VERSION/nats-server-$NATS_VERSION-linux-amd64.zip\" -O tmp.zip\n#          unzip tmp.zip\n#          mv nats-server-$NATS_VERSION-linux-amd64 nats-server\n      - run: npm ci\n      - run: npm run install-ns\n      - run: npm run build\n      - run: npm test\n        env:\n          CI: true\n#      - name: Gather coverage\n#        if: matrix.node-version == '14.x'\n#        run: npm run coveralls\n#      - name: Coveralls\n#        uses: coverallsapp/github-action@master\n#        if: matrix.node-version == '14.x'\n#        with:\n#          github-token: ${{ secrets.GITHUB_TOKEN }}\n", "{\n  \"name\": \"nats.ws\",\n  \"version\": \"1.0.0-110\",\n  \"description\": \"WebSocket NATS client\",\n  \"main\": \"nats.mjs\",\n  \"types\": \"nats.d.ts\",\n  \"files\": [\n    \"examples/\",\n    \"OWNERS.md\",\n    \"CODE-OF-CONDUCT.md\",\n    \"LICENSE\",\n    \"nats.d.ts\"\n  ],\n  \"scripts\": {\n    \"setup\": \"curl -fsSL https://deno.land/x/install/install.sh | sh\",\n    \"build\": \"deno run --allow-all --unstable --reload src/mod.ts && deno bundle --unstable src/mod.ts ./nats.mjs\",\n    \"prepack\": \"npm run build\",\n    \"fmt\": \"deno fmt src/*.ts examples/*.js test/*.js test/*/*.js\",\n    \"start-tls-nats\": \"cd examples && ../nats-server -DV -c tls.conf\",\n    \"start-nats\": \"cd examples && ../nats-server -c nontls.conf\",\n    \"start-http\": \"deno run --allow-all --unstable https://raw.githubusercontent.com/denoland/deno/master/std/http/file_server.ts .\",\n    \"start-https\": \"deno run --allow-all --unstable https://raw.githubusercontent.com/denoland/deno/master/std/http/file_server.ts --port 4607 --cert ./certs/cert.pem --key ./certs/key.pem --host localhost .\",\n    \"install-certs\": \"env CAROOT=./certs mkcert -cert-file ./certs/cert.pem -key-file ./certs/key.pem -install localhost 127.0.0.1 ::1\",\n    \"install-ns\": \"mkdir -p ./.deps && cd ./.deps && git clone --branch=master https://github.com/nats-io/nats-server.git && cd nats-server && go build && mv nats-server ../../\",\n    \"clone-nbc\": \"deno run --allow-all bin/clone-nd.ts\",\n    \"cjs-nbc\": \"deno run --allow-all ./bin/cjs-fix-imports.ts -o nats-base-client/ ./.deps/nats.deno/nats-base-client/\",\n    \"cjs-wst\": \"deno run --allow-all ./bin/cjs-fix-imports.ts -o wst/ ./src\",\n    \"build-cjs\": \"tsc\",\n    \"clean\": \"rm -Rf ./nats.mjs ./build ./.deps ./nats-base-client ./cjs-wst\",\n    \"stage\": \"npm run clean && npm run clone-nbc && npm run cjs-nbc && npm run cjs-wst && rm -Rf ./.deps/ && npm run build-cjs && rm -Rf ./wst\",\n    \"ava\": \"nyc ava --verbose -T 60000\",\n    \"test\": \"npm run stage && npm run ava\",\n    \"debug-test\": \"node node_modules/.bin/ava --verbose -T 6500000 --match\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^14.6.0\",\n    \"ava\": \"^3.11.1\",\n    \"browser-env\": \"^3.3.0\",\n    \"minimist\": \"^1.2.5\",\n    \"nkeys.js\": \"^1.0.0-5\",\n    \"nyc\": \"^15.1.0\",\n    \"tslint\": \"^6.1.3\",\n    \"typescript\": \"^3.9.7\"\n  },\n  \"ava\": {\n    \"failFast\": true,\n    \"files\": [\n      \"./test/**/*.js\",\n      \"!./test/index.d.ts\",\n      \"!./test/index.js\",\n      \"!./test/helpers/**/*.js\",\n      \"!./test/migrate/**/*.js\"\n    ],\n    \"require\": [\n      \"./test/helpers/setup-browser-env.js\"\n    ]\n  },\n  \"nyc\": {\n    \"extension\": [\n      \".ts\",\n      \".js\"\n    ],\n    \"include\": [\n      \"src/**/*.ts\",\n      \"build/**/*.js\",\n      \"nats-base-client/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"nats-base-client/bench.ts\",\n      \"nats-base-client/codec.ts\",\n      \"nats-base-client/databuffer.ts\",\n      \"nats-base-client/denobuffer.ts\",\n      \"nats-base-client/headers.ts\",\n      \"nats-base-client/muxsubscription.ts\",\n      \"nats-base-client/nkeys.ts\",\n      \"nats-base-client/nuid.ts\",\n      \"nats-base-client/parser.ts\",\n      \"nats-base-client/queued_iterator.ts\",\n      \"nats-base-client/servers.ts\",\n      \"nats-base-client/transport.ts\",\n      \"nats-base-client/util.ts\",\n      \"test/**\",\n      \"examples/**\"\n    ],\n    \"sourceMap\": true,\n    \"all\": true\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:nats-io/nats.ws.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/nats-io/nats.ws/issues\"\n  },\n  \"keywords\": [\n    \"NATS\",\n    \"websockets\"\n  ],\n  \"author\": {\n    \"name\": \"The NATS Authors\"\n  },\n  \"license\": \"Apache-2.0\"\n}\n", "/*\n * Copyright 2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-8/nats-base-client/internal_mod.ts\";\n", "/*\n * Copyright 2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type {\n  ConnectionOptions,\n  Transport,\n  Deferred,\n  Server,\n} from \"./nats-base-client.ts\";\nimport {\n  ErrorCode,\n  NatsError,\n  render,\n  deferred,\n  delay,\n} from \"./nats-base-client.ts\";\n\nconst VERSION = \"1.0.0-110\";\nconst LANG = \"nats.ws\";\n\nexport class WsTransport implements Transport {\n  version: string = VERSION;\n  lang: string = LANG;\n  closeError?: Error;\n  connected = false;\n  private done = false;\n  // @ts-ignore\n  private socket: WebSocket;\n  private options!: ConnectionOptions;\n  socketClosed = false;\n  encrypted = false;\n\n  yields: Uint8Array[] = [];\n  signal: Deferred<void> = deferred<void>();\n  private closedNotification: Deferred<void | Error> = deferred();\n\n  constructor() {\n  }\n\n  async connect(\n    server: Server,\n    options: ConnectionOptions,\n  ): Promise<void> {\n    const connected = false;\n    const connLock = deferred<void>();\n\n    this.options = options;\n    const u = server.src;\n    this.encrypted = u.indexOf(\"wss://\") === 0;\n    this.socket = new WebSocket(u);\n    this.socket.binaryType = \"arraybuffer\";\n\n    this.socket.onopen = () => {\n      this.connected = true;\n      connLock.resolve();\n    };\n\n    this.socket.onmessage = (me: MessageEvent) => {\n      this.yields.push(new Uint8Array(me.data));\n      this.signal.resolve();\n    };\n\n    //@ts-ignore\n    this.socket.onclose = (evt: CloseEvent) => {\n      this.socketClosed = true;\n      let reason: Error | undefined;\n      if (this.done) return;\n      if (!evt.wasClean) {\n        reason = new Error(evt.reason);\n      }\n      this._closed(reason);\n    };\n\n    this.socket.onerror = (e: ErrorEvent | Event): any => {\n      const evt = e as ErrorEvent;\n      const err = new NatsError(evt.message, ErrorCode.UNKNOWN);\n      if (!connected) {\n        connLock.reject(err);\n      } else {\n        this._closed(err);\n      }\n    };\n    return connLock;\n  }\n\n  disconnect(): void {\n    this._closed(undefined, true);\n  }\n\n  private async _closed(err?: Error, internal: boolean = true): Promise<void> {\n    if (!this.connected) return;\n    if (this.done) return;\n    this.closeError = err;\n    if (!err) {\n      while (!this.socketClosed && this.socket.bufferedAmount > 0) {\n        console.log(this.socket.bufferedAmount);\n        await delay(100);\n      }\n    }\n    this.done = true;\n    try {\n      // 1002 endpoint error, 1000 is clean\n      this.socket.close(err ? 1002 : 1000, err ? err.message : undefined);\n    } catch (err) {\n    }\n    if (internal) {\n      this.closedNotification.resolve(err);\n    }\n  }\n\n  get isClosed(): boolean {\n    return this.done;\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.iterate();\n  }\n\n  async *iterate(): AsyncIterableIterator<Uint8Array> {\n    while (true) {\n      if (this.yields.length === 0) {\n        await this.signal;\n      }\n      const yields = this.yields;\n      this.yields = [];\n      for (let i = 0; i < yields.length; i++) {\n        if (this.options.debug) {\n          console.info(`> ${render(yields[i])}`);\n        }\n        yield yields[i];\n      }\n      // yielding could have paused and microtask\n      // could have added messages. Prevent allocations\n      // if possible\n      if (this.done) {\n        break;\n      } else if (this.yields.length === 0) {\n        yields.length = 0;\n        this.yields = yields;\n        this.signal = deferred();\n      }\n    }\n  }\n\n  isEncrypted(): boolean {\n    return this.connected && this.encrypted;\n  }\n\n  send(frame: Uint8Array): Promise<void> {\n    if (this.done) {\n      return Promise.resolve();\n    }\n    try {\n      this.socket.send(frame.buffer);\n      if (this.options.debug) {\n        console.info(`< ${render(frame)}`);\n      }\n      return Promise.resolve();\n    } catch (err) {\n      if (this.options.debug) {\n        console.error(`!!! ${render(frame)}: ${err}`);\n      }\n      return Promise.reject(err);\n    }\n  }\n\n  close(err?: Error | undefined): Promise<void> {\n    return this._closed(err, false);\n  }\n\n  closed(): Promise<void | Error> {\n    return this.closedNotification;\n  }\n}\n"], "fixing_code": ["name: NATS.ws CI\n\non:\n  push:\n    tags:\n      - '*'\n    branches:\n      - '*'\n  pull_request:\n    branches: [master]\n\njobs:\n  test:\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout NATS.ws\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 1\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v1\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Use Deno Version ${{ matrix.deno-version }}\n        uses: denolib/setup-deno@master\n        with:\n          deno-version: 1.4.2\n      - name: Setup Go\n        uses: actions/setup-go@v1\n        with:\n          go-version: ${{matrix.go}}\n#      - name: Set NATS Server Version\n#        run: echo '::set-env name=NATS_VERSION::v2.1.7'\n#      - name: Get nats-server\n#        run: |\n#          wget \"https://github.com/nats-io/nats-server/releases/download/$NATS_VERSION/nats-server-$NATS_VERSION-linux-amd64.zip\" -O tmp.zip\n#          unzip tmp.zip\n#          mv nats-server-$NATS_VERSION-linux-amd64 nats-server\n      - run: npm ci\n      - run: npm run install-ns\n      - run: npm run build\n      - run: npm test\n        env:\n          CI: true\n#      - name: Gather coverage\n#        if: matrix.node-version == '14.x'\n#        run: npm run coveralls\n#      - name: Coveralls\n#        uses: coverallsapp/github-action@master\n#        if: matrix.node-version == '14.x'\n#        with:\n#          github-token: ${{ secrets.GITHUB_TOKEN }}\n", "{\n  \"name\": \"nats.ws\",\n  \"version\": \"1.0.0-111\",\n  \"description\": \"WebSocket NATS client\",\n  \"main\": \"nats.mjs\",\n  \"types\": \"nats.d.ts\",\n  \"files\": [\n    \"examples/\",\n    \"OWNERS.md\",\n    \"CODE-OF-CONDUCT.md\",\n    \"LICENSE\",\n    \"nats.d.ts\"\n  ],\n  \"scripts\": {\n    \"setup\": \"curl -fsSL https://deno.land/x/install/install.sh | sh\",\n    \"build\": \"deno run --allow-all --unstable --reload src/mod.ts && deno bundle --unstable src/mod.ts ./nats.mjs\",\n    \"prepack\": \"npm run build\",\n    \"fmt\": \"deno fmt src/*.ts examples/*.js test/*.js test/*/*.js\",\n    \"start-tls-nats\": \"cd examples && ../nats-server -DV -c tls.conf\",\n    \"start-nats\": \"cd examples && ../nats-server -c nontls.conf\",\n    \"start-http\": \"deno run --allow-all --unstable https://raw.githubusercontent.com/denoland/deno/master/std/http/file_server.ts .\",\n    \"start-https\": \"deno run --allow-all --unstable https://raw.githubusercontent.com/denoland/deno/master/std/http/file_server.ts --port 4607 --cert ./certs/cert.pem --key ./certs/key.pem --host localhost .\",\n    \"install-certs\": \"env CAROOT=./certs mkcert -cert-file ./certs/cert.pem -key-file ./certs/key.pem -install localhost 127.0.0.1 ::1\",\n    \"install-ns\": \"mkdir -p ./.deps && cd ./.deps && git clone --branch=master https://github.com/nats-io/nats-server.git && cd nats-server && go build && mv nats-server ../../\",\n    \"clone-nbc\": \"deno run --allow-all bin/clone-nd.ts\",\n    \"cjs-nbc\": \"deno run --allow-all ./bin/cjs-fix-imports.ts -o nats-base-client/ ./.deps/nats.deno/nats-base-client/\",\n    \"cjs-wst\": \"deno run --allow-all ./bin/cjs-fix-imports.ts -o wst/ ./src\",\n    \"build-cjs\": \"tsc\",\n    \"clean\": \"rm -Rf ./nats.mjs ./build ./.deps ./nats-base-client ./cjs-wst\",\n    \"stage\": \"npm run clean && npm run clone-nbc && npm run cjs-nbc && npm run cjs-wst && rm -Rf ./.deps/ && npm run build-cjs && rm -Rf ./wst\",\n    \"ava\": \"nyc ava --verbose -T 60000\",\n    \"test\": \"npm run stage && npm run ava\",\n    \"debug-test\": \"node node_modules/.bin/ava --verbose -T 6500000 --match\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^14.6.0\",\n    \"ava\": \"^3.11.1\",\n    \"browser-env\": \"^3.3.0\",\n    \"minimist\": \"^1.2.5\",\n    \"nkeys.js\": \"^1.0.0-5\",\n    \"nyc\": \"^15.1.0\",\n    \"tslint\": \"^6.1.3\",\n    \"typescript\": \"^3.9.7\"\n  },\n  \"ava\": {\n    \"failFast\": true,\n    \"files\": [\n      \"./test/**/*.js\",\n      \"!./test/index.d.ts\",\n      \"!./test/index.js\",\n      \"!./test/helpers/**/*.js\",\n      \"!./test/migrate/**/*.js\"\n    ],\n    \"require\": [\n      \"./test/helpers/setup-browser-env.js\"\n    ]\n  },\n  \"nyc\": {\n    \"extension\": [\n      \".ts\",\n      \".js\"\n    ],\n    \"include\": [\n      \"src/**/*.ts\",\n      \"build/**/*.js\",\n      \"nats-base-client/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"nats-base-client/bench.ts\",\n      \"nats-base-client/codec.ts\",\n      \"nats-base-client/databuffer.ts\",\n      \"nats-base-client/denobuffer.ts\",\n      \"nats-base-client/headers.ts\",\n      \"nats-base-client/muxsubscription.ts\",\n      \"nats-base-client/nkeys.ts\",\n      \"nats-base-client/nuid.ts\",\n      \"nats-base-client/parser.ts\",\n      \"nats-base-client/queued_iterator.ts\",\n      \"nats-base-client/servers.ts\",\n      \"nats-base-client/transport.ts\",\n      \"nats-base-client/util.ts\",\n      \"test/**\",\n      \"examples/**\"\n    ],\n    \"sourceMap\": true,\n    \"all\": true\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:nats-io/nats.ws.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/nats-io/nats.ws/issues\"\n  },\n  \"keywords\": [\n    \"NATS\",\n    \"websockets\"\n  ],\n  \"author\": {\n    \"name\": \"The NATS Authors\"\n  },\n  \"license\": \"Apache-2.0\"\n}\n", "/*\n * Copyright 2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from \"https://raw.githubusercontent.com/nats-io/nats.deno/v1.0.0-9/nats-base-client/internal_mod.ts\";\n", "/*\n * Copyright 2020 The NATS Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type {\n  ConnectionOptions,\n  Transport,\n  Deferred,\n  Server,\n} from \"./nats-base-client.ts\";\nimport {\n  ErrorCode,\n  NatsError,\n  render,\n  deferred,\n  delay,\n} from \"./nats-base-client.ts\";\n\nconst VERSION = \"1.0.0-111\";\nconst LANG = \"nats.ws\";\n\nexport class WsTransport implements Transport {\n  version: string = VERSION;\n  lang: string = LANG;\n  closeError?: Error;\n  connected = false;\n  private done = false;\n  // @ts-ignore\n  private socket: WebSocket;\n  private options!: ConnectionOptions;\n  socketClosed = false;\n  encrypted = false;\n\n  yields: Uint8Array[] = [];\n  signal: Deferred<void> = deferred<void>();\n  private closedNotification: Deferred<void | Error> = deferred();\n\n  constructor() {\n  }\n\n  async connect(\n    server: Server,\n    options: ConnectionOptions,\n  ): Promise<void> {\n    const connected = false;\n    const connLock = deferred<void>();\n\n    this.options = options;\n    const u = server.src;\n    this.encrypted = u.indexOf(\"wss://\") === 0;\n    this.socket = new WebSocket(u);\n    this.socket.binaryType = \"arraybuffer\";\n\n    this.socket.onopen = () => {\n      this.connected = true;\n      connLock.resolve();\n    };\n\n    this.socket.onmessage = (me: MessageEvent) => {\n      this.yields.push(new Uint8Array(me.data));\n      this.signal.resolve();\n    };\n\n    //@ts-ignore\n    this.socket.onclose = (evt: CloseEvent) => {\n      this.socketClosed = true;\n      let reason: Error | undefined;\n      if (this.done) return;\n      if (!evt.wasClean) {\n        reason = new Error(evt.reason);\n      }\n      this._closed(reason);\n    };\n\n    this.socket.onerror = (e: ErrorEvent | Event): any => {\n      const evt = e as ErrorEvent;\n      const err = new NatsError(evt.message, ErrorCode.UNKNOWN);\n      if (!connected) {\n        connLock.reject(err);\n      } else {\n        this._closed(err);\n      }\n    };\n    return connLock;\n  }\n\n  disconnect(): void {\n    this._closed(undefined, true);\n  }\n\n  private async _closed(err?: Error, internal: boolean = true): Promise<void> {\n    if (!this.connected) return;\n    if (this.done) return;\n    this.closeError = err;\n    if (!err) {\n      while (!this.socketClosed && this.socket.bufferedAmount > 0) {\n        console.log(this.socket.bufferedAmount);\n        await delay(100);\n      }\n    }\n    this.done = true;\n    try {\n      // 1002 endpoint error, 1000 is clean\n      this.socket.close(err ? 1002 : 1000, err ? err.message : undefined);\n    } catch (err) {\n    }\n    if (internal) {\n      this.closedNotification.resolve(err);\n    }\n  }\n\n  get isClosed(): boolean {\n    return this.done;\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.iterate();\n  }\n\n  async *iterate(): AsyncIterableIterator<Uint8Array> {\n    while (true) {\n      if (this.yields.length === 0) {\n        await this.signal;\n      }\n      const yields = this.yields;\n      this.yields = [];\n      for (let i = 0; i < yields.length; i++) {\n        if (this.options.debug) {\n          console.info(`> ${render(yields[i])}`);\n        }\n        yield yields[i];\n      }\n      // yielding could have paused and microtask\n      // could have added messages. Prevent allocations\n      // if possible\n      if (this.done) {\n        break;\n      } else if (this.yields.length === 0) {\n        yields.length = 0;\n        this.yields = yields;\n        this.signal = deferred();\n      }\n    }\n  }\n\n  isEncrypted(): boolean {\n    return this.connected && this.encrypted;\n  }\n\n  send(frame: Uint8Array): Promise<void> {\n    if (this.done) {\n      return Promise.resolve();\n    }\n    try {\n      this.socket.send(frame.buffer);\n      if (this.options.debug) {\n        console.info(`< ${render(frame)}`);\n      }\n      return Promise.resolve();\n    } catch (err) {\n      if (this.options.debug) {\n        console.error(`!!! ${render(frame)}: ${err}`);\n      }\n      return Promise.reject(err);\n    }\n  }\n\n  close(err?: Error | undefined): Promise<void> {\n    return this._closed(err, false);\n  }\n\n  closed(): Promise<void | Error> {\n    return this.closedNotification;\n  }\n}\n"], "filenames": [".github/workflows/natsws.yml", "package.json", "src/nats-base-client.ts", "src/ws_transport.ts"], "buggy_code_start_loc": [32, 3, 15, 29], "buggy_code_end_loc": [33, 4, 16, 30], "fixing_code_start_loc": [32, 3, 15, 29], "fixing_code_end_loc": [33, 4, 16, 30], "type": "CWE-522", "message": "NATS nats.js before 2.0.0-209, nats.ws before 1.0.0-111, and nats.deno before 1.0.0-9 allow credential disclosure from a client to a server.", "other": {"cve": {"id": "CVE-2020-26149", "sourceIdentifier": "cve@mitre.org", "published": "2020-09-30T18:15:27.023", "lastModified": "2020-10-09T14:51:49.297", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "NATS nats.js before 2.0.0-209, nats.ws before 1.0.0-111, and nats.deno before 1.0.0-9 allow credential disclosure from a client to a server."}, {"lang": "es", "value": "NATS nats.js versiones anteriores a 2.0.0-209, nats.ws versiones anteriores a 1.0.0-111 y nats.deno versiones anteriores a 1.0.0-9, permiten una divulgaci\u00f3n de credenciales de un cliente hacia un servidor"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-522"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:linuxfoundation:nats.deno:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.0-9", "matchCriteriaId": "3A972DD6-259C-4387-AFA6-3203CD5C6276"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxfoundation:nats.js:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "2.0.0-209", "matchCriteriaId": "9BFCD781-AFAB-426F-9389-969356BC5258"}, {"vulnerable": true, "criteria": "cpe:2.3:a:linuxfoundation:nats.ws:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.0-111", "matchCriteriaId": "13C3DAA2-90BC-4BA4-B1EC-0785AC76551E"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2020/09/30/3", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/nats-io/nats.deno/compare/v1.0.0-8...v1.0.0-9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nats-io/nats.ws/commit/0a37ac2a411ff63f0707cda69a268c5fc4079eb7", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nats-io/nats.ws/commit/0a37ac2a411ff63f0707cda69a268c5fc4079eb7"}}