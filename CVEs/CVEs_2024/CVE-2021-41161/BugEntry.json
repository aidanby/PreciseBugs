{"buggy_code": ["<?php\n/*\n * @copyright   Copyright (C) 2010-2021 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nuse Combodo\\iTop\\Application\\Helper\\WebResourcesHelper;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Alert\\AlertUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Button\\ButtonUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\CollapsibleSection\\CollapsibleSectionUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\DataTable\\DataTableUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Field\\FieldUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\FieldSet\\FieldSetUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Form\\FormUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Html\\Html;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\FileSelect\\FileSelectUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\InputUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\Select;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\SelectOptionUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\SelectUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\TextArea;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Panel\\PanelUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Title\\TitleUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Toolbar\\ToolbarUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\MultiColumn\\Column\\ColumnUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\MultiColumn\\MultiColumnUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\TabContainer\\Tab\\AjaxTab;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\TabContainer\\TabContainer;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\UIContentBlockUIBlockFactory;\nuse Combodo\\iTop\\Core\\CMDBChange\\CMDBChangeOrigin;\nuse Combodo\\iTop\\Renderer\\BlockRenderer;\n\ntry {\n\trequire_once('../approot.inc.php');\n\trequire_once(APPROOT.'/application/application.inc.php');\n\trequire_once(APPROOT.'/application/ajaxwebpage.class.inc.php');\n\n\trequire_once(APPROOT.'/application/startup.inc.php');\n\trequire_once(APPROOT.'/application/loginwebpage.class.inc.php');\n\n\tif (utils::SetMinMemoryLimit('256M') === false) {\n\t\tIssueLog::Warning('csvimport : cannot set minimum memory_limit !');\n\t}\n\n\tLoginWebPage::DoLogin(); // Check user rights and prompt if needed\n\n\t$iStep = utils::ReadParam('step', 1);\n\n\t$oPage = new iTopWebPage(Dict::S('UI:Title:BulkImport'));\n\t$oPage->SetBreadCrumbEntry('ui-tool-bulkimport', Dict::S('Menu:CSVImportMenu'), Dict::S('UI:Title:BulkImport+'), '', 'fas fa-file-import', iTopWebPage::ENUM_BREADCRUMB_ENTRY_ICON_TYPE_CSS_CLASSES);\n\n\t/**\n\t * Helper function to build a select from the list of valid classes for a given action\n\t *\n\t * @deprecated since 3.0.0 use GetClassesSelectUIBlock\n\t *\n\t * @param $sDefaultValue\n\t * @param integer $iWidthPx The width (in pixels) of the drop-down list\n\t * @param integer $iActionCode The ActionCode (from UserRights) to check for authorization for the classes\n\t *\n\t * @param string $sName The name of the select in the HTML form\n\t *\n\t * @return string The HTML fragment corresponding to the select tag\n\t */\n\tfunction GetClassesSelect($sName, $sDefaultValue, $iWidthPx, $iActionCode = null)\n\t{\n\t\tDeprecatedCallsLog::NotifyDeprecatedPhpMethod('use GetClassesSelectUIBlock');\n\t\t$oSelectBlock = GetClassesSelectUIBlock($sName, $sDefaultValue, $iActionCode);\n\n\t\treturn BlockRenderer::RenderBlockTemplates($oSelectBlock);\n\t}\n\n\t/**\n\t * Helper function to build a select from the list of valid classes for a given action\n\t *\n\t * @param string $sName The name of the select in the HTML form\n\t * @param $sDefaultValue\n\t * @param integer $iWidthPx The width (in pixels) of the drop-down list\n\t * @param integer $iActionCode The ActionCode (from UserRights) to check for authorization for the classes\n\t *\n\t * @return \\Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\\n\t */\n\tfunction GetClassesSelectUIBlock(string $sName, $sDefaultValue, int $iActionCode): Select\n\t{\n\t\t$oSelectBlock = SelectUIBlockFactory::MakeForSelect($sName, 'select_'.$sName);\n\t\t$oOption = SelectOptionUIBlockFactory::MakeForSelectOption(\"\", Dict::S('UI:CSVImport:ClassesSelectOne'), false);\n\t\t$oSelectBlock->AddSubBlock($oOption);\n\t\t$aValidClasses = array();\n\t\t$aClassCategories = array('bizmodel', 'addon/authentication');\n\t\tif (UserRights::IsAdministrator()) {\n\t\t\t$aClassCategories = array('bizmodel', 'application', 'addon/authentication');\n\t\t}\n\t\tforeach ($aClassCategories as $sClassCategory) {\n\t\t\tforeach (MetaModel::GetClasses($sClassCategory) as $sClassName) {\n\t\t\t\tif ((is_null($iActionCode) || UserRights::IsActionAllowed($sClassName, $iActionCode)) &&\n\t\t\t\t\t(!MetaModel::IsAbstract($sClassName))) {\n\t\t\t\t\t$sDisplayName = MetaModel::GetName($sClassName);\n\t\t\t\t\t$aValidClasses[$sDisplayName] = SelectOptionUIBlockFactory::MakeForSelectOption($sClassName, $sDisplayName, ($sClassName == $sDefaultValue));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tksort($aValidClasses);\n\t\tforeach ($aValidClasses as $sValue => $oBlock) {\n\t\t\t$oSelectBlock->AddSubBlock($oBlock);\n\t\t}\n\n\t\treturn $oSelectBlock;\n\t}\n\n\t/**\n\t * Helper to 'check' an input in an HTML form if the current value equals the value given\n\t *\n\t * @param mixed $sCurrentValue The current value to be chacked against the value of the input\n\t * @param mixed $sProposedValue The value of the input\n\t * @param bool $bInverseCondition Set to true to perform the reversed comparison\n\t *\n\t * @return string Either ' checked' or an empty string\n\t */\n\tfunction IsChecked($sCurrentValue, $sProposedValue, $bInverseCondition = false)\n\t{\n\t\t$bCondition = ($sCurrentValue == $sProposedValue);\n\n\t\treturn ($bCondition xor $bInverseCondition) ? ' checked' : '';\n\t}\n\n\t/**\n\t * Returns the number of occurences of each char from the set in the specified string\n\t * @param string $sString The input data\n\t * @param array $aSet The set of characters to count\n\t * @return array 'char' => nb of occurences\n\t */\n\tfunction CountCharsFromSet($sString, $aSet)\n\t{\n\t\t$aResult = array();\n\t\t$aCount = count_chars($sString);\n\t\tforeach($aSet as $sChar)\n\t\t{\n\t\t\t$aResult[$sChar] = isset($aCount[ord($sChar)]) ? $aCount[ord($sChar)] : 0;\n\t\t}\n\t\treturn $aResult;\n\t}\n\t\n\t/**\n\t * Return the most frequent (and regularly occuring) character among the given set, in the specified lines\n\t * @param array $aCSVData The input data, one entry per line\n\t * @param array $aPossibleSeparators The list of characters to count\n\t * @return string The most frequent character from the set\n\t */\n\tfunction GuessFromFrequency($aCSVData, $aPossibleSeparators)\n\t{\n\t\t$iLine = 0;\n\t\t$iMaxLine = 20; // Process max 20 lines to guess the parameters\n\t\tforeach($aPossibleSeparators as $sSep)\n\t\t{\n\t\t\t$aGuesses[$sSep]['total'] = $aGuesses[$sSep]['max'] = 0;\n\t\t\t$aGuesses[$sSep]['min'] = 999;\n\t\t}\n\t\t$aStats = array();\n\t\twhile(($iLine < count($aCSVData)) && ($iLine < $iMaxLine) )\n\t\t{\n\t\t\tif (strlen($aCSVData[$iLine]) > 0)\n\t\t\t{\n\t\t\t\t$aStats[$iLine] = CountCharsFromSet($aCSVData[$iLine], $aPossibleSeparators);\n\t\t\t}\n\t\t\t$iLine++;\n\t\t}\n\t\t$iLine = 1;\n\t\tforeach($aStats as $aLineStats)\n\t\t{\n\t\t\tforeach($aPossibleSeparators as $sSep)\n\t\t\t{\n\t\t\t\t$aGuesses[$sSep]['total'] += $aLineStats[$sSep];\n\t\t\t\tif ($aLineStats[$sSep] > $aGuesses[$sSep]['max']) $aGuesses[$sSep]['max'] = $aLineStats[$sSep];\n\t\t\t\tif ($aLineStats[$sSep] < $aGuesses[$sSep]['min']) $aGuesses[$sSep]['min'] = $aLineStats[$sSep];\n\t\t\t}\n\t\t\t$iLine++;\n\t\t}\n\t\t\n\t\t$aScores = array();\n\t\tforeach($aGuesses as $sSep => $aData)\n\t\t{\n\t\t\t$aScores[$sSep] = $aData['total'] + $aData['max'] - $aData['min'];\n\t\t}\n\t\tarsort($aScores, SORT_NUMERIC); // Sort the array, higher scores first\n\t\t$aKeys = array_keys($aScores);\n\t\t$sSeparator = $aKeys[0]; // Take the first key, the one with the best score\n\t\treturn $sSeparator;\n\t}\n\t\n\t/**\n\t * Try to predict the CSV parameters based on the input data\n\t * @param string $sCSVData The input data\n\t * @return array 'separator' => the_guessed_separator, 'qualifier' => the_guessed_text_qualifier\n\t */\n\tfunction GuessParameters($sCSVData)\n\t{\n\t\t$aData = explode(\"\\n\", $sCSVData);\n\t\t$sSeparator = GuessFromFrequency($aData, array(\"\\t\", ',', ';', '|')); // Guess the most frequent (and regular) character on each line\n\t\t$sQualifier = GuessFromFrequency($aData, array('\"', \"'\")); // Guess the most frequent (and regular) character on each line\n\t\t\n\t\treturn array('separator' => $sSeparator, 'qualifier' => $sQualifier);\n\t}\n\t\n\t/**\n\t * Display a banner for the special \"synchro\" mode\n\t * @param WebPage $oP The Page for the output\n\t * @param string $sClass The class of objects to synchronize\n\t * @param integer $iCount The number of objects to synchronize\n\t */\n\t function DisplaySynchroBanner(WebPage $oP, $sClass, $iCount)\n\t {\n\t\t $oP->AddSubBlock(AlertUIBlockFactory::MakeForInformation(MetaModel::GetClassIcon($sClass).\"&nbsp;\".Dict::Format('UI:Title:BulkSynchro_nbItem_ofClass_class', $iCount, MetaModel::GetName($sClass))));\n\t }\n\n\t/**\n\t * Add a paragraph to the body of the page\n\t *\n\t * @param string $s_html\n\t *\n\t * @return string\n\t */\n\tfunction GetDivAlert($s_html)\n\t{\n\t\treturn \"<div class=\\\"ibo-csv-import--cell-error ibo-csv-import--cell-message\\\">$s_html</div>\\n\";\n\t}\n\t/**\n\t * Process the CSV data, for real or as a simulation\n\t * @param WebPage $oPage The page used to display the wizard\n\t * @param bool $bSimulate Whether or not to simulate the data load\n\t * @return array The CSV lines in error that were rejected from the load (with the header line - if any) or null\n\t */\n\tfunction ProcessCSVData(WebPage $oPage, $bSimulate = true)\n\t{\n\t\t$sClassName = utils::ReadParam('class_name', '', false, 'class');\n\t\t// Class access right check for the import\n\t\tif (UserRights::IsActionAllowed($sClassName, UR_ACTION_MODIFY) == UR_ALLOWED_NO)\n\t\t{\n\t\t\tthrow new CoreException(Dict::S('UI:ActionNotAllowed'));\n\t\t}\n\n\t\t$aResult = array();\n\t\t$sCSVData = utils::ReadParam('csvdata', '', false, 'raw_data');\n\t\t$sCSVDataTruncated = utils::ReadParam('csvdata_truncated', '', false, 'raw_data');\n\t\t$sSeparator = utils::ReadParam('separator', ',', false, 'raw_data');\n\t\t$sTextQualifier = utils::ReadParam('text_qualifier', '\"', false, 'raw_data');\n\t\t$bHeaderLine = (utils::ReadParam('header_line', '0') == 1);\n\t\t$iSkippedLines = 0;\n\t\tif (utils::ReadParam('box_skiplines', '0') == 1)\n\t\t{\n\t\t\t$iSkippedLines = utils::ReadParam('nb_skipped_lines', '0');\n\t\t}\n\t\t$aFieldsMapping = utils::ReadParam('field', array(), false, 'raw_data');\n\t\t$aSearchFields = utils::ReadParam('search_field', array(), false, 'field_name');\n\t\t$iCurrentStep = $bSimulate ? 4 : 5;\n\t\t$bAdvanced = utils::ReadParam('advanced', 0);\n\t\t$sEncoding = utils::ReadParam('encoding', 'UTF-8');\n\t\t$sSynchroScope = utils::ReadParam('synchro_scope', '', false, 'raw_data');\n\t\t$sDateTimeFormat = utils::ReadParam('date_time_format', 'default');\n\t\t$sCustomDateTimeFormat = utils::ReadParam('custom_date_time_format', (string)AttributeDateTime::GetFormat(), false, 'raw_data');\n\t\t\n\t\t$sChosenDateFormat = ($sDateTimeFormat == 'default') ? (string)AttributeDateTime::GetFormat() : $sCustomDateTimeFormat;\n\t\t\n\t\tif (!empty($sSynchroScope))\n\t\t{\n\t\t\t$oSearch = DBObjectSearch::FromOQL($sSynchroScope);\n\t\t\t$sClassName = $oSearch->GetClass(); // If a synchronization scope is set, then the class is fixed !\n\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t$iCount = $oSet->Count();\n\t\t\tDisplaySynchroBanner($oPage, $sClassName, $iCount);\n\t\t\t$aSynchroUpdate = utils::ReadParam('synchro_update', array());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sSynchroScope  = '';\n\t\t\t$aSynchroUpdate = null;\n\t\t}\n\t\t\t\t\n\t\t// Parse the data set\n\t\t$oCSVParser = new CSVParser($sCSVData, $sSeparator, $sTextQualifier, MetaModel::GetConfig()->Get('max_execution_time_per_loop'));\n\t\t$aData = $oCSVParser->ToArray($iSkippedLines);\n\t\t$iRealSkippedLines = $iSkippedLines;\n\t\tif ($bHeaderLine)\n\t\t{\n\t\t\t$aResult[] = $sTextQualifier.implode($sTextQualifier.$sSeparator.$sTextQualifier, array_shift($aData)).$sTextQualifier; // Remove the first line and store it in case of error\n\t\t\t$iRealSkippedLines++;\n\t\t}\n\t\n\t\t// Format for the line numbers\n\t\t$sMaxLen = (strlen(''.count($aData)) < 3) ? 3 : strlen(''.count($aData)); // Pad line numbers to the appropriate number of chars, but at least 3\n\t\n\t\t// Compute the list of search/reconciliation criteria\n\t\t$aSearchKeys = array();\n\t\tforeach($aSearchFields as $index => $sDummy)\n\t\t{\n\t\t\t$sSearchField = $aFieldsMapping[$index];\n\t\t\t$aMatches = array();\n\t\t\tif (preg_match('/(.+)->(.+)/', $sSearchField, $aMatches) > 0)\n\t\t\t{\n\t\t\t\t$sSearchField = $aMatches[1];\n\t\t\t\t$aSearchKeys[$aMatches[1]] = '';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aSearchKeys[$sSearchField] = '';\t\t\t\n\t\t\t}\n\t\t\tif (!MetaModel::IsValidFilterCode($sClassName, $sSearchField))\n\t\t\t{\n\t\t\t\t// Remove invalid or unmapped search fields\n\t\t\t\t$aSearchFields[$index] = null;\n\t\t\t\tunset($aSearchKeys[$sSearchField]);\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compute the list of fields and external keys to process\n\t\t$aExtKeys = array();\n\t\t$aAttributes = array();\n\t\t$aExternalKeysByColumn = array();\n\t\tforeach($aFieldsMapping as $iNumber => $sAttCode)\n\t\t{\n\t\t\t$iIndex = $iNumber-1;\n\t\t\tif (!empty($sAttCode) && ($sAttCode != ':none:') && ($sAttCode != 'finalclass'))\n\t\t\t{\n\t\t\t\tif (preg_match('/(.+)->(.+)/', $sAttCode, $aMatches) > 0)\n\t\t\t\t{\n\t\t\t\t\t$sAttribute = $aMatches[1];\n\t\t\t\t\t$sField = $aMatches[2];\n\t\t\t\t\t$aExtKeys[$sAttribute][$sField] = $iIndex;\n\t\t\t\t\t$aExternalKeysByColumn[$iIndex] = $sAttribute;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ($sAttCode == 'id')\n\t\t\t\t\t{\n\t\t\t\t\t\t\t$aAttributes['id'] = $iIndex;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClassName, $sAttCode);\n\t\t\t\t\t\tif ($oAttDef->IsExternalKey())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aExtKeys[$sAttCode]['id'] = $iIndex;\n\t\t\t\t\t\t\t$aExternalKeysByColumn[$iIndex] = $sAttCode;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aAttributes[$sAttCode] = $iIndex;\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\t$oMyChange = null;\n\t\tif (!$bSimulate)\n\t\t{\n\t\t\t// We're doing it for real, let's create a change\n\t\t\t$sUserString = CMDBChange::GetCurrentUserName().' (CSV)';\n\t\t\tCMDBObject::SetTrackInfo($sUserString);\n\t\t\tCMDBObject::SetTrackOrigin(CMDBChangeOrigin::CSV_INTERACTIVE);\n\t\t\t$oMyChange = CMDBObject::GetCurrentChange();\n\t\t}\n\t\tCMDBObject::SetTrackOrigin('csv-interactive');\n\t\n\t\t$oBulk = new BulkChange(\n\t\t\t$sClassName,\n\t\t\t$aData,\n\t\t\t$aAttributes,\n\t\t\t$aExtKeys,\n\t\t\tarray_keys($aSearchKeys),\n\t\t\tempty($sSynchroScope) ? null : $sSynchroScope,\n\t\t\t$aSynchroUpdate,\n\t\t\t$sChosenDateFormat, // date format\n\t\t\ttrue // localize\t\t\n\t\t);\n\t\t$oBulk->SetReportHtml();\n\n\t\t$oPage->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata_truncated\", htmlentities($sCSVDataTruncated, ENT_QUOTES, 'UTF-8'), \"csvdata_truncated\"));\n\t\t$aRes = $oBulk->Process($oMyChange);\n\n\t\t$aColumns = [];\n\t\t$aColumns [\"line\"] = [\"label\" => \"Line\"];\n\t\t$aColumns [\"status\"] = [\"label\" => \"Status\"];\n\t\t$aColumns [\"object\"] = [\"label\" => \"Object\"];\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\tif (!empty($sAttCode) && ($sAttCode != ':none:') && ($sAttCode != 'finalclass')) {\n\t\t\t\t$aColumns[$sClassName.'/'.$sAttCode] = [\"label\" => MetaModel::GetLabel($sClassName, $sAttCode)];\n\t\t\t}\n\t\t}\n\t\t$aColumns[\"message\"] = [\"label\" => \"Message\"];\n\n\t\t$iErrors = 0;\n\t\t$iCreated = 0;\n\t\t$iModified = 0;\n\t\t$iUnchanged = 0;\n\n\t\t$aTableData = [];\n\n\t\tforeach ($aRes as $iLine => $aResRow) {\n\t\t\t$aTableRow = [];\n\t\t\t$oStatus = $aResRow['__STATUS__'];\n\t\t\t$sUrl = '';\n\t\t\t$sMessage = '';\n\t\t\t$sCSSRowClass = '';\n\t\t\t$sCSSMessageClass = 'cell_ok';\n\t\t\tswitch (get_class($oStatus)) {\n\t\t\t\tcase 'RowStatus_NoChange':\n\t\t\t\t\t$iUnchanged++;\n\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t$oObj = MetaModel::GetObject($sFinalClass, $aResRow['id']->GetPureValue());\n\t\t\t\t\t$sUrl = $oObj->GetHyperlink();\n\t\t\t\t\t$sStatus = '<img src=\"../images/unchanged.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Unchanged').'\">';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-unchanged';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RowStatus_Modify':\n\t\t\t\t\t$iModified++;\n\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t$oObj = MetaModel::GetObject($sFinalClass, $aResRow['id']->GetPureValue());\n\t\t\t\t\t$sUrl = $oObj->GetHyperlink();\n\t\t\t\t\t$sStatus = '<img src=\"../images/modified.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Modified').'\">';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-modified';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RowStatus_Disappeared':\n\t\t\t\t\t$iModified++;\n\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t$oObj = MetaModel::GetObject($sFinalClass, $aResRow['id']->GetPureValue());\n\t\t\t\t\t$sUrl = $oObj->GetHyperlink();\n\t\t\t\t\t$sStatus = '<img src=\"../images/delete.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Missing').'\">';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-modified';\n\t\t\t\t\tif ($bSimulate) {\n\t\t\t\t\t\t$sMessage = Dict::S('UI:CSVReport-Object-MissingToUpdate');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$sMessage = Dict::S('UI:CSVReport-Object-MissingUpdated');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RowStatus_NewObj':\n\t\t\t\t\t$iCreated++;\n\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t$sStatus = '<img src=\"../images/added.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Created').'\">';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-added';\n\t\t\t\t\tif ($bSimulate) {\n\t\t\t\t\t\t$sMessage = Dict::S('UI:CSVReport-Object-ToCreate');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t\t$oObj = MetaModel::GetObject($sFinalClass, $aResRow['id']->GetPureValue());\n\t\t\t\t\t\t$sUrl = $oObj->GetHyperlink();\n\t\t\t\t\t\t$sMessage = Dict::S('UI:CSVReport-Object-Created');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RowStatus_Issue':\n\t\t\t\t\t$iErrors++;\n\t\t\t\t\t$sMessage .= GetDivAlert($oStatus->GetDescription());\n\t\t\t\t\t$sStatus = '<img src=\"../images/error.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Error').'\">';//translate\n\t\t\t\t\t$sCSSMessageClass = 'ibo-csv-import--cell-error';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-error';\n\t\t\t\t\tif (array_key_exists($iLine, $aData)) {\n\t\t\t\t\t\t$aRow = $aData[$iLine];\n\t\t\t\t\t\t$aResult[] = $sTextQualifier.implode($sTextQualifier.$sSeparator.$sTextQualifier, $aRow).$sTextQualifier; // Remove the first line and store it in case of error\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$aTableRow['@class'] = $sCSSRowClass;\n\t\t\t$aTableRow['line'] = sprintf(\"%0{$sMaxLen}d\", 1 + $iLine + $iRealSkippedLines);\n\t\t\t$aTableRow['status'] = $sStatus;\n\t\t\t$aTableRow['object'] = $sUrl;\n\n\t\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t\tif (!empty($sAttCode) && ($sAttCode != ':none:') && ($sAttCode != 'finalclass')) {\n\t\t\t\t\t$oCellStatus = $aResRow[$iNumber - 1];\n\t\t\t\t\t$sCellMessage = '';\n\t\t\t\t\tif (isset($aExternalKeysByColumn[$iNumber - 1])) {\n\t\t\t\t\t\t$sExtKeyName = $aExternalKeysByColumn[$iNumber - 1];\n\t\t\t\t\t\t$oExtKeyCellStatus = $aResRow[$sExtKeyName];\n\t\t\t\t\t\tswitch (get_class($oExtKeyCellStatus)) {\n\t\t\t\t\t\t\tcase 'CellStatus_Issue':\n\t\t\t\t\t\t\tcase 'CellStatus_SearchIssue':\n\t\t\t\t\t\t\tcase 'CellStatus_NullIssue':\n\t\t\t\t\t\t\tcase 'CellStatus_Ambiguous':\n\t\t\t\t\t\t\t\t$sCellMessage .= GetDivAlert($oExtKeyCellStatus->GetDescription());\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// Do nothing\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$sHtmlValue = $oCellStatus->GetDisplayableValue();\n\t\t\t\t\tswitch (get_class($oCellStatus)) {\n\t\t\t\t\t\tcase 'CellStatus_Issue':\n\t\t\t\t\t\t\t$sCellMessage .= GetDivAlert($oCellStatus->GetDescription());\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = '<div class=\"ibo-csv-import--cell-error\">'.Dict::Format('UI:CSVReport-Object-Error', $sHtmlValue).$sCellMessage.'</div>';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CellStatus_SearchIssue':\n\t\t\t\t\t\t\t$sCellMessage .= GetDivAlert($oCellStatus->GetDescription());\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = '<div class=\"ibo-csv-import--cell-error\">ERROR: '.$sHtmlValue.$sCellMessage.'</div>';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CellStatus_Ambiguous':\n\t\t\t\t\t\t\t$sCellMessage .= GetDivAlert($oCellStatus->GetDescription());\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = '<div class=\"ibo-csv-import--cell-error\" >'.Dict::Format('UI:CSVReport-Object-Ambiguous', $sHtmlValue).$sCellMessage.'</div>';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CellStatus_Modify':\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = '<div class=\"ibo-csv-import--cell-modified\"><b>'.$sHtmlValue.'</b></div>';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = $sHtmlValue.$sCellMessage;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aTableRow['message'] = \"<div class=\\\"$sCSSMessageClass\\\">$sMessage</div>\";\n\n\t\t\t$aTableData[] = $aTableRow;\n\t\t}\n\n\t\t$iUnchanged = count($aRes) - $iErrors - $iModified - $iCreated;\n\t\t$oContainer = UIContentBlockUIBlockFactory::MakeStandard();\n\t\t$oContainer->AddCSSClass(\"wizContainer\");\n\t\t$oPage->AddSubBlock($oContainer);\n\n\t\t$oForm = FormUIBlockFactory::MakeStandard('wizForm');\n\t\t$oContainer->AddSubBlock($oForm);\n\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", ($iCurrentStep + 1)));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"separator\", htmlentities($sSeparator, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"text_qualifier\", htmlentities($sTextQualifier, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"header_line\", $bHeaderLine));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"nb_skipped_lines\", utils::ReadParam('nb_skipped_lines', '0')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"box_skiplines\", utils::ReadParam('box_skiplines', '0')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata_truncated\", htmlentities($sCSVDataTruncated, ENT_QUOTES, 'UTF-8'), \"csvdata_truncated\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata\", htmlentities($sCSVData, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"encoding\", $sEncoding));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"class_name\", $sClassName));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"advanced\", $bAdvanced));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"date_time_format\", htmlentities($sDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"custom_date_time_format\", htmlentities($sCustomDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update[$sKey]\", $value));\n\t\t\t}\n\t\t}\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"field[$iNumber]\", $sAttCode));\n\t\t}\n\t\tforeach ($aSearchFields as $index => $sDummy) {\n\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"search_field[$index]\", \"1\"));\n\t\t}\n\t\t$aDisplayFilters = array();\n\t\tif ($bSimulate) {\n\t\t\t$aDisplayFilters['unchanged'] = Dict::S('UI:CSVImport:ObjectsWillStayUnchanged');\n\t\t\t$aDisplayFilters['modified'] = Dict::S('UI:CSVImport:ObjectsWillBeModified');\n\t\t\t$aDisplayFilters['added'] = Dict::S('UI:CSVImport:ObjectsWillBeAdded');\n\t\t\t$aDisplayFilters['errors'] = Dict::S('UI:CSVImport:ObjectsWillHaveErrors');\n\t\t} else {\n\t\t\t$aDisplayFilters['unchanged'] = Dict::S('UI:CSVImport:ObjectsRemainedUnchanged');\n\t\t\t$aDisplayFilters['modified'] = Dict::S('UI:CSVImport:ObjectsWereModified');\n\t\t\t$aDisplayFilters['added'] = Dict::S('UI:CSVImport:ObjectsWereAdded');\n\t\t\t$aDisplayFilters['errors'] = Dict::S('UI:CSVImport:ObjectsHadErrors');\n\t\t}\n\t\t$oMulticolumn = MultiColumnUIBlockFactory::MakeStandard();\n\t\t$oMulticolumn->AddCSSClass('ml-1');\n\t\t$oForm->AddSubBlock($oMulticolumn);\n\n\t\t$oCheckBoxUnchanged = InputUIBlockFactory::MakeForInputWithLabel('<img src=\"../images/unchanged.png\">&nbsp;'.sprintf($aDisplayFilters['unchanged'], $iUnchanged), '', \"1\", \"show_unchanged\", \"checkbox\");\n\t\t$oCheckBoxUnchanged->GetInput()->SetIsChecked(true);\n\t\t$oCheckBoxUnchanged->SetBeforeInput(false);\n\t\t$oCheckBoxUnchanged->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oCheckBoxUnchanged));\n\t\t$oPage->add_ready_script(\"$('#show_unchanged').on('click', function(){ToggleRows('ibo-csv-import--row-unchanged')})\");\n\n\t\t$oCheckBoxUnchanged = InputUIBlockFactory::MakeForInputWithLabel('<img src=\"../images/modified.png\">&nbsp;'.sprintf($aDisplayFilters['modified'], $iModified), '', \"1\", \"show_modified\", \"checkbox\");\n\t\t$oCheckBoxUnchanged->GetInput()->SetIsChecked(true);\n\t\t$oCheckBoxUnchanged->SetBeforeInput(false);\n\t\t$oCheckBoxUnchanged->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oCheckBoxUnchanged));\n\t\t$oPage->add_ready_script(\"$('#show_modified').on('click', function(){ToggleRows('ibo-csv-import--row-modified')})\");\n\n\t\t$oCheckBoxUnchanged = InputUIBlockFactory::MakeForInputWithLabel('<img src=\"../images/added.png\">&nbsp;'.sprintf($aDisplayFilters['added'], $iCreated), '', \"1\", \"show_created\", \"checkbox\");\n\t\t$oCheckBoxUnchanged->GetInput()->SetIsChecked(true);\n\t\t$oCheckBoxUnchanged->SetBeforeInput(false);\n\t\t$oCheckBoxUnchanged->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oCheckBoxUnchanged));\n\t\t$oPage->add_ready_script(\"$('#show_created').on('click', function(){ToggleRows('ibo-csv-import--row-added')})\");\n\n\t\t$oCheckBoxUnchanged = InputUIBlockFactory::MakeForInputWithLabel('<img src=\"../images/error.png\">&nbsp;'.sprintf($aDisplayFilters['errors'], $iErrors), '', \"1\", \"show_errors\", \"checkbox\");\n\t\t$oCheckBoxUnchanged->GetInput()->SetIsChecked(true);\n\t\t$oCheckBoxUnchanged->SetBeforeInput(false);\n\t\t$oCheckBoxUnchanged->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oCheckBoxUnchanged));\n\t\t$oPage->add_ready_script(\"$('#show_errors').on('click', function(){ToggleRows('ibo-csv-import--row-error')})\");\n\n\t\t$oPanel = PanelUIBlockFactory::MakeNeutral('');\n\t\t$oPanel->AddCSSClasses(['ibo-datatable-panel', 'mb-5']);\n\t\t$oForm->AddSubBlock($oPanel);\n\n\t\t$oTable = DataTableUIBlockFactory::MakeForForm(\"csvImport\", $aColumns, $aTableData);\n\t\t$oTable->AddOption('bFullscreen', true);\n\t\t$oPanel->AddSubBlock($oTable);\n\n\n\t\tif ($bSimulate) {\n\t\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForCancel(Dict::S('UI:Button:Restart'))->SetOnClickJsCode(\"CSVRestart()\"));\n\t\t}\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Back'))->SetOnClickJsCode(\"CSVGoBack()\"));\n\n\t\t$bShouldConfirm = false;\n\t\tif ($bSimulate) {\n\t\t\t// if there are *too many* changes, we should ask the user for a confirmation\n\t\t\tif (count($aRes) >= MetaModel::GetConfig()->Get('csv_import_min_object_confirmation')) {\n\t\t\t\t$fErrorsPercentage = (100.0 * $iErrors) / count($aRes);\n\t\t\t\tif ($fErrorsPercentage >= MetaModel::GetConfig()->Get('csv_import_errors_percentage')) {\n\t\t\t\t\t$sMessage = Dict::Format('UI:CSVReport-Stats-Errors', $fErrorsPercentage);\n\t\t\t\t\t$bShouldConfirm = true;\n\t\t\t\t}\n\t\t\t\t$fCreatedPercentage = (100.0 * $iCreated) / count($aRes);\n\t\t\t\tif ($fCreatedPercentage >= MetaModel::GetConfig()->Get('csv_import_creations_percentage')) {\n\t\t\t\t\t$sMessage = Dict::Format('UI:CSVReport-Stats-Created', $fCreatedPercentage);\n\t\t\t\t\t$bShouldConfirm = true;\n\t\t\t\t}\n\t\t\t\t$fModifiedPercentage = (100.0 * $iModified) / count($aRes);\n\t\t\t\tif ($fModifiedPercentage >= MetaModel::GetConfig()->Get('csv_import_modifications_percentage')) {\n\t\t\t\t\t$sMessage = Dict::Format('UI:CSVReport-Stats-Modified', $fModifiedPercentage);\n\t\t\t\t\t$bShouldConfirm = true;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t$sConfirm = $bShouldConfirm ? 'true' : 'false';\n\t\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:DoImport'))->SetOnClickJsCode(\"return DoSubmit({$sConfirm})\"));\n\n\t\t} else {\n\t\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Done'), \"\", \"\", true));\n\t\t}\n\n\t\tif ($bShouldConfirm) {\n\t\t\t$sYesButton = Dict::S('UI:Button:Ok');\n\t\t\t$sNoButton = Dict::S('UI:Button:Cancel');\n\t\t\t$oDlg = UIContentBlockUIBlockFactory::MakeStandard(\"dlg_confirmation\")->AddCSSClass('ibo-hidden');\n\t\t\t$oPage->AddSubBlock($oDlg);\n\t\t\t$oDlg->AddSubBlock(new Html($sMessage));\n\t\t\t$oDlg->AddSubBlock(new Html(htmlentities(Dict::S('UI:CSVImportConfirmMessage'), ENT_QUOTES, 'UTF-8')));\n\n\t\t\t$oDlgConfirm = UIContentBlockUIBlockFactory::MakeStandard(\"confirmation_chart\")->AddCSSClass('ibo-hidden');\n\t\t\t$oDlg->AddSubBlock($oDlgConfirm);\n\n\t\t\t$sDlgTitle = Dict::S('UI:CSVImportConfirmTitle');\n\n\t\t\t$oPage->add_ready_script(\n\t\t\t\t<<<EOF\n\t$('#dlg_confirmation').dialog( \n\t\t{\n\t\t\theight: 'auto',\n\t\t\twidth: 500,\n\t\t\tmodal:true, \n\t\t\tautoOpen: false, \n\t\t\ttitle:'$sDlgTitle',\n\t\t\tbuttons:\n\t\t\t{\n\t\t\t\t'$sYesButton': RunImport,\n\t\t\t\t'$sNoButton': CancelImport \n\t\t\t} \n\t\t});\nEOF\n\t\t\t);\n\t\t}\n\t\t\n\t\t$sErrors = json_encode(Dict::Format('UI:CSVImportError_items', $iErrors));\n\t\t$sCreated = json_encode(Dict::Format('UI:CSVImportCreated_items', $iCreated));\n\t\t$sModified = json_encode(Dict::Format('UI:CSVImportModified_items', $iModified));\n\t\t$sUnchanged = json_encode(Dict::Format('UI:CSVImportUnchanged_items', $iUnchanged));\n\n\t\t// Add graphs dependencies\n\t\tWebResourcesHelper::EnableC3JSToWebPage($oPage);\n\n\t\t$oPage->add_script(\t\t\n<<< EOF\nfunction CSVGoBack()\n{\n\t$('input[name=step]').val($iCurrentStep-1);\n\t$('#wizForm').submit();\n\t\n}\n\nfunction CSVRestart()\n{\n\t$('input[name=step]').val(1);\n\t$('#wizForm').submit();\n\t\n}\n\nfunction ToggleRows(sCSSClass)\n{\n\t$('.'+sCSSClass).toggle();\n}\n\nfunction DoSubmit(bConfirm)\n{\n\tif (bConfirm) //Ask for a confirmation\n\t{\n\t\t$('#dlg_confirmation').dialog('open');\n\t\t\t\t\n\t\tvar chart = c3.generate({\n\t\t    bindto: '#confirmation_chart',\n\t\t    data: {\n\t\t    \tcolumns:  [\n\t\t\t\t\t['errors', $iErrors],\n\t\t\t\t\t['created', $iCreated],\n\t\t\t\t\t['modified', $iModified],\n\t\t\t\t\t['unchanged', $iUnchanged]\n\t\t\t\t],\n\t\t\t\tcolors: {\n\t\t\t\t\terrors: '#FF6666',\n\t\t\t\t\tcreated: '#66FF66',\n\t\t\t\t\tmodified: '#6666FF',\n\t\t\t\t\tunchanged: '#666666'\n\t\t\t\t},\n\t\t\t\tnames: {\n\t\t\t\t\terrors: $sErrors,\n\t\t\t\t\tcreated: $sCreated,\n\t\t\t\t\tmodified: $sModified,\n\t\t\t\t\tunchanged: $sUnchanged\n\t\t\t\t},\n\t\t      \ttype: 'donut'\n\t\t    },\n\t\t    legend: {\n\t\t      show: true,\n\t\t    }\n\t\t});\n\t}\n\telse\n\t{\n\t\t// Submit the form\n\t\t$('#wizForm').block();\n\t\t$('#wizForm').submit();\n\t}\n\treturn false;\n}\n\nfunction CancelImport()\n{\n\t$('#dlg_confirmation').dialog('close');\n}\n\nfunction RunImport()\n{\n\t$('#dlg_confirmation').dialog('close');\n\t// Submit the form\n\t$('#wizForm').block();\n\t$('#wizForm').submit();\n}\nEOF\n\t);\n\t\tif ($iErrors > 0)\n\t\t{\n\t\t\treturn $aResult;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\n\t}\n\t/**\n\t * Perform the actual load of the CSV data and display the results\n\t * @param WebPage $oPage The web page to display the wizard\n\t * @return void\n\t */\n\tfunction LoadData(WebPage $oPage)\n\t{\n\t\t$oTitle = TitleUIBlockFactory::MakeForPage(Dict::S('UI:Title:CSVImportStep5'));\n\t\t$oPage->AddSubBlock($oTitle);\n\n\t\t$aResult = ProcessCSVData($oPage, false /* simulate = false */);\n\t\tif (is_array($aResult)) {\n\t\t\t$oCollapsibleSection = CollapsibleSectionUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:LinesNotImported'));\n\t\t\t$oPage->AddSubBlock($oCollapsibleSection);\n\n\t\t\t$oField = FieldUIBlockFactory::MakeLarge(Dict::S('UI:CSVImport:LinesNotImported+'));\n\t\t\t$oCollapsibleSection->AddSubBlock($oField);\n\n\t\t\t$oText = new TextArea(\"\", htmlentities(implode(\"\\n\", $aResult), ENT_QUOTES, 'UTF-8'), \"\", 150, 50);\n\t\t\t$oField->AddSubBlock($oText);\n\t\t}\n\t}\n\t\n\t/**\n\t * Simulate the load of the CSV data and display the results\n\t * @param WebPage $oPage The web page to display the wizard\n\t * @return void\n\t */\n\tfunction Preview(WebPage $oPage)\n\t{\n\t\t$oPanel = TitleUIBlockFactory::MakeForPage(Dict::S('UI:Title:CSVImportStep4'));\n\t\t$oPage->AddSubBlock($oPanel);\n\t\tProcessCSVData($oPage, true /* simulate */);\n\t}\n\t\n\t/**\n\t * Select the mapping between the CSV column and the fields of the objects\n\t * @param WebPage $oPage The web page to display the wizard\n\t * @return void\n\t */\n\tfunction SelectMapping(WebPage $oPage)\n\t{\n\t\t$sCSVData = utils::ReadParam('csvdata', '', false, 'raw_data');\n\t\t$sCSVDataTruncated = utils::ReadParam('csvdata_truncated', '', false, 'raw_data');\n\t\t$sSeparator = utils::ReadParam('separator', ',', false, 'raw_data');\n\t\tif ($sSeparator == 'tab') $sSeparator = \"\\t\";\n\t\tif ($sSeparator == 'other')\n\t\t{\n\t\t\t$sSeparator = utils::ReadParam('other_separator', ',', false, 'raw_data');\n\t\t}\n\t\t$sTextQualifier = utils::ReadParam('text_qualifier', '\"', false, 'raw_data');\n\t\tif ($sTextQualifier == 'other')\n\t\t{\n\t\t\t$sTextQualifier = utils::ReadParam('other_qualifier', '\"', false, 'raw_data');\n\t\t}\n\t\t$bHeaderLine = (utils::ReadParam('header_line', '0') == 1);\n\t\t$sClassName = utils::ReadParam('class_name', '', false, 'class');\n\t\t$bAdvanced = utils::ReadParam('advanced', 0);\n\t\t$sEncoding = utils::ReadParam('encoding', 'UTF-8');\n\t\t$sDateTimeFormat = utils::ReadParam('date_time_format', 'default');\n\t\t$sCustomDateTimeFormat = utils::ReadParam('custom_date_time_format', (string)AttributeDateTime::GetFormat(), false, 'raw_data');\n\n\t\t$sSynchroScope = utils::ReadParam('synchro_scope', '', false, 'raw_data');\n\t\tif (!empty($sSynchroScope)) {\n\t\t\t$oSearch = DBObjectSearch::FromOQL($sSynchroScope);\n\t\t\t$sClassName = $oSearch->GetClass(); // If a synchronization scope is set, then the class is fixed !\n\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t$iCount = $oSet->Count();\n\t\t\tDisplaySynchroBanner($oPage, $sClassName, $iCount);\n\t\t\t$oClassesSelect = SelectUIBlockFactory::MakeForSelect(\"class_name\", \"select_class_name\");\n\t\t\t$oDefaultSelect = SelectOptionUIBlockFactory::MakeForSelectOption(\"$sClassName\", MetaModel::GetName($sClassName), true);\n\t\t\t$oClassesSelect->AddSubBlock($oDefaultSelect);\n\t\t\t$aSynchroUpdate = utils::ReadParam('synchro_update', array());\n\t\t} else {\n\t\t\t$oClassesSelect = GetClassesSelectUIBlock('class_name', $sClassName, UR_ACTION_BULK_MODIFY);\n\t\t}\n\t\t$oPanel = TitleUIBlockFactory::MakeForPage(Dict::S('UI:Title:CSVImportStep3'));\n\t\t$oPage->AddSubBlock($oPanel);\n\n\t\t$oContainer = UIContentBlockUIBlockFactory::MakeStandard();\n\t\t$oContainer->AddCSSClass(\"wizContainer\");\n\t\t$oPage->AddSubBlock($oContainer);\n\n\t\t$oForm = FormUIBlockFactory::MakeStandard('wizForm');\n\t\t$oForm->SetOnSubmitJsCode(\"return CheckValues()\");\n\t\t$oContainer->AddSubBlock($oForm);\n\n\t\t$oMulticolumn = MultiColumnUIBlockFactory::MakeStandard();\n\t\t$oForm->AddSubBlock($oMulticolumn);\n\n\t\t$oFieldSelectClass = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:SelectClass'), $oClassesSelect);\n\t\t$oFieldSelectClass->AddCSSClass('ibo-field-large');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSelectClass));\n\n\t\t$oAdvancedMode = InputUIBlockFactory::MakeForInputWithLabel(Dict::S('UI:CSVImport:AdvancedMode'), \"advanced\", 1, \"advanced\", 'checkbox');\n\t\t$oAdvancedMode->GetInput()->SetIsChecked(($bAdvanced == 1));\n\t\t$oAdvancedMode->SetBeforeInput(false);\n\t\t$oAdvancedMode->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oAdvancedMode));\n\n\t\t$oDivAdvancedHelp = UIContentBlockUIBlockFactory::MakeStandard(\"advanced_help\")->AddCSSClass('ibo-is-hidden');\n\t\t$oForm->AddSubBlock($oDivAdvancedHelp);\n\n\t\t$oDivMapping = UIContentBlockUIBlockFactory::MakeStandard(\"mapping\")->AddCSSClass('mt-5');\n\t\t$oMessage = AlertUIBlockFactory::MakeForInformation(Dict::S('UI:CSVImport:SelectAClassFirst'))->SetIsClosable(false)->SetIsCollapsible(false);\n\t\t$oDivMapping->AddSubBlock($oMessage);\n\t\t$oForm->AddSubBlock($oDivMapping);\n\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", \"4\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"separator\", htmlentities($sSeparator, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"text_qualifier\", htmlentities($sTextQualifier, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"header_line\", $bHeaderLine));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"nb_skipped_lines\", utils::ReadParam('nb_skipped_lines', '0')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"box_skiplines\", utils::ReadParam('box_skiplines', '0')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata_truncated\", htmlentities($sCSVDataTruncated, ENT_QUOTES, 'UTF-8'), \"csvdata_truncated\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata\", htmlentities($sCSVData, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"encoding\", $sEncoding));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"date_time_format\", htmlentities($sDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"custom_date_time_format\", htmlentities($sCustomDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update[$sKey]\", $value));\n\t\t\t}\n\t\t}\n\t\t$oForm->AddSubBlock(new Html('<br>'));\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForCancel(Dict::S('UI:Button:Restart'))->SetOnClickJsCode(\"CSVRestart()\"));\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Back'))->SetOnClickJsCode(\"CSVGoBack()\"));\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:SimulateImport'), '', '', true));\n\n\t\t$sAlertIncompleteMapping = addslashes(Dict::S('UI:CSVImport:AlertIncompleteMapping'));\n\t\t$sAlertMultipleMapping = addslashes(Dict::S('UI:CSVImport:AlertMultipleMapping'));\n\t\t$sAlertNoSearchCriteria = addslashes(Dict::S('UI:CSVImport:AlertNoSearchCriteria'));\n\n\t\t$oPage->add_ready_script(\n\t\t\t<<<EOF\n\t$('#select_class_name').on('change', function(ev) { DoMapping(); } );\n\t$('#advanced').on('click', function(ev) { DoMapping(); } );\nEOF\n\t\t);\n\t\tif ($sClassName != '')\n\t\t{\n\t\t\t$aFieldsMapping = utils::ReadParam('field', array(), false, 'raw_data');\n\t\t\t$aSearchFields = utils::ReadParam('search_field', array(), false, 'field_name');\n\t\t\t$sFieldsMapping = addslashes(json_encode($aFieldsMapping));\n\t\t\t$sSearchFields = addslashes(json_encode($aSearchFields));\n\t\t\n\t\t\t$oPage->add_ready_script(\"DoMapping('$sFieldsMapping', '$sSearchFields');\"); // There is already a class selected, run the mapping\n\t\t}\n\t\n\t\t$oPage->add_script(\n<<<EOF\n\tvar aDefaultKeys = new Array();\n\tvar aReadOnlyKeys = new Array();\n\t\n\tfunction CSVGoBack()\n\t{\n\t\t$('input[name=step]').val(2);\n\t\t$('#wizForm').removeAttr('onsubmit'); // No need to perform validation checks when going back\n\t\t$('#wizForm').submit();\n\t\t\n\t}\n\n\tfunction CSVRestart()\n\t{\n\t\t$('input[name=step]').val(1);\n\t\t$('#wizForm').removeAttr('onsubmit'); // No need to perform validation checks when going back\n\t\t$('#wizForm').submit();\n\t\t\n\t}\n\n\tvar ajax_request = null;\n\t\n\tfunction DoMapping(sInitFieldsMapping, sInitSearchFields)\n\t{\n\t\tvar class_name = $('select[name=class_name]').val();\n\t\tvar advanced = $('input[name=advanced]:checked').val();\n\t\tif (advanced != 1)\n\t\t{\n\t\t\t$('#advanced_help').hide();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$('#advanced_help').show();\n\t\t}\n\t\tif (class_name != '')\n\t\t{\n\t\t\tvar separator = $('input[name=separator]').val();\n\t\t\tvar text_qualifier = $('input[name=text_qualifier]').val();\n\t\t\tvar header_line = $('input[name=header_line]').val();\n\t\t\tvar do_skip_lines = 0;\n\t\t\tif ($('input[name=box_skiplines]').val() == '1')\n\t\t\t{\n\t\t\t\tdo_skip_lines = $('input[name=nb_skipped_lines]').val();\n\t\t\t}\n\t\t\tvar csv_data = $('input[name=csvdata]').val();\n\t\t\tvar encoding = $('input[name=encoding]').val();\n\t\t\tif (advanced != 1)\n\t\t\t{\n\t\t\t\tadvanced = 0;\n\t\t\t}\n\t\t\t$('#mapping').block();\n\t\n\t\t\t// Make sure that we cancel any pending request before issuing another\n\t\t\t// since responses may arrive in arbitrary order\n\t\t\tif (ajax_request != null)\n\t\t\t{\n\t\t\t\tajax_request.abort();\n\t\t\t\tajax_request = null;\n\t\t\t}\n\n\t\t\tvar aParams = { operation: 'display_mapping_form', enctype: 'multipart/form-data', csvdata: csv_data, separator: separator, \n\t\t\t   \t qualifier: text_qualifier, do_skip_lines: do_skip_lines, header_line: header_line, class_name: class_name,\n\t\t\t   \t advanced: advanced, encoding: encoding };\n\t\t\n\t\t\tif (sInitFieldsMapping != undefined)\n\t\t\t{\n\t\t\t\taParams.init_field_mapping = sInitFieldsMapping;\n\t\t\t\taParams.init_search_field = sInitSearchFields;\n\t\t\t}\n\n\t\t\tajax_request = $.post(GetAbsoluteUrlAppRoot()+'pages/ajax.csvimport.php',\n\t\t\t\t   aParams,\n\t\t\t\t   function(data) {\n\t\t\t\t\t $('#mapping').empty();\n\t\t\t\t\t $('#mapping').append(data);\n\t\t\t\t\t $('#mapping').unblock();\n\t\t\t\t\t}\n\t\t\t\t );\n\t\t}\n\t}\n\t\n\tfunction CheckValues()\n\t{\n\t\t// Reset the highlight in case the check has already been executed with failure\n\t\t$('select[name^=field]').each( function() {\n\t\t\t$(this).parent().css({'border': '0'});\n\t\t});\n\n\t\tbResult = true;\n\t\tbMappingOk = true;\n\t\tbMultipleMapping = false;\n\t\tbSearchOk = false;\n\t\t$('select[name^=field]').each( function() {\n\t\t\t$(this).parent().css({'border': '0'});\n\t\t\tif ($(this).val() == '')\n\t\t\t{\n\t\t\t\t$(this).parent().css({'border': '2px #D81515 solid'});\n\t\t\t\tbMappingOk = false;\n\t\t\t\tbResult = false; \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tiOccurences = 0;\n\t\t\t\tsRefValue = $(this).val();\n\t\t\t\t$('select[name^=field]').each( function() {\n\t\t\t\t\tif ($(this).val() == sRefValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tiOccurences++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif ((iOccurences > 1) && (sRefValue != ':none:'))\n\t\t\t\t{\n\t\t\t\t\t$(this).parent().css({'border': '2px #D81515 solid'});\n\t\t\t\t\tbResult = false; \n\t\t\t\t\tbMultipleMapping = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// At least one search field must be checked\n\t\t$('input[name^=search]:checked').each( function() {\n\t\t\t\tbSearchOk = true;\n\t\t});\n\t\tif (!bMappingOk)\n\t\t{\n\t\t\talert(\"$sAlertIncompleteMapping\");\n\t\t}\n\t\tif (bMultipleMapping)\n\t\t{\n\t\t\talert(\"$sAlertMultipleMapping\");\n\t\t}\n\t\tif (!bSearchOk)\n\t\t{\n\t\t\t\tbResult = false; \n\t\t\t\talert(\"$sAlertNoSearchCriteria\");\n\t\t}\n\t\t\n\t\tif (bResult)\n\t\t{\n\t\t\t$('#mapping').block();\n\t\t\t// Re-enable all search_xxx checkboxes so that their value gets posted\n\t\t\t$('input[name^=search]').each(function() {\n\t\t\t\t$(this).prop('disabled', false);\n\t\t\t});\n\t\t}\n\t\treturn bResult;\n\t}\n\n\tfunction DoCheckMapping()\n\t{\n\t\t// Check if there is a field mapped to 'id'\n\t\t// In which case, it's the only possible search key\n\t\tvar idSelected = 0;\n\t\tvar nbSearchKeys = $('input[name^=search]:checked').length;\n\t\tvar nbMappings = $('select[name^=field]').length;\n\t\tfor(index=1; index <= nbMappings; index++)\n\t\t{\n\t\t\tvar selectedValue = $('#mapping_'+index).val();\n\t\t\t \n\t\t\tif (selectedValue == 'id')\n\t\t\t{\n\t\t\t\tidSelected = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (index=1; index <= nbMappings; index++)\n\t\t{\n\t\t\tsMappingValue = $('#mapping_'+index).val();\n\t\t\tif ((sMappingValue == '') || (sMappingValue == ':none:'))\n\t\t\t{\n\t\t\t\t// Non-mapped field, uncheck and disabled\n\t\t\t\t$('#search_'+index).prop('checked', false);\n\t\t\t\t$('#search_'+index).prop('disabled', true);\n\t\t\t}\n\t\t\telse if (aReadOnlyKeys.indexOf(sMappingValue) >= 0)\n\t\t\t{\n\t\t\t\t// Read-only attribute forced to reconciliation key\n\t\t\t\t$('#search_'+index).prop('checked', true);\n\t\t\t\t$('#search_'+index).prop('disabled', true);\n\t\t\t}\n\t\t\telse if (index == idSelected)\n\t\t\t{\n\t\t\t\t// The 'id' field was mapped, it's the only possible reconciliation key\n\t\t\t\t$('#search_'+index).prop('checked', true);\n\t\t\t\t$('#search_'+index).prop('disabled', true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (idSelected > 0)\n\t\t\t\t{\n\t\t\t\t\t// The 'id' field was mapped, it's the only possible reconciliation key\n\t\t\t\t\t$('#search_'+index).prop('checked', false);\n\t\t\t\t\t$('#search_'+index).prop('disabled', true);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$('#search_'+index).prop('disabled', false);\n\t\t\t\t\tif (nbSearchKeys == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// No search key was selected, select the default ones\n\t\t\t\t\t\tfor(j =0; j < aDefaultKeys.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (sMappingValue == aDefaultKeys[j])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$('#search_'+index).prop('checked', true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nEOF\n\t);\n\t}\n\t\n\t/**\n\t * Select the options of the CSV load and check for CSV parsing errors\n\t * @param WebPage $oPage The current web page\n\t * @return void\n\t */\n\tfunction SelectOptions(WebPage $oPage)\n\t{\n\t\t$sOperation = utils::ReadParam('operation', 'csv_data');\n\t\t$sCSVData = '';\n\t\tswitch($sOperation)\n\t\t{\n\t\t\tcase 'file_upload':\n\t\t\t$oDocument = utils::ReadPostedDocument('csvdata');\n\t\t\tif (!$oDocument->IsEmpty())\n\t\t\t{\n\t\t\t\t$sCSVData = $oDocument->GetData();\n\t\t\t}\n\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\n\t\t\t$sCSVData = utils::ReadPostedParam('csvdata', '', 'raw_data');\n\t\t}\n\t\t$sEncoding = utils::ReadParam('encoding', 'UTF-8');\n\t\n\t\t// Compute a subset of the data set, now that we know the charset\n\t\tif ($sEncoding == 'UTF-8')\n\t\t{\n\t\t\t// Remove the BOM if any\n\t\t\tif (substr($sCSVData, 0, 3) == UTF8_BOM)\n\t\t\t{\n\t\t\t\t$sCSVData = substr($sCSVData, 3);\n\t\t\t}\n\t\t\t// Clean the input\n\t\t\t// Todo: warn the user if some characters are lost/substituted\n\t\t\t$sUTF8Data = iconv('UTF-8', 'UTF-8//IGNORE//TRANSLIT', $sCSVData);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sUTF8Data = iconv($sEncoding, 'UTF-8//IGNORE//TRANSLIT', $sCSVData);\n\t\t}\n\t\n\t\t$aGuesses = GuessParameters($sUTF8Data); // Try to predict the parameters, based on the input data\n\t\t\n\t\t$iSkippedLines = utils::ReadParam('nb_skipped_lines', '');\n\t\t$bBoxSkipLines = utils::ReadParam('box_skiplines', 0);\n\t\t$sTextQualifier = utils::ReadParam('text_qualifier', '', false, 'raw_data');\n\t\tif ($sTextQualifier == '') // May be set to an empty value by the previous page\n\t\t{\n\t\t\t$sTextQualifier = $aGuesses['qualifier'];\t\n\t\t}\n\t\t$sOtherTextQualifier = in_array($sTextQualifier, array('\"', \"'\")) ? '' : $sTextQualifier;\n\t\t$bHeaderLine = utils::ReadParam('header_line', 0);\n\t\t$sClassName = utils::ReadParam('class_name', '', false, 'class');\n\t\t$bAdvanced = utils::ReadParam('advanced', 0);\n\t\t$aFieldsMapping = utils::ReadParam('field', array(), false, 'raw_data');\n\t\t$aSearchFields = utils::ReadParam('search_field', array(), false, 'field_name');\n\n\t\t// Create a truncated version of the data used for the fast preview\n\t\t// Take about 20 lines of data... knowing that some lines may contain carriage returns\n\t\t$iMaxLen = strlen($sUTF8Data);\n\t\tif ($iMaxLen > 0) {\n\t\t\t$iMaxLines = 20;\n\t\t\t$iCurPos = true;\n\t\t\twhile (($iCurPos > 0) && ($iMaxLines > 0)) {\n\t\t\t\t$pos = strpos($sUTF8Data, \"\\n\", $iCurPos);\n\t\t\t\tif ($pos !== false) {\n\t\t\t\t\t$iCurPos = 1 + $pos;\n\t\t\t\t} else {\n\t\t\t\t\t$iCurPos = strlen($sUTF8Data);\n\t\t\t\t\t$iMaxLines = 1;\n\t\t\t\t}\n\t\t\t\t$iMaxLines--;\n\t\t\t}\n\t\t\t$sCSVDataTruncated = substr($sUTF8Data, 0, $iCurPos);\n\t\t} else {\n\t\t\t$sCSVDataTruncated = '';\n\t\t}\n\n\t\t$sSynchroScope = utils::ReadParam('synchro_scope', '', false, 'raw_data');\n\t\tif (!empty($sSynchroScope)) {\n\t\t\t$oSearch = DBObjectSearch::FromOQL($sSynchroScope);\n\t\t\t$sClassName = $oSearch->GetClass();\n\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t$iCount = $oSet->Count();\n\t\t\tDisplaySynchroBanner($oPage, $sClassName, $iCount);\n\t\t\t$aSynchroUpdate = utils::ReadParam('synchro_update', array());\n\t\t}\n\t\t$oPanel = TitleUIBlockFactory::MakeForPage(Dict::S('UI:Title:CSVImportStep2'));\n\t\t$oPage->AddSubBlock($oPanel);\n\n\t\t$oForm = FormUIBlockFactory::MakeStandard('wizForm');\n\t\t$oPage->AddSubBlock($oForm);\n\n\n\t\t$oContainer = PanelUIBlockFactory::MakeNeutral('');\n\t\t$oForm->AddSubBlock($oContainer);\n\n\t\t$oMulticolumn = MultiColumnUIBlockFactory::MakeStandard();\n\t\t$oMulticolumn->AddCSSClass('wizContainer');\n\t\t$oContainer->AddSubBlock($oMulticolumn);\n\n\t\t//SeparatorCharacter\n\t\t$oFieldSetSeparator = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:SeparatorCharacter'));\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSetSeparator));\n\n\t\t$aSep = array(\n\t\t\t';' => Dict::S('UI:CSVImport:SeparatorSemicolon+'),\n\t\t\t',' => Dict::S('UI:CSVImport:SeparatorComma+'),\n\t\t\t'tab' => Dict::S('UI:CSVImport:SeparatorTab+'),\n\t\t);\n\t\t$sSeparator = utils::ReadParam('separator', '', false, 'raw_data');\n\t\tif ($sSeparator == '') // May be set to an empty value by the previous page\n\t\t{\n\t\t\t$sSeparator = $aGuesses['separator'];\n\t\t}\n\t\tif ($sSeparator == \"\\t\") {\n\t\t\t$sSeparator = \"tab\";\n\t\t}\n\t\t$sOtherSeparator = in_array($sSeparator, array(',', ';', \"\\t\")) ? '' : $sSeparator;\n\t\t$aSep['other'] = Dict::S('UI:CSVImport:SeparatorOther').' <input type=\"text\" size=\"3\" maxlength=\"1\" name=\"other_separator\"  id=\"other_separator\" value=\"'.htmlentities($sOtherSeparator, ENT_QUOTES, 'UTF-8').'\" onChange=\"DoPreview()\"/>';\n\n\t\tforeach ($aSep as $sVal => $sLabel) {\n\t\t\t$oRadio = InputUIBlockFactory::MakeForInputWithLabel($sLabel, \"separator\", htmlentities($sVal, ENT_QUOTES, 'UTF-8'), $sLabel, \"radio\");\n\t\t\t$oRadio->GetInput()->SetIsChecked(($sVal == $sSeparator));\n\t\t\t$oRadio->SetBeforeInput(false);\n\t\t\t$oRadio->GetInput()->AddCSSClass('ibo-input--label-right');\n\t\t\t$oRadio->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t\t$oFieldSetSeparator->AddSubBlock($oRadio);\n\t\t\t$oFieldSetSeparator->AddSubBlock(new Html('</br>'));\n\t\t}\n\t\t$oPage->add_ready_script(\"$('[name=\\\"separator\\\"]').on('click', function() { DoPreview(); });\");\n\n\t\t//TextQualifierCharacter\n\t\t$oFieldSetTextQualifier = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:TextQualifierCharacter'));\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSetTextQualifier));\n\n\t\t$aQualifiers = array(\n\t\t\t'\"' => Dict::S('UI:CSVImport:QualifierDoubleQuote+'),\n\t\t\t'\\'' => Dict::S('UI:CSVImport:QualifierSimpleQuote+'),\n\t\t);\n\t\t$aQualifiers['other'] = Dict::S('UI:CSVImport:QualifierOther').' <input type=\"text\" size=\"3\" maxlength=\"1\" name=\"other_qualifier\" value=\"'.htmlentities($sOtherTextQualifier, ENT_QUOTES, 'UTF-8').'\" onChange=\"DoPreview()/>';\n\t\t//\t<input type=\"text\" size=\"3\" maxlength=\"1\" name=\"other_qualifier\"  value=\"'.htmlentities($sOtherTextQualifier, ENT_QUOTES, 'UTF-8').'\" onChange=\"DoPreview()\"/>\n\t\tforeach ($aQualifiers as $sVal => $sLabel) {\n\t\t\t$oRadio = InputUIBlockFactory::MakeForInputWithLabel($sLabel, \"text_qualifier\", htmlentities($sVal, ENT_QUOTES, 'UTF-8'), $sLabel, \"radio\");\n\t\t\t$oRadio->GetInput()->SetIsChecked(($sVal == $sTextQualifier));\n\t\t\t$oRadio->SetBeforeInput(false);\n\t\t\t$oRadio->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t\t$oFieldSetTextQualifier->AddSubBlock($oRadio);\n\t\t\t$oFieldSetTextQualifier->AddSubBlock(new Html('</br>'));\n\t\t}\n\t\t$oPage->add_ready_script(\"$('[name=\\\"text_qualifier\\\"]').on('click', function() { DoPreview(); });\");\n\n\t\t//CommentsAndHeader\n\t\t$oFieldSetCommentsAndHeader = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:CommentsAndHeader'));\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSetCommentsAndHeader));\n\n\t\t$oCheckBoxHeader = InputUIBlockFactory::MakeForInputWithLabel(Dict::S('UI:CSVImport:TreatFirstLineAsHeader'), \"header_line\", \"1\", \"box_header\", \"checkbox\");\n\t\t$oCheckBoxHeader->GetInput()->SetIsChecked(($bHeaderLine == 1));\n\t\t$oCheckBoxHeader->SetBeforeInput(false);\n\t\t$oCheckBoxHeader->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oFieldSetCommentsAndHeader->AddSubBlock($oCheckBoxHeader);\n\t\t$oFieldSetCommentsAndHeader->AddSubBlock(new Html('</br>'));\n\n\t\t$oCheckBoxSkip = InputUIBlockFactory::MakeForInputWithLabel(Dict::Format('UI:CSVImport:Skip_N_LinesAtTheBeginning', '<input type=\"text\" size=2 name=\"nb_skipped_lines\" id=\"nb_skipped_lines\" onChange=\"DoPreview()\" value=\"'.$iSkippedLines.'\">'), \"box_skiplines\", \"1\", \"box_skiplines\",\n\t\t\t\"checkbox\");\n\t\t$oCheckBoxSkip->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oCheckBoxSkip->GetInput()->SetIsChecked(($bBoxSkipLines == 1));\n\t\t$oCheckBoxSkip->SetBeforeInput(false);\n\t\t$oFieldSetCommentsAndHeader->AddSubBlock($oCheckBoxSkip);\n\n\t\t$oPage->add_ready_script(\"$('#box_header').on('click', function() { DoPreview(); });\");\n\t\t$oPage->add_ready_script(\"$('#box_skiplines').on('click', function() { DoPreview(); });\");\n\n\t\t//date format\n\t\t$oFieldSetDate = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:DateAndTimeFormats'));\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSetDate));\n\n\t\t$sDateTimeFormat = utils::ReadParam('date_time_format', 'default');\n\t\t$sCustomDateTimeFormat = utils::ReadParam('custom_date_time_format', (string)AttributeDateTime::GetFormat(), false, 'raw_data');\n\n\t\t$sDefaultFormat = htmlentities((string)AttributeDateTime::GetFormat(), ENT_QUOTES, 'UTF-8');\n\t\t$sExample = htmlentities(date((string)AttributeDateTime::GetFormat()), ENT_QUOTES, 'UTF-8');\n\t\t$oRadioDefault = InputUIBlockFactory::MakeForInputWithLabel(Dict::Format('UI:CSVImport:DefaultDateTimeFormat_Format_Example', $sDefaultFormat, $sExample), \"date_time_format\", \"default\", \"radio_date_time_std\", \"radio\");\n\t\t$oRadioDefault->GetInput()->SetIsChecked(($sDateTimeFormat == (string)AttributeDateTime::GetFormat()));\n\t\t$oRadioDefault->SetBeforeInput(false);\n\t\t$oRadioDefault->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oFieldSetDate->AddSubBlock($oRadioDefault);\n\t\t$oFieldSetDate->AddSubBlock(new Html('</br>'));\n\n\t\t$sFormatInput = '<input type=\"text\" size=\"15\" name=\"custom_date_time_format\" id=\"excel_custom_date_time_format\" title=\"\" value=\"'.htmlentities($sCustomDateTimeFormat, ENT_QUOTES, 'UTF-8').'\"/>';\n\t\t$oRadioCustom = InputUIBlockFactory::MakeForInputWithLabel(Dict::Format('UI:CSVImport:CustomDateTimeFormat', $sFormatInput), \"date_time_format\", \"custom\", \"radio_date_time_custom\", \"radio\");\n\t\t$oRadioCustom->GetInput()->SetIsChecked($sDateTimeFormat !== (string)AttributeDateTime::GetFormat());\n\t\t$oRadioCustom->SetBeforeInput(false);\n\t\t$oRadioCustom->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oFieldSetDate->AddSubBlock($oRadioCustom);\n\n\t\t$oPage->add_ready_script(\"$('#custom_date_time_format').on('click', function() { DoPreview(); });\");\n\t\t$oPage->add_ready_script(\"$('#radio_date_time_std').on('click', function() { DoPreview(); });\");\n\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata_truncated\", htmlentities($sCSVDataTruncated, ENT_QUOTES, 'UTF-8'), \"csvdata_truncated\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata\", htmlentities($sUTF8Data, ENT_QUOTES, 'UTF-8'), 'csvdata'));\n\t\t// The encoding has changed, keep that information within the wizard\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"encoding\", \"UTF-8\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"class_name\", $sClassName));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"advanced\", $bAdvanced));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"field[$iNumber]\", $sAttCode));\n\t\t}\n\t\tforeach ($aSearchFields as $index => $sDummy) {\n\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"search_field[$index]\", \"1\"));\n\t\t}\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", \"3\"));\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update[$sKey]\", $value));\n\t\t\t}\n\t\t}\n\t\t$oFieldSetSeparator = PanelUIBlockFactory::MakeNeutral(Dict::S('UI:CSVImport:CSVDataPreview'));\n\t\t$oFieldSetSeparator->AddCSSClass('ibo-datatable-panel');\n\t\t$oFieldSetSeparator->AddCSSClass('mt-5');\n\t\t$oForm->AddSubBlock($oFieldSetSeparator);\n\n\t\t$oDivPreview = UIContentBlockUIBlockFactory::MakeStandard('preview');\n\t\t$oDivPreview->AddCSSClass('ibo-is-visible');\n\t\t$oFieldSetSeparator->AddSubBlock($oDivPreview);\n\t\t$oDivPreview->AddSubBlock(new Html('</br>'));\n\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Back'))->SetOnClickJsCode(\"GoBack()\"));\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Next'), '', \"\", true));\n\n\t\t$oPage->add_script(\n\t\t\t<<<EOF\n\tfunction GoBack()\n\t{\n\t\t$('input[name=step]').val(1);\n\t\t$('#wizForm').submit();\n\t}\n\t\n\tvar ajax_request = null;\n\t\n\tfunction DoPreview()\n\t{\n\t\tvar separator = $('input[name=separator]:checked').val();\n\t\tif (separator == 'other')\n\t\t{\n\t\t\tseparator = $('#other_separator').val();\n\t\t}\n\t\tvar text_qualifier = $('input[name=text_qualifier]:checked').val();\n\t\tif (text_qualifier == 'other')\n\t\t{\n\t\t\ttext_qualifier = $('#other_qualifier').val();\n\t\t}\n\t\tvar do_skip_lines = 0;\n\t\tif ($('#box_skiplines:checked').val() != null)\n\t\t{\n\t\t\tdo_skip_lines = $('#nb_skipped_lines').val();\n\t\t}\n\t\tvar header_line = 0;\n\t\tif ($('#box_header:checked').val() != null)\n\t\t{\n\t\t\theader_line = 1;\n\t\t}\n\t\tvar encoding = $('input[name=encoding]').val();\n\n\t\t$('#preview').block();\n\t\t\n\t\t// Make sure that we cancel any pending request before issuing another\n\t\t// since responses may arrive in arbitrary order\n\t\tif (ajax_request != null)\n\t\t{\n\t\t\tajax_request.abort();\n\t\t\tajax_request = null;\n\t\t}\n\t\t\n\t\tajax_request = $.post(GetAbsoluteUrlAppRoot()+'pages/ajax.csvimport.php',\n\t\t\t   { operation: 'parser_preview', enctype: 'multipart/form-data', csvdata: $(\"#csvdata_truncated\").val(), separator: separator, qualifier: text_qualifier, do_skip_lines: do_skip_lines, header_line: header_line, encoding: encoding },\n\t\t\t   function(data) {\n\t\t\t\t $('#preview').empty();\n\t\t\t\t $('#preview').append(data);\n\t\t\t\t $('#preview').unblock();\n\t\t\t\t}\n\t\t\t );\n\t}\nEOF\n\t);\n\t\t$sJSTooltip = json_encode('<div class=\"date_format_tooltip\">'.Dict::S('UI:CSVImport:CustomDateTimeFormatTooltip').'</div>');\n\t\t$oPage->add_ready_script(\n<<<EOF\nDoPreview();\n$('#custom_date_time_format').tooltip({content: function() { return $sJSTooltip; } });\n$('#custom_date_time_format').on('click', function() { $('#radio_date_time_custom').prop('checked', true); });\nEOF\n\t\t);\n\t}\n\n\t/**\n\t *  Prompt for the data to be loaded (either via a file or a copy/paste)\n\t * @param WebPage $oPage The current web page\n\t * @return void\n\t */\n\tfunction Welcome(iTopWebPage $oPage)\n\t{\n\t\t$sSynchroScope = utils::ReadParam('synchro_scope', '', false, 'raw_data');\n\t\tif (!empty($sSynchroScope)) {\n\t\t\t$oSearch = DBObjectSearch::FromOQL($sSynchroScope);\n\t\t\t$sClassName = $oSearch->GetClass();\n\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t$iCount = $oSet->Count();\n\t\t\tDisplaySynchroBanner($oPage, $sClassName, $iCount);\n\t\t\t$aSynchroUpdate = utils::ReadParam('synchro_update', array());\n\t\t} else {\n\t\t\t$aSynchroUpdate = null;\n\t\t}\n\n\t\t$oPanel = PanelUIBlockFactory::MakeForInformation(Dict::S('UI:Title:BulkImport+'));\n\t\t$oPage->AddSubBlock($oPanel);\n\n\t\t$oTabContainer = new TabContainer('tabs1', 'import');\n\t\t$oPanel->AddMainBlock($oTabContainer);\n\n\t\t//** Tab:LoadFromFile */\n\t\t$oTabFile = $oTabContainer->AddTab('LoadFromFile', Dict::S('UI:CSVImport:Tab:LoadFromFile'));\n\t\t$oFormFile = FormUIBlockFactory::MakeStandard();\n\t\t$oTabFile->AddSubBlock($oFormFile);\n\n\t\t$oSelectFile = FileSelectUIBlockFactory::MakeStandard(\"csvdata\");\n\t\t$oFieldFile = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:SelectFile'), $oSelectFile);\n\t\t$oFormFile->AddSubBlock($oFieldFile);\n\n\t\t$oSelectEncodingFile = SelectUIBlockFactory::MakeForSelect(\"encoding\");\n\t\t$oFieldEncodingFile = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:Encoding'), $oSelectEncodingFile);\n\t\t$oFormFile->AddSubBlock($oFieldEncodingFile);\n\n\t\t$sSeparator = utils::ReadParam('separator', '', false, 'raw_data');\n\t\t$sTextQualifier = utils::ReadParam('text_qualifier', '', false, 'raw_data');\n\t\t$bHeaderLine = utils::ReadParam('header_line', true);\n\t\t$sClassName = utils::ReadParam('class_name', '');\n\t\t$bAdvanced = utils::ReadParam('advanced', 0);\n\t\t$sEncoding = utils::ReadParam('encoding', '');\n\t\t$sDateTimeFormat = utils::ReadParam('date_time_format', 'default');\n\t\t$sCustomDateTimeFormat = utils::ReadParam('custom_date_time_format', (string)AttributeDateTime::GetFormat(), false, 'raw_data');\n\t\tif ($sEncoding == '') {\n\t\t\t$sEncoding = MetaModel::GetConfig()->Get('csv_file_default_charset');\n\t\t}\n\t\t$aFieldsMapping = utils::ReadParam('field', array(), false, 'raw_data');\n\t\t$aSearchFields = utils::ReadParam('search_field', array(), false, 'field_name');\n\t\t$aPossibleEncodings = utils::GetPossibleEncodings(MetaModel::GetConfig()->GetCSVImportCharsets());\n\n\t\tforeach ($aPossibleEncodings as $sIconvCode => $sDisplayName) {\n\t\t\t$oSelectEncodingFile->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption($sIconvCode, $sDisplayName, ($sEncoding == $sIconvCode)));\n\t\t}\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", '2'));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"operation\", \"file_upload\"));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"header_line\", $bHeaderLine));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"nb_skipped_lines\", utils::ReadParam('nb_skipped_lines', '0')));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"box_skiplines\", utils::ReadParam('box_skiplines', '0')));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"class_name\", $sClassName));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"advanced\", $bAdvanced));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update['.$sKey.']\", $value));\n\t\t\t}\n\t\t}\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"['field$iNumber]\", $sAttCode));\n\t\t}\n\t\tforeach ($aSearchFields as $index => $sDummy) {\n\t\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"search_field[$index]\", \"1\"));\n\t\t}\n\t\t$oToolbarFile = ToolbarUIBlockFactory::MakeForButton();\n\t\t$oToolbarFile->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Next'), '', '', true));\n\t\t$oFormFile->AddSubBlock($oToolbarFile);\n\n\t\t//** Tab:PasteData */\n\t\t$oTabPaste = $oTabContainer->AddTab('UI:CSVImport:Tab:PasteData', Dict::S('UI:CSVImport:Tab:CopyPaste'));\n\t\t$oFormPaste = FormUIBlockFactory::MakeStandard();\n\t\t$oTabPaste->AddSubBlock($oFormPaste);\n\n\n\t\t$sCSVData = utils::ReadParam('csvdata', '', false, 'raw_data');\n\t\t$oTextarea = new TextArea('csvdata', $sCSVData, '', 120, 30);\n\t\t$oFieldPaste = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:PasteData'), $oTextarea);\n\t\t$oFormPaste->AddSubBlock($oFieldPaste);\n\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"encoding\", 'UTF-8'));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", '2'));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"separator\", htmlentities($sSeparator, ENT_QUOTES, 'UTF-8')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"text_qualifier\", htmlentities($sTextQualifier, ENT_QUOTES, 'UTF-8')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"date_time_format\", htmlentities($sDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"custom_date_time_format\", htmlentities($sCustomDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"header_line\", $bHeaderLine));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"nb_skipped_lines\", utils::ReadParam('nb_skipped_lines', '0')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"box_skiplines\", utils::ReadParam('box_skiplines', '0')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"class_name\", $sClassName));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"advanced\", $bAdvanced));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\t\t$oFormPaste->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Next'), '', \"\", true));\n\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update[$sKey]\", $value));\n\t\t\t}\n\t\t}\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"field[$iNumber]\", $sAttCode));\n\t\t}\n\t\tforeach ($aSearchFields as $index => $sDummy) {\n\t\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"search_field[$index]\", \"1\"));\n\t\t}\n\n\t\t/*\tif (!empty($sCSVData)) {\n\t\t\t\t// When there are some data, activate the 'copy & paste' tab by default\n\t\t\t\t$oPage->SelectTab('tabs1', Dict::S('UI:CSVImport:Tab:CopyPaste'));\n\t\t\t}*/\n\t\t//Tab:Template\n\t\t$oTabTemplate = $oTabContainer->AddTab('tabsTemplate', Dict::S('UI:CSVImport:Tab:Templates'));\n\t\t$oFieldTemplate = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:PickClassForTemplate'), GetClassesSelectUIBlock('template_class', '', UR_ACTION_BULK_MODIFY));\n\t\t$oTabTemplate->AddSubBlock($oFieldTemplate);\n\t\t$oDivTemplate = UIContentBlockUIBlockFactory::MakeStandard(\"template\")->AddCSSClass(\"ibo-is-visible\");\n\t\t$oTabTemplate->AddSubBlock($oDivTemplate);\n\n\t\t$oPage->add_script(\n\t\t\t<<<EOF\nvar ajax_request = null;\n\nfunction DisplayTemplate(sClassName) {\n\n$('#template').block();\n\n// Make sure that we cancel any pending request before issuing another\n// since responses may arrive in arbitrary order\nif (ajax_request != null)\n{\n\tajax_request.abort();\n\tajax_request = null;\n}\n\najax_request = $.post(GetAbsoluteUrlAppRoot()+'pages/ajax.csvimport.php',\n\t   { operation: 'get_csv_template', class_name: sClassName },\n\t   function(data) {\n\t\t $('#template').empty();\n\t\t $('#template').append(data);\n\t\t $('#template').unblock();\n\t\t}\n\t );\n}\nEOF\n\t);\n\t\t$oPage->add_ready_script(\n<<<EOF\n$('#select_template_class').change( function() {\n\tDisplayTemplate(this.value);\n});\nEOF\n\t);\n\n\t\tif (Utils::GetConfig()->Get('csv_import_history_display'))\n\t\t{\n\t\t\t$oPage->SetCurrentTabContainer('tabs1');\n\t\t\t$oPage->AddAjaxTab('UI:History:BulkImports', utils::GetAbsoluteUrlAppRoot().'pages/csvimport.php?step=11', true /* bCache */,\n\t\t\t\tnull, AjaxTab::ENUM_TAB_PLACEHOLDER_MISC);\n\t\t}\n\t}\n\t\t\t\n\tswitch($iStep)\n\t{\n\t\tcase 11:\n\t\t\t// Asynchronous tab\n\t\t\t$oPage = new AjaxPage('');\n\t\t\tBulkChange::DisplayImportHistory($oPage);\n\t\t\t$oPage->add_ready_script('$(\"#CSVImportHistory table.listResults\").tableHover();');\n\t\t\t$oPage->add_ready_script('$(\"#CSVImportHistory table.listResults\").tablesorter( { widgets: [\"myZebra\", \"truncatedList\"]} );');\t\n\t\t\tbreak;\n\t\t\n\t\tcase 10:\n\t\t\t// Case generated by BulkChange::DisplayImportHistory\n\t\t\t$iChange = (int)utils::ReadParam('changeid', 0);\n\t\t\tBulkChange::DisplayImportHistoryDetails($oPage, $iChange);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 5:\n\t\t\tLoadData($oPage);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 4:\n\t\t\tPreview($oPage);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 3:\n\t\t\tSelectMapping($oPage);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 2:\n\t\t\tSelectOptions($oPage);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 1:\n\t\tcase 6: // Loop back here when we are done\n\t\tdefault:\n\t\t\tWelcome($oPage);\n\t}\n\t\n\t$oPage->output();\n}\ncatch(CoreException $e)\n{\n\trequire_once(APPROOT.'/setup/setuppage.class.inc.php');\n\t$oP = new ErrorPage(Dict::S('UI:PageTitle:FatalError'));\n\t$oP->add(\"<h1>\".Dict::S('UI:FatalErrorMessage').\"</h1>\\n\");\t\n\t$oP->error(Dict::Format('UI:Error_Details', $e->getHtmlDesc()));\t\n\t$oP->output();\n\n\tif (MetaModel::IsLogEnabledIssue())\n\t{\n\t\tif (MetaModel::IsValidClass('EventIssue'))\n\t\t{\n\t\t\t$oLog = new EventIssue();\n\n\t\t\t$oLog->Set('message', $e->getMessage());\n\t\t\t$oLog->Set('userinfo', '');\n\t\t\t$oLog->Set('issue', $e->GetIssue());\n\t\t\t$oLog->Set('impact', 'Page could not be displayed');\n\t\t\t$oLog->Set('callstack', $e->getTrace());\n\t\t\t$oLog->Set('data', $e->getContextData());\n\t\t\t$oLog->DBInsertNoReload();\n\t\t}\n\n\t\tIssueLog::Error($e->getMessage());\n\t}\n\n\t// For debugging only\n\t//throw $e;\n}\ncatch(Exception $e)\n{\n\trequire_once(APPROOT.'/setup/setuppage.class.inc.php');\n\t$oP = new ErrorPage(Dict::S('UI:PageTitle:FatalError'));\n\t$oP->add(\"<h1>\".Dict::S('UI:FatalErrorMessage').\"</h1>\\n\");\t\n\t$oP->error(Dict::Format('UI:Error_Details', $e->getMessage()));\t\n\t$oP->output();\n\n\tif (MetaModel::IsLogEnabledIssue())\n\t{\n\t\tif (MetaModel::IsValidClass('EventIssue'))\n\t\t{\n\t\t\t$oLog = new EventIssue();\n\n\t\t\t$oLog->Set('message', $e->getMessage());\n\t\t\t$oLog->Set('userinfo', '');\n\t\t\t$oLog->Set('issue', 'PHP Exception');\n\t\t\t$oLog->Set('impact', 'Page could not be displayed');\n\t\t\t$oLog->Set('callstack', $e->getTrace());\n\t\t\t$oLog->Set('data', array());\n\t\t\t$oLog->DBInsertNoReload();\n\t\t}\n\n\t\tIssueLog::Error($e->getMessage());\n\t}\n}"], "fixing_code": ["<?php\n/*\n * @copyright   Copyright (C) 2010-2021 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nuse Combodo\\iTop\\Application\\Helper\\WebResourcesHelper;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Alert\\AlertUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Button\\ButtonUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\CollapsibleSection\\CollapsibleSectionUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\DataTable\\DataTableUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Field\\FieldUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\FieldSet\\FieldSetUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Form\\FormUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Html\\Html;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\FileSelect\\FileSelectUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\InputUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\Select;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\SelectOptionUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\SelectUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\TextArea;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Panel\\PanelUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Title\\TitleUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Toolbar\\ToolbarUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\MultiColumn\\Column\\ColumnUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\MultiColumn\\MultiColumnUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\TabContainer\\Tab\\AjaxTab;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\TabContainer\\TabContainer;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\UIContentBlockUIBlockFactory;\nuse Combodo\\iTop\\Core\\CMDBChange\\CMDBChangeOrigin;\nuse Combodo\\iTop\\Renderer\\BlockRenderer;\n\ntry {\n\trequire_once('../approot.inc.php');\n\trequire_once(APPROOT.'/application/application.inc.php');\n\trequire_once(APPROOT.'/application/ajaxwebpage.class.inc.php');\n\n\trequire_once(APPROOT.'/application/startup.inc.php');\n\trequire_once(APPROOT.'/application/loginwebpage.class.inc.php');\n\n\tif (utils::SetMinMemoryLimit('256M') === false) {\n\t\tIssueLog::Warning('csvimport : cannot set minimum memory_limit !');\n\t}\n\n\tLoginWebPage::DoLogin(); // Check user rights and prompt if needed\n\n\t$iStep = utils::ReadParam('step', 1);\n\n\t$oPage = new iTopWebPage(Dict::S('UI:Title:BulkImport'));\n\t$oPage->SetBreadCrumbEntry('ui-tool-bulkimport', Dict::S('Menu:CSVImportMenu'), Dict::S('UI:Title:BulkImport+'), '', 'fas fa-file-import', iTopWebPage::ENUM_BREADCRUMB_ENTRY_ICON_TYPE_CSS_CLASSES);\n\n\t/**\n\t * Helper function to build a select from the list of valid classes for a given action\n\t *\n\t * @deprecated since 3.0.0 use GetClassesSelectUIBlock\n\t *\n\t * @param $sDefaultValue\n\t * @param integer $iWidthPx The width (in pixels) of the drop-down list\n\t * @param integer $iActionCode The ActionCode (from UserRights) to check for authorization for the classes\n\t *\n\t * @param string $sName The name of the select in the HTML form\n\t *\n\t * @return string The HTML fragment corresponding to the select tag\n\t */\n\tfunction GetClassesSelect($sName, $sDefaultValue, $iWidthPx, $iActionCode = null)\n\t{\n\t\tDeprecatedCallsLog::NotifyDeprecatedPhpMethod('use GetClassesSelectUIBlock');\n\t\t$oSelectBlock = GetClassesSelectUIBlock($sName, $sDefaultValue, $iActionCode);\n\n\t\treturn BlockRenderer::RenderBlockTemplates($oSelectBlock);\n\t}\n\n\t/**\n\t * Helper function to build a select from the list of valid classes for a given action\n\t *\n\t * @param string $sName The name of the select in the HTML form\n\t * @param $sDefaultValue\n\t * @param integer $iWidthPx The width (in pixels) of the drop-down list\n\t * @param integer $iActionCode The ActionCode (from UserRights) to check for authorization for the classes\n\t *\n\t * @return \\Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\\n\t */\n\tfunction GetClassesSelectUIBlock(string $sName, $sDefaultValue, int $iActionCode): Select\n\t{\n\t\t$oSelectBlock = SelectUIBlockFactory::MakeForSelect($sName, 'select_'.$sName);\n\t\t$oOption = SelectOptionUIBlockFactory::MakeForSelectOption(\"\", Dict::S('UI:CSVImport:ClassesSelectOne'), false);\n\t\t$oSelectBlock->AddSubBlock($oOption);\n\t\t$aValidClasses = array();\n\t\t$aClassCategories = array('bizmodel', 'addon/authentication');\n\t\tif (UserRights::IsAdministrator()) {\n\t\t\t$aClassCategories = array('bizmodel', 'application', 'addon/authentication');\n\t\t}\n\t\tforeach ($aClassCategories as $sClassCategory) {\n\t\t\tforeach (MetaModel::GetClasses($sClassCategory) as $sClassName) {\n\t\t\t\tif ((is_null($iActionCode) || UserRights::IsActionAllowed($sClassName, $iActionCode)) &&\n\t\t\t\t\t(!MetaModel::IsAbstract($sClassName))) {\n\t\t\t\t\t$sDisplayName = MetaModel::GetName($sClassName);\n\t\t\t\t\t$aValidClasses[$sDisplayName] = SelectOptionUIBlockFactory::MakeForSelectOption($sClassName, $sDisplayName, ($sClassName == $sDefaultValue));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tksort($aValidClasses);\n\t\tforeach ($aValidClasses as $sValue => $oBlock) {\n\t\t\t$oSelectBlock->AddSubBlock($oBlock);\n\t\t}\n\n\t\treturn $oSelectBlock;\n\t}\n\n\t/**\n\t * Helper to 'check' an input in an HTML form if the current value equals the value given\n\t *\n\t * @param mixed $sCurrentValue The current value to be chacked against the value of the input\n\t * @param mixed $sProposedValue The value of the input\n\t * @param bool $bInverseCondition Set to true to perform the reversed comparison\n\t *\n\t * @return string Either ' checked' or an empty string\n\t */\n\tfunction IsChecked($sCurrentValue, $sProposedValue, $bInverseCondition = false)\n\t{\n\t\t$bCondition = ($sCurrentValue == $sProposedValue);\n\n\t\treturn ($bCondition xor $bInverseCondition) ? ' checked' : '';\n\t}\n\n\t/**\n\t * Returns the number of occurences of each char from the set in the specified string\n\t * @param string $sString The input data\n\t * @param array $aSet The set of characters to count\n\t * @return array 'char' => nb of occurences\n\t */\n\tfunction CountCharsFromSet($sString, $aSet)\n\t{\n\t\t$aResult = array();\n\t\t$aCount = count_chars($sString);\n\t\tforeach($aSet as $sChar)\n\t\t{\n\t\t\t$aResult[$sChar] = isset($aCount[ord($sChar)]) ? $aCount[ord($sChar)] : 0;\n\t\t}\n\t\treturn $aResult;\n\t}\n\t\n\t/**\n\t * Return the most frequent (and regularly occuring) character among the given set, in the specified lines\n\t * @param array $aCSVData The input data, one entry per line\n\t * @param array $aPossibleSeparators The list of characters to count\n\t * @return string The most frequent character from the set\n\t */\n\tfunction GuessFromFrequency($aCSVData, $aPossibleSeparators)\n\t{\n\t\t$iLine = 0;\n\t\t$iMaxLine = 20; // Process max 20 lines to guess the parameters\n\t\tforeach($aPossibleSeparators as $sSep)\n\t\t{\n\t\t\t$aGuesses[$sSep]['total'] = $aGuesses[$sSep]['max'] = 0;\n\t\t\t$aGuesses[$sSep]['min'] = 999;\n\t\t}\n\t\t$aStats = array();\n\t\twhile(($iLine < count($aCSVData)) && ($iLine < $iMaxLine) )\n\t\t{\n\t\t\tif (strlen($aCSVData[$iLine]) > 0)\n\t\t\t{\n\t\t\t\t$aStats[$iLine] = CountCharsFromSet($aCSVData[$iLine], $aPossibleSeparators);\n\t\t\t}\n\t\t\t$iLine++;\n\t\t}\n\t\t$iLine = 1;\n\t\tforeach($aStats as $aLineStats)\n\t\t{\n\t\t\tforeach($aPossibleSeparators as $sSep)\n\t\t\t{\n\t\t\t\t$aGuesses[$sSep]['total'] += $aLineStats[$sSep];\n\t\t\t\tif ($aLineStats[$sSep] > $aGuesses[$sSep]['max']) $aGuesses[$sSep]['max'] = $aLineStats[$sSep];\n\t\t\t\tif ($aLineStats[$sSep] < $aGuesses[$sSep]['min']) $aGuesses[$sSep]['min'] = $aLineStats[$sSep];\n\t\t\t}\n\t\t\t$iLine++;\n\t\t}\n\t\t\n\t\t$aScores = array();\n\t\tforeach($aGuesses as $sSep => $aData)\n\t\t{\n\t\t\t$aScores[$sSep] = $aData['total'] + $aData['max'] - $aData['min'];\n\t\t}\n\t\tarsort($aScores, SORT_NUMERIC); // Sort the array, higher scores first\n\t\t$aKeys = array_keys($aScores);\n\t\t$sSeparator = $aKeys[0]; // Take the first key, the one with the best score\n\t\treturn $sSeparator;\n\t}\n\t\n\t/**\n\t * Try to predict the CSV parameters based on the input data\n\t * @param string $sCSVData The input data\n\t * @return array 'separator' => the_guessed_separator, 'qualifier' => the_guessed_text_qualifier\n\t */\n\tfunction GuessParameters($sCSVData)\n\t{\n\t\t$aData = explode(\"\\n\", $sCSVData);\n\t\t$sSeparator = GuessFromFrequency($aData, array(\"\\t\", ',', ';', '|')); // Guess the most frequent (and regular) character on each line\n\t\t$sQualifier = GuessFromFrequency($aData, array('\"', \"'\")); // Guess the most frequent (and regular) character on each line\n\t\t\n\t\treturn array('separator' => $sSeparator, 'qualifier' => $sQualifier);\n\t}\n\t\n\t/**\n\t * Display a banner for the special \"synchro\" mode\n\t * @param WebPage $oP The Page for the output\n\t * @param string $sClass The class of objects to synchronize\n\t * @param integer $iCount The number of objects to synchronize\n\t */\n\t function DisplaySynchroBanner(WebPage $oP, $sClass, $iCount)\n\t {\n\t\t $oP->AddSubBlock(AlertUIBlockFactory::MakeForInformation(MetaModel::GetClassIcon($sClass).\"&nbsp;\".Dict::Format('UI:Title:BulkSynchro_nbItem_ofClass_class', $iCount, MetaModel::GetName($sClass))));\n\t }\n\n\t/**\n\t * Add a paragraph to the body of the page\n\t *\n\t * @param string $s_html\n\t *\n\t * @return string\n\t */\n\tfunction GetDivAlert($s_html)\n\t{\n\t\treturn \"<div class=\\\"ibo-csv-import--cell-error ibo-csv-import--cell-message\\\">$s_html</div>\\n\";\n\t}\n\t/**\n\t * Process the CSV data, for real or as a simulation\n\t * @param WebPage $oPage The page used to display the wizard\n\t * @param bool $bSimulate Whether or not to simulate the data load\n\t * @return array The CSV lines in error that were rejected from the load (with the header line - if any) or null\n\t */\n\tfunction ProcessCSVData(WebPage $oPage, $bSimulate = true)\n\t{\n\t\t$sClassName = utils::ReadParam('class_name', '', false, 'class');\n\t\t// Class access right check for the import\n\t\tif (UserRights::IsActionAllowed($sClassName, UR_ACTION_MODIFY) == UR_ALLOWED_NO) {\n\t\t\tthrow new CoreException(Dict::S('UI:ActionNotAllowed'));\n\t\t}\n\n\t\t$aResult = array();\n\t\t$sCSVData = utils::ReadParam('csvdata', '', false, 'raw_data');\n\t\t$sCSVDataTruncated = utils::ReadParam('csvdata_truncated', '', false, 'raw_data');\n\t\t$sSeparator = utils::ReadParam('separator', ',', false, 'raw_data');\n\t\t$sTextQualifier = utils::ReadParam('text_qualifier', '\"', false, 'raw_data');\n\t\t$bHeaderLine = (utils::ReadParam('header_line', '0') == 1);\n\t\t$iSkippedLines = 0;\n\t\tif (utils::ReadParam('box_skiplines', '0') == 1) {\n\t\t\t$iSkippedLines = utils::ReadParam('nb_skipped_lines', '0');\n\t\t}\n\t\t$aFieldsMapping = utils::ReadParam('field', array(), false, 'raw_data');\n\t\t$aSearchFields = utils::ReadParam('search_field', array(), false, 'field_name');\n\t\t$iCurrentStep = $bSimulate ? 4 : 5;\n\t\t$bAdvanced = utils::ReadParam('advanced', 0);\n\t\t$sEncoding = utils::ReadParam('encoding', 'UTF-8');\n\t\t$sSynchroScope = utils::ReadParam('synchro_scope', '', false, 'raw_data');\n\t\t$sDateTimeFormat = utils::ReadParam('date_time_format', 'default');\n\t\t$sCustomDateTimeFormat = utils::ReadParam('custom_date_time_format', (string)AttributeDateTime::GetFormat(), false, 'raw_data');\n\t\t\n\t\t$sChosenDateFormat = ($sDateTimeFormat == 'default') ? (string)AttributeDateTime::GetFormat() : $sCustomDateTimeFormat;\n\t\t\n\t\tif (!empty($sSynchroScope))\n\t\t{\n\t\t\t$oSearch = DBObjectSearch::FromOQL($sSynchroScope);\n\t\t\t$sClassName = $oSearch->GetClass(); // If a synchronization scope is set, then the class is fixed !\n\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t$iCount = $oSet->Count();\n\t\t\tDisplaySynchroBanner($oPage, $sClassName, $iCount);\n\t\t\t$aSynchroUpdate = utils::ReadParam('synchro_update', array());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sSynchroScope  = '';\n\t\t\t$aSynchroUpdate = null;\n\t\t}\n\t\t\t\t\n\t\t// Parse the data set\n\t\t$oCSVParser = new CSVParser($sCSVData, $sSeparator, $sTextQualifier, MetaModel::GetConfig()->Get('max_execution_time_per_loop'));\n\t\t$aData = $oCSVParser->ToArray($iSkippedLines);\n\t\t$iRealSkippedLines = $iSkippedLines;\n\t\tif ($bHeaderLine)\n\t\t{\n\t\t\t$aResult[] = $sTextQualifier.implode($sTextQualifier.$sSeparator.$sTextQualifier, array_shift($aData)).$sTextQualifier; // Remove the first line and store it in case of error\n\t\t\t$iRealSkippedLines++;\n\t\t}\n\t\n\t\t// Format for the line numbers\n\t\t$sMaxLen = (strlen(''.count($aData)) < 3) ? 3 : strlen(''.count($aData)); // Pad line numbers to the appropriate number of chars, but at least 3\n\t\n\t\t// Compute the list of search/reconciliation criteria\n\t\t$aSearchKeys = array();\n\t\tforeach($aSearchFields as $index => $sDummy)\n\t\t{\n\t\t\t$sSearchField = $aFieldsMapping[$index];\n\t\t\t$aMatches = array();\n\t\t\tif (preg_match('/(.+)->(.+)/', $sSearchField, $aMatches) > 0)\n\t\t\t{\n\t\t\t\t$sSearchField = $aMatches[1];\n\t\t\t\t$aSearchKeys[$aMatches[1]] = '';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$aSearchKeys[$sSearchField] = '';\t\t\t\n\t\t\t}\n\t\t\tif (!MetaModel::IsValidFilterCode($sClassName, $sSearchField))\n\t\t\t{\n\t\t\t\t// Remove invalid or unmapped search fields\n\t\t\t\t$aSearchFields[$index] = null;\n\t\t\t\tunset($aSearchKeys[$sSearchField]);\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compute the list of fields and external keys to process\n\t\t$aExtKeys = array();\n\t\t$aAttributes = array();\n\t\t$aExternalKeysByColumn = array();\n\t\tforeach($aFieldsMapping as $iNumber => $sAttCode)\n\t\t{\n\t\t\t$iIndex = $iNumber-1;\n\t\t\tif (!empty($sAttCode) && ($sAttCode != ':none:') && ($sAttCode != 'finalclass'))\n\t\t\t{\n\t\t\t\tif (preg_match('/(.+)->(.+)/', $sAttCode, $aMatches) > 0)\n\t\t\t\t{\n\t\t\t\t\t$sAttribute = $aMatches[1];\n\t\t\t\t\t$sField = $aMatches[2];\n\t\t\t\t\t$aExtKeys[$sAttribute][$sField] = $iIndex;\n\t\t\t\t\t$aExternalKeysByColumn[$iIndex] = $sAttribute;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ($sAttCode == 'id')\n\t\t\t\t\t{\n\t\t\t\t\t\t\t$aAttributes['id'] = $iIndex;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$oAttDef = MetaModel::GetAttributeDef($sClassName, $sAttCode);\n\t\t\t\t\t\tif ($oAttDef->IsExternalKey())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aExtKeys[$sAttCode]['id'] = $iIndex;\n\t\t\t\t\t\t\t$aExternalKeysByColumn[$iIndex] = $sAttCode;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$aAttributes[$sAttCode] = $iIndex;\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\t$oMyChange = null;\n\t\tif (!$bSimulate)\n\t\t{\n\t\t\t// We're doing it for real, let's create a change\n\t\t\t$sUserString = CMDBChange::GetCurrentUserName().' (CSV)';\n\t\t\tCMDBObject::SetTrackInfo($sUserString);\n\t\t\tCMDBObject::SetTrackOrigin(CMDBChangeOrigin::CSV_INTERACTIVE);\n\t\t\t$oMyChange = CMDBObject::GetCurrentChange();\n\t\t}\n\t\tCMDBObject::SetTrackOrigin('csv-interactive');\n\t\n\t\t$oBulk = new BulkChange(\n\t\t\t$sClassName,\n\t\t\t$aData,\n\t\t\t$aAttributes,\n\t\t\t$aExtKeys,\n\t\t\tarray_keys($aSearchKeys),\n\t\t\tempty($sSynchroScope) ? null : $sSynchroScope,\n\t\t\t$aSynchroUpdate,\n\t\t\t$sChosenDateFormat, // date format\n\t\t\ttrue // localize\t\t\n\t\t);\n\t\t$oBulk->SetReportHtml();\n\n\t\t$oPage->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata_truncated\", htmlentities($sCSVDataTruncated, ENT_QUOTES, 'UTF-8'), \"csvdata_truncated\"));\n\t\t$aRes = $oBulk->Process($oMyChange);\n\n\t\t$aColumns = [];\n\t\t$aColumns [\"line\"] = [\"label\" => \"Line\"];\n\t\t$aColumns [\"status\"] = [\"label\" => \"Status\"];\n\t\t$aColumns [\"object\"] = [\"label\" => \"Object\"];\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\tif (!empty($sAttCode) && ($sAttCode != ':none:') && ($sAttCode != 'finalclass')) {\n\t\t\t\t$aColumns[$sClassName.'/'.$sAttCode] = [\"label\" => MetaModel::GetLabel($sClassName, $sAttCode)];\n\t\t\t}\n\t\t}\n\t\t$aColumns[\"message\"] = [\"label\" => \"Message\"];\n\n\t\t$iErrors = 0;\n\t\t$iCreated = 0;\n\t\t$iModified = 0;\n\t\t$iUnchanged = 0;\n\n\t\t$aTableData = [];\n\n\t\tforeach ($aRes as $iLine => $aResRow) {\n\t\t\t$aTableRow = [];\n\t\t\t$oStatus = $aResRow['__STATUS__'];\n\t\t\t$sUrl = '';\n\t\t\t$sMessage = '';\n\t\t\t$sCSSRowClass = '';\n\t\t\t$sCSSMessageClass = 'cell_ok';\n\t\t\tswitch (get_class($oStatus)) {\n\t\t\t\tcase 'RowStatus_NoChange':\n\t\t\t\t\t$iUnchanged++;\n\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t$oObj = MetaModel::GetObject($sFinalClass, $aResRow['id']->GetPureValue());\n\t\t\t\t\t$sUrl = $oObj->GetHyperlink();\n\t\t\t\t\t$sStatus = '<img src=\"../images/unchanged.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Unchanged').'\">';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-unchanged';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RowStatus_Modify':\n\t\t\t\t\t$iModified++;\n\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t$oObj = MetaModel::GetObject($sFinalClass, $aResRow['id']->GetPureValue());\n\t\t\t\t\t$sUrl = $oObj->GetHyperlink();\n\t\t\t\t\t$sStatus = '<img src=\"../images/modified.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Modified').'\">';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-modified';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RowStatus_Disappeared':\n\t\t\t\t\t$iModified++;\n\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t$oObj = MetaModel::GetObject($sFinalClass, $aResRow['id']->GetPureValue());\n\t\t\t\t\t$sUrl = $oObj->GetHyperlink();\n\t\t\t\t\t$sStatus = '<img src=\"../images/delete.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Missing').'\">';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-modified';\n\t\t\t\t\tif ($bSimulate) {\n\t\t\t\t\t\t$sMessage = Dict::S('UI:CSVReport-Object-MissingToUpdate');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$sMessage = Dict::S('UI:CSVReport-Object-MissingUpdated');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RowStatus_NewObj':\n\t\t\t\t\t$iCreated++;\n\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t$sStatus = '<img src=\"../images/added.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Created').'\">';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-added';\n\t\t\t\t\tif ($bSimulate) {\n\t\t\t\t\t\t$sMessage = Dict::S('UI:CSVReport-Object-ToCreate');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$sFinalClass = $aResRow['finalclass'];\n\t\t\t\t\t\t$oObj = MetaModel::GetObject($sFinalClass, $aResRow['id']->GetPureValue());\n\t\t\t\t\t\t$sUrl = $oObj->GetHyperlink();\n\t\t\t\t\t\t$sMessage = Dict::S('UI:CSVReport-Object-Created');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RowStatus_Issue':\n\t\t\t\t\t$iErrors++;\n\t\t\t\t\t$sMessage .= GetDivAlert($oStatus->GetDescription());\n\t\t\t\t\t$sStatus = '<img src=\"../images/error.png\" title=\"'.Dict::S('UI:CSVReport-Icon-Error').'\">';//translate\n\t\t\t\t\t$sCSSMessageClass = 'ibo-csv-import--cell-error';\n\t\t\t\t\t$sCSSRowClass = 'ibo-csv-import--row-error';\n\t\t\t\t\tif (array_key_exists($iLine, $aData)) {\n\t\t\t\t\t\t$aRow = $aData[$iLine];\n\t\t\t\t\t\t$aResult[] = $sTextQualifier.implode($sTextQualifier.$sSeparator.$sTextQualifier, $aRow).$sTextQualifier; // Remove the first line and store it in case of error\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$aTableRow['@class'] = $sCSSRowClass;\n\t\t\t$aTableRow['line'] = sprintf(\"%0{$sMaxLen}d\", 1 + $iLine + $iRealSkippedLines);\n\t\t\t$aTableRow['status'] = $sStatus;\n\t\t\t$aTableRow['object'] = $sUrl;\n\n\t\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t\tif (!empty($sAttCode) && ($sAttCode != ':none:') && ($sAttCode != 'finalclass')) {\n\t\t\t\t\t$oCellStatus = $aResRow[$iNumber - 1];\n\t\t\t\t\t$sCellMessage = '';\n\t\t\t\t\tif (isset($aExternalKeysByColumn[$iNumber - 1])) {\n\t\t\t\t\t\t$sExtKeyName = $aExternalKeysByColumn[$iNumber - 1];\n\t\t\t\t\t\t$oExtKeyCellStatus = $aResRow[$sExtKeyName];\n\t\t\t\t\t\tswitch (get_class($oExtKeyCellStatus)) {\n\t\t\t\t\t\t\tcase 'CellStatus_Issue':\n\t\t\t\t\t\t\tcase 'CellStatus_SearchIssue':\n\t\t\t\t\t\t\tcase 'CellStatus_NullIssue':\n\t\t\t\t\t\t\tcase 'CellStatus_Ambiguous':\n\t\t\t\t\t\t\t\t$sCellMessage .= GetDivAlert($oExtKeyCellStatus->GetDescription());\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// Do nothing\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$sHtmlValue = $oCellStatus->GetDisplayableValue();\n\t\t\t\t\tswitch (get_class($oCellStatus)) {\n\t\t\t\t\t\tcase 'CellStatus_Issue':\n\t\t\t\t\t\t\t$sCellMessage .= GetDivAlert($oCellStatus->GetDescription());\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = '<div class=\"ibo-csv-import--cell-error\">'.Dict::Format('UI:CSVReport-Object-Error', $sHtmlValue).$sCellMessage.'</div>';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CellStatus_SearchIssue':\n\t\t\t\t\t\t\t$sCellMessage .= GetDivAlert($oCellStatus->GetDescription());\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = '<div class=\"ibo-csv-import--cell-error\">ERROR: '.$sHtmlValue.$sCellMessage.'</div>';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CellStatus_Ambiguous':\n\t\t\t\t\t\t\t$sCellMessage .= GetDivAlert($oCellStatus->GetDescription());\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = '<div class=\"ibo-csv-import--cell-error\" >'.Dict::Format('UI:CSVReport-Object-Ambiguous', $sHtmlValue).$sCellMessage.'</div>';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CellStatus_Modify':\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = '<div class=\"ibo-csv-import--cell-modified\"><b>'.$sHtmlValue.'</b></div>';\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$aTableRow[$sClassName.'/'.$sAttCode] = $sHtmlValue.$sCellMessage;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$aTableRow['message'] = \"<div class=\\\"$sCSSMessageClass\\\">$sMessage</div>\";\n\n\t\t\t$aTableData[] = $aTableRow;\n\t\t}\n\n\t\t$iUnchanged = count($aRes) - $iErrors - $iModified - $iCreated;\n\t\t$oContainer = UIContentBlockUIBlockFactory::MakeStandard();\n\t\t$oContainer->AddCSSClass(\"wizContainer\");\n\t\t$oPage->AddSubBlock($oContainer);\n\n\t\t$oForm = FormUIBlockFactory::MakeStandard('wizForm');\n\t\t$oContainer->AddSubBlock($oForm);\n\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", ($iCurrentStep + 1)));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"separator\", htmlentities($sSeparator, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"text_qualifier\", htmlentities($sTextQualifier, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"header_line\", $bHeaderLine));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"nb_skipped_lines\", utils::ReadParam('nb_skipped_lines', '0')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"box_skiplines\", utils::ReadParam('box_skiplines', '0')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata_truncated\", htmlentities($sCSVDataTruncated, ENT_QUOTES, 'UTF-8'), \"csvdata_truncated\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata\", htmlentities($sCSVData, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"encoding\", $sEncoding));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"class_name\", $sClassName));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"advanced\", $bAdvanced));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"date_time_format\", htmlentities($sDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"custom_date_time_format\", htmlentities($sCustomDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update[$sKey]\", $value));\n\t\t\t}\n\t\t}\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"field[$iNumber]\", $sAttCode));\n\t\t}\n\t\tforeach ($aSearchFields as $index => $sDummy) {\n\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"search_field[$index]\", \"1\"));\n\t\t}\n\t\t$aDisplayFilters = array();\n\t\tif ($bSimulate) {\n\t\t\t$aDisplayFilters['unchanged'] = Dict::S('UI:CSVImport:ObjectsWillStayUnchanged');\n\t\t\t$aDisplayFilters['modified'] = Dict::S('UI:CSVImport:ObjectsWillBeModified');\n\t\t\t$aDisplayFilters['added'] = Dict::S('UI:CSVImport:ObjectsWillBeAdded');\n\t\t\t$aDisplayFilters['errors'] = Dict::S('UI:CSVImport:ObjectsWillHaveErrors');\n\t\t} else {\n\t\t\t$aDisplayFilters['unchanged'] = Dict::S('UI:CSVImport:ObjectsRemainedUnchanged');\n\t\t\t$aDisplayFilters['modified'] = Dict::S('UI:CSVImport:ObjectsWereModified');\n\t\t\t$aDisplayFilters['added'] = Dict::S('UI:CSVImport:ObjectsWereAdded');\n\t\t\t$aDisplayFilters['errors'] = Dict::S('UI:CSVImport:ObjectsHadErrors');\n\t\t}\n\t\t$oMulticolumn = MultiColumnUIBlockFactory::MakeStandard();\n\t\t$oMulticolumn->AddCSSClass('ml-1');\n\t\t$oForm->AddSubBlock($oMulticolumn);\n\n\t\t$oCheckBoxUnchanged = InputUIBlockFactory::MakeForInputWithLabel('<img src=\"../images/unchanged.png\">&nbsp;'.sprintf($aDisplayFilters['unchanged'], $iUnchanged), '', \"1\", \"show_unchanged\", \"checkbox\");\n\t\t$oCheckBoxUnchanged->GetInput()->SetIsChecked(true);\n\t\t$oCheckBoxUnchanged->SetBeforeInput(false);\n\t\t$oCheckBoxUnchanged->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oCheckBoxUnchanged));\n\t\t$oPage->add_ready_script(\"$('#show_unchanged').on('click', function(){ToggleRows('ibo-csv-import--row-unchanged')})\");\n\n\t\t$oCheckBoxUnchanged = InputUIBlockFactory::MakeForInputWithLabel('<img src=\"../images/modified.png\">&nbsp;'.sprintf($aDisplayFilters['modified'], $iModified), '', \"1\", \"show_modified\", \"checkbox\");\n\t\t$oCheckBoxUnchanged->GetInput()->SetIsChecked(true);\n\t\t$oCheckBoxUnchanged->SetBeforeInput(false);\n\t\t$oCheckBoxUnchanged->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oCheckBoxUnchanged));\n\t\t$oPage->add_ready_script(\"$('#show_modified').on('click', function(){ToggleRows('ibo-csv-import--row-modified')})\");\n\n\t\t$oCheckBoxUnchanged = InputUIBlockFactory::MakeForInputWithLabel('<img src=\"../images/added.png\">&nbsp;'.sprintf($aDisplayFilters['added'], $iCreated), '', \"1\", \"show_created\", \"checkbox\");\n\t\t$oCheckBoxUnchanged->GetInput()->SetIsChecked(true);\n\t\t$oCheckBoxUnchanged->SetBeforeInput(false);\n\t\t$oCheckBoxUnchanged->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oCheckBoxUnchanged));\n\t\t$oPage->add_ready_script(\"$('#show_created').on('click', function(){ToggleRows('ibo-csv-import--row-added')})\");\n\n\t\t$oCheckBoxUnchanged = InputUIBlockFactory::MakeForInputWithLabel('<img src=\"../images/error.png\">&nbsp;'.sprintf($aDisplayFilters['errors'], $iErrors), '', \"1\", \"show_errors\", \"checkbox\");\n\t\t$oCheckBoxUnchanged->GetInput()->SetIsChecked(true);\n\t\t$oCheckBoxUnchanged->SetBeforeInput(false);\n\t\t$oCheckBoxUnchanged->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oCheckBoxUnchanged));\n\t\t$oPage->add_ready_script(\"$('#show_errors').on('click', function(){ToggleRows('ibo-csv-import--row-error')})\");\n\n\t\t$oPanel = PanelUIBlockFactory::MakeNeutral('');\n\t\t$oPanel->AddCSSClasses(['ibo-datatable-panel', 'mb-5']);\n\t\t$oForm->AddSubBlock($oPanel);\n\n\t\t$oTable = DataTableUIBlockFactory::MakeForForm(\"csvImport\", $aColumns, $aTableData);\n\t\t$oTable->AddOption('bFullscreen', true);\n\t\t$oPanel->AddSubBlock($oTable);\n\n\n\t\tif ($bSimulate) {\n\t\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForCancel(Dict::S('UI:Button:Restart'))->SetOnClickJsCode(\"CSVRestart()\"));\n\t\t}\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Back'))->SetOnClickJsCode(\"CSVGoBack()\"));\n\n\t\t$bShouldConfirm = false;\n\t\tif ($bSimulate) {\n\t\t\t// if there are *too many* changes, we should ask the user for a confirmation\n\t\t\tif (count($aRes) >= MetaModel::GetConfig()->Get('csv_import_min_object_confirmation')) {\n\t\t\t\t$fErrorsPercentage = (100.0 * $iErrors) / count($aRes);\n\t\t\t\tif ($fErrorsPercentage >= MetaModel::GetConfig()->Get('csv_import_errors_percentage')) {\n\t\t\t\t\t$sMessage = Dict::Format('UI:CSVReport-Stats-Errors', $fErrorsPercentage);\n\t\t\t\t\t$bShouldConfirm = true;\n\t\t\t\t}\n\t\t\t\t$fCreatedPercentage = (100.0 * $iCreated) / count($aRes);\n\t\t\t\tif ($fCreatedPercentage >= MetaModel::GetConfig()->Get('csv_import_creations_percentage')) {\n\t\t\t\t\t$sMessage = Dict::Format('UI:CSVReport-Stats-Created', $fCreatedPercentage);\n\t\t\t\t\t$bShouldConfirm = true;\n\t\t\t\t}\n\t\t\t\t$fModifiedPercentage = (100.0 * $iModified) / count($aRes);\n\t\t\t\tif ($fModifiedPercentage >= MetaModel::GetConfig()->Get('csv_import_modifications_percentage')) {\n\t\t\t\t\t$sMessage = Dict::Format('UI:CSVReport-Stats-Modified', $fModifiedPercentage);\n\t\t\t\t\t$bShouldConfirm = true;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t$sConfirm = $bShouldConfirm ? 'true' : 'false';\n\t\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:DoImport'))->SetOnClickJsCode(\"return DoSubmit({$sConfirm})\"));\n\n\t\t} else {\n\t\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Done'), \"\", \"\", true));\n\t\t}\n\n\t\tif ($bShouldConfirm) {\n\t\t\t$sYesButton = Dict::S('UI:Button:Ok');\n\t\t\t$sNoButton = Dict::S('UI:Button:Cancel');\n\t\t\t$oDlg = UIContentBlockUIBlockFactory::MakeStandard(\"dlg_confirmation\")->AddCSSClass('ibo-hidden');\n\t\t\t$oPage->AddSubBlock($oDlg);\n\t\t\t$oDlg->AddSubBlock(new Html($sMessage));\n\t\t\t$oDlg->AddSubBlock(new Html(htmlentities(Dict::S('UI:CSVImportConfirmMessage'), ENT_QUOTES, 'UTF-8')));\n\n\t\t\t$oDlgConfirm = UIContentBlockUIBlockFactory::MakeStandard(\"confirmation_chart\")->AddCSSClass('ibo-hidden');\n\t\t\t$oDlg->AddSubBlock($oDlgConfirm);\n\n\t\t\t$sDlgTitle = Dict::S('UI:CSVImportConfirmTitle');\n\n\t\t\t$oPage->add_ready_script(\n\t\t\t\t<<<EOF\n\t$('#dlg_confirmation').dialog( \n\t\t{\n\t\t\theight: 'auto',\n\t\t\twidth: 500,\n\t\t\tmodal:true, \n\t\t\tautoOpen: false, \n\t\t\ttitle:'$sDlgTitle',\n\t\t\tbuttons:\n\t\t\t{\n\t\t\t\t'$sYesButton': RunImport,\n\t\t\t\t'$sNoButton': CancelImport \n\t\t\t} \n\t\t});\nEOF\n\t\t\t);\n\t\t}\n\t\t\n\t\t$sErrors = json_encode(Dict::Format('UI:CSVImportError_items', $iErrors));\n\t\t$sCreated = json_encode(Dict::Format('UI:CSVImportCreated_items', $iCreated));\n\t\t$sModified = json_encode(Dict::Format('UI:CSVImportModified_items', $iModified));\n\t\t$sUnchanged = json_encode(Dict::Format('UI:CSVImportUnchanged_items', $iUnchanged));\n\n\t\t// Add graphs dependencies\n\t\tWebResourcesHelper::EnableC3JSToWebPage($oPage);\n\n\t\t$oPage->add_script(\t\t\n<<< EOF\nfunction CSVGoBack()\n{\n\t$('input[name=step]').val($iCurrentStep-1);\n\t$('#wizForm').submit();\n\t\n}\n\nfunction CSVRestart()\n{\n\t$('input[name=step]').val(1);\n\t$('#wizForm').submit();\n\t\n}\n\nfunction ToggleRows(sCSSClass)\n{\n\t$('.'+sCSSClass).toggle();\n}\n\nfunction DoSubmit(bConfirm)\n{\n\tif (bConfirm) //Ask for a confirmation\n\t{\n\t\t$('#dlg_confirmation').dialog('open');\n\t\t\t\t\n\t\tvar chart = c3.generate({\n\t\t    bindto: '#confirmation_chart',\n\t\t    data: {\n\t\t    \tcolumns:  [\n\t\t\t\t\t['errors', $iErrors],\n\t\t\t\t\t['created', $iCreated],\n\t\t\t\t\t['modified', $iModified],\n\t\t\t\t\t['unchanged', $iUnchanged]\n\t\t\t\t],\n\t\t\t\tcolors: {\n\t\t\t\t\terrors: '#FF6666',\n\t\t\t\t\tcreated: '#66FF66',\n\t\t\t\t\tmodified: '#6666FF',\n\t\t\t\t\tunchanged: '#666666'\n\t\t\t\t},\n\t\t\t\tnames: {\n\t\t\t\t\terrors: $sErrors,\n\t\t\t\t\tcreated: $sCreated,\n\t\t\t\t\tmodified: $sModified,\n\t\t\t\t\tunchanged: $sUnchanged\n\t\t\t\t},\n\t\t      \ttype: 'donut'\n\t\t    },\n\t\t    legend: {\n\t\t      show: true,\n\t\t    }\n\t\t});\n\t}\n\telse\n\t{\n\t\t// Submit the form\n\t\t$('#wizForm').block();\n\t\t$('#wizForm').submit();\n\t}\n\treturn false;\n}\n\nfunction CancelImport()\n{\n\t$('#dlg_confirmation').dialog('close');\n}\n\nfunction RunImport()\n{\n\t$('#dlg_confirmation').dialog('close');\n\t// Submit the form\n\t$('#wizForm').block();\n\t$('#wizForm').submit();\n}\nEOF\n\t);\n\t\tif ($iErrors > 0)\n\t\t{\n\t\t\treturn $aResult;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\n\t}\n\t/**\n\t * Perform the actual load of the CSV data and display the results\n\t * @param WebPage $oPage The web page to display the wizard\n\t * @return void\n\t */\n\tfunction LoadData(WebPage $oPage)\n\t{\n\t\t$oTitle = TitleUIBlockFactory::MakeForPage(Dict::S('UI:Title:CSVImportStep5'));\n\t\t$oPage->AddSubBlock($oTitle);\n\n\t\t$aResult = ProcessCSVData($oPage, false /* simulate = false */);\n\t\tif (is_array($aResult)) {\n\t\t\t$oCollapsibleSection = CollapsibleSectionUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:LinesNotImported'));\n\t\t\t$oPage->AddSubBlock($oCollapsibleSection);\n\n\t\t\t$oField = FieldUIBlockFactory::MakeLarge(Dict::S('UI:CSVImport:LinesNotImported+'));\n\t\t\t$oCollapsibleSection->AddSubBlock($oField);\n\n\t\t\t$oText = new TextArea(\"\", htmlentities(implode(\"\\n\", $aResult), ENT_QUOTES, 'UTF-8'), \"\", 150, 50);\n\t\t\t$oField->AddSubBlock($oText);\n\t\t}\n\t}\n\t\n\t/**\n\t * Simulate the load of the CSV data and display the results\n\t * @param WebPage $oPage The web page to display the wizard\n\t * @return void\n\t */\n\tfunction Preview(WebPage $oPage)\n\t{\n\t\t$oPanel = TitleUIBlockFactory::MakeForPage(Dict::S('UI:Title:CSVImportStep4'));\n\t\t$oPage->AddSubBlock($oPanel);\n\t\tProcessCSVData($oPage, true /* simulate */);\n\t}\n\t\n\t/**\n\t * Select the mapping between the CSV column and the fields of the objects\n\t * @param WebPage $oPage The web page to display the wizard\n\t * @return void\n\t */\n\tfunction SelectMapping(WebPage $oPage)\n\t{\n\t\t$sCSVData = utils::ReadParam('csvdata', '', false, 'raw_data');\n\t\t$sCSVDataTruncated = utils::ReadParam('csvdata_truncated', '', false, 'raw_data');\n\t\t$sSeparator = utils::ReadParam('separator', ',', false, 'raw_data');\n\t\tif ($sSeparator == 'tab') $sSeparator = \"\\t\";\n\t\tif ($sSeparator == 'other')\n\t\t{\n\t\t\t$sSeparator = utils::ReadParam('other_separator', ',', false, 'raw_data');\n\t\t}\n\t\t$sTextQualifier = utils::ReadParam('text_qualifier', '\"', false, 'raw_data');\n\t\tif ($sTextQualifier == 'other')\n\t\t{\n\t\t\t$sTextQualifier = utils::ReadParam('other_qualifier', '\"', false, 'raw_data');\n\t\t}\n\t\t$bHeaderLine = (utils::ReadParam('header_line', '0') == 1);\n\t\t$sClassName = utils::ReadParam('class_name', '', false, 'class');\n\t\t$bAdvanced = utils::ReadParam('advanced', 0);\n\t\t$sEncoding = utils::ReadParam('encoding', 'UTF-8');\n\t\t$sDateTimeFormat = utils::ReadParam('date_time_format', 'default');\n\t\t$sCustomDateTimeFormat = utils::ReadParam('custom_date_time_format', (string)AttributeDateTime::GetFormat(), false, 'raw_data');\n\n\t\t$sSynchroScope = utils::ReadParam('synchro_scope', '', false, 'raw_data');\n\t\tif (!empty($sSynchroScope)) {\n\t\t\t$oSearch = DBObjectSearch::FromOQL($sSynchroScope);\n\t\t\t$sClassName = $oSearch->GetClass(); // If a synchronization scope is set, then the class is fixed !\n\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t$iCount = $oSet->Count();\n\t\t\tDisplaySynchroBanner($oPage, $sClassName, $iCount);\n\t\t\t$oClassesSelect = SelectUIBlockFactory::MakeForSelect(\"class_name\", \"select_class_name\");\n\t\t\t$oDefaultSelect = SelectOptionUIBlockFactory::MakeForSelectOption(\"$sClassName\", MetaModel::GetName($sClassName), true);\n\t\t\t$oClassesSelect->AddSubBlock($oDefaultSelect);\n\t\t\t$aSynchroUpdate = utils::ReadParam('synchro_update', array());\n\t\t} else {\n\t\t\t$oClassesSelect = GetClassesSelectUIBlock('class_name', $sClassName, UR_ACTION_BULK_MODIFY);\n\t\t}\n\t\t$oPanel = TitleUIBlockFactory::MakeForPage(Dict::S('UI:Title:CSVImportStep3'));\n\t\t$oPage->AddSubBlock($oPanel);\n\n\t\t$oContainer = UIContentBlockUIBlockFactory::MakeStandard();\n\t\t$oContainer->AddCSSClass(\"wizContainer\");\n\t\t$oPage->AddSubBlock($oContainer);\n\n\t\t$oForm = FormUIBlockFactory::MakeStandard('wizForm');\n\t\t$oForm->SetOnSubmitJsCode(\"return CheckValues()\");\n\t\t$oContainer->AddSubBlock($oForm);\n\n\t\t$oMulticolumn = MultiColumnUIBlockFactory::MakeStandard();\n\t\t$oForm->AddSubBlock($oMulticolumn);\n\n\t\t$oFieldSelectClass = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:SelectClass'), $oClassesSelect);\n\t\t$oFieldSelectClass->AddCSSClass('ibo-field-large');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSelectClass));\n\n\t\t$oAdvancedMode = InputUIBlockFactory::MakeForInputWithLabel(Dict::S('UI:CSVImport:AdvancedMode'), \"advanced\", 1, \"advanced\", 'checkbox');\n\t\t$oAdvancedMode->GetInput()->SetIsChecked(($bAdvanced == 1));\n\t\t$oAdvancedMode->SetBeforeInput(false);\n\t\t$oAdvancedMode->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oAdvancedMode));\n\n\t\t$oDivAdvancedHelp = UIContentBlockUIBlockFactory::MakeStandard(\"advanced_help\")->AddCSSClass('ibo-is-hidden');\n\t\t$oForm->AddSubBlock($oDivAdvancedHelp);\n\n\t\t$oDivMapping = UIContentBlockUIBlockFactory::MakeStandard(\"mapping\")->AddCSSClass('mt-5');\n\t\t$oMessage = AlertUIBlockFactory::MakeForInformation(Dict::S('UI:CSVImport:SelectAClassFirst'))->SetIsClosable(false)->SetIsCollapsible(false);\n\t\t$oDivMapping->AddSubBlock($oMessage);\n\t\t$oForm->AddSubBlock($oDivMapping);\n\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", \"4\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"separator\", htmlentities($sSeparator, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"text_qualifier\", htmlentities($sTextQualifier, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"header_line\", $bHeaderLine));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"nb_skipped_lines\", utils::ReadParam('nb_skipped_lines', '0')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"box_skiplines\", utils::ReadParam('box_skiplines', '0')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata_truncated\", htmlentities($sCSVDataTruncated, ENT_QUOTES, 'UTF-8'), \"csvdata_truncated\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata\", htmlentities($sCSVData, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"encoding\", $sEncoding));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"date_time_format\", htmlentities($sDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"custom_date_time_format\", htmlentities($sCustomDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update[$sKey]\", $value));\n\t\t\t}\n\t\t}\n\t\t$oForm->AddSubBlock(new Html('<br>'));\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForCancel(Dict::S('UI:Button:Restart'))->SetOnClickJsCode(\"CSVRestart()\"));\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Back'))->SetOnClickJsCode(\"CSVGoBack()\"));\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:SimulateImport'), '', '', true));\n\n\t\t$sAlertIncompleteMapping = addslashes(Dict::S('UI:CSVImport:AlertIncompleteMapping'));\n\t\t$sAlertMultipleMapping = addslashes(Dict::S('UI:CSVImport:AlertMultipleMapping'));\n\t\t$sAlertNoSearchCriteria = addslashes(Dict::S('UI:CSVImport:AlertNoSearchCriteria'));\n\n\t\t$oPage->add_ready_script(\n\t\t\t<<<EOF\n\t$('#select_class_name').on('change', function(ev) { DoMapping(); } );\n\t$('#advanced').on('click', function(ev) { DoMapping(); } );\nEOF\n\t\t);\n\t\tif ($sClassName != '')\n\t\t{\n\t\t\t$aFieldsMapping = utils::ReadParam('field', array(), false, 'raw_data');\n\t\t\t$aSearchFields = utils::ReadParam('search_field', array(), false, 'field_name');\n\t\t\t$sFieldsMapping = addslashes(json_encode($aFieldsMapping));\n\t\t\t$sSearchFields = addslashes(json_encode($aSearchFields));\n\t\t\n\t\t\t$oPage->add_ready_script(\"DoMapping('$sFieldsMapping', '$sSearchFields');\"); // There is already a class selected, run the mapping\n\t\t}\n\t\n\t\t$oPage->add_script(\n<<<EOF\n\tvar aDefaultKeys = new Array();\n\tvar aReadOnlyKeys = new Array();\n\t\n\tfunction CSVGoBack()\n\t{\n\t\t$('input[name=step]').val(2);\n\t\t$('#wizForm').removeAttr('onsubmit'); // No need to perform validation checks when going back\n\t\t$('#wizForm').submit();\n\t\t\n\t}\n\n\tfunction CSVRestart()\n\t{\n\t\t$('input[name=step]').val(1);\n\t\t$('#wizForm').removeAttr('onsubmit'); // No need to perform validation checks when going back\n\t\t$('#wizForm').submit();\n\t\t\n\t}\n\n\tvar ajax_request = null;\n\t\n\tfunction DoMapping(sInitFieldsMapping, sInitSearchFields)\n\t{\n\t\tvar class_name = $('select[name=class_name]').val();\n\t\tvar advanced = $('input[name=advanced]:checked').val();\n\t\tif (advanced != 1)\n\t\t{\n\t\t\t$('#advanced_help').hide();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$('#advanced_help').show();\n\t\t}\n\t\tif (class_name != '')\n\t\t{\n\t\t\tvar separator = $('input[name=separator]').val();\n\t\t\tvar text_qualifier = $('input[name=text_qualifier]').val();\n\t\t\tvar header_line = $('input[name=header_line]').val();\n\t\t\tvar do_skip_lines = 0;\n\t\t\tif ($('input[name=box_skiplines]').val() == '1')\n\t\t\t{\n\t\t\t\tdo_skip_lines = $('input[name=nb_skipped_lines]').val();\n\t\t\t}\n\t\t\tvar csv_data = $('input[name=csvdata]').val();\n\t\t\tvar encoding = $('input[name=encoding]').val();\n\t\t\tif (advanced != 1)\n\t\t\t{\n\t\t\t\tadvanced = 0;\n\t\t\t}\n\t\t\t$('#mapping').block();\n\t\n\t\t\t// Make sure that we cancel any pending request before issuing another\n\t\t\t// since responses may arrive in arbitrary order\n\t\t\tif (ajax_request != null)\n\t\t\t{\n\t\t\t\tajax_request.abort();\n\t\t\t\tajax_request = null;\n\t\t\t}\n\n\t\t\tvar aParams = { operation: 'display_mapping_form', enctype: 'multipart/form-data', csvdata: csv_data, separator: separator, \n\t\t\t   \t qualifier: text_qualifier, do_skip_lines: do_skip_lines, header_line: header_line, class_name: class_name,\n\t\t\t   \t advanced: advanced, encoding: encoding };\n\t\t\n\t\t\tif (sInitFieldsMapping != undefined)\n\t\t\t{\n\t\t\t\taParams.init_field_mapping = sInitFieldsMapping;\n\t\t\t\taParams.init_search_field = sInitSearchFields;\n\t\t\t}\n\n\t\t\tajax_request = $.post(GetAbsoluteUrlAppRoot()+'pages/ajax.csvimport.php',\n\t\t\t\t   aParams,\n\t\t\t\t   function(data) {\n\t\t\t\t\t $('#mapping').empty();\n\t\t\t\t\t $('#mapping').append(data);\n\t\t\t\t\t $('#mapping').unblock();\n\t\t\t\t\t}\n\t\t\t\t );\n\t\t}\n\t}\n\t\n\tfunction CheckValues()\n\t{\n\t\t// Reset the highlight in case the check has already been executed with failure\n\t\t$('select[name^=field]').each( function() {\n\t\t\t$(this).parent().css({'border': '0'});\n\t\t});\n\n\t\tbResult = true;\n\t\tbMappingOk = true;\n\t\tbMultipleMapping = false;\n\t\tbSearchOk = false;\n\t\t$('select[name^=field]').each( function() {\n\t\t\t$(this).parent().css({'border': '0'});\n\t\t\tif ($(this).val() == '')\n\t\t\t{\n\t\t\t\t$(this).parent().css({'border': '2px #D81515 solid'});\n\t\t\t\tbMappingOk = false;\n\t\t\t\tbResult = false; \n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tiOccurences = 0;\n\t\t\t\tsRefValue = $(this).val();\n\t\t\t\t$('select[name^=field]').each( function() {\n\t\t\t\t\tif ($(this).val() == sRefValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tiOccurences++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif ((iOccurences > 1) && (sRefValue != ':none:'))\n\t\t\t\t{\n\t\t\t\t\t$(this).parent().css({'border': '2px #D81515 solid'});\n\t\t\t\t\tbResult = false; \n\t\t\t\t\tbMultipleMapping = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// At least one search field must be checked\n\t\t$('input[name^=search]:checked').each( function() {\n\t\t\t\tbSearchOk = true;\n\t\t});\n\t\tif (!bMappingOk)\n\t\t{\n\t\t\talert(\"$sAlertIncompleteMapping\");\n\t\t}\n\t\tif (bMultipleMapping)\n\t\t{\n\t\t\talert(\"$sAlertMultipleMapping\");\n\t\t}\n\t\tif (!bSearchOk)\n\t\t{\n\t\t\t\tbResult = false; \n\t\t\t\talert(\"$sAlertNoSearchCriteria\");\n\t\t}\n\t\t\n\t\tif (bResult)\n\t\t{\n\t\t\t$('#mapping').block();\n\t\t\t// Re-enable all search_xxx checkboxes so that their value gets posted\n\t\t\t$('input[name^=search]').each(function() {\n\t\t\t\t$(this).prop('disabled', false);\n\t\t\t});\n\t\t}\n\t\treturn bResult;\n\t}\n\n\tfunction DoCheckMapping()\n\t{\n\t\t// Check if there is a field mapped to 'id'\n\t\t// In which case, it's the only possible search key\n\t\tvar idSelected = 0;\n\t\tvar nbSearchKeys = $('input[name^=search]:checked').length;\n\t\tvar nbMappings = $('select[name^=field]').length;\n\t\tfor(index=1; index <= nbMappings; index++)\n\t\t{\n\t\t\tvar selectedValue = $('#mapping_'+index).val();\n\t\t\t \n\t\t\tif (selectedValue == 'id')\n\t\t\t{\n\t\t\t\tidSelected = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (index=1; index <= nbMappings; index++)\n\t\t{\n\t\t\tsMappingValue = $('#mapping_'+index).val();\n\t\t\tif ((sMappingValue == '') || (sMappingValue == ':none:'))\n\t\t\t{\n\t\t\t\t// Non-mapped field, uncheck and disabled\n\t\t\t\t$('#search_'+index).prop('checked', false);\n\t\t\t\t$('#search_'+index).prop('disabled', true);\n\t\t\t}\n\t\t\telse if (aReadOnlyKeys.indexOf(sMappingValue) >= 0)\n\t\t\t{\n\t\t\t\t// Read-only attribute forced to reconciliation key\n\t\t\t\t$('#search_'+index).prop('checked', true);\n\t\t\t\t$('#search_'+index).prop('disabled', true);\n\t\t\t}\n\t\t\telse if (index == idSelected)\n\t\t\t{\n\t\t\t\t// The 'id' field was mapped, it's the only possible reconciliation key\n\t\t\t\t$('#search_'+index).prop('checked', true);\n\t\t\t\t$('#search_'+index).prop('disabled', true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (idSelected > 0)\n\t\t\t\t{\n\t\t\t\t\t// The 'id' field was mapped, it's the only possible reconciliation key\n\t\t\t\t\t$('#search_'+index).prop('checked', false);\n\t\t\t\t\t$('#search_'+index).prop('disabled', true);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$('#search_'+index).prop('disabled', false);\n\t\t\t\t\tif (nbSearchKeys == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// No search key was selected, select the default ones\n\t\t\t\t\t\tfor(j =0; j < aDefaultKeys.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (sMappingValue == aDefaultKeys[j])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$('#search_'+index).prop('checked', true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nEOF\n\t);\n\t}\n\t\n\t/**\n\t * Select the options of the CSV load and check for CSV parsing errors\n\t * @param WebPage $oPage The current web page\n\t * @return void\n\t */\n\tfunction SelectOptions(WebPage $oPage)\n\t{\n\t\t$sOperation = utils::ReadParam('operation', 'csv_data');\n\t\t$sCSVData = '';\n\t\tswitch($sOperation)\n\t\t{\n\t\t\tcase 'file_upload':\n\t\t\t$oDocument = utils::ReadPostedDocument('csvdata');\n\t\t\tif (!$oDocument->IsEmpty())\n\t\t\t{\n\t\t\t\t$sCSVData = $oDocument->GetData();\n\t\t\t}\n\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t$sCSVData = utils::ReadPostedParam('csvdata', '', 'raw_data');\n\t\t}\n\t\t$sEncoding = utils::ReadParam('encoding', 'UTF-8');\n\t\n\t\t// Compute a subset of the data set, now that we know the charset\n\t\tif ($sEncoding == 'UTF-8')\n\t\t{\n\t\t\t// Remove the BOM if any\n\t\t\tif (substr($sCSVData, 0, 3) == UTF8_BOM)\n\t\t\t{\n\t\t\t\t$sCSVData = substr($sCSVData, 3);\n\t\t\t}\n\t\t\t// Clean the input\n\t\t\t// Todo: warn the user if some characters are lost/substituted\n\t\t\t$sUTF8Data = iconv('UTF-8', 'UTF-8//IGNORE//TRANSLIT', $sCSVData);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sUTF8Data = iconv($sEncoding, 'UTF-8//IGNORE//TRANSLIT', $sCSVData);\n\t\t}\n\t\n\t\t$aGuesses = GuessParameters($sUTF8Data); // Try to predict the parameters, based on the input data\n\t\t\n\t\t$iSkippedLines = utils::ReadParam('nb_skipped_lines', '');\n\t\t$bBoxSkipLines = utils::ReadParam('box_skiplines', 0);\n\t\t$sTextQualifier = utils::ReadParam('text_qualifier', '', false, 'raw_data');\n\t\tif ($sTextQualifier == '') // May be set to an empty value by the previous page\n\t\t{\n\t\t\t$sTextQualifier = $aGuesses['qualifier'];\t\n\t\t}\n\t\t$sOtherTextQualifier = in_array($sTextQualifier, array('\"', \"'\")) ? '' : $sTextQualifier;\n\t\t$bHeaderLine = utils::ReadParam('header_line', 0);\n\t\t$sClassName = utils::ReadParam('class_name', '', false, 'class');\n\t\t$bAdvanced = utils::ReadParam('advanced', 0);\n\t\t$aFieldsMapping = utils::ReadParam('field', array(), false, 'raw_data');\n\t\t$aSearchFields = utils::ReadParam('search_field', array(), false, 'field_name');\n\n\t\t// Create a truncated version of the data used for the fast preview\n\t\t// Take about 20 lines of data... knowing that some lines may contain carriage returns\n\t\t$iMaxLen = strlen($sUTF8Data);\n\t\tif ($iMaxLen > 0) {\n\t\t\t$iMaxLines = 20;\n\t\t\t$iCurPos = true;\n\t\t\twhile (($iCurPos > 0) && ($iMaxLines > 0)) {\n\t\t\t\t$pos = strpos($sUTF8Data, \"\\n\", $iCurPos);\n\t\t\t\tif ($pos !== false) {\n\t\t\t\t\t$iCurPos = 1 + $pos;\n\t\t\t\t} else {\n\t\t\t\t\t$iCurPos = strlen($sUTF8Data);\n\t\t\t\t\t$iMaxLines = 1;\n\t\t\t\t}\n\t\t\t\t$iMaxLines--;\n\t\t\t}\n\t\t\t$sCSVDataTruncated = substr($sUTF8Data, 0, $iCurPos);\n\t\t} else {\n\t\t\t$sCSVDataTruncated = '';\n\t\t}\n\n\t\t$sSynchroScope = utils::ReadParam('synchro_scope', '', false, 'raw_data');\n\t\tif (!empty($sSynchroScope)) {\n\t\t\t$oSearch = DBObjectSearch::FromOQL($sSynchroScope);\n\t\t\t$sClassName = $oSearch->GetClass();\n\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t$iCount = $oSet->Count();\n\t\t\tDisplaySynchroBanner($oPage, $sClassName, $iCount);\n\t\t\t$aSynchroUpdate = utils::ReadParam('synchro_update', array());\n\t\t}\n\t\t$oPanel = TitleUIBlockFactory::MakeForPage(Dict::S('UI:Title:CSVImportStep2'));\n\t\t$oPage->AddSubBlock($oPanel);\n\n\t\t$oForm = FormUIBlockFactory::MakeStandard('wizForm');\n\t\t$oPage->AddSubBlock($oForm);\n\n\n\t\t$oContainer = PanelUIBlockFactory::MakeNeutral('');\n\t\t$oForm->AddSubBlock($oContainer);\n\n\t\t$oMulticolumn = MultiColumnUIBlockFactory::MakeStandard();\n\t\t$oMulticolumn->AddCSSClass('wizContainer');\n\t\t$oContainer->AddSubBlock($oMulticolumn);\n\n\t\t//SeparatorCharacter\n\t\t$oFieldSetSeparator = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:SeparatorCharacter'));\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSetSeparator));\n\n\t\t$aSep = array(\n\t\t\t';' => Dict::S('UI:CSVImport:SeparatorSemicolon+'),\n\t\t\t',' => Dict::S('UI:CSVImport:SeparatorComma+'),\n\t\t\t'tab' => Dict::S('UI:CSVImport:SeparatorTab+'),\n\t\t);\n\t\t$sSeparator = utils::ReadParam('separator', '', false, 'raw_data');\n\t\tif ($sSeparator == '') // May be set to an empty value by the previous page\n\t\t{\n\t\t\t$sSeparator = $aGuesses['separator'];\n\t\t}\n\t\tif ($sSeparator == \"\\t\") {\n\t\t\t$sSeparator = \"tab\";\n\t\t}\n\t\t$sOtherSeparator = in_array($sSeparator, array(',', ';', \"\\t\")) ? '' : $sSeparator;\n\t\t$aSep['other'] = Dict::S('UI:CSVImport:SeparatorOther').' <input type=\"text\" size=\"3\" maxlength=\"1\" name=\"other_separator\"  id=\"other_separator\" value=\"'.htmlentities($sOtherSeparator, ENT_QUOTES, 'UTF-8').'\" onChange=\"DoPreview()\"/>';\n\n\t\tforeach ($aSep as $sVal => $sLabel) {\n\t\t\t$oRadio = InputUIBlockFactory::MakeForInputWithLabel($sLabel, \"separator\", htmlentities($sVal, ENT_QUOTES, 'UTF-8'), $sLabel, \"radio\");\n\t\t\t$oRadio->GetInput()->SetIsChecked(($sVal == $sSeparator));\n\t\t\t$oRadio->SetBeforeInput(false);\n\t\t\t$oRadio->GetInput()->AddCSSClass('ibo-input--label-right');\n\t\t\t$oRadio->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t\t$oFieldSetSeparator->AddSubBlock($oRadio);\n\t\t\t$oFieldSetSeparator->AddSubBlock(new Html('</br>'));\n\t\t}\n\t\t$oPage->add_ready_script(\"$('[name=\\\"separator\\\"]').on('click', function() { DoPreview(); });\");\n\n\t\t//TextQualifierCharacter\n\t\t$oFieldSetTextQualifier = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:TextQualifierCharacter'));\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSetTextQualifier));\n\n\t\t$aQualifiers = array(\n\t\t\t'\"' => Dict::S('UI:CSVImport:QualifierDoubleQuote+'),\n\t\t\t'\\'' => Dict::S('UI:CSVImport:QualifierSimpleQuote+'),\n\t\t);\n\t\t$aQualifiers['other'] = Dict::S('UI:CSVImport:QualifierOther').' <input type=\"text\" size=\"3\" maxlength=\"1\" name=\"other_qualifier\" value=\"'.htmlentities($sOtherTextQualifier, ENT_QUOTES, 'UTF-8').'\" onChange=\"DoPreview()/>';\n\t\t//\t<input type=\"text\" size=\"3\" maxlength=\"1\" name=\"other_qualifier\"  value=\"'.htmlentities($sOtherTextQualifier, ENT_QUOTES, 'UTF-8').'\" onChange=\"DoPreview()\"/>\n\t\tforeach ($aQualifiers as $sVal => $sLabel) {\n\t\t\t$oRadio = InputUIBlockFactory::MakeForInputWithLabel($sLabel, \"text_qualifier\", htmlentities($sVal, ENT_QUOTES, 'UTF-8'), $sLabel, \"radio\");\n\t\t\t$oRadio->GetInput()->SetIsChecked(($sVal == $sTextQualifier));\n\t\t\t$oRadio->SetBeforeInput(false);\n\t\t\t$oRadio->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t\t$oFieldSetTextQualifier->AddSubBlock($oRadio);\n\t\t\t$oFieldSetTextQualifier->AddSubBlock(new Html('</br>'));\n\t\t}\n\t\t$oPage->add_ready_script(\"$('[name=\\\"text_qualifier\\\"]').on('click', function() { DoPreview(); });\");\n\n\t\t//CommentsAndHeader\n\t\t$oFieldSetCommentsAndHeader = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:CommentsAndHeader'));\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSetCommentsAndHeader));\n\n\t\t$oCheckBoxHeader = InputUIBlockFactory::MakeForInputWithLabel(Dict::S('UI:CSVImport:TreatFirstLineAsHeader'), \"header_line\", \"1\", \"box_header\", \"checkbox\");\n\t\t$oCheckBoxHeader->GetInput()->SetIsChecked(($bHeaderLine == 1));\n\t\t$oCheckBoxHeader->SetBeforeInput(false);\n\t\t$oCheckBoxHeader->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oFieldSetCommentsAndHeader->AddSubBlock($oCheckBoxHeader);\n\t\t$oFieldSetCommentsAndHeader->AddSubBlock(new Html('</br>'));\n\n\t\t$oCheckBoxSkip = InputUIBlockFactory::MakeForInputWithLabel(Dict::Format('UI:CSVImport:Skip_N_LinesAtTheBeginning', '<input type=\"text\" size=2 name=\"nb_skipped_lines\" id=\"nb_skipped_lines\" onChange=\"DoPreview()\" value=\"'.$iSkippedLines.'\">'), \"box_skiplines\", \"1\", \"box_skiplines\",\n\t\t\t\"checkbox\");\n\t\t$oCheckBoxSkip->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oCheckBoxSkip->GetInput()->SetIsChecked(($bBoxSkipLines == 1));\n\t\t$oCheckBoxSkip->SetBeforeInput(false);\n\t\t$oFieldSetCommentsAndHeader->AddSubBlock($oCheckBoxSkip);\n\n\t\t$oPage->add_ready_script(\"$('#box_header').on('click', function() { DoPreview(); });\");\n\t\t$oPage->add_ready_script(\"$('#box_skiplines').on('click', function() { DoPreview(); });\");\n\n\t\t//date format\n\t\t$oFieldSetDate = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:CSVImport:DateAndTimeFormats'));\n\t\t$oMulticolumn->AddColumn(ColumnUIBlockFactory::MakeForBlock($oFieldSetDate));\n\n\t\t$sDateTimeFormat = utils::ReadParam('date_time_format', 'default');\n\t\t$sCustomDateTimeFormat = utils::ReadParam('custom_date_time_format', (string)AttributeDateTime::GetFormat(), false, 'raw_data');\n\n\t\t$sDefaultFormat = htmlentities((string)AttributeDateTime::GetFormat(), ENT_QUOTES, 'UTF-8');\n\t\t$sExample = htmlentities(date((string)AttributeDateTime::GetFormat()), ENT_QUOTES, 'UTF-8');\n\t\t$oRadioDefault = InputUIBlockFactory::MakeForInputWithLabel(Dict::Format('UI:CSVImport:DefaultDateTimeFormat_Format_Example', $sDefaultFormat, $sExample), \"date_time_format\", \"default\", \"radio_date_time_std\", \"radio\");\n\t\t$oRadioDefault->GetInput()->SetIsChecked(($sDateTimeFormat == (string)AttributeDateTime::GetFormat()));\n\t\t$oRadioDefault->SetBeforeInput(false);\n\t\t$oRadioDefault->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oFieldSetDate->AddSubBlock($oRadioDefault);\n\t\t$oFieldSetDate->AddSubBlock(new Html('</br>'));\n\n\t\t$sFormatInput = '<input type=\"text\" size=\"15\" name=\"custom_date_time_format\" id=\"excel_custom_date_time_format\" title=\"\" value=\"'.htmlentities($sCustomDateTimeFormat, ENT_QUOTES, 'UTF-8').'\"/>';\n\t\t$oRadioCustom = InputUIBlockFactory::MakeForInputWithLabel(Dict::Format('UI:CSVImport:CustomDateTimeFormat', $sFormatInput), \"date_time_format\", \"custom\", \"radio_date_time_custom\", \"radio\");\n\t\t$oRadioCustom->GetInput()->SetIsChecked($sDateTimeFormat !== (string)AttributeDateTime::GetFormat());\n\t\t$oRadioCustom->SetBeforeInput(false);\n\t\t$oRadioCustom->GetInput()->AddCSSClass('ibo-input-checkbox');\n\t\t$oFieldSetDate->AddSubBlock($oRadioCustom);\n\n\t\t$oPage->add_ready_script(\"$('#custom_date_time_format').on('click', function() { DoPreview(); });\");\n\t\t$oPage->add_ready_script(\"$('#radio_date_time_std').on('click', function() { DoPreview(); });\");\n\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata_truncated\", htmlentities($sCSVDataTruncated, ENT_QUOTES, 'UTF-8'), \"csvdata_truncated\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"csvdata\", htmlentities($sUTF8Data, ENT_QUOTES, 'UTF-8'), 'csvdata'));\n\t\t// The encoding has changed, keep that information within the wizard\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"encoding\", \"UTF-8\"));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"class_name\", $sClassName));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"advanced\", $bAdvanced));\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"field[$iNumber]\", $sAttCode));\n\t\t}\n\t\tforeach ($aSearchFields as $index => $sDummy) {\n\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"search_field[$index]\", \"1\"));\n\t\t}\n\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", \"3\"));\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oForm->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update[$sKey]\", $value));\n\t\t\t}\n\t\t}\n\t\t$oFieldSetSeparator = PanelUIBlockFactory::MakeNeutral(Dict::S('UI:CSVImport:CSVDataPreview'));\n\t\t$oFieldSetSeparator->AddCSSClass('ibo-datatable-panel');\n\t\t$oFieldSetSeparator->AddCSSClass('mt-5');\n\t\t$oForm->AddSubBlock($oFieldSetSeparator);\n\n\t\t$oDivPreview = UIContentBlockUIBlockFactory::MakeStandard('preview');\n\t\t$oDivPreview->AddCSSClass('ibo-is-visible');\n\t\t$oFieldSetSeparator->AddSubBlock($oDivPreview);\n\t\t$oDivPreview->AddSubBlock(new Html('</br>'));\n\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Back'))->SetOnClickJsCode(\"GoBack()\"));\n\t\t$oForm->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Next'), '', \"\", true));\n\n\t\t$oPage->add_script(\n\t\t\t<<<EOF\n\tfunction GoBack()\n\t{\n\t\t$('input[name=step]').val(1);\n\t\t$('#wizForm').submit();\n\t}\n\t\n\tvar ajax_request = null;\n\t\n\tfunction DoPreview()\n\t{\n\t\tvar separator = $('input[name=separator]:checked').val();\n\t\tif (separator == 'other')\n\t\t{\n\t\t\tseparator = $('#other_separator').val();\n\t\t}\n\t\tvar text_qualifier = $('input[name=text_qualifier]:checked').val();\n\t\tif (text_qualifier == 'other')\n\t\t{\n\t\t\ttext_qualifier = $('#other_qualifier').val();\n\t\t}\n\t\tvar do_skip_lines = 0;\n\t\tif ($('#box_skiplines:checked').val() != null)\n\t\t{\n\t\t\tdo_skip_lines = $('#nb_skipped_lines').val();\n\t\t}\n\t\tvar header_line = 0;\n\t\tif ($('#box_header:checked').val() != null)\n\t\t{\n\t\t\theader_line = 1;\n\t\t}\n\t\tvar encoding = $('input[name=encoding]').val();\n\n\t\t$('#preview').block();\n\t\t\n\t\t// Make sure that we cancel any pending request before issuing another\n\t\t// since responses may arrive in arbitrary order\n\t\tif (ajax_request != null)\n\t\t{\n\t\t\tajax_request.abort();\n\t\t\tajax_request = null;\n\t\t}\n\t\t\n\t\tajax_request = $.post(GetAbsoluteUrlAppRoot()+'pages/ajax.csvimport.php',\n\t\t\t   { operation: 'parser_preview', enctype: 'multipart/form-data', csvdata: $(\"#csvdata_truncated\").val(), separator: separator, qualifier: text_qualifier, do_skip_lines: do_skip_lines, header_line: header_line, encoding: encoding },\n\t\t\t   function(data) {\n\t\t\t\t $('#preview').empty();\n\t\t\t\t $('#preview').append(data);\n\t\t\t\t $('#preview').unblock();\n\t\t\t\t}\n\t\t\t );\n\t}\nEOF\n\t);\n\t\t$sJSTooltip = json_encode('<div class=\"date_format_tooltip\">'.Dict::S('UI:CSVImport:CustomDateTimeFormatTooltip').'</div>');\n\t\t$oPage->add_ready_script(\n<<<EOF\nDoPreview();\n$('#custom_date_time_format').tooltip({content: function() { return $sJSTooltip; } });\n$('#custom_date_time_format').on('click', function() { $('#radio_date_time_custom').prop('checked', true); });\nEOF\n\t\t);\n\t}\n\n\t/**\n\t *  Prompt for the data to be loaded (either via a file or a copy/paste)\n\t * @param WebPage $oPage The current web page\n\t * @return void\n\t */\n\tfunction Welcome(iTopWebPage $oPage)\n\t{\n\t\t$sSynchroScope = utils::ReadParam('synchro_scope', '', false, 'raw_data');\n\t\tif (!empty($sSynchroScope)) {\n\t\t\t$oSearch = DBObjectSearch::FromOQL($sSynchroScope);\n\t\t\t$sClassName = $oSearch->GetClass();\n\t\t\t$oSet = new DBObjectSet($oSearch);\n\t\t\t$iCount = $oSet->Count();\n\t\t\tDisplaySynchroBanner($oPage, $sClassName, $iCount);\n\t\t\t$aSynchroUpdate = utils::ReadParam('synchro_update', array());\n\t\t} else {\n\t\t\t$aSynchroUpdate = null;\n\t\t}\n\n\t\t$oPanel = PanelUIBlockFactory::MakeForInformation(Dict::S('UI:Title:BulkImport+'));\n\t\t$oPage->AddSubBlock($oPanel);\n\n\t\t$oTabContainer = new TabContainer('tabs1', 'import');\n\t\t$oPanel->AddMainBlock($oTabContainer);\n\n\t\t//** Tab:LoadFromFile */\n\t\t$oTabFile = $oTabContainer->AddTab('LoadFromFile', Dict::S('UI:CSVImport:Tab:LoadFromFile'));\n\t\t$oFormFile = FormUIBlockFactory::MakeStandard();\n\t\t$oTabFile->AddSubBlock($oFormFile);\n\n\t\t$oSelectFile = FileSelectUIBlockFactory::MakeStandard(\"csvdata\");\n\t\t$oFieldFile = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:SelectFile'), $oSelectFile);\n\t\t$oFormFile->AddSubBlock($oFieldFile);\n\n\t\t$oSelectEncodingFile = SelectUIBlockFactory::MakeForSelect(\"encoding\");\n\t\t$oFieldEncodingFile = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:Encoding'), $oSelectEncodingFile);\n\t\t$oFormFile->AddSubBlock($oFieldEncodingFile);\n\n\t\t$sSeparator = utils::ReadParam('separator', '', false, 'raw_data');\n\t\t$sTextQualifier = utils::ReadParam('text_qualifier', '', false, 'raw_data');\n\t\t$bHeaderLine = utils::ReadParam('header_line', true);\n\t\t$sClassName = utils::ReadParam('class_name', '');\n\t\t$bAdvanced = utils::ReadParam('advanced', 0);\n\t\t$sEncoding = utils::ReadParam('encoding', '');\n\t\t$sDateTimeFormat = utils::ReadParam('date_time_format', 'default');\n\t\t$sCustomDateTimeFormat = utils::ReadParam('custom_date_time_format', (string)AttributeDateTime::GetFormat(), false, 'raw_data');\n\t\tif ($sEncoding == '') {\n\t\t\t$sEncoding = MetaModel::GetConfig()->Get('csv_file_default_charset');\n\t\t}\n\t\t$aFieldsMapping = utils::ReadParam('field', array(), false, 'raw_data');\n\t\t$aSearchFields = utils::ReadParam('search_field', array(), false, 'field_name');\n\t\t$aPossibleEncodings = utils::GetPossibleEncodings(MetaModel::GetConfig()->GetCSVImportCharsets());\n\n\t\tforeach ($aPossibleEncodings as $sIconvCode => $sDisplayName) {\n\t\t\t$oSelectEncodingFile->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption($sIconvCode, $sDisplayName, ($sEncoding == $sIconvCode)));\n\t\t}\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", '2'));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"operation\", \"file_upload\"));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"header_line\", $bHeaderLine));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"nb_skipped_lines\", utils::ReadParam('nb_skipped_lines', '0')));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"box_skiplines\", utils::ReadParam('box_skiplines', '0')));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"class_name\", $sClassName));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"advanced\", $bAdvanced));\n\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update['.$sKey.']\", $value));\n\t\t\t}\n\t\t}\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"['field$iNumber]\", $sAttCode));\n\t\t}\n\t\tforeach ($aSearchFields as $index => $sDummy) {\n\t\t\t$oFormFile->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"search_field[$index]\", \"1\"));\n\t\t}\n\t\t$oToolbarFile = ToolbarUIBlockFactory::MakeForButton();\n\t\t$oToolbarFile->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Next'), '', '', true));\n\t\t$oFormFile->AddSubBlock($oToolbarFile);\n\n\t\t//** Tab:PasteData */\n\t\t$oTabPaste = $oTabContainer->AddTab('UI:CSVImport:Tab:PasteData', Dict::S('UI:CSVImport:Tab:CopyPaste'));\n\t\t$oFormPaste = FormUIBlockFactory::MakeStandard();\n\t\t$oTabPaste->AddSubBlock($oFormPaste);\n\n\n\t\t$sCSVData = utils::ReadParam('csvdata', '', false, utils::ENUM_SANITIZATION_FILTER_STRING);\n\t\t$oTextarea = new TextArea('csvdata', $sCSVData, '', 120, 30);\n\t\t$oFieldPaste = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:PasteData'), $oTextarea);\n\t\t$oFormPaste->AddSubBlock($oFieldPaste);\n\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"encoding\", 'UTF-8'));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"step\", '2'));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"separator\", htmlentities($sSeparator, ENT_QUOTES, 'UTF-8')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"text_qualifier\", htmlentities($sTextQualifier, ENT_QUOTES, 'UTF-8')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"date_time_format\", htmlentities($sDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"custom_date_time_format\", htmlentities($sCustomDateTimeFormat, ENT_QUOTES, 'UTF-8')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"header_line\", $bHeaderLine));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"nb_skipped_lines\", utils::ReadParam('nb_skipped_lines', '0')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"box_skiplines\", utils::ReadParam('box_skiplines', '0')));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"class_name\", $sClassName));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"advanced\", $bAdvanced));\n\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_scope\", $sSynchroScope));\n\t\t$oFormPaste->AddSubBlock(ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Next'), '', \"\", true));\n\n\t\tif (!empty($sSynchroScope)) {\n\t\t\tforeach ($aSynchroUpdate as $sKey => $value) {\n\t\t\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"synchro_update[$sKey]\", $value));\n\t\t\t}\n\t\t}\n\t\tforeach ($aFieldsMapping as $iNumber => $sAttCode) {\n\t\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"field[$iNumber]\", $sAttCode));\n\t\t}\n\t\tforeach ($aSearchFields as $index => $sDummy) {\n\t\t\t$oFormPaste->AddSubBlock(InputUIBlockFactory::MakeForHidden(\"search_field[$index]\", \"1\"));\n\t\t}\n\n\t\t/*\tif (!empty($sCSVData)) {\n\t\t\t\t// When there are some data, activate the 'copy & paste' tab by default\n\t\t\t\t$oPage->SelectTab('tabs1', Dict::S('UI:CSVImport:Tab:CopyPaste'));\n\t\t\t}*/\n\t\t//Tab:Template\n\t\t$oTabTemplate = $oTabContainer->AddTab('tabsTemplate', Dict::S('UI:CSVImport:Tab:Templates'));\n\t\t$oFieldTemplate = FieldUIBlockFactory::MakeFromObject(Dict::S('UI:CSVImport:PickClassForTemplate'), GetClassesSelectUIBlock('template_class', '', UR_ACTION_BULK_MODIFY));\n\t\t$oTabTemplate->AddSubBlock($oFieldTemplate);\n\t\t$oDivTemplate = UIContentBlockUIBlockFactory::MakeStandard(\"template\")->AddCSSClass(\"ibo-is-visible\");\n\t\t$oTabTemplate->AddSubBlock($oDivTemplate);\n\n\t\t$oPage->add_script(\n\t\t\t<<<EOF\nvar ajax_request = null;\n\nfunction DisplayTemplate(sClassName) {\n\n$('#template').block();\n\n// Make sure that we cancel any pending request before issuing another\n// since responses may arrive in arbitrary order\nif (ajax_request != null)\n{\n\tajax_request.abort();\n\tajax_request = null;\n}\n\najax_request = $.post(GetAbsoluteUrlAppRoot()+'pages/ajax.csvimport.php',\n\t   { operation: 'get_csv_template', class_name: sClassName },\n\t   function(data) {\n\t\t $('#template').empty();\n\t\t $('#template').append(data);\n\t\t $('#template').unblock();\n\t\t}\n\t );\n}\nEOF\n\t);\n\t\t$oPage->add_ready_script(\n<<<EOF\n$('#select_template_class').change( function() {\n\tDisplayTemplate(this.value);\n});\nEOF\n\t);\n\n\t\tif (Utils::GetConfig()->Get('csv_import_history_display'))\n\t\t{\n\t\t\t$oPage->SetCurrentTabContainer('tabs1');\n\t\t\t$oPage->AddAjaxTab('UI:History:BulkImports', utils::GetAbsoluteUrlAppRoot().'pages/csvimport.php?step=11', true /* bCache */,\n\t\t\t\tnull, AjaxTab::ENUM_TAB_PLACEHOLDER_MISC);\n\t\t}\n\t}\n\t\t\t\n\tswitch($iStep)\n\t{\n\t\tcase 11:\n\t\t\t// Asynchronous tab\n\t\t\t$oPage = new AjaxPage('');\n\t\t\tBulkChange::DisplayImportHistory($oPage);\n\t\t\t$oPage->add_ready_script('$(\"#CSVImportHistory table.listResults\").tableHover();');\n\t\t\t$oPage->add_ready_script('$(\"#CSVImportHistory table.listResults\").tablesorter( { widgets: [\"myZebra\", \"truncatedList\"]} );');\t\n\t\t\tbreak;\n\t\t\n\t\tcase 10:\n\t\t\t// Case generated by BulkChange::DisplayImportHistory\n\t\t\t$iChange = (int)utils::ReadParam('changeid', 0);\n\t\t\tBulkChange::DisplayImportHistoryDetails($oPage, $iChange);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 5:\n\t\t\tLoadData($oPage);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 4:\n\t\t\tPreview($oPage);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 3:\n\t\t\tSelectMapping($oPage);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 2:\n\t\t\tSelectOptions($oPage);\n\t\t\tbreak;\n\t\t\t\n\t\tcase 1:\n\t\tcase 6: // Loop back here when we are done\n\t\tdefault:\n\t\t\tWelcome($oPage);\n\t}\n\t\n\t$oPage->output();\n}\ncatch(CoreException $e)\n{\n\trequire_once(APPROOT.'/setup/setuppage.class.inc.php');\n\t$oP = new ErrorPage(Dict::S('UI:PageTitle:FatalError'));\n\t$oP->add(\"<h1>\".Dict::S('UI:FatalErrorMessage').\"</h1>\\n\");\t\n\t$oP->error(Dict::Format('UI:Error_Details', $e->getHtmlDesc()));\t\n\t$oP->output();\n\n\tif (MetaModel::IsLogEnabledIssue())\n\t{\n\t\tif (MetaModel::IsValidClass('EventIssue'))\n\t\t{\n\t\t\t$oLog = new EventIssue();\n\n\t\t\t$oLog->Set('message', $e->getMessage());\n\t\t\t$oLog->Set('userinfo', '');\n\t\t\t$oLog->Set('issue', $e->GetIssue());\n\t\t\t$oLog->Set('impact', 'Page could not be displayed');\n\t\t\t$oLog->Set('callstack', $e->getTrace());\n\t\t\t$oLog->Set('data', $e->getContextData());\n\t\t\t$oLog->DBInsertNoReload();\n\t\t}\n\n\t\tIssueLog::Error($e->getMessage());\n\t}\n\n\t// For debugging only\n\t//throw $e;\n}\ncatch(Exception $e)\n{\n\trequire_once(APPROOT.'/setup/setuppage.class.inc.php');\n\t$oP = new ErrorPage(Dict::S('UI:PageTitle:FatalError'));\n\t$oP->add(\"<h1>\".Dict::S('UI:FatalErrorMessage').\"</h1>\\n\");\t\n\t$oP->error(Dict::Format('UI:Error_Details', $e->getMessage()));\t\n\t$oP->output();\n\n\tif (MetaModel::IsLogEnabledIssue())\n\t{\n\t\tif (MetaModel::IsValidClass('EventIssue'))\n\t\t{\n\t\t\t$oLog = new EventIssue();\n\n\t\t\t$oLog->Set('message', $e->getMessage());\n\t\t\t$oLog->Set('userinfo', '');\n\t\t\t$oLog->Set('issue', 'PHP Exception');\n\t\t\t$oLog->Set('impact', 'Page could not be displayed');\n\t\t\t$oLog->Set('callstack', $e->getTrace());\n\t\t\t$oLog->Set('data', array());\n\t\t\t$oLog->DBInsertNoReload();\n\t\t}\n\n\t\tIssueLog::Error($e->getMessage());\n\t}\n}"], "filenames": ["pages/csvimport.php"], "buggy_code_start_loc": [236], "buggy_code_end_loc": [1519], "fixing_code_start_loc": [236], "fixing_code_end_loc": [1517], "type": "CWE-79", "message": "Combodo iTop is a web based IT Service Management tool. In versions prior to 3.0.0-beta6 the export CSV page don't properly escape the user supplied parameters, allowing for javascript injection into rendered csv files. Users are advised to upgrade. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2021-41161", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-21T17:15:07.557", "lastModified": "2022-05-04T19:10:52.273", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Combodo iTop is a web based IT Service Management tool. In versions prior to 3.0.0-beta6 the export CSV page don't properly escape the user supplied parameters, allowing for javascript injection into rendered csv files. Users are advised to upgrade. There are no known workarounds for this issue."}, {"lang": "es", "value": "Combodo iTop es una herramienta de administraci\u00f3n de servicios de TI basada en la web. En versiones anteriores a 3.0.0-beta6, la p\u00e1gina de exportaci\u00f3n de CSV no escapa correctamente de los par\u00e1metros suministrados por el usuario, permitiendo una inyecci\u00f3n de javascript en los archivos csv renderizados. Es recomendado a usuarios actualizar. No se presentan medidas de mitigaci\u00f3n conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.0.0", "matchCriteriaId": "E68EC878-50DD-46DD-B59D-9D9F7F866DD2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:3.0.0:beta:*:*:*:*:*:*", "matchCriteriaId": "DD7E6A6A-9B1D-4BA7-9A58-ACEE1ABC46EB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:3.0.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "AF68C176-A8C3-4C88-A344-74CB0E682987"}, {"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:3.0.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "997A26DD-11A4-4D9F-8F6C-845068AE605C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:3.0.0:beta4:*:*:*:*:*:*", "matchCriteriaId": "06061D47-3252-4ED4-9423-600027D39551"}, {"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:3.0.0:beta5:*:*:*:*:*:*", "matchCriteriaId": "A5DFEEA5-6FB7-4583-A13C-B2EE74502B81"}]}]}], "references": [{"url": "https://github.com/Combodo/iTop/commit/c8f3d23d30c018bc44189b38fa34a5fffb4edb22", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Combodo/iTop/security/advisories/GHSA-788f-g6g9-f8fc", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Combodo/iTop/commit/c8f3d23d30c018bc44189b38fa34a5fffb4edb22"}}