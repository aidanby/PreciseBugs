{"buggy_code": ["{\n\t\"name\": \"GlobalNewFiles\",\n\t\"author\": [\n\t\t\"John Lewis\",\n\t\t\"Paladox\",\n\t\t\"Southparkfan\",\n\t\t\"Universal Omega\"\n\t],\n\t\"url\": \"//github.com/miraheze/GlobalNewFiles\",\n\t\"descriptionmsg\": \"globalnewfiles-description\",\n\t\"license-name\": \"GPL-3.0-or-later\",\n\t\"type\": \"specialpage\",\n\t\"requires\": {\n\t\t\"MediaWiki\": \">= 1.36.0\",\n\t\t\"extensions\": {\n\t\t\t\"CreateWiki\": \"*\"\n\t\t}\n\t},\n\t\"MessagesDirs\": {\n\t\t\"GlobalNewFiles\": [\n\t\t\t\"i18n\"\n\t\t]\n\t},\n\t\"ExtensionMessagesFiles\": {\n\t\t\"GlobalNewFilesAliases\": \"includes/GlobalNewFilesAliases.php\"\n\t},\n\t\"AvailableRights\": [\n\t\t\"viewglobalprivatefiles\"\n\t],\n\t\"AutoloadClasses\": {\n\t\t\"GlobalNewFilesHooks\": \"includes/GlobalNewFilesHooks.php\",\n\t\t\"GlobalNewFilesPager\": \"includes/GlobalNewFilesPager.php\",\n\t\t\"SpecialGlobalNewFiles\": \"includes/SpecialGlobalNewFiles.php\",\n\t\t\"GlobalNewFilesInsertJob\": \"includes/jobs/GlobalNewFilesInsertJob.php\",\n\t\t\"GlobalNewFilesDeleteJob\": \"includes/jobs/GlobalNewFilesDeleteJob.php\",\n\t\t\"GlobalNewFilesMoveJob\": \"includes/jobs/GlobalNewFilesMoveJob.php\"\n\t},\n\t\"JobClasses\": {\n\t\t\"GlobalNewFilesInsertJob\": \"GlobalNewFilesInsertJob\",\n\t\t\"GlobalNewFilesDeleteJob\": \"GlobalNewFilesDeleteJob\",\n\t\t\"GlobalNewFilesMoveJob\": \"GlobalNewFilesMoveJob\"\n\t},\n\t\"SpecialPages\": {\n\t\t\"GlobalNewFiles\": \"SpecialGlobalNewFiles\"\n\t},\n\t\"Hooks\": {\n\t\t\"CreateWikiTables\": [\n\t\t\t\"GlobalNewFilesHooks::onCreateWikiTables\"\n\t\t],\n\t\t\"LoadExtensionSchemaUpdates\": [\n\t\t\t\"GlobalNewFilesHooks::onLoadExtensionSchemaUpdates\"\n\t\t],\n\t\t\"FileDeleteComplete\": [\n\t\t\t\"GlobalNewFilesHooks::onFileDeleteComplete\"\n\t\t],\n\t\t\"PageMoveComplete\": [\n\t\t\t\"GlobalNewFilesHooks::onPageMoveComplete\"\n\t\t],\n\t\t\"UploadComplete\": [\n\t\t\t\"GlobalNewFilesHooks::onUploadComplete\"\n\t\t]\n\t},\n\t\"ConfigRegistry\": {\n\t\t\"globalnewfiles\": \"GlobalVarConfig::newInstance\"\n\t},\n\t\"manifest_version\": 2\n}\n", "<?php\n\nuse MediaWiki\\MediaWikiServices;\n\nclass GlobalNewFilesHooks {\n\tpublic static function onCreateWikiTables( &$tables ) {\n\t\t$tables['gnf_files'] = 'files_dbname';\n\t}\n\n\tpublic static function onUploadComplete( $uploadBase ) {\n\t\tJobQueueGroup::singleton()->push(\n\t\t\tnew GlobalNewFilesInsertJob( $uploadBase->getTitle(), [] )\n\t\t);\n\t}\n\n\tpublic static function onFileDeleteComplete( $file, $oldimage, $article, $user, $reason ) {\n\t\tJobQueueGroup::singleton()->push(\n\t\t\tnew GlobalNewFilesDeleteJob( $file->getTitle(), [] )\n\t\t);\n\t}\n\n\tpublic static function onPageMoveComplete( $old, $new, $userIdentity, $pageid, $redirid, $reason, $revision ) {\n\t\t$oldTitle = Title::newFromLinkTarget( $old );\n\t\t$newTitle = Title::newFromLinkTarget( $new );\n\n\t\tif ( $oldTitle->inNamespace( NS_FILE ) ) {\n\t\t\tJobQueueGroup::singleton()->push(\n\t\t\t\tnew GlobalNewFilesMoveJob( [ 'oldtitle' => $oldTitle, 'newtitle' => $newTitle ] )\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic static function onLoadExtensionSchemaUpdates( DatabaseUpdater $updater ) {\n\t\t$config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'globalnewfiles' );\n\n\t\tif ( $config->get( 'CreateWikiDatabase' ) === $config->get( 'DBname' ) ) {\n\t\t\t$updater->addExtensionTable(\n\t\t\t\t'gnf_files',\n\t\t\t\t__DIR__ . '/../sql/gnf_files.sql'\n\t\t\t);\n\n\t\t\t$updater->modifyExtensionField(\n\t\t\t\t'gnf_files',\n\t\t\t\t'files_timestamp',\n\t\t\t\t__DIR__ . '/../sql/patches/patch-gnf_files-binary.sql' \n\t\t\t);\n\n\t\t\t$updater->modifyTable(\n \t\t\t\t'gnf_files',\n  \t\t\t\t__DIR__ . '/../sql/patches/patch-gnf_files-add-indexes.sql',\n\t\t\t\ttrue\n \t\t\t);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param int $index DB_PRIMARY/DB_REPLICA\n\t * @param array|string $groups\n\t * @return IDatabase\n\t */\n\tpublic static function getGlobalDB( $index, $groups = [] ) {\n\t\t$config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'globalnewfiles' );\n\n\t\t$lbFactory = MediaWikiServices::getInstance()->getDBLoadBalancerFactory();\n\t\t$lb = $lbFactory->getMainLB( $config->get( 'CreateWikiDatabase' ) );\n\n\t\treturn $lb->getConnectionRef( $index, $groups, $config->get( 'CreateWikiDatabase' ) );\n\t}\n}\n", "<?php\n\nuse MediaWiki\\MediaWikiServices;\n\nclass GlobalNewFilesPager extends TablePager {\n\tfunction __construct() {\n\t\t$this->mDb = GlobalNewFilesHooks::getGlobalDB( DB_REPLICA, 'gnf_files' );\n\n\t\tif ( $this->getRequest()->getText( 'sort', 'files_date' ) == 'files_date' ) {\n\t\t\t$this->mDefaultDirection = IndexPager::DIR_DESCENDING;\n\t\t} else {\n\t\t\t$this->mDefaultDirection = IndexPager::DIR_ASCENDING;\n\t\t}\n\n\t\tparent::__construct( $this->getContext() );\n\t}\n\n\tfunction getFieldNames() {\n\t\tstatic $headers = null;\n\n\t\t$headers = [\n\t\t\t'files_timestamp' => 'listfiles_date',\n\t\t\t'files_dbname'    => 'createwiki-label-dbname',\n\t\t\t'files_name'      => 'listfiles_name',\n\t\t\t'files_url'       => 'listfiles_thumb',\n\t\t\t'files_user'      => 'listfiles_user',\n\t\t];\n\n\t\tforeach ( $headers as &$msg ) {\n\t\t\t$msg = $this->msg( $msg )->text();\n\t\t}\n\n\t\treturn $headers;\n\t}\n\n\tfunction formatValue( $name, $value ) {\n\t\t$row = $this->mCurrentRow;\n\n\t\t$wiki = $row->files_dbname;\n\n\t\tswitch ( $name ) {\n\t\t\tcase 'files_timestamp':\n\t\t\t\t$formatted = htmlspecialchars( $this->getLanguage()->userTimeAndDate( $row->files_timestamp, $this->getUser() ) );\n\t\t\t\tbreak;\n\t\t\tcase 'files_dbname':\n\t\t\t\t$formatted = $row->files_dbname;\n\t\t\t\tbreak;\n\t\t\tcase 'files_url':\n\t\t\t\t$formatted = \"<img src=\\\"{$row->files_url}\\\" style=\\\"width:135px;height:135px;\\\">\";\n\t\t\t\tbreak;\n\t\t\tcase 'files_name':\n\t\t\t\t$formatted = \"<a href=\\\"{$row->files_page}\\\">{$row->files_name}</a>\";\n\t\t\t\tbreak;\n\t\t\tcase 'files_user':\n\t\t\t\t$formatted = \"<a href=\\\"/wiki/Special:CentralAuth/{$row->files_user}\\\">{$row->files_user}</a>\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$formatted = \"Unable to format $name\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $formatted;\n\t}\n\n\tfunction getQueryInfo() {\n\t\t$config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'globalnewfiles' );\n\n\t\t$info = [\n\t\t\t'tables' => [ 'gnf_files' ],\n\t\t\t'fields' => [ 'files_dbname', 'files_url', 'files_page', 'files_name', 'files_user', 'files_private', 'files_timestamp' ],\n\t\t\t'conds' => [],\n\t\t\t'joins_conds' => [],\n\t\t];\n\n\t\t$mwService = MediaWikiServices::getInstance()->getPermissionManager();\n\t\tif ( !$mwService->userHasRight( $config->get( 'User' ), 'viewglobalprivatefiles' ) ) {\n\t\t\t$info['conds']['files_private'] = 0;\n\t\t}\n\n\t\treturn $info;\n\t}\n\n\tfunction getDefaultSort() {\n\t\treturn 'files_timestamp';\n\t}\n\n\tfunction isFieldSortable( $name ) {\n\t\treturn true;\n\t}\n}\n", "<?php\n\nclass SpecialGlobalNewFiles extends SpecialPage {\n\n\tfunction __construct() {\n\t\tparent::__construct( 'GlobalNewFiles' );\n\t}\n\n\tfunction execute( $par ) {\n\t\t$this->setHeaders();\n\t\t$this->outputHeader();\n\n\t\t$pager = new GlobalNewFilesPager();\n\t\t\n\t\t$this->getOutput()->addParserOutputContent( $pager->getFullOutput() );\n\t}\n\n\tprotected function getGroupName() {\n\t\treturn 'other';\n\t}\n}\n"], "fixing_code": ["{\n\t\"name\": \"GlobalNewFiles\",\n\t\"author\": [\n\t\t\"John Lewis\",\n\t\t\"Paladox\",\n\t\t\"Southparkfan\",\n\t\t\"Universal Omega\"\n\t],\n\t\"url\": \"//github.com/miraheze/GlobalNewFiles\",\n\t\"descriptionmsg\": \"globalnewfiles-description\",\n\t\"license-name\": \"GPL-3.0-or-later\",\n\t\"type\": \"specialpage\",\n\t\"requires\": {\n\t\t\"MediaWiki\": \">= 1.36.0\",\n\t\t\"extensions\": {\n\t\t\t\"CreateWiki\": \"*\"\n\t\t}\n\t},\n\t\"MessagesDirs\": {\n\t\t\"GlobalNewFiles\": [\n\t\t\t\"i18n\"\n\t\t]\n\t},\n\t\"ExtensionMessagesFiles\": {\n\t\t\"GlobalNewFilesAliases\": \"includes/GlobalNewFilesAliases.php\"\n\t},\n\t\"AvailableRights\": [\n\t\t\"viewglobalprivatefiles\"\n\t],\n\t\"AutoloadClasses\": {\n\t\t\"GlobalNewFilesHooks\": \"includes/GlobalNewFilesHooks.php\",\n\t\t\"GlobalNewFilesPager\": \"includes/GlobalNewFilesPager.php\",\n\t\t\"SpecialGlobalNewFiles\": \"includes/SpecialGlobalNewFiles.php\",\n\t\t\"GlobalNewFilesInsertJob\": \"includes/jobs/GlobalNewFilesInsertJob.php\",\n\t\t\"GlobalNewFilesDeleteJob\": \"includes/jobs/GlobalNewFilesDeleteJob.php\",\n\t\t\"GlobalNewFilesMoveJob\": \"includes/jobs/GlobalNewFilesMoveJob.php\"\n\t},\n\t\"JobClasses\": {\n\t\t\"GlobalNewFilesInsertJob\": \"GlobalNewFilesInsertJob\",\n\t\t\"GlobalNewFilesDeleteJob\": \"GlobalNewFilesDeleteJob\",\n\t\t\"GlobalNewFilesMoveJob\": \"GlobalNewFilesMoveJob\"\n\t},\n\t\"SpecialPages\": {\n\t\t\"GlobalNewFiles\": {\n\t\t\t\"class\": \"SpecialGlobalNewFiles\",\n\t\t\t\"services\": [\n\t\t\t\t\"LinkRenderer\"\n\t\t\t]\n\t\t}\n\t},\n\t\"Hooks\": {\n\t\t\"CreateWikiTables\": [\n\t\t\t\"GlobalNewFilesHooks::onCreateWikiTables\"\n\t\t],\n\t\t\"LoadExtensionSchemaUpdates\": [\n\t\t\t\"GlobalNewFilesHooks::onLoadExtensionSchemaUpdates\"\n\t\t],\n\t\t\"FileDeleteComplete\": [\n\t\t\t\"GlobalNewFilesHooks::onFileDeleteComplete\"\n\t\t],\n\t\t\"PageMoveComplete\": [\n\t\t\t\"GlobalNewFilesHooks::onPageMoveComplete\"\n\t\t],\n\t\t\"UploadComplete\": [\n\t\t\t\"GlobalNewFilesHooks::onUploadComplete\"\n\t\t]\n\t},\n\t\"ConfigRegistry\": {\n\t\t\"globalnewfiles\": \"GlobalVarConfig::newInstance\"\n\t},\n\t\"manifest_version\": 2\n}\n", "<?php\n\nuse MediaWiki\\MediaWikiServices;\n\nclass GlobalNewFilesHooks {\n\tpublic static function onCreateWikiTables( &$tables ) {\n\t\t$tables['gnf_files'] = 'files_dbname';\n\t}\n\n\tpublic static function onUploadComplete( $uploadBase ) {\n\t\tJobQueueGroup::singleton()->push(\n\t\t\tnew GlobalNewFilesInsertJob( $uploadBase->getTitle(), [] )\n\t\t);\n\t}\n\n\tpublic static function onFileDeleteComplete( $file, $oldimage, $article, $user, $reason ) {\n\t\tJobQueueGroup::singleton()->push(\n\t\t\tnew GlobalNewFilesDeleteJob( $file->getTitle(), [] )\n\t\t);\n\t}\n\n\tpublic static function onPageMoveComplete( $old, $new, $userIdentity, $pageid, $redirid, $reason, $revision ) {\n\t\t$oldTitle = Title::newFromLinkTarget( $old );\n\t\t$newTitle = Title::newFromLinkTarget( $new );\n\n\t\tif ( $oldTitle->inNamespace( NS_FILE ) ) {\n\t\t\tJobQueueGroup::singleton()->push(\n\t\t\t\tnew GlobalNewFilesMoveJob( [ 'oldtitle' => $oldTitle, 'newtitle' => $newTitle ] )\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic static function onLoadExtensionSchemaUpdates( DatabaseUpdater $updater ) {\n\t\t$config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'globalnewfiles' );\n\n\t\tif ( $config->get( 'CreateWikiDatabase' ) === $config->get( 'DBname' ) ) {\n\t\t\t$updater->addExtensionTable(\n\t\t\t\t'gnf_files',\n\t\t\t\t__DIR__ . '/../sql/gnf_files.sql'\n\t\t\t);\n\n\t\t\t$updater->modifyExtensionField(\n\t\t\t\t'gnf_files',\n\t\t\t\t'files_timestamp',\n\t\t\t\t__DIR__ . '/../sql/patches/patch-gnf_files-binary.sql'\n\t\t\t);\n\n\t\t\t$updater->modifyTable(\n \t\t\t\t'gnf_files',\n  \t\t\t\t__DIR__ . '/../sql/patches/patch-gnf_files-add-indexes.sql',\n\t\t\t\ttrue\n \t\t\t);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param int $index DB_PRIMARY/DB_REPLICA\n\t * @param array|string $groups\n\t * @return IDatabase\n\t */\n\tpublic static function getGlobalDB( $index, $groups = [] ) {\n\t\t$config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'globalnewfiles' );\n\n\t\t$lbFactory = MediaWikiServices::getInstance()->getDBLoadBalancerFactory();\n\t\t$lb = $lbFactory->getMainLB( $config->get( 'CreateWikiDatabase' ) );\n\n\t\treturn $lb->getConnectionRef( $index, $groups, $config->get( 'CreateWikiDatabase' ) );\n\t}\n}\n", "<?php\n\nuse MediaWiki\\Linker\\LinkRenderer;\nuse MediaWiki\\MediaWikiServices;\n\nclass GlobalNewFilesPager extends TablePager {\n\t/** @var LinkRenderer */\n\tprivate $linkRenderer;\n\n\tfunction __construct( RequestContext $context, LinkRenderer $linkRenderer ) {\n\t\tparent::__construct( $context );\n\n\t\t$this->linkRenderer = $linkRenderer;\n\n\t\t$this->mDb = GlobalNewFilesHooks::getGlobalDB( DB_REPLICA, 'gnf_files' );\n\n\t\tif ( $context->getRequest()->getText( 'sort', 'files_date' ) == 'files_date' ) {\n\t\t\t$this->mDefaultDirection = IndexPager::DIR_DESCENDING;\n\t\t} else {\n\t\t\t$this->mDefaultDirection = IndexPager::DIR_ASCENDING;\n\t\t}\n\t}\n\n\tfunction getFieldNames() {\n\t\tstatic $headers = null;\n\n\t\t$headers = [\n\t\t\t'files_timestamp' => 'listfiles_date',\n\t\t\t'files_dbname'    => 'createwiki-label-dbname',\n\t\t\t'files_name'      => 'listfiles_name',\n\t\t\t'files_url'       => 'listfiles_thumb',\n\t\t\t'files_user'      => 'listfiles_user',\n\t\t];\n\n\t\tforeach ( $headers as &$msg ) {\n\t\t\t$msg = $this->msg( $msg )->text();\n\t\t}\n\n\t\treturn $headers;\n\t}\n\n\tfunction formatValue( $name, $value ) {\n\t\t$row = $this->mCurrentRow;\n\n\t\tswitch ( $name ) {\n\t\t\tcase 'files_timestamp':\n\t\t\t\t$formatted = htmlspecialchars( $this->getLanguage()->userTimeAndDate( $row->files_timestamp, $this->getUser() ) );\n\t\t\t\tbreak;\n\t\t\tcase 'files_dbname':\n\t\t\t\t$formatted = $row->files_dbname;\n\t\t\t\tbreak;\n\t\t\tcase 'files_url':\n\t\t\t\t$formatted = Html::element(\n\t\t\t\t\t'img',\n\t\t\t\t\t[\n\t\t\t\t\t\t'src' => $row->files_url,\n\t\t\t\t\t\t'style' => 'width: 135px; height: 135px;'\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'files_name':\n\t\t\t\t$formatted = Html::element(\n\t\t\t\t\t'a',\n\t\t\t\t\t[\n\t\t\t\t\t\t'href' => $row->files_page,\n\t\t\t\t\t],\n\t\t\t\t\t$row->files_name\n\t\t\t\t);\n\n\t\t\t\tbreak;\n\t\t\tcase 'files_user':\n\t\t\t\t$formatted = $this->linkRenderer->makeLink(\n\t\t\t\t\tSpecialPage::getTitleFor( 'CentralAuth', $row->files_user ),\n\t\t\t\t\t$row->files_user\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$formatted = \"Unable to format $name\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $formatted;\n\t}\n\n\tfunction getQueryInfo() {\n\t\t$config = MediaWikiServices::getInstance()->getConfigFactory()->makeConfig( 'globalnewfiles' );\n\n\t\t$info = [\n\t\t\t'tables' => [ 'gnf_files' ],\n\t\t\t'fields' => [ 'files_dbname', 'files_url', 'files_page', 'files_name', 'files_user', 'files_private', 'files_timestamp' ],\n\t\t\t'conds' => [],\n\t\t\t'joins_conds' => [],\n\t\t];\n\n\t\t$mwService = MediaWikiServices::getInstance()->getPermissionManager();\n\t\tif ( !$mwService->userHasRight( $config->get( 'User' ), 'viewglobalprivatefiles' ) ) {\n\t\t\t$info['conds']['files_private'] = 0;\n\t\t}\n\n\t\treturn $info;\n\t}\n\n\tfunction getDefaultSort() {\n\t\treturn 'files_timestamp';\n\t}\n\n\tfunction isFieldSortable( $name ) {\n\t\treturn true;\n\t}\n}\n", "<?php\n\nuse MediaWiki\\Linker\\LinkRenderer;\n\nclass SpecialGlobalNewFiles extends SpecialPage {\n\t/** @var LinkRenderer */\n\tprivate $linkRenderer;\n\n\tfunction __construct( LinkRenderer $linkRenderer ) {\n\t\tparent::__construct( 'GlobalNewFiles' );\n\t\t$this->linkRenderer = $linkRenderer;\n\t}\n\n\tfunction execute( $par ) {\n\t\t$this->setHeaders();\n\t\t$this->outputHeader();\n\n\t\t$pager = new GlobalNewFilesPager( $this->getContext(), $this->linkRenderer );\n\n\t\t$this->getOutput()->addParserOutputContent( $pager->getFullOutput() );\n\t}\n\n\tprotected function getGroupName() {\n\t\treturn 'other';\n\t}\n}\n"], "filenames": ["extension.json", "includes/GlobalNewFilesHooks.php", "includes/GlobalNewFilesPager.php", "includes/SpecialGlobalNewFiles.php"], "buggy_code_start_loc": [44, 45, 2, 2], "buggy_code_end_loc": [45, 46, 56, 15], "fixing_code_start_loc": [44, 45, 3, 3], "fixing_code_end_loc": [50, 46, 76, 20], "type": "CWE-20", "message": "GlobalNewFiles is a MediaWiki extension maintained by Miraheze. Prior to commit number cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d, the username column of the GlobalNewFiles special page is vulnerable to a stored XSS. Commit number cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d contains a patch. As a workaround, one may disallow <,> (or other characters required to insert html/js) from being used in account names so an XSS is not possible.", "other": {"cve": {"id": "CVE-2021-39186", "sourceIdentifier": "security-advisories@github.com", "published": "2021-09-01T21:15:07.263", "lastModified": "2021-09-10T19:34:21.433", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GlobalNewFiles is a MediaWiki extension maintained by Miraheze. Prior to commit number cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d, the username column of the GlobalNewFiles special page is vulnerable to a stored XSS. Commit number cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d contains a patch. As a workaround, one may disallow <,> (or other characters required to insert html/js) from being used in account names so an XSS is not possible."}, {"lang": "es", "value": "GlobalNewFiles es una extensi\u00f3n de MediaWiki mantenida por Miraheze. Antes del commit n\u00famero cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d, la columna de nombre de usuario de la p\u00e1gina especial GlobalNewFiles es vulnerable a un ataque de tipo XSS almacenado. El n\u00famero de confirmaci\u00f3n cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d contiene un parche. Como soluci\u00f3n, se puede deshabilitar el uso de &lt;,&gt; (u otros caracteres necesarios para insertar html/js) en los nombres de las cuentas para que no sea posible un XSS."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:miraheze:globalnewfiles:*:*:*:*:*:mediawiki:*:*", "versionEndExcluding": "2021-09-01", "matchCriteriaId": "DC65D960-9E4E-4F23-AB8F-BF1E831D5E6B"}]}]}], "references": [{"url": "https://github.com/miraheze/GlobalNewFiles/commit/cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/miraheze/GlobalNewFiles/security/advisories/GHSA-57p5-hqjq-h7vg", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://phabricator.miraheze.org/T7935", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/miraheze/GlobalNewFiles/commit/cee254e1b158cdb0ddbea716b1d3edc31fa4fb5d"}}