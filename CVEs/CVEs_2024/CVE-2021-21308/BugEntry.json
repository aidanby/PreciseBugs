{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nuse Defuse\\Crypto\\Key;\nuse PrestaShop\\PrestaShop\\Core\\Exception\\CoreException;\nuse PrestaShop\\PrestaShop\\Core\\Session\\SessionInterface;\n\nclass CookieCore\n{\n    /** @var array Contain cookie content in a key => value format */\n    protected $_content = [];\n\n    /** @var array Crypted cookie name for setcookie() */\n    protected $_name;\n\n    /** @var array expiration date for setcookie() */\n    protected $_expire;\n\n    /** @var array Website domain for setcookie() */\n    protected $_domain;\n\n    /** @var array Path for setcookie() */\n    protected $_path;\n\n    /** @var array cipher tool instance */\n    protected $cipherTool;\n\n    protected $_modified = false;\n\n    protected $_allow_writing;\n\n    protected $_salt;\n\n    protected $_standalone;\n\n    protected $_secure = false;\n\n    /**\n     * Get data if the cookie exists and else initialize an new one.\n     *\n     * @param $name string Cookie name before encrypting\n     * @param $path string\n     */\n    public function __construct($name, $path = '', $expire = null, $shared_urls = null, $standalone = false, $secure = false)\n    {\n        $this->_content = [];\n        $this->_standalone = $standalone;\n        $this->_expire = null === $expire ? time() + 1728000 : (int) $expire;\n        $this->_path = trim(($this->_standalone ? '' : Context::getContext()->shop->physical_uri) . $path, '/\\\\') . '/';\n        if ($this->_path[0] != '/') {\n            $this->_path = '/' . $this->_path;\n        }\n        $this->_path = rawurlencode($this->_path);\n        $this->_path = str_replace('%2F', '/', $this->_path);\n        $this->_path = str_replace('%7E', '~', $this->_path);\n        $this->_domain = $this->getDomain($shared_urls);\n        $this->_name = 'PrestaShop-' . md5(($this->_standalone ? '' : _PS_VERSION_) . $name . $this->_domain);\n        $this->_allow_writing = true;\n        $this->_salt = $this->_standalone ? str_pad('', 32, md5('ps' . __FILE__)) : _COOKIE_IV_;\n\n        if ($this->_standalone) {\n            $asciiSafeString = \\Defuse\\Crypto\\Encoding::saveBytesToChecksummedAsciiSafeString(Key::KEY_CURRENT_VERSION, str_pad($name, Key::KEY_BYTE_SIZE, md5(__FILE__)));\n            $this->cipherTool = new PhpEncryption($asciiSafeString);\n        } else {\n            $this->cipherTool = new PhpEncryption(_NEW_COOKIE_KEY_);\n        }\n\n        $this->_secure = (bool) $secure;\n\n        $this->update();\n    }\n\n    public function disallowWriting()\n    {\n        $this->_allow_writing = false;\n    }\n\n    protected function getDomain($shared_urls = null)\n    {\n        $r = '!(?:(\\w+)://)?(?:(\\w+)\\:(\\w+)@)?([^/:]+)?(?:\\:(\\d*))?([^#?]+)?(?:\\?([^#]+))?(?:#(.+$))?!i';\n\n        if (!preg_match($r, Tools::getHttpHost(false, false), $out) || !isset($out[4])) {\n            return false;\n        }\n\n        if (preg_match('/^(((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]{1}[0-9]|[1-9]).)' .\n            '{1}((25[0-5]|2[0-4][0-9]|[1]{1}[0-9]{2}|[1-9]{1}[0-9]|[0-9]).)' .\n            '{2}((25[0-5]|2[0-4][0-9]|[1]{1}[0-9]{2}|[1-9]{1}[0-9]|[0-9]){1}))$/', $out[4])) {\n            return false;\n        }\n        if (!strstr(Tools::getHttpHost(false, false), '.')) {\n            return false;\n        }\n\n        $domain = false;\n        if ($shared_urls !== null) {\n            foreach ($shared_urls as $shared_url) {\n                if ($shared_url != $out[4]) {\n                    continue;\n                }\n                if (preg_match('/^(?:.*\\.)?([^.]*(?:.{2,4})?\\..{2,3})$/Ui', $shared_url, $res)) {\n                    $domain = '.' . $res[1];\n\n                    break;\n                }\n            }\n        }\n        if (!$domain) {\n            $domain = $out[4];\n        }\n\n        return $domain;\n    }\n\n    /**\n     * Set expiration date.\n     *\n     * @param int $expire Expiration time from now\n     */\n    public function setExpire($expire)\n    {\n        $this->_expire = (int) ($expire);\n    }\n\n    /**\n     * Magic method wich return cookie data from _content array.\n     *\n     * @param string $key key wanted\n     *\n     * @return string value corresponding to the key\n     */\n    public function __get($key)\n    {\n        return isset($this->_content[$key]) ? $this->_content[$key] : false;\n    }\n\n    /**\n     * Magic method which check if key exists in the cookie.\n     *\n     * @param string $key key wanted\n     *\n     * @return bool key existence\n     */\n    public function __isset($key)\n    {\n        return isset($this->_content[$key]);\n    }\n\n    /**\n     * Magic method which adds data into _content array.\n     *\n     * @param string $key Access key for the value\n     * @param mixed $value Value corresponding to the key\n     *\n     * @throws Exception\n     */\n    public function __set($key, $value)\n    {\n        if (is_array($value)) {\n            die(Tools::displayError());\n        }\n        if (preg_match('/\u00a4|\\|/', $key . $value)) {\n            throw new Exception('Forbidden chars in cookie');\n        }\n        if (!$this->_modified && (!array_key_exists($key, $this->_content) || $this->_content[$key] != $value)) {\n            $this->_modified = true;\n        }\n        $this->_content[$key] = $value;\n    }\n\n    /**\n     * Magic method which delete data into _content array.\n     *\n     * @param string $key key wanted\n     */\n    public function __unset($key)\n    {\n        if (isset($this->_content[$key])) {\n            $this->_modified = true;\n        }\n        unset($this->_content[$key]);\n    }\n\n    /**\n     * Check customer informations saved into cookie and return customer validity.\n     *\n     * @deprecated as of version 1.5 use Customer::isLogged() instead\n     *\n     * @return bool customer validity\n     */\n    public function isLogged($withGuest = false)\n    {\n        Tools::displayAsDeprecated('Use Customer::isLogged() instead');\n        if (!$withGuest && $this->is_guest == 1) {\n            return false;\n        }\n\n        /* Customer is valid only if it can be load and if cookie password is the same as database one */\n        if ($this->logged == 1 && $this->id_customer && Validate::isUnsignedId($this->id_customer) && Customer::checkPassword((int) ($this->id_customer), $this->passwd)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check employee informations saved into cookie and return employee validity.\n     *\n     * @deprecated as of version 1.5 use Employee::isLoggedBack() instead\n     *\n     * @return bool employee validity\n     */\n    public function isLoggedBack()\n    {\n        Tools::displayAsDeprecated('Use Employee::isLoggedBack() instead');\n        /* Employee is valid only if it can be load and if cookie password is the same as database one */\n        return $this->id_employee\n            && Validate::isUnsignedId($this->id_employee)\n            && Employee::checkPassword((int) $this->id_employee, $this->passwd)\n            && (!isset($this->_content['remote_addr']) || $this->_content['remote_addr'] == ip2long(Tools::getRemoteAddr()) || !Configuration::get('PS_COOKIE_CHECKIP'));\n    }\n\n    /**\n     * Delete cookie\n     * As of version 1.5 don't call this function, use Customer::logout() or Employee::logout() instead;.\n     */\n    public function logout()\n    {\n        $this->deleteSession();\n        $this->_content = [];\n        $this->encryptAndSetCookie();\n        unset($_COOKIE[$this->_name]);\n        $this->_modified = true;\n    }\n\n    /**\n     * Soft logout, delete everything links to the customer\n     * but leave there affiliate's informations.\n     * As of version 1.5 don't call this function, use Customer::mylogout() instead;.\n     */\n    public function mylogout()\n    {\n        unset(\n            $this->_content['id_customer'],\n            $this->_content['id_guest'],\n            $this->_content['is_guest'],\n            $this->_content['id_connections'],\n            $this->_content['customer_lastname'],\n            $this->_content['customer_firstname'],\n            $this->_content['passwd'],\n            $this->_content['logged'],\n            $this->_content['email'],\n            $this->_content['id_cart'],\n            $this->_content['id_address_invoice'],\n            $this->_content['id_address_delivery']\n        );\n        $this->_modified = true;\n    }\n\n    public function makeNewLog()\n    {\n        unset(\n            $this->_content['id_customer'],\n            $this->_content['id_guest']\n        );\n        Guest::setNewGuest($this);\n        $this->_modified = true;\n    }\n\n    /**\n     * Get cookie content.\n     */\n    public function update($nullValues = false)\n    {\n        if (isset($_COOKIE[$this->_name])) {\n            /* Decrypt cookie content */\n            $content = $this->cipherTool->decrypt($_COOKIE[$this->_name]);\n            //printf(\"\\$content = %s<br />\", $content);\n\n            /* Get cookie checksum */\n            $tmpTab = explode('\u00a4', $content);\n            // remove the checksum which is the last element\n            array_pop($tmpTab);\n            $content_for_checksum = implode('\u00a4', $tmpTab) . '\u00a4';\n            $checksum = hash('sha256', $this->_salt . $content_for_checksum);\n            //printf(\"\\$checksum = %s<br />\", $checksum);\n\n            /* Unserialize cookie content */\n            $tmpTab = explode('\u00a4', $content);\n            foreach ($tmpTab as $keyAndValue) {\n                $tmpTab2 = explode('|', $keyAndValue);\n                if (count($tmpTab2) == 2) {\n                    $this->_content[$tmpTab2[0]] = $tmpTab2[1];\n                }\n            }\n            /* Check if cookie has not been modified */\n            if (!isset($this->_content['checksum']) || $this->_content['checksum'] != $checksum) {\n                $this->logout();\n            }\n\n            if (!isset($this->_content['date_add'])) {\n                $this->_content['date_add'] = date('Y-m-d H:i:s');\n            }\n        } else {\n            $this->_content['date_add'] = date('Y-m-d H:i:s');\n        }\n\n        //checks if the language exists, if not choose the default language\n        if (!$this->_standalone && !Language::getLanguage((int) $this->id_lang)) {\n            $this->id_lang = Configuration::get('PS_LANG_DEFAULT');\n            // set detect_language to force going through Tools::setCookieLanguage to figure out browser lang\n            $this->detect_language = true;\n        }\n    }\n\n    /**\n     * Encrypt and set the Cookie.\n     *\n     * @param string|null $cookie Cookie content\n     *\n     * @return bool Indicates whether the Cookie was successfully set\n     *\n     * @deprecated 1.7.0\n     */\n    protected function _setcookie($cookie = null)\n    {\n        return $this->encryptAndSetCookie($cookie);\n    }\n\n    /**\n     * Encrypt and set the Cookie.\n     *\n     * @param string|null $cookie Cookie content\n     *\n     * @return bool Indicates whether the Cookie was successfully set\n     *\n     * @since 1.7.0\n     */\n    protected function encryptAndSetCookie($cookie = null)\n    {\n        // Check if the content fits in the Cookie\n        $length = (ini_get('mbstring.func_overload') & 2) ? mb_strlen($cookie, ini_get('default_charset')) : strlen($cookie);\n        if ($length >= 1048576) {\n            return false;\n        }\n        if ($cookie) {\n            $content = $this->cipherTool->encrypt($cookie);\n            $time = $this->_expire;\n        } else {\n            $content = 0;\n            $time = 1;\n        }\n\n        return setcookie($this->_name, $content, $time, $this->_path, $this->_domain, $this->_secure, true);\n    }\n\n    public function __destruct()\n    {\n        $this->write();\n    }\n\n    /**\n     * Save cookie with setcookie().\n     */\n    public function write()\n    {\n        if (!$this->_modified || headers_sent() || !$this->_allow_writing) {\n            return;\n        }\n\n        $previousChecksum = $cookie = '';\n\n        /* Serialize cookie content */\n        if (isset($this->_content['checksum'])) {\n            $previousChecksum = $this->_content['checksum'];\n            unset($this->_content['checksum']);\n        }\n        foreach ($this->_content as $key => $value) {\n            $cookie .= $key . '|' . $value . '\u00a4';\n        }\n\n        /* Add checksum to cookie */\n        $newChecksum = hash('sha256', $this->_salt . $cookie);\n        // do not set cookie if the checksum is the same: it means the content has not changed!\n        if ($previousChecksum === $newChecksum) {\n            return;\n        }\n        $cookie .= 'checksum|' . $newChecksum;\n        $this->_modified = false;\n        /* Cookies are encrypted for evident security reasons */\n        return $this->encryptAndSetCookie($cookie);\n    }\n\n    /**\n     * Get a family of variables (e.g. \"filter_\").\n     */\n    public function getFamily($origin)\n    {\n        $result = [];\n        if (count($this->_content) == 0) {\n            return $result;\n        }\n        foreach ($this->_content as $key => $value) {\n            if (strncmp($key, $origin, strlen($origin)) == 0) {\n                $result[$key] = $value;\n            }\n        }\n\n        return $result;\n    }\n\n    public function unsetFamily($origin)\n    {\n        $family = $this->getFamily($origin);\n        foreach (array_keys($family) as $member) {\n            unset($this->$member);\n        }\n    }\n\n    public function getAll()\n    {\n        return $this->_content;\n    }\n\n    /**\n     * @return string name of cookie\n     */\n    public function getName()\n    {\n        return $this->_name;\n    }\n\n    /**\n     * Check if the cookie exists.\n     *\n     * @since 1.5.0\n     *\n     * @return bool\n     */\n    public function exists()\n    {\n        return isset($_COOKIE[$this->_name]);\n    }\n\n    /**\n     * Register a new session\n     *\n     * @param SessionInterface $session\n     */\n    public function registerSession(SessionInterface $session)\n    {\n        if (isset($this->id_employee)) {\n            $session->setUserId((int) $this->id_employee);\n        } elseif (isset($this->id_customer)) {\n            $session->setUserId((int) $this->id_customer);\n        } else {\n            throw new CoreException('Invalid user id');\n        }\n\n        $session->setToken(sha1(time() . uniqid()));\n        $session->add();\n\n        $this->session_id = $session->getId();\n        $this->session_token = $session->getToken();\n    }\n\n    /**\n     * Delete session\n     *\n     * @return bool\n     */\n    public function deleteSession()\n    {\n        if (!isset($this->session_id)) {\n            return false;\n        }\n\n        $session = $this->getSession($this->session_id);\n        if ($session !== null) {\n            $session->delete();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if this session is still alive\n     *\n     * @return bool\n     */\n    public function isSessionAlive()\n    {\n        if (!isset($this->session_id, $this->session_token)) {\n            return false;\n        }\n\n        $session = $this->getSession($this->session_id);\n\n        return\n            $session !== null\n            && $session->getToken() === $this->session_token\n            && (\n                (int) $this->id_employee === $session->getUserId()\n                || (int) $this->id_customer === $session->getUserId()\n            )\n        ;\n    }\n\n    /**\n     * Retrieve session based on a session id and the employee or\n     * customer id\n     *\n     * @return SessionInterface|null\n     */\n    public function getSession($sessionId)\n    {\n        if (isset($this->id_employee)) {\n            $session = new EmployeeSession($sessionId);\n        } elseif (isset($this->id_customer)) {\n            $session = new CustomerSession($sessionId);\n        }\n\n        if (!empty($session->getId())) {\n            return $session;\n        }\n\n        return null;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nuse Defuse\\Crypto\\Key;\nuse PrestaShop\\PrestaShop\\Core\\Exception\\CoreException;\nuse PrestaShop\\PrestaShop\\Core\\Session\\SessionInterface;\n\nclass CookieCore\n{\n    /** @var array Contain cookie content in a key => value format */\n    protected $_content = [];\n\n    /** @var array Crypted cookie name for setcookie() */\n    protected $_name;\n\n    /** @var array expiration date for setcookie() */\n    protected $_expire;\n\n    /** @var array Website domain for setcookie() */\n    protected $_domain;\n\n    /** @var array Path for setcookie() */\n    protected $_path;\n\n    /** @var array cipher tool instance */\n    protected $cipherTool;\n\n    protected $_modified = false;\n\n    protected $_allow_writing;\n\n    protected $_salt;\n\n    protected $_standalone;\n\n    protected $_secure = false;\n\n    /**\n     * Get data if the cookie exists and else initialize an new one.\n     *\n     * @param $name string Cookie name before encrypting\n     * @param $path string\n     */\n    public function __construct($name, $path = '', $expire = null, $shared_urls = null, $standalone = false, $secure = false)\n    {\n        $this->_content = [];\n        $this->_standalone = $standalone;\n        $this->_expire = null === $expire ? time() + 1728000 : (int) $expire;\n        $this->_path = trim(($this->_standalone ? '' : Context::getContext()->shop->physical_uri) . $path, '/\\\\') . '/';\n        if ($this->_path[0] != '/') {\n            $this->_path = '/' . $this->_path;\n        }\n        $this->_path = rawurlencode($this->_path);\n        $this->_path = str_replace('%2F', '/', $this->_path);\n        $this->_path = str_replace('%7E', '~', $this->_path);\n        $this->_domain = $this->getDomain($shared_urls);\n        $this->_name = 'PrestaShop-' . md5(($this->_standalone ? '' : _PS_VERSION_) . $name . $this->_domain);\n        $this->_allow_writing = true;\n        $this->_salt = $this->_standalone ? str_pad('', 32, md5('ps' . __FILE__)) : _COOKIE_IV_;\n\n        if ($this->_standalone) {\n            $asciiSafeString = \\Defuse\\Crypto\\Encoding::saveBytesToChecksummedAsciiSafeString(Key::KEY_CURRENT_VERSION, str_pad($name, Key::KEY_BYTE_SIZE, md5(__FILE__)));\n            $this->cipherTool = new PhpEncryption($asciiSafeString);\n        } else {\n            $this->cipherTool = new PhpEncryption(_NEW_COOKIE_KEY_);\n        }\n\n        $this->_secure = (bool) $secure;\n\n        $this->update();\n    }\n\n    public function disallowWriting()\n    {\n        $this->_allow_writing = false;\n    }\n\n    protected function getDomain($shared_urls = null)\n    {\n        $r = '!(?:(\\w+)://)?(?:(\\w+)\\:(\\w+)@)?([^/:]+)?(?:\\:(\\d*))?([^#?]+)?(?:\\?([^#]+))?(?:#(.+$))?!i';\n\n        if (!preg_match($r, Tools::getHttpHost(false, false), $out) || !isset($out[4])) {\n            return false;\n        }\n\n        if (preg_match('/^(((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]{1}[0-9]|[1-9]).)' .\n            '{1}((25[0-5]|2[0-4][0-9]|[1]{1}[0-9]{2}|[1-9]{1}[0-9]|[0-9]).)' .\n            '{2}((25[0-5]|2[0-4][0-9]|[1]{1}[0-9]{2}|[1-9]{1}[0-9]|[0-9]){1}))$/', $out[4])) {\n            return false;\n        }\n        if (!strstr(Tools::getHttpHost(false, false), '.')) {\n            return false;\n        }\n\n        $domain = false;\n        if ($shared_urls !== null) {\n            foreach ($shared_urls as $shared_url) {\n                if ($shared_url != $out[4]) {\n                    continue;\n                }\n                if (preg_match('/^(?:.*\\.)?([^.]*(?:.{2,4})?\\..{2,3})$/Ui', $shared_url, $res)) {\n                    $domain = '.' . $res[1];\n\n                    break;\n                }\n            }\n        }\n        if (!$domain) {\n            $domain = $out[4];\n        }\n\n        return $domain;\n    }\n\n    /**\n     * Set expiration date.\n     *\n     * @param int $expire Expiration time from now\n     */\n    public function setExpire($expire)\n    {\n        $this->_expire = (int) ($expire);\n    }\n\n    /**\n     * Magic method wich return cookie data from _content array.\n     *\n     * @param string $key key wanted\n     *\n     * @return string value corresponding to the key\n     */\n    public function __get($key)\n    {\n        return isset($this->_content[$key]) ? $this->_content[$key] : false;\n    }\n\n    /**\n     * Magic method which check if key exists in the cookie.\n     *\n     * @param string $key key wanted\n     *\n     * @return bool key existence\n     */\n    public function __isset($key)\n    {\n        return isset($this->_content[$key]);\n    }\n\n    /**\n     * Magic method which adds data into _content array.\n     *\n     * @param string $key Access key for the value\n     * @param mixed $value Value corresponding to the key\n     *\n     * @throws Exception\n     */\n    public function __set($key, $value)\n    {\n        if (is_array($value)) {\n            die(Tools::displayError());\n        }\n        if (preg_match('/\u00a4|\\|/', $key . $value)) {\n            throw new Exception('Forbidden chars in cookie');\n        }\n        if (!$this->_modified && (!array_key_exists($key, $this->_content) || $this->_content[$key] != $value)) {\n            $this->_modified = true;\n        }\n        $this->_content[$key] = $value;\n    }\n\n    /**\n     * Magic method which delete data into _content array.\n     *\n     * @param string $key key wanted\n     */\n    public function __unset($key)\n    {\n        if (isset($this->_content[$key])) {\n            $this->_modified = true;\n        }\n        unset($this->_content[$key]);\n    }\n\n    /**\n     * Check customer informations saved into cookie and return customer validity.\n     *\n     * @deprecated as of version 1.5 use Customer::isLogged() instead\n     *\n     * @return bool customer validity\n     */\n    public function isLogged($withGuest = false)\n    {\n        Tools::displayAsDeprecated('Use Customer::isLogged() instead');\n        if (!$withGuest && $this->is_guest == 1) {\n            return false;\n        }\n\n        /* Customer is valid only if it can be load and if cookie password is the same as database one */\n        if ($this->logged == 1 && $this->id_customer && Validate::isUnsignedId($this->id_customer) && Customer::checkPassword((int) ($this->id_customer), $this->passwd)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check employee informations saved into cookie and return employee validity.\n     *\n     * @deprecated as of version 1.5 use Employee::isLoggedBack() instead\n     *\n     * @return bool employee validity\n     */\n    public function isLoggedBack()\n    {\n        Tools::displayAsDeprecated('Use Employee::isLoggedBack() instead');\n        /* Employee is valid only if it can be load and if cookie password is the same as database one */\n        return $this->id_employee\n            && Validate::isUnsignedId($this->id_employee)\n            && Employee::checkPassword((int) $this->id_employee, $this->passwd)\n            && (!isset($this->_content['remote_addr']) || $this->_content['remote_addr'] == ip2long(Tools::getRemoteAddr()) || !Configuration::get('PS_COOKIE_CHECKIP'));\n    }\n\n    /**\n     * Delete cookie\n     * As of version 1.5 don't call this function, use Customer::logout() or Employee::logout() instead;.\n     */\n    public function logout()\n    {\n        $this->deleteSession();\n        $this->_content = [];\n        $this->encryptAndSetCookie();\n        unset($_COOKIE[$this->_name]);\n        $this->_modified = true;\n    }\n\n    /**\n     * Soft logout, delete everything links to the customer\n     * but leave there affiliate's informations.\n     * As of version 1.5 don't call this function, use Customer::mylogout() instead;.\n     */\n    public function mylogout()\n    {\n        $this->deleteSession();\n        unset(\n            $this->_content['id_customer'],\n            $this->_content['id_guest'],\n            $this->_content['is_guest'],\n            $this->_content['id_connections'],\n            $this->_content['customer_lastname'],\n            $this->_content['customer_firstname'],\n            $this->_content['passwd'],\n            $this->_content['logged'],\n            $this->_content['email'],\n            $this->_content['id_cart'],\n            $this->_content['id_address_invoice'],\n            $this->_content['id_address_delivery']\n        );\n        $this->_modified = true;\n    }\n\n    public function makeNewLog()\n    {\n        unset(\n            $this->_content['id_customer'],\n            $this->_content['id_guest']\n        );\n        Guest::setNewGuest($this);\n        $this->_modified = true;\n    }\n\n    /**\n     * Get cookie content.\n     */\n    public function update($nullValues = false)\n    {\n        if (isset($_COOKIE[$this->_name])) {\n            /* Decrypt cookie content */\n            $content = $this->cipherTool->decrypt($_COOKIE[$this->_name]);\n            //printf(\"\\$content = %s<br />\", $content);\n\n            /* Get cookie checksum */\n            $tmpTab = explode('\u00a4', $content);\n            // remove the checksum which is the last element\n            array_pop($tmpTab);\n            $content_for_checksum = implode('\u00a4', $tmpTab) . '\u00a4';\n            $checksum = hash('sha256', $this->_salt . $content_for_checksum);\n            //printf(\"\\$checksum = %s<br />\", $checksum);\n\n            /* Unserialize cookie content */\n            $tmpTab = explode('\u00a4', $content);\n            foreach ($tmpTab as $keyAndValue) {\n                $tmpTab2 = explode('|', $keyAndValue);\n                if (count($tmpTab2) == 2) {\n                    $this->_content[$tmpTab2[0]] = $tmpTab2[1];\n                }\n            }\n            /* Check if cookie has not been modified */\n            if (!isset($this->_content['checksum']) || $this->_content['checksum'] != $checksum) {\n                $this->logout();\n            }\n\n            if (!isset($this->_content['date_add'])) {\n                $this->_content['date_add'] = date('Y-m-d H:i:s');\n            }\n        } else {\n            $this->_content['date_add'] = date('Y-m-d H:i:s');\n        }\n\n        //checks if the language exists, if not choose the default language\n        if (!$this->_standalone && !Language::getLanguage((int) $this->id_lang)) {\n            $this->id_lang = Configuration::get('PS_LANG_DEFAULT');\n            // set detect_language to force going through Tools::setCookieLanguage to figure out browser lang\n            $this->detect_language = true;\n        }\n    }\n\n    /**\n     * Encrypt and set the Cookie.\n     *\n     * @param string|null $cookie Cookie content\n     *\n     * @return bool Indicates whether the Cookie was successfully set\n     *\n     * @deprecated 1.7.0\n     */\n    protected function _setcookie($cookie = null)\n    {\n        return $this->encryptAndSetCookie($cookie);\n    }\n\n    /**\n     * Encrypt and set the Cookie.\n     *\n     * @param string|null $cookie Cookie content\n     *\n     * @return bool Indicates whether the Cookie was successfully set\n     *\n     * @since 1.7.0\n     */\n    protected function encryptAndSetCookie($cookie = null)\n    {\n        // Check if the content fits in the Cookie\n        $length = (ini_get('mbstring.func_overload') & 2) ? mb_strlen($cookie, ini_get('default_charset')) : strlen($cookie);\n        if ($length >= 1048576) {\n            return false;\n        }\n        if ($cookie) {\n            $content = $this->cipherTool->encrypt($cookie);\n            $time = $this->_expire;\n        } else {\n            $content = 0;\n            $time = 1;\n        }\n\n        return setcookie($this->_name, $content, $time, $this->_path, $this->_domain, $this->_secure, true);\n    }\n\n    public function __destruct()\n    {\n        $this->write();\n    }\n\n    /**\n     * Save cookie with setcookie().\n     */\n    public function write()\n    {\n        if (!$this->_modified || headers_sent() || !$this->_allow_writing) {\n            return;\n        }\n\n        $previousChecksum = $cookie = '';\n\n        /* Serialize cookie content */\n        if (isset($this->_content['checksum'])) {\n            $previousChecksum = $this->_content['checksum'];\n            unset($this->_content['checksum']);\n        }\n        foreach ($this->_content as $key => $value) {\n            $cookie .= $key . '|' . $value . '\u00a4';\n        }\n\n        /* Add checksum to cookie */\n        $newChecksum = hash('sha256', $this->_salt . $cookie);\n        // do not set cookie if the checksum is the same: it means the content has not changed!\n        if ($previousChecksum === $newChecksum) {\n            return;\n        }\n        $cookie .= 'checksum|' . $newChecksum;\n        $this->_modified = false;\n        /* Cookies are encrypted for evident security reasons */\n        return $this->encryptAndSetCookie($cookie);\n    }\n\n    /**\n     * Get a family of variables (e.g. \"filter_\").\n     */\n    public function getFamily($origin)\n    {\n        $result = [];\n        if (count($this->_content) == 0) {\n            return $result;\n        }\n        foreach ($this->_content as $key => $value) {\n            if (strncmp($key, $origin, strlen($origin)) == 0) {\n                $result[$key] = $value;\n            }\n        }\n\n        return $result;\n    }\n\n    public function unsetFamily($origin)\n    {\n        $family = $this->getFamily($origin);\n        foreach (array_keys($family) as $member) {\n            unset($this->$member);\n        }\n    }\n\n    public function getAll()\n    {\n        return $this->_content;\n    }\n\n    /**\n     * @return string name of cookie\n     */\n    public function getName()\n    {\n        return $this->_name;\n    }\n\n    /**\n     * Check if the cookie exists.\n     *\n     * @since 1.5.0\n     *\n     * @return bool\n     */\n    public function exists()\n    {\n        return isset($_COOKIE[$this->_name]);\n    }\n\n    /**\n     * Register a new session\n     *\n     * @param SessionInterface $session\n     */\n    public function registerSession(SessionInterface $session)\n    {\n        if (isset($this->id_employee)) {\n            $session->setUserId((int) $this->id_employee);\n        } elseif (isset($this->id_customer)) {\n            $session->setUserId((int) $this->id_customer);\n        } else {\n            throw new CoreException('Invalid user id');\n        }\n\n        $session->setToken(sha1(time() . uniqid()));\n        $session->add();\n\n        $this->session_id = $session->getId();\n        $this->session_token = $session->getToken();\n    }\n\n    /**\n     * Delete session\n     *\n     * @return bool\n     */\n    public function deleteSession()\n    {\n        if (!isset($this->session_id)) {\n            return false;\n        }\n\n        $session = $this->getSession($this->session_id);\n        if ($session !== null) {\n            $session->delete();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if this session is still alive\n     *\n     * @return bool\n     */\n    public function isSessionAlive()\n    {\n        if (!isset($this->session_id) || !isset($this->session_token)) {\n            return false;\n        }\n\n        $session = $this->getSession($this->session_id);\n\n        return\n            $session !== null\n            && $session->getToken() === $this->session_token\n            && (\n                (int) $this->id_employee === $session->getUserId()\n                || (int) $this->id_customer === $session->getUserId()\n            )\n        ;\n    }\n\n    /**\n     * Retrieve session based on a session id and the employee or\n     * customer id\n     *\n     * @return SessionInterface|null\n     */\n    public function getSession($sessionId)\n    {\n        if (isset($this->id_employee)) {\n            $session = new EmployeeSession($sessionId);\n        } elseif (isset($this->id_customer)) {\n            $session = new CustomerSession($sessionId);\n        }\n\n        if (!empty($session->getId())) {\n            return $session;\n        }\n\n        return null;\n    }\n}\n"], "filenames": ["classes/Cookie.php"], "buggy_code_start_loc": [264], "buggy_code_end_loc": [518], "fixing_code_start_loc": [265], "fixing_code_end_loc": [519], "type": "CWE-287", "message": "PrestaShop is a fully scalable open source e-commerce solution. In PrestaShop before version 1.7.2 the soft logout system is not complete and an attacker is able to foreign request and executes customer commands. The problem is fixed in 1.7.7.2", "other": {"cve": {"id": "CVE-2021-21308", "sourceIdentifier": "security-advisories@github.com", "published": "2021-02-26T20:15:12.313", "lastModified": "2021-03-05T19:04:56.670", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrestaShop is a fully scalable open source e-commerce solution. In PrestaShop before version 1.7.2 the soft logout system is not complete and an attacker is able to foreign request and executes customer commands. The problem is fixed in 1.7.7.2"}, {"lang": "es", "value": "PrestaShop es una soluci\u00f3n de comercio electr\u00f3nico de c\u00f3digo abierto totalmente escalable. En PrestaShop versiones anteriores a 1.7.2, el sistema de cierre de sesi\u00f3n suave no est\u00e1 completo y un atacante puede realizar peticiones externas y ejecutar comandos del cliente. El problema es corregido en versi\u00f3n 1.7.7.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.5.0.0", "versionEndExcluding": "1.7.7.2", "matchCriteriaId": "EC809966-E71A-48D8-AE01-571CC59B9254"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/2f673bd93e313f08c35e74decc105f40dc0b7dee", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/releases/tag/1.7.7.2", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-557h-hf3c-whcg", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/2f673bd93e313f08c35e74decc105f40dc0b7dee"}}