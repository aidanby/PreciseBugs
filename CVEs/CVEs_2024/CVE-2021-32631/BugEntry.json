{"buggy_code": ["package eu.nimble.utility.validation;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport eu.nimble.utility.JsonSerializationUtility;\nimport eu.nimble.utility.exception.AuthenticationException;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport org.apache.commons.codec.binary.Base64;\nimport org.jose4j.keys.RsaKeyUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.security.PublicKey;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * Created by suat on 02-Sep-19.\n */\n@Component\n@Profile(\"!test\")\npublic class ValidationUtil implements IValidationUtil {\n    private static final Logger logger = LoggerFactory.getLogger(ValidationUtil.class);\n\n    @Value(\"${nimble.keycloak.public-key}\")\n    private String keycloakPublicKey;\n\n    public Claims validateToken(String token) throws AuthenticationException {\n        try {\n            RsaKeyUtil rsaKeyUtil = new RsaKeyUtil();\n            PublicKey publicKey = rsaKeyUtil.fromPemEncoded(keycloakPublicKey);\n\n            return (Claims) Jwts.parser().setSigningKey(publicKey).parse(token.replace(\"Bearer \", \"\")).getBody();\n        } catch (Exception e){\n            throw new AuthenticationException(String.format(\"Failed to check user authorization for token: %s\", token), e);\n        }\n    }\n\n    public boolean validateRole(String token,List<String> userRoles, NimbleRole[] requiredRoles) {\n        for (NimbleRole requiredRole : requiredRoles) {\n            for (String userRole : userRoles) {\n                if (userRole.contentEquals(requiredRole.getName())) {\n                    return true;\n                }\n            }\n        }\n        logger.warn(\"Token: {} does not include one of the roles: {}\",token,\n                Arrays.asList(requiredRoles).stream().map(role -> role.getName()).collect(Collectors.joining(\", \",\"[\",\"]\")));\n        return false;\n    }\n\n    public Claims getClaims(String token) throws AuthenticationException {\n        try {\n            String[] split_string = token.split(\"\\\\.\");\n            String base64EncodedBody = split_string[1];\n\n            Base64 base64Url = new Base64(true);\n            String body = new String(base64Url.decode(base64EncodedBody));\n\n            Map<String, Object> map = JsonSerializationUtility.getObjectMapper().readValue(body,new TypeReference<Map<String, Object>>() {\n            });\n\n            return Jwts.claims(map);\n        } catch (IOException e) {\n            throw new AuthenticationException(String.format(\"Failed to get Claims for token: %s\", token), e);\n        }\n    }\n}\n"], "fixing_code": ["package eu.nimble.utility.validation;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport eu.nimble.utility.JsonSerializationUtility;\nimport eu.nimble.utility.exception.AuthenticationException;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport org.apache.commons.codec.binary.Base64;\nimport org.jose4j.keys.RsaKeyUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.security.PublicKey;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * Created by suat on 02-Sep-19.\n */\n@Component\n@Profile(\"!test\")\npublic class ValidationUtil implements IValidationUtil {\n    private static final Logger logger = LoggerFactory.getLogger(ValidationUtil.class);\n\n    @Value(\"${nimble.keycloak.public-key}\")\n    private String keycloakPublicKey;\n\n    public Claims validateToken(String token) throws AuthenticationException {\n        try {\n            RsaKeyUtil rsaKeyUtil = new RsaKeyUtil();\n            PublicKey publicKey = rsaKeyUtil.fromPemEncoded(keycloakPublicKey);\n\n            return Jwts.parser().setSigningKey(publicKey).parseJws(token.replace(\"Bearer \", \"\")).getBody();\n        } catch (Exception e){\n            throw new AuthenticationException(String.format(\"Failed to check user authorization for token: %s\", token), e);\n        }\n    }\n\n    public boolean validateRole(String token,List<String> userRoles, NimbleRole[] requiredRoles) {\n        for (NimbleRole requiredRole : requiredRoles) {\n            for (String userRole : userRoles) {\n                if (userRole.contentEquals(requiredRole.getName())) {\n                    return true;\n                }\n            }\n        }\n        logger.warn(\"Token: {} does not include one of the roles: {}\",token,\n                Arrays.asList(requiredRoles).stream().map(role -> role.getName()).collect(Collectors.joining(\", \",\"[\",\"]\")));\n        return false;\n    }\n\n    public Claims getClaims(String token) throws AuthenticationException {\n        try {\n            String[] split_string = token.split(\"\\\\.\");\n            String base64EncodedBody = split_string[1];\n\n            Base64 base64Url = new Base64(true);\n            String body = new String(base64Url.decode(base64EncodedBody));\n\n            Map<String, Object> map = JsonSerializationUtility.getObjectMapper().readValue(body,new TypeReference<Map<String, Object>>() {\n            });\n\n            return Jwts.claims(map);\n        } catch (IOException e) {\n            throw new AuthenticationException(String.format(\"Failed to get Claims for token: %s\", token), e);\n        }\n    }\n}\n"], "filenames": ["utility/src/main/java/eu/nimble/utility/validation/ValidationUtil.java"], "buggy_code_start_loc": [39], "buggy_code_end_loc": [40], "fixing_code_start_loc": [39], "fixing_code_end_loc": [40], "type": "CWE-290", "message": "Common is a package of common modules that can be accessed by NIMBLE services. Common before commit number 3b96cb0293d3443b870351945f41d7d55cb34b53 did not properly verify the signature of JSON Web Tokens. This allows someone to forge a valid JWT. Being able to forge JWTs may lead to authentication bypasses. Commit number 3b96cb0293d3443b870351945f41d7d55cb34b53 contains a patch for the issue. As a workaround, one may use the parseClaimsJws method to correctly verify the signature of a JWT.", "other": {"cve": {"id": "CVE-2021-32631", "sourceIdentifier": "security-advisories@github.com", "published": "2021-07-26T16:15:07.637", "lastModified": "2021-08-13T13:13:53.790", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Common is a package of common modules that can be accessed by NIMBLE services. Common before commit number 3b96cb0293d3443b870351945f41d7d55cb34b53 did not properly verify the signature of JSON Web Tokens. This allows someone to forge a valid JWT. Being able to forge JWTs may lead to authentication bypasses. Commit number 3b96cb0293d3443b870351945f41d7d55cb34b53 contains a patch for the issue. As a workaround, one may use the parseClaimsJws method to correctly verify the signature of a JWT."}, {"lang": "es", "value": "Common es un paquete de m\u00f3dulos comunes al que se puede acceder por los servicios de NIMBLE. Common anterior al commit n\u00famero 3b96cb0293d3443b870351945f41d7d55cb34b53 no verificaba apropiadamente la firma de los Tokens Web JSON. Esto permite que alguien falsifique un JWT v\u00e1lido. La posibilidad de falsificar JWTs puede conllevar a omisiones de autenticaci\u00f3n. El commit n\u00famero 3b96cb0293d3443b870351945f41d7d55cb34b53 contiene un parche para el problema. Como soluci\u00f3n, se puede usar el m\u00e9todo parseClaimsJws para verificar correctamente la firma de un JWT"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-290"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-290"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nimble-project:common:-:*:*:*:*:*:*:*", "matchCriteriaId": "89249F6B-9A11-475A-9B1E-44F9FD150295"}]}]}], "references": [{"url": "https://github.com/nimble-platform/common/commit/12197a755bd524559bf4e16475595a2c6fcd34db", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nimble-platform/common/commit/3b96cb0293d3443b870351945f41d7d55cb34b53", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nimble-platform/common/commit/a59ad46733912a5580530e39cac0e6ebc83cc563", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nimble-platform/common/security/advisories/GHSA-fjq8-896w-pv28", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nimble-platform/common/commit/12197a755bd524559bf4e16475595a2c6fcd34db"}}