{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\System;\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Settings;\nuse Froxlor\\Validate\\Validate;\n\nclass Crypt\n{\n\n\t/**\n\t * Generates a random password\n\t *\n\t * @param int $length optional, will be read from settings if not given\n\t * @param bool $isSalt optional, default false, do not include special characters\n\t *\n\t * @return string\n\t */\n\tpublic static function generatePassword(int $length = 0, bool $isSalt = false): string\n\t{\n\t\t$alpha_lower = 'abcdefghijklmnopqrstuvwxyz';\n\t\t$alpha_upper = strtoupper($alpha_lower);\n\t\t$numeric = '0123456789';\n\t\t$special = Settings::Get('panel.password_special_char');\n\t\tif (empty($length)) {\n\t\t\t$length = Settings::Get('panel.password_min_length') > 3 ? Settings::Get('panel.password_min_length') : 10;\n\t\t}\n\n\t\t$pw = self::specialShuffle($alpha_lower);\n\t\t$n = floor(($length) / 4);\n\n\t\tif (Settings::Get('panel.password_alpha_upper')) {\n\t\t\t$pw .= mb_substr(self::specialShuffle($alpha_upper), 0, $n);\n\t\t}\n\n\t\tif (Settings::Get('panel.password_numeric')) {\n\t\t\t$pw .= mb_substr(self::specialShuffle($numeric), 0, $n);\n\t\t}\n\n\t\tif (Settings::Get('panel.password_special_char_required') && !$isSalt) {\n\t\t\t$pw .= mb_substr(self::specialShuffle($special), 0, $n);\n\t\t}\n\n\t\t$pw = mb_substr($pw, -$length);\n\n\t\treturn self::specialShuffle($pw);\n\t}\n\n\t/**\n\t * multibyte-character safe shuffle function\n\t *\n\t * @param string $str\n\t *\n\t * @return string\n\t */\n\tprivate static function specialShuffle(string $str): string\n\t{\n\t\t$len = mb_strlen($str);\n\t\t$sploded = [];\n\t\twhile ($len-- > 0) {\n\t\t\t$sploded[] = mb_substr($str, $len, 1);\n\t\t}\n\t\tshuffle($sploded);\n\t\treturn join('', $sploded);\n\t}\n\n\t/**\n\t * return an array of available hashes\n\t *\n\t * @return array\n\t */\n\tpublic static function getAvailablePasswordHashes(): array\n\t{\n\t\t// get available pwd-hases\n\t\t$available_pwdhashes = [\n\t\t\tPASSWORD_DEFAULT => lng('serversettings.systemdefault')\n\t\t];\n\t\tif (defined('PASSWORD_BCRYPT')) {\n\t\t\t$available_pwdhashes[PASSWORD_BCRYPT] = 'Bcrypt/Blowfish' . (PASSWORD_DEFAULT == PASSWORD_BCRYPT ? ' (' . lng('serversettings.systemdefault') . ')' : '');\n\t\t}\n\t\tif (defined('PASSWORD_ARGON2I')) {\n\t\t\t$available_pwdhashes[PASSWORD_ARGON2I] = 'Argon2i' . (PASSWORD_DEFAULT == PASSWORD_ARGON2I ? ' (' . lng('serversettings.systemdefault') . ')' : '');\n\t\t}\n\t\tif (defined('PASSWORD_ARGON2ID')) {\n\t\t\t$available_pwdhashes[PASSWORD_ARGON2ID] = 'Argon2id' . (PASSWORD_DEFAULT == PASSWORD_ARGON2ID ? ' (' . lng('serversettings.systemdefault') . ')' : '');\n\t\t}\n\n\t\treturn $available_pwdhashes;\n\t}\n\n\t/**\n\t * Function validatePassword\n\t *\n\t * if password-min-length is set in settings\n\t * we check against the length, if not matched\n\t * an error message will be output and 'exit' is called\n\t *\n\t * @param string $password the password to validate\n\t * @param bool $json_response\n\t *\n\t * @return string either the password or an errormessage+exit\n\t */\n\tpublic static function validatePassword(string $password, bool $json_response = false): string\n\t{\n\t\tif (Settings::Get('panel.password_min_length') > 0) {\n\t\t\t$password = Validate::validate($password, Settings::Get('panel.password_min_length'),\n\t\t\t\t'/^.{' . (int)Settings::Get('panel.password_min_length') . ',}$/D', 'notrequiredpasswordlength', [],\n\t\t\t\t$json_response);\n\t\t}\n\n\t\tif (Settings::Get('panel.password_regex') != '') {\n\t\t\t$password = Validate::validate($password, Settings::Get('panel.password_regex'),\n\t\t\t\tSettings::Get('panel.password_regex'), 'notrequiredpasswordcomplexity', [], $json_response);\n\t\t} else {\n\t\t\tif (Settings::Get('panel.password_alpha_lower')) {\n\t\t\t\t$password = Validate::validate($password, '/.*[a-z]+.*/', '/.*[a-z]+.*/',\n\t\t\t\t\t'notrequiredpasswordcomplexity', [], $json_response);\n\t\t\t}\n\t\t\tif (Settings::Get('panel.password_alpha_upper')) {\n\t\t\t\t$password = Validate::validate($password, '/.*[A-Z]+.*/', '/.*[A-Z]+.*/',\n\t\t\t\t\t'notrequiredpasswordcomplexity', [], $json_response);\n\t\t\t}\n\t\t\tif (Settings::Get('panel.password_numeric')) {\n\t\t\t\t$password = Validate::validate($password, '/.*[0-9]+.*/', '/.*[0-9]+.*/',\n\t\t\t\t\t'notrequiredpasswordcomplexity', [], $json_response);\n\t\t\t}\n\t\t\tif (Settings::Get('panel.password_special_char_required')) {\n\t\t\t\t$password = Validate::validate($password,\n\t\t\t\t\t'/.*[' . preg_quote(Settings::Get('panel.password_special_char'), '/') . ']+.*/',\n\t\t\t\t\t'/.*[' . preg_quote(Settings::Get('panel.password_special_char'), '/') . ']+.*/',\n\t\t\t\t\t'notrequiredpasswordcomplexity', [], $json_response);\n\t\t\t}\n\t\t}\n\n\t\treturn $password;\n\t}\n\n\t/**\n\t * Function validatePasswordLogin\n\t *\n\t * compare user password-hash with given user-password\n\t * and check if they are the same\n\t * additionally it updates the hash if the system settings changed\n\t * or if the very old md5() sum is used\n\t *\n\t * @param array $userinfo user-data from table\n\t * @param string $password the password to validate\n\t * @param string $table either panel_customers or panel_admins\n\t * @param string $uid user-id-field in $table\n\t *\n\t * @return bool\n\t * @throws \\Exception\n\t */\n\tpublic static function validatePasswordLogin(\n\t\tarray $userinfo,\n\t\tstring $password,\n\t\tstring $table = 'panel_customers',\n\t\tstring $uid = 'customerid'\n\t): bool {\n\t\t$algo = Settings::Get('system.passwordcryptfunc') !== null ? Settings::Get('system.passwordcryptfunc') : PASSWORD_DEFAULT;\n\t\tif (is_numeric($algo)) {\n\t\t\t// old setting format\n\t\t\t$algo = PASSWORD_DEFAULT;\n\t\t\tSettings::Set('system.passwordcryptfunc', $algo);\n\t\t}\n\t\t$pwd_hash = $userinfo['password'];\n\n\t\t$update_hash = false;\n\t\t$pwd_check = \"\";\n\t\t// check for good'ole md5\n\t\tif (strlen($pwd_hash) == 32 && ctype_xdigit($pwd_hash)) {\n\t\t\t$pwd_check = md5($password);\n\t\t\t$update_hash = true;\n\t\t}\n\n\t\tif ($pwd_hash == $pwd_check || password_verify($password, $pwd_hash)) {\n\t\t\t// check for update of hash (only if our database is ready to handle the bigger string)\n\t\t\t$is_ready = Froxlor::versionCompare2(\"0.9.33\", Froxlor::getVersion()) <= 0;\n\t\t\tif ((password_needs_rehash($pwd_hash, $algo) || $update_hash) && $is_ready) {\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE \" . $table . \" SET `password` = :newpasswd WHERE `\" . $uid . \"` = :uid\n\t\t\t\t\");\n\t\t\t\t$params = [\n\t\t\t\t\t'newpasswd' => self::makeCryptPassword($password),\n\t\t\t\t\t'uid' => $userinfo[$uid]\n\t\t\t\t];\n\t\t\t\tDatabase::pexecute($upd_stmt, $params);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Make encrypted password from clear text password\n\t *\n\t * @param string $password Password to be encrypted\n\t * @param bool $htpasswd optional whether to generate a bcrypt password for directory protection\n\t * @param bool $ftpd optional generates sha256 password strings for proftpd/pureftpd\n\t *\n\t * @return string encrypted password\n\t */\n\tpublic static function makeCryptPassword(string $password, bool $htpasswd = false, bool $ftpd = false): string\n\t{\n\t\tif ($htpasswd || $ftpd) {\n\t\t\tif ($ftpd) {\n\t\t\t\t// sha256 compatible for proftpd and pure-ftpd\n\t\t\t\treturn crypt($password, '$5$' . self::generatePassword(16, true) . '$');\n\t\t\t}\n\t\t\t// bcrypt hash for dir-protection\n\t\t\treturn password_hash($password, PASSWORD_BCRYPT);\n\t\t}\n\t\t// crypt using the specified crypt-algorithm or system default\n\t\t$algo = Settings::Get('system.passwordcryptfunc') !== null ? Settings::Get('system.passwordcryptfunc') : PASSWORD_DEFAULT;\n\t\treturn password_hash($password, $algo);\n\t}\n\n\t/**\n\t * creates a self-signed ECC-certificate for the froxlor-vhost\n\t * and sets the content to the corresponding files set in the\n\t * settings for ssl-certificate-file and ssl-certificate-key\n\t *\n\t * @return void\n\t */\n\tpublic static function createSelfSignedCertificate()\n\t{\n\t\t// validate that we have file names in the settings\n\t\t$certFile = Settings::Get('system.ssl_cert_file');\n\t\t$keyFile = Settings::Get('system.ssl_key_file');\n\t\tif (empty($certFile)) {\n\t\t\t$certFile = '/etc/ssl/froxlor_selfsigned.pem';\n\t\t\tSettings::Set('system.ssl_cert_file', $certFile);\n\t\t}\n\t\tif (empty($keyFile)) {\n\t\t\t$keyFile = '/etc/ssl/froxlor_selfsigned.key';\n\t\t\tSettings::Set('system.ssl_key_file', $keyFile);\n\t\t}\n\n\t\t// certificate info\n\t\t$dn = [\n\t\t\t\"countryName\" => \"DE\",\n\t\t\t\"stateOrProvinceName\" => \"Hessen\",\n\t\t\t\"localityName\" => \"Frankfurt am Main\",\n\t\t\t\"organizationName\" => \"froxlor\",\n\t\t\t\"organizationalUnitName\" => \"froxlor Server Management Panel\",\n\t\t\t\"commonName\" => Settings::Get('system.hostname'),\n\t\t\t\"emailAddress\" => Settings::Get('panel.adminmail')\n\t\t];\n\t\t// create private key\n\t\t$privkey = openssl_pkey_new([\n\t\t\t\"private_key_type\" => OPENSSL_KEYTYPE_EC,\n\t\t\t\"curve_name\" => 'prime256v1',\n\t\t]);\n\t\t// create signing request\n\t\t$csr = openssl_csr_new($dn, $privkey, array('digest_alg' => 'sha384'));\n\t\t// sign csr\n\t\t$x509 = openssl_csr_sign($csr, null, $privkey, 365, array('digest_alg' => 'sha384'));\n\t\t// export to files\n\t\topenssl_x509_export_to_file($x509, $certFile);\n\t\topenssl_pkey_export_to_file($privkey, $keyFile);\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\System;\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Settings;\nuse Froxlor\\Validate\\Validate;\n\nclass Crypt\n{\n\n\t/**\n\t * Generates a random password\n\t *\n\t * @param int $length optional, will be read from settings if not given\n\t * @param bool $isSalt optional, default false, do not include special characters\n\t *\n\t * @return string\n\t */\n\tpublic static function generatePassword(int $length = 0, bool $isSalt = false): string\n\t{\n\t\t$alpha_lower = 'abcdefghijklmnopqrstuvwxyz';\n\t\t$alpha_upper = strtoupper($alpha_lower);\n\t\t$numeric = '0123456789';\n\t\t$special = Settings::Get('panel.password_special_char');\n\t\tif (empty($length)) {\n\t\t\t$length = Settings::Get('panel.password_min_length') > 3 ? Settings::Get('panel.password_min_length') : 10;\n\t\t}\n\n\t\t$pw = self::specialShuffle($alpha_lower);\n\t\t$n = floor(($length) / 4);\n\n\t\tif (Settings::Get('panel.password_alpha_upper')) {\n\t\t\t$pw .= mb_substr(self::specialShuffle($alpha_upper), 0, $n);\n\t\t}\n\n\t\tif (Settings::Get('panel.password_numeric')) {\n\t\t\t$pw .= mb_substr(self::specialShuffle($numeric), 0, $n);\n\t\t}\n\n\t\tif (Settings::Get('panel.password_special_char_required') && !$isSalt) {\n\t\t\t$pw .= mb_substr(self::specialShuffle($special), 0, $n);\n\t\t}\n\n\t\t$pw = mb_substr($pw, -$length);\n\n\t\treturn self::specialShuffle($pw);\n\t}\n\n\t/**\n\t * multibyte-character safe shuffle function\n\t *\n\t * @param string $str\n\t *\n\t * @return string\n\t */\n\tprivate static function specialShuffle(string $str): string\n\t{\n\t\t$len = mb_strlen($str);\n\t\t$sploded = [];\n\t\twhile ($len-- > 0) {\n\t\t\t$sploded[] = mb_substr($str, $len, 1);\n\t\t}\n\t\tshuffle($sploded);\n\t\treturn join('', $sploded);\n\t}\n\n\t/**\n\t * return an array of available hashes\n\t *\n\t * @return array\n\t */\n\tpublic static function getAvailablePasswordHashes(): array\n\t{\n\t\t// get available pwd-hases\n\t\t$available_pwdhashes = [\n\t\t\tPASSWORD_DEFAULT => lng('serversettings.systemdefault')\n\t\t];\n\t\tif (defined('PASSWORD_BCRYPT')) {\n\t\t\t$available_pwdhashes[PASSWORD_BCRYPT] = 'Bcrypt/Blowfish' . (PASSWORD_DEFAULT == PASSWORD_BCRYPT ? ' (' . lng('serversettings.systemdefault') . ')' : '');\n\t\t}\n\t\tif (defined('PASSWORD_ARGON2I')) {\n\t\t\t$available_pwdhashes[PASSWORD_ARGON2I] = 'Argon2i' . (PASSWORD_DEFAULT == PASSWORD_ARGON2I ? ' (' . lng('serversettings.systemdefault') . ')' : '');\n\t\t}\n\t\tif (defined('PASSWORD_ARGON2ID')) {\n\t\t\t$available_pwdhashes[PASSWORD_ARGON2ID] = 'Argon2id' . (PASSWORD_DEFAULT == PASSWORD_ARGON2ID ? ' (' . lng('serversettings.systemdefault') . ')' : '');\n\t\t}\n\n\t\treturn $available_pwdhashes;\n\t}\n\n\t/**\n\t * Function validatePassword\n\t *\n\t * if password-min-length is set in settings\n\t * we check against the length, if not matched\n\t * an error message will be output and 'exit' is called\n\t *\n\t * @param string $password the password to validate\n\t * @param bool $json_response\n\t *\n\t * @return string either the password or an errormessage+exit\n\t */\n\tpublic static function validatePassword(string $password, bool $json_response = false): string\n\t{\n\t\tif (Settings::Get('panel.password_min_length') > 0) {\n\t\t\t$password = Validate::validate($password, Settings::Get('panel.password_min_length'),\n\t\t\t\t'/^.{' . (int)Settings::Get('panel.password_min_length') . ',}$/D', 'notrequiredpasswordlength', [],\n\t\t\t\t$json_response);\n\t\t}\n\n\t\tif (Settings::Get('panel.password_regex') != '') {\n\t\t\t$password = Validate::validate($password, Settings::Get('panel.password_regex'),\n\t\t\t\tSettings::Get('panel.password_regex'), 'notrequiredpasswordcomplexity', [], $json_response);\n\t\t} else {\n\t\t\tif (Settings::Get('panel.password_alpha_lower')) {\n\t\t\t\t$password = Validate::validate($password, '/.*[a-z]+.*/', '/.*[a-z]+.*/',\n\t\t\t\t\t'notrequiredpasswordcomplexity', [], $json_response);\n\t\t\t}\n\t\t\tif (Settings::Get('panel.password_alpha_upper')) {\n\t\t\t\t$password = Validate::validate($password, '/.*[A-Z]+.*/', '/.*[A-Z]+.*/',\n\t\t\t\t\t'notrequiredpasswordcomplexity', [], $json_response);\n\t\t\t}\n\t\t\tif (Settings::Get('panel.password_numeric')) {\n\t\t\t\t$password = Validate::validate($password, '/.*[0-9]+.*/', '/.*[0-9]+.*/',\n\t\t\t\t\t'notrequiredpasswordcomplexity', [], $json_response);\n\t\t\t}\n\t\t\tif (Settings::Get('panel.password_special_char_required')) {\n\t\t\t\t$password = Validate::validate($password,\n\t\t\t\t\t'/.*[' . preg_quote(Settings::Get('panel.password_special_char'), '/') . ']+.*/',\n\t\t\t\t\t'/.*[' . preg_quote(Settings::Get('panel.password_special_char'), '/') . ']+.*/',\n\t\t\t\t\t'notrequiredpasswordcomplexity', [], $json_response);\n\t\t\t}\n\t\t}\n\n\t\treturn $password;\n\t}\n\n\t/**\n\t * Function validatePasswordLogin\n\t *\n\t * compare user password-hash with given user-password\n\t * and check if they are the same\n\t * additionally it updates the hash if the system settings changed\n\t * or if the very old md5() sum is used\n\t *\n\t * @param array $userinfo user-data from table\n\t * @param string $password the password to validate\n\t * @param string $table either panel_customers or panel_admins\n\t * @param string $uid user-id-field in $table\n\t *\n\t * @return bool\n\t * @throws \\Exception\n\t */\n\tpublic static function validatePasswordLogin(\n\t\tarray $userinfo,\n\t\tstring $password,\n\t\tstring $table = 'panel_customers',\n\t\tstring $uid = 'customerid'\n\t): bool {\n\t\t$algo = Settings::Get('system.passwordcryptfunc') !== null ? Settings::Get('system.passwordcryptfunc') : PASSWORD_DEFAULT;\n\t\tif (is_numeric($algo)) {\n\t\t\t// old setting format\n\t\t\t$algo = PASSWORD_DEFAULT;\n\t\t\tSettings::Set('system.passwordcryptfunc', $algo);\n\t\t}\n\t\t$pwd_hash = $userinfo['password'];\n\n\t\t$update_hash = false;\n\t\t$pwd_check = \"\";\n\t\t// check for good'ole md5\n\t\tif (strlen($pwd_hash) == 32 && ctype_xdigit($pwd_hash)) {\n\t\t\t$pwd_check = md5($password);\n\t\t\t$update_hash = true;\n\t\t}\n\n\t\tif ($pwd_hash === $pwd_check || password_verify($password, $pwd_hash)) {\n\t\t\t// check for update of hash (only if our database is ready to handle the bigger string)\n\t\t\t$is_ready = Froxlor::versionCompare2(\"0.9.33\", Froxlor::getVersion()) <= 0;\n\t\t\tif ((password_needs_rehash($pwd_hash, $algo) || $update_hash) && $is_ready) {\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE \" . $table . \" SET `password` = :newpasswd WHERE `\" . $uid . \"` = :uid\n\t\t\t\t\");\n\t\t\t\t$params = [\n\t\t\t\t\t'newpasswd' => self::makeCryptPassword($password),\n\t\t\t\t\t'uid' => $userinfo[$uid]\n\t\t\t\t];\n\t\t\t\tDatabase::pexecute($upd_stmt, $params);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Make encrypted password from clear text password\n\t *\n\t * @param string $password Password to be encrypted\n\t * @param bool $htpasswd optional whether to generate a bcrypt password for directory protection\n\t * @param bool $ftpd optional generates sha256 password strings for proftpd/pureftpd\n\t *\n\t * @return string encrypted password\n\t */\n\tpublic static function makeCryptPassword(string $password, bool $htpasswd = false, bool $ftpd = false): string\n\t{\n\t\tif ($htpasswd || $ftpd) {\n\t\t\tif ($ftpd) {\n\t\t\t\t// sha256 compatible for proftpd and pure-ftpd\n\t\t\t\treturn crypt($password, '$5$' . self::generatePassword(16, true) . '$');\n\t\t\t}\n\t\t\t// bcrypt hash for dir-protection\n\t\t\treturn password_hash($password, PASSWORD_BCRYPT);\n\t\t}\n\t\t// crypt using the specified crypt-algorithm or system default\n\t\t$algo = Settings::Get('system.passwordcryptfunc') !== null ? Settings::Get('system.passwordcryptfunc') : PASSWORD_DEFAULT;\n\t\treturn password_hash($password, $algo);\n\t}\n\n\t/**\n\t * creates a self-signed ECC-certificate for the froxlor-vhost\n\t * and sets the content to the corresponding files set in the\n\t * settings for ssl-certificate-file and ssl-certificate-key\n\t *\n\t * @return void\n\t */\n\tpublic static function createSelfSignedCertificate()\n\t{\n\t\t// validate that we have file names in the settings\n\t\t$certFile = Settings::Get('system.ssl_cert_file');\n\t\t$keyFile = Settings::Get('system.ssl_key_file');\n\t\tif (empty($certFile)) {\n\t\t\t$certFile = '/etc/ssl/froxlor_selfsigned.pem';\n\t\t\tSettings::Set('system.ssl_cert_file', $certFile);\n\t\t}\n\t\tif (empty($keyFile)) {\n\t\t\t$keyFile = '/etc/ssl/froxlor_selfsigned.key';\n\t\t\tSettings::Set('system.ssl_key_file', $keyFile);\n\t\t}\n\n\t\t// certificate info\n\t\t$dn = [\n\t\t\t\"countryName\" => \"DE\",\n\t\t\t\"stateOrProvinceName\" => \"Hessen\",\n\t\t\t\"localityName\" => \"Frankfurt am Main\",\n\t\t\t\"organizationName\" => \"froxlor\",\n\t\t\t\"organizationalUnitName\" => \"froxlor Server Management Panel\",\n\t\t\t\"commonName\" => Settings::Get('system.hostname'),\n\t\t\t\"emailAddress\" => Settings::Get('panel.adminmail')\n\t\t];\n\t\t// create private key\n\t\t$privkey = openssl_pkey_new([\n\t\t\t\"private_key_type\" => OPENSSL_KEYTYPE_EC,\n\t\t\t\"curve_name\" => 'prime256v1',\n\t\t]);\n\t\t// create signing request\n\t\t$csr = openssl_csr_new($dn, $privkey, array('digest_alg' => 'sha384'));\n\t\t// sign csr\n\t\t$x509 = openssl_csr_sign($csr, null, $privkey, 365, array('digest_alg' => 'sha384'));\n\t\t// export to files\n\t\topenssl_x509_export_to_file($x509, $certFile);\n\t\topenssl_pkey_export_to_file($privkey, $keyFile);\n\t}\n}\n"], "filenames": ["lib/Froxlor/System/Crypt.php"], "buggy_code_start_loc": [201], "buggy_code_end_loc": [202], "fixing_code_start_loc": [201], "fixing_code_end_loc": [202], "type": "CWE-305", "message": "Authentication Bypass by Primary Weakness in GitHub repository froxlor/froxlor prior to 2.0.13.", "other": {"cve": {"id": "CVE-2023-1307", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-10T01:15:11.927", "lastModified": "2023-03-15T16:29:22.437", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Authentication Bypass by Primary Weakness in GitHub repository froxlor/froxlor prior to 2.0.13."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-305"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.13", "matchCriteriaId": "8DC712DE-241F-47E2-A4C3-CF2A94C11049"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/6777fbf229200f4fd566022e186548391219ab23", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/5fe85af4-a667-41a9-a00d-f99e07c5e2f1", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/6777fbf229200f4fd566022e186548391219ab23"}}