{"buggy_code": ["## master\n\n* `derivatives` \u2013 Avoid downloading the attached file when calling default no-op processor (@janko)\n\n* `derivatives` \u2013 Add `:download` processor setting for skipping downloading source file (@jrochkind, @janko)\n\n* `derivatives` \u2013 Copy non-file source IO objects into local file before passing them to the processor (@jrochkind)\n\n* `sequel` \u2013 Call `Attacher#reload` in `Sequel::Model#reload`, which keeps rest of attacher state (@janko, @jrochkind)\n\n* `activerecord` \u2013 Call `Attacher#reload` in `ActiveRecord::Base#reload`, which keeps rest of attacher state (@janko, @jrochkind)\n\n* `add_metadata` \u2013 Add `:skip_nil` option for excluding metadata keys whose values are nil (@renchap)\n\n* `store_dimensions` \u2013 Add `:auto_extraction` option for disabling automatically extracting dimensions on upload (@renchap)\n\n* `mirroring` \u2013 Forward original upload options when mirroring upload (@corneverbruggen)\n\n* `derivation_endpoint` \u2013 Apply `version` URL option in derivation endpoint (@janko)\n\n* `s3` \u2013 Fix `S3#open` not working on aws-sdk-core 3.104 and above (@janko)\n\n* `remove_attachment` \u2013 Delete removed file if a new file was attached right after removal (@janko)\n\n* `upload_endpoint` \u2013 Fix `Shrine.upload_response` not working in a Rails controller (@pldavid2)\n\n* `presign_endpoint` \u2013 Add `OPTIONS` route that newer versions of Uppy check (@janko)\n\n* `derivatives` \u2013 Add `:create_on_promote` option for auto-creating derivatives on promotion (@janko)\n\n* `s3` \u2013 Add back support for client-side encryption (@janko)\n\n* `memory` \u2013 Ensure `Memory#open` returns content in original encoding (@jrochkind)\n\n## 3.2.1 (2020-01-12)\n\n* `derivation_endpoint` \u2013 Use `Rack::Files` constant on Rack >= 2.1 (@janko)\n\n* Fix Ruby 2.7 warnings regarding separation of positional and keyword arguments (@janko)\n\n* `s3` \u2013 Make `S3#open` handle empty S3 objects (@janko)\n\n## 3.2.0 (2019-12-17) [[release notes]](https://shrinerb.com/docs/release_notes/3.2.0)\n\n* `validation` \u2013 Run validation on `Attacher#attach` & `Attacher#attach_cached` instead of `Attacher#change` (@janko)\n\n* `remove_invalid` \u2013 Activate also when `Attacher#validate` is run manually (@janko)\n\n* `remove_invalid` \u2013 Fix incompatibility with `derivatives` plugin (@janko)\n\n* `type_predicates` \u2013 Add new plugin with convenient `UploadedFile` predicate methods based on MIME type (@janko)\n\n* `core` \u2013 Allow assigning back current attached file data (@janko)\n\n* `derivatives` \u2013 Fix `:derivative` value inconsistency when derivatives are being promoted (@janko)\n\n* `add_metadata` \u2013 Add `#add_metadata` method for adding metadata to uploaded files (@janko)\n\n* `derivatives` \u2013 Add `:io` and `:attacher` values to instrumentation event payload (@janko)\n\n## 3.1.0 (2019-11-15) [[release notes]](https://shrinerb.com/docs/release_notes/3.1.0)\n\n* `default_storage` \u2013 Coerce storage key to symbol in `Attacher#cache_key` & `Attacher#store_key` (@janko)\n\n* `core` \u2013 Coerce storage key to symbol in `Attacher#cache_key` & `Attacher#store_key` (@janko)\n\n* `add_metadata` \u2013 Define metadata methods only for the target uploader class (@janko)\n\n* `derivatives` \u2013 Add `:storage` option to `Attacher#create_derivatives` (@janko)\n\n* `store_dimensions` \u2013 Propagate exceptions on loading `ruby-vips` in `:vips` analyzer (@janko)\n\n* `signature` \u2013 Allow skipping rewinding by passing `rewind: false` to `Shrine.signature` (@janko)\n\n* `derivatives` \u2013 Add `Attacher.derivatives` alias for `Attacher.derivatives_processor` (@janko)\n\n## 3.0.1 (2019-10-17) [[release notes]](https://shrinerb.com/docs/release_notes/3.0.1)\n\n* `metadata_attributes` \u2013 Fix exception being raised when there is no attached file (@janko)\n\n* `core` \u2013 Simplify `UploadedFile#inspect` output (@janko)\n\n## 3.0.0 (2019-10-14) [[release notes]](https://shrinerb.com/docs/release_notes/3.0.0)\n\n* `derivation_endpoint` \u2013 Pass `action: :derivation` when uploading derivation results (@janko)\n\n* `core` \u2013 Add `Shrine::Attachment[]` shorthand for `Shrine::Attachment.new` (@janko)\n\n* `core` \u2013 Add `Storage#delete_prefixed` method for deleting all files in specified directory (@jrochkind)\n\n* `linter` \u2013 Return `true` in `Storage::Linter#call` so that it can be used with `assert` (@jrochkind)\n\n* `linter` \u2013 Allow `Storage::Linter` to accept a key that will be used for testing nonexistent file (@janko)\n\n* `core` \u2013 Infer file extension from `filename` metadata (@janko)\n\n* `pretty_location` \u2013 Add `:class_underscore` option for underscoring class name (@Uysim)\n\n* Update `down` dependency to `~> 5.0` (@janko)\n\n* `multi_cache` \u2013 Add new plugin for whitelisting additional temporary storages (@janko, @jrochkind)\n\n* `sequel` \u2013 Extract callback code into attacher methods that can be overridden (@janko)\n\n* `activerecord` \u2013 Extract callback code into attacher methods that can be overridden (@janko)\n\n* `derivation_endpoint` \u2013 Stop re-opening `File` objects returned in derivation result (@janko)\n\n* `derivation_endpoint` \u2013 Allow only `File` or `Tempfile` object as derivation result (@janko)\n\n* `download_endpoint` \u2013 Add `Shrine.download_response` for calling in controller (@janko)\n\n* `core` \u2013 Fetch storage object lazily in `Shrine` instance (@janko)\n\n* `mirroring` \u2013 Add new plugin for replicating uploads and deletes to other storages (@janko)\n\n* `sequel` \u2013 Rename `:callbacks` option to `:hooks` (@janko)\n\n* `model` \u2013 Add `Attacher#set_model` for setting model without loading attachment (@janko)\n\n* `entity` \u2013 Add `Attacher#set_entity` for setting entity without loading attachment (@janko)\n\n* `entity` \u2013 Define `#<name>_attacher` class method when including `Shrine::Attachment` (@janko)\n\n* `derivation_endpoint` \u2013 Send only `:derivation` in the instrumentation event payload (@janko)\n\n* `default_storage` \u2013 Add `Attacher.default_cache` and `Attacher.default_store` for settings (@janko)\n\n* `default_storage` \u2013 Deprecate `record` & `name` arguments to storage block (@janko)\n\n* `default_storage` \u2013 Evaluate storage block in context of `Attacher` instance (@janko)\n\n* Unify persistence plugin interface (@janko)\n\n* `upload_options` \u2013 Keep `Shrine#_upload` private (@janko)\n\n* `infer_extension` \u2013 Keep `Shrine#basic_location` private (@janko)\n\n* `model` \u2013 Add `#<name>_changed?` method to attachment module (@janko)\n\n* Make it easier for plugins to define entity and model attachment methods (@janko)\n\n* `form_assign` \u2013 Add new plugin for assigning attachment from form params without a form object (@janko)\n\n* `derivation_endpoint` \u2013 Allow passing generic IO objects to `Derivation#upload` (@janko)\n\n* `derivation_endpoint` \u2013 Accept additional uploader options in `Derivation#upload` (@janko)\n\n* `derivation_endpoint` \u2013 Close the uploaded file in `Derivation#upload` (@janko)\n\n* `core` \u2013 Stop rescuing `IO#close` exceptions in `Shrine#upload` (@janko)\n\n* `core` \u2013 Add `:delete` option to `Shrine#upload` for deleting uploaded file (@janko)\n\n* `s3` \u2013 Stop returning `:object` in `Down::ChunkedIO#data` in `S3#open` (@janko)\n\n* `s3` \u2013 Eliminate `#head_object` request in `S3#open` (@janko)\n\n* `download_endpoint` \u2013 Remove extra `Storage#exists?` check (@janko)\n\n* `derivation_endpoint` \u2013 Add `Derivation#opened` for retrieving an opened derivation result (@janko)\n\n* `derivation_endpoint` \u2013 Remove extra `Storage#exists?` check when `:upload` is enabled but not `:upload_redirect` (@janko)\n\n* `derivation_endpoint` - Don't pass source `UploadedFile` object when `:download` is `false` (@janko)\n\n* `derivation_endpoint` \u2013 Remove `:include_uploaded_file` option (@janko)\n\n* `derivation_endpoint` \u2013 Evaluate derivation block in context of `Shrine::Derivation` (@janko)\n\n* `derivation_endpoint` \u2013 Remove `:download_errors` option (@janko)\n\n* `memory` \u2013 Raise `Shrine::FileNotFound` on nonexistent file in `Memory#open` (@janko)\n\n* `file_system` \u2013 Raise `Shrine::FileNotFound` on nonexistent file in `FileSystem#open` (@janko)\n\n* `s3` \u2013 Raise `Shrine::FileNotFound` on nonexistent object in `S3#open` (@janko)\n\n* `core` \u2013 Add `Shrine::FileNotFound` exception and require storages to raise it on `Storage#open` (janko)\n\n* `instrumentation` \u2013 Remove `:metadata` from `:options` in `metadata.shrine` event (@janko)\n\n* `instrumentation` \u2013 Remove `:location`, `:upload_options` and `:metadata` from `:options` in `upload.shrine` event (@janko)\n\n* `instrumentation` \u2013 Add `:metadata` to the `upload.shrine` event (@janko)\n\n* `download_endpoint` \u2013 Drop support for legacy `/:storage/:id` URLs (@janko)\n\n* `core` \u2013 In `UploadedFile#==` require files to be of the same class (@janko)\n\n* `core` \u2013 Add `:close` option to `Shrine#upload` for preventing closing file after upload (@janko)\n\n* `memory` \u2013 Add `Shrine::Storage::Memory` from `shrine-memory` gem (@janko)\n\n* `default_url_options` \u2013 Rename to just `url_options` (@janko)\n\n* `delete_raw` \u2013 Deprecate plugin in favour of `derivatives` (@janko)\n\n* `recache` \u2013 Deprecate plugin in favour of `derivatives` (@janko)\n\n* `processing` \u2013 Deprecate plugin in favour of `derivatives` (@janko)\n\n* `versions` \u2013 Deprecate plugin in favour of `derivatives` (@janko)\n\n* `derivatives` \u2013 Add new plugin for storing processed files (@janko)\n\n* `derivation_endpoint` \u2013 Allow using symbol and string derivation names interchangeably (@janko)\n\n* `dynamic_storage` \u2013 Remove `Shrine.dynamic_storages` method (@janko)\n\n* `core` \u2013 Deep duplicate `Shrine.opts` on subclassing (@janko)\n\n* `core` \u2013 Add `Attacher#file!` which asserts that a file is attached (@janko)\n\n* `core` \u2013 Change `Shrine.uploaded_file` to raise `ArgumentError` on invalid input (@janko)\n\n* `module_include` \u2013 Deprecate plugin over overriding core classes directly (@janko)\n\n* `core` \u2013 Add `Attacher#cache_key` and `Attacher#store_key` which return storage identifiers (@janko)\n\n* `linter` \u2013 Call `Storage#open` with options as second argument (@janko)\n\n* `core` \u2013 Allow data hash passed to `UploadedFile.new` to have symbol keys (@janko)\n\n* `core` \u2013 Change how `Shrine::UploadedFile` sets its state from the given data hash (@janko)\n\n* `core` \u2013 Deprecate `Storage#open` not accepting additional options (@janko)\n\n* `refresh_metadata` \u2013 Add `Attacher#refresh_metadata!` method which integrates with `model` plugin (@janko)\n\n* `instrumentation` \u2013 Instrument any `Storage#open` calls in a new `open.shrine` event (@janko)\n\n* `restore_cached_data` \u2013 Forward options passed to `Attacher#attach_cached` to metadata extraction (@janko)\n\n* `validation` \u2013 Allow skipping validations on attaching by passing `validate: false` (@janko)\n\n* `validation` \u2013 Add `:validate` option to `Attacher#assign` or `Attacher#attach` for passing options to validation block (@janko)\n\n* `validation` \u2013 Extract validation functionality into the new plugin (@janko)\n\n* `upload_options` \u2013 Upload options from the block are now merged with passed options instead of replaced (@janko)\n\n* `upload_endpoint` \u2013 Stop passing `Rack::Request` object to the uploader (@janko)\n\n* `remote_url` \u2013 Require custom downloaders to raise `Shrine::Plugins::RemoteUrl::DownloadError` for conversion into a validation error (@janko)\n\n* `infer_extension` \u2013 Fix compatibility with the `pretty_location` plugin (@janko)\n\n* `presign_endpoint` \u2013 Remove deprecated `Shrine::Plugins::PresignEndpoint::App` constant (@janko)\n\n* `keep_files` \u2013 Remove the ability to choose whether to keep only destroyed or only replaced files (@janko)\n\n* `infer_extension` \u2013 Remove `Shrine#infer_extension` method (@janko)\n\n* `default_url_options` \u2013 Allow overriding passed URL options by deleting them inside the block (@janko)\n\n* `cached_attachment_data` \u2013 Rename `Attacher#read_cached` to `Attacher#cached_data` (@janko)\n\n* `sequel` \u2013 Add `Attacher#atomic_promote` and `Attacher#atomic_persist` (@janko)\n\n* `sequel` \u2013 Remove persistence from `Attacher#promote` (@janko)\n\n* `activerecord` \u2013 Remove persistence from `Attacher#promote` (@janko)\n\n* `atomic_helpers` \u2013 Add new plugin with helper methods for atomic promotion and persistence (@janko)\n\n* `backgrounding` \u2013 Add `Attacher#promote_block` & `Attacher#destroy_block` for overriding class level blocks (@janko)\n\n* `backgrounding` \u2013 Add `Attacher.promote_block` & `Attacher.destroy_block` on class level (@janko)\n\n* `backgrounding` \u2013 Remove overriding `Attacher#swap` with atomic promotion (@janko)\n\n* `backgrounding` \u2013 Remove `Attacher.promote`, `Attacher.delete`, `Attacher.dump`, `Attacher#dump`, `Attacher.load`, `Attacher.load_record` (@janko)\n\n* `model` \u2013 Allow disabling caching to temporary storage on assignment (@janko)\n\n* `model` \u2013 Add `Attacher.from_model`, `Attacher#write` (@janko)\n\n* `model` \u2013 Add new plugin for integrating with mutable structs (@janko)\n\n* `entity` \u2013 Add `Attacher.from_entity`, `Attacher#reload`, `Attacher#column_values`, `Attacher#attribute` (@janko)\n\n* `entity` \u2013 Add new plugin for integrating with immutable structs (@janko)\n\n* `column` \u2013 Allow changing column serializer from default `JSON` library (@janko)\n\n* `column` \u2013 Add `Attacher#column_data` and `Attacher.from_column` methods (@janko)\n\n* `column` \u2013 Add new plugin for (de)serializing attacher data (@janko)\n\n* `attachment` \u2013 Removed any default attachment methods (@janko)\n\n* `core` \u2013 Require context hash passed as second argument to `Shrine#upload` to have symbol keys (@janko)\n\n* `core` \u2013 Change `Shrine.uploaded_file` not to yield files anymore (@janko)\n\n* `core` \u2013 Allow `Shrine.uploaded_file` to accept file data hashes with symbol keys (@janko)\n\n* `core` \u2013 Remove `Shrine#uploaded?`\n\n* `core` \u2013 Remove `Shrine#delete`, `Shrine#_delete`, `Shrine#remove` (@janko)\n\n* `core` \u2013 Remove `Shrine#store`, `Shrine#_store`, `Shrine#put`, `Shrine#copy` (@janko)\n\n* `core` \u2013 Remove `Shrine#processed`, `Shrine#process` (@janko)\n\n* `core` \u2013 Don't pass `:phase` anymore on uploads (@janko)\n\n* `core` \u2013 Read attachment from the record attribute only on initialization (@janko)\n\n* `core` \u2013 Don't require a temporary storage (@janko)\n\n* `core` \u2013 Add `Attacher#data` and `Attacher.from_data` for dumping to and loading from a Hash (@janko)\n\n* `core` \u2013 Change `Attacher#assign` to raise exception when non-cached file is assigned (@janko)\n\n* `core` \u2013 Enable `Attacher#assign` to accept cached file data as a Hash (@janko)\n\n* `core` \u2013 Add `Attacher#file` alias for `Attacher#get` (@janko)\n\n* `core` \u2013 Change `Attacher#attached?` to return whether a file is attached (@janko)\n\n* `core` \u2013 Change `Attacher#promote` to always only save promoted file in memory (@janko)\n\n* `core` \u2013 Rename `Attacher#replace` to `Attacher#destroy_previous` (@janko)\n\n* `core` \u2013 Remove `Attacher#_promote` and `Attacher#_delete`, add `Attacher#promote_cached` and `Attacher#destroy_attached` (@janko)\n\n* `core` \u2013 Rename `Attacher#set` and `Attacher#_set` to `Attacher#change` and `Attacher#set` (@janko)\n\n* `core` \u2013 Remove `Attacher#cache!` and `Attacher#store!`, add `Attacher#upload` (@janko)\n\n* `core` \u2013 Rename `Attacher#validate_block` to `Attacher#_validate` (@janko)\n\n* `core` \u2013 Add `Attacher#attach`, `Attacher#attach_cached`, extracted from `Attacher#assign` (@janko)\n\n* `core` \u2013 Remove `Attacher#swap`, `Attacher#update`, `Attacher#read`, `Attacher#write`, `Attacher#data_attribute`, `Attacher#convert_to_data`, `Attacher#convert_before_write`, and `Attacher#convert_after_read` (@janko)\n\n* `core` \u2013 Change `Attacher.new` to not accept a model anymore (@janko)\n\n* `delete_promoted` \u2013 Remove plugin (@janko)\n\n* `parsed_json` \u2013 Remove plugin (@janko)\n\n* `parallelize` \u2013 Remove plugin (@janko)\n\n* `hooks` \u2013 Remove plugin (@janko)\n\n* `core` \u2013 Remove deprecated `Shrine::IO_METHODS` constant (@janko)\n\n* `s3` \u2013 Replace source object metadata when copying a file from S3 (@janko)\n\n* `core` \u2013 Change `UploadedFile#storage_key` to return a Symbol instead of a String (@janko)\n\n* `infer_extension` \u2013 Make `:mini_mime` the default analyzer (@janko)\n\n* Bring back Ruby 2.3 support (@janko)\n\n* `versions` \u2013 Remove deprecated `:version_names`, `Shrine.version_names` and `Shrine.version?` (@janko)\n\n* `validation_helpers` \u2013 Remove support for regexes in MIME type or extension validations (@janko)\n\n* `validation_helpers` \u2013 Don't require `#width` and `#height` methods to be defined on `UploadedFile` (@janko)\n\n* `validation_helpers` \u2013 Fail dimensions validations when `width` or `height` metadata is missing (@janko)\n\n* `upload_endpoint` \u2013 Remove deprecated `Shrine::Plugins::UploadEndpoint::App` constant (@janko)\n\n* `determine_mime_type` \u2013 Remove `Shrine#mime_type_analyzers` method (@janko)\n\n* `store_dimensions` \u2013 Remove `Shrine#extract_dimensions` and `Shrine#dimensions_analyzers` methods (@janko)\n\n* `rack_file` \u2013 Remove deprecated `Shrine::Plugins::RackFile::UploadedFile` constant (@janko)\n\n* `rack_file` \u2013 Drop support for passing file hash to `Shrine#upload` and `Shrine#store` (@janko)\n\n* `download_endpoint` \u2013 Move `Shrine::Plugins::DownloadEndpoint::App` into `Shrine::DownloadEndpoint` (@janko)\n\n* `download_endpoint` \u2013 Remove deprecated `Shrine::DownloadEndpoint` constant (@janko)\n\n* `download_endpoint` \u2013 Remove deprecated `:storages` option (@janko)\n\n* `determine_mime_type` \u2013 Remove deprecated `:default` analyzer alias (@janko)\n\n* `default_url` \u2013 Remove deprecated block argument when loading the plugin (@janko)\n\n* `data_uri` \u2013 Remove deprecated `Shrine::Plugins::DataUri::DataFile` constant (@janko)\n\n* `data_uri` \u2013 Remove deprecated `:filename` plugin option (@janko)\n\n* `cached_attachment_data` \u2013 Remove deprecated model setter (@janko)\n\n* `file_system` \u2013 Remove deprecated `:older_than` option in `FileSystem#clear!` (@janko)\n\n* `file_system` \u2013 Don't accept a block anymore in `FileSystem#open` (@janko)\n\n* `file_system` \u2013 Remove deprecated `FileSystem#download` method (@janko)\n\n* `file_system` \u2013 Make `FileSystem#movable?` and `FileSystem#move` methods private (@janko)\n\n* `file_system` \u2013 Remove deprecation warning on unrecognized options in `FileSystem#upload` (@janko)\n\n* `file_system` \u2013 Remove deprecated `:host` option for `FileSystem#initialize` (@janko)\n\n* `moving` \u2013 Remove deprecated plugin (@janko)\n\n* `multi_delete` \u2013 Remove deprecated plugin (@janko)\n\n* `direct_upload` \u2013 Remove deprecated plugin (@janko)\n\n* `backup` \u2013 Remove deprecated plugin (@janko)\n\n* `background_helpers` \u2013 Remove deprecated plugin (@janko)\n\n* `migration_helpers` \u2013 Remove deprecated plugin (@janko)\n\n* `copy` \u2013 Remove deprecated plugin (@janko)\n\n* `logging` \u2013 Remove deprecated plugin (@janko)\n\n* `s3` \u2013 Remove deprecated `S3#download` method (@janko)\n\n* `s3` \u2013 Remove deprecated `S3#stream` method (@janko)\n\n* `presign_endpoint` \u2013 Drop support for presign objects that don't respond to `#to_h` (@janko)\n\n* `s3` \u2013 Return a Hash in `S3#presign` when method is POST (@janko)\n\n* `s3` \u2013 Remove `:download` option in `S3#url` (@janko)\n\n* `s3` \u2013 Remove support for non URI-escaped content disposition values (@janko)\n\n* `s3` \u2013 Remove `S3#s3` method (@janko)\n\n* `s3` \u2013 Remove support for specifying `:multipart_threshold` as an integer (@janko)\n\n* `s3` \u2013 Remove `:host` option on `S3#initialize` (@janko)\n\n* `s3` \u2013 Drop support for `aws-sdk-s3` versions lower than 1.14 (@janko)\n\n* `s3` \u2013 Drop support for `aws-sdk` 2.x (@janko)\n\n## 2.19.0 (2019-07-18) [[release notes]](https://shrinerb.com/docs/release_notes/2.19.0)\n\n* `pretty_location` \u2013 Allow specifying a different identifier from `id` (@00dav00)\n\n* `data_uri` \u2013 Soft-move `Shrine::Plugins::DataUri::DataFile` to `Shrine::DataFile` (@janko)\n\n* `rack_file` \u2013 Soft-move `Shrine::Plugins::RackFile::UploadedFile` to `Shrine::RackFile` (@janko)\n\n* `backup` \u2013 Deprecate the plugin over [mirroring uploads](https://github.com/shrinerb/shrine/wiki/Mirroring-Uploads) via the `instrumentation` plugin (@janko)\n\n* `moving` \u2013 Deprecate the plugin in favor of the `:move` option for `FileSystem#upload` (@janko)\n\n* `file_system` \u2013 Add `:move` option for `FileSystem#upload` (@janko)\n\n* `file_system` \u2013 Don't fill `size` metadata if missing in `FileSystem#upload` (@janko)\n\n* `logging` \u2013 Deprecate plugin in favour of `instrumentation` (@janko)\n\n* `instrumentation` \u2013 Add plugin which sends events via `ActiveSupport::Notifications` or `dry-monitor` (@janko)\n\n* `core` \u2013 Add `UploadedFile#[]` shorthand for accessing metadata (@janko)\n\n* `add_metadata` \u2013 Allow calling `super` when overriding dynamically defined `UploadedFile` methods (@janko)\n\n* `store_dimensions` \u2013 Add `:on_error` option for specifying the exception strategy (@janko)\n\n* `store_dimensions` \u2013 Print warnings when exception occurred while extracting dimensions (@janko)\n\n* `core` \u2013 Add `Shrine.logger` and make any warnings go through it (@janko)\n\n* `copy` \u2013 Deprecate the plugin (@janko)\n\n* `core` \u2013 Add ability to force metadata extraction by passing `metadata: true` to `Shrine#upload` (@janko)\n\n* `core` \u2013 Add ability to skip metadata extraction by passing `metadata: false` to `Shrine#upload` (@janko)\n\n* `file_system` \u2013 Deprecate `:older_than` option for `FileSystem#clear!` in favour of a block (@janko)\n\n* `file_system` \u2013 Add the ability for `FileSystem#clear!` to take a block (@janko)\n\n* `signature` \u2013 Add `Shrine.signature` alias for `Shrine.calculcate_signature` (@janko)\n\n* `store_dimensions` \u2013 Add `Shrine.dimensions` alias for `Shrine.extract_dimensions` (@janko)\n\n* `determine_mime_type` \u2013 Add `Shrine.mime_type` alias for `Shrine.determine_mime_type` (@janko)\n\n* `validation_helpers` \u2013 Add `#validate_max_dimensions`, `#validate_min_dimensions`, and `#validate_dimensions` (@janko)\n\n* `validation_helpers` - Add `#validate_size`, `#validate_width`, and `#validate_height` shorthands (@janko)\n\n* `validation_helpers` \u2013 Add `#validate_mime_type` and `#validate_extension` aliases for inclusion (@janko)\n\n* `validation_helpers` \u2013 Simplify default validation error messages (@janko)\n\n* `core` \u2013 Allow registering storage objects under string keys (@janko)\n\n## 2.18.0 (2019-06-24) [[release notes]](https://shrinerb.com/docs/release_notes/2.18.0)\n\n* `core` \u2013 Add `Shrine.upload` method as a shorthand for `Shrine.new(...).upload(...)` (@janko)\n\n* `upload_endpoint` \u2013 Accept file uploads from Uppy's default `files[]` array (@janko)\n\n* `core` \u2013 Add `Shrine::Attachment()` shorthand for `Shrine::Attachment.new` (@janko)\n\n* `upload_endpoint` \u2013 Add `:url` option for adding uploaded file URL to response body (@janko)\n\n* `s3` \u2013 Deprecate `:download` URL option over `:response_content_disposition` (@janko)\n\n* `s3` \u2013 Remove backfilling `size` metadata when uploading IO objects of unknown size (@janko)\n\n* `s3` \u2013 Deprecate `aws-sdk-s3` version less than 1.14.0 (@janko)\n\n* `presign_endpoint` \u2013 Add `Shrine.presign_response` for handling presigns inside a custom controller (@janko)\n\n* `upload_endpoint` \u2013 Add `Shrine.upload_response` for handling uploads inside a custom controller (@janko)\n\n* `rack_file` \u2013 Fix overriden `Attacher#assign` not accepting second argument (@janko)\n\n* `parsed_json` \u2013 Fix overriden `Attacher#assign` not accepting second argument (@janko)\n\n## 2.17.0 (2019-05-06) [[release notes]](https://shrinerb.com/docs/release_notes/2.17.0)\n\n* `data_uri` \u2013 Add `Attacher#assign_data_uri` which accepts additional `Shrine#upload` options (@janko)\n\n* `remote_url` \u2013 Accept additional `Shrine#upload` options in `Attacher#assign_remote_url` (@janko)\n\n* `download_endpoint` \u2013 Allow passing options to `Shrine.download_endpoint` (@janko)\n\n* `download_endpoint` \u2013 Fix `Shrine.download_endpoint` not being accepted by Rails' `#mount` (@janko)\n\n* `download_endpoint` \u2013 Remove Roda dependency (@janko)\n\n* `presign_endpoint` \u2013 Soft-rename `Shrine::Plugins::PresignEndpoint::App` class to `Shrine::PresignEndpoint` (@janko)\n\n* `upload_endpoint` \u2013 Soft-rename `Shrine::Plugins::UploadEndpoint::App` class to `Shrine::UploadEndpoint` (@janko)\n\n* `processing` \u2013 Fix defining process blocks being applied to `Shrine` superclasses (@ksol)\n\n* `derivation_endpoint` \u2013 Add `ETag` header to prevent `Rack::ETag` from buffering file content (@janko)\n\n* `rack_response` \u2013 Add `ETag` header to prevent `Rack::ETag` from buffering file content (@janko)\n\n* `download_endpoint` \u2013 Add `ETag` header to prevent `Rack::ETag` from buffering file content (@janko)\n\n* `default_url` \u2013 Add `:host` for specifying the URL host (@janko)\n\n* `versions` \u2013 Fix uploaded versions being deleted when string version names are used (@janko)\n\n* `versions` \u2013 Allow `Attacher#url` to accept version name indifferently (@FunkyloverOne)\n\n* Improve performance of cleaning empty directories on deletion in `FileSystem` storage (@adamniedzielski)\n\n* Drop MRI 2.3 support (@janko)\n\n* `metadata_attributes` \u2013 Fix `Attacher#assign` not accepting additional options anymore (@janko)\n\n* `derivation_endpoint` \u2013 Add support for Rack < 2 (@Antsiscool)\n\n* `derivation_endpoint` \u2013 Fix `:upload` option being incompatible with `moving` plugin (@speedo-spin)\n\n* `determine_mime_type` \u2013 Allow passing options to analzyers (Marcel accepts `:filename_fallback` option) (@hmistry)\n\n* `determine_mime_type` \u2013 Revert \"Extended determine MIME type with Marcel\" (@hmistry)\n\n* `rack_response` \u2013 improve performance for upper bounded `Range` header values (@zarqman)\n\n* `rack_response` \u2013 prevent response body from yielding `nil`-chunks (@zarqman)\n\n* `parsed_json` \u2013 Accepts hashes with symbols keys (@aglushkov)\n\n## 2.16.0 (2019-02-18) [[release notes]](https://shrinerb.com/docs/release_notes/2.16.0)\n\n* `derivation_endpoint` \u2013 Add `:upload_open_options` for download option for derivation result (@janko)\n\n* `derivation_endpoint` \u2013 Fix `:upload` option being incompatible with `delete_raw` plugin (@janko)\n\n* `derivation_endpoint` \u2013 Require input file in `Derivation#upload` to respond to `#path` (@janko)\n\n* `derivation_endpoint` \u2013 Delete generated derivation result after uploading in `Derivation#upload` (@janko)\n\n* `derivation_endpoint` \u2013 Fix `Derivation#processed` breaking when derivation result is a `File` object (@janko)\n\n* `derivation_endpoint` \u2013 Don't close input file on `Derivation#upload` (@janko)\n\n* Add `:delete` parameter for skipping delete when `delete_raw` plugin is loaded (@janko)\n\n* Don't return `Content-Type` when it couldn't be determined from file extension in `derivation_endpoint` (@janko)\n\n* Add `:download_options` option to `download_endpoint` plugin for specifying options for `Storage#open` (@janko)\n\n* Don't return `Content-Type` header in `rack_response` when MIME type could not be determined (@janko)\n\n* Open the `UploadedFile` object in `#to_rack_response` in `rack_response` plugin (@janko)\n\n* Fix `store_dimensions` plugin making second argument in `Shrine#extract_metadata` mandatory (@jrochkind)\n\n## 2.15.0 (2019-02-08) [[release notes]](https://shrinerb.com/docs/release_notes/2.15.0)\n\n* Add `derivation_endpoint` plugin for processing uploaded files on-the-fly (@janko)\n\n* Allow Marcel to fall back to the file extension in `determine_mime_type` plugin (@skarlcf)\n\n* Don't return cached app instance in `Shrine.download_endpoint` in `download_endpoint` plugin (@janko)\n\n* Yield a new File object on `Shrine.with_file` when `tempfile` plugin is loaded (@janko)\n\n## 2.14.0 (2018-12-27) [[release notes]](https://shrinerb.com/docs/release_notes/2.14.0)\n\n* Add `tempfile` plugin for easier reusing of the same uploaded file copy on disk (@janko)\n\n* Don't re-open the uploaded file if it's already open in `refresh_metadata` plugin (@janko)\n\n* Drop support for MRI 2.1 and 2.2 (@janko)\n\n* Fix `backgrounding` not working when default storage was changed with `Attachment.new` (@janko)\n\n* Don't clear existing metadata definitions when loading `add_metadata` plugin (@janko)\n\n* Don't clear existing processing blocks when loading `processing` plugin (@janko)\n\n* Deprecate automatic escaping of `:content_disposition` in `Shrine::Storage::S3` (@janko)\n\n* Use `content_disposition` gem in `Shrine::Storage::S3` and `rack_response` plugin (@janko)\n\n* Make `FileSystem#clear!` work correctly when the storage directory is a symlink (@janko)\n\n* Don't abort promotion in `backgrounding` plugin when original metadata was updated (@janko)\n\n* Don't mutate the `UploadedFile` data hash in `refresh_metadata` plugin (@janko)\n\n* Deprecate `Storage::S3#download` (@janko)\n\n* Stop using `Storage#download` in `UploadedFile#download` for peformance (@janko)\n\n* Remove `#download` from the Shrine storage specification (@janko)\n\n* Keep `context` argument in `#extract_metadata` optional after loading `add_metadata` plugin (@janko)\n\n* Include metadata key with `nil` value when `nil` is returned in `add_metadata` block (@janko)\n\n* Strip query params in upload location when re-uploading from `shrine-url` storage (@jrochkind)\n\n* Inline Base plugin into core classes, extract them to separate files (@printercu)\n\n* Make `rack_response` plugin work with `Rack::Sendfile` for `FileSystem` storage (@janko)\n\n* Add `:filename` and `:type` options to `rack_response` plugin (@janko)\n\n* Add `:host` option to `UploadedFile#download_url` in `download_endpoint` plugin (@janko)\n\n* Add support for client-side encryption to S3 storage (@janko)\n\n* Don't look up the attachment class in each new model instance (@printercu)\n\n* Allow `Attacher#cached?` and `Attacher#stored?` to take an `UploadedFile` object (@jrochkind)\n\n* Allow assigning a filename to the `DataFile` object in `Shrine.data_uri` (@janko)\n\n* Don't strip media type parameters for the `DataFile` object in `data_uri` plugin (@janko)\n\n* Add `:content_type` analyzer to `Shrine.mime_type_analyzers` in `determine_mime_type` plugin (@janko)\n\n* Rename `:default` analyzer to `:content_type` in `determine_mime_type` plugin (@janko)\n\n* Don't display a warning when `determine_mime_type` plugin is loaded with `:default` analyzer (@janko)\n\n* Exclude media type parameters when copying `IO#content_type` into `mime_type` metadata (@janko)\n\n* Remove superfluous `#head_object` S3 API call in `S3#download` (@janko)\n\n* Make `S3#download` and `S3#open` work with server side encryption options (@janko)\n\n* Make previously extracted metadata available under `:metadata` in `add_metadata` plugin (@jrochkind)\n\n* Use a guard raise cause for `bucket` argument in S3 for an appropriate error message (@ardecvz)\n\n## 2.13.0 (2018-11-04) [[release notes]](https://shrinerb.com/docs/release_notes/2.13.0)\n\n* Specify UTF-8 charset in `Content-Type` response header in `presign_endpoint` plugin (@janko)\n\n* Specify UTF-8 charset in `Content-Type` response header in `upload_endpoint` plugin (@janko)\n\n* Force UTF-8 encoding on filenames coming from Rack's multipart request params in `rack_file` plugin (@janko)\n\n* Raise `Shrine::Error` if `file` command returns error in stdout in `determine_mime_type` plugin (@janko)\n\n* Allow `:host` in `S3#url` to specify a host URL with an additional path prefix (@janko)\n\n* Revert adding bucket name to URL path in `S3#url` when `:host` is used with `:force_path_style` (@janko)\n\n* In `upload_endpoint` error with \"Upload Not Valid\" when `file` parameter is present but not a file (@janko)\n\n* Allow `Attacher#assign` to accept options for `Shrine#upload` (@janko)\n\n* Add `:metadata` option to `Shrine#upload` for manually overriding extracted metadata (@janko)\n\n* Add `:force` option to `infer_extension` plugin for always replacing the current extension (@jrochkind)\n\n* Add `:public` option to `S3#initialize` for enabling public uploads (@janko)\n\n* Add ability to specify a custom `:signer` for `Shrine::Storage::S3#url` (@janko)\n\n* In `S3#upload` do multipart upload for large non-file IO objects (@janko)\n\n* In `S3#upload` switch to `Aws::S3::Object#upload_stream` for multipart uploads of IO objects of unknown size (@janko)\n\n* In `S3#upload` deprecate using aws-sdk-s3 lower than 1.14 when uploading IO objects of unknown size (@janko)\n\n## 2.12.0 (2018-08-22) [[release notes]](https://shrinerb.com/docs/release_notes/2.12.0)\n\n* Ignore nil values when assigning files from a remote URL (@janko)\n\n* Ignore nil values when assigning files from a data URI (@GeekOnCoffee)\n\n* Raise `Shrine::Error` when child process failed to be spawned in `:file` MIME type analyzer (@hmistry)\n\n* Use the appropriate unit in error messages of filesize validators in `validation_helpers` plugin (@hmistry)\n\n* Fix subclassing not inheriting storage resolvers from superclass in `dynamic_storage` plugin (@janko)\n\n* Un-deprecate assigning cached versions (@janko)\n\n* Add `Attacher#assign_remote_url` which allows dynamically passing downloader options (@janko)\n\n* Deprecate `:storages` option in `download_endpoint` plugin in favour of `UploadedFile#download_url` (@janko)\n\n* Add `:redirect` option to `download_endpoint` plugin for redirecting to the uploaded file (@janko)\n\n* Fix encoding issues when uploading IO object with unknown size to S3 (@janko)\n\n* Accept additional `File.open` arguments in `FileSystem#open` (@janko)\n\n* Add `:rewindable` option to `S3#open` for disabling caching of read content to disk (@janko)\n\n* Make `UploadedFile#open` always open a new IO object and close the previous one (@janko)\n\n## 2.11.0 (2018-04-28) [[release notes]](https://shrinerb.com/docs/release_notes/2.11.0)\n\n* Add `Shrine.with_file` for temporarily converting an IO-like object into a file (@janko)\n\n* Add `:method` value to the `S3#presign` result indicating the HTTP verb that should be used (@janko)\n\n* Add ability to specify `method: :put` in `S3#presign` to generate data for PUT upload (@janko)\n\n* Return a `Struct` instead of a `Aws::S3::PresignedPost` object in `S3#presign` (@janko)\n\n* Deprecate `Storage#presign` returning a custom object in `presign_endpoint` (@janko)\n\n* Allow `Storage#presign` to return a Hash in `presign_endpoint` (@janko)\n\n* Add ability to specify upload checksum in `upload_endpoint` plugin (@janko)\n\n* Don't raise exception in `:mini_magick` and `:ruby_vips` dimensions analyzers when image is invalid (@janko)\n\n* Don't remove bucket name from S3 URL path with `:host` when `:force_path_style` is set (@janko)\n\n* Correctly determine MIME type from extension of empty files (@janko)\n\n* Modify `UploadedFile#download` not to reopen the uploaded file if it's already open (@janko)\n\n* Add `UploadedFile#stream` for streaming content into a writable object (@janko)\n\n* Deprecate `direct_upload` plugin in favor of `upload_endpoint` and `presign_endpoint` plugins (@janko)\n\n## 2.10.0 (2018-03-28) [[release notes]](https://shrinerb.com/docs/release_notes/2.10.0)\n\n* Add `:fastimage` analyzer to `determine_mime_type` plugin (@mokolabs)\n\n* Keep download endpoint URL the same regardless of metadata ordering (@MSchmidt)\n\n* Remove `:rack_mime` extension inferrer from the `infer_extension` plugin (@janko)\n\n* Allow `UploadedFile#download` to accept a block for temporary file download (@janko)\n\n* Add `:ruby_vips` analyzer to `store_dimensions` plugin (@janko)\n\n* Add `:mini_magick` analyzer to `store_dimensions` plugin (@janko)\n\n* Soft-rename `:heroku` logging format to `:logfmt` (@janko)\n\n* Deprecate `Shrine::IO_METHODS` constant (@janko)\n\n* Don't require IO size to be known on upload (@janko)\n\n* Inherit the logger on subclassing `Shrine` and make it shared across subclasses (@hmistry)\n\n## 2.9.0 (2018-01-27) [[release notes]](https://shrinerb.com/docs/release_notes/2.9.0)\n\n* Support arrays of files in `versions` plugin (@janko)\n\n* Added `:marcel` analyzer to `determine_mime_type` plugin (@janko)\n\n* Deprecate `:filename` option of the `data_uri` plugin in favour of the new `infer_extension` plugin (@janko)\n\n* Add `infer_extension` plugin for automatically deducing upload location extension from MIME type (@janko)\n\n* Apply default storage options passed via `Attachment.new` in `backgrounding` plugin (@janko)\n\n* Fix S3 storage replacing spaces in filename with \"+\" symbols (@ndbroadbent)\n\n* Deprecate the `multi_delete` plugin (@janko)\n\n* Allow calling `UploadedFile#open` without passing a block (@hmistry)\n\n* Delete tempfiles in case of errors in `UploadedFile#download` and `Storage::S3#download` (@hmistry)\n\n* Freeze all string literals (@hmistry)\n\n* Allow passing options to `Model#<attachment>_attacher` for overriding `Attacher` options (@janko)\n\n## 2.8.0 (2017-10-11) [[release notes]](https://shrinerb.com/docs/release_notes/2.8.0)\n\n* Expand relative directory paths when initializing `Storage::FileSystem` (@janko)\n\n* Fix `logging` plugin erroring on `:json` format when ActiveSupport is loaded (@janko)\n\n* Allow `Storage::S3#clear!` to take a block for specifying which objects to delete (@janko)\n\n* Make `:filemagic` analyzer close the FileMagic descriptor even in case of exceptions (@janko)\n\n* Make `:file` analyzer work for potential file types which have magic bytes farther than 256 KB (@janko)\n\n* Deprecate `aws-sdk` 2.x in favour of the new `aws-sdk-s3` gem (@janko)\n\n* Modify `UploadedFile#extension` to always return the extension in lowercase format (@janko)\n\n* Downcase the original file extension when generating an upload location (@janko)\n\n* Allow specifying the full record attribute name in `metadata_attributes` plugin (@janko)\n\n* Allow specifying metadata mappings on `metadata_attributes` plugin initialization (@janko)\n\n* Add support for ranged requests in `download_endpoint` and `rack_response` plugins (@janko)\n\n* Allow `Storage::S3#open` and `Storage::S3#download` to accept additional options (@janko)\n\n* Forward any options given to `UploadedFile#open` or `UploadedFile#download` to the storage (@janko)\n\n* Update `direct_upload` plugin to support Roda 3 (@janko)\n\n## 2.7.0 (2017-09-11) [[release notes]](https://shrinerb.com/docs/release_notes/2.7.0)\n\n* Deprecate the `Shrine::DownloadEndpoint` constant over `Shrine.download_endpoint` (@janko)\n\n* Allow an additional `#headers` attribute on presigns and return it in `presign_endpoint` (@janko)\n\n* Allow overriding `upload_endpoint` and `presign_endpoint` options per-endpoint (@janko)\n\n* Add `:presign` and `:rack_response` options to `presign_endpoint` (@janko)\n\n* Add `:upload`, `:upload_context` and `:rack_response` options to `upload_endpoint` (@janko)\n\n* Modify `upload_endpoint` and `presign_endpoint` to return `text/plain` error responses (@janko)\n\n* Add `:request` upload context parameter in `upload_endpoint` (@janko)\n\n* Change `:action` upload context parameter to `:upload` in `upload_endpoint` (@janko)\n\n* Return `405 Method Not Allowed` on invalid HTTP verb in `upload_endpoint` and `presign_endpoint` (@janko)\n\n* Modify `upload_endpoint` and `presign_endpoint` to handle requests on the root URL (@janko)\n\n* Allow creating Rack apps dynamically in `upload_endpoint` and `presign_endpoint` (@janko)\n\n* Remove Roda dependency from `upload_endpoint` and `presign_endpoint` plugins (@janko)\n\n* Split `direct_upload` plugin into `upload_endpoint` and `presign_endpoint` plugins (@janko)\n\n* Support the new `aws-sdk-s3` gem in `Shrine::Storage::S3` (@lizdeika)\n\n* Return `Cache-Control` header in `download_endpoint` to permanently cache responses (@janko)\n\n* Return `404 Not Found` when uploaded file doesn't exist in `download_endpoint` (@janko)\n\n* Utilize uploaded file metadata when generating response in `download_endpoint` (@janko)\n\n* Fix deprecation warning when generating fake presign with query parameters (@janko)\n\n* Don't raise error in `file` and `filemagic` MIME type analyzer on empty IO (@ypresto)\n\n* Require `down` in `remote_url` plugin even when a custom downloader is given (@janko)\n\n* Require `time` library in `logging` plugin to fix `undefined method #iso8601 for Time` (@janko)\n\n* Allow validations defined on a superclass to be reused in a subclass (@printercu)\n\n* Allow validation error messages to be an array of arguments for ActiveRecord (@janko)\n\n* Allow model subclasses to override the attachment with a different uploader (@janko)\n\n* Accept `Attacher.new` options like `store:` and `cache:` via `Attachment.new` (@ypresto)\n\n* Raise `ArgumentError` when `:bucket` option is nil in `Shrine::Storage::S3#initialize` (@janko)\n\n* Don't wrap base64-encoded content into 60 columns in `UploadedFile#base64` and `#data_uri` (@janko)\n\n* Add `:mini_mime` option to `determine_mime_type` plugin for using the [mini_mime](https://github.com/discourse/mini_mime) gem (@janko)\n\n* Fix `data_uri` plugin raising an exception on Ruby 2.4.1 when using raw data URIs (@janko)\n\n* Implement `Shrine::Storage::S3#open` using the aws-sdk gem instead of `Down.open` (@janko)\n\n* Un-deprecate `Shrine.uploaded_file` accepting file data as JSON string (@janko)\n\n* Don't wrap base64-formatted signatures to 60 columns (@janko)\n\n* Don't add a newline at the end of the base64-formatted signature (@janko)\n\n## 2.6.1 (2017-04-12) [[release notes]](https://shrinerb.com/docs/release_notes/2.6.1)\n\n* Fix `download_endpoint` returning incorrect reponse body in some cases (@janko)\n\n## 2.6.0 (2017-04-04) [[release notes]](https://shrinerb.com/docs/release_notes/2.6.0)\n\n* Make `Shrine::Storage::FileSystem#path` public which returns path to the file as a `Pathname` object (@janko)\n\n* Add `Shrine.rack_file` to `rack_file` plugin for converting Rack uploaded file hash into an IO (@janko)\n\n* Deprecate passing a Rack file hash to `Shrine#upload` (@janko)\n\n* Expose `Shrine.extract_dimensions` and `Shrine.dimensions_analyzers` in `store_dimensions` plugin (@janko)\n\n* Add `metadata_attributes` plugin for syncing attachment metadata with additional record attributes (@janko)\n\n* Remove the undocumented `:magic_header` option from `determine_mime_type` plugin (@janko)\n\n* Expose `Shrine.determine_mime_type` and `Shrine.mime_type_analyzers` in `determine_mime_type` plugin (@janko)\n\n* Add `signature` plugin for calculating a SHA{1,256,384,512}/MD5/CRC32 hash of a file (@janko)\n\n* Return the resolved plugin module when calling `Shrine.plugin` (@janko)\n\n* Accept hash of metadata with symbol keys as well in `add_metadata` block (@janko)\n\n* Add `refresh_metadata` plugin for re-extracting metadata from an uploaded file (@janko)\n\n* Allow S3 storage to use parallelized multipart upload for files from FileSystem storage as well (@janko)\n\n* Improve default multipart copy threshold for S3 storage (@janko)\n\n* Allow specifying multipart upload and copy thresholds separately in `Shrine::Storage::S3` (@janko)\n\n* Fix `Storage::FileSystem#clear!` not deleting old files if there are newer files in the same directory (@janko)\n\n* Allow media type in the data URI to have additional parameters (@janko)\n\n* URI-decode non-base64 data URIs, as such data URIs are URI-encoded according to the specification (@janko)\n\n* Improve performance of parsing data URIs by 10x switching from a regex to StringScanner (@janko)\n\n* Reduce memory usage of `Shrine.data_uri` and `UploadedFile#base64` by at least 2x (@janko)\n\n* Add `Shrine.data_uri` to `data_uri` plugin which parses and converts the given data URI to an IO object (@janko)\n\n* Make `rack_file` plugin work with HashWithIndifferentAccess-like objects such as Hashie::Mash (@janko)\n\n* Expose `Aws::S3::Client` via `Shrine::Storage::S3#client`, and deprecate `Shrine::Strorage::S3#s3` (@janko)\n\n* Modify `delete_raw` plugin to delete any IOs that respond to `#path` (@janko)\n\n* Require the Tempfile standard library in lib/shrine.rb (@janko)\n\n* Deprecate dimensions validations passing when a dimension is nil (@janko)\n\n* Deprecate passing regexes to type/extension whitelists/blacklists in `validation_helpers` (@janko)\n\n* Don't include list of blacklisted types and extensions in default `validation_helpers` messages (@janko)\n\n* Improve default error messages in `validation_helpers` plugin (@janko)\n\n* Don't require the `benchmark` standard library in `logging` plugin (@janko)\n\n* Don't dirty the attacher in `Attacher#set` when attachment hasn't changed (@janko)\n\n* Rename `Attacher#attached?` to a more accurate `Attacher#changed?` (@janko)\n\n* Allow calling `Attacher#finalize` if attachment hasn't changed, instead of raising an error (@janko)\n\n* Make `Shrine::Storage::S3#object` method public (@janko)\n\n* Prevent autoloading race conditions in aws-sdk gem by eager loading the S3 service (@janko)\n\n* Raise `Shrine::Error` when `Shrine#generate_location` returns nil (@janko)\n\n## 2.5.0 (2016-11-11) [[release notes]](https://shrinerb.com/docs/release_notes/2.5.0)\n\n* Add `Attacher.default_url` as the idiomatic way of declaring default URLs (@janko)\n\n* Allow uploaders themselves to accept Rack uploaded files when `rack_file` is loaded (@janko)\n\n* Raise a descriptive error when two versions are pointing to the same IO object (@janko)\n\n* Make `backgrounding` plugin work with plain model instances (@janko)\n\n* Make validation methods in `validation_helpers` plugin return whether validation succeeded (@janko)\n\n* Make extension matching case insensitive in `validation_helpers` plugin (@jonasheinrich)\n\n* Make `remove_invalid` plugin remove dirty state on attacher after removing invalid file (@janko)\n\n* Raise error if `Shrine::UploadedFile` isn't initialized with valid data (@janko)\n\n* Accept `extension` parameter without the dot in presign endpoint of `direct_upload` plugin (@jonasheinrich)\n\n* Add `:fallback_to_original` option to `versions` plugin for disabling fallback to original file (@janko)\n\n* Add `#dimensions` method to `UploadedFile` when loading `store_dimensions` plugin (@janko)\n\n* Make it possible to extract multiple metadata values at once with the `add_metadata` plugin (@janko)\n\n## 2.4.1 (2016-10-17) [[release notes]](https://shrinerb.com/docs/release_notes/2.4.1)\n\n* Move back JSON serialization from `Attacher#write` to `Attacher#_set` (@janko)\n\n* Make `remove_invalid` plugin assign back a previous attachment if was there (@janko)\n\n* Deprecate `Storage::FileSystem#download` (@janko)\n\n* In `UploadedFile#download` use extension from `#original_filename` if `#id` doesn't have it (@janko)\n\n## 2.4.0 (2016-10-11) [[release notes]](https://shrinerb.com/docs/release_notes/2.4.0)\n\n* Add `#convert_before_write` and `#convert_after_read` on the Attacher for data attribute conversion (@janko)\n\n* Extract the `<attachment>_data` attribute name into `Attacher#data_attribute` (@janko)\n\n* Support JSON and JSONB PostgreSQL columns with ActiveRecord (@janko)\n\n* Fix S3 storage not handling filenames with double quotes in Content-Disposition header (@janko)\n\n* Work around aws-sdk failing with non-ASCII characters in Content-Disposition header (@janko)\n\n* Allow dynamically generating URL options in `default_url_options` plugin (@janko)\n\n* Don't run file validations when duplicating the record in `copy` plugin (@janko)\n\n* Don't use `Storage#stream` in download_endpoint plugin anymore, rely on `Storage#open` (@janko)\n\n* Remove explicitly unlinking Tempfiles returned by `Storage#open` (@janko)\n\n* Move `:host` from first-class storage option to `#url` option on FileSystem and S3 storage (@janko)\n\n* Don't fail in FileSystem storage when attempting to delete a file that doesn't exist (@janko)\n\n* In `UploadedFile#open` handle the case when `Storage#open` raises an error (@janko)\n\n* Make the `sequel` plugin use less memory during transactions (@janko)\n\n* Use Roda's streaming plugin in `download_endpoint` for better EventMachine integration (@janko)\n\n* Deprecate accepting a JSON string in `Shrine.uploaded_file` (@janko)\n\n* In S3 storage automatically write original filename to `Content-Disposition` header (@janko)\n\n* Override `#to_s` in `Shrine::Attachment` for better introspection with `puts` (@janko)\n\n## 2.3.1 (2016-09-01) [[release notes]](https://shrinerb.com/docs/release_notes/2.3.1)\n\n* Don't change permissions of existing directories in FileSystem storage (@janko)\n\n## 2.3.0 (2016-08-27) [[release notes]](https://shrinerb.com/docs/release_notes/2.3.0)\n\n* Prevent client from caching the presign response in direct_upload plugin (@janko)\n\n* Make Sequel update only the attachment in background job (@janko)\n\n* Add copy plugin for copying files from one record to another (@janko)\n\n* Disable moving when uploading stored file to backup storage (@janko)\n\n* Make `Attacher#recache` from the recache plugin public for standalone usage (@janko)\n\n* Allow changing `Shrine::Attacher#context` once the attacher is instantiated (@janko)\n\n* Make `Attacher#read` for reading the attachment column public (@janko)\n\n* Don't rely on the `#id` writer on a model instance in backgrounding plugin (@janko)\n\n* Don't make `Attacher#swap` private in sequel and activerecord plugins (@janko)\n\n* Set default UNIX permissions to 0644 for files and 0755 for directories (@janko)\n\n* Apply directory permissions to all subfolders inside the main folder (@janko)\n\n* Add `:directory_permissions` to `Storage::FileSystem` (@janko)\n\n## 2.2.0 (2016-07-29) [[release notes]](https://shrinerb.com/docs/release_notes/2.2.0)\n\n* Soft deprecate `:phase` over `:action` in `context` (@janko)\n\n* Add ability to sequel and activerecord plugins to disable callbacks and validations (@janko)\n\n* The direct_upload endpoint now always includes both upload and presign routes (@janko)\n\n* Don't let the combination for delete_raw and moving plugins trigger any errors (@janko)\n\n* Add `UploadedFile#open` that mimics `File.open` with a block (@janko)\n\n* In the storage linter don't require `#clear!` to be implemented (@janko)\n\n* In backgrounding plugin don't require model to have attachment module included (@janko)\n\n* Add add_metadata plugin for defining additional metadata values to be extracted (@janko)\n\n* In determine_mime_type plugin raise error when file command wasn't found or errored (@janko)\n\n* Add processing plugin for simpler and more declarative definition of processing (@janko)\n\n* Storage classes don't need to implement the `#read` method anymore (@janko)\n\n* Use aws-sdk in `S3#download`, which will automatically retry failed downloads (@janko)\n\n* Add `:multipart_threshold` for when S3 storage should use parallelized multipart copy/upload (@janko)\n\n* Automatically use optimized multipart S3 upload for files larger than 15MB (@janko)\n\n* Avoid an additional HEAD request to determine content length in multipart S3 copy (@janko)\n\n## 2.1.1 (2016-07-14) [[release notes]](https://shrinerb.com/docs/release_notes/2.1.1)\n\n* Fix `S3#open` throwing a NameError if `net/http` isn't required (@janko)\n\n## 2.1.0 (2016-06-27) [[release notes]](https://shrinerb.com/docs/release_notes/2.1.0)\n\n* Remove `:names` from versions plugin, and deprecate generating versions in :cache phase (@janko)\n\n* Pass a `Shrine::UploadedFile` in restore_cached_data instead of the raw IO (@janko)\n\n* Increase magic header length in determine_mime_type and make it configurable (@janko)\n\n* Execute `file` command in determine_mime_type the same way for files as for general IOs (@janko)\n\n* Make logging and parallelize plugins work properly when loaded in this order (@janko)\n\n* Don't assert arity of IO methods, so that objects like `Rack::Test::UploadedFile` are allowed (@janko)\n\n* Deprecate `#cached_<attachment>_data=` over using `<attachment>` for the hidden field (@janko)\n\n## 2.0.1 (2016-05-30) [[release notes]](https://shrinerb.com/docs/release_notes/2.0.1)\n\n* Don't override previously set default_url in versions plugin (@janko)\n\n## 2.0.0 (2016-05-19) [[release notes]](https://shrinerb.com/docs/release_notes/2.0.0)\n\n* Include query parameters in CDN-ed S3 URLs, making them work for private objects (@janko)\n\n* Remove the `:include_error` option from remote_url plugin (@janko)\n\n* Make previous plugin options persist when reapplying the plugin (@janko)\n\n* Improve how upload options and metadata are passed to storage's `#upload` and `#move` (@janko)\n\n* Remove `Shrine::Confirm` and confirming `Storage#clear!` in general (@janko)\n\n* Allow implementing a custom dimensions analyzer using built-in ones (@janko)\n\n* Don't error in determine_mime_type when MimeMagic cannot determine the MIME (@janko)\n\n* Allow implementing a custom MIME type analyzer using built-in ones (@janko)\n\n* Don't check that the cached file exists in restore_cached_data plugin (@janko)\n\n* Deprecate migration_helpers plugin and move `Attacher#cached?` and `Attacher#stored?` to base (@janko)\n\n* Don't trigger restore_cached_data plugin functionality when assigning the same cached attachment (@janko)\n\n* Give `Attacher#_promote` and `Attacher#promote` the same method signature (@janko)\n\n* Add `Attacher#_delete` which now spawns a background job instead of `Attacher#delete!` (@janko)\n\n* Make `Attacher#cache!`, `Attacher#store!`, and `Attacher#delete!` public (@janko)\n\n* Don't cache storages in dynamic_storage plugin (@janko)\n\n* Make only one HTTP request in download_endpoint plugin (@janko)\n\n* Print secuity warning when not using determine_mime_type plugin (@janko)\n\n* Support Mongoid in backgrounding plugin (@janko)\n\n* Allow including attachment module to non-`Sequel::Model` objects in sequel plugin (@janko)\n\n* Handle paths that start with \"-\" in determine_mime_type plugin when `:file` analyzer is used (@zaeleus)\n\n* Allow including attachment module to non-`ActiveRecord::Base` objects in activerecord plugin (@janko)\n\n* Remove deprecated \"restore_cached\" alias for restore_cached_data plugin (@janko)\n\n* Remove deprecated \"delete_uploaded\" alias for delete_raw plugin (@janko)\n\n* Make the default generated unique location shorter (@janko)\n\n* Make the `:delegate` option in migration_helpers default to `false` (@janko)\n\n* Don't require `:storages` option anymore in moving plugin (@janko)\n\n* Don't delete uploaded IO if storage doesn't support moving in moving plugin (@janko)\n\n* Rename delete phases to be shorter and consistent in naming with upload phases (@janko)\n\n* Remove deprecated `Shrine#default_url` (@janko)\n\n* Remove deprecated `:subdirectory` on FileSystem storage (@janko)\n\n* Don't return the uploaded file in `Attacher#set` and `Attacher#assign` (@janko)\n\n* Return the attacher instance in `Attacher.promote` and `Attacher.delete` in backgrounding plugin (@janko)\n\n* Rename \"attachment\" to \"name\", and \"uploaded_file\" to \"attachment\" in backgrounding plugin (@janko)\n\n* Remove using `:presign` for presign options instead of `:presign_options` (@janko)\n\n* Remove deprecated `Shrine.direct_endpoint` from direct_upload plugin (@janko)\n\n* Remove deprecated keep_location plugin (@janko)\n\n* Make `Shrine#extract_dimensions` a private method in store_dimensions plugin (@janko)\n\n* Keep `Shrine#extract_mime_type` a private method when loading determine_mime_type plugin (@janko)\n\n* Deprecate loading the backgrounding plugin through the old \"background_helpers\" alias (@janko)\n\n## 1.4.2 (2016-04-19) [[release notes]](https://shrinerb.com/docs/release_notes/1.4.2)\n\n* Removed ActiveRecord's automatic support for optimistic locking as it wasn't stable (@janko)\n\n* Fixed record's dataset being modified after promoting preventing further updates with the same instance (@janko)\n\n## 1.4.1 (2016-04-18) [[release notes]](https://shrinerb.com/docs/release_notes/1.4.1)\n\n* Bring back triggering callbacks on promote in ORM plugins, and add support for optimistic locking (@janko)\n\n## 1.4.0 (2016-04-15) [[release notes]](https://shrinerb.com/docs/release_notes/1.4.0)\n\n* Return \"Content-Length\" response header in download_endpoint plugin (@janko)\n\n* Make determine_mime_type and store_dimensions automatically rewind IO with custom analyzer (@janko)\n\n* Make `before_*` and `after_*` hooks happen before and after `around_*` hooks (@janko)\n\n* Rename restore_cached plugin to more accurate \"restore_cached_data\" (@janko)\n\n* Prevent errors when attempting to validate dimensions when they are absent (@janko)\n\n* Remove \"thread\" gem dependency in parallelize plugin (@janko)\n\n* Add `:filename` to data_uri plugin for generating filenames based on content type (@janko)\n\n* Make user-defined hooks always happen around logging (@janko)\n\n* Add `:presign_location` to direct_upload for generating the key (@janko)\n\n* Add separate `:presign_options` option for receiving presign options in direct_upload plugin (@janko)\n\n* Add ability to generate fake presigns for storages which don't support them for testing (@janko)\n\n* Change the `/:storage/:name` route to `/:storage/upload` in direct_upload plugin (@janko)\n\n* Fix logger not being inherited in the logging plugin (@janko)\n\n* Add delete_promoted plugin for deleting promoted files after record has been updated (@janko)\n\n* Allow passing phase to `Attacher#promote` and generalize promoting background job (@janko)\n\n* Close the cached file after extracting its metadata in restore_cached plugin (@janko)\n\n* Rename delete_uploaded plugin to \"delete_raw\" to better explain its functionality (@janko)\n\n* Pass the SSL CA bundle to open-uri when downloading an S3 file (@janko)\n\n* Add `Attacher.dump` and `Attacher.load` for writing custom background jobs with custom functionality (@janko)\n\n* Fix S3 URL erroring due to not being URL-encoded when `:host` option is used (@janko)\n\n* Remove a tiny possibility of a race condition with backgrounding on subsequent updates (@janko)\n\n* Add `:delegate` option to migration_helpers for opting out of defining methods on the model (@janko)\n\n* Make logging plugin log number of both input and output files for processing (@janko)\n\n* Make deleting backup work with backgrounding plugin (@janko)\n\n* Make storing backup happen *after* promoting instead of before (@janko)\n\n* Add `:fallbacks` to versions plugin for fallback URLs for versions which haven't finished processing (@janko)\n\n* Fix keep_files not to spawn a background job when file will not be deleted (@janko)\n\n## 1.3.0 (2016-03-12) [[release notes]](https://shrinerb.com/docs/release_notes/1.3.0)\n\n* Add `<attachment>_cached?` and `<attachment>_stored?` to migration_helpers plugin (@janko)\n\n* Fix `Attacher#backup_file` from backup plugin not to modify the given uploaded file (@janko)\n\n* Allow modifying UploadedFile's data hash after it's instantiated to change the UploadedFile (@janko)\n\n* Deprecate the keep_location plugin (@janko)\n\n* Don't mutate context hash inside the uploader (@janko)\n\n* Make extracted metadata accessible in `#generate_location` through `:metadata` in context hash (@janko)\n\n* Don't require the \"metadata\" key when instantiating a `Shrine::UploadedFile` (@janko)\n\n* Add `:include_error` option to remote_url for accessing download error in `:error_message` block (@janko)\n\n* Give different error message when file wasn't found or was too large in remote_url (@janko)\n\n* Rewind the IO after extracting MIME type with MimeMagic (@janko)\n\n* Rewind the IO after extracting image dimensions even when extraction failed (@kaapa)\n\n* Correctly infer the extension in `#generate_location` when uploading an `UploadedFile` (@janko)\n\n* Fix ability for errors to accumulate in data_uri and remote_url plugins when assigning mutliples to same record instance (@janko)\n\n* Bump Down dependency to 2.0.0 in order to fix downloading URLs with \"[]\" characters (@janko)\n\n* Add `:namespace` option to pretty_location for including class namespace in location (@janko)\n\n* Don't include the namespace of the class in the location with the pretty_location plugin (@janko)\n\n* Remove aws-sdk deprecation warning when storage isn't instantiated with credentials (@reidab)\n\n* Don't make uploaded file's metadata methods error when the corresponding key-value pair is missing (@janko)\n\n* Close the `UploadedFile` on upload only if it was previously opened, which doesn't happen on S3 COPY (@reidab)\n\n* Fix `NameError` when silencing \"missing record\" errors in backgrounding (@janko)\n\n## 1.2.0 (2016-01-26) [[release notes]](https://shrinerb.com/docs/release_notes/1.2.0)\n\n* Make `Shrine::Attacher.promote` and `Shrine::Attacher.delete` return the record in backgrounding plugin (@janko)\n\n* Close the IO on upload even if the upload errors (@janko)\n\n* Use a transaction when checking if attachment has changed after storing during promotion (@janko)\n\n* Don't attempt to start promoting in background if attachment has already changed (@janko)\n\n* Don't error in backgrounding when record is missing (@janko)\n\n* Prevent multiline content type spoof attempts in validation_helpers (@xzo)\n\n* Make custom metadata inherited from uploaded files and make `#extract_metadata` called only on caching (@janko)\n\n## 1.1.0 (2015-12-26) [[release notes]](https://shrinerb.com/docs/release_notes/1.1.0)\n\n* Rename the \"background_helpers\" plugin to \"backgrounding\" (@janko)\n\n* Rename the `:subdirectory` option to `:prefix` on FileSystem storage (@janko)\n\n* Add download_endpoint plugin for downloading files uploaded to database storages and for securing downloads (@janko)\n\n* Make `around_*` hooks return the result of the corresponding action (@janko)\n\n* Make the direct upload endpoint customizable, inheritable and inspectable (@janko)\n\n* Add upload_options plugin for dynamically generating storage-specific upload options (@janko)\n\n* Allow the context hash to be modified (@janko)\n\n* Fix extension not being returned for storages which remove it from ID (Flickr, SQL, GridFS) (@janko)\n\n* Delete underlying Tempfiles when closing an `UploadedFile` (@janko)\n\n* Fix background_helpers plugin not working with ActiveJob (@janko)\n\n* Add `UploadedFile#base64` to the data_uri plugin (@janko)\n\n* Optimize `UploadedData#data_uri` to not download the file and instantiate file contents string only once (@janko)\n\n* Allow adding S3 upload options dynamically per upload (@janko)\n\n* Add delete_uploaded plugin for automatically deleting files after they're uploaded (@janko)\n\n* Close an open file descriptor left after downloading a FileSystem file (@janko)\n\n* Make `FileSystem#url` Windows compatible (@janko)\n\n* Add `UploadedFile#content_type` alias to `#mime_type` for better integration with upload libraries (@janko)\n\n* Add a `UploadedFile#data_uri` method to the data_uri plugin (@janko)\n\n* Allow the data_uri plugin to accept \"+\" symbols in MIME type names (@janko)\n\n* Make the data_uri plugin accept data URIs which aren't base64 encoded (@janko)\n\n* Close all IOs after uploading them (@janko)\n\n* Allow passing a custom IO object to the Linter (@janko)\n\n* Add remove_invalid plugin for automatically deleting and deassigning invalid cached files (@janko)\n\n* Add `:max_size` option to the direct_upload plugin (@janko)\n\n* Move `Shrine#default_url` to default_url plugin (@janko)\n\n* Enable `S3#multi_delete` to delete more than 1000 objects by batching deletes (@janko)\n\n* Add the keep_location plugin for easier debugging or backups (@janko)\n\n* Add the backup plugin for backing up stored files (@janko)\n\n* Storages don't need to rewind the files after upload anymore (@janko)\n\n* Make S3 presigns work when the `:endpoint` option is given (@NetsoftHoldings)\n\n* Fix parallelize plugin to always work with the moving plugin (@janko)\n\n* Fix S3 storage to handle copying files that are larger than 5GB (@janko)\n\n* Add `:upload_options` to S3 storage for applying additional options on upload (@janko)\n\n* Reduce length of URLs generated with pretty_location plugin (@gshaw)\n\n## 1.0.0 (2015-11-27) [[release notes]](https://shrinerb.com/docs/release_notes/1.0.0)\n\n* Improve Windows compatibility in the FileSystem storage (@janko)\n\n* Remove the ability for FileSystem storage to accept IDs starting with a slash (@janko)\n\n* Fix keep_files plugin requiring context for deleting files (@janko)\n\n* Extract assigning cached files by parsed JSON into a parsed_json plugin (@janko)\n\n* Add `(before|around|after)_upload` to the hooks plugin (@janko)\n\n* Fix `S3#multi_delete` and `S3#clear!` not using the prefix (@janko)\n\n* Add ability to pass presign options to storages in the direct_upload plugin (@janko)\n\n* Remove `Shrine.io!` because it was actually meant to be only for internal use (@janko)\n\n* Remove `Shrine.delete` because of redundancy (@janko)\n\n* Add default_url_options plugin for specifiying default URL options for uploaded files (@janko)\n\n* Add module_include plugin for easily extending core classes for given uploader (@janko)\n\n* Add support for Sequel's Postgres JSON column support (@janko)\n\n* Fix migration_helpers plugin not detecting when column changed (@janko)\n\n* Add the `:public` option to S3 storage for retrieving public URLs which aren't signed (@janko)\n\n* Remove the delete_invalid plugin, as it could cause lame errors (@janko)\n\n* Don't delete cached files anymore, as it can cause errors with backgrounding (@janko)\n\n* Add a `:host` option to the S3 storage for specifying CDNs (@janko)\n\n* Don't allow same attachment to be promoted multiple times with backgrounding (@janko)\n\n* Fix recache plugin causing an infinite loop (@janko)\n\n* Fix an encoding error in determine_mime_type when using `:file` with non-files (@janko)\n\n* Make `UploadedFile` actually delete itself only once (@janko)\n\n* Make `UploadedFile#inspect` cleaner by showing only the data hash (@janko)\n\n* Make determine_mime_type able to accept non-files when using :file (@janko)\n\n* Make logging plugin accept PORO instance which don't have an #id (@janko)\n\n* Add rack_file plugin for attaching Rack file hashes to models (@janko)\n", "# frozen_string_literal: true\n\nrequire \"rack\"\nrequire \"content_disposition\"\n\nrequire \"openssl\"\nrequire \"tempfile\"\nrequire \"pathname\"\n\nclass Shrine\n  module Plugins\n    # Documentation can be found on https://shrinerb.com/docs/plugins/derivation_endpoint\n    module DerivationEndpoint\n      LOG_SUBSCRIBER = -> (event) do\n        Shrine.logger.info \"Derivation (#{event.duration}ms) \u2013 #{{\n          name:     event[:derivation].name,\n          args:     event[:derivation].args,\n          uploader: event[:uploader],\n        }.inspect}\"\n      end\n\n      def self.load_dependencies(uploader, **)\n        uploader.plugin :rack_response\n        uploader.plugin :_urlsafe_serialization\n      end\n\n      def self.configure(uploader, log_subscriber: LOG_SUBSCRIBER, **opts)\n        uploader.opts[:derivation_endpoint] ||= { options: {}, derivations: {} }\n        uploader.opts[:derivation_endpoint][:options].merge!(opts)\n\n        unless uploader.opts[:derivation_endpoint][:options][:secret_key]\n          fail Error, \"must provide :secret_key option to derivation_endpoint plugin\"\n        end\n\n        # instrumentation plugin integration\n        uploader.subscribe(:derivation, &log_subscriber) if uploader.respond_to?(:subscribe)\n      end\n\n      module ClassMethods\n        # Returns a mountable Rack app that handles derivation requests.\n        def derivation_endpoint(**options)\n          Shrine::DerivationEndpoint.new(shrine_class: self, options: options)\n        end\n\n        # Calls the derivation endpoint passing the request information, and\n        # returns the Rack response triple.\n        #\n        # It uses a trick where it removes the derivation path prefix from the\n        # path info before calling the Rack app, which is what web framework\n        # routers do before they're calling a mounted Rack app.\n        def derivation_response(env, **options)\n          script_name = env[\"SCRIPT_NAME\"]\n          path_info   = env[\"PATH_INFO\"]\n\n          prefix = derivation_options[:prefix]\n          match  = path_info.match(/^\\/#{prefix}/)\n\n          fail Error, \"request path must start with \\\"/#{prefix}\\\", but is \\\"#{path_info}\\\"\" unless match\n\n          begin\n            env[\"SCRIPT_NAME\"] += match.to_s\n            env[\"PATH_INFO\"]    = match.post_match\n\n            derivation_endpoint(**options).call(env)\n          ensure\n            env[\"SCRIPT_NAME\"] = script_name\n            env[\"PATH_INFO\"]   = path_info\n          end\n        end\n\n        # Registers a derivation block, which is called when the corresponding\n        # derivation URL is requested.\n        def derivation(name, &block)\n          derivations[name.to_sym] = block\n        end\n\n        def derivations\n          opts[:derivation_endpoint][:derivations]\n        end\n\n        def derivation_options\n          opts[:derivation_endpoint][:options]\n        end\n      end\n\n      module FileMethods\n        # Generates a URL to a derivation with the receiver as the source file.\n        # Any arguments provided will be included in the URL and passed to the\n        # derivation block. Accepts additional URL options.\n        def derivation_url(name, *args, **options)\n          derivation(name, *args).url(**options)\n        end\n\n        # Calls the specified derivation with the receiver as the source file,\n        # returning a Rack response triple. The derivation endpoint ultimately\n        # calls this method.\n        def derivation_response(name, *args, env:, **options)\n          derivation(name, *args, **options).response(env)\n        end\n\n        # Returns a Shrine::Derivation object created from the provided\n        # arguments. This object offers additional methods for operating with\n        # derivatives on a lower level.\n        def derivation(name, *args, **options)\n          Shrine::Derivation.new(\n            name:    name,\n            args:    args,\n            source:  self,\n            options: options,\n          )\n        end\n      end\n    end\n\n    register_plugin(:derivation_endpoint, DerivationEndpoint)\n  end\n\n  class Derivation\n    class NotFound       < Error; end\n    class SourceNotFound < Error; end\n\n    attr_reader :name, :args, :source, :options\n\n    def initialize(name:, args:, source:, options:)\n      @name    = name.to_sym\n      @args    = args\n      @source  = source\n      @options = options\n    end\n\n    # Returns an URL to the derivation.\n    def url(**options)\n      Derivation::Url.new(self).call(\n        host:       option(:host),\n        prefix:     option(:prefix),\n        expires_in: option(:expires_in),\n        version:    option(:version),\n        metadata:   option(:metadata),\n        **options,\n      )\n    end\n\n    # Returns the derivation result in form of a Rack response triple.\n    def response(env)\n      Derivation::Response.new(self).call(env)\n    end\n\n    # Returns the derivation result as a File/Tempfile or a\n    # Shrine::UploadedFile object.\n    def processed\n      Derivation::Processed.new(self).call\n    end\n\n    # Calls the derivation block and returns the direct result.\n    def generate(file = nil)\n      Derivation::Generate.new(self).call(file)\n    end\n\n    # Uploads the derivation result to a dedicated destination on the specified\n    # Shrine storage.\n    def upload(file = nil, **options)\n      Derivation::Upload.new(self).call(file, **options)\n    end\n\n    # Returns a Shrine::UploadedFile object pointing to the uploaded derivative\n    # if it exists.\n    def retrieve\n      Derivation::Retrieve.new(self).call\n    end\n\n    # Returns opened Shrine::UploadedFile object pointing to the uploaded\n    # derivative if it exists.\n    def opened\n      Derivation::Opened.new(self).call\n    end\n\n    # Deletes the derivation result from the storage.\n    def delete\n      Derivation::Delete.new(self).call\n    end\n\n    def self.options\n      @options ||= {}\n    end\n\n    def self.option(name, default: nil, result: nil)\n      options[name] = { default: default, result: result }\n    end\n\n    option :cache_control,               default: -> { default_cache_control }\n    option :disposition,                 default: -> { \"inline\" }\n    option :download,                    default: -> { true }\n    option :download_options,            default: -> { {} }\n    option :expires_in\n    option :filename,                    default: -> { default_filename }\n    option :host\n    option :metadata,                    default: -> { [] }\n    option :prefix\n    option :secret_key\n    option :type\n    option :upload,                      default: -> { false }\n    option :upload_location,             default: -> { default_upload_location }, result: -> (o) { upload_location(o) }\n    option :upload_open_options,         default: -> { {} }\n    option :upload_options,              default: -> { {} }\n    option :upload_redirect,             default: -> { false }\n    option :upload_redirect_url_options, default: -> { {} }\n    option :upload_storage,              default: -> { default_upload_storage }\n    option :version\n\n    # Retrieves the value of a derivation option.\n    #\n    # * If specified as a raw value, returns that value\n    # * If specified as a block, evaluates that it and returns the result\n    # * If unspecified, returns the default value\n    def option(name)\n      option_definition = self.class.options.fetch(name)\n\n      value = options.fetch(name) { shrine_class.derivation_options[name] }\n      value = instance_exec(&value) if value.is_a?(Proc)\n\n      if value.nil?\n        default = option_definition[:default]\n        value   = instance_exec(&default) if default\n      end\n\n      result = option_definition[:result]\n      value  = instance_exec(value, &result) if result\n\n      value\n    end\n\n    def shrine_class\n      source.shrine_class\n    end\n\n    private\n\n    # When bumping the version, we also append it to the upload location to\n    # ensure we're not retrieving old derivatives.\n    def upload_location(location)\n      location = location.sub(/(?=(\\.\\w+)?$)/, \"-#{option(:version)}\") if option(:version)\n      location\n    end\n\n    # For derivation \"thumbnail\" with arguments \"600/400\" and source id of\n    # \"1f6375ad.ext\", returns \"thumbnail-600-400-1f6375ad\".\n    def default_filename\n      [name, *args, File.basename(source.id, \".*\")].join(\"-\")\n    end\n\n    # For derivation \"thumbnail\" with arguments \"600/400\" and source id of\n    # \"1f6375ad.ext\", returns \"1f6375ad/thumbnail-600-400\".\n    def default_upload_location\n      directory = source.id.sub(/\\.[^\\/]+/, \"\")\n      filename  = [name, *args].join(\"-\")\n\n      [directory, filename].join(\"/\")\n    end\n\n    # The source uploaded file storage is the default derivative storage.\n    def default_upload_storage\n      source.storage_key\n    end\n\n    # Allows caching for 1 year or until the URL expires.\n    def default_cache_control\n      if option(:expires_in)\n        \"public, max-age=#{option(:expires_in)}\"\n      else\n        \"public, max-age=#{365*24*60*60}\"\n      end\n    end\n\n    class Command\n      attr_reader :derivation\n\n      def initialize(derivation)\n        @derivation = derivation\n      end\n\n      # Creates methods that delegate to derivation parameters.\n      def self.delegate(*names)\n        names.each do |name|\n          protected define_method(name) {\n            if [:name, :args, :source].include?(name)\n              derivation.public_send(name)\n            else\n              derivation.option(name)\n            end\n          }\n        end\n      end\n\n      private\n\n      def shrine_class\n        derivation.shrine_class\n      end\n    end\n  end\n\n  class Derivation::Url < Derivation::Command\n    delegate :name, :args, :source, :secret_key\n\n    def call(host: nil, prefix: nil, **options)\n      [host, *prefix, identifier(**options)].join(\"/\")\n    end\n\n    private\n\n    def identifier(expires_in: nil,\n                   version: nil,\n                   type: nil,\n                   filename: nil,\n                   disposition: nil,\n                   metadata: [])\n\n      params = {}\n      params[:expires_at]  = (Time.now + expires_in).to_i if expires_in\n      params[:version]     = version if version\n      params[:type]        = type if type\n      params[:filename]    = filename if filename\n      params[:disposition] = disposition if disposition\n\n      # serializes the source uploaded file into an URL-safe format\n      source_component = source.urlsafe_dump(metadata: metadata)\n\n      # generate plain URL\n      url = plain_url(name, *args, source_component, params)\n\n      # generate signed URL\n      signed_url(url)\n    end\n\n    def plain_url(*components, params)\n      # When using Rack < 2, Rack::Utils#escape_path will escape '/'.\n      # Escape each component and then join them together.\n      path  = components.map{|component| Rack::Utils.escape_path(component.to_s)}.join('/')\n      query = Rack::Utils.build_query(params)\n\n      \"#{path}?#{query}\"\n    end\n\n    def signed_url(url)\n      signer = UrlSigner.new(secret_key)\n      signer.sign_url(url)\n    end\n  end\n\n  class DerivationEndpoint\n    attr_reader :shrine_class, :options\n\n    def initialize(shrine_class:, options: {})\n      @shrine_class = shrine_class\n      @options      = options\n    end\n\n    def call(env)\n      request = Rack::Request.new(env)\n\n      status, headers, body = catch(:halt) do\n        error!(405, \"Method not allowed\") unless request.get? || request.head?\n\n        handle_request(request)\n      end\n\n      headers[\"Content-Length\"] ||= body.map(&:bytesize).inject(0, :+).to_s\n\n      [status, headers, body]\n    end\n\n    # Verifies validity of the URL, then extracts parameters from it (such as\n    # derivation name, arguments and source file), and generates a derivation\n    # response.\n    #\n    # Returns \"403 Forbidden\" if signature is invalid, or if the URL has\n    # expired.\n    #\n    # Returns \"404 Not Found\" if derivation block is not defined, or if source\n    # file was not found on the storage.\n    def handle_request(request)\n      verify_signature!(request)\n      check_expiry!(request)\n\n      name, *args, serialized_file = request.path_info.split(\"/\")[1..-1]\n\n      name          = name.to_sym\n      uploaded_file = shrine_class::UploadedFile.urlsafe_load(serialized_file)\n\n      # request params override statically configured options\n      options = self.options.dup\n      options[:type]        = request.params[\"type\"]        if request.params[\"type\"]\n      options[:disposition] = request.params[\"disposition\"] if request.params[\"disposition\"]\n      options[:filename]    = request.params[\"filename\"]    if request.params[\"filename\"]\n      options[:version]     = request.params[\"version\"]     if request.params[\"version\"]\n      options[:expires_in]  = expires_in(request)           if request.params[\"expires_at\"]\n\n      derivation = uploaded_file.derivation(name, *args, **options)\n\n      begin\n        status, headers, body = derivation.response(request.env)\n      rescue Derivation::SourceNotFound\n        error!(404, \"Source file not found\")\n      rescue Derivation::NotFound\n        error!(404, \"Unknown derivation \\\"#{name}\\\"\")\n      end\n\n      # tell clients to cache the derivation result if it was successful\n      if status == 200 || status == 206\n        headers[\"Cache-Control\"] = derivation.option(:cache_control)\n      end\n\n      [status, headers, body]\n    end\n\n    def inspect\n      \"#<#{@shrine_class}::DerivationEndpoint>\"\n    end\n    alias to_s inspect\n\n    private\n\n    # Return an error response if the signature is invalid.\n    def verify_signature!(request)\n      signer = UrlSigner.new(secret_key)\n      signer.verify_url(\"#{request.path_info[1..-1]}?#{request.query_string}\")\n    rescue UrlSigner::InvalidSignature => error\n      error!(403, error.message.capitalize)\n    end\n\n    # Return an error response if URL has expired.\n    def check_expiry!(request)\n      if request.params[\"expires_at\"]\n        error!(403, \"Request has expired\") if expires_in(request) <= 0\n      end\n    end\n\n    def expires_in(request)\n      expires_at = Integer(request.params[\"expires_at\"])\n\n      (Time.at(expires_at) - Time.now).to_i\n    end\n\n    # Halts the request with the error message.\n    def error!(status, message)\n      throw :halt, [status, { \"Content-Type\" => \"text/plain\" }, [message]]\n    end\n\n    def secret_key\n      derivation_options[:secret_key]\n    end\n\n    def derivation_options\n      shrine_class.derivation_options.merge(self.options)\n    end\n  end\n\n  class Derivation::Response < Derivation::Command\n    delegate :type, :disposition, :filename,\n             :upload, :upload_open_options,\n             :upload_redirect, :upload_redirect_url_options\n\n    def call(env)\n      if upload\n        upload_response(env)\n      else\n        local_response(env)\n      end\n    end\n\n    private\n\n    def local_response(env)\n      derivative = derivation.generate\n\n      file_response(derivative, env)\n    end\n\n    # Generates a Rack response triple from a local file. Fills in\n    # `Content-Type` and `Content-Disposition` response headers from derivation\n    # options and file extension of the derivation result.\n    def file_response(file, env)\n      response = rack_file_response(file.path, env)\n\n      status = response[0]\n\n      headers = {\n        \"Content-Type\"        => type || response[1][\"Content-Type\"],\n        \"Content-Length\"      => response[1][\"Content-Length\"],\n        \"Content-Disposition\" => content_disposition(file),\n        \"Content-Range\"       => response[1][\"Content-Range\"],\n        \"Accept-Ranges\"       => \"bytes\",\n      }.compact\n\n      body = Rack::BodyProxy.new(response[2]) { File.delete(file.path) }\n\n      file.close\n\n      [status, headers, body]\n    end\n\n    # This is called when `:upload` is enabled. Checks the storage for already\n    # uploaded derivation result, otherwise calls the derivation block and\n    # uploads the result. If the derivation result is already uploaded, uses\n    # the `rack_response` plugin to generate a Rack response triple.\n    def upload_response(env)\n      uploaded_file = upload_redirect ? derivation.retrieve : derivation.opened\n\n      unless uploaded_file\n        derivative    = derivation.generate\n        uploaded_file = derivation.upload(derivative, delete: upload_redirect)\n      end\n\n      if upload_redirect\n        redirect_url = uploaded_file.url(**upload_redirect_url_options)\n\n        [302, { \"Location\" => redirect_url }, []]\n      else\n        if derivative && File.exist?(derivative.path)\n          file_response(derivative, env)\n        else\n          uploaded_file.to_rack_response(\n            type:        type,\n            disposition: disposition,\n            filename:    filename,\n            range:       env[\"HTTP_RANGE\"],\n          )\n        end\n      end\n    end\n\n    # We call `Rack::Files` with no default `Content-Type`, and make sure we\n    # stay compatible with both Rack 2.x and 1.6.x.\n    def rack_file_response(path, env)\n      if Rack.release >= \"2.1\"\n        server = Rack::Files.new(\"\", {}, nil)\n      else\n        server = Rack::File.new(\"\", {}, nil)\n      end\n\n      if Rack.release > \"2\"\n        server.serving(Rack::Request.new(env), path)\n      else\n        # :nocov:\n        server.path = path\n        server.serving(env)\n        # :nocov:\n      end\n    end\n\n    # Returns disposition and filename formatted for the `Content-Disposition`\n    # header.\n    def content_disposition(file)\n      filename  = self.filename\n      filename += File.extname(file.path) if File.extname(filename).empty?\n\n      ContentDisposition.format(disposition: disposition, filename: filename)\n    end\n  end\n\n  class Derivation::Processed < Derivation::Command\n    delegate :upload\n\n    def call\n      if upload\n        derivation.retrieve || derivation.upload\n      else\n        derivation.generate\n      end\n    end\n  end\n\n  class Derivation::Generate < Derivation::Command\n    delegate :name, :args, :source, :download, :download_options\n\n    def call(file = nil)\n      derivative = generate(file)\n      derivative = normalize(derivative)\n      derivative\n    end\n\n    private\n\n    # Determines how to call the derivation block. If a file object is given,\n    # passes that as the source file, otherwise downloads the source uploaded\n    # file.\n    def generate(file)\n      if download\n        with_downloaded(file) { |file| derive(file, *args) }\n      else\n        derive(*args)\n      end\n    end\n\n    # Calls the derivation block.\n    def derive(*args)\n      instrument_derivation do\n        derivation.instance_exec(*args, &derivation_block)\n      end\n    end\n\n    # Sends a `derivation.shrine` event for instrumentation plugin.\n    def instrument_derivation(&block)\n      return yield unless shrine_class.respond_to?(:instrument)\n\n      shrine_class.instrument(:derivation, derivation: derivation, &block)\n    end\n\n    # Massages the derivation result, ensuring it's opened in binary mode,\n    # rewinded and flushed to disk.\n    def normalize(file)\n      unless file.is_a?(File) || file.is_a?(Tempfile)\n        fail Error, \"expected File or Tempfile object as derivation result, got #{file.inspect}\"\n      end\n\n      file.open if file.is_a?(Tempfile) # refresh file descriptor\n      file.binmode                      # ensure binary mode\n      file\n    end\n\n    def with_downloaded(file, &block)\n      return yield(file) if file\n\n      download_source(&block)\n    end\n\n    # Downloads the source uploaded file from the storage.\n    def download_source(&block)\n      source.download(**download_options, &block)\n    rescue Shrine::FileNotFound\n      raise Derivation::SourceNotFound, \"source file \\\"#{source.id}\\\" was not found on storage :#{source.storage_key}\"\n    end\n\n    def derivation_block\n      shrine_class.derivations[name] or fail Derivation::NotFound, \"derivation #{name.inspect} is not defined\"\n    end\n  end\n\n  class Derivation::Upload < Derivation::Command\n    delegate :upload_location, :upload_storage, :upload_options\n\n    # Uploads the derivation result to the dedicated location on the storage.\n    # If a file object is given, uploads that to the storage, otherwise calls\n    # the derivation block and uploads the result.\n    def call(derivative = nil, **options)\n      if derivative\n        upload(derivative, **options)\n      else\n        upload(derivation.generate, delete: true, **options)\n      end\n    end\n\n    private\n\n    def upload(io, **options)\n      shrine_class.upload io, upload_storage,\n        location:       upload_location,\n        upload_options: upload_options,\n        action:         :derivation,\n        **options\n    end\n  end\n\n  class Derivation::Retrieve < Derivation::Command\n    delegate :upload_storage, :upload_location\n\n    # Returns a Shrine::UploadedFile object pointing to the uploaded derivative\n    # if it exists on the storage.\n    def call\n      uploaded_file = shrine_class.uploaded_file(storage: upload_storage, id: upload_location)\n      uploaded_file if uploaded_file.exists?\n    end\n  end\n\n  class Derivation::Opened < Derivation::Command\n    delegate :upload_storage, :upload_location, :upload_open_options\n\n    # Returns opened Shrine::UploadedFile object pointing to the uploaded if\n    # it exists on the storage.\n    def call\n      uploaded_file = shrine_class.uploaded_file(storage: upload_storage, id: upload_location)\n      uploaded_file.open(**upload_open_options)\n      uploaded_file\n    rescue Shrine::FileNotFound\n    end\n  end\n\n  class Derivation::Delete < Derivation::Command\n    delegate :upload_location, :upload_storage\n\n    # Deletes the uploaded derivation result from the storage.\n    def call\n      storage.delete(upload_location)\n    end\n\n    private\n\n    def storage\n      shrine_class.find_storage(upload_storage)\n    end\n  end\n\n  class UrlSigner\n    class InvalidSignature < Error; end\n\n    attr_reader :secret_key\n\n    def initialize(secret_key)\n      @secret_key = secret_key\n    end\n\n    # Returns a URL with the `signature` query parameter\n    def sign_url(url)\n      path, query = url.split(\"?\")\n\n      params = Rack::Utils.parse_query(query.to_s)\n      params.merge!(\"signature\" => generate_signature(url))\n\n      query = Rack::Utils.build_query(params)\n\n      \"#{path}?#{query}\"\n    end\n\n    # Calculcates the signature from the URL and checks whether it matches the\n    # value in the `signature` query parameter. Raises `InvalidSignature` if\n    # the `signature` parameter is missing or its value doesn't match the\n    # calculated signature.\n    def verify_url(url)\n      path, query = url.split(\"?\")\n\n      params    = Rack::Utils.parse_query(query.to_s)\n      signature = params.delete(\"signature\")\n\n      query = Rack::Utils.build_query(params)\n\n      verify_signature(\"#{path}?#{query}\", signature)\n    end\n\n    def verify_signature(string, signature)\n      if signature.nil?\n        fail InvalidSignature, \"missing \\\"signature\\\" param\"\n      elsif signature != generate_signature(string)\n        fail InvalidSignature, \"provided signature does not match the calculated signature\"\n      end\n    end\n\n    # Uses HMAC-SHA-256 algorithm to generate a signature from the given string\n    # using the secret key.\n    def generate_signature(string)\n      OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA256.new, secret_key, string)\n    end\n  end\nend\n"], "fixing_code": ["## master\n\n* `derivation_endpoint` \u2013 Avoid possibility of timing attacks when comparing signatures (@esparta)\n\n* `derivatives` \u2013 Avoid downloading the attached file when calling default no-op processor (@janko)\n\n* `derivatives` \u2013 Add `:download` processor setting for skipping downloading source file (@jrochkind, @janko)\n\n* `derivatives` \u2013 Copy non-file source IO objects into local file before passing them to the processor (@jrochkind)\n\n* `sequel` \u2013 Call `Attacher#reload` in `Sequel::Model#reload`, which keeps rest of attacher state (@janko, @jrochkind)\n\n* `activerecord` \u2013 Call `Attacher#reload` in `ActiveRecord::Base#reload`, which keeps rest of attacher state (@janko, @jrochkind)\n\n* `add_metadata` \u2013 Add `:skip_nil` option for excluding metadata keys whose values are nil (@renchap)\n\n* `store_dimensions` \u2013 Add `:auto_extraction` option for disabling automatically extracting dimensions on upload (@renchap)\n\n* `mirroring` \u2013 Forward original upload options when mirroring upload (@corneverbruggen)\n\n* `derivation_endpoint` \u2013 Apply `version` URL option in derivation endpoint (@janko)\n\n* `s3` \u2013 Fix `S3#open` not working on aws-sdk-core 3.104 and above (@janko)\n\n* `remove_attachment` \u2013 Delete removed file if a new file was attached right after removal (@janko)\n\n* `upload_endpoint` \u2013 Fix `Shrine.upload_response` not working in a Rails controller (@pldavid2)\n\n* `presign_endpoint` \u2013 Add `OPTIONS` route that newer versions of Uppy check (@janko)\n\n* `derivatives` \u2013 Add `:create_on_promote` option for auto-creating derivatives on promotion (@janko)\n\n* `s3` \u2013 Add back support for client-side encryption (@janko)\n\n* `memory` \u2013 Ensure `Memory#open` returns content in original encoding (@jrochkind)\n\n## 3.2.1 (2020-01-12)\n\n* `derivation_endpoint` \u2013 Use `Rack::Files` constant on Rack >= 2.1 (@janko)\n\n* Fix Ruby 2.7 warnings regarding separation of positional and keyword arguments (@janko)\n\n* `s3` \u2013 Make `S3#open` handle empty S3 objects (@janko)\n\n## 3.2.0 (2019-12-17) [[release notes]](https://shrinerb.com/docs/release_notes/3.2.0)\n\n* `validation` \u2013 Run validation on `Attacher#attach` & `Attacher#attach_cached` instead of `Attacher#change` (@janko)\n\n* `remove_invalid` \u2013 Activate also when `Attacher#validate` is run manually (@janko)\n\n* `remove_invalid` \u2013 Fix incompatibility with `derivatives` plugin (@janko)\n\n* `type_predicates` \u2013 Add new plugin with convenient `UploadedFile` predicate methods based on MIME type (@janko)\n\n* `core` \u2013 Allow assigning back current attached file data (@janko)\n\n* `derivatives` \u2013 Fix `:derivative` value inconsistency when derivatives are being promoted (@janko)\n\n* `add_metadata` \u2013 Add `#add_metadata` method for adding metadata to uploaded files (@janko)\n\n* `derivatives` \u2013 Add `:io` and `:attacher` values to instrumentation event payload (@janko)\n\n## 3.1.0 (2019-11-15) [[release notes]](https://shrinerb.com/docs/release_notes/3.1.0)\n\n* `default_storage` \u2013 Coerce storage key to symbol in `Attacher#cache_key` & `Attacher#store_key` (@janko)\n\n* `core` \u2013 Coerce storage key to symbol in `Attacher#cache_key` & `Attacher#store_key` (@janko)\n\n* `add_metadata` \u2013 Define metadata methods only for the target uploader class (@janko)\n\n* `derivatives` \u2013 Add `:storage` option to `Attacher#create_derivatives` (@janko)\n\n* `store_dimensions` \u2013 Propagate exceptions on loading `ruby-vips` in `:vips` analyzer (@janko)\n\n* `signature` \u2013 Allow skipping rewinding by passing `rewind: false` to `Shrine.signature` (@janko)\n\n* `derivatives` \u2013 Add `Attacher.derivatives` alias for `Attacher.derivatives_processor` (@janko)\n\n## 3.0.1 (2019-10-17) [[release notes]](https://shrinerb.com/docs/release_notes/3.0.1)\n\n* `metadata_attributes` \u2013 Fix exception being raised when there is no attached file (@janko)\n\n* `core` \u2013 Simplify `UploadedFile#inspect` output (@janko)\n\n## 3.0.0 (2019-10-14) [[release notes]](https://shrinerb.com/docs/release_notes/3.0.0)\n\n* `derivation_endpoint` \u2013 Pass `action: :derivation` when uploading derivation results (@janko)\n\n* `core` \u2013 Add `Shrine::Attachment[]` shorthand for `Shrine::Attachment.new` (@janko)\n\n* `core` \u2013 Add `Storage#delete_prefixed` method for deleting all files in specified directory (@jrochkind)\n\n* `linter` \u2013 Return `true` in `Storage::Linter#call` so that it can be used with `assert` (@jrochkind)\n\n* `linter` \u2013 Allow `Storage::Linter` to accept a key that will be used for testing nonexistent file (@janko)\n\n* `core` \u2013 Infer file extension from `filename` metadata (@janko)\n\n* `pretty_location` \u2013 Add `:class_underscore` option for underscoring class name (@Uysim)\n\n* Update `down` dependency to `~> 5.0` (@janko)\n\n* `multi_cache` \u2013 Add new plugin for whitelisting additional temporary storages (@janko, @jrochkind)\n\n* `sequel` \u2013 Extract callback code into attacher methods that can be overridden (@janko)\n\n* `activerecord` \u2013 Extract callback code into attacher methods that can be overridden (@janko)\n\n* `derivation_endpoint` \u2013 Stop re-opening `File` objects returned in derivation result (@janko)\n\n* `derivation_endpoint` \u2013 Allow only `File` or `Tempfile` object as derivation result (@janko)\n\n* `download_endpoint` \u2013 Add `Shrine.download_response` for calling in controller (@janko)\n\n* `core` \u2013 Fetch storage object lazily in `Shrine` instance (@janko)\n\n* `mirroring` \u2013 Add new plugin for replicating uploads and deletes to other storages (@janko)\n\n* `sequel` \u2013 Rename `:callbacks` option to `:hooks` (@janko)\n\n* `model` \u2013 Add `Attacher#set_model` for setting model without loading attachment (@janko)\n\n* `entity` \u2013 Add `Attacher#set_entity` for setting entity without loading attachment (@janko)\n\n* `entity` \u2013 Define `#<name>_attacher` class method when including `Shrine::Attachment` (@janko)\n\n* `derivation_endpoint` \u2013 Send only `:derivation` in the instrumentation event payload (@janko)\n\n* `default_storage` \u2013 Add `Attacher.default_cache` and `Attacher.default_store` for settings (@janko)\n\n* `default_storage` \u2013 Deprecate `record` & `name` arguments to storage block (@janko)\n\n* `default_storage` \u2013 Evaluate storage block in context of `Attacher` instance (@janko)\n\n* Unify persistence plugin interface (@janko)\n\n* `upload_options` \u2013 Keep `Shrine#_upload` private (@janko)\n\n* `infer_extension` \u2013 Keep `Shrine#basic_location` private (@janko)\n\n* `model` \u2013 Add `#<name>_changed?` method to attachment module (@janko)\n\n* Make it easier for plugins to define entity and model attachment methods (@janko)\n\n* `form_assign` \u2013 Add new plugin for assigning attachment from form params without a form object (@janko)\n\n* `derivation_endpoint` \u2013 Allow passing generic IO objects to `Derivation#upload` (@janko)\n\n* `derivation_endpoint` \u2013 Accept additional uploader options in `Derivation#upload` (@janko)\n\n* `derivation_endpoint` \u2013 Close the uploaded file in `Derivation#upload` (@janko)\n\n* `core` \u2013 Stop rescuing `IO#close` exceptions in `Shrine#upload` (@janko)\n\n* `core` \u2013 Add `:delete` option to `Shrine#upload` for deleting uploaded file (@janko)\n\n* `s3` \u2013 Stop returning `:object` in `Down::ChunkedIO#data` in `S3#open` (@janko)\n\n* `s3` \u2013 Eliminate `#head_object` request in `S3#open` (@janko)\n\n* `download_endpoint` \u2013 Remove extra `Storage#exists?` check (@janko)\n\n* `derivation_endpoint` \u2013 Add `Derivation#opened` for retrieving an opened derivation result (@janko)\n\n* `derivation_endpoint` \u2013 Remove extra `Storage#exists?` check when `:upload` is enabled but not `:upload_redirect` (@janko)\n\n* `derivation_endpoint` - Don't pass source `UploadedFile` object when `:download` is `false` (@janko)\n\n* `derivation_endpoint` \u2013 Remove `:include_uploaded_file` option (@janko)\n\n* `derivation_endpoint` \u2013 Evaluate derivation block in context of `Shrine::Derivation` (@janko)\n\n* `derivation_endpoint` \u2013 Remove `:download_errors` option (@janko)\n\n* `memory` \u2013 Raise `Shrine::FileNotFound` on nonexistent file in `Memory#open` (@janko)\n\n* `file_system` \u2013 Raise `Shrine::FileNotFound` on nonexistent file in `FileSystem#open` (@janko)\n\n* `s3` \u2013 Raise `Shrine::FileNotFound` on nonexistent object in `S3#open` (@janko)\n\n* `core` \u2013 Add `Shrine::FileNotFound` exception and require storages to raise it on `Storage#open` (janko)\n\n* `instrumentation` \u2013 Remove `:metadata` from `:options` in `metadata.shrine` event (@janko)\n\n* `instrumentation` \u2013 Remove `:location`, `:upload_options` and `:metadata` from `:options` in `upload.shrine` event (@janko)\n\n* `instrumentation` \u2013 Add `:metadata` to the `upload.shrine` event (@janko)\n\n* `download_endpoint` \u2013 Drop support for legacy `/:storage/:id` URLs (@janko)\n\n* `core` \u2013 In `UploadedFile#==` require files to be of the same class (@janko)\n\n* `core` \u2013 Add `:close` option to `Shrine#upload` for preventing closing file after upload (@janko)\n\n* `memory` \u2013 Add `Shrine::Storage::Memory` from `shrine-memory` gem (@janko)\n\n* `default_url_options` \u2013 Rename to just `url_options` (@janko)\n\n* `delete_raw` \u2013 Deprecate plugin in favour of `derivatives` (@janko)\n\n* `recache` \u2013 Deprecate plugin in favour of `derivatives` (@janko)\n\n* `processing` \u2013 Deprecate plugin in favour of `derivatives` (@janko)\n\n* `versions` \u2013 Deprecate plugin in favour of `derivatives` (@janko)\n\n* `derivatives` \u2013 Add new plugin for storing processed files (@janko)\n\n* `derivation_endpoint` \u2013 Allow using symbol and string derivation names interchangeably (@janko)\n\n* `dynamic_storage` \u2013 Remove `Shrine.dynamic_storages` method (@janko)\n\n* `core` \u2013 Deep duplicate `Shrine.opts` on subclassing (@janko)\n\n* `core` \u2013 Add `Attacher#file!` which asserts that a file is attached (@janko)\n\n* `core` \u2013 Change `Shrine.uploaded_file` to raise `ArgumentError` on invalid input (@janko)\n\n* `module_include` \u2013 Deprecate plugin over overriding core classes directly (@janko)\n\n* `core` \u2013 Add `Attacher#cache_key` and `Attacher#store_key` which return storage identifiers (@janko)\n\n* `linter` \u2013 Call `Storage#open` with options as second argument (@janko)\n\n* `core` \u2013 Allow data hash passed to `UploadedFile.new` to have symbol keys (@janko)\n\n* `core` \u2013 Change how `Shrine::UploadedFile` sets its state from the given data hash (@janko)\n\n* `core` \u2013 Deprecate `Storage#open` not accepting additional options (@janko)\n\n* `refresh_metadata` \u2013 Add `Attacher#refresh_metadata!` method which integrates with `model` plugin (@janko)\n\n* `instrumentation` \u2013 Instrument any `Storage#open` calls in a new `open.shrine` event (@janko)\n\n* `restore_cached_data` \u2013 Forward options passed to `Attacher#attach_cached` to metadata extraction (@janko)\n\n* `validation` \u2013 Allow skipping validations on attaching by passing `validate: false` (@janko)\n\n* `validation` \u2013 Add `:validate` option to `Attacher#assign` or `Attacher#attach` for passing options to validation block (@janko)\n\n* `validation` \u2013 Extract validation functionality into the new plugin (@janko)\n\n* `upload_options` \u2013 Upload options from the block are now merged with passed options instead of replaced (@janko)\n\n* `upload_endpoint` \u2013 Stop passing `Rack::Request` object to the uploader (@janko)\n\n* `remote_url` \u2013 Require custom downloaders to raise `Shrine::Plugins::RemoteUrl::DownloadError` for conversion into a validation error (@janko)\n\n* `infer_extension` \u2013 Fix compatibility with the `pretty_location` plugin (@janko)\n\n* `presign_endpoint` \u2013 Remove deprecated `Shrine::Plugins::PresignEndpoint::App` constant (@janko)\n\n* `keep_files` \u2013 Remove the ability to choose whether to keep only destroyed or only replaced files (@janko)\n\n* `infer_extension` \u2013 Remove `Shrine#infer_extension` method (@janko)\n\n* `default_url_options` \u2013 Allow overriding passed URL options by deleting them inside the block (@janko)\n\n* `cached_attachment_data` \u2013 Rename `Attacher#read_cached` to `Attacher#cached_data` (@janko)\n\n* `sequel` \u2013 Add `Attacher#atomic_promote` and `Attacher#atomic_persist` (@janko)\n\n* `sequel` \u2013 Remove persistence from `Attacher#promote` (@janko)\n\n* `activerecord` \u2013 Remove persistence from `Attacher#promote` (@janko)\n\n* `atomic_helpers` \u2013 Add new plugin with helper methods for atomic promotion and persistence (@janko)\n\n* `backgrounding` \u2013 Add `Attacher#promote_block` & `Attacher#destroy_block` for overriding class level blocks (@janko)\n\n* `backgrounding` \u2013 Add `Attacher.promote_block` & `Attacher.destroy_block` on class level (@janko)\n\n* `backgrounding` \u2013 Remove overriding `Attacher#swap` with atomic promotion (@janko)\n\n* `backgrounding` \u2013 Remove `Attacher.promote`, `Attacher.delete`, `Attacher.dump`, `Attacher#dump`, `Attacher.load`, `Attacher.load_record` (@janko)\n\n* `model` \u2013 Allow disabling caching to temporary storage on assignment (@janko)\n\n* `model` \u2013 Add `Attacher.from_model`, `Attacher#write` (@janko)\n\n* `model` \u2013 Add new plugin for integrating with mutable structs (@janko)\n\n* `entity` \u2013 Add `Attacher.from_entity`, `Attacher#reload`, `Attacher#column_values`, `Attacher#attribute` (@janko)\n\n* `entity` \u2013 Add new plugin for integrating with immutable structs (@janko)\n\n* `column` \u2013 Allow changing column serializer from default `JSON` library (@janko)\n\n* `column` \u2013 Add `Attacher#column_data` and `Attacher.from_column` methods (@janko)\n\n* `column` \u2013 Add new plugin for (de)serializing attacher data (@janko)\n\n* `attachment` \u2013 Removed any default attachment methods (@janko)\n\n* `core` \u2013 Require context hash passed as second argument to `Shrine#upload` to have symbol keys (@janko)\n\n* `core` \u2013 Change `Shrine.uploaded_file` not to yield files anymore (@janko)\n\n* `core` \u2013 Allow `Shrine.uploaded_file` to accept file data hashes with symbol keys (@janko)\n\n* `core` \u2013 Remove `Shrine#uploaded?`\n\n* `core` \u2013 Remove `Shrine#delete`, `Shrine#_delete`, `Shrine#remove` (@janko)\n\n* `core` \u2013 Remove `Shrine#store`, `Shrine#_store`, `Shrine#put`, `Shrine#copy` (@janko)\n\n* `core` \u2013 Remove `Shrine#processed`, `Shrine#process` (@janko)\n\n* `core` \u2013 Don't pass `:phase` anymore on uploads (@janko)\n\n* `core` \u2013 Read attachment from the record attribute only on initialization (@janko)\n\n* `core` \u2013 Don't require a temporary storage (@janko)\n\n* `core` \u2013 Add `Attacher#data` and `Attacher.from_data` for dumping to and loading from a Hash (@janko)\n\n* `core` \u2013 Change `Attacher#assign` to raise exception when non-cached file is assigned (@janko)\n\n* `core` \u2013 Enable `Attacher#assign` to accept cached file data as a Hash (@janko)\n\n* `core` \u2013 Add `Attacher#file` alias for `Attacher#get` (@janko)\n\n* `core` \u2013 Change `Attacher#attached?` to return whether a file is attached (@janko)\n\n* `core` \u2013 Change `Attacher#promote` to always only save promoted file in memory (@janko)\n\n* `core` \u2013 Rename `Attacher#replace` to `Attacher#destroy_previous` (@janko)\n\n* `core` \u2013 Remove `Attacher#_promote` and `Attacher#_delete`, add `Attacher#promote_cached` and `Attacher#destroy_attached` (@janko)\n\n* `core` \u2013 Rename `Attacher#set` and `Attacher#_set` to `Attacher#change` and `Attacher#set` (@janko)\n\n* `core` \u2013 Remove `Attacher#cache!` and `Attacher#store!`, add `Attacher#upload` (@janko)\n\n* `core` \u2013 Rename `Attacher#validate_block` to `Attacher#_validate` (@janko)\n\n* `core` \u2013 Add `Attacher#attach`, `Attacher#attach_cached`, extracted from `Attacher#assign` (@janko)\n\n* `core` \u2013 Remove `Attacher#swap`, `Attacher#update`, `Attacher#read`, `Attacher#write`, `Attacher#data_attribute`, `Attacher#convert_to_data`, `Attacher#convert_before_write`, and `Attacher#convert_after_read` (@janko)\n\n* `core` \u2013 Change `Attacher.new` to not accept a model anymore (@janko)\n\n* `delete_promoted` \u2013 Remove plugin (@janko)\n\n* `parsed_json` \u2013 Remove plugin (@janko)\n\n* `parallelize` \u2013 Remove plugin (@janko)\n\n* `hooks` \u2013 Remove plugin (@janko)\n\n* `core` \u2013 Remove deprecated `Shrine::IO_METHODS` constant (@janko)\n\n* `s3` \u2013 Replace source object metadata when copying a file from S3 (@janko)\n\n* `core` \u2013 Change `UploadedFile#storage_key` to return a Symbol instead of a String (@janko)\n\n* `infer_extension` \u2013 Make `:mini_mime` the default analyzer (@janko)\n\n* Bring back Ruby 2.3 support (@janko)\n\n* `versions` \u2013 Remove deprecated `:version_names`, `Shrine.version_names` and `Shrine.version?` (@janko)\n\n* `validation_helpers` \u2013 Remove support for regexes in MIME type or extension validations (@janko)\n\n* `validation_helpers` \u2013 Don't require `#width` and `#height` methods to be defined on `UploadedFile` (@janko)\n\n* `validation_helpers` \u2013 Fail dimensions validations when `width` or `height` metadata is missing (@janko)\n\n* `upload_endpoint` \u2013 Remove deprecated `Shrine::Plugins::UploadEndpoint::App` constant (@janko)\n\n* `determine_mime_type` \u2013 Remove `Shrine#mime_type_analyzers` method (@janko)\n\n* `store_dimensions` \u2013 Remove `Shrine#extract_dimensions` and `Shrine#dimensions_analyzers` methods (@janko)\n\n* `rack_file` \u2013 Remove deprecated `Shrine::Plugins::RackFile::UploadedFile` constant (@janko)\n\n* `rack_file` \u2013 Drop support for passing file hash to `Shrine#upload` and `Shrine#store` (@janko)\n\n* `download_endpoint` \u2013 Move `Shrine::Plugins::DownloadEndpoint::App` into `Shrine::DownloadEndpoint` (@janko)\n\n* `download_endpoint` \u2013 Remove deprecated `Shrine::DownloadEndpoint` constant (@janko)\n\n* `download_endpoint` \u2013 Remove deprecated `:storages` option (@janko)\n\n* `determine_mime_type` \u2013 Remove deprecated `:default` analyzer alias (@janko)\n\n* `default_url` \u2013 Remove deprecated block argument when loading the plugin (@janko)\n\n* `data_uri` \u2013 Remove deprecated `Shrine::Plugins::DataUri::DataFile` constant (@janko)\n\n* `data_uri` \u2013 Remove deprecated `:filename` plugin option (@janko)\n\n* `cached_attachment_data` \u2013 Remove deprecated model setter (@janko)\n\n* `file_system` \u2013 Remove deprecated `:older_than` option in `FileSystem#clear!` (@janko)\n\n* `file_system` \u2013 Don't accept a block anymore in `FileSystem#open` (@janko)\n\n* `file_system` \u2013 Remove deprecated `FileSystem#download` method (@janko)\n\n* `file_system` \u2013 Make `FileSystem#movable?` and `FileSystem#move` methods private (@janko)\n\n* `file_system` \u2013 Remove deprecation warning on unrecognized options in `FileSystem#upload` (@janko)\n\n* `file_system` \u2013 Remove deprecated `:host` option for `FileSystem#initialize` (@janko)\n\n* `moving` \u2013 Remove deprecated plugin (@janko)\n\n* `multi_delete` \u2013 Remove deprecated plugin (@janko)\n\n* `direct_upload` \u2013 Remove deprecated plugin (@janko)\n\n* `backup` \u2013 Remove deprecated plugin (@janko)\n\n* `background_helpers` \u2013 Remove deprecated plugin (@janko)\n\n* `migration_helpers` \u2013 Remove deprecated plugin (@janko)\n\n* `copy` \u2013 Remove deprecated plugin (@janko)\n\n* `logging` \u2013 Remove deprecated plugin (@janko)\n\n* `s3` \u2013 Remove deprecated `S3#download` method (@janko)\n\n* `s3` \u2013 Remove deprecated `S3#stream` method (@janko)\n\n* `presign_endpoint` \u2013 Drop support for presign objects that don't respond to `#to_h` (@janko)\n\n* `s3` \u2013 Return a Hash in `S3#presign` when method is POST (@janko)\n\n* `s3` \u2013 Remove `:download` option in `S3#url` (@janko)\n\n* `s3` \u2013 Remove support for non URI-escaped content disposition values (@janko)\n\n* `s3` \u2013 Remove `S3#s3` method (@janko)\n\n* `s3` \u2013 Remove support for specifying `:multipart_threshold` as an integer (@janko)\n\n* `s3` \u2013 Remove `:host` option on `S3#initialize` (@janko)\n\n* `s3` \u2013 Drop support for `aws-sdk-s3` versions lower than 1.14 (@janko)\n\n* `s3` \u2013 Drop support for `aws-sdk` 2.x (@janko)\n\n## 2.19.0 (2019-07-18) [[release notes]](https://shrinerb.com/docs/release_notes/2.19.0)\n\n* `pretty_location` \u2013 Allow specifying a different identifier from `id` (@00dav00)\n\n* `data_uri` \u2013 Soft-move `Shrine::Plugins::DataUri::DataFile` to `Shrine::DataFile` (@janko)\n\n* `rack_file` \u2013 Soft-move `Shrine::Plugins::RackFile::UploadedFile` to `Shrine::RackFile` (@janko)\n\n* `backup` \u2013 Deprecate the plugin over [mirroring uploads](https://github.com/shrinerb/shrine/wiki/Mirroring-Uploads) via the `instrumentation` plugin (@janko)\n\n* `moving` \u2013 Deprecate the plugin in favor of the `:move` option for `FileSystem#upload` (@janko)\n\n* `file_system` \u2013 Add `:move` option for `FileSystem#upload` (@janko)\n\n* `file_system` \u2013 Don't fill `size` metadata if missing in `FileSystem#upload` (@janko)\n\n* `logging` \u2013 Deprecate plugin in favour of `instrumentation` (@janko)\n\n* `instrumentation` \u2013 Add plugin which sends events via `ActiveSupport::Notifications` or `dry-monitor` (@janko)\n\n* `core` \u2013 Add `UploadedFile#[]` shorthand for accessing metadata (@janko)\n\n* `add_metadata` \u2013 Allow calling `super` when overriding dynamically defined `UploadedFile` methods (@janko)\n\n* `store_dimensions` \u2013 Add `:on_error` option for specifying the exception strategy (@janko)\n\n* `store_dimensions` \u2013 Print warnings when exception occurred while extracting dimensions (@janko)\n\n* `core` \u2013 Add `Shrine.logger` and make any warnings go through it (@janko)\n\n* `copy` \u2013 Deprecate the plugin (@janko)\n\n* `core` \u2013 Add ability to force metadata extraction by passing `metadata: true` to `Shrine#upload` (@janko)\n\n* `core` \u2013 Add ability to skip metadata extraction by passing `metadata: false` to `Shrine#upload` (@janko)\n\n* `file_system` \u2013 Deprecate `:older_than` option for `FileSystem#clear!` in favour of a block (@janko)\n\n* `file_system` \u2013 Add the ability for `FileSystem#clear!` to take a block (@janko)\n\n* `signature` \u2013 Add `Shrine.signature` alias for `Shrine.calculcate_signature` (@janko)\n\n* `store_dimensions` \u2013 Add `Shrine.dimensions` alias for `Shrine.extract_dimensions` (@janko)\n\n* `determine_mime_type` \u2013 Add `Shrine.mime_type` alias for `Shrine.determine_mime_type` (@janko)\n\n* `validation_helpers` \u2013 Add `#validate_max_dimensions`, `#validate_min_dimensions`, and `#validate_dimensions` (@janko)\n\n* `validation_helpers` - Add `#validate_size`, `#validate_width`, and `#validate_height` shorthands (@janko)\n\n* `validation_helpers` \u2013 Add `#validate_mime_type` and `#validate_extension` aliases for inclusion (@janko)\n\n* `validation_helpers` \u2013 Simplify default validation error messages (@janko)\n\n* `core` \u2013 Allow registering storage objects under string keys (@janko)\n\n## 2.18.0 (2019-06-24) [[release notes]](https://shrinerb.com/docs/release_notes/2.18.0)\n\n* `core` \u2013 Add `Shrine.upload` method as a shorthand for `Shrine.new(...).upload(...)` (@janko)\n\n* `upload_endpoint` \u2013 Accept file uploads from Uppy's default `files[]` array (@janko)\n\n* `core` \u2013 Add `Shrine::Attachment()` shorthand for `Shrine::Attachment.new` (@janko)\n\n* `upload_endpoint` \u2013 Add `:url` option for adding uploaded file URL to response body (@janko)\n\n* `s3` \u2013 Deprecate `:download` URL option over `:response_content_disposition` (@janko)\n\n* `s3` \u2013 Remove backfilling `size` metadata when uploading IO objects of unknown size (@janko)\n\n* `s3` \u2013 Deprecate `aws-sdk-s3` version less than 1.14.0 (@janko)\n\n* `presign_endpoint` \u2013 Add `Shrine.presign_response` for handling presigns inside a custom controller (@janko)\n\n* `upload_endpoint` \u2013 Add `Shrine.upload_response` for handling uploads inside a custom controller (@janko)\n\n* `rack_file` \u2013 Fix overriden `Attacher#assign` not accepting second argument (@janko)\n\n* `parsed_json` \u2013 Fix overriden `Attacher#assign` not accepting second argument (@janko)\n\n## 2.17.0 (2019-05-06) [[release notes]](https://shrinerb.com/docs/release_notes/2.17.0)\n\n* `data_uri` \u2013 Add `Attacher#assign_data_uri` which accepts additional `Shrine#upload` options (@janko)\n\n* `remote_url` \u2013 Accept additional `Shrine#upload` options in `Attacher#assign_remote_url` (@janko)\n\n* `download_endpoint` \u2013 Allow passing options to `Shrine.download_endpoint` (@janko)\n\n* `download_endpoint` \u2013 Fix `Shrine.download_endpoint` not being accepted by Rails' `#mount` (@janko)\n\n* `download_endpoint` \u2013 Remove Roda dependency (@janko)\n\n* `presign_endpoint` \u2013 Soft-rename `Shrine::Plugins::PresignEndpoint::App` class to `Shrine::PresignEndpoint` (@janko)\n\n* `upload_endpoint` \u2013 Soft-rename `Shrine::Plugins::UploadEndpoint::App` class to `Shrine::UploadEndpoint` (@janko)\n\n* `processing` \u2013 Fix defining process blocks being applied to `Shrine` superclasses (@ksol)\n\n* `derivation_endpoint` \u2013 Add `ETag` header to prevent `Rack::ETag` from buffering file content (@janko)\n\n* `rack_response` \u2013 Add `ETag` header to prevent `Rack::ETag` from buffering file content (@janko)\n\n* `download_endpoint` \u2013 Add `ETag` header to prevent `Rack::ETag` from buffering file content (@janko)\n\n* `default_url` \u2013 Add `:host` for specifying the URL host (@janko)\n\n* `versions` \u2013 Fix uploaded versions being deleted when string version names are used (@janko)\n\n* `versions` \u2013 Allow `Attacher#url` to accept version name indifferently (@FunkyloverOne)\n\n* Improve performance of cleaning empty directories on deletion in `FileSystem` storage (@adamniedzielski)\n\n* Drop MRI 2.3 support (@janko)\n\n* `metadata_attributes` \u2013 Fix `Attacher#assign` not accepting additional options anymore (@janko)\n\n* `derivation_endpoint` \u2013 Add support for Rack < 2 (@Antsiscool)\n\n* `derivation_endpoint` \u2013 Fix `:upload` option being incompatible with `moving` plugin (@speedo-spin)\n\n* `determine_mime_type` \u2013 Allow passing options to analzyers (Marcel accepts `:filename_fallback` option) (@hmistry)\n\n* `determine_mime_type` \u2013 Revert \"Extended determine MIME type with Marcel\" (@hmistry)\n\n* `rack_response` \u2013 improve performance for upper bounded `Range` header values (@zarqman)\n\n* `rack_response` \u2013 prevent response body from yielding `nil`-chunks (@zarqman)\n\n* `parsed_json` \u2013 Accepts hashes with symbols keys (@aglushkov)\n\n## 2.16.0 (2019-02-18) [[release notes]](https://shrinerb.com/docs/release_notes/2.16.0)\n\n* `derivation_endpoint` \u2013 Add `:upload_open_options` for download option for derivation result (@janko)\n\n* `derivation_endpoint` \u2013 Fix `:upload` option being incompatible with `delete_raw` plugin (@janko)\n\n* `derivation_endpoint` \u2013 Require input file in `Derivation#upload` to respond to `#path` (@janko)\n\n* `derivation_endpoint` \u2013 Delete generated derivation result after uploading in `Derivation#upload` (@janko)\n\n* `derivation_endpoint` \u2013 Fix `Derivation#processed` breaking when derivation result is a `File` object (@janko)\n\n* `derivation_endpoint` \u2013 Don't close input file on `Derivation#upload` (@janko)\n\n* Add `:delete` parameter for skipping delete when `delete_raw` plugin is loaded (@janko)\n\n* Don't return `Content-Type` when it couldn't be determined from file extension in `derivation_endpoint` (@janko)\n\n* Add `:download_options` option to `download_endpoint` plugin for specifying options for `Storage#open` (@janko)\n\n* Don't return `Content-Type` header in `rack_response` when MIME type could not be determined (@janko)\n\n* Open the `UploadedFile` object in `#to_rack_response` in `rack_response` plugin (@janko)\n\n* Fix `store_dimensions` plugin making second argument in `Shrine#extract_metadata` mandatory (@jrochkind)\n\n## 2.15.0 (2019-02-08) [[release notes]](https://shrinerb.com/docs/release_notes/2.15.0)\n\n* Add `derivation_endpoint` plugin for processing uploaded files on-the-fly (@janko)\n\n* Allow Marcel to fall back to the file extension in `determine_mime_type` plugin (@skarlcf)\n\n* Don't return cached app instance in `Shrine.download_endpoint` in `download_endpoint` plugin (@janko)\n\n* Yield a new File object on `Shrine.with_file` when `tempfile` plugin is loaded (@janko)\n\n## 2.14.0 (2018-12-27) [[release notes]](https://shrinerb.com/docs/release_notes/2.14.0)\n\n* Add `tempfile` plugin for easier reusing of the same uploaded file copy on disk (@janko)\n\n* Don't re-open the uploaded file if it's already open in `refresh_metadata` plugin (@janko)\n\n* Drop support for MRI 2.1 and 2.2 (@janko)\n\n* Fix `backgrounding` not working when default storage was changed with `Attachment.new` (@janko)\n\n* Don't clear existing metadata definitions when loading `add_metadata` plugin (@janko)\n\n* Don't clear existing processing blocks when loading `processing` plugin (@janko)\n\n* Deprecate automatic escaping of `:content_disposition` in `Shrine::Storage::S3` (@janko)\n\n* Use `content_disposition` gem in `Shrine::Storage::S3` and `rack_response` plugin (@janko)\n\n* Make `FileSystem#clear!` work correctly when the storage directory is a symlink (@janko)\n\n* Don't abort promotion in `backgrounding` plugin when original metadata was updated (@janko)\n\n* Don't mutate the `UploadedFile` data hash in `refresh_metadata` plugin (@janko)\n\n* Deprecate `Storage::S3#download` (@janko)\n\n* Stop using `Storage#download` in `UploadedFile#download` for peformance (@janko)\n\n* Remove `#download` from the Shrine storage specification (@janko)\n\n* Keep `context` argument in `#extract_metadata` optional after loading `add_metadata` plugin (@janko)\n\n* Include metadata key with `nil` value when `nil` is returned in `add_metadata` block (@janko)\n\n* Strip query params in upload location when re-uploading from `shrine-url` storage (@jrochkind)\n\n* Inline Base plugin into core classes, extract them to separate files (@printercu)\n\n* Make `rack_response` plugin work with `Rack::Sendfile` for `FileSystem` storage (@janko)\n\n* Add `:filename` and `:type` options to `rack_response` plugin (@janko)\n\n* Add `:host` option to `UploadedFile#download_url` in `download_endpoint` plugin (@janko)\n\n* Add support for client-side encryption to S3 storage (@janko)\n\n* Don't look up the attachment class in each new model instance (@printercu)\n\n* Allow `Attacher#cached?` and `Attacher#stored?` to take an `UploadedFile` object (@jrochkind)\n\n* Allow assigning a filename to the `DataFile` object in `Shrine.data_uri` (@janko)\n\n* Don't strip media type parameters for the `DataFile` object in `data_uri` plugin (@janko)\n\n* Add `:content_type` analyzer to `Shrine.mime_type_analyzers` in `determine_mime_type` plugin (@janko)\n\n* Rename `:default` analyzer to `:content_type` in `determine_mime_type` plugin (@janko)\n\n* Don't display a warning when `determine_mime_type` plugin is loaded with `:default` analyzer (@janko)\n\n* Exclude media type parameters when copying `IO#content_type` into `mime_type` metadata (@janko)\n\n* Remove superfluous `#head_object` S3 API call in `S3#download` (@janko)\n\n* Make `S3#download` and `S3#open` work with server side encryption options (@janko)\n\n* Make previously extracted metadata available under `:metadata` in `add_metadata` plugin (@jrochkind)\n\n* Use a guard raise cause for `bucket` argument in S3 for an appropriate error message (@ardecvz)\n\n## 2.13.0 (2018-11-04) [[release notes]](https://shrinerb.com/docs/release_notes/2.13.0)\n\n* Specify UTF-8 charset in `Content-Type` response header in `presign_endpoint` plugin (@janko)\n\n* Specify UTF-8 charset in `Content-Type` response header in `upload_endpoint` plugin (@janko)\n\n* Force UTF-8 encoding on filenames coming from Rack's multipart request params in `rack_file` plugin (@janko)\n\n* Raise `Shrine::Error` if `file` command returns error in stdout in `determine_mime_type` plugin (@janko)\n\n* Allow `:host` in `S3#url` to specify a host URL with an additional path prefix (@janko)\n\n* Revert adding bucket name to URL path in `S3#url` when `:host` is used with `:force_path_style` (@janko)\n\n* In `upload_endpoint` error with \"Upload Not Valid\" when `file` parameter is present but not a file (@janko)\n\n* Allow `Attacher#assign` to accept options for `Shrine#upload` (@janko)\n\n* Add `:metadata` option to `Shrine#upload` for manually overriding extracted metadata (@janko)\n\n* Add `:force` option to `infer_extension` plugin for always replacing the current extension (@jrochkind)\n\n* Add `:public` option to `S3#initialize` for enabling public uploads (@janko)\n\n* Add ability to specify a custom `:signer` for `Shrine::Storage::S3#url` (@janko)\n\n* In `S3#upload` do multipart upload for large non-file IO objects (@janko)\n\n* In `S3#upload` switch to `Aws::S3::Object#upload_stream` for multipart uploads of IO objects of unknown size (@janko)\n\n* In `S3#upload` deprecate using aws-sdk-s3 lower than 1.14 when uploading IO objects of unknown size (@janko)\n\n## 2.12.0 (2018-08-22) [[release notes]](https://shrinerb.com/docs/release_notes/2.12.0)\n\n* Ignore nil values when assigning files from a remote URL (@janko)\n\n* Ignore nil values when assigning files from a data URI (@GeekOnCoffee)\n\n* Raise `Shrine::Error` when child process failed to be spawned in `:file` MIME type analyzer (@hmistry)\n\n* Use the appropriate unit in error messages of filesize validators in `validation_helpers` plugin (@hmistry)\n\n* Fix subclassing not inheriting storage resolvers from superclass in `dynamic_storage` plugin (@janko)\n\n* Un-deprecate assigning cached versions (@janko)\n\n* Add `Attacher#assign_remote_url` which allows dynamically passing downloader options (@janko)\n\n* Deprecate `:storages` option in `download_endpoint` plugin in favour of `UploadedFile#download_url` (@janko)\n\n* Add `:redirect` option to `download_endpoint` plugin for redirecting to the uploaded file (@janko)\n\n* Fix encoding issues when uploading IO object with unknown size to S3 (@janko)\n\n* Accept additional `File.open` arguments in `FileSystem#open` (@janko)\n\n* Add `:rewindable` option to `S3#open` for disabling caching of read content to disk (@janko)\n\n* Make `UploadedFile#open` always open a new IO object and close the previous one (@janko)\n\n## 2.11.0 (2018-04-28) [[release notes]](https://shrinerb.com/docs/release_notes/2.11.0)\n\n* Add `Shrine.with_file` for temporarily converting an IO-like object into a file (@janko)\n\n* Add `:method` value to the `S3#presign` result indicating the HTTP verb that should be used (@janko)\n\n* Add ability to specify `method: :put` in `S3#presign` to generate data for PUT upload (@janko)\n\n* Return a `Struct` instead of a `Aws::S3::PresignedPost` object in `S3#presign` (@janko)\n\n* Deprecate `Storage#presign` returning a custom object in `presign_endpoint` (@janko)\n\n* Allow `Storage#presign` to return a Hash in `presign_endpoint` (@janko)\n\n* Add ability to specify upload checksum in `upload_endpoint` plugin (@janko)\n\n* Don't raise exception in `:mini_magick` and `:ruby_vips` dimensions analyzers when image is invalid (@janko)\n\n* Don't remove bucket name from S3 URL path with `:host` when `:force_path_style` is set (@janko)\n\n* Correctly determine MIME type from extension of empty files (@janko)\n\n* Modify `UploadedFile#download` not to reopen the uploaded file if it's already open (@janko)\n\n* Add `UploadedFile#stream` for streaming content into a writable object (@janko)\n\n* Deprecate `direct_upload` plugin in favor of `upload_endpoint` and `presign_endpoint` plugins (@janko)\n\n## 2.10.0 (2018-03-28) [[release notes]](https://shrinerb.com/docs/release_notes/2.10.0)\n\n* Add `:fastimage` analyzer to `determine_mime_type` plugin (@mokolabs)\n\n* Keep download endpoint URL the same regardless of metadata ordering (@MSchmidt)\n\n* Remove `:rack_mime` extension inferrer from the `infer_extension` plugin (@janko)\n\n* Allow `UploadedFile#download` to accept a block for temporary file download (@janko)\n\n* Add `:ruby_vips` analyzer to `store_dimensions` plugin (@janko)\n\n* Add `:mini_magick` analyzer to `store_dimensions` plugin (@janko)\n\n* Soft-rename `:heroku` logging format to `:logfmt` (@janko)\n\n* Deprecate `Shrine::IO_METHODS` constant (@janko)\n\n* Don't require IO size to be known on upload (@janko)\n\n* Inherit the logger on subclassing `Shrine` and make it shared across subclasses (@hmistry)\n\n## 2.9.0 (2018-01-27) [[release notes]](https://shrinerb.com/docs/release_notes/2.9.0)\n\n* Support arrays of files in `versions` plugin (@janko)\n\n* Added `:marcel` analyzer to `determine_mime_type` plugin (@janko)\n\n* Deprecate `:filename` option of the `data_uri` plugin in favour of the new `infer_extension` plugin (@janko)\n\n* Add `infer_extension` plugin for automatically deducing upload location extension from MIME type (@janko)\n\n* Apply default storage options passed via `Attachment.new` in `backgrounding` plugin (@janko)\n\n* Fix S3 storage replacing spaces in filename with \"+\" symbols (@ndbroadbent)\n\n* Deprecate the `multi_delete` plugin (@janko)\n\n* Allow calling `UploadedFile#open` without passing a block (@hmistry)\n\n* Delete tempfiles in case of errors in `UploadedFile#download` and `Storage::S3#download` (@hmistry)\n\n* Freeze all string literals (@hmistry)\n\n* Allow passing options to `Model#<attachment>_attacher` for overriding `Attacher` options (@janko)\n\n## 2.8.0 (2017-10-11) [[release notes]](https://shrinerb.com/docs/release_notes/2.8.0)\n\n* Expand relative directory paths when initializing `Storage::FileSystem` (@janko)\n\n* Fix `logging` plugin erroring on `:json` format when ActiveSupport is loaded (@janko)\n\n* Allow `Storage::S3#clear!` to take a block for specifying which objects to delete (@janko)\n\n* Make `:filemagic` analyzer close the FileMagic descriptor even in case of exceptions (@janko)\n\n* Make `:file` analyzer work for potential file types which have magic bytes farther than 256 KB (@janko)\n\n* Deprecate `aws-sdk` 2.x in favour of the new `aws-sdk-s3` gem (@janko)\n\n* Modify `UploadedFile#extension` to always return the extension in lowercase format (@janko)\n\n* Downcase the original file extension when generating an upload location (@janko)\n\n* Allow specifying the full record attribute name in `metadata_attributes` plugin (@janko)\n\n* Allow specifying metadata mappings on `metadata_attributes` plugin initialization (@janko)\n\n* Add support for ranged requests in `download_endpoint` and `rack_response` plugins (@janko)\n\n* Allow `Storage::S3#open` and `Storage::S3#download` to accept additional options (@janko)\n\n* Forward any options given to `UploadedFile#open` or `UploadedFile#download` to the storage (@janko)\n\n* Update `direct_upload` plugin to support Roda 3 (@janko)\n\n## 2.7.0 (2017-09-11) [[release notes]](https://shrinerb.com/docs/release_notes/2.7.0)\n\n* Deprecate the `Shrine::DownloadEndpoint` constant over `Shrine.download_endpoint` (@janko)\n\n* Allow an additional `#headers` attribute on presigns and return it in `presign_endpoint` (@janko)\n\n* Allow overriding `upload_endpoint` and `presign_endpoint` options per-endpoint (@janko)\n\n* Add `:presign` and `:rack_response` options to `presign_endpoint` (@janko)\n\n* Add `:upload`, `:upload_context` and `:rack_response` options to `upload_endpoint` (@janko)\n\n* Modify `upload_endpoint` and `presign_endpoint` to return `text/plain` error responses (@janko)\n\n* Add `:request` upload context parameter in `upload_endpoint` (@janko)\n\n* Change `:action` upload context parameter to `:upload` in `upload_endpoint` (@janko)\n\n* Return `405 Method Not Allowed` on invalid HTTP verb in `upload_endpoint` and `presign_endpoint` (@janko)\n\n* Modify `upload_endpoint` and `presign_endpoint` to handle requests on the root URL (@janko)\n\n* Allow creating Rack apps dynamically in `upload_endpoint` and `presign_endpoint` (@janko)\n\n* Remove Roda dependency from `upload_endpoint` and `presign_endpoint` plugins (@janko)\n\n* Split `direct_upload` plugin into `upload_endpoint` and `presign_endpoint` plugins (@janko)\n\n* Support the new `aws-sdk-s3` gem in `Shrine::Storage::S3` (@lizdeika)\n\n* Return `Cache-Control` header in `download_endpoint` to permanently cache responses (@janko)\n\n* Return `404 Not Found` when uploaded file doesn't exist in `download_endpoint` (@janko)\n\n* Utilize uploaded file metadata when generating response in `download_endpoint` (@janko)\n\n* Fix deprecation warning when generating fake presign with query parameters (@janko)\n\n* Don't raise error in `file` and `filemagic` MIME type analyzer on empty IO (@ypresto)\n\n* Require `down` in `remote_url` plugin even when a custom downloader is given (@janko)\n\n* Require `time` library in `logging` plugin to fix `undefined method #iso8601 for Time` (@janko)\n\n* Allow validations defined on a superclass to be reused in a subclass (@printercu)\n\n* Allow validation error messages to be an array of arguments for ActiveRecord (@janko)\n\n* Allow model subclasses to override the attachment with a different uploader (@janko)\n\n* Accept `Attacher.new` options like `store:` and `cache:` via `Attachment.new` (@ypresto)\n\n* Raise `ArgumentError` when `:bucket` option is nil in `Shrine::Storage::S3#initialize` (@janko)\n\n* Don't wrap base64-encoded content into 60 columns in `UploadedFile#base64` and `#data_uri` (@janko)\n\n* Add `:mini_mime` option to `determine_mime_type` plugin for using the [mini_mime](https://github.com/discourse/mini_mime) gem (@janko)\n\n* Fix `data_uri` plugin raising an exception on Ruby 2.4.1 when using raw data URIs (@janko)\n\n* Implement `Shrine::Storage::S3#open` using the aws-sdk gem instead of `Down.open` (@janko)\n\n* Un-deprecate `Shrine.uploaded_file` accepting file data as JSON string (@janko)\n\n* Don't wrap base64-formatted signatures to 60 columns (@janko)\n\n* Don't add a newline at the end of the base64-formatted signature (@janko)\n\n## 2.6.1 (2017-04-12) [[release notes]](https://shrinerb.com/docs/release_notes/2.6.1)\n\n* Fix `download_endpoint` returning incorrect reponse body in some cases (@janko)\n\n## 2.6.0 (2017-04-04) [[release notes]](https://shrinerb.com/docs/release_notes/2.6.0)\n\n* Make `Shrine::Storage::FileSystem#path` public which returns path to the file as a `Pathname` object (@janko)\n\n* Add `Shrine.rack_file` to `rack_file` plugin for converting Rack uploaded file hash into an IO (@janko)\n\n* Deprecate passing a Rack file hash to `Shrine#upload` (@janko)\n\n* Expose `Shrine.extract_dimensions` and `Shrine.dimensions_analyzers` in `store_dimensions` plugin (@janko)\n\n* Add `metadata_attributes` plugin for syncing attachment metadata with additional record attributes (@janko)\n\n* Remove the undocumented `:magic_header` option from `determine_mime_type` plugin (@janko)\n\n* Expose `Shrine.determine_mime_type` and `Shrine.mime_type_analyzers` in `determine_mime_type` plugin (@janko)\n\n* Add `signature` plugin for calculating a SHA{1,256,384,512}/MD5/CRC32 hash of a file (@janko)\n\n* Return the resolved plugin module when calling `Shrine.plugin` (@janko)\n\n* Accept hash of metadata with symbol keys as well in `add_metadata` block (@janko)\n\n* Add `refresh_metadata` plugin for re-extracting metadata from an uploaded file (@janko)\n\n* Allow S3 storage to use parallelized multipart upload for files from FileSystem storage as well (@janko)\n\n* Improve default multipart copy threshold for S3 storage (@janko)\n\n* Allow specifying multipart upload and copy thresholds separately in `Shrine::Storage::S3` (@janko)\n\n* Fix `Storage::FileSystem#clear!` not deleting old files if there are newer files in the same directory (@janko)\n\n* Allow media type in the data URI to have additional parameters (@janko)\n\n* URI-decode non-base64 data URIs, as such data URIs are URI-encoded according to the specification (@janko)\n\n* Improve performance of parsing data URIs by 10x switching from a regex to StringScanner (@janko)\n\n* Reduce memory usage of `Shrine.data_uri` and `UploadedFile#base64` by at least 2x (@janko)\n\n* Add `Shrine.data_uri` to `data_uri` plugin which parses and converts the given data URI to an IO object (@janko)\n\n* Make `rack_file` plugin work with HashWithIndifferentAccess-like objects such as Hashie::Mash (@janko)\n\n* Expose `Aws::S3::Client` via `Shrine::Storage::S3#client`, and deprecate `Shrine::Strorage::S3#s3` (@janko)\n\n* Modify `delete_raw` plugin to delete any IOs that respond to `#path` (@janko)\n\n* Require the Tempfile standard library in lib/shrine.rb (@janko)\n\n* Deprecate dimensions validations passing when a dimension is nil (@janko)\n\n* Deprecate passing regexes to type/extension whitelists/blacklists in `validation_helpers` (@janko)\n\n* Don't include list of blacklisted types and extensions in default `validation_helpers` messages (@janko)\n\n* Improve default error messages in `validation_helpers` plugin (@janko)\n\n* Don't require the `benchmark` standard library in `logging` plugin (@janko)\n\n* Don't dirty the attacher in `Attacher#set` when attachment hasn't changed (@janko)\n\n* Rename `Attacher#attached?` to a more accurate `Attacher#changed?` (@janko)\n\n* Allow calling `Attacher#finalize` if attachment hasn't changed, instead of raising an error (@janko)\n\n* Make `Shrine::Storage::S3#object` method public (@janko)\n\n* Prevent autoloading race conditions in aws-sdk gem by eager loading the S3 service (@janko)\n\n* Raise `Shrine::Error` when `Shrine#generate_location` returns nil (@janko)\n\n## 2.5.0 (2016-11-11) [[release notes]](https://shrinerb.com/docs/release_notes/2.5.0)\n\n* Add `Attacher.default_url` as the idiomatic way of declaring default URLs (@janko)\n\n* Allow uploaders themselves to accept Rack uploaded files when `rack_file` is loaded (@janko)\n\n* Raise a descriptive error when two versions are pointing to the same IO object (@janko)\n\n* Make `backgrounding` plugin work with plain model instances (@janko)\n\n* Make validation methods in `validation_helpers` plugin return whether validation succeeded (@janko)\n\n* Make extension matching case insensitive in `validation_helpers` plugin (@jonasheinrich)\n\n* Make `remove_invalid` plugin remove dirty state on attacher after removing invalid file (@janko)\n\n* Raise error if `Shrine::UploadedFile` isn't initialized with valid data (@janko)\n\n* Accept `extension` parameter without the dot in presign endpoint of `direct_upload` plugin (@jonasheinrich)\n\n* Add `:fallback_to_original` option to `versions` plugin for disabling fallback to original file (@janko)\n\n* Add `#dimensions` method to `UploadedFile` when loading `store_dimensions` plugin (@janko)\n\n* Make it possible to extract multiple metadata values at once with the `add_metadata` plugin (@janko)\n\n## 2.4.1 (2016-10-17) [[release notes]](https://shrinerb.com/docs/release_notes/2.4.1)\n\n* Move back JSON serialization from `Attacher#write` to `Attacher#_set` (@janko)\n\n* Make `remove_invalid` plugin assign back a previous attachment if was there (@janko)\n\n* Deprecate `Storage::FileSystem#download` (@janko)\n\n* In `UploadedFile#download` use extension from `#original_filename` if `#id` doesn't have it (@janko)\n\n## 2.4.0 (2016-10-11) [[release notes]](https://shrinerb.com/docs/release_notes/2.4.0)\n\n* Add `#convert_before_write` and `#convert_after_read` on the Attacher for data attribute conversion (@janko)\n\n* Extract the `<attachment>_data` attribute name into `Attacher#data_attribute` (@janko)\n\n* Support JSON and JSONB PostgreSQL columns with ActiveRecord (@janko)\n\n* Fix S3 storage not handling filenames with double quotes in Content-Disposition header (@janko)\n\n* Work around aws-sdk failing with non-ASCII characters in Content-Disposition header (@janko)\n\n* Allow dynamically generating URL options in `default_url_options` plugin (@janko)\n\n* Don't run file validations when duplicating the record in `copy` plugin (@janko)\n\n* Don't use `Storage#stream` in download_endpoint plugin anymore, rely on `Storage#open` (@janko)\n\n* Remove explicitly unlinking Tempfiles returned by `Storage#open` (@janko)\n\n* Move `:host` from first-class storage option to `#url` option on FileSystem and S3 storage (@janko)\n\n* Don't fail in FileSystem storage when attempting to delete a file that doesn't exist (@janko)\n\n* In `UploadedFile#open` handle the case when `Storage#open` raises an error (@janko)\n\n* Make the `sequel` plugin use less memory during transactions (@janko)\n\n* Use Roda's streaming plugin in `download_endpoint` for better EventMachine integration (@janko)\n\n* Deprecate accepting a JSON string in `Shrine.uploaded_file` (@janko)\n\n* In S3 storage automatically write original filename to `Content-Disposition` header (@janko)\n\n* Override `#to_s` in `Shrine::Attachment` for better introspection with `puts` (@janko)\n\n## 2.3.1 (2016-09-01) [[release notes]](https://shrinerb.com/docs/release_notes/2.3.1)\n\n* Don't change permissions of existing directories in FileSystem storage (@janko)\n\n## 2.3.0 (2016-08-27) [[release notes]](https://shrinerb.com/docs/release_notes/2.3.0)\n\n* Prevent client from caching the presign response in direct_upload plugin (@janko)\n\n* Make Sequel update only the attachment in background job (@janko)\n\n* Add copy plugin for copying files from one record to another (@janko)\n\n* Disable moving when uploading stored file to backup storage (@janko)\n\n* Make `Attacher#recache` from the recache plugin public for standalone usage (@janko)\n\n* Allow changing `Shrine::Attacher#context` once the attacher is instantiated (@janko)\n\n* Make `Attacher#read` for reading the attachment column public (@janko)\n\n* Don't rely on the `#id` writer on a model instance in backgrounding plugin (@janko)\n\n* Don't make `Attacher#swap` private in sequel and activerecord plugins (@janko)\n\n* Set default UNIX permissions to 0644 for files and 0755 for directories (@janko)\n\n* Apply directory permissions to all subfolders inside the main folder (@janko)\n\n* Add `:directory_permissions` to `Storage::FileSystem` (@janko)\n\n## 2.2.0 (2016-07-29) [[release notes]](https://shrinerb.com/docs/release_notes/2.2.0)\n\n* Soft deprecate `:phase` over `:action` in `context` (@janko)\n\n* Add ability to sequel and activerecord plugins to disable callbacks and validations (@janko)\n\n* The direct_upload endpoint now always includes both upload and presign routes (@janko)\n\n* Don't let the combination for delete_raw and moving plugins trigger any errors (@janko)\n\n* Add `UploadedFile#open` that mimics `File.open` with a block (@janko)\n\n* In the storage linter don't require `#clear!` to be implemented (@janko)\n\n* In backgrounding plugin don't require model to have attachment module included (@janko)\n\n* Add add_metadata plugin for defining additional metadata values to be extracted (@janko)\n\n* In determine_mime_type plugin raise error when file command wasn't found or errored (@janko)\n\n* Add processing plugin for simpler and more declarative definition of processing (@janko)\n\n* Storage classes don't need to implement the `#read` method anymore (@janko)\n\n* Use aws-sdk in `S3#download`, which will automatically retry failed downloads (@janko)\n\n* Add `:multipart_threshold` for when S3 storage should use parallelized multipart copy/upload (@janko)\n\n* Automatically use optimized multipart S3 upload for files larger than 15MB (@janko)\n\n* Avoid an additional HEAD request to determine content length in multipart S3 copy (@janko)\n\n## 2.1.1 (2016-07-14) [[release notes]](https://shrinerb.com/docs/release_notes/2.1.1)\n\n* Fix `S3#open` throwing a NameError if `net/http` isn't required (@janko)\n\n## 2.1.0 (2016-06-27) [[release notes]](https://shrinerb.com/docs/release_notes/2.1.0)\n\n* Remove `:names` from versions plugin, and deprecate generating versions in :cache phase (@janko)\n\n* Pass a `Shrine::UploadedFile` in restore_cached_data instead of the raw IO (@janko)\n\n* Increase magic header length in determine_mime_type and make it configurable (@janko)\n\n* Execute `file` command in determine_mime_type the same way for files as for general IOs (@janko)\n\n* Make logging and parallelize plugins work properly when loaded in this order (@janko)\n\n* Don't assert arity of IO methods, so that objects like `Rack::Test::UploadedFile` are allowed (@janko)\n\n* Deprecate `#cached_<attachment>_data=` over using `<attachment>` for the hidden field (@janko)\n\n## 2.0.1 (2016-05-30) [[release notes]](https://shrinerb.com/docs/release_notes/2.0.1)\n\n* Don't override previously set default_url in versions plugin (@janko)\n\n## 2.0.0 (2016-05-19) [[release notes]](https://shrinerb.com/docs/release_notes/2.0.0)\n\n* Include query parameters in CDN-ed S3 URLs, making them work for private objects (@janko)\n\n* Remove the `:include_error` option from remote_url plugin (@janko)\n\n* Make previous plugin options persist when reapplying the plugin (@janko)\n\n* Improve how upload options and metadata are passed to storage's `#upload` and `#move` (@janko)\n\n* Remove `Shrine::Confirm` and confirming `Storage#clear!` in general (@janko)\n\n* Allow implementing a custom dimensions analyzer using built-in ones (@janko)\n\n* Don't error in determine_mime_type when MimeMagic cannot determine the MIME (@janko)\n\n* Allow implementing a custom MIME type analyzer using built-in ones (@janko)\n\n* Don't check that the cached file exists in restore_cached_data plugin (@janko)\n\n* Deprecate migration_helpers plugin and move `Attacher#cached?` and `Attacher#stored?` to base (@janko)\n\n* Don't trigger restore_cached_data plugin functionality when assigning the same cached attachment (@janko)\n\n* Give `Attacher#_promote` and `Attacher#promote` the same method signature (@janko)\n\n* Add `Attacher#_delete` which now spawns a background job instead of `Attacher#delete!` (@janko)\n\n* Make `Attacher#cache!`, `Attacher#store!`, and `Attacher#delete!` public (@janko)\n\n* Don't cache storages in dynamic_storage plugin (@janko)\n\n* Make only one HTTP request in download_endpoint plugin (@janko)\n\n* Print secuity warning when not using determine_mime_type plugin (@janko)\n\n* Support Mongoid in backgrounding plugin (@janko)\n\n* Allow including attachment module to non-`Sequel::Model` objects in sequel plugin (@janko)\n\n* Handle paths that start with \"-\" in determine_mime_type plugin when `:file` analyzer is used (@zaeleus)\n\n* Allow including attachment module to non-`ActiveRecord::Base` objects in activerecord plugin (@janko)\n\n* Remove deprecated \"restore_cached\" alias for restore_cached_data plugin (@janko)\n\n* Remove deprecated \"delete_uploaded\" alias for delete_raw plugin (@janko)\n\n* Make the default generated unique location shorter (@janko)\n\n* Make the `:delegate` option in migration_helpers default to `false` (@janko)\n\n* Don't require `:storages` option anymore in moving plugin (@janko)\n\n* Don't delete uploaded IO if storage doesn't support moving in moving plugin (@janko)\n\n* Rename delete phases to be shorter and consistent in naming with upload phases (@janko)\n\n* Remove deprecated `Shrine#default_url` (@janko)\n\n* Remove deprecated `:subdirectory` on FileSystem storage (@janko)\n\n* Don't return the uploaded file in `Attacher#set` and `Attacher#assign` (@janko)\n\n* Return the attacher instance in `Attacher.promote` and `Attacher.delete` in backgrounding plugin (@janko)\n\n* Rename \"attachment\" to \"name\", and \"uploaded_file\" to \"attachment\" in backgrounding plugin (@janko)\n\n* Remove using `:presign` for presign options instead of `:presign_options` (@janko)\n\n* Remove deprecated `Shrine.direct_endpoint` from direct_upload plugin (@janko)\n\n* Remove deprecated keep_location plugin (@janko)\n\n* Make `Shrine#extract_dimensions` a private method in store_dimensions plugin (@janko)\n\n* Keep `Shrine#extract_mime_type` a private method when loading determine_mime_type plugin (@janko)\n\n* Deprecate loading the backgrounding plugin through the old \"background_helpers\" alias (@janko)\n\n## 1.4.2 (2016-04-19) [[release notes]](https://shrinerb.com/docs/release_notes/1.4.2)\n\n* Removed ActiveRecord's automatic support for optimistic locking as it wasn't stable (@janko)\n\n* Fixed record's dataset being modified after promoting preventing further updates with the same instance (@janko)\n\n## 1.4.1 (2016-04-18) [[release notes]](https://shrinerb.com/docs/release_notes/1.4.1)\n\n* Bring back triggering callbacks on promote in ORM plugins, and add support for optimistic locking (@janko)\n\n## 1.4.0 (2016-04-15) [[release notes]](https://shrinerb.com/docs/release_notes/1.4.0)\n\n* Return \"Content-Length\" response header in download_endpoint plugin (@janko)\n\n* Make determine_mime_type and store_dimensions automatically rewind IO with custom analyzer (@janko)\n\n* Make `before_*` and `after_*` hooks happen before and after `around_*` hooks (@janko)\n\n* Rename restore_cached plugin to more accurate \"restore_cached_data\" (@janko)\n\n* Prevent errors when attempting to validate dimensions when they are absent (@janko)\n\n* Remove \"thread\" gem dependency in parallelize plugin (@janko)\n\n* Add `:filename` to data_uri plugin for generating filenames based on content type (@janko)\n\n* Make user-defined hooks always happen around logging (@janko)\n\n* Add `:presign_location` to direct_upload for generating the key (@janko)\n\n* Add separate `:presign_options` option for receiving presign options in direct_upload plugin (@janko)\n\n* Add ability to generate fake presigns for storages which don't support them for testing (@janko)\n\n* Change the `/:storage/:name` route to `/:storage/upload` in direct_upload plugin (@janko)\n\n* Fix logger not being inherited in the logging plugin (@janko)\n\n* Add delete_promoted plugin for deleting promoted files after record has been updated (@janko)\n\n* Allow passing phase to `Attacher#promote` and generalize promoting background job (@janko)\n\n* Close the cached file after extracting its metadata in restore_cached plugin (@janko)\n\n* Rename delete_uploaded plugin to \"delete_raw\" to better explain its functionality (@janko)\n\n* Pass the SSL CA bundle to open-uri when downloading an S3 file (@janko)\n\n* Add `Attacher.dump` and `Attacher.load` for writing custom background jobs with custom functionality (@janko)\n\n* Fix S3 URL erroring due to not being URL-encoded when `:host` option is used (@janko)\n\n* Remove a tiny possibility of a race condition with backgrounding on subsequent updates (@janko)\n\n* Add `:delegate` option to migration_helpers for opting out of defining methods on the model (@janko)\n\n* Make logging plugin log number of both input and output files for processing (@janko)\n\n* Make deleting backup work with backgrounding plugin (@janko)\n\n* Make storing backup happen *after* promoting instead of before (@janko)\n\n* Add `:fallbacks` to versions plugin for fallback URLs for versions which haven't finished processing (@janko)\n\n* Fix keep_files not to spawn a background job when file will not be deleted (@janko)\n\n## 1.3.0 (2016-03-12) [[release notes]](https://shrinerb.com/docs/release_notes/1.3.0)\n\n* Add `<attachment>_cached?` and `<attachment>_stored?` to migration_helpers plugin (@janko)\n\n* Fix `Attacher#backup_file` from backup plugin not to modify the given uploaded file (@janko)\n\n* Allow modifying UploadedFile's data hash after it's instantiated to change the UploadedFile (@janko)\n\n* Deprecate the keep_location plugin (@janko)\n\n* Don't mutate context hash inside the uploader (@janko)\n\n* Make extracted metadata accessible in `#generate_location` through `:metadata` in context hash (@janko)\n\n* Don't require the \"metadata\" key when instantiating a `Shrine::UploadedFile` (@janko)\n\n* Add `:include_error` option to remote_url for accessing download error in `:error_message` block (@janko)\n\n* Give different error message when file wasn't found or was too large in remote_url (@janko)\n\n* Rewind the IO after extracting MIME type with MimeMagic (@janko)\n\n* Rewind the IO after extracting image dimensions even when extraction failed (@kaapa)\n\n* Correctly infer the extension in `#generate_location` when uploading an `UploadedFile` (@janko)\n\n* Fix ability for errors to accumulate in data_uri and remote_url plugins when assigning mutliples to same record instance (@janko)\n\n* Bump Down dependency to 2.0.0 in order to fix downloading URLs with \"[]\" characters (@janko)\n\n* Add `:namespace` option to pretty_location for including class namespace in location (@janko)\n\n* Don't include the namespace of the class in the location with the pretty_location plugin (@janko)\n\n* Remove aws-sdk deprecation warning when storage isn't instantiated with credentials (@reidab)\n\n* Don't make uploaded file's metadata methods error when the corresponding key-value pair is missing (@janko)\n\n* Close the `UploadedFile` on upload only if it was previously opened, which doesn't happen on S3 COPY (@reidab)\n\n* Fix `NameError` when silencing \"missing record\" errors in backgrounding (@janko)\n\n## 1.2.0 (2016-01-26) [[release notes]](https://shrinerb.com/docs/release_notes/1.2.0)\n\n* Make `Shrine::Attacher.promote` and `Shrine::Attacher.delete` return the record in backgrounding plugin (@janko)\n\n* Close the IO on upload even if the upload errors (@janko)\n\n* Use a transaction when checking if attachment has changed after storing during promotion (@janko)\n\n* Don't attempt to start promoting in background if attachment has already changed (@janko)\n\n* Don't error in backgrounding when record is missing (@janko)\n\n* Prevent multiline content type spoof attempts in validation_helpers (@xzo)\n\n* Make custom metadata inherited from uploaded files and make `#extract_metadata` called only on caching (@janko)\n\n## 1.1.0 (2015-12-26) [[release notes]](https://shrinerb.com/docs/release_notes/1.1.0)\n\n* Rename the \"background_helpers\" plugin to \"backgrounding\" (@janko)\n\n* Rename the `:subdirectory` option to `:prefix` on FileSystem storage (@janko)\n\n* Add download_endpoint plugin for downloading files uploaded to database storages and for securing downloads (@janko)\n\n* Make `around_*` hooks return the result of the corresponding action (@janko)\n\n* Make the direct upload endpoint customizable, inheritable and inspectable (@janko)\n\n* Add upload_options plugin for dynamically generating storage-specific upload options (@janko)\n\n* Allow the context hash to be modified (@janko)\n\n* Fix extension not being returned for storages which remove it from ID (Flickr, SQL, GridFS) (@janko)\n\n* Delete underlying Tempfiles when closing an `UploadedFile` (@janko)\n\n* Fix background_helpers plugin not working with ActiveJob (@janko)\n\n* Add `UploadedFile#base64` to the data_uri plugin (@janko)\n\n* Optimize `UploadedData#data_uri` to not download the file and instantiate file contents string only once (@janko)\n\n* Allow adding S3 upload options dynamically per upload (@janko)\n\n* Add delete_uploaded plugin for automatically deleting files after they're uploaded (@janko)\n\n* Close an open file descriptor left after downloading a FileSystem file (@janko)\n\n* Make `FileSystem#url` Windows compatible (@janko)\n\n* Add `UploadedFile#content_type` alias to `#mime_type` for better integration with upload libraries (@janko)\n\n* Add a `UploadedFile#data_uri` method to the data_uri plugin (@janko)\n\n* Allow the data_uri plugin to accept \"+\" symbols in MIME type names (@janko)\n\n* Make the data_uri plugin accept data URIs which aren't base64 encoded (@janko)\n\n* Close all IOs after uploading them (@janko)\n\n* Allow passing a custom IO object to the Linter (@janko)\n\n* Add remove_invalid plugin for automatically deleting and deassigning invalid cached files (@janko)\n\n* Add `:max_size` option to the direct_upload plugin (@janko)\n\n* Move `Shrine#default_url` to default_url plugin (@janko)\n\n* Enable `S3#multi_delete` to delete more than 1000 objects by batching deletes (@janko)\n\n* Add the keep_location plugin for easier debugging or backups (@janko)\n\n* Add the backup plugin for backing up stored files (@janko)\n\n* Storages don't need to rewind the files after upload anymore (@janko)\n\n* Make S3 presigns work when the `:endpoint` option is given (@NetsoftHoldings)\n\n* Fix parallelize plugin to always work with the moving plugin (@janko)\n\n* Fix S3 storage to handle copying files that are larger than 5GB (@janko)\n\n* Add `:upload_options` to S3 storage for applying additional options on upload (@janko)\n\n* Reduce length of URLs generated with pretty_location plugin (@gshaw)\n\n## 1.0.0 (2015-11-27) [[release notes]](https://shrinerb.com/docs/release_notes/1.0.0)\n\n* Improve Windows compatibility in the FileSystem storage (@janko)\n\n* Remove the ability for FileSystem storage to accept IDs starting with a slash (@janko)\n\n* Fix keep_files plugin requiring context for deleting files (@janko)\n\n* Extract assigning cached files by parsed JSON into a parsed_json plugin (@janko)\n\n* Add `(before|around|after)_upload` to the hooks plugin (@janko)\n\n* Fix `S3#multi_delete` and `S3#clear!` not using the prefix (@janko)\n\n* Add ability to pass presign options to storages in the direct_upload plugin (@janko)\n\n* Remove `Shrine.io!` because it was actually meant to be only for internal use (@janko)\n\n* Remove `Shrine.delete` because of redundancy (@janko)\n\n* Add default_url_options plugin for specifiying default URL options for uploaded files (@janko)\n\n* Add module_include plugin for easily extending core classes for given uploader (@janko)\n\n* Add support for Sequel's Postgres JSON column support (@janko)\n\n* Fix migration_helpers plugin not detecting when column changed (@janko)\n\n* Add the `:public` option to S3 storage for retrieving public URLs which aren't signed (@janko)\n\n* Remove the delete_invalid plugin, as it could cause lame errors (@janko)\n\n* Don't delete cached files anymore, as it can cause errors with backgrounding (@janko)\n\n* Add a `:host` option to the S3 storage for specifying CDNs (@janko)\n\n* Don't allow same attachment to be promoted multiple times with backgrounding (@janko)\n\n* Fix recache plugin causing an infinite loop (@janko)\n\n* Fix an encoding error in determine_mime_type when using `:file` with non-files (@janko)\n\n* Make `UploadedFile` actually delete itself only once (@janko)\n\n* Make `UploadedFile#inspect` cleaner by showing only the data hash (@janko)\n\n* Make determine_mime_type able to accept non-files when using :file (@janko)\n\n* Make logging plugin accept PORO instance which don't have an #id (@janko)\n\n* Add rack_file plugin for attaching Rack file hashes to models (@janko)\n", "# frozen_string_literal: true\n\nrequire \"rack\"\nrequire \"content_disposition\"\n\nrequire \"openssl\"\nrequire \"tempfile\"\nrequire \"pathname\"\n\nclass Shrine\n  module Plugins\n    # Documentation can be found on https://shrinerb.com/docs/plugins/derivation_endpoint\n    module DerivationEndpoint\n      LOG_SUBSCRIBER = -> (event) do\n        Shrine.logger.info \"Derivation (#{event.duration}ms) \u2013 #{{\n          name:     event[:derivation].name,\n          args:     event[:derivation].args,\n          uploader: event[:uploader],\n        }.inspect}\"\n      end\n\n      def self.load_dependencies(uploader, **)\n        uploader.plugin :rack_response\n        uploader.plugin :_urlsafe_serialization\n      end\n\n      def self.configure(uploader, log_subscriber: LOG_SUBSCRIBER, **opts)\n        uploader.opts[:derivation_endpoint] ||= { options: {}, derivations: {} }\n        uploader.opts[:derivation_endpoint][:options].merge!(opts)\n\n        unless uploader.opts[:derivation_endpoint][:options][:secret_key]\n          fail Error, \"must provide :secret_key option to derivation_endpoint plugin\"\n        end\n\n        # instrumentation plugin integration\n        uploader.subscribe(:derivation, &log_subscriber) if uploader.respond_to?(:subscribe)\n      end\n\n      module ClassMethods\n        # Returns a mountable Rack app that handles derivation requests.\n        def derivation_endpoint(**options)\n          Shrine::DerivationEndpoint.new(shrine_class: self, options: options)\n        end\n\n        # Calls the derivation endpoint passing the request information, and\n        # returns the Rack response triple.\n        #\n        # It uses a trick where it removes the derivation path prefix from the\n        # path info before calling the Rack app, which is what web framework\n        # routers do before they're calling a mounted Rack app.\n        def derivation_response(env, **options)\n          script_name = env[\"SCRIPT_NAME\"]\n          path_info   = env[\"PATH_INFO\"]\n\n          prefix = derivation_options[:prefix]\n          match  = path_info.match(/^\\/#{prefix}/)\n\n          fail Error, \"request path must start with \\\"/#{prefix}\\\", but is \\\"#{path_info}\\\"\" unless match\n\n          begin\n            env[\"SCRIPT_NAME\"] += match.to_s\n            env[\"PATH_INFO\"]    = match.post_match\n\n            derivation_endpoint(**options).call(env)\n          ensure\n            env[\"SCRIPT_NAME\"] = script_name\n            env[\"PATH_INFO\"]   = path_info\n          end\n        end\n\n        # Registers a derivation block, which is called when the corresponding\n        # derivation URL is requested.\n        def derivation(name, &block)\n          derivations[name.to_sym] = block\n        end\n\n        def derivations\n          opts[:derivation_endpoint][:derivations]\n        end\n\n        def derivation_options\n          opts[:derivation_endpoint][:options]\n        end\n      end\n\n      module FileMethods\n        # Generates a URL to a derivation with the receiver as the source file.\n        # Any arguments provided will be included in the URL and passed to the\n        # derivation block. Accepts additional URL options.\n        def derivation_url(name, *args, **options)\n          derivation(name, *args).url(**options)\n        end\n\n        # Calls the specified derivation with the receiver as the source file,\n        # returning a Rack response triple. The derivation endpoint ultimately\n        # calls this method.\n        def derivation_response(name, *args, env:, **options)\n          derivation(name, *args, **options).response(env)\n        end\n\n        # Returns a Shrine::Derivation object created from the provided\n        # arguments. This object offers additional methods for operating with\n        # derivatives on a lower level.\n        def derivation(name, *args, **options)\n          Shrine::Derivation.new(\n            name:    name,\n            args:    args,\n            source:  self,\n            options: options,\n          )\n        end\n      end\n    end\n\n    register_plugin(:derivation_endpoint, DerivationEndpoint)\n  end\n\n  class Derivation\n    class NotFound       < Error; end\n    class SourceNotFound < Error; end\n\n    attr_reader :name, :args, :source, :options\n\n    def initialize(name:, args:, source:, options:)\n      @name    = name.to_sym\n      @args    = args\n      @source  = source\n      @options = options\n    end\n\n    # Returns an URL to the derivation.\n    def url(**options)\n      Derivation::Url.new(self).call(\n        host:       option(:host),\n        prefix:     option(:prefix),\n        expires_in: option(:expires_in),\n        version:    option(:version),\n        metadata:   option(:metadata),\n        **options,\n      )\n    end\n\n    # Returns the derivation result in form of a Rack response triple.\n    def response(env)\n      Derivation::Response.new(self).call(env)\n    end\n\n    # Returns the derivation result as a File/Tempfile or a\n    # Shrine::UploadedFile object.\n    def processed\n      Derivation::Processed.new(self).call\n    end\n\n    # Calls the derivation block and returns the direct result.\n    def generate(file = nil)\n      Derivation::Generate.new(self).call(file)\n    end\n\n    # Uploads the derivation result to a dedicated destination on the specified\n    # Shrine storage.\n    def upload(file = nil, **options)\n      Derivation::Upload.new(self).call(file, **options)\n    end\n\n    # Returns a Shrine::UploadedFile object pointing to the uploaded derivative\n    # if it exists.\n    def retrieve\n      Derivation::Retrieve.new(self).call\n    end\n\n    # Returns opened Shrine::UploadedFile object pointing to the uploaded\n    # derivative if it exists.\n    def opened\n      Derivation::Opened.new(self).call\n    end\n\n    # Deletes the derivation result from the storage.\n    def delete\n      Derivation::Delete.new(self).call\n    end\n\n    def self.options\n      @options ||= {}\n    end\n\n    def self.option(name, default: nil, result: nil)\n      options[name] = { default: default, result: result }\n    end\n\n    option :cache_control,               default: -> { default_cache_control }\n    option :disposition,                 default: -> { \"inline\" }\n    option :download,                    default: -> { true }\n    option :download_options,            default: -> { {} }\n    option :expires_in\n    option :filename,                    default: -> { default_filename }\n    option :host\n    option :metadata,                    default: -> { [] }\n    option :prefix\n    option :secret_key\n    option :type\n    option :upload,                      default: -> { false }\n    option :upload_location,             default: -> { default_upload_location }, result: -> (o) { upload_location(o) }\n    option :upload_open_options,         default: -> { {} }\n    option :upload_options,              default: -> { {} }\n    option :upload_redirect,             default: -> { false }\n    option :upload_redirect_url_options, default: -> { {} }\n    option :upload_storage,              default: -> { default_upload_storage }\n    option :version\n\n    # Retrieves the value of a derivation option.\n    #\n    # * If specified as a raw value, returns that value\n    # * If specified as a block, evaluates that it and returns the result\n    # * If unspecified, returns the default value\n    def option(name)\n      option_definition = self.class.options.fetch(name)\n\n      value = options.fetch(name) { shrine_class.derivation_options[name] }\n      value = instance_exec(&value) if value.is_a?(Proc)\n\n      if value.nil?\n        default = option_definition[:default]\n        value   = instance_exec(&default) if default\n      end\n\n      result = option_definition[:result]\n      value  = instance_exec(value, &result) if result\n\n      value\n    end\n\n    def shrine_class\n      source.shrine_class\n    end\n\n    private\n\n    # When bumping the version, we also append it to the upload location to\n    # ensure we're not retrieving old derivatives.\n    def upload_location(location)\n      location = location.sub(/(?=(\\.\\w+)?$)/, \"-#{option(:version)}\") if option(:version)\n      location\n    end\n\n    # For derivation \"thumbnail\" with arguments \"600/400\" and source id of\n    # \"1f6375ad.ext\", returns \"thumbnail-600-400-1f6375ad\".\n    def default_filename\n      [name, *args, File.basename(source.id, \".*\")].join(\"-\")\n    end\n\n    # For derivation \"thumbnail\" with arguments \"600/400\" and source id of\n    # \"1f6375ad.ext\", returns \"1f6375ad/thumbnail-600-400\".\n    def default_upload_location\n      directory = source.id.sub(/\\.[^\\/]+/, \"\")\n      filename  = [name, *args].join(\"-\")\n\n      [directory, filename].join(\"/\")\n    end\n\n    # The source uploaded file storage is the default derivative storage.\n    def default_upload_storage\n      source.storage_key\n    end\n\n    # Allows caching for 1 year or until the URL expires.\n    def default_cache_control\n      if option(:expires_in)\n        \"public, max-age=#{option(:expires_in)}\"\n      else\n        \"public, max-age=#{365*24*60*60}\"\n      end\n    end\n\n    class Command\n      attr_reader :derivation\n\n      def initialize(derivation)\n        @derivation = derivation\n      end\n\n      # Creates methods that delegate to derivation parameters.\n      def self.delegate(*names)\n        names.each do |name|\n          protected define_method(name) {\n            if [:name, :args, :source].include?(name)\n              derivation.public_send(name)\n            else\n              derivation.option(name)\n            end\n          }\n        end\n      end\n\n      private\n\n      def shrine_class\n        derivation.shrine_class\n      end\n    end\n  end\n\n  class Derivation::Url < Derivation::Command\n    delegate :name, :args, :source, :secret_key\n\n    def call(host: nil, prefix: nil, **options)\n      [host, *prefix, identifier(**options)].join(\"/\")\n    end\n\n    private\n\n    def identifier(expires_in: nil,\n                   version: nil,\n                   type: nil,\n                   filename: nil,\n                   disposition: nil,\n                   metadata: [])\n\n      params = {}\n      params[:expires_at]  = (Time.now + expires_in).to_i if expires_in\n      params[:version]     = version if version\n      params[:type]        = type if type\n      params[:filename]    = filename if filename\n      params[:disposition] = disposition if disposition\n\n      # serializes the source uploaded file into an URL-safe format\n      source_component = source.urlsafe_dump(metadata: metadata)\n\n      # generate plain URL\n      url = plain_url(name, *args, source_component, params)\n\n      # generate signed URL\n      signed_url(url)\n    end\n\n    def plain_url(*components, params)\n      # When using Rack < 2, Rack::Utils#escape_path will escape '/'.\n      # Escape each component and then join them together.\n      path  = components.map{|component| Rack::Utils.escape_path(component.to_s)}.join('/')\n      query = Rack::Utils.build_query(params)\n\n      \"#{path}?#{query}\"\n    end\n\n    def signed_url(url)\n      signer = UrlSigner.new(secret_key)\n      signer.sign_url(url)\n    end\n  end\n\n  class DerivationEndpoint\n    attr_reader :shrine_class, :options\n\n    def initialize(shrine_class:, options: {})\n      @shrine_class = shrine_class\n      @options      = options\n    end\n\n    def call(env)\n      request = Rack::Request.new(env)\n\n      status, headers, body = catch(:halt) do\n        error!(405, \"Method not allowed\") unless request.get? || request.head?\n\n        handle_request(request)\n      end\n\n      headers[\"Content-Length\"] ||= body.map(&:bytesize).inject(0, :+).to_s\n\n      [status, headers, body]\n    end\n\n    # Verifies validity of the URL, then extracts parameters from it (such as\n    # derivation name, arguments and source file), and generates a derivation\n    # response.\n    #\n    # Returns \"403 Forbidden\" if signature is invalid, or if the URL has\n    # expired.\n    #\n    # Returns \"404 Not Found\" if derivation block is not defined, or if source\n    # file was not found on the storage.\n    def handle_request(request)\n      verify_signature!(request)\n      check_expiry!(request)\n\n      name, *args, serialized_file = request.path_info.split(\"/\")[1..-1]\n\n      name          = name.to_sym\n      uploaded_file = shrine_class::UploadedFile.urlsafe_load(serialized_file)\n\n      # request params override statically configured options\n      options = self.options.dup\n      options[:type]        = request.params[\"type\"]        if request.params[\"type\"]\n      options[:disposition] = request.params[\"disposition\"] if request.params[\"disposition\"]\n      options[:filename]    = request.params[\"filename\"]    if request.params[\"filename\"]\n      options[:version]     = request.params[\"version\"]     if request.params[\"version\"]\n      options[:expires_in]  = expires_in(request)           if request.params[\"expires_at\"]\n\n      derivation = uploaded_file.derivation(name, *args, **options)\n\n      begin\n        status, headers, body = derivation.response(request.env)\n      rescue Derivation::SourceNotFound\n        error!(404, \"Source file not found\")\n      rescue Derivation::NotFound\n        error!(404, \"Unknown derivation \\\"#{name}\\\"\")\n      end\n\n      # tell clients to cache the derivation result if it was successful\n      if status == 200 || status == 206\n        headers[\"Cache-Control\"] = derivation.option(:cache_control)\n      end\n\n      [status, headers, body]\n    end\n\n    def inspect\n      \"#<#{@shrine_class}::DerivationEndpoint>\"\n    end\n    alias to_s inspect\n\n    private\n\n    # Return an error response if the signature is invalid.\n    def verify_signature!(request)\n      signer = UrlSigner.new(secret_key)\n      signer.verify_url(\"#{request.path_info[1..-1]}?#{request.query_string}\")\n    rescue UrlSigner::InvalidSignature => error\n      error!(403, error.message.capitalize)\n    end\n\n    # Return an error response if URL has expired.\n    def check_expiry!(request)\n      if request.params[\"expires_at\"]\n        error!(403, \"Request has expired\") if expires_in(request) <= 0\n      end\n    end\n\n    def expires_in(request)\n      expires_at = Integer(request.params[\"expires_at\"])\n\n      (Time.at(expires_at) - Time.now).to_i\n    end\n\n    # Halts the request with the error message.\n    def error!(status, message)\n      throw :halt, [status, { \"Content-Type\" => \"text/plain\" }, [message]]\n    end\n\n    def secret_key\n      derivation_options[:secret_key]\n    end\n\n    def derivation_options\n      shrine_class.derivation_options.merge(self.options)\n    end\n  end\n\n  class Derivation::Response < Derivation::Command\n    delegate :type, :disposition, :filename,\n             :upload, :upload_open_options,\n             :upload_redirect, :upload_redirect_url_options\n\n    def call(env)\n      if upload\n        upload_response(env)\n      else\n        local_response(env)\n      end\n    end\n\n    private\n\n    def local_response(env)\n      derivative = derivation.generate\n\n      file_response(derivative, env)\n    end\n\n    # Generates a Rack response triple from a local file. Fills in\n    # `Content-Type` and `Content-Disposition` response headers from derivation\n    # options and file extension of the derivation result.\n    def file_response(file, env)\n      response = rack_file_response(file.path, env)\n\n      status = response[0]\n\n      headers = {\n        \"Content-Type\"        => type || response[1][\"Content-Type\"],\n        \"Content-Length\"      => response[1][\"Content-Length\"],\n        \"Content-Disposition\" => content_disposition(file),\n        \"Content-Range\"       => response[1][\"Content-Range\"],\n        \"Accept-Ranges\"       => \"bytes\",\n      }.compact\n\n      body = Rack::BodyProxy.new(response[2]) { File.delete(file.path) }\n\n      file.close\n\n      [status, headers, body]\n    end\n\n    # This is called when `:upload` is enabled. Checks the storage for already\n    # uploaded derivation result, otherwise calls the derivation block and\n    # uploads the result. If the derivation result is already uploaded, uses\n    # the `rack_response` plugin to generate a Rack response triple.\n    def upload_response(env)\n      uploaded_file = upload_redirect ? derivation.retrieve : derivation.opened\n\n      unless uploaded_file\n        derivative    = derivation.generate\n        uploaded_file = derivation.upload(derivative, delete: upload_redirect)\n      end\n\n      if upload_redirect\n        redirect_url = uploaded_file.url(**upload_redirect_url_options)\n\n        [302, { \"Location\" => redirect_url }, []]\n      else\n        if derivative && File.exist?(derivative.path)\n          file_response(derivative, env)\n        else\n          uploaded_file.to_rack_response(\n            type:        type,\n            disposition: disposition,\n            filename:    filename,\n            range:       env[\"HTTP_RANGE\"],\n          )\n        end\n      end\n    end\n\n    # We call `Rack::Files` with no default `Content-Type`, and make sure we\n    # stay compatible with both Rack 2.x and 1.6.x.\n    def rack_file_response(path, env)\n      if Rack.release >= \"2.1\"\n        server = Rack::Files.new(\"\", {}, nil)\n      else\n        server = Rack::File.new(\"\", {}, nil)\n      end\n\n      if Rack.release > \"2\"\n        server.serving(Rack::Request.new(env), path)\n      else\n        # :nocov:\n        server.path = path\n        server.serving(env)\n        # :nocov:\n      end\n    end\n\n    # Returns disposition and filename formatted for the `Content-Disposition`\n    # header.\n    def content_disposition(file)\n      filename  = self.filename\n      filename += File.extname(file.path) if File.extname(filename).empty?\n\n      ContentDisposition.format(disposition: disposition, filename: filename)\n    end\n  end\n\n  class Derivation::Processed < Derivation::Command\n    delegate :upload\n\n    def call\n      if upload\n        derivation.retrieve || derivation.upload\n      else\n        derivation.generate\n      end\n    end\n  end\n\n  class Derivation::Generate < Derivation::Command\n    delegate :name, :args, :source, :download, :download_options\n\n    def call(file = nil)\n      derivative = generate(file)\n      derivative = normalize(derivative)\n      derivative\n    end\n\n    private\n\n    # Determines how to call the derivation block. If a file object is given,\n    # passes that as the source file, otherwise downloads the source uploaded\n    # file.\n    def generate(file)\n      if download\n        with_downloaded(file) { |file| derive(file, *args) }\n      else\n        derive(*args)\n      end\n    end\n\n    # Calls the derivation block.\n    def derive(*args)\n      instrument_derivation do\n        derivation.instance_exec(*args, &derivation_block)\n      end\n    end\n\n    # Sends a `derivation.shrine` event for instrumentation plugin.\n    def instrument_derivation(&block)\n      return yield unless shrine_class.respond_to?(:instrument)\n\n      shrine_class.instrument(:derivation, derivation: derivation, &block)\n    end\n\n    # Massages the derivation result, ensuring it's opened in binary mode,\n    # rewinded and flushed to disk.\n    def normalize(file)\n      unless file.is_a?(File) || file.is_a?(Tempfile)\n        fail Error, \"expected File or Tempfile object as derivation result, got #{file.inspect}\"\n      end\n\n      file.open if file.is_a?(Tempfile) # refresh file descriptor\n      file.binmode                      # ensure binary mode\n      file\n    end\n\n    def with_downloaded(file, &block)\n      return yield(file) if file\n\n      download_source(&block)\n    end\n\n    # Downloads the source uploaded file from the storage.\n    def download_source(&block)\n      source.download(**download_options, &block)\n    rescue Shrine::FileNotFound\n      raise Derivation::SourceNotFound, \"source file \\\"#{source.id}\\\" was not found on storage :#{source.storage_key}\"\n    end\n\n    def derivation_block\n      shrine_class.derivations[name] or fail Derivation::NotFound, \"derivation #{name.inspect} is not defined\"\n    end\n  end\n\n  class Derivation::Upload < Derivation::Command\n    delegate :upload_location, :upload_storage, :upload_options\n\n    # Uploads the derivation result to the dedicated location on the storage.\n    # If a file object is given, uploads that to the storage, otherwise calls\n    # the derivation block and uploads the result.\n    def call(derivative = nil, **options)\n      if derivative\n        upload(derivative, **options)\n      else\n        upload(derivation.generate, delete: true, **options)\n      end\n    end\n\n    private\n\n    def upload(io, **options)\n      shrine_class.upload io, upload_storage,\n        location:       upload_location,\n        upload_options: upload_options,\n        action:         :derivation,\n        **options\n    end\n  end\n\n  class Derivation::Retrieve < Derivation::Command\n    delegate :upload_storage, :upload_location\n\n    # Returns a Shrine::UploadedFile object pointing to the uploaded derivative\n    # if it exists on the storage.\n    def call\n      uploaded_file = shrine_class.uploaded_file(storage: upload_storage, id: upload_location)\n      uploaded_file if uploaded_file.exists?\n    end\n  end\n\n  class Derivation::Opened < Derivation::Command\n    delegate :upload_storage, :upload_location, :upload_open_options\n\n    # Returns opened Shrine::UploadedFile object pointing to the uploaded if\n    # it exists on the storage.\n    def call\n      uploaded_file = shrine_class.uploaded_file(storage: upload_storage, id: upload_location)\n      uploaded_file.open(**upload_open_options)\n      uploaded_file\n    rescue Shrine::FileNotFound\n    end\n  end\n\n  class Derivation::Delete < Derivation::Command\n    delegate :upload_location, :upload_storage\n\n    # Deletes the uploaded derivation result from the storage.\n    def call\n      storage.delete(upload_location)\n    end\n\n    private\n\n    def storage\n      shrine_class.find_storage(upload_storage)\n    end\n  end\n\n  class UrlSigner\n    class InvalidSignature < Error; end\n\n    attr_reader :secret_key\n\n    def initialize(secret_key)\n      @secret_key = secret_key\n    end\n\n    # Returns a URL with the `signature` query parameter\n    def sign_url(url)\n      path, query = url.split(\"?\")\n\n      params = Rack::Utils.parse_query(query.to_s)\n      params.merge!(\"signature\" => generate_signature(url))\n\n      query = Rack::Utils.build_query(params)\n\n      \"#{path}?#{query}\"\n    end\n\n    # Calculcates the signature from the URL and checks whether it matches the\n    # value in the `signature` query parameter. Raises `InvalidSignature` if\n    # the `signature` parameter is missing or its value doesn't match the\n    # calculated signature.\n    def verify_url(url)\n      path, query = url.split(\"?\")\n\n      params    = Rack::Utils.parse_query(query.to_s)\n      signature = params.delete(\"signature\")\n\n      query = Rack::Utils.build_query(params)\n\n      verify_signature(\"#{path}?#{query}\", signature)\n    end\n\n    def verify_signature(string, signature)\n      if signature.nil?\n        fail InvalidSignature, \"missing \\\"signature\\\" param\"\n      elsif !Rack::Utils.secure_compare(signature, generate_signature(string))\n        fail InvalidSignature, \"provided signature does not match the calculated signature\"\n      end\n    end\n\n    # Uses HMAC-SHA-256 algorithm to generate a signature from the given string\n    # using the secret key.\n    def generate_signature(string)\n      OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA256.new, secret_key, string)\n    end\n  end\nend\n"], "filenames": ["CHANGELOG.md", "lib/shrine/plugins/derivation_endpoint.rb"], "buggy_code_start_loc": [2, 742], "buggy_code_end_loc": [2, 743], "fixing_code_start_loc": [3, 742], "fixing_code_end_loc": [5, 743], "type": "CWE-203", "message": "In Shrine before version 3.3.0, when using the `derivation_endpoint` plugin, it's possible for the attacker to use a timing attack to guess the signature of the derivation URL. The problem has been fixed by comparing sent and calculated signature in constant time, using `Rack::Utils.secure_compare`. Users using the `derivation_endpoint` plugin are urged to upgrade to Shrine 3.3.0 or greater. A possible workaround is provided in the linked advisory.", "other": {"cve": {"id": "CVE-2020-15237", "sourceIdentifier": "security-advisories@github.com", "published": "2020-10-05T19:15:15.103", "lastModified": "2020-10-19T13:39:42.577", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Shrine before version 3.3.0, when using the `derivation_endpoint` plugin, it's possible for the attacker to use a timing attack to guess the signature of the derivation URL. The problem has been fixed by comparing sent and calculated signature in constant time, using `Rack::Utils.secure_compare`. Users using the `derivation_endpoint` plugin are urged to upgrade to Shrine 3.3.0 or greater. A possible workaround is provided in the linked advisory."}, {"lang": "es", "value": "En Shrine versiones anteriores a 3.3.0, cuando se usa el plugin \"derivation_endpoint\", es posible que el atacante use un ataque de sincronizaci\u00f3n para adivinar la firma de la URL de derivaci\u00f3n. El problema ha sido corregido al comparar la firma enviada y la calculada en tiempo constante, usando la funci\u00f3n \"Rack::Utils.secure_compare\". Se insta a usuarios que usan el plugin \"derivation_endpoint\" a actualizar a Shrine versi\u00f3n 3.3.0 o superior. Se proporciona una posible soluci\u00f3n alternativa en el aviso vinculado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-203"}, {"lang": "en", "value": "CWE-208"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shrinerb:shrine:*:*:*:*:*:ruby:*:*", "versionEndExcluding": "3.3.0", "matchCriteriaId": "0B363C9B-709B-49FE-AE94-196A9C185EEF"}]}]}], "references": [{"url": "https://github.com/shrinerb/shrine/commit/1b27090ce31543bf39f186c20ea47c8250fca2f0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/shrinerb/shrine/security/advisories/GHSA-5jjv-x4fq-qjwp", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shrinerb/shrine/commit/1b27090ce31543bf39f186c20ea47c8250fca2f0"}}