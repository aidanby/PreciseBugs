{"buggy_code": ["/***************************************************************************\n    copyright            : (C) 2002 - 2008 by Scott Wheeler\n    email                : wheeler@kde.org\n ***************************************************************************/\n\n/***************************************************************************\n *   This library is free software; you can redistribute it and/or modify  *\n *   it under the terms of the GNU Lesser General Public License version   *\n *   2.1 as published by the Free Software Foundation.                     *\n *                                                                         *\n *   This library is distributed in the hope that it will be useful, but   *\n *   WITHOUT ANY WARRANTY; without even the implied warranty of            *\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *\n *   Lesser General Public License for more details.                       *\n *                                                                         *\n *   You should have received a copy of the GNU Lesser General Public      *\n *   License along with this library; if not, write to the Free Software   *\n *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA         *\n *   02110-1301  USA                                                       *\n *                                                                         *\n *   Alternatively, this file is available under the Mozilla Public        *\n *   License Version 1.1.  You may obtain a copy of the License at         *\n *   http://www.mozilla.org/MPL/                                           *\n ***************************************************************************/\n\n#include <ostream>\n\n#include <tstring.h>\n#include <tdebug.h>\n\n#include <string.h>\n\n#include \"tbytevector.h\"\n\n// This is a bit ugly to keep writing over and over again.\n\n// A rather obscure feature of the C++ spec that I hadn't thought of that makes\n// working with C libs much more effecient.  There's more here:\n//\n// http://www.informit.com/isapi/product_id~{9C84DAB4-FE6E-49C5-BB0A-FB50331233EA}/content/index.asp\n\n#define DATA(x) (&(x->data[0]))\n\nnamespace TagLib {\n  static const char hexTable[17] = \"0123456789abcdef\";\n\n  static const uint crcTable[256] = {\n    0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b,\n    0x1a864db2, 0x1e475005, 0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,\n    0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd, 0x4c11db70, 0x48d0c6c7,\n    0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,\n    0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3,\n    0x709f7b7a, 0x745e66cd, 0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,\n    0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5, 0xbe2b5b58, 0xbaea46ef,\n    0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,\n    0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb,\n    0xceb42022, 0xca753d95, 0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,\n    0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d, 0x34867077, 0x30476dc0,\n    0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,\n    0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4,\n    0x0808d07d, 0x0cc9cdca, 0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,\n    0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08,\n    0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,\n    0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc,\n    0xb6238b25, 0xb2e29692, 0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,\n    0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a, 0xe0b41de7, 0xe4750050,\n    0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,\n    0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34,\n    0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,\n    0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb, 0x4f040d56, 0x4bc510e1,\n    0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,\n    0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5,\n    0x3f9b762c, 0x3b5a6b9b, 0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,\n    0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623, 0xf12f560e, 0xf5ee4bb9,\n    0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,\n    0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd,\n    0xcda1f604, 0xc960ebb3, 0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,\n    0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6, 0x9ff77d71,\n    0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,\n    0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2,\n    0x470cdd2b, 0x43cdc09c, 0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,\n    0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24, 0x119b4be9, 0x155a565e,\n    0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,\n    0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a,\n    0x2d15ebe3, 0x29d4f654, 0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,\n    0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c, 0xe3a1cbc1, 0xe760d676,\n    0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,\n    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662,\n    0x933eb0bb, 0x97ffad0c, 0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,\n    0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4\n  };\n\n  /*!\n   * A templatized KMP find that works both with a ByteVector and a ByteVectorMirror.\n   */\n\n  template <class Vector>\n  int vectorFind(const Vector &v, const Vector &pattern, uint offset, int byteAlign)\n  {\n    if(pattern.size() > v.size() || offset > v.size() - 1)\n      return -1;\n\n    // Let's go ahead and special case a pattern of size one since that's common\n    // and easy to make fast.\n\n    if(pattern.size() == 1) {\n      char p = pattern[0];\n      for(uint i = offset; i < v.size(); i++) {\n        if(v[i] == p && (i - offset) % byteAlign == 0)\n          return i;\n      }\n      return -1;\n    }\n\n    uchar lastOccurrence[256];\n\n    for(uint i = 0; i < 256; ++i)\n      lastOccurrence[i] = uchar(pattern.size());\n\n    for(uint i = 0; i < pattern.size() - 1; ++i)\n      lastOccurrence[uchar(pattern[i])] = uchar(pattern.size() - i - 1);\n\n    for(uint i = pattern.size() - 1 + offset; i < v.size(); i += lastOccurrence[uchar(v.at(i))]) {\n      int iBuffer = i;\n      int iPattern = pattern.size() - 1;\n\n      while(iPattern >= 0 && v.at(iBuffer) == pattern[iPattern]) {\n        --iBuffer;\n        --iPattern;\n      }\n\n      if(-1 == iPattern && (iBuffer + 1 - offset) % byteAlign == 0)\n        return iBuffer + 1;\n    }\n\n    return -1;\n  }\n\n  /*!\n   * Wraps the accessors to a ByteVector to make the search algorithm access the\n   * elements in reverse.\n   *\n   * \\see vectorFind()\n   * \\see ByteVector::rfind()\n   */\n\n  class ByteVectorMirror\n  {\n  public:\n    ByteVectorMirror(const ByteVector &source) : v(source) {}\n\n    char operator[](int index) const\n    {\n      return v[v.size() - index - 1];\n    }\n\n    char at(int index) const\n    {\n      return v.at(v.size() - index - 1);\n    }\n\n    ByteVectorMirror mid(uint index, uint length = 0xffffffff) const\n    {\n      return length == 0xffffffff ? v.mid(0, index) : v.mid(index - length, length);\n    }\n\n    uint size() const\n    {\n      return v.size();\n    }\n\n    int find(const ByteVectorMirror &pattern, uint offset = 0, int byteAlign = 1) const\n    {\n      ByteVectorMirror v(*this);\n\n      if(offset > 0) {\n        offset = size() - offset - pattern.size();\n        if(offset >= size())\n          offset = 0;\n      }\n\n      const int pos = vectorFind<ByteVectorMirror>(v, pattern, offset, byteAlign);\n\n      // If the offset is zero then we need to adjust the location in the search\n      // to be appropriately reversed.  If not we need to account for the fact\n      // that the recursive call (called from the above line) has already ajusted\n      // for this but that the normal templatized find above will add the offset\n      // to the returned value.\n      //\n      // This is a little confusing at first if you don't first stop to think\n      // through the logic involved in the forward search.\n\n      if(pos == -1)\n        return -1;\n\n      return size() - pos - pattern.size();\n    }\n\n  private:\n    const ByteVector &v;\n  };\n\n  template <class T>\n  T toNumber(const std::vector<char> &data, bool mostSignificantByteFirst)\n  {\n    T sum = 0;\n\n    if(data.size() <= 0) {\n      debug(\"ByteVectorMirror::toNumber<T>() -- data is empty, returning 0\");\n      return sum;\n    }\n\n    uint size = sizeof(T);\n    uint last = data.size() > size ? size - 1 : data.size() - 1;\n\n    for(uint i = 0; i <= last; i++)\n      sum |= (T) uchar(data[i]) << ((mostSignificantByteFirst ? last - i : i) * 8);\n\n    return sum;\n  }\n\n  template <class T>\n  ByteVector fromNumber(T value, bool mostSignificantByteFirst)\n  {\n    int size = sizeof(T);\n\n    ByteVector v(size, 0);\n\n    for(int i = 0; i < size; i++)\n      v[i] = uchar(value >> ((mostSignificantByteFirst ? size - 1 - i : i) * 8) & 0xff);\n\n    return v;\n  }\n}\n\nusing namespace TagLib;\n\nclass ByteVector::ByteVectorPrivate : public RefCounter\n{\npublic:\n  ByteVectorPrivate() : RefCounter(), size(0) {}\n  ByteVectorPrivate(const std::vector<char> &v) : RefCounter(), data(v), size(v.size()) {}\n  ByteVectorPrivate(TagLib::uint len, char value) : RefCounter(), data(len, value), size(len) {}\n\n  std::vector<char> data;\n\n  // std::vector<T>::size() is very slow, so we'll cache the value\n\n  uint size;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// static members\n////////////////////////////////////////////////////////////////////////////////\n\nByteVector ByteVector::null;\n\nByteVector ByteVector::fromCString(const char *s, uint length)\n{\n  ByteVector v;\n\n  if(length == 0xffffffff)\n    v.setData(s);\n  else\n    v.setData(s, length);\n\n  return v;\n}\n\nByteVector ByteVector::fromUInt(uint value, bool mostSignificantByteFirst)\n{\n  return fromNumber<uint>(value, mostSignificantByteFirst);\n}\n\nByteVector ByteVector::fromShort(short value, bool mostSignificantByteFirst)\n{\n  return fromNumber<short>(value, mostSignificantByteFirst);\n}\n\nByteVector ByteVector::fromLongLong(long long value, bool mostSignificantByteFirst)\n{\n  return fromNumber<long long>(value, mostSignificantByteFirst);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// public members\n////////////////////////////////////////////////////////////////////////////////\n\nByteVector::ByteVector()\n{\n  d = new ByteVectorPrivate;\n}\n\nByteVector::ByteVector(uint size, char value)\n{\n  d = new ByteVectorPrivate(size, value);\n}\n\nByteVector::ByteVector(const ByteVector &v) : d(v.d)\n{\n  d->ref();\n}\n\nByteVector::ByteVector(char c)\n{\n  d = new ByteVectorPrivate;\n  d->data.push_back(c);\n  d->size = 1;\n}\n\nByteVector::ByteVector(const char *data, uint length)\n{\n  d = new ByteVectorPrivate;\n  setData(data, length);\n}\n\nByteVector::ByteVector(const char *data)\n{\n  d = new ByteVectorPrivate;\n  setData(data);\n}\n\nByteVector::~ByteVector()\n{\n  if(d->deref())\n    delete d;\n}\n\nByteVector &ByteVector::setData(const char *data, uint length)\n{\n  detach();\n\n  resize(length);\n\n  if(length > 0)\n    ::memcpy(DATA(d), data, length);\n\n  return *this;\n}\n\nByteVector &ByteVector::setData(const char *data)\n{\n  return setData(data, ::strlen(data));\n}\n\nchar *ByteVector::data()\n{\n  detach();\n  return size() > 0 ? DATA(d) : 0;\n}\n\nconst char *ByteVector::data() const\n{\n  return size() > 0 ? DATA(d) : 0;\n}\n\nByteVector ByteVector::mid(uint index, uint length) const\n{\n  ByteVector v;\n\n  if(index > size())\n    return v;\n\n  ConstIterator endIt;\n\n  if(length < 0xffffffff && length + index < size())\n    endIt = d->data.begin() + index + length;\n  else\n    endIt = d->data.end();\n\n  v.d->data.insert(v.d->data.begin(), ConstIterator(d->data.begin() + index), endIt);\n  v.d->size = v.d->data.size();\n\n  return v;\n}\n\nchar ByteVector::at(uint index) const\n{\n  return index < size() ? d->data[index] : 0;\n}\n\nint ByteVector::find(const ByteVector &pattern, uint offset, int byteAlign) const\n{\n  return vectorFind<ByteVector>(*this, pattern, offset, byteAlign);\n}\n\nint ByteVector::rfind(const ByteVector &pattern, uint offset, int byteAlign) const\n{\n  // Ok, this is a little goofy, but pretty cool after it sinks in.  Instead of\n  // reversing the find method's Boyer-Moore search algorithm I created a \"mirror\"\n  // for a ByteVector to reverse the behavior of the accessors.\n\n  ByteVectorMirror v(*this);\n  ByteVectorMirror p(pattern);\n\n  return v.find(p, offset, byteAlign);\n}\n\nbool ByteVector::containsAt(const ByteVector &pattern, uint offset, uint patternOffset, uint patternLength) const\n{\n  if(pattern.size() < patternLength)\n    patternLength = pattern.size();\n\n  // do some sanity checking -- all of these things are needed for the search to be valid\n\n  if(patternLength > size() || offset >= size() || patternOffset >= pattern.size() || patternLength == 0)\n    return false;\n\n  // loop through looking for a mismatch\n\n  for(uint i = 0; i < patternLength - patternOffset; i++) {\n    if(at(i + offset) != pattern[i + patternOffset])\n      return false;\n  }\n\n  return true;\n}\n\nbool ByteVector::startsWith(const ByteVector &pattern) const\n{\n  return containsAt(pattern, 0);\n}\n\nbool ByteVector::endsWith(const ByteVector &pattern) const\n{\n  return containsAt(pattern, size() - pattern.size());\n}\n\nByteVector &ByteVector::replace(const ByteVector &pattern, const ByteVector &with)\n{\n  if(pattern.size() == 0 || pattern.size() > size())\n    return *this;\n\n  const uint withSize = with.size();\n  const uint patternSize = pattern.size();\n  int offset = 0;\n\n  if(withSize == patternSize) {\n    // I think this case might be common enough to optimize it\n    detach();\n    offset = find(pattern);\n    while(offset >= 0) {\n      ::memcpy(data() + offset, with.data(), withSize);\n      offset = find(pattern, offset + withSize);\n    }\n    return *this;\n  }\n\n  // calculate new size:\n  uint newSize = 0;\n  for(;;) {\n    int next = find(pattern, offset);\n    if(next < 0) {\n      if(offset == 0)\n        // pattern not found, do nothing:\n        return *this;\n      newSize += size() - offset;\n      break;\n    }\n    newSize += (next - offset) + withSize;\n    offset = next + patternSize;\n  }\n\n  // new private data of appropriate size:\n  ByteVectorPrivate *newData = new ByteVectorPrivate(newSize, 0);\n  char *target = DATA(newData);\n  const char *source = data();\n\n  // copy modified data into new private data:\n  offset = 0;\n  for(;;) {\n    int next = find(pattern, offset);\n    if(next < 0) {\n      ::memcpy(target, source + offset, size() - offset);\n      break;\n    }\n    int chunkSize = next - offset;\n    ::memcpy(target, source + offset, chunkSize);\n    target += chunkSize;\n    ::memcpy(target, with.data(), withSize);\n    target += withSize;\n    offset += chunkSize + patternSize;\n  }\n  \n  // replace private data:\n  if(d->deref())\n    delete d;\n\n  d = newData;\n\n  return *this;\n}\n\nint ByteVector::endsWithPartialMatch(const ByteVector &pattern) const\n{\n  if(pattern.size() > size())\n    return -1;\n\n  const int startIndex = size() - pattern.size();\n\n  // try to match the last n-1 bytes from the vector (where n is the pattern\n  // size) -- continue trying to match n-2, n-3...1 bytes\n\n  for(uint i = 1; i < pattern.size(); i++) {\n    if(containsAt(pattern, startIndex + i, 0, pattern.size() - i))\n      return startIndex + i;\n  }\n\n  return -1;\n}\n\nByteVector &ByteVector::append(const ByteVector &v)\n{\n  if(v.d->size == 0)\n    return *this; // Simply return if appending nothing.\n\n  detach();\n\n  uint originalSize = d->size;\n  resize(d->size + v.d->size);\n  ::memcpy(DATA(d) + originalSize, DATA(v.d), v.size());\n\n  return *this;\n}\n\nByteVector &ByteVector::clear()\n{\n  detach();\n  d->data.clear();\n  d->size = 0;\n\n  return *this;\n}\n\nTagLib::uint ByteVector::size() const\n{\n  return d->size;\n}\n\nByteVector &ByteVector::resize(uint size, char padding)\n{\n  if(d->size < size) {\n    d->data.reserve(size);\n    d->data.insert(d->data.end(), size - d->size, padding);\n  }\n  else\n    d->data.erase(d->data.begin() + size, d->data.end());\n\n  d->size = size;\n\n  return *this;\n}\n\nByteVector::Iterator ByteVector::begin()\n{\n  return d->data.begin();\n}\n\nByteVector::ConstIterator ByteVector::begin() const\n{\n  return d->data.begin();\n}\n\nByteVector::Iterator ByteVector::end()\n{\n  return d->data.end();\n}\n\nByteVector::ConstIterator ByteVector::end() const\n{\n  return d->data.end();\n}\n\nbool ByteVector::isNull() const\n{\n  return d == null.d;\n}\n\nbool ByteVector::isEmpty() const\n{\n  return d->data.size() == 0;\n}\n\nTagLib::uint ByteVector::checksum() const\n{\n  uint sum = 0;\n  for(ByteVector::ConstIterator it = begin(); it != end(); ++it)\n    sum = (sum << 8) ^ crcTable[((sum >> 24) & 0xff) ^ uchar(*it)];\n  return sum;\n}\n\nTagLib::uint ByteVector::toUInt(bool mostSignificantByteFirst) const\n{\n  return toNumber<uint>(d->data, mostSignificantByteFirst);\n}\n\nshort ByteVector::toShort(bool mostSignificantByteFirst) const\n{\n  return toNumber<unsigned short>(d->data, mostSignificantByteFirst);\n}\n\nunsigned short ByteVector::toUShort(bool mostSignificantByteFirst) const\n{\n  return toNumber<unsigned short>(d->data, mostSignificantByteFirst);\n}\n\nlong long ByteVector::toLongLong(bool mostSignificantByteFirst) const\n{\n  return toNumber<unsigned long long>(d->data, mostSignificantByteFirst);\n}\n\nconst char &ByteVector::operator[](int index) const\n{\n  return d->data[index];\n}\n\nchar &ByteVector::operator[](int index)\n{\n  detach();\n\n  return d->data[index];\n}\n\nbool ByteVector::operator==(const ByteVector &v) const\n{\n  if(d->size != v.d->size)\n    return false;\n\n  return ::memcmp(data(), v.data(), size()) == 0;\n}\n\nbool ByteVector::operator!=(const ByteVector &v) const\n{\n  return !operator==(v);\n}\n\nbool ByteVector::operator==(const char *s) const\n{\n  if(d->size != ::strlen(s))\n    return false;\n\n  return ::memcmp(data(), s, d->size) == 0;\n}\n\nbool ByteVector::operator!=(const char *s) const\n{\n  return !operator==(s);\n}\n\nbool ByteVector::operator<(const ByteVector &v) const\n{\n  int result = ::memcmp(data(), v.data(), d->size < v.d->size ? d->size : v.d->size);\n\n  if(result != 0)\n    return result < 0;\n  else\n    return size() < v.size();\n}\n\nbool ByteVector::operator>(const ByteVector &v) const\n{\n  return v < *this;\n}\n\nByteVector ByteVector::operator+(const ByteVector &v) const\n{\n  ByteVector sum(*this);\n  sum.append(v);\n  return sum;\n}\n\nByteVector &ByteVector::operator=(const ByteVector &v)\n{\n  if(&v == this)\n    return *this;\n\n  if(d->deref())\n    delete d;\n\n  d = v.d;\n  d->ref();\n  return *this;\n}\n\nByteVector &ByteVector::operator=(char c)\n{\n  *this = ByteVector(c);\n  return *this;\n}\n\nByteVector &ByteVector::operator=(const char *data)\n{\n  *this = ByteVector(data);\n  return *this;\n}\n\nByteVector ByteVector::toHex() const\n{\n  ByteVector encoded(size() * 2);\n\n  uint j = 0;\n  for(uint i = 0; i < size(); i++) {\n    unsigned char c = d->data[i];\n    encoded[j++] = hexTable[(c >> 4) & 0x0F];\n    encoded[j++] = hexTable[(c     ) & 0x0F];\n  }\n\n  return encoded;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// protected members\n////////////////////////////////////////////////////////////////////////////////\n\nvoid ByteVector::detach()\n{\n  if(d->count() > 1) {\n    d->deref();\n    d = new ByteVectorPrivate(d->data);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// related functions\n////////////////////////////////////////////////////////////////////////////////\n\nstd::ostream &operator<<(std::ostream &s, const ByteVector &v)\n{\n  for(TagLib::uint i = 0; i < v.size(); i++)\n    s << v[i];\n  return s;\n}\n"], "fixing_code": ["/***************************************************************************\n    copyright            : (C) 2002 - 2008 by Scott Wheeler\n    email                : wheeler@kde.org\n ***************************************************************************/\n\n/***************************************************************************\n *   This library is free software; you can redistribute it and/or modify  *\n *   it under the terms of the GNU Lesser General Public License version   *\n *   2.1 as published by the Free Software Foundation.                     *\n *                                                                         *\n *   This library is distributed in the hope that it will be useful, but   *\n *   WITHOUT ANY WARRANTY; without even the implied warranty of            *\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *\n *   Lesser General Public License for more details.                       *\n *                                                                         *\n *   You should have received a copy of the GNU Lesser General Public      *\n *   License along with this library; if not, write to the Free Software   *\n *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA         *\n *   02110-1301  USA                                                       *\n *                                                                         *\n *   Alternatively, this file is available under the Mozilla Public        *\n *   License Version 1.1.  You may obtain a copy of the License at         *\n *   http://www.mozilla.org/MPL/                                           *\n ***************************************************************************/\n\n#include <ostream>\n\n#include <tstring.h>\n#include <tdebug.h>\n\n#include <string.h>\n\n#include \"tbytevector.h\"\n\n// This is a bit ugly to keep writing over and over again.\n\n// A rather obscure feature of the C++ spec that I hadn't thought of that makes\n// working with C libs much more effecient.  There's more here:\n//\n// http://www.informit.com/isapi/product_id~{9C84DAB4-FE6E-49C5-BB0A-FB50331233EA}/content/index.asp\n\n#define DATA(x) (&(x->data[0]))\n\nnamespace TagLib {\n  static const char hexTable[17] = \"0123456789abcdef\";\n\n  static const uint crcTable[256] = {\n    0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b,\n    0x1a864db2, 0x1e475005, 0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,\n    0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd, 0x4c11db70, 0x48d0c6c7,\n    0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,\n    0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3,\n    0x709f7b7a, 0x745e66cd, 0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,\n    0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5, 0xbe2b5b58, 0xbaea46ef,\n    0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,\n    0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb,\n    0xceb42022, 0xca753d95, 0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,\n    0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d, 0x34867077, 0x30476dc0,\n    0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,\n    0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4,\n    0x0808d07d, 0x0cc9cdca, 0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,\n    0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08,\n    0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,\n    0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc,\n    0xb6238b25, 0xb2e29692, 0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,\n    0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a, 0xe0b41de7, 0xe4750050,\n    0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,\n    0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34,\n    0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,\n    0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb, 0x4f040d56, 0x4bc510e1,\n    0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,\n    0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5,\n    0x3f9b762c, 0x3b5a6b9b, 0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,\n    0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623, 0xf12f560e, 0xf5ee4bb9,\n    0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,\n    0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd,\n    0xcda1f604, 0xc960ebb3, 0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,\n    0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6, 0x9ff77d71,\n    0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,\n    0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2,\n    0x470cdd2b, 0x43cdc09c, 0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,\n    0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24, 0x119b4be9, 0x155a565e,\n    0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,\n    0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a,\n    0x2d15ebe3, 0x29d4f654, 0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,\n    0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c, 0xe3a1cbc1, 0xe760d676,\n    0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,\n    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662,\n    0x933eb0bb, 0x97ffad0c, 0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,\n    0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4\n  };\n\n  /*!\n   * A templatized KMP find that works both with a ByteVector and a ByteVectorMirror.\n   */\n\n  template <class Vector>\n  int vectorFind(const Vector &v, const Vector &pattern, uint offset, int byteAlign)\n  {\n    if(pattern.size() > v.size() || offset > v.size() - 1)\n      return -1;\n\n    // Let's go ahead and special case a pattern of size one since that's common\n    // and easy to make fast.\n\n    if(pattern.size() == 1) {\n      char p = pattern[0];\n      for(uint i = offset; i < v.size(); i++) {\n        if(v[i] == p && (i - offset) % byteAlign == 0)\n          return i;\n      }\n      return -1;\n    }\n\n    uchar lastOccurrence[256];\n\n    for(uint i = 0; i < 256; ++i)\n      lastOccurrence[i] = uchar(pattern.size());\n\n    for(uint i = 0; i < pattern.size() - 1; ++i)\n      lastOccurrence[uchar(pattern[i])] = uchar(pattern.size() - i - 1);\n\n    for(uint i = pattern.size() - 1 + offset; i < v.size(); i += lastOccurrence[uchar(v.at(i))]) {\n      int iBuffer = i;\n      int iPattern = pattern.size() - 1;\n\n      while(iPattern >= 0 && v.at(iBuffer) == pattern[iPattern]) {\n        --iBuffer;\n        --iPattern;\n      }\n\n      if(-1 == iPattern && (iBuffer + 1 - offset) % byteAlign == 0)\n        return iBuffer + 1;\n    }\n\n    return -1;\n  }\n\n  /*!\n   * Wraps the accessors to a ByteVector to make the search algorithm access the\n   * elements in reverse.\n   *\n   * \\see vectorFind()\n   * \\see ByteVector::rfind()\n   */\n\n  class ByteVectorMirror\n  {\n  public:\n    ByteVectorMirror(const ByteVector &source) : v(source) {}\n\n    char operator[](int index) const\n    {\n      return v[v.size() - index - 1];\n    }\n\n    char at(int index) const\n    {\n      return v.at(v.size() - index - 1);\n    }\n\n    ByteVectorMirror mid(uint index, uint length = 0xffffffff) const\n    {\n      return length == 0xffffffff ? v.mid(0, index) : v.mid(index - length, length);\n    }\n\n    uint size() const\n    {\n      return v.size();\n    }\n\n    int find(const ByteVectorMirror &pattern, uint offset = 0, int byteAlign = 1) const\n    {\n      ByteVectorMirror v(*this);\n\n      if(offset > 0) {\n        offset = size() - offset - pattern.size();\n        if(offset >= size())\n          offset = 0;\n      }\n\n      const int pos = vectorFind<ByteVectorMirror>(v, pattern, offset, byteAlign);\n\n      // If the offset is zero then we need to adjust the location in the search\n      // to be appropriately reversed.  If not we need to account for the fact\n      // that the recursive call (called from the above line) has already ajusted\n      // for this but that the normal templatized find above will add the offset\n      // to the returned value.\n      //\n      // This is a little confusing at first if you don't first stop to think\n      // through the logic involved in the forward search.\n\n      if(pos == -1)\n        return -1;\n\n      return size() - pos - pattern.size();\n    }\n\n  private:\n    const ByteVector &v;\n  };\n\n  template <class T>\n  T toNumber(const std::vector<char> &data, bool mostSignificantByteFirst)\n  {\n    T sum = 0;\n\n    if(data.size() <= 0) {\n      debug(\"ByteVectorMirror::toNumber<T>() -- data is empty, returning 0\");\n      return sum;\n    }\n\n    uint size = sizeof(T);\n    uint last = data.size() > size ? size - 1 : data.size() - 1;\n\n    for(uint i = 0; i <= last; i++)\n      sum |= (T) uchar(data[i]) << ((mostSignificantByteFirst ? last - i : i) * 8);\n\n    return sum;\n  }\n\n  template <class T>\n  ByteVector fromNumber(T value, bool mostSignificantByteFirst)\n  {\n    int size = sizeof(T);\n\n    ByteVector v(size, 0);\n\n    for(int i = 0; i < size; i++)\n      v[i] = uchar(value >> ((mostSignificantByteFirst ? size - 1 - i : i) * 8) & 0xff);\n\n    return v;\n  }\n}\n\nusing namespace TagLib;\n\nclass ByteVector::ByteVectorPrivate : public RefCounter\n{\npublic:\n  ByteVectorPrivate() : RefCounter(), size(0) {}\n  ByteVectorPrivate(const std::vector<char> &v) : RefCounter(), data(v), size(v.size()) {}\n  ByteVectorPrivate(TagLib::uint len, char value) : RefCounter(), data(len, value), size(len) {}\n\n  std::vector<char> data;\n\n  // std::vector<T>::size() is very slow, so we'll cache the value\n\n  uint size;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// static members\n////////////////////////////////////////////////////////////////////////////////\n\nByteVector ByteVector::null;\n\nByteVector ByteVector::fromCString(const char *s, uint length)\n{\n  ByteVector v;\n\n  if(length == 0xffffffff)\n    v.setData(s);\n  else\n    v.setData(s, length);\n\n  return v;\n}\n\nByteVector ByteVector::fromUInt(uint value, bool mostSignificantByteFirst)\n{\n  return fromNumber<uint>(value, mostSignificantByteFirst);\n}\n\nByteVector ByteVector::fromShort(short value, bool mostSignificantByteFirst)\n{\n  return fromNumber<short>(value, mostSignificantByteFirst);\n}\n\nByteVector ByteVector::fromLongLong(long long value, bool mostSignificantByteFirst)\n{\n  return fromNumber<long long>(value, mostSignificantByteFirst);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// public members\n////////////////////////////////////////////////////////////////////////////////\n\nByteVector::ByteVector()\n{\n  d = new ByteVectorPrivate;\n}\n\nByteVector::ByteVector(uint size, char value)\n{\n  d = new ByteVectorPrivate(size, value);\n}\n\nByteVector::ByteVector(const ByteVector &v) : d(v.d)\n{\n  d->ref();\n}\n\nByteVector::ByteVector(char c)\n{\n  d = new ByteVectorPrivate;\n  d->data.push_back(c);\n  d->size = 1;\n}\n\nByteVector::ByteVector(const char *data, uint length)\n{\n  d = new ByteVectorPrivate;\n  setData(data, length);\n}\n\nByteVector::ByteVector(const char *data)\n{\n  d = new ByteVectorPrivate;\n  setData(data);\n}\n\nByteVector::~ByteVector()\n{\n  if(d->deref())\n    delete d;\n}\n\nByteVector &ByteVector::setData(const char *data, uint length)\n{\n  detach();\n\n  resize(length);\n\n  if(length > 0)\n    ::memcpy(DATA(d), data, length);\n\n  return *this;\n}\n\nByteVector &ByteVector::setData(const char *data)\n{\n  return setData(data, ::strlen(data));\n}\n\nchar *ByteVector::data()\n{\n  detach();\n  return size() > 0 ? DATA(d) : 0;\n}\n\nconst char *ByteVector::data() const\n{\n  return size() > 0 ? DATA(d) : 0;\n}\n\nByteVector ByteVector::mid(uint index, uint length) const\n{\n  ByteVector v;\n\n  if(index > size())\n    return v;\n\n  ConstIterator endIt;\n\n  if(length < size() - index)\n    endIt = d->data.begin() + index + length;\n  else\n    endIt = d->data.end();\n\n  v.d->data.insert(v.d->data.begin(), ConstIterator(d->data.begin() + index), endIt);\n  v.d->size = v.d->data.size();\n\n  return v;\n}\n\nchar ByteVector::at(uint index) const\n{\n  return index < size() ? d->data[index] : 0;\n}\n\nint ByteVector::find(const ByteVector &pattern, uint offset, int byteAlign) const\n{\n  return vectorFind<ByteVector>(*this, pattern, offset, byteAlign);\n}\n\nint ByteVector::rfind(const ByteVector &pattern, uint offset, int byteAlign) const\n{\n  // Ok, this is a little goofy, but pretty cool after it sinks in.  Instead of\n  // reversing the find method's Boyer-Moore search algorithm I created a \"mirror\"\n  // for a ByteVector to reverse the behavior of the accessors.\n\n  ByteVectorMirror v(*this);\n  ByteVectorMirror p(pattern);\n\n  return v.find(p, offset, byteAlign);\n}\n\nbool ByteVector::containsAt(const ByteVector &pattern, uint offset, uint patternOffset, uint patternLength) const\n{\n  if(pattern.size() < patternLength)\n    patternLength = pattern.size();\n\n  // do some sanity checking -- all of these things are needed for the search to be valid\n\n  if(patternLength > size() || offset >= size() || patternOffset >= pattern.size() || patternLength == 0)\n    return false;\n\n  // loop through looking for a mismatch\n\n  for(uint i = 0; i < patternLength - patternOffset; i++) {\n    if(at(i + offset) != pattern[i + patternOffset])\n      return false;\n  }\n\n  return true;\n}\n\nbool ByteVector::startsWith(const ByteVector &pattern) const\n{\n  return containsAt(pattern, 0);\n}\n\nbool ByteVector::endsWith(const ByteVector &pattern) const\n{\n  return containsAt(pattern, size() - pattern.size());\n}\n\nByteVector &ByteVector::replace(const ByteVector &pattern, const ByteVector &with)\n{\n  if(pattern.size() == 0 || pattern.size() > size())\n    return *this;\n\n  const uint withSize = with.size();\n  const uint patternSize = pattern.size();\n  int offset = 0;\n\n  if(withSize == patternSize) {\n    // I think this case might be common enough to optimize it\n    detach();\n    offset = find(pattern);\n    while(offset >= 0) {\n      ::memcpy(data() + offset, with.data(), withSize);\n      offset = find(pattern, offset + withSize);\n    }\n    return *this;\n  }\n\n  // calculate new size:\n  uint newSize = 0;\n  for(;;) {\n    int next = find(pattern, offset);\n    if(next < 0) {\n      if(offset == 0)\n        // pattern not found, do nothing:\n        return *this;\n      newSize += size() - offset;\n      break;\n    }\n    newSize += (next - offset) + withSize;\n    offset = next + patternSize;\n  }\n\n  // new private data of appropriate size:\n  ByteVectorPrivate *newData = new ByteVectorPrivate(newSize, 0);\n  char *target = DATA(newData);\n  const char *source = data();\n\n  // copy modified data into new private data:\n  offset = 0;\n  for(;;) {\n    int next = find(pattern, offset);\n    if(next < 0) {\n      ::memcpy(target, source + offset, size() - offset);\n      break;\n    }\n    int chunkSize = next - offset;\n    ::memcpy(target, source + offset, chunkSize);\n    target += chunkSize;\n    ::memcpy(target, with.data(), withSize);\n    target += withSize;\n    offset += chunkSize + patternSize;\n  }\n  \n  // replace private data:\n  if(d->deref())\n    delete d;\n\n  d = newData;\n\n  return *this;\n}\n\nint ByteVector::endsWithPartialMatch(const ByteVector &pattern) const\n{\n  if(pattern.size() > size())\n    return -1;\n\n  const int startIndex = size() - pattern.size();\n\n  // try to match the last n-1 bytes from the vector (where n is the pattern\n  // size) -- continue trying to match n-2, n-3...1 bytes\n\n  for(uint i = 1; i < pattern.size(); i++) {\n    if(containsAt(pattern, startIndex + i, 0, pattern.size() - i))\n      return startIndex + i;\n  }\n\n  return -1;\n}\n\nByteVector &ByteVector::append(const ByteVector &v)\n{\n  if(v.d->size == 0)\n    return *this; // Simply return if appending nothing.\n\n  detach();\n\n  uint originalSize = d->size;\n  resize(d->size + v.d->size);\n  ::memcpy(DATA(d) + originalSize, DATA(v.d), v.size());\n\n  return *this;\n}\n\nByteVector &ByteVector::clear()\n{\n  detach();\n  d->data.clear();\n  d->size = 0;\n\n  return *this;\n}\n\nTagLib::uint ByteVector::size() const\n{\n  return d->size;\n}\n\nByteVector &ByteVector::resize(uint size, char padding)\n{\n  if(d->size < size) {\n    d->data.reserve(size);\n    d->data.insert(d->data.end(), size - d->size, padding);\n  }\n  else\n    d->data.erase(d->data.begin() + size, d->data.end());\n\n  d->size = size;\n\n  return *this;\n}\n\nByteVector::Iterator ByteVector::begin()\n{\n  return d->data.begin();\n}\n\nByteVector::ConstIterator ByteVector::begin() const\n{\n  return d->data.begin();\n}\n\nByteVector::Iterator ByteVector::end()\n{\n  return d->data.end();\n}\n\nByteVector::ConstIterator ByteVector::end() const\n{\n  return d->data.end();\n}\n\nbool ByteVector::isNull() const\n{\n  return d == null.d;\n}\n\nbool ByteVector::isEmpty() const\n{\n  return d->data.size() == 0;\n}\n\nTagLib::uint ByteVector::checksum() const\n{\n  uint sum = 0;\n  for(ByteVector::ConstIterator it = begin(); it != end(); ++it)\n    sum = (sum << 8) ^ crcTable[((sum >> 24) & 0xff) ^ uchar(*it)];\n  return sum;\n}\n\nTagLib::uint ByteVector::toUInt(bool mostSignificantByteFirst) const\n{\n  return toNumber<uint>(d->data, mostSignificantByteFirst);\n}\n\nshort ByteVector::toShort(bool mostSignificantByteFirst) const\n{\n  return toNumber<unsigned short>(d->data, mostSignificantByteFirst);\n}\n\nunsigned short ByteVector::toUShort(bool mostSignificantByteFirst) const\n{\n  return toNumber<unsigned short>(d->data, mostSignificantByteFirst);\n}\n\nlong long ByteVector::toLongLong(bool mostSignificantByteFirst) const\n{\n  return toNumber<unsigned long long>(d->data, mostSignificantByteFirst);\n}\n\nconst char &ByteVector::operator[](int index) const\n{\n  return d->data[index];\n}\n\nchar &ByteVector::operator[](int index)\n{\n  detach();\n\n  return d->data[index];\n}\n\nbool ByteVector::operator==(const ByteVector &v) const\n{\n  if(d->size != v.d->size)\n    return false;\n\n  return ::memcmp(data(), v.data(), size()) == 0;\n}\n\nbool ByteVector::operator!=(const ByteVector &v) const\n{\n  return !operator==(v);\n}\n\nbool ByteVector::operator==(const char *s) const\n{\n  if(d->size != ::strlen(s))\n    return false;\n\n  return ::memcmp(data(), s, d->size) == 0;\n}\n\nbool ByteVector::operator!=(const char *s) const\n{\n  return !operator==(s);\n}\n\nbool ByteVector::operator<(const ByteVector &v) const\n{\n  int result = ::memcmp(data(), v.data(), d->size < v.d->size ? d->size : v.d->size);\n\n  if(result != 0)\n    return result < 0;\n  else\n    return size() < v.size();\n}\n\nbool ByteVector::operator>(const ByteVector &v) const\n{\n  return v < *this;\n}\n\nByteVector ByteVector::operator+(const ByteVector &v) const\n{\n  ByteVector sum(*this);\n  sum.append(v);\n  return sum;\n}\n\nByteVector &ByteVector::operator=(const ByteVector &v)\n{\n  if(&v == this)\n    return *this;\n\n  if(d->deref())\n    delete d;\n\n  d = v.d;\n  d->ref();\n  return *this;\n}\n\nByteVector &ByteVector::operator=(char c)\n{\n  *this = ByteVector(c);\n  return *this;\n}\n\nByteVector &ByteVector::operator=(const char *data)\n{\n  *this = ByteVector(data);\n  return *this;\n}\n\nByteVector ByteVector::toHex() const\n{\n  ByteVector encoded(size() * 2);\n\n  uint j = 0;\n  for(uint i = 0; i < size(); i++) {\n    unsigned char c = d->data[i];\n    encoded[j++] = hexTable[(c >> 4) & 0x0F];\n    encoded[j++] = hexTable[(c     ) & 0x0F];\n  }\n\n  return encoded;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// protected members\n////////////////////////////////////////////////////////////////////////////////\n\nvoid ByteVector::detach()\n{\n  if(d->count() > 1) {\n    d->deref();\n    d = new ByteVectorPrivate(d->data);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// related functions\n////////////////////////////////////////////////////////////////////////////////\n\nstd::ostream &operator<<(std::ostream &s, const ByteVector &v)\n{\n  for(TagLib::uint i = 0; i < v.size(); i++)\n    s << v[i];\n  return s;\n}\n"], "filenames": ["taglib/toolkit/tbytevector.cpp"], "buggy_code_start_loc": [366], "buggy_code_end_loc": [367], "fixing_code_start_loc": [366], "fixing_code_end_loc": [367], "type": "CWE-189", "message": "Integer overflow in the mid function in toolkit/tbytevector.cpp in TagLib 1.7 and earlier allows context-dependent attackers to cause a denial of service (application crash) via a crafted file header field in a media file, which triggers a large memory allocation.", "other": {"cve": {"id": "CVE-2012-1584", "sourceIdentifier": "secalert@redhat.com", "published": "2012-09-06T18:55:01.207", "lastModified": "2017-08-29T01:31:19.413", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Integer overflow in the mid function in toolkit/tbytevector.cpp in TagLib 1.7 and earlier allows context-dependent attackers to cause a denial of service (application crash) via a crafted file header field in a media file, which triggers a large memory allocation."}, {"lang": "es", "value": "Desbordamiento de entero en la funci\u00f3n toolkit/tbytevector.cpp en TagLib v1.7 y anteriores permite a atacantes dependientes de contexto provocar una denegaci\u00f3n de servicio (ca\u00edda de aplicaci\u00f3n) a trav\u00e9s de un campo de archivo de cabecera dise\u00f1ado en un archivo multimedia, lo que desencadena una asignaci\u00f3n de memoria de gran tama\u00f1o."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-189"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.7", "matchCriteriaId": "0F562C2E-4011-40CD-B0D0-2A3F9DBCAB8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.0:*:*:*:*:*:*:*", "matchCriteriaId": "C28F20C9-4939-4F4A-96A8-B44B84F20DA2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.1:*:*:*:*:*:*:*", "matchCriteriaId": "11625F29-9539-45ED-8C69-BE49CB3E1640"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.2:*:*:*:*:*:*:*", "matchCriteriaId": "D74F6CEA-4FEE-44CD-844A-886E5A6B2D76"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.3:*:*:*:*:*:*:*", "matchCriteriaId": "A7EE066F-C257-4AE8-81ED-880F0DB35CDB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "A3BEFD3D-3091-41B2-93E1-9BB5464455B7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.4:*:*:*:*:*:*:*", "matchCriteriaId": "403A4D45-BE2E-41DC-971E-6A83B0F44DD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.5:*:*:*:*:*:*:*", "matchCriteriaId": "C64D253F-DE01-46D0-A1BD-099DF5ABC445"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.6:*:*:*:*:*:*:*", "matchCriteriaId": "062A2172-E47F-43BA-AB6C-E7CE669D2BD8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "34AF2A82-886F-42F5-9841-ECACE1BED7C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "CDBC7873-2E15-44AA-8D31-10394CED96BF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:scott_wheeler:taglib:1.6.3:*:*:*:*:*:*:*", "matchCriteriaId": "F990984E-7F9F-4DC0-B05D-60F88F8DC947"}]}]}], "references": [{"url": "http://mail.kde.org/pipermail/taglib-devel/2012-March/002186.html", "source": "secalert@redhat.com"}, {"url": "http://mail.kde.org/pipermail/taglib-devel/2012-March/002191.html", "source": "secalert@redhat.com"}, {"url": "http://www.gentoo.org/security/en/glsa/glsa-201206-16.xml", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/03/05/19", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/03/21/11", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/03/26/4", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/52290", "source": "secalert@redhat.com"}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/78909", "source": "secalert@redhat.com"}, {"url": "https://github.com/taglib/taglib/commit/dcdf4fd954e3213c355746fa15b7480461972308", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/taglib/taglib/commit/dcdf4fd954e3213c355746fa15b7480461972308"}}