{"buggy_code": ["02/26/2017 Version 4.2.0beta1\n    - Update git-clone instructions by Kyle McDonald (#277) \n    - Add protection against packet drift by Guillaume Scott (#268)\n    - Include Travis-CI build support by Ilya Shipitsin (#264) (#285)\n\n11/19/2016 Version 4.1.2\n    - Fix compilation with musl C library (#260)\n    - Support parallel builds (#259)\n    - Give user CFLAGS precedence (#256)\n    - Properly detect Brew install when Xcode is not available (#254)\n    - Increase max packet size to 65549 (#251)\n    - Handle IP headers with zero length (#247)\n\n01/11/2016 Version 4.1.1\n    - Improve --pps accuracy and performance (#236)\n    - Option --unique-ip accepts --duration (#227)\n    - RFC1624 incremental checksums (#225)\n    - Option --duration performance optimizations (#223)\n    - Correct company name in license (#217)\n    - Compile and mult-arch cross-compile on ARM (#211)\n    - Switch to wire speed after 30 minutes at 6 Gbps (#210)\n    - Tap device support for Linux and FreeBSD from Murat Demirten (#207)\n    - Handle loopback for linux cooked capture files from corentin-p1(Linux SLL) (#204)\n    - Master doesn't compile on OS X 10.11 (#203)\n    - Recognise tbd stubs from Dominyk Tiller (#202)\n    - Support for tcprewrite multiple IP CIDR (#199)\n    - Fix incorrect checksums after editing fragmented packets (#190)\n    - Option --loop=0 full wire wire speed after 1st pass (#172 #191)\n    - Big-endian tcpliveplay work-around from Brian Micek (#194)\n    - Build OS X using existing XCode SDK (#185)\n    - Update to autogen version 5.18.6 and libopts 46.0.16 (#182)\n    - netmap reports impossibly high capacity (#176)\n    - Duration feature from dexteradeus (#175)\n    - Stop sending and exit when limit is reached (#174)\n    - Extra packets sent with -L option (#173)\n    - Buffer overflow bug in tcpprep (#167)\n    - netmap optimizations (#93)\n\n12/17/2014 Version 4.1.0\n    - Do not build Quick TX modules on OS X (#164)\n    - Add a flag to customize netmap delay (#160)\n    - Fix some compile wwarnings (#159)\n    - Disabled QuickTX build by default (#157)\n    - Less verbose build (#154)\n    - Add a loop delay option (#125)\n    - CentOS 6.5 kernel panic on Quick TX init (#146)\n    - Fix libpcap not found on CentOS 7 (#145)\n    - Segfault in tcpliveplay on x86_64 (#132)\n    - Sometimes unable to interrupt with Ctrl-C (#129)\n\n10/08/2014 Version 4.1.0beta1\n    - Fix cross compiling (#140)\n    - Add Quick TX module for Linux (#136)\n\t- Better recovery for missing static libpcap libs (#128)\n\n09/05/2014 Version 4.0.5\n    - Fix build failure with latest netmap 11 (#123)\n    - Fix unable to use Zero Copy interfaces on PF_RING (#118)\n    - Corrected build for latest version of PF_RING (#81)\n    - Proper error message when vale is unconfigured (#113)\n    - Avoid a netmap module debug message (#110)\n    - Add missing header to distribution (#108)\n    - Make --netmap version agnostic (#106)\n    - Fix netmap hang in FreeBSD 11 (#103)\n    - Fix netmap hang if network cables unplugged (#96)\n    - Support for Vale Switch (#91)\n    - Prevent file retransmissions when selecting multiple files (#86)\n    - Fix max replay rate for all loops except first when omitting --mbps (#85)\n    - Add missing sanity check in libopt (#84)\n    - Seg fault on some IPv6 files when using -C option with tcprewrite (#83)\n    - Support for PF_RING DNA version of libpcap (#81)\n    - Fix segfault when using '-F pad' (#80)\n    - Disallow netmap on multiple interfaces (#79)\n    - Fix build for FreeBSD version 8.4 (#78)\n\n03/22/2014 Version 4.0.4\n    - Number of packets inaccurate when using --netmap method (#76)\n    - Unexpected packet counts with --loop and --cachefile enabled (#75)\n    - Improved error messages when interface is a file (#74)\n    - Missing interfaces with --listnics option (#67)\n    - Compile issue with netmap v10 and debugging (#66)\n    - Bad values with --stats and -t options (#65)\n\n02/04/2014 Version 4.0.3\n    - Fix build errors when ENABLE_VERBOSE is not set (#60)\n    - Build error on host without tcpdump (#59)\n\n01/17/2014 Version 4.0.2\n    - Fix hangs with --mbps command (#54)\n\n01/16/2014 Version 4.0.1\n    - Support for netmap version 10 API (#53)\n    - Remove deprecated \"absolute time\" for OS X (#52)\n    - Make dosleep() rentrant to support API concurrency (#51)\n    - Remove compiler warnings (#50)\n    - Fix slow netmap in Intel GigE \"igb\" server NICS (#49)\n\n01/05/2014 Version 4.0.0\n    - Implemented wiki page for 4.X - http://tcpreplay.appneta.com\n    - Support for ARM aarch64 (appneta #43)\n    - Add Juniper Encapsulated Ethernet DLT (appneta #42)\n    - Fixed seg fault on -K and --dualfile options (appneta #41)\n\n12/22/2013 Version 4.0.0beta2\n    - Restored -K option which somehow disappeared (appneta #35)\n    - Improve printing with small pcaps at high rates (appneta #34)\n    - Fixed build errors on BSD and Fedora 20 (appneta #32 #33)\n\n12/20/2013 Version 4.0.0beta1\n    - Compile and cross compile on ARM (appneta #26)\n    - Add flow statistics (appneta #23)\n    - Merge code cleanups from old 4.0alpha1 project (appneta #18)\n    - Deprecated file-cache option - use preload-pcap instead (appneta #17)\n    - Removed obsolete sleep-mode and sleep-accel options (appneta #16)\n    - Remove unreliable RDTSC option (appneta #16)\n    - Switch from BSD to GPLv3 license (appneta #5)\n    - Add --unique-ip option to tcpreplay (appneta #4)\n    - Removed sleep-accel option (appneta #2)\n    - Enhance accuracy and performance of --mbps option (appneta #2)\n    - Add netmap injector (appneta #1)\n    - Properly process IPv6 extension headers (#396)\n    - Update URL's to point to new tcpreplay website (#430)\n    - Improve & fix bugs in tcpcapinfo (#437)\n    - Fix statistics to be more industry standard (#443)\n    - Add --nofixcsum (#449)\n    - Fix compile failure under FreeBSD 9.0 (#450)\n    - Don't checksum packets before going through fragroute engine (#452)\n    - Add support for --maxsleep option to tcpreplay (#453)\n    - Fix segfault when rewriting multiple ports (#459)\n    - Fix bug with printing stats after CTRL-C (#482)\n    - Update autotools (#483)\n    - Don't recalculate UDP checksums if it's value is 0 (#490)\n    - Fix documentation of --efcs option to be 4, not 2 bytes (#495)\n    - Fix libdnet header detection under Debian distros (#499)\n    - Update GNU Autogen to 5.11.5 (#501)\n    - Fix --stats option for tcpreplay (#503)\n    - Add support for injecting directly via custom Linux kernel module (#505)\n    - Fix cidr code debugging (#506)\n    - Standardize on primary/secondary meaning of interfaces/tcpprep split (#507)\n\n08/15/2010 Version 3.4.5beta1\n    - First pass at fixing 'make test' on many little-endian systems (#429)\n    - Warn users when processing LINUX_SLL frames w/o an Ethernet source MAC (#434)\n    - Don't try to fragroute non-IPv4/v6 packets so we don't error out (#432)\n    - Initial Linux TX_RING sending support (#435)\n    - Update to GNU Autoconf 2.67 (#436)\n    - Add tcpcapinfo which dumps information about the pcap header/packets (#437)\n    - Add --dualfile support for replaying two files at the same time (#439)\n    - Fix bug where --tos=0 didn't do anything (#440)\n    - Fix crash when processing CIDR data (#441)\n\n04/04/2010 Version 3.4.4\n    - Set default timing method to either gtod or abstime (#404)\n    - Fix IPv6 parsing of CIDR's (#405)\n    - Add support for preloading the memory cache (#410)\n    - Generate more useful error when packets are too small (#411)\n    - Update to libopts/Autogen 5.9.9 (#412)\n    - Ship Win32Readme.txt file (#413)\n    - Update copyright notice to 2010 (#416)\n    - Dramatically enhance --portmap option (#417)\n    - Update autotools (#423)\n    - Add support for printing statistics periodically during the run (#424)\n    - Warn user when pcap snaplen < 65535 (#425)\n    - Add 802.1q processing support tcpprep (#428)\n\n06/25/2009: Version 3.4.3\n    - Link libnl when newer versions of libpcap require it (#397)\n    - Ship m4 directory (#398)\n    - Upgrade to latest autotools scripts (#400)\n    - Fix error message when running autogen.sh (#401)\n\n05/20/2009: Version 3.4.2\n    - Added extensive IPv6 support to tcprewrite & tcpreplay-edit (#11)\n    - Add IPv6 fragroute support (#388)\n    - Add IPv6 decoding support to tcpprep (#11)\n    - Fix compile time error in err.h (#390)\n    - Add --endpoints support in tcpreplay-edit (#393)\n\n02/18/2009: Version 3.4.1\n    - Sendpacket method did not match documentation (#361)\n    - Fix compile issue on systems without err.h (#363)\n    - Fix tcpprep --mac not processing non-IPv4 packets (#369)\n    - Always build tcpreplay w/ editing features as tcpreplay-edit (#372)\n    - Fix potential tcpbridge issues under OS X & *BSD (#373)\n    - Fix crash on 4 byte strictly aligned systems (#377)\n    - Add MTU truncation to tcprewrite/tcpreplay-edit (#379)\n\n01/15/2009: Version 3.4.0\n    - Add libdnet and remove libnet support for sending packets (#302)\n    - Fix numerous 802.11 decoder bugs (#325)\n    - Fix compile issue under Linux (#326)\n    - Fix Mbps/sec nonsense (#327)\n    - Fix tcprewrite crash when packets have no L3+ data (#328)\n    - Clean up err.c/err.h code and improve performance for non-debug builds (#331)\n    - Fix timesdiv() timer code (#332)\n    - Improve high-performance packet sending via multiple packets/interval (#334)\n    - Fix statistics report errors (#335)\n    - Fix BPF filters not being used in tcpbridge (#336)\n    - Improve tcpbridge performance (#337)\n    - Only use two libpcap handles for tcpbridge (#338)\n    - Fix autotools usage errors (#340)\n    - Clean up 'make test' results (#341)\n    - Update to AutoGen/AutoOpts 5.9.7 (#342)\n    - Fix compiler warnings from GCC 4.2 (#344)\n    - Fix numerous memory corruption bugs in libtcpedit DLT plugin code (#345)\n    - Add support for editing IPv4 TOS/DiffServ/ECN (#348)\n    - Update autotools to more recent versions (#349)\n    - Report injection method via -V (#352)\n    - Fix DLT_USER l2len check bug (#353)\n    - Replace man2html w/ groff (#354)\n    - Fix false pcap_inject() detection under Windows/Winpcap (#355)\n    - tcpbridge now builds under Win32/Cygwin\n    - libdnet is no longer an option for Win32/Cygwin (#57)\n    - tcpbridge now supports --listnics (#357)\n\n06/20/2008: Version 3.3.2\n    - Fix (again) tcpbridge --unidir assert error (#308)\n    - Fix tcpbridge bug where all packets that were sent were all zeros\n    - Fix tcpbridge not honoring --include/exclude flags (#311)\n    - Fix ip_in_cidr() debug messages (#312)\n    - Report packets which have timestamps which go backwards in time (#315)\n    - Clean up --sleep-accel code to use options struct (#316)\n    - Remove really old and out of date RPM .spec file (#317)\n    - Warn when sending on non-Ethernet interface (#318)\n    - Re-enable tcpreplay --listnics (#319)\n    - Fix sendpacket always reporting using PF_PACKET, even when it doesn't (#322)\n    - Fix major packet timing issue under old versions of glibc (#324)\n\n05/17/2008: Version 3.3.1\n    - Fix limitation of PF_PACKET only supporting Ethernet (#123)\n    - Fix (again) /dev/bpf detection in FreeBSD 8.0 (#292)\n    - Document building code from Subversion under Cygwin (#304)\n    - Fix --enable-force-* under Linux (#305)\n    - Fix tcpbridge --unidir assert error (#308)\n\n05/04/2008: Version 3.3.0\n    - Improve tcpreplay timing accuracy between packets (#41)\n    - Add tcprewrite fragroute support (#42)\n    - Fix tcprewrite --efcs option (#277)\n    - Updated Win32/Cygwin documentation (#280)\n    - Add dmalloc support (#282)\n    - Fix tcpprep broken handling of VLAN tagged frames (#290)\n    - Fix tcprewrite crash when cache file has NO_SEND packets (#291)\n    - Fix /dev/bpf detection in FreeBSD 8.0 (#292)\n    - Add tcprewrite --ttl editing option (#294)\n    - Fix autoconf AM_PROG_CC_C_O warning (#295)\n    - Add tcpprep --reverse option to split by matching client addresses (#297)\n    - Update version of autoconf to 1.10.1 (#298)\n    - Improved GNU Autogen detection and warnings (#299)\n    - Track EAGAIN errors separately from ENOBUFS (#301)\n    - Automatically detect Winpcap on Cygwin (#303)\n\n01/23/2008: Version 3.2.5\n    - Fix linker error with --enable-tcpreplay-edit and --enable-dynamic-link (#288)\n    - Fix compile errors with Sun Studio compiler (#286)\n\n01/16/2008: Version 3.2.4\n    - Fix crash in tcpreplay when --enable-tcpreplay-edit (#281)\n    - Display if --enable-tcpreplay-edit in -V (#283)\n\n11/01/2007: Version 3.2.3\n    - Fix compile issue under Linux and other OS's (#275)\n\n10/31/2007: Version 3.2.2\n    - Enable source MAC spoofing for OS X (#142, #151)\n        * Tcpreplay now requires OS X 10.5 (Leopard)\n    - Fix crash/memory access error with tcpreplay -N (#273)\n\n10/25/2007: Version 3.2.1\n    - Fix tcprewrite segfault in 'make test' under Linux (#200)\n    - Major performance improvement in tcpprep for large pcaps (#261)\n    - Fix strsignal already defined error under Cygwin/Windows (#199)\n    - Fix compile errors for older versions of GCC (#201)\n    - Remove flowreplay code (#262)\n    - Fix DLT rewrite code causing corrupted ethernet protocol type (#268)\n    - Try to fix inet_aton() issue under Solaris (#260)\n\n08/26/2007: Version 3.2\n    - Return a more useful error message when tcpprep fails (#187)\n    - Add Tomahawk test tool client/server detection algorithm (#186)\n    - Improved AutoGen support (#191)\n    - Improved documentation (#164, #198)\n    - Added Doxygen markup (#176)\n    - configure now honors --with-tcpdump flag (#192)\n    - configure now defaults to --enable-64bits which breaks backwards\n        compatibility in certain situations.  Use --disable-64bits if this\n        concerns you (#195)\n    - Use safe_free() to detect bugs earlier in development (#197)\n\n07/19/2007: Version 3.1.1\n    - Upgrade libopts tearoff to 29:0:4 so that everyone else in the world can\n      compile tcpreplay (#189)\n\n07/18/2007: Version 3.1.0\n    - Add tcprewrite --srcmap & --dstmap for rewriting only source or destination IP's (#185)\n    - ./configure now reports configuration at end (#155)\n    - Fix svn:keywords (#160)\n    - Optimize performance of dlt_en10mb plugin (#161)\n    - Performance improvements on strictly aligned systems (#162)\n    - Improve tcpprep error messages and handling (#163)\n    - Add support for warnings in libtcpedit (#165)\n    - Only use __attribute__((unused)) w/ GCC (#168)\n    - Fix compile issues under Solaris (#178)\n    - Gracefully handle systems w/o static libraries (#179)\n    - Fix segfault when using BPF filters (#182)\n    - Add additional DLT Plugins:\n        - 802.11 (#103)\n        - 802.11 w/ Radiotap (#177)\n\n05/01/2007: Version 3.0.1\n    - Stop tcpreplay causing OS X WiFi from disassociating (#167)\n    - --pnat incorrectly matched all IP addresses (#170)\n    - Fix serious memory leak in core common library (#175)\n    - Fix tcprewrite --enet-vlan on little endian systems (#174)\n    - Bad pcap timestamps were causing excessive delays (#169)\n    - Code cleanup (#173)\n\n04/20/2007: Version 3.0\n    - By default, no longer try to use libnet.  You must now specify --enable-libnet (#148)\n    - Improve documentation (#30)\n    - General code cleanup (#47)\n    - Warn when GNU Autogen version < 5.9 (#153)\n    - Remove support for pcap_snapshot_override which was never added to libpcap (#140)\n    - Fix support for C99/GCC 4.3 \"inline\".  Rely on -O3 for better performance. (#149)\n    - Prioritize 64 bit libraries over 32 bit counterparts (#150)\n\n04/14/2007: Version 3.0.RC1\n    - Fix tcpbridge and make it compile by default (#15)\n    - Fix tcprewrite crash on little-endian systems (#127)\n    - Gracefully handle broken pcap files where the snaplen < caplen (#130)\n        - Note: Fix was made in libpcap and will be part of 0.9.6\n    - Fix numerous bugs with the sendpacket code (#137)\n    - Add optional support for editing packets with tcpreplay (#61)\n    - Fix 'make test' on little endian systems (#64)\n    - tcprewrite -s is no longer endian dependent (#65)\n    - /docs cleaned up (#66)\n    - Fix detection/compile of libpcap.  Now support versions >= 0.7.2 (#80, #144)\n    - Add official support Cygwin/Win32 support (#110)\n    - Clean up libpcap version code (#111)\n    - Add support for interface alias names for Win32 (#113)\n    - Warn user on DLT miss-match (#125)\n    - Fix tcprewrite segfault with --fixlen=pad (#134)\n    - Add loop/cache support for better performance (#136)\n    - inline debugging code for better performance (#138)\n    - configure now supports selecting injection method (#139)\n    - Fix configure/compile errors under OpenBSD (#146)\n    - Add tcpbridge --verbose mode (#28)\n    - Fix compile issues under HP-UX & strictly aligned systems (#141)\n    - --enable-dynamic-link supports 64bit libraries (#143)\n\n\n03/22/2007: Version 3.0.beta13\n    - Fixed detection of IPv4 packets in libtcpedit on little-endian boxes (#115, #116)\n    - Fixed TCP/UDP checksum calculation on little-endian boxes (#126)\n    - Added --quiet flag to tcpreplay for Lothar (#109)\n    - The --seed flag should now generate the same IPs on both little-endian & big-endian boxes (#65)\n    - The --skipl2broadcast flag now works as documented (#112)\n    - Adding L2 header for DLT_RAW encapsulated packets now works (#16)\n    - Clean up documentation (#66, #75)\n    - Start initial support for Win32 port (#110, #111)\n    - Finish DLT plugin rewrite (#82)\n    - Fix compile on systems without tcpdump installed\n\n02/22/2007: Version 3.0.beta12\n    - Fix compile under RH ES 3.x (gcc 3.2.2) (#79)\n    - Fix compile on MIPS, ARM, HPPA, etc (#81, #88)\n    - Rewrite L2/DLT code in tcpedit/tcprewrite to be plugin based (#82)\n        - Create Ethernet Plugin (#99)\n        - Create User Plugin (#100)\n        - Create Cisco HDLC Plugin (#101)\n        - Create DLT_LINUX_SLL Plugin (#102)\n        - Create DLT_RAW Plugin (#104)\n        - Create DLT_NULL Plugin (#105)\n        - Create DLT_LOOP Plugin (#106)\n    - Properly decode ethernet frames when they are VLAN tagged (#84)\n    - Do not install man2html (#85)\n    - Add configure --disable-libopts-install option (#86)\n    - Enhance tcpreplay --oneatatime (#90)\n    - libtcpedit can now return warnings & errors (#92)\n    - Fix tcpprep --include/exclude (#96)\n    - Upgrade AutoGen tearoff (libopts) to latest version (5.9.0) (#97)\n    - Don't do L4 checksums for non-fragment offset == 0 (#107)\n\n08/07/2006: Version 3.0.beta11\n    - Fix distribution to ship missing src/tcpr.h (#73)\n    - Add support to tcprewrite to alter output file DLT (#74)\n    - Fix errors in 'make test' (little endian still broken) (#77)\n    - Tweak Autogen .def files documentation (#78)\n\n08/05/2006: Version 3.0.beta10\n    - tcpprep & tcprewrite no longer require root access (#3)\n    - Develop wrapper API for libnet, libpcap, BPF and PF_PACKET (#4, #24)\n    - Enhance do_sleep() to support looping for better accuracy (#6)\n    - Prefer inet_pton over older, deprecated routines (#26)\n    - Remove libnet as a requirement (#29)\n    - Optionally don't rewrite broadcast/multicast IP/MAC addresses (#38)\n    - Remove libnids dependancy for flowreplay  (#55)\n    - Fix build issues when libpcapnav is installed (#56)\n    - Fix truncate feature not putting correct packet length in IP header (#59)\n    - Internal error reporting fixes in libtcpedit (#60)\n    - Support --enable-debug when building under gcc 3.x (#62)\n    - tcpedit_stub.h wasn't being generated automatically from SVN (#63)\n    - Fix 'make doxygen' (#67)\n    - Fix some Makefile issues (#68)\n    - tcprewrite --endpoints should require a cache file (#70)\n    - Improve IP randomizer code to be more random (#71)\n\n07/17/2006: Version 3.0.beta9\n    - Fix compile issue for users not having AutoOpts installed (#54)\n    - Fix compile issue for users w/ AutoOpts 5.8.4 (upgrade to 5.8.4)\n\n07/16/2006: Version 3.0.beta8\n    - Fix -M running in MBps rather then Mbps\n    - Fix tcpbridge segfault/bus error reported by Steven Z. (Gerry)\n    - Improve tcpbridge man page\n    - Massive tcprewrite fixes & cleanup (#50)\n    - Much improved README document\n    - Reorganize packet editing code into a standalone module (tcpedit)\n          which has been librarized. (#5)\n    - Strict code cleanup (#27)\n    - Fix tcpprep from generating bad cache files (#48)\n    - Add MAC split mode for tcpprep (#1)\n    - Improve dbg() to list file/line (#32)\n    - Add tcpprep statistical reports (#2)\n    - Reorganize flowreplay code (#46)\n    - Fix conflicting speed_t for Debian (#33)\n    - Too many other things to document\n\n08/07/2005: Version 3.0.beta7\n    - New 'make doxygen' target builds pretty source code docs in\n          docs/web/doxygen/html\n    - Fix tcpprep auto/router mode which was sending all packets out the\n          secondary interface\n    - Fix endian issue on little-endian systems which made tcpprep think all\n          packets were not IP\n    - Improve debugability of tcpprep\n    - Fix UDP header offset bug in flowreplay\n\n06/28/2005: Version 3.0.beta6\n    - Fix rpm .spec file which was still based on tcpreplay 2.x (untested)\n    - Detect and manually include pcap-bpf.h which fixes compile problem\n    - Fix tcprewrite -S crash with only one MAC\n    - Fix tcpreplay using 2nd NIC split mode\n    - Fix tcpreplay packet counter initialization\n    - Fix tcpprep to properly handle missing -i and -c with -I and -P\n\n06/14/2005: Version 3.0.beta5\n    - Fix --decode flag\n    - Fix compile under AMD64/RHEL4 where libraries are in /usr/lib64\n    - tarball now ships with a full test subdir\n    - Fix compile of src/common/get.c under strictly aligned architectures\n    - Fix ./configure --enable-64bits flag\n    - Fix bug on little endian systems which prevented tcprewrite from\n      editing packets\n    - Fix tcprewrite linktype checks\n    - Add --pktlen for when the pcap snaplen lies to us\n    - Add --enable-dynamic-link for those who want to dynamically link their\n      libs\n\n06/05/2005: Version 3.0.beta4\n    - Really fix compile problems with dlt2desc with old versions of libpcap\n    - All libraries are now statically linked and full-path #includes.  This\n      should fix problems with people who have different versions of\n      libraries installed in different locations.\n    - Fix problems compiling on systems with libpcapnav\n    - Add support for libpcap 0.5 such as on OpenBSD\n    - Fix tcpprep --verbose\n    - Close STDIN prior to re-opening it for certain OS's\n\n05/04/2005: Version 3.0.beta3\n    - Fix autoconf problems with --with-libnet\n    - Fix compile problems with dlt2desc with old versions of libpcap\n    - Fix compile problem due to not shipping flowreplay_opts.h and\n      tcpbridge_opts.h\n\n04/19/2005: Version 3.0.beta2\n    - Significant improvements to FAQ and manual\n    - Use autoopts for flowreplay\n    - Be more cautious about memcpy's\n    - Fix numerous warnings during compile\n    - Allow overriding L2 protocol field for DLT_RAW\n    - tcpprep -I & -P now take the cache filename\n    - Lots of cleanup\n    - Added tcpbridge utility\n    - Fix tcpreplay --mbps which was being interpreted as bps\n    - Add --no-arg-comment feature for tcpprep\n    - Improve auto-tests and fix old broken ones\n    - Fix Makefile errors in the docs directory\n    - Upgrade libopts tear off to v5.7pre12 which fixes problems with\n      loading config files\n    - Add support for forcing the use of the local libopts tearoff code\n\n02/27/2005: Version 3.0.beta1\n    - Major code cleanups and rewriting\n      - Rip out all edit functions from tcpreplay and put into tcprewrite\n      - Improve tcpreplay performance by about 5% for raw sending\n      - Move around utility functions for greater code-reuse\n      - Move MAC Address funcs into mac.c\n      - Move global defines into defines.h\n      - Standardize use of structs and typedefs\n      - Start passing const's when we don't need to modify\n    - Start using GNU AutoOpts for arg/config file processing\n    - Start using automake and autoheader\n    - Major rewrite of configure.in\n    - Add support for printing which interface packets go out\n    - 64bit counters are optional via --enable-64bits\n    - Can now rewrite L2 data per outbound interface\n    - Add support for additional DLT types\n\n    - Non-Code changes\n      - I now own the full copyright for tcpreplay\n      - Removed the evil 4th clause from the BSD license\n      - Start updating the FAQ and split some content to make a manual\n      - Automatically generate man pages based via autogen\n\n    - New Applications:\n      - tcprewrite\n\n    - Removed Applications: (Ethereal has better utilities)\n      - capinfo\n      - pcapmerge\n\n    - Merge fixes from 2.x/stable branch:\n      - portmap.c endian bugs\n      - edit_packet.c handle corrupted pcap's where caplen < len\n      - configure now properly uses --with-libnet and --with-libpcap\n\n*** Fork 3.x Branch from v2.3.1 ***\n", "/* $Id$ */\n\n/*\n *   Copyright (c) 2001-2012 Aaron Turner <aturner at synfin dot net>\n *   Copyright (c) 2013-2016 Fred Klassen <tcpreplay at appneta dot com> - AppNeta\n *\n *   The Tcpreplay Suite of tools is free software: you can redistribute it \n *   and/or modify it under the terms of the GNU General Public License as \n *   published by the Free Software Foundation, either version 3 of the \n *   License, or with the authors permission any later version.\n *\n *   The Tcpreplay Suite is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License\n *   along with the Tcpreplay Suite.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"config.h\"\n#include \"defines.h\"\n#include \"common.h\"\n\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/uio.h>\n#include <unistd.h>\n#include <pcap.h>\n#include <sys/stat.h>\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <inttypes.h>\n\n#define __STDC_FORMAT_MACROS 1\n#include <inttypes.h>\n\n#include \"tcpcapinfo_opts.h\"\n\nstatic int do_checksum_math(u_int16_t *data, int len);\n\n#ifdef DEBUG\nint debug = 0;\n#endif\n\n#ifdef WORDS_BIGENDIAN\nchar is_swapped[] = \"little-endian\";\nchar is_not_swapped[] = \"big-endian\";\n#else\nchar is_not_swapped[] = \"little-endian\";\nchar is_swapped[] = \"big-endian\";\n#endif\n\nint read_packet(int fd, uint32_t len, char *fname);\n\n/*\n * Standard libpcap format.\n */\n#define TCPDUMP_MAGIC           0xa1b2c3d4\n\n/*\n * Alexey Kuznetzov's modified libpcap format.\n */\n#define KUZNETZOV_TCPDUMP_MAGIC 0xa1b2cd34\nstruct pcap_timeval {\n    bpf_int32 tv_sec;           /* seconds */\n    bpf_int32 tv_usec;          /* microseconds */\n};\nstruct pcap_sf_patched_pkthdr {\n    struct pcap_timeval ts;     /* time stamp */\n    bpf_u_int32 caplen;         /* length of portion present */\n    bpf_u_int32 len;            /* length this packet (off wire) */\n    int         index;\n    unsigned short protocol;\n    unsigned char pkt_type;\n};\n\n/*\n * Reserved for Francisco Mesquita <francisco.mesquita@radiomovel.pt>\n * for another modified format.\n */\n#define FMESQUITA_TCPDUMP_MAGIC 0xa1b234cd\n\n/*\n * Navtel Communcations' format, with nanosecond timestamps,\n * as per a request from Dumas Hwang <dumas.hwang@navtelcom.com>.\n */\n#define NAVTEL_TCPDUMP_MAGIC    0xa12b3c4d\n\n/*\n * Normal libpcap format, except for seconds/nanoseconds timestamps,\n * as per a request by Ulf Lamping <ulf.lamping@web.de>\n */\n#define NSEC_TCPDUMP_MAGIC      0xa1b23c4d\n\n\nint\nmain(int argc, char *argv[])\n{\n    int i, fd, swapped, pkthdrlen, ret, optct, backwards, caplentoobig;\n    struct pcap_file_header pcap_fh;\n    struct pcap_pkthdr pcap_ph;\n    struct pcap_sf_patched_pkthdr pcap_patched_ph; /* Kuznetzov */\n    char buf[10000];\n    struct stat statinfo;\n    uint64_t pktcnt;\n    uint32_t readword;\n    int32_t last_sec, last_usec, caplen;\n\n    optct = optionProcess(&tcpcapinfoOptions, argc, argv);\n    argc -= optct;\n    argv += optct;\n\n#ifdef DEBUG\n    if (HAVE_OPT(DBUG))\n        debug = OPT_VALUE_DBUG;\n#endif\n\n    for (i = 0; i < argc; i++) {\n        dbgx(1, \"processing:  %s\\n\", argv[i]);\n        if ((fd = open(argv[i], O_RDONLY)) < 0)\n            errx(-1, \"Error opening file %s: %s\", argv[i], strerror(errno));\n\n        if (fstat(fd, &statinfo) < 0)\n            errx(-1, \"Error getting file stat info %s: %s\", argv[i], strerror(errno));\n\n        printf(\"file size   = %\"PRIu64\" bytes\\n\", (uint64_t)statinfo.st_size);\n\n        if ((ret = read(fd, &buf, sizeof(pcap_fh))) != sizeof(pcap_fh))\n            errx(-1, \"File too small.  Unable to read pcap_file_header from %s\", argv[i]);\n\n        dbgx(3, \"Read %d bytes for file header\", ret);\n\n        swapped = 0;\n\n        memcpy(&pcap_fh, &buf, sizeof(pcap_fh));\n\n        pkthdrlen = 16; /* pcap_pkthdr isn't the actual on-disk format for 64bit systems! */\n\n        switch (pcap_fh.magic) {\n            case TCPDUMP_MAGIC:\n            printf(\"magic       = 0x%08\"PRIx32\" (tcpdump) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(TCPDUMP_MAGIC):\n            printf(\"magic       = 0x%08\"PRIx32\" (tcpdump/swapped) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            case KUZNETZOV_TCPDUMP_MAGIC:\n            pkthdrlen = sizeof(pcap_patched_ph);\n            printf(\"magic       = 0x%08\"PRIx32\" (Kuznetzov) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(KUZNETZOV_TCPDUMP_MAGIC):\n            pkthdrlen = sizeof(pcap_patched_ph);\n            printf(\"magic       = 0x%08\"PRIx32\" (Kuznetzov/swapped) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            case FMESQUITA_TCPDUMP_MAGIC:\n            printf(\"magic       = 0x%08\"PRIx32\" (Fmesquita) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(FMESQUITA_TCPDUMP_MAGIC):\n            printf(\"magic       = 0x%08\"PRIx32\" (Fmesquita) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            case NAVTEL_TCPDUMP_MAGIC:\n            printf(\"magic       = 0x%08\"PRIx32\" (Navtel) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(NAVTEL_TCPDUMP_MAGIC):\n            printf(\"magic       = 0x%08\"PRIx32\" (Navtel/swapped) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            case NSEC_TCPDUMP_MAGIC:\n            printf(\"magic       = 0x%08\"PRIx32\" (Nsec) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(NSEC_TCPDUMP_MAGIC):\n            printf(\"magic       = 0x%08\"PRIx32\" (Nsec/swapped) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            default:\n            printf(\"magic       = 0x%08\"PRIx32\" (unknown)\\n\", pcap_fh.magic);\n        }\n\n        if (swapped == 1) {\n            pcap_fh.version_major = SWAPSHORT(pcap_fh.version_major);\n            pcap_fh.version_minor = SWAPSHORT(pcap_fh.version_minor);\n            pcap_fh.thiszone = SWAPLONG(pcap_fh.thiszone);\n            pcap_fh.sigfigs = SWAPLONG(pcap_fh.sigfigs);\n            pcap_fh.snaplen = SWAPLONG(pcap_fh.snaplen);\n            pcap_fh.linktype = SWAPLONG(pcap_fh.linktype);\n        }\n\n        printf(\"version     = %hu.%hu\\n\", pcap_fh.version_major, pcap_fh.version_minor);\n        printf(\"thiszone    = 0x%08\"PRIx32\"\\n\", pcap_fh.thiszone);\n        printf(\"sigfigs     = 0x%08\"PRIx32\"\\n\", pcap_fh.sigfigs);\n        printf(\"snaplen     = %\"PRIu32\"\\n\", pcap_fh.snaplen);\n        printf(\"linktype    = 0x%08\"PRIx32\"\\n\", pcap_fh.linktype);\n\n        if (pcap_fh.version_major != 2 && pcap_fh.version_minor != 4) {\n            printf(\"Sorry, we only support file format version 2.4\\n\");\n            close(fd);\n            continue;\n        }\n\n        dbgx(5, \"Packet header len: %d\", pkthdrlen);\n\n        if (pkthdrlen == 24) {\n            printf(\"Packet\\tOrigLen\\t\\tCaplen\\t\\tTimestamp\\t\\tIndex\\tProto\\tPktType\\tPktCsum\\tNote\\n\");\n        } else {\n            printf(\"Packet\\tOrigLen\\t\\tCaplen\\t\\tTimestamp\\tCsum\\tNote\\n\");\n        }\n\n        pktcnt = 0;\n        last_sec = 0;\n        last_usec = 0;\n        while ((ret = read(fd, &buf, pkthdrlen)) == pkthdrlen) {\n            pktcnt ++;\n            backwards = 0;\n            caplentoobig = 0;\n            dbgx(3, \"Read %d bytes for packet %\"PRIu64\" header\", ret, pktcnt);\n\n            memset(&pcap_ph, 0, sizeof(pcap_ph));\n\n            /* see what packet header we're using */\n            if (pkthdrlen == sizeof(pcap_patched_ph)) {\n                memcpy(&pcap_patched_ph, &buf, sizeof(pcap_patched_ph));\n\n                if (swapped == 1) {\n                    dbg(3, \"Swapping packet header bytes...\");\n                    pcap_patched_ph.caplen = SWAPLONG(pcap_patched_ph.caplen);\n                    pcap_patched_ph.len = SWAPLONG(pcap_patched_ph.len);\n                    pcap_patched_ph.ts.tv_sec = SWAPLONG(pcap_patched_ph.ts.tv_sec);\n                    pcap_patched_ph.ts.tv_usec = SWAPLONG(pcap_patched_ph.ts.tv_usec);\n                    pcap_patched_ph.index = SWAPLONG(pcap_patched_ph.index);\n                    pcap_patched_ph.protocol = SWAPSHORT(pcap_patched_ph.protocol);\n                }\n                printf(\"%\"PRIu64\"\\t%4\"PRIu32\"\\t\\t%4\"PRIu32\"\\t\\t%\"\n                        PRIx32\".%\"PRIx32\"\\t\\t%4\"PRIu32\"\\t%4hu\\t%4hhu\", \n                        pktcnt, pcap_patched_ph.len, pcap_patched_ph.caplen, \n                        pcap_patched_ph.ts.tv_sec, pcap_patched_ph.ts.tv_usec,\n                        pcap_patched_ph.index, pcap_patched_ph.protocol, pcap_patched_ph.pkt_type);\n\n                if (pcap_fh.snaplen < pcap_patched_ph.caplen) {\n                    caplentoobig = 1;\n                }\n\n                caplen = pcap_patched_ph.caplen;\n\n            } else {\n                /* manually map on-disk bytes to our memory structure */\n                memcpy(&readword, buf, 4);\n                pcap_ph.ts.tv_sec = readword;\n                memcpy(&readword, &buf[4], 4);\n                pcap_ph.ts.tv_usec = readword;\n                memcpy(&pcap_ph.caplen, &buf[8], 4);\n                memcpy(&pcap_ph.len, &buf[12], 4);\n\n                if (swapped == 1) {\n                    dbg(3, \"Swapping packet header bytes...\");\n                    pcap_ph.caplen = SWAPLONG(pcap_ph.caplen);\n                    pcap_ph.len = SWAPLONG(pcap_ph.len);\n                    pcap_ph.ts.tv_sec = SWAPLONG(pcap_ph.ts.tv_sec);\n                    pcap_ph.ts.tv_usec = SWAPLONG(pcap_ph.ts.tv_usec);\n                }\n                printf(\"%\"PRIu64\"\\t%4\"PRIu32\"\\t\\t%4\"PRIu32\"\\t\\t%\"\n                        PRIx32\".%\"PRIx32,\n                        pktcnt, pcap_ph.len, pcap_ph.caplen, \n                        (unsigned int)pcap_ph.ts.tv_sec, (unsigned int)pcap_ph.ts.tv_usec);\n                if (pcap_fh.snaplen < pcap_ph.caplen) {\n                    caplentoobig = 1;\n                }\n                caplen = pcap_ph.caplen;\n            }\n\n            /* check to make sure timestamps don't go backwards */\n            if (last_sec > 0 && last_usec > 0) {\n                if ((pcap_ph.ts.tv_sec == last_sec) ? \n                        (pcap_ph.ts.tv_usec < last_usec) : \n                        (pcap_ph.ts.tv_sec < last_sec)) {\n                    backwards = 1;\n                }\n            }\n            if (pkthdrlen == sizeof(pcap_patched_ph)) {\n                last_sec = pcap_patched_ph.ts.tv_sec;\n                last_usec = pcap_patched_ph.ts.tv_usec;\n            } else {\n                last_sec = pcap_ph.ts.tv_sec;\n                last_usec = pcap_ph.ts.tv_usec;\n            }\n\n            /* read the frame */\n            if ((ret = read(fd, &buf, caplen)) != caplen) {\n                if (ret < 0) {\n                    printf(\"Error reading file: %s: %s\\n\", argv[i], strerror(errno));\n                } else {\n                    printf(\"File truncated!  Unable to jump to next packet.\\n\");\n                }\n\n                close(fd);\n                continue;\n            }\n\n            /* print the frame checksum */\n            printf(\"\\t%x\\t\", do_checksum_math((u_int16_t *)buf, caplen));\n\n            /* print the Note */\n            if (! backwards && ! caplentoobig) {\n                printf(\"OK\\n\");\n            } else if (backwards && ! caplentoobig) {\n                printf(\"BAD_TS\\n\");\n            } else if (caplentoobig && ! backwards) {\n                printf(\"TOOBIG\\n\");\n            } else if (backwards && caplentoobig) {\n                printf(\"BAD_TS|TOOBIG\");\n            } \n\n        }\n\n    }\n\n    exit(0);\n\n}\n\n/**\n * code to do a ones-compliment checksum\n */\nstatic int\ndo_checksum_math(u_int16_t *data, int len)\n{\n    int sum = 0;\n    union {\n        u_int16_t s;\n        u_int8_t b[2];\n    } pad;\n\n    while (len > 1) {\n        sum += *data++;\n        len -= 2;\n    }\n\n    if (len == 1) {\n        pad.b[0] = *(u_int8_t *)data;\n        pad.b[1] = 0;\n        sum += pad.s;\n    }\n\n    return (sum);\n}\n\n"], "fixing_code": ["02/26/2017 Version 4.2.0beta1\n    - tcpcapinfo buffer overflow vulnerablily (#278)\n    - Update git-clone instructions by Kyle McDonald (#277) \n    - Add protection against packet drift by Guillaume Scott (#268)\n    - Include Travis-CI build support by Ilya Shipitsin (#264) (#285)\n\n11/19/2016 Version 4.1.2\n    - Fix compilation with musl C library (#260)\n    - Support parallel builds (#259)\n    - Give user CFLAGS precedence (#256)\n    - Properly detect Brew install when Xcode is not available (#254)\n    - Increase max packet size to 65549 (#251)\n    - Handle IP headers with zero length (#247)\n\n01/11/2016 Version 4.1.1\n    - Improve --pps accuracy and performance (#236)\n    - Option --unique-ip accepts --duration (#227)\n    - RFC1624 incremental checksums (#225)\n    - Option --duration performance optimizations (#223)\n    - Correct company name in license (#217)\n    - Compile and mult-arch cross-compile on ARM (#211)\n    - Switch to wire speed after 30 minutes at 6 Gbps (#210)\n    - Tap device support for Linux and FreeBSD from Murat Demirten (#207)\n    - Handle loopback for linux cooked capture files from corentin-p1(Linux SLL) (#204)\n    - Master doesn't compile on OS X 10.11 (#203)\n    - Recognise tbd stubs from Dominyk Tiller (#202)\n    - Support for tcprewrite multiple IP CIDR (#199)\n    - Fix incorrect checksums after editing fragmented packets (#190)\n    - Option --loop=0 full wire wire speed after 1st pass (#172 #191)\n    - Big-endian tcpliveplay work-around from Brian Micek (#194)\n    - Build OS X using existing XCode SDK (#185)\n    - Update to autogen version 5.18.6 and libopts 46.0.16 (#182)\n    - netmap reports impossibly high capacity (#176)\n    - Duration feature from dexteradeus (#175)\n    - Stop sending and exit when limit is reached (#174)\n    - Extra packets sent with -L option (#173)\n    - Buffer overflow bug in tcpprep (#167)\n    - netmap optimizations (#93)\n\n12/17/2014 Version 4.1.0\n    - Do not build Quick TX modules on OS X (#164)\n    - Add a flag to customize netmap delay (#160)\n    - Fix some compile wwarnings (#159)\n    - Disabled QuickTX build by default (#157)\n    - Less verbose build (#154)\n    - Add a loop delay option (#125)\n    - CentOS 6.5 kernel panic on Quick TX init (#146)\n    - Fix libpcap not found on CentOS 7 (#145)\n    - Segfault in tcpliveplay on x86_64 (#132)\n    - Sometimes unable to interrupt with Ctrl-C (#129)\n\n10/08/2014 Version 4.1.0beta1\n    - Fix cross compiling (#140)\n    - Add Quick TX module for Linux (#136)\n\t- Better recovery for missing static libpcap libs (#128)\n\n09/05/2014 Version 4.0.5\n    - Fix build failure with latest netmap 11 (#123)\n    - Fix unable to use Zero Copy interfaces on PF_RING (#118)\n    - Corrected build for latest version of PF_RING (#81)\n    - Proper error message when vale is unconfigured (#113)\n    - Avoid a netmap module debug message (#110)\n    - Add missing header to distribution (#108)\n    - Make --netmap version agnostic (#106)\n    - Fix netmap hang in FreeBSD 11 (#103)\n    - Fix netmap hang if network cables unplugged (#96)\n    - Support for Vale Switch (#91)\n    - Prevent file retransmissions when selecting multiple files (#86)\n    - Fix max replay rate for all loops except first when omitting --mbps (#85)\n    - Add missing sanity check in libopt (#84)\n    - Seg fault on some IPv6 files when using -C option with tcprewrite (#83)\n    - Support for PF_RING DNA version of libpcap (#81)\n    - Fix segfault when using '-F pad' (#80)\n    - Disallow netmap on multiple interfaces (#79)\n    - Fix build for FreeBSD version 8.4 (#78)\n\n03/22/2014 Version 4.0.4\n    - Number of packets inaccurate when using --netmap method (#76)\n    - Unexpected packet counts with --loop and --cachefile enabled (#75)\n    - Improved error messages when interface is a file (#74)\n    - Missing interfaces with --listnics option (#67)\n    - Compile issue with netmap v10 and debugging (#66)\n    - Bad values with --stats and -t options (#65)\n\n02/04/2014 Version 4.0.3\n    - Fix build errors when ENABLE_VERBOSE is not set (#60)\n    - Build error on host without tcpdump (#59)\n\n01/17/2014 Version 4.0.2\n    - Fix hangs with --mbps command (#54)\n\n01/16/2014 Version 4.0.1\n    - Support for netmap version 10 API (#53)\n    - Remove deprecated \"absolute time\" for OS X (#52)\n    - Make dosleep() rentrant to support API concurrency (#51)\n    - Remove compiler warnings (#50)\n    - Fix slow netmap in Intel GigE \"igb\" server NICS (#49)\n\n01/05/2014 Version 4.0.0\n    - Implemented wiki page for 4.X - http://tcpreplay.appneta.com\n    - Support for ARM aarch64 (appneta #43)\n    - Add Juniper Encapsulated Ethernet DLT (appneta #42)\n    - Fixed seg fault on -K and --dualfile options (appneta #41)\n\n12/22/2013 Version 4.0.0beta2\n    - Restored -K option which somehow disappeared (appneta #35)\n    - Improve printing with small pcaps at high rates (appneta #34)\n    - Fixed build errors on BSD and Fedora 20 (appneta #32 #33)\n\n12/20/2013 Version 4.0.0beta1\n    - Compile and cross compile on ARM (appneta #26)\n    - Add flow statistics (appneta #23)\n    - Merge code cleanups from old 4.0alpha1 project (appneta #18)\n    - Deprecated file-cache option - use preload-pcap instead (appneta #17)\n    - Removed obsolete sleep-mode and sleep-accel options (appneta #16)\n    - Remove unreliable RDTSC option (appneta #16)\n    - Switch from BSD to GPLv3 license (appneta #5)\n    - Add --unique-ip option to tcpreplay (appneta #4)\n    - Removed sleep-accel option (appneta #2)\n    - Enhance accuracy and performance of --mbps option (appneta #2)\n    - Add netmap injector (appneta #1)\n    - Properly process IPv6 extension headers (#396)\n    - Update URL's to point to new tcpreplay website (#430)\n    - Improve & fix bugs in tcpcapinfo (#437)\n    - Fix statistics to be more industry standard (#443)\n    - Add --nofixcsum (#449)\n    - Fix compile failure under FreeBSD 9.0 (#450)\n    - Don't checksum packets before going through fragroute engine (#452)\n    - Add support for --maxsleep option to tcpreplay (#453)\n    - Fix segfault when rewriting multiple ports (#459)\n    - Fix bug with printing stats after CTRL-C (#482)\n    - Update autotools (#483)\n    - Don't recalculate UDP checksums if it's value is 0 (#490)\n    - Fix documentation of --efcs option to be 4, not 2 bytes (#495)\n    - Fix libdnet header detection under Debian distros (#499)\n    - Update GNU Autogen to 5.11.5 (#501)\n    - Fix --stats option for tcpreplay (#503)\n    - Add support for injecting directly via custom Linux kernel module (#505)\n    - Fix cidr code debugging (#506)\n    - Standardize on primary/secondary meaning of interfaces/tcpprep split (#507)\n\n08/15/2010 Version 3.4.5beta1\n    - First pass at fixing 'make test' on many little-endian systems (#429)\n    - Warn users when processing LINUX_SLL frames w/o an Ethernet source MAC (#434)\n    - Don't try to fragroute non-IPv4/v6 packets so we don't error out (#432)\n    - Initial Linux TX_RING sending support (#435)\n    - Update to GNU Autoconf 2.67 (#436)\n    - Add tcpcapinfo which dumps information about the pcap header/packets (#437)\n    - Add --dualfile support for replaying two files at the same time (#439)\n    - Fix bug where --tos=0 didn't do anything (#440)\n    - Fix crash when processing CIDR data (#441)\n\n04/04/2010 Version 3.4.4\n    - Set default timing method to either gtod or abstime (#404)\n    - Fix IPv6 parsing of CIDR's (#405)\n    - Add support for preloading the memory cache (#410)\n    - Generate more useful error when packets are too small (#411)\n    - Update to libopts/Autogen 5.9.9 (#412)\n    - Ship Win32Readme.txt file (#413)\n    - Update copyright notice to 2010 (#416)\n    - Dramatically enhance --portmap option (#417)\n    - Update autotools (#423)\n    - Add support for printing statistics periodically during the run (#424)\n    - Warn user when pcap snaplen < 65535 (#425)\n    - Add 802.1q processing support tcpprep (#428)\n\n06/25/2009: Version 3.4.3\n    - Link libnl when newer versions of libpcap require it (#397)\n    - Ship m4 directory (#398)\n    - Upgrade to latest autotools scripts (#400)\n    - Fix error message when running autogen.sh (#401)\n\n05/20/2009: Version 3.4.2\n    - Added extensive IPv6 support to tcprewrite & tcpreplay-edit (#11)\n    - Add IPv6 fragroute support (#388)\n    - Add IPv6 decoding support to tcpprep (#11)\n    - Fix compile time error in err.h (#390)\n    - Add --endpoints support in tcpreplay-edit (#393)\n\n02/18/2009: Version 3.4.1\n    - Sendpacket method did not match documentation (#361)\n    - Fix compile issue on systems without err.h (#363)\n    - Fix tcpprep --mac not processing non-IPv4 packets (#369)\n    - Always build tcpreplay w/ editing features as tcpreplay-edit (#372)\n    - Fix potential tcpbridge issues under OS X & *BSD (#373)\n    - Fix crash on 4 byte strictly aligned systems (#377)\n    - Add MTU truncation to tcprewrite/tcpreplay-edit (#379)\n\n01/15/2009: Version 3.4.0\n    - Add libdnet and remove libnet support for sending packets (#302)\n    - Fix numerous 802.11 decoder bugs (#325)\n    - Fix compile issue under Linux (#326)\n    - Fix Mbps/sec nonsense (#327)\n    - Fix tcprewrite crash when packets have no L3+ data (#328)\n    - Clean up err.c/err.h code and improve performance for non-debug builds (#331)\n    - Fix timesdiv() timer code (#332)\n    - Improve high-performance packet sending via multiple packets/interval (#334)\n    - Fix statistics report errors (#335)\n    - Fix BPF filters not being used in tcpbridge (#336)\n    - Improve tcpbridge performance (#337)\n    - Only use two libpcap handles for tcpbridge (#338)\n    - Fix autotools usage errors (#340)\n    - Clean up 'make test' results (#341)\n    - Update to AutoGen/AutoOpts 5.9.7 (#342)\n    - Fix compiler warnings from GCC 4.2 (#344)\n    - Fix numerous memory corruption bugs in libtcpedit DLT plugin code (#345)\n    - Add support for editing IPv4 TOS/DiffServ/ECN (#348)\n    - Update autotools to more recent versions (#349)\n    - Report injection method via -V (#352)\n    - Fix DLT_USER l2len check bug (#353)\n    - Replace man2html w/ groff (#354)\n    - Fix false pcap_inject() detection under Windows/Winpcap (#355)\n    - tcpbridge now builds under Win32/Cygwin\n    - libdnet is no longer an option for Win32/Cygwin (#57)\n    - tcpbridge now supports --listnics (#357)\n\n06/20/2008: Version 3.3.2\n    - Fix (again) tcpbridge --unidir assert error (#308)\n    - Fix tcpbridge bug where all packets that were sent were all zeros\n    - Fix tcpbridge not honoring --include/exclude flags (#311)\n    - Fix ip_in_cidr() debug messages (#312)\n    - Report packets which have timestamps which go backwards in time (#315)\n    - Clean up --sleep-accel code to use options struct (#316)\n    - Remove really old and out of date RPM .spec file (#317)\n    - Warn when sending on non-Ethernet interface (#318)\n    - Re-enable tcpreplay --listnics (#319)\n    - Fix sendpacket always reporting using PF_PACKET, even when it doesn't (#322)\n    - Fix major packet timing issue under old versions of glibc (#324)\n\n05/17/2008: Version 3.3.1\n    - Fix limitation of PF_PACKET only supporting Ethernet (#123)\n    - Fix (again) /dev/bpf detection in FreeBSD 8.0 (#292)\n    - Document building code from Subversion under Cygwin (#304)\n    - Fix --enable-force-* under Linux (#305)\n    - Fix tcpbridge --unidir assert error (#308)\n\n05/04/2008: Version 3.3.0\n    - Improve tcpreplay timing accuracy between packets (#41)\n    - Add tcprewrite fragroute support (#42)\n    - Fix tcprewrite --efcs option (#277)\n    - Updated Win32/Cygwin documentation (#280)\n    - Add dmalloc support (#282)\n    - Fix tcpprep broken handling of VLAN tagged frames (#290)\n    - Fix tcprewrite crash when cache file has NO_SEND packets (#291)\n    - Fix /dev/bpf detection in FreeBSD 8.0 (#292)\n    - Add tcprewrite --ttl editing option (#294)\n    - Fix autoconf AM_PROG_CC_C_O warning (#295)\n    - Add tcpprep --reverse option to split by matching client addresses (#297)\n    - Update version of autoconf to 1.10.1 (#298)\n    - Improved GNU Autogen detection and warnings (#299)\n    - Track EAGAIN errors separately from ENOBUFS (#301)\n    - Automatically detect Winpcap on Cygwin (#303)\n\n01/23/2008: Version 3.2.5\n    - Fix linker error with --enable-tcpreplay-edit and --enable-dynamic-link (#288)\n    - Fix compile errors with Sun Studio compiler (#286)\n\n01/16/2008: Version 3.2.4\n    - Fix crash in tcpreplay when --enable-tcpreplay-edit (#281)\n    - Display if --enable-tcpreplay-edit in -V (#283)\n\n11/01/2007: Version 3.2.3\n    - Fix compile issue under Linux and other OS's (#275)\n\n10/31/2007: Version 3.2.2\n    - Enable source MAC spoofing for OS X (#142, #151)\n        * Tcpreplay now requires OS X 10.5 (Leopard)\n    - Fix crash/memory access error with tcpreplay -N (#273)\n\n10/25/2007: Version 3.2.1\n    - Fix tcprewrite segfault in 'make test' under Linux (#200)\n    - Major performance improvement in tcpprep for large pcaps (#261)\n    - Fix strsignal already defined error under Cygwin/Windows (#199)\n    - Fix compile errors for older versions of GCC (#201)\n    - Remove flowreplay code (#262)\n    - Fix DLT rewrite code causing corrupted ethernet protocol type (#268)\n    - Try to fix inet_aton() issue under Solaris (#260)\n\n08/26/2007: Version 3.2\n    - Return a more useful error message when tcpprep fails (#187)\n    - Add Tomahawk test tool client/server detection algorithm (#186)\n    - Improved AutoGen support (#191)\n    - Improved documentation (#164, #198)\n    - Added Doxygen markup (#176)\n    - configure now honors --with-tcpdump flag (#192)\n    - configure now defaults to --enable-64bits which breaks backwards\n        compatibility in certain situations.  Use --disable-64bits if this\n        concerns you (#195)\n    - Use safe_free() to detect bugs earlier in development (#197)\n\n07/19/2007: Version 3.1.1\n    - Upgrade libopts tearoff to 29:0:4 so that everyone else in the world can\n      compile tcpreplay (#189)\n\n07/18/2007: Version 3.1.0\n    - Add tcprewrite --srcmap & --dstmap for rewriting only source or destination IP's (#185)\n    - ./configure now reports configuration at end (#155)\n    - Fix svn:keywords (#160)\n    - Optimize performance of dlt_en10mb plugin (#161)\n    - Performance improvements on strictly aligned systems (#162)\n    - Improve tcpprep error messages and handling (#163)\n    - Add support for warnings in libtcpedit (#165)\n    - Only use __attribute__((unused)) w/ GCC (#168)\n    - Fix compile issues under Solaris (#178)\n    - Gracefully handle systems w/o static libraries (#179)\n    - Fix segfault when using BPF filters (#182)\n    - Add additional DLT Plugins:\n        - 802.11 (#103)\n        - 802.11 w/ Radiotap (#177)\n\n05/01/2007: Version 3.0.1\n    - Stop tcpreplay causing OS X WiFi from disassociating (#167)\n    - --pnat incorrectly matched all IP addresses (#170)\n    - Fix serious memory leak in core common library (#175)\n    - Fix tcprewrite --enet-vlan on little endian systems (#174)\n    - Bad pcap timestamps were causing excessive delays (#169)\n    - Code cleanup (#173)\n\n04/20/2007: Version 3.0\n    - By default, no longer try to use libnet.  You must now specify --enable-libnet (#148)\n    - Improve documentation (#30)\n    - General code cleanup (#47)\n    - Warn when GNU Autogen version < 5.9 (#153)\n    - Remove support for pcap_snapshot_override which was never added to libpcap (#140)\n    - Fix support for C99/GCC 4.3 \"inline\".  Rely on -O3 for better performance. (#149)\n    - Prioritize 64 bit libraries over 32 bit counterparts (#150)\n\n04/14/2007: Version 3.0.RC1\n    - Fix tcpbridge and make it compile by default (#15)\n    - Fix tcprewrite crash on little-endian systems (#127)\n    - Gracefully handle broken pcap files where the snaplen < caplen (#130)\n        - Note: Fix was made in libpcap and will be part of 0.9.6\n    - Fix numerous bugs with the sendpacket code (#137)\n    - Add optional support for editing packets with tcpreplay (#61)\n    - Fix 'make test' on little endian systems (#64)\n    - tcprewrite -s is no longer endian dependent (#65)\n    - /docs cleaned up (#66)\n    - Fix detection/compile of libpcap.  Now support versions >= 0.7.2 (#80, #144)\n    - Add official support Cygwin/Win32 support (#110)\n    - Clean up libpcap version code (#111)\n    - Add support for interface alias names for Win32 (#113)\n    - Warn user on DLT miss-match (#125)\n    - Fix tcprewrite segfault with --fixlen=pad (#134)\n    - Add loop/cache support for better performance (#136)\n    - inline debugging code for better performance (#138)\n    - configure now supports selecting injection method (#139)\n    - Fix configure/compile errors under OpenBSD (#146)\n    - Add tcpbridge --verbose mode (#28)\n    - Fix compile issues under HP-UX & strictly aligned systems (#141)\n    - --enable-dynamic-link supports 64bit libraries (#143)\n\n\n03/22/2007: Version 3.0.beta13\n    - Fixed detection of IPv4 packets in libtcpedit on little-endian boxes (#115, #116)\n    - Fixed TCP/UDP checksum calculation on little-endian boxes (#126)\n    - Added --quiet flag to tcpreplay for Lothar (#109)\n    - The --seed flag should now generate the same IPs on both little-endian & big-endian boxes (#65)\n    - The --skipl2broadcast flag now works as documented (#112)\n    - Adding L2 header for DLT_RAW encapsulated packets now works (#16)\n    - Clean up documentation (#66, #75)\n    - Start initial support for Win32 port (#110, #111)\n    - Finish DLT plugin rewrite (#82)\n    - Fix compile on systems without tcpdump installed\n\n02/22/2007: Version 3.0.beta12\n    - Fix compile under RH ES 3.x (gcc 3.2.2) (#79)\n    - Fix compile on MIPS, ARM, HPPA, etc (#81, #88)\n    - Rewrite L2/DLT code in tcpedit/tcprewrite to be plugin based (#82)\n        - Create Ethernet Plugin (#99)\n        - Create User Plugin (#100)\n        - Create Cisco HDLC Plugin (#101)\n        - Create DLT_LINUX_SLL Plugin (#102)\n        - Create DLT_RAW Plugin (#104)\n        - Create DLT_NULL Plugin (#105)\n        - Create DLT_LOOP Plugin (#106)\n    - Properly decode ethernet frames when they are VLAN tagged (#84)\n    - Do not install man2html (#85)\n    - Add configure --disable-libopts-install option (#86)\n    - Enhance tcpreplay --oneatatime (#90)\n    - libtcpedit can now return warnings & errors (#92)\n    - Fix tcpprep --include/exclude (#96)\n    - Upgrade AutoGen tearoff (libopts) to latest version (5.9.0) (#97)\n    - Don't do L4 checksums for non-fragment offset == 0 (#107)\n\n08/07/2006: Version 3.0.beta11\n    - Fix distribution to ship missing src/tcpr.h (#73)\n    - Add support to tcprewrite to alter output file DLT (#74)\n    - Fix errors in 'make test' (little endian still broken) (#77)\n    - Tweak Autogen .def files documentation (#78)\n\n08/05/2006: Version 3.0.beta10\n    - tcpprep & tcprewrite no longer require root access (#3)\n    - Develop wrapper API for libnet, libpcap, BPF and PF_PACKET (#4, #24)\n    - Enhance do_sleep() to support looping for better accuracy (#6)\n    - Prefer inet_pton over older, deprecated routines (#26)\n    - Remove libnet as a requirement (#29)\n    - Optionally don't rewrite broadcast/multicast IP/MAC addresses (#38)\n    - Remove libnids dependancy for flowreplay  (#55)\n    - Fix build issues when libpcapnav is installed (#56)\n    - Fix truncate feature not putting correct packet length in IP header (#59)\n    - Internal error reporting fixes in libtcpedit (#60)\n    - Support --enable-debug when building under gcc 3.x (#62)\n    - tcpedit_stub.h wasn't being generated automatically from SVN (#63)\n    - Fix 'make doxygen' (#67)\n    - Fix some Makefile issues (#68)\n    - tcprewrite --endpoints should require a cache file (#70)\n    - Improve IP randomizer code to be more random (#71)\n\n07/17/2006: Version 3.0.beta9\n    - Fix compile issue for users not having AutoOpts installed (#54)\n    - Fix compile issue for users w/ AutoOpts 5.8.4 (upgrade to 5.8.4)\n\n07/16/2006: Version 3.0.beta8\n    - Fix -M running in MBps rather then Mbps\n    - Fix tcpbridge segfault/bus error reported by Steven Z. (Gerry)\n    - Improve tcpbridge man page\n    - Massive tcprewrite fixes & cleanup (#50)\n    - Much improved README document\n    - Reorganize packet editing code into a standalone module (tcpedit)\n          which has been librarized. (#5)\n    - Strict code cleanup (#27)\n    - Fix tcpprep from generating bad cache files (#48)\n    - Add MAC split mode for tcpprep (#1)\n    - Improve dbg() to list file/line (#32)\n    - Add tcpprep statistical reports (#2)\n    - Reorganize flowreplay code (#46)\n    - Fix conflicting speed_t for Debian (#33)\n    - Too many other things to document\n\n08/07/2005: Version 3.0.beta7\n    - New 'make doxygen' target builds pretty source code docs in\n          docs/web/doxygen/html\n    - Fix tcpprep auto/router mode which was sending all packets out the\n          secondary interface\n    - Fix endian issue on little-endian systems which made tcpprep think all\n          packets were not IP\n    - Improve debugability of tcpprep\n    - Fix UDP header offset bug in flowreplay\n\n06/28/2005: Version 3.0.beta6\n    - Fix rpm .spec file which was still based on tcpreplay 2.x (untested)\n    - Detect and manually include pcap-bpf.h which fixes compile problem\n    - Fix tcprewrite -S crash with only one MAC\n    - Fix tcpreplay using 2nd NIC split mode\n    - Fix tcpreplay packet counter initialization\n    - Fix tcpprep to properly handle missing -i and -c with -I and -P\n\n06/14/2005: Version 3.0.beta5\n    - Fix --decode flag\n    - Fix compile under AMD64/RHEL4 where libraries are in /usr/lib64\n    - tarball now ships with a full test subdir\n    - Fix compile of src/common/get.c under strictly aligned architectures\n    - Fix ./configure --enable-64bits flag\n    - Fix bug on little endian systems which prevented tcprewrite from\n      editing packets\n    - Fix tcprewrite linktype checks\n    - Add --pktlen for when the pcap snaplen lies to us\n    - Add --enable-dynamic-link for those who want to dynamically link their\n      libs\n\n06/05/2005: Version 3.0.beta4\n    - Really fix compile problems with dlt2desc with old versions of libpcap\n    - All libraries are now statically linked and full-path #includes.  This\n      should fix problems with people who have different versions of\n      libraries installed in different locations.\n    - Fix problems compiling on systems with libpcapnav\n    - Add support for libpcap 0.5 such as on OpenBSD\n    - Fix tcpprep --verbose\n    - Close STDIN prior to re-opening it for certain OS's\n\n05/04/2005: Version 3.0.beta3\n    - Fix autoconf problems with --with-libnet\n    - Fix compile problems with dlt2desc with old versions of libpcap\n    - Fix compile problem due to not shipping flowreplay_opts.h and\n      tcpbridge_opts.h\n\n04/19/2005: Version 3.0.beta2\n    - Significant improvements to FAQ and manual\n    - Use autoopts for flowreplay\n    - Be more cautious about memcpy's\n    - Fix numerous warnings during compile\n    - Allow overriding L2 protocol field for DLT_RAW\n    - tcpprep -I & -P now take the cache filename\n    - Lots of cleanup\n    - Added tcpbridge utility\n    - Fix tcpreplay --mbps which was being interpreted as bps\n    - Add --no-arg-comment feature for tcpprep\n    - Improve auto-tests and fix old broken ones\n    - Fix Makefile errors in the docs directory\n    - Upgrade libopts tear off to v5.7pre12 which fixes problems with\n      loading config files\n    - Add support for forcing the use of the local libopts tearoff code\n\n02/27/2005: Version 3.0.beta1\n    - Major code cleanups and rewriting\n      - Rip out all edit functions from tcpreplay and put into tcprewrite\n      - Improve tcpreplay performance by about 5% for raw sending\n      - Move around utility functions for greater code-reuse\n      - Move MAC Address funcs into mac.c\n      - Move global defines into defines.h\n      - Standardize use of structs and typedefs\n      - Start passing const's when we don't need to modify\n    - Start using GNU AutoOpts for arg/config file processing\n    - Start using automake and autoheader\n    - Major rewrite of configure.in\n    - Add support for printing which interface packets go out\n    - 64bit counters are optional via --enable-64bits\n    - Can now rewrite L2 data per outbound interface\n    - Add support for additional DLT types\n\n    - Non-Code changes\n      - I now own the full copyright for tcpreplay\n      - Removed the evil 4th clause from the BSD license\n      - Start updating the FAQ and split some content to make a manual\n      - Automatically generate man pages based via autogen\n\n    - New Applications:\n      - tcprewrite\n\n    - Removed Applications: (Ethereal has better utilities)\n      - capinfo\n      - pcapmerge\n\n    - Merge fixes from 2.x/stable branch:\n      - portmap.c endian bugs\n      - edit_packet.c handle corrupted pcap's where caplen < len\n      - configure now properly uses --with-libnet and --with-libpcap\n\n*** Fork 3.x Branch from v2.3.1 ***\n", "/* $Id$ */\n\n/*\n *   Copyright (c) 2001-2012 Aaron Turner <aturner at synfin dot net>\n *   Copyright (c) 2013-2016 Fred Klassen <tcpreplay at appneta dot com> - AppNeta\n *\n *   The Tcpreplay Suite of tools is free software: you can redistribute it \n *   and/or modify it under the terms of the GNU General Public License as \n *   published by the Free Software Foundation, either version 3 of the \n *   License, or with the authors permission any later version.\n *\n *   The Tcpreplay Suite is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License\n *   along with the Tcpreplay Suite.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"config.h\"\n#include \"defines.h\"\n#include \"common.h\"\n\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/uio.h>\n#include <unistd.h>\n#include <pcap.h>\n#include <sys/stat.h>\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <inttypes.h>\n\n#define __STDC_FORMAT_MACROS 1\n#include <inttypes.h>\n\n#include \"tcpcapinfo_opts.h\"\n\nstatic int do_checksum_math(u_int16_t *data, int len);\n\n#ifdef DEBUG\nint debug = 0;\n#endif\n\n#ifdef WORDS_BIGENDIAN\nchar is_swapped[] = \"little-endian\";\nchar is_not_swapped[] = \"big-endian\";\n#else\nchar is_not_swapped[] = \"little-endian\";\nchar is_swapped[] = \"big-endian\";\n#endif\n\nint read_packet(int fd, uint32_t len, char *fname);\n\n/*\n * Standard libpcap format.\n */\n#define TCPDUMP_MAGIC           0xa1b2c3d4\n\n/*\n * Alexey Kuznetzov's modified libpcap format.\n */\n#define KUZNETZOV_TCPDUMP_MAGIC 0xa1b2cd34\nstruct pcap_timeval {\n    bpf_int32 tv_sec;           /* seconds */\n    bpf_int32 tv_usec;          /* microseconds */\n};\nstruct pcap_sf_patched_pkthdr {\n    struct pcap_timeval ts;     /* time stamp */\n    bpf_u_int32 caplen;         /* length of portion present */\n    bpf_u_int32 len;            /* length this packet (off wire) */\n    int         index;\n    unsigned short protocol;\n    unsigned char pkt_type;\n};\n\n/*\n * Reserved for Francisco Mesquita <francisco.mesquita@radiomovel.pt>\n * for another modified format.\n */\n#define FMESQUITA_TCPDUMP_MAGIC 0xa1b234cd\n\n/*\n * Navtel Communcations' format, with nanosecond timestamps,\n * as per a request from Dumas Hwang <dumas.hwang@navtelcom.com>.\n */\n#define NAVTEL_TCPDUMP_MAGIC    0xa12b3c4d\n\n/*\n * Normal libpcap format, except for seconds/nanoseconds timestamps,\n * as per a request by Ulf Lamping <ulf.lamping@web.de>\n */\n#define NSEC_TCPDUMP_MAGIC      0xa1b23c4d\n\n\nint\nmain(int argc, char *argv[])\n{\n    int i, fd, swapped, pkthdrlen, ret, optct, backwards, caplentoobig;\n    struct pcap_file_header pcap_fh;\n    struct pcap_pkthdr pcap_ph;\n    struct pcap_sf_patched_pkthdr pcap_patched_ph; /* Kuznetzov */\n    char buf[10000];\n    struct stat statinfo;\n    uint64_t pktcnt;\n    uint32_t readword;\n    int32_t last_sec, last_usec, caplen;\n\n    optct = optionProcess(&tcpcapinfoOptions, argc, argv);\n    argc -= optct;\n    argv += optct;\n\n#ifdef DEBUG\n    if (HAVE_OPT(DBUG))\n        debug = OPT_VALUE_DBUG;\n#endif\n\n    for (i = 0; i < argc; i++) {\n        dbgx(1, \"processing:  %s\\n\", argv[i]);\n        if ((fd = open(argv[i], O_RDONLY)) < 0)\n            errx(-1, \"Error opening file %s: %s\", argv[i], strerror(errno));\n\n        if (fstat(fd, &statinfo) < 0)\n            errx(-1, \"Error getting file stat info %s: %s\", argv[i], strerror(errno));\n\n        printf(\"file size   = %\"PRIu64\" bytes\\n\", (uint64_t)statinfo.st_size);\n\n        if ((ret = read(fd, &buf, sizeof(pcap_fh))) != sizeof(pcap_fh))\n            errx(-1, \"File too small.  Unable to read pcap_file_header from %s\", argv[i]);\n\n        dbgx(3, \"Read %d bytes for file header\", ret);\n\n        swapped = 0;\n\n        memcpy(&pcap_fh, &buf, sizeof(pcap_fh));\n\n        pkthdrlen = 16; /* pcap_pkthdr isn't the actual on-disk format for 64bit systems! */\n\n        switch (pcap_fh.magic) {\n            case TCPDUMP_MAGIC:\n            printf(\"magic       = 0x%08\"PRIx32\" (tcpdump) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(TCPDUMP_MAGIC):\n            printf(\"magic       = 0x%08\"PRIx32\" (tcpdump/swapped) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            case KUZNETZOV_TCPDUMP_MAGIC:\n            pkthdrlen = sizeof(pcap_patched_ph);\n            printf(\"magic       = 0x%08\"PRIx32\" (Kuznetzov) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(KUZNETZOV_TCPDUMP_MAGIC):\n            pkthdrlen = sizeof(pcap_patched_ph);\n            printf(\"magic       = 0x%08\"PRIx32\" (Kuznetzov/swapped) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            case FMESQUITA_TCPDUMP_MAGIC:\n            printf(\"magic       = 0x%08\"PRIx32\" (Fmesquita) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(FMESQUITA_TCPDUMP_MAGIC):\n            printf(\"magic       = 0x%08\"PRIx32\" (Fmesquita) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            case NAVTEL_TCPDUMP_MAGIC:\n            printf(\"magic       = 0x%08\"PRIx32\" (Navtel) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(NAVTEL_TCPDUMP_MAGIC):\n            printf(\"magic       = 0x%08\"PRIx32\" (Navtel/swapped) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            case NSEC_TCPDUMP_MAGIC:\n            printf(\"magic       = 0x%08\"PRIx32\" (Nsec) (%s)\\n\", pcap_fh.magic, is_not_swapped);\n            break;\n\n            case SWAPLONG(NSEC_TCPDUMP_MAGIC):\n            printf(\"magic       = 0x%08\"PRIx32\" (Nsec/swapped) (%s)\\n\", pcap_fh.magic, is_swapped);\n            swapped = 1;\n            break;\n\n            default:\n            printf(\"magic       = 0x%08\"PRIx32\" (unknown)\\n\", pcap_fh.magic);\n        }\n\n        if (swapped == 1) {\n            pcap_fh.version_major = SWAPSHORT(pcap_fh.version_major);\n            pcap_fh.version_minor = SWAPSHORT(pcap_fh.version_minor);\n            pcap_fh.thiszone = SWAPLONG(pcap_fh.thiszone);\n            pcap_fh.sigfigs = SWAPLONG(pcap_fh.sigfigs);\n            pcap_fh.snaplen = SWAPLONG(pcap_fh.snaplen);\n            pcap_fh.linktype = SWAPLONG(pcap_fh.linktype);\n        }\n\n        printf(\"version     = %hu.%hu\\n\", pcap_fh.version_major, pcap_fh.version_minor);\n        printf(\"thiszone    = 0x%08\"PRIx32\"\\n\", pcap_fh.thiszone);\n        printf(\"sigfigs     = 0x%08\"PRIx32\"\\n\", pcap_fh.sigfigs);\n        printf(\"snaplen     = %\"PRIu32\"\\n\", pcap_fh.snaplen);\n        printf(\"linktype    = 0x%08\"PRIx32\"\\n\", pcap_fh.linktype);\n\n        if (pcap_fh.version_major != 2 && pcap_fh.version_minor != 4) {\n            printf(\"Sorry, we only support file format version 2.4\\n\");\n            close(fd);\n            continue;\n        }\n\n        dbgx(5, \"Packet header len: %d\", pkthdrlen);\n\n        if (pkthdrlen == 24) {\n            printf(\"Packet\\tOrigLen\\t\\tCaplen\\t\\tTimestamp\\t\\tIndex\\tProto\\tPktType\\tPktCsum\\tNote\\n\");\n        } else {\n            printf(\"Packet\\tOrigLen\\t\\tCaplen\\t\\tTimestamp\\tCsum\\tNote\\n\");\n        }\n\n        pktcnt = 0;\n        last_sec = 0;\n        last_usec = 0;\n        while ((ret = read(fd, &buf, pkthdrlen)) == pkthdrlen) {\n            pktcnt ++;\n            backwards = 0;\n            caplentoobig = 0;\n            dbgx(3, \"Read %d bytes for packet %\"PRIu64\" header\", ret, pktcnt);\n\n            memset(&pcap_ph, 0, sizeof(pcap_ph));\n\n            /* see what packet header we're using */\n            if (pkthdrlen == sizeof(pcap_patched_ph)) {\n                memcpy(&pcap_patched_ph, &buf, sizeof(pcap_patched_ph));\n\n                if (swapped == 1) {\n                    dbg(3, \"Swapping packet header bytes...\");\n                    pcap_patched_ph.caplen = SWAPLONG(pcap_patched_ph.caplen);\n                    pcap_patched_ph.len = SWAPLONG(pcap_patched_ph.len);\n                    pcap_patched_ph.ts.tv_sec = SWAPLONG(pcap_patched_ph.ts.tv_sec);\n                    pcap_patched_ph.ts.tv_usec = SWAPLONG(pcap_patched_ph.ts.tv_usec);\n                    pcap_patched_ph.index = SWAPLONG(pcap_patched_ph.index);\n                    pcap_patched_ph.protocol = SWAPSHORT(pcap_patched_ph.protocol);\n                }\n                printf(\"%\"PRIu64\"\\t%4\"PRIu32\"\\t\\t%4\"PRIu32\"\\t\\t%\"\n                        PRIx32\".%\"PRIx32\"\\t\\t%4\"PRIu32\"\\t%4hu\\t%4hhu\", \n                        pktcnt, pcap_patched_ph.len, pcap_patched_ph.caplen, \n                        pcap_patched_ph.ts.tv_sec, pcap_patched_ph.ts.tv_usec,\n                        pcap_patched_ph.index, pcap_patched_ph.protocol, pcap_patched_ph.pkt_type);\n\n                if (pcap_fh.snaplen < pcap_patched_ph.caplen) {\n                    caplentoobig = 1;\n                }\n\n                caplen = pcap_patched_ph.caplen;\n\n            } else {\n                /* manually map on-disk bytes to our memory structure */\n                memcpy(&readword, buf, 4);\n                pcap_ph.ts.tv_sec = readword;\n                memcpy(&readword, &buf[4], 4);\n                pcap_ph.ts.tv_usec = readword;\n                memcpy(&pcap_ph.caplen, &buf[8], 4);\n                memcpy(&pcap_ph.len, &buf[12], 4);\n\n                if (swapped == 1) {\n                    dbg(3, \"Swapping packet header bytes...\");\n                    pcap_ph.caplen = SWAPLONG(pcap_ph.caplen);\n                    pcap_ph.len = SWAPLONG(pcap_ph.len);\n                    pcap_ph.ts.tv_sec = SWAPLONG(pcap_ph.ts.tv_sec);\n                    pcap_ph.ts.tv_usec = SWAPLONG(pcap_ph.ts.tv_usec);\n                }\n                printf(\"%\"PRIu64\"\\t%4\"PRIu32\"\\t\\t%4\"PRIu32\"\\t\\t%\"\n                        PRIx32\".%\"PRIx32,\n                        pktcnt, pcap_ph.len, pcap_ph.caplen, \n                        (unsigned int)pcap_ph.ts.tv_sec, (unsigned int)pcap_ph.ts.tv_usec);\n                if (pcap_fh.snaplen < pcap_ph.caplen) {\n                    caplentoobig = 1;\n                }\n                caplen = pcap_ph.caplen;\n            }\n\n            if (caplentoobig) {\n                printf(\"\\n\\nCapture file appears to be damaged or corrupt.\\n\"\n                        \"Contains packet of size %u, bigger than snap length %u\\n\",\n                        caplen, pcap_fh.snaplen);\n\n                close(fd);\n                break;\n            }\n\n            /* check to make sure timestamps don't go backwards */\n            if (last_sec > 0 && last_usec > 0) {\n                if ((pcap_ph.ts.tv_sec == last_sec) ? \n                        (pcap_ph.ts.tv_usec < last_usec) : \n                        (pcap_ph.ts.tv_sec < last_sec)) {\n                    backwards = 1;\n                }\n            }\n            if (pkthdrlen == sizeof(pcap_patched_ph)) {\n                last_sec = pcap_patched_ph.ts.tv_sec;\n                last_usec = pcap_patched_ph.ts.tv_usec;\n            } else {\n                last_sec = pcap_ph.ts.tv_sec;\n                last_usec = pcap_ph.ts.tv_usec;\n            }\n\n            /* read the frame */\n            if ((ret = read(fd, &buf, caplen)) != caplen) {\n                if (ret < 0) {\n                    printf(\"Error reading file: %s: %s\\n\", argv[i], strerror(errno));\n                } else {\n                    printf(\"File truncated!  Unable to jump to next packet.\\n\");\n                }\n\n                close(fd);\n                break;\n            }\n\n            /* print the frame checksum */\n            printf(\"\\t%x\\t\", do_checksum_math((u_int16_t *)buf, caplen));\n\n            /* print the Note */\n            if (! backwards && ! caplentoobig) {\n                printf(\"OK\\n\");\n            } else if (backwards && ! caplentoobig) {\n                printf(\"BAD_TS\\n\");\n            } else if (caplentoobig && ! backwards) {\n                printf(\"TOOBIG\\n\");\n            } else if (backwards && caplentoobig) {\n                printf(\"BAD_TS|TOOBIG\");\n            } \n\n        }\n\n    }\n\n    exit(0);\n\n}\n\n/**\n * code to do a ones-compliment checksum\n */\nstatic int\ndo_checksum_math(u_int16_t *data, int len)\n{\n    int sum = 0;\n    union {\n        u_int16_t s;\n        u_int8_t b[2];\n    } pad;\n\n    while (len > 1) {\n        sum += *data++;\n        len -= 2;\n    }\n\n    if (len == 1) {\n        pad.b[0] = *(u_int8_t *)data;\n        pad.b[1] = 0;\n        sum += pad.s;\n    }\n\n    return (sum);\n}\n\n"], "filenames": ["docs/CHANGELOG", "src/tcpcapinfo.c"], "buggy_code_start_loc": [1, 283], "buggy_code_end_loc": [1, 310], "fixing_code_start_loc": [2, 284], "fixing_code_end_loc": [3, 319], "type": "CWE-119", "message": "Buffer overflow in the tcpcapinfo utility in Tcpreplay before 4.2.0 Beta 1 allows remote attackers to have unspecified impact via a pcap file with an over-size packet.", "other": {"cve": {"id": "CVE-2017-6429", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-15T15:59:01.000", "lastModified": "2022-06-03T14:34:41.817", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Buffer overflow in the tcpcapinfo utility in Tcpreplay before 4.2.0 Beta 1 allows remote attackers to have unspecified impact via a pcap file with an over-size packet."}, {"lang": "es", "value": "Desbordamiento de b\u00fafer en la utilidad tcpcapinfo en Tcpreplay en versiones anteriores a 4.2.0 Beta 1 permite a atacantes remotos tener impacto no especificado a trav\u00e9s de un archivo pcap con un paquete de gran tama\u00f1o."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:broadcom:tcpreplay:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.1.2", "matchCriteriaId": "691D9AF2-A5A6-48C9-B6E0-14698A455306"}]}]}], "references": [{"url": "http://www.securityfocus.com/archive/1/540221/100/0/threaded", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securityfocus.com/bid/96579", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/appneta/tcpreplay/commit/d689d14dbcd768c028eab2fb378d849e543dcfe9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/appneta/tcpreplay/issues/278", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/appneta/tcpreplay/releases/tag/v4.2.0-beta1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/appneta/tcpreplay/commit/d689d14dbcd768c028eab2fb378d849e543dcfe9"}}