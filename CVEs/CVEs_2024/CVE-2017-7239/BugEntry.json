{"buggy_code": ["2017-03-26  Daniel M. German  <dmg@uvic.ca>\n\n\t* lib/Ninka/CommentExtractor.pm (execute_command): \n          Added check to make sure no spurious command is executed\n\n        * Changed version to 1.3.1\n\n        * This change addresses CVE-2017-7239, reported by Dirk-Willem van Gulik\n\n2015-05-11  dmg  <dmg@uvic.ca>\n\t\n\t* Released version 1.3\n\t\n2015-05-11  dmg  <dmg@uvic.ca>\n\n\t* senttok/licensesentence.dict: \n\t  - added AlternTrolltechKDE-approved, \n\t  - in MITX11 liability, there might be commas between names. Regexp is greedy, so we are ok\n\n2015-05-01  dmg  <dmg@uvic.ca>\n\n\t* Removed original abbrev.txt file and replaced it with\n\tabbreviations from SCOWL. This means Ninka is now free software in\n\tits entirety.\n\t\n2015-01-10  dmg  <dmg@uvic.ca>\n\n\t* Bumped to version 1.3 RC 1\n\n\t* ninka-sqlite.pl, ninka-excel.pl: prepared them for release\n\n\t* ninka.pl: fixed bug in finding the path of where ninka was being executed from (reported by Ryan Biesemeyer)\n\n\t* Fixed quotes in perl (Ren\u00e9 Scheibe)\n\n2015-01-05  dmg  <dmg@uvic.ca>\n\n\t* filter/criticalword.dict: MIT+no-false-attribs license missing one sentence\n\n\t* senttok/licensesentence.dict (MITpermissionExtrict): there was a space where no space should have been\n\n2014-06-09  dmg  <dmg@uvic.ca>\n\n\t* Version 1.2\n\n\t* Changed license to GPLv2+\n\n2013-07-07  dmg  <dmg@uvic.ca>\n\n\t* Version 1.1\n\n\t* Cleaned up the output of Apache v2\n\n2013-07-03  dmg  <dmg@uvic.ca>\n\n\t* Version to 1.1 RC2\n\n\t* Added qt variants and fixed more GPL related unknowns.\n\n\t* When the license is unknown \"UNKNOWN\" is printed.\n\n2013-07-02  dmg  <dmg@uvic.ca>\n\n\t* Added version to ninka.pl, set to 1.1 RC1\n\n\t* matcher/rules.dict: Added CDDLorGPLv2, CPLv1orGPLv2+orLGPLv2, QtorGPLv2orv3\n\n\t* senttok/licensesentence.dict: the boost license sometimes contains just the URL refernece, fixed several regressions.\n\n\t* matcher/rules.dict: Renamed the openSSLvar2 to Apachev1.0\n\n\t* matcher/matcher.pl: added fields to ignore in MPLv1.1\n\n\t* the mozilla trilicense was not properly identified in the GPLv2+ or LGPLv2.1+\n\n\t* matcher/matcher.pl: Added GPL2orOpenIB to the rules. Allowed\n\tspaces in the defintion of the rules\n\n2013-07-01  dmg  <dmg@uvic.ca>\n\n\t* filter/criticalword.dict: tighten some definitions to avoid\n\tfalse positives without hurting precision. In particular, removed\n\t\"subject\" as a \"legal\" term.\n\n\t* senttok/licensesentence.dict (publicDomain): Added another public domain.\n\n2011-02-08    <dmg@uvic.ca>\n\n\t* senttok/licensesentence.dict: Renamed the GPLVer2+KDE to\n\tGPLVer2or3KDE+, which I believe is more appropriate (license GPL\n\tv2, v3 or any further version approved by the KDE e.v.\n\n2011-02-03    <dmg@uvic.ca>\n\n\t* extComments/extComments.pl (Determine_Comments_Extractor): Fixed\n\ta bug introduced in the comments extractor.\n\n\t* matcher/rules.dict: Fixed a bug in the sunRPM license. It wasn't detected.\n\n\t* filter/criticalword.dict: strenghten some rules to avoid some\n\tfalse positives in good sentences.\n\n2011-01-28    <dmg@uvic.ca>\n\n\t* senttok/senttok.pl (Normalize_GPL): Fixed a bug in the parsing\n\tof version strings. \"v.\" is considered a version iff followed by a\n\tnumber.\n\n\t* matcher/rules.dict, licensesentence.dict: added a new license\n\tGPLVer2+KDE (a variant of the GPLv2+ where the KDE has a say in\n\tterms of which license it can be replaced with in the future).\n\n2010-11-19  dmg  <dmg@uvic.ca>\n\n\t* ninka.pl: Uncommented a line that I left commented by mistake.\n\n2010-11-10  dmg  <dmg@uvic.ca>\n\n\t* Released pre-release version 1.0-pre2\n\n\t* Added path to the files in the tar file.\n\n\t* README: Fixed errors (patch by Armijn Hemel)\n\n\t* extComments/extComments.pl (Determine_Comments_Extractor): Added\n\tthe option to not use the comments extractor.\n\n\t* Now that Paul has given us permission, remove patching process.\n\n\t* Cleanup files\n\n2010-08-07  dmg  <dmg@uvic.ca>\n\n\t* Prepared the release to the public.\n", "use strict;\nuse warnings;\nuse utf8;\nuse ExtUtils::MakeMaker;\n\nWriteMakefile(\n    NAME => 'Ninka',\n    VERSION_FROM => 'lib/Ninka.pm',\n    ABSTRACT_FROM => 'lib/Ninka.pm',\n    LICENSE => 'gpl_2',\n    AUTHOR => [\n        'Daniel M. German <dmg@uvic.ca>',\n        'Yuki Manabe <y-manabe@ist.osaka-u.ac.jp>',\n        'Ren\u00e9 Scheibe <rene.scheibe@gmail.com>',\n    ],\n    EXE_FILES => ['bin/ninka'],\n    CONFIGURE_REQUIRES => {\n        'ExtUtils::MakeMaker' => '6.52',\n    },\n    PREREQ_PM => {\n        'DBI' => '0',\n        'DBD::SQLite' => '0',\n        'File::Basename' => '0',\n        'File::Find' => '0',\n        'File::Spec::Functions' => '0',\n        'File::Temp' => '0',\n        'Getopt::Std' => '0',\n        'IPC::Open3' => '0',\n        'Spreadsheet::WriteExcel' => '0',\n    },\n    TEST_REQUIRES => {\n        'File::Temp' => '0',\n        'Test::More' => '0.98',\n        'Test::Pod' => '1.00',\n        'Test::Strict' => '0',\n    },\n    META_MERGE => {\n        resources => {\n            homepage => 'http://ninka.turingmachine.org/',\n            repository => 'https://github.com/dmgerman/ninka',\n            license => 'http://www.gnu.org/licenses/gpl-2.0.html',\n       },\n    },\n);\n", "package Ninka;\n\nuse strict;\nuse warnings;\nuse Ninka::FileCleaner;\nuse Ninka::CommentExtractor;\nuse Ninka::LicenseMatcher;\nuse Ninka::SentenceExtractor;\nuse Ninka::SentenceFilter;\nuse Ninka::SentenceTokenizer;\n\nour $VERSION = '1.3.1';\n\nsub process_file {\n    my ($input_file, $create_intermediary_files, $verbose) = @_;\n\n    print STDERR \"analysing file [$input_file]\\n\" if $verbose;\n\n    if (not (-f $input_file)) {\n        print STDERR \"file [$input_file] is not a file\\n\";\n        return;\n    }\n\n    my %common_parameters = (verbose => $verbose);\n\n    my %parameters_step0 = (%common_parameters, input_file => $input_file);\n    my $cleaned_input_file = Ninka::FileCleaner->new(%parameters_step0)->execute;\n    \n    my %parameters_step1 = (%common_parameters, input_file => $cleaned_input_file);\n    my $comments = Ninka::CommentExtractor->new(%parameters_step1)->execute();\n\n    my %parameters_step2 = (%common_parameters, comments => $comments);\n    my $sentences_ref = Ninka::SentenceExtractor->new(%parameters_step2)->execute();\n\n    my %parameters_step3 = (%common_parameters, sentences => $sentences_ref);\n    my ($good_sentences_ref, $bad_sentences_ref) = Ninka::SentenceFilter->new(%parameters_step3)->execute();\n\n    my %parameters_step4 = (%common_parameters, sentences => $good_sentences_ref);\n    my $license_tokens_ref = Ninka::SentenceTokenizer->new(%parameters_step4)->execute();\n\n    my %parameters_step5 = (%common_parameters, license_tokens => $license_tokens_ref);\n    my $license_result = Ninka::LicenseMatcher->new(%parameters_step5)->execute();\n\n    if ($create_intermediary_files) {\n        create_intermediary_file($input_file, 'comments',  $comments);\n        create_intermediary_file($input_file, 'sentences', join(\"\\n\", @$sentences_ref));\n        create_intermediary_file($input_file, 'goodsent',  join(\"\\n\", @$good_sentences_ref));\n        create_intermediary_file($input_file, 'badsent',   join(\"\\n\", @$bad_sentences_ref));\n        create_intermediary_file($input_file, 'senttok',   join(\"\\n\", @$license_tokens_ref));\n        create_intermediary_file($input_file, 'license',   $license_result);\n    }\n\n    return $license_result;\n}\n\nsub create_intermediary_file {\n    my ($input_file, $output_extension, $content) = @_;\n\n    my $output_file = \"$input_file.$output_extension\";\n    open my $output_fh, '>', $output_file or die \"can't create output file [$output_file]: $!\";\n    print $output_fh $content;\n    close $output_fh;\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nNinka - source file license identification tool\n\n=head1 SYNOPSIS\n\n    use Ninka;\n\n    my $input_file = 'some/path/file_of_interest';\n    my $create_intermediary_files = 0;\n    my $verbose = 0;\n\n    my $license_result = Ninka::process_file($input_file, $create_intermediary_files, $verbose);\n\n=head1 DESCRIPTION\n\nScans a source file and returns the found licenses.\n\n=head1 COPYRIGHT AND LICENSE\n\nCopyright (C) 2009-2014,2017  Yuki Manabe and Daniel M. German\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as\npublished by the Free Software Foundation; either version 2 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n=cut\n", "package Ninka::CommentExtractor;\n\nuse strict;\nuse warnings;\nuse IPC::Open3 'open3';\nuse Symbol 'gensym';\n\nsub new {\n    my ($class, %args) = @_;\n\n    my $self = bless({}, $class);\n\n    die \"parameter 'input_file' is mandatory\" unless exists $args{input_file};\n\n    $self->{verbose} = ($args{verbose} // 0) == 1;\n    $self->{input_file} = $args{input_file};\n\n    return $self;\n}\n\nsub execute {\n    my ($self) = @_;\n\n    my $command = $self->determine_comments_command();\n    my $comments = execute_command($command);\n    if ($command =~ /^comments/ && length($comments) == 0) {\n        $command = create_head_cmd($self->{input_file}, 700);\n        $comments = execute_command($command);\n    }\n\n    return $comments;\n}\n\nsub determine_comments_command {\n    my ($self) = @_;\n\n    my $input_file = $self->{input_file};\n\n    if ($input_file =~ /\\.([^\\.]+)$/) {\n        my $ext = $1;\n        if ($ext =~ /^(pl|pm|py)$/) {\n            return create_head_cmd($input_file, 400);\n        } elsif ($ext =~ /^(jl|el)$/) {\n            return create_head_cmd($input_file, 400);\n        } elsif ($ext =~ /^(java|c|cpp|h|cxx|c\\+\\+|cc)$/) {\n            my $comments_binary = 'comments';\n            if (`which $comments_binary` ne '') {\n                return \"$comments_binary -c1 '$input_file' 2> /dev/null\";\n            } else {\n                return create_head_cmd($input_file, 400);\n            }\n        } else {\n            return create_head_cmd($input_file, 700);\n        }\n    } else {\n        return create_head_cmd($input_file, 700);\n    }\n}\n\nsub create_head_cmd {\n    my ($input_file, $count_lines) = @_;\n\n    return \"head -$count_lines $input_file\";\n}\n\nsub execute_command {\n    my ($command) = @_;\n\n    if ($command =~ /&/) {\n        die \"illegal file name in command to be executed [$command]\";\n    }\n\n    my ($child_in, $child_out, $child_err);\n    $child_err = gensym();\n    my $pid = open3($child_in, $child_out, $child_err, $command);\n    my $comments = do { local $/; <$child_out> };\n    chomp(my $error = join('; ', <$child_err>));\n    waitpid $pid, 0;\n    my $status = ($? >> 8);\n    die \"execution of program [$command] failed: status [$status], error [$error]\" if ($status != 0);\n\n    return $comments;\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nNinka::CommentExtractor\n\n=head1 DESCRIPTION\n\nExtracts comments from source code.\nIf no comment extractor is known for a language, then extracts top lines from source.\n\n=head1 COPYRIGHT AND LICENSE\n\nCopyright (C) 2009-2014  Yuki Manabe and Daniel M. German\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as\npublished by the Free Software Foundation; either version 2 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n=cut\n"], "fixing_code": ["2017-04-02  Daniel M. German  <dmg@uvic.ca>\n\n        These changes address CVE-2017-7239\n\n\t* lib/Ninka.pm: upgraded to version to 1.3.2\n\n\t* Makefile.PL: Added IO::CaptureOutput to dependencies\n\n\t* CommentExtractor.pm:\n\n\t- replaced call to system with a single argument with a list of arguments.\n\n\t- replaced the use of open3 with captureoutput to simplify the code\n\n2017-03-26  Daniel M. German  <dmg@uvic.ca>\n\n\t* lib/Ninka/CommentExtractor.pm (execute_command): \n          Added check to make sure no spurious command is executed\n\n        * Changed version to 1.3.1\n\n        * This change addresses CVE-2017-7239, reported by Dirk-Willem van Gulik\n\n2015-05-11  dmg  <dmg@uvic.ca>\n\t\n\t* Released version 1.3\n\t\n2015-05-11  dmg  <dmg@uvic.ca>\n\n\t* senttok/licensesentence.dict: \n\t  - added AlternTrolltechKDE-approved, \n\t  - in MITX11 liability, there might be commas between names. Regexp is greedy, so we are ok\n\n2015-05-01  dmg  <dmg@uvic.ca>\n\n\t* Removed original abbrev.txt file and replaced it with\n\tabbreviations from SCOWL. This means Ninka is now free software in\n\tits entirety.\n\t\n2015-01-10  dmg  <dmg@uvic.ca>\n\n\t* Bumped to version 1.3 RC 1\n\n\t* ninka-sqlite.pl, ninka-excel.pl: prepared them for release\n\n\t* ninka.pl: fixed bug in finding the path of where ninka was being executed from (reported by Ryan Biesemeyer)\n\n\t* Fixed quotes in perl (Ren\u00e9 Scheibe)\n\n2015-01-05  dmg  <dmg@uvic.ca>\n\n\t* filter/criticalword.dict: MIT+no-false-attribs license missing one sentence\n\n\t* senttok/licensesentence.dict (MITpermissionExtrict): there was a space where no space should have been\n\n2014-06-09  dmg  <dmg@uvic.ca>\n\n\t* Version 1.2\n\n\t* Changed license to GPLv2+\n\n2013-07-07  dmg  <dmg@uvic.ca>\n\n\t* Version 1.1\n\n\t* Cleaned up the output of Apache v2\n\n2013-07-03  dmg  <dmg@uvic.ca>\n\n\t* Version to 1.1 RC2\n\n\t* Added qt variants and fixed more GPL related unknowns.\n\n\t* When the license is unknown \"UNKNOWN\" is printed.\n\n2013-07-02  dmg  <dmg@uvic.ca>\n\n\t* Added version to ninka.pl, set to 1.1 RC1\n\n\t* matcher/rules.dict: Added CDDLorGPLv2, CPLv1orGPLv2+orLGPLv2, QtorGPLv2orv3\n\n\t* senttok/licensesentence.dict: the boost license sometimes contains just the URL refernece, fixed several regressions.\n\n\t* matcher/rules.dict: Renamed the openSSLvar2 to Apachev1.0\n\n\t* matcher/matcher.pl: added fields to ignore in MPLv1.1\n\n\t* the mozilla trilicense was not properly identified in the GPLv2+ or LGPLv2.1+\n\n\t* matcher/matcher.pl: Added GPL2orOpenIB to the rules. Allowed\n\tspaces in the defintion of the rules\n\n2013-07-01  dmg  <dmg@uvic.ca>\n\n\t* filter/criticalword.dict: tighten some definitions to avoid\n\tfalse positives without hurting precision. In particular, removed\n\t\"subject\" as a \"legal\" term.\n\n\t* senttok/licensesentence.dict (publicDomain): Added another public domain.\n\n2011-02-08    <dmg@uvic.ca>\n\n\t* senttok/licensesentence.dict: Renamed the GPLVer2+KDE to\n\tGPLVer2or3KDE+, which I believe is more appropriate (license GPL\n\tv2, v3 or any further version approved by the KDE e.v.\n\n2011-02-03    <dmg@uvic.ca>\n\n\t* extComments/extComments.pl (Determine_Comments_Extractor): Fixed\n\ta bug introduced in the comments extractor.\n\n\t* matcher/rules.dict: Fixed a bug in the sunRPM license. It wasn't detected.\n\n\t* filter/criticalword.dict: strenghten some rules to avoid some\n\tfalse positives in good sentences.\n\n2011-01-28    <dmg@uvic.ca>\n\n\t* senttok/senttok.pl (Normalize_GPL): Fixed a bug in the parsing\n\tof version strings. \"v.\" is considered a version iff followed by a\n\tnumber.\n\n\t* matcher/rules.dict, licensesentence.dict: added a new license\n\tGPLVer2+KDE (a variant of the GPLv2+ where the KDE has a say in\n\tterms of which license it can be replaced with in the future).\n\n2010-11-19  dmg  <dmg@uvic.ca>\n\n\t* ninka.pl: Uncommented a line that I left commented by mistake.\n\n2010-11-10  dmg  <dmg@uvic.ca>\n\n\t* Released pre-release version 1.0-pre2\n\n\t* Added path to the files in the tar file.\n\n\t* README: Fixed errors (patch by Armijn Hemel)\n\n\t* extComments/extComments.pl (Determine_Comments_Extractor): Added\n\tthe option to not use the comments extractor.\n\n\t* Now that Paul has given us permission, remove patching process.\n\n\t* Cleanup files\n\n2010-08-07  dmg  <dmg@uvic.ca>\n\n\t* Prepared the release to the public.\n", "use strict;\nuse warnings;\nuse utf8;\nuse ExtUtils::MakeMaker;\n\nWriteMakefile(\n    NAME => 'Ninka',\n    VERSION_FROM => 'lib/Ninka.pm',\n    ABSTRACT_FROM => 'lib/Ninka.pm',\n    LICENSE => 'gpl_2',\n    AUTHOR => [\n        'Daniel M. German <dmg@uvic.ca>',\n        'Yuki Manabe <y-manabe@ist.osaka-u.ac.jp>',\n        'Ren\u00e9 Scheibe <rene.scheibe@gmail.com>',\n    ],\n    EXE_FILES => ['bin/ninka'],\n    CONFIGURE_REQUIRES => {\n        'ExtUtils::MakeMaker' => '6.52',\n    },\n    PREREQ_PM => {\n        'DBI' => '0',\n        'DBD::SQLite' => '0',\n        'File::Basename' => '0',\n        'File::Find' => '0',\n        'File::Spec::Functions' => '0',\n        'File::Temp' => '0',\n        'Getopt::Std' => '0',\n        'IPC::Open3' => '0',\n        'Spreadsheet::WriteExcel' => '0',\n        'IO::CaptureOutput' => '0',\n                  \n    },\n    TEST_REQUIRES => {\n        'File::Temp' => '0',\n        'Test::More' => '0.98',\n        'Test::Pod' => '1.00',\n        'Test::Strict' => '0',\n    },\n    META_MERGE => {\n        resources => {\n            homepage => 'http://ninka.turingmachine.org/',\n            repository => 'https://github.com/dmgerman/ninka',\n            license => 'http://www.gnu.org/licenses/gpl-2.0.html',\n       },\n    },\n);\n", "package Ninka;\n\nuse strict;\nuse warnings;\nuse Ninka::FileCleaner;\nuse Ninka::CommentExtractor;\nuse Ninka::LicenseMatcher;\nuse Ninka::SentenceExtractor;\nuse Ninka::SentenceFilter;\nuse Ninka::SentenceTokenizer;\n\nour $VERSION = '1.3.2';\n\nsub process_file {\n    my ($input_file, $create_intermediary_files, $verbose) = @_;\n\n    print STDERR \"analysing file [$input_file]\\n\" if $verbose;\n\n    if (not (-f $input_file)) {\n        print STDERR \"file [$input_file] is not a file\\n\";\n        return;\n    }\n\n    my %common_parameters = (verbose => $verbose);\n\n    my %parameters_step0 = (%common_parameters, input_file => $input_file);\n    my $cleaned_input_file = Ninka::FileCleaner->new(%parameters_step0)->execute;\n    \n    my %parameters_step1 = (%common_parameters, input_file => $cleaned_input_file);\n    my $comments = Ninka::CommentExtractor->new(%parameters_step1)->execute();\n\n    my %parameters_step2 = (%common_parameters, comments => $comments);\n    my $sentences_ref = Ninka::SentenceExtractor->new(%parameters_step2)->execute();\n\n    my %parameters_step3 = (%common_parameters, sentences => $sentences_ref);\n    my ($good_sentences_ref, $bad_sentences_ref) = Ninka::SentenceFilter->new(%parameters_step3)->execute();\n\n    my %parameters_step4 = (%common_parameters, sentences => $good_sentences_ref);\n    my $license_tokens_ref = Ninka::SentenceTokenizer->new(%parameters_step4)->execute();\n\n    my %parameters_step5 = (%common_parameters, license_tokens => $license_tokens_ref);\n    my $license_result = Ninka::LicenseMatcher->new(%parameters_step5)->execute();\n\n    if ($create_intermediary_files) {\n        create_intermediary_file($input_file, 'comments',  $comments);\n        create_intermediary_file($input_file, 'sentences', join(\"\\n\", @$sentences_ref));\n        create_intermediary_file($input_file, 'goodsent',  join(\"\\n\", @$good_sentences_ref));\n        create_intermediary_file($input_file, 'badsent',   join(\"\\n\", @$bad_sentences_ref));\n        create_intermediary_file($input_file, 'senttok',   join(\"\\n\", @$license_tokens_ref));\n        create_intermediary_file($input_file, 'license',   $license_result);\n    }\n\n    return $license_result;\n}\n\nsub create_intermediary_file {\n    my ($input_file, $output_extension, $content) = @_;\n\n    my $output_file = \"$input_file.$output_extension\";\n    open my $output_fh, '>', $output_file or die \"can't create output file [$output_file]: $!\";\n    print $output_fh $content;\n    close $output_fh;\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nNinka - source file license identification tool\n\n=head1 SYNOPSIS\n\n    use Ninka;\n\n    my $input_file = 'some/path/file_of_interest';\n    my $create_intermediary_files = 0;\n    my $verbose = 0;\n\n    my $license_result = Ninka::process_file($input_file, $create_intermediary_files, $verbose);\n\n=head1 DESCRIPTION\n\nScans a source file and returns the found licenses.\n\n=head1 COPYRIGHT AND LICENSE\n\nCopyright (C) 2009-2014,2017  Yuki Manabe and Daniel M. German\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as\npublished by the Free Software Foundation; either version 2 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n=cut\n", "package Ninka::CommentExtractor;\n\nuse strict;\nuse warnings;\nuse IPC::Open3 'open3';\nuse Symbol 'gensym';\nuse IO::CaptureOutput qw/capture_exec/;\n\nsub new {\n    my ($class, %args) = @_;\n\n    my $self = bless({}, $class);\n\n    die \"parameter 'input_file' is mandatory\" unless exists $args{input_file};\n\n    $self->{verbose} = ($args{verbose} // 0) == 1;\n    $self->{input_file} = $args{input_file};\n\n    return $self;\n}\n\nsub execute {\n    my ($self) = @_;\n\n    my @command = $self->determine_comments_command();\n    my $comments = execute_command(@command);\n    if ($command[0] =~ /^comments/ && length($comments) == 0) {\n        @command = create_head_cmd($self->{input_file}, 700);\n        $comments = execute_command(@command);\n    }\n\n    return $comments;\n}\n\nsub determine_comments_command {\n    my ($self) = @_;\n\n    my $input_file = $self->{input_file};\n\n    if ($input_file =~ /\\.([^\\.]+)$/) {\n        my $ext = $1;\n        if ($ext =~ /^(pl|pm|py)$/) {\n            return create_head_cmd($input_file, 400);\n        } elsif ($ext =~ /^(jl|el)$/) {\n            return create_head_cmd($input_file, 400);\n        } elsif ($ext =~ /^(java|c|cpp|h|cxx|c\\+\\+|cc)$/) {\n            my $comments_binary = 'comments';\n            if (`which $comments_binary` ne '') {\n                return ($comments_binary, \"-c1\", $input_file);\n            } else {\n                return create_head_cmd($input_file, 400);\n            }\n        } else {\n            return create_head_cmd($input_file, 700);\n        }\n    } else {\n        return create_head_cmd($input_file, 700);\n    }\n}\n\nsub create_head_cmd {\n    my ($input_file, $count_lines) = @_;\n\n    return (\"head\",  \"-$count_lines\",  $input_file);\n}\n\nsub execute_command {\n    my (@command) = @_;\n    # make sure we have more than one element in the array\n    #    otherwise system will use the shell to do the execution\n    die \"command (@command) seems to be missing parameters\" unless (scalar(@command) > 1);\n\n    my ($stdout, $error, $success, $status) = capture_exec( @command );\n\n    my $commandSt = join(' ', @command);\n    die \"execution of program [$commandSt] failed: status [$status], error [$error]\" if ($status != 0);\n\n    return $stdout;\n}\n\n\n# insecure execute command. Leave here for the time being\n# it is dead code\nsub execute_command_old {\n    my ($command) = @_;\n\n    if ($command =~ /&/) {\n        die \"illegal file name in command to be executed [$command]\";\n    }\n\n    my ($child_in, $child_out, $child_err);\n    $child_err = gensym();\n    my $pid = open3($child_in, $child_out, $child_err, $command);\n    my $comments = do { local $/; <$child_out> };\n    chomp(my $error = join('; ', <$child_err>));\n    waitpid $pid, 0;\n    my $status = ($? >> 8);\n    die \"execution of program [$command] failed: status [$status], error [$error]\" if ($status != 0);\n\n    return $comments;\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nNinka::CommentExtractor\n\n=head1 DESCRIPTION\n\nExtracts comments from source code.\nIf no comment extractor is known for a language, then extracts top lines from source.\n\n=head1 COPYRIGHT AND LICENSE\n\nCopyright (C) 2009-2014  Yuki Manabe and Daniel M. German\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as\npublished by the Free Software Foundation; either version 2 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n=cut\n"], "filenames": ["Changes", "Makefile.PL", "lib/Ninka.pm", "lib/Ninka/CommentExtractor.pm"], "buggy_code_start_loc": [0, 29, 12, 6], "buggy_code_end_loc": [0, 29, 13, 66], "fixing_code_start_loc": [1, 30, 12, 7], "fixing_code_end_loc": [15, 32, 13, 85], "type": "CWE-74", "message": "Ninka before 1.3.2 might allow remote attackers to obtain sensitive information, manipulate license compliance scan results, or cause a denial of service (process hang) via a crafted filename.", "other": {"cve": {"id": "CVE-2017-7239", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-10T15:59:00.550", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Ninka before 1.3.2 might allow remote attackers to obtain sensitive information, manipulate license compliance scan results, or cause a denial of service (process hang) via a crafted filename."}, {"lang": "es", "value": "Ninka en versiones anteriores a 1.3.2 podr\u00eda permitir a atacantes remotos obtener informaci\u00f3n confidencial, manipular resultados de an\u00e1lisis de cumplimiento de licencias o provocar una denegaci\u00f3n de servicio (bloqueo de proceso) a trav\u00e9s de un nombre de archivo manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ninka_project:ninka:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.3.0", "matchCriteriaId": "F5CE98CB-A5E0-4B9C-A7FD-EEA504F2106B"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2017/04/03/3", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/97325", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/dmgerman/ninka/commit/81f185261c8863c5b84344ee31192870be939faf", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dmgerman/ninka/commit/81f185261c8863c5b84344ee31192870be939faf"}}