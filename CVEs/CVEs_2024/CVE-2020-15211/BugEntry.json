{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\n#include <stdint.h>\n#include <stdlib.h>\n\n#include <algorithm>\n#include <limits>\n#include <memory>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/cppmath.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n\nnamespace tflite {\n\nnamespace {\n\ninline TfLiteTensor* GetMutableInput(const TfLiteContext* context,\n                                     const TfLiteNode* node, int index) {\n  if (index >= 0 && index < node->inputs->size) {\n    const int tensor_index = node->inputs->data[index];\n    if (tensor_index != kTfLiteOptionalTensor) {\n      if (context->tensors != nullptr) {\n        return &context->tensors[tensor_index];\n      } else {\n        return context->GetTensor(context, tensor_index);\n      }\n    }\n  }\n  return nullptr;\n}\n\n}  // anonymous namespace.\n\nconst TfLiteTensor* GetInput(const TfLiteContext* context,\n                             const TfLiteNode* node, int index) {\n  return GetMutableInput(context, node, index);\n}\n\nTfLiteTensor* GetVariableInput(TfLiteContext* context, const TfLiteNode* node,\n                               int index) {\n  TfLiteTensor* tensor = GetMutableInput(context, node, index);\n  return tensor->is_variable ? tensor : nullptr;\n}\n\nTfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,\n                        int index) {\n  if (index >= 0 && index < node->outputs->size) {\n    const int tensor_index = node->outputs->data[index];\n    if (tensor_index != kTfLiteOptionalTensor) {\n      if (context->tensors != nullptr) {\n        return &context->tensors[tensor_index];\n      } else {\n        return context->GetTensor(context, tensor_index);\n      }\n    }\n  }\n  return nullptr;\n}\n\nconst TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,\n                                           const TfLiteNode* node, int index) {\n  const bool use_tensor = index < node->inputs->size &&\n                          node->inputs->data[index] != kTfLiteOptionalTensor;\n  if (use_tensor) {\n    return GetMutableInput(context, node, index);\n  }\n  return nullptr;\n}\n\n// Per-axis\nTfLiteStatus PopulateConvolutionQuantizationParams(\n    TfLiteContext* context, const TfLiteTensor* input,\n    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,\n    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,\n    int32_t* output_activation_min, int32_t* output_activation_max,\n    int32_t* per_channel_multiplier, int* per_channel_shift) {\n  const auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);\n  return PopulateConvolutionQuantizationParams(\n      context, input, filter, bias, output, activation, multiplier, shift,\n      output_activation_min, output_activation_max, per_channel_multiplier,\n      per_channel_shift, affine_quantization->scale->size);\n}\n\n// Per-axis & per-tensor\nTfLiteStatus PopulateConvolutionQuantizationParams(\n    TfLiteContext* context, const TfLiteTensor* input,\n    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,\n    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,\n    int32_t* output_activation_min, int32_t* output_activation_max,\n    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {\n  TF_LITE_ENSURE_EQ(context, input->quantization.type,\n                    kTfLiteAffineQuantization);\n  TF_LITE_ENSURE_EQ(context, filter->quantization.type,\n                    kTfLiteAffineQuantization);\n  // TODO(jianlijianli): Enable bias type check and bias scale == input scale\n  // * filter scale for each channel in affine quantization once bias\n  // quantization is properly populated.\n  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,\n  // kTfLiteAffineQuantization);\n\n  // Check data type.\n  const auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);\n  TF_LITE_ENSURE(context, affine_quantization);\n  TF_LITE_ENSURE(context, affine_quantization->scale);\n  const bool is_per_channel = affine_quantization->scale->size > 1;\n  if (is_per_channel) {\n    //  Currently only Int8/Int16 is supported for per channel quantization.\n    TF_LITE_ENSURE(context,\n                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);\n    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);\n    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);\n    TF_LITE_ENSURE_EQ(\n        context, num_channels,\n        filter->dims->data[affine_quantization->quantized_dimension]);\n  }\n\n  // Populate multiplier and shift using affine quantization.\n  const float input_scale = input->params.scale;\n  const float output_scale = output->params.scale;\n  const float* filter_scales = affine_quantization->scale->data;\n  for (int i = 0; i < num_channels; ++i) {\n    // If per-tensor quantization parameter is specified, broadcast it along the\n    // quantization dimension (channels_out).\n    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];\n    const double filter_scale = static_cast<double>(scale);\n    const double effective_output_scale = static_cast<double>(input_scale) *\n                                          filter_scale /\n                                          static_cast<double>(output_scale);\n    int32_t significand;\n    int channel_shift;\n    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);\n    per_channel_multiplier[i] = significand;\n    per_channel_shift[i] = channel_shift;\n  }\n\n  // Populate scalar quantization parameters.\n  // This check on legacy quantization parameters is kept only for backward\n  // compatibility.\n  if (input->type == kTfLiteUInt8) {\n    // Check bias scale == input scale * filter scale.\n    double real_multiplier = 0.0;\n    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(\n        context, input, filter, bias, output, &real_multiplier));\n    int exponent;\n\n    // Populate quantization parameters with multiplier and shift.\n    QuantizeMultiplier(real_multiplier, multiplier, &exponent);\n    *shift = -exponent;\n  }\n  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||\n      input->type == kTfLiteInt16) {\n    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(\n        context, activation, output, output_activation_min,\n        output_activation_max));\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,\n                                              const TfLiteTensor* input,\n                                              const TfLiteTensor* filter,\n                                              const TfLiteTensor* bias,\n                                              TfLiteTensor* output,\n                                              double* multiplier) {\n  const double input_product_scale = static_cast<double>(input->params.scale) *\n                                     static_cast<double>(filter->params.scale);\n  // TODO(ahentz): The following conditions must be guaranteed by the training\n  // pipeline.\n  if (bias) {\n    const double bias_scale = static_cast<double>(bias->params.scale);\n    // Here we're making sure the input_product_scale & bias_scale are about the\n    // same. Since we have:\n    // (output - output_zp) * output_scale =\n    // input_product_scale * input_product + bias * bias_scale ---- (0)\n    //\n    // (0) equals:\n    // (input_product + bias) * input_product_scale ----- (1)\n    //           +\n    // bias * (bias_scale - input_product_scale)   ------ (2)\n    //\n    // For the real kernel computation, we're doing (1), so we really need to\n    // make sure (2) has minimum impact on the output, so:\n    // bias * (bias_scale - input_product_scale) / output_scale should be\n    // a small number for an integer.\n    // Since normally bias should be within a small range.\n    // We should expect (bias_scale - input_product_scale) / output_scale to\n    // be a small number like 0.02.\n    const double scale_diff = std::abs(input_product_scale - bias_scale);\n    const double output_scale = static_cast<double>(output->params.scale);\n\n    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);\n  }\n  return GetQuantizedConvolutionMultipler(context, input, filter, output,\n                                          multiplier);\n}\n\nTfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,\n                                              const TfLiteTensor* input,\n                                              const TfLiteTensor* filter,\n                                              TfLiteTensor* output,\n                                              double* multiplier) {\n  const double input_product_scale =\n      static_cast<double>(input->params.scale * filter->params.scale);\n  TF_LITE_ENSURE(context, input_product_scale >= 0);\n  *multiplier = input_product_scale / static_cast<double>(output->params.scale);\n\n  return kTfLiteOk;\n}\n\nnamespace {\nvoid CalculateActivationRangeQuantizedImpl(TfLiteFusedActivation activation,\n                                           int32_t qmin, int32_t qmax,\n                                           TfLiteTensor* output,\n                                           int32_t* act_min, int32_t* act_max) {\n  const auto scale = output->params.scale;\n  const auto zero_point = output->params.zero_point;\n\n  auto quantize = [scale, zero_point](float f) {\n    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));\n  };\n\n  if (activation == kTfLiteActRelu) {\n    *act_min = std::max(qmin, quantize(0.0));\n    *act_max = qmax;\n  } else if (activation == kTfLiteActRelu6) {\n    *act_min = std::max(qmin, quantize(0.0));\n    *act_max = std::min(qmax, quantize(6.0));\n  } else if (activation == kTfLiteActReluN1To1) {\n    *act_min = std::max(qmin, quantize(-1.0));\n    *act_max = std::min(qmax, quantize(1.0));\n  } else {\n    *act_min = qmin;\n    *act_max = qmax;\n  }\n}\n}  // namespace\n\nTfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,\n                                               TfLiteFusedActivation activation,\n                                               TfLiteTensor* output,\n                                               int32_t* act_min,\n                                               int32_t* act_max) {\n  int32_t qmin = 0;\n  int32_t qmax = 0;\n  if (output->type == kTfLiteUInt8) {\n    qmin = std::numeric_limits<uint8_t>::min();\n    qmax = std::numeric_limits<uint8_t>::max();\n  } else if (output->type == kTfLiteInt8) {\n    qmin = std::numeric_limits<int8_t>::min();\n    qmax = std::numeric_limits<int8_t>::max();\n  } else if (output->type == kTfLiteInt16) {\n    qmin = std::numeric_limits<int16_t>::min();\n    qmax = std::numeric_limits<int16_t>::max();\n  } else {\n    TF_LITE_ENSURE(context, false);\n  }\n\n  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,\n                                        act_max);\n  return kTfLiteOk;\n}\n\nbool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {\n  return TfLiteIntArrayEqual(input1->dims, input2->dims);\n}\n\n// TODO(petewarden): Having macros around this is ugly, look at other strategies\n// before replicating this approach elsewhere.\n#ifndef TF_LITE_STATIC_MEMORY\nTfLiteStatus CalculateShapeForBroadcast(TfLiteContext* context,\n                                        const TfLiteTensor* input1,\n                                        const TfLiteTensor* input2,\n                                        TfLiteIntArray** output_shape) {\n  int dims1 = NumDimensions(input1);\n  int dims2 = NumDimensions(input2);\n  int out_dims = std::max(dims1, dims2);\n  if (NumElements(input1) == 0) {\n    *output_shape = TfLiteIntArrayCopy(input1->dims);\n    return kTfLiteOk;\n  }\n  std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(\n      TfLiteIntArrayCreate(out_dims), TfLiteIntArrayFree);\n  for (int i = 0; i < out_dims; ++i) {\n    int d1 = i >= dims1 ? 1 : SizeOfDimension(input1, dims1 - i - 1);\n    int d2 = i >= dims2 ? 1 : SizeOfDimension(input2, dims2 - i - 1);\n    TF_LITE_ENSURE(context, d1 == d2 || d1 == 1 || d2 == 1);\n    shape->data[out_dims - i - 1] = std::max(d1, d2);\n  }\n  *output_shape = shape.release();\n  return kTfLiteOk;\n}\n\nTfLiteStatus CalculateShapeForBroadcast(TfLiteContext* context,\n                                        const TfLiteTensor* input1,\n                                        const TfLiteTensor* input2,\n                                        const TfLiteTensor* input3,\n                                        TfLiteIntArray** output_shape) {\n  int dims1 = NumDimensions(input1);\n  int dims2 = NumDimensions(input2);\n  int dims3 = NumDimensions(input3);\n  int out_dims = std::max(std::max(dims1, dims2), dims3);\n  std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(\n      TfLiteIntArrayCreate(out_dims), TfLiteIntArrayFree);\n  for (int i = 0; i < out_dims; ++i) {\n    int d1 = i >= dims1 ? 1 : SizeOfDimension(input1, dims1 - i - 1);\n    int d2 = i >= dims2 ? 1 : SizeOfDimension(input2, dims2 - i - 1);\n    int d3 = i >= dims3 ? 1 : SizeOfDimension(input3, dims3 - i - 1);\n    int max_value = std::max(std::max(d1, d2), d3);\n    TF_LITE_ENSURE(context, d1 == 1 || d1 == max_value);\n    TF_LITE_ENSURE(context, d2 == 1 || d2 == max_value);\n    TF_LITE_ENSURE(context, d3 == 1 || d3 == max_value);\n    shape->data[out_dims - i - 1] = max_value;\n  }\n  *output_shape = shape.release();\n  return kTfLiteOk;\n}\n#endif  // TF_LITE_STATIC_MEMORY\n\n}  // namespace tflite\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\n#include <stdint.h>\n#include <stdlib.h>\n\n#include <algorithm>\n#include <limits>\n#include <memory>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/cppmath.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n\nnamespace tflite {\n\nnamespace {\n\ninline TfLiteTensor* GetMutableInput(const TfLiteContext* context,\n                                     const TfLiteNode* node, int index) {\n  if (index >= 0 && index < node->inputs->size) {\n    const int tensor_index = node->inputs->data[index];\n    if (tensor_index != kTfLiteOptionalTensor) {\n      if (context->tensors != nullptr) {\n        return &context->tensors[tensor_index];\n      } else {\n        return context->GetTensor(context, tensor_index);\n      }\n    }\n  }\n  return nullptr;\n}\n\n}  // anonymous namespace.\n\nconst TfLiteTensor* GetInput(const TfLiteContext* context,\n                             const TfLiteNode* node, int index) {\n  return GetMutableInput(context, node, index);\n}\n\nTfLiteTensor* GetVariableInput(TfLiteContext* context, const TfLiteNode* node,\n                               int index) {\n  TfLiteTensor* tensor = GetMutableInput(context, node, index);\n  return tensor->is_variable ? tensor : nullptr;\n}\n\nTfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,\n                        int index) {\n  if (index >= 0 && index < node->outputs->size) {\n    const int tensor_index = node->outputs->data[index];\n    if (tensor_index != kTfLiteOptionalTensor) {\n      if (context->tensors != nullptr) {\n        return &context->tensors[tensor_index];\n      } else {\n        return context->GetTensor(context, tensor_index);\n      }\n    }\n  }\n  return nullptr;\n}\n\nconst TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,\n                                           const TfLiteNode* node, int index) {\n  return GetInput(context, node, index);\n}\n\n// Per-axis\nTfLiteStatus PopulateConvolutionQuantizationParams(\n    TfLiteContext* context, const TfLiteTensor* input,\n    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,\n    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,\n    int32_t* output_activation_min, int32_t* output_activation_max,\n    int32_t* per_channel_multiplier, int* per_channel_shift) {\n  const auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);\n  return PopulateConvolutionQuantizationParams(\n      context, input, filter, bias, output, activation, multiplier, shift,\n      output_activation_min, output_activation_max, per_channel_multiplier,\n      per_channel_shift, affine_quantization->scale->size);\n}\n\n// Per-axis & per-tensor\nTfLiteStatus PopulateConvolutionQuantizationParams(\n    TfLiteContext* context, const TfLiteTensor* input,\n    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,\n    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,\n    int32_t* output_activation_min, int32_t* output_activation_max,\n    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {\n  TF_LITE_ENSURE_EQ(context, input->quantization.type,\n                    kTfLiteAffineQuantization);\n  TF_LITE_ENSURE_EQ(context, filter->quantization.type,\n                    kTfLiteAffineQuantization);\n  // TODO(jianlijianli): Enable bias type check and bias scale == input scale\n  // * filter scale for each channel in affine quantization once bias\n  // quantization is properly populated.\n  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,\n  // kTfLiteAffineQuantization);\n\n  // Check data type.\n  const auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);\n  TF_LITE_ENSURE(context, affine_quantization);\n  TF_LITE_ENSURE(context, affine_quantization->scale);\n  const bool is_per_channel = affine_quantization->scale->size > 1;\n  if (is_per_channel) {\n    //  Currently only Int8/Int16 is supported for per channel quantization.\n    TF_LITE_ENSURE(context,\n                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);\n    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);\n    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);\n    TF_LITE_ENSURE_EQ(\n        context, num_channels,\n        filter->dims->data[affine_quantization->quantized_dimension]);\n  }\n\n  // Populate multiplier and shift using affine quantization.\n  const float input_scale = input->params.scale;\n  const float output_scale = output->params.scale;\n  const float* filter_scales = affine_quantization->scale->data;\n  for (int i = 0; i < num_channels; ++i) {\n    // If per-tensor quantization parameter is specified, broadcast it along the\n    // quantization dimension (channels_out).\n    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];\n    const double filter_scale = static_cast<double>(scale);\n    const double effective_output_scale = static_cast<double>(input_scale) *\n                                          filter_scale /\n                                          static_cast<double>(output_scale);\n    int32_t significand;\n    int channel_shift;\n    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);\n    per_channel_multiplier[i] = significand;\n    per_channel_shift[i] = channel_shift;\n  }\n\n  // Populate scalar quantization parameters.\n  // This check on legacy quantization parameters is kept only for backward\n  // compatibility.\n  if (input->type == kTfLiteUInt8) {\n    // Check bias scale == input scale * filter scale.\n    double real_multiplier = 0.0;\n    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(\n        context, input, filter, bias, output, &real_multiplier));\n    int exponent;\n\n    // Populate quantization parameters with multiplier and shift.\n    QuantizeMultiplier(real_multiplier, multiplier, &exponent);\n    *shift = -exponent;\n  }\n  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||\n      input->type == kTfLiteInt16) {\n    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(\n        context, activation, output, output_activation_min,\n        output_activation_max));\n  }\n  return kTfLiteOk;\n}\n\nTfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,\n                                              const TfLiteTensor* input,\n                                              const TfLiteTensor* filter,\n                                              const TfLiteTensor* bias,\n                                              TfLiteTensor* output,\n                                              double* multiplier) {\n  const double input_product_scale = static_cast<double>(input->params.scale) *\n                                     static_cast<double>(filter->params.scale);\n  // TODO(ahentz): The following conditions must be guaranteed by the training\n  // pipeline.\n  if (bias) {\n    const double bias_scale = static_cast<double>(bias->params.scale);\n    // Here we're making sure the input_product_scale & bias_scale are about the\n    // same. Since we have:\n    // (output - output_zp) * output_scale =\n    // input_product_scale * input_product + bias * bias_scale ---- (0)\n    //\n    // (0) equals:\n    // (input_product + bias) * input_product_scale ----- (1)\n    //           +\n    // bias * (bias_scale - input_product_scale)   ------ (2)\n    //\n    // For the real kernel computation, we're doing (1), so we really need to\n    // make sure (2) has minimum impact on the output, so:\n    // bias * (bias_scale - input_product_scale) / output_scale should be\n    // a small number for an integer.\n    // Since normally bias should be within a small range.\n    // We should expect (bias_scale - input_product_scale) / output_scale to\n    // be a small number like 0.02.\n    const double scale_diff = std::abs(input_product_scale - bias_scale);\n    const double output_scale = static_cast<double>(output->params.scale);\n\n    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);\n  }\n  return GetQuantizedConvolutionMultipler(context, input, filter, output,\n                                          multiplier);\n}\n\nTfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,\n                                              const TfLiteTensor* input,\n                                              const TfLiteTensor* filter,\n                                              TfLiteTensor* output,\n                                              double* multiplier) {\n  const double input_product_scale =\n      static_cast<double>(input->params.scale * filter->params.scale);\n  TF_LITE_ENSURE(context, input_product_scale >= 0);\n  *multiplier = input_product_scale / static_cast<double>(output->params.scale);\n\n  return kTfLiteOk;\n}\n\nnamespace {\nvoid CalculateActivationRangeQuantizedImpl(TfLiteFusedActivation activation,\n                                           int32_t qmin, int32_t qmax,\n                                           TfLiteTensor* output,\n                                           int32_t* act_min, int32_t* act_max) {\n  const auto scale = output->params.scale;\n  const auto zero_point = output->params.zero_point;\n\n  auto quantize = [scale, zero_point](float f) {\n    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));\n  };\n\n  if (activation == kTfLiteActRelu) {\n    *act_min = std::max(qmin, quantize(0.0));\n    *act_max = qmax;\n  } else if (activation == kTfLiteActRelu6) {\n    *act_min = std::max(qmin, quantize(0.0));\n    *act_max = std::min(qmax, quantize(6.0));\n  } else if (activation == kTfLiteActReluN1To1) {\n    *act_min = std::max(qmin, quantize(-1.0));\n    *act_max = std::min(qmax, quantize(1.0));\n  } else {\n    *act_min = qmin;\n    *act_max = qmax;\n  }\n}\n}  // namespace\n\nTfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,\n                                               TfLiteFusedActivation activation,\n                                               TfLiteTensor* output,\n                                               int32_t* act_min,\n                                               int32_t* act_max) {\n  int32_t qmin = 0;\n  int32_t qmax = 0;\n  if (output->type == kTfLiteUInt8) {\n    qmin = std::numeric_limits<uint8_t>::min();\n    qmax = std::numeric_limits<uint8_t>::max();\n  } else if (output->type == kTfLiteInt8) {\n    qmin = std::numeric_limits<int8_t>::min();\n    qmax = std::numeric_limits<int8_t>::max();\n  } else if (output->type == kTfLiteInt16) {\n    qmin = std::numeric_limits<int16_t>::min();\n    qmax = std::numeric_limits<int16_t>::max();\n  } else {\n    TF_LITE_ENSURE(context, false);\n  }\n\n  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,\n                                        act_max);\n  return kTfLiteOk;\n}\n\nbool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {\n  return TfLiteIntArrayEqual(input1->dims, input2->dims);\n}\n\n// TODO(petewarden): Having macros around this is ugly, look at other strategies\n// before replicating this approach elsewhere.\n#ifndef TF_LITE_STATIC_MEMORY\nTfLiteStatus CalculateShapeForBroadcast(TfLiteContext* context,\n                                        const TfLiteTensor* input1,\n                                        const TfLiteTensor* input2,\n                                        TfLiteIntArray** output_shape) {\n  int dims1 = NumDimensions(input1);\n  int dims2 = NumDimensions(input2);\n  int out_dims = std::max(dims1, dims2);\n  if (NumElements(input1) == 0) {\n    *output_shape = TfLiteIntArrayCopy(input1->dims);\n    return kTfLiteOk;\n  }\n  std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(\n      TfLiteIntArrayCreate(out_dims), TfLiteIntArrayFree);\n  for (int i = 0; i < out_dims; ++i) {\n    int d1 = i >= dims1 ? 1 : SizeOfDimension(input1, dims1 - i - 1);\n    int d2 = i >= dims2 ? 1 : SizeOfDimension(input2, dims2 - i - 1);\n    TF_LITE_ENSURE(context, d1 == d2 || d1 == 1 || d2 == 1);\n    shape->data[out_dims - i - 1] = std::max(d1, d2);\n  }\n  *output_shape = shape.release();\n  return kTfLiteOk;\n}\n\nTfLiteStatus CalculateShapeForBroadcast(TfLiteContext* context,\n                                        const TfLiteTensor* input1,\n                                        const TfLiteTensor* input2,\n                                        const TfLiteTensor* input3,\n                                        TfLiteIntArray** output_shape) {\n  int dims1 = NumDimensions(input1);\n  int dims2 = NumDimensions(input2);\n  int dims3 = NumDimensions(input3);\n  int out_dims = std::max(std::max(dims1, dims2), dims3);\n  std::unique_ptr<TfLiteIntArray, void (*)(TfLiteIntArray*)> shape(\n      TfLiteIntArrayCreate(out_dims), TfLiteIntArrayFree);\n  for (int i = 0; i < out_dims; ++i) {\n    int d1 = i >= dims1 ? 1 : SizeOfDimension(input1, dims1 - i - 1);\n    int d2 = i >= dims2 ? 1 : SizeOfDimension(input2, dims2 - i - 1);\n    int d3 = i >= dims3 ? 1 : SizeOfDimension(input3, dims3 - i - 1);\n    int max_value = std::max(std::max(d1, d2), d3);\n    TF_LITE_ENSURE(context, d1 == 1 || d1 == max_value);\n    TF_LITE_ENSURE(context, d2 == 1 || d2 == max_value);\n    TF_LITE_ENSURE(context, d3 == 1 || d3 == max_value);\n    shape->data[out_dims - i - 1] = max_value;\n  }\n  *output_shape = shape.release();\n  return kTfLiteOk;\n}\n#endif  // TF_LITE_STATIC_MEMORY\n\n}  // namespace tflite\n"], "filenames": ["tensorflow/lite/kernels/kernel_util.cc"], "buggy_code_start_loc": [78], "buggy_code_end_loc": [84], "fixing_code_start_loc": [78], "fixing_code_end_loc": [79], "type": "CWE-125", "message": "In TensorFlow Lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative `-1` value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the `-1` index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue is patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83), and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1. A potential workaround would be to add a custom `Verifier` to the model loading code to ensure that only operators which accept optional inputs use the `-1` special value and only for the tensors that they expect to be optional. Since this allow-list type approach is erro-prone, we advise upgrading to the patched code.", "other": {"cve": {"id": "CVE-2020-15211", "sourceIdentifier": "security-advisories@github.com", "published": "2020-09-25T19:15:16.400", "lastModified": "2021-09-16T15:45:11.130", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In TensorFlow Lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative `-1` value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the `-1` index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue is patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83), and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1. A potential workaround would be to add a custom `Verifier` to the model loading code to ensure that only operators which accept optional inputs use the `-1` special value and only for the tensors that they expect to be optional. Since this allow-list type approach is erro-prone, we advise upgrading to the patched code."}, {"lang": "es", "value": "En TensorFlow Lite versiones anteriores a 1.15.4, 2.0.3, 2.1.2, 2.2.1 y 2.3.1, los modelos guardados en formato flatbuffer usan un esquema de indexaci\u00f3n doble: un modelo tiene un conjunto de subgr\u00e1ficos, cada subgr\u00e1fico tiene un conjunto de operadores y cada operador tiene un conjunto de tensores de entrada/salida. El formato flatbuffer usa \u00edndices para los tensores, indexando en una matriz de tensores que es propiedad del subgr\u00e1fico. Esto resulta en un patr\u00f3n de indexaci\u00f3n de doble matriz cuando intenta obtener los datos de cada tensor. Sin embargo, algunos operadores pueden tener algunos tensores opcionales. Para manejar este escenario, el modelo flatbuffer usa un valor negativo \"-1\" como \u00edndice para estos tensores. Esto resulta en un cubierta especial durante la comprobaci\u00f3n en el momento de la carga del modelo. Desafortunadamente, esto significa que el \u00edndice \"-1\" es un \u00edndice tensorial v\u00e1lido para cualquier operador, incluyendo aquellos que no esperan entradas opcionales e incluso para tensores de salida. Por tanto, esto permite escribir y leer desde fuera de los l\u00edmites de los arreglos asignados de la pila, aunque solo en un desplazamiento espec\u00edfico desde el inicio de estos arreglos. Esto resulta en gadgets de lectura y escritura, aunque con un alcance muy limitado. El problema es parcheado en varias commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21 y fff2c83) y es publicado en TensorFlow versiones 1.15.4, 2.0.3, 2.1.2, 2.2.1 o 2.3.1. Una soluci\u00f3n alternativa potencial ser\u00eda agregar un \"Verifier\" personalizado al c\u00f3digo de carga del modelo para garantizar que solo los operadores que aceptan entradas opcionales usen el valor especial \"-1\" y solo para los tensores que esperan que sean opcionales. Dado que este enfoque de tipo allow-list es propenso a errores, recomendamos actualizar al c\u00f3digo parcheado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}, {"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:lite:*:*:*", "versionEndExcluding": "1.15.4", "matchCriteriaId": "7A5421A9-693F-472A-9A21-43950C884C77"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:lite:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.0.3", "matchCriteriaId": "B0FEB74E-5E54-4A2F-910C-FA1812C73DB2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:lite:*:*:*", "versionStartIncluding": "2.1.0", "versionEndExcluding": "2.1.2", "matchCriteriaId": "47D83682-6615-49BC-8043-F36B9D017578"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:lite:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.1", "matchCriteriaId": "323B716A-E8F7-4CDA-B8FD-A56977D59C02"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:lite:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.1", "matchCriteriaId": "C09502A8-B667-4867-BEBD-40333E98A601"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.2:*:*:*:*:*:*:*", "matchCriteriaId": "B009C22E-30A4-4288-BCF6-C3E81DEAF45A"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/00302787b788c5ff04cb6f62aed5a74d936e86c0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/1970c2158b1ffa416d159d03c3370b9a462aee35", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/46d5b0852528ddfd614ded79bccc75589f801bd9", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/cd31fd0ce0449a9e0f83dcad08d6ed7f1d6bef3f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/e11f55585f614645b360563072ffeb5c3eeff162", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/fff2c8326280c07733828f990548979bdc893859", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cvpc-8phh-8f45", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/00302787b788c5ff04cb6f62aed5a74d936e86c0"}}