{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace batch_to_space_nd {\n\n// This file has two implementations of BatchToSpaceND.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nstruct BatchToSpaceNDContext {\n  BatchToSpaceNDContext(TfLiteContext* context, TfLiteNode* node) {\n    input = GetInput(context, node, 0);\n    block_shape = GetInput(context, node, 1);\n    crops = GetInput(context, node, 2);\n    output = GetOutput(context, node, 0);\n  }\n  const TfLiteTensor* input;\n  const TfLiteTensor* block_shape;\n  const TfLiteTensor* crops;\n  TfLiteTensor* output;\n};\n\n// Currently, only 3D NHC or 4D NHWC input/output op_context are supported.\n// In case of 3D input,it will be converted to 4D by adding W=1 to be NH1C.\n// The 4D array need to have exactly 2 spatial dimensions.\n// TODO(ycling): Support arbitrary dimension in BatchToSpaceND.\nconst int kInputMinDimensionNum = 3;\nconst int kInputMaxDimensionNum = 4;\n\nTfLiteStatus ResizeOutputTensor(TfLiteContext* context,\n                                BatchToSpaceNDContext* op_context) {\n  TfLiteIntArray* input_size = op_context->input->dims;\n  const int* block_shape = GetTensorData<int32>(op_context->block_shape);\n  const int* crops = GetTensorData<int32>(op_context->crops);\n\n  int spatial_dims_num = input_size->size - 2;\n  // Block_shape should be a 1D tensor with dimension [spatial_dims_num].\n  TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->block_shape), 1);\n  TF_LITE_ENSURE_EQ(context, op_context->block_shape->dims->data[0],\n                    spatial_dims_num);\n  // Crops should be a 2D tensor with dimension [spatial_dims_num, 2].\n  TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->crops), 2);\n  TF_LITE_ENSURE_EQ(context, op_context->crops->dims->data[0],\n                    spatial_dims_num);\n  TF_LITE_ENSURE_EQ(context, op_context->crops->dims->data[1], 2);\n\n  for (int i = 0; i < spatial_dims_num * 2; ++i) {\n    TF_LITE_ENSURE(context, crops[i] >= 0);\n  }\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCopy(input_size);\n  int output_batch_size = input_size->data[0];\n  for (int dim = 0; dim < spatial_dims_num; ++dim) {\n    // Number of batch must be multiple of (block_shape[dim]).\n    TF_LITE_ENSURE_EQ(context, output_batch_size % block_shape[dim], 0);\n    output_batch_size = output_batch_size / block_shape[dim];\n    output_size->data[dim + 1] = input_size->data[dim + 1] * block_shape[dim] -\n                                 crops[dim * 2] - crops[dim * 2 + 1];\n  }\n\n  output_size->data[0] = output_batch_size;\n  output_size->data[input_size->size - 1] =\n      input_size->data[input_size->size - 1];\n\n  return context->ResizeTensor(context, op_context->output, output_size);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  BatchToSpaceNDContext op_context(context, node);\n  TF_LITE_ENSURE(context,\n                 NumDimensions(op_context.input) >= kInputMinDimensionNum);\n  TF_LITE_ENSURE(context,\n                 NumDimensions(op_context.input) <= kInputMaxDimensionNum);\n  TF_LITE_ENSURE_EQ(context, op_context.input->type, op_context.output->type);\n\n  if (!IsConstantTensor(op_context.block_shape) ||\n      !IsConstantTensor(op_context.crops)) {\n    SetTensorToDynamic(op_context.output);\n    return kTfLiteOk;\n  }\n  return ResizeOutputTensor(context, &op_context);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  BatchToSpaceNDContext op_context(context, node);\n\n  // Resize the output tensor if the output tensor is dynamic.\n  if (IsDynamicTensor(op_context.output)) {\n    TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, &op_context));\n  }\n\n#define TF_LITE_BATCH_TO_SPACE_ND(type, scalar)                        \\\n  type::BatchToSpaceND(GetTensorShape(op_context.input),               \\\n                       GetTensorData<scalar>(op_context.input),        \\\n                       GetTensorShape(op_context.block_shape),         \\\n                       GetTensorData<int32_t>(op_context.block_shape), \\\n                       GetTensorShape(op_context.crops),               \\\n                       GetTensorData<int32_t>(op_context.crops),       \\\n                       GetTensorShape(op_context.output),              \\\n                       GetTensorData<scalar>(op_context.output))\n  switch (op_context.input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, float);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, float);\n      }\n      break;\n    case kTfLiteUInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, uint8_t);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, uint8_t);\n      }\n      break;\n    case kTfLiteInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, int8_t);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, int8_t);\n      }\n      break;\n    case kTfLiteInt32:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, int32_t);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, int32_t);\n      }\n      break;\n    case kTfLiteInt64:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, int64_t);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, int64_t);\n      }\n      break;\n    default:\n      context->ReportError(\n          context, \"Type %d is currently not supported by BatchToSpace.\",\n          op_context.input->type);\n      return kTfLiteError;\n  }\n#undef TF_LITE_BATCH_TO_SPACE_ND\n  return kTfLiteOk;\n}\n\n}  // namespace batch_to_space_nd\n\nTfLiteRegistration* Register_BATCH_TO_SPACE_ND_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, batch_to_space_nd::Prepare,\n      batch_to_space_nd::Eval<batch_to_space_nd::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_BATCH_TO_SPACE_ND_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, batch_to_space_nd::Prepare,\n      batch_to_space_nd::Eval<batch_to_space_nd::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_BATCH_TO_SPACE_ND() {\n  return Register_BATCH_TO_SPACE_ND_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <stdint.h>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace batch_to_space_nd {\n\n// This file has two implementations of BatchToSpaceND.\nenum KernelType {\n  kReference,\n  kGenericOptimized,\n};\n\nstruct BatchToSpaceNDContext {\n  BatchToSpaceNDContext(TfLiteContext* context, TfLiteNode* node) {\n    input = GetInput(context, node, 0);\n    block_shape = GetInput(context, node, 1);\n    crops = GetInput(context, node, 2);\n    output = GetOutput(context, node, 0);\n  }\n  const TfLiteTensor* input;\n  const TfLiteTensor* block_shape;\n  const TfLiteTensor* crops;\n  TfLiteTensor* output;\n};\n\n// Currently, only 3D NHC or 4D NHWC input/output op_context are supported.\n// In case of 3D input,it will be converted to 4D by adding W=1 to be NH1C.\n// The 4D array need to have exactly 2 spatial dimensions.\n// TODO(ycling): Support arbitrary dimension in BatchToSpaceND.\nconst int kInputMinDimensionNum = 3;\nconst int kInputMaxDimensionNum = 4;\n\nTfLiteStatus ResizeOutputTensor(TfLiteContext* context,\n                                BatchToSpaceNDContext* op_context) {\n  TfLiteIntArray* input_size = op_context->input->dims;\n  const int* block_shape = GetTensorData<int32>(op_context->block_shape);\n  const int* crops = GetTensorData<int32>(op_context->crops);\n\n  int spatial_dims_num = input_size->size - 2;\n  // Block_shape should be a 1D tensor with dimension [spatial_dims_num].\n  TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->block_shape), 1);\n  TF_LITE_ENSURE_EQ(context, op_context->block_shape->dims->data[0],\n                    spatial_dims_num);\n  // Crops should be a 2D tensor with dimension [spatial_dims_num, 2].\n  TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->crops), 2);\n  TF_LITE_ENSURE_EQ(context, op_context->crops->dims->data[0],\n                    spatial_dims_num);\n  TF_LITE_ENSURE_EQ(context, op_context->crops->dims->data[1], 2);\n\n  for (int i = 0; i < spatial_dims_num * 2; ++i) {\n    TF_LITE_ENSURE(context, crops[i] >= 0);\n  }\n\n  TfLiteIntArray* output_size = TfLiteIntArrayCopy(input_size);\n  int output_batch_size = input_size->data[0];\n  for (int dim = 0; dim < spatial_dims_num; ++dim) {\n    // Number of batch must be multiple of (block_shape[dim]).\n    TF_LITE_ENSURE(context, block_shape[dim] != 0);\n    TF_LITE_ENSURE_EQ(context, output_batch_size % block_shape[dim], 0);\n    output_batch_size = output_batch_size / block_shape[dim];\n    output_size->data[dim + 1] = input_size->data[dim + 1] * block_shape[dim] -\n                                 crops[dim * 2] - crops[dim * 2 + 1];\n  }\n\n  output_size->data[0] = output_batch_size;\n  output_size->data[input_size->size - 1] =\n      input_size->data[input_size->size - 1];\n\n  return context->ResizeTensor(context, op_context->output, output_size);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  BatchToSpaceNDContext op_context(context, node);\n  TF_LITE_ENSURE(context,\n                 NumDimensions(op_context.input) >= kInputMinDimensionNum);\n  TF_LITE_ENSURE(context,\n                 NumDimensions(op_context.input) <= kInputMaxDimensionNum);\n  TF_LITE_ENSURE_EQ(context, op_context.input->type, op_context.output->type);\n\n  if (!IsConstantTensor(op_context.block_shape) ||\n      !IsConstantTensor(op_context.crops)) {\n    SetTensorToDynamic(op_context.output);\n    return kTfLiteOk;\n  }\n  return ResizeOutputTensor(context, &op_context);\n}\n\ntemplate <KernelType kernel_type>\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  BatchToSpaceNDContext op_context(context, node);\n\n  // Resize the output tensor if the output tensor is dynamic.\n  if (IsDynamicTensor(op_context.output)) {\n    TF_LITE_ENSURE_OK(context, ResizeOutputTensor(context, &op_context));\n  }\n\n#define TF_LITE_BATCH_TO_SPACE_ND(type, scalar)                        \\\n  type::BatchToSpaceND(GetTensorShape(op_context.input),               \\\n                       GetTensorData<scalar>(op_context.input),        \\\n                       GetTensorShape(op_context.block_shape),         \\\n                       GetTensorData<int32_t>(op_context.block_shape), \\\n                       GetTensorShape(op_context.crops),               \\\n                       GetTensorData<int32_t>(op_context.crops),       \\\n                       GetTensorShape(op_context.output),              \\\n                       GetTensorData<scalar>(op_context.output))\n  switch (op_context.input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, float);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, float);\n      }\n      break;\n    case kTfLiteUInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, uint8_t);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, uint8_t);\n      }\n      break;\n    case kTfLiteInt8:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, int8_t);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, int8_t);\n      }\n      break;\n    case kTfLiteInt32:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, int32_t);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, int32_t);\n      }\n      break;\n    case kTfLiteInt64:\n      if (kernel_type == kReference) {\n        TF_LITE_BATCH_TO_SPACE_ND(reference_ops, int64_t);\n      } else {\n        TF_LITE_BATCH_TO_SPACE_ND(optimized_ops, int64_t);\n      }\n      break;\n    default:\n      context->ReportError(\n          context, \"Type %d is currently not supported by BatchToSpace.\",\n          op_context.input->type);\n      return kTfLiteError;\n  }\n#undef TF_LITE_BATCH_TO_SPACE_ND\n  return kTfLiteOk;\n}\n\n}  // namespace batch_to_space_nd\n\nTfLiteRegistration* Register_BATCH_TO_SPACE_ND_REF() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, batch_to_space_nd::Prepare,\n      batch_to_space_nd::Eval<batch_to_space_nd::kReference>};\n  return &r;\n}\n\nTfLiteRegistration* Register_BATCH_TO_SPACE_ND_GENERIC_OPT() {\n  static TfLiteRegistration r = {\n      nullptr, nullptr, batch_to_space_nd::Prepare,\n      batch_to_space_nd::Eval<batch_to_space_nd::kGenericOptimized>};\n  return &r;\n}\n\nTfLiteRegistration* Register_BATCH_TO_SPACE_ND() {\n  return Register_BATCH_TO_SPACE_ND_GENERIC_OPT();\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "filenames": ["tensorflow/lite/kernels/batch_to_space_nd.cc"], "buggy_code_start_loc": [80], "buggy_code_end_loc": [80], "fixing_code_start_loc": [81], "fixing_code_end_loc": [82], "type": "CWE-369", "message": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of the `BatchToSpaceNd` TFLite operator is vulnerable to a division by zero error(https://github.com/tensorflow/tensorflow/blob/b5ed552fe55895aee8bd8b191f744a069957d18d/tensorflow/lite/kernels/batch_to_space_nd.cc#L81-L82). An attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29593", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:15.117", "lastModified": "2021-05-19T16:29:51.790", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of the `BatchToSpaceNd` TFLite operator is vulnerable to a division by zero error(https://github.com/tensorflow/tensorflow/blob/b5ed552fe55895aee8bd8b191f744a069957d18d/tensorflow/lite/kernels/batch_to_space_nd.cc#L81-L82). An attacker can craft a model such that one dimension of the `block` input is 0. Hence, the corresponding value in `block_shape` is 0. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;La implementaci\u00f3n del operador TFLite \"BatchToSpaceNd\" es vulnerable a un error de divisi\u00f3n por cero (https://github.com/tensorflow/tensorflow/blob/b5ed552fe55895aee8bd8b191f744a069957d18d/tensorflow/lite/kernels/batch_to_space_ndL.cc#L).&#xa0;Un atacante puede dise\u00f1ar un modelo tal que una dimensi\u00f3n de la entrada del \"block\" sea 0. Por lo tanto, el valor correspondiente en  \"block_shape\" es 0. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango compatible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-369"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/2c74674348a4708ced58ad6eb1b23354df8ee044", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-cfx7-2xpc-8w4h", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/2c74674348a4708ced58ad6eb1b23354df8ee044"}}