{"buggy_code": ["<?php\n/**\n * @license http://www.mailcleaner.net/open/licence_en.html Mailcleaner Public License\n * @package mailcleaner\n * @author Olivier Diserens\n * @copyright 2009, Olivier Diserens\n * \n * controller for interface users\n */\n\nclass UserController extends Zend_Controller_Action\n{\n\n    public function loginAction()\n    {\n    \t$t = Zend_Registry::get('translate');\n    \t$this->view->headTitle($t->_('login'));\n    \t$this->view->layout()->setLayout('basic');\n    \t\n    \t$auth = Zend_Auth::getInstance();\n    \tif ($auth->hasIdentity()) {\n            $this->_redirect('/index');\n    \t}\n\n    \t$request = $this->getRequest(); \n        // determine the page the user was originally trying to request \n        $redirect = $request->getPost('redirect'); \n        if (strlen($redirect) == 0) \n            $redirect = $request->getServer('REQUEST_URI'); \n        if (strlen($redirect) == 0) \n            $redirect = '/index';\n\n\n        $request = $this->getRequest();\n        $form    = new Default_Form_Login();\n        if ($this->getRequest()->getParam('message')) {\n        \t$form->addErrorMessage($this->getRequest()->getParam('message'));\n        }\n        \n        if ($this->getRequest()->isPost() && $form->isValid($request->getPost())) {\n        \t\n    \t    $authAdapter = new Zend_Auth_Adapter_DbTable(\n                          Zend_Registry::get('writedb'),\n                          'administrator',\n                          'username',\n                          'password',\n                          'ENCRYPT(?, SUBSTRING(password,1,2))'\n                       );   \n            $authAdapter2 = new Zend_Auth_Adapter_DbTable(\n                          Zend_Registry::get('writedb'),\n                          'administrator',\n                          'username',\n                          'password',\n                          'ENCRYPT(?, SUBSTR(password, 1,12))'\n                       );   \n            ## This one should work for most crypt sheme, principaly crypt-sha512, regarldess of the salt length\n            $authAdapter4 = new Zend_Auth_Adapter_DbTable(\n                          Zend_Registry::get('writedb'),\n                          'administrator',\n                          'username',\n                          'password',\n                          'ENCRYPT(?, SUBSTR(password, 1, LOCATE(\\'$\\', password, LOCATE(\\'$\\', password, 4)+1)))'\n                       );   \n            $authAdapter3 = new Zend_Auth_Adapter_DbTable(\n                          Zend_Registry::get('writedb'),\n                          'administrator',\n                          'username',\n                          'password',\n                          'MD5(?)'\n                       );                          \n\n            $givenusername = $this->getRequest()->getParam('username');\n            $givenpassword = $this->getRequest()->getParam('password');\n            $authAdapter->setIdentity($givenusername)->setCredential($givenpassword);\n            $authAdapter2->setIdentity($givenusername)->setCredential($givenpassword);\n            $authAdapter3->setIdentity($givenusername)->setCredential($givenpassword);\n            $authAdapter4->setIdentity($givenusername)->setCredential($givenpassword);\n\n            $authpassed = false;\n            $result = $auth->authenticate($authAdapter4);\n            if ($result->isValid()) {\n            \t$authpassed = true;\n            } else {\n               $result = $auth->authenticate($authAdapter3);\n               if ($result->isValid()) {\n               \t   $authpassed = true;\n               } else {\n                   $result = $auth->authenticate($authAdapter2);\n                   if ($result->isValid()) {\n                   \t  $authpassed = true;\n                   } else {\n                       $result = $auth->authenticate($authAdapter);\n                       if ($result->isValid()) {\n                    \t  $authpassed = true;\n                       }\n                   }\n               }\n            }\n            if ($authpassed) {\n        \t    $user = new Default_Model_Administrator();\n        \t    $user->find($givenusername);\n        \t    Zend_Registry::set('user', $user);\n                $user->checkPasswordEncryptionSheme($givenpassword);\n                $this->_redirect($redirect);\n            } else {\n            \t$form->addError('badCredentials');\n            }\n         } else {\n         \tif ($this->getRequest()->isPost()) {\n            \t$form->addError('badDataGiven');\n         \t}\n         }\n         $this->view->error = '';\n         if (count($form->getErrorMessages() > 0)) {\n         \t$this->view->error = $t->_(array_pop($form->getErrorMessages()));\n         }\n         $this->view->form = $form;\n         $this->view->headLink()->appendStylesheet($this->view->css_path.'/login.css');\n         \n    }\n    \n    public function logoutAction()\n    {\n    \t$auth = Zend_Auth::getInstance();\n    \t$auth->clearIdentity();\n    \t$t = Zend_Registry::get('translate');\n    \t$this->_helper->getHelper('Redirector')->gotoSimple('login', 'user', null, array('message' => 'loggedOut'));\n    }\n\n    protected function setupSearchFields($request, $view) {\n        $view->email = $request->getParam('email');\n        $view->domain = $request->getParam('domain');\n        $view->username = $request->getParam('username');\n        $view->page = $request->getParam('page');\n    }\n    \n    public function searchAction()\n    {\n        $layout = Zend_Layout::getMvcInstance();\n    \t$view=$layout->getView();\n    \t$layout->disableLayout();\n    \t$view->addScriptPath(Zend_Registry::get('ajax_script_path')); \n        \n    \t$request = $this->getRequest();\n    \t\n    \trequire_once('ManageuserController.php');\n    \tManageuserController::searchUserOrEmails($this->getRequest(), $view);\n    \t\n    }\n    \n    \n}\n"], "fixing_code": ["<?php\n/**\n * @license http://www.mailcleaner.net/open/licence_en.html Mailcleaner Public License\n * @package mailcleaner\n * @author Olivier Diserens\n * @copyright 2009, Olivier Diserens\n * \n * controller for interface users\n */\n\nclass UserController extends Zend_Controller_Action\n{\n\n    public function loginAction()\n    {\n    \t$t = Zend_Registry::get('translate');\n    \t$this->view->headTitle($t->_('login'));\n    \t$this->view->layout()->setLayout('basic');\n    \t\n    \t$auth = Zend_Auth::getInstance();\n    \tif ($auth->hasIdentity()) {\n            $this->_redirect('/index');\n    \t}\n\n    \t$request = $this->getRequest(); \n        // determine the page the user was originally trying to request \n        $redirect = $request->getPost('redirect'); \n        if (strlen($redirect) == 0) \n            $redirect = $request->getServer('REQUEST_URI'); \n        if (strlen($redirect) == 0) \n            $redirect = '/index';\n\n\n        $request = $this->getRequest();\n        $form    = new Default_Form_Login();\n        \n        // Display only loggedOut message\n        if ($this->getRequest()->getParam('message') == \"loggedOut\") {\n        \t$form->addErrorMessage(htmlspecialchars($this->getRequest()->getParam('message')));\n        }\n        \n        if ($this->getRequest()->isPost() && $form->isValid($request->getPost())) {\n        \t\n    \t    $authAdapter = new Zend_Auth_Adapter_DbTable(\n                          Zend_Registry::get('writedb'),\n                          'administrator',\n                          'username',\n                          'password',\n                          'ENCRYPT(?, SUBSTRING(password,1,2))'\n                       );   \n            $authAdapter2 = new Zend_Auth_Adapter_DbTable(\n                          Zend_Registry::get('writedb'),\n                          'administrator',\n                          'username',\n                          'password',\n                          'ENCRYPT(?, SUBSTR(password, 1,12))'\n                       );   \n            ## This one should work for most crypt sheme, principaly crypt-sha512, regarldess of the salt length\n            $authAdapter4 = new Zend_Auth_Adapter_DbTable(\n                          Zend_Registry::get('writedb'),\n                          'administrator',\n                          'username',\n                          'password',\n                          'ENCRYPT(?, SUBSTR(password, 1, LOCATE(\\'$\\', password, LOCATE(\\'$\\', password, 4)+1)))'\n                       );   \n            $authAdapter3 = new Zend_Auth_Adapter_DbTable(\n                          Zend_Registry::get('writedb'),\n                          'administrator',\n                          'username',\n                          'password',\n                          'MD5(?)'\n                       );                          \n\n            $givenusername = $this->getRequest()->getParam('username');\n            $givenpassword = $this->getRequest()->getParam('password');\n            $authAdapter->setIdentity($givenusername)->setCredential($givenpassword);\n            $authAdapter2->setIdentity($givenusername)->setCredential($givenpassword);\n            $authAdapter3->setIdentity($givenusername)->setCredential($givenpassword);\n            $authAdapter4->setIdentity($givenusername)->setCredential($givenpassword);\n\n            $authpassed = false;\n            $result = $auth->authenticate($authAdapter4);\n            if ($result->isValid()) {\n            \t$authpassed = true;\n            } else {\n               $result = $auth->authenticate($authAdapter3);\n               if ($result->isValid()) {\n               \t   $authpassed = true;\n               } else {\n                   $result = $auth->authenticate($authAdapter2);\n                   if ($result->isValid()) {\n                   \t  $authpassed = true;\n                   } else {\n                       $result = $auth->authenticate($authAdapter);\n                       if ($result->isValid()) {\n                    \t  $authpassed = true;\n                       }\n                   }\n               }\n            }\n            if ($authpassed) {\n        \t    $user = new Default_Model_Administrator();\n        \t    $user->find($givenusername);\n        \t    Zend_Registry::set('user', $user);\n                $user->checkPasswordEncryptionSheme($givenpassword);\n                $this->_redirect($redirect);\n            } else {\n            \t$form->addError('badCredentials');\n            }\n         } else {\n         \tif ($this->getRequest()->isPost()) {\n            \t$form->addError('badDataGiven');\n         \t}\n         }\n         $this->view->error = '';\n         if (count($form->getErrorMessages() > 0)) {\n         \t$this->view->error = $t->_(array_pop($form->getErrorMessages()));\n         }\n         $this->view->form = $form;\n         $this->view->headLink()->appendStylesheet($this->view->css_path.'/login.css');\n         \n    }\n    \n    public function logoutAction()\n    {\n    \t$auth = Zend_Auth::getInstance();\n    \t$auth->clearIdentity();\n    \t$t = Zend_Registry::get('translate');\n    \t$this->_helper->getHelper('Redirector')->gotoSimple('login', 'user', null, array('message' => 'loggedOut'));\n    }\n\n    protected function setupSearchFields($request, $view) {\n        $view->email = $request->getParam('email');\n        $view->domain = $request->getParam('domain');\n        $view->username = $request->getParam('username');\n        $view->page = $request->getParam('page');\n    }\n    \n    public function searchAction()\n    {\n        $layout = Zend_Layout::getMvcInstance();\n    \t$view=$layout->getView();\n    \t$layout->disableLayout();\n    \t$view->addScriptPath(Zend_Registry::get('ajax_script_path')); \n        \n    \t$request = $this->getRequest();\n    \t\n    \trequire_once('ManageuserController.php');\n    \tManageuserController::searchUserOrEmails($this->getRequest(), $view);\n    \t\n    }\n    \n    \n}\n"], "filenames": ["www/guis/admin/application/controllers/UserController.php"], "buggy_code_start_loc": [36], "buggy_code_end_loc": [38], "fixing_code_start_loc": [36], "fixing_code_end_loc": [40], "type": "CWE-79", "message": "www/guis/admin/application/controllers/UserController.php in the administration login interface in MailCleaner CE 2018.08 and 2018.09 allows XSS via the admin/login/user/message/ PATH_INFO.", "other": {"cve": {"id": "CVE-2018-18635", "sourceIdentifier": "cve@mitre.org", "published": "2018-10-24T21:29:01.217", "lastModified": "2018-12-06T15:32:36.900", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "www/guis/admin/application/controllers/UserController.php in the administration login interface in MailCleaner CE 2018.08 and 2018.09 allows XSS via the admin/login/user/message/ PATH_INFO."}, {"lang": "es", "value": "www/guis/admin/application/controllers/UserController.php en la interfaz de inicio de sesi\u00f3n de administrador en MailCleaner CE 2018.08 y 2018.09 permite Cross-Site Scripting (XSS) mediante PATH_INFO en admin/login/user/message/."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mailcleaner:mailcleaner:2018.08:*:*:*:community:*:*:*", "matchCriteriaId": "B9FE1A43-2201-4139-9681-6557984124AA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mailcleaner:mailcleaner:2018.09:*:*:*:community:*:*:*", "matchCriteriaId": "B6EAC4CC-C8C2-4055-89FA-BAEB062E9101"}]}]}], "references": [{"url": "https://github.com/MailCleaner/MailCleaner/commit/5f90a52785672fc688c1f85e472e84b8a0d008d8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/MailCleaner/MailCleaner/issues/53", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MailCleaner/MailCleaner/commit/5f90a52785672fc688c1f85e472e84b8a0d008d8"}}