{"buggy_code": ["<?php\nheader('Content-Type: application/json');\n\n$files_utils = new \\MicroweberPackages\\Utils\\System\\Files();\n$dangerous = $files_utils->get_dangerous_files_extentions();\n\n\nif (!mw()->user_manager->session_id() or (mw()->user_manager->session_all() == false)) {\n    // //session_start();\n}\n\n\n\n$validate_token = false;\nif (!isset($_SERVER['HTTP_REFERER'])) {\n    header(\"HTTP/1.1 401 Unauthorized\");\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":97, \"message\": \"You are not allowed to upload\"}}');\n} elseif (!stristr($_SERVER['HTTP_REFERER'], site_url())) {\n    //    if (!is_logged()){\n//        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": \"You cannot upload from remote domains\"}}');\n//    }\n}\n\nif (!is_admin()) {\n    $validate_token = mw()->user_manager->csrf_validate($_GET);\n    if ($validate_token == false) {\n        header(\"HTTP/1.1 401 Unauthorized\");\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": \"You are not allowed to upload\"}}');\n    }\n\n    $is_ajax = mw()->url_manager->is_ajax();\n    if (!$is_ajax) {\n        header(\"HTTP/1.1 401 Unauthorized\");\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":99, \"message\": \"You are not allowed to upload\"}}');\n    }\n}\n\n$host = (parse_url(site_url()));\n\n//$host_dir = false;\n$host_dir = 'default';\n\n\nif(defined('MW_IS_MULTISITE') and MW_IS_MULTISITE){\n    if (isset($host['host'])) {\n        $host_dir = $host['host'];\n        $host_dir = str_ireplace('www.', '', $host_dir);\n        $host_dir = str_ireplace('.', '-', $host_dir);\n    }\n}\n\n\n$fileName_ext = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n\n$is_ext = get_file_extension($fileName_ext);\n$is_ext = strtolower($is_ext);\n\n$is_dangerous_file = $files_utils->is_dangerous_file($fileName_ext);\n\nif ($is_dangerous_file) {\n    header(\"HTTP/1.1 401 Unauthorized\");\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":100, \"message\": \"You cannot upload scripts or executable files\"}}');\n}\n\n$allowed_to_upload = false;\n\nif (is_admin() != false) {\n    $allowed_to_upload = true;\n} else {\n    $uid = user_id();\n    if ($uid != 0) {\n        $user = mw()->user_manager->get_by_id($uid);\n        if (!empty($user) and isset($user['is_active']) and $user['is_active'] == 1) {\n            $are_allowed = 'img';\n            $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/user/' . $user['id'] . DS;\n            if (isset($_REQUEST['autopath']) and $_REQUEST['autopath'] == 'user_hash') {\n                $up_path = md5($user['id'] . $user['created_at']);\n                $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/user_hash/' . DS . $up_path . DS;\n            }\n            $allowed_to_upload = true;\n        }\n    } else {\n        $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/anonymous/';\n        $allowed_to_upload = true;\n    }\n\n\n}\n\n\nif ($allowed_to_upload == false) {\n    if (isset($_REQUEST['rel_type']) and isset($_REQUEST['custom_field_id']) and trim($_REQUEST['rel_type']) != '' and trim($_REQUEST['rel_type']) != 'false') {\n        $cfid = mw()->fields_manager->getById(intval($_REQUEST['custom_field_id']));\n        if ($cfid == false) {\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 90, \"message\": \"Custom field is not found\"}}');\n        } else {\n            $rel_error = false;\n            if (!isset($_REQUEST['rel_id'])) {\n                $rel_error = true;\n            }\n            if (!isset($cfid['rel_id'])) {\n                $rel_error = true;\n            }\n\n            if (($_REQUEST['rel_id']) != $cfid['rel_id']) {\n                $rel_error = true;\n            }\n\n\n\n\n\n            if ($rel_error) {\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 91, \"message\": \"You are not allowed to upload\"}}');\n            }\n        }\n\n        if ($cfid != false and isset($cfid['custom_field_type'])) {\n            if ($cfid['custom_field_type'] != 'upload') {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Custom field is not file upload type\"}}');\n            }\n            if ($cfid != false and (!isset($cfid['options']) or !isset($cfid['options']['file_types']))) {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"File types is not set.\"}}');\n            }\n            if ($cfid != false and isset($cfid['file_types']) and empty($cfid['file_types'])) {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"File types cannot by empty.\"}}');\n            }\n\n            if ($cfid != false and isset($cfid['options']) and isset($cfid['options']['file_types'])) {\n                $alloled_ft = array_values(($cfid['options']['file_types']));\n                if (empty($alloled_ft)) {\n                    header(\"HTTP/1.1 401 Unauthorized\");\n\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 104, \"message\": \"File types cannot by empty.\"}}');\n                } else {\n                    $are_allowed = '';\n                    $fileName_ext = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n                    foreach ($alloled_ft as $allowed_file_type_item) {\n                        if (trim($allowed_file_type_item) != '' and $fileName_ext != '') {\n                            $is_ext = get_file_extension($fileName_ext);\n                            $is_ext = strtolower($is_ext);\n\n                            switch ($is_ext) {\n                                case 'php':\n                                case 'php12':\n                                case 'php11':\n                                case 'php10':\n                                case 'php9':\n                                case 'php8':\n                                case 'php7':\n                                case 'php6':\n                                case 'php5':\n                                case 'php4':\n                                case 'php3':\n                                case 'ptml':\n                                case 'html':\n                                case 'xhtml':\n                                case 'phtml':\n                                case 'shtml':\n                                case 'htm':\n                                case 'pl':\n                                case 'cgi':\n                                case 'rb':\n                                case 'py':\n                                case 'asp':\n                                case 'htaccess':\n                                case 'exe':\n                                case 'msi':\n                                case 'sh':\n                                case 'bat':\n                                case 'vbs':\n                                    $are_allowed = false;\n                                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":105, \"message\": \"You cannot upload scripts or executables\"}}');\n\n                                    break;\n\n\n                            }\n\n                            $are_allowed = $files_utils->get_allowed_files_extensions_for_upload($allowed_file_type_item);\n\n                            $pass_type_check = false;\n                            if ($are_allowed != false) {\n                                $are_allowed_a = explode(',', $are_allowed);\n                                if (!empty($are_allowed_a)) {\n                                    foreach ($are_allowed_a as $are_allowed_a_item) {\n                                        $are_allowed_a_item = strtolower(trim($are_allowed_a_item));\n                                        $is_ext = strtolower(trim($is_ext));\n\n                                        if ($are_allowed_a_item == '*') {\n                                            $pass_type_check = 1;\n                                        }\n\n                                        if ($are_allowed_a_item != '' and $are_allowed_a_item == $is_ext) {\n                                            $pass_type_check = 1;\n                                        }\n                                    }\n                                }\n                            }\n                            if ($pass_type_check == false) {\n                                header(\"HTTP/1.1 401 Unauthorized\");\n\n                                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":106, \"message\": \"You can only upload ' . $are_allowed . ' files.\"}}');\n                            } else {\n                                if (!isset($_REQUEST['captcha'])) {\n                                    if (!$validate_token) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":107, \"message\": \"Please enter the captcha answer!\"}}');\n                                    }\n                                } else {\n                                    $cap = mw()->user_manager->session_get('captcha');\n                                    if ($cap == false) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":108, \"message\": \"You must load a captcha first!\"}}');\n                                    }\n                                    $validate_captcha = $this->app->captcha_manager->validate($_REQUEST['captcha']);\n                                    if (!$validate_captcha) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":109, \"message\": \"Invalid captcha answer! \"}}');\n                                    } else {\n                                        if (!isset($_REQUEST['path'])) {\n                                            $_REQUEST['path'] = 'media/' . $host_dir . '/user_uploads' . DS . $_REQUEST['rel_type'] . DS;\n                                        }\n                                    }\n                                }\n\n                                //die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": PECATA - Not finished yet.\"}}');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        header(\"HTTP/1.1 401 Unauthorized\");\n\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 110, \"message\": \"Only admin can upload.\"}, \"id\" : \"id\"}');\n    }\n}\n\n\nif(!is_admin()){\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 111, \"message\": \"Only admin can upload.\"}, \"id\" : \"id\"}');\n\n    return response(array(\n        'error' => _e('Please enter captcha answer!', true),\n        'captcha_error' => true,\n        'form_data_required' => 'captcha',\n        'form_data_required_params' => array('captcha_parent_for_id' => $_REQUEST['rel_id']),\n        'form_data_module' => 'captcha'\n    ));\n}\n\n\n// Settings\n//$target_path = media_base_path() . DS;\n//$target_path = media_base_path() . DS . $host_dir . DS . 'uploaded' . DS;\n$target_path = media_uploads_path();\n$target_path = normalize_path($target_path, 0);\n\n$path_restirct = userfiles_path(); // the path the script should access\nif (isset($_REQUEST['path']) and trim($_REQUEST['path']) != '' and trim($_REQUEST['path']) != 'false') {\n    $path = urldecode($_REQUEST['path']);\n\n    $path = html_entity_decode($path);\n    $path = htmlspecialchars_decode($path, ENT_NOQUOTES);\n\n    //$path = urldecode($path);\n    $path = str_replace('%2F', '/', $path);\n    //$path = str_replace('%25252F','/',$path);\n\n    $path = normalize_path($path, 0);\n\n    $path = str_replace('..', '', $path);\n    $path = str_replace($path_restirct, '', $path);\n\n    // $target_path = userfiles_path() . DS . $path;\n    $target_path = media_uploads_path() . DS . $path;\n    $target_path = normalize_path($target_path, 1);\n}\n\n$targetDir = $target_path;\nif (!is_dir($targetDir)) {\n    mkdir_recursive($targetDir);\n}\n//$targetDir = 'uploads';\n\n$cleanupTargetDir = true;\n// Remove old files\n$maxFileAge = 5 * 3600;\n// Temp file age in seconds\n// 5 minutes execution time\n@set_time_limit(5 * 60);\n\n// Uncomment this one to fake upload time\n// usleep(5000);\n// Get parameters\n$chunk = isset($_REQUEST['chunk']) ? intval($_REQUEST['chunk']) : 0;\n$chunks = isset($_REQUEST['chunks']) ? intval($_REQUEST['chunks']) : 0;\n$fileName = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n\n// Clean the fileName for security reasons\n$fileNameExtension = get_file_extension($fileName);\n$fileName = \\MicroweberPackages\\Helper\\URLify::filter($fileName);\n//$fileName = url_title($fileName);\n//$fileName = preg_replace('/[\\p{P}\\p{Zs}\\w\\._]+/u', \"\", $fileName);\n// $fileName = preg_replace('/[^\\w\\._]+/', '_', $fileName);\n$fileName = preg_replace('/\\s+\\d+%|\\)/', '', $fileName);\n$fileName = preg_replace(\"/[\\/\\&%#\\$]/\", \"_\", $fileName);\n$fileName = preg_replace(\"/[\\\"\\']/\", \" \", $fileName);\n$fileName = str_replace(array('(', ')', \"'\", \"!\", \"`\", \"*\", \"#\"), '_', $fileName);\n$fileName = str_replace(' ', '_', $fileName);\n$fileName = str_replace('..', '.', $fileName);\n$fileName = strtolower($fileName);\n$fileName = mw()->url_manager->clean_url_wrappers($fileName);\n$fileName = substr($fileName, 0, -(strlen($fileNameExtension)));\n$fileName = $fileName . '.' . $fileNameExtension;\n\n\n$fileName_uniq = date('ymdhis') . uniqid() . $fileName;\n// Make sure the fileName is unique but only if chunking is disabled\nif ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName)) {\n    $ext = strrpos($fileName, '.');\n    $fileName_a = substr($fileName, 0, $ext);\n    $fileName_b = substr($fileName, $ext);\n\n    $count = 1;\n    while (file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName_a . '_' . $count . $fileName_b)) {\n        ++$count;\n    }\n\n    $fileName = $fileName_a . '_' . $count . $fileName_b;\n}\n\n$filePath = $targetDir . DIRECTORY_SEPARATOR . $fileName;\n$filePath_uniq = $targetDir . DIRECTORY_SEPARATOR . $fileName_uniq;\n\n// Create target dir\nif (!is_dir($targetDir)) {\n    @mkdir_recursive($targetDir);\n}\n\n$has_index = $targetDir . DIRECTORY_SEPARATOR . 'index.html';\n\nif (!is_file($has_index)) {\n    @touch($has_index);\n}\n\n// Remove old temp files\nif ($cleanupTargetDir && is_dir($targetDir) && ($dir = opendir($targetDir))) {\n    while (($file = readdir($dir)) !== false) {\n        $tmpfilePath = $targetDir . DIRECTORY_SEPARATOR . $file;\n\n        // Remove temp file if it is older than the max age and is not the current file\n        if (preg_match('/\\.part$/', $file) && (filemtime($tmpfilePath) < time() - $maxFileAge) && ($tmpfilePath != \"{$filePath}.part\")) {\n            @unlink($tmpfilePath);\n        }\n    }\n\n    closedir($dir);\n} else {\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 100, \"message\": \"Failed to open temp directory.\"}, \"id\" : \"id\"}');\n}\n\n\nif (isset($_SERVER['CONTENT_LENGTH']) and isset($_FILES['file'])) {\n    $filename_log = mw()->url_manager->slug($fileName);\n    $check = mw()->log_manager->get('one=true&no_cache=true&is_system=y&created_at=[mt]30 min ago&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&user_ip=' . user_ip());\n    $upl_size_log = $_SERVER['CONTENT_LENGTH'];\n    if (is_array($check) and isset($check['id'])) {\n        $upl_size_log = intval($upl_size_log) + intval($check['value']);\n        mw()->log_manager->save('no_cache=true&is_system=y&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&value=' . $upl_size_log . '&user_ip=' . user_ip() . '&id=' . $check['id']);\n    } else {\n        mw()->log_manager->save('no_cache=true&is_system=y&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&value=' . $upl_size_log . '&user_ip=' . user_ip());\n    }\n}\n\n// Look for the content type header\nif (isset($_SERVER['HTTP_CONTENT_TYPE'])) {\n    $contentType = $_SERVER['HTTP_CONTENT_TYPE'];\n}\n\nif (isset($_SERVER['CONTENT_TYPE'])) {\n    $contentType = $_SERVER['CONTENT_TYPE'];\n}\n\n// Handle non multipart uploads older WebKit versions didn't support multipart in HTML5\n$is_image = false;\n\n$engine = 'plupload';\n\n\nif ($engine == 'plupload') {\n\n\n    if (isset($contentType)) {\n        if (strpos($contentType, 'multipart') !== false) {\n            if ($_FILES['file']['error'] === UPLOAD_ERR_OK) {\n                //uploading successfully done\n            } else {\n                throw new UploadException($_FILES['file']['error']);\n            }\n        }\n\n        if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {\n\n            // Open temp file\n            $out = fopen(\"{$filePath}.part\", $chunk == 0 ? 'wb' : 'ab');\n            if ($out) {\n                // Read binary input stream and append it to temp file\n                $in = fopen($_FILES['file']['tmp_name'], 'rb');\n\n                if ($in) {\n                    while ($buff = fread($in, 4096)) {\n                        fwrite($out, $buff);\n                    }\n                } else {\n                    header(\"HTTP/1.1 401 Unauthorized\");\n\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n                }\n                fclose($in);\n                fclose($out);\n\n                @unlink($_FILES['file']['tmp_name']);\n            } else {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n            }\n        } else {\n            header(\"HTTP/1.1 401 Unauthorized\");\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"Failed to move uploaded file.\"}, \"id\" : \"id\"}');\n        }\n    } else {\n        // Open temp file\n        $out = fopen(\"{$filePath}.part\", $chunk == 0 ? 'wb' : 'ab');\n        if ($out) {\n            // Read binary input stream and append it to temp file\n            $in = fopen('php://input', 'rb');\n\n            if ($in) {\n                while ($buff = fread($in, 4096)) {\n                    fwrite($out, $buff);\n                }\n            } else {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n            }\n\n            fclose($in);\n            fclose($out);\n        } else {\n            header(\"HTTP/1.1 401 Unauthorized\");\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n        }\n    }\n\n} else {\n\n\n}\n\n\n$rerturn = array();\n\n\n// Check if file has been uploaded\nif (!$chunks || $chunk == $chunks - 1) {\n    // Strip the temp .part suffix off\n    $newfile = $filePath;\n    if (is_file($newfile)) {\n        $newfile = $filePath_uniq;\n    }\n\n\n    rename(\"{$filePath}.part\", $newfile);\n    $filePath = $newfile;\n\n    $automatic_image_resize_on_upload = get_option('automatic_image_resize_on_upload', 'website') == 'y';\n    $automatic_image_resize_on_upload_disabled = get_option('automatic_image_resize_on_upload', 'website') == 'd';\n\n    if (is_file($filePath) and !$chunks || $chunk == $chunks - 1) {\n        $ext = get_file_extension($filePath);\n\n        if (function_exists('finfo_open') and function_exists('finfo_file')) {\n            $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension\n            $mime = @finfo_file($finfo, $filePath);\n            if ($mime) {\n                $upl_mime_ext = explode('/', $mime);\n                $upl_mime_ext = end($upl_mime_ext);\n                $upl_mime_ext = explode('-', $upl_mime_ext);\n                $upl_mime_ext = end($upl_mime_ext);\n                $upl_mime_ext = strtolower($upl_mime_ext);\n\n                if (in_array($upl_mime_ext, $dangerous)) {\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Cannot upload mime type ' . $upl_mime_ext . '\"}, \"id\" : \"id\"}');\n                }\n            }\n            finfo_close($finfo);\n        }\n\n        if ($ext == 'gif' || $ext == 'jpg' || $ext == 'jpeg' || $ext === 'jpe' || $ext == 'png'|| $ext == 'svg') {\n\n            $valid = false;\n            if ($ext === 'jpg' || $ext === 'jpeg' || $ext === 'jpe') {\n                if (@imagecreatefromjpeg($filePath)) {\n                    $valid = true;\n                }\n            } else if ($ext === 'png') {\n                if (@imagecreatefrompng($filePath)) {\n                    $valid = true;\n                }\n            } else if ($ext === 'gif') {\n                if (@imagecreatefromgif($filePath)) {\n                    $valid = true;\n                }\n            }else if ($ext === 'svg') {\n\n                if (is_file($filePath)) {\n                    $sanitizer = new \\enshrined\\svgSanitize\\Sanitizer();\n                    // Load the dirty svg\n                    $dirtySVG = file_get_contents($filePath);\n                     // Pass it to the sanitizer and get it back clean\n                    $cleanSVG = $sanitizer->sanitize($dirtySVG);\n                    file_put_contents($filePath, $cleanSVG);\n\n                }\n               $valid = true;\n\n            } else {\n                $valid = false;\n            }\n\n            if (!$valid) {\n                @unlink($filePath);\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 107, \"message\": \"File is not an image\"}, \"id\" : \"id\"}');\n            }\n        }\n\n    }\n\n\n    if ($is_ext == 'gif' || $is_ext == 'jpg' || $is_ext == 'jpeg' || $is_ext == 'png') {\n        try {\n            $size = getimagesize($filePath);\n            $is_image = true;\n            $filesize = filesize($filePath);\n            $rerturn['file_size'] = $filesize;\n            $rerturn['file_size_human'] = mw()->format->human_filesize($filesize);\n            $rerturn['image_size'] = $size;\n            // $auto_resize_treshold = 10000000; // 10MiB\n            $auto_resize_treshold = 2000000; // 2MiB\n\n            if ($is_ext == 'jpg' || $is_ext == 'jpeg' || $is_ext == 'png') {\n                $rerturn['automatic_image_resize_is_enabled'] = $automatic_image_resize_on_upload;\n                if (!$automatic_image_resize_on_upload and $filesize > $auto_resize_treshold) {\n                    // if image is big, ask to enable resizing\n                    $rerturn['ask_user_to_enable_auto_resizing'] = 1;\n                    $rerturn['ask_user_to_enable_auto_resizing_filesize'] = $filesize;\n\n                }\n                if (!$automatic_image_resize_on_upload_disabled and $automatic_image_resize_on_upload and $filesize > $auto_resize_treshold) {\n                    $maxDim = 1980;\n                    //@ini_set('memory_limit', '256M');\n\n                    list($width, $height, $type, $attr) = $size;\n                    if ($width > $maxDim || $height > $maxDim) {\n//                        $d1 = dirname($filePath);\n                        $d2 = basename($filePath);\n//                        $target_filename = $d1 . DS . 'auto_resized_' . $d2;\n                        $target_filename = $filePath;\n                        $fn = $filePath;\n                        $ratio = $size[0] / $size[1]; // width/height\n                        if ($ratio > 1) {\n                            $width = $maxDim;\n                            $height = $maxDim / $ratio;\n                        } else {\n                            $width = $maxDim * $ratio;\n                            $height = $maxDim;\n                        }\n                        $src = imagecreatefromstring(file_get_contents($fn));\n                        $dst = imagecreatetruecolor($width, $height);\n\n                        if ($is_ext == 'png') {\n                            // save transparency in alpha channel\n                            imagealphablending($dst, false);\n                            imagesavealpha($dst, true);\n\n                        }\n                        imagecopyresampled($dst, $src, 0, 0, 0, 0, $width, $height, $size[0], $size[1]);\n                        imagedestroy($src);\n\n                        if ($is_ext == 'png') {\n                            imagepng($dst, $target_filename); // adjust format as needed\n\n                        } else if ($is_ext == 'jpg' || $is_ext == 'jpeg') {\n                            imagejpeg($dst, $target_filename); // adjust format as needed\n                        }\n\n                        $rerturn['image_was_auto_resized'] = 1;\n                        $rerturn['image_was_auto_resized_msg'] = \"Image was automatically resized because it was \" . $rerturn['file_size_human'];\n\n                        imagedestroy($dst);\n                    }\n                }\n            }\n\n\n        } catch (Exception $e) {\n            @unlink($filePath);\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 107, \"message\": \"File is not an image\"}, \"id\" : \"id\"}');\n\n        }\n    }\n\n\n    mw()->log_manager->delete('is_system=y&rel=uploader&created_at=[lt]30 min ago');\n    mw()->log_manager->delete('is_system=y&rel=uploader&session_id=' . mw()->user_manager->session_id());\n}\n$f_name = explode(DS, $filePath);\n$f_name = end($f_name);\n\n$filePath = mw()->url_manager->link_to_file($filePath);\n\n$rerturn['src'] = $filePath;\n$rerturn['name'] = $f_name;\n\n\nif (isset($upl_size_log) and $upl_size_log > 0) {\n    $rerturn['bytes_uploaded'] = $upl_size_log;\n}\n//$rerturn['ORIG_REQUEST'] = $_GET;\n\n\n/*\n * upload.php\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under GPL License.\n *\n * License: http://www.plupload.com/license\n * Contributing: http://www.plupload.com/contributing\n */\n// HTTP headers for no cache etc\nheader('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\nheader('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\nheader('Cache-Control: no-store, no-cache, must-revalidate');\nheader('Cache-Control: post-check=0, pre-check=0', false);\nheader('Pragma: no-cache');\n\n\necho json_encode($rerturn);\nif (mw()->user_manager->session_id() and !(mw()->user_manager->session_all() == false)) {\n    // @//session_write_close();\n}\n\nclass UploadException extends Exception\n{\n    public function __construct($code)\n    {\n        $message = $this->codeToMessage($code);\n        parent::__construct($message, $code);\n    }\n\n    private function codeToMessage($code)\n    {\n        switch ($code) {\n            case UPLOAD_ERR_INI_SIZE:\n                $message = 'The uploaded file exceeds the upload_max_filesize directive in php.ini';\n                break;\n            case UPLOAD_ERR_FORM_SIZE:\n                $message = 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form';\n                break;\n            case UPLOAD_ERR_PARTIAL:\n                $message = 'The uploaded file was only partially uploaded';\n                break;\n            case UPLOAD_ERR_NO_FILE:\n                $message = 'No file was uploaded';\n                break;\n            case UPLOAD_ERR_NO_TMP_DIR:\n                $message = 'Missing a temporary folder';\n                break;\n            case UPLOAD_ERR_CANT_WRITE:\n                $message = 'Failed to write file to disk';\n                break;\n            case UPLOAD_ERR_EXTENSION:\n                $message = 'File upload stopped by extension';\n                break;\n\n            default:\n                $message = 'Unknown upload error';\n                break;\n        }\n\n        return $message;\n    }\n}\n\nexit;\n\n// Return JSON-RPC response\n//die('{\"jsonrpc\" : \"2.0\", \"result\" : null, \"id\" : \"id\"}');\n"], "fixing_code": ["<?php\nheader('Content-Type: application/json');\n\n$files_utils = new \\MicroweberPackages\\Utils\\System\\Files();\n$dangerous = $files_utils->get_dangerous_files_extentions();\n\n\nif (!mw()->user_manager->session_id() or (mw()->user_manager->session_all() == false)) {\n    // //session_start();\n}\n\n\n\n$validate_token = false;\nif (!isset($_SERVER['HTTP_REFERER'])) {\n    header(\"HTTP/1.1 401 Unauthorized\");\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":97, \"message\": \"You are not allowed to upload\"}}');\n} elseif (!stristr($_SERVER['HTTP_REFERER'], site_url())) {\n    //    if (!is_logged()){\n//        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": \"You cannot upload from remote domains\"}}');\n//    }\n}\n\nif (!is_admin()) {\n    $validate_token = mw()->user_manager->csrf_validate($_GET);\n    if ($validate_token == false) {\n        header(\"HTTP/1.1 401 Unauthorized\");\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": \"You are not allowed to upload\"}}');\n    }\n\n    $is_ajax = mw()->url_manager->is_ajax();\n    if (!$is_ajax) {\n        header(\"HTTP/1.1 401 Unauthorized\");\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":99, \"message\": \"You are not allowed to upload\"}}');\n    }\n}\n\n$host = (parse_url(site_url()));\n\n//$host_dir = false;\n$host_dir = 'default';\n\n\nif(defined('MW_IS_MULTISITE') and MW_IS_MULTISITE){\n    if (isset($host['host'])) {\n        $host_dir = $host['host'];\n        $host_dir = str_ireplace('www.', '', $host_dir);\n        $host_dir = str_ireplace('.', '-', $host_dir);\n    }\n}\n\n\n$fileName_ext = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n\n$is_ext = get_file_extension($fileName_ext);\n$is_ext = strtolower($is_ext);\n\n$is_dangerous_file = $files_utils->is_dangerous_file($fileName_ext);\n\nif ($is_dangerous_file) {\n    header(\"HTTP/1.1 401 Unauthorized\");\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":100, \"message\": \"You cannot upload scripts or executable files\"}}');\n}\n\n$allowed_to_upload = false;\n\nif (is_admin() != false) {\n    $allowed_to_upload = true;\n} else {\n    $uid = user_id();\n    if ($uid != 0) {\n        $user = mw()->user_manager->get_by_id($uid);\n        if (!empty($user) and isset($user['is_active']) and $user['is_active'] == 1) {\n            $are_allowed = 'img';\n            $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/user/' . $user['id'] . DS;\n            if (isset($_REQUEST['autopath']) and $_REQUEST['autopath'] == 'user_hash') {\n                $up_path = md5($user['id'] . $user['created_at']);\n                $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/user_hash/' . DS . $up_path . DS;\n            }\n            $allowed_to_upload = true;\n        }\n    } else {\n        $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/anonymous/';\n        $allowed_to_upload = true;\n    }\n\n\n}\n\n\nif ($allowed_to_upload == false) {\n    if (isset($_REQUEST['rel_type']) and isset($_REQUEST['custom_field_id']) and trim($_REQUEST['rel_type']) != '' and trim($_REQUEST['rel_type']) != 'false') {\n        $cfid = mw()->fields_manager->getById(intval($_REQUEST['custom_field_id']));\n        if ($cfid == false) {\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 90, \"message\": \"Custom field is not found\"}}');\n        } else {\n            $rel_error = false;\n            if (!isset($_REQUEST['rel_id'])) {\n                $rel_error = true;\n            }\n            if (!isset($cfid['rel_id'])) {\n                $rel_error = true;\n            }\n\n            if (($_REQUEST['rel_id']) != $cfid['rel_id']) {\n                $rel_error = true;\n            }\n\n\n\n\n\n            if ($rel_error) {\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 91, \"message\": \"You are not allowed to upload\"}}');\n            }\n        }\n\n        if ($cfid != false and isset($cfid['custom_field_type'])) {\n            if ($cfid['custom_field_type'] != 'upload') {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Custom field is not file upload type\"}}');\n            }\n            if ($cfid != false and (!isset($cfid['options']) or !isset($cfid['options']['file_types']))) {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"File types is not set.\"}}');\n            }\n            if ($cfid != false and isset($cfid['file_types']) and empty($cfid['file_types'])) {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"File types cannot by empty.\"}}');\n            }\n\n            if ($cfid != false and isset($cfid['options']) and isset($cfid['options']['file_types'])) {\n                $alloled_ft = array_values(($cfid['options']['file_types']));\n                if (empty($alloled_ft)) {\n                    header(\"HTTP/1.1 401 Unauthorized\");\n\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 104, \"message\": \"File types cannot by empty.\"}}');\n                } else {\n                    $are_allowed = '';\n                    $fileName_ext = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n                    foreach ($alloled_ft as $allowed_file_type_item) {\n                        if (trim($allowed_file_type_item) != '' and $fileName_ext != '') {\n                            $is_ext = get_file_extension($fileName_ext);\n                            $is_ext = strtolower($is_ext);\n\n                            switch ($is_ext) {\n                                case 'php': \n                                case 'php12':\n                                case 'php11':\n                                case 'php10':\n                                case 'php9':\n                                case 'php8':\n                                case 'php7':\n                                case 'php5':\n                                case 'php4':\n                                case 'php3':\n                                case 'ptml':\n                                case 'html':\n                                case 'xhtml':\n                                case 'phtml':\n                                case 'shtml':\n                                case 'htm':\n                                case 'pl':\n                                case 'cgi':\n                                case 'rb':\n                                case 'py':\n                                case 'asp':\n                                case 'htaccess':\n                                case 'exe':\n                                case 'msi':\n                                case 'sh':\n                                case 'bat':\n                                case 'vbs':\n                                    $are_allowed = false;\n                                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":105, \"message\": \"You cannot upload scripts or executables\"}}');\n\n                                    break;\n\n\n                            }\n\n                            $are_allowed = $files_utils->get_allowed_files_extensions_for_upload($allowed_file_type_item);\n\n                            $pass_type_check = false;\n                            if ($are_allowed != false) {\n                                $are_allowed_a = explode(',', $are_allowed);\n                                if (!empty($are_allowed_a)) {\n                                    foreach ($are_allowed_a as $are_allowed_a_item) {\n                                        $are_allowed_a_item = strtolower(trim($are_allowed_a_item));\n                                        $is_ext = strtolower(trim($is_ext));\n\n                                        if ($are_allowed_a_item == '*') {\n                                            $pass_type_check = 1;\n                                        }\n\n                                        if ($are_allowed_a_item != '' and $are_allowed_a_item == $is_ext) {\n                                            $pass_type_check = 1;\n                                        }\n                                    }\n                                }\n                            }\n                            if ($pass_type_check == false) {\n                                header(\"HTTP/1.1 401 Unauthorized\");\n\n                                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":106, \"message\": \"You can only upload ' . $are_allowed . ' files.\"}}');\n                            } else {\n                                if (!isset($_REQUEST['captcha'])) {\n                                    if (!$validate_token) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":107, \"message\": \"Please enter the captcha answer!\"}}');\n                                    }\n                                } else {\n                                    $cap = mw()->user_manager->session_get('captcha');\n                                    if ($cap == false) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":108, \"message\": \"You must load a captcha first!\"}}');\n                                    }\n                                    $validate_captcha = $this->app->captcha_manager->validate($_REQUEST['captcha']);\n                                    if (!$validate_captcha) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":109, \"message\": \"Invalid captcha answer! \"}}');\n                                    } else {\n                                        if (!isset($_REQUEST['path'])) {\n                                            $_REQUEST['path'] = 'media/' . $host_dir . '/user_uploads' . DS . $_REQUEST['rel_type'] . DS;\n                                        }\n                                    }\n                                }\n\n                                //die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": PECATA - Not finished yet.\"}}');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        header(\"HTTP/1.1 401 Unauthorized\");\n\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 110, \"message\": \"Only admin can upload.\"}, \"id\" : \"id\"}');\n    }\n}\n\n\nif(!is_admin()){\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 111, \"message\": \"Only admin can upload.\"}, \"id\" : \"id\"}');\n\n    return response(array(\n        'error' => _e('Please enter captcha answer!', true),\n        'captcha_error' => true,\n        'form_data_required' => 'captcha',\n        'form_data_required_params' => array('captcha_parent_for_id' => $_REQUEST['rel_id']),\n        'form_data_module' => 'captcha'\n    ));\n}\n\n\n// Settings\n//$target_path = media_base_path() . DS;\n//$target_path = media_base_path() . DS . $host_dir . DS . 'uploaded' . DS;\n$target_path = media_uploads_path();\n$target_path = normalize_path($target_path, 0);\n\n$path_restirct = userfiles_path(); // the path the script should access\nif (isset($_REQUEST['path']) and trim($_REQUEST['path']) != '' and trim($_REQUEST['path']) != 'false') {\n    $path = urldecode($_REQUEST['path']);\n\n    $path = html_entity_decode($path);\n    $path = htmlspecialchars_decode($path, ENT_NOQUOTES);\n\n    //$path = urldecode($path);\n    $path = str_replace('%2F', '/', $path);\n    //$path = str_replace('%25252F','/',$path);\n\n    $path = normalize_path($path, 0);\n\n    $path = str_replace('..', '', $path);\n    $path = str_replace($path_restirct, '', $path);\n\n    // $target_path = userfiles_path() . DS . $path;\n    $target_path = media_uploads_path() . DS . $path;\n    $target_path = normalize_path($target_path, 1);\n}\n\n$targetDir = $target_path;\nif (!is_dir($targetDir)) {\n    mkdir_recursive($targetDir);\n}\n//$targetDir = 'uploads';\n\n$cleanupTargetDir = true;\n// Remove old files\n$maxFileAge = 5 * 3600;\n// Temp file age in seconds\n// 5 minutes execution time\n@set_time_limit(5 * 60);\n\n// Uncomment this one to fake upload time\n// usleep(5000);\n// Get parameters\n$chunk = isset($_REQUEST['chunk']) ? intval($_REQUEST['chunk']) : 0;\n$chunks = isset($_REQUEST['chunks']) ? intval($_REQUEST['chunks']) : 0;\n$fileName = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n\n// Clean the fileName for security reasons\n$fileNameExtension = get_file_extension($fileName);\n$fileName = \\MicroweberPackages\\Helper\\URLify::filter($fileName);\n//$fileName = url_title($fileName);\n//$fileName = preg_replace('/[\\p{P}\\p{Zs}\\w\\._]+/u', \"\", $fileName);\n// $fileName = preg_replace('/[^\\w\\._]+/', '_', $fileName);\n$fileName = preg_replace('/\\s+\\d+%|\\)/', '', $fileName);\n$fileName = preg_replace(\"/[\\/\\&%#\\$]/\", \"_\", $fileName);\n$fileName = preg_replace(\"/[\\\"\\']/\", \" \", $fileName);\n$fileName = str_replace(array('(', ')', \"'\", \"!\", \"`\", \"*\", \"#\"), '_', $fileName);\n$fileName = str_replace(' ', '_', $fileName);\n$fileName = str_replace('..', '.', $fileName);\n$fileName = strtolower($fileName);\n$fileName = mw()->url_manager->clean_url_wrappers($fileName);\n$fileName = substr($fileName, 0, -(strlen($fileNameExtension)));\n$fileName = $fileName . '.' . $fileNameExtension;\n\n\n$fileName_uniq = date('ymdhis') . uniqid() . $fileName;\n// Make sure the fileName is unique but only if chunking is disabled\nif ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName)) {\n    $ext = strrpos($fileName, '.');\n    $fileName_a = substr($fileName, 0, $ext);\n    $fileName_b = substr($fileName, $ext);\n\n    $count = 1;\n    while (file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName_a . '_' . $count . $fileName_b)) {\n        ++$count;\n    }\n\n    $fileName = $fileName_a . '_' . $count . $fileName_b;\n}\n\n$filePath = $targetDir . DIRECTORY_SEPARATOR . $fileName;\n$filePath_uniq = $targetDir . DIRECTORY_SEPARATOR . $fileName_uniq;\n\n// Create target dir\nif (!is_dir($targetDir)) {\n    @mkdir_recursive($targetDir);\n}\n\n$has_index = $targetDir . DIRECTORY_SEPARATOR . 'index.html';\n\nif (!is_file($has_index)) {\n    @touch($has_index);\n}\n\n// Remove old temp files\nif ($cleanupTargetDir && is_dir($targetDir) && ($dir = opendir($targetDir))) {\n    while (($file = readdir($dir)) !== false) {\n        $tmpfilePath = $targetDir . DIRECTORY_SEPARATOR . $file;\n\n        // Remove temp file if it is older than the max age and is not the current file\n        if (preg_match('/\\.part$/', $file) && (filemtime($tmpfilePath) < time() - $maxFileAge) && ($tmpfilePath != \"{$filePath}.part\")) {\n            @unlink($tmpfilePath);\n        }\n    }\n\n    closedir($dir);\n} else {\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 100, \"message\": \"Failed to open temp directory.\"}, \"id\" : \"id\"}');\n}\n\n\nif (isset($_SERVER['CONTENT_LENGTH']) and isset($_FILES['file'])) {\n    $filename_log = mw()->url_manager->slug($fileName);\n    $check = mw()->log_manager->get('one=true&no_cache=true&is_system=y&created_at=[mt]30 min ago&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&user_ip=' . user_ip());\n    $upl_size_log = $_SERVER['CONTENT_LENGTH'];\n    if (is_array($check) and isset($check['id'])) {\n        $upl_size_log = intval($upl_size_log) + intval($check['value']);\n        mw()->log_manager->save('no_cache=true&is_system=y&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&value=' . $upl_size_log . '&user_ip=' . user_ip() . '&id=' . $check['id']);\n    } else {\n        mw()->log_manager->save('no_cache=true&is_system=y&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&value=' . $upl_size_log . '&user_ip=' . user_ip());\n    }\n}\n\n// Look for the content type header\nif (isset($_SERVER['HTTP_CONTENT_TYPE'])) {\n    $contentType = $_SERVER['HTTP_CONTENT_TYPE'];\n}\n\nif (isset($_SERVER['CONTENT_TYPE'])) {\n    $contentType = $_SERVER['CONTENT_TYPE'];\n}\n\n// Handle non multipart uploads older WebKit versions didn't support multipart in HTML5\n$is_image = false;\n\n$engine = 'plupload';\n\n\nif ($engine == 'plupload') {\n\n\n    if (isset($contentType)) {\n        if (strpos($contentType, 'multipart') !== false) {\n            if ($_FILES['file']['error'] === UPLOAD_ERR_OK) {\n                //uploading successfully done\n            } else {\n                throw new UploadException($_FILES['file']['error']);\n            }\n        }\n\n        if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {\n\n            // Open temp file\n            $out = fopen(\"{$filePath}.part\", $chunk == 0 ? 'wb' : 'ab');\n            if ($out) {\n                // Read binary input stream and append it to temp file\n                $in = fopen($_FILES['file']['tmp_name'], 'rb');\n\n                if ($in) {\n                    while ($buff = fread($in, 4096)) {\n                        fwrite($out, $buff);\n                    }\n                } else {\n                    header(\"HTTP/1.1 401 Unauthorized\");\n\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n                }\n                fclose($in);\n                fclose($out);\n\n                @unlink($_FILES['file']['tmp_name']);\n            } else {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n            }\n        } else {\n            header(\"HTTP/1.1 401 Unauthorized\");\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"Failed to move uploaded file.\"}, \"id\" : \"id\"}');\n        }\n    } else {\n        // Open temp file\n        $out = fopen(\"{$filePath}.part\", $chunk == 0 ? 'wb' : 'ab');\n        if ($out) {\n            // Read binary input stream and append it to temp file\n            $in = fopen('php://input', 'rb');\n\n            if ($in) {\n                while ($buff = fread($in, 4096)) {\n                    fwrite($out, $buff);\n                }\n            } else {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n            }\n\n            fclose($in);\n            fclose($out);\n        } else {\n            header(\"HTTP/1.1 401 Unauthorized\");\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n        }\n    }\n\n} else {\n\n\n}\n\n\n$rerturn = array();\n\n\n// Check if file has been uploaded\nif (!$chunks || $chunk == $chunks - 1) {\n    // Strip the temp .part suffix off\n    $newfile = $filePath;\n    if (is_file($newfile)) {\n        $newfile = $filePath_uniq;\n    }\n\n\n    rename(\"{$filePath}.part\", $newfile);\n    $filePath = $newfile;\n\n    $automatic_image_resize_on_upload = get_option('automatic_image_resize_on_upload', 'website') == 'y';\n    $automatic_image_resize_on_upload_disabled = get_option('automatic_image_resize_on_upload', 'website') == 'd';\n\n    if (is_file($filePath) and !$chunks || $chunk == $chunks - 1) {\n        $ext = get_file_extension($filePath);\n\n        if (function_exists('finfo_open') and function_exists('finfo_file')) {\n            $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension\n            $mime = @finfo_file($finfo, $filePath);\n            if ($mime) {\n                $upl_mime_ext = explode('/', $mime);\n                $upl_mime_ext = end($upl_mime_ext);\n                $upl_mime_ext = explode('-', $upl_mime_ext);\n                $upl_mime_ext = end($upl_mime_ext);\n                $upl_mime_ext = strtolower($upl_mime_ext);\n\n                if (in_array($upl_mime_ext, $dangerous)) {\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Cannot upload mime type ' . $upl_mime_ext . '\"}, \"id\" : \"id\"}');\n                }\n            }\n            finfo_close($finfo);\n        }\n\n        if ($ext == 'gif' || $ext == 'jpg' || $ext == 'jpeg' || $ext === 'jpe' || $ext == 'png'|| $ext == 'svg') {\n\n            $valid = false;\n            if ($ext === 'jpg' || $ext === 'jpeg' || $ext === 'jpe') {\n                if (@imagecreatefromjpeg($filePath)) {\n                    $valid = true;\n                }\n            } else if ($ext === 'png') {\n                if (@imagecreatefrompng($filePath)) {\n                    $valid = true;\n                }\n            } else if ($ext === 'gif') {\n                if (@imagecreatefromgif($filePath)) {\n                    $valid = true;\n                }\n            }else if ($ext === 'svg') {\n\n                if (is_file($filePath)) {\n                    $sanitizer = new \\enshrined\\svgSanitize\\Sanitizer();\n                    // Load the dirty svg\n                    $dirtySVG = file_get_contents($filePath);\n                     // Pass it to the sanitizer and get it back clean\n                    $cleanSVG = $sanitizer->sanitize($dirtySVG);\n                    file_put_contents($filePath, $cleanSVG);\n\n                }\n               $valid = true;\n\n            } else {\n                $valid = false;\n            }\n\n            if (!$valid) {\n                @unlink($filePath);\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 107, \"message\": \"File is not an image\"}, \"id\" : \"id\"}');\n            }\n        }\n\n    }\n\n\n    if ($is_ext == 'gif' || $is_ext == 'jpg' || $is_ext == 'jpeg' || $is_ext == 'png') {\n        try {\n            $size = getimagesize($filePath);\n            $is_image = true;\n            $filesize = filesize($filePath);\n            $rerturn['file_size'] = $filesize;\n            $rerturn['file_size_human'] = mw()->format->human_filesize($filesize);\n            $rerturn['image_size'] = $size;\n            // $auto_resize_treshold = 10000000; // 10MiB\n            $auto_resize_treshold = 2000000; // 2MiB\n\n            if ($is_ext == 'jpg' || $is_ext == 'jpeg' || $is_ext == 'png') {\n                $rerturn['automatic_image_resize_is_enabled'] = $automatic_image_resize_on_upload;\n                if (!$automatic_image_resize_on_upload and $filesize > $auto_resize_treshold) {\n                    // if image is big, ask to enable resizing\n                    $rerturn['ask_user_to_enable_auto_resizing'] = 1;\n                    $rerturn['ask_user_to_enable_auto_resizing_filesize'] = $filesize;\n\n                }\n                if (!$automatic_image_resize_on_upload_disabled and $automatic_image_resize_on_upload and $filesize > $auto_resize_treshold) {\n                    $maxDim = 1980;\n                    //@ini_set('memory_limit', '256M');\n\n                    list($width, $height, $type, $attr) = $size;\n                    if ($width > $maxDim || $height > $maxDim) {\n//                        $d1 = dirname($filePath);\n                        $d2 = basename($filePath);\n//                        $target_filename = $d1 . DS . 'auto_resized_' . $d2;\n                        $target_filename = $filePath;\n                        $fn = $filePath;\n                        $ratio = $size[0] / $size[1]; // width/height\n                        if ($ratio > 1) {\n                            $width = $maxDim;\n                            $height = $maxDim / $ratio;\n                        } else {\n                            $width = $maxDim * $ratio;\n                            $height = $maxDim;\n                        }\n                        $src = imagecreatefromstring(file_get_contents($fn));\n                        $dst = imagecreatetruecolor($width, $height);\n\n                        if ($is_ext == 'png') {\n                            // save transparency in alpha channel\n                            imagealphablending($dst, false);\n                            imagesavealpha($dst, true);\n\n                        }\n                        imagecopyresampled($dst, $src, 0, 0, 0, 0, $width, $height, $size[0], $size[1]);\n                        imagedestroy($src);\n\n                        if ($is_ext == 'png') {\n                            imagepng($dst, $target_filename); // adjust format as needed\n\n                        } else if ($is_ext == 'jpg' || $is_ext == 'jpeg') {\n                            imagejpeg($dst, $target_filename); // adjust format as needed\n                        }\n\n                        $rerturn['image_was_auto_resized'] = 1;\n                        $rerturn['image_was_auto_resized_msg'] = \"Image was automatically resized because it was \" . $rerturn['file_size_human'];\n\n                        imagedestroy($dst);\n                    }\n                }\n            }\n\n\n        } catch (Exception $e) {\n            @unlink($filePath);\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 107, \"message\": \"File is not an image\"}, \"id\" : \"id\"}');\n\n        }\n    }\n\n\n    mw()->log_manager->delete('is_system=y&rel=uploader&created_at=[lt]30 min ago');\n    mw()->log_manager->delete('is_system=y&rel=uploader&session_id=' . mw()->user_manager->session_id());\n}\n$f_name = explode(DS, $filePath);\n$f_name = end($f_name);\n\n$filePath = mw()->url_manager->link_to_file($filePath);\n\n$rerturn['src'] = $filePath;\n$rerturn['name'] = $f_name;\n\n\nif (isset($upl_size_log) and $upl_size_log > 0) {\n    $rerturn['bytes_uploaded'] = $upl_size_log;\n}\n//$rerturn['ORIG_REQUEST'] = $_GET;\n\n\n/*\n * upload.php\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under GPL License.\n *\n * License: http://www.plupload.com/license\n * Contributing: http://www.plupload.com/contributing\n */\n// HTTP headers for no cache etc\nheader('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\nheader('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\nheader('Cache-Control: no-store, no-cache, must-revalidate');\nheader('Cache-Control: post-check=0, pre-check=0', false);\nheader('Pragma: no-cache');\n\n\necho json_encode($rerturn);\nif (mw()->user_manager->session_id() and !(mw()->user_manager->session_all() == false)) {\n    // @//session_write_close();\n}\n\nclass UploadException extends Exception\n{\n    public function __construct($code)\n    {\n        $message = $this->codeToMessage($code);\n        parent::__construct($message, $code);\n    }\n\n    private function codeToMessage($code)\n    {\n        switch ($code) {\n            case UPLOAD_ERR_INI_SIZE:\n                $message = 'The uploaded file exceeds the upload_max_filesize directive in php.ini';\n                break;\n            case UPLOAD_ERR_FORM_SIZE:\n                $message = 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form';\n                break;\n            case UPLOAD_ERR_PARTIAL:\n                $message = 'The uploaded file was only partially uploaded';\n                break;\n            case UPLOAD_ERR_NO_FILE:\n                $message = 'No file was uploaded';\n                break;\n            case UPLOAD_ERR_NO_TMP_DIR:\n                $message = 'Missing a temporary folder';\n                break;\n            case UPLOAD_ERR_CANT_WRITE:\n                $message = 'Failed to write file to disk';\n                break;\n            case UPLOAD_ERR_EXTENSION:\n                $message = 'File upload stopped by extension';\n                break;\n\n            default:\n                $message = 'Unknown upload error';\n                break;\n        }\n\n        return $message;\n    }\n}\n\nexit;\n\n// Return JSON-RPC response\n//die('{\"jsonrpc\" : \"2.0\", \"result\" : null, \"id\" : \"id\"}');\n"], "filenames": ["src/MicroweberPackages/App/functions/plupload.php"], "buggy_code_start_loc": [152], "buggy_code_end_loc": [160], "fixing_code_start_loc": [152], "fixing_code_end_loc": [158], "type": "CWE-78", "message": "OS Command Injection in Packagist microweber/microweber prior to 1.2.11.", "other": {"cve": {"id": "CVE-2022-0557", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-11T09:15:06.693", "lastModified": "2022-03-18T21:00:13.693", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OS Command Injection in Packagist microweber/microweber prior to 1.2.11."}, {"lang": "es", "value": "Una Inyecci\u00f3n de Comandos del Sistema Operativo en Packagist microweber/microweber versiones anteriores a 1.2.11"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.7, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 9.0}, "baseSeverity": "HIGH", "exploitabilityScore": 8.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.11", "matchCriteriaId": "52D59B39-B1A3-45D1-B4C4-65BEF86F2D85"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/166077/Microweber-1.2.11-Shell-Upload.html", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/microweber/microweber/commit/0a7e5f1d81de884861ca677ee1aaac31f188d632", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/660c89af-2de5-41bc-aada-9e4e78142db8", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/50768", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/0a7e5f1d81de884861ca677ee1aaac31f188d632"}}