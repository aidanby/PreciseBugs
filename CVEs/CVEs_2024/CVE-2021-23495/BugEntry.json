{"buggy_code": ["var stringify = require('../common/stringify')\nvar constant = require('./constants')\nvar util = require('../common/util')\n\nfunction Karma (updater, socket, iframe, opener, navigator, location, document) {\n  this.updater = updater\n  var startEmitted = false\n  var self = this\n  var queryParams = util.parseQueryParams(location.search)\n  var browserId = queryParams.id || util.generateId('manual-')\n  var displayName = queryParams.displayName\n  var returnUrl = queryParams['return_url' + ''] || null\n\n  var resultsBufferLimit = 50\n  var resultsBuffer = []\n\n  // This is a no-op if not running with a Trusted Types CSP policy, and\n  // lets tests declare that they trust the way that karma creates and handles\n  // URLs.\n  //\n  // More info about the proposed Trusted Types standard at\n  // https://github.com/WICG/trusted-types\n  var policy = {\n    createURL: function (s) {\n      return s\n    },\n    createScriptURL: function (s) {\n      return s\n    }\n  }\n  var trustedTypes = window.trustedTypes || window.TrustedTypes\n  if (trustedTypes) {\n    policy = trustedTypes.createPolicy('karma', policy)\n    if (!policy.createURL) {\n      // Install createURL for newer browsers. Only browsers that implement an\n      //     old version of the spec require createURL.\n      //     Should be safe to delete all reference to createURL by\n      //     February 2020.\n      // https://github.com/WICG/trusted-types/pull/204\n      policy.createURL = function (s) { return s }\n    }\n  }\n\n  // To start we will signal the server that we are not reconnecting. If the socket loses\n  // connection and was able to reconnect to the Karma server we will get a\n  // second 'connect' event. There we will pass 'true' and that will be passed to the\n  // Karma server then, so that Karma can differentiate between a socket client\n  // econnect and a full browser reconnect.\n  var socketReconnect = false\n\n  this.VERSION = constant.VERSION\n  this.config = {}\n\n  // Expose for testing purposes as there is no global socket.io\n  // registry anymore.\n  this.socket = socket\n\n  // Set up postMessage bindings for current window\n  // DEV: These are to allow windows in separate processes execute local tasks\n  //   Electron is one of these environments\n  if (window.addEventListener) {\n    window.addEventListener('message', function handleMessage (evt) {\n      // Resolve the origin of our message\n      var origin = evt.origin || evt.originalEvent.origin\n\n      // If the message isn't from our host, then reject it\n      if (origin !== window.location.origin) {\n        return\n      }\n\n      // Take action based on the message type\n      var method = evt.data.__karmaMethod\n      if (method) {\n        if (!self[method]) {\n          self.error('Received `postMessage` for \"' + method + '\" but the method doesn\\'t exist')\n          return\n        }\n        self[method].apply(self, evt.data.__karmaArguments)\n      }\n    }, false)\n  }\n\n  var childWindow = null\n  function navigateContextTo (url) {\n    if (self.config.useIframe === false) {\n      // run in new window\n      if (self.config.runInParent === false) {\n        // If there is a window already open, then close it\n        // DEV: In some environments (e.g. Electron), we don't have setter access for location\n        if (childWindow !== null && childWindow.closed !== true) {\n          // The onbeforeunload listener was added by context to catch\n          // unexpected navigations while running tests.\n          childWindow.onbeforeunload = undefined\n          childWindow.close()\n        }\n        childWindow = opener(url)\n      // run context on parent element (client_with_context)\n      // using window.__karma__.scriptUrls to get the html element strings and load them dynamically\n      } else if (url !== 'about:blank') {\n        var loadScript = function (idx) {\n          if (idx < window.__karma__.scriptUrls.length) {\n            var parser = new DOMParser()\n            // Revert escaped characters with special roles in HTML before parsing\n            var string = window.__karma__.scriptUrls[idx]\n              .replace(/\\\\x3C/g, '<')\n              .replace(/\\\\x3E/g, '>')\n            var doc = parser.parseFromString(string, 'text/html')\n            var ele = doc.head.firstChild || doc.body.firstChild\n            // script elements created by DomParser are marked as unexecutable,\n            // create a new script element manually and copy necessary properties\n            // so it is executable\n            if (ele.tagName && ele.tagName.toLowerCase() === 'script') {\n              var tmp = ele\n              ele = document.createElement('script')\n              ele.src = policy.createScriptURL(tmp.src)\n              ele.crossOrigin = tmp.crossOrigin\n            }\n            ele.onload = function () {\n              loadScript(idx + 1)\n            }\n            document.body.appendChild(ele)\n          } else {\n            window.__karma__.loaded()\n          }\n        }\n        loadScript(0)\n      }\n    // run in iframe\n    } else {\n      // The onbeforeunload listener was added by the context to catch\n      // unexpected navigations while running tests.\n      iframe.contentWindow.onbeforeunload = undefined\n      iframe.src = policy.createURL(url)\n    }\n  }\n\n  this.log = function (type, args) {\n    var values = []\n\n    for (var i = 0; i < args.length; i++) {\n      values.push(this.stringify(args[i], 3))\n    }\n\n    this.info({ log: values.join(', '), type: type })\n  }\n\n  this.stringify = stringify\n\n  function getLocation (url, lineno, colno) {\n    var location = ''\n\n    if (url !== undefined) {\n      location += url\n    }\n\n    if (lineno !== undefined) {\n      location += ':' + lineno\n    }\n\n    if (colno !== undefined) {\n      location += ':' + colno\n    }\n\n    return location\n  }\n\n  // error during js file loading (most likely syntax error)\n  // we are not going to execute at all. `window.onerror` callback.\n  this.error = function (messageOrEvent, source, lineno, colno, error) {\n    var message\n    if (typeof messageOrEvent === 'string') {\n      message = messageOrEvent\n\n      var location = getLocation(source, lineno, colno)\n      if (location !== '') {\n        message += '\\nat ' + location\n      }\n      if (error && error.stack) {\n        message += '\\n\\n' + error.stack\n      }\n    } else {\n      // create an object with the string representation of the message to\n      // ensure all its content is properly transferred to the console log\n      message = { message: messageOrEvent, str: messageOrEvent.toString() }\n    }\n\n    socket.emit('karma_error', message)\n    self.updater.updateTestStatus('karma_error ' + message)\n    this.complete()\n    return false\n  }\n\n  this.result = function (originalResult) {\n    var convertedResult = {}\n\n    // Convert all array-like objects to real arrays.\n    for (var propertyName in originalResult) {\n      if (Object.prototype.hasOwnProperty.call(originalResult, propertyName)) {\n        var propertyValue = originalResult[propertyName]\n\n        if (Object.prototype.toString.call(propertyValue) === '[object Array]') {\n          convertedResult[propertyName] = Array.prototype.slice.call(propertyValue)\n        } else {\n          convertedResult[propertyName] = propertyValue\n        }\n      }\n    }\n\n    if (!startEmitted) {\n      socket.emit('start', { total: null })\n      self.updater.updateTestStatus('start')\n      startEmitted = true\n    }\n\n    if (resultsBufferLimit === 1) {\n      self.updater.updateTestStatus('result')\n      return socket.emit('result', convertedResult)\n    }\n\n    resultsBuffer.push(convertedResult)\n\n    if (resultsBuffer.length === resultsBufferLimit) {\n      socket.emit('result', resultsBuffer)\n      self.updater.updateTestStatus('result')\n      resultsBuffer = []\n    }\n  }\n\n  this.complete = function (result) {\n    if (resultsBuffer.length) {\n      socket.emit('result', resultsBuffer)\n      resultsBuffer = []\n    }\n\n    socket.emit('complete', result || {})\n    if (this.config.clearContext) {\n      navigateContextTo('about:blank')\n    } else {\n      self.updater.updateTestStatus('complete')\n    }\n    if (returnUrl) {\n      if (!/^https?:\\/\\//.test(returnUrl)) {\n        throw new Error(\n          'Security: Navigation to '.concat(\n            returnUrl,\n            ' was blocked to prevent malicious exploits.'\n          )\n        )\n      }\n      location.href = returnUrl\n    }\n  }\n\n  this.info = function (info) {\n    // TODO(vojta): introduce special API for this\n    if (!startEmitted && util.isDefined(info.total)) {\n      socket.emit('start', info)\n      startEmitted = true\n    } else {\n      socket.emit('info', info)\n    }\n  }\n\n  socket.on('execute', function (cfg) {\n    self.updater.updateTestStatus('execute')\n    // reset startEmitted and reload the iframe\n    startEmitted = false\n    self.config = cfg\n\n    navigateContextTo(constant.CONTEXT_URL)\n\n    if (self.config.clientDisplayNone) {\n      [].forEach.call(document.querySelectorAll('#banner, #browsers'), function (el) {\n        el.style.display = 'none'\n      })\n    }\n\n    // clear the console before run\n    // works only on FF (Safari, Chrome do not allow to clear console from js source)\n    if (window.console && window.console.clear) {\n      window.console.clear()\n    }\n  })\n  socket.on('stop', function () {\n    this.complete()\n  }.bind(this))\n\n  // Report the browser name and Id. Note that this event can also fire if the connection has\n  // been temporarily lost, but the socket reconnected automatically. Read more in the docs:\n  // https://socket.io/docs/client-api/#Event-%E2%80%98connect%E2%80%99\n  socket.on('connect', function () {\n    socket.io.engine.on('upgrade', function () {\n      resultsBufferLimit = 1\n      // Flush any results which were buffered before the upgrade to WebSocket protocol.\n      if (resultsBuffer.length > 0) {\n        socket.emit('result', resultsBuffer)\n        resultsBuffer = []\n      }\n    })\n    var info = {\n      name: navigator.userAgent,\n      id: browserId,\n      isSocketReconnect: socketReconnect\n    }\n    if (displayName) {\n      info.displayName = displayName\n    }\n    socket.emit('register', info)\n    socketReconnect = true\n  })\n}\n\nmodule.exports = Karma\n", "## Overview\nIn order to serve you well, Karma needs to know about your project in order to test it\nand this is done via a configuration file. The easiest way to generate an initial configuration file\nis by using the `karma init` command. This page lists all of the available configuration options.\n\nNote: Most of the framework adapters, reporters, preprocessors and launchers need to be loaded as [plugins].\n\n\nThe Karma configuration file can be written in JavaScript, CoffeeScript, or TypeScript and is loaded as a regular Node.js module.\n\nUnless provided as argument, the Karma CLI will look for a configuration file at\n\n* `./karma.conf.js`\n* `./karma.conf.coffee`\n* `./karma.conf.ts`\n* `./.config/karma.conf.js`\n* `./.config/karma.conf.coffee`\n* `./.config/karma.conf.ts`\n\nin that order.\n\nWithin the configuration file, the configuration code is put together by setting `module.exports` to point to a function\nwhich accepts one argument: the configuration object.\n\n```javascript\n// karma.conf.js\nmodule.exports = function(config) {\n  config.set({\n    basePath: '../..',\n    frameworks: ['jasmine'],\n    //...\n  });\n};\n```\n\n```coffeescript\n# karma.conf.coffee\nmodule.exports = (config) ->\n  config.set\n    basePath: '../..'\n    frameworks: ['jasmine']\n    # ...\n```\n\n```typescript\n// karma.conf.ts\nmodule.exports = (config) => {\n  config.set({\n    basePath: '../..',\n    frameworks: ['jasmine'],\n    //...\n  });\n}\n```\n\n### Customized TypeScript Configuration\nUnder the hood Karma uses ts-node to transpile TypeScript to JavaScript. If the resolved `tsconfig.json` has `module` configured as `ES` formats. You might get errors like `SyntaxError: Unexpected token`. This is due that in Node `ES` module formats are not supported. To overcome this issue you need to configure ts-node to use `commonjs` module format.\n\nCreate a JavaScript configuration file that overrides the module format.\n```javascript\n// karma.conf.js\nrequire('ts-node').register({\n  compilerOptions: {\n    module: 'commonjs'\n  }\n});\nrequire('./karma.conf.ts');\n```\n\n## File Patterns\nAll of the configuration options, which specify file paths, use the [minimatch][minimatch] library to facilitate flexible\nbut concise file expressions so you can easily list all of the files you want to include and exclude.\n\nYou can find details about each configuration option in the section below. The following options utilize minimatch expressions:\n\n * `exclude`\n * `files`\n * `preprocessors`\n\nExamples:\n\n * `**/*.js`: All files with a \"js\" extension in all subdirectories\n * `**/!(jquery).js`: Same as previous, but excludes \"jquery.js\"\n * `**/(foo|bar).js`: In all subdirectories, all \"foo.js\" or \"bar.js\" files\n\n## Configuration Options\nThese are all of the available configuration options.\n\n## autoWatch\n**Type:** Boolean\n\n**Default:**  `true`\n\n**CLI:** `--auto-watch`, `--no-auto-watch`\n\n**Description:** Enable or disable watching files and executing the tests whenever one of these files changes.\n\n\n## autoWatchBatchDelay\n**Type:** Number\n\n**Default:**  `250`\n\n**Description:** When Karma is watching the files for changes, it tries to batch\nmultiple changes into a single run so that the test runner doesn't try to start and restart running\ntests more than it should, or restart while build files are not in a consistent state. The configuration setting\ntells Karma how long to wait (in milliseconds) from the last file change before starting\nthe test process again, resetting the timer each time a file changes (i.e. [debouncing](https://davidwalsh.name/javascript-debounce-function)).\n\n\n## basePath\n**Type:** String\n\n**Default:** `''`\n\n**Description:** The root path location that will be used to resolve all relative\npaths defined in `files` and `exclude`. If the `basePath` configuration is a\nrelative path, then it will be resolved to the `__dirname` of the configuration file.\n\n\n## browserDisconnectTimeout\n**Type:** Number\n\n**Default:** `2000`\n\n**Description:** How long does Karma wait for a browser to reconnect (in ms).\n\nWith a flaky connection, it is pretty common that the browser disconnects, but the actual test execution is still running\nwithout any problems. Karma does not treat a disconnection as an immediate failure and will wait for `browserDisconnectTimeout` (ms).\nIf the browser reconnects during that time, everything is fine.\n\n\n## browserConsoleLogOptions\n**Type:** Object\n\n**Default:** `{level: \"debug\", format: \"%b %T: %m\", terminal: true}`\n\n**Description:** Configure how the browser console is logged with the following\nproperties, all of which are optional:\n\n```javascript\n{\n  level:  string,\n  format: string,\n  path:   string,\n  terminal: boolean\n}\n```\n\n\nHere the `level` is the desired log-level, where level `log` always is logged. The format\nis a string where `%b`, `%t`, `%T`, and `%m` are replaced with the browser string,\nlog type in lower-case, log type in uppercase, and log message, respectively. This format will\nonly effect the output file. `path` is the output-path of the output-file, and `terminal` indicates\nif the log should be written in the terminal, or not.\n\n\n## browserDisconnectTolerance\n**Type:** Number\n\n**Default:** `0`\n\n**Description:** The number of disconnections tolerated.\n\nThe `disconnectTolerance` value represents the maximum number of tries a browser will attempt in the case of a disconnection.\nUsually, any disconnection is considered a failure, but this option allows you to define a tolerance level when there is\na flaky network link between the Karma server and the browsers.\n\n\n## browserNoActivityTimeout\n**Type:** Number\n\n**Default:** `30000`\n\n**Description:** How long will Karma wait for a message from a browser before disconnecting from it (in ms).\n\nIf, during test execution, Karma does not receive any message from a browser within `browserNoActivityTimeout`(ms), it will disconnect from the browser. The default is the one recommended by Travis (https://docs.travis-ci.com/user/gui-and-headless-browsers/#karma-and-firefox-inactivity-timeouts)\n\n\n## browsers\n**Type:** Array\n\n**Default:**  `[]`\n\n**CLI:** `--browsers Chrome,Firefox`, `--no-browsers`\n\n**Possible Values:**\n\n  * `Chrome` (launcher requires karma-chrome-launcher plugin)\n  * `ChromeCanary` (launcher requires karma-chrome-launcher plugin)\n  * `ChromeHeadless` (launcher requires karma-chrome-launcher plugin ^2.1.0)\n  * `PhantomJS` (launcher requires karma-phantomjs-launcher plugin)\n  * `Firefox` (launcher requires karma-firefox-launcher plugin)\n  * `Opera` (launcher requires karma-opera-launcher plugin)\n  * `IE` (launcher requires karma-ie-launcher plugin)\n  * `Safari` (launcher requires karma-safari-launcher plugin)\n\n**Description:** A list of browsers to launch and capture. When Karma starts up, it will also start up each browser\nwhich is placed within this setting. Once Karma is shut down, it will shut down these\nbrowsers as well. You can capture any browser manually by opening the browser and visiting the URL where\nthe Karma web server is listening (by default it is `http://localhost:9876/`).\n\nSee [config/browsers] for more information. Additional launchers can be defined through [plugins]. Use the\n`--no-browsers` command line option to override the value of this setting specified in the configuration file\nwith an empty list.\n\n\n## captureTimeout\n**Type:** Number\n\n**Default:** `60000`\n\n**Description:** Timeout for capturing a browser (in ms).\n\nThe `captureTimeout` value represents the maximum boot-up time allowed for a browser to start and connect to Karma.\nIf any browser does not get captured within the timeout, Karma will kill it and try to launch\nit again and, after three attempts to capture it, Karma will give up.\n\n\n## client.args\n**Type:** Array\n\n**Default:** `undefined`\n\n**CLI:** All arguments after `--` (only when using `karma run`)\n\n**Description:** When `karma run` is passed additional arguments on the command-line, they\nare passed through to the test adapter as `karma.config.args` (an array of strings).\nThe `client.args` option allows you to set this value for actions other than `run`.\n\nHow this value is used is up to your test adapter - you should check your adapter's documentation to see how (and if) it uses this value.\n\n\n## client.useIframe\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** Run the tests inside an iFrame or a new window\n\nIf true, Karma runs the tests inside an iFrame. If false, Karma runs the tests in a new window. Some tests may not run in an\niFrame and may need a new window to run.\n\n## client.runInParent\n**Type:** Boolean\n\n**Default:** `false`\n\n**Description:** Run the tests on the same window as the client, without using iframe or a new window\n\nIf true, Karma runs the tests inside the original window without using iframe. It will load the test scripts dynamically.\n\n## client.captureConsole\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** Capture all console output and pipe it to the terminal.\n\n\n## client.clearContext\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** Clear the context window\n\nIf true, Karma clears the context window upon the completion of running the tests. If false, Karma does not clear the context window\nupon the completion of running the tests. Setting this to false is useful when embedding a Jasmine Spec Runner Template.\n\n## client.clientDisplayNone\n**Type:** Boolean\n\n**Default:** `false`\n\n**Description:** Set style display none on client elements.\n\nIf true, Karma does not display the banner and browser list. Useful when using karma on component tests with screenshots.\n\n## colors\n**Type:** Boolean\n\n**Default:**   `true`\n\n**CLI:** `--colors`, `--no-colors`\n\n**Description:** Enable or disable colors in the output (reporters and logs).\n\n\n## concurrency\n**Type:** Number\n\n**Default:** `Infinity`\n\n**Description:** How many browsers Karma launches in parallel.\n\nEspecially on services like SauceLabs and Browserstack, it makes sense only to launch a limited amount of browsers at once, and only start more when those have finished. Using this configuration, you can specify how many browsers should be running at once at any given point in time.\n\n## crossOriginAttribute\n\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** When true, this will append the crossorigin attribute to generated script tags, which enables better error reporting for JavaScript files served from a different origin.\nDisable this when you need to load external scripts that are served without the necessary `Access-Control-Allow-Origin` header.\n\n\n## customContextFile\n**Type:** string\n\n**Default:** `null`\n\n**Description:** If `null` (default), uses karma's own `context.html` file.\n\n\n## customDebugFile\n**Type:** string\n\n**Default:** `null`\n\n**Description:** If `null` (default), uses karma's own `debug.html` file.\n\n\n## customClientContextFile\n**Type:** string\n\n**Default:** `null`\n\n**Description:** If `null` (default), uses karma's own `client_with_context.html` file (which is used when client.runInParent set to true).\n\n\n## customHeaders\n**Type:** Array\n\n**Default:** `undefined`\n\n**Description** Custom HTTP headers that will be set upon serving files by Karma's web server.\nCustom headers are useful, especially with upcoming browser features like Service Workers.\n\nThe `customHeaders` option allows you to set HTTP headers for files that match a regular expression.\n`customHeaders` is an array of `Objects` with properties as follows:\n\n* match: Regular expression string to match files\n* name: HTTP header name\n* value: HTTP header value\n\n**Example:**\n```javascript\ncustomHeaders: [{\n  match: '.*foo.html',\n  name: 'Service-Worker-Allowed',\n  value: '/'\n}]\n```\n\n\n## detached\n**Type:** Boolean\n\n**Default:** `false`\n\n**CLI:** `--detached`\n\n**Description:** When true, this will start the karma server in another process, writing no output to the console.\nThe server can be stopped using the `karma stop` command.\n\n\n## exclude\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** List of files/patterns to exclude from loaded files.\n\n## failOnEmptyTestSuite\n**Type:** Boolean\n\n**Default:** `true`\n\n**CLI:** `--fail-on-empty-test-suite`, `--no-fail-on-empty-test-suite`\n\n**Description:** Enable or disable failure on running empty test-suites. If disabled the program\nwill return exit-code `0` and display a warning.\n\n## failOnSkippedTests\n**Type:** Boolean\n\n**Default:** `false`\n\n**CLI:** `--fail-on-skipped-tests`, `--no-fail-on-skipped-tests`\n\n**Description:** Enable or disable failure on tests deliberately disabled, eg fit() or xit() tests in jasmine.\nUse this to prevent accidental disabling tests needed to validate production.\n\n## failOnFailingTestSuite\n**Type:** Boolean\n\n**Default:** `true`\n\n**CLI:** `--fail-on-failing-test-suite`, `--no-fail-on-failing-test-suite`\n\n**Description:** Enable or disable failure on failing tests.\n\n## files\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** List of files/patterns to load in the browser.\n\nSee [config/files] for more information.\n\n## forceJSONP\n**Type:** Boolean\n\n**Default:** `false`\n\n**Description:** Force socket.io to use JSONP polling instead of XHR polling.\n\n## frameworks\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** List of test frameworks you want to use. Typically, you will set this to `['jasmine']`, `['mocha']` or `['qunit']`...\n\nPlease note just about all frameworks in Karma require an additional plugin/framework library to be installed (via npm).\n\nAdditional information can be found in [plugins].\n\n## listenAddress\n**Type:** String\n\n**Default:** `'0.0.0.0' or LISTEN_ADDR`\n\n**Description:** Address that the server will listen on. Change to 'localhost' to only listen to the loopback, or '::' to listen on all IPv6 interfaces\n\n## hostname\n**Type:** String\n\n**Default:** `'localhost'`\n\n**Description:** Hostname to be used when capturing browsers.\n\n\n## httpsServerOptions\n**Type:** Object\n\n**Default:** `{}`\n\n**Description:** Options object to be used by Node's `https` class.\n\nObject description can be found in the [NodeJS.org API docs](https://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener)\n\n**Example:**\n```javascript\nhttpsServerOptions: {\n  key: fs.readFileSync('server.key', 'utf8'),\n  cert: fs.readFileSync('server.crt', 'utf8')\n},\n```\n\n## logLevel\n**Type:** Constant\n\n**Default:** `config.LOG_INFO`\n\n**CLI:** `--log-level debug`\n\n**Possible values:**\n\n  * `config.LOG_DISABLE`\n  * `config.LOG_ERROR`\n  * `config.LOG_WARN`\n  * `config.LOG_INFO`\n  * `config.LOG_DEBUG`\n\n**Description:** Level of logging.\n\n\n## loggers\n**Type:** Array\n\n**Default:** `[{type: 'console'}]`\n\n**Description:** A list of log appenders to be used. See the documentation for [log4js] for more information.\n\n\n## middleware\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** List of names of additional middleware you want the karma server to use. Middleware will be used in the order listed.\n\nYou must have installed the middleware via a plugin/framework (either inline or via npm). Additional information can be found in [plugins].\n\nThe plugin must provide an express/connect middleware function (details about this can be found in [the Express docs](https://expressjs.com/en/guide/using-middleware.html). An example of custom inline middleware is shown below.\n\n**Example:**\n```javascript\nfunction CustomMiddlewareFactory (config) {\n  return function (request, response, /* next */) {\n    response.writeHead(200)\n    return response.end(\"content!\")\n  }\n}\n```\n\n```javascript\nmiddleware: ['custom']\nplugins: [\n  {'middleware:custom': ['factory', CustomMiddlewareFactory]}\n  ...\n]\n```\n\n\n## mime\n**Type:** Object\n\n**Default:** `{}`\n\n**Description:** Redefine default mapping from file extensions to MIME-type\n\nSet property name to required MIME, provide Array of extensions (without dots) as it's value\n\n**Example:**\n```javascript\nmime: {\n   'text/x-typescript': ['ts','tsx']\n   'text/plain' : ['mytxt']\n}\n```\n\n\n## beforeMiddleware\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** This is the same as middleware except that these middleware will be run before karma's own middleware.\n\n\n## plugins\n**Type:** Array\n\n**Default:** `['karma-*']`\n\n**Description:** List of plugins to load. A plugin can be either a plugin object, or a string containing name of the module which exports a plugin object. See [plugins] for more information on how to install and use plugins. \n\nBy default, Karma loads plugins from all sibling npm packages which have a name starting with `karma-*`.\n\n\n## port\n**Type:** Number\n\n**Default:** `9876`\n\n**CLI:** `--port 9876`\n\n**Description:** The port where the web server will be listening.\n\nIf the defined port is already in use, karma will automatically increase its value in steps of 1 until a free port is found.\n\n\n## processKillTimeout\n**Type:** Number\n\n**Default:** `2000`\n\n**Description:** How long will Karma wait for browser process to terminate before sending a SIGKILL signal.\n\nIf, after test execution or after Karma attempts to kill the browser, browser is not killed within `processKillTimeout`(ms), Karma will send a SIGKILL signal to attempt to kill the browser forcefully.\n\n\n## preprocessors\n**Type:** Object\n\n**Default:** `{'**/*.coffee': 'coffee'}`\n\n**Description:** A map of preprocessors to use.\n\nPreprocessors can be loaded through [plugins].\n\nNote: Just about all preprocessors in Karma require an additional library to be installed (via npm).\n\nBe aware that preprocessors may be transforming the files and file types that are available at run time. For instance,\nif you are using the \"coverage\" preprocessor on your source files, if you then attempt to interactively debug\nyour tests, you'll discover that your expected source code is completely changed from what you expected.  Because\nof that, you'll want to engineer this so that your automated builds use the coverage entry in the \"reporters\" list,\nbut your interactive debugging does not.\n\nClick <a href=\"preprocessors.html\">here</a> for more information.\n\n\n## protocol\n**Type:** String\n\n**Default:** `'http:'`\n\n**Possible Values:**\n\n* `http:`\n* `https:`\n\n**Description:** Protocol used for running the Karma webserver.\n\nDetermines the use of the Node `http` or `https` class.\n\nNote: Using `'https:'` requires you to specify `httpsServerOptions`.\n\n\n## httpModule\n**Type:** String\n\n**Default:** `undefined`\n\n**Description:** Module used for Karma webserver.\n\nUses the provided module instead of node's built in `http` or `https` module. The module loaded here must exactly match the interface of node's http module. This can be useful for loading in a module like `node-http2` to allow for http2 support.\n\nNote: if you're using this to enable `http2` you must also set the `protocol` to `https:` and specify certificates as http2 can only run of https.\n\n## proxies\n**Type:** Object\n\n**Default:** `{}`\n\n**Description:** A map of path-proxy pairs.\n\nThe proxy can be specified directly by the target url or path, or with an object to configure more options. The available options are:\n\n- `target` The target url or path (mandatory)\n- `changeOrigin` Whether or not the proxy should override the Host header using the host from the target (default `false`)\n\n**Example:**\n```javascript\nproxies: {\n  '/static': 'http://gstatic.com',\n  '/web': 'http://localhost:9000',\n  '/img/': '/base/test/images/',\n  '/proxyfied': {\n    'target': 'http://myserver.localhost',\n    'changeOrigin': true\n  }\n},\n```\n\n\n## proxyValidateSSL\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** Whether or not Karma or any browsers should raise an error when an invalid SSL certificate is found.\n\n\n## reportSlowerThan\n**Type:** Number\n\n**Default:** `0`\n\n**Description:** Karma will report all the tests that are slower than given time limit (in ms).\nThis is disabled by default (since the default value is 0).\n\n\n## reporters\n**Type:** Array\n\n**Default:** `['progress']`\n\n**CLI:** `--reporters progress,growl`\n\n**Possible Values:**\n\n  * `dots`\n  * `progress`\n\n**Description:** A list of reporters to use.\n\nAdditional reporters, such as `growl`, `junit`, `teamcity` or `coverage` can be loaded through [plugins].\n\nNote: Just about all additional reporters in Karma (other than progress) require an additional library to be installed (via npm).\n\n\n## formatError\n**Type:** Function\n\n**Default:** `undefined`\n\n**CLI:** `--format-error ./path/to/formatFunction.js`\n\n**Arguments:**\n\n  * `msg` - A single line of the assertion error and stack trace (called for each line).\n\n**Returns:** A new error message line.\n\n**Description:** Format assertion errors and stack traces.  Useful for removing vendors and compiled sources.  Return an empty line `''` to remove it.\n\nThe CLI option should be a path to a file that exports the format function.  This can be a function exported at the root of the module or an export named `formatError`.\n\n## pingTimeout\n**Type** Number\n\n**Default** 5000\n\n**Description** Socket.io pingTimeout in ms, https://socket.io/docs/server-api/#new-Server-httpServer-options.\nVery slow networks may need values up to 60000. Larger values delay discovery of deadlock in tests or browser crashes.\n\n## restartOnFileChange\n**Type:** Boolean\n\n**Default:** `false`\n\n**Description:** When Karma is watching the files for changes, it will delay a new run until\nthe current run is finished. Enabling this setting will cancel the current run and start a new run\nimmediately when a change is detected.\n\n\n## retryLimit\n**Type:** Number\n\n**Default:** 2\n\n**Description:** When a browser crashes, karma will try to relaunch. This defines how many times karma should relaunch\na browser before giving up.\n\n## singleRun\n**Type:** Boolean\n\n**Default:** `false`\n\n**CLI:** `--single-run`, `--no-single-run`\n\n**Description:** Continuous Integration mode.\n\nIf `true`, Karma will start and capture all configured browsers, run tests and then exit with an exit code of `0` or `1` depending\non whether all tests passed or any tests failed.\n\n\n\n## transports\n**Type:** Array\n\n**Default:** `['polling', 'websocket']`\n\n**Description:** An array of allowed transport methods between the browser and testing server. This configuration setting\nis handed off to [socket.io](https://socket.io/) (which manages the communication\nbetween browsers and the testing server).\n\n\n## proxyReq\n**Type:** Function\n\n**Default:** `undefined`\n\n**Description:** Called when requesting Proxy.\n\nDetails about this can be found in the [node-http-proxy](https://github.com/nodejitsu/node-http-proxy). An example of overwriting the HTTP header is shown below.\n\n**Example:**\n```javascript\nproxyReq: function(proxyReq, req, res, options) {\n  proxyReq.setHeader('Referer', 'https://www.example.com/');\n}\n```\n\n## proxyRes\n**Type:** Function\n\n**Default:** `undefined`\n\n**Description:** Called when respnsing Proxy.\n\nDetails about this can be found in the [node-http-proxy](https://github.com/nodejitsu/node-http-proxy). An example of overwriting the HTTP header is shown below.\n\n**Example:**\n```javascript\nproxyRes: function(proxyRes, req, res) {\n  if (proxyRes.headers['set-cookie']) {\n    proxyRes.headers['set-cookie'] = proxyRes.headers['set-cookie'].map(function (cookie) {\n      return cookie.replace(/\\s*secure;?/i, '');\n    })\n  }\n}\n```\n\n\n## upstreamProxy\n**Type:** Object\n\n**Default:** `undefined`\n\n**Description:** For use when the Karma server needs to be run behind a proxy that changes the base url, etc\n\nIf set then the following fields will be defined and can be overridden:\n\n### path\n**Type:** String\n\n**Default:** `'/'`\n\n**Description:** Will be prepended to the base url when launching browsers and prepended to internal urls as loaded by the browsers\n\n### port\n**Type:** Number\n\n**Default:** `9875`\n\n**Description:** Will be used as the port when launching browsers\n\n### hostname\n**Type:** String\n\n**Default:** `'localhost'`\n\n**Description:** Will be used as the hostname when launching browsers\n\n\n\n### protocol\n**Type:** String\n\n**Default:** `'http:'`\n\n**Description:** Will be used as the protocol when launching browsers\n\n\n## urlRoot\n**Type:** String\n\n**Default:** `'/'`\n\n**Description:** The base url, where Karma runs.\n\nAll of Karma's urls get prefixed with the `urlRoot`. This is helpful when using proxies, as\nsometimes you might want to proxy a url that is already taken by Karma.\n\n## browserSocketTimeout\n**Type:** Number\n\n**Default:** `20000`\n\n**Description:** Timeout for the client socket connection (in ms).\n\nThis configuration represents the amount of time that the client will wait for the socket\nto connect.\n\nWhen running a browser in different environments, it can take different amounts of time for the\nclient socket to connect. If Karma cannot connect within the default timeout, you may see an\nerror similar to the following:\n```\nChromeHeadless has not captured in 60000ms, killing.\nTrying to start ChromeHeadless again (1/2).\nChromeHeadless has not captured in 60000ms, killing.\nTrying to start ChromeHeadless again (2/2).\nChromeHeadless has not captured in 60000ms, killing.\nChromeHeadless failed 2 times(timeout). Giving up.\n```\nIf you see this error, you can try increasing the socket connection timeout.\n\n\n[plugins]: plugins.html\n[config/files]: files.html\n[config/browsers]: browsers.html\n[config/preprocessors]: preprocessors.html\n[log4js]: https://github.com/nomiddlename/log4js-node\n[minimatch]: https://github.com/isaacs/minimatch\n", "'use strict'\n\nconst path = require('path')\nconst assert = require('assert')\n\nconst logger = require('./logger')\nconst log = logger.create('config')\nconst helper = require('./helper')\nconst constant = require('./constants')\n\nconst _ = require('lodash')\n\nlet COFFEE_SCRIPT_AVAILABLE = false\nlet LIVE_SCRIPT_AVAILABLE = false\nlet TYPE_SCRIPT_AVAILABLE = false\n\ntry {\n  require('coffeescript').register()\n  COFFEE_SCRIPT_AVAILABLE = true\n} catch (e) {}\n\n// LiveScript is required here to enable config files written in LiveScript.\n// It's not directly used in this file.\ntry {\n  require('LiveScript')\n  LIVE_SCRIPT_AVAILABLE = true\n} catch (e) {}\n\ntry {\n  require('ts-node')\n  TYPE_SCRIPT_AVAILABLE = true\n} catch (e) {}\n\nclass Pattern {\n  constructor (pattern, served, included, watched, nocache, type, isBinary) {\n    this.pattern = pattern\n    this.served = helper.isDefined(served) ? served : true\n    this.included = helper.isDefined(included) ? included : true\n    this.watched = helper.isDefined(watched) ? watched : true\n    this.nocache = helper.isDefined(nocache) ? nocache : false\n    this.weight = helper.mmPatternWeight(pattern)\n    this.type = type\n    this.isBinary = isBinary\n  }\n\n  compare (other) {\n    return helper.mmComparePatternWeights(this.weight, other.weight)\n  }\n}\n\nclass UrlPattern extends Pattern {\n  constructor (url, type) {\n    super(url, false, true, false, false, type)\n  }\n}\n\nfunction createPatternObject (pattern) {\n  if (pattern && helper.isString(pattern)) {\n    return helper.isUrlAbsolute(pattern)\n      ? new UrlPattern(pattern)\n      : new Pattern(pattern)\n  } else if (helper.isObject(pattern) && pattern.pattern && helper.isString(pattern.pattern)) {\n    return helper.isUrlAbsolute(pattern.pattern)\n      ? new UrlPattern(pattern.pattern, pattern.type)\n      : new Pattern(pattern.pattern, pattern.served, pattern.included, pattern.watched, pattern.nocache, pattern.type)\n  } else {\n    log.warn(`Invalid pattern ${pattern}!\\n\\tExpected string or object with \"pattern\" property.`)\n    return new Pattern(null, false, false, false, false)\n  }\n}\n\nfunction normalizeUrl (url) {\n  if (!url.startsWith('/')) {\n    url = `/${url}`\n  }\n\n  if (!url.endsWith('/')) {\n    url = url + '/'\n  }\n\n  return url\n}\n\nfunction normalizeUrlRoot (urlRoot) {\n  const normalizedUrlRoot = normalizeUrl(urlRoot)\n\n  if (normalizedUrlRoot !== urlRoot) {\n    log.warn(`urlRoot normalized to \"${normalizedUrlRoot}\"`)\n  }\n\n  return normalizedUrlRoot\n}\n\nfunction normalizeProxyPath (proxyPath) {\n  const normalizedProxyPath = normalizeUrl(proxyPath)\n\n  if (normalizedProxyPath !== proxyPath) {\n    log.warn(`proxyPath normalized to \"${normalizedProxyPath}\"`)\n  }\n\n  return normalizedProxyPath\n}\n\nfunction normalizeConfig (config, configFilePath) {\n  function basePathResolve (relativePath) {\n    if (helper.isUrlAbsolute(relativePath)) {\n      return relativePath\n    } else if (helper.isDefined(config.basePath) && helper.isDefined(relativePath)) {\n      return path.resolve(config.basePath, relativePath)\n    } else {\n      return ''\n    }\n  }\n\n  function createPatternMapper (resolve) {\n    return (objectPattern) => Object.assign(objectPattern, { pattern: resolve(objectPattern.pattern) })\n  }\n\n  if (helper.isString(configFilePath)) {\n    config.basePath = path.resolve(path.dirname(configFilePath), config.basePath) // resolve basePath\n    config.exclude.push(configFilePath) // always ignore the config file itself\n  } else {\n    config.basePath = path.resolve(config.basePath || '.')\n  }\n\n  config.files = config.files.map(createPatternObject).map(createPatternMapper(basePathResolve))\n  config.exclude = config.exclude.map(basePathResolve)\n  config.customContextFile = config.customContextFile && basePathResolve(config.customContextFile)\n  config.customDebugFile = config.customDebugFile && basePathResolve(config.customDebugFile)\n  config.customClientContextFile = config.customClientContextFile && basePathResolve(config.customClientContextFile)\n\n  // normalize paths on windows\n  config.basePath = helper.normalizeWinPath(config.basePath)\n  config.files = config.files.map(createPatternMapper(helper.normalizeWinPath))\n  config.exclude = config.exclude.map(helper.normalizeWinPath)\n  config.customContextFile = helper.normalizeWinPath(config.customContextFile)\n  config.customDebugFile = helper.normalizeWinPath(config.customDebugFile)\n  config.customClientContextFile = helper.normalizeWinPath(config.customClientContextFile)\n\n  // normalize urlRoot\n  config.urlRoot = normalizeUrlRoot(config.urlRoot)\n\n  // normalize and default upstream proxy settings if given\n  if (config.upstreamProxy) {\n    const proxy = config.upstreamProxy\n    proxy.path = helper.isDefined(proxy.path) ? normalizeProxyPath(proxy.path) : '/'\n    proxy.hostname = helper.isDefined(proxy.hostname) ? proxy.hostname : 'localhost'\n    proxy.port = helper.isDefined(proxy.port) ? proxy.port : 9875\n\n    // force protocol to end with ':'\n    proxy.protocol = (proxy.protocol || 'http').split(':')[0] + ':'\n    if (proxy.protocol.match(/https?:/) === null) {\n      log.warn(`\"${proxy.protocol}\" is not a supported upstream proxy protocol, defaulting to \"http:\"`)\n      proxy.protocol = 'http:'\n    }\n  }\n\n  // force protocol to end with ':'\n  config.protocol = (config.protocol || 'http').split(':')[0] + ':'\n  if (config.protocol.match(/https?:/) === null) {\n    log.warn(`\"${config.protocol}\" is not a supported protocol, defaulting to \"http:\"`)\n    config.protocol = 'http:'\n  }\n\n  if (config.proxies && Object.prototype.hasOwnProperty.call(config.proxies, config.urlRoot)) {\n    log.warn(`\"${config.urlRoot}\" is proxied, you should probably change urlRoot to avoid conflicts`)\n  }\n\n  if (config.singleRun && config.autoWatch) {\n    log.debug('autoWatch set to false, because of singleRun')\n    config.autoWatch = false\n  }\n\n  if (config.runInParent) {\n    log.debug('useIframe set to false, because using runInParent')\n    config.useIframe = false\n  }\n\n  if (!config.singleRun && !config.useIframe && config.runInParent) {\n    log.debug('singleRun set to true, because using runInParent')\n    config.singleRun = true\n  }\n\n  if (helper.isString(config.reporters)) {\n    config.reporters = config.reporters.split(',')\n  }\n\n  if (config.client && config.client.args) {\n    assert(Array.isArray(config.client.args), 'Invalid configuration: client.args must be an array of strings')\n  }\n\n  if (config.browsers) {\n    assert(Array.isArray(config.browsers), 'Invalid configuration: browsers option must be an array')\n  }\n\n  if (config.formatError) {\n    assert(helper.isFunction(config.formatError), 'Invalid configuration: formatError option must be a function.')\n  }\n\n  if (config.processKillTimeout) {\n    assert(helper.isNumber(config.processKillTimeout), 'Invalid configuration: processKillTimeout option must be a number.')\n  }\n\n  if (config.browserSocketTimeout) {\n    assert(helper.isNumber(config.browserSocketTimeout), 'Invalid configuration: browserSocketTimeout option must be a number.')\n  }\n\n  if (config.pingTimeout) {\n    assert(helper.isNumber(config.pingTimeout), 'Invalid configuration: pingTimeout option must be a number.')\n  }\n\n  const defaultClient = config.defaultClient || {}\n  Object.keys(defaultClient).forEach(function (key) {\n    const option = config.client[key]\n    config.client[key] = helper.isDefined(option) ? option : defaultClient[key]\n  })\n\n  // normalize preprocessors\n  const preprocessors = config.preprocessors || {}\n  const normalizedPreprocessors = config.preprocessors = Object.create(null)\n\n  Object.keys(preprocessors).forEach(function (pattern) {\n    const normalizedPattern = helper.normalizeWinPath(basePathResolve(pattern))\n\n    normalizedPreprocessors[normalizedPattern] = helper.isString(preprocessors[pattern])\n      ? [preprocessors[pattern]] : preprocessors[pattern]\n  })\n\n  // define custom launchers/preprocessors/reporters - create a new plugin\n  const module = Object.create(null)\n  let hasSomeInlinedPlugin = false\n  const types = ['launcher', 'preprocessor', 'reporter']\n\n  types.forEach(function (type) {\n    const definitions = config[`custom${helper.ucFirst(type)}s`] || {}\n\n    Object.keys(definitions).forEach(function (name) {\n      const definition = definitions[name]\n\n      if (!helper.isObject(definition)) {\n        return log.warn(`Can not define ${type} ${name}. Definition has to be an object.`)\n      }\n\n      if (!helper.isString(definition.base)) {\n        return log.warn(`Can not define ${type} ${name}. Missing base ${type}.`)\n      }\n\n      const token = type + ':' + definition.base\n      const locals = {\n        args: ['value', definition]\n      }\n\n      module[type + ':' + name] = ['factory', function (injector) {\n        const plugin = injector.createChild([locals], [token]).get(token)\n        if (type === 'launcher' && helper.isDefined(definition.displayName)) {\n          plugin.displayName = definition.displayName\n        }\n        return plugin\n      }]\n      hasSomeInlinedPlugin = true\n    })\n  })\n\n  if (hasSomeInlinedPlugin) {\n    config.plugins.push(module)\n  }\n\n  return config\n}\n\n/**\n * @class\n */\nclass Config {\n  constructor () {\n    this.LOG_DISABLE = constant.LOG_DISABLE\n    this.LOG_ERROR = constant.LOG_ERROR\n    this.LOG_WARN = constant.LOG_WARN\n    this.LOG_INFO = constant.LOG_INFO\n    this.LOG_DEBUG = constant.LOG_DEBUG\n\n    // DEFAULT CONFIG\n    this.frameworks = []\n    this.protocol = 'http:'\n    this.port = constant.DEFAULT_PORT\n    this.listenAddress = constant.DEFAULT_LISTEN_ADDR\n    this.hostname = constant.DEFAULT_HOSTNAME\n    this.httpsServerConfig = {}\n    this.basePath = ''\n    this.files = []\n    this.browserConsoleLogOptions = {\n      level: 'debug',\n      format: '%b %T: %m',\n      terminal: true\n    }\n    this.customContextFile = null\n    this.customDebugFile = null\n    this.customClientContextFile = null\n    this.exclude = []\n    this.logLevel = constant.LOG_INFO\n    this.colors = true\n    this.autoWatch = true\n    this.autoWatchBatchDelay = 250\n    this.restartOnFileChange = false\n    this.usePolling = process.platform === 'linux'\n    this.reporters = ['progress']\n    this.singleRun = false\n    this.browsers = []\n    this.captureTimeout = 60000\n    this.pingTimeout = 5000\n    this.proxies = {}\n    this.proxyValidateSSL = true\n    this.preprocessors = {}\n    this.preprocessor_priority = {}\n    this.urlRoot = '/'\n    this.upstreamProxy = undefined\n    this.reportSlowerThan = 0\n    this.loggers = [constant.CONSOLE_APPENDER]\n    this.transports = ['polling', 'websocket']\n    this.forceJSONP = false\n    this.plugins = ['karma-*']\n    this.defaultClient = this.client = {\n      args: [],\n      useIframe: true,\n      runInParent: false,\n      captureConsole: true,\n      clearContext: true\n    }\n    this.browserDisconnectTimeout = 2000\n    this.browserDisconnectTolerance = 0\n    this.browserNoActivityTimeout = 30000\n    this.processKillTimeout = 2000\n    this.concurrency = Infinity\n    this.failOnEmptyTestSuite = true\n    this.retryLimit = 2\n    this.detached = false\n    this.crossOriginAttribute = true\n    this.browserSocketTimeout = 20000\n  }\n\n  set (newConfig) {\n    _.mergeWith(this, newConfig, (obj, src) => {\n      // Overwrite arrays to keep consistent with #283\n      if (Array.isArray(src)) {\n        return src\n      }\n    })\n  }\n}\n\nconst CONFIG_SYNTAX_HELP = '  module.exports = function(config) {\\n' +\n  '    config.set({\\n' +\n  '      // your config\\n' +\n  '    });\\n' +\n  '  };\\n'\n\n/**\n * Retrieve a parsed and finalized Karma `Config` instance. This `karmaConfig`\n * object may be used to configure public API methods such a `Server`,\n * `runner.run`, and `stopper.stop`.\n *\n * @param {?string} [configFilePath=null]\n *     A string representing a file system path pointing to the config file\n *     whose default export is a function that will be used to set Karma\n *     configuration options. This function will be passed an instance of the\n *     `Config` class as its first argument. If this option is not provided,\n *     then only the options provided by the `cliOptions` argument will be\n *     set.\n * @param {Object} cliOptions\n *     An object whose values will take priority over options set in the\n *     config file. The config object passed to function exported by the\n *     config file will already have these options applied. Any changes the\n *     config file makes to these options will effectively be ignored in the\n *     final configuration.\n *\n *     `cliOptions` all the same options as the config file and is applied\n *     using the same `config.set()` method.\n * @param {Object} parseOptions\n * @param {boolean} [parseOptions.promiseConfig=false]\n *     When `true`, a promise that resolves to a `Config` object will be\n *     returned. This also allows the function exported by config files (if\n *     provided) to be asynchronous by returning a promise. Resolving this\n *     promise indicates that all async activity has completed. The resolution\n *     value itself is ignored, all configuration must be done with\n *     `config.set`.\n * @param {boolean} [parseOptions.throwErrors=false]\n *     When `true`, process exiting on critical failures will be disabled. In\n *     The error will be thrown as an exception. If\n *     `parseOptions.promiseConfig` is also `true`, then the error will\n *     instead be used as the promise's reject reason.\n * @returns {Config|Promise<Config>}\n */\nfunction parseConfig (configFilePath, cliOptions, parseOptions) {\n  const promiseConfig = parseOptions && parseOptions.promiseConfig === true\n  const throwErrors = parseOptions && parseOptions.throwErrors === true\n  const shouldSetupLoggerEarly = promiseConfig\n  if (shouldSetupLoggerEarly) {\n    // `setupFromConfig` provides defaults for `colors` and `logLevel`.\n    // `setup` provides defaults for `appenders`\n    // The first argument MUST BE an object\n    logger.setupFromConfig({})\n  }\n  function fail () {\n    log.error(...arguments)\n    if (throwErrors) {\n      const errorMessage = Array.from(arguments).join(' ')\n      const err = new Error(errorMessage)\n      if (promiseConfig) {\n        return Promise.reject(err)\n      }\n      throw err\n    } else {\n      const warningMessage =\n        'The `parseConfig()` function historically called `process.exit(1)`' +\n        ' when it failed. This behavior is now deprecated and function will' +\n        ' throw an error in the next major release. To suppress this warning' +\n        ' pass `throwErrors: true` as a third argument to opt-in into the new' +\n        ' behavior and adjust your code to respond to the exception' +\n        ' accordingly.' +\n        ' Example: `parseConfig(path, cliOptions, { throwErrors: true })`'\n      log.warn(warningMessage)\n      process.exit(1)\n    }\n  }\n\n  let configModule\n  if (configFilePath) {\n    try {\n      if (path.extname(configFilePath) === '.ts' && TYPE_SCRIPT_AVAILABLE) {\n        require('ts-node').register()\n      }\n      configModule = require(configFilePath)\n      if (typeof configModule === 'object' && typeof configModule.default !== 'undefined') {\n        configModule = configModule.default\n      }\n    } catch (e) {\n      const extension = path.extname(configFilePath)\n      if (extension === '.coffee' && !COFFEE_SCRIPT_AVAILABLE) {\n        log.error('You need to install CoffeeScript.\\n  npm install coffeescript --save-dev')\n      } else if (extension === '.ls' && !LIVE_SCRIPT_AVAILABLE) {\n        log.error('You need to install LiveScript.\\n  npm install LiveScript --save-dev')\n      } else if (extension === '.ts' && !TYPE_SCRIPT_AVAILABLE) {\n        log.error('You need to install TypeScript.\\n  npm install typescript ts-node --save-dev')\n      }\n      return fail('Error in config file!\\n  ' + e.stack || e)\n    }\n    if (!helper.isFunction(configModule)) {\n      return fail('Config file must export a function!\\n' + CONFIG_SYNTAX_HELP)\n    }\n  } else {\n    configModule = () => {} // if no config file path is passed, we define a dummy config module.\n  }\n\n  const config = new Config()\n\n  // save and reset hostname and listenAddress so we can detect if the user\n  // changed them\n  const defaultHostname = config.hostname\n  config.hostname = null\n  const defaultListenAddress = config.listenAddress\n  config.listenAddress = null\n\n  // add the user's configuration in\n  config.set(cliOptions)\n\n  let configModuleReturn\n  try {\n    configModuleReturn = configModule(config)\n  } catch (e) {\n    return fail('Error in config file!\\n', e)\n  }\n  function finalizeConfig (config) {\n    // merge the config from config file and cliOptions (precedence)\n    config.set(cliOptions)\n\n    // if the user changed listenAddress, but didn't set a hostname, warn them\n    if (config.hostname === null && config.listenAddress !== null) {\n      log.warn(`ListenAddress was set to ${config.listenAddress} but hostname was left as the default: ` +\n      `${defaultHostname}. If your browsers fail to connect, consider changing the hostname option.`)\n    }\n    // restore values that weren't overwritten by the user\n    if (config.hostname === null) {\n      config.hostname = defaultHostname\n    }\n    if (config.listenAddress === null) {\n      config.listenAddress = defaultListenAddress\n    }\n\n    // configure the logger as soon as we can\n    logger.setup(config.logLevel, config.colors, config.loggers)\n\n    log.debug(configFilePath ? `Loading config ${configFilePath}` : 'No config file specified.')\n\n    return normalizeConfig(config, configFilePath)\n  }\n\n  /**\n   * Return value is a function or (non-null) object that has a `then` method.\n   *\n   * @type {boolean}\n   * @see {@link https://promisesaplus.com/}\n   */\n  const returnIsThenable = (\n    (\n      (configModuleReturn != null && typeof configModuleReturn === 'object') ||\n      typeof configModuleReturn === 'function'\n    ) && typeof configModuleReturn.then === 'function'\n  )\n  if (returnIsThenable) {\n    if (promiseConfig !== true) {\n      const errorMessage =\n        'The `parseOptions.promiseConfig` option must be set to `true` to ' +\n        'enable promise return values from configuration files. ' +\n        'Example: `parseConfig(path, cliOptions, { promiseConfig: true })`'\n      return fail(errorMessage)\n    }\n    return configModuleReturn.then(\n      function onKarmaConfigModuleFulfilled (/* ignoredResolutionValue */) {\n        return finalizeConfig(config)\n      },\n      function onKarmaConfigModuleRejected (reason) {\n        return fail('Error in config file!\\n', reason)\n      }\n    )\n  } else {\n    if (promiseConfig) {\n      try {\n        return Promise.resolve(finalizeConfig(config))\n      } catch (exception) {\n        return Promise.reject(exception)\n      }\n    } else {\n      return finalizeConfig(config)\n    }\n  }\n}\n\n// PUBLIC API\nexports.parseConfig = parseConfig\nexports.Pattern = Pattern\nexports.createPatternObject = createPatternObject\nexports.Config = Config\n", "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nmodule.exports = {\n  VERSION: '%KARMA_VERSION%',\n  KARMA_URL_ROOT: '%KARMA_URL_ROOT%',\n  KARMA_PROXY_PATH: '%KARMA_PROXY_PATH%',\n  BROWSER_SOCKET_TIMEOUT: '%BROWSER_SOCKET_TIMEOUT%',\n  CONTEXT_URL: 'context.html'\n}\n\n},{}],2:[function(require,module,exports){\nvar stringify = require('../common/stringify')\nvar constant = require('./constants')\nvar util = require('../common/util')\n\nfunction Karma (updater, socket, iframe, opener, navigator, location, document) {\n  this.updater = updater\n  var startEmitted = false\n  var self = this\n  var queryParams = util.parseQueryParams(location.search)\n  var browserId = queryParams.id || util.generateId('manual-')\n  var displayName = queryParams.displayName\n  var returnUrl = queryParams['return_url' + ''] || null\n\n  var resultsBufferLimit = 50\n  var resultsBuffer = []\n\n  // This is a no-op if not running with a Trusted Types CSP policy, and\n  // lets tests declare that they trust the way that karma creates and handles\n  // URLs.\n  //\n  // More info about the proposed Trusted Types standard at\n  // https://github.com/WICG/trusted-types\n  var policy = {\n    createURL: function (s) {\n      return s\n    },\n    createScriptURL: function (s) {\n      return s\n    }\n  }\n  var trustedTypes = window.trustedTypes || window.TrustedTypes\n  if (trustedTypes) {\n    policy = trustedTypes.createPolicy('karma', policy)\n    if (!policy.createURL) {\n      // Install createURL for newer browsers. Only browsers that implement an\n      //     old version of the spec require createURL.\n      //     Should be safe to delete all reference to createURL by\n      //     February 2020.\n      // https://github.com/WICG/trusted-types/pull/204\n      policy.createURL = function (s) { return s }\n    }\n  }\n\n  // To start we will signal the server that we are not reconnecting. If the socket loses\n  // connection and was able to reconnect to the Karma server we will get a\n  // second 'connect' event. There we will pass 'true' and that will be passed to the\n  // Karma server then, so that Karma can differentiate between a socket client\n  // econnect and a full browser reconnect.\n  var socketReconnect = false\n\n  this.VERSION = constant.VERSION\n  this.config = {}\n\n  // Expose for testing purposes as there is no global socket.io\n  // registry anymore.\n  this.socket = socket\n\n  // Set up postMessage bindings for current window\n  // DEV: These are to allow windows in separate processes execute local tasks\n  //   Electron is one of these environments\n  if (window.addEventListener) {\n    window.addEventListener('message', function handleMessage (evt) {\n      // Resolve the origin of our message\n      var origin = evt.origin || evt.originalEvent.origin\n\n      // If the message isn't from our host, then reject it\n      if (origin !== window.location.origin) {\n        return\n      }\n\n      // Take action based on the message type\n      var method = evt.data.__karmaMethod\n      if (method) {\n        if (!self[method]) {\n          self.error('Received `postMessage` for \"' + method + '\" but the method doesn\\'t exist')\n          return\n        }\n        self[method].apply(self, evt.data.__karmaArguments)\n      }\n    }, false)\n  }\n\n  var childWindow = null\n  function navigateContextTo (url) {\n    if (self.config.useIframe === false) {\n      // run in new window\n      if (self.config.runInParent === false) {\n        // If there is a window already open, then close it\n        // DEV: In some environments (e.g. Electron), we don't have setter access for location\n        if (childWindow !== null && childWindow.closed !== true) {\n          // The onbeforeunload listener was added by context to catch\n          // unexpected navigations while running tests.\n          childWindow.onbeforeunload = undefined\n          childWindow.close()\n        }\n        childWindow = opener(url)\n      // run context on parent element (client_with_context)\n      // using window.__karma__.scriptUrls to get the html element strings and load them dynamically\n      } else if (url !== 'about:blank') {\n        var loadScript = function (idx) {\n          if (idx < window.__karma__.scriptUrls.length) {\n            var parser = new DOMParser()\n            // Revert escaped characters with special roles in HTML before parsing\n            var string = window.__karma__.scriptUrls[idx]\n              .replace(/\\\\x3C/g, '<')\n              .replace(/\\\\x3E/g, '>')\n            var doc = parser.parseFromString(string, 'text/html')\n            var ele = doc.head.firstChild || doc.body.firstChild\n            // script elements created by DomParser are marked as unexecutable,\n            // create a new script element manually and copy necessary properties\n            // so it is executable\n            if (ele.tagName && ele.tagName.toLowerCase() === 'script') {\n              var tmp = ele\n              ele = document.createElement('script')\n              ele.src = policy.createScriptURL(tmp.src)\n              ele.crossOrigin = tmp.crossOrigin\n            }\n            ele.onload = function () {\n              loadScript(idx + 1)\n            }\n            document.body.appendChild(ele)\n          } else {\n            window.__karma__.loaded()\n          }\n        }\n        loadScript(0)\n      }\n    // run in iframe\n    } else {\n      // The onbeforeunload listener was added by the context to catch\n      // unexpected navigations while running tests.\n      iframe.contentWindow.onbeforeunload = undefined\n      iframe.src = policy.createURL(url)\n    }\n  }\n\n  this.log = function (type, args) {\n    var values = []\n\n    for (var i = 0; i < args.length; i++) {\n      values.push(this.stringify(args[i], 3))\n    }\n\n    this.info({ log: values.join(', '), type: type })\n  }\n\n  this.stringify = stringify\n\n  function getLocation (url, lineno, colno) {\n    var location = ''\n\n    if (url !== undefined) {\n      location += url\n    }\n\n    if (lineno !== undefined) {\n      location += ':' + lineno\n    }\n\n    if (colno !== undefined) {\n      location += ':' + colno\n    }\n\n    return location\n  }\n\n  // error during js file loading (most likely syntax error)\n  // we are not going to execute at all. `window.onerror` callback.\n  this.error = function (messageOrEvent, source, lineno, colno, error) {\n    var message\n    if (typeof messageOrEvent === 'string') {\n      message = messageOrEvent\n\n      var location = getLocation(source, lineno, colno)\n      if (location !== '') {\n        message += '\\nat ' + location\n      }\n      if (error && error.stack) {\n        message += '\\n\\n' + error.stack\n      }\n    } else {\n      // create an object with the string representation of the message to\n      // ensure all its content is properly transferred to the console log\n      message = { message: messageOrEvent, str: messageOrEvent.toString() }\n    }\n\n    socket.emit('karma_error', message)\n    self.updater.updateTestStatus('karma_error ' + message)\n    this.complete()\n    return false\n  }\n\n  this.result = function (originalResult) {\n    var convertedResult = {}\n\n    // Convert all array-like objects to real arrays.\n    for (var propertyName in originalResult) {\n      if (Object.prototype.hasOwnProperty.call(originalResult, propertyName)) {\n        var propertyValue = originalResult[propertyName]\n\n        if (Object.prototype.toString.call(propertyValue) === '[object Array]') {\n          convertedResult[propertyName] = Array.prototype.slice.call(propertyValue)\n        } else {\n          convertedResult[propertyName] = propertyValue\n        }\n      }\n    }\n\n    if (!startEmitted) {\n      socket.emit('start', { total: null })\n      self.updater.updateTestStatus('start')\n      startEmitted = true\n    }\n\n    if (resultsBufferLimit === 1) {\n      self.updater.updateTestStatus('result')\n      return socket.emit('result', convertedResult)\n    }\n\n    resultsBuffer.push(convertedResult)\n\n    if (resultsBuffer.length === resultsBufferLimit) {\n      socket.emit('result', resultsBuffer)\n      self.updater.updateTestStatus('result')\n      resultsBuffer = []\n    }\n  }\n\n  this.complete = function (result) {\n    if (resultsBuffer.length) {\n      socket.emit('result', resultsBuffer)\n      resultsBuffer = []\n    }\n\n    socket.emit('complete', result || {})\n    if (this.config.clearContext) {\n      navigateContextTo('about:blank')\n    } else {\n      self.updater.updateTestStatus('complete')\n    }\n    if (returnUrl) {\n      if (!/^https?:\\/\\//.test(returnUrl)) {\n        throw new Error(\n          'Security: Navigation to '.concat(\n            returnUrl,\n            ' was blocked to prevent malicious exploits.'\n          )\n        )\n      }\n      location.href = returnUrl\n    }\n  }\n\n  this.info = function (info) {\n    // TODO(vojta): introduce special API for this\n    if (!startEmitted && util.isDefined(info.total)) {\n      socket.emit('start', info)\n      startEmitted = true\n    } else {\n      socket.emit('info', info)\n    }\n  }\n\n  socket.on('execute', function (cfg) {\n    self.updater.updateTestStatus('execute')\n    // reset startEmitted and reload the iframe\n    startEmitted = false\n    self.config = cfg\n\n    navigateContextTo(constant.CONTEXT_URL)\n\n    if (self.config.clientDisplayNone) {\n      [].forEach.call(document.querySelectorAll('#banner, #browsers'), function (el) {\n        el.style.display = 'none'\n      })\n    }\n\n    // clear the console before run\n    // works only on FF (Safari, Chrome do not allow to clear console from js source)\n    if (window.console && window.console.clear) {\n      window.console.clear()\n    }\n  })\n  socket.on('stop', function () {\n    this.complete()\n  }.bind(this))\n\n  // Report the browser name and Id. Note that this event can also fire if the connection has\n  // been temporarily lost, but the socket reconnected automatically. Read more in the docs:\n  // https://socket.io/docs/client-api/#Event-%E2%80%98connect%E2%80%99\n  socket.on('connect', function () {\n    socket.io.engine.on('upgrade', function () {\n      resultsBufferLimit = 1\n      // Flush any results which were buffered before the upgrade to WebSocket protocol.\n      if (resultsBuffer.length > 0) {\n        socket.emit('result', resultsBuffer)\n        resultsBuffer = []\n      }\n    })\n    var info = {\n      name: navigator.userAgent,\n      id: browserId,\n      isSocketReconnect: socketReconnect\n    }\n    if (displayName) {\n      info.displayName = displayName\n    }\n    socket.emit('register', info)\n    socketReconnect = true\n  })\n}\n\nmodule.exports = Karma\n\n},{\"../common/stringify\":5,\"../common/util\":6,\"./constants\":1}],3:[function(require,module,exports){\n/* global io */\n/* eslint-disable no-new */\n\nvar Karma = require('./karma')\nvar StatusUpdater = require('./updater')\nvar util = require('../common/util')\nvar constants = require('./constants')\n\nvar KARMA_URL_ROOT = constants.KARMA_URL_ROOT\nvar KARMA_PROXY_PATH = constants.KARMA_PROXY_PATH\nvar BROWSER_SOCKET_TIMEOUT = constants.BROWSER_SOCKET_TIMEOUT\n\n// Connect to the server using socket.io https://socket.io/\nvar socket = io(location.host, {\n  reconnectionDelay: 500,\n  reconnectionDelayMax: Infinity,\n  timeout: BROWSER_SOCKET_TIMEOUT,\n  path: KARMA_PROXY_PATH + KARMA_URL_ROOT.substr(1) + 'socket.io',\n  'sync disconnect on unload': true,\n  useNativeTimers: true\n})\n\n// instantiate the updater of the view\nvar updater = new StatusUpdater(socket, util.elm('title'), util.elm('banner'), util.elm('browsers'))\nwindow.karma = new Karma(updater, socket, util.elm('context'), window.open,\n  window.navigator, window.location, window.document)\n\n},{\"../common/util\":6,\"./constants\":1,\"./karma\":2,\"./updater\":4}],4:[function(require,module,exports){\nvar VERSION = require('./constants').VERSION\n\nfunction StatusUpdater (socket, titleElement, bannerElement, browsersElement) {\n  function updateBrowsersInfo (browsers) {\n    if (!browsersElement) {\n      return\n    }\n    var status\n\n    // clear browsersElement\n    while (browsersElement.firstChild) {\n      browsersElement.removeChild(browsersElement.firstChild)\n    }\n\n    for (var i = 0; i < browsers.length; i++) {\n      status = browsers[i].isConnected ? 'idle' : 'executing'\n      var li = document.createElement('li')\n      li.setAttribute('class', status)\n      li.textContent = browsers[i].name + ' is ' + status\n      browsersElement.appendChild(li)\n    }\n  }\n\n  var connectionText = 'never-connected'\n  var testText = 'loading'\n  var pingText = ''\n\n  function updateBanner () {\n    if (!titleElement || !bannerElement) {\n      return\n    }\n    titleElement.textContent = 'Karma v ' + VERSION + ' - ' + connectionText + '; test: ' + testText + '; ' + pingText\n    bannerElement.className = connectionText === 'connected' ? 'online' : 'offline'\n  }\n\n  function updateConnectionStatus (connectionStatus) {\n    connectionText = connectionStatus || connectionText\n    updateBanner()\n  }\n  function updateTestStatus (testStatus) {\n    testText = testStatus || testText\n    updateBanner()\n  }\n  function updatePingStatus (pingStatus) {\n    pingText = pingStatus || pingText\n    updateBanner()\n  }\n\n  socket.on('connect', function () {\n    updateConnectionStatus('connected')\n  })\n  socket.on('disconnect', function () {\n    updateConnectionStatus('disconnected')\n  })\n  socket.on('reconnecting', function (sec) {\n    updateConnectionStatus('reconnecting in ' + sec + ' seconds')\n  })\n  socket.on('reconnect', function () {\n    updateConnectionStatus('reconnected')\n  })\n  socket.on('reconnect_failed', function () {\n    updateConnectionStatus('reconnect_failed')\n  })\n\n  socket.on('info', updateBrowsersInfo)\n  socket.on('disconnect', function () {\n    updateBrowsersInfo([])\n  })\n\n  socket.on('ping', function () {\n    updatePingStatus('ping...')\n  })\n  socket.on('pong', function (latency) {\n    updatePingStatus('ping ' + latency + 'ms')\n  })\n\n  return { updateTestStatus: updateTestStatus }\n}\n\nmodule.exports = StatusUpdater\n\n},{\"./constants\":1}],5:[function(require,module,exports){\nvar serialize = null\ntry {\n  serialize = require('dom-serialize')\n} catch (e) {\n  // Ignore failure on IE8\n}\n\nvar instanceOf = require('./util').instanceOf\n\nfunction isNode (obj) {\n  return (obj.tagName || obj.nodeName) && obj.nodeType\n}\n\nfunction stringify (obj, depth) {\n  if (depth === 0) {\n    return '...'\n  }\n\n  if (obj === null) {\n    return 'null'\n  }\n\n  switch (typeof obj) {\n    case 'symbol':\n      return obj.toString()\n    case 'string':\n      return \"'\" + obj + \"'\"\n    case 'undefined':\n      return 'undefined'\n    case 'function':\n      try {\n        // function abc(a, b, c) { /* code goes here */ }\n        //   -> function abc(a, b, c) { ... }\n        return obj.toString().replace(/\\{[\\s\\S]*\\}/, '{ ... }')\n      } catch (err) {\n        if (err instanceof TypeError) {\n          // Support older browsers\n          return 'function ' + (obj.name || '') + '() { ... }'\n        } else {\n          throw err\n        }\n      }\n    case 'boolean':\n      return obj ? 'true' : 'false'\n    case 'object':\n      var strs = []\n      if (instanceOf(obj, 'Array')) {\n        strs.push('[')\n        for (var i = 0, ii = obj.length; i < ii; i++) {\n          if (i) {\n            strs.push(', ')\n          }\n          strs.push(stringify(obj[i], depth - 1))\n        }\n        strs.push(']')\n      } else if (instanceOf(obj, 'Date')) {\n        return obj.toString()\n      } else if (instanceOf(obj, 'Text')) {\n        return obj.nodeValue\n      } else if (instanceOf(obj, 'Comment')) {\n        return '<!--' + obj.nodeValue + '-->'\n      } else if (obj.outerHTML) {\n        return obj.outerHTML\n      } else if (isNode(obj)) {\n        if (serialize) {\n          return serialize(obj)\n        } else {\n          return 'Skipping stringify, no support for dom-serialize'\n        }\n      } else if (instanceOf(obj, 'Error')) {\n        return obj.toString() + '\\n' + obj.stack\n      } else {\n        var constructor = 'Object'\n        if (obj.constructor && typeof obj.constructor === 'function') {\n          constructor = obj.constructor.name\n        }\n\n        strs.push(constructor)\n        strs.push('{')\n        var first = true\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            if (first) {\n              first = false\n            } else {\n              strs.push(', ')\n            }\n\n            strs.push(key + ': ' + stringify(obj[key], depth - 1))\n          }\n        }\n        strs.push('}')\n      }\n      return strs.join('')\n    default:\n      return obj\n  }\n}\n\nmodule.exports = stringify\n\n},{\"./util\":6,\"dom-serialize\":8}],6:[function(require,module,exports){\nexports.instanceOf = function (value, constructorName) {\n  return Object.prototype.toString.apply(value) === '[object ' + constructorName + ']'\n}\n\nexports.elm = function (id) {\n  return document.getElementById(id)\n}\n\nexports.generateId = function (prefix) {\n  return prefix + Math.floor(Math.random() * 10000)\n}\n\nexports.isUndefined = function (value) {\n  return typeof value === 'undefined'\n}\n\nexports.isDefined = function (value) {\n  return !exports.isUndefined(value)\n}\n\nexports.parseQueryParams = function (locationSearch) {\n  var params = {}\n  var pairs = locationSearch.substr(1).split('&')\n  var keyValue\n\n  for (var i = 0; i < pairs.length; i++) {\n    keyValue = pairs[i].split('=')\n    params[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1])\n  }\n\n  return params\n}\n\n},{}],7:[function(require,module,exports){\n(function (global){\n\nvar NativeCustomEvent = global.CustomEvent;\n\nfunction useNative () {\n  try {\n    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });\n    return  'cat' === p.type && 'bar' === p.detail.foo;\n  } catch (e) {\n  }\n  return false;\n}\n\n/**\n * Cross-browser `CustomEvent` constructor.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent\n *\n * @public\n */\n\nmodule.exports = useNative() ? NativeCustomEvent :\n\n// IE >= 9\n'undefined' !== typeof document && 'function' === typeof document.createEvent ? function CustomEvent (type, params) {\n  var e = document.createEvent('CustomEvent');\n  if (params) {\n    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);\n  } else {\n    e.initCustomEvent(type, false, false, void 0);\n  }\n  return e;\n} :\n\n// IE <= 8\nfunction CustomEvent (type, params) {\n  var e = document.createEventObject();\n  e.type = type;\n  if (params) {\n    e.bubbles = Boolean(params.bubbles);\n    e.cancelable = Boolean(params.cancelable);\n    e.detail = params.detail;\n  } else {\n    e.bubbles = false;\n    e.cancelable = false;\n    e.detail = void 0;\n  }\n  return e;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],8:[function(require,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar extend = require('extend');\nvar encode = require('ent/encode');\nvar CustomEvent = require('custom-event');\nvar voidElements = require('void-elements');\n\n/**\n * Module exports.\n */\n\nexports = module.exports = serialize;\nexports.serializeElement = serializeElement;\nexports.serializeAttribute = serializeAttribute;\nexports.serializeText = serializeText;\nexports.serializeComment = serializeComment;\nexports.serializeDocument = serializeDocument;\nexports.serializeDoctype = serializeDoctype;\nexports.serializeDocumentFragment = serializeDocumentFragment;\nexports.serializeNodeList = serializeNodeList;\n\n/**\n * Serializes any DOM node. Returns a string.\n *\n * @param {Node} node - DOM Node to serialize\n * @param {String} [context] - optional arbitrary \"context\" string to use (useful for event listeners)\n * @param {Function} [fn] - optional callback function to use in the \"serialize\" event for this call\n * @param {EventTarget} [eventTarget] - optional EventTarget instance to emit the \"serialize\" event on (defaults to `node`)\n * return {String}\n * @public\n */\n\nfunction serialize (node, context, fn, eventTarget) {\n  if (!node) return '';\n  if ('function' === typeof context) {\n    fn = context;\n    context = null;\n  }\n  if (!context) context = null;\n\n  var rtn;\n  var nodeType = node.nodeType;\n\n  if (!nodeType && 'number' === typeof node.length) {\n    // assume it's a NodeList or Array of Nodes\n    rtn = exports.serializeNodeList(node, context, fn);\n  } else {\n\n    if ('function' === typeof fn) {\n      // one-time \"serialize\" event listener\n      node.addEventListener('serialize', fn, false);\n    }\n\n    // emit a custom \"serialize\" event on `node`, in case there\n    // are event listeners for custom serialization of this node\n    var e = new CustomEvent('serialize', {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        serialize: null,\n        context: context\n      }\n    });\n\n    e.serializeTarget = node;\n\n    var target = eventTarget || node;\n    var cancelled = !target.dispatchEvent(e);\n\n    // `e.detail.serialize` can be set to a:\n    //   String - returned directly\n    //   Node   - goes through serializer logic instead of `node`\n    //   Anything else - get Stringified first, and then returned directly\n    var s = e.detail.serialize;\n    if (s != null) {\n      if ('string' === typeof s) {\n        rtn = s;\n      } else if ('number' === typeof s.nodeType) {\n        // make it go through the serialization logic\n        rtn = serialize(s, context, null, target);\n      } else {\n        rtn = String(s);\n      }\n    } else if (!cancelled) {\n      // default serialization logic\n      switch (nodeType) {\n        case 1 /* element */:\n          rtn = exports.serializeElement(node, context, eventTarget);\n          break;\n        case 2 /* attribute */:\n          rtn = exports.serializeAttribute(node);\n          break;\n        case 3 /* text */:\n          rtn = exports.serializeText(node);\n          break;\n        case 8 /* comment */:\n          rtn = exports.serializeComment(node);\n          break;\n        case 9 /* document */:\n          rtn = exports.serializeDocument(node, context, eventTarget);\n          break;\n        case 10 /* doctype */:\n          rtn = exports.serializeDoctype(node);\n          break;\n        case 11 /* document fragment */:\n          rtn = exports.serializeDocumentFragment(node, context, eventTarget);\n          break;\n      }\n    }\n\n    if ('function' === typeof fn) {\n      node.removeEventListener('serialize', fn, false);\n    }\n  }\n\n  return rtn || '';\n}\n\n/**\n * Serialize an Attribute node.\n */\n\nfunction serializeAttribute (node, opts) {\n  return node.name + '=\"' + encode(node.value, extend({\n    named: true\n  }, opts)) + '\"';\n}\n\n/**\n * Serialize a DOM element.\n */\n\nfunction serializeElement (node, context, eventTarget) {\n  var c, i, l;\n  var name = node.nodeName.toLowerCase();\n\n  // opening tag\n  var r = '<' + name;\n\n  // attributes\n  for (i = 0, c = node.attributes, l = c.length; i < l; i++) {\n    r += ' ' + exports.serializeAttribute(c[i]);\n  }\n\n  r += '>';\n\n  // child nodes\n  r += exports.serializeNodeList(node.childNodes, context, null, eventTarget);\n\n  // closing tag, only for non-void elements\n  if (!voidElements[name]) {\n    r += '</' + name + '>';\n  }\n\n  return r;\n}\n\n/**\n * Serialize a text node.\n */\n\nfunction serializeText (node, opts) {\n  return encode(node.nodeValue, extend({\n    named: true,\n    special: { '<': true, '>': true, '&': true }\n  }, opts));\n}\n\n/**\n * Serialize a comment node.\n */\n\nfunction serializeComment (node) {\n  return '<!--' + node.nodeValue + '-->';\n}\n\n/**\n * Serialize a Document node.\n */\n\nfunction serializeDocument (node, context, eventTarget) {\n  return exports.serializeNodeList(node.childNodes, context, null, eventTarget);\n}\n\n/**\n * Serialize a DOCTYPE node.\n * See: http://stackoverflow.com/a/10162353\n */\n\nfunction serializeDoctype (node) {\n  var r = '<!DOCTYPE ' + node.name;\n\n  if (node.publicId) {\n    r += ' PUBLIC \"' + node.publicId + '\"';\n  }\n\n  if (!node.publicId && node.systemId) {\n    r += ' SYSTEM';\n  }\n\n  if (node.systemId) {\n    r += ' \"' + node.systemId + '\"';\n  }\n\n  r += '>';\n  return r;\n}\n\n/**\n * Serialize a DocumentFragment instance.\n */\n\nfunction serializeDocumentFragment (node, context, eventTarget) {\n  return exports.serializeNodeList(node.childNodes, context, null, eventTarget);\n}\n\n/**\n * Serialize a NodeList/Array of nodes.\n */\n\nfunction serializeNodeList (list, context, fn, eventTarget) {\n  var r = '';\n  for (var i = 0, l = list.length; i < l; i++) {\n    r += serialize(list[i], context, fn, eventTarget);\n  }\n  return r;\n}\n\n},{\"custom-event\":7,\"ent/encode\":9,\"extend\":11,\"void-elements\":13}],9:[function(require,module,exports){\nvar punycode = require('punycode');\nvar revEntities = require('./reversed.json');\n\nmodule.exports = encode;\n\nfunction encode (str, opts) {\n    if (typeof str !== 'string') {\n        throw new TypeError('Expected a String');\n    }\n    if (!opts) opts = {};\n\n    var numeric = true;\n    if (opts.named) numeric = false;\n    if (opts.numeric !== undefined) numeric = opts.numeric;\n\n    var special = opts.special || {\n        '\"': true, \"'\": true,\n        '<': true, '>': true,\n        '&': true\n    };\n\n    var codePoints = punycode.ucs2.decode(str);\n    var chars = [];\n    for (var i = 0; i < codePoints.length; i++) {\n        var cc = codePoints[i];\n        var c = punycode.ucs2.encode([ cc ]);\n        var e = revEntities[cc];\n        if (e && (cc >= 127 || special[c]) && !numeric) {\n            chars.push('&' + (/;$/.test(e) ? e : e + ';'));\n        }\n        else if (cc < 32 || cc >= 127 || special[c]) {\n            chars.push('&#' + cc + ';');\n        }\n        else {\n            chars.push(c);\n        }\n    }\n    return chars.join('');\n}\n\n},{\"./reversed.json\":10,\"punycode\":12}],10:[function(require,module,exports){\nmodule.exports={\n    \"9\": \"Tab;\",\n    \"10\": \"NewLine;\",\n    \"33\": \"excl;\",\n    \"34\": \"quot;\",\n    \"35\": \"num;\",\n    \"36\": \"dollar;\",\n    \"37\": \"percnt;\",\n    \"38\": \"amp;\",\n    \"39\": \"apos;\",\n    \"40\": \"lpar;\",\n    \"41\": \"rpar;\",\n    \"42\": \"midast;\",\n    \"43\": \"plus;\",\n    \"44\": \"comma;\",\n    \"46\": \"period;\",\n    \"47\": \"sol;\",\n    \"58\": \"colon;\",\n    \"59\": \"semi;\",\n    \"60\": \"lt;\",\n    \"61\": \"equals;\",\n    \"62\": \"gt;\",\n    \"63\": \"quest;\",\n    \"64\": \"commat;\",\n    \"91\": \"lsqb;\",\n    \"92\": \"bsol;\",\n    \"93\": \"rsqb;\",\n    \"94\": \"Hat;\",\n    \"95\": \"UnderBar;\",\n    \"96\": \"grave;\",\n    \"123\": \"lcub;\",\n    \"124\": \"VerticalLine;\",\n    \"125\": \"rcub;\",\n    \"160\": \"NonBreakingSpace;\",\n    \"161\": \"iexcl;\",\n    \"162\": \"cent;\",\n    \"163\": \"pound;\",\n    \"164\": \"curren;\",\n    \"165\": \"yen;\",\n    \"166\": \"brvbar;\",\n    \"167\": \"sect;\",\n    \"168\": \"uml;\",\n    \"169\": \"copy;\",\n    \"170\": \"ordf;\",\n    \"171\": \"laquo;\",\n    \"172\": \"not;\",\n    \"173\": \"shy;\",\n    \"174\": \"reg;\",\n    \"175\": \"strns;\",\n    \"176\": \"deg;\",\n    \"177\": \"pm;\",\n    \"178\": \"sup2;\",\n    \"179\": \"sup3;\",\n    \"180\": \"DiacriticalAcute;\",\n    \"181\": \"micro;\",\n    \"182\": \"para;\",\n    \"183\": \"middot;\",\n    \"184\": \"Cedilla;\",\n    \"185\": \"sup1;\",\n    \"186\": \"ordm;\",\n    \"187\": \"raquo;\",\n    \"188\": \"frac14;\",\n    \"189\": \"half;\",\n    \"190\": \"frac34;\",\n    \"191\": \"iquest;\",\n    \"192\": \"Agrave;\",\n    \"193\": \"Aacute;\",\n    \"194\": \"Acirc;\",\n    \"195\": \"Atilde;\",\n    \"196\": \"Auml;\",\n    \"197\": \"Aring;\",\n    \"198\": \"AElig;\",\n    \"199\": \"Ccedil;\",\n    \"200\": \"Egrave;\",\n    \"201\": \"Eacute;\",\n    \"202\": \"Ecirc;\",\n    \"203\": \"Euml;\",\n    \"204\": \"Igrave;\",\n    \"205\": \"Iacute;\",\n    \"206\": \"Icirc;\",\n    \"207\": \"Iuml;\",\n    \"208\": \"ETH;\",\n    \"209\": \"Ntilde;\",\n    \"210\": \"Ograve;\",\n    \"211\": \"Oacute;\",\n    \"212\": \"Ocirc;\",\n    \"213\": \"Otilde;\",\n    \"214\": \"Ouml;\",\n    \"215\": \"times;\",\n    \"216\": \"Oslash;\",\n    \"217\": \"Ugrave;\",\n    \"218\": \"Uacute;\",\n    \"219\": \"Ucirc;\",\n    \"220\": \"Uuml;\",\n    \"221\": \"Yacute;\",\n    \"222\": \"THORN;\",\n    \"223\": \"szlig;\",\n    \"224\": \"agrave;\",\n    \"225\": \"aacute;\",\n    \"226\": \"acirc;\",\n    \"227\": \"atilde;\",\n    \"228\": \"auml;\",\n    \"229\": \"aring;\",\n    \"230\": \"aelig;\",\n    \"231\": \"ccedil;\",\n    \"232\": \"egrave;\",\n    \"233\": \"eacute;\",\n    \"234\": \"ecirc;\",\n    \"235\": \"euml;\",\n    \"236\": \"igrave;\",\n    \"237\": \"iacute;\",\n    \"238\": \"icirc;\",\n    \"239\": \"iuml;\",\n    \"240\": \"eth;\",\n    \"241\": \"ntilde;\",\n    \"242\": \"ograve;\",\n    \"243\": \"oacute;\",\n    \"244\": \"ocirc;\",\n    \"245\": \"otilde;\",\n    \"246\": \"ouml;\",\n    \"247\": \"divide;\",\n    \"248\": \"oslash;\",\n    \"249\": \"ugrave;\",\n    \"250\": \"uacute;\",\n    \"251\": \"ucirc;\",\n    \"252\": \"uuml;\",\n    \"253\": \"yacute;\",\n    \"254\": \"thorn;\",\n    \"255\": \"yuml;\",\n    \"256\": \"Amacr;\",\n    \"257\": \"amacr;\",\n    \"258\": \"Abreve;\",\n    \"259\": \"abreve;\",\n    \"260\": \"Aogon;\",\n    \"261\": \"aogon;\",\n    \"262\": \"Cacute;\",\n    \"263\": \"cacute;\",\n    \"264\": \"Ccirc;\",\n    \"265\": \"ccirc;\",\n    \"266\": \"Cdot;\",\n    \"267\": \"cdot;\",\n    \"268\": \"Ccaron;\",\n    \"269\": \"ccaron;\",\n    \"270\": \"Dcaron;\",\n    \"271\": \"dcaron;\",\n    \"272\": \"Dstrok;\",\n    \"273\": \"dstrok;\",\n    \"274\": \"Emacr;\",\n    \"275\": \"emacr;\",\n    \"278\": \"Edot;\",\n    \"279\": \"edot;\",\n    \"280\": \"Eogon;\",\n    \"281\": \"eogon;\",\n    \"282\": \"Ecaron;\",\n    \"283\": \"ecaron;\",\n    \"284\": \"Gcirc;\",\n    \"285\": \"gcirc;\",\n    \"286\": \"Gbreve;\",\n    \"287\": \"gbreve;\",\n    \"288\": \"Gdot;\",\n    \"289\": \"gdot;\",\n    \"290\": \"Gcedil;\",\n    \"292\": \"Hcirc;\",\n    \"293\": \"hcirc;\",\n    \"294\": \"Hstrok;\",\n    \"295\": \"hstrok;\",\n    \"296\": \"Itilde;\",\n    \"297\": \"itilde;\",\n    \"298\": \"Imacr;\",\n    \"299\": \"imacr;\",\n    \"302\": \"Iogon;\",\n    \"303\": \"iogon;\",\n    \"304\": \"Idot;\",\n    \"305\": \"inodot;\",\n    \"306\": \"IJlig;\",\n    \"307\": \"ijlig;\",\n    \"308\": \"Jcirc;\",\n    \"309\": \"jcirc;\",\n    \"310\": \"Kcedil;\",\n    \"311\": \"kcedil;\",\n    \"312\": \"kgreen;\",\n    \"313\": \"Lacute;\",\n    \"314\": \"lacute;\",\n    \"315\": \"Lcedil;\",\n    \"316\": \"lcedil;\",\n    \"317\": \"Lcaron;\",\n    \"318\": \"lcaron;\",\n    \"319\": \"Lmidot;\",\n    \"320\": \"lmidot;\",\n    \"321\": \"Lstrok;\",\n    \"322\": \"lstrok;\",\n    \"323\": \"Nacute;\",\n    \"324\": \"nacute;\",\n    \"325\": \"Ncedil;\",\n    \"326\": \"ncedil;\",\n    \"327\": \"Ncaron;\",\n    \"328\": \"ncaron;\",\n    \"329\": \"napos;\",\n    \"330\": \"ENG;\",\n    \"331\": \"eng;\",\n    \"332\": \"Omacr;\",\n    \"333\": \"omacr;\",\n    \"336\": \"Odblac;\",\n    \"337\": \"odblac;\",\n    \"338\": \"OElig;\",\n    \"339\": \"oelig;\",\n    \"340\": \"Racute;\",\n    \"341\": \"racute;\",\n    \"342\": \"Rcedil;\",\n    \"343\": \"rcedil;\",\n    \"344\": \"Rcaron;\",\n    \"345\": \"rcaron;\",\n    \"346\": \"Sacute;\",\n    \"347\": \"sacute;\",\n    \"348\": \"Scirc;\",\n    \"349\": \"scirc;\",\n    \"350\": \"Scedil;\",\n    \"351\": \"scedil;\",\n    \"352\": \"Scaron;\",\n    \"353\": \"scaron;\",\n    \"354\": \"Tcedil;\",\n    \"355\": \"tcedil;\",\n    \"356\": \"Tcaron;\",\n    \"357\": \"tcaron;\",\n    \"358\": \"Tstrok;\",\n    \"359\": \"tstrok;\",\n    \"360\": \"Utilde;\",\n    \"361\": \"utilde;\",\n    \"362\": \"Umacr;\",\n    \"363\": \"umacr;\",\n    \"364\": \"Ubreve;\",\n    \"365\": \"ubreve;\",\n    \"366\": \"Uring;\",\n    \"367\": \"uring;\",\n    \"368\": \"Udblac;\",\n    \"369\": \"udblac;\",\n    \"370\": \"Uogon;\",\n    \"371\": \"uogon;\",\n    \"372\": \"Wcirc;\",\n    \"373\": \"wcirc;\",\n    \"374\": \"Ycirc;\",\n    \"375\": \"ycirc;\",\n    \"376\": \"Yuml;\",\n    \"377\": \"Zacute;\",\n    \"378\": \"zacute;\",\n    \"379\": \"Zdot;\",\n    \"380\": \"zdot;\",\n    \"381\": \"Zcaron;\",\n    \"382\": \"zcaron;\",\n    \"402\": \"fnof;\",\n    \"437\": \"imped;\",\n    \"501\": \"gacute;\",\n    \"567\": \"jmath;\",\n    \"710\": \"circ;\",\n    \"711\": \"Hacek;\",\n    \"728\": \"breve;\",\n    \"729\": \"dot;\",\n    \"730\": \"ring;\",\n    \"731\": \"ogon;\",\n    \"732\": \"tilde;\",\n    \"733\": \"DiacriticalDoubleAcute;\",\n    \"785\": \"DownBreve;\",\n    \"913\": \"Alpha;\",\n    \"914\": \"Beta;\",\n    \"915\": \"Gamma;\",\n    \"916\": \"Delta;\",\n    \"917\": \"Epsilon;\",\n    \"918\": \"Zeta;\",\n    \"919\": \"Eta;\",\n    \"920\": \"Theta;\",\n    \"921\": \"Iota;\",\n    \"922\": \"Kappa;\",\n    \"923\": \"Lambda;\",\n    \"924\": \"Mu;\",\n    \"925\": \"Nu;\",\n    \"926\": \"Xi;\",\n    \"927\": \"Omicron;\",\n    \"928\": \"Pi;\",\n    \"929\": \"Rho;\",\n    \"931\": \"Sigma;\",\n    \"932\": \"Tau;\",\n    \"933\": \"Upsilon;\",\n    \"934\": \"Phi;\",\n    \"935\": \"Chi;\",\n    \"936\": \"Psi;\",\n    \"937\": \"Omega;\",\n    \"945\": \"alpha;\",\n    \"946\": \"beta;\",\n    \"947\": \"gamma;\",\n    \"948\": \"delta;\",\n    \"949\": \"epsilon;\",\n    \"950\": \"zeta;\",\n    \"951\": \"eta;\",\n    \"952\": \"theta;\",\n    \"953\": \"iota;\",\n    \"954\": \"kappa;\",\n    \"955\": \"lambda;\",\n    \"956\": \"mu;\",\n    \"957\": \"nu;\",\n    \"958\": \"xi;\",\n    \"959\": \"omicron;\",\n    \"960\": \"pi;\",\n    \"961\": \"rho;\",\n    \"962\": \"varsigma;\",\n    \"963\": \"sigma;\",\n    \"964\": \"tau;\",\n    \"965\": \"upsilon;\",\n    \"966\": \"phi;\",\n    \"967\": \"chi;\",\n    \"968\": \"psi;\",\n    \"969\": \"omega;\",\n    \"977\": \"vartheta;\",\n    \"978\": \"upsih;\",\n    \"981\": \"varphi;\",\n    \"982\": \"varpi;\",\n    \"988\": \"Gammad;\",\n    \"989\": \"gammad;\",\n    \"1008\": \"varkappa;\",\n    \"1009\": \"varrho;\",\n    \"1013\": \"varepsilon;\",\n    \"1014\": \"bepsi;\",\n    \"1025\": \"IOcy;\",\n    \"1026\": \"DJcy;\",\n    \"1027\": \"GJcy;\",\n    \"1028\": \"Jukcy;\",\n    \"1029\": \"DScy;\",\n    \"1030\": \"Iukcy;\",\n    \"1031\": \"YIcy;\",\n    \"1032\": \"Jsercy;\",\n    \"1033\": \"LJcy;\",\n    \"1034\": \"NJcy;\",\n    \"1035\": \"TSHcy;\",\n    \"1036\": \"KJcy;\",\n    \"1038\": \"Ubrcy;\",\n    \"1039\": \"DZcy;\",\n    \"1040\": \"Acy;\",\n    \"1041\": \"Bcy;\",\n    \"1042\": \"Vcy;\",\n    \"1043\": \"Gcy;\",\n    \"1044\": \"Dcy;\",\n    \"1045\": \"IEcy;\",\n    \"1046\": \"ZHcy;\",\n    \"1047\": \"Zcy;\",\n    \"1048\": \"Icy;\",\n    \"1049\": \"Jcy;\",\n    \"1050\": \"Kcy;\",\n    \"1051\": \"Lcy;\",\n    \"1052\": \"Mcy;\",\n    \"1053\": \"Ncy;\",\n    \"1054\": \"Ocy;\",\n    \"1055\": \"Pcy;\",\n    \"1056\": \"Rcy;\",\n    \"1057\": \"Scy;\",\n    \"1058\": \"Tcy;\",\n    \"1059\": \"Ucy;\",\n    \"1060\": \"Fcy;\",\n    \"1061\": \"KHcy;\",\n    \"1062\": \"TScy;\",\n    \"1063\": \"CHcy;\",\n    \"1064\": \"SHcy;\",\n    \"1065\": \"SHCHcy;\",\n    \"1066\": \"HARDcy;\",\n    \"1067\": \"Ycy;\",\n    \"1068\": \"SOFTcy;\",\n    \"1069\": \"Ecy;\",\n    \"1070\": \"YUcy;\",\n    \"1071\": \"YAcy;\",\n    \"1072\": \"acy;\",\n    \"1073\": \"bcy;\",\n    \"1074\": \"vcy;\",\n    \"1075\": \"gcy;\",\n    \"1076\": \"dcy;\",\n    \"1077\": \"iecy;\",\n    \"1078\": \"zhcy;\",\n    \"1079\": \"zcy;\",\n    \"1080\": \"icy;\",\n    \"1081\": \"jcy;\",\n    \"1082\": \"kcy;\",\n    \"1083\": \"lcy;\",\n    \"1084\": \"mcy;\",\n    \"1085\": \"ncy;\",\n    \"1086\": \"ocy;\",\n    \"1087\": \"pcy;\",\n    \"1088\": \"rcy;\",\n    \"1089\": \"scy;\",\n    \"1090\": \"tcy;\",\n    \"1091\": \"ucy;\",\n    \"1092\": \"fcy;\",\n    \"1093\": \"khcy;\",\n    \"1094\": \"tscy;\",\n    \"1095\": \"chcy;\",\n    \"1096\": \"shcy;\",\n    \"1097\": \"shchcy;\",\n    \"1098\": \"hardcy;\",\n    \"1099\": \"ycy;\",\n    \"1100\": \"softcy;\",\n    \"1101\": \"ecy;\",\n    \"1102\": \"yucy;\",\n    \"1103\": \"yacy;\",\n    \"1105\": \"iocy;\",\n    \"1106\": \"djcy;\",\n    \"1107\": \"gjcy;\",\n    \"1108\": \"jukcy;\",\n    \"1109\": \"dscy;\",\n    \"1110\": \"iukcy;\",\n    \"1111\": \"yicy;\",\n    \"1112\": \"jsercy;\",\n    \"1113\": \"ljcy;\",\n    \"1114\": \"njcy;\",\n    \"1115\": \"tshcy;\",\n    \"1116\": \"kjcy;\",\n    \"1118\": \"ubrcy;\",\n    \"1119\": \"dzcy;\",\n    \"8194\": \"ensp;\",\n    \"8195\": \"emsp;\",\n    \"8196\": \"emsp13;\",\n    \"8197\": \"emsp14;\",\n    \"8199\": \"numsp;\",\n    \"8200\": \"puncsp;\",\n    \"8201\": \"ThinSpace;\",\n    \"8202\": \"VeryThinSpace;\",\n    \"8203\": \"ZeroWidthSpace;\",\n    \"8204\": \"zwnj;\",\n    \"8205\": \"zwj;\",\n    \"8206\": \"lrm;\",\n    \"8207\": \"rlm;\",\n    \"8208\": \"hyphen;\",\n    \"8211\": \"ndash;\",\n    \"8212\": \"mdash;\",\n    \"8213\": \"horbar;\",\n    \"8214\": \"Vert;\",\n    \"8216\": \"OpenCurlyQuote;\",\n    \"8217\": \"rsquor;\",\n    \"8218\": \"sbquo;\",\n    \"8220\": \"OpenCurlyDoubleQuote;\",\n    \"8221\": \"rdquor;\",\n    \"8222\": \"ldquor;\",\n    \"8224\": \"dagger;\",\n    \"8225\": \"ddagger;\",\n    \"8226\": \"bullet;\",\n    \"8229\": \"nldr;\",\n    \"8230\": \"mldr;\",\n    \"8240\": \"permil;\",\n    \"8241\": \"pertenk;\",\n    \"8242\": \"prime;\",\n    \"8243\": \"Prime;\",\n    \"8244\": \"tprime;\",\n    \"8245\": \"bprime;\",\n    \"8249\": \"lsaquo;\",\n    \"8250\": \"rsaquo;\",\n    \"8254\": \"OverBar;\",\n    \"8257\": \"caret;\",\n    \"8259\": \"hybull;\",\n    \"8260\": \"frasl;\",\n    \"8271\": \"bsemi;\",\n    \"8279\": \"qprime;\",\n    \"8287\": \"MediumSpace;\",\n    \"8288\": \"NoBreak;\",\n    \"8289\": \"ApplyFunction;\",\n    \"8290\": \"it;\",\n    \"8291\": \"InvisibleComma;\",\n    \"8364\": \"euro;\",\n    \"8411\": \"TripleDot;\",\n    \"8412\": \"DotDot;\",\n    \"8450\": \"Copf;\",\n    \"8453\": \"incare;\",\n    \"8458\": \"gscr;\",\n    \"8459\": \"Hscr;\",\n    \"8460\": \"Poincareplane;\",\n    \"8461\": \"quaternions;\",\n    \"8462\": \"planckh;\",\n    \"8463\": \"plankv;\",\n    \"8464\": \"Iscr;\",\n    \"8465\": \"imagpart;\",\n    \"8466\": \"Lscr;\",\n    \"8467\": \"ell;\",\n    \"8469\": \"Nopf;\",\n    \"8470\": \"numero;\",\n    \"8471\": \"copysr;\",\n    \"8472\": \"wp;\",\n    \"8473\": \"primes;\",\n    \"8474\": \"rationals;\",\n    \"8475\": \"Rscr;\",\n    \"8476\": \"Rfr;\",\n    \"8477\": \"Ropf;\",\n    \"8478\": \"rx;\",\n    \"8482\": \"trade;\",\n    \"8484\": \"Zopf;\",\n    \"8487\": \"mho;\",\n    \"8488\": \"Zfr;\",\n    \"8489\": \"iiota;\",\n    \"8492\": \"Bscr;\",\n    \"8493\": \"Cfr;\",\n    \"8495\": \"escr;\",\n    \"8496\": \"expectation;\",\n    \"8497\": \"Fscr;\",\n    \"8499\": \"phmmat;\",\n    \"8500\": \"oscr;\",\n    \"8501\": \"aleph;\",\n    \"8502\": \"beth;\",\n    \"8503\": \"gimel;\",\n    \"8504\": \"daleth;\",\n    \"8517\": \"DD;\",\n    \"8518\": \"DifferentialD;\",\n    \"8519\": \"exponentiale;\",\n    \"8520\": \"ImaginaryI;\",\n    \"8531\": \"frac13;\",\n    \"8532\": \"frac23;\",\n    \"8533\": \"frac15;\",\n    \"8534\": \"frac25;\",\n    \"8535\": \"frac35;\",\n    \"8536\": \"frac45;\",\n    \"8537\": \"frac16;\",\n    \"8538\": \"frac56;\",\n    \"8539\": \"frac18;\",\n    \"8540\": \"frac38;\",\n    \"8541\": \"frac58;\",\n    \"8542\": \"frac78;\",\n    \"8592\": \"slarr;\",\n    \"8593\": \"uparrow;\",\n    \"8594\": \"srarr;\",\n    \"8595\": \"ShortDownArrow;\",\n    \"8596\": \"leftrightarrow;\",\n    \"8597\": \"varr;\",\n    \"8598\": \"UpperLeftArrow;\",\n    \"8599\": \"UpperRightArrow;\",\n    \"8600\": \"searrow;\",\n    \"8601\": \"swarrow;\",\n    \"8602\": \"nleftarrow;\",\n    \"8603\": \"nrightarrow;\",\n    \"8605\": \"rightsquigarrow;\",\n    \"8606\": \"twoheadleftarrow;\",\n    \"8607\": \"Uarr;\",\n    \"8608\": \"twoheadrightarrow;\",\n    \"8609\": \"Darr;\",\n    \"8610\": \"leftarrowtail;\",\n    \"8611\": \"rightarrowtail;\",\n    \"8612\": \"mapstoleft;\",\n    \"8613\": \"UpTeeArrow;\",\n    \"8614\": \"RightTeeArrow;\",\n    \"8615\": \"mapstodown;\",\n    \"8617\": \"larrhk;\",\n    \"8618\": \"rarrhk;\",\n    \"8619\": \"looparrowleft;\",\n    \"8620\": \"rarrlp;\",\n    \"8621\": \"leftrightsquigarrow;\",\n    \"8622\": \"nleftrightarrow;\",\n    \"8624\": \"lsh;\",\n    \"8625\": \"rsh;\",\n    \"8626\": \"ldsh;\",\n    \"8627\": \"rdsh;\",\n    \"8629\": \"crarr;\",\n    \"8630\": \"curvearrowleft;\",\n    \"8631\": \"curvearrowright;\",\n    \"8634\": \"olarr;\",\n    \"8635\": \"orarr;\",\n    \"8636\": \"lharu;\",\n    \"8637\": \"lhard;\",\n    \"8638\": \"upharpoonright;\",\n    \"8639\": \"upharpoonleft;\",\n    \"8640\": \"RightVector;\",\n    \"8641\": \"rightharpoondown;\",\n    \"8642\": \"RightDownVector;\",\n    \"8643\": \"LeftDownVector;\",\n    \"8644\": \"rlarr;\",\n    \"8645\": \"UpArrowDownArrow;\",\n    \"8646\": \"lrarr;\",\n    \"8647\": \"llarr;\",\n    \"8648\": \"uuarr;\",\n    \"8649\": \"rrarr;\",\n    \"8650\": \"downdownarrows;\",\n    \"8651\": \"ReverseEquilibrium;\",\n    \"8652\": \"rlhar;\",\n    \"8653\": \"nLeftarrow;\",\n    \"8654\": \"nLeftrightarrow;\",\n    \"8655\": \"nRightarrow;\",\n    \"8656\": \"Leftarrow;\",\n    \"8657\": \"Uparrow;\",\n    \"8658\": \"Rightarrow;\",\n    \"8659\": \"Downarrow;\",\n    \"8660\": \"Leftrightarrow;\",\n    \"8661\": \"vArr;\",\n    \"8662\": \"nwArr;\",\n    \"8663\": \"neArr;\",\n    \"8664\": \"seArr;\",\n    \"8665\": \"swArr;\",\n    \"8666\": \"Lleftarrow;\",\n    \"8667\": \"Rrightarrow;\",\n    \"8669\": \"zigrarr;\",\n    \"8676\": \"LeftArrowBar;\",\n    \"8677\": \"RightArrowBar;\",\n    \"8693\": \"duarr;\",\n    \"8701\": \"loarr;\",\n    \"8702\": \"roarr;\",\n    \"8703\": \"hoarr;\",\n    \"8704\": \"forall;\",\n    \"8705\": \"complement;\",\n    \"8706\": \"PartialD;\",\n    \"8707\": \"Exists;\",\n    \"8708\": \"NotExists;\",\n    \"8709\": \"varnothing;\",\n    \"8711\": \"nabla;\",\n    \"8712\": \"isinv;\",\n    \"8713\": \"notinva;\",\n    \"8715\": \"SuchThat;\",\n    \"8716\": \"NotReverseElement;\",\n    \"8719\": \"Product;\",\n    \"8720\": \"Coproduct;\",\n    \"8721\": \"sum;\",\n    \"8722\": \"minus;\",\n    \"8723\": \"mp;\",\n    \"8724\": \"plusdo;\",\n    \"8726\": \"ssetmn;\",\n    \"8727\": \"lowast;\",\n    \"8728\": \"SmallCircle;\",\n    \"8730\": \"Sqrt;\",\n    \"8733\": \"vprop;\",\n    \"8734\": \"infin;\",\n    \"8735\": \"angrt;\",\n    \"8736\": \"angle;\",\n    \"8737\": \"measuredangle;\",\n    \"8738\": \"angsph;\",\n    \"8739\": \"VerticalBar;\",\n    \"8740\": \"nsmid;\",\n    \"8741\": \"spar;\",\n    \"8742\": \"nspar;\",\n    \"8743\": \"wedge;\",\n    \"8744\": \"vee;\",\n    \"8745\": \"cap;\",\n    \"8746\": \"cup;\",\n    \"8747\": \"Integral;\",\n    \"8748\": \"Int;\",\n    \"8749\": \"tint;\",\n    \"8750\": \"oint;\",\n    \"8751\": \"DoubleContourIntegral;\",\n    \"8752\": \"Cconint;\",\n    \"8753\": \"cwint;\",\n    \"8754\": \"cwconint;\",\n    \"8755\": \"CounterClockwiseContourIntegral;\",\n    \"8756\": \"therefore;\",\n    \"8757\": \"because;\",\n    \"8758\": \"ratio;\",\n    \"8759\": \"Proportion;\",\n    \"8760\": \"minusd;\",\n    \"8762\": \"mDDot;\",\n    \"8763\": \"homtht;\",\n    \"8764\": \"Tilde;\",\n    \"8765\": \"bsim;\",\n    \"8766\": \"mstpos;\",\n    \"8767\": \"acd;\",\n    \"8768\": \"wreath;\",\n    \"8769\": \"nsim;\",\n    \"8770\": \"esim;\",\n    \"8771\": \"TildeEqual;\",\n    \"8772\": \"nsimeq;\",\n    \"8773\": \"TildeFullEqual;\",\n    \"8774\": \"simne;\",\n    \"8775\": \"NotTildeFullEqual;\",\n    \"8776\": \"TildeTilde;\",\n    \"8777\": \"NotTildeTilde;\",\n    \"8778\": \"approxeq;\",\n    \"8779\": \"apid;\",\n    \"8780\": \"bcong;\",\n    \"8781\": \"CupCap;\",\n    \"8782\": \"HumpDownHump;\",\n    \"8783\": \"HumpEqual;\",\n    \"8784\": \"esdot;\",\n    \"8785\": \"eDot;\",\n    \"8786\": \"fallingdotseq;\",\n    \"8787\": \"risingdotseq;\",\n    \"8788\": \"coloneq;\",\n    \"8789\": \"eqcolon;\",\n    \"8790\": \"eqcirc;\",\n    \"8791\": \"cire;\",\n    \"8793\": \"wedgeq;\",\n    \"8794\": \"veeeq;\",\n    \"8796\": \"trie;\",\n    \"8799\": \"questeq;\",\n    \"8800\": \"NotEqual;\",\n    \"8801\": \"equiv;\",\n    \"8802\": \"NotCongruent;\",\n    \"8804\": \"leq;\",\n    \"8805\": \"GreaterEqual;\",\n    \"8806\": \"LessFullEqual;\",\n    \"8807\": \"GreaterFullEqual;\",\n    \"8808\": \"lneqq;\",\n    \"8809\": \"gneqq;\",\n    \"8810\": \"NestedLessLess;\",\n    \"8811\": \"NestedGreaterGreater;\",\n    \"8812\": \"twixt;\",\n    \"8813\": \"NotCupCap;\",\n    \"8814\": \"NotLess;\",\n    \"8815\": \"NotGreater;\",\n    \"8816\": \"NotLessEqual;\",\n    \"8817\": \"NotGreaterEqual;\",\n    \"8818\": \"lsim;\",\n    \"8819\": \"gtrsim;\",\n    \"8820\": \"NotLessTilde;\",\n    \"8821\": \"NotGreaterTilde;\",\n    \"8822\": \"lg;\",\n    \"8823\": \"gtrless;\",\n    \"8824\": \"ntlg;\",\n    \"8825\": \"ntgl;\",\n    \"8826\": \"Precedes;\",\n    \"8827\": \"Succeeds;\",\n    \"8828\": \"PrecedesSlantEqual;\",\n    \"8829\": \"SucceedsSlantEqual;\",\n    \"8830\": \"prsim;\",\n    \"8831\": \"succsim;\",\n    \"8832\": \"nprec;\",\n    \"8833\": \"nsucc;\",\n    \"8834\": \"subset;\",\n    \"8835\": \"supset;\",\n    \"8836\": \"nsub;\",\n    \"8837\": \"nsup;\",\n    \"8838\": \"SubsetEqual;\",\n    \"8839\": \"supseteq;\",\n    \"8840\": \"nsubseteq;\",\n    \"8841\": \"nsupseteq;\",\n    \"8842\": \"subsetneq;\",\n    \"8843\": \"supsetneq;\",\n    \"8845\": \"cupdot;\",\n    \"8846\": \"uplus;\",\n    \"8847\": \"SquareSubset;\",\n    \"8848\": \"SquareSuperset;\",\n    \"8849\": \"SquareSubsetEqual;\",\n    \"8850\": \"SquareSupersetEqual;\",\n    \"8851\": \"SquareIntersection;\",\n    \"8852\": \"SquareUnion;\",\n    \"8853\": \"oplus;\",\n    \"8854\": \"ominus;\",\n    \"8855\": \"otimes;\",\n    \"8856\": \"osol;\",\n    \"8857\": \"odot;\",\n    \"8858\": \"ocir;\",\n    \"8859\": \"oast;\",\n    \"8861\": \"odash;\",\n    \"8862\": \"plusb;\",\n    \"8863\": \"minusb;\",\n    \"8864\": \"timesb;\",\n    \"8865\": \"sdotb;\",\n    \"8866\": \"vdash;\",\n    \"8867\": \"LeftTee;\",\n    \"8868\": \"top;\",\n    \"8869\": \"UpTee;\",\n    \"8871\": \"models;\",\n    \"8872\": \"vDash;\",\n    \"8873\": \"Vdash;\",\n    \"8874\": \"Vvdash;\",\n    \"8875\": \"VDash;\",\n    \"8876\": \"nvdash;\",\n    \"8877\": \"nvDash;\",\n    \"8878\": \"nVdash;\",\n    \"8879\": \"nVDash;\",\n    \"8880\": \"prurel;\",\n    \"8882\": \"vltri;\",\n    \"8883\": \"vrtri;\",\n    \"8884\": \"trianglelefteq;\",\n    \"8885\": \"trianglerighteq;\",\n    \"8886\": \"origof;\",\n    \"8887\": \"imof;\",\n    \"8888\": \"mumap;\",\n    \"8889\": \"hercon;\",\n    \"8890\": \"intercal;\",\n    \"8891\": \"veebar;\",\n    \"8893\": \"barvee;\",\n    \"8894\": \"angrtvb;\",\n    \"8895\": \"lrtri;\",\n    \"8896\": \"xwedge;\",\n    \"8897\": \"xvee;\",\n    \"8898\": \"xcap;\",\n    \"8899\": \"xcup;\",\n    \"8900\": \"diamond;\",\n    \"8901\": \"sdot;\",\n    \"8902\": \"Star;\",\n    \"8903\": \"divonx;\",\n    \"8904\": \"bowtie;\",\n    \"8905\": \"ltimes;\",\n    \"8906\": \"rtimes;\",\n    \"8907\": \"lthree;\",\n    \"8908\": \"rthree;\",\n    \"8909\": \"bsime;\",\n    \"8910\": \"cuvee;\",\n    \"8911\": \"cuwed;\",\n    \"8912\": \"Subset;\",\n    \"8913\": \"Supset;\",\n    \"8914\": \"Cap;\",\n    \"8915\": \"Cup;\",\n    \"8916\": \"pitchfork;\",\n    \"8917\": \"epar;\",\n    \"8918\": \"ltdot;\",\n    \"8919\": \"gtrdot;\",\n    \"8920\": \"Ll;\",\n    \"8921\": \"ggg;\",\n    \"8922\": \"LessEqualGreater;\",\n    \"8923\": \"gtreqless;\",\n    \"8926\": \"curlyeqprec;\",\n    \"8927\": \"curlyeqsucc;\",\n    \"8928\": \"nprcue;\",\n    \"8929\": \"nsccue;\",\n    \"8930\": \"nsqsube;\",\n    \"8931\": \"nsqsupe;\",\n    \"8934\": \"lnsim;\",\n    \"8935\": \"gnsim;\",\n    \"8936\": \"prnsim;\",\n    \"8937\": \"succnsim;\",\n    \"8938\": \"ntriangleleft;\",\n    \"8939\": \"ntriangleright;\",\n    \"8940\": \"ntrianglelefteq;\",\n    \"8941\": \"ntrianglerighteq;\",\n    \"8942\": \"vellip;\",\n    \"8943\": \"ctdot;\",\n    \"8944\": \"utdot;\",\n    \"8945\": \"dtdot;\",\n    \"8946\": \"disin;\",\n    \"8947\": \"isinsv;\",\n    \"8948\": \"isins;\",\n    \"8949\": \"isindot;\",\n    \"8950\": \"notinvc;\",\n    \"8951\": \"notinvb;\",\n    \"8953\": \"isinE;\",\n    \"8954\": \"nisd;\",\n    \"8955\": \"xnis;\",\n    \"8956\": \"nis;\",\n    \"8957\": \"notnivc;\",\n    \"8958\": \"notnivb;\",\n    \"8965\": \"barwedge;\",\n    \"8966\": \"doublebarwedge;\",\n    \"8968\": \"LeftCeiling;\",\n    \"8969\": \"RightCeiling;\",\n    \"8970\": \"lfloor;\",\n    \"8971\": \"RightFloor;\",\n    \"8972\": \"drcrop;\",\n    \"8973\": \"dlcrop;\",\n    \"8974\": \"urcrop;\",\n    \"8975\": \"ulcrop;\",\n    \"8976\": \"bnot;\",\n    \"8978\": \"profline;\",\n    \"8979\": \"profsurf;\",\n    \"8981\": \"telrec;\",\n    \"8982\": \"target;\",\n    \"8988\": \"ulcorner;\",\n    \"8989\": \"urcorner;\",\n    \"8990\": \"llcorner;\",\n    \"8991\": \"lrcorner;\",\n    \"8994\": \"sfrown;\",\n    \"8995\": \"ssmile;\",\n    \"9005\": \"cylcty;\",\n    \"9006\": \"profalar;\",\n    \"9014\": \"topbot;\",\n    \"9021\": \"ovbar;\",\n    \"9023\": \"solbar;\",\n    \"9084\": \"angzarr;\",\n    \"9136\": \"lmoustache;\",\n    \"9137\": \"rmoustache;\",\n    \"9140\": \"tbrk;\",\n    \"9141\": \"UnderBracket;\",\n    \"9142\": \"bbrktbrk;\",\n    \"9180\": \"OverParenthesis;\",\n    \"9181\": \"UnderParenthesis;\",\n    \"9182\": \"OverBrace;\",\n    \"9183\": \"UnderBrace;\",\n    \"9186\": \"trpezium;\",\n    \"9191\": \"elinters;\",\n    \"9251\": \"blank;\",\n    \"9416\": \"oS;\",\n    \"9472\": \"HorizontalLine;\",\n    \"9474\": \"boxv;\",\n    \"9484\": \"boxdr;\",\n    \"9488\": \"boxdl;\",\n    \"9492\": \"boxur;\",\n    \"9496\": \"boxul;\",\n    \"9500\": \"boxvr;\",\n    \"9508\": \"boxvl;\",\n    \"9516\": \"boxhd;\",\n    \"9524\": \"boxhu;\",\n    \"9532\": \"boxvh;\",\n    \"9552\": \"boxH;\",\n    \"9553\": \"boxV;\",\n    \"9554\": \"boxdR;\",\n    \"9555\": \"boxDr;\",\n    \"9556\": \"boxDR;\",\n    \"9557\": \"boxdL;\",\n    \"9558\": \"boxDl;\",\n    \"9559\": \"boxDL;\",\n    \"9560\": \"boxuR;\",\n    \"9561\": \"boxUr;\",\n    \"9562\": \"boxUR;\",\n    \"9563\": \"boxuL;\",\n    \"9564\": \"boxUl;\",\n    \"9565\": \"boxUL;\",\n    \"9566\": \"boxvR;\",\n    \"9567\": \"boxVr;\",\n    \"9568\": \"boxVR;\",\n    \"9569\": \"boxvL;\",\n    \"9570\": \"boxVl;\",\n    \"9571\": \"boxVL;\",\n    \"9572\": \"boxHd;\",\n    \"9573\": \"boxhD;\",\n    \"9574\": \"boxHD;\",\n    \"9575\": \"boxHu;\",\n    \"9576\": \"boxhU;\",\n    \"9577\": \"boxHU;\",\n    \"9578\": \"boxvH;\",\n    \"9579\": \"boxVh;\",\n    \"9580\": \"boxVH;\",\n    \"9600\": \"uhblk;\",\n    \"9604\": \"lhblk;\",\n    \"9608\": \"block;\",\n    \"9617\": \"blk14;\",\n    \"9618\": \"blk12;\",\n    \"9619\": \"blk34;\",\n    \"9633\": \"square;\",\n    \"9642\": \"squf;\",\n    \"9643\": \"EmptyVerySmallSquare;\",\n    \"9645\": \"rect;\",\n    \"9646\": \"marker;\",\n    \"9649\": \"fltns;\",\n    \"9651\": \"xutri;\",\n    \"9652\": \"utrif;\",\n    \"9653\": \"utri;\",\n    \"9656\": \"rtrif;\",\n    \"9657\": \"triangleright;\",\n    \"9661\": \"xdtri;\",\n    \"9662\": \"dtrif;\",\n    \"9663\": \"triangledown;\",\n    \"9666\": \"ltrif;\",\n    \"9667\": \"triangleleft;\",\n    \"9674\": \"lozenge;\",\n    \"9675\": \"cir;\",\n    \"9708\": \"tridot;\",\n    \"9711\": \"xcirc;\",\n    \"9720\": \"ultri;\",\n    \"9721\": \"urtri;\",\n    \"9722\": \"lltri;\",\n    \"9723\": \"EmptySmallSquare;\",\n    \"9724\": \"FilledSmallSquare;\",\n    \"9733\": \"starf;\",\n    \"9734\": \"star;\",\n    \"9742\": \"phone;\",\n    \"9792\": \"female;\",\n    \"9794\": \"male;\",\n    \"9824\": \"spadesuit;\",\n    \"9827\": \"clubsuit;\",\n    \"9829\": \"heartsuit;\",\n    \"9830\": \"diams;\",\n    \"9834\": \"sung;\",\n    \"9837\": \"flat;\",\n    \"9838\": \"natural;\",\n    \"9839\": \"sharp;\",\n    \"10003\": \"checkmark;\",\n    \"10007\": \"cross;\",\n    \"10016\": \"maltese;\",\n    \"10038\": \"sext;\",\n    \"10072\": \"VerticalSeparator;\",\n    \"10098\": \"lbbrk;\",\n    \"10099\": \"rbbrk;\",\n    \"10184\": \"bsolhsub;\",\n    \"10185\": \"suphsol;\",\n    \"10214\": \"lobrk;\",\n    \"10215\": \"robrk;\",\n    \"10216\": \"LeftAngleBracket;\",\n    \"10217\": \"RightAngleBracket;\",\n    \"10218\": \"Lang;\",\n    \"10219\": \"Rang;\",\n    \"10220\": \"loang;\",\n    \"10221\": \"roang;\",\n    \"10229\": \"xlarr;\",\n    \"10230\": \"xrarr;\",\n    \"10231\": \"xharr;\",\n    \"10232\": \"xlArr;\",\n    \"10233\": \"xrArr;\",\n    \"10234\": \"xhArr;\",\n    \"10236\": \"xmap;\",\n    \"10239\": \"dzigrarr;\",\n    \"10498\": \"nvlArr;\",\n    \"10499\": \"nvrArr;\",\n    \"10500\": \"nvHarr;\",\n    \"10501\": \"Map;\",\n    \"10508\": \"lbarr;\",\n    \"10509\": \"rbarr;\",\n    \"10510\": \"lBarr;\",\n    \"10511\": \"rBarr;\",\n    \"10512\": \"RBarr;\",\n    \"10513\": \"DDotrahd;\",\n    \"10514\": \"UpArrowBar;\",\n    \"10515\": \"DownArrowBar;\",\n    \"10518\": \"Rarrtl;\",\n    \"10521\": \"latail;\",\n    \"10522\": \"ratail;\",\n    \"10523\": \"lAtail;\",\n    \"10524\": \"rAtail;\",\n    \"10525\": \"larrfs;\",\n    \"10526\": \"rarrfs;\",\n    \"10527\": \"larrbfs;\",\n    \"10528\": \"rarrbfs;\",\n    \"10531\": \"nwarhk;\",\n    \"10532\": \"nearhk;\",\n    \"10533\": \"searhk;\",\n    \"10534\": \"swarhk;\",\n    \"10535\": \"nwnear;\",\n    \"10536\": \"toea;\",\n    \"10537\": \"tosa;\",\n    \"10538\": \"swnwar;\",\n    \"10547\": \"rarrc;\",\n    \"10549\": \"cudarrr;\",\n    \"10550\": \"ldca;\",\n    \"10551\": \"rdca;\",\n    \"10552\": \"cudarrl;\",\n    \"10553\": \"larrpl;\",\n    \"10556\": \"curarrm;\",\n    \"10557\": \"cularrp;\",\n    \"10565\": \"rarrpl;\",\n    \"10568\": \"harrcir;\",\n    \"10569\": \"Uarrocir;\",\n    \"10570\": \"lurdshar;\",\n    \"10571\": \"ldrushar;\",\n    \"10574\": \"LeftRightVector;\",\n    \"10575\": \"RightUpDownVector;\",\n    \"10576\": \"DownLeftRightVector;\",\n    \"10577\": \"LeftUpDownVector;\",\n    \"10578\": \"LeftVectorBar;\",\n    \"10579\": \"RightVectorBar;\",\n    \"10580\": \"RightUpVectorBar;\",\n    \"10581\": \"RightDownVectorBar;\",\n    \"10582\": \"DownLeftVectorBar;\",\n    \"10583\": \"DownRightVectorBar;\",\n    \"10584\": \"LeftUpVectorBar;\",\n    \"10585\": \"LeftDownVectorBar;\",\n    \"10586\": \"LeftTeeVector;\",\n    \"10587\": \"RightTeeVector;\",\n    \"10588\": \"RightUpTeeVector;\",\n    \"10589\": \"RightDownTeeVector;\",\n    \"10590\": \"DownLeftTeeVector;\",\n    \"10591\": \"DownRightTeeVector;\",\n    \"10592\": \"LeftUpTeeVector;\",\n    \"10593\": \"LeftDownTeeVector;\",\n    \"10594\": \"lHar;\",\n    \"10595\": \"uHar;\",\n    \"10596\": \"rHar;\",\n    \"10597\": \"dHar;\",\n    \"10598\": \"luruhar;\",\n    \"10599\": \"ldrdhar;\",\n    \"10600\": \"ruluhar;\",\n    \"10601\": \"rdldhar;\",\n    \"10602\": \"lharul;\",\n    \"10603\": \"llhard;\",\n    \"10604\": \"rharul;\",\n    \"10605\": \"lrhard;\",\n    \"10606\": \"UpEquilibrium;\",\n    \"10607\": \"ReverseUpEquilibrium;\",\n    \"10608\": \"RoundImplies;\",\n    \"10609\": \"erarr;\",\n    \"10610\": \"simrarr;\",\n    \"10611\": \"larrsim;\",\n    \"10612\": \"rarrsim;\",\n    \"10613\": \"rarrap;\",\n    \"10614\": \"ltlarr;\",\n    \"10616\": \"gtrarr;\",\n    \"10617\": \"subrarr;\",\n    \"10619\": \"suplarr;\",\n    \"10620\": \"lfisht;\",\n    \"10621\": \"rfisht;\",\n    \"10622\": \"ufisht;\",\n    \"10623\": \"dfisht;\",\n    \"10629\": \"lopar;\",\n    \"10630\": \"ropar;\",\n    \"10635\": \"lbrke;\",\n    \"10636\": \"rbrke;\",\n    \"10637\": \"lbrkslu;\",\n    \"10638\": \"rbrksld;\",\n    \"10639\": \"lbrksld;\",\n    \"10640\": \"rbrkslu;\",\n    \"10641\": \"langd;\",\n    \"10642\": \"rangd;\",\n    \"10643\": \"lparlt;\",\n    \"10644\": \"rpargt;\",\n    \"10645\": \"gtlPar;\",\n    \"10646\": \"ltrPar;\",\n    \"10650\": \"vzigzag;\",\n    \"10652\": \"vangrt;\",\n    \"10653\": \"angrtvbd;\",\n    \"10660\": \"ange;\",\n    \"10661\": \"range;\",\n    \"10662\": \"dwangle;\",\n    \"10663\": \"uwangle;\",\n    \"10664\": \"angmsdaa;\",\n    \"10665\": \"angmsdab;\",\n    \"10666\": \"angmsdac;\",\n    \"10667\": \"angmsdad;\",\n    \"10668\": \"angmsdae;\",\n    \"10669\": \"angmsdaf;\",\n    \"10670\": \"angmsdag;\",\n    \"10671\": \"angmsdah;\",\n    \"10672\": \"bemptyv;\",\n    \"10673\": \"demptyv;\",\n    \"10674\": \"cemptyv;\",\n    \"10675\": \"raemptyv;\",\n    \"10676\": \"laemptyv;\",\n    \"10677\": \"ohbar;\",\n    \"10678\": \"omid;\",\n    \"10679\": \"opar;\",\n    \"10681\": \"operp;\",\n    \"10683\": \"olcross;\",\n    \"10684\": \"odsold;\",\n    \"10686\": \"olcir;\",\n    \"10687\": \"ofcir;\",\n    \"10688\": \"olt;\",\n    \"10689\": \"ogt;\",\n    \"10690\": \"cirscir;\",\n    \"10691\": \"cirE;\",\n    \"10692\": \"solb;\",\n    \"10693\": \"bsolb;\",\n    \"10697\": \"boxbox;\",\n    \"10701\": \"trisb;\",\n    \"10702\": \"rtriltri;\",\n    \"10703\": \"LeftTriangleBar;\",\n    \"10704\": \"RightTriangleBar;\",\n    \"10716\": \"iinfin;\",\n    \"10717\": \"infintie;\",\n    \"10718\": \"nvinfin;\",\n    \"10723\": \"eparsl;\",\n    \"10724\": \"smeparsl;\",\n    \"10725\": \"eqvparsl;\",\n    \"10731\": \"lozf;\",\n    \"10740\": \"RuleDelayed;\",\n    \"10742\": \"dsol;\",\n    \"10752\": \"xodot;\",\n    \"10753\": \"xoplus;\",\n    \"10754\": \"xotime;\",\n    \"10756\": \"xuplus;\",\n    \"10758\": \"xsqcup;\",\n    \"10764\": \"qint;\",\n    \"10765\": \"fpartint;\",\n    \"10768\": \"cirfnint;\",\n    \"10769\": \"awint;\",\n    \"10770\": \"rppolint;\",\n    \"10771\": \"scpolint;\",\n    \"10772\": \"npolint;\",\n    \"10773\": \"pointint;\",\n    \"10774\": \"quatint;\",\n    \"10775\": \"intlarhk;\",\n    \"10786\": \"pluscir;\",\n    \"10787\": \"plusacir;\",\n    \"10788\": \"simplus;\",\n    \"10789\": \"plusdu;\",\n    \"10790\": \"plussim;\",\n    \"10791\": \"plustwo;\",\n    \"10793\": \"mcomma;\",\n    \"10794\": \"minusdu;\",\n    \"10797\": \"loplus;\",\n    \"10798\": \"roplus;\",\n    \"10799\": \"Cross;\",\n    \"10800\": \"timesd;\",\n    \"10801\": \"timesbar;\",\n    \"10803\": \"smashp;\",\n    \"10804\": \"lotimes;\",\n    \"10805\": \"rotimes;\",\n    \"10806\": \"otimesas;\",\n    \"10807\": \"Otimes;\",\n    \"10808\": \"odiv;\",\n    \"10809\": \"triplus;\",\n    \"10810\": \"triminus;\",\n    \"10811\": \"tritime;\",\n    \"10812\": \"iprod;\",\n    \"10815\": \"amalg;\",\n    \"10816\": \"capdot;\",\n    \"10818\": \"ncup;\",\n    \"10819\": \"ncap;\",\n    \"10820\": \"capand;\",\n    \"10821\": \"cupor;\",\n    \"10822\": \"cupcap;\",\n    \"10823\": \"capcup;\",\n    \"10824\": \"cupbrcap;\",\n    \"10825\": \"capbrcup;\",\n    \"10826\": \"cupcup;\",\n    \"10827\": \"capcap;\",\n    \"10828\": \"ccups;\",\n    \"10829\": \"ccaps;\",\n    \"10832\": \"ccupssm;\",\n    \"10835\": \"And;\",\n    \"10836\": \"Or;\",\n    \"10837\": \"andand;\",\n    \"10838\": \"oror;\",\n    \"10839\": \"orslope;\",\n    \"10840\": \"andslope;\",\n    \"10842\": \"andv;\",\n    \"10843\": \"orv;\",\n    \"10844\": \"andd;\",\n    \"10845\": \"ord;\",\n    \"10847\": \"wedbar;\",\n    \"10854\": \"sdote;\",\n    \"10858\": \"simdot;\",\n    \"10861\": \"congdot;\",\n    \"10862\": \"easter;\",\n    \"10863\": \"apacir;\",\n    \"10864\": \"apE;\",\n    \"10865\": \"eplus;\",\n    \"10866\": \"pluse;\",\n    \"10867\": \"Esim;\",\n    \"10868\": \"Colone;\",\n    \"10869\": \"Equal;\",\n    \"10871\": \"eDDot;\",\n    \"10872\": \"equivDD;\",\n    \"10873\": \"ltcir;\",\n    \"10874\": \"gtcir;\",\n    \"10875\": \"ltquest;\",\n    \"10876\": \"gtquest;\",\n    \"10877\": \"LessSlantEqual;\",\n    \"10878\": \"GreaterSlantEqual;\",\n    \"10879\": \"lesdot;\",\n    \"10880\": \"gesdot;\",\n    \"10881\": \"lesdoto;\",\n    \"10882\": \"gesdoto;\",\n    \"10883\": \"lesdotor;\",\n    \"10884\": \"gesdotol;\",\n    \"10885\": \"lessapprox;\",\n    \"10886\": \"gtrapprox;\",\n    \"10887\": \"lneq;\",\n    \"10888\": \"gneq;\",\n    \"10889\": \"lnapprox;\",\n    \"10890\": \"gnapprox;\",\n    \"10891\": \"lesseqqgtr;\",\n    \"10892\": \"gtreqqless;\",\n    \"10893\": \"lsime;\",\n    \"10894\": \"gsime;\",\n    \"10895\": \"lsimg;\",\n    \"10896\": \"gsiml;\",\n    \"10897\": \"lgE;\",\n    \"10898\": \"glE;\",\n    \"10899\": \"lesges;\",\n    \"10900\": \"gesles;\",\n    \"10901\": \"eqslantless;\",\n    \"10902\": \"eqslantgtr;\",\n    \"10903\": \"elsdot;\",\n    \"10904\": \"egsdot;\",\n    \"10905\": \"el;\",\n    \"10906\": \"eg;\",\n    \"10909\": \"siml;\",\n    \"10910\": \"simg;\",\n    \"10911\": \"simlE;\",\n    \"10912\": \"simgE;\",\n    \"10913\": \"LessLess;\",\n    \"10914\": \"GreaterGreater;\",\n    \"10916\": \"glj;\",\n    \"10917\": \"gla;\",\n    \"10918\": \"ltcc;\",\n    \"10919\": \"gtcc;\",\n    \"10920\": \"lescc;\",\n    \"10921\": \"gescc;\",\n    \"10922\": \"smt;\",\n    \"10923\": \"lat;\",\n    \"10924\": \"smte;\",\n    \"10925\": \"late;\",\n    \"10926\": \"bumpE;\",\n    \"10927\": \"preceq;\",\n    \"10928\": \"succeq;\",\n    \"10931\": \"prE;\",\n    \"10932\": \"scE;\",\n    \"10933\": \"prnE;\",\n    \"10934\": \"succneqq;\",\n    \"10935\": \"precapprox;\",\n    \"10936\": \"succapprox;\",\n    \"10937\": \"prnap;\",\n    \"10938\": \"succnapprox;\",\n    \"10939\": \"Pr;\",\n    \"10940\": \"Sc;\",\n    \"10941\": \"subdot;\",\n    \"10942\": \"supdot;\",\n    \"10943\": \"subplus;\",\n    \"10944\": \"supplus;\",\n    \"10945\": \"submult;\",\n    \"10946\": \"supmult;\",\n    \"10947\": \"subedot;\",\n    \"10948\": \"supedot;\",\n    \"10949\": \"subseteqq;\",\n    \"10950\": \"supseteqq;\",\n    \"10951\": \"subsim;\",\n    \"10952\": \"supsim;\",\n    \"10955\": \"subsetneqq;\",\n    \"10956\": \"supsetneqq;\",\n    \"10959\": \"csub;\",\n    \"10960\": \"csup;\",\n    \"10961\": \"csube;\",\n    \"10962\": \"csupe;\",\n    \"10963\": \"subsup;\",\n    \"10964\": \"supsub;\",\n    \"10965\": \"subsub;\",\n    \"10966\": \"supsup;\",\n    \"10967\": \"suphsub;\",\n    \"10968\": \"supdsub;\",\n    \"10969\": \"forkv;\",\n    \"10970\": \"topfork;\",\n    \"10971\": \"mlcp;\",\n    \"10980\": \"DoubleLeftTee;\",\n    \"10982\": \"Vdashl;\",\n    \"10983\": \"Barv;\",\n    \"10984\": \"vBar;\",\n    \"10985\": \"vBarv;\",\n    \"10987\": \"Vbar;\",\n    \"10988\": \"Not;\",\n    \"10989\": \"bNot;\",\n    \"10990\": \"rnmid;\",\n    \"10991\": \"cirmid;\",\n    \"10992\": \"midcir;\",\n    \"10993\": \"topcir;\",\n    \"10994\": \"nhpar;\",\n    \"10995\": \"parsim;\",\n    \"11005\": \"parsl;\",\n    \"64256\": \"fflig;\",\n    \"64257\": \"filig;\",\n    \"64258\": \"fllig;\",\n    \"64259\": \"ffilig;\",\n    \"64260\": \"ffllig;\"\n}\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n},{}],12:[function(require,module,exports){\n(function (global){\n/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(require,module,exports){\n/**\n * This file automatically generated from `pre-publish.js`.\n * Do not manually edit.\n */\n\nmodule.exports = {\n  \"area\": true,\n  \"base\": true,\n  \"br\": true,\n  \"col\": true,\n  \"embed\": true,\n  \"hr\": true,\n  \"img\": true,\n  \"input\": true,\n  \"keygen\": true,\n  \"link\": true,\n  \"menuitem\": true,\n  \"meta\": true,\n  \"param\": true,\n  \"source\": true,\n  \"track\": true,\n  \"wbr\": true\n};\n\n},{}]},{},[3]);\n", "var sinon = require('sinon')\nvar assert = require('assert')\n\nvar ClientKarma = require('../../client/karma')\nvar ContextKarma = require('../../context/karma')\nvar MockSocket = require('./mocks').Socket\n\ndescribe('Karma', function () {\n  var updater, socket, k, ck, windowNavigator, windowLocation, windowStub, startSpy, iframe, clientWindow\n  var windowDocument, elements, mockTestStatus\n\n  function setTransportTo (transportName) {\n    socket._setTransportNameTo(transportName)\n    socket.emit('connect')\n  }\n\n  beforeEach(function () {\n    mockTestStatus = ''\n    updater = {\n      updateTestStatus: function (s) {\n        mockTestStatus = s\n      }\n    }\n    socket = new MockSocket()\n    iframe = { contentWindow: {} }\n    windowNavigator = {}\n    windowLocation = { search: '' }\n    windowStub = sinon.stub().returns({})\n    elements = [{ style: {} }, { style: {} }]\n    windowDocument = { querySelectorAll: sinon.stub().returns(elements) }\n\n    k = new ClientKarma(updater, socket, iframe, windowStub, windowNavigator, windowLocation, windowDocument)\n    clientWindow = {\n      karma: k\n    }\n    ck = new ContextKarma(ContextKarma.getDirectCallParentKarmaMethod(clientWindow))\n    ck.config = {}\n    startSpy = sinon.spy(ck, 'start')\n  })\n\n  it('should start execution when all files loaded and pass config', function () {\n    var config = ck.config = {\n      useIframe: true\n    }\n\n    socket.emit('execute', config)\n    assert(!startSpy.called)\n\n    ck.loaded()\n    assert(startSpy.calledWith(config))\n  })\n\n  it('should open a new window when useIFrame is false', function (done) {\n    var config = ck.config = {\n      useIframe: false,\n      runInParent: false\n    }\n\n    socket.emit('execute', config)\n    setTimeout(function nextEventLoop () {\n      assert(!ck.start.called)\n\n      ck.loaded()\n      assert(startSpy.calledWith(config))\n      assert(windowStub.calledWith('context.html'))\n      done()\n    })\n  })\n\n  it('should not set style on elements', function (done) {\n    var config = {}\n    socket.emit('execute', config)\n    setTimeout(function nextEventLoop () {\n      assert(Object.keys(elements[0].style).length === 0)\n      done()\n    })\n  })\n\n  it('should set display none on elements if clientDisplayNone', function (done) {\n    var config = { clientDisplayNone: true }\n    socket.emit('execute', config)\n    setTimeout(function nextEventLoop () {\n      assert(elements[0].style.display === 'none')\n      assert(elements[1].style.display === 'none')\n      done()\n    })\n  })\n\n  it('should stop execution', function () {\n    sinon.spy(k, 'complete')\n    socket.emit('stop')\n    assert(k.complete.called)\n  })\n\n  it('should not start execution if any error during loading files', function () {\n    ck.error('syntax error', '/some/file.js', 11)\n    ck.loaded()\n    sinon.spy(ck, 'start')\n    assert(!startSpy.called)\n  })\n\n  it('should remove reference to start even after syntax error', function () {\n    function ADAPTER_START_FN () {}\n\n    ck.start = ADAPTER_START_FN\n    ck.error('syntax error', '/some/file.js', 11)\n    ck.loaded()\n    assert.notStrictEqual(ck.start, ADAPTER_START_FN)\n\n    ck.start = ADAPTER_START_FN\n    ck.loaded()\n    assert.notStrictEqual(k.start, ADAPTER_START_FN)\n  })\n\n  it('should not set up context if there was an error', function (done) {\n    var config = ck.config = {\n      clearContext: true\n    }\n\n    socket.emit('execute', config)\n\n    setTimeout(function nextEventLoop () {\n      var mockWindow = {}\n\n      ck.error('page reload')\n      ck.setupContext(mockWindow)\n\n      assert(mockWindow.onbeforeunload == null)\n      assert(mockWindow.onerror == null)\n      done()\n    })\n  })\n\n  it('should setup context if there was error but clearContext config is false', function (done) {\n    var config = ck.config = {\n      clearContext: false\n    }\n\n    socket.emit('execute', config)\n\n    setTimeout(function nextEventLoop () {\n      var mockWindow = {}\n\n      ck.error('page reload')\n      ck.setupContext(mockWindow)\n\n      assert(mockWindow.onbeforeunload != null)\n      assert(mockWindow.onerror != null)\n      done()\n    })\n  })\n\n  it('should error out if a script attempted to reload the browser after setup', function (done) {\n    // Perform setup\n    var config = ck.config = {\n      clearContext: false\n    }\n    socket.emit('execute', config)\n\n    setTimeout(function nextEventLoop () {\n      var mockWindow = {}\n      ck.setupContext(mockWindow)\n\n      // Spy on our error handler\n      sinon.spy(k, 'error')\n\n      // Emulate an unload event\n      mockWindow.onbeforeunload()\n\n      // Assert our spy was called\n      assert(k.error.calledWith('Some of your tests did a full page reload!'))\n      done()\n    })\n  })\n\n  it('should error out if a script attempted to reload the browser after setup with clearContext true', function (done) {\n    // Perform setup\n    var config = ck.config = {\n      clearContext: true\n    }\n    socket.emit('execute', config)\n\n    setTimeout(function nextEventLoop () {\n      var mockWindow = {}\n      ck.setupContext(mockWindow)\n\n      // Spy on our error handler\n      sinon.spy(k, 'error')\n\n      // Emulate an unload event\n      mockWindow.onbeforeunload()\n\n      // Assert our spy was called\n      assert(k.error.calledWith('Some of your tests did a full page reload!'))\n      done()\n    })\n  })\n\n  it('should report navigator name', function () {\n    var spyInfo = sinon.spy(function (info) {\n      assert(info.name === 'Fake browser name')\n    })\n\n    windowNavigator.userAgent = 'Fake browser name'\n    windowLocation.search = ''\n    socket.on('register', spyInfo)\n    socket.emit('connect')\n\n    assert(spyInfo.called)\n  })\n\n  it('should mark \"register\" event for reconnected socket', function () {\n    // First connect.\n    socket.emit('connect')\n\n    socket.on('register', sinon.spy(function (info) {\n      assert(info.isSocketReconnect === true)\n    }))\n    // Reconnect\n    socket.emit('connect')\n  })\n\n  it('should report browser id', function () {\n    windowLocation.search = '?id=567'\n    socket = new MockSocket()\n    k = new ClientKarma(updater, socket, {}, windowStub, windowNavigator, windowLocation)\n\n    var spyInfo = sinon.spy(function (info) {\n      assert(info.id === '567')\n    })\n\n    socket.on('register', spyInfo)\n    socket.emit('connect')\n\n    assert(spyInfo.called)\n  })\n\n  describe('result', function () {\n    it('should buffer results when polling', function () {\n      var spyResult = sinon.stub()\n      socket.on('result', spyResult)\n\n      setTransportTo('polling')\n\n      // emit 49 results\n      for (var i = 1; i < 50; i++) {\n        ck.result({ id: i })\n      }\n\n      assert(!spyResult.called)\n\n      ck.result('result', { id: 50 })\n      assert(spyResult.called)\n      assert(spyResult.args[0][0].length === 50)\n    })\n\n    it('should buffer results when polling', function () {\n      var spyResult = sinon.stub()\n      socket.on('result', spyResult)\n\n      setTransportTo('polling')\n\n      // emit 40 results\n      for (var i = 1; i <= 40; i++) {\n        ck.result({ id: i })\n      }\n\n      ck.complete()\n      assert(spyResult.called)\n      assert(spyResult.args[0][0].length === 40)\n    })\n\n    it('should emit \"start\" with total specs count first', function () {\n      var log = []\n\n      socket.on('result', function () {\n        log.push('result')\n      })\n\n      socket.on('start', function () {\n        log.push('start')\n      })\n\n      setTransportTo('websocket')\n\n      // adapter didn't call info({total: x})\n      ck.result()\n      assert.deepStrictEqual(log, ['start', 'result'])\n    })\n\n    it('should not emit \"start\" if already done by the adapter', function () {\n      var log = []\n\n      var spyStart = sinon.spy(function () {\n        log.push('start')\n      })\n\n      var spyResult = sinon.spy(function () {\n        log.push('result')\n      })\n\n      socket.on('result', spyResult)\n      socket.on('start', spyStart)\n\n      setTransportTo('websocket')\n\n      ck.info({ total: 321 })\n      ck.result()\n      assert.deepStrictEqual(log, ['start', 'result'])\n      assert(spyStart.calledWith({ total: 321 }))\n    })\n  })\n\n  describe('setupContext', function () {\n    it('should capture alert', function () {\n      sinon.spy(ck, 'log')\n\n      var mockWindow = {\n        alert: function () {\n          throw new Error('Alert was not patched!')\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      mockWindow.alert('What?')\n      assert(ck.log.calledWith('alert', ['What?']))\n    })\n\n    it('should capture confirm', function () {\n      sinon.spy(ck, 'log')\n      var confirmCalled = false\n\n      var mockWindow = {\n        confirm: function () {\n          confirmCalled = true\n          return true\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      var confirmResult = mockWindow.confirm('What?')\n      assert(ck.log.calledWith('confirm', ['What?']))\n      assert.strictEqual(confirmCalled, true)\n      assert.strictEqual(confirmResult, true)\n    })\n\n    it('should capture prompt', function () {\n      sinon.spy(ck, 'log')\n      var promptCalled = false\n\n      var mockWindow = {\n        prompt: function () {\n          promptCalled = true\n          return 'user-input'\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      var promptResult = mockWindow.prompt('What is your favorite color?', 'blue')\n      assert(ck.log.calledWith('prompt', ['What is your favorite color?', 'blue']))\n      assert.strictEqual(promptCalled, true)\n      assert.strictEqual(promptResult, 'user-input')\n    })\n\n    it('should patch the console if captureConsole is true', function () {\n      sinon.spy(ck, 'log')\n      ck.config.captureConsole = true\n\n      var mockWindow = {\n        console: {\n          log: function () {}\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      mockWindow.console.log('What?')\n      assert(ck.log.calledWith('log'))\n      assert(ck.log.args[0][1][0] === 'What?')\n    })\n\n    it('should not patch the console if captureConsole is false', function () {\n      sinon.spy(ck, 'log')\n      ck.config.captureConsole = false\n\n      var mockWindow = {\n        console: {\n          log: function () {}\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      mockWindow.console.log('hello')\n      assert(!ck.log.called)\n    })\n\n    it('should not allow broken console methods to break tests (if captureConsole is true)', function () {\n      sinon.spy(ck, 'log')\n      ck.config.captureConsole = true\n\n      var mockWindow = {\n        console: {\n          log: function () {\n            throw new Error('I am a broken console.log method.')\n          }\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      mockWindow.console.log('What?')\n      assert(ck.log.calledWith('log'))\n      assert.strictEqual(ck.log.args[0][1][0], 'What?')\n      assert(ck.log.calledWith('warn'))\n      assert(/^Console method log threw:[\\s\\S]+I am a broken console\\.log method/.test(ck.log.args[1][1][0]))\n    })\n  })\n\n  describe('complete', function () {\n    var clock\n\n    before(function () {\n      clock = sinon.useFakeTimers()\n    })\n\n    after(function () {\n      clock.restore()\n    })\n\n    it('should clean the result buffer before completing', function () {\n      var spyResult = sinon.stub()\n      socket.on('result', spyResult)\n\n      setTransportTo('polling')\n\n      // emit 40 results\n      for (var i = 0; i < 40; i++) {\n        ck.result({ id: i })\n      }\n\n      assert(!spyResult.called)\n\n      ck.complete()\n      assert(spyResult.called)\n    })\n\n    it('should navigate the client to return_url if specified', function (done) {\n      windowLocation.search = '?id=567&return_url=http://return.com'\n      socket = new MockSocket()\n      k = new ClientKarma(updater, socket, iframe, windowStub, windowNavigator, windowLocation)\n      clientWindow = { karma: k }\n      ck = new ContextKarma(ContextKarma.getDirectCallParentKarmaMethod(clientWindow))\n      ck.config = {}\n\n      sinon.spy(socket, 'disconnect')\n      clock.tick(500)\n\n      ck.complete()\n      setTimeout(function () {\n        assert(windowLocation.href === 'http://return.com')\n        done()\n      }, 5)\n\n      clock.tick(10)\n    })\n\n    it('should clear context window upon complete when clearContext config is true', function () {\n      var config = ck.config = {\n        clearContext: true\n      }\n\n      socket.emit('execute', config)\n      var CURRENT_URL = iframe.src\n\n      ck.complete()\n\n      // clock.tick() does not work in IE 7\n      setTimeout(function () {\n        clock.tick(1)\n        assert.notStrictEqual(iframe.src, CURRENT_URL)\n      }, 10)\n    })\n\n    it('should not clear context window upon complete when clearContext config is false', function () {\n      var config = ck.config = {\n        clearContext: false\n      }\n\n      socket.emit('execute', config)\n      assert(mockTestStatus === 'execute')\n\n      clock.tick(1)\n      var CURRENT_URL = iframe.src\n      ck.complete()\n      clock.tick(1)\n      assert.strictEqual(iframe.src, CURRENT_URL)\n      assert(mockTestStatus === 'complete')\n    })\n\n    it('should accept multiple calls to loaded', function () {\n      // support for Safari 10 since it supports type=module but not nomodule.\n      var config = ck.config = {\n        useIframe: true\n      }\n\n      socket.emit('execute', config)\n      clock.tick(1)\n      assert(!startSpy.called)\n\n      ck.loaded()\n      ck.loaded()\n      assert(startSpy.calledWith(config))\n      assert(startSpy.getCalls().length === 1)\n    })\n  })\n})\n"], "fixing_code": ["var stringify = require('../common/stringify')\nvar constant = require('./constants')\nvar util = require('../common/util')\n\nfunction Karma (updater, socket, iframe, opener, navigator, location, document) {\n  this.updater = updater\n  var startEmitted = false\n  var self = this\n  var queryParams = util.parseQueryParams(location.search)\n  var browserId = queryParams.id || util.generateId('manual-')\n  var displayName = queryParams.displayName\n  var returnUrl = queryParams['return_url' + ''] || null\n\n  var resultsBufferLimit = 50\n  var resultsBuffer = []\n\n  // This is a no-op if not running with a Trusted Types CSP policy, and\n  // lets tests declare that they trust the way that karma creates and handles\n  // URLs.\n  //\n  // More info about the proposed Trusted Types standard at\n  // https://github.com/WICG/trusted-types\n  var policy = {\n    createURL: function (s) {\n      return s\n    },\n    createScriptURL: function (s) {\n      return s\n    }\n  }\n  var trustedTypes = window.trustedTypes || window.TrustedTypes\n  if (trustedTypes) {\n    policy = trustedTypes.createPolicy('karma', policy)\n    if (!policy.createURL) {\n      // Install createURL for newer browsers. Only browsers that implement an\n      //     old version of the spec require createURL.\n      //     Should be safe to delete all reference to createURL by\n      //     February 2020.\n      // https://github.com/WICG/trusted-types/pull/204\n      policy.createURL = function (s) { return s }\n    }\n  }\n\n  // To start we will signal the server that we are not reconnecting. If the socket loses\n  // connection and was able to reconnect to the Karma server we will get a\n  // second 'connect' event. There we will pass 'true' and that will be passed to the\n  // Karma server then, so that Karma can differentiate between a socket client\n  // econnect and a full browser reconnect.\n  var socketReconnect = false\n\n  this.VERSION = constant.VERSION\n  this.config = {}\n\n  // Expose for testing purposes as there is no global socket.io\n  // registry anymore.\n  this.socket = socket\n\n  // Set up postMessage bindings for current window\n  // DEV: These are to allow windows in separate processes execute local tasks\n  //   Electron is one of these environments\n  if (window.addEventListener) {\n    window.addEventListener('message', function handleMessage (evt) {\n      // Resolve the origin of our message\n      var origin = evt.origin || evt.originalEvent.origin\n\n      // If the message isn't from our host, then reject it\n      if (origin !== window.location.origin) {\n        return\n      }\n\n      // Take action based on the message type\n      var method = evt.data.__karmaMethod\n      if (method) {\n        if (!self[method]) {\n          self.error('Received `postMessage` for \"' + method + '\" but the method doesn\\'t exist')\n          return\n        }\n        self[method].apply(self, evt.data.__karmaArguments)\n      }\n    }, false)\n  }\n\n  var childWindow = null\n  function navigateContextTo (url) {\n    if (self.config.useIframe === false) {\n      // run in new window\n      if (self.config.runInParent === false) {\n        // If there is a window already open, then close it\n        // DEV: In some environments (e.g. Electron), we don't have setter access for location\n        if (childWindow !== null && childWindow.closed !== true) {\n          // The onbeforeunload listener was added by context to catch\n          // unexpected navigations while running tests.\n          childWindow.onbeforeunload = undefined\n          childWindow.close()\n        }\n        childWindow = opener(url)\n      // run context on parent element (client_with_context)\n      // using window.__karma__.scriptUrls to get the html element strings and load them dynamically\n      } else if (url !== 'about:blank') {\n        var loadScript = function (idx) {\n          if (idx < window.__karma__.scriptUrls.length) {\n            var parser = new DOMParser()\n            // Revert escaped characters with special roles in HTML before parsing\n            var string = window.__karma__.scriptUrls[idx]\n              .replace(/\\\\x3C/g, '<')\n              .replace(/\\\\x3E/g, '>')\n            var doc = parser.parseFromString(string, 'text/html')\n            var ele = doc.head.firstChild || doc.body.firstChild\n            // script elements created by DomParser are marked as unexecutable,\n            // create a new script element manually and copy necessary properties\n            // so it is executable\n            if (ele.tagName && ele.tagName.toLowerCase() === 'script') {\n              var tmp = ele\n              ele = document.createElement('script')\n              ele.src = policy.createScriptURL(tmp.src)\n              ele.crossOrigin = tmp.crossOrigin\n            }\n            ele.onload = function () {\n              loadScript(idx + 1)\n            }\n            document.body.appendChild(ele)\n          } else {\n            window.__karma__.loaded()\n          }\n        }\n        loadScript(0)\n      }\n    // run in iframe\n    } else {\n      // The onbeforeunload listener was added by the context to catch\n      // unexpected navigations while running tests.\n      iframe.contentWindow.onbeforeunload = undefined\n      iframe.src = policy.createURL(url)\n    }\n  }\n\n  this.log = function (type, args) {\n    var values = []\n\n    for (var i = 0; i < args.length; i++) {\n      values.push(this.stringify(args[i], 3))\n    }\n\n    this.info({ log: values.join(', '), type: type })\n  }\n\n  this.stringify = stringify\n\n  function getLocation (url, lineno, colno) {\n    var location = ''\n\n    if (url !== undefined) {\n      location += url\n    }\n\n    if (lineno !== undefined) {\n      location += ':' + lineno\n    }\n\n    if (colno !== undefined) {\n      location += ':' + colno\n    }\n\n    return location\n  }\n\n  // error during js file loading (most likely syntax error)\n  // we are not going to execute at all. `window.onerror` callback.\n  this.error = function (messageOrEvent, source, lineno, colno, error) {\n    var message\n    if (typeof messageOrEvent === 'string') {\n      message = messageOrEvent\n\n      var location = getLocation(source, lineno, colno)\n      if (location !== '') {\n        message += '\\nat ' + location\n      }\n      if (error && error.stack) {\n        message += '\\n\\n' + error.stack\n      }\n    } else {\n      // create an object with the string representation of the message to\n      // ensure all its content is properly transferred to the console log\n      message = { message: messageOrEvent, str: messageOrEvent.toString() }\n    }\n\n    socket.emit('karma_error', message)\n    self.updater.updateTestStatus('karma_error ' + message)\n    this.complete()\n    return false\n  }\n\n  this.result = function (originalResult) {\n    var convertedResult = {}\n\n    // Convert all array-like objects to real arrays.\n    for (var propertyName in originalResult) {\n      if (Object.prototype.hasOwnProperty.call(originalResult, propertyName)) {\n        var propertyValue = originalResult[propertyName]\n\n        if (Object.prototype.toString.call(propertyValue) === '[object Array]') {\n          convertedResult[propertyName] = Array.prototype.slice.call(propertyValue)\n        } else {\n          convertedResult[propertyName] = propertyValue\n        }\n      }\n    }\n\n    if (!startEmitted) {\n      socket.emit('start', { total: null })\n      self.updater.updateTestStatus('start')\n      startEmitted = true\n    }\n\n    if (resultsBufferLimit === 1) {\n      self.updater.updateTestStatus('result')\n      return socket.emit('result', convertedResult)\n    }\n\n    resultsBuffer.push(convertedResult)\n\n    if (resultsBuffer.length === resultsBufferLimit) {\n      socket.emit('result', resultsBuffer)\n      self.updater.updateTestStatus('result')\n      resultsBuffer = []\n    }\n  }\n\n  this.complete = function (result) {\n    if (resultsBuffer.length) {\n      socket.emit('result', resultsBuffer)\n      resultsBuffer = []\n    }\n\n    socket.emit('complete', result || {})\n    if (this.config.clearContext) {\n      navigateContextTo('about:blank')\n    } else {\n      self.updater.updateTestStatus('complete')\n    }\n    if (returnUrl) {\n      var isReturnUrlAllowed = false\n      for (var i = 0; i < this.config.allowedReturnUrlPatterns.length; i++) {\n        var allowedReturnUrlPattern = new RegExp(this.config.allowedReturnUrlPatterns[i])\n        if (allowedReturnUrlPattern.test(returnUrl)) {\n          isReturnUrlAllowed = true\n          break\n        }\n      }\n      if (!isReturnUrlAllowed) {\n        throw new Error(\n          'Security: Navigation to '.concat(\n            returnUrl,\n            ' was blocked to prevent malicious exploits.'\n          )\n        )\n      }\n      location.href = returnUrl\n    }\n  }\n\n  this.info = function (info) {\n    // TODO(vojta): introduce special API for this\n    if (!startEmitted && util.isDefined(info.total)) {\n      socket.emit('start', info)\n      startEmitted = true\n    } else {\n      socket.emit('info', info)\n    }\n  }\n\n  socket.on('execute', function (cfg) {\n    self.updater.updateTestStatus('execute')\n    // reset startEmitted and reload the iframe\n    startEmitted = false\n    self.config = cfg\n\n    navigateContextTo(constant.CONTEXT_URL)\n\n    if (self.config.clientDisplayNone) {\n      [].forEach.call(document.querySelectorAll('#banner, #browsers'), function (el) {\n        el.style.display = 'none'\n      })\n    }\n\n    // clear the console before run\n    // works only on FF (Safari, Chrome do not allow to clear console from js source)\n    if (window.console && window.console.clear) {\n      window.console.clear()\n    }\n  })\n  socket.on('stop', function () {\n    this.complete()\n  }.bind(this))\n\n  // Report the browser name and Id. Note that this event can also fire if the connection has\n  // been temporarily lost, but the socket reconnected automatically. Read more in the docs:\n  // https://socket.io/docs/client-api/#Event-%E2%80%98connect%E2%80%99\n  socket.on('connect', function () {\n    socket.io.engine.on('upgrade', function () {\n      resultsBufferLimit = 1\n      // Flush any results which were buffered before the upgrade to WebSocket protocol.\n      if (resultsBuffer.length > 0) {\n        socket.emit('result', resultsBuffer)\n        resultsBuffer = []\n      }\n    })\n    var info = {\n      name: navigator.userAgent,\n      id: browserId,\n      isSocketReconnect: socketReconnect\n    }\n    if (displayName) {\n      info.displayName = displayName\n    }\n    socket.emit('register', info)\n    socketReconnect = true\n  })\n}\n\nmodule.exports = Karma\n", "## Overview\nIn order to serve you well, Karma needs to know about your project in order to test it\nand this is done via a configuration file. The easiest way to generate an initial configuration file\nis by using the `karma init` command. This page lists all of the available configuration options.\n\nNote: Most of the framework adapters, reporters, preprocessors and launchers need to be loaded as [plugins].\n\n\nThe Karma configuration file can be written in JavaScript, CoffeeScript, or TypeScript and is loaded as a regular Node.js module.\n\nUnless provided as argument, the Karma CLI will look for a configuration file at\n\n* `./karma.conf.js`\n* `./karma.conf.coffee`\n* `./karma.conf.ts`\n* `./.config/karma.conf.js`\n* `./.config/karma.conf.coffee`\n* `./.config/karma.conf.ts`\n\nin that order.\n\nWithin the configuration file, the configuration code is put together by setting `module.exports` to point to a function\nwhich accepts one argument: the configuration object.\n\n```javascript\n// karma.conf.js\nmodule.exports = function(config) {\n  config.set({\n    basePath: '../..',\n    frameworks: ['jasmine'],\n    //...\n  });\n};\n```\n\n```coffeescript\n# karma.conf.coffee\nmodule.exports = (config) ->\n  config.set\n    basePath: '../..'\n    frameworks: ['jasmine']\n    # ...\n```\n\n```typescript\n// karma.conf.ts\nmodule.exports = (config) => {\n  config.set({\n    basePath: '../..',\n    frameworks: ['jasmine'],\n    //...\n  });\n}\n```\n\n### Customized TypeScript Configuration\nUnder the hood Karma uses ts-node to transpile TypeScript to JavaScript. If the resolved `tsconfig.json` has `module` configured as `ES` formats. You might get errors like `SyntaxError: Unexpected token`. This is due that in Node `ES` module formats are not supported. To overcome this issue you need to configure ts-node to use `commonjs` module format.\n\nCreate a JavaScript configuration file that overrides the module format.\n```javascript\n// karma.conf.js\nrequire('ts-node').register({\n  compilerOptions: {\n    module: 'commonjs'\n  }\n});\nrequire('./karma.conf.ts');\n```\n\n## File Patterns\nAll of the configuration options, which specify file paths, use the [minimatch][minimatch] library to facilitate flexible\nbut concise file expressions so you can easily list all of the files you want to include and exclude.\n\nYou can find details about each configuration option in the section below. The following options utilize minimatch expressions:\n\n * `exclude`\n * `files`\n * `preprocessors`\n\nExamples:\n\n * `**/*.js`: All files with a \"js\" extension in all subdirectories\n * `**/!(jquery).js`: Same as previous, but excludes \"jquery.js\"\n * `**/(foo|bar).js`: In all subdirectories, all \"foo.js\" or \"bar.js\" files\n\n## Configuration Options\nThese are all of the available configuration options.\n\n## autoWatch\n**Type:** Boolean\n\n**Default:**  `true`\n\n**CLI:** `--auto-watch`, `--no-auto-watch`\n\n**Description:** Enable or disable watching files and executing the tests whenever one of these files changes.\n\n\n## autoWatchBatchDelay\n**Type:** Number\n\n**Default:**  `250`\n\n**Description:** When Karma is watching the files for changes, it tries to batch\nmultiple changes into a single run so that the test runner doesn't try to start and restart running\ntests more than it should, or restart while build files are not in a consistent state. The configuration setting\ntells Karma how long to wait (in milliseconds) from the last file change before starting\nthe test process again, resetting the timer each time a file changes (i.e. [debouncing](https://davidwalsh.name/javascript-debounce-function)).\n\n\n## basePath\n**Type:** String\n\n**Default:** `''`\n\n**Description:** The root path location that will be used to resolve all relative\npaths defined in `files` and `exclude`. If the `basePath` configuration is a\nrelative path, then it will be resolved to the `__dirname` of the configuration file.\n\n\n## browserDisconnectTimeout\n**Type:** Number\n\n**Default:** `2000`\n\n**Description:** How long does Karma wait for a browser to reconnect (in ms).\n\nWith a flaky connection, it is pretty common that the browser disconnects, but the actual test execution is still running\nwithout any problems. Karma does not treat a disconnection as an immediate failure and will wait for `browserDisconnectTimeout` (ms).\nIf the browser reconnects during that time, everything is fine.\n\n\n## browserConsoleLogOptions\n**Type:** Object\n\n**Default:** `{level: \"debug\", format: \"%b %T: %m\", terminal: true}`\n\n**Description:** Configure how the browser console is logged with the following\nproperties, all of which are optional:\n\n```javascript\n{\n  level:  string,\n  format: string,\n  path:   string,\n  terminal: boolean\n}\n```\n\n\nHere the `level` is the desired log-level, where level `log` always is logged. The format\nis a string where `%b`, `%t`, `%T`, and `%m` are replaced with the browser string,\nlog type in lower-case, log type in uppercase, and log message, respectively. This format will\nonly effect the output file. `path` is the output-path of the output-file, and `terminal` indicates\nif the log should be written in the terminal, or not.\n\n\n## browserDisconnectTolerance\n**Type:** Number\n\n**Default:** `0`\n\n**Description:** The number of disconnections tolerated.\n\nThe `disconnectTolerance` value represents the maximum number of tries a browser will attempt in the case of a disconnection.\nUsually, any disconnection is considered a failure, but this option allows you to define a tolerance level when there is\na flaky network link between the Karma server and the browsers.\n\n\n## browserNoActivityTimeout\n**Type:** Number\n\n**Default:** `30000`\n\n**Description:** How long will Karma wait for a message from a browser before disconnecting from it (in ms).\n\nIf, during test execution, Karma does not receive any message from a browser within `browserNoActivityTimeout`(ms), it will disconnect from the browser. The default is the one recommended by Travis (https://docs.travis-ci.com/user/gui-and-headless-browsers/#karma-and-firefox-inactivity-timeouts)\n\n\n## browsers\n**Type:** Array\n\n**Default:**  `[]`\n\n**CLI:** `--browsers Chrome,Firefox`, `--no-browsers`\n\n**Possible Values:**\n\n  * `Chrome` (launcher requires karma-chrome-launcher plugin)\n  * `ChromeCanary` (launcher requires karma-chrome-launcher plugin)\n  * `ChromeHeadless` (launcher requires karma-chrome-launcher plugin ^2.1.0)\n  * `PhantomJS` (launcher requires karma-phantomjs-launcher plugin)\n  * `Firefox` (launcher requires karma-firefox-launcher plugin)\n  * `Opera` (launcher requires karma-opera-launcher plugin)\n  * `IE` (launcher requires karma-ie-launcher plugin)\n  * `Safari` (launcher requires karma-safari-launcher plugin)\n\n**Description:** A list of browsers to launch and capture. When Karma starts up, it will also start up each browser\nwhich is placed within this setting. Once Karma is shut down, it will shut down these\nbrowsers as well. You can capture any browser manually by opening the browser and visiting the URL where\nthe Karma web server is listening (by default it is `http://localhost:9876/`).\n\nSee [config/browsers] for more information. Additional launchers can be defined through [plugins]. Use the\n`--no-browsers` command line option to override the value of this setting specified in the configuration file\nwith an empty list.\n\n\n## captureTimeout\n**Type:** Number\n\n**Default:** `60000`\n\n**Description:** Timeout for capturing a browser (in ms).\n\nThe `captureTimeout` value represents the maximum boot-up time allowed for a browser to start and connect to Karma.\nIf any browser does not get captured within the timeout, Karma will kill it and try to launch\nit again and, after three attempts to capture it, Karma will give up.\n\n\n## client.args\n**Type:** Array\n\n**Default:** `undefined`\n\n**CLI:** All arguments after `--` (only when using `karma run`)\n\n**Description:** When `karma run` is passed additional arguments on the command-line, they\nare passed through to the test adapter as `karma.config.args` (an array of strings).\nThe `client.args` option allows you to set this value for actions other than `run`.\n\nHow this value is used is up to your test adapter - you should check your adapter's documentation to see how (and if) it uses this value.\n\n\n## client.useIframe\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** Run the tests inside an iFrame or a new window\n\nIf true, Karma runs the tests inside an iFrame. If false, Karma runs the tests in a new window. Some tests may not run in an\niFrame and may need a new window to run.\n\n## client.runInParent\n**Type:** Boolean\n\n**Default:** `false`\n\n**Description:** Run the tests on the same window as the client, without using iframe or a new window\n\nIf true, Karma runs the tests inside the original window without using iframe. It will load the test scripts dynamically.\n\n## client.captureConsole\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** Capture all console output and pipe it to the terminal.\n\n\n## client.clearContext\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** Clear the context window\n\nIf true, Karma clears the context window upon the completion of running the tests. If false, Karma does not clear the context window\nupon the completion of running the tests. Setting this to false is useful when embedding a Jasmine Spec Runner Template.\n\n## client.clientDisplayNone\n**Type:** Boolean\n\n**Default:** `false`\n\n**Description:** Set style display none on client elements.\n\nIf true, Karma does not display the banner and browser list. Useful when using karma on component tests with screenshots.\n\n## client.allowedReturnUrlPatterns\n**Type:** Array\n\n**Default:** `['^https?://']`\n\n**Description:** Define the string representations of the regular expressions that will be allowed for the `return_url` query parameter.\n\nIf the value of the `return_url` query parameter does not match any regular expression derived from the string representation of each of the elements of this array, navigation to it will be blocked.\n\n## colors\n**Type:** Boolean\n\n**Default:**   `true`\n\n**CLI:** `--colors`, `--no-colors`\n\n**Description:** Enable or disable colors in the output (reporters and logs).\n\n\n## concurrency\n**Type:** Number\n\n**Default:** `Infinity`\n\n**Description:** How many browsers Karma launches in parallel.\n\nEspecially on services like SauceLabs and Browserstack, it makes sense only to launch a limited amount of browsers at once, and only start more when those have finished. Using this configuration, you can specify how many browsers should be running at once at any given point in time.\n\n## crossOriginAttribute\n\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** When true, this will append the crossorigin attribute to generated script tags, which enables better error reporting for JavaScript files served from a different origin.\nDisable this when you need to load external scripts that are served without the necessary `Access-Control-Allow-Origin` header.\n\n\n## customContextFile\n**Type:** string\n\n**Default:** `null`\n\n**Description:** If `null` (default), uses karma's own `context.html` file.\n\n\n## customDebugFile\n**Type:** string\n\n**Default:** `null`\n\n**Description:** If `null` (default), uses karma's own `debug.html` file.\n\n\n## customClientContextFile\n**Type:** string\n\n**Default:** `null`\n\n**Description:** If `null` (default), uses karma's own `client_with_context.html` file (which is used when client.runInParent set to true).\n\n\n## customHeaders\n**Type:** Array\n\n**Default:** `undefined`\n\n**Description** Custom HTTP headers that will be set upon serving files by Karma's web server.\nCustom headers are useful, especially with upcoming browser features like Service Workers.\n\nThe `customHeaders` option allows you to set HTTP headers for files that match a regular expression.\n`customHeaders` is an array of `Objects` with properties as follows:\n\n* match: Regular expression string to match files\n* name: HTTP header name\n* value: HTTP header value\n\n**Example:**\n```javascript\ncustomHeaders: [{\n  match: '.*foo.html',\n  name: 'Service-Worker-Allowed',\n  value: '/'\n}]\n```\n\n\n## detached\n**Type:** Boolean\n\n**Default:** `false`\n\n**CLI:** `--detached`\n\n**Description:** When true, this will start the karma server in another process, writing no output to the console.\nThe server can be stopped using the `karma stop` command.\n\n\n## exclude\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** List of files/patterns to exclude from loaded files.\n\n## failOnEmptyTestSuite\n**Type:** Boolean\n\n**Default:** `true`\n\n**CLI:** `--fail-on-empty-test-suite`, `--no-fail-on-empty-test-suite`\n\n**Description:** Enable or disable failure on running empty test-suites. If disabled the program\nwill return exit-code `0` and display a warning.\n\n## failOnSkippedTests\n**Type:** Boolean\n\n**Default:** `false`\n\n**CLI:** `--fail-on-skipped-tests`, `--no-fail-on-skipped-tests`\n\n**Description:** Enable or disable failure on tests deliberately disabled, eg fit() or xit() tests in jasmine.\nUse this to prevent accidental disabling tests needed to validate production.\n\n## failOnFailingTestSuite\n**Type:** Boolean\n\n**Default:** `true`\n\n**CLI:** `--fail-on-failing-test-suite`, `--no-fail-on-failing-test-suite`\n\n**Description:** Enable or disable failure on failing tests.\n\n## files\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** List of files/patterns to load in the browser.\n\nSee [config/files] for more information.\n\n## forceJSONP\n**Type:** Boolean\n\n**Default:** `false`\n\n**Description:** Force socket.io to use JSONP polling instead of XHR polling.\n\n## frameworks\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** List of test frameworks you want to use. Typically, you will set this to `['jasmine']`, `['mocha']` or `['qunit']`...\n\nPlease note just about all frameworks in Karma require an additional plugin/framework library to be installed (via npm).\n\nAdditional information can be found in [plugins].\n\n## listenAddress\n**Type:** String\n\n**Default:** `'0.0.0.0' or LISTEN_ADDR`\n\n**Description:** Address that the server will listen on. Change to 'localhost' to only listen to the loopback, or '::' to listen on all IPv6 interfaces\n\n## hostname\n**Type:** String\n\n**Default:** `'localhost'`\n\n**Description:** Hostname to be used when capturing browsers.\n\n\n## httpsServerOptions\n**Type:** Object\n\n**Default:** `{}`\n\n**Description:** Options object to be used by Node's `https` class.\n\nObject description can be found in the [NodeJS.org API docs](https://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener)\n\n**Example:**\n```javascript\nhttpsServerOptions: {\n  key: fs.readFileSync('server.key', 'utf8'),\n  cert: fs.readFileSync('server.crt', 'utf8')\n},\n```\n\n## logLevel\n**Type:** Constant\n\n**Default:** `config.LOG_INFO`\n\n**CLI:** `--log-level debug`\n\n**Possible values:**\n\n  * `config.LOG_DISABLE`\n  * `config.LOG_ERROR`\n  * `config.LOG_WARN`\n  * `config.LOG_INFO`\n  * `config.LOG_DEBUG`\n\n**Description:** Level of logging.\n\n\n## loggers\n**Type:** Array\n\n**Default:** `[{type: 'console'}]`\n\n**Description:** A list of log appenders to be used. See the documentation for [log4js] for more information.\n\n\n## middleware\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** List of names of additional middleware you want the karma server to use. Middleware will be used in the order listed.\n\nYou must have installed the middleware via a plugin/framework (either inline or via npm). Additional information can be found in [plugins].\n\nThe plugin must provide an express/connect middleware function (details about this can be found in [the Express docs](https://expressjs.com/en/guide/using-middleware.html). An example of custom inline middleware is shown below.\n\n**Example:**\n```javascript\nfunction CustomMiddlewareFactory (config) {\n  return function (request, response, /* next */) {\n    response.writeHead(200)\n    return response.end(\"content!\")\n  }\n}\n```\n\n```javascript\nmiddleware: ['custom']\nplugins: [\n  {'middleware:custom': ['factory', CustomMiddlewareFactory]}\n  ...\n]\n```\n\n\n## mime\n**Type:** Object\n\n**Default:** `{}`\n\n**Description:** Redefine default mapping from file extensions to MIME-type\n\nSet property name to required MIME, provide Array of extensions (without dots) as it's value\n\n**Example:**\n```javascript\nmime: {\n   'text/x-typescript': ['ts','tsx']\n   'text/plain' : ['mytxt']\n}\n```\n\n\n## beforeMiddleware\n**Type:** Array\n\n**Default:** `[]`\n\n**Description:** This is the same as middleware except that these middleware will be run before karma's own middleware.\n\n\n## plugins\n**Type:** Array\n\n**Default:** `['karma-*']`\n\n**Description:** List of plugins to load. A plugin can be either a plugin object, or a string containing name of the module which exports a plugin object. See [plugins] for more information on how to install and use plugins. \n\nBy default, Karma loads plugins from all sibling npm packages which have a name starting with `karma-*`.\n\n\n## port\n**Type:** Number\n\n**Default:** `9876`\n\n**CLI:** `--port 9876`\n\n**Description:** The port where the web server will be listening.\n\nIf the defined port is already in use, karma will automatically increase its value in steps of 1 until a free port is found.\n\n\n## processKillTimeout\n**Type:** Number\n\n**Default:** `2000`\n\n**Description:** How long will Karma wait for browser process to terminate before sending a SIGKILL signal.\n\nIf, after test execution or after Karma attempts to kill the browser, browser is not killed within `processKillTimeout`(ms), Karma will send a SIGKILL signal to attempt to kill the browser forcefully.\n\n\n## preprocessors\n**Type:** Object\n\n**Default:** `{'**/*.coffee': 'coffee'}`\n\n**Description:** A map of preprocessors to use.\n\nPreprocessors can be loaded through [plugins].\n\nNote: Just about all preprocessors in Karma require an additional library to be installed (via npm).\n\nBe aware that preprocessors may be transforming the files and file types that are available at run time. For instance,\nif you are using the \"coverage\" preprocessor on your source files, if you then attempt to interactively debug\nyour tests, you'll discover that your expected source code is completely changed from what you expected.  Because\nof that, you'll want to engineer this so that your automated builds use the coverage entry in the \"reporters\" list,\nbut your interactive debugging does not.\n\nClick <a href=\"preprocessors.html\">here</a> for more information.\n\n\n## protocol\n**Type:** String\n\n**Default:** `'http:'`\n\n**Possible Values:**\n\n* `http:`\n* `https:`\n\n**Description:** Protocol used for running the Karma webserver.\n\nDetermines the use of the Node `http` or `https` class.\n\nNote: Using `'https:'` requires you to specify `httpsServerOptions`.\n\n\n## httpModule\n**Type:** String\n\n**Default:** `undefined`\n\n**Description:** Module used for Karma webserver.\n\nUses the provided module instead of node's built in `http` or `https` module. The module loaded here must exactly match the interface of node's http module. This can be useful for loading in a module like `node-http2` to allow for http2 support.\n\nNote: if you're using this to enable `http2` you must also set the `protocol` to `https:` and specify certificates as http2 can only run of https.\n\n## proxies\n**Type:** Object\n\n**Default:** `{}`\n\n**Description:** A map of path-proxy pairs.\n\nThe proxy can be specified directly by the target url or path, or with an object to configure more options. The available options are:\n\n- `target` The target url or path (mandatory)\n- `changeOrigin` Whether or not the proxy should override the Host header using the host from the target (default `false`)\n\n**Example:**\n```javascript\nproxies: {\n  '/static': 'http://gstatic.com',\n  '/web': 'http://localhost:9000',\n  '/img/': '/base/test/images/',\n  '/proxyfied': {\n    'target': 'http://myserver.localhost',\n    'changeOrigin': true\n  }\n},\n```\n\n\n## proxyValidateSSL\n**Type:** Boolean\n\n**Default:** `true`\n\n**Description:** Whether or not Karma or any browsers should raise an error when an invalid SSL certificate is found.\n\n\n## reportSlowerThan\n**Type:** Number\n\n**Default:** `0`\n\n**Description:** Karma will report all the tests that are slower than given time limit (in ms).\nThis is disabled by default (since the default value is 0).\n\n\n## reporters\n**Type:** Array\n\n**Default:** `['progress']`\n\n**CLI:** `--reporters progress,growl`\n\n**Possible Values:**\n\n  * `dots`\n  * `progress`\n\n**Description:** A list of reporters to use.\n\nAdditional reporters, such as `growl`, `junit`, `teamcity` or `coverage` can be loaded through [plugins].\n\nNote: Just about all additional reporters in Karma (other than progress) require an additional library to be installed (via npm).\n\n\n## formatError\n**Type:** Function\n\n**Default:** `undefined`\n\n**CLI:** `--format-error ./path/to/formatFunction.js`\n\n**Arguments:**\n\n  * `msg` - A single line of the assertion error and stack trace (called for each line).\n\n**Returns:** A new error message line.\n\n**Description:** Format assertion errors and stack traces.  Useful for removing vendors and compiled sources.  Return an empty line `''` to remove it.\n\nThe CLI option should be a path to a file that exports the format function.  This can be a function exported at the root of the module or an export named `formatError`.\n\n## pingTimeout\n**Type** Number\n\n**Default** 5000\n\n**Description** Socket.io pingTimeout in ms, https://socket.io/docs/server-api/#new-Server-httpServer-options.\nVery slow networks may need values up to 60000. Larger values delay discovery of deadlock in tests or browser crashes.\n\n## restartOnFileChange\n**Type:** Boolean\n\n**Default:** `false`\n\n**Description:** When Karma is watching the files for changes, it will delay a new run until\nthe current run is finished. Enabling this setting will cancel the current run and start a new run\nimmediately when a change is detected.\n\n\n## retryLimit\n**Type:** Number\n\n**Default:** 2\n\n**Description:** When a browser crashes, karma will try to relaunch. This defines how many times karma should relaunch\na browser before giving up.\n\n## singleRun\n**Type:** Boolean\n\n**Default:** `false`\n\n**CLI:** `--single-run`, `--no-single-run`\n\n**Description:** Continuous Integration mode.\n\nIf `true`, Karma will start and capture all configured browsers, run tests and then exit with an exit code of `0` or `1` depending\non whether all tests passed or any tests failed.\n\n\n\n## transports\n**Type:** Array\n\n**Default:** `['polling', 'websocket']`\n\n**Description:** An array of allowed transport methods between the browser and testing server. This configuration setting\nis handed off to [socket.io](https://socket.io/) (which manages the communication\nbetween browsers and the testing server).\n\n\n## proxyReq\n**Type:** Function\n\n**Default:** `undefined`\n\n**Description:** Called when requesting Proxy.\n\nDetails about this can be found in the [node-http-proxy](https://github.com/nodejitsu/node-http-proxy). An example of overwriting the HTTP header is shown below.\n\n**Example:**\n```javascript\nproxyReq: function(proxyReq, req, res, options) {\n  proxyReq.setHeader('Referer', 'https://www.example.com/');\n}\n```\n\n## proxyRes\n**Type:** Function\n\n**Default:** `undefined`\n\n**Description:** Called when respnsing Proxy.\n\nDetails about this can be found in the [node-http-proxy](https://github.com/nodejitsu/node-http-proxy). An example of overwriting the HTTP header is shown below.\n\n**Example:**\n```javascript\nproxyRes: function(proxyRes, req, res) {\n  if (proxyRes.headers['set-cookie']) {\n    proxyRes.headers['set-cookie'] = proxyRes.headers['set-cookie'].map(function (cookie) {\n      return cookie.replace(/\\s*secure;?/i, '');\n    })\n  }\n}\n```\n\n\n## upstreamProxy\n**Type:** Object\n\n**Default:** `undefined`\n\n**Description:** For use when the Karma server needs to be run behind a proxy that changes the base url, etc\n\nIf set then the following fields will be defined and can be overridden:\n\n### path\n**Type:** String\n\n**Default:** `'/'`\n\n**Description:** Will be prepended to the base url when launching browsers and prepended to internal urls as loaded by the browsers\n\n### port\n**Type:** Number\n\n**Default:** `9875`\n\n**Description:** Will be used as the port when launching browsers\n\n### hostname\n**Type:** String\n\n**Default:** `'localhost'`\n\n**Description:** Will be used as the hostname when launching browsers\n\n\n\n### protocol\n**Type:** String\n\n**Default:** `'http:'`\n\n**Description:** Will be used as the protocol when launching browsers\n\n\n## urlRoot\n**Type:** String\n\n**Default:** `'/'`\n\n**Description:** The base url, where Karma runs.\n\nAll of Karma's urls get prefixed with the `urlRoot`. This is helpful when using proxies, as\nsometimes you might want to proxy a url that is already taken by Karma.\n\n## browserSocketTimeout\n**Type:** Number\n\n**Default:** `20000`\n\n**Description:** Timeout for the client socket connection (in ms).\n\nThis configuration represents the amount of time that the client will wait for the socket\nto connect.\n\nWhen running a browser in different environments, it can take different amounts of time for the\nclient socket to connect. If Karma cannot connect within the default timeout, you may see an\nerror similar to the following:\n```\nChromeHeadless has not captured in 60000ms, killing.\nTrying to start ChromeHeadless again (1/2).\nChromeHeadless has not captured in 60000ms, killing.\nTrying to start ChromeHeadless again (2/2).\nChromeHeadless has not captured in 60000ms, killing.\nChromeHeadless failed 2 times(timeout). Giving up.\n```\nIf you see this error, you can try increasing the socket connection timeout.\n\n\n[plugins]: plugins.html\n[config/files]: files.html\n[config/browsers]: browsers.html\n[config/preprocessors]: preprocessors.html\n[log4js]: https://github.com/nomiddlename/log4js-node\n[minimatch]: https://github.com/isaacs/minimatch\n", "'use strict'\n\nconst path = require('path')\nconst assert = require('assert')\n\nconst logger = require('./logger')\nconst log = logger.create('config')\nconst helper = require('./helper')\nconst constant = require('./constants')\n\nconst _ = require('lodash')\n\nlet COFFEE_SCRIPT_AVAILABLE = false\nlet LIVE_SCRIPT_AVAILABLE = false\nlet TYPE_SCRIPT_AVAILABLE = false\n\ntry {\n  require('coffeescript').register()\n  COFFEE_SCRIPT_AVAILABLE = true\n} catch {}\n\n// LiveScript is required here to enable config files written in LiveScript.\n// It's not directly used in this file.\ntry {\n  require('LiveScript')\n  LIVE_SCRIPT_AVAILABLE = true\n} catch {}\n\ntry {\n  require('ts-node')\n  TYPE_SCRIPT_AVAILABLE = true\n} catch {}\n\nclass Pattern {\n  constructor (pattern, served, included, watched, nocache, type, isBinary) {\n    this.pattern = pattern\n    this.served = helper.isDefined(served) ? served : true\n    this.included = helper.isDefined(included) ? included : true\n    this.watched = helper.isDefined(watched) ? watched : true\n    this.nocache = helper.isDefined(nocache) ? nocache : false\n    this.weight = helper.mmPatternWeight(pattern)\n    this.type = type\n    this.isBinary = isBinary\n  }\n\n  compare (other) {\n    return helper.mmComparePatternWeights(this.weight, other.weight)\n  }\n}\n\nclass UrlPattern extends Pattern {\n  constructor (url, type) {\n    super(url, false, true, false, false, type)\n  }\n}\n\nfunction createPatternObject (pattern) {\n  if (pattern && helper.isString(pattern)) {\n    return helper.isUrlAbsolute(pattern)\n      ? new UrlPattern(pattern)\n      : new Pattern(pattern)\n  } else if (helper.isObject(pattern) && pattern.pattern && helper.isString(pattern.pattern)) {\n    return helper.isUrlAbsolute(pattern.pattern)\n      ? new UrlPattern(pattern.pattern, pattern.type)\n      : new Pattern(pattern.pattern, pattern.served, pattern.included, pattern.watched, pattern.nocache, pattern.type)\n  } else {\n    log.warn(`Invalid pattern ${pattern}!\\n\\tExpected string or object with \"pattern\" property.`)\n    return new Pattern(null, false, false, false, false)\n  }\n}\n\nfunction normalizeUrl (url) {\n  if (!url.startsWith('/')) {\n    url = `/${url}`\n  }\n\n  if (!url.endsWith('/')) {\n    url = url + '/'\n  }\n\n  return url\n}\n\nfunction normalizeUrlRoot (urlRoot) {\n  const normalizedUrlRoot = normalizeUrl(urlRoot)\n\n  if (normalizedUrlRoot !== urlRoot) {\n    log.warn(`urlRoot normalized to \"${normalizedUrlRoot}\"`)\n  }\n\n  return normalizedUrlRoot\n}\n\nfunction normalizeProxyPath (proxyPath) {\n  const normalizedProxyPath = normalizeUrl(proxyPath)\n\n  if (normalizedProxyPath !== proxyPath) {\n    log.warn(`proxyPath normalized to \"${normalizedProxyPath}\"`)\n  }\n\n  return normalizedProxyPath\n}\n\nfunction normalizeConfig (config, configFilePath) {\n  function basePathResolve (relativePath) {\n    if (helper.isUrlAbsolute(relativePath)) {\n      return relativePath\n    } else if (helper.isDefined(config.basePath) && helper.isDefined(relativePath)) {\n      return path.resolve(config.basePath, relativePath)\n    } else {\n      return ''\n    }\n  }\n\n  function createPatternMapper (resolve) {\n    return (objectPattern) => Object.assign(objectPattern, { pattern: resolve(objectPattern.pattern) })\n  }\n\n  if (helper.isString(configFilePath)) {\n    config.basePath = path.resolve(path.dirname(configFilePath), config.basePath) // resolve basePath\n    config.exclude.push(configFilePath) // always ignore the config file itself\n  } else {\n    config.basePath = path.resolve(config.basePath || '.')\n  }\n\n  config.files = config.files.map(createPatternObject).map(createPatternMapper(basePathResolve))\n  config.exclude = config.exclude.map(basePathResolve)\n  config.customContextFile = config.customContextFile && basePathResolve(config.customContextFile)\n  config.customDebugFile = config.customDebugFile && basePathResolve(config.customDebugFile)\n  config.customClientContextFile = config.customClientContextFile && basePathResolve(config.customClientContextFile)\n\n  // normalize paths on windows\n  config.basePath = helper.normalizeWinPath(config.basePath)\n  config.files = config.files.map(createPatternMapper(helper.normalizeWinPath))\n  config.exclude = config.exclude.map(helper.normalizeWinPath)\n  config.customContextFile = helper.normalizeWinPath(config.customContextFile)\n  config.customDebugFile = helper.normalizeWinPath(config.customDebugFile)\n  config.customClientContextFile = helper.normalizeWinPath(config.customClientContextFile)\n\n  // normalize urlRoot\n  config.urlRoot = normalizeUrlRoot(config.urlRoot)\n\n  // normalize and default upstream proxy settings if given\n  if (config.upstreamProxy) {\n    const proxy = config.upstreamProxy\n    proxy.path = helper.isDefined(proxy.path) ? normalizeProxyPath(proxy.path) : '/'\n    proxy.hostname = helper.isDefined(proxy.hostname) ? proxy.hostname : 'localhost'\n    proxy.port = helper.isDefined(proxy.port) ? proxy.port : 9875\n\n    // force protocol to end with ':'\n    proxy.protocol = (proxy.protocol || 'http').split(':')[0] + ':'\n    if (proxy.protocol.match(/https?:/) === null) {\n      log.warn(`\"${proxy.protocol}\" is not a supported upstream proxy protocol, defaulting to \"http:\"`)\n      proxy.protocol = 'http:'\n    }\n  }\n\n  // force protocol to end with ':'\n  config.protocol = (config.protocol || 'http').split(':')[0] + ':'\n  if (config.protocol.match(/https?:/) === null) {\n    log.warn(`\"${config.protocol}\" is not a supported protocol, defaulting to \"http:\"`)\n    config.protocol = 'http:'\n  }\n\n  if (config.proxies && Object.prototype.hasOwnProperty.call(config.proxies, config.urlRoot)) {\n    log.warn(`\"${config.urlRoot}\" is proxied, you should probably change urlRoot to avoid conflicts`)\n  }\n\n  if (config.singleRun && config.autoWatch) {\n    log.debug('autoWatch set to false, because of singleRun')\n    config.autoWatch = false\n  }\n\n  if (config.runInParent) {\n    log.debug('useIframe set to false, because using runInParent')\n    config.useIframe = false\n  }\n\n  if (!config.singleRun && !config.useIframe && config.runInParent) {\n    log.debug('singleRun set to true, because using runInParent')\n    config.singleRun = true\n  }\n\n  if (helper.isString(config.reporters)) {\n    config.reporters = config.reporters.split(',')\n  }\n\n  if (config.client && config.client.args) {\n    assert(Array.isArray(config.client.args), 'Invalid configuration: client.args must be an array of strings')\n  }\n\n  if (config.browsers) {\n    assert(Array.isArray(config.browsers), 'Invalid configuration: browsers option must be an array')\n  }\n\n  if (config.formatError) {\n    assert(helper.isFunction(config.formatError), 'Invalid configuration: formatError option must be a function.')\n  }\n\n  if (config.processKillTimeout) {\n    assert(helper.isNumber(config.processKillTimeout), 'Invalid configuration: processKillTimeout option must be a number.')\n  }\n\n  if (config.browserSocketTimeout) {\n    assert(helper.isNumber(config.browserSocketTimeout), 'Invalid configuration: browserSocketTimeout option must be a number.')\n  }\n\n  if (config.pingTimeout) {\n    assert(helper.isNumber(config.pingTimeout), 'Invalid configuration: pingTimeout option must be a number.')\n  }\n\n  const defaultClient = config.defaultClient || {}\n  Object.keys(defaultClient).forEach(function (key) {\n    const option = config.client[key]\n    config.client[key] = helper.isDefined(option) ? option : defaultClient[key]\n  })\n\n  // normalize preprocessors\n  const preprocessors = config.preprocessors || {}\n  const normalizedPreprocessors = config.preprocessors = Object.create(null)\n\n  Object.keys(preprocessors).forEach(function (pattern) {\n    const normalizedPattern = helper.normalizeWinPath(basePathResolve(pattern))\n\n    normalizedPreprocessors[normalizedPattern] = helper.isString(preprocessors[pattern])\n      ? [preprocessors[pattern]] : preprocessors[pattern]\n  })\n\n  // define custom launchers/preprocessors/reporters - create a new plugin\n  const module = Object.create(null)\n  let hasSomeInlinedPlugin = false\n  const types = ['launcher', 'preprocessor', 'reporter']\n\n  types.forEach(function (type) {\n    const definitions = config[`custom${helper.ucFirst(type)}s`] || {}\n\n    Object.keys(definitions).forEach(function (name) {\n      const definition = definitions[name]\n\n      if (!helper.isObject(definition)) {\n        return log.warn(`Can not define ${type} ${name}. Definition has to be an object.`)\n      }\n\n      if (!helper.isString(definition.base)) {\n        return log.warn(`Can not define ${type} ${name}. Missing base ${type}.`)\n      }\n\n      const token = type + ':' + definition.base\n      const locals = {\n        args: ['value', definition]\n      }\n\n      module[type + ':' + name] = ['factory', function (injector) {\n        const plugin = injector.createChild([locals], [token]).get(token)\n        if (type === 'launcher' && helper.isDefined(definition.displayName)) {\n          plugin.displayName = definition.displayName\n        }\n        return plugin\n      }]\n      hasSomeInlinedPlugin = true\n    })\n  })\n\n  if (hasSomeInlinedPlugin) {\n    config.plugins.push(module)\n  }\n\n  return config\n}\n\n/**\n * @class\n */\nclass Config {\n  constructor () {\n    this.LOG_DISABLE = constant.LOG_DISABLE\n    this.LOG_ERROR = constant.LOG_ERROR\n    this.LOG_WARN = constant.LOG_WARN\n    this.LOG_INFO = constant.LOG_INFO\n    this.LOG_DEBUG = constant.LOG_DEBUG\n\n    // DEFAULT CONFIG\n    this.frameworks = []\n    this.protocol = 'http:'\n    this.port = constant.DEFAULT_PORT\n    this.listenAddress = constant.DEFAULT_LISTEN_ADDR\n    this.hostname = constant.DEFAULT_HOSTNAME\n    this.httpsServerConfig = {}\n    this.basePath = ''\n    this.files = []\n    this.browserConsoleLogOptions = {\n      level: 'debug',\n      format: '%b %T: %m',\n      terminal: true\n    }\n    this.customContextFile = null\n    this.customDebugFile = null\n    this.customClientContextFile = null\n    this.exclude = []\n    this.logLevel = constant.LOG_INFO\n    this.colors = true\n    this.autoWatch = true\n    this.autoWatchBatchDelay = 250\n    this.restartOnFileChange = false\n    this.usePolling = process.platform === 'linux'\n    this.reporters = ['progress']\n    this.singleRun = false\n    this.browsers = []\n    this.captureTimeout = 60000\n    this.pingTimeout = 5000\n    this.proxies = {}\n    this.proxyValidateSSL = true\n    this.preprocessors = {}\n    this.preprocessor_priority = {}\n    this.urlRoot = '/'\n    this.upstreamProxy = undefined\n    this.reportSlowerThan = 0\n    this.loggers = [constant.CONSOLE_APPENDER]\n    this.transports = ['polling', 'websocket']\n    this.forceJSONP = false\n    this.plugins = ['karma-*']\n    this.defaultClient = this.client = {\n      args: [],\n      useIframe: true,\n      runInParent: false,\n      captureConsole: true,\n      clearContext: true,\n      allowedReturnUrlPatterns: ['^https?://']\n    }\n    this.browserDisconnectTimeout = 2000\n    this.browserDisconnectTolerance = 0\n    this.browserNoActivityTimeout = 30000\n    this.processKillTimeout = 2000\n    this.concurrency = Infinity\n    this.failOnEmptyTestSuite = true\n    this.retryLimit = 2\n    this.detached = false\n    this.crossOriginAttribute = true\n    this.browserSocketTimeout = 20000\n  }\n\n  set (newConfig) {\n    _.mergeWith(this, newConfig, (obj, src) => {\n      // Overwrite arrays to keep consistent with #283\n      if (Array.isArray(src)) {\n        return src\n      }\n    })\n  }\n}\n\nconst CONFIG_SYNTAX_HELP = '  module.exports = function(config) {\\n' +\n  '    config.set({\\n' +\n  '      // your config\\n' +\n  '    });\\n' +\n  '  };\\n'\n\n/**\n * Retrieve a parsed and finalized Karma `Config` instance. This `karmaConfig`\n * object may be used to configure public API methods such a `Server`,\n * `runner.run`, and `stopper.stop`.\n *\n * @param {?string} [configFilePath=null]\n *     A string representing a file system path pointing to the config file\n *     whose default export is a function that will be used to set Karma\n *     configuration options. This function will be passed an instance of the\n *     `Config` class as its first argument. If this option is not provided,\n *     then only the options provided by the `cliOptions` argument will be\n *     set.\n * @param {Object} cliOptions\n *     An object whose values will take priority over options set in the\n *     config file. The config object passed to function exported by the\n *     config file will already have these options applied. Any changes the\n *     config file makes to these options will effectively be ignored in the\n *     final configuration.\n *\n *     `cliOptions` all the same options as the config file and is applied\n *     using the same `config.set()` method.\n * @param {Object} parseOptions\n * @param {boolean} [parseOptions.promiseConfig=false]\n *     When `true`, a promise that resolves to a `Config` object will be\n *     returned. This also allows the function exported by config files (if\n *     provided) to be asynchronous by returning a promise. Resolving this\n *     promise indicates that all async activity has completed. The resolution\n *     value itself is ignored, all configuration must be done with\n *     `config.set`.\n * @param {boolean} [parseOptions.throwErrors=false]\n *     When `true`, process exiting on critical failures will be disabled. In\n *     The error will be thrown as an exception. If\n *     `parseOptions.promiseConfig` is also `true`, then the error will\n *     instead be used as the promise's reject reason.\n * @returns {Config|Promise<Config>}\n */\nfunction parseConfig (configFilePath, cliOptions, parseOptions) {\n  const promiseConfig = parseOptions && parseOptions.promiseConfig === true\n  const throwErrors = parseOptions && parseOptions.throwErrors === true\n  const shouldSetupLoggerEarly = promiseConfig\n  if (shouldSetupLoggerEarly) {\n    // `setupFromConfig` provides defaults for `colors` and `logLevel`.\n    // `setup` provides defaults for `appenders`\n    // The first argument MUST BE an object\n    logger.setupFromConfig({})\n  }\n  function fail () {\n    log.error(...arguments)\n    if (throwErrors) {\n      const errorMessage = Array.from(arguments).join(' ')\n      const err = new Error(errorMessage)\n      if (promiseConfig) {\n        return Promise.reject(err)\n      }\n      throw err\n    } else {\n      const warningMessage =\n        'The `parseConfig()` function historically called `process.exit(1)`' +\n        ' when it failed. This behavior is now deprecated and function will' +\n        ' throw an error in the next major release. To suppress this warning' +\n        ' pass `throwErrors: true` as a third argument to opt-in into the new' +\n        ' behavior and adjust your code to respond to the exception' +\n        ' accordingly.' +\n        ' Example: `parseConfig(path, cliOptions, { throwErrors: true })`'\n      log.warn(warningMessage)\n      process.exit(1)\n    }\n  }\n\n  let configModule\n  if (configFilePath) {\n    try {\n      if (path.extname(configFilePath) === '.ts' && TYPE_SCRIPT_AVAILABLE) {\n        require('ts-node').register()\n      }\n      configModule = require(configFilePath)\n      if (typeof configModule === 'object' && typeof configModule.default !== 'undefined') {\n        configModule = configModule.default\n      }\n    } catch (e) {\n      const extension = path.extname(configFilePath)\n      if (extension === '.coffee' && !COFFEE_SCRIPT_AVAILABLE) {\n        log.error('You need to install CoffeeScript.\\n  npm install coffeescript --save-dev')\n      } else if (extension === '.ls' && !LIVE_SCRIPT_AVAILABLE) {\n        log.error('You need to install LiveScript.\\n  npm install LiveScript --save-dev')\n      } else if (extension === '.ts' && !TYPE_SCRIPT_AVAILABLE) {\n        log.error('You need to install TypeScript.\\n  npm install typescript ts-node --save-dev')\n      }\n      return fail('Error in config file!\\n  ' + e.stack || e)\n    }\n    if (!helper.isFunction(configModule)) {\n      return fail('Config file must export a function!\\n' + CONFIG_SYNTAX_HELP)\n    }\n  } else {\n    configModule = () => {} // if no config file path is passed, we define a dummy config module.\n  }\n\n  const config = new Config()\n\n  // save and reset hostname and listenAddress so we can detect if the user\n  // changed them\n  const defaultHostname = config.hostname\n  config.hostname = null\n  const defaultListenAddress = config.listenAddress\n  config.listenAddress = null\n\n  // add the user's configuration in\n  config.set(cliOptions)\n\n  let configModuleReturn\n  try {\n    configModuleReturn = configModule(config)\n  } catch (e) {\n    return fail('Error in config file!\\n', e)\n  }\n  function finalizeConfig (config) {\n    // merge the config from config file and cliOptions (precedence)\n    config.set(cliOptions)\n\n    // if the user changed listenAddress, but didn't set a hostname, warn them\n    if (config.hostname === null && config.listenAddress !== null) {\n      log.warn(`ListenAddress was set to ${config.listenAddress} but hostname was left as the default: ` +\n      `${defaultHostname}. If your browsers fail to connect, consider changing the hostname option.`)\n    }\n    // restore values that weren't overwritten by the user\n    if (config.hostname === null) {\n      config.hostname = defaultHostname\n    }\n    if (config.listenAddress === null) {\n      config.listenAddress = defaultListenAddress\n    }\n\n    // configure the logger as soon as we can\n    logger.setup(config.logLevel, config.colors, config.loggers)\n\n    log.debug(configFilePath ? `Loading config ${configFilePath}` : 'No config file specified.')\n\n    return normalizeConfig(config, configFilePath)\n  }\n\n  /**\n   * Return value is a function or (non-null) object that has a `then` method.\n   *\n   * @type {boolean}\n   * @see {@link https://promisesaplus.com/}\n   */\n  const returnIsThenable = (\n    (\n      (configModuleReturn != null && typeof configModuleReturn === 'object') ||\n      typeof configModuleReturn === 'function'\n    ) && typeof configModuleReturn.then === 'function'\n  )\n  if (returnIsThenable) {\n    if (promiseConfig !== true) {\n      const errorMessage =\n        'The `parseOptions.promiseConfig` option must be set to `true` to ' +\n        'enable promise return values from configuration files. ' +\n        'Example: `parseConfig(path, cliOptions, { promiseConfig: true })`'\n      return fail(errorMessage)\n    }\n    return configModuleReturn.then(\n      function onKarmaConfigModuleFulfilled (/* ignoredResolutionValue */) {\n        return finalizeConfig(config)\n      },\n      function onKarmaConfigModuleRejected (reason) {\n        return fail('Error in config file!\\n', reason)\n      }\n    )\n  } else {\n    if (promiseConfig) {\n      try {\n        return Promise.resolve(finalizeConfig(config))\n      } catch (exception) {\n        return Promise.reject(exception)\n      }\n    } else {\n      return finalizeConfig(config)\n    }\n  }\n}\n\n// PUBLIC API\nexports.parseConfig = parseConfig\nexports.Pattern = Pattern\nexports.createPatternObject = createPatternObject\nexports.Config = Config\n", "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nmodule.exports = {\n  VERSION: '%KARMA_VERSION%',\n  KARMA_URL_ROOT: '%KARMA_URL_ROOT%',\n  KARMA_PROXY_PATH: '%KARMA_PROXY_PATH%',\n  BROWSER_SOCKET_TIMEOUT: '%BROWSER_SOCKET_TIMEOUT%',\n  CONTEXT_URL: 'context.html'\n}\n\n},{}],2:[function(require,module,exports){\nvar stringify = require('../common/stringify')\nvar constant = require('./constants')\nvar util = require('../common/util')\n\nfunction Karma (updater, socket, iframe, opener, navigator, location, document) {\n  this.updater = updater\n  var startEmitted = false\n  var self = this\n  var queryParams = util.parseQueryParams(location.search)\n  var browserId = queryParams.id || util.generateId('manual-')\n  var displayName = queryParams.displayName\n  var returnUrl = queryParams['return_url' + ''] || null\n\n  var resultsBufferLimit = 50\n  var resultsBuffer = []\n\n  // This is a no-op if not running with a Trusted Types CSP policy, and\n  // lets tests declare that they trust the way that karma creates and handles\n  // URLs.\n  //\n  // More info about the proposed Trusted Types standard at\n  // https://github.com/WICG/trusted-types\n  var policy = {\n    createURL: function (s) {\n      return s\n    },\n    createScriptURL: function (s) {\n      return s\n    }\n  }\n  var trustedTypes = window.trustedTypes || window.TrustedTypes\n  if (trustedTypes) {\n    policy = trustedTypes.createPolicy('karma', policy)\n    if (!policy.createURL) {\n      // Install createURL for newer browsers. Only browsers that implement an\n      //     old version of the spec require createURL.\n      //     Should be safe to delete all reference to createURL by\n      //     February 2020.\n      // https://github.com/WICG/trusted-types/pull/204\n      policy.createURL = function (s) { return s }\n    }\n  }\n\n  // To start we will signal the server that we are not reconnecting. If the socket loses\n  // connection and was able to reconnect to the Karma server we will get a\n  // second 'connect' event. There we will pass 'true' and that will be passed to the\n  // Karma server then, so that Karma can differentiate between a socket client\n  // econnect and a full browser reconnect.\n  var socketReconnect = false\n\n  this.VERSION = constant.VERSION\n  this.config = {}\n\n  // Expose for testing purposes as there is no global socket.io\n  // registry anymore.\n  this.socket = socket\n\n  // Set up postMessage bindings for current window\n  // DEV: These are to allow windows in separate processes execute local tasks\n  //   Electron is one of these environments\n  if (window.addEventListener) {\n    window.addEventListener('message', function handleMessage (evt) {\n      // Resolve the origin of our message\n      var origin = evt.origin || evt.originalEvent.origin\n\n      // If the message isn't from our host, then reject it\n      if (origin !== window.location.origin) {\n        return\n      }\n\n      // Take action based on the message type\n      var method = evt.data.__karmaMethod\n      if (method) {\n        if (!self[method]) {\n          self.error('Received `postMessage` for \"' + method + '\" but the method doesn\\'t exist')\n          return\n        }\n        self[method].apply(self, evt.data.__karmaArguments)\n      }\n    }, false)\n  }\n\n  var childWindow = null\n  function navigateContextTo (url) {\n    if (self.config.useIframe === false) {\n      // run in new window\n      if (self.config.runInParent === false) {\n        // If there is a window already open, then close it\n        // DEV: In some environments (e.g. Electron), we don't have setter access for location\n        if (childWindow !== null && childWindow.closed !== true) {\n          // The onbeforeunload listener was added by context to catch\n          // unexpected navigations while running tests.\n          childWindow.onbeforeunload = undefined\n          childWindow.close()\n        }\n        childWindow = opener(url)\n      // run context on parent element (client_with_context)\n      // using window.__karma__.scriptUrls to get the html element strings and load them dynamically\n      } else if (url !== 'about:blank') {\n        var loadScript = function (idx) {\n          if (idx < window.__karma__.scriptUrls.length) {\n            var parser = new DOMParser()\n            // Revert escaped characters with special roles in HTML before parsing\n            var string = window.__karma__.scriptUrls[idx]\n              .replace(/\\\\x3C/g, '<')\n              .replace(/\\\\x3E/g, '>')\n            var doc = parser.parseFromString(string, 'text/html')\n            var ele = doc.head.firstChild || doc.body.firstChild\n            // script elements created by DomParser are marked as unexecutable,\n            // create a new script element manually and copy necessary properties\n            // so it is executable\n            if (ele.tagName && ele.tagName.toLowerCase() === 'script') {\n              var tmp = ele\n              ele = document.createElement('script')\n              ele.src = policy.createScriptURL(tmp.src)\n              ele.crossOrigin = tmp.crossOrigin\n            }\n            ele.onload = function () {\n              loadScript(idx + 1)\n            }\n            document.body.appendChild(ele)\n          } else {\n            window.__karma__.loaded()\n          }\n        }\n        loadScript(0)\n      }\n    // run in iframe\n    } else {\n      // The onbeforeunload listener was added by the context to catch\n      // unexpected navigations while running tests.\n      iframe.contentWindow.onbeforeunload = undefined\n      iframe.src = policy.createURL(url)\n    }\n  }\n\n  this.log = function (type, args) {\n    var values = []\n\n    for (var i = 0; i < args.length; i++) {\n      values.push(this.stringify(args[i], 3))\n    }\n\n    this.info({ log: values.join(', '), type: type })\n  }\n\n  this.stringify = stringify\n\n  function getLocation (url, lineno, colno) {\n    var location = ''\n\n    if (url !== undefined) {\n      location += url\n    }\n\n    if (lineno !== undefined) {\n      location += ':' + lineno\n    }\n\n    if (colno !== undefined) {\n      location += ':' + colno\n    }\n\n    return location\n  }\n\n  // error during js file loading (most likely syntax error)\n  // we are not going to execute at all. `window.onerror` callback.\n  this.error = function (messageOrEvent, source, lineno, colno, error) {\n    var message\n    if (typeof messageOrEvent === 'string') {\n      message = messageOrEvent\n\n      var location = getLocation(source, lineno, colno)\n      if (location !== '') {\n        message += '\\nat ' + location\n      }\n      if (error && error.stack) {\n        message += '\\n\\n' + error.stack\n      }\n    } else {\n      // create an object with the string representation of the message to\n      // ensure all its content is properly transferred to the console log\n      message = { message: messageOrEvent, str: messageOrEvent.toString() }\n    }\n\n    socket.emit('karma_error', message)\n    self.updater.updateTestStatus('karma_error ' + message)\n    this.complete()\n    return false\n  }\n\n  this.result = function (originalResult) {\n    var convertedResult = {}\n\n    // Convert all array-like objects to real arrays.\n    for (var propertyName in originalResult) {\n      if (Object.prototype.hasOwnProperty.call(originalResult, propertyName)) {\n        var propertyValue = originalResult[propertyName]\n\n        if (Object.prototype.toString.call(propertyValue) === '[object Array]') {\n          convertedResult[propertyName] = Array.prototype.slice.call(propertyValue)\n        } else {\n          convertedResult[propertyName] = propertyValue\n        }\n      }\n    }\n\n    if (!startEmitted) {\n      socket.emit('start', { total: null })\n      self.updater.updateTestStatus('start')\n      startEmitted = true\n    }\n\n    if (resultsBufferLimit === 1) {\n      self.updater.updateTestStatus('result')\n      return socket.emit('result', convertedResult)\n    }\n\n    resultsBuffer.push(convertedResult)\n\n    if (resultsBuffer.length === resultsBufferLimit) {\n      socket.emit('result', resultsBuffer)\n      self.updater.updateTestStatus('result')\n      resultsBuffer = []\n    }\n  }\n\n  this.complete = function (result) {\n    if (resultsBuffer.length) {\n      socket.emit('result', resultsBuffer)\n      resultsBuffer = []\n    }\n\n    socket.emit('complete', result || {})\n    if (this.config.clearContext) {\n      navigateContextTo('about:blank')\n    } else {\n      self.updater.updateTestStatus('complete')\n    }\n    if (returnUrl) {\n      var isReturnUrlAllowed = false\n      for (var i = 0; i < this.config.allowedReturnUrlPatterns.length; i++) {\n        var allowedReturnUrlPattern = new RegExp(this.config.allowedReturnUrlPatterns[i])\n        if (allowedReturnUrlPattern.test(returnUrl)) {\n          isReturnUrlAllowed = true\n          break\n        }\n      }\n      if (!isReturnUrlAllowed) {\n        throw new Error(\n          'Security: Navigation to '.concat(\n            returnUrl,\n            ' was blocked to prevent malicious exploits.'\n          )\n        )\n      }\n      location.href = returnUrl\n    }\n  }\n\n  this.info = function (info) {\n    // TODO(vojta): introduce special API for this\n    if (!startEmitted && util.isDefined(info.total)) {\n      socket.emit('start', info)\n      startEmitted = true\n    } else {\n      socket.emit('info', info)\n    }\n  }\n\n  socket.on('execute', function (cfg) {\n    self.updater.updateTestStatus('execute')\n    // reset startEmitted and reload the iframe\n    startEmitted = false\n    self.config = cfg\n\n    navigateContextTo(constant.CONTEXT_URL)\n\n    if (self.config.clientDisplayNone) {\n      [].forEach.call(document.querySelectorAll('#banner, #browsers'), function (el) {\n        el.style.display = 'none'\n      })\n    }\n\n    // clear the console before run\n    // works only on FF (Safari, Chrome do not allow to clear console from js source)\n    if (window.console && window.console.clear) {\n      window.console.clear()\n    }\n  })\n  socket.on('stop', function () {\n    this.complete()\n  }.bind(this))\n\n  // Report the browser name and Id. Note that this event can also fire if the connection has\n  // been temporarily lost, but the socket reconnected automatically. Read more in the docs:\n  // https://socket.io/docs/client-api/#Event-%E2%80%98connect%E2%80%99\n  socket.on('connect', function () {\n    socket.io.engine.on('upgrade', function () {\n      resultsBufferLimit = 1\n      // Flush any results which were buffered before the upgrade to WebSocket protocol.\n      if (resultsBuffer.length > 0) {\n        socket.emit('result', resultsBuffer)\n        resultsBuffer = []\n      }\n    })\n    var info = {\n      name: navigator.userAgent,\n      id: browserId,\n      isSocketReconnect: socketReconnect\n    }\n    if (displayName) {\n      info.displayName = displayName\n    }\n    socket.emit('register', info)\n    socketReconnect = true\n  })\n}\n\nmodule.exports = Karma\n\n},{\"../common/stringify\":5,\"../common/util\":6,\"./constants\":1}],3:[function(require,module,exports){\n/* global io */\n/* eslint-disable no-new */\n\nvar Karma = require('./karma')\nvar StatusUpdater = require('./updater')\nvar util = require('../common/util')\nvar constants = require('./constants')\n\nvar KARMA_URL_ROOT = constants.KARMA_URL_ROOT\nvar KARMA_PROXY_PATH = constants.KARMA_PROXY_PATH\nvar BROWSER_SOCKET_TIMEOUT = constants.BROWSER_SOCKET_TIMEOUT\n\n// Connect to the server using socket.io https://socket.io/\nvar socket = io(location.host, {\n  reconnectionDelay: 500,\n  reconnectionDelayMax: Infinity,\n  timeout: BROWSER_SOCKET_TIMEOUT,\n  path: KARMA_PROXY_PATH + KARMA_URL_ROOT.substr(1) + 'socket.io',\n  'sync disconnect on unload': true,\n  useNativeTimers: true\n})\n\n// instantiate the updater of the view\nvar updater = new StatusUpdater(socket, util.elm('title'), util.elm('banner'), util.elm('browsers'))\nwindow.karma = new Karma(updater, socket, util.elm('context'), window.open,\n  window.navigator, window.location, window.document)\n\n},{\"../common/util\":6,\"./constants\":1,\"./karma\":2,\"./updater\":4}],4:[function(require,module,exports){\nvar VERSION = require('./constants').VERSION\n\nfunction StatusUpdater (socket, titleElement, bannerElement, browsersElement) {\n  function updateBrowsersInfo (browsers) {\n    if (!browsersElement) {\n      return\n    }\n    var status\n\n    // clear browsersElement\n    while (browsersElement.firstChild) {\n      browsersElement.removeChild(browsersElement.firstChild)\n    }\n\n    for (var i = 0; i < browsers.length; i++) {\n      status = browsers[i].isConnected ? 'idle' : 'executing'\n      var li = document.createElement('li')\n      li.setAttribute('class', status)\n      li.textContent = browsers[i].name + ' is ' + status\n      browsersElement.appendChild(li)\n    }\n  }\n\n  var connectionText = 'never-connected'\n  var testText = 'loading'\n  var pingText = ''\n\n  function updateBanner () {\n    if (!titleElement || !bannerElement) {\n      return\n    }\n    titleElement.textContent = 'Karma v ' + VERSION + ' - ' + connectionText + '; test: ' + testText + '; ' + pingText\n    bannerElement.className = connectionText === 'connected' ? 'online' : 'offline'\n  }\n\n  function updateConnectionStatus (connectionStatus) {\n    connectionText = connectionStatus || connectionText\n    updateBanner()\n  }\n  function updateTestStatus (testStatus) {\n    testText = testStatus || testText\n    updateBanner()\n  }\n  function updatePingStatus (pingStatus) {\n    pingText = pingStatus || pingText\n    updateBanner()\n  }\n\n  socket.on('connect', function () {\n    updateConnectionStatus('connected')\n  })\n  socket.on('disconnect', function () {\n    updateConnectionStatus('disconnected')\n  })\n  socket.on('reconnecting', function (sec) {\n    updateConnectionStatus('reconnecting in ' + sec + ' seconds')\n  })\n  socket.on('reconnect', function () {\n    updateConnectionStatus('reconnected')\n  })\n  socket.on('reconnect_failed', function () {\n    updateConnectionStatus('reconnect_failed')\n  })\n\n  socket.on('info', updateBrowsersInfo)\n  socket.on('disconnect', function () {\n    updateBrowsersInfo([])\n  })\n\n  socket.on('ping', function () {\n    updatePingStatus('ping...')\n  })\n  socket.on('pong', function (latency) {\n    updatePingStatus('ping ' + latency + 'ms')\n  })\n\n  return { updateTestStatus: updateTestStatus }\n}\n\nmodule.exports = StatusUpdater\n\n},{\"./constants\":1}],5:[function(require,module,exports){\nvar serialize = null\ntry {\n  serialize = require('dom-serialize')\n} catch (e) {\n  // Ignore failure on IE8\n}\n\nvar instanceOf = require('./util').instanceOf\n\nfunction isNode (obj) {\n  return (obj.tagName || obj.nodeName) && obj.nodeType\n}\n\nfunction stringify (obj, depth) {\n  if (depth === 0) {\n    return '...'\n  }\n\n  if (obj === null) {\n    return 'null'\n  }\n\n  switch (typeof obj) {\n    case 'symbol':\n      return obj.toString()\n    case 'string':\n      return \"'\" + obj + \"'\"\n    case 'undefined':\n      return 'undefined'\n    case 'function':\n      try {\n        // function abc(a, b, c) { /* code goes here */ }\n        //   -> function abc(a, b, c) { ... }\n        return obj.toString().replace(/\\{[\\s\\S]*\\}/, '{ ... }')\n      } catch (err) {\n        if (err instanceof TypeError) {\n          // Support older browsers\n          return 'function ' + (obj.name || '') + '() { ... }'\n        } else {\n          throw err\n        }\n      }\n    case 'boolean':\n      return obj ? 'true' : 'false'\n    case 'object':\n      var strs = []\n      if (instanceOf(obj, 'Array')) {\n        strs.push('[')\n        for (var i = 0, ii = obj.length; i < ii; i++) {\n          if (i) {\n            strs.push(', ')\n          }\n          strs.push(stringify(obj[i], depth - 1))\n        }\n        strs.push(']')\n      } else if (instanceOf(obj, 'Date')) {\n        return obj.toString()\n      } else if (instanceOf(obj, 'Text')) {\n        return obj.nodeValue\n      } else if (instanceOf(obj, 'Comment')) {\n        return '<!--' + obj.nodeValue + '-->'\n      } else if (obj.outerHTML) {\n        return obj.outerHTML\n      } else if (isNode(obj)) {\n        if (serialize) {\n          return serialize(obj)\n        } else {\n          return 'Skipping stringify, no support for dom-serialize'\n        }\n      } else if (instanceOf(obj, 'Error')) {\n        return obj.toString() + '\\n' + obj.stack\n      } else {\n        var constructor = 'Object'\n        if (obj.constructor && typeof obj.constructor === 'function') {\n          constructor = obj.constructor.name\n        }\n\n        strs.push(constructor)\n        strs.push('{')\n        var first = true\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            if (first) {\n              first = false\n            } else {\n              strs.push(', ')\n            }\n\n            strs.push(key + ': ' + stringify(obj[key], depth - 1))\n          }\n        }\n        strs.push('}')\n      }\n      return strs.join('')\n    default:\n      return obj\n  }\n}\n\nmodule.exports = stringify\n\n},{\"./util\":6,\"dom-serialize\":8}],6:[function(require,module,exports){\nexports.instanceOf = function (value, constructorName) {\n  return Object.prototype.toString.apply(value) === '[object ' + constructorName + ']'\n}\n\nexports.elm = function (id) {\n  return document.getElementById(id)\n}\n\nexports.generateId = function (prefix) {\n  return prefix + Math.floor(Math.random() * 10000)\n}\n\nexports.isUndefined = function (value) {\n  return typeof value === 'undefined'\n}\n\nexports.isDefined = function (value) {\n  return !exports.isUndefined(value)\n}\n\nexports.parseQueryParams = function (locationSearch) {\n  var params = {}\n  var pairs = locationSearch.substr(1).split('&')\n  var keyValue\n\n  for (var i = 0; i < pairs.length; i++) {\n    keyValue = pairs[i].split('=')\n    params[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1])\n  }\n\n  return params\n}\n\n},{}],7:[function(require,module,exports){\n(function (global){\n\nvar NativeCustomEvent = global.CustomEvent;\n\nfunction useNative () {\n  try {\n    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });\n    return  'cat' === p.type && 'bar' === p.detail.foo;\n  } catch (e) {\n  }\n  return false;\n}\n\n/**\n * Cross-browser `CustomEvent` constructor.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent\n *\n * @public\n */\n\nmodule.exports = useNative() ? NativeCustomEvent :\n\n// IE >= 9\n'undefined' !== typeof document && 'function' === typeof document.createEvent ? function CustomEvent (type, params) {\n  var e = document.createEvent('CustomEvent');\n  if (params) {\n    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);\n  } else {\n    e.initCustomEvent(type, false, false, void 0);\n  }\n  return e;\n} :\n\n// IE <= 8\nfunction CustomEvent (type, params) {\n  var e = document.createEventObject();\n  e.type = type;\n  if (params) {\n    e.bubbles = Boolean(params.bubbles);\n    e.cancelable = Boolean(params.cancelable);\n    e.detail = params.detail;\n  } else {\n    e.bubbles = false;\n    e.cancelable = false;\n    e.detail = void 0;\n  }\n  return e;\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],8:[function(require,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar extend = require('extend');\nvar encode = require('ent/encode');\nvar CustomEvent = require('custom-event');\nvar voidElements = require('void-elements');\n\n/**\n * Module exports.\n */\n\nexports = module.exports = serialize;\nexports.serializeElement = serializeElement;\nexports.serializeAttribute = serializeAttribute;\nexports.serializeText = serializeText;\nexports.serializeComment = serializeComment;\nexports.serializeDocument = serializeDocument;\nexports.serializeDoctype = serializeDoctype;\nexports.serializeDocumentFragment = serializeDocumentFragment;\nexports.serializeNodeList = serializeNodeList;\n\n/**\n * Serializes any DOM node. Returns a string.\n *\n * @param {Node} node - DOM Node to serialize\n * @param {String} [context] - optional arbitrary \"context\" string to use (useful for event listeners)\n * @param {Function} [fn] - optional callback function to use in the \"serialize\" event for this call\n * @param {EventTarget} [eventTarget] - optional EventTarget instance to emit the \"serialize\" event on (defaults to `node`)\n * return {String}\n * @public\n */\n\nfunction serialize (node, context, fn, eventTarget) {\n  if (!node) return '';\n  if ('function' === typeof context) {\n    fn = context;\n    context = null;\n  }\n  if (!context) context = null;\n\n  var rtn;\n  var nodeType = node.nodeType;\n\n  if (!nodeType && 'number' === typeof node.length) {\n    // assume it's a NodeList or Array of Nodes\n    rtn = exports.serializeNodeList(node, context, fn);\n  } else {\n\n    if ('function' === typeof fn) {\n      // one-time \"serialize\" event listener\n      node.addEventListener('serialize', fn, false);\n    }\n\n    // emit a custom \"serialize\" event on `node`, in case there\n    // are event listeners for custom serialization of this node\n    var e = new CustomEvent('serialize', {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        serialize: null,\n        context: context\n      }\n    });\n\n    e.serializeTarget = node;\n\n    var target = eventTarget || node;\n    var cancelled = !target.dispatchEvent(e);\n\n    // `e.detail.serialize` can be set to a:\n    //   String - returned directly\n    //   Node   - goes through serializer logic instead of `node`\n    //   Anything else - get Stringified first, and then returned directly\n    var s = e.detail.serialize;\n    if (s != null) {\n      if ('string' === typeof s) {\n        rtn = s;\n      } else if ('number' === typeof s.nodeType) {\n        // make it go through the serialization logic\n        rtn = serialize(s, context, null, target);\n      } else {\n        rtn = String(s);\n      }\n    } else if (!cancelled) {\n      // default serialization logic\n      switch (nodeType) {\n        case 1 /* element */:\n          rtn = exports.serializeElement(node, context, eventTarget);\n          break;\n        case 2 /* attribute */:\n          rtn = exports.serializeAttribute(node);\n          break;\n        case 3 /* text */:\n          rtn = exports.serializeText(node);\n          break;\n        case 8 /* comment */:\n          rtn = exports.serializeComment(node);\n          break;\n        case 9 /* document */:\n          rtn = exports.serializeDocument(node, context, eventTarget);\n          break;\n        case 10 /* doctype */:\n          rtn = exports.serializeDoctype(node);\n          break;\n        case 11 /* document fragment */:\n          rtn = exports.serializeDocumentFragment(node, context, eventTarget);\n          break;\n      }\n    }\n\n    if ('function' === typeof fn) {\n      node.removeEventListener('serialize', fn, false);\n    }\n  }\n\n  return rtn || '';\n}\n\n/**\n * Serialize an Attribute node.\n */\n\nfunction serializeAttribute (node, opts) {\n  return node.name + '=\"' + encode(node.value, extend({\n    named: true\n  }, opts)) + '\"';\n}\n\n/**\n * Serialize a DOM element.\n */\n\nfunction serializeElement (node, context, eventTarget) {\n  var c, i, l;\n  var name = node.nodeName.toLowerCase();\n\n  // opening tag\n  var r = '<' + name;\n\n  // attributes\n  for (i = 0, c = node.attributes, l = c.length; i < l; i++) {\n    r += ' ' + exports.serializeAttribute(c[i]);\n  }\n\n  r += '>';\n\n  // child nodes\n  r += exports.serializeNodeList(node.childNodes, context, null, eventTarget);\n\n  // closing tag, only for non-void elements\n  if (!voidElements[name]) {\n    r += '</' + name + '>';\n  }\n\n  return r;\n}\n\n/**\n * Serialize a text node.\n */\n\nfunction serializeText (node, opts) {\n  return encode(node.nodeValue, extend({\n    named: true,\n    special: { '<': true, '>': true, '&': true }\n  }, opts));\n}\n\n/**\n * Serialize a comment node.\n */\n\nfunction serializeComment (node) {\n  return '<!--' + node.nodeValue + '-->';\n}\n\n/**\n * Serialize a Document node.\n */\n\nfunction serializeDocument (node, context, eventTarget) {\n  return exports.serializeNodeList(node.childNodes, context, null, eventTarget);\n}\n\n/**\n * Serialize a DOCTYPE node.\n * See: http://stackoverflow.com/a/10162353\n */\n\nfunction serializeDoctype (node) {\n  var r = '<!DOCTYPE ' + node.name;\n\n  if (node.publicId) {\n    r += ' PUBLIC \"' + node.publicId + '\"';\n  }\n\n  if (!node.publicId && node.systemId) {\n    r += ' SYSTEM';\n  }\n\n  if (node.systemId) {\n    r += ' \"' + node.systemId + '\"';\n  }\n\n  r += '>';\n  return r;\n}\n\n/**\n * Serialize a DocumentFragment instance.\n */\n\nfunction serializeDocumentFragment (node, context, eventTarget) {\n  return exports.serializeNodeList(node.childNodes, context, null, eventTarget);\n}\n\n/**\n * Serialize a NodeList/Array of nodes.\n */\n\nfunction serializeNodeList (list, context, fn, eventTarget) {\n  var r = '';\n  for (var i = 0, l = list.length; i < l; i++) {\n    r += serialize(list[i], context, fn, eventTarget);\n  }\n  return r;\n}\n\n},{\"custom-event\":7,\"ent/encode\":9,\"extend\":11,\"void-elements\":13}],9:[function(require,module,exports){\nvar punycode = require('punycode');\nvar revEntities = require('./reversed.json');\n\nmodule.exports = encode;\n\nfunction encode (str, opts) {\n    if (typeof str !== 'string') {\n        throw new TypeError('Expected a String');\n    }\n    if (!opts) opts = {};\n\n    var numeric = true;\n    if (opts.named) numeric = false;\n    if (opts.numeric !== undefined) numeric = opts.numeric;\n\n    var special = opts.special || {\n        '\"': true, \"'\": true,\n        '<': true, '>': true,\n        '&': true\n    };\n\n    var codePoints = punycode.ucs2.decode(str);\n    var chars = [];\n    for (var i = 0; i < codePoints.length; i++) {\n        var cc = codePoints[i];\n        var c = punycode.ucs2.encode([ cc ]);\n        var e = revEntities[cc];\n        if (e && (cc >= 127 || special[c]) && !numeric) {\n            chars.push('&' + (/;$/.test(e) ? e : e + ';'));\n        }\n        else if (cc < 32 || cc >= 127 || special[c]) {\n            chars.push('&#' + cc + ';');\n        }\n        else {\n            chars.push(c);\n        }\n    }\n    return chars.join('');\n}\n\n},{\"./reversed.json\":10,\"punycode\":12}],10:[function(require,module,exports){\nmodule.exports={\n    \"9\": \"Tab;\",\n    \"10\": \"NewLine;\",\n    \"33\": \"excl;\",\n    \"34\": \"quot;\",\n    \"35\": \"num;\",\n    \"36\": \"dollar;\",\n    \"37\": \"percnt;\",\n    \"38\": \"amp;\",\n    \"39\": \"apos;\",\n    \"40\": \"lpar;\",\n    \"41\": \"rpar;\",\n    \"42\": \"midast;\",\n    \"43\": \"plus;\",\n    \"44\": \"comma;\",\n    \"46\": \"period;\",\n    \"47\": \"sol;\",\n    \"58\": \"colon;\",\n    \"59\": \"semi;\",\n    \"60\": \"lt;\",\n    \"61\": \"equals;\",\n    \"62\": \"gt;\",\n    \"63\": \"quest;\",\n    \"64\": \"commat;\",\n    \"91\": \"lsqb;\",\n    \"92\": \"bsol;\",\n    \"93\": \"rsqb;\",\n    \"94\": \"Hat;\",\n    \"95\": \"UnderBar;\",\n    \"96\": \"grave;\",\n    \"123\": \"lcub;\",\n    \"124\": \"VerticalLine;\",\n    \"125\": \"rcub;\",\n    \"160\": \"NonBreakingSpace;\",\n    \"161\": \"iexcl;\",\n    \"162\": \"cent;\",\n    \"163\": \"pound;\",\n    \"164\": \"curren;\",\n    \"165\": \"yen;\",\n    \"166\": \"brvbar;\",\n    \"167\": \"sect;\",\n    \"168\": \"uml;\",\n    \"169\": \"copy;\",\n    \"170\": \"ordf;\",\n    \"171\": \"laquo;\",\n    \"172\": \"not;\",\n    \"173\": \"shy;\",\n    \"174\": \"reg;\",\n    \"175\": \"strns;\",\n    \"176\": \"deg;\",\n    \"177\": \"pm;\",\n    \"178\": \"sup2;\",\n    \"179\": \"sup3;\",\n    \"180\": \"DiacriticalAcute;\",\n    \"181\": \"micro;\",\n    \"182\": \"para;\",\n    \"183\": \"middot;\",\n    \"184\": \"Cedilla;\",\n    \"185\": \"sup1;\",\n    \"186\": \"ordm;\",\n    \"187\": \"raquo;\",\n    \"188\": \"frac14;\",\n    \"189\": \"half;\",\n    \"190\": \"frac34;\",\n    \"191\": \"iquest;\",\n    \"192\": \"Agrave;\",\n    \"193\": \"Aacute;\",\n    \"194\": \"Acirc;\",\n    \"195\": \"Atilde;\",\n    \"196\": \"Auml;\",\n    \"197\": \"Aring;\",\n    \"198\": \"AElig;\",\n    \"199\": \"Ccedil;\",\n    \"200\": \"Egrave;\",\n    \"201\": \"Eacute;\",\n    \"202\": \"Ecirc;\",\n    \"203\": \"Euml;\",\n    \"204\": \"Igrave;\",\n    \"205\": \"Iacute;\",\n    \"206\": \"Icirc;\",\n    \"207\": \"Iuml;\",\n    \"208\": \"ETH;\",\n    \"209\": \"Ntilde;\",\n    \"210\": \"Ograve;\",\n    \"211\": \"Oacute;\",\n    \"212\": \"Ocirc;\",\n    \"213\": \"Otilde;\",\n    \"214\": \"Ouml;\",\n    \"215\": \"times;\",\n    \"216\": \"Oslash;\",\n    \"217\": \"Ugrave;\",\n    \"218\": \"Uacute;\",\n    \"219\": \"Ucirc;\",\n    \"220\": \"Uuml;\",\n    \"221\": \"Yacute;\",\n    \"222\": \"THORN;\",\n    \"223\": \"szlig;\",\n    \"224\": \"agrave;\",\n    \"225\": \"aacute;\",\n    \"226\": \"acirc;\",\n    \"227\": \"atilde;\",\n    \"228\": \"auml;\",\n    \"229\": \"aring;\",\n    \"230\": \"aelig;\",\n    \"231\": \"ccedil;\",\n    \"232\": \"egrave;\",\n    \"233\": \"eacute;\",\n    \"234\": \"ecirc;\",\n    \"235\": \"euml;\",\n    \"236\": \"igrave;\",\n    \"237\": \"iacute;\",\n    \"238\": \"icirc;\",\n    \"239\": \"iuml;\",\n    \"240\": \"eth;\",\n    \"241\": \"ntilde;\",\n    \"242\": \"ograve;\",\n    \"243\": \"oacute;\",\n    \"244\": \"ocirc;\",\n    \"245\": \"otilde;\",\n    \"246\": \"ouml;\",\n    \"247\": \"divide;\",\n    \"248\": \"oslash;\",\n    \"249\": \"ugrave;\",\n    \"250\": \"uacute;\",\n    \"251\": \"ucirc;\",\n    \"252\": \"uuml;\",\n    \"253\": \"yacute;\",\n    \"254\": \"thorn;\",\n    \"255\": \"yuml;\",\n    \"256\": \"Amacr;\",\n    \"257\": \"amacr;\",\n    \"258\": \"Abreve;\",\n    \"259\": \"abreve;\",\n    \"260\": \"Aogon;\",\n    \"261\": \"aogon;\",\n    \"262\": \"Cacute;\",\n    \"263\": \"cacute;\",\n    \"264\": \"Ccirc;\",\n    \"265\": \"ccirc;\",\n    \"266\": \"Cdot;\",\n    \"267\": \"cdot;\",\n    \"268\": \"Ccaron;\",\n    \"269\": \"ccaron;\",\n    \"270\": \"Dcaron;\",\n    \"271\": \"dcaron;\",\n    \"272\": \"Dstrok;\",\n    \"273\": \"dstrok;\",\n    \"274\": \"Emacr;\",\n    \"275\": \"emacr;\",\n    \"278\": \"Edot;\",\n    \"279\": \"edot;\",\n    \"280\": \"Eogon;\",\n    \"281\": \"eogon;\",\n    \"282\": \"Ecaron;\",\n    \"283\": \"ecaron;\",\n    \"284\": \"Gcirc;\",\n    \"285\": \"gcirc;\",\n    \"286\": \"Gbreve;\",\n    \"287\": \"gbreve;\",\n    \"288\": \"Gdot;\",\n    \"289\": \"gdot;\",\n    \"290\": \"Gcedil;\",\n    \"292\": \"Hcirc;\",\n    \"293\": \"hcirc;\",\n    \"294\": \"Hstrok;\",\n    \"295\": \"hstrok;\",\n    \"296\": \"Itilde;\",\n    \"297\": \"itilde;\",\n    \"298\": \"Imacr;\",\n    \"299\": \"imacr;\",\n    \"302\": \"Iogon;\",\n    \"303\": \"iogon;\",\n    \"304\": \"Idot;\",\n    \"305\": \"inodot;\",\n    \"306\": \"IJlig;\",\n    \"307\": \"ijlig;\",\n    \"308\": \"Jcirc;\",\n    \"309\": \"jcirc;\",\n    \"310\": \"Kcedil;\",\n    \"311\": \"kcedil;\",\n    \"312\": \"kgreen;\",\n    \"313\": \"Lacute;\",\n    \"314\": \"lacute;\",\n    \"315\": \"Lcedil;\",\n    \"316\": \"lcedil;\",\n    \"317\": \"Lcaron;\",\n    \"318\": \"lcaron;\",\n    \"319\": \"Lmidot;\",\n    \"320\": \"lmidot;\",\n    \"321\": \"Lstrok;\",\n    \"322\": \"lstrok;\",\n    \"323\": \"Nacute;\",\n    \"324\": \"nacute;\",\n    \"325\": \"Ncedil;\",\n    \"326\": \"ncedil;\",\n    \"327\": \"Ncaron;\",\n    \"328\": \"ncaron;\",\n    \"329\": \"napos;\",\n    \"330\": \"ENG;\",\n    \"331\": \"eng;\",\n    \"332\": \"Omacr;\",\n    \"333\": \"omacr;\",\n    \"336\": \"Odblac;\",\n    \"337\": \"odblac;\",\n    \"338\": \"OElig;\",\n    \"339\": \"oelig;\",\n    \"340\": \"Racute;\",\n    \"341\": \"racute;\",\n    \"342\": \"Rcedil;\",\n    \"343\": \"rcedil;\",\n    \"344\": \"Rcaron;\",\n    \"345\": \"rcaron;\",\n    \"346\": \"Sacute;\",\n    \"347\": \"sacute;\",\n    \"348\": \"Scirc;\",\n    \"349\": \"scirc;\",\n    \"350\": \"Scedil;\",\n    \"351\": \"scedil;\",\n    \"352\": \"Scaron;\",\n    \"353\": \"scaron;\",\n    \"354\": \"Tcedil;\",\n    \"355\": \"tcedil;\",\n    \"356\": \"Tcaron;\",\n    \"357\": \"tcaron;\",\n    \"358\": \"Tstrok;\",\n    \"359\": \"tstrok;\",\n    \"360\": \"Utilde;\",\n    \"361\": \"utilde;\",\n    \"362\": \"Umacr;\",\n    \"363\": \"umacr;\",\n    \"364\": \"Ubreve;\",\n    \"365\": \"ubreve;\",\n    \"366\": \"Uring;\",\n    \"367\": \"uring;\",\n    \"368\": \"Udblac;\",\n    \"369\": \"udblac;\",\n    \"370\": \"Uogon;\",\n    \"371\": \"uogon;\",\n    \"372\": \"Wcirc;\",\n    \"373\": \"wcirc;\",\n    \"374\": \"Ycirc;\",\n    \"375\": \"ycirc;\",\n    \"376\": \"Yuml;\",\n    \"377\": \"Zacute;\",\n    \"378\": \"zacute;\",\n    \"379\": \"Zdot;\",\n    \"380\": \"zdot;\",\n    \"381\": \"Zcaron;\",\n    \"382\": \"zcaron;\",\n    \"402\": \"fnof;\",\n    \"437\": \"imped;\",\n    \"501\": \"gacute;\",\n    \"567\": \"jmath;\",\n    \"710\": \"circ;\",\n    \"711\": \"Hacek;\",\n    \"728\": \"breve;\",\n    \"729\": \"dot;\",\n    \"730\": \"ring;\",\n    \"731\": \"ogon;\",\n    \"732\": \"tilde;\",\n    \"733\": \"DiacriticalDoubleAcute;\",\n    \"785\": \"DownBreve;\",\n    \"913\": \"Alpha;\",\n    \"914\": \"Beta;\",\n    \"915\": \"Gamma;\",\n    \"916\": \"Delta;\",\n    \"917\": \"Epsilon;\",\n    \"918\": \"Zeta;\",\n    \"919\": \"Eta;\",\n    \"920\": \"Theta;\",\n    \"921\": \"Iota;\",\n    \"922\": \"Kappa;\",\n    \"923\": \"Lambda;\",\n    \"924\": \"Mu;\",\n    \"925\": \"Nu;\",\n    \"926\": \"Xi;\",\n    \"927\": \"Omicron;\",\n    \"928\": \"Pi;\",\n    \"929\": \"Rho;\",\n    \"931\": \"Sigma;\",\n    \"932\": \"Tau;\",\n    \"933\": \"Upsilon;\",\n    \"934\": \"Phi;\",\n    \"935\": \"Chi;\",\n    \"936\": \"Psi;\",\n    \"937\": \"Omega;\",\n    \"945\": \"alpha;\",\n    \"946\": \"beta;\",\n    \"947\": \"gamma;\",\n    \"948\": \"delta;\",\n    \"949\": \"epsilon;\",\n    \"950\": \"zeta;\",\n    \"951\": \"eta;\",\n    \"952\": \"theta;\",\n    \"953\": \"iota;\",\n    \"954\": \"kappa;\",\n    \"955\": \"lambda;\",\n    \"956\": \"mu;\",\n    \"957\": \"nu;\",\n    \"958\": \"xi;\",\n    \"959\": \"omicron;\",\n    \"960\": \"pi;\",\n    \"961\": \"rho;\",\n    \"962\": \"varsigma;\",\n    \"963\": \"sigma;\",\n    \"964\": \"tau;\",\n    \"965\": \"upsilon;\",\n    \"966\": \"phi;\",\n    \"967\": \"chi;\",\n    \"968\": \"psi;\",\n    \"969\": \"omega;\",\n    \"977\": \"vartheta;\",\n    \"978\": \"upsih;\",\n    \"981\": \"varphi;\",\n    \"982\": \"varpi;\",\n    \"988\": \"Gammad;\",\n    \"989\": \"gammad;\",\n    \"1008\": \"varkappa;\",\n    \"1009\": \"varrho;\",\n    \"1013\": \"varepsilon;\",\n    \"1014\": \"bepsi;\",\n    \"1025\": \"IOcy;\",\n    \"1026\": \"DJcy;\",\n    \"1027\": \"GJcy;\",\n    \"1028\": \"Jukcy;\",\n    \"1029\": \"DScy;\",\n    \"1030\": \"Iukcy;\",\n    \"1031\": \"YIcy;\",\n    \"1032\": \"Jsercy;\",\n    \"1033\": \"LJcy;\",\n    \"1034\": \"NJcy;\",\n    \"1035\": \"TSHcy;\",\n    \"1036\": \"KJcy;\",\n    \"1038\": \"Ubrcy;\",\n    \"1039\": \"DZcy;\",\n    \"1040\": \"Acy;\",\n    \"1041\": \"Bcy;\",\n    \"1042\": \"Vcy;\",\n    \"1043\": \"Gcy;\",\n    \"1044\": \"Dcy;\",\n    \"1045\": \"IEcy;\",\n    \"1046\": \"ZHcy;\",\n    \"1047\": \"Zcy;\",\n    \"1048\": \"Icy;\",\n    \"1049\": \"Jcy;\",\n    \"1050\": \"Kcy;\",\n    \"1051\": \"Lcy;\",\n    \"1052\": \"Mcy;\",\n    \"1053\": \"Ncy;\",\n    \"1054\": \"Ocy;\",\n    \"1055\": \"Pcy;\",\n    \"1056\": \"Rcy;\",\n    \"1057\": \"Scy;\",\n    \"1058\": \"Tcy;\",\n    \"1059\": \"Ucy;\",\n    \"1060\": \"Fcy;\",\n    \"1061\": \"KHcy;\",\n    \"1062\": \"TScy;\",\n    \"1063\": \"CHcy;\",\n    \"1064\": \"SHcy;\",\n    \"1065\": \"SHCHcy;\",\n    \"1066\": \"HARDcy;\",\n    \"1067\": \"Ycy;\",\n    \"1068\": \"SOFTcy;\",\n    \"1069\": \"Ecy;\",\n    \"1070\": \"YUcy;\",\n    \"1071\": \"YAcy;\",\n    \"1072\": \"acy;\",\n    \"1073\": \"bcy;\",\n    \"1074\": \"vcy;\",\n    \"1075\": \"gcy;\",\n    \"1076\": \"dcy;\",\n    \"1077\": \"iecy;\",\n    \"1078\": \"zhcy;\",\n    \"1079\": \"zcy;\",\n    \"1080\": \"icy;\",\n    \"1081\": \"jcy;\",\n    \"1082\": \"kcy;\",\n    \"1083\": \"lcy;\",\n    \"1084\": \"mcy;\",\n    \"1085\": \"ncy;\",\n    \"1086\": \"ocy;\",\n    \"1087\": \"pcy;\",\n    \"1088\": \"rcy;\",\n    \"1089\": \"scy;\",\n    \"1090\": \"tcy;\",\n    \"1091\": \"ucy;\",\n    \"1092\": \"fcy;\",\n    \"1093\": \"khcy;\",\n    \"1094\": \"tscy;\",\n    \"1095\": \"chcy;\",\n    \"1096\": \"shcy;\",\n    \"1097\": \"shchcy;\",\n    \"1098\": \"hardcy;\",\n    \"1099\": \"ycy;\",\n    \"1100\": \"softcy;\",\n    \"1101\": \"ecy;\",\n    \"1102\": \"yucy;\",\n    \"1103\": \"yacy;\",\n    \"1105\": \"iocy;\",\n    \"1106\": \"djcy;\",\n    \"1107\": \"gjcy;\",\n    \"1108\": \"jukcy;\",\n    \"1109\": \"dscy;\",\n    \"1110\": \"iukcy;\",\n    \"1111\": \"yicy;\",\n    \"1112\": \"jsercy;\",\n    \"1113\": \"ljcy;\",\n    \"1114\": \"njcy;\",\n    \"1115\": \"tshcy;\",\n    \"1116\": \"kjcy;\",\n    \"1118\": \"ubrcy;\",\n    \"1119\": \"dzcy;\",\n    \"8194\": \"ensp;\",\n    \"8195\": \"emsp;\",\n    \"8196\": \"emsp13;\",\n    \"8197\": \"emsp14;\",\n    \"8199\": \"numsp;\",\n    \"8200\": \"puncsp;\",\n    \"8201\": \"ThinSpace;\",\n    \"8202\": \"VeryThinSpace;\",\n    \"8203\": \"ZeroWidthSpace;\",\n    \"8204\": \"zwnj;\",\n    \"8205\": \"zwj;\",\n    \"8206\": \"lrm;\",\n    \"8207\": \"rlm;\",\n    \"8208\": \"hyphen;\",\n    \"8211\": \"ndash;\",\n    \"8212\": \"mdash;\",\n    \"8213\": \"horbar;\",\n    \"8214\": \"Vert;\",\n    \"8216\": \"OpenCurlyQuote;\",\n    \"8217\": \"rsquor;\",\n    \"8218\": \"sbquo;\",\n    \"8220\": \"OpenCurlyDoubleQuote;\",\n    \"8221\": \"rdquor;\",\n    \"8222\": \"ldquor;\",\n    \"8224\": \"dagger;\",\n    \"8225\": \"ddagger;\",\n    \"8226\": \"bullet;\",\n    \"8229\": \"nldr;\",\n    \"8230\": \"mldr;\",\n    \"8240\": \"permil;\",\n    \"8241\": \"pertenk;\",\n    \"8242\": \"prime;\",\n    \"8243\": \"Prime;\",\n    \"8244\": \"tprime;\",\n    \"8245\": \"bprime;\",\n    \"8249\": \"lsaquo;\",\n    \"8250\": \"rsaquo;\",\n    \"8254\": \"OverBar;\",\n    \"8257\": \"caret;\",\n    \"8259\": \"hybull;\",\n    \"8260\": \"frasl;\",\n    \"8271\": \"bsemi;\",\n    \"8279\": \"qprime;\",\n    \"8287\": \"MediumSpace;\",\n    \"8288\": \"NoBreak;\",\n    \"8289\": \"ApplyFunction;\",\n    \"8290\": \"it;\",\n    \"8291\": \"InvisibleComma;\",\n    \"8364\": \"euro;\",\n    \"8411\": \"TripleDot;\",\n    \"8412\": \"DotDot;\",\n    \"8450\": \"Copf;\",\n    \"8453\": \"incare;\",\n    \"8458\": \"gscr;\",\n    \"8459\": \"Hscr;\",\n    \"8460\": \"Poincareplane;\",\n    \"8461\": \"quaternions;\",\n    \"8462\": \"planckh;\",\n    \"8463\": \"plankv;\",\n    \"8464\": \"Iscr;\",\n    \"8465\": \"imagpart;\",\n    \"8466\": \"Lscr;\",\n    \"8467\": \"ell;\",\n    \"8469\": \"Nopf;\",\n    \"8470\": \"numero;\",\n    \"8471\": \"copysr;\",\n    \"8472\": \"wp;\",\n    \"8473\": \"primes;\",\n    \"8474\": \"rationals;\",\n    \"8475\": \"Rscr;\",\n    \"8476\": \"Rfr;\",\n    \"8477\": \"Ropf;\",\n    \"8478\": \"rx;\",\n    \"8482\": \"trade;\",\n    \"8484\": \"Zopf;\",\n    \"8487\": \"mho;\",\n    \"8488\": \"Zfr;\",\n    \"8489\": \"iiota;\",\n    \"8492\": \"Bscr;\",\n    \"8493\": \"Cfr;\",\n    \"8495\": \"escr;\",\n    \"8496\": \"expectation;\",\n    \"8497\": \"Fscr;\",\n    \"8499\": \"phmmat;\",\n    \"8500\": \"oscr;\",\n    \"8501\": \"aleph;\",\n    \"8502\": \"beth;\",\n    \"8503\": \"gimel;\",\n    \"8504\": \"daleth;\",\n    \"8517\": \"DD;\",\n    \"8518\": \"DifferentialD;\",\n    \"8519\": \"exponentiale;\",\n    \"8520\": \"ImaginaryI;\",\n    \"8531\": \"frac13;\",\n    \"8532\": \"frac23;\",\n    \"8533\": \"frac15;\",\n    \"8534\": \"frac25;\",\n    \"8535\": \"frac35;\",\n    \"8536\": \"frac45;\",\n    \"8537\": \"frac16;\",\n    \"8538\": \"frac56;\",\n    \"8539\": \"frac18;\",\n    \"8540\": \"frac38;\",\n    \"8541\": \"frac58;\",\n    \"8542\": \"frac78;\",\n    \"8592\": \"slarr;\",\n    \"8593\": \"uparrow;\",\n    \"8594\": \"srarr;\",\n    \"8595\": \"ShortDownArrow;\",\n    \"8596\": \"leftrightarrow;\",\n    \"8597\": \"varr;\",\n    \"8598\": \"UpperLeftArrow;\",\n    \"8599\": \"UpperRightArrow;\",\n    \"8600\": \"searrow;\",\n    \"8601\": \"swarrow;\",\n    \"8602\": \"nleftarrow;\",\n    \"8603\": \"nrightarrow;\",\n    \"8605\": \"rightsquigarrow;\",\n    \"8606\": \"twoheadleftarrow;\",\n    \"8607\": \"Uarr;\",\n    \"8608\": \"twoheadrightarrow;\",\n    \"8609\": \"Darr;\",\n    \"8610\": \"leftarrowtail;\",\n    \"8611\": \"rightarrowtail;\",\n    \"8612\": \"mapstoleft;\",\n    \"8613\": \"UpTeeArrow;\",\n    \"8614\": \"RightTeeArrow;\",\n    \"8615\": \"mapstodown;\",\n    \"8617\": \"larrhk;\",\n    \"8618\": \"rarrhk;\",\n    \"8619\": \"looparrowleft;\",\n    \"8620\": \"rarrlp;\",\n    \"8621\": \"leftrightsquigarrow;\",\n    \"8622\": \"nleftrightarrow;\",\n    \"8624\": \"lsh;\",\n    \"8625\": \"rsh;\",\n    \"8626\": \"ldsh;\",\n    \"8627\": \"rdsh;\",\n    \"8629\": \"crarr;\",\n    \"8630\": \"curvearrowleft;\",\n    \"8631\": \"curvearrowright;\",\n    \"8634\": \"olarr;\",\n    \"8635\": \"orarr;\",\n    \"8636\": \"lharu;\",\n    \"8637\": \"lhard;\",\n    \"8638\": \"upharpoonright;\",\n    \"8639\": \"upharpoonleft;\",\n    \"8640\": \"RightVector;\",\n    \"8641\": \"rightharpoondown;\",\n    \"8642\": \"RightDownVector;\",\n    \"8643\": \"LeftDownVector;\",\n    \"8644\": \"rlarr;\",\n    \"8645\": \"UpArrowDownArrow;\",\n    \"8646\": \"lrarr;\",\n    \"8647\": \"llarr;\",\n    \"8648\": \"uuarr;\",\n    \"8649\": \"rrarr;\",\n    \"8650\": \"downdownarrows;\",\n    \"8651\": \"ReverseEquilibrium;\",\n    \"8652\": \"rlhar;\",\n    \"8653\": \"nLeftarrow;\",\n    \"8654\": \"nLeftrightarrow;\",\n    \"8655\": \"nRightarrow;\",\n    \"8656\": \"Leftarrow;\",\n    \"8657\": \"Uparrow;\",\n    \"8658\": \"Rightarrow;\",\n    \"8659\": \"Downarrow;\",\n    \"8660\": \"Leftrightarrow;\",\n    \"8661\": \"vArr;\",\n    \"8662\": \"nwArr;\",\n    \"8663\": \"neArr;\",\n    \"8664\": \"seArr;\",\n    \"8665\": \"swArr;\",\n    \"8666\": \"Lleftarrow;\",\n    \"8667\": \"Rrightarrow;\",\n    \"8669\": \"zigrarr;\",\n    \"8676\": \"LeftArrowBar;\",\n    \"8677\": \"RightArrowBar;\",\n    \"8693\": \"duarr;\",\n    \"8701\": \"loarr;\",\n    \"8702\": \"roarr;\",\n    \"8703\": \"hoarr;\",\n    \"8704\": \"forall;\",\n    \"8705\": \"complement;\",\n    \"8706\": \"PartialD;\",\n    \"8707\": \"Exists;\",\n    \"8708\": \"NotExists;\",\n    \"8709\": \"varnothing;\",\n    \"8711\": \"nabla;\",\n    \"8712\": \"isinv;\",\n    \"8713\": \"notinva;\",\n    \"8715\": \"SuchThat;\",\n    \"8716\": \"NotReverseElement;\",\n    \"8719\": \"Product;\",\n    \"8720\": \"Coproduct;\",\n    \"8721\": \"sum;\",\n    \"8722\": \"minus;\",\n    \"8723\": \"mp;\",\n    \"8724\": \"plusdo;\",\n    \"8726\": \"ssetmn;\",\n    \"8727\": \"lowast;\",\n    \"8728\": \"SmallCircle;\",\n    \"8730\": \"Sqrt;\",\n    \"8733\": \"vprop;\",\n    \"8734\": \"infin;\",\n    \"8735\": \"angrt;\",\n    \"8736\": \"angle;\",\n    \"8737\": \"measuredangle;\",\n    \"8738\": \"angsph;\",\n    \"8739\": \"VerticalBar;\",\n    \"8740\": \"nsmid;\",\n    \"8741\": \"spar;\",\n    \"8742\": \"nspar;\",\n    \"8743\": \"wedge;\",\n    \"8744\": \"vee;\",\n    \"8745\": \"cap;\",\n    \"8746\": \"cup;\",\n    \"8747\": \"Integral;\",\n    \"8748\": \"Int;\",\n    \"8749\": \"tint;\",\n    \"8750\": \"oint;\",\n    \"8751\": \"DoubleContourIntegral;\",\n    \"8752\": \"Cconint;\",\n    \"8753\": \"cwint;\",\n    \"8754\": \"cwconint;\",\n    \"8755\": \"CounterClockwiseContourIntegral;\",\n    \"8756\": \"therefore;\",\n    \"8757\": \"because;\",\n    \"8758\": \"ratio;\",\n    \"8759\": \"Proportion;\",\n    \"8760\": \"minusd;\",\n    \"8762\": \"mDDot;\",\n    \"8763\": \"homtht;\",\n    \"8764\": \"Tilde;\",\n    \"8765\": \"bsim;\",\n    \"8766\": \"mstpos;\",\n    \"8767\": \"acd;\",\n    \"8768\": \"wreath;\",\n    \"8769\": \"nsim;\",\n    \"8770\": \"esim;\",\n    \"8771\": \"TildeEqual;\",\n    \"8772\": \"nsimeq;\",\n    \"8773\": \"TildeFullEqual;\",\n    \"8774\": \"simne;\",\n    \"8775\": \"NotTildeFullEqual;\",\n    \"8776\": \"TildeTilde;\",\n    \"8777\": \"NotTildeTilde;\",\n    \"8778\": \"approxeq;\",\n    \"8779\": \"apid;\",\n    \"8780\": \"bcong;\",\n    \"8781\": \"CupCap;\",\n    \"8782\": \"HumpDownHump;\",\n    \"8783\": \"HumpEqual;\",\n    \"8784\": \"esdot;\",\n    \"8785\": \"eDot;\",\n    \"8786\": \"fallingdotseq;\",\n    \"8787\": \"risingdotseq;\",\n    \"8788\": \"coloneq;\",\n    \"8789\": \"eqcolon;\",\n    \"8790\": \"eqcirc;\",\n    \"8791\": \"cire;\",\n    \"8793\": \"wedgeq;\",\n    \"8794\": \"veeeq;\",\n    \"8796\": \"trie;\",\n    \"8799\": \"questeq;\",\n    \"8800\": \"NotEqual;\",\n    \"8801\": \"equiv;\",\n    \"8802\": \"NotCongruent;\",\n    \"8804\": \"leq;\",\n    \"8805\": \"GreaterEqual;\",\n    \"8806\": \"LessFullEqual;\",\n    \"8807\": \"GreaterFullEqual;\",\n    \"8808\": \"lneqq;\",\n    \"8809\": \"gneqq;\",\n    \"8810\": \"NestedLessLess;\",\n    \"8811\": \"NestedGreaterGreater;\",\n    \"8812\": \"twixt;\",\n    \"8813\": \"NotCupCap;\",\n    \"8814\": \"NotLess;\",\n    \"8815\": \"NotGreater;\",\n    \"8816\": \"NotLessEqual;\",\n    \"8817\": \"NotGreaterEqual;\",\n    \"8818\": \"lsim;\",\n    \"8819\": \"gtrsim;\",\n    \"8820\": \"NotLessTilde;\",\n    \"8821\": \"NotGreaterTilde;\",\n    \"8822\": \"lg;\",\n    \"8823\": \"gtrless;\",\n    \"8824\": \"ntlg;\",\n    \"8825\": \"ntgl;\",\n    \"8826\": \"Precedes;\",\n    \"8827\": \"Succeeds;\",\n    \"8828\": \"PrecedesSlantEqual;\",\n    \"8829\": \"SucceedsSlantEqual;\",\n    \"8830\": \"prsim;\",\n    \"8831\": \"succsim;\",\n    \"8832\": \"nprec;\",\n    \"8833\": \"nsucc;\",\n    \"8834\": \"subset;\",\n    \"8835\": \"supset;\",\n    \"8836\": \"nsub;\",\n    \"8837\": \"nsup;\",\n    \"8838\": \"SubsetEqual;\",\n    \"8839\": \"supseteq;\",\n    \"8840\": \"nsubseteq;\",\n    \"8841\": \"nsupseteq;\",\n    \"8842\": \"subsetneq;\",\n    \"8843\": \"supsetneq;\",\n    \"8845\": \"cupdot;\",\n    \"8846\": \"uplus;\",\n    \"8847\": \"SquareSubset;\",\n    \"8848\": \"SquareSuperset;\",\n    \"8849\": \"SquareSubsetEqual;\",\n    \"8850\": \"SquareSupersetEqual;\",\n    \"8851\": \"SquareIntersection;\",\n    \"8852\": \"SquareUnion;\",\n    \"8853\": \"oplus;\",\n    \"8854\": \"ominus;\",\n    \"8855\": \"otimes;\",\n    \"8856\": \"osol;\",\n    \"8857\": \"odot;\",\n    \"8858\": \"ocir;\",\n    \"8859\": \"oast;\",\n    \"8861\": \"odash;\",\n    \"8862\": \"plusb;\",\n    \"8863\": \"minusb;\",\n    \"8864\": \"timesb;\",\n    \"8865\": \"sdotb;\",\n    \"8866\": \"vdash;\",\n    \"8867\": \"LeftTee;\",\n    \"8868\": \"top;\",\n    \"8869\": \"UpTee;\",\n    \"8871\": \"models;\",\n    \"8872\": \"vDash;\",\n    \"8873\": \"Vdash;\",\n    \"8874\": \"Vvdash;\",\n    \"8875\": \"VDash;\",\n    \"8876\": \"nvdash;\",\n    \"8877\": \"nvDash;\",\n    \"8878\": \"nVdash;\",\n    \"8879\": \"nVDash;\",\n    \"8880\": \"prurel;\",\n    \"8882\": \"vltri;\",\n    \"8883\": \"vrtri;\",\n    \"8884\": \"trianglelefteq;\",\n    \"8885\": \"trianglerighteq;\",\n    \"8886\": \"origof;\",\n    \"8887\": \"imof;\",\n    \"8888\": \"mumap;\",\n    \"8889\": \"hercon;\",\n    \"8890\": \"intercal;\",\n    \"8891\": \"veebar;\",\n    \"8893\": \"barvee;\",\n    \"8894\": \"angrtvb;\",\n    \"8895\": \"lrtri;\",\n    \"8896\": \"xwedge;\",\n    \"8897\": \"xvee;\",\n    \"8898\": \"xcap;\",\n    \"8899\": \"xcup;\",\n    \"8900\": \"diamond;\",\n    \"8901\": \"sdot;\",\n    \"8902\": \"Star;\",\n    \"8903\": \"divonx;\",\n    \"8904\": \"bowtie;\",\n    \"8905\": \"ltimes;\",\n    \"8906\": \"rtimes;\",\n    \"8907\": \"lthree;\",\n    \"8908\": \"rthree;\",\n    \"8909\": \"bsime;\",\n    \"8910\": \"cuvee;\",\n    \"8911\": \"cuwed;\",\n    \"8912\": \"Subset;\",\n    \"8913\": \"Supset;\",\n    \"8914\": \"Cap;\",\n    \"8915\": \"Cup;\",\n    \"8916\": \"pitchfork;\",\n    \"8917\": \"epar;\",\n    \"8918\": \"ltdot;\",\n    \"8919\": \"gtrdot;\",\n    \"8920\": \"Ll;\",\n    \"8921\": \"ggg;\",\n    \"8922\": \"LessEqualGreater;\",\n    \"8923\": \"gtreqless;\",\n    \"8926\": \"curlyeqprec;\",\n    \"8927\": \"curlyeqsucc;\",\n    \"8928\": \"nprcue;\",\n    \"8929\": \"nsccue;\",\n    \"8930\": \"nsqsube;\",\n    \"8931\": \"nsqsupe;\",\n    \"8934\": \"lnsim;\",\n    \"8935\": \"gnsim;\",\n    \"8936\": \"prnsim;\",\n    \"8937\": \"succnsim;\",\n    \"8938\": \"ntriangleleft;\",\n    \"8939\": \"ntriangleright;\",\n    \"8940\": \"ntrianglelefteq;\",\n    \"8941\": \"ntrianglerighteq;\",\n    \"8942\": \"vellip;\",\n    \"8943\": \"ctdot;\",\n    \"8944\": \"utdot;\",\n    \"8945\": \"dtdot;\",\n    \"8946\": \"disin;\",\n    \"8947\": \"isinsv;\",\n    \"8948\": \"isins;\",\n    \"8949\": \"isindot;\",\n    \"8950\": \"notinvc;\",\n    \"8951\": \"notinvb;\",\n    \"8953\": \"isinE;\",\n    \"8954\": \"nisd;\",\n    \"8955\": \"xnis;\",\n    \"8956\": \"nis;\",\n    \"8957\": \"notnivc;\",\n    \"8958\": \"notnivb;\",\n    \"8965\": \"barwedge;\",\n    \"8966\": \"doublebarwedge;\",\n    \"8968\": \"LeftCeiling;\",\n    \"8969\": \"RightCeiling;\",\n    \"8970\": \"lfloor;\",\n    \"8971\": \"RightFloor;\",\n    \"8972\": \"drcrop;\",\n    \"8973\": \"dlcrop;\",\n    \"8974\": \"urcrop;\",\n    \"8975\": \"ulcrop;\",\n    \"8976\": \"bnot;\",\n    \"8978\": \"profline;\",\n    \"8979\": \"profsurf;\",\n    \"8981\": \"telrec;\",\n    \"8982\": \"target;\",\n    \"8988\": \"ulcorner;\",\n    \"8989\": \"urcorner;\",\n    \"8990\": \"llcorner;\",\n    \"8991\": \"lrcorner;\",\n    \"8994\": \"sfrown;\",\n    \"8995\": \"ssmile;\",\n    \"9005\": \"cylcty;\",\n    \"9006\": \"profalar;\",\n    \"9014\": \"topbot;\",\n    \"9021\": \"ovbar;\",\n    \"9023\": \"solbar;\",\n    \"9084\": \"angzarr;\",\n    \"9136\": \"lmoustache;\",\n    \"9137\": \"rmoustache;\",\n    \"9140\": \"tbrk;\",\n    \"9141\": \"UnderBracket;\",\n    \"9142\": \"bbrktbrk;\",\n    \"9180\": \"OverParenthesis;\",\n    \"9181\": \"UnderParenthesis;\",\n    \"9182\": \"OverBrace;\",\n    \"9183\": \"UnderBrace;\",\n    \"9186\": \"trpezium;\",\n    \"9191\": \"elinters;\",\n    \"9251\": \"blank;\",\n    \"9416\": \"oS;\",\n    \"9472\": \"HorizontalLine;\",\n    \"9474\": \"boxv;\",\n    \"9484\": \"boxdr;\",\n    \"9488\": \"boxdl;\",\n    \"9492\": \"boxur;\",\n    \"9496\": \"boxul;\",\n    \"9500\": \"boxvr;\",\n    \"9508\": \"boxvl;\",\n    \"9516\": \"boxhd;\",\n    \"9524\": \"boxhu;\",\n    \"9532\": \"boxvh;\",\n    \"9552\": \"boxH;\",\n    \"9553\": \"boxV;\",\n    \"9554\": \"boxdR;\",\n    \"9555\": \"boxDr;\",\n    \"9556\": \"boxDR;\",\n    \"9557\": \"boxdL;\",\n    \"9558\": \"boxDl;\",\n    \"9559\": \"boxDL;\",\n    \"9560\": \"boxuR;\",\n    \"9561\": \"boxUr;\",\n    \"9562\": \"boxUR;\",\n    \"9563\": \"boxuL;\",\n    \"9564\": \"boxUl;\",\n    \"9565\": \"boxUL;\",\n    \"9566\": \"boxvR;\",\n    \"9567\": \"boxVr;\",\n    \"9568\": \"boxVR;\",\n    \"9569\": \"boxvL;\",\n    \"9570\": \"boxVl;\",\n    \"9571\": \"boxVL;\",\n    \"9572\": \"boxHd;\",\n    \"9573\": \"boxhD;\",\n    \"9574\": \"boxHD;\",\n    \"9575\": \"boxHu;\",\n    \"9576\": \"boxhU;\",\n    \"9577\": \"boxHU;\",\n    \"9578\": \"boxvH;\",\n    \"9579\": \"boxVh;\",\n    \"9580\": \"boxVH;\",\n    \"9600\": \"uhblk;\",\n    \"9604\": \"lhblk;\",\n    \"9608\": \"block;\",\n    \"9617\": \"blk14;\",\n    \"9618\": \"blk12;\",\n    \"9619\": \"blk34;\",\n    \"9633\": \"square;\",\n    \"9642\": \"squf;\",\n    \"9643\": \"EmptyVerySmallSquare;\",\n    \"9645\": \"rect;\",\n    \"9646\": \"marker;\",\n    \"9649\": \"fltns;\",\n    \"9651\": \"xutri;\",\n    \"9652\": \"utrif;\",\n    \"9653\": \"utri;\",\n    \"9656\": \"rtrif;\",\n    \"9657\": \"triangleright;\",\n    \"9661\": \"xdtri;\",\n    \"9662\": \"dtrif;\",\n    \"9663\": \"triangledown;\",\n    \"9666\": \"ltrif;\",\n    \"9667\": \"triangleleft;\",\n    \"9674\": \"lozenge;\",\n    \"9675\": \"cir;\",\n    \"9708\": \"tridot;\",\n    \"9711\": \"xcirc;\",\n    \"9720\": \"ultri;\",\n    \"9721\": \"urtri;\",\n    \"9722\": \"lltri;\",\n    \"9723\": \"EmptySmallSquare;\",\n    \"9724\": \"FilledSmallSquare;\",\n    \"9733\": \"starf;\",\n    \"9734\": \"star;\",\n    \"9742\": \"phone;\",\n    \"9792\": \"female;\",\n    \"9794\": \"male;\",\n    \"9824\": \"spadesuit;\",\n    \"9827\": \"clubsuit;\",\n    \"9829\": \"heartsuit;\",\n    \"9830\": \"diams;\",\n    \"9834\": \"sung;\",\n    \"9837\": \"flat;\",\n    \"9838\": \"natural;\",\n    \"9839\": \"sharp;\",\n    \"10003\": \"checkmark;\",\n    \"10007\": \"cross;\",\n    \"10016\": \"maltese;\",\n    \"10038\": \"sext;\",\n    \"10072\": \"VerticalSeparator;\",\n    \"10098\": \"lbbrk;\",\n    \"10099\": \"rbbrk;\",\n    \"10184\": \"bsolhsub;\",\n    \"10185\": \"suphsol;\",\n    \"10214\": \"lobrk;\",\n    \"10215\": \"robrk;\",\n    \"10216\": \"LeftAngleBracket;\",\n    \"10217\": \"RightAngleBracket;\",\n    \"10218\": \"Lang;\",\n    \"10219\": \"Rang;\",\n    \"10220\": \"loang;\",\n    \"10221\": \"roang;\",\n    \"10229\": \"xlarr;\",\n    \"10230\": \"xrarr;\",\n    \"10231\": \"xharr;\",\n    \"10232\": \"xlArr;\",\n    \"10233\": \"xrArr;\",\n    \"10234\": \"xhArr;\",\n    \"10236\": \"xmap;\",\n    \"10239\": \"dzigrarr;\",\n    \"10498\": \"nvlArr;\",\n    \"10499\": \"nvrArr;\",\n    \"10500\": \"nvHarr;\",\n    \"10501\": \"Map;\",\n    \"10508\": \"lbarr;\",\n    \"10509\": \"rbarr;\",\n    \"10510\": \"lBarr;\",\n    \"10511\": \"rBarr;\",\n    \"10512\": \"RBarr;\",\n    \"10513\": \"DDotrahd;\",\n    \"10514\": \"UpArrowBar;\",\n    \"10515\": \"DownArrowBar;\",\n    \"10518\": \"Rarrtl;\",\n    \"10521\": \"latail;\",\n    \"10522\": \"ratail;\",\n    \"10523\": \"lAtail;\",\n    \"10524\": \"rAtail;\",\n    \"10525\": \"larrfs;\",\n    \"10526\": \"rarrfs;\",\n    \"10527\": \"larrbfs;\",\n    \"10528\": \"rarrbfs;\",\n    \"10531\": \"nwarhk;\",\n    \"10532\": \"nearhk;\",\n    \"10533\": \"searhk;\",\n    \"10534\": \"swarhk;\",\n    \"10535\": \"nwnear;\",\n    \"10536\": \"toea;\",\n    \"10537\": \"tosa;\",\n    \"10538\": \"swnwar;\",\n    \"10547\": \"rarrc;\",\n    \"10549\": \"cudarrr;\",\n    \"10550\": \"ldca;\",\n    \"10551\": \"rdca;\",\n    \"10552\": \"cudarrl;\",\n    \"10553\": \"larrpl;\",\n    \"10556\": \"curarrm;\",\n    \"10557\": \"cularrp;\",\n    \"10565\": \"rarrpl;\",\n    \"10568\": \"harrcir;\",\n    \"10569\": \"Uarrocir;\",\n    \"10570\": \"lurdshar;\",\n    \"10571\": \"ldrushar;\",\n    \"10574\": \"LeftRightVector;\",\n    \"10575\": \"RightUpDownVector;\",\n    \"10576\": \"DownLeftRightVector;\",\n    \"10577\": \"LeftUpDownVector;\",\n    \"10578\": \"LeftVectorBar;\",\n    \"10579\": \"RightVectorBar;\",\n    \"10580\": \"RightUpVectorBar;\",\n    \"10581\": \"RightDownVectorBar;\",\n    \"10582\": \"DownLeftVectorBar;\",\n    \"10583\": \"DownRightVectorBar;\",\n    \"10584\": \"LeftUpVectorBar;\",\n    \"10585\": \"LeftDownVectorBar;\",\n    \"10586\": \"LeftTeeVector;\",\n    \"10587\": \"RightTeeVector;\",\n    \"10588\": \"RightUpTeeVector;\",\n    \"10589\": \"RightDownTeeVector;\",\n    \"10590\": \"DownLeftTeeVector;\",\n    \"10591\": \"DownRightTeeVector;\",\n    \"10592\": \"LeftUpTeeVector;\",\n    \"10593\": \"LeftDownTeeVector;\",\n    \"10594\": \"lHar;\",\n    \"10595\": \"uHar;\",\n    \"10596\": \"rHar;\",\n    \"10597\": \"dHar;\",\n    \"10598\": \"luruhar;\",\n    \"10599\": \"ldrdhar;\",\n    \"10600\": \"ruluhar;\",\n    \"10601\": \"rdldhar;\",\n    \"10602\": \"lharul;\",\n    \"10603\": \"llhard;\",\n    \"10604\": \"rharul;\",\n    \"10605\": \"lrhard;\",\n    \"10606\": \"UpEquilibrium;\",\n    \"10607\": \"ReverseUpEquilibrium;\",\n    \"10608\": \"RoundImplies;\",\n    \"10609\": \"erarr;\",\n    \"10610\": \"simrarr;\",\n    \"10611\": \"larrsim;\",\n    \"10612\": \"rarrsim;\",\n    \"10613\": \"rarrap;\",\n    \"10614\": \"ltlarr;\",\n    \"10616\": \"gtrarr;\",\n    \"10617\": \"subrarr;\",\n    \"10619\": \"suplarr;\",\n    \"10620\": \"lfisht;\",\n    \"10621\": \"rfisht;\",\n    \"10622\": \"ufisht;\",\n    \"10623\": \"dfisht;\",\n    \"10629\": \"lopar;\",\n    \"10630\": \"ropar;\",\n    \"10635\": \"lbrke;\",\n    \"10636\": \"rbrke;\",\n    \"10637\": \"lbrkslu;\",\n    \"10638\": \"rbrksld;\",\n    \"10639\": \"lbrksld;\",\n    \"10640\": \"rbrkslu;\",\n    \"10641\": \"langd;\",\n    \"10642\": \"rangd;\",\n    \"10643\": \"lparlt;\",\n    \"10644\": \"rpargt;\",\n    \"10645\": \"gtlPar;\",\n    \"10646\": \"ltrPar;\",\n    \"10650\": \"vzigzag;\",\n    \"10652\": \"vangrt;\",\n    \"10653\": \"angrtvbd;\",\n    \"10660\": \"ange;\",\n    \"10661\": \"range;\",\n    \"10662\": \"dwangle;\",\n    \"10663\": \"uwangle;\",\n    \"10664\": \"angmsdaa;\",\n    \"10665\": \"angmsdab;\",\n    \"10666\": \"angmsdac;\",\n    \"10667\": \"angmsdad;\",\n    \"10668\": \"angmsdae;\",\n    \"10669\": \"angmsdaf;\",\n    \"10670\": \"angmsdag;\",\n    \"10671\": \"angmsdah;\",\n    \"10672\": \"bemptyv;\",\n    \"10673\": \"demptyv;\",\n    \"10674\": \"cemptyv;\",\n    \"10675\": \"raemptyv;\",\n    \"10676\": \"laemptyv;\",\n    \"10677\": \"ohbar;\",\n    \"10678\": \"omid;\",\n    \"10679\": \"opar;\",\n    \"10681\": \"operp;\",\n    \"10683\": \"olcross;\",\n    \"10684\": \"odsold;\",\n    \"10686\": \"olcir;\",\n    \"10687\": \"ofcir;\",\n    \"10688\": \"olt;\",\n    \"10689\": \"ogt;\",\n    \"10690\": \"cirscir;\",\n    \"10691\": \"cirE;\",\n    \"10692\": \"solb;\",\n    \"10693\": \"bsolb;\",\n    \"10697\": \"boxbox;\",\n    \"10701\": \"trisb;\",\n    \"10702\": \"rtriltri;\",\n    \"10703\": \"LeftTriangleBar;\",\n    \"10704\": \"RightTriangleBar;\",\n    \"10716\": \"iinfin;\",\n    \"10717\": \"infintie;\",\n    \"10718\": \"nvinfin;\",\n    \"10723\": \"eparsl;\",\n    \"10724\": \"smeparsl;\",\n    \"10725\": \"eqvparsl;\",\n    \"10731\": \"lozf;\",\n    \"10740\": \"RuleDelayed;\",\n    \"10742\": \"dsol;\",\n    \"10752\": \"xodot;\",\n    \"10753\": \"xoplus;\",\n    \"10754\": \"xotime;\",\n    \"10756\": \"xuplus;\",\n    \"10758\": \"xsqcup;\",\n    \"10764\": \"qint;\",\n    \"10765\": \"fpartint;\",\n    \"10768\": \"cirfnint;\",\n    \"10769\": \"awint;\",\n    \"10770\": \"rppolint;\",\n    \"10771\": \"scpolint;\",\n    \"10772\": \"npolint;\",\n    \"10773\": \"pointint;\",\n    \"10774\": \"quatint;\",\n    \"10775\": \"intlarhk;\",\n    \"10786\": \"pluscir;\",\n    \"10787\": \"plusacir;\",\n    \"10788\": \"simplus;\",\n    \"10789\": \"plusdu;\",\n    \"10790\": \"plussim;\",\n    \"10791\": \"plustwo;\",\n    \"10793\": \"mcomma;\",\n    \"10794\": \"minusdu;\",\n    \"10797\": \"loplus;\",\n    \"10798\": \"roplus;\",\n    \"10799\": \"Cross;\",\n    \"10800\": \"timesd;\",\n    \"10801\": \"timesbar;\",\n    \"10803\": \"smashp;\",\n    \"10804\": \"lotimes;\",\n    \"10805\": \"rotimes;\",\n    \"10806\": \"otimesas;\",\n    \"10807\": \"Otimes;\",\n    \"10808\": \"odiv;\",\n    \"10809\": \"triplus;\",\n    \"10810\": \"triminus;\",\n    \"10811\": \"tritime;\",\n    \"10812\": \"iprod;\",\n    \"10815\": \"amalg;\",\n    \"10816\": \"capdot;\",\n    \"10818\": \"ncup;\",\n    \"10819\": \"ncap;\",\n    \"10820\": \"capand;\",\n    \"10821\": \"cupor;\",\n    \"10822\": \"cupcap;\",\n    \"10823\": \"capcup;\",\n    \"10824\": \"cupbrcap;\",\n    \"10825\": \"capbrcup;\",\n    \"10826\": \"cupcup;\",\n    \"10827\": \"capcap;\",\n    \"10828\": \"ccups;\",\n    \"10829\": \"ccaps;\",\n    \"10832\": \"ccupssm;\",\n    \"10835\": \"And;\",\n    \"10836\": \"Or;\",\n    \"10837\": \"andand;\",\n    \"10838\": \"oror;\",\n    \"10839\": \"orslope;\",\n    \"10840\": \"andslope;\",\n    \"10842\": \"andv;\",\n    \"10843\": \"orv;\",\n    \"10844\": \"andd;\",\n    \"10845\": \"ord;\",\n    \"10847\": \"wedbar;\",\n    \"10854\": \"sdote;\",\n    \"10858\": \"simdot;\",\n    \"10861\": \"congdot;\",\n    \"10862\": \"easter;\",\n    \"10863\": \"apacir;\",\n    \"10864\": \"apE;\",\n    \"10865\": \"eplus;\",\n    \"10866\": \"pluse;\",\n    \"10867\": \"Esim;\",\n    \"10868\": \"Colone;\",\n    \"10869\": \"Equal;\",\n    \"10871\": \"eDDot;\",\n    \"10872\": \"equivDD;\",\n    \"10873\": \"ltcir;\",\n    \"10874\": \"gtcir;\",\n    \"10875\": \"ltquest;\",\n    \"10876\": \"gtquest;\",\n    \"10877\": \"LessSlantEqual;\",\n    \"10878\": \"GreaterSlantEqual;\",\n    \"10879\": \"lesdot;\",\n    \"10880\": \"gesdot;\",\n    \"10881\": \"lesdoto;\",\n    \"10882\": \"gesdoto;\",\n    \"10883\": \"lesdotor;\",\n    \"10884\": \"gesdotol;\",\n    \"10885\": \"lessapprox;\",\n    \"10886\": \"gtrapprox;\",\n    \"10887\": \"lneq;\",\n    \"10888\": \"gneq;\",\n    \"10889\": \"lnapprox;\",\n    \"10890\": \"gnapprox;\",\n    \"10891\": \"lesseqqgtr;\",\n    \"10892\": \"gtreqqless;\",\n    \"10893\": \"lsime;\",\n    \"10894\": \"gsime;\",\n    \"10895\": \"lsimg;\",\n    \"10896\": \"gsiml;\",\n    \"10897\": \"lgE;\",\n    \"10898\": \"glE;\",\n    \"10899\": \"lesges;\",\n    \"10900\": \"gesles;\",\n    \"10901\": \"eqslantless;\",\n    \"10902\": \"eqslantgtr;\",\n    \"10903\": \"elsdot;\",\n    \"10904\": \"egsdot;\",\n    \"10905\": \"el;\",\n    \"10906\": \"eg;\",\n    \"10909\": \"siml;\",\n    \"10910\": \"simg;\",\n    \"10911\": \"simlE;\",\n    \"10912\": \"simgE;\",\n    \"10913\": \"LessLess;\",\n    \"10914\": \"GreaterGreater;\",\n    \"10916\": \"glj;\",\n    \"10917\": \"gla;\",\n    \"10918\": \"ltcc;\",\n    \"10919\": \"gtcc;\",\n    \"10920\": \"lescc;\",\n    \"10921\": \"gescc;\",\n    \"10922\": \"smt;\",\n    \"10923\": \"lat;\",\n    \"10924\": \"smte;\",\n    \"10925\": \"late;\",\n    \"10926\": \"bumpE;\",\n    \"10927\": \"preceq;\",\n    \"10928\": \"succeq;\",\n    \"10931\": \"prE;\",\n    \"10932\": \"scE;\",\n    \"10933\": \"prnE;\",\n    \"10934\": \"succneqq;\",\n    \"10935\": \"precapprox;\",\n    \"10936\": \"succapprox;\",\n    \"10937\": \"prnap;\",\n    \"10938\": \"succnapprox;\",\n    \"10939\": \"Pr;\",\n    \"10940\": \"Sc;\",\n    \"10941\": \"subdot;\",\n    \"10942\": \"supdot;\",\n    \"10943\": \"subplus;\",\n    \"10944\": \"supplus;\",\n    \"10945\": \"submult;\",\n    \"10946\": \"supmult;\",\n    \"10947\": \"subedot;\",\n    \"10948\": \"supedot;\",\n    \"10949\": \"subseteqq;\",\n    \"10950\": \"supseteqq;\",\n    \"10951\": \"subsim;\",\n    \"10952\": \"supsim;\",\n    \"10955\": \"subsetneqq;\",\n    \"10956\": \"supsetneqq;\",\n    \"10959\": \"csub;\",\n    \"10960\": \"csup;\",\n    \"10961\": \"csube;\",\n    \"10962\": \"csupe;\",\n    \"10963\": \"subsup;\",\n    \"10964\": \"supsub;\",\n    \"10965\": \"subsub;\",\n    \"10966\": \"supsup;\",\n    \"10967\": \"suphsub;\",\n    \"10968\": \"supdsub;\",\n    \"10969\": \"forkv;\",\n    \"10970\": \"topfork;\",\n    \"10971\": \"mlcp;\",\n    \"10980\": \"DoubleLeftTee;\",\n    \"10982\": \"Vdashl;\",\n    \"10983\": \"Barv;\",\n    \"10984\": \"vBar;\",\n    \"10985\": \"vBarv;\",\n    \"10987\": \"Vbar;\",\n    \"10988\": \"Not;\",\n    \"10989\": \"bNot;\",\n    \"10990\": \"rnmid;\",\n    \"10991\": \"cirmid;\",\n    \"10992\": \"midcir;\",\n    \"10993\": \"topcir;\",\n    \"10994\": \"nhpar;\",\n    \"10995\": \"parsim;\",\n    \"11005\": \"parsl;\",\n    \"64256\": \"fflig;\",\n    \"64257\": \"filig;\",\n    \"64258\": \"fllig;\",\n    \"64259\": \"ffilig;\",\n    \"64260\": \"ffllig;\"\n}\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n},{}],12:[function(require,module,exports){\n(function (global){\n/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(require,module,exports){\n/**\n * This file automatically generated from `pre-publish.js`.\n * Do not manually edit.\n */\n\nmodule.exports = {\n  \"area\": true,\n  \"base\": true,\n  \"br\": true,\n  \"col\": true,\n  \"embed\": true,\n  \"hr\": true,\n  \"img\": true,\n  \"input\": true,\n  \"keygen\": true,\n  \"link\": true,\n  \"menuitem\": true,\n  \"meta\": true,\n  \"param\": true,\n  \"source\": true,\n  \"track\": true,\n  \"wbr\": true\n};\n\n},{}]},{},[3]);\n", "var sinon = require('sinon')\nvar assert = require('assert')\n\nvar ClientKarma = require('../../client/karma')\nvar ContextKarma = require('../../context/karma')\nvar MockSocket = require('./mocks').Socket\n\ndescribe('Karma', function () {\n  var updater, socket, k, ck, windowNavigator, windowLocation, windowStub, startSpy, iframe, clientWindow\n  var windowDocument, elements, mockTestStatus\n\n  function setTransportTo (transportName) {\n    socket._setTransportNameTo(transportName)\n    socket.emit('connect')\n  }\n\n  beforeEach(function () {\n    mockTestStatus = ''\n    updater = {\n      updateTestStatus: function (s) {\n        mockTestStatus = s\n      }\n    }\n    socket = new MockSocket()\n    iframe = { contentWindow: {} }\n    windowNavigator = {}\n    windowLocation = { search: '' }\n    windowStub = sinon.stub().returns({})\n    elements = [{ style: {} }, { style: {} }]\n    windowDocument = { querySelectorAll: sinon.stub().returns(elements) }\n\n    k = new ClientKarma(updater, socket, iframe, windowStub, windowNavigator, windowLocation, windowDocument)\n    clientWindow = {\n      karma: k\n    }\n    ck = new ContextKarma(ContextKarma.getDirectCallParentKarmaMethod(clientWindow))\n    ck.config = {}\n    startSpy = sinon.spy(ck, 'start')\n  })\n\n  it('should start execution when all files loaded and pass config', function () {\n    var config = ck.config = {\n      useIframe: true\n    }\n\n    socket.emit('execute', config)\n    assert(!startSpy.called)\n\n    ck.loaded()\n    assert(startSpy.calledWith(config))\n  })\n\n  it('should open a new window when useIFrame is false', function (done) {\n    var config = ck.config = {\n      useIframe: false,\n      runInParent: false\n    }\n\n    socket.emit('execute', config)\n    setTimeout(function nextEventLoop () {\n      assert(!ck.start.called)\n\n      ck.loaded()\n      assert(startSpy.calledWith(config))\n      assert(windowStub.calledWith('context.html'))\n      done()\n    })\n  })\n\n  it('should not set style on elements', function (done) {\n    var config = {}\n    socket.emit('execute', config)\n    setTimeout(function nextEventLoop () {\n      assert(Object.keys(elements[0].style).length === 0)\n      done()\n    })\n  })\n\n  it('should set display none on elements if clientDisplayNone', function (done) {\n    var config = { clientDisplayNone: true }\n    socket.emit('execute', config)\n    setTimeout(function nextEventLoop () {\n      assert(elements[0].style.display === 'none')\n      assert(elements[1].style.display === 'none')\n      done()\n    })\n  })\n\n  it('should stop execution', function () {\n    sinon.spy(k, 'complete')\n    socket.emit('stop')\n    assert(k.complete.called)\n  })\n\n  it('should not start execution if any error during loading files', function () {\n    ck.error('syntax error', '/some/file.js', 11)\n    ck.loaded()\n    sinon.spy(ck, 'start')\n    assert(!startSpy.called)\n  })\n\n  it('should remove reference to start even after syntax error', function () {\n    function ADAPTER_START_FN () {}\n\n    ck.start = ADAPTER_START_FN\n    ck.error('syntax error', '/some/file.js', 11)\n    ck.loaded()\n    assert.notStrictEqual(ck.start, ADAPTER_START_FN)\n\n    ck.start = ADAPTER_START_FN\n    ck.loaded()\n    assert.notStrictEqual(k.start, ADAPTER_START_FN)\n  })\n\n  it('should not set up context if there was an error', function (done) {\n    var config = ck.config = {\n      clearContext: true\n    }\n\n    socket.emit('execute', config)\n\n    setTimeout(function nextEventLoop () {\n      var mockWindow = {}\n\n      ck.error('page reload')\n      ck.setupContext(mockWindow)\n\n      assert(mockWindow.onbeforeunload == null)\n      assert(mockWindow.onerror == null)\n      done()\n    })\n  })\n\n  it('should setup context if there was error but clearContext config is false', function (done) {\n    var config = ck.config = {\n      clearContext: false\n    }\n\n    socket.emit('execute', config)\n\n    setTimeout(function nextEventLoop () {\n      var mockWindow = {}\n\n      ck.error('page reload')\n      ck.setupContext(mockWindow)\n\n      assert(mockWindow.onbeforeunload != null)\n      assert(mockWindow.onerror != null)\n      done()\n    })\n  })\n\n  it('should error out if a script attempted to reload the browser after setup', function (done) {\n    // Perform setup\n    var config = ck.config = {\n      clearContext: false\n    }\n    socket.emit('execute', config)\n\n    setTimeout(function nextEventLoop () {\n      var mockWindow = {}\n      ck.setupContext(mockWindow)\n\n      // Spy on our error handler\n      sinon.spy(k, 'error')\n\n      // Emulate an unload event\n      mockWindow.onbeforeunload()\n\n      // Assert our spy was called\n      assert(k.error.calledWith('Some of your tests did a full page reload!'))\n      done()\n    })\n  })\n\n  it('should error out if a script attempted to reload the browser after setup with clearContext true', function (done) {\n    // Perform setup\n    var config = ck.config = {\n      clearContext: true\n    }\n    socket.emit('execute', config)\n\n    setTimeout(function nextEventLoop () {\n      var mockWindow = {}\n      ck.setupContext(mockWindow)\n\n      // Spy on our error handler\n      sinon.spy(k, 'error')\n\n      // Emulate an unload event\n      mockWindow.onbeforeunload()\n\n      // Assert our spy was called\n      assert(k.error.calledWith('Some of your tests did a full page reload!'))\n      done()\n    })\n  })\n\n  it('should report navigator name', function () {\n    var spyInfo = sinon.spy(function (info) {\n      assert(info.name === 'Fake browser name')\n    })\n\n    windowNavigator.userAgent = 'Fake browser name'\n    windowLocation.search = ''\n    socket.on('register', spyInfo)\n    socket.emit('connect')\n\n    assert(spyInfo.called)\n  })\n\n  it('should mark \"register\" event for reconnected socket', function () {\n    // First connect.\n    socket.emit('connect')\n\n    socket.on('register', sinon.spy(function (info) {\n      assert(info.isSocketReconnect === true)\n    }))\n    // Reconnect\n    socket.emit('connect')\n  })\n\n  it('should report browser id', function () {\n    windowLocation.search = '?id=567'\n    socket = new MockSocket()\n    k = new ClientKarma(updater, socket, {}, windowStub, windowNavigator, windowLocation)\n\n    var spyInfo = sinon.spy(function (info) {\n      assert(info.id === '567')\n    })\n\n    socket.on('register', spyInfo)\n    socket.emit('connect')\n\n    assert(spyInfo.called)\n  })\n\n  describe('result', function () {\n    it('should buffer results when polling', function () {\n      var spyResult = sinon.stub()\n      socket.on('result', spyResult)\n\n      setTransportTo('polling')\n\n      // emit 49 results\n      for (var i = 1; i < 50; i++) {\n        ck.result({ id: i })\n      }\n\n      assert(!spyResult.called)\n\n      ck.result('result', { id: 50 })\n      assert(spyResult.called)\n      assert(spyResult.args[0][0].length === 50)\n    })\n\n    it('should buffer results when polling', function () {\n      var spyResult = sinon.stub()\n      socket.on('result', spyResult)\n\n      setTransportTo('polling')\n\n      // emit 40 results\n      for (var i = 1; i <= 40; i++) {\n        ck.result({ id: i })\n      }\n\n      ck.complete()\n      assert(spyResult.called)\n      assert(spyResult.args[0][0].length === 40)\n    })\n\n    it('should emit \"start\" with total specs count first', function () {\n      var log = []\n\n      socket.on('result', function () {\n        log.push('result')\n      })\n\n      socket.on('start', function () {\n        log.push('start')\n      })\n\n      setTransportTo('websocket')\n\n      // adapter didn't call info({total: x})\n      ck.result()\n      assert.deepStrictEqual(log, ['start', 'result'])\n    })\n\n    it('should not emit \"start\" if already done by the adapter', function () {\n      var log = []\n\n      var spyStart = sinon.spy(function () {\n        log.push('start')\n      })\n\n      var spyResult = sinon.spy(function () {\n        log.push('result')\n      })\n\n      socket.on('result', spyResult)\n      socket.on('start', spyStart)\n\n      setTransportTo('websocket')\n\n      ck.info({ total: 321 })\n      ck.result()\n      assert.deepStrictEqual(log, ['start', 'result'])\n      assert(spyStart.calledWith({ total: 321 }))\n    })\n  })\n\n  describe('setupContext', function () {\n    it('should capture alert', function () {\n      sinon.spy(ck, 'log')\n\n      var mockWindow = {\n        alert: function () {\n          throw new Error('Alert was not patched!')\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      mockWindow.alert('What?')\n      assert(ck.log.calledWith('alert', ['What?']))\n    })\n\n    it('should capture confirm', function () {\n      sinon.spy(ck, 'log')\n      var confirmCalled = false\n\n      var mockWindow = {\n        confirm: function () {\n          confirmCalled = true\n          return true\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      var confirmResult = mockWindow.confirm('What?')\n      assert(ck.log.calledWith('confirm', ['What?']))\n      assert.strictEqual(confirmCalled, true)\n      assert.strictEqual(confirmResult, true)\n    })\n\n    it('should capture prompt', function () {\n      sinon.spy(ck, 'log')\n      var promptCalled = false\n\n      var mockWindow = {\n        prompt: function () {\n          promptCalled = true\n          return 'user-input'\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      var promptResult = mockWindow.prompt('What is your favorite color?', 'blue')\n      assert(ck.log.calledWith('prompt', ['What is your favorite color?', 'blue']))\n      assert.strictEqual(promptCalled, true)\n      assert.strictEqual(promptResult, 'user-input')\n    })\n\n    it('should patch the console if captureConsole is true', function () {\n      sinon.spy(ck, 'log')\n      ck.config.captureConsole = true\n\n      var mockWindow = {\n        console: {\n          log: function () {}\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      mockWindow.console.log('What?')\n      assert(ck.log.calledWith('log'))\n      assert(ck.log.args[0][1][0] === 'What?')\n    })\n\n    it('should not patch the console if captureConsole is false', function () {\n      sinon.spy(ck, 'log')\n      ck.config.captureConsole = false\n\n      var mockWindow = {\n        console: {\n          log: function () {}\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      mockWindow.console.log('hello')\n      assert(!ck.log.called)\n    })\n\n    it('should not allow broken console methods to break tests (if captureConsole is true)', function () {\n      sinon.spy(ck, 'log')\n      ck.config.captureConsole = true\n\n      var mockWindow = {\n        console: {\n          log: function () {\n            throw new Error('I am a broken console.log method.')\n          }\n        }\n      }\n\n      ck.setupContext(mockWindow)\n      mockWindow.console.log('What?')\n      assert(ck.log.calledWith('log'))\n      assert.strictEqual(ck.log.args[0][1][0], 'What?')\n      assert(ck.log.calledWith('warn'))\n      assert(/^Console method log threw:[\\s\\S]+I am a broken console\\.log method/.test(ck.log.args[1][1][0]))\n    })\n  })\n\n  describe('complete', function () {\n    var clock\n\n    before(function () {\n      clock = sinon.useFakeTimers()\n    })\n\n    after(function () {\n      clock.restore()\n    })\n\n    it('should clean the result buffer before completing', function () {\n      var spyResult = sinon.stub()\n      socket.on('result', spyResult)\n\n      setTransportTo('polling')\n\n      // emit 40 results\n      for (var i = 0; i < 40; i++) {\n        ck.result({ id: i })\n      }\n\n      assert(!spyResult.called)\n\n      ck.complete()\n      assert(spyResult.called)\n    })\n\n    it('should navigate the client to return_url if specified and allowed', function (done) {\n      var config = {\n        // The default value.\n        allowedReturnUrlPatterns: ['^https?://']\n      }\n      windowLocation.search = '?id=567&return_url=http://return.com'\n      socket = new MockSocket()\n      k = new ClientKarma(updater, socket, iframe, windowStub, windowNavigator, windowLocation)\n      clientWindow = { karma: k }\n      ck = new ContextKarma(ContextKarma.getDirectCallParentKarmaMethod(clientWindow))\n      socket.emit('execute', config)\n\n      clock.tick(500)\n\n      ck.complete()\n      setTimeout(function () {\n        assert(windowLocation.href === 'http://return.com')\n        done()\n      }, 5)\n\n      clock.tick(10)\n    })\n\n    it('should not navigate the client to return_url if not allowed', function () {\n      var config = {\n        allowedReturnUrlPatterns: []\n      }\n\n      windowLocation.search = '?id=567&return_url=javascript:alert(document.domain)'\n      socket = new MockSocket()\n      k = new ClientKarma(updater, socket, iframe, windowStub, windowNavigator, windowLocation)\n      clientWindow = { karma: k }\n      ck = new ContextKarma(ContextKarma.getDirectCallParentKarmaMethod(clientWindow))\n      socket.emit('execute', config)\n\n      try {\n        ck.complete()\n        throw new Error('An error should have been caught.')\n      } catch (error) {\n        assert(/Error: Security: Navigation to .* was blocked to prevent malicious exploits./.test(error))\n      }\n    })\n\n    it('should clear context window upon complete when clearContext config is true', function () {\n      var config = ck.config = {\n        clearContext: true\n      }\n\n      socket.emit('execute', config)\n      var CURRENT_URL = iframe.src\n\n      ck.complete()\n\n      // clock.tick() does not work in IE 7\n      setTimeout(function () {\n        clock.tick(1)\n        assert.notStrictEqual(iframe.src, CURRENT_URL)\n      }, 10)\n    })\n\n    it('should not clear context window upon complete when clearContext config is false', function () {\n      var config = ck.config = {\n        clearContext: false\n      }\n\n      socket.emit('execute', config)\n      assert(mockTestStatus === 'execute')\n\n      clock.tick(1)\n      var CURRENT_URL = iframe.src\n      ck.complete()\n      clock.tick(1)\n      assert.strictEqual(iframe.src, CURRENT_URL)\n      assert(mockTestStatus === 'complete')\n    })\n\n    it('should accept multiple calls to loaded', function () {\n      // support for Safari 10 since it supports type=module but not nomodule.\n      var config = ck.config = {\n        useIframe: true\n      }\n\n      socket.emit('execute', config)\n      clock.tick(1)\n      assert(!startSpy.called)\n\n      ck.loaded()\n      ck.loaded()\n      assert(startSpy.calledWith(config))\n      assert(startSpy.getCalls().length === 1)\n    })\n  })\n})\n"], "filenames": ["client/karma.js", "docs/config/01-configuration-file.md", "lib/config.js", "static/karma.js", "test/client/karma.spec.js"], "buggy_code_start_loc": [242, 279, 20, 252, 445], "buggy_code_end_loc": [243, 279, 328, 253, 462], "fixing_code_start_loc": [242, 280, 20, 252, 445], "fixing_code_end_loc": [251, 289, 329, 261, 486], "type": "CWE-601", "message": "The package karma before 6.3.16 are vulnerable to Open Redirect due to missing validation of the return_url query parameter.", "other": {"cve": {"id": "CVE-2021-23495", "sourceIdentifier": "report@snyk.io", "published": "2022-02-25T20:15:08.130", "lastModified": "2022-03-08T15:56:30.010", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package karma before 6.3.16 are vulnerable to Open Redirect due to missing validation of the return_url query parameter."}, {"lang": "es", "value": "El paquete karma versiones anteriores a 6.3.16, es vulnerable a un redireccionamiento abierto debido a una falta de comprobaci\u00f3n del par\u00e1metro return_url query."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:karma_project:karma:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "6.3.16", "matchCriteriaId": "19262E2D-B51A-4A35-9CDA-FB57B5A6DCBB"}]}]}], "references": [{"url": "https://github.com/karma-runner/karma/commit/ff7edbb2ffbcdd69761bece86b7dc1ef0740508d", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2412347", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-KARMA-2396325", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/karma-runner/karma/commit/ff7edbb2ffbcdd69761bece86b7dc1ef0740508d"}}