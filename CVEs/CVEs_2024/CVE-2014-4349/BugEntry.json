{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * This class is responsible for instanciating\n * the various components of the navigation panel\n *\n * @package PhpMyAdmin-navigation\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\nrequire_once 'libraries/navigation/NodeFactory.class.php';\nrequire_once 'libraries/navigation/NavigationHeader.class.php';\nrequire_once 'libraries/navigation/NavigationTree.class.php';\n\n/**\n * The navigation panel - displays server, db and table selection tree\n *\n * @package PhpMyAdmin-Navigation\n */\nclass PMA_Navigation\n{\n    /**\n     * Initialises the class\n     */\n    public function __construct()\n    {\n        if (empty($GLOBALS['token'])) {\n            $GLOBALS['token'] = $_SESSION[' PMA_token '];\n        }\n    }\n\n    /**\n     * Renders the navigation tree, or part of it\n     *\n     * @return string The navigation tree\n     */\n    public function getDisplay()\n    {\n        /* Init */\n        $retval = '';\n        if (! PMA_Response::getInstance()->isAjax()) {\n            $header = new PMA_NavigationHeader();\n            $retval = $header->getDisplay();\n        }\n        $tree = new PMA_NavigationTree();\n        if (! PMA_Response::getInstance()->isAjax()\n            || ! empty($_REQUEST['full'])\n            || ! empty($_REQUEST['reload'])\n        ) {\n            $treeRender = $tree->renderState();\n        } else {\n            $treeRender = $tree->renderPath();\n        }\n\n        if (! $treeRender) {\n            $retval .= PMA_Message::error(\n                __('An error has occurred while loading the navigation tree')\n            )->getDisplay();\n        } else {\n            $retval .= $treeRender;\n        }\n\n        if (! PMA_Response::getInstance()->isAjax()) {\n            // closes the tags that were opened by the navigation header\n            $retval .= '</div>';\n            $retval .= '</div>';\n            $retval .= '</div>';\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Add an item of navigation tree to the hidden items list in PMA database.\n     *\n     * @param string $itemName  name of the navigation tree item\n     * @param string $itemType  type of the navigation tree item\n     * @param string $dbName    database name\n     * @param string $tableName table name if applicable\n     *\n     * @return void\n     */\n    public function hideNavigationItem(\n        $itemName, $itemType, $dbName, $tableName = null\n    ) {\n        $navTable = PMA_Util::backquote($GLOBALS['cfgRelation']['db'])\n            . \".\" . PMA_Util::backquote($GLOBALS['cfgRelation']['navigationhiding']);\n        $sqlQuery = \"INSERT INTO \" . $navTable\n            . \"(`username`, `item_name`, `item_type`, `db_name`, `table_name`)\"\n            . \" VALUES (\"\n            . \"'\" . PMA_Util::sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . \"',\"\n            . \"'\" . PMA_Util::sqlAddSlashes($itemName) . \"',\"\n            . \"'\" . PMA_Util::sqlAddSlashes($itemType) . \"',\"\n            . \"'\" . PMA_Util::sqlAddSlashes($dbName) . \"',\"\n            . \"'\" . (! empty($tableName)? PMA_Util::sqlAddSlashes($tableName) : \"\" )\n            . \"')\";\n        PMA_queryAsControlUser($sqlQuery, false);\n    }\n\n    /**\n     * Remove a hidden item of navigation tree from the\n     * list of hidden items in PMA database.\n     *\n     * @param string $itemName  name of the navigation tree item\n     * @param string $itemType  type of the navigation tree item\n     * @param string $dbName    database name\n     * @param string $tableName table name if applicable\n     *\n     * @return void\n     */\n    public function unhideNavigationItem(\n        $itemName, $itemType, $dbName, $tableName = null\n    ) {\n        $navTable = PMA_Util::backquote($GLOBALS['cfgRelation']['db'])\n            . \".\" . PMA_Util::backquote($GLOBALS['cfgRelation']['navigationhiding']);\n        $sqlQuery = \"DELETE FROM \" . $navTable\n            . \" WHERE\"\n            . \" `username`='\"\n            . PMA_Util::sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . \"'\"\n            . \" AND `item_name`='\" . PMA_Util::sqlAddSlashes($itemName) . \"'\"\n            . \" AND `item_type`='\" . PMA_Util::sqlAddSlashes($itemType) . \"'\"\n            . \" AND `db_name`='\" . PMA_Util::sqlAddSlashes($dbName) . \"'\"\n            . (! empty($tableName)\n                ? \" AND `table_name`='\" . PMA_Util::sqlAddSlashes($tableName) . \"'\"\n                : \"\"\n            );\n        PMA_queryAsControlUser($sqlQuery, false);\n    }\n\n    /**\n     * Returns HTML for the dialog to show hidden nativation items.\n     *\n     * @param string $dbName    database name\n     * @param string $itemType  type of the items to include\n     * @param string $tableName table name\n     *\n     * @return string HTML for the dialog to show hidden nativation items\n     */\n    public function getItemUnhideDialog($dbName, $itemType = null, $tableName = null)\n    {\n        $html  = '<form method=\"post\" action=\"navigation.php\" class=\"ajax\">';\n        $html .= '<fieldset>';\n        $html .= PMA_URL_getHiddenInputs($dbName, $tableName);\n\n        $navTable = PMA_Util::backquote($GLOBALS['cfgRelation']['db'])\n            . \".\" . PMA_Util::backquote($GLOBALS['cfgRelation']['navigationhiding']);\n        $sqlQuery = \"SELECT `item_name`, `item_type` FROM \" . $navTable\n            . \" WHERE `username`='\"\n            . PMA_Util::sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . \"'\"\n            . \" AND `db_name`='\" . PMA_Util::sqlAddSlashes($dbName) . \"'\"\n            . \" AND `table_name`='\"\n            . (! empty($tableName) ? PMA_Util::sqlAddSlashes($tableName) : '') . \"'\";\n        $result = PMA_queryAsControlUser($sqlQuery, false);\n\n        $hidden = array();\n        if ($result) {\n            while ($row = $GLOBALS['dbi']->fetchArray($result)) {\n                $type = $row['item_type'];\n                if (! isset($hidden[$type])) {\n                    $hidden[$type] = array();\n                }\n                $hidden[$type][] = $row['item_name'];\n            }\n        }\n        $GLOBALS['dbi']->freeResult($result);\n\n        $typeMap = array(\n            'event' => __('Events:'),\n            'function' => __('Functions:'),\n            'procedure' => __('Procedures:'),\n            'table' => __('Tables:'),\n            'view' => __('Views:'),\n        );\n        if (empty($tableName)) {\n            $first = true;\n            foreach ($typeMap as $t => $lable) {\n                if ((empty($itemType) || $itemType == $t)\n                    && isset($hidden[$t])\n                ) {\n                    $html .= (! $first ? '<br/>' : '')\n                        . '<strong>' . $lable . '</strong>';\n                    $html .= '<table width=\"100%\"><tbody>';\n                    $odd = true;\n                    foreach ($hidden[$t] as $hiddenItem) {\n                        $html .= '<tr class=\"' . ($odd ? 'odd' : 'even') . '\">';\n                        $html .= '<td>' . htmlspecialchars($hiddenItem) . '</td>';\n                        $html .= '<td style=\"width:80px\"><a href=\"navigation.php?'\n                            . PMA_URL_getCommon()\n                            . '&unhideNavItem=true'\n                            . '&itemType=' . $t\n                            . '&itemName=' . urldecode($hiddenItem)\n                            . '&dbName=' . urldecode($dbName) . '\"'\n                            . ' class=\"unhideNavItem ajax\">'\n                            . PMA_Util::getIcon('lightbulb.png', __('Show'))\n                            .  '</a></td>';\n                        $odd = ! $odd;\n                    }\n                    $html .= '</tbody></table>';\n                    $first = false;\n                }\n            }\n        }\n\n        $html .= '</fieldset>';\n        $html .= '</form>';\n        return $html;\n    }\n}\n?>\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Functionality for the navigation tree\n *\n * @package PhpMyAdmin-Navigation\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * Represents a node that is a concrete child of a database node\n *\n * @package PhpMyAdmin-Navigation\n */\nabstract class Node_DatabaseChild extends Node\n{\n    /**\n     * Returns HTML for hide button displayed infront of the database child node\n     *\n     * @return String HTML for hide button\n     */\n    public function getHtmlForControlButtons()\n    {\n        $ret = '';\n        $cfgRelation = PMA_getRelationsParam();\n        if ($cfgRelation['navwork']) {\n            $db   = $this->realParent()->real_name;\n            $item = $this->real_name;\n            $ret  = '<span class=\"navItemControls\">'\n                . '<a href=\"navigation.php?'\n                . PMA_URL_getCommon()\n                . '&hideNavItem=true'\n                . '&itemType=' . urldecode($this->getItemType())\n                . '&itemName=' . urldecode($item)\n                . '&dbName=' . urldecode($db) . '\"'\n                . ' class=\"hideNavItem ajax\">'\n                . PMA_Util::getImage('lightbulb_off.png', __('Hide'))\n                . '</a></span>';\n        }\n        return $ret;\n    }\n\n    /**\n     * Returns the type of the item reprsented by the node.\n     *\n     * @return string type of the item\n     */\n    protected abstract function getItemType();\n}\n?>\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * This class is responsible for instanciating\n * the various components of the navigation panel\n *\n * @package PhpMyAdmin-navigation\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\nrequire_once 'libraries/navigation/NodeFactory.class.php';\nrequire_once 'libraries/navigation/NavigationHeader.class.php';\nrequire_once 'libraries/navigation/NavigationTree.class.php';\n\n/**\n * The navigation panel - displays server, db and table selection tree\n *\n * @package PhpMyAdmin-Navigation\n */\nclass PMA_Navigation\n{\n    /**\n     * Initialises the class\n     */\n    public function __construct()\n    {\n        if (empty($GLOBALS['token'])) {\n            $GLOBALS['token'] = $_SESSION[' PMA_token '];\n        }\n    }\n\n    /**\n     * Renders the navigation tree, or part of it\n     *\n     * @return string The navigation tree\n     */\n    public function getDisplay()\n    {\n        /* Init */\n        $retval = '';\n        if (! PMA_Response::getInstance()->isAjax()) {\n            $header = new PMA_NavigationHeader();\n            $retval = $header->getDisplay();\n        }\n        $tree = new PMA_NavigationTree();\n        if (! PMA_Response::getInstance()->isAjax()\n            || ! empty($_REQUEST['full'])\n            || ! empty($_REQUEST['reload'])\n        ) {\n            $treeRender = $tree->renderState();\n        } else {\n            $treeRender = $tree->renderPath();\n        }\n\n        if (! $treeRender) {\n            $retval .= PMA_Message::error(\n                __('An error has occurred while loading the navigation tree')\n            )->getDisplay();\n        } else {\n            $retval .= $treeRender;\n        }\n\n        if (! PMA_Response::getInstance()->isAjax()) {\n            // closes the tags that were opened by the navigation header\n            $retval .= '</div>';\n            $retval .= '</div>';\n            $retval .= '</div>';\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Add an item of navigation tree to the hidden items list in PMA database.\n     *\n     * @param string $itemName  name of the navigation tree item\n     * @param string $itemType  type of the navigation tree item\n     * @param string $dbName    database name\n     * @param string $tableName table name if applicable\n     *\n     * @return void\n     */\n    public function hideNavigationItem(\n        $itemName, $itemType, $dbName, $tableName = null\n    ) {\n        $navTable = PMA_Util::backquote($GLOBALS['cfgRelation']['db'])\n            . \".\" . PMA_Util::backquote($GLOBALS['cfgRelation']['navigationhiding']);\n        $sqlQuery = \"INSERT INTO \" . $navTable\n            . \"(`username`, `item_name`, `item_type`, `db_name`, `table_name`)\"\n            . \" VALUES (\"\n            . \"'\" . PMA_Util::sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . \"',\"\n            . \"'\" . PMA_Util::sqlAddSlashes($itemName) . \"',\"\n            . \"'\" . PMA_Util::sqlAddSlashes($itemType) . \"',\"\n            . \"'\" . PMA_Util::sqlAddSlashes($dbName) . \"',\"\n            . \"'\" . (! empty($tableName)? PMA_Util::sqlAddSlashes($tableName) : \"\" )\n            . \"')\";\n        PMA_queryAsControlUser($sqlQuery, false);\n    }\n\n    /**\n     * Remove a hidden item of navigation tree from the\n     * list of hidden items in PMA database.\n     *\n     * @param string $itemName  name of the navigation tree item\n     * @param string $itemType  type of the navigation tree item\n     * @param string $dbName    database name\n     * @param string $tableName table name if applicable\n     *\n     * @return void\n     */\n    public function unhideNavigationItem(\n        $itemName, $itemType, $dbName, $tableName = null\n    ) {\n        $navTable = PMA_Util::backquote($GLOBALS['cfgRelation']['db'])\n            . \".\" . PMA_Util::backquote($GLOBALS['cfgRelation']['navigationhiding']);\n        $sqlQuery = \"DELETE FROM \" . $navTable\n            . \" WHERE\"\n            . \" `username`='\"\n            . PMA_Util::sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . \"'\"\n            . \" AND `item_name`='\" . PMA_Util::sqlAddSlashes($itemName) . \"'\"\n            . \" AND `item_type`='\" . PMA_Util::sqlAddSlashes($itemType) . \"'\"\n            . \" AND `db_name`='\" . PMA_Util::sqlAddSlashes($dbName) . \"'\"\n            . (! empty($tableName)\n                ? \" AND `table_name`='\" . PMA_Util::sqlAddSlashes($tableName) . \"'\"\n                : \"\"\n            );\n        PMA_queryAsControlUser($sqlQuery, false);\n    }\n\n    /**\n     * Returns HTML for the dialog to show hidden nativation items.\n     *\n     * @param string $dbName    database name\n     * @param string $itemType  type of the items to include\n     * @param string $tableName table name\n     *\n     * @return string HTML for the dialog to show hidden nativation items\n     */\n    public function getItemUnhideDialog($dbName, $itemType = null, $tableName = null)\n    {\n        $html  = '<form method=\"post\" action=\"navigation.php\" class=\"ajax\">';\n        $html .= '<fieldset>';\n        $html .= PMA_URL_getHiddenInputs($dbName, $tableName);\n\n        $navTable = PMA_Util::backquote($GLOBALS['cfgRelation']['db'])\n            . \".\" . PMA_Util::backquote($GLOBALS['cfgRelation']['navigationhiding']);\n        $sqlQuery = \"SELECT `item_name`, `item_type` FROM \" . $navTable\n            . \" WHERE `username`='\"\n            . PMA_Util::sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . \"'\"\n            . \" AND `db_name`='\" . PMA_Util::sqlAddSlashes($dbName) . \"'\"\n            . \" AND `table_name`='\"\n            . (! empty($tableName) ? PMA_Util::sqlAddSlashes($tableName) : '') . \"'\";\n        $result = PMA_queryAsControlUser($sqlQuery, false);\n\n        $hidden = array();\n        if ($result) {\n            while ($row = $GLOBALS['dbi']->fetchArray($result)) {\n                $type = $row['item_type'];\n                if (! isset($hidden[$type])) {\n                    $hidden[$type] = array();\n                }\n                $hidden[$type][] = $row['item_name'];\n            }\n        }\n        $GLOBALS['dbi']->freeResult($result);\n\n        $typeMap = array(\n            'event' => __('Events:'),\n            'function' => __('Functions:'),\n            'procedure' => __('Procedures:'),\n            'table' => __('Tables:'),\n            'view' => __('Views:'),\n        );\n        if (empty($tableName)) {\n            $first = true;\n            foreach ($typeMap as $t => $lable) {\n                if ((empty($itemType) || $itemType == $t)\n                    && isset($hidden[$t])\n                ) {\n                    $html .= (! $first ? '<br/>' : '')\n                        . '<strong>' . $lable . '</strong>';\n                    $html .= '<table width=\"100%\"><tbody>';\n                    $odd = true;\n                    foreach ($hidden[$t] as $hiddenItem) {\n                        $html .= '<tr class=\"' . ($odd ? 'odd' : 'even') . '\">';\n                        $html .= '<td>' . htmlspecialchars($hiddenItem) . '</td>';\n                        $html .= '<td style=\"width:80px\"><a href=\"navigation.php?'\n                            . PMA_URL_getCommon()\n                            . '&unhideNavItem=true'\n                            . '&itemType=' . urlencode($t)\n                            . '&itemName=' . urlencode($hiddenItem)\n                            . '&dbName=' . urlencode($dbName) . '\"'\n                            . ' class=\"unhideNavItem ajax\">'\n                            . PMA_Util::getIcon('lightbulb.png', __('Show'))\n                            .  '</a></td>';\n                        $odd = ! $odd;\n                    }\n                    $html .= '</tbody></table>';\n                    $first = false;\n                }\n            }\n        }\n\n        $html .= '</fieldset>';\n        $html .= '</form>';\n        return $html;\n    }\n}\n?>\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Functionality for the navigation tree\n *\n * @package PhpMyAdmin-Navigation\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * Represents a node that is a concrete child of a database node\n *\n * @package PhpMyAdmin-Navigation\n */\nabstract class Node_DatabaseChild extends Node\n{\n    /**\n     * Returns HTML for hide button displayed infront of the database child node\n     *\n     * @return String HTML for hide button\n     */\n    public function getHtmlForControlButtons()\n    {\n        $ret = '';\n        $cfgRelation = PMA_getRelationsParam();\n        if ($cfgRelation['navwork']) {\n            $db   = $this->realParent()->real_name;\n            $item = $this->real_name;\n            $ret  = '<span class=\"navItemControls\">'\n                . '<a href=\"navigation.php?'\n                . PMA_URL_getCommon()\n                . '&hideNavItem=true'\n                . '&itemType=' . urlencode($this->getItemType())\n                . '&itemName=' . urlencode($item)\n                . '&dbName=' . urlencode($db) . '\"'\n                . ' class=\"hideNavItem ajax\">'\n                . PMA_Util::getImage('lightbulb_off.png', __('Hide'))\n                . '</a></span>';\n        }\n        return $ret;\n    }\n\n    /**\n     * Returns the type of the item reprsented by the node.\n     *\n     * @return string type of the item\n     */\n    protected abstract function getItemType();\n}\n?>\n"], "filenames": ["libraries/navigation/Navigation.class.php", "libraries/navigation/Nodes/Node_DatabaseChild.class.php"], "buggy_code_start_loc": [192, 35], "buggy_code_end_loc": [195, 38], "fixing_code_start_loc": [192, 35], "fixing_code_end_loc": [195, 38], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.1.x before 4.1.14.1 and 4.2.x before 4.2.4 allow remote authenticated users to inject arbitrary web script or HTML via a crafted table name that is improperly handled after a (1) hide or (2) unhide action.", "other": {"cve": {"id": "CVE-2014-4349", "sourceIdentifier": "cve@mitre.org", "published": "2014-06-25T11:19:22.573", "lastModified": "2015-09-02T17:11:09.517", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.1.x before 4.1.14.1 and 4.2.x before 4.2.4 allow remote authenticated users to inject arbitrary web script or HTML via a crafted table name that is improperly handled after a (1) hide or (2) unhide action."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de XSS en phpMyAdmin 4.1.x anterior a 4.1.14.1 y 4.2.x anterior a 4.2.4 permiten a usuarios remotos autenticados inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de un nombre de tabla manipulado que no se maneja debidamente despu\u00e9s de una acci\u00f3n de (1) esconder o (2) no esconder."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEC525D5-EA90-4F01-B1D3-64F4BFBFC4DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "8ACC297E-A54A-4C92-9BCB-CDDA0C7E56C1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "4FA4B695-DD00-45FE-8A74-A34E9920EE23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "BC38B8F8-DB1C-4A7D-A15B-390754687F18"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "8F0A53D6-E68D-417E-9B72-55F603EBDFD5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "2B45FC64-ECDF-474A-9151-30667543760E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "12D9ACD9-BA79-4AC0-800D-A66519799DBE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "2E5DD938-C9C2-4542-8AD5-4C11FBFA43CE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "0150F164-B7C2-4E5C-886C-49D651CF307F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "FB765223-DB56-4327-B150-1D633E4AB41C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.6:*:*:*:*:*:*:*", "matchCriteriaId": "58102B9D-C071-43C0-B412-7733E302A944"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.7:*:*:*:*:*:*:*", "matchCriteriaId": "45CDE76C-38B3-41F1-83E7-34F00A4E009A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.8:*:*:*:*:*:*:*", "matchCriteriaId": "EA6AE567-72BB-4B5C-A9B3-AF406691491F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.9:*:*:*:*:*:*:*", "matchCriteriaId": "A13760E1-EA18-434E-8075-D330AEE05D21"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.10:*:*:*:*:*:*:*", "matchCriteriaId": "8A6A3056-B853-4880-BECF-799791B5C660"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.11:*:*:*:*:*:*:*", "matchCriteriaId": "09FA5A47-CEF2-4525-BBE4-D1205172300B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.12:*:*:*:*:*:*:*", "matchCriteriaId": "4D228D62-3E19-4005-A995-39AFF30A978B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.13:*:*:*:*:*:*:*", "matchCriteriaId": "C4FF2BA7-F240-4A5B-AC22-62F07D26BB29"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.14:*:*:*:*:*:*:*", "matchCriteriaId": "8AC849CA-2056-491C-B6B1-3D3A4825BF63"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2014-08/msg00045.html", "source": "cve@mitre.org"}, {"url": "http://phpmyadmin.net/home_page/security/PMASA-2014-3.php", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "http://www.securityfocus.com/bid/68205", "source": "cve@mitre.org"}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/d4f754c937f9e2c0beadff5b2e38215dde1d6a79", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/daa98d0c7ed24b529dc5df0d5905873acd0b00be", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/d4f754c937f9e2c0beadff5b2e38215dde1d6a79"}}