{"buggy_code": ["#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n# copy a file to all hosts\n\ntrap \"exit 1\" SIGHUP SIGTERM SIGINT\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\n. /opt/opa/tools/ff_funcs\n\ntemp=/tmp/opascpall$$\ntrap \"rm -f $temp\" 1 2 3 9 15\n\nUsage_full()\n{\n\techo \"Usage: opascpall [-p] [-r] [-f hostfile] [-h 'hosts'] [-u user] source_file ... dest_file\" >&2\n\techo \"       opascpall -t [-p] [-f hostfile] [-h 'hosts'] [-u user] [source_dir [dest_dir]]\" >&2\n\techo \"              or\" >&2\n\techo \"       opascpall --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -p - perform copy in parallel on all hosts\" >&2\n\techo \"   -r - recursive copy of directories\" >&2\n\techo \"   -t - optimized recursive copy of directories using tar\" >&2\n\techo \"        if dest_dir omitted, defaults to current directory name\" >&2\n\techo \"        if source_dir and dest_dir omitted, both default to current directory\" >&2\n\techo \"   -h hosts - list of hosts to copy to\" >&2\n\techo \"   -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"   -u user - user to perform copy to, default is current user code\" >&2\n\techo \"   source_file - list of source files to copy\" >&2\n\techo \"   source_dir - source directory to copy, if omitted . is used\" >&2\n\techo \"   dest_file - destination for copy.\" >&2\n\techo \"        If more than 1 source file, this must be a directory\" >&2\n\techo \"   dest_dir - destination for copy.  If omitted current directory name is used\" >&2\n\techo \" Environment:\" >&2\n\techo \"   HOSTS - list of hosts, used if -h option not supplied\" >&2\n\techo \"   HOSTS_FILE - file containing list of hosts, used in absence of -f and -h\" >&2\n\techo \"   FF_MAX_PARALLEL - when -p option is used, maximum concurrent operations\" >&2\n\techo \"example:\">&2\n\techo \"   opascpall MPI-PMB /root/MPI-PMB\" >&2\n\techo \"   opascpall -t -p /opt/opa/src/mpi_apps /opt/opa/src/mpi_apps\" >&2\n\techo \"   opascpall a b c /root/tools/\" >&2\n\techo \"   opascpall -h 'arwen elrond' a b c /root/tools\" >&2\n\techo \"   HOSTS='arwen elrond' opascpall a b c /root/tools\" >&2\n\techo \"user@ syntax cannot be used in filenames specified\" >&2\n\techo \"To copy from hosts in the cluster to this host, use opauploadall\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opascpall [-p] [-r] [-f hostfile] source_file ... dest_file\" >&2\n\techo \"       opascpall -t [-p] [-f hostfile] [source_dir [dest_dir]]\" >&2\n\techo \"              or\" >&2\n\techo \"       opascpall --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -p - perform copy in parallel on all hosts\" >&2\n\techo \"   -r - recursive copy of directories\" >&2\n\techo \"   -t - optimized recursive copy of directories using tar\" >&2\n\techo \"        if dest_dir omitted, defaults to current directory name\" >&2\n\techo \"        if source_dir and dest_dir omitted, both default to current directory\" >&2\n\techo \"   -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"   source_file - list of source files to copy\" >&2\n\techo \"   source_dir - source directory to copy, if omitted . is used\" >&2\n\techo \"   dest_file - destination for copy.\" >&2\n\techo \"        If more than 1 source file, this must be a directory\" >&2\n\techo \"   dest_dir - destination for copy.  If omitted current directory name is used\" >&2\n\techo \"example:\">&2\n\techo \"   opascpall MPI-PMB /root/MPI-PMB\" >&2\n\techo \"   opascpall -t -p /opt/opa/src/mpi_apps /opt/opa/src/mpi_apps\" >&2\n\techo \"   opascpall a b c /root/tools/\" >&2\n\techo \"user@ syntax cannot be used in filenames specified\" >&2\n\techo \"To copy from hosts in the cluster to this host, use opauploadall\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nuser=`id -u -n`\nopts=\ntopt=n\npopt=n\nwhile getopts f:h:u:prt param\ndo\n\tcase $param in\n\th)\n\t\tHOSTS=\"$OPTARG\";;\n\tf)\n\t\tHOSTS_FILE=\"$OPTARG\";;\n\tu)\n\t\tuser=\"$OPTARG\";;\n\tp)\n\t\topts=\"$opts -q\"\n\t\tpopt=y;;\n\tr)\n\t\topts=\"$opts -r\";;\n\tt)\n\t\ttopt=y;;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\nif [ \"$topt\" = \"n\" -a $# -lt 2 ]\nthen\n\tUsage\nfi\nif [ \"$topt\" = \"y\" -a $# -gt 2 ]\nthen\n\tUsage\nfi\ncheck_host_args opascpall\n\nif [ \"$topt\" = \"n\" ]\nthen\n\t# remove last name from the list\n\tfiles=\n\tdest=\n\tfor file in \"$@\"\n\tdo\n\t\tif [ ! -z \"$dest\" ]\n\t\tthen\n\t\t\tfiles=\"$files $dest\"\n\t\tfi\n\t\tdest=\"$file\"\n\tdone\n\t\t\n\trunning=0\n\tfor hostname in $HOSTS\n\tdo\n\t\tif [ \"$popt\" = \"y\" ]\n\t\tthen\n\t\t\tif [ $running -ge $FF_MAX_PARALLEL ]\n\t\t\tthen\n\t\t\t\twait\n\t\t\t\trunning=0\n\t\t\tfi\n\t\t\techo \"scp $opts $files $user@[$hostname]:$dest\"\n\t\t\tscp $opts $files $user@\\[$hostname\\]:$dest &\n\t\t\trunning=$(( $running + 1))\n\t\telse\n\t\t\techo \"scp $opts $files $user@[$hostname]:$dest\"\n\t\t\tscp $opts $files $user@\\[$hostname\\]:$dest\n\t\tfi\n\tdone\n\twait\nelse\n\tif [ $# -lt 2 ]\n\tthen\n\t\tdestdir=$PWD\n\telse\n\t\tdestdir=$2\n\tfi\n\tif [ $# -lt 1 ]\n\tthen\n\t\tsrcdir=$PWD\n\telse\n\t\tsrcdir=$1\n\tfi\n\tif [ ! -d $srcdir ]\n\tthen\n\t\techo \"opascpall: $srcdir: No such directory\" >&2\n\t\tUsage\n\tfi\n\tcd $srcdir\n\ttar cvfz $temp .\n\trunning=0\n\tfor hostname in $HOSTS\n\tdo\n\t\tif [ \"$popt\" = \"y\" ]\n\t\tthen\n\t\t\tif [ $running -ge $FF_MAX_PARALLEL ]\n\t\t\tthen\n\t\t\t\twait\n\t\t\t\trunning=0\n\t\t\tfi\n\t\t\t(\n\t\t\t\techo \"scp $opts $temp $user@[$hostname]:$temp\"\n\t\t\t\tscp $opts $temp $user@\\[$hostname\\]:$temp\n\t\t\t\techo \"$user@$hostname: mkdir -p $destdir; cd $destdir; tar xfz $temp; rm -f $temp\"\n\t\t\t\tssh $user@$hostname \"mkdir -p $destdir; cd $destdir; tar xfz $temp; rm -f $temp\"\n\t\t\t) &\n\t\t\trunning=$(( $running + 1))\n\t\telse\n\t\t\techo \"scp $opts $temp $user@[$hostname]:$temp\"\n\t\t\tscp $opts $temp $user@\\[$hostname\\]:$temp\n\t\t\techo \"$user@$hostname: mkdir -p $destdir; cd $destdir; tar xfz $temp; rm -f $temp\"\n\t\t\tssh $user@$hostname \"mkdir -p $destdir; cd $destdir; tar xfz $temp; rm -f $temp\"\n\t\tfi\n\tdone\n\twait\n\trm -f $temp\nfi\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n# perform installation verification on hosts in a cluster\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\n. $TOOLSDIR/ff_funcs\n\nif [ x\"$FF_IPOIB_SUFFIX\" = xNONE ]\nthen\n\texport FF_IPOIB_SUFFIX=\"\"\nfi\n\ntemp=/tmp/opatest$$\ntrap \"rm -f $temp\" 1 2 3 9 15\n\n# identify how we are being run, affects valid options and usage\nmode=opatest\ncmd=`basename $0`\ncase $cmd in\nopahostadmin|opaswitchadmin|opachassisadmin) mode=$cmd;;\nesac\n\nUsage_opatest_full()\n{\n\techo \"Usage: opatest [-cCn] [-i ipoib_suffix] [-f hostfile] [-F chassisfile]\" >&2\n\techo \"              [-h 'hosts'] [-H 'chassis'] [-N 'nodes'] [-L nodefile]\" >&2\n\techo \"              [-r release] [-I install_options] [-U upgrade_options] [-d dir]\" >&2\n\techo \"              [-T product] [-P packages] [-m netmask] [-a action] [-S] [-O]\" >&2\n\techo \"              [-t portsfile] [-p ports] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opatest --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -C - perform operation against chassis, default is hosts\" >&2\n\techo \"  -n - perform operation against IB node, default is hosts\" >&2\n\techo \"  -i ipoib_suffix - suffix to apply to host names to create ipoib host names\" >&2\n\techo \"         default is '$FF_IPOIB_SUFFIX'\" >&2\n\techo \"  -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"  -F chassisfile - file with chassis in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/chassis\" >&2\n\techo \"  -h hosts - list of hosts to execute operation against\" >&2\n\techo \"  -H chassis - list of chassis to execute operation against\" >&2\n\techo \"  -N nodes - list of IB nodes to execute operation against\" >&2\n\techo \"  -L nodefile - file with IB nodes in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/switches\" >&2\n\techo \"  -r release - IntelOPA release to load/upgrade to, default is $FF_PRODUCT_VERSION\" >&2\n\techo \"  -d dir - directory to get product.release.tgz from for load/upgrade\" >&2\n\techo \"           to upload FM config files to for fmgetconfig (default is uploads)\" >&2\n\techo \"           to upload capture files to for capture (default is uploads)\" >&2\n\techo \"  -I install_options - IntelOPA install options\" >&2\n\techo \"              or for Chassis fmconfig and fmcontrol:\" >&2\n\techo \"                 disable - disable FM start at chassis boot\" >&2\n\techo \"                 enable - enable FM start on master at chassis boot\" >&2\n\techo \"                 enableall - enable FM start on all MM at chassis boot\" >&2\n\techo \"  -U upgrade_options - IntelOPA upgrade options\" >&2\n\techo \"  -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"           fabric(s) for switch access, default is /etc/sysconfig/opa/ports\" >&2\n\techo \"  -p ports - list of local HFI ports used to access fabric(s) for switch access\" >&2\n\techo \"           default is 1st active port\" >&2\n\techo \"           This is specified as hfi:port\" >&2\n\techo \"              0:0 = 1st active port in system\" >&2\n\techo \"              0:y = port y within system\" >&2\n\techo \"              x:0 = 1st active port on HFI x\" >&2\n\techo \"              x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"  -T product - IntelOPA product type to install, default is $FF_PRODUCT\" >&2\n\techo \"           Other options include: IntelOPA-Basic, InfiniServBasic, InfiniServPerf, InfiniServMgmt, InfiniServTools, etc\" >&2\n\techo \"  -P packages - IntelOPA packages to install, default is 'iba ipoib mpi'\" >&2\n\techo -n \"                Host allows:\" >&2\n\t/sbin/opaconfig -C >&2\n\techo \"                or for Chassis upgrade, filenames/directories of firmware\" >&2\n\techo \"                   images to install.  For directories specified, all\" >&2\n\techo \"                   .pkg files in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for Chassis fmconfig, filename of FM config file to use\" >&2\n\techo \"                or for Chassis fmgetconfig, filename to upload to (default\" >&2\n\techo \"                   opafm.xml)\" >&2\n\techo \"                or for Switch upgrade, filename/directory of firmware\" >&2\n\techo \"                   image to install.  For directory specified,\" >&2\n\techo \"                   .emfw file in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for Switch capture, filename to upload to (default\" >&2\n\techo \"                   switchcapture)\" >&2\n\techo \"  -m netmask - IPoIB netmask to use for configipoib\" >&2\n\techo \"  -a action - action for supplied file\" >&2\n\techo \"              For Chassis/Switch upgrade:\" >&2\n\techo \"                 push   - ensure firmware is in primary or alternate\" >&2\n    echo \"                          (alternate only applicable to chassis)\" >&2\n\techo \"                 select - ensure firmware is in primary\" >&2\n\techo \"                 run    - ensure firmware is in primary and running\" >&2\n\techo \"                 default is push for chassis, select for switch\" >&2\n\techo \"              For Chassis fmconfig:\" >&2\n\techo \"                 push   - ensure config file is in chassis\" >&2\n\techo \"                 run    - after push, restart FM on master, stop on slave\" >&2\n\techo \"                 runall - after push, restart FM on all MM\" >&2\n\techo \"                 default is push\" >&2\n\techo \"              For Chassis fmcontrol:\" >&2\n\techo \"                 stop   - stop FM on all MM\" >&2\n\techo \"                 run    - make sure FM running on master, stopped on slave\" >&2\n\techo \"                 runall - make sure FM running on all MM\" >&2\n\techo \"                 restart- restart FM on master, stop on slave\" >&2\n\techo \"                 restartall- restart FM on all MM\" >&2\n\techo \"  -S - securely prompt for password for user on remote system/chassis\" >&2\n\techo \"  -O - override: for Switch upgrade, bypass version checks and force update unconditionally\" >&2\n\techo \"  operation - operation to perform.\" >&2\n\techo \"    Host Operation can be one or more of:\" >&2\n\techo \"     load - initial install of all hosts\" >&2\n\techo \"     upgrade - upgrade install of all hosts\" >&2\n\techo \"     configipoib - create ifcfg-ib1 using host IP addr from /etc/hosts\" >&2\n\techo \"     reboot - reboot hosts, ensure they go down and come back\" >&2\n\techo \"     sacache - confirm sacache has all hosts in it\" >&2\n\techo \"     ipoibping - verify this host can ping each host via IPoIB\" >&2\n\techo \"     mpiperf - verify latency and bandwidth for each host\" >&2\n\techo \"     mpiperfdeviation - check for latency and bandwidth tolerance deviation between hosts\" >&2\n\techo \"    Chassis Operation can be one or more of:\" >&2\n\techo \"     reboot - reboot chassis, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up chassis configuration\" >&2\n\techo \"     upgrade - upgrade install of all chassis\" >&2\n\techo \"     getconfig - gets basic configuration of chassis\" >&2\n\techo \"     fmconfig - FM config operation on all chassis\" >&2\n\techo \"     fmgetconfig - Fetch FM config from all chassis\" >&2\n\techo \"     fmcontrol - Control FM on all chassis\" >&2\n    echo \"    IB Node Operation can be one or more of:\" >&2\n    echo \"     reboot - reboot IB node, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up IB node configuration\" >&2\n    echo \"     upgrade - upgrade install of all IB nodes\" >&2\n    echo \"     info - report f/w & h/w version, part number, and data rate capability of all IB nodes\" >&2\n    echo \"     hwvpd - complete hardware VPD report of all IB nodes\" >&2\n    echo \"     ping - ping all IB nodes - test for presence\" >&2\n    echo \"     fwverify - report integrity of failsafe firmware of all IB nodes\" >&2\n\techo \"     capture - get switch hardware and firmware state capture of all IB nodes\" >&2\n\techo \"     getconfig - get port configurations of a externally managed switch\" >&2\n\techo \" Environment:\" >&2\n\techo \"   HOSTS - list of hosts, used if -h option not supplied\" >&2\n\techo \"   CHASSIS - list of chassis, used if -C used and -H and -F option not supplied\" >&2\n\techo \"   OPASWITCHES - list of nodes, used if -n used and -N and -L option not supplied\" >&2\n\techo \"   HOSTS_FILE - file containing list of hosts, used in absence of -f and -h\" >&2\n\techo \"   CHASSIS_FILE - file containing list of chassis, used in absence of -F and -H\" >&2\n\techo \"   OPASWITCHES_FILE - file containing list of nodes, used in absence of -N and -L\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"   FF_SERIALIZE_OUTPUT - serialize output of parallel operations (yes or no)\" >&2\n\techo \"   UPLOADS_DIR - directory to upload to, used in absence of -d\" >&2\n\techo \"for example:\" >&2\n\techo \"   opatest -c reboot\" >&2\n\techo \"   opatest upgrade\" >&2\n\techo \"   opatest -h 'elrond arwen' reboot\" >&2\n\techo \"   HOSTS='elrond arwen' opatest reboot\" >&2\n\techo \"   opatest -C -a run -P '*.pkg' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 0\n}\nUsage_opahostadmin_full()\n{\n\techo \"Usage: opahostadmin [-c] [-i ipoib_suffix] [-f hostfile] [-h 'hosts'] \" >&2\n\techo \"              [-r release] [-I install_options] [-U upgrade_options] [-d dir]\" >&2\n\techo \"              [-T product] [-P packages] [-m netmask] [-S] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opahostadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -i ipoib_suffix - suffix to apply to host names to create ipoib host names\" >&2\n\techo \"         default is '$FF_IPOIB_SUFFIX'\" >&2\n\techo \"  -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"  -h hosts - list of hosts to execute operation against\" >&2\n\techo \"  -r release - IntelOPA release to load/upgrade to, default is $FF_PRODUCT_VERSION\" >&2\n\techo \"  -d dir - directory to get product.release.tgz from for load/upgrade\" >&2\n\techo \"  -I install_options - IntelOPA install options\" >&2\n\techo \"  -U upgrade_options - IntelOPA upgrade options\" >&2\n\techo \"  -T product - IntelOPA product type to install, default is $FF_PRODUCT\" >&2\n\techo \"           Other options include: IntelOPA-Basic, InfiniServBasic, InfiniServPerf, InfiniServMgmt, InfiniServTools, etc\" >&2\n\techo \"  -P packages - IntelOPA packages to install, default is 'iba ipoib mpi'\" >&2\n\techo -n \"                Host allows:\" >&2\n\t/sbin/opaconfig -C >&2\n\techo \"  -m netmask - IPoIB netmask to use for configipoib\" >&2\n\techo \"  -S - securely prompt for password for user on remote system\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n\techo \"     load - initial install of all hosts\" >&2\n\techo \"     upgrade - upgrade install of all hosts\" >&2\n\techo \"     configipoib - create ifcfg-ib1 using host IP addr from /etc/hosts\" >&2\n\techo \"     reboot - reboot hosts, ensure they go down and come back\" >&2\n\techo \"     sacache - confirm sacache has all hosts in it\" >&2\n\techo \"     ipoibping - verify this host can ping each host via IPoIB\" >&2\n\techo \"     mpiperf - verify latency and bandwitch for each host\" >&2\n\techo \"     mpiperfdeviation - check for latency and bandwidth tolerance deviation between hosts\" >&2\n\techo \" Environment:\" >&2\n\techo \"   HOSTS - list of hosts, used if -h option not supplied\" >&2\n\techo \"   HOSTS_FILE - file containing list of hosts, used in absence of -f and -h\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"   FF_SERIALIZE_OUTPUT - serialize output of parallel operations (yes or no)\" >&2\n\techo \"for example:\" >&2\n\techo \"   opahostadmin -c reboot\" >&2\n\techo \"   opahostadmin upgrade\" >&2\n\techo \"   opahostadmin -h 'elrond arwen' reboot\" >&2\n\techo \"   HOSTS='elrond arwen' opahostadmin reboot\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 0\n}\nUsage_opachassisadmin_full()\n{\n\techo \"Usage: opachassisadmin [-c] [-F chassisfile] [-H 'chassis'] \" >&2\n\techo \"              [-P packages] [-a action] [-I fm_bootstate]\" >&2\n    echo \"              [-S] [-d upload_dir] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opachassisadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -F chassisfile - file with chassis in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/chassis\" >&2\n\techo \"  -H chassis - list of chassis to execute operation against\" >&2\n\techo \"  -P packages - filenames/directories of firmware\" >&2\n\techo \"                   images to install.  For directories specified, all\" >&2\n\techo \"                   .pkg files in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for fmconfig, filename of FM config file to use\" >&2\n\techo \"                or for fmgetconfig, filename to upload to (default\" >&2\n\techo \"                   opafm.xml)\" >&2\n\techo \"  -a action - action for supplied file\" >&2\n\techo \"              For Chassis upgrade:\" >&2\n\techo \"                 push   - ensure firmware is in primary or alternate\" >&2\n\techo \"                 select - ensure firmware is in primary\" >&2\n\techo \"                 run    - ensure firmware is in primary and running\" >&2\n\techo \"                 default is push\" >&2\n\techo \"              For Chassis fmconfig:\" >&2\n\techo \"                 push   - ensure config file is in chassis\" >&2\n\techo \"                 run    - after push, restart FM on master, stop on slave\" >&2\n\techo \"                 runall - after push, restart FM on all MM\" >&2\n\techo \"              For Chassis fmcontrol:\" >&2\n\techo \"                 stop   - stop FM on all MM\" >&2\n\techo \"                 run    - make sure FM running on master, stopped on slave\" >&2\n\techo \"                 runall - make sure FM running on all MM\" >&2\n\techo \"                 restart- restart FM on master, stop on slave\" >&2\n\techo \"                 restartall- restart FM on all MM\" >&2\n\techo \"  -I fm_bootstate fmconfig and fmcontrol install options\" >&2\n\techo \"                 disable - disable FM start at chassis boot\" >&2\n\techo \"                 enable - enable FM start on master at chassis boot\" >&2\n\techo \"                 enableall - enable FM start on all MM at chassis boot\" >&2\n\techo \"  -d upload_dir - directory to upload FM config files to, default is uploads\" >&2\n\techo \"  -S - securely prompt for password for admin on chassis\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n\techo \"     reboot - reboot chassis, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up chassis configuration\" >&2\n\techo \"     upgrade - upgrade install of all chassis\" >&2\n\techo \"     getconfig - get basic configuration of chassis\" >&2\n\techo \"     fmconfig - FM config operation on all chassis\" >&2\n\techo \"     fmgetconfig - Fetch FM config from all chassis\" >&2\n\techo \"     fmcontrol - Control FM on all chassis\" >&2\n\techo \" Environment:\" >&2\n\techo \"   CHASSIS - list of chassis, used if -H and -F option not supplied\" >&2\n\techo \"   CHASSIS_FILE - file containing list of chassis, used in absence of -F and -H\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"   FF_SERIALIZE_OUTPUT - serialize output of parallel operations (yes or no)\" >&2\n\techo \"   UPLOADS_DIR - directory to upload to, used in absence of -d\" >&2\n\techo \"for example:\" >&2\n\techo \"   opachassisadmin -c reboot\" >&2\n\techo \"   opachassisadmin -P /root/ChassisFw4.2.0.0.1 upgrade\" >&2\n\techo \"   opachassisadmin -H 'chassis1 chassis2' reboot\" >&2\n\techo \"   CHASSIS='chassis1 chassis2' opachassisadmin reboot\" >&2\n\techo \"   opachassisadmin -a run -P '*.pkg' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 0\n}\nUsage_opaswitchadmin_full()\n{\n\techo \"Usage: opaswitchadmin [-c] [-N 'nodes'] [-L nodefile] [-d upload_dir]\" >&2\n\techo \"              [-O] [-P packages] [-a action]\" >&2\n\techo \"              [-t portsfile] [-p ports] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opaswitchadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -N nodes - list of IB nodes to execute operation against\" >&2\n\techo \"  -L nodefile - file with IB nodes in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/switches\" >&2\n\techo \"  -d upload_dir - directory to upload capture files to for capture\" >&2\n\techo \"                  (default is uploads)\" >&2\n\techo \"  -P packages - for upgrade, filename/directory of firmware\" >&2\n\techo \"                   image to install.  For directory specified,\" >&2\n\techo \"                   .emfw file in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for capture, filename to upload to (default switchcapture)\" >&2\n\techo \"  -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"           fabric(s) for switch access, default is /etc/sysconfig/opa/ports\" >&2\n\techo \"  -p ports - list of local HFI ports used to access fabric(s) for switch access\" >&2\n\techo \"           default is 1st active port\" >&2\n\techo \"           This is specified as hfi:port\" >&2\n\techo \"              0:0 = 1st active port in system\" >&2\n\techo \"              0:y = port y within system\" >&2\n\techo \"              x:0 = 1st active port on HFI x\" >&2\n\techo \"              x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"  -a action - action for firmware file for Switch upgrade\" >&2\n\techo \"              select - ensure firmware is in primary\" >&2\n\techo \"              run    - ensure firmware is in primary and running\" >&2\n\techo \"              default is select\" >&2\n\techo \"  -O - override: for firmware upgrade, bypass version checks and force update unconditionally\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n   echo \"     reboot - reboot switches, ensure they go down and come back\" >&2\n   echo \"     configure - run wizard to set up switch configuration\" >&2\n   echo \"     upgrade - upgrade install of all switches\" >&2\n   echo \"     info - report f/w & h/w version, part number, and data rate capability of all IB nodes\" >&2\n   echo \"     hwvpd - complete hardware VPD report of all IB nodes\" >&2\n   echo \"     ping - ping all IB nodes - test for presence\" >&2\n   echo \"     fwverify - report integrity of failsafe firmware of all IB nodes\" >&2\n   echo \"     capture - get switch hardware and firmware state capture of all IB nodes\" >&2\n   echo \"     getconfig - get port configurations of a externally managed switch\" >&2\n\techo \" Environment:\" >&2\n\techo \"   OPASWITCHES - list of nodes, used if -N and -L option not supplied\" >&2\n\techo \"   OPASWITCHES_FILE - file containing list of nodes, used in absence of -N and -L\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"   FF_SERIALIZE_OUTPUT - serialize output of parallel operations (yes or no)\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaswitchadmin -c reboot\" >&2\n\techo \"   opaswitchadmin -P /root/ChassisFw4.2.0.0.1 upgrade\" >&2\n\techo \"   opaswitchadmin -a run -P '*.emfw' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 0\n}\nUsage_full()\n{\n\tcase $mode in\n\topatest) Usage_opatest_full;;\n\topahostadmin) Usage_opahostadmin_full;;\n\topachassisadmin) Usage_opachassisadmin_full;;\n\topaswitchadmin) Usage_opaswitchadmin_full;;\n\tesac\n}\nUsage_opatest()\n{\n\techo \"Usage: opatest [-cCn] [-f hostfile] [-F chassisfile] [-L nodefile]\" >&2\n\techo \"              [-r release] [-d dir]\" >&2\n\techo \"              [-T product] [-P packages] [-a action] [-S] [-O] [-d upload_dir] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opatest --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -C - perform operation against chassis, default is hosts\" >&2\n\techo \"  -n - perform operation against IB node, default is hosts\" >&2\n\techo \"  -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"  -F chassisfile - file with chassis in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/chassis\" >&2\n\techo \"  -L nodefile - file with IB nodes in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/switches\" >&2\n\techo \"  -r release - IntelOPA release to load/upgrade to, default is $FF_PRODUCT_VERSION\" >&2\n\techo \"  -d dir - directory to get product.release.tgz from for load/upgrade\" >&2\n\techo \"           to upload FM config files to for fmgetconfig (default is uploads)\" >&2\n\techo \"           to upload capture files to for capture (default is uploads)\" >&2\n\techo \"  -T product - IntelOPA product type to install, default is $FF_PRODUCT\" >&2\n\techo \"           Other options include: IntelOPA-Basic, InfiniServBasic, InfiniServPerf, InfiniServMgmt, InfiniServTools, etc\" >&2\n\techo \"  -P packages - IntelOPA packages to install, default is 'iba ipoib mpi'\" >&2\n\techo -n \"                Host allows:\" >&2\n\t/sbin/opaconfig -C >&2\n\techo \"                or for Chassis upgrade, filenames/directories of firmware\" >&2\n\techo \"                   images to install.  For directories specified, all\" >&2\n\techo \"                   .pkg files in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for Chassis fmconfig, filename of FM config file to use\" >&2\n\techo \"                or for Chassis fmgetconfig, filename to upload to (default\" >&2\n\techo \"                   opafm.xml)\" >&2\n\techo \"                or for Switch upgrade, filename/directory of firmware\" >&2\n\techo \"                   image to install.  For directory specified,\" >&2\n\techo \"                   .emfw file in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for Switch capture, filename to upload to (default\" >&2\n\techo \"                   switchcapture)\" >&2\n\techo \"  -a action - action for supplied file\" >&2\n\techo \"              For Chassis/Switch upgrade:\" >&2\n\techo \"                 push   - ensure firmware is in primary or alternate\" >&2\n    echo \"                          (alternate only applicable to chassis)\" >&2\n\techo \"                 select - ensure firmware is in primary\" >&2\n\techo \"                 run    - ensure firmware is in primary and running\" >&2\n\techo \"                 default is push for chassis, select for switch\" >&2\n\techo \"              For Chassis fmconfig:\" >&2\n\techo \"                 push   - ensure config file is in chassis\" >&2\n\techo \"                 run    - after push, restart FM on master, stop on slave\" >&2\n\techo \"                 runall - after push, restart FM on all MM\" >&2\n\techo \"              For Chassis fmcontrol:\" >&2\n\techo \"                 stop   - stop FM on all MM\" >&2\n\techo \"                 run    - make sure FM running on master, stopped on slave\" >&2\n\techo \"                 runall - make sure FM running on all MM\" >&2\n\techo \"                 restart- restart FM on master, stop on slave\" >&2\n\techo \"                 restartall- restart FM on all MM\" >&2\n\techo \"  -S - securely prompt for password for user on remote system/chassis\" >&2\n\techo \"  -O - override: for Switch upgrade, bypass version checks and force update unconditionally\" >&2\n\techo \"  operation - operation to perform.\" >&2\n\techo \"    Host Operation can be one or more of:\" >&2\n\techo \"     load - initial install of all hosts\" >&2\n\techo \"     upgrade - upgrade install of all hosts\" >&2\n\techo \"     configipoib - create ifcfg-ib1 using host IP addr from /etc/hosts\" >&2\n\techo \"     reboot - reboot hosts, ensure they go down and come back\" >&2\n\techo \"     sacache - confirm sacache has all hosts in it\" >&2\n\techo \"     ipoibping - verify this host can ping each host via IPoIB\" >&2\n\techo \"     mpiperf - verify latency and bandwitch for each host\" >&2\n\techo \"     mpiperfdeviation - check for latency and bandwidth tolerance deviation between hosts\" >&2\n\techo \"    Chassis Operation can be one or more of:\" >&2\n\techo \"     reboot - reboot chassis, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up chassis configuration\" >&2\n\techo \"     upgrade - upgrade install of all chassis\" >&2\n\techo \"     getconfig - get basic configuration of chassis\" >&2\n\techo \"     fmconfig - FM config operation on all chassis\" >&2\n\techo \"     fmgetconfig - Fetch FM config from all chassis\" >&2\n\techo \"     fmcontrol - Control FM on all chassis\" >&2\n   echo \"    IB Node Operation can be one or more of:\" >&2\n   echo \"     reboot - reboot IB nodes, ensure they go down and come back\" >&2\n   echo \"     configure - run wizard to set up IB node configuration\" >&2\n   echo \"     upgrade - upgrade install of all IB nodes\" >&2\n   echo \"     info - report f/w & h/w version, part number, and data rate capability of all IB nodes\" >&2\n   echo \"     hwvpd - complete hardware VPD report of all IB nodes\" >&2\n   echo \"     ping - ping all IB nodes - test for presence\" >&2\n   echo \"     fwverify - report integrity of failsafe firmware of all IB nodes\" >&2\n   echo \"     capture - get switch hardware and firmware state capture of all IB nodes\" >&2\n   echo \"     getconfig - get port configurations of a externally managed switch\" >&2\n\techo \"for example:\" >&2\n\techo \"   opatest -c reboot\" >&2\n\techo \"   opatest upgrade\" >&2\n\techo \"   opatest -C -a run -P '*.pkg' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed test with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while test is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 2\n}\nUsage_opahostadmin()\n{\n\techo \"Usage: opahostadmin [-c] [-f hostfile] [-r release] [-d dir]\" >&2\n\techo \"              [-T product] [-P packages] [-S] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opahostadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"  -r release - IntelOPA release to load/upgrade to, default is $FF_PRODUCT_VERSION\" >&2\n\techo \"  -d dir - directory to get product.release.tgz from for load/upgrade\" >&2\n\techo \"  -T product - IntelOPA product type to install, default is $FF_PRODUCT\" >&2\n\techo \"           Other options include: IntelOPA-Basic, InfiniServBasic, InfiniServPerf, InfiniServMgmt, InfiniServTools, etc\" >&2\n\techo \"  -P packages - IntelOPA packages to install, default is 'iba ipoib mpi'\" >&2\n\techo -n \"                Host allows:\" >&2\n\t/sbin/opaconfig -C >&2\n\techo \"  -S - securely prompt for password for user on remote system\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n\techo \"     load - initial install of all hosts\" >&2\n\techo \"     upgrade - upgrade install of all hosts\" >&2\n\techo \"     configipoib - create ifcfg-ib1 using host IP addr from /etc/hosts\" >&2\n\techo \"     reboot - reboot hosts, ensure they go down and come back\" >&2\n\techo \"     sacache - confirm sacache has all hosts in it\" >&2\n\techo \"     ipoibping - verify this host can ping each host via IPoIB\" >&2\n\techo \"     mpiperf - verify latency and bandwitch for each host\" >&2\n\techo \"     mpiperfdeviation - check for latency and bandwidth tolerance deviation between hosts\" >&2\n\techo \"for example:\" >&2\n\techo \"   opahostadmin  -c reboot\" >&2\n\techo \"   opahostadmin  upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed test with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while test is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 2\n}\nUsage_opachassisadmin()\n{\n\techo \"Usage: opachassisadmin [-c] [-F chassisfile] \" >&2\n\techo \"              [-P packages] [-I fm_bootstate] [-a action]\" >&2\n    echo \"              [-S] [-d upload_dir] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opachassisadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -F chassisfile - file with chassis in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/chassis\" >&2\n\techo \"  -P packages - filenames/directories of firmware\" >&2\n\techo \"                   images to install.  For directories specified, all\" >&2\n\techo \"                   .pkg files in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for fmconfig, filename of FM config file to use\" >&2\n\techo \"                or for fmgetconfig, filename to upload to (default\" >&2\n\techo \"                   opafm.xml)\" >&2\n\techo \"  -a action - action for supplied file\" >&2\n\techo \"              For Chassis upgrade:\" >&2\n\techo \"                 push   - ensure firmware is in primary or alternate\" >&2\n\techo \"                 select - ensure firmware is in primary\" >&2\n\techo \"                 run    - ensure firmware is in primary and running\" >&2\n\techo \"                 default is push\" >&2\n\techo \"              For Chassis fmconfig:\" >&2\n\techo \"                 push   - ensure config file is in chassis\" >&2\n\techo \"                 run    - after push, restart FM on master, stop on slave\" >&2\n\techo \"                 runall - after push, restart FM on all MM\" >&2\n\techo \"              For Chassis fmcontrol:\" >&2\n\techo \"                 stop   - stop FM on all MM\" >&2\n\techo \"                 run    - make sure FM running on master, stopped on slave\" >&2\n\techo \"                 runall - make sure FM running on all MM\" >&2\n\techo \"                 restart- restart FM on master, stop on slave\" >&2\n\techo \"                 restartall- restart FM on all MM\" >&2\n\techo \"  -I fm_bootstate fmconfig and fmcontrol install options\" >&2\n\techo \"                 disable - disable FM start at chassis boot\" >&2\n\techo \"                 enable - enable FM start on master at chassis boot\" >&2\n\techo \"                 enableall - enable FM start on all MM at chassis boot\" >&2\n\techo \"  -d upload_dir - directory to upload FM config files to, default is uploads\" >&2\n\techo \"  -S - securely prompt for password for admin on chassis\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n\techo \"     reboot - reboot chassis, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up chassis configuration\" >&2\n\techo \"     upgrade - upgrade install of all chassis\" >&2\n\techo \"     getconfig - get basic configuration of chassis\" >&2\n\techo \"     fmconfig - FM config operation on all chassis\" >&2\n\techo \"     fmgetconfig - Fetch FM config from all chassis\" >&2\n\techo \"     fmcontrol - Control FM on all chassis\" >&2\n\techo \"for example:\" >&2\n\techo \"   opachassisadmin -c reboot\" >&2\n\techo \"   opachassisadmin -P /root/ChassisFw4.2.0.0.1 upgrade\" >&2\n\techo \"   opachassisadmin -a run -P '*.pkg' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 2\n}\nUsage_opaswitchadmin()\n{\n\techo \"Usage: opaswitchadmin [-c] [-L nodefile] [-d upload_dir] [-O] [-P packages]\" >&2\n\techo \"                        [-a action] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opaswitchadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -L nodefile - file with IB nodes in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/switches\" >&2\n\techo \"  -d upload_dir - directory to upload capture files to for capture\" >&2\n\techo \"                  (default is uploads)\" >&2\n\techo \"  -P packages - for upgrade, filename/directory of firmware\" >&2\n\techo \"                   image to install.  For directory specified,\" >&2\n\techo \"                   .emfw file in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for capture, filename to upload to (default switchcapture)\" >&2\n\techo \"  -a action - action for firmware file for Switch upgrade\" >&2\n\techo \"              select - ensure firmware is in primary\" >&2\n\techo \"              run    - ensure firmware is in primary and running\" >&2\n\techo \"              default is select\" >&2\n\techo \"  -O - override: for firmware upgrade, bypass version checks and force update unconditionally\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n   echo \"     reboot - reboot switches, ensure they go down and come back\" >&2\n   echo \"     configure - run wizard to set up switch configuration\" >&2\n   echo \"     upgrade - upgrade install of all switches\" >&2\n   echo \"     info - report f/w & h/w version, part number, and data rate capability of all IB nodes\" >&2\n   echo \"     hwvpd - complete hardware VPD report of all IB nodes\" >&2\n   echo \"     ping - ping all IB nodes - test for presence\" >&2\n   echo \"     fwverify - report integrity of failsafe firmware of all IB nodes\" >&2\n   echo \"     capture - get switch hardware and firmware state capture of all IB nodes\" >&2\n   echo \"     getconfig - get port configurations of a externally managed switch\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaswitchadmin -c reboot\" >&2\n\techo \"   opaswitchadmin -P /root/ChassisFw4.2.0.0.1 upgrade\" >&2\n\techo \"   opaswitchadmin -a run -P '*.emfw' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 2\n}\nUsage()\n{\n\tcase $mode in\n\topatest) Usage_opatest;;\n\topahostadmin) Usage_opahostadmin;;\n\topachassisadmin) Usage_opachassisadmin;;\n\topaswitchadmin) Usage_opaswitchadmin;;\n\tesac\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\n# default to install wrapper version\nif [ -e /etc/sysconfig/opa/version_wrapper ]\nthen\n\tCFG_RELEASE=`cat /etc/sysconfig/opa/version_wrapper 2>/dev/null`;\nfi\nif [ x\"$CFG_RELEASE\" = x ]\nthen\n# if no wrapper, use version of FF itself as filled in at build time\n# version string is filled in by prep, special marker format for it to use\nCFG_RELEASE=\"THIS_IS_THE_ICS_VERSION_NUMBER:@(#)000.000.000.000B000\"\nfi\nexport CFG_RELEASE=`echo $CFG_RELEASE|sed -e 's/THIS_IS_THE_ICS_VERSION_NUMBER:@(#.//' -e 's/%.*//'`\n# THIS_IS_THE_ICS_INTERNAL_VERSION_NUMBER:@(#)000.000.000.000B000\n# test automation configuration defaults\nexport CFG_INIC_SUFFIX=\nexport CFG_IPOIB_SUFFIX=\"$FF_IPOIB_SUFFIX\"\nexport CFG_USERNAME=\"$FF_USERNAME\"\nexport CFG_PASSWORD=\"$FF_PASSWORD\"\nexport CFG_ROOTPASS=\"$FF_ROOTPASS\"\nexport CFG_LOGIN_METHOD=\"$FF_LOGIN_METHOD\"\nexport CFG_CHASSIS_LOGIN_METHOD=\"$FF_CHASSIS_LOGIN_METHOD\"\nexport CFG_CHASSIS_ADMIN_PASSWORD=\"$FF_CHASSIS_ADMIN_PASSWORD\"\nexport CFG_FAILOVER=\"n\"\nexport CFG_FTP_SERVER=\"\"\nexport CFG_IPOIB=\"y\"\nexport CFG_IPOIB_MTU=\"2030\"\nexport CFG_IPOIB_COMBOS=TBD\nexport CFG_INIC=n\nexport CFG_SDP=n\nexport CFG_SRP=n\nexport CFG_MPI=y\nexport CFG_UDAPL=n\nexport TEST_TIMEOUT_MULT=\"$FF_TIMEOUT_MULT\"\nexport TEST_RESULT_DIR=\"$FF_RESULT_DIR\"\nexport TEST_MAX_PARALLEL=\"$FF_MAX_PARALLEL\"\nexport TEST_CONFIG_FILE=\"/dev/null\"\nexport TL_DIR=/opt/opa/tools\nexport TEST_IDENTIFY=no\nexport TEST_SHOW_CONFIG=no\nexport TEST_SHOW_START=yes\nexport CFG_PRODUCT=\"${FF_PRODUCT:-IntelOPA-Basic}\"\nexport CFG_INSTALL_OPTIONS=\"$FF_INSTALL_OPTIONS\"\nexport CFG_UPGRADE_OPTIONS=\"$FF_UPGRADE_OPTIONS\"\nexport CFG_IPOIB_NETMASK=\"$FF_IPOIB_NETMASK\"\nexport CFG_IPOIB_CONNECTED=\"$FF_IPOIB_CONNECTED\"\nexport CFG_MPI_ENV=\"$FF_MPI_ENV\"\nexport TEST_SERIALIZE_OUTPUT=\"$FF_SERIALIZE_OUTPUT\"\n\nclobber=n\nhost=0\nchassis=0\nopaswitch=0\ndir=.\npackages=\"notsupplied\"\naction=default\nSopt=n\nsopt=n\nbypassSwitchCheck=n\nfwOverride=n\ncase $mode in\nopatest) options='a:BcCnd:h:H:f:F:i:r:I:U:P:T:m:p:t:L:N:S';;\nopahostadmin) host=1; options='cd:h:f:i:r:I:U:P:T:m:S';;\nopachassisadmin) chassis=1; options='a:I:cH:F:P:d:S';;\nopaswitchadmin) opaswitch=1; options='a:Bcd:P:p:t:L:N:O';;\nesac\nwhile getopts \"$options\"  param\ndo\n\tcase $param in\n\ta)\n\t\taction=\"$OPTARG\";;\n\tB)\n\t\tbypassSwitchCheck=y;;\n\tc)\n\t\tclobber=y;;\n\tC)\n\t\tchassis=1;;\n\td)\n\t\tdir=\"$OPTARG\"\n\t\texport UPLOADS_DIR=\"$dir\";;\n\th)\n\t\thost=1\n\t\tHOSTS=\"$OPTARG\";;\n\tH)\n\t\tchassis=1\n\t\tCHASSIS=\"$OPTARG\";;\n\tn)\n\t\topaswitch=1;;\n\tN)\n\t\topaswitch=1\n\t\tOPASWITCHES=\"$OPTARG\";;\n\tf)\n\t\thost=1\n\t\tHOSTS_FILE=\"$OPTARG\";;\n\tF)\n\t\tchassis=1\n\t\tCHASSIS_FILE=\"$OPTARG\";;\n\tL)\n\t\topaswitch=1\n\t\tOPASWITCHES_FILE=\"$OPTARG\";;\n\ti)\n\t\texport CFG_IPOIB_SUFFIX=\"$OPTARG\"\n\t\texport FF_IPOIB_SUFFIX=\"$OPTARG\";;\n\tr)\n\t\texport FF_PRODUCT_VERSION=\"$OPTARG\";;\n\tI)\n\t\texport CFG_INSTALL_OPTIONS=\"$OPTARG\";;\n\tU)\n\t\texport CFG_UPGRADE_OPTIONS=\"$OPTARG\";;\n\tP)\n\t\tpackages=\"$OPTARG\";;\n\tT)\n\t\texport CFG_PRODUCT=\"$OPTARG\";;\n\tm)\n\t\texport CFG_IPOIB_NETMASK=\"$OPTARG\";;\n\tp)\n\t\texport PORTS=\"$OPTARG\";;\n\tt)\n\t\texport PORTS_FILE=\"$OPTARG\";;\n\tS)\n\t\tSopt=y;;\n\tO)\n\t\tfwOverride=y;;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\nif [ $# -lt 1 ] \nthen\n\tUsage\nfi\nif [[ $(($chassis+$host+$opaswitch)) -gt 1 ]]\nthen\n\techo \"$cmd: conflicting arguments, more than one of host, chassis or opaswitches specified\" >&2\n\tUsage\nfi\nif [[ $(($chassis+$host+$opaswitch)) -eq 0 ]]\nthen\n\thost=1\nfi\nif [ ! -d \"$FF_RESULT_DIR\" ]\nthen\n\techo \"$cmd: Invalid FF_RESULT_DIR: $FF_RESULT_DIR: No such directory\" >&2\n\texit 1\nfi\nif [ $chassis -eq 1 ]\nthen\n\tcheck_chassis_args $cmd\n\tif [ \"$action\" = \"default\" ]\n\tthen\n\t\taction=push\n\tfi\n\tif [ \"$CFG_INSTALL_OPTIONS\" = \"$FF_INSTALL_OPTIONS\" ]\n\tthen\n\t\texport CFG_INSTALL_OPTIONS=\n\tfi\nelif [ $opaswitch -eq 1 ]\nthen\n\tcheck_ib_transport_args $cmd\n\tcheck_ports_args $cmd\n\tif [ \"$action\" = \"default\" ]\n\tthen\n\t\taction=select\n\tfi\nelse\n\tcheck_host_args $cmd\n\n\tif [ \"$packages\" = \"notsupplied\" ]\n\tthen\n\t\tpackages=\"$FF_PACKAGES\"\n\tfi\n\tif [ \"x$packages\" != \"x\" ]\n\tthen\n\t\tfor p in $packages\n\t\tdo\n\t\t\tCFG_INSTALL_OPTIONS=\"$CFG_INSTALL_OPTIONS -i $p\"\n\t\tdone\n\tfi\n\tif [ \"x$CFG_INSTALL_OPTIONS\" = \"x\" ]\n\tthen\n\t\tCFG_INSTALL_OPTIONS='-i iba -i ipoib -i mpi'\n\tfi\nfi\n\nexport CFG_HOSTS=\"$HOSTS\"\nexport CFG_CHASSIS=\"$CHASSIS\"\nexport CFG_OPASWITCHES=\"$OPASWITCHES\"\nexport CFG_PORTS=\"$PORTS\"\nexport CFG_MPI_PROCESSES=\"$HOSTS\"\n#export CFG_PERF_PAIRS=TBD\nexport CFG_SCPFROMDIR=\"$dir\"\nif [ x\"$FF_PRODUCT_VERSION\" != x ]\nthen\n\tCFG_RELEASE=\"$FF_PRODUCT_VERSION\"\nfi\n\n# use NONE so ff_function's inclusion of defaults works properly\nif [ x\"$FF_IPOIB_SUFFIX\" = x ]\nthen\n\texport FF_IPOIB_SUFFIX=\"NONE\"\n\texport CFG_IPOIB_SUFFIX=\"NONE\"\nfi\n\nif [ \"$clobber\" = \"y\" ]\nthen\n\t( cd $TEST_RESULT_DIR; rm -rf test.res save_tmp test.log test_tmp* *.dmp )\nfi\n\n# create an empty test.log file\n( cd $TEST_RESULT_DIR; >> test.log )\n\nrun_test()\n{\n\t# $1 = test suite name\n\tTCLLIBPATH=\"$TL_DIR /usr/lib/tcl\" expect -f $TL_DIR/$1.exp | tee -a $TEST_RESULT_DIR/test.res\n}\n\nif [ $chassis -eq 1 ]\nthen\n\tif [ \"$Sopt\" = y ]\n\tthen\n\t\techo -n \"Password for admin on all chassis: \" > /dev/tty\n\t\tstty -echo < /dev/tty > /dev/tty\n\t\tpassword=\n\t\tread password < /dev/tty\n\t\tstty echo < /dev/tty > /dev/tty\n\t\techo > /dev/tty\n\t\texport CFG_CHASSIS_ADMIN_PASSWORD=\"$password\"\n\tfi\n\tfor test_suite in $*\n\tdo\n\t\tcase $test_suite in\n\t\treboot)\n\t\t\trun_test chassis_$test_suite;;\n\t\tconfigure)\n\t\t\t$TOOLSDIR/chassis_setup $CFG_CHASSIS\n\t\t\tif [ $? = 0 ]\n\t\t\tthen\n\t\t\t\texport SYSLOG_SERVER=`grep \"Syslog Server IP_Address\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport SYSLOG_PORT=`grep \"Syslog Port\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport SYSLOG_FACILITY=`grep \"Syslog Facility\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport NTP_SERVER=`grep \"NTP Server\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport TZ_OFFSET=`grep \"Timezone offset\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport DST_START=`grep \"Start DST\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport DST_END=`grep \"End DST\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport LINKWIDTH_SETTING=`grep \"Link Width Selection\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport SET_NAME=`grep \"Set IB Node Desc\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport LINKCRCMODE=`grep \"Link CRC Mode\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\trun_test chassis_$test_suite\n\t\t\telse\n\t\t\t\techo \"Chassis setup wizard exited abnormally ... aborting\"\n\t\tfi;;\n\t\tgetconfig)\n\t\t\trun_test chassis_$test_suite;;\n\t\tupgrade)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: -P option required for chassis upgrade\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$action\" != \"push\" -a \"$action\" != \"select\" -a \"$action\" != \"run\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid firmware upgrade action: $action\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\t# check fw files exist, expand directories\n\t\t\tCFG_FWFILES=\"\"\n\t\t\tfor fwfile in $packages\n\t\t\tdo\n\t\t\t\t# expand directory, also filters files without .pkg suffix\n\t\t\t\t# this also expands wildcards in \"$packages\"\n\t\t\t\tfwfiles=`find $fwfile -type f -name '*.pkg'`\n\t\t\t\tif [ $? != 0 -o x\"$fwfiles\" == x ]\n\t\t\t\tthen\n\t\t\t\t\techo \"$cmd: $fwfile: No .pkg files found\" >&2\n\t\t\t\t\tUsage\n\t\t\t\tfi\n\t\t\t\tCFG_FWFILES=\"$CFG_FWFILES $fwfiles\"\n\t\t\tdone\n\t\t\texport CFG_FWFILES\n\t\t\texport CFG_FWACTION=\"$action\"\n\t\t\trun_test chassis_$test_suite;;\n\t\tfmconfig)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: -P option required for chassis fmconfig\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$action\" != \"push\" -a \"$action\" != \"run\" -a \"$action\" != \"runall\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid FM config action: $action\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$CFG_INSTALL_OPTIONS\" != \"\" -a \"$CFG_INSTALL_OPTIONS\" != \"disable\" -a \"$CFG_INSTALL_OPTIONS\" != \"enable\" -a \"$CFG_INSTALL_OPTIONS\" != \"enableall\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid FM bootstate: $CFG_INSTALL_OPTIONS\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\texport CFG_FMFILE=\"$packages\"\n\t\t\texport CFG_FWACTION=\"$action\"\n\t\t\trun_test chassis_$test_suite;;\n\t\tfmcontrol)\n\t\t\tif [ \"$action\" != \"stop\" -a \"$action\" != \"run\" -a \"$action\" != \"runall\" -a \"$action\" != \"restart\" -a \"$action\" != \"restartall\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid FM config action: $action\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$CFG_INSTALL_OPTIONS\" != \"\" -a \"$CFG_INSTALL_OPTIONS\" != \"disable\" -a \"$CFG_INSTALL_OPTIONS\" != \"enable\" -a \"$CFG_INSTALL_OPTIONS\" != \"enableall\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid FM bootstate: $CFG_INSTALL_OPTIONS\" >&2\n\t\t\tfi\n\t\t\texport CFG_FWACTION=\"$action\"\n\t\t\trun_test chassis_$test_suite;;\n\t\tfmgetconfig)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\tpackages=\"opafm.xml\"\n\t\t\t\t#echo \"$cmd: -P option required for chassis fmgetconfig\" >&2\n\t\t\t\t#Usage\n\t\t\tfi\n\t\t\texport CFG_FMFILE=\"$packages\"\n\t\t\trun_test chassis_$test_suite;;\n\t\t*)\n\t\t\techo \"Invalid Operation name: $test_suite\" >&2\n\t\t\tUsage;\n\t\t\t;;\n\t\tesac\n\tdone\nelif [ $opaswitch -eq 1 ]\nthen\n\tif [ \"$bypassSwitchCheck\" = y ]\n\tthen\n\t\texport CFG_SWITCH_BYPASS_SWITCH_CHECK=y\n\telse\n\t\texport CFG_SWITCH_BYPASS_SWITCH_CHECK=n\n\tfi\n\tfor test_suite in $*\n\tdo\n\n\t\tcase $test_suite in\n      reboot)\n         run_test switch_$test_suite;;\n\t\tinfo)\n\t\t\trun_test switch_$test_suite;;\n\t\thwvpd)\n\t\t\trun_test switch_$test_suite;;\n\t\tping)\n\t\t\trun_test switch_$test_suite;;\n\t\tfwverify)\n\t\t\trun_test switch_$test_suite;;\n\t\tcapture)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\tpackages=\"switchcapture\"\n\t\t\t\t#echo \"$cmd: -P option required for switch capture\" >&2\n\t\t\t\t#Usage\n\t\t\tfi\n\t\t\texport CFG_CAPTUREFILE=\"$packages\"\n\t\t\trun_test switch_$test_suite;;\n\t\tconfigure)\n\t\t\t$TOOLSDIR/switch_setup\n\t\t\tif [ $? = 0 ]\n\t\t\tthen\n\t\t\t\texport LINKWIDTH_SETTING=`grep \"Link Width Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\texport LINKSPEED_SETTING=`grep \"Link Speed Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\texport NODEDESC_SETTING=`grep \"Node Description Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\texport FMENABLED_SETTING=`grep \"FM Enabled Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\texport LINKCRCMODE_SETTING=`grep \"Link CRC Mode Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\trun_test switch_$test_suite\n\t\t\telse\n\t\t\t\techo \"Ext mgd switch setup wizard exited abnormally ... aborting\"\n\t\t\tfi;;\n\t\tupgrade)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: -P option required for switch upgrade\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$action\" != \"select\" -a \"$action\" != \"run\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid firmware upgrade action: $action\" >&2\n\t\t\t\techo \"$cmd: 'run' and 'select' are the only supported actions\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\n\t\t\tdirnum=1\n\n\t\t\t# check fw files exist, expand directories\n\t\t\tCFG_FWFILES=\"\"\n\t\t\tCFG_FWBINFILES=\"\"\n\n\t\t\tfor fwfile in $packages\n\t\t\tdo\n\n\t\t\t\techo \"$cmd: processing package file: $fwfile\" >&2\n\t\t\t\t# expand directory, also filters files without .emfw suffix\n\t\t\t\t# this also expands wildcards in \"$packages\"\n\t\t\t\tfwfiles=`find $fwfile -type f -name '*.emfw'`\n\t\t\t\tif [ $? != 0 -o x\"$fwfiles\" == x ]\n\t\t\t\tthen\n\t\t\t\t\techo \"$cmd: $fwfile: No .emfw files found\" >&2\n\t\t\t\t\tUsage\n\t\t\t\tfi\n\t\t\t\tCFG_FWFILES=\"$fwfiles\"\n\n\t\t\t\techo \"$cmd: found package file: $fwfiles\" >&2\n\t\t\t\t# copy file to temporary directory\n\t\t\tfor tarball in $CFG_FWFILES\n\t\t\tdo\n\t\t\t\t# create temporary work directory\n\t\t\t\tCFG_FWFILE=\"$tarball\"\n\t\t\t\tCFG_FWTEMPDIR=\"$temp.$dirnum\"\n\t\t\t\tmkdir $CFG_FWTEMPDIR\n\t\t\t\tCFG_FWRELEASEFILE=\"$CFG_FWTEMPDIR/release.emfw.txt\"\n\n\t\t\t\tcp -f $tarball $CFG_FWTEMPDIR\n\n\t\t\t\t# remove previous firmware image .bin files, and extract\n\t\t\t\t# .bin files from .emfw file.\n\t\t\t\trm -rf '$CFG_FWTEMPDIR/*.bin'\n\t\t\t\ttar --directory $CFG_FWTEMPDIR -zxf $tarball\n\n\t\t\t\t# search for text file that contains release related information\n            # about the firmware image .bin files\n            if [ ! -f \"$CFG_FWRELEASEFILE\" ]\n\t\t\t\tthen\n\t\t\t\t\techo \"$cmd: No release.emfw.txt file found for package file: $tarball\" >&2\n\t\t\t\t\tUsage\n\t\t\t\tfi\n\n            fwreleaseinfo=`cat $CFG_FWRELEASEFILE`\n            CFG_FWRELINFO=\"$fwreleaseinfo\"\n            fwreleaseversioninfo=`cat $CFG_FWRELEASEFILE | grep _ | sed \"s/_/./g\"`\n            CFG_FWRELEASEVERSIONINFO=$fwreleaseversioninfo\n            CFG_FWSPEED=`cat $CFG_FWRELEASEFILE | grep DR`\n\t\t\tif [ \"$CFG_FWSPEED\" = \"\" ]\n\t\t\tthen\n\t\t\t\tCFG_FWSPEED=\"QDR\"\n\t\t\tfi\n            CFG_FWASICVER=`grep \"V[0-9]\" $CFG_FWRELEASEFILE`\n\t\t\tif [ \"$CFG_FWASICVER\" = \"\" ]\n\t\t\tthen\n\t\t\t\tCFG_FWASICVER=\"V0\"\n\t\t\tfi\n\t\t\tCFG_SWITCH_DEVICE=`head -n 1 $CFG_FWRELEASEFILE`\n\n\t\t\t\t# expand directory, also filters files without .bin suffix\n\t\t\t\tfwfiles=`find $CFG_FWTEMPDIR -type f -name '*.bin'`\n\t\t\t\tif [ $? != 0 -o x\"$fwfiles\" == x ]\n\t\t\t\tthen\n\t\t\t\t\techo \"$cmd: $tarball: No .bin files found\" >&2\n\t\t\t\t\tUsage\n\t\t\t\tfi\n\n\t\t\t\tCFG_FWBINFILES=\"$fwfiles\"\n\t\t\t\tCFG_FWOVERRIDE=$fwOverride\n\n\t\t\t\texport CFG_FWFILES\n\t\t\t\texport CFG_FWFILE\n\t\t\t\texport CFG_FWBINFILES\n\t\t\t\texport CFG_FWTEMPDIR\n\t\t\t\texport CFG_FWRELINFO\n\t\t\t\texport CFG_FWSPEED\n\t\t\t\texport CFG_FWASICVER\n\t\t\t\texport CFG_SWITCH_DEVICE\n\t\t\t\texport CFG_FWRELEASEVERSIONINFO\n\t\t\t\texport CFG_FWACTION=\"$action\"\n\t\t\t\texport CFG_FWOVERRIDE\n\n\t\t\t\techo \"$cmd: upgrading with switch firmware image: $tarball : version $fwreleaseversioninfo\" >&2\n\t\t\t\trun_test switch_$test_suite\n\n\t\t\t\tdirnum=$((dirnum + 1))\n\t\t\tdone\n\t\t\tdone\n\n\t\t\t# remove temporary work directory\n\t\t\trm -rf $temp.*\n\t\t\t;;\n\t\tgetconfig)\n\t\t\trun_test switch_$test_suite;;\n\t\t*)\n\t\t\techo \"Invalid Operation name: $test_suite\" >&2\n\t\t\tUsage;\n\t\t\t;;\n\t\tesac\n\tdone\nelse\n\tif [ \"$Sopt\" = y ]\n\tthen\n\t\techo -n \"Password for $CFG_USERNAME on all hosts: \" > /dev/tty\n\t\tstty -echo < /dev/tty > /dev/tty\n\t\tpassword=\n\t\tread password < /dev/tty\n\t\tstty echo < /dev/tty > /dev/tty\n\t\techo > /dev/tty\n\t\texport CFG_PASSWORD=\"$password\"\n\t\tif [ \"$CFG_USERNAME\" != \"root\" ]\n\t\tthen\n\t\t\techo -n \"Password for root on all hosts: \" > /dev/tty\n\t\t\tstty -echo < /dev/tty > /dev/tty\n\t\t\tpassword=\n\t\t\tread password < /dev/tty\n\t\t\tstty echo < /dev/tty > /dev/tty\n\t\t\techo > /dev/tty\n\t\t\texport CFG_ROOTPASS=\"$password\"\n\t\tfi\n\tfi\n\tfor test_suite in $*\n\tdo\n\t\tcase $test_suite in\n\t\tload|upgrade)\n\t\t\tif [ ! -f \"$dir/$CFG_PRODUCT.$CFG_RELEASE.tgz\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: $dir/$CFG_PRODUCT.$CFG_RELEASE.tgz not found\" >&2\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\trun_test $test_suite;;\n\t\treboot|sacache|configipoib|ipoibping|mpiperf|mpiperfdeviation)\n\t\t\trun_test $test_suite;;\n\t\t*)\n\t\t\techo \"Invalid Operation name: $test_suite\" >&2\n\t\t\tUsage;\n\t\t\t;;\n\t\tesac\n\tdone\nfi\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n\n# [ICS VERSION STRING: unknown]\n\n# disable the specified set of hosts\n\ntempfile=/tmp/opadisablehosts$$\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\n\nUsage_full()\n{\n\techo \"Usage: opadisablehosts [-h hfi] [-p port] reason host ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opadisablehosts --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -h/--hfi hfi              - hfi to send via, default is 1st hfi\" >&2\n\techo \"   -p/--port port            - port to send via, default is 1st active port\" >&2\n\techo \"   reason - text description of reason hosts are being diasabled,\" >&2\n\techo \"            will be saved at end of any new lines in disabled file.\" >&2\n\techo \"            For ports already in disabled file, this is ignored.\" >&2  \n\techo  >&2\n\techo \"for example:\" >&2\n\techo \"   opadisablehosts 'bad DRAM' compute001 compute045\" >&2\n\techo \"   opadisablehosts -h 1 -p 2 'crashed' compute001 compute045\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opadisablehosts reason host ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opadisablehosts --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo  >&2\n\techo \"   reason - text description of reason hosts are being diasabled,\" >&2\n\techo \"            will be saved at end of any new lines in disabled file.\" >&2\n\techo \"            For ports already in disabled file, this is ignored.\" >&2  \n\techo >&2\n\techo \"for example:\" >&2\n\techo \"   opadisablehosts 'bad DRAM' compute001 compute045\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nreason=\nhfi=0\nport=0\nwhile getopts h:p: param\ndo\n\tcase $param in\n\th)\thfi=\"$OPTARG\";;\n\tp)\tport=\"$OPTARG\";;\n\t?)\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\nif [ $# -lt 1 ]\nthen\n\tUsage\nfi\nreason=\"$1\"\nshift\n\nif [ $# -lt 1 ]\nthen\n\tUsage\nfi\n\nif [ \"$port\" -eq 0 ]\nthen\n\tport_opts=\"-h $hfi\" # default port to 1st active\nelse\n\tport_opts=\"-h $hfi -p $port\"\nfi\n\n# loop for each host\n# this could be more efficient, but for a small list of hosts its ok\nres=0\nfor i in \"$@\"\ndo\n\techo \"=============================================================================\"\n\techo \"Disabling host: $i...\"\n\t/sbin/opaextractsellinks $port_opts -F \"nodepat:$i HFI*\" > $tempfile\n\tif [ ! -s $tempfile ]\n\tthen\n\t\techo \"opadisablehosts: Unable to find host: $i\" >&2\n\t\tres=1\n\telse\n\t\t/sbin/opadisableports -p \"$hfi:$port\" \"$reason\" < $tempfile\n\tfi\n\trm -f $tempfile\ndone\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n\n# [ICS VERSION STRING: unknown]\n\n# reenable the specified set of ports\n\ntempfile=/tmp/opaenableports$$\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\n. /opt/opa/tools/ff_funcs\n\nUsage_full()\n{\n\techo \"Usage: opaenableports [-t portsfile] [-p ports] < disabled.csv\" >&2\n\techo \"              or\" >&2\n\techo \"       opaenableports --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"                  fabric(s) for operation, default is $CONFIG_DIR/opa/ports\" >&2\n\techo \"   -p ports - list of local HFI ports used to access fabric(s) for operation\" >&2\n\techo \"              default is 1st active port\" >&2\n\techo \"              This is specified as hfi:port\" >&2\n\techo \"                 0:0 = 1st active port in system\" >&2\n\techo \"                 0:y = port y within system\" >&2\n\techo \"                 x:0 = 1st active port on HFI x\" >&2\n\techo \"                 x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo  >&2\n\techo \"disabled.csv is a file listing the ports to enable.\" >&2\n\techo \"It is of the form:\" >&2\n\techo \"   NodeGUID;PortNum;NodeDesc\" >&2\n\techo \"A input file such as this is generated in $CONFIG_DIR/opa/disabled*\" >&2\n\techo \"by opadisableports.\" >&2\n\techo \" Environment:\" >&2\n\techo \"   PORTS - list of ports, used in absence of -t and -p\" >&2\n\techo \"   PORTS_FILE - file containing list of ports, used in absence of -t and -p\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaenableports < disabled.csv\" >&2\n\techo \"   opaenableports -p '1:1 1:2 2:1 2:2' < disabled.csv\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opaenableports < disabled.csv\" >&2\n\techo \"              or\" >&2\n\techo \"       opaenableports --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo  >&2\n\techo \"disabled.csv is a file listing the ports to enable.\" >&2\n\techo \"It is of the form:\" >&2\n\techo \"   NodeGUID;PortNum;NodeDesc\" >&2\n\techo \"A input file such as this is generated in $CONFIG_DIR/opa/disabled*\" >&2\n\techo \"by opadisableports.\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaenableports < disabled.csv\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nres=0\nwhile getopts p:t: param\ndo\n\tcase $param in\n\tp)\texport PORTS=\"$OPTARG\";;\n\tt)\texport PORTS_FILE=\"$OPTARG\";;\n\t?)\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\nif [ $# -ge 1 ]\nthen\n\tUsage\nfi\n\ncheck_ports_args opaenableports\n\nlookup_lid()\n{\n\tlocal nodeguid=\"$1\"\n\tlocal portnum=\"$2\"\n\tlocal guid port type desc lid\n\n\tgrep \"^$nodeguid;$portnum;\" < $lidmap|while read guid port type desc lid\n\tdo\n\t\techo -n $lid\n\tdone\n}\n\t\n\nenable_ports()\n{\n\tenabled=0\n\tfailed=0\n\tskipped=0\n\tif [ \"$port\" -eq 0 ]\n\tthen\n\t\tport_opts=\"-h $hfi\"\t# default port to 1st active\n\telse\n\t\tport_opts=\"-h $hfi -p $port\"\n\tfi\n\tsuffix=\":$hfi:$port\"\n\tlidmap=$CONFIG_DIR/lidmap$suffix.csv\n\n\t# generate lidmap\n\t/sbin/opaextractlids $port_opts > $lidmap\n\tif [ ! -s $lidmap ]\n\tthen\n\t\techo \"opaenableports: Unable to determine fabric lids\" >&2\n\t\trm -f $lidmap\n\t\treturn 1\n\tfi\n\n\tIFS=';'\n\twhile read nodeguid port type desc rest\n\tdo\n\t\tlid=$(lookup_lid $nodeguid 0)\n\t\tif [ x\"$lid\" = x ]\n\t\tthen\n\t\t\techo \"Skipping port: $desc:$port\"\n\t\t\tskipped=$(( $skipped + 1))\n\t\telse\n\t\t\techo \"Enabling port: $desc:$port\"\n\t\t\t/sbin/opaportconfig $port_opts -l $lid -m $port enable\n\n\t\t\tif [ $? = 0 ]\n\t\t\tthen\n\t\t\t\tlogger -p user.err \"Enabled port: $desc:$port\"\n\t\t\t\tif [ -e $CONFIG_DIR/opa/disabled$suffix.csv ]\n\t\t\t\tthen\n\t\t\t\t\t# remove from disabled ports\n\t\t\t\t\tgrep -v \"^$nodeguid;$port;\" < $CONFIG_DIR/opa/disabled$suffix.csv > $tempfile\n\t\t\t\t\tmv $tempfile $CONFIG_DIR/opa/disabled$suffix.csv\n\t\t\t\tfi\n\t\t\t\tenabled=$(( $enabled + 1))\n\t\t\telse\n\t\t\t\tfailed=$(( $failed + 1))\n\t\t\tfi\n\t\tfi\n\tdone\n\tif [ $failed -eq 0 ]\n\tthen\n\t\techo \"Enabled: $enabled; Skipped: $skipped\"\n\t\treturn 0\n\telse\n\t\techo \"Enabled: $enabled; Skipped: $skipped; Failed: $failed\"\n\t\treturn 1\n\tfi\n}\n\n\nfor hfi_port in $PORTS\ndo\n\thfi=$(expr $hfi_port : '\\([0-9]*\\):[0-9]*')\n\tport=$(expr $hfi_port : '[0-9]*:\\([0-9]*\\)')\n\t/usr/sbin/oparesolvehfiport $hfi $port >/dev/null\n\tif [ $? -ne 0 -o \"$hfi\" = \"\" -o \"$port\" = \"\" ]\n\tthen\n\t\techo \"opaenableports: Error: Invalid port specification: $hfi_port\" >&2\n\t\tres=1\n\t\tcontinue\n\tfi\n\n\techo \"Processing fabric: $hfi:$port...\"\n\techo \"--------------------------------------------------------\"\n\tenable_ports \"$hfi\" \"$port\"\n\tif [ $? -ne 0 ]\n\tthen\n\t\tres=1\n\tfi\ndone\n\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# Run opareports and pipe output to opaxmlextract to extract\n#  links with excessive errors\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\ntempfile=/tmp/opaextractbadlinks$$\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\n\nUsage_full()\n{\n\techo \"Usage: opaextractbadlinks [opareport options]\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractbadlinks --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   opareport options - options will be passed to opareport.\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractbadlinks\" >&2\n\techo \"   opaextractbadlinks -h 1 -p 2\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opaextractbadlinks\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractbadlinks --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractbadlinks\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nline1=\n# we do this against a single fabric, options can select a local HFI and Port\n$BINDIR/opareport -o errors -x \"$@\" > $tempfile\nif [ -s $tempfile ]\nthen\n\tcat $tempfile| $BINDIR/opaxmlextract -H -d \\; -e LinkErrors.Link.Port.NodeGUID -e LinkErrors.Link.Port.PortNum -e LinkErrors.Link.Port.NodeType -e LinkErrors.Link.Port.NodeDesc|while read line\n\tdo\n\t\tif [ x\"$line1\" = x ]\n\t\tthen\n\t\t\tline1=\"$line\"\n\t\telse\n\t\t\techo \"$line1;$line\"\n\t\t\tline1=\n\t\tfi\n\tdone\n\tres=0\nelse\n\techo \"opaextractbadlinks: Unable to get error report\" >&2\n\tres=1\nfi\nrm -f $tempfile\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# Run opareport pipe output to opaxmlextract to extract lids to a csv file\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\ntempfile=/tmp/opaextractlids$$\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\n\nUsage_full()\n{\n\techo \"Usage: opaextractlids [-h hfi] [-p port]\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractlids --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -h/--hfi hfi              - hfi to send via, default is 1st hfi\" >&2\n\techo \"   -p/--port port            - port to send via, default is 1st active port\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractlids > lids.csv\" >&2\n\techo \"   opaextractlids -h 2 -p 1 > lids.csv'\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opaextractlids\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractlids --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractlids > lids.csv\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nIFS=';'\n$BINDIR/opareport -o lids -x \"$@\" > $tempfile\nif [ -s $tempfile ]\nthen\n\tcat $tempfile | $BINDIR/opaxmlextract -H -d \\; -e LIDSummary.LIDs.Value.NodeGUID -e LIDSummary.LIDs.Value.PortNum -e LIDSummary.LIDs.Value.NodeType -e LIDSummary.LIDs.Value.NodeDesc -e LIDSummary.LIDs.Value:LID\n\tres=0\nelse\n\techo \"opaextractlids: Unable to get lids report\" >&2\n\tres=1\nfi\n\t\t\nrm -f $tempfile\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# Run opareports and pipe output to opaxmlextract to extract\n#  links with excessive errors\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\ntempfile=/tmp/opaextractsellinks$$\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\n\nUsage_full()\n{\n\techo \"Usage: opaextractsellinks [opareport options]\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractsellinks --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   opareport options - options will be passed to opareport.\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractsellinks\" >&2\n\techo \"   opaextractsellinks -h -1 -p 2\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opaextractsellinks\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractsellinks --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractsellinks\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nline1=\n# we do this against a single fabric, options can select a local HFI and Port\n$BINDIR/opareport -o links -x \"$@\" > $tempfile\nif [ -s $tempfile ]\nthen\n\tcat $tempfile| $BINDIR/opaxmlextract -H -d \\; -e LinkSummary.Link.Port.NodeGUID -e LinkSummary.Link.Port.PortNum -e LinkSummary.Link.Port.NodeType -e LinkSummary.Link.Port.NodeDesc|while read line\n\tdo\n\t\tif [ x\"$line1\" = x ]\n\t\tthen\n\t\t\tline1=\"$line\"\n\t\telse\n\t\t\techo \"$line1;$line\"\n\t\t\tline1=\n\t\tfi\n\tdone\n\tres=0\nelse\n\techo \"opaextractsellinks: Unable to find specified links\" >&2\n\tres=1\nfi\nrm -f $tempfile\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# start and stop HFI-SW and/or ISL cable Bit Error Rate tests\n\ntempfile=/tmp/opacabletest$$\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\n. $TOOLSDIR/ff_funcs\n\nUsage_full()\n{\n\t\techo \"Usage: opacabletest [-C|-A] [-c file] [-f hostfile] [-h 'hosts'] [-n numprocs]\" >&2\n\techo \"                     [-t portsfile] [-p ports]\" >&2\n\techo \"                     [start|start_fi|start_isl|stop|stop_fi|stop_isl] ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opacabletest --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -C - clear error counters\" >&2\n\techo \"   -A - force clear of hw error counters\" >&2\n\techo \"        implies -C\" >&2\n\techo \"   -c file - error thresholds config file\" >&2\n\techo \"             default is $CONFIG_DIR/opa/opamon.si.conf\" >&2\n\techo \"             only used if -C or -A specified\" >&2\n\techo \"   -f hostfile - file with hosts to include in HFI-SW test,\" >&2\n\techo \"                 default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"   -h hosts - list of hosts to include in HFI-SW test\" >&2\n\techo \"   -n numprocs - number of processes per host for HFI-SW test\" >&2\n\techo \"   -t portsfile - file with list of local HFI ports used to access fabric(s)\" >&2\n\techo \"                  when clearing counters, default is $CONFIG_DIR/opa/ports\" >&2\n\techo \"   -p ports - list of local HFI ports used to access fabric(s) for counter clear\" >&2\n\techo \"              default is 1st active port\" >&2\n\techo \"              This is specified as hfi:port\" >&2\n\techo \"                 0:0 = 1st active port in system\" >&2\n\techo \"                 0:y = port y within system\" >&2\n\techo \"                 x:0 = 1st active port on HFI x\" >&2\n\techo \"                 x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"   start - start the HFI-SW and ISL tests\" >&2\n\techo \"   start_fi - start the HFI-SW test\" >&2\n\techo \"   start_isl - start the ISL test\" >&2\n\techo \"   stop - stop the HFI-SW and ISL tests\" >&2\n\techo \"   stop_fi - stop the HFI-SW test\" >&2\n\techo \"   stop_isl - stop the ISL test\" >&2\n\techo >&2\n\techo \"The HFI-SW cabletest requires that FF_MPI_APPS_DIR be set and contains\" >&2\n\techo \"a prebuilt copy of Intel mpi_apps for an appropriate MPI\" >&2\n\techo >&2\n\techo \"The ISL cabletest as started by this tool assumes the master HSM is running\" >&2\n\techo \"on this host.  If using ESM or a different host is master FM, ISL cabletest\" >&2\n\techo \"will have to be controlled by the switch CLI or by FastFabric on the master FM\" >&2\n\techo \"respectively\" >&2\n\techo >&2\n\techo \" Environment:\" >&2\n\techo \"   HOSTS - list of hosts, used if -h option not supplied\" >&2\n\techo \"   HOSTS_FILE - file containing list of hosts, used in absence of -f and -h\" >&2\n\techo \"   PORTS - list of ports, used in absence of -t and -p\" >&2\n\techo \"   PORTS_FILE - file containing list of ports, used in absence of -t and -p\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"example:\">&2\n\techo \"   opacabletest -A start\" >&2\n\techo \"   opacabletest -f good -A start\" >&2\n\techo \"   opacabletest -h 'arwen elrond' start_fi\" >&2\n\techo \"   HOSTS='arwen elrond' opacabletest stop\" >&2\n\techo \"   opacabletest -A\" >&2\n\trm -f $tempfile\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opacabletest [-C|-A] [-n numprocs] [-f hostfile]\" >&2\n\techo \"                 [start|start_fi|start_isl|stop|stop_fi|stop_isl] ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opacabletest --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -C - clear error counters\" >&2\n\techo \"   -A - force clear of hw error counters\" >&2\n\techo \"        implies -C\" >&2\n\techo \"   -f hostfile - file with hosts to include in HFI-SW test,\" >&2\n\techo \"                 default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"   -n numprocs - number of processes per host for HFI-SW test\" >&2\n\techo >&2\n\techo \"   start - start the HFI-SW and ISL tests\" >&2\n\techo \"   start_fi - start the HFI-SW test\" >&2\n\techo \"   start_isl - start the ISL test\" >&2\n\techo \"   stop - stop the HFI-SW and ISL tests\" >&2\n\techo \"   stop_fi - stop the HFI-SW test\" >&2\n\techo \"   stop_isl - stop the ISL test\" >&2\n\techo >&2\n\techo \"The HFI-SW cabletest requires that FF_MPI_APPS_DIR be set and contains\" >&2\n\techo \"a prebuilt copy of Intel mpi_apps for an appropriate MPI\" >&2\n\techo >&2\n\techo \"The ISL cabletest as started by this tool assumes the master HSM is running\" >&2\n\techo \"on this host.  If using ESM or a different host is master FM, ISL cabletest\" >&2\n\techo \"will have to be controlled by the switch CLI or by FastFabric on the master FM\" >&2\n\techo \"respectively\" >&2\n\techo >&2\n\techo \" Environment:\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"example:\">&2\n\techo \"   opacabletest -f good -A start\" >&2\n\techo \"   opacabletest stop\" >&2\n\techo \"   opacabletest -A\" >&2\n\trm -f $tempfile\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nclear=n\nclearhw=n\nnumprocs=3\nconfig_file=\"$CONFIG_DIR/opa/opamon.si.conf\"\nwhile getopts CAf:h:n:t:p:c: param\ndo\n\tcase $param in\n\tC)\n\t\tclear=y;;\n\tA)\n\t\tclear=y; clearhw=y;;\n\th)\n\t\tHOSTS=\"$OPTARG\";;\n\tf)\n\t\tHOSTS_FILE=\"$OPTARG\";;\n\tn)\n\t\tnumprocs=\"$OPTARG\";;\n\tt)\n\t\tPORTS_FILE=\"$OPTARG\";;\n\tp)\n\t\tPORTS=\"$OPTARG\";;\n\tc)\n\t\tconfig_file=\"$OPTARG\";;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\ncheck_host_args opacabletest\n# HOSTS now lists all the hosts, pass it along to the commands below via env\nexport HOSTS\nunset HOSTS_FILE\n\nif [ $clear = y ]\nthen\n\tcheck_ports_args opacabletest\n\t# PORTS now lists all the ports, pass it along to the commands below via env\n\texport PORTS\n\tunset PORTS_FILE\nfi\n\nif [ $clear = y ]\nthen\n\topareports -C -c \"$config_file\" -o none\n\tif [ $clearhw = y ]\n\tthen\n\t\topareports -M -C -c \"$config_file\" -o none\n\tfi\nfi\n\nget_fmconfig()\n{\n\tFM_CONFIG_DIR=/etc/sysconfig\n\tFM_CONFIG_FILE=$CONFIG_DIR/opafm.xml\n\tIFS_FM_BASE=/opt/opafm # default\n\tif [ -s $FM_CONFIG_DIR/opa/opafm.info ]\n\tthen\n\t    # get IFS_FM_BASE\n\t    . $FM_CONFIG_DIR/opa/opafm.info\n\telse\n\t    echo \"opacabletest: Warning: $FM_CONFIG_DIR/opa/opafm.info not found: using $IFS_FM_BASE\" >&2\n\tfi\n}\n\nstart_fi()\n{\n\tif [ ! -e $FF_MPI_APPS_DIR/run_batch_cabletest ]\n\tthen\n\t\techo \"opacabletest: Invalid FF_MPI_APPS_DIR: $FF_MPI_APPS_DIR\" >&2\n\t\texit 1\n\tfi\n\tif [ ! -x $FF_MPI_APPS_DIR/groupstress/mpi_groupstress ]\n\tthen\n\t\techo \"opacabletest: FF_MPI_APPS_DIR ($FF_MPI_APPS_DIR) not compiled\" >&2\n\t\trm -f $tempfile\n\t\texit 1\n\tfi\n\tff_var_to_stdout \"$HOSTS\" > $tempfile\n\tcd $FF_MPI_APPS_DIR\n\tMPI_HOSTS=$tempfile ./run_batch_cabletest -n $numprocs infinite\n}\n\nstart_isl()\n{\n\t(\n\t\tget_fmconfig\n\t\tif [ ! -x $IFS_FM_BASE/bin/fm_opacmdall ]\n\t\tthen\n\t\t\techo \"opacabletest: Error: $IFS_FM_BASE/bin/fm_opacmdall not found\" >&2\n\t\t\trm -f $tempfile\n\t\t\texit 1\n\t\tfi\n\t\t$IFS_FM_BASE/bin/fm_opacmdall smLooptestFastModeStart\n\t)\n\tres=$?\n\t[ $res -ne 0 ] && exit $res\n}\n\nstart()\n{\n\tstart_fi\n\tstart_isl\n}\n\nstop_fi()\n{\n\t# we use patterns so the pkill doesn't kill this script or opacmdall itself\n\t# use an echo at end so exit status is good\n\t$BINDIR/opacmdall -p -T 60 \"pkill -9 -f '[m]pi_groupstress'; echo -n\"\n}\n\nstop_isl()\n{\n\t(\n\t\tget_fmconfig\n\t\tif [ ! -x $IFS_FM_BASE/bin/fm_opacmdall ]\n\t\tthen\n\t\t\techo \"opacabletest: Error: $IFS_FM_BASE/bin/fm_opacmdall not found\" >&2\n\t\t\trm -f $tempfile\n\t\t\texit 1\n\t\tfi\n\t\t$IFS_FM_BASE/bin/fm_opacmdall smLooptestStop\n\t)\n\tres=$?\n\t[ $res -ne 0 ] && exit $res\n}\n\nstop()\n{\n\tstop_fi\n\tstop_isl\n}\n\nwhile [ $# -ne 0 ]\ndo\n\tcase \"$1\" in\n\tstart) start;;\n\tstart_fi) start_fi;;\n\tstart_isl) start_isl;;\n\tstop) stop;;\n\tstop_fi) stop_fi;;\n\tstop_isl) stop_isl;;\n\t*)\tUsage;;\n\tesac\n\tshift\ndone\n\nrm -f $tempfile\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# query the SM via opareport and generate a switches file listing all the\n# Externally Managed SilverStorm switches found in the fabric.\n\n# Enhancements: optionally, do not generate an switches file, but use an existing\n# switches file; optionally, update NodeDesc values in an switches file using\n# NodeDesc values found in a specified topology.xml file and fabric link\n# information obtained via opareport -o links (live fabric or snapshot).\n\n\n## Includes\ntrap \"exit 1\" SIGHUP SIGTERM SIGINT\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\n. $TOOLSDIR/ff_funcs\n\n## Defines:\nOPAEXPAND_FILE=\"$BINDIR/opaexpandfile\"\nOPA_REPORT=\"$BINDIR/opareport\"\nOPASAQUERY=\"$BINDIR/opasaquery\"\nXML_EXTRACT=\"$BINDIR/opaxmlextract\"\nGEN_OPASWITCHES_HELPER=\"$TOOLSDIR/opagenswitcheshelper\"\nFILE_OPASWITCHES=\"file_switches\"\nFILE_OPASWITCHES2=\"file_switches2\"\nFILE_LINKSUM_LEAF_EDGE=\"linksum_leaf_edge.csv\"\nFILE_LINKSUM_EDGE_HFI=\"linksum_edge_hfi.csv\"\nFILE_LINKS_LEAF_EDGE=\"links_leaf_edge.csv\"\nFILE_LINKS_LEAF_EDGE2=\"links_leaf_edge2.csv\"\nFILE_LINKS_EDGE_HFI=\"links_edge_hfi.csv\"\nFILE_LINKS_EDGE_HFI2=\"links_edge_hfi2.csv\"\nFILE_RESERVE=\"file_reserve\"\nFILE_TEMP=\"file_temp\"\nFILE_TEMP2=\"file_temp2\"\nFILE_DEBUG=\"file_debug\"\nFILE_DEBUG2=\"file_debug2\"\n\n\n## Global variables:\n\n# Operating variables:\nn_verbose=0\nfl_clean=1\nfl_gen_switches=1\nfl_gen_linksum=0\nfl_write_switches=0\nfile_switches=\"$FILE_OPASWITCHES\"\nfile_output=\"\"\nfile_topology=\"\"\nfile_snapshot=\"\"\nnodeguid1=\nportnum1=\nnodetype1=\nnodedesc1=\nnodesuffix1=\nnodeguid1b=\nportnum1b=\nnodetype1b=\nnodedesc1b=\nnodesuffix1b=\nnodeguid2=\nportnum2=\nnodetype2=\nnodedesc2=\nnodesuffix2=\nnodeguid2b=\nportnum2b=\nnodetype2b=\nnodedesc2b=\nnodesuffix2b=\nnodedesc_last=\nline=\nline1=\nline2=\nn_hfis=0\nhfis=\nn_edges=0\nn_edges2=0\nn_edges2b=0\nedges=\nn_edges_unique=0\nedges_unique=\nn_leaves=0\nn_leaves2=0\nn_leaves2b=0\nleaves=\nn_leaves_unique=0\nleaves_unique=\n\n# Debug variables:\ndebug_0=\ndebug_1=\ndebug_2=\ndebug_3=\ndebug_4=\ndebug_5=\ndebug_6=\ndebug_7=\n#echo \"DEBUG-x.y: 0:$debug_0: 1:$debug_1: 2:$debug_2: 3:$debug_3: 4:$debug_4: 5:$debug_5: 6:$debug_6: 7:$debug_7:\"\n\n\n## Local functions:\nfunctout=\n\n# Clean temporary files\nclean_files()\n{\n\tif [ $fl_clean == 1 ]\n\t\tthen\n\t\trm -f $FILE_TEMP\n\t\trm -f $FILE_TEMP2\n\t\trm -f $FILE_OPASWITCHES\n\t\trm -f $FILE_OPASWITCHES2\n\t\trm -f $FILE_LINKSUM_LEAF_EDGE\n\t\trm -f $FILE_LINKSUM_EDGE_HFI\n\t\trm -f $FILE_LINKS_LEAF_EDGE\n\t\trm -f $FILE_LINKS_LEAF_EDGE2\n\t\trm -f $FILE_LINKS_EDGE_HFI\n\t\trm -f $FILE_LINKS_EDGE_HFI2\n\tfi\n}\t# End of clean_files()\n\nUsage_full()\n{\n\techo \"Usage: opagenswitches [-t portsfile] [-p ports] [-R]\" >&2\n\techo \"         [-L switches_file] [-o output_file] [-T topology_file] [-X snapshot_file]\" >&2\n\techo \"         [-s] [-v level] [-K]\" >&2\n\techo \"              or\" >&2\n\techo \"       opagenswitches --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"                  fabric(s) for analysis, default is $CONFIG_DIR/opa/ports\" >&2\n\techo \"   -p ports - list of local HFI ports used to access fabric(s) for analysis\" >&2\n\techo \"              default is 1st active port\" >&2\n\techo \"              This is specified as hfi:port\" >&2\n\techo \"                 0:0 = 1st active port in system\" >&2\n\techo \"                 0:y = port y within system\" >&2\n\techo \"                 x:0 = 1st active port on HFI x\" >&2\n\techo \"                 x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"   -R - do not attempt to get routes for computation of distance\" >&2\n\techo \"   -s - update/resolve switches switch names using topology XML data\" >&2\n\techo \"   -L switches_file - use switches_file as switches input\" >&2\n\techo \"                     (do not generate switches data; must also use -s)\" >&2\n\techo \"   -o output_file - write switches data to output_file (default is stdout)\" >&2\n\techo \"   -T topology_file - use topology_file as topology XML\" >&2\n\techo \"                      (may contain '%P'; must also use -s)\" >&2\n\techo \"   -X snapshot_file - use snapshot_file XML for fabric link information\" >&2\n\techo \"                      (may contain '%P'; must also use -s)\" >&2\n\techo \"   -v level - verbose level (0-8, default 0)\" >&2\n\techo \"              0 - no output\" >&2\n\techo \"              1 - progress output\" >&2\n\techo \"              2 - reserved\" >&2\n\techo \"              4 - time stamps\" >&2\n\techo \"              8 - reserved\" >&2\n\techo \"   -K - do not clean temporary files\" >&2\n\techo \" Environment:\" >&2\n\techo \"   PORTS - list of ports, used in absence of -t and -p\" >&2\n\techo \"   PORTS_FILE - file containing list of ports, used in absence of -t and -p\" >&2\n\techo \"   FF_TOPOLOGY_FILE - file containing topology XML data, used in absence of -T\" >&2\n\techo \"for example:\" >&2\n\techo \"   opagenswitches\" >&2\n\techo \"   opagenswitches -p '1:1 1:2 2:1 2:2'\" >&2\n\techo \"   opagenswitches -o switches\" >&2\n\techo \"   opagenswitches -s -o switches\" >&2\n\techo \"   opagenswitches -L switches -s -o switches\" >&2\n\techo \"   opagenswitches -s -T topology.%P.xml\" >&2\n\techo \"   opagenswitches -L switches -s -T topology.%P.xml -X snapshot.%P.xml\" >&2\n\texit 0\n}\t# End of Usage_full()\n\nUsage()\n{\n\techo \"Usage: opagenswitches [-R] [-s] [-T topology_file]\" >&2\n\techo \"              or\" >&2\n\techo \"       opagenswitches --help\" >&2\n\techo \"   -R - do not attempt to get routes for computation of distance\" >&2\n\techo \"   -s - update/resolve switches switch names using topology XML data\" >&2\n\techo \"   -T topology_file - use topology_file as topology XML\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"for example:\" >&2\n\techo \"   opagenswitches\" >&2\n\techo \"   opagenswitches -T topology.0:0.xml\" >&2\n\tclean_files\n\texit 2\n}\t# End of Usage()\n\n# Display progress information (to STDOUT)\n# Inputs:\n#   $1 - progress string\n#\n# Outputs:\n#   none\ndisplay_progress()\n{\n\tif [ $n_verbose -ge 1 ]\n\t\tthen\n\t\techo \"$1\" >&2\n\t\tif [ $n_verbose -ge 4 ]\n\t\tthen\n\t\t\techo \"  \"`date +\"%F %T (%N nSec)\"` >&2\n\t\tfi\n\tfi\n}\t# End of display_progress()\n\ngen_switches()\n{\n\tlocal suffix\n\n\t# $1 = hfi\n\t# $2 = port\n\tif [ \"$port\" -eq 0 ]\n\tthen\n\t\tport_opts=\"-h $hfi\"\t# default port to 1st active\n\telse\n\t\tport_opts=\"-h $hfi -p $port\"\n\tfi\n\n\teval $OPASAQUERY $port_opts -o desc >/dev/null 2>&1\n\tif [ $? -ne 0 ]\n\t\tthen\n\t\techo \"opagenswitches: Error: Fabric Nodes Not Available at hfi:$hfi port:$port\" >&2\n\t\treturn\n\tfi\n\tsuffix=\":$hfi:$port\"\n\texport IFS=';'\n\trm -f $FILE_TEMP\n\teval $OPA_REPORT $port_opts -q -o comps -x -F nodetype:SW -d 3| $XML_EXTRACT -H -d \\; -e Node.NodeGUID -e Node.SystemImageGUID -e Node.Capability -e Node.NodeDesc -e Node.PortInfo.GUID -s Focus > $FILE_TEMP\n\tif [ $? -eq 0 ]\n\t\tthen\n\t\tfl_write_switches=1\n\t\tcat $FILE_TEMP | while read nodeguid systemguid capability nodedesc portguid\n\t\tdo\n\t\t\tif echo \"$capability\"|grep E0 >/dev/null 2>&1\n\t\t\tthen\n\t\t\t\tcontinue\t# EM switches don't have E0 capability\n\t\t\tfi\n\t\t\t[ \"$nodeguid\" != \"$systemguid\" ] && continue # EM switches have 1 guid\n\n\t\t\tdistance=\n\t\t\tcomma=\n\t\t\tif [ \"$get_distance\" = y ]\n\t\t\tthen\n\t\t\t\tdistance=$(eval opasaquery $port_opts -o trace -g $portguid|grep GID|wc -l)\n\t\t\t\tif [ ! -z \"$distance\" ]\n\t\t\t\tthen\n\t\t\t\t\tcomma=\",\"\n\t\t\t\tfi\n\t\t\tfi\n\n\t\t\t# valid names for switches start with a non-numeric and are alpha numeric\n\t\t\tif echo \"$nodedesc\"|grep '^[a-zA-Z_][a-zA-Z_0-9]*$' >/dev/null 2>&1\n\t\t\tthen\n\t\t\t\techo \"$nodeguid$suffix,$nodedesc$comma$distance\" >> $file_switches\n\t\t\telse\n\t\t\t\techo \"# $nodedesc\" >> $file_switches\n\t\t\t\techo \"$nodeguid$suffix$comma$comma$distance\" >> $file_switches\n\t\t\tfi\n\t\tdone\t# End of while read nodeguid systemguid capability nodedesc portguid\n\telse\n\t\techo \"opagenswitches: Error: Unable to Query Fabric Nodes at hfi:$hfi port:$port\" >&2\n\tfi\n\n}\t# End of gen_switches()\n\n# Resolve name of switches file\n# Inputs:\n#   $1 - command name\n#   OPASWITCHES_FILE - switches file name to process\n#\n# Outputs:\n#   OPASWITCHES_FILE - resolved switches file name\nresolve_switches_file()\n{\n\tif [ \"$OPASWITCHES_FILE\" = \"\" ]\n\tthen\n\t\tOPASWITCHES_FILE=$CONFIG_DIR/opa/switches\n\tfi\n\tOPASWITCHES_FILE=`resolve_file \"$1\" \"$OPASWITCHES_FILE\"`\n\tif [ \"$OPASWITCHES_FILE\" = \"\" ]\n\tthen\n\t\tUsage\n\tfi\n\n}\t# End of resolve_switches_file()\n\n# Resolve name of snapshot file, including %P\n# Inputs:\n#   $1 - command name\n#   $2 - hfi:port fabric selector (0:0, 1:2, etc)\n#   FF_SNAPSHOT_FILE - snapshot file name to process\n#\n# Outputs:\n#   SNAPSHOT_FILE - resolved snapshot file name\nresolve_snapshot_file()\n{\n\tif [ \"$FF_SNAPSHOT_FILE\" = \"\" -o \"$FF_SNAPSHOT_FILE\" = \"NONE\" ]\n\tthen\n\t\tSNAPSHOT_FILE=\"\"\n\t\t# snapshot check disabled\n\t\treturn\n\tfi\n\t# Expand %P marker\n\tfile=$(echo \"$FF_SNAPSHOT_FILE\"|sed -e \"s/%P/$2/g\")\n\t# allow case where FF_SNAPSHOT_FILE is not found (ignore stderr)\n\tSNAPSHOT_FILE=`resolve_file \"$1\" \"$file\" 2>/dev/null`\n\n}\t# End of resolve_snapshot_file()\n\n\n## Main function:\nrm -f $FILE_OPASWITCHES\nrm -f $FILE_OPASWITCHES2\nrm -f $FILE_DEBUG\nrm -f $FILE_DEBUG2\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nget_distance=y\nwhile getopts KL:o:p:Rst:T:v:X:? param\ndo\n\tcase $param in\n\tK)\tfl_clean=0;;\n\tL)\tfl_gen_switches=0\n\t\tfl_write_switches=1\n\t\tfile_switches=\"$OPTARG\"\n\t\tif [ ! -f \"$file_switches\" ]\n\t\t\tthen\n\t\t\techo \"opagenswitches: Error: switches file $file_switches does not exist\" >&2\n\t\t\tUsage\n\t\tfi\n\t\t;;\n\to)\tfile_output=\"$OPTARG\";;\n\tp)\texport PORTS=\"$OPTARG\";;\n\tR)\tget_distance=n;;\n\ts)  fl_gen_linksum=1;;\n\tt)\texport PORTS_FILE=\"$OPTARG\";;\n\tT)  file_topology=\"$OPTARG\";;\n\tv)\tn_verbose=$OPTARG;;\n\tX)  file_snapshot=\"$OPTARG\";;\n\t?)\tUsage;;\n\tesac\ndone\n\nshift $((OPTIND -1))\nif [ $# -ge 1 ]\nthen\n\tUsage\nfi\n\ncheck_ports_args opagenswitches\nif [ $fl_gen_switches == 0 -o \"x$file_topology\" != \"x\" -o \"x$file_snapshot\" != \"x\" ]\n\tthen\n\tif [ $fl_gen_linksum == 0 ]\n\t\tthen\n\t\techo \"opagenswitches: Error: -L, -T and -X must also use -s\" >&2\n\t\tUsage\n\tfi\nfi\n\n# Generate file_switches\nif [ $fl_gen_switches == 1 ]\n\tthen\n\techo -n \"\" > $file_switches\n\n\tIFS=$' \\t\\n'\n\tfor hfi_port in $PORTS\n\tdo\n\t\thfi=$(expr $hfi_port : '\\([0-9]*\\):[0-9]*')\n\t\tport=$(expr $hfi_port : '[0-9]*:\\([0-9]*\\)')\n\t\t$BINDIR/oparesolvehfiport $hfi $port >/dev/null\n\t\tif [ $? -ne 0 -o \"$hfi\" = \"\" -o \"$port\" = \"\" ]\n\t\tthen\n\t\t\techo \"opagenswitches: Error: Invalid port specification: $hfi_port\" >&2\n\t\t\tcontinue\n\t\tfi\n\n\t\tdisplay_progress \"Generating switches hfi:$hfi port:$port\"\n\t\tgen_switches \"$hfi\" \"$port\"\n\tdone\nelse\n\tOPASWITCHES_FILE=$file_switches\n\tresolve_switches_file \"opagenswitches\"\n\tcp -p $OPASWITCHES_FILE $FILE_OPASWITCHES\n\n\t# Check FILE_OPASWITCHES for include lines\n\tif cat $FILE_OPASWITCHES | grep include >/dev/null 2>&1\n\t\tthen\n\t\techo \"opagenswitches: Warning: $OPASWITCHES_FILE contains non-processed include statement(s)\" >&2\n\tfi\nfi\t# End of if [ $fl_gen_switches == 1 ]\n\n# Process $file_topology\nif [ $fl_write_switches == 1 -a $fl_gen_linksum == 1 ]\n\tthen\n\tIFS=$' \\t\\n'\n\tfor hfi_port in $PORTS\n\tdo\n\t\thfi=$(expr $hfi_port : '\\([0-9]*\\):[0-9]*')\n\t\tport=$(expr $hfi_port : '[0-9]*:\\([0-9]*\\)')\n\t\t$BINDIR/oparesolvehfiport $hfi $port >/dev/null\n\t\tif [ $? -ne 0 -o \"$hfi\" = \"\" -o \"$port\" = \"\" ]\n\t\t\tthen\n\t\t\techo \"opagenswitches: Error: Invalid port specification: $hfi_port\" >&2\n\t\t\tcontinue\n\t\tfi\n\n\t\tif [ -n \"$file_topology\" ]\n\t\t\tthen\n\t\t\tFF_TOPOLOGY_FILE=$file_topology\n\t\tfi\n\t\tresolve_topology_file \"opagenswitches\" \"$hfi:$port\"\n\t\tif [ -f \"$TOPOLOGY_FILE\" ]\n\t\t\tthen\n\t\t\tIFS=\";\"\n\n\t\t\t# Generate FILE_LINKSUM(s) from TOPOLOGY_FILE\n\t\t\tdisplay_progress \"Reading $TOPOLOGY_FILE and Generating FILE_LINKSUM Components\"\n\t\t\trm -f $FILE_LINKSUM_LEAF_EDGE\n\t\t\trm -f $FILE_LINKSUM_EDGE_HFI\n\t\t\tix=0\n\t\t\trm -f $FILE_TEMP\n\t\t\tcat $TOPOLOGY_FILE | $XML_EXTRACT -H -d \\; -e PortNum -e NodeType -e Port.NodeDesc > $FILE_TEMP\n\t\t\t$GEN_OPASWITCHES_HELPER proc_linksum $FILE_TEMP $FILE_LINKSUM_EDGE_HFI $FILE_LINKSUM_LEAF_EDGE\n\n\t\t\tif [ -a $FILE_LINKSUM_LEAF_EDGE ]\n\t\t\t\tthen\n\t\t\t\tdisplay_progress \"Processing $FILE_LINKSUM_LEAF_EDGE\"\n\t\t\t\trm -f $FILE_TEMP\n\t\t\t\tmv $FILE_LINKSUM_LEAF_EDGE $FILE_TEMP\n\t\t\t\tcat $FILE_TEMP | sort -t \\; -k3,3 -k1g,1 -k4g,4 > $FILE_LINKSUM_LEAF_EDGE\n\t\t\tfi\n\n\t\t\tif [ -a $FILE_LINKSUM_EDGE_HFI ]\n\t\t\t\tthen\n\t\t\t\tdisplay_progress \"Processing $FILE_LINKSUM_EDGE_HFI\"\n\t\t\t\trm -f $FILE_TEMP\n\t\t\t\tmv $FILE_LINKSUM_EDGE_HFI $FILE_TEMP\n\t\t\t\tcat $FILE_TEMP | sort -t \\; -k3,3 -k1g,1 -k4g,4 > $FILE_LINKSUM_EDGE_HFI\n\t\t\tfi\n\n\t\t\t# Generate GUID/NodeDesc links files\n\t\t\tdisplay_progress \"Generating links report and FILE_LINKS Components\"\n\t\t\trm -f $FILE_LINKS_LEAF_EDGE\n\t\t\trm -f $FILE_LINKS_EDGE_HFI\n\t\t\tix=0\n\n\t\t\tif [ -z \"$file_snapshot\" ]\n\t\t\t\tthen\n\t\t\t\tif [ \"$port\" -eq 0 ]\n\t\t\t\t\tthen\n\t\t\t\t\tport_opts=\"-h $hfi\"\t# default port to 1st active\n\t\t\t\telse\n\t\t\t\t\tport_opts=\"-h $hfi -p $port\"\n\t\t\t\tfi\n\t\t\t\teval $OPASAQUERY $port_opts -o desc >/dev/null 2>&1\n\t\t\t\tif [ $? -ne 0 ]\n\t\t\t\t\tthen\n\t\t\t\t\techo \"opagenswitches: Error: Fabric Links Not Available at hfi:$hfi port:$port\" >&2\n\t\t\t\t\tcontinue\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tFF_SNAPSHOT_FILE=$file_snapshot\n\t\t\t\tresolve_snapshot_file \"opagenswitches\" \"$hfi:$port\"\n\t\t\t\tif [ ! -f \"$SNAPSHOT_FILE\" ]\n\t\t\t\t\tthen\n\t\t\t\t\techo \"opagenswitches: Error: snapshot file $SNAPSHOT_FILE does not exist\" >&2\n\t\t\t\t\tcontinue\n\t\t\t\tfi\n\t\t\t\tport_opts=\"-X $SNAPSHOT_FILE\"\n\t\t\tfi\n\n\t\t\trm -f $FILE_TEMP\n\t\t\teval $OPA_REPORT $port_opts -q -x -o links | $XML_EXTRACT -H -d \\; -e NodeGUID -e PortNum -e NodeType -e NodeDesc > $FILE_TEMP\n\t\t\tif [ $? -eq 0 ]\n\t\t\t\tthen\n\t\t\t\t$GEN_OPASWITCHES_HELPER proc_links $FILE_TEMP $FILE_LINKS_EDGE_HFI $FILE_LINKS_LEAF_EDGE\n\n\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE ]\n\t\t\t\t\tthen\n\t\t\t\t\tdisplay_progress \"Processing $FILE_LINKS_LEAF_EDGE\"\n\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE $FILE_TEMP\n\t\t\t\t\tcat $FILE_TEMP | sort -t \\; -k4,4 -k2g,2 -k5g,5 > $FILE_LINKS_LEAF_EDGE\n\t\t\t\tfi\t# End of if [ -a $FILE_LINKS_LEAF_EDGE ]\n\n\t\t\t\tif [ -a $FILE_LINKS_EDGE_HFI ]\n\t\t\t\t\tthen\n\t\t\t\t\tdisplay_progress \"Processing $FILE_LINKS_EDGE_HFI\"\n\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\tmv $FILE_LINKS_EDGE_HFI $FILE_TEMP\n\t\t\t\t\tcat $FILE_TEMP | sort -t \\; -k4,4 -k2g,2 -k5g,5 > $FILE_LINKS_EDGE_HFI\n\t\t\t\tfi\t# End of if [ -a $FILE_LINKS_EDGE_HFI ]\n\n\t\t\t\t# Process NodeDesc in links files\n\t\t\t\trm -f $FILE_LINKS_LEAF_EDGE2\n\t\t\t\trm -f $FILE_LINKS_EDGE_HFI2\n\n\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE ]\n\t\t\t\t\tthen\n\t\t\t\t\tcp -p $FILE_LINKS_LEAF_EDGE $FILE_LINKS_LEAF_EDGE2\n\t\t\t\tfi\n\t\t\t\tif [ -a $FILE_LINKS_EDGE_HFI ]\n\t\t\t\t\tthen\n\t\t\t\t\tcp -p $FILE_LINKS_EDGE_HFI $FILE_LINKS_EDGE_HFI2\n\t\t\t\tfi\n\n\t\t\t\t# Process edge NodeDesc\n\t\t\t\tif [ -a $FILE_LINKS_EDGE_HFI2 ]\n\t\t\t\t\tthen\n\t\t\t\t\tdisplay_progress \"Processing edge NodeDesc\"\n\n\t\t\t\t\tix_line=1\n\t\t\t\t\tnodedesc_last=\"ZzQQQzZ\"\n\n\t\t\t\t\twhile read portnum1 nodetype1 nodedesc1 portnum1b nodetype1b nodedesc1b\n\t\t\t\t\tdo\n\t\t\t\t\t\tif [ \"$nodedesc1\" != \"$nodedesc_last\" ]\n\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\tn_hfis=`cat $FILE_LINKSUM_EDGE_HFI | grep \"$nodedesc1;\" | wc -l`\n\t\t\t\t\t\t\thfis=`cat $FILE_LINKSUM_EDGE_HFI | grep \"$nodedesc1;\" | cut -d \\; -f6 | tr '\\012' '|' | sed -e 's/|/$|/g' -e 's/|$//'`\n\t\t\t\t\t\t\tn_edges=`cat $FILE_LINKS_EDGE_HFI2 | grep -E \"$hfis\" | wc -l`\n\t\t\t\t\t\t\tn_edges_unique=`cat $FILE_LINKS_EDGE_HFI2 | grep -E \"$hfis\" | cut -d \\; -f4 | sort -u | wc -l`\n# ToDo: may be able to eliminate $edges\n\t\t\t\t\t\t\tedges=`cat $FILE_LINKS_EDGE_HFI2 | grep -E \"$hfis\" | cut -d \\; -f4`\n\t\t\t\t\t\t\tedges_unique=`cat $FILE_LINKS_EDGE_HFI2 | grep -E \"$hfis\" | cut -d \\; -f4 | sort -u`\n\t\t\t\t\t\t\tif [ $n_edges_unique == 1 ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tnodedesc2=$(expr \"$edges_unique\" : '\\([0-9a-zA-Z =_-]*\\)')\n\t\t\t\t\t\t\t\tif [ \"$nodedesc2\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_EDGE_HFI2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2;/$nodedesc1;/\" > $FILE_LINKS_EDGE_HFI2\n\t\t\t\t\t\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2$/$nodedesc1/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tnodedesc_last=$nodedesc1\n\t\t\t\t\t\t\telif [ $n_edges_unique == 2 ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tnodedesc2=`echo $edges_unique | head -n1`\n\t\t\t\t\t\t\t\tnodedesc2b=`echo $edges_unique  | tail -n1`\n\t\t\t\t\t\t\t\tn_edges2=`echo $edges | grep -c \"$nodedesc2\"`\n\t\t\t\t\t\t\t\tn_edges2b=`echo $edges | grep -c \"$nodedesc2b\"`\n\t\t\t\t\t\t\t\tif [ $n_edges2 -gt $n_edges2b ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\tif [ \"$nodedesc2\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_EDGE_HFI2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2;/$nodedesc1;/\" > $FILE_LINKS_EDGE_HFI2\n\t\t\t\t\t\t\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2$/$nodedesc1/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\telif [ $n_edges2b -gt $n_edges2 ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\tif [ \"$nodedesc2b\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_EDGE_HFI2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2b;/$nodedesc1;/\" > $FILE_LINKS_EDGE_HFI2\n\t\t\t\t\t\t\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2b$/$nodedesc1/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tnodedesc_last=$nodedesc1\n\t\t\t\t\t\t\telif [ $n_edges_unique -ge 3 ]\n\t\t\t\t\t\t\t\tthen\n# ToDo: add processing for 3 edges\n\t\t\t\t\t\t\t\tfiller=1\n\t\t\t\t\t\t\telif [ $n_edges_unique == 0 ]\n\t\t\t\t\t\t\t\tthen\n# ToDo: consider processing here\n\t\t\t\t\t\t\t  filler=1\n\t\t\t\t\t\t\tfi\t# End of if [ $n_edges_unique == 1 ]\n\n\t\t\t\t\t\tfi\t# End of if [ \"$nodedesc1\" != \"$nodedesc_last\" ]\n\n\t\t\t\t\t\tix_line=$((ix_line+1))\n\n\t\t\t\t\tdone < <( cat $FILE_LINKSUM_EDGE_HFI )\t# End of while read ... do\n\n\t\t\t\tfi\t# End of if [ -a $FILE_LINKS_EDGE_HFI2 ]\n\n\t\t\t\t# Process leaf NodeDesc\n\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\tthen\n\t\t\t\t\tdisplay_progress \"Processing leaf NodeDesc\"\n\n\t\t\t\t\tix_line=1\n\t\t\t\t\tnodedesc_last=\"ZzQQQzZ\"\n\n\t\t\t\t\twhile read portnum1 nodetype1 nodedesc1 portnum1b nodetype1b nodedesc1b\n\t\t\t\t\tdo\n\t\t\t\t\t\tif [ \"$nodedesc1\" != \"$nodedesc_last\" ]\n\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\tif [ -a $FILE_LINKSUM_LEAF_EDGE ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tn_edges=`cat $FILE_LINKSUM_LEAF_EDGE | grep \"$nodedesc1;\" | wc -l`\n\t\t\t\t\t\t\t\tedges=`cat $FILE_LINKSUM_LEAF_EDGE | grep \"$nodedesc1;\" | cut -d \\; -f4-6 | tr '\\012' '|' | sed -e 's/|/$|/g' -e 's/|$//'`\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tn_edges=0\n\t\t\t\t\t\t\t\tedges=\"ZzQQQzZ\"\n\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\tn_leaves=`cat $FILE_LINKS_LEAF_EDGE2 | grep -E \"$edges\" | wc -l`\n\t\t\t\t\t\t\tn_leaves_unique=`cat $FILE_LINKS_LEAF_EDGE2 | grep -E \"$edges\" | cut -d \\; -f4 | sort -u | wc -l`\n# ToDo: may be able to eliminate $leaves\n\t\t\t\t\t\t\tleaves=`cat $FILE_LINKS_LEAF_EDGE2 | grep -E \"$edges\" | cut -d \\; -f4`\n\t\t\t\t\t\t\tleaves_unique=`cat $FILE_LINKS_LEAF_EDGE2 | grep -E \"$edges\" | cut -d \\; -f4 | sort -u`\n\t\t\t\t\t\t\tif [ $n_leaves_unique == 1 ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tnodedesc2=$(expr \"$leaves_unique\" : '\\([0-9a-zA-Z =_-]*\\)')\n\t\t\t\t\t\t\t\tif [ \"$nodedesc2\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2;/$nodedesc1;/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tnodedesc_last=$nodedesc1\n\t\t\t\t\t\t\telif [ $n_leaves_unique == 2 ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tnodedesc2=`echo $leaves_unique | head -n1`\n\t\t\t\t\t\t\t\tnodedesc2b=`echo $leaves_unique  | tail -n1`\n\t\t\t\t\t\t\t\tn_leaves2=`echo $leaves | grep -c \"$nodedesc2\"`\n\t\t\t\t\t\t\t\tn_leaves2b=`echo $leaves | grep -c \"$nodedesc2b\"`\n\t\t\t\t\t\t\t\tif [ $n_leaves2 -gt $n_leaves2b ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\tif [ \"$nodedesc2\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2;/$nodedesc1;/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\telif [ $n_leaves2b -gt $n_leaves2 ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\tif [ \"$nodedesc2b\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2b;/$nodedesc1;/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tnodedesc_last=$nodedesc1\n\t\t\t\t\t\t\telif [ $n_leaves_unique -ge 3 ]\n\t\t\t\t\t\t\t\tthen\n# ToDo: add processing for 3 leaves\n\t\t\t\t\t\t\t\tfiller=1\n\t\t\t\t\t\t\telif [ $n_leaves_unique == 0 ]\n\t\t\t\t\t\t\t\tthen\n# ToDo: consider processing here\n\t\t\t\t\t\t\t\tfiller=1\n\t\t\t\t\t\t\tfi\t# End of if [ $n_leaves_unique == 1 ]\n\n\t\t\t\t\t\tfi\t# End of if [ \"$nodedesc1\" != \"$nodedesc_last\" ]\n\n\t\t\t\t\t\tix_line=$((ix_line+1))\n\n\t\t\t\t\tdone  < <( cat $FILE_LINKSUM_LEAF_EDGE )\t# End of while read ... do\n\n\t\t\t\tfi\t# End of if [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\n\t\t\t\t# Process file_switches\n\t\t\t\tdisplay_progress \"Processing $file_switches\"\n\n\t\t\t\trm -f $FILE_TEMP\n\t\t\t\trm -f $FILE_TEMP2\n\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\tthen\n\t\t\t\t\tcat $FILE_LINKS_LEAF_EDGE2 | cut  -d \\; -f1,4 | sort -u >> $FILE_TEMP\n\t\t\t\t\tcat $FILE_LINKS_LEAF_EDGE2 | cut  -d \\; -f5,8 | sort -u >> $FILE_TEMP\n\t\t\t\tfi\n\t\t\t\tif [ -a $FILE_LINKS_EDGE_HFI2 ]\n\t\t\t\t\tthen\n\t\t\t\t\tcat $FILE_LINKS_EDGE_HFI2 | cut  -d \\; -f1,4 | sort -u >> $FILE_TEMP\n\t\t\t\tfi\n\t\t\t\tif [ -a $FILE_TEMP ]\n\t\t\t\t\tthen\n\t\t\t\t\tcat $FILE_TEMP | grep -v -e ';[0-9a-zA-Z_]*[ =-]' | sed -r -e 's/([0-9a-zA-Z_]+);([0-9a-zA-Z_]+)/s\\/\\(\\1:'\"$hfi:$port\"'\\),[0-9a-zA-Z =_-]*\\/\\\\1,\\2\\//' | sort -u > $FILE_TEMP2\n\t\t\t\t\tcat $FILE_OPASWITCHES | sed -r -f $FILE_TEMP2 > $FILE_OPASWITCHES2\n\t\t\t\t\trm -f $FILE_OPASWITCHES\n\t\t\t\t\tmv $FILE_OPASWITCHES2 $FILE_OPASWITCHES\n\t\t\t\tfi\n\n\t\t\tfi\t# End of if [ $? -eq 0 ]\n\n\t\telse\n\t\t\techo \"opagenswitches: Error: topology file $TOPOLOGY_FILE does not exist\" >&2\n\n\t\tfi\t# End of if [ -f \"$TOPOLOGY_FILE\" ]\n\n\tdone\t# End of for hfi_port in $PORTS\n\nfi\t# End of if [ $fl_write_switches == 1 -a $fl_gen_linksum == 1 ]\n\nif [ $fl_write_switches == 1 ]\n\tthen\n\tif [ -n \"$file_output\" ]\n\t\tthen\n\t\tif [ -f $file_output ]\n\t\t\tthen\n\t\t\tif [ `$OPAEXPAND_FILE $file_output | wc -l` -ne 0 ]\n\t\t\t\tthen\n\t\t\t\trm -f ${file_output}.bak\n\t\t\t\tmv $file_output ${file_output}.bak\n\t\t\tfi\n\t\tfi\n\t\trm -f $file_output\n\t\tcp -p $FILE_OPASWITCHES $file_output\n\telse\n\t\tcat $FILE_OPASWITCHES\n\tfi\n\tclean_files\n\tdisplay_progress \"Done\"\n\texit 0\nelse\n\tclean_files\n\tdisplay_progress \"Done (error)\"\n\texit 1\nfi\n\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# analyzes all the links in the fabric\n\ntempfile=/tmp/opalinkanalysis$$\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\n. $TOOLSDIR/ff_funcs\n\npunchlist=$FF_RESULT_DIR/punchlist.csv\ndel=';'\ntimestamp=$(date +\"%Y/%m/%d %T\")\n\nUsage_full()\n{\n\techo \"Usage: opalinkanalysis [-U] [-t portsfile] [-p ports] [-T topology_input]\" >&2\n\techo \"                  -X snapshot_input] [-x snapshot_suffix] [-c file] reports ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opalinkanalysis --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -U - omit unexpected devices and links in punchlist from verify reports\" >&2\n\techo \"   -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"                  fabric(s) for analysis, default is $CONFIG_DIR/opa/ports\" >&2\n\techo \"   -p ports - list of local HFI ports used to access fabric(s) for analysis\" >&2\n\techo \"              default is 1st active port\" >&2\n\techo \"              This is specified as hfi:port\" >&2\n\techo \"                 0:0 = 1st active port in system\" >&2\n\techo \"                 0:y = port y within system\" >&2\n\techo \"                 x:0 = 1st active port on HFI x\" >&2\n\techo \"                 x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"   -T topology_input - name of a topology input file to use.\" >&2\n\techo \"              Any %P markers in this filename will be replaced with the\" >&2\n\techo \"              hfi:port being operated on (such as 0:0 or 1:2)\" >&2\n\techo \"              default is $CONFIG_DIR/opa/topology.%P.xml\" >&2\n\techo \"              if NONE is specified, will not use any topology_input files\" >&2\n\techo \"              See opareport for more information on topology_input files\" >&2\n\techo \"   -X snapshot_input - perform analysis using data in snapshot_input\" >&2\n\techo \"              snapshot_input must have been generated via a previous\" >&2\n\techo \"              opareport -o snapshot run.\" >&2\n\techo \"              If errors report is specified, snapshot must have been generated\" >&2\n\techo \"              with opareport -s option\" >&2\n\techo \"              When this option is used, only one port may be specified\" >&2\n\techo \"              to select a topology_input file (unless -T specified)\">&2\n\techo \"              When this option is used, clearerrors and clearhwerrors reports\" >&2\n\techo \"              are not permitted\" >&2\n\techo \"   -x snapshot_suffix - create a snapshot file per selected port\" >&2\n\techo \"              The files will be created in FF_RESULT_DIR with names of the form:\">&2\n\techo \"              snapshotSUFFIX.HFI:PORT.xml.\">&2\n\techo \"   -c file - error thresholds config file\" >&2\n\techo \"             default is $CONFIG_DIR/opa/opamon.si.conf\" >&2\n\techo \"    reports - The following reports are supported\" >&2\n\techo \"         errors - link error analysis\" >&2\n\techo \"         slowlinks - links running slower than expected\" >&2\n\techo \"         misconfiglinks - links configured to run slower than supported\" >&2\n\techo \"         misconnlinks - links connected with mismatched speed potential\" >&2\n\techo \"         all - includes all reports above\" >&2\n\techo \"         verifylinks - verify links against topology input\" >&2\n\techo \"         verifyextlinks - verify links against topology input\" >&2\n\techo \"                     limit analysis to links external to systems\" >&2\n\techo \"         verifyfis - verify FIs against topology input\" >&2\n\techo \"         verifysws - verify Switches against topology input\" >&2\n\techo \"         verifyrtrs - verify Routers against topology input\" >&2\n\techo \"         verifynodes - verify FIs, Switches and Routers against topology input\" >&2\n\techo \"         verifysms - verify SMs against topology input\" >&2\n\techo \"         verifyall - verifies links, FIs, Switches, Routers and SMs\" >&2\n\techo \"                     against topology input\" >&2\n\techo \"         clearerrors - clear error counters, uses PM if available\" >&2\n\techo \"         clearhwerrors - clear HW error counters, bypasses PM\" >&2\n\techo \"         clear - includes clearerrors and clearhwerrors\" >&2\n  \techo >&2\n\techo \"A punchlist of bad links is also appended to FF_RESULT_DIR/punchlist.csv\" >&2\n  \techo >&2\n\techo \" Environment:\" >&2\n\techo \"   PORTS - list of ports, used in absence of -t and -p\" >&2\n\techo \"   PORTS_FILE - file containing list of ports, used in absence of -t and -p\" >&2\n\techo \"   FF_TOPOLOGY_FILE - file containing topology_input, used in absence of -T\" >&2\n\techo \"example:\">&2\n\techo \"   opalinkanalysis errors\" >&2\n\techo \"   opalinkanalysis errors clearerrors\" >&2\n\techo \"   opalinkanalysis -p '1:1 1:2 2:1 2:2'\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opalinkanalysis [-U] reports ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opalinkanalysis --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n  \techo >&2\n\techo \"   -U - omit unexpected devices and links in punchlist from verify reports\" >&2\n\techo \"    reports - The following reports are supported\" >&2\n\techo \"         errors - link error analysis\" >&2\n\techo \"         slowlinks - links running slower than expected\" >&2\n\techo \"         misconfiglinks - links configured to run slower than supported\" >&2\n\techo \"         misconnlinks - links connected with mismatched speed potential\" >&2\n\techo \"         all - includes all reports above\" >&2\n\techo \"         verifylinks - verify links against topology input\" >&2\n\techo \"         verifyextlinks - verify links against topology input\" >&2\n\techo \"                     limit analysis to links external to systems\" >&2\n\techo \"         verifyfis - verify FIs against topology input\" >&2\n\techo \"         verifysws - verify Switches against topology input\" >&2\n\techo \"         verifyrtrs - verify Routers against topology input\" >&2\n\techo \"         verifynodes - verify FIs, Switches and Routers against topology input\" >&2\n\techo \"         verifysms - verify SMs against topology input\" >&2\n\techo \"         verifyall - verifies links, FIs, Switches, Routers and SMs\" >&2\n\techo \"                     against topology input\" >&2\n\techo \"         clearerrors - clear error counters, uses PM if available\" >&2\n\techo \"         clearhwerrors - clear HW error counters, bypasses PM\" >&2\n\techo \"         clear - includes clearerrors and clearhwerrors\" >&2\n  \techo >&2\n\techo \"A punchlist of bad links is also appended to FF_RESULT_DIR/punchlist.csv\" >&2\n  \techo >&2\n\techo \"example:\">&2\n\techo \"   opalinkanalysis errors\" >&2\n\techo \"   opalinkanalysis errors clearerrors\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nappend_punchlist()\n# $1 = device\n# $2 = issue\n{\n\techo \"$timestamp$del$1$del$2\" >> $punchlist\n}\n\ngen_errors_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\t#opareport -q \"$@\" -o errors -x | $BINDIR/opaxmlextract -H -d \\; -e LinkErrors.Link.Port.NodeGUID -e LinkErrors.Link.Port.PortNum -e LinkErrors.Link.Port.NodeType -e LinkErrors.Link.Port.NodeDesc|while read line\n\topareport -q \"$@\" -o errors -x | $BINDIR/opaxmlextract -H -d \\; -e LinkErrors.Link.Port.NodeDesc -e LinkErrors.Link.Port.PortNum|while read desc port\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\telse\n\t\t\tappend_punchlist \"$port1 $desc p$port\" \"Link errors\"\n\t\t\tport1=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_slowlinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\t#opareport -q \"$@\" -o slowlinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksExpected.Link.Port.NodeGUID -e LinksExpected.Link.Port.PortNum -e LinksExpected.Link.Port.NodeType -e LinksExpected.Link.Port.NodeDesc|while read line\n\topareport -q \"$@\" -o slowlinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksExpected.Link.Port.NodeDesc -e LinksExpected.Link.Port.PortNum|while read desc port\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\telse\n\t\t\tappend_punchlist \"$port1 $desc p$port\" \"Link speed/width lower than expected\"\n\t\t\tport1=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_misconfiglinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\t#opareport -q \"$@\" -o misconfiglinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksConfig.Link.Port.NodeGUID -e LinksConfig.Link.Port.PortNum -e LinksConfig.Link.Port.NodeType -e LinksConfig.Link.Port.NodeDesc|while read line\n\topareport -q \"$@\" -o misconfiglinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksConfig.Link.Port.NodeDesc -e LinksConfig.Link.Port.PortNum|while read desc port\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\telse\n\t\t\tappend_punchlist \"$port1 $desc p$port\" \"Link speed/width configured lower than supported\"\n\t\t\tport1=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_misconnlinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tline1=\n\t#opareport -q \"$@\" -o misconnlinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksMismatched.Link.Port.NodeGUID -e LinksMismatched.Link.Port.PortNum -e LinksMismatched.Link.Port.NodeType -e LinksMismatched.Link.Port.NodeDesc|while read line\n\topareport -q \"$@\" -o misconnlinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksMismatched.Link.Port.NodeDesc -e LinksMismatched.Link.Port.PortNum|while read desc port\n\tdo\n\t\tif [ x\"$line1\" = x ]\n\t\tthen\n\t\t\tline1=\"$desc p$port\"\n\t\telse\n\t\t\tappend_punchlist \"$line1 $desc p$port\" \"Link speed/width mismatch\"\n\t\t\tline1=\n\t\tfi\n\tdone\n\t)\n}\n\nappend_verify_punchlist()\n# $1 = device\n# $2 = issue\n{\n\tif [ $skip_unexpected = y ]\n\tthen\n\t\tcase \"$2\" in\n\t\tUnexpected*)\t> /dev/null;;\n\t\t*) echo \"$timestamp$del$1$del$2\" >> $punchlist;;\n\t\tesac\n\telse\n\t\techo \"$timestamp$del$1$del$2\" >> $punchlist\n\tfi\n\n}\n\ngen_verifylinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\tport2=\n\tprob=\n\t#eval opareport -q \"$@\" -o verifylinks -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyLinks.Link.Port.NodeGUID -e VerifyLinks.Link.Port.PortNum -e VerifyLinks.Link.Port.NodeType -e VerifyLinks.Link.Port.NodeDesc|while read line\n\teval opareport -q \"$@\" -o verifylinks -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyLinks.Link.Port.NodeDesc -e VerifyLinks.Link.Port.PortNum -e VerifyLinks.Link.Port.Problem -e VerifyLinks.Link.Problem|while read desc port portprob linkprob\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\t\tprob=\"$portprob\"\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$linkprob\t# unlikely to occur here\n\t\t\tfi\n\t\telif [ x\"$port2\" = x ]\n\t\tthen\n\t\t\tport2=\"$desc p$port\"\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$portprob\n\t\t\tfi\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$linkprob\t# unlikely to occur here\n\t\t\tfi\n\n\t\t\tif [ x\"$prob\" != x ]\n\t\t\tthen\n\t\t\t\tappend_verify_punchlist \"$port1 $port2\" \"$prob\"\n\t\t\t\tport1=\n\t\t\t\tport2=\n\t\t\t\tprob=\n\t\t\tfi\n\t\telse\n\t\t\t# separate record for link problem\n\t\t\tprob=$linkprob\n\t\t\tappend_verify_punchlist \"$port1 $port2\" \"$prob\"\n\t\t\tport1=\n\t\t\tport2=\n\t\t\tprob=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_verifyextlinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\tport2=\n\tprob=\n\t#eval opareport -q \"$@\" -o verifyextlinks -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyExtLinks.Link.Port.NodeGUID -e VerifyExtLinks.Link.Port.PortNum -e VerifyExtLinks.Link.Port.NodeType -e VerifyExtLinks.Link.Port.NodeDesc|while read line\n\teval opareport -q \"$@\" -o verifyextlinks -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyExtLinks.Link.Port.NodeDesc -e VerifyExtLinks.Link.Port.PortNum -e VerifyExtLinks.Link.Port.Problem -e VerifyExtLinks.Link.Problem|while read desc port portprob linkprob\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\t\tprob=\"$portprob\"\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$linkprob\t# unlikely to occur here\n\t\t\tfi\n\t\telif [ x\"$port2\" = x ]\n\t\tthen\n\t\t\tport2=\"$desc p$port\"\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$portprob\n\t\t\tfi\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$linkprob\t# unlikely to occur here\n\t\t\tfi\n\n\t\t\tif [ x\"$prob\" != x ]\n\t\t\tthen\n\t\t\t\tappend_verify_punchlist \"$port1 $port2\" \"$prob\"\n\t\t\t\tport1=\n\t\t\t\tport2=\n\t\t\t\tprob=\n\t\t\tfi\n\t\telse\n\t\t\t# separate record for link problem\n\t\t\tprob=$linkprob\n\t\t\tappend_verify_punchlist \"$port1 $port2\" \"$prob\"\n\t\t\tport1=\n\t\t\tport2=\n\t\t\tprob=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_verifyfis_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\texport IFS=';'\n\t#eval opareport -q \"$@\" -o verifyfis -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyFIs.Node.NodeGUID -e VerifyFIs.Node.Desc -e VerifyFIs.Node.Problem|while read line\n\teval opareport -q \"$@\" -o verifyfis -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyFIs.Node.NodeDesc -e VerifyFIs.Node.Problem |while read desc prob\n\tdo\n\t\tappend_verify_punchlist \"$desc\" \"$prob\"\n\tdone\n\t)\n}\n\ngen_verifysws_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\texport IFS=';'\n\t#eval opareport -q \"$@\" -o verifysws -x | $BINDIR/opaxmlextract -H -d \\; -e VerifySWs.Node.NodeGUID -e VerifySWs.Node.Desc -e VerifySWs.Node.Problem|while read line\n\teval opareport -q \"$@\" -o verifysws -x | $BINDIR/opaxmlextract -H -d \\; -e VerifySWs.Node.NodeDesc -e VerifySWs.Node.Problem |while read desc prob\n\tdo\n\t\tappend_verify_punchlist \"$desc\" \"$prob\"\n\tdone\n\t)\n}\n\ngen_verifyrtrs_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\texport IFS=';'\n\t#eval opareport -q \"$@\" -o verifyrtrs -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyRTs.Node.NodeGUID -e VerifyRTs.Node.Desc -e VerifyRTs.Node.Problem|while read line\n\teval opareport -q \"$@\" -o verifyrtrs -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyRTs.Node.NodeDesc -e VerifyRTs.Node.Problem |while read desc prob\n\tdo\n\t\tappend_verify_punchlist \"$desc\" \"$prob\"\n\tdone\n\t)\n}\n\ngen_verifysms_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\texport IFS=';'\n\t#eval opareport -q \"$@\" -o verifysms -x | $BINDIR/opaxmlextract -H -d \\; -e VerifySMs.SM.NodeGUID -e VerifySMs.SM.Desc -e VerifySMs.SM.Problem|while read line\n\teval opareport -q \"$@\" -o verifysms -x | $BINDIR/opaxmlextract -H -d \\; -e VerifySMs.SM.NodeDesc -e VerifySMs.SM.PortNum -e VerifySMs.SM.Problem |while read desc port prob\n\tdo\n\t\t# port number is optional in topology_input, so for missing SMs\n\t\t# it might not be reported\n\t\tif [ x\"$port\" != x ]\n\t\tthen\n\t\t\tappend_verify_punchlist \"$desc p$port\" \"$prob\"\n\t\telse\n\t\t\tappend_verify_punchlist \"$desc\" \"$prob\"\n\t\tfi\n\tdone\n\t)\n}\n\nreport_opts=\"\"\nverify_opts=\"\"\nerrors=n\nclearerrors=n\nclearhwerrors=n\nslowlinks=n\nmisconfiglinks=n\nmisconnlinks=n\nverifylinks=n\nverifyextlinks=n\nverifyfis=n\nverifysws=n\nverifyrtrs=n\nverifysms=n\nreports=\"\"\nread_snapshot=n\nsnapshot_input=\nsave_snapshot=n\nsnapshot_suffix=\nskip_unexpected=n\nconfig_file=\"$CONFIG_DIR/opa/opamon.si.conf\"\nwhile getopts Ut:p:T:X:x:c: param\ndo\n\tcase $param in\n\tU)\tskip_unexpected=y;;\n\tp)\texport PORTS=\"$OPTARG\";;\n\tt)\texport PORTS_FILE=\"$OPTARG\";;\n\tT)\texport FF_TOPOLOGY_FILE=\"$OPTARG\";;\n\tX)\tread_snapshot=y; export snapshot_input=\"$OPTARG\";;\n\tx)\tsave_snapshot=y; export snapshot_suffix=\"$OPTARG\";;\n\tc)\tconfig_file=\"$OPTARG\";;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\nif [ $# -le 0 ]\nthen\n\techo \"opalinkanalysis: Error: must specify at least 1 report\" >&2\n\tUsage\nfi\nwhile [ $# -gt 0 ]\ndo\n\tcase \"$1\" in\n\terrors) errors=y;;\n\tslowlinks) slowlinks=y;;\n\tmisconfiglinks) misconfiglinks=y;;\n\tmisconnlinks) misconnlinks=y;;\n\tall) errors=y; slowlinks=y; misconfiglinks=y; misconnlinks=y;;\n\tverifylinks) verifylinks=y;;\n\tverifyextlinks) verifyextlinks=y;;\n\tverifyfis) verifyfis=y;;\n\tverifysws) verifysws=y;;\n\tverifyrtrs) verifyrtrs=y;;\n\tverifynodes)  verifyfis=y; verifysws=y; verifyrtrs=y;;\n\tverifysms) verifysms=y;;\n\tverifyall) verifylinks=y; verifyfis=y; verifysws=y; verifyrtrs=y; verifysms=y;;\n\tclearerrors) clearerrors=y;;\n\tclearhwerrors) clearhwerrors=y;;\n\tclear) clearerrors=y; clearhwerrors=y;;\n\t*)\n\t\techo \"opalinkanalysis: Invalid report: $1\" >&2\n\t\tUsage;;\n\tesac\n\tshift\ndone\n\nfor report in errors slowlinks misconfiglinks misconnlinks verifylinks verifyextlinks verifyfis verifysws verifyrtrs verifysms\ndo\n\tyes=$(eval echo \\$$report)\n\tif [ $yes = y ]\n\tthen\n\t\tcase $report in\n\t\tverify*)\n\t\t\tverify_opts=\"$verify_opts -o $report\"\n\t\t\treports=\"$reports $report\";;\n\t\t*)\n\t\t\treport_opts=\"$report_opts -o $report\"\n\t\t\treports=\"$reports $report\";;\n\t\tesac\n\tfi\ndone\n\nsnapshopt_opts=\nif [ $errors = y ]\nthen\n\tsnapshopt_opts=\"-s\"\n\treport_opts=\"$report_opts -c '$config_file'\"\nfi\n\nif [ $read_snapshot = y ]\nthen\n\tif [ $clearerrors = y -o $clearhwerrors = y ]\n\tthen\n\t\techo \"opalinkanalysis: errors and clearhwerrors reports not available with -X\" >&2\n\t\tUsage\n\tfi\n\tif [ $save_snapshot = y ]\n\tthen\n\t\techo \"opalinkanalysis: -X and -x options are mutually exclusive\" >&2\n\tfi\nfi\n\ncheck_ports_args opalinkanalysis\n\nports=0\nfor hfi_port in $PORTS\ndo\n    ports=$(($ports + 1))\ndone\nif [ $ports -lt 1 ]\nthen\n    # should not happen, but be safe\n    ports=1\n    PORTS=\"0:0\"\nfi\nif [ $read_snapshot = y -a $ports -gt 1 ]\nthen\n\techo \"opalinkanalysis: -X option cannot be used with more than 1 port\" >&2\n\tUsage\nfi\n\n\nstatus=0\nfor hfi_port in $PORTS\ndo\n\t# TBD - make some ff_funcs to handle these conversions and checks\n\thfi=$(expr $hfi_port : '\\([0-9]*\\):[0-9]*')\n\tport=$(expr $hfi_port : '[0-9]*:\\([0-9]*\\)')\n\tif [ \"$hfi\" = \"\" -o \"$port\" = \"\" ]\n\tthen\n\t\techo \"opalinkanalysis: Error: Invalid port specification: $hfi_port\" >&2\n\t\tstatus=1\n\t\tcontinue\n\tfi\n\tif [ \"$port\" -eq 0 ]\n\tthen\n\t\tport_opts=\"-h $hfi\" # default port to 1st active\n\telse\n\t\tport_opts=\"-h $hfi -p $port\"\n\tfi\n\tresolve_topology_file opalinkanalysis \"$hfi:$port\"\n\ttopt=\"\"\n\tif [ \"$TOPOLOGY_FILE\" != \"\" ]\n\tthen\n\t\ttopt=\"-T '$TOPOLOGY_FILE'\"\n\tfi\n\n\tif [ \"$read_snapshot\" = n ]\n\tthen\n\t\tif [ $ports -gt 1 ]\n\t\tthen\n\t\t\techo \"Fabric $hfi:$port Analysis:\"\n\t\tfi\n\t\tif [ \"$save_snapshot\" = y ]\n\t\tthen\n\t\t\tsnapshot_input=$FF_RESULT_DIR/snapshot$snapshot_suffix.$hfi:$port.xml\n\t\telse\n\t\t\tsnapshot_input=$tempfile\n\t\tfi\n\t\t# generate a snapshot per fabric then analyze\n\t\topareport $port_opts $snapshopt_opts -o snapshot > $snapshot_input\n\tfi\n\n\t# generate human readable reports\n\tif [ x\"$report_opts\" != x ]\n\tthen\n\t\teval opareport -X $snapshot_input $topt $report_opts \n\tfi\n\n\tif [ x\"$verify_opts\" != x ]\n\tthen\n\t\tif [ \"$TOPOLOGY_FILE\" != \"\" ]\n\t\tthen\n\t\t\teval opareport -X $snapshot_input $topt $verify_opts\n\t\telse\n\t\t\techo \"Unable to verify topology for $hfi:$port, no topology file found\" >&2\n\t\t\tstatus=1\n\t\tfi\n\tfi\n\n\t# note: if snapshot=y, these reports are not permitted\n\tif [ \"$clearerrors\" = y ]\n\tthen\n\t\topareport $port_opts -C -c \"$config_file\" -o none\n\tfi\n\tif [ \"$clearhwerrors\" = y ]\n\tthen\n\t\topareport $port_opts -M -C -c \"$config_file\" -o none\n\tfi\n\n\t# now generate punchlist\n\tfor report in $reports\n\tdo\n\t\tcase \"$report\" in\n\t\terrors) gen_errors_punchlist -X $snapshot_input -c \"$config_file\";;\n\t\tslowlinks) gen_slowlinks_punchlist -X $snapshot_input;;\n\t\tmisconfiglinks) gen_misconfiglinks_punchlist -X $snapshot_input;;\n\t\tmisconnlinks) gen_misconnlinks_punchlist -X $snapshot_input;;\n\t\tverifylinks) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifylinks_punchlist -X $snapshot_input $topt;;\n\t\tverifyextlinks) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifyextlinks_punchlist -X $snapshot_input $topt;;\n\t\tverifyfis) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifyfis_punchlist -X $snapshot_input $topt;;\n\t\tverifysws) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifysws_punchlist -X $snapshot_input $topt;;\n\t\tverifyrtrs) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifyrtrs_punchlist -X $snapshot_input $topt;;\n\t\tverifysms) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifysms_punchlist -X $snapshot_input $topt;;\n\t\t*) continue;;\t# should not happen\n\t\tesac\n\tdone\n\n\tif [ $read_snapshot = y ]\n\tthen\n\t\tbreak\n\tfi\n\n\tif [ $ports -gt 1 ]\n\tthen\n\t\techo \"-------------------------------------------------------------------------------\"\n\tfi\n\ndone\n\nrm -f $tempfile\nexit $status\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\ncmdName=opamanageswitch\n\ncaptureCapable=n\n\nresultsFile=$PWD/opamanageswitch.res\n\n# Functions\n\n# checkCapture\n\ncheckCapture()\n{\n\tif [ -x $bindir/opaswcapture ]\n\tthen\n\t\tcaptureCapable=y\n\tfi\n}\n\n# Usage\n\nUsage()\n{\n    if [ $captureCapable = y ]\n\tthen\n\techo \"Usage: $cmdName -t target-guid [-H] [-v] [-h hfi] [-p port] [ -x] [ -f fileName] [-r] [-C configOption] [-i integer-value] [-s string-value] [-c captureFile] operation\"\n#\techo \"Usage: $cmdName -t target-guid [-H] [-v] [-h hfi] [-p port] [ -x] [-S] [ -f fileName] [-r] [-C configOption] [-i integer-value] [-s string-value] [ -F ] [-c captureFile] operation\"\n\telse\n\techo \"Usage: $cmdName -t target-guid [-H] [-v] [-h hfi] [-p port] [ -x] [ -f fileName] [-r] [-C configOption] [-i integer-value] [-s string-value] operation\"\n#\techo \"Usage: $cmdName -t target-guid [-H] [-v] [-h hfi] [-p port] [ -x] [-S] [ -f fileName] [-r] [-C configOption] [-i integer-value] [-s string-value] [ -F ] operation\"\n\tfi\n\techo \"         -H - help (this message)\"\n\techo \"         -v - verbose - additional output\"\n\techo \"         -t - guid of target switch in hex format, e.g. 0x00066a00e3001234\"\n\techo \"         -h - hfi, numbered 1..n, 0= -p port will be a system wide port num\"\n\techo \"         -p - port, numbered 1..n, 0=1st active (default is 1st active)\"\n\techo \"         -x - clobber previous results file\"\n\techo \"         -f - fileName of the emfw file to be used in fwUpdate operation - must be a valid emfw file with .emfw suffix\"\n\techo \"         -r - reset switch after fwUpdate (only valid with fwUpdate operation)\"\n\techo \"         -C - configuration option for setConfigValue operation\"\n\techo \"              mtucap - mtu capability - use -i for integer value (4-2048, 5-4096)\"\n\techo \"              vlcap - vl capability - use -i for integer value (1-1VL, 2-2VLs, 3-4VLs, 4-8VLs, 5-15VLs)\"\n\techo \"              linkwidth - link width supported - use -i for integer value (1-1X, 2-4X, 3-1X/4X, 4-8X, 5-1X/8X, 6-4X/8X, 7-1X/4X/8X)\"\n\techo \"              vlcreditdist - VL credit distribution - use -i for integer value (0, 1, 2, 3, or 4)\"\n\techo \"              linkspeed - link speed supported - use -i for integer value (1-SDR, 2-DDR, 3-SDR/DDR, 4-QDR, 7-SDR/DDR/QDR)\"\n\techo \"         -i - integer value\"\n\techo \"         -s - string value\"\n    if [ $captureCapable = y ]\n\tthen\n\techo \"         -c - filename of capture output file\"\n\tfi\n#\techo \"         -F - perform fwUpdate operation on secondary (failsafe) EEPROM\"\n\techo \"         operation:\"\n\techo \"            fwUpdate - perform firmware update using fileName parameter, must be an emfw file\"\n\techo \"            fwVerify - perform firmware validation - validate firmware in primary/secondary EEPROMs, report which was booted\"\n\techo \"            ping - test for switch presence\"\n\techo \"            reboot - reboot switch\"\n\techo \"            setConfigValue - update configuration value - use -C for config option and -i for integer value\"\n\techo \"            setOPANodeDesc - set the OPA node description - use -s for string value of node desc\"\n\techo \"            setPassword - set the vendor key (prompts for password to be used for subsequent switch access)\"\n\techo \"            showConfig - report user-configurable settings\"\n\techo \"            showFwVersion - report firmware version running on switch\"\n\techo \"            showPowerCooling - report status of power supplies and fans\"\n    if [ $captureCapable = y ]\n\tthen\n\techo \"            capture - perform capture of switch\"\n\tfi\n\techo \"            showVPD - report VPD information of switch\"\n#\techo \"            compareEEPROM - compare EEPROMs\"\n\techo \"\"\n\techo \"         Examples:\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 -f Intel_12000_V1_firmware.7.2.0.0.32.emfw fwUpdate\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 reboot\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 showFwVersion\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 -s i12k1234 setOPANodeDesc\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 -C mtucap -i 4 setConfigValue\"\n\techo \"            opamanageswitch -H\"\n\techo \"\"\n\techo \"         Results are recorded in opamanageswitch.res file in the current directory - use -x option to clobber and create anew\"\n\n\texit 1\n}\n\n# UsageWarn\n\nUsageWarn()\n{\n\techo \"Enter 'opamanageswitch -H' for help\"\n\texit 1\n}\n\n# Log results\n\nlogResults()\n{\n\tcat $1 >> $resultsFile\n}\n\n# Check exit\n\ncheck_exit()\n{\n\tstatus=$1\n\tfile=$2\n\tif [ $status -ne 0 ]\n\tthen\n\t\tif [ \"$file\" != \"\" ]\n\t\tthen\n\t\t\tgrep -i error $file\n\t\t\tgrep mismatch $file\n\t\t\tlogResults $file\n\t\t\trm -f $file\n\t\tfi\n\t\texit 1\n\tfi\n}\n\n# Execute command\n\nexecCommand()\n{\n\techo Executing $cmd $args >> $resultsFile\n\tif [ \"$verboseArg\" != \"-v\" -a \"$teeOut\" != \"yes\" ]\n\tthen\n\t\t$cmd $args > $tmpFile 2>&1\n\telse\n\t\t$cmd $args | grep -v completed | tee $tmpFile 2>&1\n\tfi\n}\n\n# Get board id\n\ngetBoardID()\n{\n\tcmd=$bindir/opaswquery\n\targs=\"-t $target $hfiPortArgs $verboseArg $quietArg -Q 12\"\n\ttmpFile=.query\n\texecCommand\n\tcheck_exit $? .query\n\tboardID=`grep BoardID .query | cut -d ' ' -f 2`\n\tlogResults .query\n\trm -f .query\n\treturn 0\n}\n\n\nfileNameArg=\nhfiArg=\nportArg=\nfailSafeArg=\nresetArg=\nconfigOptArg=\nintegerArg=\nstringArg=\ncaptureOutArg=\nclobberArg=\nhelpArg=\nverboseArg=\nquietArg=\nteeOut=\n\noptions='C:Ff:Hh:i:p:rs:t:c:vx'\nbindir=/opt/opa/tools\n\ncheckCapture\n\nwhile getopts \"$options\" param\ndo\n\tcase $param in\n\tc)\n\t\tcaptureOutArg=\"$OPTARG\";;\n\tC)\n\t\tconfigOptArg=\"$OPTARG\";;\n\tF)\n\t\tfailSafeArg=-F;;\n\tf)\n\t\tfileNameArg=\"$OPTARG\";;\n\tH)\n\t\thelpArg=\"help\";;\n\th)\n\t\thfiArg=\"-h $OPTARG\";;\n\ti)\n\t\tintegerArg=\"$OPTARG\";;\n\tp)\n\t\tportArg=\"-o $OPTARG\";;\n\tr)\n\t\tresetArg=\"-S\";;\n\ts)\n\t\tstringArg=\"$OPTARG\";;\n\tt)\n\t\ttarget=\"$OPTARG\";;\n\tv)\n\t\tverboseArg=-v;;\n\tx)\n\t\tclobberArg=1;;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\nif [ \"$helpArg\" == \"help\" ]\nthen\n\tUsage\nfi\n\nnumParams=$#\nif [ $numParams -gt 1 ]\nthen\n\techo \"Error: only one operation allowed\"\n\tUsageWarn\nfi\n\noperation=$1\n\nif [ \"$operation\" = \"\" ]\nthen\n\techo \"Must provide an operation\"\n\tUsageWarn\nfi\n\nif [ \"$target\" = \"\" ]\nthen\n\techo \"Must provide a target guid\"\n\tUsageWarn\nfi\n\nif [ $captureCapable != y -a \"$operation\" == \"capture\" ]\nthen\n\techo \"Capture operation is not available\"\n\tUsageWarn\nfi\n\nif [ \"$fileNameArg\" != \"\" -a \"$operation\" != \"fwUpdate\" ]\nthen\n\techo \"Filename parameter is only valid for fwUpdate operation\"\n\tUsageWarn\nfi\n\nif [ \"$configOptArg\" != \"\" -a \"$operation\" != \"setConfigValue\" ]\nthen\n\techo \"configOption parameter is only valid for configure operation\"\n\tUsageWarn\nfi\n\nif [ \"$captureOutArg\" != \"\" -a \"$operation\" != \"capture\" ]\nthen\n\tif [ $captureCapable != y ]\n\tthen\n\t\techo \"Capture operation is not available\"\n\telse\n\t\techo \"Capture outfile parameter is only valid for capture operation\"\n\tfi\n\tUsageWarn\nfi\n\nif [ \"$clobberArg\" = \"1\" ]\nthen\n\t> $resultsFile\nelse\n\techo \"\" >> $resultsFile\nfi\necho \"********************\" >> $resultsFile\ndate >> $resultsFile\necho Beginning operation: $operation >> $resultsFile\necho \"********************\" >> $resultsFile\n\nif [ \"$verboseArg\" != \"-v\" ]\nthen\n\tquietArg=-q\nelse\n\tquietArg=\nfi\n\ncase $operation in\ncapture)\n\tif [ \"$captureOutArg\" = \"\" ]\n\tthen\n\t\techo \"Must provide a capture outfile parameter for capture operation\"\n\t\tUsageWarn\n\tfi\n\tquietArg=\n\techo \"Performing switch capture...\"\n\tcmd=$bindir/opaswcapture\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $captureOutArg\"\n\ttmpFile=.cap\n\tteeOut=yes\n\texecCommand\n\tcheck_exit $? .cap\n\tlogResults .cap\n\trm -f .cap\n\t;;\nfwUpdate)\n\t# must have a filename parameter\n\tif [ \"$fileNameArg\" = \"\" ]\n\tthen\n\t\techo \"Must provide a fileName parameter for fwUpdate operation\"\n\t\tUsageWarn\n\tfi\n\n\t# verify filename is for V1 silicon\n\techo $fileNameArg | grep V1 > /dev/null 2>&1\n\tif [ $? -ne 0 ]\n\tthen\n\t\techo \"$fileNameArg does not appear to be a V1 silicon emfw file\"\n\t\tUsageWarn\n\tfi\n\n\t# verify filename is emfw\n\tsfx=`echo $fileNameArg |  awk -F . '{print $NF}'`\n\tif [ \"$sfx\" != \"emfw\" ]\n\tthen\n\t\t# maybe prompt then to continue??\n\t\techo \"Filename parameter must be an emfw file\"\n\t\tUsageWarn\n\tfi\n\n\t# verify file format\n\ttar tzf $fileNameArg > /dev/null 2>&1\n\tif [ $? -ne 0 ]\n\tthen\n\t\techo \"File $fileNameArg has invalid format\"\n\t\tUsageWarn\n\tfi\n\n\t# get the boardID of the switch\n\tgetBoardID\n\n\t# create a directory and untar the emfw\n\tc=`echo $fileNameArg | cut -b 1`\n\tif [ \"$c\" != \"/\" ]\n\tthen\n\t\tthisdir=`pwd`\n\t\tfn=$thisdir/$fileNameArg\n\telse\n\t\tfn=$fileNameArg\n\tfi\n\ttmpdir=/tmp/12200FW$$\n\tmkdir $tmpdir\n\tcd $tmpdir\n\ttar xzf $fn > /dev/null 2>&1\n\n\t# set names\n\tif [ -f emfwMapFile ]\n\tthen\n\t\tbinName=`grep $boardID emfwMapFile | cut -d ' ' -f 2`\n\t\tinibinName=`grep $boardID emfwMapFile | cut -d ' ' -f 3`\n\telse\n\t\t# no emfwMapFile - use standard f/w and opasw inibin\n\t\tbinName=s20fwV1_fw.bin\n\t\t# TODO andlowe make sure this is correct\n\t\tinibinName=iniOpasw.inibin\n\tfi\n\n\t# do fwconfigure and fwupdate\n\techo Updating config block...\n\tcmd=$bindir/opaswfwconfigure\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -f $inibinName $failSafeArg\"\n\ttmpFile=.fw\n\texecCommand\n\tcheck_exit $? .fw\n\tlogResults .fw\n\trm -f .fw\n\tcmd=$bindir/opaswconfigure\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -C 2 -S\"\n\ttmpFile=.pswd\n\texecCommand\n\tcheck_exit $?\n\tlogResults .pswd\n\trm -f .pswd\n\techo Updating firmware...\n\tcmd=$bindir/opaswfwupdate\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -f $binName $resetArg $failSafeArg\"\n\ttmpFile=.fw\n\texecCommand\n\tcheck_exit $? .fw\n\tlogResults .fw\n\tif [ \"$verboseArg\" != \"-v\" ]\n\tthen\n\t\tgrep Verification .fw\n\t\tgrep Resetting .fw\n\tfi\n\trm -f .fw\n\tcd $thisdir\n\trm -rf $tmpdir\n\t;;\nfwVerify)\n\techo -n \"Validating firmware in primary EEPROM...     \"\n\tcmd=$bindir/opaswfwverify\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tvalidity=`grep found .fwv | cut -d ' ' -f 2`\n\tlogResults .fwv\n\techo \"Primary image is $validity\"\n\techo \" \"\n\techo -n \"Validating firmware in secondary EEPROM...   \"\n\tcmd=$bindir/opaswfwverify\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -F\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tvalidity=`grep found .fwv | cut -d ' ' -f 2`\n\tlogResults .fwv\n\techo \"Secondary image is $validity\"\n\techo \" \"\n\techo -n \"Checking boot EEPROM ...                     \"\n\tcmd=$bindir/opaswquery\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 2\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tbooteeprom=`grep booted .fwv | cut -d ' ' -f 5`\n\techo \"Switch has booted from $booteeprom EEPROM\"\n\tlogResults .fwv\n\trm -f .fwv\n\t;;\nping)\n\tcmd=$bindir/opaswping\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target\"\n\ttmpFile=.png\n\texecCommand\n\tgrep present .png > /dev/null 2>&1\n\tif [ $? -eq 0 ]\n\tthen\n\t\tgrep present .png | grep not > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\techo \"Unit is not present\"\n\t\telse\n\t\t\techo \"Unit is present\"\n\t\tfi\n\telse\n\t\techo \"Unit is not present\"\n\tfi\n\tlogResults .png\n\trm .png\n\t;;\nreboot)\n\techo \"Resetting switch...\"\n\tcmd=$bindir/opaswreset\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target\"\n\ttmpFile=.res\n\texecCommand\n\tcheck_exit $? .res\n\tlogResults .res\n\trm -f .res\n\t;;\nsetConfigValue)\n\tintOpt=\n\tcfgOpt=\n\tif [ \"$configOptArg\" = \"\" ]\n\tthen\n\t\techo \"Must provide a configOption parameter for setConfigValue operation\"\n\t\tUsageWarn\n\tfi\n\tif [ \"$integerArg\" = \"\" ]\n\tthen\n\t\techo \"Must provide an integer parameter for setConfigValue operation\"\n\t\tUsageWarn\n\tfi\n\tintOpt=\"-i $integerArg\"\n\tcmd=$bindir/opaswconfigure\n\ttmpFile=.cfg\n\tcase $configOptArg in\n\tmtucap)\n\t\tcfgOpt=\"-C 3\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\tvlcap)\n\t\tcfgOpt=\"-C 4\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\tlinkwidth)\n\t\tcfgOpt=\"-C 5\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\tvlcreditdist)\n\t\tcfgOpt=\"-C 6\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\tlinkspeed)\n\t\tcfgOpt=\"-C 7\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\t*)\n\t\techo \"Invalid configOption parameter $configOptArg\"\n\t\tUsageWarn\n\t\t;;\n\tesac\n\tintVal=`echo $intOpt | cut -d ' ' -f 2`\n\techo Successfully set $configOptArg to $intVal\n\t;;\nsetIBNodeDesc)\n\tstrOpt=\n\tif [ \"$stringArg\" = \"\" ]\n\tthen\n\t\techo \"Must include a string value for setOPANodeDesc operation\"\n\t\tUsageWarn\n\tfi\n\tif [ \"$integerArg\" != \"\" ]\n\tthen\n\t\techo \"Integer value is not valid with setOPANodeDesc operation\"\n\t\tUsageWarn\n\tfi\n\tstrOpt=\"-s $stringArg\"\n\tcmd=$bindir/opaswconfigure\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -C 1 $strOpt -S\"\n\ttmpFile=.cfg\n\texecCommand\n\tcheck_exit $? .cfg\n\tgrep Error .cfg > /dev/null 2>&1\n\tif [ $? -eq 0 ]\n\tthen\n\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\texit 1\n\tfi\n\tlogResults .cfg\n\trm -f .cfg\n\t;;\nsetPassword)\n\tif [ \"$stringArg\" != \"\" -o \"$integerArg\" != \"\" ]\n\tthen\n\t\techo \"String or integer parameter not valid with setPassword operation\"\n\t\tUsageWarn\n\tfi\n\tcmd=$bindir/opaswconfigure\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -C 2 -S\"\n\ttmpFile=.pswd\n\tteeOut=yes\n\texecCommand\n\tcheck_exit $?\n\tlogResults .pswd\n\trm -f .pswd\n\t;;\nshowConfig)\n\techo \"Reporting user-configurable settings...\"\n\tcmd=$bindir/opaswquery\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 11\"\n\ttmpFile=.query\n\tteeOut=yes\n\texecCommand\n\tcheck_exit $?\n\tlogResults .query\n\trm -f .query\n\t;;\nshowFwVersion)\n\tcmd=$bindir/opaswquery\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 3\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tfwversion=`grep Version .fwv | cut -d ' ' -f 4`\n\techo \"Firmware version is $fwversion\"\n\tlogResults .fwv\n\trm -f .fwv\n\t;;\nshowPowerCooling)\n\techo \"Reporting power and cooling status...\"\n\n\t# middle digit of part number tells how many PS\n\tcmd=$bindir/opaswquery\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 4\"\n\ttmpFile=.pwc\n\texecCommand\n\tcheck_exit $? .pwc\n\tprtno=`grep VPD .pwc | cut -d ',' -f 2`\n\tpsIndicator=`echo $prtno | cut -d '-' -f 2 | awk '{ print substr( $0, 2, 1 ) }'`\n\tcase $psIndicator in\n\t0)\n\t\tnumPS=1\n\t\t;;\n\t1)\n\t\tnumPS=2\n\t\t;;\n\t*)\n\t\tnumPS=1\n\t\t;;\n\tesac\n\tlogResults .pwc\n\tgetBoardID\n\n\tcmd=$bindir/opaswquery\n\ttmpFile=.pwc\n\tif [ \"$boardID\" != \"0x13\" ]\n\tthen\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 7\"\n\t\texecCommand\n\t\tcheck_exit $? .pwc\n\t\tfan1_0stat=`grep FAN .pwc |cut -d ':' -f 2 | cut -d ' ' -f 1`\n\t\tfan1_1stat=`grep FAN .pwc |cut -d ':' -f 3`\n\t\tlogResults .pwc\n\telse\n\t\tfan1_0stat=\"N/A   \"\n\t\tfan1_1stat=\"N/A\"\n\tfi\n\targs=\"$bindir/opaswquery $verboseArg $quietArg $hfiArg $portArg -t $target -Q 7\"\n\texecCommand\n\tcheck_exit $? .pwc\n\tlogResults .pwc\n\tfan2_0stat=`grep FAN .pwc |cut -d ':' -f 2 | cut -d ' ' -f 1`\n\tfan2_1stat=`grep FAN .pwc |cut -d ':' -f 3`\n\tif [ $numPS -eq 2 ]\n\tthen\n\t\targs=\"$bindir/opaswquery $verboseArg $quietArg $hfiArg $portArg -t $target -Q 8 -i 1\"\n\t\texecCommand\n\t\tcheck_exit $? .pwc\n\t\tps1stat=`grep PS .pwc | cut -d ' ' -f 3`\n\t\tlogResults .pwc\n\telse\n\t\tps1stat=\"N/A\"\n\tfi\n\targs=\"$bindir/opaswquery $verboseArg $quietArg $hfiArg $portArg -t $target -Q 8 -i 2\"\n\texecCommand\n\tcheck_exit $? .pwc\n\tps2stat=`grep PS .pwc | cut -d ' ' -f 3`\n\techo \"Fan status: Fan 1/0: $fan1_0stat    Fan 1/1: $fan1_1stat\"\n\techo \"Fan status: Fan 2/0: $fan2_0stat    Fan 2/1: $fan2_1stat\"\n\techo \"PS status : PS1    : $ps1stat       PS2    : $ps2stat\"\n\tlogResults .pwc\n\trm -f .pwc\n\t;;\nshowVPD)\n\techo \"Reporting switch VPD info...\"\n\tcmd=$bindir/opaswquery\n\targs=\"$bindir/opaswquery $verboseArg $quietArg $hfiArg $portArg -t $target -Q 4\"\n\ttmpFile=.vpd\n\texecCommand\n\tcheck_exit $? .vpd\n\tserno=`grep VPD .vpd | cut -d ' ' -f 2 | cut -d ',' -f 1`\n\tprtno=`grep VPD .vpd | cut -d ',' -f 2`\n\tmodel=`grep VPD .vpd | cut -d ',' -f 3`\n\thwver=`grep VPD .vpd | cut -d ',' -f 4`\n\tmfgnm=`grep VPD .vpd | cut -d ',' -f 5`\n\tprdnm=`grep VPD .vpd | cut -d ',' -f 6`\n\tmfgid=`grep VPD .vpd | cut -d ',' -f 7`\n\tmfgdt=`grep VPD .vpd | cut -d ',' -f 8`\n\tmfgtm=`grep VPD .vpd | cut -d ',' -f 9`\n\techo \"   Serial Number :    $serno\"\n\techo \"   Part Number   :    $prtno\"\n\techo \"   Model         :    $model\"\n\techo \"   H/W Version   :    $hwver\"\n\techo \"   Mfg Name      :    $mfgnm\"\n\techo \"   Product Name  :    $prdnm\"\n\techo \"   Mfg ID        :    $mfgid\"\n\techo \"   Mfg Date      :    $mfgdt\"\n\techo \"   Mfg Time      :    $mfgtm\"\n\tlogResults .vpd\n\trm -f .vpd\n\t;;\ncompareEEPROM)\n\techo \"Comparing switch EEPROMs...\"\n\tcmd=$bindir/opaswfwverify\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -C\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tmatch=`grep CRC .fwv | cut -d ' ' -f 3`\n\tif [ \"$match\" = \"match\" ]\n\tthen\n\t\techo \"Switch EEPROMs match\"\n\telse\n\t\techo \"Switch EEPROMs do not match\"\n\tfi\n\tlogResults .fwv\n\trm -f .fwv\n\t;;\n*)\n\techo \"$operation is not a valid operation\"\n\tUsageWarn\nesac\n\nexit 0\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: @(#) ./fastfabric/opaxlattopology 10_0_0_0_135 [09/08/14 23:46]\n\n# Topology script to translate the CSV form (topology.csv) of a\n# standard-format topology spread sheet for a fabric to one or more topology\n# XML files (topology.0:0.xml) at the specified levels (top-level, rack group,\n# rack, edge switch).  This script operates from the fabric directory and\n# populates it.\n\n# The following topology directories and files are generated:\n#   FILE_LINKSUM         - Host-to-Edge, Edge-to-Core, Host-to-Core links;\n#                           includes cable data\n#   FILE_LINKSUM_NOCORE  - No Edge-to-Core or Host-to-Core links;\n#                           includes cable data\n#   FILE_LINKSUM_NOCABLE - Leaf-to-Spine links, no cable data\n#   FILE_NODEFIS         - Host FIs, includes NodeDetails\n#   FILE_NODESWITCHES    - Edge, Leaf and Spine switches\n#   FILE_NODECHASSIS     - Core switches\n#   FILE_NODELEAVES      - Leaf switches\n#   FILE_TOPOLOGY_OUT    - Topology: FILE_LINKSUM + FILE_LINKSUM_NOCABLE +\n#                           FILE_NODEFIS + FILE_NODESWITCHES\n#   FILE_HOSTS           - 'hosts' file\n#   FILE_CHASSIS         - 'chassis' file\n\n# User topology CSV format:\n#  Lines 1 - x    ignored\n#  Line y         header line 1 (ignored)\n#  Line n         header line 2\n#  Lines n+1 - m  topology CSV\n#  Line m+1       blank\n#  Lines m+2 - z  core specification(s)\n\n# Links Fields:\n#  Source Rack Group: 01\n#  Source Rack:       02\n#  Source Name:       03\n#  Source Name-2:     04\n#  Source Port:       05\n#  Source Type:       06\n#  Dest Rack Group:   07\n#  Dest Rack:         08\n#  Dest Name:         09\n#  Dest Name-2:       10\n#  Dest Port:         11\n#  Dest Type:         12\n#  Cable Label:       13\n#  Cable Length:      14\n#  Cable Details:     15\n\n# Core specifications (same line):\n#  Core Name:X\n#  Core Size:X (288 or 1152)\n#  Core Group:X\n#  Core Rack:X\n#  Core Full:X (0 or 1)\n\n\n## Defines:\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\nXML_GENERATE=\"$BINDIR/opaxmlgenerate\"\nFILE_TOPOLOGY_LINKS=\"topology.csv\"\nFILE_LINKSUM_SWD06=\"linksum_swd06.csv\"\nFILE_LINKSUM_SWD24=\"linksum_swd24.csv\"\nFILE_LINKSUM=\"linksum.csv\"\nFILE_LINKSUM_NOCORE=\"linksum_nocore.csv\"\nFILE_LINKSUM_NOCABLE=\"linksum_nocable.csv\"\nFILE_NODEFIS=\"nodefis.csv\"\nFILE_NODESWITCHES=\"nodeswitches.csv\"\nFILE_NODELEAVES=\"nodeleaves.csv\"\nFILE_NODECHASSIS=\"nodechassis.csv\"\nFILE_CHASSIS=\"chassis\"\nFILE_HOSTS=\"hosts\"\nFILE_TOPOLOGY_OUT=\"topology.0:0.xml\"\nFILE_RESERVE=\"file_reserve\"\nFILE_TEMP=\"file_temp\"\nFILE_TEMP2=\"file_temp2\"\nFILE_DEBUG=\"file_debug\"\nFILE_DEBUG2=\"file_debug2\"\n# Note: there are no real limits on numbers of groups, racks or switches;\n#  these defines simply allow error messages before too much thrashing\n#  takes place in cases where FILE_TOPOLOGY_LINKS has bad data\nMAX_GROUPS=21\nMAX_RACKS=501\nMAX_SWITCHES=20001\nOUTPUT_SWITCHES=1\nOUTPUT_RACKS=2\nOUTPUT_GROUPS=4\nOUTPUT_EDGE_LEAF_LINKS=8\nOUTPUT_SPINE_LEAF_LINKS=16\nNODETYPE_HFI=\"FI\"\nNODETYPE_EDGE=\"SW\"\nNODETYPE_LEAF=\"CL\"\nNODETYPE_SPINE=\"CS\"\nDUMMY_CORE_NAME=\"ZzNAMEqQ\"\nCORE_GROUP=\"Core Group:\"\nCORE_RACK=\"Core Rack:\"\nCORE_NAME=\"Core Name:\"\nCORE_SIZE=\"Core Size:\"\nCORE_FULL=\"Core Full:\"\nHFI_SUFFIX=\"HFI-1\"\nCAT_CHAR_CORE=\" \"\n\n\n## Global variables:\n\n# Parsing tokens:\nt_00=\"\"\nt_01=\"\"\nt_02=\"\"\nt_03=\"\"\nt_04=\"\"\nt_05=\"\"\nt_06=\"\"\nt_07=\"\"\nt_08=\"\"\nt_09=\"\"\nt_10=\"\"\nt_11=\"\"\nt_12=\"\"\nt_13=\"\"\nt_14=\"\"\n\nt_srcgroup=\"\"\nt_srcrack=\"\"\nt_srcname=\"\"\nt_srcname2=\"\"\nt_srcport=\"\"\nt_srctype=\"\"\nt_dstgroup=\"\"\nt_dstrack=\"\"\nt_dstname=\"\"\nt_dstname2=\"\"\nt_dstport=\"\"\nt_dsttype=\"\"\nt_cablelabel=\"\"\nt_cablelength=\"\"\nt_cabledetails=\"\"\n\n# Output CSV values:\nrate=\"\"\nmtu=\"\"\ninternal=\"\"\nnodedesc1=\"\"\nnodedetails1=\"\"\nnodetype1=\"\"\nnodedesc2=\"\"\nnodedetails2=\"\"\nnodetype2=\"\"\nlink=\"\"\n\n# Operating variables:\ncts_parse=0\nix=0\nn_detail=0\nfl_output_edge_leaf=1\nfl_output_spine_leaf=1\nn_verbose=2\nindent=\"\"\ncat_char=\" \"\nfl_clean=1\nix_srcgroup=0\nix_srcrack=0\nix_srcswitch=0\nix_dstgroup=0\nix_dstrack=0\nix_dstswitch=0\ncore_group=\"\"\ncore_rack=\"\"\ncore_name=\"\"\ncore_size=\ncore_full=\nrack=\"\"\nswitch=\"\"\nleaves=\"\"\n\n# Arrays\ntb_group[0]=\"\"\ntb_rack[0]=\"\"\ntb_switch[0]=\"\"\n\n# Debug variables:\ndebug_0=\ndebug_1=\ndebug_2=\ndebug_3=\ndebug_4=\ndebug_5=\ndebug_6=\ndebug_7=\n#echo \"DEBUG-x.y: 0:$debug_0: 1:$debug_1: 2:$debug_2: 3:$debug_3: 4:$debug_4: 5:$debug_5: 6:$debug_6: 7:$debug_7:\"\n\n\n## Local functions:\nfunctout=\n\n# Output usage information\nusage_full()\n{\n  echo \"Usage: opaxlattopology [-d level -v level -i level -c char -K -?] [source [dest]]\"\n  echo \"       -d level  -  output detail level (default 0)\"\n  echo \"                    values are additive\"\n  echo \"                     1 - edge switch topology files\"\n  echo \"                     2 - rack topology files\"\n  echo \"                     4 - rack group topology files\"\n# TBD - these options are disabled for now\n#  echo \"                     8 - DO NOT output edge-to-leaf links\"\n#  echo \"                    16 - DO NOT output spine-to-leaf links\"\n  echo \"       -v level  -  verbose level (0-8, default 2)\"\n  echo \"                    0 - no output\"\n  echo \"                    1 - progress output\"\n  echo \"                    2 - reserved\"\n  echo \"                    4 - time stamps\"\n  echo \"                    8 - reserved\"\n  echo \"       -i level  -  output indent level (0-15, default 0)\"\n  echo \"       -c char   -  NodeDesc concatenation char (default SPACE)\"\n  echo \"       -K        -  DO NOT clean temporary files\"\n  echo \"       -?        -  print this output\"\n  exit $1\n}  # End of usage_full()\n\n# Convert general node types to standard node types\n# Inputs:\n#   $1 = general node type\n#\n# Outputs:\n#   Standard node type\ncvt_nodetype()\n{\n  case $1 in\n  $NODETYPE_HFI)\n    echo \"FI\"\n    ;;\n  $NODETYPE_EDGE)\n    echo \"SW\"\n    ;;\n  $NODETYPE_LEAF)\n    echo \"SW\"\n    ;;\n  $NODETYPE_SPINE)\n    echo \"SW\"\n    ;;\n  *)\n    echo \"\"\n    ;;\n  esac\n\n}  # End of cvt_nodetype()\n\n# Display progress information (to STDOUT)\n# Inputs:\n#   $1 - progress string\n#\n# Outputs:\n#   none\ndisplay_progress()\n{\n  if [ $n_verbose -ge 1 ]\n    then\n    echo \"$indent$1\"\n    if [ $n_verbose -ge 4 ]\n      then\n      echo \"$indent  \"`date`\n    fi\n  fi\n}  # End of display_progress()\n\n# Generate directory-level FILE_TOPOLOGY_OUT file from directory-level\n# CSV files; consolidate directory-level CSV files.\n# Inputs:\n#   $1 = 1 - Use FILE_LINKSUM\n#        0 - Use FILE_LINKSUM_NOCORE\n#   $2 = 1 - Use FILE_LINKSUM_NOCABLE\n#        0 - Do not use FILE_LINKSUM_NOCABLE\n#   FILE_LINKSUM\n#   FILE_LINKSUM_NOCORE (optional)\n#   FILE_LINKSUM_NOCABLE (optional)\n#   FILE_NODEFIS\n#   FILE_NODESWITCHES\n#   FILE_NODECHASSIS\n#\n# Outputs:\n#   FILE_TOPOLOGY_OUT\n#   FILE_HOSTS\n#   FILE_CHASSIS\ngen_topology()\n{\n  if [ -f $FILE_LINKSUM ]\n    then\n    rm -f $FILE_TEMP\n    mv $FILE_LINKSUM $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_LINKSUM\n  fi\n  if [ -f $FILE_LINKSUM_NOCORE ]\n    then\n    rm -f $FILE_TEMP\n    mv $FILE_LINKSUM_NOCORE $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_LINKSUM_NOCORE\n  fi\n  if [ -f $FILE_LINKSUM_NOCABLE ]\n    then\n    rm -f $FILE_TEMP\n    mv $FILE_LINKSUM_NOCABLE $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_LINKSUM_NOCABLE\n  fi\n\n  if [ -f $FILE_NODEFIS ]\n    then\n    rm -f $FILE_HOSTS\n    rm -f $FILE_TEMP\n    mv $FILE_NODEFIS $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_NODEFIS\n    cut -d ';' -f 1 $FILE_NODEFIS | sed -e \"s/$cat_char$HFI_SUFFIX//\" > $FILE_HOSTS\n  fi\n\n  if [ -f $FILE_NODESWITCHES ]\n    then\n    rm -f $FILE_TEMP\n    mv $FILE_NODESWITCHES $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_NODESWITCHES\n  fi\n  if [ -f $FILE_NODECHASSIS ]\n    then\n    rm -f $FILE_CHASSIS\n    rm -f $FILE_TEMP\n    mv $FILE_NODECHASSIS $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_NODECHASSIS\n    cp -p $FILE_NODECHASSIS $FILE_CHASSIS\n  fi\n\n  rm -f $FILE_TOPOLOGY_OUT\n  echo '<?xml version=\"1.0\" encoding=\"utf-8\" ?>' >> $FILE_TOPOLOGY_OUT\n  echo \"<Report>\" >> $FILE_TOPOLOGY_OUT\n\n  # Generate LinkSummary section\n  echo \"<LinkSummary>\" >> $FILE_TOPOLOGY_OUT\n  if [ -s $FILE_LINKSUM -a $1 == 1 ]\n    then\n    $XML_GENERATE -X $FILE_LINKSUM -d \\; -i 2 -h Link -g Rate -g MTU -g Internal -h Cable -g CableLength -g CableLabel -g CableDetails -e Cable -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -e Link >> $FILE_TOPOLOGY_OUT\n  elif [ -s $FILE_LINKSUM_NOCORE -a $1 == 0 ]\n    then\n    $XML_GENERATE -X $FILE_LINKSUM_NOCORE -d \\; -i 2 -h Link -g Rate -g MTU -g Internal -h Cable -g CableLength -g CableLabel -g CableDetails -e Cable -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -e Link >> $FILE_TOPOLOGY_OUT\n  fi\n\n  if [ -s $FILE_LINKSUM_NOCABLE -a $2 == 1 ]\n    then\n    # Note: <Cable> header not needed because cable data is null\n    $XML_GENERATE -X $FILE_LINKSUM_NOCABLE -d \\; -i 2 -h Link -g Rate -g MTU -g Internal -g CableLength -g CableLabel -g CableDetails -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -e Link >> $FILE_TOPOLOGY_OUT\n  fi\n  echo \"</LinkSummary>\" >> $FILE_TOPOLOGY_OUT\n\n  # Generate Nodes/FIs section\n  echo \"<Nodes>\" >> $FILE_TOPOLOGY_OUT\n  echo \"<FIs>\" >> $FILE_TOPOLOGY_OUT\n  if [ -s $FILE_NODEFIS ]\n    then\n    $XML_GENERATE -X $FILE_NODEFIS -d \\; -i 2 -h Node -g NodeDesc -g NodeGUID -g NodeDetails -e Node >> $FILE_TOPOLOGY_OUT\n  fi\n  echo \"</FIs>\" >> $FILE_TOPOLOGY_OUT\n\n  # Generate Nodes/Switches section\n  echo \"<Switches>\" >> $FILE_TOPOLOGY_OUT\n  if [ -s $FILE_NODESWITCHES ]\n    then\n    $XML_GENERATE -X $FILE_NODESWITCHES -d \\; -i 2 -h Node -g NodeDesc -g NodeGUID -e Node >> $FILE_TOPOLOGY_OUT\n  fi\n  echo \"</Switches>\" >> $FILE_TOPOLOGY_OUT\n  echo \"</Nodes>\" >> $FILE_TOPOLOGY_OUT\n\n  echo \"</Report>\" >> $FILE_TOPOLOGY_OUT\n\n  # Clean temporary files\n  if [ $fl_clean == 1 ]\n    then\n    rm -f $FILE_TEMP\n    rm -f $FILE_TEMP2\n    rm -f $FILE_LINKSUM\n    rm -f $FILE_LINKSUM_NOCORE\n    rm -f $FILE_LINKSUM_NOCABLE\n    rm -f $FILE_NODEFIS\n    rm -f $FILE_NODESWITCHES\n    rm -f $FILE_NODELEAVES\n    rm -f $FILE_NODECHASSIS\n  fi\n}  # End of gen_topology\n\n# Process rack group name; check for non-null name and find in tb_group[].\n# If present return tb_group[] index, otherwise make entry and return index.\n# Note that tb_group[0] is always null and is the default rack group.\n# Inputs:\n#   $1 = rack group name (may be null)\n#\n# Outputs:\n#         functout - index of rack group name, or 0\n#   tb_rack[index] - name of rack group (written when new group)\nproc_group()\n{\n  local val\n  local ix\n\n  val=0\n\n  if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n    then\n    if [ -n \"$1\" ]\n      then\n      # Check for group name already in tb_group[]\n      for (( ix=1 ; $ix<$MAX_GROUPS ; ix=$((ix+1)) ))\n      do\n        if [ -n \"${tb_group[$ix]}\" ]\n          then\n          if [ \"$1/\" == \"${tb_group[$ix]}\" ]\n            then\n            val=$ix\n            break\n          fi\n        # New group name, save in tb_group[] and make group directory\n        else\n          tb_group[$ix]=\"$1/\"\n          rm -f -r ${tb_group[$ix]}\n          mkdir ${tb_group[$ix]}\n          val=$ix\n          break\n        fi\n      \n      done  # for (( ix=1 ; $ix<$MAX_GROUPS\n\n      if [ $ix == $MAX_GROUPS ]\n        then\n        echo \"Too many rack groups (>= $MAX_GROUPS)\" >&2\n        usage_full \"2\"\n      fi\n\n    else\n      echo \"Must have rack group name when outputting rack group (line:$ix_line)\" >&2\n      usage_full \"2\"\n    fi  # End of if [ -n \"$1\" ]\n\n  fi  # End of if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n\n  functout=$val\n\n}  # End of proc_group()\n\n# Process rack name; check for non-null name and find in tb_rack[].\n# If present return tb_rack[] index, otherwise make entry and return index.\n# Note that tb_rack[0] is always null and is the default rack.\n# Inputs:\n#   $1 = rack name (may be null)\n#   $2 = rack group name (may be null)\n#\n# Outputs:\n#         functout - index of rack name, or 0\n#   tb_rack[index] - name of rack (written when new rack)\nproc_rack()\n{\n  local val\n  local ix\n\n  val=0\n\n  if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n    then\n    if [ -n \"$1\" ]\n      then\n      # Check for rack name already in tb_rack[]\n      for (( ix=1 ; $ix<$MAX_RACKS ; ix=$((ix+1)) ))\n      do\n        if [ -n \"${tb_rack[$ix]}\" ]\n          then\n          if [ \"$1/\" == \"${tb_rack[$ix]}\" ]\n            then\n            val=$ix\n            break\n          fi\n        # New rack name, save in tb_rack[] and make rack directory\n        else\n          tb_rack[$ix]=\"$1/\"\n          rm -f -r $2${tb_rack[$ix]}\n          mkdir $2${tb_rack[$ix]}\n          val=$ix\n          break\n        fi\n      \n      done  # for (( ix=1 ; $ix<$MAX_RACKS\n\n      if [ $ix == $MAX_RACKS ]\n        then\n        echo \"Too many racks (>= $MAX_RACKS)\" >&2\n        usage_full \"2\"\n      fi\n\n    else\n      echo \"Must have rack name when outputting rack (line:$ix_line)\" >&2\n      usage_full \"2\"\n    fi  # End of if [ -n \"$1\" ]\n\n  fi  # End of if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n\n  functout=$val\n\n}  # End of proc_rack()\n\n# Process switch name; check for non-null name and find in tb_switch[].\n# If present return tb_switch[] index, otherwise make entry and return index.\n# Note that tb_switch[0] is always null and is the default switch.\n# Inputs:\n#   $1 = switch name (may be null)\n#   $2 = rack group/rack name (may be null)\n#\n# Outputs:\n#           functout - index of switch name, or 0\n#   tb_switch[index] - name of switch (written when new switch)\nproc_switch()\n{\n  local val\n  local ix\n\n  val=0\n\n  if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n    then\n    if [ -n \"$1\" ]\n      then\n      # Check for switch name already in tb_switch[]\n      for (( ix=1 ; $ix<$MAX_SWITCHES ; ix=$((ix + 1)) ))\n      do\n        if [ -n \"${tb_switch[$ix]}\" ]\n          then\n          if [ \"$1/\" == \"${tb_switch[$ix]}\" ]\n            then\n            val=$ix\n            break\n          fi\n        # New switch name, save in tb_switch[] and make switch directory\n        else\n          tb_switch[$ix]=\"$1/\"\n          rm -f -r $2${tb_switch[$ix]}\n          mkdir $2${tb_switch[$ix]}\n          val=$ix\n          break\n        fi\n      \n      done  # for (( ix=1 ; $ix<$MAX_SWITCHES\n\n      if [ $ix == $MAX_SWITCHES ]\n        then\n        echo \"Too many switches (>= $MAX_SWITCHES)\" >&2\n        usage_full \"2\"\n      fi\n\n    else\n      echo \"Must have switch name when outputting switch (line:$ix_line)\" >&2\n      usage_full \"2\"\n    fi  # End of if [ -n \"$1\" ]\n\n  fi  # End of if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n\n  functout=$val\n\n}  # End of proc_switch()\n\n\n## Main function:\n\nrm -f $FILE_DEBUG\nrm -f $FILE_DEBUG2\n\n# Get options\nwhile getopts c:d:i:Kv:? option\ndo\n  case $option in\n  c)\n    cat_char=$OPTARG\n    ;;\n\n  d)\n    n_detail=$OPTARG\n    if [ $((n_detail & OUTPUT_EDGE_LEAF_LINKS)) != 0 ]\n      then\n      fl_output_edge_leaf=0\n    fi\n    if [ $((n_detail & OUTPUT_SPINE_LEAF_LINKS)) != 0 ]\n      then\n      fl_output_spine_leaf=0\n    fi\n    ;;\n\n  i)\n    indent=`echo \"                    \" | cut -b -$OPTARG`\n    ;;\n\n  K)\n    fl_clean=0\n    ;;\n\n  v)\n    n_verbose=$OPTARG\n    ;;\n\n  *)\n    usage_full \"0\"\n    ;;\n  esac\ndone\n\nshift $((OPTIND -1))\n\nif [ $# -ge 1 ]; then\n\tFILE_TOPOLOGY_LINKS=$1\n\tshift;\nfi\nif [ $# -ge 1 ]; then \n\tFILE_TOPOLOGY_OUT=$1\nfi\n\n# Parse FILE_TOPOLOGY_LINKS2\ndisplay_progress \"Parsing $FILE_TOPOLOGY_LINKS\"\n\nrm -f ${FILE_LINKSUM}\nrm -f ${FILE_LINKSUM_NOCORE}\nrm -f ${FILE_LINKSUM_NOCABLE}\nrm -f ${FILE_NODEFIS}\nrm -f ${FILE_NODESWITCHES}\nrm -f ${FILE_NODELEAVES}\nrm -f ${FILE_NODECHASSIS}\n\n# TBD - add support for rate & mtu\nrate=\"100g\"\nmtu=\"8192\"\nix_line=1\n\nIFS=\",\"\nwhile read t_00 t_01 t_02 t_03 t_04 t_05 t_06 t_07 t_08 t_09 t_10 t_11 t_12 t_13 t_14\ndo\n  case $cts_parse in\n  # Syncing to beginning of link data\n  0)\n    if [ \"$t_00\" == \"Rack Group\" ]\n      then\n      cts_parse=1\n    fi\n    ;;\n\n  # Process link tokens\n  1)\n    if [ -n \"$t_00\" ]\n      then\n      t_srcgroup=$t_00\n    fi\n    if [ -n \"$t_01\" ]\n      then\n      t_srcrack=$t_01\n    fi\n    t_srcname=$t_02\n    t_srcname2=$t_03\n    if [ -n \"$t_05\" ]\n      then\n      t_srctype=$t_05\n    fi\n    if [ -z \"$t_04\" -a \"$t_srctype\" == \"$NODETYPE_HFI\" ]\n      then\n      t_srcport=1\n    else\n      t_srcport=$t_04\n    fi\n\n    if [ -n \"$t_06\" ]\n      then\n      t_dstgroup=$t_06\n    fi\n    if [ -n \"$t_07\" ]\n      then\n      t_dstrack=$t_07\n    fi\n    t_dstname=$t_08\n    t_dstname2=$t_09\n    if [ -n \"$t_11\" ]\n      then\n      t_dsttype=$t_11\n    fi\n    if [ -z \"$t_10\" -a \"$t_dsttype\" == \"$NODETYPE_HFI\" ]\n      then\n      t_dstport=1\n    else\n      t_dstport=$t_10\n    fi\n\n    t_cablelabel=$t_12\n    t_cablelength=$t_13\n    t_cabledetails=$t_14\n\n    if [ \"$t_srctype\" == \"$NODETYPE_SPINE\" ]\n      then\n      internal=\"1\"\n    else\n      internal=\"0\"\n    fi\n\n    # Process group, rack and switch names\n    if [ -n \"$t_srcname\" ]\n      then\n      proc_group \"$t_srcgroup\"\n      ix_srcgroup=$functout\n      proc_rack \"$t_srcrack\" \"${tb_group[$ix_srcgroup]}\"\n      ix_srcrack=$functout\n      proc_group \"$t_dstgroup\"\n      ix_dstgroup=$functout\n      proc_rack \"$t_dstrack\" \"${tb_group[$ix_dstgroup]}\"\n      ix_dstrack=$functout\n      if [ \"$t_srctype\" == \"$NODETYPE_EDGE\" ]\n        then\n        proc_switch \"$t_srcname\" \"${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}\"\n        ix_srcswitch=$functout\n      else\n        ix_srcswitch=0\n      fi\n      if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n        then\n        proc_switch \"$t_dstname\" \"${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}\"\n        ix_dstswitch=$functout\n      else\n        ix_dstswitch=0\n      fi\n\n      # Form consolidated output data\n      nodedesc1=\"${t_srcname}\"\n      if [ \"$t_srctype\" == \"$NODETYPE_HFI\" ]\n        then\n        nodedesc1=\"${nodedesc1}${cat_char}${HFI_SUFFIX}\"\n        nodedetails1=\"${t_srcname2}\"\n      else\n        nodedetails1=\"\"\n        if [ \"$t_srctype\" != \"$NODETYPE_EDGE\" ]\n          then\n          nodedesc1=\"${nodedesc1}${cat_char}${t_srcname2}\"\n        fi\n      fi\n\n      nodedesc2=\"${t_dstname}\"\n      if [ \"$t_dsttype\" != \"$NODETYPE_EDGE\" ]\n        then\n        nodedesc2=\"${nodedesc2}${cat_char}${t_dstname2}\"\n      fi\n\n      nodetype1=`cvt_nodetype \"$t_srctype\"`\n      nodetype2=`cvt_nodetype \"$t_dsttype\"`\n\n      nodeguid1=`echo $nodedesc1 | cksum | cut -f1 -d\\ `\n      nodeguid1=`echo \"obase=16; $nodeguid1\" | bc`\n      nodeguid1=`echo \"00000000$nodeguid1\" | sed \"s/.*\\(........$\\)/\\1/\"`\n      nodeguid2=`echo $nodedesc2 | cksum | cut -f1 -d\\ `\n      nodeguid2=`echo \"obase=16; $nodeguid2\" | bc`\n      nodeguid2=`echo \"00000000$nodeguid2\" | sed \"s/.*\\(........$\\)/\\1/\"`\n\n      # Output CSV FILE_LINKSUM\n      link=\"${rate};${mtu};${internal};${t_cablelength};${t_cablelabel};${t_cabledetails};${t_srcport};${nodetype1};${nodedesc1};0x00117500${nodeguid1};${t_dstport};${nodetype2};${nodedesc2};0x00117500${nodeguid2}\"\n      echo \"${link}\" >> ${FILE_LINKSUM}\n      if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n        then\n        echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${FILE_LINKSUM}\n        if [ $ix_dstgroup != $ix_srcgroup ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${FILE_LINKSUM}\n        fi\n      fi\n\n      if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${FILE_LINKSUM}\n        if [ $ix_dstrack != $ix_srcrack ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_LINKSUM}\n        fi\n      fi\n\n      if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n        then\n        if [ \"$t_srctype\" == \"$NODETYPE_EDGE\" ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${tb_switch[$ix_srcswitch]}${FILE_LINKSUM}\n        fi\n        if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_LINKSUM}\n        fi\n      fi\n\n      # Output CSV FILE_LINKSUM_NOCORE\n      if [ \"$t_dsttype\" != \"$NODETYPE_LEAF\" ]\n        then\n        echo \"${link}\" >> ${FILE_LINKSUM_NOCORE}\n        if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${FILE_LINKSUM_NOCORE}\n          if [ $ix_dstgroup != $ix_srcgroup ]\n            then\n            echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${FILE_LINKSUM_NOCORE}\n          fi\n        fi\n\n        if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${FILE_LINKSUM_NOCORE}\n          if [ $ix_dstrack != $ix_srcrack ]\n            then\n            echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_LINKSUM_NOCORE}\n          fi\n        fi\n\n        if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n          then\n          if [ \"$t_srctype\" == \"$NODETYPE_EDGE\" ]\n            then\n            echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${tb_switch[$ix_srcswitch]}${FILE_LINKSUM_NOCORE}\n          fi\n          if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n            then\n            echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_LINKSUM_NOCORE}\n          fi\n        fi\n      fi\n\n      # Output CSV FILE_LINKSUM_NOCABLE\n      #  Note: output only needed at top-level to bootstrap FILE_LINKSUM_SWD06\n      #  and FILE_LINKSUM_SWD24\n      if [ \"$t_srctype\" == \"$NODETYPE_SPINE\" ]\n        then\n        echo \"${link}\" >> ${FILE_LINKSUM_NOCABLE}\n      fi\n\n      # Output CSV nodedesc1\n      if [ \"$t_srctype\" == \"$NODETYPE_HFI\" ]\n        then\n        echo \"${nodedesc1};0x00117500${nodeguid1};${nodedetails1}\" >> ${FILE_NODEFIS}\n        if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1};${nodedetails1}\" >> ${tb_group[$ix_srcgroup]}${FILE_NODEFIS}\n        fi\n\n        if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1};${nodedetails1}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${FILE_NODEFIS}\n        fi\n\n        if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n          then\n          if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n            then\n            if [ \"x${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}\" == \"x${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}\" ]\n              then\n              echo \"${nodedesc1};0x00117500${nodeguid1};${nodedetails1}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_NODEFIS}\n            fi\n          fi\n        fi\n      else\n        echo \"${nodedesc1};0x00117500${nodeguid1}\" >> ${FILE_NODESWITCHES}\n        if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1}\" >> ${tb_group[$ix_srcgroup]}${FILE_NODESWITCHES}\n        fi\n\n        if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${FILE_NODESWITCHES}\n        fi\n\n        if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${tb_switch[$ix_srcswitch]}${FILE_NODESWITCHES}\n        fi\n      fi\n\n      # Output CSV nodedesc2\n      echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${FILE_NODESWITCHES}\n      if [ \"$t_dsttype\" == \"$NODETYPE_LEAF\" ]\n        then\n        echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${FILE_NODELEAVES}\n        echo \"${t_dstname}\" >> ${FILE_NODECHASSIS}\n      fi\n      if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n        then\n        echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${FILE_NODESWITCHES}\n        if [ \"$t_dsttype\" == \"$NODETYPE_LEAF\" ]\n          then\n          echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${FILE_NODELEAVES}\n          echo \"${t_dstname}\" >> ${tb_group[$ix_dstgroup]}${FILE_NODECHASSIS}\n        fi\n      fi\n\n      if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_NODESWITCHES}\n        if [ \"$t_dsttype\" == \"$NODETYPE_LEAF\" ]\n          then\n          echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_NODELEAVES}\n          echo \"${t_dstname}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_NODECHASSIS}\n        fi\n      fi\n\n      if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n        then\n        if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n          then\n          echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_NODESWITCHES}\n        elif [ \"$t_dsttype\" == \"$NODETYPE_LEAF\" ]\n          then\n          echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_NODELEAVES}\n          echo \"${t_dstname}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_NODECHASSIS}\n        fi\n      fi\n\n    # End of link information\n    else\n      cts_parse=2\n    fi\n    ;;\n\n    # Process core switch data\n  2)\n    if echo \"$t_00\" | grep -e \"$CORE_NAME\" > /dev/null 2>&1\n      then\n      core_name=`echo $t_00 | cut -d ':' -f 2`\n      display_progress \"Generating links for Core:$core_name\"\n      if echo \"$t_01\" | grep -e \"$CORE_GROUP\" > /dev/null 2>&1\n        then\n        core_group=`echo $t_01 | cut -d ':' -f 2`\n      elif [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n        then\n        echo \"Must have rack group name when outputting rack group (line:$ix_line)\"\n        usage_full \"2\"\n      else\n        core_group=\"\"\n      fi\n      if echo \"$t_02\" | grep -e \"$CORE_RACK\" > /dev/null 2>&1\n        then\n        core_rack=`echo $t_02 | cut -d ':' -f 2`\n      elif [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        echo \"Must have rack name when outputting rack (line:$ix_line)\"\n        usage_full \"2\"\n      else\n        core_rack=\"\"\n      fi\n      if echo \"$t_03\" | grep -e \"$CORE_SIZE\" > /dev/null 2>&1\n        then\n        core_size=`echo $t_03 | cut -d ':' -f 2`\n        if [ $core_size -ne 288 -a $core_size -ne 1152 ]\n          then\n          echo \"Invalid $CORE_SIZE parameter ($t_03)\"\n          usage_full \"2\"\n        fi\n      else\n        echo \"No $CORE_SIZE parameter\"\n        usage_full \"2\"\n      fi\n      if echo \"$t_04\" | grep -e \"$CORE_FULL\" > /dev/null 2>&1\n        then\n        core_full=`echo $t_04 | cut -d ':' -f 2`\n        if [ $core_full -ne 0 -a $core_full -ne 1 ]\n          then\n          echo \"Invalid $CORE_FULL parameter ($t_04)\"\n          usage_full \"2\"\n        fi\n      else\n        core_full=0\n      fi\n\n      # Output CSV FILE_LINKSUM_NOCABLE\n      if [ $core_full == 1 ]\n        then\n        leaves=\"\"\n      else\n        leaves=`cat $FILE_NODELEAVES | tr '\\012' '|' | sed -e 's/|$//'`\n      fi\n      if [ $core_size == 288 ]\n        then\n        cat $FILE_LINKSUM_SWD06 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> ${FILE_LINKSUM_NOCABLE}\n      else\n        cat $FILE_LINKSUM_SWD24 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> ${FILE_LINKSUM_NOCABLE}\n      fi\n      cat ${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 9-10 | sort -u >> ${FILE_NODESWITCHES}\n      cat ${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | sort -u >> ${FILE_NODESWITCHES}\n      cat ${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | cut -d \"$cat_char\" -f 1 | sort -u >> ${FILE_NODECHASSIS}\n\n      if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n        then\n        if [ $core_full == 1 ]\n          then\n          leaves=\"\"\n        else\n          leaves=`cat $core_group/$FILE_NODELEAVES | tr '\\012' '|' | sed -e 's/|$//'`\n        fi\n        if [ $core_size == 288 ]\n          then\n          cat $FILE_LINKSUM_SWD06 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> $core_group/${FILE_LINKSUM_NOCABLE}\n        else\n          cat $FILE_LINKSUM_SWD24 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> $core_group/${FILE_LINKSUM_NOCABLE}\n        fi\n        cat $core_group/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 9-10 | sort -u >> $core_group/${FILE_NODESWITCHES}\n        cat $core_group/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | sort -u >> $core_group/${FILE_NODESWITCHES}\n        cat $core_group/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | cut -d \"$cat_char\" -f 1 | sort -u >> $core_group/${FILE_NODECHASSIS}\n      fi\n\n      if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        if [ $core_full == 1 ]\n          then\n          leaves=\"\"\n        else\n          leaves=`cat $core_group/$core_rack/$FILE_NODELEAVES | tr '\\012' '|' | sed -e 's/|$//'`\n        fi\n        if [ $core_size == 288 ]\n          then\n          cat $FILE_LINKSUM_SWD06 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> $core_group/$core_rack/${FILE_LINKSUM_NOCABLE}\n        else\n          cat $FILE_LINKSUM_SWD24 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> $core_group/$core_rack/${FILE_LINKSUM_NOCABLE}\n        fi\n        cat $core_group/$core_rack/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 9-10 | sort -u >> $core_group/$core_rack/${FILE_NODESWITCHES}\n        cat $core_group/$core_rack/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | sort -u >> $core_group/$core_rack/${FILE_NODESWITCHES}\n        cat $core_group/$core_rack/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | cut -d \"$cat_char\" -f 1 | sort -u >> $core_group/$core_rack/${FILE_NODECHASSIS}\n      fi\n\n    # End of core switch information\n    else\n      break\n    fi\n    ;;\n\n  esac  # end of case $cts_parse in\n\n  ix_line=$((ix_line+1))\n\ndone < <( cat $FILE_TOPOLOGY_LINKS | tr -d '\\015' )  # End of while read ... do\n\n# Generate topology file(s)\ndisplay_progress \"Generating $FILE_TOPOLOGY_OUT file(s)\"\n# Generate top-level topology file\ngen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n\n# Output rack groups\nif [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n  then\n  # Loop through rack groups\n  for (( ix=1 ; $ix<$MAX_GROUPS ; ix=$((ix+1)) ))\n  do\n    if [ -n \"${tb_group[$ix]}\" ]\n      then\n      cd ${tb_group[$ix]}\n      gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n\n      if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        # Loop through racks\n        for rack in *\n        do\n          if [ -d $rack ]\n            then\n            cd $rack\n            gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n\n            if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n              then\n              # Loop through switches\n              for switch in *\n              do\n                if [ -d $switch ]\n                  then\n                  cd $switch\n                  gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n                  cd ..\n                fi  # End of if [ -d $switch ]\n\n              done  # End of for switch in *\n\n            fi  # End of if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n\n            cd ..\n\n          fi  # End of if [ -d $rack ]\n\n        done  # End of for rack in *\n\n      fi  # End of if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n\n      cd ..\n\n    elif [ $ix == 1 ]\n      then\n      echo \"Must specify Rack Group names when outputting Rack Groups\"\n      usage_full \"2\"\n    fi  # End of if [ -n \"${tb_group[$ix]}\" ]\n\n  done  # End of for (( ix=1 ; $ix<$MAX_GROUPS ; ix=$((ix+1)) ))\n\n# Output racks without rack groups\nelif [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n  then\n  # Loop through racks\n  for (( ix=1 ; $ix<$MAX_RACKS ; ix=$((ix+1)) ))\n  do\n    if [ -n \"${tb_rack[$ix]}\" ]\n      then\n      cd ${tb_rack[$ix]}\n      gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n\n      if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n        then\n        # Loop through switches\n        for switch in *\n        do\n          if [ -d $switch ]\n            then\n            cd $switch\n            gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n            cd ..\n          fi  # End of if [ -d $switch ]\n\n        done  # End of for switch in *\n\n      fi  # End of if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n\n      cd ..\n\n    elif [ $ix == 1 ]\n      then\n      echo \"Must specify Rack names when outputting Racks\"\n      usage_full \"2\"\n    fi  # End of if [ -n \"${tb_rack[$ix]}\" ]\n\n  done  # End of for (( ix=1 ; $ix<$MAX_RACKS ; ix=$((ix+1)) ))\n\n# Output switches without racks or rack groups\nelif [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n  then\n  # Loop through switches\n  for (( ix=1 ; $ix<$MAX_SWITCHES ; ix=$((ix+1)) ))\n  do\n    if [ -n \"${tb_switch[$ix]}\" ]\n      then\n      cd ${tb_switch[$ix]}\n      gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n      cd ..\n\n    elif [ $ix == 1 ]\n      then\n      echo \"Must specify Switch names when outputting Switches\"\n      usage_full \"2\"\n    fi  # End of if [ -n \"${tb_switch[$ix]}\" ]\n\n  done  # End of for (( ix=1 ; $ix<$MAX_SWITCHES ; ix=$((ix+1)) ))\n\nfi  # End of if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n\ndisplay_progress \"Done\"\nexit 0\n\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# Topology script to translate one or more custom (customer) topology CSV\n# files for a (single) fabric to a standard-format topology.csv file for\n# input to opaxlattopology.sh.\n\n# Primary input topology CSV format:\n#  Line 1     header data (ignored)\n#  Line 2     blank\n#  Line 3     fabric value pairs\n#  Line 4     header data (ignored)\n#  Lines 5-N  topology CSV\n\n# Primary input Links Fields:\n#  Source Name:    01\n#  Dest Name:      02\n#  Cable Length:   03\n#  Cable Details:  04\n\n# Secondary input topology CSV format:\n#  Lines 1-N  topology CSV\n\n# Primary input Links Fields:\n#  Source Name:    01\n#  Dest Name:      02\n#  Cable Length:   03\n#  Cable Details:  04\n\n# Output topology CSV format:\n#  Line 1         header line 1 (\"Standard-Format Topology Spread Sheet\")\n#  Line 2         header line 2 (\"Source   Destination   Cable\")\n#  Line 3         header line 3 (\"Rack Group   Rack   Name   Name-2 ...\")\n#  Lines 4-N      topology CSV\n#  Line N+1       blank\n#  Line N+2       core specification\n\n# Output Links Fields:\n#  Source Rack Group: 01\n#  Source Rack:       02\n#  Source Name:       03\n#  Source Name-2:     04\n#  Source Port:       05\n#  Source Type:       06\n#  Dest Rack Group:   07\n#  Dest Rack:         08\n#  Dest Name:         09\n#  Dest Name-2:       10\n#  Dest Port:         11\n#  Dest Type:         12\n#  Cable Label:       13\n#  Cable Length:      14\n#  Cable Details:     15\n\n# Output Core specifications (same line):\n#  Core Name:X\n#  Core Size:X (288 or 1152)\n#  Core Group:X\n#  Core Rack:X\n#  Core Full:X (0 or 1)\n\n\n## Defines:\nPROGRAM_NAME=\"opaxlattopology_cust\"\nHOST_NAME_BASE=\"host\"\nEDGE_NAME_BASE=\"opasw\"\nCORE_NAME_BASE=\"opacore\"\nFILE_RESERVE=\"file_reserve\"\nFILE_TEMP=\"file_temp\"\nFILE_TEMP2=\"file_temp2\"\nFILE_DEBUG=\"file_debug\"\nFILE_DEBUG2=\"file_debug2\"\nOUTPUT_DETAIL=0\nNODETYPE_HFI=\"FI\"\nNODETYPE_EDGE=\"SW\"\nNODETYPE_LEAF=\"CL\"\nNODETYPE_SPINE=\"CS\"\nDUMMY_CORE_NAME=\"ZzNAMEqQ\"\nCORE_GROUP=\"Core Group:\"\nCORE_RACK=\"Core Rack:\"\nCORE_NAME=\"Core Name:\"\nCORE_SIZE=\"Core Size:\"\nCORE_FULL=\"Core Full:\"\nHFI_SUFFIX=\"HFI-1\"\n\n\n## Global variables:\n\n# Parsing tokens:\nt_00=\"\"\nt_01=\"\"\nt_02=\"\"\nt_03=\"\"\nt_filler=\"\"\n\nt_srcname=\"\"\nt_dstname=\"\"\nt_cablelength=\"\"\nt_cabledetails=\"\"\n\n# Output CSV values:\nsrcgroup=\"\"\nsrcrack=\"\"\nsrcname=\"\"\nsrcname2=\"\"\nsrcport=\"\"\nsrctype=\"\"\ndstgroup=\"\"\ndstrack=\"\"\ndstname=\"\"\ndstname2=\"\"\ndstport=\"\"\ndsttype=\"\"\ncablelabel=\"\"\ncablelength=\"\"\ncabledetails=\"\"\ncore_group=\"\"\ncore_rack=\"\"\ncore_name=\"$CORE_NAME_BASE\"\ncore_size=\"\"\ncore_full=0\n\n# Operating variables:\ncts_parse=0\nix=0\nn_verbose=2\nindent=\"\"\ncat_char=\" \"\nfl_clean=1\nmax_coreswitch=0\nfile_topology_in=\"\"\nfile_topology_in2=\"\"\nfile_topology_out=\"\"\ntb_corename[0]=\"\"\n\n# Debug variables:\ndebug_0=\ndebug_1=\ndebug_2=\ndebug_3=\ndebug_4=\ndebug_5=\ndebug_6=\ndebug_7=\n#echo \"DEBUG-x.y: 0:$debug_0: 1:$debug_1: 2:$debug_2: 3:$debug_3: 4:$debug_4: 5:$debug_5: 6:$debug_6: 7:$debug_7:\"\n\n\n## Local functions:\nfunctout=\n\n# Output usage information\nusage_full()\n{\n\techo \"Usage: $PROGRAM_NAME -t topology_prime [-s topology_second] -T topology_out\"\n\techo \"                     [-v level] [-i level] [-c char] [-K] [-?]\"\n\techo \"  -t topology_prime  - primary topology CSV input file\"\n\techo \"  -s topology_second - secondary topology CSV input file\"\n\techo \"  -T topology_out    - topology CSV output file\"\n\techo \"  -v level  -  verbose level (0-8, default 2)\"\n\techo \"               0 - no output\"\n\techo \"               1 - progress output\"\n\techo \"               2 - reserved\"\n\techo \"               4 - time stamps\"\n\techo \"               8 - reserved\"\n\techo \"  -i level  -  screen output indent level (0-15, default 0)\"\n\techo \"  -c char   -  concatenation char (default SPACE)\"\n\techo \"  -K        -  DO NOT clean temporary files\"\n\techo \"  -?        -  print this output\"\n\texit $1\n}\t# End of usage_full()\n\n# Convert node name from custom encoded forms to standard CSV.  The following\n# conversions are performed:\n#   CnLxxxpM  -> <CORE_NAME_BASE>N,Lxxx,M,<NODETYPE_LEAF>\n#   opaNpM     -> <EDGE_NAME_BASE>N,,M,<NODETYPE_EDGE>\n#   abc[-]N   -> abc[-]N,,1,<NODETYPE_HFI>\n\n# Inputs:\n#   $1 - encoded node name\n#\n# Outputs:\n#   Converted node name in CSV string\ncvt_nodename()\n{\n\tlocal val\n\n\tval=`echo $1 | sed -r \\\n\t\t-e \"s/^[cC]([0-9]+)[lL]([0-9]+)[pP]([0-9]+)/$CORE_NAME_BASE;\\1,L\\2,\\3,$NODETYPE_LEAF/\" \\\n\t\t-e \"s/^opa([0-9]+)[pP]([0-9]+)/$EDGE_NAME_BASE;\\1,,\\2,$NODETYPE_EDGE/\" \\\n\t\t-e \"s/^([a-zA-Z-]+)([0-9]+)/\\1;\\2,,1,$NODETYPE_HFI/\"`\n\techo \"$val\" | sed -e 's/;//g'\n\n}\t# End of cvt_nodename\n\n# Display progress information (to STDOUT)\n# Inputs:\n#   $1 - progress string\n#\n# Outputs:\n#   none\ndisplay_progress()\n{\n\tif [ $n_verbose -ge 1 ]\n\t\tthen\n\t\techo \"$indent$1\"\n\t\tif [ $n_verbose -ge 4 ]\n\t\t\tthen\n\t\t\techo \"$indent  \"`date`\n\t\tfi\n\tfi\n}\t# End of display_progress()\n\n# Process core switch\n# Save core switch name in tb_corename, indexed by switch number\n\n# Inputs:\n#   $1 - core switch name\nproc_coreswitch()\n{\n\tlocal corenum\n\n\tcorenum=`echo \"$1\" | sed -r -e \"s/$CORE_NAME_BASE([0-9]+)/\\1/\"`\n\ttb_corename[$corenum]=\"$1\"\n\tif [ $corenum -gt $max_coreswitch ]\n\t\tthen\n\t\tmax_coreswitch=$corenum\n\tfi\n\n}\t# End of proc_corename\n\n\n## Main function:\n\nrm -f $FILE_DEBUG\nrm -f $FILE_DEBUG2\n\n# Get options\nwhile getopts c:i:Ks:t:T:v:? option\ndo\n\tcase $option in\n\tc)\n\t\tcat_char=$OPTARG\n\t\t;;\n\n\ti)\n\t\tindent=`echo \"                    \" | cut -b -$OPTARG`\n\t\t;;\n\n\tK)\n\t\tfl_clean=0\n\t\t;;\n\n\ts)\n\t\tfile_topology_in2=\"$OPTARG\"\n\t\tif [ ! -f $file_topology_in2 ]\n\t\t\tthen\n\t\t\techo \"$PROGRAM_NAME: File $file_topology_in2 does not exist\"\n\t\t\tUsage\n\t\tfi\n\t\t;;\n\tt)\n\t\tfile_topology_in=\"$OPTARG\"\n\t\tif [ ! -f $file_topology_in ]\n\t\t\tthen\n\t\t\techo \"$PROGRAM_NAME: File $file_topology_in does not exist\"\n\t\t\tUsage\n\t\tfi\n\t\t;;\n\tT)\n\t\tfile_topology_out=\"$OPTARG\"\n\t\t;;\n\n\tv)\n\t\tn_verbose=$OPTARG\n\t\t;;\n\n\t*)\n\t\tusage_full \"0\"\n\t\t;;\n\tesac\ndone\n\nif [ -z \"$file_topology_in\" ]\n\tthen\n\techo \"$PROGRAM_NAME: must specify primary topology input file\"\n\tusage_full \"1\"\nfi\nif [ ! -f \"$file_topology_in\" ]\n\tthen\n\techo \"$PROGRAM_NAME: $file_topology_in does not exist\"\n\tusage_full \"1\"\nfi\nif [ -n \"$file_topology_in2\" ]\n\tthen\n\tif [ ! -f \"$file_topology_in2\" ]\n\t\tthen\n\t\techo \"$PROGRAM_NAME: $file_topology_in2 does not exist\"\n\t\tusage_full \"1\"\n\tfi\nfi\nif [ -z \"$file_topology_out\" ]\n\tthen\n\techo \"$PROGRAM_NAME: must specify topology output file\"\n\tusage_full \"1\"\nfi\n\n# Parse topology input file(s)\ndisplay_progress \"Reading $file_topology_in (and $file_topology_in2)\"\nif [ -z $file_topology_in2 ]\n\tthen\n\tcat $file_topology_in > $FILE_TEMP\nelse\n\tcat $file_topology_in $file_topology_in2 > $FILE_TEMP\nfi\n\n# Output header lines\nrm -f $file_topology_out\necho \"Translated Customer Topology from:$file_topology_in (and $file_topology_in2),,,,,,,,,,,,,,\" >> ${file_topology_out}\necho \"Source,,,,,,Destination,,,,,,Cable,,\" >> ${file_topology_out}\necho \"Rack Group,Rack,Name,Name-2,Port,Type,Rack Group,Rack,Name,Name-2,Port,Type,Label,Length,Details\" >> ${file_topology_out}\n\nix_line=1\n\nIFS=\",\"\nwhile read t_00 t_01 t_02 t_03 t_filler\ndo\n\tcase $cts_parse in\n\t# Process core switch data\n\t0)\n\t\tif echo \"$t_00\" | grep -e \"Core Switch\" > /dev/null 2>&1\n\t\t\tthen\n\t\t\tcore_size=`echo $t_00 | cut -d ':' -f 2 | sed -r -e 's/^([0-9]+)[fF]*/\\1/'`\n\t\t\tif [ $core_size -ne 288 -a $core_size -ne 1152 ]\n\t\t\t\tthen\n\t\t\t\techo \"$PROGRAM_NAME: Invalid Core Switch parameter ($t_00)\"\n\t\t\t\tusage_full \"2\"\n\t\t\tfi\n\t\t\tif echo \"$t_00\" | cut -d ':' -f 2 | grep -i -e '[fF]' > /dev/null 2>&1\n\t\t\t\tthen\n\t\t\t\tcore_full=1\n\t\t\tfi\n\n\t\t\tcts_parse=1\n\t\tfi\n\t\t;;\n\n\t# Process link header line\n\t1)\n\t\tif echo \"$t_00\" | grep -e \"Source\" > /dev/null 2>&1\n\t\t\tthen\n\t\t\tcts_parse=2\n\t\tfi\n\t\t;;\n\n\t# Process link lines\n\t2)\n\t\tif [ -n \"$t_00\" ]\n\t\t\tthen\n\t\t\tt_srcname=$t_00\n\t\t\tt_dstname=$t_01\n\t\t\tt_cablelength=$t_02\n\t\t\tt_cabledetails=$t_03\n\n\t\t\tnodename=`cvt_nodename \"$t_srcname\"`\n\t\t\tsrcgroup=\"\"\n\t\t\tsrcrack=\"\"\n\t\t\tsrcname=`echo \"$nodename\" | cut -d ',' -f 1`\n\t\t\tsrcname2=`echo \"$nodename\" | cut -d ',' -f 2`\n\t\t\tsrcport=`echo \"$nodename\" | cut -d ',' -f 3`\n\t\t\tsrctype=`echo \"$nodename\" | cut -d ',' -f 4`\n\t\t\tif [ \"$srctype\" == \"$NODETYPE_LEAF\" ]\n\t\t\t\tthen\n\t\t\t\tproc_coreswitch \"$srcname\"\n\t\t\tfi\n\n\t\t\tnodename=`cvt_nodename \"$t_dstname\"`\n\t\t\tdstgroup=\"\"\n\t\t\tdstrack=\"\"\n\t\t\tdstname=`echo \"$nodename\" | cut -d ',' -f 1`\n\t\t\tdstname2=`echo \"$nodename\" | cut -d ',' -f 2`\n\t\t\tdstport=`echo \"$nodename\" | cut -d ',' -f 3`\n\t\t\tdsttype=`echo \"$nodename\" | cut -d ',' -f 4`\n\t\t\tif [ \"$dsttype\" == \"$NODETYPE_LEAF\" ]\n\t\t\t\tthen\n\t\t\t\tproc_coreswitch \"$dstname\"\n\t\t\tfi\n\n\t\t\tcablelabel=\"$t_srcname$cat_char$t_dstname\"\n\t\t\tcablelength=\"$t_cablelength\"\n\t\t\tcabledetails=\"$t_cabledetails\"\n\n\t\t\t# Output link line\n\t\t\techo \"${srcgroup},${srcrack},${srcname},${srcname2},${srcport},${srctype},${dstgroup},${dstrack},${dstname},${dstname2},${dstport},${dsttype},${cablelabel},${cablelength},${cabledetails}\" >> ${file_topology_out}\n\t\telse\n\t\t\tcts_parse=3\n\t\tfi\n\t\t;;\n\n\tesac\t# end of case $cts_parse in\n\n  ix_line=$((ix_line+1))\n\ndone < <( cat $FILE_TEMP | tr -d '\\015' )\t# End of while read ... do\n\n# Generate core line\ndisplay_progress \"Ending $file_topology_out with core line(s)\"\necho \",,,,,,,,,,,,,,\" >> ${file_topology_out}\nfor (( ix=0 ; $ix <= $max_coreswitch ; ix=$[ix+1] ))\ndo\n\tif [ -n \"${tb_corename[$ix]}\" ]\n\t\tthen\n\t\techo \"${CORE_NAME}${tb_corename[$ix]},${CORE_GROUP}${core_group},${CORE_RACK}${core_rack},${CORE_SIZE}${core_size},${CORE_FULL}${core_full},,,,,,,,,,\" >> ${file_topology_out}\n\tfi\ndone\t# End of for (( ix=0 ; $ix <= $max_coreswitch ; ix=$[ix+1] ))\necho \",,,,,,,,,,,,,,\" >> ${file_topology_out}\n\n# Clean temporary files\nif [ $fl_clean == 1 ]\n\tthen\n\trm -f $FILE_TEMP\n\trm -f $FILE_TEMP2\nfi\n\ndisplay_progress \"Done\"\nexit 0\n\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\nTEMP1=/tmp/smdiffa$$\nTEMP2=/tmp/smdiffb$$\ntrap \"rm -f $TEMP1 $TEMP2; exit 1\" SIGHUP SIGTERM SIGINT\n\nUsage()\n{\n\techo \"Usage: config_diff [-f][-l] [-d 'diff_args'] file1 file2\" >&2\n\techo \"      -f  - filter out FM parameters which are not part of consistency check\" >&2\n\techo \"      -l  - include comments in XML to indicate original line numbers\" >&2\n\techo \"      -d 'diff_args' - additional arguments to diff command\" >&2\n\texit 2\n}\n\nif [ ! -f /etc/sysconfig/opa/opafm.info -a ! -f /etc/sysconfig/opa/qlogic_fm.info ]\nthen\n\techo \"config_diff: IFS FM not installed\" >&2\n\texit 1\nelse\n\tif [ -f /etc/sysconfig/opa/qlogic_fm.info ]\n\tthen \n\t\tcp -f /etc/sysconfig/opa/qlogic_fm.info /etc/sysconfig/opa/opafm.info\n\tfi\n\t. /etc/sysconfig/opa/opafm.info # get IFS_FM_BASE\n\ttooldir=$IFS_FM_BASE/etc\nfi\n\nfilter=n\nfilter_args=\ndiff_args=\nwhile getopts fld: param\ndo\n\tcase $param in\n\tf)\tfilter=y;;\n\tl)\tfilter_args=\"$filter_args -l\";;\n\td)\tdiff_args=\"$diff_args $OPTARG\";;\n\t?)\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\nif [ $# -lt 2 ]\nthen\n\tUsage\nfi\nfile1=$1\nfile2=$2\n\nif [ ! -e $file1 ]\nthen\n\techo \"$file1: Not Found\" >&2\n\tUsage\nfi\nif [ ! -e $file2 ]\nthen\n\techo \"$file2: Not Found\" >&2\n\tUsage\nfi\n\nif [ x\"$filter\" = xy ]\nthen\n\tfilter_args=\"$filter_args -s Start -s Hca -s Port -s Debug -s RmppDebug -s Priority -s ElevatedPriority -s LogLevel -s LogFile -s LogMode -s SyslogFacility \n-s *_LogMask -s Name -s PortGUID -s Sm.TrapLogSuppressTriggerInterval -s Sm.SmPerfDebug -s Sm.SaPerfDebug -s Sm.DebugDor -s Sm.DebugVf -s Sm.DebugJm -s Sm.DebugLidAssign -s Sm.LoopTestOn -s Sm.LoopTestPacket -s Sm.LID -s Sm.DynamicPortAlloc -s Sm.SaRmppChecksum -s Pm.ThresholdsExceededMsgLimit -s Pm.SweepErrorsLogThreshold -s Bm.DebugFlag -s Fe.TcpPort\"\nfi\n\n$tooldir/opaxmlfilter -i 4 $filter_args $file1 > $TEMP1\n[ $? != 0 ] && exit 1\n\n$tooldir/opaxmlfilter -i 4 $filter_args $file2 > $TEMP2\n[ $? != 0 ] && exit 1\n\ndiff $diff_args $TEMP1 $TEMP2\nres=$?\n\nrm -f $TEMP1 $TEMP\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\nTEMP=/tmp/smgen$$\ntrap \"rm -f $TEMP; exit 1\" SIGHUP SIGTERM SIGINT\n\nUsage()\n{\n\techo \"Usage: config_generate [-e] dest_file\" >&2\n\techo \"      -e  - generate file for embedded FM, default is to generate for host FM\" >&2\n\texit 2\n}\n\nif [ -f /opt/opa/fm_tools/config_convert -a -f /opt/opa/fm_tools/opafm_src.xml ]\nthen\n\ttooldir=/opt/opa/fm_tools\nelif [ ! -f /etc/sysconfig/opa/opafm.info || ! -f /etc/sysconfig/opa/qlogic_fm.info ]\nthen\n\techo \"config_generate: IFS FM not installed\" >&2\n\texit 1\nelse\n\tif [ -f /etc/sysconfig/opa/qlogic_fm.info ]\n        then\n                cp -f /etc/sysconfig/opa/qlogic_fm.info /etc/sysconfig/opa/opafm.info\n        fi\n\n\t. /etc/sysconfig/opa/qlogic_fm.info # get IFS_FM_BASE\n\ttooldir=$IFS_FM_BASE/etc\nfi\n\nesm=n\nwhile getopts e param\ndo\n\tcase $param in\n\te)\tesm=y;;\n\t?)\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\nif [ $# -lt 1 ]\nthen\n\tUsage\nfi\ndest_file=$1\n\nprint_separator()\n{\n\techo \"-------------------------------------------------------------------------------\"\n}\n\n# global $ans set to 1 for yes or 0 for no\nget_yes_no()\n{\n\tlocal prompt default input\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\twhile true\n\tdo\n\t\tinput=\n\t\techo -n \"$prompt [$default]:\"\n\t\tread input\n\t\tif [ \"x$input\" = x ]\n\t\tthen\n\t\t\tinput=\"$default\"\n\t\tfi\n\t\tcase \"$input\" in\n\t\t[Yy]*)\tans=1; break;;\n\t\t[Nn]*)\tans=0; break;;\n\t\tesac\n\tdone\n}\n\n# global $ans set to value input\nget_number()\n{\n\tlocal prompt default input min max\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\tmin=\"$3\"\n\tmax=\"$4\"\n\twhile true\n\tdo\n\t\tinput=\n\t\techo -n \"$prompt [$default]:\"\n\t\tread input\n\t\tif [ \"x$input\" = x ]\n\t\tthen\n\t\t\tinput=\"$default\"\n\t\tfi\n\t\tif [ \"$input\" -lt $min -o \"$input\" -gt $max ] 2>/dev/null\n\t\tthen\n\t\t\techo \"Input must be number $min to $max.  Invalid Input: $input\"\n\t\telse\n\t\t\tans=$input\n\t\t\tbreak\n\t\tfi\n\tdone\n}\n\n# global $ans set to value input\nget_string()\n{\n\tlocal prompt default input\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\twhile true\n\tdo\n\t\tinput=\n\t\techo -n \"$prompt [$default]:\"\n\t\tread input\n\t\tif [ \"x$input\" = x ]\n\t\tthen\n\t\t\tinput=\"$default\"\n\t\tfi\n\t\tans=$input\n\t\tbreak\n\tdone\n}\n\n# global $ans set to value input\n#get_choice()\n#{\n#\tlocal prompt default input\n#\tprompt=\"$1\"\n#\tdefault=\"$2\"\n#\tPS3=\"$prompt ($default recommended): \"\n#\tselect input in $choices\n#\tdo\n#\t\tcase \"$input\" in\n#\t\tgcc|pathscale|pgi|intel) ans=$input; break;;\n#\t\tesac\n#\tdone\n#}\n\n# global $ans set to value input\nmtu[1]=\"256\"\nmtu[2]=\"512\"\nmtu[3]=\"1024\"\nmtu[4]=\"2048\"\nmtu[5]=\"4096\"\nget_mtu()\n{\n\tlocal prompt default input\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\n\t# set default in case cntrl-D entered\n\tcase \"$default\" in\n\t2048) ans=4;;\t# convert to IBTA enum\n\t4096) ans=5;;\t# convert to IBTA enum\n\tesac\n\n\tPS3=\"$prompt ($default recommended): \"\n\tselect input in 2048 4096\n\tdo\n\t\tcase \"$input\" in\n\t\t2048) ans=4; break;;\t# convert to IBTA enum\n\t\t4096) ans=5; break;;\t# convert to IBTA enum\n\t\tesac\n\tdone\n}\n\n# global $ans set to value input\n# rate 1 is obsolete\nrate[2]=\"2.5g\"\nrate[3]=\"10g\"\nrate[4]=\"30g\"\nrate[5]=\"5g\"\nrate[6]=\"20g\"\nrate[7]=\"40g\"\nrate[8]=\"60g\"\nrate[9]=\"80g\"\nrate[10]=\"120g\"\n\nget_rate()\n{\n\tlocal prompt default input\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\n\t# set default in case cntrl-D entered\n\tcase \"$default\" in\n\t'10g(4xSDR)') ans=3;;\t# convert to IBTA enum\n\t'20g(4xDDR)') ans=6;;\t# convert to IBTA enum\n\t'30g(12xSDR)') ans=4;;\t# convert to IBTA enum\n\t'60g(12xDDR)') ans=8;;\t# convert to IBTA enum\n\tesac\n\n\tPS3=\"$prompt ($default recommended): \"\n\t#select input in '10g(4xSDR)' '20g(4xDDR)' '30g(12xSDR)' '60g(12xDDR)' '40g(4xQDR)'\n\tselect input in '10g(4xSDR)' '20g(4xDDR)' '40g(4xQDR)'\n\tdo\n\t\tcase \"$input\" in\n\t\t'10g(4xSDR)') ans=3; break;;\t# convert to IBTA enum\n\t\t'20g(4xDDR)') ans=6; break;;\t# convert to IBTA enum\n\t\t'30g(12xSDR)') ans=4; break;;\t# convert to IBTA enum\n\t\t'40g(4xQDR)') ans=7; break;;\t# convert to IBTA enum\n\t\t'60g(12xDDR)') ans=8; break;;\t# convert to IBTA enum\n\t\tesac\n\tdone\n}\n\nenable_instance()\n{\n\tlocal instance\n\tinstance=$1\n\n\tfm_enabled[$instance]=1\n\techo \"SM_${instance}_start=yes\" >> $TEMP\n\techo \"PM_${instance}_start=yes\" >> $TEMP\n\techo \"BM_${instance}_start=yes\" >> $TEMP\n\techo \"FE_${instance}_start=yes\" >> $TEMP\n}\n\nset_instance_priority()\n{\n\tlocal instance priority\n\tinstance=$1\n\tpriority=$2\n\n\techo \"SM_${instance}_priority=$priority\" >> $TEMP\n\techo \"PM_${instance}_priority=$priority\" >> $TEMP\n\techo \"BM_${instance}_priority=$priority\" >> $TEMP\n\t#echo \"FE_${instance}_priority=$priority\" >> $TEMP\n}\n\nif [ -e $dest_file ]\nthen\n\tif [ ! -f $dest_file ]\n\tthen\n\t\techo \"config_generate: $dest_file exists but is not a file\" >&2\n\t\texit 1\n\tfi\n\tget_yes_no \"Overwrite existing $dest_file\" \"n\"\n\tif [ $ans -eq 0 ]\n\tthen\n\t\texit 0\n\tfi\nfi\n\n# FM instance HCAs\nfm_hca[0]=1\nfm_hca[1]=1\nfm_hca[2]=2\nfm_hca[3]=2\n# FM instance Ports\nfm_port[0]=1\nfm_port[1]=2\nfm_port[2]=1\nfm_port[3]=2\n# which instances are enabled\nfm_enabled[0]=0\nfm_enabled[1]=0\nfm_enabled[2]=0\nfm_enabled[3]=0\n# default names for instances\nfm_name[0]=fm0\nfm_name[1]=fm1\nfm_name[2]=fm2\nfm_name[3]=fm3\n# FM device descriptions\nfm_device[0]=\"HCA ${fm_hca[0]} Port ${fm_port[0]}\"\nfm_device[1]=\"HCA ${fm_hca[1]} Port ${fm_port[1]}\"\nfm_device[2]=\"HCA ${fm_hca[2]} Port ${fm_port[2]}\"\nfm_device[3]=\"HCA ${fm_hca[3]} Port ${fm_port[3]}\"\n\nfm_allinstances=\"all FM instances\"\n\t\n# start to build $TEMP file with answers\nrm -f $TEMP\nprint_separator\necho \"FM resources and buffering are scaled to match the anticipated maximum size\"\necho \"of the fabric.  The size is specified in terms of the number of CAs in\"\necho \"a single fabric.\"\nif [ \"$esm\" = y ]\nthen\n\techo \"For Embedded Fabric Manager, its recommended to use a value of 1000 or less.\"\n\tget_number \"Anticipated maximum fabric size\" 1000 0 1000\nelse\n\techo \"For Host Fabric Manager, its recommended to use a value of 2560 or larger.\"\n\tget_number \"Anticipated maximum fabric size\" 2560 0 10000\nfi\necho \"  Setting SubnetSize to $ans\"\necho \"SUBNET_SIZE=$ans\" >> $TEMP\n\nprint_separator\necho \"LMC is used to control the number of LIDs per CA.\"\necho \"Multiple LIDs can be used to permit multiple routes between endpoints.\"\necho \"This permits selected applications (such as MPIs using QLogic PSM) to\"\necho \"optimize performance and/or resiliency by using dispersive routing.\"\nget_number \"LMC value to use (there will be 2^LMC LIDs per CA)\" 0 0 7\necho \"  Setting Lmc to $ans\"\necho \"  There will be $((2**$ans)) LIDs per CA\"\necho \"SM_0_lmc=$ans\" >> $TEMP\t# sets for all instances\n\nprint_separator\necho \"Adaptive routing permits QLogic QDR switches to dynamically adjust routing\"\necho \"based on traffic patterns and hence reduce congestion and improve overall\"\necho \"cluster performance and efficiency.\"\nget_yes_no \"Should Adaptive Routing be enabled\" \"n\"\necho \"  Setting AdaptiveRouting.Enable to $ans\"\necho \"SM_0_ar_enable=$ans\" >> $TEMP # sets for all instances\nif [ \"$ans\" -eq 1 ]\nthen\n\techo \"Adaptive routing will always route around failed or down links.\"\n   \techo \"In addition adapting routing around congestion can be enabled.\"\n\tget_yes_no \"Should Adaptive Routing around congestion be enabled\" \"n\"\n\techo \"  Setting AdaptiveRouting.LostRouteOnly to $ans\"\n\techo \"SM_0_ar_lost_route_only=$ans\" >> $TEMP # sets for all instances\n\n\techo \"Adaptive routing will always permit adapting among links between neighbor\"\n   \techo \"switch ASICs. In addition for pure CLOS/Fat Tree topologies, adaptions can be\"\n   \techo \"enabled to occur at all levels in the tree and across all ISLs.\"\n\tget_yes_no \"Should full CLOS/Fat Tree Adaptive Routing be enabled\" \"n\"\n\techo \"  Setting AdaptiveRouting.Tier1FatTree to $ans\"\n\techo \"SM_0_ar_tier1_fat_tree=$ans\" >> $TEMP # sets for all instances\nfi\n\nif [ \"$esm\" != y ]\nthen\n\tprint_separator\n\techo \"The FM logging has two possible modes.\"\n\techo \"In Normal mode, logging includes user actionable events and other FM\"\n\techo \"messages such as sweep progress, internal warnings and errors, etc.\"\n\techo \"In Quiet mode, only user actionable events are logged.\"\n\tget_yes_no \"Should Quiet Mode be used\" \"n\"\n\techo \"  Setting LogMode to $ans\"\t# 0=Normal, 1=Quiet\nelse\n\tans=0\nfi\n\nprint_separator\necho \"When nodes appear or disappear from the fabric, a message is logged.\"\necho \"A Threshold can be configured to limit the number of such messages per sweep.\"\necho \"This Threshold can help to avoid excessive messages when fabric changes occur.\"\nget_number \"Node Appearance Log Message Threshold\" 100\necho \"  Setting NodeAppearanceMsgThreshold to $ans\"\necho \"SM_0_node_appearance_msg_thresh=$ans\" >> $TEMP # sets for all instances\n\nif [ \"$esm\" = y ]\nthen\n\tenable_instance 0\n\tinstances=\"0\"\n\tnum_instances=1\n\tfm_device[0]=\"Switch Port 0\"\n\tfm_allinstances=\"this FM\"\nelse\n\tprint_separator\n\techo \"By default a FM node will run a single FM on the 1st Port of the 1st HCA.\"\n\techo \"However, in larger configurations, a single FM node may be used to\"\n\techo \"manage multiple fabrics.  Each such fabric would be contected to a different\"\n\techo \"HCA port.  Each HCA port is associated with a different FM instance.\"\n\tnum_instances=0\n\tdefault=y\n\tfor instance in 0 1 2 3\n\tdo\n\t\tget_yes_no \"Should FM instance $instance (${fm_device[$instance]}) be enabled\" $default\n\t\tdefault=n\t# only default to instance 0 enabled\n\t\tif [ \"$ans\" -eq 1 ]\n\t\tthen\n\t\t\techo \"  Enabling Start of FM instance $instance SM, PM, BM and FE\"\n\t\t\tenable_instance $instance\n\t\t\tinstances=\"$instances $instance\"\n\t\t\tnum_instances=$(($num_instances + 1))\n\t\tfi\n\tdone\nfi\n\nprint_separator\nif [ \"$esm\" = y ]\nthen\n\techo \"Each FM can have a name.\"\nelse\n\techo \"Each FM instance can have a unique name.  The name will appear as part\"\n\techo \"of all syslog entries generated by the given FM instance.\"\nfi\nfor instance in $instances\ndo\n\tget_string \"Name for FM instance $instance (${fm_device[$instance]})\" \"fm$instance\"\n\techo \"  Setting Name of FM instance $instance to $ans\"\n\techo \"SM_${instance}_name=$ans\" >> $TEMP\n\tfm_name[$instance]=\"$ans\"\ndone\n\nprint_separator\necho \"The FM configures the rate and MTU used for IPoIB multicast.\"\necho \"The rate selected must be no greater than the rate of the slowest link\"\necho \"in the fabric(s).\"\necho \"The MTU selected must be no greater than the MTU of the smallest MTU link\"\necho \"in the fabric(s).\"\necho \"When selecting the rate and MTU, CAs which won't run IPoIB can be ignored.\"\necho \"However all Switches must be operating with at least the rate and MTU selected.\"\necho\nif [ $num_instances -eq 1 ]\nthen\n\tsame_rate=1\n\tsame_mtu=1\nelse\n\tget_yes_no \"Will the same IPoIB Rate be used for $fm_allinstances\" \"y\"\n\tsame_rate=$ans\n\tget_yes_no \"Will the same IPoIB MTU be used for $fm_allinstances\" \"y\"\n\tsame_mtu=$ans\nfi\nif [ $same_rate -eq 1 ]\nthen\n\tget_rate \"IPoIB rate for $fm_allinstances\" '20g(4xDDR)'\n\trate=$ans\nfi\nif [ $same_mtu -eq 1 ]\nthen\n\tget_mtu \"IPoIB MTU for $fm_allinstances\" 2048\n\tmtu=$ans\nfi\nif [ $same_mtu -eq 1 -a $same_rate -eq 1 ]\nthen\n\techo \"  Setting MulticastGroup.MTU to ${mtu[$mtu]}\"\n\techo \"  Setting MulticastGroup.Rate to ${rate[$rate]}\"\n\techo \"SM_0_def_mc_mtu=$mtu\" >> $TEMP # sets for all instances\n\techo \"SM_0_def_mc_rate=$rate\" >> $TEMP # sets for all instances\nelse\n\tfor instance in $instances\n\tdo\n\t\tif [ $same_rate -eq 0 ]\n\t\tthen\n\t\t\tget_rate \"IPoIB rate for FM instance $instance (${fm_name[$instance]}) (${fm_device[$instance]})\" '20g(4xDDR)'\n\t\t\trate=$ans\n\t\tfi\n\t\tif [ $same_mtu -eq 0 ]\n\t\tthen\n\t\t\tget_mtu \"IPoIB MTU for FM instance $instance (${fm_name[$instance]}) (${fm_device[$instance]})\" 2048\n\t\t\tmtu=$ans\n\t\tfi\n\t\techo \"  Setting MulticastGroup.Rate for FM instance $instance to ${rate[$rate]}\"\n\t\techo \"  Setting MulticastGroup.MTU for FM instance $instance to ${mtu[$mtu]}\"\n\t\tif [ $instance -eq 0 ]\n\t\tthen\n\t\t\techo \"SM_0_def_mc_mtu=$mtu\" >> $TEMP\n\t\t\techo \"SM_0_def_mc_rate=$rate\" >> $TEMP\n\t\telse\n\t\t\techo \"SM_${instance}_def_mc_create=0x1\" >> $TEMP\n\t\t\t#echo \"SM_${instance}_def_mc_pkey=0xffff\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_mtu=$mtu\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_rate=$rate\" >> $TEMP\n\t\t\t#echo \"SM_${instance}_def_mc_sl=0x0\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_qkey=0x0\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_fl=0x0\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_tc=0x0\" >> $TEMP\n\t\tfi\n\tdone\nfi\n\nprint_separator\necho \"The FM supports failover.  The FM to be preferred as the primary can be\"\necho \"selected per FM instance.\"\necho \"If no preferred primary is selected, FMs will negotiate based on CA GUIDs.\"\nget_yes_no \"Do you want to configure a preferred primary or secondary FM\" \"n\"\nif [ $ans -eq 1 ]\nthen\n\tif [ $num_instances -eq 1 ]\n\tthen\n\t\tans=1\n\telse\n\t\tget_yes_no \"Will the same FM Failover Priority be used for $fm_allinstances\" \"y\"\n\tfi\n\tif [ $ans -eq 1 ]\n\tthen\n\t\tget_yes_no \"Will this FM be the preferrred primary\" \"y\"\n\t\tif [ $ans -eq 1 ]\n\t\tthen\n\t\t\tset_instance_priority 0 8 # sets for all instances\n\t\t\techo \"  Setting Priority of SM, PM, BM and FE to 8\"\n\t\telse\n\t\t\tset_instance_priority 0 1 # sets for all instances\n\t\t\techo \"  Setting Priority of SM, PM, BM and FE to 1\"\n\t\tfi\n\telse\n\t\tfor instance in $instances\n\t\tdo\n\t\t\tget_yes_no \"Will FM instance $instance (${fm_name[$instance]}) (${fm_device[$instance]}) be the preferred primary\" \"y\"\n\t\t\tif [ $ans -eq 1 ]\n\t\t\tthen\n\t\t\t\techo \"  Setting Priority of FM instance $instance SM, PM, BM and FE to 8\"\n\t\t\t\tset_instance_priority $instance 8 # sets for all instances\n\t\t\telse\n\t\t\t\techo \"  Setting Priority of FM instance $instance SM, PM, BM and FE to 1\"\n\t\t\t\tset_instance_priority $instance 1 # sets for all instances\n\t\t\tfi\n\t\tdone\n\tfi\nfi\n\nprint_separator\necho \"The FM supports sticky failover.  When enabled Sticky failover will\"\necho \"prevent a master FM from relinquishing control even if the preferred\"\necho \"primary FM comes online.  This can prevent situations where a bouncing\"\necho \"preferred primary repeatedly takes over then fails.\"\nget_yes_no \"Should Sticky Failover be enabled\" \"n\"\nif [ $ans -eq 1 ]\nthen\n\techo \"SM_0_elevated_priority=14\" >> $TEMP # sets for all instances\n\techo \"PM_0_elevated_priority=14\" >> $TEMP # sets for all instances\n\techo \"BM_0_elevated_priority=14\" >> $TEMP # sets for all instances\n\t#echo \"FE_0_elevated_priority=14\" >> $TEMP # sets for all instances\n\techo \"  Setting ElevatedPriority of SM, PM, and BM to 14\"\nfi\n\nprint_separator\necho \"Each fabric in a cluster must have a unique 64 bit subnet prefix.\"\necho \"The subnet prefix must be consistently configured on all FMs which\"\necho \"manage the given fabric (eg. on the primary and secondaries).\"\necho \"To simplify input, you will be prompted for the upper bits for the cluster\"\necho \"then you will be prompted for the lower bits for each instance.\"\necho \"The two values will be ORed together to form the subnet prefix for each fabric.\"\nget_string \"Subnet Prefix upper bits for cluster\" \"0xfe80000000000000\"\nupper=$ans\nfor instance in $instances\ndo\n\tif [ $num_instances -eq 1 ]\n\tthen\n\t\tdefault=\"0x0\"\n\telse\n\t\tdefault=\"0x100$instance\"\n\tfi\n\tget_string \"Subnet Prefix lower bits for FM instance $instance (${fm_name[$instance]}) (${fm_device[$instance]})\" \"$default\"\n\tprefix=$(perl -e \"use bignum; printf '0x%016Lx', $upper | $ans;\")\n\techo \"  Setting SubnetPrefix of FM instance $instance to $prefix\"\n\techo \"SM_${instance}_gidprefix=$prefix\" >> $TEMP\ndone\n\nprint_separator\necho \"The Fabric Manager includes a Performance Manager (PM) which can\"\necho \"monitor the data movement and error counters in all devices.\"\necho \"The PM monitors the counters periodically and computes the delta for counters.\"\necho \"If the PM Sweep Interval is set to 0, no automatic sweeps occur.\"\necho \"The PM SweepInterval must be >0 when using tools such as opatop.\"\nget_number \"PM Sweep Interval in seconds\" 10\necho \"  Setting Pm.SweepInterval to $ans\"\necho \"PM_0_SweepInterval=$ans\" >> $TEMP # sets for all instances\n\nif [ $ans -ne 0 ]\nthen\n\tprint_separator\n\techo \"When a port exceeds the threshold for Integrity, Security or Routing errors\"\n\techo \"a message is logged.\"\n\techo \"A Threshold can be configured to limit the number of such messages per sweep.\"\n\techo \"This Threshold can help to avoid excessive messages.\"\n\tget_number \"PM Error Threshold Exceeded Log Message Limit\" 10\n\techo \"  Setting ThresholdsExceededMsgLimit.Integrity to $ans\"\n\techo \"PM_0_ThresholdsExceededMsgLimit_Integrity=$ans\" >> $TEMP # sets for all instances\n\techo \"  Setting ThresholdsExceededMsgLimit.Security to $ans\"\n\techo \"PM_0_ThresholdsExceededMsgLimit_Security=$ans\" >> $TEMP # sets for all instances\n\techo \"  Setting ThresholdsExceededMsgLimit.Routing to $ans\"\n\techo \"PM_0_ThresholdsExceededMsgLimit_Routing=$ans\" >> $TEMP # sets for all instances\n\n\tprint_separator\n\techo \"The PM can retain some recent history in memory.\"\n  \techo \"This history can then be viewed in tools such as opatop.\"\n\techo \"For each historical sweep both the topology and performance data is retained.\"\n\techo \"Each such dataset is referred to as an Image\"\n\techo \"The values will be adjusted based on the number of concurrent PA clients expected.\"\n\tif [ \"$esm\" = y ]\n\tthen\n\t\tget_number \"How many concurrent clients are expected?\" 3 3 4\n\telse\n\t\tget_number \"How many concurrent clients are expected?\" 3 3 20\n\tfi\n\techo \"  Setting Pm.MaxClients to $ans\"\n\techo \"PM_0_MaxClients=$ans\" >> $TEMP # sets for all instances\n\n\t# FF must be >= MaxClients*2 -1\n\t# Total must be >= FF+2\n\tmin_ff=$(($ans * 2 -1))\n\tmin_tot=$((min_ff + 2))\n\tdef_tot=10\n\t[ $min_tot -gt $def_tot ] && def_tot=$min_tot\n\tif [ \"$esm\" = y ]\n\tthen\n\t\tget_number \"How many images should be retained?\" $def_tot $min_tot 10\n\telse\n\t\tget_number \"How many images should be retained?\" $def_tot $min_tot 100000\n\tfi\n\n\techo \"  Setting Pm.TotalImages to $ans\"\n\techo \"PM_0_TotalImages=$ans\" >> $TEMP # sets for all instances\n\n\t# pick a reasonable number of freeze frame images\n\tif [ \"$ans\" -le 10 ]\n\tthen\n\t\tff=$min_ff\t# base on MaxClients\n\telif [ \"$ans\" -lt 50 ]\n\tthen\n\t\tff=$(($ans / 2)) # have a reasonably large supply\n\t\t[ $ff -lt 8 ] && ff=8   # make sure 11-16 have as much as 10 images\n\telse\n\t\tff=25\n\tfi\n\t[ $ff -lt $min_ff ] && ff=$min_ff\n\tans=$ff\n\n\t# pick a reasonable number of freeze frame images\n\t#if [ \"$ans\" -le 10 ]\n\t#then\n\t#\tff=$(($ans -2))\t# allocate max allowed\n\t#elif [ \"$ans\" -lt 50 ]\n\t#then\n\t#\tff=$(($ans / 2)) # have a reasonably large supply\n\t#\t[ $ff -lt 8 ] && ff=8\t# make sure 11-16 have as much as 10 images\n\t#else\n\t#\tff=25\n\t#fi\n\t#ans=$ff\n\n\t#print_separator\n\t#echo \"Tools such as opatop freeze historical images when viewed and can\"\n\t#echo \"also bookmark images for later viewing during a session\".\n\t#echo \"Multiple concurrent opatop sessions could each have unique frozen images.\"\n\t#if [ \"$esm\" = y ]\n\t#then\n\t#\tget_number \"How many frozen/bookmarked images should be allowed\" 5 2 8\n\t#else\n\t#\tget_number \"How many frozen/bookmarked images should be allowed\" 5 2 99998\n\t#fi\n\techo \"  Setting Pm.FreezeFrameImages to $ans\"\n\techo \"PM_0_FreezeFrameImages=$ans\" >> $TEMP # sets for all instances\nfi\n\nprint_separator\n$tooldir/config_convert $TEMP $tooldir/opafm_src.xml > $dest_file\necho \"Generated $dest_file\"\nif [ \"$esm\" = y ]\nthen\n\techo \"To activate this configuration, $dest_file must be transfered to\"\n\techo \"the chassis and the FM must be restarted.\"\n\techo \"The fastfabric TUI provides an easy way to do this.\"\nelif [ \"$dest_file\" != \"/etc/sysconfig/opafm.xml\" ]\nthen\n\techo \"To activate this configuration, $dest_file must be copied to\"\n\techo \"/etc/sysconfig/opafm.xml and the FM must be restarted.\"\nelse\n\techo \"To activate this configuration, the FM must be restarted.\"\nfi\nrm -f $TEMP\n"], "fixing_code": ["#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n# copy a file to all hosts\n\ntemp=\"$(mktemp --tmpdir \"opascpall.XXXXXX\")\"\ntrap \"rm -f $temp; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $temp\" EXIT\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\n. /opt/opa/tools/ff_funcs\n\ntemp=`mktemp`\ntrap \"rm -f $temp\" 1 2 3 9 15\n\nUsage_full()\n{\n\techo \"Usage: opascpall [-p] [-r] [-f hostfile] [-h 'hosts'] [-u user] source_file ... dest_file\" >&2\n\techo \"       opascpall -t [-p] [-f hostfile] [-h 'hosts'] [-u user] [source_dir [dest_dir]]\" >&2\n\techo \"              or\" >&2\n\techo \"       opascpall --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -p - perform copy in parallel on all hosts\" >&2\n\techo \"   -r - recursive copy of directories\" >&2\n\techo \"   -t - optimized recursive copy of directories using tar\" >&2\n\techo \"        if dest_dir omitted, defaults to current directory name\" >&2\n\techo \"        if source_dir and dest_dir omitted, both default to current directory\" >&2\n\techo \"   -h hosts - list of hosts to copy to\" >&2\n\techo \"   -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"   -u user - user to perform copy to, default is current user code\" >&2\n\techo \"   source_file - list of source files to copy\" >&2\n\techo \"   source_dir - source directory to copy, if omitted . is used\" >&2\n\techo \"   dest_file - destination for copy.\" >&2\n\techo \"        If more than 1 source file, this must be a directory\" >&2\n\techo \"   dest_dir - destination for copy.  If omitted current directory name is used\" >&2\n\techo \" Environment:\" >&2\n\techo \"   HOSTS - list of hosts, used if -h option not supplied\" >&2\n\techo \"   HOSTS_FILE - file containing list of hosts, used in absence of -f and -h\" >&2\n\techo \"   FF_MAX_PARALLEL - when -p option is used, maximum concurrent operations\" >&2\n\techo \"example:\">&2\n\techo \"   opascpall MPI-PMB /root/MPI-PMB\" >&2\n\techo \"   opascpall -t -p /opt/opa/src/mpi_apps /opt/opa/src/mpi_apps\" >&2\n\techo \"   opascpall a b c /root/tools/\" >&2\n\techo \"   opascpall -h 'arwen elrond' a b c /root/tools\" >&2\n\techo \"   HOSTS='arwen elrond' opascpall a b c /root/tools\" >&2\n\techo \"user@ syntax cannot be used in filenames specified\" >&2\n\techo \"To copy from hosts in the cluster to this host, use opauploadall\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opascpall [-p] [-r] [-f hostfile] source_file ... dest_file\" >&2\n\techo \"       opascpall -t [-p] [-f hostfile] [source_dir [dest_dir]]\" >&2\n\techo \"              or\" >&2\n\techo \"       opascpall --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -p - perform copy in parallel on all hosts\" >&2\n\techo \"   -r - recursive copy of directories\" >&2\n\techo \"   -t - optimized recursive copy of directories using tar\" >&2\n\techo \"        if dest_dir omitted, defaults to current directory name\" >&2\n\techo \"        if source_dir and dest_dir omitted, both default to current directory\" >&2\n\techo \"   -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"   source_file - list of source files to copy\" >&2\n\techo \"   source_dir - source directory to copy, if omitted . is used\" >&2\n\techo \"   dest_file - destination for copy.\" >&2\n\techo \"        If more than 1 source file, this must be a directory\" >&2\n\techo \"   dest_dir - destination for copy.  If omitted current directory name is used\" >&2\n\techo \"example:\">&2\n\techo \"   opascpall MPI-PMB /root/MPI-PMB\" >&2\n\techo \"   opascpall -t -p /opt/opa/src/mpi_apps /opt/opa/src/mpi_apps\" >&2\n\techo \"   opascpall a b c /root/tools/\" >&2\n\techo \"user@ syntax cannot be used in filenames specified\" >&2\n\techo \"To copy from hosts in the cluster to this host, use opauploadall\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nuser=`id -u -n`\nopts=\ntopt=n\npopt=n\nwhile getopts f:h:u:prt param\ndo\n\tcase $param in\n\th)\n\t\tHOSTS=\"$OPTARG\";;\n\tf)\n\t\tHOSTS_FILE=\"$OPTARG\";;\n\tu)\n\t\tuser=\"$OPTARG\";;\n\tp)\n\t\topts=\"$opts -q\"\n\t\tpopt=y;;\n\tr)\n\t\topts=\"$opts -r\";;\n\tt)\n\t\ttopt=y;;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\nif [ \"$topt\" = \"n\" -a $# -lt 2 ]\nthen\n\tUsage\nfi\nif [ \"$topt\" = \"y\" -a $# -gt 2 ]\nthen\n\tUsage\nfi\ncheck_host_args opascpall\n\nif [ \"$topt\" = \"n\" ]\nthen\n\t# remove last name from the list\n\tfiles=\n\tdest=\n\tfor file in \"$@\"\n\tdo\n\t\tif [ ! -z \"$dest\" ]\n\t\tthen\n\t\t\tfiles=\"$files $dest\"\n\t\tfi\n\t\tdest=\"$file\"\n\tdone\n\t\t\n\trunning=0\n\tfor hostname in $HOSTS\n\tdo\n\t\tif [ \"$popt\" = \"y\" ]\n\t\tthen\n\t\t\tif [ $running -ge $FF_MAX_PARALLEL ]\n\t\t\tthen\n\t\t\t\twait\n\t\t\t\trunning=0\n\t\t\tfi\n\t\t\techo \"scp $opts $files $user@[$hostname]:$dest\"\n\t\t\tscp $opts $files $user@\\[$hostname\\]:$dest &\n\t\t\trunning=$(( $running + 1))\n\t\telse\n\t\t\techo \"scp $opts $files $user@[$hostname]:$dest\"\n\t\t\tscp $opts $files $user@\\[$hostname\\]:$dest\n\t\tfi\n\tdone\n\twait\nelse\n\tif [ $# -lt 2 ]\n\tthen\n\t\tdestdir=$PWD\n\telse\n\t\tdestdir=$2\n\tfi\n\tif [ $# -lt 1 ]\n\tthen\n\t\tsrcdir=$PWD\n\telse\n\t\tsrcdir=$1\n\tfi\n\tif [ ! -d $srcdir ]\n\tthen\n\t\techo \"opascpall: $srcdir: No such directory\" >&2\n\t\tUsage\n\tfi\n\tcd $srcdir\n\ttar cvfz $temp .\n\trunning=0\n\tfor hostname in $HOSTS\n\tdo\n\t\tif [ \"$popt\" = \"y\" ]\n\t\tthen\n\t\t\tif [ $running -ge $FF_MAX_PARALLEL ]\n\t\t\tthen\n\t\t\t\twait\n\t\t\t\trunning=0\n\t\t\tfi\n\t\t\t(\n\t\t\t\techo \"scp $opts $temp $user@[$hostname]:$temp\"\n\t\t\t\tscp $opts $temp $user@\\[$hostname\\]:$temp\n\t\t\t\techo \"$user@$hostname: mkdir -p $destdir; cd $destdir; tar xfz $temp; rm -f $temp\"\n\t\t\t\tssh $user@$hostname \"mkdir -p $destdir; cd $destdir; tar xfz $temp; rm -f $temp\"\n\t\t\t) &\n\t\t\trunning=$(( $running + 1))\n\t\telse\n\t\t\techo \"scp $opts $temp $user@[$hostname]:$temp\"\n\t\t\tscp $opts $temp $user@\\[$hostname\\]:$temp\n\t\t\techo \"$user@$hostname: mkdir -p $destdir; cd $destdir; tar xfz $temp; rm -f $temp\"\n\t\t\tssh $user@$hostname \"mkdir -p $destdir; cd $destdir; tar xfz $temp; rm -f $temp\"\n\t\tfi\n\tdone\n\twait\n\trm -f $temp\nfi\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n# perform installation verification on hosts in a cluster\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\n. $TOOLSDIR/ff_funcs\n\nif [ x\"$FF_IPOIB_SUFFIX\" = xNONE ]\nthen\n\texport FF_IPOIB_SUFFIX=\"\"\nfi\n\ntemp=`mktemp`\ntrap \"rm -f $temp\" 1 2 3 9 15\n\n# identify how we are being run, affects valid options and usage\nmode=opatest\ncmd=`basename $0`\ncase $cmd in\nopahostadmin|opaswitchadmin|opachassisadmin) mode=$cmd;;\nesac\n\nUsage_opatest_full()\n{\n\techo \"Usage: opatest [-cCn] [-i ipoib_suffix] [-f hostfile] [-F chassisfile]\" >&2\n\techo \"              [-h 'hosts'] [-H 'chassis'] [-N 'nodes'] [-L nodefile]\" >&2\n\techo \"              [-r release] [-I install_options] [-U upgrade_options] [-d dir]\" >&2\n\techo \"              [-T product] [-P packages] [-m netmask] [-a action] [-S] [-O]\" >&2\n\techo \"              [-t portsfile] [-p ports] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opatest --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -C - perform operation against chassis, default is hosts\" >&2\n\techo \"  -n - perform operation against IB node, default is hosts\" >&2\n\techo \"  -i ipoib_suffix - suffix to apply to host names to create ipoib host names\" >&2\n\techo \"         default is '$FF_IPOIB_SUFFIX'\" >&2\n\techo \"  -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"  -F chassisfile - file with chassis in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/chassis\" >&2\n\techo \"  -h hosts - list of hosts to execute operation against\" >&2\n\techo \"  -H chassis - list of chassis to execute operation against\" >&2\n\techo \"  -N nodes - list of IB nodes to execute operation against\" >&2\n\techo \"  -L nodefile - file with IB nodes in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/switches\" >&2\n\techo \"  -r release - IntelOPA release to load/upgrade to, default is $FF_PRODUCT_VERSION\" >&2\n\techo \"  -d dir - directory to get product.release.tgz from for load/upgrade\" >&2\n\techo \"           to upload FM config files to for fmgetconfig (default is uploads)\" >&2\n\techo \"           to upload capture files to for capture (default is uploads)\" >&2\n\techo \"  -I install_options - IntelOPA install options\" >&2\n\techo \"              or for Chassis fmconfig and fmcontrol:\" >&2\n\techo \"                 disable - disable FM start at chassis boot\" >&2\n\techo \"                 enable - enable FM start on master at chassis boot\" >&2\n\techo \"                 enableall - enable FM start on all MM at chassis boot\" >&2\n\techo \"  -U upgrade_options - IntelOPA upgrade options\" >&2\n\techo \"  -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"           fabric(s) for switch access, default is /etc/sysconfig/opa/ports\" >&2\n\techo \"  -p ports - list of local HFI ports used to access fabric(s) for switch access\" >&2\n\techo \"           default is 1st active port\" >&2\n\techo \"           This is specified as hfi:port\" >&2\n\techo \"              0:0 = 1st active port in system\" >&2\n\techo \"              0:y = port y within system\" >&2\n\techo \"              x:0 = 1st active port on HFI x\" >&2\n\techo \"              x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"  -T product - IntelOPA product type to install, default is $FF_PRODUCT\" >&2\n\techo \"           Other options include: IntelOPA-Basic, InfiniServBasic, InfiniServPerf, InfiniServMgmt, InfiniServTools, etc\" >&2\n\techo \"  -P packages - IntelOPA packages to install, default is 'iba ipoib mpi'\" >&2\n\techo -n \"                Host allows:\" >&2\n\t/sbin/opaconfig -C >&2\n\techo \"                or for Chassis upgrade, filenames/directories of firmware\" >&2\n\techo \"                   images to install.  For directories specified, all\" >&2\n\techo \"                   .pkg files in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for Chassis fmconfig, filename of FM config file to use\" >&2\n\techo \"                or for Chassis fmgetconfig, filename to upload to (default\" >&2\n\techo \"                   opafm.xml)\" >&2\n\techo \"                or for Switch upgrade, filename/directory of firmware\" >&2\n\techo \"                   image to install.  For directory specified,\" >&2\n\techo \"                   .emfw file in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for Switch capture, filename to upload to (default\" >&2\n\techo \"                   switchcapture)\" >&2\n\techo \"  -m netmask - IPoIB netmask to use for configipoib\" >&2\n\techo \"  -a action - action for supplied file\" >&2\n\techo \"              For Chassis/Switch upgrade:\" >&2\n\techo \"                 push   - ensure firmware is in primary or alternate\" >&2\n    echo \"                          (alternate only applicable to chassis)\" >&2\n\techo \"                 select - ensure firmware is in primary\" >&2\n\techo \"                 run    - ensure firmware is in primary and running\" >&2\n\techo \"                 default is push for chassis, select for switch\" >&2\n\techo \"              For Chassis fmconfig:\" >&2\n\techo \"                 push   - ensure config file is in chassis\" >&2\n\techo \"                 run    - after push, restart FM on master, stop on slave\" >&2\n\techo \"                 runall - after push, restart FM on all MM\" >&2\n\techo \"                 default is push\" >&2\n\techo \"              For Chassis fmcontrol:\" >&2\n\techo \"                 stop   - stop FM on all MM\" >&2\n\techo \"                 run    - make sure FM running on master, stopped on slave\" >&2\n\techo \"                 runall - make sure FM running on all MM\" >&2\n\techo \"                 restart- restart FM on master, stop on slave\" >&2\n\techo \"                 restartall- restart FM on all MM\" >&2\n\techo \"  -S - securely prompt for password for user on remote system/chassis\" >&2\n\techo \"  -O - override: for Switch upgrade, bypass version checks and force update unconditionally\" >&2\n\techo \"  operation - operation to perform.\" >&2\n\techo \"    Host Operation can be one or more of:\" >&2\n\techo \"     load - initial install of all hosts\" >&2\n\techo \"     upgrade - upgrade install of all hosts\" >&2\n\techo \"     configipoib - create ifcfg-ib1 using host IP addr from /etc/hosts\" >&2\n\techo \"     reboot - reboot hosts, ensure they go down and come back\" >&2\n\techo \"     sacache - confirm sacache has all hosts in it\" >&2\n\techo \"     ipoibping - verify this host can ping each host via IPoIB\" >&2\n\techo \"     mpiperf - verify latency and bandwidth for each host\" >&2\n\techo \"     mpiperfdeviation - check for latency and bandwidth tolerance deviation between hosts\" >&2\n\techo \"    Chassis Operation can be one or more of:\" >&2\n\techo \"     reboot - reboot chassis, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up chassis configuration\" >&2\n\techo \"     upgrade - upgrade install of all chassis\" >&2\n\techo \"     getconfig - gets basic configuration of chassis\" >&2\n\techo \"     fmconfig - FM config operation on all chassis\" >&2\n\techo \"     fmgetconfig - Fetch FM config from all chassis\" >&2\n\techo \"     fmcontrol - Control FM on all chassis\" >&2\n    echo \"    IB Node Operation can be one or more of:\" >&2\n    echo \"     reboot - reboot IB node, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up IB node configuration\" >&2\n    echo \"     upgrade - upgrade install of all IB nodes\" >&2\n    echo \"     info - report f/w & h/w version, part number, and data rate capability of all IB nodes\" >&2\n    echo \"     hwvpd - complete hardware VPD report of all IB nodes\" >&2\n    echo \"     ping - ping all IB nodes - test for presence\" >&2\n    echo \"     fwverify - report integrity of failsafe firmware of all IB nodes\" >&2\n\techo \"     capture - get switch hardware and firmware state capture of all IB nodes\" >&2\n\techo \"     getconfig - get port configurations of a externally managed switch\" >&2\n\techo \" Environment:\" >&2\n\techo \"   HOSTS - list of hosts, used if -h option not supplied\" >&2\n\techo \"   CHASSIS - list of chassis, used if -C used and -H and -F option not supplied\" >&2\n\techo \"   OPASWITCHES - list of nodes, used if -n used and -N and -L option not supplied\" >&2\n\techo \"   HOSTS_FILE - file containing list of hosts, used in absence of -f and -h\" >&2\n\techo \"   CHASSIS_FILE - file containing list of chassis, used in absence of -F and -H\" >&2\n\techo \"   OPASWITCHES_FILE - file containing list of nodes, used in absence of -N and -L\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"   FF_SERIALIZE_OUTPUT - serialize output of parallel operations (yes or no)\" >&2\n\techo \"   UPLOADS_DIR - directory to upload to, used in absence of -d\" >&2\n\techo \"for example:\" >&2\n\techo \"   opatest -c reboot\" >&2\n\techo \"   opatest upgrade\" >&2\n\techo \"   opatest -h 'elrond arwen' reboot\" >&2\n\techo \"   HOSTS='elrond arwen' opatest reboot\" >&2\n\techo \"   opatest -C -a run -P '*.pkg' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 0\n}\nUsage_opahostadmin_full()\n{\n\techo \"Usage: opahostadmin [-c] [-i ipoib_suffix] [-f hostfile] [-h 'hosts'] \" >&2\n\techo \"              [-r release] [-I install_options] [-U upgrade_options] [-d dir]\" >&2\n\techo \"              [-T product] [-P packages] [-m netmask] [-S] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opahostadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -i ipoib_suffix - suffix to apply to host names to create ipoib host names\" >&2\n\techo \"         default is '$FF_IPOIB_SUFFIX'\" >&2\n\techo \"  -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"  -h hosts - list of hosts to execute operation against\" >&2\n\techo \"  -r release - IntelOPA release to load/upgrade to, default is $FF_PRODUCT_VERSION\" >&2\n\techo \"  -d dir - directory to get product.release.tgz from for load/upgrade\" >&2\n\techo \"  -I install_options - IntelOPA install options\" >&2\n\techo \"  -U upgrade_options - IntelOPA upgrade options\" >&2\n\techo \"  -T product - IntelOPA product type to install, default is $FF_PRODUCT\" >&2\n\techo \"           Other options include: IntelOPA-Basic, InfiniServBasic, InfiniServPerf, InfiniServMgmt, InfiniServTools, etc\" >&2\n\techo \"  -P packages - IntelOPA packages to install, default is 'iba ipoib mpi'\" >&2\n\techo -n \"                Host allows:\" >&2\n\t/sbin/opaconfig -C >&2\n\techo \"  -m netmask - IPoIB netmask to use for configipoib\" >&2\n\techo \"  -S - securely prompt for password for user on remote system\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n\techo \"     load - initial install of all hosts\" >&2\n\techo \"     upgrade - upgrade install of all hosts\" >&2\n\techo \"     configipoib - create ifcfg-ib1 using host IP addr from /etc/hosts\" >&2\n\techo \"     reboot - reboot hosts, ensure they go down and come back\" >&2\n\techo \"     sacache - confirm sacache has all hosts in it\" >&2\n\techo \"     ipoibping - verify this host can ping each host via IPoIB\" >&2\n\techo \"     mpiperf - verify latency and bandwitch for each host\" >&2\n\techo \"     mpiperfdeviation - check for latency and bandwidth tolerance deviation between hosts\" >&2\n\techo \" Environment:\" >&2\n\techo \"   HOSTS - list of hosts, used if -h option not supplied\" >&2\n\techo \"   HOSTS_FILE - file containing list of hosts, used in absence of -f and -h\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"   FF_SERIALIZE_OUTPUT - serialize output of parallel operations (yes or no)\" >&2\n\techo \"for example:\" >&2\n\techo \"   opahostadmin -c reboot\" >&2\n\techo \"   opahostadmin upgrade\" >&2\n\techo \"   opahostadmin -h 'elrond arwen' reboot\" >&2\n\techo \"   HOSTS='elrond arwen' opahostadmin reboot\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 0\n}\nUsage_opachassisadmin_full()\n{\n\techo \"Usage: opachassisadmin [-c] [-F chassisfile] [-H 'chassis'] \" >&2\n\techo \"              [-P packages] [-a action] [-I fm_bootstate]\" >&2\n    echo \"              [-S] [-d upload_dir] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opachassisadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -F chassisfile - file with chassis in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/chassis\" >&2\n\techo \"  -H chassis - list of chassis to execute operation against\" >&2\n\techo \"  -P packages - filenames/directories of firmware\" >&2\n\techo \"                   images to install.  For directories specified, all\" >&2\n\techo \"                   .pkg files in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for fmconfig, filename of FM config file to use\" >&2\n\techo \"                or for fmgetconfig, filename to upload to (default\" >&2\n\techo \"                   opafm.xml)\" >&2\n\techo \"  -a action - action for supplied file\" >&2\n\techo \"              For Chassis upgrade:\" >&2\n\techo \"                 push   - ensure firmware is in primary or alternate\" >&2\n\techo \"                 select - ensure firmware is in primary\" >&2\n\techo \"                 run    - ensure firmware is in primary and running\" >&2\n\techo \"                 default is push\" >&2\n\techo \"              For Chassis fmconfig:\" >&2\n\techo \"                 push   - ensure config file is in chassis\" >&2\n\techo \"                 run    - after push, restart FM on master, stop on slave\" >&2\n\techo \"                 runall - after push, restart FM on all MM\" >&2\n\techo \"              For Chassis fmcontrol:\" >&2\n\techo \"                 stop   - stop FM on all MM\" >&2\n\techo \"                 run    - make sure FM running on master, stopped on slave\" >&2\n\techo \"                 runall - make sure FM running on all MM\" >&2\n\techo \"                 restart- restart FM on master, stop on slave\" >&2\n\techo \"                 restartall- restart FM on all MM\" >&2\n\techo \"  -I fm_bootstate fmconfig and fmcontrol install options\" >&2\n\techo \"                 disable - disable FM start at chassis boot\" >&2\n\techo \"                 enable - enable FM start on master at chassis boot\" >&2\n\techo \"                 enableall - enable FM start on all MM at chassis boot\" >&2\n\techo \"  -d upload_dir - directory to upload FM config files to, default is uploads\" >&2\n\techo \"  -S - securely prompt for password for admin on chassis\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n\techo \"     reboot - reboot chassis, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up chassis configuration\" >&2\n\techo \"     upgrade - upgrade install of all chassis\" >&2\n\techo \"     getconfig - get basic configuration of chassis\" >&2\n\techo \"     fmconfig - FM config operation on all chassis\" >&2\n\techo \"     fmgetconfig - Fetch FM config from all chassis\" >&2\n\techo \"     fmcontrol - Control FM on all chassis\" >&2\n\techo \" Environment:\" >&2\n\techo \"   CHASSIS - list of chassis, used if -H and -F option not supplied\" >&2\n\techo \"   CHASSIS_FILE - file containing list of chassis, used in absence of -F and -H\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"   FF_SERIALIZE_OUTPUT - serialize output of parallel operations (yes or no)\" >&2\n\techo \"   UPLOADS_DIR - directory to upload to, used in absence of -d\" >&2\n\techo \"for example:\" >&2\n\techo \"   opachassisadmin -c reboot\" >&2\n\techo \"   opachassisadmin -P /root/ChassisFw4.2.0.0.1 upgrade\" >&2\n\techo \"   opachassisadmin -H 'chassis1 chassis2' reboot\" >&2\n\techo \"   CHASSIS='chassis1 chassis2' opachassisadmin reboot\" >&2\n\techo \"   opachassisadmin -a run -P '*.pkg' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 0\n}\nUsage_opaswitchadmin_full()\n{\n\techo \"Usage: opaswitchadmin [-c] [-N 'nodes'] [-L nodefile] [-d upload_dir]\" >&2\n\techo \"              [-O] [-P packages] [-a action]\" >&2\n\techo \"              [-t portsfile] [-p ports] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opaswitchadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -N nodes - list of IB nodes to execute operation against\" >&2\n\techo \"  -L nodefile - file with IB nodes in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/switches\" >&2\n\techo \"  -d upload_dir - directory to upload capture files to for capture\" >&2\n\techo \"                  (default is uploads)\" >&2\n\techo \"  -P packages - for upgrade, filename/directory of firmware\" >&2\n\techo \"                   image to install.  For directory specified,\" >&2\n\techo \"                   .emfw file in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for capture, filename to upload to (default switchcapture)\" >&2\n\techo \"  -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"           fabric(s) for switch access, default is /etc/sysconfig/opa/ports\" >&2\n\techo \"  -p ports - list of local HFI ports used to access fabric(s) for switch access\" >&2\n\techo \"           default is 1st active port\" >&2\n\techo \"           This is specified as hfi:port\" >&2\n\techo \"              0:0 = 1st active port in system\" >&2\n\techo \"              0:y = port y within system\" >&2\n\techo \"              x:0 = 1st active port on HFI x\" >&2\n\techo \"              x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"  -a action - action for firmware file for Switch upgrade\" >&2\n\techo \"              select - ensure firmware is in primary\" >&2\n\techo \"              run    - ensure firmware is in primary and running\" >&2\n\techo \"              default is select\" >&2\n\techo \"  -O - override: for firmware upgrade, bypass version checks and force update unconditionally\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n   echo \"     reboot - reboot switches, ensure they go down and come back\" >&2\n   echo \"     configure - run wizard to set up switch configuration\" >&2\n   echo \"     upgrade - upgrade install of all switches\" >&2\n   echo \"     info - report f/w & h/w version, part number, and data rate capability of all IB nodes\" >&2\n   echo \"     hwvpd - complete hardware VPD report of all IB nodes\" >&2\n   echo \"     ping - ping all IB nodes - test for presence\" >&2\n   echo \"     fwverify - report integrity of failsafe firmware of all IB nodes\" >&2\n   echo \"     capture - get switch hardware and firmware state capture of all IB nodes\" >&2\n   echo \"     getconfig - get port configurations of a externally managed switch\" >&2\n\techo \" Environment:\" >&2\n\techo \"   OPASWITCHES - list of nodes, used if -N and -L option not supplied\" >&2\n\techo \"   OPASWITCHES_FILE - file containing list of nodes, used in absence of -N and -L\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"   FF_SERIALIZE_OUTPUT - serialize output of parallel operations (yes or no)\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaswitchadmin -c reboot\" >&2\n\techo \"   opaswitchadmin -P /root/ChassisFw4.2.0.0.1 upgrade\" >&2\n\techo \"   opaswitchadmin -a run -P '*.emfw' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 0\n}\nUsage_full()\n{\n\tcase $mode in\n\topatest) Usage_opatest_full;;\n\topahostadmin) Usage_opahostadmin_full;;\n\topachassisadmin) Usage_opachassisadmin_full;;\n\topaswitchadmin) Usage_opaswitchadmin_full;;\n\tesac\n}\nUsage_opatest()\n{\n\techo \"Usage: opatest [-cCn] [-f hostfile] [-F chassisfile] [-L nodefile]\" >&2\n\techo \"              [-r release] [-d dir]\" >&2\n\techo \"              [-T product] [-P packages] [-a action] [-S] [-O] [-d upload_dir] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opatest --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -C - perform operation against chassis, default is hosts\" >&2\n\techo \"  -n - perform operation against IB node, default is hosts\" >&2\n\techo \"  -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"  -F chassisfile - file with chassis in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/chassis\" >&2\n\techo \"  -L nodefile - file with IB nodes in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/switches\" >&2\n\techo \"  -r release - IntelOPA release to load/upgrade to, default is $FF_PRODUCT_VERSION\" >&2\n\techo \"  -d dir - directory to get product.release.tgz from for load/upgrade\" >&2\n\techo \"           to upload FM config files to for fmgetconfig (default is uploads)\" >&2\n\techo \"           to upload capture files to for capture (default is uploads)\" >&2\n\techo \"  -T product - IntelOPA product type to install, default is $FF_PRODUCT\" >&2\n\techo \"           Other options include: IntelOPA-Basic, InfiniServBasic, InfiniServPerf, InfiniServMgmt, InfiniServTools, etc\" >&2\n\techo \"  -P packages - IntelOPA packages to install, default is 'iba ipoib mpi'\" >&2\n\techo -n \"                Host allows:\" >&2\n\t/sbin/opaconfig -C >&2\n\techo \"                or for Chassis upgrade, filenames/directories of firmware\" >&2\n\techo \"                   images to install.  For directories specified, all\" >&2\n\techo \"                   .pkg files in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for Chassis fmconfig, filename of FM config file to use\" >&2\n\techo \"                or for Chassis fmgetconfig, filename to upload to (default\" >&2\n\techo \"                   opafm.xml)\" >&2\n\techo \"                or for Switch upgrade, filename/directory of firmware\" >&2\n\techo \"                   image to install.  For directory specified,\" >&2\n\techo \"                   .emfw file in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for Switch capture, filename to upload to (default\" >&2\n\techo \"                   switchcapture)\" >&2\n\techo \"  -a action - action for supplied file\" >&2\n\techo \"              For Chassis/Switch upgrade:\" >&2\n\techo \"                 push   - ensure firmware is in primary or alternate\" >&2\n    echo \"                          (alternate only applicable to chassis)\" >&2\n\techo \"                 select - ensure firmware is in primary\" >&2\n\techo \"                 run    - ensure firmware is in primary and running\" >&2\n\techo \"                 default is push for chassis, select for switch\" >&2\n\techo \"              For Chassis fmconfig:\" >&2\n\techo \"                 push   - ensure config file is in chassis\" >&2\n\techo \"                 run    - after push, restart FM on master, stop on slave\" >&2\n\techo \"                 runall - after push, restart FM on all MM\" >&2\n\techo \"              For Chassis fmcontrol:\" >&2\n\techo \"                 stop   - stop FM on all MM\" >&2\n\techo \"                 run    - make sure FM running on master, stopped on slave\" >&2\n\techo \"                 runall - make sure FM running on all MM\" >&2\n\techo \"                 restart- restart FM on master, stop on slave\" >&2\n\techo \"                 restartall- restart FM on all MM\" >&2\n\techo \"  -S - securely prompt for password for user on remote system/chassis\" >&2\n\techo \"  -O - override: for Switch upgrade, bypass version checks and force update unconditionally\" >&2\n\techo \"  operation - operation to perform.\" >&2\n\techo \"    Host Operation can be one or more of:\" >&2\n\techo \"     load - initial install of all hosts\" >&2\n\techo \"     upgrade - upgrade install of all hosts\" >&2\n\techo \"     configipoib - create ifcfg-ib1 using host IP addr from /etc/hosts\" >&2\n\techo \"     reboot - reboot hosts, ensure they go down and come back\" >&2\n\techo \"     sacache - confirm sacache has all hosts in it\" >&2\n\techo \"     ipoibping - verify this host can ping each host via IPoIB\" >&2\n\techo \"     mpiperf - verify latency and bandwitch for each host\" >&2\n\techo \"     mpiperfdeviation - check for latency and bandwidth tolerance deviation between hosts\" >&2\n\techo \"    Chassis Operation can be one or more of:\" >&2\n\techo \"     reboot - reboot chassis, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up chassis configuration\" >&2\n\techo \"     upgrade - upgrade install of all chassis\" >&2\n\techo \"     getconfig - get basic configuration of chassis\" >&2\n\techo \"     fmconfig - FM config operation on all chassis\" >&2\n\techo \"     fmgetconfig - Fetch FM config from all chassis\" >&2\n\techo \"     fmcontrol - Control FM on all chassis\" >&2\n   echo \"    IB Node Operation can be one or more of:\" >&2\n   echo \"     reboot - reboot IB nodes, ensure they go down and come back\" >&2\n   echo \"     configure - run wizard to set up IB node configuration\" >&2\n   echo \"     upgrade - upgrade install of all IB nodes\" >&2\n   echo \"     info - report f/w & h/w version, part number, and data rate capability of all IB nodes\" >&2\n   echo \"     hwvpd - complete hardware VPD report of all IB nodes\" >&2\n   echo \"     ping - ping all IB nodes - test for presence\" >&2\n   echo \"     fwverify - report integrity of failsafe firmware of all IB nodes\" >&2\n   echo \"     capture - get switch hardware and firmware state capture of all IB nodes\" >&2\n   echo \"     getconfig - get port configurations of a externally managed switch\" >&2\n\techo \"for example:\" >&2\n\techo \"   opatest -c reboot\" >&2\n\techo \"   opatest upgrade\" >&2\n\techo \"   opatest -C -a run -P '*.pkg' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed test with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while test is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 2\n}\nUsage_opahostadmin()\n{\n\techo \"Usage: opahostadmin [-c] [-f hostfile] [-r release] [-d dir]\" >&2\n\techo \"              [-T product] [-P packages] [-S] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opahostadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -f hostfile - file with hosts in cluster, default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"  -r release - IntelOPA release to load/upgrade to, default is $FF_PRODUCT_VERSION\" >&2\n\techo \"  -d dir - directory to get product.release.tgz from for load/upgrade\" >&2\n\techo \"  -T product - IntelOPA product type to install, default is $FF_PRODUCT\" >&2\n\techo \"           Other options include: IntelOPA-Basic, InfiniServBasic, InfiniServPerf, InfiniServMgmt, InfiniServTools, etc\" >&2\n\techo \"  -P packages - IntelOPA packages to install, default is 'iba ipoib mpi'\" >&2\n\techo -n \"                Host allows:\" >&2\n\t/sbin/opaconfig -C >&2\n\techo \"  -S - securely prompt for password for user on remote system\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n\techo \"     load - initial install of all hosts\" >&2\n\techo \"     upgrade - upgrade install of all hosts\" >&2\n\techo \"     configipoib - create ifcfg-ib1 using host IP addr from /etc/hosts\" >&2\n\techo \"     reboot - reboot hosts, ensure they go down and come back\" >&2\n\techo \"     sacache - confirm sacache has all hosts in it\" >&2\n\techo \"     ipoibping - verify this host can ping each host via IPoIB\" >&2\n\techo \"     mpiperf - verify latency and bandwitch for each host\" >&2\n\techo \"     mpiperfdeviation - check for latency and bandwidth tolerance deviation between hosts\" >&2\n\techo \"for example:\" >&2\n\techo \"   opahostadmin  -c reboot\" >&2\n\techo \"   opahostadmin  upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed test with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while test is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 2\n}\nUsage_opachassisadmin()\n{\n\techo \"Usage: opachassisadmin [-c] [-F chassisfile] \" >&2\n\techo \"              [-P packages] [-I fm_bootstate] [-a action]\" >&2\n    echo \"              [-S] [-d upload_dir] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opachassisadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -F chassisfile - file with chassis in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/chassis\" >&2\n\techo \"  -P packages - filenames/directories of firmware\" >&2\n\techo \"                   images to install.  For directories specified, all\" >&2\n\techo \"                   .pkg files in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for fmconfig, filename of FM config file to use\" >&2\n\techo \"                or for fmgetconfig, filename to upload to (default\" >&2\n\techo \"                   opafm.xml)\" >&2\n\techo \"  -a action - action for supplied file\" >&2\n\techo \"              For Chassis upgrade:\" >&2\n\techo \"                 push   - ensure firmware is in primary or alternate\" >&2\n\techo \"                 select - ensure firmware is in primary\" >&2\n\techo \"                 run    - ensure firmware is in primary and running\" >&2\n\techo \"                 default is push\" >&2\n\techo \"              For Chassis fmconfig:\" >&2\n\techo \"                 push   - ensure config file is in chassis\" >&2\n\techo \"                 run    - after push, restart FM on master, stop on slave\" >&2\n\techo \"                 runall - after push, restart FM on all MM\" >&2\n\techo \"              For Chassis fmcontrol:\" >&2\n\techo \"                 stop   - stop FM on all MM\" >&2\n\techo \"                 run    - make sure FM running on master, stopped on slave\" >&2\n\techo \"                 runall - make sure FM running on all MM\" >&2\n\techo \"                 restart- restart FM on master, stop on slave\" >&2\n\techo \"                 restartall- restart FM on all MM\" >&2\n\techo \"  -I fm_bootstate fmconfig and fmcontrol install options\" >&2\n\techo \"                 disable - disable FM start at chassis boot\" >&2\n\techo \"                 enable - enable FM start on master at chassis boot\" >&2\n\techo \"                 enableall - enable FM start on all MM at chassis boot\" >&2\n\techo \"  -d upload_dir - directory to upload FM config files to, default is uploads\" >&2\n\techo \"  -S - securely prompt for password for admin on chassis\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n\techo \"     reboot - reboot chassis, ensure they go down and come back\" >&2\n\techo \"     configure - run wizard to set up chassis configuration\" >&2\n\techo \"     upgrade - upgrade install of all chassis\" >&2\n\techo \"     getconfig - get basic configuration of chassis\" >&2\n\techo \"     fmconfig - FM config operation on all chassis\" >&2\n\techo \"     fmgetconfig - Fetch FM config from all chassis\" >&2\n\techo \"     fmcontrol - Control FM on all chassis\" >&2\n\techo \"for example:\" >&2\n\techo \"   opachassisadmin -c reboot\" >&2\n\techo \"   opachassisadmin -P /root/ChassisFw4.2.0.0.1 upgrade\" >&2\n\techo \"   opachassisadmin -a run -P '*.pkg' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 2\n}\nUsage_opaswitchadmin()\n{\n\techo \"Usage: opaswitchadmin [-c] [-L nodefile] [-d upload_dir] [-O] [-P packages]\" >&2\n\techo \"                        [-a action] operation ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opaswitchadmin --help\" >&2\n\techo \"  --help - produce full help text\" >&2\n\techo \"  -c - clobber result files from any previous run before starting this run\" >&2\n\techo \"  -L nodefile - file with IB nodes in cluster\" >&2\n\techo \"           default is $CONFIG_DIR/opa/switches\" >&2\n\techo \"  -d upload_dir - directory to upload capture files to for capture\" >&2\n\techo \"                  (default is uploads)\" >&2\n\techo \"  -P packages - for upgrade, filename/directory of firmware\" >&2\n\techo \"                   image to install.  For directory specified,\" >&2\n\techo \"                   .emfw file in directory tree will be used.\" >&2\n\techo \"                   shell wildcards may also be used within quotes.\" >&2\n\techo \"                or for capture, filename to upload to (default switchcapture)\" >&2\n\techo \"  -a action - action for firmware file for Switch upgrade\" >&2\n\techo \"              select - ensure firmware is in primary\" >&2\n\techo \"              run    - ensure firmware is in primary and running\" >&2\n\techo \"              default is select\" >&2\n\techo \"  -O - override: for firmware upgrade, bypass version checks and force update unconditionally\" >&2\n\techo \"  operation - operation to perform. operation can be one or more of:\" >&2\n   echo \"     reboot - reboot switches, ensure they go down and come back\" >&2\n   echo \"     configure - run wizard to set up switch configuration\" >&2\n   echo \"     upgrade - upgrade install of all switches\" >&2\n   echo \"     info - report f/w & h/w version, part number, and data rate capability of all IB nodes\" >&2\n   echo \"     hwvpd - complete hardware VPD report of all IB nodes\" >&2\n   echo \"     ping - ping all IB nodes - test for presence\" >&2\n   echo \"     fwverify - report integrity of failsafe firmware of all IB nodes\" >&2\n   echo \"     capture - get switch hardware and firmware state capture of all IB nodes\" >&2\n   echo \"     getconfig - get port configurations of a externally managed switch\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaswitchadmin -c reboot\" >&2\n\techo \"   opaswitchadmin -P /root/ChassisFw4.2.0.0.1 upgrade\" >&2\n\techo \"   opaswitchadmin -a run -P '*.emfw' upgrade\" >&2\n\techo \"During run the following files are produced:\" >&2\n\techo \"  test.res - appended with summary results of run\" >&2\n\techo \"  test.log - appended with detailed results of run\" >&2\n\techo \"  save_tmp/ - contains a directory per failed operation with detailed logs\" >&2\n\techo \"  test_tmp*/ - intermediate result files while operation is running\" >&2\n\techo \"-c option will remove all of the above\" >&2\n   # remove temporary work directory\n   rm -rf $temp\n\texit 2\n}\nUsage()\n{\n\tcase $mode in\n\topatest) Usage_opatest;;\n\topahostadmin) Usage_opahostadmin;;\n\topachassisadmin) Usage_opachassisadmin;;\n\topaswitchadmin) Usage_opaswitchadmin;;\n\tesac\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\n# default to install wrapper version\nif [ -e /etc/sysconfig/opa/version_wrapper ]\nthen\n\tCFG_RELEASE=`cat /etc/sysconfig/opa/version_wrapper 2>/dev/null`;\nfi\nif [ x\"$CFG_RELEASE\" = x ]\nthen\n# if no wrapper, use version of FF itself as filled in at build time\n# version string is filled in by prep, special marker format for it to use\nCFG_RELEASE=\"THIS_IS_THE_ICS_VERSION_NUMBER:@(#)000.000.000.000B000\"\nfi\nexport CFG_RELEASE=`echo $CFG_RELEASE|sed -e 's/THIS_IS_THE_ICS_VERSION_NUMBER:@(#.//' -e 's/%.*//'`\n# THIS_IS_THE_ICS_INTERNAL_VERSION_NUMBER:@(#)000.000.000.000B000\n# test automation configuration defaults\nexport CFG_INIC_SUFFIX=\nexport CFG_IPOIB_SUFFIX=\"$FF_IPOIB_SUFFIX\"\nexport CFG_USERNAME=\"$FF_USERNAME\"\nexport CFG_PASSWORD=\"$FF_PASSWORD\"\nexport CFG_ROOTPASS=\"$FF_ROOTPASS\"\nexport CFG_LOGIN_METHOD=\"$FF_LOGIN_METHOD\"\nexport CFG_CHASSIS_LOGIN_METHOD=\"$FF_CHASSIS_LOGIN_METHOD\"\nexport CFG_CHASSIS_ADMIN_PASSWORD=\"$FF_CHASSIS_ADMIN_PASSWORD\"\nexport CFG_FAILOVER=\"n\"\nexport CFG_FTP_SERVER=\"\"\nexport CFG_IPOIB=\"y\"\nexport CFG_IPOIB_MTU=\"2030\"\nexport CFG_IPOIB_COMBOS=TBD\nexport CFG_INIC=n\nexport CFG_SDP=n\nexport CFG_SRP=n\nexport CFG_MPI=y\nexport CFG_UDAPL=n\nexport TEST_TIMEOUT_MULT=\"$FF_TIMEOUT_MULT\"\nexport TEST_RESULT_DIR=\"$FF_RESULT_DIR\"\nexport TEST_MAX_PARALLEL=\"$FF_MAX_PARALLEL\"\nexport TEST_CONFIG_FILE=\"/dev/null\"\nexport TL_DIR=/opt/opa/tools\nexport TEST_IDENTIFY=no\nexport TEST_SHOW_CONFIG=no\nexport TEST_SHOW_START=yes\nexport CFG_PRODUCT=\"${FF_PRODUCT:-IntelOPA-Basic}\"\nexport CFG_INSTALL_OPTIONS=\"$FF_INSTALL_OPTIONS\"\nexport CFG_UPGRADE_OPTIONS=\"$FF_UPGRADE_OPTIONS\"\nexport CFG_IPOIB_NETMASK=\"$FF_IPOIB_NETMASK\"\nexport CFG_IPOIB_CONNECTED=\"$FF_IPOIB_CONNECTED\"\nexport CFG_MPI_ENV=\"$FF_MPI_ENV\"\nexport TEST_SERIALIZE_OUTPUT=\"$FF_SERIALIZE_OUTPUT\"\n\nclobber=n\nhost=0\nchassis=0\nopaswitch=0\ndir=.\npackages=\"notsupplied\"\naction=default\nSopt=n\nsopt=n\nbypassSwitchCheck=n\nfwOverride=n\ncase $mode in\nopatest) options='a:BcCnd:h:H:f:F:i:r:I:U:P:T:m:p:t:L:N:S';;\nopahostadmin) host=1; options='cd:h:f:i:r:I:U:P:T:m:S';;\nopachassisadmin) chassis=1; options='a:I:cH:F:P:d:S';;\nopaswitchadmin) opaswitch=1; options='a:Bcd:P:p:t:L:N:O';;\nesac\nwhile getopts \"$options\"  param\ndo\n\tcase $param in\n\ta)\n\t\taction=\"$OPTARG\";;\n\tB)\n\t\tbypassSwitchCheck=y;;\n\tc)\n\t\tclobber=y;;\n\tC)\n\t\tchassis=1;;\n\td)\n\t\tdir=\"$OPTARG\"\n\t\texport UPLOADS_DIR=\"$dir\";;\n\th)\n\t\thost=1\n\t\tHOSTS=\"$OPTARG\";;\n\tH)\n\t\tchassis=1\n\t\tCHASSIS=\"$OPTARG\";;\n\tn)\n\t\topaswitch=1;;\n\tN)\n\t\topaswitch=1\n\t\tOPASWITCHES=\"$OPTARG\";;\n\tf)\n\t\thost=1\n\t\tHOSTS_FILE=\"$OPTARG\";;\n\tF)\n\t\tchassis=1\n\t\tCHASSIS_FILE=\"$OPTARG\";;\n\tL)\n\t\topaswitch=1\n\t\tOPASWITCHES_FILE=\"$OPTARG\";;\n\ti)\n\t\texport CFG_IPOIB_SUFFIX=\"$OPTARG\"\n\t\texport FF_IPOIB_SUFFIX=\"$OPTARG\";;\n\tr)\n\t\texport FF_PRODUCT_VERSION=\"$OPTARG\";;\n\tI)\n\t\texport CFG_INSTALL_OPTIONS=\"$OPTARG\";;\n\tU)\n\t\texport CFG_UPGRADE_OPTIONS=\"$OPTARG\";;\n\tP)\n\t\tpackages=\"$OPTARG\";;\n\tT)\n\t\texport CFG_PRODUCT=\"$OPTARG\";;\n\tm)\n\t\texport CFG_IPOIB_NETMASK=\"$OPTARG\";;\n\tp)\n\t\texport PORTS=\"$OPTARG\";;\n\tt)\n\t\texport PORTS_FILE=\"$OPTARG\";;\n\tS)\n\t\tSopt=y;;\n\tO)\n\t\tfwOverride=y;;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\nif [ $# -lt 1 ] \nthen\n\tUsage\nfi\nif [[ $(($chassis+$host+$opaswitch)) -gt 1 ]]\nthen\n\techo \"$cmd: conflicting arguments, more than one of host, chassis or opaswitches specified\" >&2\n\tUsage\nfi\nif [[ $(($chassis+$host+$opaswitch)) -eq 0 ]]\nthen\n\thost=1\nfi\nif [ ! -d \"$FF_RESULT_DIR\" ]\nthen\n\techo \"$cmd: Invalid FF_RESULT_DIR: $FF_RESULT_DIR: No such directory\" >&2\n\texit 1\nfi\nif [ $chassis -eq 1 ]\nthen\n\tcheck_chassis_args $cmd\n\tif [ \"$action\" = \"default\" ]\n\tthen\n\t\taction=push\n\tfi\n\tif [ \"$CFG_INSTALL_OPTIONS\" = \"$FF_INSTALL_OPTIONS\" ]\n\tthen\n\t\texport CFG_INSTALL_OPTIONS=\n\tfi\nelif [ $opaswitch -eq 1 ]\nthen\n\tcheck_ib_transport_args $cmd\n\tcheck_ports_args $cmd\n\tif [ \"$action\" = \"default\" ]\n\tthen\n\t\taction=select\n\tfi\nelse\n\tcheck_host_args $cmd\n\n\tif [ \"$packages\" = \"notsupplied\" ]\n\tthen\n\t\tpackages=\"$FF_PACKAGES\"\n\tfi\n\tif [ \"x$packages\" != \"x\" ]\n\tthen\n\t\tfor p in $packages\n\t\tdo\n\t\t\tCFG_INSTALL_OPTIONS=\"$CFG_INSTALL_OPTIONS -i $p\"\n\t\tdone\n\tfi\n\tif [ \"x$CFG_INSTALL_OPTIONS\" = \"x\" ]\n\tthen\n\t\tCFG_INSTALL_OPTIONS='-i iba -i ipoib -i mpi'\n\tfi\nfi\n\nexport CFG_HOSTS=\"$HOSTS\"\nexport CFG_CHASSIS=\"$CHASSIS\"\nexport CFG_OPASWITCHES=\"$OPASWITCHES\"\nexport CFG_PORTS=\"$PORTS\"\nexport CFG_MPI_PROCESSES=\"$HOSTS\"\n#export CFG_PERF_PAIRS=TBD\nexport CFG_SCPFROMDIR=\"$dir\"\nif [ x\"$FF_PRODUCT_VERSION\" != x ]\nthen\n\tCFG_RELEASE=\"$FF_PRODUCT_VERSION\"\nfi\n\n# use NONE so ff_function's inclusion of defaults works properly\nif [ x\"$FF_IPOIB_SUFFIX\" = x ]\nthen\n\texport FF_IPOIB_SUFFIX=\"NONE\"\n\texport CFG_IPOIB_SUFFIX=\"NONE\"\nfi\n\nif [ \"$clobber\" = \"y\" ]\nthen\n\t( cd $TEST_RESULT_DIR; rm -rf test.res save_tmp test.log test_tmp* *.dmp )\nfi\n\n# create an empty test.log file\n( cd $TEST_RESULT_DIR; >> test.log )\n\nrun_test()\n{\n\t# $1 = test suite name\n\tTCLLIBPATH=\"$TL_DIR /usr/lib/tcl\" expect -f $TL_DIR/$1.exp | tee -a $TEST_RESULT_DIR/test.res\n}\n\nif [ $chassis -eq 1 ]\nthen\n\tif [ \"$Sopt\" = y ]\n\tthen\n\t\techo -n \"Password for admin on all chassis: \" > /dev/tty\n\t\tstty -echo < /dev/tty > /dev/tty\n\t\tpassword=\n\t\tread password < /dev/tty\n\t\tstty echo < /dev/tty > /dev/tty\n\t\techo > /dev/tty\n\t\texport CFG_CHASSIS_ADMIN_PASSWORD=\"$password\"\n\tfi\n\tfor test_suite in $*\n\tdo\n\t\tcase $test_suite in\n\t\treboot)\n\t\t\trun_test chassis_$test_suite;;\n\t\tconfigure)\n\t\t\t$TOOLSDIR/chassis_setup $CFG_CHASSIS\n\t\t\tif [ $? = 0 ]\n\t\t\tthen\n\t\t\t\texport SYSLOG_SERVER=`grep \"Syslog Server IP_Address\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport SYSLOG_PORT=`grep \"Syslog Port\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport SYSLOG_FACILITY=`grep \"Syslog Facility\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport NTP_SERVER=`grep \"NTP Server\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport TZ_OFFSET=`grep \"Timezone offset\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport DST_START=`grep \"Start DST\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport DST_END=`grep \"End DST\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport LINKWIDTH_SETTING=`grep \"Link Width Selection\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport SET_NAME=`grep \"Set IB Node Desc\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\texport LINKCRCMODE=`grep \"Link CRC Mode\" .chassisSetup.out | cut -d : -f 2`\n\t\t\t\trun_test chassis_$test_suite\n\t\t\telse\n\t\t\t\techo \"Chassis setup wizard exited abnormally ... aborting\"\n\t\tfi;;\n\t\tgetconfig)\n\t\t\trun_test chassis_$test_suite;;\n\t\tupgrade)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: -P option required for chassis upgrade\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$action\" != \"push\" -a \"$action\" != \"select\" -a \"$action\" != \"run\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid firmware upgrade action: $action\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\t# check fw files exist, expand directories\n\t\t\tCFG_FWFILES=\"\"\n\t\t\tfor fwfile in $packages\n\t\t\tdo\n\t\t\t\t# expand directory, also filters files without .pkg suffix\n\t\t\t\t# this also expands wildcards in \"$packages\"\n\t\t\t\tfwfiles=`find $fwfile -type f -name '*.pkg'`\n\t\t\t\tif [ $? != 0 -o x\"$fwfiles\" == x ]\n\t\t\t\tthen\n\t\t\t\t\techo \"$cmd: $fwfile: No .pkg files found\" >&2\n\t\t\t\t\tUsage\n\t\t\t\tfi\n\t\t\t\tCFG_FWFILES=\"$CFG_FWFILES $fwfiles\"\n\t\t\tdone\n\t\t\texport CFG_FWFILES\n\t\t\texport CFG_FWACTION=\"$action\"\n\t\t\trun_test chassis_$test_suite;;\n\t\tfmconfig)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: -P option required for chassis fmconfig\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$action\" != \"push\" -a \"$action\" != \"run\" -a \"$action\" != \"runall\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid FM config action: $action\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$CFG_INSTALL_OPTIONS\" != \"\" -a \"$CFG_INSTALL_OPTIONS\" != \"disable\" -a \"$CFG_INSTALL_OPTIONS\" != \"enable\" -a \"$CFG_INSTALL_OPTIONS\" != \"enableall\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid FM bootstate: $CFG_INSTALL_OPTIONS\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\texport CFG_FMFILE=\"$packages\"\n\t\t\texport CFG_FWACTION=\"$action\"\n\t\t\trun_test chassis_$test_suite;;\n\t\tfmcontrol)\n\t\t\tif [ \"$action\" != \"stop\" -a \"$action\" != \"run\" -a \"$action\" != \"runall\" -a \"$action\" != \"restart\" -a \"$action\" != \"restartall\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid FM config action: $action\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$CFG_INSTALL_OPTIONS\" != \"\" -a \"$CFG_INSTALL_OPTIONS\" != \"disable\" -a \"$CFG_INSTALL_OPTIONS\" != \"enable\" -a \"$CFG_INSTALL_OPTIONS\" != \"enableall\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid FM bootstate: $CFG_INSTALL_OPTIONS\" >&2\n\t\t\tfi\n\t\t\texport CFG_FWACTION=\"$action\"\n\t\t\trun_test chassis_$test_suite;;\n\t\tfmgetconfig)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\tpackages=\"opafm.xml\"\n\t\t\t\t#echo \"$cmd: -P option required for chassis fmgetconfig\" >&2\n\t\t\t\t#Usage\n\t\t\tfi\n\t\t\texport CFG_FMFILE=\"$packages\"\n\t\t\trun_test chassis_$test_suite;;\n\t\t*)\n\t\t\techo \"Invalid Operation name: $test_suite\" >&2\n\t\t\tUsage;\n\t\t\t;;\n\t\tesac\n\tdone\nelif [ $opaswitch -eq 1 ]\nthen\n\tif [ \"$bypassSwitchCheck\" = y ]\n\tthen\n\t\texport CFG_SWITCH_BYPASS_SWITCH_CHECK=y\n\telse\n\t\texport CFG_SWITCH_BYPASS_SWITCH_CHECK=n\n\tfi\n\tfor test_suite in $*\n\tdo\n\n\t\tcase $test_suite in\n      reboot)\n         run_test switch_$test_suite;;\n\t\tinfo)\n\t\t\trun_test switch_$test_suite;;\n\t\thwvpd)\n\t\t\trun_test switch_$test_suite;;\n\t\tping)\n\t\t\trun_test switch_$test_suite;;\n\t\tfwverify)\n\t\t\trun_test switch_$test_suite;;\n\t\tcapture)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\tpackages=\"switchcapture\"\n\t\t\t\t#echo \"$cmd: -P option required for switch capture\" >&2\n\t\t\t\t#Usage\n\t\t\tfi\n\t\t\texport CFG_CAPTUREFILE=\"$packages\"\n\t\t\trun_test switch_$test_suite;;\n\t\tconfigure)\n\t\t\t$TOOLSDIR/switch_setup\n\t\t\tif [ $? = 0 ]\n\t\t\tthen\n\t\t\t\texport LINKWIDTH_SETTING=`grep \"Link Width Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\texport LINKSPEED_SETTING=`grep \"Link Speed Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\texport NODEDESC_SETTING=`grep \"Node Description Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\texport FMENABLED_SETTING=`grep \"FM Enabled Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\texport LINKCRCMODE_SETTING=`grep \"Link CRC Mode Selection\" .switchSetup.out | cut -d : -f 2`\n\t\t\t\trun_test switch_$test_suite\n\t\t\telse\n\t\t\t\techo \"Ext mgd switch setup wizard exited abnormally ... aborting\"\n\t\t\tfi;;\n\t\tupgrade)\n\t\t\tif [ \"$packages\" = \"notsupplied\" -o \"$packages\" = \"\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: -P option required for switch upgrade\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\t\t\tif [ \"$action\" != \"select\" -a \"$action\" != \"run\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: Invalid firmware upgrade action: $action\" >&2\n\t\t\t\techo \"$cmd: 'run' and 'select' are the only supported actions\" >&2\n\t\t\t\tUsage\n\t\t\tfi\n\n\t\t\tdirnum=1\n\n\t\t\t# check fw files exist, expand directories\n\t\t\tCFG_FWFILES=\"\"\n\t\t\tCFG_FWBINFILES=\"\"\n\n\t\t\tfor fwfile in $packages\n\t\t\tdo\n\n\t\t\t\techo \"$cmd: processing package file: $fwfile\" >&2\n\t\t\t\t# expand directory, also filters files without .emfw suffix\n\t\t\t\t# this also expands wildcards in \"$packages\"\n\t\t\t\tfwfiles=`find $fwfile -type f -name '*.emfw'`\n\t\t\t\tif [ $? != 0 -o x\"$fwfiles\" == x ]\n\t\t\t\tthen\n\t\t\t\t\techo \"$cmd: $fwfile: No .emfw files found\" >&2\n\t\t\t\t\tUsage\n\t\t\t\tfi\n\t\t\t\tCFG_FWFILES=\"$fwfiles\"\n\n\t\t\t\techo \"$cmd: found package file: $fwfiles\" >&2\n\t\t\t\t# copy file to temporary directory\n\t\t\tfor tarball in $CFG_FWFILES\n\t\t\tdo\n\t\t\t\t# create temporary work directory\n\t\t\t\tCFG_FWFILE=\"$tarball\"\n\t\t\t\tCFG_FWTEMPDIR=\"$temp.$dirnum\"\n\t\t\t\tmkdir $CFG_FWTEMPDIR\n\t\t\t\tCFG_FWRELEASEFILE=\"$CFG_FWTEMPDIR/release.emfw.txt\"\n\n\t\t\t\tcp -f $tarball $CFG_FWTEMPDIR\n\n\t\t\t\t# remove previous firmware image .bin files, and extract\n\t\t\t\t# .bin files from .emfw file.\n\t\t\t\trm -rf '$CFG_FWTEMPDIR/*.bin'\n\t\t\t\ttar --directory $CFG_FWTEMPDIR -zxf $tarball\n\n\t\t\t\t# search for text file that contains release related information\n            # about the firmware image .bin files\n            if [ ! -f \"$CFG_FWRELEASEFILE\" ]\n\t\t\t\tthen\n\t\t\t\t\techo \"$cmd: No release.emfw.txt file found for package file: $tarball\" >&2\n\t\t\t\t\tUsage\n\t\t\t\tfi\n\n            fwreleaseinfo=`cat $CFG_FWRELEASEFILE`\n            CFG_FWRELINFO=\"$fwreleaseinfo\"\n            fwreleaseversioninfo=`cat $CFG_FWRELEASEFILE | grep _ | sed \"s/_/./g\"`\n            CFG_FWRELEASEVERSIONINFO=$fwreleaseversioninfo\n            CFG_FWSPEED=`cat $CFG_FWRELEASEFILE | grep DR`\n\t\t\tif [ \"$CFG_FWSPEED\" = \"\" ]\n\t\t\tthen\n\t\t\t\tCFG_FWSPEED=\"QDR\"\n\t\t\tfi\n            CFG_FWASICVER=`grep \"V[0-9]\" $CFG_FWRELEASEFILE`\n\t\t\tif [ \"$CFG_FWASICVER\" = \"\" ]\n\t\t\tthen\n\t\t\t\tCFG_FWASICVER=\"V0\"\n\t\t\tfi\n\t\t\tCFG_SWITCH_DEVICE=`head -n 1 $CFG_FWRELEASEFILE`\n\n\t\t\t\t# expand directory, also filters files without .bin suffix\n\t\t\t\tfwfiles=`find $CFG_FWTEMPDIR -type f -name '*.bin'`\n\t\t\t\tif [ $? != 0 -o x\"$fwfiles\" == x ]\n\t\t\t\tthen\n\t\t\t\t\techo \"$cmd: $tarball: No .bin files found\" >&2\n\t\t\t\t\tUsage\n\t\t\t\tfi\n\n\t\t\t\tCFG_FWBINFILES=\"$fwfiles\"\n\t\t\t\tCFG_FWOVERRIDE=$fwOverride\n\n\t\t\t\texport CFG_FWFILES\n\t\t\t\texport CFG_FWFILE\n\t\t\t\texport CFG_FWBINFILES\n\t\t\t\texport CFG_FWTEMPDIR\n\t\t\t\texport CFG_FWRELINFO\n\t\t\t\texport CFG_FWSPEED\n\t\t\t\texport CFG_FWASICVER\n\t\t\t\texport CFG_SWITCH_DEVICE\n\t\t\t\texport CFG_FWRELEASEVERSIONINFO\n\t\t\t\texport CFG_FWACTION=\"$action\"\n\t\t\t\texport CFG_FWOVERRIDE\n\n\t\t\t\techo \"$cmd: upgrading with switch firmware image: $tarball : version $fwreleaseversioninfo\" >&2\n\t\t\t\trun_test switch_$test_suite\n\n\t\t\t\tdirnum=$((dirnum + 1))\n\t\t\tdone\n\t\t\tdone\n\n\t\t\t# remove temporary work directory\n\t\t\trm -rf $temp.*\n\t\t\t;;\n\t\tgetconfig)\n\t\t\trun_test switch_$test_suite;;\n\t\t*)\n\t\t\techo \"Invalid Operation name: $test_suite\" >&2\n\t\t\tUsage;\n\t\t\t;;\n\t\tesac\n\tdone\nelse\n\tif [ \"$Sopt\" = y ]\n\tthen\n\t\techo -n \"Password for $CFG_USERNAME on all hosts: \" > /dev/tty\n\t\tstty -echo < /dev/tty > /dev/tty\n\t\tpassword=\n\t\tread password < /dev/tty\n\t\tstty echo < /dev/tty > /dev/tty\n\t\techo > /dev/tty\n\t\texport CFG_PASSWORD=\"$password\"\n\t\tif [ \"$CFG_USERNAME\" != \"root\" ]\n\t\tthen\n\t\t\techo -n \"Password for root on all hosts: \" > /dev/tty\n\t\t\tstty -echo < /dev/tty > /dev/tty\n\t\t\tpassword=\n\t\t\tread password < /dev/tty\n\t\t\tstty echo < /dev/tty > /dev/tty\n\t\t\techo > /dev/tty\n\t\t\texport CFG_ROOTPASS=\"$password\"\n\t\tfi\n\tfi\n\tfor test_suite in $*\n\tdo\n\t\tcase $test_suite in\n\t\tload|upgrade)\n\t\t\tif [ ! -f \"$dir/$CFG_PRODUCT.$CFG_RELEASE.tgz\" ]\n\t\t\tthen\n\t\t\t\techo \"$cmd: $dir/$CFG_PRODUCT.$CFG_RELEASE.tgz not found\" >&2\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\trun_test $test_suite;;\n\t\treboot|sacache|configipoib|ipoibping|mpiperf|mpiperfdeviation)\n\t\t\trun_test $test_suite;;\n\t\t*)\n\t\t\techo \"Invalid Operation name: $test_suite\" >&2\n\t\t\tUsage;\n\t\t\t;;\n\t\tesac\n\tdone\nfi\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n\n# [ICS VERSION STRING: unknown]\n\n# disable the specified set of hosts\n\ntempfile=`mktemp`\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $tempfile\" EXIT\n\nUsage_full()\n{\n\techo \"Usage: opadisablehosts [-h hfi] [-p port] reason host ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opadisablehosts --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -h/--hfi hfi              - hfi to send via, default is 1st hfi\" >&2\n\techo \"   -p/--port port            - port to send via, default is 1st active port\" >&2\n\techo \"   reason - text description of reason hosts are being diasabled,\" >&2\n\techo \"            will be saved at end of any new lines in disabled file.\" >&2\n\techo \"            For ports already in disabled file, this is ignored.\" >&2  \n\techo  >&2\n\techo \"for example:\" >&2\n\techo \"   opadisablehosts 'bad DRAM' compute001 compute045\" >&2\n\techo \"   opadisablehosts -h 1 -p 2 'crashed' compute001 compute045\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opadisablehosts reason host ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opadisablehosts --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo  >&2\n\techo \"   reason - text description of reason hosts are being diasabled,\" >&2\n\techo \"            will be saved at end of any new lines in disabled file.\" >&2\n\techo \"            For ports already in disabled file, this is ignored.\" >&2  \n\techo >&2\n\techo \"for example:\" >&2\n\techo \"   opadisablehosts 'bad DRAM' compute001 compute045\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nreason=\nhfi=0\nport=0\nwhile getopts h:p: param\ndo\n\tcase $param in\n\th)\thfi=\"$OPTARG\";;\n\tp)\tport=\"$OPTARG\";;\n\t?)\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\nif [ $# -lt 1 ]\nthen\n\tUsage\nfi\nreason=\"$1\"\nshift\n\nif [ $# -lt 1 ]\nthen\n\tUsage\nfi\n\nif [ \"$port\" -eq 0 ]\nthen\n\tport_opts=\"-h $hfi\" # default port to 1st active\nelse\n\tport_opts=\"-h $hfi -p $port\"\nfi\n\n# loop for each host\n# this could be more efficient, but for a small list of hosts its ok\nres=0\nfor i in \"$@\"\ndo\n\techo \"=============================================================================\"\n\techo \"Disabling host: $i...\"\n\t/sbin/opaextractsellinks $port_opts -F \"nodepat:$i HFI*\" > $tempfile\n\tif [ ! -s $tempfile ]\n\tthen\n\t\techo \"opadisablehosts: Unable to find host: $i\" >&2\n\t\tres=1\n\telse\n\t\t/sbin/opadisableports -p \"$hfi:$port\" \"$reason\" < $tempfile\n\tfi\n\trm -f $tempfile\ndone\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n\n# [ICS VERSION STRING: unknown]\n\n# reenable the specified set of ports\n\ntempfile=`mktemp`\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $tempfile\" EXIT\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\n. /opt/opa/tools/ff_funcs\n\nUsage_full()\n{\n\techo \"Usage: opaenableports [-t portsfile] [-p ports] < disabled.csv\" >&2\n\techo \"              or\" >&2\n\techo \"       opaenableports --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"                  fabric(s) for operation, default is $CONFIG_DIR/opa/ports\" >&2\n\techo \"   -p ports - list of local HFI ports used to access fabric(s) for operation\" >&2\n\techo \"              default is 1st active port\" >&2\n\techo \"              This is specified as hfi:port\" >&2\n\techo \"                 0:0 = 1st active port in system\" >&2\n\techo \"                 0:y = port y within system\" >&2\n\techo \"                 x:0 = 1st active port on HFI x\" >&2\n\techo \"                 x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo  >&2\n\techo \"disabled.csv is a file listing the ports to enable.\" >&2\n\techo \"It is of the form:\" >&2\n\techo \"   NodeGUID;PortNum;NodeDesc\" >&2\n\techo \"A input file such as this is generated in $CONFIG_DIR/opa/disabled*\" >&2\n\techo \"by opadisableports.\" >&2\n\techo \" Environment:\" >&2\n\techo \"   PORTS - list of ports, used in absence of -t and -p\" >&2\n\techo \"   PORTS_FILE - file containing list of ports, used in absence of -t and -p\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaenableports < disabled.csv\" >&2\n\techo \"   opaenableports -p '1:1 1:2 2:1 2:2' < disabled.csv\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opaenableports < disabled.csv\" >&2\n\techo \"              or\" >&2\n\techo \"       opaenableports --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo  >&2\n\techo \"disabled.csv is a file listing the ports to enable.\" >&2\n\techo \"It is of the form:\" >&2\n\techo \"   NodeGUID;PortNum;NodeDesc\" >&2\n\techo \"A input file such as this is generated in $CONFIG_DIR/opa/disabled*\" >&2\n\techo \"by opadisableports.\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaenableports < disabled.csv\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nres=0\nwhile getopts p:t: param\ndo\n\tcase $param in\n\tp)\texport PORTS=\"$OPTARG\";;\n\tt)\texport PORTS_FILE=\"$OPTARG\";;\n\t?)\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\nif [ $# -ge 1 ]\nthen\n\tUsage\nfi\n\ncheck_ports_args opaenableports\n\nlookup_lid()\n{\n\tlocal nodeguid=\"$1\"\n\tlocal portnum=\"$2\"\n\tlocal guid port type desc lid\n\n\tgrep \"^$nodeguid;$portnum;\" < $lidmap|while read guid port type desc lid\n\tdo\n\t\techo -n $lid\n\tdone\n}\n\t\n\nenable_ports()\n{\n\tenabled=0\n\tfailed=0\n\tskipped=0\n\tif [ \"$port\" -eq 0 ]\n\tthen\n\t\tport_opts=\"-h $hfi\"\t# default port to 1st active\n\telse\n\t\tport_opts=\"-h $hfi -p $port\"\n\tfi\n\tsuffix=\":$hfi:$port\"\n\tlidmap=$CONFIG_DIR/lidmap$suffix.csv\n\n\t# generate lidmap\n\t/sbin/opaextractlids $port_opts > $lidmap\n\tif [ ! -s $lidmap ]\n\tthen\n\t\techo \"opaenableports: Unable to determine fabric lids\" >&2\n\t\trm -f $lidmap\n\t\treturn 1\n\tfi\n\n\tIFS=';'\n\twhile read nodeguid port type desc rest\n\tdo\n\t\tlid=$(lookup_lid $nodeguid 0)\n\t\tif [ x\"$lid\" = x ]\n\t\tthen\n\t\t\techo \"Skipping port: $desc:$port\"\n\t\t\tskipped=$(( $skipped + 1))\n\t\telse\n\t\t\techo \"Enabling port: $desc:$port\"\n\t\t\t/sbin/opaportconfig $port_opts -l $lid -m $port enable\n\n\t\t\tif [ $? = 0 ]\n\t\t\tthen\n\t\t\t\tlogger -p user.err \"Enabled port: $desc:$port\"\n\t\t\t\tif [ -e $CONFIG_DIR/opa/disabled$suffix.csv ]\n\t\t\t\tthen\n\t\t\t\t\t# remove from disabled ports\n\t\t\t\t\tgrep -v \"^$nodeguid;$port;\" < $CONFIG_DIR/opa/disabled$suffix.csv > $tempfile\n\t\t\t\t\tmv $tempfile $CONFIG_DIR/opa/disabled$suffix.csv\n\t\t\t\tfi\n\t\t\t\tenabled=$(( $enabled + 1))\n\t\t\telse\n\t\t\t\tfailed=$(( $failed + 1))\n\t\t\tfi\n\t\tfi\n\tdone\n\tif [ $failed -eq 0 ]\n\tthen\n\t\techo \"Enabled: $enabled; Skipped: $skipped\"\n\t\treturn 0\n\telse\n\t\techo \"Enabled: $enabled; Skipped: $skipped; Failed: $failed\"\n\t\treturn 1\n\tfi\n}\n\n\nfor hfi_port in $PORTS\ndo\n\thfi=$(expr $hfi_port : '\\([0-9]*\\):[0-9]*')\n\tport=$(expr $hfi_port : '[0-9]*:\\([0-9]*\\)')\n\t/usr/sbin/oparesolvehfiport $hfi $port >/dev/null\n\tif [ $? -ne 0 -o \"$hfi\" = \"\" -o \"$port\" = \"\" ]\n\tthen\n\t\techo \"opaenableports: Error: Invalid port specification: $hfi_port\" >&2\n\t\tres=1\n\t\tcontinue\n\tfi\n\n\techo \"Processing fabric: $hfi:$port...\"\n\techo \"--------------------------------------------------------\"\n\tenable_ports \"$hfi\" \"$port\"\n\tif [ $? -ne 0 ]\n\tthen\n\t\tres=1\n\tfi\ndone\n\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# Run opareports and pipe output to opaxmlextract to extract\n#  links with excessive errors\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\ntempfile=`mktemp`\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $tempfile\" EXIT\n\nUsage_full()\n{\n\techo \"Usage: opaextractbadlinks [opareport options]\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractbadlinks --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   opareport options - options will be passed to opareport.\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractbadlinks\" >&2\n\techo \"   opaextractbadlinks -h 1 -p 2\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opaextractbadlinks\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractbadlinks --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractbadlinks\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nline1=\n# we do this against a single fabric, options can select a local HFI and Port\n$BINDIR/opareport -o errors -x \"$@\" > $tempfile\nif [ -s $tempfile ]\nthen\n\tcat $tempfile| $BINDIR/opaxmlextract -H -d \\; -e LinkErrors.Link.Port.NodeGUID -e LinkErrors.Link.Port.PortNum -e LinkErrors.Link.Port.NodeType -e LinkErrors.Link.Port.NodeDesc|while read line\n\tdo\n\t\tif [ x\"$line1\" = x ]\n\t\tthen\n\t\t\tline1=\"$line\"\n\t\telse\n\t\t\techo \"$line1;$line\"\n\t\t\tline1=\n\t\tfi\n\tdone\n\tres=0\nelse\n\techo \"opaextractbadlinks: Unable to get error report\" >&2\n\tres=1\nfi\nrm -f $tempfile\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# Run opareport pipe output to opaxmlextract to extract lids to a csv file\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\ntempfile=`mktemp`\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $tempfile\" EXIT\n\nUsage_full()\n{\n\techo \"Usage: opaextractlids [-h hfi] [-p port]\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractlids --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -h/--hfi hfi              - hfi to send via, default is 1st hfi\" >&2\n\techo \"   -p/--port port            - port to send via, default is 1st active port\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractlids > lids.csv\" >&2\n\techo \"   opaextractlids -h 2 -p 1 > lids.csv'\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opaextractlids\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractlids --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractlids > lids.csv\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nIFS=';'\n$BINDIR/opareport -o lids -x \"$@\" > $tempfile\nif [ -s $tempfile ]\nthen\n\tcat $tempfile | $BINDIR/opaxmlextract -H -d \\; -e LIDSummary.LIDs.Value.NodeGUID -e LIDSummary.LIDs.Value.PortNum -e LIDSummary.LIDs.Value.NodeType -e LIDSummary.LIDs.Value.NodeDesc -e LIDSummary.LIDs.Value:LID\n\tres=0\nelse\n\techo \"opaextractlids: Unable to get lids report\" >&2\n\tres=1\nfi\n\t\t\nrm -f $tempfile\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# Run opareports and pipe output to opaxmlextract to extract\n#  links with excessive errors\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\ntempfile=`mktemp`\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $tempfile\" EXIT\n\nUsage_full()\n{\n\techo \"Usage: opaextractsellinks [opareport options]\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractsellinks --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   opareport options - options will be passed to opareport.\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractsellinks\" >&2\n\techo \"   opaextractsellinks -h -1 -p 2\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opaextractsellinks\" >&2\n\techo \"              or\" >&2\n\techo \"       opaextractsellinks --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"for example:\" >&2\n\techo \"   opaextractsellinks\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nline1=\n# we do this against a single fabric, options can select a local HFI and Port\n$BINDIR/opareport -o links -x \"$@\" > $tempfile\nif [ -s $tempfile ]\nthen\n\tcat $tempfile| $BINDIR/opaxmlextract -H -d \\; -e LinkSummary.Link.Port.NodeGUID -e LinkSummary.Link.Port.PortNum -e LinkSummary.Link.Port.NodeType -e LinkSummary.Link.Port.NodeDesc|while read line\n\tdo\n\t\tif [ x\"$line1\" = x ]\n\t\tthen\n\t\t\tline1=\"$line\"\n\t\telse\n\t\t\techo \"$line1;$line\"\n\t\t\tline1=\n\t\tfi\n\tdone\n\tres=0\nelse\n\techo \"opaextractsellinks: Unable to find specified links\" >&2\n\tres=1\nfi\nrm -f $tempfile\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# start and stop HFI-SW and/or ISL cable Bit Error Rate tests\n\ntempfile=`mktemp`\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $tempfile\" EXIT\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\n. $TOOLSDIR/ff_funcs\n\nUsage_full()\n{\n\t\techo \"Usage: opacabletest [-C|-A] [-c file] [-f hostfile] [-h 'hosts'] [-n numprocs]\" >&2\n\techo \"                     [-t portsfile] [-p ports]\" >&2\n\techo \"                     [start|start_fi|start_isl|stop|stop_fi|stop_isl] ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opacabletest --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -C - clear error counters\" >&2\n\techo \"   -A - force clear of hw error counters\" >&2\n\techo \"        implies -C\" >&2\n\techo \"   -c file - error thresholds config file\" >&2\n\techo \"             default is $CONFIG_DIR/opa/opamon.si.conf\" >&2\n\techo \"             only used if -C or -A specified\" >&2\n\techo \"   -f hostfile - file with hosts to include in HFI-SW test,\" >&2\n\techo \"                 default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"   -h hosts - list of hosts to include in HFI-SW test\" >&2\n\techo \"   -n numprocs - number of processes per host for HFI-SW test\" >&2\n\techo \"   -t portsfile - file with list of local HFI ports used to access fabric(s)\" >&2\n\techo \"                  when clearing counters, default is $CONFIG_DIR/opa/ports\" >&2\n\techo \"   -p ports - list of local HFI ports used to access fabric(s) for counter clear\" >&2\n\techo \"              default is 1st active port\" >&2\n\techo \"              This is specified as hfi:port\" >&2\n\techo \"                 0:0 = 1st active port in system\" >&2\n\techo \"                 0:y = port y within system\" >&2\n\techo \"                 x:0 = 1st active port on HFI x\" >&2\n\techo \"                 x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"   start - start the HFI-SW and ISL tests\" >&2\n\techo \"   start_fi - start the HFI-SW test\" >&2\n\techo \"   start_isl - start the ISL test\" >&2\n\techo \"   stop - stop the HFI-SW and ISL tests\" >&2\n\techo \"   stop_fi - stop the HFI-SW test\" >&2\n\techo \"   stop_isl - stop the ISL test\" >&2\n\techo >&2\n\techo \"The HFI-SW cabletest requires that FF_MPI_APPS_DIR be set and contains\" >&2\n\techo \"a prebuilt copy of Intel mpi_apps for an appropriate MPI\" >&2\n\techo >&2\n\techo \"The ISL cabletest as started by this tool assumes the master HSM is running\" >&2\n\techo \"on this host.  If using ESM or a different host is master FM, ISL cabletest\" >&2\n\techo \"will have to be controlled by the switch CLI or by FastFabric on the master FM\" >&2\n\techo \"respectively\" >&2\n\techo >&2\n\techo \" Environment:\" >&2\n\techo \"   HOSTS - list of hosts, used if -h option not supplied\" >&2\n\techo \"   HOSTS_FILE - file containing list of hosts, used in absence of -f and -h\" >&2\n\techo \"   PORTS - list of ports, used in absence of -t and -p\" >&2\n\techo \"   PORTS_FILE - file containing list of ports, used in absence of -t and -p\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"example:\">&2\n\techo \"   opacabletest -A start\" >&2\n\techo \"   opacabletest -f good -A start\" >&2\n\techo \"   opacabletest -h 'arwen elrond' start_fi\" >&2\n\techo \"   HOSTS='arwen elrond' opacabletest stop\" >&2\n\techo \"   opacabletest -A\" >&2\n\trm -f $tempfile\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opacabletest [-C|-A] [-n numprocs] [-f hostfile]\" >&2\n\techo \"                 [start|start_fi|start_isl|stop|stop_fi|stop_isl] ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opacabletest --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -C - clear error counters\" >&2\n\techo \"   -A - force clear of hw error counters\" >&2\n\techo \"        implies -C\" >&2\n\techo \"   -f hostfile - file with hosts to include in HFI-SW test,\" >&2\n\techo \"                 default is $CONFIG_DIR/opa/hosts\" >&2\n\techo \"   -n numprocs - number of processes per host for HFI-SW test\" >&2\n\techo >&2\n\techo \"   start - start the HFI-SW and ISL tests\" >&2\n\techo \"   start_fi - start the HFI-SW test\" >&2\n\techo \"   start_isl - start the ISL test\" >&2\n\techo \"   stop - stop the HFI-SW and ISL tests\" >&2\n\techo \"   stop_fi - stop the HFI-SW test\" >&2\n\techo \"   stop_isl - stop the ISL test\" >&2\n\techo >&2\n\techo \"The HFI-SW cabletest requires that FF_MPI_APPS_DIR be set and contains\" >&2\n\techo \"a prebuilt copy of Intel mpi_apps for an appropriate MPI\" >&2\n\techo >&2\n\techo \"The ISL cabletest as started by this tool assumes the master HSM is running\" >&2\n\techo \"on this host.  If using ESM or a different host is master FM, ISL cabletest\" >&2\n\techo \"will have to be controlled by the switch CLI or by FastFabric on the master FM\" >&2\n\techo \"respectively\" >&2\n\techo >&2\n\techo \" Environment:\" >&2\n\techo \"   FF_MAX_PARALLEL - maximum concurrent operations\" >&2\n\techo \"example:\">&2\n\techo \"   opacabletest -f good -A start\" >&2\n\techo \"   opacabletest stop\" >&2\n\techo \"   opacabletest -A\" >&2\n\trm -f $tempfile\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nclear=n\nclearhw=n\nnumprocs=3\nconfig_file=\"$CONFIG_DIR/opa/opamon.si.conf\"\nwhile getopts CAf:h:n:t:p:c: param\ndo\n\tcase $param in\n\tC)\n\t\tclear=y;;\n\tA)\n\t\tclear=y; clearhw=y;;\n\th)\n\t\tHOSTS=\"$OPTARG\";;\n\tf)\n\t\tHOSTS_FILE=\"$OPTARG\";;\n\tn)\n\t\tnumprocs=\"$OPTARG\";;\n\tt)\n\t\tPORTS_FILE=\"$OPTARG\";;\n\tp)\n\t\tPORTS=\"$OPTARG\";;\n\tc)\n\t\tconfig_file=\"$OPTARG\";;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\ncheck_host_args opacabletest\n# HOSTS now lists all the hosts, pass it along to the commands below via env\nexport HOSTS\nunset HOSTS_FILE\n\nif [ $clear = y ]\nthen\n\tcheck_ports_args opacabletest\n\t# PORTS now lists all the ports, pass it along to the commands below via env\n\texport PORTS\n\tunset PORTS_FILE\nfi\n\nif [ $clear = y ]\nthen\n\topareports -C -c \"$config_file\" -o none\n\tif [ $clearhw = y ]\n\tthen\n\t\topareports -M -C -c \"$config_file\" -o none\n\tfi\nfi\n\nget_fmconfig()\n{\n\tFM_CONFIG_DIR=/etc/sysconfig\n\tFM_CONFIG_FILE=$CONFIG_DIR/opafm.xml\n\tIFS_FM_BASE=/opt/opafm # default\n\tif [ -s $FM_CONFIG_DIR/opa/opafm.info ]\n\tthen\n\t    # get IFS_FM_BASE\n\t    . $FM_CONFIG_DIR/opa/opafm.info\n\telse\n\t    echo \"opacabletest: Warning: $FM_CONFIG_DIR/opa/opafm.info not found: using $IFS_FM_BASE\" >&2\n\tfi\n}\n\nstart_fi()\n{\n\tif [ ! -e $FF_MPI_APPS_DIR/run_batch_cabletest ]\n\tthen\n\t\techo \"opacabletest: Invalid FF_MPI_APPS_DIR: $FF_MPI_APPS_DIR\" >&2\n\t\texit 1\n\tfi\n\tif [ ! -x $FF_MPI_APPS_DIR/groupstress/mpi_groupstress ]\n\tthen\n\t\techo \"opacabletest: FF_MPI_APPS_DIR ($FF_MPI_APPS_DIR) not compiled\" >&2\n\t\trm -f $tempfile\n\t\texit 1\n\tfi\n\tff_var_to_stdout \"$HOSTS\" > $tempfile\n\tcd $FF_MPI_APPS_DIR\n\tMPI_HOSTS=$tempfile ./run_batch_cabletest -n $numprocs infinite\n}\n\nstart_isl()\n{\n\t(\n\t\tget_fmconfig\n\t\tif [ ! -x $IFS_FM_BASE/bin/fm_opacmdall ]\n\t\tthen\n\t\t\techo \"opacabletest: Error: $IFS_FM_BASE/bin/fm_opacmdall not found\" >&2\n\t\t\trm -f $tempfile\n\t\t\texit 1\n\t\tfi\n\t\t$IFS_FM_BASE/bin/fm_opacmdall smLooptestFastModeStart\n\t)\n\tres=$?\n\t[ $res -ne 0 ] && exit $res\n}\n\nstart()\n{\n\tstart_fi\n\tstart_isl\n}\n\nstop_fi()\n{\n\t# we use patterns so the pkill doesn't kill this script or opacmdall itself\n\t# use an echo at end so exit status is good\n\t$BINDIR/opacmdall -p -T 60 \"pkill -9 -f '[m]pi_groupstress'; echo -n\"\n}\n\nstop_isl()\n{\n\t(\n\t\tget_fmconfig\n\t\tif [ ! -x $IFS_FM_BASE/bin/fm_opacmdall ]\n\t\tthen\n\t\t\techo \"opacabletest: Error: $IFS_FM_BASE/bin/fm_opacmdall not found\" >&2\n\t\t\trm -f $tempfile\n\t\t\texit 1\n\t\tfi\n\t\t$IFS_FM_BASE/bin/fm_opacmdall smLooptestStop\n\t)\n\tres=$?\n\t[ $res -ne 0 ] && exit $res\n}\n\nstop()\n{\n\tstop_fi\n\tstop_isl\n}\n\nwhile [ $# -ne 0 ]\ndo\n\tcase \"$1\" in\n\tstart) start;;\n\tstart_fi) start_fi;;\n\tstart_isl) start_isl;;\n\tstop) stop;;\n\tstop_fi) stop_fi;;\n\tstop_isl) stop_isl;;\n\t*)\tUsage;;\n\tesac\n\tshift\ndone\n\nrm -f $tempfile\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# query the SM via opareport and generate a switches file listing all the\n# Externally Managed SilverStorm switches found in the fabric.\n\n# Enhancements: optionally, do not generate an switches file, but use an existing\n# switches file; optionally, update NodeDesc values in an switches file using\n# NodeDesc values found in a specified topology.xml file and fabric link\n# information obtained via opareport -o links (live fabric or snapshot).\n\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\n. $TOOLSDIR/ff_funcs\n\n## Defines:\nOPAEXPAND_FILE=\"$BINDIR/opaexpandfile\"\nOPA_REPORT=\"$BINDIR/opareport\"\nOPASAQUERY=\"$BINDIR/opasaquery\"\nXML_EXTRACT=\"$BINDIR/opaxmlextract\"\nGEN_OPASWITCHES_HELPER=\"$TOOLSDIR/opagenswitcheshelper\"\nFILE_OPASWITCHES=\"file_switches\"\nFILE_OPASWITCHES2=\"file_switches2\"\nFILE_LINKSUM_LEAF_EDGE=\"linksum_leaf_edge.csv\"\nFILE_LINKSUM_EDGE_HFI=\"linksum_edge_hfi.csv\"\nFILE_LINKS_LEAF_EDGE=\"links_leaf_edge.csv\"\nFILE_LINKS_LEAF_EDGE2=\"links_leaf_edge2.csv\"\nFILE_LINKS_EDGE_HFI=\"links_edge_hfi.csv\"\nFILE_LINKS_EDGE_HFI2=\"links_edge_hfi2.csv\"\nFILE_RESERVE=\"file_reserve\"\nFILE_TEMP=\"file_temp\"\nFILE_TEMP2=\"file_temp2\"\nFILE_DEBUG=\"file_debug\"\nFILE_DEBUG2=\"file_debug2\"\n\n\n## Global variables:\n\n# Operating variables:\nn_verbose=0\nfl_clean=1\nfl_gen_switches=1\nfl_gen_linksum=0\nfl_write_switches=0\nfile_switches=\"$FILE_OPASWITCHES\"\nfile_output=\"\"\nfile_topology=\"\"\nfile_snapshot=\"\"\nnodeguid1=\nportnum1=\nnodetype1=\nnodedesc1=\nnodesuffix1=\nnodeguid1b=\nportnum1b=\nnodetype1b=\nnodedesc1b=\nnodesuffix1b=\nnodeguid2=\nportnum2=\nnodetype2=\nnodedesc2=\nnodesuffix2=\nnodeguid2b=\nportnum2b=\nnodetype2b=\nnodedesc2b=\nnodesuffix2b=\nnodedesc_last=\nline=\nline1=\nline2=\nn_hfis=0\nhfis=\nn_edges=0\nn_edges2=0\nn_edges2b=0\nedges=\nn_edges_unique=0\nedges_unique=\nn_leaves=0\nn_leaves2=0\nn_leaves2b=0\nleaves=\nn_leaves_unique=0\nleaves_unique=\n\n# Debug variables:\ndebug_0=\ndebug_1=\ndebug_2=\ndebug_3=\ndebug_4=\ndebug_5=\ndebug_6=\ndebug_7=\n#echo \"DEBUG-x.y: 0:$debug_0: 1:$debug_1: 2:$debug_2: 3:$debug_3: 4:$debug_4: 5:$debug_5: 6:$debug_6: 7:$debug_7:\"\n\n\n## Local functions:\nfunctout=\n\n# Clean temporary files\nclean_files()\n{\n\tif [ $fl_clean == 1 ]\n\t\tthen\n\t\trm -f $FILE_TEMP\n\t\trm -f $FILE_TEMP2\n\t\trm -f $FILE_OPASWITCHES\n\t\trm -f $FILE_OPASWITCHES2\n\t\trm -f $FILE_LINKSUM_LEAF_EDGE\n\t\trm -f $FILE_LINKSUM_EDGE_HFI\n\t\trm -f $FILE_LINKS_LEAF_EDGE\n\t\trm -f $FILE_LINKS_LEAF_EDGE2\n\t\trm -f $FILE_LINKS_EDGE_HFI\n\t\trm -f $FILE_LINKS_EDGE_HFI2\n\tfi\n}\t# End of clean_files()\n\ntrap 'clean_files; exit 1' SIGINT SIGHUP SIGTERM \ntrap clean_files EXIT\n\nUsage_full()\n{\n\techo \"Usage: opagenswitches [-t portsfile] [-p ports] [-R]\" >&2\n\techo \"         [-L switches_file] [-o output_file] [-T topology_file] [-X snapshot_file]\" >&2\n\techo \"         [-s] [-v level] [-K]\" >&2\n\techo \"              or\" >&2\n\techo \"       opagenswitches --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"                  fabric(s) for analysis, default is $CONFIG_DIR/opa/ports\" >&2\n\techo \"   -p ports - list of local HFI ports used to access fabric(s) for analysis\" >&2\n\techo \"              default is 1st active port\" >&2\n\techo \"              This is specified as hfi:port\" >&2\n\techo \"                 0:0 = 1st active port in system\" >&2\n\techo \"                 0:y = port y within system\" >&2\n\techo \"                 x:0 = 1st active port on HFI x\" >&2\n\techo \"                 x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"   -R - do not attempt to get routes for computation of distance\" >&2\n\techo \"   -s - update/resolve switches switch names using topology XML data\" >&2\n\techo \"   -L switches_file - use switches_file as switches input\" >&2\n\techo \"                     (do not generate switches data; must also use -s)\" >&2\n\techo \"   -o output_file - write switches data to output_file (default is stdout)\" >&2\n\techo \"   -T topology_file - use topology_file as topology XML\" >&2\n\techo \"                      (may contain '%P'; must also use -s)\" >&2\n\techo \"   -X snapshot_file - use snapshot_file XML for fabric link information\" >&2\n\techo \"                      (may contain '%P'; must also use -s)\" >&2\n\techo \"   -v level - verbose level (0-8, default 0)\" >&2\n\techo \"              0 - no output\" >&2\n\techo \"              1 - progress output\" >&2\n\techo \"              2 - reserved\" >&2\n\techo \"              4 - time stamps\" >&2\n\techo \"              8 - reserved\" >&2\n\techo \"   -K - do not clean temporary files\" >&2\n\techo \" Environment:\" >&2\n\techo \"   PORTS - list of ports, used in absence of -t and -p\" >&2\n\techo \"   PORTS_FILE - file containing list of ports, used in absence of -t and -p\" >&2\n\techo \"   FF_TOPOLOGY_FILE - file containing topology XML data, used in absence of -T\" >&2\n\techo \"for example:\" >&2\n\techo \"   opagenswitches\" >&2\n\techo \"   opagenswitches -p '1:1 1:2 2:1 2:2'\" >&2\n\techo \"   opagenswitches -o switches\" >&2\n\techo \"   opagenswitches -s -o switches\" >&2\n\techo \"   opagenswitches -L switches -s -o switches\" >&2\n\techo \"   opagenswitches -s -T topology.%P.xml\" >&2\n\techo \"   opagenswitches -L switches -s -T topology.%P.xml -X snapshot.%P.xml\" >&2\n\texit 0\n}\t# End of Usage_full()\n\nUsage()\n{\n\techo \"Usage: opagenswitches [-R] [-s] [-T topology_file]\" >&2\n\techo \"              or\" >&2\n\techo \"       opagenswitches --help\" >&2\n\techo \"   -R - do not attempt to get routes for computation of distance\" >&2\n\techo \"   -s - update/resolve switches switch names using topology XML data\" >&2\n\techo \"   -T topology_file - use topology_file as topology XML\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"for example:\" >&2\n\techo \"   opagenswitches\" >&2\n\techo \"   opagenswitches -T topology.0:0.xml\" >&2\n\texit 2\n}\t# End of Usage()\n\n# Display progress information (to STDOUT)\n# Inputs:\n#   $1 - progress string\n#\n# Outputs:\n#   none\ndisplay_progress()\n{\n\tif [ $n_verbose -ge 1 ]\n\t\tthen\n\t\techo \"$1\" >&2\n\t\tif [ $n_verbose -ge 4 ]\n\t\tthen\n\t\t\techo \"  \"`date +\"%F %T (%N nSec)\"` >&2\n\t\tfi\n\tfi\n}\t# End of display_progress()\n\ngen_switches()\n{\n\tlocal suffix\n\n\t# $1 = hfi\n\t# $2 = port\n\tif [ \"$port\" -eq 0 ]\n\tthen\n\t\tport_opts=\"-h $hfi\"\t# default port to 1st active\n\telse\n\t\tport_opts=\"-h $hfi -p $port\"\n\tfi\n\n\teval $OPASAQUERY $port_opts -o desc >/dev/null 2>&1\n\tif [ $? -ne 0 ]\n\t\tthen\n\t\techo \"opagenswitches: Error: Fabric Nodes Not Available at hfi:$hfi port:$port\" >&2\n\t\treturn\n\tfi\n\tsuffix=\":$hfi:$port\"\n\texport IFS=';'\n\trm -f $FILE_TEMP\n\teval $OPA_REPORT $port_opts -q -o comps -x -F nodetype:SW -d 3| $XML_EXTRACT -H -d \\; -e Node.NodeGUID -e Node.SystemImageGUID -e Node.Capability -e Node.NodeDesc -e Node.PortInfo.GUID -s Focus > $FILE_TEMP\n\tif [ $? -eq 0 ]\n\t\tthen\n\t\tfl_write_switches=1\n\t\tcat $FILE_TEMP | while read nodeguid systemguid capability nodedesc portguid\n\t\tdo\n\t\t\tif echo \"$capability\"|grep E0 >/dev/null 2>&1\n\t\t\tthen\n\t\t\t\tcontinue\t# EM switches don't have E0 capability\n\t\t\tfi\n\t\t\t[ \"$nodeguid\" != \"$systemguid\" ] && continue # EM switches have 1 guid\n\n\t\t\tdistance=\n\t\t\tcomma=\n\t\t\tif [ \"$get_distance\" = y ]\n\t\t\tthen\n\t\t\t\tdistance=$(eval opasaquery $port_opts -o trace -g $portguid|grep GID|wc -l)\n\t\t\t\tif [ ! -z \"$distance\" ]\n\t\t\t\tthen\n\t\t\t\t\tcomma=\",\"\n\t\t\t\tfi\n\t\t\tfi\n\n\t\t\t# valid names for switches start with a non-numeric and are alpha numeric\n\t\t\tif echo \"$nodedesc\"|grep '^[a-zA-Z_][a-zA-Z_0-9]*$' >/dev/null 2>&1\n\t\t\tthen\n\t\t\t\techo \"$nodeguid$suffix,$nodedesc$comma$distance\" >> $file_switches\n\t\t\telse\n\t\t\t\techo \"# $nodedesc\" >> $file_switches\n\t\t\t\techo \"$nodeguid$suffix$comma$comma$distance\" >> $file_switches\n\t\t\tfi\n\t\tdone\t# End of while read nodeguid systemguid capability nodedesc portguid\n\telse\n\t\techo \"opagenswitches: Error: Unable to Query Fabric Nodes at hfi:$hfi port:$port\" >&2\n\tfi\n\n}\t# End of gen_switches()\n\n# Resolve name of switches file\n# Inputs:\n#   $1 - command name\n#   OPASWITCHES_FILE - switches file name to process\n#\n# Outputs:\n#   OPASWITCHES_FILE - resolved switches file name\nresolve_switches_file()\n{\n\tif [ \"$OPASWITCHES_FILE\" = \"\" ]\n\tthen\n\t\tOPASWITCHES_FILE=$CONFIG_DIR/opa/switches\n\tfi\n\tOPASWITCHES_FILE=`resolve_file \"$1\" \"$OPASWITCHES_FILE\"`\n\tif [ \"$OPASWITCHES_FILE\" = \"\" ]\n\tthen\n\t\tUsage\n\tfi\n\n}\t# End of resolve_switches_file()\n\n# Resolve name of snapshot file, including %P\n# Inputs:\n#   $1 - command name\n#   $2 - hfi:port fabric selector (0:0, 1:2, etc)\n#   FF_SNAPSHOT_FILE - snapshot file name to process\n#\n# Outputs:\n#   SNAPSHOT_FILE - resolved snapshot file name\nresolve_snapshot_file()\n{\n\tif [ \"$FF_SNAPSHOT_FILE\" = \"\" -o \"$FF_SNAPSHOT_FILE\" = \"NONE\" ]\n\tthen\n\t\tSNAPSHOT_FILE=\"\"\n\t\t# snapshot check disabled\n\t\treturn\n\tfi\n\t# Expand %P marker\n\tfile=$(echo \"$FF_SNAPSHOT_FILE\"|sed -e \"s/%P/$2/g\")\n\t# allow case where FF_SNAPSHOT_FILE is not found (ignore stderr)\n\tSNAPSHOT_FILE=`resolve_file \"$1\" \"$file\" 2>/dev/null`\n\n}\t# End of resolve_snapshot_file()\n\n\n## Main function:\nrm -f $FILE_OPASWITCHES\nrm -f $FILE_OPASWITCHES2\nrm -f $FILE_DEBUG\nrm -f $FILE_DEBUG2\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nget_distance=y\nwhile getopts KL:o:p:Rst:T:v:X:? param\ndo\n\tcase $param in\n\tK)\tfl_clean=0;;\n\tL)\tfl_gen_switches=0\n\t\tfl_write_switches=1\n\t\tfile_switches=\"$OPTARG\"\n\t\tif [ ! -f \"$file_switches\" ]\n\t\t\tthen\n\t\t\techo \"opagenswitches: Error: switches file $file_switches does not exist\" >&2\n\t\t\tUsage\n\t\tfi\n\t\t;;\n\to)\tfile_output=\"$OPTARG\";;\n\tp)\texport PORTS=\"$OPTARG\";;\n\tR)\tget_distance=n;;\n\ts)  fl_gen_linksum=1;;\n\tt)\texport PORTS_FILE=\"$OPTARG\";;\n\tT)  file_topology=\"$OPTARG\";;\n\tv)\tn_verbose=$OPTARG;;\n\tX)  file_snapshot=\"$OPTARG\";;\n\t?)\tUsage;;\n\tesac\ndone\n\nshift $((OPTIND -1))\nif [ $# -ge 1 ]\nthen\n\tUsage\nfi\n\ncheck_ports_args opagenswitches\nif [ $fl_gen_switches == 0 -o \"x$file_topology\" != \"x\" -o \"x$file_snapshot\" != \"x\" ]\n\tthen\n\tif [ $fl_gen_linksum == 0 ]\n\t\tthen\n\t\techo \"opagenswitches: Error: -L, -T and -X must also use -s\" >&2\n\t\tUsage\n\tfi\nfi\n\n# Generate file_switches\nif [ $fl_gen_switches == 1 ]\n\tthen\n\techo -n \"\" > $file_switches\n\n\tIFS=$' \\t\\n'\n\tfor hfi_port in $PORTS\n\tdo\n\t\thfi=$(expr $hfi_port : '\\([0-9]*\\):[0-9]*')\n\t\tport=$(expr $hfi_port : '[0-9]*:\\([0-9]*\\)')\n\t\t$BINDIR/oparesolvehfiport $hfi $port >/dev/null\n\t\tif [ $? -ne 0 -o \"$hfi\" = \"\" -o \"$port\" = \"\" ]\n\t\tthen\n\t\t\techo \"opagenswitches: Error: Invalid port specification: $hfi_port\" >&2\n\t\t\tcontinue\n\t\tfi\n\n\t\tdisplay_progress \"Generating switches hfi:$hfi port:$port\"\n\t\tgen_switches \"$hfi\" \"$port\"\n\tdone\nelse\n\tOPASWITCHES_FILE=$file_switches\n\tresolve_switches_file \"opagenswitches\"\n\tcp -p $OPASWITCHES_FILE $FILE_OPASWITCHES\n\n\t# Check FILE_OPASWITCHES for include lines\n\tif cat $FILE_OPASWITCHES | grep include >/dev/null 2>&1\n\t\tthen\n\t\techo \"opagenswitches: Warning: $OPASWITCHES_FILE contains non-processed include statement(s)\" >&2\n\tfi\nfi\t# End of if [ $fl_gen_switches == 1 ]\n\n# Process $file_topology\nif [ $fl_write_switches == 1 -a $fl_gen_linksum == 1 ]\n\tthen\n\tIFS=$' \\t\\n'\n\tfor hfi_port in $PORTS\n\tdo\n\t\thfi=$(expr $hfi_port : '\\([0-9]*\\):[0-9]*')\n\t\tport=$(expr $hfi_port : '[0-9]*:\\([0-9]*\\)')\n\t\t$BINDIR/oparesolvehfiport $hfi $port >/dev/null\n\t\tif [ $? -ne 0 -o \"$hfi\" = \"\" -o \"$port\" = \"\" ]\n\t\t\tthen\n\t\t\techo \"opagenswitches: Error: Invalid port specification: $hfi_port\" >&2\n\t\t\tcontinue\n\t\tfi\n\n\t\tif [ -n \"$file_topology\" ]\n\t\t\tthen\n\t\t\tFF_TOPOLOGY_FILE=$file_topology\n\t\tfi\n\t\tresolve_topology_file \"opagenswitches\" \"$hfi:$port\"\n\t\tif [ -f \"$TOPOLOGY_FILE\" ]\n\t\t\tthen\n\t\t\tIFS=\";\"\n\n\t\t\t# Generate FILE_LINKSUM(s) from TOPOLOGY_FILE\n\t\t\tdisplay_progress \"Reading $TOPOLOGY_FILE and Generating FILE_LINKSUM Components\"\n\t\t\trm -f $FILE_LINKSUM_LEAF_EDGE\n\t\t\trm -f $FILE_LINKSUM_EDGE_HFI\n\t\t\tix=0\n\t\t\trm -f $FILE_TEMP\n\t\t\tcat $TOPOLOGY_FILE | $XML_EXTRACT -H -d \\; -e PortNum -e NodeType -e Port.NodeDesc > $FILE_TEMP\n\t\t\t$GEN_OPASWITCHES_HELPER proc_linksum $FILE_TEMP $FILE_LINKSUM_EDGE_HFI $FILE_LINKSUM_LEAF_EDGE\n\n\t\t\tif [ -a $FILE_LINKSUM_LEAF_EDGE ]\n\t\t\t\tthen\n\t\t\t\tdisplay_progress \"Processing $FILE_LINKSUM_LEAF_EDGE\"\n\t\t\t\trm -f $FILE_TEMP\n\t\t\t\tmv $FILE_LINKSUM_LEAF_EDGE $FILE_TEMP\n\t\t\t\tcat $FILE_TEMP | sort -t \\; -k3,3 -k1g,1 -k4g,4 > $FILE_LINKSUM_LEAF_EDGE\n\t\t\tfi\n\n\t\t\tif [ -a $FILE_LINKSUM_EDGE_HFI ]\n\t\t\t\tthen\n\t\t\t\tdisplay_progress \"Processing $FILE_LINKSUM_EDGE_HFI\"\n\t\t\t\trm -f $FILE_TEMP\n\t\t\t\tmv $FILE_LINKSUM_EDGE_HFI $FILE_TEMP\n\t\t\t\tcat $FILE_TEMP | sort -t \\; -k3,3 -k1g,1 -k4g,4 > $FILE_LINKSUM_EDGE_HFI\n\t\t\tfi\n\n\t\t\t# Generate GUID/NodeDesc links files\n\t\t\tdisplay_progress \"Generating links report and FILE_LINKS Components\"\n\t\t\trm -f $FILE_LINKS_LEAF_EDGE\n\t\t\trm -f $FILE_LINKS_EDGE_HFI\n\t\t\tix=0\n\n\t\t\tif [ -z \"$file_snapshot\" ]\n\t\t\t\tthen\n\t\t\t\tif [ \"$port\" -eq 0 ]\n\t\t\t\t\tthen\n\t\t\t\t\tport_opts=\"-h $hfi\"\t# default port to 1st active\n\t\t\t\telse\n\t\t\t\t\tport_opts=\"-h $hfi -p $port\"\n\t\t\t\tfi\n\t\t\t\teval $OPASAQUERY $port_opts -o desc >/dev/null 2>&1\n\t\t\t\tif [ $? -ne 0 ]\n\t\t\t\t\tthen\n\t\t\t\t\techo \"opagenswitches: Error: Fabric Links Not Available at hfi:$hfi port:$port\" >&2\n\t\t\t\t\tcontinue\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tFF_SNAPSHOT_FILE=$file_snapshot\n\t\t\t\tresolve_snapshot_file \"opagenswitches\" \"$hfi:$port\"\n\t\t\t\tif [ ! -f \"$SNAPSHOT_FILE\" ]\n\t\t\t\t\tthen\n\t\t\t\t\techo \"opagenswitches: Error: snapshot file $SNAPSHOT_FILE does not exist\" >&2\n\t\t\t\t\tcontinue\n\t\t\t\tfi\n\t\t\t\tport_opts=\"-X $SNAPSHOT_FILE\"\n\t\t\tfi\n\n\t\t\trm -f $FILE_TEMP\n\t\t\teval $OPA_REPORT $port_opts -q -x -o links | $XML_EXTRACT -H -d \\; -e NodeGUID -e PortNum -e NodeType -e NodeDesc > $FILE_TEMP\n\t\t\tif [ $? -eq 0 ]\n\t\t\t\tthen\n\t\t\t\t$GEN_OPASWITCHES_HELPER proc_links $FILE_TEMP $FILE_LINKS_EDGE_HFI $FILE_LINKS_LEAF_EDGE\n\n\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE ]\n\t\t\t\t\tthen\n\t\t\t\t\tdisplay_progress \"Processing $FILE_LINKS_LEAF_EDGE\"\n\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE $FILE_TEMP\n\t\t\t\t\tcat $FILE_TEMP | sort -t \\; -k4,4 -k2g,2 -k5g,5 > $FILE_LINKS_LEAF_EDGE\n\t\t\t\tfi\t# End of if [ -a $FILE_LINKS_LEAF_EDGE ]\n\n\t\t\t\tif [ -a $FILE_LINKS_EDGE_HFI ]\n\t\t\t\t\tthen\n\t\t\t\t\tdisplay_progress \"Processing $FILE_LINKS_EDGE_HFI\"\n\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\tmv $FILE_LINKS_EDGE_HFI $FILE_TEMP\n\t\t\t\t\tcat $FILE_TEMP | sort -t \\; -k4,4 -k2g,2 -k5g,5 > $FILE_LINKS_EDGE_HFI\n\t\t\t\tfi\t# End of if [ -a $FILE_LINKS_EDGE_HFI ]\n\n\t\t\t\t# Process NodeDesc in links files\n\t\t\t\trm -f $FILE_LINKS_LEAF_EDGE2\n\t\t\t\trm -f $FILE_LINKS_EDGE_HFI2\n\n\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE ]\n\t\t\t\t\tthen\n\t\t\t\t\tcp -p $FILE_LINKS_LEAF_EDGE $FILE_LINKS_LEAF_EDGE2\n\t\t\t\tfi\n\t\t\t\tif [ -a $FILE_LINKS_EDGE_HFI ]\n\t\t\t\t\tthen\n\t\t\t\t\tcp -p $FILE_LINKS_EDGE_HFI $FILE_LINKS_EDGE_HFI2\n\t\t\t\tfi\n\n\t\t\t\t# Process edge NodeDesc\n\t\t\t\tif [ -a $FILE_LINKS_EDGE_HFI2 ]\n\t\t\t\t\tthen\n\t\t\t\t\tdisplay_progress \"Processing edge NodeDesc\"\n\n\t\t\t\t\tix_line=1\n\t\t\t\t\tnodedesc_last=\"ZzQQQzZ\"\n\n\t\t\t\t\twhile read portnum1 nodetype1 nodedesc1 portnum1b nodetype1b nodedesc1b\n\t\t\t\t\tdo\n\t\t\t\t\t\tif [ \"$nodedesc1\" != \"$nodedesc_last\" ]\n\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\tn_hfis=`cat $FILE_LINKSUM_EDGE_HFI | grep \"$nodedesc1;\" | wc -l`\n\t\t\t\t\t\t\thfis=`cat $FILE_LINKSUM_EDGE_HFI | grep \"$nodedesc1;\" | cut -d \\; -f6 | tr '\\012' '|' | sed -e 's/|/$|/g' -e 's/|$//'`\n\t\t\t\t\t\t\tn_edges=`cat $FILE_LINKS_EDGE_HFI2 | grep -E \"$hfis\" | wc -l`\n\t\t\t\t\t\t\tn_edges_unique=`cat $FILE_LINKS_EDGE_HFI2 | grep -E \"$hfis\" | cut -d \\; -f4 | sort -u | wc -l`\n# ToDo: may be able to eliminate $edges\n\t\t\t\t\t\t\tedges=`cat $FILE_LINKS_EDGE_HFI2 | grep -E \"$hfis\" | cut -d \\; -f4`\n\t\t\t\t\t\t\tedges_unique=`cat $FILE_LINKS_EDGE_HFI2 | grep -E \"$hfis\" | cut -d \\; -f4 | sort -u`\n\t\t\t\t\t\t\tif [ $n_edges_unique == 1 ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tnodedesc2=$(expr \"$edges_unique\" : '\\([0-9a-zA-Z =_-]*\\)')\n\t\t\t\t\t\t\t\tif [ \"$nodedesc2\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_EDGE_HFI2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2;/$nodedesc1;/\" > $FILE_LINKS_EDGE_HFI2\n\t\t\t\t\t\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2$/$nodedesc1/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tnodedesc_last=$nodedesc1\n\t\t\t\t\t\t\telif [ $n_edges_unique == 2 ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tnodedesc2=`echo $edges_unique | head -n1`\n\t\t\t\t\t\t\t\tnodedesc2b=`echo $edges_unique  | tail -n1`\n\t\t\t\t\t\t\t\tn_edges2=`echo $edges | grep -c \"$nodedesc2\"`\n\t\t\t\t\t\t\t\tn_edges2b=`echo $edges | grep -c \"$nodedesc2b\"`\n\t\t\t\t\t\t\t\tif [ $n_edges2 -gt $n_edges2b ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\tif [ \"$nodedesc2\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_EDGE_HFI2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2;/$nodedesc1;/\" > $FILE_LINKS_EDGE_HFI2\n\t\t\t\t\t\t\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2$/$nodedesc1/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\telif [ $n_edges2b -gt $n_edges2 ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\tif [ \"$nodedesc2b\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_EDGE_HFI2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2b;/$nodedesc1;/\" > $FILE_LINKS_EDGE_HFI2\n\t\t\t\t\t\t\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2b$/$nodedesc1/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tnodedesc_last=$nodedesc1\n\t\t\t\t\t\t\telif [ $n_edges_unique -ge 3 ]\n\t\t\t\t\t\t\t\tthen\n# ToDo: add processing for 3 edges\n\t\t\t\t\t\t\t\tfiller=1\n\t\t\t\t\t\t\telif [ $n_edges_unique == 0 ]\n\t\t\t\t\t\t\t\tthen\n# ToDo: consider processing here\n\t\t\t\t\t\t\t  filler=1\n\t\t\t\t\t\t\tfi\t# End of if [ $n_edges_unique == 1 ]\n\n\t\t\t\t\t\tfi\t# End of if [ \"$nodedesc1\" != \"$nodedesc_last\" ]\n\n\t\t\t\t\t\tix_line=$((ix_line+1))\n\n\t\t\t\t\tdone < <( cat $FILE_LINKSUM_EDGE_HFI )\t# End of while read ... do\n\n\t\t\t\tfi\t# End of if [ -a $FILE_LINKS_EDGE_HFI2 ]\n\n\t\t\t\t# Process leaf NodeDesc\n\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\tthen\n\t\t\t\t\tdisplay_progress \"Processing leaf NodeDesc\"\n\n\t\t\t\t\tix_line=1\n\t\t\t\t\tnodedesc_last=\"ZzQQQzZ\"\n\n\t\t\t\t\twhile read portnum1 nodetype1 nodedesc1 portnum1b nodetype1b nodedesc1b\n\t\t\t\t\tdo\n\t\t\t\t\t\tif [ \"$nodedesc1\" != \"$nodedesc_last\" ]\n\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\tif [ -a $FILE_LINKSUM_LEAF_EDGE ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tn_edges=`cat $FILE_LINKSUM_LEAF_EDGE | grep \"$nodedesc1;\" | wc -l`\n\t\t\t\t\t\t\t\tedges=`cat $FILE_LINKSUM_LEAF_EDGE | grep \"$nodedesc1;\" | cut -d \\; -f4-6 | tr '\\012' '|' | sed -e 's/|/$|/g' -e 's/|$//'`\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tn_edges=0\n\t\t\t\t\t\t\t\tedges=\"ZzQQQzZ\"\n\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\tn_leaves=`cat $FILE_LINKS_LEAF_EDGE2 | grep -E \"$edges\" | wc -l`\n\t\t\t\t\t\t\tn_leaves_unique=`cat $FILE_LINKS_LEAF_EDGE2 | grep -E \"$edges\" | cut -d \\; -f4 | sort -u | wc -l`\n# ToDo: may be able to eliminate $leaves\n\t\t\t\t\t\t\tleaves=`cat $FILE_LINKS_LEAF_EDGE2 | grep -E \"$edges\" | cut -d \\; -f4`\n\t\t\t\t\t\t\tleaves_unique=`cat $FILE_LINKS_LEAF_EDGE2 | grep -E \"$edges\" | cut -d \\; -f4 | sort -u`\n\t\t\t\t\t\t\tif [ $n_leaves_unique == 1 ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tnodedesc2=$(expr \"$leaves_unique\" : '\\([0-9a-zA-Z =_-]*\\)')\n\t\t\t\t\t\t\t\tif [ \"$nodedesc2\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2;/$nodedesc1;/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tnodedesc_last=$nodedesc1\n\t\t\t\t\t\t\telif [ $n_leaves_unique == 2 ]\n\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\tnodedesc2=`echo $leaves_unique | head -n1`\n\t\t\t\t\t\t\t\tnodedesc2b=`echo $leaves_unique  | tail -n1`\n\t\t\t\t\t\t\t\tn_leaves2=`echo $leaves | grep -c \"$nodedesc2\"`\n\t\t\t\t\t\t\t\tn_leaves2b=`echo $leaves | grep -c \"$nodedesc2b\"`\n\t\t\t\t\t\t\t\tif [ $n_leaves2 -gt $n_leaves2b ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\tif [ \"$nodedesc2\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2;/$nodedesc1;/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\telif [ $n_leaves2b -gt $n_leaves2 ]\n\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\tif [ \"$nodedesc2b\" != \"$nodedesc1\" ]\n\t\t\t\t\t\t\t\t\t\tthen\n\t\t\t\t\t\t\t\t\t\trm -f $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tmv $FILE_LINKS_LEAF_EDGE2 $FILE_TEMP\n\t\t\t\t\t\t\t\t\t\tcat $FILE_TEMP | sed -e \"s/$nodedesc2b;/$nodedesc1;/\" > $FILE_LINKS_LEAF_EDGE2\n\t\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t\tnodedesc_last=$nodedesc1\n\t\t\t\t\t\t\telif [ $n_leaves_unique -ge 3 ]\n\t\t\t\t\t\t\t\tthen\n# ToDo: add processing for 3 leaves\n\t\t\t\t\t\t\t\tfiller=1\n\t\t\t\t\t\t\telif [ $n_leaves_unique == 0 ]\n\t\t\t\t\t\t\t\tthen\n# ToDo: consider processing here\n\t\t\t\t\t\t\t\tfiller=1\n\t\t\t\t\t\t\tfi\t# End of if [ $n_leaves_unique == 1 ]\n\n\t\t\t\t\t\tfi\t# End of if [ \"$nodedesc1\" != \"$nodedesc_last\" ]\n\n\t\t\t\t\t\tix_line=$((ix_line+1))\n\n\t\t\t\t\tdone  < <( cat $FILE_LINKSUM_LEAF_EDGE )\t# End of while read ... do\n\n\t\t\t\tfi\t# End of if [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\n\t\t\t\t# Process file_switches\n\t\t\t\tdisplay_progress \"Processing $file_switches\"\n\n\t\t\t\trm -f $FILE_TEMP\n\t\t\t\trm -f $FILE_TEMP2\n\t\t\t\tif [ -a $FILE_LINKS_LEAF_EDGE2 ]\n\t\t\t\t\tthen\n\t\t\t\t\tcat $FILE_LINKS_LEAF_EDGE2 | cut  -d \\; -f1,4 | sort -u >> $FILE_TEMP\n\t\t\t\t\tcat $FILE_LINKS_LEAF_EDGE2 | cut  -d \\; -f5,8 | sort -u >> $FILE_TEMP\n\t\t\t\tfi\n\t\t\t\tif [ -a $FILE_LINKS_EDGE_HFI2 ]\n\t\t\t\t\tthen\n\t\t\t\t\tcat $FILE_LINKS_EDGE_HFI2 | cut  -d \\; -f1,4 | sort -u >> $FILE_TEMP\n\t\t\t\tfi\n\t\t\t\tif [ -a $FILE_TEMP ]\n\t\t\t\t\tthen\n\t\t\t\t\tcat $FILE_TEMP | grep -v -e ';[0-9a-zA-Z_]*[ =-]' | sed -r -e 's/([0-9a-zA-Z_]+);([0-9a-zA-Z_]+)/s\\/\\(\\1:'\"$hfi:$port\"'\\),[0-9a-zA-Z =_-]*\\/\\\\1,\\2\\//' | sort -u > $FILE_TEMP2\n\t\t\t\t\tcat $FILE_OPASWITCHES | sed -r -f $FILE_TEMP2 > $FILE_OPASWITCHES2\n\t\t\t\t\trm -f $FILE_OPASWITCHES\n\t\t\t\t\tmv $FILE_OPASWITCHES2 $FILE_OPASWITCHES\n\t\t\t\tfi\n\n\t\t\tfi\t# End of if [ $? -eq 0 ]\n\n\t\telse\n\t\t\techo \"opagenswitches: Error: topology file $TOPOLOGY_FILE does not exist\" >&2\n\n\t\tfi\t# End of if [ -f \"$TOPOLOGY_FILE\" ]\n\n\tdone\t# End of for hfi_port in $PORTS\n\nfi\t# End of if [ $fl_write_switches == 1 -a $fl_gen_linksum == 1 ]\n\nif [ $fl_write_switches == 1 ]\n\tthen\n\tif [ -n \"$file_output\" ]\n\t\tthen\n\t\tif [ -f $file_output ]\n\t\t\tthen\n\t\t\tif [ `$OPAEXPAND_FILE $file_output | wc -l` -ne 0 ]\n\t\t\t\tthen\n\t\t\t\trm -f ${file_output}.bak\n\t\t\t\tmv $file_output ${file_output}.bak\n\t\t\tfi\n\t\tfi\n\t\trm -f $file_output\n\t\tcp -p $FILE_OPASWITCHES $file_output\n\telse\n\t\tcat $FILE_OPASWITCHES\n\tfi\n\tclean_files\n\tdisplay_progress \"Done\"\n\texit 0\nelse\n\tclean_files\n\tdisplay_progress \"Done (error)\"\n\texit 1\nfi\n\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# analyzes all the links in the fabric\n\ntempfile=`mktemp`\ntrap \"rm -f $tempfile; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $tempfile\" EXIT\n\n# optional override of defaults\nif [ -f /etc/sysconfig/opa/opafastfabric.conf ]\nthen\n\t. /etc/sysconfig/opa/opafastfabric.conf\nfi\n\n. /opt/opa/tools/opafastfabric.conf.def\n\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\n. $TOOLSDIR/ff_funcs\n\npunchlist=$FF_RESULT_DIR/punchlist.csv\ndel=';'\ntimestamp=$(date +\"%Y/%m/%d %T\")\n\nUsage_full()\n{\n\techo \"Usage: opalinkanalysis [-U] [-t portsfile] [-p ports] [-T topology_input]\" >&2\n\techo \"                  -X snapshot_input] [-x snapshot_suffix] [-c file] reports ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opalinkanalysis --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n\techo \"   -U - omit unexpected devices and links in punchlist from verify reports\" >&2\n\techo \"   -t portsfile - file with list of local HFI ports used to access\" >&2\n\techo \"                  fabric(s) for analysis, default is $CONFIG_DIR/opa/ports\" >&2\n\techo \"   -p ports - list of local HFI ports used to access fabric(s) for analysis\" >&2\n\techo \"              default is 1st active port\" >&2\n\techo \"              This is specified as hfi:port\" >&2\n\techo \"                 0:0 = 1st active port in system\" >&2\n\techo \"                 0:y = port y within system\" >&2\n\techo \"                 x:0 = 1st active port on HFI x\" >&2\n\techo \"                 x:y = HFI x, port y\" >&2\n\techo \"              The first HFI in the system is 1.  The first port on an HFI is 1.\" >&2\n\techo \"   -T topology_input - name of a topology input file to use.\" >&2\n\techo \"              Any %P markers in this filename will be replaced with the\" >&2\n\techo \"              hfi:port being operated on (such as 0:0 or 1:2)\" >&2\n\techo \"              default is $CONFIG_DIR/opa/topology.%P.xml\" >&2\n\techo \"              if NONE is specified, will not use any topology_input files\" >&2\n\techo \"              See opareport for more information on topology_input files\" >&2\n\techo \"   -X snapshot_input - perform analysis using data in snapshot_input\" >&2\n\techo \"              snapshot_input must have been generated via a previous\" >&2\n\techo \"              opareport -o snapshot run.\" >&2\n\techo \"              If errors report is specified, snapshot must have been generated\" >&2\n\techo \"              with opareport -s option\" >&2\n\techo \"              When this option is used, only one port may be specified\" >&2\n\techo \"              to select a topology_input file (unless -T specified)\">&2\n\techo \"              When this option is used, clearerrors and clearhwerrors reports\" >&2\n\techo \"              are not permitted\" >&2\n\techo \"   -x snapshot_suffix - create a snapshot file per selected port\" >&2\n\techo \"              The files will be created in FF_RESULT_DIR with names of the form:\">&2\n\techo \"              snapshotSUFFIX.HFI:PORT.xml.\">&2\n\techo \"   -c file - error thresholds config file\" >&2\n\techo \"             default is $CONFIG_DIR/opa/opamon.si.conf\" >&2\n\techo \"    reports - The following reports are supported\" >&2\n\techo \"         errors - link error analysis\" >&2\n\techo \"         slowlinks - links running slower than expected\" >&2\n\techo \"         misconfiglinks - links configured to run slower than supported\" >&2\n\techo \"         misconnlinks - links connected with mismatched speed potential\" >&2\n\techo \"         all - includes all reports above\" >&2\n\techo \"         verifylinks - verify links against topology input\" >&2\n\techo \"         verifyextlinks - verify links against topology input\" >&2\n\techo \"                     limit analysis to links external to systems\" >&2\n\techo \"         verifyfis - verify FIs against topology input\" >&2\n\techo \"         verifysws - verify Switches against topology input\" >&2\n\techo \"         verifyrtrs - verify Routers against topology input\" >&2\n\techo \"         verifynodes - verify FIs, Switches and Routers against topology input\" >&2\n\techo \"         verifysms - verify SMs against topology input\" >&2\n\techo \"         verifyall - verifies links, FIs, Switches, Routers and SMs\" >&2\n\techo \"                     against topology input\" >&2\n\techo \"         clearerrors - clear error counters, uses PM if available\" >&2\n\techo \"         clearhwerrors - clear HW error counters, bypasses PM\" >&2\n\techo \"         clear - includes clearerrors and clearhwerrors\" >&2\n  \techo >&2\n\techo \"A punchlist of bad links is also appended to FF_RESULT_DIR/punchlist.csv\" >&2\n  \techo >&2\n\techo \" Environment:\" >&2\n\techo \"   PORTS - list of ports, used in absence of -t and -p\" >&2\n\techo \"   PORTS_FILE - file containing list of ports, used in absence of -t and -p\" >&2\n\techo \"   FF_TOPOLOGY_FILE - file containing topology_input, used in absence of -T\" >&2\n\techo \"example:\">&2\n\techo \"   opalinkanalysis errors\" >&2\n\techo \"   opalinkanalysis errors clearerrors\" >&2\n\techo \"   opalinkanalysis -p '1:1 1:2 2:1 2:2'\" >&2\n\texit 0\n}\n\nUsage()\n{\n\techo \"Usage: opalinkanalysis [-U] reports ...\" >&2\n\techo \"              or\" >&2\n\techo \"       opalinkanalysis --help\" >&2\n\techo \"   --help - produce full help text\" >&2\n  \techo >&2\n\techo \"   -U - omit unexpected devices and links in punchlist from verify reports\" >&2\n\techo \"    reports - The following reports are supported\" >&2\n\techo \"         errors - link error analysis\" >&2\n\techo \"         slowlinks - links running slower than expected\" >&2\n\techo \"         misconfiglinks - links configured to run slower than supported\" >&2\n\techo \"         misconnlinks - links connected with mismatched speed potential\" >&2\n\techo \"         all - includes all reports above\" >&2\n\techo \"         verifylinks - verify links against topology input\" >&2\n\techo \"         verifyextlinks - verify links against topology input\" >&2\n\techo \"                     limit analysis to links external to systems\" >&2\n\techo \"         verifyfis - verify FIs against topology input\" >&2\n\techo \"         verifysws - verify Switches against topology input\" >&2\n\techo \"         verifyrtrs - verify Routers against topology input\" >&2\n\techo \"         verifynodes - verify FIs, Switches and Routers against topology input\" >&2\n\techo \"         verifysms - verify SMs against topology input\" >&2\n\techo \"         verifyall - verifies links, FIs, Switches, Routers and SMs\" >&2\n\techo \"                     against topology input\" >&2\n\techo \"         clearerrors - clear error counters, uses PM if available\" >&2\n\techo \"         clearhwerrors - clear HW error counters, bypasses PM\" >&2\n\techo \"         clear - includes clearerrors and clearhwerrors\" >&2\n  \techo >&2\n\techo \"A punchlist of bad links is also appended to FF_RESULT_DIR/punchlist.csv\" >&2\n  \techo >&2\n\techo \"example:\">&2\n\techo \"   opalinkanalysis errors\" >&2\n\techo \"   opalinkanalysis errors clearerrors\" >&2\n\texit 2\n}\n\nif [ x\"$1\" = \"x--help\" ]\nthen\n\tUsage_full\nfi\n\nappend_punchlist()\n# $1 = device\n# $2 = issue\n{\n\techo \"$timestamp$del$1$del$2\" >> $punchlist\n}\n\ngen_errors_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\t#opareport -q \"$@\" -o errors -x | $BINDIR/opaxmlextract -H -d \\; -e LinkErrors.Link.Port.NodeGUID -e LinkErrors.Link.Port.PortNum -e LinkErrors.Link.Port.NodeType -e LinkErrors.Link.Port.NodeDesc|while read line\n\topareport -q \"$@\" -o errors -x | $BINDIR/opaxmlextract -H -d \\; -e LinkErrors.Link.Port.NodeDesc -e LinkErrors.Link.Port.PortNum|while read desc port\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\telse\n\t\t\tappend_punchlist \"$port1 $desc p$port\" \"Link errors\"\n\t\t\tport1=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_slowlinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\t#opareport -q \"$@\" -o slowlinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksExpected.Link.Port.NodeGUID -e LinksExpected.Link.Port.PortNum -e LinksExpected.Link.Port.NodeType -e LinksExpected.Link.Port.NodeDesc|while read line\n\topareport -q \"$@\" -o slowlinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksExpected.Link.Port.NodeDesc -e LinksExpected.Link.Port.PortNum|while read desc port\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\telse\n\t\t\tappend_punchlist \"$port1 $desc p$port\" \"Link speed/width lower than expected\"\n\t\t\tport1=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_misconfiglinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\t#opareport -q \"$@\" -o misconfiglinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksConfig.Link.Port.NodeGUID -e LinksConfig.Link.Port.PortNum -e LinksConfig.Link.Port.NodeType -e LinksConfig.Link.Port.NodeDesc|while read line\n\topareport -q \"$@\" -o misconfiglinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksConfig.Link.Port.NodeDesc -e LinksConfig.Link.Port.PortNum|while read desc port\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\telse\n\t\t\tappend_punchlist \"$port1 $desc p$port\" \"Link speed/width configured lower than supported\"\n\t\t\tport1=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_misconnlinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tline1=\n\t#opareport -q \"$@\" -o misconnlinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksMismatched.Link.Port.NodeGUID -e LinksMismatched.Link.Port.PortNum -e LinksMismatched.Link.Port.NodeType -e LinksMismatched.Link.Port.NodeDesc|while read line\n\topareport -q \"$@\" -o misconnlinks -x | $BINDIR/opaxmlextract -H -d \\; -e LinksMismatched.Link.Port.NodeDesc -e LinksMismatched.Link.Port.PortNum|while read desc port\n\tdo\n\t\tif [ x\"$line1\" = x ]\n\t\tthen\n\t\t\tline1=\"$desc p$port\"\n\t\telse\n\t\t\tappend_punchlist \"$line1 $desc p$port\" \"Link speed/width mismatch\"\n\t\t\tline1=\n\t\tfi\n\tdone\n\t)\n}\n\nappend_verify_punchlist()\n# $1 = device\n# $2 = issue\n{\n\tif [ $skip_unexpected = y ]\n\tthen\n\t\tcase \"$2\" in\n\t\tUnexpected*)\t> /dev/null;;\n\t\t*) echo \"$timestamp$del$1$del$2\" >> $punchlist;;\n\t\tesac\n\telse\n\t\techo \"$timestamp$del$1$del$2\" >> $punchlist\n\tfi\n\n}\n\ngen_verifylinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\tport2=\n\tprob=\n\t#eval opareport -q \"$@\" -o verifylinks -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyLinks.Link.Port.NodeGUID -e VerifyLinks.Link.Port.PortNum -e VerifyLinks.Link.Port.NodeType -e VerifyLinks.Link.Port.NodeDesc|while read line\n\teval opareport -q \"$@\" -o verifylinks -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyLinks.Link.Port.NodeDesc -e VerifyLinks.Link.Port.PortNum -e VerifyLinks.Link.Port.Problem -e VerifyLinks.Link.Problem|while read desc port portprob linkprob\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\t\tprob=\"$portprob\"\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$linkprob\t# unlikely to occur here\n\t\t\tfi\n\t\telif [ x\"$port2\" = x ]\n\t\tthen\n\t\t\tport2=\"$desc p$port\"\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$portprob\n\t\t\tfi\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$linkprob\t# unlikely to occur here\n\t\t\tfi\n\n\t\t\tif [ x\"$prob\" != x ]\n\t\t\tthen\n\t\t\t\tappend_verify_punchlist \"$port1 $port2\" \"$prob\"\n\t\t\t\tport1=\n\t\t\t\tport2=\n\t\t\t\tprob=\n\t\t\tfi\n\t\telse\n\t\t\t# separate record for link problem\n\t\t\tprob=$linkprob\n\t\t\tappend_verify_punchlist \"$port1 $port2\" \"$prob\"\n\t\t\tport1=\n\t\t\tport2=\n\t\t\tprob=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_verifyextlinks_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\t# TBD - is cable information available?\n\texport IFS=';'\n\tport1=\n\tport2=\n\tprob=\n\t#eval opareport -q \"$@\" -o verifyextlinks -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyExtLinks.Link.Port.NodeGUID -e VerifyExtLinks.Link.Port.PortNum -e VerifyExtLinks.Link.Port.NodeType -e VerifyExtLinks.Link.Port.NodeDesc|while read line\n\teval opareport -q \"$@\" -o verifyextlinks -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyExtLinks.Link.Port.NodeDesc -e VerifyExtLinks.Link.Port.PortNum -e VerifyExtLinks.Link.Port.Problem -e VerifyExtLinks.Link.Problem|while read desc port portprob linkprob\n\tdo\n\t\tif [ x\"$port1\" = x ]\n\t\tthen\n\t\t\tport1=\"$desc p$port\"\n\t\t\tprob=\"$portprob\"\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$linkprob\t# unlikely to occur here\n\t\t\tfi\n\t\telif [ x\"$port2\" = x ]\n\t\tthen\n\t\t\tport2=\"$desc p$port\"\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$portprob\n\t\t\tfi\n\t\t\tif [ x\"$prob\" = x ]\n\t\t\tthen\n\t\t\t\tprob=$linkprob\t# unlikely to occur here\n\t\t\tfi\n\n\t\t\tif [ x\"$prob\" != x ]\n\t\t\tthen\n\t\t\t\tappend_verify_punchlist \"$port1 $port2\" \"$prob\"\n\t\t\t\tport1=\n\t\t\t\tport2=\n\t\t\t\tprob=\n\t\t\tfi\n\t\telse\n\t\t\t# separate record for link problem\n\t\t\tprob=$linkprob\n\t\t\tappend_verify_punchlist \"$port1 $port2\" \"$prob\"\n\t\t\tport1=\n\t\t\tport2=\n\t\t\tprob=\n\t\tfi\n\tdone\n\t)\n}\n\ngen_verifyfis_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\texport IFS=';'\n\t#eval opareport -q \"$@\" -o verifyfis -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyFIs.Node.NodeGUID -e VerifyFIs.Node.Desc -e VerifyFIs.Node.Problem|while read line\n\teval opareport -q \"$@\" -o verifyfis -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyFIs.Node.NodeDesc -e VerifyFIs.Node.Problem |while read desc prob\n\tdo\n\t\tappend_verify_punchlist \"$desc\" \"$prob\"\n\tdone\n\t)\n}\n\ngen_verifysws_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\texport IFS=';'\n\t#eval opareport -q \"$@\" -o verifysws -x | $BINDIR/opaxmlextract -H -d \\; -e VerifySWs.Node.NodeGUID -e VerifySWs.Node.Desc -e VerifySWs.Node.Problem|while read line\n\teval opareport -q \"$@\" -o verifysws -x | $BINDIR/opaxmlextract -H -d \\; -e VerifySWs.Node.NodeDesc -e VerifySWs.Node.Problem |while read desc prob\n\tdo\n\t\tappend_verify_punchlist \"$desc\" \"$prob\"\n\tdone\n\t)\n}\n\ngen_verifyrtrs_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\texport IFS=';'\n\t#eval opareport -q \"$@\" -o verifyrtrs -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyRTs.Node.NodeGUID -e VerifyRTs.Node.Desc -e VerifyRTs.Node.Problem|while read line\n\teval opareport -q \"$@\" -o verifyrtrs -x | $BINDIR/opaxmlextract -H -d \\; -e VerifyRTs.Node.NodeDesc -e VerifyRTs.Node.Problem |while read desc prob\n\tdo\n\t\tappend_verify_punchlist \"$desc\" \"$prob\"\n\tdone\n\t)\n}\n\ngen_verifysms_punchlist()\n# $@ =  snapshot, port and/or topology selection options for opareport\n{\n\t(\n\texport IFS=';'\n\t#eval opareport -q \"$@\" -o verifysms -x | $BINDIR/opaxmlextract -H -d \\; -e VerifySMs.SM.NodeGUID -e VerifySMs.SM.Desc -e VerifySMs.SM.Problem|while read line\n\teval opareport -q \"$@\" -o verifysms -x | $BINDIR/opaxmlextract -H -d \\; -e VerifySMs.SM.NodeDesc -e VerifySMs.SM.PortNum -e VerifySMs.SM.Problem |while read desc port prob\n\tdo\n\t\t# port number is optional in topology_input, so for missing SMs\n\t\t# it might not be reported\n\t\tif [ x\"$port\" != x ]\n\t\tthen\n\t\t\tappend_verify_punchlist \"$desc p$port\" \"$prob\"\n\t\telse\n\t\t\tappend_verify_punchlist \"$desc\" \"$prob\"\n\t\tfi\n\tdone\n\t)\n}\n\nreport_opts=\"\"\nverify_opts=\"\"\nerrors=n\nclearerrors=n\nclearhwerrors=n\nslowlinks=n\nmisconfiglinks=n\nmisconnlinks=n\nverifylinks=n\nverifyextlinks=n\nverifyfis=n\nverifysws=n\nverifyrtrs=n\nverifysms=n\nreports=\"\"\nread_snapshot=n\nsnapshot_input=\nsave_snapshot=n\nsnapshot_suffix=\nskip_unexpected=n\nconfig_file=\"$CONFIG_DIR/opa/opamon.si.conf\"\nwhile getopts Ut:p:T:X:x:c: param\ndo\n\tcase $param in\n\tU)\tskip_unexpected=y;;\n\tp)\texport PORTS=\"$OPTARG\";;\n\tt)\texport PORTS_FILE=\"$OPTARG\";;\n\tT)\texport FF_TOPOLOGY_FILE=\"$OPTARG\";;\n\tX)\tread_snapshot=y; export snapshot_input=\"$OPTARG\";;\n\tx)\tsave_snapshot=y; export snapshot_suffix=\"$OPTARG\";;\n\tc)\tconfig_file=\"$OPTARG\";;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\nif [ $# -le 0 ]\nthen\n\techo \"opalinkanalysis: Error: must specify at least 1 report\" >&2\n\tUsage\nfi\nwhile [ $# -gt 0 ]\ndo\n\tcase \"$1\" in\n\terrors) errors=y;;\n\tslowlinks) slowlinks=y;;\n\tmisconfiglinks) misconfiglinks=y;;\n\tmisconnlinks) misconnlinks=y;;\n\tall) errors=y; slowlinks=y; misconfiglinks=y; misconnlinks=y;;\n\tverifylinks) verifylinks=y;;\n\tverifyextlinks) verifyextlinks=y;;\n\tverifyfis) verifyfis=y;;\n\tverifysws) verifysws=y;;\n\tverifyrtrs) verifyrtrs=y;;\n\tverifynodes)  verifyfis=y; verifysws=y; verifyrtrs=y;;\n\tverifysms) verifysms=y;;\n\tverifyall) verifylinks=y; verifyfis=y; verifysws=y; verifyrtrs=y; verifysms=y;;\n\tclearerrors) clearerrors=y;;\n\tclearhwerrors) clearhwerrors=y;;\n\tclear) clearerrors=y; clearhwerrors=y;;\n\t*)\n\t\techo \"opalinkanalysis: Invalid report: $1\" >&2\n\t\tUsage;;\n\tesac\n\tshift\ndone\n\nfor report in errors slowlinks misconfiglinks misconnlinks verifylinks verifyextlinks verifyfis verifysws verifyrtrs verifysms\ndo\n\tyes=$(eval echo \\$$report)\n\tif [ $yes = y ]\n\tthen\n\t\tcase $report in\n\t\tverify*)\n\t\t\tverify_opts=\"$verify_opts -o $report\"\n\t\t\treports=\"$reports $report\";;\n\t\t*)\n\t\t\treport_opts=\"$report_opts -o $report\"\n\t\t\treports=\"$reports $report\";;\n\t\tesac\n\tfi\ndone\n\nsnapshopt_opts=\nif [ $errors = y ]\nthen\n\tsnapshopt_opts=\"-s\"\n\treport_opts=\"$report_opts -c '$config_file'\"\nfi\n\nif [ $read_snapshot = y ]\nthen\n\tif [ $clearerrors = y -o $clearhwerrors = y ]\n\tthen\n\t\techo \"opalinkanalysis: errors and clearhwerrors reports not available with -X\" >&2\n\t\tUsage\n\tfi\n\tif [ $save_snapshot = y ]\n\tthen\n\t\techo \"opalinkanalysis: -X and -x options are mutually exclusive\" >&2\n\tfi\nfi\n\ncheck_ports_args opalinkanalysis\n\nports=0\nfor hfi_port in $PORTS\ndo\n    ports=$(($ports + 1))\ndone\nif [ $ports -lt 1 ]\nthen\n    # should not happen, but be safe\n    ports=1\n    PORTS=\"0:0\"\nfi\nif [ $read_snapshot = y -a $ports -gt 1 ]\nthen\n\techo \"opalinkanalysis: -X option cannot be used with more than 1 port\" >&2\n\tUsage\nfi\n\n\nstatus=0\nfor hfi_port in $PORTS\ndo\n\t# TBD - make some ff_funcs to handle these conversions and checks\n\thfi=$(expr $hfi_port : '\\([0-9]*\\):[0-9]*')\n\tport=$(expr $hfi_port : '[0-9]*:\\([0-9]*\\)')\n\tif [ \"$hfi\" = \"\" -o \"$port\" = \"\" ]\n\tthen\n\t\techo \"opalinkanalysis: Error: Invalid port specification: $hfi_port\" >&2\n\t\tstatus=1\n\t\tcontinue\n\tfi\n\tif [ \"$port\" -eq 0 ]\n\tthen\n\t\tport_opts=\"-h $hfi\" # default port to 1st active\n\telse\n\t\tport_opts=\"-h $hfi -p $port\"\n\tfi\n\tresolve_topology_file opalinkanalysis \"$hfi:$port\"\n\ttopt=\"\"\n\tif [ \"$TOPOLOGY_FILE\" != \"\" ]\n\tthen\n\t\ttopt=\"-T '$TOPOLOGY_FILE'\"\n\tfi\n\n\tif [ \"$read_snapshot\" = n ]\n\tthen\n\t\tif [ $ports -gt 1 ]\n\t\tthen\n\t\t\techo \"Fabric $hfi:$port Analysis:\"\n\t\tfi\n\t\tif [ \"$save_snapshot\" = y ]\n\t\tthen\n\t\t\tsnapshot_input=$FF_RESULT_DIR/snapshot$snapshot_suffix.$hfi:$port.xml\n\t\telse\n\t\t\tsnapshot_input=$tempfile\n\t\tfi\n\t\t# generate a snapshot per fabric then analyze\n\t\topareport $port_opts $snapshopt_opts -o snapshot > $snapshot_input\n\tfi\n\n\t# generate human readable reports\n\tif [ x\"$report_opts\" != x ]\n\tthen\n\t\teval opareport -X $snapshot_input $topt $report_opts \n\tfi\n\n\tif [ x\"$verify_opts\" != x ]\n\tthen\n\t\tif [ \"$TOPOLOGY_FILE\" != \"\" ]\n\t\tthen\n\t\t\teval opareport -X $snapshot_input $topt $verify_opts\n\t\telse\n\t\t\techo \"Unable to verify topology for $hfi:$port, no topology file found\" >&2\n\t\t\tstatus=1\n\t\tfi\n\tfi\n\n\t# note: if snapshot=y, these reports are not permitted\n\tif [ \"$clearerrors\" = y ]\n\tthen\n\t\topareport $port_opts -C -c \"$config_file\" -o none\n\tfi\n\tif [ \"$clearhwerrors\" = y ]\n\tthen\n\t\topareport $port_opts -M -C -c \"$config_file\" -o none\n\tfi\n\n\t# now generate punchlist\n\tfor report in $reports\n\tdo\n\t\tcase \"$report\" in\n\t\terrors) gen_errors_punchlist -X $snapshot_input -c \"$config_file\";;\n\t\tslowlinks) gen_slowlinks_punchlist -X $snapshot_input;;\n\t\tmisconfiglinks) gen_misconfiglinks_punchlist -X $snapshot_input;;\n\t\tmisconnlinks) gen_misconnlinks_punchlist -X $snapshot_input;;\n\t\tverifylinks) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifylinks_punchlist -X $snapshot_input $topt;;\n\t\tverifyextlinks) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifyextlinks_punchlist -X $snapshot_input $topt;;\n\t\tverifyfis) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifyfis_punchlist -X $snapshot_input $topt;;\n\t\tverifysws) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifysws_punchlist -X $snapshot_input $topt;;\n\t\tverifyrtrs) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifyrtrs_punchlist -X $snapshot_input $topt;;\n\t\tverifysms) [ \"$TOPOLOGY_FILE\" != \"\" ] && gen_verifysms_punchlist -X $snapshot_input $topt;;\n\t\t*) continue;;\t# should not happen\n\t\tesac\n\tdone\n\n\tif [ $read_snapshot = y ]\n\tthen\n\t\tbreak\n\tfi\n\n\tif [ $ports -gt 1 ]\n\tthen\n\t\techo \"-------------------------------------------------------------------------------\"\n\tfi\n\ndone\n\nrm -f $tempfile\nexit $status\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\ncmdName=opamanageswitch\n\ncaptureCapable=n\n\nresultsFile=$PWD/opamanageswitch.res\n\n# Functions\n\n# checkCapture\n\ncheckCapture()\n{\n\tif [ -x $bindir/opaswcapture ]\n\tthen\n\t\tcaptureCapable=y\n\tfi\n}\n\n# Usage\n\nUsage()\n{\n    if [ $captureCapable = y ]\n\tthen\n\techo \"Usage: $cmdName -t target-guid [-H] [-v] [-h hfi] [-p port] [ -x] [ -f fileName] [-r] [-C configOption] [-i integer-value] [-s string-value] [-c captureFile] operation\"\n#\techo \"Usage: $cmdName -t target-guid [-H] [-v] [-h hfi] [-p port] [ -x] [-S] [ -f fileName] [-r] [-C configOption] [-i integer-value] [-s string-value] [ -F ] [-c captureFile] operation\"\n\telse\n\techo \"Usage: $cmdName -t target-guid [-H] [-v] [-h hfi] [-p port] [ -x] [ -f fileName] [-r] [-C configOption] [-i integer-value] [-s string-value] operation\"\n#\techo \"Usage: $cmdName -t target-guid [-H] [-v] [-h hfi] [-p port] [ -x] [-S] [ -f fileName] [-r] [-C configOption] [-i integer-value] [-s string-value] [ -F ] operation\"\n\tfi\n\techo \"         -H - help (this message)\"\n\techo \"         -v - verbose - additional output\"\n\techo \"         -t - guid of target switch in hex format, e.g. 0x00066a00e3001234\"\n\techo \"         -h - hfi, numbered 1..n, 0= -p port will be a system wide port num\"\n\techo \"         -p - port, numbered 1..n, 0=1st active (default is 1st active)\"\n\techo \"         -x - clobber previous results file\"\n\techo \"         -f - fileName of the emfw file to be used in fwUpdate operation - must be a valid emfw file with .emfw suffix\"\n\techo \"         -r - reset switch after fwUpdate (only valid with fwUpdate operation)\"\n\techo \"         -C - configuration option for setConfigValue operation\"\n\techo \"              mtucap - mtu capability - use -i for integer value (4-2048, 5-4096)\"\n\techo \"              vlcap - vl capability - use -i for integer value (1-1VL, 2-2VLs, 3-4VLs, 4-8VLs, 5-15VLs)\"\n\techo \"              linkwidth - link width supported - use -i for integer value (1-1X, 2-4X, 3-1X/4X, 4-8X, 5-1X/8X, 6-4X/8X, 7-1X/4X/8X)\"\n\techo \"              vlcreditdist - VL credit distribution - use -i for integer value (0, 1, 2, 3, or 4)\"\n\techo \"              linkspeed - link speed supported - use -i for integer value (1-SDR, 2-DDR, 3-SDR/DDR, 4-QDR, 7-SDR/DDR/QDR)\"\n\techo \"         -i - integer value\"\n\techo \"         -s - string value\"\n    if [ $captureCapable = y ]\n\tthen\n\techo \"         -c - filename of capture output file\"\n\tfi\n#\techo \"         -F - perform fwUpdate operation on secondary (failsafe) EEPROM\"\n\techo \"         operation:\"\n\techo \"            fwUpdate - perform firmware update using fileName parameter, must be an emfw file\"\n\techo \"            fwVerify - perform firmware validation - validate firmware in primary/secondary EEPROMs, report which was booted\"\n\techo \"            ping - test for switch presence\"\n\techo \"            reboot - reboot switch\"\n\techo \"            setConfigValue - update configuration value - use -C for config option and -i for integer value\"\n\techo \"            setOPANodeDesc - set the OPA node description - use -s for string value of node desc\"\n\techo \"            setPassword - set the vendor key (prompts for password to be used for subsequent switch access)\"\n\techo \"            showConfig - report user-configurable settings\"\n\techo \"            showFwVersion - report firmware version running on switch\"\n\techo \"            showPowerCooling - report status of power supplies and fans\"\n    if [ $captureCapable = y ]\n\tthen\n\techo \"            capture - perform capture of switch\"\n\tfi\n\techo \"            showVPD - report VPD information of switch\"\n#\techo \"            compareEEPROM - compare EEPROMs\"\n\techo \"\"\n\techo \"         Examples:\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 -f Intel_12000_V1_firmware.7.2.0.0.32.emfw fwUpdate\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 reboot\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 showFwVersion\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 -s i12k1234 setOPANodeDesc\"\n\techo \"            opamanageswitch -t 0x00066a00e3001234 -C mtucap -i 4 setConfigValue\"\n\techo \"            opamanageswitch -H\"\n\techo \"\"\n\techo \"         Results are recorded in opamanageswitch.res file in the current directory - use -x option to clobber and create anew\"\n\n\texit 1\n}\n\n# UsageWarn\n\nUsageWarn()\n{\n\techo \"Enter 'opamanageswitch -H' for help\"\n\texit 1\n}\n\n# Log results\n\nlogResults()\n{\n\tcat $1 >> $resultsFile\n}\n\n# Check exit\n\ncheck_exit()\n{\n\tstatus=$1\n\tfile=$2\n\tif [ $status -ne 0 ]\n\tthen\n\t\tif [ \"$file\" != \"\" ]\n\t\tthen\n\t\t\tgrep -i error $file\n\t\t\tgrep mismatch $file\n\t\t\tlogResults $file\n\t\t\trm -f $file\n\t\tfi\n\t\texit 1\n\tfi\n}\n\n# Execute command\n\nexecCommand()\n{\n\techo Executing $cmd $args >> $resultsFile\n\tif [ \"$verboseArg\" != \"-v\" -a \"$teeOut\" != \"yes\" ]\n\tthen\n\t\t$cmd $args > $tmpFile 2>&1\n\telse\n\t\t$cmd $args | grep -v completed | tee $tmpFile 2>&1\n\tfi\n}\n\n# Get board id\n\ngetBoardID()\n{\n\tcmd=$bindir/opaswquery\n\targs=\"-t $target $hfiPortArgs $verboseArg $quietArg -Q 12\"\n\ttmpFile=.query\n\texecCommand\n\tcheck_exit $? .query\n\tboardID=`grep BoardID .query | cut -d ' ' -f 2`\n\tlogResults .query\n\trm -f .query\n\treturn 0\n}\n\n\nfileNameArg=\nhfiArg=\nportArg=\nfailSafeArg=\nresetArg=\nconfigOptArg=\nintegerArg=\nstringArg=\ncaptureOutArg=\nclobberArg=\nhelpArg=\nverboseArg=\nquietArg=\nteeOut=\n\noptions='C:Ff:Hh:i:p:rs:t:c:vx'\nbindir=/opt/opa/tools\n\ncheckCapture\n\nwhile getopts \"$options\" param\ndo\n\tcase $param in\n\tc)\n\t\tcaptureOutArg=\"$OPTARG\";;\n\tC)\n\t\tconfigOptArg=\"$OPTARG\";;\n\tF)\n\t\tfailSafeArg=-F;;\n\tf)\n\t\tfileNameArg=\"$OPTARG\";;\n\tH)\n\t\thelpArg=\"help\";;\n\th)\n\t\thfiArg=\"-h $OPTARG\";;\n\ti)\n\t\tintegerArg=\"$OPTARG\";;\n\tp)\n\t\tportArg=\"-o $OPTARG\";;\n\tr)\n\t\tresetArg=\"-S\";;\n\ts)\n\t\tstringArg=\"$OPTARG\";;\n\tt)\n\t\ttarget=\"$OPTARG\";;\n\tv)\n\t\tverboseArg=-v;;\n\tx)\n\t\tclobberArg=1;;\n\t?)\n\t\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\nif [ \"$helpArg\" == \"help\" ]\nthen\n\tUsage\nfi\n\nnumParams=$#\nif [ $numParams -gt 1 ]\nthen\n\techo \"Error: only one operation allowed\"\n\tUsageWarn\nfi\n\noperation=$1\n\nif [ \"$operation\" = \"\" ]\nthen\n\techo \"Must provide an operation\"\n\tUsageWarn\nfi\n\nif [ \"$target\" = \"\" ]\nthen\n\techo \"Must provide a target guid\"\n\tUsageWarn\nfi\n\nif [ $captureCapable != y -a \"$operation\" == \"capture\" ]\nthen\n\techo \"Capture operation is not available\"\n\tUsageWarn\nfi\n\nif [ \"$fileNameArg\" != \"\" -a \"$operation\" != \"fwUpdate\" ]\nthen\n\techo \"Filename parameter is only valid for fwUpdate operation\"\n\tUsageWarn\nfi\n\nif [ \"$configOptArg\" != \"\" -a \"$operation\" != \"setConfigValue\" ]\nthen\n\techo \"configOption parameter is only valid for configure operation\"\n\tUsageWarn\nfi\n\nif [ \"$captureOutArg\" != \"\" -a \"$operation\" != \"capture\" ]\nthen\n\tif [ $captureCapable != y ]\n\tthen\n\t\techo \"Capture operation is not available\"\n\telse\n\t\techo \"Capture outfile parameter is only valid for capture operation\"\n\tfi\n\tUsageWarn\nfi\n\nif [ \"$clobberArg\" = \"1\" ]\nthen\n\t> $resultsFile\nelse\n\techo \"\" >> $resultsFile\nfi\necho \"********************\" >> $resultsFile\ndate >> $resultsFile\necho Beginning operation: $operation >> $resultsFile\necho \"********************\" >> $resultsFile\n\nif [ \"$verboseArg\" != \"-v\" ]\nthen\n\tquietArg=-q\nelse\n\tquietArg=\nfi\n\ncase $operation in\ncapture)\n\tif [ \"$captureOutArg\" = \"\" ]\n\tthen\n\t\techo \"Must provide a capture outfile parameter for capture operation\"\n\t\tUsageWarn\n\tfi\n\tquietArg=\n\techo \"Performing switch capture...\"\n\tcmd=$bindir/opaswcapture\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $captureOutArg\"\n\ttmpFile=.cap\n\tteeOut=yes\n\texecCommand\n\tcheck_exit $? .cap\n\tlogResults .cap\n\trm -f .cap\n\t;;\nfwUpdate)\n\t# must have a filename parameter\n\tif [ \"$fileNameArg\" = \"\" ]\n\tthen\n\t\techo \"Must provide a fileName parameter for fwUpdate operation\"\n\t\tUsageWarn\n\tfi\n\n\t# verify filename is for V1 silicon\n\techo $fileNameArg | grep V1 > /dev/null 2>&1\n\tif [ $? -ne 0 ]\n\tthen\n\t\techo \"$fileNameArg does not appear to be a V1 silicon emfw file\"\n\t\tUsageWarn\n\tfi\n\n\t# verify filename is emfw\n\tsfx=`echo $fileNameArg |  awk -F . '{print $NF}'`\n\tif [ \"$sfx\" != \"emfw\" ]\n\tthen\n\t\t# maybe prompt then to continue??\n\t\techo \"Filename parameter must be an emfw file\"\n\t\tUsageWarn\n\tfi\n\n\t# verify file format\n\ttar tzf $fileNameArg > /dev/null 2>&1\n\tif [ $? -ne 0 ]\n\tthen\n\t\techo \"File $fileNameArg has invalid format\"\n\t\tUsageWarn\n\tfi\n\n\t# get the boardID of the switch\n\tgetBoardID\n\n\t# create a directory and untar the emfw\n\tc=`echo $fileNameArg | cut -b 1`\n\tif [ \"$c\" != \"/\" ]\n\tthen\n\t\tthisdir=`pwd`\n\t\tfn=$thisdir/$fileNameArg\n\telse\n\t\tfn=$fileNameArg\n\tfi\n\ttmpdir=`mktemp -d`\n\tcd $tmpdir\n\ttar xzf $fn > /dev/null 2>&1\n\n\t# set names\n\tif [ -f emfwMapFile ]\n\tthen\n\t\tbinName=`grep $boardID emfwMapFile | cut -d ' ' -f 2`\n\t\tinibinName=`grep $boardID emfwMapFile | cut -d ' ' -f 3`\n\telse\n\t\t# no emfwMapFile - use standard f/w and opasw inibin\n\t\tbinName=s20fwV1_fw.bin\n\t\t# TODO andlowe make sure this is correct\n\t\tinibinName=iniOpasw.inibin\n\tfi\n\n\t# do fwconfigure and fwupdate\n\techo Updating config block...\n\tcmd=$bindir/opaswfwconfigure\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -f $inibinName $failSafeArg\"\n\ttmpFile=.fw\n\texecCommand\n\tcheck_exit $? .fw\n\tlogResults .fw\n\trm -f .fw\n\tcmd=$bindir/opaswconfigure\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -C 2 -S\"\n\ttmpFile=.pswd\n\texecCommand\n\tcheck_exit $?\n\tlogResults .pswd\n\trm -f .pswd\n\techo Updating firmware...\n\tcmd=$bindir/opaswfwupdate\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -f $binName $resetArg $failSafeArg\"\n\ttmpFile=.fw\n\texecCommand\n\tcheck_exit $? .fw\n\tlogResults .fw\n\tif [ \"$verboseArg\" != \"-v\" ]\n\tthen\n\t\tgrep Verification .fw\n\t\tgrep Resetting .fw\n\tfi\n\trm -f .fw\n\tcd $thisdir\n\trm -rf $tmpdir\n\t;;\nfwVerify)\n\techo -n \"Validating firmware in primary EEPROM...     \"\n\tcmd=$bindir/opaswfwverify\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tvalidity=`grep found .fwv | cut -d ' ' -f 2`\n\tlogResults .fwv\n\techo \"Primary image is $validity\"\n\techo \" \"\n\techo -n \"Validating firmware in secondary EEPROM...   \"\n\tcmd=$bindir/opaswfwverify\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -F\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tvalidity=`grep found .fwv | cut -d ' ' -f 2`\n\tlogResults .fwv\n\techo \"Secondary image is $validity\"\n\techo \" \"\n\techo -n \"Checking boot EEPROM ...                     \"\n\tcmd=$bindir/opaswquery\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 2\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tbooteeprom=`grep booted .fwv | cut -d ' ' -f 5`\n\techo \"Switch has booted from $booteeprom EEPROM\"\n\tlogResults .fwv\n\trm -f .fwv\n\t;;\nping)\n\tcmd=$bindir/opaswping\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target\"\n\ttmpFile=.png\n\texecCommand\n\tgrep present .png > /dev/null 2>&1\n\tif [ $? -eq 0 ]\n\tthen\n\t\tgrep present .png | grep not > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\techo \"Unit is not present\"\n\t\telse\n\t\t\techo \"Unit is present\"\n\t\tfi\n\telse\n\t\techo \"Unit is not present\"\n\tfi\n\tlogResults .png\n\trm .png\n\t;;\nreboot)\n\techo \"Resetting switch...\"\n\tcmd=$bindir/opaswreset\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target\"\n\ttmpFile=.res\n\texecCommand\n\tcheck_exit $? .res\n\tlogResults .res\n\trm -f .res\n\t;;\nsetConfigValue)\n\tintOpt=\n\tcfgOpt=\n\tif [ \"$configOptArg\" = \"\" ]\n\tthen\n\t\techo \"Must provide a configOption parameter for setConfigValue operation\"\n\t\tUsageWarn\n\tfi\n\tif [ \"$integerArg\" = \"\" ]\n\tthen\n\t\techo \"Must provide an integer parameter for setConfigValue operation\"\n\t\tUsageWarn\n\tfi\n\tintOpt=\"-i $integerArg\"\n\tcmd=$bindir/opaswconfigure\n\ttmpFile=.cfg\n\tcase $configOptArg in\n\tmtucap)\n\t\tcfgOpt=\"-C 3\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\tvlcap)\n\t\tcfgOpt=\"-C 4\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\tlinkwidth)\n\t\tcfgOpt=\"-C 5\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\tvlcreditdist)\n\t\tcfgOpt=\"-C 6\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\tlinkspeed)\n\t\tcfgOpt=\"-C 7\"\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target $cfgOpt $intOpt -S\"\n\t\texecCommand\n\t\tgrep Error .cfg > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]\n\t\tthen\n\t\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\t\tlogResults .cfg\n\t\t\trm -f .cfg\n\t\t\texit 1\n\t\tfi\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\t;;\n\t*)\n\t\techo \"Invalid configOption parameter $configOptArg\"\n\t\tUsageWarn\n\t\t;;\n\tesac\n\tintVal=`echo $intOpt | cut -d ' ' -f 2`\n\techo Successfully set $configOptArg to $intVal\n\t;;\nsetIBNodeDesc)\n\tstrOpt=\n\tif [ \"$stringArg\" = \"\" ]\n\tthen\n\t\techo \"Must include a string value for setOPANodeDesc operation\"\n\t\tUsageWarn\n\tfi\n\tif [ \"$integerArg\" != \"\" ]\n\tthen\n\t\techo \"Integer value is not valid with setOPANodeDesc operation\"\n\t\tUsageWarn\n\tfi\n\tstrOpt=\"-s $stringArg\"\n\tcmd=$bindir/opaswconfigure\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -C 1 $strOpt -S\"\n\ttmpFile=.cfg\n\texecCommand\n\tcheck_exit $? .cfg\n\tgrep Error .cfg > /dev/null 2>&1\n\tif [ $? -eq 0 ]\n\tthen\n\t\tgrep Error .cfg | cut -d ':' -f 2- | cut -d ' ' -f 2-\n\t\tlogResults .cfg\n\t\trm -f .cfg\n\t\texit 1\n\tfi\n\tlogResults .cfg\n\trm -f .cfg\n\t;;\nsetPassword)\n\tif [ \"$stringArg\" != \"\" -o \"$integerArg\" != \"\" ]\n\tthen\n\t\techo \"String or integer parameter not valid with setPassword operation\"\n\t\tUsageWarn\n\tfi\n\tcmd=$bindir/opaswconfigure\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -C 2 -S\"\n\ttmpFile=.pswd\n\tteeOut=yes\n\texecCommand\n\tcheck_exit $?\n\tlogResults .pswd\n\trm -f .pswd\n\t;;\nshowConfig)\n\techo \"Reporting user-configurable settings...\"\n\tcmd=$bindir/opaswquery\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 11\"\n\ttmpFile=.query\n\tteeOut=yes\n\texecCommand\n\tcheck_exit $?\n\tlogResults .query\n\trm -f .query\n\t;;\nshowFwVersion)\n\tcmd=$bindir/opaswquery\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 3\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tfwversion=`grep Version .fwv | cut -d ' ' -f 4`\n\techo \"Firmware version is $fwversion\"\n\tlogResults .fwv\n\trm -f .fwv\n\t;;\nshowPowerCooling)\n\techo \"Reporting power and cooling status...\"\n\n\t# middle digit of part number tells how many PS\n\tcmd=$bindir/opaswquery\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 4\"\n\ttmpFile=.pwc\n\texecCommand\n\tcheck_exit $? .pwc\n\tprtno=`grep VPD .pwc | cut -d ',' -f 2`\n\tpsIndicator=`echo $prtno | cut -d '-' -f 2 | awk '{ print substr( $0, 2, 1 ) }'`\n\tcase $psIndicator in\n\t0)\n\t\tnumPS=1\n\t\t;;\n\t1)\n\t\tnumPS=2\n\t\t;;\n\t*)\n\t\tnumPS=1\n\t\t;;\n\tesac\n\tlogResults .pwc\n\tgetBoardID\n\n\tcmd=$bindir/opaswquery\n\ttmpFile=.pwc\n\tif [ \"$boardID\" != \"0x13\" ]\n\tthen\n\t\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -Q 7\"\n\t\texecCommand\n\t\tcheck_exit $? .pwc\n\t\tfan1_0stat=`grep FAN .pwc |cut -d ':' -f 2 | cut -d ' ' -f 1`\n\t\tfan1_1stat=`grep FAN .pwc |cut -d ':' -f 3`\n\t\tlogResults .pwc\n\telse\n\t\tfan1_0stat=\"N/A   \"\n\t\tfan1_1stat=\"N/A\"\n\tfi\n\targs=\"$bindir/opaswquery $verboseArg $quietArg $hfiArg $portArg -t $target -Q 7\"\n\texecCommand\n\tcheck_exit $? .pwc\n\tlogResults .pwc\n\tfan2_0stat=`grep FAN .pwc |cut -d ':' -f 2 | cut -d ' ' -f 1`\n\tfan2_1stat=`grep FAN .pwc |cut -d ':' -f 3`\n\tif [ $numPS -eq 2 ]\n\tthen\n\t\targs=\"$bindir/opaswquery $verboseArg $quietArg $hfiArg $portArg -t $target -Q 8 -i 1\"\n\t\texecCommand\n\t\tcheck_exit $? .pwc\n\t\tps1stat=`grep PS .pwc | cut -d ' ' -f 3`\n\t\tlogResults .pwc\n\telse\n\t\tps1stat=\"N/A\"\n\tfi\n\targs=\"$bindir/opaswquery $verboseArg $quietArg $hfiArg $portArg -t $target -Q 8 -i 2\"\n\texecCommand\n\tcheck_exit $? .pwc\n\tps2stat=`grep PS .pwc | cut -d ' ' -f 3`\n\techo \"Fan status: Fan 1/0: $fan1_0stat    Fan 1/1: $fan1_1stat\"\n\techo \"Fan status: Fan 2/0: $fan2_0stat    Fan 2/1: $fan2_1stat\"\n\techo \"PS status : PS1    : $ps1stat       PS2    : $ps2stat\"\n\tlogResults .pwc\n\trm -f .pwc\n\t;;\nshowVPD)\n\techo \"Reporting switch VPD info...\"\n\tcmd=$bindir/opaswquery\n\targs=\"$bindir/opaswquery $verboseArg $quietArg $hfiArg $portArg -t $target -Q 4\"\n\ttmpFile=.vpd\n\texecCommand\n\tcheck_exit $? .vpd\n\tserno=`grep VPD .vpd | cut -d ' ' -f 2 | cut -d ',' -f 1`\n\tprtno=`grep VPD .vpd | cut -d ',' -f 2`\n\tmodel=`grep VPD .vpd | cut -d ',' -f 3`\n\thwver=`grep VPD .vpd | cut -d ',' -f 4`\n\tmfgnm=`grep VPD .vpd | cut -d ',' -f 5`\n\tprdnm=`grep VPD .vpd | cut -d ',' -f 6`\n\tmfgid=`grep VPD .vpd | cut -d ',' -f 7`\n\tmfgdt=`grep VPD .vpd | cut -d ',' -f 8`\n\tmfgtm=`grep VPD .vpd | cut -d ',' -f 9`\n\techo \"   Serial Number :    $serno\"\n\techo \"   Part Number   :    $prtno\"\n\techo \"   Model         :    $model\"\n\techo \"   H/W Version   :    $hwver\"\n\techo \"   Mfg Name      :    $mfgnm\"\n\techo \"   Product Name  :    $prdnm\"\n\techo \"   Mfg ID        :    $mfgid\"\n\techo \"   Mfg Date      :    $mfgdt\"\n\techo \"   Mfg Time      :    $mfgtm\"\n\tlogResults .vpd\n\trm -f .vpd\n\t;;\ncompareEEPROM)\n\techo \"Comparing switch EEPROMs...\"\n\tcmd=$bindir/opaswfwverify\n\targs=\"$verboseArg $quietArg $hfiArg $portArg -t $target -C\"\n\ttmpFile=.fwv\n\texecCommand\n\tcheck_exit $? .fwv\n\tmatch=`grep CRC .fwv | cut -d ' ' -f 3`\n\tif [ \"$match\" = \"match\" ]\n\tthen\n\t\techo \"Switch EEPROMs match\"\n\telse\n\t\techo \"Switch EEPROMs do not match\"\n\tfi\n\tlogResults .fwv\n\trm -f .fwv\n\t;;\n*)\n\techo \"$operation is not a valid operation\"\n\tUsageWarn\nesac\n\nexit 0\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: @(#) ./fastfabric/opaxlattopology 10_0_0_0_135 [09/08/14 23:46]\n\n# Topology script to translate the CSV form (topology.csv) of a\n# standard-format topology spread sheet for a fabric to one or more topology\n# XML files (topology.0:0.xml) at the specified levels (top-level, rack group,\n# rack, edge switch).  This script operates from the fabric directory and\n# populates it.\n\n# The following topology directories and files are generated:\n#   FILE_LINKSUM         - Host-to-Edge, Edge-to-Core, Host-to-Core links;\n#                           includes cable data\n#   FILE_LINKSUM_NOCORE  - No Edge-to-Core or Host-to-Core links;\n#                           includes cable data\n#   FILE_LINKSUM_NOCABLE - Leaf-to-Spine links, no cable data\n#   FILE_NODEFIS         - Host FIs, includes NodeDetails\n#   FILE_NODESWITCHES    - Edge, Leaf and Spine switches\n#   FILE_NODECHASSIS     - Core switches\n#   FILE_NODELEAVES      - Leaf switches\n#   FILE_TOPOLOGY_OUT    - Topology: FILE_LINKSUM + FILE_LINKSUM_NOCABLE +\n#                           FILE_NODEFIS + FILE_NODESWITCHES\n#   FILE_HOSTS           - 'hosts' file\n#   FILE_CHASSIS         - 'chassis' file\n\n# User topology CSV format:\n#  Lines 1 - x    ignored\n#  Line y         header line 1 (ignored)\n#  Line n         header line 2\n#  Lines n+1 - m  topology CSV\n#  Line m+1       blank\n#  Lines m+2 - z  core specification(s)\n\n# Links Fields:\n#  Source Rack Group: 01\n#  Source Rack:       02\n#  Source Name:       03\n#  Source Name-2:     04\n#  Source Port:       05\n#  Source Type:       06\n#  Dest Rack Group:   07\n#  Dest Rack:         08\n#  Dest Name:         09\n#  Dest Name-2:       10\n#  Dest Port:         11\n#  Dest Type:         12\n#  Cable Label:       13\n#  Cable Length:      14\n#  Cable Details:     15\n\n# Core specifications (same line):\n#  Core Name:X\n#  Core Size:X (288 or 1152)\n#  Core Group:X\n#  Core Rack:X\n#  Core Full:X (0 or 1)\n\n\n## Defines:\nTOOLSDIR=${TOOLSDIR:-/opt/opa/tools}\nBINDIR=${BINDIR:-/usr/sbin}\n\nXML_GENERATE=\"$BINDIR/opaxmlgenerate\"\nFILE_TOPOLOGY_LINKS=\"topology.csv\"\nFILE_LINKSUM_SWD06=\"linksum_swd06.csv\"\nFILE_LINKSUM_SWD24=\"linksum_swd24.csv\"\nFILE_LINKSUM=\"linksum.csv\"\nFILE_LINKSUM_NOCORE=\"linksum_nocore.csv\"\nFILE_LINKSUM_NOCABLE=\"linksum_nocable.csv\"\nFILE_NODEFIS=\"nodefis.csv\"\nFILE_NODESWITCHES=\"nodeswitches.csv\"\nFILE_NODELEAVES=\"nodeleaves.csv\"\nFILE_NODECHASSIS=\"nodechassis.csv\"\nFILE_CHASSIS=\"chassis\"\nFILE_HOSTS=\"hosts\"\nFILE_TOPOLOGY_OUT=\"topology.0:0.xml\"\nFILE_RESERVE=\"file_reserve\"\nFILE_TEMP=\"file_temp\"\nFILE_TEMP2=\"file_temp2\"\nFILE_DEBUG=\"file_debug\"\nFILE_DEBUG2=\"file_debug2\"\n# Note: there are no real limits on numbers of groups, racks or switches;\n#  these defines simply allow error messages before too much thrashing\n#  takes place in cases where FILE_TOPOLOGY_LINKS has bad data\nMAX_GROUPS=21\nMAX_RACKS=501\nMAX_SWITCHES=20001\nOUTPUT_SWITCHES=1\nOUTPUT_RACKS=2\nOUTPUT_GROUPS=4\nOUTPUT_EDGE_LEAF_LINKS=8\nOUTPUT_SPINE_LEAF_LINKS=16\nNODETYPE_HFI=\"FI\"\nNODETYPE_EDGE=\"SW\"\nNODETYPE_LEAF=\"CL\"\nNODETYPE_SPINE=\"CS\"\nDUMMY_CORE_NAME=\"ZzNAMEqQ\"\nCORE_GROUP=\"Core Group:\"\nCORE_RACK=\"Core Rack:\"\nCORE_NAME=\"Core Name:\"\nCORE_SIZE=\"Core Size:\"\nCORE_FULL=\"Core Full:\"\nHFI_SUFFIX=\"HFI-1\"\nCAT_CHAR_CORE=\" \"\n\n\n## Global variables:\n\n# Parsing tokens:\nt_00=\"\"\nt_01=\"\"\nt_02=\"\"\nt_03=\"\"\nt_04=\"\"\nt_05=\"\"\nt_06=\"\"\nt_07=\"\"\nt_08=\"\"\nt_09=\"\"\nt_10=\"\"\nt_11=\"\"\nt_12=\"\"\nt_13=\"\"\nt_14=\"\"\n\nt_srcgroup=\"\"\nt_srcrack=\"\"\nt_srcname=\"\"\nt_srcname2=\"\"\nt_srcport=\"\"\nt_srctype=\"\"\nt_dstgroup=\"\"\nt_dstrack=\"\"\nt_dstname=\"\"\nt_dstname2=\"\"\nt_dstport=\"\"\nt_dsttype=\"\"\nt_cablelabel=\"\"\nt_cablelength=\"\"\nt_cabledetails=\"\"\n\n# Output CSV values:\nrate=\"\"\nmtu=\"\"\ninternal=\"\"\nnodedesc1=\"\"\nnodedetails1=\"\"\nnodetype1=\"\"\nnodedesc2=\"\"\nnodedetails2=\"\"\nnodetype2=\"\"\nlink=\"\"\n\n# Operating variables:\ncts_parse=0\nix=0\nn_detail=0\nfl_output_edge_leaf=1\nfl_output_spine_leaf=1\nn_verbose=2\nindent=\"\"\ncat_char=\" \"\nfl_clean=1\nix_srcgroup=0\nix_srcrack=0\nix_srcswitch=0\nix_dstgroup=0\nix_dstrack=0\nix_dstswitch=0\ncore_group=\"\"\ncore_rack=\"\"\ncore_name=\"\"\ncore_size=\ncore_full=\nrack=\"\"\nswitch=\"\"\nleaves=\"\"\n\n# Arrays\ntb_group[0]=\"\"\ntb_rack[0]=\"\"\ntb_switch[0]=\"\"\n\n# Debug variables:\ndebug_0=\ndebug_1=\ndebug_2=\ndebug_3=\ndebug_4=\ndebug_5=\ndebug_6=\ndebug_7=\n#echo \"DEBUG-x.y: 0:$debug_0: 1:$debug_1: 2:$debug_2: 3:$debug_3: 4:$debug_4: 5:$debug_5: 6:$debug_6: 7:$debug_7:\"\n\nfunction clean_tempfiles() {\n  if [ $fl_clean == 1 ]\n    then\n    rm -f $FILE_TEMP\n    rm -f $FILE_TEMP2\n    rm -f $FILE_LINKSUM\n    rm -f $FILE_LINKSUM_NOCORE\n    rm -f $FILE_LINKSUM_NOCABLE\n    rm -f $FILE_NODEFIS\n    rm -f $FILE_NODESWITCHES\n    rm -f $FILE_NODELEAVES\n    rm -f $FILE_NODECHASSIS\n  fi\n}\n\ntrap 'clean_tempfiles; exit 1' SIGINT SIGHUP SIGTERM\ntrap 'clean_tempfiles' EXIT\n\n## Local functions:\nfunctout=\n\n# Output usage information\nusage_full()\n{\n  echo \"Usage: opaxlattopology [-d level -v level -i level -c char -K -?] [source [dest]]\"\n  echo \"       -d level  -  output detail level (default 0)\"\n  echo \"                    values are additive\"\n  echo \"                     1 - edge switch topology files\"\n  echo \"                     2 - rack topology files\"\n  echo \"                     4 - rack group topology files\"\n# TBD - these options are disabled for now\n#  echo \"                     8 - DO NOT output edge-to-leaf links\"\n#  echo \"                    16 - DO NOT output spine-to-leaf links\"\n  echo \"       -v level  -  verbose level (0-8, default 2)\"\n  echo \"                    0 - no output\"\n  echo \"                    1 - progress output\"\n  echo \"                    2 - reserved\"\n  echo \"                    4 - time stamps\"\n  echo \"                    8 - reserved\"\n  echo \"       -i level  -  output indent level (0-15, default 0)\"\n  echo \"       -c char   -  NodeDesc concatenation char (default SPACE)\"\n  echo \"       -K        -  DO NOT clean temporary files\"\n  echo \"       -?        -  print this output\"\n  exit $1\n}  # End of usage_full()\n\n# Convert general node types to standard node types\n# Inputs:\n#   $1 = general node type\n#\n# Outputs:\n#   Standard node type\ncvt_nodetype()\n{\n  case $1 in\n  $NODETYPE_HFI)\n    echo \"FI\"\n    ;;\n  $NODETYPE_EDGE)\n    echo \"SW\"\n    ;;\n  $NODETYPE_LEAF)\n    echo \"SW\"\n    ;;\n  $NODETYPE_SPINE)\n    echo \"SW\"\n    ;;\n  *)\n    echo \"\"\n    ;;\n  esac\n\n}  # End of cvt_nodetype()\n\n# Display progress information (to STDOUT)\n# Inputs:\n#   $1 - progress string\n#\n# Outputs:\n#   none\ndisplay_progress()\n{\n  if [ $n_verbose -ge 1 ]\n    then\n    echo \"$indent$1\"\n    if [ $n_verbose -ge 4 ]\n      then\n      echo \"$indent  \"`date`\n    fi\n  fi\n}  # End of display_progress()\n\n# Generate directory-level FILE_TOPOLOGY_OUT file from directory-level\n# CSV files; consolidate directory-level CSV files.\n# Inputs:\n#   $1 = 1 - Use FILE_LINKSUM\n#        0 - Use FILE_LINKSUM_NOCORE\n#   $2 = 1 - Use FILE_LINKSUM_NOCABLE\n#        0 - Do not use FILE_LINKSUM_NOCABLE\n#   FILE_LINKSUM\n#   FILE_LINKSUM_NOCORE (optional)\n#   FILE_LINKSUM_NOCABLE (optional)\n#   FILE_NODEFIS\n#   FILE_NODESWITCHES\n#   FILE_NODECHASSIS\n#\n# Outputs:\n#   FILE_TOPOLOGY_OUT\n#   FILE_HOSTS\n#   FILE_CHASSIS\ngen_topology()\n{\n  if [ -f $FILE_LINKSUM ]\n    then\n    rm -f $FILE_TEMP\n    mv $FILE_LINKSUM $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_LINKSUM\n  fi\n  if [ -f $FILE_LINKSUM_NOCORE ]\n    then\n    rm -f $FILE_TEMP\n    mv $FILE_LINKSUM_NOCORE $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_LINKSUM_NOCORE\n  fi\n  if [ -f $FILE_LINKSUM_NOCABLE ]\n    then\n    rm -f $FILE_TEMP\n    mv $FILE_LINKSUM_NOCABLE $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_LINKSUM_NOCABLE\n  fi\n\n  if [ -f $FILE_NODEFIS ]\n    then\n    rm -f $FILE_HOSTS\n    rm -f $FILE_TEMP\n    mv $FILE_NODEFIS $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_NODEFIS\n    cut -d ';' -f 1 $FILE_NODEFIS | sed -e \"s/$cat_char$HFI_SUFFIX//\" > $FILE_HOSTS\n  fi\n\n  if [ -f $FILE_NODESWITCHES ]\n    then\n    rm -f $FILE_TEMP\n    mv $FILE_NODESWITCHES $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_NODESWITCHES\n  fi\n  if [ -f $FILE_NODECHASSIS ]\n    then\n    rm -f $FILE_CHASSIS\n    rm -f $FILE_TEMP\n    mv $FILE_NODECHASSIS $FILE_TEMP\n    sort -u $FILE_TEMP > $FILE_NODECHASSIS\n    cp -p $FILE_NODECHASSIS $FILE_CHASSIS\n  fi\n\n  rm -f $FILE_TOPOLOGY_OUT\n  echo '<?xml version=\"1.0\" encoding=\"utf-8\" ?>' >> $FILE_TOPOLOGY_OUT\n  echo \"<Report>\" >> $FILE_TOPOLOGY_OUT\n\n  # Generate LinkSummary section\n  echo \"<LinkSummary>\" >> $FILE_TOPOLOGY_OUT\n  if [ -s $FILE_LINKSUM -a $1 == 1 ]\n    then\n    $XML_GENERATE -X $FILE_LINKSUM -d \\; -i 2 -h Link -g Rate -g MTU -g Internal -h Cable -g CableLength -g CableLabel -g CableDetails -e Cable -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -e Link >> $FILE_TOPOLOGY_OUT\n  elif [ -s $FILE_LINKSUM_NOCORE -a $1 == 0 ]\n    then\n    $XML_GENERATE -X $FILE_LINKSUM_NOCORE -d \\; -i 2 -h Link -g Rate -g MTU -g Internal -h Cable -g CableLength -g CableLabel -g CableDetails -e Cable -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -e Link >> $FILE_TOPOLOGY_OUT\n  fi\n\n  if [ -s $FILE_LINKSUM_NOCABLE -a $2 == 1 ]\n    then\n    # Note: <Cable> header not needed because cable data is null\n    $XML_GENERATE -X $FILE_LINKSUM_NOCABLE -d \\; -i 2 -h Link -g Rate -g MTU -g Internal -g CableLength -g CableLabel -g CableDetails -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -h Port -g PortNum -g NodeType -g NodeDesc -g NodeGUID -e Port -e Link >> $FILE_TOPOLOGY_OUT\n  fi\n  echo \"</LinkSummary>\" >> $FILE_TOPOLOGY_OUT\n\n  # Generate Nodes/FIs section\n  echo \"<Nodes>\" >> $FILE_TOPOLOGY_OUT\n  echo \"<FIs>\" >> $FILE_TOPOLOGY_OUT\n  if [ -s $FILE_NODEFIS ]\n    then\n    $XML_GENERATE -X $FILE_NODEFIS -d \\; -i 2 -h Node -g NodeDesc -g NodeGUID -g NodeDetails -e Node >> $FILE_TOPOLOGY_OUT\n  fi\n  echo \"</FIs>\" >> $FILE_TOPOLOGY_OUT\n\n  # Generate Nodes/Switches section\n  echo \"<Switches>\" >> $FILE_TOPOLOGY_OUT\n  if [ -s $FILE_NODESWITCHES ]\n    then\n    $XML_GENERATE -X $FILE_NODESWITCHES -d \\; -i 2 -h Node -g NodeDesc -g NodeGUID -e Node >> $FILE_TOPOLOGY_OUT\n  fi\n  echo \"</Switches>\" >> $FILE_TOPOLOGY_OUT\n  echo \"</Nodes>\" >> $FILE_TOPOLOGY_OUT\n\n  echo \"</Report>\" >> $FILE_TOPOLOGY_OUT\n\n  # Clean temporary files\n  clean_tempfiles\n}  # End of gen_topology\n\n# Process rack group name; check for non-null name and find in tb_group[].\n# If present return tb_group[] index, otherwise make entry and return index.\n# Note that tb_group[0] is always null and is the default rack group.\n# Inputs:\n#   $1 = rack group name (may be null)\n#\n# Outputs:\n#         functout - index of rack group name, or 0\n#   tb_rack[index] - name of rack group (written when new group)\nproc_group()\n{\n  local val\n  local ix\n\n  val=0\n\n  if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n    then\n    if [ -n \"$1\" ]\n      then\n      # Check for group name already in tb_group[]\n      for (( ix=1 ; $ix<$MAX_GROUPS ; ix=$((ix+1)) ))\n      do\n        if [ -n \"${tb_group[$ix]}\" ]\n          then\n          if [ \"$1/\" == \"${tb_group[$ix]}\" ]\n            then\n            val=$ix\n            break\n          fi\n        # New group name, save in tb_group[] and make group directory\n        else\n          tb_group[$ix]=\"$1/\"\n          rm -f -r ${tb_group[$ix]}\n          mkdir ${tb_group[$ix]}\n          val=$ix\n          break\n        fi\n      \n      done  # for (( ix=1 ; $ix<$MAX_GROUPS\n\n      if [ $ix == $MAX_GROUPS ]\n        then\n        echo \"Too many rack groups (>= $MAX_GROUPS)\" >&2\n        usage_full \"2\"\n      fi\n\n    else\n      echo \"Must have rack group name when outputting rack group (line:$ix_line)\" >&2\n      usage_full \"2\"\n    fi  # End of if [ -n \"$1\" ]\n\n  fi  # End of if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n\n  functout=$val\n\n}  # End of proc_group()\n\n# Process rack name; check for non-null name and find in tb_rack[].\n# If present return tb_rack[] index, otherwise make entry and return index.\n# Note that tb_rack[0] is always null and is the default rack.\n# Inputs:\n#   $1 = rack name (may be null)\n#   $2 = rack group name (may be null)\n#\n# Outputs:\n#         functout - index of rack name, or 0\n#   tb_rack[index] - name of rack (written when new rack)\nproc_rack()\n{\n  local val\n  local ix\n\n  val=0\n\n  if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n    then\n    if [ -n \"$1\" ]\n      then\n      # Check for rack name already in tb_rack[]\n      for (( ix=1 ; $ix<$MAX_RACKS ; ix=$((ix+1)) ))\n      do\n        if [ -n \"${tb_rack[$ix]}\" ]\n          then\n          if [ \"$1/\" == \"${tb_rack[$ix]}\" ]\n            then\n            val=$ix\n            break\n          fi\n        # New rack name, save in tb_rack[] and make rack directory\n        else\n          tb_rack[$ix]=\"$1/\"\n          rm -f -r $2${tb_rack[$ix]}\n          mkdir $2${tb_rack[$ix]}\n          val=$ix\n          break\n        fi\n      \n      done  # for (( ix=1 ; $ix<$MAX_RACKS\n\n      if [ $ix == $MAX_RACKS ]\n        then\n        echo \"Too many racks (>= $MAX_RACKS)\" >&2\n        usage_full \"2\"\n      fi\n\n    else\n      echo \"Must have rack name when outputting rack (line:$ix_line)\" >&2\n      usage_full \"2\"\n    fi  # End of if [ -n \"$1\" ]\n\n  fi  # End of if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n\n  functout=$val\n\n}  # End of proc_rack()\n\n# Process switch name; check for non-null name and find in tb_switch[].\n# If present return tb_switch[] index, otherwise make entry and return index.\n# Note that tb_switch[0] is always null and is the default switch.\n# Inputs:\n#   $1 = switch name (may be null)\n#   $2 = rack group/rack name (may be null)\n#\n# Outputs:\n#           functout - index of switch name, or 0\n#   tb_switch[index] - name of switch (written when new switch)\nproc_switch()\n{\n  local val\n  local ix\n\n  val=0\n\n  if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n    then\n    if [ -n \"$1\" ]\n      then\n      # Check for switch name already in tb_switch[]\n      for (( ix=1 ; $ix<$MAX_SWITCHES ; ix=$((ix + 1)) ))\n      do\n        if [ -n \"${tb_switch[$ix]}\" ]\n          then\n          if [ \"$1/\" == \"${tb_switch[$ix]}\" ]\n            then\n            val=$ix\n            break\n          fi\n        # New switch name, save in tb_switch[] and make switch directory\n        else\n          tb_switch[$ix]=\"$1/\"\n          rm -f -r $2${tb_switch[$ix]}\n          mkdir $2${tb_switch[$ix]}\n          val=$ix\n          break\n        fi\n      \n      done  # for (( ix=1 ; $ix<$MAX_SWITCHES\n\n      if [ $ix == $MAX_SWITCHES ]\n        then\n        echo \"Too many switches (>= $MAX_SWITCHES)\" >&2\n        usage_full \"2\"\n      fi\n\n    else\n      echo \"Must have switch name when outputting switch (line:$ix_line)\" >&2\n      usage_full \"2\"\n    fi  # End of if [ -n \"$1\" ]\n\n  fi  # End of if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n\n  functout=$val\n\n}  # End of proc_switch()\n\n\n## Main function:\n\n# Get options\nwhile getopts c:d:i:Kv:? option\ndo\n  case $option in\n  c)\n    cat_char=$OPTARG\n    ;;\n\n  d)\n    n_detail=$OPTARG\n    if [ $((n_detail & OUTPUT_EDGE_LEAF_LINKS)) != 0 ]\n      then\n      fl_output_edge_leaf=0\n    fi\n    if [ $((n_detail & OUTPUT_SPINE_LEAF_LINKS)) != 0 ]\n      then\n      fl_output_spine_leaf=0\n    fi\n    ;;\n\n  i)\n    indent=`echo \"                    \" | cut -b -$OPTARG`\n    ;;\n\n  K)\n    fl_clean=0\n    ;;\n\n  v)\n    n_verbose=$OPTARG\n    ;;\n\n  *)\n    usage_full \"0\"\n    ;;\n  esac\ndone\n\nshift $((OPTIND -1))\n\nif [ $# -ge 1 ]; then\n\tFILE_TOPOLOGY_LINKS=$1\n\tshift;\nfi\nif [ $# -ge 1 ]; then \n\tFILE_TOPOLOGY_OUT=$1\nfi\n\n# Parse FILE_TOPOLOGY_LINKS2\ndisplay_progress \"Parsing $FILE_TOPOLOGY_LINKS\"\n\nrm -f ${FILE_LINKSUM}\nrm -f ${FILE_LINKSUM_NOCORE}\nrm -f ${FILE_LINKSUM_NOCABLE}\nrm -f ${FILE_NODEFIS}\nrm -f ${FILE_NODESWITCHES}\nrm -f ${FILE_NODELEAVES}\nrm -f ${FILE_NODECHASSIS}\n\n# TBD - add support for rate & mtu\nrate=\"100g\"\nmtu=\"8192\"\nix_line=1\n\nIFS=\",\"\nwhile read t_00 t_01 t_02 t_03 t_04 t_05 t_06 t_07 t_08 t_09 t_10 t_11 t_12 t_13 t_14\ndo\n  case $cts_parse in\n  # Syncing to beginning of link data\n  0)\n    if [ \"$t_00\" == \"Rack Group\" ]\n      then\n      cts_parse=1\n    fi\n    ;;\n\n  # Process link tokens\n  1)\n    if [ -n \"$t_00\" ]\n      then\n      t_srcgroup=$t_00\n    fi\n    if [ -n \"$t_01\" ]\n      then\n      t_srcrack=$t_01\n    fi\n    t_srcname=$t_02\n    t_srcname2=$t_03\n    if [ -n \"$t_05\" ]\n      then\n      t_srctype=$t_05\n    fi\n    if [ -z \"$t_04\" -a \"$t_srctype\" == \"$NODETYPE_HFI\" ]\n      then\n      t_srcport=1\n    else\n      t_srcport=$t_04\n    fi\n\n    if [ -n \"$t_06\" ]\n      then\n      t_dstgroup=$t_06\n    fi\n    if [ -n \"$t_07\" ]\n      then\n      t_dstrack=$t_07\n    fi\n    t_dstname=$t_08\n    t_dstname2=$t_09\n    if [ -n \"$t_11\" ]\n      then\n      t_dsttype=$t_11\n    fi\n    if [ -z \"$t_10\" -a \"$t_dsttype\" == \"$NODETYPE_HFI\" ]\n      then\n      t_dstport=1\n    else\n      t_dstport=$t_10\n    fi\n\n    t_cablelabel=$t_12\n    t_cablelength=$t_13\n    t_cabledetails=$t_14\n\n    if [ \"$t_srctype\" == \"$NODETYPE_SPINE\" ]\n      then\n      internal=\"1\"\n    else\n      internal=\"0\"\n    fi\n\n    # Process group, rack and switch names\n    if [ -n \"$t_srcname\" ]\n      then\n      proc_group \"$t_srcgroup\"\n      ix_srcgroup=$functout\n      proc_rack \"$t_srcrack\" \"${tb_group[$ix_srcgroup]}\"\n      ix_srcrack=$functout\n      proc_group \"$t_dstgroup\"\n      ix_dstgroup=$functout\n      proc_rack \"$t_dstrack\" \"${tb_group[$ix_dstgroup]}\"\n      ix_dstrack=$functout\n      if [ \"$t_srctype\" == \"$NODETYPE_EDGE\" ]\n        then\n        proc_switch \"$t_srcname\" \"${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}\"\n        ix_srcswitch=$functout\n      else\n        ix_srcswitch=0\n      fi\n      if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n        then\n        proc_switch \"$t_dstname\" \"${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}\"\n        ix_dstswitch=$functout\n      else\n        ix_dstswitch=0\n      fi\n\n      # Form consolidated output data\n      nodedesc1=\"${t_srcname}\"\n      if [ \"$t_srctype\" == \"$NODETYPE_HFI\" ]\n        then\n        nodedesc1=\"${nodedesc1}${cat_char}${HFI_SUFFIX}\"\n        nodedetails1=\"${t_srcname2}\"\n      else\n        nodedetails1=\"\"\n        if [ \"$t_srctype\" != \"$NODETYPE_EDGE\" ]\n          then\n          nodedesc1=\"${nodedesc1}${cat_char}${t_srcname2}\"\n        fi\n      fi\n\n      nodedesc2=\"${t_dstname}\"\n      if [ \"$t_dsttype\" != \"$NODETYPE_EDGE\" ]\n        then\n        nodedesc2=\"${nodedesc2}${cat_char}${t_dstname2}\"\n      fi\n\n      nodetype1=`cvt_nodetype \"$t_srctype\"`\n      nodetype2=`cvt_nodetype \"$t_dsttype\"`\n\n      nodeguid1=`echo $nodedesc1 | cksum | cut -f1 -d\\ `\n      nodeguid1=`echo \"obase=16; $nodeguid1\" | bc`\n      nodeguid1=`echo \"00000000$nodeguid1\" | sed \"s/.*\\(........$\\)/\\1/\"`\n      nodeguid2=`echo $nodedesc2 | cksum | cut -f1 -d\\ `\n      nodeguid2=`echo \"obase=16; $nodeguid2\" | bc`\n      nodeguid2=`echo \"00000000$nodeguid2\" | sed \"s/.*\\(........$\\)/\\1/\"`\n\n      # Output CSV FILE_LINKSUM\n      link=\"${rate};${mtu};${internal};${t_cablelength};${t_cablelabel};${t_cabledetails};${t_srcport};${nodetype1};${nodedesc1};0x00117500${nodeguid1};${t_dstport};${nodetype2};${nodedesc2};0x00117500${nodeguid2}\"\n      echo \"${link}\" >> ${FILE_LINKSUM}\n      if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n        then\n        echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${FILE_LINKSUM}\n        if [ $ix_dstgroup != $ix_srcgroup ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${FILE_LINKSUM}\n        fi\n      fi\n\n      if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${FILE_LINKSUM}\n        if [ $ix_dstrack != $ix_srcrack ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_LINKSUM}\n        fi\n      fi\n\n      if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n        then\n        if [ \"$t_srctype\" == \"$NODETYPE_EDGE\" ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${tb_switch[$ix_srcswitch]}${FILE_LINKSUM}\n        fi\n        if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_LINKSUM}\n        fi\n      fi\n\n      # Output CSV FILE_LINKSUM_NOCORE\n      if [ \"$t_dsttype\" != \"$NODETYPE_LEAF\" ]\n        then\n        echo \"${link}\" >> ${FILE_LINKSUM_NOCORE}\n        if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${FILE_LINKSUM_NOCORE}\n          if [ $ix_dstgroup != $ix_srcgroup ]\n            then\n            echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${FILE_LINKSUM_NOCORE}\n          fi\n        fi\n\n        if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n          then\n          echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${FILE_LINKSUM_NOCORE}\n          if [ $ix_dstrack != $ix_srcrack ]\n            then\n            echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_LINKSUM_NOCORE}\n          fi\n        fi\n\n        if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n          then\n          if [ \"$t_srctype\" == \"$NODETYPE_EDGE\" ]\n            then\n            echo \"${link}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${tb_switch[$ix_srcswitch]}${FILE_LINKSUM_NOCORE}\n          fi\n          if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n            then\n            echo \"${link}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_LINKSUM_NOCORE}\n          fi\n        fi\n      fi\n\n      # Output CSV FILE_LINKSUM_NOCABLE\n      #  Note: output only needed at top-level to bootstrap FILE_LINKSUM_SWD06\n      #  and FILE_LINKSUM_SWD24\n      if [ \"$t_srctype\" == \"$NODETYPE_SPINE\" ]\n        then\n        echo \"${link}\" >> ${FILE_LINKSUM_NOCABLE}\n      fi\n\n      # Output CSV nodedesc1\n      if [ \"$t_srctype\" == \"$NODETYPE_HFI\" ]\n        then\n        echo \"${nodedesc1};0x00117500${nodeguid1};${nodedetails1}\" >> ${FILE_NODEFIS}\n        if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1};${nodedetails1}\" >> ${tb_group[$ix_srcgroup]}${FILE_NODEFIS}\n        fi\n\n        if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1};${nodedetails1}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${FILE_NODEFIS}\n        fi\n\n        if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n          then\n          if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n            then\n            if [ \"x${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}\" == \"x${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}\" ]\n              then\n              echo \"${nodedesc1};0x00117500${nodeguid1};${nodedetails1}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_NODEFIS}\n            fi\n          fi\n        fi\n      else\n        echo \"${nodedesc1};0x00117500${nodeguid1}\" >> ${FILE_NODESWITCHES}\n        if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1}\" >> ${tb_group[$ix_srcgroup]}${FILE_NODESWITCHES}\n        fi\n\n        if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${FILE_NODESWITCHES}\n        fi\n\n        if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n          then\n          echo \"${nodedesc1};0x00117500${nodeguid1}\" >> ${tb_group[$ix_srcgroup]}${tb_rack[$ix_srcrack]}${tb_switch[$ix_srcswitch]}${FILE_NODESWITCHES}\n        fi\n      fi\n\n      # Output CSV nodedesc2\n      echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${FILE_NODESWITCHES}\n      if [ \"$t_dsttype\" == \"$NODETYPE_LEAF\" ]\n        then\n        echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${FILE_NODELEAVES}\n        echo \"${t_dstname}\" >> ${FILE_NODECHASSIS}\n      fi\n      if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n        then\n        echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${FILE_NODESWITCHES}\n        if [ \"$t_dsttype\" == \"$NODETYPE_LEAF\" ]\n          then\n          echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${FILE_NODELEAVES}\n          echo \"${t_dstname}\" >> ${tb_group[$ix_dstgroup]}${FILE_NODECHASSIS}\n        fi\n      fi\n\n      if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_NODESWITCHES}\n        if [ \"$t_dsttype\" == \"$NODETYPE_LEAF\" ]\n          then\n          echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_NODELEAVES}\n          echo \"${t_dstname}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${FILE_NODECHASSIS}\n        fi\n      fi\n\n      if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n        then\n        if [ \"$t_dsttype\" == \"$NODETYPE_EDGE\" ]\n          then\n          echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_NODESWITCHES}\n        elif [ \"$t_dsttype\" == \"$NODETYPE_LEAF\" ]\n          then\n          echo \"${nodedesc2};0x00117500${nodeguid2}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_NODELEAVES}\n          echo \"${t_dstname}\" >> ${tb_group[$ix_dstgroup]}${tb_rack[$ix_dstrack]}${tb_switch[$ix_dstswitch]}${FILE_NODECHASSIS}\n        fi\n      fi\n\n    # End of link information\n    else\n      cts_parse=2\n    fi\n    ;;\n\n    # Process core switch data\n  2)\n    if echo \"$t_00\" | grep -e \"$CORE_NAME\" > /dev/null 2>&1\n      then\n      core_name=`echo $t_00 | cut -d ':' -f 2`\n      display_progress \"Generating links for Core:$core_name\"\n      if echo \"$t_01\" | grep -e \"$CORE_GROUP\" > /dev/null 2>&1\n        then\n        core_group=`echo $t_01 | cut -d ':' -f 2`\n      elif [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n        then\n        echo \"Must have rack group name when outputting rack group (line:$ix_line)\"\n        usage_full \"2\"\n      else\n        core_group=\"\"\n      fi\n      if echo \"$t_02\" | grep -e \"$CORE_RACK\" > /dev/null 2>&1\n        then\n        core_rack=`echo $t_02 | cut -d ':' -f 2`\n      elif [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        echo \"Must have rack name when outputting rack (line:$ix_line)\"\n        usage_full \"2\"\n      else\n        core_rack=\"\"\n      fi\n      if echo \"$t_03\" | grep -e \"$CORE_SIZE\" > /dev/null 2>&1\n        then\n        core_size=`echo $t_03 | cut -d ':' -f 2`\n        if [ $core_size -ne 288 -a $core_size -ne 1152 ]\n          then\n          echo \"Invalid $CORE_SIZE parameter ($t_03)\"\n          usage_full \"2\"\n        fi\n      else\n        echo \"No $CORE_SIZE parameter\"\n        usage_full \"2\"\n      fi\n      if echo \"$t_04\" | grep -e \"$CORE_FULL\" > /dev/null 2>&1\n        then\n        core_full=`echo $t_04 | cut -d ':' -f 2`\n        if [ $core_full -ne 0 -a $core_full -ne 1 ]\n          then\n          echo \"Invalid $CORE_FULL parameter ($t_04)\"\n          usage_full \"2\"\n        fi\n      else\n        core_full=0\n      fi\n\n      # Output CSV FILE_LINKSUM_NOCABLE\n      if [ $core_full == 1 ]\n        then\n        leaves=\"\"\n      else\n        leaves=`cat $FILE_NODELEAVES | tr '\\012' '|' | sed -e 's/|$//'`\n      fi\n      if [ $core_size == 288 ]\n        then\n        cat $FILE_LINKSUM_SWD06 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> ${FILE_LINKSUM_NOCABLE}\n      else\n        cat $FILE_LINKSUM_SWD24 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> ${FILE_LINKSUM_NOCABLE}\n      fi\n      cat ${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 9-10 | sort -u >> ${FILE_NODESWITCHES}\n      cat ${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | sort -u >> ${FILE_NODESWITCHES}\n      cat ${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | cut -d \"$cat_char\" -f 1 | sort -u >> ${FILE_NODECHASSIS}\n\n      if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n        then\n        if [ $core_full == 1 ]\n          then\n          leaves=\"\"\n        else\n          leaves=`cat $core_group/$FILE_NODELEAVES | tr '\\012' '|' | sed -e 's/|$//'`\n        fi\n        if [ $core_size == 288 ]\n          then\n          cat $FILE_LINKSUM_SWD06 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> $core_group/${FILE_LINKSUM_NOCABLE}\n        else\n          cat $FILE_LINKSUM_SWD24 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> $core_group/${FILE_LINKSUM_NOCABLE}\n        fi\n        cat $core_group/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 9-10 | sort -u >> $core_group/${FILE_NODESWITCHES}\n        cat $core_group/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | sort -u >> $core_group/${FILE_NODESWITCHES}\n        cat $core_group/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | cut -d \"$cat_char\" -f 1 | sort -u >> $core_group/${FILE_NODECHASSIS}\n      fi\n\n      if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        if [ $core_full == 1 ]\n          then\n          leaves=\"\"\n        else\n          leaves=`cat $core_group/$core_rack/$FILE_NODELEAVES | tr '\\012' '|' | sed -e 's/|$//'`\n        fi\n        if [ $core_size == 288 ]\n          then\n          cat $FILE_LINKSUM_SWD06 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> $core_group/$core_rack/${FILE_LINKSUM_NOCABLE}\n        else\n          cat $FILE_LINKSUM_SWD24 | sed -e \"s/$DUMMY_CORE_NAME/$core_name/g\" -e \"s/$CAT_CHAR_CORE/$cat_char/g\" | grep -E \"$leaves\" >> $core_group/$core_rack/${FILE_LINKSUM_NOCABLE}\n        fi\n        cat $core_group/$core_rack/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 9-10 | sort -u >> $core_group/$core_rack/${FILE_NODESWITCHES}\n        cat $core_group/$core_rack/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | sort -u >> $core_group/$core_rack/${FILE_NODESWITCHES}\n        cat $core_group/$core_rack/${FILE_LINKSUM_NOCABLE} | cut -d ';' -f 13-14 | cut -d \"$cat_char\" -f 1 | sort -u >> $core_group/$core_rack/${FILE_NODECHASSIS}\n      fi\n\n    # End of core switch information\n    else\n      break\n    fi\n    ;;\n\n  esac  # end of case $cts_parse in\n\n  ix_line=$((ix_line+1))\n\ndone < <( cat $FILE_TOPOLOGY_LINKS | tr -d '\\015' )  # End of while read ... do\n\n# Generate topology file(s)\ndisplay_progress \"Generating $FILE_TOPOLOGY_OUT file(s)\"\n# Generate top-level topology file\ngen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n\n# Output rack groups\nif [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n  then\n  # Loop through rack groups\n  for (( ix=1 ; $ix<$MAX_GROUPS ; ix=$((ix+1)) ))\n  do\n    if [ -n \"${tb_group[$ix]}\" ]\n      then\n      cd ${tb_group[$ix]}\n      gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n\n      if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n        then\n        # Loop through racks\n        for rack in *\n        do\n          if [ -d $rack ]\n            then\n            cd $rack\n            gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n\n            if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n              then\n              # Loop through switches\n              for switch in *\n              do\n                if [ -d $switch ]\n                  then\n                  cd $switch\n                  gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n                  cd ..\n                fi  # End of if [ -d $switch ]\n\n              done  # End of for switch in *\n\n            fi  # End of if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n\n            cd ..\n\n          fi  # End of if [ -d $rack ]\n\n        done  # End of for rack in *\n\n      fi  # End of if [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n\n      cd ..\n\n    elif [ $ix == 1 ]\n      then\n      echo \"Must specify Rack Group names when outputting Rack Groups\"\n      usage_full \"2\"\n    fi  # End of if [ -n \"${tb_group[$ix]}\" ]\n\n  done  # End of for (( ix=1 ; $ix<$MAX_GROUPS ; ix=$((ix+1)) ))\n\n# Output racks without rack groups\nelif [ $((n_detail & OUTPUT_RACKS)) != 0 ]\n  then\n  # Loop through racks\n  for (( ix=1 ; $ix<$MAX_RACKS ; ix=$((ix+1)) ))\n  do\n    if [ -n \"${tb_rack[$ix]}\" ]\n      then\n      cd ${tb_rack[$ix]}\n      gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n\n      if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n        then\n        # Loop through switches\n        for switch in *\n        do\n          if [ -d $switch ]\n            then\n            cd $switch\n            gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n            cd ..\n          fi  # End of if [ -d $switch ]\n\n        done  # End of for switch in *\n\n      fi  # End of if [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n\n      cd ..\n\n    elif [ $ix == 1 ]\n      then\n      echo \"Must specify Rack names when outputting Racks\"\n      usage_full \"2\"\n    fi  # End of if [ -n \"${tb_rack[$ix]}\" ]\n\n  done  # End of for (( ix=1 ; $ix<$MAX_RACKS ; ix=$((ix+1)) ))\n\n# Output switches without racks or rack groups\nelif [ $((n_detail & OUTPUT_SWITCHES)) != 0 ]\n  then\n  # Loop through switches\n  for (( ix=1 ; $ix<$MAX_SWITCHES ; ix=$((ix+1)) ))\n  do\n    if [ -n \"${tb_switch[$ix]}\" ]\n      then\n      cd ${tb_switch[$ix]}\n      gen_topology \"$fl_output_edge_leaf\" \"$fl_output_spine_leaf\"\n      cd ..\n\n    elif [ $ix == 1 ]\n      then\n      echo \"Must specify Switch names when outputting Switches\"\n      usage_full \"2\"\n    fi  # End of if [ -n \"${tb_switch[$ix]}\" ]\n\n  done  # End of for (( ix=1 ; $ix<$MAX_SWITCHES ; ix=$((ix+1)) ))\n\nfi  # End of if [ $((n_detail & OUTPUT_GROUPS)) != 0 ]\n\ndisplay_progress \"Done\"\nexit 0\n\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\n# Topology script to translate one or more custom (customer) topology CSV\n# files for a (single) fabric to a standard-format topology.csv file for\n# input to opaxlattopology.sh.\n\n# Primary input topology CSV format:\n#  Line 1     header data (ignored)\n#  Line 2     blank\n#  Line 3     fabric value pairs\n#  Line 4     header data (ignored)\n#  Lines 5-N  topology CSV\n\n# Primary input Links Fields:\n#  Source Name:    01\n#  Dest Name:      02\n#  Cable Length:   03\n#  Cable Details:  04\n\n# Secondary input topology CSV format:\n#  Lines 1-N  topology CSV\n\n# Primary input Links Fields:\n#  Source Name:    01\n#  Dest Name:      02\n#  Cable Length:   03\n#  Cable Details:  04\n\n# Output topology CSV format:\n#  Line 1         header line 1 (\"Standard-Format Topology Spread Sheet\")\n#  Line 2         header line 2 (\"Source   Destination   Cable\")\n#  Line 3         header line 3 (\"Rack Group   Rack   Name   Name-2 ...\")\n#  Lines 4-N      topology CSV\n#  Line N+1       blank\n#  Line N+2       core specification\n\n# Output Links Fields:\n#  Source Rack Group: 01\n#  Source Rack:       02\n#  Source Name:       03\n#  Source Name-2:     04\n#  Source Port:       05\n#  Source Type:       06\n#  Dest Rack Group:   07\n#  Dest Rack:         08\n#  Dest Name:         09\n#  Dest Name-2:       10\n#  Dest Port:         11\n#  Dest Type:         12\n#  Cable Label:       13\n#  Cable Length:      14\n#  Cable Details:     15\n\n# Output Core specifications (same line):\n#  Core Name:X\n#  Core Size:X (288 or 1152)\n#  Core Group:X\n#  Core Rack:X\n#  Core Full:X (0 or 1)\n\n\n## Defines:\nPROGRAM_NAME=\"opaxlattopology_cust\"\nHOST_NAME_BASE=\"host\"\nEDGE_NAME_BASE=\"opasw\"\nCORE_NAME_BASE=\"opacore\"\nFILE_RESERVE=\"file_reserve\"\nFILE_TEMP=\"file_temp\"\nFILE_TEMP2=\"file_temp2\"\nFILE_DEBUG=\"file_debug\"\nFILE_DEBUG2=\"file_debug2\"\nOUTPUT_DETAIL=0\nNODETYPE_HFI=\"FI\"\nNODETYPE_EDGE=\"SW\"\nNODETYPE_LEAF=\"CL\"\nNODETYPE_SPINE=\"CS\"\nDUMMY_CORE_NAME=\"ZzNAMEqQ\"\nCORE_GROUP=\"Core Group:\"\nCORE_RACK=\"Core Rack:\"\nCORE_NAME=\"Core Name:\"\nCORE_SIZE=\"Core Size:\"\nCORE_FULL=\"Core Full:\"\nHFI_SUFFIX=\"HFI-1\"\n\n\n## Global variables:\n\n# Parsing tokens:\nt_00=\"\"\nt_01=\"\"\nt_02=\"\"\nt_03=\"\"\nt_filler=\"\"\n\nt_srcname=\"\"\nt_dstname=\"\"\nt_cablelength=\"\"\nt_cabledetails=\"\"\n\n# Output CSV values:\nsrcgroup=\"\"\nsrcrack=\"\"\nsrcname=\"\"\nsrcname2=\"\"\nsrcport=\"\"\nsrctype=\"\"\ndstgroup=\"\"\ndstrack=\"\"\ndstname=\"\"\ndstname2=\"\"\ndstport=\"\"\ndsttype=\"\"\ncablelabel=\"\"\ncablelength=\"\"\ncabledetails=\"\"\ncore_group=\"\"\ncore_rack=\"\"\ncore_name=\"$CORE_NAME_BASE\"\ncore_size=\"\"\ncore_full=0\n\n# Operating variables:\ncts_parse=0\nix=0\nn_verbose=2\nindent=\"\"\ncat_char=\" \"\nfl_clean=1\nmax_coreswitch=0\nfile_topology_in=\"\"\nfile_topology_in2=\"\"\nfile_topology_out=\"\"\ntb_corename[0]=\"\"\n\n# Debug variables:\ndebug_0=\ndebug_1=\ndebug_2=\ndebug_3=\ndebug_4=\ndebug_5=\ndebug_6=\ndebug_7=\n#echo \"DEBUG-x.y: 0:$debug_0: 1:$debug_1: 2:$debug_2: 3:$debug_3: 4:$debug_4: 5:$debug_5: 6:$debug_6: 7:$debug_7:\"\n\n\n## Local functions:\nfunctout=\n\nfunction clean_tempfiles() {\n\tif [ $fl_clean == 1 ]\n\tthen\n\t\trm -f $FILE_TEMP $FILE_TEMP2\n\tfi\n}\n\ntrap 'clean_tempfiles; exit 1' SIGINT SIGHUP SIGTERM\ntrap 'clean_tempfiles' EXIT\n\n# Output usage information\nusage_full()\n{\n\techo \"Usage: $PROGRAM_NAME -t topology_prime [-s topology_second] -T topology_out\"\n\techo \"                     [-v level] [-i level] [-c char] [-K] [-?]\"\n\techo \"  -t topology_prime  - primary topology CSV input file\"\n\techo \"  -s topology_second - secondary topology CSV input file\"\n\techo \"  -T topology_out    - topology CSV output file\"\n\techo \"  -v level  -  verbose level (0-8, default 2)\"\n\techo \"               0 - no output\"\n\techo \"               1 - progress output\"\n\techo \"               2 - reserved\"\n\techo \"               4 - time stamps\"\n\techo \"               8 - reserved\"\n\techo \"  -i level  -  screen output indent level (0-15, default 0)\"\n\techo \"  -c char   -  concatenation char (default SPACE)\"\n\techo \"  -K        -  DO NOT clean temporary files\"\n\techo \"  -?        -  print this output\"\n\texit $1\n}\t# End of usage_full()\n\n# Convert node name from custom encoded forms to standard CSV.  The following\n# conversions are performed:\n#   CnLxxxpM  -> <CORE_NAME_BASE>N,Lxxx,M,<NODETYPE_LEAF>\n#   opaNpM     -> <EDGE_NAME_BASE>N,,M,<NODETYPE_EDGE>\n#   abc[-]N   -> abc[-]N,,1,<NODETYPE_HFI>\n\n# Inputs:\n#   $1 - encoded node name\n#\n# Outputs:\n#   Converted node name in CSV string\ncvt_nodename()\n{\n\tlocal val\n\n\tval=`echo $1 | sed -r \\\n\t\t-e \"s/^[cC]([0-9]+)[lL]([0-9]+)[pP]([0-9]+)/$CORE_NAME_BASE;\\1,L\\2,\\3,$NODETYPE_LEAF/\" \\\n\t\t-e \"s/^opa([0-9]+)[pP]([0-9]+)/$EDGE_NAME_BASE;\\1,,\\2,$NODETYPE_EDGE/\" \\\n\t\t-e \"s/^([a-zA-Z-]+)([0-9]+)/\\1;\\2,,1,$NODETYPE_HFI/\"`\n\techo \"$val\" | sed -e 's/;//g'\n\n}\t# End of cvt_nodename\n\n# Display progress information (to STDOUT)\n# Inputs:\n#   $1 - progress string\n#\n# Outputs:\n#   none\ndisplay_progress()\n{\n\tif [ $n_verbose -ge 1 ]\n\t\tthen\n\t\techo \"$indent$1\"\n\t\tif [ $n_verbose -ge 4 ]\n\t\t\tthen\n\t\t\techo \"$indent  \"`date`\n\t\tfi\n\tfi\n}\t# End of display_progress()\n\n# Process core switch\n# Save core switch name in tb_corename, indexed by switch number\n\n# Inputs:\n#   $1 - core switch name\nproc_coreswitch()\n{\n\tlocal corenum\n\n\tcorenum=`echo \"$1\" | sed -r -e \"s/$CORE_NAME_BASE([0-9]+)/\\1/\"`\n\ttb_corename[$corenum]=\"$1\"\n\tif [ $corenum -gt $max_coreswitch ]\n\t\tthen\n\t\tmax_coreswitch=$corenum\n\tfi\n\n}\t# End of proc_corename\n\n\n## Main function:\n\n# Get options\nwhile getopts c:i:Ks:t:T:v:? option\ndo\n\tcase $option in\n\tc)\n\t\tcat_char=$OPTARG\n\t\t;;\n\n\ti)\n\t\tindent=`echo \"                    \" | cut -b -$OPTARG`\n\t\t;;\n\n\tK)\n\t\tfl_clean=0\n\t\t;;\n\n\ts)\n\t\tfile_topology_in2=\"$OPTARG\"\n\t\tif [ ! -f $file_topology_in2 ]\n\t\t\tthen\n\t\t\techo \"$PROGRAM_NAME: File $file_topology_in2 does not exist\"\n\t\t\tUsage\n\t\tfi\n\t\t;;\n\tt)\n\t\tfile_topology_in=\"$OPTARG\"\n\t\tif [ ! -f $file_topology_in ]\n\t\t\tthen\n\t\t\techo \"$PROGRAM_NAME: File $file_topology_in does not exist\"\n\t\t\tUsage\n\t\tfi\n\t\t;;\n\tT)\n\t\tfile_topology_out=\"$OPTARG\"\n\t\t;;\n\n\tv)\n\t\tn_verbose=$OPTARG\n\t\t;;\n\n\t*)\n\t\tusage_full \"0\"\n\t\t;;\n\tesac\ndone\n\nif [ -z \"$file_topology_in\" ]\n\tthen\n\techo \"$PROGRAM_NAME: must specify primary topology input file\"\n\tusage_full \"1\"\nfi\nif [ ! -f \"$file_topology_in\" ]\n\tthen\n\techo \"$PROGRAM_NAME: $file_topology_in does not exist\"\n\tusage_full \"1\"\nfi\nif [ -n \"$file_topology_in2\" ]\n\tthen\n\tif [ ! -f \"$file_topology_in2\" ]\n\t\tthen\n\t\techo \"$PROGRAM_NAME: $file_topology_in2 does not exist\"\n\t\tusage_full \"1\"\n\tfi\nfi\nif [ -z \"$file_topology_out\" ]\n\tthen\n\techo \"$PROGRAM_NAME: must specify topology output file\"\n\tusage_full \"1\"\nfi\n\n# Parse topology input file(s)\ndisplay_progress \"Reading $file_topology_in (and $file_topology_in2)\"\nif [ -z $file_topology_in2 ]\n\tthen\n\tcat $file_topology_in > $FILE_TEMP\nelse\n\tcat $file_topology_in $file_topology_in2 > $FILE_TEMP\nfi\n\n# Output header lines\nrm -f $file_topology_out\necho \"Translated Customer Topology from:$file_topology_in (and $file_topology_in2),,,,,,,,,,,,,,\" >> ${file_topology_out}\necho \"Source,,,,,,Destination,,,,,,Cable,,\" >> ${file_topology_out}\necho \"Rack Group,Rack,Name,Name-2,Port,Type,Rack Group,Rack,Name,Name-2,Port,Type,Label,Length,Details\" >> ${file_topology_out}\n\nix_line=1\n\nIFS=\",\"\nwhile read t_00 t_01 t_02 t_03 t_filler\ndo\n\tcase $cts_parse in\n\t# Process core switch data\n\t0)\n\t\tif echo \"$t_00\" | grep -e \"Core Switch\" > /dev/null 2>&1\n\t\t\tthen\n\t\t\tcore_size=`echo $t_00 | cut -d ':' -f 2 | sed -r -e 's/^([0-9]+)[fF]*/\\1/'`\n\t\t\tif [ $core_size -ne 288 -a $core_size -ne 1152 ]\n\t\t\t\tthen\n\t\t\t\techo \"$PROGRAM_NAME: Invalid Core Switch parameter ($t_00)\"\n\t\t\t\tusage_full \"2\"\n\t\t\tfi\n\t\t\tif echo \"$t_00\" | cut -d ':' -f 2 | grep -i -e '[fF]' > /dev/null 2>&1\n\t\t\t\tthen\n\t\t\t\tcore_full=1\n\t\t\tfi\n\n\t\t\tcts_parse=1\n\t\tfi\n\t\t;;\n\n\t# Process link header line\n\t1)\n\t\tif echo \"$t_00\" | grep -e \"Source\" > /dev/null 2>&1\n\t\t\tthen\n\t\t\tcts_parse=2\n\t\tfi\n\t\t;;\n\n\t# Process link lines\n\t2)\n\t\tif [ -n \"$t_00\" ]\n\t\t\tthen\n\t\t\tt_srcname=$t_00\n\t\t\tt_dstname=$t_01\n\t\t\tt_cablelength=$t_02\n\t\t\tt_cabledetails=$t_03\n\n\t\t\tnodename=`cvt_nodename \"$t_srcname\"`\n\t\t\tsrcgroup=\"\"\n\t\t\tsrcrack=\"\"\n\t\t\tsrcname=`echo \"$nodename\" | cut -d ',' -f 1`\n\t\t\tsrcname2=`echo \"$nodename\" | cut -d ',' -f 2`\n\t\t\tsrcport=`echo \"$nodename\" | cut -d ',' -f 3`\n\t\t\tsrctype=`echo \"$nodename\" | cut -d ',' -f 4`\n\t\t\tif [ \"$srctype\" == \"$NODETYPE_LEAF\" ]\n\t\t\t\tthen\n\t\t\t\tproc_coreswitch \"$srcname\"\n\t\t\tfi\n\n\t\t\tnodename=`cvt_nodename \"$t_dstname\"`\n\t\t\tdstgroup=\"\"\n\t\t\tdstrack=\"\"\n\t\t\tdstname=`echo \"$nodename\" | cut -d ',' -f 1`\n\t\t\tdstname2=`echo \"$nodename\" | cut -d ',' -f 2`\n\t\t\tdstport=`echo \"$nodename\" | cut -d ',' -f 3`\n\t\t\tdsttype=`echo \"$nodename\" | cut -d ',' -f 4`\n\t\t\tif [ \"$dsttype\" == \"$NODETYPE_LEAF\" ]\n\t\t\t\tthen\n\t\t\t\tproc_coreswitch \"$dstname\"\n\t\t\tfi\n\n\t\t\tcablelabel=\"$t_srcname$cat_char$t_dstname\"\n\t\t\tcablelength=\"$t_cablelength\"\n\t\t\tcabledetails=\"$t_cabledetails\"\n\n\t\t\t# Output link line\n\t\t\techo \"${srcgroup},${srcrack},${srcname},${srcname2},${srcport},${srctype},${dstgroup},${dstrack},${dstname},${dstname2},${dstport},${dsttype},${cablelabel},${cablelength},${cabledetails}\" >> ${file_topology_out}\n\t\telse\n\t\t\tcts_parse=3\n\t\tfi\n\t\t;;\n\n\tesac\t# end of case $cts_parse in\n\n  ix_line=$((ix_line+1))\n\ndone < <( cat $FILE_TEMP | tr -d '\\015' )\t# End of while read ... do\n\n# Generate core line\ndisplay_progress \"Ending $file_topology_out with core line(s)\"\necho \",,,,,,,,,,,,,,\" >> ${file_topology_out}\nfor (( ix=0 ; $ix <= $max_coreswitch ; ix=$[ix+1] ))\ndo\n\tif [ -n \"${tb_corename[$ix]}\" ]\n\t\tthen\n\t\techo \"${CORE_NAME}${tb_corename[$ix]},${CORE_GROUP}${core_group},${CORE_RACK}${core_rack},${CORE_SIZE}${core_size},${CORE_FULL}${core_full},,,,,,,,,,\" >> ${file_topology_out}\n\tfi\ndone\t# End of for (( ix=0 ; $ix <= $max_coreswitch ; ix=$[ix+1] ))\necho \",,,,,,,,,,,,,,\" >> ${file_topology_out}\n\n# Clean temporary files\nclean_tempfiles\n\ndisplay_progress \"Done\"\nexit 0\n\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\nTEMP1=`mktemp`\nTEMP2=`mktemp`\ntrap \"rm -f $TEMP1 $TEMP2; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $TEMP1 $TEMP2\" EXIT\n\nUsage()\n{\n\techo \"Usage: config_diff [-f][-l] [-d 'diff_args'] file1 file2\" >&2\n\techo \"      -f  - filter out FM parameters which are not part of consistency check\" >&2\n\techo \"      -l  - include comments in XML to indicate original line numbers\" >&2\n\techo \"      -d 'diff_args' - additional arguments to diff command\" >&2\n\texit 2\n}\n\nif [ ! -f /etc/sysconfig/opa/opafm.info -a ! -f /etc/sysconfig/opa/qlogic_fm.info ]\nthen\n\techo \"config_diff: IFS FM not installed\" >&2\n\texit 1\nelse\n\tif [ -f /etc/sysconfig/opa/qlogic_fm.info ]\n\tthen \n\t\tcp -f /etc/sysconfig/opa/qlogic_fm.info /etc/sysconfig/opa/opafm.info\n\tfi\n\t. /etc/sysconfig/opa/opafm.info # get IFS_FM_BASE\n\ttooldir=$IFS_FM_BASE/etc\nfi\n\nfilter=n\nfilter_args=\ndiff_args=\nwhile getopts fld: param\ndo\n\tcase $param in\n\tf)\tfilter=y;;\n\tl)\tfilter_args=\"$filter_args -l\";;\n\td)\tdiff_args=\"$diff_args $OPTARG\";;\n\t?)\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\nif [ $# -lt 2 ]\nthen\n\tUsage\nfi\nfile1=$1\nfile2=$2\n\nif [ ! -e $file1 ]\nthen\n\techo \"$file1: Not Found\" >&2\n\tUsage\nfi\nif [ ! -e $file2 ]\nthen\n\techo \"$file2: Not Found\" >&2\n\tUsage\nfi\n\nif [ x\"$filter\" = xy ]\nthen\n\tfilter_args=\"$filter_args -s Start -s Hca -s Port -s Debug -s RmppDebug -s Priority -s ElevatedPriority -s LogLevel -s LogFile -s LogMode -s SyslogFacility \n-s *_LogMask -s Name -s PortGUID -s Sm.TrapLogSuppressTriggerInterval -s Sm.SmPerfDebug -s Sm.SaPerfDebug -s Sm.DebugDor -s Sm.DebugVf -s Sm.DebugJm -s Sm.DebugLidAssign -s Sm.LoopTestOn -s Sm.LoopTestPacket -s Sm.LID -s Sm.DynamicPortAlloc -s Sm.SaRmppChecksum -s Pm.ThresholdsExceededMsgLimit -s Pm.SweepErrorsLogThreshold -s Bm.DebugFlag -s Fe.TcpPort\"\nfi\n\n$tooldir/opaxmlfilter -i 4 $filter_args $file1 > $TEMP1\n[ $? != 0 ] && exit 1\n\n$tooldir/opaxmlfilter -i 4 $filter_args $file2 > $TEMP2\n[ $? != 0 ] && exit 1\n\ndiff $diff_args $TEMP1 $TEMP2\nres=$?\n\nrm -f $TEMP1 $TEMP\nexit $res\n", "#!/bin/bash\n# BEGIN_ICS_COPYRIGHT8 ****************************************\n# \n# Copyright (c) 2015, Intel Corporation\n# \n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n# \n#     * Redistributions of source code must retain the above copyright notice,\n#       this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above copyright\n#       notice, this list of conditions and the following disclaimer in the\n#       documentation and/or other materials provided with the distribution.\n#     * Neither the name of Intel Corporation nor the names of its contributors\n#       may be used to endorse or promote products derived from this software\n#       without specific prior written permission.\n# \n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# \n# END_ICS_COPYRIGHT8   ****************************************\n\n# [ICS VERSION STRING: unknown]\n\nTEMP=`mktemp`\ntrap \"rm -f $TEMP; exit 1\" SIGHUP SIGTERM SIGINT\ntrap \"rm -f $TEMP\" EXIT\n\nUsage()\n{\n\techo \"Usage: config_generate [-e] dest_file\" >&2\n\techo \"      -e  - generate file for embedded FM, default is to generate for host FM\" >&2\n\texit 2\n}\n\nif [ -f /opt/opa/fm_tools/config_convert -a -f /opt/opa/fm_tools/opafm_src.xml ]\nthen\n\ttooldir=/opt/opa/fm_tools\nelif [ ! -f /etc/sysconfig/opa/opafm.info || ! -f /etc/sysconfig/opa/qlogic_fm.info ]\nthen\n\techo \"config_generate: IFS FM not installed\" >&2\n\texit 1\nelse\n\tif [ -f /etc/sysconfig/opa/qlogic_fm.info ]\n        then\n                cp -f /etc/sysconfig/opa/qlogic_fm.info /etc/sysconfig/opa/opafm.info\n        fi\n\n\t. /etc/sysconfig/opa/qlogic_fm.info # get IFS_FM_BASE\n\ttooldir=$IFS_FM_BASE/etc\nfi\n\nesm=n\nwhile getopts e param\ndo\n\tcase $param in\n\te)\tesm=y;;\n\t?)\tUsage;;\n\tesac\ndone\nshift $((OPTIND -1))\n\nif [ $# -lt 1 ]\nthen\n\tUsage\nfi\ndest_file=$1\n\nprint_separator()\n{\n\techo \"-------------------------------------------------------------------------------\"\n}\n\n# global $ans set to 1 for yes or 0 for no\nget_yes_no()\n{\n\tlocal prompt default input\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\twhile true\n\tdo\n\t\tinput=\n\t\techo -n \"$prompt [$default]:\"\n\t\tread input\n\t\tif [ \"x$input\" = x ]\n\t\tthen\n\t\t\tinput=\"$default\"\n\t\tfi\n\t\tcase \"$input\" in\n\t\t[Yy]*)\tans=1; break;;\n\t\t[Nn]*)\tans=0; break;;\n\t\tesac\n\tdone\n}\n\n# global $ans set to value input\nget_number()\n{\n\tlocal prompt default input min max\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\tmin=\"$3\"\n\tmax=\"$4\"\n\twhile true\n\tdo\n\t\tinput=\n\t\techo -n \"$prompt [$default]:\"\n\t\tread input\n\t\tif [ \"x$input\" = x ]\n\t\tthen\n\t\t\tinput=\"$default\"\n\t\tfi\n\t\tif [ \"$input\" -lt $min -o \"$input\" -gt $max ] 2>/dev/null\n\t\tthen\n\t\t\techo \"Input must be number $min to $max.  Invalid Input: $input\"\n\t\telse\n\t\t\tans=$input\n\t\t\tbreak\n\t\tfi\n\tdone\n}\n\n# global $ans set to value input\nget_string()\n{\n\tlocal prompt default input\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\twhile true\n\tdo\n\t\tinput=\n\t\techo -n \"$prompt [$default]:\"\n\t\tread input\n\t\tif [ \"x$input\" = x ]\n\t\tthen\n\t\t\tinput=\"$default\"\n\t\tfi\n\t\tans=$input\n\t\tbreak\n\tdone\n}\n\n# global $ans set to value input\n#get_choice()\n#{\n#\tlocal prompt default input\n#\tprompt=\"$1\"\n#\tdefault=\"$2\"\n#\tPS3=\"$prompt ($default recommended): \"\n#\tselect input in $choices\n#\tdo\n#\t\tcase \"$input\" in\n#\t\tgcc|pathscale|pgi|intel) ans=$input; break;;\n#\t\tesac\n#\tdone\n#}\n\n# global $ans set to value input\nmtu[1]=\"256\"\nmtu[2]=\"512\"\nmtu[3]=\"1024\"\nmtu[4]=\"2048\"\nmtu[5]=\"4096\"\nget_mtu()\n{\n\tlocal prompt default input\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\n\t# set default in case cntrl-D entered\n\tcase \"$default\" in\n\t2048) ans=4;;\t# convert to IBTA enum\n\t4096) ans=5;;\t# convert to IBTA enum\n\tesac\n\n\tPS3=\"$prompt ($default recommended): \"\n\tselect input in 2048 4096\n\tdo\n\t\tcase \"$input\" in\n\t\t2048) ans=4; break;;\t# convert to IBTA enum\n\t\t4096) ans=5; break;;\t# convert to IBTA enum\n\t\tesac\n\tdone\n}\n\n# global $ans set to value input\n# rate 1 is obsolete\nrate[2]=\"2.5g\"\nrate[3]=\"10g\"\nrate[4]=\"30g\"\nrate[5]=\"5g\"\nrate[6]=\"20g\"\nrate[7]=\"40g\"\nrate[8]=\"60g\"\nrate[9]=\"80g\"\nrate[10]=\"120g\"\n\nget_rate()\n{\n\tlocal prompt default input\n\tprompt=\"$1\"\n\tdefault=\"$2\"\n\n\t# set default in case cntrl-D entered\n\tcase \"$default\" in\n\t'10g(4xSDR)') ans=3;;\t# convert to IBTA enum\n\t'20g(4xDDR)') ans=6;;\t# convert to IBTA enum\n\t'30g(12xSDR)') ans=4;;\t# convert to IBTA enum\n\t'60g(12xDDR)') ans=8;;\t# convert to IBTA enum\n\tesac\n\n\tPS3=\"$prompt ($default recommended): \"\n\t#select input in '10g(4xSDR)' '20g(4xDDR)' '30g(12xSDR)' '60g(12xDDR)' '40g(4xQDR)'\n\tselect input in '10g(4xSDR)' '20g(4xDDR)' '40g(4xQDR)'\n\tdo\n\t\tcase \"$input\" in\n\t\t'10g(4xSDR)') ans=3; break;;\t# convert to IBTA enum\n\t\t'20g(4xDDR)') ans=6; break;;\t# convert to IBTA enum\n\t\t'30g(12xSDR)') ans=4; break;;\t# convert to IBTA enum\n\t\t'40g(4xQDR)') ans=7; break;;\t# convert to IBTA enum\n\t\t'60g(12xDDR)') ans=8; break;;\t# convert to IBTA enum\n\t\tesac\n\tdone\n}\n\nenable_instance()\n{\n\tlocal instance\n\tinstance=$1\n\n\tfm_enabled[$instance]=1\n\techo \"SM_${instance}_start=yes\" >> $TEMP\n\techo \"PM_${instance}_start=yes\" >> $TEMP\n\techo \"BM_${instance}_start=yes\" >> $TEMP\n\techo \"FE_${instance}_start=yes\" >> $TEMP\n}\n\nset_instance_priority()\n{\n\tlocal instance priority\n\tinstance=$1\n\tpriority=$2\n\n\techo \"SM_${instance}_priority=$priority\" >> $TEMP\n\techo \"PM_${instance}_priority=$priority\" >> $TEMP\n\techo \"BM_${instance}_priority=$priority\" >> $TEMP\n\t#echo \"FE_${instance}_priority=$priority\" >> $TEMP\n}\n\nif [ -e $dest_file ]\nthen\n\tif [ ! -f $dest_file ]\n\tthen\n\t\techo \"config_generate: $dest_file exists but is not a file\" >&2\n\t\texit 1\n\tfi\n\tget_yes_no \"Overwrite existing $dest_file\" \"n\"\n\tif [ $ans -eq 0 ]\n\tthen\n\t\texit 0\n\tfi\nfi\n\n# FM instance HCAs\nfm_hca[0]=1\nfm_hca[1]=1\nfm_hca[2]=2\nfm_hca[3]=2\n# FM instance Ports\nfm_port[0]=1\nfm_port[1]=2\nfm_port[2]=1\nfm_port[3]=2\n# which instances are enabled\nfm_enabled[0]=0\nfm_enabled[1]=0\nfm_enabled[2]=0\nfm_enabled[3]=0\n# default names for instances\nfm_name[0]=fm0\nfm_name[1]=fm1\nfm_name[2]=fm2\nfm_name[3]=fm3\n# FM device descriptions\nfm_device[0]=\"HCA ${fm_hca[0]} Port ${fm_port[0]}\"\nfm_device[1]=\"HCA ${fm_hca[1]} Port ${fm_port[1]}\"\nfm_device[2]=\"HCA ${fm_hca[2]} Port ${fm_port[2]}\"\nfm_device[3]=\"HCA ${fm_hca[3]} Port ${fm_port[3]}\"\n\nfm_allinstances=\"all FM instances\"\n\t\n# start to build $TEMP file with answers\nrm -f $TEMP\nprint_separator\necho \"FM resources and buffering are scaled to match the anticipated maximum size\"\necho \"of the fabric.  The size is specified in terms of the number of CAs in\"\necho \"a single fabric.\"\nif [ \"$esm\" = y ]\nthen\n\techo \"For Embedded Fabric Manager, its recommended to use a value of 1000 or less.\"\n\tget_number \"Anticipated maximum fabric size\" 1000 0 1000\nelse\n\techo \"For Host Fabric Manager, its recommended to use a value of 2560 or larger.\"\n\tget_number \"Anticipated maximum fabric size\" 2560 0 10000\nfi\necho \"  Setting SubnetSize to $ans\"\necho \"SUBNET_SIZE=$ans\" >> $TEMP\n\nprint_separator\necho \"LMC is used to control the number of LIDs per CA.\"\necho \"Multiple LIDs can be used to permit multiple routes between endpoints.\"\necho \"This permits selected applications (such as MPIs using QLogic PSM) to\"\necho \"optimize performance and/or resiliency by using dispersive routing.\"\nget_number \"LMC value to use (there will be 2^LMC LIDs per CA)\" 0 0 7\necho \"  Setting Lmc to $ans\"\necho \"  There will be $((2**$ans)) LIDs per CA\"\necho \"SM_0_lmc=$ans\" >> $TEMP\t# sets for all instances\n\nprint_separator\necho \"Adaptive routing permits QLogic QDR switches to dynamically adjust routing\"\necho \"based on traffic patterns and hence reduce congestion and improve overall\"\necho \"cluster performance and efficiency.\"\nget_yes_no \"Should Adaptive Routing be enabled\" \"n\"\necho \"  Setting AdaptiveRouting.Enable to $ans\"\necho \"SM_0_ar_enable=$ans\" >> $TEMP # sets for all instances\nif [ \"$ans\" -eq 1 ]\nthen\n\techo \"Adaptive routing will always route around failed or down links.\"\n   \techo \"In addition adapting routing around congestion can be enabled.\"\n\tget_yes_no \"Should Adaptive Routing around congestion be enabled\" \"n\"\n\techo \"  Setting AdaptiveRouting.LostRouteOnly to $ans\"\n\techo \"SM_0_ar_lost_route_only=$ans\" >> $TEMP # sets for all instances\n\n\techo \"Adaptive routing will always permit adapting among links between neighbor\"\n   \techo \"switch ASICs. In addition for pure CLOS/Fat Tree topologies, adaptions can be\"\n   \techo \"enabled to occur at all levels in the tree and across all ISLs.\"\n\tget_yes_no \"Should full CLOS/Fat Tree Adaptive Routing be enabled\" \"n\"\n\techo \"  Setting AdaptiveRouting.Tier1FatTree to $ans\"\n\techo \"SM_0_ar_tier1_fat_tree=$ans\" >> $TEMP # sets for all instances\nfi\n\nif [ \"$esm\" != y ]\nthen\n\tprint_separator\n\techo \"The FM logging has two possible modes.\"\n\techo \"In Normal mode, logging includes user actionable events and other FM\"\n\techo \"messages such as sweep progress, internal warnings and errors, etc.\"\n\techo \"In Quiet mode, only user actionable events are logged.\"\n\tget_yes_no \"Should Quiet Mode be used\" \"n\"\n\techo \"  Setting LogMode to $ans\"\t# 0=Normal, 1=Quiet\nelse\n\tans=0\nfi\n\nprint_separator\necho \"When nodes appear or disappear from the fabric, a message is logged.\"\necho \"A Threshold can be configured to limit the number of such messages per sweep.\"\necho \"This Threshold can help to avoid excessive messages when fabric changes occur.\"\nget_number \"Node Appearance Log Message Threshold\" 100\necho \"  Setting NodeAppearanceMsgThreshold to $ans\"\necho \"SM_0_node_appearance_msg_thresh=$ans\" >> $TEMP # sets for all instances\n\nif [ \"$esm\" = y ]\nthen\n\tenable_instance 0\n\tinstances=\"0\"\n\tnum_instances=1\n\tfm_device[0]=\"Switch Port 0\"\n\tfm_allinstances=\"this FM\"\nelse\n\tprint_separator\n\techo \"By default a FM node will run a single FM on the 1st Port of the 1st HCA.\"\n\techo \"However, in larger configurations, a single FM node may be used to\"\n\techo \"manage multiple fabrics.  Each such fabric would be contected to a different\"\n\techo \"HCA port.  Each HCA port is associated with a different FM instance.\"\n\tnum_instances=0\n\tdefault=y\n\tfor instance in 0 1 2 3\n\tdo\n\t\tget_yes_no \"Should FM instance $instance (${fm_device[$instance]}) be enabled\" $default\n\t\tdefault=n\t# only default to instance 0 enabled\n\t\tif [ \"$ans\" -eq 1 ]\n\t\tthen\n\t\t\techo \"  Enabling Start of FM instance $instance SM, PM, BM and FE\"\n\t\t\tenable_instance $instance\n\t\t\tinstances=\"$instances $instance\"\n\t\t\tnum_instances=$(($num_instances + 1))\n\t\tfi\n\tdone\nfi\n\nprint_separator\nif [ \"$esm\" = y ]\nthen\n\techo \"Each FM can have a name.\"\nelse\n\techo \"Each FM instance can have a unique name.  The name will appear as part\"\n\techo \"of all syslog entries generated by the given FM instance.\"\nfi\nfor instance in $instances\ndo\n\tget_string \"Name for FM instance $instance (${fm_device[$instance]})\" \"fm$instance\"\n\techo \"  Setting Name of FM instance $instance to $ans\"\n\techo \"SM_${instance}_name=$ans\" >> $TEMP\n\tfm_name[$instance]=\"$ans\"\ndone\n\nprint_separator\necho \"The FM configures the rate and MTU used for IPoIB multicast.\"\necho \"The rate selected must be no greater than the rate of the slowest link\"\necho \"in the fabric(s).\"\necho \"The MTU selected must be no greater than the MTU of the smallest MTU link\"\necho \"in the fabric(s).\"\necho \"When selecting the rate and MTU, CAs which won't run IPoIB can be ignored.\"\necho \"However all Switches must be operating with at least the rate and MTU selected.\"\necho\nif [ $num_instances -eq 1 ]\nthen\n\tsame_rate=1\n\tsame_mtu=1\nelse\n\tget_yes_no \"Will the same IPoIB Rate be used for $fm_allinstances\" \"y\"\n\tsame_rate=$ans\n\tget_yes_no \"Will the same IPoIB MTU be used for $fm_allinstances\" \"y\"\n\tsame_mtu=$ans\nfi\nif [ $same_rate -eq 1 ]\nthen\n\tget_rate \"IPoIB rate for $fm_allinstances\" '20g(4xDDR)'\n\trate=$ans\nfi\nif [ $same_mtu -eq 1 ]\nthen\n\tget_mtu \"IPoIB MTU for $fm_allinstances\" 2048\n\tmtu=$ans\nfi\nif [ $same_mtu -eq 1 -a $same_rate -eq 1 ]\nthen\n\techo \"  Setting MulticastGroup.MTU to ${mtu[$mtu]}\"\n\techo \"  Setting MulticastGroup.Rate to ${rate[$rate]}\"\n\techo \"SM_0_def_mc_mtu=$mtu\" >> $TEMP # sets for all instances\n\techo \"SM_0_def_mc_rate=$rate\" >> $TEMP # sets for all instances\nelse\n\tfor instance in $instances\n\tdo\n\t\tif [ $same_rate -eq 0 ]\n\t\tthen\n\t\t\tget_rate \"IPoIB rate for FM instance $instance (${fm_name[$instance]}) (${fm_device[$instance]})\" '20g(4xDDR)'\n\t\t\trate=$ans\n\t\tfi\n\t\tif [ $same_mtu -eq 0 ]\n\t\tthen\n\t\t\tget_mtu \"IPoIB MTU for FM instance $instance (${fm_name[$instance]}) (${fm_device[$instance]})\" 2048\n\t\t\tmtu=$ans\n\t\tfi\n\t\techo \"  Setting MulticastGroup.Rate for FM instance $instance to ${rate[$rate]}\"\n\t\techo \"  Setting MulticastGroup.MTU for FM instance $instance to ${mtu[$mtu]}\"\n\t\tif [ $instance -eq 0 ]\n\t\tthen\n\t\t\techo \"SM_0_def_mc_mtu=$mtu\" >> $TEMP\n\t\t\techo \"SM_0_def_mc_rate=$rate\" >> $TEMP\n\t\telse\n\t\t\techo \"SM_${instance}_def_mc_create=0x1\" >> $TEMP\n\t\t\t#echo \"SM_${instance}_def_mc_pkey=0xffff\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_mtu=$mtu\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_rate=$rate\" >> $TEMP\n\t\t\t#echo \"SM_${instance}_def_mc_sl=0x0\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_qkey=0x0\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_fl=0x0\" >> $TEMP\n\t\t\techo \"SM_${instance}_def_mc_tc=0x0\" >> $TEMP\n\t\tfi\n\tdone\nfi\n\nprint_separator\necho \"The FM supports failover.  The FM to be preferred as the primary can be\"\necho \"selected per FM instance.\"\necho \"If no preferred primary is selected, FMs will negotiate based on CA GUIDs.\"\nget_yes_no \"Do you want to configure a preferred primary or secondary FM\" \"n\"\nif [ $ans -eq 1 ]\nthen\n\tif [ $num_instances -eq 1 ]\n\tthen\n\t\tans=1\n\telse\n\t\tget_yes_no \"Will the same FM Failover Priority be used for $fm_allinstances\" \"y\"\n\tfi\n\tif [ $ans -eq 1 ]\n\tthen\n\t\tget_yes_no \"Will this FM be the preferrred primary\" \"y\"\n\t\tif [ $ans -eq 1 ]\n\t\tthen\n\t\t\tset_instance_priority 0 8 # sets for all instances\n\t\t\techo \"  Setting Priority of SM, PM, BM and FE to 8\"\n\t\telse\n\t\t\tset_instance_priority 0 1 # sets for all instances\n\t\t\techo \"  Setting Priority of SM, PM, BM and FE to 1\"\n\t\tfi\n\telse\n\t\tfor instance in $instances\n\t\tdo\n\t\t\tget_yes_no \"Will FM instance $instance (${fm_name[$instance]}) (${fm_device[$instance]}) be the preferred primary\" \"y\"\n\t\t\tif [ $ans -eq 1 ]\n\t\t\tthen\n\t\t\t\techo \"  Setting Priority of FM instance $instance SM, PM, BM and FE to 8\"\n\t\t\t\tset_instance_priority $instance 8 # sets for all instances\n\t\t\telse\n\t\t\t\techo \"  Setting Priority of FM instance $instance SM, PM, BM and FE to 1\"\n\t\t\t\tset_instance_priority $instance 1 # sets for all instances\n\t\t\tfi\n\t\tdone\n\tfi\nfi\n\nprint_separator\necho \"The FM supports sticky failover.  When enabled Sticky failover will\"\necho \"prevent a master FM from relinquishing control even if the preferred\"\necho \"primary FM comes online.  This can prevent situations where a bouncing\"\necho \"preferred primary repeatedly takes over then fails.\"\nget_yes_no \"Should Sticky Failover be enabled\" \"n\"\nif [ $ans -eq 1 ]\nthen\n\techo \"SM_0_elevated_priority=14\" >> $TEMP # sets for all instances\n\techo \"PM_0_elevated_priority=14\" >> $TEMP # sets for all instances\n\techo \"BM_0_elevated_priority=14\" >> $TEMP # sets for all instances\n\t#echo \"FE_0_elevated_priority=14\" >> $TEMP # sets for all instances\n\techo \"  Setting ElevatedPriority of SM, PM, and BM to 14\"\nfi\n\nprint_separator\necho \"Each fabric in a cluster must have a unique 64 bit subnet prefix.\"\necho \"The subnet prefix must be consistently configured on all FMs which\"\necho \"manage the given fabric (eg. on the primary and secondaries).\"\necho \"To simplify input, you will be prompted for the upper bits for the cluster\"\necho \"then you will be prompted for the lower bits for each instance.\"\necho \"The two values will be ORed together to form the subnet prefix for each fabric.\"\nget_string \"Subnet Prefix upper bits for cluster\" \"0xfe80000000000000\"\nupper=$ans\nfor instance in $instances\ndo\n\tif [ $num_instances -eq 1 ]\n\tthen\n\t\tdefault=\"0x0\"\n\telse\n\t\tdefault=\"0x100$instance\"\n\tfi\n\tget_string \"Subnet Prefix lower bits for FM instance $instance (${fm_name[$instance]}) (${fm_device[$instance]})\" \"$default\"\n\tprefix=$(perl -e \"use bignum; printf '0x%016Lx', $upper | $ans;\")\n\techo \"  Setting SubnetPrefix of FM instance $instance to $prefix\"\n\techo \"SM_${instance}_gidprefix=$prefix\" >> $TEMP\ndone\n\nprint_separator\necho \"The Fabric Manager includes a Performance Manager (PM) which can\"\necho \"monitor the data movement and error counters in all devices.\"\necho \"The PM monitors the counters periodically and computes the delta for counters.\"\necho \"If the PM Sweep Interval is set to 0, no automatic sweeps occur.\"\necho \"The PM SweepInterval must be >0 when using tools such as opatop.\"\nget_number \"PM Sweep Interval in seconds\" 10\necho \"  Setting Pm.SweepInterval to $ans\"\necho \"PM_0_SweepInterval=$ans\" >> $TEMP # sets for all instances\n\nif [ $ans -ne 0 ]\nthen\n\tprint_separator\n\techo \"When a port exceeds the threshold for Integrity, Security or Routing errors\"\n\techo \"a message is logged.\"\n\techo \"A Threshold can be configured to limit the number of such messages per sweep.\"\n\techo \"This Threshold can help to avoid excessive messages.\"\n\tget_number \"PM Error Threshold Exceeded Log Message Limit\" 10\n\techo \"  Setting ThresholdsExceededMsgLimit.Integrity to $ans\"\n\techo \"PM_0_ThresholdsExceededMsgLimit_Integrity=$ans\" >> $TEMP # sets for all instances\n\techo \"  Setting ThresholdsExceededMsgLimit.Security to $ans\"\n\techo \"PM_0_ThresholdsExceededMsgLimit_Security=$ans\" >> $TEMP # sets for all instances\n\techo \"  Setting ThresholdsExceededMsgLimit.Routing to $ans\"\n\techo \"PM_0_ThresholdsExceededMsgLimit_Routing=$ans\" >> $TEMP # sets for all instances\n\n\tprint_separator\n\techo \"The PM can retain some recent history in memory.\"\n  \techo \"This history can then be viewed in tools such as opatop.\"\n\techo \"For each historical sweep both the topology and performance data is retained.\"\n\techo \"Each such dataset is referred to as an Image\"\n\techo \"The values will be adjusted based on the number of concurrent PA clients expected.\"\n\tif [ \"$esm\" = y ]\n\tthen\n\t\tget_number \"How many concurrent clients are expected?\" 3 3 4\n\telse\n\t\tget_number \"How many concurrent clients are expected?\" 3 3 20\n\tfi\n\techo \"  Setting Pm.MaxClients to $ans\"\n\techo \"PM_0_MaxClients=$ans\" >> $TEMP # sets for all instances\n\n\t# FF must be >= MaxClients*2 -1\n\t# Total must be >= FF+2\n\tmin_ff=$(($ans * 2 -1))\n\tmin_tot=$((min_ff + 2))\n\tdef_tot=10\n\t[ $min_tot -gt $def_tot ] && def_tot=$min_tot\n\tif [ \"$esm\" = y ]\n\tthen\n\t\tget_number \"How many images should be retained?\" $def_tot $min_tot 10\n\telse\n\t\tget_number \"How many images should be retained?\" $def_tot $min_tot 100000\n\tfi\n\n\techo \"  Setting Pm.TotalImages to $ans\"\n\techo \"PM_0_TotalImages=$ans\" >> $TEMP # sets for all instances\n\n\t# pick a reasonable number of freeze frame images\n\tif [ \"$ans\" -le 10 ]\n\tthen\n\t\tff=$min_ff\t# base on MaxClients\n\telif [ \"$ans\" -lt 50 ]\n\tthen\n\t\tff=$(($ans / 2)) # have a reasonably large supply\n\t\t[ $ff -lt 8 ] && ff=8   # make sure 11-16 have as much as 10 images\n\telse\n\t\tff=25\n\tfi\n\t[ $ff -lt $min_ff ] && ff=$min_ff\n\tans=$ff\n\n\t# pick a reasonable number of freeze frame images\n\t#if [ \"$ans\" -le 10 ]\n\t#then\n\t#\tff=$(($ans -2))\t# allocate max allowed\n\t#elif [ \"$ans\" -lt 50 ]\n\t#then\n\t#\tff=$(($ans / 2)) # have a reasonably large supply\n\t#\t[ $ff -lt 8 ] && ff=8\t# make sure 11-16 have as much as 10 images\n\t#else\n\t#\tff=25\n\t#fi\n\t#ans=$ff\n\n\t#print_separator\n\t#echo \"Tools such as opatop freeze historical images when viewed and can\"\n\t#echo \"also bookmark images for later viewing during a session\".\n\t#echo \"Multiple concurrent opatop sessions could each have unique frozen images.\"\n\t#if [ \"$esm\" = y ]\n\t#then\n\t#\tget_number \"How many frozen/bookmarked images should be allowed\" 5 2 8\n\t#else\n\t#\tget_number \"How many frozen/bookmarked images should be allowed\" 5 2 99998\n\t#fi\n\techo \"  Setting Pm.FreezeFrameImages to $ans\"\n\techo \"PM_0_FreezeFrameImages=$ans\" >> $TEMP # sets for all instances\nfi\n\nprint_separator\n$tooldir/config_convert $TEMP $tooldir/opafm_src.xml > $dest_file\necho \"Generated $dest_file\"\nif [ \"$esm\" = y ]\nthen\n\techo \"To activate this configuration, $dest_file must be transfered to\"\n\techo \"the chassis and the FM must be restarted.\"\n\techo \"The fastfabric TUI provides an easy way to do this.\"\nelif [ \"$dest_file\" != \"/etc/sysconfig/opafm.xml\" ]\nthen\n\techo \"To activate this configuration, $dest_file must be copied to\"\n\techo \"/etc/sysconfig/opafm.xml and the FM must be restarted.\"\nelse\n\techo \"To activate this configuration, the FM must be restarted.\"\nfi\nrm -f $TEMP\n"], "filenames": ["IbaTools/FastFabric/opascpall.sh", "IbaTools/FastFabric/opatest.sh", "IbaTools/disable_ports/opadisablehosts.sh", "IbaTools/disable_ports/opaenableports.sh", "IbaTools/disable_ports/opaextractbadlinks.sh", "IbaTools/disable_ports/opaextractlids.sh", "IbaTools/disable_ports/opaextractsellinks.sh", "IbaTools/opacabletest/opacabletest.sh", "IbaTools/opagenswitches/opagenswitches.sh", "IbaTools/opalinkanalysis/opalinkanalysis.sh", "IbaTools/opasw/opaswscript/opamanageswitch.sh", "IbaTools/opaxlattopology/opaxlattopology.sh", "IbaTools/opaxlattopology/opaxlattopology_cust.sh", "fm_config/config_diff.sh", "fm_config/config_generate.sh"], "buggy_code_start_loc": [34, 52, 36, 36, 39, 38, 39, 35, 41, 35, 369, 222, 179, 33, 33], "buggy_code_end_loc": [47, 53, 37, 37, 40, 39, 40, 36, 225, 36, 371, 599, 452, 35, 34], "fixing_code_start_loc": [34, 52, 36, 36, 39, 38, 39, 35, 40, 35, 369, 223, 180, 33, 33], "fixing_code_end_loc": [49, 53, 39, 39, 42, 41, 42, 38, 223, 38, 370, 601, 455, 37, 36], "type": "CWE-362", "message": "Race conditions in opa-fm before 10.4.0.0.196 and opa-ff before 10.4.0.0.197.", "other": {"cve": {"id": "CVE-2015-5232", "sourceIdentifier": "secalert@redhat.com", "published": "2017-06-07T20:29:00.240", "lastModified": "2021-06-04T19:09:52.153", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Race conditions in opa-fm before 10.4.0.0.196 and opa-ff before 10.4.0.0.197."}, {"lang": "es", "value": "Condiciones de carrera en opa-fm anterior a versi\u00f3n 10.4.0.0.196 y opa-ff anterior a versi\u00f3n 10.4.0.0.197."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 9.3}, "baseSeverity": "HIGH", "exploitabilityScore": 8.6, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-362"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cornelisnetworks:opa-ff:*:*:*:*:*:*:*:*", "versionEndIncluding": "10.4.0.0.174", "matchCriteriaId": "3F9C2DF9-9E32-450C-A7F5-6C2224F42EB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:cornelisnetworks:opa-fm:*:*:*:*:*:*:*:*", "versionEndIncluding": "10.4.0.0.173", "matchCriteriaId": "4619B0E4-5607-41CE-9615-B4FC1773B761"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2015/09/22/17", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1257098", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/01org/opa-ff/commit/080ab97461d80a01636f77ba6aecc667c3c0087c", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/01org/opa-fm/commit/5f4087aabb5d03c42738b320af0fc60e9df4d1f7", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/01org/opa-fm/commit/c5759e7b76f5bf844be6c6641cc1b356bbc83869", "source": "secalert@redhat.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/01org/opa-ff/commit/080ab97461d80a01636f77ba6aecc667c3c0087c"}}