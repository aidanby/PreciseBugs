{"buggy_code": ["<?php\nclass Cart {\n\tprivate $config;\n\tprivate $db;\n\tprivate $data = array();\n\n\tpublic function __construct($registry) {\n\t\t$this->config = $registry->get('config');\n\t\t$this->customer = $registry->get('customer');\n\t\t$this->session = $registry->get('session');\n\t\t$this->db = $registry->get('db');\n\t\t$this->tax = $registry->get('tax');\n\t\t$this->weight = $registry->get('weight');\n\n\t\tif (!isset($this->session->data['cart']) || !is_array($this->session->data['cart'])) {\n\t\t\t$this->session->data['cart'] = array();\n\t\t}\n\t}\n\n\tpublic function getProducts() {\n\t\tif (!$this->data) {\n\t\t\tforeach ($this->session->data['cart'] as $key => $quantity) {\n\t\t\t\t$product = explode(':', $key);\n\t\t\t\t$product_id = $product[0];\n\t\t\t\t$stock = true;\n\n\t\t\t\t// Options\n\t\t\t\tif (isset($product[1])) {\n\t\t\t\t\t$options = unserialize(base64_decode($product[1]));\n\t\t\t\t} else {\n\t\t\t\t\t$options = array();\n\t\t\t\t}\n\n\t\t\t\tif (isset($this->session->data['manual'])) {\n\t\t\t\t\t$product_query = $this->db->query(\"SELECT * FROM \" . DB_PREFIX . \"product p LEFT JOIN \" . DB_PREFIX . \"product_description pd ON (p.product_id = pd.product_id) WHERE p.product_id = '\" . (int)$product_id . \"' AND pd.language_id = '\" . (int)$this->config->get('config_language_id') . \"' AND p.date_available <= NOW()\");\n\t\t\t\t} else {\n\t\t\t\t\t$product_query = $this->db->query(\"SELECT * FROM \" . DB_PREFIX . \"product p LEFT JOIN \" . DB_PREFIX . \"product_description pd ON (p.product_id = pd.product_id) WHERE p.product_id = '\" . (int)$product_id . \"' AND pd.language_id = '\" . (int)$this->config->get('config_language_id') . \"' AND p.date_available <= NOW() AND p.status = '1'\");\n\t\t\t\t}\n\n\t\t\t\tif ($product_query->num_rows) {\n\t\t\t\t\t$option_price = 0;\n\t\t\t\t\t$option_points = 0;\n\t\t\t\t\t$option_weight = 0;\n\n\t\t\t\t\t$option_data = array();\n\n\t\t\t\t\tforeach ($options as $product_option_id => $option_value) {\n\t\t\t\t\t\t$option_query = $this->db->query(\"SELECT po.product_option_id, po.option_id, od.name, o.type FROM \" . DB_PREFIX . \"product_option po LEFT JOIN `\" . DB_PREFIX . \"option` o ON (po.option_id = o.option_id) LEFT JOIN \" . DB_PREFIX . \"option_description od ON (o.option_id = od.option_id) WHERE po.product_option_id = '\" . (int)$product_option_id . \"' AND po.product_id = '\" . (int)$product_id . \"' AND od.language_id = '\" . (int)$this->config->get('config_language_id') . \"'\");\n\n\t\t\t\t\t\tif ($option_query->num_rows) {\n\t\t\t\t\t\t\tif ($option_query->row['type'] == 'select' || $option_query->row['type'] == 'radio' || $option_query->row['type'] == 'image') {\n\t\t\t\t\t\t\t\t$option_value_query = $this->db->query(\"SELECT pov.option_value_id, ovd.name, pov.quantity, pov.subtract, pov.price, pov.price_prefix, pov.points, pov.points_prefix, pov.weight, pov.weight_prefix FROM \" . DB_PREFIX . \"product_option_value pov LEFT JOIN \" . DB_PREFIX . \"option_value ov ON (pov.option_value_id = ov.option_value_id) LEFT JOIN \" . DB_PREFIX . \"option_value_description ovd ON (ov.option_value_id = ovd.option_value_id) WHERE pov.product_option_value_id = '\" . (int)$option_value . \"' AND pov.product_option_id = '\" . (int)$product_option_id . \"' AND ovd.language_id = '\" . (int)$this->config->get('config_language_id') . \"'\");\n\n\t\t\t\t\t\t\t\tif ($option_value_query->num_rows) {\n\t\t\t\t\t\t\t\t\tif ($option_value_query->row['price_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t$option_price += $option_value_query->row['price'];\n\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['price_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t$option_price -= $option_value_query->row['price'];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ($option_value_query->row['points_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t$option_points += $option_value_query->row['points'];\n\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['points_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t$option_points -= $option_value_query->row['points'];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ($option_value_query->row['weight_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t$option_weight += $option_value_query->row['weight'];\n\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['weight_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t$option_weight -= $option_value_query->row['weight'];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ($option_value_query->row['subtract'] && (!$option_value_query->row['quantity'] || ($option_value_query->row['quantity'] < $quantity))) {\n\t\t\t\t\t\t\t\t\t\t$stock = false;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$option_data[] = array(\n\t\t\t\t\t\t\t\t\t\t'product_option_id'       => $product_option_id,\n\t\t\t\t\t\t\t\t\t\t'product_option_value_id' => $option_value,\n\t\t\t\t\t\t\t\t\t\t'option_id'               => $option_query->row['option_id'],\n\t\t\t\t\t\t\t\t\t\t'option_value_id'         => $option_value_query->row['option_value_id'],\n\t\t\t\t\t\t\t\t\t\t'name'                    => $option_query->row['name'],\n\t\t\t\t\t\t\t\t\t\t'option_value'            => $option_value_query->row['name'],\n\t\t\t\t\t\t\t\t\t\t'type'                    => $option_query->row['type'],\n\t\t\t\t\t\t\t\t\t\t'quantity'                => $option_value_query->row['quantity'],\n\t\t\t\t\t\t\t\t\t\t'subtract'                => $option_value_query->row['subtract'],\n\t\t\t\t\t\t\t\t\t\t'price'                   => $option_value_query->row['price'],\n\t\t\t\t\t\t\t\t\t\t'price_prefix'            => $option_value_query->row['price_prefix'],\n\t\t\t\t\t\t\t\t\t\t'points'                  => $option_value_query->row['points'],\n\t\t\t\t\t\t\t\t\t\t'points_prefix'           => $option_value_query->row['points_prefix'],\n\t\t\t\t\t\t\t\t\t\t'weight'                  => $option_value_query->row['weight'],\n\t\t\t\t\t\t\t\t\t\t'weight_prefix'           => $option_value_query->row['weight_prefix']\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->remove($key);\n\t\t\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} elseif ($option_query->row['type'] == 'checkbox' && is_array($option_value)) {\n\t\t\t\t\t\t\t\tforeach ($option_value as $product_option_value_id) {\n\t\t\t\t\t\t\t\t\t$option_value_query = $this->db->query(\"SELECT pov.option_value_id, ovd.name, pov.quantity, pov.subtract, pov.price, pov.price_prefix, pov.points, pov.points_prefix, pov.weight, pov.weight_prefix FROM \" . DB_PREFIX . \"product_option_value pov LEFT JOIN \" . DB_PREFIX . \"option_value ov ON (pov.option_value_id = ov.option_value_id) LEFT JOIN \" . DB_PREFIX . \"option_value_description ovd ON (ov.option_value_id = ovd.option_value_id) WHERE pov.product_option_value_id = '\" . (int)$product_option_value_id . \"' AND pov.product_option_id = '\" . (int)$product_option_id . \"' AND ovd.language_id = '\" . (int)$this->config->get('config_language_id') . \"'\");\n\n\t\t\t\t\t\t\t\t\tif ($option_value_query->num_rows) {\n\t\t\t\t\t\t\t\t\t\tif ($option_value_query->row['price_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t\t$option_price += $option_value_query->row['price'];\n\t\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['price_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t\t$option_price -= $option_value_query->row['price'];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ($option_value_query->row['points_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t\t$option_points += $option_value_query->row['points'];\n\t\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['points_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t\t$option_points -= $option_value_query->row['points'];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ($option_value_query->row['weight_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t\t$option_weight += $option_value_query->row['weight'];\n\t\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['weight_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t\t$option_weight -= $option_value_query->row['weight'];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ($option_value_query->row['subtract'] && (!$option_value_query->row['quantity'] || ($option_value_query->row['quantity'] < $quantity))) {\n\t\t\t\t\t\t\t\t\t\t\t$stock = false;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t$option_data[] = array(\n\t\t\t\t\t\t\t\t\t\t\t'product_option_id'       => $product_option_id,\n\t\t\t\t\t\t\t\t\t\t\t'product_option_value_id' => $product_option_value_id,\n\t\t\t\t\t\t\t\t\t\t\t'option_id'               => $option_query->row['option_id'],\n\t\t\t\t\t\t\t\t\t\t\t'option_value_id'         => $option_value_query->row['option_value_id'],\n\t\t\t\t\t\t\t\t\t\t\t'name'                    => $option_query->row['name'],\n\t\t\t\t\t\t\t\t\t\t\t'option_value'            => $option_value_query->row['name'],\n\t\t\t\t\t\t\t\t\t\t\t'type'                    => $option_query->row['type'],\n\t\t\t\t\t\t\t\t\t\t\t'quantity'                => $option_value_query->row['quantity'],\n\t\t\t\t\t\t\t\t\t\t\t'subtract'                => $option_value_query->row['subtract'],\n\t\t\t\t\t\t\t\t\t\t\t'price'                   => $option_value_query->row['price'],\n\t\t\t\t\t\t\t\t\t\t\t'price_prefix'            => $option_value_query->row['price_prefix'],\n\t\t\t\t\t\t\t\t\t\t\t'points'                  => $option_value_query->row['points'],\n\t\t\t\t\t\t\t\t\t\t\t'points_prefix'           => $option_value_query->row['points_prefix'],\n\t\t\t\t\t\t\t\t\t\t\t'weight'                  => $option_value_query->row['weight'],\n\t\t\t\t\t\t\t\t\t\t\t'weight_prefix'           => $option_value_query->row['weight_prefix']\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$this->remove($key);\n\t\t\t\t\t\t\t\t\t\tcontinue 3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} elseif ($option_query->row['type'] == 'text' || $option_query->row['type'] == 'textarea' || $option_query->row['type'] == 'file' || $option_query->row['type'] == 'date' || $option_query->row['type'] == 'datetime' || $option_query->row['type'] == 'time') {\n\t\t\t\t\t\t\t\t$option_data[] = array(\n\t\t\t\t\t\t\t\t\t'product_option_id'       => $product_option_id,\n\t\t\t\t\t\t\t\t\t'product_option_value_id' => '',\n\t\t\t\t\t\t\t\t\t'option_id'               => $option_query->row['option_id'],\n\t\t\t\t\t\t\t\t\t'option_value_id'         => '',\n\t\t\t\t\t\t\t\t\t'name'                    => $option_query->row['name'],\n\t\t\t\t\t\t\t\t\t'option_value'            => $option_value,\n\t\t\t\t\t\t\t\t\t'type'                    => $option_query->row['type'],\n\t\t\t\t\t\t\t\t\t'quantity'                => '',\n\t\t\t\t\t\t\t\t\t'subtract'                => '',\n\t\t\t\t\t\t\t\t\t'price'                   => '',\n\t\t\t\t\t\t\t\t\t'price_prefix'            => '',\n\t\t\t\t\t\t\t\t\t'points'                  => '',\n\t\t\t\t\t\t\t\t\t'points_prefix'           => '',\n\t\t\t\t\t\t\t\t\t'weight'                  => '',\n\t\t\t\t\t\t\t\t\t'weight_prefix'           => ''\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->remove($key);\n\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($this->customer->isLogged()) {\n\t\t\t\t\t\t$customer_group_id = $this->customer->getCustomerGroupId();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$customer_group_id = $this->config->get('config_customer_group_id');\n\t\t\t\t\t}\n\n\t\t\t\t\t$price = $product_query->row['price'];\n\n\t\t\t\t\t// Product Discounts\n\t\t\t\t\t$discount_quantity = 0;\n\n\t\t\t\t\tforeach ($this->session->data['cart'] as $key_2 => $quantity_2) {\n\t\t\t\t\t\t$product_2 = explode(':', $key_2);\n\n\t\t\t\t\t\tif ($product_2[0] == $product_id) {\n\t\t\t\t\t\t\t$discount_quantity += $quantity_2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$product_discount_query = $this->db->query(\"SELECT price FROM \" . DB_PREFIX . \"product_discount WHERE product_id = '\" . (int)$product_id . \"' AND customer_group_id = '\" . (int)$customer_group_id . \"' AND quantity <= '\" . (int)$discount_quantity . \"' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY quantity DESC, priority ASC, price ASC LIMIT 1\");\n\n\t\t\t\t\tif ($product_discount_query->num_rows) {\n\t\t\t\t\t\t$price = $product_discount_query->row['price'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Product Specials\n\t\t\t\t\t$product_special_query = $this->db->query(\"SELECT price FROM \" . DB_PREFIX . \"product_special WHERE product_id = '\" . (int)$product_id . \"' AND customer_group_id = '\" . (int)$customer_group_id . \"' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY priority ASC, price ASC LIMIT 1\");\n\n\t\t\t\t\tif ($product_special_query->num_rows) {\n\t\t\t\t\t\t$price = $product_special_query->row['price'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reward Points\n\t\t\t\t\t$product_reward_query = $this->db->query(\"SELECT points FROM \" . DB_PREFIX . \"product_reward WHERE product_id = '\" . (int)$product_id . \"' AND customer_group_id = '\" . (int)$customer_group_id . \"'\");\n\n\t\t\t\t\tif ($product_reward_query->num_rows) {\n\t\t\t\t\t\t$reward = $product_reward_query->row['points'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$reward = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Downloads\n\t\t\t\t\t$download_data = array();\n\n\t\t\t\t\t$download_query = $this->db->query(\"SELECT * FROM \" . DB_PREFIX . \"product_to_download p2d LEFT JOIN \" . DB_PREFIX . \"download d ON (p2d.download_id = d.download_id) LEFT JOIN \" . DB_PREFIX . \"download_description dd ON (d.download_id = dd.download_id) WHERE p2d.product_id = '\" . (int)$product_id . \"' AND dd.language_id = '\" . (int)$this->config->get('config_language_id') . \"'\");\n\n\t\t\t\t\tforeach ($download_query->rows as $download) {\n\t\t\t\t\t\t$download_data[] = array(\n\t\t\t\t\t\t\t'download_id' => $download['download_id'],\n\t\t\t\t\t\t\t'name'        => $download['name'],\n\t\t\t\t\t\t\t'filename'    => $download['filename'],\n\t\t\t\t\t\t\t'mask'        => $download['mask'],\n\t\t\t\t\t\t\t'remaining'   => $download['remaining']\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Stock\n\t\t\t\t\tif (!$product_query->row['quantity'] || ($product_query->row['quantity'] < $quantity) || ($product_query->row['quantity'] < $discount_quantity)) {\n\t\t\t\t\t\t$stock = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->data[$key] = array(\n\t\t\t\t\t\t'key'             => $key,\n\t\t\t\t\t\t'product_id'      => $product_query->row['product_id'],\n\t\t\t\t\t\t'name'            => $product_query->row['name'],\n\t\t\t\t\t\t'model'           => $product_query->row['model'],\n\t\t\t\t\t\t'shipping'        => $product_query->row['shipping'],\n\t\t\t\t\t\t'image'           => $product_query->row['image'],\n\t\t\t\t\t\t'option'          => $option_data,\n\t\t\t\t\t\t'download'        => $download_data,\n\t\t\t\t\t\t'quantity'        => $quantity,\n\t\t\t\t\t\t'minimum'         => $product_query->row['minimum'],\n\t\t\t\t\t\t'subtract'        => $product_query->row['subtract'],\n\t\t\t\t\t\t'stock'           => $stock,\n\t\t\t\t\t\t'price'           => ($price + $option_price),\n\t\t\t\t\t\t'total'           => ($price + $option_price) * $quantity,\n\t\t\t\t\t\t'reward'          => $reward * $quantity,\n\t\t\t\t\t\t'points'          => ($product_query->row['points'] ? ($product_query->row['points'] + $option_points) * $quantity : 0),\n\t\t\t\t\t\t'tax_class_id'    => $product_query->row['tax_class_id'],\n\t\t\t\t\t\t'weight'          => ($product_query->row['weight'] + $option_weight) * $quantity,\n\t\t\t\t\t\t'weight_class_id' => $product_query->row['weight_class_id'],\n\t\t\t\t\t\t'length'          => $product_query->row['length'],\n\t\t\t\t\t\t'width'           => $product_query->row['width'],\n\t\t\t\t\t\t'height'          => $product_query->row['height'],\n\t\t\t\t\t\t'length_class_id' => $product_query->row['length_class_id']\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$this->remove($key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $this->data;\n\t}\n\n\tpublic function add($product_id, $qty = 1, $option = array()) {\n\t\tif (!$option) {\n\t\t\t$key = (int)$product_id;\n\t\t} else {\n\t\t\t$key = (int)$product_id . ':' . base64_encode(serialize($option));\n\t\t}\n\n\t\tif ((int)$qty && ((int)$qty > 0)) {\n\t\t\tif (!isset($this->session->data['cart'][$key])) {\n\t\t\t\t$this->session->data['cart'][$key] = (int)$qty;\n\t\t\t} else {\n\t\t\t\t$this->session->data['cart'][$key] += (int)$qty;\n\t\t\t}\n\t\t}\n\n\t\t$this->data = array();\n\t}\n\n\tpublic function update($key, $qty) {\n\t\tif ((int)$qty && ((int)$qty > 0)) {\n\t\t\t$this->session->data['cart'][$key] = (int)$qty;\n\t\t} else {\n\t\t\t$this->remove($key);\n\t\t}\n\n\t\t$this->data = array();\n\t}\n\n\tpublic function remove($key) {\n\t\tif (isset($this->session->data['cart'][$key])) {\n\t\t\tunset($this->session->data['cart'][$key]);\n\t\t}\n\n\t\t$this->data = array();\n\t}\n\n\tpublic function clear() {\n\t\t$this->session->data['cart'] = array();\n\n\t\tif (isset($this->session->data['customer_id'])) {\n\t\t\t$this->db->query(\"UPDATE \" . DB_PREFIX . \"customer SET cart = '' WHERE customer_id = '\" . (int)$this->session->data['customer_id'] . \"'\");\n\t\t} \n\n\t\t$this->data = array();\n\t}\n\n\tpublic function getWeight() {\n\t\t$weight = 0;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif ($product['shipping']) {\n\t\t\t\t$weight += $this->weight->convert($product['weight'], $product['weight_class_id'], $this->config->get('config_weight_class_id'));\n\t\t\t}\n\t\t}\n\n\t\treturn $weight;\n\t}\n\n\tpublic function getSubTotal() {\n\t\t$total = 0;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\t$total += $product['total'];\n\t\t}\n\n\t\treturn $total;\n\t}\n\n\tpublic function getTaxes() {\n\t\t$tax_data = array();\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif ($product['tax_class_id']) {\n\t\t\t\t$tax_rates = $this->tax->getRates($product['price'], $product['tax_class_id']);\n\n\t\t\t\tforeach ($tax_rates as $tax_rate) {\n\t\t\t\t\tif (!isset($tax_data[$tax_rate['tax_rate_id']])) {\n\t\t\t\t\t\t$tax_data[$tax_rate['tax_rate_id']] = ($tax_rate['amount'] * $product['quantity']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$tax_data[$tax_rate['tax_rate_id']] += ($tax_rate['amount'] * $product['quantity']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $tax_data;\n\t}\n\n\tpublic function getTotal() {\n\t\t$total = 0;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\t$total += $this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax')) * $product['quantity'];\n\t\t}\n\n\t\treturn $total;\n\t}\n\n\tpublic function countProducts() {\n\t\t$product_total = 0;\n\n\t\t$products = $this->getProducts();\n\n\t\tforeach ($products as $product) {\n\t\t\t$product_total += $product['quantity'];\n\t\t}\n\n\t\treturn $product_total;\n\t}\n\n\tpublic function hasProducts() {\n\t\treturn count($this->session->data['cart']);\n\t}\n\n\tpublic function hasStock() {\n\t\t$stock = true;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif (!$product['stock']) {\n\t\t\t\t$stock = false;\n\t\t\t}\n\t\t}\n\n\t\treturn $stock;\n\t}\n\n\tpublic function hasShipping() {\n\t\t$shipping = false;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif ($product['shipping']) {\n\t\t\t\t$shipping = true;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn $shipping;\n\t}\n\n\tpublic function hasDownload() {\n\t\t$download = false;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif ($product['download']) {\n\t\t\t\t$download = true;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn $download;\n\t}\n}\n?>"], "fixing_code": ["<?php\nclass Cart {\n\tprivate $config;\n\tprivate $db;\n\tprivate $data = array();\n\n\tpublic function __construct($registry) {\n\t\t$this->config = $registry->get('config');\n\t\t$this->customer = $registry->get('customer');\n\t\t$this->session = $registry->get('session');\n\t\t$this->db = $registry->get('db');\n\t\t$this->tax = $registry->get('tax');\n\t\t$this->weight = $registry->get('weight');\n\n\t\tif (!isset($this->session->data['cart']) || !is_array($this->session->data['cart'])) {\n\t\t\t$this->session->data['cart'] = array();\n\t\t}\n\t}\n\n\tpublic function getProducts() {\n\t\tif (!$this->data) {\n\t\t\tforeach ($this->session->data['cart'] as $key => $quantity) {\n\t\t\t\t$product = explode(':', $key);\n\t\t\t\t$product_id = $product[0];\n\t\t\t\t$stock = true;\n\n\t\t\t\t// Options\n\t\t\t\tif (isset($product[1])) {\n\t\t\t\t\t$options = unserialize(base64_decode($product[1]));\n\t\t\t\t} else {\n\t\t\t\t\t$options = array();\n\t\t\t\t}\n\n\t\t\t\tif (isset($this->session->data['manual'])) {\n\t\t\t\t\t$product_query = $this->db->query(\"SELECT * FROM \" . DB_PREFIX . \"product p LEFT JOIN \" . DB_PREFIX . \"product_description pd ON (p.product_id = pd.product_id) WHERE p.product_id = '\" . (int)$product_id . \"' AND pd.language_id = '\" . (int)$this->config->get('config_language_id') . \"' AND p.date_available <= NOW()\");\n\t\t\t\t} else {\n\t\t\t\t\t$product_query = $this->db->query(\"SELECT * FROM \" . DB_PREFIX . \"product p LEFT JOIN \" . DB_PREFIX . \"product_description pd ON (p.product_id = pd.product_id) WHERE p.product_id = '\" . (int)$product_id . \"' AND pd.language_id = '\" . (int)$this->config->get('config_language_id') . \"' AND p.date_available <= NOW() AND p.status = '1'\");\n\t\t\t\t}\n\n\t\t\t\tif ($product_query->num_rows) {\n\t\t\t\t\t$option_price = 0;\n\t\t\t\t\t$option_points = 0;\n\t\t\t\t\t$option_weight = 0;\n\n\t\t\t\t\t$option_data = array();\n\n\t\t\t\t\tforeach ($options as $product_option_id => $option_value) {\n\t\t\t\t\t\t$option_query = $this->db->query(\"SELECT po.product_option_id, po.option_id, od.name, o.type FROM \" . DB_PREFIX . \"product_option po LEFT JOIN `\" . DB_PREFIX . \"option` o ON (po.option_id = o.option_id) LEFT JOIN \" . DB_PREFIX . \"option_description od ON (o.option_id = od.option_id) WHERE po.product_option_id = '\" . (int)$product_option_id . \"' AND po.product_id = '\" . (int)$product_id . \"' AND od.language_id = '\" . (int)$this->config->get('config_language_id') . \"'\");\n\n\t\t\t\t\t\tif ($option_query->num_rows) {\n\t\t\t\t\t\t\tif ($option_query->row['type'] == 'select' || $option_query->row['type'] == 'radio' || $option_query->row['type'] == 'image') {\n\t\t\t\t\t\t\t\t$option_value_query = $this->db->query(\"SELECT pov.option_value_id, ovd.name, pov.quantity, pov.subtract, pov.price, pov.price_prefix, pov.points, pov.points_prefix, pov.weight, pov.weight_prefix FROM \" . DB_PREFIX . \"product_option_value pov LEFT JOIN \" . DB_PREFIX . \"option_value ov ON (pov.option_value_id = ov.option_value_id) LEFT JOIN \" . DB_PREFIX . \"option_value_description ovd ON (ov.option_value_id = ovd.option_value_id) WHERE pov.product_option_value_id = '\" . (int)$option_value . \"' AND pov.product_option_id = '\" . (int)$product_option_id . \"' AND ovd.language_id = '\" . (int)$this->config->get('config_language_id') . \"'\");\n\n\t\t\t\t\t\t\t\tif ($option_value_query->num_rows) {\n\t\t\t\t\t\t\t\t\tif ($option_value_query->row['price_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t$option_price += $option_value_query->row['price'];\n\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['price_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t$option_price -= $option_value_query->row['price'];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ($option_value_query->row['points_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t$option_points += $option_value_query->row['points'];\n\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['points_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t$option_points -= $option_value_query->row['points'];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ($option_value_query->row['weight_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t$option_weight += $option_value_query->row['weight'];\n\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['weight_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t$option_weight -= $option_value_query->row['weight'];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ($option_value_query->row['subtract'] && (!$option_value_query->row['quantity'] || ($option_value_query->row['quantity'] < $quantity))) {\n\t\t\t\t\t\t\t\t\t\t$stock = false;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$option_data[] = array(\n\t\t\t\t\t\t\t\t\t\t'product_option_id'       => $product_option_id,\n\t\t\t\t\t\t\t\t\t\t'product_option_value_id' => $option_value,\n\t\t\t\t\t\t\t\t\t\t'option_id'               => $option_query->row['option_id'],\n\t\t\t\t\t\t\t\t\t\t'option_value_id'         => $option_value_query->row['option_value_id'],\n\t\t\t\t\t\t\t\t\t\t'name'                    => $option_query->row['name'],\n\t\t\t\t\t\t\t\t\t\t'option_value'            => $option_value_query->row['name'],\n\t\t\t\t\t\t\t\t\t\t'type'                    => $option_query->row['type'],\n\t\t\t\t\t\t\t\t\t\t'quantity'                => $option_value_query->row['quantity'],\n\t\t\t\t\t\t\t\t\t\t'subtract'                => $option_value_query->row['subtract'],\n\t\t\t\t\t\t\t\t\t\t'price'                   => $option_value_query->row['price'],\n\t\t\t\t\t\t\t\t\t\t'price_prefix'            => $option_value_query->row['price_prefix'],\n\t\t\t\t\t\t\t\t\t\t'points'                  => $option_value_query->row['points'],\n\t\t\t\t\t\t\t\t\t\t'points_prefix'           => $option_value_query->row['points_prefix'],\n\t\t\t\t\t\t\t\t\t\t'weight'                  => $option_value_query->row['weight'],\n\t\t\t\t\t\t\t\t\t\t'weight_prefix'           => $option_value_query->row['weight_prefix']\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->remove($key);\n\t\t\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} elseif ($option_query->row['type'] == 'checkbox' && is_array($option_value)) {\n\t\t\t\t\t\t\t\tforeach ($option_value as $product_option_value_id) {\n\t\t\t\t\t\t\t\t\t$option_value_query = $this->db->query(\"SELECT pov.option_value_id, ovd.name, pov.quantity, pov.subtract, pov.price, pov.price_prefix, pov.points, pov.points_prefix, pov.weight, pov.weight_prefix FROM \" . DB_PREFIX . \"product_option_value pov LEFT JOIN \" . DB_PREFIX . \"option_value ov ON (pov.option_value_id = ov.option_value_id) LEFT JOIN \" . DB_PREFIX . \"option_value_description ovd ON (ov.option_value_id = ovd.option_value_id) WHERE pov.product_option_value_id = '\" . (int)$product_option_value_id . \"' AND pov.product_option_id = '\" . (int)$product_option_id . \"' AND ovd.language_id = '\" . (int)$this->config->get('config_language_id') . \"'\");\n\n\t\t\t\t\t\t\t\t\tif ($option_value_query->num_rows) {\n\t\t\t\t\t\t\t\t\t\tif ($option_value_query->row['price_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t\t$option_price += $option_value_query->row['price'];\n\t\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['price_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t\t$option_price -= $option_value_query->row['price'];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ($option_value_query->row['points_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t\t$option_points += $option_value_query->row['points'];\n\t\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['points_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t\t$option_points -= $option_value_query->row['points'];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ($option_value_query->row['weight_prefix'] == '+') {\n\t\t\t\t\t\t\t\t\t\t\t$option_weight += $option_value_query->row['weight'];\n\t\t\t\t\t\t\t\t\t\t} elseif ($option_value_query->row['weight_prefix'] == '-') {\n\t\t\t\t\t\t\t\t\t\t\t$option_weight -= $option_value_query->row['weight'];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ($option_value_query->row['subtract'] && (!$option_value_query->row['quantity'] || ($option_value_query->row['quantity'] < $quantity))) {\n\t\t\t\t\t\t\t\t\t\t\t$stock = false;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t$option_data[] = array(\n\t\t\t\t\t\t\t\t\t\t\t'product_option_id'       => $product_option_id,\n\t\t\t\t\t\t\t\t\t\t\t'product_option_value_id' => $product_option_value_id,\n\t\t\t\t\t\t\t\t\t\t\t'option_id'               => $option_query->row['option_id'],\n\t\t\t\t\t\t\t\t\t\t\t'option_value_id'         => $option_value_query->row['option_value_id'],\n\t\t\t\t\t\t\t\t\t\t\t'name'                    => $option_query->row['name'],\n\t\t\t\t\t\t\t\t\t\t\t'option_value'            => $option_value_query->row['name'],\n\t\t\t\t\t\t\t\t\t\t\t'type'                    => $option_query->row['type'],\n\t\t\t\t\t\t\t\t\t\t\t'quantity'                => $option_value_query->row['quantity'],\n\t\t\t\t\t\t\t\t\t\t\t'subtract'                => $option_value_query->row['subtract'],\n\t\t\t\t\t\t\t\t\t\t\t'price'                   => $option_value_query->row['price'],\n\t\t\t\t\t\t\t\t\t\t\t'price_prefix'            => $option_value_query->row['price_prefix'],\n\t\t\t\t\t\t\t\t\t\t\t'points'                  => $option_value_query->row['points'],\n\t\t\t\t\t\t\t\t\t\t\t'points_prefix'           => $option_value_query->row['points_prefix'],\n\t\t\t\t\t\t\t\t\t\t\t'weight'                  => $option_value_query->row['weight'],\n\t\t\t\t\t\t\t\t\t\t\t'weight_prefix'           => $option_value_query->row['weight_prefix']\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$this->remove($key);\n\t\t\t\t\t\t\t\t\t\tcontinue 3;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} elseif ($option_query->row['type'] == 'text' || $option_query->row['type'] == 'textarea' || $option_query->row['type'] == 'file' || $option_query->row['type'] == 'date' || $option_query->row['type'] == 'datetime' || $option_query->row['type'] == 'time') {\n\t\t\t\t\t\t\t\t$option_data[] = array(\n\t\t\t\t\t\t\t\t\t'product_option_id'       => $product_option_id,\n\t\t\t\t\t\t\t\t\t'product_option_value_id' => '',\n\t\t\t\t\t\t\t\t\t'option_id'               => $option_query->row['option_id'],\n\t\t\t\t\t\t\t\t\t'option_value_id'         => '',\n\t\t\t\t\t\t\t\t\t'name'                    => $option_query->row['name'],\n\t\t\t\t\t\t\t\t\t'option_value'            => $option_value,\n\t\t\t\t\t\t\t\t\t'type'                    => $option_query->row['type'],\n\t\t\t\t\t\t\t\t\t'quantity'                => '',\n\t\t\t\t\t\t\t\t\t'subtract'                => '',\n\t\t\t\t\t\t\t\t\t'price'                   => '',\n\t\t\t\t\t\t\t\t\t'price_prefix'            => '',\n\t\t\t\t\t\t\t\t\t'points'                  => '',\n\t\t\t\t\t\t\t\t\t'points_prefix'           => '',\n\t\t\t\t\t\t\t\t\t'weight'                  => '',\n\t\t\t\t\t\t\t\t\t'weight_prefix'           => ''\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->remove($key);\n\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($this->customer->isLogged()) {\n\t\t\t\t\t\t$customer_group_id = $this->customer->getCustomerGroupId();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$customer_group_id = $this->config->get('config_customer_group_id');\n\t\t\t\t\t}\n\n\t\t\t\t\t$price = $product_query->row['price'];\n\n\t\t\t\t\t// Product Discounts\n\t\t\t\t\t$discount_quantity = 0;\n\n\t\t\t\t\tforeach ($this->session->data['cart'] as $key_2 => $quantity_2) {\n\t\t\t\t\t\t$product_2 = explode(':', $key_2);\n\n\t\t\t\t\t\tif ($product_2[0] == $product_id) {\n\t\t\t\t\t\t\t$discount_quantity += $quantity_2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$product_discount_query = $this->db->query(\"SELECT price FROM \" . DB_PREFIX . \"product_discount WHERE product_id = '\" . (int)$product_id . \"' AND customer_group_id = '\" . (int)$customer_group_id . \"' AND quantity <= '\" . (int)$discount_quantity . \"' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY quantity DESC, priority ASC, price ASC LIMIT 1\");\n\n\t\t\t\t\tif ($product_discount_query->num_rows) {\n\t\t\t\t\t\t$price = $product_discount_query->row['price'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Product Specials\n\t\t\t\t\t$product_special_query = $this->db->query(\"SELECT price FROM \" . DB_PREFIX . \"product_special WHERE product_id = '\" . (int)$product_id . \"' AND customer_group_id = '\" . (int)$customer_group_id . \"' AND ((date_start = '0000-00-00' OR date_start < NOW()) AND (date_end = '0000-00-00' OR date_end > NOW())) ORDER BY priority ASC, price ASC LIMIT 1\");\n\n\t\t\t\t\tif ($product_special_query->num_rows) {\n\t\t\t\t\t\t$price = $product_special_query->row['price'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reward Points\n\t\t\t\t\t$product_reward_query = $this->db->query(\"SELECT points FROM \" . DB_PREFIX . \"product_reward WHERE product_id = '\" . (int)$product_id . \"' AND customer_group_id = '\" . (int)$customer_group_id . \"'\");\n\n\t\t\t\t\tif ($product_reward_query->num_rows) {\n\t\t\t\t\t\t$reward = $product_reward_query->row['points'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$reward = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Downloads\n\t\t\t\t\t$download_data = array();\n\n\t\t\t\t\t$download_query = $this->db->query(\"SELECT * FROM \" . DB_PREFIX . \"product_to_download p2d LEFT JOIN \" . DB_PREFIX . \"download d ON (p2d.download_id = d.download_id) LEFT JOIN \" . DB_PREFIX . \"download_description dd ON (d.download_id = dd.download_id) WHERE p2d.product_id = '\" . (int)$product_id . \"' AND dd.language_id = '\" . (int)$this->config->get('config_language_id') . \"'\");\n\n\t\t\t\t\tforeach ($download_query->rows as $download) {\n\t\t\t\t\t\t$download_data[] = array(\n\t\t\t\t\t\t\t'download_id' => $download['download_id'],\n\t\t\t\t\t\t\t'name'        => $download['name'],\n\t\t\t\t\t\t\t'filename'    => $download['filename'],\n\t\t\t\t\t\t\t'mask'        => $download['mask'],\n\t\t\t\t\t\t\t'remaining'   => $download['remaining']\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Stock\n\t\t\t\t\tif (!$product_query->row['quantity'] || ($product_query->row['quantity'] < $quantity) || ($product_query->row['quantity'] < $discount_quantity)) {\n\t\t\t\t\t\t$stock = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->data[$key] = array(\n\t\t\t\t\t\t'key'             => $key,\n\t\t\t\t\t\t'product_id'      => $product_query->row['product_id'],\n\t\t\t\t\t\t'name'            => $product_query->row['name'],\n\t\t\t\t\t\t'model'           => $product_query->row['model'],\n\t\t\t\t\t\t'shipping'        => $product_query->row['shipping'],\n\t\t\t\t\t\t'image'           => $product_query->row['image'],\n\t\t\t\t\t\t'option'          => $option_data,\n\t\t\t\t\t\t'download'        => $download_data,\n\t\t\t\t\t\t'quantity'        => $quantity,\n\t\t\t\t\t\t'minimum'         => $product_query->row['minimum'],\n\t\t\t\t\t\t'subtract'        => $product_query->row['subtract'],\n\t\t\t\t\t\t'stock'           => $stock,\n\t\t\t\t\t\t'price'           => ($price + $option_price),\n\t\t\t\t\t\t'total'           => ($price + $option_price) * $quantity,\n\t\t\t\t\t\t'reward'          => $reward * $quantity,\n\t\t\t\t\t\t'points'          => ($product_query->row['points'] ? ($product_query->row['points'] + $option_points) * $quantity : 0),\n\t\t\t\t\t\t'tax_class_id'    => $product_query->row['tax_class_id'],\n\t\t\t\t\t\t'weight'          => ($product_query->row['weight'] + $option_weight) * $quantity,\n\t\t\t\t\t\t'weight_class_id' => $product_query->row['weight_class_id'],\n\t\t\t\t\t\t'length'          => $product_query->row['length'],\n\t\t\t\t\t\t'width'           => $product_query->row['width'],\n\t\t\t\t\t\t'height'          => $product_query->row['height'],\n\t\t\t\t\t\t'length_class_id' => $product_query->row['length_class_id']\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$this->remove($key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $this->data;\n\t}\n\n\tpublic function add($product_id, $qty = 1, $option = array()) {\n\t\tif (!$option || !is_array($option)) {\n\t\t\t$key = (int)$product_id;\n\t\t} else {\n\t\t\t$key = (int)$product_id . ':' . base64_encode(serialize($option));\n\t\t}\n\n\t\tif ((int)$qty && ((int)$qty > 0)) {\n\t\t\tif (!isset($this->session->data['cart'][$key])) {\n\t\t\t\t$this->session->data['cart'][$key] = (int)$qty;\n\t\t\t} else {\n\t\t\t\t$this->session->data['cart'][$key] += (int)$qty;\n\t\t\t}\n\t\t}\n\n\t\t$this->data = array();\n\t}\n\n\tpublic function update($key, $qty) {\n\t\tif ((int)$qty && ((int)$qty > 0) && isset($this->session->data['cart'][$key])) {\n\t\t\t$this->session->data['cart'][$key] = (int)$qty;\n\t\t} else {\n\t\t\t$this->remove($key);\n\t\t}\n\n\t\t$this->data = array();\n\t}\n\n\tpublic function remove($key) {\n\t\tif (isset($this->session->data['cart'][$key])) {\n\t\t\tunset($this->session->data['cart'][$key]);\n\t\t}\n\n\t\t$this->data = array();\n\t}\n\n\tpublic function clear() {\n\t\t$this->session->data['cart'] = array();\n\n\t\tif (isset($this->session->data['customer_id'])) {\n\t\t\t$this->db->query(\"UPDATE \" . DB_PREFIX . \"customer SET cart = '' WHERE customer_id = '\" . (int)$this->session->data['customer_id'] . \"'\");\n\t\t} \n\n\t\t$this->data = array();\n\t}\n\n\tpublic function getWeight() {\n\t\t$weight = 0;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif ($product['shipping']) {\n\t\t\t\t$weight += $this->weight->convert($product['weight'], $product['weight_class_id'], $this->config->get('config_weight_class_id'));\n\t\t\t}\n\t\t}\n\n\t\treturn $weight;\n\t}\n\n\tpublic function getSubTotal() {\n\t\t$total = 0;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\t$total += $product['total'];\n\t\t}\n\n\t\treturn $total;\n\t}\n\n\tpublic function getTaxes() {\n\t\t$tax_data = array();\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif ($product['tax_class_id']) {\n\t\t\t\t$tax_rates = $this->tax->getRates($product['price'], $product['tax_class_id']);\n\n\t\t\t\tforeach ($tax_rates as $tax_rate) {\n\t\t\t\t\tif (!isset($tax_data[$tax_rate['tax_rate_id']])) {\n\t\t\t\t\t\t$tax_data[$tax_rate['tax_rate_id']] = ($tax_rate['amount'] * $product['quantity']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$tax_data[$tax_rate['tax_rate_id']] += ($tax_rate['amount'] * $product['quantity']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $tax_data;\n\t}\n\n\tpublic function getTotal() {\n\t\t$total = 0;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\t$total += $this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax')) * $product['quantity'];\n\t\t}\n\n\t\treturn $total;\n\t}\n\n\tpublic function countProducts() {\n\t\t$product_total = 0;\n\n\t\t$products = $this->getProducts();\n\n\t\tforeach ($products as $product) {\n\t\t\t$product_total += $product['quantity'];\n\t\t}\n\n\t\treturn $product_total;\n\t}\n\n\tpublic function hasProducts() {\n\t\treturn count($this->session->data['cart']);\n\t}\n\n\tpublic function hasStock() {\n\t\t$stock = true;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif (!$product['stock']) {\n\t\t\t\t$stock = false;\n\t\t\t}\n\t\t}\n\n\t\treturn $stock;\n\t}\n\n\tpublic function hasShipping() {\n\t\t$shipping = false;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif ($product['shipping']) {\n\t\t\t\t$shipping = true;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn $shipping;\n\t}\n\n\tpublic function hasDownload() {\n\t\t$download = false;\n\n\t\tforeach ($this->getProducts() as $product) {\n\t\t\tif ($product['download']) {\n\t\t\t\t$download = true;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn $download;\n\t}\n}\n?>"], "filenames": ["upload/system/library/cart.php"], "buggy_code_start_loc": [268], "buggy_code_end_loc": [287], "fixing_code_start_loc": [268], "fixing_code_end_loc": [287], "type": "CWE-611", "message": "The Cart::getProducts method in system/library/cart.php in OpenCart 1.5.6.4 and earlier allows remote attackers to conduct server-side request forgery (SSRF) attacks or possibly conduct XML External Entity (XXE) attacks and execute arbitrary code via a crafted serialized PHP object, related to the quantity parameter in an update request.", "other": {"cve": {"id": "CVE-2014-3990", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-20T21:29:00.703", "lastModified": "2019-04-25T18:37:08.597", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The Cart::getProducts method in system/library/cart.php in OpenCart 1.5.6.4 and earlier allows remote attackers to conduct server-side request forgery (SSRF) attacks or possibly conduct XML External Entity (XXE) attacks and execute arbitrary code via a crafted serialized PHP object, related to the quantity parameter in an update request."}, {"lang": "es", "value": "El m\u00e9todo Cart::getProducts en system/library/cart.php en OpenCart, en versiones 1.5.6.4 y anteriores, permite que atacantes remotos lleven a cabo ataques de SSRF (Server-Side Request Forgery) o de XEE (XML External Entity), as\u00ed como ejecutar c\u00f3digo arbitrario mediante un objeto PHP serializado manipulado. Esto se relaciona con el par\u00e1metro quantity en una petici\u00f3n de actualizaci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}, {"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opencart:opencart:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.5.6.4", "matchCriteriaId": "AC21BFB7-ED87-4B49-B027-92D0E4CE6F87"}]}]}], "references": [{"url": "http://karmainsecurity.com/KIS-2014-08", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "http://packetstormsecurity.com/files/127460/OpenCart-1.5.6.4-PHP-Object-Injection.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2014/Jul/67", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/archive/1/532763/100/0/threaded", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securityfocus.com/bid/68529", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/opencart-ce/opencart-ce/commit/c2aafc823bd85876f5e888f8ebc421069a5e076f", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/opencart-ce/opencart-ce/commit/c2aafc823bd85876f5e888f8ebc421069a5e076f"}}