{"buggy_code": ["Version 2.1 ()\n------------------------------------------------------------------------\n\n    * Allow to set a default category for authors (personal preferences)\n    \n    * Changed how the hidden password element is displayed to prevent\n      browsers from autofilling it into the entryproperties plugin\n\n    * [Security] Enhanced media upload check to also check redirects\n      for local files, thanks to Xu Yue (again!)\n\n    * [Security] Prevent XSS in adding category and directory names, \n      thanks to Edric Teo @smarterbitbybit.\n      \n    * [Security] For multi-deletion of entries, secure the HTTP referrer\n      output to prevent XSS (Issue #435)\n      \n    * [Security] Reject %0D/%0A in exit tracking and other places\n      (Issue #434)\n      \n    * [Security] Redirection of comment.php now checks the referrer\n      and only allows the blog's host (thanks to Lee Sheldon Victor)\n\n    * Disabled Selenium test files unless enabled\n\nVersion 2.1-beta2 (September 26th, 2016)\n------------------------------------------------------------------------\n    * Improved backend accessibility by hiding iconfont icons for\n      screenreaders (using aria-hidden).\n\n    * Replaced the JS-based equal height solution in the backend with\n      a modern CSS-only solution based on Flexbox for browsers that\n      support it. (Browsers that do not support Flexbox or that only\n      support outdated versions of Flexbox get the old JS solution as\n      a fallback.)\n\n    * [Security] Prevent moving files by using their directory name.\n      [Security] Possible SQL injection for entry category assignment\n      [Security] Possible SQL injection for removing&adding a plugin\n      \n      All issues require a valid backend login.\n      Thanks to Hendrik Buchwald for finding this via their\n      RIPS source code analyzer (www.ripstech.com)\n      \n    * [Security] Add new configuration option to enable fetching\n      local files for the media uploader. By default this is now\n      disabled to prevent Server Side Request Forgery (SSRF).\n      Thanks to Xu Yue for pointing this out!\n\n    * Added new API wrapper serendipity_request_url() to request URLs.\n      Currently uses HTTP_Request2, might change to curl or others in\n      the future, but irrelevant to plugins using this function.\n\n    * Removed outdated themes blue, carl_contest, kubrick and wp. They\n      live on Spartacus now.\n\n    * Added new theme \"Skeleton\".  Skeleton is a responsive, mobile first\n      HTML5/CSS3 theme built on the Skeleton framework.\n\n    * Fix comaptibility bug preventing Internet Explorer (+Edge) to\n      clear the entry editor cache when saving an entry\n\n    * Remove backend js from preview_iframe.tpls, makeing entry previews\n      faster, more accurate and more reliable\n\n    * Introduce new plugin api function\n      $plugin->getFile($filename, $key = 'serendipityPath'). Other\n      than parseTemplate($filename) it will not parse the found file\n      via smarty, and it allows directories inside $filename. Intended\n      use is finding files like images via the fallback chain, giving\n      themes the chance to serve custom versions instead.\n\n    * Give theme authors the option to force using a template file from\n      the frontend, {getFile file=... frontend=true}\n\n    * Fix entry preview by making sure it always uses the correct\n      template files to generate preview, replacing internal magic\n      with direct parameters\n\n    * Rewrite and simplification of the file fallback chain in\n      serendipity_getTemplateFile. Removes templates/default/ from\n      from the chain, as it was replaced by templates/2k11/\n\nVersion 2.1-beta1 (June 8th, 2016)\n------------------------------------------------------------------------\n\n    * Added new theme \"Timeline\".  Timeline is a fully responsive,\n      mobile first HTML5/CSS3 theme built on the Bootstrap\n      framework.\n\n    * Add new config variable $serendipity['cors'] to allow to set\n      Access-Control-Allow-Origin: * headers for sensible places\n      (RSS feeds), to i.e. allow JavaScript's XMLHTTPRequest to read\n      those feeds.\n\n    * Introduce a section with modern recommended themes in the\n      themes backend menu. Themes can be included there by setting\n      Recommended: Yes in their info.txt\n\n    * Merge sidebar and event upgrade pages in one single page\n      button\n\n    * Add colorpicker as possible plugin option item type, set\n      type to 'color' to use it\n\n    * Comments made via the backend on own articles don't trigger\n      the comment notification (thanks to xoxys)\n\n    * Fix missing perm checks for \"standard user\" in MediaLibrary\n\n    * Fix show Dashboard entries by authors entries\n\n    * Fix show Dashboard comments by authors entries (#385)\n\n    * Use CDATA encoded body for ATOM feed\n\n    * Fix: Ajax upload to ML now also works for non-images\n\n    * Added new theme \"Clean-Blog\".  Clean Blog is a fully responsive,\n      mobile first HTML5/CSS3 theme built on the Bootstrap\n      framework.\n\n    * Fixed checkbox entryproperties re-sets (#376)\n\n    * Fixed media item delete handler (#371)\n\n    * Rewrote Routing code for index.php to be outsourced into\n      include/functions_routing\n\n    * Removed broken feature for viewing blog entries by multiple\n      authors, dropped code from core and plugin_authors.\n\n    * Optimize scaleImage returns\n\n    * Fixed media item rename handler (#370)\n\n    * Fixed and enhanced multiple media redirects and path / name\n      related issues, as well as some better umlaut conversions\n\n    * Allow strict media directory selection by toggle filter\n\n    * Allow a better auto char conversion to media upload item names\n\n    * Added Start / End pagination to MediaLibrary and entries list\n\n    * Added new bulk image move ability to MediaLibrary. This fixes\n      several issues with rename AND remove and allows to automatically\n      check and set MediaLibrary item entry paths on MOVE.\n      Staticpages from v.4.52 are modified to support this too.\n      Now supports Quickblog (imageselectorplus) entry path repairs.\n\n    * Fix MediaLibrary objects not pass through into entryproperties\n      CustomFields\n\n    * Fix fatal error atom 1.0 issue; References #362\n\n    * Fix eraseEntryEditorCache script in preview_iframe updertHooks\n      IFRAME\n\n    * Fix the Serendipity template and file fallback chaining to work\n      more precise\n\n    * Disable CKEDITOR Source protection for Smarty and WP-Smarty like\n      markup, since now being usable w/o setting ACF OFF\n\n    * Set Serendipity var use_autosave in backend only\n\n    * Fix entries.inc fetching iframe event returning 1, when true and\n      added a new language constant change message for multilanguage\n      entry changes, instead of the wrongly used save message\n\n    * Fix importers to use the new mysqli API extension with PHP 5+\n\n    * WIP: Added an internal cache to speedup s9y's site generation. Can\n      be activated by setting use_internal_cache to true in\n      serendipity_config.inc.php. Test feedback needed.\n\n    * Added <IfModule mod_rewrite.c> checks to .htaccess for URL\n      rewriting\n\n    * Add support for cronjob plugin to spartacus, to notify blog owner\n      about possible updates (via e-mail)\n\n    * Added link to preview spartacus themes on blog.s9y.org\n\n    * Added two configuration variables that can be set in\n      serendipity_config_local.inc.php to influence the dashboard entry\n      limit:\n\n      - $serendipity['dashboardLimit']: How many future entries to fetch\n        (default: 5)\n      - $serendipity['dashboardDraftLimit']: How many entries in total\n        shall be displayed in the dashboard section (default: 5)\n      - $serendipity['dashboardCommentsLimit']: How many comments\n        (default: 5)\n\n      (Draft entries will only be fetched if there are less future\n      entries than the total entry limit)\n\n    * Fix: the syndication plugin links subtome correctly to the atom\n      feed when he is activated with the rss feed\n\n    * Issue #238: When creating/renaming media directories, replace\n      special characters with the same i18n rules like Permalinks are\n      created, renaming umlauts etc.\n\n    * Add \"update all\"-button to plugin update page\n\n    * Issue #234: Granular options to force backend popups for certain\n      areas\n\n    * Introduce serendipity['ajax'] to detect incoming ajax requests\n      and react accordingly in core and plugins\n\n    * Issue #248: Add $serendipity['forceBase64']=true option (can be\n      set in serendipity_config_local.inc.php) to make Serendipity\n      *not* use 8bit Imap functions for sending mail, for MTAs that\n      behave erradically otherwise.\n\n    * Issue #257: Make sure to check entered admin-user password\n\n    * Issue #264: Drop $authorid for permissions based on images\n      instead of directories, it was not used anymore\n\n    * Some small enhancements to the error reporting\n\n\nVersion 2.0.3 (January 4th, 2016)\n------------------------------------------------------------------------\n\n    * Fix XSS in backend comment editing form for logged-in authors,\n      thanks to Onur Yilmaz and Robert Abela from Netsparker.com\n\n    * Fix some backend entry form related event messages\n\n\nVersion 2.0.2 (July 24th, 2015)\n------------------------------------------------------------------------\n\n    * Fix security issues reported by Tim Coen of Curesec.com:\n\n      - Forbid uploading files with PHP contents and possible\n        PHP execution by authenticated users (critical if\n        you have possible untrustworthy authors)\n      - Add proper escaping for comment approval tokens to prevent\n        SQL injection (authenticated authors only)\n      - Add proper escaping of comment's author names in the\n        comment reply form to prevent XSS (2k11 template, javascript\n        based)\n\n    * Minor layout fixes for media DB media filters\n\n    * Backported some Importer db bugfixes\n\n    * CKEDITOR bugfix releases to 4.4.8 - please read the changelog.\n      Includes widget, lineutils, fakeobjects Plugins and S9y added\n      cheatsheet and procurator Plugins.\n      Changed config.autoParagraph set to false, to prevent wrapping\n      p tags around extraAllowedContent tags.\n\n    * Smarty bugfix upgrades to 3.1.27 - please read the changelog.\n      Compilation time was vastly improved.\n      New Features in NEW_FEATURES.txt.\n\n    * It is now possible to switch to a theme's admin theme if it has\n      been selected as a frontend theme first\n\n    * Syndication Plugin Issue #285:\n        - Add \"none\" as possible value for the xml-icon in the\n          syndication plugin, to enable plain links\n        - Reset subtome full icon path to support\n          serendipity_getTemplateFile()\n        - Link creation fixes for Bulletproof coloured style (eg blue)\n\n    * Fix auto include of a User theme /admin/user.css backend file.\n\n        PLEASE NOTE:\n\n        2.0.1 brought in an automated include of a themes \"user.css\"\n        file. If you don't want to use such file any more (and you have\n        one), you will have to delete or rename it by hand!\n\n        Also please note, that user stylesheet selectors like\n\n            .selector {\n                background-image: url(img/example.jpg);\n            }\n\n        now need to use the {TEMPLATE_PATH} like\n\n            .selector {\n                background-image: url({TEMPLATE_PATH}img/example.jpg);\n            }\n\n        Content of a user.css will always be put LAST into the combined\n        CSS, this means it will override any possible plugin output.\n        If a user.css file does not exist in your own template directory,\n        but inside the default 2k11 template directory, this will always\n        be used (this behaviour is called \"default fallback chain\").\n\n    * Use https URLs for Atom feed, if called through HTTPS (hboeck)\n\n    * Restore the \"Show toolbar within media selector popup?\" option,\n      it was ignored before.\n\n    * Fix Issue #321, negative offset for LIMIT SQL statements when\n      using stable archive sorting and plugins like history.\n\n    * Templatechooser will not apply theme in backend admin.\n\n    * Use \"secure\" flag for (session) cookies sent over SSL, thanks to\n      dayton967\n\n    * Make preview_iframe.tpl template files load the proper frontend\n      CSS file, including cache-busting version string when changing\n      themes\n\n    * Implement patch to properly initiate templates_c on installation\n      for shared installs (thanks to fugue88)\n\n    * Allow templatechooser plugin to read a custom \"blacklist.txt\"\n      within its directory, that can blacklist certain themes from\n      being selected.\n\n    * Allow serendipity_setCookie() function to set custom expiry.\n\n    * Adapt .htaccess profile of \"mod_rewrite for 1&1 and problematic\n      servers\" to not include the \"Options -MultiViews\" option, since\n      this is often blocked\n\n    * Fix initializing smarty framework in the preview/saving iframe,\n      so that a template's config.inc.php is always loaded.\n\n    * Show debugging .tpl file information with relative directory only\n\n    * fix wrong upgrade removal of dead files with 2.0.1 update\n\n\nVersion 2.0.1 (March 12th, 2015)\n------------------------------------------------------------------------\n\n    * Fix missing escaping (possible XSS) of category names in the\n      Backend Entry Admin, which would allow editors that create a\n      forged category name to attack other editors in the backend\n      (privileged access to the backend required). Thanks a lot to Edric\n      Teo for reporting this issue.\n\n    * Improved detection for possible upgrade/plugin/PHP errors. A\n      warning will be emitted on the dashboard, when the Serendipity\n      JavaScript library could not be loaded.\n\n    * syndication fix: use absolute urls for subtome\n\n    * Issue 306: localStorage may be deactivated by setting a config\n      option or using security-related extensions at least in some\n      browsers, which might (at least in FF) break backend JS\n      functionality. Added extra tests to 2k11 backend JS.\n\n      If you use localStorage, please test if it is actually available\n      by testing if localStorage !== null in JS.\n\n    * Issue 280: Allow every theme to utilize a \"user.css\" file that\n      gets loaded on top of the frontend (or backend, if in admin/\n      subdirectory) theme. This file can be used for customized CSS of\n      a blog-admin which carries over to future Serendipity updates\n\n    * Issue 299: Do not display dashboard for users with no permission\n      to perform actions in the backend (frontend-users)\n\n    * Make \"rewriteURL\" smarty modifier available to do a\n      {$CONST.PATH_ARCHIVE|rewriteURL} within a smarty template file.\n\n    * Add a generic odd/even for backend dashboard widgets to align\n      properly. Future dashboard widgets need to get the new extra\n      class dashboard widget on the section element they create.\n\n    * Fix event emoticate plugin to reflect proper call usage of\n      serendipity_getTemplateFile(), if a theme uses custom emoticons.\n      UPDATE your themes emoticons.inc.php file, if have. See example\n      file in plugin dir.\n\n    * Change 2k11 config.inc.php to reflect proper\n      serendipity_getTemplateFile() when frontend files shall be\n      referenced within the backend.\n\n    * Fixed missing file message for deleted media items\n\n    * Fixed entry editor JS not emitting a 'No tags' msg in taxonomy\n      quick view. Improved serendipity.tagsList exit if freetag plugin\n      is not installed.\n\n    * Minor backend UI fixes (taxonomy quick view in entry editor,\n     'Done' msg emitted by Bayes plugin)\n\n    * Clearer language constants for entries in dashboard, labelled\n      \"In progress\"\n\n\nVersion 2.0 (January 23rd, 2015)\n------------------------------------------------------------------------\n\n    * Smarty fix for purging compiled files\n\n    * Fix wrong search page ordering when stable archive was active\n\n    * Prevent entryproperties from saving/displaying a browser-side\n      stored password that was actually not set.\n\n    * Stronger check for existing logger interface to prevent errors\n      when it is not actively used.\n\n    * Fix entryproperties being removed when publishing an article\n      from the dashboard and by specific plugins (freetag, trackback)\n      that modify entry data.\n\n    * Fix deleting comments when user is not an admin, but the entry\n      belongs to him. Thanks to berberic.\n\n    * Patch PEAR.php to use \"static\" isError declaration to prevent\n      PHP error messages\n\n    * Change order of IF-statements in entries.tpl to check for\n      comment_moderate/comment_added, to properly emit the message\n      whether a comment is being moderated.\n\n    * Fix searching for entries in the admin panel with database\n      types other than \"mysql\"\n\n    * Change entry editor's category assignment to toggle between\n      a hierarchical and a plain list (good for many categories)\n\n    * Fix date formatting in entry editor to not use ISO year\n      but the calendar year\n\n    * Fix autoupdate version read and transmit\n\n\nVersion 2.0-rc2 (December 23rd, 2014)\n------------------------------------------------------------------------\n\n    * Fixes escaping of comments in the new backend pane to prevent\n      XSS. Thanks to Steffen R\ufffdemann for reporting!\n\n    * Fix wrong parameter count in serendipity_entity_decode\n\n\nVersion 2.0-rc1 (includes beta4/5/6) (December 19th, 2014)\n------------------------------------------------------------------------\n\n    * entryproperties plugin will now automatically disable nl2br\n      markup, when the WYSIWYG editor is used to create en entry\n\n    * PHP Requirement now is at: PHP 5.3+\n\n    * Fix for syndication subtome onclick handler\n\n    * Fix problematic preview stylesheet reference\n\n    * Optimized clearing smarty template files on upgrading\n\n    * Properly reset the \"disable markup\" feature of entryproperties\n      plugin when none selected\n\n    * PHP 5.4+ fix to properly call htmlspecialchars() / htmlentities() /\n      html_entity_decode() with a charset option, that has been\n      set to to default to UTF-8 and will yield empty strings when\n      being used in NON-UTF-8 environments. Now we utilize a\n      serendipity_specialchars() wrapper call.\n\n    * Added SQLite3 OO database layer for PHP 5.4+\n\n    * New personal preference to choose CKEditor toolbar presets.\n      Presets can be overwritte through a\n      templates/xxx/admin/ckeditor_custom_config.js if needed.\n      See htmlarea/ckeditor_s9y_config.js for details.\n\n    * Proof of concept templates \"default-php\" and \"default-xml\" have\n      been moved to Siber...Spartacus. They would need adapting to\n      Serendipity 2.0 (simple methods like getConfigDir() et al),\n      but since those Template APIs have virtually zero usage scenario,\n      they remain experimental.\n\n    * Added new PAT_JS mod_rewrite rule to .htaccess files\n\n    * Removed experimental support for PHP/SMARTY IN-MEMORY caching\n      added in 2.0-beta3, since this could not work.\n\n    * Smarty 3.1.21 upgrade (see changelog)\n\n    * Fix ImageMagick new sizing issues while forcing image geometry\n      exactly to given sizes with imageselectorplus\n\n    * Fix issue #220 with pdf directory moving rename() error\n\n    * Fix bug in entry listing, which showed wrong categories for\n      entries (Issue #201)\n\n    * Improve RegExp for Feed-URL matching, thanks to fugue88\n\n    * Proper SQLite PDO filenames in shared installations (Issue #214)\n\n    * ImageMagick now can get parameters to generate thumbnails,\n      see serendipity_config.inc.php for example values\n\n    * Allow to enable/disable the new autosave feature in personal\n      preferences (Issue #213)\n\n    * Re-added installer test for writable serendipity base directory\n\n\nVersion 2.0-beta3 (July 25th, 2014)\n------------------------------------------------------------------------\n\n    * Move admin/media_showitem.tpl to theme's directory in 2k11. With\n      an adaptation in serendipity_admin_image_selector.php, this now is\n      a \"true\" frontend template which uses the styles of the frontend\n      theme. Theme authors might want to adapt it to their themes.\n\n    * Moved general syndication plugin option into the core\n\n    * Smarty 3.1.19 upgrade (see changelog)\n\n    * Fixed thumbnail recreation, Issue #134\n\n    * Merged external JS libraries into a central \"plugins.js\" of the 2k11\n      backend template, can be updated through\n      templates/2k11/admin/js/gruntipity.php helper script.\n\n    * Adapted database table structure change for statistics, shoutbox,\n      karma and spamblock plugin (for new field definition of \"ip\" field)\n      Thanks to rohdef!\n\n    * Added new option \"enabledBackendPopups\" that allow to specify\n      if inline modal dialogs or popups are used in the backend for\n      e.g. the category selectory and media library\n\n    * added experimental support for PHP/SMARTY IN MEMORY caching\n      Enabled by default, if classes found loaded.\n      Disable with\n        $serendipity['disable_apc'] = true;\n      and\n        $serendipity['disable_memcache'] = true;\n\n    * Support added in serendipity_db_schema_import for sqlite\n      autoincrement\n\n    * Remove Google Reader button from syndication plugin options\n\n    * Add subToMe-button to syndication plugin and change its defaults\n\n    * Use Browsercache to save cache and restore entries\n\n    * Improved installer to forbid using database table prefixes with\n      special characters\n\n    * Themes using Engines are now able to use the parent's\n      configuration\n\n    * Prevent \"new\" plugin api to install double instances of plugins\n      that are not stackable (issue #45)\n\n    * Back button in plugin-config\n\n    * Adapted serendipity_editor.js to provide more global (though\n      deprecated) API access methods for plugins like amazonchooser\n      and linktrimmer, to perform insertion. Also fixed the\n      insertion of text when the ID of the element is not prefixed\n\n    * Move sort by name to simple filter in ML, replace file extension\n\n    * Remember selected media library folder\n\n    * Show upload-success or error with the ajax image uploader\n\n    * Fix preview entry exception (issue #119)\n\n    * Add serendipity.toggle_collapsible as a reusable JS function\n      for the core backend and backend sections emitted by plugins as\n      an easy way to provide show/hide functionality. (yellowled)\n\n    * Fixed media insert target bug (issued by #143, #145, #121)\n\n    * Fixed publish drafted-entries via dashboard (issue #160)\n\n    * All frontend themes that rely on the bundled Core jQuery library\n      are currently using the jquery.noConflict-mode for compatibility\n      to older plugins.\n      This mode is now considered deprecated and will be removed in\n      future releases. A new variable:\n        $serendipity['capabilities']['jquery-noconflict'] = false;\n      in your theme's config.inc.php file can now turn of that\n      noConflict-mode.\n\n    * Due to distinction of backend and frontend themes, each theme\n      that provides a custom jquery.js now only does so for the\n      frontend. The backend now listens to a:\n\n        $serendipity['capabilities']['jquery_backend'] = false;\n\n      variable, and the file needs to be jquery_backend.js that\n      a backend theme would reference to.\n\n    * Changed 2k11's config.inc.php file to provide a more stable\n      call of event hooks so that other themes can also hook\n      their own events.\n\n    * Changed JS for category filtering and its reset button to be a\n      reusable function, which is now also used in the list of\n      installable plugins.\n\n    * Fixed wrong local documentation URL in plugin configuration\n\n    * Added new \"backend_dashboard\" event-hook for plugins to use\n      within dashboard.\n\n    * Backend and Frontend themes can now be set independently from\n      each other. New backend themes now need to set:\n\n        Backend: Yes\n\n      in their info.txt file. If you adapt a custom admin theme,\n      ensure that it is compatible to the new \"2k11\" backend to\n      ensure proper future usage within Serendipity. The bulletproof\n      backend will now no longer be recognized as a backend theme\n      option, but can be selected as a new frontend theme, while\n      using 2k11 (=default) in the backend.\n\n    * Include klogger, call it as $serendipity['logger']->debug/error.\n      The log-level can be set in the general configuration and is\n      disabled by default.\n\n    * Fixed missing s9ymdb ID\n\n    * Add HTTP_Request2 and dependencies as bundled libraries and\n      update PEAR library to version 1.9.4\n\n    * Implemented AJAX uploadResize option to allow resizing an image\n      before upload (onli)\n\n    * Improved file/directory removal code to (hopefully) fail more\n      gracefully\n\n    * Change \"default\" admin backend template fallback chain so that\n      old admin themes can theoretically be shown with the \"old\"\n      admin interface. This however in many themes breaks the\n      Serendipity workflow. In other words, currently old custom backend\n      themes are deprecated. We are still working on how to deal\n      with this and if we can add some sort of compatibility or port.\n\n    * Fix bundled jquery's source mapping, upgraded to 1.11.1\n\n    * Fixed missing media name in resize GET URL\n\n    * Fix MediaDB overlay display\n\n    * Re-Added possibility to change filename/target directory for\n      media uploads\n\n    * Update CKEditor to 4.4\n\n    * Fixed some missing internationalization instances\n\n    * Minor CSS improvements for upgrader, plugin sequencing widget\n\n    * RSS importer accepts pubDate in addition to pubdate element.\n\n    * Upgrader in Dashboard can be disabled, returns error message when\n      URL not accessible\n\n    * Added a category filtering ability for the entry editor\n\n    * Better check when removing old/dead files to prevent error\n      messages\n\n    * WYSIWYG editor respects image floats\n\n    * Support html5 multiple file upload\n\n    * Modernizr, magnificPopup updates\n\n    * Improvements to equal heights js, button labels\n\n    * No longer truncate long entry titles\n\n    * Improve non-WYSIWYG editor tag insertion, url insertion\n\n    * Improve less DOM firing on certain javascript tasks\n\n    * Introduce js_backend event hook\n\n\nVersion 2.0-beta1 and followup -beta2 (April 14th, 2014)\n------------------------------------------------------------------------\n\n    * Upgrade Smarty libs to 3.1.18\n\n    * Automatic upgrade removal of old Smarty2 files (2.0-alpha2)\n      function uses SPL\n\n    * Implemented patch https://github.com/s9y/Serendipity/pull/15\n\n    * When switching Themes, both the backend and the frontend\n      will remember the timestamp of the last theme change,\n      to make sure that the browser will not cache a mismatching CSS.\n\n    * Fix theme change issues with global template vars in core\n      (1559472ca3) see 'temporary added empty $template_config_groups'\n      in 1.7-rc2 (eb77dc369a)\n\n    * Use Smarty for backend display output\n\n    * \"Themes\" are now what has previously been mixed as \"Design\",\n      \"Theme\", \"Template\" or \"Layouts\".\n\n    * WYSIWYG-Spawn-API reworked (2k11/admin/wysiwyg_init.tpl)\n\n    * All Javascript-functions like SetCookie now reside in a\n      serendipity-object, simulating a namespace.\n        SetCookie(...)\n      became\n        serendipity.SetCookie(...)\n\n    * Renamed JS-Function:\n        toggleCategorySelector became toggle_category_selector\n\n    * The advanced js option (eyecandy) got removed, as such a thing\n      like advanced js doesn't exist anymore\n\n    * dashboard_plugin has an equivalent in the core, replacing the\n      frontpage\n\n    * Constants like S9Y_FRAMEWORK_COMPAT are no longer set\n      (include_once is used instead)\n\n    * New additional option to render smarty-functions:\n      serendipity_smarty_show($template, $data)\n\n    * A number of functions now returns their result instead of echoing\n      them (TODO: a bunch of image- and\n      trackback-functions still use echo for messages\"):\n        serendipity_plugin_config\n        serendipity_printEntryForm\n        serendipity_printEntries\n        function serendipity_showMedia\n        serendipity_showPropertyForm\n        showMediaLibrary\n        serendipity_guessInput\n        memSnap\n        serendipity_displayTopUrlList\n        serendipity_displayTopExits\n        serendipity_displayTopReferrers\n        serendipity_printConfigTemplate\n        show_plugins\n\n    * Functions removed from the core:\n        serendipity_printConfigJS\n\n    * Functions added to the core:\n        serendipity_generateImageSelectorParams\n\n    * All internal plugins got extracted from plugin_internal.inc.php\n      and moved to plugins/.\n      They are renamed to work there (upgrader task provides migration):\n        serendipity_calendar_plugin    became serendipity_plugin_calendar\n        serendipity_quicksearch_plugin became serendipity_plugin_quicksearch\n        serendipity_archives_plugin    became serendipity_plugin_archives\n        serendipity_categories_plugin  became serendipity_plugin_categories\n        serendipity_syndication_plugin became serendipity_plugin_syndication\n        serendipity_superuser_plugin   became serendipity_plugin_superuser\n        serendipity_plug_plugin        became serendipity_plugin_plug\n\n    * Add plugin hook \"js\", generating a virtual serendipity.js\n\n    * Admin JS is now bundled in serendipity_editor.js.tpl and\n      rendered using smarty in the theme config\n\n    * Admin JS got rewritten using jQuery where applicable\n\n    * serendipity_define.js.php removed\n\n    * Removed support for layout.php\n\n    * The whole PHP-Code now almost never echoes integrated HTML, but\n      uses smarty template (TODO: Remove the almost)\n      The necessary smarty-templates reside in 2k11/admin/\n      Every theme can generate its own backend if it integrates those\n      templates under admin/ itself\n\n    * 2k11 is set as the new default backend, replacing bulletproof.\n      default remains the fallback so far.\n\n    * A number of functions had some arguments removed:\n        * function serendipity_displayImageList:\n            From\n                function serendipity_displayImageList($page = 0, $lineBreak = NULL, $manage = false, $url = NULL, $show_upload = false, $limit_path = NULL, $smarty_display = true)\n            to\n                function serendipity_displayImageList($page = 0, $lineBreak = NULL, $manage = false, $url = NULL, $show_upload = false, $limit_path = NULL)\n        * function serendipity_showMedia\n            From\n                function serendipity_showMedia(&$file, &$paths, $url = '', $manage = false, $lineBreak = 3, $enclose = true, $smarty_vars = array(), $smarty_display = true)\n            to\n                function serendipity_showMedia(&$file, &$paths, $url = '', $manage = false, $lineBreak = 3, $enclose = true, $smarty_vars = array())\n        * generate_plugins\n            From\n                static function generate_plugins($side, $tag = '', $negate = false, $class = null, $id = null, $tpl = 'sidebar.tpl')\n            to\n                static function generate_plugins($side, $negate = false, $class = null, $id = null, $tpl = 'sidebar.tpl')\n\n    * serendipity_showMedia now no longer returns the used template and\n      echoes the generated HTML, but only returns the generated HTML\n\n    * Themes now have their own configuration page,\n      ?serendipity[adminModule]=templates&serendipity[adminAction]=editConfiguration\n\n    * jQuery in the backend no longer runs in noConflict-mode. Use\n      $(...) instead of jQuery(...)\n\n    * The entryproperty-plugin will now always delete its cache on\n      uninstall, not only if the cache is activated then\n\n    * serendipity_is_iframe now really only checks for iframe and\n      doesn't also echo it\n\n    * Added option simpleFilters (meant to indicate to show less\n      filters and poweruser-options)\n\n    * serendipity_admin_image_selector.php no longer used by 2k11,\n      instead the media library (with admin/media_choose.tpl,\n      admin/media_upload.tpl, media_pane.tpl, media_items.tpl)\n      can generat the imageselector on its own. The editor calls\n      serendipity_admin.php?serendipity[adminModule]=media instead,\n      with serendipity[textarea] indicating the target, and\n      serendipity[showMediaToolbar] activating the imageSelector modus\n\n    * New required PHP-Version: 5.3 or higher (checked in the installer)\n\n\nVersion 1.7.8 (February 9th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed POST for db entry insert, caused by 1.7.6 security feature\n\n\nVersion 1.7.7 (February 6th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed PHP parse error in templatechooser plugin. Blame garvin. :(\n\n\nVersion 1.7.6 (February 6th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed backend security issues, thanks to Stefan Schurtz:\n\n        - XSS of users realname in \"Manage users\" section\n          (Backend, requires login)\n        - XSS when creating an entry with bad id/timestamp values\n          (Backend, requires login)\n        - SQL-Injection for plugin installation parameter\n          (Backend, requires admin login)\n\n    * Templatechooser plugin uses \"default\" template as fallback,\n      not \"bulletproof\".\n\n\nVersion 1.7.5 (January 18th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed textile PHP 5.2 (namespace) compat issue\n\n    * Added default value to spamblocks required_fields option [name,\n      comment]\n\n\nVersion 1.7.4 (January 11th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed emoticate plugin icon link to check for textile class\n\n    * Upgrade textile plugin libs - lib3 extends to PHP >= 5.3.\n      Please check for new options!\n\n    * Fixed spamblocks Captcha imagecreate() with PHP > 5.3 versions\n\n    * Smarty 3.1.16 bugfix release - please read bundled-libs/Smarty/change_log.txt\n      about changes to versions 3.1.16 and 3.1.15.\n      Please also see special bundled-libs/Smarty/3.1.16_RELEASE_NOTES.txt\n\n    * Removed blogg.de filter from spamblock plugin, adapted htaccess\n      IP block algorithm for race conditions. .htaccess can now contain\n      multiple Deny From ranges to prevent parsing problems (DLange)\n\n    * Fixed IP columns in spamblocklog, spamblock_htaccess, karmalog, visitors\n      and shoutbox to varchar(45) for IPv6 - including tunneled IPv4 (39+6)\n\n    * Fixed possible double includement of plugin_internal.inc.php\n\n    * Fix possible temporary caching errors failing $eventData[0]['properties']\n\n    * Basic support for static blocks (includeentry plugin) in 2k11.\n\n    * Added \"backend_footer\" event hook\n\n    * Exclude \"frontpage extensions\" directories \"_vti_cnf\" on windows servers\n      in Media Library\n\n    * Fixed pagination when searching terms with fetchlimit < 4\n\n    * Fixed deprecated /e modifier with PHP >= 5.5 in nl2br plugin restore method\n\n\nVersion 1.7.3 (August 28th, 2013)\n------------------------------------------------------------------------\n\n    * Trackback to https:// style URLs will use proper port 443 instead\n      of 80.\n\n    * Disabled htmlarea spellchecker module, http://osvdb.org/87395\n      Thanks for Henri Salo for pointing this out. CVE-2013-5670\n\n\nVersion 1.7.2 (July 26th, 2013)\n------------------------------------------------------------------------\n\n    * Fix a syntax error in the \"mysql\" deprecation code, thanks\n      to Ian\n\n\nVersion 1.7.1 (July 26th, 2013)\n------------------------------------------------------------------------\n\n    * Added new event hooks \"backend_plugins_install\", \"backend_plugins_update\"\n      and \"backend_templates_install\".\n\n    * Serendipity will switch to mysqli if PHP >= 5.5 is used (mysql\n      is deprecated)\n\n    * Smarty upgrade to 3.1.14 (read changeLog and the README for API changes since Smarty 2)\n\n    * Upgrader will now remove/delete the browsercompatibility plugin\n\n    * Fixed Media Library exclude path to not show/proceed ckeditor/kcfinders .thumbs dir\n\n    * Fixed bulletproof->colorset GET mismatch with categorytemplates plugin\n      config.inc.php [Line 29]\n\n    * German translation for stable archives added (YL)\n\n    * Fixed curl result bug in spartacus plugin\n\n    * Create new migration task for propagate defaultBaseURL when\n      currently empty (onli)\n\n    * Fixed statistics sidebar querys ( & for PostgreSQL ) [242520b]\n      and added some missing html end tags\n\n    * Added missing current group name when editing usergroups\n\n\nVersion 1.7 (May 11th, 2013)\n------------------------------------------------------------------------\n\n    * rc4: Get ready for CKEDITOR-wysiwyg Plugin mode\n\n    * rc4: Fixed fetching javascript object (for nugget textareas) in non-wysiwyg-mode\n\n    * rc4: Change .htaccess blocking mechanism by spamblock plugin to not fetch\n      too many datarows, thanks to DLange from the forums. (The .htaccess\n      feature is still considered experimental, use at your own risk ;))\n\n    * rc4: Fixed entryproperties backend 'cache now' link\n\n    * rc3 + rc4: Media database: Escape more Cookie values to prevent storing\n      possible XSS (http://board.s9y.org/viewtopic.php?f=3&t=19142).\n      Escape hotlinked media filename. Escape importer host name error\n      Thanks to GreenSun from the forums for bringing this to attention,\n      originally reported by Dshellnoi Unix\n\n    * rc2: Alter entries.tpl to add the line:\n      {assign var=\"entry\" value=$entry scope=\"parent\"}\n      for proper propagation of $entry to sub-templates.\n\n    * rc2: Alter error reporting to only fail when 'debug' mode is enabled,\n      so that \"normal\" blog installations will not fail on specific\n      E_STRICT warnings that are not important.\n\n    * rc2: temporary added empty $template_config_groups into templates with config,\n      to avoid display troubles for template changes, if previous template had these set.\n      Please check your template.\n\n    * rc2: reflect POST submitted changes in Bulletproof template configs re-set situations\n\n    * various PHP 5 compatibility fixes in core and plugins\n\n    * Allow entryproperties plugin to define defaults for custom fields\n\n    * Onyx, Net_URL classes: Remove PHP4 style constructor due to\n      PHP5 error \"Constructor already defined\"\n\n    * Improved RSS sidebarplugin to support Atom\n\n    * Bundled simplepie\n\n    * For Blogs running on a non-UTF-8 language, set a Smarty constant\n      to indicate the actually used charset.\n\n    * Added to use MyISAM handler for s9y tables (we do not use InnoDB\n      features, but rely on MyISAM fulltext)\n\n    * fixed defaultBaseURL did not show up installer. Thanks to onli.\n      Follow up from c292bad\n\n    * fixed draft & future entries preview link in backend\n\n    * Improved karmarating plugin to be able to use AJAX calls\n      (gregman)\n\n    * Allow Smarty to fetch .tpl files from all directories so that\n      s9y plugin can use the fetch() call for their .tpl files no\n      matter which (symlinked) directory the plugin resides in.\n      The Smarty security policy to us only serves as a restriction\n      within .tpl files to not allow arbitrary PHP modifier/function calls.\n      If in the future Smarty supports enforcing trustedDir checks on\n      {include} calls separately to smarty->fetch() calls, we'll also\n      add that to .tpl files.\n      (garvinhicking)\n\n    * Patch by Markus Br\ufffdkner: Properly handle files that have no\n      extension in media database\n\n    * Made Spartacus recognize github.com mirror (garvinhicking)\n\n    * Add \"Summary\" output to title of summary archive pages, patch by\n      hboeck\n\n    * Set the smarty object by instance (ophian)\n      It is often needed to access the Smarty object from anywhere in your code, e.g. in plugins\n      We now ensure that there is only one instance of the object available.\n      To obtain an instance of this class: $serendipity['smarty'] = Serendipity_Smarty::getInstance();\n      The first time this is called a new instance will be created. Thereafter, the same instance is handed back.\n      To overwrite use $serendipity['smarty'] = new Serendipity_Smarty; to create a new instance.\n\n    * Set a global Serendipity errorToExceptionHandler (ophian)\n      changed some old smarty trigger_errors to PHPs native function\n\n    * Updated spamblock plugin (ophian)\n      changed wordfilter to function and Commenters moderation check verify_once\n      to get checked via wordfilter to reject known spam comments before\n\n    * Changed backend comment (error) messages  (ophian)\n      as now captured and styleable messages\n      (newly added .serendipity_backend_msg_notice css class)\n\n    * Updated nl2br plugin (ophian)\n      added isolation tag using nl to br\n      this also adds some NoBR buttons to backend entry forms\n\n    * Smarty3 support (ophian)\n      with this upgrade Serendipity / Smarty will at least need a webserver running the PHP 5.2 series.\n      As of August 2011, all PHP users should note, that the PHP 5.2 series is NOT supported anymore by the PHP developers.\n      All users are strongly encouraged to upgrade to PHP 5.3.8 and up. Please refer to your ISP about this.\n\n    * Added new serendipity['defaultBaseURL'] variable that makes sure\n      that the baseURL is not overriden when configuring serendipity\n      with a possibly autodetected currentl URL. Patch by Manko10.\n\n\n(Older NEWS see file NEWS_OLD)", "<?php\n# Copyright (c) 2003-2005, Jannis Hermanns (on behalf the Serendipity Developer Team)\n# All rights reserved.  See LICENSE file for licensing details\n\nif (IN_serendipity !== true) {\n    die (\"Don't hack!\");\n}\n\n/**\n * Delete a category or range of categories\n *\n * @access public\n * @param   string  Holds the SQL string to pass to the 'BETWEEN' command. Like '1 5' would delete categories 1-5.\n * @param   string  Holds the optional SQL string that contains an extra safety check so that only categories can be deleted if the user is an author of the category.\n * @return  array   The DB result\n */\nfunction serendipity_deleteCategory($category_range, $admin_category) {\n    global $serendipity;\n\n    if (!serendipity_checkPermission('adminCategoriesDelete')) {\n        return false;\n    }\n\n    serendipity_plugin_api::hook_event('backend_category_delete', $category_range);\n\n    return serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}category WHERE category_left BETWEEN {$category_range} {$admin_category}\");\n}\n\n/**\n * Fetch a SQL ID subset of the category tree\n *\n * @access public\n * @param   int     The Id of the parent category to fetch categorie childs from. (0: all)\n * @return  array   An associative array of the left and right category next to the chosen one\n */\nfunction serendipity_fetchCategoryRange($categoryid) {\n    global $serendipity;\n\n    $res =& serendipity_db_query(\"SELECT category_left, category_right, hide_sub FROM {$serendipity['dbPrefix']}category WHERE categoryid='\". (int)$categoryid .\"'\");\n    if (!is_array($res) || !isset($res[0]['category_left']) || !isset($res[0]['category_right'])) {\n        $res = array(array('category_left' => 0, 'category_right' => 0));\n    }\n\n    if ($res[0]['hide_sub'] == 1) {\n        // Set ranges only to own category. Patch by netmorix\n        return array('category_left' => $res[0]['category_left'], 'category_right' => $res[0]['category_left']);\n    } else {\n        return array('category_left' => $res[0]['category_left'], 'category_right' => $res[0]['category_right']);\n    }\n}\n\n/**\n * Returns SQL code to use when fetching entries that are contained within multiple categories\n *\n * @access public\n * @param  string   A listing of category ids to check, separated by \";\"\n * @param  boolean  Toggle whether to include or exclude entries of this category\n * @return string   Returns the SQL code for selecting entries of the calculated categories\n */\nfunction serendipity_getMultiCategoriesSQL($cats, $invert = false) {\n    global $serendipity;\n\n    $mcategories   = explode(';', $cats);\n    $cat_sql_array = array();\n    foreach($mcategories AS $categoryid) {\n        $categoryid  = (int)$categoryid;\n\n        if ($categoryid != 0) {\n            $cat_sql_array[] = \" (c.category_left \" . ($invert ? \" NOT \" : \"\") . \" BETWEEN \" . implode(' AND ', serendipity_fetchCategoryRange($categoryid)) . ')';\n        }\n    }\n\n    if (count($cat_sql_array) < 1) {\n        return '';\n    }\n\n    return '(' . implode(($invert ? ' AND ' : ' OR '), $cat_sql_array) . ')';\n}\n\n/**\n * Return the category properties of a specific category\n *\n * Either use the first or the second parameter to select a category by ID or name. It's not\n * meant to be used with both parameters specified.\n *\n * @access public\n * @param   int     The ID of the category to fetch\n * @param   string  The Name of a category to fetch\n * @return  array   Returns an array of category properties\n */\nfunction serendipity_fetchCategoryInfo($categoryid, $categoryname = '') {\n    global $serendipity;\n\n    if (!empty($categoryname)) {\n        $query = \"SELECT\n                         c.authorid,\n                         c.categoryid,\n                         c.category_name,\n                         c.category_description,\n                         c.category_icon,\n                         c.parentid,\n                         c.hide_sub\n                    FROM {$serendipity['dbPrefix']}category AS c\n                   WHERE category_name = '\" . serendipity_db_escape_string($categoryname) . \"'\";\n\n        $ret =& serendipity_db_query($query);\n        return $ret[0];\n    } else {\n        $query = \"SELECT\n                         c.authorid,\n                         c.categoryid,\n                         c.category_name,\n                         c.category_description,\n                         c.category_icon,\n                         c.parentid,\n                         c.hide_sub\n                    FROM {$serendipity['dbPrefix']}category AS c\n                   WHERE categoryid = \" . (int)$categoryid;\n\n        $ret =& serendipity_db_query($query);\n        return $ret[0];\n    }\n}\n\n/**\n * Fetch a list of all category properties to a specific entry ID\n *\n * @access public\n * @param   int     The ID of the entry\n * @return  array   The array of associated categories to that entry\n */\nfunction &serendipity_fetchEntryCategories($entryid) {\n  global $serendipity;\n\n    if (is_numeric($entryid)) {\n        $query = \"SELECT\n                         c.categoryid,\n                         c.category_name,\n                         c.category_description,\n                         c.category_icon,\n                         c.parentid\n                    FROM {$serendipity['dbPrefix']}category AS c\n              INNER JOIN {$serendipity['dbPrefix']}entrycat AS ec\n                      ON ec.categoryid = c.categoryid\n                   WHERE ec.entryid = {$entryid}\n                ORDER BY c.category_name ASC\";\n\n        $cat =& serendipity_db_query($query);\n        if (!is_array($cat)) {\n            $arr = array();\n            return $arr;\n        } else {\n            return $cat;\n        }\n    }\n}\n\n\n/**\n * Fetch a list of entries\n *\n * The most central and versatile function of Serendipity, allows you to fetch entries\n * depending on a LOT of options.\n * One of the parameters missing is a restriction by category. You need to do that by\n * setting the superglobal $serendipity['GET']['category'] to the category you want to fetch.\n * Separate multiple categories by \";\".\n * Other \"external\" variables that affect this function are:\n *  $serendipity['short_archives']      - Indicates if the short archive listing is wanted, without the full entry text\n *  $serendipity['range']               - If $range is not used, the time restriction is fetched from this array, which holds a start timestamp and end timestamp.\n *  $serendipity['GET']['category']     - The category ID to restrict fetching entries from (can be separated by \";\")\n *  $serendipity['GET']['hide_category']- The category ID to NOT fetch entries from (can be separated by \";\")\n *  $serendipity['GET']['viewAuthor']   - Only fetch entries by this author\n *  $serendipity['GET']['page']         - The page number to show entries, for pagination\n *\n * If you want to use any of these options, set the variable before calling serendipity_fetchEntries(). You can reset the variables to their original content after the function call, if you need to.\n *\n * Several options perform different commands when different types are passed, like the $range\n * parameter which can either be a string or an array with START/END range.\n *\n * @access  public\n * @param   mixed       Restricts fetching entries to a specific timespan. Behaves differently depending on the type:\n *                      Numeric:\n *                        YYYYMMDD - Shows all entries from YYYY-MM-DD.\n *                                   If DD is \"00\", it will show all entries from that month.\n *                                   If DD is any other number, it will show entries of that specific day.\n *                      2-Dimensional Array:\n *                        Key #0   - Specifies the start timestamp (unix seconds)\n *                        Key #1   - Specifies the end timestamp (unix seconds)\n *                      Other (null, 3-dimensional Array, ...):\n *                        Entries newer than $modified_since will be fetched\n * @param   boolean     Indicates if the full entry will be fetched (body+extended: TRUE), or only the body (FALSE).\n * @param   string      Holds a \"Y\" or \"X, Y\" string that tells which entries to fetch. X is the first entry offset, Y is number of entries. If not set, the global fetchLimit will be applied (15 entries by default)\n * @param   boolean     Indicates whether drafts should be fetched (TRUE) or not\n * @param   int         Holds a unix timestamp to be used in conjunction with $range, to fetch all entries newer than this timestamp\n * @param   string      Holds the SQL \"ORDER BY\" statement.\n * @param   string      Can contain any SQL code to inject into the central SQL statement for fetching the entry\n * @param   boolean     If set to TRUE, all entries will be fetched from scratch and any caching is ignored\n * @param   boolean     If set to TRUE, all sticky entries will NOT be fetched.\n * @param   string      Can contain a SQL statement on which keys to select. Plugins can also set this, pay attention!\n * @param   string      Can contain a SQL statement on how to group the query. Plugins can also set this, pay attention!\n * @param   string      If set to \"array\", the array of entries will be returned. \"flat-array\" will only return the articles without their entryproperties. \"single\" will only return a 1-dimensional array. \"query\" will only return the used SQL.\n * @param   bool        Should an SQL-join be made to the AUTHORS DB table?\n * @param   bool        Should an SQL-join be made to the CATEGORIES DB table?\n * @param   string      SQL-Parts to add to JOIN\n * @return  array       Holds the super-array of all entries with all additional information\n */\nfunction &serendipity_fetchEntries($range = null, $full = true, $limit = '', $fetchDrafts = false, $modified_since = false, $orderby = 'timestamp DESC', $filter_sql = '', $noCache = false, $noSticky = false, $select_key = null, $group_by = null, $returncode = 'array', $joinauthors = true, $joincategories = true, $joinown = null) {\n    global $serendipity;\n\n    if ($serendipity['useInternalCache']) {\n        $cache = serendipity_setupCache();\n\n        $args = func_get_args();\n        $args = array_values($args);\n        $key = md5(serialize($args));\n\n        if (($entries = $cache->get($key, \"fetchEntries\")) !== false) {\n            return unserialize($entries);\n        }\n    }\n    \n    $cond = array();\n    $cond['orderby'] = $orderby;\n    if (isset($serendipity['short_archives']) && $serendipity['short_archives']) {\n        // In the short listing of all titles for a month, we don't want to have a limit applied. And we don't need/want toe\n        // full article body (consumes memory)\n        $limit   = '';\n        $full    = false;\n    }\n\n    if ($full === true) {\n        $noCache = true; // So no entryproperties related to body/extended caching will be loaded\n        $body = ', e.body, e.extended';\n    } else {\n        $body = '';\n    }\n\n    if ($fetchDrafts === false) {\n        $drafts = \"isdraft = 'false'\";\n    }\n\n    if ($limit != '') {\n        $serendipity['fetchLimit'] = $limit;\n    }\n\n    /* Attempt to grab range from $serendipity, if $range is not an array or null */\n    if (!is_array($range) && !is_null($range) && isset($serendipity['range'])) {\n        $range = $serendipity['range'];\n    }\n\n    if (is_numeric($range)) {\n        $year  = (int)substr($range, 0, 4);\n        $month = (int)substr($range, 4, 2);\n        $day   = (int)substr($range, 6, 2);\n\n        $startts = serendipity_serverOffsetHour(mktime(0, 0, 0, $month, ($day == 0 ? 1 : $day), $year), true);\n\n        if ($day == 0) {\n            $month++;\n        } else {\n            $day++;\n        }\n\n        $endts = serendipity_serverOffsetHour(mktime(0, 0, 0, $month, ($day == 0 ? 1 : $day), $year), true);\n\n        $cond['and'] = \" WHERE e.timestamp >= $startts AND e.timestamp <= $endts\";\n    } elseif (is_array($range) && count($range)==2) {\n        $startts = serendipity_serverOffsetHour((int)$range[0], true);\n        $endts   = serendipity_serverOffsetHour((int)$range[1], true);\n        $cond['and'] = \" WHERE e.timestamp >= $startts AND e.timestamp <= $endts\";\n    } else {\n        if ($modified_since) {\n            $unix_modified = strtotime($modified_since);\n            if ($unix_modified != -1) {\n                $cond['and'] = ' WHERE last_modified >= ' . (int)$unix_modified;\n                if (!empty($limit)) {\n                    $limit = ($limit > $serendipity['max_fetch_limit'] ? $limit : $serendipity['max_fetch_limit']);\n                }\n                $cond['orderby'] = 'last_modified DESC';\n            }\n        }\n    }\n\n    if (!empty($drafts)) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= \" AND $drafts\";\n        } else {\n            $cond['and'] = \"WHERE $drafts\";\n        }\n    }\n\n    if (isset($serendipity['GET']['viewAuthor'])) {\n        $multiauthors = explode(';', $serendipity['GET']['viewAuthor']);\n        $multiauthors_sql = array();\n        foreach($multiauthors AS $multiauthor) {\n            $multiauthors_sql[] = 'e.authorid = ' . (int)$multiauthor;\n        }\n\n        $cond['and'] .= ' AND (' . implode(' OR ', $multiauthors_sql) . ')';\n    }\n\n    $cat_sql = '';\n    if (isset($serendipity['GET']['category'])) {\n        $cat_sql = serendipity_getMultiCategoriesSQL($serendipity['GET']['category']);\n    } elseif (isset($serendipity['GET']['hide_category'])) {\n        $cat_sql = serendipity_getMultiCategoriesSQL($serendipity['GET']['hide_category'], true);\n    }\n\n    if (!empty($cat_sql)) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= \" AND ($cat_sql)\";\n        } else {\n            $cond['and'] = \"WHERE ($cat_sql)\";\n        }\n    }\n\n    if (isset($serendipity['GET']['adminModule']) && $serendipity['GET']['adminModule'] == 'entries' && !serendipity_checkPermission('adminEntriesMaintainOthers')) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= \" AND e.authorid = '\" . $serendipity['authorid'] . \"'\";\n        } else {\n            $cond['and'] = \"WHERE e.authorid = '\" . $serendipity['authorid'] . \"'\";\n        }\n    }\n\n    if (!isset($serendipity['GET']['adminModule']) && !serendipity_db_bool($serendipity['showFutureEntries'])) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= \" AND e.timestamp <= \" . serendipity_db_time();\n        } else {\n            $cond['and'] = \"WHERE e.timestamp <= \" . serendipity_db_time();\n        }\n    }\n\n    if (!empty($filter_sql)) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= ' AND ' . $filter_sql;\n        } else {\n            $cond['and'] = 'WHERE ' . $filter_sql;\n        }\n    }\n\n    if ($serendipity['dbType'] == 'postgres' ||\n        $serendipity['dbType'] == 'pdo-postgres') {\n        $cond['group']    = '';\n        $cond['distinct'] = 'DISTINCT';\n    } else {\n        $cond['group']    = 'GROUP BY e.id';\n        $cond['distinct'] = '';\n    }\n\n    if (!is_null($group_by)) {\n        $cond['group'] = $group_by;\n    }\n\n    serendipity_plugin_api::hook_event('frontend_fetchentries', $cond, array('noCache' => $noCache, 'noSticky' => $noSticky, 'source' => 'entries'));\n\n    if (is_null($select_key)) {\n        $select_key = \"{$cond['distinct']}\n                    {$cond['addkey']}\n\n                    e.id,\n                    e.title,\n                    e.timestamp,\n                    e.comments,\n                    e.exflag,\n                    e.authorid,\n                    e.trackbacks,\n                    e.isdraft,\n                    e.allow_comments,\n                    e.last_modified,\n\n                    a.realname AS author,\n                    a.username AS loginname,\n                    a.email\";\n    }\n\n    serendipity_ACL_SQL($cond);\n\n    // Store the unique query condition for entries for later reference, like getting the total article count.\n    $serendipity['fullCountQuery'] = \"\n                FROM\n                    {$serendipity['dbPrefix']}entries AS e\";\n    if ($joinauthors) {\n        $serendipity['fullCountQuery'] .= \"\n                    LEFT JOIN {$serendipity['dbPrefix']}authors a\n                        ON e.authorid = a.authorid\";\n    }\n\n    if ($joincategories || !isset($serendipity['enableACL']) || $serendipity['enableACL'] == true) {\n        // Category joins are REQUIRED when the ACLs are enabled.\n        $serendipity['fullCountQuery'] .= \"\n                    LEFT JOIN {$serendipity['dbPrefix']}entrycat ec\n                        ON e.id = ec.entryid\n                    LEFT JOIN {$serendipity['dbPrefix']}category c\n                        ON ec.categoryid = c.categoryid\";\n    }\n\n    if ($joinown) {\n        $cond['joins'] .= $joinown;\n    }\n\n    $serendipity['fullCountQuery'] .=\"\n                    {$cond['joins']}\n                    {$cond['and']}\";\n\n    if (!empty($limit)) {\n        if (isset($serendipity['GET']['page']) && ($serendipity['GET']['page'] > 1 || serendipity_db_bool($serendipity['archiveSortStable'])) && !strstr($limit, ',')) {\n            if (serendipity_db_bool($serendipity['archiveSortStable'])) {\n                $totalEntries = serendipity_getTotalEntries();\n\n                $totalPages = ceil($totalEntries / $limit);\n                if ($totalPages <= 0 ) {\n                    $totalPages = 1;\n                }\n\n                if ($serendipity['GET']['page'] == $totalPages) {\n                    $limit = serendipity_db_limit(0, $limit);\n                } else if ($serendipity['GET']['page'] == $totalPages - 1) {\n                    $limit = serendipity_db_limit($limit, ($totalEntries - (($totalPages -2) * $limit)) - $limit);\n                } else {\n                    $limit = serendipity_db_limit(max(0, ($totalEntries - ($limit * $serendipity['GET']['page']))), $limit);\n                }\n            } else {\n                $limit = serendipity_db_limit(($serendipity['GET']['page']-1) * $limit, $limit);\n            }\n        }\n\n        $limit = serendipity_db_limit_sql($limit);\n    }\n\n    $query = \"SELECT $select_key\n                     $body\n                     {$serendipity['fullCountQuery']}\n                     {$cond['group']}\n                     {$cond['having']}\n                     \" . (!empty($cond['orderby']) ? \"ORDER BY {$cond['orderby']}\" : \"\") . \"\n                     $limit\";\n\n    // DEBUG:\n    // die($query);\n    $fetch_single = ($returncode == 'single' ? true: false);\n\n    if ($returncode == 'query') {\n        return $query;\n    }\n\n    $ret =& serendipity_db_query($query, $fetch_single, 'assoc');\n\n    if (is_string($ret)) {\n        die(\"Query failed: $ret\");\n    }\n\n    if (is_array($ret) && $returncode == 'array') {\n        // The article's query LIMIT operates on a flattened entries layer so that\n        // an article having 5 associated categories won't count as 5 entries.\n        // But to store the expanded list of categories, we need to send a new\n        // query once for all entries we have just fetched.\n        // First code for this was sending 15 queries for 15 fetched entries,\n        // this is now limited to just one query per fetched articles group\n\n        serendipity_fetchEntryData($ret);\n    }\n\n    if ($serendipity['useInternalCache']) {\n        $args = func_get_args();\n        $args = array_values($args);\n        $key = md5(serialize($args));\n        $cache->save(serialize($ret), $key, \"fetchEntries\");\n    }\n\n    return $ret;\n}\n\n/**\n * Fetch special entry data and attach it to a superarray of entries.\n *\n * Fetches all additional information like plugins, extended properties, additional categories for each entry.\n *\n * @access private\n * @see serendipity_fetchEntries()\n * @param   array       The array of entries where the output will be merged to (referenced)\n * @return null\n */\nfunction serendipity_fetchEntryData(&$ret) {\n    global $serendipity;\n\n    $search_ids = array(); // An array to hold all ids of the entry we want to fetch.\n    $assoc_ids  = array(); // A temporary key association container to not have to loop through the return array once again.\n\n    foreach($ret AS $i => $entry) {\n        $search_ids[]            = $entry['id'];\n        $ret[$i]['categories']   = array();        // make sure every article gets its category association\n        $assoc_ids[$entry['id']] = $i;             // store temporary reference\n    }\n\n    serendipity_plugin_api::hook_event('frontend_entryproperties', $ret, $assoc_ids);\n\n    $query = \"SELECT\n                     ec.entryid,\n                     c.categoryid,\n                     c.category_name,\n                     c.category_description,\n                     c.category_icon,\n                     c.parentid\n                FROM {$serendipity['dbPrefix']}category AS c\n           LEFT JOIN {$serendipity['dbPrefix']}entrycat AS ec\n                  ON ec.categoryid = c.categoryid\n               WHERE \" . serendipity_db_in_sql('ec.entryid', $search_ids) . \"\n            ORDER BY c.category_name ASC\";\n\n    $search_ret =& serendipity_db_query($query, false, 'assoc');\n\n    if (is_array($search_ret)) {\n        foreach($search_ret AS $i => $entry) {\n            $ret[$assoc_ids[$entry['entryid']]]['categories'][] = $entry;\n        }\n    }\n}\n\n/**\n * Fetch a single entry by a specific condition\n *\n * @access public\n * @param   string      The column to compare $val against (like 'id')\n * @param   string      The value of the colum $key to compare with (like '4711')\n * @param   boolean     Indicates if the full entry will be fetched (body+extended: TRUE), or only the body (FALSE). (Unused, keep for compat.)\n * @param   string      Indicates whether drafts should be fetched\n * @return\n */\nfunction &serendipity_fetchEntry($key, $val, $full = true, $fetchDrafts = 'false') {\n    global $serendipity;\n\n    $cond = array();\n    $cond['and'] = \" \"; // intentional dummy string to attach dummy AND parts to the WHERE clauses\n\n    if ($fetchDrafts == 'false') {\n        $cond['and'] = \" AND e.isdraft = 'false' \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND e.timestamp <= \" . serendipity_db_time() : '');\n    }\n\n    if (isset($serendipity['GET']['adminModule']) && $serendipity['GET']['adminModule'] == 'entries' && !serendipity_checkPermission('adminEntriesMaintainOthers')) {\n        $cond['and'] = \" AND e.authorid = '\" . $serendipity['authorid'] . \"'\";\n    }\n\n    serendipity_ACL_SQL($cond, true);\n\n    serendipity_plugin_api::hook_event('frontend_fetchentry', $cond, array('noSticky' => true));\n\n    $querystring = \"SELECT  e.id,\n                            e.title,\n                            e.timestamp,\n                            e.body,\n                            e.comments,\n                            e.trackbacks,\n                            e.extended,\n                            e.exflag,\n                            e.authorid,\n                            e.isdraft,\n                            e.allow_comments,\n                            e.last_modified,\n                            e.moderate_comments,\n\n                            a.realname AS author,\n                            a.username AS loginname,\n                            a.email\n                      FROM\n                            {$serendipity['dbPrefix']}entries e\n                 LEFT JOIN  {$serendipity['dbPrefix']}authors a\n                        ON  e.authorid = a.authorid\n                            {$cond['joins']}\n                     WHERE\n                            e.$key \" . ($key == 'id' ? '=' : 'LIKE') . \" '\" . serendipity_db_escape_string($val) . \"'\n                            {$cond['and']}\n\n                            {$cond['single_group']}\n                            {$cond['single_having']}\n                            {$cond['single_orderby']}\n                     LIMIT  1\";\n\n    $ret =& serendipity_db_query($querystring, true, 'assoc');\n\n    if (is_array($ret)) {\n        $ret['categories'] =& serendipity_fetchEntryCategories($ret['id']);\n        $ret['properties'] =& serendipity_fetchEntryProperties($ret['id']);\n        $stack     = array();\n        $stack[0]  = &$ret;\n        $assoc_ids = array($ret['id'] => 0);\n        serendipity_plugin_api::hook_event('frontend_entryproperties', $stack, $assoc_ids);\n    }\n\n    return $ret;\n}\n\n/**\n * Fetches additional entry properties for a specific entry ID\n *\n * @access public\n * @param   int     The ID of the entry to fetch additonal data for\n * @return  array   The array of given properties to an entry\n */\nfunction &serendipity_fetchEntryProperties($id) {\n    global $serendipity;\n\n    $parts = array();\n    serendipity_plugin_api::hook_event('frontend_entryproperties_query', $parts);\n\n    $_properties =& serendipity_db_query(\"SELECT property, value FROM {$serendipity['dbPrefix']}entryproperties WHERE entryid = \" . (int)$id . \" \" . $parts['and']);\n    if (!is_array($_properties)) {\n        $properties = array();\n    } else {\n        $properties =& $_properties;\n    }\n\n    $property = array();\n    foreach($properties AS $idx => $row) {\n        $property[$row['property']] =& $row['value'];\n    }\n\n    return $property;\n}\n\n/**\n * Fetch a list of available categories for an author\n *\n * @access public\n * @param   mixed   If set, the list of categories will be fetched according to the author id. If not set, all categories will be fetched. If set to \"all\", then all categories will be fetched.\n * @param   string  Restrict the list to be returned to a specific category NAME.\n * @param   string  The SQL query part for ORDER BY of the categories\n * @param   string  The ACL artifact condition. If set to \"write\" only categories will be shown that the author can write to. If set to \"read\", only categories will be show that the author can read or write to.\n * @return  array   Returns the array of categories\n */\nfunction &serendipity_fetchCategories($authorid = null, $name = null, $order = null, $artifact_mode = 'write', $flat = false) {\n    global $serendipity;\n\n    if ($name === null) {\n        $name = '';\n    }\n\n    if ($order === null) {\n        $order = 'category_name ASC';\n    }\n\n    if (!isset($authorid) || $authorid === null) {\n        $authorid = ((isset($serendipity['authorid']) && !empty($serendipity['GET']['adminModule'])) ? $serendipity['authorid'] : 1);\n    }\n\n    if (isset($serendipity['authorid']) && !empty($serendipity['GET']['adminModule']) && $authorid != $serendipity['authorid'] && !serendipity_checkPermission('adminCategoriesMaintainOthers')) {\n        $authorid = $serendipity['authorid'];\n    }\n\n    $where = '';\n\n    if ($authorid === -1 OR $authorid === 0) {\n        $sql_groupid = '0';\n    } else {\n        $sql_groupid = 'ag.groupid';\n    }\n\n    if ($authorid != 'all' && is_numeric($authorid)) {\n        $sql_authorid = $authorid;\n        if (!serendipity_checkPermission('adminCategoriesMaintainOthers', $authorid)) {\n            $where = \" WHERE (c.authorid = $authorid OR c.authorid = 0) \";\n            $where .= \"OR (\n                          acl.artifact_type = 'category'\n                          AND acl.artifact_mode = '\" . serendipity_db_escape_string($artifact_mode) . \"'\n                         ) \";\n\n        }\n    } else {\n        $sql_authorid = 'c.authorid';\n        $where = '';\n    }\n\n    if (!empty($name)) {\n        if ($where == '') {\n            $where = ' WHERE ';\n        } else {\n            $where = ' AND ';\n        }\n\n        $where .= \" c.category_name = '\" . serendipity_db_escape_string($name) . \"'\";\n    }\n\n    if ($serendipity['dbType'] == 'postgres' ||\n        $serendipity['dbType'] == 'pdo-postgres') {\n        $group    = '';\n        $distinct = 'DISTINCT';\n    } else {\n        $group    = 'GROUP BY c.categoryid';\n        $distinct = '';\n    }\n\n    $querystring = \"SELECT $distinct c.categoryid,\n                           c.category_name,\n                           c.category_icon,\n                           c.category_description,\n                           c.authorid,\n                           c.category_left,\n                           c.category_right,\n                           c.parentid,\n\n                           a.username,\n                           a.username AS loginname,\n                           a.realname\n                      FROM {$serendipity['dbPrefix']}category AS c\n           LEFT OUTER JOIN {$serendipity['dbPrefix']}authors AS a\n                        ON c.authorid = a.authorid\n           LEFT OUTER JOIN {$serendipity['dbPrefix']}authorgroups AS ag\n                        ON ag.authorid = $sql_authorid\n           LEFT OUTER JOIN {$serendipity['dbPrefix']}access AS acl\n                        ON ($sql_groupid = acl.groupid AND acl.artifact_id = c.categoryid)\n                           $where\n                           $group\";\n    if (!empty($order)) {\n        $querystring .= \"\\n ORDER BY $order\";\n    }\n\n    $ret =& serendipity_db_query($querystring);\n    if (is_string($ret)) {\n        echo \"Query failed: $ret\";\n    } else {\n        if ($flat) {\n          $cats = serendipity_walkRecursive($ret, 'categoryid', 'parentid', VIEWMODE_THREADED);\n          $flat_cats = array();\n          $flat_cats[0] = NO_CATEGORY;\n          foreach($cats AS $catidx => $catdata) {\n              $flat_cats[$catdata['categoryid']] = str_repeat('&nbsp;', $catdata['depth']*2) . serendipity_specialchars($catdata['category_name']);\n          }\n          return $flat_cats;\n        }\n    }\n    return $ret;\n}\n\n/**\n * Rebuild the Category Nested Set tree\n *\n * @access public\n * @see Based on http://www.sitepoint.com/article/hierarchical-data-database/1\n * @param   int     The ID of the parent category to rebuild\n * @param   int     The ID of the next left category\n * @return  int     Returns the new ID\n */\nfunction serendipity_rebuildCategoryTree($parent = 0, $left = 0) {\n    global $serendipity;\n    $right = $left + 1;\n\n    $result = serendipity_db_query(\"SELECT categoryid FROM {$serendipity['dbPrefix']}category WHERE parentid = '\" . (int)$parent . \"'\");\n    if ( is_array($result) ) {\n        foreach ( $result as $category ) {\n            $right = serendipity_rebuildCategoryTree($category['categoryid'], $right);\n        }\n    }\n    if ( $parent > 0 ) {\n        serendipity_db_query(\"UPDATE {$serendipity['dbPrefix']}category SET category_left='{$left}', category_right='{$right}' WHERE categoryid='{$parent}'\");\n    }\n\n    return $right + 1;\n}\n\n/**\n * Searches the list of entries by a specific term\n *\n * @todo: Allow to show results of staticpage plugins or others\n * @access public\n * @param   string      The searchterm (may contain wildcards)\n * @param   int         Restrict the number of results [also uses $serendipity['GET']['page'] for pagination]\n * @param   array       Add search Results at the top\n * @return  array       Returns the superarray of entries found\n */\nfunction &serendipity_searchEntries($term, $limit = '', $searchresults = '') {\n    global $serendipity;\n    static $log_queries = false;\n\n    if ($log_queries) {\n        $fp = fopen($serendipity['serendipityPath'] . '/archives/queries.csv', 'a');\n        fwrite($fp, date('Y-m-d H:i') . ';'\n                    . $_SERVER['REMOTE_ADDR'] . ';'\n                    . $term . \"\\n\");\n        fclose($fp);\n    }\n\n    $orig_limit = $limit;\n    if ($limit == '') {\n        $limit = $serendipity['fetchLimit'];\n    }\n\n    if (isset($serendipity['GET']['page']) && $serendipity['GET']['page'] > 1 && !strstr($limit, ',')) {\n        $limit = serendipity_db_limit(($serendipity['GET']['page']-1) * $limit, $limit);\n    }\n\n    $limit = serendipity_db_limit_sql($limit);\n\n    $term = serendipity_db_escape_string($term);\n    $cond = array();\n    $relevance_enabled = false;\n    if ($serendipity['dbType'] == 'postgres' ||\n        $serendipity['dbType'] == 'pdo-postgres') {\n        $cond['group']     = '';\n        $cond['distinct']  = 'DISTINCT';\n\n        $r = serendipity_db_query(\"SELECT count(routine_name) AS counter\n                                     FROM information_schema.routines\n                                    WHERE routine_name LIKE 'to_tsvector'\n                                      AND specific_catalog = '\" . $serendipity['dbName'] . \"'\");\n        if (is_array($r) && $r[0]['counter'] > 0) {\n            $term = str_replace('&amp;', '&', $term);\n            $cond['find_part'] = \"(\n            to_tsvector('english', title)    @@to_tsquery('$term') OR\n            to_tsvector('english', body)     @@to_tsquery('$term') OR\n            to_tsvector('english', extended) @@to_tsquery('$term')\n            )\";\n        } else {\n            $cond['find_part'] = \"(title ILIKE '%$term%' OR body ILIKE '%$term%' OR extended ILIKE '%$term%')\";\n        }\n    } elseif ($serendipity['dbType'] == 'sqlite' || $serendipity['dbType'] == 'sqlite3' || $serendipity['dbType'] == 'pdo-sqlite' || $serendipity['dbType'] == 'sqlite3oo') {\n        // Very extensive SQLite search. There currently seems no other way to perform fulltext search in SQLite\n        // But it's better than no search at all :-D\n        $term = str_replace('*', '%', $term);\n        $cond['group']     = 'GROUP BY e.id';\n        $cond['distinct']  = '';\n        $term              = serendipity_mb('strtolower', $term);\n        $cond['find_part'] = \"(lower(title) LIKE '%$term%' OR lower(body) LIKE '%$term%' OR lower(extended) LIKE '%$term%')\";\n    } else {\n        $cond['group']    = 'GROUP BY e.id';\n        $cond['distinct'] = '';\n        $term             = str_replace('&quot;', '\"', $term);\n        $relevance_enabled = true;\n        if (preg_match('@[\"\\+\\-\\*~<>\\(\\)]+@', $term)) {\n            $cond['find_part'] = \"MATCH(title,body,extended) AGAINST('$term' IN BOOLEAN MODE)\";\n        } else {\n            $cond['find_part'] = \"MATCH(title,body,extended) AGAINST('$term')\";\n        }\n    }\n\n    switch($serendipity['searchsort']) {\n        case 'relevance':\n            if ($relevance_enabled) {\n                $cond['searchorderby'] = $cond['find_part'] . \" DESC\";\n            } else {\n                $cond['searchorderby'] = \"timestamp DESC\";\n            }\n            break;\n\n        case 'timestamp':\n        default:\n            $cond['searchorderby'] = \"timestamp DESC\";\n            break;\n    }\n\n    $cond['and'] = \" AND isdraft = 'false' \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND timestamp <= \" . serendipity_db_time() : '');\n    serendipity_plugin_api::hook_event('frontend_fetchentries', $cond, array('source' => 'search', 'term' => $term));\n    serendipity_ACL_SQL($cond, 'limited');\n\n    $serendipity['fullCountQuery'] = \"\n                      FROM\n                            {$serendipity['dbPrefix']}entries e\n                 LEFT JOIN  {$serendipity['dbPrefix']}authors a\n                        ON  e.authorid = a.authorid\n                 LEFT JOIN  {$serendipity['dbPrefix']}entrycat ec\n                        ON  e.id = ec.entryid\n                            {$cond['joins']}\n                     WHERE\n                            ({$cond['find_part']})\n                            {$cond['and']}\";\n\n    $querystring = \"SELECT {$cond['distinct']}\n                            {$cond['addkey']}\n                            e.id,\n                            e.authorid,\n                            a.realname AS author,\n                            e.allow_comments,\n                            e.moderate_comments,\n                            a.email,\n                            e.timestamp,\n                            e.comments,\n                            e.title,\n                            e.body,\n                            e.extended,\n                            e.trackbacks,\n                            e.exflag,\n                            e.isdraft,\n                            e.last_modified,\n                            a.username AS loginname\n                    {$serendipity['fullCountQuery']}\n                    {$cond['group']}\n                    {$cond['having']}\n                  ORDER BY  {$cond['searchorderby']}\n                    $limit\";\n\n    $search =& serendipity_db_query($querystring);\n\n    //Add param searchresults at the top and remove duplicates.\n    if (is_array($searchresults)) {\n        $ids_current = array();\n        foreach($searchresults AS $idx => $data) {\n            $ids_current[$data['id']] = true;\n        }\n\n        foreach($search AS $idx => $data) {\n            if (isset($ids_current[$data['id']])) {\n                unset($search[$idx]);\n            }\n        }\n        $search = array_merge($searchresults, $search);\n    }\n    \n    //if * wasn't already appended and if there are none or not enough\n    //results, search again for entries containing the searchterm as a part\n    if (strpos($term, '*') === false && $serendipity['dbType'] != 'sqlite' && $serendipity['dbType'] != 'sqlite3' && $serendipity['dbType'] != 'pdo-sqlite' && $serendipity['dbType'] != 'sqlite3oo') {\n        if (! is_array($search)) {\n            return serendipity_searchEntries($term.'*', $orig_limit);\n        } else {\n            $ec = count($search);\n            $checkcount = 4;\n            if ($serendipity['fetchLimit'] < $checkcount) {\n                $checkcount = $serendipity['fetchLimit'];\n            }\n            if ($ec < $checkcount) {\n                return serendipity_searchEntries($term.'*', $orig_limit, $search);\n            }\n        }\n    }\n\n    if (is_array($search)){\n        serendipity_fetchEntryData($search);\n    }\n\n    return $search;\n}\n\n/**\n * Creates the Footer below the entries, with pagination options and parses it to Smarty\n *\n * The list of total entries is calculated from the serendipity_getTotelEntries() function\n *\n * @param string    suffix for URLs\n * @param int       Amount of total entries\n * @access public\n * @see serendipity_getTotalEntries()\n * @return null\n */\nfunction serendipity_printEntryFooter($suffix = '.html', $totalEntries = null) {\n    global $serendipity;\n\n    if ($totalEntries === null) {\n        $totalEntries = serendipity_getTotalEntries();\n    }\n\n    $limits = explode(',', $serendipity['fetchLimit']);\n    if (!empty($limits[1])) {\n        $limit = (int)$limits[1];\n    } else {\n        $limit = (int)$limits[0];\n    }\n    $totalPages = ceil($totalEntries / $limit);\n\n    if ($totalPages <= 0 ) {\n        $totalPages = 1;\n    }\n    \n    if (!isset($serendipity['GET']['page']) && serendipity_db_bool($serendipity['archiveSortStable']) && $serendipity['GET']['action'] != 'search') {\n        $serendipity['GET']['page'] = $totalPages;\n    } else if (!isset($serendipity['GET']['page'])) {\n        $serendipity['GET']['page'] = 1;\n    }\n\n    if ($serendipity['GET']['page'] > 1) {\n        $uriArguments = $serendipity['uriArguments'];\n        $uriArguments[] = 'P'. ($serendipity['GET']['page'] - 1);\n        $serendipity['smarty']->assign('footer_prev_page', serendipity_rewriteURL(str_replace('//', '/', implode('/', $uriArguments)) . $suffix));\n    }\n\n    $uriArguments = $serendipity['uriArguments'];\n    $uriArguments[] = 'P%s';\n    $serendipity['smarty']->assign('footer_totalEntries', $totalEntries);\n    $serendipity['smarty']->assign('footer_totalPages', $totalPages);\n    if (serendipity_db_bool($serendipity['archiveSortStable']) && $serendipity['GET']['action'] != 'search') {\n        $serendipity['smarty']->assign('footer_currentPage', $totalPages - $serendipity['GET']['page']);\n    } else {\n        $serendipity['smarty']->assign('footer_currentPage', $serendipity['GET']['page']);\n    }\n    $serendipity['smarty']->assign('footer_pageLink', str_replace('%2A', '*', serendipity_rewriteURL(implode('/', $uriArguments) . $suffix)));\n    $serendipity['smarty']->assign('footer_info', sprintf(PAGE_BROWSE_ENTRIES, serendipity_db_bool($serendipity['archiveSortStable']) && $serendipity['GET']['action'] != 'search' ?  $totalPages - (int)$serendipity['GET']['page'] +1 : (int)$serendipity['GET']['page'], $totalPages, $totalEntries));\n\n    if ($serendipity['GET']['page'] < $totalPages) {\n        $uriArguments = $serendipity['uriArguments'];\n        $uriArguments[] = 'P'. ($serendipity['GET']['page'] + 1);\n        $serendipity['smarty']->assign('footer_next_page', serendipity_rewriteURL(str_replace('//', '/', implode('/', $uriArguments)) . $suffix));\n    }\n\n    if (serendipity_db_bool($serendipity['archiveSortStable']) && $serendipity['GET']['action'] != 'search') {\n        $temp = $serendipity['smarty']->getTemplateVars('footer_prev_page');\n        $serendipity['smarty']->assign('footer_prev_page', $serendipity['smarty']->getTemplateVars('footer_next_page'));\n        $serendipity['smarty']->assign('footer_next_page', $temp);\n    }\n}\n\n/**\n * Calculates the amount of available entries.\n *\n * This function uses the SQL query portion of the central serendipity_fetchEntries() query\n * and modifies it with different GROUP statements to calculate the number of entries.\n *\n * @access public\n * @see serendipity_fetchEntries()\n * @return int      The number of total entries\n */\nfunction serendipity_getTotalEntries() {\n    global $serendipity;\n\n    // The unique query condition was built previously in serendipity_fetchEntries()\n    if ($serendipity['dbType'] == 'sqlite' || $serendipity['dbType'] == 'sqlite3' || $serendipity['dbType'] == 'pdo-sqlite' || $serendipity['dbType'] == 'sqlite3oo') {\n        $querystring  = \"SELECT count(e.id) {$serendipity['fullCountQuery']} GROUP BY e.id\";\n    } else {\n        $querystring  = \"SELECT count(distinct e.id) {$serendipity['fullCountQuery']}\";\n    }\n\n    $query =& serendipity_db_query($querystring);\n\n    if (is_array($query) && isset($query[0])) {\n        if ($serendipity['dbType'] == 'sqlite' || $serendipity['dbType'] == 'sqlite3' || $serendipity['dbType'] == 'pdo-sqlite' || $serendipity['dbType'] == 'sqlite3oo') {\n            return count($query);\n        } else {\n            return $query[0][0];\n        }\n    }\n\n    return 0;\n}\n\n/**\n * Passes the list of fetched entries from serendipity_fetchEntries() on to the Smarty layer\n *\n * This function contains all the core logic to group and prepare entries to be shown in your\n * $entries.tpl template. It groups them by date, so that you can easily loop on the set of\n * entries.\n * This function is not only used for printing all entries, but also for printing individual\n * entries.\n * Several central Event hooks are executed here for the whole page flow, like header+footer data.\n *\n * @see serendipity_fetchEntries()\n * @see serendipity_searchEntries()\n * @access public\n * @param   array       The array of entries with all of its data\n * @param   boolean     Toggle whether the extended portion of an entry is requested (via $serendipity['GET']['id'] single entry view)\n * @param   boolean     Indicates if this is a preview\n * @param   string      The name of the SMARTY block that this gets parsed into\n * @param   boolean     Indicates whether the assigned smarty variables should be parsed. When set to \"return\", no smarty parsing is done.\n * @param   boolean     Indicates whether to apply footer/header event hooks\n * @param   boolean     Indicates whether the pagination footer should be displayed\n * @param   mixed       Indicates whether the input $entries array is already grouped in preparation for the smarty $entries output array [TRUE], or if it shall be grouped by date [FALSE] or if a plugin hook shall be executed to modify data ['plugin']. This setting can also be superseded by a 'entry_display' hook.\n * @return\n */\nfunction serendipity_printEntries($entries, $extended = 0, $preview = false, $smarty_block = 'ENTRIES', $smarty_fetch = true, $use_hooks = true, $use_footer = true, $use_grouped_array = false) {\n    global $serendipity;\n\n    if (!is_object($serendipity['smarty'])) {\n        serendipity_smarty_init(); // if not set, start Smarty templating to avoid member function \"method()\" on a non-object errors (was draft preview error, now at line 1239)\n    }\n\n    if ($use_hooks) {\n        $addData = array('extended' => $extended, 'preview' => $preview);\n        serendipity_plugin_api::hook_event('entry_display', $entries, $addData);\n\n        if (isset($entries['clean_page']) && $entries['clean_page'] === true) {\n            if ($serendipity['view'] == '404') {\n                $serendipity['view'] = 'plugin';\n            }\n\n            $serendipity['smarty']->assign(array(\n                'plugin_clean_page' => true,\n                'view'              => $serendipity['view'])\n            );\n            serendipity_smarty_fetch($smarty_block, 'entries.tpl', true);\n            return; // no display of this item\n        }\n    }\n\n    // We shouldn't return here, because we want Smarty to handle the output\n    if (!is_array($entries) || $entries[0] == false || !isset($entries[0]['timestamp'])) {\n        $entries = array();\n    }\n\n    // A plugin executed in entry_display should be able to change the way of ordering entries. Forward-Thinking. ;)\n    if (isset($entries['use_grouped_array'])) {\n        $use_grouped_array = $entries['use_grouped_array'];\n    }\n\n    if ($use_grouped_array === false) {\n        // Use grouping by date (default)\n        $dategroup = array();\n        for ($x = 0, $num_entries = count($entries); $x < $num_entries; $x++) {\n            if (!empty($entries[$x]['properties']['ep_is_sticky']) && serendipity_db_bool($entries[$x]['properties']['ep_is_sticky'])) {\n                $entries[$x]['is_sticky'] = true;\n                $key = 'sticky';\n            } else {\n                $key = date('Ymd', serendipity_serverOffsetHour($entries[$x]['timestamp']));\n            }\n\n            $dategroup[$key]['date']        = $entries[$x]['timestamp'];\n            $dategroup[$key]['is_sticky']   = (isset($entries[$x]['is_sticky']) && (serendipity_db_bool($entries[$x]['is_sticky']) ? true : false));\n            $dategroup[$key]['entries'][]   = &$entries[$x];\n        }\n    } elseif ($use_grouped_array === 'plugin') {\n        // Let a plugin do the grouping\n        serendipity_plugin_api::hook_event('entry_groupdata', $entries);\n        $dategroup =& $entries;\n    } else {\n        $dategroup =& $entries;\n    }\n\n    foreach($dategroup as $dategroup_idx => $properties) {\n        foreach($properties['entries'] as $x => $_entry) {\n            if ($smarty_fetch === 'return') {\n                $entry = &$dategroup[$dategroup_idx]['entries'][$x]; // PHP4 Compat\n            } else {\n                // DISABLED - made problems with custom plugins\n                // $entry = &$properties['entries'][$x]; // PHP4 Compat\n                $entry = &$dategroup[$dategroup_idx]['entries'][$x]; // PHP4 Compat\n            }\n\n            if (!empty($entry['properties']['ep_cache_body'])) {\n                $entry['pre_body']  = $entry['body'];\n                $entry['body']      = &$entry['properties']['ep_cache_body'];\n                $entry['is_cached'] = true;\n            }\n\n            //--JAM: Highlight-span search terms\n            if ($serendipity['action'] == 'search') {\n                $searchterms = str_replace('\"', '', $serendipity['GET']['searchterms']);\n                $searchterms = explode($searchterms, ' ');\n                foreach($searchterms as $searchdx => $searchterm) {\n                    $searchclass = \"foundterm foundterm\".$searchdx;\n                    $entry['body'] = str_replace($searchterm, '<span class=\"'.$searchclass.'\">' . $searchterm . '</span>', $entry['body']);\n                }\n            }\n\n            if (!empty($entry['properties']['ep_cache_extended'])) {\n                $entry['pre_extended']  = $entry['extended'];\n                $entry['extended']  = &$entry['properties']['ep_cache_extended'];\n                $entry['is_cached'] = true;\n            }\n\n            if ($preview) {\n                $entry['author']   = $entry['realname'];\n                $entry['authorid'] = $serendipity['authorid'];\n            }\n\n            $addData = array('from' => 'functions_entries:printEntries');\n            if ($entry['is_cached']) {\n                $addData['no_scramble'] = true;\n            }\n            serendipity_plugin_api::hook_event('frontend_display', $entry, $addData);\n\n            if ($preview) {\n                $entry['author']   = $entry['realname'];\n                $entry['authorid'] = $serendipity['authorid'];\n            }\n\n            $entry['author'] = serendipity_specialchars($entry['author']);\n\n            $authorData = array(\n                            'authorid' => $entry['authorid'],\n                            'username' => $entry['loginname'],\n                            'email'    => $entry['email'],\n                            'realname' => $entry['author']\n            );\n\n            $entry['link']       = serendipity_archiveURL($entry['id'], $entry['title'], 'serendipityHTTPPath', true, array('timestamp' => $entry['timestamp']));\n            $entry['commURL']    = serendipity_archiveURL($entry['id'], $entry['title'], 'baseURL', false, array('timestamp' => $entry['timestamp']));\n            $entry['html_title'] = $entry['title'];\n            $entry['title']      = serendipity_specialchars($entry['title']);\n\n            $entry['title_rdf']  = preg_replace('@-{2,}@', '-', $entry['html_title']);\n            $entry['rdf_ident']  = serendipity_archiveURL($entry['id'], $entry['title_rdf'], 'baseURL', true, array('timestamp' => $entry['timestamp']));\n            $entry['link_rdf']   = serendipity_rewriteURL(PATH_FEEDS . '/ei_'. $entry['id'] .'.rdf');\n            $entry['title_rdf']  = serendipity_specialchars($entry['title_rdf']);\n\n            $entry['link_allow_comments']    = $serendipity['baseURL'] . 'comment.php?serendipity[switch]=enable&amp;serendipity[entry]=' . $entry['id'];\n            $entry['link_deny_comments']     = $serendipity['baseURL'] . 'comment.php?serendipity[switch]=disable&amp;serendipity[entry]=' . $entry['id'];\n            $entry['allow_comments']         = serendipity_db_bool($entry['allow_comments']);\n            $entry['moderate_comments']      = serendipity_db_bool($entry['moderate_comments']);\n            $entry['viewmode']               = ($serendipity['GET']['cview'] == VIEWMODE_LINEAR ? VIEWMODE_LINEAR : VIEWMODE_THREADED);\n            $entry['link_popup_comments']    = $serendipity['serendipityHTTPPath'] .'comment.php?serendipity[entry_id]='. $entry['id'] .'&amp;serendipity[type]=comments';\n            $entry['link_popup_trackbacks']  = $serendipity['serendipityHTTPPath'] .'comment.php?serendipity[entry_id]='. $entry['id'] .'&amp;serendipity[type]=trackbacks';\n            $entry['link_edit']              = $serendipity['baseURL'] .'serendipity_admin.php?serendipity[action]=admin&amp;serendipity[adminModule]=entries&amp;serendipity[adminAction]=edit&amp;serendipity[id]='. $entry['id'];\n            $entry['link_trackback']         = $serendipity['baseURL'] .'comment.php?type=trackback&amp;entry_id='. $entry['id'];\n            $entry['link_viewmode_threaded'] = $serendipity['serendipityHTTPPath'] . $serendipity['indexFile'] .'?url='. $entry['commURL'] .'&amp;serendipity[cview]='. VIEWMODE_THREADED;\n            $entry['link_viewmode_linear']   = $serendipity['serendipityHTTPPath'] . $serendipity['indexFile'] .'?url='. $entry['commURL'] .'&amp;serendipity[cview]='. VIEWMODE_LINEAR;\n            $entry['link_author']            = serendipity_authorURL($authorData);\n\n            if (is_array($entry['categories'])) {\n                foreach ($entry['categories'] as $k => $v) {\n                    if (!isset($entry['categories'][$k]['category_link'])) {\n                        $entry['categories'][$k]['category_link'] =  serendipity_categoryURL($entry['categories'][$k]);\n                    }\n                }\n            }\n\n            if (strlen($entry['extended'])) {\n                $entry['has_extended']      = true;\n            }\n\n            if (isset($entry['exflag']) && $entry['exflag'] && ($extended || $preview)) {\n                $entry['is_extended']       = true;\n            }\n\n            if (serendipity_db_bool($entry['allow_comments']) || !isset($entry['allow_comments']) || $entry['comments'] > 0) {\n                $entry['has_comments']      = true;\n                $entry['label_comments']    = $entry['comments'] == 1 ? COMMENT : COMMENTS;\n            }\n\n            if (serendipity_db_bool($entry['allow_comments']) || !isset($entry['allow_comments']) || $entry['trackbacks'] > 0) {\n                $entry['has_trackbacks']    = true;\n                $entry['label_trackbacks']  = $entry['trackbacks'] == 1 ? TRACKBACK : TRACKBACKS;\n            }\n\n            if ($_SESSION['serendipityAuthedUser'] === true && ($_SESSION['serendipityAuthorid'] == $entry['authorid'] || serendipity_checkPermission('adminEntriesMaintainOthers'))) {\n                $entry['is_entry_owner']    = true;\n            }\n\n            $entry['display_dat'] = '';\n            serendipity_plugin_api::hook_event('frontend_display:html:per_entry', $entry);\n            $entry['plugin_display_dat'] =& $entry['display_dat'];\n\n            if ($preview) {\n                ob_start();\n                serendipity_plugin_api::hook_event('backend_preview', $entry);\n                $entry['backend_preview'] = ob_get_contents();\n                ob_end_clean();\n            }\n\n            /* IF WE ARE DISPLAYING A FULL ENTRY */\n            if (isset($serendipity['GET']['id'])) {\n                $comment_add_data = array(\n                    'comments_messagestack' => (isset($serendipity['messagestack']['comments']) ? (array)$serendipity['messagestack']['comments'] : array()),\n                    'is_comment_added'      => (isset($serendipity['GET']['csuccess']) && $serendipity['GET']['csuccess'] == 'true' ? true: false),\n                    'is_comment_moderate'   => (isset($serendipity['GET']['csuccess']) && $serendipity['GET']['csuccess'] == 'moderate' ? true: false)\n                );\n\n                if ($serendipity['serendipityAuthedUser'] === true) {\n                    $userData = array();\n                    $userData['name'] = $serendipity['realname'];\n                    $userData['email'] = $serendipity['email'];\n                    $userData['url'] = '';\n                } else {\n                    $userData = $serendipity['POST'];\n                }\n\n                $serendipity['smarty']->assign($comment_add_data);\n                serendipity_displayCommentForm(\n                    $entry['id'],\n                    $serendipity['serendipityHTTPPath'] . $serendipity['indexFile'] . '?url=' . $entry['commURL'],\n                    true,\n                    $userData,\n                    true,\n                    serendipity_db_bool($entry['moderate_comments']),\n                    $entry\n                );\n            } // END FULL ENTRY LOGIC\n        } // end foreach-loop (entries)\n    } // end foreach-loop (dates)\n\n    if (!isset($serendipity['GET']['id']) &&\n            (!isset($serendipity['hidefooter']) || $serendipity['hidefooter'] == false) &&\n            ($num_entries <= $serendipity['fetchLimit']) &&\n            $use_footer) {\n        serendipity_printEntryFooter();\n    }\n\n    if ($smarty_fetch === 'return') {\n        return $dategroup;\n    }\n\n    $serendipity['smarty']->assignByRef('entries', $dategroup);\n\n    if ($serendipity['useInternalCache']) {\n        $cache = serendipity_setupCache();\n\n        $args = func_get_args();\n        $args = array_values($args);\n        $key = md5(serialize($args));\n        $cache->save(serialize($dategroup), $key, \"printEntries\");\n    }\n    \n    unset($entries, $dategroup);\n\n    $serendipity['smarty']->assign(array(\n        'is_preview' => $preview\n    ));\n\n    if (isset($serendipity['short_archives']) && $serendipity['short_archives']) {\n        return serendipity_smarty_fetch($smarty_block, 'entries_summary.tpl', true);\n    } elseif ($smarty_fetch == true) {\n        return serendipity_smarty_fetch($smarty_block, 'entries.tpl', true, $preview);\n    }\n\n} // end function serendipity_printEntries\n\nfunction serendipity_printEntriesCached($entries, $extended = 0, $preview = false, $smarty_block = 'ENTRIES', $smarty_fetch = true, $use_hooks = true, $use_footer = true, $use_grouped_array = false) {\n    global $serendipity;\n\n    $cache = serendipity_setupCache();\n\n    $args = func_get_args();\n    $args = array_values($args);\n    $key = md5(serialize($args));\n\n    if (($dategroup = $cache->get($key, \"printEntries\")) !== false) {\n        $dategroup = unserialize($dategroup);\n        $serendipity['smarty']->assign('entries', $dategroup);\n\n        # now let plugins do their magic and hope they don't do it twice\n        foreach($dategroup as $dategroup_idx => $properties) {\n            foreach($properties['entries'] as $x => $_entry) {\n                $addData = array('from' => 'functions_entries:printEntries');\n                if ($entry['is_cached']) {\n                    $addData['no_scramble'] = true;\n                }\n                serendipity_plugin_api::hook_event('frontend_display', $entry, $addData);\n\n                $entry['display_dat'] = '';\n                serendipity_plugin_api::hook_event('frontend_display:html:per_entry', $entry);\n                $entry['plugin_display_dat'] =& $entry['display_dat'];\n            }\n        }\n\n       \n        if (isset($serendipity['short_archives']) && $serendipity['short_archives']) {\n            serendipity_smarty_fetch($smarty_block, 'entries_summary.tpl', true);\n        } elseif ($smarty_fetch == true) {\n            serendipity_smarty_fetch($smarty_block, 'entries.tpl', true);\n        }\n        return true;\n    } else {\n        return false;\n    }   \n}\n\nfunction serendipity_cleanCache() {\n    include_once 'Cache/Lite.php';\n\n    if (!class_exists('Cache_Lite')) {\n        return false;\n    }\n\n    $options = array(\n        'cacheDir' => $serendipity['serendipityPath'] . 'templates_c/',\n        'lifeTime' => 3600,\n        'hashedDirectoryLevel' => 2\n    );\n    $cache = new Cache_Lite($options);\n    $successFetch = $cache->clean(\"fetchEntries\");\n    $successPrint = $cache->clean(\"printEntries\");\n    return $successFetch && $successPrint;\n    \n}\n\nfunction serendipity_setupCache() {\n    include_once 'Cache/Lite.php';\n\n    if (!class_exists('Cache_Lite')) {\n        return false;\n    }\n\n    $options = array(\n        'cacheDir' => $serendipity['serendipityPath'] . 'templates_c/',\n        'lifeTime' => 3600,\n        'hashedDirectoryLevel' => 2\n    );\n\n    return new Cache_Lite($options);\n}\n\n\n/**\n * Deprecated: Delete some garbage when an entry was deleted, especially static pages\n *\n * @deprecated\n * @access public\n * @param   int     The deleted entry ID\n * @param   int     A timestamp for the entry archive page\n * @return null\n */\nfunction serendipity_purgeEntry($id, $timestamp = null) {\n    global $serendipity;\n\n    // If pregenerate is not set, short circuit all this logic\n    // and remove nothing.\n    if(!isset($serendipity['pregenerate'])) {\n        return;\n    }\n\n    if (isset($timestamp)) {\n        $dated = date('Ymd', serendipity_serverOffsetHour($timestamp));\n        $datem = date('Ym',  serendipity_serverOffsetHour($timestamp));\n\n        @unlink(\"{$serendipity['serendipityPath']}/\".PATH_ARCHIVES.\"/{$dated}.html\");\n        @unlink(\"{$serendipity['serendipityPath']}/\".PATH_ARCHIVES.\"/{$datem}.html\");\n    }\n\n    // Fixme (the _* part) !\n    @unlink(\"{$serendipity['serendipityPath']}/\".PATH_ARCHIVES.\"/{$id}_*.html\");\n    @unlink(\"{$serendipity['serendipityPath']}/\".PATH_FEEDS.\"/index.rss\");\n    @unlink(\"{$serendipity['serendipityPath']}/\".PATH_FEEDS.\"/index.rss2\");\n    @unlink(\"{$serendipity['serendipityPath']}/index.html\");\n}\n\n/**\n * Inserts a new entry into the database or updates an existing entry\n *\n * Another central function, that parses, prepares and commits changes to an entry\n *\n * @access public\n * @param   array       The new/modified entry data.\n * @return  mixed       Integer with new entry ID if successfull, a string or array if error(s).\n */\nfunction serendipity_updertEntry($entry) {\n    global $serendipity;\n\n    include_once S9Y_INCLUDE_PATH . 'include/functions_entries_admin.inc.php';\n\n    $errors = array();\n    serendipity_plugin_api::hook_event('backend_entry_updertEntry', $errors, $entry);\n    if (count($errors) > 0) {\n        // Return error message(s)\n        return implode(\"\\n\", $errors);\n    }\n\n    serendipity_plugin_api::hook_event('backend_entry_presave', $entry);\n\n    $categories = $entry['categories'];\n    unset($entry['categories']);\n\n    $had_categories = $entry['had_categories'];\n    unset($entry['had_categories']);\n\n    $newEntry = 0;\n    $exflag = 0;\n\n    if (isset($entry['properties'])) {\n        unset($entry['properties']);\n    }\n\n    if (!is_numeric($entry['timestamp'])) {\n        $entry['timestamp'] = time();\n    }\n\n    /* WYSIWYG-editor inserts empty ' ' for extended body; this is reversed here */\n    if (isset($entry['extended']) && (trim($entry['extended']) == '' || trim($entry['extended']) == '<br />' || trim($entry['extended']) == '<p></p>' || str_replace(array(\"\\r\", \"\\n\", \"\\t\", \"\\0\", \"<br />\", \"<p>\", \"</p>\", \"<br>\"), array('', '', '', '', '', '', '', ''), trim($entry['extended'])) == '')) {\n        $entry['extended'] = '';\n    }\n\n    if (strlen($entry['extended'])) {\n        $exflag = 1;\n    }\n\n    $entry['exflag']   = $exflag;\n\n    if (!is_numeric($entry['id'])) {\n        /* we need to insert */\n\n        unset($entry['id']);\n        $entry['comments'] = 0;\n\n        if (!isset($entry['last_modified']) || !is_numeric($entry['last_modified'])) {\n            $entry['last_modified'] = $entry['timestamp'];\n        }\n\n        // New entries need an author\n        $entry['author'] = $serendipity['user'];\n        if (!isset($entry['authorid']) || empty($entry['authorid'])) {\n            $entry['authorid'] = $serendipity['authorid'];\n        }\n\n        if (!$_SESSION['serendipityRightPublish']) {\n            $entry['isdraft'] = 'true';\n        }\n\n        if (!isset($entry['allow_comments'])) {\n            $entry['allow_comments'] = 'false';\n        }\n        if (!isset($entry['moderate_comments'])) {\n            $entry['moderate_comments'] = 'false';\n        }\n\n        $res = serendipity_db_insert('entries', $entry);\n\n        if ($res) {\n            $entry['id'] = $serendipity['lastSavedEntry'] = serendipity_db_insert_id('entries', 'id');\n            if (is_array($categories)) {\n                foreach ($categories as $cat) {\n                    if (is_numeric($cat)) {\n                        serendipity_db_query(\"INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, {$cat})\");\n                    } elseif (is_array($cat) && !empty($cat['categoryid'])) {\n                        serendipity_db_query(\"INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, \" . (int)$cat['categoryid'] . \")\");\n                    }\n                }\n            }\n\n            serendipity_insertPermalink($entry);\n        } else {\n            //Some error message here\n            return ENTRIES_NOT_SUCCESSFULLY_INSERTED;\n        }\n        $newEntry = 1;\n\n    } else {\n        /* we need to update */\n\n        // Get settings from entry if already in DB, which should not be alterable with POST methods\n        $_entry            = serendipity_fetchEntry('id', $entry['id'], 1, 1);\n        $entry['authorid'] = $_entry['authorid'];\n\n        if (isset($serendipity['GET']['adminModule']) && $serendipity['GET']['adminModule'] == 'entries' && $entry['authorid'] != $serendipity['authorid'] && !serendipity_checkPermission('adminEntriesMaintainOthers')) {\n            // Only chiefs and admins can change other's entry. Else update fails.\n            return;\n        }\n\n        if (!$_SESSION['serendipityRightPublish']) {\n            $entry['isdraft'] = 'true';\n        }\n\n        if (is_array($categories)) {\n            serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entrycat WHERE entryid={$entry['id']}\");\n            foreach ($categories as $cat) {\n                serendipity_db_query(\"INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, {$cat})\");\n            }\n        } elseif ($had_categories) {\n            // This case actually only happens if an existing entry is edited, and its category assignments are all removed.\n            // This field is set as a HIDDEN input field in the admin/entries.tpl template.\n            // This is more of a hotfix. In the future it should be thoroughly checked whether calls to serendipity_updertEntry()\n            // really always carry through existing categories. We do not want to accidentally remove category assignments,\n            // just because a plugin or so passes an incomplete $entry structure to this function.\n            serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entrycat WHERE entryid={$entry['id']}\");\n        }\n\n        if ($entry['isdraft'] === 0) {\n            $entry['isdraft'] = 'false'; // this needs to be set as string, which might be missing when being published from the dashboard\n\n            foreach (array('title', 'body', 'extended', 'author') as $required_field) {\n                // dashboard publishing a draft does not pass title, body, extended, and author, so we need to set it here\n                if (!isset($entry[$required_field])) {\n                    $entry[$required_field] = $_entry[$required_field];\n                }\n            }\n        }\n\n        $entry['last_modified'] = time();\n\n        $res = serendipity_db_update('entries', array('id' => $entry['id']), $entry);\n        $newEntry = 0;\n        serendipity_updatePermalink($entry);\n    }\n\n    if (is_string($res)) {\n        return $res;\n    }\n\n    // Reset session data, so that a reload to this frame should not happen!\n    $_SESSION['save_entry']['id'] = (int)$entry['id'];\n\n    if (!serendipity_db_bool($entry['isdraft'])) {\n        serendipity_plugin_api::hook_event('frontend_display', $entry, array('no_scramble' => true, 'from' => 'functions_entries:updertEntry'));\n        $drafted_entry = $entry;\n    }\n\n    serendipity_purgeEntry($entry['id'], $entry['timestamp']);\n\n    if (!serendipity_db_bool($entry['isdraft']) && $entry['timestamp'] <= serendipity_serverOffsetHour()) {\n        // When saving an entry, first all references need to be gathered. But trackbacks to them\n        // shall only be send at the end of the execution flow. However, certain plugins depend on\n        // the existance of handled references. Thus we store the current references at this point,\n        // execute the plugins and then reset the found references to the original state.\n        serendipity_handle_references($entry['id'], $serendipity['blogTitle'], $drafted_entry['title'], $drafted_entry['body'] . $drafted_entry['extended'], true);\n    }\n\n    // Send publish tags if either a new article has been inserted from scratch, or if the entry was previously\n    // stored as draft and is now published\n    $entry['categories'] =& $categories;\n    if (!serendipity_db_bool($entry['isdraft']) && ($newEntry || serendipity_db_bool($_entry['isdraft']))) {\n        serendipity_plugin_api::hook_event('backend_publish', $entry, $newEntry);\n    } else {\n        serendipity_plugin_api::hook_event('backend_save', $entry, $newEntry);\n    }\n\n    if (!serendipity_db_bool($entry['isdraft']) && $entry['timestamp'] <= serendipity_serverOffsetHour()) {\n        // Now that plugins are executed, we go ahead into the Temple of Doom and send possibly failing trackbacks.\n        // First, original list of references is restored (inside the function call)\n        serendipity_handle_references($entry['id'], $serendipity['blogTitle'], $drafted_entry['title'], $drafted_entry['body'] . $drafted_entry['extended'], false);\n    }\n\n    serendipity_cleanCache();\n    return (int)$entry['id'];\n}\n\n/**\n * Delete an entry and everything that belongs to it (comments)\n *\n * @access public\n * @param   int     The Entry ID to delete\n * @return  mixed   FALSE or NULL on error\n */\nfunction serendipity_deleteEntry($id) {\n    global $serendipity;\n\n    if (!is_numeric($id)) {\n        return false;\n    }\n\n    // Purge the daily/monthly entries so they can be rebuilt\n    $result = serendipity_db_query(\"SELECT timestamp, authorid FROM {$serendipity['dbPrefix']}entries WHERE id = '\". (int)$id .\"'\", true);\n\n    if ($result[1] != $serendipity['authorid'] && !serendipity_checkPermission('adminEntriesMaintainOthers')) {\n        // Only admins and chief users can delete entries which do not belong to the author\n        return;\n    }\n\n    serendipity_purgeEntry($id, $result[0]);\n\n    serendipity_plugin_api::hook_event('backend_delete_entry', $id);\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entries WHERE id=$id\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entrycat WHERE entryid=$id\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entryproperties WHERE entryid=$id\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}comments WHERE entry_id=$id\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}references WHERE entry_id='$id' AND type = ''\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}permalinks WHERE entry_id='$id'\");\n    serendipity_cleanCache();\n}\n\n/**\n* Return HTML containing a list of categories\n*\n* Prints a list of categories for use in forms, the sidebar, or whereever...\n*\n* @access public\n* @param array  An array of categories, typically gathered by serendipity_fetchCategories()\n* @param array  An array which holds IDs which are meant to be selected within a HTML SELECT form field [used for recursion]\n* @param int    The type of category list (0: HTML span list, 1/2: <option>s, 3: HTML Div list, 4: CSV data) to return\n* @param int    The parent ID of a category [for recursion]\n* @param int    The current nesting level [for recursion]\n* @param string Tells the function, whether or not to display the XML button for each category.\n*               If empty, no links to the xml feeds will be displayed; If you want to, you can\n*               pass an image here (this setting is only used, when type==3).\n* @param string The character to use for blank indenting\n* @see serendipity_fetchCategories()\n*/\nfunction serendipity_generateCategoryList($cats, $select = array(0), $type = 0, $id = 0, $level = 0, $xmlImg = '', $blank_char = ' ') {\n    global $serendipity;\n\n    if ( !is_array($cats) || !count($cats) )\n        return;\n\n    $ret = '';\n    foreach ($cats as $cat) {\n        if ($cat['parentid'] == $id) {\n            switch ($type) {\n                case 0:\n                    $ret .= str_repeat('&nbsp;', $level * 2).'&bull;&nbsp;<span class=\"block_level\" id=\"catItem_' . $cat['categoryid'] . '\"' . (($cat['categoryid'] && in_array($cat['categoryid'], $select)) ? ' selected=\"selected\"' : '') . '><a href=\"?serendipity[adminModule]=category&amp;serendipity[cat][catid]=' . $cat['categoryid'] . '\">' . (!empty($cat['category_icon']) ? '<img style=\"vertical-align: middle;\" src=\"' . $cat['category_icon'] . '\" border=\"0\" alt=\"' . $cat['category_name'] . '\"/> ' : '') . serendipity_specialchars($cat['category_name']) . (!empty($cat['category_description']) ? ' - ' . serendipity_specialchars($cat['category_description']) : '') . '</a></span>';\n                    break;\n                case 1:\n                case 2:\n                   $ret .= '<option value=\"' . $cat['categoryid'] . '\"' . (($cat['categoryid'] && in_array($cat['categoryid'], $select)) ? ' selected=\"selected\"' : '') . '>';\n                   $ret .= str_repeat('&nbsp;', $level * 2) . serendipity_specialchars($cat['category_name']) . ($type == 1 && !empty($cat['category_description']) ? (' - ' . serendipity_specialchars($cat['category_description'])) : '');\n                   $ret .= '</option>';\n                   break;\n                case 3:\n                    $category_id = serendipity_makeFilename($cat['category_name']);\n                    if (!empty($xmlImg)) {\n                        $ret .= sprintf(\n                          '<div style=\"padding-bottom: 2px;\">' .\n                          '<a href=\"%s\" title=\"%s\"><img alt=\"xml\" src=\"%s\" style=\"vertical-align: bottom; display: inline; border: 0px\" /></a>&#160;%s' .\n                          '<a href=\"%s\" title=\"%s\">%s</a>' .\n                          '</div>',\n                          $serendipity['serendipityHTTPPath'] . 'rss.php?category=' . $cat['categoryid'] . '_' . $category_id,\n                          serendipity_specialchars($cat['category_description']),\n                          $xmlImg,\n                          str_repeat('&#160;', $level * 3),\n                          serendipity_categoryURL($cat, 'serendipityHTTPPath'),\n                          serendipity_specialchars($cat['category_description']),\n                          serendipity_specialchars($cat['category_name']));\n                    } else {\n                        $ret .= sprintf(\n                          '<span class=\"block_level\">%s<a href=\"%s\" title=\"%s\">%s</a></span>',\n                          str_repeat('&#160;', $level * 3),\n                          serendipity_categoryURL($cat, 'serendipityHTTPPath'),\n                          serendipity_specialchars($cat['category_description']),\n                          serendipity_specialchars($cat['category_name']));\n                    }\n                    break;\n                case 4:\n                    $ret .= $cat['categoryid'] . '|||' . str_repeat($blank_char, $level * 2) . $cat['category_name'] . '@@@';\n                    break;\n            }\n            $ret .= serendipity_generateCategoryList($cats, $select, $type, $cat['categoryid'], $level + 1, $xmlImg, $blank_char);\n        }\n    }\n    return $ret;\n}\n\n/**\n * Set category associations of a specific entry\n *\n * @access public\n * @param   int     The ID of the entry\n * @param   array   An array of category IDs that this entry is associated to.\n * @return null\n */\nfunction serendipity_updateEntryCategories($postid, $categories) {\n    global $serendipity;\n\n    if (!$postid || !$categories) {\n        return;\n    }\n\n    $query = \"DELETE FROM $serendipity[dbPrefix]entrycat WHERE entryid = \" . (int)$postid;\n    serendipity_db_query($query);\n\n    if (!is_array($categories)) {\n        $categories = array(0 => $categories);\n    }\n\n    foreach($categories AS $idx => $cat) {\n        $query = \"INSERT INTO $serendipity[dbPrefix]entrycat (categoryid, entryid) VALUES (\" . (int)$cat . \", \" . (int)$postid . \")\";\n        serendipity_db_query($query);\n    }\n    serendipity_cleanCache();\n}\n\n/**\n * Gather an archive listing of older entries and passes it to Smarty\n *\n * The archives are created according to the current timestamp and show the current year.\n * $serendipity['GET']['category'] is honoured like in serendipity_fetchEntries()\n * $serendipity['GET']['viewAuthor'] is honoured like in serendipity_fetchEntries()\n *\n * @access public\n * @return null\n */\nfunction serendipity_printArchives() {\n    global $serendipity;\n\n    $f = serendipity_db_query(\"SELECT timestamp FROM {$serendipity['dbPrefix']}entries ORDER BY timestamp ASC LIMIT 1\");\n    switch($serendipity['calendar']) {\n        case 'gregorian':\n        default:\n            $lastYear   = date('Y', serendipity_serverOffsetHour($f[0][0]));\n            $lastMonth  = date('m', serendipity_serverOffsetHour($f[0][0]));\n            $thisYear   = date('Y', serendipity_serverOffsetHour());\n            $thisMonth  = date('m', serendipity_serverOffsetHour());\n            break;\n        case 'persian-utf8':\n            require_once S9Y_INCLUDE_PATH . 'include/functions_calendars.inc.php';\n            $lastYear   = persian_date_utf('Y', serendipity_serverOffsetHour($f[0][0]));\n            $lastMonth  = persian_date_utf('m', serendipity_serverOffsetHour($f[0][0]));\n            $thisYear   = persian_date_utf('Y', serendipity_serverOffsetHour());\n            $thisMonth  = persian_date_utf('m', serendipity_serverOffsetHour());\n            break;\n    }\n    $max = 1;\n\n    if (isset($serendipity['GET']['category'])) {\n        $cat_sql = serendipity_getMultiCategoriesSQL($serendipity['GET']['category']);\n        $cat_get = '/C' . (int)$serendipity['GET']['category'];\n    } else {\n        $cat_sql = '';\n        $cat_get = '';\n    }\n\n    if (isset($serendipity['GET']['viewAuthor'])) {\n        $author_get = '/A' . (int)$serendipity['GET']['viewAuthor'];\n    } else {\n        $author_get = '';\n    }\n\n    if ($serendipity['dbType'] == 'postgres' ||\n        $serendipity['dbType'] == 'pdo-postgres') {\n        $distinct = 'DISTINCT e.id,';\n    } else {\n        $distinct = '';\n    }\n\n    $q = \"SELECT $distinct e.timestamp\n            FROM {$serendipity['dbPrefix']}entries e\n            \" . (!empty($cat_sql) ? \"\n       LEFT JOIN {$serendipity['dbPrefix']}entrycat ec\n              ON e.id = ec.entryid\n       LEFT JOIN {$serendipity['dbPrefix']}category c\n              ON ec.categoryid = c.categoryid\" : \"\") . \"\n           WHERE isdraft = 'false'\"\n                . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND timestamp <= \" . serendipity_db_time() : '')\n                . (!empty($cat_sql) ? ' AND ' . $cat_sql : '')\n                . (!empty($serendipity['GET']['viewAuthor']) ? ' AND e.authorid = ' . (int)$serendipity['GET']['viewAuthor'] : '')\n                . (!empty($cat_sql) ? \" GROUP BY e.id, e.timestamp\" : '');\n    $entries =& serendipity_db_query($q, false, 'assoc');\n\n    $group = array();\n    if (is_array($entries)) {\n        foreach($entries AS $entry) {\n            $group[date('Ym', $entry['timestamp'])]++;\n        }\n    }\n\n    $output = array();\n    for ($y = $thisYear; $y >= $lastYear; $y--) {\n        $output[$y]['year'] = $y;\n        for ($m = 12; $m >= 1; $m--) {\n\n            /* If the month we are checking are in the future, we drop it */\n            if ($m > $thisMonth && $y == $thisYear) {\n                continue;\n            }\n\n            /* If the month is lower than the lowest month containing entries, we're done */\n            if ($m < $lastMonth && $y <= $lastYear) {\n                break;\n            }\n\n            switch($serendipity['calendar']) {\n                case 'gregorian':\n                default:\n                    $s = serendipity_serverOffsetHour(mktime(0, 0, 0, $m, 1, $y), true);\n                    $e = serendipity_serverOffsetHour(mktime(23, 59, 59, $m, date('t', $s), $y), true);\n                    break;\n                case 'persian-utf8':\n                    require_once S9Y_INCLUDE_PATH . 'include/functions_calendars.inc.php';\n                    $s = serendipity_serverOffsetHour(persian_mktime(0, 0, 0, $m, 1, $y), true);\n                    $e = serendipity_serverOffsetHour(persian_mktime(23, 59, 59, $m, date('t', $s), $y), true);\n                    break;\n            }\n\n            $entry_count = (int)$group[$y . (strlen($m) == 1 ? '0' : '') . $m];\n\n            /* A silly hack to get the maximum amount of entries per month */\n            if ($entry_count > $max) {\n                $max = $entry_count;\n            }\n\n            $data = array();\n            $data['entry_count']    = $entry_count;\n            $data['link']           = serendipity_archiveDateUrl($y . '/'. sprintf('%02s', $m) . $cat_get . $author_get);\n            $data['link_summary']   = serendipity_archiveDateUrl($y . '/'. sprintf('%02s', $m) . $cat_get . $author_get, true);\n            $data['date']           = $s;\n            $output[$y]['months'][] = $data;\n        }\n    }\n\n    $serendipity['smarty']->assignByRef('archives', $output);\n    $serendipity['smarty']->assignByRef('max_entries', $max);\n\n    serendipity_smarty_fetch('ARCHIVES', 'entries_archives.tpl', true);\n}\n\n/**\n * Get total count for specific objects\n *\n * @access public\n * @param   string      The type of count to show: \"entries\", \"trackbacks\", \"comments\"\n * @return  string      The number\n */\nfunction serendipity_getTotalCount($what) {\n    global $serendipity;\n\n    switch($what) {\n        case 'comments':\n            $res = serendipity_db_query(\"SELECT SUM(e.comments) AS sum\n                                           FROM {$serendipity['dbPrefix']}entries AS e\n                                          WHERE e.isdraft = 'false'\n                                                \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND e.timestamp  <= \" . serendipity_db_time() : ''), true, 'assoc');\n            return $res['sum'];\n        case 'trackbacks':\n            $res = serendipity_db_query(\"SELECT SUM(e.trackbacks) AS sum\n                                           FROM {$serendipity['dbPrefix']}entries AS e\n                                          WHERE e.isdraft = 'false'\n                                                \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND e.timestamp  <= \" . serendipity_db_time() : ''), true, 'assoc');\n            return $res['sum'];\n        case 'entries':\n            $res = serendipity_db_query(\"SELECT COUNT(e.id) AS sum\n                                           FROM {$serendipity['dbPrefix']}entries AS e\n                                          WHERE e.isdraft = 'false'\n                                                \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND e.timestamp  <= \" . serendipity_db_time() : ''), true, 'assoc');\n            return $res['sum'];\n\n    }\n}\n\n/**\n * Get a path of all parent categories to a given category.\n *\n * @access public\n * @param   string      The id of the category, whose parents you want to fetch\n * @return  array       An Array with all category information, ordered from root to the ID you supplied.\n */\nfunction serendipity_getCategoryRoot($id) {\n    global $serendipity;\n\n    $r = serendipity_db_query(\"SELECT p.*\n                                 FROM {$serendipity['dbPrefix']}category n,\n                                      {$serendipity['dbPrefix']}category p\n                                WHERE n.category_left BETWEEN p.category_left AND p.category_right\n                                  AND n.categoryid = \" . (int)$id . \"\n                             ORDER BY n.category_left DESC, p.category_left ASC\");\n    return $r;\n}\n"], "fixing_code": ["Version 2.1 ()\n------------------------------------------------------------------------\n\n    * Allow to set a default category for authors (personal preferences)\n    \n    * Changed how the hidden password element is displayed to prevent\n      browsers from autofilling it into the entryproperties plugin\n\n    * [Security] Enhanced media upload check to also check redirects\n      for local files, thanks to Xu Yue (again!)\n\n    * [Security] Prevent XSS in adding category and directory names, \n      thanks to Edric Teo @smarterbitbybit.\n      \n    * [Security] For multi-deletion of entries, secure the HTTP referrer\n      output to prevent XSS (Issue #435)\n      \n    * [Security] Reject %0D/%0A in exit tracking and other places\n      (Issue #434)\n      \n    * [Security] Redirection of comment.php now checks the referrer\n      and only allows the blog's host (thanks to Lee Sheldon Victor)\n      \n    * [Security] Fix missing integer casting for inserting new categories\n      (thanks to cdxy)\n\n    * Disabled Selenium test files unless enabled\n\nVersion 2.1-beta2 (September 26th, 2016)\n------------------------------------------------------------------------\n    * Improved backend accessibility by hiding iconfont icons for\n      screenreaders (using aria-hidden).\n\n    * Replaced the JS-based equal height solution in the backend with\n      a modern CSS-only solution based on Flexbox for browsers that\n      support it. (Browsers that do not support Flexbox or that only\n      support outdated versions of Flexbox get the old JS solution as\n      a fallback.)\n\n    * [Security] Prevent moving files by using their directory name.\n      [Security] Possible SQL injection for entry category assignment\n      [Security] Possible SQL injection for removing&adding a plugin\n      \n      All issues require a valid backend login.\n      Thanks to Hendrik Buchwald for finding this via their\n      RIPS source code analyzer (www.ripstech.com)\n      \n    * [Security] Add new configuration option to enable fetching\n      local files for the media uploader. By default this is now\n      disabled to prevent Server Side Request Forgery (SSRF).\n      Thanks to Xu Yue for pointing this out!\n\n    * Added new API wrapper serendipity_request_url() to request URLs.\n      Currently uses HTTP_Request2, might change to curl or others in\n      the future, but irrelevant to plugins using this function.\n\n    * Removed outdated themes blue, carl_contest, kubrick and wp. They\n      live on Spartacus now.\n\n    * Added new theme \"Skeleton\".  Skeleton is a responsive, mobile first\n      HTML5/CSS3 theme built on the Skeleton framework.\n\n    * Fix comaptibility bug preventing Internet Explorer (+Edge) to\n      clear the entry editor cache when saving an entry\n\n    * Remove backend js from preview_iframe.tpls, makeing entry previews\n      faster, more accurate and more reliable\n\n    * Introduce new plugin api function\n      $plugin->getFile($filename, $key = 'serendipityPath'). Other\n      than parseTemplate($filename) it will not parse the found file\n      via smarty, and it allows directories inside $filename. Intended\n      use is finding files like images via the fallback chain, giving\n      themes the chance to serve custom versions instead.\n\n    * Give theme authors the option to force using a template file from\n      the frontend, {getFile file=... frontend=true}\n\n    * Fix entry preview by making sure it always uses the correct\n      template files to generate preview, replacing internal magic\n      with direct parameters\n\n    * Rewrite and simplification of the file fallback chain in\n      serendipity_getTemplateFile. Removes templates/default/ from\n      from the chain, as it was replaced by templates/2k11/\n\nVersion 2.1-beta1 (June 8th, 2016)\n------------------------------------------------------------------------\n\n    * Added new theme \"Timeline\".  Timeline is a fully responsive,\n      mobile first HTML5/CSS3 theme built on the Bootstrap\n      framework.\n\n    * Add new config variable $serendipity['cors'] to allow to set\n      Access-Control-Allow-Origin: * headers for sensible places\n      (RSS feeds), to i.e. allow JavaScript's XMLHTTPRequest to read\n      those feeds.\n\n    * Introduce a section with modern recommended themes in the\n      themes backend menu. Themes can be included there by setting\n      Recommended: Yes in their info.txt\n\n    * Merge sidebar and event upgrade pages in one single page\n      button\n\n    * Add colorpicker as possible plugin option item type, set\n      type to 'color' to use it\n\n    * Comments made via the backend on own articles don't trigger\n      the comment notification (thanks to xoxys)\n\n    * Fix missing perm checks for \"standard user\" in MediaLibrary\n\n    * Fix show Dashboard entries by authors entries\n\n    * Fix show Dashboard comments by authors entries (#385)\n\n    * Use CDATA encoded body for ATOM feed\n\n    * Fix: Ajax upload to ML now also works for non-images\n\n    * Added new theme \"Clean-Blog\".  Clean Blog is a fully responsive,\n      mobile first HTML5/CSS3 theme built on the Bootstrap\n      framework.\n\n    * Fixed checkbox entryproperties re-sets (#376)\n\n    * Fixed media item delete handler (#371)\n\n    * Rewrote Routing code for index.php to be outsourced into\n      include/functions_routing\n\n    * Removed broken feature for viewing blog entries by multiple\n      authors, dropped code from core and plugin_authors.\n\n    * Optimize scaleImage returns\n\n    * Fixed media item rename handler (#370)\n\n    * Fixed and enhanced multiple media redirects and path / name\n      related issues, as well as some better umlaut conversions\n\n    * Allow strict media directory selection by toggle filter\n\n    * Allow a better auto char conversion to media upload item names\n\n    * Added Start / End pagination to MediaLibrary and entries list\n\n    * Added new bulk image move ability to MediaLibrary. This fixes\n      several issues with rename AND remove and allows to automatically\n      check and set MediaLibrary item entry paths on MOVE.\n      Staticpages from v.4.52 are modified to support this too.\n      Now supports Quickblog (imageselectorplus) entry path repairs.\n\n    * Fix MediaLibrary objects not pass through into entryproperties\n      CustomFields\n\n    * Fix fatal error atom 1.0 issue; References #362\n\n    * Fix eraseEntryEditorCache script in preview_iframe updertHooks\n      IFRAME\n\n    * Fix the Serendipity template and file fallback chaining to work\n      more precise\n\n    * Disable CKEDITOR Source protection for Smarty and WP-Smarty like\n      markup, since now being usable w/o setting ACF OFF\n\n    * Set Serendipity var use_autosave in backend only\n\n    * Fix entries.inc fetching iframe event returning 1, when true and\n      added a new language constant change message for multilanguage\n      entry changes, instead of the wrongly used save message\n\n    * Fix importers to use the new mysqli API extension with PHP 5+\n\n    * WIP: Added an internal cache to speedup s9y's site generation. Can\n      be activated by setting use_internal_cache to true in\n      serendipity_config.inc.php. Test feedback needed.\n\n    * Added <IfModule mod_rewrite.c> checks to .htaccess for URL\n      rewriting\n\n    * Add support for cronjob plugin to spartacus, to notify blog owner\n      about possible updates (via e-mail)\n\n    * Added link to preview spartacus themes on blog.s9y.org\n\n    * Added two configuration variables that can be set in\n      serendipity_config_local.inc.php to influence the dashboard entry\n      limit:\n\n      - $serendipity['dashboardLimit']: How many future entries to fetch\n        (default: 5)\n      - $serendipity['dashboardDraftLimit']: How many entries in total\n        shall be displayed in the dashboard section (default: 5)\n      - $serendipity['dashboardCommentsLimit']: How many comments\n        (default: 5)\n\n      (Draft entries will only be fetched if there are less future\n      entries than the total entry limit)\n\n    * Fix: the syndication plugin links subtome correctly to the atom\n      feed when he is activated with the rss feed\n\n    * Issue #238: When creating/renaming media directories, replace\n      special characters with the same i18n rules like Permalinks are\n      created, renaming umlauts etc.\n\n    * Add \"update all\"-button to plugin update page\n\n    * Issue #234: Granular options to force backend popups for certain\n      areas\n\n    * Introduce serendipity['ajax'] to detect incoming ajax requests\n      and react accordingly in core and plugins\n\n    * Issue #248: Add $serendipity['forceBase64']=true option (can be\n      set in serendipity_config_local.inc.php) to make Serendipity\n      *not* use 8bit Imap functions for sending mail, for MTAs that\n      behave erradically otherwise.\n\n    * Issue #257: Make sure to check entered admin-user password\n\n    * Issue #264: Drop $authorid for permissions based on images\n      instead of directories, it was not used anymore\n\n    * Some small enhancements to the error reporting\n\n\nVersion 2.0.3 (January 4th, 2016)\n------------------------------------------------------------------------\n\n    * Fix XSS in backend comment editing form for logged-in authors,\n      thanks to Onur Yilmaz and Robert Abela from Netsparker.com\n\n    * Fix some backend entry form related event messages\n\n\nVersion 2.0.2 (July 24th, 2015)\n------------------------------------------------------------------------\n\n    * Fix security issues reported by Tim Coen of Curesec.com:\n\n      - Forbid uploading files with PHP contents and possible\n        PHP execution by authenticated users (critical if\n        you have possible untrustworthy authors)\n      - Add proper escaping for comment approval tokens to prevent\n        SQL injection (authenticated authors only)\n      - Add proper escaping of comment's author names in the\n        comment reply form to prevent XSS (2k11 template, javascript\n        based)\n\n    * Minor layout fixes for media DB media filters\n\n    * Backported some Importer db bugfixes\n\n    * CKEDITOR bugfix releases to 4.4.8 - please read the changelog.\n      Includes widget, lineutils, fakeobjects Plugins and S9y added\n      cheatsheet and procurator Plugins.\n      Changed config.autoParagraph set to false, to prevent wrapping\n      p tags around extraAllowedContent tags.\n\n    * Smarty bugfix upgrades to 3.1.27 - please read the changelog.\n      Compilation time was vastly improved.\n      New Features in NEW_FEATURES.txt.\n\n    * It is now possible to switch to a theme's admin theme if it has\n      been selected as a frontend theme first\n\n    * Syndication Plugin Issue #285:\n        - Add \"none\" as possible value for the xml-icon in the\n          syndication plugin, to enable plain links\n        - Reset subtome full icon path to support\n          serendipity_getTemplateFile()\n        - Link creation fixes for Bulletproof coloured style (eg blue)\n\n    * Fix auto include of a User theme /admin/user.css backend file.\n\n        PLEASE NOTE:\n\n        2.0.1 brought in an automated include of a themes \"user.css\"\n        file. If you don't want to use such file any more (and you have\n        one), you will have to delete or rename it by hand!\n\n        Also please note, that user stylesheet selectors like\n\n            .selector {\n                background-image: url(img/example.jpg);\n            }\n\n        now need to use the {TEMPLATE_PATH} like\n\n            .selector {\n                background-image: url({TEMPLATE_PATH}img/example.jpg);\n            }\n\n        Content of a user.css will always be put LAST into the combined\n        CSS, this means it will override any possible plugin output.\n        If a user.css file does not exist in your own template directory,\n        but inside the default 2k11 template directory, this will always\n        be used (this behaviour is called \"default fallback chain\").\n\n    * Use https URLs for Atom feed, if called through HTTPS (hboeck)\n\n    * Restore the \"Show toolbar within media selector popup?\" option,\n      it was ignored before.\n\n    * Fix Issue #321, negative offset for LIMIT SQL statements when\n      using stable archive sorting and plugins like history.\n\n    * Templatechooser will not apply theme in backend admin.\n\n    * Use \"secure\" flag for (session) cookies sent over SSL, thanks to\n      dayton967\n\n    * Make preview_iframe.tpl template files load the proper frontend\n      CSS file, including cache-busting version string when changing\n      themes\n\n    * Implement patch to properly initiate templates_c on installation\n      for shared installs (thanks to fugue88)\n\n    * Allow templatechooser plugin to read a custom \"blacklist.txt\"\n      within its directory, that can blacklist certain themes from\n      being selected.\n\n    * Allow serendipity_setCookie() function to set custom expiry.\n\n    * Adapt .htaccess profile of \"mod_rewrite for 1&1 and problematic\n      servers\" to not include the \"Options -MultiViews\" option, since\n      this is often blocked\n\n    * Fix initializing smarty framework in the preview/saving iframe,\n      so that a template's config.inc.php is always loaded.\n\n    * Show debugging .tpl file information with relative directory only\n\n    * fix wrong upgrade removal of dead files with 2.0.1 update\n\n\nVersion 2.0.1 (March 12th, 2015)\n------------------------------------------------------------------------\n\n    * Fix missing escaping (possible XSS) of category names in the\n      Backend Entry Admin, which would allow editors that create a\n      forged category name to attack other editors in the backend\n      (privileged access to the backend required). Thanks a lot to Edric\n      Teo for reporting this issue.\n\n    * Improved detection for possible upgrade/plugin/PHP errors. A\n      warning will be emitted on the dashboard, when the Serendipity\n      JavaScript library could not be loaded.\n\n    * syndication fix: use absolute urls for subtome\n\n    * Issue 306: localStorage may be deactivated by setting a config\n      option or using security-related extensions at least in some\n      browsers, which might (at least in FF) break backend JS\n      functionality. Added extra tests to 2k11 backend JS.\n\n      If you use localStorage, please test if it is actually available\n      by testing if localStorage !== null in JS.\n\n    * Issue 280: Allow every theme to utilize a \"user.css\" file that\n      gets loaded on top of the frontend (or backend, if in admin/\n      subdirectory) theme. This file can be used for customized CSS of\n      a blog-admin which carries over to future Serendipity updates\n\n    * Issue 299: Do not display dashboard for users with no permission\n      to perform actions in the backend (frontend-users)\n\n    * Make \"rewriteURL\" smarty modifier available to do a\n      {$CONST.PATH_ARCHIVE|rewriteURL} within a smarty template file.\n\n    * Add a generic odd/even for backend dashboard widgets to align\n      properly. Future dashboard widgets need to get the new extra\n      class dashboard widget on the section element they create.\n\n    * Fix event emoticate plugin to reflect proper call usage of\n      serendipity_getTemplateFile(), if a theme uses custom emoticons.\n      UPDATE your themes emoticons.inc.php file, if have. See example\n      file in plugin dir.\n\n    * Change 2k11 config.inc.php to reflect proper\n      serendipity_getTemplateFile() when frontend files shall be\n      referenced within the backend.\n\n    * Fixed missing file message for deleted media items\n\n    * Fixed entry editor JS not emitting a 'No tags' msg in taxonomy\n      quick view. Improved serendipity.tagsList exit if freetag plugin\n      is not installed.\n\n    * Minor backend UI fixes (taxonomy quick view in entry editor,\n     'Done' msg emitted by Bayes plugin)\n\n    * Clearer language constants for entries in dashboard, labelled\n      \"In progress\"\n\n\nVersion 2.0 (January 23rd, 2015)\n------------------------------------------------------------------------\n\n    * Smarty fix for purging compiled files\n\n    * Fix wrong search page ordering when stable archive was active\n\n    * Prevent entryproperties from saving/displaying a browser-side\n      stored password that was actually not set.\n\n    * Stronger check for existing logger interface to prevent errors\n      when it is not actively used.\n\n    * Fix entryproperties being removed when publishing an article\n      from the dashboard and by specific plugins (freetag, trackback)\n      that modify entry data.\n\n    * Fix deleting comments when user is not an admin, but the entry\n      belongs to him. Thanks to berberic.\n\n    * Patch PEAR.php to use \"static\" isError declaration to prevent\n      PHP error messages\n\n    * Change order of IF-statements in entries.tpl to check for\n      comment_moderate/comment_added, to properly emit the message\n      whether a comment is being moderated.\n\n    * Fix searching for entries in the admin panel with database\n      types other than \"mysql\"\n\n    * Change entry editor's category assignment to toggle between\n      a hierarchical and a plain list (good for many categories)\n\n    * Fix date formatting in entry editor to not use ISO year\n      but the calendar year\n\n    * Fix autoupdate version read and transmit\n\n\nVersion 2.0-rc2 (December 23rd, 2014)\n------------------------------------------------------------------------\n\n    * Fixes escaping of comments in the new backend pane to prevent\n      XSS. Thanks to Steffen R\ufffdemann for reporting!\n\n    * Fix wrong parameter count in serendipity_entity_decode\n\n\nVersion 2.0-rc1 (includes beta4/5/6) (December 19th, 2014)\n------------------------------------------------------------------------\n\n    * entryproperties plugin will now automatically disable nl2br\n      markup, when the WYSIWYG editor is used to create en entry\n\n    * PHP Requirement now is at: PHP 5.3+\n\n    * Fix for syndication subtome onclick handler\n\n    * Fix problematic preview stylesheet reference\n\n    * Optimized clearing smarty template files on upgrading\n\n    * Properly reset the \"disable markup\" feature of entryproperties\n      plugin when none selected\n\n    * PHP 5.4+ fix to properly call htmlspecialchars() / htmlentities() /\n      html_entity_decode() with a charset option, that has been\n      set to to default to UTF-8 and will yield empty strings when\n      being used in NON-UTF-8 environments. Now we utilize a\n      serendipity_specialchars() wrapper call.\n\n    * Added SQLite3 OO database layer for PHP 5.4+\n\n    * New personal preference to choose CKEditor toolbar presets.\n      Presets can be overwritte through a\n      templates/xxx/admin/ckeditor_custom_config.js if needed.\n      See htmlarea/ckeditor_s9y_config.js for details.\n\n    * Proof of concept templates \"default-php\" and \"default-xml\" have\n      been moved to Siber...Spartacus. They would need adapting to\n      Serendipity 2.0 (simple methods like getConfigDir() et al),\n      but since those Template APIs have virtually zero usage scenario,\n      they remain experimental.\n\n    * Added new PAT_JS mod_rewrite rule to .htaccess files\n\n    * Removed experimental support for PHP/SMARTY IN-MEMORY caching\n      added in 2.0-beta3, since this could not work.\n\n    * Smarty 3.1.21 upgrade (see changelog)\n\n    * Fix ImageMagick new sizing issues while forcing image geometry\n      exactly to given sizes with imageselectorplus\n\n    * Fix issue #220 with pdf directory moving rename() error\n\n    * Fix bug in entry listing, which showed wrong categories for\n      entries (Issue #201)\n\n    * Improve RegExp for Feed-URL matching, thanks to fugue88\n\n    * Proper SQLite PDO filenames in shared installations (Issue #214)\n\n    * ImageMagick now can get parameters to generate thumbnails,\n      see serendipity_config.inc.php for example values\n\n    * Allow to enable/disable the new autosave feature in personal\n      preferences (Issue #213)\n\n    * Re-added installer test for writable serendipity base directory\n\n\nVersion 2.0-beta3 (July 25th, 2014)\n------------------------------------------------------------------------\n\n    * Move admin/media_showitem.tpl to theme's directory in 2k11. With\n      an adaptation in serendipity_admin_image_selector.php, this now is\n      a \"true\" frontend template which uses the styles of the frontend\n      theme. Theme authors might want to adapt it to their themes.\n\n    * Moved general syndication plugin option into the core\n\n    * Smarty 3.1.19 upgrade (see changelog)\n\n    * Fixed thumbnail recreation, Issue #134\n\n    * Merged external JS libraries into a central \"plugins.js\" of the 2k11\n      backend template, can be updated through\n      templates/2k11/admin/js/gruntipity.php helper script.\n\n    * Adapted database table structure change for statistics, shoutbox,\n      karma and spamblock plugin (for new field definition of \"ip\" field)\n      Thanks to rohdef!\n\n    * Added new option \"enabledBackendPopups\" that allow to specify\n      if inline modal dialogs or popups are used in the backend for\n      e.g. the category selectory and media library\n\n    * added experimental support for PHP/SMARTY IN MEMORY caching\n      Enabled by default, if classes found loaded.\n      Disable with\n        $serendipity['disable_apc'] = true;\n      and\n        $serendipity['disable_memcache'] = true;\n\n    * Support added in serendipity_db_schema_import for sqlite\n      autoincrement\n\n    * Remove Google Reader button from syndication plugin options\n\n    * Add subToMe-button to syndication plugin and change its defaults\n\n    * Use Browsercache to save cache and restore entries\n\n    * Improved installer to forbid using database table prefixes with\n      special characters\n\n    * Themes using Engines are now able to use the parent's\n      configuration\n\n    * Prevent \"new\" plugin api to install double instances of plugins\n      that are not stackable (issue #45)\n\n    * Back button in plugin-config\n\n    * Adapted serendipity_editor.js to provide more global (though\n      deprecated) API access methods for plugins like amazonchooser\n      and linktrimmer, to perform insertion. Also fixed the\n      insertion of text when the ID of the element is not prefixed\n\n    * Move sort by name to simple filter in ML, replace file extension\n\n    * Remember selected media library folder\n\n    * Show upload-success or error with the ajax image uploader\n\n    * Fix preview entry exception (issue #119)\n\n    * Add serendipity.toggle_collapsible as a reusable JS function\n      for the core backend and backend sections emitted by plugins as\n      an easy way to provide show/hide functionality. (yellowled)\n\n    * Fixed media insert target bug (issued by #143, #145, #121)\n\n    * Fixed publish drafted-entries via dashboard (issue #160)\n\n    * All frontend themes that rely on the bundled Core jQuery library\n      are currently using the jquery.noConflict-mode for compatibility\n      to older plugins.\n      This mode is now considered deprecated and will be removed in\n      future releases. A new variable:\n        $serendipity['capabilities']['jquery-noconflict'] = false;\n      in your theme's config.inc.php file can now turn of that\n      noConflict-mode.\n\n    * Due to distinction of backend and frontend themes, each theme\n      that provides a custom jquery.js now only does so for the\n      frontend. The backend now listens to a:\n\n        $serendipity['capabilities']['jquery_backend'] = false;\n\n      variable, and the file needs to be jquery_backend.js that\n      a backend theme would reference to.\n\n    * Changed 2k11's config.inc.php file to provide a more stable\n      call of event hooks so that other themes can also hook\n      their own events.\n\n    * Changed JS for category filtering and its reset button to be a\n      reusable function, which is now also used in the list of\n      installable plugins.\n\n    * Fixed wrong local documentation URL in plugin configuration\n\n    * Added new \"backend_dashboard\" event-hook for plugins to use\n      within dashboard.\n\n    * Backend and Frontend themes can now be set independently from\n      each other. New backend themes now need to set:\n\n        Backend: Yes\n\n      in their info.txt file. If you adapt a custom admin theme,\n      ensure that it is compatible to the new \"2k11\" backend to\n      ensure proper future usage within Serendipity. The bulletproof\n      backend will now no longer be recognized as a backend theme\n      option, but can be selected as a new frontend theme, while\n      using 2k11 (=default) in the backend.\n\n    * Include klogger, call it as $serendipity['logger']->debug/error.\n      The log-level can be set in the general configuration and is\n      disabled by default.\n\n    * Fixed missing s9ymdb ID\n\n    * Add HTTP_Request2 and dependencies as bundled libraries and\n      update PEAR library to version 1.9.4\n\n    * Implemented AJAX uploadResize option to allow resizing an image\n      before upload (onli)\n\n    * Improved file/directory removal code to (hopefully) fail more\n      gracefully\n\n    * Change \"default\" admin backend template fallback chain so that\n      old admin themes can theoretically be shown with the \"old\"\n      admin interface. This however in many themes breaks the\n      Serendipity workflow. In other words, currently old custom backend\n      themes are deprecated. We are still working on how to deal\n      with this and if we can add some sort of compatibility or port.\n\n    * Fix bundled jquery's source mapping, upgraded to 1.11.1\n\n    * Fixed missing media name in resize GET URL\n\n    * Fix MediaDB overlay display\n\n    * Re-Added possibility to change filename/target directory for\n      media uploads\n\n    * Update CKEditor to 4.4\n\n    * Fixed some missing internationalization instances\n\n    * Minor CSS improvements for upgrader, plugin sequencing widget\n\n    * RSS importer accepts pubDate in addition to pubdate element.\n\n    * Upgrader in Dashboard can be disabled, returns error message when\n      URL not accessible\n\n    * Added a category filtering ability for the entry editor\n\n    * Better check when removing old/dead files to prevent error\n      messages\n\n    * WYSIWYG editor respects image floats\n\n    * Support html5 multiple file upload\n\n    * Modernizr, magnificPopup updates\n\n    * Improvements to equal heights js, button labels\n\n    * No longer truncate long entry titles\n\n    * Improve non-WYSIWYG editor tag insertion, url insertion\n\n    * Improve less DOM firing on certain javascript tasks\n\n    * Introduce js_backend event hook\n\n\nVersion 2.0-beta1 and followup -beta2 (April 14th, 2014)\n------------------------------------------------------------------------\n\n    * Upgrade Smarty libs to 3.1.18\n\n    * Automatic upgrade removal of old Smarty2 files (2.0-alpha2)\n      function uses SPL\n\n    * Implemented patch https://github.com/s9y/Serendipity/pull/15\n\n    * When switching Themes, both the backend and the frontend\n      will remember the timestamp of the last theme change,\n      to make sure that the browser will not cache a mismatching CSS.\n\n    * Fix theme change issues with global template vars in core\n      (1559472ca3) see 'temporary added empty $template_config_groups'\n      in 1.7-rc2 (eb77dc369a)\n\n    * Use Smarty for backend display output\n\n    * \"Themes\" are now what has previously been mixed as \"Design\",\n      \"Theme\", \"Template\" or \"Layouts\".\n\n    * WYSIWYG-Spawn-API reworked (2k11/admin/wysiwyg_init.tpl)\n\n    * All Javascript-functions like SetCookie now reside in a\n      serendipity-object, simulating a namespace.\n        SetCookie(...)\n      became\n        serendipity.SetCookie(...)\n\n    * Renamed JS-Function:\n        toggleCategorySelector became toggle_category_selector\n\n    * The advanced js option (eyecandy) got removed, as such a thing\n      like advanced js doesn't exist anymore\n\n    * dashboard_plugin has an equivalent in the core, replacing the\n      frontpage\n\n    * Constants like S9Y_FRAMEWORK_COMPAT are no longer set\n      (include_once is used instead)\n\n    * New additional option to render smarty-functions:\n      serendipity_smarty_show($template, $data)\n\n    * A number of functions now returns their result instead of echoing\n      them (TODO: a bunch of image- and\n      trackback-functions still use echo for messages\"):\n        serendipity_plugin_config\n        serendipity_printEntryForm\n        serendipity_printEntries\n        function serendipity_showMedia\n        serendipity_showPropertyForm\n        showMediaLibrary\n        serendipity_guessInput\n        memSnap\n        serendipity_displayTopUrlList\n        serendipity_displayTopExits\n        serendipity_displayTopReferrers\n        serendipity_printConfigTemplate\n        show_plugins\n\n    * Functions removed from the core:\n        serendipity_printConfigJS\n\n    * Functions added to the core:\n        serendipity_generateImageSelectorParams\n\n    * All internal plugins got extracted from plugin_internal.inc.php\n      and moved to plugins/.\n      They are renamed to work there (upgrader task provides migration):\n        serendipity_calendar_plugin    became serendipity_plugin_calendar\n        serendipity_quicksearch_plugin became serendipity_plugin_quicksearch\n        serendipity_archives_plugin    became serendipity_plugin_archives\n        serendipity_categories_plugin  became serendipity_plugin_categories\n        serendipity_syndication_plugin became serendipity_plugin_syndication\n        serendipity_superuser_plugin   became serendipity_plugin_superuser\n        serendipity_plug_plugin        became serendipity_plugin_plug\n\n    * Add plugin hook \"js\", generating a virtual serendipity.js\n\n    * Admin JS is now bundled in serendipity_editor.js.tpl and\n      rendered using smarty in the theme config\n\n    * Admin JS got rewritten using jQuery where applicable\n\n    * serendipity_define.js.php removed\n\n    * Removed support for layout.php\n\n    * The whole PHP-Code now almost never echoes integrated HTML, but\n      uses smarty template (TODO: Remove the almost)\n      The necessary smarty-templates reside in 2k11/admin/\n      Every theme can generate its own backend if it integrates those\n      templates under admin/ itself\n\n    * 2k11 is set as the new default backend, replacing bulletproof.\n      default remains the fallback so far.\n\n    * A number of functions had some arguments removed:\n        * function serendipity_displayImageList:\n            From\n                function serendipity_displayImageList($page = 0, $lineBreak = NULL, $manage = false, $url = NULL, $show_upload = false, $limit_path = NULL, $smarty_display = true)\n            to\n                function serendipity_displayImageList($page = 0, $lineBreak = NULL, $manage = false, $url = NULL, $show_upload = false, $limit_path = NULL)\n        * function serendipity_showMedia\n            From\n                function serendipity_showMedia(&$file, &$paths, $url = '', $manage = false, $lineBreak = 3, $enclose = true, $smarty_vars = array(), $smarty_display = true)\n            to\n                function serendipity_showMedia(&$file, &$paths, $url = '', $manage = false, $lineBreak = 3, $enclose = true, $smarty_vars = array())\n        * generate_plugins\n            From\n                static function generate_plugins($side, $tag = '', $negate = false, $class = null, $id = null, $tpl = 'sidebar.tpl')\n            to\n                static function generate_plugins($side, $negate = false, $class = null, $id = null, $tpl = 'sidebar.tpl')\n\n    * serendipity_showMedia now no longer returns the used template and\n      echoes the generated HTML, but only returns the generated HTML\n\n    * Themes now have their own configuration page,\n      ?serendipity[adminModule]=templates&serendipity[adminAction]=editConfiguration\n\n    * jQuery in the backend no longer runs in noConflict-mode. Use\n      $(...) instead of jQuery(...)\n\n    * The entryproperty-plugin will now always delete its cache on\n      uninstall, not only if the cache is activated then\n\n    * serendipity_is_iframe now really only checks for iframe and\n      doesn't also echo it\n\n    * Added option simpleFilters (meant to indicate to show less\n      filters and poweruser-options)\n\n    * serendipity_admin_image_selector.php no longer used by 2k11,\n      instead the media library (with admin/media_choose.tpl,\n      admin/media_upload.tpl, media_pane.tpl, media_items.tpl)\n      can generat the imageselector on its own. The editor calls\n      serendipity_admin.php?serendipity[adminModule]=media instead,\n      with serendipity[textarea] indicating the target, and\n      serendipity[showMediaToolbar] activating the imageSelector modus\n\n    * New required PHP-Version: 5.3 or higher (checked in the installer)\n\n\nVersion 1.7.8 (February 9th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed POST for db entry insert, caused by 1.7.6 security feature\n\n\nVersion 1.7.7 (February 6th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed PHP parse error in templatechooser plugin. Blame garvin. :(\n\n\nVersion 1.7.6 (February 6th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed backend security issues, thanks to Stefan Schurtz:\n\n        - XSS of users realname in \"Manage users\" section\n          (Backend, requires login)\n        - XSS when creating an entry with bad id/timestamp values\n          (Backend, requires login)\n        - SQL-Injection for plugin installation parameter\n          (Backend, requires admin login)\n\n    * Templatechooser plugin uses \"default\" template as fallback,\n      not \"bulletproof\".\n\n\nVersion 1.7.5 (January 18th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed textile PHP 5.2 (namespace) compat issue\n\n    * Added default value to spamblocks required_fields option [name,\n      comment]\n\n\nVersion 1.7.4 (January 11th, 2014)\n------------------------------------------------------------------------\n\n    * Fixed emoticate plugin icon link to check for textile class\n\n    * Upgrade textile plugin libs - lib3 extends to PHP >= 5.3.\n      Please check for new options!\n\n    * Fixed spamblocks Captcha imagecreate() with PHP > 5.3 versions\n\n    * Smarty 3.1.16 bugfix release - please read bundled-libs/Smarty/change_log.txt\n      about changes to versions 3.1.16 and 3.1.15.\n      Please also see special bundled-libs/Smarty/3.1.16_RELEASE_NOTES.txt\n\n    * Removed blogg.de filter from spamblock plugin, adapted htaccess\n      IP block algorithm for race conditions. .htaccess can now contain\n      multiple Deny From ranges to prevent parsing problems (DLange)\n\n    * Fixed IP columns in spamblocklog, spamblock_htaccess, karmalog, visitors\n      and shoutbox to varchar(45) for IPv6 - including tunneled IPv4 (39+6)\n\n    * Fixed possible double includement of plugin_internal.inc.php\n\n    * Fix possible temporary caching errors failing $eventData[0]['properties']\n\n    * Basic support for static blocks (includeentry plugin) in 2k11.\n\n    * Added \"backend_footer\" event hook\n\n    * Exclude \"frontpage extensions\" directories \"_vti_cnf\" on windows servers\n      in Media Library\n\n    * Fixed pagination when searching terms with fetchlimit < 4\n\n    * Fixed deprecated /e modifier with PHP >= 5.5 in nl2br plugin restore method\n\n\nVersion 1.7.3 (August 28th, 2013)\n------------------------------------------------------------------------\n\n    * Trackback to https:// style URLs will use proper port 443 instead\n      of 80.\n\n    * Disabled htmlarea spellchecker module, http://osvdb.org/87395\n      Thanks for Henri Salo for pointing this out. CVE-2013-5670\n\n\nVersion 1.7.2 (July 26th, 2013)\n------------------------------------------------------------------------\n\n    * Fix a syntax error in the \"mysql\" deprecation code, thanks\n      to Ian\n\n\nVersion 1.7.1 (July 26th, 2013)\n------------------------------------------------------------------------\n\n    * Added new event hooks \"backend_plugins_install\", \"backend_plugins_update\"\n      and \"backend_templates_install\".\n\n    * Serendipity will switch to mysqli if PHP >= 5.5 is used (mysql\n      is deprecated)\n\n    * Smarty upgrade to 3.1.14 (read changeLog and the README for API changes since Smarty 2)\n\n    * Upgrader will now remove/delete the browsercompatibility plugin\n\n    * Fixed Media Library exclude path to not show/proceed ckeditor/kcfinders .thumbs dir\n\n    * Fixed bulletproof->colorset GET mismatch with categorytemplates plugin\n      config.inc.php [Line 29]\n\n    * German translation for stable archives added (YL)\n\n    * Fixed curl result bug in spartacus plugin\n\n    * Create new migration task for propagate defaultBaseURL when\n      currently empty (onli)\n\n    * Fixed statistics sidebar querys ( & for PostgreSQL ) [242520b]\n      and added some missing html end tags\n\n    * Added missing current group name when editing usergroups\n\n\nVersion 1.7 (May 11th, 2013)\n------------------------------------------------------------------------\n\n    * rc4: Get ready for CKEDITOR-wysiwyg Plugin mode\n\n    * rc4: Fixed fetching javascript object (for nugget textareas) in non-wysiwyg-mode\n\n    * rc4: Change .htaccess blocking mechanism by spamblock plugin to not fetch\n      too many datarows, thanks to DLange from the forums. (The .htaccess\n      feature is still considered experimental, use at your own risk ;))\n\n    * rc4: Fixed entryproperties backend 'cache now' link\n\n    * rc3 + rc4: Media database: Escape more Cookie values to prevent storing\n      possible XSS (http://board.s9y.org/viewtopic.php?f=3&t=19142).\n      Escape hotlinked media filename. Escape importer host name error\n      Thanks to GreenSun from the forums for bringing this to attention,\n      originally reported by Dshellnoi Unix\n\n    * rc2: Alter entries.tpl to add the line:\n      {assign var=\"entry\" value=$entry scope=\"parent\"}\n      for proper propagation of $entry to sub-templates.\n\n    * rc2: Alter error reporting to only fail when 'debug' mode is enabled,\n      so that \"normal\" blog installations will not fail on specific\n      E_STRICT warnings that are not important.\n\n    * rc2: temporary added empty $template_config_groups into templates with config,\n      to avoid display troubles for template changes, if previous template had these set.\n      Please check your template.\n\n    * rc2: reflect POST submitted changes in Bulletproof template configs re-set situations\n\n    * various PHP 5 compatibility fixes in core and plugins\n\n    * Allow entryproperties plugin to define defaults for custom fields\n\n    * Onyx, Net_URL classes: Remove PHP4 style constructor due to\n      PHP5 error \"Constructor already defined\"\n\n    * Improved RSS sidebarplugin to support Atom\n\n    * Bundled simplepie\n\n    * For Blogs running on a non-UTF-8 language, set a Smarty constant\n      to indicate the actually used charset.\n\n    * Added to use MyISAM handler for s9y tables (we do not use InnoDB\n      features, but rely on MyISAM fulltext)\n\n    * fixed defaultBaseURL did not show up installer. Thanks to onli.\n      Follow up from c292bad\n\n    * fixed draft & future entries preview link in backend\n\n    * Improved karmarating plugin to be able to use AJAX calls\n      (gregman)\n\n    * Allow Smarty to fetch .tpl files from all directories so that\n      s9y plugin can use the fetch() call for their .tpl files no\n      matter which (symlinked) directory the plugin resides in.\n      The Smarty security policy to us only serves as a restriction\n      within .tpl files to not allow arbitrary PHP modifier/function calls.\n      If in the future Smarty supports enforcing trustedDir checks on\n      {include} calls separately to smarty->fetch() calls, we'll also\n      add that to .tpl files.\n      (garvinhicking)\n\n    * Patch by Markus Br\ufffdkner: Properly handle files that have no\n      extension in media database\n\n    * Made Spartacus recognize github.com mirror (garvinhicking)\n\n    * Add \"Summary\" output to title of summary archive pages, patch by\n      hboeck\n\n    * Set the smarty object by instance (ophian)\n      It is often needed to access the Smarty object from anywhere in your code, e.g. in plugins\n      We now ensure that there is only one instance of the object available.\n      To obtain an instance of this class: $serendipity['smarty'] = Serendipity_Smarty::getInstance();\n      The first time this is called a new instance will be created. Thereafter, the same instance is handed back.\n      To overwrite use $serendipity['smarty'] = new Serendipity_Smarty; to create a new instance.\n\n    * Set a global Serendipity errorToExceptionHandler (ophian)\n      changed some old smarty trigger_errors to PHPs native function\n\n    * Updated spamblock plugin (ophian)\n      changed wordfilter to function and Commenters moderation check verify_once\n      to get checked via wordfilter to reject known spam comments before\n\n    * Changed backend comment (error) messages  (ophian)\n      as now captured and styleable messages\n      (newly added .serendipity_backend_msg_notice css class)\n\n    * Updated nl2br plugin (ophian)\n      added isolation tag using nl to br\n      this also adds some NoBR buttons to backend entry forms\n\n    * Smarty3 support (ophian)\n      with this upgrade Serendipity / Smarty will at least need a webserver running the PHP 5.2 series.\n      As of August 2011, all PHP users should note, that the PHP 5.2 series is NOT supported anymore by the PHP developers.\n      All users are strongly encouraged to upgrade to PHP 5.3.8 and up. Please refer to your ISP about this.\n\n    * Added new serendipity['defaultBaseURL'] variable that makes sure\n      that the baseURL is not overriden when configuring serendipity\n      with a possibly autodetected currentl URL. Patch by Manko10.\n\n\n(Older NEWS see file NEWS_OLD)", "<?php\n# Copyright (c) 2003-2005, Jannis Hermanns (on behalf the Serendipity Developer Team)\n# All rights reserved.  See LICENSE file for licensing details\n\nif (IN_serendipity !== true) {\n    die (\"Don't hack!\");\n}\n\n/**\n * Delete a category or range of categories\n *\n * @access public\n * @param   string  Holds the SQL string to pass to the 'BETWEEN' command. Like '1 5' would delete categories 1-5.\n * @param   string  Holds the optional SQL string that contains an extra safety check so that only categories can be deleted if the user is an author of the category.\n * @return  array   The DB result\n */\nfunction serendipity_deleteCategory($category_range, $admin_category) {\n    global $serendipity;\n\n    if (!serendipity_checkPermission('adminCategoriesDelete')) {\n        return false;\n    }\n\n    serendipity_plugin_api::hook_event('backend_category_delete', $category_range);\n\n    return serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}category WHERE category_left BETWEEN {$category_range} {$admin_category}\");\n}\n\n/**\n * Fetch a SQL ID subset of the category tree\n *\n * @access public\n * @param   int     The Id of the parent category to fetch categorie childs from. (0: all)\n * @return  array   An associative array of the left and right category next to the chosen one\n */\nfunction serendipity_fetchCategoryRange($categoryid) {\n    global $serendipity;\n\n    $res =& serendipity_db_query(\"SELECT category_left, category_right, hide_sub FROM {$serendipity['dbPrefix']}category WHERE categoryid='\". (int)$categoryid .\"'\");\n    if (!is_array($res) || !isset($res[0]['category_left']) || !isset($res[0]['category_right'])) {\n        $res = array(array('category_left' => 0, 'category_right' => 0));\n    }\n\n    if ($res[0]['hide_sub'] == 1) {\n        // Set ranges only to own category. Patch by netmorix\n        return array('category_left' => $res[0]['category_left'], 'category_right' => $res[0]['category_left']);\n    } else {\n        return array('category_left' => $res[0]['category_left'], 'category_right' => $res[0]['category_right']);\n    }\n}\n\n/**\n * Returns SQL code to use when fetching entries that are contained within multiple categories\n *\n * @access public\n * @param  string   A listing of category ids to check, separated by \";\"\n * @param  boolean  Toggle whether to include or exclude entries of this category\n * @return string   Returns the SQL code for selecting entries of the calculated categories\n */\nfunction serendipity_getMultiCategoriesSQL($cats, $invert = false) {\n    global $serendipity;\n\n    $mcategories   = explode(';', $cats);\n    $cat_sql_array = array();\n    foreach($mcategories AS $categoryid) {\n        $categoryid  = (int)$categoryid;\n\n        if ($categoryid != 0) {\n            $cat_sql_array[] = \" (c.category_left \" . ($invert ? \" NOT \" : \"\") . \" BETWEEN \" . implode(' AND ', serendipity_fetchCategoryRange($categoryid)) . ')';\n        }\n    }\n\n    if (count($cat_sql_array) < 1) {\n        return '';\n    }\n\n    return '(' . implode(($invert ? ' AND ' : ' OR '), $cat_sql_array) . ')';\n}\n\n/**\n * Return the category properties of a specific category\n *\n * Either use the first or the second parameter to select a category by ID or name. It's not\n * meant to be used with both parameters specified.\n *\n * @access public\n * @param   int     The ID of the category to fetch\n * @param   string  The Name of a category to fetch\n * @return  array   Returns an array of category properties\n */\nfunction serendipity_fetchCategoryInfo($categoryid, $categoryname = '') {\n    global $serendipity;\n\n    if (!empty($categoryname)) {\n        $query = \"SELECT\n                         c.authorid,\n                         c.categoryid,\n                         c.category_name,\n                         c.category_description,\n                         c.category_icon,\n                         c.parentid,\n                         c.hide_sub\n                    FROM {$serendipity['dbPrefix']}category AS c\n                   WHERE category_name = '\" . serendipity_db_escape_string($categoryname) . \"'\";\n\n        $ret =& serendipity_db_query($query);\n        return $ret[0];\n    } else {\n        $query = \"SELECT\n                         c.authorid,\n                         c.categoryid,\n                         c.category_name,\n                         c.category_description,\n                         c.category_icon,\n                         c.parentid,\n                         c.hide_sub\n                    FROM {$serendipity['dbPrefix']}category AS c\n                   WHERE categoryid = \" . (int)$categoryid;\n\n        $ret =& serendipity_db_query($query);\n        return $ret[0];\n    }\n}\n\n/**\n * Fetch a list of all category properties to a specific entry ID\n *\n * @access public\n * @param   int     The ID of the entry\n * @return  array   The array of associated categories to that entry\n */\nfunction &serendipity_fetchEntryCategories($entryid) {\n  global $serendipity;\n\n    if (is_numeric($entryid)) {\n        $query = \"SELECT\n                         c.categoryid,\n                         c.category_name,\n                         c.category_description,\n                         c.category_icon,\n                         c.parentid\n                    FROM {$serendipity['dbPrefix']}category AS c\n              INNER JOIN {$serendipity['dbPrefix']}entrycat AS ec\n                      ON ec.categoryid = c.categoryid\n                   WHERE ec.entryid = {$entryid}\n                ORDER BY c.category_name ASC\";\n\n        $cat =& serendipity_db_query($query);\n        if (!is_array($cat)) {\n            $arr = array();\n            return $arr;\n        } else {\n            return $cat;\n        }\n    }\n}\n\n\n/**\n * Fetch a list of entries\n *\n * The most central and versatile function of Serendipity, allows you to fetch entries\n * depending on a LOT of options.\n * One of the parameters missing is a restriction by category. You need to do that by\n * setting the superglobal $serendipity['GET']['category'] to the category you want to fetch.\n * Separate multiple categories by \";\".\n * Other \"external\" variables that affect this function are:\n *  $serendipity['short_archives']      - Indicates if the short archive listing is wanted, without the full entry text\n *  $serendipity['range']               - If $range is not used, the time restriction is fetched from this array, which holds a start timestamp and end timestamp.\n *  $serendipity['GET']['category']     - The category ID to restrict fetching entries from (can be separated by \";\")\n *  $serendipity['GET']['hide_category']- The category ID to NOT fetch entries from (can be separated by \";\")\n *  $serendipity['GET']['viewAuthor']   - Only fetch entries by this author\n *  $serendipity['GET']['page']         - The page number to show entries, for pagination\n *\n * If you want to use any of these options, set the variable before calling serendipity_fetchEntries(). You can reset the variables to their original content after the function call, if you need to.\n *\n * Several options perform different commands when different types are passed, like the $range\n * parameter which can either be a string or an array with START/END range.\n *\n * @access  public\n * @param   mixed       Restricts fetching entries to a specific timespan. Behaves differently depending on the type:\n *                      Numeric:\n *                        YYYYMMDD - Shows all entries from YYYY-MM-DD.\n *                                   If DD is \"00\", it will show all entries from that month.\n *                                   If DD is any other number, it will show entries of that specific day.\n *                      2-Dimensional Array:\n *                        Key #0   - Specifies the start timestamp (unix seconds)\n *                        Key #1   - Specifies the end timestamp (unix seconds)\n *                      Other (null, 3-dimensional Array, ...):\n *                        Entries newer than $modified_since will be fetched\n * @param   boolean     Indicates if the full entry will be fetched (body+extended: TRUE), or only the body (FALSE).\n * @param   string      Holds a \"Y\" or \"X, Y\" string that tells which entries to fetch. X is the first entry offset, Y is number of entries. If not set, the global fetchLimit will be applied (15 entries by default)\n * @param   boolean     Indicates whether drafts should be fetched (TRUE) or not\n * @param   int         Holds a unix timestamp to be used in conjunction with $range, to fetch all entries newer than this timestamp\n * @param   string      Holds the SQL \"ORDER BY\" statement.\n * @param   string      Can contain any SQL code to inject into the central SQL statement for fetching the entry\n * @param   boolean     If set to TRUE, all entries will be fetched from scratch and any caching is ignored\n * @param   boolean     If set to TRUE, all sticky entries will NOT be fetched.\n * @param   string      Can contain a SQL statement on which keys to select. Plugins can also set this, pay attention!\n * @param   string      Can contain a SQL statement on how to group the query. Plugins can also set this, pay attention!\n * @param   string      If set to \"array\", the array of entries will be returned. \"flat-array\" will only return the articles without their entryproperties. \"single\" will only return a 1-dimensional array. \"query\" will only return the used SQL.\n * @param   bool        Should an SQL-join be made to the AUTHORS DB table?\n * @param   bool        Should an SQL-join be made to the CATEGORIES DB table?\n * @param   string      SQL-Parts to add to JOIN\n * @return  array       Holds the super-array of all entries with all additional information\n */\nfunction &serendipity_fetchEntries($range = null, $full = true, $limit = '', $fetchDrafts = false, $modified_since = false, $orderby = 'timestamp DESC', $filter_sql = '', $noCache = false, $noSticky = false, $select_key = null, $group_by = null, $returncode = 'array', $joinauthors = true, $joincategories = true, $joinown = null) {\n    global $serendipity;\n\n    if ($serendipity['useInternalCache']) {\n        $cache = serendipity_setupCache();\n\n        $args = func_get_args();\n        $args = array_values($args);\n        $key = md5(serialize($args));\n\n        if (($entries = $cache->get($key, \"fetchEntries\")) !== false) {\n            return unserialize($entries);\n        }\n    }\n    \n    $cond = array();\n    $cond['orderby'] = $orderby;\n    if (isset($serendipity['short_archives']) && $serendipity['short_archives']) {\n        // In the short listing of all titles for a month, we don't want to have a limit applied. And we don't need/want toe\n        // full article body (consumes memory)\n        $limit   = '';\n        $full    = false;\n    }\n\n    if ($full === true) {\n        $noCache = true; // So no entryproperties related to body/extended caching will be loaded\n        $body = ', e.body, e.extended';\n    } else {\n        $body = '';\n    }\n\n    if ($fetchDrafts === false) {\n        $drafts = \"isdraft = 'false'\";\n    }\n\n    if ($limit != '') {\n        $serendipity['fetchLimit'] = $limit;\n    }\n\n    /* Attempt to grab range from $serendipity, if $range is not an array or null */\n    if (!is_array($range) && !is_null($range) && isset($serendipity['range'])) {\n        $range = $serendipity['range'];\n    }\n\n    if (is_numeric($range)) {\n        $year  = (int)substr($range, 0, 4);\n        $month = (int)substr($range, 4, 2);\n        $day   = (int)substr($range, 6, 2);\n\n        $startts = serendipity_serverOffsetHour(mktime(0, 0, 0, $month, ($day == 0 ? 1 : $day), $year), true);\n\n        if ($day == 0) {\n            $month++;\n        } else {\n            $day++;\n        }\n\n        $endts = serendipity_serverOffsetHour(mktime(0, 0, 0, $month, ($day == 0 ? 1 : $day), $year), true);\n\n        $cond['and'] = \" WHERE e.timestamp >= $startts AND e.timestamp <= $endts\";\n    } elseif (is_array($range) && count($range)==2) {\n        $startts = serendipity_serverOffsetHour((int)$range[0], true);\n        $endts   = serendipity_serverOffsetHour((int)$range[1], true);\n        $cond['and'] = \" WHERE e.timestamp >= $startts AND e.timestamp <= $endts\";\n    } else {\n        if ($modified_since) {\n            $unix_modified = strtotime($modified_since);\n            if ($unix_modified != -1) {\n                $cond['and'] = ' WHERE last_modified >= ' . (int)$unix_modified;\n                if (!empty($limit)) {\n                    $limit = ($limit > $serendipity['max_fetch_limit'] ? $limit : $serendipity['max_fetch_limit']);\n                }\n                $cond['orderby'] = 'last_modified DESC';\n            }\n        }\n    }\n\n    if (!empty($drafts)) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= \" AND $drafts\";\n        } else {\n            $cond['and'] = \"WHERE $drafts\";\n        }\n    }\n\n    if (isset($serendipity['GET']['viewAuthor'])) {\n        $multiauthors = explode(';', $serendipity['GET']['viewAuthor']);\n        $multiauthors_sql = array();\n        foreach($multiauthors AS $multiauthor) {\n            $multiauthors_sql[] = 'e.authorid = ' . (int)$multiauthor;\n        }\n\n        $cond['and'] .= ' AND (' . implode(' OR ', $multiauthors_sql) . ')';\n    }\n\n    $cat_sql = '';\n    if (isset($serendipity['GET']['category'])) {\n        $cat_sql = serendipity_getMultiCategoriesSQL($serendipity['GET']['category']);\n    } elseif (isset($serendipity['GET']['hide_category'])) {\n        $cat_sql = serendipity_getMultiCategoriesSQL($serendipity['GET']['hide_category'], true);\n    }\n\n    if (!empty($cat_sql)) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= \" AND ($cat_sql)\";\n        } else {\n            $cond['and'] = \"WHERE ($cat_sql)\";\n        }\n    }\n\n    if (isset($serendipity['GET']['adminModule']) && $serendipity['GET']['adminModule'] == 'entries' && !serendipity_checkPermission('adminEntriesMaintainOthers')) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= \" AND e.authorid = '\" . $serendipity['authorid'] . \"'\";\n        } else {\n            $cond['and'] = \"WHERE e.authorid = '\" . $serendipity['authorid'] . \"'\";\n        }\n    }\n\n    if (!isset($serendipity['GET']['adminModule']) && !serendipity_db_bool($serendipity['showFutureEntries'])) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= \" AND e.timestamp <= \" . serendipity_db_time();\n        } else {\n            $cond['and'] = \"WHERE e.timestamp <= \" . serendipity_db_time();\n        }\n    }\n\n    if (!empty($filter_sql)) {\n        if (!empty($cond['and'])) {\n            $cond['and'] .= ' AND ' . $filter_sql;\n        } else {\n            $cond['and'] = 'WHERE ' . $filter_sql;\n        }\n    }\n\n    if ($serendipity['dbType'] == 'postgres' ||\n        $serendipity['dbType'] == 'pdo-postgres') {\n        $cond['group']    = '';\n        $cond['distinct'] = 'DISTINCT';\n    } else {\n        $cond['group']    = 'GROUP BY e.id';\n        $cond['distinct'] = '';\n    }\n\n    if (!is_null($group_by)) {\n        $cond['group'] = $group_by;\n    }\n\n    serendipity_plugin_api::hook_event('frontend_fetchentries', $cond, array('noCache' => $noCache, 'noSticky' => $noSticky, 'source' => 'entries'));\n\n    if (is_null($select_key)) {\n        $select_key = \"{$cond['distinct']}\n                    {$cond['addkey']}\n\n                    e.id,\n                    e.title,\n                    e.timestamp,\n                    e.comments,\n                    e.exflag,\n                    e.authorid,\n                    e.trackbacks,\n                    e.isdraft,\n                    e.allow_comments,\n                    e.last_modified,\n\n                    a.realname AS author,\n                    a.username AS loginname,\n                    a.email\";\n    }\n\n    serendipity_ACL_SQL($cond);\n\n    // Store the unique query condition for entries for later reference, like getting the total article count.\n    $serendipity['fullCountQuery'] = \"\n                FROM\n                    {$serendipity['dbPrefix']}entries AS e\";\n    if ($joinauthors) {\n        $serendipity['fullCountQuery'] .= \"\n                    LEFT JOIN {$serendipity['dbPrefix']}authors a\n                        ON e.authorid = a.authorid\";\n    }\n\n    if ($joincategories || !isset($serendipity['enableACL']) || $serendipity['enableACL'] == true) {\n        // Category joins are REQUIRED when the ACLs are enabled.\n        $serendipity['fullCountQuery'] .= \"\n                    LEFT JOIN {$serendipity['dbPrefix']}entrycat ec\n                        ON e.id = ec.entryid\n                    LEFT JOIN {$serendipity['dbPrefix']}category c\n                        ON ec.categoryid = c.categoryid\";\n    }\n\n    if ($joinown) {\n        $cond['joins'] .= $joinown;\n    }\n\n    $serendipity['fullCountQuery'] .=\"\n                    {$cond['joins']}\n                    {$cond['and']}\";\n\n    if (!empty($limit)) {\n        if (isset($serendipity['GET']['page']) && ($serendipity['GET']['page'] > 1 || serendipity_db_bool($serendipity['archiveSortStable'])) && !strstr($limit, ',')) {\n            if (serendipity_db_bool($serendipity['archiveSortStable'])) {\n                $totalEntries = serendipity_getTotalEntries();\n\n                $totalPages = ceil($totalEntries / $limit);\n                if ($totalPages <= 0 ) {\n                    $totalPages = 1;\n                }\n\n                if ($serendipity['GET']['page'] == $totalPages) {\n                    $limit = serendipity_db_limit(0, $limit);\n                } else if ($serendipity['GET']['page'] == $totalPages - 1) {\n                    $limit = serendipity_db_limit($limit, ($totalEntries - (($totalPages -2) * $limit)) - $limit);\n                } else {\n                    $limit = serendipity_db_limit(max(0, ($totalEntries - ($limit * $serendipity['GET']['page']))), $limit);\n                }\n            } else {\n                $limit = serendipity_db_limit(($serendipity['GET']['page']-1) * $limit, $limit);\n            }\n        }\n\n        $limit = serendipity_db_limit_sql($limit);\n    }\n\n    $query = \"SELECT $select_key\n                     $body\n                     {$serendipity['fullCountQuery']}\n                     {$cond['group']}\n                     {$cond['having']}\n                     \" . (!empty($cond['orderby']) ? \"ORDER BY {$cond['orderby']}\" : \"\") . \"\n                     $limit\";\n\n    // DEBUG:\n    // die($query);\n    $fetch_single = ($returncode == 'single' ? true: false);\n\n    if ($returncode == 'query') {\n        return $query;\n    }\n\n    $ret =& serendipity_db_query($query, $fetch_single, 'assoc');\n\n    if (is_string($ret)) {\n        die(\"Query failed: $ret\");\n    }\n\n    if (is_array($ret) && $returncode == 'array') {\n        // The article's query LIMIT operates on a flattened entries layer so that\n        // an article having 5 associated categories won't count as 5 entries.\n        // But to store the expanded list of categories, we need to send a new\n        // query once for all entries we have just fetched.\n        // First code for this was sending 15 queries for 15 fetched entries,\n        // this is now limited to just one query per fetched articles group\n\n        serendipity_fetchEntryData($ret);\n    }\n\n    if ($serendipity['useInternalCache']) {\n        $args = func_get_args();\n        $args = array_values($args);\n        $key = md5(serialize($args));\n        $cache->save(serialize($ret), $key, \"fetchEntries\");\n    }\n\n    return $ret;\n}\n\n/**\n * Fetch special entry data and attach it to a superarray of entries.\n *\n * Fetches all additional information like plugins, extended properties, additional categories for each entry.\n *\n * @access private\n * @see serendipity_fetchEntries()\n * @param   array       The array of entries where the output will be merged to (referenced)\n * @return null\n */\nfunction serendipity_fetchEntryData(&$ret) {\n    global $serendipity;\n\n    $search_ids = array(); // An array to hold all ids of the entry we want to fetch.\n    $assoc_ids  = array(); // A temporary key association container to not have to loop through the return array once again.\n\n    foreach($ret AS $i => $entry) {\n        $search_ids[]            = $entry['id'];\n        $ret[$i]['categories']   = array();        // make sure every article gets its category association\n        $assoc_ids[$entry['id']] = $i;             // store temporary reference\n    }\n\n    serendipity_plugin_api::hook_event('frontend_entryproperties', $ret, $assoc_ids);\n\n    $query = \"SELECT\n                     ec.entryid,\n                     c.categoryid,\n                     c.category_name,\n                     c.category_description,\n                     c.category_icon,\n                     c.parentid\n                FROM {$serendipity['dbPrefix']}category AS c\n           LEFT JOIN {$serendipity['dbPrefix']}entrycat AS ec\n                  ON ec.categoryid = c.categoryid\n               WHERE \" . serendipity_db_in_sql('ec.entryid', $search_ids) . \"\n            ORDER BY c.category_name ASC\";\n\n    $search_ret =& serendipity_db_query($query, false, 'assoc');\n\n    if (is_array($search_ret)) {\n        foreach($search_ret AS $i => $entry) {\n            $ret[$assoc_ids[$entry['entryid']]]['categories'][] = $entry;\n        }\n    }\n}\n\n/**\n * Fetch a single entry by a specific condition\n *\n * @access public\n * @param   string      The column to compare $val against (like 'id')\n * @param   string      The value of the colum $key to compare with (like '4711')\n * @param   boolean     Indicates if the full entry will be fetched (body+extended: TRUE), or only the body (FALSE). (Unused, keep for compat.)\n * @param   string      Indicates whether drafts should be fetched\n * @return\n */\nfunction &serendipity_fetchEntry($key, $val, $full = true, $fetchDrafts = 'false') {\n    global $serendipity;\n\n    $cond = array();\n    $cond['and'] = \" \"; // intentional dummy string to attach dummy AND parts to the WHERE clauses\n\n    if ($fetchDrafts == 'false') {\n        $cond['and'] = \" AND e.isdraft = 'false' \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND e.timestamp <= \" . serendipity_db_time() : '');\n    }\n\n    if (isset($serendipity['GET']['adminModule']) && $serendipity['GET']['adminModule'] == 'entries' && !serendipity_checkPermission('adminEntriesMaintainOthers')) {\n        $cond['and'] = \" AND e.authorid = '\" . $serendipity['authorid'] . \"'\";\n    }\n\n    serendipity_ACL_SQL($cond, true);\n\n    serendipity_plugin_api::hook_event('frontend_fetchentry', $cond, array('noSticky' => true));\n\n    $querystring = \"SELECT  e.id,\n                            e.title,\n                            e.timestamp,\n                            e.body,\n                            e.comments,\n                            e.trackbacks,\n                            e.extended,\n                            e.exflag,\n                            e.authorid,\n                            e.isdraft,\n                            e.allow_comments,\n                            e.last_modified,\n                            e.moderate_comments,\n\n                            a.realname AS author,\n                            a.username AS loginname,\n                            a.email\n                      FROM\n                            {$serendipity['dbPrefix']}entries e\n                 LEFT JOIN  {$serendipity['dbPrefix']}authors a\n                        ON  e.authorid = a.authorid\n                            {$cond['joins']}\n                     WHERE\n                            e.$key \" . ($key == 'id' ? '=' : 'LIKE') . \" '\" . serendipity_db_escape_string($val) . \"'\n                            {$cond['and']}\n\n                            {$cond['single_group']}\n                            {$cond['single_having']}\n                            {$cond['single_orderby']}\n                     LIMIT  1\";\n\n    $ret =& serendipity_db_query($querystring, true, 'assoc');\n\n    if (is_array($ret)) {\n        $ret['categories'] =& serendipity_fetchEntryCategories($ret['id']);\n        $ret['properties'] =& serendipity_fetchEntryProperties($ret['id']);\n        $stack     = array();\n        $stack[0]  = &$ret;\n        $assoc_ids = array($ret['id'] => 0);\n        serendipity_plugin_api::hook_event('frontend_entryproperties', $stack, $assoc_ids);\n    }\n\n    return $ret;\n}\n\n/**\n * Fetches additional entry properties for a specific entry ID\n *\n * @access public\n * @param   int     The ID of the entry to fetch additonal data for\n * @return  array   The array of given properties to an entry\n */\nfunction &serendipity_fetchEntryProperties($id) {\n    global $serendipity;\n\n    $parts = array();\n    serendipity_plugin_api::hook_event('frontend_entryproperties_query', $parts);\n\n    $_properties =& serendipity_db_query(\"SELECT property, value FROM {$serendipity['dbPrefix']}entryproperties WHERE entryid = \" . (int)$id . \" \" . $parts['and']);\n    if (!is_array($_properties)) {\n        $properties = array();\n    } else {\n        $properties =& $_properties;\n    }\n\n    $property = array();\n    foreach($properties AS $idx => $row) {\n        $property[$row['property']] =& $row['value'];\n    }\n\n    return $property;\n}\n\n/**\n * Fetch a list of available categories for an author\n *\n * @access public\n * @param   mixed   If set, the list of categories will be fetched according to the author id. If not set, all categories will be fetched. If set to \"all\", then all categories will be fetched.\n * @param   string  Restrict the list to be returned to a specific category NAME.\n * @param   string  The SQL query part for ORDER BY of the categories\n * @param   string  The ACL artifact condition. If set to \"write\" only categories will be shown that the author can write to. If set to \"read\", only categories will be show that the author can read or write to.\n * @return  array   Returns the array of categories\n */\nfunction &serendipity_fetchCategories($authorid = null, $name = null, $order = null, $artifact_mode = 'write', $flat = false) {\n    global $serendipity;\n\n    if ($name === null) {\n        $name = '';\n    }\n\n    if ($order === null) {\n        $order = 'category_name ASC';\n    }\n\n    if (!isset($authorid) || $authorid === null) {\n        $authorid = ((isset($serendipity['authorid']) && !empty($serendipity['GET']['adminModule'])) ? $serendipity['authorid'] : 1);\n    }\n\n    if (isset($serendipity['authorid']) && !empty($serendipity['GET']['adminModule']) && $authorid != $serendipity['authorid'] && !serendipity_checkPermission('adminCategoriesMaintainOthers')) {\n        $authorid = $serendipity['authorid'];\n    }\n\n    $where = '';\n\n    if ($authorid === -1 OR $authorid === 0) {\n        $sql_groupid = '0';\n    } else {\n        $sql_groupid = 'ag.groupid';\n    }\n\n    if ($authorid != 'all' && is_numeric($authorid)) {\n        $sql_authorid = $authorid;\n        if (!serendipity_checkPermission('adminCategoriesMaintainOthers', $authorid)) {\n            $where = \" WHERE (c.authorid = $authorid OR c.authorid = 0) \";\n            $where .= \"OR (\n                          acl.artifact_type = 'category'\n                          AND acl.artifact_mode = '\" . serendipity_db_escape_string($artifact_mode) . \"'\n                         ) \";\n\n        }\n    } else {\n        $sql_authorid = 'c.authorid';\n        $where = '';\n    }\n\n    if (!empty($name)) {\n        if ($where == '') {\n            $where = ' WHERE ';\n        } else {\n            $where = ' AND ';\n        }\n\n        $where .= \" c.category_name = '\" . serendipity_db_escape_string($name) . \"'\";\n    }\n\n    if ($serendipity['dbType'] == 'postgres' ||\n        $serendipity['dbType'] == 'pdo-postgres') {\n        $group    = '';\n        $distinct = 'DISTINCT';\n    } else {\n        $group    = 'GROUP BY c.categoryid';\n        $distinct = '';\n    }\n\n    $querystring = \"SELECT $distinct c.categoryid,\n                           c.category_name,\n                           c.category_icon,\n                           c.category_description,\n                           c.authorid,\n                           c.category_left,\n                           c.category_right,\n                           c.parentid,\n\n                           a.username,\n                           a.username AS loginname,\n                           a.realname\n                      FROM {$serendipity['dbPrefix']}category AS c\n           LEFT OUTER JOIN {$serendipity['dbPrefix']}authors AS a\n                        ON c.authorid = a.authorid\n           LEFT OUTER JOIN {$serendipity['dbPrefix']}authorgroups AS ag\n                        ON ag.authorid = $sql_authorid\n           LEFT OUTER JOIN {$serendipity['dbPrefix']}access AS acl\n                        ON ($sql_groupid = acl.groupid AND acl.artifact_id = c.categoryid)\n                           $where\n                           $group\";\n    if (!empty($order)) {\n        $querystring .= \"\\n ORDER BY $order\";\n    }\n\n    $ret =& serendipity_db_query($querystring);\n    if (is_string($ret)) {\n        echo \"Query failed: $ret\";\n    } else {\n        if ($flat) {\n          $cats = serendipity_walkRecursive($ret, 'categoryid', 'parentid', VIEWMODE_THREADED);\n          $flat_cats = array();\n          $flat_cats[0] = NO_CATEGORY;\n          foreach($cats AS $catidx => $catdata) {\n              $flat_cats[$catdata['categoryid']] = str_repeat('&nbsp;', $catdata['depth']*2) . serendipity_specialchars($catdata['category_name']);\n          }\n          return $flat_cats;\n        }\n    }\n    return $ret;\n}\n\n/**\n * Rebuild the Category Nested Set tree\n *\n * @access public\n * @see Based on http://www.sitepoint.com/article/hierarchical-data-database/1\n * @param   int     The ID of the parent category to rebuild\n * @param   int     The ID of the next left category\n * @return  int     Returns the new ID\n */\nfunction serendipity_rebuildCategoryTree($parent = 0, $left = 0) {\n    global $serendipity;\n    $right = $left + 1;\n\n    $result = serendipity_db_query(\"SELECT categoryid FROM {$serendipity['dbPrefix']}category WHERE parentid = '\" . (int)$parent . \"'\");\n    if ( is_array($result) ) {\n        foreach ( $result as $category ) {\n            $right = serendipity_rebuildCategoryTree($category['categoryid'], $right);\n        }\n    }\n    if ( $parent > 0 ) {\n        serendipity_db_query(\"UPDATE {$serendipity['dbPrefix']}category SET category_left='{$left}', category_right='{$right}' WHERE categoryid='{$parent}'\");\n    }\n\n    return $right + 1;\n}\n\n/**\n * Searches the list of entries by a specific term\n *\n * @todo: Allow to show results of staticpage plugins or others\n * @access public\n * @param   string      The searchterm (may contain wildcards)\n * @param   int         Restrict the number of results [also uses $serendipity['GET']['page'] for pagination]\n * @param   array       Add search Results at the top\n * @return  array       Returns the superarray of entries found\n */\nfunction &serendipity_searchEntries($term, $limit = '', $searchresults = '') {\n    global $serendipity;\n    static $log_queries = false;\n\n    if ($log_queries) {\n        $fp = fopen($serendipity['serendipityPath'] . '/archives/queries.csv', 'a');\n        fwrite($fp, date('Y-m-d H:i') . ';'\n                    . $_SERVER['REMOTE_ADDR'] . ';'\n                    . $term . \"\\n\");\n        fclose($fp);\n    }\n\n    $orig_limit = $limit;\n    if ($limit == '') {\n        $limit = $serendipity['fetchLimit'];\n    }\n\n    if (isset($serendipity['GET']['page']) && $serendipity['GET']['page'] > 1 && !strstr($limit, ',')) {\n        $limit = serendipity_db_limit(($serendipity['GET']['page']-1) * $limit, $limit);\n    }\n\n    $limit = serendipity_db_limit_sql($limit);\n\n    $term = serendipity_db_escape_string($term);\n    $cond = array();\n    $relevance_enabled = false;\n    if ($serendipity['dbType'] == 'postgres' ||\n        $serendipity['dbType'] == 'pdo-postgres') {\n        $cond['group']     = '';\n        $cond['distinct']  = 'DISTINCT';\n\n        $r = serendipity_db_query(\"SELECT count(routine_name) AS counter\n                                     FROM information_schema.routines\n                                    WHERE routine_name LIKE 'to_tsvector'\n                                      AND specific_catalog = '\" . $serendipity['dbName'] . \"'\");\n        if (is_array($r) && $r[0]['counter'] > 0) {\n            $term = str_replace('&amp;', '&', $term);\n            $cond['find_part'] = \"(\n            to_tsvector('english', title)    @@to_tsquery('$term') OR\n            to_tsvector('english', body)     @@to_tsquery('$term') OR\n            to_tsvector('english', extended) @@to_tsquery('$term')\n            )\";\n        } else {\n            $cond['find_part'] = \"(title ILIKE '%$term%' OR body ILIKE '%$term%' OR extended ILIKE '%$term%')\";\n        }\n    } elseif ($serendipity['dbType'] == 'sqlite' || $serendipity['dbType'] == 'sqlite3' || $serendipity['dbType'] == 'pdo-sqlite' || $serendipity['dbType'] == 'sqlite3oo') {\n        // Very extensive SQLite search. There currently seems no other way to perform fulltext search in SQLite\n        // But it's better than no search at all :-D\n        $term = str_replace('*', '%', $term);\n        $cond['group']     = 'GROUP BY e.id';\n        $cond['distinct']  = '';\n        $term              = serendipity_mb('strtolower', $term);\n        $cond['find_part'] = \"(lower(title) LIKE '%$term%' OR lower(body) LIKE '%$term%' OR lower(extended) LIKE '%$term%')\";\n    } else {\n        $cond['group']    = 'GROUP BY e.id';\n        $cond['distinct'] = '';\n        $term             = str_replace('&quot;', '\"', $term);\n        $relevance_enabled = true;\n        if (preg_match('@[\"\\+\\-\\*~<>\\(\\)]+@', $term)) {\n            $cond['find_part'] = \"MATCH(title,body,extended) AGAINST('$term' IN BOOLEAN MODE)\";\n        } else {\n            $cond['find_part'] = \"MATCH(title,body,extended) AGAINST('$term')\";\n        }\n    }\n\n    switch($serendipity['searchsort']) {\n        case 'relevance':\n            if ($relevance_enabled) {\n                $cond['searchorderby'] = $cond['find_part'] . \" DESC\";\n            } else {\n                $cond['searchorderby'] = \"timestamp DESC\";\n            }\n            break;\n\n        case 'timestamp':\n        default:\n            $cond['searchorderby'] = \"timestamp DESC\";\n            break;\n    }\n\n    $cond['and'] = \" AND isdraft = 'false' \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND timestamp <= \" . serendipity_db_time() : '');\n    serendipity_plugin_api::hook_event('frontend_fetchentries', $cond, array('source' => 'search', 'term' => $term));\n    serendipity_ACL_SQL($cond, 'limited');\n\n    $serendipity['fullCountQuery'] = \"\n                      FROM\n                            {$serendipity['dbPrefix']}entries e\n                 LEFT JOIN  {$serendipity['dbPrefix']}authors a\n                        ON  e.authorid = a.authorid\n                 LEFT JOIN  {$serendipity['dbPrefix']}entrycat ec\n                        ON  e.id = ec.entryid\n                            {$cond['joins']}\n                     WHERE\n                            ({$cond['find_part']})\n                            {$cond['and']}\";\n\n    $querystring = \"SELECT {$cond['distinct']}\n                            {$cond['addkey']}\n                            e.id,\n                            e.authorid,\n                            a.realname AS author,\n                            e.allow_comments,\n                            e.moderate_comments,\n                            a.email,\n                            e.timestamp,\n                            e.comments,\n                            e.title,\n                            e.body,\n                            e.extended,\n                            e.trackbacks,\n                            e.exflag,\n                            e.isdraft,\n                            e.last_modified,\n                            a.username AS loginname\n                    {$serendipity['fullCountQuery']}\n                    {$cond['group']}\n                    {$cond['having']}\n                  ORDER BY  {$cond['searchorderby']}\n                    $limit\";\n\n    $search =& serendipity_db_query($querystring);\n\n    //Add param searchresults at the top and remove duplicates.\n    if (is_array($searchresults)) {\n        $ids_current = array();\n        foreach($searchresults AS $idx => $data) {\n            $ids_current[$data['id']] = true;\n        }\n\n        foreach($search AS $idx => $data) {\n            if (isset($ids_current[$data['id']])) {\n                unset($search[$idx]);\n            }\n        }\n        $search = array_merge($searchresults, $search);\n    }\n    \n    //if * wasn't already appended and if there are none or not enough\n    //results, search again for entries containing the searchterm as a part\n    if (strpos($term, '*') === false && $serendipity['dbType'] != 'sqlite' && $serendipity['dbType'] != 'sqlite3' && $serendipity['dbType'] != 'pdo-sqlite' && $serendipity['dbType'] != 'sqlite3oo') {\n        if (! is_array($search)) {\n            return serendipity_searchEntries($term.'*', $orig_limit);\n        } else {\n            $ec = count($search);\n            $checkcount = 4;\n            if ($serendipity['fetchLimit'] < $checkcount) {\n                $checkcount = $serendipity['fetchLimit'];\n            }\n            if ($ec < $checkcount) {\n                return serendipity_searchEntries($term.'*', $orig_limit, $search);\n            }\n        }\n    }\n\n    if (is_array($search)){\n        serendipity_fetchEntryData($search);\n    }\n\n    return $search;\n}\n\n/**\n * Creates the Footer below the entries, with pagination options and parses it to Smarty\n *\n * The list of total entries is calculated from the serendipity_getTotelEntries() function\n *\n * @param string    suffix for URLs\n * @param int       Amount of total entries\n * @access public\n * @see serendipity_getTotalEntries()\n * @return null\n */\nfunction serendipity_printEntryFooter($suffix = '.html', $totalEntries = null) {\n    global $serendipity;\n\n    if ($totalEntries === null) {\n        $totalEntries = serendipity_getTotalEntries();\n    }\n\n    $limits = explode(',', $serendipity['fetchLimit']);\n    if (!empty($limits[1])) {\n        $limit = (int)$limits[1];\n    } else {\n        $limit = (int)$limits[0];\n    }\n    $totalPages = ceil($totalEntries / $limit);\n\n    if ($totalPages <= 0 ) {\n        $totalPages = 1;\n    }\n    \n    if (!isset($serendipity['GET']['page']) && serendipity_db_bool($serendipity['archiveSortStable']) && $serendipity['GET']['action'] != 'search') {\n        $serendipity['GET']['page'] = $totalPages;\n    } else if (!isset($serendipity['GET']['page'])) {\n        $serendipity['GET']['page'] = 1;\n    }\n\n    if ($serendipity['GET']['page'] > 1) {\n        $uriArguments = $serendipity['uriArguments'];\n        $uriArguments[] = 'P'. ($serendipity['GET']['page'] - 1);\n        $serendipity['smarty']->assign('footer_prev_page', serendipity_rewriteURL(str_replace('//', '/', implode('/', $uriArguments)) . $suffix));\n    }\n\n    $uriArguments = $serendipity['uriArguments'];\n    $uriArguments[] = 'P%s';\n    $serendipity['smarty']->assign('footer_totalEntries', $totalEntries);\n    $serendipity['smarty']->assign('footer_totalPages', $totalPages);\n    if (serendipity_db_bool($serendipity['archiveSortStable']) && $serendipity['GET']['action'] != 'search') {\n        $serendipity['smarty']->assign('footer_currentPage', $totalPages - $serendipity['GET']['page']);\n    } else {\n        $serendipity['smarty']->assign('footer_currentPage', $serendipity['GET']['page']);\n    }\n    $serendipity['smarty']->assign('footer_pageLink', str_replace('%2A', '*', serendipity_rewriteURL(implode('/', $uriArguments) . $suffix)));\n    $serendipity['smarty']->assign('footer_info', sprintf(PAGE_BROWSE_ENTRIES, serendipity_db_bool($serendipity['archiveSortStable']) && $serendipity['GET']['action'] != 'search' ?  $totalPages - (int)$serendipity['GET']['page'] +1 : (int)$serendipity['GET']['page'], $totalPages, $totalEntries));\n\n    if ($serendipity['GET']['page'] < $totalPages) {\n        $uriArguments = $serendipity['uriArguments'];\n        $uriArguments[] = 'P'. ($serendipity['GET']['page'] + 1);\n        $serendipity['smarty']->assign('footer_next_page', serendipity_rewriteURL(str_replace('//', '/', implode('/', $uriArguments)) . $suffix));\n    }\n\n    if (serendipity_db_bool($serendipity['archiveSortStable']) && $serendipity['GET']['action'] != 'search') {\n        $temp = $serendipity['smarty']->getTemplateVars('footer_prev_page');\n        $serendipity['smarty']->assign('footer_prev_page', $serendipity['smarty']->getTemplateVars('footer_next_page'));\n        $serendipity['smarty']->assign('footer_next_page', $temp);\n    }\n}\n\n/**\n * Calculates the amount of available entries.\n *\n * This function uses the SQL query portion of the central serendipity_fetchEntries() query\n * and modifies it with different GROUP statements to calculate the number of entries.\n *\n * @access public\n * @see serendipity_fetchEntries()\n * @return int      The number of total entries\n */\nfunction serendipity_getTotalEntries() {\n    global $serendipity;\n\n    // The unique query condition was built previously in serendipity_fetchEntries()\n    if ($serendipity['dbType'] == 'sqlite' || $serendipity['dbType'] == 'sqlite3' || $serendipity['dbType'] == 'pdo-sqlite' || $serendipity['dbType'] == 'sqlite3oo') {\n        $querystring  = \"SELECT count(e.id) {$serendipity['fullCountQuery']} GROUP BY e.id\";\n    } else {\n        $querystring  = \"SELECT count(distinct e.id) {$serendipity['fullCountQuery']}\";\n    }\n\n    $query =& serendipity_db_query($querystring);\n\n    if (is_array($query) && isset($query[0])) {\n        if ($serendipity['dbType'] == 'sqlite' || $serendipity['dbType'] == 'sqlite3' || $serendipity['dbType'] == 'pdo-sqlite' || $serendipity['dbType'] == 'sqlite3oo') {\n            return count($query);\n        } else {\n            return $query[0][0];\n        }\n    }\n\n    return 0;\n}\n\n/**\n * Passes the list of fetched entries from serendipity_fetchEntries() on to the Smarty layer\n *\n * This function contains all the core logic to group and prepare entries to be shown in your\n * $entries.tpl template. It groups them by date, so that you can easily loop on the set of\n * entries.\n * This function is not only used for printing all entries, but also for printing individual\n * entries.\n * Several central Event hooks are executed here for the whole page flow, like header+footer data.\n *\n * @see serendipity_fetchEntries()\n * @see serendipity_searchEntries()\n * @access public\n * @param   array       The array of entries with all of its data\n * @param   boolean     Toggle whether the extended portion of an entry is requested (via $serendipity['GET']['id'] single entry view)\n * @param   boolean     Indicates if this is a preview\n * @param   string      The name of the SMARTY block that this gets parsed into\n * @param   boolean     Indicates whether the assigned smarty variables should be parsed. When set to \"return\", no smarty parsing is done.\n * @param   boolean     Indicates whether to apply footer/header event hooks\n * @param   boolean     Indicates whether the pagination footer should be displayed\n * @param   mixed       Indicates whether the input $entries array is already grouped in preparation for the smarty $entries output array [TRUE], or if it shall be grouped by date [FALSE] or if a plugin hook shall be executed to modify data ['plugin']. This setting can also be superseded by a 'entry_display' hook.\n * @return\n */\nfunction serendipity_printEntries($entries, $extended = 0, $preview = false, $smarty_block = 'ENTRIES', $smarty_fetch = true, $use_hooks = true, $use_footer = true, $use_grouped_array = false) {\n    global $serendipity;\n\n    if (!is_object($serendipity['smarty'])) {\n        serendipity_smarty_init(); // if not set, start Smarty templating to avoid member function \"method()\" on a non-object errors (was draft preview error, now at line 1239)\n    }\n\n    if ($use_hooks) {\n        $addData = array('extended' => $extended, 'preview' => $preview);\n        serendipity_plugin_api::hook_event('entry_display', $entries, $addData);\n\n        if (isset($entries['clean_page']) && $entries['clean_page'] === true) {\n            if ($serendipity['view'] == '404') {\n                $serendipity['view'] = 'plugin';\n            }\n\n            $serendipity['smarty']->assign(array(\n                'plugin_clean_page' => true,\n                'view'              => $serendipity['view'])\n            );\n            serendipity_smarty_fetch($smarty_block, 'entries.tpl', true);\n            return; // no display of this item\n        }\n    }\n\n    // We shouldn't return here, because we want Smarty to handle the output\n    if (!is_array($entries) || $entries[0] == false || !isset($entries[0]['timestamp'])) {\n        $entries = array();\n    }\n\n    // A plugin executed in entry_display should be able to change the way of ordering entries. Forward-Thinking. ;)\n    if (isset($entries['use_grouped_array'])) {\n        $use_grouped_array = $entries['use_grouped_array'];\n    }\n\n    if ($use_grouped_array === false) {\n        // Use grouping by date (default)\n        $dategroup = array();\n        for ($x = 0, $num_entries = count($entries); $x < $num_entries; $x++) {\n            if (!empty($entries[$x]['properties']['ep_is_sticky']) && serendipity_db_bool($entries[$x]['properties']['ep_is_sticky'])) {\n                $entries[$x]['is_sticky'] = true;\n                $key = 'sticky';\n            } else {\n                $key = date('Ymd', serendipity_serverOffsetHour($entries[$x]['timestamp']));\n            }\n\n            $dategroup[$key]['date']        = $entries[$x]['timestamp'];\n            $dategroup[$key]['is_sticky']   = (isset($entries[$x]['is_sticky']) && (serendipity_db_bool($entries[$x]['is_sticky']) ? true : false));\n            $dategroup[$key]['entries'][]   = &$entries[$x];\n        }\n    } elseif ($use_grouped_array === 'plugin') {\n        // Let a plugin do the grouping\n        serendipity_plugin_api::hook_event('entry_groupdata', $entries);\n        $dategroup =& $entries;\n    } else {\n        $dategroup =& $entries;\n    }\n\n    foreach($dategroup as $dategroup_idx => $properties) {\n        foreach($properties['entries'] as $x => $_entry) {\n            if ($smarty_fetch === 'return') {\n                $entry = &$dategroup[$dategroup_idx]['entries'][$x]; // PHP4 Compat\n            } else {\n                // DISABLED - made problems with custom plugins\n                // $entry = &$properties['entries'][$x]; // PHP4 Compat\n                $entry = &$dategroup[$dategroup_idx]['entries'][$x]; // PHP4 Compat\n            }\n\n            if (!empty($entry['properties']['ep_cache_body'])) {\n                $entry['pre_body']  = $entry['body'];\n                $entry['body']      = &$entry['properties']['ep_cache_body'];\n                $entry['is_cached'] = true;\n            }\n\n            //--JAM: Highlight-span search terms\n            if ($serendipity['action'] == 'search') {\n                $searchterms = str_replace('\"', '', $serendipity['GET']['searchterms']);\n                $searchterms = explode($searchterms, ' ');\n                foreach($searchterms as $searchdx => $searchterm) {\n                    $searchclass = \"foundterm foundterm\".$searchdx;\n                    $entry['body'] = str_replace($searchterm, '<span class=\"'.$searchclass.'\">' . $searchterm . '</span>', $entry['body']);\n                }\n            }\n\n            if (!empty($entry['properties']['ep_cache_extended'])) {\n                $entry['pre_extended']  = $entry['extended'];\n                $entry['extended']  = &$entry['properties']['ep_cache_extended'];\n                $entry['is_cached'] = true;\n            }\n\n            if ($preview) {\n                $entry['author']   = $entry['realname'];\n                $entry['authorid'] = $serendipity['authorid'];\n            }\n\n            $addData = array('from' => 'functions_entries:printEntries');\n            if ($entry['is_cached']) {\n                $addData['no_scramble'] = true;\n            }\n            serendipity_plugin_api::hook_event('frontend_display', $entry, $addData);\n\n            if ($preview) {\n                $entry['author']   = $entry['realname'];\n                $entry['authorid'] = $serendipity['authorid'];\n            }\n\n            $entry['author'] = serendipity_specialchars($entry['author']);\n\n            $authorData = array(\n                            'authorid' => $entry['authorid'],\n                            'username' => $entry['loginname'],\n                            'email'    => $entry['email'],\n                            'realname' => $entry['author']\n            );\n\n            $entry['link']       = serendipity_archiveURL($entry['id'], $entry['title'], 'serendipityHTTPPath', true, array('timestamp' => $entry['timestamp']));\n            $entry['commURL']    = serendipity_archiveURL($entry['id'], $entry['title'], 'baseURL', false, array('timestamp' => $entry['timestamp']));\n            $entry['html_title'] = $entry['title'];\n            $entry['title']      = serendipity_specialchars($entry['title']);\n\n            $entry['title_rdf']  = preg_replace('@-{2,}@', '-', $entry['html_title']);\n            $entry['rdf_ident']  = serendipity_archiveURL($entry['id'], $entry['title_rdf'], 'baseURL', true, array('timestamp' => $entry['timestamp']));\n            $entry['link_rdf']   = serendipity_rewriteURL(PATH_FEEDS . '/ei_'. $entry['id'] .'.rdf');\n            $entry['title_rdf']  = serendipity_specialchars($entry['title_rdf']);\n\n            $entry['link_allow_comments']    = $serendipity['baseURL'] . 'comment.php?serendipity[switch]=enable&amp;serendipity[entry]=' . $entry['id'];\n            $entry['link_deny_comments']     = $serendipity['baseURL'] . 'comment.php?serendipity[switch]=disable&amp;serendipity[entry]=' . $entry['id'];\n            $entry['allow_comments']         = serendipity_db_bool($entry['allow_comments']);\n            $entry['moderate_comments']      = serendipity_db_bool($entry['moderate_comments']);\n            $entry['viewmode']               = ($serendipity['GET']['cview'] == VIEWMODE_LINEAR ? VIEWMODE_LINEAR : VIEWMODE_THREADED);\n            $entry['link_popup_comments']    = $serendipity['serendipityHTTPPath'] .'comment.php?serendipity[entry_id]='. $entry['id'] .'&amp;serendipity[type]=comments';\n            $entry['link_popup_trackbacks']  = $serendipity['serendipityHTTPPath'] .'comment.php?serendipity[entry_id]='. $entry['id'] .'&amp;serendipity[type]=trackbacks';\n            $entry['link_edit']              = $serendipity['baseURL'] .'serendipity_admin.php?serendipity[action]=admin&amp;serendipity[adminModule]=entries&amp;serendipity[adminAction]=edit&amp;serendipity[id]='. $entry['id'];\n            $entry['link_trackback']         = $serendipity['baseURL'] .'comment.php?type=trackback&amp;entry_id='. $entry['id'];\n            $entry['link_viewmode_threaded'] = $serendipity['serendipityHTTPPath'] . $serendipity['indexFile'] .'?url='. $entry['commURL'] .'&amp;serendipity[cview]='. VIEWMODE_THREADED;\n            $entry['link_viewmode_linear']   = $serendipity['serendipityHTTPPath'] . $serendipity['indexFile'] .'?url='. $entry['commURL'] .'&amp;serendipity[cview]='. VIEWMODE_LINEAR;\n            $entry['link_author']            = serendipity_authorURL($authorData);\n\n            if (is_array($entry['categories'])) {\n                foreach ($entry['categories'] as $k => $v) {\n                    if (!isset($entry['categories'][$k]['category_link'])) {\n                        $entry['categories'][$k]['category_link'] =  serendipity_categoryURL($entry['categories'][$k]);\n                    }\n                }\n            }\n\n            if (strlen($entry['extended'])) {\n                $entry['has_extended']      = true;\n            }\n\n            if (isset($entry['exflag']) && $entry['exflag'] && ($extended || $preview)) {\n                $entry['is_extended']       = true;\n            }\n\n            if (serendipity_db_bool($entry['allow_comments']) || !isset($entry['allow_comments']) || $entry['comments'] > 0) {\n                $entry['has_comments']      = true;\n                $entry['label_comments']    = $entry['comments'] == 1 ? COMMENT : COMMENTS;\n            }\n\n            if (serendipity_db_bool($entry['allow_comments']) || !isset($entry['allow_comments']) || $entry['trackbacks'] > 0) {\n                $entry['has_trackbacks']    = true;\n                $entry['label_trackbacks']  = $entry['trackbacks'] == 1 ? TRACKBACK : TRACKBACKS;\n            }\n\n            if ($_SESSION['serendipityAuthedUser'] === true && ($_SESSION['serendipityAuthorid'] == $entry['authorid'] || serendipity_checkPermission('adminEntriesMaintainOthers'))) {\n                $entry['is_entry_owner']    = true;\n            }\n\n            $entry['display_dat'] = '';\n            serendipity_plugin_api::hook_event('frontend_display:html:per_entry', $entry);\n            $entry['plugin_display_dat'] =& $entry['display_dat'];\n\n            if ($preview) {\n                ob_start();\n                serendipity_plugin_api::hook_event('backend_preview', $entry);\n                $entry['backend_preview'] = ob_get_contents();\n                ob_end_clean();\n            }\n\n            /* IF WE ARE DISPLAYING A FULL ENTRY */\n            if (isset($serendipity['GET']['id'])) {\n                $comment_add_data = array(\n                    'comments_messagestack' => (isset($serendipity['messagestack']['comments']) ? (array)$serendipity['messagestack']['comments'] : array()),\n                    'is_comment_added'      => (isset($serendipity['GET']['csuccess']) && $serendipity['GET']['csuccess'] == 'true' ? true: false),\n                    'is_comment_moderate'   => (isset($serendipity['GET']['csuccess']) && $serendipity['GET']['csuccess'] == 'moderate' ? true: false)\n                );\n\n                if ($serendipity['serendipityAuthedUser'] === true) {\n                    $userData = array();\n                    $userData['name'] = $serendipity['realname'];\n                    $userData['email'] = $serendipity['email'];\n                    $userData['url'] = '';\n                } else {\n                    $userData = $serendipity['POST'];\n                }\n\n                $serendipity['smarty']->assign($comment_add_data);\n                serendipity_displayCommentForm(\n                    $entry['id'],\n                    $serendipity['serendipityHTTPPath'] . $serendipity['indexFile'] . '?url=' . $entry['commURL'],\n                    true,\n                    $userData,\n                    true,\n                    serendipity_db_bool($entry['moderate_comments']),\n                    $entry\n                );\n            } // END FULL ENTRY LOGIC\n        } // end foreach-loop (entries)\n    } // end foreach-loop (dates)\n\n    if (!isset($serendipity['GET']['id']) &&\n            (!isset($serendipity['hidefooter']) || $serendipity['hidefooter'] == false) &&\n            ($num_entries <= $serendipity['fetchLimit']) &&\n            $use_footer) {\n        serendipity_printEntryFooter();\n    }\n\n    if ($smarty_fetch === 'return') {\n        return $dategroup;\n    }\n\n    $serendipity['smarty']->assignByRef('entries', $dategroup);\n\n    if ($serendipity['useInternalCache']) {\n        $cache = serendipity_setupCache();\n\n        $args = func_get_args();\n        $args = array_values($args);\n        $key = md5(serialize($args));\n        $cache->save(serialize($dategroup), $key, \"printEntries\");\n    }\n    \n    unset($entries, $dategroup);\n\n    $serendipity['smarty']->assign(array(\n        'is_preview' => $preview\n    ));\n\n    if (isset($serendipity['short_archives']) && $serendipity['short_archives']) {\n        return serendipity_smarty_fetch($smarty_block, 'entries_summary.tpl', true);\n    } elseif ($smarty_fetch == true) {\n        return serendipity_smarty_fetch($smarty_block, 'entries.tpl', true, $preview);\n    }\n\n} // end function serendipity_printEntries\n\nfunction serendipity_printEntriesCached($entries, $extended = 0, $preview = false, $smarty_block = 'ENTRIES', $smarty_fetch = true, $use_hooks = true, $use_footer = true, $use_grouped_array = false) {\n    global $serendipity;\n\n    $cache = serendipity_setupCache();\n\n    $args = func_get_args();\n    $args = array_values($args);\n    $key = md5(serialize($args));\n\n    if (($dategroup = $cache->get($key, \"printEntries\")) !== false) {\n        $dategroup = unserialize($dategroup);\n        $serendipity['smarty']->assign('entries', $dategroup);\n\n        # now let plugins do their magic and hope they don't do it twice\n        foreach($dategroup as $dategroup_idx => $properties) {\n            foreach($properties['entries'] as $x => $_entry) {\n                $addData = array('from' => 'functions_entries:printEntries');\n                if ($entry['is_cached']) {\n                    $addData['no_scramble'] = true;\n                }\n                serendipity_plugin_api::hook_event('frontend_display', $entry, $addData);\n\n                $entry['display_dat'] = '';\n                serendipity_plugin_api::hook_event('frontend_display:html:per_entry', $entry);\n                $entry['plugin_display_dat'] =& $entry['display_dat'];\n            }\n        }\n\n       \n        if (isset($serendipity['short_archives']) && $serendipity['short_archives']) {\n            serendipity_smarty_fetch($smarty_block, 'entries_summary.tpl', true);\n        } elseif ($smarty_fetch == true) {\n            serendipity_smarty_fetch($smarty_block, 'entries.tpl', true);\n        }\n        return true;\n    } else {\n        return false;\n    }   \n}\n\nfunction serendipity_cleanCache() {\n    include_once 'Cache/Lite.php';\n\n    if (!class_exists('Cache_Lite')) {\n        return false;\n    }\n\n    $options = array(\n        'cacheDir' => $serendipity['serendipityPath'] . 'templates_c/',\n        'lifeTime' => 3600,\n        'hashedDirectoryLevel' => 2\n    );\n    $cache = new Cache_Lite($options);\n    $successFetch = $cache->clean(\"fetchEntries\");\n    $successPrint = $cache->clean(\"printEntries\");\n    return $successFetch && $successPrint;\n    \n}\n\nfunction serendipity_setupCache() {\n    include_once 'Cache/Lite.php';\n\n    if (!class_exists('Cache_Lite')) {\n        return false;\n    }\n\n    $options = array(\n        'cacheDir' => $serendipity['serendipityPath'] . 'templates_c/',\n        'lifeTime' => 3600,\n        'hashedDirectoryLevel' => 2\n    );\n\n    return new Cache_Lite($options);\n}\n\n\n/**\n * Deprecated: Delete some garbage when an entry was deleted, especially static pages\n *\n * @deprecated\n * @access public\n * @param   int     The deleted entry ID\n * @param   int     A timestamp for the entry archive page\n * @return null\n */\nfunction serendipity_purgeEntry($id, $timestamp = null) {\n    global $serendipity;\n\n    // If pregenerate is not set, short circuit all this logic\n    // and remove nothing.\n    if(!isset($serendipity['pregenerate'])) {\n        return;\n    }\n\n    if (isset($timestamp)) {\n        $dated = date('Ymd', serendipity_serverOffsetHour($timestamp));\n        $datem = date('Ym',  serendipity_serverOffsetHour($timestamp));\n\n        @unlink(\"{$serendipity['serendipityPath']}/\".PATH_ARCHIVES.\"/{$dated}.html\");\n        @unlink(\"{$serendipity['serendipityPath']}/\".PATH_ARCHIVES.\"/{$datem}.html\");\n    }\n\n    // Fixme (the _* part) !\n    @unlink(\"{$serendipity['serendipityPath']}/\".PATH_ARCHIVES.\"/{$id}_*.html\");\n    @unlink(\"{$serendipity['serendipityPath']}/\".PATH_FEEDS.\"/index.rss\");\n    @unlink(\"{$serendipity['serendipityPath']}/\".PATH_FEEDS.\"/index.rss2\");\n    @unlink(\"{$serendipity['serendipityPath']}/index.html\");\n}\n\n/**\n * Inserts a new entry into the database or updates an existing entry\n *\n * Another central function, that parses, prepares and commits changes to an entry\n *\n * @access public\n * @param   array       The new/modified entry data.\n * @return  mixed       Integer with new entry ID if successfull, a string or array if error(s).\n */\nfunction serendipity_updertEntry($entry) {\n    global $serendipity;\n\n    include_once S9Y_INCLUDE_PATH . 'include/functions_entries_admin.inc.php';\n\n    $errors = array();\n    serendipity_plugin_api::hook_event('backend_entry_updertEntry', $errors, $entry);\n    if (count($errors) > 0) {\n        // Return error message(s)\n        return implode(\"\\n\", $errors);\n    }\n\n    serendipity_plugin_api::hook_event('backend_entry_presave', $entry);\n\n    $categories = $entry['categories'];\n    unset($entry['categories']);\n\n    $had_categories = $entry['had_categories'];\n    unset($entry['had_categories']);\n\n    $newEntry = 0;\n    $exflag = 0;\n\n    if (isset($entry['properties'])) {\n        unset($entry['properties']);\n    }\n\n    if (!is_numeric($entry['timestamp'])) {\n        $entry['timestamp'] = time();\n    }\n\n    /* WYSIWYG-editor inserts empty ' ' for extended body; this is reversed here */\n    if (isset($entry['extended']) && (trim($entry['extended']) == '' || trim($entry['extended']) == '<br />' || trim($entry['extended']) == '<p></p>' || str_replace(array(\"\\r\", \"\\n\", \"\\t\", \"\\0\", \"<br />\", \"<p>\", \"</p>\", \"<br>\"), array('', '', '', '', '', '', '', ''), trim($entry['extended'])) == '')) {\n        $entry['extended'] = '';\n    }\n\n    if (strlen($entry['extended'])) {\n        $exflag = 1;\n    }\n\n    $entry['exflag']   = $exflag;\n\n    if (!is_numeric($entry['id'])) {\n        /* we need to insert */\n\n        unset($entry['id']);\n        $entry['comments'] = 0;\n\n        if (!isset($entry['last_modified']) || !is_numeric($entry['last_modified'])) {\n            $entry['last_modified'] = $entry['timestamp'];\n        }\n\n        // New entries need an author\n        $entry['author'] = $serendipity['user'];\n        if (!isset($entry['authorid']) || empty($entry['authorid'])) {\n            $entry['authorid'] = $serendipity['authorid'];\n        }\n\n        if (!$_SESSION['serendipityRightPublish']) {\n            $entry['isdraft'] = 'true';\n        }\n\n        if (!isset($entry['allow_comments'])) {\n            $entry['allow_comments'] = 'false';\n        }\n        if (!isset($entry['moderate_comments'])) {\n            $entry['moderate_comments'] = 'false';\n        }\n\n        $res = serendipity_db_insert('entries', $entry);\n\n        if ($res) {\n            $entry['id'] = $serendipity['lastSavedEntry'] = serendipity_db_insert_id('entries', 'id');\n            if (is_array($categories)) {\n                foreach ($categories as $cat) {\n                    if (is_numeric($cat)) {\n                        serendipity_db_query(\"INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, {$cat})\");\n                    } elseif (is_array($cat) && !empty($cat['categoryid'])) {\n                        serendipity_db_query(\"INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, \" . (int)$cat['categoryid'] . \")\");\n                    }\n                }\n            }\n\n            serendipity_insertPermalink($entry);\n        } else {\n            //Some error message here\n            return ENTRIES_NOT_SUCCESSFULLY_INSERTED;\n        }\n        $newEntry = 1;\n\n    } else {\n        /* we need to update */\n\n        // Get settings from entry if already in DB, which should not be alterable with POST methods\n        $_entry            = serendipity_fetchEntry('id', $entry['id'], 1, 1);\n        $entry['authorid'] = $_entry['authorid'];\n\n        if (isset($serendipity['GET']['adminModule']) && $serendipity['GET']['adminModule'] == 'entries' && $entry['authorid'] != $serendipity['authorid'] && !serendipity_checkPermission('adminEntriesMaintainOthers')) {\n            // Only chiefs and admins can change other's entry. Else update fails.\n            return;\n        }\n\n        if (!$_SESSION['serendipityRightPublish']) {\n            $entry['isdraft'] = 'true';\n        }\n\n        if (is_array($categories)) {\n            serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entrycat WHERE entryid={$entry['id']}\");\n            foreach ($categories as $cat) {\n                serendipity_db_query(\"INSERT INTO {$serendipity['dbPrefix']}entrycat (entryid, categoryid) VALUES ({$entry['id']}, \" . (int)$cat . \")\");\n            }\n        } elseif ($had_categories) {\n            // This case actually only happens if an existing entry is edited, and its category assignments are all removed.\n            // This field is set as a HIDDEN input field in the admin/entries.tpl template.\n            // This is more of a hotfix. In the future it should be thoroughly checked whether calls to serendipity_updertEntry()\n            // really always carry through existing categories. We do not want to accidentally remove category assignments,\n            // just because a plugin or so passes an incomplete $entry structure to this function.\n            serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entrycat WHERE entryid={$entry['id']}\");\n        }\n\n        if ($entry['isdraft'] === 0) {\n            $entry['isdraft'] = 'false'; // this needs to be set as string, which might be missing when being published from the dashboard\n\n            foreach (array('title', 'body', 'extended', 'author') as $required_field) {\n                // dashboard publishing a draft does not pass title, body, extended, and author, so we need to set it here\n                if (!isset($entry[$required_field])) {\n                    $entry[$required_field] = $_entry[$required_field];\n                }\n            }\n        }\n\n        $entry['last_modified'] = time();\n\n        $res = serendipity_db_update('entries', array('id' => $entry['id']), $entry);\n        $newEntry = 0;\n        serendipity_updatePermalink($entry);\n    }\n\n    if (is_string($res)) {\n        return $res;\n    }\n\n    // Reset session data, so that a reload to this frame should not happen!\n    $_SESSION['save_entry']['id'] = (int)$entry['id'];\n\n    if (!serendipity_db_bool($entry['isdraft'])) {\n        serendipity_plugin_api::hook_event('frontend_display', $entry, array('no_scramble' => true, 'from' => 'functions_entries:updertEntry'));\n        $drafted_entry = $entry;\n    }\n\n    serendipity_purgeEntry($entry['id'], $entry['timestamp']);\n\n    if (!serendipity_db_bool($entry['isdraft']) && $entry['timestamp'] <= serendipity_serverOffsetHour()) {\n        // When saving an entry, first all references need to be gathered. But trackbacks to them\n        // shall only be send at the end of the execution flow. However, certain plugins depend on\n        // the existance of handled references. Thus we store the current references at this point,\n        // execute the plugins and then reset the found references to the original state.\n        serendipity_handle_references($entry['id'], $serendipity['blogTitle'], $drafted_entry['title'], $drafted_entry['body'] . $drafted_entry['extended'], true);\n    }\n\n    // Send publish tags if either a new article has been inserted from scratch, or if the entry was previously\n    // stored as draft and is now published\n    $entry['categories'] =& $categories;\n    if (!serendipity_db_bool($entry['isdraft']) && ($newEntry || serendipity_db_bool($_entry['isdraft']))) {\n        serendipity_plugin_api::hook_event('backend_publish', $entry, $newEntry);\n    } else {\n        serendipity_plugin_api::hook_event('backend_save', $entry, $newEntry);\n    }\n\n    if (!serendipity_db_bool($entry['isdraft']) && $entry['timestamp'] <= serendipity_serverOffsetHour()) {\n        // Now that plugins are executed, we go ahead into the Temple of Doom and send possibly failing trackbacks.\n        // First, original list of references is restored (inside the function call)\n        serendipity_handle_references($entry['id'], $serendipity['blogTitle'], $drafted_entry['title'], $drafted_entry['body'] . $drafted_entry['extended'], false);\n    }\n\n    serendipity_cleanCache();\n    return (int)$entry['id'];\n}\n\n/**\n * Delete an entry and everything that belongs to it (comments)\n *\n * @access public\n * @param   int     The Entry ID to delete\n * @return  mixed   FALSE or NULL on error\n */\nfunction serendipity_deleteEntry($id) {\n    global $serendipity;\n\n    if (!is_numeric($id)) {\n        return false;\n    }\n\n    // Purge the daily/monthly entries so they can be rebuilt\n    $result = serendipity_db_query(\"SELECT timestamp, authorid FROM {$serendipity['dbPrefix']}entries WHERE id = '\". (int)$id .\"'\", true);\n\n    if ($result[1] != $serendipity['authorid'] && !serendipity_checkPermission('adminEntriesMaintainOthers')) {\n        // Only admins and chief users can delete entries which do not belong to the author\n        return;\n    }\n\n    serendipity_purgeEntry($id, $result[0]);\n\n    serendipity_plugin_api::hook_event('backend_delete_entry', $id);\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entries WHERE id=$id\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entrycat WHERE entryid=$id\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}entryproperties WHERE entryid=$id\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}comments WHERE entry_id=$id\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}references WHERE entry_id='$id' AND type = ''\");\n    serendipity_db_query(\"DELETE FROM {$serendipity['dbPrefix']}permalinks WHERE entry_id='$id'\");\n    serendipity_cleanCache();\n}\n\n/**\n* Return HTML containing a list of categories\n*\n* Prints a list of categories for use in forms, the sidebar, or whereever...\n*\n* @access public\n* @param array  An array of categories, typically gathered by serendipity_fetchCategories()\n* @param array  An array which holds IDs which are meant to be selected within a HTML SELECT form field [used for recursion]\n* @param int    The type of category list (0: HTML span list, 1/2: <option>s, 3: HTML Div list, 4: CSV data) to return\n* @param int    The parent ID of a category [for recursion]\n* @param int    The current nesting level [for recursion]\n* @param string Tells the function, whether or not to display the XML button for each category.\n*               If empty, no links to the xml feeds will be displayed; If you want to, you can\n*               pass an image here (this setting is only used, when type==3).\n* @param string The character to use for blank indenting\n* @see serendipity_fetchCategories()\n*/\nfunction serendipity_generateCategoryList($cats, $select = array(0), $type = 0, $id = 0, $level = 0, $xmlImg = '', $blank_char = ' ') {\n    global $serendipity;\n\n    if ( !is_array($cats) || !count($cats) )\n        return;\n\n    $ret = '';\n    foreach ($cats as $cat) {\n        if ($cat['parentid'] == $id) {\n            switch ($type) {\n                case 0:\n                    $ret .= str_repeat('&nbsp;', $level * 2).'&bull;&nbsp;<span class=\"block_level\" id=\"catItem_' . $cat['categoryid'] . '\"' . (($cat['categoryid'] && in_array($cat['categoryid'], $select)) ? ' selected=\"selected\"' : '') . '><a href=\"?serendipity[adminModule]=category&amp;serendipity[cat][catid]=' . $cat['categoryid'] . '\">' . (!empty($cat['category_icon']) ? '<img style=\"vertical-align: middle;\" src=\"' . $cat['category_icon'] . '\" border=\"0\" alt=\"' . $cat['category_name'] . '\"/> ' : '') . serendipity_specialchars($cat['category_name']) . (!empty($cat['category_description']) ? ' - ' . serendipity_specialchars($cat['category_description']) : '') . '</a></span>';\n                    break;\n                case 1:\n                case 2:\n                   $ret .= '<option value=\"' . $cat['categoryid'] . '\"' . (($cat['categoryid'] && in_array($cat['categoryid'], $select)) ? ' selected=\"selected\"' : '') . '>';\n                   $ret .= str_repeat('&nbsp;', $level * 2) . serendipity_specialchars($cat['category_name']) . ($type == 1 && !empty($cat['category_description']) ? (' - ' . serendipity_specialchars($cat['category_description'])) : '');\n                   $ret .= '</option>';\n                   break;\n                case 3:\n                    $category_id = serendipity_makeFilename($cat['category_name']);\n                    if (!empty($xmlImg)) {\n                        $ret .= sprintf(\n                          '<div style=\"padding-bottom: 2px;\">' .\n                          '<a href=\"%s\" title=\"%s\"><img alt=\"xml\" src=\"%s\" style=\"vertical-align: bottom; display: inline; border: 0px\" /></a>&#160;%s' .\n                          '<a href=\"%s\" title=\"%s\">%s</a>' .\n                          '</div>',\n                          $serendipity['serendipityHTTPPath'] . 'rss.php?category=' . $cat['categoryid'] . '_' . $category_id,\n                          serendipity_specialchars($cat['category_description']),\n                          $xmlImg,\n                          str_repeat('&#160;', $level * 3),\n                          serendipity_categoryURL($cat, 'serendipityHTTPPath'),\n                          serendipity_specialchars($cat['category_description']),\n                          serendipity_specialchars($cat['category_name']));\n                    } else {\n                        $ret .= sprintf(\n                          '<span class=\"block_level\">%s<a href=\"%s\" title=\"%s\">%s</a></span>',\n                          str_repeat('&#160;', $level * 3),\n                          serendipity_categoryURL($cat, 'serendipityHTTPPath'),\n                          serendipity_specialchars($cat['category_description']),\n                          serendipity_specialchars($cat['category_name']));\n                    }\n                    break;\n                case 4:\n                    $ret .= $cat['categoryid'] . '|||' . str_repeat($blank_char, $level * 2) . $cat['category_name'] . '@@@';\n                    break;\n            }\n            $ret .= serendipity_generateCategoryList($cats, $select, $type, $cat['categoryid'], $level + 1, $xmlImg, $blank_char);\n        }\n    }\n    return $ret;\n}\n\n/**\n * Set category associations of a specific entry\n *\n * @access public\n * @param   int     The ID of the entry\n * @param   array   An array of category IDs that this entry is associated to.\n * @return null\n */\nfunction serendipity_updateEntryCategories($postid, $categories) {\n    global $serendipity;\n\n    if (!$postid || !$categories) {\n        return;\n    }\n\n    $query = \"DELETE FROM $serendipity[dbPrefix]entrycat WHERE entryid = \" . (int)$postid;\n    serendipity_db_query($query);\n\n    if (!is_array($categories)) {\n        $categories = array(0 => $categories);\n    }\n\n    foreach($categories AS $idx => $cat) {\n        $query = \"INSERT INTO $serendipity[dbPrefix]entrycat (categoryid, entryid) VALUES (\" . (int)$cat . \", \" . (int)$postid . \")\";\n        serendipity_db_query($query);\n    }\n    serendipity_cleanCache();\n}\n\n/**\n * Gather an archive listing of older entries and passes it to Smarty\n *\n * The archives are created according to the current timestamp and show the current year.\n * $serendipity['GET']['category'] is honoured like in serendipity_fetchEntries()\n * $serendipity['GET']['viewAuthor'] is honoured like in serendipity_fetchEntries()\n *\n * @access public\n * @return null\n */\nfunction serendipity_printArchives() {\n    global $serendipity;\n\n    $f = serendipity_db_query(\"SELECT timestamp FROM {$serendipity['dbPrefix']}entries ORDER BY timestamp ASC LIMIT 1\");\n    switch($serendipity['calendar']) {\n        case 'gregorian':\n        default:\n            $lastYear   = date('Y', serendipity_serverOffsetHour($f[0][0]));\n            $lastMonth  = date('m', serendipity_serverOffsetHour($f[0][0]));\n            $thisYear   = date('Y', serendipity_serverOffsetHour());\n            $thisMonth  = date('m', serendipity_serverOffsetHour());\n            break;\n        case 'persian-utf8':\n            require_once S9Y_INCLUDE_PATH . 'include/functions_calendars.inc.php';\n            $lastYear   = persian_date_utf('Y', serendipity_serverOffsetHour($f[0][0]));\n            $lastMonth  = persian_date_utf('m', serendipity_serverOffsetHour($f[0][0]));\n            $thisYear   = persian_date_utf('Y', serendipity_serverOffsetHour());\n            $thisMonth  = persian_date_utf('m', serendipity_serverOffsetHour());\n            break;\n    }\n    $max = 1;\n\n    if (isset($serendipity['GET']['category'])) {\n        $cat_sql = serendipity_getMultiCategoriesSQL($serendipity['GET']['category']);\n        $cat_get = '/C' . (int)$serendipity['GET']['category'];\n    } else {\n        $cat_sql = '';\n        $cat_get = '';\n    }\n\n    if (isset($serendipity['GET']['viewAuthor'])) {\n        $author_get = '/A' . (int)$serendipity['GET']['viewAuthor'];\n    } else {\n        $author_get = '';\n    }\n\n    if ($serendipity['dbType'] == 'postgres' ||\n        $serendipity['dbType'] == 'pdo-postgres') {\n        $distinct = 'DISTINCT e.id,';\n    } else {\n        $distinct = '';\n    }\n\n    $q = \"SELECT $distinct e.timestamp\n            FROM {$serendipity['dbPrefix']}entries e\n            \" . (!empty($cat_sql) ? \"\n       LEFT JOIN {$serendipity['dbPrefix']}entrycat ec\n              ON e.id = ec.entryid\n       LEFT JOIN {$serendipity['dbPrefix']}category c\n              ON ec.categoryid = c.categoryid\" : \"\") . \"\n           WHERE isdraft = 'false'\"\n                . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND timestamp <= \" . serendipity_db_time() : '')\n                . (!empty($cat_sql) ? ' AND ' . $cat_sql : '')\n                . (!empty($serendipity['GET']['viewAuthor']) ? ' AND e.authorid = ' . (int)$serendipity['GET']['viewAuthor'] : '')\n                . (!empty($cat_sql) ? \" GROUP BY e.id, e.timestamp\" : '');\n    $entries =& serendipity_db_query($q, false, 'assoc');\n\n    $group = array();\n    if (is_array($entries)) {\n        foreach($entries AS $entry) {\n            $group[date('Ym', $entry['timestamp'])]++;\n        }\n    }\n\n    $output = array();\n    for ($y = $thisYear; $y >= $lastYear; $y--) {\n        $output[$y]['year'] = $y;\n        for ($m = 12; $m >= 1; $m--) {\n\n            /* If the month we are checking are in the future, we drop it */\n            if ($m > $thisMonth && $y == $thisYear) {\n                continue;\n            }\n\n            /* If the month is lower than the lowest month containing entries, we're done */\n            if ($m < $lastMonth && $y <= $lastYear) {\n                break;\n            }\n\n            switch($serendipity['calendar']) {\n                case 'gregorian':\n                default:\n                    $s = serendipity_serverOffsetHour(mktime(0, 0, 0, $m, 1, $y), true);\n                    $e = serendipity_serverOffsetHour(mktime(23, 59, 59, $m, date('t', $s), $y), true);\n                    break;\n                case 'persian-utf8':\n                    require_once S9Y_INCLUDE_PATH . 'include/functions_calendars.inc.php';\n                    $s = serendipity_serverOffsetHour(persian_mktime(0, 0, 0, $m, 1, $y), true);\n                    $e = serendipity_serverOffsetHour(persian_mktime(23, 59, 59, $m, date('t', $s), $y), true);\n                    break;\n            }\n\n            $entry_count = (int)$group[$y . (strlen($m) == 1 ? '0' : '') . $m];\n\n            /* A silly hack to get the maximum amount of entries per month */\n            if ($entry_count > $max) {\n                $max = $entry_count;\n            }\n\n            $data = array();\n            $data['entry_count']    = $entry_count;\n            $data['link']           = serendipity_archiveDateUrl($y . '/'. sprintf('%02s', $m) . $cat_get . $author_get);\n            $data['link_summary']   = serendipity_archiveDateUrl($y . '/'. sprintf('%02s', $m) . $cat_get . $author_get, true);\n            $data['date']           = $s;\n            $output[$y]['months'][] = $data;\n        }\n    }\n\n    $serendipity['smarty']->assignByRef('archives', $output);\n    $serendipity['smarty']->assignByRef('max_entries', $max);\n\n    serendipity_smarty_fetch('ARCHIVES', 'entries_archives.tpl', true);\n}\n\n/**\n * Get total count for specific objects\n *\n * @access public\n * @param   string      The type of count to show: \"entries\", \"trackbacks\", \"comments\"\n * @return  string      The number\n */\nfunction serendipity_getTotalCount($what) {\n    global $serendipity;\n\n    switch($what) {\n        case 'comments':\n            $res = serendipity_db_query(\"SELECT SUM(e.comments) AS sum\n                                           FROM {$serendipity['dbPrefix']}entries AS e\n                                          WHERE e.isdraft = 'false'\n                                                \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND e.timestamp  <= \" . serendipity_db_time() : ''), true, 'assoc');\n            return $res['sum'];\n        case 'trackbacks':\n            $res = serendipity_db_query(\"SELECT SUM(e.trackbacks) AS sum\n                                           FROM {$serendipity['dbPrefix']}entries AS e\n                                          WHERE e.isdraft = 'false'\n                                                \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND e.timestamp  <= \" . serendipity_db_time() : ''), true, 'assoc');\n            return $res['sum'];\n        case 'entries':\n            $res = serendipity_db_query(\"SELECT COUNT(e.id) AS sum\n                                           FROM {$serendipity['dbPrefix']}entries AS e\n                                          WHERE e.isdraft = 'false'\n                                                \" . (!serendipity_db_bool($serendipity['showFutureEntries']) ? \" AND e.timestamp  <= \" . serendipity_db_time() : ''), true, 'assoc');\n            return $res['sum'];\n\n    }\n}\n\n/**\n * Get a path of all parent categories to a given category.\n *\n * @access public\n * @param   string      The id of the category, whose parents you want to fetch\n * @return  array       An Array with all category information, ordered from root to the ID you supplied.\n */\nfunction serendipity_getCategoryRoot($id) {\n    global $serendipity;\n\n    $r = serendipity_db_query(\"SELECT p.*\n                                 FROM {$serendipity['dbPrefix']}category n,\n                                      {$serendipity['dbPrefix']}category p\n                                WHERE n.category_left BETWEEN p.category_left AND p.category_right\n                                  AND n.categoryid = \" . (int)$id . \"\n                             ORDER BY n.category_left DESC, p.category_left ASC\");\n    return $r;\n}\n"], "filenames": ["docs/NEWS", "include/functions_entries.inc.php"], "buggy_code_start_loc": [22, 1526], "buggy_code_end_loc": [22, 1527], "fixing_code_start_loc": [23, 1526], "fixing_code_end_loc": [26, 1527], "type": "CWE-89", "message": "SQL injection vulnerability in include/functions_entries.inc.php in Serendipity 2.0.5 allows remote authenticated users to execute arbitrary SQL commands via the cat parameter.", "other": {"cve": {"id": "CVE-2017-5609", "sourceIdentifier": "cve@mitre.org", "published": "2017-01-28T18:59:00.180", "lastModified": "2019-03-19T15:12:50.700", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in include/functions_entries.inc.php in Serendipity 2.0.5 allows remote authenticated users to execute arbitrary SQL commands via the cat parameter."}, {"lang": "es", "value": "Vulnerabilidad de inyecci\u00f3n SQL en include/functions_entries.inc.php en Serendipity 2.0.5 permite a usuarios autenticados remotos ejecutar comandos arbitrarios SQL a trav\u00e9s del par\u00e1metro cat."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:s9y:serendipity:2.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "62698057-2D97-42F0-913C-76CB939804FA"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/95850", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/s9y/Serendipity/commit/c62d667287f2d76c81e03a740a581eb3c51249b6", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/s9y/Serendipity/releases/tag/2.1-rc1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/s9y/Serendipity/commit/c62d667287f2d76c81e03a740a581eb3c51249b6"}}