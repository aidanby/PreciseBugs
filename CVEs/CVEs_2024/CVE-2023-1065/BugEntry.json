{"buggy_code": ["commands:\n    install_helm:\n        description: Install Helm\n        steps:\n            - run:\n                command: |\n                    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n                    chmod 700 get_helm.sh\n                    ./get_helm.sh\n                name: Install Helm\n    install_python_requests:\n        description: Install requests library\n        steps:\n            - run:\n                command: |\n                    sudo apt update\n                    sudo apt install python3-requests\n                when: always\n    setup_node16:\n        description: Setup Node 16\n        steps:\n            - run:\n                command: |\n                    export NVM_DIR=\"/opt/circleci/.nvm\"\n                    [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n                    nvm install v16\n                    npm ci\n                    echo 'export NVM_DIR=\"/opt/circleci/.nvm\"' >> $BASH_ENV\n                    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> $BASH_ENV\n                    echo 'nvm alias default v16' >> $BASH_ENV\njobs:\n    aks_integration_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - azure-cli/install\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/aks\n                name: Create temp dir for logs\n            - run:\n                command: |\n                    npm ci &&\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:aks:yaml\n                name: Integration tests AKS\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/aks\n        working_directory: ~/kubernetes-monitor\n    build_and_upload_operator:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/python:3.10\n        steps:\n            - checkout\n            - setup_remote_docker\n            - install_python_requests\n            - run:\n                command: |\n                    scripts/operator/download_operator_sdk.py\n                    scripts/operator/download_operator_package_manager.py\n                name: Download Operator SDK and Operator Package Manager\n            - run:\n                command: |\n                    export IMAGE_TAG=$([[ \"$CIRCLE_BRANCH\" == \"staging\" ]] && echo \"staging-candidate\" || echo \"discardable\")\n                    OPERATOR_TAG=\"${IMAGE_TAG}-ubi8-${CIRCLE_SHA1:0:8}\"\n                    MONITOR_TAG=\"${IMAGE_TAG}-ubi8-${CIRCLE_SHA1:0:8}\"\n                    scripts/operator/create_operator_and_push.py \"${OPERATOR_TAG}\" \"${MONITOR_TAG}\" \"${DOCKERHUB_USER}\" \"${DOCKERHUB_PASSWORD}\"\n                    echo \"export OPERATOR_TAG=$OPERATOR_TAG\" >> $BASH_ENV\n                name: Create Operator and push Operator image to DockerHub\n            - snyk/scan:\n                docker-image-name: snyk/kubernetes-operator:${OPERATOR_TAG}\n                monitor-on-build: false\n                severity-threshold: critical\n                target-file: snyk-operator/build/Dockerfile\n            - run:\n                command: |\n                    export IMAGE_TAG=$([[ \"$CIRCLE_BRANCH\" == \"staging\" ]] && echo \"staging-candidate\" || echo \"discardable\")\n                    export SNYK_MONITOR_IMAGE_TAG=\"${IMAGE_TAG}-ubi8-${CIRCLE_SHA1:0:8}\"\n                    export SNYK_OPERATOR_VERSION=\"0.0.1-ubi8-${CIRCLE_SHA1:0:8}\"\n                    export SNYK_OPERATOR_IMAGE_TAG=\"${SNYK_MONITOR_IMAGE_TAG}\"\n                    OPERATOR_PATH=$(scripts/operator/package_operator_bundle.py \"${SNYK_OPERATOR_VERSION}\" \"${SNYK_OPERATOR_IMAGE_TAG}\" \"${SNYK_MONITOR_IMAGE_TAG}\")\n                    echo \"export OPERATOR_PATH=$OPERATOR_PATH\" >> $BASH_ENV\n                name: Package Operator Bundle\n            - run:\n                command: |\n                    export OPERATOR_DIR=$OPERATOR_PATH\n                    export PACKAGE_VERSION=\"0.0.1-ubi8-${CIRCLE_SHA1:0:8}\"\n                    scripts/operator/create_operator_bundle_and_index_and_push.py \"${OPERATOR_DIR}\" \"${PACKAGE_VERSION}\" \"${DOCKERHUB_USER}\" \"${DOCKERHUB_PASSWORD}\"\n                name: Create Operator Bundle and Index and push to Docker Hub\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    build_image:\n        machine:\n            image: ubuntu-2004:202111-02\n        steps:\n            - checkout\n            - install_python_requests\n            - run:\n                command: |\n                    IMAGE_TAG=$([[ \"$CIRCLE_BRANCH\" == \"staging\" ]] && echo \"staging-candidate\" || echo \"discardable\")\n                    IMAGE_NAME_CANDIDATE=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1}\n                    IMAGE_NAME_CANDIDATE_UBI8=snyk/kubernetes-monitor:${IMAGE_TAG}-ubi8-${CIRCLE_SHA1:0:8}\n                    echo \"export IMAGE_NAME_CANDIDATE=$IMAGE_NAME_CANDIDATE\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_CANDIDATE_UBI8=$IMAGE_NAME_CANDIDATE_UBI8\" >> $BASH_ENV\n                name: Export environment variables\n            - run:\n                command: |\n                    docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}\n                    ./scripts/docker/build-image.sh ${IMAGE_NAME_CANDIDATE}\n                    ./scripts/docker/build-image-ubi8.sh ${IMAGE_NAME_CANDIDATE_UBI8}\n                name: Build image\n            - snyk/scan:\n                additional-arguments: --project-name=alpine\n                docker-image-name: ${IMAGE_NAME_CANDIDATE}\n                monitor-on-build: false\n                severity-threshold: high\n                target-file: Dockerfile\n            - snyk/scan:\n                additional-arguments: --project-name=ubi8\n                docker-image-name: ${IMAGE_NAME_CANDIDATE_UBI8}\n                monitor-on-build: false\n                severity-threshold: critical\n                target-file: Dockerfile.ubi8\n            - run:\n                command: |\n                    docker push ${IMAGE_NAME_CANDIDATE}\n                    docker push ${IMAGE_NAME_CANDIDATE_UBI8}\n                name: Push image\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    code_formatter:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: |\n                    npm run format:check\n                name: code formatter check\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    deploy_to_dev:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/node:16.13\n        steps:\n            - checkout\n            - install_python_requests\n            - run:\n                command: ./scripts/circleci-jobs/deploy_to_dev.sh\n                name: Deploy to dev\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    deploy_to_prod:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/node:16.13\n        steps:\n            - checkout\n            - install_python_requests\n            - run:\n                command: ./scripts/circleci-jobs/deploy_to_prod.sh\n                name: Deploy to prod\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    deploy_to_sysdig_integration_cluster:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/base:stable\n        steps:\n            - checkout\n            - run:\n                command: |\n                    LATEST_KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)\n                    curl -LO \"https://dl.k8s.io/release/${LATEST_KUBECTL_VERSION}/bin/linux/amd64/kubectl\"\n                    curl -LO \"https://dl.k8s.io/${LATEST_KUBECTL_VERSION}/bin/linux/amd64/kubectl.sha256\"\n                    echo \"$(<kubectl.sha256) kubectl\" | sha256sum --check\n                    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n                    # Ensure the kubectl command is runnable\n                    kubectl version --client\n                    # Prepare kubeconfig to point to the cluster\n                    mkdir ~/.kube || true\n                    printf \"%s\" \"${SYSDIG_KUBECONFIG}\" | base64 -d > ~/.kube/config\n                name: Install and prepare kubectl\n            - run:\n                command: |\n                    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n                    chmod 700 get_helm.sh\n                    ./get_helm.sh\n                    # Ensure the Helm command is runnable\n                    helm version\n                name: Install Helm\n            - run:\n                command: |\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}-approved\n                    ./scripts/slack/notify_deploy.py $LATEST_TAG sysdig-integration-cluster\n                    helm upgrade --install snyk-monitor ./snyk-monitor --namespace snyk-monitor --set image.tag=${LATEST_TAG} --set clusterName=\"Sysdig cluster\" --set sysdig.enabled=true\n                name: Deploy to shared Sysdig cluster\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    eks_integration_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - install_python_requests\n            - setup_node16\n            - aws-cli/install:\n                override-installed: true\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/eks\n                name: Create temp dir for logs\n            - run:\n                command: |\n                    npm ci &&\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:eks:yaml\n                name: Integration tests EKS\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/eks\n        working_directory: ~/kubernetes-monitor\n    integration_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/kind\n                name: create temp dir for logs\n            - run:\n                command: |\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    npm run test:integration:kind:yaml\n                name: Integration tests\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/kind\n        working_directory: ~/kubernetes-monitor\n    integration_tests_helm:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/kind-helm\n                name: Create temporary directory for logs\n            - run:\n                command: |\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    npm run test:integration:kind:helm\n                name: Integration tests with Helm deployment\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/kind-helm\n        working_directory: ~/kubernetes-monitor\n    integration_tests_operator_on_k8s:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n            resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/kind-olm-operator\n                name: Create temporary directory for logs\n            - run:\n                command: |\n                    export OPERATOR_VERSION=\"0.0.1-ubi8-${CIRCLE_SHA1:0:8}\"\n                    export IMAGE_TAG_UBI_SUFFIX=\"-ubi8\"\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:kindolm:operator\n                name: Operator integration tests on vanilla Kubernetes\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/kind-olm-operator\n        working_directory: ~/kubernetes-monitor\n    integration_tests_proxy:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/proxy\n                name: Create temporary directory for logs\n            - run:\n                command: |\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    npm run test:integration:kind:proxy\n                name: Integration tests with proxy\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/proxy\n        working_directory: ~/kubernetes-monitor\n    lint:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: |\n                    npm run lint\n                name: lint\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    openshift4_integration_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2204:current\n            resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/openshift4\n                name: create temp dir for logs\n            - run:\n                command: |\n                    export OPERATOR_VERSION=\"0.0.1-ubi8-${CIRCLE_SHA1:0:8}\"\n                    export IMAGE_TAG_UBI_SUFFIX=\"-ubi8\"\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:openshift4:operator\n                name: Integration tests OpenShift 4\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/openshift4\n        working_directory: ~/kubernetes-monitor\n    operator_upgrade_tests:\n        description: |\n            Deploys a previously released version of the snyk-operator.\n            Subsequently upgrades the Operator with a new version that is intended\n            to be released. If the Operator reaches the running state in both cases,\n            we can assume that it's able to upgrade.\n        executor: redhat-openshift/default\n        steps:\n            - checkout\n            - run:\n                command: |\n                    sudo apt update\n                    sudo apt install -y uuid-runtime make\n                    python -m pip install requests pyyaml\n                    python scripts/operator/download_operator_sdk.py\n                    # The machine executor uses an old debian version, the latest OPM 1.16.1 requires a later version of GLIBC that the current machine cannot have.\n                    # So instead of using the (currently) latest version, we have to use an older one that references an older GLIBC.\n                    OPM_VERSION=v1.13.0 python scripts/operator/download_operator_package_manager.py\n                    curl -L https://github.com/openshift/okd/releases/download/4.7.0-0.okd-2021-03-28-152009/openshift-client-linux-4.7.0-0.okd-2021-03-28-152009.tar.gz | tar xfz - -- oc\n                    sudo mv oc /usr/local/bin/oc\n                    curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n                    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n                name: Install required packages\n            - install_python_requests\n            - setup_remote_docker\n            - run: docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}\n            - run:\n                command: |\n                    oc login --token=\"${OPENSHIFT4_PASSWORD}\" --server=\"${OPENSHIFT4_CLUSTER_URL}\" --kubeconfig=\"$(pwd)/kubeconfig\"\n                    echo \"export KUBECONFIG=$(pwd)/kubeconfig\" >> $BASH_ENV\n                name: Login and update KUBECONFIG\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -xeo pipefail\n\n                    OPERATOR_REPO_URL=\"https://raw.githubusercontent.com/redhat-openshift-ecosystem/community-operators-prod/main/operators/snyk-operator/snyk-operator.package.yaml\"\n\n                    OPERATOR_VERSION=$(python ./scripts/operator/get_last_published_operator_version.py $OPERATOR_REPO_URL)\n\n                    echo \"Currently released embedded version is: ${OPERATOR_VERSION}\"\n                    echo \"export OPERATOR_VERSION=${OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get last released Operator version\n            - run:\n                command: |\n                    source $BASH_ENV\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}\n                    echo \"export LATEST_TAG=${LATEST_TAG}\" >> $BASH_ENV\n                description: |\n                    This tag is used to identify the Operator version we are going to upgrade to.\n                name: Get latest snyk-monitor tag\n            - run:\n                command: |\n                    source $BASH_ENV\n                    if [[ \"${LATEST_TAG}\" == \"${OPERATOR_VERSION}\" ]]; then\n                      echo \"export NOTHING_TO_TEST=true\" >> $BASH_ENV\n                      exit 1\n                    fi\n                name: End tests early if no new Operator is to be released\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -xeo pipefail\n\n                    # Package Operator Bundle to be uploaded to Docker Hub\n                    SNYK_OPERATOR_IMAGE_TAG=${OPERATOR_VERSION}\n                    SNYK_MONITOR_IMAGE_TAG=${OPERATOR_VERSION}-ubi8\n                    OPERATOR_DIR=$(python scripts/operator/package_operator_bundle.py $OPERATOR_VERSION $SNYK_OPERATOR_IMAGE_TAG $SNYK_MONITOR_IMAGE_TAG)\n\n                    python scripts/operator/create_operator_bundle_and_index_and_push.py $OPERATOR_DIR $OPERATOR_VERSION $DOCKERHUB_USER $DOCKERHUB_PASSWORD\n                description: \"Even though the Operator is released to the\\nredhat-openshift-ecosystem/community-operators-prod repo, we can \\nreproduce it locally using our packaged scripts. This also helps us\\ntest the upgrade by pushing all tested Operators to our Quay repo.\\n\"\n                name: Package Operator Bundle and push to Docker Hub\n            - run:\n                command: |\n                    set +e\n                    kubectl patch customresourcedefinition snykmonitors.charts.helm.k8s.io -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n                    kubectl patch snykmonitors.charts.helm.k8s.io snyk-monitor -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n                    kubectl delete customresourcedefinition snykmonitors.charts.helm.k8s.io\n                    kubectl delete catalogsource snyk-operator -n openshift-marketplace\n                    kubectl delete clusterrolebinding snyk-monitor\n                    kubectl delete clusterrole snyk-monitor\n                    kubectl delete --all all,sa,cm,secret,pvc -n services\n                    kubectl delete --all all,sa,cm,secret,pvc -n snyk-monitor\n                    kubectl delete namespace services\n                    kubectl delete namespace snyk-monitor\n                    # Force a success status code, otherwise Bash will implicitly return the last command's code, which can be 1.\n                    true\n                name: Remove existing cluster resources if present\n            - run:\n                command: |\n                    set -xo pipefail\n                    set +e\n\n                    ns=$(kubectl get ns snyk-monitor --no-headers --output=go-template={{.metadata.name}} 2>/dev/null)\n\n                    if [[ -z \"${ns}\" ]]; then\n                      echo \"snyk-monitor namespace not found, creating...\"\n                      kubectl create ns snyk-monitor\n                    fi\n\n                    set -e\n                    INTEGRATION_ID=$(uuidgen)\n                    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=integrationId=${INTEGRATION_ID} --from-literal=dockercfg.json={}\n                name: Configure snyk-monitor namespace\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -xe\n\n                    sed -i.bak \"s|TAG_OVERRIDE|${OPERATOR_VERSION}|g\" ./test/fixtures/operator/catalog-source.yaml\n                    kubectl apply -f ./test/fixtures/operator/catalog-source.yaml\n\n                    kubectl apply -f ./test/fixtures/operator/installation.yaml\n                    sleep 120\n                    kubectl get pods -n snyk-monitor --no-headers | \\\n                      grep \"snyk-operator\" | \\\n                      awk 'END { if (NR==0) exit 1; else print $1 }' | \\\n                      xargs -I{} kubectl wait pod/{} -n snyk-monitor --timeout 60s --for condition=Ready\n                name: Install Operator\n            - run:\n                command: |\n                    set -o pipefail\n\n                    kubectl apply -f ./test/fixtures/operator/custom-resource.yaml\n                    sleep 120\n\n                    kubectl get pods -n snyk-monitor --no-headers | \\\n                      grep \"snyk-monitor\" | \\\n                      awk 'END { if (NR==0) exit 1; else print $1 }' | \\\n                      xargs -I{} kubectl wait pod/{} -n snyk-monitor --timeout 60s --for condition=Ready\n                name: Deploy snyk-monitor resource\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -eo pipefail\n\n                    REPLACES_VERSION=${OPERATOR_VERSION}\n                    SNYK_MONITOR_TAG=${LATEST_TAG}-ubi8\n                    OPERATOR_DIR=$(python scripts/operator/package_operator_bundle.py \"${LATEST_TAG}\" \"${LATEST_TAG}\" \"${SNYK_MONITOR_TAG}\" \"${REPLACES_VERSION}\")\n                    python scripts/operator/create_operator_bundle_and_index_and_push.py $OPERATOR_DIR $LATEST_TAG $DOCKERHUB_USER $DOCKERHUB_PASSWORD $REPLACES_VERSION\n                description: Now we are testing that any upgrades to the Operator are detected and applied in the cluster.\n                name: Package Operator Bundle upgrade and push to Docker Hub\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -xeo pipefail\n\n                    # Replace the catalog source with the latest bundled version of snyk-monitor, this is what initiates the upgrade\n                    sed -i.bak \"s|${OPERATOR_VERSION}|${LATEST_TAG}|g\" ./test/fixtures/operator/catalog-source.yaml\n                    kubectl apply -f ./test/fixtures/operator/catalog-source.yaml\n\n                    ATTEMPTS=120\n                    SLEEP_SECONDS_BETWEEN_ATTEMPTS=5\n                    # total = 10 minutes wait time\n\n                    # Periodically poll if the snyk-monitor has upgraded\n                    for (( attempt=1; attempt<ATTEMPTS; attempt++))\n                    do\n                      # Grab the tag of the snyk-monitor container image\n\n                      VERSION=$(kubectl get pods -n snyk-monitor --no-headers | \\\n                        grep \"snyk-monitor\" | \\\n                        awk 'END { if (NR==0) print \"\"; else print $1 }' | \\\n                        xargs '-I{}' kubectl get pod '{}' -n snyk-monitor -o 'jsonpath={..containers[*].image}' | \\\n                        awk '{print $1}' | \\\n                        grep -oE \"[0-9]{1}\\.[0-9]{1,2}\\.[0-9]{1,3}-ubi8$\" \\\n                        || echo \"0.0.0\")\n\n                      # Break out of the polling if the tag matches the one we want to upgrade to.\n                      if [[ \"${VERSION}\" == \"${LATEST_TAG}-ubi8\" ]]; then\n                        break\n                      fi\n\n                      # Otherwise keep polling\n                      sleep $SLEEP_SECONDS_BETWEEN_ATTEMPTS\n                    done\n\n                    SNYK_MONITOR_POD=$(kubectl get pods -n snyk-monitor --no-headers | \\\n                      grep \"snyk-monitor\" | \\\n                      awk 'END { if (NR==0) exit 101; else print $1 }')\n\n                    # If we polled for 5 minutes and the snyk-monitor still hasn't upgraded, fail the current job.\n                    if [[ \"${VERSION}\" != \"${LATEST_TAG}-ubi8\" ]]; then\n                      &>2 echo \"versions (${VERSION}) does not match expected (${LATEST_TAG})!\"\n\n                      kubectl describe pod ${SNYK_MONITOR_POD} -n snyk-monitor\n                      kubectl describe catalogsource snyk-operator -n openshift-marketplace\n                      kubectl get snykmonitors.charts.helm.k8s.io -n snyk-monitor -o yaml\n\n                      exit 102\n                    fi\n\n                    # We need to wait for the Pod to become Ready\n                    kubectl wait pod/${SNYK_MONITOR_POD} -n snyk-monitor --timeout 120s --for condition=Ready\n\n                    echo \"Update complete!\"\n                name: Upgrade Operator and check that snyk-monitor also upgraded\n            - run:\n                command: |\n                    source $BASH_ENV\n                    ./scripts/slack/notify_success_openshift_upgrade.py \"${OPERATOR_VERSION}\" \"${LATEST_TAG}\"\n                name: Notify Slack on successful upgrade\n            - run:\n                command: |\n                    set +e\n\n                    kubectl delete -f ./test/fixtures/operator/catalog-source.yaml\n                    kubectl delete -f ./test/fixtures/operator/installation.yaml\n\n                    kubectl patch customresourcedefinition snykmonitors.charts.helm.k8s.io -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n                    kubectl patch snykmonitors.charts.helm.k8s.io snyk-monitor -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n                    kubectl delete -f ./test/fixtures/operator/custom-resource.yaml\n                    kubectl delete clusterrolebinding snyk-monitor\n                    kubectl delete clusterrole snyk-monitor\n                    kubectl delete --all all,sa,cm,secret,pvc -n services\n                    kubectl delete --all all,sa,cm,secret,pvc -n snyk-monitor\n                    kubectl delete namespace snyk-monitor\n                    kubectl delete namespace services\n                    # Force a success status code, otherwise Bash will implicitly return the last command's code, which can be 1.\n                    true\n                name: Cleanup\n                when: always\n            - run:\n                command: |\n                    if [[ \"${NOTHING_TO_TEST}\" != \"true\" ]]; then\n                      ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                    fi\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    publish:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/node:16.13\n        steps:\n            - checkout\n            - setup_remote_docker\n            - install_python_requests\n            - install_helm\n            - run:\n                command: |\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}\n                    IMAGE_NAME_APPROVED=snyk/kubernetes-monitor:${LATEST_TAG}-approved\n                    IMAGE_NAME_PUBLISHED=snyk/kubernetes-monitor:${LATEST_TAG}\n                    IMAGE_NAME_APPROVED_UBI8=snyk/kubernetes-monitor:${LATEST_TAG}-ubi8-approved\n                    IMAGE_NAME_PUBLISHED_UBI8=snyk/kubernetes-monitor:${LATEST_TAG}-ubi8\n                    echo \"export LATEST_TAG=${LATEST_TAG}\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_APPROVED=${IMAGE_NAME_APPROVED}\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_PUBLISHED=${IMAGE_NAME_PUBLISHED}\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_APPROVED_UBI8=${IMAGE_NAME_APPROVED_UBI8}\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_PUBLISHED_UBI8=${IMAGE_NAME_PUBLISHED_UBI8}\" >> $BASH_ENV\n                name: Export environment variables\n            - snyk/scan:\n                monitor-on-build: true\n                severity-threshold: high\n            - snyk/scan:\n                additional-arguments: --project-name=alpine\n                docker-image-name: ${IMAGE_NAME_APPROVED}\n                monitor-on-build: true\n                severity-threshold: high\n                target-file: Dockerfile\n            - snyk/scan:\n                additional-arguments: --project-name=ubi8\n                docker-image-name: ${IMAGE_NAME_APPROVED_UBI8}\n                monitor-on-build: true\n                severity-threshold: critical\n                target-file: Dockerfile.ubi8\n            - run:\n                command: |\n                    docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&\n                    docker pull ${IMAGE_NAME_APPROVED} &&\n                    docker tag ${IMAGE_NAME_APPROVED} ${IMAGE_NAME_PUBLISHED} &&\n                    docker push ${IMAGE_NAME_PUBLISHED} &&\n                    docker pull ${IMAGE_NAME_APPROVED_UBI8} &&\n                    docker tag ${IMAGE_NAME_APPROVED_UBI8} ${IMAGE_NAME_PUBLISHED_UBI8} &&\n                    docker push ${IMAGE_NAME_PUBLISHED_UBI8} &&\n                    ./scripts/slack/notify_push.py ${IMAGE_NAME_PUBLISHED} &&\n                    ./scripts/slack/notify_push.py ${IMAGE_NAME_PUBLISHED_UBI8} &&\n                    ./scripts/publish-gh-pages.sh ${LATEST_TAG}\n                name: Publish\n            - run:\n                command: |\n                    RELEASE_VERSION=v0.15.1\n                    DOWNLOAD_LOCATION=./operator-sdk\n                    CURL_FOLLOW_REDIRECTS=\"-L\"\n                    curl ${CURL_FOLLOW_REDIRECTS} https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu -o ${DOWNLOAD_LOCATION}\n                    chmod +x ${DOWNLOAD_LOCATION}\n                name: Download operator-sdk\n            - run:\n                command: |\n                    export OPERATOR_TAG=\"${LATEST_TAG}\"\n                    export MONITOR_TAG=\"${LATEST_TAG}-ubi8\"\n                    python3 scripts/operator/create_operator_and_push.py \"${OPERATOR_TAG}\" \"${MONITOR_TAG}\" \"${DOCKERHUB_USER}\" \"${DOCKERHUB_PASSWORD}\"\n                    echo \"export OPERATOR_TAG=${OPERATOR_TAG}\" >> $BASH_ENV\n                name: Create Operator and push Operator image to DockerHub\n            - snyk/scan:\n                docker-image-name: snyk/kubernetes-operator:${OPERATOR_TAG}\n                monitor-on-build: true\n                severity-threshold: critical\n                target-file: snyk-operator/build/Dockerfile\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    push_operator_to_community_operators:\n        description: |\n            Packages a new Operator and pushes it to Snyk's fork of\n            the OpenShift k8s-operatorhub/community-operators.\n        executor: redhat-openshift/default\n        steps:\n            - checkout\n            - add_ssh_keys:\n                fingerprints:\n                    - 5a:63:89:5d:a1:71:fb:a4:ed:c5:ec:4c:1e:0b:c7:3a\n            - run:\n                command: |\n                    python -m pip install requests pyyaml PyGithub\n                name: Install required packages\n            - install_python_requests\n            - run:\n                command: |\n                    set -xeo pipefail\n                    OPERATOR_REPO_URL=\"https://raw.githubusercontent.com/k8s-operatorhub/community-operators/main/operators/snyk-operator/snyk-operator.package.yaml\"\n\n                    LAST_OPERATOR_VERSION=$(python ./scripts/operator/get_last_published_operator_version.py $OPERATOR_REPO_URL)\n                    echo \"export LAST_OPERATOR_VERSION=${LAST_OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get last released Operator version\n            - run:\n                command: |\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}\n                    NEW_OPERATOR_VERSION=${LATEST_TAG}\n                    echo \"export NEW_OPERATOR_VERSION=${NEW_OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get new Operator version\n            - run:\n                command: |\n                    if [[ \"${NEW_OPERATOR_VERSION}\" == \"${LAST_OPERATOR_VERSION}\" ]]; then\n                      echo \"export NOTHING_TO_TEST=true\" >> $BASH_ENV\n                      exit 1\n                    fi\n                name: End tests early if no new Operator is to be released\n            - run:\n                command: |\n                    SNYK_MONITOR_TAG=\"${NEW_OPERATOR_VERSION}-ubi8\"\n                    OPERATOR_PATH=$(python scripts/operator/package_operator_bundle.py \"${NEW_OPERATOR_VERSION}\" \"${NEW_OPERATOR_VERSION}\" \"${SNYK_MONITOR_TAG}\" \"${LAST_OPERATOR_VERSION}\")\n                    echo \"export OPERATOR_PATH=${OPERATOR_PATH}\" >> $BASH_ENV\n                name: Package Operator Bundle\n            - run:\n                command: |\n                    CURRENT_DIRECTORY=$(pwd)\n                    COMMUNITY_FOLDER_LOCATION=\"community-operators\"\n                    ./scripts/operator/push-operator-to-snyk-upstream.sh \"${CURRENT_DIRECTORY}\" \"${COMMUNITY_FOLDER_LOCATION}\"\n                    echo \"export COMMUNITY_FOLDER_LOCATION=${COMMUNITY_FOLDER_LOCATION}\" >> $BASH_ENV\n                name: Push new Operator to the fork of the k8s-operatorhub/community-operators repository\n            - run:\n                command: |\n                    SLACK_PR_URL=$(python ./scripts/operator/raise_pr_to_community_operators_from_our_fork.py \"${COMMUNITY_FOLDER_LOCATION}\" \"${NEW_OPERATOR_VERSION}\")\n                    echo \"export SLACK_PR_URL=${SLACK_PR_URL}\" >> $BASH_ENV\n                name: Open a Pull Request to the k8s-operatorhub/community-operators repository\n            - run:\n                command: |\n                    ./scripts/slack/notify_success_operator_push.py \"${NEW_OPERATOR_VERSION}\" \"community/operators/${COMMUNITY_FOLDER_LOCATION}\" \"${SLACK_PR_URL}\"\n                name: Notify Slack on new branch in snyk/community-operators\n            - run:\n                command: |\n                    if [[ \"${NOTHING_TO_TEST}\" != \"true\" ]]; then\n                      ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                    fi\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    push_operator_to_embedded_community_operators:\n        description: |\n            Packages a new Operator and pushes it to Snyk's fork of\n            the redhat-openshift-ecosystem/community-operators-prod.\n        executor: redhat-openshift/default\n        steps:\n            - checkout\n            - add_ssh_keys:\n                fingerprints:\n                    - 5a:63:89:5d:a1:71:fb:a4:ed:c5:ec:4c:1e:0b:c7:3a\n            - run:\n                command: |\n                    python -m pip install requests pyyaml PyGithub\n                name: Install required packages\n            - install_python_requests\n            - run:\n                command: |\n                    set -xeo pipefail\n                    OPERATOR_REPO_URL=\"https://raw.githubusercontent.com/redhat-openshift-ecosystem/community-operators-prod/main/operators/snyk-operator/snyk-operator.package.yaml\"\n\n                    LAST_OPERATOR_VERSION=$(python ./scripts/operator/get_last_published_operator_version.py $OPERATOR_REPO_URL)\n                    echo \"export LAST_OPERATOR_VERSION=${LAST_OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get last released Operator version\n            - run:\n                command: |\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}\n                    NEW_OPERATOR_VERSION=${LATEST_TAG}\n                    echo \"export NEW_OPERATOR_VERSION=${NEW_OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get new Operator version\n            - run:\n                command: |\n                    if [[ \"${NEW_OPERATOR_VERSION}\" == \"${LAST_OPERATOR_VERSION}\" ]]; then\n                      echo \"export NOTHING_TO_TEST=true\" >> $BASH_ENV\n                      exit 1\n                    fi\n                name: End tests early if no new Operator is to be released\n            - run:\n                command: |\n                    SNYK_MONITOR_TAG=\"${NEW_OPERATOR_VERSION}-ubi8\"\n                    OPERATOR_PATH=$(python scripts/operator/package_operator_bundle.py \"${NEW_OPERATOR_VERSION}\" \"${NEW_OPERATOR_VERSION}\" \"${SNYK_MONITOR_TAG}\" \"${LAST_OPERATOR_VERSION}\")\n                    echo \"export OPERATOR_PATH=${OPERATOR_PATH}\" >> $BASH_ENV\n                name: Package Operator Bundle\n            - run:\n                command: |\n                    CURRENT_DIRECTORY=$(pwd)\n                    COMMUNITY_FOLDER_LOCATION=\"community-operators-prod\"\n                    ./scripts/operator/push-operator-to-snyk-upstream.sh \"${CURRENT_DIRECTORY}\" \"${COMMUNITY_FOLDER_LOCATION}\"\n                    echo \"export COMMUNITY_FOLDER_LOCATION=${COMMUNITY_FOLDER_LOCATION}\" >> $BASH_ENV\n                name: Push new Operator to the fork of the redhat-openshift-ecosystem/community-operators-prod repository\n            - run:\n                command: |\n                    SLACK_PR_URL=$(python ./scripts/operator/raise_pr_to_embedded_community_operators_from_our_fork.py \"${COMMUNITY_FOLDER_LOCATION}\" \"${NEW_OPERATOR_VERSION}\")\n                    echo \"export SLACK_PR_URL=${SLACK_PR_URL}\" >> $BASH_ENV\n                name: Open a Pull Request to the redhat-openshift-ecosystem/community-operators-prod repository\n            - run:\n                command: |\n                    ./scripts/slack/notify_success_operator_push.py \"${NEW_OPERATOR_VERSION}\" \"${COMMUNITY_FOLDER_LOCATION}\" \"${SLACK_PR_URL}\"\n                name: Notify Slack on new branch in snyk/community-operators-prod\n            - run:\n                command: |\n                    if [[ \"${NOTHING_TO_TEST}\" != \"true\" ]]; then\n                      ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                    fi\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    sync_community_operators_with_snyk_fork:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/python:3.10\n        steps:\n            - checkout\n            - install_python_requests\n            - add_ssh_keys:\n                fingerprints:\n                    - 5a:63:89:5d:a1:71:fb:a4:ed:c5:ec:4c:1e:0b:c7:3a\n            - run:\n                command: |\n                    CURRENT_DIRECTORY=$(pwd)\n                    COMMUNITY_FOLDER_LOCATION=\"${CURRENT_DIRECTORY}/community-operators\"\n\n                    # Clone Community Operators repo from Snyk\n                    git clone https://github.com/snyk/community-operators.git \"${COMMUNITY_FOLDER_LOCATION}\"\n                    cd \"${COMMUNITY_FOLDER_LOCATION}\"\n\n                    # Sync snyk/community-operators repo from k8s-operatorhub/community-operators repo\n                    git remote add upstream https://github.com/k8s-operatorhub/community-operators.git\n                    git fetch upstream\n                    git merge upstream/main\n                    git push origin main\n                name: Sync k8s-operatorhub/community-operators with snyk/community-operators\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    sync_embedded_community_operators_with_snyk_fork:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/python:3.10\n        steps:\n            - checkout\n            - install_python_requests\n            - add_ssh_keys:\n                fingerprints:\n                    - 5a:63:89:5d:a1:71:fb:a4:ed:c5:ec:4c:1e:0b:c7:3a\n            - run:\n                command: |\n                    CURRENT_DIRECTORY=$(pwd)\n                    COMMUNITY_FOLDER_LOCATION=\"${CURRENT_DIRECTORY}/community-operators-prod\"\n\n                    # Clone Community Operators repo from Snyk\n                    git clone https://github.com/snyk/community-operators-prod.git \"${COMMUNITY_FOLDER_LOCATION}\"\n                    cd \"${COMMUNITY_FOLDER_LOCATION}\"\n\n                    # Sync snyk/community-operators repo from redhat-openshift-ecosystem/community-operators-prod repo\n                    git remote add upstream https://github.com/redhat-openshift-ecosystem/community-operators-prod.git\n                    git fetch upstream\n                    git merge upstream/main\n                    git push origin main\n                name: Sync redhat-openshift-ecosystem/community-operators-prod with snyk/community-operators-prod\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    system_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2204:2022.04.1\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: |\n                    export DEBIAN_FRONTEND=noninteractive\n                    sudo apt-get update -qq\n                    sudo apt-get install skopeo\n                name: Install Skopeo\n            - run:\n                command: |\n                    npm run build &&\n                    npm run test:system\n                name: System tests\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    tag_and_push:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/node:16.13\n        steps:\n            - checkout\n            - setup_remote_docker\n            - install_python_requests\n            - run:\n                command: |\n                    npm ci &&\n                    docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&\n                    unset CIRCLE_PULL_REQUEST &&\n                    unset CI_PULL_REQUEST &&\n                    unset CI_PULL_REQUESTS &&\n                    unset CIRCLE_PULL_REQUESTS &&\n                    npx semantic-release@17.2.2 &&\n                    NEW_VERSION=`cat ./package.json | jq -r '.version'` &&\n                    ./scripts/docker/approve-image.sh $NEW_VERSION\n                name: Tag and push\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    unit_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - snyk/scan:\n                monitor-on-build: false\n                severity-threshold: high\n            - run:\n                command: |\n                    npm run build &&\n                    npm run test:unit\n                name: Unit tests\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\nmain_branches_filter:\n    filters:\n        branches:\n            ignore:\n                - staging\n                - master\nmaster_branch_only_filter:\n    filters:\n        branches:\n            only:\n                - master\norbs:\n    aws-cli: circleci/aws-cli@2.0.6\n    azure-cli: circleci/azure-cli@1.2.0\n    redhat-openshift: circleci/redhat-openshift@0.2.0\n    snyk: snyk/snyk@1.1.2\nstaging_branch_only_filter:\n    filters:\n        branches:\n            only:\n                - staging\nversion: 2.1\nworkflows:\n    MERGE_TO_MASTER:\n        jobs:\n            - publish:\n                context: nodejs-app-release-public\n                filters:\n                    branches:\n                        only:\n                            - master\n            - deploy_to_prod:\n                filters:\n                    branches:\n                        only:\n                            - master\n                requires:\n                    - publish\n    MERGE_TO_STAGING:\n        jobs:\n            - build_image:\n                filters:\n                    branches:\n                        only:\n                            - staging\n            - build_and_upload_operator:\n                filters:\n                    branches:\n                        only:\n                            - staging\n            - unit_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n            - system_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n            - integration_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - integration_tests_helm:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - integration_tests_proxy:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - eks_integration_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - aks_integration_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - integration_tests_operator_on_k8s:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n                    - build_and_upload_operator\n            - tag_and_push:\n                context: nodejs-app-release-public\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n                    - build_and_upload_operator\n                    - unit_tests\n                    - system_tests\n                    - integration_tests\n                    - integration_tests_helm\n                    - integration_tests_proxy\n            - deploy_to_dev:\n                context: nodejs-app-release-public\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - tag_and_push\n    PR_TO_STAGING:\n        jobs:\n            - build_image:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - build_and_upload_operator:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - unit_tests:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - lint:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - code_formatter:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - system_tests:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - integration_tests:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n                requires:\n                    - build_image\n            - integration_tests_helm:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n                requires:\n                    - build_image\n\n", "description: |\n  Deploys a previously released version of the snyk-operator.\n  Subsequently upgrades the Operator with a new version that is intended\n  to be released. If the Operator reaches the running state in both cases,\n  we can assume that it's able to upgrade.\n\nexecutor: redhat-openshift/default\n\nworking_directory: ~/kubernetes-monitor\n\nsteps:\n  - checkout\n\n  - run:\n      name: Install required packages\n      command: |\n        sudo apt update\n        sudo apt install -y uuid-runtime make\n        python -m pip install requests pyyaml\n        python scripts/operator/download_operator_sdk.py\n        # The machine executor uses an old debian version, the latest OPM 1.16.1 requires a later version of GLIBC that the current machine cannot have.\n        # So instead of using the (currently) latest version, we have to use an older one that references an older GLIBC.\n        OPM_VERSION=v1.13.0 python scripts/operator/download_operator_package_manager.py\n        curl -L https://github.com/openshift/okd/releases/download/4.7.0-0.okd-2021-03-28-152009/openshift-client-linux-4.7.0-0.okd-2021-03-28-152009.tar.gz | tar xfz - -- oc\n        sudo mv oc /usr/local/bin/oc\n        curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n\n  - install_python_requests\n\n  - setup_remote_docker\n\n  - run: docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}\n\n  - run:\n      name: Login and update KUBECONFIG\n      command: |\n        oc login --token=\"${OPENSHIFT4_PASSWORD}\" --server=\"${OPENSHIFT4_CLUSTER_URL}\" --kubeconfig=\"$(pwd)/kubeconfig\"\n        echo \"export KUBECONFIG=$(pwd)/kubeconfig\" >> $BASH_ENV\n\n  - run:\n      name: Get last released Operator version\n      command: |\n        source $BASH_ENV\n        set -xeo pipefail\n\n        OPERATOR_REPO_URL=\"https://raw.githubusercontent.com/redhat-openshift-ecosystem/community-operators-prod/main/operators/snyk-operator/snyk-operator.package.yaml\"\n\n        OPERATOR_VERSION=$(python ./scripts/operator/get_last_published_operator_version.py $OPERATOR_REPO_URL)\n\n        echo \"Currently released embedded version is: ${OPERATOR_VERSION}\"\n        echo \"export OPERATOR_VERSION=${OPERATOR_VERSION}\" >> $BASH_ENV\n\n  - run:\n      name: Get latest snyk-monitor tag\n      description: |\n        This tag is used to identify the Operator version we are going to upgrade to.\n      command: |\n        source $BASH_ENV\n        LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n        LATEST_TAG=${LATEST_TAG_WITH_V:1}\n        echo \"export LATEST_TAG=${LATEST_TAG}\" >> $BASH_ENV\n\n  - run:\n      name: End tests early if no new Operator is to be released\n      command: |\n        source $BASH_ENV\n        if [[ \"${LATEST_TAG}\" == \"${OPERATOR_VERSION}\" ]]; then\n          echo \"export NOTHING_TO_TEST=true\" >> $BASH_ENV\n          exit 1\n        fi\n\n  - run:\n      name: Package Operator Bundle and push to Docker Hub\n      description: |\n        Even though the Operator is released to the\n        redhat-openshift-ecosystem/community-operators-prod repo, we can \n        reproduce it locally using our packaged scripts. This also helps us\n        test the upgrade by pushing all tested Operators to our Quay repo.\n      command: |\n        source $BASH_ENV\n        set -xeo pipefail\n\n        # Package Operator Bundle to be uploaded to Docker Hub\n        SNYK_OPERATOR_IMAGE_TAG=${OPERATOR_VERSION}\n        SNYK_MONITOR_IMAGE_TAG=${OPERATOR_VERSION}-ubi8\n        OPERATOR_DIR=$(python scripts/operator/package_operator_bundle.py $OPERATOR_VERSION $SNYK_OPERATOR_IMAGE_TAG $SNYK_MONITOR_IMAGE_TAG)\n\n        python scripts/operator/create_operator_bundle_and_index_and_push.py $OPERATOR_DIR $OPERATOR_VERSION $DOCKERHUB_USER $DOCKERHUB_PASSWORD\n\n  - run:\n      name: Remove existing cluster resources if present\n      command: |\n        set +e\n        kubectl patch customresourcedefinition snykmonitors.charts.helm.k8s.io -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n        kubectl patch snykmonitors.charts.helm.k8s.io snyk-monitor -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n        kubectl delete customresourcedefinition snykmonitors.charts.helm.k8s.io\n        kubectl delete catalogsource snyk-operator -n openshift-marketplace\n        kubectl delete clusterrolebinding snyk-monitor\n        kubectl delete clusterrole snyk-monitor\n        kubectl delete --all all,sa,cm,secret,pvc -n services\n        kubectl delete --all all,sa,cm,secret,pvc -n snyk-monitor\n        kubectl delete namespace services\n        kubectl delete namespace snyk-monitor\n        # Force a success status code, otherwise Bash will implicitly return the last command's code, which can be 1.\n        true\n\n  - run:\n      name: Configure snyk-monitor namespace\n      command: |\n        set -xo pipefail\n        set +e\n\n        ns=$(kubectl get ns snyk-monitor --no-headers --output=go-template={{.metadata.name}} 2>/dev/null)\n\n        if [[ -z \"${ns}\" ]]; then\n          echo \"snyk-monitor namespace not found, creating...\"\n          kubectl create ns snyk-monitor\n        fi\n\n        set -e\n        INTEGRATION_ID=$(uuidgen)\n        kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=integrationId=${INTEGRATION_ID} --from-literal=dockercfg.json={}\n\n  - run:\n      name: Install Operator\n      command: |\n        source $BASH_ENV\n        set -xe\n\n        sed -i.bak \"s|TAG_OVERRIDE|${OPERATOR_VERSION}|g\" ./test/fixtures/operator/catalog-source.yaml\n        kubectl apply -f ./test/fixtures/operator/catalog-source.yaml\n\n        kubectl apply -f ./test/fixtures/operator/installation.yaml\n        sleep 120\n        kubectl get pods -n snyk-monitor --no-headers | \\\n          grep \"snyk-operator\" | \\\n          awk 'END { if (NR==0) exit 1; else print $1 }' | \\\n          xargs -I{} kubectl wait pod/{} -n snyk-monitor --timeout 60s --for condition=Ready\n\n  - run:\n      name: Deploy snyk-monitor resource\n      command: |\n        set -o pipefail\n\n        kubectl apply -f ./test/fixtures/operator/custom-resource.yaml\n        sleep 120\n\n        kubectl get pods -n snyk-monitor --no-headers | \\\n          grep \"snyk-monitor\" | \\\n          awk 'END { if (NR==0) exit 1; else print $1 }' | \\\n          xargs -I{} kubectl wait pod/{} -n snyk-monitor --timeout 60s --for condition=Ready\n\n  - run:\n      name: Package Operator Bundle upgrade and push to Docker Hub\n      description: Now we are testing that any upgrades to the Operator are detected and applied in the cluster.\n      command: |\n        source $BASH_ENV\n        set -eo pipefail\n\n        REPLACES_VERSION=${OPERATOR_VERSION}\n        SNYK_MONITOR_TAG=${LATEST_TAG}-ubi8\n        OPERATOR_DIR=$(python scripts/operator/package_operator_bundle.py \"${LATEST_TAG}\" \"${LATEST_TAG}\" \"${SNYK_MONITOR_TAG}\" \"${REPLACES_VERSION}\")\n        python scripts/operator/create_operator_bundle_and_index_and_push.py $OPERATOR_DIR $LATEST_TAG $DOCKERHUB_USER $DOCKERHUB_PASSWORD $REPLACES_VERSION\n\n  - run:\n      name: Upgrade Operator and check that snyk-monitor also upgraded\n      command: |\n        source $BASH_ENV\n        set -xeo pipefail\n\n        # Replace the catalog source with the latest bundled version of snyk-monitor, this is what initiates the upgrade\n        sed -i.bak \"s|${OPERATOR_VERSION}|${LATEST_TAG}|g\" ./test/fixtures/operator/catalog-source.yaml\n        kubectl apply -f ./test/fixtures/operator/catalog-source.yaml\n\n        ATTEMPTS=120\n        SLEEP_SECONDS_BETWEEN_ATTEMPTS=5\n        # total = 10 minutes wait time\n\n        # Periodically poll if the snyk-monitor has upgraded\n        for (( attempt=1; attempt<ATTEMPTS; attempt++))\n        do\n          # Grab the tag of the snyk-monitor container image\n\n          VERSION=$(kubectl get pods -n snyk-monitor --no-headers | \\\n            grep \"snyk-monitor\" | \\\n            awk 'END { if (NR==0) print \"\"; else print $1 }' | \\\n            xargs '-I{}' kubectl get pod '{}' -n snyk-monitor -o 'jsonpath={..containers[*].image}' | \\\n            awk '{print $1}' | \\\n            grep -oE \"[0-9]{1}\\.[0-9]{1,2}\\.[0-9]{1,3}-ubi8$\" \\\n            || echo \"0.0.0\")\n\n          # Break out of the polling if the tag matches the one we want to upgrade to.\n          if [[ \"${VERSION}\" == \"${LATEST_TAG}-ubi8\" ]]; then\n            break\n          fi\n\n          # Otherwise keep polling\n          sleep $SLEEP_SECONDS_BETWEEN_ATTEMPTS\n        done\n\n        SNYK_MONITOR_POD=$(kubectl get pods -n snyk-monitor --no-headers | \\\n          grep \"snyk-monitor\" | \\\n          awk 'END { if (NR==0) exit 101; else print $1 }')\n\n        # If we polled for 5 minutes and the snyk-monitor still hasn't upgraded, fail the current job.\n        if [[ \"${VERSION}\" != \"${LATEST_TAG}-ubi8\" ]]; then\n          &>2 echo \"versions (${VERSION}) does not match expected (${LATEST_TAG})!\"\n\n          kubectl describe pod ${SNYK_MONITOR_POD} -n snyk-monitor\n          kubectl describe catalogsource snyk-operator -n openshift-marketplace\n          kubectl get snykmonitors.charts.helm.k8s.io -n snyk-monitor -o yaml\n\n          exit 102\n        fi\n\n        # We need to wait for the Pod to become Ready\n        kubectl wait pod/${SNYK_MONITOR_POD} -n snyk-monitor --timeout 120s --for condition=Ready\n\n        echo \"Update complete!\"\n\n  - run:\n      name: Notify Slack on successful upgrade\n      command: |\n        source $BASH_ENV\n        ./scripts/slack/notify_success_openshift_upgrade.py \"${OPERATOR_VERSION}\" \"${LATEST_TAG}\"\n\n  - run:\n      name: Cleanup\n      when: always\n      command: |\n        set +e\n\n        kubectl delete -f ./test/fixtures/operator/catalog-source.yaml\n        kubectl delete -f ./test/fixtures/operator/installation.yaml\n\n        kubectl patch customresourcedefinition snykmonitors.charts.helm.k8s.io -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n        kubectl patch snykmonitors.charts.helm.k8s.io snyk-monitor -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n        kubectl delete -f ./test/fixtures/operator/custom-resource.yaml\n        kubectl delete clusterrolebinding snyk-monitor\n        kubectl delete clusterrole snyk-monitor\n        kubectl delete --all all,sa,cm,secret,pvc -n services\n        kubectl delete --all all,sa,cm,secret,pvc -n snyk-monitor\n        kubectl delete namespace snyk-monitor\n        kubectl delete namespace services\n        # Force a success status code, otherwise Bash will implicitly return the last command's code, which can be 1.\n        true\n\n  - run:\n      name: Notify Slack on failure\n      when: on_fail\n      command: |\n        if [[ \"${NOTHING_TO_TEST}\" != \"true\" ]]; then\n          ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n        fi\n", "\n[![Known Vulnerabilities](https://snyk.io/test/github/snyk/kubernetes-monitor/badge.svg)](https://snyk.io/test/github/snyk/kubernetes-monitor)\n\n# snyk/kubernetes-monitor #\n\n## Summary ##\n\nA containerized application that is deployed with Helm. Monitors the security of a Kubernetes cluster by analyzing container images.\n\n## Prerequisites ##\n\n* 50 GiB of storage in the form of [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) or a [PersistentVolumeClaim](https://kubernetes.io/docs/concepts/storage/persistent-volumes/).\n* External internet access from the Kubernetes cluster to `kubernetes-upstream.snyk.io`.\n* 1 CPU, 2 GiB RAM\n* 1 Kubernetes worker node of type `linux/amd64` - supported and tested only on the AMD64 CPU architecture\n\nSupported Kubernetes distributions:\n\n* Any *Generally Available* Kubernetes Certified distribution, for example: GKE, AKS, EKS, OCP.\n* OCP 4.1+ if running on OpenShift - supported and tested on *Generally Available* versions\n\nTested with the following [Security Context Constraint](scc.txt) on OCP.\n\n## Installation with Helm ##\n\nPlease refer to the [Helm chart installation instructions](./snyk-monitor/README.md).\n\n## Documentation ##\n\nFor detailed documentation and support, please refer to the [Snyk Kubernetes integration documentation](https://docs.snyk.io/products/snyk-container/kubernetes-workload-and-image-scanning).\n", "{\n  \"LOGGING\": {\n    \"name\": \"kubernetes-monitor\",\n    \"level\": \"info\"\n  },\n  \"IMAGES_SCANNED_CACHE\": {\n    \"MAX_SIZE\": 20000,\n    \"MAX_AGE_MS\": 86400000\n  },\n  \"WORKLOADS_SCANNED_CACHE\": {\n    \"MAX_SIZE\": 10000,\n    \"MAX_AGE_MS\": 86400000\n  },\n  \"WORKERS_COUNT\": 5,\n  \"WORKLOAD_METADATA_CACHE\": {\n    \"MAX_SIZE\": 10000,\n    \"MAX_AGE_MS\": 60000\n  },\n  \"REQUEST_QUEUE_LENGTH\": 2,\n  \"QUEUE_LENGTH_LOG_FREQUENCY_MINUTES\": 1,\n  \"INTEGRATION_ID\": \"\",\n  \"DEFAULT_KUBERNETES_UPSTREAM_URL\": \"https://kubernetes-upstream.snyk.io\",\n  \"MAX_RETRY_BACKOFF_DURATION_SECONDS\": 300,\n  \"USE_KEEPALIVE\": true\n}\n", "#! /bin/bash\nset -e\n\n# Getting latest released tag\nLATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\nLATEST_TAG=${LATEST_TAG_WITH_V:1}\nLATEST_TAG_APPROVED=${LATEST_TAG}-approved\n\n# Send Slack notification\n./scripts/slack/notify_deploy.py $LATEST_TAG_APPROVED dev\n\n# Config git\ngit config --global user.email \"k-m@example.com\"\ngit config --global user.name \"K-M Deploy Boy\"\n\ngit clone https://$GH_TOKEN@github.com/snyk/$KUBERNETES_MONITOR_DEPLOYER_REPO.git\n\ncp -r snyk-monitor/* $KUBERNETES_MONITOR_DEPLOYER_REPO/helm\n\n# Create helm values for different envs\ncat >$KUBERNETES_MONITOR_DEPLOYER_REPO/helm/values/multi-tenant-gcp-pre-production.yaml <<EOF\nclusterName: \"Development cluster\"\nintegrationApi: https://kubernetes-upstream.dev.snyk.io\nlog_level: \"DEBUG\"\nskip_k8s_jobs: true\n\npolicyOrgs:\n  - $POLICY_ORG_PRE_PROD\n\nimage:\n  tag: $LATEST_TAG_APPROVED\n\nskopeo:\n  compression:\n    level: 1\n\nworkers:\n  count: 5\n\nmetadata:\n  labels:\n    $SNYK_OWNER_LABEL_KEY: $SNYK_OWNER_LABEL_VALUE\n    $SNYK_LOG_DEST_LABEL_KEY: $SNYK_LOG_DEST_LABEL_VALUE\n  annotations:\n    github.com/project-slug: snyk/kubernetes-monitor\n\nEOF\n\ncat >$KUBERNETES_MONITOR_DEPLOYER_REPO/helm/values/multi-tenant-gcp-production.yaml <<EOF\nclusterName: \"Production cluster\"\nlog_level: \"DEBUG\"\nskip_k8s_jobs: true\n\nlimit:\n  memory: \"4Gi\"\n\npolicyOrgs:\n  - $POLICY_ORG_PROD\n\nimage:\n  tag: $LATEST_TAG\n\nskopeo:\n  compression:\n    level: 1\n\nworkers:\n  count: 5\n\nmetadata:\n  labels:\n    $SNYK_OWNER_LABEL_KEY: $SNYK_OWNER_LABEL_VALUE\n    $SNYK_LOG_DEST_LABEL_KEY: $SNYK_LOG_DEST_LABEL_VALUE\n  annotations:\n    github.com/project-slug: snyk/kubernetes-monitor\n\nEOF\n\ncd $KUBERNETES_MONITOR_DEPLOYER_REPO\ngit commit --allow-empty -am \"feat: deploy k-m $LATEST_TAG_WITH_V\"\ngit push origin main\n", "#! /bin/bash\n\nget_latest_release() {\n    curl --silent \"https://api.github.com/repos/$1/releases/latest\" | # Get latest release from GitHub api\n    grep '\"tag_name\":' |                                            # Get tag line\n    sed -E 's/.*\"([^\"]+)\".*/\\1/' |                                  # Pluck JSON value\n    sed 's/v//'                                                     # Remove \"v\" prefix\n}\n\nLATEST_TAG=$(get_latest_release snyk/kubernetes-monitor)\nIP=$(ifconfig | grep \"inet \" | grep -Fv 127.0.0.1 | awk 'NR==1{print $2}')\n\nif [ \"$INTEGRATION_ID\" == \"\" ]; then\n    echo \"Enter your integration ID: \"\n    read INTEGRATION_ID\nfi\n\nkind delete cluster\nkind create cluster\nkubectl create namespace snyk-monitor\nkubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${INTEGRATION_ID}\nhelm upgrade --install snyk-monitor ./snyk-monitor --namespace snyk-monitor --set clusterName=\"kind localhost\" --set image.tag=${LATEST_TAG} --set integrationApi=http://${IP}:9000\n\nprintf \"\\r\\n\\r\\nYou can now check if the pod is running using:\\r\\n\\tkubectl get pod -n snyk-monitor\\r\\n\"\n", "#\n# This file creates the deployment that runs the Kubernetes-Monitor\n#\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: snyk-monitor\n  namespace: snyk-monitor\n  labels:\n    app.kubernetes.io/name: snyk-monitor\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: snyk-monitor\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: snyk-monitor\n    spec:\n      containers:\n      - image: snyk/kubernetes-monitor:IMAGE_TAG_OVERRIDE_WHEN_PUBLISHING\n        imagePullPolicy: Always\n        name: snyk-monitor\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - name: docker-config\n          readOnly: true\n          mountPath: \"/srv/app/.docker\"\n        - name: temporary-storage\n          mountPath: \"/var/tmp\"\n        - name: ssl-certs\n          mountPath: \"/srv/app/certs\"\n        - name: registries-conf\n          mountPath: \"/srv/app/.config/containers\"\n        - name: workload-policies\n          mountPath: \"/tmp/policies\"\n          readOnly: true\n        env:\n          - name: SNYK_INTEGRATION_ID\n            valueFrom:\n              secretKeyRef:\n                name: snyk-monitor\n                key: integrationId\n          - name: SNYK_WATCH_NAMESPACE\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: namespace\n                optional: true\n          - name: SNYK_DEPLOYMENT_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: SNYK_DEPLOYMENT_NAME\n            value: snyk-monitor\n          - name: SNYK_INTEGRATION_API\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: integrationApi\n                optional: true\n          - name: SNYK_CLUSTER_NAME\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: clusterName\n                optional: true\n          - name: SNYK_MONITOR_VERSION\n            value: IMAGE_TAG_OVERRIDE_WHEN_PUBLISHING\n          - name: HOME\n            value: /srv/app\n          - name: HTTP_PROXY\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: http_proxy\n                optional: true\n          - name: HTTPS_PROXY\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: https_proxy\n                optional: true\n          - name: NO_PROXY\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: no_proxy\n                optional: true\n          - name: LOG_LEVEL\n            value: 'INFO'\n        resources:\n          requests:\n            cpu: '250m'\n            memory: '400Mi'\n          limits:\n            cpu: '1'\n            memory: '2Gi'\n        securityContext:\n          privileged: false\n          runAsNonRoot: true\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n              - ALL\n      volumes:\n      - name: docker-config\n        secret:\n          secretName: snyk-monitor\n          items:\n            - key: dockercfg.json\n              path: config.json\n      - name: temporary-storage\n        emptyDir:\n          sizeLimit: 50Gi\n      - name: ssl-certs\n        configMap:\n          name: snyk-monitor-certs\n          optional: true\n      - name: registries-conf\n        configMap:\n          name: snyk-monitor-registries-conf\n          optional: true\n      - name: workload-policies\n        configMap:\n          name: snyk-monitor-workload-policies\n          optional: true\n      serviceAccountName: snyk-monitor\n", "# snyk-operator\n\n```sh\ncurl -Lo opm https://github.com/operator-framework/operator-registry/releases/download/v1.17.3/darwin-amd64-opm\nchmod +x opm\n```\n\n```sh\nexport VERSION=1.68.2-pre0\nmake docker-build\ndocker tag snyk/snyk-operator-bundle:$VERSION <operator-certification-repo>:$VERSION\ndocker push registry.connect.redhat.com/snyk/kubernetes-operator:$VERSION\n\nmake bundle-build\ndocker tag snyk/snyk-operator-bundle:$VERSION <bundle-certification-repo>:$VERSION\ndocker push <bundle-certification-repo>:$VERSION\n\n./opm index add -c docker --bundles snyk/snyk-operator-bundle:$VERSION --tag snyk/snyk-operator-index:$VERSION\n```\n\n```yaml\napiVersion: operators.coreos.com/v1alpha1\nkind: CatalogSource\nmetadata:\n  name: snyk-operator\n  namespace: openshift-marketplace\nspec:\n  sourceType: grpc\n  image: docker.io/snyk/snyk-operator-index:1.68.2\n  displayName: Snyk Operator Bundle\n  publisher: Snyk Ltd.\n  updateStrategy:\n    registryPoll:\n      interval: 1m\n```\n\n```yaml\napiVersion: charts.snyk.io/v1alpha1 # this has changed, used to be \"charts.helm.k8s.io/v1alpha1\"\nkind: SnykMonitor\nmetadata:\n  name: snyk-monitor\n  namespace: snyk-monitor\nspec:\n  integrationApi: https://kubernetes-upstream.dev.snyk.io\n  temporaryStorageSize: 20Gi\n  pvc:\n    enabled: true\n---\napiVersion: operators.coreos.com/v1\nkind: OperatorGroup\nmetadata:\n  name: snyk-operator\n  namespace: snyk-monitor\nspec:\n  targetNamespaces:\n    - snyk-monitor\n---\napiVersion: operators.coreos.com/v1alpha1\nkind: Subscription\nmetadata:\n  name: snyk-operator\n  namespace: snyk-monitor\nspec:\n  channel: stable\n  name: snyk-operator-marketplace # this has changed, used to be \"snyk-operator\"\n  installPlanApproval: Automatic\n  source: snyk-operator\n  sourceNamespace: openshift-marketplace\n```\n", "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  labels:\n    app.kubernetes.io/instance: snyk-operator-marketplace\n    app.kubernetes.io/version: 1.68.2\n    app.kubernetes.io/name: snyk-operator-marketplace\n    app.kubernetes.io/managed-by: snyk-operator-marketplace\n  annotations:\n    alm-examples: |-\n      [\n        {\n          \"apiVersion\": \"charts.snyk.io/v1alpha1\",\n          \"kind\": \"SnykMonitor\",\n          \"metadata\": {\n            \"name\": \"snyk-monitor\",\n            \"labels\": {\n              \"app.kubernetes.io/instance\": \"snyk-monitor\",\n              \"app.kubernetes.io/version\": \"1.68.2\",\n              \"app.kubernetes.io/name\": \"snyk-monitor\",\n              \"app.kubernetes.io/managed-by\": \"snyk-operator\"\n            },\n            \"annotations\": {\n              \"productID\": \"snyk-operator-marketplace\",\n              \"productName\": \"snyk-operator-marketplace\",\n              \"productVersion\": \"1.68.2\"\n            }\n          },\n          \"spec\": {\n            \"clusterName\": \"Default cluster\",\n            \"integrationApi\": \"\",\n            \"monitorSecrets\": \"snyk-monitor\",\n            \"scope\": \"Cluster\",\n            \"temporaryStorageSize\": \"50Gi\",\n            \"pvc\": {\n              \"enabled\": false,\n              \"name\": \"snyk-monitor\"\n            },\n            \"requests\": {\n              \"memory\": \"400Mi\"\n            },\n            \"limits\": {\n              \"memory\": \"2Gi\"\n            },\n            \"nodeAffinity\": {\n              \"disableBetaArchNodeSelector\": false\n            }\n          }\n        }\n      ]\n    \"olm.skipRange\": \"<1.68.2\"\n    capabilities: Basic Install\n    categories: Developer Tools\n    certified: \"true\"\n    productID: snyk-operator-marketplace\n    productName: snyk-operator-marketplace\n    productVersion: 1.68.2\n    containerImage: registry.connect.redhat.com/snyk/kubernetes-operator:1.68.2\n    createdAt: \"2021-06-04T00:20:21Z\"\n    description: A Kubernetes Operator for creating and managing Snyk controller instances.\n    operators.operatorframework.io/builder: operator-sdk-v1.3.0\n    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1\n    repository: https://github.com/docker.io/snyk/kubernetes-monitor\n    support: Snyk Ltd.\n  name: snyk-operator-marketplace.v1.68.2\nspec:\n  apiservicedefinitions: {}\n  customresourcedefinitions:\n    owned:\n      - description: Represents a deployment of the Snyk controller, which scans container images in the cluster for vulnerabilities.\n        displayName: Snyk Monitor\n        kind: SnykMonitor\n        name: snykmonitors.charts.snyk.io\n        resources:\n          - kind: Deployment\n            name: snyk-monitor\n            version: apps/v1\n          - kind: Secret\n            name: snyk-monitor\n            version: v1\n          - kind: PersistentVolumeClaim\n            name: snyk-monitor\n            version: v1\n        specDescriptors:\n          - description: \"The name of the secret object that stores the Snyk controller secrets, defaults to snyk-monitor. The secret needs to contain the following data fields: integrationId, dockercfg.json\"\n            displayName: Snyk controller Secret name\n            path: monitorSecrets\n            x-descriptors:\n              - urn:alm:descriptor:io.kubernetes:Secret\n          - description: The name of the cluster that will be displayed in Snyk. Defaults to \"Default cluster\".\n            displayName: Cluster name\n            path: clusterName\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: \"Whether the Snyk controller scans images in the whole cluster or in a specific namespace. Valid values are: Cluster, Namespaced. Defaults to scanning the whole cluster.\"\n            displayName: Scope\n            path: scope\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: API endpoint for sending image scan results. Does not need to be provided as part of the installation as it defaults to sending results to Snyk.\n            displayName: Integration API\n            path: integrationApi\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: How much disk storage to reserve for the Snyk controller. Defaults to 50Gi.\n            displayName: Temporary storage size\n            path: temporaryStorageSize\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: Pull policy for the Snyk controller image. Defaults to Always.\n            displayName: Image pull policy\n            path: image.pullPolicy\n            x-descriptors:\n              - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\n          - description: The registry repository name and tag for the Snyk controller image.\n            displayName: Image repository name and tag\n            path: image.image\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: Pull policy for the init container image. Defaults to Always.\n            displayName: Init container image pull policy\n            path: initContainerImage.pullPolicy\n            x-descriptors:\n              - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\n          - description: The registry repository name and tag for the Snyk controller init container image.\n            displayName: Init container image repository name and tag\n            path: initContainerImage.image\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: >-\n              The memory requested by the Snyk controller.\n            displayName: Memory request\n            path: requests.memory\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The memory limit for the Snyk controller.\n            displayName: Memory limit\n            path: limits.memory\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n        version: v1alpha1\n  description: |-\n    A Kubernetes Operator for creating and managing Snyk Kubernetes controller instances.\n\n    Snyk integrates with Kubernetes, enabling you to import and test your running workloads and identify vulnerabilities in their associated images and configurations that might make those workloads less secure. Once imported, Snyk continues to monitor those workloads, identifying additional security issues as new images are deployed and the workload configuration changes.\n\n    ## Prerequisites\n\n    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId and Docker config file:\n\n    ```\n    kubectl create namespace snyk-monitor\n    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID}\n    ```\n\n    Refer to the [Snyk documentation](https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview) for more details.\n  displayName: Snyk Operator\n  icon:\n    - base64data: \n      mediatype: image/svg+xml\n  install:\n    spec:\n      clusterPermissions:\n        - rules:\n            - apiGroups:\n                - authentication.k8s.io\n              resources:\n                - tokenreviews\n                - subjectaccessreviews\n              verbs:\n                - create\n            - apiGroups:\n                - \"\"\n              resources:\n                - namespaces\n              verbs:\n                - get\n            - apiGroups:\n                - charts.snyk.io\n              resources:\n                - snykmonitors\n                - snykmonitors/status\n                - snykmonitors/finalizers\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - \"\"\n              resources:\n                - pods\n                - services\n                - services/finalizers\n                - serviceaccounts\n                - endpoints\n                - persistentvolumeclaims\n                - events\n                - configmaps\n                - secrets\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - apps\n              resources:\n                - deployments\n                - replicasets\n              verbs:\n                - \"*\"\n          serviceAccountName: snyk-operator\n        - rules:\n            - apiGroups:\n                - \"\"\n              resources:\n                - pods\n              verbs:\n                - get\n                - list\n                - watch\n            - apiGroups:\n                - \"\"\n              resources:\n                - namespaces\n              verbs:\n                - get\n                - list\n                - watch\n            - apiGroups:\n                - \"\"\n              resources:\n                - replicationcontrollers\n              verbs:\n                - get\n                - list\n                - watch\n            - apiGroups:\n                - batch\n              resources:\n                - cronjobs\n                - jobs\n              verbs:\n                - get\n                - list\n                - watch\n            - apiGroups:\n                - apps\n              resources:\n                - replicasets\n                - daemonsets\n                - deployments\n                - statefulsets\n              verbs:\n                - get\n                - list\n                - watch\n          serviceAccountName: snyk-monitor\n      deployments:\n        - name: snyk-operator\n          spec:\n            replicas: 1\n            selector:\n              matchLabels:\n                control-plane: controller-manager\n            strategy: {}\n            template:\n              metadata:\n                labels:\n                  app.kubernetes.io/name: snyk-operator\n                  app.kubernetes.io/instance: snyk-operator\n                  app.kubernetes.io/managed-by: snyk-operator-marketplace\n                  control-plane: controller-manager\n              spec:\n                containers:\n                  - image: registry.connect.redhat.com/snyk/kubernetes-operator:1.68.2\n                    name: operator\n                    resources:\n                      limits:\n                        cpu: 100m\n                        memory: 100Mi\n                      requests:\n                        cpu: 100m\n                        memory: 100Mi\n                    securityContext:\n                      privileged: false\n                      runAsNonRoot: true\n                      allowPrivilegeEscalation: false\n                      readOnlyRootFilesystem: true\n                      capabilities:\n                        drop:\n                          - ALL\n                    env:\n                      - name: WATCH_NAMESPACE\n                        valueFrom:\n                          fieldRef:\n                            fieldPath: metadata.annotations['olm.targetNamespaces']\n                      - name: POD_NAME\n                        valueFrom:\n                          fieldRef:\n                            fieldPath: metadata.name\n                      - name: OPERATOR_NAME\n                        value: snyk-operator\n                      - name: RELATED_IMAGE_DEPLOYMENT\n                        value: registry.connect.redhat.com/snyk/kubernetes-monitor:1.68.2\n                      - name: RELATED_IMAGE_DEPLOYMENT_INIT\n                        value: registry.access.redhat.com/ubi8-minimal:latest\n                  - args:\n                      - --secure-listen-address=0.0.0.0:8443\n                      - --upstream=http://127.0.0.1:8080/\n                      - --logtostderr=true\n                      - --v=10\n                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.6\n                    name: kube-rbac-proxy\n                    ports:\n                      - containerPort: 8443\n                        name: https\n                    resources:\n                      limits:\n                        cpu: 100m\n                        memory: 100Mi\n                      requests:\n                        cpu: 100m\n                        memory: 100Mi\n                    securityContext:\n                      privileged: false\n                      runAsNonRoot: true\n                      allowPrivilegeEscalation: false\n                      readOnlyRootFilesystem: true\n                      capabilities:\n                        drop:\n                          - ALL\n                serviceAccountName: snyk-operator\n                affinity:\n                  nodeAffinity:\n                    requiredDuringSchedulingIgnoredDuringExecution:\n                      nodeSelectorTerms:\n                        - matchExpressions:\n                            - key: kubernetes.io/arch\n                              operator: In\n                              values:\n                                - amd64\n                terminationGracePeriodSeconds: 10\n    strategy: deployment\n  installModes:\n    - supported: true\n      type: OwnNamespace\n    - supported: true\n      type: SingleNamespace\n    - supported: false\n      type: MultiNamespace\n    - supported: true\n      type: AllNamespaces\n  keywords:\n    - snyk\n    - controller\n    - monitor\n    - operator\n    - security\n    - cluster\n    - container\n    - image\n    - security\n    - vulnerabilities\n    - advisories\n    - audit\n    - scan\n    - scanning\n  links:\n    - name: Snyk Website\n      url: https://snyk.io\n    - name: Snyk Documentation\n      url: https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview\n  maintainers:\n    - email: support@snyk.io\n      name: Snyk Ltd.\n  maturity: stable\n  provider:\n    name: Snyk Ltd.\n  version: 1.68.2\n", "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations:\n    alm-examples: |-\n      [\n        {\n          \"apiVersion\": \"charts.snyk.io/v1alpha1\",\n          \"kind\": \"SnykMonitor\",\n          \"metadata\": {\n            \"name\": \"snyk-monitor\"\n          },\n          \"spec\": {\n            \"clusterName\": \"\",\n            \"image\": {\n              \"pullPolicy\": \"Always\",\n              \"repository\": \"docker.io/snyk/kubernetes-monitor\",\n              \"tag\": \"1.68.2\"\n            },\n            \"integrationApi\": \"\",\n            \"monitorSecrets\": \"snyk-monitor\",\n            \"scope\": \"Cluster\",\n            \"temporaryStorageSize\": \"50Gi\",\n            \"pvc\": {\n              \"enabled\": false,\n              \"name\": \"snyk-monitor-pvc\"\n            },\n            \"initContainerImage\": {\n              \"repository\": \"registry.access.redhat.com/ubi8-minimal\",\n              \"tag\": \"latest\"\n            },\n            \"requests\": {\n              \"memory\": \"400Mi\"\n            },\n            \"limits\": {\n              \"memory\": \"2Gi\"\n            },\n            \"nodeAffinity\": {\n              \"disableBetaArchNodeSelector\": false\n            }\n          }\n        }\n      ]\n    \"olm.skipRange\": \"<1.68.2\"\n    capabilities: Basic Install\n    categories: Developer Tools, Security\n    certified: \"true\"\n    containerImage: registry.connect.redhat.com/snyk/kubernetes-operator:1.68.2\n    createdAt: \"2020-08-28T15:20:21Z\"\n    description: A Kubernetes Operator for creating and managing Snyk controller instances.\n    operators.operatorframework.io/builder: operator-sdk-v1.3.0\n    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1\n    repository: https://github.com/snyk/kubernetes-monitor\n    support: Snyk Ltd.\n  name: snyk-operator.v1.68.2\nspec:\n  apiservicedefinitions: {}\n  customresourcedefinitions:\n    owned:\n    - description: Represents a deployment of the Snyk controller, which scans container images in the cluster for vulnerabilities.\n      displayName: Snyk Monitor\n      kind: SnykMonitor\n      name: snykmonitors.charts.snyk.io\n      resources:\n      - kind: Deployment\n        name: snyk-monitor\n        version: apps/v1\n      - kind: Secret\n        name: snyk-monitor\n        version: v1\n      specDescriptors:\n      - description: 'The name of the secret object that stores the Snyk controller secrets. The secret needs to contain the following data fields: - integrationId - dockercfg.json'\n        displayName: Snyk controller Secret name\n        path: monitorSecrets\n        x-descriptors:\n        - urn:alm:descriptor:io.kubernetes:Secret\n      - description: The name of the cluster that will be displayed in Snyk.\n        displayName: Cluster Name\n        path: clusterName\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: 'Whether the Snyk controller scans images in the whole cluster or in a specific namespace. Valid values are: Cluster, Namespaced.'\n        displayName: Scope\n        path: scope\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: API endpoint for sending image scan results. Does not need to be provided as part of the installation as it defaults to sending results to Snyk.\n        displayName: Integration API\n        path: integrationApi\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: How much disk storage to reserve for the Snyk controller.\n        displayName: Temporary Storage Size\n        path: temporaryStorageSize\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: Pull policy for the image.\n        displayName: Image Pull Policy\n        path: image.pullPolicy\n        x-descriptors:\n        - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\n      - description: The registry repository for the Snyk controller's image.\n        displayName: Image repository\n        path: image.repository\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: The tag for the Snyk controller's image.\n        displayName: Image tag\n        path: image.tag\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: >-\n          The memory requested by the Snyk controller.\n        displayName: Memory request\n        path: requests.memory\n        x-descriptors:\n          - \"urn:alm:descriptor:text\"\n      - description: >-\n          The memory limit for the Snyk controller.\n        displayName: Memory limit\n        path: limits.memory\n        x-descriptors:\n          - \"urn:alm:descriptor:text\"\n      version: v1alpha1\n  description: |-\n    A Kubernetes Operator for creating and managing Snyk Kubernetes controller instances.\n\n    Snyk integrates with Kubernetes, enabling you to import and test your running workloads and identify vulnerabilities in their associated images and configurations that might make those workloads less secure. Once imported, Snyk continues to monitor those workloads, identifying additional security issues as new images are deployed and the workload configuration changes.\n\n    ## Prerequisites\n\n    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId and Docker config file:\n\n    ```\n    kubectl create namespace snyk-monitor\n    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID}\n    ```\n\n    Refer to the [Snyk documentation](https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview) for more details.\n  displayName: Snyk Operator\n  icon:\n  - base64data: \n    mediatype: image/svg+xml\n  install:\n    spec:\n      deployments: null\n    strategy: \"\"\n  installModes:\n  - supported: true\n    type: OwnNamespace\n  - supported: true\n    type: SingleNamespace\n  - supported: false\n    type: MultiNamespace\n  - supported: true\n    type: AllNamespaces\n  keywords:\n  - snyk\n  - controller\n  - monitor\n  - operator\n  - security\n  - cluster\n  - container\n  - image\n  - security\n  - vulnerabilities\n  - advisories\n  - audit\n  - scan\n  - scanning\n  links:\n  - name: Snyk Website\n    url: https://snyk.io\n  - name: Snyk Documentation\n    url: https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview\n  maintainers:\n  - email: support@snyk.io\n    name: Snyk Ltd.\n  maturity: stable\n  provider:\n    name: Snyk Ltd.\n    url: https://snyk.io\n  version: 1.68.2\n", "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"snyk-monitor.name\" . }}\n  labels:\n    app.kubernetes.io/name: {{ include \"snyk-monitor.name\" . }}\n    helm.sh/chart: {{ include \"snyk-monitor.chart\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\nspec:\n  {{- if .Values.pvc.enabled }}\n  strategy:\n    type: Recreate\n  {{- end }}\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: {{ include \"snyk-monitor.name\" . }}\n      app.kubernetes.io/instance: {{ .Release.Name }}\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: {{ include \"snyk-monitor.name\" . }}\n        app.kubernetes.io/instance: {{ .Release.Name }}\n        app.kubernetes.io/managed-by: {{ .Release.Service }}\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                - key: \"kubernetes.io/arch\"\n                  operator: In\n                  values:\n                    {{- with .Values.nodeAffinity.kubernetesIoArch }}\n                      {{- toYaml . | nindent 20 }}\n                    {{- end }}\n                - key: \"beta.kubernetes.io/arch\"\n                  operator: In\n                  values:\n                    {{- with .Values.nodeAffinity.kubernetesIoArch }}\n                      {{- toYaml . | nindent 20 }}\n                    {{- end }}\n      serviceAccountName: {{ include \"snyk-monitor.name\" . }}\n      restartPolicy: Always\n      initContainers:\n        - name: volume-permissions\n          image: \"{{ .Values.initContainerImage.image }}\"\n          command: ['sh', '-c', 'chmod -R go+rwX /var/tmp || true']\n          volumeMounts:\n            - name: temporary-storage\n              mountPath: \"/var/tmp\"\n          resources:\n            requests:\n              cpu: \"100m\"\n              memory: \"100Mi\"\n            limits:\n              cpu: \"100m\"\n              memory: \"100Mi\"\n          securityContext:\n            privileged: false\n            runAsNonRoot: false\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            capabilities:\n              drop:\n                - ALL\n      containers:\n        - name: {{ include \"snyk-monitor.name\" . }}\n          image: \"{{ .Values.image.image }}\"\n          imagePullPolicy: {{ .Values.image.pullPolicy }}\n          terminationMessagePath: /dev/termination-log\n          terminationMessagePolicy: File\n          volumeMounts:\n          - name: docker-config\n            readOnly: true\n            mountPath: \"/srv/app/.docker\"\n          - name: temporary-storage\n            mountPath: \"/var/tmp\"\n          - name: ssl-certs\n            mountPath: \"/srv/app/certs\"\n          - name: workload-policies\n            mountPath: \"/tmp/policies\"\n            readOnly: true\n          - name: registries-conf\n            mountPath: \"/srv/app/.config/containers\"\n           {{- if .Values.excludedNamespaces }}\n          - name: excluded-namespaces\n            mountPath: \"/etc/config\"\n          {{- end }}\n          env:\n          - name: NODE_EXTRA_CA_CERTS\n            value: {{ .Values.extraCaCerts }}\n          - name: SNYK_INTEGRATION_ID\n            valueFrom:\n              secretKeyRef:\n                name: {{ .Values.monitorSecrets }}\n                key: integrationId\n          - name: SNYK_WATCH_NAMESPACE\n            value: {{ include \"snyk-monitor.scope\" . }}\n          - name: SNYK_DEPLOYMENT_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: SNYK_DEPLOYMENT_NAME\n            value: {{ include \"snyk-monitor.name\" . }}\n          - name: SNYK_INTEGRATION_API\n            value: {{ .Values.integrationApi }}\n          - name: SNYK_CLUSTER_NAME\n            value: {{ .Values.clusterName }}\n          - name: SNYK_MONITOR_VERSION\n            value: {{ .Values.image.tag }}\n          - name: HOME\n            value: /srv/app\n          - name: HTTP_PROXY\n            value: {{ .Values.http_proxy }}\n          - name: HTTPS_PROXY\n            value: {{ .Values.https_proxy }}\n          - name: NO_PROXY\n            value: {{ .Values.no_proxy }}\n          - name: USE_KEEPALIVE\n            value: {{ quote .Values.use_keepalive }}\n          - name: LOG_LEVEL\n            value: {{ .Values.log_level }}\n          - name: SKIP_K8S_JOBS\n            value: {{ quote .Values.skip_k8s_jobs }}\n          {{- with .Values.envs }}\n          {{- toYaml . | trim | nindent 10 -}}\n          {{ end }}\n          resources:\n            requests:\n              cpu: {{ .Values.requests.cpu }}\n              memory: {{ .Values.requests.memory }}\n            limits:\n              cpu: {{ .Values.limits.cpu }}\n              memory: {{ .Values.limits.memory }}\n          livenessProbe:\n            exec:\n              command:\n              - \"true\"\n          readinessProbe:\n            exec:\n              command:\n              - \"true\"\n          securityContext:\n            privileged: false\n            runAsNonRoot: true\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            capabilities:\n              drop:\n                - ALL\n      volumes:\n        - name: docker-config\n          secret:\n            secretName: {{ .Values.monitorSecrets }}\n            items:\n              - key: dockercfg.json\n                path: config.json\n        - name: temporary-storage\n          {{- if .Values.pvc.enabled }}\n          persistentVolumeClaim:\n            claimName: {{ .Values.pvc.name }}\n          {{- else }}\n          emptyDir:\n            sizeLimit: {{ .Values.temporaryStorageSize }}\n          {{- end }}\n        - name: ssl-certs\n          configMap:\n            name: {{ .Values.certsConfigMap }}\n            optional: true\n        - name: workload-policies\n          configMap:\n            name: {{ .Values.workloadPoliciesMap }}\n            optional: true\n        - name: registries-conf\n          configMap:\n            name: {{ .Values.registriesConfConfigMap }}\n            optional: true\n        {{- if .Values.excludedNamespaces }}\n        - name: excluded-namespaces\n          configMap:\n            name: {{ .Release.Name }}-excluded-namespaces\n        {{- end }}\n      {{- with .Values.nodeSelector }}\n      nodeSelector:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      {{- with .Values.tolerations }}\n      tolerations:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n", "# snyk-operator\n\n```sh\ncurl -Lo opm https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/darwin-amd64-opm\nchmod +x opm\n```\n\n```sh\nexport VERSION=1.40.3\nmake docker-build\ndocker push <operator-repo>:$VERSION\n\nmake bundle-build\ndocker tag snyk/snyk-operator-bundle:$VERSION <red-hat-certification-repo>:$VERSION\ndocker push <red-hat-certification-repo>:$VERSION\n\n./opm index add -c docker --bundles snyk/snyk-operator-bundle:$VERSION --tag snyk/snyk-operator-index:$VERSION\n```\n\n```yaml\napiVersion: operators.coreos.com/v1alpha1\nkind: CatalogSource\nmetadata:\n  name: snyk-operator\n  namespace: openshift-marketplace\nspec:\n  sourceType: grpc\n  image: docker.io/snyk/snyk-operator-index:1.40.3-pre5\n  displayName: Snyk Operator Bundle\n  publisher: Snyk Ltd.\n  updateStrategy:\n    registryPoll:\n      interval: 1m\n```\n\n```yaml\napiVersion: charts.snyk.io/v1alpha1 # this has changed, used to be \"charts.helm.k8s.io/v1alpha1\"\nkind: SnykMonitor\nmetadata:\n  name: snyk-monitor\n  namespace: snyk-monitor\nspec:\n  integrationApi: https://kubernetes-upstream.dev.snyk.io\n  temporaryStorageSize: 20Gi\n  pvc:\n    enabled: true\n---\napiVersion: operators.coreos.com/v1\nkind: OperatorGroup\nmetadata:\n  name: snyk-operator\n  namespace: snyk-monitor\nspec:\n  targetNamespaces:\n    - snyk-monitor\n---\napiVersion: operators.coreos.com/v1alpha1\nkind: Subscription\nmetadata:\n  name: snyk-operator\n  namespace: snyk-monitor\nspec:\n  channel: stable\n  name: snyk-operator-marketplace # this has changed, used to be \"snyk-operator\"\n  installPlanApproval: Automatic\n  source: snyk-operator\n  sourceNamespace: openshift-marketplace\n```\n", "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations:\n    alm-examples: |-\n      [\n        {\n          \"apiVersion\": \"charts.helm.k8s.io/v1alpha1\",\n          \"kind\": \"SnykMonitor\",\n          \"metadata\": {\n            \"name\": \"snyk-monitor\"\n          },\n          \"spec\": {\n            \"clusterName\": \"\",\n            \"image\": {\n              \"pullPolicy\": \"Always\",\n              \"repository\": \"snyk/kubernetes-monitor\",\n              \"tag\": \"SNYK_MONITOR_IMAGE_TAG_OVERRIDE\"\n            },\n            \"integrationApi\": \"\",\n            \"monitorSecrets\": \"snyk-monitor\",\n            \"scope\": \"Cluster\",\n            \"temporaryStorageSize\": \"50Gi\",\n            \"pvc\": {\n              \"enabled\": false,\n              \"create\": false,\n              \"name\": \"snyk-monitor-pvc\",\n              \"storageClassName\": null\n            },\n            \"initContainerImage\": {\n              \"repository\": \"busybox\",\n              \"tag\": \"latest\"\n            },\n            \"requests\": {\n              \"memory\": \"400Mi\"\n            },\n            \"limits\": {\n              \"memory\": \"2Gi\"\n            },\n            \"nodeAffinity\": {\n              \"disableBetaArchNodeSelector\": false\n            }\n          }\n        }\n      ]\n    \"olm.skipRange\": \"<1.68.2\"\n    capabilities: Basic Install\n    categories: Developer Tools, Security\n    containerImage: docker.io/snyk/kubernetes-operator:SNYK_OPERATOR_IMAGE_TAG_OVERRIDE\n    createdAt: TIMESTAMP_OVERRIDE\n    support: Snyk Ltd.\n    repository: https://github.com/snyk/kubernetes-monitor\n    description: |-\n      A Kubernetes Operator for creating and managing Snyk controller instances.\n    certified: \"false\"\n  name: snyk-operator.vSNYK_OPERATOR_VERSION_OVERRIDE\n  namespace: snyk-monitor\nspec:\n  apiservicedefinitions: {}\n  customresourcedefinitions:\n    owned:\n      - name: snykmonitors.charts.helm.k8s.io\n        displayName: Snyk Monitor\n        kind: SnykMonitor\n        version: v1alpha1\n        description: Represents a deployment of the Snyk controller, which scans container images in the cluster for vulnerabilities.\n        resources:\n          - kind: Deployment\n            name: snyk-monitor\n            version: v1\n          - kind: Secret\n            name: snyk-monitor\n            version: v1\n          - kind: PersistentVolumeClaim\n            name: snyk-monitor-pvc\n            version: v1\n        specDescriptors:\n          - description: >-\n              The name of the secret object that stores the Snyk controller secrets.\n              The secret needs to contain the following data fields:\n              - integrationId\n              - dockercfg.json\n            displayName: Snyk controller Secret name\n            path: monitorSecrets\n            x-descriptors:\n              - \"urn:alm:descriptor:io.kubernetes:Secret\"\n          - description: >-\n              The name of the cluster that will be displayed in Snyk.\n            displayName: Cluster Name\n            path: clusterName\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              Whether the Snyk controller scans images in the whole cluster or in a specific namespace. Valid values are: Cluster, Namespaced.\n            displayName: Scope\n            path: scope\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              API endpoint for sending image scan results. Does not need to be provided as part of the installation as it defaults to sending results to Snyk.\n            displayName: Integration API\n            path: integrationApi\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              How much disk storage to reserve for the Snyk controller.\n            displayName: Temporary Storage Size\n            path: temporaryStorageSize\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              Pull policy for the image.\n            displayName: Image Pull Policy\n            path: image.pullPolicy\n            x-descriptors:\n              - \"urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\"\n          - description: >-\n              The registry repository for the Snyk controller's image.\n            displayName: Image repository\n            path: image.repository\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The tag for the Snyk controller's image.\n            displayName: Image tag\n            path: image.tag\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              True to use a PVC for temporary storage, false to use emptyDir.\n            displayName: PVC enabled\n            path: pvc.enabled\n            x-descriptors:\n              - \"urn:alm:descriptor:com.tectonic.ui:booleanSwitch\"\n          - description: >-\n              True to create the PVC, false to reference it (in cases it already exists).\n            displayName: Create PVC\n            path: pvc.create\n            x-descriptors:\n              - \"urn:alm:descriptor:com.tectonic.ui:booleanSwitch\"\n          - description: >-\n              The name of the PVC, when enabled.\n            displayName: PVC name\n            path: pvc.name\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The name of the StorageClass to use for the PVC, when enabled.\n            displayName: PVC StorageClass name\n            path: pvc.storageClassName\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The repo to use for initContainer, if overriding.\n            displayName: InitContainer image repo\n            path: initContainerImage.repository\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The tag for the initContainer's image.\n            displayName: InitContainer image tag\n            path: initContainerImage.tag\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The memory requested by the Snyk controller.\n            displayName: Memory request\n            path: requests.memory\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The memory limit for the Snyk controller.\n            displayName: Memory limit\n            path: limits.memory\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              True to disable the beta.kubernetes.io/arch node affinity term.\n            displayName: Disable beta.kubernetes.io/arch node affinity\n            path: nodeAffinity.disableBetaArchNodeSelector\n            x-descriptors:\n              - \"urn:alm:descriptor:com.tectonic.ui:booleanSwitch\"\n  description: |-\n    A Kubernetes Operator for creating and managing Snyk Kubernetes controller instances.\n\n    Snyk integrates with Kubernetes, enabling you to import and test your running workloads and identify vulnerabilities in their associated images and configurations that might make those workloads less secure. Once imported, Snyk continues to monitor those workloads, identifying additional security issues as new images are deployed and the workload configuration changes.\n\n    ## Prerequisites\n\n    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId and Docker config file:\n\n    ```\n    kubectl create namespace snyk-monitor\n    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID}\n    ```\n\n    Refer to the [Snyk documentation](https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview) for more details.\n  displayName: Snyk Operator\n  install:\n    spec:\n      clusterPermissions:\n        - rules:\n            - apiGroups:\n                - rbac.authorization.k8s.io\n              resources:\n                - clusterroles\n                - clusterrolebindings\n              verbs:\n                - \"*\"\n          serviceAccountName: snyk-operator\n        - rules:\n            - apiGroups:\n                - \"\"\n              resources:\n                - serviceaccounts\n                - deployments\n                - namespaces\n                - configmaps\n                - secrets\n                - services\n                - pods\n                - persistentvolumeclaims\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - apps\n              resources:\n                - \"*\"\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - monitoring.coreos.com\n              resources:\n                - servicemonitors\n              verbs:\n                - get\n                - create\n            - apiGroups:\n                - apps\n              resourceNames:\n                - snyk-operator\n              resources:\n                - deployments/finalizers\n              verbs:\n                - update\n            - apiGroups:\n                - charts.helm.k8s.io\n              resources:\n                - \"*\"\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - apps.openshift.io\n              resources:\n                - deploymentconfigs\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - networking.k8s.io\n              resources:\n                - networkpolicies\n              verbs:\n                - \"*\"\n          serviceAccountName: snyk-operator\n      deployments:\n        - name: snyk-operator\n          spec:\n            replicas: 1\n            selector:\n              matchLabels:\n                name: snyk-operator\n            strategy: {}\n            template:\n              metadata:\n                labels:\n                  name: snyk-operator\n              spec:\n                containers:\n                  - env:\n                      - name: WATCH_NAMESPACE\n                        valueFrom:\n                          fieldRef:\n                            fieldPath: metadata.annotations['olm.targetNamespaces']\n                      - name: POD_NAME\n                        valueFrom:\n                          fieldRef:\n                            fieldPath: metadata.name\n                      - name: OPERATOR_NAME\n                        value: snyk-operator\n                    image: docker.io/snyk/kubernetes-operator:SNYK_OPERATOR_IMAGE_TAG_OVERRIDE\n                    imagePullPolicy: Always\n                    name: snyk-operator\n                    resources:\n                      requests:\n                        cpu: \"100m\"\n                        memory: \"100Mi\"\n                      limits:\n                        cpu: \"500m\"\n                        memory: \"500Mi\"\n                    livenessProbe:\n                      exec:\n                        command:\n                          - \"true\"\n                    readinessProbe:\n                      exec:\n                        command:\n                          - \"true\"\n                    securityContext:\n                      privileged: false\n                      runAsNonRoot: true\n                      allowPrivilegeEscalation: false\n                      readOnlyRootFilesystem: true\n                      capabilities:\n                        drop:\n                          - ALL\n                serviceAccountName: snyk-operator\n    strategy: deployment\n  installModes:\n    - supported: true\n      type: OwnNamespace\n    - supported: true\n      type: SingleNamespace\n    - supported: false\n      type: MultiNamespace\n    - supported: true\n      type: AllNamespaces\n  maturity: stable\n  icon:\n    - base64data: \n      mediatype: image/svg+xml\n  provider:\n    name: Snyk Ltd.\n  maintainers:\n    - name: Snyk Ltd.\n      email: support@snyk.io\n  links:\n    - name: Website\n      url: https://snyk.io\n    - name: Documentation\n      url: https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview\n  version: 0.0.0\n  keywords:\n    - \"snyk\"\n    - \"controller\"\n    - \"monitor\"\n    - \"operator\"\n    - \"security\"\n    - \"cluster\"\n    - \"container\"\n    - \"image\"\n    - \"security\"\n    - \"vulnerabilities\"\n    - \"advisories\"\n    - \"audit\"\n    - \"scan\"\n    - \"scanning\"\n", "import { readFileSync } from 'fs';\nimport { randomUUID } from 'crypto';\nimport { loadConfig } from 'snyk-config';\nimport { Config } from './types';\n\nconst config = loadConfig(__dirname + '/../..', {\n  secretConfig: process.env.CONFIG_SECRET_FILE,\n}) as unknown as Config;\n\nconst namespacesFilePath = '/etc/config/excludedNamespaces';\n\nfunction loadExcludedNamespaces(): string[] | null {\n  try {\n    const data = readFileSync(namespacesFilePath, 'utf-8');\n    const namespaces: string[] = data.split(/\\r?\\n/);\n    return namespaces;\n  } catch (err) {\n    return null;\n  }\n}\n\nfunction getClusterName(): string {\n  if (!config.CLUSTER_NAME) {\n    return 'Default cluster';\n  }\n\n  if (config.CLUSTER_NAME.includes('/')) {\n    // logger is not yet created so defaulting to console.log\n    console.log(\n      `removing disallowed character \"/\" from clusterName (${config.CLUSTER_NAME})`,\n    );\n    return config.CLUSTER_NAME.replace(/\\//g, '');\n  }\n\n  return config.CLUSTER_NAME;\n}\n\n// NOTE: The agent identifier is replaced with a stable identifier once snyk-monitor starts up\nconfig.AGENT_ID = randomUUID();\n\nconfig.INTEGRATION_ID = config.INTEGRATION_ID.trim();\nconfig.CLUSTER_NAME = getClusterName();\nconfig.IMAGE_STORAGE_ROOT = '/var/tmp';\nconfig.POLICIES_STORAGE_ROOT = '/tmp/policies';\nconfig.EXCLUDED_NAMESPACES = loadExcludedNamespaces();\nconfig.WORKERS_COUNT = Number(config.WORKERS_COUNT) || 10;\nconfig.SKOPEO_COMPRESSION_LEVEL = Number(config.SKOPEO_COMPRESSION_LEVEL) || 6;\n\n// return Sysdig endpoint information\nif (config.SYSDIG_ENDPOINT && config.SYSDIG_TOKEN) {\n  config.SYSDIG_ENDPOINT = config.SYSDIG_ENDPOINT.trim();\n  config.SYSDIG_TOKEN = config.SYSDIG_TOKEN.trim();\n}\n\n/**\n * Important: we delete the following env vars because we don't want to proxy requests to the Kubernetes API server.\n * The Kubernetes client library would honor the NO/HTTP/HTTPS_PROXY env vars.\n */\nconfig.HTTPS_PROXY = process.env['HTTPS_PROXY'];\nconfig.HTTP_PROXY = process.env['HTTP_PROXY'];\nconfig.NO_PROXY = process.env['NO_PROXY'];\nconfig.USE_KEEPALIVE = process.env.USE_KEEPALIVE === 'true';\ndelete process.env['HTTPS_PROXY'];\ndelete process.env['HTTP_PROXY'];\ndelete process.env['NO_PROXY'];\n\nconfig.SKIP_K8S_JOBS = process.env.SKIP_K8S_JOBS === 'true';\n\nexport { config };\n", "export interface Config {\n  LOGGING: {\n    name: 'kubernetes-monitor';\n    level: 'debug' | 'info' | 'warn' | 'error';\n  };\n  IMAGES_SCANNED_CACHE: {\n    MAX_SIZE: number;\n    MAX_AGE_MS: number;\n  };\n  WORKLOADS_SCANNED_CACHE: {\n    MAX_SIZE: number;\n    MAX_AGE_MS: number;\n  };\n  WORKLOAD_METADATA_CACHE: {\n    MAX_SIZE: number;\n    MAX_AGE_MS: number;\n  };\n  WORKERS_COUNT: number;\n  REQUEST_QUEUE_LENGTH: number;\n  QUEUE_LENGTH_LOG_FREQUENCY_MINUTES: number;\n  INTEGRATION_ID: string;\n  DEFAULT_KUBERNETES_UPSTREAM_URL: string;\n  MAX_RETRY_BACKOFF_DURATION_SECONDS: number;\n\n  // ----------------------------------------\n  // Properties injected by Helm (via environment variables) or manually set in code:\n  CLUSTER_NAME: string;\n  AGENT_ID: string;\n  IMAGE_STORAGE_ROOT: '/var/tmp';\n  POLICIES_STORAGE_ROOT: '/tmp/policies';\n  EXCLUDED_NAMESPACES: string[] | null;\n  SKOPEO_COMPRESSION_LEVEL: number;\n  SYSDIG_ENDPOINT: string;\n  SYSDIG_TOKEN: string;\n  HTTPS_PROXY: string | undefined;\n  HTTP_PROXY: string | undefined;\n  NO_PROXY: string | undefined;\n  USE_KEEPALIVE: boolean;\n  SKIP_K8S_JOBS: boolean;\n  DEPLOYMENT_NAME: string;\n  DEPLOYMENT_NAMESPACE: string;\n  WATCH_NAMESPACE: string;\n  INTEGRATION_API: string;\n  MONITOR_VERSION: string;\n  NAMESPACE: string;\n}\n", "import * as fastq from 'fastq';\nimport needle from 'needle';\nimport sleep from 'sleep-promise';\nimport { Agent as HttpAgent } from 'http';\nimport { Agent as HttpsAgent } from 'https';\nimport { NeedleResponse, NeedleHttpVerbs, NeedleOptions } from 'needle';\n\nimport { logger } from '../common/logger';\nimport { config } from '../common/config';\nimport {\n  IDeleteWorkloadPayload,\n  IWorkloadMetadataPayload,\n  IResponseWithAttempts,\n  IRequestError,\n  ScanResultsPayload,\n  IDependencyGraphPayload,\n  IWorkloadEventsPolicyPayload,\n  IClusterMetadataPayload,\n  IRuntimeDataPayload,\n} from './types';\nimport { getProxyAgent } from './proxy';\n\nimport type { queueAsPromised } from 'fastq';\n\ninterface KubernetesUpstreamRequest {\n  method: NeedleHttpVerbs;\n  url: string;\n  payload:\n    | IDependencyGraphPayload\n    | ScanResultsPayload\n    | IWorkloadMetadataPayload\n    | IDeleteWorkloadPayload\n    | IClusterMetadataPayload\n    | IRuntimeDataPayload;\n}\n\nconst upstreamUrl =\n  config.INTEGRATION_API || config.DEFAULT_KUBERNETES_UPSTREAM_URL;\n\nlet httpAgent = new HttpAgent({\n  keepAlive: config.USE_KEEPALIVE,\n});\n\nlet httpsAgent = new HttpsAgent({\n  keepAlive: config.USE_KEEPALIVE,\n});\n\nfunction getAgent(u: string): HttpAgent {\n  const url = new URL(u);\n  return url.protocol === 'https:' ? httpsAgent : httpAgent;\n}\n\n// Async queue wraps around the call to retryRequest in order to limit\n// the number of requests in flight to kubernetes upstream at any one time.\nconst reqQueue: queueAsPromised<unknown> = fastq.promise(async function (\n  req: KubernetesUpstreamRequest,\n) {\n  return await retryRequest(req.method, req.url, req.payload);\n},\nconfig.REQUEST_QUEUE_LENGTH);\n\nexport async function sendDepGraph(\n  ...payloads: IDependencyGraphPayload[]\n): Promise<void> {\n  for (const payload of payloads) {\n    // Intentionally removing dependencyGraph as it would be too big to log\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { dependencyGraph, ...payloadWithoutDepGraph } = payload;\n    try {\n      const request: KubernetesUpstreamRequest = {\n        method: 'post',\n        url: `${upstreamUrl}/api/v1/dependency-graph`,\n        payload,\n      };\n\n      const { response, attempt } = await reqQueue.push(request);\n      if (!isSuccessStatusCode(response.statusCode)) {\n        throw new Error(`${response.statusCode} ${response.statusMessage}`);\n      } else {\n        logger.info(\n          { payload: payloadWithoutDepGraph, attempt },\n          'dependency graph sent upstream successfully',\n        );\n      }\n    } catch (error) {\n      logger.error(\n        { error, payload: payloadWithoutDepGraph },\n        'could not send the dependency scan result upstream',\n      );\n    }\n  }\n}\n\nexport async function sendScanResults(\n  payloads: ScanResultsPayload[],\n): Promise<boolean> {\n  for (const payload of payloads) {\n    // Intentionally removing scan results as they would be too big to log\n    const payloadWithoutScanResults = { ...payload, scanResults: undefined };\n    try {\n      const request: KubernetesUpstreamRequest = {\n        method: 'post',\n        url: `${upstreamUrl}/api/v1/scan-results`,\n        payload,\n      };\n\n      const { response, attempt } = await reqQueue.push(request);\n      if (!isSuccessStatusCode(response.statusCode)) {\n        throw new Error(`${response.statusCode} ${response.statusMessage}`);\n      } else {\n        logger.info(\n          { payload: payloadWithoutScanResults, attempt },\n          'scan results sent upstream successfully',\n        );\n      }\n    } catch (error) {\n      logger.error(\n        { error, payload: payloadWithoutScanResults },\n        'could not send the scan results upstream',\n      );\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport async function sendWorkloadMetadata(\n  payload: IWorkloadMetadataPayload,\n): Promise<void> {\n  try {\n    logger.info(\n      { workloadLocator: payload.workloadLocator },\n      'attempting to send workload metadata upstream',\n    );\n\n    const request: KubernetesUpstreamRequest = {\n      method: 'post',\n      url: `${upstreamUrl}/api/v1/workload`,\n      payload,\n    };\n\n    const { response, attempt } = await reqQueue.push(request);\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    } else {\n      logger.info(\n        { workloadLocator: payload.workloadLocator, attempt },\n        'workload metadata sent upstream successfully',\n      );\n    }\n  } catch (error) {\n    logger.error(\n      { error, workloadLocator: payload.workloadLocator },\n      'could not send workload metadata upstream',\n    );\n  }\n}\n\nexport async function sendWorkloadEventsPolicy(\n  payload: IWorkloadEventsPolicyPayload,\n): Promise<void> {\n  try {\n    logger.info(\n      {\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n      },\n      'attempting to send workload auto-import policy',\n    );\n\n    const { response, attempt } = await retryRequest(\n      'post',\n      `${upstreamUrl}/api/v1/policy`,\n      payload,\n    );\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    }\n\n    logger.info(\n      {\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n        attempt,\n      },\n      'workload auto-import policy sent upstream successfully',\n    );\n  } catch (error) {\n    logger.error(\n      {\n        error,\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n      },\n      'could not send workload auto-import policy',\n    );\n  }\n}\n\nexport async function deleteWorkload(\n  payload: IDeleteWorkloadPayload,\n): Promise<void> {\n  try {\n    const { workloadLocator, agentId } = payload;\n    const { userLocator, cluster, namespace, type, name } = workloadLocator;\n    const query = `userLocator=${userLocator}&cluster=${cluster}&namespace=${namespace}&type=${type}&name=${name}&agentId=${agentId}`;\n    const request: KubernetesUpstreamRequest = {\n      method: 'delete',\n      url: `${upstreamUrl}/api/v1/workload?${query}`,\n      payload,\n    };\n\n    const { response, attempt } = await reqQueue.push(request);\n    // TODO: Remove this check, the upstream no longer returns 404 in such cases\n    if (response.statusCode === 404) {\n      logger.info(\n        { payload },\n        'attempted to delete a workload the Upstream service could not find',\n      );\n      return;\n    }\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    } else {\n      logger.info(\n        { workloadLocator: payload.workloadLocator, attempt },\n        'workload deleted successfully',\n      );\n    }\n  } catch (error) {\n    logger.error(\n      { error, payload },\n      'could not send delete a workload from the upstream',\n    );\n  }\n}\n\nfunction isSuccessStatusCode(statusCode: number | undefined): boolean {\n  return statusCode !== undefined && statusCode > 100 && statusCode < 400;\n}\n\nexport async function retryRequest(\n  verb: NeedleHttpVerbs,\n  url: string,\n  payload: object,\n  reqOptions: NeedleOptions = {},\n): Promise<IResponseWithAttempts> {\n  const retry = {\n    attempts: 3,\n    rateLimitIntervalSeconds: 60,\n    transientIntervalSeconds: 2,\n  };\n  const options: NeedleOptions = {\n    json: true,\n    compressed: true,\n    agent: getAgent(url),\n    ...reqOptions,\n  };\n\n  if (config.HTTP_PROXY || config.HTTPS_PROXY) {\n    options.agent = getProxyAgent(config, url);\n  }\n\n  let response: NeedleResponse | undefined;\n  let attempt: number;\n\n  for (attempt = 1; attempt <= retry.attempts; attempt++) {\n    const stillHaveRetries = attempt + 1 <= retry.attempts;\n    let statusCode: number | undefined = undefined;\n\n    try {\n      response = await needle(verb, url, payload, options);\n      statusCode = response.statusCode;\n\n      if (\n        ![429, 502, 503, 504].includes(response.statusCode || 0) ||\n        !stillHaveRetries\n      ) {\n        break;\n      }\n    } catch (err: any) {\n      if (!shouldRetryRequest(err, stillHaveRetries)) {\n        throw err;\n      }\n    }\n\n    if (statusCode === 429) {\n      await sleep(retry.rateLimitIntervalSeconds * 1000);\n    } else {\n      await sleep(retry.transientIntervalSeconds * 1000);\n    }\n  }\n\n  if (response === undefined) {\n    throw new Error('failed sending a request upstream');\n  }\n\n  return { response, attempt };\n}\n\nfunction shouldRetryRequest(\n  err: IRequestError,\n  stillHaveRetries: boolean,\n): boolean {\n  const networkErrorMessages: string[] = [\n    'socket hang up',\n    'Client network socket disconnected before secure TLS connection was established',\n    'write ECONNRESET', // May happen due to Keep-Alive race condition - https://code-examples.net/en/q/28a8069\n  ];\n\n  if (!stillHaveRetries) {\n    return false;\n  }\n\n  if (err.code === 'ECONNRESET' && networkErrorMessages.includes(err.message)) {\n    return true;\n  }\n\n  if (err.code === 'EAI_AGAIN') {\n    return true;\n  }\n\n  return false;\n}\n\nexport async function sendClusterMetadata(): Promise<void> {\n  const payload: IClusterMetadataPayload = {\n    userLocator: config.INTEGRATION_ID,\n    cluster: config.CLUSTER_NAME,\n    agentId: config.AGENT_ID,\n    version: config.MONITOR_VERSION,\n    namespace: config.NAMESPACE,\n  };\n\n  try {\n    logger.info(\n      {\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n      },\n      'attempting to send cluster metadata',\n    );\n\n    const request: KubernetesUpstreamRequest = {\n      method: 'post',\n      url: `${upstreamUrl}/api/v1/cluster`,\n      payload,\n    };\n\n    const { response, attempt } = await reqQueue.push(request);\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    }\n\n    logger.info(\n      {\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n        attempt,\n      },\n      'cluster metadata sent upstream successfully',\n    );\n  } catch (error) {\n    logger.error(\n      {\n        error,\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n      },\n      'could not send cluster metadata',\n    );\n  }\n}\n\nexport async function sendRuntimeData(\n  payload: IRuntimeDataPayload,\n): Promise<void> {\n  const logContext = {\n    userLocator: payload.target.userLocator,\n    cluster: payload.target.cluster,\n    agentId: payload.target.agentId,\n    identity: payload.identity,\n  };\n\n  try {\n    logger.info(logContext, 'attempting to send runtime data');\n\n    const request: KubernetesUpstreamRequest = {\n      method: 'post',\n      url: `${upstreamUrl}/api/v1/runtime-results`,\n      payload,\n    };\n\n    const { response, attempt } = await reqQueue.push(request);\n\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    }\n\n    logger.info(\n      {\n        attempt,\n        ...logContext,\n      },\n      'runtime data sent upstream successfully',\n    );\n  } catch (error) {\n    logger.error(\n      {\n        error,\n        ...logContext,\n      },\n      'could not send runtime data',\n    );\n  }\n}\n", "describe('extractNamespaceName()', () => {\n  beforeEach(() => {\n    jest.resetModules();\n    process.env.SNYK_SYSDIG_ENDPOINT = 'https://api/v1/images/';\n    process.env.SNYK_SYSDIG_TOKEN = '1432gtrhtrw32raf';\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n    delete process.env.SNYK_CLUSTER_NAME;\n    delete process.env.SNYK_SYSDIG_ENDPOINT;\n  });\n\n  test.each([\n    [\n      'cluster name with /',\n      {\n        clusterNameEnvVar: 'cluster/name',\n        wantClusterName: 'clustername',\n        consoleLogCalledTimes: 1,\n      },\n    ],\n    [\n      'cluster name with  more than one /',\n      {\n        clusterNameEnvVar: 'cluster/name/slash',\n        wantClusterName: 'clusternameslash',\n        consoleLogCalledTimes: 1,\n      },\n    ],\n    [\n      'cluster name without /',\n      {\n        clusterNameEnvVar: 'normal cluster name',\n        wantClusterName: 'normal cluster name',\n        consoleLogCalledTimes: 0,\n      },\n    ],\n    [\n      'no cluster name set',\n      {\n        clusterNameEnvVar: '',\n        wantClusterName: 'Default cluster',\n        consoleLogCalledTimes: 0,\n      },\n    ],\n  ])(\n    '%s',\n    (\n      _testCaseName,\n      { clusterNameEnvVar, wantClusterName, consoleLogCalledTimes },\n    ) => {\n      if (clusterNameEnvVar) {\n        process.env.SNYK_CLUSTER_NAME = clusterNameEnvVar;\n      }\n\n      const consoleSpy = jest.spyOn(console, 'log').mockReturnValue();\n\n      const { config } = require('../../src/common/config');\n      expect(config.CLUSTER_NAME).toBe(wantClusterName);\n      expect(consoleSpy).toHaveBeenCalledTimes(consoleLogCalledTimes);\n\n      delete process.env.SNYK_SYSDIG_TOKEN;\n    },\n  );\n\n  it('loads the expected configuration values', () => {\n    const { config } = require('../../src/common/config');\n    expect(config.AGENT_ID).toEqual(expect.any(String));\n    expect(config.INTEGRATION_ID).toEqual(expect.any(String));\n    expect(config.CLUSTER_NAME).toEqual('Default cluster');\n    expect(config.IMAGE_STORAGE_ROOT).toEqual('/var/tmp');\n    expect(config.EXCLUDED_NAMESPACES).toBeNull();\n    expect(config.HTTPS_PROXY).toBeUndefined();\n    expect(config.HTTP_PROXY).toBeUndefined();\n    expect(config.NO_PROXY).toBeUndefined();\n    expect(config.USE_KEEPALIVE).toEqual(true);\n    expect(config.SKIP_K8S_JOBS).toEqual(false);\n    expect(config.WORKERS_COUNT).toEqual(10);\n    expect(config.SKOPEO_COMPRESSION_LEVEL).toEqual(6);\n    expect(config.SYSDIG_ENDPOINT).toEqual('https://api/v1/images/');\n    expect(config.SYSDIG_TOKEN).toEqual('1432gtrhtrw32raf');\n  });\n\n  it('cannot load sysdig API and JWT values if it is not enabled', () => {\n    delete process.env.SNYK_SYSDIG_ENDPOINT;\n    delete process.env.SNYK_SYSDIG_TOKEN;\n    const { config } = require('../../src/common/config');\n    expect(config.SYSDIG_ENDPOINT).toBeUndefined();\n    expect(config.SYSDIG_TOKEN).toBeUndefined();\n  });\n});\n", "apiVersion: charts.helm.k8s.io/v1alpha1\nkind: SnykMonitor\nmetadata:\n  name: snyk-monitor\n  namespace: marketplace\nspec:\n  integrationApi: https://kubernetes-upstream.dev.snyk.io\n  temporaryStorageSize: 20Gi\n  clusterName: \"\"\n  pvc:\n    enabled: true\n    create: true\n", "apiVersion: charts.helm.k8s.io/v1alpha1\nkind: SnykMonitor\nmetadata:\n  name: snyk-monitor\n  namespace: snyk-monitor\nspec:\n  integrationApi: https://kubernetes-upstream.dev.snyk.io\n  temporaryStorageSize: 20Gi\n  clusterName: \"\"\n  pvc:\n    enabled: true\n    create: true\n", "import { platform } from 'os';\nimport { existsSync, chmodSync } from 'fs';\n\nimport { IDeployer, IDeployOptions, IImageOptions } from './types';\nimport * as kubectl from '../../helpers/kubectl';\nimport { execWrapper as exec } from '../../helpers/exec';\n\nconst helmVersion = '3.0.0';\nconst helmPath = './helm';\nconst helmChartPath = './snyk-monitor';\n\nexport const helmWithProxyDeployer: IDeployer = {\n  deploy: deployKubernetesMonitor,\n};\n\nasync function deployKubernetesMonitor(\n  imageOptions: IImageOptions,\n  deployOptions: IDeployOptions,\n): Promise<void> {\n  if (!existsSync(helmPath)) {\n    await downloadHelm();\n  }\n\n  await kubectl.applyK8sYaml('test/fixtures/proxying/tinyproxy-service.yaml');\n  await kubectl.applyK8sYaml(\n    'test/fixtures/proxying/tinyproxy-deployment.yaml',\n  );\n  await kubectl.waitForDeployment('forwarding-proxy', 'snyk-monitor');\n\n  const imageNameAndTag = imageOptions.nameAndTag.split(':');\n  const imageName = imageNameAndTag[0];\n  const imageTag = imageNameAndTag[1];\n  const imagePullPolicy = imageOptions.pullPolicy;\n\n  await exec(\n    `${helmPath} upgrade --install snyk-monitor ${helmChartPath} --namespace snyk-monitor ` +\n      `--set image.repository=${imageName} ` +\n      `--set image.tag=${imageTag} ` +\n      `--set image.pullPolicy=${imagePullPolicy} ` +\n      '--set integrationApi=https://kubernetes-upstream.dev.snyk.io ' +\n      `--set clusterName=${deployOptions.clusterName} ` +\n      '--set https_proxy=http://forwarding-proxy:8080',\n  );\n  console.log(\n    `Deployed ${imageOptions.nameAndTag} with pull policy ${imageOptions.pullPolicy}`,\n  );\n}\n\nasync function downloadHelm(): Promise<void> {\n  console.log(`Downloading Helm ${helmVersion}...`);\n  const os = platform();\n  await exec(\n    `curl https://get.helm.sh/helm-v${helmVersion}-${os}-amd64.tar.gz | tar xfzO - ${os}-amd64/helm > ${helmPath}`,\n  );\n  chmodSync(helmPath, 0o755); // rwxr-xr-x\n  console.log('Downloaded Helm');\n}\n", "import { platform } from 'os';\nimport { existsSync, chmodSync } from 'fs';\n\nimport { IDeployer, IDeployOptions, IImageOptions } from './types';\nimport { execWrapper as exec } from '../../helpers/exec';\n\nconst helmVersion = '3.0.0';\nconst helmPath = './helm';\nconst helmChartPath = './snyk-monitor';\n\nexport const helmDeployer: IDeployer = {\n  deploy: deployKubernetesMonitor,\n};\n\nasync function deployKubernetesMonitor(\n  imageOptions: IImageOptions,\n  deployOptions: IDeployOptions,\n): Promise<void> {\n  if (!existsSync(helmPath)) {\n    await downloadHelm();\n  }\n\n  const imageNameAndTag = imageOptions.nameAndTag.split(':');\n  const imageName = imageNameAndTag[0];\n  const imageTag = imageNameAndTag[1];\n  const imagePullPolicy = imageOptions.pullPolicy;\n\n  await exec(\n    `${helmPath} upgrade --install snyk-monitor ${helmChartPath} --namespace snyk-monitor ` +\n      `--set image.repository=${imageName} ` +\n      `--set image.tag=${imageTag} ` +\n      `--set image.pullPolicy=${imagePullPolicy} ` +\n      '--set integrationApi=https://kubernetes-upstream.dev.snyk.io ' +\n      `--set clusterName=${deployOptions.clusterName} ` +\n      '--set nodeSelector.\"kubernetes\\\\.io/os\"=linux ' +\n      '--set pvc.enabled=true ' +\n      '--set pvc.create=true ' +\n      '--set log_level=\"INFO\" ' +\n      '--set rbac.serviceAccount.annotations.\"foo\"=\"bar\" ' +\n      '--set volumes.projected.serviceAccountToken=true ' +\n      '--set securityContext.fsGroup=65534 ' +\n      '--set skopeo.compression.level=1 ' +\n      '--set workers.count=5 ' +\n      '--set sysdig.enabled=true ',\n  );\n  console.log(\n    `Deployed ${imageOptions.nameAndTag} with pull policy ${imageOptions.pullPolicy}`,\n  );\n}\n\nasync function downloadHelm(): Promise<void> {\n  console.log(`Downloading Helm ${helmVersion}...`);\n  const os = platform();\n  await exec(\n    `curl https://get.helm.sh/helm-v${helmVersion}-${os}-amd64.tar.gz | tar xfzO - ${os}-amd64/helm > ${helmPath}`,\n  );\n  chmodSync(helmPath, 0o755); // rwxr-xr-x\n  console.log('Downloaded Helm');\n}\n", "import { readFileSync, writeFileSync } from 'fs';\nimport { parse, stringify } from 'yaml';\n\nimport * as kubectl from '../../helpers/kubectl';\nimport { IDeployer, IImageOptions, IDeployOptions } from './types';\n\nexport const yamlDeployer: IDeployer = {\n  deploy: deployKubernetesMonitor,\n};\n\nasync function deployKubernetesMonitor(\n  imageOptions: IImageOptions,\n  deployOptions: IDeployOptions,\n): Promise<void> {\n  const testYaml = 'snyk-monitor-test-deployment.yaml';\n  createTestYamlDeployment(\n    testYaml,\n    imageOptions.nameAndTag,\n    imageOptions.pullPolicy,\n    deployOptions.clusterName,\n  );\n\n  await kubectl.applyK8sYaml('./snyk-monitor-cluster-permissions.yaml');\n  await kubectl.applyK8sYaml('./snyk-monitor-test-deployment.yaml');\n}\n\nfunction createTestYamlDeployment(\n  newYamlPath: string,\n  imageNameAndTag: string,\n  imagePullPolicy: string,\n  clusterName: string,\n): void {\n  console.log('Creating YAML snyk-monitor deployment...');\n  const originalDeploymentYaml = readFileSync(\n    './snyk-monitor-deployment.yaml',\n    'utf8',\n  );\n  const deployment = parse(originalDeploymentYaml);\n\n  const container = deployment.spec.template.spec.containers.find(\n    (container) => container.name === 'snyk-monitor',\n  );\n  container.image = imageNameAndTag;\n  container.imagePullPolicy = imagePullPolicy;\n\n  // Inject the baseUrl of kubernetes-upstream that snyk-monitor container use to send metadata\n  const envVar = container.env.find(\n    (env) => env.name === 'SNYK_INTEGRATION_API',\n  );\n  envVar.value = 'https://kubernetes-upstream.dev.snyk.io';\n  delete envVar.valueFrom;\n\n  if (clusterName) {\n    const clusterNameEnvVar = container.env.find(\n      (env) => env.name === 'SNYK_CLUSTER_NAME',\n    );\n    clusterNameEnvVar.value = clusterName;\n    delete clusterNameEnvVar.valueFrom;\n  }\n\n  writeFileSync(newYamlPath, stringify(deployment));\n  console.log('Created YAML snyk-monitor deployment');\n}\n", "import * as fs from 'fs';\nimport { randomUUID } from 'crypto';\nimport sleep from 'sleep-promise';\n\nimport platforms, { getKubernetesVersionForPlatform } from './platforms';\nimport deployers from './deployers';\nimport { IDeployOptions, IImageOptions } from './deployers/types';\nimport * as kubectl from '../helpers/kubectl';\nimport { execWrapper as exec } from '../helpers/exec';\n\nconst testPlatform = process.env['TEST_PLATFORM'] || 'kind';\nconst createCluster = process.env['CREATE_CLUSTER'] === 'true';\nconst deploymentType = process.env['DEPLOYMENT_TYPE'] || 'YAML';\n\nfunction getIntegrationId(): string {\n  const integrationId = randomUUID();\n  console.log(`Generated new integration ID ${integrationId}`);\n  return integrationId;\n}\n\nfunction getClusterName(): string {\n  const clusterName = `cluster_${randomUUID()}`;\n  console.log(`Generated new Cluster Name ${clusterName}`);\n  return clusterName;\n}\n\nfunction getEnvVariableOrDefault(\n  envVarName: string,\n  defaultValue: string,\n): string {\n  const value = process.env[envVarName];\n  return value === undefined || value === '' ? defaultValue : value;\n}\n\nexport function snykMonitorNamespace(): string {\n  let namespace = 'snyk-monitor';\n  if (testPlatform === 'kindolm') {\n    namespace = 'marketplace';\n  }\n\n  return namespace;\n}\n\nexport async function removeMonitor(): Promise<void> {\n  // Credentials may have expired on certain platforms (OpenShift 4), try to regenerate them.\n  await platforms[testPlatform].config().catch(() => undefined);\n  await dumpLogs().catch(() => undefined);\n\n  try {\n    if (createCluster) {\n      await platforms[testPlatform].delete();\n    } else {\n      await platforms[testPlatform].clean();\n    }\n  } catch (error: any) {\n    console.log(`Could not remove the Kubernetes-Monitor: ${error.message}`);\n  }\n}\n\nexport async function removeLocalContainerRegistry(): Promise<void> {\n  try {\n    await exec('docker rm kind-registry --force');\n  } catch (error: any) {\n    console.log(\n      `Could not remove container registry, it probably did not exist: ${error.message}`,\n    );\n  }\n}\n\nexport async function removeUnusedKindNetwork(): Promise<void> {\n  try {\n    await exec('docker network rm kind');\n  } catch (error: any) {\n    console.log(`Could not remove \"kind\" network: ${error.message}`);\n  }\n}\n\nasync function createEnvironment(): Promise<void> {\n  await kubectl.createNamespace('services');\n  // Small hack to prevent timing problems in CircleCI...\n  // TODO: should be replaced by actively waiting for the namespace to be created\n  await sleep(5000);\n}\n\nasync function predeploy(\n  integrationId: string,\n  namespace: string,\n): Promise<void> {\n  try {\n    const secretName = 'snyk-monitor';\n    console.log(`Creating namespace ${namespace} and secret ${secretName}`);\n\n    try {\n      await kubectl.createNamespace(namespace);\n    } catch (error) {\n      console.log(`Namespace ${namespace} already exist`);\n    }\n    const gcrDockercfg = process.env['PRIVATE_REGISTRIES_DOCKERCFG'] || '{}';\n    await kubectl.createSecret(secretName, namespace, {\n      'dockercfg.json': gcrDockercfg,\n      integrationId,\n    });\n    await createRegistriesConfigMap(namespace);\n    console.log(`Namespace ${namespace} and secret ${secretName} created`);\n  } catch (error) {\n    console.log(\n      'Could not create namespace and secret, they probably already exist',\n    );\n  }\n}\n\n/** This is used in order to avoid Docker Hub rate limiting on our integration tests. */\nasync function createSecretForDockerHubAccess(): Promise<void> {\n  const secretName = 'docker-io';\n  const secretsKeyPrefix = '--';\n  const secretType = 'docker-registry';\n  await kubectl.createSecret(\n    secretName,\n    'services',\n    {\n      'docker-server': 'https://docker.io',\n      'docker-username': getEnvVariableOrDefault('DOCKER_HUB_RO_USERNAME', ''),\n      'docker-email': 'runtime@snyk.io',\n      'docker-password': getEnvVariableOrDefault('DOCKER_HUB_RO_PASSWORD', ''),\n    },\n    secretsKeyPrefix,\n    secretType,\n  );\n}\n\nasync function createSecretForGcrIoAccess(): Promise<void> {\n  const gcrSecretName = 'gcr-io';\n  const gcrKubectlSecretsKeyPrefix = '--';\n  const gcrSecretType = 'docker-registry';\n  const gcrToken = getEnvVariableOrDefault('GCR_IO_SERVICE_ACCOUNT', '{}');\n  await kubectl.createSecret(\n    gcrSecretName,\n    'services',\n    {\n      'docker-server': 'https://gcr.io',\n      'docker-username': '_json_key',\n      'docker-email': 'egg@snyk.io',\n      'docker-password': gcrToken,\n    },\n    gcrKubectlSecretsKeyPrefix,\n    gcrSecretType,\n  );\n}\n\nasync function createRegistriesConfigMap(namespace): Promise<void> {\n  await kubectl.createConfigMap(\n    'snyk-monitor-registries-conf',\n    namespace,\n    './test/fixtures/insecure-registries/registries.conf',\n  );\n}\n\nexport async function deployMonitor(): Promise<{\n  integrationId: string;\n  clusterName: string;\n}> {\n  console.log('Begin deploying the snyk-monitor...');\n  const namespace = snykMonitorNamespace();\n  try {\n    await platforms[testPlatform].validateRequiredEnvironment();\n\n    const imageNameAndTag = getEnvVariableOrDefault(\n      'KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG',\n      // the default, determined by ./script/build-image.sh\n      'snyk/kubernetes-monitor:local',\n    );\n\n    console.log(\n      `platform chosen is ${testPlatform}, createCluster===${createCluster}`,\n    );\n\n    const kubernetesVersion = getKubernetesVersionForPlatform(testPlatform);\n    await kubectl.downloadKubectl(kubernetesVersion);\n\n    await platforms[testPlatform].setupTester();\n    if (createCluster) {\n      await platforms[testPlatform].create(kubernetesVersion);\n      await platforms[testPlatform].config();\n    } else {\n      await platforms[testPlatform].config();\n      await platforms[testPlatform].clean();\n    }\n    const remoteImageName = await platforms[testPlatform].loadImage(\n      imageNameAndTag,\n    );\n    await createEnvironment();\n    await createSecretForGcrIoAccess();\n    await createSecretForDockerHubAccess();\n\n    const integrationId = getIntegrationId();\n    await predeploy(integrationId, namespace);\n\n    // TODO: hack, rewrite this\n    const imagePullPolicy =\n      testPlatform === 'kind' || testPlatform === 'kindolm'\n        ? 'Never'\n        : 'Always';\n    const deploymentImageOptions: IImageOptions = {\n      nameAndTag: remoteImageName,\n      pullPolicy: imagePullPolicy,\n    };\n    const clusterName = getClusterName();\n    const deploymentOptions: IDeployOptions = {\n      clusterName: clusterName,\n    };\n\n    await deployers[deploymentType].deploy(\n      deploymentImageOptions,\n      deploymentOptions,\n    );\n    for (let attempt = 0; attempt < 180; attempt++) {\n      try {\n        await exec(\n          `./kubectl get deployment.apps/snyk-monitor -n ${namespace}`,\n        );\n        break;\n      } catch {\n        await sleep(1000);\n      }\n    }\n\n    console.log(\n      `Deployed the snyk-monitor with integration ID: ${integrationId}, in cluster name: ${clusterName}`,\n    );\n    return { integrationId, clusterName };\n  } catch (err) {\n    console.error(err);\n    try {\n      await removeMonitor();\n    } catch (error) {\n      // ignore cleanup errors\n    } finally {\n      // ... but make sure the test suite doesn't proceed if the setup failed\n      process.exit(-1);\n    }\n  }\n}\n\nasync function dumpLogs(): Promise<void> {\n  const logDir = `/tmp/logs/test/integration/${testPlatform}`;\n  if (!fs.existsSync(logDir)) {\n    console.log('not dumping logs because', logDir, 'does not exist');\n    return;\n  }\n\n  const podNames = await kubectl.getPodNames('snyk-monitor').catch(() => []);\n  const snykMonitorPod = podNames.find((name) =>\n    name.startsWith('snyk-monitor'),\n  );\n  if (snykMonitorPod === undefined) {\n    console.log('not dumping logs because snyk-monitor pod does not exist');\n    return;\n  }\n\n  const logs = await kubectl.getPodLogs(snykMonitorPod, 'snyk-monitor');\n  const logPath = `${logDir}/kubernetes-monitor.log`;\n  console.log('dumping logs to', logPath);\n  fs.writeFileSync(logPath, logs);\n}\n", "import nock from 'nock';\n\nimport { config } from '../../../src/common/config';\nimport { scrapeData } from '../../../src/data-scraper';\nimport * as transmitterTypes from '../../../src/transmitter/types';\n\ndescribe('dataScraper()', () => {\n  beforeAll(() => {\n    config.SYSDIG_ENDPOINT = 'https://sysdig';\n    config.SYSDIG_TOKEN = 'token123';\n  });\n\n  afterAll(() => {\n    delete config.SYSDIG_ENDPOINT;\n    delete config.SYSDIG_TOKEN;\n  });\n\n  it('correctly sends data to kubernetes-upstream', async () => {\n    const bodyWithToken = {\n      data: [\n        {\n          imageID: 'something',\n          namespace: 'sysdig',\n          workloadName: 'workload',\n          workloadKind: 'Deployment',\n          container: 'box',\n          packages: [],\n        },\n      ],\n      page: {\n        returned: 10,\n        next: 'xxx',\n      },\n    };\n    const bodyNoToken = {\n      data: [\n        {\n          imageID: 'something',\n          namespace: 'sysdig',\n          workloadName: 'workload',\n          workloadKind: 'Deployment',\n          container: 'box',\n          packages: [],\n        },\n      ],\n      page: {\n        returned: 10,\n        next: '',\n      },\n    };\n    const expectedHeader = 'Bearer token123';\n    nock('https://sysdig', { reqheaders: { authorization: expectedHeader } })\n      .get('/v1/runtimeimages?limit=10&cursor=')\n      .times(1)\n      .reply(200, bodyWithToken);\n\n    nock('https://sysdig', { reqheaders: { authorization: expectedHeader } })\n      .get('/v1/runtimeimages?limit=10&cursor=xxx')\n      .times(1)\n      .reply(200, bodyNoToken);\n\n    nock('https://kubernetes-upstream.snyk.io')\n      .post('/api/v1/runtime-results')\n      .times(1)\n      .reply(200, (uri, requestBody: transmitterTypes.IRuntimeDataPayload) => {\n        expect(requestBody).toEqual<transmitterTypes.IRuntimeDataPayload>({\n          identity: {\n            type: 'sysdig',\n          },\n          target: {\n            userLocator: expect.any(String),\n            cluster: 'Default cluster',\n            agentId: expect.any(String),\n          },\n          facts: [\n            {\n              type: 'loadedPackages',\n              data: bodyWithToken.data,\n            },\n          ],\n        });\n      })\n      .post('/api/v1/runtime-results')\n      .times(1)\n      .reply(200, (uri, requestBody: transmitterTypes.IRuntimeDataPayload) => {\n        expect(requestBody).toEqual<transmitterTypes.IRuntimeDataPayload>({\n          identity: {\n            type: 'sysdig',\n          },\n          target: {\n            userLocator: expect.any(String),\n            cluster: 'Default cluster',\n            agentId: expect.any(String),\n          },\n          facts: [\n            {\n              type: 'loadedPackages',\n              data: bodyNoToken.data,\n            },\n          ],\n        });\n      });\n\n    await scrapeData();\n  });\n});\n"], "fixing_code": ["commands:\n    install_helm:\n        description: Install Helm\n        steps:\n            - run:\n                command: |\n                    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n                    chmod 700 get_helm.sh\n                    ./get_helm.sh\n                name: Install Helm\n    install_python_requests:\n        description: Install requests library\n        steps:\n            - run:\n                command: |\n                    sudo apt update\n                    sudo apt install python3-requests\n                when: always\n    setup_node16:\n        description: Setup Node 16\n        steps:\n            - run:\n                command: |\n                    export NVM_DIR=\"/opt/circleci/.nvm\"\n                    [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n                    nvm install v16\n                    npm ci\n                    echo 'export NVM_DIR=\"/opt/circleci/.nvm\"' >> $BASH_ENV\n                    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> $BASH_ENV\n                    echo 'nvm alias default v16' >> $BASH_ENV\njobs:\n    aks_integration_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - azure-cli/install\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/aks\n                name: Create temp dir for logs\n            - run:\n                command: |\n                    npm ci &&\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:aks:yaml\n                name: Integration tests AKS\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/aks\n        working_directory: ~/kubernetes-monitor\n    build_and_upload_operator:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/python:3.10\n        steps:\n            - checkout\n            - setup_remote_docker\n            - install_python_requests\n            - run:\n                command: |\n                    scripts/operator/download_operator_sdk.py\n                    scripts/operator/download_operator_package_manager.py\n                name: Download Operator SDK and Operator Package Manager\n            - run:\n                command: |\n                    export IMAGE_TAG=$([[ \"$CIRCLE_BRANCH\" == \"staging\" ]] && echo \"staging-candidate\" || echo \"discardable\")\n                    OPERATOR_TAG=\"${IMAGE_TAG}-ubi8-${CIRCLE_SHA1:0:8}\"\n                    MONITOR_TAG=\"${IMAGE_TAG}-ubi8-${CIRCLE_SHA1:0:8}\"\n                    scripts/operator/create_operator_and_push.py \"${OPERATOR_TAG}\" \"${MONITOR_TAG}\" \"${DOCKERHUB_USER}\" \"${DOCKERHUB_PASSWORD}\"\n                    echo \"export OPERATOR_TAG=$OPERATOR_TAG\" >> $BASH_ENV\n                name: Create Operator and push Operator image to DockerHub\n            - snyk/scan:\n                docker-image-name: snyk/kubernetes-operator:${OPERATOR_TAG}\n                monitor-on-build: false\n                severity-threshold: critical\n                target-file: snyk-operator/build/Dockerfile\n            - run:\n                command: |\n                    export IMAGE_TAG=$([[ \"$CIRCLE_BRANCH\" == \"staging\" ]] && echo \"staging-candidate\" || echo \"discardable\")\n                    export SNYK_MONITOR_IMAGE_TAG=\"${IMAGE_TAG}-ubi8-${CIRCLE_SHA1:0:8}\"\n                    export SNYK_OPERATOR_VERSION=\"0.0.1-ubi8-${CIRCLE_SHA1:0:8}\"\n                    export SNYK_OPERATOR_IMAGE_TAG=\"${SNYK_MONITOR_IMAGE_TAG}\"\n                    OPERATOR_PATH=$(scripts/operator/package_operator_bundle.py \"${SNYK_OPERATOR_VERSION}\" \"${SNYK_OPERATOR_IMAGE_TAG}\" \"${SNYK_MONITOR_IMAGE_TAG}\")\n                    echo \"export OPERATOR_PATH=$OPERATOR_PATH\" >> $BASH_ENV\n                name: Package Operator Bundle\n            - run:\n                command: |\n                    export OPERATOR_DIR=$OPERATOR_PATH\n                    export PACKAGE_VERSION=\"0.0.1-ubi8-${CIRCLE_SHA1:0:8}\"\n                    scripts/operator/create_operator_bundle_and_index_and_push.py \"${OPERATOR_DIR}\" \"${PACKAGE_VERSION}\" \"${DOCKERHUB_USER}\" \"${DOCKERHUB_PASSWORD}\"\n                name: Create Operator Bundle and Index and push to Docker Hub\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    build_image:\n        machine:\n            image: ubuntu-2004:202111-02\n        steps:\n            - checkout\n            - install_python_requests\n            - run:\n                command: |\n                    IMAGE_TAG=$([[ \"$CIRCLE_BRANCH\" == \"staging\" ]] && echo \"staging-candidate\" || echo \"discardable\")\n                    IMAGE_NAME_CANDIDATE=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1}\n                    IMAGE_NAME_CANDIDATE_UBI8=snyk/kubernetes-monitor:${IMAGE_TAG}-ubi8-${CIRCLE_SHA1:0:8}\n                    echo \"export IMAGE_NAME_CANDIDATE=$IMAGE_NAME_CANDIDATE\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_CANDIDATE_UBI8=$IMAGE_NAME_CANDIDATE_UBI8\" >> $BASH_ENV\n                name: Export environment variables\n            - run:\n                command: |\n                    docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}\n                    ./scripts/docker/build-image.sh ${IMAGE_NAME_CANDIDATE}\n                    ./scripts/docker/build-image-ubi8.sh ${IMAGE_NAME_CANDIDATE_UBI8}\n                name: Build image\n            - snyk/scan:\n                additional-arguments: --project-name=alpine\n                docker-image-name: ${IMAGE_NAME_CANDIDATE}\n                monitor-on-build: false\n                severity-threshold: high\n                target-file: Dockerfile\n            - snyk/scan:\n                additional-arguments: --project-name=ubi8\n                docker-image-name: ${IMAGE_NAME_CANDIDATE_UBI8}\n                monitor-on-build: false\n                severity-threshold: critical\n                target-file: Dockerfile.ubi8\n            - run:\n                command: |\n                    docker push ${IMAGE_NAME_CANDIDATE}\n                    docker push ${IMAGE_NAME_CANDIDATE_UBI8}\n                name: Push image\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    code_formatter:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: |\n                    npm run format:check\n                name: code formatter check\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    deploy_to_dev:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/node:16.13\n        steps:\n            - checkout\n            - install_python_requests\n            - run:\n                command: ./scripts/circleci-jobs/deploy_to_dev.sh\n                name: Deploy to dev\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    deploy_to_prod:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/node:16.13\n        steps:\n            - checkout\n            - install_python_requests\n            - run:\n                command: ./scripts/circleci-jobs/deploy_to_prod.sh\n                name: Deploy to prod\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    deploy_to_sysdig_integration_cluster:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/base:stable\n        steps:\n            - checkout\n            - run:\n                command: |\n                    LATEST_KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)\n                    curl -LO \"https://dl.k8s.io/release/${LATEST_KUBECTL_VERSION}/bin/linux/amd64/kubectl\"\n                    curl -LO \"https://dl.k8s.io/${LATEST_KUBECTL_VERSION}/bin/linux/amd64/kubectl.sha256\"\n                    echo \"$(<kubectl.sha256) kubectl\" | sha256sum --check\n                    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n                    # Ensure the kubectl command is runnable\n                    kubectl version --client\n                    # Prepare kubeconfig to point to the cluster\n                    mkdir ~/.kube || true\n                    printf \"%s\" \"${SYSDIG_KUBECONFIG}\" | base64 -d > ~/.kube/config\n                name: Install and prepare kubectl\n            - run:\n                command: |\n                    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n                    chmod 700 get_helm.sh\n                    ./get_helm.sh\n                    # Ensure the Helm command is runnable\n                    helm version\n                name: Install Helm\n            - run:\n                command: |\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}-approved\n                    ./scripts/slack/notify_deploy.py $LATEST_TAG sysdig-integration-cluster\n                    helm upgrade --install snyk-monitor ./snyk-monitor --namespace snyk-monitor --set image.tag=${LATEST_TAG} --set clusterName=\"Sysdig cluster\" --set sysdig.enabled=true\n                name: Deploy to shared Sysdig cluster\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    eks_integration_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - install_python_requests\n            - setup_node16\n            - aws-cli/install:\n                override-installed: true\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/eks\n                name: Create temp dir for logs\n            - run:\n                command: |\n                    npm ci &&\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:eks:yaml\n                name: Integration tests EKS\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/eks\n        working_directory: ~/kubernetes-monitor\n    integration_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/kind\n                name: create temp dir for logs\n            - run:\n                command: |\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    npm run test:integration:kind:yaml\n                name: Integration tests\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/kind\n        working_directory: ~/kubernetes-monitor\n    integration_tests_helm:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/kind-helm\n                name: Create temporary directory for logs\n            - run:\n                command: |\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    npm run test:integration:kind:helm\n                name: Integration tests with Helm deployment\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/kind-helm\n        working_directory: ~/kubernetes-monitor\n    integration_tests_operator_on_k8s:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n            resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/kind-olm-operator\n                name: Create temporary directory for logs\n            - run:\n                command: |\n                    export OPERATOR_VERSION=\"0.0.1-ubi8-${CIRCLE_SHA1:0:8}\"\n                    export IMAGE_TAG_UBI_SUFFIX=\"-ubi8\"\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:kindolm:operator\n                name: Operator integration tests on vanilla Kubernetes\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/kind-olm-operator\n        working_directory: ~/kubernetes-monitor\n    integration_tests_proxy:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/proxy\n                name: Create temporary directory for logs\n            - run:\n                command: |\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    npm run test:integration:kind:proxy\n                name: Integration tests with proxy\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/proxy\n        working_directory: ~/kubernetes-monitor\n    lint:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: |\n                    npm run lint\n                name: lint\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    openshift4_integration_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2204:current\n            resource_class: large\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: mkdir -p /tmp/logs/test/integration/openshift4\n                name: create temp dir for logs\n            - run:\n                command: |\n                    export OPERATOR_VERSION=\"0.0.1-ubi8-${CIRCLE_SHA1:0:8}\"\n                    export IMAGE_TAG_UBI_SUFFIX=\"-ubi8\"\n                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)\n                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:openshift4:operator\n                name: Integration tests OpenShift 4\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n            - store_artifacts:\n                path: /tmp/logs/test/integration/openshift4\n        working_directory: ~/kubernetes-monitor\n    operator_upgrade_tests:\n        description: |\n            Deploys a previously released version of the snyk-operator.\n            Subsequently upgrades the Operator with a new version that is intended\n            to be released. If the Operator reaches the running state in both cases,\n            we can assume that it's able to upgrade.\n        executor: redhat-openshift/default\n        steps:\n            - checkout\n            - run:\n                command: |\n                    sudo apt update\n                    sudo apt install -y uuid-runtime make\n                    python -m pip install requests pyyaml\n                    python scripts/operator/download_operator_sdk.py\n                    # The machine executor uses an old debian version, the latest OPM 1.16.1 requires a later version of GLIBC that the current machine cannot have.\n                    # So instead of using the (currently) latest version, we have to use an older one that references an older GLIBC.\n                    OPM_VERSION=v1.13.0 python scripts/operator/download_operator_package_manager.py\n                    curl -L https://github.com/openshift/okd/releases/download/4.7.0-0.okd-2021-03-28-152009/openshift-client-linux-4.7.0-0.okd-2021-03-28-152009.tar.gz | tar xfz - -- oc\n                    sudo mv oc /usr/local/bin/oc\n                    curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n                    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n                name: Install required packages\n            - install_python_requests\n            - setup_remote_docker\n            - run: docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}\n            - run:\n                command: |\n                    oc login --token=\"${OPENSHIFT4_PASSWORD}\" --server=\"${OPENSHIFT4_CLUSTER_URL}\" --kubeconfig=\"$(pwd)/kubeconfig\"\n                    echo \"export KUBECONFIG=$(pwd)/kubeconfig\" >> $BASH_ENV\n                name: Login and update KUBECONFIG\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -xeo pipefail\n\n                    OPERATOR_REPO_URL=\"https://raw.githubusercontent.com/redhat-openshift-ecosystem/community-operators-prod/main/operators/snyk-operator/snyk-operator.package.yaml\"\n\n                    OPERATOR_VERSION=$(python ./scripts/operator/get_last_published_operator_version.py $OPERATOR_REPO_URL)\n\n                    echo \"Currently released embedded version is: ${OPERATOR_VERSION}\"\n                    echo \"export OPERATOR_VERSION=${OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get last released Operator version\n            - run:\n                command: |\n                    source $BASH_ENV\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}\n                    echo \"export LATEST_TAG=${LATEST_TAG}\" >> $BASH_ENV\n                description: |\n                    This tag is used to identify the Operator version we are going to upgrade to.\n                name: Get latest snyk-monitor tag\n            - run:\n                command: |\n                    source $BASH_ENV\n                    if [[ \"${LATEST_TAG}\" == \"${OPERATOR_VERSION}\" ]]; then\n                      echo \"export NOTHING_TO_TEST=true\" >> $BASH_ENV\n                      exit 1\n                    fi\n                name: End tests early if no new Operator is to be released\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -xeo pipefail\n\n                    # Package Operator Bundle to be uploaded to Docker Hub\n                    SNYK_OPERATOR_IMAGE_TAG=${OPERATOR_VERSION}\n                    SNYK_MONITOR_IMAGE_TAG=${OPERATOR_VERSION}-ubi8\n                    OPERATOR_DIR=$(python scripts/operator/package_operator_bundle.py $OPERATOR_VERSION $SNYK_OPERATOR_IMAGE_TAG $SNYK_MONITOR_IMAGE_TAG)\n\n                    python scripts/operator/create_operator_bundle_and_index_and_push.py $OPERATOR_DIR $OPERATOR_VERSION $DOCKERHUB_USER $DOCKERHUB_PASSWORD\n                description: \"Even though the Operator is released to the\\nredhat-openshift-ecosystem/community-operators-prod repo, we can \\nreproduce it locally using our packaged scripts. This also helps us\\ntest the upgrade by pushing all tested Operators to our Quay repo.\\n\"\n                name: Package Operator Bundle and push to Docker Hub\n            - run:\n                command: |\n                    set +e\n                    kubectl patch customresourcedefinition snykmonitors.charts.helm.k8s.io -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n                    kubectl patch snykmonitors.charts.helm.k8s.io snyk-monitor -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n                    kubectl delete customresourcedefinition snykmonitors.charts.helm.k8s.io\n                    kubectl delete catalogsource snyk-operator -n openshift-marketplace\n                    kubectl delete clusterrolebinding snyk-monitor\n                    kubectl delete clusterrole snyk-monitor\n                    kubectl delete --all all,sa,cm,secret,pvc -n services\n                    kubectl delete --all all,sa,cm,secret,pvc -n snyk-monitor\n                    kubectl delete namespace services\n                    kubectl delete namespace snyk-monitor\n                    # Force a success status code, otherwise Bash will implicitly return the last command's code, which can be 1.\n                    true\n                name: Remove existing cluster resources if present\n            - run:\n                command: |\n                    set -xo pipefail\n                    set +e\n\n                    ns=$(kubectl get ns snyk-monitor --no-headers --output=go-template={{.metadata.name}} 2>/dev/null)\n\n                    if [[ -z \"${ns}\" ]]; then\n                      echo \"snyk-monitor namespace not found, creating...\"\n                      kubectl create ns snyk-monitor\n                    fi\n\n                    set -e\n                    INTEGRATION_ID=$(uuidgen)\n                    SERVICE_ACCOUNT_API_TOKEN=$(uuidgen)\n                    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=integrationId=${INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SERVICE_ACCOUNT_API_TOKEN} --from-literal=dockercfg.json={}\n                name: Configure snyk-monitor namespace\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -xe\n\n                    sed -i.bak \"s|TAG_OVERRIDE|${OPERATOR_VERSION}|g\" ./test/fixtures/operator/catalog-source.yaml\n                    kubectl apply -f ./test/fixtures/operator/catalog-source.yaml\n\n                    kubectl apply -f ./test/fixtures/operator/installation.yaml\n                    sleep 120\n                    kubectl get pods -n snyk-monitor --no-headers | \\\n                      grep \"snyk-operator\" | \\\n                      awk 'END { if (NR==0) exit 1; else print $1 }' | \\\n                      xargs -I{} kubectl wait pod/{} -n snyk-monitor --timeout 60s --for condition=Ready\n                name: Install Operator\n            - run:\n                command: |\n                    set -o pipefail\n\n                    kubectl apply -f ./test/fixtures/operator/custom-resource.yaml\n                    sleep 120\n\n                    kubectl get pods -n snyk-monitor --no-headers | \\\n                      grep \"snyk-monitor\" | \\\n                      awk 'END { if (NR==0) exit 1; else print $1 }' | \\\n                      xargs -I{} kubectl wait pod/{} -n snyk-monitor --timeout 60s --for condition=Ready\n                name: Deploy snyk-monitor resource\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -eo pipefail\n\n                    REPLACES_VERSION=${OPERATOR_VERSION}\n                    SNYK_MONITOR_TAG=${LATEST_TAG}-ubi8\n                    OPERATOR_DIR=$(python scripts/operator/package_operator_bundle.py \"${LATEST_TAG}\" \"${LATEST_TAG}\" \"${SNYK_MONITOR_TAG}\" \"${REPLACES_VERSION}\")\n                    python scripts/operator/create_operator_bundle_and_index_and_push.py $OPERATOR_DIR $LATEST_TAG $DOCKERHUB_USER $DOCKERHUB_PASSWORD $REPLACES_VERSION\n                description: Now we are testing that any upgrades to the Operator are detected and applied in the cluster.\n                name: Package Operator Bundle upgrade and push to Docker Hub\n            - run:\n                command: |\n                    source $BASH_ENV\n                    set -xeo pipefail\n\n                    # Replace the catalog source with the latest bundled version of snyk-monitor, this is what initiates the upgrade\n                    sed -i.bak \"s|${OPERATOR_VERSION}|${LATEST_TAG}|g\" ./test/fixtures/operator/catalog-source.yaml\n                    kubectl apply -f ./test/fixtures/operator/catalog-source.yaml\n\n                    ATTEMPTS=120\n                    SLEEP_SECONDS_BETWEEN_ATTEMPTS=5\n                    # total = 10 minutes wait time\n\n                    # Periodically poll if the snyk-monitor has upgraded\n                    for (( attempt=1; attempt<ATTEMPTS; attempt++))\n                    do\n                      # Grab the tag of the snyk-monitor container image\n\n                      VERSION=$(kubectl get pods -n snyk-monitor --no-headers | \\\n                        grep \"snyk-monitor\" | \\\n                        awk 'END { if (NR==0) print \"\"; else print $1 }' | \\\n                        xargs '-I{}' kubectl get pod '{}' -n snyk-monitor -o 'jsonpath={..containers[*].image}' | \\\n                        awk '{print $1}' | \\\n                        grep -oE \"[0-9]{1}\\.[0-9]{1,2}\\.[0-9]{1,3}-ubi8$\" \\\n                        || echo \"0.0.0\")\n\n                      # Break out of the polling if the tag matches the one we want to upgrade to.\n                      if [[ \"${VERSION}\" == \"${LATEST_TAG}-ubi8\" ]]; then\n                        break\n                      fi\n\n                      # Otherwise keep polling\n                      sleep $SLEEP_SECONDS_BETWEEN_ATTEMPTS\n                    done\n\n                    SNYK_MONITOR_POD=$(kubectl get pods -n snyk-monitor --no-headers | \\\n                      grep \"snyk-monitor\" | \\\n                      awk 'END { if (NR==0) exit 101; else print $1 }')\n\n                    # If we polled for 5 minutes and the snyk-monitor still hasn't upgraded, fail the current job.\n                    if [[ \"${VERSION}\" != \"${LATEST_TAG}-ubi8\" ]]; then\n                      &>2 echo \"versions (${VERSION}) does not match expected (${LATEST_TAG})!\"\n\n                      kubectl describe pod ${SNYK_MONITOR_POD} -n snyk-monitor\n                      kubectl describe catalogsource snyk-operator -n openshift-marketplace\n                      kubectl get snykmonitors.charts.helm.k8s.io -n snyk-monitor -o yaml\n\n                      exit 102\n                    fi\n\n                    # We need to wait for the Pod to become Ready\n                    kubectl wait pod/${SNYK_MONITOR_POD} -n snyk-monitor --timeout 120s --for condition=Ready\n\n                    echo \"Update complete!\"\n                name: Upgrade Operator and check that snyk-monitor also upgraded\n            - run:\n                command: |\n                    source $BASH_ENV\n                    ./scripts/slack/notify_success_openshift_upgrade.py \"${OPERATOR_VERSION}\" \"${LATEST_TAG}\"\n                name: Notify Slack on successful upgrade\n            - run:\n                command: |\n                    set +e\n\n                    kubectl delete -f ./test/fixtures/operator/catalog-source.yaml\n                    kubectl delete -f ./test/fixtures/operator/installation.yaml\n\n                    kubectl patch customresourcedefinition snykmonitors.charts.helm.k8s.io -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n                    kubectl patch snykmonitors.charts.helm.k8s.io snyk-monitor -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n                    kubectl delete -f ./test/fixtures/operator/custom-resource.yaml\n                    kubectl delete clusterrolebinding snyk-monitor\n                    kubectl delete clusterrole snyk-monitor\n                    kubectl delete --all all,sa,cm,secret,pvc -n services\n                    kubectl delete --all all,sa,cm,secret,pvc -n snyk-monitor\n                    kubectl delete namespace snyk-monitor\n                    kubectl delete namespace services\n                    # Force a success status code, otherwise Bash will implicitly return the last command's code, which can be 1.\n                    true\n                name: Cleanup\n                when: always\n            - run:\n                command: |\n                    if [[ \"${NOTHING_TO_TEST}\" != \"true\" ]]; then\n                      ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                    fi\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    publish:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/node:16.13\n        steps:\n            - checkout\n            - setup_remote_docker\n            - install_python_requests\n            - install_helm\n            - run:\n                command: |\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}\n                    IMAGE_NAME_APPROVED=snyk/kubernetes-monitor:${LATEST_TAG}-approved\n                    IMAGE_NAME_PUBLISHED=snyk/kubernetes-monitor:${LATEST_TAG}\n                    IMAGE_NAME_APPROVED_UBI8=snyk/kubernetes-monitor:${LATEST_TAG}-ubi8-approved\n                    IMAGE_NAME_PUBLISHED_UBI8=snyk/kubernetes-monitor:${LATEST_TAG}-ubi8\n                    echo \"export LATEST_TAG=${LATEST_TAG}\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_APPROVED=${IMAGE_NAME_APPROVED}\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_PUBLISHED=${IMAGE_NAME_PUBLISHED}\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_APPROVED_UBI8=${IMAGE_NAME_APPROVED_UBI8}\" >> $BASH_ENV\n                    echo \"export IMAGE_NAME_PUBLISHED_UBI8=${IMAGE_NAME_PUBLISHED_UBI8}\" >> $BASH_ENV\n                name: Export environment variables\n            - snyk/scan:\n                monitor-on-build: true\n                severity-threshold: high\n            - snyk/scan:\n                additional-arguments: --project-name=alpine\n                docker-image-name: ${IMAGE_NAME_APPROVED}\n                monitor-on-build: true\n                severity-threshold: high\n                target-file: Dockerfile\n            - snyk/scan:\n                additional-arguments: --project-name=ubi8\n                docker-image-name: ${IMAGE_NAME_APPROVED_UBI8}\n                monitor-on-build: true\n                severity-threshold: critical\n                target-file: Dockerfile.ubi8\n            - run:\n                command: |\n                    docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&\n                    docker pull ${IMAGE_NAME_APPROVED} &&\n                    docker tag ${IMAGE_NAME_APPROVED} ${IMAGE_NAME_PUBLISHED} &&\n                    docker push ${IMAGE_NAME_PUBLISHED} &&\n                    docker pull ${IMAGE_NAME_APPROVED_UBI8} &&\n                    docker tag ${IMAGE_NAME_APPROVED_UBI8} ${IMAGE_NAME_PUBLISHED_UBI8} &&\n                    docker push ${IMAGE_NAME_PUBLISHED_UBI8} &&\n                    ./scripts/slack/notify_push.py ${IMAGE_NAME_PUBLISHED} &&\n                    ./scripts/slack/notify_push.py ${IMAGE_NAME_PUBLISHED_UBI8} &&\n                    ./scripts/publish-gh-pages.sh ${LATEST_TAG}\n                name: Publish\n            - run:\n                command: |\n                    RELEASE_VERSION=v0.15.1\n                    DOWNLOAD_LOCATION=./operator-sdk\n                    CURL_FOLLOW_REDIRECTS=\"-L\"\n                    curl ${CURL_FOLLOW_REDIRECTS} https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu -o ${DOWNLOAD_LOCATION}\n                    chmod +x ${DOWNLOAD_LOCATION}\n                name: Download operator-sdk\n            - run:\n                command: |\n                    export OPERATOR_TAG=\"${LATEST_TAG}\"\n                    export MONITOR_TAG=\"${LATEST_TAG}-ubi8\"\n                    python3 scripts/operator/create_operator_and_push.py \"${OPERATOR_TAG}\" \"${MONITOR_TAG}\" \"${DOCKERHUB_USER}\" \"${DOCKERHUB_PASSWORD}\"\n                    echo \"export OPERATOR_TAG=${OPERATOR_TAG}\" >> $BASH_ENV\n                name: Create Operator and push Operator image to DockerHub\n            - snyk/scan:\n                docker-image-name: snyk/kubernetes-operator:${OPERATOR_TAG}\n                monitor-on-build: true\n                severity-threshold: critical\n                target-file: snyk-operator/build/Dockerfile\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    push_operator_to_community_operators:\n        description: |\n            Packages a new Operator and pushes it to Snyk's fork of\n            the OpenShift k8s-operatorhub/community-operators.\n        executor: redhat-openshift/default\n        steps:\n            - checkout\n            - add_ssh_keys:\n                fingerprints:\n                    - 5a:63:89:5d:a1:71:fb:a4:ed:c5:ec:4c:1e:0b:c7:3a\n            - run:\n                command: |\n                    python -m pip install requests pyyaml PyGithub\n                name: Install required packages\n            - install_python_requests\n            - run:\n                command: |\n                    set -xeo pipefail\n                    OPERATOR_REPO_URL=\"https://raw.githubusercontent.com/k8s-operatorhub/community-operators/main/operators/snyk-operator/snyk-operator.package.yaml\"\n\n                    LAST_OPERATOR_VERSION=$(python ./scripts/operator/get_last_published_operator_version.py $OPERATOR_REPO_URL)\n                    echo \"export LAST_OPERATOR_VERSION=${LAST_OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get last released Operator version\n            - run:\n                command: |\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}\n                    NEW_OPERATOR_VERSION=${LATEST_TAG}\n                    echo \"export NEW_OPERATOR_VERSION=${NEW_OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get new Operator version\n            - run:\n                command: |\n                    if [[ \"${NEW_OPERATOR_VERSION}\" == \"${LAST_OPERATOR_VERSION}\" ]]; then\n                      echo \"export NOTHING_TO_TEST=true\" >> $BASH_ENV\n                      exit 1\n                    fi\n                name: End tests early if no new Operator is to be released\n            - run:\n                command: |\n                    SNYK_MONITOR_TAG=\"${NEW_OPERATOR_VERSION}-ubi8\"\n                    OPERATOR_PATH=$(python scripts/operator/package_operator_bundle.py \"${NEW_OPERATOR_VERSION}\" \"${NEW_OPERATOR_VERSION}\" \"${SNYK_MONITOR_TAG}\" \"${LAST_OPERATOR_VERSION}\")\n                    echo \"export OPERATOR_PATH=${OPERATOR_PATH}\" >> $BASH_ENV\n                name: Package Operator Bundle\n            - run:\n                command: |\n                    CURRENT_DIRECTORY=$(pwd)\n                    COMMUNITY_FOLDER_LOCATION=\"community-operators\"\n                    ./scripts/operator/push-operator-to-snyk-upstream.sh \"${CURRENT_DIRECTORY}\" \"${COMMUNITY_FOLDER_LOCATION}\"\n                    echo \"export COMMUNITY_FOLDER_LOCATION=${COMMUNITY_FOLDER_LOCATION}\" >> $BASH_ENV\n                name: Push new Operator to the fork of the k8s-operatorhub/community-operators repository\n            - run:\n                command: |\n                    SLACK_PR_URL=$(python ./scripts/operator/raise_pr_to_community_operators_from_our_fork.py \"${COMMUNITY_FOLDER_LOCATION}\" \"${NEW_OPERATOR_VERSION}\")\n                    echo \"export SLACK_PR_URL=${SLACK_PR_URL}\" >> $BASH_ENV\n                name: Open a Pull Request to the k8s-operatorhub/community-operators repository\n            - run:\n                command: |\n                    ./scripts/slack/notify_success_operator_push.py \"${NEW_OPERATOR_VERSION}\" \"community/operators/${COMMUNITY_FOLDER_LOCATION}\" \"${SLACK_PR_URL}\"\n                name: Notify Slack on new branch in snyk/community-operators\n            - run:\n                command: |\n                    if [[ \"${NOTHING_TO_TEST}\" != \"true\" ]]; then\n                      ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                    fi\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    push_operator_to_embedded_community_operators:\n        description: |\n            Packages a new Operator and pushes it to Snyk's fork of\n            the redhat-openshift-ecosystem/community-operators-prod.\n        executor: redhat-openshift/default\n        steps:\n            - checkout\n            - add_ssh_keys:\n                fingerprints:\n                    - 5a:63:89:5d:a1:71:fb:a4:ed:c5:ec:4c:1e:0b:c7:3a\n            - run:\n                command: |\n                    python -m pip install requests pyyaml PyGithub\n                name: Install required packages\n            - install_python_requests\n            - run:\n                command: |\n                    set -xeo pipefail\n                    OPERATOR_REPO_URL=\"https://raw.githubusercontent.com/redhat-openshift-ecosystem/community-operators-prod/main/operators/snyk-operator/snyk-operator.package.yaml\"\n\n                    LAST_OPERATOR_VERSION=$(python ./scripts/operator/get_last_published_operator_version.py $OPERATOR_REPO_URL)\n                    echo \"export LAST_OPERATOR_VERSION=${LAST_OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get last released Operator version\n            - run:\n                command: |\n                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n                    LATEST_TAG=${LATEST_TAG_WITH_V:1}\n                    NEW_OPERATOR_VERSION=${LATEST_TAG}\n                    echo \"export NEW_OPERATOR_VERSION=${NEW_OPERATOR_VERSION}\" >> $BASH_ENV\n                name: Get new Operator version\n            - run:\n                command: |\n                    if [[ \"${NEW_OPERATOR_VERSION}\" == \"${LAST_OPERATOR_VERSION}\" ]]; then\n                      echo \"export NOTHING_TO_TEST=true\" >> $BASH_ENV\n                      exit 1\n                    fi\n                name: End tests early if no new Operator is to be released\n            - run:\n                command: |\n                    SNYK_MONITOR_TAG=\"${NEW_OPERATOR_VERSION}-ubi8\"\n                    OPERATOR_PATH=$(python scripts/operator/package_operator_bundle.py \"${NEW_OPERATOR_VERSION}\" \"${NEW_OPERATOR_VERSION}\" \"${SNYK_MONITOR_TAG}\" \"${LAST_OPERATOR_VERSION}\")\n                    echo \"export OPERATOR_PATH=${OPERATOR_PATH}\" >> $BASH_ENV\n                name: Package Operator Bundle\n            - run:\n                command: |\n                    CURRENT_DIRECTORY=$(pwd)\n                    COMMUNITY_FOLDER_LOCATION=\"community-operators-prod\"\n                    ./scripts/operator/push-operator-to-snyk-upstream.sh \"${CURRENT_DIRECTORY}\" \"${COMMUNITY_FOLDER_LOCATION}\"\n                    echo \"export COMMUNITY_FOLDER_LOCATION=${COMMUNITY_FOLDER_LOCATION}\" >> $BASH_ENV\n                name: Push new Operator to the fork of the redhat-openshift-ecosystem/community-operators-prod repository\n            - run:\n                command: |\n                    SLACK_PR_URL=$(python ./scripts/operator/raise_pr_to_embedded_community_operators_from_our_fork.py \"${COMMUNITY_FOLDER_LOCATION}\" \"${NEW_OPERATOR_VERSION}\")\n                    echo \"export SLACK_PR_URL=${SLACK_PR_URL}\" >> $BASH_ENV\n                name: Open a Pull Request to the redhat-openshift-ecosystem/community-operators-prod repository\n            - run:\n                command: |\n                    ./scripts/slack/notify_success_operator_push.py \"${NEW_OPERATOR_VERSION}\" \"${COMMUNITY_FOLDER_LOCATION}\" \"${SLACK_PR_URL}\"\n                name: Notify Slack on new branch in snyk/community-operators-prod\n            - run:\n                command: |\n                    if [[ \"${NOTHING_TO_TEST}\" != \"true\" ]]; then\n                      ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                    fi\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    sync_community_operators_with_snyk_fork:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/python:3.10\n        steps:\n            - checkout\n            - install_python_requests\n            - add_ssh_keys:\n                fingerprints:\n                    - 5a:63:89:5d:a1:71:fb:a4:ed:c5:ec:4c:1e:0b:c7:3a\n            - run:\n                command: |\n                    CURRENT_DIRECTORY=$(pwd)\n                    COMMUNITY_FOLDER_LOCATION=\"${CURRENT_DIRECTORY}/community-operators\"\n\n                    # Clone Community Operators repo from Snyk\n                    git clone https://github.com/snyk/community-operators.git \"${COMMUNITY_FOLDER_LOCATION}\"\n                    cd \"${COMMUNITY_FOLDER_LOCATION}\"\n\n                    # Sync snyk/community-operators repo from k8s-operatorhub/community-operators repo\n                    git remote add upstream https://github.com/k8s-operatorhub/community-operators.git\n                    git fetch upstream\n                    git merge upstream/main\n                    git push origin main\n                name: Sync k8s-operatorhub/community-operators with snyk/community-operators\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    sync_embedded_community_operators_with_snyk_fork:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/python:3.10\n        steps:\n            - checkout\n            - install_python_requests\n            - add_ssh_keys:\n                fingerprints:\n                    - 5a:63:89:5d:a1:71:fb:a4:ed:c5:ec:4c:1e:0b:c7:3a\n            - run:\n                command: |\n                    CURRENT_DIRECTORY=$(pwd)\n                    COMMUNITY_FOLDER_LOCATION=\"${CURRENT_DIRECTORY}/community-operators-prod\"\n\n                    # Clone Community Operators repo from Snyk\n                    git clone https://github.com/snyk/community-operators-prod.git \"${COMMUNITY_FOLDER_LOCATION}\"\n                    cd \"${COMMUNITY_FOLDER_LOCATION}\"\n\n                    # Sync snyk/community-operators repo from redhat-openshift-ecosystem/community-operators-prod repo\n                    git remote add upstream https://github.com/redhat-openshift-ecosystem/community-operators-prod.git\n                    git fetch upstream\n                    git merge upstream/main\n                    git push origin main\n                name: Sync redhat-openshift-ecosystem/community-operators-prod with snyk/community-operators-prod\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    system_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2204:2022.04.1\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - run:\n                command: |\n                    export DEBIAN_FRONTEND=noninteractive\n                    sudo apt-get update -qq\n                    sudo apt-get install skopeo\n                name: Install Skopeo\n            - run:\n                command: |\n                    npm run build &&\n                    npm run test:system\n                name: System tests\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    tag_and_push:\n        docker:\n            - auth:\n                password: $DOCKERHUB_PASSWORD\n                username: $DOCKERHUB_USER\n              image: cimg/node:16.13\n        steps:\n            - checkout\n            - setup_remote_docker\n            - install_python_requests\n            - run:\n                command: |\n                    npm ci &&\n                    docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&\n                    unset CIRCLE_PULL_REQUEST &&\n                    unset CI_PULL_REQUEST &&\n                    unset CI_PULL_REQUESTS &&\n                    unset CIRCLE_PULL_REQUESTS &&\n                    npx semantic-release@17.2.2 &&\n                    NEW_VERSION=`cat ./package.json | jq -r '.version'` &&\n                    ./scripts/docker/approve-image.sh $NEW_VERSION\n                name: Tag and push\n            - run:\n                command: ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\n    unit_tests:\n        machine:\n            docker_layer_caching: true\n            image: ubuntu-2004:202111-01\n        steps:\n            - checkout\n            - setup_node16\n            - install_python_requests\n            - snyk/scan:\n                monitor-on-build: false\n                severity-threshold: high\n            - run:\n                command: |\n                    npm run build &&\n                    npm run test:unit\n                name: Unit tests\n            - run:\n                command: |\n                    ./scripts/slack/notify_failure_on_branch.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n                name: Notify Slack on failure\n                when: on_fail\n        working_directory: ~/kubernetes-monitor\nmain_branches_filter:\n    filters:\n        branches:\n            ignore:\n                - staging\n                - master\nmaster_branch_only_filter:\n    filters:\n        branches:\n            only:\n                - master\norbs:\n    aws-cli: circleci/aws-cli@2.0.6\n    azure-cli: circleci/azure-cli@1.2.0\n    redhat-openshift: circleci/redhat-openshift@0.2.0\n    snyk: snyk/snyk@1.1.2\nstaging_branch_only_filter:\n    filters:\n        branches:\n            only:\n                - staging\nversion: 2.1\nworkflows:\n    MERGE_TO_MASTER:\n        jobs:\n            - publish:\n                context: nodejs-app-release-public\n                filters:\n                    branches:\n                        only:\n                            - master\n            - deploy_to_prod:\n                filters:\n                    branches:\n                        only:\n                            - master\n                requires:\n                    - publish\n    MERGE_TO_STAGING:\n        jobs:\n            - build_image:\n                filters:\n                    branches:\n                        only:\n                            - staging\n            - build_and_upload_operator:\n                filters:\n                    branches:\n                        only:\n                            - staging\n            - unit_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n            - system_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n            - integration_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - integration_tests_helm:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - integration_tests_proxy:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - eks_integration_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - aks_integration_tests:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n            - integration_tests_operator_on_k8s:\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n                    - build_and_upload_operator\n            - tag_and_push:\n                context: nodejs-app-release-public\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - build_image\n                    - build_and_upload_operator\n                    - unit_tests\n                    - system_tests\n                    - integration_tests\n                    - integration_tests_helm\n                    - integration_tests_proxy\n            - deploy_to_dev:\n                context: nodejs-app-release-public\n                filters:\n                    branches:\n                        only:\n                            - staging\n                requires:\n                    - tag_and_push\n    PR_TO_STAGING:\n        jobs:\n            - build_image:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - build_and_upload_operator:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - unit_tests:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - lint:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - code_formatter:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - system_tests:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n            - integration_tests:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n                requires:\n                    - build_image\n            - integration_tests_helm:\n                filters:\n                    branches:\n                        ignore:\n                            - staging\n                            - master\n                requires:\n                    - build_image\n\n", "description: |\n  Deploys a previously released version of the snyk-operator.\n  Subsequently upgrades the Operator with a new version that is intended\n  to be released. If the Operator reaches the running state in both cases,\n  we can assume that it's able to upgrade.\n\nexecutor: redhat-openshift/default\n\nworking_directory: ~/kubernetes-monitor\n\nsteps:\n  - checkout\n\n  - run:\n      name: Install required packages\n      command: |\n        sudo apt update\n        sudo apt install -y uuid-runtime make\n        python -m pip install requests pyyaml\n        python scripts/operator/download_operator_sdk.py\n        # The machine executor uses an old debian version, the latest OPM 1.16.1 requires a later version of GLIBC that the current machine cannot have.\n        # So instead of using the (currently) latest version, we have to use an older one that references an older GLIBC.\n        OPM_VERSION=v1.13.0 python scripts/operator/download_operator_package_manager.py\n        curl -L https://github.com/openshift/okd/releases/download/4.7.0-0.okd-2021-03-28-152009/openshift-client-linux-4.7.0-0.okd-2021-03-28-152009.tar.gz | tar xfz - -- oc\n        sudo mv oc /usr/local/bin/oc\n        curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n\n  - install_python_requests\n\n  - setup_remote_docker\n\n  - run: docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}\n\n  - run:\n      name: Login and update KUBECONFIG\n      command: |\n        oc login --token=\"${OPENSHIFT4_PASSWORD}\" --server=\"${OPENSHIFT4_CLUSTER_URL}\" --kubeconfig=\"$(pwd)/kubeconfig\"\n        echo \"export KUBECONFIG=$(pwd)/kubeconfig\" >> $BASH_ENV\n\n  - run:\n      name: Get last released Operator version\n      command: |\n        source $BASH_ENV\n        set -xeo pipefail\n\n        OPERATOR_REPO_URL=\"https://raw.githubusercontent.com/redhat-openshift-ecosystem/community-operators-prod/main/operators/snyk-operator/snyk-operator.package.yaml\"\n\n        OPERATOR_VERSION=$(python ./scripts/operator/get_last_published_operator_version.py $OPERATOR_REPO_URL)\n\n        echo \"Currently released embedded version is: ${OPERATOR_VERSION}\"\n        echo \"export OPERATOR_VERSION=${OPERATOR_VERSION}\" >> $BASH_ENV\n\n  - run:\n      name: Get latest snyk-monitor tag\n      description: |\n        This tag is used to identify the Operator version we are going to upgrade to.\n      command: |\n        source $BASH_ENV\n        LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\n        LATEST_TAG=${LATEST_TAG_WITH_V:1}\n        echo \"export LATEST_TAG=${LATEST_TAG}\" >> $BASH_ENV\n\n  - run:\n      name: End tests early if no new Operator is to be released\n      command: |\n        source $BASH_ENV\n        if [[ \"${LATEST_TAG}\" == \"${OPERATOR_VERSION}\" ]]; then\n          echo \"export NOTHING_TO_TEST=true\" >> $BASH_ENV\n          exit 1\n        fi\n\n  - run:\n      name: Package Operator Bundle and push to Docker Hub\n      description: |\n        Even though the Operator is released to the\n        redhat-openshift-ecosystem/community-operators-prod repo, we can \n        reproduce it locally using our packaged scripts. This also helps us\n        test the upgrade by pushing all tested Operators to our Quay repo.\n      command: |\n        source $BASH_ENV\n        set -xeo pipefail\n\n        # Package Operator Bundle to be uploaded to Docker Hub\n        SNYK_OPERATOR_IMAGE_TAG=${OPERATOR_VERSION}\n        SNYK_MONITOR_IMAGE_TAG=${OPERATOR_VERSION}-ubi8\n        OPERATOR_DIR=$(python scripts/operator/package_operator_bundle.py $OPERATOR_VERSION $SNYK_OPERATOR_IMAGE_TAG $SNYK_MONITOR_IMAGE_TAG)\n\n        python scripts/operator/create_operator_bundle_and_index_and_push.py $OPERATOR_DIR $OPERATOR_VERSION $DOCKERHUB_USER $DOCKERHUB_PASSWORD\n\n  - run:\n      name: Remove existing cluster resources if present\n      command: |\n        set +e\n        kubectl patch customresourcedefinition snykmonitors.charts.helm.k8s.io -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n        kubectl patch snykmonitors.charts.helm.k8s.io snyk-monitor -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n        kubectl delete customresourcedefinition snykmonitors.charts.helm.k8s.io\n        kubectl delete catalogsource snyk-operator -n openshift-marketplace\n        kubectl delete clusterrolebinding snyk-monitor\n        kubectl delete clusterrole snyk-monitor\n        kubectl delete --all all,sa,cm,secret,pvc -n services\n        kubectl delete --all all,sa,cm,secret,pvc -n snyk-monitor\n        kubectl delete namespace services\n        kubectl delete namespace snyk-monitor\n        # Force a success status code, otherwise Bash will implicitly return the last command's code, which can be 1.\n        true\n\n  - run:\n      name: Configure snyk-monitor namespace\n      command: |\n        set -xo pipefail\n        set +e\n\n        ns=$(kubectl get ns snyk-monitor --no-headers --output=go-template={{.metadata.name}} 2>/dev/null)\n\n        if [[ -z \"${ns}\" ]]; then\n          echo \"snyk-monitor namespace not found, creating...\"\n          kubectl create ns snyk-monitor\n        fi\n\n        set -e\n        INTEGRATION_ID=$(uuidgen)\n        SERVICE_ACCOUNT_API_TOKEN=$(uuidgen)\n        kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=integrationId=${INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SERVICE_ACCOUNT_API_TOKEN} --from-literal=dockercfg.json={}\n\n  - run:\n      name: Install Operator\n      command: |\n        source $BASH_ENV\n        set -xe\n\n        sed -i.bak \"s|TAG_OVERRIDE|${OPERATOR_VERSION}|g\" ./test/fixtures/operator/catalog-source.yaml\n        kubectl apply -f ./test/fixtures/operator/catalog-source.yaml\n\n        kubectl apply -f ./test/fixtures/operator/installation.yaml\n        sleep 120\n        kubectl get pods -n snyk-monitor --no-headers | \\\n          grep \"snyk-operator\" | \\\n          awk 'END { if (NR==0) exit 1; else print $1 }' | \\\n          xargs -I{} kubectl wait pod/{} -n snyk-monitor --timeout 60s --for condition=Ready\n\n  - run:\n      name: Deploy snyk-monitor resource\n      command: |\n        set -o pipefail\n\n        kubectl apply -f ./test/fixtures/operator/custom-resource.yaml\n        sleep 120\n\n        kubectl get pods -n snyk-monitor --no-headers | \\\n          grep \"snyk-monitor\" | \\\n          awk 'END { if (NR==0) exit 1; else print $1 }' | \\\n          xargs -I{} kubectl wait pod/{} -n snyk-monitor --timeout 60s --for condition=Ready\n\n  - run:\n      name: Package Operator Bundle upgrade and push to Docker Hub\n      description: Now we are testing that any upgrades to the Operator are detected and applied in the cluster.\n      command: |\n        source $BASH_ENV\n        set -eo pipefail\n\n        REPLACES_VERSION=${OPERATOR_VERSION}\n        SNYK_MONITOR_TAG=${LATEST_TAG}-ubi8\n        OPERATOR_DIR=$(python scripts/operator/package_operator_bundle.py \"${LATEST_TAG}\" \"${LATEST_TAG}\" \"${SNYK_MONITOR_TAG}\" \"${REPLACES_VERSION}\")\n        python scripts/operator/create_operator_bundle_and_index_and_push.py $OPERATOR_DIR $LATEST_TAG $DOCKERHUB_USER $DOCKERHUB_PASSWORD $REPLACES_VERSION\n\n  - run:\n      name: Upgrade Operator and check that snyk-monitor also upgraded\n      command: |\n        source $BASH_ENV\n        set -xeo pipefail\n\n        # Replace the catalog source with the latest bundled version of snyk-monitor, this is what initiates the upgrade\n        sed -i.bak \"s|${OPERATOR_VERSION}|${LATEST_TAG}|g\" ./test/fixtures/operator/catalog-source.yaml\n        kubectl apply -f ./test/fixtures/operator/catalog-source.yaml\n\n        ATTEMPTS=120\n        SLEEP_SECONDS_BETWEEN_ATTEMPTS=5\n        # total = 10 minutes wait time\n\n        # Periodically poll if the snyk-monitor has upgraded\n        for (( attempt=1; attempt<ATTEMPTS; attempt++))\n        do\n          # Grab the tag of the snyk-monitor container image\n\n          VERSION=$(kubectl get pods -n snyk-monitor --no-headers | \\\n            grep \"snyk-monitor\" | \\\n            awk 'END { if (NR==0) print \"\"; else print $1 }' | \\\n            xargs '-I{}' kubectl get pod '{}' -n snyk-monitor -o 'jsonpath={..containers[*].image}' | \\\n            awk '{print $1}' | \\\n            grep -oE \"[0-9]{1}\\.[0-9]{1,2}\\.[0-9]{1,3}-ubi8$\" \\\n            || echo \"0.0.0\")\n\n          # Break out of the polling if the tag matches the one we want to upgrade to.\n          if [[ \"${VERSION}\" == \"${LATEST_TAG}-ubi8\" ]]; then\n            break\n          fi\n\n          # Otherwise keep polling\n          sleep $SLEEP_SECONDS_BETWEEN_ATTEMPTS\n        done\n\n        SNYK_MONITOR_POD=$(kubectl get pods -n snyk-monitor --no-headers | \\\n          grep \"snyk-monitor\" | \\\n          awk 'END { if (NR==0) exit 101; else print $1 }')\n\n        # If we polled for 5 minutes and the snyk-monitor still hasn't upgraded, fail the current job.\n        if [[ \"${VERSION}\" != \"${LATEST_TAG}-ubi8\" ]]; then\n          &>2 echo \"versions (${VERSION}) does not match expected (${LATEST_TAG})!\"\n\n          kubectl describe pod ${SNYK_MONITOR_POD} -n snyk-monitor\n          kubectl describe catalogsource snyk-operator -n openshift-marketplace\n          kubectl get snykmonitors.charts.helm.k8s.io -n snyk-monitor -o yaml\n\n          exit 102\n        fi\n\n        # We need to wait for the Pod to become Ready\n        kubectl wait pod/${SNYK_MONITOR_POD} -n snyk-monitor --timeout 120s --for condition=Ready\n\n        echo \"Update complete!\"\n\n  - run:\n      name: Notify Slack on successful upgrade\n      command: |\n        source $BASH_ENV\n        ./scripts/slack/notify_success_openshift_upgrade.py \"${OPERATOR_VERSION}\" \"${LATEST_TAG}\"\n\n  - run:\n      name: Cleanup\n      when: always\n      command: |\n        set +e\n\n        kubectl delete -f ./test/fixtures/operator/catalog-source.yaml\n        kubectl delete -f ./test/fixtures/operator/installation.yaml\n\n        kubectl patch customresourcedefinition snykmonitors.charts.helm.k8s.io -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n        kubectl patch snykmonitors.charts.helm.k8s.io snyk-monitor -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge -n snyk-monitor\n        kubectl delete -f ./test/fixtures/operator/custom-resource.yaml\n        kubectl delete clusterrolebinding snyk-monitor\n        kubectl delete clusterrole snyk-monitor\n        kubectl delete --all all,sa,cm,secret,pvc -n services\n        kubectl delete --all all,sa,cm,secret,pvc -n snyk-monitor\n        kubectl delete namespace snyk-monitor\n        kubectl delete namespace services\n        # Force a success status code, otherwise Bash will implicitly return the last command's code, which can be 1.\n        true\n\n  - run:\n      name: Notify Slack on failure\n      when: on_fail\n      command: |\n        if [[ \"${NOTHING_TO_TEST}\" != \"true\" ]]; then\n          ./scripts/slack/notify_failure.py \"${CIRCLE_BRANCH}\" \"${CIRCLE_JOB}\" \"${CIRCLE_BUILD_URL}\" \"${CIRCLE_PULL_REQUEST}\" \"${SLACK_WEBHOOK}\"\n        fi\n", "\n[![Known Vulnerabilities](https://snyk.io/test/github/snyk/kubernetes-monitor/badge.svg)](https://snyk.io/test/github/snyk/kubernetes-monitor)\n\n# snyk/kubernetes-monitor #\n\n## Summary ##\n\nA containerized application that is deployed with Helm. Monitors the security of a Kubernetes cluster by analyzing container images.\n\n## Prerequisites ##\n\n* 50 GiB of storage in the form of [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) or a [PersistentVolumeClaim](https://kubernetes.io/docs/concepts/storage/persistent-volumes/).\n* External internet access from the Kubernetes cluster to `api.snyk.io`.\n* 1 CPU, 2 GiB RAM\n* 1 Kubernetes worker node of type `linux/amd64` - supported and tested only on the AMD64 CPU architecture\n\nSupported Kubernetes distributions:\n\n* Any *Generally Available* Kubernetes Certified distribution, for example: GKE, AKS, EKS, OCP.\n* OCP 4.1+ if running on OpenShift - supported and tested on *Generally Available* versions\n\nTested with the following [Security Context Constraint](scc.txt) on OCP.\n\n## Installation with Helm ##\n\nPlease refer to the [Helm chart installation instructions](./snyk-monitor/README.md).\n\n## Documentation ##\n\nFor detailed documentation and support, please refer to the [Snyk Kubernetes integration documentation](https://docs.snyk.io/products/snyk-container/kubernetes-workload-and-image-scanning).\n", "{\n  \"LOGGING\": {\n    \"name\": \"kubernetes-monitor\",\n    \"level\": \"info\"\n  },\n  \"IMAGES_SCANNED_CACHE\": {\n    \"MAX_SIZE\": 20000,\n    \"MAX_AGE_MS\": 86400000\n  },\n  \"WORKLOADS_SCANNED_CACHE\": {\n    \"MAX_SIZE\": 10000,\n    \"MAX_AGE_MS\": 86400000\n  },\n  \"WORKERS_COUNT\": 5,\n  \"WORKLOAD_METADATA_CACHE\": {\n    \"MAX_SIZE\": 10000,\n    \"MAX_AGE_MS\": 60000\n  },\n  \"REQUEST_QUEUE_LENGTH\": 2,\n  \"QUEUE_LENGTH_LOG_FREQUENCY_MINUTES\": 1,\n  \"INTEGRATION_ID\": \"\",\n  \"SERVICE_ACCOUNT_API_TOKEN\": \"\",\n  \"DEFAULT_KUBERNETES_UPSTREAM_URL\": \"https://api.snyk.io/v2/kubernetes-upstream\",\n  \"MAX_RETRY_BACKOFF_DURATION_SECONDS\": 300,\n  \"USE_KEEPALIVE\": true\n}\n", "#! /bin/bash\nset -e\n\n# Getting latest released tag\nLATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`\nLATEST_TAG=${LATEST_TAG_WITH_V:1}\nLATEST_TAG_APPROVED=${LATEST_TAG}-approved\n\n# Send Slack notification\n./scripts/slack/notify_deploy.py $LATEST_TAG_APPROVED dev\n\n# Config git\ngit config --global user.email \"k-m@example.com\"\ngit config --global user.name \"K-M Deploy Boy\"\n\ngit clone https://$GH_TOKEN@github.com/snyk/$KUBERNETES_MONITOR_DEPLOYER_REPO.git\n\ncp -r snyk-monitor/* $KUBERNETES_MONITOR_DEPLOYER_REPO/helm\n\n# Create helm values for different envs\ncat >$KUBERNETES_MONITOR_DEPLOYER_REPO/helm/values/multi-tenant-gcp-pre-production.yaml <<EOF\nclusterName: \"Development cluster\"\nintegrationApi: \"https://api.dev.snyk.io/v2/kubernetes-upstream\"\nlog_level: \"DEBUG\"\nskip_k8s_jobs: true\n\npolicyOrgs:\n  - $POLICY_ORG_PRE_PROD\n\nimage:\n  tag: $LATEST_TAG_APPROVED\n\nskopeo:\n  compression:\n    level: 1\n\nworkers:\n  count: 5\n\nmetadata:\n  labels:\n    $SNYK_OWNER_LABEL_KEY: $SNYK_OWNER_LABEL_VALUE\n    $SNYK_LOG_DEST_LABEL_KEY: $SNYK_LOG_DEST_LABEL_VALUE\n  annotations:\n    github.com/project-slug: snyk/kubernetes-monitor\n\nEOF\n\ncat >$KUBERNETES_MONITOR_DEPLOYER_REPO/helm/values/multi-tenant-gcp-production.yaml <<EOF\nclusterName: \"Production cluster\"\nlog_level: \"DEBUG\"\nskip_k8s_jobs: true\n\nlimit:\n  memory: \"4Gi\"\n\npolicyOrgs:\n  - $POLICY_ORG_PROD\n\nimage:\n  tag: $LATEST_TAG\n\nskopeo:\n  compression:\n    level: 1\n\nworkers:\n  count: 5\n\nmetadata:\n  labels:\n    $SNYK_OWNER_LABEL_KEY: $SNYK_OWNER_LABEL_VALUE\n    $SNYK_LOG_DEST_LABEL_KEY: $SNYK_LOG_DEST_LABEL_VALUE\n  annotations:\n    github.com/project-slug: snyk/kubernetes-monitor\n\nEOF\n\ncd $KUBERNETES_MONITOR_DEPLOYER_REPO\ngit commit --allow-empty -am \"feat: deploy k-m $LATEST_TAG_WITH_V\"\ngit push origin main\n", "#! /bin/bash\n\nget_latest_release() {\n    curl --silent \"https://api.github.com/repos/$1/releases/latest\" | # Get latest release from GitHub api\n    grep '\"tag_name\":' |                                            # Get tag line\n    sed -E 's/.*\"([^\"]+)\".*/\\1/' |                                  # Pluck JSON value\n    sed 's/v//'                                                     # Remove \"v\" prefix\n}\n\nLATEST_TAG=$(get_latest_release snyk/kubernetes-monitor)\nIP=$(ifconfig | grep \"inet \" | grep -Fv 127.0.0.1 | awk 'NR==1{print $2}')\n\nif [ \"$INTEGRATION_ID\" == \"\" ]; then\n    echo \"Enter your integration ID: \"\n    read INTEGRATION_ID\nfi\n\nif [ \"$SERVICE_ACCOUNT_API_TOKEN\" == \"\" ]; then\n    echo \"Enter your service account API token: \"\n    read SERVICE_ACCOUNT_API_TOKEN\nfi\n\nkind delete cluster\nkind create cluster\nkubectl create namespace snyk-monitor\nkubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SERVICE_ACCOUNT_API_TOKEN}\nhelm upgrade --install snyk-monitor ./snyk-monitor --namespace snyk-monitor --set clusterName=\"kind localhost\" --set image.tag=${LATEST_TAG} --set integrationApi=http://${IP}:9000\n\nprintf \"\\r\\n\\r\\nYou can now check if the pod is running using:\\r\\n\\tkubectl get pod -n snyk-monitor\\r\\n\"\n", "#\n# This file creates the deployment that runs the Kubernetes-Monitor\n#\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: snyk-monitor\n  namespace: snyk-monitor\n  labels:\n    app.kubernetes.io/name: snyk-monitor\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: snyk-monitor\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: snyk-monitor\n    spec:\n      containers:\n      - image: snyk/kubernetes-monitor:IMAGE_TAG_OVERRIDE_WHEN_PUBLISHING\n        imagePullPolicy: Always\n        name: snyk-monitor\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - name: docker-config\n          readOnly: true\n          mountPath: \"/srv/app/.docker\"\n        - name: temporary-storage\n          mountPath: \"/var/tmp\"\n        - name: ssl-certs\n          mountPath: \"/srv/app/certs\"\n        - name: registries-conf\n          mountPath: \"/srv/app/.config/containers\"\n        - name: workload-policies\n          mountPath: \"/tmp/policies\"\n          readOnly: true\n        env:\n          - name: SNYK_INTEGRATION_ID\n            valueFrom:\n              secretKeyRef:\n                name: snyk-monitor\n                key: integrationId\n          - name: SNYK_SERVICE_ACCOUNT_API_TOKEN\n            valueFrom:\n              secretKeyRef:\n                name: snyk-monitor\n                key: serviceAccountApiToken\n          - name: SNYK_WATCH_NAMESPACE\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: namespace\n                optional: true\n          - name: SNYK_DEPLOYMENT_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: SNYK_DEPLOYMENT_NAME\n            value: snyk-monitor\n          - name: SNYK_INTEGRATION_API\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: integrationApi\n                optional: true\n          - name: SNYK_CLUSTER_NAME\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: clusterName\n                optional: true\n          - name: SNYK_MONITOR_VERSION\n            value: IMAGE_TAG_OVERRIDE_WHEN_PUBLISHING\n          - name: HOME\n            value: /srv/app\n          - name: HTTP_PROXY\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: http_proxy\n                optional: true\n          - name: HTTPS_PROXY\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: https_proxy\n                optional: true\n          - name: NO_PROXY\n            valueFrom:\n              configMapKeyRef:\n                name: snyk-monitor\n                key: no_proxy\n                optional: true\n          - name: LOG_LEVEL\n            value: 'INFO'\n        resources:\n          requests:\n            cpu: '250m'\n            memory: '400Mi'\n          limits:\n            cpu: '1'\n            memory: '2Gi'\n        securityContext:\n          privileged: false\n          runAsNonRoot: true\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n              - ALL\n      volumes:\n      - name: docker-config\n        secret:\n          secretName: snyk-monitor\n          items:\n            - key: dockercfg.json\n              path: config.json\n      - name: temporary-storage\n        emptyDir:\n          sizeLimit: 50Gi\n      - name: ssl-certs\n        configMap:\n          name: snyk-monitor-certs\n          optional: true\n      - name: registries-conf\n        configMap:\n          name: snyk-monitor-registries-conf\n          optional: true\n      - name: workload-policies\n        configMap:\n          name: snyk-monitor-workload-policies\n          optional: true\n      serviceAccountName: snyk-monitor\n", "# snyk-operator\n\n```sh\ncurl -Lo opm https://github.com/operator-framework/operator-registry/releases/download/v1.17.3/darwin-amd64-opm\nchmod +x opm\n```\n\n```sh\nexport VERSION=1.68.2-pre0\nmake docker-build\ndocker tag snyk/snyk-operator-bundle:$VERSION <operator-certification-repo>:$VERSION\ndocker push registry.connect.redhat.com/snyk/kubernetes-operator:$VERSION\n\nmake bundle-build\ndocker tag snyk/snyk-operator-bundle:$VERSION <bundle-certification-repo>:$VERSION\ndocker push <bundle-certification-repo>:$VERSION\n\n./opm index add -c docker --bundles snyk/snyk-operator-bundle:$VERSION --tag snyk/snyk-operator-index:$VERSION\n```\n\n```yaml\napiVersion: operators.coreos.com/v1alpha1\nkind: CatalogSource\nmetadata:\n  name: snyk-operator\n  namespace: openshift-marketplace\nspec:\n  sourceType: grpc\n  image: docker.io/snyk/snyk-operator-index:1.68.2\n  displayName: Snyk Operator Bundle\n  publisher: Snyk Ltd.\n  updateStrategy:\n    registryPoll:\n      interval: 1m\n```\n\n```yaml\napiVersion: charts.snyk.io/v1alpha1 # this has changed, used to be \"charts.helm.k8s.io/v1alpha1\"\nkind: SnykMonitor\nmetadata:\n  name: snyk-monitor\n  namespace: snyk-monitor\nspec:\n  integrationApi: https://api.dev.snyk.io/v2/kubernetes-upstream\n  temporaryStorageSize: 20Gi\n  pvc:\n    enabled: true\n---\napiVersion: operators.coreos.com/v1\nkind: OperatorGroup\nmetadata:\n  name: snyk-operator\n  namespace: snyk-monitor\nspec:\n  targetNamespaces:\n    - snyk-monitor\n---\napiVersion: operators.coreos.com/v1alpha1\nkind: Subscription\nmetadata:\n  name: snyk-operator\n  namespace: snyk-monitor\nspec:\n  channel: stable\n  name: snyk-operator-marketplace # this has changed, used to be \"snyk-operator\"\n  installPlanApproval: Automatic\n  source: snyk-operator\n  sourceNamespace: openshift-marketplace\n```\n", "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  labels:\n    app.kubernetes.io/instance: snyk-operator-marketplace\n    app.kubernetes.io/version: 1.68.2\n    app.kubernetes.io/name: snyk-operator-marketplace\n    app.kubernetes.io/managed-by: snyk-operator-marketplace\n  annotations:\n    alm-examples: |-\n      [\n        {\n          \"apiVersion\": \"charts.snyk.io/v1alpha1\",\n          \"kind\": \"SnykMonitor\",\n          \"metadata\": {\n            \"name\": \"snyk-monitor\",\n            \"labels\": {\n              \"app.kubernetes.io/instance\": \"snyk-monitor\",\n              \"app.kubernetes.io/version\": \"1.68.2\",\n              \"app.kubernetes.io/name\": \"snyk-monitor\",\n              \"app.kubernetes.io/managed-by\": \"snyk-operator\"\n            },\n            \"annotations\": {\n              \"productID\": \"snyk-operator-marketplace\",\n              \"productName\": \"snyk-operator-marketplace\",\n              \"productVersion\": \"1.68.2\"\n            }\n          },\n          \"spec\": {\n            \"clusterName\": \"Default cluster\",\n            \"integrationApi\": \"\",\n            \"monitorSecrets\": \"snyk-monitor\",\n            \"scope\": \"Cluster\",\n            \"temporaryStorageSize\": \"50Gi\",\n            \"pvc\": {\n              \"enabled\": false,\n              \"name\": \"snyk-monitor\"\n            },\n            \"requests\": {\n              \"memory\": \"400Mi\"\n            },\n            \"limits\": {\n              \"memory\": \"2Gi\"\n            },\n            \"nodeAffinity\": {\n              \"disableBetaArchNodeSelector\": false\n            }\n          }\n        }\n      ]\n    \"olm.skipRange\": \"<1.68.2\"\n    capabilities: Basic Install\n    categories: Developer Tools\n    certified: \"true\"\n    productID: snyk-operator-marketplace\n    productName: snyk-operator-marketplace\n    productVersion: 1.68.2\n    containerImage: registry.connect.redhat.com/snyk/kubernetes-operator:1.68.2\n    createdAt: \"2021-06-04T00:20:21Z\"\n    description: A Kubernetes Operator for creating and managing Snyk controller instances.\n    operators.operatorframework.io/builder: operator-sdk-v1.3.0\n    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1\n    repository: https://github.com/docker.io/snyk/kubernetes-monitor\n    support: Snyk Ltd.\n  name: snyk-operator-marketplace.v1.68.2\nspec:\n  apiservicedefinitions: {}\n  customresourcedefinitions:\n    owned:\n      - description: Represents a deployment of the Snyk controller, which scans container images in the cluster for vulnerabilities.\n        displayName: Snyk Monitor\n        kind: SnykMonitor\n        name: snykmonitors.charts.snyk.io\n        resources:\n          - kind: Deployment\n            name: snyk-monitor\n            version: apps/v1\n          - kind: Secret\n            name: snyk-monitor\n            version: v1\n          - kind: PersistentVolumeClaim\n            name: snyk-monitor\n            version: v1\n        specDescriptors:\n          - description: \"The name of the secret object that stores the Snyk controller secrets, defaults to snyk-monitor. The secret needs to contain the following data fields: integrationId, dockercfg.json\"\n            displayName: Snyk controller Secret name\n            path: monitorSecrets\n            x-descriptors:\n              - urn:alm:descriptor:io.kubernetes:Secret\n          - description: The name of the cluster that will be displayed in Snyk. Defaults to \"Default cluster\".\n            displayName: Cluster name\n            path: clusterName\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: \"Whether the Snyk controller scans images in the whole cluster or in a specific namespace. Valid values are: Cluster, Namespaced. Defaults to scanning the whole cluster.\"\n            displayName: Scope\n            path: scope\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: API endpoint for sending image scan results. Does not need to be provided as part of the installation as it defaults to sending results to Snyk.\n            displayName: Integration API\n            path: integrationApi\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: How much disk storage to reserve for the Snyk controller. Defaults to 50Gi.\n            displayName: Temporary storage size\n            path: temporaryStorageSize\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: Pull policy for the Snyk controller image. Defaults to Always.\n            displayName: Image pull policy\n            path: image.pullPolicy\n            x-descriptors:\n              - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\n          - description: The registry repository name and tag for the Snyk controller image.\n            displayName: Image repository name and tag\n            path: image.image\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: Pull policy for the init container image. Defaults to Always.\n            displayName: Init container image pull policy\n            path: initContainerImage.pullPolicy\n            x-descriptors:\n              - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\n          - description: The registry repository name and tag for the Snyk controller init container image.\n            displayName: Init container image repository name and tag\n            path: initContainerImage.image\n            x-descriptors:\n              - urn:alm:descriptor:text\n          - description: >-\n              The memory requested by the Snyk controller.\n            displayName: Memory request\n            path: requests.memory\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The memory limit for the Snyk controller.\n            displayName: Memory limit\n            path: limits.memory\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n        version: v1alpha1\n  description: |-\n    A Kubernetes Operator for creating and managing Snyk Kubernetes controller instances.\n\n    Snyk integrates with Kubernetes, enabling you to import and test your running workloads and identify vulnerabilities in their associated images and configurations that might make those workloads less secure. Once imported, Snyk continues to monitor those workloads, identifying additional security issues as new images are deployed and the workload configuration changes.\n\n    ## Prerequisites\n\n    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId, serviceAccountApiToken and Docker config file:\n\n    ```\n    kubectl create namespace snyk-monitor\n    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SNYK_SERVICE_ACCOUNT_API_TOKEN}\n    ```\n\n    Refer to the [Snyk documentation](https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview) for more details.\n  displayName: Snyk Operator\n  icon:\n    - base64data: \n      mediatype: image/svg+xml\n  install:\n    spec:\n      clusterPermissions:\n        - rules:\n            - apiGroups:\n                - authentication.k8s.io\n              resources:\n                - tokenreviews\n                - subjectaccessreviews\n              verbs:\n                - create\n            - apiGroups:\n                - \"\"\n              resources:\n                - namespaces\n              verbs:\n                - get\n            - apiGroups:\n                - charts.snyk.io\n              resources:\n                - snykmonitors\n                - snykmonitors/status\n                - snykmonitors/finalizers\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - \"\"\n              resources:\n                - pods\n                - services\n                - services/finalizers\n                - serviceaccounts\n                - endpoints\n                - persistentvolumeclaims\n                - events\n                - configmaps\n                - secrets\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - apps\n              resources:\n                - deployments\n                - replicasets\n              verbs:\n                - \"*\"\n          serviceAccountName: snyk-operator\n        - rules:\n            - apiGroups:\n                - \"\"\n              resources:\n                - pods\n              verbs:\n                - get\n                - list\n                - watch\n            - apiGroups:\n                - \"\"\n              resources:\n                - namespaces\n              verbs:\n                - get\n                - list\n                - watch\n            - apiGroups:\n                - \"\"\n              resources:\n                - replicationcontrollers\n              verbs:\n                - get\n                - list\n                - watch\n            - apiGroups:\n                - batch\n              resources:\n                - cronjobs\n                - jobs\n              verbs:\n                - get\n                - list\n                - watch\n            - apiGroups:\n                - apps\n              resources:\n                - replicasets\n                - daemonsets\n                - deployments\n                - statefulsets\n              verbs:\n                - get\n                - list\n                - watch\n          serviceAccountName: snyk-monitor\n      deployments:\n        - name: snyk-operator\n          spec:\n            replicas: 1\n            selector:\n              matchLabels:\n                control-plane: controller-manager\n            strategy: {}\n            template:\n              metadata:\n                labels:\n                  app.kubernetes.io/name: snyk-operator\n                  app.kubernetes.io/instance: snyk-operator\n                  app.kubernetes.io/managed-by: snyk-operator-marketplace\n                  control-plane: controller-manager\n              spec:\n                containers:\n                  - image: registry.connect.redhat.com/snyk/kubernetes-operator:1.68.2\n                    name: operator\n                    resources:\n                      limits:\n                        cpu: 100m\n                        memory: 100Mi\n                      requests:\n                        cpu: 100m\n                        memory: 100Mi\n                    securityContext:\n                      privileged: false\n                      runAsNonRoot: true\n                      allowPrivilegeEscalation: false\n                      readOnlyRootFilesystem: true\n                      capabilities:\n                        drop:\n                          - ALL\n                    env:\n                      - name: WATCH_NAMESPACE\n                        valueFrom:\n                          fieldRef:\n                            fieldPath: metadata.annotations['olm.targetNamespaces']\n                      - name: POD_NAME\n                        valueFrom:\n                          fieldRef:\n                            fieldPath: metadata.name\n                      - name: OPERATOR_NAME\n                        value: snyk-operator\n                      - name: RELATED_IMAGE_DEPLOYMENT\n                        value: registry.connect.redhat.com/snyk/kubernetes-monitor:1.68.2\n                      - name: RELATED_IMAGE_DEPLOYMENT_INIT\n                        value: registry.access.redhat.com/ubi8-minimal:latest\n                  - args:\n                      - --secure-listen-address=0.0.0.0:8443\n                      - --upstream=http://127.0.0.1:8080/\n                      - --logtostderr=true\n                      - --v=10\n                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.6\n                    name: kube-rbac-proxy\n                    ports:\n                      - containerPort: 8443\n                        name: https\n                    resources:\n                      limits:\n                        cpu: 100m\n                        memory: 100Mi\n                      requests:\n                        cpu: 100m\n                        memory: 100Mi\n                    securityContext:\n                      privileged: false\n                      runAsNonRoot: true\n                      allowPrivilegeEscalation: false\n                      readOnlyRootFilesystem: true\n                      capabilities:\n                        drop:\n                          - ALL\n                serviceAccountName: snyk-operator\n                affinity:\n                  nodeAffinity:\n                    requiredDuringSchedulingIgnoredDuringExecution:\n                      nodeSelectorTerms:\n                        - matchExpressions:\n                            - key: kubernetes.io/arch\n                              operator: In\n                              values:\n                                - amd64\n                terminationGracePeriodSeconds: 10\n    strategy: deployment\n  installModes:\n    - supported: true\n      type: OwnNamespace\n    - supported: true\n      type: SingleNamespace\n    - supported: false\n      type: MultiNamespace\n    - supported: true\n      type: AllNamespaces\n  keywords:\n    - snyk\n    - controller\n    - monitor\n    - operator\n    - security\n    - cluster\n    - container\n    - image\n    - security\n    - vulnerabilities\n    - advisories\n    - audit\n    - scan\n    - scanning\n  links:\n    - name: Snyk Website\n      url: https://snyk.io\n    - name: Snyk Documentation\n      url: https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview\n  maintainers:\n    - email: support@snyk.io\n      name: Snyk Ltd.\n  maturity: stable\n  provider:\n    name: Snyk Ltd.\n  version: 1.68.2\n", "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations:\n    alm-examples: |-\n      [\n        {\n          \"apiVersion\": \"charts.snyk.io/v1alpha1\",\n          \"kind\": \"SnykMonitor\",\n          \"metadata\": {\n            \"name\": \"snyk-monitor\"\n          },\n          \"spec\": {\n            \"clusterName\": \"\",\n            \"image\": {\n              \"pullPolicy\": \"Always\",\n              \"repository\": \"docker.io/snyk/kubernetes-monitor\",\n              \"tag\": \"1.68.2\"\n            },\n            \"integrationApi\": \"\",\n            \"monitorSecrets\": \"snyk-monitor\",\n            \"scope\": \"Cluster\",\n            \"temporaryStorageSize\": \"50Gi\",\n            \"pvc\": {\n              \"enabled\": false,\n              \"name\": \"snyk-monitor-pvc\"\n            },\n            \"initContainerImage\": {\n              \"repository\": \"registry.access.redhat.com/ubi8-minimal\",\n              \"tag\": \"latest\"\n            },\n            \"requests\": {\n              \"memory\": \"400Mi\"\n            },\n            \"limits\": {\n              \"memory\": \"2Gi\"\n            },\n            \"nodeAffinity\": {\n              \"disableBetaArchNodeSelector\": false\n            }\n          }\n        }\n      ]\n    \"olm.skipRange\": \"<1.68.2\"\n    capabilities: Basic Install\n    categories: Developer Tools, Security\n    certified: \"true\"\n    containerImage: registry.connect.redhat.com/snyk/kubernetes-operator:1.68.2\n    createdAt: \"2020-08-28T15:20:21Z\"\n    description: A Kubernetes Operator for creating and managing Snyk controller instances.\n    operators.operatorframework.io/builder: operator-sdk-v1.3.0\n    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1\n    repository: https://github.com/snyk/kubernetes-monitor\n    support: Snyk Ltd.\n  name: snyk-operator.v1.68.2\nspec:\n  apiservicedefinitions: {}\n  customresourcedefinitions:\n    owned:\n    - description: Represents a deployment of the Snyk controller, which scans container images in the cluster for vulnerabilities.\n      displayName: Snyk Monitor\n      kind: SnykMonitor\n      name: snykmonitors.charts.snyk.io\n      resources:\n      - kind: Deployment\n        name: snyk-monitor\n        version: apps/v1\n      - kind: Secret\n        name: snyk-monitor\n        version: v1\n      specDescriptors:\n      - description: 'The name of the secret object that stores the Snyk controller secrets. The secret needs to contain the following data fields: - integrationId - dockercfg.json'\n        displayName: Snyk controller Secret name\n        path: monitorSecrets\n        x-descriptors:\n        - urn:alm:descriptor:io.kubernetes:Secret\n      - description: The name of the cluster that will be displayed in Snyk.\n        displayName: Cluster Name\n        path: clusterName\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: 'Whether the Snyk controller scans images in the whole cluster or in a specific namespace. Valid values are: Cluster, Namespaced.'\n        displayName: Scope\n        path: scope\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: API endpoint for sending image scan results. Does not need to be provided as part of the installation as it defaults to sending results to Snyk.\n        displayName: Integration API\n        path: integrationApi\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: How much disk storage to reserve for the Snyk controller.\n        displayName: Temporary Storage Size\n        path: temporaryStorageSize\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: Pull policy for the image.\n        displayName: Image Pull Policy\n        path: image.pullPolicy\n        x-descriptors:\n        - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\n      - description: The registry repository for the Snyk controller's image.\n        displayName: Image repository\n        path: image.repository\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: The tag for the Snyk controller's image.\n        displayName: Image tag\n        path: image.tag\n        x-descriptors:\n        - urn:alm:descriptor:text\n      - description: >-\n          The memory requested by the Snyk controller.\n        displayName: Memory request\n        path: requests.memory\n        x-descriptors:\n          - \"urn:alm:descriptor:text\"\n      - description: >-\n          The memory limit for the Snyk controller.\n        displayName: Memory limit\n        path: limits.memory\n        x-descriptors:\n          - \"urn:alm:descriptor:text\"\n      version: v1alpha1\n  description: |-\n    A Kubernetes Operator for creating and managing Snyk Kubernetes controller instances.\n\n    Snyk integrates with Kubernetes, enabling you to import and test your running workloads and identify vulnerabilities in their associated images and configurations that might make those workloads less secure. Once imported, Snyk continues to monitor those workloads, identifying additional security issues as new images are deployed and the workload configuration changes.\n\n    ## Prerequisites\n\n    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId, serviceAccountApiToken and Docker config file:\n\n    ```\n    kubectl create namespace snyk-monitor\n    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SNYK_SERVICE_ACCOUNT_API_TOKEN}\n    ```\n\n    Refer to the [Snyk documentation](https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview) for more details.\n  displayName: Snyk Operator\n  icon:\n  - base64data: \n    mediatype: image/svg+xml\n  install:\n    spec:\n      deployments: null\n    strategy: \"\"\n  installModes:\n  - supported: true\n    type: OwnNamespace\n  - supported: true\n    type: SingleNamespace\n  - supported: false\n    type: MultiNamespace\n  - supported: true\n    type: AllNamespaces\n  keywords:\n  - snyk\n  - controller\n  - monitor\n  - operator\n  - security\n  - cluster\n  - container\n  - image\n  - security\n  - vulnerabilities\n  - advisories\n  - audit\n  - scan\n  - scanning\n  links:\n  - name: Snyk Website\n    url: https://snyk.io\n  - name: Snyk Documentation\n    url: https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview\n  maintainers:\n  - email: support@snyk.io\n    name: Snyk Ltd.\n  maturity: stable\n  provider:\n    name: Snyk Ltd.\n    url: https://snyk.io\n  version: 1.68.2\n", "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"snyk-monitor.name\" . }}\n  labels:\n    app.kubernetes.io/name: {{ include \"snyk-monitor.name\" . }}\n    helm.sh/chart: {{ include \"snyk-monitor.chart\" . }}\n    app.kubernetes.io/instance: {{ .Release.Name }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\nspec:\n  {{- if .Values.pvc.enabled }}\n  strategy:\n    type: Recreate\n  {{- end }}\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: {{ include \"snyk-monitor.name\" . }}\n      app.kubernetes.io/instance: {{ .Release.Name }}\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: {{ include \"snyk-monitor.name\" . }}\n        app.kubernetes.io/instance: {{ .Release.Name }}\n        app.kubernetes.io/managed-by: {{ .Release.Service }}\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                - key: \"kubernetes.io/arch\"\n                  operator: In\n                  values:\n                    {{- with .Values.nodeAffinity.kubernetesIoArch }}\n                      {{- toYaml . | nindent 20 }}\n                    {{- end }}\n                - key: \"beta.kubernetes.io/arch\"\n                  operator: In\n                  values:\n                    {{- with .Values.nodeAffinity.kubernetesIoArch }}\n                      {{- toYaml . | nindent 20 }}\n                    {{- end }}\n      serviceAccountName: {{ include \"snyk-monitor.name\" . }}\n      restartPolicy: Always\n      initContainers:\n        - name: volume-permissions\n          image: \"{{ .Values.initContainerImage.image }}\"\n          command: ['sh', '-c', 'chmod -R go+rwX /var/tmp || true']\n          volumeMounts:\n            - name: temporary-storage\n              mountPath: \"/var/tmp\"\n          resources:\n            requests:\n              cpu: \"100m\"\n              memory: \"100Mi\"\n            limits:\n              cpu: \"100m\"\n              memory: \"100Mi\"\n          securityContext:\n            privileged: false\n            runAsNonRoot: false\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            capabilities:\n              drop:\n                - ALL\n      containers:\n        - name: {{ include \"snyk-monitor.name\" . }}\n          image: \"{{ .Values.image.image }}\"\n          imagePullPolicy: {{ .Values.image.pullPolicy }}\n          terminationMessagePath: /dev/termination-log\n          terminationMessagePolicy: File\n          volumeMounts:\n          - name: docker-config\n            readOnly: true\n            mountPath: \"/srv/app/.docker\"\n          - name: temporary-storage\n            mountPath: \"/var/tmp\"\n          - name: ssl-certs\n            mountPath: \"/srv/app/certs\"\n          - name: workload-policies\n            mountPath: \"/tmp/policies\"\n            readOnly: true\n          - name: registries-conf\n            mountPath: \"/srv/app/.config/containers\"\n           {{- if .Values.excludedNamespaces }}\n          - name: excluded-namespaces\n            mountPath: \"/etc/config\"\n          {{- end }}\n          env:\n          - name: NODE_EXTRA_CA_CERTS\n            value: {{ .Values.extraCaCerts }}\n          - name: SNYK_INTEGRATION_ID\n            valueFrom:\n              secretKeyRef:\n                name: {{ .Values.monitorSecrets }}\n                key: integrationId\n          - name: SNYK_SERVICE_ACCOUNT_API_TOKEN\n            valueFrom:\n              secretKeyRef:\n                name: snyk-monitor\n                key: serviceAccountApiToken\n          - name: SNYK_WATCH_NAMESPACE\n            value: {{ include \"snyk-monitor.scope\" . }}\n          - name: SNYK_DEPLOYMENT_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: SNYK_DEPLOYMENT_NAME\n            value: {{ include \"snyk-monitor.name\" . }}\n          - name: SNYK_INTEGRATION_API\n            value: {{ .Values.integrationApi }}\n          - name: SNYK_CLUSTER_NAME\n            value: {{ .Values.clusterName }}\n          - name: SNYK_MONITOR_VERSION\n            value: {{ .Values.image.tag }}\n          - name: HOME\n            value: /srv/app\n          - name: HTTP_PROXY\n            value: {{ .Values.http_proxy }}\n          - name: HTTPS_PROXY\n            value: {{ .Values.https_proxy }}\n          - name: NO_PROXY\n            value: {{ .Values.no_proxy }}\n          - name: USE_KEEPALIVE\n            value: {{ quote .Values.use_keepalive }}\n          - name: LOG_LEVEL\n            value: {{ .Values.log_level }}\n          - name: SKIP_K8S_JOBS\n            value: {{ quote .Values.skip_k8s_jobs }}\n          {{- with .Values.envs }}\n          {{- toYaml . | trim | nindent 10 -}}\n          {{ end }}\n          resources:\n            requests:\n              cpu: {{ .Values.requests.cpu }}\n              memory: {{ .Values.requests.memory }}\n            limits:\n              cpu: {{ .Values.limits.cpu }}\n              memory: {{ .Values.limits.memory }}\n          livenessProbe:\n            exec:\n              command:\n              - \"true\"\n          readinessProbe:\n            exec:\n              command:\n              - \"true\"\n          securityContext:\n            privileged: false\n            runAsNonRoot: true\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            capabilities:\n              drop:\n                - ALL\n      volumes:\n        - name: docker-config\n          secret:\n            secretName: {{ .Values.monitorSecrets }}\n            items:\n              - key: dockercfg.json\n                path: config.json\n        - name: temporary-storage\n          {{- if .Values.pvc.enabled }}\n          persistentVolumeClaim:\n            claimName: {{ .Values.pvc.name }}\n          {{- else }}\n          emptyDir:\n            sizeLimit: {{ .Values.temporaryStorageSize }}\n          {{- end }}\n        - name: ssl-certs\n          configMap:\n            name: {{ .Values.certsConfigMap }}\n            optional: true\n        - name: workload-policies\n          configMap:\n            name: {{ .Values.workloadPoliciesMap }}\n            optional: true\n        - name: registries-conf\n          configMap:\n            name: {{ .Values.registriesConfConfigMap }}\n            optional: true\n        {{- if .Values.excludedNamespaces }}\n        - name: excluded-namespaces\n          configMap:\n            name: {{ .Release.Name }}-excluded-namespaces\n        {{- end }}\n      {{- with .Values.nodeSelector }}\n      nodeSelector:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n      {{- with .Values.tolerations }}\n      tolerations:\n        {{- toYaml . | nindent 8 }}\n      {{- end }}\n", "# snyk-operator\n\n```sh\ncurl -Lo opm https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/darwin-amd64-opm\nchmod +x opm\n```\n\n```sh\nexport VERSION=1.40.3\nmake docker-build\ndocker push <operator-repo>:$VERSION\n\nmake bundle-build\ndocker tag snyk/snyk-operator-bundle:$VERSION <red-hat-certification-repo>:$VERSION\ndocker push <red-hat-certification-repo>:$VERSION\n\n./opm index add -c docker --bundles snyk/snyk-operator-bundle:$VERSION --tag snyk/snyk-operator-index:$VERSION\n```\n\n```yaml\napiVersion: operators.coreos.com/v1alpha1\nkind: CatalogSource\nmetadata:\n  name: snyk-operator\n  namespace: openshift-marketplace\nspec:\n  sourceType: grpc\n  image: docker.io/snyk/snyk-operator-index:1.40.3-pre5\n  displayName: Snyk Operator Bundle\n  publisher: Snyk Ltd.\n  updateStrategy:\n    registryPoll:\n      interval: 1m\n```\n\n```yaml\napiVersion: charts.snyk.io/v1alpha1 # this has changed, used to be \"charts.helm.k8s.io/v1alpha1\"\nkind: SnykMonitor\nmetadata:\n  name: snyk-monitor\n  namespace: snyk-monitor\nspec:\n  integrationApi: https://api.dev.snyk.io/v2/kubernetes-upstream\n  temporaryStorageSize: 20Gi\n  pvc:\n    enabled: true\n---\napiVersion: operators.coreos.com/v1\nkind: OperatorGroup\nmetadata:\n  name: snyk-operator\n  namespace: snyk-monitor\nspec:\n  targetNamespaces:\n    - snyk-monitor\n---\napiVersion: operators.coreos.com/v1alpha1\nkind: Subscription\nmetadata:\n  name: snyk-operator\n  namespace: snyk-monitor\nspec:\n  channel: stable\n  name: snyk-operator-marketplace # this has changed, used to be \"snyk-operator\"\n  installPlanApproval: Automatic\n  source: snyk-operator\n  sourceNamespace: openshift-marketplace\n```\n", "apiVersion: operators.coreos.com/v1alpha1\nkind: ClusterServiceVersion\nmetadata:\n  annotations:\n    alm-examples: |-\n      [\n        {\n          \"apiVersion\": \"charts.helm.k8s.io/v1alpha1\",\n          \"kind\": \"SnykMonitor\",\n          \"metadata\": {\n            \"name\": \"snyk-monitor\"\n          },\n          \"spec\": {\n            \"clusterName\": \"\",\n            \"image\": {\n              \"pullPolicy\": \"Always\",\n              \"repository\": \"snyk/kubernetes-monitor\",\n              \"tag\": \"SNYK_MONITOR_IMAGE_TAG_OVERRIDE\"\n            },\n            \"integrationApi\": \"\",\n            \"monitorSecrets\": \"snyk-monitor\",\n            \"scope\": \"Cluster\",\n            \"temporaryStorageSize\": \"50Gi\",\n            \"pvc\": {\n              \"enabled\": false,\n              \"create\": false,\n              \"name\": \"snyk-monitor-pvc\",\n              \"storageClassName\": null\n            },\n            \"initContainerImage\": {\n              \"repository\": \"busybox\",\n              \"tag\": \"latest\"\n            },\n            \"requests\": {\n              \"memory\": \"400Mi\"\n            },\n            \"limits\": {\n              \"memory\": \"2Gi\"\n            },\n            \"nodeAffinity\": {\n              \"disableBetaArchNodeSelector\": false\n            }\n          }\n        }\n      ]\n    \"olm.skipRange\": \"<1.68.2\"\n    capabilities: Basic Install\n    categories: Developer Tools, Security\n    containerImage: docker.io/snyk/kubernetes-operator:SNYK_OPERATOR_IMAGE_TAG_OVERRIDE\n    createdAt: TIMESTAMP_OVERRIDE\n    support: Snyk Ltd.\n    repository: https://github.com/snyk/kubernetes-monitor\n    description: |-\n      A Kubernetes Operator for creating and managing Snyk controller instances.\n    certified: \"false\"\n  name: snyk-operator.vSNYK_OPERATOR_VERSION_OVERRIDE\n  namespace: snyk-monitor\nspec:\n  apiservicedefinitions: {}\n  customresourcedefinitions:\n    owned:\n      - name: snykmonitors.charts.helm.k8s.io\n        displayName: Snyk Monitor\n        kind: SnykMonitor\n        version: v1alpha1\n        description: Represents a deployment of the Snyk controller, which scans container images in the cluster for vulnerabilities.\n        resources:\n          - kind: Deployment\n            name: snyk-monitor\n            version: v1\n          - kind: Secret\n            name: snyk-monitor\n            version: v1\n          - kind: PersistentVolumeClaim\n            name: snyk-monitor-pvc\n            version: v1\n        specDescriptors:\n          - description: >-\n              The name of the secret object that stores the Snyk controller secrets.\n              The secret needs to contain the following data fields:\n              - integrationId\n              - dockercfg.json\n            displayName: Snyk controller Secret name\n            path: monitorSecrets\n            x-descriptors:\n              - \"urn:alm:descriptor:io.kubernetes:Secret\"\n          - description: >-\n              The name of the cluster that will be displayed in Snyk.\n            displayName: Cluster Name\n            path: clusterName\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              Whether the Snyk controller scans images in the whole cluster or in a specific namespace. Valid values are: Cluster, Namespaced.\n            displayName: Scope\n            path: scope\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              API endpoint for sending image scan results. Does not need to be provided as part of the installation as it defaults to sending results to Snyk.\n            displayName: Integration API\n            path: integrationApi\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              How much disk storage to reserve for the Snyk controller.\n            displayName: Temporary Storage Size\n            path: temporaryStorageSize\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              Pull policy for the image.\n            displayName: Image Pull Policy\n            path: image.pullPolicy\n            x-descriptors:\n              - \"urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\"\n          - description: >-\n              The registry repository for the Snyk controller's image.\n            displayName: Image repository\n            path: image.repository\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The tag for the Snyk controller's image.\n            displayName: Image tag\n            path: image.tag\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              True to use a PVC for temporary storage, false to use emptyDir.\n            displayName: PVC enabled\n            path: pvc.enabled\n            x-descriptors:\n              - \"urn:alm:descriptor:com.tectonic.ui:booleanSwitch\"\n          - description: >-\n              True to create the PVC, false to reference it (in cases it already exists).\n            displayName: Create PVC\n            path: pvc.create\n            x-descriptors:\n              - \"urn:alm:descriptor:com.tectonic.ui:booleanSwitch\"\n          - description: >-\n              The name of the PVC, when enabled.\n            displayName: PVC name\n            path: pvc.name\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The name of the StorageClass to use for the PVC, when enabled.\n            displayName: PVC StorageClass name\n            path: pvc.storageClassName\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The repo to use for initContainer, if overriding.\n            displayName: InitContainer image repo\n            path: initContainerImage.repository\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The tag for the initContainer's image.\n            displayName: InitContainer image tag\n            path: initContainerImage.tag\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The memory requested by the Snyk controller.\n            displayName: Memory request\n            path: requests.memory\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              The memory limit for the Snyk controller.\n            displayName: Memory limit\n            path: limits.memory\n            x-descriptors:\n              - \"urn:alm:descriptor:text\"\n          - description: >-\n              True to disable the beta.kubernetes.io/arch node affinity term.\n            displayName: Disable beta.kubernetes.io/arch node affinity\n            path: nodeAffinity.disableBetaArchNodeSelector\n            x-descriptors:\n              - \"urn:alm:descriptor:com.tectonic.ui:booleanSwitch\"\n  description: |-\n    A Kubernetes Operator for creating and managing Snyk Kubernetes controller instances.\n\n    Snyk integrates with Kubernetes, enabling you to import and test your running workloads and identify vulnerabilities in their associated images and configurations that might make those workloads less secure. Once imported, Snyk continues to monitor those workloads, identifying additional security issues as new images are deployed and the workload configuration changes.\n\n    ## Prerequisites\n\n    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId, serviceAccountApiToken and Docker config file:\n\n    ```\n    kubectl create namespace snyk-monitor\n    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SNYK_SERVICE_ACCOUNT_API_TOKEN}\n    ```\n\n    Refer to the [Snyk documentation](https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview) for more details.\n  displayName: Snyk Operator\n  install:\n    spec:\n      clusterPermissions:\n        - rules:\n            - apiGroups:\n                - rbac.authorization.k8s.io\n              resources:\n                - clusterroles\n                - clusterrolebindings\n              verbs:\n                - \"*\"\n          serviceAccountName: snyk-operator\n        - rules:\n            - apiGroups:\n                - \"\"\n              resources:\n                - serviceaccounts\n                - deployments\n                - namespaces\n                - configmaps\n                - secrets\n                - services\n                - pods\n                - persistentvolumeclaims\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - apps\n              resources:\n                - \"*\"\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - monitoring.coreos.com\n              resources:\n                - servicemonitors\n              verbs:\n                - get\n                - create\n            - apiGroups:\n                - apps\n              resourceNames:\n                - snyk-operator\n              resources:\n                - deployments/finalizers\n              verbs:\n                - update\n            - apiGroups:\n                - charts.helm.k8s.io\n              resources:\n                - \"*\"\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - apps.openshift.io\n              resources:\n                - deploymentconfigs\n              verbs:\n                - \"*\"\n            - apiGroups:\n                - networking.k8s.io\n              resources:\n                - networkpolicies\n              verbs:\n                - \"*\"\n          serviceAccountName: snyk-operator\n      deployments:\n        - name: snyk-operator\n          spec:\n            replicas: 1\n            selector:\n              matchLabels:\n                name: snyk-operator\n            strategy: {}\n            template:\n              metadata:\n                labels:\n                  name: snyk-operator\n              spec:\n                containers:\n                  - env:\n                      - name: WATCH_NAMESPACE\n                        valueFrom:\n                          fieldRef:\n                            fieldPath: metadata.annotations['olm.targetNamespaces']\n                      - name: POD_NAME\n                        valueFrom:\n                          fieldRef:\n                            fieldPath: metadata.name\n                      - name: OPERATOR_NAME\n                        value: snyk-operator\n                    image: docker.io/snyk/kubernetes-operator:SNYK_OPERATOR_IMAGE_TAG_OVERRIDE\n                    imagePullPolicy: Always\n                    name: snyk-operator\n                    resources:\n                      requests:\n                        cpu: \"100m\"\n                        memory: \"100Mi\"\n                      limits:\n                        cpu: \"500m\"\n                        memory: \"500Mi\"\n                    livenessProbe:\n                      exec:\n                        command:\n                          - \"true\"\n                    readinessProbe:\n                      exec:\n                        command:\n                          - \"true\"\n                    securityContext:\n                      privileged: false\n                      runAsNonRoot: true\n                      allowPrivilegeEscalation: false\n                      readOnlyRootFilesystem: true\n                      capabilities:\n                        drop:\n                          - ALL\n                serviceAccountName: snyk-operator\n    strategy: deployment\n  installModes:\n    - supported: true\n      type: OwnNamespace\n    - supported: true\n      type: SingleNamespace\n    - supported: false\n      type: MultiNamespace\n    - supported: true\n      type: AllNamespaces\n  maturity: stable\n  icon:\n    - base64data: \n      mediatype: image/svg+xml\n  provider:\n    name: Snyk Ltd.\n  maintainers:\n    - name: Snyk Ltd.\n      email: support@snyk.io\n  links:\n    - name: Website\n      url: https://snyk.io\n    - name: Documentation\n      url: https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview\n  version: 0.0.0\n  keywords:\n    - \"snyk\"\n    - \"controller\"\n    - \"monitor\"\n    - \"operator\"\n    - \"security\"\n    - \"cluster\"\n    - \"container\"\n    - \"image\"\n    - \"security\"\n    - \"vulnerabilities\"\n    - \"advisories\"\n    - \"audit\"\n    - \"scan\"\n    - \"scanning\"\n", "import { readFileSync } from 'fs';\nimport { randomUUID } from 'crypto';\nimport { loadConfig } from 'snyk-config';\nimport { Config } from './types';\n\nconst config = loadConfig(__dirname + '/../..', {\n  secretConfig: process.env.CONFIG_SECRET_FILE,\n}) as unknown as Config;\n\nconst namespacesFilePath = '/etc/config/excludedNamespaces';\n\nfunction loadExcludedNamespaces(): string[] | null {\n  try {\n    const data = readFileSync(namespacesFilePath, 'utf-8');\n    const namespaces: string[] = data.split(/\\r?\\n/);\n    return namespaces;\n  } catch (err) {\n    return null;\n  }\n}\n\nfunction getClusterName(): string {\n  if (!config.CLUSTER_NAME) {\n    return 'Default cluster';\n  }\n\n  if (config.CLUSTER_NAME.includes('/')) {\n    // logger is not yet created so defaulting to console.log\n    console.log(\n      `removing disallowed character \"/\" from clusterName (${config.CLUSTER_NAME})`,\n    );\n    return config.CLUSTER_NAME.replace(/\\//g, '');\n  }\n\n  return config.CLUSTER_NAME;\n}\n\n// NOTE: The agent identifier is replaced with a stable identifier once snyk-monitor starts up\nconfig.AGENT_ID = randomUUID();\n\nconfig.INTEGRATION_ID = config.INTEGRATION_ID.trim();\nconfig.SERVICE_ACCOUNT_API_TOKEN = config.SERVICE_ACCOUNT_API_TOKEN.trim();\nconfig.CLUSTER_NAME = getClusterName();\nconfig.IMAGE_STORAGE_ROOT = '/var/tmp';\nconfig.POLICIES_STORAGE_ROOT = '/tmp/policies';\nconfig.EXCLUDED_NAMESPACES = loadExcludedNamespaces();\nconfig.WORKERS_COUNT = Number(config.WORKERS_COUNT) || 10;\nconfig.SKOPEO_COMPRESSION_LEVEL = Number(config.SKOPEO_COMPRESSION_LEVEL) || 6;\n\n// return Sysdig endpoint information\nif (config.SYSDIG_ENDPOINT && config.SYSDIG_TOKEN) {\n  config.SYSDIG_ENDPOINT = config.SYSDIG_ENDPOINT.trim();\n  config.SYSDIG_TOKEN = config.SYSDIG_TOKEN.trim();\n}\n\n/**\n * Important: we delete the following env vars because we don't want to proxy requests to the Kubernetes API server.\n * The Kubernetes client library would honor the NO/HTTP/HTTPS_PROXY env vars.\n */\nconfig.HTTPS_PROXY = process.env['HTTPS_PROXY'];\nconfig.HTTP_PROXY = process.env['HTTP_PROXY'];\nconfig.NO_PROXY = process.env['NO_PROXY'];\nconfig.USE_KEEPALIVE = process.env.USE_KEEPALIVE === 'true';\ndelete process.env['HTTPS_PROXY'];\ndelete process.env['HTTP_PROXY'];\ndelete process.env['NO_PROXY'];\n\nconfig.SKIP_K8S_JOBS = process.env.SKIP_K8S_JOBS === 'true';\n\nexport { config };\n", "export interface Config {\n  LOGGING: {\n    name: 'kubernetes-monitor';\n    level: 'debug' | 'info' | 'warn' | 'error';\n  };\n  IMAGES_SCANNED_CACHE: {\n    MAX_SIZE: number;\n    MAX_AGE_MS: number;\n  };\n  WORKLOADS_SCANNED_CACHE: {\n    MAX_SIZE: number;\n    MAX_AGE_MS: number;\n  };\n  WORKLOAD_METADATA_CACHE: {\n    MAX_SIZE: number;\n    MAX_AGE_MS: number;\n  };\n  WORKERS_COUNT: number;\n  REQUEST_QUEUE_LENGTH: number;\n  QUEUE_LENGTH_LOG_FREQUENCY_MINUTES: number;\n  INTEGRATION_ID: string;\n  SERVICE_ACCOUNT_API_TOKEN: string;\n  DEFAULT_KUBERNETES_UPSTREAM_URL: string;\n  MAX_RETRY_BACKOFF_DURATION_SECONDS: number;\n\n  // ----------------------------------------\n  // Properties injected by Helm (via environment variables) or manually set in code:\n  CLUSTER_NAME: string;\n  AGENT_ID: string;\n  IMAGE_STORAGE_ROOT: '/var/tmp';\n  POLICIES_STORAGE_ROOT: '/tmp/policies';\n  EXCLUDED_NAMESPACES: string[] | null;\n  SKOPEO_COMPRESSION_LEVEL: number;\n  SYSDIG_ENDPOINT: string;\n  SYSDIG_TOKEN: string;\n  HTTPS_PROXY: string | undefined;\n  HTTP_PROXY: string | undefined;\n  NO_PROXY: string | undefined;\n  USE_KEEPALIVE: boolean;\n  SKIP_K8S_JOBS: boolean;\n  DEPLOYMENT_NAME: string;\n  DEPLOYMENT_NAMESPACE: string;\n  WATCH_NAMESPACE: string;\n  INTEGRATION_API: string;\n  MONITOR_VERSION: string;\n  NAMESPACE: string;\n}\n", "import * as fastq from 'fastq';\nimport needle from 'needle';\nimport sleep from 'sleep-promise';\nimport { Agent as HttpAgent } from 'http';\nimport { Agent as HttpsAgent } from 'https';\nimport { NeedleResponse, NeedleHttpVerbs, NeedleOptions } from 'needle';\n\nimport { logger } from '../common/logger';\nimport { config } from '../common/config';\nimport {\n  IDeleteWorkloadPayload,\n  IWorkloadMetadataPayload,\n  IResponseWithAttempts,\n  IRequestError,\n  ScanResultsPayload,\n  IDependencyGraphPayload,\n  IWorkloadEventsPolicyPayload,\n  IClusterMetadataPayload,\n  IRuntimeDataPayload,\n} from './types';\nimport { getProxyAgent } from './proxy';\n\nimport type { queueAsPromised } from 'fastq';\nimport path from 'path';\n\ninterface KubernetesUpstreamRequest {\n  method: NeedleHttpVerbs;\n  url: string;\n  payload:\n    | IDependencyGraphPayload\n    | ScanResultsPayload\n    | IWorkloadMetadataPayload\n    | IDeleteWorkloadPayload\n    | IClusterMetadataPayload\n    | IRuntimeDataPayload;\n  options: NeedleOptions;\n}\n\nconst upstreamUrl =\n  config.INTEGRATION_API || config.DEFAULT_KUBERNETES_UPSTREAM_URL;\n\nconst upstreamRequestVersion = '2023-02-10';\n\nlet httpAgent = new HttpAgent({\n  keepAlive: config.USE_KEEPALIVE,\n});\n\nlet httpsAgent = new HttpsAgent({\n  keepAlive: config.USE_KEEPALIVE,\n});\n\nfunction getAgent(u: string): HttpAgent {\n  const url = new URL(u);\n  return url.protocol === 'https:' ? httpsAgent : httpAgent;\n}\n\n// Async queue wraps around the call to retryRequest in order to limit\n// the number of requests in flight to kubernetes upstream at any one time.\nconst reqQueue: queueAsPromised<unknown> = fastq.promise(async function (\n  req: KubernetesUpstreamRequest,\n) {\n  return await retryRequest(req.method, req.url, req.payload, req.options);\n},\nconfig.REQUEST_QUEUE_LENGTH);\n\nconst upstreamRequestOptions = {\n  headers: {\n    Authorization: `token ${config.SERVICE_ACCOUNT_API_TOKEN}`,\n  },\n};\n\nfunction constructUpstreamRequestUrl(\n  requestPath: string,\n  queryParams?: Record<string, string>,\n): string {\n  const requestUrl = new URL(upstreamUrl);\n  requestUrl.pathname = path.join(requestUrl.pathname, requestPath);\n  requestUrl.searchParams.set('version', upstreamRequestVersion);\n  for (const key in queryParams) {\n    requestUrl.searchParams.set(key, queryParams[key]);\n  }\n  return requestUrl.toString();\n}\n\nexport async function sendDepGraph(\n  ...payloads: IDependencyGraphPayload[]\n): Promise<void> {\n  for (const payload of payloads) {\n    // Intentionally removing dependencyGraph as it would be too big to log\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { dependencyGraph, ...payloadWithoutDepGraph } = payload;\n    try {\n      const request: KubernetesUpstreamRequest = {\n        method: 'post',\n        url: constructUpstreamRequestUrl('/api/v1/dependency-graph'),\n        payload,\n        options: upstreamRequestOptions,\n      };\n\n      const { response, attempt } = await reqQueue.push(request);\n      if (!isSuccessStatusCode(response.statusCode)) {\n        throw new Error(`${response.statusCode} ${response.statusMessage}`);\n      } else {\n        logger.info(\n          { payload: payloadWithoutDepGraph, attempt },\n          'dependency graph sent upstream successfully',\n        );\n      }\n    } catch (error) {\n      logger.error(\n        { error, payload: payloadWithoutDepGraph },\n        'could not send the dependency scan result upstream',\n      );\n    }\n  }\n}\n\nexport async function sendScanResults(\n  payloads: ScanResultsPayload[],\n): Promise<boolean> {\n  for (const payload of payloads) {\n    // Intentionally removing scan results as they would be too big to log\n    const payloadWithoutScanResults = { ...payload, scanResults: undefined };\n    try {\n      const request: KubernetesUpstreamRequest = {\n        method: 'post',\n        url: constructUpstreamRequestUrl('/api/v1/scan-results'),\n        payload,\n        options: upstreamRequestOptions,\n      };\n\n      const { response, attempt } = await reqQueue.push(request);\n      if (!isSuccessStatusCode(response.statusCode)) {\n        throw new Error(`${response.statusCode} ${response.statusMessage}`);\n      } else {\n        logger.info(\n          { payload: payloadWithoutScanResults, attempt },\n          'scan results sent upstream successfully',\n        );\n      }\n    } catch (error) {\n      logger.error(\n        { error, payload: payloadWithoutScanResults },\n        'could not send the scan results upstream',\n      );\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport async function sendWorkloadMetadata(\n  payload: IWorkloadMetadataPayload,\n): Promise<void> {\n  try {\n    logger.info(\n      { workloadLocator: payload.workloadLocator },\n      'attempting to send workload metadata upstream',\n    );\n\n    const request: KubernetesUpstreamRequest = {\n      method: 'post',\n      url: constructUpstreamRequestUrl('/api/v1/workload'),\n      payload,\n      options: upstreamRequestOptions,\n    };\n\n    const { response, attempt } = await reqQueue.push(request);\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    } else {\n      logger.info(\n        { workloadLocator: payload.workloadLocator, attempt },\n        'workload metadata sent upstream successfully',\n      );\n    }\n  } catch (error) {\n    logger.error(\n      { error, workloadLocator: payload.workloadLocator },\n      'could not send workload metadata upstream',\n    );\n  }\n}\n\nexport async function sendWorkloadEventsPolicy(\n  payload: IWorkloadEventsPolicyPayload,\n): Promise<void> {\n  try {\n    logger.info(\n      {\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n      },\n      'attempting to send workload auto-import policy',\n    );\n\n    const { response, attempt } = await retryRequest(\n      'post',\n      constructUpstreamRequestUrl('/api/v1/policy'),\n      payload,\n      upstreamRequestOptions,\n    );\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    }\n\n    logger.info(\n      {\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n        attempt,\n      },\n      'workload auto-import policy sent upstream successfully',\n    );\n  } catch (error) {\n    logger.error(\n      {\n        error,\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n      },\n      'could not send workload auto-import policy',\n    );\n  }\n}\n\nexport async function deleteWorkload(\n  payload: IDeleteWorkloadPayload,\n): Promise<void> {\n  try {\n    const { workloadLocator, agentId } = payload;\n    const { userLocator, cluster, namespace, type, name } = workloadLocator;\n    const queryParams: Record<string, string> = {\n      userLocator,\n      cluster,\n      namespace,\n      type,\n      name,\n      agentId,\n    };\n    const request: KubernetesUpstreamRequest = {\n      method: 'delete',\n      url: constructUpstreamRequestUrl('api/v1/workload', queryParams),\n      payload,\n      options: upstreamRequestOptions,\n    };\n\n    const { response, attempt } = await reqQueue.push(request);\n    // TODO: Remove this check, the upstream no longer returns 404 in such cases\n    if (response.statusCode === 404) {\n      logger.info(\n        { payload },\n        'attempted to delete a workload the Upstream service could not find',\n      );\n      return;\n    }\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    } else {\n      logger.info(\n        { workloadLocator: payload.workloadLocator, attempt },\n        'workload deleted successfully',\n      );\n    }\n  } catch (error) {\n    logger.error(\n      { error, payload },\n      'could not send delete a workload from the upstream',\n    );\n  }\n}\n\nfunction isSuccessStatusCode(statusCode: number | undefined): boolean {\n  return statusCode !== undefined && statusCode > 100 && statusCode < 400;\n}\n\nexport async function retryRequest(\n  verb: NeedleHttpVerbs,\n  url: string,\n  payload: object,\n  reqOptions: NeedleOptions = {},\n): Promise<IResponseWithAttempts> {\n  const retry = {\n    attempts: 3,\n    rateLimitIntervalSeconds: 60,\n    transientIntervalSeconds: 2,\n  };\n  const options: NeedleOptions = {\n    json: true,\n    compressed: true,\n    agent: getAgent(url),\n    ...reqOptions,\n  };\n\n  if (config.HTTP_PROXY || config.HTTPS_PROXY) {\n    options.agent = getProxyAgent(config, url);\n  }\n\n  let response: NeedleResponse | undefined;\n  let attempt: number;\n\n  for (attempt = 1; attempt <= retry.attempts; attempt++) {\n    const stillHaveRetries = attempt + 1 <= retry.attempts;\n    let statusCode: number | undefined = undefined;\n\n    try {\n      response = await needle(verb, url, payload, options);\n      statusCode = response.statusCode;\n\n      if (\n        ![429, 502, 503, 504].includes(response.statusCode || 0) ||\n        !stillHaveRetries\n      ) {\n        break;\n      }\n    } catch (err: any) {\n      if (!shouldRetryRequest(err, stillHaveRetries)) {\n        throw err;\n      }\n    }\n\n    if (statusCode === 429) {\n      await sleep(retry.rateLimitIntervalSeconds * 1000);\n    } else {\n      await sleep(retry.transientIntervalSeconds * 1000);\n    }\n  }\n\n  if (response === undefined) {\n    throw new Error('failed sending a request upstream');\n  }\n\n  return { response, attempt };\n}\n\nfunction shouldRetryRequest(\n  err: IRequestError,\n  stillHaveRetries: boolean,\n): boolean {\n  const networkErrorMessages: string[] = [\n    'socket hang up',\n    'Client network socket disconnected before secure TLS connection was established',\n    'write ECONNRESET', // May happen due to Keep-Alive race condition - https://code-examples.net/en/q/28a8069\n  ];\n\n  if (!stillHaveRetries) {\n    return false;\n  }\n\n  if (err.code === 'ECONNRESET' && networkErrorMessages.includes(err.message)) {\n    return true;\n  }\n\n  if (err.code === 'EAI_AGAIN') {\n    return true;\n  }\n\n  return false;\n}\n\nexport async function sendClusterMetadata(): Promise<void> {\n  const payload: IClusterMetadataPayload = {\n    userLocator: config.INTEGRATION_ID,\n    cluster: config.CLUSTER_NAME,\n    agentId: config.AGENT_ID,\n    version: config.MONITOR_VERSION,\n    namespace: config.NAMESPACE,\n  };\n\n  try {\n    logger.info(\n      {\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n      },\n      'attempting to send cluster metadata',\n    );\n\n    const request: KubernetesUpstreamRequest = {\n      method: 'post',\n      url: constructUpstreamRequestUrl('/api/v1/cluster'),\n      payload,\n      options: upstreamRequestOptions,\n    };\n\n    const { response, attempt } = await reqQueue.push(request);\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    }\n\n    logger.info(\n      {\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n        attempt,\n      },\n      'cluster metadata sent upstream successfully',\n    );\n  } catch (error) {\n    logger.error(\n      {\n        error,\n        userLocator: payload.userLocator,\n        cluster: payload.cluster,\n        agentId: payload.agentId,\n      },\n      'could not send cluster metadata',\n    );\n  }\n}\n\nexport async function sendRuntimeData(\n  payload: IRuntimeDataPayload,\n): Promise<void> {\n  const logContext = {\n    userLocator: payload.target.userLocator,\n    cluster: payload.target.cluster,\n    agentId: payload.target.agentId,\n    identity: payload.identity,\n  };\n\n  try {\n    logger.info(logContext, 'attempting to send runtime data');\n\n    const request: KubernetesUpstreamRequest = {\n      method: 'post',\n      url: constructUpstreamRequestUrl('/api/v1/runtime-results'),\n      payload,\n      options: upstreamRequestOptions,\n    };\n\n    const { response, attempt } = await reqQueue.push(request);\n\n    if (!isSuccessStatusCode(response.statusCode)) {\n      throw new Error(`${response.statusCode} ${response.statusMessage}`);\n    }\n\n    logger.info(\n      {\n        attempt,\n        ...logContext,\n      },\n      'runtime data sent upstream successfully',\n    );\n  } catch (error) {\n    logger.error(\n      {\n        error,\n        ...logContext,\n      },\n      'could not send runtime data',\n    );\n  }\n}\n", "describe('extractNamespaceName()', () => {\n  const apiToken = '46766a0a-ed0b-4e91-84c8-ea1c827f2a73';\n  beforeEach(() => {\n    jest.resetModules();\n    process.env.SNYK_SYSDIG_ENDPOINT = 'https://api/v1/images/';\n    process.env.SNYK_SYSDIG_TOKEN = '1432gtrhtrw32raf';\n    process.env.SNYK_SERVICE_ACCOUNT_API_TOKEN = apiToken;\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n    delete process.env.SNYK_CLUSTER_NAME;\n    delete process.env.SNYK_SYSDIG_ENDPOINT;\n  });\n\n  test.each([\n    [\n      'cluster name with /',\n      {\n        clusterNameEnvVar: 'cluster/name',\n        wantClusterName: 'clustername',\n        consoleLogCalledTimes: 1,\n      },\n    ],\n    [\n      'cluster name with  more than one /',\n      {\n        clusterNameEnvVar: 'cluster/name/slash',\n        wantClusterName: 'clusternameslash',\n        consoleLogCalledTimes: 1,\n      },\n    ],\n    [\n      'cluster name without /',\n      {\n        clusterNameEnvVar: 'normal cluster name',\n        wantClusterName: 'normal cluster name',\n        consoleLogCalledTimes: 0,\n      },\n    ],\n    [\n      'no cluster name set',\n      {\n        clusterNameEnvVar: '',\n        wantClusterName: 'Default cluster',\n        consoleLogCalledTimes: 0,\n      },\n    ],\n  ])(\n    '%s',\n    (\n      _testCaseName,\n      { clusterNameEnvVar, wantClusterName, consoleLogCalledTimes },\n    ) => {\n      if (clusterNameEnvVar) {\n        process.env.SNYK_CLUSTER_NAME = clusterNameEnvVar;\n      }\n\n      const consoleSpy = jest.spyOn(console, 'log').mockReturnValue();\n\n      const { config } = require('../../src/common/config');\n      expect(config.CLUSTER_NAME).toBe(wantClusterName);\n      expect(consoleSpy).toHaveBeenCalledTimes(consoleLogCalledTimes);\n\n      delete process.env.SNYK_SYSDIG_TOKEN;\n    },\n  );\n\n  it('loads the expected configuration values', () => {\n    const { config } = require('../../src/common/config');\n    expect(config.AGENT_ID).toEqual(expect.any(String));\n    expect(config.INTEGRATION_ID).toEqual(expect.any(String));\n    expect(config.SERVICE_ACCOUNT_API_TOKEN).toEqual(apiToken);\n    expect(config.CLUSTER_NAME).toEqual('Default cluster');\n    expect(config.IMAGE_STORAGE_ROOT).toEqual('/var/tmp');\n    expect(config.EXCLUDED_NAMESPACES).toBeNull();\n    expect(config.HTTPS_PROXY).toBeUndefined();\n    expect(config.HTTP_PROXY).toBeUndefined();\n    expect(config.NO_PROXY).toBeUndefined();\n    expect(config.USE_KEEPALIVE).toEqual(true);\n    expect(config.SKIP_K8S_JOBS).toEqual(false);\n    expect(config.WORKERS_COUNT).toEqual(5);\n    expect(config.SKOPEO_COMPRESSION_LEVEL).toEqual(6);\n    expect(config.SYSDIG_ENDPOINT).toEqual('https://api/v1/images/');\n    expect(config.SYSDIG_TOKEN).toEqual('1432gtrhtrw32raf');\n  });\n\n  it('cannot load sysdig API and JWT values if it is not enabled', () => {\n    delete process.env.SNYK_SYSDIG_ENDPOINT;\n    delete process.env.SNYK_SYSDIG_TOKEN;\n    const { config } = require('../../src/common/config');\n    expect(config.SYSDIG_ENDPOINT).toBeUndefined();\n    expect(config.SYSDIG_TOKEN).toBeUndefined();\n  });\n});\n", "apiVersion: charts.helm.k8s.io/v1alpha1\nkind: SnykMonitor\nmetadata:\n  name: snyk-monitor\n  namespace: marketplace\nspec:\n  integrationApi: https://api.dev.snyk.io/v2/kubernetes-upstream\n  temporaryStorageSize: 20Gi\n  clusterName: \"\"\n  pvc:\n    enabled: true\n    create: true\n", "apiVersion: charts.helm.k8s.io/v1alpha1\nkind: SnykMonitor\nmetadata:\n  name: snyk-monitor\n  namespace: snyk-monitor\nspec:\n  integrationApi: https://api.dev.snyk.io/v2/kubernetes-upstream\n  temporaryStorageSize: 20Gi\n  clusterName: \"\"\n  pvc:\n    enabled: true\n    create: true\n", "import { platform } from 'os';\nimport { existsSync, chmodSync } from 'fs';\n\nimport { IDeployer, IDeployOptions, IImageOptions } from './types';\nimport * as kubectl from '../../helpers/kubectl';\nimport { execWrapper as exec } from '../../helpers/exec';\n\nconst helmVersion = '3.0.0';\nconst helmPath = './helm';\nconst helmChartPath = './snyk-monitor';\n\nexport const helmWithProxyDeployer: IDeployer = {\n  deploy: deployKubernetesMonitor,\n};\n\nasync function deployKubernetesMonitor(\n  imageOptions: IImageOptions,\n  deployOptions: IDeployOptions,\n): Promise<void> {\n  if (!existsSync(helmPath)) {\n    await downloadHelm();\n  }\n\n  await kubectl.applyK8sYaml('test/fixtures/proxying/tinyproxy-service.yaml');\n  await kubectl.applyK8sYaml(\n    'test/fixtures/proxying/tinyproxy-deployment.yaml',\n  );\n  await kubectl.waitForDeployment('forwarding-proxy', 'snyk-monitor');\n\n  const imageNameAndTag = imageOptions.nameAndTag.split(':');\n  const imageName = imageNameAndTag[0];\n  const imageTag = imageNameAndTag[1];\n  const imagePullPolicy = imageOptions.pullPolicy;\n\n  await exec(\n    `${helmPath} upgrade --install snyk-monitor ${helmChartPath} --namespace snyk-monitor ` +\n      `--set image.repository=${imageName} ` +\n      `--set image.tag=${imageTag} ` +\n      `--set image.pullPolicy=${imagePullPolicy} ` +\n      '--set integrationApi=https://api.dev.snyk.io/v2/kubernetes-upstream ' +\n      `--set clusterName=${deployOptions.clusterName} ` +\n      '--set https_proxy=http://forwarding-proxy:8080',\n  );\n  console.log(\n    `Deployed ${imageOptions.nameAndTag} with pull policy ${imageOptions.pullPolicy}`,\n  );\n}\n\nasync function downloadHelm(): Promise<void> {\n  console.log(`Downloading Helm ${helmVersion}...`);\n  const os = platform();\n  await exec(\n    `curl https://get.helm.sh/helm-v${helmVersion}-${os}-amd64.tar.gz | tar xfzO - ${os}-amd64/helm > ${helmPath}`,\n  );\n  chmodSync(helmPath, 0o755); // rwxr-xr-x\n  console.log('Downloaded Helm');\n}\n", "import { platform } from 'os';\nimport { existsSync, chmodSync } from 'fs';\n\nimport { IDeployer, IDeployOptions, IImageOptions } from './types';\nimport { execWrapper as exec } from '../../helpers/exec';\n\nconst helmVersion = '3.0.0';\nconst helmPath = './helm';\nconst helmChartPath = './snyk-monitor';\n\nexport const helmDeployer: IDeployer = {\n  deploy: deployKubernetesMonitor,\n};\n\nasync function deployKubernetesMonitor(\n  imageOptions: IImageOptions,\n  deployOptions: IDeployOptions,\n): Promise<void> {\n  if (!existsSync(helmPath)) {\n    await downloadHelm();\n  }\n\n  const imageNameAndTag = imageOptions.nameAndTag.split(':');\n  const imageName = imageNameAndTag[0];\n  const imageTag = imageNameAndTag[1];\n  const imagePullPolicy = imageOptions.pullPolicy;\n\n  await exec(\n    `${helmPath} upgrade --install snyk-monitor ${helmChartPath} --namespace snyk-monitor ` +\n      `--set image.repository=${imageName} ` +\n      `--set image.tag=${imageTag} ` +\n      `--set image.pullPolicy=${imagePullPolicy} ` +\n      '--set integrationApi=https://api.dev.snyk.io/v2/kubernetes-upstream ' +\n      `--set clusterName=${deployOptions.clusterName} ` +\n      '--set nodeSelector.\"kubernetes\\\\.io/os\"=linux ' +\n      '--set pvc.enabled=true ' +\n      '--set pvc.create=true ' +\n      '--set log_level=\"INFO\" ' +\n      '--set rbac.serviceAccount.annotations.\"foo\"=\"bar\" ' +\n      '--set volumes.projected.serviceAccountToken=true ' +\n      '--set securityContext.fsGroup=65534 ' +\n      '--set skopeo.compression.level=1 ' +\n      '--set workers.count=5 ' +\n      '--set sysdig.enabled=true ',\n  );\n  console.log(\n    `Deployed ${imageOptions.nameAndTag} with pull policy ${imageOptions.pullPolicy}`,\n  );\n}\n\nasync function downloadHelm(): Promise<void> {\n  console.log(`Downloading Helm ${helmVersion}...`);\n  const os = platform();\n  await exec(\n    `curl https://get.helm.sh/helm-v${helmVersion}-${os}-amd64.tar.gz | tar xfzO - ${os}-amd64/helm > ${helmPath}`,\n  );\n  chmodSync(helmPath, 0o755); // rwxr-xr-x\n  console.log('Downloaded Helm');\n}\n", "import { readFileSync, writeFileSync } from 'fs';\nimport { parse, stringify } from 'yaml';\n\nimport * as kubectl from '../../helpers/kubectl';\nimport { IDeployer, IImageOptions, IDeployOptions } from './types';\n\nexport const yamlDeployer: IDeployer = {\n  deploy: deployKubernetesMonitor,\n};\n\nasync function deployKubernetesMonitor(\n  imageOptions: IImageOptions,\n  deployOptions: IDeployOptions,\n): Promise<void> {\n  const testYaml = 'snyk-monitor-test-deployment.yaml';\n  createTestYamlDeployment(\n    testYaml,\n    imageOptions.nameAndTag,\n    imageOptions.pullPolicy,\n    deployOptions.clusterName,\n  );\n\n  await kubectl.applyK8sYaml('./snyk-monitor-cluster-permissions.yaml');\n  await kubectl.applyK8sYaml('./snyk-monitor-test-deployment.yaml');\n}\n\nfunction createTestYamlDeployment(\n  newYamlPath: string,\n  imageNameAndTag: string,\n  imagePullPolicy: string,\n  clusterName: string,\n): void {\n  console.log('Creating YAML snyk-monitor deployment...');\n  const originalDeploymentYaml = readFileSync(\n    './snyk-monitor-deployment.yaml',\n    'utf8',\n  );\n  const deployment = parse(originalDeploymentYaml);\n\n  const container = deployment.spec.template.spec.containers.find(\n    (container) => container.name === 'snyk-monitor',\n  );\n  container.image = imageNameAndTag;\n  container.imagePullPolicy = imagePullPolicy;\n\n  // Inject the baseUrl of kubernetes-upstream that snyk-monitor container use to send metadata\n  const envVar = container.env.find(\n    (env) => env.name === 'SNYK_INTEGRATION_API',\n  );\n  envVar.value = 'https://api.dev.snyk.io/v2/kubernetes-upstream';\n  delete envVar.valueFrom;\n\n  if (clusterName) {\n    const clusterNameEnvVar = container.env.find(\n      (env) => env.name === 'SNYK_CLUSTER_NAME',\n    );\n    clusterNameEnvVar.value = clusterName;\n    delete clusterNameEnvVar.valueFrom;\n  }\n\n  writeFileSync(newYamlPath, stringify(deployment));\n  console.log('Created YAML snyk-monitor deployment');\n}\n", "import * as fs from 'fs';\nimport { randomUUID } from 'crypto';\nimport sleep from 'sleep-promise';\n\nimport platforms, { getKubernetesVersionForPlatform } from './platforms';\nimport deployers from './deployers';\nimport { IDeployOptions, IImageOptions } from './deployers/types';\nimport * as kubectl from '../helpers/kubectl';\nimport { execWrapper as exec } from '../helpers/exec';\n\nconst testPlatform = process.env['TEST_PLATFORM'] || 'kind';\nconst createCluster = process.env['CREATE_CLUSTER'] === 'true';\nconst deploymentType = process.env['DEPLOYMENT_TYPE'] || 'YAML';\n\nfunction getIntegrationId(): string {\n  const integrationId = randomUUID();\n  console.log(`Generated new integration ID ${integrationId}`);\n  return integrationId;\n}\n\nfunction getClusterName(): string {\n  const clusterName = `cluster_${randomUUID()}`;\n  console.log(`Generated new Cluster Name ${clusterName}`);\n  return clusterName;\n}\n\nfunction getServiceAccountApiToken(): string {\n  const serviceAccountApiToken = randomUUID();\n  console.log(\n    `Generated new service account API token ${serviceAccountApiToken}`,\n  );\n  return serviceAccountApiToken;\n}\n\nfunction getEnvVariableOrDefault(\n  envVarName: string,\n  defaultValue: string,\n): string {\n  const value = process.env[envVarName];\n  return value === undefined || value === '' ? defaultValue : value;\n}\n\nexport function snykMonitorNamespace(): string {\n  let namespace = 'snyk-monitor';\n  if (testPlatform === 'kindolm') {\n    namespace = 'marketplace';\n  }\n\n  return namespace;\n}\n\nexport async function removeMonitor(): Promise<void> {\n  // Credentials may have expired on certain platforms (OpenShift 4), try to regenerate them.\n  await platforms[testPlatform].config().catch(() => undefined);\n  await dumpLogs().catch(() => undefined);\n\n  try {\n    if (createCluster) {\n      await platforms[testPlatform].delete();\n    } else {\n      await platforms[testPlatform].clean();\n    }\n  } catch (error: any) {\n    console.log(`Could not remove the Kubernetes-Monitor: ${error.message}`);\n  }\n}\n\nexport async function removeLocalContainerRegistry(): Promise<void> {\n  try {\n    await exec('docker rm kind-registry --force');\n  } catch (error: any) {\n    console.log(\n      `Could not remove container registry, it probably did not exist: ${error.message}`,\n    );\n  }\n}\n\nexport async function removeUnusedKindNetwork(): Promise<void> {\n  try {\n    await exec('docker network rm kind');\n  } catch (error: any) {\n    console.log(`Could not remove \"kind\" network: ${error.message}`);\n  }\n}\n\nasync function createEnvironment(): Promise<void> {\n  await kubectl.createNamespace('services');\n  // Small hack to prevent timing problems in CircleCI...\n  // TODO: should be replaced by actively waiting for the namespace to be created\n  await sleep(5000);\n}\n\nasync function predeploy(\n  integrationId: string,\n  serviceAccountApiToken: string,\n  namespace: string,\n): Promise<void> {\n  try {\n    const secretName = 'snyk-monitor';\n    console.log(`Creating namespace ${namespace} and secret ${secretName}`);\n\n    try {\n      await kubectl.createNamespace(namespace);\n    } catch (error) {\n      console.log(`Namespace ${namespace} already exist`);\n    }\n    const gcrDockercfg = process.env['PRIVATE_REGISTRIES_DOCKERCFG'] || '{}';\n    await kubectl.createSecret(secretName, namespace, {\n      'dockercfg.json': gcrDockercfg,\n      integrationId,\n      serviceAccountApiToken,\n    });\n    await createRegistriesConfigMap(namespace);\n    console.log(`Namespace ${namespace} and secret ${secretName} created`);\n  } catch (error) {\n    console.log(\n      'Could not create namespace and secret, they probably already exist',\n    );\n  }\n}\n\n/** This is used in order to avoid Docker Hub rate limiting on our integration tests. */\nasync function createSecretForDockerHubAccess(): Promise<void> {\n  const secretName = 'docker-io';\n  const secretsKeyPrefix = '--';\n  const secretType = 'docker-registry';\n  await kubectl.createSecret(\n    secretName,\n    'services',\n    {\n      'docker-server': 'https://docker.io',\n      'docker-username': getEnvVariableOrDefault('DOCKER_HUB_RO_USERNAME', ''),\n      'docker-email': 'runtime@snyk.io',\n      'docker-password': getEnvVariableOrDefault('DOCKER_HUB_RO_PASSWORD', ''),\n    },\n    secretsKeyPrefix,\n    secretType,\n  );\n}\n\nasync function createSecretForGcrIoAccess(): Promise<void> {\n  const gcrSecretName = 'gcr-io';\n  const gcrKubectlSecretsKeyPrefix = '--';\n  const gcrSecretType = 'docker-registry';\n  const gcrToken = getEnvVariableOrDefault('GCR_IO_SERVICE_ACCOUNT', '{}');\n  await kubectl.createSecret(\n    gcrSecretName,\n    'services',\n    {\n      'docker-server': 'https://gcr.io',\n      'docker-username': '_json_key',\n      'docker-email': 'egg@snyk.io',\n      'docker-password': gcrToken,\n    },\n    gcrKubectlSecretsKeyPrefix,\n    gcrSecretType,\n  );\n}\n\nasync function createRegistriesConfigMap(namespace): Promise<void> {\n  await kubectl.createConfigMap(\n    'snyk-monitor-registries-conf',\n    namespace,\n    './test/fixtures/insecure-registries/registries.conf',\n  );\n}\n\nexport async function deployMonitor(): Promise<{\n  integrationId: string;\n  clusterName: string;\n}> {\n  console.log('Begin deploying the snyk-monitor...');\n  const namespace = snykMonitorNamespace();\n  try {\n    await platforms[testPlatform].validateRequiredEnvironment();\n\n    const imageNameAndTag = getEnvVariableOrDefault(\n      'KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG',\n      // the default, determined by ./script/build-image.sh\n      'snyk/kubernetes-monitor:local',\n    );\n\n    console.log(\n      `platform chosen is ${testPlatform}, createCluster===${createCluster}`,\n    );\n\n    const kubernetesVersion = getKubernetesVersionForPlatform(testPlatform);\n    await kubectl.downloadKubectl(kubernetesVersion);\n\n    await platforms[testPlatform].setupTester();\n    if (createCluster) {\n      await platforms[testPlatform].create(kubernetesVersion);\n      await platforms[testPlatform].config();\n    } else {\n      await platforms[testPlatform].config();\n      await platforms[testPlatform].clean();\n    }\n    const remoteImageName = await platforms[testPlatform].loadImage(\n      imageNameAndTag,\n    );\n    await createEnvironment();\n    await createSecretForGcrIoAccess();\n    await createSecretForDockerHubAccess();\n\n    const integrationId = getIntegrationId();\n    const serviceAccountApiToken = getServiceAccountApiToken();\n    await predeploy(integrationId, serviceAccountApiToken, namespace);\n\n    // TODO: hack, rewrite this\n    const imagePullPolicy =\n      testPlatform === 'kind' || testPlatform === 'kindolm'\n        ? 'Never'\n        : 'Always';\n    const deploymentImageOptions: IImageOptions = {\n      nameAndTag: remoteImageName,\n      pullPolicy: imagePullPolicy,\n    };\n    const clusterName = getClusterName();\n    const deploymentOptions: IDeployOptions = {\n      clusterName: clusterName,\n    };\n\n    await deployers[deploymentType].deploy(\n      deploymentImageOptions,\n      deploymentOptions,\n    );\n    for (let attempt = 0; attempt < 180; attempt++) {\n      try {\n        await exec(\n          `./kubectl get deployment.apps/snyk-monitor -n ${namespace}`,\n        );\n        break;\n      } catch {\n        await sleep(1000);\n      }\n    }\n\n    console.log(\n      `Deployed the snyk-monitor with integration ID: ${integrationId}, in cluster name: ${clusterName}`,\n    );\n    return { integrationId, clusterName };\n  } catch (err) {\n    console.error(err);\n    try {\n      await removeMonitor();\n    } catch (error) {\n      // ignore cleanup errors\n    } finally {\n      // ... but make sure the test suite doesn't proceed if the setup failed\n      process.exit(-1);\n    }\n  }\n}\n\nasync function dumpLogs(): Promise<void> {\n  const logDir = `/tmp/logs/test/integration/${testPlatform}`;\n  if (!fs.existsSync(logDir)) {\n    console.log('not dumping logs because', logDir, 'does not exist');\n    return;\n  }\n\n  const podNames = await kubectl.getPodNames('snyk-monitor').catch(() => []);\n  const snykMonitorPod = podNames.find((name) =>\n    name.startsWith('snyk-monitor'),\n  );\n  if (snykMonitorPod === undefined) {\n    console.log('not dumping logs because snyk-monitor pod does not exist');\n    return;\n  }\n\n  const logs = await kubectl.getPodLogs(snykMonitorPod, 'snyk-monitor');\n  const logPath = `${logDir}/kubernetes-monitor.log`;\n  console.log('dumping logs to', logPath);\n  fs.writeFileSync(logPath, logs);\n}\n", "import nock from 'nock';\n\nimport { config } from '../../../src/common/config';\nimport { scrapeData } from '../../../src/data-scraper';\nimport * as transmitterTypes from '../../../src/transmitter/types';\n\ndescribe('dataScraper()', () => {\n  beforeAll(() => {\n    config.SYSDIG_ENDPOINT = 'https://sysdig';\n    config.SYSDIG_TOKEN = 'token123';\n  });\n\n  afterAll(() => {\n    delete config.SYSDIG_ENDPOINT;\n    delete config.SYSDIG_TOKEN;\n  });\n\n  it('correctly sends data to kubernetes-upstream', async () => {\n    const bodyWithToken = {\n      data: [\n        {\n          imageID: 'something',\n          namespace: 'sysdig',\n          workloadName: 'workload',\n          workloadKind: 'Deployment',\n          container: 'box',\n          packages: [],\n        },\n      ],\n      page: {\n        returned: 10,\n        next: 'xxx',\n      },\n    };\n    const bodyNoToken = {\n      data: [\n        {\n          imageID: 'something',\n          namespace: 'sysdig',\n          workloadName: 'workload',\n          workloadKind: 'Deployment',\n          container: 'box',\n          packages: [],\n        },\n      ],\n      page: {\n        returned: 10,\n        next: '',\n      },\n    };\n    const expectedHeader = 'Bearer token123';\n    nock('https://sysdig', { reqheaders: { authorization: expectedHeader } })\n      .get('/v1/runtimeimages?limit=10&cursor=')\n      .times(1)\n      .reply(200, bodyWithToken);\n\n    nock('https://sysdig', { reqheaders: { authorization: expectedHeader } })\n      .get('/v1/runtimeimages?limit=10&cursor=xxx')\n      .times(1)\n      .reply(200, bodyNoToken);\n\n    nock('https://api.snyk.io')\n      .post('/v2/kubernetes-upstream/api/v1/runtime-results?version=2023-02-10')\n      .times(1)\n      .reply(200, (uri, requestBody: transmitterTypes.IRuntimeDataPayload) => {\n        expect(requestBody).toEqual<transmitterTypes.IRuntimeDataPayload>({\n          identity: {\n            type: 'sysdig',\n          },\n          target: {\n            userLocator: expect.any(String),\n            cluster: 'Default cluster',\n            agentId: expect.any(String),\n          },\n          facts: [\n            {\n              type: 'loadedPackages',\n              data: bodyWithToken.data,\n            },\n          ],\n        });\n      })\n      .post('/v2/kubernetes-upstream/api/v1/runtime-results?version=2023-02-10')\n      .times(1)\n      .reply(200, (uri, requestBody: transmitterTypes.IRuntimeDataPayload) => {\n        expect(requestBody).toEqual<transmitterTypes.IRuntimeDataPayload>({\n          identity: {\n            type: 'sysdig',\n          },\n          target: {\n            userLocator: expect.any(String),\n            cluster: 'Default cluster',\n            agentId: expect.any(String),\n          },\n          facts: [\n            {\n              type: 'loadedPackages',\n              data: bodyNoToken.data,\n            },\n          ],\n        });\n      });\n\n    await scrapeData();\n\n    try {\n      expect(nock.isDone()).toBeTruthy();\n    } catch (err) {\n      console.error(`nock pending mocks: ${nock.pendingMocks()}`);\n      throw err;\n    }\n  });\n});\n"], "filenames": [".circleci/config.yml", ".circleci/config/jobs/operator_upgrade_tests.yml", "README.md", "config.default.json", "scripts/circleci-jobs/deploy_to_dev.sh", "scripts/local-testing.sh", "snyk-monitor-deployment.yaml", "snyk-operator-certified/README.md", "snyk-operator-certified/bundle/manifests/snyk-monitor.clusterserviceversion.yaml", "snyk-operator-certified/config/manifests/bases/snyk-monitor.clusterserviceversion.yaml", "snyk-operator-certified/helm-charts/snyk-monitor/templates/deployment.yaml", "snyk-operator/certified-operator/README.md", "snyk-operator/deploy/olm-catalog/snyk-operator/0.0.0/snyk-operator.v0.0.0.clusterserviceversion.yaml", "src/common/config.ts", "src/common/types.ts", "src/transmitter/index.ts", "test/common/config.spec.ts", "test/fixtures/operator/custom-resource-k8s.yaml", "test/fixtures/operator/custom-resource.yaml", "test/setup/deployers/helm-with-proxy.ts", "test/setup/deployers/helm.ts", "test/setup/deployers/yaml.ts", "test/setup/index.ts", "test/unit/data-scraper/scrape-data.spec.ts"], "buggy_code_start_loc": [522, 123, 13, 22, 23, 17, 45, 44, 150, 132, 97, 43, 190, 41, 21, 23, 1, 7, 7, 40, 33, 50, 24, 62], "buggy_code_end_loc": [523, 124, 14, 23, 24, 22, 45, 45, 155, 137, 97, 44, 195, 41, 21, 398, 80, 8, 8, 41, 34, 51, 197, 104], "fixing_code_start_loc": [522, 123, 13, 22, 23, 18, 46, 44, 150, 132, 98, 43, 190, 42, 22, 24, 2, 7, 7, 40, 33, 50, 25, 62], "fixing_code_end_loc": [524, 125, 14, 24, 24, 27, 51, 45, 155, 137, 103, 44, 195, 43, 23, 436, 83, 8, 8, 41, 34, 51, 208, 112], "type": "CWE-287", "message": "This vulnerability in the Snyk Kubernetes Monitor can result in irrelevant data being posted to a Snyk Organization, which could in turn obfuscate other, relevant, security issues. It does not expose the user of the integration to any direct security risk and no user data can be leaked. To exploit the vulnerability the attacker does not need to be authenticated to Snyk but does need to know the target's Integration ID (which may or may not be the same as the Organization ID, although this is an unpredictable UUID in either case).", "other": {"cve": {"id": "CVE-2023-1065", "sourceIdentifier": "report@snyk.io", "published": "2023-02-28T19:15:16.727", "lastModified": "2023-03-10T04:58:38.103", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This vulnerability in the Snyk Kubernetes Monitor can result in irrelevant data being posted to a Snyk Organization, which could in turn obfuscate other, relevant, security issues. It does not expose the user of the integration to any direct security risk and no user data can be leaked. To exploit the vulnerability the attacker does not need to be authenticated to Snyk but does need to know the target's Integration ID (which may or may not be the same as the Organization ID, although this is an unpredictable UUID in either case)."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}, {"source": "report@snyk.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snyk:kubernetes_monitor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "B1E859F1-7DBE-4E50-BE04-05D68CD9337B"}]}]}], "references": [{"url": "https://github.com/snyk/kubernetes-monitor", "source": "report@snyk.io", "tags": ["Product"]}, {"url": "https://github.com/snyk/kubernetes-monitor/commit/5b9a7821680bbfb6c4a900ab05d898ce2b2cc157", "source": "report@snyk.io", "tags": ["Patch"]}, {"url": "https://github.com/snyk/kubernetes-monitor/pull/1275", "source": "report@snyk.io", "tags": ["Patch"]}, {"url": "https://snyk.io/blog/api-auth-vuln-snyk-kubernetes-cve-2023-1065/", "source": "report@snyk.io", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/snyk/kubernetes-monitor/commit/5b9a7821680bbfb6c4a900ab05d898ce2b2cc157"}}