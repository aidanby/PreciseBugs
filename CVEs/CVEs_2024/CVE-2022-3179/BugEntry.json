{"buggy_code": ["![Rdiffweb Banner](https://gitlab.com/ikus-soft/rdiffweb/-/raw/master/doc/_static/banner.png)\n\n<p align=\"center\">\n<strong>\n<a href=\"https://www.rdiffweb.org\">website</a>\n\u2022 <a href=\"https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/\">docs</a>\n\u2022 <a href=\"https://groups.google.com/d/forum/rdiffweb\">community</a>\n\u2022 <a href=\"https://rdiffweb-demo.ikus-soft.com/\">demo</a>\n</strong>\n</p>\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/ikus060/rdiffweb\"></a>\n<a href=\"https://gitlab.com/ikus-soft/rdiffweb/pipelines\"><img alt=\"Build\" src=\"https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Quality Gate Minarca Client\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=alert_status\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Coverage\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=coverage\"></a>\n</p>\n\n<h1 align=\"center\">\nWelcome to Rdiffweb\n</h1>\n\nRdiffweb is a web application that allows you to view repositories generated\nby [rdiff-backup](https://rdiff-backup.net/). The purpose of this\napplication is to ease the management of backups and quickly restore your data\nwith a rich and powerful web interface.\n\nRdiffweb is written in Python and is released as open source project under the \nGNU GENERAL PUBLIC LICENSE (GPL). All source code and documentation are\nCopyright Rdiffweb contributors.\n\nRdiffweb is actively developed by [IKUS Soft](https://www.ikus-soft.com/)\nsince November 2014.\n\nThe Rdiffweb source code is hosted on [Gitlab](https://gitlab.com/ikus-soft/rdiffweb)\nand mirrored to [Github](https://github.com/ikus060/rdiffweb).\n\nThe Rdiffweb website is https://rdiffweb.org/.\n\n## Features\n\nWith its rich web interface Rdiffweb provide a notable list of features:\n\n * Browse your backup\n * Restore single file or multiple files as an archived\n * Users authentication via local database and LDAP\n * Users authorization\n * Email notification when backup is not successful\n * Configurable repository encoding\n * Configurable retention period\n * Backup statistics visualization using graphs\n * SSH Keys management\n * Disk quota visualization\n * File and folder deletion\n\n## Demo\n\nIf you quickly want to check how Rdiffweb is behaving, you may try our demo server hosted on:\n\n[https://rdiffweb-demo.ikus-soft.com/](https://rdiffweb-demo.ikus-soft.com/)\n\nUse the following credential to login:\n\n * Username: admin\n * Password: admin123\n\n## Installation & Docker usage\n\nFor detailed installation steps, read the [Installation documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/installation.html).\n\n## Current Build Status\n\n[![Build Status](https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg)](https://gitlab.com/ikus-soft/rdiffweb/pipelines)\n\n## Download\n\nYou should read the [Documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/index.html) to properly install Rdiffweb in your environment.\n\n**Docker**\n\n    docker pull ikus060/rdiffweb\n    \n**Debian**\n\n    curl -L https://www.ikus-soft.com/archive/rdiffweb/public.key | apt-key add - \n    echo \"deb https://nexus.ikus-soft.com/repository/apt-release-bullseye/ bullseye main\" > /etc/apt/sources.list.d/rdiffweb.list\n    apt update\n    apt install rdiffweb\n\n**Pypi**\n\n    pip install rdiffweb\n\n## Support\n\n### Mailing list\n\nRdiffweb users should use the [Rdiffweb mailing list](https://groups.google.com/forum/#!forum/rdiffweb).\n\n### Bug Reports\n\nBug reports should be reported on the Rdiffweb Gitlab at https://gitlab.com/ikus-soft/rdiffweb/-/issues\n\n### Professional support\n\nProfessional support for Rdiffweb is available by contacting [IKUS Soft](https://www.ikus-soft.com/en/support/#form).\n\n# Changelog\n\n## 2.4.2 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session. [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174) #209\n* Avoid leakage of the stack trace in the default error page. [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3175) #210\n\n## 2.4.1 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add Clickjacking Defense [CVE-2022-3167](https://nvd.nist.gov/vuln/detail/CVE-2022-3167)\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n\n## 2.4.0 (2022-06-21)\n\nThis new release brings a lot of improvement since the last version, multiple bug fixes\nto make the application stable. A couple of new features to improve the overall\nusability and a new security feature to block a brute force attack.\n\n* Add RateLimit to login page and API to mitigate robots attacks #167\n* Send email notification only if `email-sender` option is defined to avoid raising exception in logs #176\n* Support file restore cancellation without leaving `rdiffweb-restore` process in `<defunct>` state #174\n* Replace `python-ldap` by `ldap3` a pure python implementation to avoid dependencies on `sasl` and `ldap` binaries #186\n* Reffactor core module to allow better extendability and reusability #183\n* Add support for Debian Bookworm #180\n* Add support for Ubuntu Impish #175\n* Add rdiff-backup version to administration view\n* Run unit test during Debian build package\n* Refresh repository list automatically when required #188 #189\n* Fix error 500 displayed in status page #191\n* Improve repository browsing speed by minimizing the number of I/O call #192\n* Publish Docker image directly to DockerHub #144\n\nBreaking changes:\n\n* Ldap Password changes is not supported anymore.\n* Ldap Check Shadow expire config is not supported anymore. It should be replace by a custom filter.\n* Drop CentOS 7 and CentOS 8 support\n\n## 2.3.9 (2022-01-05)\n\nMaintenance release to fix minor issues\n\n* Improve date parsing for `backup.log` to avoid printing exception in logs #170\n* Return HTTP error 403 for invalid symlink to avoid returning a misleading HTTP 500 Server Error #168\n* Show a user friendly error message when trying to create a new user with an existing username #169\n* Handle repository without last-backup date during the notification process to ensure notifications are sent #171\n* Replace CherryPy `storage_type` by `storage_class` to avoid warning in logs\n* Update code to avoid deprecation warning where applicable\n* Add Flake8 validation to improve code quality\n* Remove Ubuntu Groovy support\n\n## 2.3.8 (2021-12-01)\n\n* Push all artefacts to nexus server including binaries and documentation\n* Fix `Chart.js` loading on Debian bullseye #164\n* Update installation steps documentation\n* Improve LDAP authentication to lookup entire directory\n* Fix usage of `--ldap-add-user-default-userroot` to avoid error related to wrong encoding\n* Improve authentication mechanics\n* Avoid raising an HTTP error 500 when login form receive invalid payload\n* Mitigate open redirect vulnerability in login form\n\n## 2.3.7 (2021-10-21)\n\n * To avoid backward compatibility issue, revert CSRF Token validation\n * Mitigate CSRF vulnerability using cookies with `SameSite=Lax`\n * Mitigate CSRF vulnerability by validating the `Origin` header when a form is submited\n * Improve usage of WTForm for all form validation\n * Update installation stepd for debian #162\n * Build Ubuntu packages and publish them to our APT repo\n\n## 2.3.6 (2021-10-20)\n\n * Broken build\n\n## 2.3.5 (2021-10-18)\n\n * Mitigate CSRF vulnerability to user, ssh and repo management with CSRF Token\n\n## 2.3.4 (2021-09-20)\n\n * Skip email notification if `email-host` configuration is not provided #157\n * Skip email notification when the new attribute value has the same value #159\n * USE LDAP `mail` attribute when creating new user from LDAP directory #156\n\n## 2.3.3 (2021-09-10)\n\n * Provide a new theme `blue` to match IKUS Soft colors #158\n\n## 2.3.2 (2021-09-07)\n\n * Automatically update user's repository list based on user's home directory\n\n## 2.3.1 (2021-07-14)\n\n * Update default `session-dir` location to `/var/lib/rdiffweb/session` to avoid using `/var/run` #148\n\n## 2.3.0 (2021-07-06)\n\n * Improve timezone handling to display date with local timezone using javascript #143\n * Improve charts by replacing d3js by chartkick #122\n * Replace the status view by something meaningful with chartkick #122\n * Provide Docker image with Rdiffweb `docker pull ikus060/rdiffweb` #55\n * Fix file and folder sorting #143\n\n## 2.2.0 (2021-05-11)\n \n * Debian package:\n   * Add rdiff-backup as dependencies to comply with Debian packaging rules\n   * Multiple other fixed to control files\n   * Use debhelper-compat (= 13)\n   * Use debhelper-compat (= 13)\n   * Run test during packaging\n   * Create default folder `/var/run/rdiffweb/sessions` to store user session\n * Use ConfigArgPare for configuration to support configuration file, environment variables and arguments to configure rdiffweb #114\n * Fix cache in localization module\n * Add `ldap-add-default-role` and `ldap-add-default-userroot` option to define default value for role and user root when creating user from LDAP #125\n * Support PostgreSQL database by replacing our storage layer by SQLAlchemy #126\n * Fix to retrieve user quota only for valid user_root #135\n * Add option `disable-ssh-keys` to disable SSH Key management\n * Use absolute URL everywhere\n * Add support for `X-Forward-For`, `X-Forward-proto` and other reverse proxy header when generating absolute URL\n * Drop Debian Stretch support\n * Implement a new background scheduler using apscheduler #82\n * Use background job to send email notification to avoid blocking web page loading #47\n * Use background job to delete repository to avoid blocking web page loading #48\n * Allow deleting a specific file or folder from the history using `rdiff-backup-delete` #128\n * Improve support for `session-dir` #131\n * Add option `admin-password` to define administrator password for better security\n * Improve performance of repository browsing \n * Add a new view to display logs of a specific repository\n * Allow downloading the log\n * Define a default limit to graph statistics to make it display faster\n * Fix `get-quota-cmd` option to properly return a value\n\n## 2.1.0 (2021-01-15)\n\n* Debian package: Remove dh-systemd from Debian build dependencies (https://bugs.debian.org/871312we)\n* Improve Quota management:\n  * `QuotaSetCmd`, `QuotaGetCmd` and `QuotaUsedCmd` options could be used to customize how to set the quota for your environment.\n  * Display user's quota in User View\n  * Display user's quota in Admin View\n  * Allow admin to update user quota from Admin View when `QuotaSetCmd` is defined.\n  * Allow admin to define user quota using human readable value (e.g.: GiB, TiB, etc.)\n  * Improve logging around quota management\n* Improve robustness when service is starting\n* Improve robustness when repository has wrong permission defined (e.g.: when some files not readable)\n* Add user id in Admin view\n* Replace `UserObject(1)` by the actual username in log file to improve debugging\n\n## 2.0.0 (2020-12-04)\n\n* Re-implement logic to update repositories views to remove duplicates and avoid nesting repo. #107\n* Handle elapsed time of days in the graph. Thanks [Nathaniel van Diepen](https://github.com/Eeems) contributions.\n* Rebrand all link to ikus-soft.com\n* Update documentation to install rdiffweb\n* Remove obsolete minify dependency\n* Drop support for python2\n* Provide null translation if translation catalogues are not found\n* Pass a LANG environment variable to rdiff-backup restore process to fix encoding issue #112\n* Remove obsolete python shebang\n* Remove execution bit (+x) on python modules\n* Provide `--help` and `--version` on `rdiffweb` executable\n* Improve cherrypy version detection\n* Do not update translation files (.mo) during build\n\n## 1.5.0 (2020-06-24)\n\nThis minor release introduce official support of rdiffweb on Debian Bullseye. It also includes some usability improvements.\n\n * Change formatting of Last Backup date for \"Updated 3 weeks ago\" to ease the readability\n * Add support for Debian Bullseye\n * Add support for Python 3.8 (#104)\n * Add warning in the users list view when a root directory is invalid (#30)\n * Add options to control search depthness (#1)\n * Print a warning in the log when the \"DefaultTheme\" value is not valid (#90)\n\n## 1.4.0 (2020-05-20)\n\nThanks to our sponsor, this release introduce a feature to have better control over the user's permission by defining 3 different levels of privilege: Admin, Maintainer and User. This addition allows you to have better control on what your users can or can't do.\n\n * Fix single repository discovery when a user's home is a rdiff-backup repository\n * [SPONSORED] Add a new setting at the user level to define the user's role. Admin,\n   Maintainer and User. Admin are allowed to do everything. Maintainer are\n   allow to browse and delete repo. Users are only allowed to browse. #94\n * Add \"Powered by\" in the web interface footer #91\n * Display a nice error message when trying to delete admin user #93\n * Introduce usage of wtforms and flash in admin users for better form validation. #96 #97\n * Update French translation\n\n## 1.3.2 (2020-04-23)\n\nThis minor releases fixed issues found while testing release 1.3.0.\n\n * Fix lookup of executable rdiff-backup and rdiffweb-restore to search in current virtualenv first\n * Fix repository view when multiple repo path are conflicting\n * Fix logging of rdiffweb-restore subprocess\n\n## 1.3.1 (2020-04-10)\n\nThis minor release enforces security of the password stored in rdiffweb database to make use of a better encryption using SSHA.\nOnly new passwords will make use of the SSHA scheme.\n\n * Enforce password encryption by using SSHA scheme #88\n\n## 1.3.0 (2020-04-07)\n\nThis release focuses on improving the restore of big archives. The download should be much faster to start. Major enhancement was made to offload the processing outside the web server. And all of this is still compatible with rdiff-backup v1.2.8 and the latest v2.0.0.\n\n * Restore file and folder in a subprocess to make the download start faster\n * Fix encoding of archive on Python3.6 (CentOS 7) by using PAX format\n * Add support to restore files and folders using rdiff-backup2\n * Remove obsolete dependencies `pysqlite2`\n * Fix issue creating duplicate entries of repository in the database\n\n## 1.2.2 (2020-03-05)\n\nThis release provides little improvement to the v1.2.x including official support of rdiff-backup v2.0.0.\n\n * Enhance the repository to invite users to refresh the repository when the view is empty.\n * Support rdiff-backup v2.0.0\n * Deprecate support for cherrypy 4, 5, 6 and 7\n * Improve loading of repository data (cache status and entries)\n * Restore compatibility with SQLite 3.7 (CentOS7)\n\nKnown issues:\n\n * Filename encoding in tar.gz and zip file might not be accurate if you are running Python 3.6 (CentOS7)\n\n\n## 1.2.1 (2020-02-08)\n\nLittle bug fix following the previous release\n\n * Fix 404 error when trying to access other users repo as admin\n * Fix logging format for cherrypy logs to matches rdiffweb format\n * Add log rotation by default\n\n## 1.2.0 (2020-01-30)\n\nThis release focus on improving the database layers for better extendability to add more type of data and to support more databases backend like postgresql in the near future.\n\n * Add explicit testing for Debian Stretch & Buster\n * Change the persistence layers\n   * Minimize number of SQL queries\n   * Add object lazy loading\n   * Add object data caching\n * Fix bugs with SQLite <= 3.16 (Debian Stretch)\n\n## 1.1.0 (2019-10-31)\n\nThis release focus on improving the admin area and building the fundation for repository access control list (ACL).\n\n * Update documentation from PDSL web site\n * Improve the navigation bar layout\n * Update the login page headline\n * Update jinja2 version to allow 2.10.x\n * Show server log in admin area\n * Reduce code smell\n * Add System information in admin area\n * Validate credential using local database before LDAP\n * Reffactoring templates macros\n * Enhance user's view search bar\n * Change repository URL to username/repopath\n * Add System information in admin area\n * Improve testcases\n * Clean-up obsolete code\n * Fix issue with captital case encoding name\n * Fix compilation of less files\n * Fix google font import\n\n## 1.0.3 (2019-10-04)\n * Removing the auto update repos\n\n## 1.0.2 (2019-10-01)\n * Create \"admin\" user if missing\n * Update french translation\n\n## 1.0.1 (2019-09-22)\n * Update installation documentation \n * Fix removal of SSH Key\n * Return meaningful error to the user trying to add an existing SSH key\n\n## 1.0.0 (2019-09-11)\n * Make repository removal more robust\n * Improve performance of librdiff\n * Add new RESTful api\n * Return the right HTTP 401 or 402 error code for authentication\n * Fix bug introduce by upgrade to Jinja2 + python3\n * Store ssh keys in database and disk\n * Add support for theme (default, orange)\n * Remove deprecated profiling code\n * Add disk usage support / quota\n * Add support of cherrypy v18\n * Drop support of cherrypy v3.2.2\n * Add wsgi entry point\n * Replace the plugins architecture to ease implementation\n * Numerous bug fixes\n\n## 0.10.9 (2019-05-22)\n * Better error handling when error.log file are not valid gzip file\n\n", "# Configuration\n\nThere are several entry points available for administrator to manage the configuration of Rdiffweb. This section aims to outline those configurations and explain each option available and what it does.\n\nSince version 2.2, rdiffweb configuration is more flexible. You may configure every option using the configuration file, command line argument or environment variable.\n\nTake note that configuration options are distinct from the runtime setting, available from the web interface. The configuration options here usually meant to be static and set before starting the server. You may get the list of configuration options by calling `rdiffweb --help`.\n\nNote: If an option is specified in more than one place, the command line arguments override the environment variable, environment variables override config files, and config files override default value.\n\n## Configuration file\n\nTo use configuration files, you may call rdiffweb with `-f` or `--config` to define the configuration file location. When not defined, Rdiffweb loads all configuration files from these locations by default:\n\n* /etc/rdiffweb/rdw.conf\n* /etc/rdiffweb/rdw.conf.d/*.conf\n\nConfiguration file syntax must define a key and a value. The key is case-sensitive, and you may use underscore (_) or dash (-) seemlessly. All lines beginning with '#' are comments and are intended for you to read. All other lines are configuration for rdiffweb.\n\nE.g.:\n\n    # This is a comment\n    server_port=8081\n    log_level=DEBUG\n\n## Environment variables\n\nIn addition to configuration files, you may pass environment variables. The options name must be uppercase and prefixed with `RDIFFWEB_`. As an example, if you want to change the port used to listen for HTTP request for 8081, you must define `server-port` option as follow.\n\n    RDIFFWEB_SERVER_PORT=8081\n\n## Command line arguments\n\nWhen launching `rdiffweb` executable, you may pass as many arguments as you want on the command line. The options must be prefixed with double dash (`--`) and you must single dash (-) to separate words.\n\nE.g. `--server-port 8081` or `--server-port=8081` are valid\n\n\n## Configure listening port and interface\n\nFor security reasons, Rdiffweb listen on port `8080` for HTTP request on loopback interface (127.0.0.1) by default. Consider configuring a reverse proxy like Nginx or Apache2 if you want to make Rdiffweb listen on port 80 for HTTP and port 443 for HTTPS request.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| server-host | Define the IP address to listen to. Use `0.0.0.0` to listen on all interfaces. Use `127.0.0.1` to listen on loopback interface. | 0.0.0.0 |\n| server-port | Define the port to listen for HTTP request. Default to `8080` | 9090 |\n\n## Configure administrator username & password\n\nUsing configuration file, you may setup a special administrator which cannot be\ndeleted or renamed from the web interface. You may also configure a specific\npassword for this user that cannot be updated from the web interface either.\n\nIn addition, you may also create other administrator users to manage Rdiffweb.\n\n| Parameter | Description | Example |\n| --- | --- | --- | \n| admin-user | Define the name of the default admin user to be created | admin |\n| admin-password | administrator encrypted password as SSHA. Read online documentation to know more about how to encrypt your password into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php When defined, administrator password cannot be updated using the web interface. When undefined, default administrator password is `admin123` and it can be updated using the web interface. | modification |\n\n\n## Configure logging\n\nRdiffweb can be configured to send logs to specific location. By default, logs are sent to the console (stdout or stderr). If you have installed Rdiffweb on a server, you should consider enabling the logging to help you keep track of the activities or to help you debug problem.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| log-level | Define the log level. ERROR, WARN, INFO, DEBUG | DEBUG |\n| log-file | Define the location of the log file. | /var/log/rdiffweb/server.log |\n| log-access-file | Define the location of the access log file. | /var/log/rdiffweb/access.log |\n\n### Enable Debugging\n\nA specific option is also available if you want to enable the debugging log. We do not recommend to enable this option in production as it may leak information to the user whenever an exception is raised.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| debug | enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs. | |\n| environment | Define the type of environment: `development` or `production`. This is used to limit the information shown to the user when an error occurs. Default: production | development |\n\n## Configure database\n\nRdiffweb use SQL database to store user preferences. The embedded SQLite database is well suited for small deployment (1-100 users). If you intended to have a large deployment, you must consider using a PostgreSQL database instead.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| database-uri | Location of the database used for persistence. SQLite and PostgreSQL database are supported officially. To use a SQLite database, you may define the location using a file path or a URI. e.g.: `/srv/rdiffweb/file.db` or `sqlite:///srv/rdiffweb/file.db`. To use PostgreSQL server, you must provide a URI similar to `postgresql://user:pass@10.255.1.34/dbname` and you must install required dependencies. By default, Rdiffweb uses a SQLite embedded database located at `/etc/rdiffweb/rdw.db`. | postgresql://user:pass@10.255.1.34/dbname | \n\n\n### SQLite\n\nTo use embedded SQLite database, pass the option `database-uri` with a URI similar to `sqlite:///etc/rdiffweb/rdw.db` or `/etc/rdiffweb/rdw.db`.\n\n### PostgreSQL\n\nTo use an external PostgreSQL database, pass the option `database-uri` with a URI similar to `postgresql://user:pass@10.255.1.34/dbname`.\n\nYou may need to install additional dependencies to connect to PostgreSQL. Step to install dependencies might differ according to the way you installed Rdiffweb.\n\n**Using Debian repository:**\n\n    apt install python3-psycopg2\n\n**Using Pypi repository:**\n\n    pip install psycopg2-binary\n\n## Configure LDAP Authentication\n\nRdiffweb may integrates with LDAP server to support user authentication.\n\nThis integration works with most LDAP-compliant servers, including:\n\n* Microsoft Active Directory\n* Apple Open Directory\n* Open LDAP\n* 389 Server\n\n### LDAP options\n\n| Option | Description | Example |\n| --- | --- | --- |\n| ldap-add-missing-user | `True` to create users from LDAP when the credential is valid. | True |\n| ldap-add-user-default-role | Role to be used when creating a new user from LDAP. Default: user | maintainer |\n| ldap-add-user-default-userroot | Userroot to be used when creating a new user from LDAP. Default: empty | /backups/{cn[0]} |\n| ldap-base-dn | The DN of the branch of the directory where all searches should start from. | dc=my,dc=domain | \n| ldap-bind-dn | An optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind. | cn=manager,dc=my,dc=domain |\n| ldap-bind-password | A bind password to use in conjunction with `LdapBindDn`. Note that the bind password is probably sensitive data,and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory. | mypassword |\n| ldap-encoding | encoding used by your LDAP server. Default to utf-8 | cp1252 |\n| ldap-filter | A valid LDAP search filter. If not provided, defaults to `(objectClass=*)`, which will search for all objects in the tree. | (objectClass=*) | \n| ldap-group-attribute-is-dn | True if the content of the attribute ldap-group-attribute is a DN. | true |\n| ldap-group-attribute | name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn. | member |\n| ldap-network-timeout | Optional timeout value. Default to 10 sec. | 10 |\n| ldap-protocol-version | Version of LDAP in use either 2 or 3. Default to 3. | 3 |\n| ldap-required-group | name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn. | rdiffweb |\n| ldap-scope | The scope of the search. Can be either `base`, `onelevel` or `subtree`. Default to `subtree`. | onelevel |\n| ldap-timeout | Optional timeout value. Default to 300 sec. | 300 |\n| ldap-tls | `true` to enable TLS. Default to `false` | false |\n| ldap-uri | URIs containing only the schema, the host, and the port. | ldap://localhost:389 | \n| ldap-username-attribute | The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using. | cn | \n| ldap-version | version of LDAP in use either 2 or 3. Default to 3.| 3 |\n\n### Automatically create user in Rdiffweb\n\nIf you have a large number of users in your LDAP, you may want to configure Rdiffweb to automatically create user in database that has valid LDAP credentials. The user will get created on first valid login.\n\nYou may optionally pass other options like `ldap-add-user-default-role` and `ldap-add-user-default-userroot` to automatically define the default user role and default user root for any new user created from LDAP.\n\nHere a working configuration:\n\n    ldap-add-missing-user=true\n    ldap-add-user-default-role=user\n    ldap-add-user-default-userroot=/backups/{cn[0]}\n\n### Restrict access to a specific LDAP group\n\nIf you are making use of LDAP credentials validation, you will usually want to limit the access to member of a specific LDAP group. Rdiffweb support such scenario with the use of `ldap-required-group`, `ldap-group-attribute` and `ldap-group-attribute-is-dn`.\n\nHere is an example of how you may limit Rdiffweb access to members of *Admin_Backup* group. This configuration is known to work with LDAP PosixAccount and PosixGroup.\n\n    ldap-required-group=cn=Admin_Backup,ou=Groups,dc=nodomain\n    ldap-group-attribute=memberUid\n    ldap-group-attribute-is-dn=false\n\n## Configure email notifications\n\nSince Rdiffweb v0.9, you may configure Rdiffweb to send an email notification to the users when their backups did not complete successfully for a period of time.\nWhen enabled, Rdiffweb will also send email notification for security reason when user's password is changed.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| email-encryption | Type of encryption to be used when establishing communication with SMTP server. Available values: `none`, `ssl` and `starttls` | starttls |\n| email-host | SMTP server used to send email in the form `host`:`port`. If the port is not provided, default to standard port 25 or 465 is used. | smtp.gmail.com:587 | \n| email-sender | email addres used for the `From:` field when sending email. | Rdiffweb <example@gmail.com> |\n| email-notification-time | time when the email notification should be sent for inactive backups. | 22:00 |\n| email-username | username used for authentication with the SMTP server. | example@gmail.com |\n| email-password | password used for authentication with the SMTP server. | CHANGEME |\n| email-send-changed-notification | True to send notification when sensitive information get change in user profile. Default: false | True |\n\nTo configure the notification, you need a valid SMTP server. In this example, you are making use of a Gmail account to send emails.\n\n    email-host=smtp.gmail.com:587\n    email-encryption=starttls\n    email-sender=example@gmail.com\n    email-username=example@gmail.com\n    email-password=CHANGEME\n    email-send-changed-notification=true\n\nNote: notifications are not sent if the user doesn't have an email configured in his profile.\n\n## Configure user quota\n\nSince v2.1, it's now possible to customize how user quota is controller for\nyour system without a custom plugin. By defining `quota-set-cmd`, `quota-get-cmd`\nand `QuotaUsedCmd` configuration options, you have all the flexibility to\nmanage the quota the way you want by providing custom command line to be executed to respectively set the quota, get the quota and get quota usage.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| quota-set-cmd | Command line to set the user's quota. | Yes. If you want to allow administrators to set quota from the web interface. |\n| quota-get-cmd | Command line to get the user's quota. Should print the size in bytes to console. | No. Default behaviour gets quota using operating system statvfs that should be good if you are using setquota, getquota, etc. For ZFS and other more exotic file system, you may need to define this command. |\n| quota-used-cmd | Command line to get the quota usage. Should print the size in bytes to console. | No. |\n\nWhen Rdiffweb calls the scripts, special environment variables are available. You should make use of this variables in a custom script to get and set the disk quota.\n\n* `RDIFFWEB_USERID`: rdiffweb user id. e.g.: `34`\n* `RDIFFWEB_USERNAME`: rdiffweb username. e.g.: `patrik`\n* `RDIFFWEB_USERROOT`: user's root directory. e.g.: `/backups/patrik/`\n* `RDIFFWEB_ROLE`: user's role e.g.: `10` 1:Admin, 5:Maintainer, 10:User\n* `RDIFFWEB_QUOTA`: only available for `quota-set-cmd`. Define the new quota value in bytes. e.g.: 549755813888  (0.5 TiB)\n\nContinue reading about how to configure quotas for EXT4. We generally\nrecommend making use of project quotas with Rdiffweb to simplify the management of permission and avoid running Rdiffweb with root privileges.  The next section\npresents how to configure project quota. Keep in mind it's also possible to\nconfigure quota using either user's quota or project quota.\n\n### Configure user quota for EXT4\n\nThis section is not a full documentation about how to configure ext4 project quota, \nbut provide enough guidance to help you.\n\n1. Enabled project quota feature  \n   You must enable project quota feature for the EXT4 partition where your backup resides using:  \n   `tune2fs -O project -Q prjquota /dev/sdaX`  \n   The file system must be unmounted to change this setting and may require you\n   to boot your system with a live-cd if your backups reside on root file system (`/`).  \n   Also, add `prjquota` options to your mount point configuration `/etc/fstab`.\n   Something like `/dev/sdaX   /   ext4    errors=remount-ro,prjquota     0    1`\n2. Turn on the project quota after reboot  \n   `quotaon -Pv -F vfsv1 /`\n3. Check if the quota is working  \n   `repquota -Ps /`\n4. Add `+P` attribute on directories to enabled project quotas  \n   `chattr -R +P /backups/admin`\n5. Then set the project id on directories  \n   `chattr -R -p 1 /backups/admin` where `1` is the rdiffweb user's id\n\nNext, you may configure Rdiffweb quota command line for your need. For EXT4\nproject quotas, you only need to define `quota-set-cmd` with something similar\nto the following. `quota-get-cmd` and `quota-used-cmd` should not be required\nwith EXT4 quota management.\n\n    quota-set-cmd=setquota -P $RDIFFWEB_USERID $((RDIFFWEB_QUOTA / 1024)) $((RDIFFWEB_QUOTA / 1024)) 0 0 /\n\nThis effectively, makes use of Rdiffweb user's id as project id.\n\n### Configure user quota for ZFS\n\nThis section is not a full documentation about how to configure ZFS project quotas,\nbut provide enough guidance to help you. This documentation uses `tank/backups`\nas the dataset to store rdiffweb backups.\n\n1. Quota feature is a relatively new feature for ZFS On Linux. Check your\n   operating system to verify if your ZFS version support it. You may need\n   to upgrade your pool and dataset using:  \n\n   `zpool upgrade tank`\n   `zfs upgrade tank/backups`\n\n2. Add `+P` attribute on directories to enabled project quotas  \n   `chattr -R +P /backups/admin`\n   `chattr -R -p 1 /backups/admin`\n   OR\n   `zfs project -p 1 -rs /backups/admin`\n   Where `1` is the rdiffweb user's id\n   \nTake note, it's better to enable project quota attributes when the repositories are empty.\n\n## Configure user's session persistence.\n\nRdiffweb could be configured to persist the user's session information either in\nmemory or on disk. When the user's session persists in memory, all user's\nsession get reset if the web server restart. If you want to persist the user's\nsession even if the web server gets restarted, you may persist them on disk with\n`session-dir` option.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| session-dir | location where to store user session information. When undefined, the user sessions are kept in memory. | /var/lib/rdiffweb/session |\n\n## Configure Rdiffweb appearance\n\nA number of options are available to customize the appearance of Rdiffweb to your\nneed. Most likely, you will want to make it closer to your business brand.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| header-name | Define the application name displayed in the title bar and header menu. | My Backup |\n| default-theme | Define the theme. Either: `default`, `blue` or `orange`. Define the css file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/local/lib/python2.7/dist-packages/rdiffweb/static/`. | orange |\n| welcome-msg | Replace the headline displayed in the login page. It may contains HTML. | Custom message displayed on login page.|\n| favicon | Define the FavIcon to be displayed in the browser title | /etc/rdiffweb/my-fav.ico |\n\n## Configure SSH Key management\n\nRdiffweb allows users to manage their SSH Keys by adding and removing them using the web interface. This feature may be disabled with `disable-ssh-keys`.\n\nWhen this feature is enabled, adding or removing an SSH Key from the web interface.\nUpdates, the `${user_root}/.ssh/authorized_keys` file if the file already exists.\n\n## Configure repositories clean-up job\n\nUsing the web interface, users may configure a retention period on individual repository to keep only a fixed number of days in backup. This is useful to control the growth of a repository disk usage.\n\nTo support this feature, Rdiffweb schedule a job to clean-up the repositories in backup. This job is ran once a day. You may change the default time when this schedule job is running by defining another value for option `remove-older-time`.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| remove-older-time | Time when to execute the remove older task | 22:00 | \n\n## Configure temporary folder location\n\nTo restore file or folder, Rdiffweb needs a temporary directory to create the file to be downloaded. By default, Rdiffweb will use your default temporary folder defined using environment variable `TMPDIR`, `TEMP` or `TMP`. If none of these environment variables are defined, Rdiffweb fallback to use `/tmp`.\n\nIf you want to enforce a different location for the temporary directory, you may define the option `tempdir` with a different value. Take note, this directory must be created with the right ownership and permissions to allow Rdiffweb to use it. Also make sure enough disk space is available. Usually, a 32GiB is enough.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| tempdir | alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space| /tmp/rdiffweb/ |\n\n\n## Configure repository lookup depthness.\n\nWhen defining the UserRoot value for a user, Rdiffweb will scan the content of this directory recursively to lookups for rdiff-backup repositories. For performance reason, Rdiffweb limits the recursiveness to 3 subdirectories. This default value should suit most use cases. If you have a particular use case, it's possible to allow Rdiffweb to scan for more subdirectories by defining a greater value for the option `max-depth`. Make sure to pick a reasonable value for your use case as it may impact the performance.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| --max-depth | Define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if your repositories are organised with multiple sub-folders. Default: 3 | No | 10 |\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport grp\nimport logging\nimport os\nimport platform\nimport pwd\nimport subprocess\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport humanfriendly\nimport psutil\nfrom wtforms import validators, widgets\nfrom wtforms.fields import Field, PasswordField, SelectField, StringField\nfrom wtforms.fields.html5 import EmailField\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\nfrom rdiffweb.core.config import Option\nfrom rdiffweb.core.librdiff import rdiff_backup_version\nfrom rdiffweb.core.store import ADMIN_ROLE, MAINTAINER_ROLE, USER_ROLE\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n\ndef get_pyinfo():\n    try:\n        import distro\n\n        yield _('OS Version'), '%s %s (%s %s)' % (\n            platform.system(),\n            platform.release(),\n            distro.name().capitalize(),\n            distro.version(),\n        )\n    except Exception:\n        yield _('OS Version'), '%s %s' % (platform.system(), platform.release())\n    if hasattr(os, 'path'):\n        yield _('OS Path'), os.environ['PATH']\n    if hasattr(sys, 'version'):\n        yield _('Python Version'), ''.join(sys.version)\n    if hasattr(sys, 'subversion'):\n        yield _('Python Subversion'), ', '.join(sys.subversion)\n    if hasattr(sys, 'prefix'):\n        yield _('Python Prefix'), sys.prefix\n    if hasattr(sys, 'executable'):\n        yield _('Python Executable'), sys.executable\n    if hasattr(sys, 'path'):\n        yield _('Python Path'), ', '.join(sys.path)\n\n\ndef get_osinfo():\n    def gr_name(gid):\n        try:\n            return grp.getgrgid(gid).gr_name\n        except Exception:\n            return\n\n    def pw_name(uid):\n        try:\n            return pwd.getpwuid(os.getuid()).pw_name\n        except Exception:\n            return\n\n    if hasattr(sys, 'getfilesystemencoding'):\n        yield _('File System Encoding'), sys.getfilesystemencoding()\n    if hasattr(os, 'getcwd'):\n        yield _('Current Working Directory'), os.getcwd()\n    if hasattr(os, 'getegid'):\n        yield _('Effective Group'), '%s (%s)' % (os.getegid(), gr_name(os.getegid()))\n    if hasattr(os, 'geteuid'):\n        yield _('Effective User'), '%s (%s)' % (os.geteuid(), pw_name(os.geteuid))\n    if hasattr(os, 'getgid'):\n        yield _('Group'), '%s (%s)' % (os.getgid(), gr_name(os.getgid()))\n    if hasattr(os, 'getuid'):\n        yield _('User'), '%s (%s)' % (os.getuid(), gr_name(os.getuid()))\n    if hasattr(os, 'getgroups'):\n        yield _('Group Membership'), ', '.join(['%s (%s)' % (gid, gr_name(gid)) for gid in os.getgroups()])\n    try:\n        if hasattr(os, 'getpid') and hasattr(os, 'getppid'):\n            yield _('Process ID'), ('%s (parent: %s)' % (os.getpid(), os.getppid()))\n    except Exception:\n        pass\n\n\ndef get_hwinfo():\n    if hasattr(os, 'getloadavg'):\n        yield _('Load Average'), ', '.join(map(str, map(lambda x: round(x, 2), os.getloadavg())))\n    yield _('CPU Count'), psutil.cpu_count()\n    meminfo = psutil.virtual_memory()\n    yield _('Memory usage'), '%s / %s' % (\n        humanfriendly.format_size(meminfo.used),\n        humanfriendly.format_size(meminfo.total),\n    )\n\n\ndef get_pkginfo():\n    yield _('Rdiff-Backup Version'), '.'.join([str(i) for i in rdiff_backup_version()])\n    import jinja2\n\n    yield _('Jinja2 Version'), getattr(jinja2, '__version__')\n    yield _('CherryPy Version'), getattr(cherrypy, '__version__')\n    import sqlalchemy\n\n    yield _('SQLAlchemy Version'), getattr(sqlalchemy, '__version__')\n    try:\n        import ldap\n\n        yield _('LDAP Version'), getattr(ldap, '__version__')\n        yield _('LDAP SASL Support (Cyrus-SASL)'), ldap.SASL_AVAIL  # @UndefinedVariable\n        yield _('LDAP TLS Support (OpenSSL)'), ldap.TLS_AVAIL  # @UndefinedVariable\n    except Exception:\n        pass\n\n\nclass SizeField(Field):\n    \"\"\"\n    A text field which stores a file size as GiB or GB format.\n    \"\"\"\n\n    widget = widgets.TextInput()\n\n    def __init__(self, label=None, validators=None, **kwargs):\n        super(SizeField, self).__init__(label, validators, **kwargs)\n\n    def _value(self):\n        if self.raw_data:\n            return ' '.join(self.raw_data)\n        else:\n            return self.data and humanfriendly.format_size(self.data, binary=True) or ''\n\n    def process_formdata(self, valuelist):\n        if valuelist:\n            value_str = ''.join(valuelist)\n            # parse_size doesn't handle locales.this mean we need to\n            # replace ',' by '.' to get parse and prefix number with 0\n            value_str = value_str.replace(',', '.').strip()\n            # a value must start with a number.\n            if value_str.startswith('.'):\n                value_str = '0' + value_str\n            try:\n                self.data = humanfriendly.parse_size(value_str)\n            except humanfriendly.InvalidSize:\n                self.data = None\n                raise ValueError(self.gettext('Not a valid file size value'))\n\n\nclass UserForm(CherryForm):\n    userid = StringField(_('UserID'))\n    username = StringField(_('Username'), validators=[validators.data_required()])\n    email = EmailField(_('Email'), validators=[validators.optional()])\n    password = PasswordField(_('Password'))\n    user_root = StringField(\n        _('Root directory'), description=_(\"Absolute path defining the location of the repositories for this user.\")\n    )\n    role = SelectField(\n        _('User Role'),\n        coerce=int,\n        choices=[(ADMIN_ROLE, _(\"Admin\")), (MAINTAINER_ROLE, _(\"Maintainer\")), (USER_ROLE, _(\"User\"))],\n        default=USER_ROLE,\n        description=_(\n            \"Admin: may browse and delete everything. Maintainer: may browse and delete their own repo. User: may only browser their own repo.\"\n        ),\n    )\n    disk_quota = SizeField(\n        _('Disk space'),\n        validators=[validators.optional()],\n        description=_(\"Users disk spaces (in bytes). Set to 0 to remove quota (unlimited).\"),\n    )\n    disk_usage = SizeField(\n        _('Quota Used'), validators=[validators.optional()], description=_(\"Disk spaces (in bytes) used by this user.\")\n    )\n\n    def validate_role(self, field):\n        # Don't allow the user to changes it's \"role\" state.\n        currentuser = cherrypy.request.currentuser\n        if self.username.data == currentuser.username and self.role.data != currentuser.role:\n            raise ValueError(_('Cannot edit your own role.'))\n\n    def populate_obj(self, userobj):\n        # Save password if defined\n        if self.password.data:\n            userobj.set_password(self.password.data, old_password=None)\n        userobj.role = self.role.data\n        userobj.email = self.email.data or ''\n        userobj.user_root = self.user_root.data\n        if not userobj.valid_user_root():\n            flash(_(\"User's root directory %s is not accessible!\") % userobj.user_root, level='error')\n            logger.warning(\"user's root directory %s is not accessible\" % userobj.user_root)\n        # Try to update disk quota if the human readable value changed.\n        # Report error using flash.\n        new_quota = self.disk_quota.data or 0\n        old_quota = humanfriendly.parse_size(humanfriendly.format_size(self.disk_quota.object_data or 0, binary=True))\n        if old_quota != new_quota:\n            userobj.disk_quota = new_quota\n            # Setting quota will silently fail. Check if quota was updated.\n            if userobj.disk_quota != new_quota:\n                flash(_(\"Setting user's quota is not supported\"), level='warning')\n\n\nclass EditUserForm(UserForm):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        # Make username field read-only\n        self.username.render_kw = {'readonly': True}\n        self.username.populate_obj = lambda *args, **kwargs: None\n\n\nclass DeleteUserForm(CherryForm):\n    username = StringField(_('Username'), validators=[validators.data_required()])\n\n\n@cherrypy.tools.is_admin()\nclass AdminPage(Controller):\n    \"\"\"Administration pages. Allow to manage users database.\"\"\"\n\n    logfile = Option('log_file')\n    logaccessfile = Option('log_access_file')\n\n    def _delete_user(self, action, form):\n        assert action == 'delete'\n        assert form\n        # Validate form.\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        if form.username.data == self.app.currentuser.username:\n            flash(_(\"You cannot remove your own account!\"), level='error')\n        else:\n            try:\n                user = self.app.store.get_user(form.username.data)\n                if user:\n                    user.delete()\n                    flash(_(\"User account removed.\"))\n                else:\n                    flash(_(\"User doesn't exists!\"), level='warning')\n            except ValueError as e:\n                flash(e, level='error')\n\n    def _get_log_files(self):\n        \"\"\"\n        Return a list of log files to be shown in admin area.\n        \"\"\"\n        return [fn for fn in [self.logfile, self.logaccessfile] if fn]\n\n    def _get_log_data(self, fn, num=2000):\n        \"\"\"\n        Return a list of log files to be shown in admin area.\n        \"\"\"\n        try:\n            return subprocess.check_output(['tail', '-n', str(num), fn], stderr=subprocess.STDOUT).decode('utf-8')\n        except Exception:\n            logging.exception('fail to get log file content')\n            return \"Error getting file content\"\n\n    @cherrypy.expose\n    def default(self):\n        params = {\"user_count\": self.app.store.count_users(), \"repo_count\": self.app.store.count_repos()}\n\n        return self._compile_template(\"admin.html\", **params)\n\n    @cherrypy.expose\n    def logs(self, filename=u\"\"):\n        # get list of log file available.\n        data = \"\"\n        logfiles = OrderedDict([(os.path.basename(fn), fn) for fn in self._get_log_files()])\n        if logfiles:\n            filename = filename or list(logfiles.keys())[0]\n            if filename not in logfiles:\n                raise cherrypy.HTTPError(404, 'invalid log file: ' + filename)\n            data = self._get_log_data(logfiles.get(filename))\n\n        params = {\n            \"filename\": filename,\n            \"logfiles\": logfiles.keys(),\n            \"data\": data,\n        }\n        return self._compile_template(\"admin_logs.html\", **params)\n\n    @cherrypy.expose\n    def users(self, username=None, criteria=u\"\", search=u\"\", action=u\"\", **kwargs):\n\n        # If we're just showing the initial page, just do that\n        if action == \"add\":\n            form = UserForm()\n            if form.validate_on_submit():\n                try:\n                    user = self.app.store.add_user(username)\n                    form.populate_obj(user)\n                    flash(_(\"User added successfully.\"))\n                except Exception as e:\n                    flash(str(e), level='error')\n            else:\n                flash(form.error_message, level='error')\n        elif action == \"edit\":\n            user = self.app.store.get_user(username)\n            if user:\n                form = EditUserForm(obj=user)\n                if form.validate_on_submit():\n                    try:\n                        form.populate_obj(user)\n                        flash(_(\"User information modified successfully.\"))\n                    except Exception as e:\n                        flash(str(e), level='error')\n                else:\n                    flash(form.error_message, level='error')\n            else:\n                flash(_(\"Cannot edit user `%s`: user doesn't exists\") % username, level='error')\n        elif action == 'delete':\n            self._delete_user(action, DeleteUserForm())\n\n        params = {\n            \"add_form\": UserForm(formdata=None),\n            \"edit_form\": EditUserForm(formdata=None),\n            \"criteria\": criteria,\n            \"search\": search,\n            \"users\": list(self.app.store.users(search=search, criteria=criteria)),\n        }\n\n        # Build users page\n        return self._compile_template(\"admin_users.html\", **params)\n\n    @cherrypy.expose\n    def repos(self, criteria=u\"\", search=u\"\"):\n        params = {\n            \"criteria\": criteria,\n            \"search\": search,\n            \"repos\": list(self.app.store.repos(search=search, criteria=criteria)),\n        }\n        return self._compile_template(\"admin_repos.html\", **params)\n\n    @cherrypy.expose\n    def sysinfo(self):\n\n        params = {\n            \"version\": self.app.version,\n            # Config\n            \"cfg\": {k: '********' if 'password' in k else v for k, v in vars(self.app.cfg).items()},\n            # System Info entries\n            \"pyinfo\": list(get_pyinfo()),\n            \"osinfo\": list(get_osinfo()),\n            \"hwinfo\": list(get_hwinfo()),\n            \"ldapinfo\": list(get_pkginfo()),\n        }\n\n        return self._compile_template(\"admin_sysinfo.html\", **params)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nDefault preference page to show general user information. It allows user\nto change password ans refresh it's repository view.\n\"\"\"\n\nimport logging\nimport re\n\nimport cherrypy\nfrom wtforms.fields.html5 import EmailField\nfrom wtforms.fields.simple import PasswordField\nfrom wtforms.validators import DataRequired, EqualTo, InputRequired, Regexp\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\n_logger = logging.getLogger(__name__)\n\nPATTERN_EMAIL = re.compile(r'[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')\n\n\nclass UserProfileForm(CherryForm):\n    email = EmailField(_('Email'), validators=[DataRequired(), Regexp(PATTERN_EMAIL, message=_(\"Invalid email.\"))])\n\n\nclass UserPasswordForm(CherryForm):\n    current = PasswordField(_('Current password'), validators=[InputRequired(_(\"Current password is missing.\"))])\n    new = PasswordField(\n        _('New password'),\n        validators=[\n            InputRequired(_(\"New password is missing.\")),\n            EqualTo('confirm', message=_(\"The new password and its confirmation do not match.\")),\n        ],\n    )\n    confirm = PasswordField(\n        _('Confirm new password'), validators=[InputRequired(_(\"Confirmation password is missing.\"))]\n    )\n\n\nclass PrefsGeneralPanelProvider(Controller):\n    \"\"\"\n    Plugin to change user profile and password.\n    \"\"\"\n\n    panel_id = 'general'\n\n    panel_name = _('Profile')\n\n    def _handle_set_password(self, action, form):\n        \"\"\"\n        Called when changing user password.\n        \"\"\"\n        assert self.app.currentuser\n        assert action == 'set_password'\n        assert form\n        # Validate form\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        # Update user password\n        try:\n            self.app.currentuser.set_password(form.new.data, old_password=form.current.data)\n            flash(_(\"Password updated successfully.\"), level='success')\n        except ValueError as e:\n            flash(str(e), level='warning')\n\n    def _handle_set_profile_info(self, action, form):\n        \"\"\"\n        Called when changing user profile.\n        \"\"\"\n        assert self.app.currentuser\n        assert action == 'set_profile_info'\n        assert form\n        # Validate form\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        # Update the user's email\n        username = self.app.currentuser.username\n        _logger.info(\"updating user [%s] email [%s]\", username, form.email.data)\n        self.app.currentuser.email = form.email.data\n        # Report success\n        flash(_(\"Profile updated successfully.\"), level='success')\n\n    def render_prefs_panel(self, panelid, action=None, **kwargs):  # @UnusedVariable\n        # Process the parameters.\n        profile_form = UserProfileForm(email=self.app.currentuser.email)\n        password_form = UserPasswordForm()\n        if action == \"set_profile_info\":\n            self._handle_set_profile_info(action, profile_form)\n        elif action == \"set_password\":\n            self._handle_set_password(action, password_form)\n        elif action == \"update_repos\":\n            self.app.currentuser.refresh_repos(delete=True)\n            flash(_(\"Repositories successfully updated\"), level='success')\n        elif action is None:\n            pass\n        else:\n            _logger.warning(\"unknown action: %s\", action)\n            raise cherrypy.NotFound(\"Unknown action\")\n        params = {\n            'profile_form': profile_form,\n            'password_form': password_form,\n        }\n        return \"prefs_general.html\", params\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Dec 30, 2015\n\n@author: Patrik Dufresne\n\"\"\"\n\nimport os\nfrom unittest.mock import ANY, MagicMock\n\nimport cherrypy\n\nimport rdiffweb.test\nfrom rdiffweb.core.store import ADMIN_ROLE, MAINTAINER_ROLE, USER_ROLE\n\n\nclass AbstractAdminTest(rdiffweb.test.WebCase):\n    \"\"\"Class to regroup command method to test admin page.\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        self._quota = {}\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('user_added', self.listener.user_added, priority=50)\n        cherrypy.engine.subscribe('user_attr_changed', self.listener.user_attr_changed, priority=50)\n        cherrypy.engine.subscribe('user_deleted', self.listener.user_deleted, priority=50)\n        cherrypy.engine.subscribe('user_password_changed', self.listener.user_password_changed, priority=50)\n        self.listener.get_disk_quota.side_effect = self._load_quota\n        cherrypy.engine.subscribe('get_disk_quota', self.listener.get_disk_quota, priority=40)\n        self.listener.get_disk_usage.return_value = 0\n        cherrypy.engine.subscribe('get_disk_usage', self.listener.get_disk_usage, priority=40)\n        self.listener.set_disk_quota.side_effect = self._store_quota\n        cherrypy.engine.subscribe('set_disk_quota', self.listener.set_disk_quota, priority=40)\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('user_added', self.listener.user_added)\n        cherrypy.engine.unsubscribe('user_attr_changed', self.listener.user_attr_changed)\n        cherrypy.engine.unsubscribe('user_deleted', self.listener.user_deleted)\n        cherrypy.engine.unsubscribe('user_password_changed', self.listener.user_password_changed)\n        cherrypy.engine.unsubscribe('get_disk_quota', self.listener.get_disk_quota)\n        cherrypy.engine.unsubscribe('get_disk_usage', self.listener.get_disk_usage)\n        cherrypy.engine.unsubscribe('set_disk_quota', self.listener.set_disk_quota)\n        return super().tearDown()\n\n    def _store_quota(self, userobj, value):\n        self._quota[userobj.username] = value\n\n    def _load_quota(self, userobj):\n        return self._quota.get(userobj.username, 0)\n\n    def _add_user(self, username=None, email=None, password=None, user_root=None, role=None):\n        b = {}\n        b['action'] = 'add'\n        if username is not None:\n            b['username'] = username\n        if email is not None:\n            b['email'] = email\n        if password is not None:\n            b['password'] = password\n        if user_root is not None:\n            b['user_root'] = user_root\n        if role is not None:\n            b['role'] = str(role)\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n    def _edit_user(self, username=None, email=None, password=None, user_root=None, role=None, disk_quota=None):\n        b = {}\n        b['action'] = 'edit'\n        if username is not None:\n            b['username'] = username\n        if email is not None:\n            b['email'] = email\n        if password is not None:\n            b['password'] = password\n        if user_root is not None:\n            b['user_root'] = user_root\n        if role is not None:\n            b['role'] = str(role)\n        if disk_quota is not None:\n            b['disk_quota'] = disk_quota\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n    def _delete_user(self, username='test1'):\n        b = {'action': 'delete', 'username': username}\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n\nclass AdminUsersAsAdminTest(AbstractAdminTest):\n    \"\"\"Integration test for page_admin\"\"\"\n\n    login = True\n\n    def test_add_user_with_role_admin(self):\n        # When trying to create a new user with role admin\n        self._add_user(\"admin_role\", \"admin_role@test.com\", \"test2\", \"/home/\", ADMIN_ROLE)\n        # Then page return success\n        self.assertStatus(200)\n        # Then database is updated\n        userobj = self.app.store.get_user('admin_role')\n        self.assertEqual(ADMIN_ROLE, userobj.role)\n        # Then notification was raised\n        self.listener.user_added.assert_called_once_with(userobj)\n\n    def test_add_user_with_role_maintainer(self):\n        self._add_user(\"maintainer_role\", \"maintainer_role@test.com\", \"test2\", \"/home/\", MAINTAINER_ROLE)\n        self.assertStatus(200)\n        self.assertEqual(MAINTAINER_ROLE, self.app.store.get_user('maintainer_role').role)\n\n    def test_add_user_with_role_user(self):\n        self._add_user(\"user_role\", \"user_role@test.com\", \"test2\", \"/home/\", USER_ROLE)\n        self.assertStatus(200)\n        self.assertEqual(USER_ROLE, self.app.store.get_user('user_role').role)\n\n    def test_add_user_with_invalid_role(self):\n        # When trying to create a new user with an invalid role (admin instead of 0)\n        self._add_user(\"invalid\", \"invalid@test.com\", \"test2\", \"/home/\", 'admin')\n        # Then an error message is displayed to the user\n        self.assertStatus(200)\n        self.assertInBody('role: Invalid Choice: could not coerce')\n        # Then listener are not called\n        self.listener.user_added.assert_not_called()\n\n        # When trying to create a new user with an invalid role (-1)\n        self._add_user(\"invalid\", \"invalid@test.com\", \"test2\", \"/home/\", -1)\n        # Then an error message is displayed to the user\n        self.assertStatus(200)\n        self.assertInBody('role: Not a valid choice')\n        # Then listener are not called\n        self.listener.user_added.assert_not_called()\n\n    def test_add_edit_delete(self):\n        #  Add user to be listed\n        self._add_user(\"test2\", \"test2@test.com\", \"test2\", \"/home/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"test2\")\n        self.assertInBody(\"test2@test.com\")\n        self.listener.user_added.assert_called_once()\n        self.listener.user_password_changed.assert_called_once()\n        self.listener.user_password_changed.reset_mock()\n        #  Update user\n        self._edit_user(\"test2\", \"chaned@test.com\", \"new-password\", \"/tmp/\", ADMIN_ROLE)\n        self.listener.user_attr_changed.assert_called()\n        self.listener.user_password_changed.assert_called_once()\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertInBody(\"test2\")\n        self.assertInBody(\"chaned@test.com\")\n        self.assertNotInBody(\"/home/\")\n        self.assertInBody(\"/tmp/\")\n        #  Check with filters\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertInBody(\"test2\")\n\n        self._delete_user(\"test2\")\n        self.listener.user_deleted.assert_called()\n        self.assertStatus(200)\n        self.assertInBody(\"User account removed.\")\n        self.assertNotInBody(\"test2\")\n\n    def test_add_edit_delete_user_with_encoding(self):\n        \"\"\"\n        Check creation of user with non-ascii char.\n        \"\"\"\n        self._add_user(\"\u00c9ric\", \"\u00e9ric@test.com\", \"\u00c9ric\", \"/home/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"\u00c9ric\")\n        self.assertInBody(\"\u00e9ric@test.com\")\n        # Update user\n        self._edit_user(\"\u00c9ric\", \"eric.l\u00e9tourno@test.com\", \"\u00e9cureuil\", \"/tmp/\", ADMIN_ROLE)\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertInBody(\"\u00c9ric\")\n        self.assertInBody(\"eric.l\u00e9tourno@test.com\")\n        self.assertNotInBody(\"/home/\")\n        self.assertInBody(\"/tmp/\")\n        # Check with filter\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertInBody(\"\u00c9ric\")\n\n        self._delete_user(\"\u00c9ric\")\n        self.assertInBody(\"User account removed.\")\n        self.assertNotInBody(\"\u00c9ric\")\n\n    def test_add_user_with_empty_username(self):\n        \"\"\"\n        Verify failure trying to create user without username.\n        \"\"\"\n        self._add_user(\"\", \"test1@test.com\", \"test1\", \"/tmp/\", USER_ROLE)\n        self.assertStatus(200)\n        self.assertInBody(\"username: This field is required.\")\n\n    def test_add_user_with_existing_username(self):\n        \"\"\"\n        Verify failure trying to add the same user.\n        \"\"\"\n        # Given a user named `test1`\n        self._add_user(\"test1\", \"test1@test.com\", \"test1\", \"/tmp/\", USER_ROLE)\n        # When trying to create a new user with the same name\n        self._add_user(\"test1\", \"test1@test.com\", \"test1\", \"/tmp/\", USER_ROLE)\n        # Then the user list is displayed with an error message.\n        self.assertStatus(200)\n        self.assertInBody(\"User test1 already exists.\")\n\n    def test_add_user_with_invalid_root_directory(self):\n        \"\"\"\n        Verify failure to add a user with invalid root directory.\n        \"\"\"\n        try:\n            self._delete_user(\"test5\")\n        except Exception:\n            pass\n        self._add_user(\"test5\", \"test1@test.com\", \"test5\", \"/var/invalid/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n\n    def test_add_without_email(self):\n        #  Add user to be listed\n        self._add_user(\"test2\", None, \"test2\", \"/tmp/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n\n    def test_add_without_user_root(self):\n        #  Add user to be listed\n        self._add_user(\"test6\", None, \"test6\", None, USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n\n        user = self.app.store.get_user('test6')\n        self.assertEqual('', user.user_root)\n\n    def test_delete_user_with_not_existing_username(self):\n        \"\"\"\n        Verify failure to delete invalid username.\n        \"\"\"\n        self._delete_user(\"test3\")\n        self.assertInBody(\"User doesn&#39;t exists!\")\n\n    def test_delete_our_self(self):\n        \"\"\"\n        Verify failure to delete our self.\n        \"\"\"\n        self._delete_user(self.USERNAME)\n        self.assertInBody(\"You cannot remove your own account!\")\n\n    def test_delete_user_admin(self):\n        \"\"\"\n        Verify failure to delete our self.\n        \"\"\"\n        # Create another admin user\n        self._add_user('admin2', '', 'password', '', ADMIN_ROLE)\n        self.getPage(\"/logout/\")\n        self._login('admin2', 'password')\n\n        # Try deleting admin user\n        self._delete_user(self.USERNAME)\n        self.assertStatus(200)\n        self.assertInBody(\"can&#39;t delete admin user\")\n\n    def test_change_admin_password(self):\n        # Given rdiffweb is configured with admin-password option\n        self.app.cfg.admin_password = 'hardcoded'\n        try:\n            # When trying to update admin password\n            self._edit_user('admin', password='new-password')\n            # Then the form is refused with 200 OK with an error message.\n            self.assertStatus(200)\n            self.assertInBody(\"can&#39;t update admin-password defined in configuration file\")\n        finally:\n            self.app.cfg.admin_password = None\n\n    def test_edit_user_with_invalid_path(self):\n        \"\"\"\n        Verify failure trying to update user with invalid path.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self._edit_user(\"test1\", \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n        self.assertNotInBody(\"User added successfully.\")\n        self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n\n    def test_list(self):\n        self.getPage(\"/admin/users/\")\n        self.assertInBody(\"Users\")\n        self.assertInBody(\"User management\")\n        self.assertInBody(\"Add user\")\n\n    def test_edit_user_with_not_existing_username(self):\n        \"\"\"\n        Verify failure trying to update invalid user.\n        \"\"\"\n        # Given an invalid username\n        username = 'invalid'\n        # When trying to edit the user\n        self._edit_user(username, \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n        # Then the user list is displayed with an error message\n        self.assertStatus(200)\n        self.assertInBody(\"Cannot edit user `invalid`: user doesn&#39;t exists\")\n\n    def test_criteria(self):\n        \"\"\"\n        Check if admin criteria is working.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertNotInBody(\"test1\")\n\n    def test_search(self):\n        \"\"\"\n        Check if user search is working.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self.getPage(\"/admin/users?search=tes\")\n        self.assertInBody(\"test1\")\n        self.getPage(\"/admin/users?search=coucou\")\n        self.assertNotInBody(\"test1\")\n\n    def test_user_invalid_root(self):\n        # Delete all user's\n        for user in self.app.store.users():\n            if user.username != self.USERNAME:\n                user.delete()\n        # Change the user's root\n        user = self.app.store.get_user('admin')\n        user.user_root = \"/invalid\"\n        self.getPage(\"/admin/users\")\n        self.assertInBody(\"Root directory not accessible!\")\n\n        # Query the page by default\n        user = self.app.store.get_user('admin')\n        user.user_root = \"/tmp/\"\n        self.getPage(\"/admin/users\")\n        self.assertNotInBody(\"Root directory not accessible!\")\n\n    def test_get_quota(self):\n        # Mock a quota.\n        self.listener.get_disk_quota.side_effect = None\n        self.listener.get_disk_quota.return_value = 654321\n        # When querying the user list\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertStatus(200)\n        # Then get_disk_quota listenre is called\n        self.listener.get_disk_quota.assert_called()\n        # Then the quota value is displayed in human readable format\n        self.assertInBody(\"638.99 KiB\")\n        self.assertStatus(200)\n\n    def test_set_quota(self):\n        # When updating user quota.\n        self._edit_user(\"admin\", disk_quota='8765432')\n        # Then listenr get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 8765432)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_gib(self):\n        # When updating user quota\n        self._edit_user(\"admin\", disk_quota='1GiB')\n        # Then listern get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 1073741824)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_with_comma(self):\n        # When updating quota with comma value\n        self._edit_user(\"admin\", disk_quota='1,5 GiB')\n        # Then listner get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 1610612736)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_with_leading_dot(self):\n        # When updating quota with leading dot\n        self._edit_user(\"admin\", disk_quota='.5 GiB')\n        # Then listener get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 536870912)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_empty(self):\n        # When quota is not defined\n        self._edit_user(\"admin\", disk_quota='')\n        # Then listener is not called.\n        self.listener.set_disk_quota.assert_not_called()\n        # Then message is not displayed\n        self.assertStatus(200)\n\n    def test_set_quota_same_value(self):\n        # Given an exiting quota\n        self.listener.get_disk_quota.side_effect = None\n        self.listener.get_disk_quota.return_value = 1234567890\n        # When setting the quota value to the same value\n        self._edit_user(\"admin\", disk_quota='1.15 GiB')\n        #  Then listener is not called\n        self.listener.set_disk_quota.assert_not_called()\n        # Then message is not displayed\n        self.assertStatus(200)\n\n    def test_set_quota_unsupported(self):\n        # Given setting quota is not supported\n        self.listener.set_disk_quota.side_effect = None\n        self.listener.set_disk_quota.return_value = None\n        # When updating the quota\n        self._edit_user(\"admin\", disk_quota='8765432')\n        # Then\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 8765432)\n        self.assertInBody(\"Setting user&#39;s quota is not supported\")\n        self.assertStatus(200)\n\n\nclass AdminUsersAsUserTest(AbstractAdminTest):\n    \"\"\"Integration test for page_admin\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        # Add test user\n        self.app.store.add_user('test', 'test123')\n        self._login('test', 'test123')\n\n    def test_add_user(self):\n        \"\"\"\n        Check if adding user is forbidden.\n        \"\"\"\n        self._add_user(\"test2\", \"test2@test.com\", \"test2\", \"/tmp/\", USER_ROLE)\n        self.assertStatus(403)\n\n    def test_delete_user(self):\n        \"\"\"\n        Check if deleting user is forbidden.\n        \"\"\"\n        self._delete_user(\"test\")\n        self.assertStatus(403)\n\n    def test_edit_user(self):\n        \"\"\"\n        Check if editing user is forbidden.\n        \"\"\"\n        self._edit_user(\"test\", \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n        self.assertStatus(403)\n\n    def test_users(self):\n        \"\"\"\n        Check if listing user is forbidden.\n        \"\"\"\n        self.getPage(\"/admin/users\")\n        self.assertStatus(403)\n\n    def test_repos(self):\n        \"\"\"\n        Check if listing user is forbidden.\n        \"\"\"\n        self.getPage(\"/admin/repos\")\n        self.assertStatus(403)\n\n\nclass AdminWithNoLogsTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_logs(self):\n        self.getPage(\"/admin/logs/\")\n        self.assertStatus(200)\n        self.assertInBody(\"No log files\")\n\n\nclass AdminWithLogsTest(rdiffweb.test.WebCase):\n\n    login = True\n    default_config = {'logfile': '/tmp/rdiffweb.log', 'logaccessfile': '/tmp/rdiffweb-access.log'}\n\n    def test_logs(self):\n        with open('/tmp/rdiffweb.log', 'w') as f:\n            f.write(\"content of log file\")\n        with open('/tmp/rdiffweb-access.log', 'w') as f:\n            f.write(\"content of log file\")\n        try:\n            self.getPage(\"/admin/logs/\")\n            self.assertStatus(200)\n            self.assertInBody(\"rdiffweb.log\")\n            self.assertInBody(\"content of log file\")\n            self.assertInBody(\"rdiffweb-access.log\")\n            self.assertNotInBody(\"Error getting file content\")\n        finally:\n            os.remove('/tmp/rdiffweb.log')\n            os.remove('/tmp/rdiffweb-access.log')\n\n\nclass AdminWithLogMissingTest(rdiffweb.test.WebCase):\n\n    login = True\n    default_config = {'logfile': './rdiffweb.log', 'logaccessfile': './rdiffweb-access.log'}\n\n    def test_logs_with_no_file(self):\n        self.getPage(\"/admin/logs/\")\n        self.assertStatus(200)\n        self.assertInBody(\"rdiffweb.log\")\n        self.assertInBody(\"Error getting file content\")\n\n    def test_logs_with_invalid_file(self):\n        self.getPage(\"/admin/logs/invalid\")\n        self.assertStatus(404)\n\n\nclass AdminReposTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_repos(self):\n        self.getPage(\"/admin/repos\")\n        self.assertStatus(200)\n\n    def test_repos_with_search(self):\n        # Search something that exists\n        self.getPage(\"/admin/repos?search=test\")\n        self.assertStatus(200)\n        self.assertInBody(self.REPO)\n\n        # Search something that doesn't exists\n        self.getPage(\"/admin/repos?search=coucou\")\n        self.assertStatus(200)\n        self.assertNotInBody(self.REPO)\n        self.assertInBody(\"No repository found\")\n\n    def test_repos_with_criteria(self):\n        # Search something that exists\n        self.getPage(\"/admin/repos?criteria=ok\")\n        self.assertStatus(200)\n        self.assertInBody(self.REPO)\n\n        # Search something that exists\n        self.getPage(\"/admin/repos?criteria=failed\")\n        self.assertStatus(200)\n        self.assertNotInBody(self.REPO)\n        self.assertInBody(\"No repository found\")\n\n\nclass AdminSysinfoTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_sysinfo(self):\n        self.getPage(\"/admin/sysinfo\")\n        self.assertStatus(200)\n        self.assertInBody(\"Operating System Info\")\n        self.assertInBody(\"Python Info\")\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Dec 26, 2015\n\n@author: Patrik Dufresne\n\"\"\"\n\nfrom unittest.mock import MagicMock\n\nimport cherrypy\n\nimport rdiffweb.test\nfrom rdiffweb.core.store import _REPOS\n\n\nclass PrefsTest(rdiffweb.test.WebCase):\n\n    PREFS = \"/prefs/\"\n\n    login = True\n\n    def setUp(self):\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('user_password_changed', self.listener.user_password_changed, priority=50)\n        return super().setUp()\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('user_password_changed', self.listener.user_password_changed)\n        return super().tearDown()\n\n    def _set_password(\n        self,\n        current,\n        new_password,\n        confirm,\n    ):\n        b = {\n            'action': 'set_password',\n            'current': current,\n            'new': new_password,\n            'confirm': confirm,\n        }\n        return self.getPage(self.PREFS, method='POST', body=b)\n\n    def _set_profile_info(self, email):\n        b = {\n            'action': 'set_profile_info',\n            'email': email,\n        }\n        return self.getPage(self.PREFS, method='POST', body=b)\n\n    def test_change_email(self):\n        self._set_profile_info(\"test@test.com\")\n        self.assertInBody(\"Profile updated successfully.\")\n\n    def test_change_email_with_invalid_email(self):\n        self._set_profile_info(\"@test.com\")\n        self.assertInBody(\"Invalid email\")\n\n        self._set_profile_info(\"test.com\")\n        self.assertInBody(\"Invalid email\")\n\n        self._set_profile_info(\"test\")\n        self.assertInBody(\"Invalid email\")\n\n        self._set_profile_info(\"test@te_st.com\")\n        self.assertInBody(\"Invalid email\")\n\n        self._set_profile_info(\"test@test.com, test2@test.com\")\n        self.assertInBody(\"Invalid email\")\n\n    def test_change_password(self):\n        # When udating user's password\n        self._set_password(self.PASSWORD, \"newpass\", \"newpass\")\n        self.assertInBody(\"Password updated successfully.\")\n        # Then a notification is raised\n        self.listener.user_password_changed.assert_called_once()\n        # Change it back\n        self._set_password(\"newpass\", self.PASSWORD, self.PASSWORD)\n        self.assertInBody(\"Password updated successfully.\")\n\n    def test_change_password_with_wrong_confirmation(self):\n        self._set_password(self.PASSWORD, \"t\", \"a\")\n        self.assertInBody(\"The new password and its confirmation do not match.\")\n\n    def test_change_password_with_wrong_password(self):\n        self._set_password(\"oups\", \"t\", \"t\")\n        self.assertInBody(\"Wrong password\")\n\n    def test_invalid_pref(self):\n        \"\"\"\n        Check if invalid prefs url is 404 Not Found.\n        \"\"\"\n        self.getPage(\"/prefs/invalid/\")\n        self.assertStatus(404)\n\n    def test_update_repos(self):\n        # Given a user with invalid repositories\n        userobj = self.app.store.get_user(self.USERNAME)\n        with self.app.store.engine.connect() as conn:\n            conn.execute(_REPOS.insert().values(userid=userobj._userid, repopath='invalid'))\n        self.assertEqual(['broker-repo', 'invalid', 'testcases'], sorted([r.name for r in userobj.repo_objs]))\n        # When updating the repository list\n        self.getPage(self.PREFS, method='POST', body={'action': 'update_repos'})\n        self.assertStatus(200)\n        # Then a success message is displayed\n        self.assertInBody('Repositories successfully updated')\n        # Then the list is free of inexisting repos.\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_update_notification(self):\n        self.getPage(\"/prefs/notification/\", method='POST', body={'action': 'set_notification_info', 'testcases': '7'})\n        self.assertStatus(200)\n        # Check database update\n        repo_obj = self.app.store.get_user(self.USERNAME).get_repo(self.REPO)\n        self.assertEqual(7, repo_obj.maxage)\n\n    def test_get_page(self):\n        self.getPage(\"/prefs/\", method='GET')\n        self.assertInBody(\"SSH\")\n\n\nclass PrefsWithSSHKeyDisabled(rdiffweb.test.WebCase):\n\n    default_config = {\n        \"disable_ssh_keys\": \"true\",\n    }\n\n    def test_get_page(self):\n        self.getPage(\"/prefs/\", method='GET')\n        self.assertNotInBody(\"SSH\")\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport argparse\nimport logging\nimport re\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport configargparse\nimport pkg_resources\nfrom cherrypy import Application\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n# Get rdiffweb version.\ntry:\n    VERSION = pkg_resources.get_distribution(\"rdiffweb\").version\nexcept pkg_resources.DistributionNotFound:\n    VERSION = \"DEV\"\n\n\ndef get_parser():\n    # Get global config argument parser\n    parser = configargparse.ArgumentParser(\n        prog='rdiffweb',\n        description='Web interface to browse and restore rdiff-backup repositories.',\n        default_config_files=['/etc/rdiffweb/rdw.conf', '/etc/rdiffweb/rdw.conf.d/*.conf'],\n        add_env_var_help=True,\n        auto_env_var_prefix='RDIFFWEB_',\n        config_file_parser_class=ConfigFileParser,\n        conflict_handler='resolve',\n    )\n\n    parser.add_argument(\n        '-f', '--config', is_config_file=True, metavar='FILE', help='location of Rdiffweb configuration file'\n    )\n\n    parser.add(\n        '--database-uri',\n        '--sqlitedb-file',\n        '--sqlitedbfile',\n        metavar='URI',\n        help=\"\"\"Location of the database used for persistence. SQLite and PostgreSQL\n            database are supported officially. To use a SQLite database you may\n            define the location using a file path or a URI.\n            e.g.: /srv/rdiffweb/file.db or sqlite:///srv/rdiffweb/file.db`.\n            To use PostgreSQL server you must provide\n            a URI similar to postgresql://user:pass@10.255.1.34/dbname and you\n            must install required dependencies.\n            By default, Rdiffweb uses a SQLite embedded database located at\n            /etc/rdiffweb/rdw.db.\"\"\",\n        default='/etc/rdiffweb/rdw.db',\n    )\n\n    parser.add_argument(\n        '-d',\n        '--debug',\n        action='store_true',\n        help='enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs',\n    )\n\n    parser.add_argument(\n        '--admin-user',\n        '--adminuser',\n        metavar='USERNAME',\n        help='administrator username. The administrator user get created on startup if the database is empty.',\n        default='admin',\n    )\n\n    parser.add_argument(\n        '--admin-password',\n        metavar='USERNAME',\n        help=\"\"\"administrator encrypted password as SSHA. Read online\n            documentation to know more about how to encrypt your password\n            into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php\n            When defined, administrator password cannot be updated using the web interface.\n            When undefined, default administrator password is `admin123` and\n            it can be updated using the web interface.\"\"\",\n    )\n\n    parser.add_argument(\n        '--default-theme',\n        '--defaulttheme',\n        help='define the default theme. Either: default, blue or orange. Define the CSS file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/local/lib/python3.9/dist-packages/rdiffweb/static/`',\n        choices=['default', 'blue', 'orange'],\n        default='default',\n    )\n\n    parser.add_argument(\n        '--environment',\n        choices=['development', 'production'],\n        help='define the type of environment: development, production. This is used to limit the information shown to the user when an error occur.',\n        default='production',\n    )\n\n    parser.add_argument(\n        '--email-encryption',\n        '--emailencryption',\n        choices=['none', 'ssl', 'starttls'],\n        help='type of encryption to be used when establishing communication with SMTP server. Default: none',\n        default='none',\n    )\n\n    parser.add_argument(\n        '--email-host',\n        '--emailhost',\n        metavar='HOST',\n        help='SMTP server used to send email in the form <host>:<port>. If the port is not provided, default to standard port 25 or 465 is used. e.g.: smtp.gmail.com:587',\n    )\n\n    parser.add_argument(\n        '--email-sender',\n        '--emailsender',\n        metavar='EMAIL',\n        help='email addres used for the `from:` field when sending email.',\n    )\n\n    parser.add_argument(\n        '--email-notification-time',\n        '--emailnotificationtime',\n        metavar='TIME',\n        help='time when the email notifcation should be sent for inactive backups. e.g.: 22:00 Default value: 23:00',\n        default='23:00',\n    )\n\n    parser.add_argument(\n        '--email-username',\n        '--emailusername',\n        metavar='USERNAME',\n        help='username used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-password',\n        '--emailpassword',\n        metavar='PASSWORD',\n        help='password used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-send-changed-notification',\n        '--emailsendchangednotification',\n        help='True to send notification when sensitive information get change in user profile.',\n        action='store_true',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--favicon',\n        help='location of an icon to be used as a favicon displayed in web browser.',\n        default=pkg_resources.resource_filename('rdiffweb', 'static/favicon.ico'),\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-name', '--footername', help=argparse.SUPPRESS, default='rdiffweb'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-url', '--footerurl', help=argparse.SUPPRESS, default='https://rdiffweb.org/'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--header-logo',\n        '--headerlogo',\n        help='location of an image (preferably a .png) to be used as a replacement for the rdiffweb logo.',\n    )\n\n    parser.add_argument(\n        '--header-name',\n        '--headername',\n        help='application name displayed in the title bar and header menu.',\n        default='rdiffweb',\n    )\n\n    parser.add_argument(\n        '--ldap-add-missing-user',\n        '--addmissinguser',\n        action='store_true',\n        help='enable creation of users from LDAP when the credential are valid.',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-role',\n        help='default role used when creating users from LDAP. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='user',\n        choices=['admin', 'maintainer', 'user'],\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-userroot',\n        help='default user root directory used when creating users from LDAP. LDAP attributes may be used to define the default location. e.g.: `/backups/{uid[0]}/`. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='',\n    )\n\n    parser.add_argument(\n        '--ldap-uri',\n        '--ldapuri',\n        help='URL to the LDAP server used to validate user credentials. e.g.: ldap://localhost:389',\n    )\n\n    parser.add_argument(\n        '--ldap-base-dn',\n        '--ldapbasedn',\n        metavar='DN',\n        help='DN of the branch of the directory where all searches should start from. e.g.: dc=my,dc=domain',\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-scope',\n        '--ldapscope',\n        help='scope of the search. Can be either base, onelevel or subtree',\n        choices=['base', 'onelevel', 'subtree'],\n        default=\"subtree\",\n    )\n\n    parser.add_argument('--ldap-tls', '--ldaptls', action='store_true', help='enable TLS')\n\n    parser.add_argument(\n        '--ldap-username-attribute',\n        '--ldapattribute',\n        metavar='ATTRIBUTE',\n        help=\"The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using.\",\n        default='uid',\n    )\n\n    parser.add_argument(\n        '--ldap-filter',\n        '--ldapfilter',\n        help=\"search filter to limit LDAP lookup. If not provided, defaults to (objectClass=*), which searches for all objects in the tree.\",\n        default='(objectClass=*)',\n    )\n\n    parser.add_argument(\n        '--ldap-required-group',\n        '--ldaprequiredgroup',\n        metavar='GROUPNAME',\n        help=\"name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn.\",\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute',\n        '--ldapgroupattribute',\n        metavar='ATTRIBUTE',\n        help=\"name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn.\",\n        default='member',\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute-is-dn',\n        '--ldapgroupattributeisdn',\n        help=\"True if the content of the attribute `ldap-group-attribute` is a DN.\",\n        action='store_true',\n    )\n\n    parser.add_argument(\n        '--ldap-bind-dn',\n        '--ldapbinddn',\n        metavar='DN',\n        help=\"optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-bind-password',\n        '--ldapbindpassword',\n        metavar='PASSWORD',\n        help=\"password to use in conjunction with LdapBindDn. Note that the bind password is probably sensitive data, and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-version',\n        '--ldapversion',\n        '--ldapprotocolversion',\n        help=\"version of LDAP in use either 2 or 3. Default to 3.\",\n        default=3,\n        type=int,\n        choices=[2, 3],\n    )\n\n    parser.add_argument(\n        '--ldap-network-timeout',\n        '--ldapnetworktimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP connection\",\n        default=100,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-timeout',\n        '--ldaptimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP request\",\n        default=300,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-encoding',\n        '--ldapencoding',\n        metavar='ENCODING',\n        help=\"encoding used by your LDAP server.\",\n        default=\"utf-8\",\n    )\n\n    parser.add_argument(\n        '--log-access-file', '--logaccessfile', metavar='FILE', help='location of Rdiffweb log access file.'\n    )\n\n    parser.add_argument(\n        '--log-file',\n        '--logfile',\n        metavar='FILE',\n        help='location of Rdiffweb log file. Print log to the console if not define in config file.',\n    )\n\n    parser.add_argument(\n        '--log-level',\n        '--loglevel',\n        help='Define the log level.',\n        choices=['ERROR', 'WARN', 'INFO', 'DEBUG'],\n        default='INFO',\n    )\n\n    parser.add_argument(\n        '--max-depth',\n        '--maxdepth',\n        metavar='DEPTH',\n        help=\"define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if you repositories are organised with multiple sub-folder.\",\n        type=int,\n        default=3,\n    )\n\n    parser.add('--quota-set-cmd', '--quotasetcmd', metavar='COMMAND', help=\"command line to set the user's quota.\")\n\n    parser.add('--quota-get-cmd', '--quotagetcmd', metavar='COMMAND', help=\"command line to get the user's quota.\")\n\n    parser.add(\n        '--quota-used-cmd', '--quotausedcmd', metavar='COMMAND', help=\"Command line to get user's quota disk usage.\"\n    )\n\n    parser.add(\n        '--remove-older-time',\n        '--removeoldertime',\n        metavar='TIME',\n        help=\"Time when to execute the remove older scheduled job. e.g.: 22:30\",\n        default='23:00',\n    )\n\n    parser.add('--server-host', '--serverhost', metavar='IP', default='127.0.0.1', help='IP address to listen to')\n\n    parser.add(\n        '--server-port',\n        '--serverport',\n        metavar='PORT',\n        help='port to listen to for HTTP request',\n        default='8080',\n        type=int,\n    )\n\n    parser.add(\n        '--session-dir',\n        '--sessiondir',\n        metavar='FOLDER',\n        help='location where to store user session information. When undefined, the user sessions are kept in memory.',\n    )\n\n    parser.add(\n        '--rate-limit',\n        metavar='LIMIT',\n        type=int,\n        default=10,\n        help='maximum number of requests per minute that can be made by an IP address for an unauthenticated connection. When this limit is reached, an HTTP 429 message is returned to the user. This security measure is used to limit brute force attacks on the login page and the RESTful API.',\n    )\n\n    parser.add(\n        '--ssl-certificate',\n        '--sslcertificate',\n        metavar='CERT',\n        help='location of the SSL Certification to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--ssl-private-key',\n        '--sslprivatekey',\n        metavar='KEY',\n        help='location of the SSL Private Key to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--tempdir',\n        metavar='FOLDER',\n        help='alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space. Default to TEMPDIR environment or `/tmp`.',\n    )\n\n    parser.add(\n        '--disable-ssh-keys',\n        action='store_true',\n        help='used to hide SSH Key management to avoid users to add or remove SSH Key using the web application',\n        default=False,\n    )\n\n    parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)\n\n    # Here we append a list of arguments for each locale.\n    flags = ['--welcome-msg'] + ['--welcome-msg-' + i for i in ['ca', 'en', 'es', 'fr', 'ru']] + ['--welcomemsg']\n    parser.add_argument(\n        *flags,\n        metavar='HTML',\n        help='replace the welcome message displayed in the login page for default locale or for a specific locale',\n        action=LocaleAction\n    )\n    return parser\n\n\ndef parse_args(args=None, config_file_contents=None):\n    args = sys.argv[1:] if args is None else args\n    return get_parser().parse_args(args, config_file_contents=config_file_contents)\n\n\nclass LocaleAction(argparse.Action):\n    \"\"\"\n    Custom Action to support defining arguments with locale.\n    \"\"\"\n\n    def __init__(self, option_strings, dest, nargs=None, **kwargs):\n        super(LocaleAction, self).__init__(option_strings, dest, **kwargs)\n\n    def __call__(self, parser, namespace, value, option_string=None):\n        if option_string[-3] == '-':\n            # When using arguments, we can extract the locale from the argument key\n            locale = option_string[-2:]\n        elif value[2] == ':':\n            # When using config file, the locale could be extract from the value e.g. fr:message\n            locale = value[0:2]\n            value = value[3:]\n        else:\n            locale = ''\n        # Create a dictionary with locale.\n        items = getattr(namespace, self.dest) or {}\n        items[locale] = value\n        setattr(namespace, self.dest, items)\n\n\nclass ConfigFileParser(object):\n    \"\"\"\n    Custom config file parser to support rdiffweb config file format.\n    \"\"\"\n\n    def get_syntax_description(self):\n        msg = \"Configuration file syntax allows: key=value, flag=true.\"\n        return msg\n\n    def parse(self, stream):\n        \"\"\"\n        Used to read the rdiffweb config file as dict.\n        \"\"\"\n\n        result = OrderedDict()\n\n        for i, line in enumerate(stream):\n            line = re.compile(\"(.*?)#.*\").sub(r'\\1', line).strip()\n            if not line:\n                continue\n            if '=' not in line:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n            split_line = line.partition('=')\n            if not len(split_line) == 3:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n\n            # Get key a& value\n            key = split_line[0].lower().strip().replace('_', '-')\n            value = split_line[2].strip()\n\n            # Support welcome-msg locale for backward compatibility\n            m = re.match(\"welcome-?msg\\\\[(ca|en|es|fr|ru)\\\\]\", key.lower())\n            if m:\n                key = \"welcome-msg-\" + m.group(1)\n                value = m.group(1) + \":\" + value\n\n            result[key] = value\n\n        # This dictionary is read by cherrypy. So create appropriate structure.\n        return result\n\n\nclass Option(object):\n    def __init__(self, key):\n        assert key\n        self.key = key\n\n    def __get__(self, instance, owner):\n        \"\"\"\n        Return a property to wrap the given option.\n        \"\"\"\n        return self.get(instance)\n\n    def get(self, instance=None):\n        \"\"\"\n        Return the value of this options.\n        \"\"\"\n        if isinstance(instance, Application):\n            app = instance\n        else:\n            app = cherrypy.request.app or getattr(instance, 'app', None)\n        assert app, \"Option() can't get reference to app\"\n        assert app.cfg, \"Option() can't get reference to app.cfg\"\n        return getattr(app.cfg, self.key)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport codecs\nimport encodings\nimport logging\nimport os\nimport sys\nfrom io import open\n\nimport cherrypy\nfrom cherrypy.process.plugins import SimplePlugin\nfrom sqlalchemy import Column, Integer, MetaData, SmallInteger, String, Table, Text, create_engine\nfrom sqlalchemy.exc import IntegrityError\nfrom sqlalchemy.sql.expression import and_, or_, select\nfrom sqlalchemy.sql.functions import count\n\nfrom rdiffweb.core import RdiffError, authorizedkeys\nfrom rdiffweb.core.config import Option\nfrom rdiffweb.core.librdiff import AccessDeniedError, DoesNotExistError, RdiffRepo\nfrom rdiffweb.core.passwd import check_password, hash_password\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\nSEP = b'/'\n\nDEFAULT_REPO_ENCODING = codecs.lookup((sys.getfilesystemencoding() or 'utf-8').lower()).name\n\n# Define roles\nADMIN_ROLE = 0\nMAINTAINER_ROLE = 5\nUSER_ROLE = 10\nROLES = {\n    'admin': ADMIN_ROLE,\n    'maintainer': MAINTAINER_ROLE,\n    'user': USER_ROLE,\n}\n\n# Define SQLAlchemy metadata\n_META = MetaData()\n_USERS = Table(\n    'users',\n    _META,\n    Column('UserID', Integer, key='userid', primary_key=True),\n    Column('Username', String, key='username', nullable=False, unique=True),\n    Column('Password', String, key='password', nullable=False, server_default=\"\"),\n    Column('UserRoot', String, key='user_root', nullable=False, server_default=\"\"),\n    Column(\n        'IsAdmin',\n        SmallInteger,\n        key='is_admin',\n        nullable=False,\n        server_default=\"0\",\n        doc=\"DEPRECATED This column is replaced by 'role'\",\n    ),\n    Column('UserEmail', String, key='email', nullable=False, server_default=\"\"),\n    Column(\n        'RestoreFormat',\n        SmallInteger,\n        nullable=False,\n        server_default=\"1\",\n        doc=\"DEPRECATED This column is not used anymore\",\n    ),\n    Column('role', SmallInteger, nullable=False, server_default=str(USER_ROLE)),\n    sqlite_autoincrement=True,\n)\n\n_REPOS = Table(\n    'repos',\n    _META,\n    Column('RepoID', Integer, key='repoid', primary_key=True, autoincrement=True),\n    Column('UserID', Integer, key='userid', nullable=False),\n    Column('RepoPath', String, key='repopath', nullable=False),\n    Column('MaxAge', SmallInteger, key='maxage', nullable=False, server_default=\"0\"),\n    Column('Encoding', String, key='encoding'),\n    Column('keepdays', String, nullable=False, server_default=\"\"),\n    sqlite_autoincrement=True,\n)\n\n_SSHKEYS = Table(\n    'sshkeys',\n    _META,\n    Column('Fingerprint', Text, key='fingerprint'),\n    Column('Key', Text, key='key', unique=True),\n    Column('UserID', Integer, key='userid', nullable=False),\n)\n\n\ndef _split_path(path):\n    \"\"\"\n    Split the given path into <username as str> / <path as bytes>\n    \"\"\"\n    # First part is the username\n    assert path\n    if isinstance(path, str):\n        path = os.fsencode(path)\n    path = path.strip(b'/')\n    if b'/' in path:\n        username, path = path.split(b'/', 1)\n        return username.decode('utf-8'), path\n    else:\n        return path.decode('utf-8'), b''\n\n\nclass DuplicateSSHKeyError(Exception):\n    \"\"\"\n    Raised by add_authorizedkey when trying to add the same SSH Key twice.\n    \"\"\"\n\n    pass\n\n\nclass UserObject(object):\n    \"\"\"Represent an instance of user.\"\"\"\n\n    _ATTRS = ['username', 'role', 'email', 'user_root', 'password']\n\n    def __init__(self, store, data):\n        \"\"\"\n        Create a new UserObject from a username or a record.\n\n        `data` a dict or a SQLAlchemy row.\n\n        \"\"\"\n        assert store\n        assert 'userid' in data\n        self._store = store\n        self._record = {k: data[k] for k in self._ATTRS}\n        self._userid = data[_USERS.c.userid]\n\n    def add_authorizedkey(self, key, comment=None):\n        \"\"\"\n        Add the given key to the user. Adding the key to his `authorized_keys`\n        file if it exists and adding it to database.\n        \"\"\"\n        # Parse and validate ssh key\n        assert key\n        key = authorizedkeys.check_publickey(key)\n\n        # Remove option, replace comments.\n        key = authorizedkeys.AuthorizedKey(\n            options=None, keytype=key.keytype, key=key.key, comment=comment or key.comment\n        )\n\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            with open(filename, mode=\"r+\", encoding='utf-8') as fh:\n                if authorizedkeys.exists(fh, key):\n                    raise DuplicateSSHKeyError(_(\"SSH key already exists\"))\n                logger.info(\"add key [%s] to [%s] authorized_keys\", key, self.username)\n                authorizedkeys.add(fh, key)\n        else:\n            # Also look in database.\n            logger.info(\"add key [%s] to [%s] database\", key, self.username)\n            try:\n                with self._store.engine.connect() as conn:\n                    conn.execute(\n                        _SSHKEYS.insert().values(userid=self._userid, fingerprint=key.fingerprint, key=key.getvalue())\n                    )\n            except IntegrityError:\n                raise DuplicateSSHKeyError(\n                    _(\"Duplicate key. This key already exists or is associated to another user.\")\n                )\n        self._store.bus.publish('user_attr_changed', self, {'authorizedkeys': True})\n\n    def valid_user_root(self):\n        \"\"\"\n        Check if the current user_root is valid and readable\n        \"\"\"\n        try:\n            return os.access(self.user_root, os.F_OK) and os.path.isdir(self.user_root)\n        except Exception:\n            return False\n\n    def delete(self):\n        \"\"\"\n        Delete the given user from password store.\n\n        Return True if the user was deleted.\n        Return False if the user didn't exists.\n        Raise a ValueError when trying to delete the admin user.\n        \"\"\"\n        # Make sure we are not trying to delete the admin user.\n        if self.username == self._store._admin_user:\n            raise ValueError(_(\"can't delete admin user\"))\n\n        # Delete user from database (required).\n        logger.info(\"deleting user [%s] from database\", self.username)\n        with self._store.engine.connect() as conn:\n            conn.execute(_SSHKEYS.delete(_SSHKEYS.c.userid == self._userid))\n            conn.execute(_REPOS.delete(_REPOS.c.userid == self._userid))\n            deleted = conn.execute(_USERS.delete(_USERS.c.userid == self._userid))\n            assert deleted.rowcount, 'fail to delete user'\n        self._store.bus.publish('user_deleted', self.username)\n        return True\n\n    def delete_authorizedkey(self, fingerprint):\n        \"\"\"\n        Remove the given key from the user. Remove the key from his\n        `authorized_keys` file if it exists and from database database.\n        \"\"\"\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            with open(filename, mode='r+', encoding='utf-8') as fh:\n                logger.info(\"removing key [%s] from [%s] authorized_keys\", fingerprint, self.username)\n                authorizedkeys.remove(fh, fingerprint)\n        else:\n            # Also look in database.\n            logger.info(\"removing key [%s] from [%s] database\", fingerprint, self.username)\n            with self._store.engine.connect() as conn:\n                conn.execute(\n                    _SSHKEYS.delete(and_(_SSHKEYS.c.userid == self._userid, _SSHKEYS.c.fingerprint == fingerprint))\n                )\n        self._store.bus.publish('user_attr_changed', self, {'authorizedkeys': True})\n\n    @property\n    def disk_usage(self):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return 0\n        values = self._store.bus.publish('get_disk_usage', self)\n        # Return the first not None value\n        return next((v for v in values if v is not None), 0)\n\n    @property\n    def disk_quota(self):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return 0\n        values = self._store.bus.publish('get_disk_quota', self)\n        # Return the first not None value\n        return next((v for v in values if v is not None), 0)\n\n    @disk_quota.setter\n    def disk_quota(self, value):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return\n        self._store.bus.publish('set_disk_quota', self, value)\n\n    def __eq__(self, other):\n        return isinstance(other, UserObject) and self._userid == other._userid\n\n    def __str__(self):\n        return 'UserObject(%s)' % self._userid\n\n    def _get_attr(self, key):\n        \"\"\"Return user's attribute\"\"\"\n        assert key in self._ATTRS, \"invalid attribute: \" + key\n        return self._record[key]\n\n    def _get_authorizedkeys(self):\n        \"\"\"\n        Return an iterator on the authorized key. Either from his\n        `authorized_keys` file if it exists or from database.\n        \"\"\"\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            for k in authorizedkeys.read(filename):\n                yield k\n\n        # Also look in database.\n        with self._store.engine.connect() as conn:\n            result = conn.execute(_SSHKEYS.select(_SSHKEYS.c.userid == self._userid))\n            for record in result:\n                yield authorizedkeys.check_publickey(record['key'])\n\n    def get_repo(self, repopath, refresh=False):\n        \"\"\"\n        Return a repo object.\n        \"\"\"\n        assert isinstance(repopath, bytes) or isinstance(repopath, str)\n        if isinstance(repopath, bytes):\n            repopath = os.fsdecode(repopath)\n        repopath = repopath.strip('/')\n\n        if refresh:\n            self.refresh_repos()\n\n        # Search the repo in database\n        with self._store.engine.connect() as conn:\n            result = conn.execute(_REPOS.select(and_(_REPOS.c.userid == self.userid, _REPOS.c.repopath == repopath)))\n            record = result.fetchone()\n        if record:\n            return RepoObject(self, record)\n\n        raise DoesNotExistError(self.userid, repopath)\n\n    def get_repo_objs(self, refresh=False):\n        \"\"\"\n        Return list of repository object.\n        \"\"\"\n        if refresh:\n            self.refresh_repos()\n        with self._store.engine.connect() as conn:\n            records = conn.execute(_REPOS.select(_REPOS.c.userid == self._userid).order_by(_REPOS.c.repopath))\n            return [RepoObject(self, record) for record in records]\n\n    def refresh_repos(self, delete=False):\n        \"\"\"\n        Return list of repositories object to reflect the filesystem folders.\n\n        Return a RepoObject for each sub directories under `user_root` with `rdiff-backup-data`.\n        \"\"\"\n\n        with self._store.engine.connect() as conn:\n\n            # Update the repositories by walking in the directory tree.\n            def _onerror(unused):\n                logger.error('error updating user [%s] repos' % self.username, exc_info=1)\n\n            dirty = False\n            records = list(conn.execute(_REPOS.select(_REPOS.c.userid == self._userid).order_by(_REPOS.c.repopath)))\n            user_root = os.fsencode(self.user_root)\n            for root, dirs, unused_files in os.walk(user_root, _onerror):\n                for name in dirs.copy():\n                    if name.startswith(b'.'):\n                        dirs.remove(name)\n                if b'rdiff-backup-data' in dirs:\n                    repopath = os.path.relpath(root, start=user_root)\n                    del dirs[:]\n                    # Handle special scenario when the repo is the\n                    # user_root\n                    repopath = b'' if repopath == b'.' else repopath\n\n                    # Check if repo path exists.\n                    record_match = next(\n                        (record for record in records if record['repopath'] == os.fsdecode(repopath)), None\n                    )\n                    if not record_match:\n                        # Add repository to database.\n                        conn.execute(_REPOS.insert().values(userid=self._userid, repopath=os.fsdecode(repopath)))\n                        dirty = True\n                    else:\n                        records.remove(record_match)\n                if root.count(SEP) - user_root.count(SEP) >= self._store._max_depth:\n                    del dirs[:]\n            # If enabled, remove entried from database\n            if delete:\n                for record in records:\n                    conn.execute(_REPOS.delete(_REPOS.c.repoid == record['repoid']))\n        return dirty\n\n    @property\n    def is_ldap(self):\n        \"\"\"Return True if this user is an LDAP user. (with a password)\"\"\"\n        return not self._get_attr('password')\n\n    def _is_role(self, role):\n        assert role in ROLES.values()\n        try:\n            return int(self._get_attr('role')) <= role\n        except ValueError:\n            return False\n\n    def _set_attr(self, key, new_value, notify=True):\n        \"\"\"Used to define an attribute\"\"\"\n        assert key in self._ATTRS, \"invalid attribute: \" + key\n        # Skip database update if the value is the same\n        if self._record[key] == new_value:\n            return\n        # Update database and object internal state.\n        with self._store.engine.connect() as conn:\n            updated = conn.execute(_USERS.update().where(_USERS.c.userid == self._userid).values(**{key: new_value}))\n            assert updated.rowcount\n        old_value = self._record[key]\n        self._record[key] = new_value\n        # Call notification listener\n        if notify:\n            self._store.bus.publish('user_attr_changed', self, {key: (old_value, new_value)})\n\n    def set_password(self, password, old_password=None):\n        \"\"\"\n        Change the user's password. Raise a ValueError if the username or\n        the password are invalid.\n        \"\"\"\n        assert isinstance(password, str)\n        assert old_password is None or isinstance(old_password, str)\n        if not password:\n            raise ValueError(\"password can't be empty\")\n\n        # Cannot update admin-password if defined\n        if self.username == self._store._admin_user and self._store._admin_password:\n            raise ValueError(_(\"can't update admin-password defined in configuration file\"))\n\n        if old_password and not check_password(old_password, self.hash_password):\n            raise ValueError(_(\"Wrong password\"))\n\n        logger.info(\"updating user password [%s]\", self.username)\n        self.hash_password = hash_password(password)\n        self._store.bus.publish('user_password_changed', self)\n\n    def _set_user_root(self, value):\n        \"\"\"\n        Used to take care of updating the user_root.\n\n        When user_root get update, we also want to update the repository list\n        to reflect the filesystem.\n        \"\"\"\n        # Update the value\n        self._set_attr('user_root', value)\n        # Refresh the list of repository.\n        self.refresh_repos()\n\n    # Declare properties\n    userid = property(fget=lambda x: x._userid)\n    is_admin = property(fget=lambda x: x._is_role(ADMIN_ROLE))\n    is_maintainer = property(fget=lambda x: x._is_role(MAINTAINER_ROLE))\n    email = property(fget=lambda x: x._get_attr('email'), fset=lambda x, y: x._set_attr('email', y))\n    user_root = property(fget=lambda x: x._get_attr('user_root'), fset=lambda x, y: x._set_user_root(y))\n    username = property(fget=lambda x: x._get_attr('username'))\n    role = property(fget=lambda x: x._get_attr('role'), fset=lambda x, y: x._set_attr('role', int(y)))\n    authorizedkeys = property(fget=lambda x: x._get_authorizedkeys())\n    repo_objs = property(fget=lambda x: x.get_repo_objs(refresh=False))\n    hash_password = property(\n        fget=lambda x: x._get_attr('password'), fset=lambda x, y: x._set_attr('password', y, notify=False)\n    )\n\n\nclass RepoObject(RdiffRepo):\n    \"\"\"Represent a repository.\"\"\"\n\n    _ATTRS = ['encoding', 'maxage', 'keepdays']\n\n    def __init__(self, user_obj, data):\n        \"\"\"\n        Create a new repository object\n\n        `data` a dict or a SQLAlchemy row.\n\n        \"\"\"\n        assert user_obj\n        assert 'repoid' in data\n        assert 'repopath' in data\n        self._user_obj = user_obj\n        self._repoid = data['repoid']\n        self._repo = data['repopath']\n        self._record = {k: data[k] for k in self._ATTRS}\n        RdiffRepo.__init__(self, user_obj.user_root, self._repo, encoding=DEFAULT_REPO_ENCODING)\n        self._encoding = self._get_encoding()\n\n    def __eq__(self, other):\n        return (\n            isinstance(other, RepoObject)\n            and self._user_obj._userid == other._user_obj._userid\n            and self._repo == other._repo\n        )\n\n    def __str__(self):\n        return 'RepoObject[%s, %s]' % (self._user_obj._userid, self._repo)\n\n    def _set_attr(self, key, value):\n        \"\"\"Used to define an attribute to the repository.\"\"\"\n        assert key in self._ATTRS, 'invalid attribute:' + key\n        if key in ['maxage', 'keepdays']:\n            value = int(value)\n        with self._user_obj._store.engine.connect() as conn:\n            updated = conn.execute(_REPOS.update().where(_REPOS.c.repoid == self._repoid).values(**{key: value}))\n            assert updated.rowcount, 'update failed'\n        self._record[key] = value\n\n    def _get_attr(self, key, default=None):\n        assert key in self._ATTRS, 'invalid attribute:' + key\n        value = self._record.get(key, default)\n        if key in ['maxage', 'keepdays']:\n            return int(value) if value else default\n        return value\n\n    @property\n    def displayname(self):\n        # Repository displayName is the \"repopath\" too.\n        return self._repo.strip('/')\n\n    @property\n    def name(self):\n        # Repository name is the \"repopath\"\n        return self._repo\n\n    @property\n    def owner(self):\n        return self._user_obj.username\n\n    def _get_encoding(self):\n        \"\"\"Return the repository encoding in a normalized format (lowercase and replace - by _).\"\"\"\n        # For backward compatibility, look into the database and fallback to\n        # the rdiffweb config file in the repo.\n        encoding = self._get_attr('encoding')\n        if encoding:\n            return encodings.search_function(encoding.lower())\n\n        # Fallback to default encoding.\n        return encodings.search_function(DEFAULT_REPO_ENCODING)\n\n    def _set_encoding(self, value):\n        \"\"\"Change the repository encoding\"\"\"\n        # Validate if the value is a valid encoding before updating the database.\n        codec = encodings.search_function(value.lower())\n        if not codec:\n            raise ValueError(_('invalid encoding %s') % value)\n\n        logger.info(\"updating repository %s encoding %s\", self, codec.name)\n        self._set_attr('encoding', codec.name)\n        self._encoding = codec\n\n    def delete_repo(self):\n        \"\"\"Properly remove the given repository by updating the user's repositories.\"\"\"\n        logger.info(\"deleting repository %s\", self)\n        # Remove data from disk in background\n        super().delete_repo()\n        # Remove entry from database after deleting files.\n        # Otherwise, refresh will add this repo back.\n        with self._user_obj._store.engine.connect() as conn:\n            conn.execute(_REPOS.delete(_REPOS.c.repoid == self._repoid))\n\n    encoding = property(lambda x: x._encoding.name, _set_encoding)\n    maxage = property(fget=lambda x: x._get_attr('maxage', default=0), fset=lambda x, y: x._set_attr('maxage', y))\n    keepdays = property(\n        fget=lambda x: x._get_attr('keepdays', default=-1), fset=lambda x, y: x._set_attr('keepdays', y)\n    )\n\n\nclass Store(SimplePlugin):\n    \"\"\"\n    This class handle all data storage operations.\n    \"\"\"\n\n    _ldap_add_user = Option(\"ldap_add_missing_user\")\n    _ldap_add_user_default_role = Option(\"ldap_add_user_default_role\")\n    _ldap_add_user_default_userroot = Option(\"ldap_add_user_default_userroot\")\n    _debug = Option('debug')\n    _db_uri = Option(\"database_uri\")\n    _allow_add_user = Option(\"ldap_add_missing_user\")\n    _admin_user = Option(\"admin_user\")\n    _admin_password = Option(\"admin_password\")\n    _max_depth = Option('max_depth')\n\n    def __init__(self, app):\n        super().__init__(cherrypy.engine)\n        self.app = app\n        self.app.store = self\n        # Connect to database\n        uri = self._db_uri if '://' in self._db_uri else \"sqlite:///\" + self._db_uri\n        self.engine = create_engine(uri, echo=self._debug)\n        # Create tables if missing.\n        _META.create_all(self.engine)\n        self._update()\n        self.bus.subscribe(\"authenticate\", self.authenticate)\n        self.bus.subscribe(\"stop\", self.stop)\n\n    def stop(self):\n        self.bus.unsubscribe(\"authenticate\", self.authenticate)\n        self.engine.dispose()\n\n    def create_admin_user(self):\n        # Check if admin user exists. If not, created it.\n        userobj = self.get_user(self._admin_user)\n        if not userobj:\n            userobj = self.add_user(self._admin_user, 'admin123')\n            userobj.role = ADMIN_ROLE\n            userobj.user_root = '/backups'\n        # Also make sure to update the password with latest value from config file.\n        if self._admin_password:\n            userobj.hash_password = self._admin_password\n            userobj.role = ADMIN_ROLE\n\n    def add_user(self, user, password=None, attrs=None):\n        \"\"\"\n        Used to add a new user with an optional password.\n        \"\"\"\n        assert password is None or isinstance(password, str)\n        # Check if user already exists.\n        if self.get_user(user):\n            raise RdiffError(_(\"User %s already exists.\" % (user,)))\n\n        # Find a database where to add the user\n        logger.info(\"adding new user [%s]\", user)\n        with self.engine.connect() as conn:\n            inserted = conn.execute(\n                _USERS.insert().values(username=user, password=hash_password(password) if password else '')\n            )\n            assert inserted.rowcount\n            record = conn.execute(_USERS.select(_USERS.c.username == user)).fetchone()\n        userobj = UserObject(self, record)\n        self.bus.publish('user_added', userobj)\n        # Return user object\n        return userobj\n\n    def count_users(self):\n        with self.engine.connect() as conn:\n            result = conn.execute(select([count('*')]).select_from(_USERS))\n            return result.fetchone()[0]\n\n    def count_repos(self):\n        with self.engine.connect() as conn:\n            result = conn.execute(select([count('*')]).select_from(_REPOS))\n            return result.fetchone()[0]\n\n    def get_repo(self, name, as_user=None, refresh=False):\n        \"\"\"\n        Return the repository identified as `name`.\n        `name` should be <username>/<repopath>\n        \"\"\"\n        username, repopath = _split_path(name)\n        repopath = os.fsdecode(repopath)\n\n        # Check permissions\n        as_user = as_user or self.app.currentuser\n        assert as_user, \"as_user or current user must be defined\"\n        if username != as_user.username and not as_user.is_admin:\n            raise AccessDeniedError(name)\n\n        # Get the userid associated to the username.\n        user_obj = self.get_user(username)\n        if not user_obj:\n            raise DoesNotExistError(name)\n\n        # Get the repo object.\n        return user_obj.get_repo(repopath, refresh=refresh)\n\n    def get_repo_path(self, path, as_user=None, refresh=False):\n        \"\"\"\n        Return a the repository identified by the given `path`.\n        `path` should be <username>/<repopath>/<subdir>\n        \"\"\"\n        assert isinstance(path, bytes) or isinstance(path, str)\n        sep = b'/' if isinstance(path, bytes) else '/'\n        path = path.strip(sep) + sep\n\n        # Since we don't know which part of the \"path\" is the repopath,\n        # we need to do multiple search.\n        try:\n            startpos = 0\n            while True:\n                pos = path.index(sep, startpos)\n                try:\n                    # Run refresh only on first run.\n                    repo_obj = self.get_repo(path[:pos], as_user, refresh=refresh and startpos == 0)\n                    break\n                except DoesNotExistError:\n                    # Raised when repo doesn't exists\n                    startpos = pos + 1\n            return repo_obj, path[pos + 1 :]\n        except ValueError:\n            raise DoesNotExistError(path)\n\n    def get_user(self, user):\n        \"\"\"Return a user object.\"\"\"\n        with self.engine.connect() as conn:\n            record = conn.execute(_USERS.select(_USERS.c.username == user)).fetchone()\n            if record:\n                return UserObject(self, record)\n        return None\n\n    def users(self, search=None, criteria=None):\n        \"\"\"\n        Search users database. Return a generator of user object.\n\n        search: Define a search term to look into email or username.\n        criteria: Define a search filter: admins, ldap\n        \"\"\"\n        with self.engine.connect() as conn:\n            if search:\n                term = '%' + search + '%'\n                result = conn.execute(\n                    _USERS.select().where(or_(_USERS.c.username.like(term), _USERS.c.email.like(term)))\n                )\n            elif criteria:\n                if criteria == 'admins':\n                    result = conn.execute(_USERS.select().where(_USERS.c.role == ADMIN_ROLE))\n                elif criteria == 'ldap':\n                    result = conn.execute(_USERS.select().where(_USERS.c.password == ''))\n                else:\n                    return []\n            else:\n                result = conn.execute(_USERS.select())\n            # return users\n            return [UserObject(self, record) for record in result]\n\n    def repos(self, search=None, criteria=None):\n        \"\"\"\n        Quick listing of all the repository object for all user.\n\n        search: Define a search term to look into path, email or username.\n        criteria: Define a search filter: ok, failed, interrupted, in_progress\n        \"\"\"\n        with self.engine.connect() as conn:\n            if search:\n                result = conn.execute(\n                    select([_REPOS, _USERS])\n                    .where(_USERS.c.userid == _REPOS.c.userid)\n                    .where(\n                        or_(\n                            _USERS.c.username.contains(search),\n                            _USERS.c.email.contains(search),\n                            _REPOS.c.repopath.contains(search),\n                        )\n                    )\n                )\n            else:\n                result = conn.execute(select([_REPOS, _USERS]).where(_USERS.c.userid == _REPOS.c.userid))\n            for record in result:\n                user_obj = UserObject(self, record)\n                repo_obj = RepoObject(user_obj, record)\n                if not criteria or criteria == repo_obj.status[0]:\n                    yield repo_obj\n\n    def login(self, username, password):\n        \"\"\"\n        Verify the user's crendentials with authentication plugins.\n        Then create the user in database if required.\n        \"\"\"\n        assert isinstance(username, str)\n        assert password is None or isinstance(username, str)\n        authenticates = self.bus.publish('authenticate', username, password)\n        authenticates = [a for a in authenticates if a]\n        if not authenticates:\n            return None\n        real_username = authenticates[0][0]\n        extra_attrs = authenticates[0][1]\n\n        # When enabled, create missing userobj in database.\n        userobj = self.get_user(real_username)\n        if userobj is None and self._ldap_add_user:\n            try:\n                # At this point, we need to create a new user in database.\n                # In case default values are invalid, let evaluate them\n                # before creating the user in database.\n                default_user_root = self._ldap_add_user_default_userroot.format(**extra_attrs)\n                default_role = ROLES.get(self._ldap_add_user_default_role)\n                userobj = self.add_user(real_username, attrs=extra_attrs)\n                userobj.user_root = default_user_root\n                userobj.role = default_role\n                # Populate the email attribute using LDAP mail attribute.\n                # Default to empty string to respect database integrity.\n                userobj.email = next(iter(extra_attrs.get('mail', [])), '')\n            except Exception:\n                logger.warning('fail to create new user', exc_info=1)\n        self.bus.publish('user_login', userobj)\n        return userobj\n\n    def authenticate(self, user, password):\n        \"\"\"\n        Called to authenticate the given user.\n\n        Return False if credentials cannot be validated. Otherwise return a\n        tuple with username and user attributes.\n        \"\"\"\n        assert isinstance(user, str)\n        assert password is None or isinstance(user, str)\n        # Validate credential using database first.\n        logger.debug(\"validating user [%s] credentials\", user)\n        userobj = self.get_user(user)\n        if userobj and userobj.hash_password:\n            if check_password(password, userobj.hash_password):\n                return userobj.username, {}\n        return False\n\n    def _update(self):\n        \"\"\"\n        Called on startup to update database schema.\n        \"\"\"\n        with self.engine.connect() as conn:\n            # Remove preceding and leading slash (/) generated by previous\n            # versions. Also rename '.' to ''\n            reult = conn.execute(_REPOS.select())\n            for row in reult:\n                if row['repopath'].startswith('/') or row['repopath'].endswith('/'):\n                    conn.execute(\n                        _REPOS.update()\n                        .where(_REPOS.c.repoid == row['repoid'])\n                        .values(repopath=row['repopath'].strip('/'))\n                    )\n                if row['repopath'] == '.':\n                    conn.execute(_REPOS.update().where(_REPOS.c.repoid == row['repoid']).values(repopath=''))\n\n            # Remove duplicates and nested repositories.\n            reult = conn.execute(_REPOS.select().order_by(_REPOS.c.userid, _REPOS.c.repopath))\n            prev_repo = (None, None)\n            for row in reult:\n                if prev_repo[0] == row['userid'] and (\n                    prev_repo[1] == row['repopath'] or row['repopath'].startswith(prev_repo[1] + '/')\n                ):\n                    conn.execute(_REPOS.delete(_REPOS.c.repoid == row['repoid']))\n                else:\n                    prev_repo = (row['userid'], row['repopath'])\n"], "fixing_code": ["![Rdiffweb Banner](https://gitlab.com/ikus-soft/rdiffweb/-/raw/master/doc/_static/banner.png)\n\n<p align=\"center\">\n<strong>\n<a href=\"https://www.rdiffweb.org\">website</a>\n\u2022 <a href=\"https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/\">docs</a>\n\u2022 <a href=\"https://groups.google.com/d/forum/rdiffweb\">community</a>\n\u2022 <a href=\"https://rdiffweb-demo.ikus-soft.com/\">demo</a>\n</strong>\n</p>\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/ikus060/rdiffweb\"></a>\n<a href=\"https://gitlab.com/ikus-soft/rdiffweb/pipelines\"><img alt=\"Build\" src=\"https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Quality Gate Minarca Client\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=alert_status\"></a>\n<a href=\"https://sonar.ikus-soft.com/dashboard?id=rdiffweb\"><img alt=\"Coverage\" src=\"https://sonar.ikus-soft.com/api/project_badges/measure?project=rdiffweb&metric=coverage\"></a>\n</p>\n\n<h1 align=\"center\">\nWelcome to Rdiffweb\n</h1>\n\nRdiffweb is a web application that allows you to view repositories generated\nby [rdiff-backup](https://rdiff-backup.net/). The purpose of this\napplication is to ease the management of backups and quickly restore your data\nwith a rich and powerful web interface.\n\nRdiffweb is written in Python and is released as open source project under the \nGNU GENERAL PUBLIC LICENSE (GPL). All source code and documentation are\nCopyright Rdiffweb contributors.\n\nRdiffweb is actively developed by [IKUS Soft](https://www.ikus-soft.com/)\nsince November 2014.\n\nThe Rdiffweb source code is hosted on [Gitlab](https://gitlab.com/ikus-soft/rdiffweb)\nand mirrored to [Github](https://github.com/ikus060/rdiffweb).\n\nThe Rdiffweb website is https://rdiffweb.org/.\n\n## Features\n\nWith its rich web interface Rdiffweb provide a notable list of features:\n\n * Browse your backup\n * Restore single file or multiple files as an archived\n * Users authentication via local database and LDAP\n * Users authorization\n * Email notification when backup is not successful\n * Configurable repository encoding\n * Configurable retention period\n * Backup statistics visualization using graphs\n * SSH Keys management\n * Disk quota visualization\n * File and folder deletion\n\n## Demo\n\nIf you quickly want to check how Rdiffweb is behaving, you may try our demo server hosted on:\n\n[https://rdiffweb-demo.ikus-soft.com/](https://rdiffweb-demo.ikus-soft.com/)\n\nUse the following credential to login:\n\n * Username: admin\n * Password: admin123\n\n## Installation & Docker usage\n\nFor detailed installation steps, read the [Installation documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/installation.html).\n\n## Current Build Status\n\n[![Build Status](https://gitlab.com/ikus-soft/rdiffweb/badges/master/pipeline.svg)](https://gitlab.com/ikus-soft/rdiffweb/pipelines)\n\n## Download\n\nYou should read the [Documentation](https://www.ikus-soft.com/archive/rdiffweb/doc/latest/html/index.html) to properly install Rdiffweb in your environment.\n\n**Docker**\n\n    docker pull ikus060/rdiffweb\n    \n**Debian**\n\n    curl -L https://www.ikus-soft.com/archive/rdiffweb/public.key | apt-key add - \n    echo \"deb https://nexus.ikus-soft.com/repository/apt-release-bullseye/ bullseye main\" > /etc/apt/sources.list.d/rdiffweb.list\n    apt update\n    apt install rdiffweb\n\n**Pypi**\n\n    pip install rdiffweb\n\n## Support\n\n### Mailing list\n\nRdiffweb users should use the [Rdiffweb mailing list](https://groups.google.com/forum/#!forum/rdiffweb).\n\n### Bug Reports\n\nBug reports should be reported on the Rdiffweb Gitlab at https://gitlab.com/ikus-soft/rdiffweb/-/issues\n\n### Professional support\n\nProfessional support for Rdiffweb is available by contacting [IKUS Soft](https://www.ikus-soft.com/en/support/#form).\n\n# Changelog\n\n## 2.4.2 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session. [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174) #209\n* Avoid leakage of the stack trace in the default error page. [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3175) #210\n* Enforce minimum and maximum password length #211\n\n## 2.4.1 (2022-09-08)\n\nThis releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n\n* Add Clickjacking Defense [CVE-2022-3167](https://nvd.nist.gov/vuln/detail/CVE-2022-3167)\n* Drop Ubuntu Hirsute & Impish (End-of-life)\n\n## 2.4.0 (2022-06-21)\n\nThis new release brings a lot of improvement since the last version, multiple bug fixes\nto make the application stable. A couple of new features to improve the overall\nusability and a new security feature to block a brute force attack.\n\n* Add RateLimit to login page and API to mitigate robots attacks #167\n* Send email notification only if `email-sender` option is defined to avoid raising exception in logs #176\n* Support file restore cancellation without leaving `rdiffweb-restore` process in `<defunct>` state #174\n* Replace `python-ldap` by `ldap3` a pure python implementation to avoid dependencies on `sasl` and `ldap` binaries #186\n* Reffactor core module to allow better extendability and reusability #183\n* Add support for Debian Bookworm #180\n* Add support for Ubuntu Impish #175\n* Add rdiff-backup version to administration view\n* Run unit test during Debian build package\n* Refresh repository list automatically when required #188 #189\n* Fix error 500 displayed in status page #191\n* Improve repository browsing speed by minimizing the number of I/O call #192\n* Publish Docker image directly to DockerHub #144\n\nBreaking changes:\n\n* Ldap Password changes is not supported anymore.\n* Ldap Check Shadow expire config is not supported anymore. It should be replace by a custom filter.\n* Drop CentOS 7 and CentOS 8 support\n\n## 2.3.9 (2022-01-05)\n\nMaintenance release to fix minor issues\n\n* Improve date parsing for `backup.log` to avoid printing exception in logs #170\n* Return HTTP error 403 for invalid symlink to avoid returning a misleading HTTP 500 Server Error #168\n* Show a user friendly error message when trying to create a new user with an existing username #169\n* Handle repository without last-backup date during the notification process to ensure notifications are sent #171\n* Replace CherryPy `storage_type` by `storage_class` to avoid warning in logs\n* Update code to avoid deprecation warning where applicable\n* Add Flake8 validation to improve code quality\n* Remove Ubuntu Groovy support\n\n## 2.3.8 (2021-12-01)\n\n* Push all artefacts to nexus server including binaries and documentation\n* Fix `Chart.js` loading on Debian bullseye #164\n* Update installation steps documentation\n* Improve LDAP authentication to lookup entire directory\n* Fix usage of `--ldap-add-user-default-userroot` to avoid error related to wrong encoding\n* Improve authentication mechanics\n* Avoid raising an HTTP error 500 when login form receive invalid payload\n* Mitigate open redirect vulnerability in login form\n\n## 2.3.7 (2021-10-21)\n\n * To avoid backward compatibility issue, revert CSRF Token validation\n * Mitigate CSRF vulnerability using cookies with `SameSite=Lax`\n * Mitigate CSRF vulnerability by validating the `Origin` header when a form is submited\n * Improve usage of WTForm for all form validation\n * Update installation stepd for debian #162\n * Build Ubuntu packages and publish them to our APT repo\n\n## 2.3.6 (2021-10-20)\n\n * Broken build\n\n## 2.3.5 (2021-10-18)\n\n * Mitigate CSRF vulnerability to user, ssh and repo management with CSRF Token\n\n## 2.3.4 (2021-09-20)\n\n * Skip email notification if `email-host` configuration is not provided #157\n * Skip email notification when the new attribute value has the same value #159\n * USE LDAP `mail` attribute when creating new user from LDAP directory #156\n\n## 2.3.3 (2021-09-10)\n\n * Provide a new theme `blue` to match IKUS Soft colors #158\n\n## 2.3.2 (2021-09-07)\n\n * Automatically update user's repository list based on user's home directory\n\n## 2.3.1 (2021-07-14)\n\n * Update default `session-dir` location to `/var/lib/rdiffweb/session` to avoid using `/var/run` #148\n\n## 2.3.0 (2021-07-06)\n\n * Improve timezone handling to display date with local timezone using javascript #143\n * Improve charts by replacing d3js by chartkick #122\n * Replace the status view by something meaningful with chartkick #122\n * Provide Docker image with Rdiffweb `docker pull ikus060/rdiffweb` #55\n * Fix file and folder sorting #143\n\n## 2.2.0 (2021-05-11)\n \n * Debian package:\n   * Add rdiff-backup as dependencies to comply with Debian packaging rules\n   * Multiple other fixed to control files\n   * Use debhelper-compat (= 13)\n   * Use debhelper-compat (= 13)\n   * Run test during packaging\n   * Create default folder `/var/run/rdiffweb/sessions` to store user session\n * Use ConfigArgPare for configuration to support configuration file, environment variables and arguments to configure rdiffweb #114\n * Fix cache in localization module\n * Add `ldap-add-default-role` and `ldap-add-default-userroot` option to define default value for role and user root when creating user from LDAP #125\n * Support PostgreSQL database by replacing our storage layer by SQLAlchemy #126\n * Fix to retrieve user quota only for valid user_root #135\n * Add option `disable-ssh-keys` to disable SSH Key management\n * Use absolute URL everywhere\n * Add support for `X-Forward-For`, `X-Forward-proto` and other reverse proxy header when generating absolute URL\n * Drop Debian Stretch support\n * Implement a new background scheduler using apscheduler #82\n * Use background job to send email notification to avoid blocking web page loading #47\n * Use background job to delete repository to avoid blocking web page loading #48\n * Allow deleting a specific file or folder from the history using `rdiff-backup-delete` #128\n * Improve support for `session-dir` #131\n * Add option `admin-password` to define administrator password for better security\n * Improve performance of repository browsing \n * Add a new view to display logs of a specific repository\n * Allow downloading the log\n * Define a default limit to graph statistics to make it display faster\n * Fix `get-quota-cmd` option to properly return a value\n\n## 2.1.0 (2021-01-15)\n\n* Debian package: Remove dh-systemd from Debian build dependencies (https://bugs.debian.org/871312we)\n* Improve Quota management:\n  * `QuotaSetCmd`, `QuotaGetCmd` and `QuotaUsedCmd` options could be used to customize how to set the quota for your environment.\n  * Display user's quota in User View\n  * Display user's quota in Admin View\n  * Allow admin to update user quota from Admin View when `QuotaSetCmd` is defined.\n  * Allow admin to define user quota using human readable value (e.g.: GiB, TiB, etc.)\n  * Improve logging around quota management\n* Improve robustness when service is starting\n* Improve robustness when repository has wrong permission defined (e.g.: when some files not readable)\n* Add user id in Admin view\n* Replace `UserObject(1)` by the actual username in log file to improve debugging\n\n## 2.0.0 (2020-12-04)\n\n* Re-implement logic to update repositories views to remove duplicates and avoid nesting repo. #107\n* Handle elapsed time of days in the graph. Thanks [Nathaniel van Diepen](https://github.com/Eeems) contributions.\n* Rebrand all link to ikus-soft.com\n* Update documentation to install rdiffweb\n* Remove obsolete minify dependency\n* Drop support for python2\n* Provide null translation if translation catalogues are not found\n* Pass a LANG environment variable to rdiff-backup restore process to fix encoding issue #112\n* Remove obsolete python shebang\n* Remove execution bit (+x) on python modules\n* Provide `--help` and `--version` on `rdiffweb` executable\n* Improve cherrypy version detection\n* Do not update translation files (.mo) during build\n\n## 1.5.0 (2020-06-24)\n\nThis minor release introduce official support of rdiffweb on Debian Bullseye. It also includes some usability improvements.\n\n * Change formatting of Last Backup date for \"Updated 3 weeks ago\" to ease the readability\n * Add support for Debian Bullseye\n * Add support for Python 3.8 (#104)\n * Add warning in the users list view when a root directory is invalid (#30)\n * Add options to control search depthness (#1)\n * Print a warning in the log when the \"DefaultTheme\" value is not valid (#90)\n\n## 1.4.0 (2020-05-20)\n\nThanks to our sponsor, this release introduce a feature to have better control over the user's permission by defining 3 different levels of privilege: Admin, Maintainer and User. This addition allows you to have better control on what your users can or can't do.\n\n * Fix single repository discovery when a user's home is a rdiff-backup repository\n * [SPONSORED] Add a new setting at the user level to define the user's role. Admin,\n   Maintainer and User. Admin are allowed to do everything. Maintainer are\n   allow to browse and delete repo. Users are only allowed to browse. #94\n * Add \"Powered by\" in the web interface footer #91\n * Display a nice error message when trying to delete admin user #93\n * Introduce usage of wtforms and flash in admin users for better form validation. #96 #97\n * Update French translation\n\n## 1.3.2 (2020-04-23)\n\nThis minor releases fixed issues found while testing release 1.3.0.\n\n * Fix lookup of executable rdiff-backup and rdiffweb-restore to search in current virtualenv first\n * Fix repository view when multiple repo path are conflicting\n * Fix logging of rdiffweb-restore subprocess\n\n## 1.3.1 (2020-04-10)\n\nThis minor release enforces security of the password stored in rdiffweb database to make use of a better encryption using SSHA.\nOnly new passwords will make use of the SSHA scheme.\n\n * Enforce password encryption by using SSHA scheme #88\n\n## 1.3.0 (2020-04-07)\n\nThis release focuses on improving the restore of big archives. The download should be much faster to start. Major enhancement was made to offload the processing outside the web server. And all of this is still compatible with rdiff-backup v1.2.8 and the latest v2.0.0.\n\n * Restore file and folder in a subprocess to make the download start faster\n * Fix encoding of archive on Python3.6 (CentOS 7) by using PAX format\n * Add support to restore files and folders using rdiff-backup2\n * Remove obsolete dependencies `pysqlite2`\n * Fix issue creating duplicate entries of repository in the database\n\n## 1.2.2 (2020-03-05)\n\nThis release provides little improvement to the v1.2.x including official support of rdiff-backup v2.0.0.\n\n * Enhance the repository to invite users to refresh the repository when the view is empty.\n * Support rdiff-backup v2.0.0\n * Deprecate support for cherrypy 4, 5, 6 and 7\n * Improve loading of repository data (cache status and entries)\n * Restore compatibility with SQLite 3.7 (CentOS7)\n\nKnown issues:\n\n * Filename encoding in tar.gz and zip file might not be accurate if you are running Python 3.6 (CentOS7)\n\n\n## 1.2.1 (2020-02-08)\n\nLittle bug fix following the previous release\n\n * Fix 404 error when trying to access other users repo as admin\n * Fix logging format for cherrypy logs to matches rdiffweb format\n * Add log rotation by default\n\n## 1.2.0 (2020-01-30)\n\nThis release focus on improving the database layers for better extendability to add more type of data and to support more databases backend like postgresql in the near future.\n\n * Add explicit testing for Debian Stretch & Buster\n * Change the persistence layers\n   * Minimize number of SQL queries\n   * Add object lazy loading\n   * Add object data caching\n * Fix bugs with SQLite <= 3.16 (Debian Stretch)\n\n## 1.1.0 (2019-10-31)\n\nThis release focus on improving the admin area and building the fundation for repository access control list (ACL).\n\n * Update documentation from PDSL web site\n * Improve the navigation bar layout\n * Update the login page headline\n * Update jinja2 version to allow 2.10.x\n * Show server log in admin area\n * Reduce code smell\n * Add System information in admin area\n * Validate credential using local database before LDAP\n * Reffactoring templates macros\n * Enhance user's view search bar\n * Change repository URL to username/repopath\n * Add System information in admin area\n * Improve testcases\n * Clean-up obsolete code\n * Fix issue with captital case encoding name\n * Fix compilation of less files\n * Fix google font import\n\n## 1.0.3 (2019-10-04)\n * Removing the auto update repos\n\n## 1.0.2 (2019-10-01)\n * Create \"admin\" user if missing\n * Update french translation\n\n## 1.0.1 (2019-09-22)\n * Update installation documentation \n * Fix removal of SSH Key\n * Return meaningful error to the user trying to add an existing SSH key\n\n## 1.0.0 (2019-09-11)\n * Make repository removal more robust\n * Improve performance of librdiff\n * Add new RESTful api\n * Return the right HTTP 401 or 402 error code for authentication\n * Fix bug introduce by upgrade to Jinja2 + python3\n * Store ssh keys in database and disk\n * Add support for theme (default, orange)\n * Remove deprecated profiling code\n * Add disk usage support / quota\n * Add support of cherrypy v18\n * Drop support of cherrypy v3.2.2\n * Add wsgi entry point\n * Replace the plugins architecture to ease implementation\n * Numerous bug fixes\n\n## 0.10.9 (2019-05-22)\n * Better error handling when error.log file are not valid gzip file\n\n", "# Configuration\n\nThere are several entry points available for administrator to manage the configuration of Rdiffweb. This section aims to outline those configurations and explain each option available and what it does.\n\nSince version 2.2, rdiffweb configuration is more flexible. You may configure every option using the configuration file, command line argument or environment variable.\n\nTake note that configuration options are distinct from the runtime setting, available from the web interface. The configuration options here usually meant to be static and set before starting the server. You may get the list of configuration options by calling `rdiffweb --help`.\n\nNote: If an option is specified in more than one place, the command line arguments override the environment variable, environment variables override config files, and config files override default value.\n\n## Configuration file\n\nTo use configuration files, you may call rdiffweb with `-f` or `--config` to define the configuration file location. When not defined, Rdiffweb loads all configuration files from these locations by default:\n\n* /etc/rdiffweb/rdw.conf\n* /etc/rdiffweb/rdw.conf.d/*.conf\n\nConfiguration file syntax must define a key and a value. The key is case-sensitive, and you may use underscore (_) or dash (-) seemlessly. All lines beginning with '#' are comments and are intended for you to read. All other lines are configuration for rdiffweb.\n\nE.g.:\n\n    # This is a comment\n    server_port=8081\n    log_level=DEBUG\n\n## Environment variables\n\nIn addition to configuration files, you may pass environment variables. The options name must be uppercase and prefixed with `RDIFFWEB_`. As an example, if you want to change the port used to listen for HTTP request for 8081, you must define `server-port` option as follow.\n\n    RDIFFWEB_SERVER_PORT=8081\n\n## Command line arguments\n\nWhen launching `rdiffweb` executable, you may pass as many arguments as you want on the command line. The options must be prefixed with double dash (`--`) and you must single dash (-) to separate words.\n\nE.g. `--server-port 8081` or `--server-port=8081` are valid\n\n\n## Configure listening port and interface\n\nFor security reasons, Rdiffweb listen on port `8080` for HTTP request on loopback interface (127.0.0.1) by default. Consider configuring a reverse proxy like Nginx or Apache2 if you want to make Rdiffweb listen on port 80 for HTTP and port 443 for HTTPS request.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| server-host | Define the IP address to listen to. Use `0.0.0.0` to listen on all interfaces. Use `127.0.0.1` to listen on loopback interface. | 0.0.0.0 |\n| server-port | Define the port to listen for HTTP request. Default to `8080` | 9090 |\n\n## Configure administrator username & password\n\nUsing configuration file, you may setup a special administrator which cannot be\ndeleted or renamed from the web interface. You may also configure a specific\npassword for this user that cannot be updated from the web interface either.\n\nIn addition, you may also create other administrator users to manage Rdiffweb.\n\n| Parameter | Description | Example |\n| --- | --- | --- | \n| admin-user | Define the name of the default admin user to be created | admin |\n| admin-password | administrator encrypted password as SSHA. Read online documentation to know more about how to encrypt your password into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php When defined, administrator password cannot be updated using the web interface. When undefined, default administrator password is `admin123` and it can be updated using the web interface. | modification |\n\n\n## Configure logging\n\nRdiffweb can be configured to send logs to specific location. By default, logs are sent to the console (stdout or stderr). If you have installed Rdiffweb on a server, you should consider enabling the logging to help you keep track of the activities or to help you debug problem.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| log-level | Define the log level. ERROR, WARN, INFO, DEBUG | DEBUG |\n| log-file | Define the location of the log file. | /var/log/rdiffweb/server.log |\n| log-access-file | Define the location of the access log file. | /var/log/rdiffweb/access.log |\n\n### Enable Debugging\n\nA specific option is also available if you want to enable the debugging log. We do not recommend to enable this option in production as it may leak information to the user whenever an exception is raised.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| debug | enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs. | |\n| environment | Define the type of environment: `development` or `production`. This is used to limit the information shown to the user when an error occurs. Default: production | development |\n\n## Configure database\n\nRdiffweb use SQL database to store user preferences. The embedded SQLite database is well suited for small deployment (1-100 users). If you intended to have a large deployment, you must consider using a PostgreSQL database instead.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| database-uri | Location of the database used for persistence. SQLite and PostgreSQL database are supported officially. To use a SQLite database, you may define the location using a file path or a URI. e.g.: `/srv/rdiffweb/file.db` or `sqlite:///srv/rdiffweb/file.db`. To use PostgreSQL server, you must provide a URI similar to `postgresql://user:pass@10.255.1.34/dbname` and you must install required dependencies. By default, Rdiffweb uses a SQLite embedded database located at `/etc/rdiffweb/rdw.db`. | postgresql://user:pass@10.255.1.34/dbname | \n\n\n### SQLite\n\nTo use embedded SQLite database, pass the option `database-uri` with a URI similar to `sqlite:///etc/rdiffweb/rdw.db` or `/etc/rdiffweb/rdw.db`.\n\n### PostgreSQL\n\nTo use an external PostgreSQL database, pass the option `database-uri` with a URI similar to `postgresql://user:pass@10.255.1.34/dbname`.\n\nYou may need to install additional dependencies to connect to PostgreSQL. Step to install dependencies might differ according to the way you installed Rdiffweb.\n\n**Using Debian repository:**\n\n    apt install python3-psycopg2\n\n**Using Pypi repository:**\n\n    pip install psycopg2-binary\n\n## Configure LDAP Authentication\n\nRdiffweb may integrates with LDAP server to support user authentication.\n\nThis integration works with most LDAP-compliant servers, including:\n\n* Microsoft Active Directory\n* Apple Open Directory\n* Open LDAP\n* 389 Server\n\n### LDAP options\n\n| Option | Description | Example |\n| --- | --- | --- |\n| ldap-add-missing-user | `True` to create users from LDAP when the credential is valid. | True |\n| ldap-add-user-default-role | Role to be used when creating a new user from LDAP. Default: user | maintainer |\n| ldap-add-user-default-userroot | Userroot to be used when creating a new user from LDAP. Default: empty | /backups/{cn[0]} |\n| ldap-base-dn | The DN of the branch of the directory where all searches should start from. | dc=my,dc=domain | \n| ldap-bind-dn | An optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind. | cn=manager,dc=my,dc=domain |\n| ldap-bind-password | A bind password to use in conjunction with `LdapBindDn`. Note that the bind password is probably sensitive data,and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory. | mypassword |\n| ldap-encoding | encoding used by your LDAP server. Default to utf-8 | cp1252 |\n| ldap-filter | A valid LDAP search filter. If not provided, defaults to `(objectClass=*)`, which will search for all objects in the tree. | (objectClass=*) | \n| ldap-group-attribute-is-dn | True if the content of the attribute ldap-group-attribute is a DN. | true |\n| ldap-group-attribute | name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn. | member |\n| ldap-network-timeout | Optional timeout value. Default to 10 sec. | 10 |\n| ldap-protocol-version | Version of LDAP in use either 2 or 3. Default to 3. | 3 |\n| ldap-required-group | name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn. | rdiffweb |\n| ldap-scope | The scope of the search. Can be either `base`, `onelevel` or `subtree`. Default to `subtree`. | onelevel |\n| ldap-timeout | Optional timeout value. Default to 300 sec. | 300 |\n| ldap-tls | `true` to enable TLS. Default to `false` | false |\n| ldap-uri | URIs containing only the schema, the host, and the port. | ldap://localhost:389 | \n| ldap-username-attribute | The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using. | cn | \n| ldap-version | version of LDAP in use either 2 or 3. Default to 3.| 3 |\n\n### Automatically create user in Rdiffweb\n\nIf you have a large number of users in your LDAP, you may want to configure Rdiffweb to automatically create user in database that has valid LDAP credentials. The user will get created on first valid login.\n\nYou may optionally pass other options like `ldap-add-user-default-role` and `ldap-add-user-default-userroot` to automatically define the default user role and default user root for any new user created from LDAP.\n\nHere a working configuration:\n\n    ldap-add-missing-user=true\n    ldap-add-user-default-role=user\n    ldap-add-user-default-userroot=/backups/{cn[0]}\n\n### Restrict access to a specific LDAP group\n\nIf you are making use of LDAP credentials validation, you will usually want to limit the access to member of a specific LDAP group. Rdiffweb support such scenario with the use of `ldap-required-group`, `ldap-group-attribute` and `ldap-group-attribute-is-dn`.\n\nHere is an example of how you may limit Rdiffweb access to members of *Admin_Backup* group. This configuration is known to work with LDAP PosixAccount and PosixGroup.\n\n    ldap-required-group=cn=Admin_Backup,ou=Groups,dc=nodomain\n    ldap-group-attribute=memberUid\n    ldap-group-attribute-is-dn=false\n\n## Configure email notifications\n\nSince Rdiffweb v0.9, you may configure Rdiffweb to send an email notification to the users when their backups did not complete successfully for a period of time.\nWhen enabled, Rdiffweb will also send email notification for security reason when user's password is changed.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| email-encryption | Type of encryption to be used when establishing communication with SMTP server. Available values: `none`, `ssl` and `starttls` | starttls |\n| email-host | SMTP server used to send email in the form `host`:`port`. If the port is not provided, default to standard port 25 or 465 is used. | smtp.gmail.com:587 | \n| email-sender | email addres used for the `From:` field when sending email. | Rdiffweb <example@gmail.com> |\n| email-notification-time | time when the email notification should be sent for inactive backups. | 22:00 |\n| email-username | username used for authentication with the SMTP server. | example@gmail.com |\n| email-password | password used for authentication with the SMTP server. | CHANGEME |\n| email-send-changed-notification | True to send notification when sensitive information get change in user profile. Default: false | True |\n\nTo configure the notification, you need a valid SMTP server. In this example, you are making use of a Gmail account to send emails.\n\n    email-host=smtp.gmail.com:587\n    email-encryption=starttls\n    email-sender=example@gmail.com\n    email-username=example@gmail.com\n    email-password=CHANGEME\n    email-send-changed-notification=true\n\nNote: notifications are not sent if the user doesn't have an email configured in his profile.\n\n## Configure user quota\n\nSince v2.1, it's now possible to customize how user quota is controller for\nyour system without a custom plugin. By defining `quota-set-cmd`, `quota-get-cmd`\nand `QuotaUsedCmd` configuration options, you have all the flexibility to\nmanage the quota the way you want by providing custom command line to be executed to respectively set the quota, get the quota and get quota usage.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| quota-set-cmd | Command line to set the user's quota. | Yes. If you want to allow administrators to set quota from the web interface. |\n| quota-get-cmd | Command line to get the user's quota. Should print the size in bytes to console. | No. Default behaviour gets quota using operating system statvfs that should be good if you are using setquota, getquota, etc. For ZFS and other more exotic file system, you may need to define this command. |\n| quota-used-cmd | Command line to get the quota usage. Should print the size in bytes to console. | No. |\n\nWhen Rdiffweb calls the scripts, special environment variables are available. You should make use of this variables in a custom script to get and set the disk quota.\n\n* `RDIFFWEB_USERID`: rdiffweb user id. e.g.: `34`\n* `RDIFFWEB_USERNAME`: rdiffweb username. e.g.: `patrik`\n* `RDIFFWEB_USERROOT`: user's root directory. e.g.: `/backups/patrik/`\n* `RDIFFWEB_ROLE`: user's role e.g.: `10` 1:Admin, 5:Maintainer, 10:User\n* `RDIFFWEB_QUOTA`: only available for `quota-set-cmd`. Define the new quota value in bytes. e.g.: 549755813888  (0.5 TiB)\n\nContinue reading about how to configure quotas for EXT4. We generally\nrecommend making use of project quotas with Rdiffweb to simplify the management of permission and avoid running Rdiffweb with root privileges.  The next section\npresents how to configure project quota. Keep in mind it's also possible to\nconfigure quota using either user's quota or project quota.\n\n### Configure user quota for EXT4\n\nThis section is not a full documentation about how to configure ext4 project quota, \nbut provide enough guidance to help you.\n\n1. Enabled project quota feature  \n   You must enable project quota feature for the EXT4 partition where your backup resides using:  \n   `tune2fs -O project -Q prjquota /dev/sdaX`  \n   The file system must be unmounted to change this setting and may require you\n   to boot your system with a live-cd if your backups reside on root file system (`/`).  \n   Also, add `prjquota` options to your mount point configuration `/etc/fstab`.\n   Something like `/dev/sdaX   /   ext4    errors=remount-ro,prjquota     0    1`\n2. Turn on the project quota after reboot  \n   `quotaon -Pv -F vfsv1 /`\n3. Check if the quota is working  \n   `repquota -Ps /`\n4. Add `+P` attribute on directories to enabled project quotas  \n   `chattr -R +P /backups/admin`\n5. Then set the project id on directories  \n   `chattr -R -p 1 /backups/admin` where `1` is the rdiffweb user's id\n\nNext, you may configure Rdiffweb quota command line for your need. For EXT4\nproject quotas, you only need to define `quota-set-cmd` with something similar\nto the following. `quota-get-cmd` and `quota-used-cmd` should not be required\nwith EXT4 quota management.\n\n    quota-set-cmd=setquota -P $RDIFFWEB_USERID $((RDIFFWEB_QUOTA / 1024)) $((RDIFFWEB_QUOTA / 1024)) 0 0 /\n\nThis effectively, makes use of Rdiffweb user's id as project id.\n\n### Configure user quota for ZFS\n\nThis section is not a full documentation about how to configure ZFS project quotas,\nbut provide enough guidance to help you. This documentation uses `tank/backups`\nas the dataset to store rdiffweb backups.\n\n1. Quota feature is a relatively new feature for ZFS On Linux. Check your\n   operating system to verify if your ZFS version support it. You may need\n   to upgrade your pool and dataset using:  \n\n   `zpool upgrade tank`\n   `zfs upgrade tank/backups`\n\n2. Add `+P` attribute on directories to enabled project quotas  \n   `chattr -R +P /backups/admin`\n   `chattr -R -p 1 /backups/admin`\n   OR\n   `zfs project -p 1 -rs /backups/admin`\n   Where `1` is the rdiffweb user's id\n   \nTake note, it's better to enable project quota attributes when the repositories are empty.\n\n## Configure user's session persistence.\n\nRdiffweb could be configured to persist the user's session information either in\nmemory or on disk. When the user's session persists in memory, all user's\nsession get reset if the web server restart. If you want to persist the user's\nsession even if the web server gets restarted, you may persist them on disk with\n`session-dir` option.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| session-dir | location where to store user session information. When undefined, the user sessions are kept in memory. | /var/lib/rdiffweb/session |\n\n## Custom user's password length limits\n\nBy default, Rdiffweb supports passwords with the following lengths:\n\n* Minimum: 8 characters\n* Maximum: 128 characters\n\nChanging the minimum or maximum length does not affect existing users' passwords. Existing users are not prompted to reset their passwords to meet the new limits. The new limit only applies when an existing user changes their password.\n\n| Option | Description | Example |\n| --- | --- | --- |\n| password-min-length | Minimum length of the user's password | 8 |\n| password-max-length | Maximum length of the user's password | 128 |\n\n## Configure Rdiffweb appearance\n\nA number of options are available to customize the appearance of Rdiffweb to your\nneed. Most likely, you will want to make it closer to your business brand.\n\n| Option | Description | Example | \n| --- | --- | --- |\n| header-name | Define the application name displayed in the title bar and header menu. | My Backup |\n| default-theme | Define the theme. Either: `default`, `blue` or `orange`. Define the css file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/local/lib/python2.7/dist-packages/rdiffweb/static/`. | orange |\n| welcome-msg | Replace the headline displayed in the login page. It may contains HTML. | Custom message displayed on login page.|\n| favicon | Define the FavIcon to be displayed in the browser title | /etc/rdiffweb/my-fav.ico |\n\n## Configure SSH Key management\n\nRdiffweb allows users to manage their SSH Keys by adding and removing them using the web interface. This feature may be disabled with `disable-ssh-keys`.\n\nWhen this feature is enabled, adding or removing an SSH Key from the web interface.\nUpdates, the `${user_root}/.ssh/authorized_keys` file if the file already exists.\n\n## Configure repositories clean-up job\n\nUsing the web interface, users may configure a retention period on individual repository to keep only a fixed number of days in backup. This is useful to control the growth of a repository disk usage.\n\nTo support this feature, Rdiffweb schedule a job to clean-up the repositories in backup. This job is ran once a day. You may change the default time when this schedule job is running by defining another value for option `remove-older-time`.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| remove-older-time | Time when to execute the remove older task | 22:00 | \n\n## Configure temporary folder location\n\nTo restore file or folder, Rdiffweb needs a temporary directory to create the file to be downloaded. By default, Rdiffweb will use your default temporary folder defined using environment variable `TMPDIR`, `TEMP` or `TMP`. If none of these environment variables are defined, Rdiffweb fallback to use `/tmp`.\n\nIf you want to enforce a different location for the temporary directory, you may define the option `tempdir` with a different value. Take note, this directory must be created with the right ownership and permissions to allow Rdiffweb to use it. Also make sure enough disk space is available. Usually, a 32GiB is enough.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| tempdir | alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space| /tmp/rdiffweb/ |\n\n\n## Configure repository lookup depthness.\n\nWhen defining the UserRoot value for a user, Rdiffweb will scan the content of this directory recursively to lookups for rdiff-backup repositories. For performance reason, Rdiffweb limits the recursiveness to 3 subdirectories. This default value should suit most use cases. If you have a particular use case, it's possible to allow Rdiffweb to scan for more subdirectories by defining a greater value for the option `max-depth`. Make sure to pick a reasonable value for your use case as it may impact the performance.\n\n| Parameter | Description | Example |\n| --- | --- | --- |\n| --max-depth | Define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if your repositories are organised with multiple sub-folders. Default: 3 | No | 10 |\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport grp\nimport logging\nimport os\nimport platform\nimport pwd\nimport subprocess\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport humanfriendly\nimport psutil\nfrom wtforms import validators, widgets\nfrom wtforms.fields import Field, PasswordField, SelectField, StringField\nfrom wtforms.fields.html5 import EmailField\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\nfrom rdiffweb.core.config import Option\nfrom rdiffweb.core.librdiff import rdiff_backup_version\nfrom rdiffweb.core.store import ADMIN_ROLE, MAINTAINER_ROLE, USER_ROLE\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n\ndef get_pyinfo():\n    try:\n        import distro\n\n        yield _('OS Version'), '%s %s (%s %s)' % (\n            platform.system(),\n            platform.release(),\n            distro.name().capitalize(),\n            distro.version(),\n        )\n    except Exception:\n        yield _('OS Version'), '%s %s' % (platform.system(), platform.release())\n    if hasattr(os, 'path'):\n        yield _('OS Path'), os.environ['PATH']\n    if hasattr(sys, 'version'):\n        yield _('Python Version'), ''.join(sys.version)\n    if hasattr(sys, 'subversion'):\n        yield _('Python Subversion'), ', '.join(sys.subversion)\n    if hasattr(sys, 'prefix'):\n        yield _('Python Prefix'), sys.prefix\n    if hasattr(sys, 'executable'):\n        yield _('Python Executable'), sys.executable\n    if hasattr(sys, 'path'):\n        yield _('Python Path'), ', '.join(sys.path)\n\n\ndef get_osinfo():\n    def gr_name(gid):\n        try:\n            return grp.getgrgid(gid).gr_name\n        except Exception:\n            return\n\n    def pw_name(uid):\n        try:\n            return pwd.getpwuid(os.getuid()).pw_name\n        except Exception:\n            return\n\n    if hasattr(sys, 'getfilesystemencoding'):\n        yield _('File System Encoding'), sys.getfilesystemencoding()\n    if hasattr(os, 'getcwd'):\n        yield _('Current Working Directory'), os.getcwd()\n    if hasattr(os, 'getegid'):\n        yield _('Effective Group'), '%s (%s)' % (os.getegid(), gr_name(os.getegid()))\n    if hasattr(os, 'geteuid'):\n        yield _('Effective User'), '%s (%s)' % (os.geteuid(), pw_name(os.geteuid))\n    if hasattr(os, 'getgid'):\n        yield _('Group'), '%s (%s)' % (os.getgid(), gr_name(os.getgid()))\n    if hasattr(os, 'getuid'):\n        yield _('User'), '%s (%s)' % (os.getuid(), gr_name(os.getuid()))\n    if hasattr(os, 'getgroups'):\n        yield _('Group Membership'), ', '.join(['%s (%s)' % (gid, gr_name(gid)) for gid in os.getgroups()])\n    try:\n        if hasattr(os, 'getpid') and hasattr(os, 'getppid'):\n            yield _('Process ID'), ('%s (parent: %s)' % (os.getpid(), os.getppid()))\n    except Exception:\n        pass\n\n\ndef get_hwinfo():\n    if hasattr(os, 'getloadavg'):\n        yield _('Load Average'), ', '.join(map(str, map(lambda x: round(x, 2), os.getloadavg())))\n    yield _('CPU Count'), psutil.cpu_count()\n    meminfo = psutil.virtual_memory()\n    yield _('Memory usage'), '%s / %s' % (\n        humanfriendly.format_size(meminfo.used),\n        humanfriendly.format_size(meminfo.total),\n    )\n\n\ndef get_pkginfo():\n    yield _('Rdiff-Backup Version'), '.'.join([str(i) for i in rdiff_backup_version()])\n    import jinja2\n\n    yield _('Jinja2 Version'), getattr(jinja2, '__version__')\n    yield _('CherryPy Version'), getattr(cherrypy, '__version__')\n    import sqlalchemy\n\n    yield _('SQLAlchemy Version'), getattr(sqlalchemy, '__version__')\n    try:\n        import ldap\n\n        yield _('LDAP Version'), getattr(ldap, '__version__')\n        yield _('LDAP SASL Support (Cyrus-SASL)'), ldap.SASL_AVAIL  # @UndefinedVariable\n        yield _('LDAP TLS Support (OpenSSL)'), ldap.TLS_AVAIL  # @UndefinedVariable\n    except Exception:\n        pass\n\n\nclass SizeField(Field):\n    \"\"\"\n    A text field which stores a file size as GiB or GB format.\n    \"\"\"\n\n    widget = widgets.TextInput()\n\n    def __init__(self, label=None, validators=None, **kwargs):\n        super(SizeField, self).__init__(label, validators, **kwargs)\n\n    def _value(self):\n        if self.raw_data:\n            return ' '.join(self.raw_data)\n        else:\n            return self.data and humanfriendly.format_size(self.data, binary=True) or ''\n\n    def process_formdata(self, valuelist):\n        if valuelist:\n            value_str = ''.join(valuelist)\n            # parse_size doesn't handle locales.this mean we need to\n            # replace ',' by '.' to get parse and prefix number with 0\n            value_str = value_str.replace(',', '.').strip()\n            # a value must start with a number.\n            if value_str.startswith('.'):\n                value_str = '0' + value_str\n            try:\n                self.data = humanfriendly.parse_size(value_str)\n            except humanfriendly.InvalidSize:\n                self.data = None\n                raise ValueError(self.gettext('Not a valid file size value'))\n\n\nclass UserForm(CherryForm):\n    userid = StringField(_('UserID'))\n    username = StringField(_('Username'), validators=[validators.data_required()])\n    email = EmailField(_('Email'), validators=[validators.optional()])\n    password = PasswordField(_('Password'), validators=[validators.optional()])\n    user_root = StringField(\n        _('Root directory'), description=_(\"Absolute path defining the location of the repositories for this user.\")\n    )\n    role = SelectField(\n        _('User Role'),\n        coerce=int,\n        choices=[(ADMIN_ROLE, _(\"Admin\")), (MAINTAINER_ROLE, _(\"Maintainer\")), (USER_ROLE, _(\"User\"))],\n        default=USER_ROLE,\n        description=_(\n            \"Admin: may browse and delete everything. Maintainer: may browse and delete their own repo. User: may only browser their own repo.\"\n        ),\n    )\n    disk_quota = SizeField(\n        _('Disk space'),\n        validators=[validators.optional()],\n        description=_(\"Users disk spaces (in bytes). Set to 0 to remove quota (unlimited).\"),\n    )\n    disk_usage = SizeField(\n        _('Quota Used'), validators=[validators.optional()], description=_(\"Disk spaces (in bytes) used by this user.\")\n    )\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.password.validators += [\n            validators.length(\n                min=self.app.cfg.password_min_length,\n                max=self.app.cfg.password_max_length,\n                message=_('Password must have between %(min)d and %(max)d characters.'),\n            )\n        ]\n\n    @property\n    def app(self):\n        return cherrypy.request.app\n\n    def validate_role(self, field):\n        # Don't allow the user to changes it's \"role\" state.\n        currentuser = cherrypy.request.currentuser\n        if self.username.data == currentuser.username and self.role.data != currentuser.role:\n            raise ValueError(_('Cannot edit your own role.'))\n\n    def populate_obj(self, userobj):\n        # Save password if defined\n        if self.password.data:\n            userobj.set_password(self.password.data, old_password=None)\n        userobj.role = self.role.data\n        userobj.email = self.email.data or ''\n        userobj.user_root = self.user_root.data\n        if not userobj.valid_user_root():\n            flash(_(\"User's root directory %s is not accessible!\") % userobj.user_root, level='error')\n            logger.warning(\"user's root directory %s is not accessible\" % userobj.user_root)\n        # Try to update disk quota if the human readable value changed.\n        # Report error using flash.\n        new_quota = self.disk_quota.data or 0\n        old_quota = humanfriendly.parse_size(humanfriendly.format_size(self.disk_quota.object_data or 0, binary=True))\n        if old_quota != new_quota:\n            userobj.disk_quota = new_quota\n            # Setting quota will silently fail. Check if quota was updated.\n            if userobj.disk_quota != new_quota:\n                flash(_(\"Setting user's quota is not supported\"), level='warning')\n\n\nclass EditUserForm(UserForm):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        # Make username field read-only\n        self.username.render_kw = {'readonly': True}\n        self.username.populate_obj = lambda *args, **kwargs: None\n\n\nclass DeleteUserForm(CherryForm):\n    username = StringField(_('Username'), validators=[validators.data_required()])\n\n\n@cherrypy.tools.is_admin()\nclass AdminPage(Controller):\n    \"\"\"Administration pages. Allow to manage users database.\"\"\"\n\n    logfile = Option('log_file')\n    logaccessfile = Option('log_access_file')\n\n    def _delete_user(self, action, form):\n        assert action == 'delete'\n        assert form\n        # Validate form.\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        if form.username.data == self.app.currentuser.username:\n            flash(_(\"You cannot remove your own account!\"), level='error')\n        else:\n            try:\n                user = self.app.store.get_user(form.username.data)\n                if user:\n                    user.delete()\n                    flash(_(\"User account removed.\"))\n                else:\n                    flash(_(\"User doesn't exists!\"), level='warning')\n            except ValueError as e:\n                flash(e, level='error')\n\n    def _get_log_files(self):\n        \"\"\"\n        Return a list of log files to be shown in admin area.\n        \"\"\"\n        return [fn for fn in [self.logfile, self.logaccessfile] if fn]\n\n    def _get_log_data(self, fn, num=2000):\n        \"\"\"\n        Return a list of log files to be shown in admin area.\n        \"\"\"\n        try:\n            return subprocess.check_output(['tail', '-n', str(num), fn], stderr=subprocess.STDOUT).decode('utf-8')\n        except Exception:\n            logging.exception('fail to get log file content')\n            return \"Error getting file content\"\n\n    @cherrypy.expose\n    def default(self):\n        params = {\"user_count\": self.app.store.count_users(), \"repo_count\": self.app.store.count_repos()}\n\n        return self._compile_template(\"admin.html\", **params)\n\n    @cherrypy.expose\n    def logs(self, filename=u\"\"):\n        # get list of log file available.\n        data = \"\"\n        logfiles = OrderedDict([(os.path.basename(fn), fn) for fn in self._get_log_files()])\n        if logfiles:\n            filename = filename or list(logfiles.keys())[0]\n            if filename not in logfiles:\n                raise cherrypy.HTTPError(404, 'invalid log file: ' + filename)\n            data = self._get_log_data(logfiles.get(filename))\n\n        params = {\n            \"filename\": filename,\n            \"logfiles\": logfiles.keys(),\n            \"data\": data,\n        }\n        return self._compile_template(\"admin_logs.html\", **params)\n\n    @cherrypy.expose\n    def users(self, username=None, criteria=u\"\", search=u\"\", action=u\"\", **kwargs):\n\n        # If we're just showing the initial page, just do that\n        if action == \"add\":\n            form = UserForm()\n            if form.validate_on_submit():\n                try:\n                    user = self.app.store.add_user(username)\n                    form.populate_obj(user)\n                    flash(_(\"User added successfully.\"))\n                except Exception as e:\n                    flash(str(e), level='error')\n            else:\n                flash(form.error_message, level='error')\n        elif action == \"edit\":\n            user = self.app.store.get_user(username)\n            if user:\n                form = EditUserForm(obj=user)\n                if form.validate_on_submit():\n                    try:\n                        form.populate_obj(user)\n                        flash(_(\"User information modified successfully.\"))\n                    except Exception as e:\n                        flash(str(e), level='error')\n                else:\n                    flash(form.error_message, level='error')\n            else:\n                flash(_(\"Cannot edit user `%s`: user doesn't exists\") % username, level='error')\n        elif action == 'delete':\n            self._delete_user(action, DeleteUserForm())\n\n        params = {\n            \"add_form\": UserForm(formdata=None),\n            \"edit_form\": EditUserForm(formdata=None),\n            \"criteria\": criteria,\n            \"search\": search,\n            \"users\": list(self.app.store.users(search=search, criteria=criteria)),\n        }\n\n        # Build users page\n        return self._compile_template(\"admin_users.html\", **params)\n\n    @cherrypy.expose\n    def repos(self, criteria=u\"\", search=u\"\"):\n        params = {\n            \"criteria\": criteria,\n            \"search\": search,\n            \"repos\": list(self.app.store.repos(search=search, criteria=criteria)),\n        }\n        return self._compile_template(\"admin_repos.html\", **params)\n\n    @cherrypy.expose\n    def sysinfo(self):\n\n        params = {\n            \"version\": self.app.version,\n            # Config\n            \"cfg\": {k: '********' if 'password' in k else v for k, v in vars(self.app.cfg).items()},\n            # System Info entries\n            \"pyinfo\": list(get_pyinfo()),\n            \"osinfo\": list(get_osinfo()),\n            \"hwinfo\": list(get_hwinfo()),\n            \"ldapinfo\": list(get_pkginfo()),\n        }\n\n        return self._compile_template(\"admin_sysinfo.html\", **params)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nDefault preference page to show general user information. It allows user\nto change password ans refresh it's repository view.\n\"\"\"\n\nimport logging\nimport re\n\nimport cherrypy\nfrom wtforms.fields.html5 import EmailField\nfrom wtforms.fields.simple import PasswordField\nfrom wtforms.validators import DataRequired, EqualTo, InputRequired, Length, Regexp\n\nfrom rdiffweb.controller import Controller, flash\nfrom rdiffweb.controller.cherrypy_wtf import CherryForm\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\n_logger = logging.getLogger(__name__)\n\nPATTERN_EMAIL = re.compile(r'[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')\n\n\nclass UserProfileForm(CherryForm):\n    email = EmailField(_('Email'), validators=[DataRequired(), Regexp(PATTERN_EMAIL, message=_(\"Invalid email.\"))])\n\n\nclass UserPasswordForm(CherryForm):\n    current = PasswordField(_('Current password'), validators=[InputRequired(_(\"Current password is missing.\"))])\n    new = PasswordField(\n        _('New password'),\n        validators=[\n            InputRequired(_(\"New password is missing.\")),\n            EqualTo('confirm', message=_(\"The new password and its confirmation do not match.\")),\n        ],\n    )\n    confirm = PasswordField(\n        _('Confirm new password'), validators=[InputRequired(_(\"Confirmation password is missing.\"))]\n    )\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.new.validators += [\n            Length(\n                min=self.app.cfg.password_min_length,\n                max=self.app.cfg.password_max_length,\n                message=_('Password must have between %(min)d and %(max)d characters.'),\n            )\n        ]\n\n    @property\n    def app(self):\n        return cherrypy.request.app\n\n\nclass PrefsGeneralPanelProvider(Controller):\n    \"\"\"\n    Plugin to change user profile and password.\n    \"\"\"\n\n    panel_id = 'general'\n\n    panel_name = _('Profile')\n\n    def _handle_set_password(self, action, form):\n        \"\"\"\n        Called when changing user password.\n        \"\"\"\n        assert self.app.currentuser\n        assert action == 'set_password'\n        assert form\n        # Validate form\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        # Update user password\n        try:\n            self.app.currentuser.set_password(form.new.data, old_password=form.current.data)\n            flash(_(\"Password updated successfully.\"), level='success')\n        except ValueError as e:\n            flash(str(e), level='warning')\n\n    def _handle_set_profile_info(self, action, form):\n        \"\"\"\n        Called when changing user profile.\n        \"\"\"\n        assert self.app.currentuser\n        assert action == 'set_profile_info'\n        assert form\n        # Validate form\n        if not form.validate():\n            flash(form.error_message, level='error')\n            return\n        # Update the user's email\n        username = self.app.currentuser.username\n        _logger.info(\"updating user [%s] email [%s]\", username, form.email.data)\n        self.app.currentuser.email = form.email.data\n        # Report success\n        flash(_(\"Profile updated successfully.\"), level='success')\n\n    def render_prefs_panel(self, panelid, action=None, **kwargs):  # @UnusedVariable\n        # Process the parameters.\n        profile_form = UserProfileForm(email=self.app.currentuser.email)\n        password_form = UserPasswordForm()\n        if action == \"set_profile_info\":\n            self._handle_set_profile_info(action, profile_form)\n        elif action == \"set_password\":\n            self._handle_set_password(action, password_form)\n        elif action == \"update_repos\":\n            self.app.currentuser.refresh_repos(delete=True)\n            flash(_(\"Repositories successfully updated\"), level='success')\n        elif action is None:\n            pass\n        else:\n            _logger.warning(\"unknown action: %s\", action)\n            raise cherrypy.NotFound(\"Unknown action\")\n        params = {\n            'profile_form': profile_form,\n            'password_form': password_form,\n        }\n        return \"prefs_general.html\", params\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Dec 30, 2015\n\n@author: Patrik Dufresne\n\"\"\"\n\nimport os\nfrom unittest.mock import ANY, MagicMock\n\nimport cherrypy\n\nimport rdiffweb.test\nfrom rdiffweb.core.store import ADMIN_ROLE, MAINTAINER_ROLE, USER_ROLE\n\n\nclass AbstractAdminTest(rdiffweb.test.WebCase):\n    \"\"\"Class to regroup command method to test admin page.\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        self._quota = {}\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('user_added', self.listener.user_added, priority=50)\n        cherrypy.engine.subscribe('user_attr_changed', self.listener.user_attr_changed, priority=50)\n        cherrypy.engine.subscribe('user_deleted', self.listener.user_deleted, priority=50)\n        cherrypy.engine.subscribe('user_password_changed', self.listener.user_password_changed, priority=50)\n        self.listener.get_disk_quota.side_effect = self._load_quota\n        cherrypy.engine.subscribe('get_disk_quota', self.listener.get_disk_quota, priority=40)\n        self.listener.get_disk_usage.return_value = 0\n        cherrypy.engine.subscribe('get_disk_usage', self.listener.get_disk_usage, priority=40)\n        self.listener.set_disk_quota.side_effect = self._store_quota\n        cherrypy.engine.subscribe('set_disk_quota', self.listener.set_disk_quota, priority=40)\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('user_added', self.listener.user_added)\n        cherrypy.engine.unsubscribe('user_attr_changed', self.listener.user_attr_changed)\n        cherrypy.engine.unsubscribe('user_deleted', self.listener.user_deleted)\n        cherrypy.engine.unsubscribe('user_password_changed', self.listener.user_password_changed)\n        cherrypy.engine.unsubscribe('get_disk_quota', self.listener.get_disk_quota)\n        cherrypy.engine.unsubscribe('get_disk_usage', self.listener.get_disk_usage)\n        cherrypy.engine.unsubscribe('set_disk_quota', self.listener.set_disk_quota)\n        return super().tearDown()\n\n    def _store_quota(self, userobj, value):\n        self._quota[userobj.username] = value\n\n    def _load_quota(self, userobj):\n        return self._quota.get(userobj.username, 0)\n\n    def _add_user(self, username=None, email=None, password=None, user_root=None, role=None):\n        b = {}\n        b['action'] = 'add'\n        if username is not None:\n            b['username'] = username\n        if email is not None:\n            b['email'] = email\n        if password is not None:\n            b['password'] = password\n        if user_root is not None:\n            b['user_root'] = user_root\n        if role is not None:\n            b['role'] = str(role)\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n    def _edit_user(self, username=None, email=None, password=None, user_root=None, role=None, disk_quota=None):\n        b = {}\n        b['action'] = 'edit'\n        if username is not None:\n            b['username'] = username\n        if email is not None:\n            b['email'] = email\n        if password is not None:\n            b['password'] = password\n        if user_root is not None:\n            b['user_root'] = user_root\n        if role is not None:\n            b['role'] = str(role)\n        if disk_quota is not None:\n            b['disk_quota'] = disk_quota\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n    def _delete_user(self, username='test1'):\n        b = {'action': 'delete', 'username': username}\n        self.getPage(\"/admin/users/\", method='POST', body=b)\n\n\nclass AdminUsersAsAdminTest(AbstractAdminTest):\n    \"\"\"Integration test for page_admin\"\"\"\n\n    login = True\n\n    def test_add_user_with_role_admin(self):\n        # When trying to create a new user with role admin\n        self._add_user(\"admin_role\", \"admin_role@test.com\", \"password\", \"/home/\", ADMIN_ROLE)\n        # Then page return success\n        self.assertStatus(200)\n        # Then database is updated\n        userobj = self.app.store.get_user('admin_role')\n        self.assertEqual(ADMIN_ROLE, userobj.role)\n        # Then notification was raised\n        self.listener.user_added.assert_called_once_with(userobj)\n\n    def test_add_user_with_role_maintainer(self):\n        self._add_user(\"maintainer_role\", \"maintainer_role@test.com\", \"password\", \"/home/\", MAINTAINER_ROLE)\n        self.assertStatus(200)\n        self.assertEqual(MAINTAINER_ROLE, self.app.store.get_user('maintainer_role').role)\n\n    def test_add_user_with_role_user(self):\n        self._add_user(\"user_role\", \"user_role@test.com\", \"password\", \"/home/\", USER_ROLE)\n        self.assertStatus(200)\n        self.assertEqual(USER_ROLE, self.app.store.get_user('user_role').role)\n\n    def test_add_user_with_invalid_role(self):\n        # When trying to create a new user with an invalid role (admin instead of 0)\n        self._add_user(\"invalid\", \"invalid@test.com\", \"test1234\", \"/home/\", 'admin')\n        # Then an error message is displayed to the user\n        self.assertStatus(200)\n        self.assertInBody('role: Invalid Choice: could not coerce')\n        # Then listener are not called\n        self.listener.user_added.assert_not_called()\n\n        # When trying to create a new user with an invalid role (-1)\n        self._add_user(\"invalid\", \"invalid@test.com\", \"test2\", \"/home/\", -1)\n        # Then an error message is displayed to the user\n        self.assertStatus(200)\n        self.assertInBody('role: Not a valid choice')\n        # Then listener are not called\n        self.listener.user_added.assert_not_called()\n\n    def test_add_edit_delete(self):\n        #  Add user to be listed\n        self._add_user(\"test2\", \"test2@test.com\", \"test1234\", \"/home/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"test2\")\n        self.assertInBody(\"test2@test.com\")\n        self.listener.user_added.assert_called_once()\n        self.listener.user_password_changed.assert_called_once()\n        self.listener.user_password_changed.reset_mock()\n        #  Update user\n        self._edit_user(\"test2\", \"chaned@test.com\", \"new-password\", \"/tmp/\", ADMIN_ROLE)\n        self.listener.user_attr_changed.assert_called()\n        self.listener.user_password_changed.assert_called_once()\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertInBody(\"test2\")\n        self.assertInBody(\"chaned@test.com\")\n        self.assertNotInBody(\"/home/\")\n        self.assertInBody(\"/tmp/\")\n        #  Check with filters\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertInBody(\"test2\")\n\n        self._delete_user(\"test2\")\n        self.listener.user_deleted.assert_called()\n        self.assertStatus(200)\n        self.assertInBody(\"User account removed.\")\n        self.assertNotInBody(\"test2\")\n\n    def test_add_edit_delete_user_with_encoding(self):\n        \"\"\"\n        Check creation of user with non-ascii char.\n        \"\"\"\n        self._add_user(\"\u00c9ric\", \"\u00e9ric@test.com\", \"password\", \"/home/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"\u00c9ric\")\n        self.assertInBody(\"\u00e9ric@test.com\")\n        # Update user\n        self._edit_user(\"\u00c9ric\", \"eric.l\u00e9tourno@test.com\", \"\u00e9cureuil\", \"/tmp/\", ADMIN_ROLE)\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertInBody(\"\u00c9ric\")\n        self.assertInBody(\"eric.l\u00e9tourno@test.com\")\n        self.assertNotInBody(\"/home/\")\n        self.assertInBody(\"/tmp/\")\n        # Check with filter\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertInBody(\"\u00c9ric\")\n\n        self._delete_user(\"\u00c9ric\")\n        self.assertInBody(\"User account removed.\")\n        self.assertNotInBody(\"\u00c9ric\")\n\n    def test_add_user_with_empty_username(self):\n        \"\"\"\n        Verify failure trying to create user without username.\n        \"\"\"\n        self._add_user(\"\", \"test1@test.com\", \"test1\", \"/tmp/\", USER_ROLE)\n        self.assertStatus(200)\n        self.assertInBody(\"username: This field is required.\")\n\n    def test_add_user_with_existing_username(self):\n        \"\"\"\n        Verify failure trying to add the same user.\n        \"\"\"\n        # Given a user named `test1`\n        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n        # When trying to create a new user with the same name\n        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n        # Then the user list is displayed with an error message.\n        self.assertStatus(200)\n        self.assertInBody(\"User test1 already exists.\")\n\n    def test_add_user_with_invalid_root_directory(self):\n        \"\"\"\n        Verify failure to add a user with invalid root directory.\n        \"\"\"\n        try:\n            self._delete_user(\"test5\")\n        except Exception:\n            pass\n        self._add_user(\"test5\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n        self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n\n    def test_add_without_email(self):\n        #  Add user to be listed\n        self._add_user(\"test2\", None, \"password\", \"/tmp/\", USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n\n    def test_add_without_user_root(self):\n        #  Add user to be listed\n        self._add_user(\"test6\", None, \"password\", None, USER_ROLE)\n        self.assertInBody(\"User added successfully.\")\n\n        user = self.app.store.get_user('test6')\n        self.assertEqual('', user.user_root)\n\n    def test_delete_user_with_not_existing_username(self):\n        \"\"\"\n        Verify failure to delete invalid username.\n        \"\"\"\n        self._delete_user(\"test3\")\n        self.assertInBody(\"User doesn&#39;t exists!\")\n\n    def test_delete_our_self(self):\n        \"\"\"\n        Verify failure to delete our self.\n        \"\"\"\n        self._delete_user(self.USERNAME)\n        self.assertInBody(\"You cannot remove your own account!\")\n\n    def test_delete_user_admin(self):\n        \"\"\"\n        Verify failure to delete our self.\n        \"\"\"\n        # Create another admin user\n        self._add_user('admin2', '', 'password', '', ADMIN_ROLE)\n        self.getPage(\"/logout/\")\n        self._login('admin2', 'password')\n\n        # Try deleting admin user\n        self._delete_user(self.USERNAME)\n        self.assertStatus(200)\n        self.assertInBody(\"can&#39;t delete admin user\")\n\n    def test_change_password_with_too_short(self):\n        self._edit_user(self.USERNAME, password='short')\n        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n\n    def test_change_password_with_too_long(self):\n        new_password = 'a' * 129\n        self._edit_user(self.USERNAME, password=new_password)\n        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n\n    def test_change_admin_password(self):\n        # Given rdiffweb is configured with admin-password option\n        self.app.cfg.admin_password = 'hardcoded'\n        try:\n            # When trying to update admin password\n            self._edit_user('admin', password='new-password')\n            # Then the form is refused with 200 OK with an error message.\n            self.assertStatus(200)\n            self.assertInBody(\"can&#39;t update admin-password defined in configuration file\")\n        finally:\n            self.app.cfg.admin_password = None\n\n    def test_edit_user_with_invalid_path(self):\n        \"\"\"\n        Verify failure trying to update user with invalid path.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self._edit_user(\"test1\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n        self.assertNotInBody(\"User added successfully.\")\n        self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n\n    def test_list(self):\n        self.getPage(\"/admin/users/\")\n        self.assertInBody(\"Users\")\n        self.assertInBody(\"User management\")\n        self.assertInBody(\"Add user\")\n\n    def test_edit_user_with_not_existing_username(self):\n        \"\"\"\n        Verify failure trying to update invalid user.\n        \"\"\"\n        # Given an invalid username\n        username = 'invalid'\n        # When trying to edit the user\n        self._edit_user(username, \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n        # Then the user list is displayed with an error message\n        self.assertStatus(200)\n        self.assertInBody(\"Cannot edit user `invalid`: user doesn&#39;t exists\")\n\n    def test_criteria(self):\n        \"\"\"\n        Check if admin criteria is working.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertNotInBody(\"test1\")\n\n    def test_search(self):\n        \"\"\"\n        Check if user search is working.\n        \"\"\"\n        self.app.store.add_user('test1')\n        self.getPage(\"/admin/users?search=tes\")\n        self.assertInBody(\"test1\")\n        self.getPage(\"/admin/users?search=coucou\")\n        self.assertNotInBody(\"test1\")\n\n    def test_user_invalid_root(self):\n        # Delete all user's\n        for user in self.app.store.users():\n            if user.username != self.USERNAME:\n                user.delete()\n        # Change the user's root\n        user = self.app.store.get_user('admin')\n        user.user_root = \"/invalid\"\n        self.getPage(\"/admin/users\")\n        self.assertInBody(\"Root directory not accessible!\")\n\n        # Query the page by default\n        user = self.app.store.get_user('admin')\n        user.user_root = \"/tmp/\"\n        self.getPage(\"/admin/users\")\n        self.assertNotInBody(\"Root directory not accessible!\")\n\n    def test_get_quota(self):\n        # Mock a quota.\n        self.listener.get_disk_quota.side_effect = None\n        self.listener.get_disk_quota.return_value = 654321\n        # When querying the user list\n        self.getPage(\"/admin/users/?criteria=admins\")\n        self.assertStatus(200)\n        # Then get_disk_quota listenre is called\n        self.listener.get_disk_quota.assert_called()\n        # Then the quota value is displayed in human readable format\n        self.assertInBody(\"638.99 KiB\")\n        self.assertStatus(200)\n\n    def test_set_quota(self):\n        # When updating user quota.\n        self._edit_user(\"admin\", disk_quota='8765432')\n        # Then listenr get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 8765432)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_gib(self):\n        # When updating user quota\n        self._edit_user(\"admin\", disk_quota='1GiB')\n        # Then listern get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 1073741824)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_with_comma(self):\n        # When updating quota with comma value\n        self._edit_user(\"admin\", disk_quota='1,5 GiB')\n        # Then listner get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 1610612736)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_as_with_leading_dot(self):\n        # When updating quota with leading dot\n        self._edit_user(\"admin\", disk_quota='.5 GiB')\n        # Then listener get called\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 536870912)\n        # Then a success message is displayed\n        self.assertInBody(\"User information modified successfully.\")\n        self.assertStatus(200)\n\n    def test_set_quota_empty(self):\n        # When quota is not defined\n        self._edit_user(\"admin\", disk_quota='')\n        # Then listener is not called.\n        self.listener.set_disk_quota.assert_not_called()\n        # Then message is not displayed\n        self.assertStatus(200)\n\n    def test_set_quota_same_value(self):\n        # Given an exiting quota\n        self.listener.get_disk_quota.side_effect = None\n        self.listener.get_disk_quota.return_value = 1234567890\n        # When setting the quota value to the same value\n        self._edit_user(\"admin\", disk_quota='1.15 GiB')\n        #  Then listener is not called\n        self.listener.set_disk_quota.assert_not_called()\n        # Then message is not displayed\n        self.assertStatus(200)\n\n    def test_set_quota_unsupported(self):\n        # Given setting quota is not supported\n        self.listener.set_disk_quota.side_effect = None\n        self.listener.set_disk_quota.return_value = None\n        # When updating the quota\n        self._edit_user(\"admin\", disk_quota='8765432')\n        # Then\n        self.listener.set_disk_quota.assert_called_once_with(ANY, 8765432)\n        self.assertInBody(\"Setting user&#39;s quota is not supported\")\n        self.assertStatus(200)\n\n\nclass AdminUsersAsUserTest(AbstractAdminTest):\n    \"\"\"Integration test for page_admin\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        # Add test user\n        self.app.store.add_user('test', 'test123')\n        self._login('test', 'test123')\n\n    def test_add_user(self):\n        \"\"\"\n        Check if adding user is forbidden.\n        \"\"\"\n        self._add_user(\"test2\", \"test2@test.com\", \"test2\", \"/tmp/\", USER_ROLE)\n        self.assertStatus(403)\n\n    def test_delete_user(self):\n        \"\"\"\n        Check if deleting user is forbidden.\n        \"\"\"\n        self._delete_user(\"test\")\n        self.assertStatus(403)\n\n    def test_edit_user(self):\n        \"\"\"\n        Check if editing user is forbidden.\n        \"\"\"\n        self._edit_user(\"test\", \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n        self.assertStatus(403)\n\n    def test_users(self):\n        \"\"\"\n        Check if listing user is forbidden.\n        \"\"\"\n        self.getPage(\"/admin/users\")\n        self.assertStatus(403)\n\n    def test_repos(self):\n        \"\"\"\n        Check if listing user is forbidden.\n        \"\"\"\n        self.getPage(\"/admin/repos\")\n        self.assertStatus(403)\n\n\nclass AdminWithNoLogsTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_logs(self):\n        self.getPage(\"/admin/logs/\")\n        self.assertStatus(200)\n        self.assertInBody(\"No log files\")\n\n\nclass AdminWithLogsTest(rdiffweb.test.WebCase):\n\n    login = True\n    default_config = {'logfile': '/tmp/rdiffweb.log', 'logaccessfile': '/tmp/rdiffweb-access.log'}\n\n    def test_logs(self):\n        with open('/tmp/rdiffweb.log', 'w') as f:\n            f.write(\"content of log file\")\n        with open('/tmp/rdiffweb-access.log', 'w') as f:\n            f.write(\"content of log file\")\n        try:\n            self.getPage(\"/admin/logs/\")\n            self.assertStatus(200)\n            self.assertInBody(\"rdiffweb.log\")\n            self.assertInBody(\"content of log file\")\n            self.assertInBody(\"rdiffweb-access.log\")\n            self.assertNotInBody(\"Error getting file content\")\n        finally:\n            os.remove('/tmp/rdiffweb.log')\n            os.remove('/tmp/rdiffweb-access.log')\n\n\nclass AdminWithLogMissingTest(rdiffweb.test.WebCase):\n\n    login = True\n    default_config = {'logfile': './rdiffweb.log', 'logaccessfile': './rdiffweb-access.log'}\n\n    def test_logs_with_no_file(self):\n        self.getPage(\"/admin/logs/\")\n        self.assertStatus(200)\n        self.assertInBody(\"rdiffweb.log\")\n        self.assertInBody(\"Error getting file content\")\n\n    def test_logs_with_invalid_file(self):\n        self.getPage(\"/admin/logs/invalid\")\n        self.assertStatus(404)\n\n\nclass AdminReposTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_repos(self):\n        self.getPage(\"/admin/repos\")\n        self.assertStatus(200)\n\n    def test_repos_with_search(self):\n        # Search something that exists\n        self.getPage(\"/admin/repos?search=test\")\n        self.assertStatus(200)\n        self.assertInBody(self.REPO)\n\n        # Search something that doesn't exists\n        self.getPage(\"/admin/repos?search=coucou\")\n        self.assertStatus(200)\n        self.assertNotInBody(self.REPO)\n        self.assertInBody(\"No repository found\")\n\n    def test_repos_with_criteria(self):\n        # Search something that exists\n        self.getPage(\"/admin/repos?criteria=ok\")\n        self.assertStatus(200)\n        self.assertInBody(self.REPO)\n\n        # Search something that exists\n        self.getPage(\"/admin/repos?criteria=failed\")\n        self.assertStatus(200)\n        self.assertNotInBody(self.REPO)\n        self.assertInBody(\"No repository found\")\n\n\nclass AdminSysinfoTest(rdiffweb.test.WebCase):\n\n    login = True\n\n    def test_sysinfo(self):\n        self.getPage(\"/admin/sysinfo\")\n        self.assertStatus(200)\n        self.assertInBody(\"Operating System Info\")\n        self.assertInBody(\"Python Info\")\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\nCreated on Dec 26, 2015\n\n@author: Patrik Dufresne\n\"\"\"\n\nfrom unittest.mock import MagicMock\n\nimport cherrypy\n\nimport rdiffweb.test\nfrom rdiffweb.core.store import _REPOS\n\n\nclass PrefsTest(rdiffweb.test.WebCase):\n\n    PREFS = \"/prefs/\"\n\n    login = True\n\n    def setUp(self):\n        self.listener = MagicMock()\n        cherrypy.engine.subscribe('user_password_changed', self.listener.user_password_changed, priority=50)\n        return super().setUp()\n\n    def tearDown(self):\n        cherrypy.engine.unsubscribe('user_password_changed', self.listener.user_password_changed)\n        return super().tearDown()\n\n    def _set_password(\n        self,\n        current,\n        new_password,\n        confirm,\n    ):\n        b = {\n            'action': 'set_password',\n            'current': current,\n            'new': new_password,\n            'confirm': confirm,\n        }\n        return self.getPage(self.PREFS, method='POST', body=b)\n\n    def _set_profile_info(self, email):\n        b = {\n            'action': 'set_profile_info',\n            'email': email,\n        }\n        return self.getPage(self.PREFS, method='POST', body=b)\n\n    def test_change_email(self):\n        self._set_profile_info(\"test@test.com\")\n        self.assertInBody(\"Profile updated successfully.\")\n\n    def test_change_email_with_invalid_email(self):\n        self._set_profile_info(\"@test.com\")\n        self.assertInBody(\"Invalid email\")\n\n        self._set_profile_info(\"test.com\")\n        self.assertInBody(\"Invalid email\")\n\n        self._set_profile_info(\"test\")\n        self.assertInBody(\"Invalid email\")\n\n        self._set_profile_info(\"test@te_st.com\")\n        self.assertInBody(\"Invalid email\")\n\n        self._set_profile_info(\"test@test.com, test2@test.com\")\n        self.assertInBody(\"Invalid email\")\n\n    def test_change_password(self):\n        # When udating user's password\n        self._set_password(self.PASSWORD, \"newpassword\", \"newpassword\")\n        self.assertInBody(\"Password updated successfully.\")\n        # Then a notification is raised\n        self.listener.user_password_changed.assert_called_once()\n        # Change it back\n        self._set_password(\"newpassword\", self.PASSWORD, self.PASSWORD)\n        self.assertInBody(\"Password updated successfully.\")\n\n    def test_change_password_with_wrong_confirmation(self):\n        self._set_password(self.PASSWORD, \"t\", \"a\")\n        self.assertInBody(\"The new password and its confirmation do not match.\")\n\n    def test_change_password_with_wrong_password(self):\n        self._set_password(\"oups\", \"newpassword\", \"newpassword\")\n        self.assertInBody(\"Wrong password\")\n\n    def test_change_password_with_too_short(self):\n        self._set_password(self.PASSWORD, \"short\", \"short\")\n        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n\n    def test_change_password_with_too_long(self):\n        new_password = 'a' * 129\n        self._set_password(self.PASSWORD, new_password, new_password)\n        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n\n    def test_invalid_pref(self):\n        \"\"\"\n        Check if invalid prefs url is 404 Not Found.\n        \"\"\"\n        self.getPage(\"/prefs/invalid/\")\n        self.assertStatus(404)\n\n    def test_update_repos(self):\n        # Given a user with invalid repositories\n        userobj = self.app.store.get_user(self.USERNAME)\n        with self.app.store.engine.connect() as conn:\n            conn.execute(_REPOS.insert().values(userid=userobj._userid, repopath='invalid'))\n        self.assertEqual(['broker-repo', 'invalid', 'testcases'], sorted([r.name for r in userobj.repo_objs]))\n        # When updating the repository list\n        self.getPage(self.PREFS, method='POST', body={'action': 'update_repos'})\n        self.assertStatus(200)\n        # Then a success message is displayed\n        self.assertInBody('Repositories successfully updated')\n        # Then the list is free of inexisting repos.\n        self.assertEqual(['broker-repo', 'testcases'], sorted([r.name for r in userobj.repo_objs]))\n\n    def test_update_notification(self):\n        self.getPage(\"/prefs/notification/\", method='POST', body={'action': 'set_notification_info', 'testcases': '7'})\n        self.assertStatus(200)\n        # Check database update\n        repo_obj = self.app.store.get_user(self.USERNAME).get_repo(self.REPO)\n        self.assertEqual(7, repo_obj.maxage)\n\n    def test_get_page(self):\n        self.getPage(\"/prefs/\", method='GET')\n        self.assertInBody(\"SSH\")\n\n\nclass PrefsWithSSHKeyDisabled(rdiffweb.test.WebCase):\n\n    default_config = {\n        \"disable_ssh_keys\": \"true\",\n    }\n\n    def test_get_page(self):\n        self.getPage(\"/prefs/\", method='GET')\n        self.assertNotInBody(\"SSH\")\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport argparse\nimport logging\nimport re\nimport sys\nfrom collections import OrderedDict\n\nimport cherrypy\nimport configargparse\nimport pkg_resources\nfrom cherrypy import Application\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\n# Get rdiffweb version.\ntry:\n    VERSION = pkg_resources.get_distribution(\"rdiffweb\").version\nexcept pkg_resources.DistributionNotFound:\n    VERSION = \"DEV\"\n\n\ndef get_parser():\n    # Get global config argument parser\n    parser = configargparse.ArgumentParser(\n        prog='rdiffweb',\n        description='Web interface to browse and restore rdiff-backup repositories.',\n        default_config_files=['/etc/rdiffweb/rdw.conf', '/etc/rdiffweb/rdw.conf.d/*.conf'],\n        add_env_var_help=True,\n        auto_env_var_prefix='RDIFFWEB_',\n        config_file_parser_class=ConfigFileParser,\n        conflict_handler='resolve',\n    )\n\n    parser.add_argument(\n        '-f', '--config', is_config_file=True, metavar='FILE', help='location of Rdiffweb configuration file'\n    )\n\n    parser.add(\n        '--database-uri',\n        '--sqlitedb-file',\n        '--sqlitedbfile',\n        metavar='URI',\n        help=\"\"\"Location of the database used for persistence. SQLite and PostgreSQL\n            database are supported officially. To use a SQLite database you may\n            define the location using a file path or a URI.\n            e.g.: /srv/rdiffweb/file.db or sqlite:///srv/rdiffweb/file.db`.\n            To use PostgreSQL server you must provide\n            a URI similar to postgresql://user:pass@10.255.1.34/dbname and you\n            must install required dependencies.\n            By default, Rdiffweb uses a SQLite embedded database located at\n            /etc/rdiffweb/rdw.db.\"\"\",\n        default='/etc/rdiffweb/rdw.db',\n    )\n\n    parser.add_argument(\n        '-d',\n        '--debug',\n        action='store_true',\n        help='enable rdiffweb debug mode - change the log level to DEBUG, print exception stack trace to the web interface and show SQL query in logs',\n    )\n\n    parser.add_argument(\n        '--admin-user',\n        '--adminuser',\n        metavar='USERNAME',\n        help='administrator username. The administrator user get created on startup if the database is empty.',\n        default='admin',\n    )\n\n    parser.add_argument(\n        '--admin-password',\n        metavar='USERNAME',\n        help=\"\"\"administrator encrypted password as SSHA. Read online\n            documentation to know more about how to encrypt your password\n            into SSHA or use http://projects.marsching.org/weave4j/util/genpassword.php\n            When defined, administrator password cannot be updated using the web interface.\n            When undefined, default administrator password is `admin123` and\n            it can be updated using the web interface.\"\"\",\n    )\n\n    parser.add_argument(\n        '--default-theme',\n        '--defaulttheme',\n        help='define the default theme. Either: default, blue or orange. Define the CSS file to be loaded in the web interface. You may manually edit a CSS file to customize it. The location is similar to `/usr/local/lib/python3.9/dist-packages/rdiffweb/static/`',\n        choices=['default', 'blue', 'orange'],\n        default='default',\n    )\n\n    parser.add_argument(\n        '--environment',\n        choices=['development', 'production'],\n        help='define the type of environment: development, production. This is used to limit the information shown to the user when an error occur.',\n        default='production',\n    )\n\n    parser.add_argument(\n        '--email-encryption',\n        '--emailencryption',\n        choices=['none', 'ssl', 'starttls'],\n        help='type of encryption to be used when establishing communication with SMTP server. Default: none',\n        default='none',\n    )\n\n    parser.add_argument(\n        '--email-host',\n        '--emailhost',\n        metavar='HOST',\n        help='SMTP server used to send email in the form <host>:<port>. If the port is not provided, default to standard port 25 or 465 is used. e.g.: smtp.gmail.com:587',\n    )\n\n    parser.add_argument(\n        '--email-sender',\n        '--emailsender',\n        metavar='EMAIL',\n        help='email addres used for the `from:` field when sending email.',\n    )\n\n    parser.add_argument(\n        '--email-notification-time',\n        '--emailnotificationtime',\n        metavar='TIME',\n        help='time when the email notifcation should be sent for inactive backups. e.g.: 22:00 Default value: 23:00',\n        default='23:00',\n    )\n\n    parser.add_argument(\n        '--email-username',\n        '--emailusername',\n        metavar='USERNAME',\n        help='username used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-password',\n        '--emailpassword',\n        metavar='PASSWORD',\n        help='password used for authentication with the SMTP server.',\n    )\n\n    parser.add_argument(\n        '--email-send-changed-notification',\n        '--emailsendchangednotification',\n        help='True to send notification when sensitive information get change in user profile.',\n        action='store_true',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--favicon',\n        help='location of an icon to be used as a favicon displayed in web browser.',\n        default=pkg_resources.resource_filename('rdiffweb', 'static/favicon.ico'),\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-name', '--footername', help=argparse.SUPPRESS, default='rdiffweb'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--footer-url', '--footerurl', help=argparse.SUPPRESS, default='https://rdiffweb.org/'\n    )  # @UndefinedVariable\n\n    parser.add_argument(\n        '--header-logo',\n        '--headerlogo',\n        help='location of an image (preferably a .png) to be used as a replacement for the rdiffweb logo.',\n    )\n\n    parser.add_argument(\n        '--header-name',\n        '--headername',\n        help='application name displayed in the title bar and header menu.',\n        default='rdiffweb',\n    )\n\n    parser.add_argument(\n        '--ldap-add-missing-user',\n        '--addmissinguser',\n        action='store_true',\n        help='enable creation of users from LDAP when the credential are valid.',\n        default=False,\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-role',\n        help='default role used when creating users from LDAP. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='user',\n        choices=['admin', 'maintainer', 'user'],\n    )\n\n    parser.add_argument(\n        '--ldap-add-user-default-userroot',\n        help='default user root directory used when creating users from LDAP. LDAP attributes may be used to define the default location. e.g.: `/backups/{uid[0]}/`. This parameter is only useful when `--ldap-add-missing-user` is enabled.',\n        default='',\n    )\n\n    parser.add_argument(\n        '--ldap-uri',\n        '--ldapuri',\n        help='URL to the LDAP server used to validate user credentials. e.g.: ldap://localhost:389',\n    )\n\n    parser.add_argument(\n        '--ldap-base-dn',\n        '--ldapbasedn',\n        metavar='DN',\n        help='DN of the branch of the directory where all searches should start from. e.g.: dc=my,dc=domain',\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-scope',\n        '--ldapscope',\n        help='scope of the search. Can be either base, onelevel or subtree',\n        choices=['base', 'onelevel', 'subtree'],\n        default=\"subtree\",\n    )\n\n    parser.add_argument('--ldap-tls', '--ldaptls', action='store_true', help='enable TLS')\n\n    parser.add_argument(\n        '--ldap-username-attribute',\n        '--ldapattribute',\n        metavar='ATTRIBUTE',\n        help=\"The attribute to search username. If no attributes are provided, the default is to use `uid`. It's a good idea to choose an attribute that will be unique across all entries in the subtree you will be using.\",\n        default='uid',\n    )\n\n    parser.add_argument(\n        '--ldap-filter',\n        '--ldapfilter',\n        help=\"search filter to limit LDAP lookup. If not provided, defaults to (objectClass=*), which searches for all objects in the tree.\",\n        default='(objectClass=*)',\n    )\n\n    parser.add_argument(\n        '--ldap-required-group',\n        '--ldaprequiredgroup',\n        metavar='GROUPNAME',\n        help=\"name of the group of which the user must be a member to access rdiffweb. Should be used with ldap-group-attribute and ldap-group-attribute-is-dn.\",\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute',\n        '--ldapgroupattribute',\n        metavar='ATTRIBUTE',\n        help=\"name of the attribute defining the groups of which the user is a member. Should be used with ldap-required-group and ldap-group-attribute-is-dn.\",\n        default='member',\n    )\n\n    parser.add_argument(\n        '--ldap-group-attribute-is-dn',\n        '--ldapgroupattributeisdn',\n        help=\"True if the content of the attribute `ldap-group-attribute` is a DN.\",\n        action='store_true',\n    )\n\n    parser.add_argument(\n        '--ldap-bind-dn',\n        '--ldapbinddn',\n        metavar='DN',\n        help=\"optional DN used to bind to the server when searching for entries. If not provided, will use an anonymous bind.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-bind-password',\n        '--ldapbindpassword',\n        metavar='PASSWORD',\n        help=\"password to use in conjunction with LdapBindDn. Note that the bind password is probably sensitive data, and should be properly protected. You should only use the LdapBindDn and LdapBindPassword if you absolutely need them to search the directory.\",\n        default=\"\",\n    )\n\n    parser.add_argument(\n        '--ldap-version',\n        '--ldapversion',\n        '--ldapprotocolversion',\n        help=\"version of LDAP in use either 2 or 3. Default to 3.\",\n        default=3,\n        type=int,\n        choices=[2, 3],\n    )\n\n    parser.add_argument(\n        '--ldap-network-timeout',\n        '--ldapnetworktimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP connection\",\n        default=100,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-timeout',\n        '--ldaptimeout',\n        metavar='SECONDS',\n        help=\"timeout in seconds value used for LDAP request\",\n        default=300,\n        type=int,\n    )\n\n    parser.add_argument(\n        '--ldap-encoding',\n        '--ldapencoding',\n        metavar='ENCODING',\n        help=\"encoding used by your LDAP server.\",\n        default=\"utf-8\",\n    )\n\n    parser.add_argument(\n        '--log-access-file', '--logaccessfile', metavar='FILE', help='location of Rdiffweb log access file.'\n    )\n\n    parser.add_argument(\n        '--log-file',\n        '--logfile',\n        metavar='FILE',\n        help='location of Rdiffweb log file. Print log to the console if not define in config file.',\n    )\n\n    parser.add_argument(\n        '--log-level',\n        '--loglevel',\n        help='Define the log level.',\n        choices=['ERROR', 'WARN', 'INFO', 'DEBUG'],\n        default='INFO',\n    )\n\n    parser.add_argument(\n        '--max-depth',\n        '--maxdepth',\n        metavar='DEPTH',\n        help=\"define the maximum folder depthness to search into the user's root directory to find repositories. This is commonly used if you repositories are organised with multiple sub-folder.\",\n        type=int,\n        default=3,\n    )\n\n    parser.add('--quota-set-cmd', '--quotasetcmd', metavar='COMMAND', help=\"command line to set the user's quota.\")\n\n    parser.add('--quota-get-cmd', '--quotagetcmd', metavar='COMMAND', help=\"command line to get the user's quota.\")\n\n    parser.add(\n        '--quota-used-cmd', '--quotausedcmd', metavar='COMMAND', help=\"Command line to get user's quota disk usage.\"\n    )\n\n    parser.add(\n        '--remove-older-time',\n        '--removeoldertime',\n        metavar='TIME',\n        help=\"Time when to execute the remove older scheduled job. e.g.: 22:30\",\n        default='23:00',\n    )\n\n    parser.add('--server-host', '--serverhost', metavar='IP', default='127.0.0.1', help='IP address to listen to')\n\n    parser.add(\n        '--server-port',\n        '--serverport',\n        metavar='PORT',\n        help='port to listen to for HTTP request',\n        default='8080',\n        type=int,\n    )\n\n    parser.add(\n        '--session-dir',\n        '--sessiondir',\n        metavar='FOLDER',\n        help='location where to store user session information. When undefined, the user sessions are kept in memory.',\n    )\n\n    parser.add(\n        '--rate-limit',\n        metavar='LIMIT',\n        type=int,\n        default=10,\n        help='maximum number of requests per minute that can be made by an IP address for an unauthenticated connection. When this limit is reached, an HTTP 429 message is returned to the user. This security measure is used to limit brute force attacks on the login page and the RESTful API.',\n    )\n\n    parser.add(\n        '--ssl-certificate',\n        '--sslcertificate',\n        metavar='CERT',\n        help='location of the SSL Certification to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--ssl-private-key',\n        '--sslprivatekey',\n        metavar='KEY',\n        help='location of the SSL Private Key to enable HTTPS (not recommended)',\n    )\n\n    parser.add(\n        '--tempdir',\n        metavar='FOLDER',\n        help='alternate temporary folder to be used when restoring files. Might be useful if the default location has limited disk space. Default to TEMPDIR environment or `/tmp`.',\n    )\n\n    parser.add(\n        '--disable-ssh-keys',\n        action='store_true',\n        help='used to hide SSH Key management to avoid users to add or remove SSH Key using the web application',\n        default=False,\n    )\n\n    parser.add(\n        '--password-min-length',\n        type=int,\n        help=\"Minimum length of the user's password\",\n        default=8,\n    )\n\n    parser.add(\n        '--password-max-length',\n        type=int,\n        help=\"Maximum length of the user's password\",\n        default=128,\n    )\n\n    parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)\n\n    # Here we append a list of arguments for each locale.\n    flags = ['--welcome-msg'] + ['--welcome-msg-' + i for i in ['ca', 'en', 'es', 'fr', 'ru']] + ['--welcomemsg']\n    parser.add_argument(\n        *flags,\n        metavar='HTML',\n        help='replace the welcome message displayed in the login page for default locale or for a specific locale',\n        action=LocaleAction\n    )\n    return parser\n\n\ndef parse_args(args=None, config_file_contents=None):\n    args = sys.argv[1:] if args is None else args\n    return get_parser().parse_args(args, config_file_contents=config_file_contents)\n\n\nclass LocaleAction(argparse.Action):\n    \"\"\"\n    Custom Action to support defining arguments with locale.\n    \"\"\"\n\n    def __init__(self, option_strings, dest, nargs=None, **kwargs):\n        super(LocaleAction, self).__init__(option_strings, dest, **kwargs)\n\n    def __call__(self, parser, namespace, value, option_string=None):\n        if option_string[-3] == '-':\n            # When using arguments, we can extract the locale from the argument key\n            locale = option_string[-2:]\n        elif value[2] == ':':\n            # When using config file, the locale could be extract from the value e.g. fr:message\n            locale = value[0:2]\n            value = value[3:]\n        else:\n            locale = ''\n        # Create a dictionary with locale.\n        items = getattr(namespace, self.dest) or {}\n        items[locale] = value\n        setattr(namespace, self.dest, items)\n\n\nclass ConfigFileParser(object):\n    \"\"\"\n    Custom config file parser to support rdiffweb config file format.\n    \"\"\"\n\n    def get_syntax_description(self):\n        msg = \"Configuration file syntax allows: key=value, flag=true.\"\n        return msg\n\n    def parse(self, stream):\n        \"\"\"\n        Used to read the rdiffweb config file as dict.\n        \"\"\"\n\n        result = OrderedDict()\n\n        for i, line in enumerate(stream):\n            line = re.compile(\"(.*?)#.*\").sub(r'\\1', line).strip()\n            if not line:\n                continue\n            if '=' not in line:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n            split_line = line.partition('=')\n            if not len(split_line) == 3:\n                raise configargparse.ConfigFileParserException(\n                    \"Unexpected line {} in {}: {}\".format(i, getattr(stream, 'name', 'stream'), line)\n                )\n\n            # Get key a& value\n            key = split_line[0].lower().strip().replace('_', '-')\n            value = split_line[2].strip()\n\n            # Support welcome-msg locale for backward compatibility\n            m = re.match(\"welcome-?msg\\\\[(ca|en|es|fr|ru)\\\\]\", key.lower())\n            if m:\n                key = \"welcome-msg-\" + m.group(1)\n                value = m.group(1) + \":\" + value\n\n            result[key] = value\n\n        # This dictionary is read by cherrypy. So create appropriate structure.\n        return result\n\n\nclass Option(object):\n    def __init__(self, key):\n        assert key\n        self.key = key\n\n    def __get__(self, instance, owner):\n        \"\"\"\n        Return a property to wrap the given option.\n        \"\"\"\n        return self.get(instance)\n\n    def get(self, instance=None):\n        \"\"\"\n        Return the value of this options.\n        \"\"\"\n        if isinstance(instance, Application):\n            app = instance\n        else:\n            app = cherrypy.request.app or getattr(instance, 'app', None)\n        assert app, \"Option() can't get reference to app\"\n        assert app.cfg, \"Option() can't get reference to app.cfg\"\n        return getattr(app.cfg, self.key)\n", "# -*- coding: utf-8 -*-\n# rdiffweb, A web interface to rdiff-backup repositories\n# Copyright (C) 2012-2021 rdiffweb contributors\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport codecs\nimport encodings\nimport logging\nimport os\nimport sys\nfrom io import open\n\nimport cherrypy\nfrom cherrypy.process.plugins import SimplePlugin\nfrom sqlalchemy import Column, Integer, MetaData, SmallInteger, String, Table, Text, create_engine\nfrom sqlalchemy.exc import IntegrityError\nfrom sqlalchemy.sql.expression import and_, or_, select\nfrom sqlalchemy.sql.functions import count\n\nfrom rdiffweb.core import RdiffError, authorizedkeys\nfrom rdiffweb.core.config import Option\nfrom rdiffweb.core.librdiff import AccessDeniedError, DoesNotExistError, RdiffRepo\nfrom rdiffweb.core.passwd import check_password, hash_password\nfrom rdiffweb.tools.i18n import ugettext as _\n\n# Define the logger\nlogger = logging.getLogger(__name__)\n\nSEP = b'/'\n\nDEFAULT_REPO_ENCODING = codecs.lookup((sys.getfilesystemencoding() or 'utf-8').lower()).name\n\n# Define roles\nADMIN_ROLE = 0\nMAINTAINER_ROLE = 5\nUSER_ROLE = 10\nROLES = {\n    'admin': ADMIN_ROLE,\n    'maintainer': MAINTAINER_ROLE,\n    'user': USER_ROLE,\n}\n\n# Define SQLAlchemy metadata\n_META = MetaData()\n_USERS = Table(\n    'users',\n    _META,\n    Column('UserID', Integer, key='userid', primary_key=True),\n    Column('Username', String, key='username', nullable=False, unique=True),\n    Column('Password', String, key='password', nullable=False, server_default=\"\"),\n    Column('UserRoot', String, key='user_root', nullable=False, server_default=\"\"),\n    Column(\n        'IsAdmin',\n        SmallInteger,\n        key='is_admin',\n        nullable=False,\n        server_default=\"0\",\n        doc=\"DEPRECATED This column is replaced by 'role'\",\n    ),\n    Column('UserEmail', String, key='email', nullable=False, server_default=\"\"),\n    Column(\n        'RestoreFormat',\n        SmallInteger,\n        nullable=False,\n        server_default=\"1\",\n        doc=\"DEPRECATED This column is not used anymore\",\n    ),\n    Column('role', SmallInteger, nullable=False, server_default=str(USER_ROLE)),\n    sqlite_autoincrement=True,\n)\n\n_REPOS = Table(\n    'repos',\n    _META,\n    Column('RepoID', Integer, key='repoid', primary_key=True, autoincrement=True),\n    Column('UserID', Integer, key='userid', nullable=False),\n    Column('RepoPath', String, key='repopath', nullable=False),\n    Column('MaxAge', SmallInteger, key='maxage', nullable=False, server_default=\"0\"),\n    Column('Encoding', String, key='encoding'),\n    Column('keepdays', String, nullable=False, server_default=\"\"),\n    sqlite_autoincrement=True,\n)\n\n_SSHKEYS = Table(\n    'sshkeys',\n    _META,\n    Column('Fingerprint', Text, key='fingerprint'),\n    Column('Key', Text, key='key', unique=True),\n    Column('UserID', Integer, key='userid', nullable=False),\n)\n\n\ndef _split_path(path):\n    \"\"\"\n    Split the given path into <username as str> / <path as bytes>\n    \"\"\"\n    # First part is the username\n    assert path\n    if isinstance(path, str):\n        path = os.fsencode(path)\n    path = path.strip(b'/')\n    if b'/' in path:\n        username, path = path.split(b'/', 1)\n        return username.decode('utf-8'), path\n    else:\n        return path.decode('utf-8'), b''\n\n\nclass DuplicateSSHKeyError(Exception):\n    \"\"\"\n    Raised by add_authorizedkey when trying to add the same SSH Key twice.\n    \"\"\"\n\n    pass\n\n\nclass UserObject(object):\n    \"\"\"Represent an instance of user.\"\"\"\n\n    _ATTRS = ['username', 'role', 'email', 'user_root', 'password']\n\n    def __init__(self, store, data):\n        \"\"\"\n        Create a new UserObject from a username or a record.\n\n        `data` a dict or a SQLAlchemy row.\n\n        \"\"\"\n        assert store\n        assert 'userid' in data\n        self._store = store\n        self._record = {k: data[k] for k in self._ATTRS}\n        self._userid = data[_USERS.c.userid]\n\n    def add_authorizedkey(self, key, comment=None):\n        \"\"\"\n        Add the given key to the user. Adding the key to his `authorized_keys`\n        file if it exists and adding it to database.\n        \"\"\"\n        # Parse and validate ssh key\n        assert key\n        key = authorizedkeys.check_publickey(key)\n\n        # Remove option, replace comments.\n        key = authorizedkeys.AuthorizedKey(\n            options=None, keytype=key.keytype, key=key.key, comment=comment or key.comment\n        )\n\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            with open(filename, mode=\"r+\", encoding='utf-8') as fh:\n                if authorizedkeys.exists(fh, key):\n                    raise DuplicateSSHKeyError(_(\"SSH key already exists\"))\n                logger.info(\"add key [%s] to [%s] authorized_keys\", key, self.username)\n                authorizedkeys.add(fh, key)\n        else:\n            # Also look in database.\n            logger.info(\"add key [%s] to [%s] database\", key, self.username)\n            try:\n                with self._store.engine.connect() as conn:\n                    conn.execute(\n                        _SSHKEYS.insert().values(userid=self._userid, fingerprint=key.fingerprint, key=key.getvalue())\n                    )\n            except IntegrityError:\n                raise DuplicateSSHKeyError(\n                    _(\"Duplicate key. This key already exists or is associated to another user.\")\n                )\n        self._store.bus.publish('user_attr_changed', self, {'authorizedkeys': True})\n\n    def valid_user_root(self):\n        \"\"\"\n        Check if the current user_root is valid and readable\n        \"\"\"\n        try:\n            return os.access(self.user_root, os.F_OK) and os.path.isdir(self.user_root)\n        except Exception:\n            return False\n\n    def delete(self):\n        \"\"\"\n        Delete the given user from password store.\n\n        Return True if the user was deleted.\n        Return False if the user didn't exists.\n        Raise a ValueError when trying to delete the admin user.\n        \"\"\"\n        # Make sure we are not trying to delete the admin user.\n        if self.username == self._store._admin_user:\n            raise ValueError(_(\"can't delete admin user\"))\n\n        # Delete user from database (required).\n        logger.info(\"deleting user [%s] from database\", self.username)\n        with self._store.engine.connect() as conn:\n            conn.execute(_SSHKEYS.delete(_SSHKEYS.c.userid == self._userid))\n            conn.execute(_REPOS.delete(_REPOS.c.userid == self._userid))\n            deleted = conn.execute(_USERS.delete(_USERS.c.userid == self._userid))\n            assert deleted.rowcount, 'fail to delete user'\n        self._store.bus.publish('user_deleted', self.username)\n        return True\n\n    def delete_authorizedkey(self, fingerprint):\n        \"\"\"\n        Remove the given key from the user. Remove the key from his\n        `authorized_keys` file if it exists and from database database.\n        \"\"\"\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            with open(filename, mode='r+', encoding='utf-8') as fh:\n                logger.info(\"removing key [%s] from [%s] authorized_keys\", fingerprint, self.username)\n                authorizedkeys.remove(fh, fingerprint)\n        else:\n            # Also look in database.\n            logger.info(\"removing key [%s] from [%s] database\", fingerprint, self.username)\n            with self._store.engine.connect() as conn:\n                conn.execute(\n                    _SSHKEYS.delete(and_(_SSHKEYS.c.userid == self._userid, _SSHKEYS.c.fingerprint == fingerprint))\n                )\n        self._store.bus.publish('user_attr_changed', self, {'authorizedkeys': True})\n\n    @property\n    def disk_usage(self):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return 0\n        values = self._store.bus.publish('get_disk_usage', self)\n        # Return the first not None value\n        return next((v for v in values if v is not None), 0)\n\n    @property\n    def disk_quota(self):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return 0\n        values = self._store.bus.publish('get_disk_quota', self)\n        # Return the first not None value\n        return next((v for v in values if v is not None), 0)\n\n    @disk_quota.setter\n    def disk_quota(self, value):\n        # Skip if user_root is invalid.\n        if not self.user_root or not os.path.exists(self.user_root):\n            return\n        self._store.bus.publish('set_disk_quota', self, value)\n\n    def __eq__(self, other):\n        return isinstance(other, UserObject) and self._userid == other._userid\n\n    def __str__(self):\n        return 'UserObject(%s)' % self._userid\n\n    def _get_attr(self, key):\n        \"\"\"Return user's attribute\"\"\"\n        assert key in self._ATTRS, \"invalid attribute: \" + key\n        return self._record[key]\n\n    def _get_authorizedkeys(self):\n        \"\"\"\n        Return an iterator on the authorized key. Either from his\n        `authorized_keys` file if it exists or from database.\n        \"\"\"\n        # If a filename exists, use it by default.\n        filename = os.path.join(self.user_root, '.ssh', 'authorized_keys')\n        if os.path.isfile(filename):\n            for k in authorizedkeys.read(filename):\n                yield k\n\n        # Also look in database.\n        with self._store.engine.connect() as conn:\n            result = conn.execute(_SSHKEYS.select(_SSHKEYS.c.userid == self._userid))\n            for record in result:\n                yield authorizedkeys.check_publickey(record['key'])\n\n    def get_repo(self, repopath, refresh=False):\n        \"\"\"\n        Return a repo object.\n        \"\"\"\n        assert isinstance(repopath, bytes) or isinstance(repopath, str)\n        if isinstance(repopath, bytes):\n            repopath = os.fsdecode(repopath)\n        repopath = repopath.strip('/')\n\n        if refresh:\n            self.refresh_repos()\n\n        # Search the repo in database\n        with self._store.engine.connect() as conn:\n            result = conn.execute(_REPOS.select(and_(_REPOS.c.userid == self.userid, _REPOS.c.repopath == repopath)))\n            record = result.fetchone()\n        if record:\n            return RepoObject(self, record)\n\n        raise DoesNotExistError(self.userid, repopath)\n\n    def get_repo_objs(self, refresh=False):\n        \"\"\"\n        Return list of repository object.\n        \"\"\"\n        if refresh:\n            self.refresh_repos()\n        with self._store.engine.connect() as conn:\n            records = conn.execute(_REPOS.select(_REPOS.c.userid == self._userid).order_by(_REPOS.c.repopath))\n            return [RepoObject(self, record) for record in records]\n\n    def refresh_repos(self, delete=False):\n        \"\"\"\n        Return list of repositories object to reflect the filesystem folders.\n\n        Return a RepoObject for each sub directories under `user_root` with `rdiff-backup-data`.\n        \"\"\"\n\n        with self._store.engine.connect() as conn:\n\n            # Update the repositories by walking in the directory tree.\n            def _onerror(unused):\n                logger.error('error updating user [%s] repos' % self.username, exc_info=1)\n\n            dirty = False\n            records = list(conn.execute(_REPOS.select(_REPOS.c.userid == self._userid).order_by(_REPOS.c.repopath)))\n            user_root = os.fsencode(self.user_root)\n            for root, dirs, unused_files in os.walk(user_root, _onerror):\n                for name in dirs.copy():\n                    if name.startswith(b'.'):\n                        dirs.remove(name)\n                if b'rdiff-backup-data' in dirs:\n                    repopath = os.path.relpath(root, start=user_root)\n                    del dirs[:]\n                    # Handle special scenario when the repo is the\n                    # user_root\n                    repopath = b'' if repopath == b'.' else repopath\n\n                    # Check if repo path exists.\n                    record_match = next(\n                        (record for record in records if record['repopath'] == os.fsdecode(repopath)), None\n                    )\n                    if not record_match:\n                        # Add repository to database.\n                        conn.execute(_REPOS.insert().values(userid=self._userid, repopath=os.fsdecode(repopath)))\n                        dirty = True\n                    else:\n                        records.remove(record_match)\n                if root.count(SEP) - user_root.count(SEP) >= self._store._max_depth:\n                    del dirs[:]\n            # If enabled, remove entried from database\n            if delete:\n                for record in records:\n                    conn.execute(_REPOS.delete(_REPOS.c.repoid == record['repoid']))\n        return dirty\n\n    @property\n    def is_ldap(self):\n        \"\"\"Return True if this user is an LDAP user. (with a password)\"\"\"\n        return not self._get_attr('password')\n\n    def _is_role(self, role):\n        assert role in ROLES.values()\n        try:\n            return int(self._get_attr('role')) <= role\n        except ValueError:\n            return False\n\n    def _set_attr(self, key, new_value, notify=True):\n        \"\"\"Used to define an attribute\"\"\"\n        assert key in self._ATTRS, \"invalid attribute: \" + key\n        # Skip database update if the value is the same\n        if self._record[key] == new_value:\n            return\n        # Update database and object internal state.\n        with self._store.engine.connect() as conn:\n            updated = conn.execute(_USERS.update().where(_USERS.c.userid == self._userid).values(**{key: new_value}))\n            assert updated.rowcount\n        old_value = self._record[key]\n        self._record[key] = new_value\n        # Call notification listener\n        if notify:\n            self._store.bus.publish('user_attr_changed', self, {key: (old_value, new_value)})\n\n    def set_password(self, password, old_password=None):\n        \"\"\"\n        Change the user's password. Raise a ValueError if the username or\n        the password are invalid.\n        \"\"\"\n        assert isinstance(password, str)\n        assert old_password is None or isinstance(old_password, str)\n        if not password:\n            raise ValueError(\"password can't be empty\")\n        cfg = self._store.app.cfg\n        if cfg.password_min_length > len(password) > cfg.password_max_length:\n            raise ValueError(\"invalid password length\")\n\n        # Cannot update admin-password if defined\n        if self.username == self._store._admin_user and self._store._admin_password:\n            raise ValueError(_(\"can't update admin-password defined in configuration file\"))\n\n        if old_password and not check_password(old_password, self.hash_password):\n            raise ValueError(_(\"Wrong password\"))\n\n        logger.info(\"updating user password [%s]\", self.username)\n        self.hash_password = hash_password(password)\n        self._store.bus.publish('user_password_changed', self)\n\n    def _set_user_root(self, value):\n        \"\"\"\n        Used to take care of updating the user_root.\n\n        When user_root get update, we also want to update the repository list\n        to reflect the filesystem.\n        \"\"\"\n        # Update the value\n        self._set_attr('user_root', value)\n        # Refresh the list of repository.\n        self.refresh_repos()\n\n    # Declare properties\n    userid = property(fget=lambda x: x._userid)\n    is_admin = property(fget=lambda x: x._is_role(ADMIN_ROLE))\n    is_maintainer = property(fget=lambda x: x._is_role(MAINTAINER_ROLE))\n    email = property(fget=lambda x: x._get_attr('email'), fset=lambda x, y: x._set_attr('email', y))\n    user_root = property(fget=lambda x: x._get_attr('user_root'), fset=lambda x, y: x._set_user_root(y))\n    username = property(fget=lambda x: x._get_attr('username'))\n    role = property(fget=lambda x: x._get_attr('role'), fset=lambda x, y: x._set_attr('role', int(y)))\n    authorizedkeys = property(fget=lambda x: x._get_authorizedkeys())\n    repo_objs = property(fget=lambda x: x.get_repo_objs(refresh=False))\n    hash_password = property(\n        fget=lambda x: x._get_attr('password'), fset=lambda x, y: x._set_attr('password', y, notify=False)\n    )\n\n\nclass RepoObject(RdiffRepo):\n    \"\"\"Represent a repository.\"\"\"\n\n    _ATTRS = ['encoding', 'maxage', 'keepdays']\n\n    def __init__(self, user_obj, data):\n        \"\"\"\n        Create a new repository object\n\n        `data` a dict or a SQLAlchemy row.\n\n        \"\"\"\n        assert user_obj\n        assert 'repoid' in data\n        assert 'repopath' in data\n        self._user_obj = user_obj\n        self._repoid = data['repoid']\n        self._repo = data['repopath']\n        self._record = {k: data[k] for k in self._ATTRS}\n        RdiffRepo.__init__(self, user_obj.user_root, self._repo, encoding=DEFAULT_REPO_ENCODING)\n        self._encoding = self._get_encoding()\n\n    def __eq__(self, other):\n        return (\n            isinstance(other, RepoObject)\n            and self._user_obj._userid == other._user_obj._userid\n            and self._repo == other._repo\n        )\n\n    def __str__(self):\n        return 'RepoObject[%s, %s]' % (self._user_obj._userid, self._repo)\n\n    def _set_attr(self, key, value):\n        \"\"\"Used to define an attribute to the repository.\"\"\"\n        assert key in self._ATTRS, 'invalid attribute:' + key\n        if key in ['maxage', 'keepdays']:\n            value = int(value)\n        with self._user_obj._store.engine.connect() as conn:\n            updated = conn.execute(_REPOS.update().where(_REPOS.c.repoid == self._repoid).values(**{key: value}))\n            assert updated.rowcount, 'update failed'\n        self._record[key] = value\n\n    def _get_attr(self, key, default=None):\n        assert key in self._ATTRS, 'invalid attribute:' + key\n        value = self._record.get(key, default)\n        if key in ['maxage', 'keepdays']:\n            return int(value) if value else default\n        return value\n\n    @property\n    def displayname(self):\n        # Repository displayName is the \"repopath\" too.\n        return self._repo.strip('/')\n\n    @property\n    def name(self):\n        # Repository name is the \"repopath\"\n        return self._repo\n\n    @property\n    def owner(self):\n        return self._user_obj.username\n\n    def _get_encoding(self):\n        \"\"\"Return the repository encoding in a normalized format (lowercase and replace - by _).\"\"\"\n        # For backward compatibility, look into the database and fallback to\n        # the rdiffweb config file in the repo.\n        encoding = self._get_attr('encoding')\n        if encoding:\n            return encodings.search_function(encoding.lower())\n\n        # Fallback to default encoding.\n        return encodings.search_function(DEFAULT_REPO_ENCODING)\n\n    def _set_encoding(self, value):\n        \"\"\"Change the repository encoding\"\"\"\n        # Validate if the value is a valid encoding before updating the database.\n        codec = encodings.search_function(value.lower())\n        if not codec:\n            raise ValueError(_('invalid encoding %s') % value)\n\n        logger.info(\"updating repository %s encoding %s\", self, codec.name)\n        self._set_attr('encoding', codec.name)\n        self._encoding = codec\n\n    def delete_repo(self):\n        \"\"\"Properly remove the given repository by updating the user's repositories.\"\"\"\n        logger.info(\"deleting repository %s\", self)\n        # Remove data from disk in background\n        super().delete_repo()\n        # Remove entry from database after deleting files.\n        # Otherwise, refresh will add this repo back.\n        with self._user_obj._store.engine.connect() as conn:\n            conn.execute(_REPOS.delete(_REPOS.c.repoid == self._repoid))\n\n    encoding = property(lambda x: x._encoding.name, _set_encoding)\n    maxage = property(fget=lambda x: x._get_attr('maxage', default=0), fset=lambda x, y: x._set_attr('maxage', y))\n    keepdays = property(\n        fget=lambda x: x._get_attr('keepdays', default=-1), fset=lambda x, y: x._set_attr('keepdays', y)\n    )\n\n\nclass Store(SimplePlugin):\n    \"\"\"\n    This class handle all data storage operations.\n    \"\"\"\n\n    _ldap_add_user = Option(\"ldap_add_missing_user\")\n    _ldap_add_user_default_role = Option(\"ldap_add_user_default_role\")\n    _ldap_add_user_default_userroot = Option(\"ldap_add_user_default_userroot\")\n    _debug = Option('debug')\n    _db_uri = Option(\"database_uri\")\n    _allow_add_user = Option(\"ldap_add_missing_user\")\n    _admin_user = Option(\"admin_user\")\n    _admin_password = Option(\"admin_password\")\n    _max_depth = Option('max_depth')\n\n    def __init__(self, app):\n        super().__init__(cherrypy.engine)\n        self.app = app\n        self.app.store = self\n        # Connect to database\n        uri = self._db_uri if '://' in self._db_uri else \"sqlite:///\" + self._db_uri\n        self.engine = create_engine(uri, echo=self._debug)\n        # Create tables if missing.\n        _META.create_all(self.engine)\n        self._update()\n        self.bus.subscribe(\"authenticate\", self.authenticate)\n        self.bus.subscribe(\"stop\", self.stop)\n\n    def stop(self):\n        self.bus.unsubscribe(\"authenticate\", self.authenticate)\n        self.engine.dispose()\n\n    def create_admin_user(self):\n        # Check if admin user exists. If not, created it.\n        userobj = self.get_user(self._admin_user)\n        if not userobj:\n            userobj = self.add_user(self._admin_user, 'admin123')\n            userobj.role = ADMIN_ROLE\n            userobj.user_root = '/backups'\n        # Also make sure to update the password with latest value from config file.\n        if self._admin_password:\n            userobj.hash_password = self._admin_password\n            userobj.role = ADMIN_ROLE\n\n    def add_user(self, user, password=None, attrs=None):\n        \"\"\"\n        Used to add a new user with an optional password.\n        \"\"\"\n        assert password is None or isinstance(password, str)\n        # Check if user already exists.\n        if self.get_user(user):\n            raise RdiffError(_(\"User %s already exists.\" % (user,)))\n\n        # Find a database where to add the user\n        logger.info(\"adding new user [%s]\", user)\n        with self.engine.connect() as conn:\n            inserted = conn.execute(\n                _USERS.insert().values(username=user, password=hash_password(password) if password else '')\n            )\n            assert inserted.rowcount\n            record = conn.execute(_USERS.select(_USERS.c.username == user)).fetchone()\n        userobj = UserObject(self, record)\n        self.bus.publish('user_added', userobj)\n        # Return user object\n        return userobj\n\n    def count_users(self):\n        with self.engine.connect() as conn:\n            result = conn.execute(select([count('*')]).select_from(_USERS))\n            return result.fetchone()[0]\n\n    def count_repos(self):\n        with self.engine.connect() as conn:\n            result = conn.execute(select([count('*')]).select_from(_REPOS))\n            return result.fetchone()[0]\n\n    def get_repo(self, name, as_user=None, refresh=False):\n        \"\"\"\n        Return the repository identified as `name`.\n        `name` should be <username>/<repopath>\n        \"\"\"\n        username, repopath = _split_path(name)\n        repopath = os.fsdecode(repopath)\n\n        # Check permissions\n        as_user = as_user or self.app.currentuser\n        assert as_user, \"as_user or current user must be defined\"\n        if username != as_user.username and not as_user.is_admin:\n            raise AccessDeniedError(name)\n\n        # Get the userid associated to the username.\n        user_obj = self.get_user(username)\n        if not user_obj:\n            raise DoesNotExistError(name)\n\n        # Get the repo object.\n        return user_obj.get_repo(repopath, refresh=refresh)\n\n    def get_repo_path(self, path, as_user=None, refresh=False):\n        \"\"\"\n        Return a the repository identified by the given `path`.\n        `path` should be <username>/<repopath>/<subdir>\n        \"\"\"\n        assert isinstance(path, bytes) or isinstance(path, str)\n        sep = b'/' if isinstance(path, bytes) else '/'\n        path = path.strip(sep) + sep\n\n        # Since we don't know which part of the \"path\" is the repopath,\n        # we need to do multiple search.\n        try:\n            startpos = 0\n            while True:\n                pos = path.index(sep, startpos)\n                try:\n                    # Run refresh only on first run.\n                    repo_obj = self.get_repo(path[:pos], as_user, refresh=refresh and startpos == 0)\n                    break\n                except DoesNotExistError:\n                    # Raised when repo doesn't exists\n                    startpos = pos + 1\n            return repo_obj, path[pos + 1 :]\n        except ValueError:\n            raise DoesNotExistError(path)\n\n    def get_user(self, user):\n        \"\"\"Return a user object.\"\"\"\n        with self.engine.connect() as conn:\n            record = conn.execute(_USERS.select(_USERS.c.username == user)).fetchone()\n            if record:\n                return UserObject(self, record)\n        return None\n\n    def users(self, search=None, criteria=None):\n        \"\"\"\n        Search users database. Return a generator of user object.\n\n        search: Define a search term to look into email or username.\n        criteria: Define a search filter: admins, ldap\n        \"\"\"\n        with self.engine.connect() as conn:\n            if search:\n                term = '%' + search + '%'\n                result = conn.execute(\n                    _USERS.select().where(or_(_USERS.c.username.like(term), _USERS.c.email.like(term)))\n                )\n            elif criteria:\n                if criteria == 'admins':\n                    result = conn.execute(_USERS.select().where(_USERS.c.role == ADMIN_ROLE))\n                elif criteria == 'ldap':\n                    result = conn.execute(_USERS.select().where(_USERS.c.password == ''))\n                else:\n                    return []\n            else:\n                result = conn.execute(_USERS.select())\n            # return users\n            return [UserObject(self, record) for record in result]\n\n    def repos(self, search=None, criteria=None):\n        \"\"\"\n        Quick listing of all the repository object for all user.\n\n        search: Define a search term to look into path, email or username.\n        criteria: Define a search filter: ok, failed, interrupted, in_progress\n        \"\"\"\n        with self.engine.connect() as conn:\n            if search:\n                result = conn.execute(\n                    select([_REPOS, _USERS])\n                    .where(_USERS.c.userid == _REPOS.c.userid)\n                    .where(\n                        or_(\n                            _USERS.c.username.contains(search),\n                            _USERS.c.email.contains(search),\n                            _REPOS.c.repopath.contains(search),\n                        )\n                    )\n                )\n            else:\n                result = conn.execute(select([_REPOS, _USERS]).where(_USERS.c.userid == _REPOS.c.userid))\n            for record in result:\n                user_obj = UserObject(self, record)\n                repo_obj = RepoObject(user_obj, record)\n                if not criteria or criteria == repo_obj.status[0]:\n                    yield repo_obj\n\n    def login(self, username, password):\n        \"\"\"\n        Verify the user's crendentials with authentication plugins.\n        Then create the user in database if required.\n        \"\"\"\n        assert isinstance(username, str)\n        assert password is None or isinstance(username, str)\n        authenticates = self.bus.publish('authenticate', username, password)\n        authenticates = [a for a in authenticates if a]\n        if not authenticates:\n            return None\n        real_username = authenticates[0][0]\n        extra_attrs = authenticates[0][1]\n\n        # When enabled, create missing userobj in database.\n        userobj = self.get_user(real_username)\n        if userobj is None and self._ldap_add_user:\n            try:\n                # At this point, we need to create a new user in database.\n                # In case default values are invalid, let evaluate them\n                # before creating the user in database.\n                default_user_root = self._ldap_add_user_default_userroot.format(**extra_attrs)\n                default_role = ROLES.get(self._ldap_add_user_default_role)\n                userobj = self.add_user(real_username, attrs=extra_attrs)\n                userobj.user_root = default_user_root\n                userobj.role = default_role\n                # Populate the email attribute using LDAP mail attribute.\n                # Default to empty string to respect database integrity.\n                userobj.email = next(iter(extra_attrs.get('mail', [])), '')\n            except Exception:\n                logger.warning('fail to create new user', exc_info=1)\n        self.bus.publish('user_login', userobj)\n        return userobj\n\n    def authenticate(self, user, password):\n        \"\"\"\n        Called to authenticate the given user.\n\n        Return False if credentials cannot be validated. Otherwise return a\n        tuple with username and user attributes.\n        \"\"\"\n        assert isinstance(user, str)\n        assert password is None or isinstance(user, str)\n        # Validate credential using database first.\n        logger.debug(\"validating user [%s] credentials\", user)\n        userobj = self.get_user(user)\n        if userobj and userobj.hash_password:\n            if check_password(password, userobj.hash_password):\n                return userobj.username, {}\n        return False\n\n    def _update(self):\n        \"\"\"\n        Called on startup to update database schema.\n        \"\"\"\n        with self.engine.connect() as conn:\n            # Remove preceding and leading slash (/) generated by previous\n            # versions. Also rename '.' to ''\n            reult = conn.execute(_REPOS.select())\n            for row in reult:\n                if row['repopath'].startswith('/') or row['repopath'].endswith('/'):\n                    conn.execute(\n                        _REPOS.update()\n                        .where(_REPOS.c.repoid == row['repoid'])\n                        .values(repopath=row['repopath'].strip('/'))\n                    )\n                if row['repopath'] == '.':\n                    conn.execute(_REPOS.update().where(_REPOS.c.repoid == row['repoid']).values(repopath=''))\n\n            # Remove duplicates and nested repositories.\n            reult = conn.execute(_REPOS.select().order_by(_REPOS.c.userid, _REPOS.c.repopath))\n            prev_repo = (None, None)\n            for row in reult:\n                if prev_repo[0] == row['userid'] and (\n                    prev_repo[1] == row['repopath'] or row['repopath'].startswith(prev_repo[1] + '/')\n                ):\n                    conn.execute(_REPOS.delete(_REPOS.c.repoid == row['repoid']))\n                else:\n                    prev_repo = (row['userid'], row['repopath'])\n"], "filenames": ["README.md", "doc/configuration.md", "rdiffweb/controller/page_admin.py", "rdiffweb/controller/pref_general.py", "rdiffweb/controller/tests/test_page_admin.py", "rdiffweb/controller/tests/test_page_prefs.py", "rdiffweb/core/config.py", "rdiffweb/core/store.py"], "buggy_code_start_loc": [115, 280, 171, 28, 110, 89, 422, 399], "buggy_code_end_loc": [115, 280, 191, 55, 288, 103, 422, 399], "fixing_code_start_loc": [116, 281, 171, 28, 110, 89, 423, 400], "fixing_code_end_loc": [117, 295, 206, 70, 297, 113, 437, 403], "type": "CWE-521", "message": "Weak Password Requirements in GitHub repository ikus060/rdiffweb prior to 2.4.2.", "other": {"cve": {"id": "CVE-2022-3179", "sourceIdentifier": "security@huntr.dev", "published": "2022-09-13T17:15:08.383", "lastModified": "2022-09-15T19:42:30.663", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Weak Password Requirements in GitHub repository ikus060/rdiffweb prior to 2.4.2."}, {"lang": "es", "value": "Unos Requisitos de Contrase\u00f1a D\u00e9bil en el repositorio de GitHub ikus060/rdiffweb versiones anteriores a 2.4.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-521"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ikus-soft:rdiffweb:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.2", "matchCriteriaId": "2BCE0319-2809-4093-88C8-E1B2E86FF092"}]}]}], "references": [{"url": "https://github.com/ikus060/rdiffweb/commit/233befc33bdc45d4838c773d5aed4408720504c5", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/58eae29e-3619-449d-9bba-fdcbabcba5fe", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ikus060/rdiffweb/commit/233befc33bdc45d4838c773d5aed4408720504c5"}}