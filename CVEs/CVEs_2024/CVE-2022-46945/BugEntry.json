{"buggy_code": ["<?php\n/*****************************************************************************\n *\n * NagVisHoverUrl.php - Class for handling the hover urls\n *\n * Copyright (c) 2004-2016 NagVis Project (Contact: info@nagvis.org)\n *\n * License:\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n *\n *****************************************************************************/\n\n/**\n * @author    Lars Michelsen <lm@larsmichelsen.com>\n */\nclass NagVisHoverUrl {\n    private $CORE;\n\n    private $url;\n    private $code;\n\n    /**\n     * Class Constructor\n     *\n     * @param     GlobalCore     $CORE\n     * @author     Lars Michelsen <lm@larsmichelsen.com>\n     */\n    public function __construct($CORE, $url) {\n        $this->CORE = $CORE;\n        $this->url = $url;\n        $this->code = '';\n\n        // Read the contents of the template file\n        $this->readHoverUrl();\n        $this->cleanCode();\n    }\n\n    /**\n     * PUBLIC __toString()\n     *\n     * \"Magic method\" returns the contents of the hover url\n     *\n     * @author    Lars Michelsen <lm@larsmichelsen.com>\n     */\n    public function __toString() {\n        return $this->code;\n    }\n\n    /**\n     * PRIVATE readHoverUrl()\n     *\n     * Reads the given hover url form an object and forms it to a readable format for the hover box\n     *\n     * @author    Lars Michelsen <lm@larsmichelsen.com>\n     */\n    private function readHoverUrl() {\n        /* Context is supported in php >= 5.0\n        * This could be usefull someday...\n        * $http_opts = array(\n        *      'http'=>array(\n        *      'method'=>\"GET\",\n        *      'header'=>\"Accept-language: en\\r\\n\" .\n        *                \"Authorization: Basic \".base64_encode(\"user:pw\"),\n        *      'request_fulluri'=>true  ,\n        *      'proxy'=>\"tcp://proxy.url.de\"\n        *   )\n        * );\n        * $context = stream_context_create($http_opts);\n        * $content = file_get_contents($obj['hover_url'],FALSE,$context);\n        */\n\n        // Only allow urls not paths for security reasons\n        // Reported here: http://news.gmane.org/find-root.php?message_id=%3cf60c42280909021938s7f36c0edhd66d3e9156a5d081%40mail.gmail.com%3e\n        $aUrl = parse_url($this->url);\n        if(!isset($aUrl['scheme']) || $aUrl['scheme'] == '')\n            throw new NagVisException(l('problemReadingUrl', Array('URL' => $this->url,\n                                                                   'MSG' => l('Not allowed url'))));\n\n\n        if(!$content = file_get_contents($this->url)) {\n            throw new NagVisException(l('couldNotGetHoverUrl', Array('URL' => $this->url)));\n        }\n\n        // Try to recode non utf-8 encoded responses to utf-8. Later used\n        // json_encode() needs utf-8 encoded code\n        $content = mb_convert_encoding($content, 'UTF-8',\n            mb_detect_encoding($content, 'UTF-8, ISO-8859-1', true)); \n\n        $this->code = $content;\n    }\n\n\n    /**\n     * PRIVATE cleanCode()\n     *\n     * Replace unwanted things from the code\n     *\n     * @author     Lars Michelsen <lm@larsmichelsen.com>\n     */\n    private function cleanCode() {\n        $this->code = str_replace('\"','\\\\\\'',str_replace('\\'','\\\\\\'',str_replace(\"\\t\",'',str_replace(\"\\n\",'',str_replace(\"\\r\\n\",'',$this->code)))));\n    }\n}\n?>\n"], "fixing_code": ["<?php\n/*****************************************************************************\n *\n * NagVisHoverUrl.php - Class for handling the hover urls\n *\n * Copyright (c) 2004-2016 NagVis Project (Contact: info@nagvis.org)\n *\n * License:\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n *\n *****************************************************************************/\n\n/**\n * @author    Lars Michelsen <lm@larsmichelsen.com>\n */\nclass NagVisHoverUrl {\n    private $CORE;\n\n    private $url;\n    private $code;\n\n    /**\n     * Class Constructor\n     *\n     * @param     GlobalCore     $CORE\n     * @author     Lars Michelsen <lm@larsmichelsen.com>\n     */\n    public function __construct($CORE, $url) {\n        $this->CORE = $CORE;\n        $this->url = $url;\n        $this->code = '';\n\n        // Read the contents of the template file\n        $this->readHoverUrl();\n        $this->cleanCode();\n    }\n\n    /**\n     * PUBLIC __toString()\n     *\n     * \"Magic method\" returns the contents of the hover url\n     *\n     * @author    Lars Michelsen <lm@larsmichelsen.com>\n     */\n    public function __toString() {\n        return $this->code;\n    }\n\n    /**\n     * PRIVATE readHoverUrl()\n     *\n     * Reads the given hover url form an object and forms it to a readable format for the hover box\n     *\n     * @author    Lars Michelsen <lm@larsmichelsen.com>\n     */\n    private function readHoverUrl() {\n        /* Context is supported in php >= 5.0\n        * This could be usefull someday...\n        * $http_opts = array(\n        *      'http'=>array(\n        *      'method'=>\"GET\",\n        *      'header'=>\"Accept-language: en\\r\\n\" .\n        *                \"Authorization: Basic \".base64_encode(\"user:pw\"),\n        *      'request_fulluri'=>true  ,\n        *      'proxy'=>\"tcp://proxy.url.de\"\n        *   )\n        * );\n        * $context = stream_context_create($http_opts);\n        * $content = file_get_contents($obj['hover_url'],FALSE,$context);\n        */\n\n        // Only allow urls not paths for security reasons\n        // Reported here: http://news.gmane.org/find-root.php?message_id=%3cf60c42280909021938s7f36c0edhd66d3e9156a5d081%40mail.gmail.com%3e\n        $aUrl = parse_url($this->url);\n        if(!isset($aUrl['scheme']) || $aUrl['scheme'] == '' || ($aUrl['scheme'] != 'http' && $aUrl['scheme'] != 'https'))\n            throw new NagVisException(l('problemReadingUrl', Array('URL' => $this->url,\n                                                                   'MSG' => l('Not allowed url'))));\n\n\n        if(!$content = file_get_contents($this->url)) {\n            throw new NagVisException(l('couldNotGetHoverUrl', Array('URL' => $this->url)));\n        }\n\n        // Try to recode non utf-8 encoded responses to utf-8. Later used\n        // json_encode() needs utf-8 encoded code\n        $content = mb_convert_encoding($content, 'UTF-8',\n            mb_detect_encoding($content, 'UTF-8, ISO-8859-1', true)); \n\n        $this->code = $content;\n    }\n\n\n    /**\n     * PRIVATE cleanCode()\n     *\n     * Replace unwanted things from the code\n     *\n     * @author     Lars Michelsen <lm@larsmichelsen.com>\n     */\n    private function cleanCode() {\n        $this->code = str_replace('\"','\\\\\\'',str_replace('\\'','\\\\\\'',str_replace(\"\\t\",'',str_replace(\"\\n\",'',str_replace(\"\\r\\n\",'',$this->code)))));\n    }\n}\n?>\n"], "filenames": ["share/server/core/classes/NagVisHoverUrl.php"], "buggy_code_start_loc": [87], "buggy_code_end_loc": [88], "fixing_code_start_loc": [87], "fixing_code_end_loc": [88], "type": "NVD-CWE-noinfo", "message": "Nagvis before 1.9.34 was discovered to contain an arbitrary file read vulnerability via the component /core/classes/NagVisHoverUrl.php.", "other": {"cve": {"id": "CVE-2022-46945", "sourceIdentifier": "cve@mitre.org", "published": "2023-05-26T15:15:09.393", "lastModified": "2023-06-01T14:02:24.270", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Nagvis before 1.9.34 was discovered to contain an arbitrary file read vulnerability via the component /core/classes/NagVisHoverUrl.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.3}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nagvis:nagvis:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.9.34", "matchCriteriaId": "6958F106-F947-4580-A8AF-D151A3E8CA12"}]}]}], "references": [{"url": "https://github.com/NagVis/nagvis/commit/71aba7f46f79d846e1df037f165d206a2cd1d22a", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/NagVis/nagvis/compare/nagvis-1.9.33...nagvis-1.9.34", "source": "cve@mitre.org", "tags": ["Patch", "Product"]}]}, "github_commit_url": "https://github.com/NagVis/nagvis/commit/71aba7f46f79d846e1df037f165d206a2cd1d22a"}}