{"buggy_code": ["<?php\n\nnamespace SAML2;\n\nuse RobRichards\\XMLSecLibs\\XMLSecurityKey;\n\n/**\n * Class which implements the HTTP-Redirect binding.\n *\n * @package SimpleSAMLphp\n */\nclass HTTPRedirect extends Binding\n{\n    const DEFLATE = 'urn:oasis:names:tc:SAML:2.0:bindings:URL-Encoding:DEFLATE';\n\n    /**\n     * Create the redirect URL for a message.\n     *\n     * @param  \\SAML2\\Message $message The message.\n     * @return string        The URL the user should be redirected to in order to send a message.\n     */\n    public function getRedirectURL(Message $message)\n    {\n        if ($this->destination === null) {\n            $destination = $message->getDestination();\n        } else {\n            $destination = $this->destination;\n        }\n\n        $relayState = $message->getRelayState();\n\n        $key = $message->getSignatureKey();\n\n        $msgStr = $message->toUnsignedXML();\n        $msgStr = $msgStr->ownerDocument->saveXML($msgStr);\n\n        Utils::getContainer()->debugMessage($msgStr, 'out');\n\n        $msgStr = gzdeflate($msgStr);\n        $msgStr = base64_encode($msgStr);\n\n        /* Build the query string. */\n\n        if ($message instanceof Request) {\n            $msg = 'SAMLRequest=';\n        } else {\n            $msg = 'SAMLResponse=';\n        }\n        $msg .= urlencode($msgStr);\n\n        if ($relayState !== null) {\n            $msg .= '&RelayState=' . urlencode($relayState);\n        }\n\n        if ($key !== null) {\n            /* Add the signature. */\n            $msg .= '&SigAlg=' . urlencode($key->type);\n\n            $signature = $key->signData($msg);\n            $msg .= '&Signature=' . urlencode(base64_encode($signature));\n        }\n\n        if (strpos($destination, '?') === false) {\n            $destination .= '?' . $msg;\n        } else {\n            $destination .= '&' . $msg;\n        }\n\n        return $destination;\n    }\n\n    /**\n     * Send a SAML 2 message using the HTTP-Redirect binding.\n     *\n     * Note: This function never returns.\n     *\n     * @param \\SAML2\\Message $message The message we should send.\n     */\n    public function send(Message $message)\n    {\n        $destination = $this->getRedirectURL($message);\n        Utils::getContainer()->getLogger()->debug('Redirect to ' . strlen($destination) . ' byte URL: ' . $destination);\n        Utils::getContainer()->redirect($destination);\n    }\n\n    /**\n     * Receive a SAML 2 message sent using the HTTP-Redirect binding.\n     *\n     * Throws an exception if it is unable receive the message.\n     *\n     * @return \\SAML2\\Message The received message.\n     * @throws \\Exception\n     *\n     * NPath is currently too high but solving that just moves code around.\n     * @SuppressWarnings(PHPMD.NPathComplexity)\n     */\n    public function receive()\n    {\n        $data = self::parseQuery();\n        if (array_key_exists('SAMLRequest', $data)) {\n            $message = $data['SAMLRequest'];\n        } elseif (array_key_exists('SAMLResponse', $data)) {\n            $message = $data['SAMLResponse'];\n        } else {\n            throw new \\Exception('Missing SAMLRequest or SAMLResponse parameter.');\n        }\n\n        if (isset($data['SAMLEncoding']) && $data['SAMLEncoding'] !== self::DEFLATE) {\n            throw new \\Exception('Unknown SAMLEncoding: ' . var_export($data['SAMLEncoding'], true));\n        }\n\n        $message = base64_decode($message);\n        if ($message === false) {\n            throw new \\Exception('Error while base64 decoding SAML message.');\n        }\n\n        $message = gzinflate($message);\n        if ($message === false) {\n            throw new \\Exception('Error while inflating SAML message.');\n        }\n\n        Utils::getContainer()->debugMessage($message, 'in');\n        $document = DOMDocumentFactory::fromString($message);\n        $xml      = $document->firstChild;\n        $message  = Message::fromXML($xml);\n\n        if (array_key_exists('RelayState', $data)) {\n            $message->setRelayState($data['RelayState']);\n        }\n\n        if (!array_key_exists('Signature', $data)) {\n            return $message;\n        }\n\n        if (!array_key_exists('SigAlg', $data)) {\n            throw new \\Exception('Missing signature algorithm.');\n        }\n\n        $signData = array(\n            'Signature' => $data['Signature'],\n            'SigAlg'    => $data['SigAlg'],\n            'Query'     => $data['SignedQuery'],\n        );\n\n        $message->addValidator(array(get_class($this), 'validateSignature'), $signData);\n\n        return $message;\n    }\n\n    /**\n     * Helper function to parse query data.\n     *\n     * This function returns the query string split into key=>value pairs.\n     * It also adds a new parameter, SignedQuery, which contains the data that is\n     * signed.\n     *\n     * @return string The query data that is signed.\n     */\n    private static function parseQuery()\n    {\n        /*\n         * Parse the query string. We need to do this ourself, so that we get access\n         * to the raw (urlencoded) values. This is required because different software\n         * can urlencode to different values.\n         */\n        $data = array();\n        $relayState = '';\n        $sigAlg = '';\n        $sigQuery = '';\n        foreach (explode('&', $_SERVER['QUERY_STRING']) as $e) {\n            $tmp = explode('=', $e, 2);\n            $name = $tmp[0];\n            if (count($tmp) === 2) {\n                $value = $tmp[1];\n            } else {\n                /* No value for this parameter. */\n                $value = '';\n            }\n            $name = urldecode($name);\n            $data[$name] = urldecode($value);\n\n            switch ($name) {\n                case 'SAMLRequest':\n                case 'SAMLResponse':\n                    $sigQuery = $name . '=' . $value;\n                    break;\n                case 'RelayState':\n                    $relayState = '&RelayState=' . $value;\n                    break;\n                case 'SigAlg':\n                    $sigAlg = '&SigAlg=' . $value;\n                    break;\n            }\n        }\n\n        $data['SignedQuery'] = $sigQuery . $relayState . $sigAlg;\n\n        return $data;\n    }\n\n    /**\n     * Validate the signature on a HTTP-Redirect message.\n     *\n     * Throws an exception if we are unable to validate the signature.\n     *\n     * @param array          $data The data we need to validate the query string.\n     * @param XMLSecurityKey $key  The key we should validate the query against.\n     * @throws \\Exception\n     */\n    public static function validateSignature(array $data, XMLSecurityKey $key)\n    {\n        assert('array_key_exists(\"Query\", $data)');\n        assert('array_key_exists(\"SigAlg\", $data)');\n        assert('array_key_exists(\"Signature\", $data)');\n\n        $query = $data['Query'];\n        $sigAlg = $data['SigAlg'];\n        $signature = $data['Signature'];\n\n        $signature = base64_decode($signature);\n\n        if ($key->type !== XMLSecurityKey::RSA_SHA1) {\n            throw new \\Exception('Invalid key type for validating signature on query string.');\n        }\n        if ($key->type !== $sigAlg) {\n            $key = Utils::castKey($key, $sigAlg);\n        }\n\n        if (!$key->verifySignature($query, $signature)) {\n            throw new \\Exception('Unable to validate signature on query string.');\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace SAML2;\n\nuse RobRichards\\XMLSecLibs\\XMLSecurityKey;\n\n/**\n * Class which implements the HTTP-Redirect binding.\n *\n * @package SimpleSAMLphp\n */\nclass HTTPRedirect extends Binding\n{\n    const DEFLATE = 'urn:oasis:names:tc:SAML:2.0:bindings:URL-Encoding:DEFLATE';\n\n    /**\n     * Create the redirect URL for a message.\n     *\n     * @param  \\SAML2\\Message $message The message.\n     * @return string        The URL the user should be redirected to in order to send a message.\n     */\n    public function getRedirectURL(Message $message)\n    {\n        if ($this->destination === null) {\n            $destination = $message->getDestination();\n        } else {\n            $destination = $this->destination;\n        }\n\n        $relayState = $message->getRelayState();\n\n        $key = $message->getSignatureKey();\n\n        $msgStr = $message->toUnsignedXML();\n        $msgStr = $msgStr->ownerDocument->saveXML($msgStr);\n\n        Utils::getContainer()->debugMessage($msgStr, 'out');\n\n        $msgStr = gzdeflate($msgStr);\n        $msgStr = base64_encode($msgStr);\n\n        /* Build the query string. */\n\n        if ($message instanceof Request) {\n            $msg = 'SAMLRequest=';\n        } else {\n            $msg = 'SAMLResponse=';\n        }\n        $msg .= urlencode($msgStr);\n\n        if ($relayState !== null) {\n            $msg .= '&RelayState=' . urlencode($relayState);\n        }\n\n        if ($key !== null) {\n            /* Add the signature. */\n            $msg .= '&SigAlg=' . urlencode($key->type);\n\n            $signature = $key->signData($msg);\n            $msg .= '&Signature=' . urlencode(base64_encode($signature));\n        }\n\n        if (strpos($destination, '?') === false) {\n            $destination .= '?' . $msg;\n        } else {\n            $destination .= '&' . $msg;\n        }\n\n        return $destination;\n    }\n\n    /**\n     * Send a SAML 2 message using the HTTP-Redirect binding.\n     *\n     * Note: This function never returns.\n     *\n     * @param \\SAML2\\Message $message The message we should send.\n     */\n    public function send(Message $message)\n    {\n        $destination = $this->getRedirectURL($message);\n        Utils::getContainer()->getLogger()->debug('Redirect to ' . strlen($destination) . ' byte URL: ' . $destination);\n        Utils::getContainer()->redirect($destination);\n    }\n\n    /**\n     * Receive a SAML 2 message sent using the HTTP-Redirect binding.\n     *\n     * Throws an exception if it is unable receive the message.\n     *\n     * @return \\SAML2\\Message The received message.\n     * @throws \\Exception\n     *\n     * NPath is currently too high but solving that just moves code around.\n     * @SuppressWarnings(PHPMD.NPathComplexity)\n     */\n    public function receive()\n    {\n        $data = self::parseQuery();\n        if (array_key_exists('SAMLRequest', $data)) {\n            $message = $data['SAMLRequest'];\n        } elseif (array_key_exists('SAMLResponse', $data)) {\n            $message = $data['SAMLResponse'];\n        } else {\n            throw new \\Exception('Missing SAMLRequest or SAMLResponse parameter.');\n        }\n\n        if (isset($data['SAMLEncoding']) && $data['SAMLEncoding'] !== self::DEFLATE) {\n            throw new \\Exception('Unknown SAMLEncoding: ' . var_export($data['SAMLEncoding'], true));\n        }\n\n        $message = base64_decode($message);\n        if ($message === false) {\n            throw new \\Exception('Error while base64 decoding SAML message.');\n        }\n\n        $message = gzinflate($message);\n        if ($message === false) {\n            throw new \\Exception('Error while inflating SAML message.');\n        }\n\n        Utils::getContainer()->debugMessage($message, 'in');\n        $document = DOMDocumentFactory::fromString($message);\n        $xml      = $document->firstChild;\n        $message  = Message::fromXML($xml);\n\n        if (array_key_exists('RelayState', $data)) {\n            $message->setRelayState($data['RelayState']);\n        }\n\n        if (!array_key_exists('Signature', $data)) {\n            return $message;\n        }\n\n        if (!array_key_exists('SigAlg', $data)) {\n            throw new \\Exception('Missing signature algorithm.');\n        }\n\n        $signData = array(\n            'Signature' => $data['Signature'],\n            'SigAlg'    => $data['SigAlg'],\n            'Query'     => $data['SignedQuery'],\n        );\n\n        $message->addValidator(array(get_class($this), 'validateSignature'), $signData);\n\n        return $message;\n    }\n\n    /**\n     * Helper function to parse query data.\n     *\n     * This function returns the query string split into key=>value pairs.\n     * It also adds a new parameter, SignedQuery, which contains the data that is\n     * signed.\n     *\n     * @return string The query data that is signed.\n     */\n    private static function parseQuery()\n    {\n        /*\n         * Parse the query string. We need to do this ourself, so that we get access\n         * to the raw (urlencoded) values. This is required because different software\n         * can urlencode to different values.\n         */\n        $data = array();\n        $relayState = '';\n        $sigAlg = '';\n        $sigQuery = '';\n        foreach (explode('&', $_SERVER['QUERY_STRING']) as $e) {\n            $tmp = explode('=', $e, 2);\n            $name = $tmp[0];\n            if (count($tmp) === 2) {\n                $value = $tmp[1];\n            } else {\n                /* No value for this parameter. */\n                $value = '';\n            }\n            $name = urldecode($name);\n            $data[$name] = urldecode($value);\n\n            switch ($name) {\n                case 'SAMLRequest':\n                case 'SAMLResponse':\n                    $sigQuery = $name . '=' . $value;\n                    break;\n                case 'RelayState':\n                    $relayState = '&RelayState=' . $value;\n                    break;\n                case 'SigAlg':\n                    $sigAlg = '&SigAlg=' . $value;\n                    break;\n            }\n        }\n\n        $data['SignedQuery'] = $sigQuery . $relayState . $sigAlg;\n\n        return $data;\n    }\n\n    /**\n     * Validate the signature on a HTTP-Redirect message.\n     *\n     * Throws an exception if we are unable to validate the signature.\n     *\n     * @param array          $data The data we need to validate the query string.\n     * @param XMLSecurityKey $key  The key we should validate the query against.\n     * @throws \\Exception\n     */\n    public static function validateSignature(array $data, XMLSecurityKey $key)\n    {\n        assert('array_key_exists(\"Query\", $data)');\n        assert('array_key_exists(\"SigAlg\", $data)');\n        assert('array_key_exists(\"Signature\", $data)');\n\n        $query = $data['Query'];\n        $sigAlg = $data['SigAlg'];\n        $signature = $data['Signature'];\n\n        $signature = base64_decode($signature);\n\n        if ($key->type !== XMLSecurityKey::RSA_SHA1) {\n            throw new \\Exception('Invalid key type for validating signature on query string.');\n        }\n        if ($key->type !== $sigAlg) {\n            $key = Utils::castKey($key, $sigAlg);\n        }\n\n        if ($key->verifySignature($query, $signature) !== 1) {\n            throw new \\Exception('Unable to validate signature on query string.');\n        }\n    }\n}\n"], "filenames": ["src/SAML2/HTTPRedirect.php"], "buggy_code_start_loc": [229], "buggy_code_end_loc": [230], "fixing_code_start_loc": [229], "fixing_code_end_loc": [230], "type": "CWE-347", "message": "HTTPRedirect.php in the saml2 library in SimpleSAMLphp before 1.15.4 has an incorrect check of return values in the signature validation utilities, allowing an attacker to get invalid signatures accepted as valid by forcing an error during validation. This occurs because of a dependency on PHP functionality that interprets a -1 error code as a true boolean value.", "other": {"cve": {"id": "CVE-2018-7711", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-05T22:29:00.323", "lastModified": "2018-03-29T15:24:08.410", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "HTTPRedirect.php in the saml2 library in SimpleSAMLphp before 1.15.4 has an incorrect check of return values in the signature validation utilities, allowing an attacker to get invalid signatures accepted as valid by forcing an error during validation. This occurs because of a dependency on PHP functionality that interprets a -1 error code as a true boolean value."}, {"lang": "es", "value": "HTTPRedirect.php en la biblioteca saml2 en SimpleSAMLphp, en versiones anteriores a la 1.15.4, tiene una comprobaci\u00f3n incorrecta de valores de retorno en las utilidades de validaci\u00f3n de firma. Esto permite que un atacante haga que firmas no v\u00e1lidas se acepten como v\u00e1lidas forzando un error durante la validaci\u00f3n. Esto ocurre debido a la dependencia en una funcionalidad de PHP que interpreta un c\u00f3digo de error -1 como valor boleano true."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-347"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:simplesamlphp:simplesamlphp:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.15.4", "matchCriteriaId": "498D34C0-50B9-47A5-8047-9D99920869BF"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:simplesamlphp:saml2:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.0", "versionEndExcluding": "1.10.6", "matchCriteriaId": "D6F0BB9A-3F91-4F50-968B-AF9CBA3AEC8B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:simplesamlphp:saml2:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.3.8", "matchCriteriaId": "B2FCE1FF-DCBE-4FA0-A567-95846BED042F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:simplesamlphp:saml2:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.0", "versionEndExcluding": "3.1.4", "matchCriteriaId": "DF9F3B50-6531-4F9F-BB8C-B84ADB858C62"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}]}]}], "references": [{"url": "https://github.com/simplesamlphp/saml2/commit/4f6af7f69f29df8555a18b9bb7b646906b45924d", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/03/msg00017.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://simplesamlphp.org/security/201803-01", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/simplesamlphp/saml2/commit/4f6af7f69f29df8555a18b9bb7b646906b45924d"}}