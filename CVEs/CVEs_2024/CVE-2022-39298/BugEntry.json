{"buggy_code": ["<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2017 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisFront\\Controller;\n\nuse Laminas\\View\\Model\\JsonModel;\nuse Assetic\\Exception\\Exception;\nuse Laminas\\View\\Model\\ViewModel;\nuse MelisCore\\Controller\\MelisAbstractActionController;\n\nclass MelisPluginRendererController extends MelisAbstractActionController\n{\n\n    public function getPluginAction()\n    {   \n        $module = $this->getRequest()->getQuery('module', $this->params()->fromRoute('module'));\n        $pluginName = $this->getRequest()->getQuery('pluginName', $this->params()->fromRoute('pluginName'));\n        $pageId = $this->getRequest()->getQuery('pageId', $this->params()->fromRoute('pageId', 1));\n        $pluginId = $this->getRequest()->getQuery('pluginId', $this->params()->fromRoute('pluginId', null));\n        $fromDragDropZone = $this->getRequest()->getQuery('fromDragDropZone', $this->params()->fromRoute('fromDragDropZone', false));\n        $encapsulatedPlugin = $this->getRequest()->getQuery('encapsulatedPlugin', true);\n        $post = $this->getRequest()->getPost()->toArray();\n        $pluginHardcodedConfig = array();\n        if (!empty($post['pluginHardcodedConfig']))\n        {\n            $pluginHardcodedConfig = $post['pluginHardcodedConfig'];\n            $pluginHardcodedConfig = html_entity_decode($pluginHardcodedConfig, ENT_QUOTES);\n            $pluginHardcodedConfig = html_entity_decode($pluginHardcodedConfig, ENT_QUOTES);\n            $pluginHardcodedConfig = unserialize($pluginHardcodedConfig);\n        }\n        \n        $translator = $this->getServiceManager()->get('translator');\n    \n        $results = array();\n        \n        $config = $this->getServiceManager()->get('config');\n        if (empty($module) || empty($pluginName) || empty($pageId))\n        {\n            $results['success'] = false;\n            $results['errors'] = $translator->translate('tr_melisfront_generate_error_No module or plugin or idpage parameters');\n        }\n        else\n        {\n            if (empty($config['plugins'][$module]['plugins'][$pluginName]))\n            {\n                $results['success'] = false;\n                $results['errors'] = $translator->translate('tr_melisfront_generate_error_Plugin config not found');\n            }\n            else\n            {\n                $pluginConf = $config['plugins'][$module]['plugins'][$pluginName];\n                \n                try\n                {\n                    /**\n                     * check if plugin is came from the mini template\n                     */\n                    if (strpos($pluginName, 'MiniTemplatePlugin') !== false) {\n                        $old = $pluginName;\n                        //explode to get the original plugin name\n                        $plugin = explode('_', $pluginName);\n                        //set the original plugin name\n                        $pluginName = $plugin[0];\n\n                        $melisPlugin = $this->getServiceManager()->get('ControllerPluginManager')->get($pluginName);\n                        $melisPlugin->setMiniTplPluginName($old);\n                    }else{\n                        $melisPlugin = $this->getServiceManager()->get('ControllerPluginManager')->get($pluginName);\n                    }\n                    \n                    // dragdrop, delete only if plugin is not hardcoded\n                    if (empty($pluginId))\n                        $melisPlugin->setPluginHardcoded(false);\n                    else\n                        $melisPlugin->setPluginHardcoded(true);\n                    \n                    if ($fromDragDropZone)\n                        $melisPlugin->setPluginFromDragDrop(true);\n                    \n                    $melisPlugin->setEncapsulatedPlugin($encapsulatedPlugin);\n\n                    $pluginParameters = $pluginHardcodedConfig;\n                    $pluginParameters['pageId'] = $pageId;\n                    \n                    // if it's a reload and there's an id\n                    if (!empty($pluginId))\n                    {\n                        $pluginParameters['id'] = $pluginId;\n                        $generatePluginId = false;\n                    }\n                    else\n                        $generatePluginId = true;\n\n                    $melisPluginView = $melisPlugin->render($pluginParameters, $generatePluginId);\n                        \n                    $viewRender = $this->getServiceManager()->get('ViewRenderer');\n                    $html = $viewRender->render($melisPluginView);\n                    \n                    $pluginConfFOBO = array();\n                    $BoFiles = (!empty($pluginConf['melis']['files']))? $pluginConf['melis']['files'] : array();\n                    $BoInit = (!empty($pluginConf['melis']['js_initialization']))? $pluginConf['melis']['js_initialization'] : array();\n                    \n                    $frontConfig = $melisPlugin->getPluginFrontConfig();\n\n                    $FoFiles = (!empty($frontConfig['files']))? $frontConfig['files'] : array();\n                    \n                    $pluginConfFOBO = array(\n                        'front' => array('ressources' => $FoFiles),\n                        'melis' => array('ressources' => $BoFiles, 'js_initialization' => $BoInit),\n                    );\n\n                    $dom = array(\n                        'widthDesktop' => $frontConfig['widthDesktop'],\n                        'widthTablet' => $frontConfig['widthTablet'],\n                        'widthMobile' => $frontConfig['widthMobile'],\n                        'pluginContainerId' => $frontConfig['pluginContainerId'],\n                    );\n                    \n                    $results = array(\n                        'success' => true,\n                        'datas' => array(\n                            'dom'  => $dom,\n                            'html' => $html,\n                            'init' => $pluginConfFOBO\n                        )\n                    );\n                }\n                catch (Exception $e)\n                {\n                    $results['success'] = false;\n                    $results['errors'] = $translator->translate('tr_melisfront_generate_error_Plugin cant be created');\n                }\n            }\n        }\n        \n        return new JsonModel($results);\n    }\n\n    public function editPluginAction()\n    {\n        $view  = new ViewModel();\n\n        return $view;\n    }\n\n}\n", "<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisFront\\Navigation;\n\nuse Laminas\\Navigation\\Service\\DefaultNavigationFactory;\nuse Interop\\Container\\ContainerInterface;\nuse Laminas\\ServiceManager\\ServiceManager;\nuse Laminas\\EventManager\\EventManager;\nuse Laminas\\EventManager\\EventManagerInterface;\n\n/**\n * Generate laminas navigation based on Melis Page System\n *\n */\nclass MelisFrontNavigation extends DefaultNavigationFactory\n{\n\tprivate $serviceManager;\n\tprivate $idpage;\n\tprivate $renderMode;\n\t\n\t/**\n\t * Constructor\n\t * \n\t * @param ServiceManager $$this->getServiceManager()\n\t * @param int $idpage\n\t * @param string $renderMode\n\t */\n\tpublic function __construct(ServiceManager $serviceManager, $idpage, $renderMode)\n\t{\n\t\t$this->setServiceManager($serviceManager);\n\t\t$this->idpage = $idpage;\n\t\t$this->renderMode = $renderMode;\n\t}\n\n    /**\n     * @param ServiceManager $serviceManager\n     */\n\tpublic function setServiceManager(ServiceManager $serviceManager)\n\t{\n\t\t$this->serviceManager = $serviceManager;\n\t}\n\n    /**\n     * @return $serviceManager\n     */\n\tpublic function getServiceManager()\n\t{\n\t\treturn $this->serviceManager;\n\t}\n\t\n\tpublic function getPageAndSubPages($pageId)\n\t{\n\t\t$melisPage = $this->getServiceManager()->get('MelisEnginePage');\n\t\t$pageTree = $melisPage->getDatasPage($pageId);\n\t\t\n\t\t$pages = array();\n\t\t\n\t\tif (!is_null($pageTree))\n\t\t{\n\t\t\t$page = $this->formatPageInArray((Array)$pageTree->getMelisPageTree());\n\t\t\t\n\t\t\t$children = $this->getChildrenRecursive($pageId);\n\t\t\tif (!empty($children))\n\t\t\t{\n\t\t\t\t$page['pages'] = $children;\n\t\t\t}\n\t\t\t\n\t\t\tif ($page)\n\t\t\t{\n\t\t\t\t$pages[] = $page;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $pages;\n\t}\n\t\n\t/**\n\t * Get subpages recursively\n\t * \n\t * @param int $idPage\n\t * @return array Pages\n\t */\n\tpublic function getChildrenRecursive($idPage)\n\t{\n\t\t$results = array();\n\t\t$melisTree = $this->getServiceManager()->get('MelisEngineTree');\n\t\t\n\t\t$publishedOnly = 1;\n\t\t$pages = $melisTree->getPageChildren($idPage,$publishedOnly);\n\n\t\tif ($pages)\n\t\t{\n\t\t\tforeach ($pages as $page)\n\t\t\t{\n\t\t\t\t$tmp = $this->formatPageInArray($page);\n\t\t\t\t$children = $this->getChildrenRecursive($page['tree_page_id']);\n\n\t\t\t\tif (!empty($children))\n\t\t\t\t\t$tmp['pages'] = $children;\n\t\t\t\t\n\t\t\t\t$results[] = $tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $results;\n\t}\n\t\n\tpublic function formatPageInArray($page,$pageSearchType = null)\n\t{\n\t\t$melisTree = $this->getServiceManager()->get('MelisEngineTree');\n\n\t\tif (empty($page) || empty($page['tree_page_id']))\n\t\t\treturn null;\n\t\t\n\t\tif (empty($page['purl_page_url']))\n\t\t\t$uri = $melisTree->getPageLink($page['tree_page_id'], 0);\n\t\telse\n\t\t\t$uri = $page['purl_page_url'];\n\t\t\n\t\tif (empty($page['page_edit_date']))\n\t\t\t$page['page_edit_date'] = date('Y-m-d H:i:s');\n\n\t\t\t$pageName = $page['page_name'];\n\t\t\t\n\t\t$tmp = array(\n\t\t\t'label' => $pageName,\n\t\t\t'menu' => $page['page_menu'],\n\t\t\t'uri' => $uri,\n\t\t\t'idPage' => $page['tree_page_id'],\n\t\t\t'lastEditDate' => $page['page_edit_date'],\n\t\t\t'pageStat' => $page['page_status'],\n\t\t\t'pageType' => $page['page_type'],\n\t\t\t'pageSearchType' => $pageSearchType,\n\t\t);\n\t\t\n\t\tif ($this->idpage == $page['tree_page_id'])\n\t\t\t$tmp['active'] = true;\n\t\t\n\t\treturn $tmp;\n\t}\n\t\n\tpublic function getSiteMainPageByPageId($idPage)\n\t{\n\t\t$melisTree = $this->getServiceManager()->get('MelisEngineTree');\n\t\t$datasSite = $melisTree->getSiteByPageId($idPage);\n\t\t\n\t\tif (!empty($datasSite))\n\t\treturn $datasSite->site_main_page_id;\n\t\t\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Get Pages\n\t * \n\t * @param ContainerInterface $container\n\t * \n\t * {@inheritDoc}\n\t * @see \\Laminas\\Navigation\\Service\\AbstractNavigationFactory::getPages()\n\t */\n\tprotected function getPages(ContainerInterface $container)\n\t{\n\t\tif (null === $this->pages) \n\t\t{\n\t\t\t$siteMainId = 0;\n\t\t\t\n\t\t\t$melisPage = $this->getServiceManager()->get('MelisEnginePage');\n\t\t\t$actualPage = $melisPage->getDatasPage($this->idpage);\n\t\t\tif ($actualPage)\n\t\t\t{\n\t\t\t\t$siteId = 0;\n\t\t\t\t$datasTemplate = $actualPage->getMelisTemplate();\n\t\t\t\tif (!empty($datasTemplate->tpl_site_id))\n\t\t\t\t\t$siteId = $datasTemplate->tpl_site_id;\n\t\t\t\t\n\t\t\t\tif (!empty($siteId) && $siteId > 0)\n\t\t\t\t{\n\t\t\t\t\t$melisTableSite = $this->getServiceManager()->get('MelisEngineTableSite');\n\t\t\t\t\t$datasSite = $melisTableSite->getSiteById($siteId, getenv('MELIS_PLATFORM'));\n\t\t\t\t\tif (!empty($datasSite))\n\t\t\t\t\t{\n\t\t\t\t\t\t$datasSite = $datasSite->toArray();\n\t\t\t\t\t\tif (count($datasSite) > 0)\n\t\t\t\t\t\t\t$siteMainId = $datasSite[0]['site_main_page_id'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$navigation = $this->getChildrenRecursive($siteMainId);\n\t\t\t\n\t\t\t$pages      = $this->getPagesFromConfig($navigation);\n\t\n\t\t\t$this->pages = $this->injectComponents(\n\t\t\t\t\t$pages\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn $this->pages;\n\t}\n\n\t/**\n\t * Get all Subpages including published and unplublished\n\t * @param $pageId\n\t * @return array\n\t */\n\tpublic function getAllSubpages($pageId)\n\t{\n\t\t$results = array();\n\t\t//Services\n\t\t$melisTree = $this->getServiceManager()->get('MelisEngineTree');\n\t\t$pagePub   = $this->getServiceManager()->get('MelisEngineTablePagePublished');\n\t\t$pageSave  = $this->getServiceManager()->get('MelisEngineTablePageSaved');\n\n\t\t$pageSearchType = null;\n\t\t$pages = $melisTree->getPageChildren($pageId,2);\n\t\t\n\t\tif($pages)\n\t\t{\n\t\t\tforeach ($pages as $page)\n\t\t\t{\n\t\t\t\t$pageStat = $page['page_status'] ?? null;\n\t\t\t\t//if the page is published\n\t\t\t\tif($pageStat){\n\t\t\t\t\t$pageData       = $pagePub->getEntryById($page['tree_page_id'])->current();\n\t\t\t\t\t$pageSearchType = $pageData->page_search_type ?? null;\n\t\t\t\t}\n\t\t\t\t//if the page is unpublished\n\t\t\t\telse{\n\t\t\t\t\t$pageData = $pageSave->getEntryById($page['tree_page_id'])->current();\n\t\t\t\t\t//if the unpublishedData is not present in page_saved table\n\t\t\t\t\tif(!$pageData){\n\t\t\t\t\t\t//Get the pageData in page_published table\n\t\t\t\t\t\t$pageData = $pagePub->getEntryById($page['tree_page_id'])->current();\n\t\t\t\t\t}\n\t\t\t\t\t$pageSearchType = $pageData->page_search_type ?? null;\n\t\t\t\t}\n\n\t\t\t\t$tmp = $this->formatPageInArray($page,$pageSearchType);\n\t\t\t\t$children = $this->getAllSubpages($page['tree_page_id'] ?? null);\n\n\t\t\t\tif (!empty($children))\n\t\t\t\t\t$tmp['pages'] = $children;\n\n\t\t\t\t$results[] = $tmp;\n\t\t\t}\n\t\t}\n\t\treturn $results;\n\t}\n}", "<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisFront\\Service;\n\nuse MelisCore\\Service\\MelisGeneralService;\nuse MelisEngine\\Service\\MelisEngineComposerService;\nuse Laminas\\Stdlib\\ArrayUtils;\n\nclass MelisSiteConfigService extends MelisGeneralService\n{\n\n    /**\n     * Function to get the site config by key\n     *\n     * @param $key\n     * @param string $section\n     * @param int $pageId\n     * @param null $language\n     * @return array|string\n     */\n    public function getSiteConfigByKey($key, $pageId, $section = 'sites', $language = null)\n    {\n        if(empty($section))\n            $section = 'sites';\n\n        /**\n         * check if we are getting it from the current site config\n         * or from the allSites\n         */\n        if ($section == 'sites' || $section == 'allSites') {\n            $siteConfigData = $this->getSiteConfigByPageId($pageId);\n            if ($section == 'sites') {\n                if (empty($language)) {\n                    //return the value if the given key\n                    return (isset($siteConfigData['siteConfig'][$key])) ? $siteConfigData['siteConfig'][$key] : null;\n                } else {\n                    //return the given key value from its specific language\n                    $langLocale = strtolower($language) . '_' . strtoupper($language);\n                    $siteConfigData = $this->getSiteConfigByPageId($pageId, $langLocale);\n                    return (isset($siteConfigData['siteConfig'][$key])) ? $siteConfigData['siteConfig'][$key] : null;\n                }\n            } else {\n                //return given key value from allSites\n                return (isset($siteConfigData['allSites'][$key])) ? $siteConfigData['allSites'][$key] : null;\n            }\n        } else {\n            $siteConfigData = $this->getSiteConfig($section);\n            $data = [];\n            foreach ($siteConfigData as $locale => $value) {\n                $data[$locale] = array($key => $value[$key]);\n            }\n            if (empty($language))\n                return $data;\n            else {\n                $langLocale = strtolower($language) . '_' . strtoupper($language);\n                return $data[$langLocale][$key];\n            }\n        }\n    }\n\n    /**\n     * Function to return site config by page id\n     *\n     * @param $pageId\n     * @param $langLocale - ex: en_EN, fr_FR\n     * @return array\n     */\n    public function getSiteConfigByPageId($pageId, $langLocale = false)\n    {\n        // Event parameters prepare\n        $arrayParameters = $this->makeArrayFromParameters(__METHOD__, func_get_args());\n        // Sending service start event\n        $arrayParameters = $this->sendEvent('meliscms_site_tool_get_site_config_by_page_id_start', $arrayParameters);\n\n        //try to get config from cache\n        $cacheKey = 'getSiteConfigByPageId_' . $pageId.'_'.$langLocale;\n        $cacheConfig = 'meliscms_page';\n        $melisEngineCacheSystem = $this->getServiceManager()->get('MelisEngineCacheSystem');\n        $results = $melisEngineCacheSystem->getCacheByKey($cacheKey, $cacheConfig);\n\n        if(empty($results)) {\n\n            $siteConfig = array(\n                'siteConfig' => array(),\n                'allSites' => array(),\n            );\n\n            if (!empty($pageId)) {\n                /**\n                 * get the language if the page\n                 */\n                $cmsPageLang = $this->getServiceManager()->get('MelisEngineTablePageLang');\n                $pageLang = $cmsPageLang->getEntryByField('plang_page_id', $arrayParameters['pageId'])->current();\n                /**\n                 * get page lang locale\n                 */\n                $langCmsSrv = $this->getServiceManager()->get('MelisEngineLang');\n                $langData = array();\n                $langId = null;\n                if (!empty($pageLang)) {\n                    $langData = $langCmsSrv->getLangDataById($pageLang->plang_lang_id);\n                }\n                /**\n                 * get the site config\n                 */\n                if (!empty($langData)) {\n                    $siteData = $this->getSiteDataByPageId($arrayParameters['pageId']);\n                    if (!empty($siteData)) {\n                        $siteId = $siteData->site_id;\n                        $siteName = $siteData->site_name;\n\n                        /**\n                         * First, let's try fetch the site config\n                         * using the config service that has been updated\n                         * through a listener\n                         */\n                        $config = $this->getServiceManager()->get('config');\n\n                        if (!empty($config['site'])) {\n                            /**\n                             * If site config not in the list,\n                             * let's try again to get it directly from the\n                             * db and file\n                             */\n                            if (empty($config['site'][$siteName][$siteId])) {\n                                $config = $this->getSiteConfig($siteId, true);\n                            }\n\n                            if (!empty($config['site'][$siteName][$siteId])) {\n\n                                if ($arrayParameters['langLocale']) {\n                                    $siteConfig['siteConfig'] = $config['site'][$siteName][$siteId][$arrayParameters['langLocale']];\n                                    $siteLangData = $langCmsSrv->getLangDataByLangLocale($arrayParameters['langLocale']);\n                                    if (!empty($siteLangData)) {\n                                        $langId = $siteLangData->lang_cms_id;\n                                    }\n                                } else {\n                                    foreach($langData as $val) {\n                                        $siteConfig['siteConfig'] = $config['site'][$siteName][$siteId][$val['lang_cms_locale']];\n                                        $langId = $val['lang_cms_id'];\n                                    }\n                                }\n                                $siteConfig['siteConfig']['site_id'] = $siteId;\n                                $siteConfig['siteConfig']['default_lang_id'] = $langId;\n                                $siteConfig['allSites'] = $config['site'][$siteName]['allSites'];\n                            }\n                        }\n                    }\n                }\n            }\n\n            $arrayParameters['result'] = $siteConfig;\n            // Save cache key\n            $melisEngineCacheSystem->setCacheByKey($cacheKey, $cacheConfig, $arrayParameters['result']);\n        }else{\n            //return the config from cache\n            $arrayParameters['result'] = $results;\n        }\n\n        $arrayParameters = $this->sendEvent('meliscms_site_tool_get_site_config_by_page_id_end', $arrayParameters);\n\n        return $arrayParameters['result'];\n    }\n\n    /**\n     * Returns Merged Site Config (File and DB)\n     * @param $siteId\n     * @param $returnAll\n     * @return array\n     */\n    public function getSiteConfig($siteId, $returnAll = false)\n    {\n        // Event parameters prepare\n        $arrayParameters = $this->makeArrayFromParameters(__METHOD__, func_get_args());\n        // Sending service start event\n        $arrayParameters = $this->sendEvent('meliscms_site_tool_get_site_config_start', $arrayParameters);\n        $siteId = $arrayParameters['siteId'];\n\n        //try to get config from cache\n        $cacheKey = 'getSiteConfig_' . $siteId.'_'.$returnAll;\n        $cacheConfig = 'meliscms_page';\n        $melisEngineCacheSystem = $this->getServiceManager()->get('MelisEngineCacheSystem');\n        $results = $melisEngineCacheSystem->getCacheByKey($cacheKey, $cacheConfig);\n\n        if(empty($results)) {\n\n            $site = $this->getSiteDataById($siteId);\n            $siteName = $site['site_name'];\n            $configFromFile = $this->getConfig($siteName);\n            $siteConfig = [];\n\n            if (array_key_exists('site', $configFromFile)) {\n                $dbConfigData = $this->getSiteConfigFromDb($siteId);\n                // merge config from file and from the db | the one on the db will be prioritized\n                $siteConfig = ArrayUtils::merge($siteConfig, $configFromFile, true);\n                /**\n                 * Make sure that we are accessing the correct config\n                 */\n                if (isset($siteConfig['site'][$siteName][$siteId])) {\n                    $activeSiteLangs = $this->getSiteActiveLanguages($siteId);\n\n                    // add langauges that are active but not on the config file\n                    foreach ($activeSiteLangs as $lang) {\n                        if (!array_key_exists($lang['lang_cms_locale'], $siteConfig['site'][$siteName][$siteId])) {\n                            $siteConfig['site'][$siteName][$siteId][$lang['lang_cms_locale']] = [];\n                        }\n                    }\n\n                    // also merge all language config (except the general one) because some variables could be defined in one\n                    // one language but not on the other\n                    if (!empty($siteConfig['site'][$siteName][$siteId])) {\n                        foreach ($siteConfig['site'][$siteName][$siteId] as $langConfigKey => $langConfigVal) {\n                            foreach ($siteConfig['site'][$siteName][$siteId] as $otherLangConfigKey => $otherLangConfigVal) {\n                                if ($langConfigKey !== $otherLangConfigKey) {\n                                    foreach ($otherLangConfigVal as $configKey => $configValue) {\n                                        if (!array_key_exists($configKey, $siteConfig['site'][$siteName][$siteId][$langConfigKey])) {\n                                            if (is_array($configValue)) {\n                                                $arr = [];\n\n                                                foreach ($configValue as $key => $val) {\n                                                    if (!is_array($val)) {\n                                                        $arr[$key] = '';\n                                                    }\n                                                }\n\n                                                $siteConfig['site'][$siteName][$siteId][$langConfigKey] = ArrayUtils::merge($siteConfig['site'][$siteName][$siteId][$langConfigKey], [$configKey => $arr], true);\n                                            } else {\n                                                $siteConfig['site'][$siteName][$siteId][$langConfigKey] = ArrayUtils::merge($siteConfig['site'][$siteName][$siteId][$langConfigKey], [$configKey => ''], true);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (!empty($dbConfigData)) {\n                        foreach ($dbConfigData as $dbConf) {\n                            if ($dbConf['sconf_lang_id'] == '-1') {\n                                $siteConfig = ArrayUtils::merge(\n                                    $siteConfig,\n                                    [\n                                        'site' => [\n                                            $siteName => unserialize($dbConf['sconf_datas'])\n                                        ],\n                                    ],\n                                    true\n                                );\n                            } else {\n                                $siteConfig = ArrayUtils::merge(\n                                    $siteConfig,\n                                    [\n                                        'site' => [\n                                            $siteName => [\n                                                $siteId => unserialize($dbConf['sconf_datas'])\n                                            ],\n                                        ]\n                                    ],\n                                    true\n                                );\n                            }\n                        }\n                    }\n\n                    $arrayParameters['config'] = ($arrayParameters['returnAll']) ? $siteConfig : $siteConfig['site'][$siteName][$siteId];\n                } else {\n                    $arrayParameters['config'] = [];\n                }\n            } else {\n                $arrayParameters['config'] = [];\n            }\n            // Save cache key\n            $melisEngineCacheSystem->setCacheByKey($cacheKey, $cacheConfig, $arrayParameters['config']);\n        }else{\n            //return the config from cache\n            $arrayParameters['config'] = $results;\n        }\n\n        $arrayParameters = $this->sendEvent('meliscms_site_tool_get_site_config_end', $arrayParameters);\n        return $arrayParameters['config'];\n    }\n\n    /**\n     * Returns Config From File\n     * @param $siteName\n     * @return mixed\n     */\n    public function getConfig($siteName)\n    {\n        /** @var MelisEngineComposerService $composerSrv */\n        $composerSrv  = $this->getServiceManager()->get('MelisEngineComposer');\n        $config = [];\n\n        if (!empty($composerSrv->getComposerModulePath($siteName))) {\n            $modulePath = $composerSrv->getComposerModulePath($siteName);\n        } else {\n            $modulePath = $_SERVER['DOCUMENT_ROOT'] . '/../module/MelisSites/' . $siteName;\n        }\n\n        if (file_exists($modulePath . '/config/' . $siteName . '.config.php')) {\n            $config = include $modulePath . '/config/' . $siteName . '.config.php';\n        }\n\n        return $config;\n    }\n\n    /**\n     * Returns Site Config From DB\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfigFromDb($siteId)\n    {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n        return $siteConfigTable->getEntryByField('sconf_site_id', $siteId)->toArray();\n    }\n\n    /**\n     * Returns Site Active Languages\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteActiveLanguages($siteId)\n    {\n        $siteLangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n        return $siteLangsTable->getSiteLangs(null, $siteId, null, true)->toArray();\n    }\n\n    /**\n     * Returns Site Data\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteDataById($siteId)\n    {\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n        return $siteTable->getEntryById($siteId)->toArray()[0];\n    }\n\n    /**\n     * Function to get the site data\n     * using the page id\n     *\n     * @param $pageId\n     * @return array|object\n     */\n    private function getSiteDataByPageId($pageId)\n    {\n        $siteData = [];\n        $siteId = 0;\n\n        $pageSaved = $this->getServiceManager()->get('MelisEngineTablePageSaved');\n        $pagePublished = $this->getServiceManager()->get('MelisEngineTablePagePublished');\n        $tplSrv = $this->getServiceManager()->get('MelisEngineTemplateService');\n\n        if(!empty($pageId)){\n            /**\n             * check first if there is data on page saved\n             */\n            $pageSavedData = $pageSaved->getEntryById($pageId)->current();\n            if(!empty($pageSavedData)){\n                $tplId = $pageSavedData->page_tpl_id;\n            }else{\n                //try to get the data from the page published\n                $pagePublishedData = $pagePublished->getEntryById($pageId)->current();\n                $tplId = $pagePublishedData->page_tpl_id;\n            }\n\n            if(!empty($tplId)){\n                $tplData = $tplSrv->getTemplate($tplId)->current();\n                if(!empty($tplData)){\n                    $siteId = $tplData->tpl_site_id;\n                }\n            }\n        }\n\n        if(!empty($siteId)){\n            $siteSrv = $this->getServiceManager()->get('MelisEngineSiteService');\n            $siteData = $siteSrv->getSiteById($siteId)->current();\n        }\n\n        return $siteData;\n    }\n}"], "fixing_code": ["<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2017 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisFront\\Controller;\n\nuse Laminas\\View\\Model\\JsonModel;\nuse Assetic\\Exception\\Exception;\nuse Laminas\\View\\Model\\ViewModel;\nuse MelisCore\\Controller\\MelisAbstractActionController;\n\nclass MelisPluginRendererController extends MelisAbstractActionController\n{\n\n    public function getPluginAction()\n    {   \n        $module = $this->getRequest()->getQuery('module', $this->params()->fromRoute('module'));\n        $pluginName = $this->getRequest()->getQuery('pluginName', $this->params()->fromRoute('pluginName'));\n        $pageId = $this->getRequest()->getQuery('pageId', $this->params()->fromRoute('pageId', 1));\n        $pluginId = $this->getRequest()->getQuery('pluginId', $this->params()->fromRoute('pluginId', null));\n        $fromDragDropZone = $this->getRequest()->getQuery('fromDragDropZone', $this->params()->fromRoute('fromDragDropZone', false));\n        $encapsulatedPlugin = $this->getRequest()->getQuery('encapsulatedPlugin', true);\n        $post = $this->getRequest()->getPost()->toArray();\n        $pluginHardcodedConfig = array();\n        if (!empty($post['pluginHardcodedConfig']))\n        {\n            $pluginHardcodedConfig = $post['pluginHardcodedConfig'];\n            $pluginHardcodedConfig = html_entity_decode($pluginHardcodedConfig, ENT_QUOTES);\n            $pluginHardcodedConfig = html_entity_decode($pluginHardcodedConfig, ENT_QUOTES);\n            $pluginHardcodedConfig = unserialize($pluginHardcodedConfig, ['allowed_classes' => false]);\n        }\n        \n        $translator = $this->getServiceManager()->get('translator');\n    \n        $results = array();\n        \n        $config = $this->getServiceManager()->get('config');\n        if (empty($module) || empty($pluginName) || empty($pageId))\n        {\n            $results['success'] = false;\n            $results['errors'] = $translator->translate('tr_melisfront_generate_error_No module or plugin or idpage parameters');\n        }\n        else\n        {\n            if (empty($config['plugins'][$module]['plugins'][$pluginName]))\n            {\n                $results['success'] = false;\n                $results['errors'] = $translator->translate('tr_melisfront_generate_error_Plugin config not found');\n            }\n            else\n            {\n                $pluginConf = $config['plugins'][$module]['plugins'][$pluginName];\n                \n                try\n                {\n                    /**\n                     * check if plugin is came from the mini template\n                     */\n                    if (strpos($pluginName, 'MiniTemplatePlugin') !== false) {\n                        $old = $pluginName;\n                        //explode to get the original plugin name\n                        $plugin = explode('_', $pluginName);\n                        //set the original plugin name\n                        $pluginName = $plugin[0];\n\n                        $melisPlugin = $this->getServiceManager()->get('ControllerPluginManager')->get($pluginName);\n                        $melisPlugin->setMiniTplPluginName($old);\n                    }else{\n                        $melisPlugin = $this->getServiceManager()->get('ControllerPluginManager')->get($pluginName);\n                    }\n                    \n                    // dragdrop, delete only if plugin is not hardcoded\n                    if (empty($pluginId))\n                        $melisPlugin->setPluginHardcoded(false);\n                    else\n                        $melisPlugin->setPluginHardcoded(true);\n                    \n                    if ($fromDragDropZone)\n                        $melisPlugin->setPluginFromDragDrop(true);\n                    \n                    $melisPlugin->setEncapsulatedPlugin($encapsulatedPlugin);\n\n                    $pluginParameters = $pluginHardcodedConfig;\n                    $pluginParameters['pageId'] = $pageId;\n                    \n                    // if it's a reload and there's an id\n                    if (!empty($pluginId))\n                    {\n                        $pluginParameters['id'] = $pluginId;\n                        $generatePluginId = false;\n                    }\n                    else\n                        $generatePluginId = true;\n\n                    $melisPluginView = $melisPlugin->render($pluginParameters, $generatePluginId);\n                        \n                    $viewRender = $this->getServiceManager()->get('ViewRenderer');\n                    $html = $viewRender->render($melisPluginView);\n                    \n                    $pluginConfFOBO = array();\n                    $BoFiles = (!empty($pluginConf['melis']['files']))? $pluginConf['melis']['files'] : array();\n                    $BoInit = (!empty($pluginConf['melis']['js_initialization']))? $pluginConf['melis']['js_initialization'] : array();\n                    \n                    $frontConfig = $melisPlugin->getPluginFrontConfig();\n\n                    $FoFiles = (!empty($frontConfig['files']))? $frontConfig['files'] : array();\n                    \n                    $pluginConfFOBO = array(\n                        'front' => array('ressources' => $FoFiles),\n                        'melis' => array('ressources' => $BoFiles, 'js_initialization' => $BoInit),\n                    );\n\n                    $dom = array(\n                        'widthDesktop' => $frontConfig['widthDesktop'],\n                        'widthTablet' => $frontConfig['widthTablet'],\n                        'widthMobile' => $frontConfig['widthMobile'],\n                        'pluginContainerId' => $frontConfig['pluginContainerId'],\n                    );\n                    \n                    $results = array(\n                        'success' => true,\n                        'datas' => array(\n                            'dom'  => $dom,\n                            'html' => $html,\n                            'init' => $pluginConfFOBO\n                        )\n                    );\n                }\n                catch (Exception $e)\n                {\n                    $results['success'] = false;\n                    $results['errors'] = $translator->translate('tr_melisfront_generate_error_Plugin cant be created');\n                }\n            }\n        }\n        \n        return new JsonModel($results);\n    }\n\n    public function editPluginAction()\n    {\n        $view  = new ViewModel();\n\n        return $view;\n    }\n\n}\n", "<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisFront\\Navigation;\n\nuse Laminas\\Navigation\\Service\\DefaultNavigationFactory;\nuse Psr\\Container\\ContainerInterface;\nuse Laminas\\ServiceManager\\ServiceManager;\nuse Laminas\\EventManager\\EventManager;\nuse Laminas\\EventManager\\EventManagerInterface;\n\n/**\n * Generate laminas navigation based on Melis Page System\n *\n */\nclass MelisFrontNavigation extends DefaultNavigationFactory\n{\n\tprivate $serviceManager;\n\tprivate $idpage;\n\tprivate $renderMode;\n\t\n\t/**\n\t * Constructor\n\t * \n\t * @param ServiceManager $$this->getServiceManager()\n\t * @param int $idpage\n\t * @param string $renderMode\n\t */\n\tpublic function __construct(ServiceManager $serviceManager, $idpage, $renderMode)\n\t{\n\t\t$this->setServiceManager($serviceManager);\n\t\t$this->idpage = $idpage;\n\t\t$this->renderMode = $renderMode;\n\t}\n\n    /**\n     * @param ServiceManager $serviceManager\n     */\n\tpublic function setServiceManager(ServiceManager $serviceManager)\n\t{\n\t\t$this->serviceManager = $serviceManager;\n\t}\n\n    /**\n     * @return $serviceManager\n     */\n\tpublic function getServiceManager()\n\t{\n\t\treturn $this->serviceManager;\n\t}\n\t\n\tpublic function getPageAndSubPages($pageId)\n\t{\n\t\t$melisPage = $this->getServiceManager()->get('MelisEnginePage');\n\t\t$pageTree = $melisPage->getDatasPage($pageId);\n\t\t\n\t\t$pages = array();\n\t\t\n\t\tif (!is_null($pageTree))\n\t\t{\n\t\t\t$page = $this->formatPageInArray((Array)$pageTree->getMelisPageTree());\n\t\t\t\n\t\t\t$children = $this->getChildrenRecursive($pageId);\n\t\t\tif (!empty($children))\n\t\t\t{\n\t\t\t\t$page['pages'] = $children;\n\t\t\t}\n\t\t\t\n\t\t\tif ($page)\n\t\t\t{\n\t\t\t\t$pages[] = $page;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $pages;\n\t}\n\t\n\t/**\n\t * Get subpages recursively\n\t * \n\t * @param int $idPage\n\t * @return array Pages\n\t */\n\tpublic function getChildrenRecursive($idPage)\n\t{\n\t\t$results = array();\n\t\t$melisTree = $this->getServiceManager()->get('MelisEngineTree');\n\t\t\n\t\t$publishedOnly = 1;\n\t\t$pages = $melisTree->getPageChildren($idPage,$publishedOnly);\n\n\t\tif ($pages)\n\t\t{\n\t\t\tforeach ($pages as $page)\n\t\t\t{\n\t\t\t\t$tmp = $this->formatPageInArray($page);\n\t\t\t\t$children = $this->getChildrenRecursive($page['tree_page_id']);\n\n\t\t\t\tif (!empty($children))\n\t\t\t\t\t$tmp['pages'] = $children;\n\t\t\t\t\n\t\t\t\t$results[] = $tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $results;\n\t}\n\t\n\tpublic function formatPageInArray($page,$pageSearchType = null)\n\t{\n\t\t$melisTree = $this->getServiceManager()->get('MelisEngineTree');\n\n\t\tif (empty($page) || empty($page['tree_page_id']))\n\t\t\treturn null;\n\t\t\n\t\tif (empty($page['purl_page_url']))\n\t\t\t$uri = $melisTree->getPageLink($page['tree_page_id'], 0);\n\t\telse\n\t\t\t$uri = $page['purl_page_url'];\n\t\t\n\t\tif (empty($page['page_edit_date']))\n\t\t\t$page['page_edit_date'] = date('Y-m-d H:i:s');\n\n\t\t\t$pageName = $page['page_name'];\n\t\t\t\n\t\t$tmp = array(\n\t\t\t'label' => $pageName,\n\t\t\t'menu' => $page['page_menu'],\n\t\t\t'uri' => $uri,\n\t\t\t'idPage' => $page['tree_page_id'],\n\t\t\t'lastEditDate' => $page['page_edit_date'],\n\t\t\t'pageStat' => $page['page_status'],\n\t\t\t'pageType' => $page['page_type'],\n\t\t\t'pageSearchType' => $pageSearchType,\n\t\t);\n\t\t\n\t\tif ($this->idpage == $page['tree_page_id'])\n\t\t\t$tmp['active'] = true;\n\t\t\n\t\treturn $tmp;\n\t}\n\t\n\tpublic function getSiteMainPageByPageId($idPage)\n\t{\n\t\t$melisTree = $this->getServiceManager()->get('MelisEngineTree');\n\t\t$datasSite = $melisTree->getSiteByPageId($idPage);\n\t\t\n\t\tif (!empty($datasSite))\n\t\treturn $datasSite->site_main_page_id;\n\t\t\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Get Pages\n\t * \n\t * @param ContainerInterface $container\n\t * \n\t * {@inheritDoc}\n\t * @see \\Laminas\\Navigation\\Service\\AbstractNavigationFactory::getPages()\n\t */\n\tprotected function getPages(ContainerInterface $container)\n\t{\n\t\tif (null === $this->pages) \n\t\t{\n\t\t\t$siteMainId = 0;\n\t\t\t\n\t\t\t$melisPage = $this->getServiceManager()->get('MelisEnginePage');\n\t\t\t$actualPage = $melisPage->getDatasPage($this->idpage);\n\t\t\tif ($actualPage)\n\t\t\t{\n\t\t\t\t$siteId = 0;\n\t\t\t\t$datasTemplate = $actualPage->getMelisTemplate();\n\t\t\t\tif (!empty($datasTemplate->tpl_site_id))\n\t\t\t\t\t$siteId = $datasTemplate->tpl_site_id;\n\t\t\t\t\n\t\t\t\tif (!empty($siteId) && $siteId > 0)\n\t\t\t\t{\n\t\t\t\t\t$melisTableSite = $this->getServiceManager()->get('MelisEngineTableSite');\n\t\t\t\t\t$datasSite = $melisTableSite->getSiteById($siteId, getenv('MELIS_PLATFORM'));\n\t\t\t\t\tif (!empty($datasSite))\n\t\t\t\t\t{\n\t\t\t\t\t\t$datasSite = $datasSite->toArray();\n\t\t\t\t\t\tif (count($datasSite) > 0)\n\t\t\t\t\t\t\t$siteMainId = $datasSite[0]['site_main_page_id'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$navigation = $this->getChildrenRecursive($siteMainId);\n\t\t\t\n\t\t\t$pages      = $this->getPagesFromConfig($navigation);\n\t\n\t\t\t$this->pages = $this->injectComponents(\n\t\t\t\t\t$pages\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn $this->pages;\n\t}\n\n\t/**\n\t * Get all Subpages including published and unplublished\n\t * @param $pageId\n\t * @return array\n\t */\n\tpublic function getAllSubpages($pageId)\n\t{\n\t\t$results = array();\n\t\t//Services\n\t\t$melisTree = $this->getServiceManager()->get('MelisEngineTree');\n\t\t$pagePub   = $this->getServiceManager()->get('MelisEngineTablePagePublished');\n\t\t$pageSave  = $this->getServiceManager()->get('MelisEngineTablePageSaved');\n\n\t\t$pageSearchType = null;\n\t\t$pages = $melisTree->getPageChildren($pageId,2);\n\t\t\n\t\tif($pages)\n\t\t{\n\t\t\tforeach ($pages as $page)\n\t\t\t{\n\t\t\t\t$pageStat = $page['page_status'] ?? null;\n\t\t\t\t//if the page is published\n\t\t\t\tif($pageStat){\n\t\t\t\t\t$pageData       = $pagePub->getEntryById($page['tree_page_id'])->current();\n\t\t\t\t\t$pageSearchType = $pageData->page_search_type ?? null;\n\t\t\t\t}\n\t\t\t\t//if the page is unpublished\n\t\t\t\telse{\n\t\t\t\t\t$pageData = $pageSave->getEntryById($page['tree_page_id'])->current();\n\t\t\t\t\t//if the unpublishedData is not present in page_saved table\n\t\t\t\t\tif(!$pageData){\n\t\t\t\t\t\t//Get the pageData in page_published table\n\t\t\t\t\t\t$pageData = $pagePub->getEntryById($page['tree_page_id'])->current();\n\t\t\t\t\t}\n\t\t\t\t\t$pageSearchType = $pageData->page_search_type ?? null;\n\t\t\t\t}\n\n\t\t\t\t$tmp = $this->formatPageInArray($page,$pageSearchType);\n\t\t\t\t$children = $this->getAllSubpages($page['tree_page_id'] ?? null);\n\n\t\t\t\tif (!empty($children))\n\t\t\t\t\t$tmp['pages'] = $children;\n\n\t\t\t\t$results[] = $tmp;\n\t\t\t}\n\t\t}\n\t\treturn $results;\n\t}\n}", "<?php\n\n/**\n * Melis Technology (http://www.melistechnology.com)\n *\n * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)\n *\n */\n\nnamespace MelisFront\\Service;\n\nuse MelisCore\\Service\\MelisGeneralService;\nuse MelisEngine\\Service\\MelisEngineComposerService;\nuse Laminas\\Stdlib\\ArrayUtils;\n\nclass MelisSiteConfigService extends MelisGeneralService\n{\n\n    /**\n     * Function to get the site config by key\n     *\n     * @param $key\n     * @param string $section\n     * @param int $pageId\n     * @param null $language\n     * @return array|string\n     */\n    public function getSiteConfigByKey($key, $pageId, $section = 'sites', $language = null)\n    {\n        if(empty($section))\n            $section = 'sites';\n\n        /**\n         * check if we are getting it from the current site config\n         * or from the allSites\n         */\n        if ($section == 'sites' || $section == 'allSites') {\n            $siteConfigData = $this->getSiteConfigByPageId($pageId);\n            if ($section == 'sites') {\n                if (empty($language)) {\n                    //return the value if the given key\n                    return (isset($siteConfigData['siteConfig'][$key])) ? $siteConfigData['siteConfig'][$key] : null;\n                } else {\n                    //return the given key value from its specific language\n                    $langLocale = strtolower($language) . '_' . strtoupper($language);\n                    $siteConfigData = $this->getSiteConfigByPageId($pageId, $langLocale);\n                    return (isset($siteConfigData['siteConfig'][$key])) ? $siteConfigData['siteConfig'][$key] : null;\n                }\n            } else {\n                //return given key value from allSites\n                return (isset($siteConfigData['allSites'][$key])) ? $siteConfigData['allSites'][$key] : null;\n            }\n        } else {\n            $siteConfigData = $this->getSiteConfig($section);\n            $data = [];\n            foreach ($siteConfigData as $locale => $value) {\n                $data[$locale] = array($key => $value[$key]);\n            }\n            if (empty($language))\n                return $data;\n            else {\n                $langLocale = strtolower($language) . '_' . strtoupper($language);\n                return $data[$langLocale][$key];\n            }\n        }\n    }\n\n    /**\n     * Function to return site config by page id\n     *\n     * @param $pageId\n     * @param $langLocale - ex: en_EN, fr_FR\n     * @return array\n     */\n    public function getSiteConfigByPageId($pageId, $langLocale = false)\n    {\n        // Event parameters prepare\n        $arrayParameters = $this->makeArrayFromParameters(__METHOD__, func_get_args());\n        // Sending service start event\n        $arrayParameters = $this->sendEvent('meliscms_site_tool_get_site_config_by_page_id_start', $arrayParameters);\n\n        //try to get config from cache\n        $cacheKey = 'getSiteConfigByPageId_' . $pageId.'_'.$langLocale;\n        $cacheConfig = 'meliscms_page';\n        $melisEngineCacheSystem = $this->getServiceManager()->get('MelisEngineCacheSystem');\n        $results = $melisEngineCacheSystem->getCacheByKey($cacheKey, $cacheConfig);\n\n        if(empty($results)) {\n\n            $siteConfig = array(\n                'siteConfig' => array(),\n                'allSites' => array(),\n            );\n\n            if (!empty($pageId)) {\n                /**\n                 * get the language if the page\n                 */\n                $cmsPageLang = $this->getServiceManager()->get('MelisEngineTablePageLang');\n                $pageLang = $cmsPageLang->getEntryByField('plang_page_id', $arrayParameters['pageId'])->current();\n                /**\n                 * get page lang locale\n                 */\n                $langCmsSrv = $this->getServiceManager()->get('MelisEngineLang');\n                $langData = array();\n                $langId = null;\n                if (!empty($pageLang)) {\n                    $langData = $langCmsSrv->getLangDataById($pageLang->plang_lang_id);\n                }\n                /**\n                 * get the site config\n                 */\n                if (!empty($langData)) {\n                    $siteData = $this->getSiteDataByPageId($arrayParameters['pageId']);\n                    if (!empty($siteData)) {\n                        $siteId = $siteData->site_id;\n                        $siteName = $siteData->site_name;\n\n                        /**\n                         * First, let's try fetch the site config\n                         * using the config service that has been updated\n                         * through a listener\n                         */\n                        $config = $this->getServiceManager()->get('config');\n\n                        if (!empty($config['site'])) {\n                            /**\n                             * If site config not in the list,\n                             * let's try again to get it directly from the\n                             * db and file\n                             */\n                            if (empty($config['site'][$siteName][$siteId])) {\n                                $config = $this->getSiteConfig($siteId, true);\n                            }\n\n                            if (!empty($config['site'][$siteName][$siteId])) {\n\n                                if ($arrayParameters['langLocale']) {\n                                    $siteConfig['siteConfig'] = $config['site'][$siteName][$siteId][$arrayParameters['langLocale']];\n                                    $siteLangData = $langCmsSrv->getLangDataByLangLocale($arrayParameters['langLocale']);\n                                    if (!empty($siteLangData)) {\n                                        $langId = $siteLangData->lang_cms_id;\n                                    }\n                                } else {\n                                    foreach($langData as $val) {\n                                        $siteConfig['siteConfig'] = $config['site'][$siteName][$siteId][$val['lang_cms_locale']];\n                                        $langId = $val['lang_cms_id'];\n                                    }\n                                }\n                                $siteConfig['siteConfig']['site_id'] = $siteId;\n                                $siteConfig['siteConfig']['default_lang_id'] = $langId;\n                                $siteConfig['allSites'] = $config['site'][$siteName]['allSites'];\n                            }\n                        }\n                    }\n                }\n            }\n\n            $arrayParameters['result'] = $siteConfig;\n            // Save cache key\n            $melisEngineCacheSystem->setCacheByKey($cacheKey, $cacheConfig, $arrayParameters['result']);\n        }else{\n            //return the config from cache\n            $arrayParameters['result'] = $results;\n        }\n\n        $arrayParameters = $this->sendEvent('meliscms_site_tool_get_site_config_by_page_id_end', $arrayParameters);\n\n        return $arrayParameters['result'];\n    }\n\n    /**\n     * Returns Merged Site Config (File and DB)\n     * @param $siteId\n     * @param $returnAll\n     * @return array\n     */\n    public function getSiteConfig($siteId, $returnAll = false)\n    {\n        // Event parameters prepare\n        $arrayParameters = $this->makeArrayFromParameters(__METHOD__, func_get_args());\n        // Sending service start event\n        $arrayParameters = $this->sendEvent('meliscms_site_tool_get_site_config_start', $arrayParameters);\n        $siteId = $arrayParameters['siteId'];\n\n        //try to get config from cache\n        $cacheKey = 'getSiteConfig_' . $siteId.'_'.$returnAll;\n        $cacheConfig = 'meliscms_page';\n        $melisEngineCacheSystem = $this->getServiceManager()->get('MelisEngineCacheSystem');\n        $results = $melisEngineCacheSystem->getCacheByKey($cacheKey, $cacheConfig);\n\n        if(empty($results)) {\n\n            $site = $this->getSiteDataById($siteId);\n            $siteName = $site['site_name'];\n            $configFromFile = $this->getConfig($siteName);\n            $siteConfig = [];\n\n            if (array_key_exists('site', $configFromFile)) {\n                $dbConfigData = $this->getSiteConfigFromDb($siteId);\n                // merge config from file and from the db | the one on the db will be prioritized\n                $siteConfig = ArrayUtils::merge($siteConfig, $configFromFile, true);\n                /**\n                 * Make sure that we are accessing the correct config\n                 */\n                if (isset($siteConfig['site'][$siteName][$siteId])) {\n                    $activeSiteLangs = $this->getSiteActiveLanguages($siteId);\n\n                    // add langauges that are active but not on the config file\n                    foreach ($activeSiteLangs as $lang) {\n                        if (!array_key_exists($lang['lang_cms_locale'], $siteConfig['site'][$siteName][$siteId])) {\n                            $siteConfig['site'][$siteName][$siteId][$lang['lang_cms_locale']] = [];\n                        }\n                    }\n\n                    // also merge all language config (except the general one) because some variables could be defined in one\n                    // one language but not on the other\n                    if (!empty($siteConfig['site'][$siteName][$siteId])) {\n                        foreach ($siteConfig['site'][$siteName][$siteId] as $langConfigKey => $langConfigVal) {\n                            foreach ($siteConfig['site'][$siteName][$siteId] as $otherLangConfigKey => $otherLangConfigVal) {\n                                if ($langConfigKey !== $otherLangConfigKey) {\n                                    foreach ($otherLangConfigVal as $configKey => $configValue) {\n                                        if (!array_key_exists($configKey, $siteConfig['site'][$siteName][$siteId][$langConfigKey])) {\n                                            if (is_array($configValue)) {\n                                                $arr = [];\n\n                                                foreach ($configValue as $key => $val) {\n                                                    if (!is_array($val)) {\n                                                        $arr[$key] = '';\n                                                    }\n                                                }\n\n                                                $siteConfig['site'][$siteName][$siteId][$langConfigKey] = ArrayUtils::merge($siteConfig['site'][$siteName][$siteId][$langConfigKey], [$configKey => $arr], true);\n                                            } else {\n                                                $siteConfig['site'][$siteName][$siteId][$langConfigKey] = ArrayUtils::merge($siteConfig['site'][$siteName][$siteId][$langConfigKey], [$configKey => ''], true);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (!empty($dbConfigData)) {\n                        foreach ($dbConfigData as $dbConf) {\n                            if ($dbConf['sconf_lang_id'] == '-1') {\n                                $siteConfig = ArrayUtils::merge(\n                                    $siteConfig,\n                                    [\n                                        'site' => [\n                                            $siteName => unserialize($dbConf['sconf_datas'], ['allowed_classes' => false])\n                                        ],\n                                    ],\n                                    true\n                                );\n                            } else {\n                                $siteConfig = ArrayUtils::merge(\n                                    $siteConfig,\n                                    [\n                                        'site' => [\n                                            $siteName => [\n                                                $siteId => unserialize($dbConf['sconf_datas'], ['allowed_classes' => false])\n                                            ],\n                                        ]\n                                    ],\n                                    true\n                                );\n                            }\n                        }\n                    }\n\n                    $arrayParameters['config'] = ($arrayParameters['returnAll']) ? $siteConfig : $siteConfig['site'][$siteName][$siteId];\n                } else {\n                    $arrayParameters['config'] = [];\n                }\n            } else {\n                $arrayParameters['config'] = [];\n            }\n            // Save cache key\n            $melisEngineCacheSystem->setCacheByKey($cacheKey, $cacheConfig, $arrayParameters['config']);\n        }else{\n            //return the config from cache\n            $arrayParameters['config'] = $results;\n        }\n\n        $arrayParameters = $this->sendEvent('meliscms_site_tool_get_site_config_end', $arrayParameters);\n        return $arrayParameters['config'];\n    }\n\n    /**\n     * Returns Config From File\n     * @param $siteName\n     * @return mixed\n     */\n    public function getConfig($siteName)\n    {\n        /** @var MelisEngineComposerService $composerSrv */\n        $composerSrv  = $this->getServiceManager()->get('MelisEngineComposer');\n        $config = [];\n\n        if (!empty($composerSrv->getComposerModulePath($siteName))) {\n            $modulePath = $composerSrv->getComposerModulePath($siteName);\n        } else {\n            $modulePath = $_SERVER['DOCUMENT_ROOT'] . '/../module/MelisSites/' . $siteName;\n        }\n\n        if (file_exists($modulePath . '/config/' . $siteName . '.config.php')) {\n            $config = include $modulePath . '/config/' . $siteName . '.config.php';\n        }\n\n        return $config;\n    }\n\n    /**\n     * Returns Site Config From DB\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteConfigFromDb($siteId)\n    {\n        $siteConfigTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteConfig');\n        return $siteConfigTable->getEntryByField('sconf_site_id', $siteId)->toArray();\n    }\n\n    /**\n     * Returns Site Active Languages\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteActiveLanguages($siteId)\n    {\n        $siteLangsTable = $this->getServiceManager()->get('MelisEngineTableCmsSiteLangs');\n        return $siteLangsTable->getSiteLangs(null, $siteId, null, true)->toArray();\n    }\n\n    /**\n     * Returns Site Data\n     * @param $siteId\n     * @return mixed\n     */\n    private function getSiteDataById($siteId)\n    {\n        $siteTable = $this->getServiceManager()->get('MelisEngineTableSite');\n        return $siteTable->getEntryById($siteId)->toArray()[0];\n    }\n\n    /**\n     * Function to get the site data\n     * using the page id\n     *\n     * @param $pageId\n     * @return array|object\n     */\n    private function getSiteDataByPageId($pageId)\n    {\n        $siteData = [];\n        $siteId = 0;\n\n        $pageSaved = $this->getServiceManager()->get('MelisEngineTablePageSaved');\n        $pagePublished = $this->getServiceManager()->get('MelisEngineTablePagePublished');\n        $tplSrv = $this->getServiceManager()->get('MelisEngineTemplateService');\n\n        if(!empty($pageId)){\n            /**\n             * check first if there is data on page saved\n             */\n            $pageSavedData = $pageSaved->getEntryById($pageId)->current();\n            if(!empty($pageSavedData)){\n                $tplId = $pageSavedData->page_tpl_id;\n            }else{\n                //try to get the data from the page published\n                $pagePublishedData = $pagePublished->getEntryById($pageId)->current();\n                $tplId = $pagePublishedData->page_tpl_id;\n            }\n\n            if(!empty($tplId)){\n                $tplData = $tplSrv->getTemplate($tplId)->current();\n                if(!empty($tplData)){\n                    $siteId = $tplData->tpl_site_id;\n                }\n            }\n        }\n\n        if(!empty($siteId)){\n            $siteSrv = $this->getServiceManager()->get('MelisEngineSiteService');\n            $siteData = $siteSrv->getSiteById($siteId)->current();\n        }\n\n        return $siteData;\n    }\n}"], "filenames": ["src/Controller/MelisPluginRendererController.php", "src/Navigation/MelisFrontNavigation.php", "src/Service/MelisSiteConfigService.php"], "buggy_code_start_loc": [35, 13, 251], "buggy_code_end_loc": [36, 14, 263], "fixing_code_start_loc": [35, 13, 251], "fixing_code_end_loc": [36, 14, 263], "type": "CWE-502", "message": "MelisFront is the engine that displays website hosted on Melis Platform. It deals with showing pages, plugins, URL rewritting, search optimization and SEO, etc. Attackers can deserialize arbitrary data on affected versions of `melisplatform/melis-front`, and ultimately leads to the execution of arbitrary PHP code on the system. Conducting this attack does not require authentication. Users should immediately upgrade to `melisplatform/melis-front` >= 5.0.1. This issue was addressed by restricting allowed classes when deserializing user-controlled data.", "other": {"cve": {"id": "CVE-2022-39298", "sourceIdentifier": "security-advisories@github.com", "published": "2022-10-12T23:15:09.707", "lastModified": "2022-10-13T17:34:52.540", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MelisFront is the engine that displays website hosted on Melis Platform. It deals with showing pages, plugins, URL rewritting, search optimization and SEO, etc. Attackers can deserialize arbitrary data on affected versions of `melisplatform/melis-front`, and ultimately leads to the execution of arbitrary PHP code on the system. Conducting this attack does not require authentication. Users should immediately upgrade to `melisplatform/melis-front` >= 5.0.1. This issue was addressed by restricting allowed classes when deserializing user-controlled data."}, {"lang": "es", "value": "MelisFront es el motor que muestra las p\u00e1ginas web alojadas en la Plataforma Melis. Es encargada de mostrar las p\u00e1ginas, los plugins, la reescritura de URL, la optimizaci\u00f3n de las b\u00fasquedas y el SEO, etc. Los atacantes pueden deserializar datos arbitrarios en las versiones afectadas de \"melisplatform/melis-front\", y en \u00faltima instancia conlleva a una ejecuci\u00f3n de c\u00f3digo PHP arbitrario en el sistema. La realizaci\u00f3n de este ataque no requiere autenticaci\u00f3n. Los usuarios deben actualizar inmediatamente a \"melisplatform/melis-front\" versiones posteriores a 5.0.1 incluy\u00e9ndola. Este problema ha sido abordado al restringir las clases permitidas cuando son deserializados los datos controlados por el usuario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:melistechnology:meliscms:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.0.1", "matchCriteriaId": "2A0F2482-77FC-4B8D-A360-E340941ACA59"}]}]}], "references": [{"url": "https://github.com/melisplatform/melis-front/commit/89ae612d5f1f7aa2fb621ee8de27dffe1feb851e", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/melisplatform/melis-front/security/advisories/GHSA-h479-2mv4-5c26", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/melisplatform/melis-front/commit/89ae612d5f1f7aa2fb621ee8de27dffe1feb851e"}}