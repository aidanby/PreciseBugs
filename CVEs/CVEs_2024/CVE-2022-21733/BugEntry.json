{"buggy_code": ["/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <locale>\n#include <string>\n\n#include \"absl/strings/ascii.h\"\n#include \"absl/strings/str_cat.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/platform/errors.h\"\n\nnamespace tensorflow {\nnamespace text {\n\nnamespace {\ntemplate <typename SPLITS_TYPE>\nclass StringNGramsOp : public tensorflow::OpKernel {\n public:\n  explicit StringNGramsOp(tensorflow::OpKernelConstruction* context)\n      : tensorflow::OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"separator\", &separator_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"ngram_widths\", &ngram_widths_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"left_pad\", &left_pad_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"right_pad\", &right_pad_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"pad_width\", &pad_width_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"preserve_short_sequences\",\n                                             &preserve_short_));\n  }\n\n  int get_pad_width(const int ngram_width) const {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'pad_width' arg, but in no case should the padding\n    // ever be wider than 'ngram_width' - 1.\n    return std::min(pad_width_ < 0 ? ngram_width - 1 : pad_width_,\n                    ngram_width - 1);\n  }\n\n  int get_num_ngrams(const int length, const int ngram_width) const {\n    int pad_width = get_pad_width(ngram_width);\n    return std::max(0, ((length + 2 * pad_width) - ngram_width) + 1);\n  }\n\n  void Compute(tensorflow::OpKernelContext* context) override {\n    for (int ngram_width : ngram_widths_) {\n      OP_REQUIRES(\n          context, ngram_width > 0,\n          errors::InvalidArgument(\"ngram_widths must contain positive values\"));\n    }\n\n    const tensorflow::Tensor* data;\n    OP_REQUIRES_OK(context, context->input(\"data\", &data));\n    const auto& input_data = data->flat<tstring>().data();\n\n    const tensorflow::Tensor* splits;\n    OP_REQUIRES_OK(context, context->input(\"data_splits\", &splits));\n    const auto& splits_vec = splits->flat<SPLITS_TYPE>();\n\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const int input_data_size = data->flat<tstring>().size();\n    const int splits_vec_size = splits_vec.size();\n    if (splits_vec_size > 0) {\n      int prev_split = splits_vec(0);\n      OP_REQUIRES(context, prev_split == 0,\n                  errors::InvalidArgument(\"First split value must be 0, got \",\n                                          prev_split));\n      for (int i = 1; i < splits_vec_size; ++i) {\n        bool valid_splits = splits_vec(i) >= prev_split;\n        valid_splits = valid_splits && (splits_vec(i) <= input_data_size);\n        OP_REQUIRES(context, valid_splits,\n                    errors::InvalidArgument(\n                        \"Invalid split value \", splits_vec(i), \", must be in [\",\n                        prev_split, \", \", input_data_size, \"]\"));\n        prev_split = splits_vec(i);\n      }\n      OP_REQUIRES(context, prev_split == input_data_size,\n                  errors::InvalidArgument(\n                      \"Last split value must be data size. Expected \",\n                      input_data_size, \", got \", prev_split));\n    }\n\n    int num_batch_items = splits_vec.size() - 1;\n    tensorflow::Tensor* ngrams_splits;\n    OP_REQUIRES_OK(\n        context, context->allocate_output(1, splits->shape(), &ngrams_splits));\n    auto ngrams_splits_data = ngrams_splits->flat<SPLITS_TYPE>().data();\n\n    // If there is no data or size, return an empty RT.\n    if (data->flat<tstring>().size() == 0 || splits_vec.size() == 0) {\n      tensorflow::Tensor* empty;\n      OP_REQUIRES_OK(context,\n                     context->allocate_output(0, data->shape(), &empty));\n      for (int i = 0; i <= num_batch_items; ++i) {\n        ngrams_splits_data[i] = 0;\n      }\n      return;\n    }\n\n    ngrams_splits_data[0] = 0;\n    for (int i = 1; i <= num_batch_items; ++i) {\n      int length = splits_vec(i) - splits_vec(i - 1);\n      int num_ngrams = 0;\n      for (int ngram_width : ngram_widths_)\n        num_ngrams += get_num_ngrams(length, ngram_width);\n      if (preserve_short_ && length > 0 && num_ngrams == 0) {\n        num_ngrams = 1;\n      }\n      ngrams_splits_data[i] = ngrams_splits_data[i - 1] + num_ngrams;\n    }\n\n    tensorflow::Tensor* ngrams;\n    OP_REQUIRES_OK(\n        context,\n        context->allocate_output(\n            0, TensorShape({ngrams_splits_data[num_batch_items]}), &ngrams));\n    auto ngrams_data = ngrams->flat<tstring>().data();\n\n    for (int i = 0; i < num_batch_items; ++i) {\n      auto data_start = &input_data[splits_vec(i)];\n      int output_start_idx = ngrams_splits_data[i];\n      for (int ngram_width : ngram_widths_) {\n        auto output_start = &ngrams_data[output_start_idx];\n        int length = splits_vec(i + 1) - splits_vec(i);\n        int num_ngrams = get_num_ngrams(length, ngram_width);\n        CreateNgrams(data_start, output_start, num_ngrams, ngram_width);\n        output_start_idx += num_ngrams;\n      }\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (ngram_splits_data). If no ngrams were generated, then they will\n      // be equal (since we increment output_start_idx by num_ngrams every\n      // time we create a set of ngrams.)\n      if (preserve_short_ && output_start_idx == ngrams_splits_data[i]) {\n        int data_length = splits_vec(i + 1) - splits_vec(i);\n        // One legitimate reason to not have any ngrams when preserve_short_\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (data_length == 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one ngram.\n        int ngram_width = data_length + 2 * pad_width_;\n        auto output_start = &ngrams_data[output_start_idx];\n        int num_ngrams = 1;\n        CreateNgrams(data_start, output_start, num_ngrams, ngram_width);\n      }\n    }\n  }\n\n  void CreateNgrams(const tstring* data, tstring* output, int num_ngrams,\n                    int ngram_width) const {\n    for (int ngram_index = 0; ngram_index < num_ngrams; ++ngram_index) {\n      int pad_width = get_pad_width(ngram_width);\n      int left_padding = std::max(0, pad_width - ngram_index);\n      int right_padding =\n          std::max(0, pad_width - (num_ngrams - (ngram_index + 1)));\n      int num_tokens = ngram_width - (left_padding + right_padding);\n      int data_start_index = left_padding > 0 ? 0 : ngram_index - pad_width;\n\n      // Calculate the total expected size of the ngram so we can reserve the\n      // correct amount of space in the string.\n      int ngram_size = 0;\n      // Size of the left padding.\n      ngram_size += left_padding * left_pad_.length();\n      // Size of the tokens.\n      for (int n = 0; n < num_tokens; ++n) {\n        ngram_size += data[data_start_index + n].length();\n      }\n      // Size of the right padding.\n      ngram_size += right_padding * right_pad_.length();\n      // Size of the separators.\n      int num_separators = left_padding + right_padding + num_tokens - 1;\n      ngram_size += num_separators * separator_.length();\n\n      // Build the ngram.\n      tstring* ngram = &output[ngram_index];\n      ngram->reserve(ngram_size);\n      for (int n = 0; n < left_padding; ++n) {\n        ngram->append(left_pad_);\n        ngram->append(separator_);\n      }\n      // Only output first num_tokens - 1 pairs of data and separator\n      for (int n = 0; n < num_tokens - 1; ++n) {\n        ngram->append(data[data_start_index + n]);\n        ngram->append(separator_);\n      }\n      // Handle case when there are no tokens or no right padding as these can\n      // result in consecutive separators.\n      if (num_tokens > 0) {\n        // If we have tokens, then output last and then pair each separator with\n        // the right padding that follows, to ensure ngram ends either with the\n        // token or with the right pad.\n        ngram->append(data[data_start_index + num_tokens - 1]);\n        for (int n = 0; n < right_padding; ++n) {\n          ngram->append(separator_);\n          ngram->append(right_pad_);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the ngram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (int n = 0; n < right_padding - 1; ++n) {\n          ngram->append(right_pad_);\n          ngram->append(separator_);\n        }\n        ngram->append(right_pad_);\n      }\n\n      // In debug mode only: validate that we've reserved enough space for the\n      // ngram.\n      DCHECK_EQ(ngram_size, ngram->size());\n    }\n  }\n\n  string separator_;\n  string left_pad_;\n  string right_pad_;\n  bool use_pad_;\n  bool extend_pad_;\n  bool preserve_short_;\n\n  std::vector<int> ngram_widths_;\n  int pad_width_;\n};\n\n}  // namespace\nREGISTER_KERNEL_BUILDER(Name(\"StringNGrams\")\n                            .Device(tensorflow::DEVICE_CPU)\n                            .TypeConstraint<int32>(\"Tsplits\"),\n                        StringNGramsOp<int32>);\nREGISTER_KERNEL_BUILDER(Name(\"StringNGrams\")\n                            .Device(tensorflow::DEVICE_CPU)\n                            .TypeConstraint<int64_t>(\"Tsplits\"),\n                        StringNGramsOp<int64_t>);\n\n}  // namespace text\n}  // namespace tensorflow\n", "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Raw ops tests.\"\"\"\n\nfrom absl.testing import parameterized\n\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import gen_data_flow_ops\nfrom tensorflow.python.ops import gen_math_ops\nfrom tensorflow.python.ops import gen_string_ops\nfrom tensorflow.python.platform import test\n\n\n@test_util.run_all_in_graph_and_eager_modes\n@test_util.disable_tfrt\nclass RawOpsTest(test.TestCase, parameterized.TestCase):\n\n  def testSimple(self):\n    x = constant_op.constant(1)\n    self.assertEqual([2], self.evaluate(gen_math_ops.Add(x=x, y=x)))\n\n  def testRequiresKwargs(self):\n    with self.assertRaisesRegex(TypeError, \"only takes keyword args\"):\n      gen_math_ops.Add(1., 1.)\n\n  def testRequiresKwargs_providesSuggestion(self):\n    msg = \"possible keys: \\\\['x', 'y', 'name'\\\\]\"\n    with self.assertRaisesRegex(TypeError, msg):\n      gen_math_ops.Add(1., y=2.)\n\n  def testName(self):\n    x = constant_op.constant(1)\n    op = gen_math_ops.Add(x=x, y=x, name=\"double\")\n    if not context.executing_eagerly():\n      # `Tensor.name` is not available in eager.\n      self.assertEqual(op.name, \"double:0\")\n\n  def testDoc(self):\n    self.assertEqual(gen_math_ops.add.__doc__, gen_math_ops.Add.__doc__)\n\n  def testDefaults(self):\n    x = constant_op.constant([[True]])\n    self.assertAllClose(\n        gen_math_ops.Any(input=x, axis=0),\n        gen_math_ops.Any(input=x, axis=0, keep_dims=False))\n\n  @parameterized.parameters([[0, 8]], [[-1, 6]])\n  def testStringNGramsBadDataSplits(self, splits):\n    data = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"]\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Invalid split value\"):\n      self.evaluate(\n          gen_string_ops.string_n_grams(\n              data=data,\n              data_splits=splits,\n              separator=\"\",\n              ngram_widths=[2],\n              left_pad=\"\",\n              right_pad=\"\",\n              pad_width=0,\n              preserve_short_sequences=False))\n\n  def testGetSessionHandle(self):\n    if context.executing_eagerly():\n      with self.assertRaisesRegex(\n          errors.FailedPreconditionError,\n          \"GetSessionHandle called on null session state\"):\n        gen_data_flow_ops.GetSessionHandle(value=[1])\n\n\nif __name__ == \"__main__\":\n  ops.enable_eager_execution()\n  test.main()\n"], "fixing_code": ["/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <locale>\n#include <string>\n\n#include \"absl/strings/ascii.h\"\n#include \"absl/strings/str_cat.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/platform/errors.h\"\n\nnamespace tensorflow {\nnamespace text {\n\nnamespace {\ntemplate <typename SPLITS_TYPE>\nclass StringNGramsOp : public tensorflow::OpKernel {\n public:\n  explicit StringNGramsOp(tensorflow::OpKernelConstruction* context)\n      : tensorflow::OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"separator\", &separator_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"ngram_widths\", &ngram_widths_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"left_pad\", &left_pad_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"right_pad\", &right_pad_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"pad_width\", &pad_width_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"preserve_short_sequences\",\n                                             &preserve_short_));\n  }\n\n  int get_pad_width(const int ngram_width) const {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'pad_width' arg, but in no case should the padding\n    // ever be wider than 'ngram_width' - 1.\n    return std::min(pad_width_ < 0 ? ngram_width - 1 : pad_width_,\n                    ngram_width - 1);\n  }\n\n  int get_num_ngrams(const int length, const int ngram_width) const {\n    int pad_width = get_pad_width(ngram_width);\n    return std::max(0, ((length + 2 * pad_width) - ngram_width) + 1);\n  }\n\n  void Compute(tensorflow::OpKernelContext* context) override {\n    for (int ngram_width : ngram_widths_) {\n      OP_REQUIRES(\n          context, ngram_width > 0,\n          errors::InvalidArgument(\"ngram_widths must contain positive values\"));\n    }\n\n    const tensorflow::Tensor* data;\n    OP_REQUIRES_OK(context, context->input(\"data\", &data));\n    const auto& input_data = data->flat<tstring>().data();\n\n    const tensorflow::Tensor* splits;\n    OP_REQUIRES_OK(context, context->input(\"data_splits\", &splits));\n    const auto& splits_vec = splits->flat<SPLITS_TYPE>();\n\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const int input_data_size = data->flat<tstring>().size();\n    const int splits_vec_size = splits_vec.size();\n    if (splits_vec_size > 0) {\n      int prev_split = splits_vec(0);\n      OP_REQUIRES(context, prev_split == 0,\n                  errors::InvalidArgument(\"First split value must be 0, got \",\n                                          prev_split));\n      for (int i = 1; i < splits_vec_size; ++i) {\n        bool valid_splits = splits_vec(i) >= prev_split;\n        valid_splits = valid_splits && (splits_vec(i) <= input_data_size);\n        OP_REQUIRES(context, valid_splits,\n                    errors::InvalidArgument(\n                        \"Invalid split value \", splits_vec(i), \", must be in [\",\n                        prev_split, \", \", input_data_size, \"]\"));\n        prev_split = splits_vec(i);\n      }\n      OP_REQUIRES(context, prev_split == input_data_size,\n                  errors::InvalidArgument(\n                      \"Last split value must be data size. Expected \",\n                      input_data_size, \", got \", prev_split));\n    }\n\n    int num_batch_items = splits_vec.size() - 1;\n    tensorflow::Tensor* ngrams_splits;\n    OP_REQUIRES_OK(\n        context, context->allocate_output(1, splits->shape(), &ngrams_splits));\n    auto ngrams_splits_data = ngrams_splits->flat<SPLITS_TYPE>().data();\n\n    // If there is no data or size, return an empty RT.\n    if (data->flat<tstring>().size() == 0 || splits_vec.size() == 0) {\n      tensorflow::Tensor* empty;\n      OP_REQUIRES_OK(context,\n                     context->allocate_output(0, data->shape(), &empty));\n      for (int i = 0; i <= num_batch_items; ++i) {\n        ngrams_splits_data[i] = 0;\n      }\n      return;\n    }\n\n    ngrams_splits_data[0] = 0;\n    for (int i = 1; i <= num_batch_items; ++i) {\n      int length = splits_vec(i) - splits_vec(i - 1);\n      int num_ngrams = 0;\n      for (int ngram_width : ngram_widths_)\n        num_ngrams += get_num_ngrams(length, ngram_width);\n      if (preserve_short_ && length > 0 && num_ngrams == 0) {\n        num_ngrams = 1;\n      }\n      ngrams_splits_data[i] = ngrams_splits_data[i - 1] + num_ngrams;\n    }\n\n    tensorflow::Tensor* ngrams;\n    OP_REQUIRES_OK(\n        context,\n        context->allocate_output(\n            0, TensorShape({ngrams_splits_data[num_batch_items]}), &ngrams));\n    auto ngrams_data = ngrams->flat<tstring>().data();\n\n    for (int i = 0; i < num_batch_items; ++i) {\n      auto data_start = &input_data[splits_vec(i)];\n      int output_start_idx = ngrams_splits_data[i];\n      for (int ngram_width : ngram_widths_) {\n        auto output_start = &ngrams_data[output_start_idx];\n        int length = splits_vec(i + 1) - splits_vec(i);\n        int num_ngrams = get_num_ngrams(length, ngram_width);\n        CreateNgrams(data_start, output_start, num_ngrams, ngram_width);\n        output_start_idx += num_ngrams;\n      }\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (ngram_splits_data). If no ngrams were generated, then they will\n      // be equal (since we increment output_start_idx by num_ngrams every\n      // time we create a set of ngrams.)\n      if (preserve_short_ && output_start_idx == ngrams_splits_data[i]) {\n        int data_length = splits_vec(i + 1) - splits_vec(i);\n        // One legitimate reason to not have any ngrams when preserve_short_\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (data_length == 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one ngram.\n\n        // If reached here, pad_width should be > 0, pad_width_ = -1,\n        // which indicates max(ngram_widths) - 1 cannot be used here since\n        // ngram_width is not known.\n        OP_REQUIRES(\n            context, pad_width_ >= 0,\n            errors::InvalidArgument(\"Pad width should be >= 0 when \"\n                                    \"preserve_short_sequences is True and \"\n                                    \"ngram_widths are not provided, got \",\n                                    pad_width_));\n        int ngram_width = data_length + 2 * pad_width_;\n        auto output_start = &ngrams_data[output_start_idx];\n        int num_ngrams = 1;\n        CreateNgrams(data_start, output_start, num_ngrams, ngram_width);\n      }\n    }\n  }\n\n  void CreateNgrams(const tstring* data, tstring* output, int num_ngrams,\n                    int ngram_width) const {\n    for (int ngram_index = 0; ngram_index < num_ngrams; ++ngram_index) {\n      int pad_width = get_pad_width(ngram_width);\n      int left_padding = std::max(0, pad_width - ngram_index);\n      int right_padding =\n          std::max(0, pad_width - (num_ngrams - (ngram_index + 1)));\n      int num_tokens = ngram_width - (left_padding + right_padding);\n      int data_start_index = left_padding > 0 ? 0 : ngram_index - pad_width;\n\n      // Calculate the total expected size of the ngram so we can reserve the\n      // correct amount of space in the string.\n      int ngram_size = 0;\n      // Size of the left padding.\n      ngram_size += left_padding * left_pad_.length();\n      // Size of the tokens.\n      for (int n = 0; n < num_tokens; ++n) {\n        ngram_size += data[data_start_index + n].length();\n      }\n      // Size of the right padding.\n      ngram_size += right_padding * right_pad_.length();\n      // Size of the separators.\n      int num_separators = left_padding + right_padding + num_tokens - 1;\n      ngram_size += num_separators * separator_.length();\n\n      // Build the ngram.\n      tstring* ngram = &output[ngram_index];\n      ngram->reserve(ngram_size);\n      for (int n = 0; n < left_padding; ++n) {\n        ngram->append(left_pad_);\n        ngram->append(separator_);\n      }\n      // Only output first num_tokens - 1 pairs of data and separator\n      for (int n = 0; n < num_tokens - 1; ++n) {\n        ngram->append(data[data_start_index + n]);\n        ngram->append(separator_);\n      }\n      // Handle case when there are no tokens or no right padding as these can\n      // result in consecutive separators.\n      if (num_tokens > 0) {\n        // If we have tokens, then output last and then pair each separator with\n        // the right padding that follows, to ensure ngram ends either with the\n        // token or with the right pad.\n        ngram->append(data[data_start_index + num_tokens - 1]);\n        for (int n = 0; n < right_padding; ++n) {\n          ngram->append(separator_);\n          ngram->append(right_pad_);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the ngram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (int n = 0; n < right_padding - 1; ++n) {\n          ngram->append(right_pad_);\n          ngram->append(separator_);\n        }\n        ngram->append(right_pad_);\n      }\n\n      // In debug mode only: validate that we've reserved enough space for the\n      // ngram.\n      DCHECK_EQ(ngram_size, ngram->size());\n    }\n  }\n\n  string separator_;\n  string left_pad_;\n  string right_pad_;\n  bool use_pad_;\n  bool extend_pad_;\n  bool preserve_short_;\n\n  std::vector<int> ngram_widths_;\n  int pad_width_;\n};\n\n}  // namespace\nREGISTER_KERNEL_BUILDER(Name(\"StringNGrams\")\n                            .Device(tensorflow::DEVICE_CPU)\n                            .TypeConstraint<int32>(\"Tsplits\"),\n                        StringNGramsOp<int32>);\nREGISTER_KERNEL_BUILDER(Name(\"StringNGrams\")\n                            .Device(tensorflow::DEVICE_CPU)\n                            .TypeConstraint<int64_t>(\"Tsplits\"),\n                        StringNGramsOp<int64_t>);\n\n}  // namespace text\n}  // namespace tensorflow\n", "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Raw ops tests.\"\"\"\n\nfrom absl.testing import parameterized\n\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import gen_data_flow_ops\nfrom tensorflow.python.ops import gen_math_ops\nfrom tensorflow.python.ops import gen_string_ops\nfrom tensorflow.python.platform import test\n\n\n@test_util.run_all_in_graph_and_eager_modes\nclass RawOpsTest(test.TestCase, parameterized.TestCase):\n\n  def testSimple(self):\n    x = constant_op.constant(1)\n    self.assertEqual([2], self.evaluate(gen_math_ops.Add(x=x, y=x)))\n\n  def testRequiresKwargs(self):\n    with self.assertRaisesRegex(TypeError, \"only takes keyword args\"):\n      gen_math_ops.Add(1., 1.)\n\n  def testRequiresKwargs_providesSuggestion(self):\n    msg = \"possible keys: \\\\['x', 'y', 'name'\\\\]\"\n    with self.assertRaisesRegex(TypeError, msg):\n      gen_math_ops.Add(1., y=2.)\n\n  def testName(self):\n    x = constant_op.constant(1)\n    op = gen_math_ops.Add(x=x, y=x, name=\"double\")\n    if not context.executing_eagerly():\n      # `Tensor.name` is not available in eager.\n      self.assertEqual(op.name, \"double:0\")\n\n  def testDoc(self):\n    self.assertEqual(gen_math_ops.add.__doc__, gen_math_ops.Add.__doc__)\n\n  def testDefaults(self):\n    x = constant_op.constant([[True]])\n    self.assertAllClose(\n        gen_math_ops.Any(input=x, axis=0),\n        gen_math_ops.Any(input=x, axis=0, keep_dims=False))\n\n  @parameterized.parameters([[0, 8]], [[-1, 6]])\n  def testStringNGramsBadDataSplits(self, splits):\n    data = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"]\n    with self.assertRaisesRegex(\n        errors.InvalidArgumentError,\n        r\"Invalid split value|First split value must be 0\"):\n      self.evaluate(\n          gen_string_ops.string_n_grams(\n              data=data,\n              data_splits=splits,\n              separator=\"\",\n              ngram_widths=[2],\n              left_pad=\"\",\n              right_pad=\"\",\n              pad_width=0,\n              preserve_short_sequences=False))\n\n  def testStringSplit(self):\n    data = [\"123456\"]\n    data_splits = [0, 1]\n    separator = \"a\" * 15\n    ngram_widths = []\n    pad_width = -5\n    left_pad = right_pad = \"\"\n    with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                \"Pad width should be >= 0\"):\n      self.evaluate(gen_string_ops.string_n_grams(\n          data=data,\n          data_splits=data_splits,\n          separator=separator,\n          ngram_widths=ngram_widths,\n          left_pad=left_pad,\n          right_pad=right_pad,\n          pad_width=pad_width,\n          preserve_short_sequences=True))\n\n  def testGetSessionHandle(self):\n    if context.executing_eagerly():\n      with self.assertRaisesRegex(\n          errors.FailedPreconditionError,\n          \"GetSessionHandle called on null session state\"):\n        gen_data_flow_ops.GetSessionHandle(value=[1])\n\n\nif __name__ == \"__main__\":\n  ops.enable_eager_execution()\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/string_ngrams_op.cc", "tensorflow/python/ops/raw_ops_test.py"], "buggy_code_start_loc": [154, 31], "buggy_code_end_loc": [154, 77], "fixing_code_start_loc": [155, 30], "fixing_code_end_loc": [165, 97], "type": "CWE-190", "message": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `StringNGrams` can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. We are missing a validation on `pad_witdh` and that result in computing a negative value for `ngram_width` which is later used to allocate parts of the output. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2022-21733", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-03T12:15:07.993", "lastModified": "2022-02-09T03:11:39.793", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `StringNGrams` can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. We are missing a validation on `pad_witdh` and that result in computing a negative value for `ngram_width` which is later used to allocate parts of the output. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"lang": "es", "value": "Tensorflow es un marco de aprendizaje autom\u00e1tico de c\u00f3digo abierto. La implementaci\u00f3n de \"StringNGrams\" puede ser usada para desencadenar un ataque de denegaci\u00f3n de servicio causando una condici\u00f3n de fuera de memoria tras un desbordamiento de enteros. Falta una comprobaci\u00f3n en \"pad_witdh\" y eso hace que sea computado un valor negativo para \"ngram_width\" que luego es usada para asignar partes de la salida. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.8.0. Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.7.1, TensorFlow versi\u00f3n 2.6.3, y TensorFlow versi\u00f3n 2.5.3, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5.2", "matchCriteriaId": "688150BF-477C-48FC-9AEF-A79AC57A6DDC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.6.0", "versionEndIncluding": "2.6.2", "matchCriteriaId": "C9E69B60-8C97-47E2-9027-9598B8392E5D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "2EDFAAB8-799C-4259-9102-944D4760DA2C"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/string_ngrams_op.cc#L29-L161", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/f68fdab93fb7f4ddb4eb438c8fe052753c9413e8", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-98j8-c9q4-r38g", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/f68fdab93fb7f4ddb4eb438c8fe052753c9413e8"}}