{"buggy_code": ["/*\n   +----------------------------------------------------------------------+\n   | PHP Version 7                                                        |\n   +----------------------------------------------------------------------+\n   | Copyright (c) 1997-2017 The PHP Group                                |\n   +----------------------------------------------------------------------+\n   | This source file is subject to version 3.01 of the PHP license,      |\n   | that is bundled with this package in the file LICENSE, and is        |\n   | available through the world-wide-web at the following url:           |\n   | http://www.php.net/license/3_01.txt                                  |\n   | If you did not receive a copy of the PHP license and are unable to   |\n   | obtain it through the world-wide-web, please send a note to          |\n   | license@php.net so we can mail you a copy immediately.               |\n   +----------------------------------------------------------------------+\n   | Author: Pierre A. Joye <pierre@php.net>                              |\n   +----------------------------------------------------------------------+\n */\n\n/* $Id$ */\n#ifdef PHP_WIN32\n\n#include \"php.h\"\n#include \"php_filestat.h\"\n#include \"php_globals.h\"\n\n#include <WinBase.h>\n\n#include <stdlib.h>\n\n#include <string.h>\n#if HAVE_PWD_H\n#include \"win32/pwd.h\"\n#endif\n\n#if HAVE_GRP_H\n#include \"win32/grp.h\"\n#endif\n\n#include <errno.h>\n#include <ctype.h>\n\n#include \"php_link.h\"\n#include \"php_string.h\"\n\n/*\nTODO:\n- Create php_readlink (done), php_link and php_symlink in win32/link.c\n- Expose them (PHPAPI) so extensions developers can use them\n- define link/readlink/symlink to their php_ equivalent and use them in ext/standart/link.c\n- this file is then useless and we have a portable link API\n*/\n\n#ifndef VOLUME_NAME_NT\n#define VOLUME_NAME_NT 0x2\n#endif\n\n#ifndef VOLUME_NAME_DOS\n#define VOLUME_NAME_DOS 0x0\n#endif\n\n/* {{{ proto string readlink(string filename)\n   Return the target of a symbolic link */\nPHP_FUNCTION(readlink)\n{\n\tchar *link;\n\tsize_t link_len;\n\tchar target[MAXPATHLEN];\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &link, &link_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(link)) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (php_sys_readlink(link, target, MAXPATHLEN) == -1) {\n\t\tphp_error_docref(NULL, E_WARNING, \"readlink failed to read the symbolic link (%s), error %d)\", link, GetLastError());\n\t\tRETURN_FALSE;\n\t}\n\tRETURN_STRING(target);\n}\n/* }}} */\n\n/* {{{ proto int linkinfo(string filename)\n   Returns the st_dev field of the UNIX C stat structure describing the link */\nPHP_FUNCTION(linkinfo)\n{\n\tchar *link;\n\tsize_t link_len;\n\tzend_stat_t sb;\n\tint ret;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &link, &link_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tret = VCWD_STAT(link, &sb);\n\tif (ret == -1) {\n\t\tphp_error_docref(NULL, E_WARNING, \"%s\", strerror(errno));\n\t\tRETURN_LONG(Z_L(-1));\n\t}\n\n\tRETURN_LONG((zend_long) sb.st_dev);\n}\n/* }}} */\n\n/* {{{ proto int symlink(string target, string link)\n   Create a symbolic link */\nPHP_FUNCTION(symlink)\n{\n\tchar *topath, *frompath;\n\tsize_t topath_len, frompath_len;\n\tBOOLEAN ret;\n\tchar source_p[MAXPATHLEN];\n\tchar dest_p[MAXPATHLEN];\n\tchar dirname[MAXPATHLEN];\n\tsize_t len;\n\tDWORD attr;\n\tHINSTANCE kernel32;\n\ttypedef BOOLEAN (WINAPI *csla_func)(LPCSTR, LPCSTR, DWORD);\n\tcsla_func pCreateSymbolicLinkA;\n\n\tkernel32 = LoadLibrary(\"kernel32.dll\");\n\n\tif (kernel32) {\n\t\tpCreateSymbolicLinkA = (csla_func)GetProcAddress(kernel32, \"CreateSymbolicLinkA\");\n\t\tif (pCreateSymbolicLinkA == NULL) {\n\t\t\tphp_error_docref(NULL, E_WARNING, \"Can't call CreateSymbolicLinkA\");\n\t\t\tRETURN_FALSE;\n\t\t}\n\t} else {\n\t\tphp_error_docref(NULL, E_WARNING, \"Can't call get a handle on kernel32.dll\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"pp\", &topath, &topath_len, &frompath, &frompath_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (!expand_filepath(frompath, source_p)) {\n\t\tphp_error_docref(NULL, E_WARNING, \"No such file or directory\");\n\t\tRETURN_FALSE;\n\t}\n\n\tmemcpy(dirname, source_p, sizeof(source_p));\n\tlen = php_dirname(dirname, strlen(dirname));\n\n\tif (!expand_filepath_ex(topath, dest_p, dirname, len)) {\n\t\tphp_error_docref(NULL, E_WARNING, \"No such file or directory\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (php_stream_locate_url_wrapper(source_p, NULL, STREAM_LOCATE_WRAPPERS_ONLY) ||\n\t\tphp_stream_locate_url_wrapper(dest_p, NULL, STREAM_LOCATE_WRAPPERS_ONLY) )\n\t{\n\t\tphp_error_docref(NULL, E_WARNING, \"Unable to symlink to a URL\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(dest_p)) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(source_p)) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif ((attr = GetFileAttributes(topath)) == INVALID_FILE_ATTRIBUTES) {\n\t\t\tphp_error_docref(NULL, E_WARNING, \"Could not fetch file information(error %d)\", GetLastError());\n\t\t\tRETURN_FALSE;\n\t}\n\n\t/* For the source, an expanded path must be used (in ZTS an other thread could have changed the CWD).\n\t * For the target the exact string given by the user must be used, relative or not, existing or not.\n\t * The target is relative to the link itself, not to the CWD. */\n\tret = pCreateSymbolicLinkA(source_p, topath, (attr & FILE_ATTRIBUTE_DIRECTORY ? 1 : 0));\n\n\tif (!ret) {\n\t\tphp_error_docref(NULL, E_WARNING, \"Cannot create symlink, error code(%d)\", GetLastError());\n\t\tRETURN_FALSE;\n\t}\n\n\tRETURN_TRUE;\n}\n/* }}} */\n\n/* {{{ proto int link(string target, string link)\n   Create a hard link */\nPHP_FUNCTION(link)\n{\n\tchar *topath, *frompath;\n\tsize_t topath_len, frompath_len;\n\tint ret;\n\tchar source_p[MAXPATHLEN];\n\tchar dest_p[MAXPATHLEN];\n\n\t/*First argument to link function is the target and hence should go to frompath\n\t  Second argument to link function is the link itself and hence should go to topath */\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"ss\", &frompath, &frompath_len, &topath, &topath_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (!expand_filepath(frompath, source_p) || !expand_filepath(topath, dest_p)) {\n\t\tphp_error_docref(NULL, E_WARNING, \"No such file or directory\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (php_stream_locate_url_wrapper(source_p, NULL, STREAM_LOCATE_WRAPPERS_ONLY) ||\n\t\tphp_stream_locate_url_wrapper(dest_p, NULL, STREAM_LOCATE_WRAPPERS_ONLY) )\n\t{\n\t\tphp_error_docref(NULL, E_WARNING, \"Unable to link to a URL\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(source_p)) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(dest_p)) {\n\t\tRETURN_FALSE;\n\t}\n\n#ifndef ZTS\n\tret = CreateHardLinkA(topath, frompath, NULL);\n#else\n\tret = CreateHardLinkA(dest_p, source_p, NULL);\n#endif\n\n\tif (ret == 0) {\n\t\tphp_error_docref(NULL, E_WARNING, \"%s\", strerror(errno));\n\t\tRETURN_FALSE;\n\t}\n\n\tRETURN_TRUE;\n}\n/* }}} */\n\n#endif\n\n/*\n * Local variables:\n * tab-width: 4\n * c-basic-offset: 4\n * End:\n * vim600: noet sw=4 ts=4 fdm=marker\n * vim<600: noet sw=4 ts=4\n */\n"], "fixing_code": ["/*\n   +----------------------------------------------------------------------+\n   | PHP Version 7                                                        |\n   +----------------------------------------------------------------------+\n   | Copyright (c) 1997-2017 The PHP Group                                |\n   +----------------------------------------------------------------------+\n   | This source file is subject to version 3.01 of the PHP license,      |\n   | that is bundled with this package in the file LICENSE, and is        |\n   | available through the world-wide-web at the following url:           |\n   | http://www.php.net/license/3_01.txt                                  |\n   | If you did not receive a copy of the PHP license and are unable to   |\n   | obtain it through the world-wide-web, please send a note to          |\n   | license@php.net so we can mail you a copy immediately.               |\n   +----------------------------------------------------------------------+\n   | Author: Pierre A. Joye <pierre@php.net>                              |\n   +----------------------------------------------------------------------+\n */\n\n/* $Id$ */\n#ifdef PHP_WIN32\n\n#include \"php.h\"\n#include \"php_filestat.h\"\n#include \"php_globals.h\"\n\n#include <WinBase.h>\n\n#include <stdlib.h>\n\n#include <string.h>\n#if HAVE_PWD_H\n#include \"win32/pwd.h\"\n#endif\n\n#if HAVE_GRP_H\n#include \"win32/grp.h\"\n#endif\n\n#include <errno.h>\n#include <ctype.h>\n\n#include \"php_link.h\"\n#include \"php_string.h\"\n\n/*\nTODO:\n- Create php_readlink (done), php_link and php_symlink in win32/link.c\n- Expose them (PHPAPI) so extensions developers can use them\n- define link/readlink/symlink to their php_ equivalent and use them in ext/standart/link.c\n- this file is then useless and we have a portable link API\n*/\n\n#ifndef VOLUME_NAME_NT\n#define VOLUME_NAME_NT 0x2\n#endif\n\n#ifndef VOLUME_NAME_DOS\n#define VOLUME_NAME_DOS 0x0\n#endif\n\n/* {{{ proto string readlink(string filename)\n   Return the target of a symbolic link */\nPHP_FUNCTION(readlink)\n{\n\tchar *link;\n\tsize_t link_len;\n\tchar target[MAXPATHLEN];\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &link, &link_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(link)) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (php_sys_readlink(link, target, MAXPATHLEN) == -1) {\n\t\tphp_error_docref(NULL, E_WARNING, \"readlink failed to read the symbolic link (%s), error %d)\", link, GetLastError());\n\t\tRETURN_FALSE;\n\t}\n\tRETURN_STRING(target);\n}\n/* }}} */\n\n/* {{{ proto int linkinfo(string filename)\n   Returns the st_dev field of the UNIX C stat structure describing the link */\nPHP_FUNCTION(linkinfo)\n{\n\tchar *link;\n\tchar *dirname;\n\tsize_t link_len;\n\tzend_stat_t sb;\n\tint ret;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &link, &link_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tdirname = estrndup(link, link_len);\n\tphp_dirname(dirname, link_len);\n\n\tif (php_check_open_basedir(dirname)) {\n\t\tefree(dirname);\n\t\tRETURN_FALSE;\n\t}\n\n\tret = VCWD_STAT(link, &sb);\n\tif (ret == -1) {\n\t\tphp_error_docref(NULL, E_WARNING, \"%s\", strerror(errno));\n\t\tefree(dirname);\n\t\tRETURN_LONG(Z_L(-1));\n\t}\n\n\tefree(dirname);\n\tRETURN_LONG((zend_long) sb.st_dev);\n}\n/* }}} */\n\n/* {{{ proto int symlink(string target, string link)\n   Create a symbolic link */\nPHP_FUNCTION(symlink)\n{\n\tchar *topath, *frompath;\n\tsize_t topath_len, frompath_len;\n\tBOOLEAN ret;\n\tchar source_p[MAXPATHLEN];\n\tchar dest_p[MAXPATHLEN];\n\tchar dirname[MAXPATHLEN];\n\tsize_t len;\n\tDWORD attr;\n\tHINSTANCE kernel32;\n\ttypedef BOOLEAN (WINAPI *csla_func)(LPCSTR, LPCSTR, DWORD);\n\tcsla_func pCreateSymbolicLinkA;\n\n\tkernel32 = LoadLibrary(\"kernel32.dll\");\n\n\tif (kernel32) {\n\t\tpCreateSymbolicLinkA = (csla_func)GetProcAddress(kernel32, \"CreateSymbolicLinkA\");\n\t\tif (pCreateSymbolicLinkA == NULL) {\n\t\t\tphp_error_docref(NULL, E_WARNING, \"Can't call CreateSymbolicLinkA\");\n\t\t\tRETURN_FALSE;\n\t\t}\n\t} else {\n\t\tphp_error_docref(NULL, E_WARNING, \"Can't call get a handle on kernel32.dll\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"pp\", &topath, &topath_len, &frompath, &frompath_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (!expand_filepath(frompath, source_p)) {\n\t\tphp_error_docref(NULL, E_WARNING, \"No such file or directory\");\n\t\tRETURN_FALSE;\n\t}\n\n\tmemcpy(dirname, source_p, sizeof(source_p));\n\tlen = php_dirname(dirname, strlen(dirname));\n\n\tif (!expand_filepath_ex(topath, dest_p, dirname, len)) {\n\t\tphp_error_docref(NULL, E_WARNING, \"No such file or directory\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (php_stream_locate_url_wrapper(source_p, NULL, STREAM_LOCATE_WRAPPERS_ONLY) ||\n\t\tphp_stream_locate_url_wrapper(dest_p, NULL, STREAM_LOCATE_WRAPPERS_ONLY) )\n\t{\n\t\tphp_error_docref(NULL, E_WARNING, \"Unable to symlink to a URL\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(dest_p)) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(source_p)) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif ((attr = GetFileAttributes(topath)) == INVALID_FILE_ATTRIBUTES) {\n\t\t\tphp_error_docref(NULL, E_WARNING, \"Could not fetch file information(error %d)\", GetLastError());\n\t\t\tRETURN_FALSE;\n\t}\n\n\t/* For the source, an expanded path must be used (in ZTS an other thread could have changed the CWD).\n\t * For the target the exact string given by the user must be used, relative or not, existing or not.\n\t * The target is relative to the link itself, not to the CWD. */\n\tret = pCreateSymbolicLinkA(source_p, topath, (attr & FILE_ATTRIBUTE_DIRECTORY ? 1 : 0));\n\n\tif (!ret) {\n\t\tphp_error_docref(NULL, E_WARNING, \"Cannot create symlink, error code(%d)\", GetLastError());\n\t\tRETURN_FALSE;\n\t}\n\n\tRETURN_TRUE;\n}\n/* }}} */\n\n/* {{{ proto int link(string target, string link)\n   Create a hard link */\nPHP_FUNCTION(link)\n{\n\tchar *topath, *frompath;\n\tsize_t topath_len, frompath_len;\n\tint ret;\n\tchar source_p[MAXPATHLEN];\n\tchar dest_p[MAXPATHLEN];\n\n\t/*First argument to link function is the target and hence should go to frompath\n\t  Second argument to link function is the link itself and hence should go to topath */\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"ss\", &frompath, &frompath_len, &topath, &topath_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (!expand_filepath(frompath, source_p) || !expand_filepath(topath, dest_p)) {\n\t\tphp_error_docref(NULL, E_WARNING, \"No such file or directory\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (php_stream_locate_url_wrapper(source_p, NULL, STREAM_LOCATE_WRAPPERS_ONLY) ||\n\t\tphp_stream_locate_url_wrapper(dest_p, NULL, STREAM_LOCATE_WRAPPERS_ONLY) )\n\t{\n\t\tphp_error_docref(NULL, E_WARNING, \"Unable to link to a URL\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(source_p)) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (OPENBASEDIR_CHECKPATH(dest_p)) {\n\t\tRETURN_FALSE;\n\t}\n\n#ifndef ZTS\n\tret = CreateHardLinkA(topath, frompath, NULL);\n#else\n\tret = CreateHardLinkA(dest_p, source_p, NULL);\n#endif\n\n\tif (ret == 0) {\n\t\tphp_error_docref(NULL, E_WARNING, \"%s\", strerror(errno));\n\t\tRETURN_FALSE;\n\t}\n\n\tRETURN_TRUE;\n}\n/* }}} */\n\n#endif\n\n/*\n * Local variables:\n * tab-width: 4\n * c-basic-offset: 4\n * End:\n * vim600: noet sw=4 ts=4 fdm=marker\n * vim<600: noet sw=4 ts=4\n */\n"], "filenames": ["ext/standard/link_win32.c"], "buggy_code_start_loc": [89], "buggy_code_end_loc": [103], "fixing_code_start_loc": [90], "fixing_code_end_loc": [115], "type": "CWE-200", "message": "An issue was discovered in ext/standard/link_win32.c in PHP before 5.6.37, 7.0.x before 7.0.31, 7.1.x before 7.1.20, and 7.2.x before 7.2.8. The linkinfo function on Windows doesn't implement the open_basedir check. This could be abused to find files on paths outside of the allowed directories.", "other": {"cve": {"id": "CVE-2018-15132", "sourceIdentifier": "cve@mitre.org", "published": "2018-08-07T15:29:00.873", "lastModified": "2019-03-08T13:30:39.977", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in ext/standard/link_win32.c in PHP before 5.6.37, 7.0.x before 7.0.31, 7.1.x before 7.1.20, and 7.2.x before 7.2.8. The linkinfo function on Windows doesn't implement the open_basedir check. This could be abused to find files on paths outside of the allowed directories."}, {"lang": "es", "value": "Se ha descubierto un problema en ext/standard/link_win32.c en PHP en versiones anteriores a la 5.6.37, versiones 7.0.x anteriores a la 7.0.31, versiones 7.1.x anteriores a la 7.1.20 y versiones 7.2.x anteriores a la 7.2.8. La funci\u00f3n linkinfo en Windows no implementa la comprobaci\u00f3n open_basedir. Se podr\u00eda abusar de esto para encontrar archivos en rutas fuera de los directorios permitidos."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.6.37", "matchCriteriaId": "C7790A37-5872-498A-AF77-4C72F5E6535E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.0.0", "versionEndExcluding": "7.0.31", "matchCriteriaId": "D4F254A0-4FCB-4015-B4BA-FC634D47A473"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.1.0", "versionEndExcluding": "7.1.20", "matchCriteriaId": "D9AEDB1B-9295-45A4-80FE-E10DF404E267"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.2.0", "versionEndExcluding": "7.2.8", "matchCriteriaId": "FF1D395B-6711-40A9-8E0E-9153B8A71F04"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:netapp:storage_automation_store:-:*:*:*:*:*:*:*", "matchCriteriaId": "7B7A6697-98CC-4E36-93DB-B7160F8399F9"}]}]}], "references": [{"url": "http://php.net/ChangeLog-5.php", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://php.net/ChangeLog-7.php", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://bugs.php.net/bug.php?id=76459", "source": "cve@mitre.org", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://github.com/php/php-src/commit/f151e048ed27f6f4eef729f3310d053ab5da71d4", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20181107-0003/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.tenable.com/security/tns-2018-12", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/php/php-src/commit/f151e048ed27f6f4eef729f3310d053ab5da71d4"}}