{"buggy_code": ["<?php\n\nnamespace App\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Libs\\Controller;\nuse Illuminate\\Support\\Facades\\Storage;\nuse \\Illuminate\\Http\\File;\n\nclass FileManagerController extends Controller{\n \n\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index($slug){\n\n\n        $mode = $this->request->get('mode');\n\n        $current_dir = str_replace_first(\"storage/\",\"\",$this->request->get('path')==NULL? \"\" : ltrim($this->request->get('path'),\"/\"));\n\n        $data = [\n                'old_path' => ($current_dir==\"\"? \"\":$current_dir.\"/\"),\n                'current_dir' => $current_dir,\n                'dirs' => array_values(collect(\\File::directories(storage_path($current_dir)))->map(function($dir){\n                    return basename($dir);\n                })->toArray()),\n                'files' => array_values(collect(\\File::files(storage_path($current_dir)))->map(function($file){\n                    return basename($file);\n                })->toArray()),\n                'allowed_extensions' => [\n                                          'image' => ['jpg','png','jpeg']\n                                        ],\n                'mode' => $mode,\n            ];\n\n\n        if($this->request->ajax()){\n            return response()->json($data);\n        }\n\n        $this->view->title(trans('File Manager'));\n        return $this->view->render($mode=='embed'? 'media/embed' : 'media/fmframe',$data);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function fileupload(){\n        \n        \n        if($this->request->isMethod('POST')){\n\n            if ($this->request->hasFile('up_file')){\n\n                foreach($this->request->up_file as $file){\n                   $images[] = $file->store(str_replace(\"storage/\", \"\", $this->request->input('dir_path')));\n                }\n\n                if($this->request->ajax()){\n                    return response()->json(['success' => 'Files uploaded successfully!', 'uploadedFileNames' => $images ]);\n                }\n                   \n                return $this->redirectToSelf()->withMessage(['success' => 'Files uploaded successfully!']);\n\n            }else{\n\n                if($this->request->ajax()){\n                    return response()->json(['danger' => 'Could not upload files!']);\n                }\n\n                return $this->redirectToSelf()->withMessage(['danger' => 'Could not upload files!']);\n            }\n\n        }\n\n        if($this->request->ajax()){\n            return response()->json(['warning' => 'Only POST method allowed!']);\n        }\n\n        return $this->redirectToSelf()->withMessage(['warning' => 'Only POST method allowed!']);\n\n    }\n\n\n    public function download(){\n\n        if($this->request->has('file')){\n\n            $file = $this->request->input('file');\n\n            $headers = [\n                  'Content-Type' => 'application/*',\n            ];\n\n            return response()->download($file, basename($file), $headers);\n\n        }\n\n        return $this->redirectToSelf()->withMessage(['warning' => 'Bad request!']);\n\n    }\n\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function newFolder(){\n        \n        if($this->request->isMethod('POST')){\n            \n            $directory = \"storage/\".str_replace(\"storage/\",\"\",$this->request->input('dir_path')).\"/\".$this->request->input('new_folder_name');\n\n            if(!file_exists($directory)){\n                \\File::makeDirectory($directory , $mode = 0777, true, true);\n               \n                if($this->request->ajax()){\n                    return response()->json(['success' => 'Folder created successfully!']);\n                }\n\n                return $this->redirectToSelf()->withMessage(['success' => 'Folder created successfully!']);\n          \n            }else{\n\n                if($this->request->ajax()){\n                    return response()->json(['danger' => 'Folder already exists!']);\n                }\n              \n                return $this->redirectToSelf()->withMessage(['danger' => 'Folder already exists!']);\n            }\n        }\n\n    }\n\n\n    /**\n     * Remove the specified resource from database.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function delete(){\n\n\n         $toDelete = str_replace(\"storage/\",\"\",$this->request->input('file'));\n\n         if(!file_exists('storage/'.$toDelete)){\n            if($this->request->ajax()){\n                return response()->json(['warning' => trans(\"File \".$toDelete.\" doesn't exists\")]);\n            }\n\n             return $this->redirectToSelf()->withMessage(['warning' => trans(\"File \".$toDelete.\" doesn't exists\")]);\n         }\n\n                \n         if(!is_dir('storage/'.$toDelete) && Storage::delete($toDelete)){\n\n                if($this->request->ajax()){\n                    return response()->json(['success' => trans('File deleted successfully')]);\n                }\n\n             return $this->redirectToSelf()->withMessage(['success' => trans('File deleted successfully')]);\n         }else if(is_dir('storage/'.$toDelete) && Storage::deleteDirectory($toDelete)){\n\n                if($this->request->ajax()){\n                    return response()->json(['success' => trans('Directory deleted successfully')]);\n                }\n\n             return $this->redirectToSelf()->withMessage(['success' => trans('Directory deleted successfully')]);\n         }else{\n\n            if($this->request->ajax()){\n                return response()->json(['danger' => trans('message.something_went_wrong')]);\n            }\n\n             return $this->redirectToSelf()->withMessage(['danger' => trans('message.something_went_wrong')]);\n         }\n\n    }\n\n\n\n    public function upload(){\n        \n        if($this->request->isMethod('POST')){\n\n            if ($this->request->hasFile('upload')){\n\n                $image = $this->request->upload->store('images/'.$this->request->input('module'));\n\n               if($image){\n                   // if($this->request->ajax()){\n                        return response()->json([\"uploaded\"=>1, \"fileName\"=> basename($image), \"url\" => \"storage/\".$image]);\n/*                    }else{\n                        return \"Image uploaded successfully!\";*/\n                    //}\n               }else{\n                   /* if($this->request->ajax()){*/\n                        return response()->json([\"uploaded\"=>0]);\n                   /* }else{\n                        return \"Something went wrong!\";\n                    }*/\n               }\n\n\n            }\n\n        }\n\n    }\n\n\n    public function rename(){\n\n        if($this->request->isMethod('POST')){\n\n            if(\\Storage::move($this->request->input('old_file'), $this->request->input('new_file'))){\n                if($this->request->ajax()){\n                    return response()->json(['success' => trans('File successfully renamed!')]);\n                }\n            }else{\n                if($this->request->ajax()){\n                    return response()->json(['danger' => trans('message.something_went_wrong')]);\n                }\n            }\n\n        }\n\n    }\n\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Libs\\Controller;\nuse Illuminate\\Support\\Facades\\Storage;\nuse \\Illuminate\\Http\\File;\n\nclass FileManagerController extends Controller{\n \n\n    private function validationRegex(){\n        return '/^.*\\.('.implode('|',[\"php\",\"php5\",\"php7\"]).')$/i';\n    }\n\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index($slug){\n\n\n        $mode = $this->request->get('mode');\n\n        $current_dir = str_replace_first(\"storage/\",\"\",$this->request->get('path')==NULL? \"\" : ltrim($this->request->get('path'),\"/\"));\n\n        $data = [\n                'old_path' => ($current_dir==\"\"? \"\":$current_dir.\"/\"),\n                'current_dir' => $current_dir,\n                'dirs' => array_values(collect(\\File::directories(storage_path($current_dir)))->map(function($dir){\n                    return basename($dir);\n                })->toArray()),\n                'files' => array_values(collect(\\File::files(storage_path($current_dir)))->map(function($file){\n                    return basename($file);\n                })->toArray()),\n                'allowed_extensions' => [\n                                          'image' => ['jpg','png','jpeg']\n                                        ],\n                'mode' => $mode,\n            ];\n\n\n        if($this->request->ajax()){\n            return response()->json($data);\n        }\n\n        $this->view->title(trans('File Manager'));\n        return $this->view->render($mode=='embed'? 'media/embed' : 'media/fmframe',$data);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function fileupload(){\n        \n        \n        if($this->request->isMethod('POST')){\n\n            if ($this->request->hasFile('up_file')){\n\n                foreach($this->request->up_file as $file){\n                    \n                    if(!preg_match($this->validationRegex(), strtolower($file))){\n                        $images[] = $file->store(str_replace(\"storage/\", \"\", $this->request->input('dir_path')));\n                    }\n                }\n\n                if($this->request->ajax()){\n                    return response()->json(['success' => 'Files uploaded successfully!', 'uploadedFileNames' => $images ]);\n                }\n                   \n                return $this->redirectToSelf()->withMessage(['success' => 'Files uploaded successfully!']);\n\n            }else{\n\n                if($this->request->ajax()){\n                    return response()->json(['danger' => 'Could not upload files!']);\n                }\n\n                return $this->redirectToSelf()->withMessage(['danger' => 'Could not upload files!']);\n            }\n\n        }\n\n        if($this->request->ajax()){\n            return response()->json(['warning' => 'Only POST method allowed!']);\n        }\n\n        return $this->redirectToSelf()->withMessage(['warning' => 'Only POST method allowed!']);\n\n    }\n\n\n    public function download(){\n\n        if($this->request->has('file')){\n\n            $file = $this->request->input('file');\n\n            $headers = [\n                  'Content-Type' => 'application/*',\n            ];\n\n            return response()->download($file, basename($file), $headers);\n\n        }\n\n        return $this->redirectToSelf()->withMessage(['warning' => 'Bad request!']);\n\n    }\n\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function newFolder(){\n        \n        if($this->request->isMethod('POST')){\n            \n            $directory = \"storage/\".str_replace(\"storage/\",\"\",$this->request->input('dir_path')).\"/\".$this->request->input('new_folder_name');\n\n            if(!file_exists($directory)){\n                \\File::makeDirectory($directory , $mode = 0777, true, true);\n               \n                if($this->request->ajax()){\n                    return response()->json(['success' => 'Folder created successfully!']);\n                }\n\n                return $this->redirectToSelf()->withMessage(['success' => 'Folder created successfully!']);\n          \n            }else{\n\n                if($this->request->ajax()){\n                    return response()->json(['danger' => 'Folder already exists!']);\n                }\n              \n                return $this->redirectToSelf()->withMessage(['danger' => 'Folder already exists!']);\n            }\n        }\n\n    }\n\n\n    /**\n     * Remove the specified resource from database.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function delete(){\n\n\n         $toDelete = str_replace(\"storage/\",\"\",$this->request->input('file'));\n\n         if(!file_exists('storage/'.$toDelete)){\n            if($this->request->ajax()){\n                return response()->json(['warning' => trans(\"File \".$toDelete.\" doesn't exists\")]);\n            }\n\n             return $this->redirectToSelf()->withMessage(['warning' => trans(\"File \".$toDelete.\" doesn't exists\")]);\n         }\n\n                \n         if(!is_dir('storage/'.$toDelete) && Storage::delete($toDelete)){\n\n                if($this->request->ajax()){\n                    return response()->json(['success' => trans('File deleted successfully')]);\n                }\n\n             return $this->redirectToSelf()->withMessage(['success' => trans('File deleted successfully')]);\n         }else if(is_dir('storage/'.$toDelete) && Storage::deleteDirectory($toDelete)){\n\n                if($this->request->ajax()){\n                    return response()->json(['success' => trans('Directory deleted successfully')]);\n                }\n\n             return $this->redirectToSelf()->withMessage(['success' => trans('Directory deleted successfully')]);\n         }else{\n\n            if($this->request->ajax()){\n                return response()->json(['danger' => trans('message.something_went_wrong')]);\n            }\n\n             return $this->redirectToSelf()->withMessage(['danger' => trans('message.something_went_wrong')]);\n         }\n\n    }\n\n\n\n    public function upload(){\n        \n        if($this->request->isMethod('POST')){\n\n            if ($this->request->hasFile('upload')){\n\n                $image = $this->request->upload->store('images/'.$this->request->input('module'));\n\n               if($image){\n                   // if($this->request->ajax()){\n                        return response()->json([\"uploaded\"=>1, \"fileName\"=> basename($image), \"url\" => \"storage/\".$image]);\n/*                    }else{\n                        return \"Image uploaded successfully!\";*/\n                    //}\n               }else{\n                   /* if($this->request->ajax()){*/\n                        return response()->json([\"uploaded\"=>0]);\n                   /* }else{\n                        return \"Something went wrong!\";\n                    }*/\n               }\n\n\n            }\n\n        }\n\n    }\n\n\n    public function rename(){\n\n        if($this->request->isMethod('POST')){\n\n            $new_file = $this->request->input('new_file');\n\n            if(!preg_match($this->validationRegex(), strtolower($new_file)) && \\Storage::move($this->request->input('old_file'), $new_file)){\n                if($this->request->ajax()){\n                    return response()->json(['success' => trans('File successfully renamed!')]);\n                }\n            }else{\n                if($this->request->ajax()){\n                    return response()->json(['danger' => trans('message.something_went_wrong')]);\n                }\n            }\n\n        }\n\n    }\n\n}\n"], "filenames": ["app/Controllers/FileManagerController.php"], "buggy_code_start_loc": [11], "buggy_code_end_loc": [227], "fixing_code_start_loc": [12], "fixing_code_end_loc": [236], "type": "CWE-434", "message": "An unrestricted file upload issue in HorizontCMS through 1.0.0-beta allows an authenticated remote attacker (with access to the FileManager) to upload and execute arbitrary PHP code by uploading a PHP payload, and then using the FileManager's rename function to provide the payload (which will receive a random name on the server) with the PHP extension, and finally executing the PHP file via an HTTP GET request to /storage/<php_file_name>. NOTE: the vendor has patched this while leaving the version number at 1.0.0-beta.", "other": {"cve": {"id": "CVE-2020-27387", "sourceIdentifier": "cve@mitre.org", "published": "2020-11-05T02:15:12.067", "lastModified": "2022-10-19T15:58:29.963", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An unrestricted file upload issue in HorizontCMS through 1.0.0-beta allows an authenticated remote attacker (with access to the FileManager) to upload and execute arbitrary PHP code by uploading a PHP payload, and then using the FileManager's rename function to provide the payload (which will receive a random name on the server) with the PHP extension, and finally executing the PHP file via an HTTP GET request to /storage/<php_file_name>. NOTE: the vendor has patched this while leaving the version number at 1.0.0-beta."}, {"lang": "es", "value": "Un problema de carga de archivos sin restricciones en HorizontCMS versiones hasta 1.0.0-beta, permite a un atacante remoto autenticado (con acceso a FileManager) cargar y ejecutar c\u00f3digo PHP arbitrario al cargar una carga \u00fatil PHP y luego usar la funci\u00f3n rename de FileManager para proporcionar la carga \u00fatil (que recibir\u00e1 un nombre aleatorio en el servidor) con la extensi\u00f3n PHP, y finalmente ejecutando el archivo PHP por medio de una petici\u00f3n HTTP GET en /storage/(php_file_name).&#xa0;NOTA: el proveedor ha parcheado esto dejando el n\u00famero de versi\u00f3n en 1.0.0-beta"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:horizontcms_project:horizontcms:1.0.0:alpha:*:*:*:*:*:*", "matchCriteriaId": "819778BF-D6F0-41DE-ADF2-3BB80E05DD93"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horizontcms_project:horizontcms:1.0.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "BDF18A37-08AC-4501-8C15-151DE7B44DED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horizontcms_project:horizontcms:1.0.0:alpha3:*:*:*:*:*:*", "matchCriteriaId": "E6F3AB6F-BD6E-4F8C-952F-AB55E11D7D23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horizontcms_project:horizontcms:1.0.0:alpha4:*:*:*:*:*:*", "matchCriteriaId": "C1817B54-40E9-4150-8A24-2023FD19BB43"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horizontcms_project:horizontcms:1.0.0:alpha5:*:*:*:*:*:*", "matchCriteriaId": "A6585D37-41CF-436A-A4AA-F91AE092D288"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horizontcms_project:horizontcms:1.0.0:alpha6:*:*:*:*:*:*", "matchCriteriaId": "E496572C-0A79-4524-B544-E864FBFEDFD8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horizontcms_project:horizontcms:1.0.0:alpha7:*:*:*:*:*:*", "matchCriteriaId": "A7117177-3CD2-4BE9-982A-FBFEF60A7C23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horizontcms_project:horizontcms:1.0.0:alpha8:*:*:*:*:*:*", "matchCriteriaId": "EB1E6057-C7F5-4D4F-B112-437C801DCCF4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:horizontcms_project:horizontcms:1.0.0:beta:*:*:*:*:*:*", "matchCriteriaId": "320BB8EF-D310-4420-9EA9-CA06DFA03DE5"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/160046/HorizontCMS-1.0.0-beta-Shell-Upload.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://blog.vonahi.io/whats-in-a-re-name/", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/rapid7/metasploit-framework/pull/14340", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/ttimot24/HorizontCMS/commit/436b5ab679fd27afa3d99c023dbe103113da4fee", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ttimot24/HorizontCMS/commit/436b5ab679fd27afa3d99c023dbe103113da4fee"}}