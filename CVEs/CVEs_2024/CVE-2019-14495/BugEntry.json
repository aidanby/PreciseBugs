{"buggy_code": ["/*\n   3APA3A simpliest proxy server\n   (c) 2002-2008 by ZARAZA <3APA3A@security.nnov.ru>\n\n   please read License Agreement\n\n*/\n\n#include \"proxy.h\"\n\n#define RETURN(xxx) { param->res = xxx; goto CLEANRET; }\n\n#define LINESIZE 2048\n\nextern FILE *writable;\nFILE * confopen();\nextern void decodeurl(unsigned char *s, int filter);\n\nstruct printparam {\n\tchar buf[1024];\n\tint inbuf;\n\tstruct clientparam *cp;\n};\n\nstatic void stdpr(struct printparam* pp, char *buf, int inbuf){\n\tif((pp->inbuf + inbuf > 1024) || !buf) {\n\t\tsocksend(pp->cp->clisock, (unsigned char *)pp->buf, pp->inbuf, conf.timeouts[STRING_S]);\n\t\tpp->inbuf = 0;\n\t\tif(!buf) return;\n\t}\n\tif(inbuf >= 1000){\n\t\tsocksend(pp->cp->clisock, (unsigned char *)buf, inbuf, conf.timeouts[STRING_S]);\t\t\n\t}\n\telse {\n\t\tmemcpy(pp->buf + pp->inbuf, buf, inbuf);\n\t\tpp->inbuf += inbuf;\n\t}\n}\n\nstatic void stdcbf(void *cb, char *buf, int inbuf){\n\tint delay = 0;\n\tint i;\n\n\tfor(i = 0; i < inbuf; i++){\n\t\tswitch(buf[i]){\n\t\t\tcase '&':\n\t\t\t\tif(delay){\n\t\t\t\t\tstdpr((struct printparam*)cb, buf+i-delay, delay);\n\t\t\t\t\tdelay = 0;\n\t\t\t\t}\n\t\t\t\tstdpr((struct printparam*)cb, \"&amp;\", 5);\n\t\t\t\tbreak;\n\t\t\tcase '<':\n\t\t\t\tif(delay){\n\t\t\t\t\tstdpr((struct printparam*)cb, buf+i-delay, delay);\n\t\t\t\t\tdelay = 0;\n\t\t\t\t}\n\t\t\t\tstdpr((struct printparam*)cb, \"&lt;\", 4);\n\t\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tif(delay){\n\t\t\t\t\tstdpr((struct printparam*)cb, buf+i-delay, delay);\n\t\t\t\t\tdelay = 0;\n\t\t\t\t}\n\t\t\t\tstdpr((struct printparam*)cb, \"&gt;\", 4);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdelay++;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tif(delay){\n\t\tstdpr((struct printparam*)cb, buf+i-delay, delay);\n\t}\n}\n\n/*\nstatic char * templateprint(struct printparam* pp, int *level, struct dictionary *dict, char * template){\n\tchar *s, *s2;\n\tfor(; template && *template; ){\n\t\tif(!( s = strchr(template, '<'))){\n\t\t\tstdpr(pp, template, (int)strlen(template));\n\t\t\treturn template + strlen(template);\n\t\t}\n\t\tif(s[1] != '%' || s[2] == '%'){\n\t\t\tstdpr(pp, template, (int)(s - template) + 1);\n\t\t\ttemplate = s + 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[2] == '/' && (s2 = strchr(s + 2, '>')) && *(s2 - 1) == '%'){\n\t\t\tif(--*level < 0) return NULL;\n\t\t\treturn s2 + 1;\n\t\t}\n\t}\n\treturn template;\n}\n*/\n\nstatic void printstr(struct printparam* pp, char* str){\n\tstdpr(pp, str, str?(int)strlen(str):0);\n}\n\nstatic void printval(void *value, int type, int level, struct printparam* pp){\n\tstruct node pn, cn;\n\tstruct property *p;\n\tint i;\n\n\tpn.iteration = NULL;\n\tpn.parent = NULL;\n\tpn.type = type;\n\tpn.value =  value;\n\n\tprintstr(pp, \"<item>\");\n\tfor(p = datatypes[type].properties; p; ) {\n\t\tcn.iteration = NULL;\n\t\tcn.parent = &pn;\n\t\tcn.type = p->type;\n\t\tcn.value =  (*p->e_f)(&pn);\n\t\tif(cn.value){\n\t\t\tfor(i = 0; i < level; i++) printstr(pp, \"\\t\");\n\t\t\tif(strcmp(p->name, \"next\")){\n\t\t\t\tprintstr(pp, \"<parameter>\");\n\t\t\t\tprintstr(pp, \"<name>\");\n\t\t\t\tprintstr(pp, p->name);\n\t\t\t\tprintstr(pp, \"</name>\");\n\t\t\t\tprintstr(pp, \"<type>\");\n\t\t\t\tprintstr(pp, datatypes[p->type].type);\n\t\t\t\tprintstr(pp, \"</type>\");\n\t\t\t\tprintstr(pp, \"<description>\");\n\t\t\t\tprintstr(pp, p->description);\n\t\t\t\tprintstr(pp, \"</description>\");\n\t\t\t}\n\t\t\tif(datatypes[p->type].p_f){\n\t\t\t\tprintstr(pp, \"<value><![CDATA[\");\n\t\t\t\t(*datatypes[p->type].p_f)(&cn, stdcbf, pp);\n\t\t\t\tprintstr(pp, \"]]></value>\\n\");\n\t\t\t\tprintstr(pp, \"</parameter>\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(!strcmp(p->name, \"next\")){\n/*\t\t\t\t\tprintstr(pp, \"<!-- -------------------- -->\\n\"); */\n\t\t\t\t\tprintstr(pp, \"</item>\\n<item>\");\n\t\t\t\t\tp = datatypes[type].properties;\n\t\t\t\t\tpn.value = value = cn.value;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprintstr(pp, \"\\n\");\n\t\t\t\t\tprintval(cn.value, cn.type, level+1, pp);\n\t\t\t\t\tprintstr(pp, \"</parameter>\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tp=p->next;\n\t}\n\tprintstr(pp, \"</item>\");\n}\n\n\nchar * admin_stringtable[]={\n\t\"HTTP/1.0 401 Authentication Required\\r\\n\"\n\t\"WWW-Authenticate: Basic realm=\\\"proxy\\\"\\r\\n\"\n\t\"Connection: close\\r\\n\"\n\t\"Content-type: text/html; charset=us-ascii\\r\\n\"\n\t\"\\r\\n\"\n\t\"<html><head><title>401 Authentication Required</title></head>\\r\\n\"\n\t\"<body><h2>401 Authentication Required</h2><h3>Access to requested resource disallowed by administrator or you need valid username/password to use this resource</h3></body></html>\\r\\n\",\n\n\t\"HTTP/1.0 200 OK\\r\\n\"\n\t\"Connection: close\\r\\n\"\n\t\"Expires: Thu, 01 Dec 1994 16:00:00 GMT\\r\\n\"\n\t\"Cache-Control: no-cache\\r\\n\"\n\t\"Content-type: text/html\\r\\n\"\n\t\"\\r\\n\"\n\t\"<http><head><title>%s configuration page</title></head>\\r\\n\"\n\t\"<table width=\\'100%%\\' border=\\'0\\'>\\r\\n\"\n\t\"<tr><td width=\\'150\\' valign=\\'top\\'>\\r\\n\"\n\t\"<h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\n\t\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h2>\\r\\n\"\n\t\"<A HREF=\\'/C'>Counters</A><br>\\r\\n\"\n\t\"<A HREF=\\'/R'>Reload</A><br>\\r\\n\"\n\t\"<A HREF=\\'/S'>Running Services</A><br>\\r\\n\"\n\t\"<A HREF=\\'/F'>Config</A>\\r\\n\"\n\t\"</td><td>\"\n\t\"<h2>%s %s configuration</h2>\",\n\n\t\"HTTP/1.0 200 OK\\r\\n\"\n\t\"Connection: close\\r\\n\"\n\t\"Cache-Control: no-cache\\r\\n\"\n\t\"Content-type: text/xml\\r\\n\"\n\t\"\\r\\n\"\n\t\"<?xml version=\\\"1.0\\\"?>\\r\\n\"\n\t\"<?xml-stylesheet href=\\\"/SX\\\" type=\\\"text/css\\\"?>\\r\\n\"\n\t\"<services>\\r\\n\"\n\t\"<description>Services currently running and connected clients</description>\\r\\n\",\n\n\t\"</services>\\r\\n\",\n\n\n\t\"HTTP/1.0 200 OK\\r\\n\"\n\t\"Connection: close\\r\\n\"\n\t\"Cache-Control: no-cache\\r\\n\"\n\t\"Content-type: text/css\\r\\n\"\n\t\"\\r\\n\"\n\t\"services {\\r\\n\"\n\t\"\tdisplay: block;\\r\\n\"\n\t\"\tmargin: 10px auto 10px auto;\\r\\n\"\n\t\"\twidth: 80%;\\r\\n\"\n\t\"\tbackground: black;\\r\\n\"\n\t\"\tfont-family: sans-serif;\\r\\n\"\n\t\"\tfont-size: small;\\r\\n\"\n\t\"\tcolor: silver;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"item {\\r\\n\"\n\t\"\tdisplay: block;\\r\\n\"\n\t\"\tmargin-bottom: 10px;\\r\\n\"\n\t\"\tborder: 2px solid #CCC;\\r\\n\"\n\t\"\tpadding: 10px;\\r\\n\"\n\t\"\tspacing: 2px;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"parameter {\\r\\n\"\n\t\"\tdisplay: block;\\r\\n\"\n\t\"\tpadding: 2px;\\r\\n\"\n\t\"\tmargin-top: 10px;\\r\\n\"\n\t\"\tborder: 1px solid grey;\\r\\n\"\n\t\"\tbackground: #EEE;\\r\\n\"\n\t\"\tcolor: black;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"name {\\r\\n\"\n\t\"\tdisplay: inline;\\r\\n\"\n\t\"\tfloat: left;\\r\\n\"\n\t\"\tmargin-right: 5px;\\r\\n\"\n\t\"\tfont-weight: bold;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"type {\\r\\n\"\n\t\"\tdisplay: inline;\\r\\n\"\n\t\"\tfont-size: x-small;\\r\\n\"\n\t\"\tmargin-right: 5px;\\r\\n\"\n\t\"\tcolor: #666;\\r\\n\"\n\t\"\twhite-space: nowrap;\\r\\n\"\n\t\"\tfont-style: italic;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"description {\\r\\n\"\n\t\"\tdisplay: inline;\\r\\n\"\n\t\"\tmargin-right: 5px;\\r\\n\"\n\t\"\twhite-space: nowrap;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"value {\\r\\n\"\n\t\"\tdisplay: block;\\r\\n\"\n\t\"\tmargin-right: 5px;\\r\\n\"\n\t\"\t}\\r\\n\",\n\n\n\t\"<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\\r\\n\"\n\t\"<pre><font size=\\'-2\\'><b>\"\n\tCOPYRIGHT\n\t\"</b></font>\\r\\n\"\n\t\"</td></tr></table></body></html>\",\n\n\t\"<h3>Counters</h3>\\r\\n\"\n\t\"<table border = \\'1\\'>\\r\\n\"\n\t\"<tr align=\\'center\\'><td>Description</td><td>Active</td>\"\n\t\"<td>Users</td><td>Source Address</td><td>Destination Address</td>\"\n\t\"<td>Port</td>\"\n\t\"<td>Limit</td><td>Units</td><td>Value</td>\"\n\t\"<td>Reset</td><td>Updated</td><td>Num</td></tr>\\r\\n\",\n\n\t\"</table>\\r\\n\",\n\n\tNULL\n};\n\n#define authreq admin_stringtable[0]\n#define ok admin_stringtable[1]\n#define xml admin_stringtable[2]\n#define postxml admin_stringtable[3]\n#define style admin_stringtable[4]\n#define tail admin_stringtable[5]\n#define counters admin_stringtable[6]\n#define counterstail admin_stringtable[7]\n\n\nstatic int printportlist(char *buf, int bufsize, struct portlist* pl, char * delim){\n\tint printed = 0;\n\n\tfor(; pl; pl = pl->next){\n\t\tif(printed > (bufsize - 64)) break;\n\t\tif(pl->startport != pl->endport)\n\t\t\tprinted += sprintf(buf+printed, \"%hu-%hu%s\", pl->startport, pl->endport, pl->next?delim:\"\");\n\t\telse {\n/*\n\t\t\tstruct servent  *se=NULL;\n\t\t\tif(pl->startport)se = getservbyport((int)ntohs(pl->startport), NULL);\n\t\t\tprinted += sprintf(buf+printed, \"%hu(%s)%s\", pl->startport, se?se->s_name:\"unknown\", pl->next?delim:\"\");\n*/\n\t\t\tprinted += sprintf(buf+printed, \"%hu%s\", pl->startport, pl->next?delim:\"\");\n\t\t}\n\t\tif(printed > (bufsize - 64)) {\n\t\t\tprinted += sprintf(buf+printed, \"...\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn printed;\n}\n\n\nstatic int printuserlist(char *buf, int bufsize, struct userlist* ul, char * delim){\n\tint printed = 0;\n\n\tfor(; ul; ul = ul->next){\n\t\tif(printed > (bufsize - 64)) break;\n\t\tprinted += sprintf(buf+printed, \"%s%s\", ul->user, ul->next?delim:\"\");\n\t\tif(printed > (bufsize - 64)) {\n\t\t\tprinted += sprintf(buf+printed, \"...\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn printed;\n}\n\n\nint printiple(char *buf, struct iplist* ipl);\n\nstatic int printiplist(char *buf, int bufsize, struct iplist* ipl, char * delim){\n\tint printed = 0;\n\tfor(; ipl; ipl = ipl->next){\n\t\tif(printed > (bufsize - 128)) break;\n\t\tprinted += printiple(buf+printed, ipl);\n\t\tif(printed > (bufsize - 128)) {\n\t\t\tprinted += sprintf(buf+printed, \"...\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn printed;\n}\n\nvoid * adminchild(struct clientparam* param) {\n int i, res;\n char * buf;\n char username[256];\n char *sb;\n char *req = NULL;\n struct printparam pp;\n int contentlen = 0;\n int isform = 0;\n\n pp.inbuf = 0;\n pp.cp = param;\n\n buf = myalloc(LINESIZE);\n if(!buf) {RETURN(555);}\n i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, LINESIZE - 1, '\\n', conf.timeouts[STRING_S]);\n if(i<5 || ((buf[0]!='G' || buf[1]!='E' || buf[2]!='T' || buf[3]!=' ' || buf[4]!='/') && \n\t   (buf[0]!='P' || buf[1]!='O' || buf[2]!='S' || buf[3]!='T' || buf[4]!=' ' || buf[5]!='/')))\n {\n\tRETURN(701);\n }\n buf[i] = 0;\n sb = strchr(buf+5, ' ');\n if(!sb){\n\tRETURN(702);\n }\n *sb = 0;\n req = mystrdup(buf + ((*buf == 'P')? 6 : 5));\n while((i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, LINESIZE - 1, '\\n', conf.timeouts[STRING_S])) > 2){\n\tbuf[i] = 0;\n\tif(i > 19 && (!strncasecmp(buf, \"authorization\", 13))){\n\t\tsb = strchr(buf, ':');\n\t\tif(!sb)continue;\n\t\t++sb;\n\t\twhile(isspace(*sb))sb++;\n\t\tif(!*sb || strncasecmp(sb, \"basic\", 5)){\n\t\t\tcontinue;\n\t\t}\n\t\tsb+=5;\n\t\twhile(isspace(*sb))sb++;\n\t\ti = de64((unsigned char *)sb, (unsigned char *)username, 255);\n\t\tif(i<=0)continue;\n\t\tusername[i] = 0;\n\t\tsb = strchr((char *)username, ':');\n\t\tif(sb){\n\t\t\t*sb = 0;\n\t\t\tif(param->password)myfree(param->password);\n\t\t\tparam->password = (unsigned char *)mystrdup(sb+1);\n\t\t}\n\t\tif(param->username) myfree(param->username);\n\t\tparam->username = (unsigned char *)mystrdup(username);\n\t\tcontinue;\n\t}\n\telse if(i > 15 && (!strncasecmp(buf, \"content-length:\", 15))){\n\t\tsb = buf + 15;\n\t\twhile(isspace(*sb))sb++;\n\t\tcontentlen = atoi(sb);\n\t}\n\telse if(i > 13 && (!strncasecmp(buf, \"content-type:\", 13))){\n\t\tsb = buf + 13;\n\t\twhile(isspace(*sb))sb++;\n\t\tif(!strncasecmp(sb, \"x-www-form-urlencoded\", 21)) isform = 1;\n\t}\n }\n param->operation = ADMIN;\n if(isform && contentlen) {\n\tprintstr(&pp, \"HTTP/1.0 100 Continue\\r\\n\\r\\n\");\n\tstdpr(&pp, NULL, 0);\n }\n res = (*param->srv->authfunc)(param);\n if(res && res != 10) {\n\tprintstr(&pp, authreq);\n\tRETURN(res);\n }\n if(param->srv->singlepacket || param->redirected){\n\tif(*req == 'C') req[1] = 0;\n\telse *req = 0;\n }\n sprintf(buf, ok, conf.stringtable?(char *)conf.stringtable[2]:\"3proxy\", conf.stringtable?(char *)conf.stringtable[2]:\"3[APA3A] tiny proxy\", conf.stringtable?(char *)conf.stringtable[3]:\"\");\n if(*req != 'S') printstr(&pp, buf);\n switch(*req){\n\tcase 'C':\n\t\tprintstr(&pp, counters);\n\t\t{\n\t\t\tstruct trafcount *cp; \n\t\t\tint num = 0;\n\t\t\tfor(cp = conf.trafcounter; cp; cp = cp->next, num++){\n\t\t\t int inbuf = 0;\n\n\t\t\t if(cp->ace && (param->srv->singlepacket || param->redirected)){\n\t\t\t\tif(!ACLmatches(cp->ace, param))continue;\n\t\t\t }\n\t\t\t if(req[1] == 'S' && atoi(req+2) == num) cp->disabled=0;\n\t\t\t if(req[1] == 'D' && atoi(req+2) == num) cp->disabled=1;\n\t\t\t inbuf += sprintf(buf,\t\"<tr>\"\n\t\t\t\t\t\t\"<td>%s</td><td><A HREF=\\'/C%c%d\\'>%s</A></td><td>\",\n\t\t\t\t\t\t(cp->comment)?cp->comment:\"&nbsp;\",\n\t\t\t\t\t\t(cp->disabled)?'S':'D',\n\t\t\t\t\t\tnum,\n\t\t\t\t\t\t(cp->disabled)?\"NO\":\"YES\"\n\t\t\t\t\t);\n\t\t\t if(!cp->ace || !cp->ace->users){\n\t\t\t\tinbuf += sprintf(buf+inbuf, \"<center>ANY</center>\");\n\t\t\t }\n\t\t\t else {\n\t\t\t\tinbuf += printuserlist(buf+inbuf, LINESIZE-800, cp->ace->users, \",<br />\\r\\n\");\n\t\t\t }\n\t\t\t inbuf += sprintf(buf+inbuf, \"</td><td>\");\n\t\t\t if(!cp->ace || !cp->ace->src){\n\t\t\t\tinbuf += sprintf(buf+inbuf, \"<center>ANY</center>\");\n\t\t\t }\n\t\t\t else {\n\t\t\t\tinbuf += printiplist(buf+inbuf, LINESIZE-512, cp->ace->src, \",<br />\\r\\n\");\n\t\t\t }\n\t\t\t inbuf += sprintf(buf+inbuf, \"</td><td>\");\n\t\t\t if(!cp->ace || !cp->ace->dst){\n\t\t\t\tinbuf += sprintf(buf+inbuf, \"<center>ANY</center>\");\n\t\t\t }\n\t\t\t else {\n\t\t\t\tinbuf += printiplist(buf+inbuf, LINESIZE-512, cp->ace->dst, \",<br />\\r\\n\");\n\t\t\t }\n\t\t\t inbuf += sprintf(buf+inbuf, \"</td><td>\");\n\t\t\t if(!cp->ace || !cp->ace->ports){\n\t\t\t\tinbuf += sprintf(buf+inbuf, \"<center>ANY</center>\");\n\t\t\t }\n\t\t\t else {\n\t\t\t\tinbuf += printportlist(buf+inbuf, LINESIZE-128, cp->ace->ports, \",<br />\\r\\n\");\n\t\t\t }\n\t\t\t if(cp->type == NONE) {\n\t\t\t  inbuf += sprintf(buf+inbuf,\t\n\t\t\t\t\t\"</td><td colspan=\\'6\\' align=\\'center\\'>exclude from limitation</td></tr>\\r\\n\"\n\t\t\t\t );\n\t\t\t }\n\t\t\t else {\n\t\t\t  inbuf += sprintf(buf+inbuf,\t\n\t\t\t\t\t\"</td><td>%\"PRINTF_INT64_MODIFIER\"u</td>\"\n\t\t\t\t\t\"<td>MB%s</td>\"\n\t\t\t\t\t\"<td>%\"PRINTF_INT64_MODIFIER\"u</td>\"\n\t\t\t\t\t\"<td>%s</td>\",\n\t\t\t\t cp->traflim64 / (1024 * 1024),\n\t\t\t\t rotations[cp->type],\n\t\t\t\t cp->traf64,\n\t\t\t\t cp->cleared?ctime(&cp->cleared):\"never\"\n\t\t\t\t);\n\t\t\t inbuf += sprintf(buf + inbuf,\n\t\t\t\t\t\"<td>%s</td>\"\n\t\t\t\t\t\"<td>%i</td>\"\n\t\t\t\t\t\"</tr>\\r\\n\",\n\n\t\t\t\t cp->updated?ctime(&cp->updated):\"never\",\n\t\t\t\t cp->number\n\t\t\t\t);\n\t\t\t }\n\t\t\t printstr(&pp, buf);\n\t\t\t}\n\n\t\t}\n\t\tprintstr(&pp, counterstail);\n\t\tbreak;\n\t\t\n\tcase 'R':\n\t\tconf.needreload = 1;\n\t\tprintstr(&pp, \"<h3>Reload scheduled</h3>\");\n\t\tbreak;\n\tcase 'S':\n\t\t{\n\t\t\tif(req[1] == 'X'){\n\t\t\t\tprintstr(&pp, style);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprintstr(&pp, xml);\n\t\t\tprintval(conf.services, TYPE_SERVER, 0, &pp);\n\t\t\tprintstr(&pp, postxml);\n\t\t}\n\t\t\tbreak;\n\tcase 'F':\n\t\t{\n\t\t\tFILE *fp;\n\t\t\tchar buf[256];\n\n\t\t\tfp = confopen();\n\t\t\tif(!fp){\n\t\t\t\tprintstr(&pp, \"<h3><font color=\\\"red\\\">Failed to open config file</font></h3>\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\tprintstr(&pp, \"<h3>Please be careful editing config file remotely</h3>\");\n\t\t\t\tprintstr(&pp, \"<form method=\\\"POST\\\" action=\\\"/U\\\"><textarea cols=\\\"80\\\" rows=\\\"30\\\" name=\\\"conffile\\\">\");\n\t\t\t\twhile(fgets(buf, 256, fp)){\n\t\t\t\t\tprintstr(&pp, buf);\n\t\t\t\t}\n\t\t\t\tif(!writable) fclose(fp);\n\t\t\t\tprintstr(&pp, \"</textarea><br><input type=\\\"Submit\\\"></form>\");\n\t\t\tbreak;\n\t\t}\n\tcase 'U':\n\t\t{\n\t\t\tint l=0;\n\t\t\tint error = 0;\n\n\t\t\tif(!writable || fseek(writable, 0, 0)){\n\t\t\t\terror = 1;\n\t\t\t}\n\t\t\twhile((i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, LINESIZE - 1, '+', conf.timeouts[STRING_S])) > 0){\n\t\t\t\tif(i > (contentlen - l)) i = (contentlen - l);\n\t\t\t\tbuf[i] = 0;\n\t\t\t\tif(!l){\n\t\t\t\t\tif(strncasecmp(buf, \"conffile=\", 9)) error = 1;\n\t\t\t\t}\n\t\t\t\tif(!error){\n\t\t\t\t\tdecodeurl((unsigned char *)buf, 1);\n\t\t\t\t\tfprintf(writable, \"%s\", l? buf : buf + 9);\n\t\t\t\t}\n\t\t\t\tl += i;\n\t\t\t\tif(l >= contentlen) break;\n\t\t\t}\n\t\t\tif(writable && !error){\n\t\t\t\tfflush(writable);\n#ifndef _WINCE\n\t\t\t\tftruncate(fileno(writable), ftell(writable));\n#endif\n\t\t\t}\n\t\t\tprintstr(&pp, error?    \"<h3><font color=\\\"red\\\">Config file is not writable</font></h3>Make sure you have \\\"writable\\\" command in configuration file\":\n\t\t\t\t\t\t\"<h3>Configuration updated</h3>\");\n\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tprintstr(&pp, (char *)conf.stringtable[WEBBANNERS]);\n\t\tbreak;\n }\n if(*req != 'S') printstr(&pp, tail);\n\nCLEANRET:\n\n\n printstr(&pp, NULL);\n if(buf) myfree(buf);\n (*param->srv->logfunc)(param, (unsigned char *)req);\n if(req)myfree(req);\n freeparam(param);\n return (NULL);\n}\n"], "fixing_code": ["/*\n   3APA3A simpliest proxy server\n   (c) 2002-2008 by ZARAZA <3APA3A@security.nnov.ru>\n\n   please read License Agreement\n\n*/\n\n#include \"proxy.h\"\n\n#define RETURN(xxx) { param->res = xxx; goto CLEANRET; }\n\n#define LINESIZE 65536\n\nextern FILE *writable;\nFILE * confopen();\nextern void decodeurl(unsigned char *s, int filter);\n\nstruct printparam {\n\tchar buf[1024];\n\tint inbuf;\n\tstruct clientparam *cp;\n};\n\nstatic void stdpr(struct printparam* pp, char *buf, int inbuf){\n\tif((pp->inbuf + inbuf > 1024) || !buf) {\n\t\tsocksend(pp->cp->clisock, (unsigned char *)pp->buf, pp->inbuf, conf.timeouts[STRING_S]);\n\t\tpp->inbuf = 0;\n\t\tif(!buf) return;\n\t}\n\tif(inbuf >= 1000){\n\t\tsocksend(pp->cp->clisock, (unsigned char *)buf, inbuf, conf.timeouts[STRING_S]);\t\t\n\t}\n\telse {\n\t\tmemcpy(pp->buf + pp->inbuf, buf, inbuf);\n\t\tpp->inbuf += inbuf;\n\t}\n}\n\nstatic void stdcbf(void *cb, char *buf, int inbuf){\n\tint delay = 0;\n\tint i;\n\n\tfor(i = 0; i < inbuf; i++){\n\t\tswitch(buf[i]){\n\t\t\tcase '&':\n\t\t\t\tif(delay){\n\t\t\t\t\tstdpr((struct printparam*)cb, buf+i-delay, delay);\n\t\t\t\t\tdelay = 0;\n\t\t\t\t}\n\t\t\t\tstdpr((struct printparam*)cb, \"&amp;\", 5);\n\t\t\t\tbreak;\n\t\t\tcase '<':\n\t\t\t\tif(delay){\n\t\t\t\t\tstdpr((struct printparam*)cb, buf+i-delay, delay);\n\t\t\t\t\tdelay = 0;\n\t\t\t\t}\n\t\t\t\tstdpr((struct printparam*)cb, \"&lt;\", 4);\n\t\t\t\tbreak;\n\t\t\tcase '>':\n\t\t\t\tif(delay){\n\t\t\t\t\tstdpr((struct printparam*)cb, buf+i-delay, delay);\n\t\t\t\t\tdelay = 0;\n\t\t\t\t}\n\t\t\t\tstdpr((struct printparam*)cb, \"&gt;\", 4);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdelay++;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tif(delay){\n\t\tstdpr((struct printparam*)cb, buf+i-delay, delay);\n\t}\n}\n\n/*\nstatic char * templateprint(struct printparam* pp, int *level, struct dictionary *dict, char * template){\n\tchar *s, *s2;\n\tfor(; template && *template; ){\n\t\tif(!( s = strchr(template, '<'))){\n\t\t\tstdpr(pp, template, (int)strlen(template));\n\t\t\treturn template + strlen(template);\n\t\t}\n\t\tif(s[1] != '%' || s[2] == '%'){\n\t\t\tstdpr(pp, template, (int)(s - template) + 1);\n\t\t\ttemplate = s + 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif(s[2] == '/' && (s2 = strchr(s + 2, '>')) && *(s2 - 1) == '%'){\n\t\t\tif(--*level < 0) return NULL;\n\t\t\treturn s2 + 1;\n\t\t}\n\t}\n\treturn template;\n}\n*/\n\nstatic void printstr(struct printparam* pp, char* str){\n\tstdpr(pp, str, str?(int)strlen(str):0);\n}\n\nstatic void printval(void *value, int type, int level, struct printparam* pp){\n\tstruct node pn, cn;\n\tstruct property *p;\n\tint i;\n\n\tpn.iteration = NULL;\n\tpn.parent = NULL;\n\tpn.type = type;\n\tpn.value =  value;\n\n\tprintstr(pp, \"<item>\");\n\tfor(p = datatypes[type].properties; p; ) {\n\t\tcn.iteration = NULL;\n\t\tcn.parent = &pn;\n\t\tcn.type = p->type;\n\t\tcn.value =  (*p->e_f)(&pn);\n\t\tif(cn.value){\n\t\t\tfor(i = 0; i < level; i++) printstr(pp, \"\\t\");\n\t\t\tif(strcmp(p->name, \"next\")){\n\t\t\t\tprintstr(pp, \"<parameter>\");\n\t\t\t\tprintstr(pp, \"<name>\");\n\t\t\t\tprintstr(pp, p->name);\n\t\t\t\tprintstr(pp, \"</name>\");\n\t\t\t\tprintstr(pp, \"<type>\");\n\t\t\t\tprintstr(pp, datatypes[p->type].type);\n\t\t\t\tprintstr(pp, \"</type>\");\n\t\t\t\tprintstr(pp, \"<description>\");\n\t\t\t\tprintstr(pp, p->description);\n\t\t\t\tprintstr(pp, \"</description>\");\n\t\t\t}\n\t\t\tif(datatypes[p->type].p_f){\n\t\t\t\tprintstr(pp, \"<value><![CDATA[\");\n\t\t\t\t(*datatypes[p->type].p_f)(&cn, stdcbf, pp);\n\t\t\t\tprintstr(pp, \"]]></value>\\n\");\n\t\t\t\tprintstr(pp, \"</parameter>\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(!strcmp(p->name, \"next\")){\n/*\t\t\t\t\tprintstr(pp, \"<!-- -------------------- -->\\n\"); */\n\t\t\t\t\tprintstr(pp, \"</item>\\n<item>\");\n\t\t\t\t\tp = datatypes[type].properties;\n\t\t\t\t\tpn.value = value = cn.value;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprintstr(pp, \"\\n\");\n\t\t\t\t\tprintval(cn.value, cn.type, level+1, pp);\n\t\t\t\t\tprintstr(pp, \"</parameter>\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tp=p->next;\n\t}\n\tprintstr(pp, \"</item>\");\n}\n\n\nchar * admin_stringtable[]={\n\t\"HTTP/1.0 401 Authentication Required\\r\\n\"\n\t\"WWW-Authenticate: Basic realm=\\\"proxy\\\"\\r\\n\"\n\t\"Connection: close\\r\\n\"\n\t\"Content-type: text/html; charset=us-ascii\\r\\n\"\n\t\"\\r\\n\"\n\t\"<html><head><title>401 Authentication Required</title></head>\\r\\n\"\n\t\"<body><h2>401 Authentication Required</h2><h3>Access to requested resource disallowed by administrator or you need valid username/password to use this resource</h3></body></html>\\r\\n\",\n\n\t\"HTTP/1.0 200 OK\\r\\n\"\n\t\"Connection: close\\r\\n\"\n\t\"Expires: Thu, 01 Dec 1994 16:00:00 GMT\\r\\n\"\n\t\"Cache-Control: no-cache\\r\\n\"\n\t\"Content-type: text/html\\r\\n\"\n\t\"\\r\\n\"\n\t\"<http><head><title>%s configuration page</title></head>\\r\\n\"\n\t\"<table width=\\'100%%\\' border=\\'0\\'>\\r\\n\"\n\t\"<tr><td width=\\'150\\' valign=\\'top\\'>\\r\\n\"\n\t\"<h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\n\t\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h2>\\r\\n\"\n\t\"<A HREF=\\'/C'>Counters</A><br>\\r\\n\"\n\t\"<A HREF=\\'/R'>Reload</A><br>\\r\\n\"\n\t\"<A HREF=\\'/S'>Running Services</A><br>\\r\\n\"\n\t\"<A HREF=\\'/F'>Config</A>\\r\\n\"\n\t\"</td><td>\"\n\t\"<h2>%s %s configuration</h2>\",\n\n\t\"HTTP/1.0 200 OK\\r\\n\"\n\t\"Connection: close\\r\\n\"\n\t\"Cache-Control: no-cache\\r\\n\"\n\t\"Content-type: text/xml\\r\\n\"\n\t\"\\r\\n\"\n\t\"<?xml version=\\\"1.0\\\"?>\\r\\n\"\n\t\"<?xml-stylesheet href=\\\"/SX\\\" type=\\\"text/css\\\"?>\\r\\n\"\n\t\"<services>\\r\\n\"\n\t\"<description>Services currently running and connected clients</description>\\r\\n\",\n\n\t\"</services>\\r\\n\",\n\n\n\t\"HTTP/1.0 200 OK\\r\\n\"\n\t\"Connection: close\\r\\n\"\n\t\"Cache-Control: no-cache\\r\\n\"\n\t\"Content-type: text/css\\r\\n\"\n\t\"\\r\\n\"\n\t\"services {\\r\\n\"\n\t\"\tdisplay: block;\\r\\n\"\n\t\"\tmargin: 10px auto 10px auto;\\r\\n\"\n\t\"\twidth: 80%;\\r\\n\"\n\t\"\tbackground: black;\\r\\n\"\n\t\"\tfont-family: sans-serif;\\r\\n\"\n\t\"\tfont-size: small;\\r\\n\"\n\t\"\tcolor: silver;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"item {\\r\\n\"\n\t\"\tdisplay: block;\\r\\n\"\n\t\"\tmargin-bottom: 10px;\\r\\n\"\n\t\"\tborder: 2px solid #CCC;\\r\\n\"\n\t\"\tpadding: 10px;\\r\\n\"\n\t\"\tspacing: 2px;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"parameter {\\r\\n\"\n\t\"\tdisplay: block;\\r\\n\"\n\t\"\tpadding: 2px;\\r\\n\"\n\t\"\tmargin-top: 10px;\\r\\n\"\n\t\"\tborder: 1px solid grey;\\r\\n\"\n\t\"\tbackground: #EEE;\\r\\n\"\n\t\"\tcolor: black;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"name {\\r\\n\"\n\t\"\tdisplay: inline;\\r\\n\"\n\t\"\tfloat: left;\\r\\n\"\n\t\"\tmargin-right: 5px;\\r\\n\"\n\t\"\tfont-weight: bold;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"type {\\r\\n\"\n\t\"\tdisplay: inline;\\r\\n\"\n\t\"\tfont-size: x-small;\\r\\n\"\n\t\"\tmargin-right: 5px;\\r\\n\"\n\t\"\tcolor: #666;\\r\\n\"\n\t\"\twhite-space: nowrap;\\r\\n\"\n\t\"\tfont-style: italic;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"description {\\r\\n\"\n\t\"\tdisplay: inline;\\r\\n\"\n\t\"\tmargin-right: 5px;\\r\\n\"\n\t\"\twhite-space: nowrap;\\r\\n\"\n\t\"\t}\\r\\n\"\n\t\"value {\\r\\n\"\n\t\"\tdisplay: block;\\r\\n\"\n\t\"\tmargin-right: 5px;\\r\\n\"\n\t\"\t}\\r\\n\",\n\n\n\t\"<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\\r\\n\"\n\t\"<pre><font size=\\'-2\\'><b>\"\n\tCOPYRIGHT\n\t\"</b></font>\\r\\n\"\n\t\"</td></tr></table></body></html>\",\n\n\t\"<h3>Counters</h3>\\r\\n\"\n\t\"<table border = \\'1\\'>\\r\\n\"\n\t\"<tr align=\\'center\\'><td>Description</td><td>Active</td>\"\n\t\"<td>Users</td><td>Source Address</td><td>Destination Address</td>\"\n\t\"<td>Port</td>\"\n\t\"<td>Limit</td><td>Units</td><td>Value</td>\"\n\t\"<td>Reset</td><td>Updated</td><td>Num</td></tr>\\r\\n\",\n\n\t\"</table>\\r\\n\",\n\n\tNULL\n};\n\n#define authreq admin_stringtable[0]\n#define ok admin_stringtable[1]\n#define xml admin_stringtable[2]\n#define postxml admin_stringtable[3]\n#define style admin_stringtable[4]\n#define tail admin_stringtable[5]\n#define counters admin_stringtable[6]\n#define counterstail admin_stringtable[7]\n\n\nstatic int printportlist(char *buf, int bufsize, struct portlist* pl, char * delim){\n\tint printed = 0;\n\n\tfor(; pl; pl = pl->next){\n\t\tif(printed > (bufsize - 64)) break;\n\t\tif(pl->startport != pl->endport)\n\t\t\tprinted += sprintf(buf+printed, \"%hu-%hu%s\", pl->startport, pl->endport, pl->next?delim:\"\");\n\t\telse {\n/*\n\t\t\tstruct servent  *se=NULL;\n\t\t\tif(pl->startport)se = getservbyport((int)ntohs(pl->startport), NULL);\n\t\t\tprinted += sprintf(buf+printed, \"%hu(%s)%s\", pl->startport, se?se->s_name:\"unknown\", pl->next?delim:\"\");\n*/\n\t\t\tprinted += sprintf(buf+printed, \"%hu%s\", pl->startport, pl->next?delim:\"\");\n\t\t}\n\t\tif(printed > (bufsize - 64)) {\n\t\t\tprinted += sprintf(buf+printed, \"...\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn printed;\n}\n\n\nstatic int printuserlist(char *buf, int bufsize, struct userlist* ul, char * delim){\n\tint printed = 0;\n\n\tfor(; ul; ul = ul->next){\n\t\tif(printed > (bufsize - 64)) break;\n\t\tprinted += sprintf(buf+printed, \"%s%s\", ul->user, ul->next?delim:\"\");\n\t\tif(printed > (bufsize - 64)) {\n\t\t\tprinted += sprintf(buf+printed, \"...\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn printed;\n}\n\n\nint printiple(char *buf, struct iplist* ipl);\n\nstatic int printiplist(char *buf, int bufsize, struct iplist* ipl, char * delim){\n\tint printed = 0;\n\tfor(; ipl; ipl = ipl->next){\n\t\tif(printed > (bufsize - 128)) break;\n\t\tprinted += printiple(buf+printed, ipl);\n\t\tif(printed > (bufsize - 128)) {\n\t\t\tprinted += sprintf(buf+printed, \"...\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn printed;\n}\n\nvoid * adminchild(struct clientparam* param) {\n int i, res;\n char * buf;\n char username[256];\n char *sb;\n char *req = NULL;\n struct printparam pp;\n unsigned contentlen = 0;\n int isform = 0;\n\n pp.inbuf = 0;\n pp.cp = param;\n\n buf = myalloc(LINESIZE);\n if(!buf) {RETURN(555);}\n i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, LINESIZE - 1, '\\n', conf.timeouts[STRING_S]);\n if(i<5 || ((buf[0]!='G' || buf[1]!='E' || buf[2]!='T' || buf[3]!=' ' || buf[4]!='/') && \n\t   (buf[0]!='P' || buf[1]!='O' || buf[2]!='S' || buf[3]!='T' || buf[4]!=' ' || buf[5]!='/')))\n {\n\tRETURN(701);\n }\n buf[i] = 0;\n sb = strchr(buf+5, ' ');\n if(!sb){\n\tRETURN(702);\n }\n *sb = 0;\n req = mystrdup(buf + ((*buf == 'P')? 6 : 5));\n while((i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, LINESIZE - 1, '\\n', conf.timeouts[STRING_S])) > 2){\n\tbuf[i] = 0;\n\tif(i > 19 && (!strncasecmp(buf, \"authorization\", 13))){\n\t\tsb = strchr(buf, ':');\n\t\tif(!sb)continue;\n\t\t++sb;\n\t\twhile(isspace(*sb))sb++;\n\t\tif(!*sb || strncasecmp(sb, \"basic\", 5)){\n\t\t\tcontinue;\n\t\t}\n\t\tsb+=5;\n\t\twhile(isspace(*sb))sb++;\n\t\ti = de64((unsigned char *)sb, (unsigned char *)username, 255);\n\t\tif(i<=0)continue;\n\t\tusername[i] = 0;\n\t\tsb = strchr((char *)username, ':');\n\t\tif(sb){\n\t\t\t*sb = 0;\n\t\t\tif(param->password)myfree(param->password);\n\t\t\tparam->password = (unsigned char *)mystrdup(sb+1);\n\t\t}\n\t\tif(param->username) myfree(param->username);\n\t\tparam->username = (unsigned char *)mystrdup(username);\n\t\tcontinue;\n\t}\n\telse if(i > 15 && (!strncasecmp(buf, \"content-length:\", 15))){\n\t\tsb = buf + 15;\n\t\twhile(isspace(*sb))sb++;\n\t\tsscanf(sb, \"%u\", &contentlen);\n\t\tif(contentlen > LINESIZE*1024) contentlen = 0;\n\t}\n\telse if(i > 13 && (!strncasecmp(buf, \"content-type:\", 13))){\n\t\tsb = buf + 13;\n\t\twhile(isspace(*sb))sb++;\n\t\tif(!strncasecmp(sb, \"x-www-form-urlencoded\", 21)) isform = 1;\n\t}\n }\n param->operation = ADMIN;\n if(isform && contentlen) {\n\tprintstr(&pp, \"HTTP/1.0 100 Continue\\r\\n\\r\\n\");\n\tstdpr(&pp, NULL, 0);\n }\n res = (*param->srv->authfunc)(param);\n if(res && res != 10) {\n\tprintstr(&pp, authreq);\n\tRETURN(res);\n }\n if(param->srv->singlepacket || param->redirected){\n\tif(*req == 'C') req[1] = 0;\n\telse *req = 0;\n }\n sprintf(buf, ok, conf.stringtable?(char *)conf.stringtable[2]:\"3proxy\", conf.stringtable?(char *)conf.stringtable[2]:\"3[APA3A] tiny proxy\", conf.stringtable?(char *)conf.stringtable[3]:\"\");\n if(*req != 'S') printstr(&pp, buf);\n switch(*req){\n\tcase 'C':\n\t\tprintstr(&pp, counters);\n\t\t{\n\t\t\tstruct trafcount *cp; \n\t\t\tint num = 0;\n\t\t\tfor(cp = conf.trafcounter; cp; cp = cp->next, num++){\n\t\t\t int inbuf = 0;\n\n\t\t\t if(cp->ace && (param->srv->singlepacket || param->redirected)){\n\t\t\t\tif(!ACLmatches(cp->ace, param))continue;\n\t\t\t }\n\t\t\t if(req[1] == 'S' && atoi(req+2) == num) cp->disabled=0;\n\t\t\t if(req[1] == 'D' && atoi(req+2) == num) cp->disabled=1;\n\t\t\t inbuf += sprintf(buf,\t\"<tr>\"\n\t\t\t\t\t\t\"<td>%s</td><td><A HREF=\\'/C%c%d\\'>%s</A></td><td>\",\n\t\t\t\t\t\t(cp->comment)?cp->comment:\"&nbsp;\",\n\t\t\t\t\t\t(cp->disabled)?'S':'D',\n\t\t\t\t\t\tnum,\n\t\t\t\t\t\t(cp->disabled)?\"NO\":\"YES\"\n\t\t\t\t\t);\n\t\t\t if(!cp->ace || !cp->ace->users){\n\t\t\t\tinbuf += sprintf(buf+inbuf, \"<center>ANY</center>\");\n\t\t\t }\n\t\t\t else {\n\t\t\t\tinbuf += printuserlist(buf+inbuf, LINESIZE-800, cp->ace->users, \",<br />\\r\\n\");\n\t\t\t }\n\t\t\t inbuf += sprintf(buf+inbuf, \"</td><td>\");\n\t\t\t if(!cp->ace || !cp->ace->src){\n\t\t\t\tinbuf += sprintf(buf+inbuf, \"<center>ANY</center>\");\n\t\t\t }\n\t\t\t else {\n\t\t\t\tinbuf += printiplist(buf+inbuf, LINESIZE-512, cp->ace->src, \",<br />\\r\\n\");\n\t\t\t }\n\t\t\t inbuf += sprintf(buf+inbuf, \"</td><td>\");\n\t\t\t if(!cp->ace || !cp->ace->dst){\n\t\t\t\tinbuf += sprintf(buf+inbuf, \"<center>ANY</center>\");\n\t\t\t }\n\t\t\t else {\n\t\t\t\tinbuf += printiplist(buf+inbuf, LINESIZE-512, cp->ace->dst, \",<br />\\r\\n\");\n\t\t\t }\n\t\t\t inbuf += sprintf(buf+inbuf, \"</td><td>\");\n\t\t\t if(!cp->ace || !cp->ace->ports){\n\t\t\t\tinbuf += sprintf(buf+inbuf, \"<center>ANY</center>\");\n\t\t\t }\n\t\t\t else {\n\t\t\t\tinbuf += printportlist(buf+inbuf, LINESIZE-128, cp->ace->ports, \",<br />\\r\\n\");\n\t\t\t }\n\t\t\t if(cp->type == NONE) {\n\t\t\t  inbuf += sprintf(buf+inbuf,\t\n\t\t\t\t\t\"</td><td colspan=\\'6\\' align=\\'center\\'>exclude from limitation</td></tr>\\r\\n\"\n\t\t\t\t );\n\t\t\t }\n\t\t\t else {\n\t\t\t  inbuf += sprintf(buf+inbuf,\t\n\t\t\t\t\t\"</td><td>%\"PRINTF_INT64_MODIFIER\"u</td>\"\n\t\t\t\t\t\"<td>MB%s</td>\"\n\t\t\t\t\t\"<td>%\"PRINTF_INT64_MODIFIER\"u</td>\"\n\t\t\t\t\t\"<td>%s</td>\",\n\t\t\t\t cp->traflim64 / (1024 * 1024),\n\t\t\t\t rotations[cp->type],\n\t\t\t\t cp->traf64,\n\t\t\t\t cp->cleared?ctime(&cp->cleared):\"never\"\n\t\t\t\t);\n\t\t\t inbuf += sprintf(buf + inbuf,\n\t\t\t\t\t\"<td>%s</td>\"\n\t\t\t\t\t\"<td>%i</td>\"\n\t\t\t\t\t\"</tr>\\r\\n\",\n\n\t\t\t\t cp->updated?ctime(&cp->updated):\"never\",\n\t\t\t\t cp->number\n\t\t\t\t);\n\t\t\t }\n\t\t\t printstr(&pp, buf);\n\t\t\t}\n\n\t\t}\n\t\tprintstr(&pp, counterstail);\n\t\tbreak;\n\t\t\n\tcase 'R':\n\t\tconf.needreload = 1;\n\t\tprintstr(&pp, \"<h3>Reload scheduled</h3>\");\n\t\tbreak;\n\tcase 'S':\n\t\t{\n\t\t\tif(req[1] == 'X'){\n\t\t\t\tprintstr(&pp, style);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprintstr(&pp, xml);\n\t\t\tprintval(conf.services, TYPE_SERVER, 0, &pp);\n\t\t\tprintstr(&pp, postxml);\n\t\t}\n\t\t\tbreak;\n\tcase 'F':\n\t\t{\n\t\t\tFILE *fp;\n\t\t\tchar buf[256];\n\n\t\t\tfp = confopen();\n\t\t\tif(!fp){\n\t\t\t\tprintstr(&pp, \"<h3><font color=\\\"red\\\">Failed to open config file</font></h3>\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\tprintstr(&pp, \"<h3>Please be careful editing config file remotely</h3>\");\n\t\t\t\tprintstr(&pp, \"<form method=\\\"POST\\\" action=\\\"/U\\\" enctype=\\\"application/x-www-form-urlencoded\\\"><textarea cols=\\\"80\\\" rows=\\\"30\\\" name=\\\"conffile\\\">\");\n\t\t\t\twhile(fgets(buf, 256, fp)){\n\t\t\t\t\tprintstr(&pp, buf);\n\t\t\t\t}\n\t\t\t\tif(!writable) fclose(fp);\n\t\t\t\tprintstr(&pp, \"</textarea><br><input type=\\\"Submit\\\"></form>\");\n\t\t\tbreak;\n\t\t}\n\tcase 'U':\n\t\t{\n\t\t\tunsigned l=0;\n\t\t\tint error = 0;\n\n\t\t\tif(!writable || !contentlen || fseek(writable, 0, 0)){\n\t\t\t\terror = 1;\n\t\t\t}\n\t\t\twhile(l < contentlen && (i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, (contentlen - l) > LINESIZE - 1?LINESIZE - 1:contentlen - l, '+', conf.timeouts[STRING_S])) > 0){\n\t\t\t\tif(i > (contentlen - l)) i = (contentlen - l);\n\t\t\t\tif(!l){\n\t\t\t\t\tif(i<9 || strncasecmp(buf, \"conffile=\", 9)) error = 1;\n\t\t\t\t}\n\t\t\t\tif(!error){\n\t\t\t\t\tbuf[i] = 0;\n\t\t\t\t\tdecodeurl((unsigned char *)buf, 1);\n\t\t\t\t\tfprintf(writable, \"%s\", l? buf : buf + 9);\n\t\t\t\t}\n\t\t\t\tl += i;\n\t\t\t}\n\t\t\tif(writable && !error){\n\t\t\t\tfflush(writable);\n#ifndef _WINCE\n\t\t\t\tftruncate(fileno(writable), ftell(writable));\n#endif\n\t\t\t}\n\t\t\tprintstr(&pp, error?    \"<h3><font color=\\\"red\\\">Config file is not writable</font></h3>Make sure you have \\\"writable\\\" command in configuration file\":\n\t\t\t\t\t\t\"<h3>Configuration updated</h3>\");\n\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tprintstr(&pp, (char *)conf.stringtable[WEBBANNERS]);\n\t\tbreak;\n }\n if(*req != 'S') printstr(&pp, tail);\n\nCLEANRET:\n\n\n printstr(&pp, NULL);\n if(buf) myfree(buf);\n (*param->srv->logfunc)(param, (unsigned char *)req);\n if(req)myfree(req);\n freeparam(param);\n return (NULL);\n}\n"], "filenames": ["src/webadmin.c"], "buggy_code_start_loc": [13], "buggy_code_end_loc": [551], "fixing_code_start_loc": [13], "fixing_code_end_loc": [550], "type": "CWE-787", "message": "webadmin.c in 3proxy before 0.8.13 has an out-of-bounds write in the admin interface.", "other": {"cve": {"id": "CVE-2019-14495", "sourceIdentifier": "cve@mitre.org", "published": "2019-08-01T17:15:13.733", "lastModified": "2023-03-03T15:49:00.703", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "webadmin.c in 3proxy before 0.8.13 has an out-of-bounds write in the admin interface."}, {"lang": "es", "value": "En el archivo webadmin.c en 3proxy anterior a versi\u00f3n 0.8.13, presenta una escritura fuera de l\u00edmites en la interfaz del administrador."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:H/UI:N/S:C/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:3proxy:3proxy:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.8.13", "matchCriteriaId": "E4B94B96-2D89-4293-BD16-28479B164F38"}]}]}], "references": [{"url": "https://github.com/z3APA3A/3proxy/commit/3b67dc844789dc0f00e934270c7b349bcb547865", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/z3APA3A/3proxy/compare/0.8.12...0.8.13", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/z3APA3A/3proxy/releases/tag/0.8.13", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/z3APA3A/3proxy/commit/3b67dc844789dc0f00e934270c7b349bcb547865"}}