{"buggy_code": ["<?php\n/**\n * Layout Assistance\n *\n * @package   SellMedia\n * @author    Thad Allender <support@graphpaperpress.com>\n * @license   GPL-2.0+\n * @link      http://graphpaperpress.com\n * @copyright 2014 Graph Paper Press\n */\n\n/**\n * Plugin class for standardizing archive and search layouts for Sell Media in themes.\n *\n * @package SellMediaLayouts\n * @author  Thad Allender <support@graphpaperpress.com>\n */\nclass SellMediaLayouts {\n\n\t/**\n\t *\n\t * Settings\n\t *\n\t *\n\t * Retrieves the settings for Sell Media.\n\t *\n\t * @since    0.0.1\n\t *\n\t * @var      string\n\t */\n\tprivate $settings = null;\n\n\t/**\n\t * Initialize the plugin by setting localization and loading public scripts\n\t * and styles.\n\t *\n\t * @since     0.0.1\n\t */\n\tpublic function __construct() {\n\n\t\t// Settings\n\t\t$this->settings = sell_media_get_plugin_options();\n\n\t\t// Post class filter\n\t\tadd_filter( 'post_class', array( $this, 'post_class' ) );\n\n\t\t// Body class filter\n\t\tadd_filter( 'body_class', array( $this, 'body_class' ) );\n\n\t\t// Menu class filter\n\t\tadd_filter( 'nav_menu_css_class', array( $this, 'nav_menu_css_class' ), 10, 2 );\n\n\t\t// Grid item container class\n\t\tadd_filter( 'sell_media_grid_item_container_class', array( $this, 'grid_container_class' ), 10, 1 );\n\n\t\t// Grid item class\n\t\tadd_filter( 'sell_media_grid_item_class', array( $this, 'grid_class' ), 10, 3 );\n\n\t\t// Before the content\n\t\tadd_filter( 'the_content', array( $this, 'before_content' ) );\n\n\t\t// After the content\n\t\tadd_filter( 'the_content', array( $this, 'after_content' ) );\n\n\t\t// Remove prepended attachment from attachment template in core WP\n\t\tadd_filter( 'prepend_attachment', array( $this, 'remove_prepend_attachment' ) );\n\n\t\t// Content loop\n\t\tadd_filter( 'sell_media_content_loop',  array( $this, 'content_loop' ), 10, 3 );\n\n\t}\n\n\t/**\n\t * Post class filter.\n\t * Adds a new post class so we can style individual grids\n\t *\n\t * @since    0.0.1\n\t *\n\t * @return    html\n\t */\n\tpublic function post_class( $classes ) {\n\t\tglobal $post;\n\t\tif ( is_post_type_archive( 'sell_media_item' ) ) {\n\t\t\t$classes[] = apply_filters( 'sell_media_grid_item_class', 'sell-media-grid-item', $post->ID );\n\t\t}\n\n\t\tforeach ( ( get_the_category( $post->ID ) ) as $category ) {\n\t\t\t$classes[] = $category->category_nicename;\n\t\t}\n\t\treturn $classes;\n\t}\n\n\t/**\n\t * Body class filter\n\t * Add body classes to assist layouts\n\t *\n\t * @since    0.0.1\n\t *\n\t * @return    html\n\t */\n\tpublic function body_class( $classes ) {\n\t\tglobal $post;\n\n\t\tif ( empty( $post ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Pages assigned with shortcode\n\t\t$pages = sell_media_get_pages_array();\n\t\tforeach ( $pages as $page ) {\n\t\t\t$setting = $page . '_page';\n\t\t\tif ( isset( $this->settings->$setting ) && $post->ID === $this->settings->$setting ) {\n\t\t\t\t$classes[] = 'sell-media-page';\n\t\t\t\t$classes[] = 'sell-media-' . str_replace( '_', '-', $setting );\n\t\t\t}\n\t\t}\n\n\t\t// Shortcodes\n\t\t$shortcodes = array( 'sell_media_thanks', 'sell_media_searchform', 'sell_media_item', 'sell_media_all_items', 'sell_media_checkout', 'sell_media_download_list', 'sell_media_price_group', 'sell_media_list_all_collections', 'sell_media_login_form' );\n\t\tforeach ( $shortcodes as $shortcode ) {\n\t\t\tif ( isset( $post->post_content ) && has_shortcode( $post->post_content, $shortcode ) ) {\n\t\t\t\t$classes[] = 'sell-media-page';\n\t\t\t}\n\t\t}\n\n\t\t// All Sell Media pages\n\t\tif ( ! empty( $post->ID ) && 'sell_media_item' === get_post_type( $post->ID ) ) {\n\t\t\t$classes[] = 'sell-media-page';\n\t\t}\n\n\t\t// Layout\n\t\tif ( isset( $this->settings->layout ) ) {\n\t\t\t$classes[] = $this->settings->layout;\n\t\t}\n\n\t\t// Gallery\n\t\tif ( is_singular( 'sell_media_item' ) && sell_media_has_multiple_attachments( $post->ID ) ) {\n\t\t\t$classes[] = 'sell-media-gallery-page';\n\t\t}\n\n\t\t// Theme\n\t\t$theme = wp_get_theme();\n\t\t$classes[] = 'theme-' . sanitize_title_with_dashes( $theme->get( 'Name' ) );\n\n\t\treturn $classes;\n\t}\n\n\t/**\n\t * Menu class filter\n\t * Add classes to menu items\n\t *\n\t * @since    0.0.1\n\t *\n\t * @return    html\n\t */\n\tpublic function nav_menu_css_class( $classes, $item ) {\n\n\t\tif ( 'page' === $item->object ) {\n\t\t\tif ( isset( $this->settings->lightbox_page ) && $this->settings->lightbox_page === $item->object_id ) {\n\t\t\t\t$classes[] = 'lightbox-menu';\n\t\t\t}\n\t\t\tif ( isset( $this->settings->checkout_page ) && $this->settings->checkout_page === $item->object_id ) {\n\t\t\t\tif ( in_array( 'total', $item->classes, true ) ) {\n\t\t\t\t\t$classes[] = 'checkout-total';\n\t\t\t\t} else {\n\t\t\t\t\t$classes[] = 'checkout-qty';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $classes;\n\t}\n\n\t/**\n\t * Filter the item container class\n\t * Needed to create the masonry layout\n\t *\n\t * @since  2.1.3\n\t * @return string css class\n\t */\n\tpublic function grid_container_class() {\n\t\t$class = 'sell-media-grid-item-container';\n\n\t\tif ( 'sell-media-masonry' === $this->settings->thumbnail_layout ) {\n\t\t\t$class = 'sell-media-grid-item-masonry-container';\n\t\t}\n\n\t\tif ( 'sell-media-horizontal-masonry' === $this->settings->thumbnail_layout ) {\n\t\t\t$class = 'horizontal-masonry-columns';\n\t\t\t// $class = 'sell-media-grid-item-horizontal-masonry-container';\n\t\t}\n\n\t\treturn $class;\n\t}\n\n\t/**\n\t * Filter the grid item class\n\t * Creates a 1, 2, 3, 4, 5 column or masonry layout\n\t *\n\t * @since  2.1.3\n\t * @return string css class\n\t */\n\tpublic function grid_class( $class = '', $post_id = '', $args = '' ) {\n\t\tif ( isset( $args['context'] ) && 'widget' == $args['context'] ) {\n\t\t\treturn $class . ' sell-media-three-col';\n\t\t}\n\n\t\tif ( ! empty( $this->settings->thumbnail_layout ) ) {\n\t\t\treturn $class . ' ' . $this->settings->thumbnail_layout;\n\t\t}\n\t}\n\n\t/**\n\t * Before the content on sell media and attachment pages\n\t */\n\tpublic function before_content( $content ) {\n\n\t\tglobal $post;\n\t\t$post_id = $post->ID;\n\n\t\t// show on single sell media pages\n\t\tif ( is_singular( 'sell_media_item' ) || sell_media_attachment( $post_id ) || sell_media_is_search() ) {\n\n\t\t\t// bail if it's password protected item\n\t\t\tif ( post_password_required( $post ) || ( isset( $post->post_parent ) && post_password_required( $post->post_parent ) ) ) {\n\t\t\t\treturn $content;\n\t\t\t}\n\n\t\t\t$has_multiple_attachments = sell_media_has_multiple_attachments( $post_id );\n\t\t\t$wrap = ( ! $has_multiple_attachments || 'attachment' === get_post_type( $post_id ) ) ? true : false;\n\t\t\t$new_content = '';\n\n\t\t\t// only wrap content if a single image/media is being viewed\n\t\t\tif ( $wrap ) {\n\t\t\t\t$new_content .= '<div class=\"sell-media-content\">';\n\t\t\t}\n\n\t\t\t$new_content .= sell_media_breadcrumbs();\n\t\t\t$new_content .= sell_media_get_media();\n\t\t\t$new_content .= $content;\n\n\t\t\t// only wrap content if a single image/media is being viewed\n\t\t\tif ( $wrap ) {\n\t\t\t\t$new_content .= '</div>';\n\t\t\t}\n\n\t\t\t$content = $new_content;\n\n\t\t\t// set the post views, used for popular query\n\t\t\tsell_media_set_post_views( $post_id );\n\t\t}\n\n\t\treturn apply_filters( 'sell_media_content', $content );\n\n\t}\n\n\t/**\n\t * After content filter\n\t *\n\t * Append buy button and add action to append more stuff (lightbox, keywords, etc)\n\t *\n\t * @since 1.9.2\n\t * @param int $post_id Item ID\n\t * @return void\n\t */\n\tpublic function after_content( $content ) {\n\n\t\tglobal $post;\n\t\t$post_id = $post->ID;\n\n\t\tif ( post_password_required( $post ) || ( isset( $post->post_parent ) && post_password_required( $post->post_parent ) ) ) {\n\t\t\treturn $content;\n\t\t}\n\n\t\t// only show on single sell media and attachment pages\n\t\tif ( is_main_query() && is_singular( 'sell_media_item' ) && ! sell_media_has_multiple_attachments( $post_id ) || sell_media_attachment( $post_id ) ) {\n\n\t\t\tif ( is_singular( 'attachment' ) ) {\n\t\t\t\t$attachment_id = $post_id;\n\t\t\t\t$post_id = get_post_meta( $post_id, '_sell_media_for_sale_product_id', true );\n\t\t\t} else {\n\t\t\t\t$attachment_id = sell_media_get_attachment_id( $post_id );\n\t\t\t}\n\n\t\t\tob_start();\n\t\t\t$enable_ecommerce = apply_filters( 'sell_media_enable_ecommerce', true, $post_id, $attachment_id );\n\t\t\tif ( $enable_ecommerce ) {\n\t\t\t\techo '<div class=\"sell-media-meta\">';\n\t\t\t\tdo_action( 'sell_media_above_buy_button', $post_id, $attachment_id );\n\t\t\t\tdo_action( 'sell_media_add_to_cart_fields', $post_id, $attachment_id );\n\t\t\t\tdo_action( 'sell_media_below_buy_button', $post_id, $attachment_id );\n\t\t\t\techo '</div>';\n\t\t\t}\n\n\t\t\techo do_action( 'sell_media_below_content', $post_id, $attachment_id );\n\n\t\t\t$content .= ob_get_contents();\n\t\t\tob_end_clean();\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Remove the prepended attachment from WordPress core attachment template\n\t * since we're already appending it via the_content filter\n\t * @return\n\t */\n\tfunction remove_prepend_attachment( $p ) {\n\n\t\tglobal $post;\n\n\t\tif ( sell_media_attachment( $post->ID ) ) {\n\t\t\t$p = '';\n\t\t}\n\n\t\treturn $p;\n\t}\n\n\t/**\n\t * Main content loop used in all themes\n\t * @return string html\n\t */\n\tfunction content_loop( $post_id, $i, $args = array() ) {\n\n\t\t$original_id = $post_id;\n\t\tif ( post_password_required( $original_id ) && sell_media_is_search() ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( 'attachment' === get_post_type( $post_id ) ) {\n\t\t\t$attachment_id = $post_id; // always and attachment\n\t\t\t$post_id = get_post_meta( $attachment_id, $key = '_sell_media_for_sale_product_id', true ); // always a sell_media_item\n\t\t} else {\n\t\t\t$attachment_id = sell_media_get_attachment_id( $post_id ); // always an attachment\n\t\t}\n\n\t\t$class = apply_filters( 'sell_media_grid_item_class', 'sell-media-grid-item', $post_id, $args );\n\t\tif ( ! sell_media_has_multiple_attachments( $post_id ) ) {\n\t\t\t$class .= ' sell-media-grid-single-item';\n\t\t}\n\t\t$custom_style = '';\n\t\tif ( 'sell-media-horizontal-masonry' === $this->settings->thumbnail_layout ) {\n\t\t\t$class = 'horizontal-masonry-column overlay-container ';\n\t\t\t\t\t\t\n\t\t\t$image_data     = wp_get_attachment_image_src( $attachment_id, 'medium' );\n\t\t\t$image_width    = $image_data[1];\n\t\t\t$image_height   = $image_data[2];\n\t\t\t$width          = $image_width * 250 / $image_height;\n\t\t\t$padding_bottom = $image_height / $image_width * 100;\n\t\t\terror_log( 'img width ' . $image_width );\n\t\t\terror_log( 'img height ' . $image_height );\n\n\t\t}\n\t\t$html  = '<div id=\"sell-media-' . $original_id . '\" class=\"' . $class . '\" style=\"width:' . $width . 'px; flex-grow:' . $width . '; \" >';\n\n\t\t$html .= '<a href=\"' . esc_url( get_permalink( $original_id ) ) . '\" ' . sell_media_link_attributes( $original_id ) . ' class=\"sell-media-item\">';\n\t\tif ( 'sell-media-horizontal-masonry' === $this->settings->thumbnail_layout ) {\n\t\t\t$html .= '<i style=\"padding-bottom:' . $padding_bottom . '%;\" ></i>';\n\t\t}\n\t\t// Show titles?\n\t\tif ( isset( $this->settings->titles ) && 0 != $this->settings->titles && is_main_query() ) {\n\t\t\t$html .= '<h2 class=\"sell-media-entry-title\">' . get_the_title( $original_id ) . '</h2>';\n\t\t}\n\n\t\t$html .= sell_media_item_icon( $original_id, apply_filters( 'sell_media_thumbnail', 'medium' ), false );\n\n\t\t$enable_ecommerce = apply_filters( 'sell_media_enable_ecommerce', true, $post_id, $attachment_id );\n\n\t\t// Show quick view?\n\t\tif ( isset( $this->settings->quick_view ) && 0 != $this->settings->quick_view && is_main_query() ) {\n\t\t\tif ( sell_media_has_multiple_attachments( $post_id ) && ( is_tax( array( 'collection' ) ) || is_post_type_archive( 'sell_media_item' ) ) ) {\n\t\t\t\t$html .= '<div class=\"sell-media-view-gallery\">' . apply_filters( 'sell_media_view_gallery_text', __( 'View Gallery', 'sell_media' ) ) . '</div>';\n\t\t\t} elseif ( $enable_ecommerce ) {\n\t\t\t\t$html .= '<div class=\"sell-media-quick-view\" data-product-id=\"' . esc_attr( $post_id ) . '\" data-attachment-id=\"' . esc_attr( $attachment_id ) . '\">' . apply_filters( 'sell_media_quick_view_text', __( 'Quick View', 'sell_media' ), $post_id, $attachment_id ) . '</div>';\n\t\t\t}\n\t\t}\n\t\t$html .= '</a>';\n\t\t$html .= '</div>';\n\n\t\treturn apply_filters( 'sell_media_filter_content_loop', $html, $original_id, $i );\n\t}\n\n}\n", "<?php\n\n/**\n * Search Class\n *\n * @package Sell Media\n * @author Thad Allender <support@graphpaperpress.com>\n */\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nclass SellMediaSearch {\n\n\tprivate $settings;\n\n\t/**\n\t * Init\n\t */\n\tpublic function __construct() {\n\n\t\t// Restrict in admin area.\n\t\tif ( is_admin() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->settings = sell_media_get_plugin_options();\n\n\t\t// Add a media search form shortcode\n\t\tadd_shortcode( 'sell_media_search', array( $this, 'form' ) );\n\n\t\t// Legacy add a media search form shortcode\n\t\tadd_shortcode( 'sell_media_searchform', array( $this, 'form' ) );\n\n\t\t// Add custom search query vars\n\t\tadd_filter( 'query_vars', array( $this, 'add_query_vars' ) );\n\t}\n\n\n\t/**\n\t * Add custom search query vars\n\t *\n\t * @since 2.4.2\n\t */\n\tfunction add_query_vars( $vars ) {\n\t\t$vars[] = 'search_query';\n\t\t$vars[] = 'search_file_type';\n\t\treturn $vars;\n\t}\n\n\n\t/**\n\t * Search form\n\t *\n\t * @since 1.8.7\n\t */\n\tpublic function form( $url = null, $used = null ) {\n\n\t\t$settings = sell_media_get_plugin_options();\n\t\t$html = '';\n\n\t\t// Show a message to admins if they don't have search page set in settings.\n\t\tif ( current_user_can( 'administrator' ) && empty( $settings->search_page ) ) {\n\t\t\t$html .= esc_html__( 'For search to work, you must assign your Search Page in Sell Media -> Settings.', 'sell_media' );\n\t\t\treturn $html;\n\t\t}\n\n\t\t// Get the search term(s)\n\t\t$search_term = get_query_var( 'search_query' );\n\n\t\t// Get the file type\n\t\t$search_file_type = get_query_var( 'search_file_type' );\n\n\t\t// only use this method if it hasn't already been used on the page\n\t\tstatic $used;\n\t\tif ( ! isset( $used ) ) {\n\t\t\t$used = true;\n\n\t\t\t$html .= '<div class=\"sell-media-search\">';\n\t\t\t$html .= '<form role=\"search\" method=\"get\" id=\"sell-media-search-form\" class=\"sell-media-search-form\" action=\"' . esc_url( get_permalink( $settings->search_page ) ) . '\">';\n\t\t\t$html .= '<div class=\"sell-media-search-inner cf\">';\n\n\t\t\t// Visible search options wrapper\n\t\t\t$html .= '<div id=\"sell-media-search-visible\" class=\"sell-media-search-visible cf\">';\n\n\t\t\t// Input field\n\t\t\t$html .= '<div id=\"sell-media-search-query\" class=\"sell-media-search-field sell-media-search-query\">';\n\t\t\t$html .= '<input type=\"text\" value=\"' . $search_term . '\" name=\"search_query\" id=\"sell-media-search-text\" class=\"sell-media-search-text\" placeholder=\"' . apply_filters( 'sell_media_search_placeholder', sprintf( __( 'Search for %1$s (comma separated)', 'sell_media' ), empty( $settings->post_type_slug ) ? 'keywords' : $settings->post_type_slug ) ) . '\"/>';\n\t\t\t$html .= '</div>';\n\n\t\t\t// Submit button\n\t\t\t$html .= '<div id=\"sell-media-search-submit\" class=\"sell-media-search-field sell-media-search-submit\">';\n\t\t\t$html .= '<input type=\"submit\" id=\"sell-media-search-submit-button\" class=\"sell-media-search-submit-button\" value=\"' . apply_filters( 'sell_media_search_button', __( 'Search', 'sell_media' ) ) . '\" />';\n\t\t\t$html .= '</div>';\n\n\t\t\t$html .= '</div>';\n\n\t\t\t// Hidden search options wrapper\n\t\t\t$html .= '<div id=\"sell-media-search-hidden\" class=\"sell-media-search-hidden cf\">';\n\n\t\t\t// File type field\n\t\t\t$html .= '<div id=\"sell-media-search-file-type\" class=\"sell-media-search-field sell-media-search-file-type\">';\n\t\t\t$html .= '<label for=\"search_file_type\">' . esc_html__( 'File Type', 'sell_media' ) . '</label>';\n\t\t\t$html .= '<select name=\"search_file_type\">';\n\t\t\t$html .= '<option value=\"\">' . esc_html__( 'All', 'sell_media' ) . '</option>';\n\t\t\t$mimes = array( 'image', 'video', 'audio' );\n\t\t\tforeach ( $mimes as $mime ) {\n\t\t\t\t$selected = ( $search_file_type === $mime ) ? 'selected' : '';\n\t\t\t\t$html .= '<option value=\"' . $mime . '\" ' . $selected . '>';\n\t\t\t\t$html .= ucfirst( $mime );\n\t\t\t\t$html .= '</option>';\n\t\t\t}\n\n\t\t\t$html .= '</select>';\n\t\t\t$html .= '</div>';\n\n\t\t\t// Hidden search options wrapper\n\t\t\t$html .= '</div>';\n\n\t\t\t$html .= '</div>';\n\t\t\t$html .= '</form>';\n\t\t\t$html .= '</div>';\n\n\t\t}\n\n\t\t// only run the query on the actual search results page.\n\t\tif ( is_page( $settings->search_page ) && in_the_loop() ) {\n\n\t\t\t// Find comma-separated search terms and format into an array\n\t\t\t$search_term_cleaned = preg_replace( '/\\s*,\\s*/', ',', $search_term );\n\t\t\t$search_terms = str_getcsv( $search_term_cleaned, ',' );\n\n\t\t\t// Exclude negative keywords in search query like \"-cow\"\n\t\t\t$negative_search_terms = '';\n\t\t\t$negative_search_terms = preg_grep( '/\\B-[^\\B]+/', $search_terms );\n\t\t\t$negative_search_terms = preg_replace( '/[-]/', '', $negative_search_terms );\n\n\t\t\t// now remove negative search terms from search terms\n\t\t\t$search_terms = array_diff( $search_terms, $negative_search_terms );\n\t\t\t$search_terms = array_filter( $search_terms );\n\n\t\t\t// Get the file/mimetype\n\t\t\t$mime_type = $this->get_mimetype( $search_file_type );\n\n\t\t\t// Current pagination\n\t\t\t$paged = ( get_query_var( 'paged' ) ) ? get_query_var( 'paged' ) : 1;\n\n\t\t\tif ( ! empty( $settings->search_relation ) && 'and' === $settings->search_relation ) {\n\t\t\t\t$tax_array = array();\n\t\t\t\tforeach ( $search_terms as $s ) {\n\t\t\t\t\t$array = array(\n\t\t\t\t\t\t'taxonomy' => 'keywords',\n\t\t\t\t\t\t'field'    => 'name',\n\t\t\t\t\t\t'terms'    => $s,\n\t\t\t\t\t);\n\t\t\t\t\t$tax_array[] = $array;\n\t\t\t\t}\n\t\t\t\tforeach ( $negative_search_terms as $n ) {\n\t\t\t\t\t$array = array(\n\t\t\t\t\t\t'taxonomy' => 'keywords',\n\t\t\t\t\t\t'field'    => 'name',\n\t\t\t\t\t\t'terms'    => array( $n ),\n\t\t\t\t\t\t'operator' => 'NOT IN'\n\t\t\t\t\t);\n\t\t\t\t\t$tax_array[] = $array;\n\t\t\t\t}\n\n\t\t\t\t$tax_query = array(\n\t\t\t\t\t'relation' => 'AND',\n\t\t\t\t\t$tax_array\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Add original full keyword to the search terms array\n\t\t\t\t// This ensures that multiple word keyword search works\n\t\t\t\t$one_big_keyword = str_replace( ',', ' ', $search_term );\n\t\t\t\t$search_terms[] .= $one_big_keyword;\n\t\t\t\t$tax_query = array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'taxonomy' => 'keywords',\n\t\t\t\t\t\t'field'    => 'name',\n\t\t\t\t\t\t'terms'    => $search_terms,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// The Query\n\t\t\t$args = array(\n\t\t\t\t'post_type' => 'attachment',\n\t\t\t\t'paged'\t\t=> $paged,\n\t\t\t\t'post_status' => array( 'publish', 'inherit' ),\n\t\t\t\t'post_mime_type' => $mime_type,\n\t\t\t\t'post_parent__in' => sell_media_ids(),\n\t\t\t\t'tax_query' => $tax_query\n\t\t\t);\n\t\t\t$args = apply_filters( 'sell_media_search_args', $args );\n\t\t\t$search_query = new WP_Query( $args );\n\t\t\t$i = 0;\n\n\t\t\t// The Loop\n\t\t\tif ( $search_query->have_posts() ) {\n\n\t\t\t\t$html .= '<p class=\"sell-media-search-results-text\">' . sprintf( esc_html__( 'We found %1$s results for \"%2$s.\"', 'sell_media' ), $search_query->found_posts, $search_term ) . '</p>';\n\n\t\t\t\t// hook for related keywords, etc.\n\t\t\t\t$html .= sell_media_format_related_search_results( $search_terms );\n\n\t\t\t\t$html .= $this->search_help();\n\n\t\t\t\t$html .= '<div id=\"sell-media-search-results\" class=\"sell-media\">';\n\t\t\t\t$html .= '<div class=\"' . apply_filters( 'sell_media_grid_item_container_class', 'sell-media-grid-item-container' ) . '\">';\n\n\t\t\t\twhile ( $search_query->have_posts() ) {\n\t\t\t\t\t$search_query->the_post();\n\n\t\t\t\t\t$post_id = get_the_ID();\n\t\t\t\t\t$parent_id = get_post_meta( $post_id, $key = '_sell_media_for_sale_product_id', true );\n\n\t\t\t\t\t$html .= '<div id=\"sell-media-' . $post_id . '\" class=\"' . apply_filters( 'sell_media_grid_item_class', 'sell-media-grid-item', $parent_id ) . ' sell-media-grid-single-item\">';\n\t\t\t\t\t$html .= '<a href=\"' . esc_url( get_permalink() ) . '\" ' . sell_media_link_attributes( $post_id ) . ' class=\"sell-media-item\">';\n\n\t\t\t\t\tif ( ! empty( $settings->titles ) ) {\n\t\t\t\t\t\t$html .= '<h2 class=\"entry-title\">' . get_the_title() . '</h2>';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( wp_get_attachment_image( $post_id, apply_filters( 'sell_media_thumbnail', 'medium' ) ) ) {\n\n\t\t\t\t\t\t$html .= wp_get_attachment_image( $post_id, apply_filters( 'sell_media_thumbnail', 'medium' ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$html .= sell_media_item_icon( $parent_id, apply_filters( 'sell_media_thumbnail', 'medium' ), false );\n\t\t\t\t\t}\n\t\t\t\t\t$html .= '<div class=\"sell-media-quick-view\" data-product-id=\"' . esc_attr( $parent_id ) . '\" data-attachment-id=\"' . esc_attr( $post_id ) . '\">' . apply_filters( 'sell_media_quick_view_text', __( 'Quick View', 'sell_media' ), $parent_id, $post_id ) . '</div>';\n\t\t\t\t\t$html .= '</a>';\n\t\t\t\t\t$html .= '</div>';\n\t\t\t\t}\n\t\t\t\t$html .= '</div>';\n\t\t\t\t$html .= '</div>';\n\t\t\t\t$html .= sell_media_pagination_filter( $search_query->max_num_pages );\n\t\t\t\t$text = esc_html__( 'Explore more from our store', 'sell_media' );\n\t\t\t\t$html .= '<p class=\"sell-media-search-results-text\">' . $text . '</p>';\n\t\t\t\t$html .= do_shortcode( '[sell_media_filters]' );\n\n\t\t\t} else {\n\n\t\t\t\tif ( $search_terms ) {\n\t\t\t\t\t$text = sprintf( __( 'Sorry, no results for \"%1$s.\"', 'sell_media' ), $search_term );\n\t\t\t\t\t$html .= $this->search_help();\n\t\t\t\t} else {\n\t\t\t\t\t$html .= $this->search_help();\n\t\t\t\t}\n\t\t\t\t$html .= '<p class=\"sell-media-search-results-text\">' . $text . '</p>';\n\t\t\t\t$html .= do_shortcode( '[sell_media_filters]' );\n\t\t\t}\n\n\t\t\t/* Restore original Post Data */\n\t\t\twp_reset_postdata();\n\t\t\t$i = 0;\n\n\t\t} // end search results page check\n\n\t\treturn apply_filters( 'sell_media_search_results', $html );\n\t}\n\n\tpublic function search_help() {\n\n\t\t$html  = '<div class=\"sell-media-search-help\">';\n\t\t$html .= '<h6>' . esc_html__( 'Search Tips', 'sell_media' ) . '</h6>';\n\t\t$html .= '<ul>';\n\t\t$html .= '<li>' . esc_html__( 'Separate keywords with a comma.', 'sell_media' ) . '</li>';\n\t\t$html .= '<li>' . esc_html__( 'Use fewer keywords to expand search results.', 'sell_media' ) . '</li>';\n\t\t$html .= '<li>' . esc_html__( 'Use negative keywords (like -dogs) to exclude dogs from search results.', 'sell_media' ) . '</li>';\n\t\t$html .= '</ul>';\n\t\t$html .= '</div>';\n\n\t\treturn $html;\n\t}\n\n\t/**\n\t * Get the select value of the filetype field and conver it into a WP mimtype for WP_Query\n\t *\n\t * @param  string \t\tThe filetype (image, video, audio)\n\t * @return array \t\tThe WP mimetype format for each filetype\n\t */\n\tprivate function get_mimetype( $filetype ) {\n\t\tif ( 'image' === $filetype ) {\n\t\t\t$mime = array( 'image/jpeg', 'image/gif', 'image/png', 'image/bmp', 'image/tiff', 'image/x-icon' );\n\t\t} elseif ( 'video' === $filetype ) {\n\t\t\t$mime = array( 'video/x-ms-asf', 'video/x-ms-wmv', 'video/x-ms-wmx', 'video/x-ms-wm', 'video/avi', 'video/divx', 'video/x-flv', 'video/quicktime', 'video/mpeg', 'video/mp4', 'video/ogg', 'video/webm', 'video/x-matroska' );\n\t\t} elseif ( 'audio' === $filetype ) {\n\t\t\t$mime = array( 'audio/mpeg', 'audio/x-realaudio', 'audio/wav', 'audio/ogg', 'audio/midi', 'audio/x-ms-wma', 'audio/x-ms-wax', 'audio/x-matroska' );\n\t\t} else {\n\t\t\t$mime = '';\n\t\t}\n\n\t\treturn $mime;\n\t}\n\n\n\n}\n", "<?php\n\n/**\n * Helper Functions\n *\n * @package Sell Media\n * @author Thad Allender <support@graphpaperpress.com>\n */\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Template Redirect\n * @since 1.0.4\n */\nfunction sell_media_template_redirect( $original_template ) {\n\n\tglobal $post;\n\n\t$post_type = array( 'sell_media_item', 'attachment' );\n\t$sell_media_taxonomies = get_object_taxonomies( $post_type );\n\t$sm_archive_template = SELL_MEDIA_PLUGIN_DIR . '/themes/archive.php';\n\n\t/**\n\t * Archive -- Check if this is an archive page AND post type is sell media\n\t */\n\tif ( is_post_type_archive( $post_type ) || is_tax( $sell_media_taxonomies ) ) {\n\t\t// allow users to override SM archive template by adding their own to their theme\n\t\tif ( $overridden_template = locate_template( 'archive-sell-media.php' ) ) {\n\t\t\t$template = $overridden_template;\n\t\t} elseif ( file_exists( $sm_archive_template ) ) {\n\t\t\t$template = $sm_archive_template;\n\t\t} else {\n\t\t\t$template = $original_template;\n\t\t}\n\t} elseif ( ! empty( $post ) && sell_media_attachment( $post->ID ) ) {\n\t\t// sell media attachments should use single.php, not attachment.php\n\t\t// not all attachment.php templates contain the_content\n\t\t// which we modify heavily using filters.\n\t\t$template = locate_template( 'single.php' );\n\t} else {\n\t\t$template = $original_template;\n\t}\n\n\treturn $template;\n}\nadd_filter( 'template_include', 'sell_media_template_redirect', 6 );\n\n/**\n * Loads a template from a specified path\n *\n * @package Ajax\n * @uses load_template()\n * @since 0.1\n */\nfunction sell_media_load_template() {\n\n\tif ( $overridden_template = locate_template( 'cart.php' ) ) {\n\t\tload_template( apply_filters( 'sell_media_cart_template', $overridden_template ) );\n\t} else {\n\t\tload_template( apply_filters( 'sell_media_cart_template', SELL_MEDIA_PLUGIN_DIR . '/themes/cart.php' ) );\n\t}\n\tdie();\n}\nadd_action( 'wp_ajax_nopriv_sell_media_load_template', 'sell_media_load_template' );\nadd_action( 'wp_ajax_sell_media_load_template', 'sell_media_load_template' );\n\n\n/**\n * Redirect admins to the WP dashboard and other users Sell Media Dashboard\n *\n * @package Sell Media\n * @since 1.4.6\n */\nfunction sell_media_redirect_login_dashboard( $redirect_to, $request, $user ) {\n\tif ( isset( $user->roles ) && is_array( $user->roles ) ) {\n\t\t// check for customers\n\t\tif ( in_array( 'sell_media_customer', $user->roles ) ) {\n\t\t\t$settings = sell_media_get_plugin_options();\n\t\t\t// redirect them to the dashboard\n\t\t\t$redirect_to = get_permalink( $settings->dashboard_page );\n\t\t}\n\t}\n\treturn $redirect_to;\n}\nadd_filter( 'login_redirect', 'sell_media_redirect_login_dashboard', 10, 3 );\n\n/**\n * An array of pages required for plugin setup.\n * No need to define this in multiple places.\n *\n * @return an array of pages required for plugin setup.\n */\nfunction sell_media_get_pages_array() {\n\t$pages = array( 'checkout', 'thanks', 'dashboard', 'login', 'search', 'lightbox' );\n\n\treturn $pages;\n}\n\n/**\n * Checks if on sell media gallery page\n *\n * @return boolean true/false\n * @since 2.0.1\n */\nfunction sell_media_page() {\n\tglobal $post;\n\t$settings = sell_media_get_plugin_options();\n\n\tif ( $post\n\t&& ( 'sell_media_item' === get_post_type( $post->ID )\n\tor sell_media_attachment( $post->ID )\n\tor is_tax( 'collection' )\n\tor is_tax( 'keywords' )\n\tor is_tax( 'creator' )\n\tor ( isset( $settings->search_page ) && is_page( $settings->search_page ) ) ) ) {\n\t\treturn true;\n\t}\n}\n\n/**\n * Checks if attachment is for sale\n *\n * @var  $post_id the post or attachment id\n * @return  boolean true if has post meta (the product id)\n */\nfunction sell_media_attachment( $post_id = null ) {\n\n\tglobal $post;\n\t$sale_product_id = get_post_meta( $post->ID, $key = '_sell_media_for_sale_product_id' );\n\tif ( is_singular( 'attachment' ) && ! empty( $sale_product_id ) ) {\n\t\treturn true;\n\t}\n}\n\n/**\n * Builds html select field\n *\n * @since 0.1\n */\nfunction sell_media_build_options( $taxonomy = null ) {\n\n\tif ( is_array( $taxonomy ) ) {\n\t\textract( $taxonomy ); }\n\n\tif ( ! isset( $label ) ) {\n\t\t$label = $taxonomy; }\n\n\t// @todo need to merge\n\t$defaults = array(\n\t\t'value' => 'term_id',\n\t);\n\n\t// white list\n\tif ( empty( $prepend ) ) {\n\t\t$prepend = null; }\n\n\tif ( empty( $current_term ) ) {\n\t\t$current_term = null; }\n\n\textract( $defaults );\n\n\t/** All Terms */\n\t$args = array(\n\t\t'orderby' => 'id',\n\t\t'hide_empty' => false,\n\t\t );\n\n\t$terms = null;\n\n\tif ( isset( $post_id ) ) {\n\t\t$terms = wp_get_post_terms( $post_id, $taxonomy );\n\t} else {\n\t\t$terms = get_terms( $taxonomy, $args );\n\t}\n\n\t?>\n\t<?php if ( $terms ) : ?>\n\t\t<?php do_action( 'sell_media_build_options_before' ); ?>\n\t\t<?php foreach ( $terms as $term ) : ?>\n\t\t\t<?php $price = str_replace( '%', '', get_term_meta( $term->term_id, 'markup', true ) ); ?>\n\t\t\t<option\n\t\t\t\tvalue=\"<?php echo $prepend; ?><?php echo $term->$value; ?>\"\n\t\t\t\tclass=\"taxonomy-<?php echo $taxonomy; ?> term-<?php echo $term->slug; ?> <?php echo $taxonomy; ?>-<?php echo $term->term_id; ?>\"\n\t\t\t\tdata-value=\"<?php echo $term->slug; ?>\"\n\t\t\t\tdata-taxonomy=\"<?php echo $taxonomy; ?>\"\n\t\t\t\tdata-name=\"<?php echo $term->name; ?>\"\n\t\t\t\tdata-price=\"<?php echo $price; ?>\"\n\t\t\t\tid=\"<?php echo $taxonomy; ?>-<?php echo $term->slug; ?>\"\n\t\t\t\ttitle=\"<?php echo $term->description; ?>\"\n\t\t\t\tname=\"<?php echo $taxonomy; ?>\"\n\t\t\t\t>\n\t\t\t<?php echo $term->name; ?>\n\t\t</option>\n\t\t<?php endforeach; ?>\n\t\t</optgroup>\n\t\t<?php do_action( 'sell_media_build_options_after' ); ?>\n\t<?php endif; ?>\n<?php }\n\n\n/**\n * Builds html input field (radio or checkbox)\n *\n * @since 0.1\n */\nfunction sell_media_build_input( $taxonomy = null ) {\n\n\tif ( is_array( $taxonomy ) ) {\n\t\textract( $taxonomy ); }\n\n\tif ( ! isset( $label ) ) {\n\t\t$label = $taxonomy; }\n\n\t// @todo need to merge\n\t$defaults = array(\n\t\t'value' => 'term_id',\n\t);\n\n\t// white list\n\tif ( empty( $prepend ) ) {\n\t\t$prepend = null; }\n\n\tif ( empty( $current_term ) ) {\n\t\t$current_term = null; }\n\n\textract( $defaults );\n\n\t/** All Terms */\n\t$args = array(\n\t\t'orderby' => 'id',\n\t\t'hide_empty' => false,\n\t\t );\n\n\t$terms = null;\n\n\tif ( isset( $post_id ) ) {\n\t\t$terms = wp_get_post_terms( $post_id, $taxonomy );\n\t} else {\n\t\t$terms = get_terms( $taxonomy, $args );\n\t}\n\n\t?>\n\t<?php if ( $terms ) : ?>\n\t\t<?php do_action( 'sell_media_build_input_before' ); ?>\n\t\t<?php foreach ( $terms as $term ) : ?>\n\t\t\t<?php $price = get_term_meta( $term->term_id, 'markup', true ); ?>\n\t\t\t<input\n\t\t\t\tvalue=\"<?php echo $prepend; ?><?php echo $term->$value; ?>\"\n\t\t\t\tclass=\"taxonomy-<?php echo $taxonomy; ?> term-<?php echo $term->slug; ?> <?php echo $taxonomy; ?>-<?php echo $term->term_id; ?>\"\n\t\t\t\tdata-value=\"<?php echo $term->slug; ?>\"\n\t\t\t\tdata-taxonomy=\"<?php echo $taxonomy; ?>\"\n\t\t\t\tdata-name=\"<?php echo $term->name; ?>\"\n\t\t\t\tdata-price=\"<?php echo $price; ?>\"\n\t\t\t\tid=\"<?php echo $taxonomy; ?>-<?php echo $term->slug; ?>\"\n\t\t\t\tname=\"<?php echo $taxonomy; ?>\"\n\t\t\t\ttype=\"<?php echo $type; ?>\"\n\t\t\t\t/>\n\t\t\t<?php echo $term->name; ?> <?php if ( $price ) : ?>+<?php echo $price; ?>%<?php endif; ?><br />\n\t\t<?php endforeach; ?>\n\t\t<?php do_action( 'sell_media_build_input_after' ); ?>\n\t<?php endif; ?>\n<?php }\n\n\n/**\n * Determine if we're on a Sell Media page in the admin\n *\n * @since 0.1\n */\nfunction sell_media_is_sell_media_post_type_page() {\n\n\tif ( isset( $_GET['post_type'] ) && $_GET['post_type'] == 'sell_media_item' ) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\n/**\n * Determine if the license page is being displayed on the admin\n *\n * @since 0.1\n */\nfunction sell_media_is_license_page() {\n\tif ( isset( $_GET['action'] )\n\t\t&& $_GET['action'] == 'edit'\n\t\t&& isset( $_GET['taxonomy'] )\n\t\t&& $_GET['taxonomy'] == 'licenses' ) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\n/**\n * Determine if the license term page is being displayed on the admin\n *\n * @since 0.1\n */\nfunction sell_media_is_license_term_page() {\n\n\tif ( isset( $_GET['post_type'] ) && 'sell_media_item' === $_GET['post_type'] && isset( $_GET['taxonomy'] ) && 'licenses' === $_GET['taxonomy'] ) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\n/**\n * Get Attachments\n *\n * Get attachment ids from post meta.\n * This function checks for both and returns a WP_Post object\n *\n * @param $post_id\n * @return WP_Post object\n * @since 2.0.1\n */\nfunction sell_media_get_attachments( $post_id ) {\n\t$meta = get_post_meta( $post_id, '_sell_media_attachment_id', true );\n\tif ( is_array( $meta ) ) {\n\t\treturn $meta;\n\t}\n\treturn ( ! empty( $meta ) ) ? explode( ',', $meta ) : false;\n}\n\n\n/**\n * Get Attachment ID\n *\n * If the ID is an attachment, the $post_id is the $attachment_id.\n * Otherwise, get the attachments and assign\n * the first as the $attachment_id.\n *\n * @param int $post_id\n * @return int $attachment_id\n * @since 2.0.1\n */\nfunction sell_media_get_attachment_id( $post_id = null ) {\n\n\tif ( 'attachment' === get_post_type( $post_id ) ) {\n\t\t$attachment_id = $post_id;\n\t} else {\n\t\t$attachments = sell_media_get_attachments( $post_id );\n\t\t$attachment_id = ( is_array( $attachments ) && ! empty( $attachments ) ) ? reset( $attachments ) : $post_id;\n\t}\n\n\treturn $attachment_id;\n}\n\n/**\n * Check if item has multiple attachments\n */\nfunction sell_media_has_multiple_attachments( $post_id ) {\n\n\t$attachments = sell_media_get_attachments( $post_id );\n\tif ( is_array( $attachments ) && count( $attachments ) > 0 ) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Get Attachment Meta\n *\n * Returns the attachment meta field.\n * Use to get title, caption, description\n * Or anything else listed here:\n * https://codex.wordpress.org/Function_Reference/wp_prepare_attachment_for_js\n *\n * @param int $post_id\n * @param int $field\n * @uses wp_prepare_attachment_for_js();\n * @return string field (id, caption, title, description, etc)\n * @since 2.0.4\n */\nfunction sell_media_get_attachment_meta( $post_id = null, $field = 'id' ) {\n\n\tif ( sell_media_has_multiple_attachments( $post_id ) ) {\n\t\t$attachment_id = get_query_var( 'id' );\n\t} else {\n\t\t$attachments = sell_media_get_attachments( $post_id );\n\t\t$attachment_id = $attachments[0];\n\t}\n\n\t$attachment_meta = wp_prepare_attachment_for_js( $attachment_id );\n\n\treturn $attachment_meta[ $field ];\n}\n\n\n/**\n * Get the parent id of an attachment.\n * This is used in search and ajax requests for [sell_media_filters]\n * So that we can return only relevant attachments that are for sale\n * And have keywords.\n *\n * @param  attachment_id the attachment id\n * @return integer the parent id\n */\nfunction sell_media_get_attachment_parent_id( $attachment_id = null ) {\n\n\tif ( wp_get_post_parent_id( $attachment_id ) ) {\n\t\t$parent_id = wp_get_post_parent_id( $attachment_id );\n\t} elseif ( get_post_meta( $attachment_id, '_sell_media_for_sale_product_id', true ) ) {\n\t\t$parent_id = get_post_meta( $attachment_id, '_sell_media_for_sale_product_id', true );\n\t\tif ( false === sell_media_post_exists( $parent_id ) ) {\n\t\t\t$parent_id = '';\n\t\t}\n\t} else {\n\t\t$parent_id = '';\n\t}\n\n\treturn $parent_id;\n}\n\n\n/**\n * Determines if a post, identified by the specified ID, exist\n * within the WordPress database.\n *\n * @param    int $id    The ID of the post to check\n * @return   bool          True if the post exists; otherwise, false.\n * @since    2.0.1\n */\nfunction sell_media_post_exists( $id ) {\n\treturn is_string( get_post_status( $id ) );\n}\n\n\n/**\n * Get all sell media post ids\n * This is an expensive query, so let's cache it using transients.\n * This function is used in search queries to check if an attachment\n * has a post parent of one of the sell media entry ids.\n */\nfunction sell_media_ids() {\n\n\tif ( false === ( $cached_ids = get_transient( 'sell_media_cached_ids' ) ) ) {\n\n\t\t$ids = get_posts(\n\t\t\tarray(\n\t\t\t\t'post_type' => 'sell_media_item',\n\t\t\t\t'posts_per_page' => -1,\n\t\t\t)\n\t\t);\n\n\t\t$cached_ids = wp_list_pluck( $ids, 'ID' );\n\n\t\tset_transient( 'sell_media_cached_ids', $cached_ids, 12 * HOUR_IN_SECONDS );\n\n\t}\n\n\treturn $cached_ids;\n}\n\n\n/**\n * If a new sell media entry is added, delete the cached ids transient.\n */\nfunction sell_media_delete_cached_ids( $post_id ) {\n\n\tif ( 'sell_media_item' === get_post_type( $post_id ) ) {\n\t\tdelete_transient( 'sell_media_cached_ids' );\n\t}\n\n}\nadd_action( 'save_post', 'sell_media_delete_cached_ids' );\n\n\n/**\n * Get Currency\n *\n * @since 0.1\n **/\nfunction sell_media_get_currency() {\n\t$settings = sell_media_get_plugin_options();\n\treturn apply_filters( 'sell_media_currency', empty( $settings->currency ) ? null : $settings->currency );\n}\n\n\n/**\n * Build currency values\n *\n * @since 0.1\n **/\nfunction sell_media_get_currency_symbol( $currency = '' ) {\n\tif ( ! $currency ) { $currency = sell_media_get_currency(); }\n\t$currency_symbol = '';\n\tswitch ( $currency ) :\n\t\tcase 'BRL' : $currency_symbol = 'R&#36;';\nbreak; // in Brazil the correct is R$ 0.00,00\n\t\tcase 'AUD' :\n\t\tcase 'CAD' :\n\t\tcase 'MXN' :\n\t\tcase 'NZD' :\n\t\tcase 'HKD' :\n\t\tcase 'SGD' :\n\t\tcase 'USD' : $currency_symbol = '&#36;';\nbreak;\n\t\tcase 'EUR' : $currency_symbol = '&euro;';\nbreak;\n\t\tcase 'RMB' :\n\t\tcase 'JPY' : $currency_symbol = '&yen;';\nbreak;\n\t\tcase 'TRY' : $currency_symbol = 'TL';\nbreak;\n\t\tcase 'NOK' : $currency_symbol = 'kr';\nbreak;\n\t\tcase 'ZAR' : $currency_symbol = 'R';\nbreak;\n\t\tcase 'CZK' : $currency_symbol = '&#75;&#269;';\nbreak;\n\t\tcase 'MYR' : $currency_symbol = 'RM';\nbreak;\n\t\tcase 'DKK' :\n\t\tcase 'HUF' :\n\t\tcase 'ILS' :\n\t\tcase 'PHP' :\n\t\tcase 'PLN' :\n\t\tcase 'SEK' :\n\t\tcase 'CHF' :\n\t\tcase 'TWD' :\n\t\tcase 'THB' : $currency_symbol = $currency;\nbreak;\n\t\tcase 'GBP' : $currency_symbol = '&pound;';\nbreak;\n\t\tdefault    : $currency_symbol = '&#36;';\nbreak;\n\tendswitch;\n\treturn apply_filters( 'sell_media_currency_symbol', $currency_symbol, $currency );\n}\n\n\n/**\n * Returns the test mode option\n *\n * @since 0.1\n */\nfunction sell_media_test_mode() {\n\t$settings = sell_media_get_plugin_options();\n\treturn $settings->test_mode;\n}\n\n\n/**\n * Change order by on frontend\n *\n * @since 0.1\n * @return void\n */\nfunction sell_media_order_by( $orderby_statement ) {\n\t\n\t$settings = sell_media_get_plugin_options();\n\tif ( ! empty( $settings->order_by )\n\t\t&& (\n\t\t\tis_post_type_archive( 'sell_media_item' )\n\t\t\t|| is_tax('collection')\n\t\t\t|| is_tax('licenses')\n\t\t\t|| is_tax('keywords')\n\t\t\t|| is_tax('creator')\n\t\t\t)\n\t) {\n\t\tglobal $wpdb;\n\t\tswitch ( $settings->order_by ) {\n\t\t\tcase 'title-asc' :\n\t\t\t\t$order_by = \"{$wpdb->prefix}posts.post_title ASC\";\n\t\t\t\tbreak;\n\t\t\tcase 'title-desc' :\n\t\t\t\t$order_by = \"{$wpdb->prefix}posts.post_title DESC\";\n\t\t\t\tbreak;\n\t\t\tcase 'date-asc' :\n\t\t\t\t$order_by = \"{$wpdb->prefix}posts.post_date ASC\";\n\t\t\t\tbreak;\n\t\t\tcase 'date-desc' :\n\t\t\t\t$order_by = \"{$wpdb->prefix}posts.post_date DESC\";\n\t\t\t\tbreak;\n\t\t}\n\t} else {\n\t\t$order_by = $orderby_statement;\n\t}\n\treturn $order_by;\n}\nif ( ! is_admin() ) {\n\tadd_filter( 'posts_orderby', 'sell_media_order_by' );\n}\n\n\n/**\n * Returns the attachment ID file size\n *\n * @param $attachment_id ID of the attachment\n * @return string\n * @since 1.6.9\n */\nfunction sell_media_get_filesize( $post_id = null, $attachment_id = null ) {\n\n\t$file_path = Sell_Media()->products->get_protected_file( $post_id, $attachment_id );\n\n\tif ( file_exists( $file_path ) ) {\n\n\t\t$bytes = filesize( $file_path );\n\t\t$s = array( 'b', 'Kb', 'Mb', 'Gb' );\n\t\t$e = floor( log( $bytes ) / log( 1024 ) );\n\n\t\treturn sprintf( '%.2f ' . $s[ $e ], ( $bytes / pow( 1024, floor( $e ) ) ) );\n\t}\n}\n\n\n/**\n * Update the sales stats\n *\n * @since 0.1\n */\nfunction sell_media_update_sales_stats( $product_id = null, $license_id = null, $price = null ) {\n\n\t$prev = maybe_unserialize( get_post_meta( $product_id, 'sell_media_sales_stats', true ) );\n\n\t$new[ $license_id ]['count'] = $prev[ $license_id ]['count'] + 1;\n\t$new[ $license_id ]['total'] = $prev[ $license_id ]['total'] + $price;\n\t$sales_stats_s = serialize( $new );\n\n\treturn update_post_meta( $product_id, 'sell_media_sales_stats', $sales_stats_s );\n}\n\n\n/**\n * Echos the pagination for Archive pages.\n *\n * @since 1.0.1\n */\nfunction sell_media_pagination_filter( $max_pages = '' ) {\n\n\tglobal $wp_query;\n\t$max_num_pages = ( '' != $max_pages ) ? $max_pages : $wp_query->max_num_pages;\n\n\t$big = 999999999; // need an unlikely integer\n\n\t$params = array(\n\t\t// 'base' => str_replace( $big, '%#%', esc_url( get_pagenum_link( $big ) ) ),\n\t\t'format' => '?paged=%#%',\n\t\t'current' => max( 1, get_query_var( 'paged' ) ),\n\t\t'total' => $max_num_pages,// note sometimes max_num_pages needs to be sent over\n\t);\n\n\treturn '<div class=\"sell-media-pagination-container\">' . paginate_links( $params ) . '</div>';\n}\nadd_filter( 'sell_media_pagination_filter', 'sell_media_pagination_filter', 10, 1 );\n\n\n/**\n * Determine if the payment reports page is being displayed on the admin\n *\n * @since 1.2\n */\nfunction sell_media_is_reports_page() {\n\n\tif ( isset( $_SERVER['QUERY_STRING'] ) && 'post_type=sell_media_item&page=sell_media_reports' == $_SERVER['QUERY_STRING'] ) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n/**\n * Get Plugin data\n *\n * @since 1.2\n */\nfunction sell_media_plugin_data( $field = null ) {\n\t$plugin_data = get_plugin_data( SELL_MEDIA_PLUGIN_FILE, $markup = true, $translate = true );\n\treturn $plugin_data[ $field ];\n}\n\n\n/**\n * Build select fields\n *\n * @since 1.2\n */\nfunction sell_media_build_select( $items = array(), $args = array() ) {\n\textract( $args );\n\n\tif ( $required ) {\n\t\t$required = ' required ';\n\t} else {\n\t\t$required = false;\n\t\t$required_html = false;\n\t}\n\n\tif ( ! $title ) {\n\t\t$title = false;\n\t}\n\n\tif ( empty( $name ) ) {\n\t\t$name = null; }\n\n\tif ( empty( $current ) ) {\n\t\t$current = null; }\n\t?>\n\t<select id=\"<?php print $name; ?>\" class=\"sell_media_form_control\" name=\"<?php print $name; ?>\" <?php print $required; ?>>\n\t\t<option></option>\n\t\t<?php foreach ( $items as $key => $value ) : ?>\n\t\t\t<option value=\"<?php print $key; ?>\" <?php selected( $key, $current ); ?>><?php print $value; ?></option>\n\t\t<?php endforeach; ?>\n\t</select>\n<?php }\n\n\n/**\n * Return either the the custom price group or the default price group from settings\n * Used for showing price groups on cart popup\n *\n * @param $post_id, $taxonomy\n * @return $price_groups (object)\n */\nfunction sell_media_get_price_groups( $post_id = null, $taxonomy = null ) {\n\n\t// first, check price group set on the item\n\t$price_groups_custom = wp_get_post_terms( $post_id, $taxonomy );\n\n\tforeach ( $price_groups_custom as $price_group ) {\n\t\tif ( $price_group->parent == 0 ) {\n\t\t\t$parent_price_group = $price_group->term_id;\n\t\t}\n\t}\n\n\t// if the item doesn't have a price group set, use the default from settings\n\tif ( empty( $price_groups_custom ) ) {\n\n\t\t$settings = sell_media_get_plugin_options();\n\n\t\tif ( $taxonomy == 'reprints-price-group' ) {\n\t\t\t$price_group_id = $settings->reprints_default_price_group;\n\t\t} else {\n\t\t\t$price_group_id = $settings->default_price_group;\n\t\t}\n\n\t\t$default_price_group_obj = get_term( $price_group_id, $taxonomy );\n\n\t\tif ( is_null( $default_price_group_obj ) || is_wp_error( $default_price_group_obj ) ) {\n\t\t\treturn; }\n\n\t\t$parent_price_group = $default_price_group_obj->term_id;\n\t}\n\n\t$args = array(\n\t\t'type' => 'sell_media_item',\n\t\t'hide_empty' => false,\n\t\t'parent' => $parent_price_group,\n\t\t'taxonomy' => $taxonomy,\n\t\t'orderby' => 'id',\n\t\t);\n\n\t$price_groups = get_categories( $args );\n\n\treturn $price_groups;\n\n}\n\n/**\n * Get the assigned price group\n *\n * @param $post_id, $taxonomy\n * @since 2.0.1\n * @return integer $price_group_id\n */\nfunction sell_media_get_item_price_group( $post_id, $taxonomy ) {\n\t$settings = sell_media_get_plugin_options();\n\t$terms = get_the_terms( $post_id, $taxonomy );\n\tif ( $terms && ! is_wp_error( $terms ) ) { foreach ( $terms as $term ) {\n\t\t\tif ( $term->parent == 0 ) {\n\t\t\t\t$price_group_id = $term->term_id;\n\t\t\t}\n\t}\n\t} elseif ( $taxonomy == 'reprints-price-group' ) {\n\t\t$price_group_id = $settings->reprints_default_price_group;\n\t} elseif ( $taxonomy == 'price-group' ) {\n\t\t$price_group_id = $settings->default_price_group;\n\t} else {\n\t\t$price_group_id = 0;\n\t}\n\n\treturn $price_group_id;\n}\n\n\n/**\n * Retrieve the absolute path to the file upload directory without the trailing slash\n *\n * @since  1.8.5\n * @return string $path Absolute path to the sell_media upload directory\n */\nfunction sell_media_get_upload_dir() {\n\t$wp_upload_dir = wp_upload_dir();\n\twp_mkdir_p( $wp_upload_dir['basedir'] . '/sell_media' );\n\t$path = $wp_upload_dir['basedir'] . '/sell_media';\n\n\treturn apply_filters( 'sell_media_get_upload_dir', $path );\n}\n\n\n/**\n * Retrieve the absolute path to the packages file upload directory without the trailing slash\n *\n * @since  1.8.5\n * @return string $path Absolute path to the sell_media/packages upload directory\n */\nfunction sell_media_get_packages_upload_dir() {\n\t$wp_upload_dir = wp_upload_dir();\n\twp_mkdir_p( $wp_upload_dir['basedir'] . '/sell_media/packages' );\n\t$path = $wp_upload_dir['basedir'] . '/sell_media/packages';\n\n\treturn apply_filters( 'sell_media_get_packages_upload_dir', $path );\n}\n\n\n/**\n * Retrieve the absolute path to the import directory without the trailing slash\n *\n * @since  2.0.1\n * @return string $path Absolute path to the sell_media/import directory\n */\nfunction sell_media_get_import_dir() {\n\t$wp_upload_dir = wp_upload_dir();\n\twp_mkdir_p( $wp_upload_dir['basedir'] . '/sell_media/import' );\n\t$path = $wp_upload_dir['basedir'] . '/sell_media/import';\n\n\treturn apply_filters( 'sell_media_get_import_dir', $path );\n}\n\n\n/**\n * Get directories\n *\n * @since 2.0.1\n * @param $dir (packages or import)\n * @return array (directories)\n */\nfunction sell_media_get_directories( $dir = null ) {\n\n\t$directories = '';\n\t$path = ( 'packages' === $dir ) ? sell_media_get_packages_upload_dir() : sell_media_get_import_dir();\n\n\tforeach ( glob( $path . '/*', GLOB_ONLYDIR ) as $directory ) {\n\t\t$directories[] = $directory;\n\t}\n\treturn $directories;\n}\n\n\n/**\n * Retrieve the url to the file upload directory without the trailing slash\n *\n * @since  1.8.5\n * @return string $url url to the sell_media upload directory\n */\nfunction sell_media_get_upload_dir_url() {\n\t$wp_upload_dir = wp_upload_dir();\n\t$url = $wp_upload_dir['baseurl'] . '/sell_media';\n\n\treturn apply_filters( 'sell_media_get_upload_dir_url', $url );\n}\n\n/**\n * Disable cache on Checkout and Thanks pages\n *\n * @since 2.0.2\n * @return void\n */\nfunction sell_media_nocache() {\n\n\tif ( is_admin() ) {\n\t\treturn; }\n\n\tif ( false === ( $page_uris = get_transient( 'sell_media_cache_excluded_uris' ) ) ) {\n\t\t$settings       = sell_media_get_plugin_options();\n\t\t$checkout_page  = isset( $settings->checkout_page ) ? $settings->checkout_page: '';\n\t\t$thanks_page    = isset( $settings->thanks_page ) ? $settings->thanks_page: '';\n\n\t\tif ( empty( $checkout_page ) || empty( $thanks_page ) ) {\n\t\t\treturn; }\n\n\t\t$page_uris   = array();\n\t\t// Exclude IPN listener\n\t\t$page_uris[] = '?sell_media-listener=IPN';\n\t\t// Exclude default permalinks for pages\n\t\t$page_uris[] = '?page_id=' . $checkout_page;\n\t\t$page_uris[] = '?page_id=' . $thanks_page;\n\t\t// Exclude nice permalinks for pages\n\t\t$checkout_page  = get_post( $checkout_page );\n\t\t$thanks_page    = get_post( $thanks_page );\n\t\tif ( ! is_null( $checkout_page ) ) {\n\t\t\t$page_uris[] = '/' . $checkout_page->post_name; }\n\t\tif ( ! is_null( $thanks_page ) ) {\n\t\t\t$page_uris[] = '/' . $thanks_page->post_name; }\n\t\tset_transient( 'sell_media_cache_excluded_uris', $page_uris );\n\t}\n\n\tif ( is_array( $page_uris ) ) {\n\t\tforeach ( $page_uris as $uri ) {\n\t\t\tif ( strstr( $_SERVER['REQUEST_URI'], $uri ) ) {\n\t\t\t\tif ( ! defined( 'DONOTCACHEPAGE' ) ) {\n\t\t\t\t\tdefine( 'DONOTCACHEPAGE', 'true' ); }\n\t\t\t\tnocache_headers();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\nadd_action( 'init', 'sell_media_nocache', 0 );\n\n\n/**\n * Filters the default thumbnail size requested on archives and galleries\n *\n * @since 2.1.3\n *\n * @return string thumbnail size param\n */\nfunction sell_media_thumbnail_crop() {\n\t$settings = sell_media_get_plugin_options();\n\tif ( $settings->thumbnail_crop ) {\n\t\treturn $settings->thumbnail_crop;\n\t}\n\n}\nadd_filter( 'sell_media_thumbnail', 'sell_media_thumbnail_crop', 10, 1 );\n\n\n/**\n * Change buy button text to download if price if 0.\n *\n * @since 2.0.7\n *\n * @param  String $text     Button Text.\n * @param  int    $post_id  Id of post.\n * @return String           Button Text.\n */\nfunction sell_media_free_download_button_text( $text, $post_id, $attachment_id = null, $type = 'download' ) {\n\tif ( 'download' != $type ) {\n\t\treturn $text;\n\t}\n\n\t$price = get_post_meta( $post_id, 'sell_media_price', true );\n\tif ( $price <= 0 ) {\n\t\t $text = __( 'Download', 'sell_media' ); }\n\n\treturn $text;\n}\n\nadd_filter( 'sell_media_purchase_text', 'sell_media_free_download_button_text', 10, 4 );\nadd_filter( 'sell_media_add_to_cart_text', 'sell_media_free_download_button_text', 10, 4 );\n\n/**\n * Change button html.\n *\n * @since 2.0.7\n *\n * @param  string  $html             Html output of button.\n * @param  int     $post_id          ID of post.\n * @param  int     $attachment_id    ID of attachment\n * @param  string  $button           Button type.\n * @param  string  $text             Button Text.\n * @param  boolean $echo             Echo output or return.\n * @return string                    Html output of button.\n */\nfunction sell_media_free_download_button_button( $html, $post_id, $attachment_id, $button, $text, $echo, $type = 'download' ) {\n\n\tif ( 'download' != $type ) {\n\t\treturn $html;\n\t}\n\n\t$price = get_post_meta( $post_id, 'sell_media_price', true );\n\t$value = get_post_meta( $post_id, 'sell_media_free_downloads', true );\n\tif ( $price > 0 || $value ) {\n\t\treturn $html; }\n\n\t$classes[] = 'item_add';\n\t$classes[] = 'sell-media-button';\n\tif ( ! is_null( $button ) ) {\n\t\t$classes[] = 'sell-media-' . $button;\n\t}\n\t$classes[] = 'sell-media-download-button';\n\t$classes = implode( ' ', $classes );\n\n\t$link = sprintf( '%s?download=free&product_id=%d&attachment_id=%d&payment_id=free', home_url(), $post_id, $attachment_id );\n\t$html = '<a href=\"' . $link . '\" title=\"' . $text . '\" data-product-id=\"' . esc_attr( $post_id ) . '\" data-attachment-id=\"' . esc_attr( $attachment_id ) . '\" class=\"' . $classes . '\">' . $text . '</a>';\n\treturn $html;\n}\n\nadd_filter( 'sell_media_item_buy_button', 'sell_media_free_download_button_button', 10, 7 );\nadd_filter( 'sell_media_item_add_to_cart_button', 'sell_media_free_download_button_button', 10, 7 );\n\n/**\n * Forces the file to be downloaded for free.\n *\n * @since 2.0.7\n *\n * @param  init $post_id       ID of post\n * @param  init $attachment_id ID of attacment\n * @return void\n */\nfunction sell_media_free_download_file( $post_id, $attachment_id ) {\n\n\t$price = get_post_meta( $post_id, 'sell_media_price', true );\n\n\t// product is not free, so die\n\tif ( $price > 0 ) {\n\n\t\tdo_action( 'sell_media_zero_price_download_fail', $post_id, $attachment_id );\n\n\t\twp_die( __( 'Nice try, but this file is not a free download.', 'sell_media' ), __( 'Purchase Verification Failed', 'sell_media' ) );\n\n\t} else {\n\n\t\t$requested_file = Sell_Media()->products->get_protected_file( $post_id, $attachment_id );\n\t\t$file_type = wp_check_filetype( $requested_file );\n\n\t\tif ( ! ini_get( 'safe_mode' ) ) {\n\t\t\tset_time_limit( 0 );\n\t\t}\n\n\t\tif ( function_exists( 'get_magic_quotes_runtime' ) && get_magic_quotes_runtime() ) {\n\t\t\tset_magic_quotes_runtime( 0 );\n\t\t}\n\n\t\tif ( function_exists( 'apache_setenv' ) ) { @apache_setenv( 'no-gzip', 1 ); }\n\t\t@ini_set( 'zlib.output_compression', 'Off' );\n\n\t\tnocache_headers();\n\t\theader( 'Robots: none' );\n\t\theader( 'Content-Type: ' . $file_type['type'] . '' );\n\t\theader( 'Content-Description: File Transfer' );\n\t\theader( 'Content-Disposition: attachment; filename=\"' . basename( $requested_file ) . '\"' );\n\t\theader( 'Content-Transfer-Encoding: binary' );\n\n\t\t// Deliver the download\n\t\tSell_Media()->download->download_file( $requested_file );\n\n\t\texit();\n\t}\n\n}\n\nadd_action( 'sell_media_before_failed_download', 'sell_media_free_download_file', 10, 2 );\n\n/**\n * Get current sell media plugin version.\n * @return int Retrun current sell media plugin version.\n */\nfunction sell_media_version() {\n\t$option_name = 'sell_media_version';\n\t$default_value = 0;\n\n\tif ( is_multisite() ) {\n\t\t$blog_id = get_current_blog_id();\n\t\t$version = get_blog_option( $blog_id, $option_name, $default_value );\n\t\treturn $version;\n\t}\n\n\t$version = get_option( $option_name, $default_value );\n\treturn $version;\n}\n\n/**\n * Get option based on the site type\n * @param  string $option  Name of option to add. Expected to not be SQL-escaped.\n * @param  mixed  $value       Optional. Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.\n * @return bool False if option was not added and true if option was added.\n */\nfunction sell_media_get_option( $option, $default = false ) {\n\tif ( is_multisite() ) {\n\t\treturn get_blog_option( get_current_blog_id(), $option, $default );\n\t}\n\n\treturn get_option( $option, $default );\n}\n\n/**\n * Add a new option based on the site type\n * @param  string      $option    Name of option to add. Expected to not be SQL-escaped.\n * @param  mixed       $value      Optional. Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.\n * @param  string      $deprecated Optional. Description. Not used anymore.\n * @param  string|bool $autoload   Optional. Whether to load the option when WordPress starts up.\n * @return bool             False if option was not added and true if option was added.\n */\nfunction sell_media_add_option( $option, $value = '', $deprecated = '', $autoload = 'yes' ) {\n\tif ( is_multisite() ) {\n\t\treturn add_blog_option( get_current_blog_id(), $option, $value );\n\t}\n\n\treturn add_option( $option, $value, $deprecated, $autoload );\n}\n\n/**\n * Update the value of an option that was already added based on site type.\n * @param  string      $option    Name of option to add. Expected to not be SQL-escaped.\n * @param  mixed       $value      Optional. Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.\n * @param  string|bool $autoload   Optional. Whether to load the option when WordPress starts up.\n * @return bool             False if option was not added and true if option was added.\n */\nfunction sell_media_update_option( $option, $value, $autoload = null ) {\n\tif ( is_multisite() ) {\n\t\treturn update_blog_option( get_current_blog_id(), $option, $value );\n\t}\n\n\treturn update_option( $option, $value, $autoload );\n}\n\n/**\n * Search for the attachment parent post.\n * @param  int  $post_id attachment post id\n * @param  boolean $single  Return single value or array\n * @return mixed           Returns parent.\n */\nfunction sell_media_attachment_parent_post( $post_id, $single = true ){\n\t$args['post_type'] = \"sell_media_item\";\n\t$args['meta_query'] = array(\n\t\t\tarray(\n\t\t\t\t'key'     => '_sell_media_attachment_id',\n\t\t\t\t'value'   => $post_id,\n\t\t\t\t'compare' => 'LIKE'\n\t\t\t),\n\t\t);\n\n\t$items = get_posts( $args );\n\tif( empty( $items ) )\n\t\treturn false;\n\n\tif( $single )\n\t\treturn $items[0];\n\n\treturn $items;\n}\n\n\nfunction sell_media_update_attachment_metadata1( $data, $post_id ){\n\tif( !isset( $data['sizes']['large'] ) || !isset( $data['file'] ) ){\n\t\treturn $data;\n\t}\n\t$uploads = wp_upload_dir();\n\t$sm_file = trailingslashit( $uploads['basedir'] ) . 'sell_media/' . $data['file'];\n\tif( !file_exists( $sm_file ) )\n\t\treturn $data;\n\n\t$main_file = trailingslashit( $uploads['basedir'] ) . $data['file'];\n\t$filename = basename( $data['file'] );\n\t$upload_folder = trailingslashit( dirname( $main_file ) );\n\t$copy = copy($sm_file, $main_file);\n\n\tif ( $copy ) {\n\n\t\t// If function doesn't exist, include function file.\n\t\tif ( ! function_exists( 'wp_generate_attachment_metadata' ) ) {\n\t\t\tinclude( ABSPATH . 'wp-admin/includes/image.php' );\n\t\t}\n\n\t\t$metadata = wp_generate_attachment_metadata( $post_id, $main_file );\n\n\t\t$date_folder = dirname( $data['file'] );\n\t\t$large_file = trailingslashit( $uploads['basedir'] ) .trailingslashit( $date_folder ) . $metadata['sizes']['large']['file'];\n\t\t$main_file = trailingslashit( $uploads['basedir'] ) . $data['file'];\n\n\t\tif( file_exists( $large_file ) ){\n\t\t\t$copy = copy( $large_file, $main_file );\n\t\t\tif( $copy ){\n\n\t\t\t\t$data['width'] = $metadata['sizes']['large']['width'];\n\t\t\t\t$data['height'] = $metadata['sizes']['large']['height'];\n\t\t\t\t$data['sizes']['large']['width'] = $metadata['sizes']['large']['width'];\n\t\t\t\t$data['sizes']['large']['height'] = $metadata['sizes']['large']['height'];\n\t\t\t\t$data['sizes']['large']['file'] = $metadata['sizes']['large']['file'];\n\t\t\t\t$data['sizes']['large']['mime-type'] = $metadata['sizes']['large']['mime-type'];\n\t\t\t}\n\t\t}\n\t}\n\treturn $data;\n}\nadd_filter( 'wp_update_attachment_metadata', 'sell_media_update_attachment_metadata1', 10, 2 );\n\n/**\n * Regenerate thumbnails if original image is found in sell media upload folder.\n * @param  array $data          Meta data array.\n * @param  int \t $attachment_id \tAttachment id.\n * @return array                Updated meta data array.\n */\nfunction sell_media_generate_attachment_metadata( $data, $attachment_id ) {\n\n\t/**\n\t * If $data['file'] isn't set, the files are missing.\n\t * So, let's derive $data['file'] from the missing public filepath.\n\t */\n\tif ( empty( $data['file'] ) ) {\n\t\t$data['file'] = sell_media_get_public_filepath( $attachment_id );\n\t}\n\n\t$uploads = wp_upload_dir();\n\t$sm_file_path = trailingslashit( $uploads['basedir'] ) . 'sell_media/' . $data['file'];\n\t$sm_file = apply_filters( 'sell_media_original_image_path', $sm_file_path, $attachment_id, $data );\n\tif ( ! file_exists( $sm_file ) )\n\t\treturn $data;\n\n\t$main_file = trailingslashit( $uploads['basedir'] ) . $data['file'];\n\n\t@set_time_limit( 900 );\n\t$copy = copy( $sm_file, $main_file );\n\n\tif ( ! $copy )\n\t\treturn $data;\n\n\t$file = $main_file;\n\n\t// Core Start\n\t$attachment = get_post( $attachment_id );\n\n\t$metadata = array();\n\t$support = false;\n\tif ( preg_match('!^image/!', get_post_mime_type( $attachment )) && file_is_displayable_image($file) ) {\n\t\t$imagesize = getimagesize( $file );\n\t\t$metadata['width'] = $imagesize[0];\n\t\t$metadata['height'] = $imagesize[1];\n\n\t\t// Make the file path relative to the upload dir.\n\t\t$metadata['file'] = _wp_relative_upload_path($file);\n\n\t\t// Make thumbnails and other intermediate sizes.\n\t\tglobal $_wp_additional_image_sizes;\n\n\t\t$sizes = array();\n\t\tforeach ( get_intermediate_image_sizes() as $s ) {\n\t\t\t$sizes[$s] = array( 'width' => '', 'height' => '', 'crop' => false );\n\t\t\tif ( isset( $_wp_additional_image_sizes[$s]['width'] ) )\n\t\t\t\t$sizes[$s]['width'] = intval( $_wp_additional_image_sizes[$s]['width'] ); // For theme-added sizes\n\t\t\telse\n\t\t\t\t$sizes[$s]['width'] = get_option( \"{$s}_size_w\" ); // For default sizes set in options\n\t\t\tif ( isset( $_wp_additional_image_sizes[$s]['height'] ) )\n\t\t\t\t$sizes[$s]['height'] = intval( $_wp_additional_image_sizes[$s]['height'] ); // For theme-added sizes\n\t\t\telse\n\t\t\t\t$sizes[$s]['height'] = get_option( \"{$s}_size_h\" ); // For default sizes set in options\n\t\t\tif ( isset( $_wp_additional_image_sizes[$s]['crop'] ) )\n\t\t\t\t$sizes[$s]['crop'] = $_wp_additional_image_sizes[$s]['crop']; // For theme-added sizes\n\t\t\telse\n\t\t\t\t$sizes[$s]['crop'] = get_option( \"{$s}_crop\" ); // For default sizes set in options\n\t\t}\n\n\t\t$sizes = apply_filters( 'intermediate_image_sizes_advanced', $sizes, $metadata );\n\n\t\tif ( $sizes ) {\n\t\t\t$editor = wp_get_image_editor( $file );\n\n\t\t\tif ( ! is_wp_error( $editor ) )\n\t\t\t\t$metadata['sizes'] = $editor->multi_resize( $sizes );\n\t\t} else {\n\t\t\t$metadata['sizes'] = array();\n\t\t}\n\n\t\t// Fetch additional metadata from EXIF/IPTC.\n\t\t$image_meta = wp_read_image_metadata( $file );\n\t\tif ( $image_meta )\n\t\t\t$metadata['image_meta'] = $image_meta;\n\n\t} elseif ( wp_attachment_is( 'video', $attachment ) ) {\n\t\t$metadata = wp_read_video_metadata( $file );\n\t\t$support = current_theme_supports( 'post-thumbnails', 'attachment:video' ) || post_type_supports( 'attachment:video', 'thumbnail' );\n\t} elseif ( wp_attachment_is( 'audio', $attachment ) ) {\n\t\t$metadata = wp_read_audio_metadata( $file );\n\t\t$support = current_theme_supports( 'post-thumbnails', 'attachment:audio' ) || post_type_supports( 'attachment:audio', 'thumbnail' );\n\t}\n\n\tif ( $support && ! empty( $metadata['image']['data'] ) ) {\n\t\t// Check for existing cover.\n\t\t$hash = md5( $metadata['image']['data'] );\n\t\t$posts = get_posts( array(\n\t\t\t'fields' => 'ids',\n\t\t\t'post_type' => 'attachment',\n\t\t\t'post_mime_type' => $metadata['image']['mime'],\n\t\t\t'post_status' => 'inherit',\n\t\t\t'posts_per_page' => 1,\n\t\t\t'meta_key' => '_cover_hash',\n\t\t\t'meta_value' => $hash\n\t\t) );\n\t\t$exists = reset( $posts );\n\n\t\tif ( ! empty( $exists ) ) {\n\t\t\tupdate_post_meta( $attachment_id, '_thumbnail_id', $exists );\n\t\t} else {\n\t\t\t$ext = '.jpg';\n\t\t\tswitch ( $metadata['image']['mime'] ) {\n\t\t\tcase 'image/gif':\n\t\t\t\t$ext = '.gif';\n\t\t\t\tbreak;\n\t\t\tcase 'image/png':\n\t\t\t\t$ext = '.png';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$basename = str_replace( '.', '-', basename( $file ) ) . '-image' . $ext;\n\t\t\t$uploaded = wp_upload_bits( $basename, '', $metadata['image']['data'] );\n\t\t\tif ( false === $uploaded['error'] ) {\n\t\t\t\t$image_attachment = array(\n\t\t\t\t\t'post_mime_type' => $metadata['image']['mime'],\n\t\t\t\t\t'post_type' => 'attachment',\n\t\t\t\t\t'post_content' => '',\n\t\t\t\t);\n\n\t\t\t\t$image_attachment = apply_filters( 'attachment_thumbnail_args', $image_attachment, $metadata, $uploaded );\n\n\t\t\t\t$sub_attachment_id = wp_insert_attachment( $image_attachment, $uploaded['file'] );\n\t\t\t\tadd_post_meta( $sub_attachment_id, '_cover_hash', $hash );\n\t\t\t\t$attach_data = wp_generate_attachment_metadata( $sub_attachment_id, $uploaded['file'] );\n\t\t\t\twp_update_attachment_metadata( $sub_attachment_id, $attach_data );\n\t\t\t\tupdate_post_meta( $attachment_id, '_thumbnail_id', $sub_attachment_id );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove the blob of binary data from the array.\n\tif ( $metadata ) {\n\t\tunset( $metadata['image']['data'] );\n\t}\n\n\t// Core END\n\n\t// Sometimes the original source file is smaller than the large size\n\t// this causes the copy to fail\n\tif ( array_key_exists( 'large', $metadata['sizes'] ) ) {\n\n\t\t$date_folder = dirname( $data['file'] );\n\t\t$large_file = trailingslashit( $uploads['basedir'] ) .trailingslashit( $date_folder ) . $metadata['sizes']['large']['file'];\n\t\t$main_file = trailingslashit( $uploads['basedir'] ) . $data['file'];\n\n\t\tif ( file_exists( $large_file ) ){\n\t\t\t$copy = copy( $large_file, $main_file );\n\t\t\tif ( $copy ) {\n\n\t\t\t\t$metadata['width'] = $metadata['sizes']['large']['width'];\n\t\t\t\t$metadata['height'] = $metadata['sizes']['large']['height'];\n\t\t\t}\n\t\t}\n\t}\n\n\tdo_action( 'sell_media_after_generate_attachment_metadata', $attachment_id, $metadata );\n\n\treturn $metadata;\n}\nadd_filter( 'wp_generate_attachment_metadata', 'sell_media_generate_attachment_metadata', 10, 2 );\n\n\n/*\n * Regenerate missing attachment files\n * If for some reason the file is missing in public uploads\n * we should attempt to regenerate the thumbnails from the private source file\n * and generate a new thumbnails.\n */\nfunction sell_media_regenerate_missing_files( $post_id ) {\n\n\tif ( sell_media_has_multiple_attachments( $post_id ) ) {\n\t\t$attachment_ids = sell_media_get_attachments( $post_id );\n\t} else {\n\t\t$attachment_ids = array( get_post_meta( $post_id, '_sell_media_attachment_id', true ) );\n\t}\n\n\tif ( $attachment_ids ) foreach ( $attachment_ids as $attachment_id ) {\n\n\t\t// Check if attachment is image.\n\t\tif ( ! wp_attachment_is_image( $attachment_id ) )\n\t\t\treturn false;\n\n\t\t// Retrieve attached file path based on attachment ID.\n\t\t$attached_file = get_attached_file( $attachment_id );\n\n\t\t// File exists, so bail\n\t\tif ( file_exists( $attached_file ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Unlike photos, video and audio files aren't copied to public directory.\n\t\t * This means $attachment_meta['file'] will be empty.\n\t\t * So we only proceed if the file parameter exists.\n\t\t */\n\t\t$attachment_metadata = wp_get_attachment_metadata( $attachment_id );\n\n\t\t// build url from public attachment url\n\t\tif ( empty( $attachment_metadata['file'] ) ) {\n\t\t\t$attachment_metadata['file'] = sell_media_get_public_filepath( $attachment_id );\n\t\t}\n\n\t\tif ( ! empty( $attachment_metadata['file'] ) ) {\n\n\t\t\t// build the public file path.\n\t\t\t$upload_dir = wp_upload_dir();\n\t\t\t$public_file_path = $upload_dir['basedir'] . '/' . $attachment_metadata['file'];\n\n\t\t\t// get the original protected file.\n\t\t\t$original_file_path = sell_media_get_upload_dir() . '/' . $attachment_metadata['file'];\n\n\t\t\t/**\n\t\t\t * @todo Imported files are saved to filepath for sell_media_item publish date\n\t\t\t */\n\n\t\t\t// check if the original protected file exists\n\t\t\tif ( file_exists( $original_file_path ) ) {\n\t\t\t\tcopy( $original_file_path, $public_file_path );\n\t\t\t\t@set_time_limit( 900 );\n\t\t\t\trequire_once( ABSPATH . 'wp-admin/includes/image.php' );\n\t\t\t\t$metadata = wp_generate_attachment_metadata( $attachment_id, $attached_file );\n\t\t\t\tif ( !is_wp_error( $metadata ) && !empty( $metadata )  ){\n\t\t\t\t\twp_update_attachment_metadata( $attachment_id, $metadata );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nadd_action( 'sell_media_before_content', 'sell_media_regenerate_missing_files' );\n\n\n/**\n * Gets the public filepath for an attachment\n * @param  int $attachment_id the attachment id\n * @return string returns something like 2016/02/image.jpg\n */\nfunction sell_media_get_public_filepath( $attachment_id ) {\n\t$public_file = wp_get_attachment_url( $attachment_id );\n\t$string = '/uploads/';\n\tif ( ( $pos = strpos( $public_file, $string ) ) !== FALSE ) {\n\t\treturn substr( $public_file, strpos( $public_file, $string ) + strlen( $string ) );\n\t}\n}\n\n\n/**\n * Clear cart after payment is completed.\n * @return void\n */\nfunction sell_media_clear_cart_after_payment() {\n\t$clear = false;\n\n\tif ( isset( $_GET['tx'] ) && !empty( $_GET['tx'] ) ) {\n\t\t$clear = true;\n\t} else if ( isset( $_POST['txn_id'] ) && ! empty( $_POST['txn_id'] ) ) {\n\t\t$clear = true;\n\t}\n\n\t$clear = apply_filters( 'sell_media_clear_cart_after_payment', $clear );\n\n\tif ( ! $clear ) {\n\t\treturn false;\n\t}\n\n\tglobal $sm_cart;\n\t$sm_cart->clear();\n}\n\nadd_action( 'init', 'sell_media_clear_cart_after_payment' );\n\n/**\n * Add migration cron event.\n * This is essentially the same code that fires during\n * plugin activation hook. For some reasons, the upgrade\n * event wasn't working. In case the user upgraded\n * @return void\n */\nfunction sell_media_migration_cron_event() {\n\t$migrated = get_option( 'sell_media_keywords_migrated' );\n\tif ( ! $migrated ) {\n\t\t// Schedule an event that fires every minute to repair attachments in chunks.\n\t\tdo_action( 'sell_media_migrate_keywords' );\n\t}\n}\nadd_action( 'init', 'sell_media_migration_cron_event' );\n\n/**\n * Check if e-commerce is enabled.\n */\nfunction sell_media_ecommerce_enabled( $post_id ) {\n\t$status = true;\n\t$meta = get_post_meta( $post_id, 'sell_media_enable_ecommerce', true );\n\tif ( class_exists( 'VS_Platform' ) && 0 === $meta ) {\n\t\t$status = false;\n\t}\n\treturn $status;\n}\n", "<?php\n\n/**\n * Scripts\n *\n * @package Sell Media\n * @author Thad Allender <support@graphpaperpress.com>\n */\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Scripts\n *\n * Enqueues all necessary scripts in the WP Admin to run Sell Media\n *\n * @since 1.8.5\n * @return void\n */\nfunction sell_media_scripts( $hook ) {\n\n\t$settings = sell_media_get_plugin_options();\n\t$checkout_page = empty( $settings->checkout_page ) ? '' : $settings->checkout_page;\n\t$test_mode = empty( $settings->test_mode ) ? false : $settings->test_mode;\n\n\twp_enqueue_script( 'sell_media_jquery_cookie', SELL_MEDIA_PLUGIN_URL . 'js/jquery.cookie.js', array( 'jquery' ), SELL_MEDIA_VERSION );\n\twp_enqueue_script( 'sell_media', SELL_MEDIA_PLUGIN_URL . 'js/sell_media.js', array( 'jquery', 'sell_media_jquery_cookie' ), SELL_MEDIA_VERSION );\n\twp_enqueue_style( 'sell_media', SELL_MEDIA_PLUGIN_URL . 'css/sell_media.css', array( 'dashicons' ), SELL_MEDIA_VERSION );\n\n\t// Masonry\n\tif ( is_customize_preview() || ( isset( $settings->thumbnail_layout ) && 'sell-media-masonry' === $settings->thumbnail_layout ) ) {\n\t\twp_enqueue_script( 'sell_media_masonry', SELL_MEDIA_PLUGIN_URL . 'js/macy.min.js', array( 'jquery' ), SELL_MEDIA_VERSION, true );\n\t\twp_add_inline_script( 'sell_media_masonry', '\n\t\t\tsetTimeout(function(){ \n\t\t\t\tvar galleries = document.querySelectorAll(\".sell-media-grid-item-masonry-container\");\n\t\t\t\tvar macyInstances = [];\n\t\t\t\tvar macyOptions = {\n\t\t\t\t\ttrueOrder: false,\n\t\t\t\t\twaitForImages: true,\n\t\t\t\t\tmargin: 10,\n\t\t\t\t\tcolumns: 4,\n\t\t\t\t\tbreakAt: {\n\t\t\t\t\t\t1200: 4,\n\t\t\t\t\t\t940: 3,\n\t\t\t\t\t\t520: 1\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tfor (var i = 0; i < galleries.length; i++) {\n\t\t\t\t\tvar newId = \"sell-media-instance-\" + i;\n\t\t\t\t\tgalleries[i].id = newId;\n\t\t\t\t\tmacyOptions.container = \"#\" + newId;\n\t\t\t\t\tmacyInstances.push(Macy(macyOptions));\n\t\t\t\t}\n\t\t\t\twindow.dispatchEvent(new Event(\"resize\"));\n\t\t\t}, 100)'\n\t\t);\n\t}\n\n\tif ( isset( $settings->style ) && '' !== $settings->style ) {\n\t\twp_enqueue_style( 'sell_media_style', SELL_MEDIA_PLUGIN_URL . 'css/sell_media-' . $settings->style . '.css', array( 'sell_media' ), SELL_MEDIA_VERSION );\n\t} else {\n\t\twp_enqueue_style( 'sell_media_style', SELL_MEDIA_PLUGIN_URL . 'css/sell_media-light.css', array( 'sell_media' ), SELL_MEDIA_VERSION );\n\t}\n\n\twp_localize_script( 'sell_media', 'sell_media', array(\n\t\t'ajaxurl' => esc_url( admin_url( 'admin-ajax.php' ) ),\n\t\t'pluginurl' => esc_url( SELL_MEDIA_PLUGIN_URL . 'sell-media.php' ),\n\t\t'site_name' => esc_html( get_bloginfo( 'name' ) ),\n\t\t'site_url' => esc_url( site_url() ),\n\t\t'checkout_url' => esc_url( get_permalink( $checkout_page ) ),\n\t\t'currency_symbol' => empty( $settings->currency ) ? 'USD' : $settings->currency,\n\t\t'dashboard_page' => empty( $settings->dashboard_page ) ? '' : esc_url( get_permalink( $settings->dashboard_page ) ),\n\t\t'error' => array(\n\t\t\t'email_exists' => __( 'Sorry that email already exists or is invalid', 'sell_media' ),\n\t\t\t),\n\t\t'sandbox' => ( 1 === $test_mode ) ? true : false,\n\t\t'paypal_email' => empty( $settings->paypal_email ) ? null : $settings->paypal_email,\n\t\t'thanks_page' => empty( $settings->thanks_page ) ? '' : esc_url( get_permalink( $settings->thanks_page ) ),\n\t\t'listener_url' => esc_url( add_query_arg( 'sell_media-listener', 'IPN', home_url( 'index.php' ) ) ),\n\t\t'added_to_cart' => sprintf(\n\t\t\t\"%s! <a href='\" . esc_url( get_permalink( $checkout_page ) ) . \"' class='cart'>%s</a>!\",\n\t\t\t__( 'Added', 'sell_media' ),\n\t\t\t__( 'Checkout now', 'sell_media' ) ),\n\t\t'cart_labels' => array(\n\t\t\t'name' => __( 'Name', 'sell_media' ),\n\t\t\t'size' => __( 'Size', 'sell_media' ),\n\t\t\t'license' => __( 'License', 'sell_media' ),\n\t\t\t'price' => __( 'Price', 'sell_media' ),\n\t\t\t'qty' => __( 'Qty', 'sell_media' ),\n\t\t\t'sub_total' => __( 'Subtotal', 'sell_media' ),\n\t\t\t),\n\t\t'cart_style' => apply_filters( 'sell_media_cart_style', 'table' ),\n\t\t'tax' => empty( $settings->tax ) ? 0 : $settings->tax_rate,\n\t\t'tax_display' => empty( $settings->tax_display ) ? 'exclusive' : $settings->tax_display,\n\t\t'shipping' => apply_filters( 'sell_media_shipping', 0 ), // should PayPal force buyers add address\n\t\t'cart_error' => __( 'There was an error loading the cart data. Please contact the site owner.', 'sell_media' ),\n\t\t'checkout_text' => __( 'Checkout Now', 'sell_media' ),\n\t\t'checkout_wait_text' => __( 'Please wait...', 'sell_media' ),\n\t\t'remove_text' => __( 'Remove from Lightbox', 'sell_media' ),\n\t\t'save_text' => __( 'Save to Lightbox', 'sell_media' ),\n\t\t'currencies' => sell_media_currencies(),\n\t) );\n\n\tdo_action( 'sell_media_scripts_hook' );\n}\nadd_action( 'wp_enqueue_scripts', 'sell_media_scripts', 15 );\n", "!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):t.Macy=n()}(this,function(){\"use strict\";function t(t,n){var e=void 0;return function(){e&&clearTimeout(e),e=setTimeout(t,n)}}function n(t,n){for(var e=t.length,o=e,r=[];e--;)r.push(n(t[o-e-1]));return r}function e(t,n){A(t,n,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}function o(t){for(var n=t.options,e=t.responsiveOptions,o=t.keys,r=t.docWidth,i=void 0,s=0;s<o.length;s++){var a=parseInt(o[s],10);r>=a&&(i=n.breakAt[a],O(i,e))}return e}function r(t){for(var n=t.options,e=t.responsiveOptions,o=t.keys,r=t.docWidth,i=void 0,s=o.length-1;s>=0;s--){var a=parseInt(o[s],10);r<=a&&(i=n.breakAt[a],O(i,e))}return e}function i(t){var n=document.body.clientWidth,e={columns:t.columns};L(t.margin)?e.margin={x:t.margin.x,y:t.margin.y}:e.margin={x:t.margin,y:t.margin};var i=Object.keys(t.breakAt);return t.mobileFirst?o({options:t,responsiveOptions:e,keys:i,docWidth:n}):r({options:t,responsiveOptions:e,keys:i,docWidth:n})}function s(t){return i(t).columns}function a(t){return i(t).margin}function c(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],e=s(t),o=a(t).x,r=100/e;return n?1===e?\"100%\":(o=(e-1)*o/e,\"calc(\"+r+\"% - \"+o+\"px)\"):r}function u(t,n){var e=s(t.options),o=0,r=void 0,i=void 0;return 1===++n?0:(i=a(t.options).x,r=(i-(e-1)*i/e)*(n-1),o+=c(t.options,!1)*(n-1),\"calc(\"+o+\"% + \"+r+\"px)\")}function l(t){var n=0,e=t.container;m(t.rows,function(t){n=t>n?t:n}),e.style.height=n+\"px\"}function p(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=s(t.options),i=a(t.options).y;C(t,r,e),m(n,function(n){var e=0,r=parseInt(n.offsetHeight,10);isNaN(r)||(t.rows.forEach(function(n,o){n<t.rows[e]&&(e=o)}),n.style.position=\"absolute\",n.style.top=t.rows[e]+\"px\",n.style.left=\"\"+t.cols[e],t.rows[e]+=isNaN(r)?0:r+i,o&&(n.dataset.macyComplete=1))}),o&&(t.tmpRows=null),l(t)}function h(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=s(t.options),i=a(t.options).y;C(t,r,e),m(n,function(n){t.lastcol===r&&(t.lastcol=0);var e=M(n,\"height\");e=parseInt(n.offsetHeight,10),isNaN(e)||(n.style.position=\"absolute\",n.style.top=t.rows[t.lastcol]+\"px\",n.style.left=\"\"+t.cols[t.lastcol],t.rows[t.lastcol]+=isNaN(e)?0:e+i,t.lastcol+=1,o&&(n.dataset.macyComplete=1))}),o&&(t.tmpRows=null),l(t)}var f=function t(n,e){if(!(this instanceof t))return new t(n,e);if(n=n.replace(/^\\s*/,\"\").replace(/\\s*$/,\"\"),e)return this.byCss(n,e);for(var o in this.selectors)if(e=o.split(\"/\"),new RegExp(e[1],e[2]).test(n))return this.selectors[o](n);return this.byCss(n)};f.prototype.byCss=function(t,n){return(n||document).querySelectorAll(t)},f.prototype.selectors={},f.prototype.selectors[/^\\.[\\w\\-]+$/]=function(t){return document.getElementsByClassName(t.substring(1))},f.prototype.selectors[/^\\w+$/]=function(t){return document.getElementsByTagName(t)},f.prototype.selectors[/^\\#[\\w\\-]+$/]=function(t){return document.getElementById(t.substring(1))};var m=function(t,n){for(var e=t.length,o=e;e--;)n(t[o-e-1])},v=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.running=!1,this.events=[],this.add(t)};v.prototype.run=function(){if(!this.running&&this.events.length>0){var t=this.events.shift();this.running=!0,t(),this.running=!1,this.run()}},v.prototype.add=function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return!!n&&(Array.isArray(n)?m(n,function(n){return t.add(n)}):(this.events.push(n),void this.run()))},v.prototype.clear=function(){this.events=[]};var d=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.instance=t,this.data=n,this},g=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.events={},this.instance=t};g.prototype.on=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return!(!t||!n)&&(Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(n))},g.prototype.emit=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t||!Array.isArray(this.events[t]))return!1;var e=new d(this.instance,n);m(this.events[t],function(t){return t(e)})};var y=function(t){return!(\"naturalHeight\"in t&&t.naturalHeight+t.naturalWidth===0)||t.width+t.height!==0},E=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return new Promise(function(t,e){if(n.complete)return y(n)?t(n):e(n);n.addEventListener(\"load\",function(){return y(n)?t(n):e(n)}),n.addEventListener(\"error\",function(){return e(n)})}).then(function(n){e&&t.emit(t.constants.EVENT_IMAGE_LOAD,{img:n})}).catch(function(n){return t.emit(t.constants.EVENT_IMAGE_ERROR,{img:n})})},w=function(t,e){var o=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return n(e,function(n){return E(t,n,o)})},A=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return Promise.all(w(t,n,e)).then(function(){t.emit(t.constants.EVENT_IMAGE_COMPLETE)})},I=function(n){return t(function(){n.emit(n.constants.EVENT_RESIZE),n.queue.add(function(){return n.recalculate(!0,!0)})},100)},N=function(t){if(t.container=f(t.options.container),t.container instanceof f||!t.container)return!!t.options.debug&&console.error(\"Error: Container not found\");delete t.options.container,t.container.length&&(t.container=t.container[0]),t.container.style.position=\"relative\"},T=function(t){t.queue=new v,t.events=new g(t),t.rows=[],t.resizer=I(t)},b=function(t){var n=f(\"img\",t.container);window.addEventListener(\"resize\",t.resizer),t.on(t.constants.EVENT_IMAGE_LOAD,function(){return t.recalculate(!1,!1)}),t.on(t.constants.EVENT_IMAGE_COMPLETE,function(){return t.recalculate(!0,!0)}),t.options.useOwnImageLoader||e(t,n,!t.options.waitForImages),t.emit(t.constants.EVENT_INITIALIZED)},_=function(t){N(t),T(t),b(t)},L=function(t){return t===Object(t)&&\"[object Array]\"!==Object.prototype.toString.call(t)},O=function(t,n){L(t)||(n.columns=t),L(t)&&t.columns&&(n.columns=t.columns),L(t)&&t.margin&&!L(t.margin)&&(n.margin={x:t.margin,y:t.margin}),L(t)&&t.margin&&L(t.margin)&&t.margin.x&&(n.margin.x=t.margin.x),L(t)&&t.margin&&L(t.margin)&&t.margin.y&&(n.margin.y=t.margin.y)},M=function(t,n){return window.getComputedStyle(t,null).getPropertyValue(n)},C=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(t.lastcol||(t.lastcol=0),t.rows.length<1&&(e=!0),e){t.rows=[],t.cols=[],t.lastcol=0;for(var o=n-1;o>=0;o--)t.rows[o]=0,t.cols[o]=u(t,o)}else if(t.tmpRows){t.rows=[];for(var o=n-1;o>=0;o--)t.rows[o]=t.tmpRows[o]}else{t.tmpRows=[];for(var o=n-1;o>=0;o--)t.tmpRows[o]=t.rows[o]}},V=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],o=n?t.container.children:f(':scope > *:not([data-macy-complete=\"1\"])',t.container),r=c(t.options);return m(o,function(t){n&&(t.dataset.macyComplete=0),t.style.width=r}),t.options.trueOrder?(h(t,o,n,e),t.emit(t.constants.EVENT_RECALCULATED)):(p(t,o,n,e),t.emit(t.constants.EVENT_RECALCULATED))},R=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t},x={columns:4,margin:2,trueOrder:!1,waitForImages:!1,useImageLoader:!0,breakAt:{},useOwnImageLoader:!1,onInit:!1};!function(){try{document.createElement(\"a\").querySelector(\":scope *\")}catch(t){!function(){function t(t){return function(e){if(e&&n.test(e)){var o=this.getAttribute(\"id\");o||(this.id=\"q\"+Math.floor(9e6*Math.random())+1e6),arguments[0]=e.replace(n,\"#\"+this.id);var r=t.apply(this,arguments);return null===o?this.removeAttribute(\"id\"):o||(this.id=o),r}return t.apply(this,arguments)}}var n=/:scope\\b/gi,e=t(Element.prototype.querySelector);Element.prototype.querySelector=function(t){return e.apply(this,arguments)};var o=t(Element.prototype.querySelectorAll);Element.prototype.querySelectorAll=function(t){return o.apply(this,arguments)}}()}}();var q=function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:x;if(!(this instanceof t))return new t(n);this.options={},R(this.options,x,n),_(this)};return q.init=function(t){return console.warn(\"Depreciated: Macy.init will be removed in v3.0.0 opt to use Macy directly like so Macy({ /*options here*/ }) \"),new q(t)},q.prototype.recalculateOnImageLoad=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e(this,f(\"img\",this.container),!t)},q.prototype.runOnImageLoad=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=f(\"img\",this.container);return this.on(this.constants.EVENT_IMAGE_COMPLETE,t),n&&this.on(this.constants.EVENT_IMAGE_LOAD,t),e(this,o,n)},q.prototype.recalculate=function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return e&&this.queue.clear(),this.queue.add(function(){return V(t,n,e)})},q.prototype.remove=function(){window.removeEventListener(\"resize\",this.resizer),m(this.container.children,function(t){t.removeAttribute(\"data-macy-complete\"),t.removeAttribute(\"style\")}),this.container.removeAttribute(\"style\")},q.prototype.reInit=function(){this.recalculate(!0,!0),this.emit(this.constants.EVENT_INITIALIZED),window.addEventListener(\"resize\",this.resizer),this.container.style.position=\"relative\"},q.prototype.on=function(t,n){this.events.on(t,n)},q.prototype.emit=function(t,n){this.events.emit(t,n)},q.constants={EVENT_INITIALIZED:\"macy.initialized\",EVENT_RECALCULATED:\"macy.recalculated\",EVENT_IMAGE_LOAD:\"macy.image.load\",EVENT_IMAGE_ERROR:\"macy.image.error\",EVENT_IMAGE_COMPLETE:\"macy.images.complete\",EVENT_RESIZE:\"macy.resize\"},q.prototype.constants=q.constants,q});\n"], "fixing_code": ["<?php\n/**\n * Layout Assistance\n *\n * @package   SellMedia\n * @author    Thad Allender <support@graphpaperpress.com>\n * @license   GPL-2.0+\n * @link      http://graphpaperpress.com\n * @copyright 2014 Graph Paper Press\n */\n\n/**\n * Plugin class for standardizing archive and search layouts for Sell Media in themes.\n *\n * @package SellMediaLayouts\n * @author  Thad Allender <support@graphpaperpress.com>\n */\nclass SellMediaLayouts {\n\n\t/**\n\t *\n\t * Settings\n\t *\n\t *\n\t * Retrieves the settings for Sell Media.\n\t *\n\t * @since    0.0.1\n\t *\n\t * @var      string\n\t */\n\tprivate $settings = null;\n\n\t/**\n\t * Initialize the plugin by setting localization and loading public scripts\n\t * and styles.\n\t *\n\t * @since     0.0.1\n\t */\n\tpublic function __construct() {\n\n\t\t// Settings\n\t\t$this->settings = sell_media_get_plugin_options();\n\n\t\t// Post class filter\n\t\tadd_filter( 'post_class', array( $this, 'post_class' ) );\n\n\t\t// Body class filter\n\t\tadd_filter( 'body_class', array( $this, 'body_class' ) );\n\n\t\t// Menu class filter\n\t\tadd_filter( 'nav_menu_css_class', array( $this, 'nav_menu_css_class' ), 10, 2 );\n\n\t\t// Grid item container class\n\t\tadd_filter( 'sell_media_grid_item_container_class', array( $this, 'grid_container_class' ), 10, 1 );\n\n\t\t// Grid item class\n\t\tadd_filter( 'sell_media_grid_item_class', array( $this, 'grid_class' ), 10, 3 );\n\n\t\t// Before the content\n\t\tadd_filter( 'the_content', array( $this, 'before_content' ) );\n\n\t\t// After the content\n\t\tadd_filter( 'the_content', array( $this, 'after_content' ) );\n\n\t\t// Remove prepended attachment from attachment template in core WP\n\t\tadd_filter( 'prepend_attachment', array( $this, 'remove_prepend_attachment' ) );\n\n\t\t// Content loop\n\t\tadd_filter( 'sell_media_content_loop',  array( $this, 'content_loop' ), 10, 3 );\n\n\t}\n\n\t/**\n\t * Post class filter.\n\t * Adds a new post class so we can style individual grids\n\t *\n\t * @since    0.0.1\n\t *\n\t * @return    html\n\t */\n\tpublic function post_class( $classes ) {\n\t\tglobal $post;\n\t\tif ( is_post_type_archive( 'sell_media_item' ) ) {\n\t\t\t$classes[] = apply_filters( 'sell_media_grid_item_class', 'sell-media-grid-item', $post->ID );\n\t\t}\n\n\t\tforeach ( ( get_the_category( $post->ID ) ) as $category ) {\n\t\t\t$classes[] = $category->category_nicename;\n\t\t}\n\t\treturn $classes;\n\t}\n\n\t/**\n\t * Body class filter\n\t * Add body classes to assist layouts\n\t *\n\t * @since    0.0.1\n\t *\n\t * @return    html\n\t */\n\tpublic function body_class( $classes ) {\n\t\tglobal $post;\n\n\t\tif ( empty( $post ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Pages assigned with shortcode\n\t\t$pages = sell_media_get_pages_array();\n\t\tforeach ( $pages as $page ) {\n\t\t\t$setting = $page . '_page';\n\t\t\tif ( isset( $this->settings->$setting ) && $post->ID === $this->settings->$setting ) {\n\t\t\t\t$classes[] = 'sell-media-page';\n\t\t\t\t$classes[] = 'sell-media-' . str_replace( '_', '-', $setting );\n\t\t\t}\n\t\t}\n\n\t\t// Shortcodes\n\t\t$shortcodes = array( 'sell_media_thanks', 'sell_media_searchform', 'sell_media_item', 'sell_media_all_items', 'sell_media_checkout', 'sell_media_download_list', 'sell_media_price_group', 'sell_media_list_all_collections', 'sell_media_login_form' );\n\t\tforeach ( $shortcodes as $shortcode ) {\n\t\t\tif ( isset( $post->post_content ) && has_shortcode( $post->post_content, $shortcode ) ) {\n\t\t\t\t$classes[] = 'sell-media-page';\n\t\t\t}\n\t\t}\n\n\t\t// All Sell Media pages\n\t\tif ( ! empty( $post->ID ) && 'sell_media_item' === get_post_type( $post->ID ) ) {\n\t\t\t$classes[] = 'sell-media-page';\n\t\t}\n\n\t\t// Layout\n\t\tif ( isset( $this->settings->layout ) ) {\n\t\t\t$classes[] = $this->settings->layout;\n\t\t}\n\n\t\t// Gallery\n\t\tif ( is_singular( 'sell_media_item' ) && sell_media_has_multiple_attachments( $post->ID ) ) {\n\t\t\t$classes[] = 'sell-media-gallery-page';\n\t\t}\n\n\t\t// Theme\n\t\t$theme = wp_get_theme();\n\t\t$classes[] = 'theme-' . sanitize_title_with_dashes( $theme->get( 'Name' ) );\n\n\t\treturn $classes;\n\t}\n\n\t/**\n\t * Menu class filter\n\t * Add classes to menu items\n\t *\n\t * @since    0.0.1\n\t *\n\t * @return    html\n\t */\n\tpublic function nav_menu_css_class( $classes, $item ) {\n\n\t\tif ( 'page' === $item->object ) {\n\t\t\tif ( isset( $this->settings->lightbox_page ) && $this->settings->lightbox_page === $item->object_id ) {\n\t\t\t\t$classes[] = 'lightbox-menu';\n\t\t\t}\n\t\t\tif ( isset( $this->settings->checkout_page ) && $this->settings->checkout_page === $item->object_id ) {\n\t\t\t\tif ( in_array( 'total', $item->classes, true ) ) {\n\t\t\t\t\t$classes[] = 'checkout-total';\n\t\t\t\t} else {\n\t\t\t\t\t$classes[] = 'checkout-qty';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $classes;\n\t}\n\n\t/**\n\t * Filter the item container class\n\t * Needed to create the masonry layout\n\t *\n\t * @since  2.1.3\n\t * @return string css class\n\t */\n\tpublic function grid_container_class() {\n\t\t$class = 'sell-media-grid-item-container';\n\n\t\tif ( 'sell-media-masonry' === $this->settings->thumbnail_layout ) {\n\t\t\t$class = 'sell-media-grid-item-masonry-container';\n\t\t}\n\n\t\tif ( 'sell-media-horizontal-masonry' === $this->settings->thumbnail_layout ) {\n\t\t\t$class = 'horizontal-masonry-columns';\n\t\t\t// $class = 'sell-media-grid-item-horizontal-masonry-container';\n\t\t}\n\n\t\treturn $class;\n\t}\n\n\t/**\n\t * Filter the grid item class\n\t * Creates a 1, 2, 3, 4, 5 column or masonry layout\n\t *\n\t * @since  2.1.3\n\t * @return string css class\n\t */\n\tpublic function grid_class( $class = '', $post_id = '', $args = '' ) {\n\t\tif ( isset( $args['context'] ) && 'widget' == $args['context'] ) {\n\t\t\treturn $class . ' sell-media-three-col';\n\t\t}\n\n\t\tif ( ! empty( $this->settings->thumbnail_layout ) ) {\n\t\t\treturn $class . ' ' . $this->settings->thumbnail_layout;\n\t\t}\n\t}\n\n\t/**\n\t * Before the content on sell media and attachment pages\n\t */\n\tpublic function before_content( $content ) {\n\n\t\tglobal $post;\n\t\t$post_id = $post->ID;\n\n\n\t\t// show on single sell media pages\n\t\tif ( is_singular( 'sell_media_item' ) || sell_media_attachment( $post_id ) || sell_media_is_search() ) {\n\n\t\t\t// bail if it's password protected item\n\t\t\tif ( post_password_required( $post ) || ( isset( $post->post_parent ) && post_password_required( $post->post_parent ) ) ) {\n\t\t\t\treturn $content;\n\t\t\t}\n\n\t\t\t$has_multiple_attachments = sell_media_has_multiple_attachments( $post_id );\n\t\t\t$wrap = ( ! $has_multiple_attachments || 'attachment' === get_post_type( $post_id ) ) ? true : false;\n\t\t\t$new_content = '';\n\n\t\t\t// only wrap content if a single image/media is being viewed\n\t\t\tif ( $wrap ) {\n\t\t\t\t$new_content .= '<div class=\"sell-media-content\">';\n\t\t\t}\n\n\t\t\t$new_content .= sell_media_breadcrumbs();\n\t\t\tif ( ! sell_media_is_search() ) {\n\t\t\t\t$new_content .= sell_media_get_media();\n\t\t\t}\n\t\t\t$new_content .= $content;\n\n\t\t\t// only wrap content if a single image/media is being viewed\n\t\t\tif ( $wrap ) {\n\t\t\t\t$new_content .= '</div>';\n\t\t\t}\n\n\t\t\t$content = $new_content;\n\n\t\t\t// set the post views, used for popular query\n\t\t\tsell_media_set_post_views( $post_id );\n\t\t}\n\n\t\treturn apply_filters( 'sell_media_content', $content );\n\n\t}\n\n\t/**\n\t * After content filter\n\t *\n\t * Append buy button and add action to append more stuff (lightbox, keywords, etc)\n\t *\n\t * @since 1.9.2\n\t * @param int $post_id Item ID\n\t * @return void\n\t */\n\tpublic function after_content( $content ) {\n\n\t\tglobal $post;\n\t\t$post_id = $post->ID;\n\n\t\tif ( post_password_required( $post ) || ( isset( $post->post_parent ) && post_password_required( $post->post_parent ) ) ) {\n\t\t\treturn $content;\n\t\t}\n\n\t\t// only show on single sell media and attachment pages\n\t\tif ( is_main_query() && is_singular( 'sell_media_item' ) && ! sell_media_has_multiple_attachments( $post_id ) || sell_media_attachment( $post_id ) ) {\n\n\t\t\tif ( is_singular( 'attachment' ) ) {\n\t\t\t\t$attachment_id = $post_id;\n\t\t\t\t$post_id = get_post_meta( $post_id, '_sell_media_for_sale_product_id', true );\n\t\t\t} else {\n\t\t\t\t$attachment_id = sell_media_get_attachment_id( $post_id );\n\t\t\t}\n\n\t\t\tob_start();\n\t\t\t$enable_ecommerce = apply_filters( 'sell_media_enable_ecommerce', true, $post_id, $attachment_id );\n\t\t\tif ( $enable_ecommerce ) {\n\t\t\t\techo '<div class=\"sell-media-meta\">';\n\t\t\t\tdo_action( 'sell_media_above_buy_button', $post_id, $attachment_id );\n\t\t\t\tdo_action( 'sell_media_add_to_cart_fields', $post_id, $attachment_id );\n\t\t\t\tdo_action( 'sell_media_below_buy_button', $post_id, $attachment_id );\n\t\t\t\techo '</div>';\n\t\t\t}\n\n\t\t\techo do_action( 'sell_media_below_content', $post_id, $attachment_id );\n\n\t\t\t$content .= ob_get_contents();\n\t\t\tob_end_clean();\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Remove the prepended attachment from WordPress core attachment template\n\t * since we're already appending it via the_content filter\n\t * @return\n\t */\n\tfunction remove_prepend_attachment( $p ) {\n\n\t\tglobal $post;\n\n\t\tif ( sell_media_attachment( $post->ID ) ) {\n\t\t\t$p = '';\n\t\t}\n\n\t\treturn $p;\n\t}\n\n\t/**\n\t * Main content loop used in all themes\n\t * @return string html\n\t */\n\tfunction content_loop( $post_id, $i, $args = array() ) {\n\n\t\t$original_id = $post_id;\n\t\tif ( post_password_required( $original_id ) && sell_media_is_search() ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( 'attachment' === get_post_type( $post_id ) ) {\n\t\t\t$attachment_id = $post_id; // always and attachment\n\t\t\t$post_id = get_post_meta( $attachment_id, $key = '_sell_media_for_sale_product_id', true ); // always a sell_media_item\n\t\t} else {\n\t\t\t$attachment_id = sell_media_get_attachment_id( $post_id ); // always an attachment\n\t\t}\n\n\t\t$class = apply_filters( 'sell_media_grid_item_class', 'sell-media-grid-item', $post_id, $args );\n\t\tif ( ! sell_media_has_multiple_attachments( $post_id ) ) {\n\t\t\t$class .= ' sell-media-grid-single-item';\n\t\t}\n\t\t$custom_style = '';\n\t\tif ( 'sell-media-horizontal-masonry' === $this->settings->thumbnail_layout ) {\n\t\t\t$class = 'horizontal-masonry-column overlay-container ';\n\t\t\t\t\t\t\n\t\t\t$image_data     = wp_get_attachment_image_src( $attachment_id, 'medium' );\n\t\t\t$image_width    = $image_data[1];\n\t\t\t$image_height   = $image_data[2];\n\t\t\t$width          = $image_width * 250 / $image_height;\n\t\t\t$padding_bottom = $image_height / $image_width * 100;\n\n\t\t\t$html  = '<div id=\"sell-media-' . $original_id . '\" class=\"' . $class . '\" style=\"width:' . $width . 'px; flex-grow:' . $width . '; \" >';\n\t\t} else {\n\t\t\n\t\t\t$html  = '<div id=\"sell-media-' . $original_id . '\" class=\"' . $class . '\">';\n\t\t}\n\t\t\n\t\t$html .= '<a href=\"' . esc_url( get_permalink( $original_id ) ) . '\" ' . sell_media_link_attributes( $original_id ) . ' class=\"sell-media-item\">';\n\t\tif ( 'sell-media-horizontal-masonry' === $this->settings->thumbnail_layout ) {\n\t\t\t$html .= '<i style=\"padding-bottom:' . $padding_bottom . '%;\" ></i>';\n\t\t}\n\t\t// Show titles?\n\t\tif ( isset( $this->settings->titles ) && 0 != $this->settings->titles && is_main_query() ) {\n\t\t\t$html .= '<h2 class=\"sell-media-entry-title\">' . get_the_title( $original_id ) . '</h2>';\n\t\t}\n\n\t\t$html .= sell_media_item_icon( $original_id, apply_filters( 'sell_media_thumbnail', 'medium' ), false );\n\n\t\t$enable_ecommerce = apply_filters( 'sell_media_enable_ecommerce', true, $post_id, $attachment_id );\n\n\t\t// Show quick view?\n\t\tif ( isset( $this->settings->quick_view ) && 0 != $this->settings->quick_view && is_main_query() ) {\n\t\t\tif ( sell_media_has_multiple_attachments( $post_id ) && ( is_tax( array( 'collection' ) ) || is_post_type_archive( 'sell_media_item' ) ) ) {\n\t\t\t\t$html .= '<div class=\"sell-media-view-gallery\">' . apply_filters( 'sell_media_view_gallery_text', __( 'View Gallery', 'sell_media' ) ) . '</div>';\n\t\t\t} elseif ( $enable_ecommerce ) {\n\t\t\t\t$html .= '<div class=\"sell-media-quick-view\" data-product-id=\"' . esc_attr( $post_id ) . '\" data-attachment-id=\"' . esc_attr( $attachment_id ) . '\">' . apply_filters( 'sell_media_quick_view_text', __( 'Quick View', 'sell_media' ), $post_id, $attachment_id ) . '</div>';\n\t\t\t}\n\t\t}\n\t\t$html .= '</a>';\n\t\t$html .= '</div>';\n\n\t\treturn apply_filters( 'sell_media_filter_content_loop', $html, $original_id, $i );\n\t}\n\n}\n", "<?php\n\n/**\n * Search Class\n *\n * @package Sell Media\n * @author Thad Allender <support@graphpaperpress.com>\n */\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nclass SellMediaSearch {\n\n\tprivate $settings;\n\n\t/**\n\t * Init\n\t */\n\tpublic function __construct() {\n\n\t\t// Restrict in admin area.\n\t\tif ( is_admin() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$this->settings = sell_media_get_plugin_options();\n\n\t\t// Add a media search form shortcode\n\t\tadd_shortcode( 'sell_media_search', array( $this, 'form' ) );\n\n\t\t// Legacy add a media search form shortcode\n\t\tadd_shortcode( 'sell_media_searchform', array( $this, 'form' ) );\n\n\t\t// Add custom search query vars\n\t\tadd_filter( 'query_vars', array( $this, 'add_query_vars' ) );\n\t}\n\n\n\t/**\n\t * Add custom search query vars\n\t *\n\t * @since 2.4.2\n\t */\n\tfunction add_query_vars( $vars ) {\n\t\t$vars[] = 'search_query';\n\t\t$vars[] = 'search_file_type';\n\t\treturn $vars;\n\t}\n\n\n\t/**\n\t * Search form\n\t *\n\t * @since 1.8.7\n\t */\n\tpublic function form( $url = null, $used = null ) {\n\n\t\t$settings = sell_media_get_plugin_options();\n\t\t$html = '';\n\n\t\t// Show a message to admins if they don't have search page set in settings.\n\t\tif ( current_user_can( 'administrator' ) && empty( $settings->search_page ) ) {\n\t\t\t$html .= esc_html__( 'For search to work, you must assign your Search Page in Sell Media -> Settings.', 'sell_media' );\n\t\t\treturn $html;\n\t\t}\n\n\t\t// Get the search term(s)\n\t\t$search_term = htmlspecialchars(trim(stripslashes(strip_tags(get_query_var( 'search_query' )))));\n\n\t\t// Get the file type\n\t\t$search_file_type = get_query_var( 'search_file_type' );\n\n\t\t// only use this method if it hasn't already been used on the page\n\t\tstatic $used;\n\t\tif ( ! isset( $used ) ) {\n\t\t\t$used = true;\n\n\t\t\t$html .= '<div class=\"sell-media-search\">';\n\t\t\t$html .= '<form role=\"search\" method=\"get\" id=\"sell-media-search-form\" class=\"sell-media-search-form\" action=\"' . esc_url( get_permalink( $settings->search_page ) ) . '\">';\n\t\t\t$html .= '<div class=\"sell-media-search-inner cf\">';\n\n\t\t\t// Visible search options wrapper\n\t\t\t$html .= '<div id=\"sell-media-search-visible\" class=\"sell-media-search-visible cf\">';\n\n\t\t\t// Input field\n\t\t\t$html .= '<div id=\"sell-media-search-query\" class=\"sell-media-search-field sell-media-search-query\">';\n\t\t\t$html .= '<input type=\"text\" value=\"' . $search_term . '\" name=\"search_query\" id=\"sell-media-search-text\" class=\"sell-media-search-text\" placeholder=\"' . apply_filters( 'sell_media_search_placeholder', sprintf( __( 'Search for %1$s (comma separated)', 'sell_media' ), empty( $settings->post_type_slug ) ? 'keywords' : $settings->post_type_slug ) ) . '\"/>';\n\t\t\t$html .= '</div>';\n\n\t\t\t// Submit button\n\t\t\t$html .= '<div id=\"sell-media-search-submit\" class=\"sell-media-search-field sell-media-search-submit\">';\n\t\t\t$html .= '<input type=\"submit\" id=\"sell-media-search-submit-button\" class=\"sell-media-search-submit-button\" value=\"' . apply_filters( 'sell_media_search_button', __( 'Search', 'sell_media' ) ) . '\" />';\n\t\t\t$html .= '</div>';\n\n\t\t\t$html .= '</div>';\n\n\t\t\t// Hidden search options wrapper\n\t\t\t$html .= '<div id=\"sell-media-search-hidden\" class=\"sell-media-search-hidden cf\">';\n\n\t\t\t// File type field\n\t\t\t$html .= '<div id=\"sell-media-search-file-type\" class=\"sell-media-search-field sell-media-search-file-type\">';\n\t\t\t$html .= '<label for=\"search_file_type\">' . esc_html__( 'File Type', 'sell_media' ) . '</label>';\n\t\t\t$html .= '<select name=\"search_file_type\">';\n\t\t\t$html .= '<option value=\"\">' . esc_html__( 'All', 'sell_media' ) . '</option>';\n\t\t\t$mimes = array( 'image', 'video', 'audio' );\n\t\t\tforeach ( $mimes as $mime ) {\n\t\t\t\t$selected = ( $search_file_type === $mime ) ? 'selected' : '';\n\t\t\t\t$html .= '<option value=\"' . $mime . '\" ' . $selected . '>';\n\t\t\t\t$html .= ucfirst( $mime );\n\t\t\t\t$html .= '</option>';\n\t\t\t}\n\n\t\t\t$html .= '</select>';\n\t\t\t$html .= '</div>';\n\n\t\t\t// Hidden search options wrapper\n\t\t\t$html .= '</div>';\n\n\t\t\t$html .= '</div>';\n\t\t\t$html .= '</form>';\n\t\t\t$html .= '</div>';\n\n\t\t}\n\n\t\t// only run the query on the actual search results page.\n\t\tif ( is_page( $settings->search_page ) && in_the_loop() ) {\n\n\t\t\t// Find comma-separated search terms and format into an array\n\t\t\t$search_term_cleaned = preg_replace( '/\\s*,\\s*/', ',', $search_term );\n\t\t\t$search_terms = str_getcsv( $search_term_cleaned, ',' );\n\n\t\t\t// Exclude negative keywords in search query like \"-cow\"\n\t\t\t$negative_search_terms = '';\n\t\t\t$negative_search_terms = preg_grep( '/\\B-[^\\B]+/', $search_terms );\n\t\t\t$negative_search_terms = preg_replace( '/[-]/', '', $negative_search_terms );\n\n\t\t\t// now remove negative search terms from search terms\n\t\t\t$search_terms = array_diff( $search_terms, $negative_search_terms );\n\t\t\t$search_terms = array_filter( $search_terms );\n\n\t\t\t// Get the file/mimetype\n\t\t\t$mime_type = $this->get_mimetype( $search_file_type );\n\n\t\t\t// Current pagination\n\t\t\t$paged = ( get_query_var( 'paged' ) ) ? get_query_var( 'paged' ) : 1;\n\n\t\t\tif ( ! empty( $settings->search_relation ) && 'and' === $settings->search_relation ) {\n\t\t\t\t$tax_array = array();\n\t\t\t\tforeach ( $search_terms as $s ) {\n\t\t\t\t\t$array = array(\n\t\t\t\t\t\t'taxonomy' => 'keywords',\n\t\t\t\t\t\t'field'    => 'name',\n\t\t\t\t\t\t'terms'    => $s,\n\t\t\t\t\t);\n\t\t\t\t\t$tax_array[] = $array;\n\t\t\t\t}\n\t\t\t\tforeach ( $negative_search_terms as $n ) {\n\t\t\t\t\t$array = array(\n\t\t\t\t\t\t'taxonomy' => 'keywords',\n\t\t\t\t\t\t'field'    => 'name',\n\t\t\t\t\t\t'terms'    => array( $n ),\n\t\t\t\t\t\t'operator' => 'NOT IN'\n\t\t\t\t\t);\n\t\t\t\t\t$tax_array[] = $array;\n\t\t\t\t}\n\n\t\t\t\t$tax_query = array(\n\t\t\t\t\t'relation' => 'AND',\n\t\t\t\t\t$tax_array\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Add original full keyword to the search terms array\n\t\t\t\t// This ensures that multiple word keyword search works\n\t\t\t\t$one_big_keyword = str_replace( ',', ' ', $search_term );\n\t\t\t\t$search_terms[] .= $one_big_keyword;\n\t\t\t\t$tax_query = array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'taxonomy' => 'keywords',\n\t\t\t\t\t\t'field'    => 'name',\n\t\t\t\t\t\t'terms'    => $search_terms,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// The Query\n\t\t\t$args = array(\n\t\t\t\t'post_type' => 'attachment',\n\t\t\t\t'paged'\t\t=> $paged,\n\t\t\t\t'post_status' => array( 'publish', 'inherit' ),\n\t\t\t\t'post_mime_type' => $mime_type,\n\t\t\t\t'post_parent__in' => sell_media_ids(),\n\t\t\t\t'tax_query' => $tax_query\n\t\t\t);\n\t\t\t$args = apply_filters( 'sell_media_search_args', $args );\n\t\t\t$search_query = new WP_Query( $args );\n\t\t\t$i = 0;\n\n\t\t\t// The Loop\n\t\t\tif ( $search_query->have_posts() ) {\n\n\t\t\t\t$html .= '<p class=\"sell-media-search-results-text\">' . sprintf( esc_html__( 'We found %1$s results for \"%2$s.\"', 'sell_media' ), $search_query->found_posts, $search_term ) . '</p>';\n\n\t\t\t\t// hook for related keywords, etc.\n\t\t\t\t$html .= sell_media_format_related_search_results( $search_terms );\n\n\t\t\t\t//$html .= $this->search_help();\n\n\t\t\t\t$html .= '<div id=\"sell-media-search-results\" class=\"sell-media\">';\n\t\t\t\t$html .= '<div class=\"' . apply_filters( 'sell_media_grid_item_container_class', 'sell-media-grid-item-container' ) . '\">';\n\n\t\t\t\twhile ( $search_query->have_posts() ) {\n\t\t\t\t\t$search_query->the_post();\n\n\t\t\t\t\t$post_id = get_the_ID();\n\t\t\t\t\t$parent_id = get_post_meta( $post_id, $key = '_sell_media_for_sale_product_id', true );\n\n\t\t\t\t\t$html .= '<div id=\"sell-media-' . $post_id . '\" class=\"' . apply_filters( 'sell_media_grid_item_class', 'sell-media-grid-item', $parent_id ) . ' sell-media-grid-single-item\">';\n\t\t\t\t\t$html .= '<a href=\"' . esc_url( get_permalink() ) . '\" ' . sell_media_link_attributes( $post_id ) . ' class=\"sell-media-item\">';\n\n\t\t\t\t\tif ( ! empty( $settings->titles ) ) {\n\t\t\t\t\t\t$html .= '<h2 class=\"entry-title\">' . get_the_title() . '</h2>';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( wp_get_attachment_image( $post_id, apply_filters( 'sell_media_thumbnail', 'medium' ) ) ) {\n\n\t\t\t\t\t\t$html .= wp_get_attachment_image( $post_id, apply_filters( 'sell_media_thumbnail', 'medium' ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$html .= sell_media_item_icon( $parent_id, apply_filters( 'sell_media_thumbnail', 'medium' ), false );\n\t\t\t\t\t}\n\t\t\t\t\t$html .= '<div class=\"sell-media-quick-view\" data-product-id=\"' . esc_attr( $parent_id ) . '\" data-attachment-id=\"' . esc_attr( $post_id ) . '\">' . apply_filters( 'sell_media_quick_view_text', __( 'Quick View', 'sell_media' ), $parent_id, $post_id ) . '</div>';\n\t\t\t\t\t$html .= '</a>';\n\t\t\t\t\t$html .= '</div>';\n\t\t\t\t}\n\t\t\t\t$html .= '</div>';\n\t\t\t\t$html .= '</div>';\n\t\t\t\t$html .= sell_media_pagination_filter( $search_query->max_num_pages );\n\t\t\t\t$text = esc_html__( 'Explore more from our store', 'sell_media' );\n\t\t\t\t$html .= '<p class=\"sell-media-search-results-text\">' . $text . '</p>';\n\t\t\t\t$html .= do_shortcode( '[sell_media_filters]' );\n\n\t\t\t} else {\n\n\t\t\t\tif ( $search_terms ) {\n\t\t\t\t\t$text = sprintf( __( 'Sorry, no results for \"%1$s.\"', 'sell_media' ), $search_term );\n\t\t\t\t\t$html .= $this->search_help();\n\t\t\t\t} else {\n\t\t\t\t\t$html .= $this->search_help();\n\t\t\t\t}\n\t\t\t\t$html .= '<p class=\"sell-media-search-results-text\">' . $text . '</p>';\n\t\t\t\t$html .= do_shortcode( '[sell_media_filters]' );\n\t\t\t}\n\n\t\t\t/* Restore original Post Data */\n\t\t\twp_reset_postdata();\n\t\t\t$i = 0;\n\n\t\t} // end search results page check\n\n\t\treturn apply_filters( 'sell_media_search_results', $html );\n\t}\n\n\tpublic function search_help() {\n\n\t\t$html  = '<div class=\"sell-media-search-help\">';\n\t\t$html .= '<h6>' . esc_html__( 'Search Tips', 'sell_media' ) . '</h6>';\n\t\t$html .= '<ul>';\n\t\t$html .= '<li>' . esc_html__( 'Separate keywords with a comma.', 'sell_media' ) . '</li>';\n\t\t$html .= '<li>' . esc_html__( 'Use fewer keywords to expand search results.', 'sell_media' ) . '</li>';\n\t\t$html .= '<li>' . esc_html__( 'Use negative keywords (like -dogs) to exclude dogs from search results.', 'sell_media' ) . '</li>';\n\t\t$html .= '</ul>';\n\t\t$html .= '</div>';\n\n\t\treturn $html;\n\t}\n\n\t/**\n\t * Get the select value of the filetype field and conver it into a WP mimtype for WP_Query\n\t *\n\t * @param  string \t\tThe filetype (image, video, audio)\n\t * @return array \t\tThe WP mimetype format for each filetype\n\t */\n\tprivate function get_mimetype( $filetype ) {\n\t\tif ( 'image' === $filetype ) {\n\t\t\t$mime = array( 'image/jpeg', 'image/gif', 'image/png', 'image/bmp', 'image/tiff', 'image/x-icon' );\n\t\t} elseif ( 'video' === $filetype ) {\n\t\t\t$mime = array( 'video/x-ms-asf', 'video/x-ms-wmv', 'video/x-ms-wmx', 'video/x-ms-wm', 'video/avi', 'video/divx', 'video/x-flv', 'video/quicktime', 'video/mpeg', 'video/mp4', 'video/ogg', 'video/webm', 'video/x-matroska' );\n\t\t} elseif ( 'audio' === $filetype ) {\n\t\t\t$mime = array( 'audio/mpeg', 'audio/x-realaudio', 'audio/wav', 'audio/ogg', 'audio/midi', 'audio/x-ms-wma', 'audio/x-ms-wax', 'audio/x-matroska' );\n\t\t} else {\n\t\t\t$mime = '';\n\t\t}\n\n\t\treturn $mime;\n\t}\n\n\n\n}\n", "<?php\n\n/**\n * Helper Functions\n *\n * @package Sell Media\n * @author Thad Allender <support@graphpaperpress.com>\n */\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Template Redirect\n * @since 1.0.4\n */\nfunction sell_media_template_redirect( $original_template ) {\n\n\tglobal $post;\n\n\t$post_type = array( 'sell_media_item', 'attachment' );\n\t$sell_media_taxonomies = get_object_taxonomies( $post_type );\n\t$sm_archive_template = SELL_MEDIA_PLUGIN_DIR . '/themes/archive.php';\n\n\t/**\n\t * Archive -- Check if this is an archive page AND post type is sell media\n\t */\n\tif ( is_post_type_archive( $post_type ) || is_tax( $sell_media_taxonomies ) ) {\n\t\t// allow users to override SM archive template by adding their own to their theme\n\t\tif ( $overridden_template = locate_template( 'archive-sell-media.php' ) ) {\n\t\t\t$template = $overridden_template;\n\t\t} elseif ( file_exists( $sm_archive_template ) ) {\n\t\t\t$template = $sm_archive_template;\n\t\t} else {\n\t\t\t$template = $original_template;\n\t\t}\n\t} elseif ( ! empty( $post ) && sell_media_attachment( $post->ID ) ) {\n\t\t// sell media attachments should use single.php, not attachment.php\n\t\t// not all attachment.php templates contain the_content\n\t\t// which we modify heavily using filters.\n\t\t$template = locate_template( 'single.php' );\n\t} else {\n\t\t$template = $original_template;\n\t}\n\n\treturn $template;\n}\nadd_filter( 'template_include', 'sell_media_template_redirect', 6 );\n\n/**\n * Loads a template from a specified path\n *\n * @package Ajax\n * @uses load_template()\n * @since 0.1\n */\nfunction sell_media_load_template() {\n\n\tif ( $overridden_template = locate_template( 'cart.php' ) ) {\n\t\tload_template( apply_filters( 'sell_media_cart_template', $overridden_template ) );\n\t} else {\n\t\tload_template( apply_filters( 'sell_media_cart_template', SELL_MEDIA_PLUGIN_DIR . '/themes/cart.php' ) );\n\t}\n\tdie();\n}\nadd_action( 'wp_ajax_nopriv_sell_media_load_template', 'sell_media_load_template' );\nadd_action( 'wp_ajax_sell_media_load_template', 'sell_media_load_template' );\n\n\n/**\n * Redirect admins to the WP dashboard and other users Sell Media Dashboard\n *\n * @package Sell Media\n * @since 1.4.6\n */\nfunction sell_media_redirect_login_dashboard( $redirect_to, $request, $user ) {\n\tif ( isset( $user->roles ) && is_array( $user->roles ) ) {\n\t\t// check for customers\n\t\tif ( in_array( 'sell_media_customer', $user->roles ) ) {\n\t\t\t$settings = sell_media_get_plugin_options();\n\t\t\t// redirect them to the dashboard\n\t\t\t$redirect_to = get_permalink( $settings->dashboard_page );\n\t\t}\n\t}\n\treturn $redirect_to;\n}\nadd_filter( 'login_redirect', 'sell_media_redirect_login_dashboard', 10, 3 );\n\n/**\n * An array of pages required for plugin setup.\n * No need to define this in multiple places.\n *\n * @return an array of pages required for plugin setup.\n */\nfunction sell_media_get_pages_array() {\n\t$pages = array( 'checkout', 'thanks', 'dashboard', 'login', 'search', 'lightbox' );\n\n\treturn $pages;\n}\n\n/**\n * Checks if on sell media gallery page\n *\n * @return boolean true/false\n * @since 2.0.1\n */\nfunction sell_media_page() {\n\tglobal $post;\n\t$settings = sell_media_get_plugin_options();\n\n\tif ( $post\n\t&& ( 'sell_media_item' === get_post_type( $post->ID )\n\tor sell_media_attachment( $post->ID )\n\tor is_tax( 'collection' )\n\tor is_tax( 'keywords' )\n\tor is_tax( 'creator' )\n\tor ( isset( $settings->search_page ) && is_page( $settings->search_page ) ) ) ) {\n\t\treturn true;\n\t}\n}\n\n/**\n * Checks if attachment is for sale\n *\n * @var  $post_id the post or attachment id\n * @return  boolean true if has post meta (the product id)\n */\nfunction sell_media_attachment( $post_id = null ) {\n\n\tglobal $post;\n\t$sale_product_id = get_post_meta( $post->ID, $key = '_sell_media_for_sale_product_id' );\n\tif ( is_singular( 'attachment' ) && ! empty( $sale_product_id ) ) {\n\t\treturn true;\n\t}\n}\n\n/**\n * Builds html select field\n *\n * @since 0.1\n */\nfunction sell_media_build_options( $taxonomy = null ) {\n\n\tif ( is_array( $taxonomy ) ) {\n\t\textract( $taxonomy ); }\n\n\tif ( ! isset( $label ) ) {\n\t\t$label = $taxonomy; }\n\n\t// @todo need to merge\n\t$defaults = array(\n\t\t'value' => 'term_id',\n\t);\n\n\t// white list\n\tif ( empty( $prepend ) ) {\n\t\t$prepend = null; }\n\n\tif ( empty( $current_term ) ) {\n\t\t$current_term = null; }\n\n\textract( $defaults );\n\n\t/** All Terms */\n\t$args = array(\n\t\t'orderby' => 'id',\n\t\t'hide_empty' => false,\n\t\t );\n\n\t$terms = null;\n\n\tif ( isset( $post_id ) ) {\n\t\t$terms = wp_get_post_terms( $post_id, $taxonomy );\n\t} else {\n\t\t$terms = get_terms( $taxonomy, $args );\n\t}\n\n\t?>\n\t<?php if ( $terms ) : ?>\n\t\t<?php do_action( 'sell_media_build_options_before' ); ?>\n\t\t<?php foreach ( $terms as $term ) : ?>\n\t\t\t<?php $price = str_replace( '%', '', get_term_meta( $term->term_id, 'markup', true ) ); ?>\n\t\t\t<option\n\t\t\t\tvalue=\"<?php echo $prepend; ?><?php echo $term->$value; ?>\"\n\t\t\t\tclass=\"taxonomy-<?php echo $taxonomy; ?> term-<?php echo $term->slug; ?> <?php echo $taxonomy; ?>-<?php echo $term->term_id; ?>\"\n\t\t\t\tdata-value=\"<?php echo $term->slug; ?>\"\n\t\t\t\tdata-taxonomy=\"<?php echo $taxonomy; ?>\"\n\t\t\t\tdata-name=\"<?php echo $term->name; ?>\"\n\t\t\t\tdata-price=\"<?php echo $price; ?>\"\n\t\t\t\tid=\"<?php echo $taxonomy; ?>-<?php echo $term->slug; ?>\"\n\t\t\t\ttitle=\"<?php echo $term->description; ?>\"\n\t\t\t\tname=\"<?php echo $taxonomy; ?>\"\n\t\t\t\t>\n\t\t\t<?php echo $term->name; ?>\n\t\t</option>\n\t\t<?php endforeach; ?>\n\t\t</optgroup>\n\t\t<?php do_action( 'sell_media_build_options_after' ); ?>\n\t<?php endif; ?>\n<?php }\n\n\n/**\n * Builds html input field (radio or checkbox)\n *\n * @since 0.1\n */\nfunction sell_media_build_input( $taxonomy = null ) {\n\n\tif ( is_array( $taxonomy ) ) {\n\t\textract( $taxonomy ); }\n\n\tif ( ! isset( $label ) ) {\n\t\t$label = $taxonomy; }\n\n\t// @todo need to merge\n\t$defaults = array(\n\t\t'value' => 'term_id',\n\t);\n\n\t// white list\n\tif ( empty( $prepend ) ) {\n\t\t$prepend = null; }\n\n\tif ( empty( $current_term ) ) {\n\t\t$current_term = null; }\n\n\textract( $defaults );\n\n\t/** All Terms */\n\t$args = array(\n\t\t'orderby' => 'id',\n\t\t'hide_empty' => false,\n\t\t );\n\n\t$terms = null;\n\n\tif ( isset( $post_id ) ) {\n\t\t$terms = wp_get_post_terms( $post_id, $taxonomy );\n\t} else {\n\t\t$terms = get_terms( $taxonomy, $args );\n\t}\n\n\t?>\n\t<?php if ( $terms ) : ?>\n\t\t<?php do_action( 'sell_media_build_input_before' ); ?>\n\t\t<?php foreach ( $terms as $term ) : ?>\n\t\t\t<?php $price = get_term_meta( $term->term_id, 'markup', true ); ?>\n\t\t\t<input\n\t\t\t\tvalue=\"<?php echo $prepend; ?><?php echo $term->$value; ?>\"\n\t\t\t\tclass=\"taxonomy-<?php echo $taxonomy; ?> term-<?php echo $term->slug; ?> <?php echo $taxonomy; ?>-<?php echo $term->term_id; ?>\"\n\t\t\t\tdata-value=\"<?php echo $term->slug; ?>\"\n\t\t\t\tdata-taxonomy=\"<?php echo $taxonomy; ?>\"\n\t\t\t\tdata-name=\"<?php echo $term->name; ?>\"\n\t\t\t\tdata-price=\"<?php echo $price; ?>\"\n\t\t\t\tid=\"<?php echo $taxonomy; ?>-<?php echo $term->slug; ?>\"\n\t\t\t\tname=\"<?php echo $taxonomy; ?>\"\n\t\t\t\ttype=\"<?php echo $type; ?>\"\n\t\t\t\t/>\n\t\t\t<?php echo $term->name; ?> <?php if ( $price ) : ?>+<?php echo $price; ?>%<?php endif; ?><br />\n\t\t<?php endforeach; ?>\n\t\t<?php do_action( 'sell_media_build_input_after' ); ?>\n\t<?php endif; ?>\n<?php }\n\n\n/**\n * Determine if we're on a Sell Media page in the admin\n *\n * @since 0.1\n */\nfunction sell_media_is_sell_media_post_type_page() {\n\n\tif ( isset( $_GET['post_type'] ) && $_GET['post_type'] == 'sell_media_item' ) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\n/**\n * Determine if the license page is being displayed on the admin\n *\n * @since 0.1\n */\nfunction sell_media_is_license_page() {\n\tif ( isset( $_GET['action'] )\n\t\t&& $_GET['action'] == 'edit'\n\t\t&& isset( $_GET['taxonomy'] )\n\t\t&& $_GET['taxonomy'] == 'licenses' ) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\n/**\n * Determine if the license term page is being displayed on the admin\n *\n * @since 0.1\n */\nfunction sell_media_is_license_term_page() {\n\n\tif ( isset( $_GET['post_type'] ) && 'sell_media_item' === $_GET['post_type'] && isset( $_GET['taxonomy'] ) && 'licenses' === $_GET['taxonomy'] ) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\n/**\n * Get Attachments\n *\n * Get attachment ids from post meta.\n * This function checks for both and returns a WP_Post object\n *\n * @param $post_id\n * @return WP_Post object\n * @since 2.0.1\n */\nfunction sell_media_get_attachments( $post_id ) {\n\t$meta = get_post_meta( $post_id, '_sell_media_attachment_id', true );\n\tif ( is_array( $meta ) ) {\n\t\treturn $meta;\n\t}\n\treturn ( ! empty( $meta ) ) ? explode( ',', $meta ) : false;\n}\n\n\n/**\n * Get Attachment ID\n *\n * If the ID is an attachment, the $post_id is the $attachment_id.\n * Otherwise, get the attachments and assign\n * the first as the $attachment_id.\n *\n * @param int $post_id\n * @return int $attachment_id\n * @since 2.0.1\n */\nfunction sell_media_get_attachment_id( $post_id = null ) {\n\n\tif ( 'attachment' === get_post_type( $post_id ) ) {\n\t\t$attachment_id = $post_id;\n\t} else {\n\t\t$attachments = sell_media_get_attachments( $post_id );\n\t\t$attachment_id = ( is_array( $attachments ) && ! empty( $attachments ) ) ? reset( $attachments ) : $post_id;\n\t}\n\n\treturn $attachment_id;\n}\n\n/**\n * Check if item has multiple attachments\n */\nfunction sell_media_has_multiple_attachments( $post_id ) {\n\n\t$attachments = sell_media_get_attachments( $post_id );\n\tif ( is_array( $attachments ) && count( $attachments ) > 0 ) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Get Attachment Meta\n *\n * Returns the attachment meta field.\n * Use to get title, caption, description\n * Or anything else listed here:\n * https://codex.wordpress.org/Function_Reference/wp_prepare_attachment_for_js\n *\n * @param int $post_id\n * @param int $field\n * @uses wp_prepare_attachment_for_js();\n * @return string field (id, caption, title, description, etc)\n * @since 2.0.4\n */\nfunction sell_media_get_attachment_meta( $post_id = null, $field = 'id' ) {\n\n\tif ( sell_media_has_multiple_attachments( $post_id ) ) {\n\t\t$attachment_id = get_query_var( 'id' );\n\t} else {\n\t\t$attachments = sell_media_get_attachments( $post_id );\n\t\t$attachment_id = $attachments[0];\n\t}\n\n\t$attachment_meta = wp_prepare_attachment_for_js( $attachment_id );\n\n\treturn $attachment_meta[ $field ];\n}\n\n\n/**\n * Get the parent id of an attachment.\n * This is used in search and ajax requests for [sell_media_filters]\n * So that we can return only relevant attachments that are for sale\n * And have keywords.\n *\n * @param  attachment_id the attachment id\n * @return integer the parent id\n */\nfunction sell_media_get_attachment_parent_id( $attachment_id = null ) {\n\n\tif ( wp_get_post_parent_id( $attachment_id ) ) {\n\t\t$parent_id = wp_get_post_parent_id( $attachment_id );\n\t} elseif ( get_post_meta( $attachment_id, '_sell_media_for_sale_product_id', true ) ) {\n\t\t$parent_id = get_post_meta( $attachment_id, '_sell_media_for_sale_product_id', true );\n\t\tif ( false === sell_media_post_exists( $parent_id ) ) {\n\t\t\t$parent_id = '';\n\t\t}\n\t} else {\n\t\t$parent_id = '';\n\t}\n\n\treturn $parent_id;\n}\n\n\n/**\n * Determines if a post, identified by the specified ID, exist\n * within the WordPress database.\n *\n * @param    int $id    The ID of the post to check\n * @return   bool          True if the post exists; otherwise, false.\n * @since    2.0.1\n */\nfunction sell_media_post_exists( $id ) {\n\treturn is_string( get_post_status( $id ) );\n}\n\n\n/**\n * Get all sell media post ids\n * This is an expensive query, so let's cache it using transients.\n * This function is used in search queries to check if an attachment\n * has a post parent of one of the sell media entry ids.\n */\nfunction sell_media_ids() {\n\n\tif ( false === ( $cached_ids = get_transient( 'sell_media_cached_ids' ) ) ) {\n\n\t\t$ids = get_posts(\n\t\t\tarray(\n\t\t\t\t'post_type' => 'sell_media_item',\n\t\t\t\t'posts_per_page' => -1,\n\t\t\t)\n\t\t);\n\n\t\t$cached_ids = wp_list_pluck( $ids, 'ID' );\n\n\t\tset_transient( 'sell_media_cached_ids', $cached_ids, 12 * HOUR_IN_SECONDS );\n\n\t}\n\n\treturn $cached_ids;\n}\n\n\n/**\n * If a new sell media entry is added, delete the cached ids transient.\n */\nfunction sell_media_delete_cached_ids( $post_id ) {\n\n\tif ( 'sell_media_item' === get_post_type( $post_id ) ) {\n\t\tdelete_transient( 'sell_media_cached_ids' );\n\t}\n\n}\nadd_action( 'save_post', 'sell_media_delete_cached_ids' );\n\n\n/**\n * Get Currency\n *\n * @since 0.1\n **/\nfunction sell_media_get_currency() {\n\t$settings = sell_media_get_plugin_options();\n\treturn apply_filters( 'sell_media_currency', empty( $settings->currency ) ? null : $settings->currency );\n}\n\n\n/**\n * Build currency values\n *\n * @since 0.1\n **/\nfunction sell_media_get_currency_symbol( $currency = '' ) {\n\tif ( ! $currency ) { $currency = sell_media_get_currency(); }\n\t$currency_symbol = '';\n\tswitch ( $currency ) :\n\t\tcase 'BRL' : $currency_symbol = 'R&#36;';\nbreak; // in Brazil the correct is R$ 0.00,00\n\t\tcase 'AUD' :\n\t\tcase 'CAD' :\n\t\tcase 'MXN' :\n\t\tcase 'NZD' :\n\t\tcase 'HKD' :\n\t\tcase 'SGD' :\n\t\tcase 'USD' : $currency_symbol = '&#36;';\nbreak;\n\t\tcase 'EUR' : $currency_symbol = '&euro;';\nbreak;\n\t\tcase 'RMB' :\n\t\tcase 'JPY' : $currency_symbol = '&yen;';\nbreak;\n\t\tcase 'TRY' : $currency_symbol = 'TL';\nbreak;\n\t\tcase 'NOK' : $currency_symbol = 'kr';\nbreak;\n\t\tcase 'ZAR' : $currency_symbol = 'R';\nbreak;\n\t\tcase 'CZK' : $currency_symbol = '&#75;&#269;';\nbreak;\n\t\tcase 'MYR' : $currency_symbol = 'RM';\nbreak;\n\t\tcase 'DKK' :\n\t\tcase 'HUF' :\n\t\tcase 'ILS' :\n\t\tcase 'PHP' :\n\t\tcase 'PLN' :\n\t\tcase 'SEK' :\n\t\tcase 'CHF' :\n\t\tcase 'TWD' :\n\t\tcase 'THB' : $currency_symbol = $currency;\nbreak;\n\t\tcase 'GBP' : $currency_symbol = '&pound;';\nbreak;\n\t\tdefault    : $currency_symbol = '&#36;';\nbreak;\n\tendswitch;\n\treturn apply_filters( 'sell_media_currency_symbol', $currency_symbol, $currency );\n}\n\n\n/**\n * Returns the test mode option\n *\n * @since 0.1\n */\nfunction sell_media_test_mode() {\n\t$settings = sell_media_get_plugin_options();\n\treturn $settings->test_mode;\n}\n\n\n/**\n * Change order by on frontend\n *\n * @since 0.1\n * @return void\n */\nfunction sell_media_order_by( $orderby_statement ) {\n\t\n\t$settings = sell_media_get_plugin_options();\n\tif ( ! empty( $settings->order_by )\n\t\t&& (\n\t\t\tis_post_type_archive( 'sell_media_item' )\n\t\t\t|| is_tax('collection')\n\t\t\t|| is_tax('licenses')\n\t\t\t|| is_tax('keywords')\n\t\t\t|| is_tax('creator')\n\t\t\t)\n\t) {\n\t\tglobal $wpdb;\n\t\tswitch ( $settings->order_by ) {\n\t\t\tcase 'title-asc' :\n\t\t\t\t$order_by = \"{$wpdb->prefix}posts.post_title ASC\";\n\t\t\t\tbreak;\n\t\t\tcase 'title-desc' :\n\t\t\t\t$order_by = \"{$wpdb->prefix}posts.post_title DESC\";\n\t\t\t\tbreak;\n\t\t\tcase 'date-asc' :\n\t\t\t\t$order_by = \"{$wpdb->prefix}posts.post_date ASC\";\n\t\t\t\tbreak;\n\t\t\tcase 'date-desc' :\n\t\t\t\t$order_by = \"{$wpdb->prefix}posts.post_date DESC\";\n\t\t\t\tbreak;\n\t\t}\n\t} else {\n\t\t$order_by = $orderby_statement;\n\t}\n\treturn $order_by;\n}\nif ( ! is_admin() ) {\n\tadd_filter( 'posts_orderby', 'sell_media_order_by' );\n}\n\n\n/**\n * Returns the attachment ID file size\n *\n * @param $attachment_id ID of the attachment\n * @return string\n * @since 1.6.9\n */\nfunction sell_media_get_filesize( $post_id = null, $attachment_id = null ) {\n\n\t$file_path = Sell_Media()->products->get_protected_file( $post_id, $attachment_id );\n\n\tif ( file_exists( $file_path ) ) {\n\n\t\t$bytes = filesize( $file_path );\n\t\t$s = array( 'b', 'Kb', 'Mb', 'Gb' );\n\t\t$e = floor( log( $bytes ) / log( 1024 ) );\n\n\t\treturn sprintf( '%.2f ' . $s[ $e ], ( $bytes / pow( 1024, floor( $e ) ) ) );\n\t}\n}\n\n\n/**\n * Update the sales stats\n *\n * @since 0.1\n */\nfunction sell_media_update_sales_stats( $product_id = null, $license_id = null, $price = null ) {\n\n\t$prev = maybe_unserialize( get_post_meta( $product_id, 'sell_media_sales_stats', true ) );\n\n\t$new[ $license_id ]['count'] = $prev[ $license_id ]['count'] + 1;\n\t$new[ $license_id ]['total'] = $prev[ $license_id ]['total'] + $price;\n\t$sales_stats_s = serialize( $new );\n\n\treturn update_post_meta( $product_id, 'sell_media_sales_stats', $sales_stats_s );\n}\n\n\n/**\n * Echos the pagination for Archive pages.\n *\n * @since 1.0.1\n */\nfunction sell_media_pagination_filter( $max_pages = '' ) {\n\n\tglobal $wp_query;\n\t$max_num_pages = ( '' != $max_pages ) ? $max_pages : $wp_query->max_num_pages;\n\n\t$big = 999999999; // need an unlikely integer\n\n\t$params = array(\n\t\t// 'base' => str_replace( $big, '%#%', esc_url( get_pagenum_link( $big ) ) ),\n\t\t'format' => '?paged=%#%',\n\t\t'current' => max( 1, get_query_var( 'paged' ) ),\n\t\t'total' => $max_num_pages,// note sometimes max_num_pages needs to be sent over\n\t);\n\n\treturn '<div class=\"sell-media-pagination-container\">' . paginate_links( $params ) . '</div>';\n}\nadd_filter( 'sell_media_pagination_filter', 'sell_media_pagination_filter', 10, 1 );\n\n\n/**\n * Determine if the payment reports page is being displayed on the admin\n *\n * @since 1.2\n */\nfunction sell_media_is_reports_page() {\n\n\tif ( isset( $_SERVER['QUERY_STRING'] ) && 'post_type=sell_media_item&page=sell_media_reports' == $_SERVER['QUERY_STRING'] ) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n/**\n * Get Plugin data\n *\n * @since 1.2\n */\nfunction sell_media_plugin_data( $field = null ) {\n\t$plugin_data = get_plugin_data( SELL_MEDIA_PLUGIN_FILE, $markup = true, $translate = true );\n\treturn $plugin_data[ $field ];\n}\n\n\n/**\n * Build select fields\n *\n * @since 1.2\n */\nfunction sell_media_build_select( $items = array(), $args = array() ) {\n\textract( $args );\n\n\tif ( $required ) {\n\t\t$required = ' required ';\n\t} else {\n\t\t$required = false;\n\t\t$required_html = false;\n\t}\n\n\tif ( ! $title ) {\n\t\t$title = false;\n\t}\n\n\tif ( empty( $name ) ) {\n\t\t$name = null; }\n\n\tif ( empty( $current ) ) {\n\t\t$current = null; }\n\t?>\n\t<select id=\"<?php print $name; ?>\" class=\"sell_media_form_control\" name=\"<?php print $name; ?>\" <?php print $required; ?>>\n\t\t<option></option>\n\t\t<?php foreach ( $items as $key => $value ) : ?>\n\t\t\t<option value=\"<?php print $key; ?>\" <?php selected( $key, $current ); ?>><?php print $value; ?></option>\n\t\t<?php endforeach; ?>\n\t</select>\n<?php }\n\n\n/**\n * Return either the the custom price group or the default price group from settings\n * Used for showing price groups on cart popup\n *\n * @param $post_id, $taxonomy\n * @return $price_groups (object)\n */\nfunction sell_media_get_price_groups( $post_id = null, $taxonomy = null ) {\n\n\t// first, check price group set on the item\n\t$price_groups_custom = wp_get_post_terms( $post_id, $taxonomy );\n\n\tforeach ( $price_groups_custom as $price_group ) {\n\t\tif ( $price_group->parent == 0 ) {\n\t\t\t$parent_price_group = $price_group->term_id;\n\t\t}\n\t}\n\n\t// if the item doesn't have a price group set, use the default from settings\n\tif ( empty( $price_groups_custom ) ) {\n\n\t\t$settings = sell_media_get_plugin_options();\n\n\t\tif ( $taxonomy == 'reprints-price-group' ) {\n\t\t\t$price_group_id = $settings->reprints_default_price_group;\n\t\t} else {\n\t\t\t$price_group_id = $settings->default_price_group;\n\t\t}\n\n\t\t$default_price_group_obj = get_term( $price_group_id, $taxonomy );\n\n\t\tif ( is_null( $default_price_group_obj ) || is_wp_error( $default_price_group_obj ) ) {\n\t\t\treturn; }\n\n\t\t$parent_price_group = $default_price_group_obj->term_id;\n\t}\n\n\t$args = array(\n\t\t'type' => 'sell_media_item',\n\t\t'hide_empty' => false,\n\t\t'parent' => $parent_price_group,\n\t\t'taxonomy' => $taxonomy,\n\t\t'orderby' => 'id',\n\t\t);\n\n\t$price_groups = get_categories( $args );\n\n\treturn $price_groups;\n\n}\n\n/**\n * Get the assigned price group\n *\n * @param $post_id, $taxonomy\n * @since 2.0.1\n * @return integer $price_group_id\n */\nfunction sell_media_get_item_price_group( $post_id, $taxonomy ) {\n\t$settings = sell_media_get_plugin_options();\n\t$terms = get_the_terms( $post_id, $taxonomy );\n\tif ( $terms && ! is_wp_error( $terms ) ) { foreach ( $terms as $term ) {\n\t\t\tif ( $term->parent == 0 ) {\n\t\t\t\t$price_group_id = $term->term_id;\n\t\t\t}\n\t}\n\t} elseif ( $taxonomy == 'reprints-price-group' ) {\n\t\t$price_group_id = $settings->reprints_default_price_group;\n\t} elseif ( $taxonomy == 'price-group' ) {\n\t\t$price_group_id = $settings->default_price_group;\n\t} else {\n\t\t$price_group_id = 0;\n\t}\n\n\treturn $price_group_id;\n}\n\n\n/**\n * Retrieve the absolute path to the file upload directory without the trailing slash\n *\n * @since  1.8.5\n * @return string $path Absolute path to the sell_media upload directory\n */\nfunction sell_media_get_upload_dir() {\n\t$wp_upload_dir = wp_upload_dir();\n\twp_mkdir_p( $wp_upload_dir['basedir'] . '/sell_media' );\n\t$path = $wp_upload_dir['basedir'] . '/sell_media';\n\n\treturn apply_filters( 'sell_media_get_upload_dir', $path );\n}\n\n\n/**\n * Retrieve the absolute path to the packages file upload directory without the trailing slash\n *\n * @since  1.8.5\n * @return string $path Absolute path to the sell_media/packages upload directory\n */\nfunction sell_media_get_packages_upload_dir() {\n\t$wp_upload_dir = wp_upload_dir();\n\twp_mkdir_p( $wp_upload_dir['basedir'] . '/sell_media/packages' );\n\t$path = $wp_upload_dir['basedir'] . '/sell_media/packages';\n\n\treturn apply_filters( 'sell_media_get_packages_upload_dir', $path );\n}\n\n\n/**\n * Retrieve the absolute path to the import directory without the trailing slash\n *\n * @since  2.0.1\n * @return string $path Absolute path to the sell_media/import directory\n */\nfunction sell_media_get_import_dir() {\n\t$wp_upload_dir = wp_upload_dir();\n\twp_mkdir_p( $wp_upload_dir['basedir'] . '/sell_media/import' );\n\t$path = $wp_upload_dir['basedir'] . '/sell_media/import';\n\n\treturn apply_filters( 'sell_media_get_import_dir', $path );\n}\n\n\n/**\n * Get directories\n *\n * @since 2.0.1\n * @param $dir (packages or import)\n * @return array (directories)\n */\nfunction sell_media_get_directories( $dir = null ) {\n\n\t$directories = '';\n\t$path = ( 'packages' === $dir ) ? sell_media_get_packages_upload_dir() : sell_media_get_import_dir();\n\n\tforeach ( glob( $path . '/*', GLOB_ONLYDIR ) as $directory ) {\n\t\t$directories[] = $directory;\n\t}\n\treturn $directories;\n}\n\n\n/**\n * Retrieve the url to the file upload directory without the trailing slash\n *\n * @since  1.8.5\n * @return string $url url to the sell_media upload directory\n */\nfunction sell_media_get_upload_dir_url() {\n\t$wp_upload_dir = wp_upload_dir();\n\t$url = $wp_upload_dir['baseurl'] . '/sell_media';\n\n\treturn apply_filters( 'sell_media_get_upload_dir_url', $url );\n}\n\n/**\n * Disable cache on Checkout and Thanks pages\n *\n * @since 2.0.2\n * @return void\n */\nfunction sell_media_nocache() {\n\n\tif ( is_admin() ) {\n\t\treturn; }\n\n\tif ( false === ( $page_uris = get_transient( 'sell_media_cache_excluded_uris' ) ) ) {\n\t\t$settings       = sell_media_get_plugin_options();\n\t\t$checkout_page  = isset( $settings->checkout_page ) ? $settings->checkout_page: '';\n\t\t$thanks_page    = isset( $settings->thanks_page ) ? $settings->thanks_page: '';\n\n\t\tif ( empty( $checkout_page ) || empty( $thanks_page ) ) {\n\t\t\treturn; }\n\n\t\t$page_uris   = array();\n\t\t// Exclude IPN listener\n\t\t$page_uris[] = '?sell_media-listener=IPN';\n\t\t// Exclude default permalinks for pages\n\t\t$page_uris[] = '?page_id=' . $checkout_page;\n\t\t$page_uris[] = '?page_id=' . $thanks_page;\n\t\t// Exclude nice permalinks for pages\n\t\t$checkout_page  = get_post( $checkout_page );\n\t\t$thanks_page    = get_post( $thanks_page );\n\t\tif ( ! is_null( $checkout_page ) ) {\n\t\t\t$page_uris[] = '/' . $checkout_page->post_name; }\n\t\tif ( ! is_null( $thanks_page ) ) {\n\t\t\t$page_uris[] = '/' . $thanks_page->post_name; }\n\t\tset_transient( 'sell_media_cache_excluded_uris', $page_uris );\n\t}\n\n\tif ( is_array( $page_uris ) ) {\n\t\tforeach ( $page_uris as $uri ) {\n\t\t\tif ( strstr( $_SERVER['REQUEST_URI'], $uri ) ) {\n\t\t\t\tif ( ! defined( 'DONOTCACHEPAGE' ) ) {\n\t\t\t\t\tdefine( 'DONOTCACHEPAGE', 'true' ); }\n\t\t\t\tnocache_headers();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\nadd_action( 'init', 'sell_media_nocache', 0 );\n\n\n/**\n * Filters the default thumbnail size requested on archives and galleries\n *\n * @since 2.1.3\n *\n * @return string thumbnail size param\n */\nfunction sell_media_thumbnail_crop() {\n\t$settings = sell_media_get_plugin_options();\n\tif ( $settings->thumbnail_crop ) {\n\t\treturn $settings->thumbnail_crop;\n\t}\n\n}\nadd_filter( 'sell_media_thumbnail', 'sell_media_thumbnail_crop', 10, 1 );\n\n\n/**\n * Change buy button text to download if price if 0.\n *\n * @since 2.0.7\n *\n * @param  String $text     Button Text.\n * @param  int    $post_id  Id of post.\n * @return String           Button Text.\n */\nfunction sell_media_free_download_button_text( $text, $post_id, $attachment_id = null, $type = 'download' ) {\n\tif ( 'download' != $type ) {\n\t\treturn $text;\n\t}\n\n\t$price = get_post_meta( $post_id, 'sell_media_price', true );\n\tif ( $price <= 0 ) {\n\t\t $text = __( 'Download', 'sell_media' ); }\n\n\treturn $text;\n}\n\nadd_filter( 'sell_media_purchase_text', 'sell_media_free_download_button_text', 10, 4 );\nadd_filter( 'sell_media_add_to_cart_text', 'sell_media_free_download_button_text', 10, 4 );\n\n/**\n * Change button html.\n *\n * @since 2.0.7\n *\n * @param  string  $html             Html output of button.\n * @param  int     $post_id          ID of post.\n * @param  int     $attachment_id    ID of attachment\n * @param  string  $button           Button type.\n * @param  string  $text             Button Text.\n * @param  boolean $echo             Echo output or return.\n * @return string                    Html output of button.\n */\nfunction sell_media_free_download_button_button( $html, $post_id, $attachment_id, $button, $text, $echo, $type = 'download' ) {\n\n\tif ( 'download' != $type ) {\n\t\treturn $html;\n\t}\n\n\t$price = get_post_meta( $post_id, 'sell_media_price', true );\n\t$value = get_post_meta( $post_id, 'sell_media_free_downloads', true );\n\tif ( $price > 0 || $value ) {\n\t\treturn $html; }\n\n\t$classes[] = 'item_add';\n\t$classes[] = 'sell-media-button';\n\tif ( ! is_null( $button ) ) {\n\t\t$classes[] = 'sell-media-' . $button;\n\t}\n\t$classes[] = 'sell-media-download-button';\n\t$classes = implode( ' ', $classes );\n\n\t$link = sprintf( '%s?download=free&product_id=%d&attachment_id=%d&payment_id=free', home_url(), $post_id, $attachment_id );\n\t$html = '<a href=\"' . $link . '\" title=\"' . $text . '\" data-product-id=\"' . esc_attr( $post_id ) . '\" data-attachment-id=\"' . esc_attr( $attachment_id ) . '\" class=\"' . $classes . '\">' . $text . '</a>';\n\treturn $html;\n}\n\nadd_filter( 'sell_media_item_buy_button', 'sell_media_free_download_button_button', 10, 7 );\nadd_filter( 'sell_media_item_add_to_cart_button', 'sell_media_free_download_button_button', 10, 7 );\n\n/**\n * Forces the file to be downloaded for free.\n *\n * @since 2.0.7\n *\n * @param  init $post_id       ID of post\n * @param  init $attachment_id ID of attacment\n * @return void\n */\nfunction sell_media_free_download_file( $post_id, $attachment_id ) {\n\n\t$price = get_post_meta( $post_id, 'sell_media_price', true );\n\n\t// product is not free, so die\n\tif ( $price > 0 ) {\n\n\t\tdo_action( 'sell_media_zero_price_download_fail', $post_id, $attachment_id );\n\n\t\twp_die( __( 'Nice try, but this file is not a free download.', 'sell_media' ), __( 'Purchase Verification Failed', 'sell_media' ) );\n\n\t} else {\n\n\t\t$requested_file = Sell_Media()->products->get_protected_file( $post_id, $attachment_id );\n\t\t$file_type = wp_check_filetype( $requested_file );\n\n\t\tif ( ! ini_get( 'safe_mode' ) ) {\n\t\t\tset_time_limit( 0 );\n\t\t}\n\n\t\tif ( function_exists( 'get_magic_quotes_runtime' ) && get_magic_quotes_runtime() ) {\n\t\t\tset_magic_quotes_runtime( 0 );\n\t\t}\n\n\t\tif ( function_exists( 'apache_setenv' ) ) { @apache_setenv( 'no-gzip', 1 ); }\n\t\t@ini_set( 'zlib.output_compression', 'Off' );\n\n\t\tnocache_headers();\n\t\theader( 'Robots: none' );\n\t\theader( 'Content-Type: ' . $file_type['type'] . '' );\n\t\theader( 'Content-Description: File Transfer' );\n\t\theader( 'Content-Disposition: attachment; filename=\"' . basename( $requested_file ) . '\"' );\n\t\theader( 'Content-Transfer-Encoding: binary' );\n\n\t\t// Deliver the download\n\t\tSell_Media()->download->download_file( $requested_file );\n\n\t\texit();\n\t}\n\n}\n\nadd_action( 'sell_media_before_failed_download', 'sell_media_free_download_file', 10, 2 );\n\n/**\n * Get current sell media plugin version.\n * @return int Retrun current sell media plugin version.\n */\nfunction sell_media_version() {\n\t$option_name = 'sell_media_version';\n\t$default_value = 0;\n\n\tif ( is_multisite() ) {\n\t\t$blog_id = get_current_blog_id();\n\t\t$version = get_blog_option( $blog_id, $option_name, $default_value );\n\t\treturn $version;\n\t}\n\n\t$version = get_option( $option_name, $default_value );\n\treturn $version;\n}\n\n/**\n * Get option based on the site type\n * @param  string $option  Name of option to add. Expected to not be SQL-escaped.\n * @param  mixed  $value       Optional. Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.\n * @return bool False if option was not added and true if option was added.\n */\nfunction sell_media_get_option( $option, $default = false ) {\n\tif ( is_multisite() ) {\n\t\treturn get_blog_option( get_current_blog_id(), $option, $default );\n\t}\n\n\treturn get_option( $option, $default );\n}\n\n/**\n * Add a new option based on the site type\n * @param  string      $option    Name of option to add. Expected to not be SQL-escaped.\n * @param  mixed       $value      Optional. Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.\n * @param  string      $deprecated Optional. Description. Not used anymore.\n * @param  string|bool $autoload   Optional. Whether to load the option when WordPress starts up.\n * @return bool             False if option was not added and true if option was added.\n */\nfunction sell_media_add_option( $option, $value = '', $deprecated = '', $autoload = 'yes' ) {\n\tif ( is_multisite() ) {\n\t\treturn add_blog_option( get_current_blog_id(), $option, $value );\n\t}\n\n\treturn add_option( $option, $value, $deprecated, $autoload );\n}\n\n/**\n * Update the value of an option that was already added based on site type.\n * @param  string      $option    Name of option to add. Expected to not be SQL-escaped.\n * @param  mixed       $value      Optional. Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.\n * @param  string|bool $autoload   Optional. Whether to load the option when WordPress starts up.\n * @return bool             False if option was not added and true if option was added.\n */\nfunction sell_media_update_option( $option, $value, $autoload = null ) {\n\tif ( is_multisite() ) {\n\t\treturn update_blog_option( get_current_blog_id(), $option, $value );\n\t}\n\n\treturn update_option( $option, $value, $autoload );\n}\n\n/**\n * Search for the attachment parent post.\n * @param  int  $post_id attachment post id\n * @param  boolean $single  Return single value or array\n * @return mixed           Returns parent.\n */\nfunction sell_media_attachment_parent_post( $post_id, $single = true ){\n\t$args['post_type'] = \"sell_media_item\";\n\t$args['meta_query'] = array(\n\t\t\tarray(\n\t\t\t\t'key'     => '_sell_media_attachment_id',\n\t\t\t\t'value'   => $post_id,\n\t\t\t\t'compare' => 'LIKE'\n\t\t\t),\n\t\t);\n\n\t$items = get_posts( $args );\n\tif( empty( $items ) )\n\t\treturn false;\n\n\tif( $single )\n\t\treturn $items[0];\n\n\treturn $items;\n}\n\n\nfunction sell_media_update_attachment_metadata1( $data, $post_id ){\n\tif( !isset( $data['sizes']['large'] ) || !isset( $data['file'] ) ){\n\t\treturn $data;\n\t}\n\t$uploads = wp_upload_dir();\n\t$sm_file = trailingslashit( $uploads['basedir'] ) . 'sell_media/' . $data['file'];\n\tif( !file_exists( $sm_file ) )\n\t\treturn $data;\n\n\t$main_file = trailingslashit( $uploads['basedir'] ) . $data['file'];\n\t$filename = basename( $data['file'] );\n\t$upload_folder = trailingslashit( dirname( $main_file ) );\n\t$copy = copy($sm_file, $main_file);\n\n\tif ( $copy ) {\n\n\t\t// If function doesn't exist, include function file.\n\t\tif ( ! function_exists( 'wp_generate_attachment_metadata' ) ) {\n\t\t\tinclude( ABSPATH . 'wp-admin/includes/image.php' );\n\t\t}\n\n\t\t$metadata = wp_generate_attachment_metadata( $post_id, $main_file );\n\n\t\t$date_folder = dirname( $data['file'] );\n\t\t$large_file = trailingslashit( $uploads['basedir'] ) .trailingslashit( $date_folder ) . $metadata['sizes']['large']['file'];\n\t\t$main_file = trailingslashit( $uploads['basedir'] ) . $data['file'];\n\n\t\tif( file_exists( $large_file ) ){\n\t\t\t$copy = copy( $large_file, $main_file );\n\t\t\tif( $copy ){\n\n\t\t\t\t$data['width'] = $metadata['sizes']['large']['width'];\n\t\t\t\t$data['height'] = $metadata['sizes']['large']['height'];\n\t\t\t\t$data['sizes']['large']['width'] = $metadata['sizes']['large']['width'];\n\t\t\t\t$data['sizes']['large']['height'] = $metadata['sizes']['large']['height'];\n\t\t\t\t$data['sizes']['large']['file'] = $metadata['sizes']['large']['file'];\n\t\t\t\t$data['sizes']['large']['mime-type'] = $metadata['sizes']['large']['mime-type'];\n\t\t\t}\n\t\t}\n\t}\n\treturn $data;\n}\nadd_filter( 'wp_update_attachment_metadata', 'sell_media_update_attachment_metadata1', 10, 2 );\n\n/**\n * Regenerate thumbnails if original image is found in sell media upload folder.\n * @param  array $data          Meta data array.\n * @param  int \t $attachment_id \tAttachment id.\n * @return array                Updated meta data array.\n */\nfunction sell_media_generate_attachment_metadata( $data, $attachment_id ) {\n\n\t/**\n\t * If $data['file'] isn't set, the files are missing.\n\t * So, let's derive $data['file'] from the missing public filepath.\n\t */\n\tif ( empty( $data['file'] ) ) {\n\t\t$data['file'] = sell_media_get_public_filepath( $attachment_id );\n\t}\n\n\t$uploads = wp_upload_dir();\n\t$sm_file_path = trailingslashit( $uploads['basedir'] ) . 'sell_media/' . $data['file'];\n\t$sm_file = apply_filters( 'sell_media_original_image_path', $sm_file_path, $attachment_id, $data );\n\tif ( ! file_exists( $sm_file ) )\n\t\treturn $data;\n\n\t$main_file = trailingslashit( $uploads['basedir'] ) . $data['file'];\n\n\t@set_time_limit( 900 );\n\t$copy = copy( $sm_file, $main_file );\n\n\tif ( ! $copy )\n\t\treturn $data;\n\n\t$file = $main_file;\n\n\t// Core Start\n\t$attachment = get_post( $attachment_id );\n\n\t$metadata = array();\n\t$support = false;\n\tif ( preg_match('!^image/!', get_post_mime_type( $attachment )) && file_is_displayable_image($file) ) {\n\t\t$imagesize = getimagesize( $file );\n\t\t$metadata['width'] = $imagesize[0];\n\t\t$metadata['height'] = $imagesize[1];\n\n\t\t// Make the file path relative to the upload dir.\n\t\t$metadata['file'] = _wp_relative_upload_path($file);\n\n\t\t// Make thumbnails and other intermediate sizes.\n\t\tglobal $_wp_additional_image_sizes;\n\n\t\t$sizes = array();\n\t\tforeach ( get_intermediate_image_sizes() as $s ) {\n\t\t\t$sizes[$s] = array( 'width' => '', 'height' => '', 'crop' => false );\n\t\t\tif ( isset( $_wp_additional_image_sizes[$s]['width'] ) )\n\t\t\t\t$sizes[$s]['width'] = intval( $_wp_additional_image_sizes[$s]['width'] ); // For theme-added sizes\n\t\t\telse\n\t\t\t\t$sizes[$s]['width'] = get_option( \"{$s}_size_w\" ); // For default sizes set in options\n\t\t\tif ( isset( $_wp_additional_image_sizes[$s]['height'] ) )\n\t\t\t\t$sizes[$s]['height'] = intval( $_wp_additional_image_sizes[$s]['height'] ); // For theme-added sizes\n\t\t\telse\n\t\t\t\t$sizes[$s]['height'] = get_option( \"{$s}_size_h\" ); // For default sizes set in options\n\t\t\tif ( isset( $_wp_additional_image_sizes[$s]['crop'] ) )\n\t\t\t\t$sizes[$s]['crop'] = $_wp_additional_image_sizes[$s]['crop']; // For theme-added sizes\n\t\t\telse\n\t\t\t\t$sizes[$s]['crop'] = get_option( \"{$s}_crop\" ); // For default sizes set in options\n\t\t}\n\n\t\t$sizes = apply_filters( 'intermediate_image_sizes_advanced', $sizes, $metadata );\n\n\t\tif ( $sizes ) {\n\t\t\t$editor = wp_get_image_editor( $file );\n\n\t\t\tif ( ! is_wp_error( $editor ) )\n\t\t\t\t$metadata['sizes'] = $editor->multi_resize( $sizes );\n\t\t} else {\n\t\t\t$metadata['sizes'] = array();\n\t\t}\n\n\t\t// Fetch additional metadata from EXIF/IPTC.\n\t\t$image_meta = wp_read_image_metadata( $file );\n\t\tif ( $image_meta )\n\t\t\t$metadata['image_meta'] = $image_meta;\n\n\t} elseif ( wp_attachment_is( 'video', $attachment ) ) {\n\t\t$metadata = wp_read_video_metadata( $file );\n\t\t$support = current_theme_supports( 'post-thumbnails', 'attachment:video' ) || post_type_supports( 'attachment:video', 'thumbnail' );\n\t} elseif ( wp_attachment_is( 'audio', $attachment ) ) {\n\t\t$metadata = wp_read_audio_metadata( $file );\n\t\t$support = current_theme_supports( 'post-thumbnails', 'attachment:audio' ) || post_type_supports( 'attachment:audio', 'thumbnail' );\n\t}\n\n\tif ( $support && ! empty( $metadata['image']['data'] ) ) {\n\t\t// Check for existing cover.\n\t\t$hash = md5( $metadata['image']['data'] );\n\t\t$posts = get_posts( array(\n\t\t\t'fields' => 'ids',\n\t\t\t'post_type' => 'attachment',\n\t\t\t'post_mime_type' => $metadata['image']['mime'],\n\t\t\t'post_status' => 'inherit',\n\t\t\t'posts_per_page' => 1,\n\t\t\t'meta_key' => '_cover_hash',\n\t\t\t'meta_value' => $hash\n\t\t) );\n\t\t$exists = reset( $posts );\n\n\t\tif ( ! empty( $exists ) ) {\n\t\t\tupdate_post_meta( $attachment_id, '_thumbnail_id', $exists );\n\t\t} else {\n\t\t\t$ext = '.jpg';\n\t\t\tswitch ( $metadata['image']['mime'] ) {\n\t\t\tcase 'image/gif':\n\t\t\t\t$ext = '.gif';\n\t\t\t\tbreak;\n\t\t\tcase 'image/png':\n\t\t\t\t$ext = '.png';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$basename = str_replace( '.', '-', basename( $file ) ) . '-image' . $ext;\n\t\t\t$uploaded = wp_upload_bits( $basename, '', $metadata['image']['data'] );\n\t\t\tif ( false === $uploaded['error'] ) {\n\t\t\t\t$image_attachment = array(\n\t\t\t\t\t'post_mime_type' => $metadata['image']['mime'],\n\t\t\t\t\t'post_type' => 'attachment',\n\t\t\t\t\t'post_content' => '',\n\t\t\t\t);\n\n\t\t\t\t$image_attachment = apply_filters( 'attachment_thumbnail_args', $image_attachment, $metadata, $uploaded );\n\n\t\t\t\t$sub_attachment_id = wp_insert_attachment( $image_attachment, $uploaded['file'] );\n\t\t\t\tadd_post_meta( $sub_attachment_id, '_cover_hash', $hash );\n\t\t\t\t$attach_data = wp_generate_attachment_metadata( $sub_attachment_id, $uploaded['file'] );\n\t\t\t\twp_update_attachment_metadata( $sub_attachment_id, $attach_data );\n\t\t\t\tupdate_post_meta( $attachment_id, '_thumbnail_id', $sub_attachment_id );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove the blob of binary data from the array.\n\tif ( $metadata ) {\n\t\tunset( $metadata['image']['data'] );\n\t}\n\n\t// Core END\n\n\t// Sometimes the original source file is smaller than the large size\n\t// this causes the copy to fail\n\tif ( array_key_exists( 'large', $metadata['sizes'] ) ) {\n\n\t\t$date_folder = dirname( $data['file'] );\n\t\t$large_file = trailingslashit( $uploads['basedir'] ) .trailingslashit( $date_folder ) . $metadata['sizes']['large']['file'];\n\t\t$main_file = trailingslashit( $uploads['basedir'] ) . $data['file'];\n\n\t\tif ( file_exists( $large_file ) ){\n\t\t\t$copy = copy( $large_file, $main_file );\n\t\t\tif ( $copy ) {\n\n\t\t\t\t$metadata['width'] = $metadata['sizes']['large']['width'];\n\t\t\t\t$metadata['height'] = $metadata['sizes']['large']['height'];\n\t\t\t}\n\t\t}\n\t}\n\n\tdo_action( 'sell_media_after_generate_attachment_metadata', $attachment_id, $metadata );\n\n\treturn $metadata;\n}\nadd_filter( 'wp_generate_attachment_metadata', 'sell_media_generate_attachment_metadata', 10, 2 );\n\n\n/*\n * Regenerate missing attachment files\n * If for some reason the file is missing in public uploads\n * we should attempt to regenerate the thumbnails from the private source file\n * and generate a new thumbnails.\n */\nfunction sell_media_regenerate_missing_files( $post_id ) {\n\n\tif ( sell_media_has_multiple_attachments( $post_id ) ) {\n\t\t$attachment_ids = sell_media_get_attachments( $post_id );\n\t} else {\n\t\t$attachment_ids = array( get_post_meta( $post_id, '_sell_media_attachment_id', true ) );\n\t}\n\n\tif ( $attachment_ids ) foreach ( $attachment_ids as $attachment_id ) {\n\n\t\t// Check if attachment is image.\n\t\tif ( ! wp_attachment_is_image( $attachment_id ) )\n\t\t\treturn false;\n\n\t\t// Retrieve attached file path based on attachment ID.\n\t\t$attached_file = get_attached_file( $attachment_id );\n\n\t\t// File exists, so bail\n\t\tif ( file_exists( $attached_file ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Unlike photos, video and audio files aren't copied to public directory.\n\t\t * This means $attachment_meta['file'] will be empty.\n\t\t * So we only proceed if the file parameter exists.\n\t\t */\n\t\t$attachment_metadata = wp_get_attachment_metadata( $attachment_id );\n\n\t\t// build url from public attachment url\n\t\tif ( empty( $attachment_metadata['file'] ) ) {\n\t\t\t$attachment_metadata['file'] = sell_media_get_public_filepath( $attachment_id );\n\t\t}\n\n\t\tif ( ! empty( $attachment_metadata['file'] ) ) {\n\n\t\t\t// build the public file path.\n\t\t\t$upload_dir = wp_upload_dir();\n\t\t\t$public_file_path = $upload_dir['basedir'] . '/' . $attachment_metadata['file'];\n\n\t\t\t// get the original protected file.\n\t\t\t$original_file_path = sell_media_get_upload_dir() . '/' . $attachment_metadata['file'];\n\n\t\t\t/**\n\t\t\t * @todo Imported files are saved to filepath for sell_media_item publish date\n\t\t\t */\n\n\t\t\t// check if the original protected file exists\n\t\t\tif ( file_exists( $original_file_path ) ) {\n\t\t\t\tcopy( $original_file_path, $public_file_path );\n\t\t\t\t@set_time_limit( 900 );\n\t\t\t\trequire_once( ABSPATH . 'wp-admin/includes/image.php' );\n\t\t\t\t$metadata = wp_generate_attachment_metadata( $attachment_id, $attached_file );\n\t\t\t\tif ( !is_wp_error( $metadata ) && !empty( $metadata )  ){\n\t\t\t\t\twp_update_attachment_metadata( $attachment_id, $metadata );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nadd_action( 'sell_media_before_content', 'sell_media_regenerate_missing_files' );\n\n\n/**\n * Gets the public filepath for an attachment\n * @param  int $attachment_id the attachment id\n * @return string returns something like 2016/02/image.jpg\n */\nfunction sell_media_get_public_filepath( $attachment_id ) {\n\t$public_file = wp_get_attachment_url( $attachment_id );\n\t$string = '/uploads/';\n\tif ( ( $pos = strpos( $public_file, $string ) ) !== FALSE ) {\n\t\treturn substr( $public_file, strpos( $public_file, $string ) + strlen( $string ) );\n\t}\n}\n\n\n/**\n * Clear cart after payment is completed.\n * @return void\n */\nfunction sell_media_clear_cart_after_payment() {\n\t$clear = false;\n\n\tif ( isset( $_GET['tx'] ) && !empty( $_GET['tx'] ) ) {\n\t\t$clear = true;\n\t} else if ( isset( $_POST['txn_id'] ) && ! empty( $_POST['txn_id'] ) ) {\n\t\t$clear = true;\n\t}\n\n\t$clear = apply_filters( 'sell_media_clear_cart_after_payment', $clear );\n\n\tif ( ! $clear ) {\n\t\treturn false;\n\t}\n\n\tglobal $sm_cart;\n\t$sm_cart->clear();\n}\n\nadd_action( 'init', 'sell_media_clear_cart_after_payment' );\n\n/**\n * Add migration cron event.\n * This is essentially the same code that fires during\n * plugin activation hook. For some reasons, the upgrade\n * event wasn't working. In case the user upgraded\n * @return void\n */\nfunction sell_media_migration_cron_event() {\n\t$migrated = get_option( 'sell_media_keywords_migrated' );\n\tif ( ! $migrated ) {\n\t\t// Schedule an event that fires every minute to repair attachments in chunks.\n\t\tdo_action( 'sell_media_migrate_keywords' );\n\t}\n}\nadd_action( 'init', 'sell_media_migration_cron_event' );\n\n/**\n * Check if e-commerce is enabled.\n */\nfunction sell_media_ecommerce_enabled( $post_id ) {\n\t$status = true;\n\t$meta = get_post_meta( $post_id, 'sell_media_enable_ecommerce', true );\n\tif ( class_exists( 'VS_Platform' ) && 0 === $meta ) {\n\t\t$status = false;\n\t}\n\treturn $status;\n}", "<?php\n\n/**\n * Scripts\n *\n * @package Sell Media\n * @author Thad Allender <support@graphpaperpress.com>\n */\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Scripts\n *\n * Enqueues all necessary scripts in the WP Admin to run Sell Media\n *\n * @since 1.8.5\n * @return void\n */\nfunction sell_media_scripts( $hook ) {\n\n\t$settings = sell_media_get_plugin_options();\n\t$checkout_page = empty( $settings->checkout_page ) ? '' : $settings->checkout_page;\n\t$test_mode = empty( $settings->test_mode ) ? false : $settings->test_mode;\n\n\twp_enqueue_script( 'sell_media_jquery_cookie', SELL_MEDIA_PLUGIN_URL . 'js/jquery.cookie.js', array( 'jquery' ), SELL_MEDIA_VERSION );\n\twp_enqueue_script( 'sell_media', SELL_MEDIA_PLUGIN_URL . 'js/sell_media.js', array( 'jquery', 'sell_media_jquery_cookie' ), SELL_MEDIA_VERSION );\n\twp_enqueue_style( 'sell_media', SELL_MEDIA_PLUGIN_URL . 'css/sell_media.css', array( 'dashicons' ), SELL_MEDIA_VERSION );\n\n\t// Masonry\n\tif ( is_customize_preview() || ( isset( $settings->thumbnail_layout ) && 'sell-media-masonry' === $settings->thumbnail_layout ) ) {\n\t\twp_enqueue_script( 'sell_media_masonry', SELL_MEDIA_PLUGIN_URL . 'js/macy.min.js', array( 'jquery' ), SELL_MEDIA_VERSION, true );\n\t\twp_add_inline_script( 'sell_media_masonry', '\n\t\t\tjQuery(function() {\n\t\t\t\tvar macyGrid = Macy; \n\t\t\t\tvar galleries = document.querySelectorAll(\".sell-media-grid-item-masonry-container\");\n\t\t\t\tvar macyInstances = [];\n\t\t\t\tvar macyOptions = {\n\t\t\t\t\ttrueOrder: false,\n\t\t\t\t\twaitForImages: true,\n\t\t\t\t\tmargin: 10,\n\t\t\t\t\tcolumns: 4,\n\t\t\t\t\tbreakAt: {\n\t\t\t\t\t\t1200: 4,\n\t\t\t\t\t\t940: 3,\n\t\t\t\t\t\t520: 1\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfor (var i = 0; i < galleries.length; i++) {\n\t\t\t\t\tvar newId = \"sell-media-instance-\" + i;\n\t\t\t\t\tgalleries[i].id = newId;\n\t\t\t\t\tmacyOptions.container = \"#\" + newId;\n\t\t\t\t\tmacyInstances.push(macyGrid(macyOptions));\n\t\t\t\t}\n\t\t\t});'\n\t\t);\n\t}\n\n\tif ( isset( $settings->style ) && '' !== $settings->style ) {\n\t\twp_enqueue_style( 'sell_media_style', SELL_MEDIA_PLUGIN_URL . 'css/sell_media-' . $settings->style . '.css', array( 'sell_media' ), SELL_MEDIA_VERSION );\n\t} else {\n\t\twp_enqueue_style( 'sell_media_style', SELL_MEDIA_PLUGIN_URL . 'css/sell_media-light.css', array( 'sell_media' ), SELL_MEDIA_VERSION );\n\t}\n\n\twp_localize_script( 'sell_media', 'sell_media', array(\n\t\t'ajaxurl' => esc_url( admin_url( 'admin-ajax.php' ) ),\n\t\t'pluginurl' => esc_url( SELL_MEDIA_PLUGIN_URL . 'sell-media.php' ),\n\t\t'site_name' => esc_html( get_bloginfo( 'name' ) ),\n\t\t'site_url' => esc_url( site_url() ),\n\t\t'checkout_url' => esc_url( get_permalink( $checkout_page ) ),\n\t\t'currency_symbol' => empty( $settings->currency ) ? 'USD' : $settings->currency,\n\t\t'dashboard_page' => empty( $settings->dashboard_page ) ? '' : esc_url( get_permalink( $settings->dashboard_page ) ),\n\t\t'error' => array(\n\t\t\t'email_exists' => __( 'Sorry that email already exists or is invalid', 'sell_media' ),\n\t\t\t),\n\t\t'sandbox' => ( 1 === $test_mode ) ? true : false,\n\t\t'paypal_email' => empty( $settings->paypal_email ) ? null : $settings->paypal_email,\n\t\t'thanks_page' => empty( $settings->thanks_page ) ? '' : esc_url( get_permalink( $settings->thanks_page ) ),\n\t\t'listener_url' => esc_url( add_query_arg( 'sell_media-listener', 'IPN', home_url( 'index.php' ) ) ),\n\t\t'added_to_cart' => sprintf(\n\t\t\t\"%s! <a href='\" . esc_url( get_permalink( $checkout_page ) ) . \"' class='cart'>%s</a>!\",\n\t\t\t__( 'Added', 'sell_media' ),\n\t\t\t__( 'Checkout now', 'sell_media' ) ),\n\t\t'cart_labels' => array(\n\t\t\t'name' => __( 'Name', 'sell_media' ),\n\t\t\t'size' => __( 'Size', 'sell_media' ),\n\t\t\t'license' => __( 'License', 'sell_media' ),\n\t\t\t'price' => __( 'Price', 'sell_media' ),\n\t\t\t'qty' => __( 'Qty', 'sell_media' ),\n\t\t\t'sub_total' => __( 'Subtotal', 'sell_media' ),\n\t\t\t),\n\t\t'cart_style' => apply_filters( 'sell_media_cart_style', 'table' ),\n\t\t'tax' => empty( $settings->tax ) ? 0 : $settings->tax_rate,\n\t\t'tax_display' => empty( $settings->tax_display ) ? 'exclusive' : $settings->tax_display,\n\t\t'shipping' => apply_filters( 'sell_media_shipping', 0 ), // should PayPal force buyers add address\n\t\t'cart_error' => __( 'There was an error loading the cart data. Please contact the site owner.', 'sell_media' ),\n\t\t'checkout_text' => __( 'Checkout Now', 'sell_media' ),\n\t\t'checkout_wait_text' => __( 'Please wait...', 'sell_media' ),\n\t\t'remove_text' => __( 'Remove from Lightbox', 'sell_media' ),\n\t\t'save_text' => __( 'Save to Lightbox', 'sell_media' ),\n\t\t'currencies' => sell_media_currencies(),\n\t) );\n\n\tdo_action( 'sell_media_scripts_hook' );\n}\nadd_action( 'wp_enqueue_scripts', 'sell_media_scripts', 15 );\n", "!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):t.Macy=n()}(this,function(){\"use strict\";function t(t,n){var e=void 0;return function(){e&&clearTimeout(e),e=setTimeout(t,n)}}function n(t,n){for(var e=t.length,o=e,r=[];e--;)r.push(n(t[o-e-1]));return r}function e(t,n){A(t,n,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}function o(t){for(var n=t.options,e=t.responsiveOptions,o=t.keys,r=t.docWidth,i=void 0,s=0;s<o.length;s++){var a=parseInt(o[s],10);r>=a&&(i=n.breakAt[a],O(i,e))}return e}function r(t){for(var n=t.options,e=t.responsiveOptions,o=t.keys,r=t.docWidth,i=void 0,s=o.length-1;s>=0;s--){var a=parseInt(o[s],10);r<=a&&(i=n.breakAt[a],O(i,e))}return e}function i(t){var n=window.innerWidth,e={columns:t.columns};L(t.margin)?e.margin={x:t.margin.x,y:t.margin.y}:e.margin={x:t.margin,y:t.margin};var i=Object.keys(t.breakAt);return t.mobileFirst?o({options:t,responsiveOptions:e,keys:i,docWidth:n}):r({options:t,responsiveOptions:e,keys:i,docWidth:n})}function s(t){return i(t).columns}function a(t){return i(t).margin}function c(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],e=s(t),o=a(t).x,r=100/e;return n?1===e?\"100%\":(o=(e-1)*o/e,\"calc(\"+r+\"% - \"+o+\"px)\"):r}function u(t,n){var e=s(t.options),o=0,r=void 0,i=void 0;return 1===++n?0:(i=a(t.options).x,r=(i-(e-1)*i/e)*(n-1),o+=c(t.options,!1)*(n-1),\"calc(\"+o+\"% + \"+r+\"px)\")}function l(t){var n=0,e=t.container;m(t.rows,function(t){n=t>n?t:n}),e.style.height=n+\"px\"}function p(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=s(t.options),i=a(t.options).y;C(t,r,e),m(n,function(n){var e=0,r=parseInt(n.offsetHeight,10);isNaN(r)||(t.rows.forEach(function(n,o){n<t.rows[e]&&(e=o)}),n.style.position=\"absolute\",n.style.top=t.rows[e]+\"px\",n.style.left=\"\"+t.cols[e],t.rows[e]+=isNaN(r)?0:r+i,o&&(n.dataset.macyComplete=1))}),o&&(t.tmpRows=null),l(t)}function h(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=s(t.options),i=a(t.options).y;C(t,r,e),m(n,function(n){t.lastcol===r&&(t.lastcol=0);var e=M(n,\"height\");e=parseInt(n.offsetHeight,10),isNaN(e)||(n.style.position=\"absolute\",n.style.top=t.rows[t.lastcol]+\"px\",n.style.left=\"\"+t.cols[t.lastcol],t.rows[t.lastcol]+=isNaN(e)?0:e+i,t.lastcol+=1,o&&(n.dataset.macyComplete=1))}),o&&(t.tmpRows=null),l(t)}var f=function t(n,e){if(!(this instanceof t))return new t(n,e);if(n=n.replace(/^\\s*/,\"\").replace(/\\s*$/,\"\"),e)return this.byCss(n,e);for(var o in this.selectors)if(e=o.split(\"/\"),new RegExp(e[1],e[2]).test(n))return this.selectors[o](n);return this.byCss(n)};f.prototype.byCss=function(t,n){return(n||document).querySelectorAll(t)},f.prototype.selectors={},f.prototype.selectors[/^\\.[\\w\\-]+$/]=function(t){return document.getElementsByClassName(t.substring(1))},f.prototype.selectors[/^\\w+$/]=function(t){return document.getElementsByTagName(t)},f.prototype.selectors[/^\\#[\\w\\-]+$/]=function(t){return document.getElementById(t.substring(1))};var m=function(t,n){for(var e=t.length,o=e;e--;)n(t[o-e-1])},v=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.running=!1,this.events=[],this.add(t)};v.prototype.run=function(){if(!this.running&&this.events.length>0){var t=this.events.shift();this.running=!0,t(),this.running=!1,this.run()}},v.prototype.add=function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return!!n&&(Array.isArray(n)?m(n,function(n){return t.add(n)}):(this.events.push(n),void this.run()))},v.prototype.clear=function(){this.events=[]};var d=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.instance=t,this.data=n,this},g=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.events={},this.instance=t};g.prototype.on=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return!(!t||!n)&&(Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(n))},g.prototype.emit=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t||!Array.isArray(this.events[t]))return!1;var e=new d(this.instance,n);m(this.events[t],function(t){return t(e)})};var y=function(t){return!(\"naturalHeight\"in t&&t.naturalHeight+t.naturalWidth===0)||t.width+t.height!==0},E=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return new Promise(function(t,e){if(n.complete)return y(n)?t(n):e(n);n.addEventListener(\"load\",function(){return y(n)?t(n):e(n)}),n.addEventListener(\"error\",function(){return e(n)})}).then(function(n){e&&t.emit(t.constants.EVENT_IMAGE_LOAD,{img:n})}).catch(function(n){return t.emit(t.constants.EVENT_IMAGE_ERROR,{img:n})})},w=function(t,e){var o=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return n(e,function(n){return E(t,n,o)})},A=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return Promise.all(w(t,n,e)).then(function(){t.emit(t.constants.EVENT_IMAGE_COMPLETE)})},I=function(n){return t(function(){n.emit(n.constants.EVENT_RESIZE),n.queue.add(function(){return n.recalculate(!0,!0)})},100)},N=function(t){if(t.container=f(t.options.container),t.container instanceof f||!t.container)return!!t.options.debug&&console.error(\"Error: Container not found\");delete t.options.container,t.container.length&&(t.container=t.container[0]),t.container.style.position=\"relative\"},T=function(t){t.queue=new v,t.events=new g(t),t.rows=[],t.resizer=I(t)},_=function(t){var n=f(\"img\",t.container);window.addEventListener(\"resize\",t.resizer),t.on(t.constants.EVENT_IMAGE_LOAD,function(){return t.recalculate(!1,!1)}),t.on(t.constants.EVENT_IMAGE_COMPLETE,function(){return t.recalculate(!0,!0)}),t.options.useOwnImageLoader||e(t,n,!t.options.waitForImages),t.emit(t.constants.EVENT_INITIALIZED)},b=function(t){N(t),T(t),_(t)},L=function(t){return t===Object(t)&&\"[object Array]\"!==Object.prototype.toString.call(t)},O=function(t,n){L(t)||(n.columns=t),L(t)&&t.columns&&(n.columns=t.columns),L(t)&&t.margin&&!L(t.margin)&&(n.margin={x:t.margin,y:t.margin}),L(t)&&t.margin&&L(t.margin)&&t.margin.x&&(n.margin.x=t.margin.x),L(t)&&t.margin&&L(t.margin)&&t.margin.y&&(n.margin.y=t.margin.y)},M=function(t,n){return window.getComputedStyle(t,null).getPropertyValue(n)},C=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(t.lastcol||(t.lastcol=0),t.rows.length<1&&(e=!0),e){t.rows=[],t.cols=[],t.lastcol=0;for(var o=n-1;o>=0;o--)t.rows[o]=0,t.cols[o]=u(t,o)}else if(t.tmpRows){t.rows=[];for(var o=n-1;o>=0;o--)t.rows[o]=t.tmpRows[o]}else{t.tmpRows=[];for(var o=n-1;o>=0;o--)t.tmpRows[o]=t.rows[o]}},V=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],o=n?t.container.children:f(':scope > *:not([data-macy-complete=\"1\"])',t.container),r=c(t.options);return m(o,function(t){n&&(t.dataset.macyComplete=0),t.style.width=r}),t.options.trueOrder?(h(t,o,n,e),t.emit(t.constants.EVENT_RECALCULATED)):(p(t,o,n,e),t.emit(t.constants.EVENT_RECALCULATED))},R=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t},x={columns:4,margin:2,trueOrder:!1,waitForImages:!1,useImageLoader:!0,breakAt:{},useOwnImageLoader:!1,onInit:!1};!function(){try{document.createElement(\"a\").querySelector(\":scope *\")}catch(t){!function(){function t(t){return function(e){if(e&&n.test(e)){var o=this.getAttribute(\"id\");o||(this.id=\"q\"+Math.floor(9e6*Math.random())+1e6),arguments[0]=e.replace(n,\"#\"+this.id);var r=t.apply(this,arguments);return null===o?this.removeAttribute(\"id\"):o||(this.id=o),r}return t.apply(this,arguments)}}var n=/:scope\\b/gi,e=t(Element.prototype.querySelector);Element.prototype.querySelector=function(t){return e.apply(this,arguments)};var o=t(Element.prototype.querySelectorAll);Element.prototype.querySelectorAll=function(t){return o.apply(this,arguments)}}()}}();var q=function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:x;if(!(this instanceof t))return new t(n);this.options={},R(this.options,x,n),b(this)};return q.init=function(t){return console.warn(\"Depreciated: Macy.init will be removed in v3.0.0 opt to use Macy directly like so Macy({ /*options here*/ }) \"),new q(t)},q.prototype.recalculateOnImageLoad=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e(this,f(\"img\",this.container),!t)},q.prototype.runOnImageLoad=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=f(\"img\",this.container);return this.on(this.constants.EVENT_IMAGE_COMPLETE,t),n&&this.on(this.constants.EVENT_IMAGE_LOAD,t),e(this,o,n)},q.prototype.recalculate=function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return e&&this.queue.clear(),this.queue.add(function(){return V(t,n,e)})},q.prototype.remove=function(){window.removeEventListener(\"resize\",this.resizer),m(this.container.children,function(t){t.removeAttribute(\"data-macy-complete\"),t.removeAttribute(\"style\")}),this.container.removeAttribute(\"style\")},q.prototype.reInit=function(){this.recalculate(!0,!0),this.emit(this.constants.EVENT_INITIALIZED),window.addEventListener(\"resize\",this.resizer),this.container.style.position=\"relative\"},q.prototype.on=function(t,n){this.events.on(t,n)},q.prototype.emit=function(t,n){this.events.emit(t,n)},q.constants={EVENT_INITIALIZED:\"macy.initialized\",EVENT_RECALCULATED:\"macy.recalculated\",EVENT_IMAGE_LOAD:\"macy.image.load\",EVENT_IMAGE_ERROR:\"macy.image.error\",EVENT_IMAGE_COMPLETE:\"macy.images.complete\",EVENT_RESIZE:\"macy.resize\"},q.prototype.constants=q.constants,q});\n"], "filenames": ["inc/class-layouts.php", "inc/class-search.php", "inc/helpers.php", "inc/scripts.php", "js/macy.min.js"], "buggy_code_start_loc": [220, 71, 1492, 37, 1], "buggy_code_end_loc": [356, 210, 1493, 60, 2], "fixing_code_start_loc": [221, 71, 1492, 37, 1], "fixing_code_end_loc": [360, 210, 1493, 59, 2], "type": "CWE-79", "message": "A Cross-site scripting (XSS) vulnerability in /inc/class-search.php in the Sell Media plugin v2.4.1 for WordPress allows remote attackers to inject arbitrary web script or HTML via the keyword parameter (aka $search_term or the Search field).", "other": {"cve": {"id": "CVE-2019-6112", "sourceIdentifier": "cve@mitre.org", "published": "2020-08-14T14:15:12.287", "lastModified": "2020-08-19T15:21:36.803", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A Cross-site scripting (XSS) vulnerability in /inc/class-search.php in the Sell Media plugin v2.4.1 for WordPress allows remote attackers to inject arbitrary web script or HTML via the keyword parameter (aka $search_term or the Search field)."}, {"lang": "es", "value": "Una vulnerabilidad de tipo cross-site scripting (XSS) en el archivo /inc/class-search.php en el plugin Sell Media versi\u00f3n v2.4.1 para WordPress, permite a atacantes remotos inyectar script web o HTML arbitrario por medio del par\u00e1metro keyword (tambi\u00e9n se conoce como el campo $search_term o de B\u00fasqueda )."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:graphpaperpress:sell_media:*:*:*:*:*:wordpress:*:*", "versionEndIncluding": "2.4.1", "matchCriteriaId": "A4E71CAC-8001-47F1-AF92-CCDE44832753"}]}]}], "references": [{"url": "https://github.com/graphpaperpress/Sell-Media/commit/8ac8cebf332e0885863d0a25e16b4b180abedc47#diff-f16fea0a0c8cc36031ec339d02a4fb3b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://metamorfosec.com/Files/Advisories/METS-2020-001-A_XSS_Vulnerability_in_Sell_Media_Plugin_v2.4.1_for_WordPress.txt", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/graphpaperpress/Sell-Media/commit/8ac8cebf332e0885863d0a25e16b4b180abedc47#diff-f16fea0a0c8cc36031ec339d02a4fb3b"}}