{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\n/**\n * Class CourseCategory.\n */\nclass CourseCategory\n{\n    /**\n     * Returns the category fields from the database from an int ID.\n     *\n     * @param int $categoryId The category ID\n     *\n     * @return array\n     */\n    public static function getCategoryById($categoryId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryId = (int) $categoryId;\n        $sql = \"SELECT * FROM $table WHERE id = $categoryId\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            return Database::fetch_array($result, 'ASSOC');\n        }\n\n        return [];\n    }\n\n    /**\n     * Get category details from a simple category code.\n     *\n     * @param string $categoryCode The literal category code\n     *\n     * @return array\n     */\n    public static function getCategory($categoryCode)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryCode = Database::escape_string($categoryCode);\n        $sql = \"SELECT * FROM $table WHERE code ='$categoryCode'\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $category = Database::fetch_array($result, 'ASSOC');\n            if ($category) {\n                // Get access url id\n                $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n                $sql = \"SELECT * FROM $table WHERE course_category_id = \".$category['id'];\n                $result = Database::query($sql);\n                $result = Database::fetch_array($result);\n                if ($result) {\n                    $category['access_url_id'] = $result['access_url_id'];\n                }\n\n                return $category;\n            }\n        }\n\n        return [];\n    }\n\n    /**\n     * @param string $category Optional. Parent category code\n     *\n     * @return array\n     */\n    public static function getCategories($category = '')\n    {\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $category = Database::escape_string($category);\n\n        $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n        $conditions = \" INNER JOIN $table a ON (t1.id = a.course_category_id)\";\n        $whereCondition = \" AND a.access_url_id = \".api_get_current_access_url_id();\n        $allowBaseCategories = api_get_configuration_value('allow_base_course_category');\n        if ($allowBaseCategories) {\n            $whereCondition = \" AND (a.access_url_id = \".api_get_current_access_url_id().\" OR a.access_url_id = 1) \";\n        }\n\n        $parentIdCondition = \" AND (t1.parent_id IS NULL OR t1.parent_id = '' )\";\n        if (!empty($category)) {\n            $parentIdCondition = \" AND t1.parent_id = '$category' \";\n        }\n\n        $sql = \"SELECT\n                t1.id,\n                t1.name,\n                t1.code,\n                t1.parent_id,\n                t1.tree_pos,\n                t1.children_count,\n                COUNT(DISTINCT t3.code) AS nbr_courses,\n                a.access_url_id\n                FROM $tbl_category t1\n                $conditions\n                LEFT JOIN $tbl_category t2\n                ON t1.code = t2.parent_id\n                LEFT JOIN $tbl_course t3\n                ON t3.category_code=t1.code\n                WHERE\n                    1 = 1\n                    $parentIdCondition\n                    $whereCondition\n                GROUP BY t1.name,\n                         t1.code,\n                         t1.parent_id,\n                         t1.tree_pos,\n                         t1.children_count\n                ORDER BY t1.tree_pos\";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Returns a flat list of all course categories in this URL. If the\n     * allow_base_course_category option is true, then also show the\n     * course categories of the base URL.\n     *\n     * @return array [id, name, code, parent_id, tree_pos, children_count, number_courses]\n     */\n    public static function getAllCategories()\n    {\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n\n        $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n        $conditions = \" INNER JOIN $table a ON (t1.id = a.course_category_id)\";\n        $whereCondition = \" AND a.access_url_id = \".api_get_current_access_url_id();\n        $allowBaseCategories = api_get_configuration_value('allow_base_course_category');\n        if ($allowBaseCategories) {\n            $whereCondition = \" AND (a.access_url_id = \".api_get_current_access_url_id().\" OR a.access_url_id = 1) \";\n        }\n\n        $sql = \"SELECT\n                t1.id,\n                t1.name,\n                t1.code,\n                t1.parent_id,\n                t1.tree_pos,\n                t1.children_count,\n                COUNT(DISTINCT t3.code) AS number_courses\n                FROM $tbl_category t1\n                $conditions\n                LEFT JOIN $tbl_course t3\n                ON t3.category_code=t1.code\n                WHERE 1=1\n                    $whereCondition\n                GROUP BY\n                    t1.name,\n                    t1.code,\n                    t1.parent_id,\n                    t1.tree_pos,\n                    t1.children_count\n                ORDER BY t1.parent_id, t1.tree_pos\";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param string $code\n     * @param string $name\n     * @param string $canHaveCourses\n     * @param int    $parent_id\n     *\n     * @return bool\n     */\n    public static function addNode($code, $name, $canHaveCourses, $parent_id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $code = trim($code);\n        $name = trim($name);\n        $parent_id = trim($parent_id);\n\n        $code = CourseManager::generate_course_code($code);\n        $sql = \"SELECT 1 FROM $table\n                WHERE code = '\".Database::escape_string($code).\"'\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            return false;\n        }\n        $result = Database::query(\"SELECT MAX(tree_pos) AS maxTreePos FROM $table\");\n        $row = Database::fetch_array($result);\n        $tree_pos = $row['maxTreePos'] + 1;\n\n        $params = [\n            'name' => $name,\n            'code' => $code,\n            'parent_id' => empty($parent_id) ? null : $parent_id,\n            'tree_pos' => $tree_pos,\n            'children_count' => 0,\n            'auth_course_child' => $canHaveCourses,\n            'auth_cat_child' => 'TRUE',\n        ];\n\n        $categoryId = Database::insert($table, $params);\n        if ($categoryId) {\n            self::updateParentCategoryChildrenCount($parent_id, 1);\n            UrlManager::addCourseCategoryListToUrl(\n                [$categoryId],\n                [api_get_current_access_url_id()]\n            );\n\n            return $categoryId;\n        }\n\n        return false;\n    }\n\n    /**\n     * Recursive function that updates the count of children in the parent.\n     *\n     * @param string $categoryId Category ID\n     * @param int    $delta      The number to add or delete (1 to add one, -1 to remove one)\n     */\n    public static function updateParentCategoryChildrenCount($categoryId, $delta = 1)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryId = Database::escape_string($categoryId);\n        $delta = (int) $delta;\n        // First get to the highest level possible in the tree\n        $result = Database::query(\"SELECT parent_id FROM $table WHERE code = '$categoryId'\");\n        $row = Database::fetch_array($result);\n        if ($row !== false and $row['parent_id'] != 0) {\n            // if a parent was found, enter there to see if he's got one more parent\n            self::updateParentCategoryChildrenCount($row['parent_id'], $delta);\n        }\n        // Now we're at the top, get back down to update each child\n        $sql = \"UPDATE $table SET children_count = (children_count - \".abs($delta).\") WHERE code = '$categoryId'\";\n        if ($delta >= 0) {\n            $sql = \"UPDATE $table SET children_count = (children_count + $delta) WHERE code = '$categoryId'\";\n        }\n        Database::query($sql);\n    }\n\n    /**\n     * @param string $node\n     *\n     * @return bool\n     */\n    public static function deleteNode($node)\n    {\n        $category = self::getCategory($node);\n\n        if (empty($category)) {\n            return false;\n        }\n\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $node = Database::escape_string($node);\n        $result = Database::query(\"SELECT parent_id, tree_pos FROM $tbl_category WHERE code='$node'\");\n\n        if ($row = Database::fetch_array($result)) {\n            if (!empty($row['parent_id'])) {\n                Database::query(\n                    \"UPDATE $tbl_course SET category_code = '\".$row['parent_id'].\"' WHERE category_code='$node'\"\n                );\n                Database::query(\"UPDATE $tbl_category SET parent_id='\".$row['parent_id'].\"' WHERE parent_id='$node'\");\n            } else {\n                Database::query(\"UPDATE $tbl_course SET category_code='' WHERE category_code='$node'\");\n                Database::query(\"UPDATE $tbl_category SET parent_id=NULL WHERE parent_id='$node'\");\n            }\n\n            $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n            $sql = \"DELETE FROM $table WHERE course_category_id = \".$category['id'];\n\n            Database::query($sql);\n            Database::query(\"UPDATE $tbl_category SET tree_pos=tree_pos-1 WHERE tree_pos > '\".$row['tree_pos'].\"'\");\n            Database::query(\"DELETE FROM $tbl_category WHERE code='$node'\");\n\n            if (!empty($row['parent_id'])) {\n                self::updateParentCategoryChildrenCount($row['parent_id'], -1);\n            }\n\n            return true;\n        }\n    }\n\n    /**\n     * @param string $code\n     * @param string $name\n     * @param string $canHaveCourses\n     * @param string $old_code\n     *\n     * @return bool\n     */\n    public static function editNode(\n        $code,\n        $name,\n        $canHaveCourses,\n        $old_code,\n        ?string $newParentCode = null,\n        ?string $oldParentCode = null\n    ) {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n\n        $code = trim(Database::escape_string($code));\n        $name = trim(Database::escape_string($name));\n        $old_code = Database::escape_string($old_code);\n        $canHaveCourses = Database::escape_string($canHaveCourses);\n\n        $code = CourseManager::generate_course_code($code);\n        // Updating category\n        $sql = \"UPDATE $tbl_category SET\n                    name='$name',\n                    code='$code',\n                    auth_course_child = '$canHaveCourses'\n                WHERE code = '$old_code'\";\n        Database::query($sql);\n\n        // Updating children\n        $sql = \"UPDATE $tbl_category SET parent_id = '$code'\n            WHERE parent_id = '$old_code'\";\n        Database::query($sql);\n\n        // Updating course category\n        $sql = \"UPDATE $tbl_course SET category_code = '$code'\n            WHERE category_code = '$old_code' \";\n        Database::query($sql);\n\n        Database::update(\n            $tbl_category,\n            ['parent_id' => $newParentCode ?: null],\n            ['code = ?' => $code]\n        );\n\n        self::updateParentCategoryChildrenCount($oldParentCode, -1);\n        self::updateParentCategoryChildrenCount($newParentCode, 1);\n\n        return true;\n    }\n\n    /**\n     * Move a node up on display.\n     *\n     * @param string $code\n     * @param int    $tree_pos\n     * @param string $parent_id\n     *\n     * @return bool\n     */\n    public static function moveNodeUp($code, $tree_pos, $parent_id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $code = Database::escape_string($code);\n        $tree_pos = (int) $tree_pos;\n        $parent_id = Database::escape_string($parent_id);\n\n        $parentIdCondition = \" AND (parent_id IS NULL OR parent_id = '' )\";\n        if (!empty($parent_id)) {\n            $parentIdCondition = \" AND parent_id = '$parent_id' \";\n        }\n\n        $sql = \"SELECT code,tree_pos\n                FROM $table\n                WHERE\n                    tree_pos < $tree_pos\n                    $parentIdCondition\n                ORDER BY tree_pos DESC\n                LIMIT 0,1\";\n\n        $result = Database::query($sql);\n        if (!$row = Database::fetch_array($result)) {\n            $sql = \"SELECT code, tree_pos\n                    FROM $table\n                    WHERE\n                        tree_pos > $tree_pos\n                        $parentIdCondition\n                    ORDER BY tree_pos DESC\n                    LIMIT 0,1\";\n            $result2 = Database::query($sql);\n            if (!$row = Database::fetch_array($result2)) {\n                return false;\n            }\n        }\n\n        $sql = \"UPDATE $table\n                SET tree_pos ='\".$row['tree_pos'].\"'\n                WHERE code='$code'\";\n        Database::query($sql);\n\n        $sql = \"UPDATE $table\n                SET tree_pos = '$tree_pos'\n                WHERE code= '\".$row['code'].\"'\";\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * @param string $categoryCode\n     *\n     * @return array\n     */\n    public static function getChildren($categoryCode)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryCode = Database::escape_string($categoryCode);\n        $sql = \"SELECT code, id FROM $table\n                WHERE parent_id = '$categoryCode'\";\n        $result = Database::query($sql);\n        $children = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $children[] = $row;\n            $subChildren = self::getChildren($row['code']);\n            $children = array_merge($children, $subChildren);\n        }\n\n        return $children;\n    }\n\n    /**\n     * @param string $categoryCode\n     *\n     * @return array\n     */\n    public static function getParents($categoryCode)\n    {\n        if (empty($categoryCode)) {\n            return [];\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryCode = Database::escape_string($categoryCode);\n        $sql = \"SELECT code, parent_id\n                FROM $table\n                WHERE code = '$categoryCode'\";\n\n        $result = Database::query($sql);\n        $children = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $parent = self::getCategory($row['parent_id']);\n            $children[] = $row;\n            $subChildren = self::getParents($parent ? $parent['code'] : null);\n            $children = array_merge($children, $subChildren);\n        }\n\n        return $children;\n    }\n\n    /**\n     * @param string $categoryCode\n     *\n     * @return string|null\n     */\n    public static function getParentsToString($categoryCode)\n    {\n        $parents = self::getParents($categoryCode);\n\n        if (!empty($parents)) {\n            $parents = array_reverse($parents);\n            $categories = [];\n            foreach ($parents as $category) {\n                $categories[] = $category['code'];\n            }\n\n            return implode(' > ', $categories).' > ';\n        }\n\n        return null;\n    }\n\n    /**\n     * @param string $categorySource\n     *\n     * @return string\n     */\n    public static function listCategories($categorySource)\n    {\n        $categories = self::getCategories($categorySource);\n        $categorySource = Security::remove_XSS($categorySource);\n\n        if (count($categories) > 0) {\n            $table = new HTML_Table(['class' => 'table table-hover table-striped data_table']);\n            $column = 0;\n            $row = 0;\n            $headers = [\n                get_lang('Category'),\n                get_lang('SubCat'),\n                get_lang('Courses'),\n                get_lang('Actions'),\n            ];\n            foreach ($headers as $header) {\n                $table->setHeaderContents($row, $column, $header);\n                $column++;\n            }\n            $row++;\n            $mainUrl = api_get_path(WEB_CODE_PATH).'admin/course_category.php?category='.$categorySource;\n            $ajaxUrl = api_get_path(WEB_AJAX_PATH).'course_category.ajax.php';\n            $editIcon = Display::return_icon(\n                'edit.png',\n                get_lang('EditNode'),\n                null,\n                ICON_SIZE_SMALL\n            );\n            $exportIcon = Display::return_icon('export_csv.png', get_lang('ExportAsCSV'));\n\n            $deleteIcon = Display::return_icon(\n                'delete.png',\n                get_lang('DeleteNode'),\n                null,\n                ICON_SIZE_SMALL\n            );\n            $moveIcon = Display::return_icon(\n                'up.png',\n                get_lang('UpInSameLevel'),\n                null,\n                ICON_SIZE_SMALL\n            );\n\n            $showCoursesIcon = Display::return_icon(\n                'course.png',\n                get_lang('Courses'),\n                null,\n                ICON_SIZE_SMALL\n            );\n\n            $urlId = api_get_current_access_url_id();\n            foreach ($categories as $category) {\n                $categoryId = $category['id'];\n                $editUrl = $mainUrl.'&id='.$category['code'].'&action=edit';\n                $moveUrl = $mainUrl.'&id='.$category['code'].'&action=moveUp&tree_pos='.$category['tree_pos'];\n                $deleteUrl = $mainUrl.'&id='.$category['code'].'&action=delete';\n                $exportUrl = $mainUrl.'&id='.$categoryId.'&action=export';\n                $showCoursesUrl = $ajaxUrl.'?id='.$categoryId.'&a=show_courses';\n\n                $actions = [];\n                if ($urlId == $category['access_url_id']) {\n                    $actions[] = Display::url(\n                        $showCoursesIcon,\n                        $showCoursesUrl,\n                        ['onclick' => 'showCourses(this, '.$categoryId.')']\n                    );\n                    $actions[] = Display::url($editIcon, $editUrl);\n                    $actions[] = Display::url($moveIcon, $moveUrl);\n                    $actions[] = Display::url($exportIcon, $exportUrl);\n                    $actions[] = Display::url(\n                        $deleteIcon,\n                        $deleteUrl,\n                        ['onclick' => 'javascript: if (!confirm(\\''.addslashes(api_htmlentities(sprintf(get_lang('ConfirmYourChoice')), ENT_QUOTES)).'\\')) return false;']\n                    );\n                }\n\n                $url = api_get_path(WEB_CODE_PATH).'admin/course_category.php?category='.$category['code'];\n                $title = Display::url(\n                    Display::return_icon(\n                        'folder_document.gif',\n                        get_lang('OpenNode'),\n                        null,\n                        ICON_SIZE_SMALL\n                    ).' '.$category['name'].' ('.$category['code'].')',\n                    $url\n                );\n\n                $countCourses = self::countCoursesInCategory($category['code'], null, false, false);\n\n                $content = [\n                    $title,\n                    $category['children_count'],\n                    $countCourses,\n                    implode('', $actions),\n                ];\n                $column = 0;\n                foreach ($content as $value) {\n                    $table->setCellContents($row, $column, $value);\n                    $column++;\n                }\n                $row++;\n            }\n\n            return $table->toHtml();\n        }\n\n        return Display::return_message(get_lang('NoCategories'), 'warning');\n    }\n\n    /**\n     * @return array\n     */\n    public static function getCategoriesToDisplayInHomePage()\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $sql = \"SELECT name FROM $table\n                WHERE parent_id IS NULL\n                ORDER BY tree_pos\";\n\n        return Database::store_result(Database::query($sql));\n    }\n\n    /**\n     * @param string $categoryCode\n     *\n     * @return array\n     */\n    public static function getCategoriesCanBeAddedInCourse($categoryCode)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n        $conditions = \" INNER JOIN $table a ON (c.id = a.course_category_id)\";\n        $whereCondition = ' AND a.access_url_id = '.api_get_current_access_url_id();\n\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $sql = \"SELECT code, name\n                FROM $tbl_category c\n                $conditions\n                WHERE (auth_course_child = 'TRUE' OR code = '\".Database::escape_string($categoryCode).\"')\n                $whereCondition\n                ORDER BY tree_pos\";\n        $res = Database::query($sql);\n\n        $categoryToAvoid = '';\n        if (!api_is_platform_admin()) {\n            $categoryToAvoid = api_get_configuration_value('course_category_code_to_use_as_model');\n        }\n\n        $categories[''] = '-';\n        while ($cat = Database::fetch_array($res)) {\n            $categoryCode = $cat['code'];\n            if (!empty($categoryToAvoid) && $categoryToAvoid == $categoryCode) {\n                continue;\n            }\n            $categories[$categoryCode] = '('.$categoryCode.') '.$cat['name'];\n            ksort($categories);\n        }\n\n        return $categories;\n    }\n\n    /**\n     * @param string $category_code\n     * @param string $keyword\n     * @param bool   $avoidCourses\n     * @param bool   $checkHidePrivate\n     * @param array  $conditions\n     * @param string $courseLanguageFilter\n     *\n     * @return int\n     */\n    public static function countCoursesInCategory(\n        $category_code = '',\n        $keyword = '',\n        $avoidCourses = true,\n        $checkHidePrivate = true,\n        $conditions = [],\n        $courseLanguageFilter = null,\n        $filterShowInCatalogue = false\n    ) {\n        return self::getCoursesInCategory(\n            $category_code,\n            $keyword,\n            $avoidCourses,\n            $checkHidePrivate,\n            $conditions,\n            true,\n            $courseLanguageFilter,\n            $filterShowInCatalogue\n        );\n    }\n\n    public static function getCoursesInCategory(\n        $category_code = '',\n        $keyword = '',\n        $avoidCourses = true,\n        $checkHidePrivate = true,\n        $conditions = [],\n        $getCount = false,\n        $courseLanguageFilter = null,\n        $filterShowInCatalogue = false\n    ) {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $categoryCode = Database::escape_string($category_code);\n        $keyword = Database::escape_string($keyword);\n\n        $avoidCoursesCondition = '';\n        if ($avoidCourses) {\n            $avoidCoursesCondition = CoursesAndSessionsCatalog::getAvoidCourseCondition();\n        }\n        $visibilityCondition = CourseManager::getCourseVisibilitySQLCondition('course', true, $checkHidePrivate);\n\n        $showInCatalogueCondition = '';\n        if ($filterShowInCatalogue) {\n            $showInCatalogueCondition = CoursesAndSessionsCatalog::getCoursesToShowInCatalogueCondition();\n        }\n\n        $sqlInjectJoins = '';\n        $courseLanguageWhere = '';\n        $where = ' AND 1 = 1 ';\n        $sqlInjectWhere = '';\n        if (!empty($conditions)) {\n            $sqlInjectJoins = $conditions['inject_joins'];\n            $where = $conditions['where'];\n            $sqlInjectWhere = $conditions['inject_where'];\n        }\n\n        // If have courseLanguageFilter, search for it\n        if (!empty($courseLanguageFilter)) {\n            $courseLanguageFilter = Database::escape_string($courseLanguageFilter);\n            $courseLanguageWhere = \"AND course.course_language = '$courseLanguageFilter'\";\n        }\n\n        $categoryFilter = '';\n        if ($categoryCode === 'ALL' || empty($categoryCode)) {\n            // Nothing to do\n        } elseif ($categoryCode === 'NONE') {\n            $categoryFilter = ' AND category_code = \"\" ';\n        } else {\n            $categoryFilter = ' AND category_code = \"'.$categoryCode.'\" ';\n        }\n\n        $searchFilter = '';\n        if (!empty($keyword)) {\n            $searchFilter = ' AND (\n                code LIKE \"%'.$keyword.'%\" OR\n                title LIKE \"%'.$keyword.'%\" OR\n                tutor_name LIKE \"%'.$keyword.'%\"\n            ) ';\n        }\n\n        $urlCondition = ' access_url_id = '.api_get_current_access_url_id().' AND';\n        $tbl_url_rel_course = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $select = \" DISTINCT course.id, course.code, course.title, course.category_code \";\n        if ($getCount) {\n            $select = \"count(DISTINCT course.id) as count\";\n        }\n        $sql = \"SELECT $select\n                FROM $tbl_course as course\n                INNER JOIN $tbl_url_rel_course as url_rel_course\n                ON (url_rel_course.c_id = course.id)\n                $sqlInjectJoins\n                WHERE\n                    $urlCondition\n                    course.visibility != '0' AND\n                    course.visibility != '4'\n                    $courseLanguageWhere\n                    $categoryFilter\n                    $searchFilter\n                    $avoidCoursesCondition\n                    $showInCatalogueCondition\n                    $visibilityCondition\n                    $where\n                    $sqlInjectWhere\n            \";\n\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            $row = Database::fetch_array($result);\n\n            return (int) $row['count'];\n        }\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param array $list\n     *\n     * @return array\n     */\n    public static function getCourseCategoryNotInList($list)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n\n        if (empty($list)) {\n            $sql = \"SELECT * FROM $table\n                    WHERE (parent_id IS NULL) \";\n            $result = Database::query($sql);\n\n            return Database::store_result($result, 'ASSOC');\n        }\n\n        $list = array_map('intval', $list);\n        $listToString = implode(\"','\", $list);\n\n        $sql = \"SELECT * FROM $table\n                WHERE id NOT IN ('$listToString') AND (parent_id IS NULL) \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param string $keyword\n     *\n     * @return array|null\n     */\n    public static function searchCategoryByKeyword($keyword)\n    {\n        if (empty($keyword)) {\n            return null;\n        }\n\n        $tableCategory = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n        $conditions = \" INNER JOIN $table a ON (c.id = a.course_category_id)\";\n        $whereCondition = \" AND a.access_url_id = \".api_get_current_access_url_id();\n\n        $allowBaseCategories = api_get_configuration_value('allow_base_course_category');\n        if ($allowBaseCategories) {\n            $whereCondition = \" AND (a.access_url_id = \".api_get_current_access_url_id().\" OR a.access_url_id = 1) \";\n        }\n\n        $keyword = Database::escape_string($keyword);\n\n        $sql = \"SELECT c.*, c.name as text\n                FROM $tableCategory c $conditions\n                WHERE\n                (\n                    c.code LIKE '%$keyword%' OR name LIKE '%$keyword%'\n                ) AND auth_course_child = 'TRUE'\n                $whereCondition \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Return the name tool by action.\n     *\n     * @param string $action\n     *\n     * @return string\n     */\n    public static function getCourseCatalogNameTools($action)\n    {\n        $nameTools = get_lang('MyCourses');\n        if (empty($action)) {\n            return $nameTools; //should never happen\n        }\n\n        switch ($action) {\n            case 'subscribe':\n            case 'subscribe_user_with_password':\n            case 'display_random_courses':\n            case 'display_courses':\n                $nameTools = get_lang('CourseManagement');\n                break;\n            case 'display_sessions':\n                $nameTools = get_lang('Sessions');\n                break;\n            default:\n                // Nothing to do\n                break;\n        }\n\n        return $nameTools;\n    }\n\n    /**\n     * Save image for a course category.\n     *\n     * @param int   $categoryId Course category ID\n     * @param array $fileData   File data from $_FILES\n     */\n    public static function saveImage($categoryId, $fileData)\n    {\n        $categoryInfo = self::getCategoryById($categoryId);\n        if (empty($categoryInfo)) {\n            return;\n        }\n\n        if (!empty($fileData['error'])) {\n            return;\n        }\n\n        $extension = getextension($fileData['name']);\n        $dirName = 'course_category/';\n        $fileDir = api_get_path(SYS_UPLOAD_PATH).$dirName;\n        $fileName = \"cc_$categoryId.{$extension[0]}\";\n\n        if (!file_exists($fileDir)) {\n            mkdir($fileDir, api_get_permissions_for_new_directories(), true);\n        }\n\n        $image = new Image($fileData['tmp_name']);\n        $image->send_image($fileDir.$fileName);\n\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        Database::update(\n            $table,\n            ['image' => $dirName.$fileName],\n            ['id = ?' => $categoryId]\n        );\n    }\n\n    /**\n     * @param $categoryId\n     * @param string $description\n     *\n     * @return string\n     */\n    public static function saveDescription($categoryId, $description)\n    {\n        $categoryInfo = self::getCategoryById($categoryId);\n        if (empty($categoryInfo)) {\n            return false;\n        }\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        Database::update(\n            $table,\n            ['description' => $description],\n            ['id = ?' => $categoryId]\n        );\n\n        return true;\n    }\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\n/**\n * Class CourseCategory.\n */\nclass CourseCategory\n{\n    /**\n     * Returns the category fields from the database from an int ID.\n     *\n     * @param int $categoryId The category ID\n     *\n     * @return array\n     */\n    public static function getCategoryById($categoryId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryId = (int) $categoryId;\n        $sql = \"SELECT * FROM $table WHERE id = $categoryId\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            return Database::fetch_array($result, 'ASSOC');\n        }\n\n        return [];\n    }\n\n    /**\n     * Get category details from a simple category code.\n     *\n     * @param string $categoryCode The literal category code\n     *\n     * @return array\n     */\n    public static function getCategory($categoryCode)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryCode = Database::escape_string($categoryCode);\n        $sql = \"SELECT * FROM $table WHERE code ='$categoryCode'\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $category = Database::fetch_array($result, 'ASSOC');\n            if ($category) {\n                // Get access url id\n                $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n                $sql = \"SELECT * FROM $table WHERE course_category_id = \".$category['id'];\n                $result = Database::query($sql);\n                $result = Database::fetch_array($result);\n                if ($result) {\n                    $category['access_url_id'] = $result['access_url_id'];\n                }\n\n                return $category;\n            }\n        }\n\n        return [];\n    }\n\n    /**\n     * @param string $category Optional. Parent category code\n     *\n     * @return array\n     */\n    public static function getCategories($category = '')\n    {\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $category = Database::escape_string($category);\n\n        $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n        $conditions = \" INNER JOIN $table a ON (t1.id = a.course_category_id)\";\n        $whereCondition = \" AND a.access_url_id = \".api_get_current_access_url_id();\n        $allowBaseCategories = api_get_configuration_value('allow_base_course_category');\n        if ($allowBaseCategories) {\n            $whereCondition = \" AND (a.access_url_id = \".api_get_current_access_url_id().\" OR a.access_url_id = 1) \";\n        }\n\n        $parentIdCondition = \" AND (t1.parent_id IS NULL OR t1.parent_id = '' )\";\n        if (!empty($category)) {\n            $parentIdCondition = \" AND t1.parent_id = '$category' \";\n        }\n\n        $sql = \"SELECT\n                t1.id,\n                t1.name,\n                t1.code,\n                t1.parent_id,\n                t1.tree_pos,\n                t1.children_count,\n                COUNT(DISTINCT t3.code) AS nbr_courses,\n                a.access_url_id\n                FROM $tbl_category t1\n                $conditions\n                LEFT JOIN $tbl_category t2\n                ON t1.code = t2.parent_id\n                LEFT JOIN $tbl_course t3\n                ON t3.category_code=t1.code\n                WHERE\n                    1 = 1\n                    $parentIdCondition\n                    $whereCondition\n                GROUP BY t1.name,\n                         t1.code,\n                         t1.parent_id,\n                         t1.tree_pos,\n                         t1.children_count\n                ORDER BY t1.tree_pos\";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Returns a flat list of all course categories in this URL. If the\n     * allow_base_course_category option is true, then also show the\n     * course categories of the base URL.\n     *\n     * @return array [id, name, code, parent_id, tree_pos, children_count, number_courses]\n     */\n    public static function getAllCategories()\n    {\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n\n        $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n        $conditions = \" INNER JOIN $table a ON (t1.id = a.course_category_id)\";\n        $whereCondition = \" AND a.access_url_id = \".api_get_current_access_url_id();\n        $allowBaseCategories = api_get_configuration_value('allow_base_course_category');\n        if ($allowBaseCategories) {\n            $whereCondition = \" AND (a.access_url_id = \".api_get_current_access_url_id().\" OR a.access_url_id = 1) \";\n        }\n\n        $sql = \"SELECT\n                t1.id,\n                t1.name,\n                t1.code,\n                t1.parent_id,\n                t1.tree_pos,\n                t1.children_count,\n                COUNT(DISTINCT t3.code) AS number_courses\n                FROM $tbl_category t1\n                $conditions\n                LEFT JOIN $tbl_course t3\n                ON t3.category_code=t1.code\n                WHERE 1=1\n                    $whereCondition\n                GROUP BY\n                    t1.name,\n                    t1.code,\n                    t1.parent_id,\n                    t1.tree_pos,\n                    t1.children_count\n                ORDER BY t1.parent_id, t1.tree_pos\";\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param string $code\n     * @param string $name\n     * @param string $canHaveCourses\n     * @param int    $parent_id\n     *\n     * @return bool\n     */\n    public static function addNode($code, $name, $canHaveCourses, $parent_id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $code = trim($code);\n        $name = trim($name);\n        $parent_id = trim($parent_id);\n\n        $code = CourseManager::generate_course_code($code);\n        $sql = \"SELECT 1 FROM $table\n                WHERE code = '\".Database::escape_string($code).\"'\";\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            return false;\n        }\n        $result = Database::query(\"SELECT MAX(tree_pos) AS maxTreePos FROM $table\");\n        $row = Database::fetch_array($result);\n        $tree_pos = $row['maxTreePos'] + 1;\n\n        $params = [\n            'name' => html_filter($name),\n            'code' => $code,\n            'parent_id' => empty($parent_id) ? null : $parent_id,\n            'tree_pos' => $tree_pos,\n            'children_count' => 0,\n            'auth_course_child' => $canHaveCourses,\n            'auth_cat_child' => 'TRUE',\n        ];\n\n        $categoryId = Database::insert($table, $params);\n        if ($categoryId) {\n            self::updateParentCategoryChildrenCount($parent_id, 1);\n            UrlManager::addCourseCategoryListToUrl(\n                [$categoryId],\n                [api_get_current_access_url_id()]\n            );\n\n            return $categoryId;\n        }\n\n        return false;\n    }\n\n    /**\n     * Recursive function that updates the count of children in the parent.\n     *\n     * @param string $categoryId Category ID\n     * @param int    $delta      The number to add or delete (1 to add one, -1 to remove one)\n     */\n    public static function updateParentCategoryChildrenCount($categoryId, $delta = 1)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryId = Database::escape_string($categoryId);\n        $delta = (int) $delta;\n        // First get to the highest level possible in the tree\n        $result = Database::query(\"SELECT parent_id FROM $table WHERE code = '$categoryId'\");\n        $row = Database::fetch_array($result);\n        if ($row !== false and $row['parent_id'] != 0) {\n            // if a parent was found, enter there to see if he's got one more parent\n            self::updateParentCategoryChildrenCount($row['parent_id'], $delta);\n        }\n        // Now we're at the top, get back down to update each child\n        $sql = \"UPDATE $table SET children_count = (children_count - \".abs($delta).\") WHERE code = '$categoryId'\";\n        if ($delta >= 0) {\n            $sql = \"UPDATE $table SET children_count = (children_count + $delta) WHERE code = '$categoryId'\";\n        }\n        Database::query($sql);\n    }\n\n    /**\n     * @param string $node\n     *\n     * @return bool\n     */\n    public static function deleteNode($node)\n    {\n        $category = self::getCategory($node);\n\n        if (empty($category)) {\n            return false;\n        }\n\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $node = Database::escape_string($node);\n        $result = Database::query(\"SELECT parent_id, tree_pos FROM $tbl_category WHERE code='$node'\");\n\n        if ($row = Database::fetch_array($result)) {\n            if (!empty($row['parent_id'])) {\n                Database::query(\n                    \"UPDATE $tbl_course SET category_code = '\".$row['parent_id'].\"' WHERE category_code='$node'\"\n                );\n                Database::query(\"UPDATE $tbl_category SET parent_id='\".$row['parent_id'].\"' WHERE parent_id='$node'\");\n            } else {\n                Database::query(\"UPDATE $tbl_course SET category_code='' WHERE category_code='$node'\");\n                Database::query(\"UPDATE $tbl_category SET parent_id=NULL WHERE parent_id='$node'\");\n            }\n\n            $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n            $sql = \"DELETE FROM $table WHERE course_category_id = \".$category['id'];\n\n            Database::query($sql);\n            Database::query(\"UPDATE $tbl_category SET tree_pos=tree_pos-1 WHERE tree_pos > '\".$row['tree_pos'].\"'\");\n            Database::query(\"DELETE FROM $tbl_category WHERE code='$node'\");\n\n            if (!empty($row['parent_id'])) {\n                self::updateParentCategoryChildrenCount($row['parent_id'], -1);\n            }\n\n            return true;\n        }\n    }\n\n    /**\n     * @param string $code\n     * @param string $name\n     * @param string $canHaveCourses\n     * @param string $old_code\n     *\n     * @return bool\n     */\n    public static function editNode(\n        $code,\n        $name,\n        $canHaveCourses,\n        $old_code,\n        ?string $newParentCode = null,\n        ?string $oldParentCode = null\n    ) {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n\n        $code = CourseManager::generate_course_code($code);\n        $name = html_filter($name);\n\n        $code = CourseManager::generate_course_code($code);\n        // Updating category\n        Database::update(\n            $tbl_category,\n            [\n                'name' => $name,\n                'code' => $code,\n                'auth_course_child' => $canHaveCourses,\n            ],\n            ['code = ?' => $old_code]\n        );\n\n        // Updating children\n        Database::update(\n            $tbl_category,\n            ['parent_id' => $code],\n            ['parent_id = ?' => $old_code]\n        );\n\n        // Updating course category\n        Database::update(\n            $tbl_course,\n            ['category_code' => $code],\n            ['category_code = ?' => $old_code]\n        );\n\n        Database::update(\n            $tbl_category,\n            ['parent_id' => $newParentCode ?: null],\n            ['code = ?' => $code]\n        );\n\n        self::updateParentCategoryChildrenCount($oldParentCode, -1);\n        self::updateParentCategoryChildrenCount($newParentCode, 1);\n\n        return true;\n    }\n\n    /**\n     * Move a node up on display.\n     *\n     * @param string $code\n     * @param int    $tree_pos\n     * @param string $parent_id\n     *\n     * @return bool\n     */\n    public static function moveNodeUp($code, $tree_pos, $parent_id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $code = Database::escape_string($code);\n        $tree_pos = (int) $tree_pos;\n        $parent_id = Database::escape_string($parent_id);\n\n        $parentIdCondition = \" AND (parent_id IS NULL OR parent_id = '' )\";\n        if (!empty($parent_id)) {\n            $parentIdCondition = \" AND parent_id = '$parent_id' \";\n        }\n\n        $sql = \"SELECT code,tree_pos\n                FROM $table\n                WHERE\n                    tree_pos < $tree_pos\n                    $parentIdCondition\n                ORDER BY tree_pos DESC\n                LIMIT 0,1\";\n\n        $result = Database::query($sql);\n        if (!$row = Database::fetch_array($result)) {\n            $sql = \"SELECT code, tree_pos\n                    FROM $table\n                    WHERE\n                        tree_pos > $tree_pos\n                        $parentIdCondition\n                    ORDER BY tree_pos DESC\n                    LIMIT 0,1\";\n            $result2 = Database::query($sql);\n            if (!$row = Database::fetch_array($result2)) {\n                return false;\n            }\n        }\n\n        $sql = \"UPDATE $table\n                SET tree_pos ='\".$row['tree_pos'].\"'\n                WHERE code='$code'\";\n        Database::query($sql);\n\n        $sql = \"UPDATE $table\n                SET tree_pos = '$tree_pos'\n                WHERE code= '\".$row['code'].\"'\";\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * @param string $categoryCode\n     *\n     * @return array\n     */\n    public static function getChildren($categoryCode)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryCode = Database::escape_string($categoryCode);\n        $sql = \"SELECT code, id FROM $table\n                WHERE parent_id = '$categoryCode'\";\n        $result = Database::query($sql);\n        $children = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $children[] = $row;\n            $subChildren = self::getChildren($row['code']);\n            $children = array_merge($children, $subChildren);\n        }\n\n        return $children;\n    }\n\n    /**\n     * @param string $categoryCode\n     *\n     * @return array\n     */\n    public static function getParents($categoryCode)\n    {\n        if (empty($categoryCode)) {\n            return [];\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $categoryCode = Database::escape_string($categoryCode);\n        $sql = \"SELECT code, parent_id\n                FROM $table\n                WHERE code = '$categoryCode'\";\n\n        $result = Database::query($sql);\n        $children = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $parent = self::getCategory($row['parent_id']);\n            $children[] = $row;\n            $subChildren = self::getParents($parent ? $parent['code'] : null);\n            $children = array_merge($children, $subChildren);\n        }\n\n        return $children;\n    }\n\n    /**\n     * @param string $categoryCode\n     *\n     * @return string|null\n     */\n    public static function getParentsToString($categoryCode)\n    {\n        $parents = self::getParents($categoryCode);\n\n        if (!empty($parents)) {\n            $parents = array_reverse($parents);\n            $categories = [];\n            foreach ($parents as $category) {\n                $categories[] = $category['code'];\n            }\n\n            return implode(' > ', $categories).' > ';\n        }\n\n        return null;\n    }\n\n    /**\n     * @param string $categorySource\n     *\n     * @return string\n     */\n    public static function listCategories($categorySource)\n    {\n        $categories = self::getCategories($categorySource);\n        $categorySource = Security::remove_XSS($categorySource);\n\n        if (count($categories) > 0) {\n            $table = new HTML_Table(['class' => 'table table-hover table-striped data_table']);\n            $column = 0;\n            $row = 0;\n            $headers = [\n                get_lang('Category'),\n                get_lang('SubCat'),\n                get_lang('Courses'),\n                get_lang('Actions'),\n            ];\n            foreach ($headers as $header) {\n                $table->setHeaderContents($row, $column, $header);\n                $column++;\n            }\n            $row++;\n            $mainUrl = api_get_path(WEB_CODE_PATH).'admin/course_category.php?category='.$categorySource;\n            $ajaxUrl = api_get_path(WEB_AJAX_PATH).'course_category.ajax.php';\n            $editIcon = Display::return_icon(\n                'edit.png',\n                get_lang('EditNode'),\n                null,\n                ICON_SIZE_SMALL\n            );\n            $exportIcon = Display::return_icon('export_csv.png', get_lang('ExportAsCSV'));\n\n            $deleteIcon = Display::return_icon(\n                'delete.png',\n                get_lang('DeleteNode'),\n                null,\n                ICON_SIZE_SMALL\n            );\n            $moveIcon = Display::return_icon(\n                'up.png',\n                get_lang('UpInSameLevel'),\n                null,\n                ICON_SIZE_SMALL\n            );\n\n            $showCoursesIcon = Display::return_icon(\n                'course.png',\n                get_lang('Courses'),\n                null,\n                ICON_SIZE_SMALL\n            );\n\n            $urlId = api_get_current_access_url_id();\n            foreach ($categories as $category) {\n                $categoryId = $category['id'];\n                $editUrl = $mainUrl.'&id='.$category['code'].'&action=edit';\n                $moveUrl = $mainUrl.'&id='.$category['code'].'&action=moveUp&tree_pos='.$category['tree_pos'];\n                $deleteUrl = $mainUrl.'&id='.$category['code'].'&action=delete';\n                $exportUrl = $mainUrl.'&id='.$categoryId.'&action=export';\n                $showCoursesUrl = $ajaxUrl.'?id='.$categoryId.'&a=show_courses';\n\n                $actions = [];\n                if ($urlId == $category['access_url_id']) {\n                    $actions[] = Display::url(\n                        $showCoursesIcon,\n                        $showCoursesUrl,\n                        ['onclick' => 'showCourses(this, '.$categoryId.')']\n                    );\n                    $actions[] = Display::url($editIcon, $editUrl);\n                    $actions[] = Display::url($moveIcon, $moveUrl);\n                    $actions[] = Display::url($exportIcon, $exportUrl);\n                    $actions[] = Display::url(\n                        $deleteIcon,\n                        $deleteUrl,\n                        ['onclick' => 'javascript: if (!confirm(\\''.addslashes(api_htmlentities(sprintf(get_lang('ConfirmYourChoice')), ENT_QUOTES)).'\\')) return false;']\n                    );\n                }\n\n                $url = api_get_path(WEB_CODE_PATH).'admin/course_category.php?category='.$category['code'];\n                $title = Display::url(\n                    Display::return_icon(\n                        'folder_document.gif',\n                        get_lang('OpenNode'),\n                        null,\n                        ICON_SIZE_SMALL\n                    ).' '.$category['name'].' ('.$category['code'].')',\n                    $url\n                );\n\n                $countCourses = self::countCoursesInCategory($category['code'], null, false, false);\n\n                $content = [\n                    $title,\n                    $category['children_count'],\n                    $countCourses,\n                    implode('', $actions),\n                ];\n                $column = 0;\n                foreach ($content as $value) {\n                    $table->setCellContents($row, $column, $value);\n                    $column++;\n                }\n                $row++;\n            }\n\n            return $table->toHtml();\n        }\n\n        return Display::return_message(get_lang('NoCategories'), 'warning');\n    }\n\n    /**\n     * @return array\n     */\n    public static function getCategoriesToDisplayInHomePage()\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $sql = \"SELECT name FROM $table\n                WHERE parent_id IS NULL\n                ORDER BY tree_pos\";\n\n        return Database::store_result(Database::query($sql));\n    }\n\n    /**\n     * @param string $categoryCode\n     *\n     * @return array\n     */\n    public static function getCategoriesCanBeAddedInCourse($categoryCode)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n        $conditions = \" INNER JOIN $table a ON (c.id = a.course_category_id)\";\n        $whereCondition = ' AND a.access_url_id = '.api_get_current_access_url_id();\n\n        $tbl_category = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $sql = \"SELECT code, name\n                FROM $tbl_category c\n                $conditions\n                WHERE (auth_course_child = 'TRUE' OR code = '\".Database::escape_string($categoryCode).\"')\n                $whereCondition\n                ORDER BY tree_pos\";\n        $res = Database::query($sql);\n\n        $categoryToAvoid = '';\n        if (!api_is_platform_admin()) {\n            $categoryToAvoid = api_get_configuration_value('course_category_code_to_use_as_model');\n        }\n\n        $categories[''] = '-';\n        while ($cat = Database::fetch_array($res)) {\n            $categoryCode = $cat['code'];\n            if (!empty($categoryToAvoid) && $categoryToAvoid == $categoryCode) {\n                continue;\n            }\n            $categories[$categoryCode] = '('.$categoryCode.') '.$cat['name'];\n            ksort($categories);\n        }\n\n        return $categories;\n    }\n\n    /**\n     * @param string $category_code\n     * @param string $keyword\n     * @param bool   $avoidCourses\n     * @param bool   $checkHidePrivate\n     * @param array  $conditions\n     * @param string $courseLanguageFilter\n     *\n     * @return int\n     */\n    public static function countCoursesInCategory(\n        $category_code = '',\n        $keyword = '',\n        $avoidCourses = true,\n        $checkHidePrivate = true,\n        $conditions = [],\n        $courseLanguageFilter = null,\n        $filterShowInCatalogue = false\n    ) {\n        return self::getCoursesInCategory(\n            $category_code,\n            $keyword,\n            $avoidCourses,\n            $checkHidePrivate,\n            $conditions,\n            true,\n            $courseLanguageFilter,\n            $filterShowInCatalogue\n        );\n    }\n\n    public static function getCoursesInCategory(\n        $category_code = '',\n        $keyword = '',\n        $avoidCourses = true,\n        $checkHidePrivate = true,\n        $conditions = [],\n        $getCount = false,\n        $courseLanguageFilter = null,\n        $filterShowInCatalogue = false\n    ) {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $categoryCode = Database::escape_string($category_code);\n        $keyword = Database::escape_string($keyword);\n\n        $avoidCoursesCondition = '';\n        if ($avoidCourses) {\n            $avoidCoursesCondition = CoursesAndSessionsCatalog::getAvoidCourseCondition();\n        }\n        $visibilityCondition = CourseManager::getCourseVisibilitySQLCondition('course', true, $checkHidePrivate);\n\n        $showInCatalogueCondition = '';\n        if ($filterShowInCatalogue) {\n            $showInCatalogueCondition = CoursesAndSessionsCatalog::getCoursesToShowInCatalogueCondition();\n        }\n\n        $sqlInjectJoins = '';\n        $courseLanguageWhere = '';\n        $where = ' AND 1 = 1 ';\n        $sqlInjectWhere = '';\n        if (!empty($conditions)) {\n            $sqlInjectJoins = $conditions['inject_joins'];\n            $where = $conditions['where'];\n            $sqlInjectWhere = $conditions['inject_where'];\n        }\n\n        // If have courseLanguageFilter, search for it\n        if (!empty($courseLanguageFilter)) {\n            $courseLanguageFilter = Database::escape_string($courseLanguageFilter);\n            $courseLanguageWhere = \"AND course.course_language = '$courseLanguageFilter'\";\n        }\n\n        $categoryFilter = '';\n        if ($categoryCode === 'ALL' || empty($categoryCode)) {\n            // Nothing to do\n        } elseif ($categoryCode === 'NONE') {\n            $categoryFilter = ' AND category_code = \"\" ';\n        } else {\n            $categoryFilter = ' AND category_code = \"'.$categoryCode.'\" ';\n        }\n\n        $searchFilter = '';\n        if (!empty($keyword)) {\n            $searchFilter = ' AND (\n                code LIKE \"%'.$keyword.'%\" OR\n                title LIKE \"%'.$keyword.'%\" OR\n                tutor_name LIKE \"%'.$keyword.'%\"\n            ) ';\n        }\n\n        $urlCondition = ' access_url_id = '.api_get_current_access_url_id().' AND';\n        $tbl_url_rel_course = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $select = \" DISTINCT course.id, course.code, course.title, course.category_code \";\n        if ($getCount) {\n            $select = \"count(DISTINCT course.id) as count\";\n        }\n        $sql = \"SELECT $select\n                FROM $tbl_course as course\n                INNER JOIN $tbl_url_rel_course as url_rel_course\n                ON (url_rel_course.c_id = course.id)\n                $sqlInjectJoins\n                WHERE\n                    $urlCondition\n                    course.visibility != '0' AND\n                    course.visibility != '4'\n                    $courseLanguageWhere\n                    $categoryFilter\n                    $searchFilter\n                    $avoidCoursesCondition\n                    $showInCatalogueCondition\n                    $visibilityCondition\n                    $where\n                    $sqlInjectWhere\n            \";\n\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            $row = Database::fetch_array($result);\n\n            return (int) $row['count'];\n        }\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param array $list\n     *\n     * @return array\n     */\n    public static function getCourseCategoryNotInList($list)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n\n        if (empty($list)) {\n            $sql = \"SELECT * FROM $table\n                    WHERE (parent_id IS NULL) \";\n            $result = Database::query($sql);\n\n            return Database::store_result($result, 'ASSOC');\n        }\n\n        $list = array_map('intval', $list);\n        $listToString = implode(\"','\", $list);\n\n        $sql = \"SELECT * FROM $table\n                WHERE id NOT IN ('$listToString') AND (parent_id IS NULL) \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param string $keyword\n     *\n     * @return array|null\n     */\n    public static function searchCategoryByKeyword($keyword)\n    {\n        if (empty($keyword)) {\n            return null;\n        }\n\n        $tableCategory = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        $table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE_CATEGORY);\n        $conditions = \" INNER JOIN $table a ON (c.id = a.course_category_id)\";\n        $whereCondition = \" AND a.access_url_id = \".api_get_current_access_url_id();\n\n        $allowBaseCategories = api_get_configuration_value('allow_base_course_category');\n        if ($allowBaseCategories) {\n            $whereCondition = \" AND (a.access_url_id = \".api_get_current_access_url_id().\" OR a.access_url_id = 1) \";\n        }\n\n        $keyword = Database::escape_string($keyword);\n\n        $sql = \"SELECT c.*, c.name as text\n                FROM $tableCategory c $conditions\n                WHERE\n                (\n                    c.code LIKE '%$keyword%' OR name LIKE '%$keyword%'\n                ) AND auth_course_child = 'TRUE'\n                $whereCondition \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Return the name tool by action.\n     *\n     * @param string $action\n     *\n     * @return string\n     */\n    public static function getCourseCatalogNameTools($action)\n    {\n        $nameTools = get_lang('MyCourses');\n        if (empty($action)) {\n            return $nameTools; //should never happen\n        }\n\n        switch ($action) {\n            case 'subscribe':\n            case 'subscribe_user_with_password':\n            case 'display_random_courses':\n            case 'display_courses':\n                $nameTools = get_lang('CourseManagement');\n                break;\n            case 'display_sessions':\n                $nameTools = get_lang('Sessions');\n                break;\n            default:\n                // Nothing to do\n                break;\n        }\n\n        return $nameTools;\n    }\n\n    /**\n     * Save image for a course category.\n     *\n     * @param int   $categoryId Course category ID\n     * @param array $fileData   File data from $_FILES\n     */\n    public static function saveImage($categoryId, $fileData)\n    {\n        $categoryInfo = self::getCategoryById($categoryId);\n        if (empty($categoryInfo)) {\n            return;\n        }\n\n        if (!empty($fileData['error'])) {\n            return;\n        }\n\n        $extension = getextension($fileData['name']);\n        $dirName = 'course_category/';\n        $fileDir = api_get_path(SYS_UPLOAD_PATH).$dirName;\n        $fileName = \"cc_$categoryId.{$extension[0]}\";\n\n        if (!file_exists($fileDir)) {\n            mkdir($fileDir, api_get_permissions_for_new_directories(), true);\n        }\n\n        $image = new Image($fileData['tmp_name']);\n        $image->send_image($fileDir.$fileName);\n\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        Database::update(\n            $table,\n            ['image' => $dirName.$fileName],\n            ['id = ?' => $categoryId]\n        );\n    }\n\n    /**\n     * @param $categoryId\n     * @param string $description\n     *\n     * @return string\n     */\n    public static function saveDescription($categoryId, $description)\n    {\n        $categoryInfo = self::getCategoryById($categoryId);\n        if (empty($categoryInfo)) {\n            return false;\n        }\n        $table = Database::get_main_table(TABLE_MAIN_CATEGORY);\n        Database::update(\n            $table,\n            ['description' => $description],\n            ['id = ?' => $categoryId]\n        );\n\n        return true;\n    }\n}\n"], "filenames": ["main/inc/lib/course_category.lib.php"], "buggy_code_start_loc": [191], "buggy_code_end_loc": [326], "fixing_code_start_loc": [191], "fixing_code_end_loc": [331], "type": "CWE-79", "message": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the course categories' definition.", "other": {"cve": {"id": "CVE-2023-37062", "sourceIdentifier": "cve@mitre.org", "published": "2023-07-07T17:15:09.883", "lastModified": "2023-07-12T20:50:55.603", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the course categories' definition."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.20", "matchCriteriaId": "7C09DB8C-2B3F-4EE5-B478-546C468B1E04"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/c263933d1d958edee3999820f636c8cb919d03d1", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-115-2023-06-06-Low-impact-Low-risk-XSS-through-admin-account-course-category", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/c263933d1d958edee3999820f636c8cb919d03d1"}}