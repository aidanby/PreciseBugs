{"buggy_code": ["CONTENTS OF THIS FILE\r\n---------------------\r\n\r\n* Introduction\r\n* Building the Library\r\n* Installing the Library\r\n* Makefile Targets\r\n* DataDir Patch\r\n* Dynamic Analysis\r\n* Acceptance Testing\r\n* Reporting problems\r\n\r\nINTRODUCTION\r\n------------\r\n\r\nCrypto++ Library is a free C++ class library of cryptographic algorithms and schemes. It was written and placed in public domain by Wei Dai. The library homepage is at http://www.cryptopp.com/. The latest library source code can be found at http://github.com/weidai11/cryptopp. For licensing and copyright information, please see License.txt.\r\n\r\nThese are general instructions for the BSDs, Linux, OS X, Solaris and Unix. On BSD and Solaris you will likely have to use `gmake` to build the library. On Linux, OS X, Solaris and Unix, the system's make should be OK. On Windows, Crypto++ provides Borland and Visual Studio solutions. Cmake is available, but its still maturing.\r\n\r\nCrypto++ uses a GNU makefile, which combines configuration and a non-anemic make. You should look through the GNUmakefile and config.h to ensure settings look reasonable before building. Please pay particular attention to CRYPTOPP_NO_UNALIGNED_DATA_ACCESS in config.h.\r\n\r\nCrypto++ does not depend upon other tools or libraries. It does not use Autotools, does not use Cmake, and does not use Boost.\r\n\r\n\r\nBUILDING THE LIBRARY\r\n--------------------\r\n\r\nIn general, all you should have to do is open a terminal, and then:\r\n\r\n    make\r\n    make test\r\n    sudo make install\r\n\r\nThe command above builds the static library and cryptest.exe program. If you want to build the shared object, then issue:\r\n\r\n    make static dynamic cryptest.exe\r\n\r\nOr:\r\n\r\n    make libcryptopp.a libcryptopp.so cryptest.exe\r\n\r\n\r\nIf you would like to use a different compiler, the set CXX:\r\n\r\n    export CXX=/opt/intel/bin/icpc\r\n    make\r\n\r\nIf you want to build using C++11, then:\r\n\r\n    make CXXFLAGS=\"-std=c++11\"\r\n\r\nOr:\r\n\r\n    CXXFLAGS=\"-std=c++11\"\r\n    make\r\n\r\nLLVM's libc++ is also supported, so you can:\r\n\r\n    CXXFLAGS=\"-std=c++11 -stdlib=libc++\"\r\n    make\r\n\r\n\r\nINSTALLING THE LIBRARY\r\n----------------------\r\n\r\nTo install the library into a user selected directory, perform:\r\n\r\n    make install PREFIX=/usr/local\r\n\r\nIf you are going to run `make install PREFIX=/usr/local`, then you should build with '-DCRYPTOPP_DATA_DIR='\\\"$PREFIX/share/cryptopp/\\\"' to ensure cryptest.exe can locate the test data files and test vectors after installation. The trailing slash in the path is needed because simple preprocessor concatenation is used.\r\n\r\nDuring install, the makefile copies cryptest.exe into $PREFIX/bin, copies headers into $PREFIX/include/cryptopp, and copies libraries into $PREFIX/lib. If you only built a static or dynamic version of the library, then only one library is copied. The install recipe does not fail if the static library or shared object is not built.\r\n\r\nPREFIX is non-standard, but its retained for historical purposes. The makefile also responds to `prefix=<path>`.\r\n\r\n\r\nMAKEFILE TARGETS\r\n----------------\r\n\r\nThe following are some of the targets provided by the GNU makefile.\r\n\r\n`make` invokes the default rule, which builds the Crypto++ static library and test harness. They are called `libcryptopp.a` and `cryptest.exe`, respectively. `cryptest.exe` links against `libcryptopp.a`, so the static library is a prerequisite for the target.\r\n\r\n`make libcryptopp.a` and `make static` build the static version of the library.\r\n\r\n`make libcryptopp.so` and `make dynamic` build the dynamic version of the library. On Mac OS X, the recipe builds `libcryptopp.dylib` instead.\r\n\r\n`make cryptest.exe` builds the library test harness.\r\n\r\n`make test` and `make check` are the same recipe and invoke the test harness with the the validation option. That is, it executes `cryptest.exe v`.\r\n\r\n`make install` installs the library. By default, the makefile copies into `/usr/local` by default.\r\n\r\n`make clean` cleans most transient and temporary objects.\r\n\r\n`make disclean` cleans most objects that are not part of the original distribution.\r\n\r\n`make dist` and `make zip` builds ZIP file that is suitable for distribution.\r\n\r\n`make iso` builds an ISO on Linux or OS X that is suitable for alternate distribution.\r\n\r\n`make ubsan` and `make asan` builds the library with the respective sanitizer.\r\n\r\n\r\nDYNAMIC ANALYSIS\r\n----------------\r\n\r\nThe Crypto++ embraces tools like Undefined Behavior sanitizer (UBsan), Address sanitizer (Asan) and Valgrind. Both Clang 3.2 and above and GCC 4.8 and above provide sanitizers. Please check with your distribution on how to install the compiler with its sanitizer libraries (they are sometimes a separate install item).\r\n\r\nUBsan and Asan are mutually exclusive options, so you can perform only one of these at a time:\r\n\r\n    make ubsan\r\n    ./cryptest.exe v 2>&1 | egrep \"(error|FAILED)\"\r\n    ./cryptest.exe tv all 2>&1 | egrep \"(error|FAILED)\"\r\n\r\nOr:\r\n\r\n    make asan\r\n    ./cryptest.exe v 2>&1 | egrep \"(error|FAILED)\"\r\n    ./cryptest.exe tv all 2>&1 | egrep \"(error|FAILED)\"\r\n\r\nIf you experience self test failures or see reports of undefined behavior, then you should ensure CRYPTOPP_NO_UNALIGNED_DATA_ACCESS is defined in config.h. CRYPTOPP_NO_UNALIGNED_DATA_ACCESS is not defined due to historical purposes.\r\n\r\nIf you experience failures under Asan, then gather more information with:\r\n\r\n    ./cryptest.exe v 2>&1 | asan_symbolize\r\n\r\nIf you moved Crypto++ such that the paths have changed, then perform:\r\n\r\n    ./cryptest.exe v 2>&1 | sed \"s/<old path>/<new path>/g\" | asan_symbolize\r\n\r\n\r\nACCEPTANCE TESTING\r\n------------------\r\n\r\nCrypto++ uses five security gates in its engineering process. The library must maintain the quality provided by the review system and integrity of the test suites. You can use the information to decide if the Crypto++ library suits your needs and provides a compatible security posture.\r\n\r\nThe first gate is code review and discussion of proposed patches. Git commits often cross reference a User Group discussions.\r\n\r\nSecond is the compiler warning system. The code must clean compile under the equivalent of GCC's -Wall -Wextra (modulo -Wno-type-limits -Wno-unknown-pragmas). This is a moving target as compiler analysis improves.\r\n\r\nThird, the code must pass cleanly though GCC and Clang's Undefined Behavior sanitizer (UBsan) and Address sanitizer (Asan) with CRYPTOPP_NO_UNALIGNED_DATA_ACCESS defined in config.h. See DYNAMIC ANALYSIS above on how to execute them.\r\n\r\nFourth, the test harness provides a \"validation\" option which performs basic system checks (like endianess and word sizes) and exercises algorithms (like AES and SHA). You run the validation suite as shown below. The tail of the output should indicate 0 failed tests.\r\n\r\n    ./cryptest.exe v\r\n    ...\r\n\r\n    All tests passed!\r\n    Test ended at Sun Jul 26 02:10:57 2015\r\n    Seed used was: 1437891055\r\n\r\nFifth, the test harness provides a \"test vector\" option which uses many known test vectors, even those published by other people (like Brian Gladman for AES). You run the test vectors as shown below. The tail of the output should indicate 0 failed tests.\r\n\r\n    ./cryptest.exe tv all\r\n    ...\r\n\r\n    Testing SymmetricCipher algorithm MARS/ECB.\r\n    .................\r\n    Tests complete. Total tests = 4094. Failed tests = 0.\r\n\r\nThe library also offers its test script for those who want to use it. The test script is names cryptest.sh, and it repeatedly builds the library and exectues the tests under various configurations. It takes 2 to 4 hours to run on a semi-modern desktop or server; and days to run on an IoT gadget. Also see http://github.com/weidai11/cryptopp/blob/master/cryptest.sh and http://cryptopp.com/wiki/Cryptest.sh.\r\n\r\nREPORTING PROBLEMS\r\n------------------\r\n\r\nDirty compiles and failures in the validation suite or test vectors should be reported at the Crypto++ User Group. The User Group is located at http://groups.google.com/forum/#!forum/cryptopp-users.\r\n\r\nAlso see http://www.cryptopp.com/wiki/Bug_Report.\r\n", "Crypto++: a C++ Class Library of Cryptographic Schemes\r\nVersion 5.6.4 - SEPT/11/2016\r\n\r\nCrypto++ Library is a free C++ class library of cryptographic schemes.\r\nCurrently the library contains the following algorithms:\r\n\r\n                   algorithm type  name\r\n\r\n authenticated encryption schemes  GCM, CCM, EAX\r\n\r\n        high speed stream ciphers  ChaCha (ChaCha8/12/20), Panama, Sosemanuk,\r\n                                   Salsa20, XSalsa20\r\n\r\n           AES and AES candidates  AES (Rijndael), RC6, MARS, Twofish, Serpent,\r\n                                   CAST-256\r\n\r\n                                   IDEA, Triple-DES (DES-EDE2 and DES-EDE3),\r\n              other block ciphers  Camellia, SEED, RC5, Blowfish, TEA, XTEA,\r\n                                   Skipjack, SHACAL-2\r\n\r\n  block cipher modes of operation  ECB, CBC, CBC ciphertext stealing (CTS),\r\n                                   CFB, OFB, counter mode (CTR)\r\n\r\n     message authentication codes  VMAC, HMAC, GMAC, CMAC, CBC-MAC, DMAC,\r\n                                   Two-Track-MAC\r\n\r\n                                   BLAKE2 (BLAKE2b, BLAKE2s), SHA-1, SHA-2 (SHA-224,\r\n                   hash functions  SHA-256, SHA-384, and SHA-512), SHA-3, Tiger,\r\n                                   WHIRLPOOL, RIPEMD-128, RIPEMD-256, RIPEMD-160,\r\n                                   RIPEMD-320\r\n\r\n                                   RSA, DSA, ElGamal, Nyberg-Rueppel (NR),\r\n          public-key cryptography  Rabin-Williams (RW), LUC, LUCELG,\r\n                                   DLIES (variants of DHAES), ESIGN\r\n\r\n   padding schemes for public-key  PKCS#1 v2.0, OAEP, PSS, PSSR, IEEE P1363\r\n                          systems  EMSA2 and EMSA5\r\n\r\n                                   Diffie-Hellman (DH), Unified Diffie-Hellman\r\n            key agreement schemes  (DH2), Menezes-Qu-Vanstone (MQV), Hashed MQV (HMQV),\r\n                                   Fully Hashed MQV (FHMQV), LUCDIF, XTR-DH\r\n\r\n      elliptic curve cryptography  ECDSA, ECNR, ECIES, ECDH, ECMQV\r\n\r\n          insecure or obsolescent  MD2, MD4, MD5, Panama Hash, DES, ARC4, SEAL\r\nalgorithms retained for backwards  3.0, WAKE-OFB, DESX (DES-XEX3), RC2,\r\n     compatibility and historical  SAFER, 3-WAY, GOST, SHARK, CAST-128, Square\r\n                            value\r\n\r\nOther features include:\r\n\r\n  * pseudo random number generators (PRNG): ANSI X9.17 appendix C, RandomPool\r\n  * password based key derivation functions: PBKDF1 and PBKDF2 from PKCS #5,\r\n    PBKDF from PKCS #12 appendix B, HKDF from RFC 5869\r\n  * Shamir's secret sharing scheme and Rabin's information dispersal algorithm\r\n    (IDA)\r\n  * fast multi-precision integer (bignum) and polynomial operations\r\n  * finite field arithmetics, including GF(p) and GF(2^n)\r\n  * prime number generation and verification\r\n  * useful non-cryptographic algorithms\r\n      + DEFLATE (RFC 1951) compression/decompression with gzip (RFC 1952) and\r\n        zlib (RFC 1950) format support\r\n      + hex, base-32, and base-64 coding/decoding\r\n      + 32-bit CRC, CRC-C and Adler32 checksum\r\n  * class wrappers for these platform and operating system features (optional):\r\n      + high resolution timers on Windows, Unix, and Mac OS\r\n      + Berkeley and Windows style sockets\r\n      + Windows named pipes\r\n      + /dev/random, /dev/urandom, /dev/srandom\r\n      + Microsoft's CryptGenRandom on Windows\r\n      + VIA Padlock, Amd64 RDRAND and RDSEED\r\n  * A high level interface for most of the above, using a filter/pipeline\r\n    metaphor\r\n  * benchmarks and validation testing\r\n  * x86, x86_64, MMX, SSE2, SSE4 assembly code for the most commonly used\r\n    algorithms, with run-time CPU feature detection and code selection.\r\n    Limited ARM NEON and ARMv8 ASIMD, CRC and Crypto extension support\r\n  * some versions are available in FIPS 140-2 validated form\r\n\r\nYou are welcome to use it for any purpose without paying me, but see\r\nLicense.txt for the fine print.\r\n\r\nThe following compilers are supported for this release. Please visit\r\nhttp://www.cryptopp.com the most up to date build instructions and porting notes.\r\n\r\n  * MSVC 6.0 - 2015\r\n  * GCC 3.3 - 7.0\r\n  * Clang 2.9 - 4.0\r\n  * C++Builder 2010\r\n  * Intel C++ Compiler 9 - 16.0\r\n  * Sun Studio 12u1 - 12.5\r\n\r\n*** Important Usage Notes ***\r\n\r\n1. If a constructor for A takes a pointer to an object B (except primitive\r\ntypes such as int and char), then A owns B and will delete B at A's\r\ndestruction.  If a constructor for A takes a reference to an object B,\r\nthen the caller retains ownership of B and should not destroy it until\r\nA no longer needs it.\r\n\r\n2. Crypto++ is thread safe at the class level. This means you can use\r\nCrypto++ safely in a multithreaded application, but you must provide\r\nsynchronization when multiple threads access a common Crypto++ object.\r\n\r\n*** MSVC-Specific Information ***\r\n\r\nOn Windows, Crypto++ can be compiled into 3 forms: a static library\r\nincluding all algorithms, a DLL with only FIPS Approved algorithms, and\r\na static library with only algorithms not in the DLL.\r\n(FIPS Approved means Approved according to the FIPS 140-2 standard.)\r\nThe DLL may be used by itself, or it may be used together with the second\r\nform of the static library. MSVC project files are included to build\r\nall three forms, and sample applications using each of the three forms\r\nare also included.\r\n\r\nTo compile Crypto++ with MSVC, open  \"cryptest.sln\" (for MSVC 2005 - 2015)\r\nor \"cryptest.dsw\" (for MSVC 6 and MSVC .NET 2003) workspace file and build\r\none or more of the following projects:\r\n\r\ncryptdll - This builds the DLL. Please note that if you wish to use Crypto++\r\n  as a FIPS validated module, you must use a pre-built DLL that has undergone\r\n  the FIPS validation process instead of building your own.\r\ndlltest - This builds a sample application that only uses the DLL.\r\ncryptest Non-DLL-Import Configuration - This builds the full static library\r\n  along with a full test driver.\r\ncryptest DLL-Import Configuration - This builds a static library containing\r\n  only algorithms not in the DLL, along with a full test driver that uses\r\n  both the DLL and the static library.\r\n\r\nTo use the Crypto++ DLL in your application, #include \"dll.h\" before including\r\nany other Crypto++ header files, and place the DLL in the same directory as\r\nyour .exe file. dll.h includes the line #pragma comment(lib, \"cryptopp\")\r\nso you don't have to explicitly list the import library in your project\r\nsettings. To use a static library form of Crypto++, make the \"cryptlib\"\r\nproject a dependency of your application project, or specify it as\r\nan additional library to link with in your project settings.\r\nIn either case you should check the compiler options to\r\nmake sure that the library and your application are using the same C++\r\nrun-time libraries and calling conventions.\r\n\r\n*** DLL Memory Management ***\r\n\r\nBecause it's possible for the Crypto++ DLL to delete objects allocated\r\nby the calling application, they must use the same C++ memory heap. Three\r\nmethods are provided to achieve this.\r\n1.  The calling application can tell Crypto++ what heap to use. This method\r\n    is required when the calling application uses a non-standard heap.\r\n2.  Crypto++ can tell the calling application what heap to use. This method\r\n    is required when the calling application uses a statically linked C++ Run\r\n    Time Library. (Method 1 does not work in this case because the Crypto++ DLL\r\n    is initialized before the calling application's heap is initialized.)\r\n3.  Crypto++ can automatically use the heap provided by the calling application's\r\n    dynamically linked C++ Run Time Library. The calling application must\r\n    make sure that the dynamically linked C++ Run Time Library is initialized\r\n    before Crypto++ is loaded. (At this time it is not clear if it is possible\r\n    to control the order in which DLLs are initialized on Windows 9x machines,\r\n    so it might be best to avoid using this method.)\r\n\r\nWhen Crypto++ attaches to a new process, it searches all modules loaded\r\ninto the process space for exported functions \"GetNewAndDeleteForCryptoPP\"\r\nand \"SetNewAndDeleteFromCryptoPP\". If one of these functions is found,\r\nCrypto++ uses methods 1 or 2, respectively, by calling the function.\r\nOtherwise, method 3 is used.\r\n\r\n*** GCC-Specific Information ***\r\n\r\nA makefile is included for you to compile Crypto++ with GCC. Make sure\r\nyou are using GNU Make and GNU ld. The make process will produce two files,\r\nlibcryptopp.a and cryptest.exe. Run \"cryptest.exe v\" for the validation\r\nsuite.\r\n\r\n*** Documentation and Support ***\r\n\r\nCrypto++ is documented through inline comments in header files, which are\r\nprocessed through Doxygen to produce an HTML reference manual. You can find\r\na link to the manual from http://www.cryptopp.com. Also at that site is\r\nthe Crypto++ FAQ, which you should browse through before attempting to\r\nuse this library, because it will likely answer many of questions that\r\nmay come up. Finally, the site provide the wiki which has many topics\r\nand code examples.\r\n\r\nIf you run into any problems, please try the Crypto++ mailing list.\r\nThe subscription information and the list archive are available on\r\nhttp://www.cryptopp.com. You can also email me directly by visiting\r\nhttp://www.weidai.com, but you will probably get a faster response through\r\nthe mailing list.\r\n\r\n*** History ***\r\n\r\n1.0 - First public release.  Withdrawn at the request of RSA DSI.\r\n    - included Blowfish, BBS, DES, DH, Diamond, DSA, ElGamal, IDEA,\r\n      MD5, RC4, RC5, RSA, SHA, WAKE, secret sharing, DEFLATE compression\r\n    - had a serious bug in the RSA key generation code.\r\n\r\n1.1 - Removed RSA, RC4, RC5\r\n    - Disabled calls to RSAREF's non-public functions\r\n    - Minor bugs fixed\r\n\r\n2.0 - a completely new, faster multiprecision integer class\r\n    - added MD5-MAC, HAVAL, 3-WAY, TEA, SAFER, LUC, Rabin, BlumGoldwasser,\r\n      elliptic curve algorithms\r\n    - added the Lucas strong probable primality test\r\n    - ElGamal encryption and signature schemes modified to avoid weaknesses\r\n    - Diamond changed to Diamond2 because of key schedule weakness\r\n    - fixed bug in WAKE key setup\r\n    - SHS class renamed to SHA\r\n    - lots of miscellaneous optimizations\r\n\r\n2.1 - added Tiger, HMAC, GOST, RIPE-MD160, LUCELG, LUCDIF, XOR-MAC,\r\n      OAEP, PSSR, SHARK\r\n    - added precomputation to DH, ElGamal, DSA, and elliptic curve algorithms\r\n    - added back RC5 and a new RSA\r\n    - optimizations in elliptic curves over GF(p)\r\n    - changed Rabin to use OAEP and PSSR\r\n    - changed many classes to allow copy constructors to work correctly\r\n    - improved exception generation and handling\r\n\r\n2.2 - added SEAL, CAST-128, Square\r\n    - fixed bug in HAVAL (padding problem)\r\n    - fixed bug in triple-DES (decryption order was reversed)\r\n    - fixed bug in RC5 (couldn't handle key length not a multiple of 4)\r\n    - changed HMAC to conform to RFC-2104 (which is not compatible\r\n      with the original HMAC)\r\n    - changed secret sharing and information dispersal to use GF(2^32)\r\n      instead of GF(65521)\r\n    - removed zero knowledge prover/verifier for graph isomorphism\r\n    - removed several utility classes in favor of the C++ standard library\r\n\r\n2.3 - ported to EGCS\r\n    - fixed incomplete workaround of min/max conflict in MSVC\r\n\r\n3.0 - placed all names into the \"CryptoPP\" namespace\r\n    - added MD2, RC2, RC6, MARS, RW, DH2, MQV, ECDHC, CBC-CTS\r\n    - added abstract base classes PK_SimpleKeyAgreementDomain and\r\n      PK_AuthenticatedKeyAgreementDomain\r\n    - changed DH and LUCDIF to implement the PK_SimpleKeyAgreementDomain\r\n      interface and to perform domain parameter and key validation\r\n    - changed interfaces of PK_Signer and PK_Verifier to sign and verify\r\n      messages instead of message digests\r\n    - changed OAEP to conform to PKCS#1 v2.0\r\n    - changed benchmark code to produce HTML tables as output\r\n    - changed PSSR to track IEEE P1363a\r\n    - renamed ElGamalSignature to NR and changed it to track IEEE P1363\r\n    - renamed ECKEP to ECMQVC and changed it to track IEEE P1363\r\n    - renamed several other classes for clarity\r\n    - removed support for calling RSAREF\r\n    - removed option to compile old SHA (SHA-0)\r\n    - removed option not to throw exceptions\r\n\r\n3.1 - added ARC4, Rijndael, Twofish, Serpent, CBC-MAC, DMAC\r\n    - added interface for querying supported key lengths of symmetric ciphers\r\n      and MACs\r\n    - added sample code for RSA signature and verification\r\n    - changed CBC-CTS to be compatible with RFC 2040\r\n    - updated SEAL to version 3.0 of the cipher specification\r\n    - optimized multiprecision squaring and elliptic curves over GF(p)\r\n    - fixed bug in MARS key setup\r\n    - fixed bug with attaching objects to Deflator\r\n\r\n3.2 - added DES-XEX3, ECDSA, DefaultEncryptorWithMAC\r\n    - renamed DES-EDE to DES-EDE2 and TripleDES to DES-EDE3\r\n    - optimized ARC4\r\n    - generalized DSA to allow keys longer than 1024 bits\r\n    - fixed bugs in GF2N and ModularArithmetic that can cause calculation errors\r\n    - fixed crashing bug in Inflator when given invalid inputs\r\n    - fixed endian bug in Serpent\r\n    - fixed padding bug in Tiger\r\n\r\n4.0 - added Skipjack, CAST-256, Panama, SHA-2 (SHA-256, SHA-384, and SHA-512),\r\n      and XTR-DH\r\n    - added a faster variant of Rabin's Information Dispersal Algorithm (IDA)\r\n    - added class wrappers for these operating system features:\r\n      - high resolution timers on Windows, Unix, and MacOS\r\n      - Berkeley and Windows style sockets\r\n      - Windows named pipes\r\n      - /dev/random and /dev/urandom on Linux and FreeBSD\r\n      - Microsoft's CryptGenRandom on Windows\r\n    - added support for SEC 1 elliptic curve key format and compressed points\r\n    - added support for X.509 public key format (subjectPublicKeyInfo) for\r\n      RSA, DSA, and elliptic curve schemes\r\n    - added support for DER and OpenPGP signature format for DSA\r\n    - added support for ZLIB compressed data format (RFC 1950)\r\n    - changed elliptic curve encryption to use ECIES (as defined in SEC 1)\r\n    - changed MARS key schedule to reflect the latest specification\r\n    - changed BufferedTransformation interface to support multiple channels\r\n      and messages\r\n    - changed CAST and SHA-1 implementations to use public domain source code\r\n    - fixed bug in StringSource\r\n    - optmized multi-precision integer code for better performance\r\n\r\n4.1 - added more support for the recommended elliptic curve parameters in SEC 2\r\n    - added Panama MAC, MARC4\r\n    - added IV stealing feature to CTS mode\r\n    - added support for PKCS #8 private key format for RSA, DSA, and elliptic\r\n      curve schemes\r\n    - changed Deflate, MD5, Rijndael, and Twofish to use public domain code\r\n    - fixed a bug with flushing compressed streams\r\n    - fixed a bug with decompressing stored blocks\r\n    - fixed a bug with EC point decompression using non-trinomial basis\r\n    - fixed a bug in NetworkSource::GeneralPump()\r\n    - fixed a performance issue with EC over GF(p) decryption\r\n    - fixed syntax to allow GCC to compile without -fpermissive\r\n    - relaxed some restrictions in the license\r\n\r\n4.2 - added support for longer HMAC keys\r\n    - added MD4 (which is not secure so use for compatibility purposes only)\r\n    - added compatibility fixes/workarounds for STLport 4.5, GCC 3.0.2,\r\n      and MSVC 7.0\r\n    - changed MD2 to use public domain code\r\n    - fixed a bug with decompressing multiple messages with the same object\r\n    - fixed a bug in CBC-MAC with MACing multiple messages with the same object\r\n    - fixed a bug in RC5 and RC6 with zero-length keys\r\n    - fixed a bug in Adler32 where incorrect checksum may be generated\r\n\r\n5.0 - added ESIGN, DLIES, WAKE-OFB, PBKDF1 and PBKDF2 from PKCS #5\r\n    - added key validation for encryption and signature public/private keys\r\n    - renamed StreamCipher interface to SymmetricCipher, which is now implemented\r\n      by both stream ciphers and block cipher modes including ECB and CBC\r\n    - added keying interfaces to support resetting of keys and IVs without\r\n      having to destroy and recreate objects\r\n    - changed filter interface to support non-blocking input/output\r\n    - changed SocketSource and SocketSink to use overlapped I/O on Microsoft Windows\r\n    - grouped related classes inside structs to help templates, for example\r\n      AESEncryption and AESDecryption are now AES::Encryption and AES::Decryption\r\n    - where possible, typedefs have been added to improve backwards\r\n      compatibility when the CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY macro is defined\r\n    - changed Serpent, HAVAL and IDEA to use public domain code\r\n    - implemented SSE2 optimizations for Integer operations\r\n    - fixed a bug in HMAC::TruncatedFinal()\r\n    - fixed SKIPJACK byte ordering following NIST clarification dated 5/9/02\r\n\r\n5.01 - added known answer test for X9.17 RNG in FIPS 140 power-up self test\r\n     - submitted to NIST/CSE, but not publicly released\r\n\r\n5.02 - changed EDC test to MAC integrity check using HMAC/SHA1\r\n     - improved performance of integrity check\r\n     - added blinding to defend against RSA timing attack\r\n\r\n5.03 - created DLL version of Crypto++ for FIPS 140-2 validation\r\n     - fixed vulnerabilities in GetNextIV for CTR and OFB modes\r\n\r\n5.0.4 - Removed DES, SHA-256, SHA-384, SHA-512 from DLL\r\n\r\n5.1 - added PSS padding and changed PSSR to track IEEE P1363a draft standard\r\n    - added blinding for RSA and Rabin to defend against timing attacks\r\n      on decryption operations\r\n    - changed signing and decryption APIs to support the above\r\n    - changed WaitObjectContainer to allow waiting for more than 64\r\n      objects at a time on Win32 platforms\r\n    - fixed a bug in CBC and ECB modes with processing non-aligned data\r\n    - fixed standard conformance bugs in DLIES (DHAES mode) and RW/EMSA2\r\n      signature scheme (these fixes are not backwards compatible)\r\n    - fixed a number of compiler warnings, minor bugs, and portability problems\r\n    - removed Sapphire\r\n\r\n5.2 - merged in changes for 5.01 - 5.0.4\r\n    - added support for using encoding parameters and key derivation parameters\r\n      with public key encryption (implemented by OAEP and DL/ECIES)\r\n    - added Camellia, SHACAL-2, Two-Track-MAC, Whirlpool, RIPEMD-320,\r\n      RIPEMD-128, RIPEMD-256, Base-32 coding, FIPS variant of CFB mode\r\n    - added ThreadUserTimer for timing thread CPU usage\r\n    - added option for password-based key derivation functions\r\n      to iterate until a mimimum elapsed thread CPU time is reached\r\n    - added option (on by default) for DEFLATE compression to detect\r\n      uncompressible files and process them more quickly\r\n    - improved compatibility and performance on 64-bit platforms,\r\n      including Alpha, IA-64, x86-64, PPC64, Sparc64, and MIPS64\r\n    - fixed ONE_AND_ZEROS_PADDING to use 0x80 instead 0x01 as padding.\r\n    - fixed encoding/decoding of PKCS #8 privateKeyInfo to properly\r\n      handle optional attributes\r\n\r\n5.2.1 - fixed bug in the \"dlltest\" DLL testing program\r\n      - fixed compiling with STLport using VC .NET\r\n      - fixed compiling with -fPIC using GCC\r\n      - fixed compiling with -msse2 on systems without memalign()\r\n      - fixed inability to instantiate PanamaMAC\r\n      - fixed problems with inline documentation\r\n\r\n5.2.2 - added SHA-224\r\n      - put SHA-256, SHA-384, SHA-512, RSASSA-PSS into DLL\r\n\r\n5.2.3 - fixed issues with FIPS algorithm test vectors\r\n      - put RSASSA-ISO into DLL\r\n\r\n5.3 - ported to MSVC 2005 with support for x86-64\r\n    - added defense against AES timing attacks, and more AES test vectors\r\n    - changed StaticAlgorithmName() of Rijndael to \"AES\", CTR to \"CTR\"\r\n\r\n5.4 - added Salsa20\r\n    - updated Whirlpool to version 3.0\r\n    - ported to GCC 4.1, Sun C++ 5.8, and Borland C++Builder 2006\r\n\r\n5.5 - added VMAC and Sosemanuk (with x86-64 and SSE2 assembly)\r\n    - improved speed of integer arithmetic, AES, SHA-512, Tiger, Salsa20,\r\n      Whirlpool, and PANAMA cipher using assembly (x86-64, MMX, SSE2)\r\n    - optimized Camellia and added defense against timing attacks\r\n    - updated benchmarks code to show cycles per byte and to time key/IV setup\r\n    - started using OpenMP for increased multi-core speed\r\n    - enabled GCC optimization flags by default in GNUmakefile\r\n    - added blinding and computational error checking for RW signing\r\n    - changed RandomPool, X917RNG, GetNextIV, DSA/NR/ECDSA/ECNR to reduce\r\n      the risk of reusing random numbers and IVs after virtual machine state\r\n      rollback\r\n    - changed default FIPS mode RNG from AutoSeededX917RNG<DES_EDE3> to\r\n      AutoSeededX917RNG<AES>\r\n    - fixed PANAMA cipher interface to accept 256-bit key and 256-bit IV\r\n    - moved MD2, MD4, MD5, PanamaHash, ARC4, WAKE_CFB into the namespace \"Weak\"\r\n    - removed HAVAL, MD5-MAC, XMAC\r\n\r\n5.5.1 - fixed VMAC validation failure on 32-bit big-endian machines\r\n\r\n5.5.2 - ported x64 assembly language code for AES, Salsa20, Sosemanuk, and Panama\r\n        to MSVC 2005 (using MASM since MSVC doesn't support inline assembly on x64)\r\n      - fixed Salsa20 initialization crash on non-SSE2 machines\r\n      - fixed Whirlpool crash on Pentium 2 machines\r\n      - fixed possible branch prediction analysis (BPA) vulnerability in\r\n        MontgomeryReduce(), which may affect security of RSA, RW, LUC\r\n      - fixed link error with MSVC 2003 when using \"debug DLL\" form of runtime library\r\n      - fixed crash in SSE2_Add on P4 machines when compiled with\r\n        MSVC 6.0 SP5 with Processor Pack\r\n      - ported to MSVC 2008, GCC 4.2, Sun CC 5.9, Intel C++ Compiler 10.0,\r\n        and Borland C++Builder 2007\r\n\r\n5.6.0 - added AuthenticatedSymmetricCipher interface class and Filter wrappers\r\n      - added CCM, GCM (with SSE2 assembly), EAX, CMAC, XSalsa20, and SEED\r\n      - added support for variable length IVs\r\n      - added OIDs for Brainpool elliptic curve parameters\r\n      - improved AES and SHA-256 speed on x86 and x64\r\n      - changed BlockTransformation interface to no longer assume data alignment\r\n      - fixed incorrect VMAC computation on message lengths\r\n        that are >64 mod 128 (x86 assembly version is not affected)\r\n      - fixed compiler error in vmac.cpp on x86 with GCC -fPIC\r\n      - fixed run-time validation error on x86-64 with GCC 4.3.2 -O2\r\n      - fixed HashFilter bug when putMessage=true\r\n      - fixed AES-CTR data alignment bug that causes incorrect encryption on ARM\r\n      - removed WORD64_AVAILABLE; compiler support for 64-bit int is now required\r\n      - ported to GCC 4.3, C++Builder 2009, Sun CC 5.10, Intel C++ Compiler 11\r\n\r\n5.6.1 - added support for AES-NI and CLMUL instruction sets in AES and GMAC/GCM\r\n      - removed WAKE-CFB\r\n      - fixed several bugs in the SHA-256 x86/x64 assembly code:\r\n          * incorrect hash on non-SSE2 x86 machines on non-aligned input\r\n          * incorrect hash on x86 machines when input crosses 0x80000000\r\n          * incorrect hash on x64 when compiled with GCC with optimizations enabled\r\n      - fixed bugs in AES x86 and x64 assembly causing crashes in some MSVC build configurations\r\n      - switched to a public domain implementation of MARS\r\n      - ported to MSVC 2010, GCC 4.5.1, Sun Studio 12u1, C++Builder 2010, Intel C++ Compiler 11.1\r\n      - renamed the MSVC DLL project to \"cryptopp\" for compatibility with MSVC 2010\r\n\r\n5.6.2 - changed license to Boost Software License 1.0\r\n      - added SHA-3 (Keccak)\r\n      - updated DSA to FIPS 186-3 (see DSA2 class)\r\n      - fixed Blowfish minimum keylength to be 4 bytes (32 bits)\r\n      - fixed Salsa validation failure when compiling with GCC 4.6\r\n      - fixed infinite recursion when on x64, assembly disabled, and no AESNI\r\n      - ported to MSVC 2012, GCC 4.7, Clang 3.2, Solaris Studio 12.3, Intel C++ Compiler 13.0\r\n\r\n5.6.3 - maintenance release, honored API/ABI/Versioning requirements\r\n      - expanded processes to include community and its input\r\n          * 12 unique contributors for this release\r\n      - fixed CVE-2015-2141\r\n      - cleared most Undefined Behavior Sanitizer (UBsan) findings\r\n      - cleared all Address Sanitizer (Asan) findings\r\n      - cleared all Valgrind findings\r\n      - cleared all Coverity findings\r\n      - cleared all Enterprise Analysis (/analyze) findings\r\n      - cleared most GCC warnings with -Wall\r\n      - cleared most Clang warnings with -Wall\r\n      - cleared most MSVC warnings with /W4\r\n      - added -fPIC 64-bit builds. Off by default for i386\r\n      - added HKDF class from RFC 5868\r\n      - switched to member_ptr due to C++ 11 warnings for auto_ptr\r\n      - initialization of C++ static objects, off by default\r\n          * GCC and init_priotirty/constructor attributes\r\n          * MSVC and init_seg(lib)\r\n          * CRYPTOPP_INIT_PRIORITY disabled by default, but available\r\n      - improved OS X support\r\n      - improved GNUmakefile support for Testing and QA\r\n      - added self tests for additional Testing and QA\r\n      - added cryptest.sh for systematic Testing and QA\r\n      - added GNU Gold linker support\r\n      - added Visual Studio 2010 solution and project files in vs2010.zip\r\n      - added Clang integrated assembler support\r\n      - unconditionally define CRYPTOPP_NO_UNALIGNED_DATA_ACCESS for Makefile\r\n        target 'ubsan' and at -O3 due to GCC vectorization on x86 and x86_64\r\n      - workaround ARMEL/GCC 5.2 bug and failed self test\r\n      - fixed crash in MQV due to GCC 4.9+ and inlining\r\n      - fixed hang in SHA due to GCC 4.9+ and inlining\r\n      - fixed missing rdtables::Te under VS with ALIGNED_DATA_ACCESS\r\n      - fixed S/390 and big endian feature detection\r\n      - fixed S/390 and int128_t/uint128_t detection\r\n      - fixed X32 (ILP32) feature detection\r\n      - removed  _CRT_SECURE_NO_DEPRECATE for Microsoft platforms\r\n      - utilized bound checking interfaces from ISO/IEC TR 24772 when available\r\n      - improved ARM, ARM64, MIPS, MIPS64, S/390 and X32 (ILP32) support\r\n      - introduced CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562\r\n      - added additional Doxygen-based documentation\r\n      - ported to MSVC 2015, Xcode 7.2, GCC 5.2, Clang 3.7, Intel C++ 16.00\r\n\r\n5.6.4 - maintenance release, honored API/ABI/Versioning requirements\r\n      - expanded community input and support\r\n          * 22 unique contributors for this release\r\n      - fixed CVE-2016-3995\r\n      - changed SHA3 to FIPS 202 (F1600, XOF d=0x06)\r\n      - added Keccak (F1600, XOF d=0x01)\r\n      - added ChaCha (ChaCha8/12/20)\r\n      - added HMQV and FHMQV\r\n          * Hashed and Fully Hashed MQV\r\n      - added BLAKE2 (BLAKE2s and BLAKE2b)\r\n          * C++, SSE2, SSE4, ARM NEON and ARMv8 ASIMD\r\n      - added CRC32-C\r\n          * C/C++, Amd64 CRC, and ARMv8 CRC\r\n      - improved Rabin-William signatures\r\n          * Tweaked roots <em>e</em> and <em>f</em>\r\n      - improved C++11 support\r\n          * atomics, threads and fences\r\n          * alginof, alignas\r\n          * constexpr\r\n          * noexcept\r\n      - improved GCM mode\r\n          * ARM NEON and ARMv8 ASIMD\r\n          * ARMv8 carry-less multiply\r\n      - improved Windows 8 and 10 support\r\n          * Windows Phone, Universal Windows Platform, Windows Store\r\n      - improved MIPS, ARMv7 and ARMv8 support\r\n          * added scripts setenv-{android|embedded|ios}.sh for GNUmakefile-cross\r\n          * aggressive use of -march=<arch> and -mfpu=<fpu> in cryptest.sh\r\n      - improved build systems\r\n          * Visual Studio 2010 default\r\n          * added CMake support (lacks FindCryptopp.cmake)\r\n          * archived VC++ 5/0/6.0 project files (vc60.zip)\r\n          * archived VS2005 project files (vs2005.zip)\r\n          * archived Borland project files (bds10.zip)\r\n      - improved Testing and QA\r\n          * expanded platforms and compilers\r\n          * added code generation tests based on CPU features\r\n          * added C++03, C++11, C++14, C++17 testing\r\n          * added -O3, -O5, -Ofast and -Os testing\r\n      - ported to MSVC 2015 SP3, Xcode 9.0, Sun Studio 12.5, GCC 7.0, MacPorts GCC 7.0, Clang 3.8, Intel C++ 17.00\r\n\r\nWritten by Wei Dai and the Crypto++ Project\r\n"], "fixing_code": ["CONTENTS OF THIS FILE\r\n---------------------\r\n\r\n* Introduction\r\n* Building the Library\r\n* Installing the Library\r\n* Makefile Targets\r\n* DataDir Patch\r\n* Dynamic Analysis\r\n* Acceptance Testing\r\n* Reporting problems\r\n\r\nINTRODUCTION\r\n------------\r\n\r\nCrypto++ Library is a free C++ class library of cryptographic algorithms and schemes. It was written and placed in public domain by Wei Dai. The library homepage is at http://www.cryptopp.com/. The latest library source code can be found at http://github.com/weidai11/cryptopp. For licensing and copyright information, please see License.txt.\r\n\r\nThese are general instructions for the BSDs, Linux, OS X, Solaris and Unix. The library uses a GNU makefile, which combines configuration and a non-anemic make. On BSD and Solaris you will likely have to use `gmake` to build the library. On Linux, OS X and Unix, the system's make should be OK. On Windows, Crypto++ provides Borland and Visual Studio solutions.\r\n\r\nYou should look through the GNUmakefile and config.h to ensure settings look reasonable before building. You are strogly encourgaed to use `config.recommend` in place of `config.h` if you are building the library and you can recompile dependent programs.\r\n\r\nWiki pages are available for some platforms with specific build instructions. The wiki can be found at http://cryptopp.com/wiki/. The pages include Android, ARM, iOS and Solaris. Solaris users should visit the wiki for important information on compiling the library with different versions of SunCC and options, and information on improving library performnce and features.\r\n\r\nCrypto++ does not depend upon other tools or libraries. It does not use Autotools, does not use CMake, and does not use Boost. If you use an alternate build system, like Autotools or CMake, then see the warning below about CXXFLAGS and lack of -DNDEBUG. CMake is available in Master as a matter of convenience, but its not officially supported.\r\n\r\n\r\nBUILDING THE LIBRARY\r\n--------------------\r\n\r\nIn general, all you should have to do is open a terminal, and then:\r\n\r\n    make\r\n    make test\r\n    sudo make install\r\n\r\nThe command above builds the static library and cryptest.exe program. If you want to build the shared object, then issue:\r\n\r\n    make static dynamic cryptest.exe\r\n\r\nOr:\r\n\r\n    make libcryptopp.a libcryptopp.so cryptest.exe\r\n\r\n\r\nIf you would like to use a different compiler, the set CXX:\r\n\r\n    export CXX=/opt/intel/bin/icpc\r\n    make\r\n\r\nIf you want to build using C++11, then:\r\n\r\n    make CXXFLAGS=\"-std=c++11\"\r\n\r\nOr:\r\n\r\n    CXXFLAGS=\"-std=c++11\"\r\n    make\r\n\r\nLLVM's libc++ is also supported, so you can:\r\n\r\n    CXXFLAGS=\"-std=c++11 -stdlib=libc++\"\r\n    make\r\n\r\n\r\nALTERNATE BUILD SYSTEMS\r\n-----------------------\r\n\r\nThe Crypto++ library is Make based and uses GNU Make by default. The makefile uses '-DNDEBUG -g2 -O2' CXXFLAGS by default. If you use an alternate build system, like Autotools or CMake, then ensure the build system includes '-DNDEBUG' for production or release builds. The Crypto++ library uses asserts for debugging and diagnostics during development; it does not rely on them to crash a program at runtime.\r\n\r\nIf an assert triggers in production software, then unprotected sensitive information could be egressed from the program to the filesystem or the platform's error reporting program, like Apport on Ubuntu or CrashReporter on Apple.\r\n\r\nINSTALLING THE LIBRARY\r\n----------------------\r\n\r\nTo install the library into a user selected directory, perform:\r\n\r\n    make install PREFIX=/usr/local\r\n\r\nIf you are going to run `make install PREFIX=/usr/local`, then you should build with '-DCRYPTOPP_DATA_DIR='\\\"$PREFIX/share/cryptopp/\\\"' to ensure cryptest.exe can locate the test data files and test vectors after installation. The trailing slash in the path is needed because simple preprocessor concatenation is used.\r\n\r\nDuring install, the makefile copies cryptest.exe into $PREFIX/bin, copies headers into $PREFIX/include/cryptopp, and copies libraries into $PREFIX/lib. If you only built a static or dynamic version of the library, then only one library is copied. The install recipe does not fail if the static library or shared object is not built.\r\n\r\nPREFIX is non-standard, but its retained for historical purposes. The makefile also responds to `prefix=<path>`.\r\n\r\n\r\nMAKEFILE TARGETS\r\n----------------\r\n\r\nThe following are some of the targets provided by the GNU makefile.\r\n\r\n`make` invokes the default rule, which builds the Crypto++ static library and test harness. They are called `libcryptopp.a` and `cryptest.exe`, respectively. `cryptest.exe` links against `libcryptopp.a`, so the static library is a prerequisite for the target.\r\n\r\n`make libcryptopp.a` and `make static` build the static version of the library.\r\n\r\n`make libcryptopp.so` and `make dynamic` build the dynamic version of the library. On Mac OS X, the recipe builds `libcryptopp.dylib` instead.\r\n\r\n`make cryptest.exe` builds the library test harness.\r\n\r\n`make test` and `make check` are the same recipe and invoke the test harness with the the validation option. That is, it executes `cryptest.exe v`.\r\n\r\n`make install` installs the library. By default, the makefile copies into `/usr/local` by default.\r\n\r\n`make clean` cleans most transient and temporary objects.\r\n\r\n`make disclean` cleans most objects that are not part of the original distribution.\r\n\r\n`make dist` and `make zip` builds ZIP file that is suitable for distribution.\r\n\r\n`make iso` builds an ISO on Linux or OS X that is suitable for alternate distribution.\r\n\r\n`make ubsan` and `make asan` builds the library with the respective sanitizer.\r\n\r\n\r\nDYNAMIC ANALYSIS\r\n----------------\r\n\r\nThe Crypto++ embraces tools like Undefined Behavior sanitizer (UBsan), Address sanitizer (Asan) and Valgrind. Both Clang 3.2 and above and GCC 4.8 and above provide sanitizers. Please check with your distribution on how to install the compiler with its sanitizer libraries (they are sometimes a separate install item).\r\n\r\nUBsan and Asan are mutually exclusive options, so you can perform only one of these at a time:\r\n\r\n    make ubsan\r\n    ./cryptest.exe v 2>&1 | egrep \"(error|FAILED)\"\r\n    ./cryptest.exe tv all 2>&1 | egrep \"(error|FAILED)\"\r\n\r\nOr:\r\n\r\n    make asan\r\n    ./cryptest.exe v 2>&1 | egrep \"(error|FAILED)\"\r\n    ./cryptest.exe tv all 2>&1 | egrep \"(error|FAILED)\"\r\n\r\nIf you experience self test failures or see reports of undefined behavior, then you should ensure CRYPTOPP_NO_UNALIGNED_DATA_ACCESS is defined in config.h. CRYPTOPP_NO_UNALIGNED_DATA_ACCESS is not defined due to historical purposes.\r\n\r\nIf you experience failures under Asan, then gather more information with:\r\n\r\n    ./cryptest.exe v 2>&1 | asan_symbolize\r\n\r\nIf you moved Crypto++ such that the paths have changed, then perform:\r\n\r\n    ./cryptest.exe v 2>&1 | sed \"s/<old path>/<new path>/g\" | asan_symbolize\r\n\r\n\r\nACCEPTANCE TESTING\r\n------------------\r\n\r\nCrypto++ uses five security gates in its engineering process. The library must maintain the quality provided by the review system and integrity of the test suites. You can use the information to decide if the Crypto++ library suits your needs and provides a compatible security posture.\r\n\r\nThe first gate is code review and discussion of proposed patches. Git commits often cross reference a User Group discussions.\r\n\r\nSecond is the compiler warning system. The code must clean compile under the equivalent of GCC's -Wall -Wextra (modulo -Wno-type-limits -Wno-unknown-pragmas). This is a moving target as compiler analysis improves.\r\n\r\nThird, the code must pass cleanly though GCC and Clang's Undefined Behavior sanitizer (UBsan) and Address sanitizer (Asan) with CRYPTOPP_NO_UNALIGNED_DATA_ACCESS defined in config.h. See DYNAMIC ANALYSIS above on how to execute them.\r\n\r\nFourth, the test harness provides a \"validation\" option which performs basic system checks (like endianess and word sizes) and exercises algorithms (like AES and SHA). You run the validation suite as shown below. The tail of the output should indicate 0 failed tests.\r\n\r\n    ./cryptest.exe v\r\n    ...\r\n\r\n    All tests passed!\r\n    Test ended at Sun Jul 26 02:10:57 2015\r\n    Seed used was: 1437891055\r\n\r\nFifth, the test harness provides a \"test vector\" option which uses many known test vectors, even those published by other people (like Brian Gladman for AES). You run the test vectors as shown below. The tail of the output should indicate 0 failed tests.\r\n\r\n    ./cryptest.exe tv all\r\n    ...\r\n\r\n    Testing SymmetricCipher algorithm MARS/ECB.\r\n    .................\r\n    Tests complete. Total tests = 4094. Failed tests = 0.\r\n\r\nThe library also offers its test script for those who want to use it. The test script is names cryptest.sh, and it repeatedly builds the library and exectues the tests under various configurations. It takes 2 to 4 hours to run on a semi-modern desktop or server; and days to run on an IoT gadget. Also see http://github.com/weidai11/cryptopp/blob/master/cryptest.sh and http://cryptopp.com/wiki/Cryptest.sh.\r\n\r\nREPORTING PROBLEMS\r\n------------------\r\n\r\nDirty compiles and failures in the validation suite or test vectors should be reported at the Crypto++ User Group. The User Group is located at http://groups.google.com/forum/#!forum/cryptopp-users.\r\n\r\nAlso see http://www.cryptopp.com/wiki/Bug_Report.\r\n", "Crypto++: a C++ Class Library of Cryptographic Schemes\r\nVersion 5.6.4 - SEPT/11/2016\r\n\r\nCrypto++ Library is a free C++ class library of cryptographic schemes.\r\nCurrently the library contains the following algorithms:\r\n\r\n                   algorithm type  name\r\n\r\n authenticated encryption schemes  GCM, CCM, EAX\r\n\r\n        high speed stream ciphers  ChaCha (ChaCha8/12/20), Panama, Sosemanuk,\r\n                                   Salsa20, XSalsa20\r\n\r\n           AES and AES candidates  AES (Rijndael), RC6, MARS, Twofish, Serpent,\r\n                                   CAST-256\r\n\r\n                                   IDEA, Triple-DES (DES-EDE2 and DES-EDE3),\r\n              other block ciphers  Camellia, SEED, RC5, Blowfish, TEA, XTEA,\r\n                                   Skipjack, SHACAL-2\r\n\r\n  block cipher modes of operation  ECB, CBC, CBC ciphertext stealing (CTS),\r\n                                   CFB, OFB, counter mode (CTR)\r\n\r\n     message authentication codes  VMAC, HMAC, GMAC, CMAC, CBC-MAC, DMAC,\r\n                                   Two-Track-MAC\r\n\r\n                                   BLAKE2 (BLAKE2b, BLAKE2s), SHA-1, SHA-2 (SHA-224,\r\n                   hash functions  SHA-256, SHA-384, and SHA-512), SHA-3, Tiger,\r\n                                   WHIRLPOOL, RIPEMD-128, RIPEMD-256, RIPEMD-160,\r\n                                   RIPEMD-320\r\n\r\n                                   RSA, DSA, ElGamal, Nyberg-Rueppel (NR),\r\n          public-key cryptography  Rabin-Williams (RW), LUC, LUCELG,\r\n                                   DLIES (variants of DHAES), ESIGN\r\n\r\n   padding schemes for public-key  PKCS#1 v2.0, OAEP, PSS, PSSR, IEEE P1363\r\n                          systems  EMSA2 and EMSA5\r\n\r\n                                   Diffie-Hellman (DH), Unified Diffie-Hellman\r\n            key agreement schemes  (DH2), Menezes-Qu-Vanstone (MQV), Hashed MQV (HMQV),\r\n                                   Fully Hashed MQV (FHMQV), LUCDIF, XTR-DH\r\n\r\n      elliptic curve cryptography  ECDSA, ECNR, ECIES, ECDH, ECMQV\r\n\r\n          insecure or obsolescent  MD2, MD4, MD5, Panama Hash, DES, ARC4, SEAL\r\nalgorithms retained for backwards  3.0, WAKE-OFB, DESX (DES-XEX3), RC2,\r\n     compatibility and historical  SAFER, 3-WAY, GOST, SHARK, CAST-128, Square\r\n                            value\r\n\r\nOther features include:\r\n\r\n  * pseudo random number generators (PRNG): ANSI X9.17 appendix C, RandomPool\r\n  * password based key derivation functions: PBKDF1 and PBKDF2 from PKCS #5,\r\n    PBKDF from PKCS #12 appendix B, HKDF from RFC 5869\r\n  * Shamir's secret sharing scheme and Rabin's information dispersal algorithm\r\n    (IDA)\r\n  * fast multi-precision integer (bignum) and polynomial operations\r\n  * finite field arithmetics, including GF(p) and GF(2^n)\r\n  * prime number generation and verification\r\n  * useful non-cryptographic algorithms\r\n      + DEFLATE (RFC 1951) compression/decompression with gzip (RFC 1952) and\r\n        zlib (RFC 1950) format support\r\n      + hex, base-32, and base-64 coding/decoding\r\n      + 32-bit CRC, CRC-C and Adler32 checksum\r\n  * class wrappers for these platform and operating system features (optional):\r\n      + high resolution timers on Windows, Unix, and Mac OS\r\n      + Berkeley and Windows style sockets\r\n      + Windows named pipes\r\n      + /dev/random, /dev/urandom, /dev/srandom\r\n      + Microsoft's CryptGenRandom on Windows\r\n      + VIA Padlock, Amd64 RDRAND and RDSEED\r\n  * A high level interface for most of the above, using a filter/pipeline\r\n    metaphor\r\n  * benchmarks and validation testing\r\n  * x86, x86_64, MMX, SSE2, SSE4 assembly code for the most commonly used\r\n    algorithms, with run-time CPU feature detection and code selection.\r\n    Limited ARM NEON and ARMv8 ASIMD, CRC and Crypto extension support\r\n  * some versions are available in FIPS 140-2 validated form\r\n\r\nYou are welcome to use it for any purpose without paying me, but see\r\nLicense.txt for the fine print.\r\n\r\nThe following compilers are supported for this release. Please visit\r\nhttp://www.cryptopp.com the most up to date build instructions and porting notes.\r\n\r\n  * MSVC 6.0 - 2015\r\n  * GCC 3.3 - 7.0\r\n  * Clang 2.9 - 4.0\r\n  * C++Builder 2010\r\n  * Intel C++ Compiler 9 - 16.0\r\n  * Sun Studio 12u1 - 12.5\r\n\r\n*** Important Usage Notes ***\r\n\r\n1. If a constructor for A takes a pointer to an object B (except primitive\r\ntypes such as int and char), then A owns B and will delete B at A's\r\ndestruction.  If a constructor for A takes a reference to an object B,\r\nthen the caller retains ownership of B and should not destroy it until\r\nA no longer needs it.\r\n\r\n2. Crypto++ is thread safe at the class level. This means you can use\r\nCrypto++ safely in a multithreaded application, but you must provide\r\nsynchronization when multiple threads access a common Crypto++ object.\r\n\r\n*** MSVC-Specific Information ***\r\n\r\nOn Windows, Crypto++ can be compiled into 3 forms: a static library\r\nincluding all algorithms, a DLL with only FIPS Approved algorithms, and\r\na static library with only algorithms not in the DLL.\r\n(FIPS Approved means Approved according to the FIPS 140-2 standard.)\r\nThe DLL may be used by itself, or it may be used together with the second\r\nform of the static library. MSVC project files are included to build\r\nall three forms, and sample applications using each of the three forms\r\nare also included.\r\n\r\nTo compile Crypto++ with MSVC, open  \"cryptest.sln\" (for MSVC 2005 - 2015)\r\nor \"cryptest.dsw\" (for MSVC 6 and MSVC .NET 2003) workspace file and build\r\none or more of the following projects:\r\n\r\ncryptdll - This builds the DLL. Please note that if you wish to use Crypto++\r\n  as a FIPS validated module, you must use a pre-built DLL that has undergone\r\n  the FIPS validation process instead of building your own.\r\ndlltest - This builds a sample application that only uses the DLL.\r\ncryptest Non-DLL-Import Configuration - This builds the full static library\r\n  along with a full test driver.\r\ncryptest DLL-Import Configuration - This builds a static library containing\r\n  only algorithms not in the DLL, along with a full test driver that uses\r\n  both the DLL and the static library.\r\n\r\nTo use the Crypto++ DLL in your application, #include \"dll.h\" before including\r\nany other Crypto++ header files, and place the DLL in the same directory as\r\nyour .exe file. dll.h includes the line #pragma comment(lib, \"cryptopp\")\r\nso you don't have to explicitly list the import library in your project\r\nsettings. To use a static library form of Crypto++, make the \"cryptlib\"\r\nproject a dependency of your application project, or specify it as\r\nan additional library to link with in your project settings.\r\nIn either case you should check the compiler options to\r\nmake sure that the library and your application are using the same C++\r\nrun-time libraries and calling conventions.\r\n\r\n*** DLL Memory Management ***\r\n\r\nBecause it's possible for the Crypto++ DLL to delete objects allocated\r\nby the calling application, they must use the same C++ memory heap. Three\r\nmethods are provided to achieve this.\r\n1.  The calling application can tell Crypto++ what heap to use. This method\r\n    is required when the calling application uses a non-standard heap.\r\n2.  Crypto++ can tell the calling application what heap to use. This method\r\n    is required when the calling application uses a statically linked C++ Run\r\n    Time Library. (Method 1 does not work in this case because the Crypto++ DLL\r\n    is initialized before the calling application's heap is initialized.)\r\n3.  Crypto++ can automatically use the heap provided by the calling application's\r\n    dynamically linked C++ Run Time Library. The calling application must\r\n    make sure that the dynamically linked C++ Run Time Library is initialized\r\n    before Crypto++ is loaded. (At this time it is not clear if it is possible\r\n    to control the order in which DLLs are initialized on Windows 9x machines,\r\n    so it might be best to avoid using this method.)\r\n\r\nWhen Crypto++ attaches to a new process, it searches all modules loaded\r\ninto the process space for exported functions \"GetNewAndDeleteForCryptoPP\"\r\nand \"SetNewAndDeleteFromCryptoPP\". If one of these functions is found,\r\nCrypto++ uses methods 1 or 2, respectively, by calling the function.\r\nOtherwise, method 3 is used.\r\n\r\n*** Linux and Unix-like Specific Information ***\r\n\r\nA makefile is included for you to compile Crypto++ with GCC and compatibles.\r\nMake sure you are using GNU Make and GNU ld. The make process will produce\r\ntwo files, libcryptopp.a and cryptest.exe. Run \"cryptest.exe v\" for the\r\nvalidation suite and \"cryptest.exe tv all\" for additional test vectors.\r\n\r\nThe makefile uses '-DNDEBUG -g2 -O2' CXXFLAGS by default. If you use an\r\nalternate build system, like Autotools or CMake, then ensure the build system\r\nincludes '-DNDEBUG' for production or release builds. The Crypto++ library uses\r\nasserts for debugging and diagnostics during development; it does not\r\nrely on them to crash a program at runtime.\r\n\r\nIf an assert triggers in production software, then unprotected sensitive\r\ninformation could be egressed from the program to the filesystem or the\r\nplatform's error reporting program, like Apport on Ubuntu or CrashReporter\r\non Apple.\r\n\r\n*** Documentation and Support ***\r\n\r\nCrypto++ is documented through inline comments in header files, which are\r\nprocessed through Doxygen to produce an HTML reference manual. You can find\r\na link to the manual from http://www.cryptopp.com. Also at that site is\r\nthe Crypto++ FAQ, which you should browse through before attempting to\r\nuse this library, because it will likely answer many of questions that\r\nmay come up. Finally, the site provide the wiki which has many topics\r\nand code examples.\r\n\r\nIf you run into any problems, please try the Crypto++ mailing list.\r\nThe subscription information and the list archive are available on\r\nhttp://www.cryptopp.com. You can also email me directly by visiting\r\nhttp://www.weidai.com, but you will probably get a faster response through\r\nthe mailing list.\r\n\r\n*** History ***\r\n\r\n1.0 - First public release.  Withdrawn at the request of RSA DSI.\r\n    - included Blowfish, BBS, DES, DH, Diamond, DSA, ElGamal, IDEA,\r\n      MD5, RC4, RC5, RSA, SHA, WAKE, secret sharing, DEFLATE compression\r\n    - had a serious bug in the RSA key generation code.\r\n\r\n1.1 - Removed RSA, RC4, RC5\r\n    - Disabled calls to RSAREF's non-public functions\r\n    - Minor bugs fixed\r\n\r\n2.0 - a completely new, faster multiprecision integer class\r\n    - added MD5-MAC, HAVAL, 3-WAY, TEA, SAFER, LUC, Rabin, BlumGoldwasser,\r\n      elliptic curve algorithms\r\n    - added the Lucas strong probable primality test\r\n    - ElGamal encryption and signature schemes modified to avoid weaknesses\r\n    - Diamond changed to Diamond2 because of key schedule weakness\r\n    - fixed bug in WAKE key setup\r\n    - SHS class renamed to SHA\r\n    - lots of miscellaneous optimizations\r\n\r\n2.1 - added Tiger, HMAC, GOST, RIPE-MD160, LUCELG, LUCDIF, XOR-MAC,\r\n      OAEP, PSSR, SHARK\r\n    - added precomputation to DH, ElGamal, DSA, and elliptic curve algorithms\r\n    - added back RC5 and a new RSA\r\n    - optimizations in elliptic curves over GF(p)\r\n    - changed Rabin to use OAEP and PSSR\r\n    - changed many classes to allow copy constructors to work correctly\r\n    - improved exception generation and handling\r\n\r\n2.2 - added SEAL, CAST-128, Square\r\n    - fixed bug in HAVAL (padding problem)\r\n    - fixed bug in triple-DES (decryption order was reversed)\r\n    - fixed bug in RC5 (couldn't handle key length not a multiple of 4)\r\n    - changed HMAC to conform to RFC-2104 (which is not compatible\r\n      with the original HMAC)\r\n    - changed secret sharing and information dispersal to use GF(2^32)\r\n      instead of GF(65521)\r\n    - removed zero knowledge prover/verifier for graph isomorphism\r\n    - removed several utility classes in favor of the C++ standard library\r\n\r\n2.3 - ported to EGCS\r\n    - fixed incomplete workaround of min/max conflict in MSVC\r\n\r\n3.0 - placed all names into the \"CryptoPP\" namespace\r\n    - added MD2, RC2, RC6, MARS, RW, DH2, MQV, ECDHC, CBC-CTS\r\n    - added abstract base classes PK_SimpleKeyAgreementDomain and\r\n      PK_AuthenticatedKeyAgreementDomain\r\n    - changed DH and LUCDIF to implement the PK_SimpleKeyAgreementDomain\r\n      interface and to perform domain parameter and key validation\r\n    - changed interfaces of PK_Signer and PK_Verifier to sign and verify\r\n      messages instead of message digests\r\n    - changed OAEP to conform to PKCS#1 v2.0\r\n    - changed benchmark code to produce HTML tables as output\r\n    - changed PSSR to track IEEE P1363a\r\n    - renamed ElGamalSignature to NR and changed it to track IEEE P1363\r\n    - renamed ECKEP to ECMQVC and changed it to track IEEE P1363\r\n    - renamed several other classes for clarity\r\n    - removed support for calling RSAREF\r\n    - removed option to compile old SHA (SHA-0)\r\n    - removed option not to throw exceptions\r\n\r\n3.1 - added ARC4, Rijndael, Twofish, Serpent, CBC-MAC, DMAC\r\n    - added interface for querying supported key lengths of symmetric ciphers\r\n      and MACs\r\n    - added sample code for RSA signature and verification\r\n    - changed CBC-CTS to be compatible with RFC 2040\r\n    - updated SEAL to version 3.0 of the cipher specification\r\n    - optimized multiprecision squaring and elliptic curves over GF(p)\r\n    - fixed bug in MARS key setup\r\n    - fixed bug with attaching objects to Deflator\r\n\r\n3.2 - added DES-XEX3, ECDSA, DefaultEncryptorWithMAC\r\n    - renamed DES-EDE to DES-EDE2 and TripleDES to DES-EDE3\r\n    - optimized ARC4\r\n    - generalized DSA to allow keys longer than 1024 bits\r\n    - fixed bugs in GF2N and ModularArithmetic that can cause calculation errors\r\n    - fixed crashing bug in Inflator when given invalid inputs\r\n    - fixed endian bug in Serpent\r\n    - fixed padding bug in Tiger\r\n\r\n4.0 - added Skipjack, CAST-256, Panama, SHA-2 (SHA-256, SHA-384, and SHA-512),\r\n      and XTR-DH\r\n    - added a faster variant of Rabin's Information Dispersal Algorithm (IDA)\r\n    - added class wrappers for these operating system features:\r\n      - high resolution timers on Windows, Unix, and MacOS\r\n      - Berkeley and Windows style sockets\r\n      - Windows named pipes\r\n      - /dev/random and /dev/urandom on Linux and FreeBSD\r\n      - Microsoft's CryptGenRandom on Windows\r\n    - added support for SEC 1 elliptic curve key format and compressed points\r\n    - added support for X.509 public key format (subjectPublicKeyInfo) for\r\n      RSA, DSA, and elliptic curve schemes\r\n    - added support for DER and OpenPGP signature format for DSA\r\n    - added support for ZLIB compressed data format (RFC 1950)\r\n    - changed elliptic curve encryption to use ECIES (as defined in SEC 1)\r\n    - changed MARS key schedule to reflect the latest specification\r\n    - changed BufferedTransformation interface to support multiple channels\r\n      and messages\r\n    - changed CAST and SHA-1 implementations to use public domain source code\r\n    - fixed bug in StringSource\r\n    - optmized multi-precision integer code for better performance\r\n\r\n4.1 - added more support for the recommended elliptic curve parameters in SEC 2\r\n    - added Panama MAC, MARC4\r\n    - added IV stealing feature to CTS mode\r\n    - added support for PKCS #8 private key format for RSA, DSA, and elliptic\r\n      curve schemes\r\n    - changed Deflate, MD5, Rijndael, and Twofish to use public domain code\r\n    - fixed a bug with flushing compressed streams\r\n    - fixed a bug with decompressing stored blocks\r\n    - fixed a bug with EC point decompression using non-trinomial basis\r\n    - fixed a bug in NetworkSource::GeneralPump()\r\n    - fixed a performance issue with EC over GF(p) decryption\r\n    - fixed syntax to allow GCC to compile without -fpermissive\r\n    - relaxed some restrictions in the license\r\n\r\n4.2 - added support for longer HMAC keys\r\n    - added MD4 (which is not secure so use for compatibility purposes only)\r\n    - added compatibility fixes/workarounds for STLport 4.5, GCC 3.0.2,\r\n      and MSVC 7.0\r\n    - changed MD2 to use public domain code\r\n    - fixed a bug with decompressing multiple messages with the same object\r\n    - fixed a bug in CBC-MAC with MACing multiple messages with the same object\r\n    - fixed a bug in RC5 and RC6 with zero-length keys\r\n    - fixed a bug in Adler32 where incorrect checksum may be generated\r\n\r\n5.0 - added ESIGN, DLIES, WAKE-OFB, PBKDF1 and PBKDF2 from PKCS #5\r\n    - added key validation for encryption and signature public/private keys\r\n    - renamed StreamCipher interface to SymmetricCipher, which is now implemented\r\n      by both stream ciphers and block cipher modes including ECB and CBC\r\n    - added keying interfaces to support resetting of keys and IVs without\r\n      having to destroy and recreate objects\r\n    - changed filter interface to support non-blocking input/output\r\n    - changed SocketSource and SocketSink to use overlapped I/O on Microsoft Windows\r\n    - grouped related classes inside structs to help templates, for example\r\n      AESEncryption and AESDecryption are now AES::Encryption and AES::Decryption\r\n    - where possible, typedefs have been added to improve backwards\r\n      compatibility when the CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY macro is defined\r\n    - changed Serpent, HAVAL and IDEA to use public domain code\r\n    - implemented SSE2 optimizations for Integer operations\r\n    - fixed a bug in HMAC::TruncatedFinal()\r\n    - fixed SKIPJACK byte ordering following NIST clarification dated 5/9/02\r\n\r\n5.01 - added known answer test for X9.17 RNG in FIPS 140 power-up self test\r\n     - submitted to NIST/CSE, but not publicly released\r\n\r\n5.02 - changed EDC test to MAC integrity check using HMAC/SHA1\r\n     - improved performance of integrity check\r\n     - added blinding to defend against RSA timing attack\r\n\r\n5.03 - created DLL version of Crypto++ for FIPS 140-2 validation\r\n     - fixed vulnerabilities in GetNextIV for CTR and OFB modes\r\n\r\n5.0.4 - Removed DES, SHA-256, SHA-384, SHA-512 from DLL\r\n\r\n5.1 - added PSS padding and changed PSSR to track IEEE P1363a draft standard\r\n    - added blinding for RSA and Rabin to defend against timing attacks\r\n      on decryption operations\r\n    - changed signing and decryption APIs to support the above\r\n    - changed WaitObjectContainer to allow waiting for more than 64\r\n      objects at a time on Win32 platforms\r\n    - fixed a bug in CBC and ECB modes with processing non-aligned data\r\n    - fixed standard conformance bugs in DLIES (DHAES mode) and RW/EMSA2\r\n      signature scheme (these fixes are not backwards compatible)\r\n    - fixed a number of compiler warnings, minor bugs, and portability problems\r\n    - removed Sapphire\r\n\r\n5.2 - merged in changes for 5.01 - 5.0.4\r\n    - added support for using encoding parameters and key derivation parameters\r\n      with public key encryption (implemented by OAEP and DL/ECIES)\r\n    - added Camellia, SHACAL-2, Two-Track-MAC, Whirlpool, RIPEMD-320,\r\n      RIPEMD-128, RIPEMD-256, Base-32 coding, FIPS variant of CFB mode\r\n    - added ThreadUserTimer for timing thread CPU usage\r\n    - added option for password-based key derivation functions\r\n      to iterate until a mimimum elapsed thread CPU time is reached\r\n    - added option (on by default) for DEFLATE compression to detect\r\n      uncompressible files and process them more quickly\r\n    - improved compatibility and performance on 64-bit platforms,\r\n      including Alpha, IA-64, x86-64, PPC64, Sparc64, and MIPS64\r\n    - fixed ONE_AND_ZEROS_PADDING to use 0x80 instead 0x01 as padding.\r\n    - fixed encoding/decoding of PKCS #8 privateKeyInfo to properly\r\n      handle optional attributes\r\n\r\n5.2.1 - fixed bug in the \"dlltest\" DLL testing program\r\n      - fixed compiling with STLport using VC .NET\r\n      - fixed compiling with -fPIC using GCC\r\n      - fixed compiling with -msse2 on systems without memalign()\r\n      - fixed inability to instantiate PanamaMAC\r\n      - fixed problems with inline documentation\r\n\r\n5.2.2 - added SHA-224\r\n      - put SHA-256, SHA-384, SHA-512, RSASSA-PSS into DLL\r\n\r\n5.2.3 - fixed issues with FIPS algorithm test vectors\r\n      - put RSASSA-ISO into DLL\r\n\r\n5.3 - ported to MSVC 2005 with support for x86-64\r\n    - added defense against AES timing attacks, and more AES test vectors\r\n    - changed StaticAlgorithmName() of Rijndael to \"AES\", CTR to \"CTR\"\r\n\r\n5.4 - added Salsa20\r\n    - updated Whirlpool to version 3.0\r\n    - ported to GCC 4.1, Sun C++ 5.8, and Borland C++Builder 2006\r\n\r\n5.5 - added VMAC and Sosemanuk (with x86-64 and SSE2 assembly)\r\n    - improved speed of integer arithmetic, AES, SHA-512, Tiger, Salsa20,\r\n      Whirlpool, and PANAMA cipher using assembly (x86-64, MMX, SSE2)\r\n    - optimized Camellia and added defense against timing attacks\r\n    - updated benchmarks code to show cycles per byte and to time key/IV setup\r\n    - started using OpenMP for increased multi-core speed\r\n    - enabled GCC optimization flags by default in GNUmakefile\r\n    - added blinding and computational error checking for RW signing\r\n    - changed RandomPool, X917RNG, GetNextIV, DSA/NR/ECDSA/ECNR to reduce\r\n      the risk of reusing random numbers and IVs after virtual machine state\r\n      rollback\r\n    - changed default FIPS mode RNG from AutoSeededX917RNG<DES_EDE3> to\r\n      AutoSeededX917RNG<AES>\r\n    - fixed PANAMA cipher interface to accept 256-bit key and 256-bit IV\r\n    - moved MD2, MD4, MD5, PanamaHash, ARC4, WAKE_CFB into the namespace \"Weak\"\r\n    - removed HAVAL, MD5-MAC, XMAC\r\n\r\n5.5.1 - fixed VMAC validation failure on 32-bit big-endian machines\r\n\r\n5.5.2 - ported x64 assembly language code for AES, Salsa20, Sosemanuk, and Panama\r\n        to MSVC 2005 (using MASM since MSVC doesn't support inline assembly on x64)\r\n      - fixed Salsa20 initialization crash on non-SSE2 machines\r\n      - fixed Whirlpool crash on Pentium 2 machines\r\n      - fixed possible branch prediction analysis (BPA) vulnerability in\r\n        MontgomeryReduce(), which may affect security of RSA, RW, LUC\r\n      - fixed link error with MSVC 2003 when using \"debug DLL\" form of runtime library\r\n      - fixed crash in SSE2_Add on P4 machines when compiled with\r\n        MSVC 6.0 SP5 with Processor Pack\r\n      - ported to MSVC 2008, GCC 4.2, Sun CC 5.9, Intel C++ Compiler 10.0,\r\n        and Borland C++Builder 2007\r\n\r\n5.6.0 - added AuthenticatedSymmetricCipher interface class and Filter wrappers\r\n      - added CCM, GCM (with SSE2 assembly), EAX, CMAC, XSalsa20, and SEED\r\n      - added support for variable length IVs\r\n      - added OIDs for Brainpool elliptic curve parameters\r\n      - improved AES and SHA-256 speed on x86 and x64\r\n      - changed BlockTransformation interface to no longer assume data alignment\r\n      - fixed incorrect VMAC computation on message lengths\r\n        that are >64 mod 128 (x86 assembly version is not affected)\r\n      - fixed compiler error in vmac.cpp on x86 with GCC -fPIC\r\n      - fixed run-time validation error on x86-64 with GCC 4.3.2 -O2\r\n      - fixed HashFilter bug when putMessage=true\r\n      - fixed AES-CTR data alignment bug that causes incorrect encryption on ARM\r\n      - removed WORD64_AVAILABLE; compiler support for 64-bit int is now required\r\n      - ported to GCC 4.3, C++Builder 2009, Sun CC 5.10, Intel C++ Compiler 11\r\n\r\n5.6.1 - added support for AES-NI and CLMUL instruction sets in AES and GMAC/GCM\r\n      - removed WAKE-CFB\r\n      - fixed several bugs in the SHA-256 x86/x64 assembly code:\r\n          * incorrect hash on non-SSE2 x86 machines on non-aligned input\r\n          * incorrect hash on x86 machines when input crosses 0x80000000\r\n          * incorrect hash on x64 when compiled with GCC with optimizations enabled\r\n      - fixed bugs in AES x86 and x64 assembly causing crashes in some MSVC build configurations\r\n      - switched to a public domain implementation of MARS\r\n      - ported to MSVC 2010, GCC 4.5.1, Sun Studio 12u1, C++Builder 2010, Intel C++ Compiler 11.1\r\n      - renamed the MSVC DLL project to \"cryptopp\" for compatibility with MSVC 2010\r\n\r\n5.6.2 - changed license to Boost Software License 1.0\r\n      - added SHA-3 (Keccak)\r\n      - updated DSA to FIPS 186-3 (see DSA2 class)\r\n      - fixed Blowfish minimum keylength to be 4 bytes (32 bits)\r\n      - fixed Salsa validation failure when compiling with GCC 4.6\r\n      - fixed infinite recursion when on x64, assembly disabled, and no AESNI\r\n      - ported to MSVC 2012, GCC 4.7, Clang 3.2, Solaris Studio 12.3, Intel C++ Compiler 13.0\r\n\r\n5.6.3 - maintenance release, honored API/ABI/Versioning requirements\r\n      - expanded processes to include community and its input\r\n          * 12 unique contributors for this release\r\n      - fixed CVE-2015-2141\r\n      - cleared most Undefined Behavior Sanitizer (UBsan) findings\r\n      - cleared all Address Sanitizer (Asan) findings\r\n      - cleared all Valgrind findings\r\n      - cleared all Coverity findings\r\n      - cleared all Enterprise Analysis (/analyze) findings\r\n      - cleared most GCC warnings with -Wall\r\n      - cleared most Clang warnings with -Wall\r\n      - cleared most MSVC warnings with /W4\r\n      - added -fPIC 64-bit builds. Off by default for i386\r\n      - added HKDF class from RFC 5868\r\n      - switched to member_ptr due to C++ 11 warnings for auto_ptr\r\n      - initialization of C++ static objects, off by default\r\n          * GCC and init_priotirty/constructor attributes\r\n          * MSVC and init_seg(lib)\r\n          * CRYPTOPP_INIT_PRIORITY disabled by default, but available\r\n      - improved OS X support\r\n      - improved GNUmakefile support for Testing and QA\r\n      - added self tests for additional Testing and QA\r\n      - added cryptest.sh for systematic Testing and QA\r\n      - added GNU Gold linker support\r\n      - added Visual Studio 2010 solution and project files in vs2010.zip\r\n      - added Clang integrated assembler support\r\n      - unconditionally define CRYPTOPP_NO_UNALIGNED_DATA_ACCESS for Makefile\r\n        target 'ubsan' and at -O3 due to GCC vectorization on x86 and x86_64\r\n      - workaround ARMEL/GCC 5.2 bug and failed self test\r\n      - fixed crash in MQV due to GCC 4.9+ and inlining\r\n      - fixed hang in SHA due to GCC 4.9+ and inlining\r\n      - fixed missing rdtables::Te under VS with ALIGNED_DATA_ACCESS\r\n      - fixed S/390 and big endian feature detection\r\n      - fixed S/390 and int128_t/uint128_t detection\r\n      - fixed X32 (ILP32) feature detection\r\n      - removed  _CRT_SECURE_NO_DEPRECATE for Microsoft platforms\r\n      - utilized bound checking interfaces from ISO/IEC TR 24772 when available\r\n      - improved ARM, ARM64, MIPS, MIPS64, S/390 and X32 (ILP32) support\r\n      - introduced CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562\r\n      - added additional Doxygen-based documentation\r\n      - ported to MSVC 2015, Xcode 7.2, GCC 5.2, Clang 3.7, Intel C++ 16.00\r\n\r\n5.6.4 - maintenance release, honored API/ABI/Versioning requirements\r\n      - expanded community input and support\r\n          * 22 unique contributors for this release\r\n      - fixed CVE-2016-3995\r\n      - changed SHA3 to FIPS 202 (F1600, XOF d=0x06)\r\n      - added Keccak (F1600, XOF d=0x01)\r\n      - added ChaCha (ChaCha8/12/20)\r\n      - added HMQV and FHMQV\r\n          * Hashed and Fully Hashed MQV\r\n      - added BLAKE2 (BLAKE2s and BLAKE2b)\r\n          * C++, SSE2, SSE4, ARM NEON and ARMv8 ASIMD\r\n      - added CRC32-C\r\n          * C/C++, Amd64 CRC, and ARMv8 CRC\r\n      - improved Rabin-William signatures\r\n          * Tweaked roots <em>e</em> and <em>f</em>\r\n      - improved C++11 support\r\n          * atomics, threads and fences\r\n          * alginof, alignas\r\n          * constexpr\r\n          * noexcept\r\n      - improved GCM mode\r\n          * ARM NEON and ARMv8 ASIMD\r\n          * ARMv8 carry-less multiply\r\n      - improved Windows 8 and 10 support\r\n          * Windows Phone, Universal Windows Platform, Windows Store\r\n      - improved MIPS, ARMv7 and ARMv8 support\r\n          * added scripts setenv-{android|embedded|ios}.sh for GNUmakefile-cross\r\n          * aggressive use of -march=<arch> and -mfpu=<fpu> in cryptest.sh\r\n      - improved build systems\r\n          * Visual Studio 2010 default\r\n          * added CMake support (lacks FindCryptopp.cmake)\r\n          * archived VC++ 5/0/6.0 project files (vc60.zip)\r\n          * archived VS2005 project files (vs2005.zip)\r\n          * archived Borland project files (bds10.zip)\r\n      - improved Testing and QA\r\n          * expanded platforms and compilers\r\n          * added code generation tests based on CPU features\r\n          * added C++03, C++11, C++14, C++17 testing\r\n          * added -O3, -O5, -Ofast and -Os testing\r\n      - ported to MSVC 2015 SP3, Xcode 9.0, Sun Studio 12.5, GCC 7.0, MacPorts GCC 7.0, Clang 3.8, Intel C++ 17.00\r\n\r\nWritten by Wei Dai and the Crypto++ Project\r\n"], "filenames": ["Install.txt", "Readme.txt"], "buggy_code_start_loc": [18, 165], "buggy_code_end_loc": [61, 171], "fixing_code_start_loc": [18, 165], "fixing_code_end_loc": [71, 182], "type": "CWE-200", "message": "Crypto++ (aka cryptopp) through 5.6.4 does not document the requirement for a compile-time NDEBUG definition disabling the many assert calls that are unintended in production use, which might allow context-dependent attackers to obtain sensitive information by leveraging access to process memory after an assertion failure, as demonstrated by reading a core dump.", "other": {"cve": {"id": "CVE-2016-7420", "sourceIdentifier": "cve@mitre.org", "published": "2016-09-16T05:59:15.427", "lastModified": "2016-11-28T20:39:12.953", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Crypto++ (aka cryptopp) through 5.6.4 does not document the requirement for a compile-time NDEBUG definition disabling the many assert calls that are unintended in production use, which might allow context-dependent attackers to obtain sensitive information by leveraging access to process memory after an assertion failure, as demonstrated by reading a core dump."}, {"lang": "es", "value": "Crypto++ (tambi\u00e9n conocido como cryptopp) hasta la versi\u00f3n 5.6.4 no documenta el requisito para una definici\u00f3n NDEBUG de tiempo de compilaci\u00f3n deshabilitando las m\u00faltiples llamadas assert que son no intencionadas en uso de producci\u00f3n, lo que podr\u00eda permitir a atacantes dependientes del contexto obtener informaci\u00f3n sensible aprovechando acceso a la memoria de procesamiento despu\u00e9s de un fallo de aserci\u00f3n, seg\u00fan lo demostrado mediante la lectura de un volcado de memoria."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cryptopp:crypto\\+\\+:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.6.4", "matchCriteriaId": "CCF65951-D574-4603-BA6E-EE43D70B6C1F"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/09/15/12", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2016/09/16/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/92988", "source": "cve@mitre.org"}, {"url": "https://github.com/weidai11/cryptopp/commit/553049ba297d89d9e8fbf2204acb40a8a53f5cd6", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/weidai11/cryptopp/issues/277", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/weidai11/cryptopp/commit/553049ba297d89d9e8fbf2204acb40a8a53f5cd6"}}