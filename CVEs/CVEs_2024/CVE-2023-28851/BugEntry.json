{"buggy_code": ["<?php\n\nnamespace Bigfork\\SilverstripeFormCapture\\Model;\n\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\HasManyList;\nuse SilverStripe\\Security\\PermissionProvider;\nuse SilverStripe\\Security\\Permission;\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig;\nuse SilverStripe\\Forms\\GridField\\GridFieldDataColumns;\nuse SilverStripe\\Forms\\GridField\\GridFieldExportButton;\nuse SilverStripe\\Forms\\GridField\\GridFieldPrintButton;\nuse SilverStripe\\ORM\\FieldType\\DBHTMLText;\nuse SilverStripe\\Forms\\HeaderField;\n\n/**\n * @method HasManyList CapturedFields()\n */\nclass CapturedFormSubmission extends DataObject implements PermissionProvider\n{\n\tprivate static $table_name = 'FormCapture_FormSubmission';\n\n    private static $db = [\n        'Type' => 'Varchar(255)',\n        'Name' => 'Varchar(255)',\n        'Email' => 'Varchar(255)'\n    ];\n\n    private static $has_many = [\n        'CapturedFields' => CapturedField::class\n    ];\n\n    private static $cascade_deletes = [\n        'CapturedFields'\n    ];\n\n    private static $default_sort = 'Created DESC';\n\n\tprivate static $singular_name = 'Form Submission';\n\n\tprivate static $plural_name = 'Form Submissions';\n\n\tprivate static $summary_fields = [\n        'Type',\n        'Created.Nice',\n        'NameWithFallback',\n        'EmailWithFallback',\n        'Details'\n    ];\n\n\tprivate static $searchable_fields = [\n        'Type'\n    ];\n\n\tprivate static $field_labels = [\n        'Created.Nice' => 'Submitted on',\n        'NameWithFallback' => 'Name',\n        'EmailWithFallback' => 'Email'\n    ];\n\n\tpublic function providePermissions(): array\n    {\n\t\treturn [\n\t\t\t'VIEW_FORM_SUBMISSIONS' => 'View Submissions',\n\t\t\t'DELETE_FORM_SUBMISSIONS' => 'Delete Submissions'\n\t\t];\n\t}\n\n\tpublic function canView($member = null): bool\n    {\n\t\treturn Permission::check('VIEW_FORM_SUBMISSIONS');\n\t}\n\n\tpublic function canDelete($member= null): bool\n    {\n\t\treturn Permission::check('DELETE_FORM_SUBMISSIONS');\n\t}\n\n\tpublic function canEdit($member = null): bool\n    {\n\t\treturn Permission::check('VIEW_FORM_SUBMISSIONS');\n\t}\n\n\tpublic function canCreate($member = null, $context = []): bool\n    {\n\t\treturn false;\n\t}\n\n\tpublic function getCMSFields(): FieldList\n    {\n\t\t$this->beforeUpdateCMSFields(function (FieldList $fields) {\n            $fields->removeByName(['CapturedFields', 'Name', 'Email', 'Type']);\n\n            $fields->addFieldsToTab(\n                'Root.Main',\n                [\n                    HeaderField::create('SubmissionName', $this->Type),\n                    HeaderField::create('SubmissionDate', $this->dbObject('Created')->format('dd/MM/yyyy hh:mm'), 3)\n                ]\n            );\n\n            $submittedFields = GridField::create(\n                'CapturedFields',\n                'Form Fields',\n                $this->CapturedFields()->sort('Created', 'ASC')\n            );\n\n            $conf = GridFieldConfig::create();\n            $conf->addComponent(new GridFieldDataColumns());\n            $conf->addComponent(new GridFieldExportButton());\n            $conf->addComponent(new GridFieldPrintButton());\n\n            $submittedFields->setConfig($conf);\n\n            $fields->addFieldToTab('Root.Main', $submittedFields);\n\n            $fields->fieldByName('Root.Main')->setTitle($this->Type);\n        });\n\n\t\treturn parent::getCMSFields();\n\t}\n\n\tpublic function Details(): DBHTMLText\n    {\n\t\t$html = DBHTMLText::create();\n\t\t$toAdd = [];\n\n\t\t// Loop through all fields marked for inclusion in the details tab\n\t\tforeach ($this->CapturedFields()->filter(['IsInDetails' => '1']) as $field) {\n\t\t\tif (!$field->Value) {\n                continue;\n            }\n\n\t\t\t$htmlEnt = '<strong>'. $field->Title .'</strong>: '. $field->Value;\n\t\t\t$toAdd[] = $htmlEnt;\n\t\t}\n\n\t\t$html->setValue(join('<br />', $toAdd));\n        return $html;\n    }\n\n    /**\n     * @param string $fieldName\n     * @return mixed\n     */\n    public function relField($fieldName)\n    {\n        // If we're exporting, the field will be prefixed with export__ - works around issues with getTitle()\n        if (strpos($fieldName, 'export__') === 0) {\n            // Check for a submitted form field with the given name\n            $fieldName = substr($fieldName, 8);\n            $formField = CapturedField::get()->filter([\n                'SubmissionID' => $this->ID,\n                'Name' => $fieldName\n            ])->first();\n\n            if (!$formField) {\n                return null;\n            }\n\n            return $formField->dbObject('Value');\n        }\n\n        // Default case for fields on this model\n        return parent::relField($fieldName);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Bigfork\\SilverstripeFormCapture\\Model;\n\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\HasManyList;\nuse SilverStripe\\Security\\PermissionProvider;\nuse SilverStripe\\Security\\Permission;\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig;\nuse SilverStripe\\Forms\\GridField\\GridFieldDataColumns;\nuse SilverStripe\\Forms\\GridField\\GridFieldExportButton;\nuse SilverStripe\\Forms\\GridField\\GridFieldPrintButton;\nuse SilverStripe\\ORM\\FieldType\\DBHTMLText;\nuse SilverStripe\\Forms\\HeaderField;\n\n/**\n * @method HasManyList CapturedFields()\n */\nclass CapturedFormSubmission extends DataObject implements PermissionProvider\n{\n\tprivate static $table_name = 'FormCapture_FormSubmission';\n\n    private static $db = [\n        'Type' => 'Varchar(255)',\n        'Name' => 'Varchar(255)',\n        'Email' => 'Varchar(255)'\n    ];\n\n    private static $has_many = [\n        'CapturedFields' => CapturedField::class\n    ];\n\n    private static $cascade_deletes = [\n        'CapturedFields'\n    ];\n\n    private static $default_sort = 'Created DESC';\n\n\tprivate static $singular_name = 'Form Submission';\n\n\tprivate static $plural_name = 'Form Submissions';\n\n\tprivate static $summary_fields = [\n        'Type',\n        'Created.Nice',\n        'NameWithFallback',\n        'EmailWithFallback',\n        'Details'\n    ];\n\n\tprivate static $searchable_fields = [\n        'Type'\n    ];\n\n\tprivate static $field_labels = [\n        'Created.Nice' => 'Submitted on',\n        'NameWithFallback' => 'Name',\n        'EmailWithFallback' => 'Email'\n    ];\n\n\tpublic function providePermissions(): array\n    {\n\t\treturn [\n\t\t\t'VIEW_FORM_SUBMISSIONS' => 'View Submissions',\n\t\t\t'DELETE_FORM_SUBMISSIONS' => 'Delete Submissions'\n\t\t];\n\t}\n\n\tpublic function canView($member = null): bool\n    {\n\t\treturn Permission::check('VIEW_FORM_SUBMISSIONS');\n\t}\n\n\tpublic function canDelete($member= null): bool\n    {\n\t\treturn Permission::check('DELETE_FORM_SUBMISSIONS');\n\t}\n\n\tpublic function canEdit($member = null): bool\n    {\n\t\treturn Permission::check('VIEW_FORM_SUBMISSIONS');\n\t}\n\n\tpublic function canCreate($member = null, $context = []): bool\n    {\n\t\treturn false;\n\t}\n\n\tpublic function getCMSFields(): FieldList\n    {\n\t\t$this->beforeUpdateCMSFields(function (FieldList $fields) {\n            $fields->removeByName(['CapturedFields', 'Name', 'Email', 'Type']);\n\n            $fields->addFieldsToTab(\n                'Root.Main',\n                [\n                    HeaderField::create('SubmissionName', $this->Type),\n                    HeaderField::create('SubmissionDate', $this->dbObject('Created')->format('dd/MM/yyyy hh:mm'), 3)\n                ]\n            );\n\n            $submittedFields = GridField::create(\n                'CapturedFields',\n                'Form Fields',\n                $this->CapturedFields()->sort('Created', 'ASC')\n            );\n\n            $conf = GridFieldConfig::create();\n            $conf->addComponent(new GridFieldDataColumns());\n            $conf->addComponent(new GridFieldExportButton());\n            $conf->addComponent(new GridFieldPrintButton());\n\n            $submittedFields->setConfig($conf);\n\n            $fields->addFieldToTab('Root.Main', $submittedFields);\n\n            $fields->fieldByName('Root.Main')->setTitle($this->Type);\n        });\n\n\t\treturn parent::getCMSFields();\n\t}\n\n\tpublic function Details(): DBHTMLText\n    {\n\t\t$html = DBHTMLText::create();\n\t\t$toAdd = [];\n\n\t\t// Loop through all fields marked for inclusion in the details tab\n\t\tforeach ($this->CapturedFields()->filter(['IsInDetails' => '1']) as $field) {\n\t\t\tif (!$field->Value) {\n                continue;\n            }\n\n\t\t\t$htmlEnt = '<strong>'. $field->Title .'</strong>: '. $field->dbObject('Value')->forTemplate();\n\t\t\t$toAdd[] = $htmlEnt;\n\t\t}\n\n\t\t$html->setValue(join('<br />', $toAdd));\n        return $html;\n    }\n\n    /**\n     * @param string $fieldName\n     * @return mixed\n     */\n    public function relField($fieldName)\n    {\n        // If we're exporting, the field will be prefixed with export__ - works around issues with getTitle()\n        if (strpos($fieldName, 'export__') === 0) {\n            // Check for a submitted form field with the given name\n            $fieldName = substr($fieldName, 8);\n            $formField = CapturedField::get()->filter([\n                'SubmissionID' => $this->ID,\n                'Name' => $fieldName\n            ])->first();\n\n            if (!$formField) {\n                return null;\n            }\n\n            return $formField->dbObject('Value');\n        }\n\n        // Default case for fields on this model\n        return parent::relField($fieldName);\n    }\n}\n"], "filenames": ["src/Model/CapturedFormSubmission.php"], "buggy_code_start_loc": [137], "buggy_code_end_loc": [138], "fixing_code_start_loc": [137], "fixing_code_end_loc": [138], "type": "CWE-79", "message": "Silverstripe Form Capture provides a method to capture simple silverstripe forms and an admin interface for users. Starting in version 0.2.0 and prior to versions 1.0.2, 1.1.0, 2.2.5, and 3.1.1, improper escaping when presenting stored form submissions allowed for an attacker to perform a Cross-Site Scripting attack. The vulnerability was initially patched in version 1.0.2, and version 1.1.0 includes this patch. The bug was then accidentally re-introduced during a merge error, and has been re-patched in versions 2.2.5 and 3.1.1. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-28851", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-03T18:15:07.927", "lastModified": "2023-04-12T18:55:34.743", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Silverstripe Form Capture provides a method to capture simple silverstripe forms and an admin interface for users. Starting in version 0.2.0 and prior to versions 1.0.2, 1.1.0, 2.2.5, and 3.1.1, improper escaping when presenting stored form submissions allowed for an attacker to perform a Cross-Site Scripting attack. The vulnerability was initially patched in version 1.0.2, and version 1.1.0 includes this patch. The bug was then accidentally re-introduced during a merge error, and has been re-patched in versions 2.2.5 and 3.1.1. There are no known workarounds for this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}, {"lang": "en", "value": "CWE-80"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bigfork:silverstripe_form_capture:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.2.0", "versionEndIncluding": "0.2.3", "matchCriteriaId": "212038C7-1028-471A-B933-7BDE489A0398"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bigfork:silverstripe_form_capture:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.2.5", "matchCriteriaId": "EEF0BE67-DE68-401D-A907-5756CD459F43"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bigfork:silverstripe_form_capture:1.0:*:*:*:*:*:*:*", "matchCriteriaId": "5C1E1D9F-0BCB-4736-98D2-28053C4AA005"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bigfork:silverstripe_form_capture:1.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "2CF5F41A-9AE8-4676-BA10-F9EABCA5CC7D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bigfork:silverstripe_form_capture:3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "34B5EC54-C8E7-42C1-825F-FD2F22B15932"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bigfork:silverstripe_form_capture:3.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "CCEB607B-2B30-403F-B666-51B656700C15"}]}]}], "references": [{"url": "https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/bigfork/silverstripe-form-capture/security/advisories/GHSA-38h6-gmr2-j4wx", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772"}}