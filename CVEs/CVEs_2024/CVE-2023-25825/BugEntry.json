{"buggy_code": ["<?php\n//\n// ZoneMinder web function library, $Date$, $Revision$\n// Copyright (C) 2001-2008 Philip Coombes\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n//\n//\nrequire_once('Filter.php');\nrequire_once('FilterTerm.php');\n\n// Compatibility functions\nif ( version_compare(phpversion(), '4.3.0', '<') ) {\n  function ob_get_clean() {\n    $buffer = ob_get_contents();\n    ob_end_clean();\n    return $buffer;\n  }\n}\n\nfunction noCacheHeaders() {\n  header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');    // Date in the past\n  header('Last-Modified: '.gmdate( 'D, d M Y H:i:s' ).' GMT'); // always modified\n  header('Cache-Control: no-store, no-cache, must-revalidate');  // HTTP/1.1\n  header('Cache-Control: post-check=0, pre-check=0', false);\n  header('Pragma: no-cache');         // HTTP/1.0\n}\n\nfunction CSPHeaders($view, $nonce) {\n  global $Servers;\n  if ( ! $Servers )\n    $Servers = ZM\\Server::find();\n\n  $additionalScriptSrc = implode(' ', array_map(function($S){return $S->Hostname();}, $Servers));\n  switch ($view) {\n    case 'login':\n      if (defined('ZM_OPT_USE_GOOG_RECAPTCHA')\n          && defined('ZM_OPT_GOOG_RECAPTCHA_SITEKEY')\n          && defined('ZM_OPT_GOOG_RECAPTCHA_SECRETKEY')\n          && ZM_OPT_USE_GOOG_RECAPTCHA && ZM_OPT_GOOG_RECAPTCHA_SITEKEY && ZM_OPT_GOOG_RECAPTCHA_SECRETKEY) {\n        $additionalScriptSrc .= ' https://www.google.com';\n      }\n      // fall through\n    default:\n      // Enforce script-src on pages where inline scripts and event handlers have been fixed.\n      header(\"Content-Security-Policy: script-src 'self' 'nonce-$nonce' $additionalScriptSrc\".\n        (ZM_CSP_REPORT_URI ? '; report-uri '.ZM_CSP_REPORT_URI : '' )\n      );\n      break;\n  }\n}\n\nfunction CORSHeaders() {\n  if ( isset($_SERVER['HTTP_ORIGIN']) ) {\n\n# The following is left for future reference/use.\n    $valid = false;\n    global $Servers;\n    if ( ! $Servers )\n      $Servers = ZM\\Server::find();\n    if ( sizeof($Servers) < 1 ) {\n# Only need CORSHeaders in the event that there are multiple servers in use.\n      # ICON: Might not be true. multi-port?\n      if ( ZM_MIN_STREAMING_PORT ) {\n        ZM\\Debug('Setting default Access-Control-Allow-Origin from ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Credentials: true');\n        header('Access-Control-Allow-Headers: x-requested-with,x-request');\n      }\n      return;\n    }\n    foreach ( $Servers as $Server ) {\n      if (\n        preg_match('/^(https?:\\/\\/)?'.preg_quote($Server->Hostname(),'/').'/i', $_SERVER['HTTP_ORIGIN'])\n        or\n        preg_match('/^(https?:\\/\\/)?'.preg_quote($Server->Name(),'/').'/i', $_SERVER['HTTP_ORIGIN'])\n      ) {\n        $valid = true;\n        ZM\\Debug('Setting Access-Control-Allow-Origin from '.$_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Credentials: true');\n        header('Access-Control-Allow-Headers: x-requested-with,x-request');\n        break;\n      }\n    }\n    if ( !$valid ) {\n      ZM\\Warning($_SERVER['HTTP_ORIGIN'] . ' is not found in servers list.');\n    }\n  }\n}\n\nfunction getMimeType( $file ) {\n  if ( function_exists('mime_content_type') ) {\n    return mime_content_type($file);\n  } elseif ( function_exists('finfo_file') ) {\n    $finfo = finfo_open(FILEINFO_MIME);\n    $mimeType = finfo_file($finfo, $file);\n    finfo_close($finfo);\n    return $mimeType;\n  }\n  return trim(exec('file -bi '.escapeshellarg($file).' 2>/dev/null'));\n}\n\nfunction outputVideoStream($id, $src, $width, $height, $format, $title='') {\n  echo getVideoStreamHTML($id, $src, $width, $height, $format, $title);\n}\n\nfunction getVideoStreamHTML($id, $src, $width, $height, $format, $title='') {\n  $html = '';\n  $width = validInt($width);\n  $height = validInt($height);\n  $title = validHtmlStr($title);\n\n  if ( file_exists($src) ) {\n    $mimeType = getMimeType($src);\n  } else {\n    switch( $format ) {\n      case 'asf' :\n        $mimeType = 'video/x-ms-asf';\n        break;\n      case 'avi' :\n      case 'wmv' :\n        $mimeType = 'video/x-msvideo';\n        break;\n      case 'mov' :\n        $mimeType = 'video/quicktime';\n        break;\n      case 'mpg' :\n      case 'mpeg' :\n        $mimeType = 'video/mpeg';\n        break;\n      case 'swf' :\n        $mimeType = 'application/x-shockwave-flash';\n        break;\n      case '3gp' :\n        $mimeType = 'video/3gpp';\n        break;\n      default :\n        $mimeType = 'video/'.$format;\n        break;\n    }\n  }\n  if ( !$mimeType || ($mimeType == 'application/octet-stream') )\n    $mimeType = 'video/'.$format;\n  if ( ZM_WEB_USE_OBJECT_TAGS ) {\n    switch( $mimeType ) {\n      case 'video/x-ms-asf' :\n      case 'video/x-msvideo' :\n      case 'video/mp4' :\n          if ( isWindows() ) {\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\n              classid=\"CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95\"\n              codebase=\"'.ZM_BASE_PROTOCOL.'://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,0,02,902\"\n              standby=\"Loading Microsoft Windows Media Player components...\"\n              type=\"'.$mimeType.'\">\n              <param name=\"FileName\" value=\"'.$src.'\"/>\n              <param name=\"autoStart\" value=\"1\"/>\n              <param name=\"showControls\" value=\"0\"/>\n              <embed type=\"'.$mimeType.'\"\n              pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.microsoft.com/Windows/MediaPlayer/\"\n              src=\"'.$src.'\"\n              name=\"'.$title.'\"\n              width=\"'.$width.'\"\n              height=\"'.$height.'\"\n              autostart=\"1\"\n              showcontrols=\"0\">\n              </embed>\n              </object>';\n          }\n      case 'video/quicktime' :\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\n            codebase=\"'.ZM_BASE_PROTOCOL.'://www.apple.com/qtactivex/qtplugin.cab\"\n            type=\"'.$mimeType.'\">\n            <param name=\"src\" value=\"'.$src.'\"/>\n            <param name=\"autoplay\" VALUE=\"true\"/>\n            <param name=\"controller\" VALUE=\"false\"/>\n            <embed type=\"'.$mimeType.'\"\n            src=\"'.$src.'\"\n            pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.apple.com/quicktime/download/\"\n            name=\"'.$title.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            autoplay=\"true\"\n            controller=\"true\">\n            </embed>\n            </object>';\n      case 'application/x-shockwave-flash' :\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n            codebase=\"'.ZM_BASE_PROTOCOL.'://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"\n            type=\"'.$mimeType.'\">\n            <param name=\"movie\" value=\"'.$src.'\"/>\n            <param name=\"quality\" value=\"high\"/>\n            <param name=\"bgcolor\" value=\"#ffffff\"/>\n            <embed type=\"'.$mimeType.'\"\n            pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.macromedia.com/go/getflashplayer\"\n            src=\"'.$src.'\"\n            name=\"'.$title.'\"\n            width=\"'.$width.'\"\n            height=\"'.$height.'\"\n            quality=\"high\"\n            bgcolor=\"#ffffff\">\n            </embed>\n            </object>';\n    } # end switch\n  } # end if use object tags\n  return '<embed'. ( isset($mimeType)?(' type=\"'.$mimeType.'\"'):'' ). '\n      src=\"'.$src.'\"\n      name=\"'.$title.'\"\n      width=\"'.$width.'\"\n      height=\"'.$height.'\"\n      autostart=\"1\"\n      autoplay=\"1\"\n      showcontrols=\"0\"\n      controller=\"0\">\n      </embed>';\n}\n\nfunction outputImageStream( $id, $src, $width, $height, $title='' ) {\n  echo getImageStreamHTML( $id, $src, $width, $height, $title );\n}\n\n// width and height MUST be valid and include the px\nfunction getImageStreamHTML( $id, $src, $width, $height, $title='' ) {\n  if ( canStreamIframe() ) {\n      return '<iframe id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" '.($width? ' width=\"'. validInt($width).'\"' : '').($height?' height=\"'.validInt($height).'\"' : '' ).'/>';\n  } else {\n      #return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" />';\n    return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" style=\"'.\n      #(($width and $width !='auto') ?'width:'.$width.';' : '').\n      (($height and $height != 'auto')?' height:'.$height.';':'').\n      '\" />';\n  }\n}\n\nfunction outputControlStream($src, $width, $height, $monitor, $scale, $target) {\n?>\n  <form name=\"ctrlForm\" method=\"post\" action=\"?\" target=\"<?php echo $target ?>\">\n    <input type=\"hidden\" name=\"view\" value=\"blank\"/>\n    <input type=\"hidden\" name=\"mid\" value=\"<?php echo $monitor['Id'] ?>\"/>\n    <input type=\"hidden\" name=\"action\" value=\"control\"/>\n    <?php\n    if ( $monitor['CanMoveMap'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"moveMap\"/>\n    <?php\n    } else if ( $monitor['CanMoveRel'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"movePseudoMap\"/>\n    <?php\n    } else if ( $monitor['CanMoveCon'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"moveConMap\"/>\n    <?php\n    }\n    ?>\n    <input type=\"hidden\" name=\"scale\" value=\"<?php echo $scale ?>\"/>\n    <input type=\"image\" src=\"<?php echo $src ?>\" width=\"<?php echo $width ?>\" height=\"<?php echo $height ?>\">\n  </form>\n<?php\n}\n\nfunction outputHelperStream($id, $src, $width, $height, $title='') {\n  echo getHelperStream($id, $src, $width, $height, $title);\n}\nfunction getHelperStream($id, $src, $width, $height, $title='') {\n    return '<object type=\"application/x-java-applet\" id=\"'.$id.'\" code=\"com.charliemouse.cambozola.Viewer\"\n    archive=\"'.(defined('ZM_PATH_CAMBOZOLA') ? ZM_PATH_CAMBOZOLA : '') .'\"\n    align=\"middle\"\n    width=\"'. $width .'\"\n    height=\"'. $height .'\"\n    title=\"'. $title .'\">\n    <param name=\"accessories\" value=\"none\"/>\n    <param name=\"url\" value=\"'. $src .'\"/>\n    </object>';\n}\n\nfunction outputImageStill($id, $src, $width, $height, $title='') {\n  echo getImageStill($id, $src, $width, $height, $title='');\n}\nfunction getImageStill($id, $src, $width, $height, $title='') {\n  return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'.$title.'\"'.\n    (validInt($width)?' width=\"'.$width.'\"':'').\n    (validInt($height)?' height=\"'.$height.'\"':'').' />';\n}\n\nfunction getWebSiteUrl($id, $src, $width, $height, $title='') {\n  # Prevent unsightly warnings when php cannot verify the ssl certificate\n  stream_context_set_default( [\n    'ssl' => [\n      'verify_peer' => false,\n      'verify_peer_name' => false,\n    ],\n  ]);\n  # The End User can turn off the following warning under Options -> Web\n  if ( ZM_WEB_XFRAME_WARN ) {\n    $header = get_headers($src, 1);\n    # If the target website has set X-Frame-Options, check it for \"sameorigin\" and warn the end user\n    if ( array_key_exists('X-Frame-Options', $header) ) {\n      $header = $header['X-Frame-Options'];\n      if ( stripos($header, 'sameorigin') === 0 )\n        ZM\\Warning('Web site '.$src.' has X-Frame-Options set to sameorigin. An X-Frame-Options browser plugin is required to display this site.');\n    }\n  }\n  return '<object id=\"'.$id.'\" data=\"'.$src.'\" alt=\"'.$title.'\" width=\"'.$width.'\" height=\"'.$height.'\"></object>';\n}\n\nfunction outputControlStill($src, $width, $height, $monitor, $scale, $target) {\n  ?>\n  <form name=\"ctrlForm\" method=\"post\" action=\"?\" target=\"<?php echo $target ?>\">\n    <input type=\"hidden\" name=\"view\" value=\"blank\"/>\n    <input type=\"hidden\" name=\"mid\" value=\"<?php echo $monitor['Id'] ?>\"/>\n    <input type=\"hidden\" name=\"action\" value=\"control\"/>\n    <?php\n    if ( $monitor['CanMoveMap'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"moveMap\"/>\n    <?php\n    } else if ( $monitor['CanMoveRel'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"movePseudoMap\"/>\n    <?php\n    } else if ( $monitor['CanMoveCon'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"moveConMap\"/>\n    <?php\n    }\n    ?>\n    <input type=\"hidden\" name=\"scale\" value=\"<?php echo $scale ?>\"/>\n    <input type=\"image\" src=\"<?php echo $src ?>\" width=\"<?php echo $width ?>\" height=\"<?php echo $height ?>\"/>\n  </form>\n  <?php\n}\n\n// Incoming args are shell-escaped. This function must escape any further arguments it cannot guarantee.\nfunction getZmuCommand($args) {\n  $zmuCommand = ZMU_PATH;\n\n  if ( ZM_OPT_USE_AUTH ) {\n    if ( ZM_AUTH_RELAY == 'hashed' ) {\n      $zmuCommand .= ' -A '.generateAuthHash(false, true);\n    } elseif ( ZM_AUTH_RELAY == 'plain' ) {\n      $zmuCommand .= ' -U ' .escapeshellarg($_SESSION['username']).' -P '.escapeshellarg($_SESSION['password']);\n    } elseif ( ZM_AUTH_RELAY == 'none' ) {\n      $zmuCommand .= ' -U '.escapeshellarg($_SESSION['username']);\n    }\n  }\n\n  $zmuCommand .= $args;\n\n  return $zmuCommand;\n}\n\nfunction getEventDefaultVideoPath($event) {\n  $Event = new ZM\\Event($event);\n  return $Event->getStreamSrc(array('mode'=>'mpeg', 'format'=>'h264'));\n}\n\nfunction deletePath( $path ) {\n  ZM\\Debug('Deleting '.$path);\n  if ( is_dir($path) ) {\n    system(escapeshellcmd('rm -rf '.$path));\n  } else if ( file_exists($path) ) {\n    unlink($path);\n  }\n}\n\nfunction deleteEvent($event) {\n\n  if ( empty($event) ) {\n    ZM\\Error('Empty event passed to deleteEvent.');\n    return;\n  }\n\n  if ( gettype($event) != 'array' ) {\n# $event could be an eid, so turn it into an event hash\n    $event = new ZM\\Event($event);\n  }\n\n  if ( $event->Archived() ) {\n    ZM\\Info('Cannot delete Archived event.');\n    return;\n  } # end if Archived\n\n  global $user;\n\n  if ( $user['Events'] == 'Edit' ) {\n    $event->delete();\n  } # CAN EDIT\n}\n\n/**\n * $label must be already escaped. It can't be done here since it sometimes contains HTML tags.\n */\nfunction makeLink($url, $label, $condition=1, $options='') {\n  $string = '';\n  if ( $condition ) {\n    $string .= '<a href=\"'.$url.'\"'.($options?(' '.$options):'').'>';\n  }\n  $string .= $label;\n  if ( $condition ) {\n    $string .= '</a>';\n  }\n  return $string;\n}\n\n//Make it slightly easier to create a link to help text modal\nfunction makeHelpLink($ohndx) {\n  $string = '&nbsp;(<a id=\"' .$ohndx. '\" class=\"optionhelp\" href=\"#\">?</a>)';\n\n  return $string;\n}\n\nfunction makeButton($url, $buttonValue, $condition=1, $options='') {\n  $string = '<button type=\"button\" data-on-click-this=\"'.$buttonValue.'\"';\n  $string .= ' data-url=\"' .$url. '\"';\n  if (!$condition) {\n    $string .= ' disabled=\"disabled\"';\n  }\n  $string .= ($options ? (' ' . $options) : '') . '/>'.translate($buttonValue).'</button>'.PHP_EOL;\n  return $string;\n}\n\nfunction htmlSelect($name, $contents, $values, $behaviours=false) {\n  $behaviourText = '';\n  if ( !empty($behaviours) ) {\n    if ( is_array($behaviours) ) {\n      foreach ( $behaviours as $event=>$action ) {\n        $behaviourText .= ' '.$event.'=\"'.$action.'\"';\n      }\n    } else {\n      $behaviourText = ' onchange=\"'.$behaviours.'\"';\n    }\n  }\n\n  return '<select name=\"'.$name.'\" '.$behaviourText.'>'.PHP_EOL.htmlOptions($contents, $values).'</select>';\n}\n\nfunction htmlOptions($options, $values) {\n  $options_html = '';\n  $has_selected = false;\n  foreach ( $options as $value=>$option ) {\n    $disabled = 0;\n    $text = '';\n    if ( is_array($option) ) {\n\n      if ( isset($option['Name']) )\n        $text = $option['Name'];\n      else if ( isset($option['text']) )\n        $text = $option['text'];\n\n      if ( isset($option['disabled']) ) {\n        $disabled = $option['disabled'];\n      }\n    } else if ( is_object($option) ) {\n      $text = $option->Name();\n    } else {\n      $text = $option;\n    }\n    $selected = false;\n    if ($values) {\n      $selected = is_array($values) ? in_array($value, $values) : (!strcmp($value, $values));\n      if ( !$has_selected ) \n        $has_selected = $selected;\n    }\n\n    $options_html .= '<option value=\"'.htmlspecialchars($value, ENT_COMPAT | ENT_HTML401, ini_get('default_charset'), false).'\"'.\n      ($selected?' selected=\"selected\"':'').\n      ($disabled?' disabled=\"disabled\"':'').\n      '>'.htmlspecialchars($text, ENT_COMPAT | ENT_HTML401, ini_get('default_charset'), false).'</option>'.PHP_EOL;\n  } # end foreach options\n  if ( $values and ((!is_array($values)) or count($values) ) and ! $has_selected ) {\n    ZM\\Warning('Specified value '.print_r($values, true).' not in contents: '.print_r($options, true));\n  }\n  return $options_html;\n} # end function htmlOptions\n\nfunction truncText($text, $length, $deslash=1) {\n  return preg_replace('/^(.{'.$length.',}?)\\b.*$/', '\\\\1&hellip;', ($deslash?stripslashes($text):$text));\n}\n\nfunction buildSelect($name, $contents, $behaviours=false) {\n  $value = '';\n  if ( preg_match('/^\\s*(\\w+)\\s*(\\[.*\\])?\\s*$/', $name, $matches) && (count($matches) > 2) ) {\n    $arr = $matches[1];\n    if ( isset($GLOBALS[$arr]) )\n      $value = $GLOBALS[$arr];\n    elseif ( isset($_REQUEST[$arr]) )\n      $value = $_REQUEST[$arr];\n    if ( !preg_match_all('/\\[\\s*[\\'\"]?(\\w+)[\"\\']?\\s*\\]/', $matches[2], $matches) ) {\n      ZM\\Fatal(\"Can't parse selector '$name'\");\n    }\n    for ( $i = 0; $i < count($matches[1]); $i++ ) {\n      $idx = $matches[1][$i];\n      $value = isset($value[$idx])?$value[$idx]:false;\n    }\n  } else {\n    if ( isset($GLOBALS[$name]) )\n      $value = $GLOBALS[$name];\n    elseif ( isset($_REQUEST[$name]) )\n      $value = $_REQUEST[$name];\n  }\n  ob_start();\n  $behaviourText = '';\n  if ( !empty($behaviours) ) {\n    if ( is_array($behaviours) ) {\n      foreach ( $behaviours as $event=>$action ) {\n        $behaviourText .= ' '.$event.'=\"'.$action.'\"';\n      }\n    } else {\n      $behaviourText = ' data-on-change-this=\"'.$behaviours.'\"';\n    }\n  }\n  ?>\n  <select name=\"<?php echo $name ?>\" id=\"<?php echo $name ?>\"<?php echo $behaviourText ?>>\n  <?php\n  foreach ( $contents as $contentValue => $contentText ) {\n  ?>\n    <option value=\"<?php echo $contentValue ?>\"<?php if ( $value == $contentValue ) { ?> selected=\"selected\"<?php } ?>><?php echo validHtmlStr($contentText) ?></option>\n  <?php\n  }\n  ?>\n  </select>\n  <?php\n  $html = ob_get_contents();\n  ob_end_clean();\n\n  return $html;\n}\n\nfunction getFormChanges($values, $newValues, $types=false, $columns=false) {\n  $changes = array();\n  if ( !$types )\n    $types = array();\n\n  foreach ( $newValues as $key=>$value ) {\n    if ( $columns && !isset($columns[$key]) )\n      continue;\n\n    if ( !isset($types[$key]) )\n      $types[$key] = false;\n\n    switch ( $types[$key] ) {\n      case 'set' :\n          if ( is_array($newValues[$key]) ) {\n            if ( (!isset($values[$key])) or ( join(',',$newValues[$key]) != $values[$key] ) ) {\n              $changes[$key] = \"`$key` = \".dbEscape(join(',',$newValues[$key]));\n            }\n          } else if ( (!isset($values[$key])) or $values[$key] ) {\n            $changes[$key] = \"`$key` = ''\";\n          }\n          break;\n      case 'image' :\n          if ( is_array( $newValues[$key] ) ) {\n            $imageData = getimagesize( $newValues[$key]['tmp_name'] );\n            $changes[$key.'Width'] = $key.'Width = '.$imageData[0];\n            $changes[$key.'Height'] = $key.'Height = '.$imageData[1];\n            $changes[$key.'Type'] = $key.'Type = \\''.$newValues[$key]['type'].'\\'';\n            $changes[$key.'Size'] = $key.'Size = '.$newValues[$key]['size'];\n            ob_start();\n            readfile( $newValues[$key]['tmp_name'] );\n            $changes[$key] = $key.\" = \".dbEscape( ob_get_contents() );\n            ob_end_clean();\n          } else {\n            $changes[$key] = \"$key = \".dbEscape($value);\n          }\n          break;\n      case 'document' :\n          if ( is_array( $newValues[$key] ) ) {\n            $imageData = getimagesize( $newValues[$key]['tmp_name'] );\n            $changes[$key.'Type'] = $key.'Type = \\''.$newValues[$key]['type'].'\\'';\n            $changes[$key.'Size'] = $key.'Size = '.$newValues[$key]['size'];\n            ob_start();\n            readfile( $newValues[$key]['tmp_name'] );\n            $changes[$key] = $key.' = '.dbEscape( ob_get_contents() );\n            ob_end_clean();\n          } else {\n            $changes[$key] = $key . ' = '.dbEscape($value);\n          }\n          break;\n      case 'file' :\n          $changes[$key.'Type'] = $key.'Type = '.dbEscape($newValues[$key]['type']);\n          $changes[$key.'Size'] = $key.'Size = '.dbEscape($newValues[$key]['size']);\n          ob_start();\n          readfile( $newValues[$key]['tmp_name'] );\n          $changes[$key] = $key.' = \\''.dbEscape( ob_get_contents() ).'\\'';\n          ob_end_clean();\n          break;\n      case 'raw' :\n          if ( (!isset($values[$key])) or ($values[$key] != $value) ) {\n            $changes[$key] = $key . ' = '.dbEscape($value);\n          }\n          break;\n      case 'toggle' :\n        if ( (!isset($values[$key])) or $values[$key] != $value ) {\n          if ( empty($value) ) {\n            $changes[$key] = $key.' = 0';\n          } else {\n            $changes[$key] = $key.' = 1';\n            //$changes[$key] = $key . ' = '.dbEscape(trim($value));\n          }\n        }\n        break;\n      case 'integer' :\n        if ( (!isset($values[$key])) or $values[$key] != $value ) {\n          $changes[$key] = $key . ' = '.intval($value);\n        }\n        break;\n      default :\n          if ( !isset($values[$key]) || ($values[$key] != $value) ) {\n            if ( ! isset($value) || $value == '' ) {\n              $changes[$key] = \"`$key` = NULL\";\n            } else {\n              $changes[$key] = \"`$key` = \".dbEscape(trim($value));\n            }\n          }\n          break;\n    } // end switch\n  } // end foreach newvalues\n\n  foreach ( $values as $key=>$value ) {\n    if ( !empty($columns[$key]) ) {\n      if ( !empty($types[$key]) ) {\n        if ( $types[$key] == 'toggle' ) {\n          if ( !isset($newValues[$key]) && !empty($value) ) {\n            $changes[$key] = \"`$key` = 0\";\n          }\n        } else if ( $types[$key] == 'set' ) {\n          $changes[$key] = \"`$key` = ''\";\n        }\n      }\n    }\n  }\n  return $changes;\n}\n\nfunction getBrowser(&$browser, &$version) {\n  if ( isset($_SESSION['browser']) ) {\n    $browser = $_SESSION['browser'];\n    $version = $_SESSION['version'];\n  } else {\n    if (\n      ( preg_match('/MSIE (.*?);/', $_SERVER['HTTP_USER_AGENT'], $logVersion))\n      ||\n      ( preg_match('/.*Trident.*rv:(.*?)(;|\\))/', $_SERVER['HTTP_USER_AGENT'], $logVersion))\n    ) {\n      $version = $logVersion[1];\n      $browser = 'ie';\n    } else if ( preg_match('/Chrome\\/([0-9]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      // We only care about the major so don't count .\n      $version = $logVersion[1];\n      // Check for old version of Chrome with bug 5876\n      if ( $version < 7 ) {\n        $browser = 'oldchrome';\n      } else {\n        $browser = 'chrome';\n      }\n    } else if ( preg_match('/Safari\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'safari';\n    } else if ( preg_match('/Opera[ \\/]([0-9].[0-9]{1,2})/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'opera';\n    } else if ( preg_match('/Konqueror\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'konqueror';\n    } else if ( preg_match('/Mozilla\\/([0-9].[0-9]{1,2})/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'mozilla';\n    } else {\n      $version = 0;\n      $browser = 'unknown';\n    }\n    $_SESSION['browser'] = $browser;\n    $_SESSION['version'] = $version;\n  }\n}\n\nfunction isMozilla() {\n  getBrowser($browser, $version);\n\n  return $browser == 'mozilla';\n}\n\nfunction isKonqueror() {\n  getBrowser($browser, $version);\n\n  return $browser == 'konqueror';\n}\n\nfunction isInternetExplorer() {\n  getBrowser($browser, $version);\n\n  return $browser == 'ie';\n}\n\nfunction isOldChrome() {\n  getBrowser($browser, $version);\n\n  return $browser == 'oldchrome';\n}\n\nfunction isChrome() {\n  getBrowser($browser, $version);\n\n  return $browser == 'chrome';\n}\n\nfunction isOpera() {\n  getBrowser($browser, $version);\n\n  return $browser == 'opera';\n}\n\nfunction isSafari() {\n  getBrowser($browser, $version);\n\n  return $browser == 'safari';\n}\n\nfunction isWindows() {\n  return preg_match('/Win/', $_SERVER['HTTP_USER_AGENT']);\n}\n\nfunction canStreamIframe() {\n  return isKonqueror();\n}\n\nfunction canStreamNative() {\n  // Old versions of Chrome can display the stream, but then it blocks everything else (Chrome bug 5876)\n  return ( ZM_WEB_CAN_STREAM == 'yes' || ( ZM_WEB_CAN_STREAM == 'auto' && (!isInternetExplorer() && !isOldChrome()) ) );\n}\n\nfunction canStreamApplet() {\n  if ( defined('ZM_OPT_CAMBOZOLA') && (ZM_OPT_CAMBOZOLA && !file_exists( ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA )) ) {\n    ZM\\Warning('ZM_OPT_CAMBOZOLA is enabled, but the system cannot find '.ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA);\n  }\n\n  return (defined('ZM_OPT_CAMBOZOLA') && ZM_OPT_CAMBOZOLA && file_exists(ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA));\n}\n\nfunction canStream() {\n  return canStreamNative() | canStreamApplet();\n}\n\nfunction packageControl($command) {\n  $string = ZM_PATH_BIN.'/zmpkg.pl '.escapeshellarg($command);\n  $string .= ' 2>/dev/null >&- <&- >/dev/null';\n  exec($string);\n}\n\nfunction daemonControl($command, $daemon=false, $args=false) {\n  $string = escapeshellcmd(ZM_PATH_BIN).'/zmdc.pl '.$command;\n  if ( $daemon ) {\n    $string .= ' ' . $daemon;\n    if ( $args ) {\n      $string .= ' ' . $args;\n    }\n  }\n  $string = escapeshellcmd($string);\n  #$string .= ' 2>/dev/null >&- <&- >/dev/null';\n  ZM\\Debug('daemonControl '.$string);\n  exec($string);\n}\n\nfunction zmcControl($monitor, $mode=false) {\n  $Monitor = new ZM\\Monitor($monitor);\n  return $Monitor->zmcControl($mode);\n}\n\nfunction initDaemonStatus() {\n  global $daemon_status;\n\n  if ( !isset($daemon_status) ) {\n    if ( daemonCheck() ) {\n      $string = ZM_PATH_BIN.'/zmdc.pl status';\n      $daemon_status = shell_exec($string);\n    } else {\n      $daemon_status = '';\n    }\n  }\n}\n\nfunction daemonStatus($daemon, $args=false) {\n  global $daemon_status;\n\n  initDaemonStatus();\n\n  $string = $daemon;\n  if ( $args ) {\n\t\tif ( is_array($args) ) {\n\t\t\t$string .= join(' ', $args);\n\t\t} else {\n\t\t\t$string .= ' ' . $args;\n\t\t}\n\t}\n  return ( strpos($daemon_status, \"'$string' running\") !== false );\n}\n\nfunction zmcStatus($monitor) {\n  if ( $monitor['Type'] == 'Local' ) {\n    $zmcArgs = '-d '.$monitor['Device'];\n  } else {\n    $zmcArgs = '-m '.$monitor['Id'];\n  }\n  return daemonStatus('zmc', $zmcArgs);\n}\n\nfunction daemonCheck($daemon=false, $args=false) {\n  $string = ZM_PATH_BIN.'/zmdc.pl check';\n  if ( $daemon ) {\n    $string .= ' ' . $daemon;\n    if ( $args )\n      $string .= ' '. $args;\n  }\n  $string = escapeshellcmd($string);\n  $result = exec($string);\n  return preg_match('/running/', $result);\n}\n\nfunction zmcCheck($monitor) {\n  if ( $monitor['Type'] == 'Local' ) {\n    $zmcArgs = '-d '.$monitor['Device'];\n  } else {\n    $zmcArgs = '-m '.$monitor['Id'];\n  }\n  return daemonCheck('zmc', $zmcArgs);\n}\n\nfunction getImageSrc($event, $frame, $scale=SCALE_BASE, $captureOnly=false, $overwrite=false) {\n  $Event = new ZM\\Event($event);\n  return $Event->getImageSrc($frame, $scale, $captureOnly, $overwrite);\n}\n\nfunction viewImagePath($path, $querySep='&amp;') {\n  return '?view=image'.$querySep.'path='.$path;\n}\n\nfunction createListThumbnail($event, $overwrite=false) {\n  # Load the frame with the highest score to use as a thumbnail\n  if ( !($frame = dbFetchOne('SELECT * FROM Frames WHERE EventId=? AND Score=? ORDER BY FrameId LIMIT 1', NULL, array($event['Id'], $event['MaxScore']) )) )\n    return false;\n\n  $frameId = $frame['FrameId'];\n\n  if ( ZM_WEB_LIST_THUMB_WIDTH ) {\n    $thumbWidth = ZM_WEB_LIST_THUMB_WIDTH;\n    $scale = (SCALE_BASE*ZM_WEB_LIST_THUMB_WIDTH)/$event['Width'];\n    $thumbHeight = reScale($event['Height'], $scale);\n  } elseif ( ZM_WEB_LIST_THUMB_HEIGHT ) {\n    $thumbHeight = ZM_WEB_LIST_THUMB_HEIGHT;\n    $scale = (SCALE_BASE*ZM_WEB_LIST_THUMB_HEIGHT)/$event['Height'];\n    $thumbWidth = reScale($event['Width'], $scale);\n  } else {\n    ZM\\Fatal('No thumbnail width or height specified, please check in Options->Web');\n  }\n\n  $imageData = getImageSrc($event, $frame, $scale, false, $overwrite);\n  if ( !$imageData ) {\n    return false;\n  }\n\n  $thumbData = $frame;\n  $thumbData['Path'] = $imageData['thumbPath'];\n  $thumbData['Width'] = (int)$thumbWidth;\n  $thumbData['Height'] = (int)$thumbHeight;\n\n  return $thumbData;\n}\n\nfunction createVideo($event, $format, $rate, $scale, $overwrite=false) {\n  $command = ZM_PATH_BIN.'/zmvideo.pl -e '.$event['Id'].' -f '.$format.' -r '.sprintf('%.2F', ($rate/RATE_BASE));\n  if ( preg_match('/\\d+x\\d+/', $scale) )\n    $command .= ' -S '.$scale;\n  else\n    if ( version_compare(phpversion(), '4.3.10', '>=') )\n      $command .= ' -s '.sprintf('%.2F', ($scale/SCALE_BASE));\n    else\n      $command .= ' -s '.sprintf('%.2f', ($scale/SCALE_BASE));\n  if ( $overwrite )\n    $command .= ' -o';\n  $command = escapeshellcmd($command);\n  $result = exec($command, $output, $status);\n  ZM\\Debug(\"generating Video $command: result($result outptu:(\".implode(\"\\n\", $output ).\" status($status\");\n  return $status ? '' : rtrim($result);\n}\n\n# This takes more than one scale amount, so it runs through each and alters dimension.\n# I can't imagine why you would want to do that.\nfunction reScale($dimension, $dummy) {\n  $new_dimension = $dimension;\n  for ( $i = 1; $i < func_num_args(); $i++ ) {\n    $scale = func_get_arg($i);\n    if ( !empty($scale) && ($scale != '0') && ($scale != 'auto') && ($scale != SCALE_BASE) )\n      $new_dimension = (int)(($new_dimension*$scale)/SCALE_BASE);\n  }\n  return $new_dimension;\n}\n\nfunction deScale($dimension, $dummy) {\n  $new_dimension = $dimension;\n  for ( $i = 1; $i < func_num_args(); $i++ ) {\n    $scale = func_get_arg($i);\n    if ( !empty($scale) && $scale != SCALE_BASE )\n      $new_dimension = (int)(($new_dimension*SCALE_BASE)/$scale);\n  }\n  return $new_dimension;\n}\n\nfunction monitorLimitSql() {\n  global $user;\n  if ( !empty($user['MonitorIds']) )\n    $midSql = ' AND MonitorId IN ('.join(',', preg_split('/[\"\\'\\s]*,[\"\\'\\s]*/', $user['MonitorIds'])).')';\n  else\n    $midSql = '';\n  return $midSql;\n}\n\n\nfunction parseSort($saveToSession=false, $querySep='&amp;') {\n  global $sortQuery, $sortColumn, $sortOrder, $limitQuery; // Outputs\n  if ( isset($_REQUEST['filter']['Query']['sort_field']) ) { //Handle both new and legacy filter passing\n    $_REQUEST['sort_field'] = $_REQUEST['filter']['Query']['sort_field'];\n  }\n  if ( isset($_REQUEST['filter']['Query']['sort_asc']) ) {\n    $_REQUEST['sort_asc'] = $_REQUEST['filter']['Query']['sort_asc'];\n  }\n  if ( isset($_REQUEST['filter']['Query']['limit']) ) {\n    $_REQUEST['limit'] = $_REQUEST['filter']['Query']['limit'];\n  }\n  if ( empty($_REQUEST['sort_field']) ) {\n    $_REQUEST['sort_field'] = ZM_WEB_EVENT_SORT_FIELD;\n    $_REQUEST['sort_asc'] = (ZM_WEB_EVENT_SORT_ORDER == 'asc');\n  }\n  switch( $_REQUEST['sort_field'] ) {\n    case 'Id' :\n      $sortColumn = 'E.Id';\n      break;\n    case 'MonitorName' :\n      $sortColumn = 'M.Name';\n      break;\n    case 'Name' :\n      $sortColumn = 'E.Name';\n      break;\n    case 'Cause' :\n      $sortColumn = 'E.Cause';\n      break;\n    case 'DateTime' :\n      $sortColumn = 'E.StartDateTime';\n      $_REQUEST['sort_field'] = 'StartDateTime';\n      break;\n    case 'DiskSpace' :\n      $sortColumn = 'E.DiskSpace';\n      break;\n    case 'StartTime' :\n      # legacy\n      $_REQUEST['sort_field'] = 'StartDateTime';\n      $sortColumn = 'E.StartDateTime';\n      break;\n    case 'StartDateTime' :\n      $sortColumn = 'E.StartDateTime';\n      break;\n    case 'EndTime' :\n      #legacy\n      $_REQUEST['sort_field'] = 'EndDateTime';\n      $sortColumn = 'E.EndDateTime';\n      break;\n    case 'EndDateTime' :\n      $sortColumn = 'E.EndDateTime';\n      break;\n    case 'Length' :\n      $sortColumn = 'E.Length';\n      break;\n    case 'Frames' :\n      $sortColumn = 'E.Frames';\n      break;\n    case 'AlarmFrames' :\n      $sortColumn = 'E.AlarmFrames';\n      break;\n    case 'TotScore' :\n      $sortColumn = 'E.TotScore';\n      break;\n    case 'AvgScore' :\n      $sortColumn = 'E.AvgScore';\n      break;\n    case 'MaxScore' :\n      $sortColumn = 'E.MaxScore';\n      break;\n    case 'FramesFrameId' :\n      $sortColumn = 'F.FrameId';\n      break;\n    case 'FramesType' :\n      $sortColumn = 'F.Type';\n      break;\n    case 'FramesTimeStamp' :\n      $sortColumn = 'F.TimeStamp';\n      break;\n    case 'FramesDelta' :\n      $sortColumn = 'F.Delta';\n      break;\n    case 'FramesScore' :\n      $sortColumn = 'F.Score';\n      break;\n    default:\n      $sortColumn = 'E.StartDateTime';\n      break;\n  }\n  if ( !isset($_REQUEST['sort_asc']) )\n    $_REQUEST['sort_asc'] = 0;\n  $sortOrder = $_REQUEST['sort_asc'] ? 'asc' : 'desc';\n  $sortQuery = $querySep.'sort_field='.validHtmlStr($_REQUEST['sort_field']).$querySep.'sort_asc='.validHtmlStr($_REQUEST['sort_asc']);\n  if ( !isset($_REQUEST['limit']) )\n    $_REQUEST['limit'] = '';\n  if ( $saveToSession ) {\n    $_SESSION['sort_field'] = validHtmlStr($_REQUEST['sort_field']);\n    $_SESSION['sort_asc'] = validHtmlStr($_REQUEST['sort_asc']);\n  }\n  if ($_REQUEST['limit'] != '') {\n    $limitQuery = '&limit='.validInt($_REQUEST['limit']);\n  }\n}\n\n# Historically this function has just modified the passed in filter array.\n# This would normally be $_REQUEST['filter'];  We don't like modifying \n# request parameters. For now we will keep this behaviour, but note that we \n# now return the resulting array and other code should by modified to use that.\n#\n# Please note that I will be removing the savetosession code as well.\nfunction parseFilter(&$filter, $saveToSession=false, $querySep='&amp;') {\n\n  $Filter = ZM\\Filter::parse($filter, $querySep);\n\n  $filter['sql'] = $Filter->sql();\n  $filter['querystring'] = $Filter->querystring('filter', $querySep);\n  $filter['hidden_fields'] = $Filter->hidden_fields();\n  $filter['pre_sql_conditions'] = $Filter->pre_sql_conditions();\n  $filter['post_sql_conditions'] = $Filter->post_sql_conditions();\n\n  if ( $filter['sql'] )\n    $filter['sql'] = ' AND ( '.$filter['sql'].' )';\n\n  #if ( 0 ) {\n    #// ICON I feel like these should be here, but not yet\n  #if ( isset($filter['Query']['sort_field']) ) {\n    #$filter['sql'] .= ' ORDER BY ' . $filter['Query']['sort_field'] . (\n      #( $filter['Query']['sort_asc'] ? ' ASC' : ' DESC' ) );\n  #}\n  #}\n  return $filter;\n} // end function parseFilter(&$filter, $saveToSession=false, $querySep='&amp;')\n\n// Please note that the filter is passed in by copy, so you need to use the return value from this function.\n//\nfunction addFilterTerm($filter, $position, $term=false) {\n  if ( $position < 0 )\n    $position = 0;\n\n  if ( !isset($filter['Query']['terms']) )\n    $filter['Query']['terms'] = array();\n  else if ( $position > count($filter['Query']['terms']) )\n    $position = count($filter['Query']['terms']);\n\n  if ( $term && $position == 0 )\n    unset($term['cnj']);\n  array_splice($filter['Query']['terms'], $position, 0, array($term ? $term : array()));\n\n  return $filter;\n}\n\nfunction delFilterTerm($filter, $position) {\n  if ( $position < 0 )\n    $position = 0;\n  else if ( $position >= count($filter['Query']['terms']) )\n    $position = count($filter['Query']['terms']);\n  array_splice($filter['Query']['terms'], $position, 1);\n\n  return $filter;\n}\n\nfunction getPagination($pages, $page, $maxShortcuts, $query, $querySep='&amp;') {\n  global $view;\n\n  $pageText = '';\n  if ( $pages > 1 ) {\n    if ( $page ) {\n      if ( $page < 0 )\n        $page = 1;\n      if ( $page > $pages )\n        $page = $pages;\n\n      if ( $page > 1 ) {\n        if ( false && $page > 2 ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page=1'.$query.'\">&lt;&lt;</a>';\n        }\n        $pageText .= '<a href=\"?view='.$view.$querySep.'page='.($page-1).$query.'\">&lt;</a>';\n\n        $newPages = array();\n        $pagesUsed = array();\n        $lo_exp = max(2,log($page-1)/log($maxShortcuts));\n        for ( $i = 0; $i < $maxShortcuts; $i++ ) {\n          $newPage = round($page-pow($lo_exp,$i));\n          if ( isset($pagesUsed[$newPage]) )\n            continue;\n          if ( $newPage <= 1 )\n            break;\n          $pagesUsed[$newPage] = true;\n          array_unshift($newPages, $newPage);\n        }\n        if ( !isset($pagesUsed[1]) )\n          array_unshift( $newPages, 1 );\n\n        foreach ( $newPages as $newPage ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page='.$newPage.$query.'\">'.$newPage.'</a>&nbsp;';\n        }\n      } # end if page > 1\n\n      $pageText .= '-&nbsp;'.$page.'&nbsp;-';\n      if ( $page < $pages ) {\n        $newPages = array();\n        $pagesUsed = array();\n        $hi_exp = max(2,log($pages-$page)/log($maxShortcuts));\n        for ( $i = 0; $i < $maxShortcuts; $i++ ) {\n          $newPage = round($page+pow($hi_exp,$i));\n          if ( isset($pagesUsed[$newPage]) )\n            continue;\n          if ( $newPage > $pages )\n            break;\n          $pagesUsed[$newPage] = true;\n          array_push($newPages, $newPage);\n        }\n        if ( !isset($pagesUsed[$pages]) )\n          array_push($newPages, $pages);\n\n        foreach ( $newPages as $newPage ) {\n          $pageText .= '&nbsp;<a href=\"?view='.$view.$querySep.'page='.$newPage.$query.'\">'.$newPage.'</a>';\n        }\n        $pageText .= '<a href=\"?view='.$view.$querySep.'page='.($page+1).$query.'\">&gt;</a>';\n        if ( false && $page < ($pages-1) ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page='.$pages.$query.'\">&gt;&gt;</a>';\n        }\n      } # end if $page < $pages\n    }\n  }\n  return $pageText;\n}\n\nfunction sortHeader($field, $querySep='&amp;') {\n  global $view;\n  return implode($querySep, array(\n    '?view='.$view,\n    'page=1'.((isset($_REQUEST['filter']) and isset($_REQUEST['filter']['query'])) ? $_REQUEST['filter']['query'] : ''),\n    'sort_field='.$field,\n    'sort_asc='.( ( isset($_REQUEST['sort_field']) and ( $_REQUEST['sort_field'] == $field ) ) ? !$_REQUEST['sort_asc'] : 0),\n    'limit='.(isset($_REQUEST['limit']) ? validInt($_REQUEST['limit']) : ''),\n    (isset($_REQUEST['eid']) ? 'eid='.$_REQUEST['eid'] : '' ),\n  ));\n}\n\nfunction sortTag($field) {\n  if ( isset($_REQUEST['sort_field']) ) {\n    if ( $_REQUEST['sort_field'] == $field )\n      if ( $_REQUEST['sort_asc'] )\n        return '(^)';\n      else\n        return '(v)';\n  }\n  return false;\n}\n\nfunction getLoad() {\n  $load = sys_getloadavg();\n  return $load[0];\n}\n\nfunction getDiskPercent($path = ZM_DIR_EVENTS) {\n  $total = disk_total_space($path);\n  if ( $total === false ) {\n    ZM\\Error('disk_total_space returned false. Verify the web account user has access to ' . $path);\n    return 0;\n  } elseif ( $total == 0 ) {\n    ZM\\Error('disk_total_space indicates the following path has a filesystem size of zero bytes ' . $path);\n    return 100;\n  }\n  $free = disk_free_space($path);\n  if ( $free === false ) {\n    ZM\\Error('disk_free_space returned false. Verify the web account user has access to ' . $path);\n  }\n  $space = round((($total - $free) / $total) * 100);\n  return $space;\n}\n\nfunction getDiskBlocks($path = ZM_DIR_EVENTS) {\n  $df = shell_exec('df '.escapeshellarg($path));\n  $space = -1;\n  if ( preg_match('/\\s(\\d+)\\s+\\d+\\s+\\d+%/ms', $df, $matches) )\n    $space = $matches[1];\n  return $space;\n}\n\nfunction systemStats() {\n\n  $load = getLoad();\n  $diskPercent = getDiskPercent();\n  $pathMapPercent = getDiskPercent(ZM_PATH_MAP);\n  $cpus = getcpus();\n\n  $normalized_load = $load / $cpus;\n\n  # Colorize the system load stat\n  if ( $normalized_load <= 0.75 ) {\n    $htmlLoad = $load;\n  } else if ( $normalized_load <= 0.9 ) {\n    $htmlLoad = '<span class=\"warning\">'.$load.'</span>';\n  } else if ( $normalized_load <= 1.1 ) {\n    $htmlLoad = '<span class=\"error\">'.$load.'</span>';\n  } else {\n    $htmlLoad = '<span class=\"critical\">'.$load.'</span>';\n  }\n\n  # Colorize the disk space stat\n  if ( $diskPercent < 98 ) {\n    $htmlDiskPercent = $diskPercent.'%';\n  } else if ( $diskPercent <= 99 ) {\n    $htmlDiskPercent = '<span class=\"warning\">'.$diskPercent.'%</span>';\n  } else {\n    $htmlDiskPercent = '<span class=\"error\">'.$diskPercent.'%</span>';\n  }\n\n  # Colorize the PATH_MAP (usually /dev/shm) stat\n  if ( $pathMapPercent < 90 ) {\n    if ( disk_free_space(ZM_PATH_MAP) > 209715200 ) { # have to always have at least 200MiB free\n      $htmlPathMapPercent = $pathMapPercent.'%';\n    } else {\n      $htmlPathMapPercent = '<span class=\"warning\">'.$pathMapPercent.'%</span>';\n    }\n  } else if ( $pathMapPercent < 100 ) {\n    $htmlPathMapPercent = '<span class=\"warning\">'.$pathMapPercent.'%</span>';\n  } else {\n    $htmlPathMapPercent = '<span class=\"critical\">'.$pathMapPercent.'%</span>';\n  }\n\n  $htmlString = translate('Load').': '.$htmlLoad.' - '.translate('Disk').': '.$htmlDiskPercent.' - '.ZM_PATH_MAP.': '.$htmlPathMapPercent;\n\n  return $htmlString;\n}\n\nfunction getcpus() {\n\n  if ( is_readable('/proc/cpuinfo') ) { # Works on Linux\n    preg_match_all('/^processor/m', file_get_contents('/proc/cpuinfo'), $matches);\n    $num_cpus = count($matches[0]);\n  } else { # Works on BSD\n    $matches = explode(':', shell_exec('sysctl hw.ncpu'));\n    $num_cpus = trim($matches[1]);\n  }\n\n  return $num_cpus;\n}\n\n// Function to fix a problem whereby the built in PHP session handling\n// features want to put the sid as a hidden field after the form or\n// fieldset tag, neither of which will work with strict XHTML Basic.\nfunction sidField() {\n  if ( SID ) {\n    list($sessname, $sessid) = explode('=', SID);\n?>\n    <input type=\"hidden\" name=\"<?php echo $sessname ?>\" value=\"<?php echo $sessid ?>\"/>\n<?php\n  }\n}\n\nfunction verNum($version) {\n  $vNum = '';\n  $maxFields = 3;\n  $vFields = explode('.', $version);\n  array_splice($vFields, $maxFields);\n  while ( count($vFields) < $maxFields ) {\n    $vFields[] = 0;\n  }\n  foreach ( $vFields as $vField ) {\n    $vField = sprintf('%02d', $vField);\n    while ( strlen($vField) < 2 ) {\n      $vField = '0'.$vField;\n    }\n    $vNum .= $vField;\n  }\n  return $vNum;\n}\n\nfunction fixSequences() {\n  $sequence = 1;\n  $sql = 'SELECT * FROM Monitors ORDER BY Sequence ASC, Id ASC';\n  foreach( dbFetchAll($sql) as $monitor ) {\n    if ( $monitor['Sequence'] != $sequence ) {\n      dbQuery('UPDATE Monitors SET Sequence=? WHERE Id=?', array($sequence, $monitor['Id']));\n    }\n    $sequence++;\n  }\n}\n\nfunction firstSet() {\n  foreach ( func_get_args() as $arg ) {\n    if ( !empty($arg) )\n      return $arg;\n  }\n}\n\nfunction linesIntersect($line1, $line2) {\n  global $debug;\n\n  $min_x1 = min($line1[0]['x'], $line1[1]['x']);\n  $max_x1 = max($line1[0]['x'], $line1[1]['x']);\n  $min_x2 = min($line2[0]['x'], $line2[1]['x']);\n  $max_x2 = max($line2[0]['x'], $line2[1]['x']);\n  $min_y1 = min($line1[0]['y'], $line1[1]['y']);\n  $max_y1 = max($line1[0]['y'], $line1[1]['y']);\n  $min_y2 = min($line2[0]['y'], $line2[1]['y']);\n  $max_y2 = max($line2[0]['y'], $line2[1]['y']);\n\n  // Checking if bounding boxes intersect\n  if ( $max_x1 < $min_x2 || $max_x2 < $min_x1 ||$max_y1 < $min_y2 || $max_y2 < $min_y1 ) {\n    if ( $debug ) echo 'Not intersecting, out of bounds<br>';\n    return false;\n  }\n\n  $dx1 = $line1[1]['x'] - $line1[0]['x'];\n  $dy1 = $line1[1]['y'] - $line1[0]['y'];\n  $dx2 = $line2[1]['x'] - $line2[0]['x'];\n  $dy2 = $line2[1]['y'] - $line2[0]['y'];\n\n  if ( $dx1 ) {\n    $m1 = $dy1/$dx1;\n    $b1 = $line1[0]['y'] - ($m1 * $line1[0]['x']);\n  } else {\n    $b1 = $line1[0]['y'];\n  }\n  if ( $dx2 ) {\n    $m2 = $dy2/$dx2;\n    $b2 = $line2[0]['y'] - ($m2 * $line2[0]['x']);\n  } else {\n    $b2 = $line2[0]['y'];\n  }\n\n  if ( $dx1 && $dx2 ) { // Both not vertical\n    if ( $m1 != $m2 ) { // Not parallel or colinear\n      $x = ( $b2 - $b1 ) / ( $m1 - $m2 );\n\n      if ( $x >= $min_x1 && $x <= $max_x1 && $x >= $min_x2 && $x <= $max_x2 ) {\n        if ( $debug ) echo \"Intersecting, at x $x<br>\";\n        return true;\n      } else {\n        if ( $debug ) echo \"Not intersecting, out of range at x $x<br>\";\n        return false;\n      }\n    } elseif ( $b1 == $b2 ) {\n      // Colinear, must overlap due to box check, intersect?\n      if ( $debug ) echo 'Intersecting, colinear<br>';\n      return true;\n    } else {\n      // Parallel\n      if ( $debug ) echo 'Not intersecting, parallel<br>';\n      return false;\n    }\n  } elseif ( !$dx1 ) { // Line 1 is vertical\n    $y = ( $m2 * $line1[0]['x'] ) * $b2;\n    if ( $y >= $min_y1 && $y <= $max_y1 ) {\n      if ( $debug ) echo \"Intersecting, at y $y<br>\";\n      return true;\n    } else {\n      if ( $debug ) echo \"Not intersecting, out of range at y $y<br>\";\n      return false;\n    }\n  } elseif ( !$dx2 ) { // Line 2 is vertical\n    $y = ( $m1 * $line2[0]['x'] ) * $b1;\n    if ( $y >= $min_y2 && $y <= $max_y2 ) {\n      if ( $debug ) echo \"Intersecting, at y $y<br>\";\n      return true;\n    } else {\n      if ( $debug ) echo \"Not intersecting, out of range at y $y<br>\";\n      return false;\n    }\n  } else { // Both lines are vertical\n    if ( $line1[0]['x'] == $line2[0]['x'] ) {\n      // Colinear, must overlap due to box check, intersect?\n      if ( $debug ) echo 'Intersecting, vertical, colinear<br>';\n      return true;\n    } else {\n      // Parallel\n      if ( $debug ) echo 'Not intersecting, vertical, parallel<br>';\n      return false;\n    }\n  }\n  if ( $debug ) echo 'Whoops, unexpected scenario<br>';\n  return false;\n}\n\nfunction isSelfIntersecting($points) {\n  global $debug;\n\n  $n_coords = count($points);\n  $edges = array();\n  for ( $j = 0, $i = $n_coords-1; $j < $n_coords; $i = $j++ ) {\n    $edges[] = array( $points[$i], $points[$j] );\n  }\n\n  for ( $i = 0; $i <= ($n_coords-2); $i++ ) {\n    for ( $j = $i+2; $j < $n_coords+min(0,$i-1); $j++ ) {\n      if ( $debug ) echo \"Checking $i and $j<br>\";\n      if ( linesIntersect($edges[$i], $edges[$j]) ) {\n        if ( $debug ) echo \"Lines $i and $j intersect<br>\";\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction getPolyCentre($points, $area=0) {\n  $cx = 0.0;\n  $cy = 0.0;\n  if ( !$area )\n    $area = getPolyArea($points);\n  for ( $i = 0, $j = count($points)-1; $i < count($points); $j = $i++ ) {\n    $ct = ($points[$i]['x'] * $points[$j]['y']) - ($points[$j]['x'] * $points[$i]['y']);\n    $cx += ($points[$i]['x'] + $points[$j]['x']) * $ct;\n    $cy += ($points[$i]['y'] + $points[$j]['y']) * $ct;\n  }\n  $cx = intval(round(abs($cx/(6.0*$area))));\n  $cy = intval(round(abs($cy/(6.0*$area))));\n  return array('x'=>$cx, 'y'=>$cy);\n}\n\nfunction _CompareXY($a, $b) {\n  if ( $a['min_y'] == $b['min_y'] )\n    return intval($a['min_x'] - $b['min_x']);\n  else\n    return intval($a['min_y'] - $b['min_y']);\n}\n\nfunction _CompareX($a, $b) {\n  return intval($a['min_x'] - $b['min_x']);\n}\n\nfunction getPolyArea($points) {\n  global $debug;\n\n  $n_coords = count($points);\n  $global_edges = array();\n  for ( $j = 0, $i = $n_coords-1; $j < $n_coords; $i = $j++ ) {\n    $x1 = $points[$i]['x'];\n    $x2 = $points[$j]['x'];\n    $y1 = $points[$i]['y'];\n    $y2 = $points[$j]['y'];\n\n    //printf( \"x1:%d,y1:%d x2:%d,y2:%d\\n\", x1, y1, x2, y2 );\n    if ( $y1 == $y2 )\n      continue;\n\n    $dx = $x2 - $x1;\n    $dy = $y2 - $y1;\n\n    $global_edges[] = array(\n        'min_y' => $y1<$y2?$y1:$y2,\n        'max_y' => ($y1<$y2?$y2:$y1)+1,\n        'min_x' => $y1<$y2?$x1:$x2,\n        '_1_m' => $dx/$dy,\n        );\n  }\n\n  usort($global_edges, '_CompareXY');\n\n  if ( $debug ) {\n    for ( $i = 0; $i < count($global_edges); $i++ ) {\n      printf('%d: min_y: %d, max_y:%d, min_x:%.2f, 1/m:%.2f<br>',\n        $i,\n        $global_edges[$i]['min_y'],\n        $global_edges[$i]['max_y'],\n        $global_edges[$i]['min_x'],\n        $global_edges[$i]['_1_m']);\n    }\n  }\n\n  $area = 0.0;\n  $active_edges = array();\n  $y = $global_edges[0]['min_y'];\n  do {\n    for ( $i = 0; $i < count($global_edges); $i++ ) {\n      if ( $global_edges[$i]['min_y'] == $y ) {\n        if ( $debug ) printf('Moving global edge<br>');\n        $active_edges[] = $global_edges[$i];\n        array_splice($global_edges, $i, 1);\n        $i--;\n      } else {\n        break;\n      }\n    }\n    usort($active_edges, '_CompareX');\n    if ( $debug ) {\n      for ( $i = 0; $i < count($active_edges); $i++ ) {\n        printf('%d - %d: min_y: %d, max_y:%d, min_x:%.2f, 1/m:%.2f<br>',\n          $y, $i,\n          $active_edges[$i]['min_y'],\n          $active_edges[$i]['max_y'],\n          $active_edges[$i]['min_x'],\n          $active_edges[$i]['_1_m']);\n      }\n    }\n    $last_x = 0;\n    $row_area = 0;\n    $parity = false;\n    for ( $i = 0; $i < count($active_edges); $i++ ) {\n      $x = intval(round($active_edges[$i]['min_x']));\n      if ( $parity ) {\n        $row_area += ($x - $last_x)+1;\n        $area += $row_area;\n      }\n      if ( $active_edges[$i]['max_y'] != $y )\n        $parity = !$parity;\n      $last_x = $x;\n    }\n    if ( $debug ) printf('%d: Area:%d<br>', $y, $row_area);\n    $y++;\n    for ( $i = 0; $i < count($active_edges); $i++ ) {\n      if ( $y >= $active_edges[$i]['max_y'] ) { // Or >= as per sheets\n        if ( $debug ) printf('Deleting active_edge<br>');\n        array_splice($active_edges, $i, 1);\n        $i--;\n      } else {\n        $active_edges[$i]['min_x'] += $active_edges[$i]['_1_m'];\n      }\n    }\n  } while ( count($global_edges) || count($active_edges) );\n  if ( $debug ) printf('Area:%d<br>', $area);\n  return $area;\n}\n\nfunction getPolyAreaOld($points) {\n  $area = 0.0;\n  $edge = 0.0;\n  for ( $i = 0, $j = count($points)-1; $i < count($points); $j = $i++ ) {\n    $x_diff = ($points[$i]['x'] - $points[$j]['x']);\n    $y_diff = ($points[$i]['y'] - $points[$j]['y']);\n    $y_sum = ($points[$i]['y'] + $points[$j]['y']);\n    $trap_edge = sqrt(pow(abs($x_diff)+1,2) + pow(abs($y_diff)+1,2) );\n    $edge += $trap_edge;\n    $trap_area = ($x_diff * $y_sum );\n    $area += $trap_area;\n    printf('%d->%d, %d-%d=%.2f, %d+%d=%.2f(%.2f), %.2f, %.2f<br>',\n      $i, $j,\n      $points[$i]['x'], $points[$j]['x'],\n      $x_diff,\n      $points[$i]['y'], $points[$j]['y'],\n      $y_sum, $y_diff, $trap_area, $trap_edge);\n  }\n  $edge = intval(round(abs($edge)));\n  $area = intval(round((abs($area)+$edge)/2));\n  echo \"E:$edge<br>\";\n  echo \"A:$area<br>\";\n  return $area;\n}\n\nfunction mapCoords($a) {\n  return $a['x'].','.$a['y'];\n}\n\nfunction pointsToCoords($points) {\n  return join(' ', array_map('mapCoords', $points));\n}\n\nfunction coordsToPoints($coords) {\n  $points = array();\n  if ( preg_match_all('/(\\d+,\\d+)+/', $coords, $matches) ) {\n    for ( $i = 0; $i < count($matches[1]); $i++ ) {\n      if ( preg_match('/(\\d+),(\\d+)/', $matches[1][$i], $cmatches) ) {\n        $points[] = array('x'=>$cmatches[1], 'y'=>$cmatches[2]);\n      } else {\n        echo('Bogus coordinates ('.$matches[$i].')');\n        return false;\n      }\n    }\n  } else {\n    echo('Bogus coordinate string '.$coords);\n    return false;\n  }\n  return $points;\n}\n\nfunction limitPoints(&$points, $min_x, $min_y, $max_x, $max_y) {\n  foreach ( $points as &$point ) {\n    if ( $point['x'] < $min_x ) {\n      ZM\\Debug('Limiting point x'.$point['x'].' to min_x '.$min_x);\n      $point['x'] = $min_x;\n    } else if ( $point['x'] > $max_x ) {\n      ZM\\Debug('Limiting point x'.$point['x'].' to max_x '.$max_x);\n      $point['x'] = $max_x;\n    }\n    if ( $point['y'] < $min_y ) {\n      ZM\\Debug('Limiting point y'.$point['y'].' to min_y '.$min_y);\n      $point['y'] = $min_y;\n    } else if ( $point['y'] > $max_y ) {\n      ZM\\Debug('Limiting point y'.$point['y'].' to max_y '.$max_y);\n      $point['y'] = $max_y;\n    }\n  } // end foreach point\n} // end function limitPoints( $points, $min_x, $min_y, $max_x, $max_y )\n\nfunction scalePoints(&$points, $scale) {\n  foreach ( $points as &$point ) {\n    $point['x'] = reScale($point['x'], $scale);\n    $point['y'] = reScale($point['y'], $scale);\n  }\n}\n\nfunction getLanguages() {\n  $langs = array();\n  foreach ( glob('lang/*_*.php') as $file ) {\n    preg_match('/([^\\/]+_.+)\\.php/', $file, $matches);\n    $langs[$matches[1]] = $matches[1];\n  }\n  return $langs;\n}\n\nfunction trimString($string, $length) {\n  return preg_replace('/^(.{'.$length.',}?)\\b.*$/', '\\\\1&hellip;', $string);\n}\n\nfunction monitorIdsToNames($ids) {\n  global $mITN_monitors;\n  if ( !$mITN_monitors ) {\n    $sql = 'SELECT Id, Name FROM Monitors';\n    foreach ( dbFetchAll($sql) as $monitor ) {\n      $mITN_monitors[$monitor['Id']] = $monitor;\n    }\n  }\n  $names = array();\n  if ( ! is_array($ids) ) {\n    $ids = preg_split('/\\s*,\\s*/', $ids);\n  }\n  foreach ( $ids as $id ) {\n    if ( visibleMonitor($id) ) {\n      if ( isset($mITN_monitors[$id]) ) {\n        $names[] = $mITN_monitors[$id]['Name'];\n      }\n    }\n  }\n  $name_string = join(', ', $names);\n  return $name_string;\n}\n\nfunction initX10Status() {\n  global $x10_status;\n\n  if ( !isset($x10_status) ) {\n    $socket = socket_create(AF_UNIX, SOCK_STREAM, 0);\n    if ( $socket < 0 ) {\n      ZM\\Fatal('socket_create() failed: '.socket_strerror($socket));\n    }\n    $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';\n    if ( @socket_connect($socket, $sock_file) ) {\n      $command = 'status';\n      if ( !socket_write($socket, $command) ) {\n        ZM\\Fatal('Can\\'t write to control socket: '.socket_strerror(socket_last_error($socket)));\n      }\n      socket_shutdown($socket, 1);\n      $x10Output = '';\n      while ( $x10Response = socket_read($socket, 256) ) {\n        $x10Output .= $x10Response;\n      }\n      socket_close($socket);\n    } else {\n      // Can't connect so use script\n      $command = ZM_PATH_BIN.'/zmx10.pl --command status';\n      //$command .= \" 2>/dev/null >&- <&- >/dev/null\";\n\n      $x10Output = exec(escapeshellcmd($command));\n    }\n    foreach ( explode(\"\\n\", $x10Output) as $x10Response ) {\n      if ( preg_match('/^(\\d+)\\s+(.+)$/', $x10Response, $matches) ) {\n        $x10_status[$matches[1]] = $matches[2];\n      }\n    }\n  }\n}\n\nfunction getDeviceStatusX10($key) {\n  global $x10_status;\n\n  initX10Status();\n\n  if ( empty($x10_status[$key]) || !($status = $x10_status[$key]) )\n    $status = 'unknown';\n  return $status;\n}\n\nfunction setDeviceStatusX10($key, $status) {\n  $socket = socket_create(AF_UNIX, SOCK_STREAM, 0);\n  if ( $socket < 0 ) {\n    ZM\\Fatal('socket_create() failed: '.socket_strerror($socket));\n  }\n  $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';\n  if ( @socket_connect($socket, $sock_file) ) {\n    $command = \"$status;$key\";\n    if ( !socket_write($socket, $command) ) {\n      ZM\\Fatal('Can\\'t write to control socket: '.socket_strerror(socket_last_error($socket)));\n    }\n    socket_shutdown($socket, 1);\n    $x10Response = socket_read($socket, 256);\n    socket_close($socket);\n  } else {\n    // Can't connect so use script\n    $command = ZM_PATH_BIN.'/zmx10.pl --command '.escapeshellarg($status);\n    $command .= ' --unit-code '.escapeshellarg( $key );\n    //$command .= \" 2>/dev/null >&- <&- >/dev/null\";\n    $x10Response = exec($command);\n  }\n  if ( preg_match('/^'.$key.'\\s+(.*)/', $x10Response, $matches) )\n    $status = $matches[1];\n  else\n    $status = 'unknown';\n  return $status;\n}\n\nfunction logState() {\n  $state = 'ok';\n\n  $levelCounts = array(\n      ZM\\Logger::FATAL => array( ZM_LOG_ALERT_FAT_COUNT, ZM_LOG_ALARM_FAT_COUNT ),\n      ZM\\Logger::ERROR => array( ZM_LOG_ALERT_ERR_COUNT, ZM_LOG_ALARM_ERR_COUNT ),\n      ZM\\Logger::WARNING => array( ZM_LOG_ALERT_WAR_COUNT, ZM_LOG_ALARM_WAR_COUNT ),\n      );\n\n  # This is an expensive request, as it has to hit every row of the Logs Table\n  $sql = 'SELECT Level, COUNT(Level) AS LevelCount FROM Logs WHERE Level < '.ZM\\Logger::INFO.' AND TimeKey > unix_timestamp(now() - interval '.ZM_LOG_CHECK_PERIOD.' second) GROUP BY Level ORDER BY Level ASC';\n  $counts = dbFetchAll($sql);\n  if ( $counts ) {\n    foreach ( $counts as $count ) {\n      if ( $count['Level'] <= ZM\\Logger::PANIC )\n        $count['Level'] = ZM\\Logger::FATAL;\n      if ( !($levelCount = $levelCounts[$count['Level']]) ) {\n        ZM\\Error('Unexpected Log level '.$count['Level']);\n        next;\n      }\n      if ( $levelCount[1] && $count['LevelCount'] >= $levelCount[1] ) {\n        $state = 'alarm';\n        break;\n      } elseif ( $levelCount[0] && $count['LevelCount'] >= $levelCount[0] ) {\n        $state = 'alert';\n      }\n    }\n  }\n  return $state;\n}\n\nfunction isVector(&$array) {\n  $next_key = 0;\n  foreach ( array_keys($array) as $key ) {\n    if ( !is_int($key) )\n      return false;\n    if ( $key != $next_key++ )\n      return false;\n  }\n  return true;\n}\n\nfunction checkJsonError($value) {\n  if ( function_exists('json_last_error') ) {\n    $value = var_export($value, true);\n    switch ( json_last_error() ) {\n      case JSON_ERROR_DEPTH :\n        ZM\\Error(\"Unable to decode JSON string '$value', maximum stack depth exceeded\");\n        break;\n      case JSON_ERROR_CTRL_CHAR :\n        ZM\\Error(\"Unable to decode JSON string '$value', unexpected control character found\");\n        break;\n      case JSON_ERROR_STATE_MISMATCH :\n        ZM\\Error(\"Unable to decode JSON string '$value', invalid or malformed JSON\");\n        break;\n      case JSON_ERROR_SYNTAX :\n        ZM\\Error(\"Unable to decode JSON string '$value', syntax error\");\n        break;\n      default :\n        ZM\\Error(\"Unable to decode JSON string '$value', unexpected error \".json_last_error());\n        break;\n      case JSON_ERROR_NONE:\n        break;\n    }\n  }\n}\n\nfunction jsonEncode(&$value) {\n  if ( function_exists('json_encode') ) {\n    $string = json_encode( $value );\n    checkJsonError($value);\n    return $string;\n  }\n\n  switch ( gettype($value) ) {\n    case 'double':\n    case 'integer':\n      return $value;\n    case 'boolean':\n      return $value ? 'true' : 'false';\n    case 'string':\n      return '\"'.preg_replace(\"/\\r?\\n/\", '\\\\n', addcslashes($value,'\"\\\\/')).'\"';\n    case 'NULL':\n      return 'null';\n    case 'object':\n      return '\"Object '.addcslashes(get_class($value),'\"\\\\/').'\"';\n    case 'array':\n      if ( isVector( $value ) )\n        return '['.join(',', array_map('jsonEncode', $value)).']';\n      else {\n        $result = '{';\n        foreach ($value as $subkey => $subvalue ) {\n          if ( $result != '{' )\n            $result .= ',';\n          $result .= '\"'.$subkey.'\":'.jsonEncode($subvalue);\n        }\n        return $result.'}';\n      }\n    default:\n      return '\"'.addcslashes(gettype($value),'\"\\\\/').'\"';\n  }\n}\n\nfunction jsonDecode($value) {\n  if ( function_exists('json_decode') ) {\n    $object = json_decode($value, true);\n    checkJsonError($value);\n    return $object;\n  }\n\n  $comment = false;\n  $unescape = false;\n  $out = '$result=';\n  for ( $i = 0; $i < strlen($value); $i++ ) {\n    if ( !$comment ) {\n      if ( ($value[$i] == '{') || ($value[$i] == '[') ) {\n        $out .= ' array(';\n      } else if ( ($value[$i] == '}') || ($value[$i] == ']') ) {\n        $out .= ')';\n      } else if ( $value[$i] == ':' ) {\n        $out .= '=>';\n      } else {\n        $out .= $value[$i];\n      }\n    } else if ( !$unescape ) {\n      if ( $value[$i] == '\\\\' )\n        $unescape = true;\n      else\n        $out .= $value[$i];\n    } else {\n      if ( $value[$i] != '/' )\n        $out .= '\\\\';\n      $out .= $value[$i];\n      $unescape = false;\n    }\n    if ( $value[$i] == '\"' ) {\n      $comment = !$comment;\n    }\n  }\n  eval($out.';');\n  return $result;\n}\n\ndefine('HTTP_STATUS_OK', 200);\ndefine('HTTP_STATUS_BAD_REQUEST', 400);\ndefine('HTTP_STATUS_FORBIDDEN', 403);\n\nfunction ajaxError($message, $code=HTTP_STATUS_OK) {\n  ZM\\Error($message);\n  if ( function_exists('ajaxCleanup') )\n    ajaxCleanup();\n  if ( $code == HTTP_STATUS_OK ) {\n    $response = array('result'=>'Error', 'message'=>$message);\n    header('Content-type: application/json');\n    exit(jsonEncode($response));\n  }\n  header(\"HTTP/1.0 $code $message\");\n  exit();\n}\n\nfunction ajaxResponse($result=false) {\n  if ( function_exists('ajaxCleanup') )\n    ajaxCleanup();\n  $response = array('result'=>'Ok');\n  if ( is_array($result) ) {\n    $response = array_merge($response, $result);\n  } else if ( !empty($result) ) {\n    $response['message'] = $result;\n  }\n  header('Content-type: application/json');\n  exit(jsonEncode($response));\n}\n\nfunction generateConnKey() {\n  return rand(1, 999999);\n}\n\nfunction detaintPath($path) {\n  // Remove any absolute paths, or relative ones that want to go up\n  do {\n    $path = str_replace('../', '', $path, $count);\n  } while($count);\n  $path = ltrim($path, '/');\n  return $path;\n}\n\nfunction cache_bust($file) {\n  # Use the last modified timestamp to create a link that gets a different filename\n  # To defeat caching.  Should probably use md5 hash\n  $parts = pathinfo($file);\n  global $css;\n  $dirname = str_replace('/', '_', $parts['dirname']);\n  $cacheFile = $dirname.'_'.$parts['filename'].'-'.$css.'-'.filemtime($file).'.'.$parts['extension'];\n  if ( file_exists(ZM_DIR_CACHE.'/'.$cacheFile) or symlink(ZM_PATH_WEB.'/'.$file, ZM_DIR_CACHE.'/'.$cacheFile) ) {\n    return 'cache/'.$cacheFile;\n  } else {\n    ZM\\Warning('Failed linking '.$file.' to '.$cacheFile);\n  }\n  return $file;\n}\n\nfunction getSkinFile($file) {\n  global $skinBase;\n  $skinFile = false;\n  foreach ( $skinBase as $skin ) {\n    $tempSkinFile = detaintPath('skins/'.$skin.'/'.$file);\n    if ( file_exists($tempSkinFile) )\n      $skinFile = $tempSkinFile;\n  }\n  return $skinFile;\n}\n\nfunction getSkinIncludes($file, $includeBase=false, $asOverride=false) {\n  global $skinBase;\n  $skinFile = false;\n  foreach ( $skinBase as $skin ) {\n    $tempSkinFile = detaintPath('skins/'.$skin.'/'.$file);\n    if ( file_exists($tempSkinFile) )\n      $skinFile = $tempSkinFile;\n  }\n  $includeFiles = array();\n  if ( $asOverride ) {\n    if ( $skinFile )\n      $includeFiles[] = $skinFile;\n    else if ( $includeBase )\n      $includeFiles[] = $file;\n  } else {\n    if ( $includeBase )\n      $includeFiles[] = $file;\n    if ( $skinFile )\n      $includeFiles[] = $skinFile;\n  }\n  return $includeFiles;\n}\n\nfunction requestVar($name, $default='') {\n  return isset($_REQUEST[$name]) ? validHtmlStr($_REQUEST[$name]) : $default;\n}\n\n// For numbers etc in javascript or tags etc\nfunction validInt($input) {\n  return preg_replace('/[^\\-\\d]/', '', $input);\n}\n\nfunction validCardinal($input) {\n  return preg_replace('/\\D/', '', $input);\n}\n\nfunction validNum( $input ) {\n  return preg_replace('/[^\\d.-]/', '', $input);\n}\n\n// For general strings\nfunction validStr($input) {\n  if (is_null($input)) return '';\n  return strip_tags($input);\n}\n\n// For strings in javascript or tags etc, expected to be in quotes so further quotes escaped rather than converted\nfunction validJsStr($input) {\n  if (is_null($input)) return '';\n  return strip_tags(addslashes($input));\n}\n\n// For general text in pages outside of tags or quotes so quotes converted to entities\nfunction validHtmlStr($input) {\n  if (is_null($input)) return '';\n  return htmlspecialchars($input, ENT_QUOTES);\n}\n\n/* options['width'] is the desired view width not necessarily the image width requested.\n * It can be % in which case we us it to set the scale\n * It can be px in which case we can use it to calculate the scale\n * Same width height.  If both are set we should calculate the smaller resulting scale\n */\nfunction getStreamHTML($monitor, $options = array()) {\n\n  if ( isset($options['scale']) and $options['scale'] != '' ) {\n    if ($options['scale'] != 'auto' && $options['scale'] != '0') {\n      #ZM\\Warning('Setting dimensions from scale:'.$options['scale']);\n      $options['width'] = reScale($monitor->ViewWidth(), $options['scale']).'px';\n      $options['height'] = reScale($monitor->ViewHeight(), $options['scale']).'px';\n    } else if ( ! ( isset($options['width']) or isset($options['height']) ) ) {\n      $options['width'] = '100%';\n      $options['height'] = 'auto';\n    }\n  } else {\n    $options['scale'] = 100;\n    # scale is empty or 100\n    # There may be a fixed width applied though, in which case we need to leave the height empty\n    if ( ! ( isset($options['width']) and $options['width'] ) ) {\n      # Havn't specified width.  If we specified height, then we should\n      # use a width that keeps the aspect ratio, otherwise no scaling, \n      # no dimensions, so assume the dimensions of the Monitor\n\n      if ( ! (isset($options['height']) and $options['height']) ) {\n        # If we havn't specified any scale or dimensions, then we must be using CSS to scale it in a dynamic way. Can't make any assumptions.\n        #$options['width'] = $monitor->ViewWidth().'px';\n        #$options['height'] = $monitor->ViewHeight().'px';\n      }\n    } else {\n      #ZM\\Warning(\"Have width \".$options['width']);\n      if ( preg_match('/^(\\d+)px$/', $options['width'], $matches) ) {\n        $scale = intval(100*$matches[1]/$monitor->ViewWidth());\n        #ZM\\Warning(\"Scale is $scale\");\n        if ( $scale < $options['scale'] )\n          $options['scale'] = $scale;\n      } else if ( preg_match('/^(\\d+)%$/', $options['width'], $matches) ) {\n        $scale = intval($matches[1]);\n        if ( $scale < $options['scale'] )\n          $options['scale'] = $scale;\n      } else {\n        ZM\\Warning('Invalid value for width: '.$options['width']);\n      }\n    }\n  }\n  if ( ! isset($options['mode'] ) ) {\n    $options['mode'] = 'stream';\n  }\n  if ( ! isset($options['width'] ) )\n    $options['width'] = 0;\n  if ( ! isset($options['height'] ) )\n    $options['height'] = 0;\n\n  $options['maxfps'] = ZM_WEB_VIDEO_MAXFPS;\n  if ( $monitor->StreamReplayBuffer() )\n    $options['buffer'] = $monitor->StreamReplayBuffer();\n  //Warning(\"width: \" . $options['width'] . ' height: ' . $options['height']. ' scale: ' . $options['scale'] );\n\n  if ( $monitor->Type() == 'WebSite' ) {\n    return getWebSiteUrl(\n      'liveStream'.$monitor->Id(), $monitor->Path(),\n      ( isset($options['width']) ? $options['width'] : NULL ),\n      ( isset($options['height']) ? $options['height'] : NULL ),\n      $monitor->Name()\n    );\n  //FIXME, the width and height of the image need to be scaled.\n  } else if ( ZM_WEB_STREAM_METHOD == 'mpeg' && ZM_MPEG_LIVE_FORMAT ) {\n    $streamSrc = $monitor->getStreamSrc( array(\n      'mode'   => 'mpeg',\n      'scale'  => (isset($options['scale'])?$options['scale']:100),\n      'bitrate'=> ZM_WEB_VIDEO_BITRATE,\n      'maxfps' => ZM_WEB_VIDEO_MAXFPS,\n      'format' => ZM_MPEG_LIVE_FORMAT\n    ) );\n    return getVideoStreamHTML( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], ZM_MPEG_LIVE_FORMAT, $monitor->Name() );\n  } else if ( $options['mode'] == 'stream' and canStream() ) {\n    $options['mode'] = 'jpeg';\n    $streamSrc = $monitor->getStreamSrc($options);\n\n    if ( canStreamNative() )\n      return getImageStreamHTML( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], $monitor->Name());\n    elseif ( canStreamApplet() )\n      // Helper, empty widths and heights really don't work.\n      return getHelperStream( 'liveStream'.$monitor->Id(), $streamSrc,\n          $options['width'] ? $options['width'] : $monitor->ViewWidth(),\n          $options['height'] ? $options['height'] : $monitor->ViewHeight(),\n          $monitor->Name());\n  } else {\n    if ( $options['mode'] == 'stream' ) {\n      ZM\\Info('The system has fallen back to single jpeg mode for streaming. Consider enabling Cambozola or upgrading the client browser.');\n    }\n    $options['mode'] = 'single';\n    $streamSrc = $monitor->getStreamSrc($options);\n    return getImageStill('liveStream'.$monitor->Id(), $streamSrc,\n      (isset($options['width']) ? $options['width'] : null),\n      (isset($options['height']) ? $options['height'] : null),\n      $monitor->Name());\n  }\n} // end function getStreamHTML\n\nfunction getStreamMode( ) {\n  $streamMode = '';\n  if ( (ZM_WEB_STREAM_METHOD == 'mpeg') && ZM_MPEG_LIVE_FORMAT ) {\n    $streamMode = 'mpeg';\n  } elseif ( canStream() ) {\n    $streamMode = 'jpeg';\n  } else {\n    $streamMode = 'single';\n    ZM\\Info('The system has fallen back to single jpeg mode for streaming. Consider enabling Cambozola or upgrading the client browser.');\n  }\n  return $streamMode;\n} // end function getStreamMode\n\nfunction folder_size($dir) {\n  $size = 0;\n  foreach (glob(rtrim($dir, '/').'/*', GLOB_NOSORT) as $each) {\n    $size += is_file($each) ? filesize($each) : folder_size($each);\n  }\n  return $size;\n} // end function folder_size\n\nfunction human_filesize($size, $precision = 2) {\n  if ($size === null) {\n    return 'null';\n  }\n  $units = array('B ','kB','MB','GB','TB','PB','EB','ZB','YB');\n  $step = 1024;\n  $i = 0;\n  while (($size / $step) > 0.9) {\n    $size = $size / $step;\n    $i++;\n  }\n  # The idea is that we can right align this and have the digits columns line up nicely.\n  return sprintf('%.'.$precision.'f', round($size, $precision)).$units[$i];\n}\n\nfunction csrf_startup() {\n  csrf_conf('rewrite-js', 'includes/csrf/csrf-magic.js');\n}\n\nfunction check_timezone() {\n  $now = new DateTime();\n\n  $sys_tzoffset = trim(shell_exec('date \"+%z\"'));\n  $php_tzoffset = trim($now->format('O'));\n  $mysql_tzoffset = trim(dbFetchOne(\n    'SELECT TIME_FORMAT(TIMEDIFF(NOW(), UTC_TIMESTAMP),\\'%H%i\\');',\n    'TIME_FORMAT(TIMEDIFF(NOW(), UTC_TIMESTAMP),\\'%H%i\\')'\n  ));\n\n  #Debug(\"System timezone offset determine to be: $sys_tzoffset,\\x20\n                 #PHP timezone offset determine to be: $php_tzoffset,\\x20\n                 #Mysql timezone offset determine to be: $mysql_tzoffset\n               #\");\n\n  if ( $sys_tzoffset != $php_tzoffset )\n    ZM\\Error(\"ZoneMinder is not configured properly: php's date.timezone $php_tzoffset does not match the system timezone $sys_tzoffset! Please check Options->System->Timezone.\");\n\n  if ( $sys_tzoffset != $mysql_tzoffset )\n    ZM\\Error('ZoneMinder is not configured properly: mysql\\'s timezone does not match the system timezone! Event lists will display incorrect times.');\n\n  if (!ini_get('date.timezone') || !date_default_timezone_set(ini_get('date.timezone')))\n    ZM\\Error('ZoneMinder is not configured properly: php\\'s date.timezone is not set to a valid timezone. Please check Options->System->Timezone');\n\n}\n\nfunction unparse_url($parsed_url, $substitutions = array() ) {\n  $fields = array('scheme','host','port','user','pass','path','query','fragment');\n\n  foreach ( $fields as $field ) {\n    if ( isset( $substitutions[$field] ) ) {\n      $parsed_url[$field] = $substitutions[$field];\n    }\n  }\n  $scheme   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';\n  $host     = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n  $port     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';\n  $user     = isset($parsed_url['user']) ? $parsed_url['user'] : '';\n  $pass     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : '';\n  $pass     = ($user || $pass) ? $pass.'@' : '';\n  $path     = isset($parsed_url['path']) ? $parsed_url['path'] : '';\n  $query    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';\n  $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';\n  return $scheme.$user.$pass.$host.$port.$path.$query.$fragment;\n}\n\n// PP - POST request handler for PHP which does not need extensions\n// credit: http://wezfurlong.org/blog/2006/nov/http-post-from-php-without-curl/\n\nfunction do_request($method, $url, $data=array(), $optional_headers = null) {\n  global $php_errormsg;\n\n  $params = array('http' => array(\n        'method' => $method,\n        'content' => $data\n        ));\n  if ( $optional_headers !== null ) {\n    $params['http']['header'] = $optional_headers;\n  }\n  $ctx = stream_context_create($params);\n  $fp = @fopen($url, 'rb', false, $ctx);\n  if ( !$fp ) {\n    throw new Exception(\"Problem with $url, $php_errormsg\");\n  }\n  $response = @stream_get_contents($fp);\n  if ( $response === false ) {\n    throw new Exception(\"Problem reading data from $url, $php_errormsg\");\n  }\n  return $response;\n}\n\nfunction do_post_request($url, $data, $optional_headers = null) {\n  $params = array('http' => array(\n        'method' => 'POST',\n        'content' => $data\n        ));\n  if ( $optional_headers !== null ) {\n    $params['http']['header'] = $optional_headers;\n  }\n  $ctx = stream_context_create($params);\n  $fp = @fopen($url, 'rb', false, $ctx);\n  if ( !$fp ) {\n    throw new Exception('Problem with '.$url.', '\n      .print_r(error_get_last(),true));\n  }\n  $response = @stream_get_contents($fp);\n  if ( $response === false ) {\n    throw new Exception('Problem reading data from '.$url.', data: '.print_r($params,true)\n      .print_r(error_get_last(),true));\n  }\n  return $response;\n}\n\n// The following works around php not being built with semaphore functions.\nif ( !function_exists('sem_get') ) {\n  function sem_get($key) {\n    return fopen(__FILE__ . '.sem.' . $key, 'w+');\n  }\n  function sem_acquire($sem_id) {\n    return flock($sem_id, LOCK_EX);\n  }\n  function sem_release($sem_id) {\n    return flock($sem_id, LOCK_UN);\n  }\n}\n\nif ( !function_exists('ftok') ) {\n  function ftok($filename = '', $proj = '') {\n    if ( empty($filename) || !file_exists($filename) ) {\n      return -1;\n    } else {\n      $filename = $filename . (string) $proj;\n      for($key = array(); sizeof($key) < strlen($filename); $key[] = ord(substr($filename, sizeof($key), 1)));\n      return dechex(array_sum($key));\n    }\n  }\n}\n\nfunction getAffectedIds( $name ) {\n  $names = $name.'s';\n  $ids = array();\n\tif ( isset($_REQUEST[$names]) ) {\n\t\tif ( is_array($_REQUEST[$names]) ) {\n\t\t\t$ids = $_REQUEST[$names];\n\t\t} else {\n\t\t\t$ids = array($_REQUEST[$names]);\n\t\t}\n\t} else if ( isset($_REQUEST[$name]) ) {\n\t\tif ( is_array($_REQUEST[$name]) ) {\n\t\t\t$ids = $_REQUEST[$name];\n\t\t} else {\n\t\t\t$ids = array($_REQUEST[$name]);\n\t\t}\n\t}\n\treturn $ids;\n}\n\nfunction format_duration($time, $separator=':') {\n  return sprintf('%02d%s%02d%s%02d', floor($time/3600), $separator, ($time/60)%60, $separator, $time%60);\n}\n\nfunction array_recursive_diff($aArray1, $aArray2) {\n  $aReturn = array();\n  if ( ! (is_array($aArray1) and is_array($aArray2) ) ) {\n    $backTrace = debug_backtrace();\n    ZM\\Warning('Bad arrays passed 1:' . print_r($aArray1,true) . PHP_EOL.'2: '.print_r($aArray2,true).PHP_EOL.' from: '.print_r($backTrace,true));\n    return;\n  }\n\n  foreach ( $aArray1 as $mKey => $mValue ) {\n    if ( array_key_exists($mKey, $aArray2) ) {\n      if ( is_array($mValue) ) {\n        if ( is_array($aArray2[$mKey]) ) {\n          $aRecursiveDiff = array_recursive_diff($mValue, $aArray2[$mKey]);\n          if ( count($aRecursiveDiff) ) {\n            $aReturn[$mKey] = $aRecursiveDiff;\n          }\n        } else {\n          $aReturn[$mKey] = $mValue;\n        }\n      } else {\n        if ( $mValue != $aArray2[$mKey] ) {\n          $aReturn[$mKey] = $mValue;\n        }\n      }\n    } else {\n      $aReturn[$mKey] = $mValue;\n    }\n  }\n  # Now check for keys in array2 that are not in array1\n  foreach ($aArray2 as $mKey => $mValue) {\n    if ( array_key_exists($mKey, $aArray1) ) {\n      # Already checked it... I think.\n      #if ( is_array($mValue) ) {\n        #$aRecursiveDiff = array_recursive_diff($mValue, $aArray2[$mKey]);\n        #if ( count($aRecursiveDiff) ) {\n          #$aReturn[$mKey] = $aRecursiveDiff;\n        #}\n      #} else {\n        #if ( $mValue != $aArray2[$mKey] ) {\n          #$aReturn[$mKey] = $mValue;\n        #}\n      #}\n    } else {\n      $aReturn[$mKey] = $mValue;\n    }\n  }\n\n  return $aReturn;\n}\n\nfunction html_radio($name, $values, $selected=null, $options=array(), $attrs=array()) {\n\n  $html = '';\n  if ( isset($options['default']) and ( $selected == null ) ) {\n    $selected = $options['default'];\n  } # end if\n\n  foreach ( $values as $value => $label ) {\n    if ( isset($options['container']) ) {\n      $html .= $options['container'][0];\n    }\n    $attributes = array_map(\n          function($attr, $value){return $attr.'=\"'.$value.'\"';},\n          array_keys($attrs),\n          array_values($attrs)\n        );\n    $attributes_string = implode(' ', $attributes);\n\n    $html .= sprintf('\n      <div class=\"form-check%7$s\">\n        <label class=\"form-check-label radio%7$s\" for=\"%1$s%6$s%2$s\">\n        <input class=\"form-check-input\" type=\"radio\" name=\"%1$s\" value=\"%2$s\" id=\"%1$s%6$s%2$s\" %4$s%5$s />\n        %3$s</label></div>\n        ', $name, $value, $label, ($value==$selected?' checked=\"checked\"':''),\n        $attributes_string,\n        (isset($options['id']) ? $options['id'] : ''),\n        ( ( (!isset($options['inline'])) or $options['inline'] ) ? '-inline' : '')\n      );\n    if ( isset($options['container']) ) {\n      $html .= $options['container'][1];\n    }\n  } # end foreach value\n  return $html;\n} # end sub html_radio\n\n\nfunction random_colour() {\n  return '#'.\n    str_pad( dechex( mt_rand(0, 255) ), 2, '0', STR_PAD_LEFT).\n    str_pad( dechex( mt_rand(0, 255) ), 2, '0', STR_PAD_LEFT).\n    str_pad( dechex( mt_rand(0, 255) ), 2, '0', STR_PAD_LEFT);\n}\n\nfunction zm_random_bytes($length = 32) {\n  if ( !isset($length) || intval($length) <= 8 ) {\n    $length = 32;\n  }\n  if ( function_exists('random_bytes') ) {\n    return random_bytes($length);\n  }\n  if ( function_exists('mcrypt_create_iv') ) {\n    return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);\n  }\n  if ( function_exists('openssl_random_pseudo_bytes') ) {\n    return openssl_random_pseudo_bytes($length);\n  }\n  ZM\\Error('No random_bytes function found.');\n}\n\nfunction i18n() {\n  $string = explode('_', ZM_LANG_DEFAULT, 2);\n  $string[1] = strtoupper($string[1]);\n\n  return implode('-', $string);\n}\n\nfunction check_datetime($x) {\n  return (date('Y-m-d H:i:s', strtotime($x)) == $x);\n}\n?>\n"], "fixing_code": ["<?php\n//\n// ZoneMinder web function library, $Date$, $Revision$\n// Copyright (C) 2001-2008 Philip Coombes\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n//\n//\nrequire_once('Filter.php');\nrequire_once('FilterTerm.php');\n\n// Compatibility functions\nif ( version_compare(phpversion(), '4.3.0', '<') ) {\n  function ob_get_clean() {\n    $buffer = ob_get_contents();\n    ob_end_clean();\n    return $buffer;\n  }\n}\n\nfunction noCacheHeaders() {\n  header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');    // Date in the past\n  header('Last-Modified: '.gmdate( 'D, d M Y H:i:s' ).' GMT'); // always modified\n  header('Cache-Control: no-store, no-cache, must-revalidate');  // HTTP/1.1\n  header('Cache-Control: post-check=0, pre-check=0', false);\n  header('Pragma: no-cache');         // HTTP/1.0\n}\n\nfunction CSPHeaders($view, $nonce) {\n  global $Servers;\n  if ( ! $Servers )\n    $Servers = ZM\\Server::find();\n\n  $additionalScriptSrc = implode(' ', array_map(function($S){return $S->Hostname();}, $Servers));\n  switch ($view) {\n    case 'login':\n      if (defined('ZM_OPT_USE_GOOG_RECAPTCHA')\n          && defined('ZM_OPT_GOOG_RECAPTCHA_SITEKEY')\n          && defined('ZM_OPT_GOOG_RECAPTCHA_SECRETKEY')\n          && ZM_OPT_USE_GOOG_RECAPTCHA && ZM_OPT_GOOG_RECAPTCHA_SITEKEY && ZM_OPT_GOOG_RECAPTCHA_SECRETKEY) {\n        $additionalScriptSrc .= ' https://www.google.com';\n      }\n      // fall through\n    default:\n      // Enforce script-src on pages where inline scripts and event handlers have been fixed.\n      header(\"Content-Security-Policy: script-src 'self' object-src 'self' 'nonce-$nonce' $additionalScriptSrc\".\n        (ZM_CSP_REPORT_URI ? '; report-uri '.ZM_CSP_REPORT_URI : '' )\n      );\n      break;\n  }\n}\n\nfunction CORSHeaders() {\n  if ( isset($_SERVER['HTTP_ORIGIN']) ) {\n\n# The following is left for future reference/use.\n    $valid = false;\n    global $Servers;\n    if ( ! $Servers )\n      $Servers = ZM\\Server::find();\n    if ( sizeof($Servers) < 1 ) {\n# Only need CORSHeaders in the event that there are multiple servers in use.\n      # ICON: Might not be true. multi-port?\n      if ( ZM_MIN_STREAMING_PORT ) {\n        ZM\\Debug('Setting default Access-Control-Allow-Origin from ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Credentials: true');\n        header('Access-Control-Allow-Headers: x-requested-with,x-request');\n      }\n      return;\n    }\n    foreach ( $Servers as $Server ) {\n      if (\n        preg_match('/^(https?:\\/\\/)?'.preg_quote($Server->Hostname(),'/').'/i', $_SERVER['HTTP_ORIGIN'])\n        or\n        preg_match('/^(https?:\\/\\/)?'.preg_quote($Server->Name(),'/').'/i', $_SERVER['HTTP_ORIGIN'])\n      ) {\n        $valid = true;\n        ZM\\Debug('Setting Access-Control-Allow-Origin from '.$_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Credentials: true');\n        header('Access-Control-Allow-Headers: x-requested-with,x-request');\n        break;\n      }\n    }\n    if ( !$valid ) {\n      ZM\\Warning($_SERVER['HTTP_ORIGIN'] . ' is not found in servers list.');\n    }\n  }\n}\n\nfunction getMimeType( $file ) {\n  if ( function_exists('mime_content_type') ) {\n    return mime_content_type($file);\n  } elseif ( function_exists('finfo_file') ) {\n    $finfo = finfo_open(FILEINFO_MIME);\n    $mimeType = finfo_file($finfo, $file);\n    finfo_close($finfo);\n    return $mimeType;\n  }\n  return trim(exec('file -bi '.escapeshellarg($file).' 2>/dev/null'));\n}\n\nfunction outputVideoStream($id, $src, $width, $height, $format, $title='') {\n  echo getVideoStreamHTML($id, $src, $width, $height, $format, $title);\n}\n\nfunction getVideoStreamHTML($id, $src, $width, $height, $format, $title='') {\n  $html = '';\n  $width = validInt($width);\n  $height = validInt($height);\n  $title = validHtmlStr($title);\n\n  if ( file_exists($src) ) {\n    $mimeType = getMimeType($src);\n  } else {\n    switch( $format ) {\n      case 'asf' :\n        $mimeType = 'video/x-ms-asf';\n        break;\n      case 'avi' :\n      case 'wmv' :\n        $mimeType = 'video/x-msvideo';\n        break;\n      case 'mov' :\n        $mimeType = 'video/quicktime';\n        break;\n      case 'mpg' :\n      case 'mpeg' :\n        $mimeType = 'video/mpeg';\n        break;\n      case 'swf' :\n        $mimeType = 'application/x-shockwave-flash';\n        break;\n      case '3gp' :\n        $mimeType = 'video/3gpp';\n        break;\n      default :\n        $mimeType = 'video/'.$format;\n        break;\n    }\n  }\n  if ( !$mimeType || ($mimeType == 'application/octet-stream') )\n    $mimeType = 'video/'.$format;\n  if ( ZM_WEB_USE_OBJECT_TAGS ) {\n    switch( $mimeType ) {\n      case 'video/x-ms-asf' :\n      case 'video/x-msvideo' :\n      case 'video/mp4' :\n          if ( isWindows() ) {\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\n              classid=\"CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95\"\n              codebase=\"'.ZM_BASE_PROTOCOL.'://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,0,02,902\"\n              standby=\"Loading Microsoft Windows Media Player components...\"\n              type=\"'.$mimeType.'\">\n              <param name=\"FileName\" value=\"'.$src.'\"/>\n              <param name=\"autoStart\" value=\"1\"/>\n              <param name=\"showControls\" value=\"0\"/>\n              <embed type=\"'.$mimeType.'\"\n              pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.microsoft.com/Windows/MediaPlayer/\"\n              src=\"'.$src.'\"\n              name=\"'.$title.'\"\n              width=\"'.$width.'\"\n              height=\"'.$height.'\"\n              autostart=\"1\"\n              showcontrols=\"0\">\n              </embed>\n              </object>';\n          }\n      case 'video/quicktime' :\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\n            codebase=\"'.ZM_BASE_PROTOCOL.'://www.apple.com/qtactivex/qtplugin.cab\"\n            type=\"'.$mimeType.'\">\n            <param name=\"src\" value=\"'.$src.'\"/>\n            <param name=\"autoplay\" VALUE=\"true\"/>\n            <param name=\"controller\" VALUE=\"false\"/>\n            <embed type=\"'.$mimeType.'\"\n            src=\"'.$src.'\"\n            pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.apple.com/quicktime/download/\"\n            name=\"'.$title.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            autoplay=\"true\"\n            controller=\"true\">\n            </embed>\n            </object>';\n      case 'application/x-shockwave-flash' :\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n            codebase=\"'.ZM_BASE_PROTOCOL.'://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"\n            type=\"'.$mimeType.'\">\n            <param name=\"movie\" value=\"'.$src.'\"/>\n            <param name=\"quality\" value=\"high\"/>\n            <param name=\"bgcolor\" value=\"#ffffff\"/>\n            <embed type=\"'.$mimeType.'\"\n            pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.macromedia.com/go/getflashplayer\"\n            src=\"'.$src.'\"\n            name=\"'.$title.'\"\n            width=\"'.$width.'\"\n            height=\"'.$height.'\"\n            quality=\"high\"\n            bgcolor=\"#ffffff\">\n            </embed>\n            </object>';\n    } # end switch\n  } # end if use object tags\n  return '<embed'. ( isset($mimeType)?(' type=\"'.$mimeType.'\"'):'' ). '\n      src=\"'.$src.'\"\n      name=\"'.$title.'\"\n      width=\"'.$width.'\"\n      height=\"'.$height.'\"\n      autostart=\"1\"\n      autoplay=\"1\"\n      showcontrols=\"0\"\n      controller=\"0\">\n      </embed>';\n}\n\nfunction outputImageStream( $id, $src, $width, $height, $title='' ) {\n  echo getImageStreamHTML( $id, $src, $width, $height, $title );\n}\n\n// width and height MUST be valid and include the px\nfunction getImageStreamHTML( $id, $src, $width, $height, $title='' ) {\n  if ( canStreamIframe() ) {\n      return '<iframe id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" '.($width? ' width=\"'. validInt($width).'\"' : '').($height?' height=\"'.validInt($height).'\"' : '' ).'/>';\n  } else {\n      #return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" />';\n    return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" style=\"'.\n      #(($width and $width !='auto') ?'width:'.$width.';' : '').\n      (($height and $height != 'auto')?' height:'.$height.';':'').\n      '\" />';\n  }\n}\n\nfunction outputControlStream($src, $width, $height, $monitor, $scale, $target) {\n?>\n  <form name=\"ctrlForm\" method=\"post\" action=\"?\" target=\"<?php echo $target ?>\">\n    <input type=\"hidden\" name=\"view\" value=\"blank\"/>\n    <input type=\"hidden\" name=\"mid\" value=\"<?php echo $monitor['Id'] ?>\"/>\n    <input type=\"hidden\" name=\"action\" value=\"control\"/>\n    <?php\n    if ( $monitor['CanMoveMap'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"moveMap\"/>\n    <?php\n    } else if ( $monitor['CanMoveRel'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"movePseudoMap\"/>\n    <?php\n    } else if ( $monitor['CanMoveCon'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"moveConMap\"/>\n    <?php\n    }\n    ?>\n    <input type=\"hidden\" name=\"scale\" value=\"<?php echo $scale ?>\"/>\n    <input type=\"image\" src=\"<?php echo $src ?>\" width=\"<?php echo $width ?>\" height=\"<?php echo $height ?>\">\n  </form>\n<?php\n}\n\nfunction outputHelperStream($id, $src, $width, $height, $title='') {\n  echo getHelperStream($id, $src, $width, $height, $title);\n}\nfunction getHelperStream($id, $src, $width, $height, $title='') {\n    return '<object type=\"application/x-java-applet\" id=\"'.$id.'\" code=\"com.charliemouse.cambozola.Viewer\"\n    archive=\"'.(defined('ZM_PATH_CAMBOZOLA') ? ZM_PATH_CAMBOZOLA : '') .'\"\n    align=\"middle\"\n    width=\"'. $width .'\"\n    height=\"'. $height .'\"\n    title=\"'. $title .'\">\n    <param name=\"accessories\" value=\"none\"/>\n    <param name=\"url\" value=\"'. $src .'\"/>\n    </object>';\n}\n\nfunction outputImageStill($id, $src, $width, $height, $title='') {\n  echo getImageStill($id, $src, $width, $height, $title='');\n}\nfunction getImageStill($id, $src, $width, $height, $title='') {\n  return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'.$title.'\"'.\n    (validInt($width)?' width=\"'.$width.'\"':'').\n    (validInt($height)?' height=\"'.$height.'\"':'').' />';\n}\n\nfunction getWebSiteUrl($id, $src, $width, $height, $title='') {\n  # Prevent unsightly warnings when php cannot verify the ssl certificate\n  stream_context_set_default( [\n    'ssl' => [\n      'verify_peer' => false,\n      'verify_peer_name' => false,\n    ],\n  ]);\n  # The End User can turn off the following warning under Options -> Web\n  if ( ZM_WEB_XFRAME_WARN ) {\n    $header = get_headers($src, 1);\n    # If the target website has set X-Frame-Options, check it for \"sameorigin\" and warn the end user\n    if ( array_key_exists('X-Frame-Options', $header) ) {\n      $header = $header['X-Frame-Options'];\n      if ( stripos($header, 'sameorigin') === 0 )\n        ZM\\Warning('Web site '.$src.' has X-Frame-Options set to sameorigin. An X-Frame-Options browser plugin is required to display this site.');\n    }\n  }\n  return '<object id=\"'.$id.'\" data=\"'.$src.'\" alt=\"'.$title.'\" width=\"'.$width.'\" height=\"'.$height.'\"></object>';\n}\n\nfunction outputControlStill($src, $width, $height, $monitor, $scale, $target) {\n  ?>\n  <form name=\"ctrlForm\" method=\"post\" action=\"?\" target=\"<?php echo $target ?>\">\n    <input type=\"hidden\" name=\"view\" value=\"blank\"/>\n    <input type=\"hidden\" name=\"mid\" value=\"<?php echo $monitor['Id'] ?>\"/>\n    <input type=\"hidden\" name=\"action\" value=\"control\"/>\n    <?php\n    if ( $monitor['CanMoveMap'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"moveMap\"/>\n    <?php\n    } else if ( $monitor['CanMoveRel'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"movePseudoMap\"/>\n    <?php\n    } else if ( $monitor['CanMoveCon'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"moveConMap\"/>\n    <?php\n    }\n    ?>\n    <input type=\"hidden\" name=\"scale\" value=\"<?php echo $scale ?>\"/>\n    <input type=\"image\" src=\"<?php echo $src ?>\" width=\"<?php echo $width ?>\" height=\"<?php echo $height ?>\"/>\n  </form>\n  <?php\n}\n\n// Incoming args are shell-escaped. This function must escape any further arguments it cannot guarantee.\nfunction getZmuCommand($args) {\n  $zmuCommand = ZMU_PATH;\n\n  if ( ZM_OPT_USE_AUTH ) {\n    if ( ZM_AUTH_RELAY == 'hashed' ) {\n      $zmuCommand .= ' -A '.generateAuthHash(false, true);\n    } elseif ( ZM_AUTH_RELAY == 'plain' ) {\n      $zmuCommand .= ' -U ' .escapeshellarg($_SESSION['username']).' -P '.escapeshellarg($_SESSION['password']);\n    } elseif ( ZM_AUTH_RELAY == 'none' ) {\n      $zmuCommand .= ' -U '.escapeshellarg($_SESSION['username']);\n    }\n  }\n\n  $zmuCommand .= $args;\n\n  return $zmuCommand;\n}\n\nfunction getEventDefaultVideoPath($event) {\n  $Event = new ZM\\Event($event);\n  return $Event->getStreamSrc(array('mode'=>'mpeg', 'format'=>'h264'));\n}\n\nfunction deletePath( $path ) {\n  ZM\\Debug('Deleting '.$path);\n  if ( is_dir($path) ) {\n    system(escapeshellcmd('rm -rf '.$path));\n  } else if ( file_exists($path) ) {\n    unlink($path);\n  }\n}\n\nfunction deleteEvent($event) {\n\n  if ( empty($event) ) {\n    ZM\\Error('Empty event passed to deleteEvent.');\n    return;\n  }\n\n  if ( gettype($event) != 'array' ) {\n# $event could be an eid, so turn it into an event hash\n    $event = new ZM\\Event($event);\n  }\n\n  if ( $event->Archived() ) {\n    ZM\\Info('Cannot delete Archived event.');\n    return;\n  } # end if Archived\n\n  global $user;\n\n  if ( $user['Events'] == 'Edit' ) {\n    $event->delete();\n  } # CAN EDIT\n}\n\n/**\n * $label must be already escaped. It can't be done here since it sometimes contains HTML tags.\n */\nfunction makeLink($url, $label, $condition=1, $options='') {\n  $string = '';\n  if ( $condition ) {\n    $string .= '<a href=\"'.$url.'\"'.($options?(' '.$options):'').'>';\n  }\n  $string .= $label;\n  if ( $condition ) {\n    $string .= '</a>';\n  }\n  return $string;\n}\n\n//Make it slightly easier to create a link to help text modal\nfunction makeHelpLink($ohndx) {\n  $string = '&nbsp;(<a id=\"' .$ohndx. '\" class=\"optionhelp\" href=\"#\">?</a>)';\n\n  return $string;\n}\n\nfunction makeButton($url, $buttonValue, $condition=1, $options='') {\n  $string = '<button type=\"button\" data-on-click-this=\"'.$buttonValue.'\"';\n  $string .= ' data-url=\"' .$url. '\"';\n  if (!$condition) {\n    $string .= ' disabled=\"disabled\"';\n  }\n  $string .= ($options ? (' ' . $options) : '') . '/>'.translate($buttonValue).'</button>'.PHP_EOL;\n  return $string;\n}\n\nfunction htmlSelect($name, $contents, $values, $behaviours=false) {\n  $behaviourText = '';\n  if ( !empty($behaviours) ) {\n    if ( is_array($behaviours) ) {\n      foreach ( $behaviours as $event=>$action ) {\n        $behaviourText .= ' '.$event.'=\"'.$action.'\"';\n      }\n    } else {\n      $behaviourText = ' onchange=\"'.$behaviours.'\"';\n    }\n  }\n\n  return '<select name=\"'.$name.'\" '.$behaviourText.'>'.PHP_EOL.htmlOptions($contents, $values).'</select>';\n}\n\nfunction htmlOptions($options, $values) {\n  $options_html = '';\n  $has_selected = false;\n  foreach ( $options as $value=>$option ) {\n    $disabled = 0;\n    $text = '';\n    if ( is_array($option) ) {\n\n      if ( isset($option['Name']) )\n        $text = $option['Name'];\n      else if ( isset($option['text']) )\n        $text = $option['text'];\n\n      if ( isset($option['disabled']) ) {\n        $disabled = $option['disabled'];\n      }\n    } else if ( is_object($option) ) {\n      $text = $option->Name();\n    } else {\n      $text = $option;\n    }\n    $selected = false;\n    if ($values) {\n      $selected = is_array($values) ? in_array($value, $values) : (!strcmp($value, $values));\n      if ( !$has_selected ) \n        $has_selected = $selected;\n    }\n\n    $options_html .= '<option value=\"'.htmlspecialchars($value, ENT_COMPAT | ENT_HTML401, ini_get('default_charset'), false).'\"'.\n      ($selected?' selected=\"selected\"':'').\n      ($disabled?' disabled=\"disabled\"':'').\n      '>'.htmlspecialchars($text, ENT_COMPAT | ENT_HTML401, ini_get('default_charset'), false).'</option>'.PHP_EOL;\n  } # end foreach options\n  if ( $values and ((!is_array($values)) or count($values) ) and ! $has_selected ) {\n    ZM\\Warning('Specified value '.print_r($values, true).' not in contents: '.print_r($options, true));\n  }\n  return $options_html;\n} # end function htmlOptions\n\nfunction truncText($text, $length, $deslash=1) {\n  return preg_replace('/^(.{'.$length.',}?)\\b.*$/', '\\\\1&hellip;', ($deslash?stripslashes($text):$text));\n}\n\nfunction buildSelect($name, $contents, $behaviours=false) {\n  $value = '';\n  if ( preg_match('/^\\s*(\\w+)\\s*(\\[.*\\])?\\s*$/', $name, $matches) && (count($matches) > 2) ) {\n    $arr = $matches[1];\n    if ( isset($GLOBALS[$arr]) )\n      $value = $GLOBALS[$arr];\n    elseif ( isset($_REQUEST[$arr]) )\n      $value = $_REQUEST[$arr];\n    if ( !preg_match_all('/\\[\\s*[\\'\"]?(\\w+)[\"\\']?\\s*\\]/', $matches[2], $matches) ) {\n      ZM\\Fatal(\"Can't parse selector '$name'\");\n    }\n    for ( $i = 0; $i < count($matches[1]); $i++ ) {\n      $idx = $matches[1][$i];\n      $value = isset($value[$idx])?$value[$idx]:false;\n    }\n  } else {\n    if ( isset($GLOBALS[$name]) )\n      $value = $GLOBALS[$name];\n    elseif ( isset($_REQUEST[$name]) )\n      $value = $_REQUEST[$name];\n  }\n  ob_start();\n  $behaviourText = '';\n  if ( !empty($behaviours) ) {\n    if ( is_array($behaviours) ) {\n      foreach ( $behaviours as $event=>$action ) {\n        $behaviourText .= ' '.$event.'=\"'.$action.'\"';\n      }\n    } else {\n      $behaviourText = ' data-on-change-this=\"'.$behaviours.'\"';\n    }\n  }\n  ?>\n  <select name=\"<?php echo $name ?>\" id=\"<?php echo $name ?>\"<?php echo $behaviourText ?>>\n  <?php\n  foreach ( $contents as $contentValue => $contentText ) {\n  ?>\n    <option value=\"<?php echo $contentValue ?>\"<?php if ( $value == $contentValue ) { ?> selected=\"selected\"<?php } ?>><?php echo validHtmlStr($contentText) ?></option>\n  <?php\n  }\n  ?>\n  </select>\n  <?php\n  $html = ob_get_contents();\n  ob_end_clean();\n\n  return $html;\n}\n\nfunction getFormChanges($values, $newValues, $types=false, $columns=false) {\n  $changes = array();\n  if ( !$types )\n    $types = array();\n\n  foreach ( $newValues as $key=>$value ) {\n    if ( $columns && !isset($columns[$key]) )\n      continue;\n\n    if ( !isset($types[$key]) )\n      $types[$key] = false;\n\n    switch ( $types[$key] ) {\n      case 'set' :\n          if ( is_array($newValues[$key]) ) {\n            if ( (!isset($values[$key])) or ( join(',',$newValues[$key]) != $values[$key] ) ) {\n              $changes[$key] = \"`$key` = \".dbEscape(join(',',$newValues[$key]));\n            }\n          } else if ( (!isset($values[$key])) or $values[$key] ) {\n            $changes[$key] = \"`$key` = ''\";\n          }\n          break;\n      case 'image' :\n          if ( is_array( $newValues[$key] ) ) {\n            $imageData = getimagesize( $newValues[$key]['tmp_name'] );\n            $changes[$key.'Width'] = $key.'Width = '.$imageData[0];\n            $changes[$key.'Height'] = $key.'Height = '.$imageData[1];\n            $changes[$key.'Type'] = $key.'Type = \\''.$newValues[$key]['type'].'\\'';\n            $changes[$key.'Size'] = $key.'Size = '.$newValues[$key]['size'];\n            ob_start();\n            readfile( $newValues[$key]['tmp_name'] );\n            $changes[$key] = $key.\" = \".dbEscape( ob_get_contents() );\n            ob_end_clean();\n          } else {\n            $changes[$key] = \"$key = \".dbEscape($value);\n          }\n          break;\n      case 'document' :\n          if ( is_array( $newValues[$key] ) ) {\n            $imageData = getimagesize( $newValues[$key]['tmp_name'] );\n            $changes[$key.'Type'] = $key.'Type = \\''.$newValues[$key]['type'].'\\'';\n            $changes[$key.'Size'] = $key.'Size = '.$newValues[$key]['size'];\n            ob_start();\n            readfile( $newValues[$key]['tmp_name'] );\n            $changes[$key] = $key.' = '.dbEscape( ob_get_contents() );\n            ob_end_clean();\n          } else {\n            $changes[$key] = $key . ' = '.dbEscape($value);\n          }\n          break;\n      case 'file' :\n          $changes[$key.'Type'] = $key.'Type = '.dbEscape($newValues[$key]['type']);\n          $changes[$key.'Size'] = $key.'Size = '.dbEscape($newValues[$key]['size']);\n          ob_start();\n          readfile( $newValues[$key]['tmp_name'] );\n          $changes[$key] = $key.' = \\''.dbEscape( ob_get_contents() ).'\\'';\n          ob_end_clean();\n          break;\n      case 'raw' :\n          if ( (!isset($values[$key])) or ($values[$key] != $value) ) {\n            $changes[$key] = $key . ' = '.dbEscape($value);\n          }\n          break;\n      case 'toggle' :\n        if ( (!isset($values[$key])) or $values[$key] != $value ) {\n          if ( empty($value) ) {\n            $changes[$key] = $key.' = 0';\n          } else {\n            $changes[$key] = $key.' = 1';\n            //$changes[$key] = $key . ' = '.dbEscape(trim($value));\n          }\n        }\n        break;\n      case 'integer' :\n        if ( (!isset($values[$key])) or $values[$key] != $value ) {\n          $changes[$key] = $key . ' = '.intval($value);\n        }\n        break;\n      default :\n          if ( !isset($values[$key]) || ($values[$key] != $value) ) {\n            if ( ! isset($value) || $value == '' ) {\n              $changes[$key] = \"`$key` = NULL\";\n            } else {\n              $changes[$key] = \"`$key` = \".dbEscape(trim($value));\n            }\n          }\n          break;\n    } // end switch\n  } // end foreach newvalues\n\n  foreach ( $values as $key=>$value ) {\n    if ( !empty($columns[$key]) ) {\n      if ( !empty($types[$key]) ) {\n        if ( $types[$key] == 'toggle' ) {\n          if ( !isset($newValues[$key]) && !empty($value) ) {\n            $changes[$key] = \"`$key` = 0\";\n          }\n        } else if ( $types[$key] == 'set' ) {\n          $changes[$key] = \"`$key` = ''\";\n        }\n      }\n    }\n  }\n  return $changes;\n}\n\nfunction getBrowser(&$browser, &$version) {\n  if ( isset($_SESSION['browser']) ) {\n    $browser = $_SESSION['browser'];\n    $version = $_SESSION['version'];\n  } else {\n    if (\n      ( preg_match('/MSIE (.*?);/', $_SERVER['HTTP_USER_AGENT'], $logVersion))\n      ||\n      ( preg_match('/.*Trident.*rv:(.*?)(;|\\))/', $_SERVER['HTTP_USER_AGENT'], $logVersion))\n    ) {\n      $version = $logVersion[1];\n      $browser = 'ie';\n    } else if ( preg_match('/Chrome\\/([0-9]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      // We only care about the major so don't count .\n      $version = $logVersion[1];\n      // Check for old version of Chrome with bug 5876\n      if ( $version < 7 ) {\n        $browser = 'oldchrome';\n      } else {\n        $browser = 'chrome';\n      }\n    } else if ( preg_match('/Safari\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'safari';\n    } else if ( preg_match('/Opera[ \\/]([0-9].[0-9]{1,2})/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'opera';\n    } else if ( preg_match('/Konqueror\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'konqueror';\n    } else if ( preg_match('/Mozilla\\/([0-9].[0-9]{1,2})/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'mozilla';\n    } else {\n      $version = 0;\n      $browser = 'unknown';\n    }\n    $_SESSION['browser'] = $browser;\n    $_SESSION['version'] = $version;\n  }\n}\n\nfunction isMozilla() {\n  getBrowser($browser, $version);\n\n  return $browser == 'mozilla';\n}\n\nfunction isKonqueror() {\n  getBrowser($browser, $version);\n\n  return $browser == 'konqueror';\n}\n\nfunction isInternetExplorer() {\n  getBrowser($browser, $version);\n\n  return $browser == 'ie';\n}\n\nfunction isOldChrome() {\n  getBrowser($browser, $version);\n\n  return $browser == 'oldchrome';\n}\n\nfunction isChrome() {\n  getBrowser($browser, $version);\n\n  return $browser == 'chrome';\n}\n\nfunction isOpera() {\n  getBrowser($browser, $version);\n\n  return $browser == 'opera';\n}\n\nfunction isSafari() {\n  getBrowser($browser, $version);\n\n  return $browser == 'safari';\n}\n\nfunction isWindows() {\n  return preg_match('/Win/', $_SERVER['HTTP_USER_AGENT']);\n}\n\nfunction canStreamIframe() {\n  return isKonqueror();\n}\n\nfunction canStreamNative() {\n  // Old versions of Chrome can display the stream, but then it blocks everything else (Chrome bug 5876)\n  return ( ZM_WEB_CAN_STREAM == 'yes' || ( ZM_WEB_CAN_STREAM == 'auto' && (!isInternetExplorer() && !isOldChrome()) ) );\n}\n\nfunction canStreamApplet() {\n  if ( defined('ZM_OPT_CAMBOZOLA') && (ZM_OPT_CAMBOZOLA && !file_exists( ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA )) ) {\n    ZM\\Warning('ZM_OPT_CAMBOZOLA is enabled, but the system cannot find '.ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA);\n  }\n\n  return (defined('ZM_OPT_CAMBOZOLA') && ZM_OPT_CAMBOZOLA && file_exists(ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA));\n}\n\nfunction canStream() {\n  return canStreamNative() | canStreamApplet();\n}\n\nfunction packageControl($command) {\n  $string = ZM_PATH_BIN.'/zmpkg.pl '.escapeshellarg($command);\n  $string .= ' 2>/dev/null >&- <&- >/dev/null';\n  exec($string);\n}\n\nfunction daemonControl($command, $daemon=false, $args=false) {\n  $string = escapeshellcmd(ZM_PATH_BIN).'/zmdc.pl '.$command;\n  if ( $daemon ) {\n    $string .= ' ' . $daemon;\n    if ( $args ) {\n      $string .= ' ' . $args;\n    }\n  }\n  $string = escapeshellcmd($string);\n  #$string .= ' 2>/dev/null >&- <&- >/dev/null';\n  ZM\\Debug('daemonControl '.$string);\n  exec($string);\n}\n\nfunction zmcControl($monitor, $mode=false) {\n  $Monitor = new ZM\\Monitor($monitor);\n  return $Monitor->zmcControl($mode);\n}\n\nfunction initDaemonStatus() {\n  global $daemon_status;\n\n  if ( !isset($daemon_status) ) {\n    if ( daemonCheck() ) {\n      $string = ZM_PATH_BIN.'/zmdc.pl status';\n      $daemon_status = shell_exec($string);\n    } else {\n      $daemon_status = '';\n    }\n  }\n}\n\nfunction daemonStatus($daemon, $args=false) {\n  global $daemon_status;\n\n  initDaemonStatus();\n\n  $string = $daemon;\n  if ( $args ) {\n\t\tif ( is_array($args) ) {\n\t\t\t$string .= join(' ', $args);\n\t\t} else {\n\t\t\t$string .= ' ' . $args;\n\t\t}\n\t}\n  return ( strpos($daemon_status, \"'$string' running\") !== false );\n}\n\nfunction zmcStatus($monitor) {\n  if ( $monitor['Type'] == 'Local' ) {\n    $zmcArgs = '-d '.$monitor['Device'];\n  } else {\n    $zmcArgs = '-m '.$monitor['Id'];\n  }\n  return daemonStatus('zmc', $zmcArgs);\n}\n\nfunction daemonCheck($daemon=false, $args=false) {\n  $string = ZM_PATH_BIN.'/zmdc.pl check';\n  if ( $daemon ) {\n    $string .= ' ' . $daemon;\n    if ( $args )\n      $string .= ' '. $args;\n  }\n  $string = escapeshellcmd($string);\n  $result = exec($string);\n  return preg_match('/running/', $result);\n}\n\nfunction zmcCheck($monitor) {\n  if ( $monitor['Type'] == 'Local' ) {\n    $zmcArgs = '-d '.$monitor['Device'];\n  } else {\n    $zmcArgs = '-m '.$monitor['Id'];\n  }\n  return daemonCheck('zmc', $zmcArgs);\n}\n\nfunction getImageSrc($event, $frame, $scale=SCALE_BASE, $captureOnly=false, $overwrite=false) {\n  $Event = new ZM\\Event($event);\n  return $Event->getImageSrc($frame, $scale, $captureOnly, $overwrite);\n}\n\nfunction viewImagePath($path, $querySep='&amp;') {\n  return '?view=image'.$querySep.'path='.$path;\n}\n\nfunction createListThumbnail($event, $overwrite=false) {\n  # Load the frame with the highest score to use as a thumbnail\n  if ( !($frame = dbFetchOne('SELECT * FROM Frames WHERE EventId=? AND Score=? ORDER BY FrameId LIMIT 1', NULL, array($event['Id'], $event['MaxScore']) )) )\n    return false;\n\n  $frameId = $frame['FrameId'];\n\n  if ( ZM_WEB_LIST_THUMB_WIDTH ) {\n    $thumbWidth = ZM_WEB_LIST_THUMB_WIDTH;\n    $scale = (SCALE_BASE*ZM_WEB_LIST_THUMB_WIDTH)/$event['Width'];\n    $thumbHeight = reScale($event['Height'], $scale);\n  } elseif ( ZM_WEB_LIST_THUMB_HEIGHT ) {\n    $thumbHeight = ZM_WEB_LIST_THUMB_HEIGHT;\n    $scale = (SCALE_BASE*ZM_WEB_LIST_THUMB_HEIGHT)/$event['Height'];\n    $thumbWidth = reScale($event['Width'], $scale);\n  } else {\n    ZM\\Fatal('No thumbnail width or height specified, please check in Options->Web');\n  }\n\n  $imageData = getImageSrc($event, $frame, $scale, false, $overwrite);\n  if ( !$imageData ) {\n    return false;\n  }\n\n  $thumbData = $frame;\n  $thumbData['Path'] = $imageData['thumbPath'];\n  $thumbData['Width'] = (int)$thumbWidth;\n  $thumbData['Height'] = (int)$thumbHeight;\n\n  return $thumbData;\n}\n\nfunction createVideo($event, $format, $rate, $scale, $overwrite=false) {\n  $command = ZM_PATH_BIN.'/zmvideo.pl -e '.$event['Id'].' -f '.$format.' -r '.sprintf('%.2F', ($rate/RATE_BASE));\n  if ( preg_match('/\\d+x\\d+/', $scale) )\n    $command .= ' -S '.$scale;\n  else\n    if ( version_compare(phpversion(), '4.3.10', '>=') )\n      $command .= ' -s '.sprintf('%.2F', ($scale/SCALE_BASE));\n    else\n      $command .= ' -s '.sprintf('%.2f', ($scale/SCALE_BASE));\n  if ( $overwrite )\n    $command .= ' -o';\n  $command = escapeshellcmd($command);\n  $result = exec($command, $output, $status);\n  ZM\\Debug(\"generating Video $command: result($result outptu:(\".implode(\"\\n\", $output ).\" status($status\");\n  return $status ? '' : rtrim($result);\n}\n\n# This takes more than one scale amount, so it runs through each and alters dimension.\n# I can't imagine why you would want to do that.\nfunction reScale($dimension, $dummy) {\n  $new_dimension = $dimension;\n  for ( $i = 1; $i < func_num_args(); $i++ ) {\n    $scale = func_get_arg($i);\n    if ( !empty($scale) && ($scale != '0') && ($scale != 'auto') && ($scale != SCALE_BASE) )\n      $new_dimension = (int)(($new_dimension*$scale)/SCALE_BASE);\n  }\n  return $new_dimension;\n}\n\nfunction deScale($dimension, $dummy) {\n  $new_dimension = $dimension;\n  for ( $i = 1; $i < func_num_args(); $i++ ) {\n    $scale = func_get_arg($i);\n    if ( !empty($scale) && $scale != SCALE_BASE )\n      $new_dimension = (int)(($new_dimension*SCALE_BASE)/$scale);\n  }\n  return $new_dimension;\n}\n\nfunction monitorLimitSql() {\n  global $user;\n  if ( !empty($user['MonitorIds']) )\n    $midSql = ' AND MonitorId IN ('.join(',', preg_split('/[\"\\'\\s]*,[\"\\'\\s]*/', $user['MonitorIds'])).')';\n  else\n    $midSql = '';\n  return $midSql;\n}\n\n\nfunction parseSort($saveToSession=false, $querySep='&amp;') {\n  global $sortQuery, $sortColumn, $sortOrder, $limitQuery; // Outputs\n  if ( isset($_REQUEST['filter']['Query']['sort_field']) ) { //Handle both new and legacy filter passing\n    $_REQUEST['sort_field'] = $_REQUEST['filter']['Query']['sort_field'];\n  }\n  if ( isset($_REQUEST['filter']['Query']['sort_asc']) ) {\n    $_REQUEST['sort_asc'] = $_REQUEST['filter']['Query']['sort_asc'];\n  }\n  if ( isset($_REQUEST['filter']['Query']['limit']) ) {\n    $_REQUEST['limit'] = $_REQUEST['filter']['Query']['limit'];\n  }\n  if ( empty($_REQUEST['sort_field']) ) {\n    $_REQUEST['sort_field'] = ZM_WEB_EVENT_SORT_FIELD;\n    $_REQUEST['sort_asc'] = (ZM_WEB_EVENT_SORT_ORDER == 'asc');\n  }\n  switch( $_REQUEST['sort_field'] ) {\n    case 'Id' :\n      $sortColumn = 'E.Id';\n      break;\n    case 'MonitorName' :\n      $sortColumn = 'M.Name';\n      break;\n    case 'Name' :\n      $sortColumn = 'E.Name';\n      break;\n    case 'Cause' :\n      $sortColumn = 'E.Cause';\n      break;\n    case 'DateTime' :\n      $sortColumn = 'E.StartDateTime';\n      $_REQUEST['sort_field'] = 'StartDateTime';\n      break;\n    case 'DiskSpace' :\n      $sortColumn = 'E.DiskSpace';\n      break;\n    case 'StartTime' :\n      # legacy\n      $_REQUEST['sort_field'] = 'StartDateTime';\n      $sortColumn = 'E.StartDateTime';\n      break;\n    case 'StartDateTime' :\n      $sortColumn = 'E.StartDateTime';\n      break;\n    case 'EndTime' :\n      #legacy\n      $_REQUEST['sort_field'] = 'EndDateTime';\n      $sortColumn = 'E.EndDateTime';\n      break;\n    case 'EndDateTime' :\n      $sortColumn = 'E.EndDateTime';\n      break;\n    case 'Length' :\n      $sortColumn = 'E.Length';\n      break;\n    case 'Frames' :\n      $sortColumn = 'E.Frames';\n      break;\n    case 'AlarmFrames' :\n      $sortColumn = 'E.AlarmFrames';\n      break;\n    case 'TotScore' :\n      $sortColumn = 'E.TotScore';\n      break;\n    case 'AvgScore' :\n      $sortColumn = 'E.AvgScore';\n      break;\n    case 'MaxScore' :\n      $sortColumn = 'E.MaxScore';\n      break;\n    case 'FramesFrameId' :\n      $sortColumn = 'F.FrameId';\n      break;\n    case 'FramesType' :\n      $sortColumn = 'F.Type';\n      break;\n    case 'FramesTimeStamp' :\n      $sortColumn = 'F.TimeStamp';\n      break;\n    case 'FramesDelta' :\n      $sortColumn = 'F.Delta';\n      break;\n    case 'FramesScore' :\n      $sortColumn = 'F.Score';\n      break;\n    default:\n      $sortColumn = 'E.StartDateTime';\n      break;\n  }\n  if ( !isset($_REQUEST['sort_asc']) )\n    $_REQUEST['sort_asc'] = 0;\n  $sortOrder = $_REQUEST['sort_asc'] ? 'asc' : 'desc';\n  $sortQuery = $querySep.'sort_field='.validHtmlStr($_REQUEST['sort_field']).$querySep.'sort_asc='.validHtmlStr($_REQUEST['sort_asc']);\n  if ( !isset($_REQUEST['limit']) )\n    $_REQUEST['limit'] = '';\n  if ( $saveToSession ) {\n    $_SESSION['sort_field'] = validHtmlStr($_REQUEST['sort_field']);\n    $_SESSION['sort_asc'] = validHtmlStr($_REQUEST['sort_asc']);\n  }\n  if ($_REQUEST['limit'] != '') {\n    $limitQuery = '&limit='.validInt($_REQUEST['limit']);\n  }\n}\n\n# Historically this function has just modified the passed in filter array.\n# This would normally be $_REQUEST['filter'];  We don't like modifying \n# request parameters. For now we will keep this behaviour, but note that we \n# now return the resulting array and other code should by modified to use that.\n#\n# Please note that I will be removing the savetosession code as well.\nfunction parseFilter(&$filter, $saveToSession=false, $querySep='&amp;') {\n\n  $Filter = ZM\\Filter::parse($filter, $querySep);\n\n  $filter['sql'] = $Filter->sql();\n  $filter['querystring'] = $Filter->querystring('filter', $querySep);\n  $filter['hidden_fields'] = $Filter->hidden_fields();\n  $filter['pre_sql_conditions'] = $Filter->pre_sql_conditions();\n  $filter['post_sql_conditions'] = $Filter->post_sql_conditions();\n\n  if ( $filter['sql'] )\n    $filter['sql'] = ' AND ( '.$filter['sql'].' )';\n\n  #if ( 0 ) {\n    #// ICON I feel like these should be here, but not yet\n  #if ( isset($filter['Query']['sort_field']) ) {\n    #$filter['sql'] .= ' ORDER BY ' . $filter['Query']['sort_field'] . (\n      #( $filter['Query']['sort_asc'] ? ' ASC' : ' DESC' ) );\n  #}\n  #}\n  return $filter;\n} // end function parseFilter(&$filter, $saveToSession=false, $querySep='&amp;')\n\n// Please note that the filter is passed in by copy, so you need to use the return value from this function.\n//\nfunction addFilterTerm($filter, $position, $term=false) {\n  if ( $position < 0 )\n    $position = 0;\n\n  if ( !isset($filter['Query']['terms']) )\n    $filter['Query']['terms'] = array();\n  else if ( $position > count($filter['Query']['terms']) )\n    $position = count($filter['Query']['terms']);\n\n  if ( $term && $position == 0 )\n    unset($term['cnj']);\n  array_splice($filter['Query']['terms'], $position, 0, array($term ? $term : array()));\n\n  return $filter;\n}\n\nfunction delFilterTerm($filter, $position) {\n  if ( $position < 0 )\n    $position = 0;\n  else if ( $position >= count($filter['Query']['terms']) )\n    $position = count($filter['Query']['terms']);\n  array_splice($filter['Query']['terms'], $position, 1);\n\n  return $filter;\n}\n\nfunction getPagination($pages, $page, $maxShortcuts, $query, $querySep='&amp;') {\n  global $view;\n\n  $pageText = '';\n  if ( $pages > 1 ) {\n    if ( $page ) {\n      if ( $page < 0 )\n        $page = 1;\n      if ( $page > $pages )\n        $page = $pages;\n\n      if ( $page > 1 ) {\n        if ( false && $page > 2 ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page=1'.$query.'\">&lt;&lt;</a>';\n        }\n        $pageText .= '<a href=\"?view='.$view.$querySep.'page='.($page-1).$query.'\">&lt;</a>';\n\n        $newPages = array();\n        $pagesUsed = array();\n        $lo_exp = max(2,log($page-1)/log($maxShortcuts));\n        for ( $i = 0; $i < $maxShortcuts; $i++ ) {\n          $newPage = round($page-pow($lo_exp,$i));\n          if ( isset($pagesUsed[$newPage]) )\n            continue;\n          if ( $newPage <= 1 )\n            break;\n          $pagesUsed[$newPage] = true;\n          array_unshift($newPages, $newPage);\n        }\n        if ( !isset($pagesUsed[1]) )\n          array_unshift( $newPages, 1 );\n\n        foreach ( $newPages as $newPage ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page='.$newPage.$query.'\">'.$newPage.'</a>&nbsp;';\n        }\n      } # end if page > 1\n\n      $pageText .= '-&nbsp;'.$page.'&nbsp;-';\n      if ( $page < $pages ) {\n        $newPages = array();\n        $pagesUsed = array();\n        $hi_exp = max(2,log($pages-$page)/log($maxShortcuts));\n        for ( $i = 0; $i < $maxShortcuts; $i++ ) {\n          $newPage = round($page+pow($hi_exp,$i));\n          if ( isset($pagesUsed[$newPage]) )\n            continue;\n          if ( $newPage > $pages )\n            break;\n          $pagesUsed[$newPage] = true;\n          array_push($newPages, $newPage);\n        }\n        if ( !isset($pagesUsed[$pages]) )\n          array_push($newPages, $pages);\n\n        foreach ( $newPages as $newPage ) {\n          $pageText .= '&nbsp;<a href=\"?view='.$view.$querySep.'page='.$newPage.$query.'\">'.$newPage.'</a>';\n        }\n        $pageText .= '<a href=\"?view='.$view.$querySep.'page='.($page+1).$query.'\">&gt;</a>';\n        if ( false && $page < ($pages-1) ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page='.$pages.$query.'\">&gt;&gt;</a>';\n        }\n      } # end if $page < $pages\n    }\n  }\n  return $pageText;\n}\n\nfunction sortHeader($field, $querySep='&amp;') {\n  global $view;\n  return implode($querySep, array(\n    '?view='.$view,\n    'page=1'.((isset($_REQUEST['filter']) and isset($_REQUEST['filter']['query'])) ? $_REQUEST['filter']['query'] : ''),\n    'sort_field='.$field,\n    'sort_asc='.( ( isset($_REQUEST['sort_field']) and ( $_REQUEST['sort_field'] == $field ) ) ? !$_REQUEST['sort_asc'] : 0),\n    'limit='.(isset($_REQUEST['limit']) ? validInt($_REQUEST['limit']) : ''),\n    (isset($_REQUEST['eid']) ? 'eid='.$_REQUEST['eid'] : '' ),\n  ));\n}\n\nfunction sortTag($field) {\n  if ( isset($_REQUEST['sort_field']) ) {\n    if ( $_REQUEST['sort_field'] == $field )\n      if ( $_REQUEST['sort_asc'] )\n        return '(^)';\n      else\n        return '(v)';\n  }\n  return false;\n}\n\nfunction getLoad() {\n  $load = sys_getloadavg();\n  return $load[0];\n}\n\nfunction getDiskPercent($path = ZM_DIR_EVENTS) {\n  $total = disk_total_space($path);\n  if ( $total === false ) {\n    ZM\\Error('disk_total_space returned false. Verify the web account user has access to ' . $path);\n    return 0;\n  } elseif ( $total == 0 ) {\n    ZM\\Error('disk_total_space indicates the following path has a filesystem size of zero bytes ' . $path);\n    return 100;\n  }\n  $free = disk_free_space($path);\n  if ( $free === false ) {\n    ZM\\Error('disk_free_space returned false. Verify the web account user has access to ' . $path);\n  }\n  $space = round((($total - $free) / $total) * 100);\n  return $space;\n}\n\nfunction getDiskBlocks($path = ZM_DIR_EVENTS) {\n  $df = shell_exec('df '.escapeshellarg($path));\n  $space = -1;\n  if ( preg_match('/\\s(\\d+)\\s+\\d+\\s+\\d+%/ms', $df, $matches) )\n    $space = $matches[1];\n  return $space;\n}\n\nfunction systemStats() {\n\n  $load = getLoad();\n  $diskPercent = getDiskPercent();\n  $pathMapPercent = getDiskPercent(ZM_PATH_MAP);\n  $cpus = getcpus();\n\n  $normalized_load = $load / $cpus;\n\n  # Colorize the system load stat\n  if ( $normalized_load <= 0.75 ) {\n    $htmlLoad = $load;\n  } else if ( $normalized_load <= 0.9 ) {\n    $htmlLoad = '<span class=\"warning\">'.$load.'</span>';\n  } else if ( $normalized_load <= 1.1 ) {\n    $htmlLoad = '<span class=\"error\">'.$load.'</span>';\n  } else {\n    $htmlLoad = '<span class=\"critical\">'.$load.'</span>';\n  }\n\n  # Colorize the disk space stat\n  if ( $diskPercent < 98 ) {\n    $htmlDiskPercent = $diskPercent.'%';\n  } else if ( $diskPercent <= 99 ) {\n    $htmlDiskPercent = '<span class=\"warning\">'.$diskPercent.'%</span>';\n  } else {\n    $htmlDiskPercent = '<span class=\"error\">'.$diskPercent.'%</span>';\n  }\n\n  # Colorize the PATH_MAP (usually /dev/shm) stat\n  if ( $pathMapPercent < 90 ) {\n    if ( disk_free_space(ZM_PATH_MAP) > 209715200 ) { # have to always have at least 200MiB free\n      $htmlPathMapPercent = $pathMapPercent.'%';\n    } else {\n      $htmlPathMapPercent = '<span class=\"warning\">'.$pathMapPercent.'%</span>';\n    }\n  } else if ( $pathMapPercent < 100 ) {\n    $htmlPathMapPercent = '<span class=\"warning\">'.$pathMapPercent.'%</span>';\n  } else {\n    $htmlPathMapPercent = '<span class=\"critical\">'.$pathMapPercent.'%</span>';\n  }\n\n  $htmlString = translate('Load').': '.$htmlLoad.' - '.translate('Disk').': '.$htmlDiskPercent.' - '.ZM_PATH_MAP.': '.$htmlPathMapPercent;\n\n  return $htmlString;\n}\n\nfunction getcpus() {\n\n  if ( is_readable('/proc/cpuinfo') ) { # Works on Linux\n    preg_match_all('/^processor/m', file_get_contents('/proc/cpuinfo'), $matches);\n    $num_cpus = count($matches[0]);\n  } else { # Works on BSD\n    $matches = explode(':', shell_exec('sysctl hw.ncpu'));\n    $num_cpus = trim($matches[1]);\n  }\n\n  return $num_cpus;\n}\n\n// Function to fix a problem whereby the built in PHP session handling\n// features want to put the sid as a hidden field after the form or\n// fieldset tag, neither of which will work with strict XHTML Basic.\nfunction sidField() {\n  if ( SID ) {\n    list($sessname, $sessid) = explode('=', SID);\n?>\n    <input type=\"hidden\" name=\"<?php echo $sessname ?>\" value=\"<?php echo $sessid ?>\"/>\n<?php\n  }\n}\n\nfunction verNum($version) {\n  $vNum = '';\n  $maxFields = 3;\n  $vFields = explode('.', $version);\n  array_splice($vFields, $maxFields);\n  while ( count($vFields) < $maxFields ) {\n    $vFields[] = 0;\n  }\n  foreach ( $vFields as $vField ) {\n    $vField = sprintf('%02d', $vField);\n    while ( strlen($vField) < 2 ) {\n      $vField = '0'.$vField;\n    }\n    $vNum .= $vField;\n  }\n  return $vNum;\n}\n\nfunction fixSequences() {\n  $sequence = 1;\n  $sql = 'SELECT * FROM Monitors ORDER BY Sequence ASC, Id ASC';\n  foreach( dbFetchAll($sql) as $monitor ) {\n    if ( $monitor['Sequence'] != $sequence ) {\n      dbQuery('UPDATE Monitors SET Sequence=? WHERE Id=?', array($sequence, $monitor['Id']));\n    }\n    $sequence++;\n  }\n}\n\nfunction firstSet() {\n  foreach ( func_get_args() as $arg ) {\n    if ( !empty($arg) )\n      return $arg;\n  }\n}\n\nfunction linesIntersect($line1, $line2) {\n  global $debug;\n\n  $min_x1 = min($line1[0]['x'], $line1[1]['x']);\n  $max_x1 = max($line1[0]['x'], $line1[1]['x']);\n  $min_x2 = min($line2[0]['x'], $line2[1]['x']);\n  $max_x2 = max($line2[0]['x'], $line2[1]['x']);\n  $min_y1 = min($line1[0]['y'], $line1[1]['y']);\n  $max_y1 = max($line1[0]['y'], $line1[1]['y']);\n  $min_y2 = min($line2[0]['y'], $line2[1]['y']);\n  $max_y2 = max($line2[0]['y'], $line2[1]['y']);\n\n  // Checking if bounding boxes intersect\n  if ( $max_x1 < $min_x2 || $max_x2 < $min_x1 ||$max_y1 < $min_y2 || $max_y2 < $min_y1 ) {\n    if ( $debug ) echo 'Not intersecting, out of bounds<br>';\n    return false;\n  }\n\n  $dx1 = $line1[1]['x'] - $line1[0]['x'];\n  $dy1 = $line1[1]['y'] - $line1[0]['y'];\n  $dx2 = $line2[1]['x'] - $line2[0]['x'];\n  $dy2 = $line2[1]['y'] - $line2[0]['y'];\n\n  if ( $dx1 ) {\n    $m1 = $dy1/$dx1;\n    $b1 = $line1[0]['y'] - ($m1 * $line1[0]['x']);\n  } else {\n    $b1 = $line1[0]['y'];\n  }\n  if ( $dx2 ) {\n    $m2 = $dy2/$dx2;\n    $b2 = $line2[0]['y'] - ($m2 * $line2[0]['x']);\n  } else {\n    $b2 = $line2[0]['y'];\n  }\n\n  if ( $dx1 && $dx2 ) { // Both not vertical\n    if ( $m1 != $m2 ) { // Not parallel or colinear\n      $x = ( $b2 - $b1 ) / ( $m1 - $m2 );\n\n      if ( $x >= $min_x1 && $x <= $max_x1 && $x >= $min_x2 && $x <= $max_x2 ) {\n        if ( $debug ) echo \"Intersecting, at x $x<br>\";\n        return true;\n      } else {\n        if ( $debug ) echo \"Not intersecting, out of range at x $x<br>\";\n        return false;\n      }\n    } elseif ( $b1 == $b2 ) {\n      // Colinear, must overlap due to box check, intersect?\n      if ( $debug ) echo 'Intersecting, colinear<br>';\n      return true;\n    } else {\n      // Parallel\n      if ( $debug ) echo 'Not intersecting, parallel<br>';\n      return false;\n    }\n  } elseif ( !$dx1 ) { // Line 1 is vertical\n    $y = ( $m2 * $line1[0]['x'] ) * $b2;\n    if ( $y >= $min_y1 && $y <= $max_y1 ) {\n      if ( $debug ) echo \"Intersecting, at y $y<br>\";\n      return true;\n    } else {\n      if ( $debug ) echo \"Not intersecting, out of range at y $y<br>\";\n      return false;\n    }\n  } elseif ( !$dx2 ) { // Line 2 is vertical\n    $y = ( $m1 * $line2[0]['x'] ) * $b1;\n    if ( $y >= $min_y2 && $y <= $max_y2 ) {\n      if ( $debug ) echo \"Intersecting, at y $y<br>\";\n      return true;\n    } else {\n      if ( $debug ) echo \"Not intersecting, out of range at y $y<br>\";\n      return false;\n    }\n  } else { // Both lines are vertical\n    if ( $line1[0]['x'] == $line2[0]['x'] ) {\n      // Colinear, must overlap due to box check, intersect?\n      if ( $debug ) echo 'Intersecting, vertical, colinear<br>';\n      return true;\n    } else {\n      // Parallel\n      if ( $debug ) echo 'Not intersecting, vertical, parallel<br>';\n      return false;\n    }\n  }\n  if ( $debug ) echo 'Whoops, unexpected scenario<br>';\n  return false;\n}\n\nfunction isSelfIntersecting($points) {\n  global $debug;\n\n  $n_coords = count($points);\n  $edges = array();\n  for ( $j = 0, $i = $n_coords-1; $j < $n_coords; $i = $j++ ) {\n    $edges[] = array( $points[$i], $points[$j] );\n  }\n\n  for ( $i = 0; $i <= ($n_coords-2); $i++ ) {\n    for ( $j = $i+2; $j < $n_coords+min(0,$i-1); $j++ ) {\n      if ( $debug ) echo \"Checking $i and $j<br>\";\n      if ( linesIntersect($edges[$i], $edges[$j]) ) {\n        if ( $debug ) echo \"Lines $i and $j intersect<br>\";\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction getPolyCentre($points, $area=0) {\n  $cx = 0.0;\n  $cy = 0.0;\n  if ( !$area )\n    $area = getPolyArea($points);\n  for ( $i = 0, $j = count($points)-1; $i < count($points); $j = $i++ ) {\n    $ct = ($points[$i]['x'] * $points[$j]['y']) - ($points[$j]['x'] * $points[$i]['y']);\n    $cx += ($points[$i]['x'] + $points[$j]['x']) * $ct;\n    $cy += ($points[$i]['y'] + $points[$j]['y']) * $ct;\n  }\n  $cx = intval(round(abs($cx/(6.0*$area))));\n  $cy = intval(round(abs($cy/(6.0*$area))));\n  return array('x'=>$cx, 'y'=>$cy);\n}\n\nfunction _CompareXY($a, $b) {\n  if ( $a['min_y'] == $b['min_y'] )\n    return intval($a['min_x'] - $b['min_x']);\n  else\n    return intval($a['min_y'] - $b['min_y']);\n}\n\nfunction _CompareX($a, $b) {\n  return intval($a['min_x'] - $b['min_x']);\n}\n\nfunction getPolyArea($points) {\n  global $debug;\n\n  $n_coords = count($points);\n  $global_edges = array();\n  for ( $j = 0, $i = $n_coords-1; $j < $n_coords; $i = $j++ ) {\n    $x1 = $points[$i]['x'];\n    $x2 = $points[$j]['x'];\n    $y1 = $points[$i]['y'];\n    $y2 = $points[$j]['y'];\n\n    //printf( \"x1:%d,y1:%d x2:%d,y2:%d\\n\", x1, y1, x2, y2 );\n    if ( $y1 == $y2 )\n      continue;\n\n    $dx = $x2 - $x1;\n    $dy = $y2 - $y1;\n\n    $global_edges[] = array(\n        'min_y' => $y1<$y2?$y1:$y2,\n        'max_y' => ($y1<$y2?$y2:$y1)+1,\n        'min_x' => $y1<$y2?$x1:$x2,\n        '_1_m' => $dx/$dy,\n        );\n  }\n\n  usort($global_edges, '_CompareXY');\n\n  if ( $debug ) {\n    for ( $i = 0; $i < count($global_edges); $i++ ) {\n      printf('%d: min_y: %d, max_y:%d, min_x:%.2f, 1/m:%.2f<br>',\n        $i,\n        $global_edges[$i]['min_y'],\n        $global_edges[$i]['max_y'],\n        $global_edges[$i]['min_x'],\n        $global_edges[$i]['_1_m']);\n    }\n  }\n\n  $area = 0.0;\n  $active_edges = array();\n  $y = $global_edges[0]['min_y'];\n  do {\n    for ( $i = 0; $i < count($global_edges); $i++ ) {\n      if ( $global_edges[$i]['min_y'] == $y ) {\n        if ( $debug ) printf('Moving global edge<br>');\n        $active_edges[] = $global_edges[$i];\n        array_splice($global_edges, $i, 1);\n        $i--;\n      } else {\n        break;\n      }\n    }\n    usort($active_edges, '_CompareX');\n    if ( $debug ) {\n      for ( $i = 0; $i < count($active_edges); $i++ ) {\n        printf('%d - %d: min_y: %d, max_y:%d, min_x:%.2f, 1/m:%.2f<br>',\n          $y, $i,\n          $active_edges[$i]['min_y'],\n          $active_edges[$i]['max_y'],\n          $active_edges[$i]['min_x'],\n          $active_edges[$i]['_1_m']);\n      }\n    }\n    $last_x = 0;\n    $row_area = 0;\n    $parity = false;\n    for ( $i = 0; $i < count($active_edges); $i++ ) {\n      $x = intval(round($active_edges[$i]['min_x']));\n      if ( $parity ) {\n        $row_area += ($x - $last_x)+1;\n        $area += $row_area;\n      }\n      if ( $active_edges[$i]['max_y'] != $y )\n        $parity = !$parity;\n      $last_x = $x;\n    }\n    if ( $debug ) printf('%d: Area:%d<br>', $y, $row_area);\n    $y++;\n    for ( $i = 0; $i < count($active_edges); $i++ ) {\n      if ( $y >= $active_edges[$i]['max_y'] ) { // Or >= as per sheets\n        if ( $debug ) printf('Deleting active_edge<br>');\n        array_splice($active_edges, $i, 1);\n        $i--;\n      } else {\n        $active_edges[$i]['min_x'] += $active_edges[$i]['_1_m'];\n      }\n    }\n  } while ( count($global_edges) || count($active_edges) );\n  if ( $debug ) printf('Area:%d<br>', $area);\n  return $area;\n}\n\nfunction getPolyAreaOld($points) {\n  $area = 0.0;\n  $edge = 0.0;\n  for ( $i = 0, $j = count($points)-1; $i < count($points); $j = $i++ ) {\n    $x_diff = ($points[$i]['x'] - $points[$j]['x']);\n    $y_diff = ($points[$i]['y'] - $points[$j]['y']);\n    $y_sum = ($points[$i]['y'] + $points[$j]['y']);\n    $trap_edge = sqrt(pow(abs($x_diff)+1,2) + pow(abs($y_diff)+1,2) );\n    $edge += $trap_edge;\n    $trap_area = ($x_diff * $y_sum );\n    $area += $trap_area;\n    printf('%d->%d, %d-%d=%.2f, %d+%d=%.2f(%.2f), %.2f, %.2f<br>',\n      $i, $j,\n      $points[$i]['x'], $points[$j]['x'],\n      $x_diff,\n      $points[$i]['y'], $points[$j]['y'],\n      $y_sum, $y_diff, $trap_area, $trap_edge);\n  }\n  $edge = intval(round(abs($edge)));\n  $area = intval(round((abs($area)+$edge)/2));\n  echo \"E:$edge<br>\";\n  echo \"A:$area<br>\";\n  return $area;\n}\n\nfunction mapCoords($a) {\n  return $a['x'].','.$a['y'];\n}\n\nfunction pointsToCoords($points) {\n  return join(' ', array_map('mapCoords', $points));\n}\n\nfunction coordsToPoints($coords) {\n  $points = array();\n  if ( preg_match_all('/(\\d+,\\d+)+/', $coords, $matches) ) {\n    for ( $i = 0; $i < count($matches[1]); $i++ ) {\n      if ( preg_match('/(\\d+),(\\d+)/', $matches[1][$i], $cmatches) ) {\n        $points[] = array('x'=>$cmatches[1], 'y'=>$cmatches[2]);\n      } else {\n        echo('Bogus coordinates ('.$matches[$i].')');\n        return false;\n      }\n    }\n  } else {\n    echo('Bogus coordinate string '.$coords);\n    return false;\n  }\n  return $points;\n}\n\nfunction limitPoints(&$points, $min_x, $min_y, $max_x, $max_y) {\n  foreach ( $points as &$point ) {\n    if ( $point['x'] < $min_x ) {\n      ZM\\Debug('Limiting point x'.$point['x'].' to min_x '.$min_x);\n      $point['x'] = $min_x;\n    } else if ( $point['x'] > $max_x ) {\n      ZM\\Debug('Limiting point x'.$point['x'].' to max_x '.$max_x);\n      $point['x'] = $max_x;\n    }\n    if ( $point['y'] < $min_y ) {\n      ZM\\Debug('Limiting point y'.$point['y'].' to min_y '.$min_y);\n      $point['y'] = $min_y;\n    } else if ( $point['y'] > $max_y ) {\n      ZM\\Debug('Limiting point y'.$point['y'].' to max_y '.$max_y);\n      $point['y'] = $max_y;\n    }\n  } // end foreach point\n} // end function limitPoints( $points, $min_x, $min_y, $max_x, $max_y )\n\nfunction scalePoints(&$points, $scale) {\n  foreach ( $points as &$point ) {\n    $point['x'] = reScale($point['x'], $scale);\n    $point['y'] = reScale($point['y'], $scale);\n  }\n}\n\nfunction getLanguages() {\n  $langs = array();\n  foreach ( glob('lang/*_*.php') as $file ) {\n    preg_match('/([^\\/]+_.+)\\.php/', $file, $matches);\n    $langs[$matches[1]] = $matches[1];\n  }\n  return $langs;\n}\n\nfunction trimString($string, $length) {\n  return preg_replace('/^(.{'.$length.',}?)\\b.*$/', '\\\\1&hellip;', $string);\n}\n\nfunction monitorIdsToNames($ids) {\n  global $mITN_monitors;\n  if ( !$mITN_monitors ) {\n    $sql = 'SELECT Id, Name FROM Monitors';\n    foreach ( dbFetchAll($sql) as $monitor ) {\n      $mITN_monitors[$monitor['Id']] = $monitor;\n    }\n  }\n  $names = array();\n  if ( ! is_array($ids) ) {\n    $ids = preg_split('/\\s*,\\s*/', $ids);\n  }\n  foreach ( $ids as $id ) {\n    if ( visibleMonitor($id) ) {\n      if ( isset($mITN_monitors[$id]) ) {\n        $names[] = $mITN_monitors[$id]['Name'];\n      }\n    }\n  }\n  $name_string = join(', ', $names);\n  return $name_string;\n}\n\nfunction initX10Status() {\n  global $x10_status;\n\n  if ( !isset($x10_status) ) {\n    $socket = socket_create(AF_UNIX, SOCK_STREAM, 0);\n    if ( $socket < 0 ) {\n      ZM\\Fatal('socket_create() failed: '.socket_strerror($socket));\n    }\n    $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';\n    if ( @socket_connect($socket, $sock_file) ) {\n      $command = 'status';\n      if ( !socket_write($socket, $command) ) {\n        ZM\\Fatal('Can\\'t write to control socket: '.socket_strerror(socket_last_error($socket)));\n      }\n      socket_shutdown($socket, 1);\n      $x10Output = '';\n      while ( $x10Response = socket_read($socket, 256) ) {\n        $x10Output .= $x10Response;\n      }\n      socket_close($socket);\n    } else {\n      // Can't connect so use script\n      $command = ZM_PATH_BIN.'/zmx10.pl --command status';\n      //$command .= \" 2>/dev/null >&- <&- >/dev/null\";\n\n      $x10Output = exec(escapeshellcmd($command));\n    }\n    foreach ( explode(\"\\n\", $x10Output) as $x10Response ) {\n      if ( preg_match('/^(\\d+)\\s+(.+)$/', $x10Response, $matches) ) {\n        $x10_status[$matches[1]] = $matches[2];\n      }\n    }\n  }\n}\n\nfunction getDeviceStatusX10($key) {\n  global $x10_status;\n\n  initX10Status();\n\n  if ( empty($x10_status[$key]) || !($status = $x10_status[$key]) )\n    $status = 'unknown';\n  return $status;\n}\n\nfunction setDeviceStatusX10($key, $status) {\n  $socket = socket_create(AF_UNIX, SOCK_STREAM, 0);\n  if ( $socket < 0 ) {\n    ZM\\Fatal('socket_create() failed: '.socket_strerror($socket));\n  }\n  $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';\n  if ( @socket_connect($socket, $sock_file) ) {\n    $command = \"$status;$key\";\n    if ( !socket_write($socket, $command) ) {\n      ZM\\Fatal('Can\\'t write to control socket: '.socket_strerror(socket_last_error($socket)));\n    }\n    socket_shutdown($socket, 1);\n    $x10Response = socket_read($socket, 256);\n    socket_close($socket);\n  } else {\n    // Can't connect so use script\n    $command = ZM_PATH_BIN.'/zmx10.pl --command '.escapeshellarg($status);\n    $command .= ' --unit-code '.escapeshellarg( $key );\n    //$command .= \" 2>/dev/null >&- <&- >/dev/null\";\n    $x10Response = exec($command);\n  }\n  if ( preg_match('/^'.$key.'\\s+(.*)/', $x10Response, $matches) )\n    $status = $matches[1];\n  else\n    $status = 'unknown';\n  return $status;\n}\n\nfunction logState() {\n  $state = 'ok';\n\n  $levelCounts = array(\n      ZM\\Logger::FATAL => array( ZM_LOG_ALERT_FAT_COUNT, ZM_LOG_ALARM_FAT_COUNT ),\n      ZM\\Logger::ERROR => array( ZM_LOG_ALERT_ERR_COUNT, ZM_LOG_ALARM_ERR_COUNT ),\n      ZM\\Logger::WARNING => array( ZM_LOG_ALERT_WAR_COUNT, ZM_LOG_ALARM_WAR_COUNT ),\n      );\n\n  # This is an expensive request, as it has to hit every row of the Logs Table\n  $sql = 'SELECT Level, COUNT(Level) AS LevelCount FROM Logs WHERE Level < '.ZM\\Logger::INFO.' AND TimeKey > unix_timestamp(now() - interval '.ZM_LOG_CHECK_PERIOD.' second) GROUP BY Level ORDER BY Level ASC';\n  $counts = dbFetchAll($sql);\n  if ( $counts ) {\n    foreach ( $counts as $count ) {\n      if ( $count['Level'] <= ZM\\Logger::PANIC )\n        $count['Level'] = ZM\\Logger::FATAL;\n      if ( !($levelCount = $levelCounts[$count['Level']]) ) {\n        ZM\\Error('Unexpected Log level '.$count['Level']);\n        next;\n      }\n      if ( $levelCount[1] && $count['LevelCount'] >= $levelCount[1] ) {\n        $state = 'alarm';\n        break;\n      } elseif ( $levelCount[0] && $count['LevelCount'] >= $levelCount[0] ) {\n        $state = 'alert';\n      }\n    }\n  }\n  return $state;\n}\n\nfunction isVector(&$array) {\n  $next_key = 0;\n  foreach ( array_keys($array) as $key ) {\n    if ( !is_int($key) )\n      return false;\n    if ( $key != $next_key++ )\n      return false;\n  }\n  return true;\n}\n\nfunction checkJsonError($value) {\n  if ( function_exists('json_last_error') ) {\n    $value = var_export($value, true);\n    switch ( json_last_error() ) {\n      case JSON_ERROR_DEPTH :\n        ZM\\Error(\"Unable to decode JSON string '$value', maximum stack depth exceeded\");\n        break;\n      case JSON_ERROR_CTRL_CHAR :\n        ZM\\Error(\"Unable to decode JSON string '$value', unexpected control character found\");\n        break;\n      case JSON_ERROR_STATE_MISMATCH :\n        ZM\\Error(\"Unable to decode JSON string '$value', invalid or malformed JSON\");\n        break;\n      case JSON_ERROR_SYNTAX :\n        ZM\\Error(\"Unable to decode JSON string '$value', syntax error\");\n        break;\n      default :\n        ZM\\Error(\"Unable to decode JSON string '$value', unexpected error \".json_last_error());\n        break;\n      case JSON_ERROR_NONE:\n        break;\n    }\n  }\n}\n\nfunction jsonEncode(&$value) {\n  if ( function_exists('json_encode') ) {\n    $string = json_encode( $value );\n    checkJsonError($value);\n    return $string;\n  }\n\n  switch ( gettype($value) ) {\n    case 'double':\n    case 'integer':\n      return $value;\n    case 'boolean':\n      return $value ? 'true' : 'false';\n    case 'string':\n      return '\"'.preg_replace(\"/\\r?\\n/\", '\\\\n', addcslashes($value,'\"\\\\/')).'\"';\n    case 'NULL':\n      return 'null';\n    case 'object':\n      return '\"Object '.addcslashes(get_class($value),'\"\\\\/').'\"';\n    case 'array':\n      if ( isVector( $value ) )\n        return '['.join(',', array_map('jsonEncode', $value)).']';\n      else {\n        $result = '{';\n        foreach ($value as $subkey => $subvalue ) {\n          if ( $result != '{' )\n            $result .= ',';\n          $result .= '\"'.$subkey.'\":'.jsonEncode($subvalue);\n        }\n        return $result.'}';\n      }\n    default:\n      return '\"'.addcslashes(gettype($value),'\"\\\\/').'\"';\n  }\n}\n\nfunction jsonDecode($value) {\n  if ( function_exists('json_decode') ) {\n    $object = json_decode($value, true);\n    checkJsonError($value);\n    return $object;\n  }\n\n  $comment = false;\n  $unescape = false;\n  $out = '$result=';\n  for ( $i = 0; $i < strlen($value); $i++ ) {\n    if ( !$comment ) {\n      if ( ($value[$i] == '{') || ($value[$i] == '[') ) {\n        $out .= ' array(';\n      } else if ( ($value[$i] == '}') || ($value[$i] == ']') ) {\n        $out .= ')';\n      } else if ( $value[$i] == ':' ) {\n        $out .= '=>';\n      } else {\n        $out .= $value[$i];\n      }\n    } else if ( !$unescape ) {\n      if ( $value[$i] == '\\\\' )\n        $unescape = true;\n      else\n        $out .= $value[$i];\n    } else {\n      if ( $value[$i] != '/' )\n        $out .= '\\\\';\n      $out .= $value[$i];\n      $unescape = false;\n    }\n    if ( $value[$i] == '\"' ) {\n      $comment = !$comment;\n    }\n  }\n  eval($out.';');\n  return $result;\n}\n\ndefine('HTTP_STATUS_OK', 200);\ndefine('HTTP_STATUS_BAD_REQUEST', 400);\ndefine('HTTP_STATUS_FORBIDDEN', 403);\n\nfunction ajaxError($message, $code=HTTP_STATUS_OK) {\n  ZM\\Error($message);\n  if ( function_exists('ajaxCleanup') )\n    ajaxCleanup();\n  if ( $code == HTTP_STATUS_OK ) {\n    $response = array('result'=>'Error', 'message'=>$message);\n    header('Content-type: application/json');\n    exit(jsonEncode($response));\n  }\n  header(\"HTTP/1.0 $code $message\");\n  exit();\n}\n\nfunction ajaxResponse($result=false) {\n  if ( function_exists('ajaxCleanup') )\n    ajaxCleanup();\n  $response = array('result'=>'Ok');\n  if ( is_array($result) ) {\n    $response = array_merge($response, $result);\n  } else if ( !empty($result) ) {\n    $response['message'] = $result;\n  }\n  header('Content-type: application/json');\n  exit(jsonEncode($response));\n}\n\nfunction generateConnKey() {\n  return rand(1, 999999);\n}\n\nfunction detaintPath($path) {\n  // Remove any absolute paths, or relative ones that want to go up\n  do {\n    $path = str_replace('../', '', $path, $count);\n  } while($count);\n  $path = ltrim($path, '/');\n  return $path;\n}\n\nfunction cache_bust($file) {\n  # Use the last modified timestamp to create a link that gets a different filename\n  # To defeat caching.  Should probably use md5 hash\n  $parts = pathinfo($file);\n  global $css;\n  $dirname = str_replace('/', '_', $parts['dirname']);\n  $cacheFile = $dirname.'_'.$parts['filename'].'-'.$css.'-'.filemtime($file).'.'.$parts['extension'];\n  if ( file_exists(ZM_DIR_CACHE.'/'.$cacheFile) or symlink(ZM_PATH_WEB.'/'.$file, ZM_DIR_CACHE.'/'.$cacheFile) ) {\n    return 'cache/'.$cacheFile;\n  } else {\n    ZM\\Warning('Failed linking '.$file.' to '.$cacheFile);\n  }\n  return $file;\n}\n\nfunction getSkinFile($file) {\n  global $skinBase;\n  $skinFile = false;\n  foreach ( $skinBase as $skin ) {\n    $tempSkinFile = detaintPath('skins/'.$skin.'/'.$file);\n    if ( file_exists($tempSkinFile) )\n      $skinFile = $tempSkinFile;\n  }\n  return $skinFile;\n}\n\nfunction getSkinIncludes($file, $includeBase=false, $asOverride=false) {\n  global $skinBase;\n  $skinFile = false;\n  foreach ( $skinBase as $skin ) {\n    $tempSkinFile = detaintPath('skins/'.$skin.'/'.$file);\n    if ( file_exists($tempSkinFile) )\n      $skinFile = $tempSkinFile;\n  }\n  $includeFiles = array();\n  if ( $asOverride ) {\n    if ( $skinFile )\n      $includeFiles[] = $skinFile;\n    else if ( $includeBase )\n      $includeFiles[] = $file;\n  } else {\n    if ( $includeBase )\n      $includeFiles[] = $file;\n    if ( $skinFile )\n      $includeFiles[] = $skinFile;\n  }\n  return $includeFiles;\n}\n\nfunction requestVar($name, $default='') {\n  return isset($_REQUEST[$name]) ? validHtmlStr($_REQUEST[$name]) : $default;\n}\n\n// For numbers etc in javascript or tags etc\nfunction validInt($input) {\n  return preg_replace('/[^\\-\\d]/', '', $input);\n}\n\nfunction validCardinal($input) {\n  return preg_replace('/\\D/', '', $input);\n}\n\nfunction validNum( $input ) {\n  return preg_replace('/[^\\d.-]/', '', $input);\n}\n\n// For general strings\nfunction validStr($input) {\n  if (is_null($input)) return '';\n  return strip_tags($input);\n}\n\n// For strings in javascript or tags etc, expected to be in quotes so further quotes escaped rather than converted\nfunction validJsStr($input) {\n  if (is_null($input)) return '';\n  return strip_tags(addslashes($input));\n}\n\n// For general text in pages outside of tags or quotes so quotes converted to entities\nfunction validHtmlStr($input) {\n  if (is_null($input)) return '';\n  return htmlspecialchars($input, ENT_QUOTES);\n}\n\n/* options['width'] is the desired view width not necessarily the image width requested.\n * It can be % in which case we us it to set the scale\n * It can be px in which case we can use it to calculate the scale\n * Same width height.  If both are set we should calculate the smaller resulting scale\n */\nfunction getStreamHTML($monitor, $options = array()) {\n\n  if ( isset($options['scale']) and $options['scale'] != '' ) {\n    if ($options['scale'] != 'auto' && $options['scale'] != '0') {\n      #ZM\\Warning('Setting dimensions from scale:'.$options['scale']);\n      $options['width'] = reScale($monitor->ViewWidth(), $options['scale']).'px';\n      $options['height'] = reScale($monitor->ViewHeight(), $options['scale']).'px';\n    } else if ( ! ( isset($options['width']) or isset($options['height']) ) ) {\n      $options['width'] = '100%';\n      $options['height'] = 'auto';\n    }\n  } else {\n    $options['scale'] = 100;\n    # scale is empty or 100\n    # There may be a fixed width applied though, in which case we need to leave the height empty\n    if ( ! ( isset($options['width']) and $options['width'] ) ) {\n      # Havn't specified width.  If we specified height, then we should\n      # use a width that keeps the aspect ratio, otherwise no scaling, \n      # no dimensions, so assume the dimensions of the Monitor\n\n      if ( ! (isset($options['height']) and $options['height']) ) {\n        # If we havn't specified any scale or dimensions, then we must be using CSS to scale it in a dynamic way. Can't make any assumptions.\n        #$options['width'] = $monitor->ViewWidth().'px';\n        #$options['height'] = $monitor->ViewHeight().'px';\n      }\n    } else {\n      #ZM\\Warning(\"Have width \".$options['width']);\n      if ( preg_match('/^(\\d+)px$/', $options['width'], $matches) ) {\n        $scale = intval(100*$matches[1]/$monitor->ViewWidth());\n        #ZM\\Warning(\"Scale is $scale\");\n        if ( $scale < $options['scale'] )\n          $options['scale'] = $scale;\n      } else if ( preg_match('/^(\\d+)%$/', $options['width'], $matches) ) {\n        $scale = intval($matches[1]);\n        if ( $scale < $options['scale'] )\n          $options['scale'] = $scale;\n      } else {\n        ZM\\Warning('Invalid value for width: '.$options['width']);\n      }\n    }\n  }\n  if ( ! isset($options['mode'] ) ) {\n    $options['mode'] = 'stream';\n  }\n  if ( ! isset($options['width'] ) )\n    $options['width'] = 0;\n  if ( ! isset($options['height'] ) )\n    $options['height'] = 0;\n\n  $options['maxfps'] = ZM_WEB_VIDEO_MAXFPS;\n  if ( $monitor->StreamReplayBuffer() )\n    $options['buffer'] = $monitor->StreamReplayBuffer();\n  //Warning(\"width: \" . $options['width'] . ' height: ' . $options['height']. ' scale: ' . $options['scale'] );\n\n  if ( $monitor->Type() == 'WebSite' ) {\n    return getWebSiteUrl(\n      'liveStream'.$monitor->Id(), $monitor->Path(),\n      ( isset($options['width']) ? $options['width'] : NULL ),\n      ( isset($options['height']) ? $options['height'] : NULL ),\n      $monitor->Name()\n    );\n  //FIXME, the width and height of the image need to be scaled.\n  } else if ( ZM_WEB_STREAM_METHOD == 'mpeg' && ZM_MPEG_LIVE_FORMAT ) {\n    $streamSrc = $monitor->getStreamSrc( array(\n      'mode'   => 'mpeg',\n      'scale'  => (isset($options['scale'])?$options['scale']:100),\n      'bitrate'=> ZM_WEB_VIDEO_BITRATE,\n      'maxfps' => ZM_WEB_VIDEO_MAXFPS,\n      'format' => ZM_MPEG_LIVE_FORMAT\n    ) );\n    return getVideoStreamHTML( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], ZM_MPEG_LIVE_FORMAT, $monitor->Name() );\n  } else if ( $options['mode'] == 'stream' and canStream() ) {\n    $options['mode'] = 'jpeg';\n    $streamSrc = $monitor->getStreamSrc($options);\n\n    if ( canStreamNative() )\n      return getImageStreamHTML( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], $monitor->Name());\n    elseif ( canStreamApplet() )\n      // Helper, empty widths and heights really don't work.\n      return getHelperStream( 'liveStream'.$monitor->Id(), $streamSrc,\n          $options['width'] ? $options['width'] : $monitor->ViewWidth(),\n          $options['height'] ? $options['height'] : $monitor->ViewHeight(),\n          $monitor->Name());\n  } else {\n    if ( $options['mode'] == 'stream' ) {\n      ZM\\Info('The system has fallen back to single jpeg mode for streaming. Consider enabling Cambozola or upgrading the client browser.');\n    }\n    $options['mode'] = 'single';\n    $streamSrc = $monitor->getStreamSrc($options);\n    return getImageStill('liveStream'.$monitor->Id(), $streamSrc,\n      (isset($options['width']) ? $options['width'] : null),\n      (isset($options['height']) ? $options['height'] : null),\n      $monitor->Name());\n  }\n} // end function getStreamHTML\n\nfunction getStreamMode( ) {\n  $streamMode = '';\n  if ( (ZM_WEB_STREAM_METHOD == 'mpeg') && ZM_MPEG_LIVE_FORMAT ) {\n    $streamMode = 'mpeg';\n  } elseif ( canStream() ) {\n    $streamMode = 'jpeg';\n  } else {\n    $streamMode = 'single';\n    ZM\\Info('The system has fallen back to single jpeg mode for streaming. Consider enabling Cambozola or upgrading the client browser.');\n  }\n  return $streamMode;\n} // end function getStreamMode\n\nfunction folder_size($dir) {\n  $size = 0;\n  foreach (glob(rtrim($dir, '/').'/*', GLOB_NOSORT) as $each) {\n    $size += is_file($each) ? filesize($each) : folder_size($each);\n  }\n  return $size;\n} // end function folder_size\n\nfunction human_filesize($size, $precision = 2) {\n  if ($size === null) {\n    return 'null';\n  }\n  $units = array('B ','kB','MB','GB','TB','PB','EB','ZB','YB');\n  $step = 1024;\n  $i = 0;\n  while (($size / $step) > 0.9) {\n    $size = $size / $step;\n    $i++;\n  }\n  # The idea is that we can right align this and have the digits columns line up nicely.\n  return sprintf('%.'.$precision.'f', round($size, $precision)).$units[$i];\n}\n\nfunction csrf_startup() {\n  csrf_conf('rewrite-js', 'includes/csrf/csrf-magic.js');\n}\n\nfunction check_timezone() {\n  $now = new DateTime();\n\n  $sys_tzoffset = trim(shell_exec('date \"+%z\"'));\n  $php_tzoffset = trim($now->format('O'));\n  $mysql_tzoffset = trim(dbFetchOne(\n    'SELECT TIME_FORMAT(TIMEDIFF(NOW(), UTC_TIMESTAMP),\\'%H%i\\');',\n    'TIME_FORMAT(TIMEDIFF(NOW(), UTC_TIMESTAMP),\\'%H%i\\')'\n  ));\n\n  #Debug(\"System timezone offset determine to be: $sys_tzoffset,\\x20\n                 #PHP timezone offset determine to be: $php_tzoffset,\\x20\n                 #Mysql timezone offset determine to be: $mysql_tzoffset\n               #\");\n\n  if ( $sys_tzoffset != $php_tzoffset )\n    ZM\\Error(\"ZoneMinder is not configured properly: php's date.timezone $php_tzoffset does not match the system timezone $sys_tzoffset! Please check Options->System->Timezone.\");\n\n  if ( $sys_tzoffset != $mysql_tzoffset )\n    ZM\\Error('ZoneMinder is not configured properly: mysql\\'s timezone does not match the system timezone! Event lists will display incorrect times.');\n\n  if (!ini_get('date.timezone') || !date_default_timezone_set(ini_get('date.timezone')))\n    ZM\\Error('ZoneMinder is not configured properly: php\\'s date.timezone is not set to a valid timezone. Please check Options->System->Timezone');\n\n}\n\nfunction unparse_url($parsed_url, $substitutions = array() ) {\n  $fields = array('scheme','host','port','user','pass','path','query','fragment');\n\n  foreach ( $fields as $field ) {\n    if ( isset( $substitutions[$field] ) ) {\n      $parsed_url[$field] = $substitutions[$field];\n    }\n  }\n  $scheme   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';\n  $host     = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n  $port     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';\n  $user     = isset($parsed_url['user']) ? $parsed_url['user'] : '';\n  $pass     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : '';\n  $pass     = ($user || $pass) ? $pass.'@' : '';\n  $path     = isset($parsed_url['path']) ? $parsed_url['path'] : '';\n  $query    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';\n  $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';\n  return $scheme.$user.$pass.$host.$port.$path.$query.$fragment;\n}\n\n// PP - POST request handler for PHP which does not need extensions\n// credit: http://wezfurlong.org/blog/2006/nov/http-post-from-php-without-curl/\n\nfunction do_request($method, $url, $data=array(), $optional_headers = null) {\n  global $php_errormsg;\n\n  $params = array('http' => array(\n        'method' => $method,\n        'content' => $data\n        ));\n  if ( $optional_headers !== null ) {\n    $params['http']['header'] = $optional_headers;\n  }\n  $ctx = stream_context_create($params);\n  $fp = @fopen($url, 'rb', false, $ctx);\n  if ( !$fp ) {\n    throw new Exception(\"Problem with $url, $php_errormsg\");\n  }\n  $response = @stream_get_contents($fp);\n  if ( $response === false ) {\n    throw new Exception(\"Problem reading data from $url, $php_errormsg\");\n  }\n  return $response;\n}\n\nfunction do_post_request($url, $data, $optional_headers = null) {\n  $params = array('http' => array(\n        'method' => 'POST',\n        'content' => $data\n        ));\n  if ( $optional_headers !== null ) {\n    $params['http']['header'] = $optional_headers;\n  }\n  $ctx = stream_context_create($params);\n  $fp = @fopen($url, 'rb', false, $ctx);\n  if ( !$fp ) {\n    throw new Exception('Problem with '.$url.', '\n      .print_r(error_get_last(),true));\n  }\n  $response = @stream_get_contents($fp);\n  if ( $response === false ) {\n    throw new Exception('Problem reading data from '.$url.', data: '.print_r($params,true)\n      .print_r(error_get_last(),true));\n  }\n  return $response;\n}\n\n// The following works around php not being built with semaphore functions.\nif ( !function_exists('sem_get') ) {\n  function sem_get($key) {\n    return fopen(__FILE__ . '.sem.' . $key, 'w+');\n  }\n  function sem_acquire($sem_id) {\n    return flock($sem_id, LOCK_EX);\n  }\n  function sem_release($sem_id) {\n    return flock($sem_id, LOCK_UN);\n  }\n}\n\nif ( !function_exists('ftok') ) {\n  function ftok($filename = '', $proj = '') {\n    if ( empty($filename) || !file_exists($filename) ) {\n      return -1;\n    } else {\n      $filename = $filename . (string) $proj;\n      for($key = array(); sizeof($key) < strlen($filename); $key[] = ord(substr($filename, sizeof($key), 1)));\n      return dechex(array_sum($key));\n    }\n  }\n}\n\nfunction getAffectedIds( $name ) {\n  $names = $name.'s';\n  $ids = array();\n\tif ( isset($_REQUEST[$names]) ) {\n\t\tif ( is_array($_REQUEST[$names]) ) {\n\t\t\t$ids = $_REQUEST[$names];\n\t\t} else {\n\t\t\t$ids = array($_REQUEST[$names]);\n\t\t}\n\t} else if ( isset($_REQUEST[$name]) ) {\n\t\tif ( is_array($_REQUEST[$name]) ) {\n\t\t\t$ids = $_REQUEST[$name];\n\t\t} else {\n\t\t\t$ids = array($_REQUEST[$name]);\n\t\t}\n\t}\n\treturn $ids;\n}\n\nfunction format_duration($time, $separator=':') {\n  return sprintf('%02d%s%02d%s%02d', floor($time/3600), $separator, ($time/60)%60, $separator, $time%60);\n}\n\nfunction array_recursive_diff($aArray1, $aArray2) {\n  $aReturn = array();\n  if ( ! (is_array($aArray1) and is_array($aArray2) ) ) {\n    $backTrace = debug_backtrace();\n    ZM\\Warning('Bad arrays passed 1:' . print_r($aArray1,true) . PHP_EOL.'2: '.print_r($aArray2,true).PHP_EOL.' from: '.print_r($backTrace,true));\n    return;\n  }\n\n  foreach ( $aArray1 as $mKey => $mValue ) {\n    if ( array_key_exists($mKey, $aArray2) ) {\n      if ( is_array($mValue) ) {\n        if ( is_array($aArray2[$mKey]) ) {\n          $aRecursiveDiff = array_recursive_diff($mValue, $aArray2[$mKey]);\n          if ( count($aRecursiveDiff) ) {\n            $aReturn[$mKey] = $aRecursiveDiff;\n          }\n        } else {\n          $aReturn[$mKey] = $mValue;\n        }\n      } else {\n        if ( $mValue != $aArray2[$mKey] ) {\n          $aReturn[$mKey] = $mValue;\n        }\n      }\n    } else {\n      $aReturn[$mKey] = $mValue;\n    }\n  }\n  # Now check for keys in array2 that are not in array1\n  foreach ($aArray2 as $mKey => $mValue) {\n    if ( array_key_exists($mKey, $aArray1) ) {\n      # Already checked it... I think.\n      #if ( is_array($mValue) ) {\n        #$aRecursiveDiff = array_recursive_diff($mValue, $aArray2[$mKey]);\n        #if ( count($aRecursiveDiff) ) {\n          #$aReturn[$mKey] = $aRecursiveDiff;\n        #}\n      #} else {\n        #if ( $mValue != $aArray2[$mKey] ) {\n          #$aReturn[$mKey] = $mValue;\n        #}\n      #}\n    } else {\n      $aReturn[$mKey] = $mValue;\n    }\n  }\n\n  return $aReturn;\n}\n\nfunction html_radio($name, $values, $selected=null, $options=array(), $attrs=array()) {\n\n  $html = '';\n  if ( isset($options['default']) and ( $selected == null ) ) {\n    $selected = $options['default'];\n  } # end if\n\n  foreach ( $values as $value => $label ) {\n    if ( isset($options['container']) ) {\n      $html .= $options['container'][0];\n    }\n    $attributes = array_map(\n          function($attr, $value){return $attr.'=\"'.$value.'\"';},\n          array_keys($attrs),\n          array_values($attrs)\n        );\n    $attributes_string = implode(' ', $attributes);\n\n    $html .= sprintf('\n      <div class=\"form-check%7$s\">\n        <label class=\"form-check-label radio%7$s\" for=\"%1$s%6$s%2$s\">\n        <input class=\"form-check-input\" type=\"radio\" name=\"%1$s\" value=\"%2$s\" id=\"%1$s%6$s%2$s\" %4$s%5$s />\n        %3$s</label></div>\n        ', $name, $value, $label, ($value==$selected?' checked=\"checked\"':''),\n        $attributes_string,\n        (isset($options['id']) ? $options['id'] : ''),\n        ( ( (!isset($options['inline'])) or $options['inline'] ) ? '-inline' : '')\n      );\n    if ( isset($options['container']) ) {\n      $html .= $options['container'][1];\n    }\n  } # end foreach value\n  return $html;\n} # end sub html_radio\n\n\nfunction random_colour() {\n  return '#'.\n    str_pad( dechex( mt_rand(0, 255) ), 2, '0', STR_PAD_LEFT).\n    str_pad( dechex( mt_rand(0, 255) ), 2, '0', STR_PAD_LEFT).\n    str_pad( dechex( mt_rand(0, 255) ), 2, '0', STR_PAD_LEFT);\n}\n\nfunction zm_random_bytes($length = 32) {\n  if ( !isset($length) || intval($length) <= 8 ) {\n    $length = 32;\n  }\n  if ( function_exists('random_bytes') ) {\n    return random_bytes($length);\n  }\n  if ( function_exists('mcrypt_create_iv') ) {\n    return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);\n  }\n  if ( function_exists('openssl_random_pseudo_bytes') ) {\n    return openssl_random_pseudo_bytes($length);\n  }\n  ZM\\Error('No random_bytes function found.');\n}\n\nfunction i18n() {\n  $string = explode('_', ZM_LANG_DEFAULT, 2);\n  $string[1] = strtoupper($string[1]);\n\n  return implode('-', $string);\n}\n\nfunction check_datetime($x) {\n  return (date('Y-m-d H:i:s', strtotime($x)) == $x);\n}\n?>\n"], "filenames": ["web/includes/functions.php"], "buggy_code_start_loc": [58], "buggy_code_end_loc": [59], "fixing_code_start_loc": [58], "fixing_code_end_loc": [59], "type": "CWE-79", "message": "ZoneMinder is a free, open source Closed-circuit television software application for Linux which supports IP, USB and Analog cameras. Versions prior to 1.36.33 are vulnerable to Cross-site Scripting. Log entries can be injected into the database logs, containing a malicious referrer field. This is unescaped when viewing the logs in the web ui. This issue is patched in version 1.36.33.", "other": {"cve": {"id": "CVE-2023-25825", "sourceIdentifier": "security-advisories@github.com", "published": "2023-02-25T01:15:56.627", "lastModified": "2023-03-07T17:12:50.167", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ZoneMinder is a free, open source Closed-circuit television software application for Linux which supports IP, USB and Analog cameras. Versions prior to 1.36.33 are vulnerable to Cross-site Scripting. Log entries can be injected into the database logs, containing a malicious referrer field. This is unescaped when viewing the logs in the web ui. This issue is patched in version 1.36.33."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.36.33", "matchCriteriaId": "A4A5EDFC-FCEB-4982-A3D1-C95814646A27"}, {"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.37.0", "versionEndExcluding": "1.37.33", "matchCriteriaId": "04CEC79C-0ABE-43D6-94DD-2DFAEC3939B0"}]}]}], "references": [{"url": "https://github.com/ZoneMinder/zoneminder/commit/4637eaf9ea530193e0897ec48899f5638bdd6d81", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/ZoneMinder/zoneminder/commit/57bf25d39f12d620693f26068b8441b4f3f0b6c0", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/ZoneMinder/zoneminder/commit/e1028c1d7f23cc1e0941b7b37bb6ae5a04364308", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/ZoneMinder/zoneminder/security/advisories/GHSA-68vf-g4qm-jr6v", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ZoneMinder/zoneminder/commit/4637eaf9ea530193e0897ec48899f5638bdd6d81"}}