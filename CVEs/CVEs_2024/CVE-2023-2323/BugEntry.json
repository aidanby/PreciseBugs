{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager;\n\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Factory;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Action\\CartActionInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Action\\ProductActionInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Condition\\BracketInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Rule\\Dao;\nuse Pimcore\\Cache\\RuntimeCache;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\AbstractModel;\nuse Pimcore\\Model\\Exception\\NotFoundException;\n\n/**\n * @method Dao getDao()\n */\nclass Rule extends AbstractModel implements RuleInterface\n{\n    /**\n     * @param int $id\n     *\n     * @return RuleInterface|null\n     */\n    public static function getById($id)\n    {\n        $cacheKey = Dao::TABLE_NAME . '_' . $id;\n\n        try {\n            $rule = RuntimeCache::get($cacheKey);\n        } catch (\\Exception $e) {\n            try {\n                $ruleClass = get_called_class();\n                /** @var Rule $rule */\n                $rule = new $ruleClass();\n                $rule->getDao()->getById($id);\n\n                RuntimeCache::set($cacheKey, $rule);\n            } catch (NotFoundException $ex) {\n                Logger::debug($ex->getMessage());\n\n                return null;\n            }\n        }\n\n        return $rule;\n    }\n\n    /**\n     * @var int|null\n     */\n    protected $id;\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @var string[]\n     */\n    protected $label = [];\n\n    /**\n     * @var string[]\n     */\n    protected $description = [];\n\n    /**\n     * @var ConditionInterface|null\n     */\n    protected ?ConditionInterface $condition = null;\n\n    /**\n     * @var ActionInterface[]\n     */\n    protected $action = [];\n\n    /**\n     * @var string\n     */\n    protected $behavior;\n\n    /**\n     * @var bool\n     */\n    protected $active;\n\n    /**\n     * @var int\n     */\n    protected $prio;\n\n    /**\n     * load model with serializes data from db\n     *\n     * @param string $key\n     * @param mixed $value\n     *\n     * @return AbstractModel\n     *\n     * @internal\n     */\n    public function setValue($key, $value)\n    {\n        $method = 'set' . $key;\n        if (method_exists($this, $method)) {\n            switch ($method) {\n                // localized fields\n                case 'setlabel':\n                case 'setdescription':\n                    $value = unserialize($value);\n                    if ($value === false) {\n                        return $this;\n                    } else {\n                        $this->$key = $value;\n                    }\n\n                    return $this;\n\n                    // objects\n                case 'setactions':\n                case 'setcondition':\n                    $value = unserialize($value);\n                    if ($value === false) {\n                        return $this;\n                    }\n            }\n            $this->$method($value);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param int|null $id\n     *\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this->id = $id;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    /**\n     * @param string $label\n     * @param string $locale\n     *\n     * @return $this\n     */\n    public function setLabel($label, $locale = null)\n    {\n        $this->label[$this->getLanguage($locale)] = $label;\n\n        return $this;\n    }\n\n    /**\n     * @param string $locale\n     *\n     * @return string|null\n     */\n    public function getLabel($locale = null)\n    {\n        return $this->label[$this->getLanguage($locale)] ?? null;\n    }\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    /**\n     * @param string $name\n     * @param string|null $locale\n     *\n     * @return $this\n     */\n    public function setName($name, $locale = null)\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n\n    /**\n     * @param string $description\n     * @param string $locale\n     *\n     * @return $this\n     */\n    public function setDescription($description, $locale = null)\n    {\n        $this->description[$this->getLanguage($locale)] = $description;\n\n        return $this;\n    }\n\n    /**\n     * @param string $locale\n     *\n     * @return string|null\n     */\n    public function getDescription($locale = null)\n    {\n        return $this->description[$this->getLanguage($locale)] ?? null;\n    }\n\n    /**\n     * @param string $behavior\n     *\n     * @return $this\n     */\n    public function setBehavior($behavior)\n    {\n        $this->behavior = $behavior;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getBehavior()\n    {\n        return $this->behavior;\n    }\n\n    /**\n     * @param bool $active\n     *\n     * @return $this\n     */\n    public function setActive($active)\n    {\n        $this->active = $active;\n\n        return $this;\n    }\n\n    /**\n     * @return bool\n     */\n    public function getActive()\n    {\n        return $this->active;\n    }\n\n    /**\n     * @param ConditionInterface $condition\n     *\n     * @return $this\n     */\n    public function setCondition(ConditionInterface $condition)\n    {\n        $this->condition = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return ConditionInterface|null\n     */\n    public function getCondition(): ?ConditionInterface\n    {\n        return $this->condition;\n    }\n\n    /**\n     * @param ActionInterface[] $action\n     *\n     * @return $this\n     */\n    public function setActions(array $action)\n    {\n        $this->action = $action;\n\n        return $this;\n    }\n\n    /**\n     * @return ActionInterface[]\n     */\n    public function getActions()\n    {\n        return $this->action;\n    }\n\n    /**\n     * @param int $prio\n     *\n     * @return $this\n     */\n    public function setPrio($prio)\n    {\n        $this->prio = (int)$prio;\n\n        return $this;\n    }\n\n    /**\n     * @return int\n     */\n    public function getPrio()\n    {\n        return $this->prio;\n    }\n\n    /**\n     * @return $this\n     */\n    public function save()\n    {\n        $this->getDao()->save();\n\n        return $this;\n    }\n\n    /**\n     * delete item\n     */\n    public function delete()\n    {\n        $this->getDao()->delete();\n    }\n\n    /**\n     * test all conditions if this rule is valid\n     *\n     * @param EnvironmentInterface $environment\n     *\n     * @return bool\n     */\n    public function check(EnvironmentInterface $environment)\n    {\n        $condition = $this->getCondition();\n        if ($condition) {\n            return $condition->check($environment);\n        }\n\n        return true;\n    }\n\n    /**\n     * checks if rule has at least one action that changes product price (and not cart price)\n     *\n     * @return bool\n     */\n    public function hasProductActions()\n    {\n        foreach ($this->getActions() as $action) {\n            if ($action instanceof ProductActionInterface) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * checks if rule has at least one action that changes cart price\n     *\n     * @return bool\n     */\n    public function hasCartActions()\n    {\n        foreach ($this->getActions() as $action) {\n            if ($action instanceof CartActionInterface) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param EnvironmentInterface $environment\n     *\n     * @return $this\n     */\n    public function executeOnProduct(EnvironmentInterface $environment)\n    {\n        foreach ($this->getActions() as $action) {\n            if ($action instanceof ProductActionInterface) {\n                $action->executeOnProduct($environment);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param EnvironmentInterface $environment\n     *\n     * @return $this\n     */\n    public function executeOnCart(EnvironmentInterface $environment)\n    {\n        foreach ($this->getActions() as $action) {\n            if ($action instanceof CartActionInterface) {\n                $action->executeOnCart($environment);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * gets current language\n     *\n     * @param string|null $language\n     *\n     * @return string\n     */\n    protected function getLanguage($language = null)\n    {\n        if ($language) {\n            return (string) $language;\n        }\n\n        return Factory::getInstance()->getEnvironment()->getSystemLocale();\n    }\n\n    /**\n     * @param string $typeClass\n     *\n     * @return ConditionInterface[]\n     */\n    public function getConditionsByType(string $typeClass): array\n    {\n        $conditions = [];\n\n        $rootCondition = $this->getCondition();\n        if ($rootCondition instanceof BracketInterface) {\n            $conditions = $rootCondition->getConditionsByType($typeClass);\n        } elseif ($rootCondition instanceof $typeClass) {\n            $conditions[] = $rootCondition;\n        }\n\n        return $conditions;\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.config.panel\");\n\npimcore.bundle.EcommerceFramework.pricing.config.panel = Class.create({\n\n    /**\n     * @var string\n     */\n    layoutId: \"\",\n\n    /**\n     * @var array\n     */\n    condition: [],\n\n    /**\n     * @var array\n     */\n    action: [],\n\n    /**\n     * panels of open pricing rules\n     */\n    panels: {},\n\n\n    /**\n     * constructor\n     * @param layoutId\n     */\n    initialize: function(layoutId) {\n        this.layoutId = layoutId;\n\n        // load defined conditions & actions\n        var _this = this;\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_get-config'),\n            method: \"GET\",\n            success: function(result){\n                var config = Ext.decode(result.responseText);\n                _this.condition = config.condition;\n                _this.action = config.action;\n            }\n        });\n\n        // create layout\n        this.getLayout();\n    },\n\n\n    /**\n     * activate panel\n     */\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem( this.layoutId );\n    },\n\n\n    /**\n     * create tab panel\n     * @returns Ext.Panel\n     */\n    getLayout: function () {\n\n        if (!this.layout) {\n\n            // create new panel\n            this.layout = new Ext.Panel({\n                id: this.layoutId,\n                title: t(\"bundle_ecommerce_pricing_rules\"),\n                iconCls: \"bundle_ecommerce_pricing_rules\",\n                border: false,\n                layout: \"border\",\n                closable: true,\n\n                // layout...\n                items: [\n                    this.getTree(),         // item tree, left side\n                    this.getTabPanel()    // edit page, right side\n                ]\n            });\n\n            // add event listener\n            var layoutId = this.layoutId;\n            this.layout.on(\"destroy\", function () {\n                pimcore.globalmanager.remove( layoutId );\n            }.bind(this));\n\n            // add panel to pimcore panel tabs\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add( this.layout );\n            tabPanel.setActiveItem( this.layoutId );\n\n            // update layout\n            pimcore.layout.refresh();\n        }\n\n        return this.layout;\n    },\n\n\n    /**\n     * return treelist\n     * @returns {*}\n     */\n    getTree: function () {\n        if (!this.tree) {\n            this.saveButton = new Ext.Button({\n                // save button\n                hidden: true,\n                text: t(\"save\"),\n                iconCls: \"pimcore_icon_save\",\n                handler: function() {\n                    // this\n                    var button = this;\n\n                    // get current order\n                    var prio = 0;\n                    var rules = {};\n\n                    this.ownerCt.ownerCt.getRootNode().eachChild(function (rule){\n                        prio++;\n                        rules[ rule.id ] = prio;\n                    });\n\n                    // save order\n                    Ext.Ajax.request({\n                        url: Routing.generate('pimcore_ecommerceframework_pricing_save-order'),\n                        params: {\n                            rules: Ext.encode(rules)\n                        },\n                        method: \"PUT\",\n                        success: function(){\n                            button.hide();\n                        }\n                    });\n\n                }\n            });\n\n            var store = Ext.create('Ext.data.TreeStore', {\n                autoLoad: false,\n                autoSync: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_list'),\n                    reader: {\n                        type: 'json'\n                    }\n                }\n            });\n\n            this.tree = new Ext.tree.TreePanel({\n                store: store,\n                region: \"west\",\n                useArrows:true,\n                autoScroll:true,\n                animate:true,\n                containerScroll: true,\n                width: 200,\n                split: true,\n                rootVisible: false,\n                viewConfig: {\n                    plugins: {\n                        ptype: 'treeviewdragdrop'\n                    }\n                },\n                listeners: {\n                    itemclick: this.openRule.bind(this),\n                    itemcontextmenu: function (tree, record, item, index, e, eOpts ) {\n                        tree.select();\n\n                        var menu = new Ext.menu.Menu();\n                        menu.add(new Ext.menu.Item({\n                            text: t('delete'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: this.deleteRule.bind(this, tree, record)\n                        }));\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('copy'),\n                            iconCls: \"pimcore_icon_copy\",\n                            handler: this.copyRule.bind(this, tree, record)\n                        }));\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('rename'),\n                            iconCls: \"pimcore_icon_key pimcore_icon_overlay_go\",\n                            handler: this.renameRule.bind(this, tree, record)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.pageX, e.pageY);\n                    }.bind(this),\n                    'beforeitemappend': function (thisNode, newChildNode, index, eOpts) {\n                        newChildNode.data.leaf = true;\n                    },\n                    itemmove: function(tree, oldParent, newParent, index, eOpts ) {\n                        this.saveButton.show();\n                    }.bind(this)\n                },\n                tbar: {\n                    items: [\n                        {\n                            // add button\n                            text: t(\"add\"),\n                            iconCls: \"pimcore_icon_add\",\n                            handler: this.addRule.bind(this)\n                        }, {\n                            // spacer\n                            xtype: 'tbfill'\n                        }, this.saveButton\n                    ]\n                }\n            });\n\n            this.tree.on(\"render\", function () {\n                this.getRootNode().expand();\n            });\n        }\n\n        return this.tree;\n    },\n\n\n    /**\n     * add item popup\n     */\n    addRule: function () {\n        Ext.MessageBox.prompt(t('bundle_ecommerce_pricing_rule_add'), t('enter_the_name_of_the_new_item'),\n            this.addRuleComplete.bind(this), null, null, \"\");\n    },\n\n\n    /**\n     * save added item\n     * @param button\n     * @param value\n     * @param object\n     * @todo ...\n     */\n    addRuleComplete: function (button, value, object) {\n\n        var regresult = value.match(/[a-zA-Z0-9_\\-]+/);\n        if (button == \"ok\" && value.length > 2 && regresult == value) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_ecommerceframework_pricing_add'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    documentId: (this.page ? this.page.id : null)\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    this.refresh(this.tree.getRootNode());\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t('bundle_ecommerce_pricing_rule_add'), t('bundle_ecommerce_pricing_rule_error'));\n                    } else {\n                        this.openRule(null, intval(data.id));\n                    }\n                }.bind(this)\n            });\n        } else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t('bundle_ecommerce_pricing_rule_add'), t('invalid_name'));\n        }\n    },\n\n    refresh: function (record) {\n        var ownerTree = record.getOwnerTree();\n        record.data.expanded = true;\n        ownerTree.getStore().load({\n            node: record\n        });\n    },\n    /**\n     * delete existing rule\n     */\n    deleteRule: function (tree, record) {\n        pimcore.helpers.deleteConfirm(t('bundle_ecommerce_pricing_rule'), record.data.text, function () {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_ecommerceframework_pricing_delete'),\n                method: 'DELETE',\n                params: {\n                    id: record.id\n                },\n                success: function () {\n                    this.refresh(this.tree.getRootNode());\n                }.bind(this)\n            });\n        }.bind(this));\n\n    },\n\n    /**\n     * copy pricing rule\n     * @param tree\n     * @param record\n     */\n    copyRule: function (tree, record) {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_copy'),\n            method: 'POST',\n            params: {\n                id: record.id\n            },\n            success: function () {\n                this.refresh(this.tree.getRootNode());\n            }.bind(this)\n        });\n    },\n\n    /**\n     * rename pricing rule popup\n     * @param tree\n     * @param record\n     */\n    renameRule: function (tree, record) {\n\n        let options = {\n            tree: tree,\n            id: record.id,\n        };\n\n        Ext.MessageBox.prompt(t('rename'), t('enter_the_name_of_the_new_item'),\n            this.renameRuleComplete.bind(this, options), null, null, record.data.text);\n    },\n\n    /**\n     * rename pricing rule\n     * @param button\n     * @param value\n     * @param object\n     */\n    renameRuleComplete: function (options, button, value, object) {\n\n        if (button == 'ok') {\n\n            if(value.match(/^[a-zA-Z0-9_\\-]+$/)) {\n                let tree = options.tree;\n\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_rename'),\n                    method: 'PUT',\n                    params: {\n                        id: options.id,\n                        name: value\n                    },\n                    success: function (response, opts) {\n\n                        let responseData = Ext.decode(response.responseText);\n\n                        if (responseData.success) {\n                            this.refresh(this.tree.getRootNode());\n                        } else {\n                            Ext.MessageBox.alert(t('rename'), t('name_already_in_use'));\n                        }\n                    }.bind(this)\n                });\n            } else {\n                Ext.Msg.alert(t('rename'), t('invalid_name'));\n            }\n        }\n    },\n\n    /**\n     * open pricing rule\n     * @param node\n     */\n    openRule: function (tree, record, item, index, e, eOpts ) {\n\n        if(!is_numeric(record)) {\n            record = record.id;\n        }\n\n        //try {\n            var pricingRuleKey = \"pricingrule_\" + record;\n            if (this.panels[pricingRuleKey]) {\n                this.panels[pricingRuleKey].activate();\n            } else {\n                // load defined rules\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_get'),\n                    params: {\n                        id: record\n                    },\n                    success: function (response) {\n                        var res = Ext.decode(response.responseText);\n                        var item = new pimcore.bundle.EcommerceFramework.pricing.config.item(this, res);\n                        this.panels[pricingRuleKey] = item;\n                    }.bind(this)\n                });\n            }\n        //} catch (e) {\n        //    console.log(e);\n        //}\n\n\n\n    },\n\n\n    /**\n     * @returns Ext.TabPanel\n     */\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.TabPanel({\n                region: \"center\",\n                border: false\n            });\n        }\n\n        return this.panel;\n    }\n});\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager;\n\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Factory;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Action\\CartActionInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Action\\ProductActionInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Condition\\BracketInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Rule\\Dao;\nuse Pimcore\\Cache\\RuntimeCache;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\AbstractModel;\nuse Pimcore\\Model\\Exception\\NotFoundException;\nuse Pimcore\\Security\\SecurityHelper;\n/**\n * @method Dao getDao()\n */\nclass Rule extends AbstractModel implements RuleInterface\n{\n    /**\n     * @param int $id\n     *\n     * @return RuleInterface|null\n     */\n    public static function getById($id)\n    {\n        $cacheKey = Dao::TABLE_NAME . '_' . $id;\n\n        try {\n            $rule = RuntimeCache::get($cacheKey);\n        } catch (\\Exception $e) {\n            try {\n                $ruleClass = get_called_class();\n                /** @var Rule $rule */\n                $rule = new $ruleClass();\n                $rule->getDao()->getById($id);\n\n                RuntimeCache::set($cacheKey, $rule);\n            } catch (NotFoundException $ex) {\n                Logger::debug($ex->getMessage());\n\n                return null;\n            }\n        }\n\n        return $rule;\n    }\n\n    /**\n     * @var int|null\n     */\n    protected $id;\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @var string[]\n     */\n    protected $label = [];\n\n    /**\n     * @var string[]\n     */\n    protected $description = [];\n\n    /**\n     * @var ConditionInterface|null\n     */\n    protected ?ConditionInterface $condition = null;\n\n    /**\n     * @var ActionInterface[]\n     */\n    protected $action = [];\n\n    /**\n     * @var string\n     */\n    protected $behavior;\n\n    /**\n     * @var bool\n     */\n    protected $active;\n\n    /**\n     * @var int\n     */\n    protected $prio;\n\n    /**\n     * load model with serializes data from db\n     *\n     * @param string $key\n     * @param mixed $value\n     *\n     * @return AbstractModel\n     *\n     * @internal\n     */\n    public function setValue($key, $value)\n    {\n        $method = 'set' . $key;\n        if (method_exists($this, $method)) {\n            switch ($method) {\n                // localized fields\n                case 'setlabel':\n                case 'setdescription':\n                    $value = unserialize($value);\n                    if ($value === false) {\n                        return $this;\n                    } else {\n                        $this->$key = $value;\n                    }\n\n                    return $this;\n\n                    // objects\n                case 'setactions':\n                case 'setcondition':\n                    $value = unserialize($value);\n                    if ($value === false) {\n                        return $this;\n                    }\n            }\n            $this->$method($value);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param int|null $id\n     *\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this->id = $id;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    /**\n     * @param string $label\n     * @param string $locale\n     *\n     * @return $this\n     */\n    public function setLabel($label, $locale = null)\n    {\n        $this->label[$this->getLanguage($locale)] = $label;\n\n        return $this;\n    }\n\n    /**\n     * @param string $locale\n     *\n     * @return string|null\n     */\n    public function getLabel($locale = null)\n    {\n        return $this->label[$this->getLanguage($locale)] ?? null;\n    }\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    /**\n     * @param string $name\n     * @param string|null $locale\n     *\n     * @return $this\n     */\n    public function setName($name, $locale = null)\n    {\n        $this->name = SecurityHelper::convertHtmlSpecialChars($name);\n        return $this;\n    }\n\n    /**\n     * @param string $description\n     * @param string $locale\n     *\n     * @return $this\n     */\n    public function setDescription($description, $locale = null)\n    {\n        $this->description[$this->getLanguage($locale)] = $description;\n\n        return $this;\n    }\n\n    /**\n     * @param string $locale\n     *\n     * @return string|null\n     */\n    public function getDescription($locale = null)\n    {\n        return $this->description[$this->getLanguage($locale)] ?? null;\n    }\n\n    /**\n     * @param string $behavior\n     *\n     * @return $this\n     */\n    public function setBehavior($behavior)\n    {\n        $this->behavior = $behavior;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getBehavior()\n    {\n        return $this->behavior;\n    }\n\n    /**\n     * @param bool $active\n     *\n     * @return $this\n     */\n    public function setActive($active)\n    {\n        $this->active = $active;\n\n        return $this;\n    }\n\n    /**\n     * @return bool\n     */\n    public function getActive()\n    {\n        return $this->active;\n    }\n\n    /**\n     * @param ConditionInterface $condition\n     *\n     * @return $this\n     */\n    public function setCondition(ConditionInterface $condition)\n    {\n        $this->condition = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return ConditionInterface|null\n     */\n    public function getCondition(): ?ConditionInterface\n    {\n        return $this->condition;\n    }\n\n    /**\n     * @param ActionInterface[] $action\n     *\n     * @return $this\n     */\n    public function setActions(array $action)\n    {\n        $this->action = $action;\n\n        return $this;\n    }\n\n    /**\n     * @return ActionInterface[]\n     */\n    public function getActions()\n    {\n        return $this->action;\n    }\n\n    /**\n     * @param int $prio\n     *\n     * @return $this\n     */\n    public function setPrio($prio)\n    {\n        $this->prio = (int)$prio;\n\n        return $this;\n    }\n\n    /**\n     * @return int\n     */\n    public function getPrio()\n    {\n        return $this->prio;\n    }\n\n    /**\n     * @return $this\n     */\n    public function save()\n    {\n        $this->getDao()->save();\n\n        return $this;\n    }\n\n    /**\n     * delete item\n     */\n    public function delete()\n    {\n        $this->getDao()->delete();\n    }\n\n    /**\n     * test all conditions if this rule is valid\n     *\n     * @param EnvironmentInterface $environment\n     *\n     * @return bool\n     */\n    public function check(EnvironmentInterface $environment)\n    {\n        $condition = $this->getCondition();\n        if ($condition) {\n            return $condition->check($environment);\n        }\n\n        return true;\n    }\n\n    /**\n     * checks if rule has at least one action that changes product price (and not cart price)\n     *\n     * @return bool\n     */\n    public function hasProductActions()\n    {\n        foreach ($this->getActions() as $action) {\n            if ($action instanceof ProductActionInterface) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * checks if rule has at least one action that changes cart price\n     *\n     * @return bool\n     */\n    public function hasCartActions()\n    {\n        foreach ($this->getActions() as $action) {\n            if ($action instanceof CartActionInterface) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param EnvironmentInterface $environment\n     *\n     * @return $this\n     */\n    public function executeOnProduct(EnvironmentInterface $environment)\n    {\n        foreach ($this->getActions() as $action) {\n            if ($action instanceof ProductActionInterface) {\n                $action->executeOnProduct($environment);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param EnvironmentInterface $environment\n     *\n     * @return $this\n     */\n    public function executeOnCart(EnvironmentInterface $environment)\n    {\n        foreach ($this->getActions() as $action) {\n            if ($action instanceof CartActionInterface) {\n                $action->executeOnCart($environment);\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * gets current language\n     *\n     * @param string|null $language\n     *\n     * @return string\n     */\n    protected function getLanguage($language = null)\n    {\n        if ($language) {\n            return (string) $language;\n        }\n\n        return Factory::getInstance()->getEnvironment()->getSystemLocale();\n    }\n\n    /**\n     * @param string $typeClass\n     *\n     * @return ConditionInterface[]\n     */\n    public function getConditionsByType(string $typeClass): array\n    {\n        $conditions = [];\n\n        $rootCondition = $this->getCondition();\n        if ($rootCondition instanceof BracketInterface) {\n            $conditions = $rootCondition->getConditionsByType($typeClass);\n        } elseif ($rootCondition instanceof $typeClass) {\n            $conditions[] = $rootCondition;\n        }\n\n        return $conditions;\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.config.panel\");\n\npimcore.bundle.EcommerceFramework.pricing.config.panel = Class.create({\n\n    /**\n     * @var string\n     */\n    layoutId: \"\",\n\n    /**\n     * @var array\n     */\n    condition: [],\n\n    /**\n     * @var array\n     */\n    action: [],\n\n    /**\n     * panels of open pricing rules\n     */\n    panels: {},\n\n\n    /**\n     * constructor\n     * @param layoutId\n     */\n    initialize: function(layoutId) {\n        this.layoutId = layoutId;\n\n        // load defined conditions & actions\n        var _this = this;\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_get-config'),\n            method: \"GET\",\n            success: function(result){\n                var config = Ext.decode(result.responseText);\n                _this.condition = config.condition;\n                _this.action = config.action;\n            }\n        });\n\n        // create layout\n        this.getLayout();\n    },\n\n\n    /**\n     * activate panel\n     */\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem( this.layoutId );\n    },\n\n\n    /**\n     * create tab panel\n     * @returns Ext.Panel\n     */\n    getLayout: function () {\n\n        if (!this.layout) {\n\n            // create new panel\n            this.layout = new Ext.Panel({\n                id: this.layoutId,\n                title: t(\"bundle_ecommerce_pricing_rules\"),\n                iconCls: \"bundle_ecommerce_pricing_rules\",\n                border: false,\n                layout: \"border\",\n                closable: true,\n\n                // layout...\n                items: [\n                    this.getTree(),         // item tree, left side\n                    this.getTabPanel()    // edit page, right side\n                ]\n            });\n\n            // add event listener\n            var layoutId = this.layoutId;\n            this.layout.on(\"destroy\", function () {\n                pimcore.globalmanager.remove( layoutId );\n            }.bind(this));\n\n            // add panel to pimcore panel tabs\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add( this.layout );\n            tabPanel.setActiveItem( this.layoutId );\n\n            // update layout\n            pimcore.layout.refresh();\n        }\n\n        return this.layout;\n    },\n\n\n    /**\n     * return treelist\n     * @returns {*}\n     */\n    getTree: function () {\n        if (!this.tree) {\n            this.saveButton = new Ext.Button({\n                // save button\n                hidden: true,\n                text: t(\"save\"),\n                iconCls: \"pimcore_icon_save\",\n                handler: function() {\n                    // this\n                    var button = this;\n\n                    // get current order\n                    var prio = 0;\n                    var rules = {};\n\n                    this.ownerCt.ownerCt.getRootNode().eachChild(function (rule){\n                        prio++;\n                        rules[ rule.id ] = prio;\n                    });\n\n                    // save order\n                    Ext.Ajax.request({\n                        url: Routing.generate('pimcore_ecommerceframework_pricing_save-order'),\n                        params: {\n                            rules: Ext.encode(rules)\n                        },\n                        method: \"PUT\",\n                        success: function(){\n                            button.hide();\n                        }\n                    });\n\n                }\n            });\n\n            var store = Ext.create('Ext.data.TreeStore', {\n                autoLoad: false,\n                autoSync: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_list'),\n                    reader: {\n                        type: 'json'\n                    }\n                }\n            });\n\n            this.tree = new Ext.tree.TreePanel({\n                store: store,\n                region: \"west\",\n                useArrows:true,\n                autoScroll:true,\n                animate:true,\n                containerScroll: true,\n                width: 200,\n                split: true,\n                rootVisible: false,\n                viewConfig: {\n                    plugins: {\n                        ptype: 'treeviewdragdrop'\n                    }\n                },\n                listeners: {\n                    itemclick: this.openRule.bind(this),\n                    itemcontextmenu: function (tree, record, item, index, e, eOpts ) {\n                        tree.select();\n\n                        var menu = new Ext.menu.Menu();\n                        menu.add(new Ext.menu.Item({\n                            text: t('delete'),\n                            iconCls: \"pimcore_icon_delete\",\n                            handler: this.deleteRule.bind(this, tree, record)\n                        }));\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('copy'),\n                            iconCls: \"pimcore_icon_copy\",\n                            handler: this.copyRule.bind(this, tree, record)\n                        }));\n\n                        menu.add(new Ext.menu.Item({\n                            text: t('rename'),\n                            iconCls: \"pimcore_icon_key pimcore_icon_overlay_go\",\n                            handler: this.renameRule.bind(this, tree, record)\n                        }));\n\n                        e.stopEvent();\n                        menu.showAt(e.pageX, e.pageY);\n                    }.bind(this),\n                    'beforeitemappend': function (thisNode, newChildNode, index, eOpts) {\n                        newChildNode.data.leaf = true;\n                    },\n                    itemmove: function(tree, oldParent, newParent, index, eOpts ) {\n                        this.saveButton.show();\n                    }.bind(this)\n                },\n                tbar: {\n                    items: [\n                        {\n                            // add button\n                            text: t(\"add\"),\n                            iconCls: \"pimcore_icon_add\",\n                            handler: this.addRule.bind(this)\n                        }, {\n                            // spacer\n                            xtype: 'tbfill'\n                        }, this.saveButton\n                    ]\n                }\n            });\n\n            this.tree.on(\"render\", function () {\n                this.getRootNode().expand();\n            });\n        }\n\n        return this.tree;\n    },\n\n\n    /**\n     * add item popup\n     */\n    addRule: function () {\n        Ext.MessageBox.prompt(t('bundle_ecommerce_pricing_rule_add'), t('enter_the_name_of_the_new_item'),\n            this.addRuleComplete.bind(this), null, null, \"\");\n    },\n\n\n    /**\n     * save added item\n     * @param button\n     * @param value\n     * @param object\n     * @todo ...\n     */\n    addRuleComplete: function (button, value, object) {\n\n        var regresult = value.match(/[a-zA-Z0-9_\\-]+/);\n        if (button == \"ok\" && value.length > 2 && regresult == value) {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_ecommerceframework_pricing_add'),\n                method: 'POST',\n                params: {\n                    name: value,\n                    documentId: (this.page ? this.page.id : null)\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    this.refresh(this.tree.getRootNode());\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(t('bundle_ecommerce_pricing_rule_add'), t('bundle_ecommerce_pricing_rule_error'));\n                    } else {\n                        this.openRule(null, intval(data.id));\n                    }\n                }.bind(this)\n            });\n        } else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(t('bundle_ecommerce_pricing_rule_add'), t('invalid_name'));\n        }\n    },\n\n    refresh: function (record) {\n        var ownerTree = record.getOwnerTree();\n        record.data.expanded = true;\n        ownerTree.getStore().load({\n            node: record\n        });\n    },\n    /**\n     * delete existing rule\n     */\n    deleteRule: function (tree, record) {\n        const decodedName = Ext.util.Format.htmlDecode(record.data.text);\n        pimcore.helpers.deleteConfirm(\n            t('bundle_ecommerce_pricing_rule'),\n            Ext.util.Format.htmlEncode(decodedName),\n            function () {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_delete'),\n                    method: 'DELETE',\n                    params: {\n                        id: record.id\n                    },\n                    success: function () {\n                        this.refresh(this.tree.getRootNode());\n                    }.bind(this)\n                });\n        }.bind(this));\n\n    },\n\n    /**\n     * copy pricing rule\n     * @param tree\n     * @param record\n     */\n    copyRule: function (tree, record) {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_copy'),\n            method: 'POST',\n            params: {\n                id: record.id\n            },\n            success: function () {\n                this.refresh(this.tree.getRootNode());\n            }.bind(this)\n        });\n    },\n\n    /**\n     * rename pricing rule popup\n     * @param tree\n     * @param record\n     */\n    renameRule: function (tree, record) {\n\n        let options = {\n            tree: tree,\n            id: record.id,\n        };\n\n        Ext.MessageBox.prompt(t('rename'), t('enter_the_name_of_the_new_item'),\n            this.renameRuleComplete.bind(this, options), null, null, record.data.text);\n    },\n\n    /**\n     * rename pricing rule\n     * @param button\n     * @param value\n     * @param object\n     */\n    renameRuleComplete: function (options, button, value, object) {\n\n        if (button == 'ok') {\n\n            if(value.match(/^[a-zA-Z0-9_\\-]+$/)) {\n                let tree = options.tree;\n\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_rename'),\n                    method: 'PUT',\n                    params: {\n                        id: options.id,\n                        name: value\n                    },\n                    success: function (response, opts) {\n\n                        let responseData = Ext.decode(response.responseText);\n\n                        if (responseData.success) {\n                            this.refresh(this.tree.getRootNode());\n                        } else {\n                            Ext.MessageBox.alert(t('rename'), t('name_already_in_use'));\n                        }\n                    }.bind(this)\n                });\n            } else {\n                Ext.Msg.alert(t('rename'), t('invalid_name'));\n            }\n        }\n    },\n\n    /**\n     * open pricing rule\n     * @param node\n     */\n    openRule: function (tree, record, item, index, e, eOpts ) {\n\n        if(!is_numeric(record)) {\n            record = record.id;\n        }\n\n        //try {\n            var pricingRuleKey = \"pricingrule_\" + record;\n            if (this.panels[pricingRuleKey]) {\n                this.panels[pricingRuleKey].activate();\n            } else {\n                // load defined rules\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_ecommerceframework_pricing_get'),\n                    params: {\n                        id: record\n                    },\n                    success: function (response) {\n                        var res = Ext.decode(response.responseText);\n                        var item = new pimcore.bundle.EcommerceFramework.pricing.config.item(this, res);\n                        this.panels[pricingRuleKey] = item;\n                    }.bind(this)\n                });\n            }\n        //} catch (e) {\n        //    console.log(e);\n        //}\n\n\n\n    },\n\n\n    /**\n     * @returns Ext.TabPanel\n     */\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.TabPanel({\n                region: \"center\",\n                border: false\n            });\n        }\n\n        return this.panel;\n    }\n});\n"], "filenames": ["bundles/EcommerceFrameworkBundle/PricingManager/Rule.php", "bundles/EcommerceFrameworkBundle/Resources/public/js/pricing/config/panel.js"], "buggy_code_start_loc": [27, 298], "buggy_code_end_loc": [209, 309], "fixing_code_start_loc": [27, 298], "fixing_code_end_loc": [208, 313], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.21.", "other": {"cve": {"id": "CVE-2023-2323", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-27T09:15:10.007", "lastModified": "2023-05-05T16:05:58.873", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.21", "matchCriteriaId": "72C537D6-67BA-4562-B853-F99E6C14315C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/e88fa79de7b5903fb58ddbc231130b04d937d79e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/41edf190-f6bf-4a29-a237-7ff1b2d048d3", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/e88fa79de7b5903fb58ddbc231130b04d937d79e"}}