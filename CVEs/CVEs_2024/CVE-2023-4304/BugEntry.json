{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api;\n\nuse Exception;\n\nabstract class ApiParameter\n{\n\n\t/**\n\t * array of parameters passed to the command\n\t *\n\t * @var array\n\t */\n\tprivate $cmd_params = null;\n\n\t/**\n\t *\n\t * @param array $params\n\t *            optional, array of parameters (var=>value) for the command\n\t *\n\t * @throws Exception\n\t */\n\tpublic function __construct($params = null)\n\t{\n\t\tif (!is_null($params)) {\n\t\t\t$params = $this->trimArray($params);\n\t\t}\n\t\t$this->cmd_params = $params;\n\t}\n\n\t/**\n\t * run 'trim' function on an array recursively\n\t *\n\t * @param array $input\n\t *\n\t * @return array\n\t */\n\tprivate function trimArray($input)\n\t{\n\t\tif ($input === '') {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (is_numeric($input) || is_null($input)) {\n\t\t\treturn $input;\n\t\t}\n\t\tif (!is_array($input)) {\n\t\t\treturn trim($input);\n\t\t}\n\t\treturn array_map([\n\t\t\t$this,\n\t\t\t'trimArray'\n\t\t], $input);\n\t}\n\n\t/**\n\t * get specific parameter which also has and unlimited-field\n\t *\n\t * @param string $param\n\t *            parameter to get out of the request-parameter list\n\t * @param string $ul_field\n\t *            parameter to get out of the request-parameter list\n\t * @param bool $optional\n\t *            default: false\n\t * @param mixed $default\n\t *            value which is returned if optional=true and param is not set\n\t *\n\t * @return mixed\n\t * @throws Exception\n\t */\n\tprotected function getUlParam($param = null, $ul_field = null, $optional = false, $default = 0)\n\t{\n\t\t$param_value = (int)$this->getParam($param, $optional, $default);\n\t\t$ul_field_value = $this->getBoolParam($ul_field, true, 0);\n\t\tif ($ul_field_value != '0') {\n\t\t\t$param_value = -1;\n\t\t}\n\t\treturn $param_value;\n\t}\n\n\t/**\n\t * get specific parameter from the parameterlist;\n\t * check for existence and != empty if needed.\n\t * Maybe more in the future\n\t *\n\t * @param string $param\n\t *            parameter to get out of the request-parameter list\n\t * @param bool $optional\n\t *            default: false\n\t * @param mixed $default\n\t *            value which is returned if optional=true and param is not set\n\t *\n\t * @return mixed\n\t * @throws Exception\n\t */\n\tprotected function getParam($param = null, $optional = false, $default = '')\n\t{\n\t\t// does it exist?\n\t\tif (!isset($this->cmd_params[$param])) {\n\t\t\tif ($optional === false) {\n\t\t\t\t// get module + function for better error-messages\n\t\t\t\t$inmod = $this->getModFunctionString();\n\t\t\t\tthrow new Exception('Requested parameter \"' . $param . '\" could not be found for \"' . $inmod . '\"', 404);\n\t\t\t}\n\t\t\treturn $default;\n\t\t}\n\t\t// is it empty? - test really on string, as value 0 is being seen as empty by php\n\t\tif ($this->cmd_params[$param] === \"\") {\n\t\t\tif ($optional === false) {\n\t\t\t\t// get module + function for better error-messages\n\t\t\t\t$inmod = $this->getModFunctionString();\n\t\t\t\tthrow new Exception('Requested parameter \"' . $param . '\" is empty where it should not be for \"' . $inmod . '\"', 406);\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t\t// everything else is fine\n\t\treturn $this->cmd_params[$param];\n\t}\n\n\t/**\n\t * returns \"module::function()\" for better error-messages (missing parameter etc.)\n\t * makes debugging a whole lot more comfortable\n\t *\n\t * @param int $level\n\t *            depth of backtrace, default 2\n\t *\n\t * @param int $max_level\n\t * @param array|null $trace\n\t *\n\t * @return string\n\t */\n\tprivate function getModFunctionString($level = 1, $max_level = 5, $trace = null)\n\t{\n\t\t// which class called us\n\t\t$_class = get_called_class();\n\t\tif (empty($trace)) {\n\t\t\t// get backtrace\n\t\t\t$trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);\n\t\t}\n\t\t// check class and function\n\t\t$class = $trace[$level]['class'];\n\t\t$func = $trace[$level]['function'];\n\t\t// is it the one we are looking for?\n\t\tif ($class != $_class && $level <= $max_level) {\n\t\t\t// check one level deeper\n\t\t\treturn $this->getModFunctionString(++$level, $max_level, $trace);\n\t\t}\n\t\treturn str_replace(\"Froxlor\\\\Api\\\\Commands\\\\\", \"\", $class) . ':' . $func;\n\t}\n\n\t/**\n\t * getParam wrapper for boolean parameter\n\t *\n\t * @param string $param\n\t *            parameter to get out of the request-parameter list\n\t * @param bool $optional\n\t *            default: false\n\t * @param mixed $default\n\t *            value which is returned if optional=true and param is not set\n\t *\n\t * @return string\n\t */\n\tprotected function getBoolParam($param = null, $optional = false, $default = false)\n\t{\n\t\t$_default = '0';\n\t\tif ($default) {\n\t\t\t$_default = '1';\n\t\t}\n\t\t$param_value = $this->getParam($param, $optional, $_default);\n\t\tif ($param_value && intval($param_value) != 0) {\n\t\t\treturn '1';\n\t\t}\n\t\treturn '0';\n\t}\n\n\t/**\n\t * return list of all parameters\n\t *\n\t * @return array\n\t */\n\tprotected function getParamList()\n\t{\n\t\treturn $this->cmd_params;\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Idna\\IdnaWrapper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass Admins extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * increase resource-usage\n\t *\n\t * @param int $adminid\n\t * @param string $resource\n\t * @param string $extra\n\t *            optional, default empty\n\t * @param int $increase_by\n\t *            optional, default 1\n\t */\n\tpublic static function increaseUsage($adminid = 0, $resource = null, $extra = '', $increase_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_ADMINS, 'adminid', $adminid, '+', $resource, $extra, $increase_by);\n\t}\n\n\t/**\n\t * decrease resource-usage\n\t *\n\t * @param int $adminid\n\t * @param string $resource\n\t * @param string $extra\n\t *            optional, default empty\n\t * @param int $decrease_by\n\t *            optional, default 1\n\t */\n\tpublic static function decreaseUsage($adminid = 0, $resource = null, $extra = '', $decrease_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_ADMINS, 'adminid', $adminid, '-', $resource, $extra, $decrease_by);\n\t}\n\n\t/**\n\t * lists all admin entries\n\t *\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t *\n\t * @access admin\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] list admins\");\n\t\t\t$query_fields = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT *\n\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\" . $this->getSearchWhere($query_fields) . $this->getOrderBy() . $this->getLimit());\n\t\t\tDatabase::pexecute($result_stmt, $query_fields, true, true);\n\t\t\t$result = [];\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response([\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t]);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of admins for the given admin\n\t *\n\t * @access admin\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_admins\n\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\");\n\t\t\t$result = Database::pexecute_first($result_stmt, null, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response($result['num_admins']);\n\t\t\t}\n\t\t\t$this->response(0);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * create a new admin user\n\t *\n\t * @param string $name\n\t * @param string $email\n\t * @param string $new_loginname\n\t * @param string $admin_password\n\t *            optional, default auto-generated\n\t * @param string $def_language\n\t *            optional, default is system-default language\n\t * @param bool $api_allowed\n\t *            optional, default is true if system setting api.enabled is true, else false\n\t * @param string $custom_notes\n\t *            optional, default empty\n\t * @param bool $custom_notes_show\n\t *            optional, default false\n\t * @param int $diskspace\n\t *            optional, default 0\n\t * @param bool $diskspace_ul\n\t *            optional, default false\n\t * @param int $traffic\n\t *            optional, default 0\n\t * @param bool $traffic_ul\n\t *            optional, default false\n\t * @param int $customers\n\t *            optional, default 0\n\t * @param bool $customers_ul\n\t *            optional, default false\n\t * @param int $domains\n\t *            optional, default 0\n\t * @param bool $domains_ul\n\t *            optional, default false\n\t * @param int $subdomains\n\t *            optional, default 0\n\t * @param bool $subdomains_ul\n\t *            optional, default false\n\t * @param int $emails\n\t *            optional, default 0\n\t * @param bool $emails_ul\n\t *            optional, default false\n\t * @param int $email_accounts\n\t *            optional, default 0\n\t * @param bool $email_accounts_ul\n\t *            optional, default false\n\t * @param int $email_forwarders\n\t *            optional, default 0\n\t * @param bool $email_forwarders_ul\n\t *            optional, default false\n\t * @param int $email_quota\n\t *            optional, default 0\n\t * @param bool $email_quota_ul\n\t *            optional, default false\n\t * @param int $ftps\n\t *            optional, default 0\n\t * @param bool $ftps_ul\n\t *            optional, default false\n\t * @param int $mysqls\n\t *            optional, default 0\n\t * @param bool $mysqls_ul\n\t *            optional, default false\n\t * @param bool $customers_see_all\n\t *            optional, default false\n\t * @param bool $caneditphpsettings\n\t *            optional, default false\n\t * @param bool $change_serversettings\n\t *            optional, default false\n\t * @param array $ipaddress\n\t *            optional, list of ip-address id's; default -1 (all IP's)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t// required parameters\n\t\t\t$name = $this->getParam('name');\n\t\t\t$email = $this->getParam('email');\n\t\t\t$loginname = $this->getParam('new_loginname');\n\n\t\t\t// parameters\n\t\t\t$def_language = $this->getParam('def_language', true, Settings::Get('panel.standardlanguage'));\n\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, Settings::Get('api.enabled'));\n\t\t\t$custom_notes = $this->getParam('custom_notes', true, '');\n\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, 0);\n\t\t\t$password = $this->getParam('admin_password', true, '');\n\n\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t$customers = $this->getUlParam('customers', 'customers_ul', true, 0);\n\t\t\t$domains = $this->getUlParam('domains', 'domains_ul', true, 0);\n\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, 0);\n\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\n\t\t\t$customers_see_all = $this->getBoolParam('customers_see_all', true, 0);\n\t\t\t$caneditphpsettings = $this->getBoolParam('caneditphpsettings', true, 0);\n\t\t\t$change_serversettings = $this->getBoolParam('change_serversettings', true, 0);\n\t\t\t$ipaddress = $this->getParam('ipaddress', true, -1);\n\n\t\t\t// validation\n\t\t\t$name = Validate::validate($name, 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t$email = $idna_convert->encode(Validate::validate($email, 'email', '', '', [], true));\n\t\t\t$def_language = Validate::validate($def_language, 'default language', '', '', [], true);\n\t\t\t$custom_notes = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', Validate::REGEX_CONF_TEXT, '', [], true);\n\n\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t$email_quota = -1;\n\t\t\t}\n\n\t\t\t$password = Validate::validate($password, 'password', '', '', [], true);\n\t\t\t// only check if not empty,\n\t\t\t// cause empty == generate password automatically\n\t\t\tif ($password != '') {\n\t\t\t\t$password = Crypt::validatePassword($password, true);\n\t\t\t}\n\n\t\t\t$diskspace *= 1024;\n\t\t\t$traffic *= 1024 * 1024;\n\n\t\t\t// Check if the account already exists\n\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t$loginname_check_stmt = Database::prepare(\"\n\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname` = :login\n\t\t\t\");\n\t\t\t$loginname_check = Database::pexecute_first($loginname_check_stmt, [\n\t\t\t\t'login' => $loginname\n\t\t\t], true, true);\n\n\t\t\t// Check if an admin with the loginname already exists\n\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t$loginname_check_admin_stmt = Database::prepare(\"\n\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `loginname` = :login\n\t\t\t\");\n\t\t\t$loginname_check_admin = Database::pexecute_first($loginname_check_admin_stmt, [\n\t\t\t\t'login' => $loginname\n\t\t\t], true, true);\n\n\t\t\tif (($loginname_check && strtolower($loginname_check['loginname']) == strtolower($loginname)) || ($loginname_check_admin && strtolower($loginname_check_admin['loginname']) == strtolower($loginname))) {\n\t\t\t\tResponse::standardError('loginnameexists', $loginname, true);\n\t\t\t} elseif (preg_match('/^' . preg_quote(Settings::Get('customer.accountprefix'), '/') . '([0-9]+)/', $loginname)) {\n\t\t\t\t// Accounts which match systemaccounts are not allowed, filtering them\n\t\t\t\tResponse::standardError('loginnameisusingprefix', Settings::Get('customer.accountprefix'), true);\n\t\t\t} elseif (function_exists('posix_getpwnam') && !in_array(\"posix_getpwnam\", explode(\",\", ini_get('disable_functions'))) && posix_getpwnam($loginname)) {\n\t\t\t\tResponse::standardError('loginnameissystemaccount', $loginname, true);\n\t\t\t} elseif (!Validate::validateUsername($loginname)) {\n\t\t\t\tResponse::standardError('loginnameiswrong', $loginname, true);\n\t\t\t} elseif (!Validate::validateEmail($email)) {\n\t\t\t\tResponse::standardError('emailiswrong', $email, true);\n\t\t\t} else {\n\t\t\t\tif ($customers_see_all != '1') {\n\t\t\t\t\t$customers_see_all = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($caneditphpsettings != '1') {\n\t\t\t\t\t$caneditphpsettings = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($change_serversettings != '1') {\n\t\t\t\t\t$change_serversettings = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($password == '') {\n\t\t\t\t\t$password = Crypt::generatePassword();\n\t\t\t\t}\n\n\t\t\t\t$_theme = Settings::Get('panel.default_theme');\n\n\t\t\t\t$ins_data = [\n\t\t\t\t\t'loginname' => $loginname,\n\t\t\t\t\t'password' => Crypt::makeCryptPassword($password),\n\t\t\t\t\t'name' => $name,\n\t\t\t\t\t'email' => $email,\n\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t'change_serversettings' => $change_serversettings,\n\t\t\t\t\t'customers' => $customers,\n\t\t\t\t\t'customers_see_all' => $customers_see_all,\n\t\t\t\t\t'domains' => $domains,\n\t\t\t\t\t'caneditphpsettings' => $caneditphpsettings,\n\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t'quota' => $email_quota,\n\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t'ip' => empty($ipaddress) ? \"\" : (is_array($ipaddress) && $ipaddress > 0 ? json_encode($ipaddress) : -1),\n\t\t\t\t\t'theme' => $_theme,\n\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t'custom_notes_show' => $custom_notes_show\n\t\t\t\t];\n\n\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t\t`loginname` = :loginname,\n\t\t\t\t\t`password` = :password,\n\t\t\t\t\t`name` = :name,\n\t\t\t\t\t`email` = :email,\n\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t`change_serversettings` = :change_serversettings,\n\t\t\t\t\t`customers` = :customers,\n\t\t\t\t\t`customers_see_all` = :customers_see_all,\n\t\t\t\t\t`domains` = :domains,\n\t\t\t\t\t`caneditphpsettings` = :caneditphpsettings,\n\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t`email_accounts` = :accounts,\n\t\t\t\t\t`email_forwarders` = :forwarders,\n\t\t\t\t\t`email_quota` = :quota,\n\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t`ip` = :ip,\n\t\t\t\t\t`theme` = :theme,\n\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t`custom_notes_show` = :custom_notes_show\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t$adminid = Database::lastInsertId();\n\t\t\t\t$ins_data['adminid'] = $adminid;\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added admin '\" . $loginname . \"'\");\n\n\t\t\t\t// get all admin-data for return-array\n\t\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t\t'id' => $adminid\n\t\t\t\t]);\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return an admin entry by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the admin-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = $id > 0;\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') == 1 || ($this->getUserDetail('adminid') == $id || $this->getUserDetail('loginname') == $loginname))) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE \" . ($id > 0 ? \"`adminid` = :idln\" : \"`loginname` = :idln\"));\n\t\t\t$params = [\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t];\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] get admin '\" . $result['loginname'] . \"'\");\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t\t$key = ($id > 0 ? \"id #\" . $id : \"loginname '\" . $loginname . \"'\");\n\t\t\tthrow new Exception(\"Admin with \" . $key . \" could not be found\", 404);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update an admin user by given id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the admin-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t * @param string $name\n\t *            optional\n\t * @param string $email\n\t *            optional\n\t * @param string $admin_password\n\t *            optional, default auto-generated\n\t * @param string $def_language\n\t *            optional, default is system-default language\n\t * @param bool $api_allowed\n\t *            optional, default is true if system setting api.enabled is true, else false\n\t * @param string $custom_notes\n\t *            optional, default empty\n\t * @param string $theme\n\t *            optional\n\t * @param bool $deactivated\n\t *            optional, default false\n\t * @param bool $custom_notes_show\n\t *            optional, default false\n\t * @param int $diskspace\n\t *            optional, default 0\n\t * @param bool $diskspace_ul\n\t *            optional, default false\n\t * @param int $traffic\n\t *            optional, default 0\n\t * @param bool $traffic_ul\n\t *            optional, default false\n\t * @param int $customers\n\t *            optional, default 0\n\t * @param bool $customers_ul\n\t *            optional, default false\n\t * @param int $domains\n\t *            optional, default 0\n\t * @param bool $domains_ul\n\t *            optional, default false\n\t * @param int $subdomains\n\t *            optional, default 0\n\t * @param bool $subdomains_ul\n\t *            optional, default false\n\t * @param int $emails\n\t *            optional, default 0\n\t * @param bool $emails_ul\n\t *            optional, default false\n\t * @param int $email_accounts\n\t *            optional, default 0\n\t * @param bool $email_accounts_ul\n\t *            optional, default false\n\t * @param int $email_forwarders\n\t *            optional, default 0\n\t * @param bool $email_forwarders_ul\n\t *            optional, default false\n\t * @param int $email_quota\n\t *            optional, default 0\n\t * @param bool $email_quota_ul\n\t *            optional, default false\n\t * @param int $ftps\n\t *            optional, default 0\n\t * @param bool $ftps_ul\n\t *            optional, default false\n\t * @param int $mysqls\n\t *            optional, default 0\n\t * @param bool $mysqls_ul\n\t *            optional, default false\n\t * @param bool $customers_see_all\n\t *            optional, default false\n\t * @param bool $caneditphpsettings\n\t *            optional, default false\n\t * @param bool $change_serversettings\n\t *            optional, default false\n\t * @param array $ipaddress\n\t *            optional, list of ip-address id's; default -1 (all IP's)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['adminid'];\n\n\t\t\tif ($this->getUserDetail('change_serversettings') == 1 || $result['adminid'] == $this->getUserDetail('adminid')) {\n\t\t\t\t// parameters\n\t\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t\t$email = $this->getParam('email', true, $idna_convert->decode($result['email']));\n\t\t\t\t$password = $this->getParam('admin_password', true, '');\n\t\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t\t$custom_notes = $this->getParam('custom_notes', true, ($result['custom_notes'] ?? \"\"));\n\t\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, $result['custom_notes_show']);\n\t\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\n\t\t\t\t// you cannot edit some of the details of yourself\n\t\t\t\tif ($result['adminid'] == $this->getUserDetail('adminid')) {\n\t\t\t\t\t$api_allowed = $result['api_allowed'];\n\t\t\t\t\t$deactivated = $result['deactivated'];\n\t\t\t\t\t$customers = $result['customers'];\n\t\t\t\t\t$domains = $result['domains'];\n\t\t\t\t\t$subdomains = $result['subdomains'];\n\t\t\t\t\t$emails = $result['emails'];\n\t\t\t\t\t$email_accounts = $result['email_accounts'];\n\t\t\t\t\t$email_forwarders = $result['email_forwarders'];\n\t\t\t\t\t$email_quota = $result['email_quota'];\n\t\t\t\t\t$ftps = $result['ftps'];\n\t\t\t\t\t$mysqls = $result['mysqls'];\n\t\t\t\t\t$customers_see_all = $result['customers_see_all'];\n\t\t\t\t\t$caneditphpsettings = $result['caneditphpsettings'];\n\t\t\t\t\t$change_serversettings = $result['change_serversettings'];\n\t\t\t\t\t$diskspace = $result['diskspace'];\n\t\t\t\t\t$traffic = $result['traffic'];\n\t\t\t\t\t$ipaddress = ($result['ip'] != -1 ? json_decode($result['ip'], true) : -1);\n\t\t\t\t} else {\n\t\t\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, $result['api_allowed']);\n\t\t\t\t\t$deactivated = $this->getBoolParam('deactivated', true, $result['deactivated']);\n\n\t\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, round($result['diskspace'] / 1024, $dec_places));\n\t\t\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, round($result['traffic'] / (1024 * 1024), $dec_places));\n\t\t\t\t\t$customers = $this->getUlParam('customers', 'customers_ul', true, $result['customers']);\n\t\t\t\t\t$domains = $this->getUlParam('domains', 'domains_ul', true, $result['domains']);\n\t\t\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\n\t\t\t\t\t$customers_see_all = $this->getBoolParam('customers_see_all', true, $result['customers_see_all']);\n\t\t\t\t\t$caneditphpsettings = $this->getBoolParam('caneditphpsettings', true, $result['caneditphpsettings']);\n\t\t\t\t\t$change_serversettings = $this->getBoolParam('change_serversettings', true, $result['change_serversettings']);\n\t\t\t\t\t$ipaddress = $this->getParam('ipaddress', true, ($result['ip'] != -1 ? json_decode($result['ip'], true) : -1));\n\n\t\t\t\t\t$diskspace *= 1024;\n\t\t\t\t\t$traffic *= 1024 * 1024;\n\t\t\t\t}\n\n\t\t\t\t// validation\n\t\t\t\t$name = Validate::validate($name, 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t\t$email = $idna_convert->encode(Validate::validate($email, 'email', '', '', [], true));\n\t\t\t\t$def_language = Validate::validate($def_language, 'default language', '', '', [], true);\n\t\t\t\t$custom_notes = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes ?? \"\"), 'custom_notes', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$theme = Validate::validate($theme, 'theme', '', '', [], true);\n\t\t\t\t$password = Validate::validate($password, 'password', '', '', [], true);\n\n\t\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t\t$email_quota = -1;\n\t\t\t\t}\n\n\t\t\t\tif (empty($theme)) {\n\t\t\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t\t\t}\n\n\t\t\t\tif (!Validate::validateEmail($email)) {\n\t\t\t\t\tResponse::standardError('emailiswrong', $email, true);\n\t\t\t\t} else {\n\t\t\t\t\tif ($deactivated != '1') {\n\t\t\t\t\t\t$deactivated = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($customers_see_all != '1') {\n\t\t\t\t\t\t$customers_see_all = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($caneditphpsettings != '1') {\n\t\t\t\t\t\t$caneditphpsettings = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($change_serversettings != '1') {\n\t\t\t\t\t\t$change_serversettings = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($password != '') {\n\t\t\t\t\t\t$password = Crypt::validatePassword($password, true);\n\t\t\t\t\t\t$password = Crypt::makeCryptPassword($password);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$password = $result['password'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// check if a resource was set to something lower\n\t\t\t\t\t// than actually used by the admin/reseller\n\t\t\t\t\t$res_warning = \"\";\n\t\t\t\t\tif ($customers != $result['customers'] && $customers != -1 && $customers < $result['customers_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['customers']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($domains != $result['domains'] && $domains != -1 && $domains < $result['domains_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['domains']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($diskspace != $result['diskspace'] && ($diskspace / 1024) != -1 && $diskspace < $result['diskspace_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['diskspace']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($traffic != $result['traffic'] && ($traffic / 1024 / 1024) != -1 && $traffic < $result['traffic_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['traffic']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($emails != $result['emails'] && $emails != -1 && $emails < $result['emails_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['emails']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_accounts != $result['email_accounts'] && $email_accounts != -1 && $email_accounts < $result['email_accounts_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['email accounts']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_forwarders != $result['email_forwarders'] && $email_forwarders != -1 && $email_forwarders < $result['email_forwarders_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['email forwarders']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_quota != $result['email_quota'] && $email_quota != -1 && $email_quota < $result['email_quota_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['email quota']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($ftps != $result['ftps'] && $ftps != -1 && $ftps < $result['ftps_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['ftps']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($mysqls != $result['mysqls'] && $mysqls != -1 && $mysqls < $result['mysqls_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['mysqls']);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!empty($res_warning)) {\n\t\t\t\t\t\tthrow new Exception($res_warning, 406);\n\t\t\t\t\t}\n\n\t\t\t\t\t$upd_data = [\n\t\t\t\t\t\t'password' => $password,\n\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t\t'change_serversettings' => $change_serversettings,\n\t\t\t\t\t\t'customers' => $customers,\n\t\t\t\t\t\t'customers_see_all' => $customers_see_all,\n\t\t\t\t\t\t'domains' => $domains,\n\t\t\t\t\t\t'caneditphpsettings' => $caneditphpsettings,\n\t\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t\t'quota' => $email_quota,\n\t\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t\t'ip' => empty($ipaddress) ? \"\" : (is_array($ipaddress) && $ipaddress > 0 ? json_encode($ipaddress) : -1),\n\t\t\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t\t\t'theme' => $theme,\n\t\t\t\t\t\t'adminid' => $id\n\t\t\t\t\t];\n\n\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t\t\t`password` = :password,\n\t\t\t\t\t\t`name` = :name,\n\t\t\t\t\t\t`email` = :email,\n\t\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t\t`change_serversettings` = :change_serversettings,\n\t\t\t\t\t\t`customers` = :customers,\n\t\t\t\t\t\t`customers_see_all` = :customers_see_all,\n\t\t\t\t\t\t`domains` = :domains,\n\t\t\t\t\t\t`caneditphpsettings` = :caneditphpsettings,\n\t\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t\t`email_accounts` = :accounts,\n\t\t\t\t\t\t`email_forwarders` = :forwarders,\n\t\t\t\t\t\t`email_quota` = :quota,\n\t\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t\t`ip` = :ip,\n\t\t\t\t\t\t`deactivated` = :deactivated,\n\t\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t\t\t`theme` = :theme\n\t\t\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($upd_stmt, $upd_data, true, true);\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] edited admin '\" . $result['loginname'] . \"'\");\n\n\t\t\t\t\t// get all admin-data for return-array\n\t\t\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t\t\t'id' => $result['adminid']\n\t\t\t\t\t]);\n\t\t\t\t\treturn $this->response($result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * delete a admin entry by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the admin-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['adminid'];\n\n\t\t\t// don't be stupid\n\t\t\tif ($id == $this->getUserDetail('adminid')) {\n\t\t\t\tResponse::standardError('youcantdeleteyourself', '', true);\n\t\t\t}\n\t\t\t// can't delete the first superadmin\n\t\t\tif ($id == 1) {\n\t\t\t\tResponse::standardError('cannotdeletesuperadmin', '', true);\n\t\t\t}\n\n\t\t\t// delete admin\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete the traffic-usage\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TRAFFIC_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// set admin-id of the old admin's customer to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// set admin-id of the old admin's domains to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete old admin's api keys if exists (no customer keys)\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_API_KEYS . \"` WHERE\n\t\t\t\t`adminid` = :adminid AND `customerid` = '0'\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// set admin-id of the old admin's api-keys to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_API_KEYS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted admin '\" . $result['loginname'] . \"'\");\n\t\t\tUser::updateCounters();\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * unlock a locked admin by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the admin-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function unlock()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['adminid'];\n\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t`loginfail_count` = '0'\n\t\t\t\tWHERE `adminid`= :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\t// set the new value for result-array\n\t\t\t$result['loginfail_count'] = 0;\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] unlocked admin '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Validate;\n\nuse Exception;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Idna\\IdnaWrapper;\nuse Froxlor\\System\\IPTools;\nuse Froxlor\\UI\\Response;\n\nclass Validate\n{\n\n\tconst REGEX_DIR = '/^|(\\/[\\w-]+)+$/';\n\n\tconst REGEX_PORT = '/^(([1-9])|([1-9][0-9])|([1-9][0-9][0-9])|([1-9][0-9][0-9][0-9])|([1-5][0-9][0-9][0-9][0-9])|(6[0-4][0-9][0-9][0-9])|(65[0-4][0-9][0-9])|(655[0-2][0-9])|(6553[0-5]))$/Di';\n\n\tconst REGEX_CONF_TEXT = '/^[^\\0]*$/';\n\n\tconst REGEX_DESC_TEXT = '/^[^\\0\\r\\n<>]*$/';\n\n\tconst REGEX_YYYY_MM_DD = '/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/';\n\n\t/**\n\t * Validates the given string by matching against the pattern, prints an error on failure and exits.\n\t * If the default pattern is used and the string does not match, we try to replace the 'bad' values and log the action.\n\t *\n\t * @param string $str the string to be tested (user input)\n\t * @param string $fieldname to be used in error messages\n\t * @param string $pattern the regular expression to be used for testing\n\t * @param string|array $lng id for the error\n\t * @param string|array $emptydefault fallback value\n\t * @param bool $throw_exception whether to display error or throw an exception, default false\n\t *\n\t * @return string|void the clean string or error\n\t * @throws Exception\n\t */\n\tpublic static function validate(\n\t\tstring $str,\n\t\tstring $fieldname,\n\t\tstring $pattern = '',\n\t\t$lng = '',\n\t\t$emptydefault = [],\n\t\tbool $throw_exception = false\n\t) {\n\t\tif (!is_array($emptydefault)) {\n\t\t\t$emptydefault_array = [\n\t\t\t\t$emptydefault\n\t\t\t];\n\t\t\tunset($emptydefault);\n\t\t\t$emptydefault = $emptydefault_array;\n\t\t\tunset($emptydefault_array);\n\t\t}\n\n\t\t// Check if the $str is one of the values which represent the default for an 'empty' value\n\t\tif (is_array($emptydefault) && !empty($emptydefault) && in_array($str, $emptydefault)) {\n\t\t\treturn $str;\n\t\t}\n\n\t\tif ($pattern == '') {\n\t\t\t$pattern = '/^[^\\r\\n\\t\\f\\0]*$/D';\n\n\t\t\tif (!preg_match($pattern, $str)) {\n\t\t\t\t// Allows letters a-z, digits, space (\\\\040), hyphen (\\\\-), underscore (\\\\_) and backslash (\\\\\\\\),\n\t\t\t\t// everything else is removed from the string.\n\t\t\t\t$allowed = \"/[^a-z0-9\\\\040\\\\.\\\\-\\\\_\\\\\\\\]/i\";\n\t\t\t\t$str = preg_replace($allowed, \"\", $str);\n\t\t\t\t$log = FroxlorLogger::getInstanceOf();\n\t\t\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_WARNING, \"cleaned bad formatted string (\" . $str . \")\");\n\t\t\t}\n\t\t}\n\n\t\tif (preg_match($pattern, $str)) {\n\t\t\treturn $str;\n\t\t}\n\n\t\tif ($lng == '') {\n\t\t\t$lng = 'stringformaterror';\n\t\t}\n\n\t\tResponse::standardError($lng, $fieldname, $throw_exception);\n\t}\n\n\t/**\n\t * Checks whether it is a valid ip\n\t *\n\t * @param string $ip ip-address to check\n\t * @param bool $return_bool whether to return bool or call \\Froxlor\\UI\\Response::standard_error()\n\t * @param string $lng index for error-message (if $return_bool is false)\n\t * @param bool $allow_localhost whether to allow 127.0.0.1\n\t * @param bool $allow_priv whether to allow private network addresses\n\t * @param bool $allow_cidr whether to allow CIDR values e.g. 10.10.10.10/16\n\t * @param bool $cidr_as_netmask whether to format CIDR notation to netmask notation\n\t * @param bool $throw_exception whether to throw an exception on failure\n\t *\n\t * @return string|bool|void ip address on success, false on failure (or nothing if error is displayed)\n\t * @throws Exception\n\t */\n\tpublic static function validate_ip2(\n\t\tstring $ip,\n\t\tbool $return_bool = false,\n\t\tstring $lng = 'invalidip',\n\t\tbool $allow_localhost = false,\n\t\tbool $allow_priv = false,\n\t\tbool $allow_cidr = false,\n\t\tbool $cidr_as_netmask = false,\n\t\tbool $throw_exception = false\n\t) {\n\t\t$cidr = \"\";\n\t\tif ($allow_cidr) {\n\t\t\t$org_ip = $ip;\n\t\t\t$ip_cidr = explode(\"/\", $ip);\n\t\t\tif (count($ip_cidr) === 2) {\n\t\t\t\t$cidr_range_max = 32;\n\t\t\t\tif (IPTools::is_ipv6($ip_cidr[0])) {\n\t\t\t\t\t$cidr_range_max = 128;\n\t\t\t\t}\n\t\t\t\tif (strlen($ip_cidr[1]) <= 3 && in_array((int)$ip_cidr[1], array_values(range(1, $cidr_range_max)),\n\t\t\t\t\t\ttrue) === false) {\n\t\t\t\t\tif ($return_bool) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tResponse::standardError($lng, $ip, $throw_exception);\n\t\t\t\t}\n\t\t\t\tif ($cidr_as_netmask && IPTools::is_ipv6($ip_cidr[0])) {\n\t\t\t\t\t// MySQL does not handle CIDR of IPv6 addresses, return error\n\t\t\t\t\tif ($return_bool) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tResponse::standardError($lng, $ip, $throw_exception);\n\t\t\t\t}\n\t\t\t\t$ip = $ip_cidr[0];\n\t\t\t\tif ($cidr_as_netmask && strlen($ip_cidr[1]) <= 3) {\n\t\t\t\t\t$ip_cidr[1] = IPTools::cidr2NetmaskAddr($org_ip);\n\t\t\t\t}\n\t\t\t\t$cidr = \"/\" . $ip_cidr[1];\n\t\t\t} else {\n\t\t\t\t$ip = $org_ip;\n\t\t\t}\n\t\t} elseif (strpos($ip, \"/\") !== false) {\n\t\t\tif ($return_bool) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tResponse::standardError($lng, $ip, $throw_exception);\n\t\t}\n\n\t\t$filter_lan = $allow_priv ? FILTER_FLAG_NO_RES_RANGE : (FILTER_FLAG_NO_RES_RANGE | FILTER_FLAG_NO_PRIV_RANGE);\n\n\t\tif ((filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) || filter_var($ip, FILTER_VALIDATE_IP,\n\t\t\t\t\tFILTER_FLAG_IPV4)) && filter_var($ip, FILTER_VALIDATE_IP, $filter_lan)) {\n\t\t\treturn $ip . $cidr;\n\t\t}\n\n\t\t// special case where localhost ip is allowed (mysql-access-hosts for example)\n\t\tif ($allow_localhost && $ip == '127.0.0.1') {\n\t\t\treturn $ip . $cidr;\n\t\t}\n\n\t\tif ($return_bool) {\n\t\t\treturn false;\n\t\t}\n\t\tResponse::standardError($lng, $ip, $throw_exception);\n\t}\n\n\t/**\n\t * Returns whether a URL is in a correct format or not\n\t *\n\t * @param string $url URL to be tested\n\t * @param bool $allow_private_ip optional, default is false\n\t *\n\t * @return bool\n\t */\n\tpublic static function validateUrl(string $url, bool $allow_private_ip = false): bool\n\t{\n\t\tif (strtolower(substr($url, 0, 7)) != \"http://\" && strtolower(substr($url, 0, 8)) != \"https://\") {\n\t\t\t$url = 'http://' . $url;\n\t\t}\n\n\t\t// needs converting\n\t\ttry {\n\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t$url = $idna_convert->encode($url);\n\t\t} catch (Exception $e) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($allow_private_ip) {\n\t\t\t$pattern = '%^(?:(?:https?):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$%iuS';\n\t\t} else {\n\t\t\t$pattern = '%^(?:(?:https?):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,})))(?::\\d{2,5})?(?:/[^\\s]*)?$%iuS';\n\t\t}\n\t\tif (preg_match($pattern, $url)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if the submitted string is a valid domainname\n\t *\n\t * @param string $domainname The domainname which should be checked.\n\t * @param bool $allow_underscore optional if true, allowes the underscore character in a domain label (DKIM etc.)\n\t *\n\t * @return string|boolean the domain-name if the domain is valid, false otherwise\n\t */\n\tpublic static function validateDomain(string $domainname, bool $allow_underscore = false)\n\t{\n\t\t$char_validation = '([a-z\\d](-*[a-z\\d])*)(\\.?([a-z\\d](-*[a-z\\d])*))*\\.(xn\\-\\-)?([a-z\\d])+';\n\t\tif ($allow_underscore) {\n\t\t\t$char_validation = '([a-z\\d\\_](-*[a-z\\d\\_])*)(\\.([a-z\\d\\_](-*[a-z\\d])*))*(\\.?([a-z\\d](-*[a-z\\d])*))+\\.(xn\\-\\-)?([a-z\\d])+';\n\t\t}\n\n\t\t// valid chars check && overall length check && length of each label\n\t\tif (preg_match(\"/^\" . $char_validation . \"$/i\", $domainname) && preg_match(\"/^.{1,253}$/\",\n\t\t\t\t$domainname) && preg_match(\"/^[^\\.]{1,63}(\\.[^\\.]{1,63})*$/\", $domainname)) {\n\t\t\treturn $domainname;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * validate a local-hostname by regex\n\t *\n\t * @param string $hostname\n\t *\n\t * @return string|boolean hostname on success, else false\n\t */\n\tpublic static function validateLocalHostname(string $hostname)\n\t{\n\t\t$pattern = '/^[a-z0-9][a-z0-9\\-]{0,62}$/i';\n\t\tif (preg_match($pattern, $hostname)) {\n\t\t\treturn $hostname;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if an emailaddress is in correct format or not\n\t *\n\t * @param string $email The email address to check\n\t *\n\t * @return mixed\n\t */\n\tpublic static function validateEmail(string $email)\n\t{\n\t\t$email = strtolower($email);\n\t\t// as of php-7.1\n\t\tif (defined('FILTER_FLAG_EMAIL_UNICODE')) {\n\t\t\treturn filter_var($email, FILTER_VALIDATE_EMAIL, FILTER_FLAG_EMAIL_UNICODE);\n\t\t}\n\t\treturn filter_var($email, FILTER_VALIDATE_EMAIL);\n\t}\n\n\t/**\n\t * Returns if a username is in correct format or not.\n\t *\n\t * @param string $username The username to check\n\t * @param bool $unix_names optional, default true, checks whether it must be UNIX compatible\n\t * @param int $mysql_max optional, number of max mysql username characters, default empty\n\t *\n\t * @return bool\n\t */\n\tpublic static function validateUsername(string $username, bool $unix_names = true, int $mysql_max = 0): bool\n\t{\n\t\tif (empty($mysql_max) || $mysql_max <= 0) {\n\t\t\t$mysql_max = Database::getSqlUsernameLength() - 1;\n\t\t} else {\n\t\t\t$mysql_max--;\n\t\t}\n\t\tif (!$unix_names) {\n\t\t\tif (strpos($username, '--') === false) {\n\t\t\t\treturn (preg_match('/^[a-z][a-z0-9\\-_]{0,' . $mysql_max . '}[a-z0-9]{1}$/Di', $username) != false);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn (preg_match('/^[a-z][a-z0-9]{0,' . $mysql_max . '}$/Di', $username) != false);\n\t}\n\n\t/**\n\t * validate sql interval string\n\t *\n\t * @param string $interval\n\t *\n\t * @return bool\n\t */\n\tpublic static function validateSqlInterval(string $interval = ''): bool\n\t{\n\t\tif (!empty($interval) && strstr($interval, ' ') !== false) {\n\t\t\t/*\n\t\t\t * [0] = ([0-9]+)\n\t\t\t * [1] = valid SQL-Interval expression\n\t\t\t */\n\t\t\t$valid_expr = [\n\t\t\t\t'SECOND',\n\t\t\t\t'MINUTE',\n\t\t\t\t'HOUR',\n\t\t\t\t'DAY',\n\t\t\t\t'WEEK',\n\t\t\t\t'MONTH',\n\t\t\t\t'YEAR'\n\t\t\t];\n\n\t\t\t$interval_parts = explode(' ', $interval);\n\n\t\t\tif (count($interval_parts) == 2 && preg_match('/[0-9]+/',\n\t\t\t\t\t$interval_parts[0]) && in_array(strtoupper($interval_parts[1]), $valid_expr)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * validates whether a given base64 string decodes to an image\n\t *\n\t * @param string $base64string\n\t * @return bool\n\t * @throws Exception\n\t */\n\tpublic static function validateBase64Image(string $base64string) {\n\n\t\tif (!extension_loaded('gd')) {\n\t\t\tResponse::standardError('phpgdextensionnotavailable', null, true);\n\t\t}\n\n\t\t// Decode the base64 string\n\t\t$data = base64_decode($base64string);\n\n\t\t// Create an image from the decoded data\n\t\t$image = @imagecreatefromstring($data);\n\n\t\t// Check if the image was created successfully\n\t\tif (!$image) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get the MIME type of the image\n\t\t$mime = image_type_to_mime_type(getimagesizefromstring($data)[2]);\n\n\t\t// Check if the MIME type is a valid image MIME type\n\t\tif (strpos($mime, 'image/') !== 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If everything is okay, return true\n\t\treturn true;\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api;\n\nuse Exception;\n\nabstract class ApiParameter\n{\n\n\t/**\n\t * array of parameters passed to the command\n\t *\n\t * @var array\n\t */\n\tprivate $cmd_params = null;\n\n\t/**\n\t *\n\t * @param array|null $params\n\t *            optional, array of parameters (var=>value) for the command\n\t *\n\t * @throws Exception\n\t */\n\tpublic function __construct(array $params = null)\n\t{\n\t\tif (!is_null($params)) {\n\t\t\t$params = $this->trimArray($params);\n\t\t}\n\t\t$this->cmd_params = $params;\n\t}\n\n\t/**\n\t * run 'trim' function on an array recursively\n\t *\n\t * @param array $input\n\t *\n\t * @return string|array\n\t */\n\tprivate function trimArray($input)\n\t{\n\t\tif ($input === '') {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (is_numeric($input) || is_null($input)) {\n\t\t\treturn $input;\n\t\t}\n\t\tif (!is_array($input)) {\n\t\t\treturn trim($input);\n\t\t}\n\t\treturn array_map([\n\t\t\t$this,\n\t\t\t'trimArray'\n\t\t], $input);\n\t}\n\n\t/**\n\t * get specific parameter which also has and unlimited-field\n\t *\n\t * @param string|null $param\n\t *            parameter to get out of the request-parameter list\n\t * @param string|null $ul_field\n\t *            parameter to get out of the request-parameter list\n\t * @param bool $optional\n\t *            default: false\n\t * @param mixed $default\n\t *            value which is returned if optional=true and param is not set\n\t *\n\t * @return mixed\n\t * @throws Exception\n\t */\n\tprotected function getUlParam(string $param = null, string $ul_field = null, bool $optional = false, $default = 0)\n\t{\n\t\t$param_value = (int)$this->getParam($param, $optional, $default);\n\t\t$ul_field_value = $this->getBoolParam($ul_field, true, 0);\n\t\tif ($ul_field_value != '0') {\n\t\t\t$param_value = -1;\n\t\t}\n\t\treturn $param_value;\n\t}\n\n\t/**\n\t * get specific parameter from the parameter list;\n\t * check for existence and != empty if needed.\n\t * Maybe more in the future\n\t *\n\t * @param string|null $param\n\t *            parameter to get out of the request-parameter list\n\t * @param bool $optional\n\t *            default: false\n\t * @param mixed $default\n\t *            value which is returned if optional=true and param is not set\n\t *\n\t * @return mixed\n\t * @throws Exception\n\t */\n\tprotected function getParam(string $param = null, bool $optional = false, $default = '')\n\t{\n\t\t// does it exist?\n\t\tif (!isset($this->cmd_params[$param])) {\n\t\t\tif ($optional === false) {\n\t\t\t\t// get module + function for better error-messages\n\t\t\t\t$inmod = $this->getModFunctionString();\n\t\t\t\tthrow new Exception('Requested parameter \"' . $param . '\" could not be found for \"' . $inmod . '\"', 404);\n\t\t\t}\n\t\t\treturn $default;\n\t\t}\n\t\t// is it empty? - test really on string, as value 0 is being seen as empty by php\n\t\tif (!is_array($this->cmd_params[$param]) && trim($this->cmd_params[$param]) === \"\") {\n\t\t\tif ($optional === false) {\n\t\t\t\t// get module + function for better error-messages\n\t\t\t\t$inmod = $this->getModFunctionString();\n\t\t\t\tthrow new Exception('Requested parameter \"' . $param . '\" is empty where it should not be for \"' . $inmod . '\"', 406);\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t\t// everything else is fine\n\t\treturn $this->cmd_params[$param];\n\t}\n\n\t/**\n\t * returns \"module::function()\" for better error-messages (missing parameter etc.)\n\t * makes debugging a lot more comfortable\n\t *\n\t * @param int $level\n\t *            depth of backtrace, default 2\n\t *\n\t * @param int $max_level\n\t * @param array|null $trace\n\t *\n\t * @return string\n\t */\n\tprivate function getModFunctionString(int $level = 1, int $max_level = 5, $trace = null)\n\t{\n\t\t// which class called us\n\t\t$_class = get_called_class();\n\t\tif (empty($trace)) {\n\t\t\t// get backtrace\n\t\t\t$trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);\n\t\t}\n\t\t// check class and function\n\t\t$class = $trace[$level]['class'];\n\t\t$func = $trace[$level]['function'];\n\t\t// is it the one we are looking for?\n\t\tif ($class != $_class && $level <= $max_level) {\n\t\t\t// check one level deeper\n\t\t\treturn $this->getModFunctionString(++$level, $max_level, $trace);\n\t\t}\n\t\treturn str_replace(\"Froxlor\\\\Api\\\\Commands\\\\\", \"\", $class) . ':' . $func;\n\t}\n\n\t/**\n\t * getParam wrapper for boolean parameter\n\t *\n\t * @param string|null $param\n\t *            parameter to get out of the request-parameter list\n\t * @param bool $optional\n\t *            default: false\n\t * @param mixed $default\n\t *            value which is returned if optional=true and param is not set\n\t *\n\t * @return string\n\t */\n\tprotected function getBoolParam(string $param = null, bool $optional = false, $default = false)\n\t{\n\t\t$_default = '0';\n\t\tif ($default) {\n\t\t\t$_default = '1';\n\t\t}\n\t\t$param_value = $this->getParam($param, $optional, $_default);\n\t\tif ($param_value && intval($param_value) != 0) {\n\t\t\treturn '1';\n\t\t}\n\t\treturn '0';\n\t}\n\n\t/**\n\t * return list of all parameters\n\t *\n\t * @return array\n\t */\n\tprotected function getParamList()\n\t{\n\t\treturn $this->cmd_params;\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Idna\\IdnaWrapper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass Admins extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * increase resource-usage\n\t *\n\t * @param int $adminid\n\t * @param string $resource\n\t * @param string $extra\n\t *            optional, default empty\n\t * @param int $increase_by\n\t *            optional, default 1\n\t */\n\tpublic static function increaseUsage($adminid = 0, $resource = null, $extra = '', $increase_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_ADMINS, 'adminid', $adminid, '+', $resource, $extra, $increase_by);\n\t}\n\n\t/**\n\t * decrease resource-usage\n\t *\n\t * @param int $adminid\n\t * @param string $resource\n\t * @param string $extra\n\t *            optional, default empty\n\t * @param int $decrease_by\n\t *            optional, default 1\n\t */\n\tpublic static function decreaseUsage($adminid = 0, $resource = null, $extra = '', $decrease_by = 1)\n\t{\n\t\tself::updateResourceUsage(TABLE_PANEL_ADMINS, 'adminid', $adminid, '-', $resource, $extra, $decrease_by);\n\t}\n\n\t/**\n\t * lists all admin entries\n\t *\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t *\n\t * @access admin\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] list admins\");\n\t\t\t$query_fields = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT *\n\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\" . $this->getSearchWhere($query_fields) . $this->getOrderBy() . $this->getLimit());\n\t\t\tDatabase::pexecute($result_stmt, $query_fields, true, true);\n\t\t\t$result = [];\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response([\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t]);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of admins for the given admin\n\t *\n\t * @access admin\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_admins\n\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\");\n\t\t\t$result = Database::pexecute_first($result_stmt, null, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response($result['num_admins']);\n\t\t\t}\n\t\t\t$this->response(0);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * create a new admin user\n\t *\n\t * @param string $name\n\t * @param string $email\n\t * @param string $new_loginname\n\t * @param string $admin_password\n\t *            optional, default auto-generated\n\t * @param string $def_language\n\t *            optional, default is system-default language\n\t * @param bool $api_allowed\n\t *            optional, default is true if system setting api.enabled is true, else false\n\t * @param string $custom_notes\n\t *            optional, default empty\n\t * @param bool $custom_notes_show\n\t *            optional, default false\n\t * @param int $diskspace\n\t *            optional, default 0\n\t * @param bool $diskspace_ul\n\t *            optional, default false\n\t * @param int $traffic\n\t *            optional, default 0\n\t * @param bool $traffic_ul\n\t *            optional, default false\n\t * @param int $customers\n\t *            optional, default 0\n\t * @param bool $customers_ul\n\t *            optional, default false\n\t * @param int $domains\n\t *            optional, default 0\n\t * @param bool $domains_ul\n\t *            optional, default false\n\t * @param int $subdomains\n\t *            optional, default 0\n\t * @param bool $subdomains_ul\n\t *            optional, default false\n\t * @param int $emails\n\t *            optional, default 0\n\t * @param bool $emails_ul\n\t *            optional, default false\n\t * @param int $email_accounts\n\t *            optional, default 0\n\t * @param bool $email_accounts_ul\n\t *            optional, default false\n\t * @param int $email_forwarders\n\t *            optional, default 0\n\t * @param bool $email_forwarders_ul\n\t *            optional, default false\n\t * @param int $email_quota\n\t *            optional, default 0\n\t * @param bool $email_quota_ul\n\t *            optional, default false\n\t * @param int $ftps\n\t *            optional, default 0\n\t * @param bool $ftps_ul\n\t *            optional, default false\n\t * @param int $mysqls\n\t *            optional, default 0\n\t * @param bool $mysqls_ul\n\t *            optional, default false\n\t * @param bool $customers_see_all\n\t *            optional, default false\n\t * @param bool $caneditphpsettings\n\t *            optional, default false\n\t * @param bool $change_serversettings\n\t *            optional, default false\n\t * @param array $ipaddress\n\t *            optional, list of ip-address id's; default -1 (all IP's)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t// required parameters\n\t\t\t$name = $this->getParam('name');\n\t\t\t$email = $this->getParam('email');\n\t\t\t$loginname = $this->getParam('new_loginname');\n\n\t\t\t// parameters\n\t\t\t$def_language = $this->getParam('def_language', true, Settings::Get('panel.standardlanguage'));\n\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, Settings::Get('api.enabled'));\n\t\t\t$custom_notes = $this->getParam('custom_notes', true, '');\n\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, 0);\n\t\t\t$password = $this->getParam('admin_password', true, '');\n\n\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, 0);\n\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, 0);\n\t\t\t$customers = $this->getUlParam('customers', 'customers_ul', true, 0);\n\t\t\t$domains = $this->getUlParam('domains', 'domains_ul', true, 0);\n\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, 0);\n\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, 0);\n\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, 0);\n\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, 0);\n\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, 0);\n\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, 0);\n\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, 0);\n\n\t\t\t$customers_see_all = $this->getBoolParam('customers_see_all', true, 0);\n\t\t\t$caneditphpsettings = $this->getBoolParam('caneditphpsettings', true, 0);\n\t\t\t$change_serversettings = $this->getBoolParam('change_serversettings', true, 0);\n\t\t\t$ipaddress = $this->getParam('ipaddress', true, -1);\n\n\t\t\t// validation\n\t\t\t$name = Validate::validate($name, 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t$email = $idna_convert->encode(Validate::validate($email, 'email', '', '', [], true));\n\t\t\t$def_language = Validate::validate($def_language, 'default language', '', '', [], true);\n\t\t\t$custom_notes = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes), 'custom_notes', Validate::REGEX_CONF_TEXT, '', [], true);\n\n\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t$email_quota = -1;\n\t\t\t}\n\n\t\t\t$password = Validate::validate($password, 'password', '', '', [], true);\n\t\t\t// only check if not empty,\n\t\t\t// cause empty == generate password automatically\n\t\t\tif ($password != '') {\n\t\t\t\t$password = Crypt::validatePassword($password, true);\n\t\t\t}\n\n\t\t\t$diskspace *= 1024;\n\t\t\t$traffic *= 1024 * 1024;\n\n\t\t\t// Check if the account already exists\n\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t$loginname_check_stmt = Database::prepare(\"\n\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_CUSTOMERS . \"` WHERE `loginname` = :login\n\t\t\t\");\n\t\t\t$loginname_check = Database::pexecute_first($loginname_check_stmt, [\n\t\t\t\t'login' => $loginname\n\t\t\t], true, true);\n\n\t\t\t// Check if an admin with the loginname already exists\n\t\t\t// do not check via api as we skip any permission checks for this task\n\t\t\t$loginname_check_admin_stmt = Database::prepare(\"\n\t\t\t\tSELECT `loginname` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `loginname` = :login\n\t\t\t\");\n\t\t\t$loginname_check_admin = Database::pexecute_first($loginname_check_admin_stmt, [\n\t\t\t\t'login' => $loginname\n\t\t\t], true, true);\n\n\t\t\tif (($loginname_check && strtolower($loginname_check['loginname']) == strtolower($loginname)) || ($loginname_check_admin && strtolower($loginname_check_admin['loginname']) == strtolower($loginname))) {\n\t\t\t\tResponse::standardError('loginnameexists', $loginname, true);\n\t\t\t} elseif (preg_match('/^' . preg_quote(Settings::Get('customer.accountprefix'), '/') . '([0-9]+)/', $loginname)) {\n\t\t\t\t// Accounts which match systemaccounts are not allowed, filtering them\n\t\t\t\tResponse::standardError('loginnameisusingprefix', Settings::Get('customer.accountprefix'), true);\n\t\t\t} elseif (function_exists('posix_getpwnam') && !in_array(\"posix_getpwnam\", explode(\",\", ini_get('disable_functions'))) && posix_getpwnam($loginname)) {\n\t\t\t\tResponse::standardError('loginnameissystemaccount', $loginname, true);\n\t\t\t} elseif (!Validate::validateUsername($loginname)) {\n\t\t\t\tResponse::standardError('loginnameiswrong', $loginname, true);\n\t\t\t} elseif (!Validate::validateEmail($email)) {\n\t\t\t\tResponse::standardError('emailiswrong', $email, true);\n\t\t\t} else {\n\t\t\t\tif ($customers_see_all != '1') {\n\t\t\t\t\t$customers_see_all = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($caneditphpsettings != '1') {\n\t\t\t\t\t$caneditphpsettings = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($change_serversettings != '1') {\n\t\t\t\t\t$change_serversettings = '0';\n\t\t\t\t}\n\n\t\t\t\tif ($password == '') {\n\t\t\t\t\t$password = Crypt::generatePassword();\n\t\t\t\t}\n\n\t\t\t\t$_theme = Settings::Get('panel.default_theme');\n\n\t\t\t\t$ins_data = [\n\t\t\t\t\t'loginname' => $loginname,\n\t\t\t\t\t'password' => Crypt::makeCryptPassword($password),\n\t\t\t\t\t'name' => $name,\n\t\t\t\t\t'email' => $email,\n\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t'change_serversettings' => $change_serversettings,\n\t\t\t\t\t'customers' => $customers,\n\t\t\t\t\t'customers_see_all' => $customers_see_all,\n\t\t\t\t\t'domains' => $domains,\n\t\t\t\t\t'caneditphpsettings' => $caneditphpsettings,\n\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t'quota' => $email_quota,\n\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t'ip' => empty($ipaddress) ? \"\" : (is_array($ipaddress) && $ipaddress > 0 ? json_encode($ipaddress) : -1),\n\t\t\t\t\t'theme' => $_theme,\n\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t'custom_notes_show' => $custom_notes_show\n\t\t\t\t];\n\n\t\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\t\tINSERT INTO `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t\t`loginname` = :loginname,\n\t\t\t\t\t`password` = :password,\n\t\t\t\t\t`name` = :name,\n\t\t\t\t\t`email` = :email,\n\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t`change_serversettings` = :change_serversettings,\n\t\t\t\t\t`customers` = :customers,\n\t\t\t\t\t`customers_see_all` = :customers_see_all,\n\t\t\t\t\t`domains` = :domains,\n\t\t\t\t\t`caneditphpsettings` = :caneditphpsettings,\n\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t`email_accounts` = :accounts,\n\t\t\t\t\t`email_forwarders` = :forwarders,\n\t\t\t\t\t`email_quota` = :quota,\n\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t`ip` = :ip,\n\t\t\t\t\t`theme` = :theme,\n\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t`custom_notes_show` = :custom_notes_show\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($ins_stmt, $ins_data, true, true);\n\n\t\t\t\t$adminid = Database::lastInsertId();\n\t\t\t\t$ins_data['adminid'] = $adminid;\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added admin '\" . $loginname . \"'\");\n\n\t\t\t\t// get all admin-data for return-array\n\t\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t\t'id' => $adminid\n\t\t\t\t]);\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return an admin entry by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the admin-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\t$id = $this->getParam('id', true, 0);\n\t\t$ln_optional = $id > 0;\n\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') == 1 || ($this->getUserDetail('adminid') == $id || $this->getUserDetail('loginname') == $loginname))) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE \" . ($id > 0 ? \"`adminid` = :idln\" : \"`loginname` = :idln\"));\n\t\t\t$params = [\n\t\t\t\t'idln' => ($id <= 0 ? $loginname : $id)\n\t\t\t];\n\t\t\t$result = Database::pexecute_first($result_stmt, $params, true, true);\n\t\t\tif ($result) {\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"[API] get admin '\" . $result['loginname'] . \"'\");\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t\t$key = ($id > 0 ? \"id #\" . $id : \"loginname '\" . $loginname . \"'\");\n\t\t\tthrow new Exception(\"Admin with \" . $key . \" could not be found\", 404);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update an admin user by given id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the admin-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t * @param string $name\n\t *            optional\n\t * @param string $email\n\t *            optional\n\t * @param string $admin_password\n\t *            optional, default auto-generated\n\t * @param string $def_language\n\t *            optional, default is system-default language\n\t * @param bool $api_allowed\n\t *            optional, default is true if system setting api.enabled is true, else false\n\t * @param string $custom_notes\n\t *            optional, default empty\n\t * @param string $theme\n\t *            optional\n\t * @param bool $deactivated\n\t *            optional, default false\n\t * @param bool $custom_notes_show\n\t *            optional, default false\n\t * @param int $diskspace\n\t *            optional, default 0\n\t * @param bool $diskspace_ul\n\t *            optional, default false\n\t * @param int $traffic\n\t *            optional, default 0\n\t * @param bool $traffic_ul\n\t *            optional, default false\n\t * @param int $customers\n\t *            optional, default 0\n\t * @param bool $customers_ul\n\t *            optional, default false\n\t * @param int $domains\n\t *            optional, default 0\n\t * @param bool $domains_ul\n\t *            optional, default false\n\t * @param int $subdomains\n\t *            optional, default 0\n\t * @param bool $subdomains_ul\n\t *            optional, default false\n\t * @param int $emails\n\t *            optional, default 0\n\t * @param bool $emails_ul\n\t *            optional, default false\n\t * @param int $email_accounts\n\t *            optional, default 0\n\t * @param bool $email_accounts_ul\n\t *            optional, default false\n\t * @param int $email_forwarders\n\t *            optional, default 0\n\t * @param bool $email_forwarders_ul\n\t *            optional, default false\n\t * @param int $email_quota\n\t *            optional, default 0\n\t * @param bool $email_quota_ul\n\t *            optional, default false\n\t * @param int $ftps\n\t *            optional, default 0\n\t * @param bool $ftps_ul\n\t *            optional, default false\n\t * @param int $mysqls\n\t *            optional, default 0\n\t * @param bool $mysqls_ul\n\t *            optional, default false\n\t * @param bool $customers_see_all\n\t *            optional, default false\n\t * @param bool $caneditphpsettings\n\t *            optional, default false\n\t * @param bool $change_serversettings\n\t *            optional, default false\n\t * @param array $ipaddress\n\t *            optional, list of ip-address id's; default -1 (all IP's)\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\tif ($this->isAdmin()) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['adminid'];\n\n\t\t\tif ($this->getUserDetail('change_serversettings') == 1 || $result['adminid'] == $this->getUserDetail('adminid')) {\n\t\t\t\t// parameters\n\t\t\t\t$name = $this->getParam('name', true, $result['name']);\n\t\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t\t$email = $this->getParam('email', true, $idna_convert->decode($result['email']));\n\t\t\t\t$password = $this->getParam('admin_password', true, '');\n\t\t\t\t$def_language = $this->getParam('def_language', true, $result['def_language']);\n\t\t\t\t$custom_notes = $this->getParam('custom_notes', true, ($result['custom_notes'] ?? \"\"));\n\t\t\t\t$custom_notes_show = $this->getBoolParam('custom_notes_show', true, $result['custom_notes_show']);\n\t\t\t\t$theme = $this->getParam('theme', true, $result['theme']);\n\n\t\t\t\t// you cannot edit some of the details of yourself\n\t\t\t\tif ($result['adminid'] == $this->getUserDetail('adminid')) {\n\t\t\t\t\t$api_allowed = $result['api_allowed'];\n\t\t\t\t\t$deactivated = $result['deactivated'];\n\t\t\t\t\t$customers = $result['customers'];\n\t\t\t\t\t$domains = $result['domains'];\n\t\t\t\t\t$subdomains = $result['subdomains'];\n\t\t\t\t\t$emails = $result['emails'];\n\t\t\t\t\t$email_accounts = $result['email_accounts'];\n\t\t\t\t\t$email_forwarders = $result['email_forwarders'];\n\t\t\t\t\t$email_quota = $result['email_quota'];\n\t\t\t\t\t$ftps = $result['ftps'];\n\t\t\t\t\t$mysqls = $result['mysqls'];\n\t\t\t\t\t$customers_see_all = $result['customers_see_all'];\n\t\t\t\t\t$caneditphpsettings = $result['caneditphpsettings'];\n\t\t\t\t\t$change_serversettings = $result['change_serversettings'];\n\t\t\t\t\t$diskspace = $result['diskspace'];\n\t\t\t\t\t$traffic = $result['traffic'];\n\t\t\t\t\t$ipaddress = ($result['ip'] != -1 ? json_decode($result['ip'], true) : -1);\n\t\t\t\t} else {\n\t\t\t\t\t$api_allowed = $this->getBoolParam('api_allowed', true, $result['api_allowed']);\n\t\t\t\t\t$deactivated = $this->getBoolParam('deactivated', true, $result['deactivated']);\n\n\t\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t\t$diskspace = $this->getUlParam('diskspace', 'diskspace_ul', true, round($result['diskspace'] / 1024, $dec_places));\n\t\t\t\t\t$traffic = $this->getUlParam('traffic', 'traffic_ul', true, round($result['traffic'] / (1024 * 1024), $dec_places));\n\t\t\t\t\t$customers = $this->getUlParam('customers', 'customers_ul', true, $result['customers']);\n\t\t\t\t\t$domains = $this->getUlParam('domains', 'domains_ul', true, $result['domains']);\n\t\t\t\t\t$subdomains = $this->getUlParam('subdomains', 'subdomains_ul', true, $result['subdomains']);\n\t\t\t\t\t$emails = $this->getUlParam('emails', 'emails_ul', true, $result['emails']);\n\t\t\t\t\t$email_accounts = $this->getUlParam('email_accounts', 'email_accounts_ul', true, $result['email_accounts']);\n\t\t\t\t\t$email_forwarders = $this->getUlParam('email_forwarders', 'email_forwarders_ul', true, $result['email_forwarders']);\n\t\t\t\t\t$email_quota = $this->getUlParam('email_quota', 'email_quota_ul', true, $result['email_quota']);\n\t\t\t\t\t$ftps = $this->getUlParam('ftps', 'ftps_ul', true, $result['ftps']);\n\t\t\t\t\t$mysqls = $this->getUlParam('mysqls', 'mysqls_ul', true, $result['mysqls']);\n\n\t\t\t\t\t$customers_see_all = $this->getBoolParam('customers_see_all', true, $result['customers_see_all']);\n\t\t\t\t\t$caneditphpsettings = $this->getBoolParam('caneditphpsettings', true, $result['caneditphpsettings']);\n\t\t\t\t\t$change_serversettings = $this->getBoolParam('change_serversettings', true, $result['change_serversettings']);\n\t\t\t\t\t$ipaddress = $this->getParam('ipaddress', true, ($result['ip'] != -1 ? json_decode($result['ip'], true) : -1));\n\n\t\t\t\t\t$diskspace *= 1024;\n\t\t\t\t\t$traffic *= 1024 * 1024;\n\t\t\t\t}\n\n\t\t\t\t// validation\n\t\t\t\t$name = Validate::validate($name, 'name', Validate::REGEX_DESC_TEXT, '', [], true);\n\t\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t\t$email = $idna_convert->encode(Validate::validate($email, 'email', '', '', [], true));\n\t\t\t\t$def_language = Validate::validate($def_language, 'default language', '', '', [], true);\n\t\t\t\t$custom_notes = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $custom_notes ?? \"\"), 'custom_notes', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$theme = Validate::validate($theme, 'theme', '', '', [], true);\n\t\t\t\t$password = Validate::validate($password, 'password', '', '', [], true);\n\n\t\t\t\tif (Settings::Get('system.mail_quota_enabled') != '1') {\n\t\t\t\t\t$email_quota = -1;\n\t\t\t\t}\n\n\t\t\t\tif (empty($theme)) {\n\t\t\t\t\t$theme = Settings::Get('panel.default_theme');\n\t\t\t\t}\n\n\t\t\t\tif (empty(trim($name))) {\n\t\t\t\t\tResponse::standardError([\n\t\t\t\t\t\t'stringisempty',\n\t\t\t\t\t\t'admin.name'\n\t\t\t\t\t], '', true);\n\t\t\t\t}\n\t\t\t\tif (empty(trim($email))) {\n\t\t\t\t\tResponse::standardError([\n\t\t\t\t\t\t'stringisempty',\n\t\t\t\t\t\t'admin.email'\n\t\t\t\t\t], '', true);\n\t\t\t\t}\n\t\t\t\tif (!Validate::validateEmail($email)) {\n\t\t\t\t\tResponse::standardError('emailiswrong', $email, true);\n\t\t\t\t} else {\n\t\t\t\t\tif ($deactivated != '1') {\n\t\t\t\t\t\t$deactivated = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($customers_see_all != '1') {\n\t\t\t\t\t\t$customers_see_all = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($caneditphpsettings != '1') {\n\t\t\t\t\t\t$caneditphpsettings = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($change_serversettings != '1') {\n\t\t\t\t\t\t$change_serversettings = '0';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($password != '') {\n\t\t\t\t\t\t$password = Crypt::validatePassword($password, true);\n\t\t\t\t\t\t$password = Crypt::makeCryptPassword($password);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$password = $result['password'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// check if a resource was set to something lower\n\t\t\t\t\t// than actually used by the admin/reseller\n\t\t\t\t\t$res_warning = \"\";\n\t\t\t\t\tif ($customers != $result['customers'] && $customers != -1 && $customers < $result['customers_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['customers']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($domains != $result['domains'] && $domains != -1 && $domains < $result['domains_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['domains']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($diskspace != $result['diskspace'] && ($diskspace / 1024) != -1 && $diskspace < $result['diskspace_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['diskspace']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($traffic != $result['traffic'] && ($traffic / 1024 / 1024) != -1 && $traffic < $result['traffic_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['traffic']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($emails != $result['emails'] && $emails != -1 && $emails < $result['emails_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['emails']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_accounts != $result['email_accounts'] && $email_accounts != -1 && $email_accounts < $result['email_accounts_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['email accounts']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_forwarders != $result['email_forwarders'] && $email_forwarders != -1 && $email_forwarders < $result['email_forwarders_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['email forwarders']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($email_quota != $result['email_quota'] && $email_quota != -1 && $email_quota < $result['email_quota_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['email quota']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($ftps != $result['ftps'] && $ftps != -1 && $ftps < $result['ftps_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['ftps']);\n\t\t\t\t\t}\n\t\t\t\t\tif ($mysqls != $result['mysqls'] && $mysqls != -1 && $mysqls < $result['mysqls_used']) {\n\t\t\t\t\t\t$res_warning .= lng('error.setlessthanalreadyused', ['mysqls']);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!empty($res_warning)) {\n\t\t\t\t\t\tthrow new Exception($res_warning, 406);\n\t\t\t\t\t}\n\n\t\t\t\t\t$upd_data = [\n\t\t\t\t\t\t'password' => $password,\n\t\t\t\t\t\t'name' => $name,\n\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t'lang' => $def_language,\n\t\t\t\t\t\t'api_allowed' => $api_allowed,\n\t\t\t\t\t\t'change_serversettings' => $change_serversettings,\n\t\t\t\t\t\t'customers' => $customers,\n\t\t\t\t\t\t'customers_see_all' => $customers_see_all,\n\t\t\t\t\t\t'domains' => $domains,\n\t\t\t\t\t\t'caneditphpsettings' => $caneditphpsettings,\n\t\t\t\t\t\t'diskspace' => $diskspace,\n\t\t\t\t\t\t'traffic' => $traffic,\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t\t'quota' => $email_quota,\n\t\t\t\t\t\t'ftps' => $ftps,\n\t\t\t\t\t\t'mysqls' => $mysqls,\n\t\t\t\t\t\t'ip' => empty($ipaddress) ? \"\" : (is_array($ipaddress) && $ipaddress > 0 ? json_encode($ipaddress) : -1),\n\t\t\t\t\t\t'deactivated' => $deactivated,\n\t\t\t\t\t\t'custom_notes' => $custom_notes,\n\t\t\t\t\t\t'custom_notes_show' => $custom_notes_show,\n\t\t\t\t\t\t'theme' => $theme,\n\t\t\t\t\t\t'adminid' => $id\n\t\t\t\t\t];\n\n\t\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\t\tUPDATE `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t\t\t`password` = :password,\n\t\t\t\t\t\t`name` = :name,\n\t\t\t\t\t\t`email` = :email,\n\t\t\t\t\t\t`def_language` = :lang,\n\t\t\t\t\t\t`api_allowed` = :api_allowed,\n\t\t\t\t\t\t`change_serversettings` = :change_serversettings,\n\t\t\t\t\t\t`customers` = :customers,\n\t\t\t\t\t\t`customers_see_all` = :customers_see_all,\n\t\t\t\t\t\t`domains` = :domains,\n\t\t\t\t\t\t`caneditphpsettings` = :caneditphpsettings,\n\t\t\t\t\t\t`diskspace` = :diskspace,\n\t\t\t\t\t\t`traffic` = :traffic,\n\t\t\t\t\t\t`subdomains` = :subdomains,\n\t\t\t\t\t\t`emails` = :emails,\n\t\t\t\t\t\t`email_accounts` = :accounts,\n\t\t\t\t\t\t`email_forwarders` = :forwarders,\n\t\t\t\t\t\t`email_quota` = :quota,\n\t\t\t\t\t\t`ftps` = :ftps,\n\t\t\t\t\t\t`mysqls` = :mysqls,\n\t\t\t\t\t\t`ip` = :ip,\n\t\t\t\t\t\t`deactivated` = :deactivated,\n\t\t\t\t\t\t`custom_notes` = :custom_notes,\n\t\t\t\t\t\t`custom_notes_show` = :custom_notes_show,\n\t\t\t\t\t\t`theme` = :theme\n\t\t\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($upd_stmt, $upd_data, true, true);\n\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] edited admin '\" . $result['loginname'] . \"'\");\n\n\t\t\t\t\t// get all admin-data for return-array\n\t\t\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t\t\t'id' => $result['adminid']\n\t\t\t\t\t]);\n\t\t\t\t\treturn $this->response($result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * delete a admin entry by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the admin-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['adminid'];\n\n\t\t\t// don't be stupid\n\t\t\tif ($id == $this->getUserDetail('adminid')) {\n\t\t\t\tResponse::standardError('youcantdeleteyourself', '', true);\n\t\t\t}\n\t\t\t// can't delete the first superadmin\n\t\t\tif ($id == 1) {\n\t\t\t\tResponse::standardError('cannotdeletesuperadmin', '', true);\n\t\t\t}\n\n\t\t\t// delete admin\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete the traffic-usage\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TRAFFIC_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// set admin-id of the old admin's customer to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// set admin-id of the old admin's domains to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_DOMAINS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// delete old admin's api keys if exists (no customer keys)\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_API_KEYS . \"` WHERE\n\t\t\t\t`adminid` = :adminid AND `customerid` = '0'\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t// set admin-id of the old admin's api-keys to current admins\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_API_KEYS . \"` SET\n\t\t\t\t`adminid` = :userid WHERE `adminid` = :adminid\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'userid' => $this->getUserDetail('adminid'),\n\t\t\t\t'adminid' => $id\n\t\t\t], true, true);\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted admin '\" . $result['loginname'] . \"'\");\n\t\t\tUser::updateCounters();\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * unlock a locked admin by either id or loginname\n\t *\n\t * @param int $id\n\t *            optional, the admin-id\n\t * @param string $loginname\n\t *            optional, the loginname\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function unlock()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings') == 1) {\n\t\t\t$id = $this->getParam('id', true, 0);\n\t\t\t$ln_optional = $id > 0;\n\t\t\t$loginname = $this->getParam('loginname', $ln_optional, '');\n\n\t\t\t$result = $this->apiCall('Admins.get', [\n\t\t\t\t'id' => $id,\n\t\t\t\t'loginname' => $loginname\n\t\t\t]);\n\t\t\t$id = $result['adminid'];\n\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_ADMINS . \"` SET\n\t\t\t\t`loginfail_count` = '0'\n\t\t\t\tWHERE `adminid`= :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\t// set the new value for result-array\n\t\t\t$result['loginfail_count'] = 0;\n\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] unlocked admin '\" . $result['loginname'] . \"'\");\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Validate;\n\nuse Exception;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Idna\\IdnaWrapper;\nuse Froxlor\\System\\IPTools;\nuse Froxlor\\UI\\Response;\n\nclass Validate\n{\n\n\tconst REGEX_DIR = '/^|(\\/[\\w-]+)+$/';\n\n\tconst REGEX_PORT = '/^(([1-9])|([1-9][0-9])|([1-9][0-9][0-9])|([1-9][0-9][0-9][0-9])|([1-5][0-9][0-9][0-9][0-9])|(6[0-4][0-9][0-9][0-9])|(65[0-4][0-9][0-9])|(655[0-2][0-9])|(6553[0-5]))$/Di';\n\n\tconst REGEX_CONF_TEXT = '/^[^\\0]*$/';\n\n\tconst REGEX_DESC_TEXT = '/^[^\\0\\r\\n<>]*$/';\n\n\tconst REGEX_YYYY_MM_DD = '/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/';\n\n\t/**\n\t * Validates the given string by matching against the pattern, prints an error on failure and exits.\n\t * If the default pattern is used and the string does not match, we try to replace the 'bad' values and log the action.\n\t *\n\t * @param string $str the string to be tested (user input)\n\t * @param string $fieldname to be used in error messages\n\t * @param string $pattern the regular expression to be used for testing\n\t * @param string|array $lng id for the error\n\t * @param string|array $emptydefault fallback value\n\t * @param bool $throw_exception whether to display error or throw an exception, default false\n\t *\n\t * @return string|void the clean string or error\n\t * @throws Exception\n\t */\n\tpublic static function validate(\n\t\tstring $str,\n\t\tstring $fieldname,\n\t\tstring $pattern = '',\n\t\t$lng = '',\n\t\t$emptydefault = [],\n\t\tbool $throw_exception = false\n\t) {\n\t\tif (!is_array($emptydefault)) {\n\t\t\t$emptydefault_array = [\n\t\t\t\t$emptydefault\n\t\t\t];\n\t\t\tunset($emptydefault);\n\t\t\t$emptydefault = $emptydefault_array;\n\t\t\tunset($emptydefault_array);\n\t\t}\n\n\t\t// Check if the $str is one of the values which represent the default for an 'empty' value\n\t\tif (is_array($emptydefault) && !empty($emptydefault) && in_array($str, $emptydefault)) {\n\t\t\treturn $str;\n\t\t}\n\n\t\tif ($pattern == '') {\n\t\t\t$pattern = '/^[^\\r\\n\\t\\f\\0]*$/D';\n\n\t\t\tif (!preg_match($pattern, $str)) {\n\t\t\t\t// Allows letters a-z, digits, space (\\\\040), hyphen (\\\\-), underscore (\\\\_) and backslash (\\\\\\\\),\n\t\t\t\t// everything else is removed from the string.\n\t\t\t\t$allowed = \"/[^a-z0-9\\\\040\\\\.\\\\-\\\\_\\\\\\\\]/i\";\n\t\t\t\t$str = preg_replace($allowed, \"\", $str);\n\t\t\t\t$log = FroxlorLogger::getInstanceOf();\n\t\t\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_WARNING, \"cleaned bad formatted string (\" . $str . \")\");\n\t\t\t}\n\t\t}\n\n\t\tif (preg_match($pattern, $str)) {\n\t\t\treturn $str;\n\t\t}\n\n\t\tif ($lng == '') {\n\t\t\t$lng = 'stringformaterror';\n\t\t}\n\n\t\tResponse::standardError($lng, $fieldname, $throw_exception);\n\t}\n\n\t/**\n\t * Checks whether it is a valid ip\n\t *\n\t * @param string $ip ip-address to check\n\t * @param bool $return_bool whether to return bool or call \\Froxlor\\UI\\Response::standard_error()\n\t * @param string $lng index for error-message (if $return_bool is false)\n\t * @param bool $allow_localhost whether to allow 127.0.0.1\n\t * @param bool $allow_priv whether to allow private network addresses\n\t * @param bool $allow_cidr whether to allow CIDR values e.g. 10.10.10.10/16\n\t * @param bool $cidr_as_netmask whether to format CIDR notation to netmask notation\n\t * @param bool $throw_exception whether to throw an exception on failure\n\t *\n\t * @return string|bool|void ip address on success, false on failure (or nothing if error is displayed)\n\t * @throws Exception\n\t */\n\tpublic static function validate_ip2(\n\t\tstring $ip,\n\t\tbool $return_bool = false,\n\t\tstring $lng = 'invalidip',\n\t\tbool $allow_localhost = false,\n\t\tbool $allow_priv = false,\n\t\tbool $allow_cidr = false,\n\t\tbool $cidr_as_netmask = false,\n\t\tbool $throw_exception = false\n\t) {\n\t\t$cidr = \"\";\n\t\tif ($allow_cidr) {\n\t\t\t$org_ip = $ip;\n\t\t\t$ip_cidr = explode(\"/\", $ip);\n\t\t\tif (count($ip_cidr) === 2) {\n\t\t\t\t$cidr_range_max = 32;\n\t\t\t\tif (IPTools::is_ipv6($ip_cidr[0])) {\n\t\t\t\t\t$cidr_range_max = 128;\n\t\t\t\t}\n\t\t\t\tif (strlen($ip_cidr[1]) <= 3 && in_array((int)$ip_cidr[1], array_values(range(1, $cidr_range_max)),\n\t\t\t\t\t\ttrue) === false) {\n\t\t\t\t\tif ($return_bool) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tResponse::standardError($lng, $ip, $throw_exception);\n\t\t\t\t}\n\t\t\t\tif ($cidr_as_netmask && IPTools::is_ipv6($ip_cidr[0])) {\n\t\t\t\t\t// MySQL does not handle CIDR of IPv6 addresses, return error\n\t\t\t\t\tif ($return_bool) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tResponse::standardError($lng, $ip, $throw_exception);\n\t\t\t\t}\n\t\t\t\t$ip = $ip_cidr[0];\n\t\t\t\tif ($cidr_as_netmask && strlen($ip_cidr[1]) <= 3) {\n\t\t\t\t\t$ip_cidr[1] = IPTools::cidr2NetmaskAddr($org_ip);\n\t\t\t\t}\n\t\t\t\t$cidr = \"/\" . $ip_cidr[1];\n\t\t\t} else {\n\t\t\t\t$ip = $org_ip;\n\t\t\t}\n\t\t} elseif (strpos($ip, \"/\") !== false) {\n\t\t\tif ($return_bool) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tResponse::standardError($lng, $ip, $throw_exception);\n\t\t}\n\n\t\t$filter_lan = $allow_priv ? FILTER_FLAG_NO_RES_RANGE : (FILTER_FLAG_NO_RES_RANGE | FILTER_FLAG_NO_PRIV_RANGE);\n\n\t\tif ((filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) || filter_var($ip, FILTER_VALIDATE_IP,\n\t\t\t\t\tFILTER_FLAG_IPV4)) && filter_var($ip, FILTER_VALIDATE_IP, $filter_lan)) {\n\t\t\treturn $ip . $cidr;\n\t\t}\n\n\t\t// special case where localhost ip is allowed (mysql-access-hosts for example)\n\t\tif ($allow_localhost && $ip == '127.0.0.1') {\n\t\t\treturn $ip . $cidr;\n\t\t}\n\n\t\tif ($return_bool) {\n\t\t\treturn false;\n\t\t}\n\t\tResponse::standardError($lng, $ip, $throw_exception);\n\t}\n\n\t/**\n\t * Returns whether a URL is in a correct format or not\n\t *\n\t * @param string $url URL to be tested\n\t * @param bool $allow_private_ip optional, default is false\n\t *\n\t * @return bool\n\t */\n\tpublic static function validateUrl(string $url, bool $allow_private_ip = false): bool\n\t{\n\t\tif (strtolower(substr($url, 0, 7)) != \"http://\" && strtolower(substr($url, 0, 8)) != \"https://\") {\n\t\t\t$url = 'http://' . $url;\n\t\t}\n\n\t\t// needs converting\n\t\ttry {\n\t\t\t$idna_convert = new IdnaWrapper();\n\t\t\t$url = $idna_convert->encode($url);\n\t\t} catch (Exception $e) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($allow_private_ip) {\n\t\t\t$pattern = '%^(?:(?:https?):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$%iuS';\n\t\t} else {\n\t\t\t$pattern = '%^(?:(?:https?):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,})))(?::\\d{2,5})?(?:/[^\\s]*)?$%iuS';\n\t\t}\n\t\tif (preg_match($pattern, $url)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if the submitted string is a valid domainname\n\t *\n\t * @param string $domainname The domainname which should be checked.\n\t * @param bool $allow_underscore optional if true, allowes the underscore character in a domain label (DKIM etc.)\n\t *\n\t * @return string|boolean the domain-name if the domain is valid, false otherwise\n\t */\n\tpublic static function validateDomain(string $domainname, bool $allow_underscore = false)\n\t{\n\t\t$char_validation = '([a-z\\d](-*[a-z\\d])*)(\\.?([a-z\\d](-*[a-z\\d])*))*\\.(xn\\-\\-)?([a-z\\d])+';\n\t\tif ($allow_underscore) {\n\t\t\t$char_validation = '([a-z\\d\\_](-*[a-z\\d\\_])*)(\\.([a-z\\d\\_](-*[a-z\\d])*))*(\\.?([a-z\\d](-*[a-z\\d])*))+\\.(xn\\-\\-)?([a-z\\d])+';\n\t\t}\n\n\t\t// valid chars check && overall length check && length of each label\n\t\tif (preg_match(\"/^\" . $char_validation . \"$/i\", $domainname) && preg_match(\"/^.{1,253}$/\",\n\t\t\t\t$domainname) && preg_match(\"/^[^\\.]{1,63}(\\.[^\\.]{1,63})*$/\", $domainname)) {\n\t\t\treturn $domainname;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * validate a local-hostname by regex\n\t *\n\t * @param string $hostname\n\t *\n\t * @return string|boolean hostname on success, else false\n\t */\n\tpublic static function validateLocalHostname(string $hostname)\n\t{\n\t\t$pattern = '/^[a-z0-9][a-z0-9\\-]{0,62}$/i';\n\t\tif (preg_match($pattern, $hostname)) {\n\t\t\treturn $hostname;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if an email-address is in correct format or not\n\t *\n\t * @param string $email The email address to check\n\t *\n\t * @return mixed\n\t */\n\tpublic static function validateEmail(string $email)\n\t{\n\t\t$email = strtolower($email);\n\t\t// as of php-7.1\n\t\tif (defined('FILTER_FLAG_EMAIL_UNICODE')) {\n\t\t\treturn filter_var($email, FILTER_VALIDATE_EMAIL, FILTER_FLAG_EMAIL_UNICODE);\n\t\t}\n\t\treturn filter_var($email, FILTER_VALIDATE_EMAIL);\n\t}\n\n\t/**\n\t * Returns if a username is in correct format or not.\n\t *\n\t * @param string $username The username to check\n\t * @param bool $unix_names optional, default true, checks whether it must be UNIX compatible\n\t * @param int $mysql_max optional, number of max mysql username characters, default empty\n\t *\n\t * @return bool\n\t */\n\tpublic static function validateUsername(string $username, bool $unix_names = true, int $mysql_max = 0): bool\n\t{\n\t\tif (empty($mysql_max) || $mysql_max <= 0) {\n\t\t\t$mysql_max = Database::getSqlUsernameLength() - 1;\n\t\t} else {\n\t\t\t$mysql_max--;\n\t\t}\n\t\tif (!$unix_names) {\n\t\t\tif (strpos($username, '--') === false) {\n\t\t\t\treturn (preg_match('/^[a-z][a-z0-9\\-_]{0,' . $mysql_max . '}[a-z0-9]{1}$/Di', $username) != false);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn (preg_match('/^[a-z][a-z0-9]{0,' . $mysql_max . '}$/Di', $username) != false);\n\t}\n\n\t/**\n\t * validate sql interval string\n\t *\n\t * @param string $interval\n\t *\n\t * @return bool\n\t */\n\tpublic static function validateSqlInterval(string $interval = ''): bool\n\t{\n\t\tif (!empty($interval) && strstr($interval, ' ') !== false) {\n\t\t\t/*\n\t\t\t * [0] = ([0-9]+)\n\t\t\t * [1] = valid SQL-Interval expression\n\t\t\t */\n\t\t\t$valid_expr = [\n\t\t\t\t'SECOND',\n\t\t\t\t'MINUTE',\n\t\t\t\t'HOUR',\n\t\t\t\t'DAY',\n\t\t\t\t'WEEK',\n\t\t\t\t'MONTH',\n\t\t\t\t'YEAR'\n\t\t\t];\n\n\t\t\t$interval_parts = explode(' ', $interval);\n\n\t\t\tif (count($interval_parts) == 2 && preg_match('/[0-9]+/',\n\t\t\t\t\t$interval_parts[0]) && in_array(strtoupper($interval_parts[1]), $valid_expr)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * validates whether a given base64 string decodes to an image\n\t *\n\t * @param string $base64string\n\t * @return bool\n\t * @throws Exception\n\t */\n\tpublic static function validateBase64Image(string $base64string) {\n\n\t\tif (!extension_loaded('gd')) {\n\t\t\tResponse::standardError('phpgdextensionnotavailable', null, true);\n\t\t}\n\n\t\t// Decode the base64 string\n\t\t$data = base64_decode($base64string);\n\n\t\t// Create an image from the decoded data\n\t\t$image = @imagecreatefromstring($data);\n\n\t\t// Check if the image was created successfully\n\t\tif (!$image) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Get the MIME type of the image\n\t\t$mime = image_type_to_mime_type(getimagesizefromstring($data)[2]);\n\n\t\t// Check if the MIME type is a valid image MIME type\n\t\tif (strpos($mime, 'image/') !== 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If everything is okay, return true\n\t\treturn true;\n\t}\n}\n"], "filenames": ["lib/Froxlor/Api/ApiParameter.php", "lib/Froxlor/Api/Commands/Admins.php", "lib/Froxlor/Validate/Validate.php"], "buggy_code_start_loc": [42, 586, 263], "buggy_code_end_loc": [187, 586, 264], "fixing_code_start_loc": [42, 587, 263], "fixing_code_end_loc": [187, 599, 264], "type": "NVD-CWE-noinfo", "message": "Business Logic Errors in GitHub repository froxlor/froxlor prior to 2.0.22,2.1.0.\n\n", "other": {"cve": {"id": "CVE-2023-4304", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-11T01:15:09.437", "lastModified": "2023-12-18T11:15:13.893", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository froxlor/froxlor prior to 2.0.22,2.1.0.\n\n"}, {"lang": "es", "value": "Errores de l\u00f3gica de negocio en el repositorio GitHub froxlor/froxlor anterior a 2.0.22,2.1.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.7, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}, {"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.8, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 2.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.22", "matchCriteriaId": "3A1F0C8D-0EC2-4AEF-8800-3FCE3B9D9240"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/ce9a5f97a3edb30c7d33878765d3c014a6583597", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/59fe5037-b253-4b0f-be69-1d2e4af8b4a9", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/ce9a5f97a3edb30c7d33878765d3c014a6583597"}}